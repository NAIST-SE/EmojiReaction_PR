the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,506,2016-03-04T11:36:05Z,2017-01-18T02:50:41Z,2017-01-18T02:50:41Z,CLOSED,False,1,0,1,https://github.com/stevekay,Fixes issue where statistics not reported when -G and -W options used,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/506,https://github.com/stevekay,1,https://github.com/the-tcpdump-group/tcpdump/pull/506,"Added missing call to info().
#503","Added missing call to info().
#503",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,506,2016-03-04T11:36:05Z,2017-01-18T02:50:41Z,2017-01-18T02:50:41Z,CLOSED,False,1,0,1,https://github.com/stevekay,Fixes issue where statistics not reported when -G and -W options used,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/506,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/506#issuecomment-273368264,"Added missing call to info().
#503",Version with the conflicts resolved committed as bb6a081.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,508,2016-03-17T19:35:18Z,2016-03-20T22:23:32Z,2016-03-24T19:31:44Z,CLOSED,False,0,2,1,https://github.com/ryancdotorg,Don't recompile filter for every file.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/508,https://github.com/ryancdotorg,1,https://github.com/the-tcpdump-group/tcpdump/pull/508,"When reading multiple files using the -V option, the filter should be compiled once and reused since there is no way to change it between files.
This will substantially speed things up when operating on a large number of small pcap files with a complicated filter.","When reading multiple files using the -V option, the filter should be compiled once and reused since there is no way to change it between files.
This will substantially speed things up when operating on a large number of small pcap files with a complicated filter.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,508,2016-03-17T19:35:18Z,2016-03-20T22:23:32Z,2016-03-24T19:31:44Z,CLOSED,False,0,2,1,https://github.com/ryancdotorg,Don't recompile filter for every file.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/508,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/508#issuecomment-198834687,"When reading multiple files using the -V option, the filter should be compiled once and reused since there is no way to change it between files.
This will substantially speed things up when operating on a large number of small pcap files with a complicated filter.","What if file N+1 has a different link-layer header type than file N?  You have to recompile it in that case.
You could recompile if the link-layer header type isn't the same as the previous one, although that won't help if you have a mix of files with DLT_a and DLT_b, alternating between them; if that case is worth worrying about, you could cache the results of the compilations, with a key of the DLT_ value.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,508,2016-03-17T19:35:18Z,2016-03-20T22:23:32Z,2016-03-24T19:31:44Z,CLOSED,False,0,2,1,https://github.com/ryancdotorg,Don't recompile filter for every file.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/508,https://github.com/ryancdotorg,3,https://github.com/the-tcpdump-group/tcpdump/pull/508#issuecomment-198839070,"When reading multiple files using the -V option, the filter should be compiled once and reused since there is no way to change it between files.
This will substantially speed things up when operating on a large number of small pcap files with a complicated filter.","It looks like there is already code that rejects files with a different link type header. If I misread that, I will modify this to reuse the compiled filter only if the new file has the same link type.
On March 19, 2016 9:41:16 PM CDT, Guy Harris notifications@github.com wrote:

What if file N+1 has a different link-layer header type than file N?
You have to recompile it in that case.
You could recompile if the link-layer header type isn't the same as the
previous one, although that won't help if you have a mix of files with
DLT_a and DLT_b, alternating between them; if that case is worth
worrying about, you could cache the results of the compilations, with a
key of the DLT_ value.

You are receiving this because you authored the thread.
Reply to this email directly or view it on GitHub:
#508 (comment)


Sent from my Android device with K-9 Mail. Please excuse my brevity.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,508,2016-03-17T19:35:18Z,2016-03-20T22:23:32Z,2016-03-24T19:31:44Z,CLOSED,False,0,2,1,https://github.com/ryancdotorg,Don't recompile filter for every file.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/508,https://github.com/ryancdotorg,4,https://github.com/the-tcpdump-group/tcpdump/pull/508#issuecomment-198917132,"When reading multiple files using the -V option, the filter should be compiled once and reused since there is no way to change it between files.
This will substantially speed things up when operating on a large number of small pcap files with a complicated filter.","@guyharris I just checked the code in tcpdump.c, it is calling error() (which exits the program) if the data link type is not the same between files, so the modification in this pull request should be safe.
Now that I look at it again, it looks like the calls to get_if_printer and pcap_datalink_val_to_name may also be redundant (but probably fast enough not to worry about).
The relevant code:

  
    
      tcpdump/tcpdump.c
    
    
         Line 1818
      in
      91983fa
    
  
  
    

        
          
           new_dlt = pcap_datalink(pd);",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,508,2016-03-17T19:35:18Z,2016-03-20T22:23:32Z,2016-03-24T19:31:44Z,CLOSED,False,0,2,1,https://github.com/ryancdotorg,Don't recompile filter for every file.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/508,https://github.com/mcr,5,https://github.com/the-tcpdump-group/tcpdump/pull/508#issuecomment-199030161,"When reading multiple files using the -V option, the filter should be compiled once and reused since there is no way to change it between files.
This will substantially speed things up when operating on a large number of small pcap files with a complicated filter.","RyanC notifications@github.com wrote:
> It looks like there is already code that rejects files with a
> different link type header. If I misread that, I will modify this to
> reuse the compiled filter only if the new file has the same link type.
That sounds like it gets 99% of the benefit of keeping the filter.
In the pathological case Gui pointed out of alternating, then a 2-deep cache
would solve it... but no-premature optimization :-)
Can you provide a test case for tests/ with pcap files of identical and
different link types?

]               Never tell me the odds!                 | ipv6 mesh networks [
]   Michael Richardson, Sandelman Software Works        | network architect  [
]     mcr@sandelman.ca  http://www.sandelman.ca/        |   ruby on rails    [",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,508,2016-03-17T19:35:18Z,2016-03-20T22:23:32Z,2016-03-24T19:31:44Z,CLOSED,False,0,2,1,https://github.com/ryancdotorg,Don't recompile filter for every file.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/508,https://github.com/guyharris,6,https://github.com/the-tcpdump-group/tcpdump/pull/508#issuecomment-199044649,"When reading multiple files using the -V option, the filter should be compiled once and reused since there is no way to change it between files.
This will substantially speed things up when operating on a large number of small pcap files with a complicated filter.","The check in question was added in 5d289db, and the comment for it says ""If when writing an output file, error if the DLT of subsequent files is not the same as the original.""
The check only fails if WFileName is non-null, i.e. if we're reading multiple files and writing the raw packets to a pcap file.  As pcap files don't support multiple link-layer header types, we can't support that.
However, if we're printing packet data as text, we can support that, and, as his change explicitly checks for writing raw packet data, presumably it was the intent of the change to support that.
So we really shouldn't fail if WFileName is non-null and the DLT changed, and we should change the filter.
I'm working on a simple fix that recompiles the filter if and only if the DLT changed.  We can add further optimization if people complain.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,508,2016-03-17T19:35:18Z,2016-03-20T22:23:32Z,2016-03-24T19:31:44Z,CLOSED,False,0,2,1,https://github.com/ryancdotorg,Don't recompile filter for every file.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/508,https://github.com/ryancdotorg,7,https://github.com/the-tcpdump-group/tcpdump/pull/508#issuecomment-199047291,"When reading multiple files using the -V option, the filter should be compiled once and reused since there is no way to change it between files.
This will substantially speed things up when operating on a large number of small pcap files with a complicated filter.","Ah, I tested it, and you're right - the dlt can change between files if one is just printing the packets. I think recompiling to filter if and only if the dlt changes is probably great for > 99% of cases.
FWIW, the motivation behind this is an experience (several years ago) where I had several months worth of pcap files, with 60 seconds of traffic each, and a complicated filter - something like 80% of the processing was the filters.
I actually solved that problem at the time by writing a patch to tcpdump to allow the -F option to load a pre-compiled filter, but the motivating use cases is solved with a -V option that will reuse the filter.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,508,2016-03-17T19:35:18Z,2016-03-20T22:23:32Z,2016-03-24T19:31:44Z,CLOSED,False,0,2,1,https://github.com/ryancdotorg,Don't recompile filter for every file.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/508,https://github.com/guyharris,8,https://github.com/the-tcpdump-group/tcpdump/pull/508#issuecomment-199047562,"When reading multiple files using the -V option, the filter should be compiled once and reused since there is no way to change it between files.
This will substantially speed things up when operating on a large number of small pcap files with a complicated filter.",Should be fixed by 3213837.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,508,2016-03-17T19:35:18Z,2016-03-20T22:23:32Z,2016-03-24T19:31:44Z,CLOSED,False,0,2,1,https://github.com/ryancdotorg,Don't recompile filter for every file.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/508,https://github.com/ryancdotorg,9,https://github.com/the-tcpdump-group/tcpdump/pull/508#issuecomment-199048627,"When reading multiple files using the -V option, the filter should be compiled once and reused since there is no way to change it between files.
This will substantially speed things up when operating on a large number of small pcap files with a complicated filter.",@guyharris Doesn't the pcap_setfilter call need to be made regardless of whether the dlt changes?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,508,2016-03-17T19:35:18Z,2016-03-20T22:23:32Z,2016-03-24T19:31:44Z,CLOSED,False,0,2,1,https://github.com/ryancdotorg,Don't recompile filter for every file.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/508,https://github.com/guyharris,10,https://github.com/the-tcpdump-group/tcpdump/pull/508#issuecomment-199056000,"When reading multiple files using the -V option, the filter should be compiled once and reused since there is no way to change it between files.
This will substantially speed things up when operating on a large number of small pcap files with a complicated filter.",Yes.  Fixed in c66320c.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,509,2016-03-17T19:48:43Z,2016-03-17T20:57:04Z,2016-03-17T20:57:04Z,CLOSED,False,15,1,1,https://github.com/ryancdotorg,enable unprivileged compile and dump of bpf,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/509,https://github.com/ryancdotorg,1,https://github.com/the-tcpdump-group/tcpdump/pull/509,This allows the -d option of tcpdump to be used in conjunction with the -y option by an unprivileged user.,This allows the -d option of tcpdump to be used in conjunction with the -y option by an unprivileged user.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/Wilm0r,1,https://github.com/the-tcpdump-group/tcpdump/pull/510,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.","Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/Wilm0r,2,https://github.com/the-tcpdump-group/tcpdump/pull/510#issuecomment-208430289,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.","I've merged recent changes, this PR should apply cleanly against master now.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/510#issuecomment-230150390,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.","Regarding the port numbers, getservbyname() use would not be a good idea because its return value generally may be (and practice will be) volatile and inconsistent across different hosts. tcpdump may be run on a host different from the one that did tunnel termination and the one that did the packet capture.
Section 5.6.2 of the Internet-Draft discusses a use of a magic number. That may be a more reliable means of telling the packets apart but the spec would need to have it as a normative statement rather than as a potential future approach. Maybe you would like to discuss this with the document authors as the root of the problem seems to be there. The magic number support in tcpdump should not be difficult per se.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/Wilm0r,4,https://github.com/the-tcpdump-group/tcpdump/pull/510#issuecomment-230849041,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.","Regarding magic numbers, I'm told that's most likely going to get removed from the next draft version, so better not to add support for it.
So what I'll do is add support for version 1 and squash the commits back into one.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/Wilm0r,5,https://github.com/the-tcpdump-group/tcpdump/pull/510#issuecomment-251730522,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.","Sorry for the long delay on this :-(
So magic numbers are going to get removed, I think it should be okay to not support those then?
And for GUEv1, I've tried to get example dumps but no response so far. One may be able to generate them using a very recent Linux kernel, but I'd rather not do this myself, not being all that familiar with GUEv1 in particular..",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/infrastation,6,https://github.com/the-tcpdump-group/tcpdump/pull/510#issuecomment-251805705,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.",Thank you for the update. It would make it easier to review further with the new code rebased on the current master branch.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/Wilm0r,7,https://github.com/the-tcpdump-group/tcpdump/pull/510#issuecomment-251829092,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.","But of course, I was planning to do a merge but wanted to ask first how strongly you feel about the GUEv1 support.
Merged now. Not all tests pass, but the failing ones are not GUE and are failing in the parent branch as well. :-(
I'd squash this branch but I think Github can do that for you at merge time now?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/fxlb,8,https://github.com/the-tcpdump-group/tcpdump/pull/510#issuecomment-251909369,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.","Some warnings here: https://travis-ci.org/the-tcpdump-group/tcpdump/jobs/165389888
./print-gue.c: In function ‘gue_print_0’:
./print-gue.c:119:2: warning: C++ style comments are not allowed in ISO C90 [enabled by default]
./print-gue.c:119:2: warning: (this will be reported only once per input file) [enabled by default]
./print-gue.c:93:8: warning: unused variable ‘control’ [-Wunused-variable]",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/Wilm0r,9,https://github.com/the-tcpdump-group/tcpdump/pull/510#issuecomment-252176615,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.","Oops, yeah those didn't appear during my local build. :-/ Fixed and the current build at https://travis-ci.org/the-tcpdump-group/tcpdump/jobs/165633760 looks clean now.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/Wilm0r,10,https://github.com/the-tcpdump-group/tcpdump/pull/510#issuecomment-271268093,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.","So is it okay to merge this one with just GUEv0, not v1? I've not been able to get dumps of GUEv1 traffic so far..",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/infrastation,11,https://github.com/the-tcpdump-group/tcpdump/pull/510#issuecomment-362391490,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.",Could you rebase this on the current master branch?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/Wilm0r,12,https://github.com/the-tcpdump-group/tcpdump/pull/510#issuecomment-367078135,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.",Sorry for the delay - I'll try to do this in a few days when I get back into the office. (Been out for a while.),True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/infrastation,13,https://github.com/the-tcpdump-group/tcpdump/pull/510#issuecomment-367149384,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.","Sure, take your time.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/guyharris,14,https://github.com/the-tcpdump-group/tcpdump/pull/510#issuecomment-376275170,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.",You need to update CMakeLists.txt to include print-gue.c as well.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/Wilm0r,15,https://github.com/the-tcpdump-group/tcpdump/pull/510#issuecomment-376350624,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.","Oh, thanks for the hint. I was still trying to update the range checking to use your ND_T(TEST|CHECK) macros as well but couldn't fully figure them out. :-( (CHECK vs TEST and also what to do for the check on length>=sizeof(struct ip))",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/infrastation,16,https://github.com/the-tcpdump-group/tcpdump/pull/510#issuecomment-955789544,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.","@Wilm0r, if you wish to resume this work, please update this pull request within 14 days. Otherwise it will be closed.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/fxlb,17,https://github.com/the-tcpdump-group/tcpdump/pull/510#issuecomment-957884808,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.","FYI, this is an expired Internet-Draft.
draft-ietf-nvo3-gue-02 -> draft-ietf-intarea-gue-09
(https://datatracker.ietf.org/doc/draft-ietf-intarea-gue/)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/Wilm0r,18,https://github.com/the-tcpdump-group/tcpdump/pull/510#issuecomment-957894512,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.","Correct, there seem to be two versions now. I'll see whether I can get this PR back into decent shape, and how to deal with the versions/support both of them at all. Don't know which one's more common.
I think the two protocols aren't really compatible nor are they detectable easily except maybe with heuristics. Would the usual tcpdump solution be to just name them separately, for example gue0 and gue1 ?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/fxlb,19,https://github.com/the-tcpdump-group/tcpdump/pull/510#issuecomment-957920165,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.","I'll see whether I can get this PR back into decent shape

Is it useful for an expired draft?
If this specification is useful to you, why not find some people to revive it.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/fxlb,20,https://github.com/the-tcpdump-group/tcpdump/pull/510#issuecomment-957981733,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.","there seem to be two versions now.

Do you have specifications about these versions/variants?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/infrastation,21,https://github.com/the-tcpdump-group/tcpdump/pull/510#issuecomment-960758432,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.","@Wilm0r, in case you don't have the motivation to follow the developments of this protocol design closely, it is OK not to implement it, and to get something else done instead. Often it is better not to have a particular protocol support at all than to have out of date code and the cost of its maintenance.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/Wilm0r,22,https://github.com/the-tcpdump-group/tcpdump/pull/510#issuecomment-974323096,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.","Sorry for losing track of this again.
I agree, I don't want to contribute code that is prone to rot. What I will try to do is figure out the status of GUEv0 vs v1 and see what is wise here. AFAIK (and I should add that at work I'm not actually that close to this project/development (anymore)) GUE is definitely used more widely including by some hardware so support would be useful, but I'll need to figure out which of the two versions.
Feel free to close this PR if you've lost patience, I can reopen/open a new one if needed. I'll obviously need to deal with a pretty intense merge anyway.
BTW, my main worry for this one is that GUE can be on ~any port#. (We use a privileged <1024 port instead of the IANA-reserved one ourselves.) When I wrote this patch, tcpdump didn't really support ""use this port#"" arguments for decoders (while Wireshark does have ""reinterpret this stream as protocol X"" for example), possibly this has changed?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/infrastation,23,https://github.com/the-tcpdump-group/tcpdump/pull/510#issuecomment-974395645,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.","The traditional workaround to decode a protocol of interest on a non-standard UDP port would be along the lines of tcpdump -T gue udp port NNNN, which would obviously exclude decoding all other traffic, but would be better than nothing.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/infrastation,24,https://github.com/the-tcpdump-group/tcpdump/pull/510#issuecomment-974514727,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.","If in 14 days it is still not clear how to progress this matter in a constructive way, it will be better to close this request.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/infrastation,25,https://github.com/the-tcpdump-group/tcpdump/pull/510#issuecomment-980440736,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.","For reference, a potential alternative way to apply dissectors to non-standard ports was discussed in #495.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,510,2016-03-18T17:38:45Z,2021-12-04T14:11:44Z,2021-12-04T14:11:44Z,CLOSED,False,261,0,9,https://github.com/Wilm0r,GUE dissection support,7,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/510,https://github.com/infrastation,26,https://github.com/the-tcpdump-group/tcpdump/pull/510#issuecomment-986034395,"Hello,
Here's a patch adding support for GUE (Generic UDP Encapsulation) to tcpdump. The spec can be found at: https://tools.ietf.org/html/draft-ietf-nvo3-gue-02 (header format in 2.2).
This is fairly basic but will show dissection of inner IPv4/IPv6 packets assuming GUE is indeed configured on the officially allocated port 6080. Sadly this is not going to be a firm standard (for example one may want to use a privileged <1024 port instead for security reasons), so I wonder whether, for example, using getservbyname() instead of hardcoded port numbers would be acceptable? There's no prior art for this in your code yet from what I can tell which is why I haven't done this yet.
Kind regards,
Wilmer van der Gaast.",It is time.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,512,2016-04-07T08:49:50Z,,2019-03-20T21:23:22Z,OPEN,False,353,70,10,https://github.com/argggh,"When -E and -w is given, dump decrypted packets as well",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/512,https://github.com/argggh,1,https://github.com/the-tcpdump-group/tcpdump/pull/512,"This is a shot at resolving #279, adjusting what was proposed at https://sourceforge.net/p/tcpdump/patches/120/.","This is a shot at resolving #279, adjusting what was proposed at https://sourceforge.net/p/tcpdump/patches/120/.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,515,2016-04-26T18:45:30Z,2016-04-26T19:05:45Z,2016-04-26T19:05:45Z,MERGED,True,9,9,1,https://github.com/adarqui,Just fixes a few typos and grammatical issues,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/515,https://github.com/adarqui,1,https://github.com/the-tcpdump-group/tcpdump/pull/515,"Hey everyone,
Just had this lying around when I was reading the CONTRIBUTING file way back. Nothing special, just a few typo/grammar fixes.
Thanks!
-- Andrew","Hey everyone,
Just had this lying around when I was reading the CONTRIBUTING file way back. Nothing special, just a few typo/grammar fixes.
Thanks!
-- Andrew",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,517,2016-05-05T19:43:14Z,2016-11-01T15:08:24Z,2016-11-01T15:09:34Z,MERGED,True,10,2,2,https://github.com/pLuster,Correct TCP option Kind value for TCP Auth and add SCPS-TP.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/517,https://github.com/pLuster,1,https://github.com/the-tcpdump-group/tcpdump/pull/517,"Fixes first problem in issue #516 while the second one isn't broken in tcpdump.
https://www.iana.org/assignments/tcp-parameters/tcp-parameters.xhtml
See section 3.2.3 on page 20 in http://public.ccsds.org/publications/archive/714x0b2.pdf
Review carefully because I haven't been able to test it with TCP Auth and SCPS-TP packets.","Fixes first problem in issue #516 while the second one isn't broken in tcpdump.
https://www.iana.org/assignments/tcp-parameters/tcp-parameters.xhtml
See section 3.2.3 on page 20 in http://public.ccsds.org/publications/archive/714x0b2.pdf
Review carefully because I haven't been able to test it with TCP Auth and SCPS-TP packets.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,517,2016-05-05T19:43:14Z,2016-11-01T15:08:24Z,2016-11-01T15:09:34Z,MERGED,True,10,2,2,https://github.com/pLuster,Correct TCP option Kind value for TCP Auth and add SCPS-TP.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/517,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/517#issuecomment-257591285,"Fixes first problem in issue #516 while the second one isn't broken in tcpdump.
https://www.iana.org/assignments/tcp-parameters/tcp-parameters.xhtml
See section 3.2.3 on page 20 in http://public.ccsds.org/publications/archive/714x0b2.pdf
Review carefully because I haven't been able to test it with TCP Auth and SCPS-TP packets.",Minor correction: the SCPS spec has moved.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,517,2016-05-05T19:43:14Z,2016-11-01T15:08:24Z,2016-11-01T15:09:34Z,MERGED,True,10,2,2,https://github.com/pLuster,Correct TCP option Kind value for TCP Auth and add SCPS-TP.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/517,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/517#issuecomment-257591802,"Fixes first problem in issue #516 while the second one isn't broken in tcpdump.
https://www.iana.org/assignments/tcp-parameters/tcp-parameters.xhtml
See section 3.2.3 on page 20 in http://public.ccsds.org/publications/archive/714x0b2.pdf
Review carefully because I haven't been able to test it with TCP Auth and SCPS-TP packets.",I have studied the spec and found that the proposed change implements the SCPS part of the issue discussed in #516 right. Thank you!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,518,2016-05-08T23:27:57Z,,2020-08-28T20:22:49Z,OPEN,False,255,202,18,https://github.com/biot,Add autoconf option to enable a stripped down build.,1,"['feature request', 'compiling']",https://github.com/the-tcpdump-group/tcpdump/pull/518,https://github.com/biot,1,https://github.com/the-tcpdump-group/tcpdump/pull/518,"The --enable-minimal option to configure reduces the list of dissectors to a smaller set, the minimum needed to bring up an embedded system.
This produces a smaller tcpdump binary, something that is very useful on small embedded systems, such as SOHO routers. Size reduction is 45-50%, depending on architecture. OpenWrt currently has a similar patch for an older version, but cannot upgrade to current tcpdump with it. Other embedded distributions like Buildroot and Yocto would greatly benefit from this patch as well.
The patch necessarily introduces a lot of #ifdefs to various dissectors. Those can be reduced by grouping together non-minimal functions in dissectors files. I did it this way in print.c for example. Please let me know if that's your preference, happy to respin.","The --enable-minimal option to configure reduces the list of dissectors to a smaller set, the minimum needed to bring up an embedded system.
This produces a smaller tcpdump binary, something that is very useful on small embedded systems, such as SOHO routers. Size reduction is 45-50%, depending on architecture. OpenWrt currently has a similar patch for an older version, but cannot upgrade to current tcpdump with it. Other embedded distributions like Buildroot and Yocto would greatly benefit from this patch as well.
The patch necessarily introduces a lot of #ifdefs to various dissectors. Those can be reduced by grouping together non-minimal functions in dissectors files. I did it this way in print.c for example. Please let me know if that's your preference, happy to respin.",True,{'THUMBS_UP': ['https://github.com/mcr']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,518,2016-05-08T23:27:57Z,,2020-08-28T20:22:49Z,OPEN,False,255,202,18,https://github.com/biot,Add autoconf option to enable a stripped down build.,1,"['feature request', 'compiling']",https://github.com/the-tcpdump-group/tcpdump/pull/518,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/518#issuecomment-409493813,"The --enable-minimal option to configure reduces the list of dissectors to a smaller set, the minimum needed to bring up an embedded system.
This produces a smaller tcpdump binary, something that is very useful on small embedded systems, such as SOHO routers. Size reduction is 45-50%, depending on architecture. OpenWrt currently has a similar patch for an older version, but cannot upgrade to current tcpdump with it. Other embedded distributions like Buildroot and Yocto would greatly benefit from this patch as well.
The patch necessarily introduces a lot of #ifdefs to various dissectors. Those can be reduced by grouping together non-minimal functions in dissectors files. I did it this way in print.c for example. Please let me know if that's your preference, happy to respin.","This idea looks useful to me. One nit: it would be better to rename the macro to ND_MINIMAL or even to something like ND_PROFILE, in the latter case defaulting its value to ""full"" and allowing to set it to ""minimal"" (or ""embedded""), such that in future it would be easier to add another profile that sits somewhere in between. Would you like to respin this change?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,518,2016-05-08T23:27:57Z,,2020-08-28T20:22:49Z,OPEN,False,255,202,18,https://github.com/biot,Add autoconf option to enable a stripped down build.,1,"['feature request', 'compiling']",https://github.com/the-tcpdump-group/tcpdump/pull/518,https://github.com/biot,3,https://github.com/the-tcpdump-group/tcpdump/pull/518#issuecomment-409931015,"The --enable-minimal option to configure reduces the list of dissectors to a smaller set, the minimum needed to bring up an embedded system.
This produces a smaller tcpdump binary, something that is very useful on small embedded systems, such as SOHO routers. Size reduction is 45-50%, depending on architecture. OpenWrt currently has a similar patch for an older version, but cannot upgrade to current tcpdump with it. Other embedded distributions like Buildroot and Yocto would greatly benefit from this patch as well.
The patch necessarily introduces a lot of #ifdefs to various dissectors. Those can be reduced by grouping together non-minimal functions in dissectors files. I did it this way in print.c for example. Please let me know if that's your preference, happy to respin.","I've rebased the patch to master, and changed it to ND_MINIMAL. Binary size is about half with the minimal build.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,518,2016-05-08T23:27:57Z,,2020-08-28T20:22:49Z,OPEN,False,255,202,18,https://github.com/biot,Add autoconf option to enable a stripped down build.,1,"['feature request', 'compiling']",https://github.com/the-tcpdump-group/tcpdump/pull/518,https://github.com/mcr,4,https://github.com/the-tcpdump-group/tcpdump/pull/518#issuecomment-418760537,"The --enable-minimal option to configure reduces the list of dissectors to a smaller set, the minimum needed to bring up an embedded system.
This produces a smaller tcpdump binary, something that is very useful on small embedded systems, such as SOHO routers. Size reduction is 45-50%, depending on architecture. OpenWrt currently has a similar patch for an older version, but cannot upgrade to current tcpdump with it. Other embedded distributions like Buildroot and Yocto would greatly benefit from this patch as well.
The patch necessarily introduces a lot of #ifdefs to various dissectors. Those can be reduced by grouping together non-minimal functions in dissectors files. I did it this way in print.c for example. Please let me know if that's your preference, happy to respin.",We intend to merge this as soon as some other more fragile security related changes have been merged.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,518,2016-05-08T23:27:57Z,,2020-08-28T20:22:49Z,OPEN,False,255,202,18,https://github.com/biot,Add autoconf option to enable a stripped down build.,1,"['feature request', 'compiling']",https://github.com/the-tcpdump-group/tcpdump/pull/518,https://github.com/infrastation,5,https://github.com/the-tcpdump-group/tcpdump/pull/518#issuecomment-682499480,"The --enable-minimal option to configure reduces the list of dissectors to a smaller set, the minimum needed to bring up an embedded system.
This produces a smaller tcpdump binary, something that is very useful on small embedded systems, such as SOHO routers. Size reduction is 45-50%, depending on architecture. OpenWrt currently has a similar patch for an older version, but cannot upgrade to current tcpdump with it. Other embedded distributions like Buildroot and Yocto would greatly benefit from this patch as well.
The patch necessarily introduces a lot of #ifdefs to various dissectors. Those can be reduced by grouping together non-minimal functions in dissectors files. I did it this way in print.c for example. Please let me know if that's your preference, happy to respin.","I have to some extent rebased the proposed change in my working copy, it is now 230 commits ahead (was August 2018, now March 2019), but this pull request does not allow me to force-push into the biot:mini branch. I can make another rebase round later or I can hand the intermediate result over to whoever has time and interest to do it now.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,519,2016-05-16T18:26:52Z,2016-05-16T18:42:28Z,2016-05-16T18:42:28Z,MERGED,True,1,1,1,https://github.com/dionbosschieter,Change -z command help text to -z postrotate-command,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/519,https://github.com/dionbosschieter,1,https://github.com/the-tcpdump-group/tcpdump/pull/519,"Update helper text to be more descriptive about the ""-z command"" option.
Just like http://www.tcpdump.org/tcpdump_man.html","Update helper text to be more descriptive about the ""-z command"" option.
Just like http://www.tcpdump.org/tcpdump_man.html",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,526,2016-06-29T23:17:22Z,2016-06-30T00:36:08Z,2016-06-30T00:36:08Z,MERGED,True,2,2,1,https://github.com/superjamie,Don't accept zero -C or -W options,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/526,https://github.com/superjamie,1,https://github.com/the-tcpdump-group/tcpdump/pull/526,"Rolling over into zero filesize makes no sense. Creating a rotating
buffer of zero files makes no sense.
Modify the checks for -C and -W to accept greater than one, not greater
than zero.
Signed-off-by: Jamie Bainbridge jamie.bainbiridge@gmail.com","Rolling over into zero filesize makes no sense. Creating a rotating
buffer of zero files makes no sense.
Modify the checks for -C and -W to accept greater than one, not greater
than zero.
Signed-off-by: Jamie Bainbridge jamie.bainbiridge@gmail.com",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,528,2016-07-09T21:24:01Z,2016-07-10T14:42:54Z,2016-07-10T14:42:54Z,MERGED,True,8,17,6,https://github.com/mcr,the ROLL RPL DAGID is an IPv6 address,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/528,https://github.com/mcr,1,https://github.com/the-tcpdump-group/tcpdump/pull/528,"Early RPL documents were not clear if the 128-bit DAGID was opaque or what. But in fact, it is suppposed to be the IPv6 of the root of the DODAG, so treat it as such when decoding.","Early RPL documents were not clear if the 128-bit DAGID was opaque or what. But in fact, it is suppposed to be the IPv6 of the root of the DODAG, so treat it as such when decoding.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,530,2016-07-11T17:43:35Z,2016-07-12T14:37:11Z,2016-07-12T14:50:51Z,MERGED,True,21,8,1,https://github.com/jessegross,Geneve TLV Option Classes,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/530,https://github.com/jessegross,1,https://github.com/the-tcpdump-group/tcpdump/pull/530,The latest versions of the Geneve draft (https://tools.ietf.org/html/draft-ietf-nvo3-geneve-02) have additional assignments for option classes. This adds support for printing them by name instead of by hex value.,The latest versions of the Geneve draft (https://tools.ietf.org/html/draft-ietf-nvo3-geneve-02) have additional assignments for option classes. This adds support for printing them by name instead of by hex value.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,530,2016-07-11T17:43:35Z,2016-07-12T14:37:11Z,2016-07-12T14:50:51Z,MERGED,True,21,8,1,https://github.com/jessegross,Geneve TLV Option Classes,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/530,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/530#issuecomment-231820652,The latest versions of the Geneve draft (https://tools.ietf.org/html/draft-ietf-nvo3-geneve-02) have additional assignments for option classes. This adds support for printing them by name instead of by hex value.,"Hello,
In https://travis-ci.org/the-tcpdump-group/tcpdump/jobs/143953102, there is a warning:
./print-geneve.c: In function ‘format_opt_class’:
./print-geneve.c:93:9: warning: comparison is always true due to limited range of data type [-Wtype-limits]

Could you fix it ?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,530,2016-07-11T17:43:35Z,2016-07-12T14:37:11Z,2016-07-12T14:50:51Z,MERGED,True,21,8,1,https://github.com/jessegross,Geneve TLV Option Classes,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/530,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/530#issuecomment-231852509,The latest versions of the Geneve draft (https://tools.ietf.org/html/draft-ietf-nvo3-geneve-02) have additional assignments for option classes. This adds support for printing them by name instead of by hex value.,Not critical for such a simple change but it would be nice to have a small test case for that new code as well.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,530,2016-07-11T17:43:35Z,2016-07-12T14:37:11Z,2016-07-12T14:50:51Z,MERGED,True,21,8,1,https://github.com/jessegross,Geneve TLV Option Classes,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/530,https://github.com/jessegross,4,https://github.com/the-tcpdump-group/tcpdump/pull/530#issuecomment-231854491,The latest versions of the Geneve draft (https://tools.ietf.org/html/draft-ietf-nvo3-geneve-02) have additional assignments for option classes. This adds support for printing them by name instead of by hex value.,"Sorry for missing the warning, I just uploaded a new version that fixes it. In terms of the test, there actually is an existing test case that exercises this (geneve-v). It uses one of the older option class assignments but it's still handled by the same code and I guess testing one class is as good as any other.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,530,2016-07-11T17:43:35Z,2016-07-12T14:37:11Z,2016-07-12T14:50:51Z,MERGED,True,21,8,1,https://github.com/jessegross,Geneve TLV Option Classes,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/530,https://github.com/infrastation,5,https://github.com/the-tcpdump-group/tcpdump/pull/530#issuecomment-231861866,The latest versions of the Geneve draft (https://tools.ietf.org/html/draft-ietf-nvo3-geneve-02) have additional assignments for option classes. This adds support for printing them by name instead of by hex value.,"You are right, I have nothing else to add here.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,530,2016-07-11T17:43:35Z,2016-07-12T14:37:11Z,2016-07-12T14:50:51Z,MERGED,True,21,8,1,https://github.com/jessegross,Geneve TLV Option Classes,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/530,https://github.com/fxlb,6,https://github.com/the-tcpdump-group/tcpdump/pull/530#issuecomment-232068844,The latest versions of the Geneve draft (https://tools.ietf.org/html/draft-ietf-nvo3-geneve-02) have additional assignments for option classes. This adds support for printing them by name instead of by hex value.,"Merged, Thank you!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,533,2016-07-17T05:25:47Z,2016-08-09T18:36:39Z,2016-08-10T09:37:26Z,CLOSED,False,91,36,1,https://github.com/bijalthanawala,Issue #522: Solution: Attempt pcap_create() first,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/533,https://github.com/bijalthanawala,1,https://github.com/the-tcpdump-group/tcpdump/pull/533,"This addresses issue:
Numeric adapter names can't be used for capture
(#522)

Attempt pcap_create() first and only on failure numeric indexes are scanned
Handle use-case: Do not do the above when interface  (-i) was not specified by the user
Handle special case  (negative zero: -i -0)

Todo / Question:
Do we need to modify tcpdump man page to explain this behaviour ?","This addresses issue:
Numeric adapter names can't be used for capture
(#522)

Attempt pcap_create() first and only on failure numeric indexes are scanned
Handle use-case: Do not do the above when interface  (-i) was not specified by the user
Handle special case  (negative zero: -i -0)

Todo / Question:
Do we need to modify tcpdump man page to explain this behaviour ?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,533,2016-07-17T05:25:47Z,2016-08-09T18:36:39Z,2016-08-10T09:37:26Z,CLOSED,False,91,36,1,https://github.com/bijalthanawala,Issue #522: Solution: Attempt pcap_create() first,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/533,https://github.com/nbastin,2,https://github.com/the-tcpdump-group/tcpdump/pull/533#issuecomment-238450903,"This addresses issue:
Numeric adapter names can't be used for capture
(#522)

Attempt pcap_create() first and only on failure numeric indexes are scanned
Handle use-case: Do not do the above when interface  (-i) was not specified by the user
Handle special case  (negative zero: -i -0)

Todo / Question:
Do we need to modify tcpdump man page to explain this behaviour ?","This is sortof pedantic, but I think important.  Can we remove the comment that says:
+    * This should be OK on UNIX systems, as interfaces
+    * shouldn't have names that begin with digits.

This is an opinion, and has no basis in the POSIX specification or AT&T UNIX documentation.  I don't know why the original author of this comment thought that interfaces ""shouldn't"" have names that begin with digits, but this has been legal on many systems for decades.  Future maintainers of this code shouldn't be led to believe that this is an invalid configuration that they don't need to handle (which is possibly how we got here in the first place).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,533,2016-07-17T05:25:47Z,2016-08-09T18:36:39Z,2016-08-10T09:37:26Z,CLOSED,False,91,36,1,https://github.com/bijalthanawala,Issue #522: Solution: Attempt pcap_create() first,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/533,https://github.com/guyharris,3,https://github.com/the-tcpdump-group/tcpdump/pull/533#issuecomment-238453949,"This addresses issue:
Numeric adapter names can't be used for capture
(#522)

Attempt pcap_create() first and only on failure numeric indexes are scanned
Handle use-case: Do not do the above when interface  (-i) was not specified by the user
Handle special case  (negative zero: -i -0)

Todo / Question:
Do we need to modify tcpdump man page to explain this behaviour ?","but this has been legal on many systems for decades

""Shouldn't"" can either be prescriptive or descriptive; in this case, it's descriptive, because, until Linux or whoever decided to start giving purely-numerical names to interfaces, no UN*X systems actually did have purely-numerical names for interfaces - not 4.xBSD, not SunOS, not HP-UX, not AIX, not Tru64 UNIX, not any of the BSDs descended from 4.x, etc..
Given that, now, there are UN*X systems that have all-numeric interface names, the comment can be removed, but it's not as if all-numeric interface names have been a thing for decades.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,533,2016-07-17T05:25:47Z,2016-08-09T18:36:39Z,2016-08-10T09:37:26Z,CLOSED,False,91,36,1,https://github.com/bijalthanawala,Issue #522: Solution: Attempt pcap_create() first,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/533,https://github.com/nbastin,4,https://github.com/the-tcpdump-group/tcpdump/pull/533#issuecomment-238520037,"This addresses issue:
Numeric adapter names can't be used for capture
(#522)

Attempt pcap_create() first and only on failure numeric indexes are scanned
Handle use-case: Do not do the above when interface  (-i) was not specified by the user
Handle special case  (negative zero: -i -0)

Todo / Question:
Do we need to modify tcpdump man page to explain this behaviour ?","""Shouldn't"" can either be prescriptive or descriptive; in this case, it's descriptive, because, until Linux or whoever decided to start giving purely-numerical names to interfaces, no UN*X systems actually did have purely-numerical names for interfaces - not 4.xBSD, not SunOS, not HP-UX, not AIX, not Tru64 UNIX, not any of the BSDs descended from 4.x, etc..

My comment very clearly said it was ""legal"" - and still is. Leading someone in the future to believe they can rely on such a restriction would create more problems.  Neither POSIX nor AT&T ever said you shouldn't do it, as X.25 PAD interfaces commonly did - and probably others before that - which makes ""shouldn't"" in the comment prescriptive.  Interfaces have long been named numerically, the fact that PARC didn't do it for ethernet doesn't make it less valid.  Certainly it's even (potentially) more common today than it was in the past (as I believe that under Linux this was in fact not legal for quite some time, while it was always legal in most other UNIX derivatives).
Common practice as known to a developer in their experience is not a spec, it's just one practice.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,533,2016-07-17T05:25:47Z,2016-08-09T18:36:39Z,2016-08-10T09:37:26Z,CLOSED,False,91,36,1,https://github.com/bijalthanawala,Issue #522: Solution: Attempt pcap_create() first,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/533,https://github.com/guyharris,5,https://github.com/the-tcpdump-group/tcpdump/pull/533#issuecomment-238648596,"This addresses issue:
Numeric adapter names can't be used for capture
(#522)

Attempt pcap_create() first and only on failure numeric indexes are scanned
Handle use-case: Do not do the above when interface  (-i) was not specified by the user
Handle special case  (negative zero: -i -0)

Todo / Question:
Do we need to modify tcpdump man page to explain this behaviour ?","which makes ""shouldn't"" in the comment prescriptive

What would make it prescriptive or descriptive would be the intent of the person who wrote it; the person who wrote it meant it descriptively, which makes it descriptive.

Interfaces have long been named numerically

On which operating systems that supported libpcap and tcpdump were the names used in libpcap calls, and on the tcpdump command line, numerical?  If we look at an older version of the FreeBSD net/ifvar.h, a struct ifnet has if_name and if_unit members; the convention was to have if_name be a short name for a particular model of network adapter and if_unit be a 0-based ordinal for the particular interface in the set of all interfaces of that model, with if_name not being purely numerical (or even ending with a digit), as that makes it hard to tell where the name ends and the unit number begins.  Many other UN*Xes followed BSD in that convention; Linux and OS X used a similar convention, but with if_name not being different for different adapter types, and with the Linux loopback interface not having a unit number.
Interfaces may have been named numerically in other contexts, but, for tcpdump, the only context that matters is the ""argument to the -i flag"" context.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,533,2016-07-17T05:25:47Z,2016-08-09T18:36:39Z,2016-08-10T09:37:26Z,CLOSED,False,91,36,1,https://github.com/bijalthanawala,Issue #522: Solution: Attempt pcap_create() first,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/533,https://github.com/guyharris,6,https://github.com/the-tcpdump-group/tcpdump/pull/533#issuecomment-238648797,"This addresses issue:
Numeric adapter names can't be used for capture
(#522)

Attempt pcap_create() first and only on failure numeric indexes are scanned
Handle use-case: Do not do the above when interface  (-i) was not specified by the user
Handle special case  (negative zero: -i -0)

Todo / Question:
Do we need to modify tcpdump man page to explain this behaviour ?",Fixed instead by 0bc8e0e.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,533,2016-07-17T05:25:47Z,2016-08-09T18:36:39Z,2016-08-10T09:37:26Z,CLOSED,False,91,36,1,https://github.com/bijalthanawala,Issue #522: Solution: Attempt pcap_create() first,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/533,https://github.com/guyharris,7,https://github.com/the-tcpdump-group/tcpdump/pull/533#issuecomment-238650463,"This addresses issue:
Numeric adapter names can't be used for capture
(#522)

Attempt pcap_create() first and only on failure numeric indexes are scanned
Handle use-case: Do not do the above when interface  (-i) was not specified by the user
Handle special case  (negative zero: -i -0)

Todo / Question:
Do we need to modify tcpdump man page to explain this behaviour ?","Do we need to modify tcpdump man page to explain this behavior ?

Done in d487627.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,533,2016-07-17T05:25:47Z,2016-08-09T18:36:39Z,2016-08-10T09:37:26Z,CLOSED,False,91,36,1,https://github.com/bijalthanawala,Issue #522: Solution: Attempt pcap_create() first,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/533,https://github.com/bijalthanawala,8,https://github.com/the-tcpdump-group/tcpdump/pull/533#issuecomment-238815897,"This addresses issue:
Numeric adapter names can't be used for capture
(#522)

Attempt pcap_create() first and only on failure numeric indexes are scanned
Handle use-case: Do not do the above when interface  (-i) was not specified by the user
Handle special case  (negative zero: -i -0)

Todo / Question:
Do we need to modify tcpdump man page to explain this behaviour ?",Thanks guy. Reviewing it.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,534,2016-07-28T19:28:09Z,2016-07-29T14:38:05Z,2016-07-29T20:02:22Z,MERGED,True,805,1,9,https://github.com/cryhot,HNCP support (RFCs 7787 and 7788),2,[],https://github.com/the-tcpdump-group/tcpdump/pull/534,https://github.com/cryhot,1,https://github.com/the-tcpdump-group/tcpdump/pull/534,Add support for the Home Network Configuration Protocol (HNCP) described in RFCs 7787 and 7788.,Add support for the Home Network Configuration Protocol (HNCP) described in RFCs 7787 and 7788.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,534,2016-07-28T19:28:09Z,2016-07-29T14:38:05Z,2016-07-29T20:02:22Z,MERGED,True,805,1,9,https://github.com/cryhot,HNCP support (RFCs 7787 and 7788),2,[],https://github.com/the-tcpdump-group/tcpdump/pull/534,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/534#issuecomment-236279695,Add support for the Home Network Configuration Protocol (HNCP) described in RFCs 7787 and 7788.,"""%016lx"" isn't guaranteed to correctly print a 64-bit quantity; use ""%016"" PRIx64 instead.  Fixed in 174b3ec.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,535,2016-08-03T14:30:18Z,2016-08-04T20:23:33Z,2016-08-05T07:52:33Z,CLOSED,False,39,19,5,https://github.com/bijalthanawala,"Replace exit() with the new exit_tcpdump(), which calls smiExit()",2,[],https://github.com/the-tcpdump-group/tcpdump/pull/535,https://github.com/bijalthanawala,1,https://github.com/the-tcpdump-group/tcpdump/pull/535,"As suggested by @guyharris here - #529:
New function exit_tcpdump(), which calls smiExit()(if USE_LIBSMI is defined), introduced.
All calls to exit(), including the one in utils.c:error() replaced with call to this new function.
smiExit() is leaking one memory allocation, which libsmi team has been informed of along
with some preliminary investigation report and offer to assist.
Before calling smiExit():

$ valgrind tcpdump -h
.
.
.
==4311==
==4311== HEAP SUMMARY:
==4311==     in use at exit: 320,870 bytes in 3,830 blocks
==4311==   total heap usage: 6,445 allocs, 2,615 frees, 586,344 bytes allocated
==4311==
==4311== LEAK SUMMARY:
==4311==    definitely lost: 744 bytes in 53 blocks
==4311==    indirectly lost: 0 bytes in 0 blocks
==4311==      possibly lost: 0 bytes in 0 blocks
==4311==    still reachable: 320,126 bytes in 3,777 blocks
==4311==         suppressed: 0 bytes in 0 blocks
==4311== Rerun with --leak-check=full to see details of leaked memory
.
.
.

After calling smiExit():

$ valgrind tcpdump -h
.
.
.
==4320==
==4320== HEAP SUMMARY:
==4320==     in use at exit: 816 bytes in 54 blocks
==4320==   total heap usage: 6,445 allocs, 6,391 frees, 586,344 bytes allocated
==4320==
==4320== LEAK SUMMARY:
==4320==    definitely lost: 744 bytes in 53 blocks
==4320==    indirectly lost: 0 bytes in 0 blocks
==4320==      possibly lost: 0 bytes in 0 blocks
==4320==    still reachable: 72 bytes in 1 blocks
==4320==         suppressed: 0 bytes in 0 blocks
==4320== Rerun with --leak-check=full to see details of leaked memory
.
.
.","As suggested by @guyharris here - #529:
New function exit_tcpdump(), which calls smiExit()(if USE_LIBSMI is defined), introduced.
All calls to exit(), including the one in utils.c:error() replaced with call to this new function.
smiExit() is leaking one memory allocation, which libsmi team has been informed of along
with some preliminary investigation report and offer to assist.
Before calling smiExit():

$ valgrind tcpdump -h
.
.
.
==4311==
==4311== HEAP SUMMARY:
==4311==     in use at exit: 320,870 bytes in 3,830 blocks
==4311==   total heap usage: 6,445 allocs, 2,615 frees, 586,344 bytes allocated
==4311==
==4311== LEAK SUMMARY:
==4311==    definitely lost: 744 bytes in 53 blocks
==4311==    indirectly lost: 0 bytes in 0 blocks
==4311==      possibly lost: 0 bytes in 0 blocks
==4311==    still reachable: 320,126 bytes in 3,777 blocks
==4311==         suppressed: 0 bytes in 0 blocks
==4311== Rerun with --leak-check=full to see details of leaked memory
.
.
.

After calling smiExit():

$ valgrind tcpdump -h
.
.
.
==4320==
==4320== HEAP SUMMARY:
==4320==     in use at exit: 816 bytes in 54 blocks
==4320==   total heap usage: 6,445 allocs, 6,391 frees, 586,344 bytes allocated
==4320==
==4320== LEAK SUMMARY:
==4320==    definitely lost: 744 bytes in 53 blocks
==4320==    indirectly lost: 0 bytes in 0 blocks
==4320==      possibly lost: 0 bytes in 0 blocks
==4320==    still reachable: 72 bytes in 1 blocks
==4320==         suppressed: 0 bytes in 0 blocks
==4320== Rerun with --leak-check=full to see details of leaked memory
.
.
.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,535,2016-08-03T14:30:18Z,2016-08-04T20:23:33Z,2016-08-05T07:52:33Z,CLOSED,False,39,19,5,https://github.com/bijalthanawala,"Replace exit() with the new exit_tcpdump(), which calls smiExit()",2,[],https://github.com/the-tcpdump-group/tcpdump/pull/535,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/535#issuecomment-237492800,"As suggested by @guyharris here - #529:
New function exit_tcpdump(), which calls smiExit()(if USE_LIBSMI is defined), introduced.
All calls to exit(), including the one in utils.c:error() replaced with call to this new function.
smiExit() is leaking one memory allocation, which libsmi team has been informed of along
with some preliminary investigation report and offer to assist.
Before calling smiExit():

$ valgrind tcpdump -h
.
.
.
==4311==
==4311== HEAP SUMMARY:
==4311==     in use at exit: 320,870 bytes in 3,830 blocks
==4311==   total heap usage: 6,445 allocs, 2,615 frees, 586,344 bytes allocated
==4311==
==4311== LEAK SUMMARY:
==4311==    definitely lost: 744 bytes in 53 blocks
==4311==    indirectly lost: 0 bytes in 0 blocks
==4311==      possibly lost: 0 bytes in 0 blocks
==4311==    still reachable: 320,126 bytes in 3,777 blocks
==4311==         suppressed: 0 bytes in 0 blocks
==4311== Rerun with --leak-check=full to see details of leaked memory
.
.
.

After calling smiExit():

$ valgrind tcpdump -h
.
.
.
==4320==
==4320== HEAP SUMMARY:
==4320==     in use at exit: 816 bytes in 54 blocks
==4320==   total heap usage: 6,445 allocs, 6,391 frees, 586,344 bytes allocated
==4320==
==4320== LEAK SUMMARY:
==4320==    definitely lost: 744 bytes in 53 blocks
==4320==    indirectly lost: 0 bytes in 0 blocks
==4320==      possibly lost: 0 bytes in 0 blocks
==4320==    still reachable: 72 bytes in 1 blocks
==4320==         suppressed: 0 bytes in 0 blocks
==4320== Rerun with --leak-check=full to see details of leaked memory
.
.
.",It seems to me the code in print.c and print-esp.c belongs to libnetdissect and as such should not call back into tcpdump. Or libsmi coupling (i.e. both initialization and teardown) should belong to libnetdissect.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,535,2016-08-03T14:30:18Z,2016-08-04T20:23:33Z,2016-08-05T07:52:33Z,CLOSED,False,39,19,5,https://github.com/bijalthanawala,"Replace exit() with the new exit_tcpdump(), which calls smiExit()",2,[],https://github.com/the-tcpdump-group/tcpdump/pull/535,https://github.com/bijalthanawala,3,https://github.com/the-tcpdump-group/tcpdump/pull/535#issuecomment-237513885,"As suggested by @guyharris here - #529:
New function exit_tcpdump(), which calls smiExit()(if USE_LIBSMI is defined), introduced.
All calls to exit(), including the one in utils.c:error() replaced with call to this new function.
smiExit() is leaking one memory allocation, which libsmi team has been informed of along
with some preliminary investigation report and offer to assist.
Before calling smiExit():

$ valgrind tcpdump -h
.
.
.
==4311==
==4311== HEAP SUMMARY:
==4311==     in use at exit: 320,870 bytes in 3,830 blocks
==4311==   total heap usage: 6,445 allocs, 2,615 frees, 586,344 bytes allocated
==4311==
==4311== LEAK SUMMARY:
==4311==    definitely lost: 744 bytes in 53 blocks
==4311==    indirectly lost: 0 bytes in 0 blocks
==4311==      possibly lost: 0 bytes in 0 blocks
==4311==    still reachable: 320,126 bytes in 3,777 blocks
==4311==         suppressed: 0 bytes in 0 blocks
==4311== Rerun with --leak-check=full to see details of leaked memory
.
.
.

After calling smiExit():

$ valgrind tcpdump -h
.
.
.
==4320==
==4320== HEAP SUMMARY:
==4320==     in use at exit: 816 bytes in 54 blocks
==4320==   total heap usage: 6,445 allocs, 6,391 frees, 586,344 bytes allocated
==4320==
==4320== LEAK SUMMARY:
==4320==    definitely lost: 744 bytes in 53 blocks
==4320==    indirectly lost: 0 bytes in 0 blocks
==4320==      possibly lost: 0 bytes in 0 blocks
==4320==    still reachable: 72 bytes in 1 blocks
==4320==         suppressed: 0 bytes in 0 blocks
==4320== Rerun with --leak-check=full to see details of leaked memory
.
.
.","@infrastation : Thanks for alerting.
I looked at the Makefile (as generated by ./configure on my system) and in order to understand this I tried building just the 'tcpdump' - with an error intentionally inserted (misspelled exit_tcpdum) in print.c - and it seems from the output below that print.o and print-esp.o (highlighted) are statically linked to tcpdump.
Without past-knowledge or complete overview of the project, it is quite possible I am missing something.

$ make tcpdump
gcc -ffloat-store -DHAVE_CONFIG_H   -D_U_=__ attribute__((unused)) -I.   -g -O2  -o tcpdump setsignal.o tcpdump.o util.o version.o addrtoname.o addrtostr.o af.o ascii_strcasecmp.o checksum.o cpack.o gmpls.o gmt2local.o in_cksum.o ipproto.o l2vpn.o machdep.o nlpid.o oui.o parsenfsfh.o print.o print-802_11.o print-802_15_4.o print-ah.o print-ahcp.o print-aodv.o print-aoe.o print-ap1394.o print-arcnet.o print-arp.o print-ascii.o print-atalk.o print-atm.o print-babel.o print-beep.o print-bfd.o print-bgp.o print-bootp.o print-bt.o print-calm-fast.o print-carp.o print-cdp.o print-cfm.o print-chdlc.o print-cip.o print-cnfp.o print-dccp.o print-decnet.o print-dhcp6.o print-domain.o print-dtp.o print-dvmrp.o print-eap.o print-egp.o print-eigrp.o print-enc.o print-esp.o print-ether.o print-fddi.o print-forces.o print-fr.o print-frag6.o print-ftp.o print-geneve.o print-geonet.o print-gre.o print-hsrp.o print-http.o print-icmp.o print-icmp6.o print-igmp.o print-igrp.o print-ip.o print-ip6.o print-ip6opts.o print-ipcomp.o print-ipfc.o print-ipnet.o print-ipx.o print-isakmp.o print-isoclns.o print-juniper.o print-krb.o print-l2tp.o print-lane.o print-ldp.o print-lisp.o print-llc.o print-lldp.o print-lmp.o print-loopback.o print-lspping.o print-lwapp.o print-lwres.o print-m3ua.o print-medsa.o print-mobile.o print-mobility.o print-mpcp.o print-mpls.o print-mptcp.o print-msdp.o print-msnlb.o print-nflog.o print-nfs.o print-nsh.o print-ntp.o print-null.o print-olsr.o print-openflow-1.0.o print-openflow.o print-ospf.o print-ospf6.o print-otv.o print-pgm.o print-pim.o print-pktap.o print-ppi.o print-ppp.o print-pppoe.o print-pptp.o print-radius.o print-raw.o print-resp.o print-rip.o print-ripng.o print-rpki-rtr.o print-rrcp.o print-rsvp.o print-rt6.o print-rtsp.o print-rx.o print-sctp.o print-sflow.o print-sip.o print-sl.o print-sll.o print-slow.o print-smtp.o print-snmp.o print-stp.o print-sunatm.o print-sunrpc.o print-symantec.o print-syslog.o print-tcp.o print-telnet.o print-tftp.o print-timed.o print-tipc.o print-token.o print-udld.o print-udp.o print-usb.o print-vjc.o print-vqp.o print-vrrp.o print-vtp.o print-vxlan.o print-vxlan-gpe.o print-wb.o print-zephyr.o print-zeromq.o signature.o strtoaddr.o util-print.o print-smb.o smbutil.o strlcat.o strlcpy.o -lcrypto -lpcap -lsmi
print.o: In function 'ndo_error':
/home/bijal/projects/tcpdump/./print.c:433: undefined reference to `exit_tcpdum'
collect2: error: ld returned 1 exit status
Makefile:366: recipe for target 'tcpdump' failed
make: *** [tcpdump] Error 1",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,535,2016-08-03T14:30:18Z,2016-08-04T20:23:33Z,2016-08-05T07:52:33Z,CLOSED,False,39,19,5,https://github.com/bijalthanawala,"Replace exit() with the new exit_tcpdump(), which calls smiExit()",2,[],https://github.com/the-tcpdump-group/tcpdump/pull/535,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/535#issuecomment-237550244,"As suggested by @guyharris here - #529:
New function exit_tcpdump(), which calls smiExit()(if USE_LIBSMI is defined), introduced.
All calls to exit(), including the one in utils.c:error() replaced with call to this new function.
smiExit() is leaking one memory allocation, which libsmi team has been informed of along
with some preliminary investigation report and offer to assist.
Before calling smiExit():

$ valgrind tcpdump -h
.
.
.
==4311==
==4311== HEAP SUMMARY:
==4311==     in use at exit: 320,870 bytes in 3,830 blocks
==4311==   total heap usage: 6,445 allocs, 2,615 frees, 586,344 bytes allocated
==4311==
==4311== LEAK SUMMARY:
==4311==    definitely lost: 744 bytes in 53 blocks
==4311==    indirectly lost: 0 bytes in 0 blocks
==4311==      possibly lost: 0 bytes in 0 blocks
==4311==    still reachable: 320,126 bytes in 3,777 blocks
==4311==         suppressed: 0 bytes in 0 blocks
==4311== Rerun with --leak-check=full to see details of leaked memory
.
.
.

After calling smiExit():

$ valgrind tcpdump -h
.
.
.
==4320==
==4320== HEAP SUMMARY:
==4320==     in use at exit: 816 bytes in 54 blocks
==4320==   total heap usage: 6,445 allocs, 6,391 frees, 586,344 bytes allocated
==4320==
==4320== LEAK SUMMARY:
==4320==    definitely lost: 744 bytes in 53 blocks
==4320==    indirectly lost: 0 bytes in 0 blocks
==4320==      possibly lost: 0 bytes in 0 blocks
==4320==    still reachable: 72 bytes in 1 blocks
==4320==         suppressed: 0 bytes in 0 blocks
==4320== Rerun with --leak-check=full to see details of leaked memory
.
.
.","You are right, tcpdump currently compiles all the source files in as that has been the traditional way. As far as I understand, it was intended to switch tcpdump to link with libnetdissect.a, which is compiled next after tcpdump from mostly the same files. This has not happened but when it happens there is going to be a problem because not every binary trying to link with libnetdissect will have exit_tcpdump().
Other developers may have a better understanding of this.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,535,2016-08-03T14:30:18Z,2016-08-04T20:23:33Z,2016-08-05T07:52:33Z,CLOSED,False,39,19,5,https://github.com/bijalthanawala,"Replace exit() with the new exit_tcpdump(), which calls smiExit()",2,[],https://github.com/the-tcpdump-group/tcpdump/pull/535,https://github.com/guyharris,5,https://github.com/the-tcpdump-group/tcpdump/pull/535#issuecomment-237672082,"As suggested by @guyharris here - #529:
New function exit_tcpdump(), which calls smiExit()(if USE_LIBSMI is defined), introduced.
All calls to exit(), including the one in utils.c:error() replaced with call to this new function.
smiExit() is leaking one memory allocation, which libsmi team has been informed of along
with some preliminary investigation report and offer to assist.
Before calling smiExit():

$ valgrind tcpdump -h
.
.
.
==4311==
==4311== HEAP SUMMARY:
==4311==     in use at exit: 320,870 bytes in 3,830 blocks
==4311==   total heap usage: 6,445 allocs, 2,615 frees, 586,344 bytes allocated
==4311==
==4311== LEAK SUMMARY:
==4311==    definitely lost: 744 bytes in 53 blocks
==4311==    indirectly lost: 0 bytes in 0 blocks
==4311==      possibly lost: 0 bytes in 0 blocks
==4311==    still reachable: 320,126 bytes in 3,777 blocks
==4311==         suppressed: 0 bytes in 0 blocks
==4311== Rerun with --leak-check=full to see details of leaked memory
.
.
.

After calling smiExit():

$ valgrind tcpdump -h
.
.
.
==4320==
==4320== HEAP SUMMARY:
==4320==     in use at exit: 816 bytes in 54 blocks
==4320==   total heap usage: 6,445 allocs, 6,391 frees, 586,344 bytes allocated
==4320==
==4320== LEAK SUMMARY:
==4320==    definitely lost: 744 bytes in 53 blocks
==4320==    indirectly lost: 0 bytes in 0 blocks
==4320==      possibly lost: 0 bytes in 0 blocks
==4320==    still reachable: 72 bytes in 1 blocks
==4320==         suppressed: 0 bytes in 0 blocks
==4320== Rerun with --leak-check=full to see details of leaked memory
.
.
.","OK, I've done it differently in 91e08f8.  libnetdissect now has nd_init() and nd_cleanup() routines, the first of which does whatever initialization is needed for libnetdissect, such as initializing Winsock and libsmi, and the second of which cleans up those initializations. tcpdump calls nd_init() early in main(). exit_tcpdump() is static to tcpdump.c; it calls nd_cleanup() and then exit().  Other places that exited were either changed to call nd_cleanup() before exiting or changed to use ndo->ndo_error() rather than just printing a message and exiting.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,535,2016-08-03T14:30:18Z,2016-08-04T20:23:33Z,2016-08-05T07:52:33Z,CLOSED,False,39,19,5,https://github.com/bijalthanawala,"Replace exit() with the new exit_tcpdump(), which calls smiExit()",2,[],https://github.com/the-tcpdump-group/tcpdump/pull/535,https://github.com/bijalthanawala,6,https://github.com/the-tcpdump-group/tcpdump/pull/535#issuecomment-237720359,"As suggested by @guyharris here - #529:
New function exit_tcpdump(), which calls smiExit()(if USE_LIBSMI is defined), introduced.
All calls to exit(), including the one in utils.c:error() replaced with call to this new function.
smiExit() is leaking one memory allocation, which libsmi team has been informed of along
with some preliminary investigation report and offer to assist.
Before calling smiExit():

$ valgrind tcpdump -h
.
.
.
==4311==
==4311== HEAP SUMMARY:
==4311==     in use at exit: 320,870 bytes in 3,830 blocks
==4311==   total heap usage: 6,445 allocs, 2,615 frees, 586,344 bytes allocated
==4311==
==4311== LEAK SUMMARY:
==4311==    definitely lost: 744 bytes in 53 blocks
==4311==    indirectly lost: 0 bytes in 0 blocks
==4311==      possibly lost: 0 bytes in 0 blocks
==4311==    still reachable: 320,126 bytes in 3,777 blocks
==4311==         suppressed: 0 bytes in 0 blocks
==4311== Rerun with --leak-check=full to see details of leaked memory
.
.
.

After calling smiExit():

$ valgrind tcpdump -h
.
.
.
==4320==
==4320== HEAP SUMMARY:
==4320==     in use at exit: 816 bytes in 54 blocks
==4320==   total heap usage: 6,445 allocs, 6,391 frees, 586,344 bytes allocated
==4320==
==4320== LEAK SUMMARY:
==4320==    definitely lost: 744 bytes in 53 blocks
==4320==    indirectly lost: 0 bytes in 0 blocks
==4320==      possibly lost: 0 bytes in 0 blocks
==4320==    still reachable: 72 bytes in 1 blocks
==4320==         suppressed: 0 bytes in 0 blocks
==4320== Rerun with --leak-check=full to see details of leaked memory
.
.
.","Thanks @guyharris , @infrastation.
Given my beginner status in the project, reviewing your series of patches is beyond my knowledge at this point.
I would later, however, pull your commits and play with it to understand it, before moving to any other open issues or feature requests.
Please feel free to guide my efforts if you have any suggestions.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,535,2016-08-03T14:30:18Z,2016-08-04T20:23:33Z,2016-08-05T07:52:33Z,CLOSED,False,39,19,5,https://github.com/bijalthanawala,"Replace exit() with the new exit_tcpdump(), which calls smiExit()",2,[],https://github.com/the-tcpdump-group/tcpdump/pull/535,https://github.com/infrastation,7,https://github.com/the-tcpdump-group/tcpdump/pull/535#issuecomment-237772836,"As suggested by @guyharris here - #529:
New function exit_tcpdump(), which calls smiExit()(if USE_LIBSMI is defined), introduced.
All calls to exit(), including the one in utils.c:error() replaced with call to this new function.
smiExit() is leaking one memory allocation, which libsmi team has been informed of along
with some preliminary investigation report and offer to assist.
Before calling smiExit():

$ valgrind tcpdump -h
.
.
.
==4311==
==4311== HEAP SUMMARY:
==4311==     in use at exit: 320,870 bytes in 3,830 blocks
==4311==   total heap usage: 6,445 allocs, 2,615 frees, 586,344 bytes allocated
==4311==
==4311== LEAK SUMMARY:
==4311==    definitely lost: 744 bytes in 53 blocks
==4311==    indirectly lost: 0 bytes in 0 blocks
==4311==      possibly lost: 0 bytes in 0 blocks
==4311==    still reachable: 320,126 bytes in 3,777 blocks
==4311==         suppressed: 0 bytes in 0 blocks
==4311== Rerun with --leak-check=full to see details of leaked memory
.
.
.

After calling smiExit():

$ valgrind tcpdump -h
.
.
.
==4320==
==4320== HEAP SUMMARY:
==4320==     in use at exit: 816 bytes in 54 blocks
==4320==   total heap usage: 6,445 allocs, 6,391 frees, 586,344 bytes allocated
==4320==
==4320== LEAK SUMMARY:
==4320==    definitely lost: 744 bytes in 53 blocks
==4320==    indirectly lost: 0 bytes in 0 blocks
==4320==      possibly lost: 0 bytes in 0 blocks
==4320==    still reachable: 72 bytes in 1 blocks
==4320==         suppressed: 0 bytes in 0 blocks
==4320== Rerun with --leak-check=full to see details of leaked memory
.
.
.","Thank you Guy. @bijalthanawala, if you would like to study a useful feature request that is well documented but not implemented, try looking at #480, #415, #296 and the-tcpdump-group/libpcap#127.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,535,2016-08-03T14:30:18Z,2016-08-04T20:23:33Z,2016-08-05T07:52:33Z,CLOSED,False,39,19,5,https://github.com/bijalthanawala,"Replace exit() with the new exit_tcpdump(), which calls smiExit()",2,[],https://github.com/the-tcpdump-group/tcpdump/pull/535,https://github.com/bijalthanawala,8,https://github.com/the-tcpdump-group/tcpdump/pull/535#issuecomment-237780680,"As suggested by @guyharris here - #529:
New function exit_tcpdump(), which calls smiExit()(if USE_LIBSMI is defined), introduced.
All calls to exit(), including the one in utils.c:error() replaced with call to this new function.
smiExit() is leaking one memory allocation, which libsmi team has been informed of along
with some preliminary investigation report and offer to assist.
Before calling smiExit():

$ valgrind tcpdump -h
.
.
.
==4311==
==4311== HEAP SUMMARY:
==4311==     in use at exit: 320,870 bytes in 3,830 blocks
==4311==   total heap usage: 6,445 allocs, 2,615 frees, 586,344 bytes allocated
==4311==
==4311== LEAK SUMMARY:
==4311==    definitely lost: 744 bytes in 53 blocks
==4311==    indirectly lost: 0 bytes in 0 blocks
==4311==      possibly lost: 0 bytes in 0 blocks
==4311==    still reachable: 320,126 bytes in 3,777 blocks
==4311==         suppressed: 0 bytes in 0 blocks
==4311== Rerun with --leak-check=full to see details of leaked memory
.
.
.

After calling smiExit():

$ valgrind tcpdump -h
.
.
.
==4320==
==4320== HEAP SUMMARY:
==4320==     in use at exit: 816 bytes in 54 blocks
==4320==   total heap usage: 6,445 allocs, 6,391 frees, 586,344 bytes allocated
==4320==
==4320== LEAK SUMMARY:
==4320==    definitely lost: 744 bytes in 53 blocks
==4320==    indirectly lost: 0 bytes in 0 blocks
==4320==      possibly lost: 0 bytes in 0 blocks
==4320==    still reachable: 72 bytes in 1 blocks
==4320==         suppressed: 0 bytes in 0 blocks
==4320== Rerun with --leak-check=full to see details of leaked memory
.
.
.",Thanks @infrastation,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,537,2016-08-18T14:30:34Z,2016-09-02T13:44:13Z,2016-09-02T13:44:13Z,CLOSED,False,9,11,2,https://github.com/MisterDA,HNCP: fix incorrect time interval format,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/537,https://github.com/MisterDA,1,https://github.com/the-tcpdump-group/tcpdump/pull/537,"In HNCP/DNCP a time interval is stored in milliseconds on a 32-bits value (see RFC 7787#7.3.2). The function format_interval was incorrectly taking an uint16_t and made nonsense with the conversion.
The first commit fixes this bug and the second updates the test file.
I am the co-author of the HNCP dissector with @cryhot.","In HNCP/DNCP a time interval is stored in milliseconds on a 32-bits value (see RFC 7787#7.3.2). The function format_interval was incorrectly taking an uint16_t and made nonsense with the conversion.
The first commit fixes this bug and the second updates the test file.
I am the co-author of the HNCP dissector with @cryhot.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,537,2016-08-18T14:30:34Z,2016-09-02T13:44:13Z,2016-09-02T13:44:13Z,CLOSED,False,9,11,2,https://github.com/MisterDA,HNCP: fix incorrect time interval format,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/537,https://github.com/MisterDA,2,https://github.com/the-tcpdump-group/tcpdump/pull/537#issuecomment-244289371,"In HNCP/DNCP a time interval is stored in milliseconds on a 32-bits value (see RFC 7787#7.3.2). The function format_interval was incorrectly taking an uint16_t and made nonsense with the conversion.
The first commit fixes this bug and the second updates the test file.
I am the co-author of the HNCP dissector with @cryhot.","Hi guys, any news on this ? It's been two weeks, and it's just a five-lines fix.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,537,2016-08-18T14:30:34Z,2016-09-02T13:44:13Z,2016-09-02T13:44:13Z,CLOSED,False,9,11,2,https://github.com/MisterDA,HNCP: fix incorrect time interval format,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/537,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/537#issuecomment-244378595,"In HNCP/DNCP a time interval is stored in milliseconds on a 32-bits value (see RFC 7787#7.3.2). The function format_interval was incorrectly taking an uint16_t and made nonsense with the conversion.
The first commit fixes this bug and the second updates the test file.
I am the co-author of the HNCP dissector with @cryhot.",Merged. Thank you.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,541,2016-09-21T16:24:52Z,2016-09-30T11:34:23Z,2016-09-30T11:34:28Z,CLOSED,False,61,28,1,https://github.com/fenner,"Update BGP numbers from IANA, and print minor values for FSM notification",5,[],https://github.com/the-tcpdump-group/tcpdump/pull/541,https://github.com/fenner,1,https://github.com/the-tcpdump-group/tcpdump/pull/541,"This is nearly all just updating comments to refer to the RFCs and Internet Drafts that were current when I did it 3 years ago.  There's more work to be done here, but it's silly to let this linger for longer.","This is nearly all just updating comments to refer to the RFCs and Internet Drafts that were current when I did it 3 years ago.  There's more work to be done here, but it's silly to let this linger for longer.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,541,2016-09-21T16:24:52Z,2016-09-30T11:34:23Z,2016-09-30T11:34:28Z,CLOSED,False,61,28,1,https://github.com/fenner,"Update BGP numbers from IANA, and print minor values for FSM notification",5,[],https://github.com/the-tcpdump-group/tcpdump/pull/541,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/541#issuecomment-250722945,"This is nearly all just updating comments to refer to the RFCs and Internet Drafts that were current when I did it 3 years ago.  There's more work to be done here, but it's silly to let this linger for longer.","Thank you for the contribution Bill. I have reviewed your changes and made them into the current master branch on your behalf as two separate commits 69c1e85 and 0d39c0c because the pull request was based on the commit history about a year old and it was difficult to read. This hopefully makes it possible for you to switch your working copy to the most recent master branch and make next changes based on that. BTW, if you have a sample capture for the FSM minor code(s), feel free to contribute it as an additional test case.
Closing this request as resolved.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,544,2016-10-26T20:16:58Z,2016-10-27T08:57:05Z,2016-10-27T08:57:05Z,CLOSED,False,8,8,3,https://github.com/pierky,New Early IANA Allocation,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/544,https://github.com/pierky,1,https://github.com/the-tcpdump-group/tcpdump/pull/544,https://www.ietf.org/rfcdiff?url2=draft-ietf-idr-large-community-05,https://www.ietf.org/rfcdiff?url2=draft-ietf-idr-large-community-05,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,544,2016-10-26T20:16:58Z,2016-10-27T08:57:05Z,2016-10-27T08:57:05Z,CLOSED,False,8,8,3,https://github.com/pierky,New Early IANA Allocation,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/544,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/544#issuecomment-256467580,https://www.ietf.org/rfcdiff?url2=draft-ietf-idr-large-community-05,The previously added test case still uses a .pcap file with the old allocation and now fails (try make check in the working directory).,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,544,2016-10-26T20:16:58Z,2016-10-27T08:57:05Z,2016-10-27T08:57:05Z,CLOSED,False,8,8,3,https://github.com/pierky,New Early IANA Allocation,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/544,https://github.com/pierky,3,https://github.com/the-tcpdump-group/tcpdump/pull/544#issuecomment-256571152,https://www.ietf.org/rfcdiff?url2=draft-ietf-idr-large-community-05,The .pcap file has been updated with a new dump containing the new code. Tests are fine now.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,544,2016-10-26T20:16:58Z,2016-10-27T08:57:05Z,2016-10-27T08:57:05Z,CLOSED,False,8,8,3,https://github.com/pierky,New Early IANA Allocation,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/544,https://github.com/job,4,https://github.com/the-tcpdump-group/tcpdump/pull/544#issuecomment-256572045,https://www.ietf.org/rfcdiff?url2=draft-ietf-idr-large-community-05,thanks @pierky,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,544,2016-10-26T20:16:58Z,2016-10-27T08:57:05Z,2016-10-27T08:57:05Z,CLOSED,False,8,8,3,https://github.com/pierky,New Early IANA Allocation,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/544,https://github.com/fxlb,5,https://github.com/the-tcpdump-group/tcpdump/pull/544#issuecomment-256581797,https://www.ietf.org/rfcdiff?url2=draft-ietf-idr-large-community-05,"Thanks, I will merge an updated patch
(see fxlb/tcpdump@e2adb16)

with correct TCP checksum
only one commit
an updated commit message",True,{'THUMBS_UP': ['https://github.com/pierky']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,544,2016-10-26T20:16:58Z,2016-10-27T08:57:05Z,2016-10-27T08:57:05Z,CLOSED,False,8,8,3,https://github.com/pierky,New Early IANA Allocation,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/544,https://github.com/fxlb,6,https://github.com/the-tcpdump-group/tcpdump/pull/544#issuecomment-256585699,https://www.ietf.org/rfcdiff?url2=draft-ietf-idr-large-community-05,Merged.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,546,2016-10-26T22:42:13Z,2016-10-27T07:52:06Z,2016-10-27T08:38:08Z,CLOSED,False,1,1,1,https://github.com/job,Update Large BGP Communities path attribute value,1,['duplicate'],https://github.com/the-tcpdump-group/tcpdump/pull/546,https://github.com/job,1,https://github.com/the-tcpdump-group/tcpdump/pull/546,This fixes #545,This fixes #545,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,546,2016-10-26T22:42:13Z,2016-10-27T07:52:06Z,2016-10-27T08:38:08Z,CLOSED,False,1,1,1,https://github.com/job,Update Large BGP Communities path attribute value,1,['duplicate'],https://github.com/the-tcpdump-group/tcpdump/pull/546,https://github.com/pierky,2,https://github.com/the-tcpdump-group/tcpdump/pull/546#issuecomment-256571352,This fixes #545,PR #544 updates the IANA code and (now) passes tests too.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,570,2016-12-01T14:29:01Z,,2021-10-31T21:24:39Z,OPEN,False,13,2,1,https://github.com/franky-m,rotate when signal USR2 is received.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/570,https://github.com/franky-m,1,https://github.com/the-tcpdump-group/tcpdump/pull/570,"With this patch the signal USR2 triggers rotation of the output file.
I see two scenarios where this function might be useful:


clean shutdown:
Do not leave an unrotated partial file when exiting due to CTRL-C or a signal
(e.g. # pkill -SIGUSR2 tcpdump; sleep 1; pkill -KILL tcpdump; rm $partial_file)


externalize decision on when to rotate:
You no longer have to decide when to rotate before tcpdump is started. This way rotation intervall
can also be adopted to changing traffic without restarting tcpdump and missing packets.


If 2. is not a missed feature I could also change the patch so that tcpdump simply does a clean shutdown
when the signal is sent.
Any feedback is appreciated!
Franky","With this patch the signal USR2 triggers rotation of the output file.
I see two scenarios where this function might be useful:


clean shutdown:
Do not leave an unrotated partial file when exiting due to CTRL-C or a signal
(e.g. # pkill -SIGUSR2 tcpdump; sleep 1; pkill -KILL tcpdump; rm $partial_file)


externalize decision on when to rotate:
You no longer have to decide when to rotate before tcpdump is started. This way rotation intervall
can also be adopted to changing traffic without restarting tcpdump and missing packets.


If 2. is not a missed feature I could also change the patch so that tcpdump simply does a clean shutdown
when the signal is sent.
Any feedback is appreciated!
Franky",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,570,2016-12-01T14:29:01Z,,2021-10-31T21:24:39Z,OPEN,False,13,2,1,https://github.com/franky-m,rotate when signal USR2 is received.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/570,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/570#issuecomment-409154253,"With this patch the signal USR2 triggers rotation of the output file.
I see two scenarios where this function might be useful:


clean shutdown:
Do not leave an unrotated partial file when exiting due to CTRL-C or a signal
(e.g. # pkill -SIGUSR2 tcpdump; sleep 1; pkill -KILL tcpdump; rm $partial_file)


externalize decision on when to rotate:
You no longer have to decide when to rotate before tcpdump is started. This way rotation intervall
can also be adopted to changing traffic without restarting tcpdump and missing packets.


If 2. is not a missed feature I could also change the patch so that tcpdump simply does a clean shutdown
when the signal is sent.
Any feedback is appreciated!
Franky","The proposed change looks OK to me, but needs to be rebased on the current master branch, and needs to disable itself when the OS does not have SIGUSR2. Other reviews are welcome.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,570,2016-12-01T14:29:01Z,,2021-10-31T21:24:39Z,OPEN,False,13,2,1,https://github.com/franky-m,rotate when signal USR2 is received.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/570,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/570#issuecomment-955790862,"With this patch the signal USR2 triggers rotation of the output file.
I see two scenarios where this function might be useful:


clean shutdown:
Do not leave an unrotated partial file when exiting due to CTRL-C or a signal
(e.g. # pkill -SIGUSR2 tcpdump; sleep 1; pkill -KILL tcpdump; rm $partial_file)


externalize decision on when to rotate:
You no longer have to decide when to rotate before tcpdump is started. This way rotation intervall
can also be adopted to changing traffic without restarting tcpdump and missing packets.


If 2. is not a missed feature I could also change the patch so that tcpdump simply does a clean shutdown
when the signal is sent.
Any feedback is appreciated!
Franky","As it turns out, SIGUSR2 is in POSIX, Linux, FreeBSD, NetBSD, OpenBSD and illumos, so that particular point is moot.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,570,2016-12-01T14:29:01Z,,2021-10-31T21:24:39Z,OPEN,False,13,2,1,https://github.com/franky-m,rotate when signal USR2 is received.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/570,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/570#issuecomment-955791267,"With this patch the signal USR2 triggers rotation of the output file.
I see two scenarios where this function might be useful:


clean shutdown:
Do not leave an unrotated partial file when exiting due to CTRL-C or a signal
(e.g. # pkill -SIGUSR2 tcpdump; sleep 1; pkill -KILL tcpdump; rm $partial_file)


externalize decision on when to rotate:
You no longer have to decide when to rotate before tcpdump is started. This way rotation intervall
can also be adopted to changing traffic without restarting tcpdump and missing packets.


If 2. is not a missed feature I could also change the patch so that tcpdump simply does a clean shutdown
when the signal is sent.
Any feedback is appreciated!
Franky","(Also in Solaris 9, 10 and 11; AIX 7.1 and 7.2.)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,570,2016-12-01T14:29:01Z,,2021-10-31T21:24:39Z,OPEN,False,13,2,1,https://github.com/franky-m,rotate when signal USR2 is received.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/570,https://github.com/infrastation,5,https://github.com/the-tcpdump-group/tcpdump/pull/570#issuecomment-955794219,"With this patch the signal USR2 triggers rotation of the output file.
I see two scenarios where this function might be useful:


clean shutdown:
Do not leave an unrotated partial file when exiting due to CTRL-C or a signal
(e.g. # pkill -SIGUSR2 tcpdump; sleep 1; pkill -KILL tcpdump; rm $partial_file)


externalize decision on when to rotate:
You no longer have to decide when to rotate before tcpdump is started. This way rotation intervall
can also be adopted to changing traffic without restarting tcpdump and missing packets.


If 2. is not a missed feature I could also change the patch so that tcpdump simply does a clean shutdown
when the signal is sent.
Any feedback is appreciated!
Franky",Rebased on the current master branch and cleaned up. Not tested. It remains to be established whether this change addresses a sound problem and whether the solution is correct.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,573,2016-12-08T13:56:45Z,2016-12-08T14:02:06Z,2016-12-08T14:02:06Z,CLOSED,False,64,4,7,https://github.com/elear,Pull request for Manufacturer Usage Descriptions,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/573,https://github.com/elear,1,https://github.com/the-tcpdump-group/tcpdump/pull/573,These files contain updates for new dhcpv4 and v6 options.  They also correct what I believe is an error in print-bootp.c.  I'll update the pull request with the issue # shortly.,These files contain updates for new dhcpv4 and v6 options.  They also correct what I believe is an error in print-bootp.c.  I'll update the pull request with the issue # shortly.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,573,2016-12-08T13:56:45Z,2016-12-08T14:02:06Z,2016-12-08T14:02:06Z,CLOSED,False,64,4,7,https://github.com/elear,Pull request for Manufacturer Usage Descriptions,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/573,https://github.com/elear,2,https://github.com/the-tcpdump-group/tcpdump/pull/573#issuecomment-265746483,These files contain updates for new dhcpv4 and v6 options.  They also correct what I believe is an error in print-bootp.c.  I'll update the pull request with the issue # shortly.,Will reissue pull request (TESTFILE got missed.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,574,2016-12-08T14:05:25Z,2017-01-14T03:57:08Z,2017-01-14T21:48:46Z,MERGED,True,283,4,13,https://github.com/elear,Updated Pull Request for Manufacturer Usage Descriptions,6,[],https://github.com/the-tcpdump-group/tcpdump/pull/574,https://github.com/elear,1,https://github.com/the-tcpdump-group/tcpdump/pull/574,"This pull request adds support for draft-ietf-opsawg-mud or manufacturer usage descriptions.  These are DHCP options that devices use when they want ACLs employed by the network to provide some level of protection.  See the draft for more details.
This pull request also provides some support for RFC 4833 options.  There is also an issue opened related to timezones in print-bootp.c that this pull request addresses.","This pull request adds support for draft-ietf-opsawg-mud or manufacturer usage descriptions.  These are DHCP options that devices use when they want ACLs employed by the network to provide some level of protection.  See the draft for more details.
This pull request also provides some support for RFC 4833 options.  There is also an issue opened related to timezones in print-bootp.c that this pull request addresses.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,574,2016-12-08T14:05:25Z,2017-01-14T03:57:08Z,2017-01-14T21:48:46Z,MERGED,True,283,4,13,https://github.com/elear,Updated Pull Request for Manufacturer Usage Descriptions,6,[],https://github.com/the-tcpdump-group/tcpdump/pull/574,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/574#issuecomment-269790872,"This pull request adds support for draft-ietf-opsawg-mud or manufacturer usage descriptions.  These are DHCP options that devices use when they want ACLs employed by the network to provide some level of protection.  See the draft for more details.
This pull request also provides some support for RFC 4833 options.  There is also an issue opened related to timezones in print-bootp.c that this pull request addresses.","In print-dhcp6.c and print-lldp.c it would be wrong to print a string using ""%s"" because the contents of the memory may be generally arbitrary. It may contain control characters and is not guaranteed to contain a null character before printf() runs beyond the allocated memory. The established safe way of printing a string from a packet is to use one of the following functions: fn_print(), fn_printn(), fn_printzp(). Please check the comments at the declarations of those functions to see the subtle but important difference between them, so you can use the right one for each of the decoders concerned.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,574,2016-12-08T14:05:25Z,2017-01-14T03:57:08Z,2017-01-14T21:48:46Z,MERGED,True,283,4,13,https://github.com/elear,Updated Pull Request for Manufacturer Usage Descriptions,6,[],https://github.com/the-tcpdump-group/tcpdump/pull/574,https://github.com/elear,3,https://github.com/the-tcpdump-group/tcpdump/pull/574#issuecomment-269826104,"This pull request adds support for draft-ietf-opsawg-mud or manufacturer usage descriptions.  These are DHCP options that devices use when they want ACLs employed by the network to provide some level of protection.  See the draft for more details.
This pull request also provides some support for RFC 4833 options.  There is also an issue opened related to timezones in print-bootp.c that this pull request addresses.","Hi and thanks for your review.  I'll recommit along the following lines if it sounds right to you:
ND_PRINT((ndo,""=""));
fn_printn(ndo,tp,(int) optlen,NULL);
ND_PRINT((ndo,"")""));",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,575,2016-12-10T03:48:43Z,2016-12-10T03:57:14Z,2016-12-10T03:57:14Z,CLOSED,False,5,7,1,https://github.com/hhktony,delete judge,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/575,https://github.com/hhktony,1,https://github.com/the-tcpdump-group/tcpdump/pull/575,No need to judge,No need to judge,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,575,2016-12-10T03:48:43Z,2016-12-10T03:57:14Z,2016-12-10T03:57:14Z,CLOSED,False,5,7,1,https://github.com/hhktony,delete judge,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/575,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/575#issuecomment-266177043,No need to judge,"Fixed in 3976b40, with updates to a comment.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,576,2016-12-10T10:45:59Z,2016-12-10T19:01:31Z,2016-12-11T02:27:11Z,MERGED,True,9,11,1,https://github.com/hhktony,No need test,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/576,https://github.com/hhktony,1,https://github.com/the-tcpdump-group/tcpdump/pull/576,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,578,2017-01-03T09:54:48Z,2017-04-17T13:13:24Z,2017-04-17T13:34:29Z,CLOSED,False,49,4,4,https://github.com/job,Add support to decode a BGP Shutdown Communication,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/578,https://github.com/job,1,https://github.com/the-tcpdump-group/tcpdump/pull/578,The draft-ietf-idr-shutdown-02 document specifies a mechanism to transmit a short freeform UTF-8 [RFC3629] message as part of a Cease NOTIFICATION message [RFC4486] to inform the peer why the BGP session is being shutdown.,The draft-ietf-idr-shutdown-02 document specifies a mechanism to transmit a short freeform UTF-8 [RFC3629] message as part of a Cease NOTIFICATION message [RFC4486] to inform the peer why the BGP session is being shutdown.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,578,2017-01-03T09:54:48Z,2017-04-17T13:13:24Z,2017-04-17T13:34:29Z,CLOSED,False,49,4,4,https://github.com/job,Add support to decode a BGP Shutdown Communication,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/578,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/578#issuecomment-270117961,The draft-ietf-idr-shutdown-02 document specifies a mechanism to transmit a short freeform UTF-8 [RFC3629] message as part of a Cease NOTIFICATION message [RFC4486] to inform the peer why the BGP session is being shutdown.,Does the test pass in your working copy?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,578,2017-01-03T09:54:48Z,2017-04-17T13:13:24Z,2017-04-17T13:34:29Z,CLOSED,False,49,4,4,https://github.com/job,Add support to decode a BGP Shutdown Communication,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/578,https://github.com/job,3,https://github.com/the-tcpdump-group/tcpdump/pull/578#issuecomment-270118698,The draft-ietf-idr-shutdown-02 document specifies a mechanism to transmit a short freeform UTF-8 [RFC3629] message as part of a Cease NOTIFICATION message [RFC4486] to inform the peer why the BGP session is being shutdown.,@infrastation yes,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,578,2017-01-03T09:54:48Z,2017-04-17T13:13:24Z,2017-04-17T13:34:29Z,CLOSED,False,49,4,4,https://github.com/job,Add support to decode a BGP Shutdown Communication,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/578,https://github.com/job,4,https://github.com/the-tcpdump-group/tcpdump/pull/578#issuecomment-270118768,The draft-ietf-idr-shutdown-02 document specifies a mechanism to transmit a short freeform UTF-8 [RFC3629] message as part of a Cease NOTIFICATION message [RFC4486] to inform the peer why the BGP session is being shutdown.,"@infrastation seems it works on macosx, ubuntu, but not on arch linux and whatever travis is using",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,578,2017-01-03T09:54:48Z,2017-04-17T13:13:24Z,2017-04-17T13:34:29Z,CLOSED,False,49,4,4,https://github.com/job,Add support to decode a BGP Shutdown Communication,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/578,https://github.com/infrastation,5,https://github.com/the-tcpdump-group/tcpdump/pull/578#issuecomment-270120006,The draft-ietf-idr-shutdown-02 document specifies a mechanism to transmit a short freeform UTF-8 [RFC3629] message as part of a Cease NOTIFICATION message [RFC4486] to inform the peer why the BGP session is being shutdown.,Such behaviour often hints at an alignment issue. Would be useful to have a way to reproduce the test failure and look at the backtrace to see where the issue is.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,578,2017-01-03T09:54:48Z,2017-04-17T13:13:24Z,2017-04-17T13:34:29Z,CLOSED,False,49,4,4,https://github.com/job,Add support to decode a BGP Shutdown Communication,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/578,https://github.com/Habbie,6,https://github.com/the-tcpdump-group/tcpdump/pull/578#issuecomment-270214258,The draft-ietf-idr-shutdown-02 document specifies a mechanism to transmit a short freeform UTF-8 [RFC3629] message as part of a Cease NOTIFICATION message [RFC4486] to inform the peer why the BGP session is being shutdown.,"Looks like the included pcap was unparseable by recent libpcap (1.8.1 and master), I've replaced it with one that does work. My guess is this was not a code issue - or at least not an issue with this PR.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,578,2017-01-03T09:54:48Z,2017-04-17T13:13:24Z,2017-04-17T13:34:29Z,CLOSED,False,49,4,4,https://github.com/job,Add support to decode a BGP Shutdown Communication,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/578,https://github.com/job,7,https://github.com/the-tcpdump-group/tcpdump/pull/578#issuecomment-270932917,The draft-ietf-idr-shutdown-02 document specifies a mechanism to transmit a short freeform UTF-8 [RFC3629] message as part of a Cease NOTIFICATION message [RFC4486] to inform the peer why the BGP session is being shutdown.,@infrastation is this good?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,578,2017-01-03T09:54:48Z,2017-04-17T13:13:24Z,2017-04-17T13:34:29Z,CLOSED,False,49,4,4,https://github.com/job,Add support to decode a BGP Shutdown Communication,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/578,https://github.com/infrastation,8,https://github.com/the-tcpdump-group/tcpdump/pull/578#issuecomment-270933471,The draft-ietf-idr-shutdown-02 document specifies a mechanism to transmit a short freeform UTF-8 [RFC3629] message as part of a Cease NOTIFICATION message [RFC4486] to inform the peer why the BGP session is being shutdown.,"I only had made a brief look, hopefully other team members will review as well in more detail.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,578,2017-01-03T09:54:48Z,2017-04-17T13:13:24Z,2017-04-17T13:34:29Z,CLOSED,False,49,4,4,https://github.com/job,Add support to decode a BGP Shutdown Communication,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/578,https://github.com/job,9,https://github.com/the-tcpdump-group/tcpdump/pull/578#issuecomment-272525089,The draft-ietf-idr-shutdown-02 document specifies a mechanism to transmit a short freeform UTF-8 [RFC3629] message as part of a Cease NOTIFICATION message [RFC4486] to inform the peer why the BGP session is being shutdown.,"ping, anyone?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,578,2017-01-03T09:54:48Z,2017-04-17T13:13:24Z,2017-04-17T13:34:29Z,CLOSED,False,49,4,4,https://github.com/job,Add support to decode a BGP Shutdown Communication,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/578,https://github.com/job,10,https://github.com/the-tcpdump-group/tcpdump/pull/578#issuecomment-274761205,The draft-ietf-idr-shutdown-02 document specifies a mechanism to transmit a short freeform UTF-8 [RFC3629] message as part of a Cease NOTIFICATION message [RFC4486] to inform the peer why the BGP session is being shutdown.,ping anyone?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,578,2017-01-03T09:54:48Z,2017-04-17T13:13:24Z,2017-04-17T13:34:29Z,CLOSED,False,49,4,4,https://github.com/job,Add support to decode a BGP Shutdown Communication,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/578,https://github.com/infrastation,11,https://github.com/the-tcpdump-group/tcpdump/pull/578#issuecomment-274793480,The draft-ietf-idr-shutdown-02 document specifies a mechanism to transmit a short freeform UTF-8 [RFC3629] message as part of a Cease NOTIFICATION message [RFC4486] to inform the peer why the BGP session is being shutdown.,"Job, please give us some more time.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,578,2017-01-03T09:54:48Z,2017-04-17T13:13:24Z,2017-04-17T13:34:29Z,CLOSED,False,49,4,4,https://github.com/job,Add support to decode a BGP Shutdown Communication,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/578,https://github.com/job,12,https://github.com/the-tcpdump-group/tcpdump/pull/578#issuecomment-275088676,The draft-ietf-idr-shutdown-02 document specifies a mechanism to transmit a short freeform UTF-8 [RFC3629] message as part of a Cease NOTIFICATION message [RFC4486] to inform the peer why the BGP session is being shutdown.,"@infrastation sure thing! I appreciate your time and effort.
BTW, A new version of the draft was released. This version contains improved wording on what the protocol data unit looks like: https://tools.ietf.org/html/draft-ietf-idr-shutdown-03#section-2 Hopefully this clarifies what the patch does.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,578,2017-01-03T09:54:48Z,2017-04-17T13:13:24Z,2017-04-17T13:34:29Z,CLOSED,False,49,4,4,https://github.com/job,Add support to decode a BGP Shutdown Communication,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/578,https://github.com/job,13,https://github.com/the-tcpdump-group/tcpdump/pull/578#issuecomment-275088736,The draft-ietf-idr-shutdown-02 document specifies a mechanism to transmit a short freeform UTF-8 [RFC3629] message as part of a Cease NOTIFICATION message [RFC4486] to inform the peer why the BGP session is being shutdown.,"whoops, pressed the wrong button",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,578,2017-01-03T09:54:48Z,2017-04-17T13:13:24Z,2017-04-17T13:34:29Z,CLOSED,False,49,4,4,https://github.com/job,Add support to decode a BGP Shutdown Communication,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/578,https://github.com/job,14,https://github.com/the-tcpdump-group/tcpdump/pull/578#issuecomment-291192793,The draft-ietf-idr-shutdown-02 document specifies a mechanism to transmit a short freeform UTF-8 [RFC3629] message as part of a Cease NOTIFICATION message [RFC4486] to inform the peer why the BGP session is being shutdown.,any feedback? it has been 3 months :-),True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,578,2017-01-03T09:54:48Z,2017-04-17T13:13:24Z,2017-04-17T13:34:29Z,CLOSED,False,49,4,4,https://github.com/job,Add support to decode a BGP Shutdown Communication,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/578,https://github.com/lukastribus,15,https://github.com/the-tcpdump-group/tcpdump/pull/578#issuecomment-291495353,The draft-ietf-idr-shutdown-02 document specifies a mechanism to transmit a short freeform UTF-8 [RFC3629] message as part of a Cease NOTIFICATION message [RFC4486] to inform the peer why the BGP session is being shutdown.,"I think you may get more feedback on the mailing list:
http://www.tcpdump.org/#mailing-lists",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,578,2017-01-03T09:54:48Z,2017-04-17T13:13:24Z,2017-04-17T13:34:29Z,CLOSED,False,49,4,4,https://github.com/job,Add support to decode a BGP Shutdown Communication,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/578,https://github.com/job,16,https://github.com/the-tcpdump-group/tcpdump/pull/578#issuecomment-294471600,The draft-ietf-idr-shutdown-02 document specifies a mechanism to transmit a short freeform UTF-8 [RFC3629] message as part of a Cease NOTIFICATION message [RFC4486] to inform the peer why the BGP session is being shutdown.,@fxlb many thanks for taking the time to review this PR. Would you might checking again? I implemented all changes suggested in your review.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,578,2017-01-03T09:54:48Z,2017-04-17T13:13:24Z,2017-04-17T13:34:29Z,CLOSED,False,49,4,4,https://github.com/job,Add support to decode a BGP Shutdown Communication,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/578,https://github.com/fxlb,17,https://github.com/the-tcpdump-group/tcpdump/pull/578#issuecomment-294483278,The draft-ietf-idr-shutdown-02 document specifies a mechanism to transmit a short freeform UTF-8 [RFC3629] message as part of a Cease NOTIFICATION message [RFC4486] to inform the peer why the BGP session is being shutdown.,"No need for '\' in the end of line 2682.
Updated and commited.
Thanks you !",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,579,2017-01-03T10:26:14Z,2018-08-06T00:59:01Z,2018-08-06T00:59:01Z,CLOSED,False,34279,211974,597,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages,3,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/579,https://github.com/aravindprasads,1,https://github.com/the-tcpdump-group/tcpdump/pull/579,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004","Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,579,2017-01-03T10:26:14Z,2018-08-06T00:59:01Z,2018-08-06T00:59:01Z,CLOSED,False,34279,211974,597,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages,3,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/579,https://github.com/aravindprasads,2,https://github.com/the-tcpdump-group/tcpdump/pull/579#issuecomment-309324753,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004","Hi Tcpdump Reviewers,
Kindly review this pull request and let me know your views. Thanks for the support.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,579,2017-01-03T10:26:14Z,2018-08-06T00:59:01Z,2018-08-06T00:59:01Z,CLOSED,False,34279,211974,597,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages,3,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/579,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/579#issuecomment-330088086,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004",This work is now rebased on the current master branch and has 3 trailing whitespaces removed.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,579,2017-01-03T10:26:14Z,2018-08-06T00:59:01Z,2018-08-06T00:59:01Z,CLOSED,False,34279,211974,597,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages,3,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/579,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/579#issuecomment-330088206,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004",It would be nice to have a more substantial message in the proposed commit.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,579,2017-01-03T10:26:14Z,2018-08-06T00:59:01Z,2018-08-06T00:59:01Z,CLOSED,False,34279,211974,597,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages,3,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/579,https://github.com/infrastation,5,https://github.com/the-tcpdump-group/tcpdump/pull/579#issuecomment-335271822,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004","draft-funk-eap-ttls-v0-01 dates back to April 2007, it became RFC 5281 in August 2008. Do you know if the difference requires any changes to this code?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,579,2017-01-03T10:26:14Z,2018-08-06T00:59:01Z,2018-08-06T00:59:01Z,CLOSED,False,34279,211974,597,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages,3,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/579,https://github.com/aravindprasads,6,https://github.com/the-tcpdump-group/tcpdump/pull/579#issuecomment-342761813,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004","Hi @infrastation
Thanks for the review.
Addressed the following:

Code review comment in print-radius.c :




fixed the length variable check
type 0 value check. Handled types 1,2 only.





Updated the commit message


""draft-funk-eap-ttls-v0-01 dates back to April 2007, it became RFC 5281 in August 2008. Do you know if the difference requires any changes to this code?""





I checked the RFC. I think no further changes are required w r to the code additions made here. Kindly let me know if any further changes are needed here.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,579,2017-01-03T10:26:14Z,2018-08-06T00:59:01Z,2018-08-06T00:59:01Z,CLOSED,False,34279,211974,597,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages,3,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/579,https://github.com/infrastation,7,https://github.com/the-tcpdump-group/tcpdump/pull/579#issuecomment-342882240,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004","Thanks for the update, I cannot review right now, will update later unless another developer does it first.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,579,2017-01-03T10:26:14Z,2018-08-06T00:59:01Z,2018-08-06T00:59:01Z,CLOSED,False,34279,211974,597,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages,3,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/579,https://github.com/aravindprasads,8,https://github.com/the-tcpdump-group/tcpdump/pull/579#issuecomment-383811623,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004","@infrastation
Hi,
Could you kindly review this pull request",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,579,2017-01-03T10:26:14Z,2018-08-06T00:59:01Z,2018-08-06T00:59:01Z,CLOSED,False,34279,211974,597,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages,3,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/579,https://github.com/infrastation,9,https://github.com/the-tcpdump-group/tcpdump/pull/579#issuecomment-409645624,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004","Thank you for waiting, I have left some quick comments, to address those you will need to rebase this change on the current master branch.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,579,2017-01-03T10:26:14Z,2018-08-06T00:59:01Z,2018-08-06T00:59:01Z,CLOSED,False,34279,211974,597,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages,3,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/579,https://github.com/aravindprasads,10,https://github.com/the-tcpdump-group/tcpdump/pull/579#issuecomment-410561862,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004","Hi @infrastation
Thanks a lot for the review. I messed up with branch merges.
Hence, opened a new pull request with all your review comments addressed.
#694
Kindly review and let me know your views.
Thanks a lot for the support.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,585,2017-02-01T21:46:57Z,2017-02-01T22:53:09Z,2017-02-02T09:25:32Z,CLOSED,False,473,3,9,https://github.com/glebius,A bunch of changes that we got accumulated in the FreeBSD tree.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/585,https://github.com/glebius,1,https://github.com/the-tcpdump-group/tcpdump/pull/585,Fixes compilation at high warning levels.,Fixes compilation at high warning levels.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,585,2017-02-01T21:46:57Z,2017-02-01T22:53:09Z,2017-02-02T09:25:32Z,CLOSED,False,473,3,9,https://github.com/glebius,A bunch of changes that we got accumulated in the FreeBSD tree.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/585,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/585#issuecomment-276799262,Fixes compilation at high warning levels.,Please split this into separate pull requests for the addrtostr.c change (which we'll probably do differently - there's a reason why we made the loop index unsigned; see the changelog for addrtostr.c) and the pfsync enhancement.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,585,2017-02-01T21:46:57Z,2017-02-01T22:53:09Z,2017-02-02T09:25:32Z,CLOSED,False,473,3,9,https://github.com/glebius,A bunch of changes that we got accumulated in the FreeBSD tree.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/585,https://github.com/glebius,3,https://github.com/the-tcpdump-group/tcpdump/pull/585#issuecomment-276801432,Fixes compilation at high warning levels.,"I have hard time with github. Initially I created pull request for addrtostr.c. Then I pushed commit for pfsync into my fork, and it automatically was added to the pull request.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,585,2017-02-01T21:46:57Z,2017-02-01T22:53:09Z,2017-02-02T09:25:32Z,CLOSED,False,473,3,9,https://github.com/glebius,A bunch of changes that we got accumulated in the FreeBSD tree.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/585,https://github.com/guyharris,4,https://github.com/the-tcpdump-group/tcpdump/pull/585#issuecomment-276807976,Fixes compilation at high warning levels.,You probably need separate branches for each change.  (I keep separate source trees for each change I'm working on.),True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,585,2017-02-01T21:46:57Z,2017-02-01T22:53:09Z,2017-02-02T09:25:32Z,CLOSED,False,473,3,9,https://github.com/glebius,A bunch of changes that we got accumulated in the FreeBSD tree.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/585,https://github.com/glebius,5,https://github.com/the-tcpdump-group/tcpdump/pull/585#issuecomment-276809469,Fixes compilation at high warning levels.,I see. I will try to redo this.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,585,2017-02-01T21:46:57Z,2017-02-01T22:53:09Z,2017-02-02T09:25:32Z,CLOSED,False,473,3,9,https://github.com/glebius,A bunch of changes that we got accumulated in the FreeBSD tree.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/585,https://github.com/infrastation,6,https://github.com/the-tcpdump-group/tcpdump/pull/585#issuecomment-276907292,Fixes compilation at high warning levels.,"Pushing a commit to a branch makes it appear on the pull request, that is the traditional behaviour on GitHub. This way the requestors can address some of the points raised and then get back to the original discussion. Separate branches usually do the job.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,587,2017-02-01T22:56:21Z,2021-01-07T15:22:50Z,2021-01-07T15:22:50Z,CLOSED,False,472,2,8,https://github.com/glebius,Add parser for pfsync packets.,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/587,https://github.com/glebius,1,https://github.com/the-tcpdump-group/tcpdump/pull/587,"Add parser for pfsync packets, a protocol that synchronizes two (or more pf firewalls.  The parser was originally developed in OpenBSD, then was developed in the FreeBSD tree. Has been used for over a decade.
The compilation is dependable on presense of pfvar.h, just like the pflog parser.","Add parser for pfsync packets, a protocol that synchronizes two (or more pf firewalls.  The parser was originally developed in OpenBSD, then was developed in the FreeBSD tree. Has been used for over a decade.
The compilation is dependable on presense of pfvar.h, just like the pflog parser.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,587,2017-02-01T22:56:21Z,2021-01-07T15:22:50Z,2021-01-07T15:22:50Z,CLOSED,False,472,2,8,https://github.com/glebius,Add parser for pfsync packets.,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/587,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/587#issuecomment-276819742,"Add parser for pfsync packets, a protocol that synchronizes two (or more pf firewalls.  The parser was originally developed in OpenBSD, then was developed in the FreeBSD tree. Has been used for over a decade.
The compilation is dependable on presense of pfvar.h, just like the pflog parser.","IP protocol number 240 is unassigned, according to the Assigned Internet Protocol Numbers list.  Is 240 being used privately for pfsync-over-IP?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,587,2017-02-01T22:56:21Z,2021-01-07T15:22:50Z,2021-01-07T15:22:50Z,CLOSED,False,472,2,8,https://github.com/glebius,Add parser for pfsync packets.,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/587,https://github.com/glebius,3,https://github.com/the-tcpdump-group/tcpdump/pull/587#issuecomment-276821756,"Add parser for pfsync packets, a protocol that synchronizes two (or more pf firewalls.  The parser was originally developed in OpenBSD, then was developed in the FreeBSD tree. Has been used for over a decade.
The compilation is dependable on presense of pfvar.h, just like the pflog parser.","Yes, that's correct.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,587,2017-02-01T22:56:21Z,2021-01-07T15:22:50Z,2021-01-07T15:22:50Z,CLOSED,False,472,2,8,https://github.com/glebius,Add parser for pfsync packets.,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/587,https://github.com/guyharris,4,https://github.com/the-tcpdump-group/tcpdump/pull/587#issuecomment-277070835,"Add parser for pfsync packets, a protocol that synchronizes two (or more pf firewalls.  The parser was originally developed in OpenBSD, then was developed in the FreeBSD tree. Has been used for over a decade.
The compilation is dependable on presense of pfvar.h, just like the pflog parser.","So, if there's a protocol that sends these over the wire, is the format either 1) frozen or 2) extensible, so that we don't have to worry about the format of the messages being different in different versions of different OSes?  That's the reason why we require the OS's header file in print-pflog.c.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,587,2017-02-01T22:56:21Z,2021-01-07T15:22:50Z,2021-01-07T15:22:50Z,CLOSED,False,472,2,8,https://github.com/glebius,Add parser for pfsync packets.,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/587,https://github.com/glebius,5,https://github.com/the-tcpdump-group/tcpdump/pull/587#issuecomment-277083236,"Add parser for pfsync packets, a protocol that synchronizes two (or more pf firewalls.  The parser was originally developed in OpenBSD, then was developed in the FreeBSD tree. Has been used for over a decade.
The compilation is dependable on presense of pfvar.h, just like the pflog parser.","Hi! Well, the pfsync protocol comes from OpenBSD and in the first years it was changing very rapidly. Once we took it to FreeBSD, we don't change it, but it is still subject to change. AFAIK, OpenBSD has no intents to standardize it. :( That's why I decided that it will be lesser evil to include system;s header for the protocol definition. At least we will be protected against some change in the protocol, e.g. additional fields or values, but not from renames or removals.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,587,2017-02-01T22:56:21Z,2021-01-07T15:22:50Z,2021-01-07T15:22:50Z,CLOSED,False,472,2,8,https://github.com/glebius,Add parser for pfsync packets.,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/587,https://github.com/infrastation,6,https://github.com/the-tcpdump-group/tcpdump/pull/587#issuecomment-695408526,"Add parser for pfsync packets, a protocol that synchronizes two (or more pf firewalls.  The parser was originally developed in OpenBSD, then was developed in the FreeBSD tree. Has been used for over a decade.
The compilation is dependable on presense of pfvar.h, just like the pflog parser.","A practicable way to add and maintain pfsync support could be to introduce -T pfsync (it would be necessary anyway because protocol number 240 is unassigned, that is, not purposed for private use or experimentation, and can be allocated to something else at any time) and to give the current protocol encoding a name (e.g. ""pfsync-2020"", ""freebsd12"" or whatever else makes sense) and to state that this pfsync decoder decodes only this specific variety of the pfsync protocol. For example:
tcpdump -n -T pfsync ip proto 240

Then when and if the next protocol revision comes into existence (supposedly without the on-the-wire version number again), the old code will still work with old packets, and to disambiguate between the versions it will be enough to add a new --pfsync-version option with a sane default value. For example:
tcpdump -n -T pfsync ip proto 240
tcpdump -n -T pfsync --pfsync-version=freebsd13 ip proto 240

Once again, the compilation must not depend on FreeBSD and should specify the protocol snapshot in sufficient detail to be maintainable long-term. There should be a new test case with a .pcap file that tries as many code points as possible.
@glebius, please review and tell if you are willing to work on this.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,587,2017-02-01T22:56:21Z,2021-01-07T15:22:50Z,2021-01-07T15:22:50Z,CLOSED,False,472,2,8,https://github.com/glebius,Add parser for pfsync packets.,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/587,https://github.com/infrastation,7,https://github.com/the-tcpdump-group/tcpdump/pull/587#issuecomment-756182597,"Add parser for pfsync packets, a protocol that synchronizes two (or more pf firewalls.  The parser was originally developed in OpenBSD, then was developed in the FreeBSD tree. Has been used for over a decade.
The compilation is dependable on presense of pfvar.h, just like the pflog parser.","Looks like this is not going to converge in a mutually acceptable way, hence closing.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,588,2017-02-02T00:16:51Z,2017-02-02T20:18:57Z,2017-02-02T20:18:57Z,MERGED,True,176,5,5,https://github.com/glebius,Add support for libcasper library available on FreeBSD 11.0 and newer.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/588,https://github.com/glebius,1,https://github.com/the-tcpdump-group/tcpdump/pull/588,"The patch allows tcpdump to run sandboxed and still do name resolution.
The code is obtained from FreeBSD tree, where it was developed by
Pawel Jakub Dawidek pjd@FreeBSD.org
Mariusz Zaborski oshogbo@FreeBSD.org","The patch allows tcpdump to run sandboxed and still do name resolution.
The code is obtained from FreeBSD tree, where it was developed by
Pawel Jakub Dawidek pjd@FreeBSD.org
Mariusz Zaborski oshogbo@FreeBSD.org",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,589,2017-02-02T22:04:46Z,2017-04-02T20:42:55Z,2017-04-02T20:57:25Z,MERGED,True,20,0,1,https://github.com/glebius,On FreeBSD provide advice in case of rfmon not support error.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/589,https://github.com/glebius,1,https://github.com/the-tcpdump-group/tcpdump/pull/589,"On a FreeBSD system when using tcpdump -I -i wlanN and wlanN is not a monitor mode VAP, tcpdump will print an error message saying rfmon is not supported.
Give a concise explanation as to how one might solve this problem by creating a monitor mode VAP.","On a FreeBSD system when using tcpdump -I -i wlanN and wlanN is not a monitor mode VAP, tcpdump will print an error message saying rfmon is not supported.
Give a concise explanation as to how one might solve this problem by creating a monitor mode VAP.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,589,2017-02-02T22:04:46Z,2017-04-02T20:42:55Z,2017-04-02T20:57:25Z,MERGED,True,20,0,1,https://github.com/glebius,On FreeBSD provide advice in case of rfmon not support error.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/589,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/589#issuecomment-291014564,"On a FreeBSD system when using tcpdump -I -i wlanN and wlanN is not a monitor mode VAP, tcpdump will print an error message saying rfmon is not supported.
Give a concise explanation as to how one might solve this problem by creating a monitor mode VAP.",Thank you!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,590,2017-02-04T13:38:54Z,2017-02-04T13:59:29Z,2017-02-04T14:02:22Z,MERGED,True,1,1,1,https://github.com/TonySamuels,Fix typo in printing full name of CFM's CCM opcode value.,1,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/590,https://github.com/TonySamuels,1,https://github.com/the-tcpdump-group/tcpdump/pull/590,"Note that the following tests fail when I run make check, it does not seem plausible that my change broke them, however in case you believe it plausible that it was my change I am including the information so you can reject it:
Failed test: pcap-invalid-version-2
1c1
< EXIT CODE 00000100
> IP6 fe80::b299:28ff:fec8:d646.6696 > ff02::1:6.6696: babel 2 (424) hello update/id request tspc hmac hmac hmac hmac hmac hmac hmac hmac
Failed test: pcap-ng-invalid-vers-2
1c1
< EXIT CODE 00000100
> IP6 fe80::20c:29ff:fe9e:c1b2 > ff02::5: OSPFv3, Hello, length 88","Note that the following tests fail when I run make check, it does not seem plausible that my change broke them, however in case you believe it plausible that it was my change I am including the information so you can reject it:
Failed test: pcap-invalid-version-2
1c1
< EXIT CODE 00000100
> IP6 fe80::b299:28ff:fec8:d646.6696 > ff02::1:6.6696: babel 2 (424) hello update/id request tspc hmac hmac hmac hmac hmac hmac hmac hmac
Failed test: pcap-ng-invalid-vers-2
1c1
< EXIT CODE 00000100
> IP6 fe80::20c:29ff:fe9e:c1b2 > ff02::5: OSPFv3, Hello, length 88",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,590,2017-02-04T13:38:54Z,2017-02-04T13:59:29Z,2017-02-04T14:02:22Z,MERGED,True,1,1,1,https://github.com/TonySamuels,Fix typo in printing full name of CFM's CCM opcode value.,1,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/590,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/590#issuecomment-277447536,"Note that the following tests fail when I run make check, it does not seem plausible that my change broke them, however in case you believe it plausible that it was my change I am including the information so you can reject it:
Failed test: pcap-invalid-version-2
1c1
< EXIT CODE 00000100
> IP6 fe80::b299:28ff:fec8:d646.6696 > ff02::1:6.6696: babel 2 (424) hello update/id request tspc hmac hmac hmac hmac hmac hmac hmac hmac
Failed test: pcap-ng-invalid-vers-2
1c1
< EXIT CODE 00000100
> IP6 fe80::20c:29ff:fe9e:c1b2 > ff02::5: OSPFv3, Hello, length 88",Those failed tests should recover if you build your local copy with a more recent version of libpcap (note the Travis build uses master branch of libpcap and it passes).,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,590,2017-02-04T13:38:54Z,2017-02-04T13:59:29Z,2017-02-04T14:02:22Z,MERGED,True,1,1,1,https://github.com/TonySamuels,Fix typo in printing full name of CFM's CCM opcode value.,1,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/590,https://github.com/TonySamuels,3,https://github.com/the-tcpdump-group/tcpdump/pull/590#issuecomment-277447633,"Note that the following tests fail when I run make check, it does not seem plausible that my change broke them, however in case you believe it plausible that it was my change I am including the information so you can reject it:
Failed test: pcap-invalid-version-2
1c1
< EXIT CODE 00000100
> IP6 fe80::b299:28ff:fec8:d646.6696 > ff02::1:6.6696: babel 2 (424) hello update/id request tspc hmac hmac hmac hmac hmac hmac hmac hmac
Failed test: pcap-ng-invalid-vers-2
1c1
< EXIT CODE 00000100
> IP6 fe80::20c:29ff:fe9e:c1b2 > ff02::5: OSPFv3, Hello, length 88","Thank you for the hint.
Is it worth doing given Travis succeeded?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,590,2017-02-04T13:38:54Z,2017-02-04T13:59:29Z,2017-02-04T14:02:22Z,MERGED,True,1,1,1,https://github.com/TonySamuels,Fix typo in printing full name of CFM's CCM opcode value.,1,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/590,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/590#issuecomment-277447663,"Note that the following tests fail when I run make check, it does not seem plausible that my change broke them, however in case you believe it plausible that it was my change I am including the information so you can reject it:
Failed test: pcap-invalid-version-2
1c1
< EXIT CODE 00000100
> IP6 fe80::b299:28ff:fec8:d646.6696 > ff02::1:6.6696: babel 2 (424) hello update/id request tspc hmac hmac hmac hmac hmac hmac hmac hmac
Failed test: pcap-ng-invalid-vers-2
1c1
< EXIT CODE 00000100
> IP6 fe80::20c:29ff:fe9e:c1b2 > ff02::5: OSPFv3, Hello, length 88",Thank you!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,590,2017-02-04T13:38:54Z,2017-02-04T13:59:29Z,2017-02-04T14:02:22Z,MERGED,True,1,1,1,https://github.com/TonySamuels,Fix typo in printing full name of CFM's CCM opcode value.,1,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/590,https://github.com/TonySamuels,5,https://github.com/the-tcpdump-group/tcpdump/pull/590#issuecomment-277447673,"Note that the following tests fail when I run make check, it does not seem plausible that my change broke them, however in case you believe it plausible that it was my change I am including the information so you can reject it:
Failed test: pcap-invalid-version-2
1c1
< EXIT CODE 00000100
> IP6 fe80::b299:28ff:fec8:d646.6696 > ff02::1:6.6696: babel 2 (424) hello update/id request tspc hmac hmac hmac hmac hmac hmac hmac hmac
Failed test: pcap-ng-invalid-vers-2
1c1
< EXIT CODE 00000100
> IP6 fe80::20c:29ff:fe9e:c1b2 > ff02::5: OSPFv3, Hello, length 88",Thank you :),True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,592,2017-02-22T20:51:29Z,,2019-03-20T21:23:23Z,OPEN,False,8,2,1,https://github.com/coypoop,Make non-privsep tcpdump a configure fail,1,['compiling'],https://github.com/the-tcpdump-group/tcpdump/pull/592,https://github.com/coypoop,1,https://github.com/the-tcpdump-group/tcpdump/pull/592,"...unless --without-user is passed
Hopefully more people will be aware of this option as a result.","...unless --without-user is passed
Hopefully more people will be aware of this option as a result.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,592,2017-02-22T20:51:29Z,,2019-03-20T21:23:23Z,OPEN,False,8,2,1,https://github.com/coypoop,Make non-privsep tcpdump a configure fail,1,['compiling'],https://github.com/the-tcpdump-group/tcpdump/pull/592,https://github.com/coypoop,2,https://github.com/the-tcpdump-group/tcpdump/pull/592#issuecomment-281799656,"...unless --without-user is passed
Hopefully more people will be aware of this option as a result.","Feel free to do it any other way, I'm not an autoconf expert.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,595,2017-03-20T20:28:20Z,2017-04-02T08:08:18Z,2017-04-02T08:08:26Z,MERGED,True,19,1,6,https://github.com/shwang,add NSH ethertype,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/595,https://github.com/shwang,1,https://github.com/the-tcpdump-group/tcpdump/pull/595,"tcpdump currently can only read NSH headers that follow VXLAN GPE headers. NSH also has an IEEE allocated Ethertype that allows it to be inserted after the Ethernet layer.
https://tools.ietf.org/html/draft-ietf-sfc-nsh-12#section-12.1
If this pull request needs a test case, I'd be happy to write it. But it might be simple enough that it's not required.","tcpdump currently can only read NSH headers that follow VXLAN GPE headers. NSH also has an IEEE allocated Ethertype that allows it to be inserted after the Ethernet layer.
https://tools.ietf.org/html/draft-ietf-sfc-nsh-12#section-12.1
If this pull request needs a test case, I'd be happy to write it. But it might be simple enough that it's not required.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,595,2017-03-20T20:28:20Z,2017-04-02T08:08:18Z,2017-04-02T08:08:26Z,MERGED,True,19,1,6,https://github.com/shwang,add NSH ethertype,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/595,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/595#issuecomment-288032070,"tcpdump currently can only read NSH headers that follow VXLAN GPE headers. NSH also has an IEEE allocated Ethertype that allows it to be inserted after the Ethernet layer.
https://tools.ietf.org/html/draft-ietf-sfc-nsh-12#section-12.1
If this pull request needs a test case, I'd be happy to write it. But it might be simple enough that it's not required.","Thanks, please add a test case.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,595,2017-03-20T20:28:20Z,2017-04-02T08:08:18Z,2017-04-02T08:08:26Z,MERGED,True,19,1,6,https://github.com/shwang,add NSH ethertype,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/595,https://github.com/shwang,3,https://github.com/the-tcpdump-group/tcpdump/pull/595#issuecomment-290954962,"tcpdump currently can only read NSH headers that follow VXLAN GPE headers. NSH also has an IEEE allocated Ethertype that allows it to be inserted after the Ethernet layer.
https://tools.ietf.org/html/draft-ietf-sfc-nsh-12#section-12.1
If this pull request needs a test case, I'd be happy to write it. But it might be simple enough that it's not required.",@fxlb Added a test case. Please let me know if there's anything this patch needs before it can be merged!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,595,2017-03-20T20:28:20Z,2017-04-02T08:08:18Z,2017-04-02T08:08:26Z,MERGED,True,19,1,6,https://github.com/shwang,add NSH ethertype,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/595,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/595#issuecomment-290971600,"tcpdump currently can only read NSH headers that follow VXLAN GPE headers. NSH also has an IEEE allocated Ethertype that allows it to be inserted after the Ethernet layer.
https://tools.ietf.org/html/draft-ietf-sfc-nsh-12#section-12.1
If this pull request needs a test case, I'd be happy to write it. But it might be simple enough that it's not required.",Thank you!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,597,2017-03-26T16:58:39Z,2019-03-24T08:09:34Z,2019-03-24T08:09:34Z,MERGED,True,2639,152,12,https://github.com/kivinen,"IEEE 802.15.4 printer which understands frame version 2 frames, and a…",8,[],https://github.com/the-tcpdump-group/tcpdump/pull/597,https://github.com/kivinen,1,https://github.com/the-tcpdump-group/tcpdump/pull/597,…lso knows how to print some mac commands and IE contents. Also includes the zep printer to decode ZigBee Encapsulation Protocol frames,…lso knows how to print some mac commands and IE contents. Also includes the zep printer to decode ZigBee Encapsulation Protocol frames,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,597,2017-03-26T16:58:39Z,2019-03-24T08:09:34Z,2019-03-24T08:09:34Z,MERGED,True,2639,152,12,https://github.com/kivinen,"IEEE 802.15.4 printer which understands frame version 2 frames, and a…",8,[],https://github.com/the-tcpdump-group/tcpdump/pull/597,https://github.com/mcr,2,https://github.com/the-tcpdump-group/tcpdump/pull/597#issuecomment-289300150,…lso knows how to print some mac commands and IE contents. Also includes the zep printer to decode ZigBee Encapsulation Protocol frames,"Could you add some pcap files with some ZBE packets in it, and a make check result?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,597,2017-03-26T16:58:39Z,2019-03-24T08:09:34Z,2019-03-24T08:09:34Z,MERGED,True,2639,152,12,https://github.com/kivinen,"IEEE 802.15.4 printer which understands frame version 2 frames, and a…",8,[],https://github.com/the-tcpdump-group/tcpdump/pull/597,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/597#issuecomment-289302072,…lso knows how to print some mac commands and IE contents. Also includes the zep printer to decode ZigBee Encapsulation Protocol frames,Thanks. I think you need to 'touch .devel' in your working directory to get more warnings (see CONTRIBUTING file) and see https://travis-ci.org/the-tcpdump-group/tcpdump/jobs/215255654.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,597,2017-03-26T16:58:39Z,2019-03-24T08:09:34Z,2019-03-24T08:09:34Z,MERGED,True,2639,152,12,https://github.com/kivinen,"IEEE 802.15.4 printer which understands frame version 2 frames, and a…",8,[],https://github.com/the-tcpdump-group/tcpdump/pull/597,https://github.com/kivinen,4,https://github.com/the-tcpdump-group/tcpdump/pull/597#issuecomment-289311260,…lso knows how to print some mac commands and IE contents. Also includes the zep printer to decode ZigBee Encapsulation Protocol frames,"Ok, fixed the warnings now. Used the attribute ((unused)) to get rid of the warnings of arguments of ieee802_15_4_frag_frame not being used, as the function is still empty (implementing it is bit tricky, and as I have never seen example frames of that type, there is no point of implementing it).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,597,2017-03-26T16:58:39Z,2019-03-24T08:09:34Z,2019-03-24T08:09:34Z,MERGED,True,2639,152,12,https://github.com/kivinen,"IEEE 802.15.4 printer which understands frame version 2 frames, and a…",8,[],https://github.com/the-tcpdump-group/tcpdump/pull/597,https://github.com/guyharris,5,https://github.com/the-tcpdump-group/tcpdump/pull/597#issuecomment-289312396,…lso knows how to print some mac commands and IE contents. Also includes the zep printer to decode ZigBee Encapsulation Protocol frames,"Used the attribute ((unused)) to get rid of the warnings of arguments of ieee802_15_4_frag_frame not being used

_U_ is used elsewhere in tcpdump.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,597,2017-03-26T16:58:39Z,2019-03-24T08:09:34Z,2019-03-24T08:09:34Z,MERGED,True,2639,152,12,https://github.com/kivinen,"IEEE 802.15.4 printer which understands frame version 2 frames, and a…",8,[],https://github.com/the-tcpdump-group/tcpdump/pull/597,https://github.com/kivinen,6,https://github.com/the-tcpdump-group/tcpdump/pull/597#issuecomment-289313067,…lso knows how to print some mac commands and IE contents. Also includes the zep printer to decode ZigBee Encapsulation Protocol frames,"Hmm.. don't find any cases of U in code, and I do not see it being defined anywhere.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,597,2017-03-26T16:58:39Z,2019-03-24T08:09:34Z,2019-03-24T08:09:34Z,MERGED,True,2639,152,12,https://github.com/kivinen,"IEEE 802.15.4 printer which understands frame version 2 frames, and a…",8,[],https://github.com/the-tcpdump-group/tcpdump/pull/597,https://github.com/guyharris,7,https://github.com/the-tcpdump-group/tcpdump/pull/597#issuecomment-289880045,…lso knows how to print some mac commands and IE contents. Also includes the zep printer to decode ZigBee Encapsulation Protocol frames,"Hmm.. don't find any cases of U in code

(Sorry, that was supposed to be _U_, not __U__; I fixed that later.)
$ pwd
/Users/gharris/src/cmd/tcpdump.org/work/tcpdump
$ egrep _U_ *.c
machdep.c:abort_on_misalignment(char *ebuf _U_, size_t ebufsiz _U_)
print-decnet.c:print_elist(const char *elp _U_, u_int len _U_)
print-esp.c:static void esp_init(netdissect_options *ndo _U_)
print-esp.c:    _U_
print-esp.c:    _U_
print-esp.c:    _U_
print-fddi.c:fddi_smt_print(netdissect_options *ndo, const u_char *p _U_, u_int length _U_)
print-forces.c:              uint16_t op_msk _U_, int indent)
print-forces.c:               uint16_t op_msk _U_, int indent)
print-forces.c:               uint16_t op_msk _U_, int indent)

    ....


and I do not see it being defined anywhere.

$ egrep _U_ aclocal.m4 CMakeLists.txt 
aclocal.m4:  # so we define _U_ to an empty string.
aclocal.m4:  V_DEFS=""$V_DEFS -D_U_=\""\""""
aclocal.m4:  V_DEFS=""$V_DEFS -D_U_=\""__attribute__((unused))\""""
aclocal.m4:  V_DEFS=""$V_DEFS -D_U_=\""\""""
CMakeLists.txt:    add_definitions( ""-D_U_="" )
CMakeLists.txt:    add_definitions( ""-D_U_=__attribute__((unused))"" )
CMakeLists.txt:    add_definitions( ""-D_U_="" )",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,597,2017-03-26T16:58:39Z,2019-03-24T08:09:34Z,2019-03-24T08:09:34Z,MERGED,True,2639,152,12,https://github.com/kivinen,"IEEE 802.15.4 printer which understands frame version 2 frames, and a…",8,[],https://github.com/the-tcpdump-group/tcpdump/pull/597,https://github.com/kivinen,8,https://github.com/the-tcpdump-group/tcpdump/pull/597#issuecomment-289923977,…lso knows how to print some mac commands and IE contents. Also includes the zep printer to decode ZigBee Encapsulation Protocol frames,"Ah, U with only one underscores around it, I of course grepped with double underscores, as that is what gcc normally uses. Fixed now to use U with underscores...",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,599,2017-04-20T17:04:54Z,2017-05-03T17:36:18Z,2017-05-03T17:36:18Z,CLOSED,False,4,3,1,https://github.com/job,Fix two possible issues in decoding BGP Shutdown Communication,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/599,https://github.com/job,1,https://github.com/the-tcpdump-group/tcpdump/pull/599,"the condition where the shutdown communication length field claims to be longer then the BGP NOTIFICATION Cease message actually can accommodate.


if the shutdown communication payload contains trash, like \0 (NUL) we should be able to print that","the condition where the shutdown communication length field claims to be longer then the BGP NOTIFICATION Cease message actually can accommodate.


if the shutdown communication payload contains trash, like \0 (NUL) we should be able to print that",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,599,2017-04-20T17:04:54Z,2017-05-03T17:36:18Z,2017-05-03T17:36:18Z,CLOSED,False,4,3,1,https://github.com/job,Fix two possible issues in decoding BGP Shutdown Communication,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/599,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/599#issuecomment-298981647,"the condition where the shutdown communication length field claims to be longer then the BGP NOTIFICATION Cease message actually can accommodate.


if the shutdown communication payload contains trash, like \0 (NUL) we should be able to print that","Merged, thank you.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,602,2017-05-16T09:38:47Z,2020-05-25T11:06:16Z,2020-05-25T11:06:17Z,MERGED,True,2,2,1,https://github.com/gromit1811,"Don't print ""bad length"" for fragmented UDP packets",2,[],https://github.com/the-tcpdump-group/tcpdump/pull/602,https://github.com/gromit1811,1,https://github.com/the-tcpdump-group/tcpdump/pull/602,"In case of fragmentation, it's perfectly OK for the total UDP length to be
larger than the length of the first packet, so don't raise a false alert.
Before:
10:53:29.474809 IP (tos 0x0, ttl 64, id 56205, offset 0, flags [+], proto UDP (17), length 1500)
192.168.1.214.60464 > 192.168.1.1.12345: UDP, bad length 1600 > 1472
10:53:29.474853 IP (tos 0x0, ttl 64, id 56205, offset 1480, flags [none], proto UDP (17), length 148)
192.168.1.214 > 192.168.1.1: ip-proto-17
After:
10:53:29.474809 IP (tos 0x0, ttl 64, id 56205, offset 0, flags [+], proto UDP (17), length 1500)
192.168.1.214.60464 > 192.168.1.1.12345: UDP, length 1600
10:53:29.474853 IP (tos 0x0, ttl 64, id 56205, offset 1480, flags [none], proto UDP (17), length 148)
192.168.1.214 > 192.168.1.1: ip-proto-17
Signed-off-by: Martin Buck mb-tmp-tvguho.pbz@gromit.dyndns.org","In case of fragmentation, it's perfectly OK for the total UDP length to be
larger than the length of the first packet, so don't raise a false alert.
Before:
10:53:29.474809 IP (tos 0x0, ttl 64, id 56205, offset 0, flags [+], proto UDP (17), length 1500)
192.168.1.214.60464 > 192.168.1.1.12345: UDP, bad length 1600 > 1472
10:53:29.474853 IP (tos 0x0, ttl 64, id 56205, offset 1480, flags [none], proto UDP (17), length 148)
192.168.1.214 > 192.168.1.1: ip-proto-17
After:
10:53:29.474809 IP (tos 0x0, ttl 64, id 56205, offset 0, flags [+], proto UDP (17), length 1500)
192.168.1.214.60464 > 192.168.1.1.12345: UDP, length 1600
10:53:29.474853 IP (tos 0x0, ttl 64, id 56205, offset 1480, flags [none], proto UDP (17), length 148)
192.168.1.214 > 192.168.1.1: ip-proto-17
Signed-off-by: Martin Buck mb-tmp-tvguho.pbz@gromit.dyndns.org",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,603,2017-05-18T13:51:07Z,2020-05-28T11:47:51Z,2020-05-28T20:00:51Z,MERGED,True,298,1,21,https://github.com/qsn,Add support for MACsec (IEEE 802.1AE-2006),17,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/603,https://github.com/qsn,1,https://github.com/the-tcpdump-group/tcpdump/pull/603,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,605,2017-05-30T09:53:35Z,2017-06-01T09:32:21Z,2017-06-02T08:26:39Z,CLOSED,False,2,2,1,https://github.com/job,"RFC 6608 specifies subcode 0 to be value ""Unspecified Error""",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/605,https://github.com/job,1,https://github.com/the-tcpdump-group/tcpdump/pull/605,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,605,2017-05-30T09:53:35Z,2017-06-01T09:32:21Z,2017-06-02T08:26:39Z,CLOSED,False,2,2,1,https://github.com/job,"RFC 6608 specifies subcode 0 to be value ""Unspecified Error""",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/605,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/605#issuecomment-305441378,,"The first change is fine, the second will make a problem. The last element on a struct tok array must have the second field set to NULL to indicate the end of array for tok2strbuf() (and thus tok2str()). In that case the first field remains unused, as a matter of code style it is usually 0. Commit da97db5 makes a corrected change on your behalf.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,607,2017-06-19T14:03:13Z,2017-08-30T11:57:18Z,2017-08-30T13:39:28Z,MERGED,True,39,10,1,https://github.com/mlichvar,Improvements of NTP printer,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/607,https://github.com/mlichvar,1,https://github.com/the-tcpdump-group/tcpdump/pull/607,"Here are some improvements for the NTP printer to support sub-second polling intervals, MACs using 160-bit digests and reference IDs generated from IPv6 addresses. There is also a fix for printing key IDs.
I'd like to add a test for the NTP printer, but there is a problem that NTP timestamps are printed in local time and won't match the expected output unless the timezone is the same. Would it be ok to set TZ=UTC in tests/TESTonce?","Here are some improvements for the NTP printer to support sub-second polling intervals, MACs using 160-bit digests and reference IDs generated from IPv6 addresses. There is also a fix for printing key IDs.
I'd like to add a test for the NTP printer, but there is a problem that NTP timestamps are printed in local time and won't match the expected output unless the timezone is the same. Would it be ok to set TZ=UTC in tests/TESTonce?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,607,2017-06-19T14:03:13Z,2017-08-30T11:57:18Z,2017-08-30T13:39:28Z,MERGED,True,39,10,1,https://github.com/mlichvar,Improvements of NTP printer,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/607,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/607#issuecomment-325615022,"Here are some improvements for the NTP printer to support sub-second polling intervals, MACs using 160-bit digests and reference IDs generated from IPv6 addresses. There is also a fix for printing key IDs.
I'd like to add a test for the NTP printer, but there is a problem that NTP timestamps are printed in local time and won't match the expected output unless the timezone is the same. Would it be ok to set TZ=UTC in tests/TESTonce?","I have looked through the commits, the three smaller ones are OK but the size checks in the 160-bit digest one don't look quite right. I can cherry-pick the smaller ones now if you would be comfortable rebasing your changes on the master branch afterwards. Then I can make another attempt at the remaining change later.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,607,2017-06-19T14:03:13Z,2017-08-30T11:57:18Z,2017-08-30T13:39:28Z,MERGED,True,39,10,1,https://github.com/mlichvar,Improvements of NTP printer,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/607,https://github.com/sjvudp,3,https://github.com/the-tcpdump-group/tcpdump/pull/607#issuecomment-325622706,"Here are some improvements for the NTP printer to support sub-second polling intervals, MACs using 160-bit digests and reference IDs generated from IPv6 addresses. There is also a fix for printing key IDs.
I'd like to add a test for the NTP printer, but there is a problem that NTP timestamps are printed in local time and won't match the expected output unless the timezone is the same. Would it be ok to set TZ=UTC in tests/TESTonce?",I could try to cherry-pick/merge this request into 625.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,607,2017-06-19T14:03:13Z,2017-08-30T11:57:18Z,2017-08-30T13:39:28Z,MERGED,True,39,10,1,https://github.com/mlichvar,Improvements of NTP printer,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/607,https://github.com/mlichvar,4,https://github.com/the-tcpdump-group/tcpdump/pull/607#issuecomment-325626760,"Here are some improvements for the NTP printer to support sub-second polling intervals, MACs using 160-bit digests and reference IDs generated from IPv6 addresses. There is also a fix for printing key IDs.
I'd like to add a test for the NTP printer, but there is a problem that NTP timestamps are printed in local time and won't match the expected output unless the timezone is the same. Would it be ok to set TZ=UTC in tests/TESTonce?",Ok. I'm not sure what's wrong with the size checks. I've rebased the patchset on the current master branch and reordered them so the digest patch is last if you want to skip it for now.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,607,2017-06-19T14:03:13Z,2017-08-30T11:57:18Z,2017-08-30T13:39:28Z,MERGED,True,39,10,1,https://github.com/mlichvar,Improvements of NTP printer,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/607,https://github.com/infrastation,5,https://github.com/the-tcpdump-group/tcpdump/pull/607#issuecomment-325630754,"Here are some improvements for the NTP printer to support sub-second polling intervals, MACs using 160-bit digests and reference IDs generated from IPv6 addresses. There is also a fix for printing key IDs.
I'd like to add a test for the NTP printer, but there is a problem that NTP timestamps are printed in local time and won't match the expected output unless the timezone is the same. Would it be ok to set TZ=UTC in tests/TESTonce?","The first three commits are now in the master branch, thank you. The remaining one needs another round and will be dealt with later.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,607,2017-06-19T14:03:13Z,2017-08-30T11:57:18Z,2017-08-30T13:39:28Z,MERGED,True,39,10,1,https://github.com/mlichvar,Improvements of NTP printer,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/607,https://github.com/sjvudp,6,https://github.com/the-tcpdump-group/tcpdump/pull/607#issuecomment-325632255,"Here are some improvements for the NTP printer to support sub-second polling intervals, MACs using 160-bit digests and reference IDs generated from IPv6 addresses. There is also a fix for printing key IDs.
I'd like to add a test for the NTP printer, but there is a problem that NTP timestamps are printed in local time and won't match the expected output unless the timezone is the same. Would it be ok to set TZ=UTC in tests/TESTonce?","As there seem overlaps with pull request 625 (which is larger), I wonder whether it would be easier to try 625 first. Anyway, I started to manually merge the fixes I agree with to the ""f-NTP-mode6"" branch.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,607,2017-06-19T14:03:13Z,2017-08-30T11:57:18Z,2017-08-30T13:39:28Z,MERGED,True,39,10,1,https://github.com/mlichvar,Improvements of NTP printer,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/607,https://github.com/infrastation,7,https://github.com/the-tcpdump-group/tcpdump/pull/607#issuecomment-325982413,"Here are some improvements for the NTP printer to support sub-second polling intervals, MACs using 160-bit digests and reference IDs generated from IPv6 addresses. There is also a fix for printing key IDs.
I'd like to add a test for the NTP printer, but there is a problem that NTP timestamps are printed in local time and won't match the expected output unless the timezone is the same. Would it be ok to set TZ=UTC in tests/TESTonce?","The 160-bit digest commit is now in the master branch too, thank you. After studying the code once again it became clear that the length checks were OK in this pull request, they were not completely OK in the original file. Commit 0559dc9 addresses that.
NTP timestamps are now always printed in UTC so if you have a test case to contribute it would come handy.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,607,2017-06-19T14:03:13Z,2017-08-30T11:57:18Z,2017-08-30T13:39:28Z,MERGED,True,39,10,1,https://github.com/mlichvar,Improvements of NTP printer,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/607,https://github.com/mlichvar,8,https://github.com/the-tcpdump-group/tcpdump/pull/607#issuecomment-325993052,"Here are some improvements for the NTP printer to support sub-second polling intervals, MACs using 160-bit digests and reference IDs generated from IPv6 addresses. There is also a fix for printing key IDs.
I'd like to add a test for the NTP printer, but there is a problem that NTP timestamps are printed in local time and won't match the expected output unless the timezone is the same. Would it be ok to set TZ=UTC in tests/TESTonce?",Thanks! I'll make a new PR for the NTP test.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,608,2017-06-30T11:59:05Z,2017-09-24T13:16:02Z,2017-09-25T08:55:10Z,MERGED,True,181,1,6,https://github.com/herwinw,assorted RADIUS updates,5,['fixed in 4.10.0'],https://github.com/the-tcpdump-group/tcpdump/pull/608,https://github.com/herwinw,1,https://github.com/the-tcpdump-group/tcpdump/pull/608,Added various RADIUS RFCs to the dissector. Every change that is more than just a trivial addition the the attribute array contains unit tests.,Added various RADIUS RFCs to the dissector. Every change that is more than just a trivial addition the the attribute array contains unit tests.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,608,2017-06-30T11:59:05Z,2017-09-24T13:16:02Z,2017-09-25T08:55:10Z,MERGED,True,181,1,6,https://github.com/herwinw,assorted RADIUS updates,5,['fixed in 4.10.0'],https://github.com/the-tcpdump-group/tcpdump/pull/608,https://github.com/herwinw,2,https://github.com/the-tcpdump-group/tcpdump/pull/608#issuecomment-317163548,Added various RADIUS RFCs to the dissector. Every change that is more than just a trivial addition the the attribute array contains unit tests.,"You're right, fixed that one",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,608,2017-06-30T11:59:05Z,2017-09-24T13:16:02Z,2017-09-25T08:55:10Z,MERGED,True,181,1,6,https://github.com/herwinw,assorted RADIUS updates,5,['fixed in 4.10.0'],https://github.com/the-tcpdump-group/tcpdump/pull/608,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/608#issuecomment-320337578,Added various RADIUS RFCs to the dissector. Every change that is more than just a trivial addition the the attribute array contains unit tests.,Please let us a little more time to review once again.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,608,2017-06-30T11:59:05Z,2017-09-24T13:16:02Z,2017-09-25T08:55:10Z,MERGED,True,181,1,6,https://github.com/herwinw,assorted RADIUS updates,5,['fixed in 4.10.0'],https://github.com/the-tcpdump-group/tcpdump/pull/608,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/608#issuecomment-327919181,Added various RADIUS RFCs to the dissector. Every change that is more than just a trivial addition the the attribute array contains unit tests.,"The first two commits are now in the master branch. RFC 4072 and RFC 5090 commits are OK but I didn't pick them because they depend on the previous commits (can be put in front and merged after a rebase and conflict resolution if anybody is willing), the other 3 commits add new code and require some more attention.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,608,2017-06-30T11:59:05Z,2017-09-24T13:16:02Z,2017-09-25T08:55:10Z,MERGED,True,181,1,6,https://github.com/herwinw,assorted RADIUS updates,5,['fixed in 4.10.0'],https://github.com/the-tcpdump-group/tcpdump/pull/608,https://github.com/infrastation,5,https://github.com/the-tcpdump-group/tcpdump/pull/608#issuecomment-329604510,Added various RADIUS RFCs to the dissector. Every change that is more than just a trivial addition the the attribute array contains unit tests.,"The RFC5176/RFC5580 commit adds custom lookup code instead of reusing tok2str(), is there a reason for that?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,608,2017-06-30T11:59:05Z,2017-09-24T13:16:02Z,2017-09-25T08:55:10Z,MERGED,True,181,1,6,https://github.com/herwinw,assorted RADIUS updates,5,['fixed in 4.10.0'],https://github.com/the-tcpdump-group/tcpdump/pull/608,https://github.com/herwinw,6,https://github.com/the-tcpdump-group/tcpdump/pull/608#issuecomment-329697154,Added various RADIUS RFCs to the dissector. Every change that is more than just a trivial addition the the attribute array contains unit tests.,"Since ""I didn't know about that"" is not really a valid reason: I've updated the change to use tok2str",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,608,2017-06-30T11:59:05Z,2017-09-24T13:16:02Z,2017-09-25T08:55:10Z,MERGED,True,181,1,6,https://github.com/herwinw,assorted RADIUS updates,5,['fixed in 4.10.0'],https://github.com/the-tcpdump-group/tcpdump/pull/608,https://github.com/infrastation,7,https://github.com/the-tcpdump-group/tcpdump/pull/608#issuecomment-329733379,Added various RADIUS RFCs to the dissector. Every change that is more than just a trivial addition the the attribute array contains unit tests.,"The RFC 3162 commit needs the following issues fixed in the function print_attr_netmask6():


ND_TCHECK2() checks the buffer by a fixed length of 18 but the TLV value field is variable-length because of the Prefix field it includes:
The Prefix field is up to 16 octets in length.  Bits outside of
the Prefix-Length, if included, must be zero.



The TLV value length is not checked to be consistent with the masklen. For example, what should be done if there are 4 bytes of address and a /128 netmask in the TLV?.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,608,2017-06-30T11:59:05Z,2017-09-24T13:16:02Z,2017-09-25T08:55:10Z,MERGED,True,181,1,6,https://github.com/herwinw,assorted RADIUS updates,5,['fixed in 4.10.0'],https://github.com/the-tcpdump-group/tcpdump/pull/608,https://github.com/infrastation,8,https://github.com/the-tcpdump-group/tcpdump/pull/608#issuecomment-329743170,Added various RADIUS RFCs to the dissector. Every change that is more than just a trivial addition the the attribute array contains unit tests.,"The RFC 4818 commit will be OK after the points raised above are resolved. This way, the previous comment describes the only remaining issues for this pull request. If you have time, please also try to fix the compiler warnings these changes introduce (see the Travis CI build log or touch .devel && ./configure to see locally). Thank you.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,608,2017-06-30T11:59:05Z,2017-09-24T13:16:02Z,2017-09-25T08:55:10Z,MERGED,True,181,1,6,https://github.com/herwinw,assorted RADIUS updates,5,['fixed in 4.10.0'],https://github.com/the-tcpdump-group/tcpdump/pull/608,https://github.com/herwinw,9,https://github.com/the-tcpdump-group/tcpdump/pull/608#issuecomment-331408811,Added various RADIUS RFCs to the dissector. Every change that is more than just a trivial addition the the attribute array contains unit tests.,"I believe I've fixed everything except the ""The TLV value length is not checked to be consistent with the masklen"". I'm not really sure what the best option is here, the RFC doesn't this case. They're now filled with 0, maybe an error (or a warning) would be more suitable?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,608,2017-06-30T11:59:05Z,2017-09-24T13:16:02Z,2017-09-25T08:55:10Z,MERGED,True,181,1,6,https://github.com/herwinw,assorted RADIUS updates,5,['fixed in 4.10.0'],https://github.com/the-tcpdump-group/tcpdump/pull/608,https://github.com/infrastation,10,https://github.com/the-tcpdump-group/tcpdump/pull/608#issuecomment-331709613,Added various RADIUS RFCs to the dissector. Every change that is more than just a trivial addition the the attribute array contains unit tests.,"Thank you, see commit 0bc9b44 for some more fixups. As far as I could figure it out, there is no trivial way to test for non-zero bits outside the declared prefix length, so I had left this check unimplemented (it does not affect safety within tcpdump).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,609,2017-07-01T08:16:10Z,2018-01-29T10:35:52Z,2018-01-29T10:35:52Z,CLOSED,False,332,4,6,https://github.com/olibre,"Generate ""CMakeLists.txt"" to open tcpdump project with many IDEs",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/609,https://github.com/olibre,1,https://github.com/the-tcpdump-group/tcpdump/pull/609,"This implementation of ""CMakeLists.txt"" is NOT a replacement
of automake/autotools/autoconf but a generated file by
""./configure"" like the generation of file ""Makefile"".
The main objective is just to ease the opening of the tcpdump project
using many CMake-friendly IDE as Qt Creator, KDevelop,
GNOME Builder, NetBeans, CLion, Visual Studio... and many more...
The file ""./configure"" has been modified because I do not know
how to handle some double quotes \""\"" within -DMACRO=""""  :-/
I hope ""./configure"" is not often generated from ""configure.in""...
The ""configure.in"" has also been modified to add generation
of the ""CMakeLists.txt"" from ""CMakeLists.txt.in"".
The new added file ""CMakeLists.txt.in"" is the mirror of
the reference file ""Makefile.in"" in order to ease maintenance.
Any modification within ""Makefile.in"" should be easily ported
to ""CMakeLists.txt.in"".
However, I have not implemented all features from
files ""Makefile.in"" and ""Makefile-devel-adds"".
But I may do it if some people request it...
For the moment, the generated ""CMakeLists.txt"" is basic
and does not contains all the nice features we can expect
from advanced CMake-based project.
However, if requested, I may add the nice features
I have already provided to project tcpflow:
https://github.com/simsong/tcpflow/pull/145/files
I do not plan to fully replace ""./configure""
by a standalone CMake because the ""./configure""
is very large and handle so many platforms
and different configurations.
(nearly impossible to test all the combinations)","This implementation of ""CMakeLists.txt"" is NOT a replacement
of automake/autotools/autoconf but a generated file by
""./configure"" like the generation of file ""Makefile"".
The main objective is just to ease the opening of the tcpdump project
using many CMake-friendly IDE as Qt Creator, KDevelop,
GNOME Builder, NetBeans, CLion, Visual Studio... and many more...
The file ""./configure"" has been modified because I do not know
how to handle some double quotes \""\"" within -DMACRO=""""  :-/
I hope ""./configure"" is not often generated from ""configure.in""...
The ""configure.in"" has also been modified to add generation
of the ""CMakeLists.txt"" from ""CMakeLists.txt.in"".
The new added file ""CMakeLists.txt.in"" is the mirror of
the reference file ""Makefile.in"" in order to ease maintenance.
Any modification within ""Makefile.in"" should be easily ported
to ""CMakeLists.txt.in"".
However, I have not implemented all features from
files ""Makefile.in"" and ""Makefile-devel-adds"".
But I may do it if some people request it...
For the moment, the generated ""CMakeLists.txt"" is basic
and does not contains all the nice features we can expect
from advanced CMake-based project.
However, if requested, I may add the nice features
I have already provided to project tcpflow:
https://github.com/simsong/tcpflow/pull/145/files
I do not plan to fully replace ""./configure""
by a standalone CMake because the ""./configure""
is very large and handle so many platforms
and different configurations.
(nearly impossible to test all the combinations)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,609,2017-07-01T08:16:10Z,2018-01-29T10:35:52Z,2018-01-29T10:35:52Z,CLOSED,False,332,4,6,https://github.com/olibre,"Generate ""CMakeLists.txt"" to open tcpdump project with many IDEs",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/609,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/609#issuecomment-312446680,"This implementation of ""CMakeLists.txt"" is NOT a replacement
of automake/autotools/autoconf but a generated file by
""./configure"" like the generation of file ""Makefile"".
The main objective is just to ease the opening of the tcpdump project
using many CMake-friendly IDE as Qt Creator, KDevelop,
GNOME Builder, NetBeans, CLion, Visual Studio... and many more...
The file ""./configure"" has been modified because I do not know
how to handle some double quotes \""\"" within -DMACRO=""""  :-/
I hope ""./configure"" is not often generated from ""configure.in""...
The ""configure.in"" has also been modified to add generation
of the ""CMakeLists.txt"" from ""CMakeLists.txt.in"".
The new added file ""CMakeLists.txt.in"" is the mirror of
the reference file ""Makefile.in"" in order to ease maintenance.
Any modification within ""Makefile.in"" should be easily ported
to ""CMakeLists.txt.in"".
However, I have not implemented all features from
files ""Makefile.in"" and ""Makefile-devel-adds"".
But I may do it if some people request it...
For the moment, the generated ""CMakeLists.txt"" is basic
and does not contains all the nice features we can expect
from advanced CMake-based project.
However, if requested, I may add the nice features
I have already provided to project tcpflow:
https://github.com/simsong/tcpflow/pull/145/files
I do not plan to fully replace ""./configure""
by a standalone CMake because the ""./configure""
is very large and handle so many platforms
and different configurations.
(nearly impossible to test all the combinations)","For libpcap, the CMakeLists.txt file is explicitly intended to provide an alternative to autotools, because a configure script in Bourne shell wouldn't be usable on Windows unless you've installed the Bourne shell, and the necessary tools, and if it manages to figure out how to use cl as $CC.
For tcpdump, that'd ultimately be what I'd want, too.  Why not just go with a CMakeLists.txt file, so that you can use CMake without autotools?
(I'm not planning on deprecating autotools for either project, just providing CMake as an alternative.)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,609,2017-07-01T08:16:10Z,2018-01-29T10:35:52Z,2018-01-29T10:35:52Z,CLOSED,False,332,4,6,https://github.com/olibre,"Generate ""CMakeLists.txt"" to open tcpdump project with many IDEs",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/609,https://github.com/olibre,3,https://github.com/the-tcpdump-group/tcpdump/pull/609#issuecomment-312613628,"This implementation of ""CMakeLists.txt"" is NOT a replacement
of automake/autotools/autoconf but a generated file by
""./configure"" like the generation of file ""Makefile"".
The main objective is just to ease the opening of the tcpdump project
using many CMake-friendly IDE as Qt Creator, KDevelop,
GNOME Builder, NetBeans, CLion, Visual Studio... and many more...
The file ""./configure"" has been modified because I do not know
how to handle some double quotes \""\"" within -DMACRO=""""  :-/
I hope ""./configure"" is not often generated from ""configure.in""...
The ""configure.in"" has also been modified to add generation
of the ""CMakeLists.txt"" from ""CMakeLists.txt.in"".
The new added file ""CMakeLists.txt.in"" is the mirror of
the reference file ""Makefile.in"" in order to ease maintenance.
Any modification within ""Makefile.in"" should be easily ported
to ""CMakeLists.txt.in"".
However, I have not implemented all features from
files ""Makefile.in"" and ""Makefile-devel-adds"".
But I may do it if some people request it...
For the moment, the generated ""CMakeLists.txt"" is basic
and does not contains all the nice features we can expect
from advanced CMake-based project.
However, if requested, I may add the nice features
I have already provided to project tcpflow:
https://github.com/simsong/tcpflow/pull/145/files
I do not plan to fully replace ""./configure""
by a standalone CMake because the ""./configure""
is very large and handle so many platforms
and different configurations.
(nearly impossible to test all the combinations)","Why not just go with a CMakeLists.txt file, so that you can use CMake without autotools?

Because without autotools, we have to write and maintain lots of code in CMakeLists.txt to provide an alternative to the generated header config.h.
Question: Can tcpdump project be compiled without having to generate any config.h ?
I have started to generate the config.h for the tcpdump project.
But this can become difficult in some cases. See my TODO comments about that work in progress:
https://github.com/olibre/tcpflow/blob/8396205b2e254c4c47d70250bab4abe34aae5513/src/CMakeLists.txt#L14
User @Code7R has provided a wonderful work on IceWM fork to propose an standalone CMake alternative to autoconf/automake/autotools:
https://github.com/bbidulock/icewm/pull/21/files
Is it what you want for tcpdump project?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,609,2017-07-01T08:16:10Z,2018-01-29T10:35:52Z,2018-01-29T10:35:52Z,CLOSED,False,332,4,6,https://github.com/olibre,"Generate ""CMakeLists.txt"" to open tcpdump project with many IDEs",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/609,https://github.com/olibre,4,https://github.com/the-tcpdump-group/tcpdump/pull/609#issuecomment-312615146,"This implementation of ""CMakeLists.txt"" is NOT a replacement
of automake/autotools/autoconf but a generated file by
""./configure"" like the generation of file ""Makefile"".
The main objective is just to ease the opening of the tcpdump project
using many CMake-friendly IDE as Qt Creator, KDevelop,
GNOME Builder, NetBeans, CLion, Visual Studio... and many more...
The file ""./configure"" has been modified because I do not know
how to handle some double quotes \""\"" within -DMACRO=""""  :-/
I hope ""./configure"" is not often generated from ""configure.in""...
The ""configure.in"" has also been modified to add generation
of the ""CMakeLists.txt"" from ""CMakeLists.txt.in"".
The new added file ""CMakeLists.txt.in"" is the mirror of
the reference file ""Makefile.in"" in order to ease maintenance.
Any modification within ""Makefile.in"" should be easily ported
to ""CMakeLists.txt.in"".
However, I have not implemented all features from
files ""Makefile.in"" and ""Makefile-devel-adds"".
But I may do it if some people request it...
For the moment, the generated ""CMakeLists.txt"" is basic
and does not contains all the nice features we can expect
from advanced CMake-based project.
However, if requested, I may add the nice features
I have already provided to project tcpflow:
https://github.com/simsong/tcpflow/pull/145/files
I do not plan to fully replace ""./configure""
by a standalone CMake because the ""./configure""
is very large and handle so many platforms
and different configurations.
(nearly impossible to test all the combinations)","I have just seen you wrote the alternative for autotools to generate config.h for libpcap:
https://github.com/the-tcpdump-group/libpcap/commits/master/cmakeconfig.h.in
Yes we can together provide a standalone CMake alternative in parallel of the classic autotools 😄.
What do you plan?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,609,2017-07-01T08:16:10Z,2018-01-29T10:35:52Z,2018-01-29T10:35:52Z,CLOSED,False,332,4,6,https://github.com/olibre,"Generate ""CMakeLists.txt"" to open tcpdump project with many IDEs",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/609,https://github.com/mcr,5,https://github.com/the-tcpdump-group/tcpdump/pull/609#issuecomment-314577045,"This implementation of ""CMakeLists.txt"" is NOT a replacement
of automake/autotools/autoconf but a generated file by
""./configure"" like the generation of file ""Makefile"".
The main objective is just to ease the opening of the tcpdump project
using many CMake-friendly IDE as Qt Creator, KDevelop,
GNOME Builder, NetBeans, CLion, Visual Studio... and many more...
The file ""./configure"" has been modified because I do not know
how to handle some double quotes \""\"" within -DMACRO=""""  :-/
I hope ""./configure"" is not often generated from ""configure.in""...
The ""configure.in"" has also been modified to add generation
of the ""CMakeLists.txt"" from ""CMakeLists.txt.in"".
The new added file ""CMakeLists.txt.in"" is the mirror of
the reference file ""Makefile.in"" in order to ease maintenance.
Any modification within ""Makefile.in"" should be easily ported
to ""CMakeLists.txt.in"".
However, I have not implemented all features from
files ""Makefile.in"" and ""Makefile-devel-adds"".
But I may do it if some people request it...
For the moment, the generated ""CMakeLists.txt"" is basic
and does not contains all the nice features we can expect
from advanced CMake-based project.
However, if requested, I may add the nice features
I have already provided to project tcpflow:
https://github.com/simsong/tcpflow/pull/145/files
I do not plan to fully replace ""./configure""
by a standalone CMake because the ""./configure""
is very large and handle so many platforms
and different configurations.
(nearly impossible to test all the combinations)","Guy Harris <notifications@github.com> wrote:
 (I'm not planning on deprecating autotools for either project, just
 providing CMake as an alternative.)

Do we have a developer Makefile target (or script) that will update the
CMakefile from the Makefile(.in)?

I wouldn't be upset to obsolete autotools myself :-)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,609,2017-07-01T08:16:10Z,2018-01-29T10:35:52Z,2018-01-29T10:35:52Z,CLOSED,False,332,4,6,https://github.com/olibre,"Generate ""CMakeLists.txt"" to open tcpdump project with many IDEs",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/609,https://github.com/olibre,6,https://github.com/the-tcpdump-group/tcpdump/pull/609#issuecomment-314591266,"This implementation of ""CMakeLists.txt"" is NOT a replacement
of automake/autotools/autoconf but a generated file by
""./configure"" like the generation of file ""Makefile"".
The main objective is just to ease the opening of the tcpdump project
using many CMake-friendly IDE as Qt Creator, KDevelop,
GNOME Builder, NetBeans, CLion, Visual Studio... and many more...
The file ""./configure"" has been modified because I do not know
how to handle some double quotes \""\"" within -DMACRO=""""  :-/
I hope ""./configure"" is not often generated from ""configure.in""...
The ""configure.in"" has also been modified to add generation
of the ""CMakeLists.txt"" from ""CMakeLists.txt.in"".
The new added file ""CMakeLists.txt.in"" is the mirror of
the reference file ""Makefile.in"" in order to ease maintenance.
Any modification within ""Makefile.in"" should be easily ported
to ""CMakeLists.txt.in"".
However, I have not implemented all features from
files ""Makefile.in"" and ""Makefile-devel-adds"".
But I may do it if some people request it...
For the moment, the generated ""CMakeLists.txt"" is basic
and does not contains all the nice features we can expect
from advanced CMake-based project.
However, if requested, I may add the nice features
I have already provided to project tcpflow:
https://github.com/simsong/tcpflow/pull/145/files
I do not plan to fully replace ""./configure""
by a standalone CMake because the ""./configure""
is very large and handle so many platforms
and different configurations.
(nearly impossible to test all the combinations)","Hi @mcr
I think @guyharris wants a standalone CMake alternative that does not depend on ./configure (for example to be opened on Windows without any Cygwin/MinGW installed) and both auto(conf,tools,make) and CMake have to be maintained in parallel. I do not know if @guyharris is volunteer to perform this double maintenance.
My pull request is an intermediate step: the CMakeLists.txt still requires ./configure to be generate. But maintenance is very easy as I have written the CMakeLists.txt.in as a mirror of the Makefile.in (however, in some cases, I have adopted the CMake syntax spirit and some parts are different from original Makefile).
Until someone takes time to write a full validated standalone CMake alternative, my pull request can be accepted and merged as a temporary step. My pull request does not break anything. And future standalone CMakeLists.txt will be a replacement.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,609,2017-07-01T08:16:10Z,2018-01-29T10:35:52Z,2018-01-29T10:35:52Z,CLOSED,False,332,4,6,https://github.com/olibre,"Generate ""CMakeLists.txt"" to open tcpdump project with many IDEs",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/609,https://github.com/mcr,7,https://github.com/the-tcpdump-group/tcpdump/pull/609#issuecomment-314595932,"This implementation of ""CMakeLists.txt"" is NOT a replacement
of automake/autotools/autoconf but a generated file by
""./configure"" like the generation of file ""Makefile"".
The main objective is just to ease the opening of the tcpdump project
using many CMake-friendly IDE as Qt Creator, KDevelop,
GNOME Builder, NetBeans, CLion, Visual Studio... and many more...
The file ""./configure"" has been modified because I do not know
how to handle some double quotes \""\"" within -DMACRO=""""  :-/
I hope ""./configure"" is not often generated from ""configure.in""...
The ""configure.in"" has also been modified to add generation
of the ""CMakeLists.txt"" from ""CMakeLists.txt.in"".
The new added file ""CMakeLists.txt.in"" is the mirror of
the reference file ""Makefile.in"" in order to ease maintenance.
Any modification within ""Makefile.in"" should be easily ported
to ""CMakeLists.txt.in"".
However, I have not implemented all features from
files ""Makefile.in"" and ""Makefile-devel-adds"".
But I may do it if some people request it...
For the moment, the generated ""CMakeLists.txt"" is basic
and does not contains all the nice features we can expect
from advanced CMake-based project.
However, if requested, I may add the nice features
I have already provided to project tcpflow:
https://github.com/simsong/tcpflow/pull/145/files
I do not plan to fully replace ""./configure""
by a standalone CMake because the ""./configure""
is very large and handle so many platforms
and different configurations.
(nearly impossible to test all the combinations)","O. Libre <notifications@github.com> wrote:
 I think @guyharris wants a standalone CMake alternative that does not
 depend on ./configure (for example to be opened on Windows without any
 Cygwin/MinGW installed) and both auto(conf|tool|make) and CMake have to
 be maintained in parallel.

Yes, I want that too.
Once created, I'd like CMake to run without any autotools.
 My pull request is an intermediate step: the CMakeLists.txt still
 requires ./configure to be generate. But maintenance is very easy as I
 have written the CMakeLists.txt.in as a mirror of the Makefile.in
 (however in some cases I have adopted the CMake syntax spirit).

My idea is that CMakeLists.txt could be generated by a Makefile.
So a developer could update the CMakeList.txt as part of the release
.tar.gz creation process.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,609,2017-07-01T08:16:10Z,2018-01-29T10:35:52Z,2018-01-29T10:35:52Z,CLOSED,False,332,4,6,https://github.com/olibre,"Generate ""CMakeLists.txt"" to open tcpdump project with many IDEs",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/609,https://github.com/guyharris,8,https://github.com/the-tcpdump-group/tcpdump/pull/609#issuecomment-314607915,"This implementation of ""CMakeLists.txt"" is NOT a replacement
of automake/autotools/autoconf but a generated file by
""./configure"" like the generation of file ""Makefile"".
The main objective is just to ease the opening of the tcpdump project
using many CMake-friendly IDE as Qt Creator, KDevelop,
GNOME Builder, NetBeans, CLion, Visual Studio... and many more...
The file ""./configure"" has been modified because I do not know
how to handle some double quotes \""\"" within -DMACRO=""""  :-/
I hope ""./configure"" is not often generated from ""configure.in""...
The ""configure.in"" has also been modified to add generation
of the ""CMakeLists.txt"" from ""CMakeLists.txt.in"".
The new added file ""CMakeLists.txt.in"" is the mirror of
the reference file ""Makefile.in"" in order to ease maintenance.
Any modification within ""Makefile.in"" should be easily ported
to ""CMakeLists.txt.in"".
However, I have not implemented all features from
files ""Makefile.in"" and ""Makefile-devel-adds"".
But I may do it if some people request it...
For the moment, the generated ""CMakeLists.txt"" is basic
and does not contains all the nice features we can expect
from advanced CMake-based project.
However, if requested, I may add the nice features
I have already provided to project tcpflow:
https://github.com/simsong/tcpflow/pull/145/files
I do not plan to fully replace ""./configure""
by a standalone CMake because the ""./configure""
is very large and handle so many platforms
and different configurations.
(nearly impossible to test all the combinations)","@olibre:

I think @guyharris wants a standalone CMake alternative that does not depend on ./configure (for example to be opened on Windows without any Cygwin/MinGW installed)

Yes.

and both auto(conf,tools,make) and CMake have to be maintained in parallel.

Yes.  That's how Wireshark does it.

I do not know if @guyharris is volunteer to perform this double maintenance.

I'm doing a lot of the autotools work anyway, in which case ""double maintenance"" would be just ""change both of them"", although I'd prefer to have everybody who changes one of them change both, which is usually how it works with Wireshark.
And most contributions to tcpdump that change the autotools stuff are probably ""here's print-frobozz.c, which dissects the Frobozz protocol"", where you add one line to Makefile.in, so we can just reply to pull requests that don't add one line to CMakeLists.txt with ""please add print-frobozz.c to CMakeLists.txt, too"".
@mcr:

I wouldn't be upset to obsolete autotools myself :-)

That does require anybody building tcpdump or libpcap to have CMake installed, but 1) a binary package is available for macOS, 2) a binary package for ""Linux x86_64"" is available, 3) I think the major Linux distributions have packages as well, 4) the *BSDs all seem to have packages, 5) Oracle's package repository for Solaris 11 has a binary package and OpenCSW appears to have one as well, 6) perzl.org appears to have it for AIX 5.1 and later, and 7) if all else fails, you can try building it from source (I couldn't find it at the HP-UX Porting and Archive Centre, and I don't know what the dead UN*Xes have in the way of third-party package collections).

My idea is that CMakeLists.txt could be generated by a Makefile.
So a developer could update the CMakeList.txt as part of the release .tar.gz creation process.

Yes, we could do that - just have make releasetar replace @LIBNETDISSECT_SRC@ in CMakeLists.txt.in with the contents of LIBNETDISSECT_SRC.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,609,2017-07-01T08:16:10Z,2018-01-29T10:35:52Z,2018-01-29T10:35:52Z,CLOSED,False,332,4,6,https://github.com/olibre,"Generate ""CMakeLists.txt"" to open tcpdump project with many IDEs",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/609,https://github.com/guyharris,9,https://github.com/the-tcpdump-group/tcpdump/pull/609#issuecomment-361204878,"This implementation of ""CMakeLists.txt"" is NOT a replacement
of automake/autotools/autoconf but a generated file by
""./configure"" like the generation of file ""Makefile"".
The main objective is just to ease the opening of the tcpdump project
using many CMake-friendly IDE as Qt Creator, KDevelop,
GNOME Builder, NetBeans, CLion, Visual Studio... and many more...
The file ""./configure"" has been modified because I do not know
how to handle some double quotes \""\"" within -DMACRO=""""  :-/
I hope ""./configure"" is not often generated from ""configure.in""...
The ""configure.in"" has also been modified to add generation
of the ""CMakeLists.txt"" from ""CMakeLists.txt.in"".
The new added file ""CMakeLists.txt.in"" is the mirror of
the reference file ""Makefile.in"" in order to ease maintenance.
Any modification within ""Makefile.in"" should be easily ported
to ""CMakeLists.txt.in"".
However, I have not implemented all features from
files ""Makefile.in"" and ""Makefile-devel-adds"".
But I may do it if some people request it...
For the moment, the generated ""CMakeLists.txt"" is basic
and does not contains all the nice features we can expect
from advanced CMake-based project.
However, if requested, I may add the nice features
I have already provided to project tcpflow:
https://github.com/simsong/tcpflow/pull/145/files
I do not plan to fully replace ""./configure""
by a standalone CMake because the ""./configure""
is very large and handle so many platforms
and different configurations.
(nearly impossible to test all the combinations)","I think @guyharris wants a standalone CMake alternative that does not  depend on ./configure (for example to be opened on Windows without any Cygwin/MinGW installed)

Done.  It now builds, at least with MSVC 2015 on Windows 7, with a few warnings.

Once created, I'd like CMake to run without any autotools.

Done.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,612,2017-07-06T15:55:48Z,2019-04-16T15:32:09Z,2019-04-16T17:42:13Z,MERGED,True,303,0,11,https://github.com/stefanha,Add printing support for vsockmon devices.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/612,https://github.com/stefanha,1,https://github.com/the-tcpdump-group/tcpdump/pull/612,"Print Linux 4.12 vsockmon captures:
# ip link add type vsockmon
# ip link set vsockmon0 up
# tcpdump -i vsockmon0
16:25:24.987917 VIRTIO 3.1025 > 2.1234 CONNECT, length 76
16:25:24.987963 VIRTIO 2.1234 > 3.1025 CONNECT, length 76
16:25:26.568271 VIRTIO 3.1025 > 2.1234 PAYLOAD, length 82
16:25:26.568512 VIRTIO 2.1234 > 3.1025 CONTROL, length 76
16:25:28.411335 VIRTIO 3.1025 > 2.1234 DISCONNECT, length 76
16:25:28.411628 VIRTIO 2.1234 > 3.1025 DISCONNECT, length 76

For more information about vsock see:
http://wiki.qemu.org/Features/VirtioVsock
This work was originally written as part of Google Summer of Code 2016 by @GerardGarcia. I was his mentor and am upstreaming his code now that Linux 4.12 has been released with vsockmon support.","Print Linux 4.12 vsockmon captures:
# ip link add type vsockmon
# ip link set vsockmon0 up
# tcpdump -i vsockmon0
16:25:24.987917 VIRTIO 3.1025 > 2.1234 CONNECT, length 76
16:25:24.987963 VIRTIO 2.1234 > 3.1025 CONNECT, length 76
16:25:26.568271 VIRTIO 3.1025 > 2.1234 PAYLOAD, length 82
16:25:26.568512 VIRTIO 2.1234 > 3.1025 CONTROL, length 76
16:25:28.411335 VIRTIO 3.1025 > 2.1234 DISCONNECT, length 76
16:25:28.411628 VIRTIO 2.1234 > 3.1025 DISCONNECT, length 76

For more information about vsock see:
http://wiki.qemu.org/Features/VirtioVsock
This work was originally written as part of Google Summer of Code 2016 by @GerardGarcia. I was his mentor and am upstreaming his code now that Linux 4.12 has been released with vsockmon support.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,612,2017-07-06T15:55:48Z,2019-04-16T15:32:09Z,2019-04-16T17:42:13Z,MERGED,True,303,0,11,https://github.com/stefanha,Add printing support for vsockmon devices.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/612,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/612#issuecomment-323989233,"Print Linux 4.12 vsockmon captures:
# ip link add type vsockmon
# ip link set vsockmon0 up
# tcpdump -i vsockmon0
16:25:24.987917 VIRTIO 3.1025 > 2.1234 CONNECT, length 76
16:25:24.987963 VIRTIO 2.1234 > 3.1025 CONNECT, length 76
16:25:26.568271 VIRTIO 3.1025 > 2.1234 PAYLOAD, length 82
16:25:26.568512 VIRTIO 2.1234 > 3.1025 CONTROL, length 76
16:25:28.411335 VIRTIO 3.1025 > 2.1234 DISCONNECT, length 76
16:25:28.411628 VIRTIO 2.1234 > 3.1025 DISCONNECT, length 76

For more information about vsock see:
http://wiki.qemu.org/Features/VirtioVsock
This work was originally written as part of Google Summer of Code 2016 by @GerardGarcia. I was his mentor and am upstreaming his code now that Linux 4.12 has been released with vsockmon support.","The printer must check if the data is actually available in the input buffer (grep for ND_THCECK and ND_TTEST in the tcpdump source code).
To avoid alignment problems in af_vsockmon_hdr it should be either declared UNALIGNED or use the nd_uint_XX types for the fields.
It would be helpful to include a new test case based on a sample capture (see tests/TESTLIST).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,612,2017-07-06T15:55:48Z,2019-04-16T15:32:09Z,2019-04-16T17:42:13Z,MERGED,True,303,0,11,https://github.com/stefanha,Add printing support for vsockmon devices.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/612,https://github.com/stefanha,3,https://github.com/the-tcpdump-group/tcpdump/pull/612#issuecomment-324387839,"Print Linux 4.12 vsockmon captures:
# ip link add type vsockmon
# ip link set vsockmon0 up
# tcpdump -i vsockmon0
16:25:24.987917 VIRTIO 3.1025 > 2.1234 CONNECT, length 76
16:25:24.987963 VIRTIO 2.1234 > 3.1025 CONNECT, length 76
16:25:26.568271 VIRTIO 3.1025 > 2.1234 PAYLOAD, length 82
16:25:26.568512 VIRTIO 2.1234 > 3.1025 CONTROL, length 76
16:25:28.411335 VIRTIO 3.1025 > 2.1234 DISCONNECT, length 76
16:25:28.411628 VIRTIO 2.1234 > 3.1025 DISCONNECT, length 76

For more information about vsock see:
http://wiki.qemu.org/Features/VirtioVsock
This work was originally written as part of Google Summer of Code 2016 by @GerardGarcia. I was his mentor and am upstreaming his code now that Linux 4.12 has been released with vsockmon support.","Thanks for the review @infrastation.  I've pushed a new version that:

The printer must check if the data is actually available in the input buffer (grep for ND_THCECK and ND_TTEST in the tcpdump source code).

Now uses h->caplen instead of h->len.  All data accesses are checked against this size limit before they are made.  I didn't use ND_TCHECK() because the code is already written to pass along a length variable.

To avoid alignment problems in af_vsockmon_hdr it should be either declared UNALIGNED or use the nd_uint_XX types for the fields.

Added UNALIGNED.

It would be helpful to include a new test case based on a sample capture (see tests/TESTLIST).

Added a sample capture and verified that ""make check"" passes.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,612,2017-07-06T15:55:48Z,2019-04-16T15:32:09Z,2019-04-16T17:42:13Z,MERGED,True,303,0,11,https://github.com/stefanha,Add printing support for vsockmon devices.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/612,https://github.com/stefanha,4,https://github.com/the-tcpdump-group/tcpdump/pull/612#issuecomment-325656352,"Print Linux 4.12 vsockmon captures:
# ip link add type vsockmon
# ip link set vsockmon0 up
# tcpdump -i vsockmon0
16:25:24.987917 VIRTIO 3.1025 > 2.1234 CONNECT, length 76
16:25:24.987963 VIRTIO 2.1234 > 3.1025 CONNECT, length 76
16:25:26.568271 VIRTIO 3.1025 > 2.1234 PAYLOAD, length 82
16:25:26.568512 VIRTIO 2.1234 > 3.1025 CONTROL, length 76
16:25:28.411335 VIRTIO 3.1025 > 2.1234 DISCONNECT, length 76
16:25:28.411628 VIRTIO 2.1234 > 3.1025 DISCONNECT, length 76

For more information about vsock see:
http://wiki.qemu.org/Features/VirtioVsock
This work was originally written as part of Google Summer of Code 2016 by @GerardGarcia. I was his mentor and am upstreaming his code now that Linux 4.12 has been released with vsockmon support.",Thanks for the review @guyharris.  I have updated the code to handle truncation of the transport header.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,612,2017-07-06T15:55:48Z,2019-04-16T15:32:09Z,2019-04-16T17:42:13Z,MERGED,True,303,0,11,https://github.com/stefanha,Add printing support for vsockmon devices.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/612,https://github.com/stefanha,5,https://github.com/the-tcpdump-group/tcpdump/pull/612#issuecomment-330215426,"Print Linux 4.12 vsockmon captures:
# ip link add type vsockmon
# ip link set vsockmon0 up
# tcpdump -i vsockmon0
16:25:24.987917 VIRTIO 3.1025 > 2.1234 CONNECT, length 76
16:25:24.987963 VIRTIO 2.1234 > 3.1025 CONNECT, length 76
16:25:26.568271 VIRTIO 3.1025 > 2.1234 PAYLOAD, length 82
16:25:26.568512 VIRTIO 2.1234 > 3.1025 CONTROL, length 76
16:25:28.411335 VIRTIO 3.1025 > 2.1234 DISCONNECT, length 76
16:25:28.411628 VIRTIO 2.1234 > 3.1025 DISCONNECT, length 76

For more information about vsock see:
http://wiki.qemu.org/Features/VirtioVsock
This work was originally written as part of Google Summer of Code 2016 by @GerardGarcia. I was his mentor and am upstreaming his code now that Linux 4.12 has been released with vsockmon support.",I have pushed a rebased version to resolve the conflict in tests/TESTLIST.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,612,2017-07-06T15:55:48Z,2019-04-16T15:32:09Z,2019-04-16T17:42:13Z,MERGED,True,303,0,11,https://github.com/stefanha,Add printing support for vsockmon devices.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/612,https://github.com/mruprich,6,https://github.com/the-tcpdump-group/tcpdump/pull/612#issuecomment-335480218,"Print Linux 4.12 vsockmon captures:
# ip link add type vsockmon
# ip link set vsockmon0 up
# tcpdump -i vsockmon0
16:25:24.987917 VIRTIO 3.1025 > 2.1234 CONNECT, length 76
16:25:24.987963 VIRTIO 2.1234 > 3.1025 CONNECT, length 76
16:25:26.568271 VIRTIO 3.1025 > 2.1234 PAYLOAD, length 82
16:25:26.568512 VIRTIO 2.1234 > 3.1025 CONTROL, length 76
16:25:28.411335 VIRTIO 3.1025 > 2.1234 DISCONNECT, length 76
16:25:28.411628 VIRTIO 2.1234 > 3.1025 DISCONNECT, length 76

For more information about vsock see:
http://wiki.qemu.org/Features/VirtioVsock
This work was originally written as part of Google Summer of Code 2016 by @GerardGarcia. I was his mentor and am upstreaming his code now that Linux 4.12 has been released with vsockmon support.","Hey guys, do you plan to merge this any time soon? Thanks",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,612,2017-07-06T15:55:48Z,2019-04-16T15:32:09Z,2019-04-16T17:42:13Z,MERGED,True,303,0,11,https://github.com/stefanha,Add printing support for vsockmon devices.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/612,https://github.com/infrastation,7,https://github.com/the-tcpdump-group/tcpdump/pull/612#issuecomment-335526207,"Print Linux 4.12 vsockmon captures:
# ip link add type vsockmon
# ip link set vsockmon0 up
# tcpdump -i vsockmon0
16:25:24.987917 VIRTIO 3.1025 > 2.1234 CONNECT, length 76
16:25:24.987963 VIRTIO 2.1234 > 3.1025 CONNECT, length 76
16:25:26.568271 VIRTIO 3.1025 > 2.1234 PAYLOAD, length 82
16:25:26.568512 VIRTIO 2.1234 > 3.1025 CONTROL, length 76
16:25:28.411335 VIRTIO 3.1025 > 2.1234 DISCONNECT, length 76
16:25:28.411628 VIRTIO 2.1234 > 3.1025 DISCONNECT, length 76

For more information about vsock see:
http://wiki.qemu.org/Features/VirtioVsock
This work was originally written as part of Google Summer of Code 2016 by @GerardGarcia. I was his mentor and am upstreaming his code now that Linux 4.12 has been released with vsockmon support.","This proposed decoder does not make any boundary checks (see ND_TCHECK and ND_TTEST in other decoders for examples). This must be addressed before this code can be merged. If you cannot spend the time adding proper incremental checks, there should be at least one full-length boundary check at the beginning of the main entry function (but in that case there will be no further detail about a truncated packet, no matter how long it is).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,612,2017-07-06T15:55:48Z,2019-04-16T15:32:09Z,2019-04-16T17:42:13Z,MERGED,True,303,0,11,https://github.com/stefanha,Add printing support for vsockmon devices.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/612,https://github.com/stefanha,8,https://github.com/the-tcpdump-group/tcpdump/pull/612#issuecomment-335532202,"Print Linux 4.12 vsockmon captures:
# ip link add type vsockmon
# ip link set vsockmon0 up
# tcpdump -i vsockmon0
16:25:24.987917 VIRTIO 3.1025 > 2.1234 CONNECT, length 76
16:25:24.987963 VIRTIO 2.1234 > 3.1025 CONNECT, length 76
16:25:26.568271 VIRTIO 3.1025 > 2.1234 PAYLOAD, length 82
16:25:26.568512 VIRTIO 2.1234 > 3.1025 CONTROL, length 76
16:25:28.411335 VIRTIO 3.1025 > 2.1234 DISCONNECT, length 76
16:25:28.411628 VIRTIO 2.1234 > 3.1025 DISCONNECT, length 76

For more information about vsock see:
http://wiki.qemu.org/Features/VirtioVsock
This work was originally written as part of Google Summer of Code 2016 by @GerardGarcia. I was his mentor and am upstreaming his code now that Linux 4.12 has been released with vsockmon support.","@infrastation There are boundary checks at the following locations:
be5c8d3#diff-53ad53c00a5548c4cda53b86fdb76578R172
be5c8d3#diff-53ad53c00a5548c4cda53b86fdb76578R231
be5c8d3#diff-53ad53c00a5548c4cda53b86fdb76578R251
Errors are printed if the packet is truncated.  Did I miss something?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,612,2017-07-06T15:55:48Z,2019-04-16T15:32:09Z,2019-04-16T17:42:13Z,MERGED,True,303,0,11,https://github.com/stefanha,Add printing support for vsockmon devices.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/612,https://github.com/infrastation,9,https://github.com/the-tcpdump-group/tcpdump/pull/612#issuecomment-335538846,"Print Linux 4.12 vsockmon captures:
# ip link add type vsockmon
# ip link set vsockmon0 up
# tcpdump -i vsockmon0
16:25:24.987917 VIRTIO 3.1025 > 2.1234 CONNECT, length 76
16:25:24.987963 VIRTIO 2.1234 > 3.1025 CONNECT, length 76
16:25:26.568271 VIRTIO 3.1025 > 2.1234 PAYLOAD, length 82
16:25:26.568512 VIRTIO 2.1234 > 3.1025 CONTROL, length 76
16:25:28.411335 VIRTIO 3.1025 > 2.1234 DISCONNECT, length 76
16:25:28.411628 VIRTIO 2.1234 > 3.1025 DISCONNECT, length 76

For more information about vsock see:
http://wiki.qemu.org/Features/VirtioVsock
This work was originally written as part of Google Summer of Code 2016 by @GerardGarcia. I was his mentor and am upstreaming his code now that Linux 4.12 has been released with vsockmon support.",I will need to check once again to confirm.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,612,2017-07-06T15:55:48Z,2019-04-16T15:32:09Z,2019-04-16T17:42:13Z,MERGED,True,303,0,11,https://github.com/stefanha,Add printing support for vsockmon devices.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/612,https://github.com/mruprich,10,https://github.com/the-tcpdump-group/tcpdump/pull/612#issuecomment-343087914,"Print Linux 4.12 vsockmon captures:
# ip link add type vsockmon
# ip link set vsockmon0 up
# tcpdump -i vsockmon0
16:25:24.987917 VIRTIO 3.1025 > 2.1234 CONNECT, length 76
16:25:24.987963 VIRTIO 2.1234 > 3.1025 CONNECT, length 76
16:25:26.568271 VIRTIO 3.1025 > 2.1234 PAYLOAD, length 82
16:25:26.568512 VIRTIO 2.1234 > 3.1025 CONTROL, length 76
16:25:28.411335 VIRTIO 3.1025 > 2.1234 DISCONNECT, length 76
16:25:28.411628 VIRTIO 2.1234 > 3.1025 DISCONNECT, length 76

For more information about vsock see:
http://wiki.qemu.org/Features/VirtioVsock
This work was originally written as part of Google Summer of Code 2016 by @GerardGarcia. I was his mentor and am upstreaming his code now that Linux 4.12 has been released with vsockmon support.","Hi, may I ask about the status of this PR?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,612,2017-07-06T15:55:48Z,2019-04-16T15:32:09Z,2019-04-16T17:42:13Z,MERGED,True,303,0,11,https://github.com/stefanha,Add printing support for vsockmon devices.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/612,https://github.com/stefanha,11,https://github.com/the-tcpdump-group/tcpdump/pull/612#issuecomment-343095141,"Print Linux 4.12 vsockmon captures:
# ip link add type vsockmon
# ip link set vsockmon0 up
# tcpdump -i vsockmon0
16:25:24.987917 VIRTIO 3.1025 > 2.1234 CONNECT, length 76
16:25:24.987963 VIRTIO 2.1234 > 3.1025 CONNECT, length 76
16:25:26.568271 VIRTIO 3.1025 > 2.1234 PAYLOAD, length 82
16:25:26.568512 VIRTIO 2.1234 > 3.1025 CONTROL, length 76
16:25:28.411335 VIRTIO 3.1025 > 2.1234 DISCONNECT, length 76
16:25:28.411628 VIRTIO 2.1234 > 3.1025 DISCONNECT, length 76

For more information about vsock see:
http://wiki.qemu.org/Features/VirtioVsock
This work was originally written as part of Google Summer of Code 2016 by @GerardGarcia. I was his mentor and am upstreaming his code now that Linux 4.12 has been released with vsockmon support.","On Thu, Nov 9, 2017 at 8:53 AM, Michal Ruprich ***@***.***> wrote:
 Hi, may I ask about the status of this PR?

Awaiting review.

Stefan",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,612,2017-07-06T15:55:48Z,2019-04-16T15:32:09Z,2019-04-16T17:42:13Z,MERGED,True,303,0,11,https://github.com/stefanha,Add printing support for vsockmon devices.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/612,https://github.com/stefanha,12,https://github.com/the-tcpdump-group/tcpdump/pull/612#issuecomment-348482287,"Print Linux 4.12 vsockmon captures:
# ip link add type vsockmon
# ip link set vsockmon0 up
# tcpdump -i vsockmon0
16:25:24.987917 VIRTIO 3.1025 > 2.1234 CONNECT, length 76
16:25:24.987963 VIRTIO 2.1234 > 3.1025 CONNECT, length 76
16:25:26.568271 VIRTIO 3.1025 > 2.1234 PAYLOAD, length 82
16:25:26.568512 VIRTIO 2.1234 > 3.1025 CONTROL, length 76
16:25:28.411335 VIRTIO 3.1025 > 2.1234 DISCONNECT, length 76
16:25:28.411628 VIRTIO 2.1234 > 3.1025 DISCONNECT, length 76

For more information about vsock see:
http://wiki.qemu.org/Features/VirtioVsock
This work was originally written as part of Google Summer of Code 2016 by @GerardGarcia. I was his mentor and am upstreaming his code now that Linux 4.12 has been released with vsockmon support.","Updated to resolve the EXTRACT_LE_nnBITS() -> EXTRACT_LE_U_n() macro changes that were recently merged.
Please review",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,612,2017-07-06T15:55:48Z,2019-04-16T15:32:09Z,2019-04-16T17:42:13Z,MERGED,True,303,0,11,https://github.com/stefanha,Add printing support for vsockmon devices.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/612,https://github.com/stefanha,13,https://github.com/the-tcpdump-group/tcpdump/pull/612#issuecomment-360068029,"Print Linux 4.12 vsockmon captures:
# ip link add type vsockmon
# ip link set vsockmon0 up
# tcpdump -i vsockmon0
16:25:24.987917 VIRTIO 3.1025 > 2.1234 CONNECT, length 76
16:25:24.987963 VIRTIO 2.1234 > 3.1025 CONNECT, length 76
16:25:26.568271 VIRTIO 3.1025 > 2.1234 PAYLOAD, length 82
16:25:26.568512 VIRTIO 2.1234 > 3.1025 CONTROL, length 76
16:25:28.411335 VIRTIO 3.1025 > 2.1234 DISCONNECT, length 76
16:25:28.411628 VIRTIO 2.1234 > 3.1025 DISCONNECT, length 76

For more information about vsock see:
http://wiki.qemu.org/Features/VirtioVsock
This work was originally written as part of Google Summer of Code 2016 by @GerardGarcia. I was his mentor and am upstreaming his code now that Linux 4.12 has been released with vsockmon support.",@infrastation Ping?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,612,2017-07-06T15:55:48Z,2019-04-16T15:32:09Z,2019-04-16T17:42:13Z,MERGED,True,303,0,11,https://github.com/stefanha,Add printing support for vsockmon devices.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/612,https://github.com/fxlb,14,https://github.com/the-tcpdump-group/tcpdump/pull/612#issuecomment-483273062,"Print Linux 4.12 vsockmon captures:
# ip link add type vsockmon
# ip link set vsockmon0 up
# tcpdump -i vsockmon0
16:25:24.987917 VIRTIO 3.1025 > 2.1234 CONNECT, length 76
16:25:24.987963 VIRTIO 2.1234 > 3.1025 CONNECT, length 76
16:25:26.568271 VIRTIO 3.1025 > 2.1234 PAYLOAD, length 82
16:25:26.568512 VIRTIO 2.1234 > 3.1025 CONTROL, length 76
16:25:28.411335 VIRTIO 3.1025 > 2.1234 DISCONNECT, length 76
16:25:28.411628 VIRTIO 2.1234 > 3.1025 DISCONNECT, length 76

For more information about vsock see:
http://wiki.qemu.org/Features/VirtioVsock
This work was originally written as part of Google Summer of Code 2016 by @GerardGarcia. I was his mentor and am upstreaming his code now that Linux 4.12 has been released with vsockmon support.","Sorry for the late review.


First rebase your branch on top of the-tcpdump-group:master.


vsock_print() is a DLT interface printer must be named vsock_if_print().


Use #include ""netdissect-stdinc.h"", not < ... >


In struct 'virtio_vsock_hdr' and 'af_vsockmon_hdr', use nd_uintN_t types to avoid alignment problems (See 1376682).


Remove UNALIGNED macro.


ND_PRINT is now a variadic macro, use only '(' and ')' instead of '((' and '))'


No more 'ndo' as first parameter of ND_PRINT().


Use new GET_ macros instead of EXTRACT_ ones (See 176e182 and ee68aa3).


Use (cd tests && TZ=GMT0 ../tcpdump -# -n -r sample.pcap tcpdump-options > sample.out) to build the output of your test or ./update-test.sh  test_name (see CONTRIBUTING updated).


Update your PR.


See on Travis-CI [Pull Requests] part, if there are warnings to care of.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,612,2017-07-06T15:55:48Z,2019-04-16T15:32:09Z,2019-04-16T17:42:13Z,MERGED,True,303,0,11,https://github.com/stefanha,Add printing support for vsockmon devices.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/612,https://github.com/stefanha,15,https://github.com/the-tcpdump-group/tcpdump/pull/612#issuecomment-483596632,"Print Linux 4.12 vsockmon captures:
# ip link add type vsockmon
# ip link set vsockmon0 up
# tcpdump -i vsockmon0
16:25:24.987917 VIRTIO 3.1025 > 2.1234 CONNECT, length 76
16:25:24.987963 VIRTIO 2.1234 > 3.1025 CONNECT, length 76
16:25:26.568271 VIRTIO 3.1025 > 2.1234 PAYLOAD, length 82
16:25:26.568512 VIRTIO 2.1234 > 3.1025 CONTROL, length 76
16:25:28.411335 VIRTIO 3.1025 > 2.1234 DISCONNECT, length 76
16:25:28.411628 VIRTIO 2.1234 > 3.1025 DISCONNECT, length 76

For more information about vsock see:
http://wiki.qemu.org/Features/VirtioVsock
This work was originally written as part of Google Summer of Code 2016 by @GerardGarcia. I was his mentor and am upstreaming his code now that Linux 4.12 has been released with vsockmon support.","Thanks for the review, @fxlb!  I have addressed the issues and pushed.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,612,2017-07-06T15:55:48Z,2019-04-16T15:32:09Z,2019-04-16T17:42:13Z,MERGED,True,303,0,11,https://github.com/stefanha,Add printing support for vsockmon devices.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/612,https://github.com/fxlb,16,https://github.com/the-tcpdump-group/tcpdump/pull/612#issuecomment-483614708,"Print Linux 4.12 vsockmon captures:
# ip link add type vsockmon
# ip link set vsockmon0 up
# tcpdump -i vsockmon0
16:25:24.987917 VIRTIO 3.1025 > 2.1234 CONNECT, length 76
16:25:24.987963 VIRTIO 2.1234 > 3.1025 CONNECT, length 76
16:25:26.568271 VIRTIO 3.1025 > 2.1234 PAYLOAD, length 82
16:25:26.568512 VIRTIO 2.1234 > 3.1025 CONTROL, length 76
16:25:28.411335 VIRTIO 3.1025 > 2.1234 DISCONNECT, length 76
16:25:28.411628 VIRTIO 2.1234 > 3.1025 DISCONNECT, length 76

For more information about vsock see:
http://wiki.qemu.org/Features/VirtioVsock
This work was originally written as part of Google Summer of Code 2016 by @GerardGarcia. I was his mentor and am upstreaming his code now that Linux 4.12 has been released with vsockmon support.","Thanks, there are some warnings here:
https://travis-ci.org/the-tcpdump-group/tcpdump/jobs/520685103
and here:
https://travis-ci.org/the-tcpdump-group/tcpdump/jobs/520685119",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,612,2017-07-06T15:55:48Z,2019-04-16T15:32:09Z,2019-04-16T17:42:13Z,MERGED,True,303,0,11,https://github.com/stefanha,Add printing support for vsockmon devices.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/612,https://github.com/fxlb,17,https://github.com/the-tcpdump-group/tcpdump/pull/612#issuecomment-483663621,"Print Linux 4.12 vsockmon captures:
# ip link add type vsockmon
# ip link set vsockmon0 up
# tcpdump -i vsockmon0
16:25:24.987917 VIRTIO 3.1025 > 2.1234 CONNECT, length 76
16:25:24.987963 VIRTIO 2.1234 > 3.1025 CONNECT, length 76
16:25:26.568271 VIRTIO 3.1025 > 2.1234 PAYLOAD, length 82
16:25:26.568512 VIRTIO 2.1234 > 3.1025 CONTROL, length 76
16:25:28.411335 VIRTIO 3.1025 > 2.1234 DISCONNECT, length 76
16:25:28.411628 VIRTIO 2.1234 > 3.1025 DISCONNECT, length 76

For more information about vsock see:
http://wiki.qemu.org/Features/VirtioVsock
This work was originally written as part of Google Summer of Code 2016 by @GerardGarcia. I was his mentor and am upstreaming his code now that Linux 4.12 has been released with vsockmon support.","Also needed (see 546558e and ba8936b):
diff --git a/print-vsock.c b/print-vsock.c
index 9d5247f9..3e7c5fa2 100644
--- a/print-vsock.c
+++ b/print-vsock.c
@@ -33,8 +33,6 @@
 #include ""netdissect.h""
 #include ""extract.h""
 
-static const char tstr[] = "" [|vsock]"";
-
 enum af_vsockmon_transport {
 	AF_VSOCK_TRANSPORT_UNKNOWN = 0,
 	AF_VSOCK_TRANSPORT_NO_INFO = 1,		/* No transport information */
@@ -239,7 +237,7 @@ vsock_hdr_print(netdissect_options *ndo, const u_char *p, const u_int len)
 	return;
 
 trunc:
-	ND_PRINT(""%s"", tstr);
+	nd_print_trunc(ndo);
 }
 
 u_int
@@ -248,8 +246,9 @@ vsock_if_print(netdissect_options *ndo, const struct pcap_pkthdr *h,
 {
 	u_int len = h->caplen;
 
+	ndo->ndo_protocol = ""vsock"";
 	if (len < sizeof(struct af_vsockmon_hdr))
-		ND_PRINT(""%s"", tstr);
+		nd_print_trunc(ndo);
 	else
 		vsock_hdr_print(ndo, cp, len);",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,612,2017-07-06T15:55:48Z,2019-04-16T15:32:09Z,2019-04-16T17:42:13Z,MERGED,True,303,0,11,https://github.com/stefanha,Add printing support for vsockmon devices.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/612,https://github.com/stefanha,18,https://github.com/the-tcpdump-group/tcpdump/pull/612#issuecomment-483701847,"Print Linux 4.12 vsockmon captures:
# ip link add type vsockmon
# ip link set vsockmon0 up
# tcpdump -i vsockmon0
16:25:24.987917 VIRTIO 3.1025 > 2.1234 CONNECT, length 76
16:25:24.987963 VIRTIO 2.1234 > 3.1025 CONNECT, length 76
16:25:26.568271 VIRTIO 3.1025 > 2.1234 PAYLOAD, length 82
16:25:26.568512 VIRTIO 2.1234 > 3.1025 CONTROL, length 76
16:25:28.411335 VIRTIO 3.1025 > 2.1234 DISCONNECT, length 76
16:25:28.411628 VIRTIO 2.1234 > 3.1025 DISCONNECT, length 76

For more information about vsock see:
http://wiki.qemu.org/Features/VirtioVsock
This work was originally written as part of Google Summer of Code 2016 by @GerardGarcia. I was his mentor and am upstreaming his code now that Linux 4.12 has been released with vsockmon support.","Thanks @fxlb.  Fixed!
The AppVeyor failure is a temporary DNS glitch (infrastructure problem) and not related to this patch.  I don't have an AppVeyor account so I'm not sure how to rerun the job. :(",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,612,2017-07-06T15:55:48Z,2019-04-16T15:32:09Z,2019-04-16T17:42:13Z,MERGED,True,303,0,11,https://github.com/stefanha,Add printing support for vsockmon devices.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/612,https://github.com/fxlb,19,https://github.com/the-tcpdump-group/tcpdump/pull/612#issuecomment-483713070,"Print Linux 4.12 vsockmon captures:
# ip link add type vsockmon
# ip link set vsockmon0 up
# tcpdump -i vsockmon0
16:25:24.987917 VIRTIO 3.1025 > 2.1234 CONNECT, length 76
16:25:24.987963 VIRTIO 2.1234 > 3.1025 CONNECT, length 76
16:25:26.568271 VIRTIO 3.1025 > 2.1234 PAYLOAD, length 82
16:25:26.568512 VIRTIO 2.1234 > 3.1025 CONTROL, length 76
16:25:28.411335 VIRTIO 3.1025 > 2.1234 DISCONNECT, length 76
16:25:28.411628 VIRTIO 2.1234 > 3.1025 DISCONNECT, length 76

For more information about vsock see:
http://wiki.qemu.org/Features/VirtioVsock
This work was originally written as part of Google Summer of Code 2016 by @GerardGarcia. I was his mentor and am upstreaming his code now that Linux 4.12 has been released with vsockmon support.",Merged. Thank you for your work and your patience.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,612,2017-07-06T15:55:48Z,2019-04-16T15:32:09Z,2019-04-16T17:42:13Z,MERGED,True,303,0,11,https://github.com/stefanha,Add printing support for vsockmon devices.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/612,https://github.com/stefanha,20,https://github.com/the-tcpdump-group/tcpdump/pull/612#issuecomment-483773944,"Print Linux 4.12 vsockmon captures:
# ip link add type vsockmon
# ip link set vsockmon0 up
# tcpdump -i vsockmon0
16:25:24.987917 VIRTIO 3.1025 > 2.1234 CONNECT, length 76
16:25:24.987963 VIRTIO 2.1234 > 3.1025 CONNECT, length 76
16:25:26.568271 VIRTIO 3.1025 > 2.1234 PAYLOAD, length 82
16:25:26.568512 VIRTIO 2.1234 > 3.1025 CONTROL, length 76
16:25:28.411335 VIRTIO 3.1025 > 2.1234 DISCONNECT, length 76
16:25:28.411628 VIRTIO 2.1234 > 3.1025 DISCONNECT, length 76

For more information about vsock see:
http://wiki.qemu.org/Features/VirtioVsock
This work was originally written as part of Google Summer of Code 2016 by @GerardGarcia. I was his mentor and am upstreaming his code now that Linux 4.12 has been released with vsockmon support.",🎆 Party time!  Thanks,True,{'HOORAY': ['https://github.com/fxlb']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,613,2017-07-12T09:01:28Z,2017-08-29T18:33:38Z,2017-08-29T22:47:03Z,MERGED,True,32,3,1,https://github.com/msehnout,Use separate buffers for encrypted and decrypted content,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/613,https://github.com/msehnout,1,https://github.com/the-tcpdump-group/tcpdump/pull/613,"This issue is described in #586.
It basically just allocates a new buffer, which is passed into the EVP_Cipher function. The rest is just debugging, which I'll remove.
Do you agree with this solution?","This issue is described in #586.
It basically just allocates a new buffer, which is passed into the EVP_Cipher function. The rest is just debugging, which I'll remove.
Do you agree with this solution?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,613,2017-07-12T09:01:28Z,2017-08-29T18:33:38Z,2017-08-29T22:47:03Z,MERGED,True,32,3,1,https://github.com/msehnout,Use separate buffers for encrypted and decrypted content,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/613,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/613#issuecomment-315191963,"This issue is described in #586.
It basically just allocates a new buffer, which is passed into the EVP_Cipher function. The rest is just debugging, which I'll remove.
Do you agree with this solution?","Generic observations: this change fixes one warning and introduces two new warnings in esp_print_decrypt_buffer_by_ikev2(), it does not fix the warning in esp_print().
As an unrelated note the Travis build fails the test due to some debugging output but make check fails to fail after that, at least as far as exit codes (and thus Travis scripts) are concerned. Congratulations, you have found a bug in tcpdump test scripts (just fixed with commit d72adb9).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,613,2017-07-12T09:01:28Z,2017-08-29T18:33:38Z,2017-08-29T22:47:03Z,MERGED,True,32,3,1,https://github.com/msehnout,Use separate buffers for encrypted and decrypted content,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/613,https://github.com/guyharris,3,https://github.com/the-tcpdump-group/tcpdump/pull/613#issuecomment-315193943,"This issue is described in #586.
It basically just allocates a new buffer, which is passed into the EVP_Cipher function. The rest is just debugging, which I'll remove.
Do you agree with this solution?","It basically just allocates a new buffer

Where does it free the buffer?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,613,2017-07-12T09:01:28Z,2017-08-29T18:33:38Z,2017-08-29T22:47:03Z,MERGED,True,32,3,1,https://github.com/msehnout,Use separate buffers for encrypted and decrypted content,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/613,https://github.com/msehnout,4,https://github.com/the-tcpdump-group/tcpdump/pull/613#issuecomment-315713413,"This issue is described in #586.
It basically just allocates a new buffer, which is passed into the EVP_Cipher function. The rest is just debugging, which I'll remove.
Do you agree with this solution?","Thanks for your responses. I'm aware of the warning in esp_print(), but I can just copy the same solution once we agree on it. Those warning are easy to fix, if you mean these:
./print-esp.c: In function ‘esp_print_decrypt_buffer_by_ikev2’:
./print-esp.c:196:9: warning: ISO C90 forbids mixed declarations and code [-Wpedantic]
         int block_size = EVP_CIPHER_CTX_block_size(ctx); // We need a block size
         ^
./print-esp.c:196:58: warning: C++ style comments are not allowed in ISO C90 [enabled by default]
         int block_size = EVP_CIPHER_CTX_block_size(ctx); // We need a block size
                                                          ^
./print-esp.c:196:58: warning: (this will be reported only once per input file) [enabled by default]
./print-esp.c:201:9: warning: ISO C90 forbids mixed declarations and code [-Wpedantic]
         int output_buffer_size = len + (block_size - len % block_size);
         ^

The place where to free the buffer is a question to discuss. The previous solution was to use buf as a place to store decrypted message. I could just copy the new buffer into buf, but this would again discard the const qualifier, but at least it would fix this bug:
https://bugzilla.redhat.com/show_bug.cgi?id=1441963
Other solutions would have to be more complicated because I need to pass this buffer into the ndo variable, thus ndo cannot outlive this buffer.
Do you have any recommendation on where to free this buffer?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,613,2017-07-12T09:01:28Z,2017-08-29T18:33:38Z,2017-08-29T22:47:03Z,MERGED,True,32,3,1,https://github.com/msehnout,Use separate buffers for encrypted and decrypted content,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/613,https://github.com/msehnout,5,https://github.com/the-tcpdump-group/tcpdump/pull/613#issuecomment-316670107,"This issue is described in #586.
It basically just allocates a new buffer, which is passed into the EVP_Cipher function. The rest is just debugging, which I'll remove.
Do you agree with this solution?","I decided to just copy the temporary buffer into the old one (passed as argument). This does not solve the warning about discarding const qualifier, but should prevent undefined behavior when using OpenSSL api.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,613,2017-07-12T09:01:28Z,2017-08-29T18:33:38Z,2017-08-29T22:47:03Z,MERGED,True,32,3,1,https://github.com/msehnout,Use separate buffers for encrypted and decrypted content,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/613,https://github.com/msehnout,6,https://github.com/the-tcpdump-group/tcpdump/pull/613#issuecomment-319041583,"This issue is described in #586.
It basically just allocates a new buffer, which is passed into the EVP_Cipher function. The rest is just debugging, which I'll remove.
Do you agree with this solution?",Any comments on this PR?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,613,2017-07-12T09:01:28Z,2017-08-29T18:33:38Z,2017-08-29T22:47:03Z,MERGED,True,32,3,1,https://github.com/msehnout,Use separate buffers for encrypted and decrypted content,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/613,https://github.com/guyharris,7,https://github.com/the-tcpdump-group/tcpdump/pull/613#issuecomment-323625774,"This issue is described in #586.
It basically just allocates a new buffer, which is passed into the EVP_Cipher function. The rest is just debugging, which I'll remove.
Do you agree with this solution?","Any comments on this PR?



Please remove the debugging printouts, as they're making the ""make check"" part of the Travis build fail.


There are two locations where we're using the same buffer - see also the code beginning around line 714.


It's not the ideal solution, in which we wouldn't overwrite the packet data; I'm looking at that, but it's a bit more complicated to do that right, so we should probably go with a solution like this for now.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,613,2017-07-12T09:01:28Z,2017-08-29T18:33:38Z,2017-08-29T22:47:03Z,MERGED,True,32,3,1,https://github.com/msehnout,Use separate buffers for encrypted and decrypted content,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/613,https://github.com/msehnout,8,https://github.com/the-tcpdump-group/tcpdump/pull/613#issuecomment-325659947,"This issue is described in #586.
It basically just allocates a new buffer, which is passed into the EVP_Cipher function. The rest is just debugging, which I'll remove.
Do you agree with this solution?",Done,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,613,2017-07-12T09:01:28Z,2017-08-29T18:33:38Z,2017-08-29T22:47:03Z,MERGED,True,32,3,1,https://github.com/msehnout,Use separate buffers for encrypted and decrypted content,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/613,https://github.com/infrastation,9,https://github.com/the-tcpdump-group/tcpdump/pull/613#issuecomment-325802658,"This issue is described in #586.
It basically just allocates a new buffer, which is passed into the EVP_Cipher function. The rest is just debugging, which I'll remove.
Do you agree with this solution?",On my system this removes the old warnings about print-esp.c and adds some new ones.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,613,2017-07-12T09:01:28Z,2017-08-29T18:33:38Z,2017-08-29T22:47:03Z,MERGED,True,32,3,1,https://github.com/msehnout,Use separate buffers for encrypted and decrypted content,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/613,https://github.com/guyharris,10,https://github.com/the-tcpdump-group/tcpdump/pull/613#issuecomment-325806047,"This issue is described in #586.
It basically just allocates a new buffer, which is passed into the EVP_Cipher function. The rest is just debugging, which I'll remove.
Do you agree with this solution?","The only way to remove all the warnings is not to have decrypted data in the original buffer.  As the comment in the code says, ""Of course this is wrong, because buf is a const buffer, but changing this would require more complicated fix."", and as the commit message says, ""There is also a second problem, that we write the output to a const buffer, but this issue is not addressed with this PR."", and as my comment says, ""It's not the ideal solution, in which we wouldn't overwrite the packet data; I'm looking at that, but it's a bit more complicated to do that right, so we should probably go with a solution like this for now.""",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,613,2017-07-12T09:01:28Z,2017-08-29T18:33:38Z,2017-08-29T22:47:03Z,MERGED,True,32,3,1,https://github.com/msehnout,Use separate buffers for encrypted and decrypted content,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/613,https://github.com/infrastation,11,https://github.com/the-tcpdump-group/tcpdump/pull/613#issuecomment-325815821,"This issue is described in #586.
It basically just allocates a new buffer, which is passed into the EVP_Cipher function. The rest is just debugging, which I'll remove.
Do you agree with this solution?","Yes, but here is something besides that:
./print-esp.c:160:23: warning: unused variable ‘cipher_nid’ [-Wunused-variable]
./print-esp.c:626:18: warning: unused variable ‘cipher_nid’ [-Wunused-variable]
./print-esp.c:625:10: warning: unused variable ‘buf_mut’ [-Wunused-variable]",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,613,2017-07-12T09:01:28Z,2017-08-29T18:33:38Z,2017-08-29T22:47:03Z,MERGED,True,32,3,1,https://github.com/msehnout,Use separate buffers for encrypted and decrypted content,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/613,https://github.com/guyharris,12,https://github.com/the-tcpdump-group/tcpdump/pull/613#issuecomment-325816633,"This issue is described in #586.
It basically just allocates a new buffer, which is passed into the EVP_Cipher function. The rest is just debugging, which I'll remove.
Do you agree with this solution?","Yes, I noticed that cipher_nid was unused when comparing @msenhout's changes with the ones I was working on (where you don't copy back to the buffer).  I've checked changes to remove cipher_nid completely (884b1b4) and remove buf_mut from the routine where it isn't used (8205015).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,613,2017-07-12T09:01:28Z,2017-08-29T18:33:38Z,2017-08-29T22:47:03Z,MERGED,True,32,3,1,https://github.com/msehnout,Use separate buffers for encrypted and decrypted content,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/613,https://github.com/infrastation,13,https://github.com/the-tcpdump-group/tcpdump/pull/613#issuecomment-325826240,"This issue is described in #586.
It basically just allocates a new buffer, which is passed into the EVP_Cipher function. The rest is just debugging, which I'll remove.
Do you agree with this solution?",Thank you.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,614,2017-07-17T21:33:55Z,2017-07-18T21:38:20Z,2017-07-18T21:38:20Z,CLOSED,False,396,25,7,https://github.com/lilchurro,Packet sanitization and IP masking,26,[],https://github.com/the-tcpdump-group/tcpdump/pull/614,https://github.com/lilchurro,1,https://github.com/the-tcpdump-group/tcpdump/pull/614,"Built two new flags to sanitize packets as they are written to savefiles:

0 zeroes out the packet payload bytes after (the first encountered) TCP/UDP header
00 truncates the packet right after the (first encountered) TCP/UDP header


[mask_ip] strips the external IP addresses (i.e., addresses outside of the reserved netblocks specified in RFC5735) and replaces it with [mask_ip].","Built two new flags to sanitize packets as they are written to savefiles:

0 zeroes out the packet payload bytes after (the first encountered) TCP/UDP header
00 truncates the packet right after the (first encountered) TCP/UDP header


[mask_ip] strips the external IP addresses (i.e., addresses outside of the reserved netblocks specified in RFC5735) and replaces it with [mask_ip].",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,614,2017-07-17T21:33:55Z,2017-07-18T21:38:20Z,2017-07-18T21:38:20Z,CLOSED,False,396,25,7,https://github.com/lilchurro,Packet sanitization and IP masking,26,[],https://github.com/the-tcpdump-group/tcpdump/pull/614,https://github.com/lilchurro,2,https://github.com/the-tcpdump-group/tcpdump/pull/614#issuecomment-316205698,"Built two new flags to sanitize packets as they are written to savefiles:

0 zeroes out the packet payload bytes after (the first encountered) TCP/UDP header
00 truncates the packet right after the (first encountered) TCP/UDP header


[mask_ip] strips the external IP addresses (i.e., addresses outside of the reserved netblocks specified in RFC5735) and replaces it with [mask_ip].",Opened pull request #615 to use different branch; retiring this pull request.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,615,2017-07-18T21:37:39Z,,2019-03-20T21:23:24Z,OPEN,False,554,27,17,https://github.com/lilchurro,Packet sanitization and IP masking,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/615,https://github.com/lilchurro,1,https://github.com/the-tcpdump-group/tcpdump/pull/615,Created a separate branch so I can keep upstream and workgroup README and version strings separate.,Created a separate branch so I can keep upstream and workgroup README and version strings separate.,True,{'THUMBS_UP': ['https://github.com/andrew-morris']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,615,2017-07-18T21:37:39Z,,2019-03-20T21:23:24Z,OPEN,False,554,27,17,https://github.com/lilchurro,Packet sanitization and IP masking,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/615,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/615#issuecomment-316346016,Created a separate branch so I can keep upstream and workgroup README and version strings separate.,"As a general note, this problem is not new and similar tools already exist:

http://scrub-tcpdump.sourceforge.net/docs.php
https://www.wireshark.org/lists/wireshark-users/201201/msg00106.html
https://blog.packet-foo.com/2013/07/trace-file-sanitization-for-network-analysts/
http://www.tm.uka.de/software/pktanon/links/index.html
https://github.com/thepacketgeek/sanicap

If you still find it better to suggest a new solution, the proposed changes need to be one clean commit, which explains why this specific solution is better.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,615,2017-07-18T21:37:39Z,,2019-03-20T21:23:24Z,OPEN,False,554,27,17,https://github.com/lilchurro,Packet sanitization and IP masking,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/615,https://github.com/lilchurro,3,https://github.com/the-tcpdump-group/tcpdump/pull/615#issuecomment-316481923,Created a separate branch so I can keep upstream and workgroup README and version strings separate.,"Hi there!
I'm currently working on the +#include <arpa/inet.h> issue, and a better description for the PR request, but I'd like to take a moment to respond to the question of ""Why does this PR exist?""
As a former network analyst, I'm certainly aware that tools exist that sort of do these anonymization/privatization and sanitization features, but there are (in my experience) some not-insignificant issues with their adoption. Our motivation for ultimately adding this to tcpdump are the following:


Simplicity and automation. We are trying to automate the collection and analysis of network traffic coming off of SDN-enabled switches, and we wanted something that did bulk sanitization without requiring multistep or manual processes (i.e., first collecting, then moving, then scrubbing, etc.) because...


Ability to scale. Most of our work entail large packet captures (e.g., hundreds of GBs), which can pose scalability issues when running subsequent tools, especially if they require writing full packet captures to memory before sanitizing and anonymizing. We had looked at scapy, for example (which is a backbone to some of these tools), which does not seem to handle scaling challenges particularly well.


Thorough sanitization. In the discussions referenced, one will see comments about sanitizing higher layer protocols (e.g., DNS) but potentially omitting or mishandling another (e.g., HTTP). As well, a problem in one layer can undo the anonymity offered by scrubbing a lower layer protocol. This approach may not solve every privacy concern, but completely zeroing out (or truncating) all payload data above TCP/UDP seems to pretty much resolve many of the more conventional privacy issues.


Runs cleanly on Linux. We require something that can be run on Linux as that's where we do the bulk of our work. We are also finding that Linux is typically the base OS on ""bare metal"" switches / ""disaggregated"" network gear. Windows-only based approaches (like TraceWrangler) are challenging for those of us running tcpdump on primarily Linux-based environments or on physical network switches.


Is an active project. Ideally, we'd like something that is maintained/not orphaned, and is stable. For example, SCRUBtcpdump looks promising, but doesn't seem to have been updated in a decade, and segfaults from the command line with unexpected input. At the risk of stating the obvious, tcpdump's long history and widescale adoption, significant userbase, active community and development base makes it an ideal and attractive method.


Finally, there's the utility of the proposed -00 option which shrinks the size of data collection. This reduction has significant impact for folks doing downstream ingest and analytics of really large network collections. (Sending 1GB to a GPU farm is way better than 10GB!) Having this functionality built into tcpdump opens it up as a really great option not just for traditional networking folks, but for people doing research in machine learning (e.g., our team) in computer networks and security.
All that being said, thanks so much for your input and guidance! I'll work on better defining the description and the code issues pointed out.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,615,2017-07-18T21:37:39Z,,2019-03-20T21:23:24Z,OPEN,False,554,27,17,https://github.com/lilchurro,Packet sanitization and IP masking,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/615,https://github.com/mcr,4,https://github.com/the-tcpdump-group/tcpdump/pull/615#issuecomment-316700059,Created a separate branch so I can keep upstream and workgroup README and version strings separate.,"lilchurro <notifications@github.com> wrote:
 2 Ability to scale. Most of our work entail large packet captures
 3 Thorough sanitization. In the discussions referenced, one will see

So, if you are saying that you would typically want to run the sanitization
*as* you capture, then I get why you want it in tcpdump.  That way there
is never a file that is non-sanitized.",True,"{'HEART': ['https://github.com/lilchurro', 'https://github.com/andrew-morris'], 'THUMBS_UP': ['https://github.com/d-grossman', 'https://github.com/gregs5', 'https://github.com/andrew-morris']}"
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,615,2017-07-18T21:37:39Z,,2019-03-20T21:23:24Z,OPEN,False,554,27,17,https://github.com/lilchurro,Packet sanitization and IP masking,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/615,https://github.com/mcr,5,https://github.com/the-tcpdump-group/tcpdump/pull/615#issuecomment-317470508,Created a separate branch so I can keep upstream and workgroup README and version strings separate.,"Guy Harris <notifications@github.com> wrote:
 which features; as I remember, Visual Studio 2013 (the compiler
 currently used on the Wireshark buildbots) support all of those.

...
If this compiler is redily available, then I think that covers windows.

My only concern is whether or not someone is still trying to build for
some old HPUX or something like that.  I'm happy to abandon them :-)
…
-- 
]               Never tell me the odds!                 | ipv6 mesh networks [
]   Michael Richardson, Sandelman Software Works        | network architect  [
]     mcr@sandelman.ca  http://www.sandelman.ca/        |   ruby on rails    [",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,615,2017-07-18T21:37:39Z,,2019-03-20T21:23:24Z,OPEN,False,554,27,17,https://github.com/lilchurro,Packet sanitization and IP masking,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/615,https://github.com/lilchurro,6,https://github.com/the-tcpdump-group/tcpdump/pull/615#issuecomment-318211488,Created a separate branch so I can keep upstream and workgroup README and version strings separate.,"Hello again... I'm having some issues compiling on Windows. (Using Visual Studio 2017, and attempting to compile with headers and libraries as provided by WpcapSrc_4_1_3.zip.)
I'm trying to compile just the master branch of tcpdump (i.e., without my changes), but am stuck with some dependency issues (among other things). It appears to me that windump version 4.10 doesn't compile on Windows as it refers to the file util.c, which doesn't exist. Also, I'm having issues using wpcapsrc 4.1.3, as the pcap.h included therein contains reference to sys/time.h -- so is there a specific version of winpcap that I should be using? The win32 readme seems vague about this.
Is there some way I can get assistance in compiling the master branch on Windows? It seems like I should get that working before trying to verify that my changes can compile.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,615,2017-07-18T21:37:39Z,,2019-03-20T21:23:24Z,OPEN,False,554,27,17,https://github.com/lilchurro,Packet sanitization and IP masking,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/615,https://github.com/lilchurro,7,https://github.com/the-tcpdump-group/tcpdump/pull/615#issuecomment-332862798,Created a separate branch so I can keep upstream and workgroup README and version strings separate.,"FYI, I've added new tests to verify the anonymization and packet sanitization for TCP/UDP packet payloads, and have integrated them into TESTrun.sh. I noticed that there wasn't really a way to test for cases where -w [savefile] differs from the usual tcpdump output, so the new test file TESToutfile checks for such a case. For ease of use, it's basically coded in the same structure as TESTonce and uses TESTOUTLIST to keep track of tests related to savefiles.
If there's something else I can do to move this PR along, please let me know; otherwise, I will consider this about as done as it could be. 🙂",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,615,2017-07-18T21:37:39Z,,2019-03-20T21:23:24Z,OPEN,False,554,27,17,https://github.com/lilchurro,Packet sanitization and IP masking,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/615,https://github.com/lilchurro,8,https://github.com/the-tcpdump-group/tcpdump/pull/615#issuecomment-335850416,Created a separate branch so I can keep upstream and workgroup README and version strings separate.,Ping... is there anything else I can do to move this PR along?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,615,2017-07-18T21:37:39Z,,2019-03-20T21:23:24Z,OPEN,False,554,27,17,https://github.com/lilchurro,Packet sanitization and IP masking,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/615,https://github.com/lilchurro,9,https://github.com/the-tcpdump-group/tcpdump/pull/615#issuecomment-351197176,Created a separate branch so I can keep upstream and workgroup README and version strings separate.,"😱  Well, that rebase was a harrowing experience. 1 clean commit now tho.",True,{'THUMBS_UP': ['https://github.com/aggiebill']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,615,2017-07-18T21:37:39Z,,2019-03-20T21:23:24Z,OPEN,False,554,27,17,https://github.com/lilchurro,Packet sanitization and IP masking,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/615,https://github.com/gregs5,10,https://github.com/the-tcpdump-group/tcpdump/pull/615#issuecomment-409633156,Created a separate branch so I can keep upstream and workgroup README and version strings separate.,Is this something @lilchurro should consider spending the time to bring up to date? Would be great to get some guidance here!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,615,2017-07-18T21:37:39Z,,2019-03-20T21:23:24Z,OPEN,False,554,27,17,https://github.com/lilchurro,Packet sanitization and IP masking,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/615,https://github.com/infrastation,11,https://github.com/the-tcpdump-group/tcpdump/pull/615#issuecomment-409719572,Created a separate branch so I can keep upstream and workgroup README and version strings separate.,"There were two discussions made in this pull request. One about the code itself, which indeed belongs here. I cannot help completing it before I finish other bits of work, other developers may be available. Another discussion, which would belong more to the tcpdump-workers mailing list, was whether it is right to incorporate the masking function into tcpdump as opposed to doing it in a separate binary. I guess the latter one could go into more detail to reach a more pronounced consensus. I, for instance, am not quite convinced yet, but I could be wrong.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,615,2017-07-18T21:37:39Z,,2019-03-20T21:23:24Z,OPEN,False,554,27,17,https://github.com/lilchurro,Packet sanitization and IP masking,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/615,https://github.com/gregs5,12,https://github.com/the-tcpdump-group/tcpdump/pull/615#issuecomment-409722825,Created a separate branch so I can keep upstream and workgroup README and version strings separate.,"Thanks - really appreciate the reply. Understood on your concerns. I'll share that we looked at other methods (and all the tools you referenced last year) and still came to the conclusion that for anyone who wants this functionality, this is the right path.  That said though, I'll start a thread in the tcpdump-workers and we'll see where it takes us. Thanks!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,617,2017-07-20T14:24:27Z,2017-07-23T18:08:08Z,2017-07-28T14:00:50Z,CLOSED,False,1,0,1,https://github.com/anarcat,Check mstp_len before dereferencing,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/617,https://github.com/anarcat,1,https://github.com/the-tcpdump-group/tcpdump/pull/617,"During STP processing, we have a special handler for SPB (Shortest
Path Bridging) which parses a part of the packet for that specific
protocol. To find the length of that part of the packet (spb_len),
it uses the mstp_len variable to find where that value is
stored. Since mstp_len is unpacked from the packet earlier, it is a
user-controlled value and so, the pointer to sbp_len can also be
user-controlled.
We therefore need to check that we can extract it safely, using the
ND_TCHECK_16BITS macro, as per Code style and generic remarks in
the CONTRIBUTING document. The pointer taken to extract mstp_len
itself is checked, but, oddly, even though the comments say
sbp_len is validated as well, the macro call is missing.
This fixes the symptoms described by CVE-2017-11108 in my tests, but
someone with e deeper knowledge of the code should review this to
confirm it is the correct solution.
Closes: #616","During STP processing, we have a special handler for SPB (Shortest
Path Bridging) which parses a part of the packet for that specific
protocol. To find the length of that part of the packet (spb_len),
it uses the mstp_len variable to find where that value is
stored. Since mstp_len is unpacked from the packet earlier, it is a
user-controlled value and so, the pointer to sbp_len can also be
user-controlled.
We therefore need to check that we can extract it safely, using the
ND_TCHECK_16BITS macro, as per Code style and generic remarks in
the CONTRIBUTING document. The pointer taken to extract mstp_len
itself is checked, but, oddly, even though the comments say
sbp_len is validated as well, the macro call is missing.
This fixes the symptoms described by CVE-2017-11108 in my tests, but
someone with e deeper knowledge of the code should review this to
confirm it is the correct solution.
Closes: #616",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,617,2017-07-20T14:24:27Z,2017-07-23T18:08:08Z,2017-07-28T14:00:50Z,CLOSED,False,1,0,1,https://github.com/anarcat,Check mstp_len before dereferencing,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/617,https://github.com/anarcat,2,https://github.com/the-tcpdump-group/tcpdump/pull/617#issuecomment-316722081,"During STP processing, we have a special handler for SPB (Shortest
Path Bridging) which parses a part of the packet for that specific
protocol. To find the length of that part of the packet (spb_len),
it uses the mstp_len variable to find where that value is
stored. Since mstp_len is unpacked from the packet earlier, it is a
user-controlled value and so, the pointer to sbp_len can also be
user-controlled.
We therefore need to check that we can extract it safely, using the
ND_TCHECK_16BITS macro, as per Code style and generic remarks in
the CONTRIBUTING document. The pointer taken to extract mstp_len
itself is checked, but, oddly, even though the comments say
sbp_len is validated as well, the macro call is missing.
This fixes the symptoms described by CVE-2017-11108 in my tests, but
someone with e deeper knowledge of the code should review this to
confirm it is the correct solution.
Closes: #616","also note that there may be other branches of the stp code that are vulnerable to similar issues. i haven't audited the whole thing, just the part reported as vulnerable.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,617,2017-07-20T14:24:27Z,2017-07-23T18:08:08Z,2017-07-28T14:00:50Z,CLOSED,False,1,0,1,https://github.com/anarcat,Check mstp_len before dereferencing,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/617,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/617#issuecomment-317271077,"During STP processing, we have a special handler for SPB (Shortest
Path Bridging) which parses a part of the packet for that specific
protocol. To find the length of that part of the packet (spb_len),
it uses the mstp_len variable to find where that value is
stored. Since mstp_len is unpacked from the packet earlier, it is a
user-controlled value and so, the pointer to sbp_len can also be
user-controlled.
We therefore need to check that we can extract it safely, using the
ND_TCHECK_16BITS macro, as per Code style and generic remarks in
the CONTRIBUTING document. The pointer taken to extract mstp_len
itself is checked, but, oddly, even though the comments say
sbp_len is validated as well, the macro call is missing.
This fixes the symptoms described by CVE-2017-11108 in my tests, but
someone with e deeper knowledge of the code should review this to
confirm it is the correct solution.
Closes: #616","Commit d9e65de is a more complete solution to this problem, it is now available in tcpdump release 4.9.1. Thank you very much for the pull request, please send any future security reports to security@tcpdump.org.",True,{'HOORAY': ['https://github.com/anarcat']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,621,2017-07-25T17:53:09Z,2018-08-17T09:52:10Z,2018-08-17T09:52:10Z,CLOSED,False,46,0,2,https://github.com/arjenz,Add decoder for XPF RRDATA,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/621,https://github.com/arjenz,1,https://github.com/the-tcpdump-group/tcpdump/pull/621,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,621,2017-07-25T17:53:09Z,2018-08-17T09:52:10Z,2018-08-17T09:52:10Z,CLOSED,False,46,0,2,https://github.com/arjenz,Add decoder for XPF RRDATA,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/621,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/621#issuecomment-409489841,,"The master branch went significantly ahead, this change needs to be rebased and amended to use the current test/extract macros. Otherwise it does not look like it will take forever to proof-read.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,621,2017-07-25T17:53:09Z,2018-08-17T09:52:10Z,2018-08-17T09:52:10Z,CLOSED,False,46,0,2,https://github.com/arjenz,Add decoder for XPF RRDATA,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/621,https://github.com/arjenz,3,https://github.com/the-tcpdump-group/tcpdump/pull/621#issuecomment-413816611,,"draft-bellis-dnsop-xpf does not appear to be gaining a lot of traction, so no point (currently) to add a decoder for it.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,622,2017-08-01T11:02:18Z,2021-07-12T15:39:41Z,2021-07-12T15:39:42Z,CLOSED,False,376,0,1,https://github.com/l-pr,EAPOL-MKA (MACsec Key Agreement protocol) support added.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/622,https://github.com/l-pr,1,https://github.com/the-tcpdump-group/tcpdump/pull/622,"Hello,
This pull request adds support for the EAPOL MKA (MACsec Key Agreement) protocol, which is defined in
the 802.1X-2010 IEEE standard.
Thanks in advance for your review.","Hello,
This pull request adds support for the EAPOL MKA (MACsec Key Agreement) protocol, which is defined in
the 802.1X-2010 IEEE standard.
Thanks in advance for your review.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,622,2017-08-01T11:02:18Z,2021-07-12T15:39:41Z,2021-07-12T15:39:42Z,CLOSED,False,376,0,1,https://github.com/l-pr,EAPOL-MKA (MACsec Key Agreement protocol) support added.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/622,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/622#issuecomment-635678068,"Hello,
This pull request adds support for the EAPOL MKA (MACsec Key Agreement) protocol, which is defined in
the 802.1X-2010 IEEE standard.
Thanks in advance for your review.","@mcr OK, it now builds, after bringing it up to date with the current state of tcpdump.  Do we want test files?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,622,2017-08-01T11:02:18Z,2021-07-12T15:39:41Z,2021-07-12T15:39:42Z,CLOSED,False,376,0,1,https://github.com/l-pr,EAPOL-MKA (MACsec Key Agreement protocol) support added.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/622,https://github.com/mcr,3,https://github.com/the-tcpdump-group/tcpdump/pull/622#issuecomment-635694914,"Hello,
This pull request adds support for the EAPOL MKA (MACsec Key Agreement) protocol, which is defined in
the 802.1X-2010 IEEE standard.
Thanks in advance for your review.","@mcr OK, it now builds, after bringing it up to date with the current state of tcpdump. Do we want test files?

Always⸘",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,622,2017-08-01T11:02:18Z,2021-07-12T15:39:41Z,2021-07-12T15:39:42Z,CLOSED,False,376,0,1,https://github.com/l-pr,EAPOL-MKA (MACsec Key Agreement protocol) support added.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/622,https://github.com/fxlb,4,https://github.com/the-tcpdump-group/tcpdump/pull/622#issuecomment-878070430,"Hello,
This pull request adds support for the EAPOL MKA (MACsec Key Agreement) protocol, which is defined in
the 802.1X-2010 IEEE standard.
Thanks in advance for your review.",Rebased on top of the-tcpdump-group:master.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,622,2017-08-01T11:02:18Z,2021-07-12T15:39:41Z,2021-07-12T15:39:42Z,CLOSED,False,376,0,1,https://github.com/l-pr,EAPOL-MKA (MACsec Key Agreement protocol) support added.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/622,https://github.com/fxlb,5,https://github.com/the-tcpdump-group/tcpdump/pull/622#issuecomment-878293182,"Hello,
This pull request adds support for the EAPOL MKA (MACsec Key Agreement) protocol, which is defined in
the 802.1X-2010 IEEE standard.
Thanks in advance for your review.","There are some errors:
./print-eap.c:611:73: error: use of undeclared identifier 'tptr'
       uint16_t param_set_body_len = get_parameter_set_body_length(ndo, tptr + 2);
                                                                        ^
./print-eap.c:624:31: error: use of undeclared identifier 'tptr'
                   GET_BE_U_4(tptr + 4),
                              ^
./print-eap.c:625:31: error: use of undeclared identifier 'tptr'
                   GET_BE_U_4(tptr + 8));
                              ^
                                                  ^
[...]

fatal error: too many errors emitted, stopping now [-ferror-limit=]
20 errors generated.
--- print-eap.o ---
*** [print-eap.o] Error code 1

make: stopped in /tmp/cirrus-ci-build
1 error

make: stopped in /tmp/cirrus-ci-build

Exit status: 2",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,622,2017-08-01T11:02:18Z,2021-07-12T15:39:41Z,2021-07-12T15:39:42Z,CLOSED,False,376,0,1,https://github.com/l-pr,EAPOL-MKA (MACsec Key Agreement protocol) support added.,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/622,https://github.com/l-pr,6,https://github.com/the-tcpdump-group/tcpdump/pull/622#issuecomment-878383853,"Hello,
This pull request adds support for the EAPOL MKA (MACsec Key Agreement) protocol, which is defined in
the 802.1X-2010 IEEE standard.
Thanks in advance for your review.","Hello,
Unfortunately, I haven't been able to work on this for a very long time, and I no longer have the means to reproduce the tests carried out at the time.
I suggest to close this PR. The code could possibly be reviewed and updated/rewritten if anyone wishes to work on this protocol.
Best regards.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,624,2017-08-02T06:19:33Z,2017-08-02T08:11:00Z,2017-08-02T08:11:00Z,CLOSED,False,3,1,1,https://github.com/josealar,cross-compiling: do not check dlpi.,1,['compiling'],https://github.com/the-tcpdump-group/tcpdump/pull/624,https://github.com/josealar,1,https://github.com/the-tcpdump-group/tcpdump/pull/624,"For cross-compiling on Linux platforms, we do not need to check libdlpi
since it is only placed on Solaris.
Signed-off-by: Xin Ouyang Xin.Ouyang@windriver.com","For cross-compiling on Linux platforms, we do not need to check libdlpi
since it is only placed on Solaris.
Signed-off-by: Xin Ouyang Xin.Ouyang@windriver.com",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,624,2017-08-02T06:19:33Z,2017-08-02T08:11:00Z,2017-08-02T08:11:00Z,CLOSED,False,3,1,1,https://github.com/josealar,cross-compiling: do not check dlpi.,1,['compiling'],https://github.com/the-tcpdump-group/tcpdump/pull/624,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/624#issuecomment-319583892,"For cross-compiling on Linux platforms, we do not need to check libdlpi
since it is only placed on Solaris.
Signed-off-by: Xin Ouyang Xin.Ouyang@windriver.com","The comment specifies Linux cross-compilation but the change seems to affect any cross-compilation regardless of the OS, could you check and/or explain? Thank you.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,624,2017-08-02T06:19:33Z,2017-08-02T08:11:00Z,2017-08-02T08:11:00Z,CLOSED,False,3,1,1,https://github.com/josealar,cross-compiling: do not check dlpi.,1,['compiling'],https://github.com/the-tcpdump-group/tcpdump/pull/624,https://github.com/guyharris,3,https://github.com/the-tcpdump-group/tcpdump/pull/624#issuecomment-319590267,"For cross-compiling on Linux platforms, we do not need to check libdlpi
since it is only placed on Solaris.
Signed-off-by: Xin Ouyang Xin.Ouyang@windriver.com","Why is this a problem?  This doesn't check whether something runs, it checks whether something compiles and links, which should work for cross-compiling - and, on OSes other than Solaris (and on Solaris prior to Solaris 11), there is no libdlpi, so the test will fail (as it should) and not add libdlpi to the list of libraries.
As Denis notes, if you're cross compiling for Solaris (e.g., compiling for SPARC on Solaris x86 or for x86 on Solaris SPARC), you should check for libdlpi.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,624,2017-08-02T06:19:33Z,2017-08-02T08:11:00Z,2017-08-02T08:11:00Z,CLOSED,False,3,1,1,https://github.com/josealar,cross-compiling: do not check dlpi.,1,['compiling'],https://github.com/the-tcpdump-group/tcpdump/pull/624,https://github.com/josealar,4,https://github.com/the-tcpdump-group/tcpdump/pull/624#issuecomment-319600751,"For cross-compiling on Linux platforms, we do not need to check libdlpi
since it is only placed on Solaris.
Signed-off-by: Xin Ouyang Xin.Ouyang@windriver.com","Thank you for your comments.
This patch is currently applied in meta-oe. I did test building tcpdump without this patch and it builds correctly. I will send a patch to remove it to meta-oe mailing list.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,1,https://github.com/the-tcpdump-group/tcpdump/pull/625,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-324349238,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","The CI check has failed because the code tries to print the timestamps in local time rather than UTC, hence the test only passes when the local time offset is the same. This needs to be fixed. Otherwise it looks like an organized set of changes to it should be easier to read when somebody gets to examine it closer.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,3,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-324367532,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","The timezone bug is old code; I just added a test that fails now; I'll have a look...
>> Denis Ovsienko ***@***.***> schrieb am 23.08.2017 um 16:21 in
Nachricht <the-tcpdump-group/tcpdump/pull/625/c324349238@github.com>:
…
 The CI check has failed because the code tries to print the timestamps in
 local time rather than UTC, hence the test only passes when the local time
 offset is the same. This needs to be fixed. Otherwise it looks like an
 organized set of changes to it should be easier to read when somebody gets to
 examine it closer.

 --
 You are receiving this because you authored the thread.
 Reply to this email directly or view it on GitHub:
 #625 (comment)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,4,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-324562649,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","I fixed the localtime() time stamps, converting them to gmtime() time stamps, thereby also touching up rounding. You can diff the test output to see then change, as that was required to be updated anyway.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/infrastation,5,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-324584434,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","Thank you very much, please let us have some time to make a more thorough review.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,6,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-324649024,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","I added some more work for NTP processing, adding some details, streamlining some details...
Unfortunately I had to update the test results again, as the output is somewhat different now.
Specifically I ran each of the two tests at four verbosity levels (0-3).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,7,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-325605793,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","I tried to finish the task of mode 6 (control message) packet decoding by decoding the different status words and their components. Unfortunately the output format was changed by doing so. However I hope the format is more consistent now. The depth of indent is discussable, maybe...",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/infrastation,8,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-325615700,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","There is pull request #607 in the way of this pull request (the changes don't merge well), I will try to minimize that pull request first and let you know how it goes.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/infrastation,9,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-325631513,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.",Could you rebase on the current master branch and place simpler changes first if it can be done easily? Thank you.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,10,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-325652032,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","I integrated the fix for unsigned Poll (a rather academic case as there are no valid negative polling intervals) and the printing of the Reference IDs (which is rather cosmetic). I did not integrate the fix for the digest size, because I don't understand it: The digest is 128 bits, which makes 16 octets, not 20.
If you tell me what ""simpler fixes"" are, I (or maybe someone else) might rebase them on master.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,11,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-325653795,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","Resolving the conflicts: As I integrated the fixes of mlichvar (somewhat more elegantly as I believe), I suggest to integrate my branch at commit d1a2d18, because that's where I forked it. There should be no loss of fixed functionality.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,12,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-325660979,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","Integrated the fix for printing NTP's KeyID with the correct endian-ness, pulled upstream, then pushed the new candidate. I don't understand where the conflicts come from: I don't see them locally.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,13,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-325666577,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.",">> Denis Ovsienko ***@***.***> schrieb am 29.08.2017 um 15:35 in
Nachricht <the-tcpdump-group/tcpdump/pull/625/review/59241430@github.com>:
 infrastation commented on this pull request.
 -# MEDSA tests
 +# MEDSA (NTP?) tests

 This is a sample of Marvell EDSA link type decoding, it just happens to
 contain IP/UDP/NTP among other packets.
So wouldn't it make sense to filter out the NTP packets from the example, then?
As a side-effect reducing the size of the test input...",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/infrastation,14,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-325675671,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","Keeping the MEDSA test case as it is is OK, protocols get nested into each other quite often.
Generally this looks like a useful work, let me suggest how to integrate it best.
4 trivial commits from this pull request are now in the master branch. If you rebase your branch on the master branch those 4 will cancel out and make the pull request slightly simpler, also the history will become linear again. Also the trivial changes from the earlier pull request are in the master branch so they will not normally show in what you want to add on top of the master branch.
Besides that, it will help to separate the work that you think is 100% complete from the work that is still in progress because it is difficult to review everything at once, especially when new commits come in once in a few days. Perhaps a volatile development branch and a branch of complete and tested changes would work better.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,15,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-325893246,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","As said initially, this is my first attempt for a github contribution. For my part I tried to deliver the feature in logical chunks that are for themself complete. That's why I used non-fast-forward merges. You could reorganize my merges into one single commit if you like. I guess it's my non-ff merges that let you talk about non-linear history. I wonder whether I should start a new branch that rebases my patch collection and abandon this pull request (I don't know how github will handle all the seemingly new commits then). I don't know when I have time to continue to work on this branch, but in principle interpretation of the data part of the control messages is planned for thus feature branch. As long as noone else works on it (NTP Control Messages), it should be free of conflicts. I hope ;-)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,16,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-325995587,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","I tried to resolve conflicts on pull request 627, but there are still conflicts indicated. I prepared another local branch (rebased this time), but there are also conflicts indicated, so I did not add a pull request. I need some help, please!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/infrastation,17,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-325995837,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","Please leave both your pull requests as they are now, I am trying to simplify the history of your work, will update shortly.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,18,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-326001823,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","Please leave both your pull requests as they are now, I am trying to simplify  the history of your work, will update shortly.
Maybe look at the rebased branch at f-NTP-mode6-B3...",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/infrastation,19,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-326033718,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","I have tried to rebase this work and could not do it quickly because some commits mix changes of different kind and when a merge conflict happens it is difficult to understand why lots of code fails to be replaced with lots of other code. There is an added length check for NTP in the master branch, it adds to the complexity of rebase a bit but I believe it helps to avoid problems in future.
If you can afford more time I would suggest to do as follows. As soon as this is the oldest NTP-related pull request in the queue now, if you continue to work on it you can be reasonably sure subsequent pull requests will not get in the way of your work (we aim to process requests FIFO where possible). Also if you don't add new work to the set of commits it will not become more difficult.
If you split the changes into smaller, more focused and isolated changes, it will be easier to review and merge, and also to troubleshoot later if necessary. For example, if you see that pre-existing whitespace is wrong, make necessary whitespace fixes (and those fixes only) before and separately from the main work, get them merged and forget about it. Alternatively, if you don't care about pre-existing whitespace, leave it as it is. In either case, get whitespace right in your commits.
The very first commit that makes it difficult is ""print-ntp.c: Handle NTP Control Messages"", can you make it simpler? It turns out renaming bp to td introduces many differences that also shows in the rebase later. However, it does not influence the code path so I would suggest not to rename it if possible. Also ntp_control_data needs to use nd_uint8_t and nd_uint16_t types to avoid potential alignment troubles (the input to the printer function is a sequence of bytes, if it does not happen to be aligned with the structure it will cause bugs sooner or later). On that note, existing structures in print-ntp.c will benefit from using those types too, feel free to fix them yourself (as a separate commit) before the main changes.
To edit the commit without getting into git details too deep you can create a new branch from the most recent upstream master branch, git checkout it to make it your working copy and git cherry-pick the commit you need to edit. It will conflict because of the new length checks, edit the file to go with the new checks and once happy run git add and git commit (this will finalize the cherry-pick and your working branch will be 1 commit ahead of master). After adding the changes you want run git add and 'git commit --amend`, this will incorporate them into the last commit without creating a new one (still 1 commit ahead). The point is, in the end you should have a commit that only changes the code when necessary and only does one thing.
After you have some results that make a complete change (that is, safe to be left unattended after the merge) and don't conflict with the master branch, we will try to review and merge, making the total amount of unmerged work smaller after each iteration. Will it work for you?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/infrastation,20,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-326036085,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","By the way, the NTP test cases from this set of commits can be added before any other changes, subsequent commits would just have to include the changes they make to the .out files.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/mcr,21,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-326162772,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","sjvudp <notifications@github.com> wrote:
 part I tried to deliver the feature in logical chunks that are for themself
 complete. That's why I used non-fast-forward merges. You could reorganize my
 merges into one single commit if you like. I guess it's my non-ff merges that
 let you talk about non-linear history. I wonder whether I should start a new
 branch that rebases my patch collection and abandon this pull request
 (I

Yes, git fetch, git rebase -i origin/master
It's often that simple.
…
--
]               Never tell me the odds!                 | ipv6 mesh networks [
]   Michael Richardson, Sandelman Software Works        | network architect  [
]     mcr@sandelman.ca  http://www.sandelman.ca/        |   ruby on rails    [",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,22,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-326276358,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","Infrastation, thanks for the comments; a few of my thoughts follow:
I'm unsure which ""length check"" you are exactly referring to. Probably it's better to compare the whole function instead of diff chunks between master and my branch. Some changes need restructuring of existing code.
On big diffs and white spaces: I thought you prefer rather complete sets of changes, avoiding too many small changes. It looks like i was wrong. As I'm using Emacs, some of the space fixes happen automatically. Sometimes I'll try to make future diffs more clean, so usually I put printf-like format strings and their parameters on different lines, so then it's easier to see whether the change is on format or on value. And at other times I just fold lines that are too long (and should never be there).
On the ""Handle NTP Control Messages"" diff: What I could have separated is normalizing LI. The rest is almost the minimal restructuring change needed to continue.
On renaming of ""bp"": In the old ntp_print() there was a ""cp"" eventually cast to ""bp"" being a pointer to struct ntpdata. My replacement ntp_time_print() receives ""td"" (for ""time data"") as a pointer to struct ntp_time_data. Obviously ""NTP data"" comes in two completely different packet formats, so I added union ntpdata. For compatibility I had retained the old names ""cp"" and ""bp"" in the new ntp_print().
On nd_uint8_t and nd_uint16_t: Thanks, I didn't know that.
Personally I'll try to complete what I intended for this branch locally (continuing on the original branch that was fine until you merged earlier stuff), and then I might add another branch on top of upstream master to receive new changes.
On the testcase: That is rather quick and dirty; I'll try to produce a better one.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/infrastation,23,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-326523893,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.",Let me know if you get stuck. Would merging #628 get in the way of your work?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,24,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-326577037,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","It all depends: In addition to the tests provided (quickly and dirty), I have two more test files here, and I did some interactive testing during recent development. I don't know a mechanism to ""cherry pick"" single packets from a pcap file, or a tool that will fix UDP checksums after editing some packets (in case desired packets are hard to capture, but anyway several kinds of different packets are desired for testing: ordinary time packets (hard to get those from old versions these days) with and without MAC, different types of MACs, successful and failed mode 6 packets, seemingly invalid or truncated packets, etc.
And let me remark what I did locally so far: I completed the interpretation of the data portion of mode 6 requests and responses (which is quite nice, I think). The output format and indent was streamlines once again (I don't like to do this often, but the result is quite good now). The final touch-up will be interpretation of the padding and MAC parts, and maybe do a basic handling of mode 7 requests/responses.
When done and satisfied (talking about myself), I'll try to make small chunks of fixes on upstream master. Which rebase I'm going to about the same work, I'm afraid, but it won't provide the small logical commits you like to see. So I intend to add interactively added chunks to an integration branch, and finally push the result to some branch.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,25,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-326578126,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","Just for demonstration: A preview of the current state of mode 6 decoding:
15:16:18.641347 IP6 (flowlabel 0xb498e, hlim 64, next-header UDP (17) payload length: 60) localhost.54510 > localhost.ntp: [bad udp cksum 0x004f -> 0x08e6!] NTP leap indicator=0 (Nominal), Version=2, Mode=6 (Control Message), length=52
    R=Request, E=OK, M=Last, OpCode=10 (retrieve remote stats), Sequence=31
    Status=0000, Assoc.=0, Offset=0, Count=40, Status=0000
    data:
        nonce=dd53dc22a41bb28510547f3d, frags=32
15:16:18.641548 IP6 (class 0xb8, flowlabel 0xa17fc, hlim 64, next-header UDP (17) payload length: 256) localhost.ntp > localhost.54510: [bad udp cksum 0x0113 -> 0x167d!] NTP leap indicator=0 (Nominal), Version=2, Mode=6 (Control Message), length=248
    R=Response, E=OK, M=Last, OpCode=10 (retrieve remote stats), Sequence=31
    Status=0000, Assoc.=0, Offset=0, Count=233, Status=0000
    data:
        nonce=dd53dc22a42f5e8c5d2ef23f, rs.0=0x1d0, first.0=0xdd3fc359.a354e70f,^M^Jct.0=460, mv.0=36, last.0=0xdd53d8b6.8b33be5c, addr.0=132.199.4.1:123,^M^J^SH.0=18446744073709487267, now=0xdd53dc22.a43906ed,^M^Jlast.newest=0xdd53d8b6.8b33be5c^M^J",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/infrastation,26,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-326667537,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","This is a good potential contribution overall, just the details keep getting in the way, so let's see how we can make it. Can you prepare the first complete pending commit (print-ntp.c: Handle NTP Control Messages) on top of the current master branch the way you consider the best? If that is difficult because of the merge conflicts I can do that for you so you can buffer subsequent changes on top of that.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,27,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-326898980,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.",Pushed a new branch i-master that has a minimalistic subset of the first three commits of this branch. So I'll have the rebasing fun ;-),True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/infrastation,28,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-326924228,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.",Are you happy with that commit to go into master?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,29,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-326925566,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","For me there are no objections, but I wonder what to do with this pull request: It seems I cannot ""reset"" it. Should I start another pull request and abandon this one?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/infrastation,30,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-326944760,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","Thank you, the NTP control message support commit is now in the master branch. To merge it it was necessary to resolve a merge conflict because your branch was not up to date with master, I have done that. Also the commit message repeated your commits that were already in the master branch, I have left that out. Also there were a few code issues: one about code style and the others about code stability and security -- those had to be done immediately after your change. All that is sorted now, please make a copy of the current master branch and prepare the next complete commit or set of commits on top of that.
The pull request, you can make a forced push into its git branch and it will replace the commits that show up on GitHub. Of course, this can easily destroy your work in progress if you don't do it carefully, so if you don't want to experiment just leave the pull request as it is for now and close it after all your work is in.
Let me know if you have any questions or the next change to discuss.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,31,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-326950183,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","As it turned out, I pulled the upstream master to 8dda56aa, but something went wrong, and my integration branch was still based on bd3f9392. I'm sorry for that!
Trying to find out what you did to correct the issues...",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,32,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-326989750,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","Here's my work that mostly completes the mode 6 processing: I've added decoding the data portions, the padding and the message digest. Found that reality does not always match the specs. Example for a failed authentication of a mode 6 control message:
13:56:33.985442 IP6 (flowlabel 0x053b7, hlim 64, next-header UDP (17) payload length: 44) ::1.46618 > ::1.123: [bad udp cksum 0x003f -> 0xa40d!] NTP leap indicator=0 (Nominal), Version=2, Mode=6 (Control Message), length=36
    R=Request, E=OK, M=Last, OpCode=11 (retrieve ordered list), Sequence=36
    Status=0000, Assoc.=0, Offset=0, Count=0, PadLen=4
    MAC:
        KeyID=2, Digest=a557d7e8 aa926d99 c7e37a53 2cb88a64
13:56:33.985596 IP6 (class 0xb8, flowlabel 0x9235b, hlim 64, next-header UDP (17) payload length: 20) ::1.123 > ::1.46618: [bad udp cksum 0x0027 -> 0x3140!] NTP leap indicator=0 (Nominal), Version=2, Mode=6 (Control Message), length=12
    R=Response, E=Error, M=Last, OpCode=11 (retrieve ordered list), Sequence=36
    Status=0x100, Assoc.=0, Offset=0, Count=0
        ErrStat=0x100 (Code=1 (auth. failure), Reserved=0)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/mcr,33,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-327019441,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","For me there are no objections, but I wonder what to do with this pull
 request: It seems I cannot ""reset"" it. Should I start another pull request
 and abandon this one?
If you push a new branch with the same name to github, it will reset.
""git push -f origin mybranchname""
…
--
]               Never tell me the odds!                 | ipv6 mesh networks [
]   Michael Richardson, Sandelman Software Works        | network architect  [
]     mcr@sandelman.ca  http://www.sandelman.ca/        |   ruby on rails    [",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,34,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-327090205,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","Just added a minor improvement for MAC which looks like this now:
    MAC(size 20):
        KeyID=2, MD5-Digest=a557d7e8 aa926d99 c7e37a53 2cb88a64",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/infrastation,35,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-327111367,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","OK, what is the next complete change ready to go into the master branch and where is it?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,36,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-327118869,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.",I have a pushed rebased branch named i-NTP-mode-6. How to proceed?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/infrastation,37,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-327128733,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","The branch i-NTP-mode-6 is based on the master branch as it was 2 weeks ago (20 August 2017) and it complicates the history of changes since that point because it forks, merges and reorders commits. Could you please make a new temporary branch that is an exact copy of the master branch of the repository the-tcpdump-group/tcpdump as it is right now? After you decide which commit(s) should go into the master branch first please cherry-pick those commit(s) only to that temporary branch without fork/merge commits. If you could do that it would help a lot to reduce the amount of unmerged work.
Alternatively, I can cherry-pick the commits from that branch into master for you if you tell which particular commits should go first.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/infrastation,38,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-327141208,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","Update: if you make a new temporary branch please wait until tomorrow as we may have lots of changes in the master branch today, so you don't waste your time doing this twice.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,39,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-327152680,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","I don't really understand what went wrong: I did a pull and a fetch on upstream master before I did the rebase. At the moment I have master at bd3f9392 Print NTP MAC with 160-bit digest..
My upstream is https://github.com/the-tcpdump-group/tcpdump.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/infrastation,40,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-327159050,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","Upstream master right now is at commit 80deba1 (NTP: Add missing bounds checks.), do you see the same when you follow the link you have given?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,41,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-327169726,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","Verry odd: I fetched and pulled, but the latest log item is still commit bd3f9392a61. However when I freshly clone the repository using the same URL, the latest log entry in master is commit 80deba15.
In my working repository I set up remotes like this:
git remote -v
local1	../tcpdump.orig (fetch)
local1	../tcpdump.orig (push)
mlichvar	https://github.com/mlichvar/tcpdump.git (fetch)
mlichvar	https://github.com/mlichvar/tcpdump.git (push)
origin	https://github.com/sjvudp/tcpdump (fetch)
origin	https://github.com/sjvudp/tcpdump (push)
upstream	https://github.com/the-tcpdump-group/tcpdump (fetch)
upstream	https://github.com/the-tcpdump-group/tcpdump (push)

And on the test repository I have:
git remote -v
origin	https://github.com/the-tcpdump-group/tcpdump (fetch)
origin	https://github.com/the-tcpdump-group/tcpdump (push)

So my understanding was that fetch upstream would fetch the changes into my working repository. I'm clueless regarding this problem, sorry. git version 2.12.3.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/infrastation,42,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-327174010,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","git fetch updates the history recorded about the remote branches, it does not merge that remote history into local branches. git pull does that as it is a wrapper around git fetch and git merge. This requires some time to master, meanwhile you may find it more convenient to clone a fresh temporary repository after the upstream changes, then to put the intended changes into that temporary repository, push to GitHub from there and request to merge. After everything you want is in the master branch you will not need the temporary copies anymore.
Let me know once you have the next changes ready.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,43,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-327455778,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","I spent a lot of time for a new branch i2-NTP-mode6 that rebases these patches on commit eb025532.
Most of the extra effort was caused by the fact that two pull requests handle the same problems, and the smaller change set created merge conflicts for the larger change set (mine). I'd wish before starting to merge such things on master, one should talk to the authors whether one can live with the way the other one has fixed issues. While the fixes may seem to start differently, they are quite similar at the end, but git's rebase doesn't know, and I have to pull the incompatible changes quite a long distance...",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/infrastation,44,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-327463190,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","Thank you, I have just looked through, seen progress and left some comments.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,45,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-327466962,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","Sorry, newbie: Where will I find those comments (apart from my mailbox)?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/infrastation,46,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-327800684,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.",If you edit pull request #627 to use your latest branch I will be able to simplify the history in the branch a little bit.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,47,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-328009853,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","If you edit pull request #627 to use your latest branch (...)

How would I do that (I'd like to keep the original (this) branch) at least for a while? Should I swap branch names by doing a triple-rename of branches and then do a forced push ,or what?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/infrastation,48,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-328063973,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","Excuse me, I was wrong. Just checked and in the pull request properties it is possible to change the destination branch of the pull request but not the source. If you just open another pull request from i2-NTP-mode6 it should do the job.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,49,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-328069303,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","If you just open another pull request from i2-NTP-mode6 it should do the job.

Done (#631)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/infrastation,50,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-328661525,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.","Thank you, I need a couple more days to look at it unless anybody else is willing.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,625,2017-08-23T13:59:34Z,2017-11-30T09:11:28Z,2017-11-30T09:11:28Z,CLOSED,False,1456,140,15,https://github.com/sjvudp,NTP discussion (was mode 6 control packets),54,[],https://github.com/the-tcpdump-group/tcpdump/pull/625,https://github.com/sjvudp,51,https://github.com/the-tcpdump-group/tcpdump/pull/625#issuecomment-348127029,"After about 10 years of frustration with tcpdump decoding NTP control messages as timestamp messages, I decided to try to fix it, thereby implementing NTP mode 6 Control Message processing.
I did not do the data portion yet, but this is already quite useful. Along with the new parsing came a little renaming of strings. I tried to make commits for logical steps.
This is my very first github effort, so please be forgiving.",I decided to continue with a new pull request; maybe just because I don't know how to switch the branch of this pull request to another (rebased) branch. See pull request 657.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,626,2017-08-23T17:39:51Z,2017-08-23T17:55:18Z,2017-08-23T17:55:18Z,MERGED,True,1,1,1,https://github.com/loganaden,Fix my email address,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/626,https://github.com/loganaden,1,https://github.com/the-tcpdump-group/tcpdump/pull/626,The previous email is no longer valid.,The previous email is no longer valid.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,627,2017-08-30T13:01:09Z,2017-09-19T14:47:00Z,2017-09-19T14:47:00Z,CLOSED,False,1199,152,14,https://github.com/sjvudp,Handling and decoding of NTP mode 6 Control Packets (not rebased),36,[],https://github.com/the-tcpdump-group/tcpdump/pull/627,https://github.com/sjvudp,1,https://github.com/the-tcpdump-group/tcpdump/pull/627,"I created a new branch equivalent (as of now) with pull request 625 that got a conflict after updating master. This feature allows to detect NTP mode 6 packets (and no longer print them as timestamp messages). In addition most parts of the control packet can be decoded (depending on ""-v""). What is not done yet is the interpretation of the ""data"" part of the control packets (which may be split among multiple packets).","I created a new branch equivalent (as of now) with pull request 625 that got a conflict after updating master. This feature allows to detect NTP mode 6 packets (and no longer print them as timestamp messages). In addition most parts of the control packet can be decoded (depending on ""-v""). What is not done yet is the interpretation of the ""data"" part of the control packets (which may be split among multiple packets).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,627,2017-08-30T13:01:09Z,2017-09-19T14:47:00Z,2017-09-19T14:47:00Z,CLOSED,False,1199,152,14,https://github.com/sjvudp,Handling and decoding of NTP mode 6 Control Packets (not rebased),36,[],https://github.com/the-tcpdump-group/tcpdump/pull/627,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/627#issuecomment-325993970,"I created a new branch equivalent (as of now) with pull request 625 that got a conflict after updating master. This feature allows to detect NTP mode 6 packets (and no longer print them as timestamp messages). In addition most parts of the control packet can be decoded (depending on ""-v""). What is not done yet is the interpretation of the ""data"" part of the control packets (which may be split among multiple packets).","For clarity, this is not a result of git rebase, this is a result of git merge and it joins up to 5 history paths.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,627,2017-08-30T13:01:09Z,2017-09-19T14:47:00Z,2017-09-19T14:47:00Z,CLOSED,False,1199,152,14,https://github.com/sjvudp,Handling and decoding of NTP mode 6 Control Packets (not rebased),36,[],https://github.com/the-tcpdump-group/tcpdump/pull/627,https://github.com/sjvudp,3,https://github.com/the-tcpdump-group/tcpdump/pull/627#issuecomment-326001474,"I created a new branch equivalent (as of now) with pull request 625 that got a conflict after updating master. This feature allows to detect NTP mode 6 packets (and no longer print them as timestamp messages). In addition most parts of the control packet can be decoded (depending on ""-v""). What is not done yet is the interpretation of the ""data"" part of the control packets (which may be split among multiple packets).","For clarity, this is not a result of `git rebase`, this is a result of `git  merge` and it joins up to 5 history paths.
I know about the merge. Interestingly when I did a rebase with manual merging, the branch was still maked as conflicting...",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,627,2017-08-30T13:01:09Z,2017-09-19T14:47:00Z,2017-09-19T14:47:00Z,CLOSED,False,1199,152,14,https://github.com/sjvudp,Handling and decoding of NTP mode 6 Control Packets (not rebased),36,[],https://github.com/the-tcpdump-group/tcpdump/pull/627,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/627#issuecomment-330563641,"I created a new branch equivalent (as of now) with pull request 625 that got a conflict after updating master. This feature allows to detect NTP mode 6 packets (and no longer print them as timestamp messages). In addition most parts of the control packet can be decoded (depending on ""-v""). What is not done yet is the interpretation of the ""data"" part of the control packets (which may be split among multiple packets).",Closing this pull request as the work in progress has moved to #631 (some discussion is still in #625).,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,628,2017-08-30T13:52:03Z,2017-09-19T14:43:42Z,2017-09-19T14:44:18Z,MERGED,True,94,0,3,https://github.com/mlichvar,Add NTP test,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/628,https://github.com/mlichvar,1,https://github.com/the-tcpdump-group/tcpdump/pull/628,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,628,2017-08-30T13:52:03Z,2017-09-19T14:43:42Z,2017-09-19T14:44:18Z,MERGED,True,94,0,3,https://github.com/mlichvar,Add NTP test,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/628,https://github.com/sjvudp,2,https://github.com/the-tcpdump-group/tcpdump/pull/628#issuecomment-326573744,,"I'd advise the pull requestor strongly to describe the kind of tests added (here, too). Referring to ""No description provided""...",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,628,2017-08-30T13:52:03Z,2017-09-19T14:43:42Z,2017-09-19T14:44:18Z,MERGED,True,94,0,3,https://github.com/mlichvar,Add NTP test,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/628,https://github.com/mlichvar,3,https://github.com/the-tcpdump-group/tcpdump/pull/628#issuecomment-326574996,,"There are several client/server exchanges, using different authentication options: no key, MD5 key and SHA1 key. One response is a crypto-NAK. The commit includes the expected output.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,628,2017-08-30T13:52:03Z,2017-09-19T14:43:42Z,2017-09-19T14:44:18Z,MERGED,True,94,0,3,https://github.com/mlichvar,Add NTP test,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/628,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/628#issuecomment-327455776,,For the avoidance of doubt: is everybody happy for this commit to be merged as it is now?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,628,2017-08-30T13:52:03Z,2017-09-19T14:43:42Z,2017-09-19T14:44:18Z,MERGED,True,94,0,3,https://github.com/mlichvar,Add NTP test,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/628,https://github.com/sjvudp,5,https://github.com/the-tcpdump-group/tcpdump/pull/628#issuecomment-327465676,,"Before committing: Maybe can we discuss what type of packets we'd like to see in the pcap file, and what options we want to run tcpdump with?
For time packets, the variants would be different versions of NTP, different modes of operation, authenticated or not, different MAC types, autokey and extension fields.
For control packets I'd like to see single-packet responses, multi-packet responses, authenticated and unauthenticated, and a few different commands.
Maybe we want a mode7 (reserved) packet also.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,628,2017-08-30T13:52:03Z,2017-09-19T14:43:42Z,2017-09-19T14:44:18Z,MERGED,True,94,0,3,https://github.com/mlichvar,Add NTP test,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/628,https://github.com/infrastation,6,https://github.com/the-tcpdump-group/tcpdump/pull/628#issuecomment-327601433,,"It helps to have as many different encoding examples as possible to test as many code paths as possible. Also if the code goes into different level of details depending on ndo_vflag (as it does or is going to do soon in print-ntp.c), there should be a test for each level of detail for each capture. Then much later when somebody changes something and the output becomes different, there is an opportunity to stop and think if that is the intended effect before the change is copied around. If some captures to some extent repeat some others that's OK as protocols mix all the time.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,628,2017-08-30T13:52:03Z,2017-09-19T14:43:42Z,2017-09-19T14:44:18Z,MERGED,True,94,0,3,https://github.com/mlichvar,Add NTP test,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/628,https://github.com/sjvudp,7,https://github.com/the-tcpdump-group/tcpdump/pull/628#issuecomment-328009216,,"I agree with the comments, but isn't the hard part to add single packets to an existing pcap file?
The other thing is: Should there be one pcap file for one protocol, or should there be different pcap file, one for each aspect of the protocol? Here NTP time messages and NTP Control messages use quite a different format, and they have different meanings. This is reflected in the code by using different decoding functions. Ideally hacking one should not affect the other, and maybe the tests should reflect that code structure.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,628,2017-08-30T13:52:03Z,2017-09-19T14:43:42Z,2017-09-19T14:44:18Z,MERGED,True,94,0,3,https://github.com/mlichvar,Add NTP test,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/628,https://github.com/infrastation,8,https://github.com/the-tcpdump-group/tcpdump/pull/628#issuecomment-328062630,,"Multiple captures per protocol work just fine, please see the already existing tests. As a minimum sufficient requirement, if you add a new test it must cover something that was not covered before. It is nice to see a test that is 100% pure and complete but that is not a requirement, otherwise there would be way fewer tests in the set.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,628,2017-08-30T13:52:03Z,2017-09-19T14:43:42Z,2017-09-19T14:44:18Z,MERGED,True,94,0,3,https://github.com/mlichvar,Add NTP test,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/628,https://github.com/infrastation,9,https://github.com/the-tcpdump-group/tcpdump/pull/628#issuecomment-329963643,,"If anybody thinks this change should not be merged please state exactly what improvements need to be made, otherwise this will be in the master branch soon because more samples mean less bugs in the code.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,628,2017-08-30T13:52:03Z,2017-09-19T14:43:42Z,2017-09-19T14:44:18Z,MERGED,True,94,0,3,https://github.com/mlichvar,Add NTP test,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/628,https://github.com/sjvudp,10,https://github.com/the-tcpdump-group/tcpdump/pull/628#issuecomment-330148456,,"Well, if you are ready to accept changes later: I still wonder: Should there be one pcap file per protocol, or should there be multiple pcap files for individual features of a protocol. Changes to pcap files don't diff very nicely as they are binary.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,628,2017-08-30T13:52:03Z,2017-09-19T14:43:42Z,2017-09-19T14:44:18Z,MERGED,True,94,0,3,https://github.com/mlichvar,Add NTP test,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/628,https://github.com/infrastation,11,https://github.com/the-tcpdump-group/tcpdump/pull/628#issuecomment-330562746,,Thanks for the contribution.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,630,2017-09-07T09:29:22Z,2017-12-16T06:34:56Z,2017-12-16T06:34:56Z,MERGED,True,253,32,13,https://github.com/davidcronin-arista,tcpdump should decode BGP add-path NLRI and withrawn routes correctly,6,[],https://github.com/the-tcpdump-group/tcpdump/pull/630,https://github.com/davidcronin-arista,1,https://github.com/the-tcpdump-group/tcpdump/pull/630,"Added ability to decode bgp add-path for updated and withdrawn routes for ipv4 and
ipv6. Since there is no flag to signal that a message contains add-path content, a
heuristic approach is taken where we assume an add-path format if an add-path
message is sensible and that standard bgp is not. In this way we will only display
as add-path if displaying as regular bgp was in some way incorrect anyway.
Also modified bgp_update_print to correctly decode withdrawn routes as IPv4 as IPv6
routes are always in MP_UNREACH_NLRI.
The test covers decoding of add path in the NLRI, IPv4 and IPv6 MP_REACH and MP_UNREACH, and withdrawn routes which were not decoded before.
Build / test results ( all pass ) can be seen here https://travis-ci.org/davidcronin-arista/tcpdump","Added ability to decode bgp add-path for updated and withdrawn routes for ipv4 and
ipv6. Since there is no flag to signal that a message contains add-path content, a
heuristic approach is taken where we assume an add-path format if an add-path
message is sensible and that standard bgp is not. In this way we will only display
as add-path if displaying as regular bgp was in some way incorrect anyway.
Also modified bgp_update_print to correctly decode withdrawn routes as IPv4 as IPv6
routes are always in MP_UNREACH_NLRI.
The test covers decoding of add path in the NLRI, IPv4 and IPv6 MP_REACH and MP_UNREACH, and withdrawn routes which were not decoded before.
Build / test results ( all pass ) can be seen here https://travis-ci.org/davidcronin-arista/tcpdump",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,630,2017-09-07T09:29:22Z,2017-12-16T06:34:56Z,2017-12-16T06:34:56Z,MERGED,True,253,32,13,https://github.com/davidcronin-arista,tcpdump should decode BGP add-path NLRI and withrawn routes correctly,6,[],https://github.com/the-tcpdump-group/tcpdump/pull/630,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/630#issuecomment-327770810,"Added ability to decode bgp add-path for updated and withdrawn routes for ipv4 and
ipv6. Since there is no flag to signal that a message contains add-path content, a
heuristic approach is taken where we assume an add-path format if an add-path
message is sensible and that standard bgp is not. In this way we will only display
as add-path if displaying as regular bgp was in some way incorrect anyway.
Also modified bgp_update_print to correctly decode withdrawn routes as IPv4 as IPv6
routes are always in MP_UNREACH_NLRI.
The test covers decoding of add path in the NLRI, IPv4 and IPv6 MP_REACH and MP_UNREACH, and withdrawn routes which were not decoded before.
Build / test results ( all pass ) can be seen here https://travis-ci.org/davidcronin-arista/tcpdump","Existing comments, Section 6 of RFC 7911 and commit c9c3d3c may provide some additional context to the reviewer of this change. Also the two commits were probably originally meant to be one.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,630,2017-09-07T09:29:22Z,2017-12-16T06:34:56Z,2017-12-16T06:34:56Z,MERGED,True,253,32,13,https://github.com/davidcronin-arista,tcpdump should decode BGP add-path NLRI and withrawn routes correctly,6,[],https://github.com/the-tcpdump-group/tcpdump/pull/630,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/630#issuecomment-329577405,"Added ability to decode bgp add-path for updated and withdrawn routes for ipv4 and
ipv6. Since there is no flag to signal that a message contains add-path content, a
heuristic approach is taken where we assume an add-path format if an add-path
message is sensible and that standard bgp is not. In this way we will only display
as add-path if displaying as regular bgp was in some way incorrect anyway.
Also modified bgp_update_print to correctly decode withdrawn routes as IPv4 as IPv6
routes are always in MP_UNREACH_NLRI.
The test covers decoding of add path in the NLRI, IPv4 and IPv6 MP_REACH and MP_UNREACH, and withdrawn routes which were not decoded before.
Build / test results ( all pass ) can be seen here https://travis-ci.org/davidcronin-arista/tcpdump",Could you rebase this work on the current master branch and make it one commit?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,630,2017-09-07T09:29:22Z,2017-12-16T06:34:56Z,2017-12-16T06:34:56Z,MERGED,True,253,32,13,https://github.com/davidcronin-arista,tcpdump should decode BGP add-path NLRI and withrawn routes correctly,6,[],https://github.com/the-tcpdump-group/tcpdump/pull/630,https://github.com/davidcronin-arista,4,https://github.com/the-tcpdump-group/tcpdump/pull/630#issuecomment-330381719,"Added ability to decode bgp add-path for updated and withdrawn routes for ipv4 and
ipv6. Since there is no flag to signal that a message contains add-path content, a
heuristic approach is taken where we assume an add-path format if an add-path
message is sensible and that standard bgp is not. In this way we will only display
as add-path if displaying as regular bgp was in some way incorrect anyway.
Also modified bgp_update_print to correctly decode withdrawn routes as IPv4 as IPv6
routes are always in MP_UNREACH_NLRI.
The test covers decoding of add path in the NLRI, IPv4 and IPv6 MP_REACH and MP_UNREACH, and withdrawn routes which were not decoded before.
Build / test results ( all pass ) can be seen here https://travis-ci.org/davidcronin-arista/tcpdump","Apologies, I'm not that familiar with git.
It should now be one commit and be rebased against the latest master.
However I was getting a rake of test failures this time when I ran make check which I didn't see before. The test I added is now failing too although I can't see what the difference is. It's possible this is just a formatting difference? I don't have the time to look into it further now, and if it is a formatting difference I don't have time to go through all the outputs and regenerate them if that's what is needed.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,630,2017-09-07T09:29:22Z,2017-12-16T06:34:56Z,2017-12-16T06:34:56Z,MERGED,True,253,32,13,https://github.com/davidcronin-arista,tcpdump should decode BGP add-path NLRI and withrawn routes correctly,6,[],https://github.com/the-tcpdump-group/tcpdump/pull/630,https://github.com/infrastation,5,https://github.com/the-tcpdump-group/tcpdump/pull/630#issuecomment-330466095,"Added ability to decode bgp add-path for updated and withdrawn routes for ipv4 and
ipv6. Since there is no flag to signal that a message contains add-path content, a
heuristic approach is taken where we assume an add-path format if an add-path
message is sensible and that standard bgp is not. In this way we will only display
as add-path if displaying as regular bgp was in some way incorrect anyway.
Also modified bgp_update_print to correctly decode withdrawn routes as IPv4 as IPv6
routes are always in MP_UNREACH_NLRI.
The test covers decoding of add path in the NLRI, IPv4 and IPv6 MP_REACH and MP_UNREACH, and withdrawn routes which were not decoded before.
Build / test results ( all pass ) can be seen here https://travis-ci.org/davidcronin-arista/tcpdump","Thank you. Here is a summary of failing tests:

bgp-as-path-oobr-ssl (now goes into more detail than before)
bgp-addpath (tabs/spaces indent)
tok2str-oobr-1 (detects invalid attribute)
bgp_pmsi_tunnel-oobr (idem)
bgp_mvpn_6_and_7
bgp_vpn_rt-oobr

Also there is a warning:
./print-bgp.c: In function ‘bgp_update_print’:
./print-bgp.c:2619:17: warning: ISO C90 forbids mixed declarations and code [-Wpedantic]
                 int add_path = check_add_path(p, withdrawn_routes_len, 32);
                 ^

A more substantial update on this change remains to be done.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,630,2017-09-07T09:29:22Z,2017-12-16T06:34:56Z,2017-12-16T06:34:56Z,MERGED,True,253,32,13,https://github.com/davidcronin-arista,tcpdump should decode BGP add-path NLRI and withrawn routes correctly,6,[],https://github.com/the-tcpdump-group/tcpdump/pull/630,https://github.com/davecronin,6,https://github.com/the-tcpdump-group/tcpdump/pull/630#issuecomment-343685395,"Added ability to decode bgp add-path for updated and withdrawn routes for ipv4 and
ipv6. Since there is no flag to signal that a message contains add-path content, a
heuristic approach is taken where we assume an add-path format if an add-path
message is sensible and that standard bgp is not. In this way we will only display
as add-path if displaying as regular bgp was in some way incorrect anyway.
Also modified bgp_update_print to correctly decode withdrawn routes as IPv4 as IPv6
routes are always in MP_UNREACH_NLRI.
The test covers decoding of add path in the NLRI, IPv4 and IPv6 MP_REACH and MP_UNREACH, and withdrawn routes which were not decoded before.
Build / test results ( all pass ) can be seen here https://travis-ci.org/davidcronin-arista/tcpdump","Hi, I got around to doing some work on this:
Fixed the warning you mentioned
Corrected the tabbing/indentation for bgp-addpath test
Added the extra detail that was being output for bgp-as-path-oobr-ssl && bgp-as-path-oobr-nossl
(note, bgp-as-path-oobr-nossl runs when I run make check, whereas you pointed it out for bgp-as-path-oobr-ssl from the travis log)
For the other four tests that are failing I think my output is incorrect as opposed to the tests needing updating. I will look into these further.
Please let me know if you spot any mistakes
Thanks",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,630,2017-09-07T09:29:22Z,2017-12-16T06:34:56Z,2017-12-16T06:34:56Z,MERGED,True,253,32,13,https://github.com/davidcronin-arista,tcpdump should decode BGP add-path NLRI and withrawn routes correctly,6,[],https://github.com/the-tcpdump-group/tcpdump/pull/630,https://github.com/davecronin,7,https://github.com/the-tcpdump-group/tcpdump/pull/630#issuecomment-344042134,"Added ability to decode bgp add-path for updated and withdrawn routes for ipv4 and
ipv6. Since there is no flag to signal that a message contains add-path content, a
heuristic approach is taken where we assume an add-path format if an add-path
message is sensible and that standard bgp is not. In this way we will only display
as add-path if displaying as regular bgp was in some way incorrect anyway.
Also modified bgp_update_print to correctly decode withdrawn routes as IPv4 as IPv6
routes are always in MP_UNREACH_NLRI.
The test covers decoding of add path in the NLRI, IPv4 and IPv6 MP_REACH and MP_UNREACH, and withdrawn routes which were not decoded before.
Build / test results ( all pass ) can be seen here https://travis-ci.org/davidcronin-arista/tcpdump","Hi, I've had a look at the last four tests and I believe I have fixed the issues, now all tests are passing.
Let me know what you think",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/sjvudp,1,https://github.com/the-tcpdump-group/tcpdump/pull/631,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/sjvudp,2,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-329429776,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"I added/merged some minor fixes, most significant is printing of the message digests.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-329998303,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"Okay, this is step 1. Your work in progress has been rebased on the current master branch and force-pushed back into the i2-NTP-mode6 branch in your forked repository.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-329998442,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,The rebase has prepended your work with 150 commits and it involved only one conflict to resolve in tests/TESTLIST. If you study those 150 commits you will understand better why it is important to check both the declared length from packet headers and the input buffer boundary.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/sjvudp,5,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-330167922,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"I did a local sync with upstream before adding another feature to do a basic dump of NTP mode 7 packets. Well, it should have been a separate pull request, but as it's based on the root of this branch (that is a good deal outdated regarding NTP packets), I just merged it in manually (I aborted rebase because of too many conflicts). Maybe yu like it and ""forward"". I'm aware that my newly added NTP mode 7 checks may conflict with TESTLIST.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/infrastation,6,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-330184724,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,Please let me know when you are done adding new commits and will get back to step 1. Thank you.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/sjvudp,7,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-330249944,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"At the moment I have no intentions to add more stuff to this branch, unless someone thinks I should fix ""this and that"". I'm working on other NTP stuff, but that addresses a new topic, and thus I'll create a new branch. However, I'll have to wait for integration (to pull) as the additional work is based on this branch.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/infrastation,8,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-330572102,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"Before we proceed further please review the changes made in commit 4dafda3. Some of your code that is already in the master branch prints client/server, length and leap indicator one more time in addition to what was already there. Is this a bug?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/fxlb,9,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-330624823,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"Problem on Solaris 10 - 32 bits (i386/SPARC):
https://buildfarm.opencsw.org/buildbot/builders/tcpdump-solaris10-i386/builds/1470/steps/shell_2/logs/stdio
https://buildfarm.opencsw.org/buildbot/builders/tcpdump-solaris10-sparc/builds/1607/steps/shell_2/logs/stdio",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/sjvudp,10,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-330763620,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"Some of your code that is already in the master branch prints client/server,
 length and leap indicator one more time in addition to what was already
 there. Is this a bug?
It would be helpful if you'd refer to a line in the test output files, preferrably. I've checked with my working version ,and could not find what you are referring to, so I guess it's a temporary (d)effect. Did you check the state for the last commit in the branch?

Examples I found (some lines removed for brevity):
IP6 ::1.123 > ::1.38531: NTP LI=0, VN=2, Mode=6, length=408

IP6 (flowlabel 0x62d8a, hlim 64, next-header UDP (17) payload length: 20) ::1.38531 > ::1.123: [bad udp cksum 0x0027 -> 0x5280!] NTP leap indicator=0 (Nominal), Version=2, Mode=6 (Control Message), length=12

IP 10.1.1.4.123 > 132.199.176.18.123: NTP LI=3, VN=3, Mode=1, length=48

IP (tos 0x0, ttl 127, id 44377, offset 0, flags [none], proto UDP (17), length 76)
    10.1.1.4.123 > 132.199.176.18.123: NTP leap indicator=3 (clock unsync.), Version=3, Mode=1 (symmetric active), length=48

IP (tos 0x0, ttl 127, id 44377, offset 0, flags [none], proto UDP (17), length 76)
    10.1.1.4.123 > 132.199.176.18.123: [udp sum ok] NTP leap indicator=3 (clock unsync.), Version=3, Mode=1 (symmetric active), length=48",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/infrastation,11,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-330782321,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,The specific line in the test output is highlighted in commit 4dafda3.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/sjvudp,12,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-330787660,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"On the problem with commit 4dafda3:
It seems some automatic merge failed, as the offending lines are both old and from the same commit:
90692fc print-ntp.c (Denis Ovsienko          2014-03-20 14:39:44 +0400 267) 	ND_PRINT((ndo, ""NTPv%d"", version));
More recent code in ntp_print() should read:
	ND_TCHECK(bp->td.status);

	leapind = (bp->td.status & LEAPMASK) >> LEAPSHIFT;
	version = (bp->td.status & VERSIONMASK) >> VERSIONSHIFT;
	mode = (bp->td.status & MODEMASK) >> MODESHIFT;
	if (version < 1) {
		ND_PRINT((ndo, ""NTP before version 1 or not NTP""));
		return;
	}
	ND_PRINT((ndo, ""NTP""));

	if (ndo->ndo_vflag == 0) {
		if (mode != MODE_RESERVED)
			ND_PRINT((ndo, "" LI=%u,"", leapind));
		ND_PRINT((ndo, "" VN=%u, Mode=%u, length=%u"",
			  version, mode, length));
		return;
	}

And in ntp_time_print():
	if (length < NTP_TIMEMSG_MINLEN)
		goto invalid;

	version = (bp->status & VERSIONMASK) >> VERSIONSHIFT;
	mode = (bp->status & MODEMASK) >> MODESHIFT;

	ND_TCHECK(bp->stratum);
	indent(ndo, i_lev);
	ND_PRINT((ndo, ""Stratum %u (%s)"",
		bp->stratum,
		tok2str(ntp_stratum_values,
			(bp->stratum >= 2 && bp->stratum <= 15) ?
			""secondary reference"" : ""reserved"", bp->stratum)));",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/infrastation,13,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-330795743,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"Let me tell once again that commit 4dafda3 does not cause the problem, it just makes it visible.
The NTP decoder used to output client/server, length and leap indicator even before the changes made in your commit c2e2a18, which added another copy of client/server, length and leap indicator (for example, line 488 of print-ntp.c in the current master branch). That addition was one of the reasons why the NTP test added in commit fdd0cf4 failed (it output was produced before your changes). Commit 4dafda3 fixed that failure but made it apparent there is the duplication now.
The question is: is that duplication intentional or is that a bug?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/fxlb,14,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-330807444,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"Same problem on Debian Jessie 32 bits:
Failed test: ntp

33c33
<         Receive Timestamp:    1802554105.693999877 (2093-03-22T03:56:41)
---
>         Receive Timestamp:    1802554105.693999877 (1957-02-13T21:28:25)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/guyharris,15,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-330810611,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"Problem on ... 32 bit...

The file contains a time stamp that's past the Y2.038K point, so attempts to print it on a 32-bit platform will cause an overflow, making it look like a negative time from 1957 rather than a positive time from 2093.
The only fixes would be to 1) have our own 64-bit version of time_t, and our own versions of gmtime(), localtime(), and strftime() that can always handle 64-bit time stamps or 2) suppress the ""ntp"" test if tcpdump is a 32-bit executable.
I'm working on 2).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/infrastation,16,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-330814233,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"The 2093/1957 issue reproduces exactly on the following systems (uname -srp):

SunOS 5.10 i386
FreeBSD 11.1-RELEASE i386
Linux 4.4.0-96-generic i686

So it seems the NTP tests may fail and should be skipped if uname -p prints either i386 or i686.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/guyharris,17,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-330815683,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"So it seems the NTP tests may fail and should be skipped if uname -p prints either i386 or i686.

Or if we have a 32-bit non-x86 binary.  I run some tests on The Written Word's machine, which include SPARC, PA-RISC, and Power ISA machines, and I build both libpcap and tcpdump 32-bit and 64-bit and test both of them, so I'm doing the 32-bit vs. 64-bit tests by running file on the tcpdump binary.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/sjvudp,18,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-330816494,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"Looking at ""git diff c2e2a1^1 c2e2a1"" it seems the bug was introduced by the request to provide a minimal first commit. The original branch (git diff e065a5b7850c2c1^1 e065a5b7850c2c1) had this:
+/*
+ * Print NTP time requests and responses
+ */
+static void
+ntp_time_print(netdissect_options *ndo,
+              register const struct ntp_time_data *td, u_int length)
+{
+       ND_TCHECK(td->stratum);
        ND_PRINT((ndo, "", Stratum %u (%s)"",
-               bp->stratum,
-               tok2str(ntp_stratum_values, (bp->stratum >=2 && bp->stratum<=15
) ? ""secondary reference"" : ""reserved"", bp->stratum)));
+               td->stratum,
+               tok2str(ntp_stratum_values,
+                       (td->stratum >= 2 && td->stratum <= 15) ?
+                       ""secondary reference"" : ""reserved"", td->stratum)));

So yes, the patch is buggy.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/sjvudp,19,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-330817982,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"Same problem on Debain Jessie 32 bits:

 Failed test: ntp

 33c33
 <         Receive Timestamp:    1802554105.693999877 (2093-03-22T03:56:41)
 ---
>         Receive Timestamp:    1802554105.693999877 (1957-02-13T21:28:25)

My guess is signed vs. unsigned interpretation of the time value. The distance from 1970 looks rather equal ;-)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/infrastation,20,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-330819433,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,Clearly it does not make sense to print the packet length 2nd time inside ntp_time_print(). As far as I my basic understanding of NTP goes the same applies to both mode (client/server) and leap indicator. I am going to make respective fixes to the code in print-ntp.c within about an hour.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/infrastation,21,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-330857585,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"Alright, commit 4d42441 removes the duplicate output and updates the test output. @sjvudp, please try to organize your commits the same way.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/infrastation,22,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-330917906,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"For the avoidance of doubt, I didn't touch anything related to the 32-bit time_t effect as @guyharris has a more systematic solution in mind.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/guyharris,23,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-330937209,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"My guess is signed vs. unsigned interpretation of the time value.

time_t is signed in most UN*Xes, which means that, if it's 32-bit, it cannot represent times past 2038-01-19 03:14:07 UTC.  If it were unsigned, the limit would be 2106-02-07 06:28:15 UTC.
If you take an unsigned second-since-the-Epoch value for a date past 2038-01-19 03:14:07 UTC but not past 2106-02-07 06:28:15 UTC, and put it into a 32-bit signed time_t, the result will have the uppermost bit set and will thus look like it's negative.
That's what's happening here.
What we probably should do is either:


on platforms with a 32-bit time_t, treat time values more than 2^31-1 as unrepresentable and print them as such


have our own gmtime() (and our own localtime(), e.g. using the IANA time zone code?) that handles 64-bit time stamp values, and use those for all packet time stamps.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/infrastation,24,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-330955766,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"As to the original purpose of this branch, I have just tried rebasing it on the current master branch again -- after you have added a merge commit for another series of commits based on one month old repository -- and I could not make it through the conflicts. So we are back to step 0 here.
Out of this large set of commits I will cherry-pick the .pcap files to add more tests -- by now it should be reasonably clear tests are useful. Then I will ask you once again to stop buffering new work, to stop branching and to stop merging (in other words, to stop complicating the matter) and then to prepare one first complete change that does one useful thing and updates the tests in the same commit. That change will have to be based on the current master branch.
If you can do that I can offer help reviewing that complete proposed change. If you cannot do that I cannot make it through so many commits, I am sorry but the amount of time I can spend on this is limited. As an additional way to improve this situation, please consider learning how to use git rebase and how to resolve rebase conflicts.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/guyharris,25,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-331034689,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"What we probably should do is either:


Treat the value from the packet as unsigned, convert it to 64-bit signed, subtract the 1900-to-1970 offset from it, stuff the result into a time_t, fail if that changes the value, otherwise hand that time_t to gmtime() and print that.

This seems to work; the time stamp in question is from 1957(!), and, with the change, it shows up as a 1957 date/time on both 32-bit and 64-bit platforms.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/infrastation,26,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-331096711,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"Now that you have explained it I realize it has to do with the conversions in Section 6 of RFC 5905 (much of which stems from the choice of 1900 as the epoch, but anyway).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/infrastation,27,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-331105898,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"@sjvudp, your 3 packet captures from this branch are now in the master branch, I am looking forward to reduce the amount of unmerged work as described above. Cheers!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/sjvudp,28,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-331187635,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"On the ""one useful thing"": I had made a local feature branch initially and then merged that ""non-ff"" locally, the committed. So You had the choice (assuming github has not problem with that) between the small commits that lead up to the result, or the one big diff. Unfortunately, and here starts the problem, you were picky about my renaming of bp to td when the underlying data type also had changed (the name of the function, too, BTW). You insisted on having the old name. That causes most of the merge failures for me. I'll retry...",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/sjvudp,29,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-332144768,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"I just pushed i3-NTP-mode6, a rebase of i2-NTP-mode6 originating at commit 42208e6a24.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/infrastation,30,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-332226100,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"Thank you, that's great news; I can make a look at the new branch later if nobody else is willing.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/sjvudp,31,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-332737476,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"Just in case you want to cherry-pick: If possibly do it chronologically, so another rebase will be easier for me at least.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/sjvudp,32,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-332879344,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,"For the curious: I just pushed (no pull request yet) branch i-NTP-EF (based on the top of this branch) that deals with parsing NTP Extension Fields. I could need some example packets for further development and testing... Unfortunately I won't have time the next two weeks, so don't hurry ;-)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/sjvudp,33,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-337635344,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,I just pushed another rebase (i4-NTP-mode6) based on commit 4943adfb5f2768c06ce08bcf402ec6d9dd226b3c.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,631,2017-09-08T10:32:03Z,2017-11-30T09:13:22Z,2017-11-30T09:13:22Z,CLOSED,False,1529,174,19,https://github.com/sjvudp,"Parse NTP mode 6 messages, detect mode 7 messages",97,[],https://github.com/the-tcpdump-group/tcpdump/pull/631,https://github.com/sjvudp,34,https://github.com/the-tcpdump-group/tcpdump/pull/631#issuecomment-348127488,This is a rebased branch corresponding to sjvudp:f-NTP-mode6 (pull request 625). This will obsolete pull request 625 (but maybe not its comments).,See pull request  657 (another rebase with some adjustments).,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,632,2017-09-12T14:15:38Z,2017-09-14T18:50:41Z,2017-09-14T18:50:54Z,MERGED,True,6,0,4,https://github.com/lunn,Print EIGRP when carried in IPv6,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/632,https://github.com/lunn,1,https://github.com/the-tcpdump-group/tcpdump/pull/632,"The EIGRP protocol can be carried in IPv4 or IPv6. The basic protocol
remains the same. So call the EIGRP dissector for IPv6 packets with
IPPROTO_EIGRP.","The EIGRP protocol can be carried in IPv4 or IPv6. The basic protocol
remains the same. So call the EIGRP dissector for IPv6 packets with
IPPROTO_EIGRP.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,632,2017-09-12T14:15:38Z,2017-09-14T18:50:41Z,2017-09-14T18:50:54Z,MERGED,True,6,0,4,https://github.com/lunn,Print EIGRP when carried in IPv6,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/632,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/632#issuecomment-328925285,"The EIGRP protocol can be carried in IPv4 or IPv6. The basic protocol
remains the same. So call the EIGRP dissector for IPv6 packets with
IPPROTO_EIGRP.",Have you got any sample capture for EIGRP in IPv6?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,632,2017-09-12T14:15:38Z,2017-09-14T18:50:41Z,2017-09-14T18:50:54Z,MERGED,True,6,0,4,https://github.com/lunn,Print EIGRP when carried in IPv6,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/632,https://github.com/lunn,3,https://github.com/the-tcpdump-group/tcpdump/pull/632#issuecomment-328936315,"The EIGRP protocol can be carried in IPv4 or IPv6. The basic protocol
remains the same. So call the EIGRP dissector for IPv6 packets with
IPPROTO_EIGRP.",I can capture some.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,632,2017-09-12T14:15:38Z,2017-09-14T18:50:41Z,2017-09-14T18:50:54Z,MERGED,True,6,0,4,https://github.com/lunn,Print EIGRP when carried in IPv6,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/632,https://github.com/lunn,4,https://github.com/the-tcpdump-group/tcpdump/pull/632#issuecomment-328939678,"The EIGRP protocol can be carried in IPv4 or IPv6. The basic protocol
remains the same. So call the EIGRP dissector for IPv6 packets with
IPPROTO_EIGRP.",ipv6-eigrp.pcap.zip,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,632,2017-09-12T14:15:38Z,2017-09-14T18:50:41Z,2017-09-14T18:50:54Z,MERGED,True,6,0,4,https://github.com/lunn,Print EIGRP when carried in IPv6,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/632,https://github.com/mcr,5,https://github.com/the-tcpdump-group/tcpdump/pull/632#issuecomment-328973361,"The EIGRP protocol can be carried in IPv4 or IPv6. The basic protocol
remains the same. So call the EIGRP dissector for IPv6 packets with
IPPROTO_EIGRP.","Andrew Lunn <notifications@github.com> wrote:
 ipv6-eigrp.pcap.zip

Yes, but please add it to tests/ and TESTLIST and capture and read the output and
make sure it make sense, and make sure ""make check"" works.
…
--
]               Never tell me the odds!                 | ipv6 mesh networks [
]   Michael Richardson, Sandelman Software Works        | network architect  [
]     mcr@sandelman.ca  http://www.sandelman.ca/        |   ruby on rails    [",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,632,2017-09-12T14:15:38Z,2017-09-14T18:50:41Z,2017-09-14T18:50:54Z,MERGED,True,6,0,4,https://github.com/lunn,Print EIGRP when carried in IPv6,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/632,https://github.com/infrastation,6,https://github.com/the-tcpdump-group/tcpdump/pull/632#issuecomment-329575503,"The EIGRP protocol can be carried in IPv4 or IPv6. The basic protocol
remains the same. So call the EIGRP dissector for IPv6 packets with
IPPROTO_EIGRP.",Thank you!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,634,2017-09-19T14:29:11Z,2017-09-19T14:41:44Z,2017-09-19T14:41:51Z,MERGED,True,1,1,1,https://github.com/komamitsu,"Fix typo ""tcp-act"" in manpage",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/634,https://github.com/komamitsu,1,https://github.com/the-tcpdump-group/tcpdump/pull/634,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,634,2017-09-19T14:29:11Z,2017-09-19T14:41:44Z,2017-09-19T14:41:51Z,MERGED,True,1,1,1,https://github.com/komamitsu,"Fix typo ""tcp-act"" in manpage",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/634,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/634#issuecomment-330561911,,Thank you.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,635,2017-09-28T07:19:36Z,2017-09-28T16:25:22Z,2017-09-28T16:25:22Z,MERGED,True,22,5,2,https://github.com/sjvudp,Improve CONTRIBUTING (sample.pcap),2,[],https://github.com/the-tcpdump-group/tcpdump/pull/635,https://github.com/sjvudp,1,https://github.com/the-tcpdump-group/tcpdump/pull/635,"Improve ""6) Add/update sample.pcap files"" in CONTRIBUTING, provide and suggest using update-test.sh in CONTRIBUTING.","Improve ""6) Add/update sample.pcap files"" in CONTRIBUTING, provide and suggest using update-test.sh in CONTRIBUTING.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,636,2017-10-03T19:04:27Z,2018-08-03T13:29:42Z,2018-08-14T07:32:51Z,MERGED,True,98,0,4,https://github.com/herwinw,Added RADIUS attributes from RFC 5447,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/636,https://github.com/herwinw,1,https://github.com/the-tcpdump-group/tcpdump/pull/636,"MIP6-Feature-Vector (124) (with extra attributes from RFC 6572)
MIP6-Home-Link-Prefix (125)

A few points for possible improvements:

The bitmap code could probably be made more generic, there's nothing specific for RADIUS in that
The output is pretty ugly, it would be nicer if we would print the hex value, and add the translations if an extra ""-v"" is given. I could use some pointers on how to do that.","MIP6-Feature-Vector (124) (with extra attributes from RFC 6572)
MIP6-Home-Link-Prefix (125)

A few points for possible improvements:

The bitmap code could probably be made more generic, there's nothing specific for RADIUS in that
The output is pretty ugly, it would be nicer if we would print the hex value, and add the translations if an extra ""-v"" is given. I could use some pointers on how to do that.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,636,2017-10-03T19:04:27Z,2018-08-03T13:29:42Z,2018-08-14T07:32:51Z,MERGED,True,98,0,4,https://github.com/herwinw,Added RADIUS attributes from RFC 5447,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/636,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/636#issuecomment-362084330,"MIP6-Feature-Vector (124) (with extra attributes from RFC 6572)
MIP6-Home-Link-Prefix (125)

A few points for possible improvements:

The bitmap code could probably be made more generic, there's nothing specific for RADIUS in that
The output is pretty ugly, it would be nicer if we would print the hex value, and add the translations if an extra ""-v"" is given. I could use some pointers on how to do that.",Could you rebase this change on the current master branch and make use of the current EXTRACT_ macros instead of the old ones?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,636,2017-10-03T19:04:27Z,2018-08-03T13:29:42Z,2018-08-14T07:32:51Z,MERGED,True,98,0,4,https://github.com/herwinw,Added RADIUS attributes from RFC 5447,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/636,https://github.com/herwinw,3,https://github.com/the-tcpdump-group/tcpdump/pull/636#issuecomment-388328433,"MIP6-Feature-Vector (124) (with extra attributes from RFC 6572)
MIP6-Home-Link-Prefix (125)

A few points for possible improvements:

The bitmap code could probably be made more generic, there's nothing specific for RADIUS in that
The output is pretty ugly, it would be nicer if we would print the hex value, and add the translations if an extra ""-v"" is given. I could use some pointers on how to do that.","Rebased, it should work again",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,636,2017-10-03T19:04:27Z,2018-08-03T13:29:42Z,2018-08-14T07:32:51Z,MERGED,True,98,0,4,https://github.com/herwinw,Added RADIUS attributes from RFC 5447,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/636,https://github.com/herwinw,4,https://github.com/the-tcpdump-group/tcpdump/pull/636#issuecomment-409943704,"MIP6-Feature-Vector (124) (with extra attributes from RFC 6572)
MIP6-Home-Link-Prefix (125)

A few points for possible improvements:

The bitmap code could probably be made more generic, there's nothing specific for RADIUS in that
The output is pretty ugly, it would be nicer if we would print the hex value, and add the translations if an extra ""-v"" is given. I could use some pointers on how to do that.",All issues have been addressed.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,636,2017-10-03T19:04:27Z,2018-08-03T13:29:42Z,2018-08-14T07:32:51Z,MERGED,True,98,0,4,https://github.com/herwinw,Added RADIUS attributes from RFC 5447,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/636,https://github.com/infrastation,5,https://github.com/the-tcpdump-group/tcpdump/pull/636#issuecomment-409998315,"MIP6-Feature-Vector (124) (with extra attributes from RFC 6572)
MIP6-Home-Link-Prefix (125)

A few points for possible improvements:

The bitmap code could probably be made more generic, there's nothing specific for RADIUS in that
The output is pretty ugly, it would be nicer if we would print the hex value, and add the translations if an extra ""-v"" is given. I could use some pointers on how to do that.","---- On Thu, 02 Aug 2018 15:06:50 +0100 Herwin ***@***.*** wrote ----
 @herwinw commented on this pull request.
 In print-radius.c:

 @@ -569,6 +597,8 @@ static struct attrtype { { ""Digest-HA1"", NULL, 0, 0, print_attr_string }, { ""SIP-AOR"", NULL, 0, 0, print_attr_string }, { ""Delegated-IPv6-Prefix"", NULL, 0, 0, print_attr_netmask6 },+ { ""MIP6-Feature-Vector"", NULL, 0, 0, print_attr_vector64 },+ { ""MIP6-Home-Link-Prefix"", NULL, 0, 0, print_attr_netmask6 }, fun fact: freeradius and wireshark both use the same format as Framed-IPv6-Prefix and Delegated-IPv6-Prefix for this structure. This might require some ""be liberal in what you accept"" to make it work.
The IANA RADIUS Types registry currently lists 6 types with the ""ipv6prefix"" type:
```
170 Route-IPv6-Information [RFC6911]
152 PMIP6-Visited-HN-Prefix [RFC6572]
151 PMIP6-Home-HN-Prefix [RFC6572]
125 MIP6-Home-Link-Prefix [RFC5447]
123 Delegated-IPv6-Prefix [RFC4818]
97 Framed-IPv6-Prefix [RFC3162]
```
The type 125 (MIP6-Home-Link-Prefix) is the only one that has the encoding clearly different from the rest. This is how RFC 5447 defines it, and the current list of errata for this RFC does not concern this difference, which looks intentional as Section 4.2.4 of the spec says: ""The MIP6-Home-Link-Prefix AVP (AVP Code 125) is of type OctetString"" and the IANA Considerations section does not mention the type explicitly.

It looks like the allocation in the IANA registry was done incorrectly for type 125, perhaps because the attribute has ""prefix"" in its name. Then, if the authors of respective Wireshark and FreeRADIUS code took the attribute type from the registry and did not check it thoroughly in RFC 5447, that would explain why that code (incorrectly) handles MIP6-Home-Link-Prefix as an IPv6 prefix attribute (whereas it is OctetString) -- it just copies the error in the registry allocation.

I do not see a good way to accept both encodings for this attribute, given the way each encoding is defined. Are you aware of any other code that has copied this error, especially in the network devices firmware?
…
-- 
    Denis Ovsienko",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,636,2017-10-03T19:04:27Z,2018-08-03T13:29:42Z,2018-08-14T07:32:51Z,MERGED,True,98,0,4,https://github.com/herwinw,Added RADIUS attributes from RFC 5447,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/636,https://github.com/infrastation,6,https://github.com/the-tcpdump-group/tcpdump/pull/636#issuecomment-410006543,"MIP6-Feature-Vector (124) (with extra attributes from RFC 6572)
MIP6-Home-Link-Prefix (125)

A few points for possible improvements:

The bitmap code could probably be made more generic, there's nothing specific for RADIUS in that
The output is pretty ugly, it would be nicer if we would print the hex value, and add the translations if an extra ""-v"" is given. I could use some pointers on how to do that.","Other than the previous comment, which may need to be addressed elsewhere, this pull request now looks much better and may be ready for merging. Thank you for making the fixes quickly. I just need to proof-read it another time to make sure everything is OK.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,636,2017-10-03T19:04:27Z,2018-08-03T13:29:42Z,2018-08-14T07:32:51Z,MERGED,True,98,0,4,https://github.com/herwinw,Added RADIUS attributes from RFC 5447,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/636,https://github.com/guyharris,7,https://github.com/the-tcpdump-group/tcpdump/pull/636#issuecomment-410133075,"MIP6-Feature-Vector (124) (with extra attributes from RFC 6572)
MIP6-Home-Link-Prefix (125)

A few points for possible improvements:

The bitmap code could probably be made more generic, there's nothing specific for RADIUS in that
The output is pretty ugly, it would be nicer if we would print the hex value, and add the translations if an extra ""-v"" is given. I could use some pointers on how to do that.","""Email replies do not support Markdown""

As far as I'm concerned, GitHub doesn't support email replies; one comment from herwinw didn't make it to the comment list, and Denis' response was mangled because, I guess, it was an email reply, and ""Email replies do not support Markdown"", and I was unable to fix it.
Anyway:

fun fact: freeradius and wireshark both use the same format as Framed-IPv6-Prefix and Delegated-IPv6-Prefix for this structure.

Fun fact: Wireshark uses FreeRADIUS dictionary files to parse most RADIUS attributes, including MIP6-Home-Link-Prefix, so that shouldn't be a surprise. :-)

The type 125 (MIP6-Home-Link-Prefix) is the only one that has the encoding clearly different from the rest. This is how RFC 5447 defines it, and the current list of errata for this RFC does not concern this difference, which looks intentional as Section 4.2.4 of the spec says: ""The MIP6-Home-Link-Prefix AVP (AVP Code 125) is of type OctetString"" and the IANA Considerations section does not mention the type explicitly.

Delegated-IPv6-Prefix is defined by RFC 4818 section 3 to have a reserved 0 octet, followed by a prefix length, followed by up to 16 octets of prefix.  I presume the reserved octet is to put the (up to) 16 octets of prefix on a 4-octet boundary.
MIP6-Home-Link-Prefix is defined by RFC 5447 section 4.2.4 as having one octet of prefix length, followed by exactly 16 octets of prefix.  Why they didn't just use the same format as Delegated-IPv6-Prefix, I don't know.

Are you aware of any other code that has copied this error, especially in the network devices firmware?

If the answer is ""no"", and no FreeRADIUS server ever puts out packets in that format, at a minimum, Wireshark should be fixed either to just treat the field as raw octets or to add an additional radius_ field type, mip6_home_link_prefix or whatever, and to modify its copy of the FreeRADIUS dictionary dictionary.rfc5447 file to that field type.  Ideally, somebody should report this to the FreeRADIUS developers and see what they do with it.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,636,2017-10-03T19:04:27Z,2018-08-03T13:29:42Z,2018-08-14T07:32:51Z,MERGED,True,98,0,4,https://github.com/herwinw,Added RADIUS attributes from RFC 5447,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/636,https://github.com/guyharris,8,https://github.com/the-tcpdump-group/tcpdump/pull/636#issuecomment-410133980,"MIP6-Feature-Vector (124) (with extra attributes from RFC 6572)
MIP6-Home-Link-Prefix (125)

A few points for possible improvements:

The bitmap code could probably be made more generic, there's nothing specific for RADIUS in that
The output is pretty ugly, it would be nicer if we would print the hex value, and add the translations if an extra ""-v"" is given. I could use some pointers on how to do that.","I do not see a good way to accept both encodings for this attribute, given the way each encoding is defined.

If all else fails, and there really are network hosts that use both formats, I guess a heuristic to distinguish between them might be:

if the first octet of the attribute value is not 0, it's probably in MIP6-Home-Link-Prefix format (as that's not a valid ""reserved"" field);
if the first octet of the attribute is 0, and the value is exactly 17 octets long, and the second octet corresponds to a valid prefix length that would be appropriate for a 120-bit to 127-bit prefix, it's possibly in Delegated-IPv6-Prefix format and possibly in MIP6-Home-Link-Prefix;
otherwise, it's probably in Delegated-IPv6-Prefix format.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,636,2017-10-03T19:04:27Z,2018-08-03T13:29:42Z,2018-08-14T07:32:51Z,MERGED,True,98,0,4,https://github.com/herwinw,Added RADIUS attributes from RFC 5447,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/636,https://github.com/guyharris,9,https://github.com/the-tcpdump-group/tcpdump/pull/636#issuecomment-410140535,"MIP6-Feature-Vector (124) (with extra attributes from RFC 6572)
MIP6-Home-Link-Prefix (125)

A few points for possible improvements:

The bitmap code could probably be made more generic, there's nothing specific for RADIUS in that
The output is pretty ugly, it would be nicer if we would print the hex value, and add the translations if an extra ""-v"" is given. I could use some pointers on how to do that.","Ideally, somebody should report this to the FreeRADIUS developers

Somebody did: FreeRADIUS/freeradius-server#2269

and see what they do with it.

They fixed it in the dictionary, making it just an octet-string (which means that, if Wireshark picks up this change, it will probably just dump it as raw octets).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,636,2017-10-03T19:04:27Z,2018-08-03T13:29:42Z,2018-08-14T07:32:51Z,MERGED,True,98,0,4,https://github.com/herwinw,Added RADIUS attributes from RFC 5447,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/636,https://github.com/guyharris,10,https://github.com/the-tcpdump-group/tcpdump/pull/636#issuecomment-410142572,"MIP6-Feature-Vector (124) (with extra attributes from RFC 6572)
MIP6-Home-Link-Prefix (125)

A few points for possible improvements:

The bitmap code could probably be made more generic, there's nothing specific for RADIUS in that
The output is pretty ugly, it would be nicer if we would print the hex value, and add the translations if an extra ""-v"" is given. I could use some pointers on how to do that.","if Wireshark picks up this change,

It just did, with backports to the 2.6.x, 2.4.x, and 2.2.x branches, so the next 2.6.x, 2.4.x, and 2.2.x Wireshark releases will have the fix.
So tcpdump should either print it as 17 octets or treat the first octet as a prefix length and the next 16 octets as the octets of the prefix.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,636,2017-10-03T19:04:27Z,2018-08-03T13:29:42Z,2018-08-14T07:32:51Z,MERGED,True,98,0,4,https://github.com/herwinw,Added RADIUS attributes from RFC 5447,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/636,https://github.com/herwinw,11,https://github.com/the-tcpdump-group/tcpdump/pull/636#issuecomment-410196423,"MIP6-Feature-Vector (124) (with extra attributes from RFC 6572)
MIP6-Home-Link-Prefix (125)

A few points for possible improvements:

The bitmap code could probably be made more generic, there's nothing specific for RADIUS in that
The output is pretty ugly, it would be nicer if we would print the hex value, and add the translations if an extra ""-v"" is given. I could use some pointers on how to do that.","So tcpdump should either print it as 17 octets or treat the first octet as a prefix length and the next 16 octets as the octets of the prefix.

The patch was updated to print the ipv6 address/prefix (commit cfbc7a6)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,636,2017-10-03T19:04:27Z,2018-08-03T13:29:42Z,2018-08-14T07:32:51Z,MERGED,True,98,0,4,https://github.com/herwinw,Added RADIUS attributes from RFC 5447,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/636,https://github.com/infrastation,12,https://github.com/the-tcpdump-group/tcpdump/pull/636#issuecomment-410214160,"MIP6-Feature-Vector (124) (with extra attributes from RFC 6572)
MIP6-Home-Link-Prefix (125)

A few points for possible improvements:

The bitmap code could probably be made more generic, there's nothing specific for RADIUS in that
The output is pretty ugly, it would be nicer if we would print the hex value, and add the translations if an extra ""-v"" is given. I could use some pointers on how to do that.","Thank you guys for the input and for propagating the related bug fixes. I have rebased this pull request branch on the latest master and squashed Herwin's commits into one to eliminate the space for error if someone decides to cherry-pick this change to another branch later.
In the initial comment you write you wanted to print the 64-bit bitmap value and/or make bit-wise decoding conditional, the former can easily be done with PRIx64 if you still want. Otherwise this pull request is good enough for merging, please update if you are OK to contribute it as is now or have any pending improvements.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,636,2017-10-03T19:04:27Z,2018-08-03T13:29:42Z,2018-08-14T07:32:51Z,MERGED,True,98,0,4,https://github.com/herwinw,Added RADIUS attributes from RFC 5447,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/636,https://github.com/herwinw,13,https://github.com/the-tcpdump-group/tcpdump/pull/636#issuecomment-410239497,"MIP6-Feature-Vector (124) (with extra attributes from RFC 6572)
MIP6-Home-Link-Prefix (125)

A few points for possible improvements:

The bitmap code could probably be made more generic, there's nothing specific for RADIUS in that
The output is pretty ugly, it would be nicer if we would print the hex value, and add the translations if an extra ""-v"" is given. I could use some pointers on how to do that.","In the initial comment you write you wanted to print the 64-bit bitmap value and/or make bit-wise decoding conditional, the former can easily be done with PRIx64 if you still want. Otherwise this pull request is good enough for merging, please update if you are OK to contribute it as is now or have any pending improvements.

I'll consider that a future work",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,636,2017-10-03T19:04:27Z,2018-08-03T13:29:42Z,2018-08-14T07:32:51Z,MERGED,True,98,0,4,https://github.com/herwinw,Added RADIUS attributes from RFC 5447,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/636,https://github.com/infrastation,14,https://github.com/the-tcpdump-group/tcpdump/pull/636#issuecomment-410253486,"MIP6-Feature-Vector (124) (with extra attributes from RFC 6572)
MIP6-Home-Link-Prefix (125)

A few points for possible improvements:

The bitmap code could probably be made more generic, there's nothing specific for RADIUS in that
The output is pretty ugly, it would be nicer if we would print the hex value, and add the translations if an extra ""-v"" is given. I could use some pointers on how to do that.","Merged, thank you!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,636,2017-10-03T19:04:27Z,2018-08-03T13:29:42Z,2018-08-14T07:32:51Z,MERGED,True,98,0,4,https://github.com/herwinw,Added RADIUS attributes from RFC 5447,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/636,https://github.com/infrastation,15,https://github.com/the-tcpdump-group/tcpdump/pull/636#issuecomment-410689227,"MIP6-Feature-Vector (124) (with extra attributes from RFC 6572)
MIP6-Home-Link-Prefix (125)

A few points for possible improvements:

The bitmap code could probably be made more generic, there's nothing specific for RADIUS in that
The output is pretty ugly, it would be nicer if we would print the hex value, and add the translations if an extra ""-v"" is given. I could use some pointers on how to do that.","A follow-up: MIP6-Feature-Vector is Unsigned64 in RFC 5447, but OctetString in the IANA registry. The code in this pull request implements Unsigned64, so does not require a change. I have raised both attributes with the DiME working group and IANA asking to review and fix the types in the registry.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,636,2017-10-03T19:04:27Z,2018-08-03T13:29:42Z,2018-08-14T07:32:51Z,MERGED,True,98,0,4,https://github.com/herwinw,Added RADIUS attributes from RFC 5447,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/636,https://github.com/infrastation,16,https://github.com/the-tcpdump-group/tcpdump/pull/636#issuecomment-412781289,"MIP6-Feature-Vector (124) (with extra attributes from RFC 6572)
MIP6-Home-Link-Prefix (125)

A few points for possible improvements:

The bitmap code could probably be made more generic, there's nothing specific for RADIUS in that
The output is pretty ugly, it would be nicer if we would print the hex value, and add the translations if an extra ""-v"" is given. I could use some pointers on how to do that.",The IANA Radius Types registry now lists attributes 124 and 125 with correct types: https://www.ietf.org/mail-archive/web/dime/current/msg09452.html,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,641,2017-10-25T00:09:46Z,2017-10-25T07:12:02Z,2017-10-25T09:47:34Z,MERGED,True,234,1,7,https://github.com/sgeto,Made up for missing getservent() and endservent(),4,[],https://github.com/the-tcpdump-group/tcpdump/pull/641,https://github.com/sgeto,1,https://github.com/the-tcpdump-group/tcpdump/pull/641,"As discussed earlier in issue #640. I eventually went with a mix of C and D to remove some useless files/functions and because simply replacing a few defines/parameter didn't really work.
I tried to keep it as universal as possible so that platforms other than windows (who don't have this) can use it as too and so that it won't take too much effort to make it (possibly someday) read other files as well.
It currently reads %SYSTEMROOT%\System32\drivers\etc\services ($PREFIX/etc/services if not win32) and falls back to read just [same directory as tcpdump]\services (/etc/services).
Maybe it should be the other way around, allowing user to supply their own services database, since the default one on windows is quite limited (280 entries).","As discussed earlier in issue #640. I eventually went with a mix of C and D to remove some useless files/functions and because simply replacing a few defines/parameter didn't really work.
I tried to keep it as universal as possible so that platforms other than windows (who don't have this) can use it as too and so that it won't take too much effort to make it (possibly someday) read other files as well.
It currently reads %SYSTEMROOT%\System32\drivers\etc\services ($PREFIX/etc/services if not win32) and falls back to read just [same directory as tcpdump]\services (/etc/services).
Maybe it should be the other way around, allowing user to supply their own services database, since the default one on windows is quite limited (280 entries).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,642,2017-11-05T22:51:03Z,2017-11-06T00:58:43Z,2017-11-06T00:58:43Z,MERGED,True,9,1,3,https://github.com/sgeto,improved check for ipv6 support on windows (autotools),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/642,https://github.com/sgeto,1,https://github.com/the-tcpdump-group/tcpdump/pull/642,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,643,2017-11-12T12:04:44Z,2017-11-12T21:33:09Z,2017-11-12T21:33:10Z,CLOSED,False,22,19,4,https://github.com/sgeto,An alternative check for alarm(),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/643,https://github.com/sgeto,1,https://github.com/the-tcpdump-group/tcpdump/pull/643,"MinGW's alarm() implementation is a stub and its declaration is guarded.
The current check does not verify whether alarm() is usable.
This one doesn't either, but at least it checks whether it is declared in the default include files, which I think is, at least in this case, a more reliable test.
https://www.gnu.org/software/autoconf/manual/autoconf-2.65/html_node/Generic-Declarations.html","MinGW's alarm() implementation is a stub and its declaration is guarded.
The current check does not verify whether alarm() is usable.
This one doesn't either, but at least it checks whether it is declared in the default include files, which I think is, at least in this case, a more reliable test.
https://www.gnu.org/software/autoconf/manual/autoconf-2.65/html_node/Generic-Declarations.html",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,643,2017-11-12T12:04:44Z,2017-11-12T21:33:09Z,2017-11-12T21:33:10Z,CLOSED,False,22,19,4,https://github.com/sgeto,An alternative check for alarm(),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/643,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/643#issuecomment-343755833,"MinGW's alarm() implementation is a stub and its declaration is guarded.
The current check does not verify whether alarm() is usable.
This one doesn't either, but at least it checks whether it is declared in the default include files, which I think is, at least in this case, a more reliable test.
https://www.gnu.org/software/autoconf/manual/autoconf-2.65/html_node/Generic-Declarations.html","Is
#ifndef _WIN32

an even better check for alarm()?  If it's Windows, we presumably have the multimedia timer stuff, and don't need alarm(); if it's not Windows, it's UN*X (if somebody wants us to support something that's neither of them, they'll have to contribute support that checks for it), and it has alarm() (if not, then ""1978 called, they want their UNIX back"").",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,643,2017-11-12T12:04:44Z,2017-11-12T21:33:09Z,2017-11-12T21:33:10Z,CLOSED,False,22,19,4,https://github.com/sgeto,An alternative check for alarm(),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/643,https://github.com/guyharris,3,https://github.com/the-tcpdump-group/tcpdump/pull/643#issuecomment-343769734,"MinGW's alarm() implementation is a stub and its declaration is guarded.
The current check does not verify whether alarm() is usable.
This one doesn't either, but at least it checks whether it is declared in the default include files, which I think is, at least in this case, a more reliable test.
https://www.gnu.org/software/autoconf/manual/autoconf-2.65/html_node/Generic-Declarations.html","If it's Windows, we presumably have the multimedia timer stuff, and don't need alarm(); if it's not Windows, it's UN*X (if somebody wants us to support something that's neither of them, they'll have to contribute support that checks for it), and it has alarm() (if not, then ""1978 called, they want their UNIX back"").

Done in 20af937.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,644,2017-11-12T12:22:28Z,2017-11-12T20:35:31Z,2017-11-12T20:35:31Z,CLOSED,False,1,1,1,https://github.com/sgeto,Use WDversion only when building windump,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/644,https://github.com/sgeto,1,https://github.com/the-tcpdump-group/tcpdump/pull/644,"...with the project files in tcpdump\win32\prj.
This is achieved by checking whether WPCAP is true, which is only defined in tcpdump\win32\prj\WinDump.vcproj.","...with the project files in tcpdump\win32\prj.
This is achieved by checking whether WPCAP is true, which is only defined in tcpdump\win32\prj\WinDump.vcproj.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,644,2017-11-12T12:22:28Z,2017-11-12T20:35:31Z,2017-11-12T20:35:31Z,CLOSED,False,1,1,1,https://github.com/sgeto,Use WDversion only when building windump,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/644,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/644#issuecomment-343756477,"...with the project files in tcpdump\win32\prj.
This is achieved by checking whether WPCAP is true, which is only defined in tcpdump\win32\prj\WinDump.vcproj.","If we have a sufficiently recent libpcap, we should use pcap_lib_version() to get the libpcap version, whether we're on Windows or UN*X.  WinPcap 4.1.2 has pcap_lib_version(), according to its list of exported functions, and that may be true of at least some earlier versions.
tcpdump doesn't use WDversion[] at all, so there's no reason to define it; the same applies to version[] and Wpcap_version[].
For pcap_version[], we don't need it if we have pcap_lib_version(), and we don't have it if HAVE_PCAP_VERSION isn't defined, so we should ignore it if HAVE_PCAP_LIB_VERSION is defined, and use it otherwise, and if HAVE_PCAP_VERSION isn't defined, define it ourselves, as ""unknown"".",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,644,2017-11-12T12:22:28Z,2017-11-12T20:35:31Z,2017-11-12T20:35:31Z,CLOSED,False,1,1,1,https://github.com/sgeto,Use WDversion only when building windump,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/644,https://github.com/guyharris,3,https://github.com/the-tcpdump-group/tcpdump/pull/644#issuecomment-343765562,"...with the project files in tcpdump\win32\prj.
This is achieved by checking whether WPCAP is true, which is only defined in tcpdump\win32\prj\WinDump.vcproj.","tcpdump doesn't use WDversion[] at all, so there's no reason to define it; the same applies to version[] and Wpcap_version[].
For pcap_version[], we don't need it if we have pcap_lib_version(), and we don't have it if HAVE_PCAP_VERSION isn't defined, so we should ignore it if HAVE_PCAP_LIB_VERSION is defined, and use it otherwise, and if HAVE_PCAP_VERSION isn't defined, define it ourselves, as ""unknown"".

Done in c8ccf8b.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,646,2017-11-13T01:28:19Z,2017-11-13T02:05:32Z,2017-11-13T17:24:49Z,CLOSED,False,14,0,3,https://github.com/sgeto,Use the Windows Multimedia Timer,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/646,https://github.com/sgeto,1,https://github.com/the-tcpdump-group/tcpdump/pull/646,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,646,2017-11-13T01:28:19Z,2017-11-13T02:05:32Z,2017-11-13T17:24:49Z,CLOSED,False,14,0,3,https://github.com/sgeto,Use the Windows Multimedia Timer,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/646,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/646#issuecomment-343790536,,Might as well just unconditionally use it on Windows regardless of what build system we use.  Done in eedd51f.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,646,2017-11-13T01:28:19Z,2017-11-13T02:05:32Z,2017-11-13T17:24:49Z,CLOSED,False,14,0,3,https://github.com/sgeto,Use the Windows Multimedia Timer,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/646,https://github.com/sgeto,3,https://github.com/the-tcpdump-group/tcpdump/pull/646#issuecomment-343793591,,okay but the multimedia timer depends on winmm and all of tcpdump on ws2_32,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,646,2017-11-13T01:28:19Z,2017-11-13T02:05:32Z,2017-11-13T17:24:49Z,CLOSED,False,14,0,3,https://github.com/sgeto,Use the Windows Multimedia Timer,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/646,https://github.com/guyharris,4,https://github.com/the-tcpdump-group/tcpdump/pull/646#issuecomment-343794780,,"okay but the multimedia timer depends on winmm

So what about using CreateTimerQueueTimer()?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,646,2017-11-13T01:28:19Z,2017-11-13T02:05:32Z,2017-11-13T17:24:49Z,CLOSED,False,14,0,3,https://github.com/sgeto,Use the Windows Multimedia Timer,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/646,https://github.com/guyharris,5,https://github.com/the-tcpdump-group/tcpdump/pull/646#issuecomment-343797362,,"So what about using CreateTimerQueueTimer()?

Done in bfb7669.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,646,2017-11-13T01:28:19Z,2017-11-13T02:05:32Z,2017-11-13T17:24:49Z,CLOSED,False,14,0,3,https://github.com/sgeto,Use the Windows Multimedia Timer,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/646,https://github.com/sgeto,6,https://github.com/the-tcpdump-group/tcpdump/pull/646#issuecomment-343797952,,"Hehe. You're fast...
What about winsock2. New PR?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,646,2017-11-13T01:28:19Z,2017-11-13T02:05:32Z,2017-11-13T17:24:49Z,CLOSED,False,14,0,3,https://github.com/sgeto,Use the Windows Multimedia Timer,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/646,https://github.com/sgeto,7,https://github.com/the-tcpdump-group/tcpdump/pull/646#issuecomment-343799504,,"Well that didn't work:
[Ali:~/projects/tcpdump] $ make
gcc -ffloat-store -DHAVE_CONFIG_H   -D_U_=""__attribute__((unused))"" -I. -IC:/msys64/mingw64/include  -I/usr/inet6/include -g -O2 -c ./tcpdump.c
./tcpdump.c:228:34: error: 'INVALID_HANDLE' undeclared here (not in a function); did you mean 'WSA_INVALID_HANDLE'?
     static HANDLE timer_handle = INVALID_HANDLE;
                                  ^~~~~~~~~~~~~~
                                  WSA_INVALID_HANDLE
In file included from C:/msys64/mingw64/x86_64-w64-mingw32/include/minwindef.h:163:0,
                 from C:/msys64/mingw64/x86_64-w64-mingw32/include/windef.h:8,
                 from C:/msys64/mingw64/x86_64-w64-mingw32/include/windows.h:69,
                 from C:/msys64/mingw64/x86_64-w64-mingw32/include/winsock2.h:23,
                 from ./netdissect-stdinc.h:163,
                 from ./tcpdump.c:58:
./tcpdump.c: In function 'main':
./tcpdump.c:2216:7: error: expected ')' before numeric constant
       WT_EXECUTEDEFAULT|WT_EXECUTELONGFUNCTION);
       ^
./tcpdump.c:2214:3: error: too few arguments to function 'CreateTimerQueueTimer'
   CreateTimerQueueTimer(&timer_handle, NULL,
   ^~~~~~~~~~~~~~~~~~~~~
In file included from C:/msys64/mingw64/x86_64-w64-mingw32/include/winbase.h:39:0,
                 from C:/msys64/mingw64/x86_64-w64-mingw32/include/windows.h:70,
                 from C:/msys64/mingw64/x86_64-w64-mingw32/include/winsock2.h:23,
                 from ./netdissect-stdinc.h:163,
                 from ./tcpdump.c:58:
C:/msys64/mingw64/x86_64-w64-mingw32/include/threadpoollegacyapiset.h:18:29: note: declared here
   WINBASEAPI WINBOOL WINAPI CreateTimerQueueTimer (PHANDLE phNewTimer, HANDLE TimerQueue, WAITORTIMERCALLBACK Callback, PVOID Parameter, DWORD DueTime, DWORD Period, ULONG Flags);
                             ^~~~~~~~~~~~~~~~~~~~~
make: *** [Makefile:71: tcpdump.o] Error 1
[Ali:~/projects/tcpdump] 2 $",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,646,2017-11-13T01:28:19Z,2017-11-13T02:05:32Z,2017-11-13T17:24:49Z,CLOSED,False,14,0,3,https://github.com/sgeto,Use the Windows Multimedia Timer,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/646,https://github.com/sgeto,8,https://github.com/the-tcpdump-group/tcpdump/pull/646#issuecomment-343803260,,You need to change INVALID_HANDLE to WSA_INVALID_HANDLE and add a comma after the second int (period) in CreateTimerQueueTimer().,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,646,2017-11-13T01:28:19Z,2017-11-13T02:05:32Z,2017-11-13T17:24:49Z,CLOSED,False,14,0,3,https://github.com/sgeto,Use the Windows Multimedia Timer,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/646,https://github.com/guyharris,9,https://github.com/the-tcpdump-group/tcpdump/pull/646#issuecomment-343843366,,"'INVALID_HANDLE' undeclared here

568927a",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,646,2017-11-13T01:28:19Z,2017-11-13T02:05:32Z,2017-11-13T17:24:49Z,CLOSED,False,14,0,3,https://github.com/sgeto,Use the Windows Multimedia Timer,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/646,https://github.com/guyharris,10,https://github.com/the-tcpdump-group/tcpdump/pull/646#issuecomment-343844166,,And 8f2cde6.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,646,2017-11-13T01:28:19Z,2017-11-13T02:05:32Z,2017-11-13T17:24:49Z,CLOSED,False,14,0,3,https://github.com/sgeto,Use the Windows Multimedia Timer,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/646,https://github.com/sgeto,11,https://github.com/the-tcpdump-group/tcpdump/pull/646#issuecomment-343992806,,"Including windows.h directly again :/
It's already there
In file included from C:/msys64/mingw64/x86_64-w64-mingw32/include/winbase.h:39:0,
                 from C:/msys64/mingw64/x86_64-w64-mingw32/include/windows.h:70,
                 from C:/msys64/mingw64/x86_64-w64-mingw32/include/winsock2.h:23,
                 from ./netdissect-stdinc.h:163,
                 from ./tcpdump.c:58:",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,647,2017-11-14T01:16:18Z,2017-11-14T02:43:59Z,2017-11-14T05:55:26Z,MERGED,True,39,38,1,https://github.com/sgeto,Some tweaks for AC_LBL_LIBPCAP,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/647,https://github.com/sgeto,1,https://github.com/the-tcpdump-group/tcpdump/pull/647,"I noticed that the ""additional-libs"" block in AC_LBL_LIBPCAP in never reached.
This ""fix"" should therefore help in adding any additional libs pcap depends on/was linked with to, LIBS (including ws2_32 on windows).
Heads up: I'm not sure if I indented correctly. I don't have syntax highlighting for m4. Sorry in advance.
I also only tried it on windows so let's see what travis has to say to this.","I noticed that the ""additional-libs"" block in AC_LBL_LIBPCAP in never reached.
This ""fix"" should therefore help in adding any additional libs pcap depends on/was linked with to, LIBS (including ws2_32 on windows).
Heads up: I'm not sure if I indented correctly. I don't have syntax highlighting for m4. Sorry in advance.
I also only tried it on windows so let's see what travis has to say to this.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,647,2017-11-14T01:16:18Z,2017-11-14T02:43:59Z,2017-11-14T05:55:26Z,MERGED,True,39,38,1,https://github.com/sgeto,Some tweaks for AC_LBL_LIBPCAP,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/647,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/647#issuecomment-344133180,"I noticed that the ""additional-libs"" block in AC_LBL_LIBPCAP in never reached.
This ""fix"" should therefore help in adding any additional libs pcap depends on/was linked with to, LIBS (including ws2_32 on windows).
Heads up: I'm not sure if I indented correctly. I don't have syntax highlighting for m4. Sorry in advance.
I also only tried it on windows so let's see what travis has to say to this.","I'm not sure if I indented correctly.

The indentation of AC_LBL_LIBPCAP was already a complete mess before your changes, so there's no need to worry about correctness.  I made that macro use 4-space indentation without tabs in 55e0de4.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,647,2017-11-14T01:16:18Z,2017-11-14T02:43:59Z,2017-11-14T05:55:26Z,MERGED,True,39,38,1,https://github.com/sgeto,Some tweaks for AC_LBL_LIBPCAP,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/647,https://github.com/sgeto,3,https://github.com/the-tcpdump-group/tcpdump/pull/647#issuecomment-344151119,"I noticed that the ""additional-libs"" block in AC_LBL_LIBPCAP in never reached.
This ""fix"" should therefore help in adding any additional libs pcap depends on/was linked with to, LIBS (including ws2_32 on windows).
Heads up: I'm not sure if I indented correctly. I don't have syntax highlighting for m4. Sorry in advance.
I also only tried it on windows so let's see what travis has to say to this.",I forgot to push the updated configure script. You need to regenerate.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,647,2017-11-14T01:16:18Z,2017-11-14T02:43:59Z,2017-11-14T05:55:26Z,MERGED,True,39,38,1,https://github.com/sgeto,Some tweaks for AC_LBL_LIBPCAP,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/647,https://github.com/guyharris,4,https://github.com/the-tcpdump-group/tcpdump/pull/647#issuecomment-344154327,"I noticed that the ""additional-libs"" block in AC_LBL_LIBPCAP in never reached.
This ""fix"" should therefore help in adding any additional libs pcap depends on/was linked with to, LIBS (including ws2_32 on windows).
Heads up: I'm not sure if I indented correctly. I don't have syntax highlighting for m4. Sorry in advance.
I also only tried it on windows so let's see what travis has to say to this.","I forgot to push the updated configure script. You need to regenerate.

I waited until after I re-indented: 768d80e.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,649,2017-11-15T23:57:13Z,2017-11-16T01:57:19Z,2017-11-16T01:57:19Z,MERGED,True,11,11,1,https://github.com/sgeto,Updates for getservent.c,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/649,https://github.com/sgeto,1,https://github.com/the-tcpdump-group/tcpdump/pull/649,"fixed none _WIN32 implementation
on windows, see if a services file exists in the same directory as tcpdump and use that","fixed none _WIN32 implementation
on windows, see if a services file exists in the same directory as tcpdump and use that",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,651,2017-11-18T21:32:07Z,,2021-11-21T17:41:22Z,OPEN,False,1,1,1,https://github.com/sgeto,Lowered the minimum length of second field in mkdep's awk command,1,"['bug', 'compiling']",https://github.com/the-tcpdump-group/tcpdump/pull/651,https://github.com/sgeto,1,https://github.com/the-tcpdump-group/tcpdump/pull/651,"The awk command that is run last as part of mkdep to remove duplicate lines doesn't work on my machine. It removes duplicate lines but leaves their backslashes \
This is an estimation of how I think this can be fixes/improved.
I think that the length of this field can vary so much from OS to OS, that the value set now is as arbitrary as the old one. Though a lower value may be a better choice.
Another way is to add a newline if the minimum length isn't met like so else rec = rec "" \n"" $2","The awk command that is run last as part of mkdep to remove duplicate lines doesn't work on my machine. It removes duplicate lines but leaves their backslashes \
This is an estimation of how I think this can be fixes/improved.
I think that the length of this field can vary so much from OS to OS, that the value set now is as arbitrary as the old one. Though a lower value may be a better choice.
Another way is to add a newline if the minimum length isn't met like so else rec = rec "" \n"" $2",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,651,2017-11-18T21:32:07Z,,2021-11-21T17:41:22Z,OPEN,False,1,1,1,https://github.com/sgeto,Lowered the minimum length of second field in mkdep's awk command,1,"['bug', 'compiling']",https://github.com/the-tcpdump-group/tcpdump/pull/651,https://github.com/sgeto,2,https://github.com/the-tcpdump-group/tcpdump/pull/651#issuecomment-345473201,"The awk command that is run last as part of mkdep to remove duplicate lines doesn't work on my machine. It removes duplicate lines but leaves their backslashes \
This is an estimation of how I think this can be fixes/improved.
I think that the length of this field can vary so much from OS to OS, that the value set now is as arbitrary as the old one. Though a lower value may be a better choice.
Another way is to add a newline if the minimum length isn't met like so else rec = rec "" \n"" $2","Boi, what a long title ...",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,651,2017-11-18T21:32:07Z,,2021-11-21T17:41:22Z,OPEN,False,1,1,1,https://github.com/sgeto,Lowered the minimum length of second field in mkdep's awk command,1,"['bug', 'compiling']",https://github.com/the-tcpdump-group/tcpdump/pull/651,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/651#issuecomment-844131934,"The awk command that is run last as part of mkdep to remove duplicate lines doesn't work on my machine. It removes duplicate lines but leaves their backslashes \
This is an estimation of how I think this can be fixes/improved.
I think that the length of this field can vary so much from OS to OS, that the value set now is as arbitrary as the old one. Though a lower value may be a better choice.
Another way is to add a newline if the minimum length isn't met like so else rec = rec "" \n"" $2",@sgeto Do you always have the problem on your machine?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,651,2017-11-18T21:32:07Z,,2021-11-21T17:41:22Z,OPEN,False,1,1,1,https://github.com/sgeto,Lowered the minimum length of second field in mkdep's awk command,1,"['bug', 'compiling']",https://github.com/the-tcpdump-group/tcpdump/pull/651,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/651#issuecomment-955806715,"The awk command that is run last as part of mkdep to remove duplicate lines doesn't work on my machine. It removes duplicate lines but leaves their backslashes \
This is an estimation of how I think this can be fixes/improved.
I think that the length of this field can vary so much from OS to OS, that the value set now is as arbitrary as the old one. Though a lower value may be a better choice.
Another way is to add a newline if the minimum length isn't met like so else rec = rec "" \n"" $2","@sgeto, could you please explain in detail how the problem reproduces?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,651,2017-11-18T21:32:07Z,,2021-11-21T17:41:22Z,OPEN,False,1,1,1,https://github.com/sgeto,Lowered the minimum length of second field in mkdep's awk command,1,"['bug', 'compiling']",https://github.com/the-tcpdump-group/tcpdump/pull/651,https://github.com/infrastation,5,https://github.com/the-tcpdump-group/tcpdump/pull/651#issuecomment-974862053,"The awk command that is run last as part of mkdep to remove duplicate lines doesn't work on my machine. It removes duplicate lines but leaves their backslashes \
This is an estimation of how I think this can be fixes/improved.
I think that the length of this field can vary so much from OS to OS, that the value set now is as arbitrary as the old one. Though a lower value may be a better choice.
Another way is to add a newline if the minimum length isn't met like so else rec = rec "" \n"" $2","Bug confirmed.
As far as I understand the awk code in mkdep, its purpose is to compress Makefile target dependencies as follows:
a.c: b.h
a.c: c.h

becomes
a.c: b.h c.h

When the same target has many dependencies, this may result in more than one compressed output line, each no longer than 78 characters. Other versions of this script from 1988 and 1993 use the same line length limit. In theory, reducing the maximum length should have only a cosmetic effect. In practice, the awk script indeed does not handle certain valid input correctly:
a.c: b.h \
 c.h \
 c.h

becomes
a.c: b.h \
 c.h \ 

In this case making the limit small enough short-circuits the logic and the output becomes less compressed, but valid. Reducing the limit would not be a valid solution, as the short-circuit depends on the length of the particular filename that triggers the bug. A proper fix would be fixing the logic of rule compression (or discarding the compression, as some other versions of mkdep have).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,652,2017-11-18T21:33:45Z,2021-11-22T15:22:35Z,2021-11-22T15:22:35Z,CLOSED,False,156,0,5,https://github.com/sgeto,A rc file and icon for tcpdump.exe,3,['windows'],https://github.com/the-tcpdump-group/tcpdump/pull/652,https://github.com/sgeto,1,https://github.com/the-tcpdump-group/tcpdump/pull/652,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,652,2017-11-18T21:33:45Z,2021-11-22T15:22:35Z,2021-11-22T15:22:35Z,CLOSED,False,156,0,5,https://github.com/sgeto,A rc file and icon for tcpdump.exe,3,['windows'],https://github.com/the-tcpdump-group/tcpdump/pull/652,https://github.com/gvanem,2,https://github.com/the-tcpdump-group/tcpdump/pull/652#issuecomment-345477293,,Only for the autotools?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,652,2017-11-18T21:33:45Z,2021-11-22T15:22:35Z,2021-11-22T15:22:35Z,CLOSED,False,156,0,5,https://github.com/sgeto,A rc file and icon for tcpdump.exe,3,['windows'],https://github.com/the-tcpdump-group/tcpdump/pull/652,https://github.com/sgeto,3,https://github.com/the-tcpdump-group/tcpdump/pull/652#issuecomment-345478655,,"Nah, I just thought to get the autotools/mingw stuff out of the way first.
With a handcrafted config.h you could try something like this for now:
rc.exe /nologo /i. /dPACKAGE_VERSION_WIN=4,10,0,0 /v tcpdump-rc.rc",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,652,2017-11-18T21:33:45Z,2021-11-22T15:22:35Z,2021-11-22T15:22:35Z,CLOSED,False,156,0,5,https://github.com/sgeto,A rc file and icon for tcpdump.exe,3,['windows'],https://github.com/the-tcpdump-group/tcpdump/pull/652,https://github.com/sgeto,4,https://github.com/the-tcpdump-group/tcpdump/pull/652#issuecomment-347989466,,ping!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,652,2017-11-18T21:33:45Z,2021-11-22T15:22:35Z,2021-11-22T15:22:35Z,CLOSED,False,156,0,5,https://github.com/sgeto,A rc file and icon for tcpdump.exe,3,['windows'],https://github.com/the-tcpdump-group/tcpdump/pull/652,https://github.com/sgeto,5,https://github.com/the-tcpdump-group/tcpdump/pull/652#issuecomment-350512942,,"These [merge] conflict are too complex to resolve in the web editor

Great 😑",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,652,2017-11-18T21:33:45Z,2021-11-22T15:22:35Z,2021-11-22T15:22:35Z,CLOSED,False,156,0,5,https://github.com/sgeto,A rc file and icon for tcpdump.exe,3,['windows'],https://github.com/the-tcpdump-group/tcpdump/pull/652,https://github.com/sgeto,6,https://github.com/the-tcpdump-group/tcpdump/pull/652#issuecomment-350519587,,Phew!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,652,2017-11-18T21:33:45Z,2021-11-22T15:22:35Z,2021-11-22T15:22:35Z,CLOSED,False,156,0,5,https://github.com/sgeto,A rc file and icon for tcpdump.exe,3,['windows'],https://github.com/the-tcpdump-group/tcpdump/pull/652,https://github.com/infrastation,7,https://github.com/the-tcpdump-group/tcpdump/pull/652#issuecomment-409484848,,"The tcpdump web-site needs a 16 by 16 pixels image for favicon.ico, I tried to resample the file from this pull request but at this size the resulting details did not look good. If you would like to make a web-site version of the proposed image yourself, feel free to contribute it through a pull request in tcpdump-htdocs.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,652,2017-11-18T21:33:45Z,2021-11-22T15:22:35Z,2021-11-22T15:22:35Z,CLOSED,False,156,0,5,https://github.com/sgeto,A rc file and icon for tcpdump.exe,3,['windows'],https://github.com/the-tcpdump-group/tcpdump/pull/652,https://github.com/sgeto,8,https://github.com/the-tcpdump-group/tcpdump/pull/652#issuecomment-409774635,,"I am afraid it can't be downsampled anymore without pixelating it too much.
Why don't you use it in its current resolution? I don't think there's a requirement to how big favicon.ico can be. Unless you trying to save space.
For comparism:",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,652,2017-11-18T21:33:45Z,2021-11-22T15:22:35Z,2021-11-22T15:22:35Z,CLOSED,False,156,0,5,https://github.com/sgeto,A rc file and icon for tcpdump.exe,3,['windows'],https://github.com/the-tcpdump-group/tcpdump/pull/652,https://github.com/infrastation,9,https://github.com/the-tcpdump-group/tcpdump/pull/652#issuecomment-409860129,,"Either it is an old-style 16 by 16 image, or it is a whole story, which I did not want to touch: https://stackoverflow.com/questions/4014823/does-a-favicon-have-to-be-32x32-or-16x16
Hence the suggestion from yesterday.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,652,2017-11-18T21:33:45Z,2021-11-22T15:22:35Z,2021-11-22T15:22:35Z,CLOSED,False,156,0,5,https://github.com/sgeto,A rc file and icon for tcpdump.exe,3,['windows'],https://github.com/the-tcpdump-group/tcpdump/pull/652,https://github.com/sgeto,10,https://github.com/the-tcpdump-group/tcpdump/pull/652#issuecomment-409862682,,"Yeah, that is a long story...
Unfortunately, I don't have much time for any of this right now.
Sorry.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,652,2017-11-18T21:33:45Z,2021-11-22T15:22:35Z,2021-11-22T15:22:35Z,CLOSED,False,156,0,5,https://github.com/sgeto,A rc file and icon for tcpdump.exe,3,['windows'],https://github.com/the-tcpdump-group/tcpdump/pull/652,https://github.com/infrastation,11,https://github.com/the-tcpdump-group/tcpdump/pull/652#issuecomment-409886517,,"No problem, that's not a priority.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,652,2017-11-18T21:33:45Z,2021-11-22T15:22:35Z,2021-11-22T15:22:35Z,CLOSED,False,156,0,5,https://github.com/sgeto,A rc file and icon for tcpdump.exe,3,['windows'],https://github.com/the-tcpdump-group/tcpdump/pull/652,https://github.com/infrastation,12,https://github.com/the-tcpdump-group/tcpdump/pull/652#issuecomment-955806266,,"@sgeto, the image is on the web site, thank you (the-tcpdump-group/tcpdump-htdocs@37f80e6). Would you prefer to rebase this pull request or to close it?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,652,2017-11-18T21:33:45Z,2021-11-22T15:22:35Z,2021-11-22T15:22:35Z,CLOSED,False,156,0,5,https://github.com/sgeto,A rc file and icon for tcpdump.exe,3,['windows'],https://github.com/the-tcpdump-group/tcpdump/pull/652,https://github.com/infrastation,13,https://github.com/the-tcpdump-group/tcpdump/pull/652#issuecomment-963052180,,"If anybody is willing to get these changes into shape (whether completely or specific parts), please update this pull request, otherwise it will be closed in 14 days.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,652,2017-11-18T21:33:45Z,2021-11-22T15:22:35Z,2021-11-22T15:22:35Z,CLOSED,False,156,0,5,https://github.com/sgeto,A rc file and icon for tcpdump.exe,3,['windows'],https://github.com/the-tcpdump-group/tcpdump/pull/652,https://github.com/fxlb,14,https://github.com/the-tcpdump-group/tcpdump/pull/652#issuecomment-963389288,,"To keep coherent the visual identity of the project, I propose this favicon for the web site:


:",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,652,2017-11-18T21:33:45Z,2021-11-22T15:22:35Z,2021-11-22T15:22:35Z,CLOSED,False,156,0,5,https://github.com/sgeto,A rc file and icon for tcpdump.exe,3,['windows'],https://github.com/the-tcpdump-group/tcpdump/pull/652,https://github.com/fxlb,15,https://github.com/the-tcpdump-group/tcpdump/pull/652#issuecomment-963521090,,Or this one (darker stethoscope):,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,652,2017-11-18T21:33:45Z,2021-11-22T15:22:35Z,2021-11-22T15:22:35Z,CLOSED,False,156,0,5,https://github.com/sgeto,A rc file and icon for tcpdump.exe,3,['windows'],https://github.com/the-tcpdump-group/tcpdump/pull/652,https://github.com/guyharris,16,https://github.com/the-tcpdump-group/tcpdump/pull/652#issuecomment-963591031,,Is it customary for command-line tools to have icons?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,652,2017-11-18T21:33:45Z,2021-11-22T15:22:35Z,2021-11-22T15:22:35Z,CLOSED,False,156,0,5,https://github.com/sgeto,A rc file and icon for tcpdump.exe,3,['windows'],https://github.com/the-tcpdump-group/tcpdump/pull/652,https://github.com/gvanem,17,https://github.com/the-tcpdump-group/tcpdump/pull/652#issuecomment-963929684,,"Is it customary for command-line tools to have icons?

Not really. But a resource-section is handy. One can see what features etc. a program has. Like from my custom tcpdump.rc:
F:\MingW32\src\inet\tcpdump\src> filever windump.exe
        Language        0x0409 (Engelsk (USA))
        CharSet         0x04b0 Unicode
        OleSelfRegister Disabled
        CompanyName     http://www.tcpdump.org/
        FileDescription Network Packet Analyser (MSVC)
        InternalName    windump
        OriginalFilenam windump.exe
        ProductName     windump.exe
        ProductVersion  5.0.0-PRE-GIT
        FileVersion     5.0.0-PRE-GIT release
        LegalCopyright  3-clause BSD licence:
                        http://www.opensource.org/licenses/BSD-3-Clause
        PrivateBuild    Private build by <gvanem@yahoo.no>
        SpecialBuild    With: AirPcap OpenSSL SMI library
        Comments        Build on 06-November-2021

        VS_FIXEDFILEINFO:
        Signature:      feef04bd
        Struc Ver:      00010000
        FileVer:        00050000:00000000 (5.0:0.0)
        ProdVer:        00050000:00000000 (5.0:0.0)
        FlagMask:       0000003f
        Flags:          00000000
        OS:             00000004 Win32
        FileType:       00000001 App
        SubType:        00000000
        FileDate:       00000000:00000000",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,652,2017-11-18T21:33:45Z,2021-11-22T15:22:35Z,2021-11-22T15:22:35Z,CLOSED,False,156,0,5,https://github.com/sgeto,A rc file and icon for tcpdump.exe,3,['windows'],https://github.com/the-tcpdump-group/tcpdump/pull/652,https://github.com/infrastation,18,https://github.com/the-tcpdump-group/tcpdump/pull/652#issuecomment-975636979,,"As far as personal perceptions of different 16*16 images go, the present version looks a bit better to me. That said, I can have peace of mind with Francois-Xavier's version being on the web site (or none at all), so if it really bothers you and gets in the way, feel free to go ahead and to replace the image.
As far as this pull request goes, nobody is willing to resume the work on the .rc file, hence closing.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,653,2017-11-19T01:00:33Z,2021-12-02T20:38:24Z,2021-12-02T20:38:25Z,CLOSED,False,4,0,1,https://github.com/sgeto,Made tests suite work with tcpdump.exe and msys build of Perl,1,['windows'],https://github.com/the-tcpdump-group/tcpdump/pull/653,https://github.com/sgeto,1,https://github.com/the-tcpdump-group/tcpdump/pull/653,"these 15 tests fail:
kday1-8
cve2015-0261_01
pcap-invalid-version-1
pcap-invalid-version-2
pcap-ng-invalid-vers-1
pcap-ng-invalid-vers-2
l2tp-avp-overflow
pktap-heap-overflow
How to interpret their exit code?
A log is attached.
test_results.txt","these 15 tests fail:
kday1-8
cve2015-0261_01
pcap-invalid-version-1
pcap-invalid-version-2
pcap-ng-invalid-vers-1
pcap-ng-invalid-vers-2
l2tp-avp-overflow
pktap-heap-overflow
How to interpret their exit code?
A log is attached.
test_results.txt",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,653,2017-11-19T01:00:33Z,2021-12-02T20:38:24Z,2021-12-02T20:38:25Z,CLOSED,False,4,0,1,https://github.com/sgeto,Made tests suite work with tcpdump.exe and msys build of Perl,1,['windows'],https://github.com/the-tcpdump-group/tcpdump/pull/653,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/653#issuecomment-633519141,"these 15 tests fail:
kday1-8
cve2015-0261_01
pcap-invalid-version-1
pcap-invalid-version-2
pcap-ng-invalid-vers-1
pcap-ng-invalid-vers-2
l2tp-avp-overflow
pktap-heap-overflow
How to interpret their exit code?
A log is attached.
test_results.txt",Needs to have the conflicts resolved.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,653,2017-11-19T01:00:33Z,2021-12-02T20:38:24Z,2021-12-02T20:38:25Z,CLOSED,False,4,0,1,https://github.com/sgeto,Made tests suite work with tcpdump.exe and msys build of Perl,1,['windows'],https://github.com/the-tcpdump-group/tcpdump/pull/653,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/653#issuecomment-979383016,"these 15 tests fail:
kday1-8
cve2015-0261_01
pcap-invalid-version-1
pcap-invalid-version-2
pcap-ng-invalid-vers-1
pcap-ng-invalid-vers-2
l2tp-avp-overflow
pktap-heap-overflow
How to interpret their exit code?
A log is attached.
test_results.txt","Although the suggested change is very small, it does not rebase well because the Perl code has changed too much. However, I managed to make some sense of this as follows.
The attached file shows that each of the 15 failed tests had the same reason:
< EXIT CODE 00000100

Tcpdump does not exit with status code 256 directly. However, if the Windows-specific comment in TESTrun applies, in this case 256 means status code 1 shifted 8 bits left, which would be S_ERR_HOST_PROGRAM. The only ways to exit with this status code would be (in the current edition of tcpdump.c, that is) through:

error()
the switch block after getopt_long()
compress_savefile()

The only possible route during make check is error(), which also implies an error message, which, unfortunately, remains unknown because in that revision of the script both Windows and Unix branches silenced stderr output. In the hindsight, the cause likely was one of the several improvements to input file validation.
From the proposed change it is clear that the operating system name is ""msys"" rather than ""MSWin32"", and that the main effect of the change is skipping the exit code check (in that revision of the script, same as it did for ""MSWin32"").
So it looks like ""msys"" allows to run the binary using POSIX command line, but uses Windows encoding for the exit status. If that's correct, the following change should address the problem in a better way:
--- a/tests/TESTrun
+++ b/tests/TESTrun
@@ -121,7 +121,7 @@ sub runtest {
             $status = $!;
             printf OUTPUT ""FAILED TO RUN: status: %d\n"", $status;
         } else {
-            if ($^O eq 'MSWin32') {
+            if ($^O eq 'MSWin32' or $^O eq 'msys') {
                 #
                 # On Windows, the return value of system is the lower 8
                 # bits of the exit status of the process, shifted left
That said, I don't have any means to test it, and the underlying problem may still stand, in which case the script should report it in a better way.
Unless anyone knows better, I am going to make the change above in 7 days to resolve this case as much as reasonably practicable.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,653,2017-11-19T01:00:33Z,2021-12-02T20:38:24Z,2021-12-02T20:38:25Z,CLOSED,False,4,0,1,https://github.com/sgeto,Made tests suite work with tcpdump.exe and msys build of Perl,1,['windows'],https://github.com/the-tcpdump-group/tcpdump/pull/653,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/653#issuecomment-984982809,"these 15 tests fail:
kday1-8
cve2015-0261_01
pcap-invalid-version-1
pcap-invalid-version-2
pcap-ng-invalid-vers-1
pcap-ng-invalid-vers-2
l2tp-avp-overflow
pktap-heap-overflow
How to interpret their exit code?
A log is attached.
test_results.txt",The issue has been addressed as discussed above instead of the originally proposed changes. Closing.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,655,2017-11-26T23:23:35Z,,2021-11-25T20:35:06Z,OPEN,False,25964,1330,107,https://github.com/sgeto,"Script for updating ""oui.c""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/655,https://github.com/sgeto,1,https://github.com/the-tcpdump-group/tcpdump/pull/655,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,655,2017-11-26T23:23:35Z,,2021-11-25T20:35:06Z,OPEN,False,25964,1330,107,https://github.com/sgeto,"Script for updating ""oui.c""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/655,https://github.com/sgeto,2,https://github.com/the-tcpdump-group/tcpdump/pull/655#issuecomment-347083293,,Almost there...,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,655,2017-11-26T23:23:35Z,,2021-11-25T20:35:06Z,OPEN,False,25964,1330,107,https://github.com/sgeto,"Script for updating ""oui.c""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/655,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/655#issuecomment-347121286,,"Hi,
Some remarks:

update-oui-database.sh is licensed under GPL, not sure we take it.
update-oui-database.sh is not executable.
Striped size of tcpdump increase by 66% (e.g. 1,2M->2.0M on Debian Jessie). Perhaps problem for embedded systems. Make update optional ?
After running update-oui-database.sh (I need to install gawk, my system has mawk by default), the oui.c file is only 3220 bytes.
Your branch is 2 commits behind the-tcpdump-group:master.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,655,2017-11-26T23:23:35Z,,2021-11-25T20:35:06Z,OPEN,False,25964,1330,107,https://github.com/sgeto,"Script for updating ""oui.c""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/655,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/655#issuecomment-347123715,,Also it would help to have one clean commit instead of many draft changes.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,655,2017-11-26T23:23:35Z,,2021-11-25T20:35:06Z,OPEN,False,25964,1330,107,https://github.com/sgeto,"Script for updating ""oui.c""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/655,https://github.com/sgeto,5,https://github.com/the-tcpdump-group/tcpdump/pull/655#issuecomment-347259347,,"@fxlb

update-oui-database.sh is licensed under GPL

So is config.guess and config.sub. I believe that tcpdump's source is licensed under a BSD-style license, not so much the scripts to build it. And this script isn't even meant to be used by a developer or user. Only by tcpdump maintainers', and probably only once a year or so.

update-oui-database.sh is not executable

Sorry. You're right. I keep forgetting that. Executable bits aren't really a thing one my main OS. I will fix it that.

Make update optional ?

I guess there are cases where increases file size could be a problem. So this could be done. Although I also think that compiling these entries in should be the default.
My NanoStation Loco M2 from 2011 for example is barely complaining, and its total free space is 8 MiB (OpenWrt uses about 4 MiB of that).
Also, I noticed that prefixing every entry with 0x adds about 0.4 MiB to the total file size (stripped). Using a more efficient method of marking these as hex is probable in order too.

After running update-oui-database.sh (I need to install gawk, my system has mawk by default), the oui.c file is only 3220 bytes

oui.txt (from http://standards-oui.ieee.org/oui.txt) has Windows line endings by default. 😆 😆
I didn't notice that. As convenient as as that may be for me, it wasn't their smartest move.
You need to convert them (i.e the script should probably do that for you). I'm on it.
And then try it mawk. Maybe it works.
@infrastation

Also it would help to have one clean commit instead of many draft changes.

I will squash them into a single commit once I come after some of the points mentioned.
@gvanem
Python and I aren't on out best terms. The dry-run option is great though 👍",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,655,2017-11-26T23:23:35Z,,2021-11-25T20:35:06Z,OPEN,False,25964,1330,107,https://github.com/sgeto,"Script for updating ""oui.c""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/655,https://github.com/mcr,6,https://github.com/the-tcpdump-group/tcpdump/pull/655#issuecomment-347328640,,"if you are talking about the 0x in the oui_values table in oui.c, then the size of the .c file has no relationship to the resulting object file.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,655,2017-11-26T23:23:35Z,,2021-11-25T20:35:06Z,OPEN,False,25964,1330,107,https://github.com/sgeto,"Script for updating ""oui.c""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/655,https://github.com/mcr,7,https://github.com/the-tcpdump-group/tcpdump/pull/655#issuecomment-347329469,,"There is also the PEN table in oui.c, which would be nice to update.
It might be that a better policy would be to install a file into /usr/share that has the list.  I hate to parse that file each time tcpdump runs, so it should at least be on demand...  maybe we can mmap() it read only.  At least that eliminates the hit for small systems (just don't ship the file).  Or maybe compile it has as now, with #ifdef SMALL or something.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,655,2017-11-26T23:23:35Z,,2021-11-25T20:35:06Z,OPEN,False,25964,1330,107,https://github.com/sgeto,"Script for updating ""oui.c""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/655,https://github.com/sgeto,8,https://github.com/the-tcpdump-group/tcpdump/pull/655#issuecomment-347373289,,"I agree, an #ifdef SMALL or something in oui.c and a note somewhere should be enough.
There could also be an option for that in the configure script.

There is also the PEN table in oui.c, which would be nice to update.

The OUI database is significantly smaller than the PEN table. This would add 51000+ entries.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,655,2017-11-26T23:23:35Z,,2021-11-25T20:35:06Z,OPEN,False,25964,1330,107,https://github.com/sgeto,"Script for updating ""oui.c""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/655,https://github.com/gvanem,9,https://github.com/the-tcpdump-group/tcpdump/pull/655#issuecomment-347478280,,"@sgeto Python and I aren't on out best terms. The dry-run option is great though
I deleted that comment since you d/l it since it failed in Python3 (it still have some Unicode issue).
But here it is again with a cached tweak:
make-oui.py.txt
I.e. it doesn't download again if oui.txt is in curr-dir. (drop the .txt extension again and run python2 make-oui.py)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,655,2017-11-26T23:23:35Z,,2021-11-25T20:35:06Z,OPEN,False,25964,1330,107,https://github.com/sgeto,"Script for updating ""oui.c""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/655,https://github.com/sgeto,10,https://github.com/the-tcpdump-group/tcpdump/pull/655#issuecomment-347693482,,"@gvanem
whoa the script is fast! (It took around a second)
This is clever
  f.write (""    { 0xFFFFFF, NULL } /* Since XEROX CORPORATION has value 0, use this */\n  };\n"")
but the script adds only ""netdissect.h"" when oui.c needs
#include <netdissect-stdinc.h>
#include ""netdissect.h""
#include ""oui.h""

It also seems to overrides already existing content in oui.c (PEN table, copyright notice, includes etc).
I spend quite some time on mine to make sure it never does.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,655,2017-11-26T23:23:35Z,,2021-11-25T20:35:06Z,OPEN,False,25964,1330,107,https://github.com/sgeto,"Script for updating ""oui.c""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/655,https://github.com/gvanem,11,https://github.com/the-tcpdump-group/tcpdump/pull/655#issuecomment-347851064,,"What is PEN table?
Okay, it's trivial to add the other headers (I've not actually built tcpdump with this oui.c).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,655,2017-11-26T23:23:35Z,,2021-11-25T20:35:06Z,OPEN,False,25964,1330,107,https://github.com/sgeto,"Script for updating ""oui.c""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/655,https://github.com/sgeto,12,https://github.com/the-tcpdump-group/tcpdump/pull/655#issuecomment-347852947,,"What is PEN table?

the other structure in oui,c that begins with
/*
 * SMI Network Management Private Enterprise Codes for organizations.
 *
 * XXX - these also appear in FreeRadius dictionary files, with items such
 * as
 *
 *	VENDOR          Cisco           9
 *
 * List taken from Ethereal's epan/sminmpec.c.
 */",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,655,2017-11-26T23:23:35Z,,2021-11-25T20:35:06Z,OPEN,False,25964,1330,107,https://github.com/sgeto,"Script for updating ""oui.c""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/655,https://github.com/sgeto,13,https://github.com/the-tcpdump-group/tcpdump/pull/655#issuecomment-347988710,,"I'm pretty happy with how the PR is right now. So what would it take to get this baby on the road?
If you have suggestions or really want me to squeeze these commits on one, let me know.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,655,2017-11-26T23:23:35Z,,2021-11-25T20:35:06Z,OPEN,False,25964,1330,107,https://github.com/sgeto,"Script for updating ""oui.c""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/655,https://github.com/gvanem,14,https://github.com/the-tcpdump-group/tcpdump/pull/655#issuecomment-349630744,,"I'm still tinkering with my make-oui.py script. But have some problems understanding how all the
oui.h entries (like #define OUI_IANA) should be used/generated. Are they not?
Having all these OUI_xx in oui.h is IMHO ugly. Should we rather make some generated:
oui_val_to_name()
oui_name_to_val()

functions? (ref. pcap_datalink_val_to_name).
Edit: I've updated my .py script for a smi_values[] array too:  https://gist.github.com/gvanem/1643c946fb2395b6c8a05c3ec8904e13
Compiles okay with gcc/clang-cl now. But MSVC says:
oui-generated.c : fatal error C1128: number of sections exceeded object file format limit: 
compile with /bigobj

Besides the size of windump.exe jumped from 1.522.688 to 3.819.008 bytes!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,655,2017-11-26T23:23:35Z,,2021-11-25T20:35:06Z,OPEN,False,25964,1330,107,https://github.com/sgeto,"Script for updating ""oui.c""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/655,https://github.com/infrastation,15,https://github.com/the-tcpdump-group/tcpdump/pull/655#issuecomment-349631327,,"As a matter of style, for a change of this scope 1 commit would be better than 12 commits trying to amend one another.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,655,2017-11-26T23:23:35Z,,2021-11-25T20:35:06Z,OPEN,False,25964,1330,107,https://github.com/sgeto,"Script for updating ""oui.c""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/655,https://github.com/sgeto,16,https://github.com/the-tcpdump-group/tcpdump/pull/655#issuecomment-350517568,,"@infrastation
done",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,655,2017-11-26T23:23:35Z,,2021-11-25T20:35:06Z,OPEN,False,25964,1330,107,https://github.com/sgeto,"Script for updating ""oui.c""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/655,https://github.com/sgeto,17,https://github.com/the-tcpdump-group/tcpdump/pull/655#issuecomment-350521123,,"@gvanem

But have some problems understanding how all the
oui.h entries (like #define OUI_IANA) should be used/generated. Are they not?

Will this change, these definitions are only around for print-lldp.c and print-llc.c.

Having all these OUI_xx in oui.h is IMHO ugly.

I agree but just leave them there. Another option would be to replace these macros in print-lldp.c and print-llc.c with with their actual value since they will probably stay the same forever anyways.

oui-generated.c : fatal error C1128: number of sections exceeded object file format limit:
compile with /bigobj

Have not build this branch with MSVC yet.
If MSVC knows that the resulting object file is exceeding the object file format limit (the have a term for everything, don't they?), why wouldn't the compiler add that flag by itself? That's just backwards.
Does the error go away when you add /bigobj?

Besides the size of windump.exe jumped from 1.522.688 to 3.819.008 bytes!

oui.txt is a big list. An alternative would be to make the list optional or to make tcpdump read a plain oui.txt at runtime. See @mcr 's comment on that. The latter will require quite some coding.
Whether this feature should be around is a more important question than the increasing filesize. And because it's 2017, that question should also be a rhetorical one.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,655,2017-11-26T23:23:35Z,,2021-11-25T20:35:06Z,OPEN,False,25964,1330,107,https://github.com/sgeto,"Script for updating ""oui.c""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/655,https://github.com/ValZapod,18,https://github.com/the-tcpdump-group/tcpdump/pull/655#issuecomment-634138398,,I will just remind you that wireshark uses scripts to update all of it (SMI as well) once in 7 days. Like that https://code.wireshark.org/review/c/37293/,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,655,2017-11-26T23:23:35Z,,2021-11-25T20:35:06Z,OPEN,False,25964,1330,107,https://github.com/sgeto,"Script for updating ""oui.c""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/655,https://github.com/fxlb,19,https://github.com/the-tcpdump-group/tcpdump/pull/655#issuecomment-634217263,,"Need to study memory and size before/after adding a complete oui file.
I think we need to keep tcpdump small.
Make this optional?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,655,2017-11-26T23:23:35Z,,2021-11-25T20:35:06Z,OPEN,False,25964,1330,107,https://github.com/sgeto,"Script for updating ""oui.c""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/655,https://github.com/mcr,20,https://github.com/the-tcpdump-group/tcpdump/pull/655#issuecomment-634242350,,"Alternatively, I have the OUIs as a reverse DNS lookup:
tilapia-[/etc/domain/sandelman.ca] mcr 10007 %dig +short 1.0.0.5.c.b.1.0.0.ethermap.sandelman.ca. txt
""OpenRB.com, Direct SIA""

I don't really want to put this in my zone. It could go into tcpdump.net if desired.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,655,2017-11-26T23:23:35Z,,2021-11-25T20:35:06Z,OPEN,False,25964,1330,107,https://github.com/sgeto,"Script for updating ""oui.c""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/655,https://github.com/infrastation,21,https://github.com/the-tcpdump-group/tcpdump/pull/655#issuecomment-939507631,,"@fxlb, did you have a chance to see what effect this change would have on performance and memory footprint?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,655,2017-11-26T23:23:35Z,,2021-11-25T20:35:06Z,OPEN,False,25964,1330,107,https://github.com/sgeto,"Script for updating ""oui.c""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/655,https://github.com/fxlb,22,https://github.com/the-tcpdump-group/tcpdump/pull/655#issuecomment-939537628,,"did you have a chance to see what effect this change would have on performance and memory footprint?

Stripped size of tcpdump increases from 1.6M -> 2.2M on Debian Bullseye. No time for other studies.
(This PR updates 107 files : problem!)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,655,2017-11-26T23:23:35Z,,2021-11-25T20:35:06Z,OPEN,False,25964,1330,107,https://github.com/sgeto,"Script for updating ""oui.c""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/655,https://github.com/infrastation,23,https://github.com/the-tcpdump-group/tcpdump/pull/655#issuecomment-943712779,,"Most of the changes are not related to OUI printing, possibly a git rebase went wrong at some point. The proposed change would need to be extracted into a small commit before it can be considered again.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,655,2017-11-26T23:23:35Z,,2021-11-25T20:35:06Z,OPEN,False,25964,1330,107,https://github.com/sgeto,"Script for updating ""oui.c""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/655,https://github.com/infrastation,24,https://github.com/the-tcpdump-group/tcpdump/pull/655#issuecomment-979457844,,"The changes that belong to the commit are:

update-oui-database.sh (a new file)
Makefile.in (one line added for the above)
oui.h (some lines removed)
oui.c (many lines added)
configure (support for --disable-oui-database to define NOOUIDB)

The original changes to configure.ac seem to be lost and would need to be recovered.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,657,2017-11-28T14:51:48Z,,2019-03-20T21:23:24Z,OPEN,False,1530,604,17,https://github.com/sjvudp,6th rebase of NTP mode6 support (f-NTP-mode6),49,[],https://github.com/the-tcpdump-group/tcpdump/pull/657,https://github.com/sjvudp,1,https://github.com/the-tcpdump-group/tcpdump/pull/657,"As my previous pull request(s) all seem to have stalled, I decided to rebase on commit f085c93 and start another (this!) pull request. Features are implementing NTP mode6 packet decoding. Due to the long time since starting the branch (and due to the fact that this is my first github pull contribution) the branch may be a bit more complex than necessary. If you want, I can provide one big commit instead.
I don't know whether I'll have time until next year to do major work on this, but the NTP ""test suite"" should be condensed to fewer, more essential packets. The packets used now are more or less ""ad hoc"" captures to have ""something"" (which is ""better than nothing"" TM).","As my previous pull request(s) all seem to have stalled, I decided to rebase on commit f085c93 and start another (this!) pull request. Features are implementing NTP mode6 packet decoding. Due to the long time since starting the branch (and due to the fact that this is my first github pull contribution) the branch may be a bit more complex than necessary. If you want, I can provide one big commit instead.
I don't know whether I'll have time until next year to do major work on this, but the NTP ""test suite"" should be condensed to fewer, more essential packets. The packets used now are more or less ""ad hoc"" captures to have ""something"" (which is ""better than nothing"" TM).",True,{'THUMBS_UP': ['https://github.com/ValZapod']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,659,2017-12-30T15:59:29Z,2017-12-30T16:40:34Z,2017-12-30T16:40:34Z,CLOSED,False,44,0,2,None,Add support for IPv6 routing header type 4,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/659,None,1,https://github.com/the-tcpdump-group/tcpdump/pull/659,"IPv6 routing header type 4 is known as Segment Routing Header (SRH).
It is used by Segment Routing (SR) to steer a packet through a
controlled set of instructions, called segments. It is described in
https://tools.ietf.org/html/draft-ietf-6man-segment-routing-header-07
An extension is added to allow tcpdump to print SRH information.","IPv6 routing header type 4 is known as Segment Routing Header (SRH).
It is used by Segment Routing (SR) to steer a packet through a
controlled set of instructions, called segments. It is described in
https://tools.ietf.org/html/draft-ietf-6man-segment-routing-header-07
An extension is added to allow tcpdump to print SRH information.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,659,2017-12-30T15:59:29Z,2017-12-30T16:40:34Z,2017-12-30T16:40:34Z,CLOSED,False,44,0,2,None,Add support for IPv6 routing header type 4,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/659,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/659#issuecomment-354554171,"IPv6 routing header type 4 is known as Segment Routing Header (SRH).
It is used by Segment Routing (SR) to steer a packet through a
controlled set of instructions, called segments. It is described in
https://tools.ietf.org/html/draft-ietf-6man-segment-routing-header-07
An extension is added to allow tcpdump to print SRH information.","Thanks, before a review, please add a pcap file with this new header in the tests/ directory.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,660,2017-12-30T17:13:23Z,2017-12-30T20:37:38Z,2017-12-30T20:37:38Z,MERGED,True,46,1,5,None,Add support for IPv6 routing header type 4,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/660,None,1,https://github.com/the-tcpdump-group/tcpdump/pull/660,"IPv6 routing header type 4 is known as Segment Routing Header (SRH).
It is used by Segment Routing (SR) to steer a packet through a
controlled set of instructions, called segments. It is described in
https://tools.ietf.org/html/draft-ietf-6man-segment-routing-header-07
An extension is added to allow tcpdump to print SRH information.","IPv6 routing header type 4 is known as Segment Routing Header (SRH).
It is used by Segment Routing (SR) to steer a packet through a
controlled set of instructions, called segments. It is described in
https://tools.ietf.org/html/draft-ietf-6man-segment-routing-header-07
An extension is added to allow tcpdump to print SRH information.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,661,2018-01-22T07:09:43Z,2018-02-01T19:35:32Z,2018-02-02T02:54:03Z,MERGED,True,19,12,2,https://github.com/jech,Fix printing of wildcard retractions and IHU in Babel printer.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/661,https://github.com/jech,1,https://github.com/the-tcpdump-group/tcpdump/pull/661,"When the AE field is 0, the message applies to any routes or
neighbours.  Tcpdump used to print it as ::/0, which is confusing.","When the AE field is 0, the message applies to any routes or
neighbours.  Tcpdump used to print it as ::/0, which is confusing.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,661,2018-01-22T07:09:43Z,2018-02-01T19:35:32Z,2018-02-02T02:54:03Z,MERGED,True,19,12,2,https://github.com/jech,Fix printing of wildcard retractions and IHU in Babel printer.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/661,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/661#issuecomment-362078214,"When the AE field is 0, the message applies to any routes or
neighbours.  Tcpdump used to print it as ::/0, which is confusing.","Would you also like to rename MH-Request to Seqno Request as it is in the spec and fix IHU to say ""rxcost"" as it is in the spec (currently says ""txcost"")?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,661,2018-01-22T07:09:43Z,2018-02-01T19:35:32Z,2018-02-02T02:54:03Z,MERGED,True,19,12,2,https://github.com/jech,Fix printing of wildcard retractions and IHU in Babel printer.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/661,https://github.com/jech,3,https://github.com/the-tcpdump-group/tcpdump/pull/661#issuecomment-362094237,"When the AE field is 0, the message applies to any routes or
neighbours.  Tcpdump used to print it as ::/0, which is confusing.","Would it be more helpful to print something like ""invalid AE 0""?
Feel free.  Anything that won't confuse the reader is fine with me.
 Also MESSAGE_NH likely needs something similar.
Yes, you're right.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,661,2018-01-22T07:09:43Z,2018-02-01T19:35:32Z,2018-02-02T02:54:03Z,MERGED,True,19,12,2,https://github.com/jech,Fix printing of wildcard retractions and IHU in Babel printer.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/661,https://github.com/jech,4,https://github.com/the-tcpdump-group/tcpdump/pull/661#issuecomment-362094395,"When the AE field is 0, the message applies to any routes or
neighbours.  Tcpdump used to print it as ::/0, which is confusing.","Would you also like to rename MH-Request to Seqno Request as it is in the spec
 and fix IHU to say ""rxcost"" as it is in the spec (currently says ""txcost"")?
Yes please (for both).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,661,2018-01-22T07:09:43Z,2018-02-01T19:35:32Z,2018-02-02T02:54:03Z,MERGED,True,19,12,2,https://github.com/jech,Fix printing of wildcard retractions and IHU in Babel printer.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/661,https://github.com/jech,5,https://github.com/the-tcpdump-group/tcpdump/pull/661#issuecomment-362470504,"When the AE field is 0, the message applies to any routes or
neighbours.  Tcpdump used to print it as ::/0, which is confusing.","Looks good, thanks.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,663,2018-03-04T17:11:09Z,2021-05-19T13:16:36Z,2021-05-19T13:16:36Z,CLOSED,False,169,0,16,https://github.com/lunn,PTP: Print parts of the common PTP header,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/663,https://github.com/lunn,1,https://github.com/the-tcpdump-group/tcpdump/pull/663,"Precession Time Protocol allows network devices to synchronize their
clocks. Each PTP packet has a common header, and then message type
specific extensions. Print out some of the important fields in the
common header.
PTP can be carried directly in Ethernet frames, or UDP
encapsulated. Add support for both.
Signed-off-by: Andrew Lunn andrew@lunn.ch","Precession Time Protocol allows network devices to synchronize their
clocks. Each PTP packet has a common header, and then message type
specific extensions. Print out some of the important fields in the
common header.
PTP can be carried directly in Ethernet frames, or UDP
encapsulated. Add support for both.
Signed-off-by: Andrew Lunn andrew@lunn.ch",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,663,2018-03-04T17:11:09Z,2021-05-19T13:16:36Z,2021-05-19T13:16:36Z,CLOSED,False,169,0,16,https://github.com/lunn,PTP: Print parts of the common PTP header,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/663,https://github.com/lunn,2,https://github.com/the-tcpdump-group/tcpdump/pull/663#issuecomment-370248082,"Precession Time Protocol allows network devices to synchronize their
clocks. Each PTP packet has a common header, and then message type
specific extensions. Print out some of the important fields in the
common header.
PTP can be carried directly in Ethernet frames, or UDP
encapsulated. Add support for both.
Signed-off-by: Andrew Lunn andrew@lunn.ch",It would be nice to add to CONTRIBUTING a list of 'Makefile' like files where new files need to be added in order that they get built in different build systems...,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,663,2018-03-04T17:11:09Z,2021-05-19T13:16:36Z,2021-05-19T13:16:36Z,CLOSED,False,169,0,16,https://github.com/lunn,PTP: Print parts of the common PTP header,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/663,https://github.com/lunn,3,https://github.com/the-tcpdump-group/tcpdump/pull/663#issuecomment-378246410,"Precession Time Protocol allows network devices to synchronize their
clocks. Each PTP packet has a common header, and then message type
specific extensions. Print out some of the important fields in the
common header.
PTP can be carried directly in Ethernet frames, or UDP
encapsulated. Add support for both.
Signed-off-by: Andrew Lunn andrew@lunn.ch",Anything i can do to help get this merged?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,663,2018-03-04T17:11:09Z,2021-05-19T13:16:36Z,2021-05-19T13:16:36Z,CLOSED,False,169,0,16,https://github.com/lunn,PTP: Print parts of the common PTP header,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/663,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/663#issuecomment-414616398,"Precession Time Protocol allows network devices to synchronize their
clocks. Each PTP packet has a common header, and then message type
specific extensions. Print out some of the important fields in the
common header.
PTP can be carried directly in Ethernet frames, or UDP
encapsulated. Add support for both.
Signed-off-by: Andrew Lunn andrew@lunn.ch","This decoder should take into account the versionPTP field (4 lower bits of octet 1 in the header) and only decode the version it implements (from v2 packet diagrams I infer this code stands for v1). Other than that, it looks very straightforward.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,663,2018-03-04T17:11:09Z,2021-05-19T13:16:36Z,2021-05-19T13:16:36Z,CLOSED,False,169,0,16,https://github.com/lunn,PTP: Print parts of the common PTP header,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/663,https://github.com/infrastation,5,https://github.com/the-tcpdump-group/tcpdump/pull/663#issuecomment-414618648,"Precession Time Protocol allows network devices to synchronize their
clocks. Each PTP packet has a common header, and then message type
specific extensions. Print out some of the important fields in the
common header.
PTP can be carried directly in Ethernet frames, or UDP
encapsulated. Add support for both.
Signed-off-by: Andrew Lunn andrew@lunn.ch","To improve CONTRIBUTING as you suggested above, feel free to suggest particular changes through a pull request.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,663,2018-03-04T17:11:09Z,2021-05-19T13:16:36Z,2021-05-19T13:16:36Z,CLOSED,False,169,0,16,https://github.com/lunn,PTP: Print parts of the common PTP header,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/663,https://github.com/fxlb,6,https://github.com/the-tcpdump-group/tcpdump/pull/663#issuecomment-483734063,"Precession Time Protocol allows network devices to synchronize their
clocks. Each PTP packet has a common header, and then message type
specific extensions. Print out some of the important fields in the
common header.
PTP can be carried directly in Ethernet frames, or UDP
encapsulated. Add support for both.
Signed-off-by: Andrew Lunn andrew@lunn.ch",PR #721 is also about PTP.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,663,2018-03-04T17:11:09Z,2021-05-19T13:16:36Z,2021-05-19T13:16:36Z,CLOSED,False,169,0,16,https://github.com/lunn,PTP: Print parts of the common PTP header,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/663,https://github.com/mcr,7,https://github.com/the-tcpdump-group/tcpdump/pull/663#issuecomment-488885791,"Precession Time Protocol allows network devices to synchronize their
clocks. Each PTP packet has a common header, and then message type
specific extensions. Print out some of the important fields in the
common header.
PTP can be carried directly in Ethernet frames, or UDP
encapsulated. Add support for both.
Signed-off-by: Andrew Lunn andrew@lunn.ch","PR #721 is also about PTP.

I think #721 is probably a better base, do you agree?  Would the two posters like to collaborate?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,663,2018-03-04T17:11:09Z,2021-05-19T13:16:36Z,2021-05-19T13:16:36Z,CLOSED,False,169,0,16,https://github.com/lunn,PTP: Print parts of the common PTP header,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/663,https://github.com/fxlb,8,https://github.com/the-tcpdump-group/tcpdump/pull/663#issuecomment-844096999,"Precession Time Protocol allows network devices to synchronize their
clocks. Each PTP packet has a common header, and then message type
specific extensions. Print out some of the important fields in the
common header.
PTP can be carried directly in Ethernet frames, or UDP
encapsulated. Add support for both.
Signed-off-by: Andrew Lunn andrew@lunn.ch","The implementation was done via PR #721, closing.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,664,2018-03-06T00:15:13Z,2018-08-01T07:47:32Z,2018-08-01T14:35:51Z,CLOSED,False,2,0,1,https://github.com/guyharris,Seeing what it takes to get stuff tested with Travis/AppVeyor.,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/664,https://github.com/guyharris,1,https://github.com/the-tcpdump-group/tcpdump/pull/664,"Ignore this, I'm just seeing whether this is sufficient to run this through Travis and AppVeyor, so I know how to update the CONTRIBUTING file.","Ignore this, I'm just seeing whether this is sufficient to run this through Travis and AppVeyor, so I know how to update the CONTRIBUTING file.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,664,2018-03-06T00:15:13Z,2018-08-01T07:47:32Z,2018-08-01T14:35:51Z,CLOSED,False,2,0,1,https://github.com/guyharris,Seeing what it takes to get stuff tested with Travis/AppVeyor.,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/664,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/664#issuecomment-409482868,"Ignore this, I'm just seeing whether this is sufficient to run this through Travis and AppVeyor, so I know how to update the CONTRIBUTING file.","Both Travis CI and Appveyor checks now work, closing.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,664,2018-03-06T00:15:13Z,2018-08-01T07:47:32Z,2018-08-01T14:35:51Z,CLOSED,False,2,0,1,https://github.com/guyharris,Seeing what it takes to get stuff tested with Travis/AppVeyor.,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/664,https://github.com/gvanem,3,https://github.com/the-tcpdump-group/tcpdump/pull/664#issuecomment-409502340,"Ignore this, I'm just seeing whether this is sufficient to run this through Travis and AppVeyor, so I know how to update the CONTRIBUTING file.","Both Travis CI and Appveyor checks now work, closing.

From the project front-page it's evident that Travis is passing, but not AppVeyor. Can you/Guy please add a link for that? Should AFAICS, be something like:
--- a/README.md 2018-06-05 11:06:43
+++ b/README.md 2018-08-01 08:49:40
@@ -3,6 +3,8 @@
 [![Build
 Status](https://travis-ci.org/the-tcpdump-group/tcpdump.png)](https://travis-ci.org/the-tcpdump-group/tcpdump)

+[![Build Status](https://ci.appveyor.com/api/projects/status/github/guyharris/tcpdump?branch=master)](https://ci.appveyor.com/project/guyharris/tcpdump)
+
 To report a security issue please send an e-mail to security@tcpdump.org.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,664,2018-03-06T00:15:13Z,2018-08-01T07:47:32Z,2018-08-01T14:35:51Z,CLOSED,False,2,0,1,https://github.com/guyharris,Seeing what it takes to get stuff tested with Travis/AppVeyor.,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/664,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/664#issuecomment-409506761,"Ignore this, I'm just seeing whether this is sufficient to run this through Travis and AppVeyor, so I know how to update the CONTRIBUTING file.","The Appveyor status image says ""building..."" despite the build finished successfully hours ago, do you get different result?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,664,2018-03-06T00:15:13Z,2018-08-01T07:47:32Z,2018-08-01T14:35:51Z,CLOSED,False,2,0,1,https://github.com/guyharris,Seeing what it takes to get stuff tested with Travis/AppVeyor.,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/664,https://github.com/infrastation,5,https://github.com/the-tcpdump-group/tcpdump/pull/664#issuecomment-409509978,"Ignore this, I'm just seeing whether this is sufficient to run this through Travis and AppVeyor, so I know how to update the CONTRIBUTING file.",Figured it out: the URL needs to be different for the image. Making the changes...,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,664,2018-03-06T00:15:13Z,2018-08-01T07:47:32Z,2018-08-01T14:35:51Z,CLOSED,False,2,0,1,https://github.com/guyharris,Seeing what it takes to get stuff tested with Travis/AppVeyor.,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/664,https://github.com/infrastation,6,https://github.com/the-tcpdump-group/tcpdump/pull/664#issuecomment-409530535,"Ignore this, I'm just seeing whether this is sufficient to run this through Travis and AppVeyor, so I know how to update the CONTRIBUTING file.","Done in README.md, also on the web-site front page. Thank you for the suggestion.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,664,2018-03-06T00:15:13Z,2018-08-01T07:47:32Z,2018-08-01T14:35:51Z,CLOSED,False,2,0,1,https://github.com/guyharris,Seeing what it takes to get stuff tested with Travis/AppVeyor.,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/664,https://github.com/gvanem,7,https://github.com/the-tcpdump-group/tcpdump/pull/664#issuecomment-409541417,"Ignore this, I'm just seeing whether this is sufficient to run this through Travis and AppVeyor, so I know how to update the CONTRIBUTING file.","Much better. Although I'd prefer them side by side. Maybe a table (untested):
| Travis | AppVeyor |
| :---------- | :----- |
| [![Build Status](https://travis-ci.org/the-tcpdump-group/tcpdump.svg?branch=master)](https://travis ci.org/the-tcpdump-group/tcpdump) |
| [![Build Status](https://ci.appveyor.com/api/projects/status/github/the-tcpdump-group/tcpdump ?branch=master&svg=true)](https://ci.appveyor.com/project/guyharris/tcpdump) |

(but tables in Markdown is so effin' hard to get right).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,664,2018-03-06T00:15:13Z,2018-08-01T07:47:32Z,2018-08-01T14:35:51Z,CLOSED,False,2,0,1,https://github.com/guyharris,Seeing what it takes to get stuff tested with Travis/AppVeyor.,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/664,https://github.com/infrastation,8,https://github.com/the-tcpdump-group/tcpdump/pull/664#issuecomment-409597266,"Ignore this, I'm just seeing whether this is sufficient to run this through Travis and AppVeyor, so I know how to update the CONTRIBUTING file.","If you do not want the result to be unreadable in a text console, I would suggest to remove both badges, because CI instances come and go, and README is better suited for less volatile information -- it usually comes in a package and then sits on the filesystem for months if not years. The web-site is a good place for the current up-to-date list.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,667,2018-03-19T13:53:26Z,2018-04-03T02:42:02Z,2018-04-03T02:42:02Z,MERGED,True,1,1,1,https://github.com/slavashw,Fix fail to capture on RDMA device on FreeBSD,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/667,https://github.com/slavashw,1,https://github.com/the-tcpdump-group/tcpdump/pull/667,"In pcap for RDMA devices, on FreeBSD where we have support for capsicum
but we don't have file descriptor for a live capture we will fail with:
""tcpdump: unable to limit pcap descriptor""
We just fail to set the proper access rights - don't fail the capture.
Signed-off-by: Slava Shwartsman slavash@mellanox.com","In pcap for RDMA devices, on FreeBSD where we have support for capsicum
but we don't have file descriptor for a live capture we will fail with:
""tcpdump: unable to limit pcap descriptor""
We just fail to set the proper access rights - don't fail the capture.
Signed-off-by: Slava Shwartsman slavash@mellanox.com",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,667,2018-03-19T13:53:26Z,2018-04-03T02:42:02Z,2018-04-03T02:42:02Z,MERGED,True,1,1,1,https://github.com/slavashw,Fix fail to capture on RDMA device on FreeBSD,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/667,https://github.com/slavashw,2,https://github.com/the-tcpdump-group/tcpdump/pull/667#issuecomment-377875535,"In pcap for RDMA devices, on FreeBSD where we have support for capsicum
but we don't have file descriptor for a live capture we will fail with:
""tcpdump: unable to limit pcap descriptor""
We just fail to set the proper access rights - don't fail the capture.
Signed-off-by: Slava Shwartsman slavash@mellanox.com",Can I get some more reviews here please?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,668,2018-03-20T08:14:43Z,2019-05-23T09:06:15Z,2019-05-23T09:10:53Z,MERGED,True,1063,0,14,https://github.com/nikhilap1,New Ethertype protocol for Arista: Arista Vendor Specific Protocol,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/668,https://github.com/nikhilap1,1,https://github.com/the-tcpdump-group/tcpdump/pull/668,"Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp
UTC timestamp value in IEEE 1588 time of day format (either 64-bit or 48-bit) with the lower 32-bits representing nanoseconds and upper bits representing seconds.
Sample tcpdump output:
 09:49:13.540584 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x20, Timestamp (48-bit): Seconds 31513, Nanoseconds 565572367, 
 09:49:23.197079 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x10, Timestamp TAI(64-bit): Seconds: 1519811363, Nanoseconds: 258347943,","Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp
UTC timestamp value in IEEE 1588 time of day format (either 64-bit or 48-bit) with the lower 32-bits representing nanoseconds and upper bits representing seconds.
Sample tcpdump output:
 09:49:13.540584 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x20, Timestamp (48-bit): Seconds 31513, Nanoseconds 565572367, 
 09:49:23.197079 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x10, Timestamp TAI(64-bit): Seconds: 1519811363, Nanoseconds: 258347943,",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,668,2018-03-20T08:14:43Z,2019-05-23T09:06:15Z,2019-05-23T09:10:53Z,MERGED,True,1063,0,14,https://github.com/nikhilap1,New Ethertype protocol for Arista: Arista Vendor Specific Protocol,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/668,https://github.com/mcr,2,https://github.com/the-tcpdump-group/tcpdump/pull/668#issuecomment-374543750,"Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp
UTC timestamp value in IEEE 1588 time of day format (either 64-bit or 48-bit) with the lower 32-bits representing nanoseconds and upper bits representing seconds.
Sample tcpdump output:
 09:49:13.540584 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x20, Timestamp (48-bit): Seconds 31513, Nanoseconds 565572367, 
 09:49:23.197079 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x10, Timestamp TAI(64-bit): Seconds: 1519811363, Nanoseconds: 258347943,",Please include a pcap file in tests/ with a sample and test case.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,668,2018-03-20T08:14:43Z,2019-05-23T09:06:15Z,2019-05-23T09:10:53Z,MERGED,True,1063,0,14,https://github.com/nikhilap1,New Ethertype protocol for Arista: Arista Vendor Specific Protocol,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/668,https://github.com/nikhilap1,3,https://github.com/the-tcpdump-group/tcpdump/pull/668#issuecomment-374549005,"Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp
UTC timestamp value in IEEE 1588 time of day format (either 64-bit or 48-bit) with the lower 32-bits representing nanoseconds and upper bits representing seconds.
Sample tcpdump output:
 09:49:13.540584 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x20, Timestamp (48-bit): Seconds 31513, Nanoseconds 565572367, 
 09:49:23.197079 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x10, Timestamp TAI(64-bit): Seconds: 1519811363, Nanoseconds: 258347943,","@mcr, Included the pcap file and the sample output",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,668,2018-03-20T08:14:43Z,2019-05-23T09:06:15Z,2019-05-23T09:10:53Z,MERGED,True,1063,0,14,https://github.com/nikhilap1,New Ethertype protocol for Arista: Arista Vendor Specific Protocol,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/668,https://github.com/niks3089,4,https://github.com/the-tcpdump-group/tcpdump/pull/668#issuecomment-383447473,"Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp
UTC timestamp value in IEEE 1588 time of day format (either 64-bit or 48-bit) with the lower 32-bits representing nanoseconds and upper bits representing seconds.
Sample tcpdump output:
 09:49:13.540584 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x20, Timestamp (48-bit): Seconds 31513, Nanoseconds 565572367, 
 09:49:23.197079 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x10, Timestamp TAI(64-bit): Seconds: 1519811363, Nanoseconds: 258347943,","Hey guys, any update on when this can be reviewed and merged upstream?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,668,2018-03-20T08:14:43Z,2019-05-23T09:06:15Z,2019-05-23T09:10:53Z,MERGED,True,1063,0,14,https://github.com/nikhilap1,New Ethertype protocol for Arista: Arista Vendor Specific Protocol,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/668,https://github.com/infrastation,5,https://github.com/the-tcpdump-group/tcpdump/pull/668#issuecomment-385949588,"Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp
UTC timestamp value in IEEE 1588 time of day format (either 64-bit or 48-bit) with the lower 32-bits representing nanoseconds and upper bits representing seconds.
Sample tcpdump output:
 09:49:13.540584 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x20, Timestamp (48-bit): Seconds 31513, Nanoseconds 565572367, 
 09:49:23.197079 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x10, Timestamp TAI(64-bit): Seconds: 1519811363, Nanoseconds: 258347943,","The change looks mostly OK, though there are some details that need careful proof-reading and possibly fixing.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,668,2018-03-20T08:14:43Z,2019-05-23T09:06:15Z,2019-05-23T09:10:53Z,MERGED,True,1063,0,14,https://github.com/nikhilap1,New Ethertype protocol for Arista: Arista Vendor Specific Protocol,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/668,https://github.com/infrastation,6,https://github.com/the-tcpdump-group/tcpdump/pull/668#issuecomment-409655319,"Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp
UTC timestamp value in IEEE 1588 time of day format (either 64-bit or 48-bit) with the lower 32-bits representing nanoseconds and upper bits representing seconds.
Sample tcpdump output:
 09:49:13.540584 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x20, Timestamp (48-bit): Seconds 31513, Nanoseconds 565572367, 
 09:49:23.197079 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x10, Timestamp TAI(64-bit): Seconds: 1519811363, Nanoseconds: 258347943,","It may make more sense to omit ""AVSP"" from the source code as it just unnecessarily repeats it is an Arista-specific protocol without adding meaningful information. Any subsequent Arista-specific protocols would likely end up in print-arista.c as well, as it is with the Juniper-specific code in print-juniper.c. Additional comments are welcome.
Also this change does not include the changes to tests/TESTLIST, which means the new test case is not run during make check, this needs to be fixed.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,668,2018-03-20T08:14:43Z,2019-05-23T09:06:15Z,2019-05-23T09:10:53Z,MERGED,True,1063,0,14,https://github.com/nikhilap1,New Ethertype protocol for Arista: Arista Vendor Specific Protocol,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/668,https://github.com/nikhilap1,7,https://github.com/the-tcpdump-group/tcpdump/pull/668#issuecomment-490727711,"Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp
UTC timestamp value in IEEE 1588 time of day format (either 64-bit or 48-bit) with the lower 32-bits representing nanoseconds and upper bits representing seconds.
Sample tcpdump output:
 09:49:13.540584 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x20, Timestamp (48-bit): Seconds 31513, Nanoseconds 565572367, 
 09:49:23.197079 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x10, Timestamp TAI(64-bit): Seconds: 1519811363, Nanoseconds: 258347943,","Changes done in the last commit

Removed ""avsp"" from the source code
Updated 64 bit version to print in new UTC format
Added test-case in TESTLIST
Resolved merge conflicts.

@infrastation: Please review the changes and let us know if this looks ok",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,668,2018-03-20T08:14:43Z,2019-05-23T09:06:15Z,2019-05-23T09:10:53Z,MERGED,True,1063,0,14,https://github.com/nikhilap1,New Ethertype protocol for Arista: Arista Vendor Specific Protocol,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/668,https://github.com/fxlb,8,https://github.com/the-tcpdump-group/tcpdump/pull/668#issuecomment-490755349,"Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp
UTC timestamp value in IEEE 1588 time of day format (either 64-bit or 48-bit) with the lower 32-bits representing nanoseconds and upper bits representing seconds.
Sample tcpdump output:
 09:49:13.540584 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x20, Timestamp (48-bit): Seconds 31513, Nanoseconds 565572367, 
 09:49:23.197079 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x10, Timestamp TAI(64-bit): Seconds: 1519811363, Nanoseconds: 258347943,","Please rebase your branch on the-tcpdump-group:master.
There should be no ""Merge remote-tracking branch 'original/master' into avsp"" in your PR.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,668,2018-03-20T08:14:43Z,2019-05-23T09:06:15Z,2019-05-23T09:10:53Z,MERGED,True,1063,0,14,https://github.com/nikhilap1,New Ethertype protocol for Arista: Arista Vendor Specific Protocol,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/668,https://github.com/fxlb,9,https://github.com/the-tcpdump-group/tcpdump/pull/668#issuecomment-490756514,"Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp
UTC timestamp value in IEEE 1588 time of day format (either 64-bit or 48-bit) with the lower 32-bits representing nanoseconds and upper bits representing seconds.
Sample tcpdump output:
 09:49:13.540584 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x20, Timestamp (48-bit): Seconds 31513, Nanoseconds 565572367, 
 09:49:23.197079 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x10, Timestamp TAI(64-bit): Seconds: 1519811363, Nanoseconds: 258347943,",Use the new GET_ macros instead of EXTRACT_ ones (See 176e182 and ee68aa3).,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,668,2018-03-20T08:14:43Z,2019-05-23T09:06:15Z,2019-05-23T09:10:53Z,MERGED,True,1063,0,14,https://github.com/nikhilap1,New Ethertype protocol for Arista: Arista Vendor Specific Protocol,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/668,https://github.com/nikhilap1,10,https://github.com/the-tcpdump-group/tcpdump/pull/668#issuecomment-491688981,"Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp
UTC timestamp value in IEEE 1588 time of day format (either 64-bit or 48-bit) with the lower 32-bits representing nanoseconds and upper bits representing seconds.
Sample tcpdump output:
 09:49:13.540584 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x20, Timestamp (48-bit): Seconds 31513, Nanoseconds 565572367, 
 09:49:23.197079 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x10, Timestamp TAI(64-bit): Seconds: 1519811363, Nanoseconds: 258347943,","@fxlb: I changed to GET_*.  I also updated the *.out files and the pcap file.
I tried to re-base my branch to get rid of the ""Merge remote-tracking branch"" commit but that resulted in merge conflicts when it was trying to re-base around 450 commits. (The merge conflicts were not related to my changes). If that particular commit is not acceptable, I can create another PR",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,668,2018-03-20T08:14:43Z,2019-05-23T09:06:15Z,2019-05-23T09:10:53Z,MERGED,True,1063,0,14,https://github.com/nikhilap1,New Ethertype protocol for Arista: Arista Vendor Specific Protocol,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/668,https://github.com/infrastation,11,https://github.com/the-tcpdump-group/tcpdump/pull/668#issuecomment-492625852,"Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp
UTC timestamp value in IEEE 1588 time of day format (either 64-bit or 48-bit) with the lower 32-bits representing nanoseconds and upper bits representing seconds.
Sample tcpdump output:
 09:49:13.540584 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x20, Timestamp (48-bit): Seconds 31513, Nanoseconds 565572367, 
 09:49:23.197079 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x10, Timestamp TAI(64-bit): Seconds: 1519811363, Nanoseconds: 258347943,","A hard reset will delete commits, in case those happen to be not the commits you want to delete, it will give you a peace of mind if you make a backup of the whole project before doing that.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,668,2018-03-20T08:14:43Z,2019-05-23T09:06:15Z,2019-05-23T09:10:53Z,MERGED,True,1063,0,14,https://github.com/nikhilap1,New Ethertype protocol for Arista: Arista Vendor Specific Protocol,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/668,https://github.com/fxlb,12,https://github.com/the-tcpdump-group/tcpdump/pull/668#issuecomment-492641460,"Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp
UTC timestamp value in IEEE 1588 time of day format (either 64-bit or 48-bit) with the lower 32-bits representing nanoseconds and upper bits representing seconds.
Sample tcpdump output:
 09:49:13.540584 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x20, Timestamp (48-bit): Seconds 31513, Nanoseconds 565572367, 
 09:49:23.197079 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x10, Timestamp TAI(64-bit): Seconds: 1519811363, Nanoseconds: 258347943,","it will give you a peace of mind if you make a backup of the whole project before doing that.

Even for peace of mind, a backup of the whole project is not necessary.
Your can do:
git co a-branch; git co -b a-branch-save; git co -",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,668,2018-03-20T08:14:43Z,2019-05-23T09:06:15Z,2019-05-23T09:10:53Z,MERGED,True,1063,0,14,https://github.com/nikhilap1,New Ethertype protocol for Arista: Arista Vendor Specific Protocol,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/668,https://github.com/nikhilap1,13,https://github.com/the-tcpdump-group/tcpdump/pull/668#issuecomment-492668110,"Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp
UTC timestamp value in IEEE 1588 time of day format (either 64-bit or 48-bit) with the lower 32-bits representing nanoseconds and upper bits representing seconds.
Sample tcpdump output:
 09:49:13.540584 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x20, Timestamp (48-bit): Seconds 31513, Nanoseconds 565572367, 
 09:49:23.197079 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x10, Timestamp TAI(64-bit): Seconds: 1519811363, Nanoseconds: 258347943,","I tried other alternatives, nothing seems to work. Should I create a new PR?
Merging this PR shouldn't wouldn't show the bad commit based on my previous such experience though.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,668,2018-03-20T08:14:43Z,2019-05-23T09:06:15Z,2019-05-23T09:10:53Z,MERGED,True,1063,0,14,https://github.com/nikhilap1,New Ethertype protocol for Arista: Arista Vendor Specific Protocol,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/668,https://github.com/fxlb,14,https://github.com/the-tcpdump-group/tcpdump/pull/668#issuecomment-493044828,"Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp
UTC timestamp value in IEEE 1588 time of day format (either 64-bit or 48-bit) with the lower 32-bits representing nanoseconds and upper bits representing seconds.
Sample tcpdump output:
 09:49:13.540584 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x20, Timestamp (48-bit): Seconds 31513, Nanoseconds 565572367, 
 09:49:23.197079 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x10, Timestamp TAI(64-bit): Seconds: 1519811363, Nanoseconds: 258347943,","Merging this PR shouldn't wouldn't show the bad commit based on my previous such experience though.

The ""Merge remote-tracking branch 'original/master' into avsp"" make a not very readable git history:
a0b1f024 Address some review comments
0ba34d21 Merge remote-tracking branch 'original/master' into avsp
...
[451 commits]
...
5e7c1a31 New Ethertype protocol for Arista: Arista Vendor Specific Protocol


Should I create a new PR?

I don't think a new PR is necessary.
This should work:
@nikhilap1 [UPDATED]
# Save your current branch 
git branch -m avsp avsp-save

git checkout master

git pull https://github.com/the-tcpdump-group/tcpdump.git master

git checkout -b avsp

# [UPDATED part, this simplifies the update]
# Build the patch and apply it
git diff --binary beacedb0b2b2e4ceb1b8b626b94f66ba592356a4 avsp-save > arista.patch
git apply arista.patch

# Do the updates/commit(s)

git push -f",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,668,2018-03-20T08:14:43Z,2019-05-23T09:06:15Z,2019-05-23T09:10:53Z,MERGED,True,1063,0,14,https://github.com/nikhilap1,New Ethertype protocol for Arista: Arista Vendor Specific Protocol,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/668,https://github.com/fxlb,15,https://github.com/the-tcpdump-group/tcpdump/pull/668#issuecomment-493408471,"Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp
UTC timestamp value in IEEE 1588 time of day format (either 64-bit or 48-bit) with the lower 32-bits representing nanoseconds and upper bits representing seconds.
Sample tcpdump output:
 09:49:13.540584 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x20, Timestamp (48-bit): Seconds 31513, Nanoseconds 565572367, 
 09:49:23.197079 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x10, Timestamp TAI(64-bit): Seconds: 1519811363, Nanoseconds: 258347943,","tried other alternatives, nothing seems to work

@nikhilap1
Simpler solution now available, see my previous comment.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,668,2018-03-20T08:14:43Z,2019-05-23T09:06:15Z,2019-05-23T09:10:53Z,MERGED,True,1063,0,14,https://github.com/nikhilap1,New Ethertype protocol for Arista: Arista Vendor Specific Protocol,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/668,https://github.com/fxlb,16,https://github.com/the-tcpdump-group/tcpdump/pull/668#issuecomment-493426937,"Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp
UTC timestamp value in IEEE 1588 time of day format (either 64-bit or 48-bit) with the lower 32-bits representing nanoseconds and upper bits representing seconds.
Sample tcpdump output:
 09:49:13.540584 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x20, Timestamp (48-bit): Seconds 31513, Nanoseconds 565572367, 
 09:49:23.197079 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x10, Timestamp TAI(64-bit): Seconds: 1519811363, Nanoseconds: 258347943,","Warnings with clang-7:
./print-arista.c:38:7: warning: unused variable 'buf' [-Wunused-variable]
 char buf[128];
      ^
./print-arista.c:22:73: warning: unused parameter 'len' [-Wunused-parameter]
arista_print_ethertype(netdissect_options *ndo, const u_char *bp, u_int len)
                                                                        ^",True,{'THUMBS_UP': ['https://github.com/nikhilap1']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,668,2018-03-20T08:14:43Z,2019-05-23T09:06:15Z,2019-05-23T09:10:53Z,MERGED,True,1063,0,14,https://github.com/nikhilap1,New Ethertype protocol for Arista: Arista Vendor Specific Protocol,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/668,https://github.com/nikhilap1,17,https://github.com/the-tcpdump-group/tcpdump/pull/668#issuecomment-493681528,"Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp
UTC timestamp value in IEEE 1588 time of day format (either 64-bit or 48-bit) with the lower 32-bits representing nanoseconds and upper bits representing seconds.
Sample tcpdump output:
 09:49:13.540584 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x20, Timestamp (48-bit): Seconds 31513, Nanoseconds 565572367, 
 09:49:23.197079 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x10, Timestamp TAI(64-bit): Seconds: 1519811363, Nanoseconds: 258347943,",Thanks @fxlb. Shows just a single commit now. I fixed the warnings as well,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,668,2018-03-20T08:14:43Z,2019-05-23T09:06:15Z,2019-05-23T09:10:53Z,MERGED,True,1063,0,14,https://github.com/nikhilap1,New Ethertype protocol for Arista: Arista Vendor Specific Protocol,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/668,https://github.com/fxlb,18,https://github.com/the-tcpdump-group/tcpdump/pull/668#issuecomment-493954054,"Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp
UTC timestamp value in IEEE 1588 time of day format (either 64-bit or 48-bit) with the lower 32-bits representing nanoseconds and upper bits representing seconds.
Sample tcpdump output:
 09:49:13.540584 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x20, Timestamp (48-bit): Seconds 31513, Nanoseconds 565572367, 
 09:49:23.197079 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x10, Timestamp TAI(64-bit): Seconds: 1519811363, Nanoseconds: 258347943,","Good, the merge is near. Just a few comments.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,668,2018-03-20T08:14:43Z,2019-05-23T09:06:15Z,2019-05-23T09:10:53Z,MERGED,True,1063,0,14,https://github.com/nikhilap1,New Ethertype protocol for Arista: Arista Vendor Specific Protocol,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/668,https://github.com/fxlb,19,https://github.com/the-tcpdump-group/tcpdump/pull/668#issuecomment-493954548,"Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp
UTC timestamp value in IEEE 1588 time of day format (either 64-bit or 48-bit) with the lower 32-bits representing nanoseconds and upper bits representing seconds.
Sample tcpdump output:
 09:49:13.540584 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x20, Timestamp (48-bit): Seconds 31513, Nanoseconds 565572367, 
 09:49:23.197079 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x10, Timestamp TAI(64-bit): Seconds: 1519811363, Nanoseconds: 258347943,","The new GET_ macros do the bounds checks with a setjmp/longjmp logic. Example:
/* part of extract.h */

static inline uint16_t
get_be_u_2(netdissect_options *ndo, const u_char *p)
{
        if (!ND_TTEST_2(p))
                longjmp(ndo->ndo_truncated, 1);
        return EXTRACT_BE_U_2(p);
}

[...]

#define GET_BE_U_2(p) get_be_u_2(ndo, (const u_char *)(p))

Thus you can remove the ND_TCHECK_ macros (print-arista.c, lines 29, 45, 52).
And you have to add in print-arista.c, line 29:
ndo->ndo_protocol = ""arista"";",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,668,2018-03-20T08:14:43Z,2019-05-23T09:06:15Z,2019-05-23T09:10:53Z,MERGED,True,1063,0,14,https://github.com/nikhilap1,New Ethertype protocol for Arista: Arista Vendor Specific Protocol,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/668,https://github.com/nikhilap1,20,https://github.com/the-tcpdump-group/tcpdump/pull/668#issuecomment-494001734,"Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp
UTC timestamp value in IEEE 1588 time of day format (either 64-bit or 48-bit) with the lower 32-bits representing nanoseconds and upper bits representing seconds.
Sample tcpdump output:
 09:49:13.540584 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x20, Timestamp (48-bit): Seconds 31513, Nanoseconds 565572367, 
 09:49:23.197079 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x10, Timestamp TAI(64-bit): Seconds: 1519811363, Nanoseconds: 258347943,",@fxlb: Done.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,668,2018-03-20T08:14:43Z,2019-05-23T09:06:15Z,2019-05-23T09:10:53Z,MERGED,True,1063,0,14,https://github.com/nikhilap1,New Ethertype protocol for Arista: Arista Vendor Specific Protocol,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/668,https://github.com/fxlb,21,https://github.com/the-tcpdump-group/tcpdump/pull/668#issuecomment-495133181,"Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp
UTC timestamp value in IEEE 1588 time of day format (either 64-bit or 48-bit) with the lower 32-bits representing nanoseconds and upper bits representing seconds.
Sample tcpdump output:
 09:49:13.540584 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x20, Timestamp (48-bit): Seconds 31513, Nanoseconds 565572367, 
 09:49:23.197079 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x10, Timestamp TAI(64-bit): Seconds: 1519811363, Nanoseconds: 258347943,","Merged, Thanks for your patience.",True,{'HOORAY': ['https://github.com/nikhilap1']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,669,2018-03-27T14:30:47Z,,2021-07-11T19:02:04Z,OPEN,False,26,12,1,https://github.com/kjopek,Add support for HMAC based on sha256 (128b keys).,4,"['improvement', 'reviewed_needswork', 'needs-test-case']",https://github.com/the-tcpdump-group/tcpdump/pull/669,https://github.com/kjopek,1,https://github.com/the-tcpdump-group/tcpdump/pull/669,"Add support for HMAC based on SHA256 with 128 bits keys.
It can be used in the following form:
./tcpdump -nr ~/ipsec_dump.pcap -s0 -E ""0xXXXXXXXX@A.B.C.D aes256-cbc-hmac-sha256-128:[KEY1],0xXXXXXXXX@E.F.G.H aes256-cbc-hmac-sha256-128:[KEY2]""
Sponsored by: Digital Fingerprints","Add support for HMAC based on SHA256 with 128 bits keys.
It can be used in the following form:
./tcpdump -nr ~/ipsec_dump.pcap -s0 -E ""0xXXXXXXXX@A.B.C.D aes256-cbc-hmac-sha256-128:[KEY1],0xXXXXXXXX@E.F.G.H aes256-cbc-hmac-sha256-128:[KEY2]""
Sponsored by: Digital Fingerprints",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,669,2018-03-27T14:30:47Z,,2021-07-11T19:02:04Z,OPEN,False,26,12,1,https://github.com/kjopek,Add support for HMAC based on sha256 (128b keys).,4,"['improvement', 'reviewed_needswork', 'needs-test-case']",https://github.com/the-tcpdump-group/tcpdump/pull/669,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/669#issuecomment-877675326,"Add support for HMAC based on SHA256 with 128 bits keys.
It can be used in the following form:
./tcpdump -nr ~/ipsec_dump.pcap -s0 -E ""0xXXXXXXXX@A.B.C.D aes256-cbc-hmac-sha256-128:[KEY1],0xXXXXXXXX@E.F.G.H aes256-cbc-hmac-sha256-128:[KEY2]""
Sponsored by: Digital Fingerprints","And please, rebase on top of the-tcpdump-group:master.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,669,2018-03-27T14:30:47Z,,2021-07-11T19:02:04Z,OPEN,False,26,12,1,https://github.com/kjopek,Add support for HMAC based on sha256 (128b keys).,4,"['improvement', 'reviewed_needswork', 'needs-test-case']",https://github.com/the-tcpdump-group/tcpdump/pull/669,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/669#issuecomment-877791734,"Add support for HMAC based on SHA256 with 128 bits keys.
It can be used in the following form:
./tcpdump -nr ~/ipsec_dump.pcap -s0 -E ""0xXXXXXXXX@A.B.C.D aes256-cbc-hmac-sha256-128:[KEY1],0xXXXXXXXX@E.F.G.H aes256-cbc-hmac-sha256-128:[KEY2]""
Sponsored by: Digital Fingerprints","In addition to the previous comment, which still stands (merging from 3 years ago is not rebasing), you might want to read the file CONTRIBUTING.md (especially step 4), so you have a compiler feedback loop in your working copy.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,669,2018-03-27T14:30:47Z,,2021-07-11T19:02:04Z,OPEN,False,26,12,1,https://github.com/kjopek,Add support for HMAC based on sha256 (128b keys).,4,"['improvement', 'reviewed_needswork', 'needs-test-case']",https://github.com/the-tcpdump-group/tcpdump/pull/669,https://github.com/kjopek,4,https://github.com/the-tcpdump-group/tcpdump/pull/669#issuecomment-877807960,"Add support for HMAC based on SHA256 with 128 bits keys.
It can be used in the following form:
./tcpdump -nr ~/ipsec_dump.pcap -s0 -E ""0xXXXXXXXX@A.B.C.D aes256-cbc-hmac-sha256-128:[KEY1],0xXXXXXXXX@E.F.G.H aes256-cbc-hmac-sha256-128:[KEY2]""
Sponsored by: Digital Fingerprints","Thank you very much for all your comments and I am very sorry for breaking contributors' rules.
From what I see now, after 3+ years, this patch was wrong from the very beginning and here is my explanation why I think so.
The original patch was kind-of quick and therefore dirty hack to allow IPSEC debugging under certain configuration. Particularly, to make sure the encryption works as expected and data is correctly encrypted/decrypted. In my humble opinion, the pull request should have been splitted into at least two smaller ones:

First one to introduce strendswith function and use it where needed.
Second one to introduce additional primitive for packet authentication.

While the first one is rather obvious, the second one is tricky as the whole function relies on authlen variable which is used only for keeping length of hmac code and is required only to calculate correct offsets in the packet to decrypt it correctly. I see no other usage of authentication-related code in print-esp.c file. sa_list structure maintains authsecret and authsecret_len fields which are unpopulated and therefore does not play any role in printing ESP packets. In my humble opinion, tcpdump lacks hmac verification and this functionality could be added separately.
Summing up, my original intention was to enable ESP decryption for different ENC+AUTH scenario, but from my current perspective this pull request should be closed and I should create another one only to implement strendswith function. The remaining part (lack of auth support) should be discussed and added separately. I am leaving this PR open to allow further discussion.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,669,2018-03-27T14:30:47Z,,2021-07-11T19:02:04Z,OPEN,False,26,12,1,https://github.com/kjopek,Add support for HMAC based on sha256 (128b keys).,4,"['improvement', 'reviewed_needswork', 'needs-test-case']",https://github.com/the-tcpdump-group/tcpdump/pull/669,https://github.com/infrastation,5,https://github.com/the-tcpdump-group/tcpdump/pull/669#issuecomment-877846382,"Add support for HMAC based on SHA256 with 128 bits keys.
It can be used in the following form:
./tcpdump -nr ~/ipsec_dump.pcap -s0 -E ""0xXXXXXXXX@A.B.C.D aes256-cbc-hmac-sha256-128:[KEY1],0xXXXXXXXX@E.F.G.H aes256-cbc-hmac-sha256-128:[KEY2]""
Sponsored by: Digital Fingerprints","Thank you for the detailed comment. If you think it would make more sense to split the change into two commits, split it. If the first commit is useful on its own, it can be merged on its own. Would you like to take more time to state the decryption problem properly?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,670,2018-04-07T22:09:01Z,2018-04-09T00:21:05Z,2018-04-09T00:21:06Z,MERGED,True,24,1,2,https://github.com/GuyLewin,SIGUSR2 flushes the packet buffer,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/670,https://github.com/GuyLewin,1,https://github.com/the-tcpdump-group/tcpdump/pull/670,"Currently, if you want to download .pcap file while sniffing you'd have to either use -u or kill the process.
I want to use the existing SIGINFO handler to also flush the buffer.","Currently, if you want to download .pcap file while sniffing you'd have to either use -u or kill the process.
I want to use the existing SIGINFO handler to also flush the buffer.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,670,2018-04-07T22:09:01Z,2018-04-09T00:21:05Z,2018-04-09T00:21:06Z,MERGED,True,24,1,2,https://github.com/GuyLewin,SIGUSR2 flushes the packet buffer,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/670,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/670#issuecomment-379502851,"Currently, if you want to download .pcap file while sniffing you'd have to either use -u or kill the process.
I want to use the existing SIGINFO handler to also flush the buffer.","SIGINFO appears to be an oddly-chosen signal for this purpose; on BSD systems, it's intended as a way to force a program to dump out progress information by typing ^T.
Perhaps SIGUSR2 should be used, instead; that way, 1) it's the same on all UN*Xes and 2) it separates the ""print progress information"" functionality from the ""force flushing of the capture file"" functionality.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,670,2018-04-07T22:09:01Z,2018-04-09T00:21:05Z,2018-04-09T00:21:06Z,MERGED,True,24,1,2,https://github.com/GuyLewin,SIGUSR2 flushes the packet buffer,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/670,https://github.com/GuyLewin,3,https://github.com/the-tcpdump-group/tcpdump/pull/670#issuecomment-379503082,"Currently, if you want to download .pcap file while sniffing you'd have to either use -u or kill the process.
I want to use the existing SIGINFO handler to also flush the buffer.","I see what you're saying @guyharris , I just wanted to make it as simple as possible without ruining your interface.
Would you like me to create that in a new SIGUSR2 handler?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,670,2018-04-07T22:09:01Z,2018-04-09T00:21:05Z,2018-04-09T00:21:06Z,MERGED,True,24,1,2,https://github.com/GuyLewin,SIGUSR2 flushes the packet buffer,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/670,https://github.com/guyharris,4,https://github.com/the-tcpdump-group/tcpdump/pull/670#issuecomment-379503264,"Currently, if you want to download .pcap file while sniffing you'd have to either use -u or kill the process.
I want to use the existing SIGINFO handler to also flush the buffer.","Would you like me to create that in a new SIGUSR2 handler?

Yes.
You should also update the tcpdump man page to mention SIGUSR2 in a new paragraph, after the paragraph that mentions SIGINFO and SIGUSR1.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,670,2018-04-07T22:09:01Z,2018-04-09T00:21:05Z,2018-04-09T00:21:06Z,MERGED,True,24,1,2,https://github.com/GuyLewin,SIGUSR2 flushes the packet buffer,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/670,https://github.com/GuyLewin,5,https://github.com/the-tcpdump-group/tcpdump/pull/670#issuecomment-379504557,"Currently, if you want to download .pcap file while sniffing you'd have to either use -u or kill the process.
I want to use the existing SIGINFO handler to also flush the buffer.",@guyharris Does this look better?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,671,2018-04-15T17:43:57Z,2018-04-15T17:52:53Z,2018-04-15T17:52:53Z,MERGED,True,1,1,1,https://github.com/eric-s-raymond,Fix a broken font escape in the manual page.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/671,https://github.com/eric-s-raymond,1,https://github.com/the-tcpdump-group/tcpdump/pull/671,Just what it says on the tin. \P is invalid.,Just what it says on the tin. \P is invalid.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,673,2018-04-23T06:39:54Z,2018-05-02T11:51:57Z,2018-05-02T11:52:01Z,MERGED,True,51,2,2,https://github.com/jeremybrowne,Resync SMI list against Wireshark,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/673,https://github.com/jeremybrowne,1,https://github.com/the-tcpdump-group/tcpdump/pull/673,"I realize #655 exists to automate pulling in the entire IANA entireprise-numbers database (only as OUIs, I think, not SMIs), however it's fairly quiet recently and already has conflicts to resolve prior to a future merge.
In the meantime, this change resyncs the SMI list against Wireshark master's current epan/sminmpec.h, theoretically a fairly comprehensive set of the vendors people frequently encounter. I've been patching a few of them into my distribution of tcpdump for years and thought I should upstream.","I realize #655 exists to automate pulling in the entire IANA entireprise-numbers database (only as OUIs, I think, not SMIs), however it's fairly quiet recently and already has conflicts to resolve prior to a future merge.
In the meantime, this change resyncs the SMI list against Wireshark master's current epan/sminmpec.h, theoretically a fairly comprehensive set of the vendors people frequently encounter. I've been patching a few of them into my distribution of tcpdump for years and thought I should upstream.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,673,2018-04-23T06:39:54Z,2018-05-02T11:51:57Z,2018-05-02T11:52:01Z,MERGED,True,51,2,2,https://github.com/jeremybrowne,Resync SMI list against Wireshark,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/673,https://github.com/sgeto,2,https://github.com/the-tcpdump-group/tcpdump/pull/673#issuecomment-383513600,"I realize #655 exists to automate pulling in the entire IANA entireprise-numbers database (only as OUIs, I think, not SMIs), however it's fairly quiet recently and already has conflicts to resolve prior to a future merge.
In the meantime, this change resyncs the SMI list against Wireshark master's current epan/sminmpec.h, theoretically a fairly comprehensive set of the vendors people frequently encounter. I've been patching a few of them into my distribution of tcpdump for years and thought I should upstream.","Like all of Wireshark, epan/sminmpec.h is GPL. The codes, of course, aren't. How is that to be interpreted?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,673,2018-04-23T06:39:54Z,2018-05-02T11:51:57Z,2018-05-02T11:52:01Z,MERGED,True,51,2,2,https://github.com/jeremybrowne,Resync SMI list against Wireshark,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/673,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/673#issuecomment-385950621,"I realize #655 exists to automate pulling in the entire IANA entireprise-numbers database (only as OUIs, I think, not SMIs), however it's fairly quiet recently and already has conflicts to resolve prior to a future merge.
In the meantime, this change resyncs the SMI list against Wireshark master's current epan/sminmpec.h, theoretically a fairly comprehensive set of the vendors people frequently encounter. I've been patching a few of them into my distribution of tcpdump for years and thought I should upstream.","It seems to me, macros and array elements do not make enough sense as source code for the licensing differences to matter in this case.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,675,2018-05-11T12:32:04Z,2018-05-17T21:23:25Z,2018-05-19T05:32:46Z,MERGED,True,1,1,1,https://github.com/herwinw,Fix truncation checks in CONTRIBUTING,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/675,https://github.com/herwinw,1,https://github.com/the-tcpdump-group/tcpdump/pull/675,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,675,2018-05-11T12:32:04Z,2018-05-17T21:23:25Z,2018-05-19T05:32:46Z,MERGED,True,1,1,1,https://github.com/herwinw,Fix truncation checks in CONTRIBUTING,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/675,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/675#issuecomment-390016602,,Thank you.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,678,2018-05-19T16:58:36Z,2018-05-19T18:19:10Z,2018-11-24T16:34:44Z,CLOSED,False,28,4,4,https://github.com/teknoraver,Add option to show packet direction,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/678,https://github.com/teknoraver,1,https://github.com/the-tcpdump-group/tcpdump/pull/678,"Add a -Q show option to show the packet direction. Example:
$ tcpdump -ni enp9s0 -Q show
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on enp9s0, link-type EN10MB (Ethernet), capture size 262144 bytes
<  18:57:39.586150 IP 192.30.253.125.443 > 192.168.85.6.42512: Flags [P.], seq 3024695923:3024695954, ack 1359064726, win 31, options [nop,nop,TS val 919701565 ecr 2600782278], length 31
 > 18:57:39.586397 IP 192.168.85.6.42512 > 192.30.253.125.443: Flags [P.], seq 1:36, ack 31, win 329, options [nop,nop,TS val 2600842337 ecr 919701565], length 35
<  18:57:39.683849 IP 192.30.253.125.443 > 192.168.85.6.42512: Flags [.], ack 36, win 31, options [nop,nop,TS val 919701590 ecr 2600842337], length 0
<  18:57:39.926715 STP 802.1d, Config, Flags [none], bridge-id 8000.00:90:a9:f0:73:d1.8001, length 43
 > 18:57:40.139927 IP 192.168.85.6.44592 > 192.168.85.34.443: Flags [P.], seq 1812804671:1812804898, ack 1090051569, win 1394, options [nop,nop,TS val 2115702367 ecr 3472791082], length 22

Depends on the-tcpdump-group/libpcap#719","Add a -Q show option to show the packet direction. Example:
$ tcpdump -ni enp9s0 -Q show
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on enp9s0, link-type EN10MB (Ethernet), capture size 262144 bytes
<  18:57:39.586150 IP 192.30.253.125.443 > 192.168.85.6.42512: Flags [P.], seq 3024695923:3024695954, ack 1359064726, win 31, options [nop,nop,TS val 919701565 ecr 2600782278], length 31
 > 18:57:39.586397 IP 192.168.85.6.42512 > 192.30.253.125.443: Flags [P.], seq 1:36, ack 31, win 329, options [nop,nop,TS val 2600842337 ecr 919701565], length 35
<  18:57:39.683849 IP 192.30.253.125.443 > 192.168.85.6.42512: Flags [.], ack 36, win 31, options [nop,nop,TS val 919701590 ecr 2600842337], length 0
<  18:57:39.926715 STP 802.1d, Config, Flags [none], bridge-id 8000.00:90:a9:f0:73:d1.8001, length 43
 > 18:57:40.139927 IP 192.168.85.6.44592 > 192.168.85.34.443: Flags [P.], seq 1812804671:1812804898, ack 1090051569, win 1394, options [nop,nop,TS val 2115702367 ecr 3472791082], length 22

Depends on the-tcpdump-group/libpcap#719",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,678,2018-05-19T16:58:36Z,2018-05-19T18:19:10Z,2018-11-24T16:34:44Z,CLOSED,False,28,4,4,https://github.com/teknoraver,Add option to show packet direction,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/678,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/678#issuecomment-390423265,"Add a -Q show option to show the packet direction. Example:
$ tcpdump -ni enp9s0 -Q show
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on enp9s0, link-type EN10MB (Ethernet), capture size 262144 bytes
<  18:57:39.586150 IP 192.30.253.125.443 > 192.168.85.6.42512: Flags [P.], seq 3024695923:3024695954, ack 1359064726, win 31, options [nop,nop,TS val 919701565 ecr 2600782278], length 31
 > 18:57:39.586397 IP 192.168.85.6.42512 > 192.30.253.125.443: Flags [P.], seq 1:36, ack 31, win 329, options [nop,nop,TS val 2600842337 ecr 919701565], length 35
<  18:57:39.683849 IP 192.30.253.125.443 > 192.168.85.6.42512: Flags [.], ack 36, win 31, options [nop,nop,TS val 919701590 ecr 2600842337], length 0
<  18:57:39.926715 STP 802.1d, Config, Flags [none], bridge-id 8000.00:90:a9:f0:73:d1.8001, length 43
 > 18:57:40.139927 IP 192.168.85.6.44592 > 192.168.85.34.443: Flags [P.], seq 1812804671:1812804898, ack 1090051569, win 1394, options [nop,nop,TS val 2115702367 ecr 3472791082], length 22

Depends on the-tcpdump-group/libpcap#719","Depends on the-tcpdump-group/libpcap#719

That's a change that I refuse to accept, as it breaks the libpcap ABI.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,678,2018-05-19T16:58:36Z,2018-05-19T18:19:10Z,2018-11-24T16:34:44Z,CLOSED,False,28,4,4,https://github.com/teknoraver,Add option to show packet direction,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/678,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/678#issuecomment-414599513,"Add a -Q show option to show the packet direction. Example:
$ tcpdump -ni enp9s0 -Q show
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on enp9s0, link-type EN10MB (Ethernet), capture size 262144 bytes
<  18:57:39.586150 IP 192.30.253.125.443 > 192.168.85.6.42512: Flags [P.], seq 3024695923:3024695954, ack 1359064726, win 31, options [nop,nop,TS val 919701565 ecr 2600782278], length 31
 > 18:57:39.586397 IP 192.168.85.6.42512 > 192.30.253.125.443: Flags [P.], seq 1:36, ack 31, win 329, options [nop,nop,TS val 2600842337 ecr 919701565], length 35
<  18:57:39.683849 IP 192.30.253.125.443 > 192.168.85.6.42512: Flags [.], ack 36, win 31, options [nop,nop,TS val 919701590 ecr 2600842337], length 0
<  18:57:39.926715 STP 802.1d, Config, Flags [none], bridge-id 8000.00:90:a9:f0:73:d1.8001, length 43
 > 18:57:40.139927 IP 192.168.85.6.44592 > 192.168.85.34.443: Flags [P.], seq 1812804671:1812804898, ack 1090051569, win 1394, options [nop,nop,TS val 2115702367 ecr 3472791082], length 22

Depends on the-tcpdump-group/libpcap#719","The Linux SLL/SLL2 data link types solve this problem by having the direction field in their DLT-specific structure, rather than in the common header.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,678,2018-05-19T16:58:36Z,2018-05-19T18:19:10Z,2018-11-24T16:34:44Z,CLOSED,False,28,4,4,https://github.com/teknoraver,Add option to show packet direction,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/678,https://github.com/teknoraver,4,https://github.com/the-tcpdump-group/tcpdump/pull/678#issuecomment-441334686,"Add a -Q show option to show the packet direction. Example:
$ tcpdump -ni enp9s0 -Q show
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on enp9s0, link-type EN10MB (Ethernet), capture size 262144 bytes
<  18:57:39.586150 IP 192.30.253.125.443 > 192.168.85.6.42512: Flags [P.], seq 3024695923:3024695954, ack 1359064726, win 31, options [nop,nop,TS val 919701565 ecr 2600782278], length 31
 > 18:57:39.586397 IP 192.168.85.6.42512 > 192.30.253.125.443: Flags [P.], seq 1:36, ack 31, win 329, options [nop,nop,TS val 2600842337 ecr 919701565], length 35
<  18:57:39.683849 IP 192.30.253.125.443 > 192.168.85.6.42512: Flags [.], ack 36, win 31, options [nop,nop,TS val 919701590 ecr 2600842337], length 0
<  18:57:39.926715 STP 802.1d, Config, Flags [none], bridge-id 8000.00:90:a9:f0:73:d1.8001, length 43
 > 18:57:40.139927 IP 192.168.85.6.44592 > 192.168.85.34.443: Flags [P.], seq 1812804671:1812804898, ack 1090051569, win 1394, options [nop,nop,TS val 2115702367 ecr 3472791082], length 22

Depends on the-tcpdump-group/libpcap#719",@infrastation What are the disadvantages of the SLL link type? Can we always put an interface in cooked mode without issues?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,678,2018-05-19T16:58:36Z,2018-05-19T18:19:10Z,2018-11-24T16:34:44Z,CLOSED,False,28,4,4,https://github.com/teknoraver,Add option to show packet direction,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/678,https://github.com/guyharris,5,https://github.com/the-tcpdump-group/tcpdump/pull/678#issuecomment-441345148,"Add a -Q show option to show the packet direction. Example:
$ tcpdump -ni enp9s0 -Q show
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on enp9s0, link-type EN10MB (Ethernet), capture size 262144 bytes
<  18:57:39.586150 IP 192.30.253.125.443 > 192.168.85.6.42512: Flags [P.], seq 3024695923:3024695954, ack 1359064726, win 31, options [nop,nop,TS val 919701565 ecr 2600782278], length 31
 > 18:57:39.586397 IP 192.168.85.6.42512 > 192.30.253.125.443: Flags [P.], seq 1:36, ack 31, win 329, options [nop,nop,TS val 2600842337 ecr 919701565], length 35
<  18:57:39.683849 IP 192.30.253.125.443 > 192.168.85.6.42512: Flags [.], ack 36, win 31, options [nop,nop,TS val 919701590 ecr 2600842337], length 0
<  18:57:39.926715 STP 802.1d, Config, Flags [none], bridge-id 8000.00:90:a9:f0:73:d1.8001, length 43
 > 18:57:40.139927 IP 192.168.85.6.44592 > 192.168.85.34.443: Flags [P.], seq 1812804671:1812804898, ack 1090051569, win 1394, options [nop,nop,TS val 2115702367 ecr 3472791082], length 22

Depends on the-tcpdump-group/libpcap#719","What are the disadvantages of the SLL link type?

The link-layer header is stripped off (except for, it appears, frames captured on an 802.11 virtual-whatever-it's-called in monitor mode), so, for example, you can't see the Ethernet source and destination address and Ethernet type fields for Ethernet packets.

Can we always put an interface in cooked mode without issues?

I suspect there would be people raising issues about not seeing link-layer headers.
So, at most, we could offer, for all devices on Linux, an option to select DLT_LINUX_SLL and DLT_LINUX_SLL2 instead of the native header; you'd specify that with tcpdump and TShark with the -y flag (-y LINUX_SLL or -y LINUX_SLL2), and specify it in the Wireshark GUI by selecting ""Linux cooked capture"", or whatever it's called, rather than ""Ethernet"" or whatever.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,678,2018-05-19T16:58:36Z,2018-05-19T18:19:10Z,2018-11-24T16:34:44Z,CLOSED,False,28,4,4,https://github.com/teknoraver,Add option to show packet direction,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/678,https://github.com/teknoraver,6,https://github.com/the-tcpdump-group/tcpdump/pull/678#issuecomment-441379569,"Add a -Q show option to show the packet direction. Example:
$ tcpdump -ni enp9s0 -Q show
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on enp9s0, link-type EN10MB (Ethernet), capture size 262144 bytes
<  18:57:39.586150 IP 192.30.253.125.443 > 192.168.85.6.42512: Flags [P.], seq 3024695923:3024695954, ack 1359064726, win 31, options [nop,nop,TS val 919701565 ecr 2600782278], length 31
 > 18:57:39.586397 IP 192.168.85.6.42512 > 192.30.253.125.443: Flags [P.], seq 1:36, ack 31, win 329, options [nop,nop,TS val 2600842337 ecr 919701565], length 35
<  18:57:39.683849 IP 192.30.253.125.443 > 192.168.85.6.42512: Flags [.], ack 36, win 31, options [nop,nop,TS val 919701590 ecr 2600842337], length 0
<  18:57:39.926715 STP 802.1d, Config, Flags [none], bridge-id 8000.00:90:a9:f0:73:d1.8001, length 43
 > 18:57:40.139927 IP 192.168.85.6.44592 > 192.168.85.34.443: Flags [P.], seq 1812804671:1812804898, ack 1090051569, win 1394, options [nop,nop,TS val 2115702367 ecr 3472791082], length 22

Depends on the-tcpdump-group/libpcap#719","I did it in #719, and the prerequisite patch for libpcap is the-tcpdump-group/libpcap/pull/784",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,679,2018-05-21T03:04:35Z,,2019-05-03T01:26:08Z,OPEN,False,22,4,3,https://github.com/sgeto,Support crypto (AKA eay) with MSVC as well,1,"['improvement', 'windows']",https://github.com/the-tcpdump-group/tcpdump/pull/679,https://github.com/sgeto,1,https://github.com/the-tcpdump-group/tcpdump/pull/679,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,679,2018-05-21T03:04:35Z,,2019-05-03T01:26:08Z,OPEN,False,22,4,3,https://github.com/sgeto,Support crypto (AKA eay) with MSVC as well,1,"['improvement', 'windows']",https://github.com/the-tcpdump-group/tcpdump/pull/679,https://github.com/sgeto,2,https://github.com/the-tcpdump-group/tcpdump/pull/679#issuecomment-390546748,,"At last:
https://ci.appveyor.com/project/guyharris/tcpdump/build/747#L143",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,679,2018-05-21T03:04:35Z,,2019-05-03T01:26:08Z,OPEN,False,22,4,3,https://github.com/sgeto,Support crypto (AKA eay) with MSVC as well,1,"['improvement', 'windows']",https://github.com/the-tcpdump-group/tcpdump/pull/679,https://github.com/gvanem,3,https://github.com/the-tcpdump-group/tcpdump/pull/679#issuecomment-390619138,,Where does c:\Win32-OpenSSL and the ancient libeay32.dll come from? A built-in in AppVeyor? The OpenSSL DLLs have been called libcrypto.dll and libssl.dll for quite some time now.,True,{'THUMBS_UP': ['https://github.com/mcr']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,679,2018-05-21T03:04:35Z,,2019-05-03T01:26:08Z,OPEN,False,22,4,3,https://github.com/sgeto,Support crypto (AKA eay) with MSVC as well,1,"['improvement', 'windows']",https://github.com/the-tcpdump-group/tcpdump/pull/679,https://github.com/sgeto,4,https://github.com/the-tcpdump-group/tcpdump/pull/679#issuecomment-390890092,,"It's one of these http://www.slproweb.com/products/Win32OpenSSL.html
And it's very recent (probable OpenSSL-1.0.2o or so).
I don't know why OpenSSL's VC++ libs have a different name. I always thought that naming scheme is like windump vs. tcpdump.
And when I follow OpenSSL building instructions for MSVC (in INSTALL.W32) the libs it spits out are these.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,679,2018-05-21T03:04:35Z,,2019-05-03T01:26:08Z,OPEN,False,22,4,3,https://github.com/sgeto,Support crypto (AKA eay) with MSVC as well,1,"['improvement', 'windows']",https://github.com/the-tcpdump-group/tcpdump/pull/679,https://github.com/gvanem,5,https://github.com/the-tcpdump-group/tcpdump/pull/679#issuecomment-390939232,,"That was changed in April-2017 (?). If I do a:
perl Configure VC-WIN32 --prefix=%cd
nmake

on current master, I get these:
.\libssl-1_1.dll
.\libcrypto-1_1.dll
.\libcrypto.lib
.\libssl.lib",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,679,2018-05-21T03:04:35Z,,2019-05-03T01:26:08Z,OPEN,False,22,4,3,https://github.com/sgeto,Support crypto (AKA eay) with MSVC as well,1,"['improvement', 'windows']",https://github.com/the-tcpdump-group/tcpdump/pull/679,https://github.com/sgeto,6,https://github.com/the-tcpdump-group/tcpdump/pull/679#issuecomment-391287115,,"um, simply nmake after configure?
And that works?
According to INSTALL.W32, you should do a nmake -f ms\ntdll.mak.
The versioning is different too. I get 1.0.2X and you have 1.1.0X.
Not sure really...",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,679,2018-05-21T03:04:35Z,,2019-05-03T01:26:08Z,OPEN,False,22,4,3,https://github.com/sgeto,Support crypto (AKA eay) with MSVC as well,1,"['improvement', 'windows']",https://github.com/the-tcpdump-group/tcpdump/pull/679,https://github.com/mcr,7,https://github.com/the-tcpdump-group/tcpdump/pull/679#issuecomment-488886696,,Rebase?  Can we be sure that we are building against an openssl that itself is the current release?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,680,2018-05-23T11:11:07Z,2018-05-24T18:47:13Z,2020-01-06T02:08:24Z,CLOSED,False,17,2,1,https://github.com/mruprich, We should use a separate input buffer as well ,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/680,https://github.com/mruprich,1,https://github.com/the-tcpdump-group/tcpdump/pull/680,The issue #586 still created some problems on ppc64(le) architectures. I think we should use separate input buffer as well and it should be the same size as the output buffer. Also I think we should use memset for both buffers or allocate them with calloc.,The issue #586 still created some problems on ppc64(le) architectures. I think we should use separate input buffer as well and it should be the same size as the output buffer. Also I think we should use memset for both buffers or allocate them with calloc.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,680,2018-05-23T11:11:07Z,2018-05-24T18:47:13Z,2020-01-06T02:08:24Z,CLOSED,False,17,2,1,https://github.com/mruprich, We should use a separate input buffer as well ,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/680,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/680#issuecomment-391491386,The issue #586 still created some problems on ppc64(le) architectures. I think we should use separate input buffer as well and it should be the same size as the output buffer. Also I think we should use memset for both buffers or allocate them with calloc.,"Where is this requirement that the input buffer for EVP_cipher() be a multiple of the cipher block size documented?
(For that matter, where is EVP_cipher() documented at all?)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,680,2018-05-23T11:11:07Z,2018-05-24T18:47:13Z,2020-01-06T02:08:24Z,CLOSED,False,17,2,1,https://github.com/mruprich, We should use a separate input buffer as well ,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/680,https://github.com/mcr,3,https://github.com/the-tcpdump-group/tcpdump/pull/680#issuecomment-391531706,The issue #586 still created some problems on ppc64(le) architectures. I think we should use separate input buffer as well and it should be the same size as the output buffer. Also I think we should use memset for both buffers or allocate them with calloc.,"Guy Harris <notifications@github.com> wrote:
 Where is this requirement that the input buffer for `EVP_cipher()` be a
 multiple of the cipher block size documented?

I think that I participated in a thread on openssl ML a month ago about why
this wasn't better documented :-)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,680,2018-05-23T11:11:07Z,2018-05-24T18:47:13Z,2020-01-06T02:08:24Z,CLOSED,False,17,2,1,https://github.com/mruprich, We should use a separate input buffer as well ,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/680,https://github.com/mruprich,4,https://github.com/the-tcpdump-group/tcpdump/pull/680#issuecomment-391602396,The issue #586 still created some problems on ppc64(le) architectures. I think we should use separate input buffer as well and it should be the same size as the output buffer. Also I think we should use memset for both buffers or allocate them with calloc.,"To be honest I haven't found the documentation on this function neither. But I have spoken with a colleague of mine in Red Hat who maintains openssl and he advised me to do it like this. He also said that the EVP_cipher() is kind of a low level function and that functions EVP_CipherInit, EVP_CipherUpdate and EVP_CipherFinal should be used instead.
I didn't want to rewrite the code that much so I went this way.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,680,2018-05-23T11:11:07Z,2018-05-24T18:47:13Z,2020-01-06T02:08:24Z,CLOSED,False,17,2,1,https://github.com/mruprich, We should use a separate input buffer as well ,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/680,https://github.com/guyharris,5,https://github.com/the-tcpdump-group/tcpdump/pull/680#issuecomment-391607087,The issue #586 still created some problems on ppc64(le) architectures. I think we should use separate input buffer as well and it should be the same size as the output buffer. Also I think we should use memset for both buffers or allocate them with calloc.,"To be honest I haven't found the documentation on this function neither. But I have spoken with a colleague of mine in Red Hat who maintains openssl and he advised me to do it like this.

So it's an undocumented requirement or, at least, a not-very-obviously-documented requirement.  They should either lift the requirement or document it more clearly.

He also said that the EVP_cipher() is kind of a low level function and that functions EVP_CipherInit, EVP_CipherUpdate and EVP_CipherFinal should be used instead.

Those are documented, but I saw nothing about any requirement imposed on the input buffer.
You should probably put a comment indicating that the reason why we're doing this is that (at least on some platforms) the input buffer must be a multiple of the cipher block size, and change the commit message to indicate that the underlying problem isn't that you need a separate buffer, the problem is that the buffer must be a multiple of the cipher block size. with zero padding.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,680,2018-05-23T11:11:07Z,2018-05-24T18:47:13Z,2020-01-06T02:08:24Z,CLOSED,False,17,2,1,https://github.com/mruprich, We should use a separate input buffer as well ,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/680,https://github.com/guyharris,6,https://github.com/the-tcpdump-group/tcpdump/pull/680#issuecomment-391611223,The issue #586 still created some problems on ppc64(le) architectures. I think we should use separate input buffer as well and it should be the same size as the output buffer. Also I think we should use memset for both buffers or allocate them with calloc.,"He also said that the EVP_cipher() is kind of a low level function and that functions EVP_CipherInit, EVP_CipherUpdate and EVP_CipherFinal should be used instead.

Could you also ask him whether the input buffer size restriction still applies if those routines are used and, if so, 1) whether that restriction is intentional, 2) if it's intentional, why it's not documented and 3) if it's not intentional, whether implementations that impose it (such as the little-endian 64-bit Power Architecture implementation, apparently) should be fixed or whether fixing it will still leave enough systems in the field with it unfixed, so that it should be made an intentional requirement ex post facto?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,680,2018-05-23T11:11:07Z,2018-05-24T18:47:13Z,2020-01-06T02:08:24Z,CLOSED,False,17,2,1,https://github.com/mruprich, We should use a separate input buffer as well ,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/680,https://github.com/mruprich,7,https://github.com/the-tcpdump-group/tcpdump/pull/680#issuecomment-391611604,The issue #586 still created some problems on ppc64(le) architectures. I think we should use separate input buffer as well and it should be the same size as the output buffer. Also I think we should use memset for both buffers or allocate them with calloc.,"You should probably put a comment indicating that the reason why we're doing this is that (at least on some platforms) the input buffer must be a multiple of the cipher block size

I think that here the problem was that the input buffer simply had a different size than the output buffer.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,680,2018-05-23T11:11:07Z,2018-05-24T18:47:13Z,2020-01-06T02:08:24Z,CLOSED,False,17,2,1,https://github.com/mruprich, We should use a separate input buffer as well ,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/680,https://github.com/mruprich,8,https://github.com/the-tcpdump-group/tcpdump/pull/680#issuecomment-391611714,The issue #586 still created some problems on ppc64(le) architectures. I think we should use separate input buffer as well and it should be the same size as the output buffer. Also I think we should use memset for both buffers or allocate them with calloc.,"Could you also ask him whether the input buffer size restriction still applies if those routines are used and, if so, 1) whether that restriction is intentional, 2) if it's intentional, why it's not documented and 3) if it's not intentional, whether implementations that impose it (such as the little-endian 64-bit Power Architecture implementation, apparently) should be fixed or whether fixing it will still leave enough systems in the field with it unfixed, so that it should be made an intentional requirement ex post facto?

I'll ask him and get back to you.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,680,2018-05-23T11:11:07Z,2018-05-24T18:47:13Z,2020-01-06T02:08:24Z,CLOSED,False,17,2,1,https://github.com/mruprich, We should use a separate input buffer as well ,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/680,https://github.com/guyharris,9,https://github.com/the-tcpdump-group/tcpdump/pull/680#issuecomment-391622038,The issue #586 still created some problems on ppc64(le) architectures. I think we should use separate input buffer as well and it should be the same size as the output buffer. Also I think we should use memset for both buffers or allocate them with calloc.,"I think that here the problem was that the input buffer simply had a different size than the output buffer.

OK, the OpenSSL 1.1.0 man page for EVP cipher routines says:

EVP_EncryptUpdate() encrypts inl bytes from the buffer in and writes the encrypted version to out. This function can be called multiple times to encrypt successive blocks of data. The amount of data written depends on the block alignment of the encrypted data: as a result the amount of data written may be anything from zero bytes to (inl + cipher_block_size - 1) so out should contain sufficient room. The actual number of bytes written is placed in outl. It also checks if in and out are partially overlapping, and if they are 0 is returned to indicate failure.
If padding is enabled (the default) then EVP_EncryptFinal_ex() encrypts the ""final"" data, that is any data that remains in a partial block. It uses standard block padding (aka PKCS padding) as described in the NOTES section, below. The encrypted final data is written to out which should have sufficient space for one cipher block. The number of bytes written is placed in outl. After this function is called the encryption operation is finished and no further calls to EVP_EncryptUpdate() should be made.
If padding is disabled then EVP_EncryptFinal_ex() will not encrypt any more data and it will return an error if any data remains in a partial block: that is if the total data length is not a multiple of the block size.
EVP_DecryptInit_ex(), EVP_DecryptUpdate() and EVP_DecryptFinal_ex() are the corresponding decryption operations. EVP_DecryptFinal() will return an error code if padding is enabled and the final block is not correctly formatted. The parameters and restrictions are identical to the encryption operations except that if padding is enabled the decrypted data buffer out passed to EVP_DecryptUpdate() should have sufficient room for (inl + cipher_block_size) bytes unless the cipher block size is 1 in which case inl bytes is sufficient.

...

EVP_CIPHER_CTX_set_padding() enables or disables padding. This function should be called after the context is set up for encryption or decryption with EVP_EncryptInit_ex(), EVP_DecryptInit_ex() or EVP_CipherInit_ex(). By default encryption operations are padded using standard block padding and the padding is checked and removed when decrypting. If the pad parameter is zero then no padding is performed, the total amount of data encrypted or decrypted must then be a multiple of the block size or an error will occur.

...

NOTES
Where possible the EVP interface to symmetric ciphers should be used in preference to the low level interfaces. This is because the code then becomes transparent to the cipher used and much more flexible. Additionally, the EVP interface will ensure the use of platform specific cryptographic acceleration such as AES-NI (the low level interfaces do not provide the guarantee).
PKCS padding works by adding n padding bytes of value n to make the total length of the encrypted data a multiple of the block size. Padding is always added so if the data is already a multiple of the block size n will equal the block size. For example if the block size is 8 and 11 bytes are to be encrypted then 5 padding bytes of value 5 will be added.
When decrypting the final block is checked to see if it has the correct form.
Although the decryption operation can produce an error if padding is enabled, it is not a strong test that the input data or key is correct. A random block has better than 1 in 256 chance of being of the correct format and problems with the input data earlier on will not produce a final decrypt error.
If padding is disabled then the decryption operation will always succeed if the total amount of data decrypted is a multiple of the block size.

This seems to indicate that, if padding is enabled (which is the default) 1) the input for decryption must be a multiple of the cipher block size and 2) the output block must be of size >= (inl + cipher_block_size).  This doesn't seem to be the same as ""they must be the same size"".",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,680,2018-05-23T11:11:07Z,2018-05-24T18:47:13Z,2020-01-06T02:08:24Z,CLOSED,False,17,2,1,https://github.com/mruprich, We should use a separate input buffer as well ,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/680,https://github.com/mruprich,10,https://github.com/the-tcpdump-group/tcpdump/pull/680#issuecomment-391633626,The issue #586 still created some problems on ppc64(le) architectures. I think we should use separate input buffer as well and it should be the same size as the output buffer. Also I think we should use memset for both buffers or allocate them with calloc.,"This seems to indicate that, if padding is enabled (which is the default) 1) the input for decryption must be a multiple of the cipher block size and 2) the output block must be of size >= (inl + cipher_block_size). This doesn't seem to be the same as ""they must be the same size"".

You are right, my mistake. I misinterpreted the message from my colleague. The input buffer must be a multiple of the cipher block size just as you say. I am not sure what the size of buf here is but perhaps I should still use the input_buffer and alloc it to the correct size?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,680,2018-05-23T11:11:07Z,2018-05-24T18:47:13Z,2020-01-06T02:08:24Z,CLOSED,False,17,2,1,https://github.com/mruprich, We should use a separate input buffer as well ,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/680,https://github.com/guyharris,11,https://github.com/the-tcpdump-group/tcpdump/pull/680#issuecomment-391819944,The issue #586 still created some problems on ppc64(le) architectures. I think we should use separate input buffer as well and it should be the same size as the output buffer. Also I think we should use memset for both buffers or allocate them with calloc.,"perhaps I should still use the input_buffer and alloc it to the correct size?

If, as noted, the input must be padded, with zeroes, to a multiple of the cipher block size, yes, that's what we need to do.
I've checked in change 4ba56b8 that should fix this - in both places where we do decryption.  It also updates comments and variable names, allocates the input buffer before allocating the output buffer, zeroes out only the padding in the input buffer, and ensures that we free the input buffer is freed if we fail to allocate the output buffer.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,680,2018-05-23T11:11:07Z,2018-05-24T18:47:13Z,2020-01-06T02:08:24Z,CLOSED,False,17,2,1,https://github.com/mruprich, We should use a separate input buffer as well ,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/680,https://github.com/mruprich,12,https://github.com/the-tcpdump-group/tcpdump/pull/680#issuecomment-392775857,The issue #586 still created some problems on ppc64(le) architectures. I think we should use separate input buffer as well and it should be the same size as the output buffer. Also I think we should use memset for both buffers or allocate them with calloc.,"@guyharris There is one little mistake left in the commit. When calling EVP_Cipher, the last parameter should be the buffer_size not len. I tried that on Power arch and it requires the buffer_size to run correctly. Also looking at the EVP_Cipher function in evp.h header file, even though it is not commented or documented, the function looks like this:
int EVP_Cipher(EVP_CIPHER_CTX *c, unsigned char *out, const unsigned char *in, unsigned int inl);
I believe that the inl might stand for ""in length"".",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,680,2018-05-23T11:11:07Z,2018-05-24T18:47:13Z,2020-01-06T02:08:24Z,CLOSED,False,17,2,1,https://github.com/mruprich, We should use a separate input buffer as well ,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/680,https://github.com/mruprich,13,https://github.com/the-tcpdump-group/tcpdump/pull/680#issuecomment-394613555,The issue #586 still created some problems on ppc64(le) architectures. I think we should use separate input buffer as well and it should be the same size as the output buffer. Also I think we should use memset for both buffers or allocate them with calloc.,Any update on the last comment?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,680,2018-05-23T11:11:07Z,2018-05-24T18:47:13Z,2020-01-06T02:08:24Z,CLOSED,False,17,2,1,https://github.com/mruprich, We should use a separate input buffer as well ,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/680,https://github.com/guyharris,14,https://github.com/the-tcpdump-group/tcpdump/pull/680#issuecomment-441343258,The issue #586 still created some problems on ppc64(le) architectures. I think we should use separate input buffer as well and it should be the same size as the output buffer. Also I think we should use memset for both buffers or allocate them with calloc.,"When calling EVP_Cipher, the last parameter should be the buffer_size not len.

Well, as noted, they don't bother documenting EVP_Cipher(), but the documentation for various of the EVP_ routines says of EVP_DecryptUpdate():

EVP_DecryptInit_ex(), EVP_DecryptUpdate() and EVP_DecryptFina\l_ex() are the corresponding decryption operations. EVP_DecryptFinal() will return an error code if padding is enabled and the final block is not correctly formatted. The parameters and restrictions are identical to the encryption operations except that if padding is enabled the decrypted data buffer out passed to EVP_DecryptUpdate() should have sufficient room for (inl + cipher_block_size) bytes unless the cipher block size is 1 in which case inl bytes is sufficient.

and says of EVP_EncryptUpdate():

EVP_EncryptUpdate() encrypts inl bytes from the buffer in and writes the encrypted version to out. This function can be called multiple times to encrypt successive blocks of data. The amount of data written depends on the block alignment of the encrypted data: as a result the amount of data written may be anything from zero bytes to (inl + cipher_block_size - 1) so out should contain sufficient room. The actual number of bytes written is placed in outl. It also checks if in and out are partially overlapping, and if they are 0 is returned to indicate failure.

I see nothing there to indicate one way or the other whether inl should include padding bytes or not.  ""In length"" could be ""size of the input buffer"" or ""number of bytes of input data, not including padding to a multiple of the block size"".
If I look at the NOTES section of the man page in question, it says:

PKCS padding works by adding n padding bytes of value n to make the total length of the encrypted data a multiple of the block size. Padding is always added so if the data is already a multiple of the block size n will equal the block size. For example if the block size is 8 and 11 bytes are to be encrypted then 5 padding bytes of value 5 will be added.
When decrypting the final block is checked to see if it has the correct form.
Although the decryption operation can produce an error if padding is enabled, it is not a strong test that the input data or key is correct. A random block has better than 1 in 256 chance of being of the correct format and problems with the input data earlier on will not produce a final decrypt error.
If padding is disabled then the decryption operation will always succeed if the total amount of data decrypted is a multiple of the block size.

So if PKCS padding is used, we need to pad with the number of padding bytes, not with zeroes.
So the question is whether the payloads we decrypt use PKCS padding.
ISAKMPv2 encrypted payload is one of them; it's described in section 3.14 of RFC 7296:
o  Padding MAY contain any value chosen by the sender, and MUST have
    a length that makes the combination of the payloads, the Padding,
    and the Pad Length to be a multiple of the encryption block size.
    This field is encrypted with the negotiated cipher.

o  Pad Length is the length of the Padding field.  The sender SHOULD
    set the Pad Length to the minimum value that makes the combination
    of the payloads, the Padding, and the Pad Length a multiple of the
    block size, but the recipient MUST accept any length that results
    in proper alignment.  This field is encrypted with the negotiated
    cipher.

""MAY contain any value chosen by the sender"" seem to indicate that it's not PKCS padding, as it's not guaranteed to be padded with bytes with a value equal to the number of padding bytes.
For that case, there appears to be no guarantee, even in valid packets, that the payload will be padded to a multiple of the encryption block size, given that, even though there's a MUST for the length in the first paragraph, there's also a MUST in ""MUST accept any length that results in proper alignment"" in the second paragraph - presumably ""proper alignment"" just means ""the length of the encrypted IKE payloads plus the length of the padding plus 1 byte for the padding length must be a multiple of 4"", so that the Integrity Checksum Data is aligned on a 4-byte boundary.
So, for that case, it appears that we should try to decrypt packets where the payload isn't padded to a multiple of the block size, can do so by padding with zeroes, and should not specify PKCS padding, as the padding shouldn't be checked for ""validity"".
The other one is ESP packet payloads; that's described in section 2 of RFC 2406:
2.4  Padding (for Encryption)

Several factors require or motivate use of the Padding field.

       o If an encryption algorithm is employed that requires the
         plaintext to be a multiple of some number of bytes, e.g.,
         the block size of a block cipher, the Padding field is used
         to fill the plaintext (consisting of the Payload Data, Pad
         Length and Next Header fields, as well as the Padding) to
         the size required by the algorithm.

       o Padding also may be required, irrespective of encryption
         algorithm requirements, to ensure that the resulting
         ciphertext terminates on a 4-byte boundary. Specifically,
         the Pad Length and Next Header fields must be right aligned
         within a 4-byte word, as illustrated in the ESP packet
         format figure above, to ensure that the Authentication Data
         field (if present) is aligned on a 4-byte boundary.

       o Padding beyond that required for the algorithm or alignment
         reasons cited above, may be used to conceal the actual
         length of the payload, in support of (partial) traffic flow
         confidentiality.  However, inclusion of such additional
         padding has adverse bandwidth implications and thus its use
         should be undertaken with care.

The sender MAY add 0-255 bytes of padding.  Inclusion of the Padding
field in an ESP packet is optional, but all implementations MUST
support generation and consumption of padding.

       a. For the purpose of ensuring that the bits to be encrypted
          are a multiple of the algorithm's blocksize (first bullet
          above), the padding computation applies to the Payload
          Data exclusive of the IV, the Pad Length, and Next Header
          fields.

       b. For the purposes of ensuring that the Authentication Data
          is aligned on a 4-byte boundary (second bullet above), the
          padding computation applies to the Payload Data inclusive
          of the IV, the Pad Length, and Next Header fields.

If Padding bytes are needed but the encryption algorithm does not
specify the padding contents, then the following default processing
MUST be used.  The Padding bytes are initialized with a series of
(unsigned, 1-byte) integer values.  The first padding byte appended
to the plaintext is numbered 1, with subsequent padding bytes making
up a monotonically increasing sequence: 1, 2, 3, ...  When this
padding scheme is employed, the receiver SHOULD inspect the Padding
field.  (This scheme was selected because of its relative simplicity,
ease of implementation in hardware, and because it offers limited
protection against certain forms of ""cut and paste"" attacks in the
absence of other integrity measures, if the receiver checks the
padding values upon decryption.)

Any encryption algorithm that requires Padding other than the default
described above, MUST define the Padding contents (e.g., zeros or
random data) and any required receiver processing of these Padding
bytes in an RFC specifying how the algorithm is used with ESP.  In
such circumstances, the content of the Padding field will be
determined by the encryption algorithm and mode selected and defined
in the corresponding algorithm RFC.  The relevant algorithm RFC MAY
specify that a receiver MUST inspect the Padding field or that a
receiver MUST inform senders of how the receiver will handle the
Padding field.

The latter seems to suggest that, for ESP payloads, the payload is supposed to be padded as appropriate, and we should not even try to decrypt payloads if the payload isn't a multiple of the block size.  It appears to be the sender's responsibility to pad the payload as appropriate for the encryption algorithm being used, and it's probably the responsibility of the crypto library to do the padding if the encryption algorithm specifies a type of padding.  I'm guessing the ""monotonically increasing sequence"" padding, however, would not be checked by the crypto library, as that's a requirement imposed by ESP, not by the encryption algorithm.  Unless there's a really easy way to determine whether we need to do that or not, using calls to the crypto library, I'm inclined not to bother checking the padding.

I tried that on Power arch and it requires the buffer_size to run correctly.

Then perhaps the OpenSSL people should document that.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,680,2018-05-23T11:11:07Z,2018-05-24T18:47:13Z,2020-01-06T02:08:24Z,CLOSED,False,17,2,1,https://github.com/mruprich, We should use a separate input buffer as well ,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/680,https://github.com/guyharris,15,https://github.com/the-tcpdump-group/tcpdump/pull/680#issuecomment-570976908,The issue #586 still created some problems on ppc64(le) architectures. I think we should use separate input buffer as well and it should be the same size as the output buffer. Also I think we should use memset for both buffers or allocate them with calloc.,"At least as I read both RFC 5996 section 3.14 and RFC 4303 section 2.4, the sender should pad the encrypted payload as necessary for decryption, so we don't need to copy the input buffer and pad it, we need to check to make sure the payload length is a multiple of what the cipher requires and reject it if not.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,682,2018-05-25T17:35:02Z,2019-01-29T00:32:58Z,2019-01-29T00:32:58Z,CLOSED,False,2,8,1,https://github.com/rixed,Add support for rpcaps://,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/682,https://github.com/rixed,1,https://github.com/the-tcpdump-group/tcpdump/pull/682,In relation to the-tcpdump-group/libpcap#721,In relation to the-tcpdump-group/libpcap#721,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,682,2018-05-25T17:35:02Z,2019-01-29T00:32:58Z,2019-01-29T00:32:58Z,CLOSED,False,2,8,1,https://github.com/rixed,Add support for rpcaps://,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/682,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/682#issuecomment-458358552,In relation to the-tcpdump-group/libpcap#721,"I did it separately, in 0f24a43.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,684,2018-06-10T21:28:49Z,,2022-03-12T00:38:11Z,OPEN,False,122,5,2,https://github.com/steinbrecher,Add a flag (-R) to terminate capture after specified time,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/684,https://github.com/steinbrecher,1,https://github.com/the-tcpdump-group/tcpdump/pull/684,"Context/Background: I needed this feature to be able to capture short bursts
(single ms to tens of ms) on high-rate interfaces without packet loss. Searching
produced some results of people trying to do timed captures using timeout(1) or
other coarser-grained checks. OS-level checks rely on the running time of
the program, not the time interval of packets captured, making it hard to capture
short bursts. Alternatively, for multiple second captures, some people use the log
rotation time + restriction of number of log files to take a timed capture, but this
is both hacky and only provides resolution in seconds, not milliseconds or
microseconds
Adding this check seems more reliable, easier to use, and provides finer-grained
control than any of the above methods.
The check works by adding a function call to each of the callback functions
passed to pcap; it saves the time of the first packet seen and then compares
later packets to that time. Time interval is specified at as an argument to -R
with units of microseconds, milliseconds, seconds, minutes, or hours. Internally,
this gets converted to an integer number of microseconds.
Updated the generated manpage and the printed usage. Haven't added any
tests; I didn't see any for other command line flags like -c, but can
add a couple if desired.
-R was chosen as the flag as shorthand for ""runtime""; the longopt is set to
--max-runtime.","Context/Background: I needed this feature to be able to capture short bursts
(single ms to tens of ms) on high-rate interfaces without packet loss. Searching
produced some results of people trying to do timed captures using timeout(1) or
other coarser-grained checks. OS-level checks rely on the running time of
the program, not the time interval of packets captured, making it hard to capture
short bursts. Alternatively, for multiple second captures, some people use the log
rotation time + restriction of number of log files to take a timed capture, but this
is both hacky and only provides resolution in seconds, not milliseconds or
microseconds
Adding this check seems more reliable, easier to use, and provides finer-grained
control than any of the above methods.
The check works by adding a function call to each of the callback functions
passed to pcap; it saves the time of the first packet seen and then compares
later packets to that time. Time interval is specified at as an argument to -R
with units of microseconds, milliseconds, seconds, minutes, or hours. Internally,
this gets converted to an integer number of microseconds.
Updated the generated manpage and the printed usage. Haven't added any
tests; I didn't see any for other command line flags like -c, but can
add a couple if desired.
-R was chosen as the flag as shorthand for ""runtime""; the longopt is set to
--max-runtime.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,684,2018-06-10T21:28:49Z,,2022-03-12T00:38:11Z,OPEN,False,122,5,2,https://github.com/steinbrecher,Add a flag (-R) to terminate capture after specified time,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/684,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/684#issuecomment-409497748,"Context/Background: I needed this feature to be able to capture short bursts
(single ms to tens of ms) on high-rate interfaces without packet loss. Searching
produced some results of people trying to do timed captures using timeout(1) or
other coarser-grained checks. OS-level checks rely on the running time of
the program, not the time interval of packets captured, making it hard to capture
short bursts. Alternatively, for multiple second captures, some people use the log
rotation time + restriction of number of log files to take a timed capture, but this
is both hacky and only provides resolution in seconds, not milliseconds or
microseconds
Adding this check seems more reliable, easier to use, and provides finer-grained
control than any of the above methods.
The check works by adding a function call to each of the callback functions
passed to pcap; it saves the time of the first packet seen and then compares
later packets to that time. Time interval is specified at as an argument to -R
with units of microseconds, milliseconds, seconds, minutes, or hours. Internally,
this gets converted to an integer number of microseconds.
Updated the generated manpage and the printed usage. Haven't added any
tests; I didn't see any for other command line flags like -c, but can
add a couple if desired.
-R was chosen as the flag as shorthand for ""runtime""; the longopt is set to
--max-runtime.",This seems to implement the request made in #338.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,684,2018-06-10T21:28:49Z,,2022-03-12T00:38:11Z,OPEN,False,122,5,2,https://github.com/steinbrecher,Add a flag (-R) to terminate capture after specified time,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/684,https://github.com/steinbrecher,3,https://github.com/the-tcpdump-group/tcpdump/pull/684#issuecomment-409598035,"Context/Background: I needed this feature to be able to capture short bursts
(single ms to tens of ms) on high-rate interfaces without packet loss. Searching
produced some results of people trying to do timed captures using timeout(1) or
other coarser-grained checks. OS-level checks rely on the running time of
the program, not the time interval of packets captured, making it hard to capture
short bursts. Alternatively, for multiple second captures, some people use the log
rotation time + restriction of number of log files to take a timed capture, but this
is both hacky and only provides resolution in seconds, not milliseconds or
microseconds
Adding this check seems more reliable, easier to use, and provides finer-grained
control than any of the above methods.
The check works by adding a function call to each of the callback functions
passed to pcap; it saves the time of the first packet seen and then compares
later packets to that time. Time interval is specified at as an argument to -R
with units of microseconds, milliseconds, seconds, minutes, or hours. Internally,
this gets converted to an integer number of microseconds.
Updated the generated manpage and the printed usage. Haven't added any
tests; I didn't see any for other command line flags like -c, but can
add a couple if desired.
-R was chosen as the flag as shorthand for ""runtime""; the longopt is set to
--max-runtime.",Needs a quick cleanup & rebase if the feature is of interest -- @infrastation how is that determined?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,684,2018-06-10T21:28:49Z,,2022-03-12T00:38:11Z,OPEN,False,122,5,2,https://github.com/steinbrecher,Add a flag (-R) to terminate capture after specified time,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/684,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/684#issuecomment-409608529,"Context/Background: I needed this feature to be able to capture short bursts
(single ms to tens of ms) on high-rate interfaces without packet loss. Searching
produced some results of people trying to do timed captures using timeout(1) or
other coarser-grained checks. OS-level checks rely on the running time of
the program, not the time interval of packets captured, making it hard to capture
short bursts. Alternatively, for multiple second captures, some people use the log
rotation time + restriction of number of log files to take a timed capture, but this
is both hacky and only provides resolution in seconds, not milliseconds or
microseconds
Adding this check seems more reliable, easier to use, and provides finer-grained
control than any of the above methods.
The check works by adding a function call to each of the callback functions
passed to pcap; it saves the time of the first packet seen and then compares
later packets to that time. Time interval is specified at as an argument to -R
with units of microseconds, milliseconds, seconds, minutes, or hours. Internally,
this gets converted to an integer number of microseconds.
Updated the generated manpage and the printed usage. Haven't added any
tests; I didn't see any for other command line flags like -c, but can
add a couple if desired.
-R was chosen as the flag as shorthand for ""runtime""; the longopt is set to
--max-runtime.","As another user points it out, there is the timeout command that does the job on the OSes traditional for tcpdump, so there are arguments pro and contra embedding timeout into tcpdump. Requesting more feedback on the tcpdump-workers mailing list would not be a bad idea, it seems to me.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,684,2018-06-10T21:28:49Z,,2022-03-12T00:38:11Z,OPEN,False,122,5,2,https://github.com/steinbrecher,Add a flag (-R) to terminate capture after specified time,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/684,https://github.com/mcr,5,https://github.com/the-tcpdump-group/tcpdump/pull/684#issuecomment-488886563,"Context/Background: I needed this feature to be able to capture short bursts
(single ms to tens of ms) on high-rate interfaces without packet loss. Searching
produced some results of people trying to do timed captures using timeout(1) or
other coarser-grained checks. OS-level checks rely on the running time of
the program, not the time interval of packets captured, making it hard to capture
short bursts. Alternatively, for multiple second captures, some people use the log
rotation time + restriction of number of log files to take a timed capture, but this
is both hacky and only provides resolution in seconds, not milliseconds or
microseconds
Adding this check seems more reliable, easier to use, and provides finer-grained
control than any of the above methods.
The check works by adding a function call to each of the callback functions
passed to pcap; it saves the time of the first packet seen and then compares
later packets to that time. Time interval is specified at as an argument to -R
with units of microseconds, milliseconds, seconds, minutes, or hours. Internally,
this gets converted to an integer number of microseconds.
Updated the generated manpage and the printed usage. Haven't added any
tests; I didn't see any for other command line flags like -c, but can
add a couple if desired.
-R was chosen as the flag as shorthand for ""runtime""; the longopt is set to
--max-runtime.",Can you use a long option?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,684,2018-06-10T21:28:49Z,,2022-03-12T00:38:11Z,OPEN,False,122,5,2,https://github.com/steinbrecher,Add a flag (-R) to terminate capture after specified time,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/684,https://github.com/guyharris,6,https://github.com/the-tcpdump-group/tcpdump/pull/684#issuecomment-488967077,"Context/Background: I needed this feature to be able to capture short bursts
(single ms to tens of ms) on high-rate interfaces without packet loss. Searching
produced some results of people trying to do timed captures using timeout(1) or
other coarser-grained checks. OS-level checks rely on the running time of
the program, not the time interval of packets captured, making it hard to capture
short bursts. Alternatively, for multiple second captures, some people use the log
rotation time + restriction of number of log files to take a timed capture, but this
is both hacky and only provides resolution in seconds, not milliseconds or
microseconds
Adding this check seems more reliable, easier to use, and provides finer-grained
control than any of the above methods.
The check works by adding a function call to each of the callback functions
passed to pcap; it saves the time of the first packet seen and then compares
later packets to that time. Time interval is specified at as an argument to -R
with units of microseconds, milliseconds, seconds, minutes, or hours. Internally,
this gets converted to an integer number of microseconds.
Updated the generated manpage and the printed usage. Haven't added any
tests; I didn't see any for other command line flags like -c, but can
add a couple if desired.
-R was chosen as the flag as shorthand for ""runtime""; the longopt is set to
--max-runtime.","Note that without an interval timer (setitimer()/alarm()) on UN*X, and an equivalent on Windows, there's no guarantee, on a network with a low level of traffic, that there won't be an arbitrary amount of time after the time expires when the capture terminates.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,684,2018-06-10T21:28:49Z,,2022-03-12T00:38:11Z,OPEN,False,122,5,2,https://github.com/steinbrecher,Add a flag (-R) to terminate capture after specified time,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/684,https://github.com/steinbrecher,7,https://github.com/the-tcpdump-group/tcpdump/pull/684#issuecomment-489240932,"Context/Background: I needed this feature to be able to capture short bursts
(single ms to tens of ms) on high-rate interfaces without packet loss. Searching
produced some results of people trying to do timed captures using timeout(1) or
other coarser-grained checks. OS-level checks rely on the running time of
the program, not the time interval of packets captured, making it hard to capture
short bursts. Alternatively, for multiple second captures, some people use the log
rotation time + restriction of number of log files to take a timed capture, but this
is both hacky and only provides resolution in seconds, not milliseconds or
microseconds
Adding this check seems more reliable, easier to use, and provides finer-grained
control than any of the above methods.
The check works by adding a function call to each of the callback functions
passed to pcap; it saves the time of the first packet seen and then compares
later packets to that time. Time interval is specified at as an argument to -R
with units of microseconds, milliseconds, seconds, minutes, or hours. Internally,
this gets converted to an integer number of microseconds.
Updated the generated manpage and the printed usage. Haven't added any
tests; I didn't see any for other command line flags like -c, but can
add a couple if desired.
-R was chosen as the flag as shorthand for ""runtime""; the longopt is set to
--max-runtime.","Note that without an interval timer (setitimer()/alarm()) on UN*X, and an equivalent on Windows, there's no guarantee, on a network with a low level of traffic, that there won't be an arbitrary amount of time after the time expires when the capture terminates.

Yeah, very true. Thoughts on adding an interval timer equal to the selected time +1 second (or something equally ""long"" relative to a short time selection)?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,684,2018-06-10T21:28:49Z,,2022-03-12T00:38:11Z,OPEN,False,122,5,2,https://github.com/steinbrecher,Add a flag (-R) to terminate capture after specified time,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/684,https://github.com/steinbrecher,8,https://github.com/the-tcpdump-group/tcpdump/pull/684#issuecomment-489241339,"Context/Background: I needed this feature to be able to capture short bursts
(single ms to tens of ms) on high-rate interfaces without packet loss. Searching
produced some results of people trying to do timed captures using timeout(1) or
other coarser-grained checks. OS-level checks rely on the running time of
the program, not the time interval of packets captured, making it hard to capture
short bursts. Alternatively, for multiple second captures, some people use the log
rotation time + restriction of number of log files to take a timed capture, but this
is both hacky and only provides resolution in seconds, not milliseconds or
microseconds
Adding this check seems more reliable, easier to use, and provides finer-grained
control than any of the above methods.
The check works by adding a function call to each of the callback functions
passed to pcap; it saves the time of the first packet seen and then compares
later packets to that time. Time interval is specified at as an argument to -R
with units of microseconds, milliseconds, seconds, minutes, or hours. Internally,
this gets converted to an integer number of microseconds.
Updated the generated manpage and the printed usage. Haven't added any
tests; I didn't see any for other command line flags like -c, but can
add a couple if desired.
-R was chosen as the flag as shorthand for ""runtime""; the longopt is set to
--max-runtime.","Can you use a long option?

--max-runtime is a substitute for -R in the code as is",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,684,2018-06-10T21:28:49Z,,2022-03-12T00:38:11Z,OPEN,False,122,5,2,https://github.com/steinbrecher,Add a flag (-R) to terminate capture after specified time,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/684,https://github.com/danielhoherd,9,https://github.com/the-tcpdump-group/tcpdump/pull/684#issuecomment-1065736368,"Context/Background: I needed this feature to be able to capture short bursts
(single ms to tens of ms) on high-rate interfaces without packet loss. Searching
produced some results of people trying to do timed captures using timeout(1) or
other coarser-grained checks. OS-level checks rely on the running time of
the program, not the time interval of packets captured, making it hard to capture
short bursts. Alternatively, for multiple second captures, some people use the log
rotation time + restriction of number of log files to take a timed capture, but this
is both hacky and only provides resolution in seconds, not milliseconds or
microseconds
Adding this check seems more reliable, easier to use, and provides finer-grained
control than any of the above methods.
The check works by adding a function call to each of the callback functions
passed to pcap; it saves the time of the first packet seen and then compares
later packets to that time. Time interval is specified at as an argument to -R
with units of microseconds, milliseconds, seconds, minutes, or hours. Internally,
this gets converted to an integer number of microseconds.
Updated the generated manpage and the printed usage. Haven't added any
tests; I didn't see any for other command line flags like -c, but can
add a couple if desired.
-R was chosen as the flag as shorthand for ""runtime""; the longopt is set to
--max-runtime.",Any chance of finishing this feature? I was looking for it today.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,687,2018-06-26T10:08:13Z,,2021-11-27T08:50:08Z,OPEN,False,3,0,1,https://github.com/hselasky,Capsicum-related fixes for tcpdump,1,"['improvement', 'freebsd']",https://github.com/the-tcpdump-group/tcpdump/pull/687,https://github.com/hselasky,1,https://github.com/the-tcpdump-group/tcpdump/pull/687,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,687,2018-06-26T10:08:13Z,,2021-11-27T08:50:08Z,OPEN,False,3,0,1,https://github.com/hselasky,Capsicum-related fixes for tcpdump,1,"['improvement', 'freebsd']",https://github.com/the-tcpdump-group/tcpdump/pull/687,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/687#issuecomment-401200066,,It would not harm to have some comments in the commit messages or the source code to explain these changes to the folks in future.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,687,2018-06-26T10:08:13Z,,2021-11-27T08:50:08Z,OPEN,False,3,0,1,https://github.com/hselasky,Capsicum-related fixes for tcpdump,1,"['improvement', 'freebsd']",https://github.com/the-tcpdump-group/tcpdump/pull/687,https://github.com/hselasky,3,https://github.com/the-tcpdump-group/tcpdump/pull/687#issuecomment-401279897,,Are you referring to both commits?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,687,2018-06-26T10:08:13Z,,2021-11-27T08:50:08Z,OPEN,False,3,0,1,https://github.com/hselasky,Capsicum-related fixes for tcpdump,1,"['improvement', 'freebsd']",https://github.com/the-tcpdump-group/tcpdump/pull/687,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/687#issuecomment-401282910,,"Well, yes.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,687,2018-06-26T10:08:13Z,,2021-11-27T08:50:08Z,OPEN,False,3,0,1,https://github.com/hselasky,Capsicum-related fixes for tcpdump,1,"['improvement', 'freebsd']",https://github.com/the-tcpdump-group/tcpdump/pull/687,https://github.com/hselasky,5,https://github.com/the-tcpdump-group/tcpdump/pull/687#issuecomment-401284575,,Better now?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,687,2018-06-26T10:08:13Z,,2021-11-27T08:50:08Z,OPEN,False,3,0,1,https://github.com/hselasky,Capsicum-related fixes for tcpdump,1,"['improvement', 'freebsd']",https://github.com/the-tcpdump-group/tcpdump/pull/687,https://github.com/infrastation,6,https://github.com/the-tcpdump-group/tcpdump/pull/687#issuecomment-401334419,,"Looks much more comprehensible to me now, thank you.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,687,2018-06-26T10:08:13Z,,2021-11-27T08:50:08Z,OPEN,False,3,0,1,https://github.com/hselasky,Capsicum-related fixes for tcpdump,1,"['improvement', 'freebsd']",https://github.com/the-tcpdump-group/tcpdump/pull/687,https://github.com/guyharris,7,https://github.com/the-tcpdump-group/tcpdump/pull/687#issuecomment-401410398,,"So there are no backends that 1) do have a file descriptor but 2) don't support Capsicum?
For example, does the Netmap  support in pcap-netmap.c support Capsicum?  If not, testing the result of pcap_fileno(), to make sure it's not -1, is not sufficient to eliminate the use of Capsicum on Netmap devices.
Or is it a case of ""support Capsicum"" really meaning that, to support Capsicum with a given device, you have to enable the particular ioctls used by the device, in which case, to fix this, there will have to be support in libpcap (as that's the only place that knows which ioctls have to be enabled)?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,687,2018-06-26T10:08:13Z,,2021-11-27T08:50:08Z,OPEN,False,3,0,1,https://github.com/hselasky,Capsicum-related fixes for tcpdump,1,"['improvement', 'freebsd']",https://github.com/the-tcpdump-group/tcpdump/pull/687,https://github.com/hselasky,8,https://github.com/the-tcpdump-group/tcpdump/pull/687#issuecomment-401415205,,"For example libibverbs have a bunch of file descriptors associated with the data transport object. None of these are registered by libpcap, so at the moment we enter sandboxing, these transport objects stop working.
From what I understand, the file handle in question is only used for BPF, Berkeley Packet Filter, compatible file handles. If it is -1 it means BPF is not in use. I'll have to dig a bit deeper in the code to verify this. Basically these bits been tested under FreeBSD and verified. And there is also an identical review pending with some more information:
https://reviews.freebsd.org/D15785",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,687,2018-06-26T10:08:13Z,,2021-11-27T08:50:08Z,OPEN,False,3,0,1,https://github.com/hselasky,Capsicum-related fixes for tcpdump,1,"['improvement', 'freebsd']",https://github.com/the-tcpdump-group/tcpdump/pull/687,https://github.com/guyharris,9,https://github.com/the-tcpdump-group/tcpdump/pull/687#issuecomment-401420022,,"For example libibverbs have a bunch of file descriptors associated with the data transport object.

That's one particular example; you need to look at all the backends that will run on OSes that support Capsicum (is it FreeBSD-only, or do any other OSes that support libpcap support it?) to determine whether this change is sufficient.

None of these are registered by libpcap

Are there libibverbs call to fetch the descriptors from the various handles pcap-rdmasniff.c opens?  If so, again, perhaps what's needed is a per-backend ""Capsicumize"" function pointer, which would be null on platforms that don't support Capsicum, and would perform the appropriate operations on platforms that do, combined with ""Capsicumize"" APIs in libpcap, which tcpdump would use.

From what I understand, the file handle in question is only used for BPF, Berkeley Packet Filter, compatible file handles.

Not true - perhaps, in my previous comment, I should have explicitly indicated that the file handle is set by the Netmap backend, and therefore that pcap_fileno() will not return -1.

If it is -1 it means BPF is not in use.

""The return value of pcap_fileno() is -1"" implies ""BPF is not in use"".
""BPF is not in use"", however, does not imply ""the return value of pcap_fileno() is -1"".",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,687,2018-06-26T10:08:13Z,,2021-11-27T08:50:08Z,OPEN,False,3,0,1,https://github.com/hselasky,Capsicum-related fixes for tcpdump,1,"['improvement', 'freebsd']",https://github.com/the-tcpdump-group/tcpdump/pull/687,https://github.com/hselasky,10,https://github.com/the-tcpdump-group/tcpdump/pull/687#issuecomment-401709562,,"That's one particular example; you need to look at all the backends that will run on OSes that support Capsicum (is it FreeBSD-only, or do any other OSes that support libpcap support it?) to determine whether this change is sufficient.

This is out of the scope of my patch. Do you believe there is any reason my patch will break anything?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,687,2018-06-26T10:08:13Z,,2021-11-27T08:50:08Z,OPEN,False,3,0,1,https://github.com/hselasky,Capsicum-related fixes for tcpdump,1,"['improvement', 'freebsd']",https://github.com/the-tcpdump-group/tcpdump/pull/687,https://github.com/hselasky,11,https://github.com/the-tcpdump-group/tcpdump/pull/687#issuecomment-401709824,,"""BPF is not in use"", however, does not imply ""the return value of pcap_fileno() is -1"".

If you understand the code better than I do, maybe you can help correct my patch.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,687,2018-06-26T10:08:13Z,,2021-11-27T08:50:08Z,OPEN,False,3,0,1,https://github.com/hselasky,Capsicum-related fixes for tcpdump,1,"['improvement', 'freebsd']",https://github.com/the-tcpdump-group/tcpdump/pull/687,https://github.com/hselasky,12,https://github.com/the-tcpdump-group/tcpdump/pull/687#issuecomment-401745271,,"Are there libibverbs call to fetch the descriptors from the various handles pcap-rdmasniff.c opens?

This is not possible currently, so capsicum + libibverbs is a no-go.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,687,2018-06-26T10:08:13Z,,2021-11-27T08:50:08Z,OPEN,False,3,0,1,https://github.com/hselasky,Capsicum-related fixes for tcpdump,1,"['improvement', 'freebsd']",https://github.com/the-tcpdump-group/tcpdump/pull/687,https://github.com/hselasky,13,https://github.com/the-tcpdump-group/tcpdump/pull/687#issuecomment-405898762,,Ping - can these patches be pushed?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,687,2018-06-26T10:08:13Z,,2021-11-27T08:50:08Z,OPEN,False,3,0,1,https://github.com/hselasky,Capsicum-related fixes for tcpdump,1,"['improvement', 'freebsd']",https://github.com/the-tcpdump-group/tcpdump/pull/687,https://github.com/infrastation,14,https://github.com/the-tcpdump-group/tcpdump/pull/687#issuecomment-407554206,,Please allow some more time for a more thorough review.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,687,2018-06-26T10:08:13Z,,2021-11-27T08:50:08Z,OPEN,False,3,0,1,https://github.com/hselasky,Capsicum-related fixes for tcpdump,1,"['improvement', 'freebsd']",https://github.com/the-tcpdump-group/tcpdump/pull/687,https://github.com/emaste,15,https://github.com/the-tcpdump-group/tcpdump/pull/687#issuecomment-409586213,,"Please allow some more time for a more thorough review.

Do you have a rough guess of the timeline? We're approaching code freeze for FreeBSD 12 and would prefer to include a change identical to upstream, but if it will be a while yet we'll incorporate a local patch and revert to upstream later.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,687,2018-06-26T10:08:13Z,,2021-11-27T08:50:08Z,OPEN,False,3,0,1,https://github.com/hselasky,Capsicum-related fixes for tcpdump,1,"['improvement', 'freebsd']",https://github.com/the-tcpdump-group/tcpdump/pull/687,https://github.com/infrastation,16,https://github.com/the-tcpdump-group/tcpdump/pull/687#issuecomment-412786473,,"To answer one of the Guy's questions: Capsicum project page says it is supported on FreeBSD, Linux and DragonFlyBSD, if that helps.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,687,2018-06-26T10:08:13Z,,2021-11-27T08:50:08Z,OPEN,False,3,0,1,https://github.com/hselasky,Capsicum-related fixes for tcpdump,1,"['improvement', 'freebsd']",https://github.com/the-tcpdump-group/tcpdump/pull/687,https://github.com/hselasky,17,https://github.com/the-tcpdump-group/tcpdump/pull/687#issuecomment-414627019,,Ping - any updates?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,687,2018-06-26T10:08:13Z,,2021-11-27T08:50:08Z,OPEN,False,3,0,1,https://github.com/hselasky,Capsicum-related fixes for tcpdump,1,"['improvement', 'freebsd']",https://github.com/the-tcpdump-group/tcpdump/pull/687,https://github.com/hselasky,18,https://github.com/the-tcpdump-group/tcpdump/pull/687#issuecomment-421975568,,"FYI: Submitted to FreeBSD:
https://svnweb.freebsd.org/base?view=revision&revision=338613",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,687,2018-06-26T10:08:13Z,,2021-11-27T08:50:08Z,OPEN,False,3,0,1,https://github.com/hselasky,Capsicum-related fixes for tcpdump,1,"['improvement', 'freebsd']",https://github.com/the-tcpdump-group/tcpdump/pull/687,https://github.com/mcr,19,https://github.com/the-tcpdump-group/tcpdump/pull/687#issuecomment-488886404,,"Sorry this is taking so long.
May I ask you to rebase again?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,687,2018-06-26T10:08:13Z,,2021-11-27T08:50:08Z,OPEN,False,3,0,1,https://github.com/hselasky,Capsicum-related fixes for tcpdump,1,"['improvement', 'freebsd']",https://github.com/the-tcpdump-group/tcpdump/pull/687,https://github.com/hselasky,20,https://github.com/the-tcpdump-group/tcpdump/pull/687#issuecomment-489016876,,"Sorry this is taking so long.
May I ask you to rebase again?

Done.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,687,2018-06-26T10:08:13Z,,2021-11-27T08:50:08Z,OPEN,False,3,0,1,https://github.com/hselasky,Capsicum-related fixes for tcpdump,1,"['improvement', 'freebsd']",https://github.com/the-tcpdump-group/tcpdump/pull/687,https://github.com/fxlb,21,https://github.com/the-tcpdump-group/tcpdump/pull/687#issuecomment-877690651,,Any reason to NOT merge this patch?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,687,2018-06-26T10:08:13Z,,2021-11-27T08:50:08Z,OPEN,False,3,0,1,https://github.com/hselasky,Capsicum-related fixes for tcpdump,1,"['improvement', 'freebsd']",https://github.com/the-tcpdump-group/tcpdump/pull/687,https://github.com/fxlb,22,https://github.com/the-tcpdump-group/tcpdump/pull/687#issuecomment-877691141,,Perhaps the test should be explained...,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,687,2018-06-26T10:08:13Z,,2021-11-27T08:50:08Z,OPEN,False,3,0,1,https://github.com/hselasky,Capsicum-related fixes for tcpdump,1,"['improvement', 'freebsd']",https://github.com/the-tcpdump-group/tcpdump/pull/687,https://github.com/infrastation,23,https://github.com/the-tcpdump-group/tcpdump/pull/687#issuecomment-980468521,,"@hselasky, a few months ago I made a few Capsicum-related bugfixes in tcpdump (commits 780f86b, ac23514 and 51f9c3b), it would be great if you could confirm these look good to you. Also it would be very useful to add a detailed comment into the proposed change, as it is often difficult to reconstruct the context.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,687,2018-06-26T10:08:13Z,,2021-11-27T08:50:08Z,OPEN,False,3,0,1,https://github.com/hselasky,Capsicum-related fixes for tcpdump,1,"['improvement', 'freebsd']",https://github.com/the-tcpdump-group/tcpdump/pull/687,https://github.com/hselasky,24,https://github.com/the-tcpdump-group/tcpdump/pull/687#issuecomment-980526572,,I'll have a look. Thanks for the heads up.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,689,2018-07-12T22:47:13Z,2018-07-19T06:15:12Z,2020-11-02T07:34:56Z,MERGED,True,27,2,7,https://github.com/pevik,Display interface on live captures on DLT_LINUX_SLL2,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/689,https://github.com/pevik,1,https://github.com/the-tcpdump-group/tcpdump/pull/689,"The reason why displaying interface only for live captures is different
index when display pcap file on another machine than the one which was
doing the capture on [1].
See: GH the-tcpdump-group/libpcap#127
[1] https://lists.sandelman.ca/pipermail/tcpdump-workers/2018-July/001019.html
Signed-off-by: Petr Vorel pvorel@suse.cz
Suggested-by: Guy Harris guy@alum.mit.edu","The reason why displaying interface only for live captures is different
index when display pcap file on another machine than the one which was
doing the capture on [1].
See: GH the-tcpdump-group/libpcap#127
[1] https://lists.sandelman.ca/pipermail/tcpdump-workers/2018-July/001019.html
Signed-off-by: Petr Vorel pvorel@suse.cz
Suggested-by: Guy Harris guy@alum.mit.edu",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,689,2018-07-12T22:47:13Z,2018-07-19T06:15:12Z,2020-11-02T07:34:56Z,MERGED,True,27,2,7,https://github.com/pevik,Display interface on live captures on DLT_LINUX_SLL2,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/689,https://github.com/pevik,2,https://github.com/the-tcpdump-group/tcpdump/pull/689#issuecomment-404790192,"The reason why displaying interface only for live captures is different
index when display pcap file on another machine than the one which was
doing the capture on [1].
See: GH the-tcpdump-group/libpcap#127
[1] https://lists.sandelman.ca/pipermail/tcpdump-workers/2018-July/001019.html
Signed-off-by: Petr Vorel pvorel@suse.cz
Suggested-by: Guy Harris guy@alum.mit.edu",Implemented previous suggestion.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,689,2018-07-12T22:47:13Z,2018-07-19T06:15:12Z,2020-11-02T07:34:56Z,MERGED,True,27,2,7,https://github.com/pevik,Display interface on live captures on DLT_LINUX_SLL2,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/689,https://github.com/pevik,3,https://github.com/the-tcpdump-group/tcpdump/pull/689#issuecomment-406064933,"The reason why displaying interface only for live captures is different
index when display pcap file on another machine than the one which was
doing the capture on [1].
See: GH the-tcpdump-group/libpcap#127
[1] https://lists.sandelman.ca/pipermail/tcpdump-workers/2018-July/001019.html
Signed-off-by: Petr Vorel pvorel@suse.cz
Suggested-by: Guy Harris guy@alum.mit.edu",@guyharris @infrastation this is a shy ping. Any objections or can it be merged?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,689,2018-07-12T22:47:13Z,2018-07-19T06:15:12Z,2020-11-02T07:34:56Z,MERGED,True,27,2,7,https://github.com/pevik,Display interface on live captures on DLT_LINUX_SLL2,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/689,https://github.com/guyharris,4,https://github.com/the-tcpdump-group/tcpdump/pull/689#issuecomment-406065763,"The reason why displaying interface only for live captures is different
index when display pcap file on another machine than the one which was
doing the capture on [1].
See: GH the-tcpdump-group/libpcap#127
[1] https://lists.sandelman.ca/pipermail/tcpdump-workers/2018-July/001019.html
Signed-off-by: Petr Vorel pvorel@suse.cz
Suggested-by: Guy Harris guy@alum.mit.edu",Fine with me.  Anybody else?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,689,2018-07-12T22:47:13Z,2018-07-19T06:15:12Z,2020-11-02T07:34:56Z,MERGED,True,27,2,7,https://github.com/pevik,Display interface on live captures on DLT_LINUX_SLL2,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/689,https://github.com/pevik,5,https://github.com/the-tcpdump-group/tcpdump/pull/689#issuecomment-406069955,"The reason why displaying interface only for live captures is different
index when display pcap file on another machine than the one which was
doing the capture on [1].
See: GH the-tcpdump-group/libpcap#127
[1] https://lists.sandelman.ca/pipermail/tcpdump-workers/2018-July/001019.html
Signed-off-by: Petr Vorel pvorel@suse.cz
Suggested-by: Guy Harris guy@alum.mit.edu","I've just removed first commit with updating configure. It was wrong (what autoconf adds autoheader removes + recent commit abe1aa5 shows that it wasn't needed).
Hope me or someone else implement removing configure from git according to Guy's instructions (https://lists.sandelman.ca/pipermail/tcpdump-workers/2018-July/001000.html)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,689,2018-07-12T22:47:13Z,2018-07-19T06:15:12Z,2020-11-02T07:34:56Z,MERGED,True,27,2,7,https://github.com/pevik,Display interface on live captures on DLT_LINUX_SLL2,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/689,https://github.com/infrastation,6,https://github.com/the-tcpdump-group/tcpdump/pull/689#issuecomment-406071606,"The reason why displaying interface only for live captures is different
index when display pcap file on another machine than the one which was
doing the capture on [1].
See: GH the-tcpdump-group/libpcap#127
[1] https://lists.sandelman.ca/pipermail/tcpdump-workers/2018-July/001019.html
Signed-off-by: Petr Vorel pvorel@suse.cz
Suggested-by: Guy Harris guy@alum.mit.edu","Errrm, I would say something like ""ifindex %u"" and ""ifindex %u (%s)"" would be easier to parse if anyone needs to, rather than the format in the proposed commit.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,689,2018-07-12T22:47:13Z,2018-07-19T06:15:12Z,2020-11-02T07:34:56Z,MERGED,True,27,2,7,https://github.com/pevik,Display interface on live captures on DLT_LINUX_SLL2,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/689,https://github.com/pevik,7,https://github.com/the-tcpdump-group/tcpdump/pull/689#issuecomment-406073052,"The reason why displaying interface only for live captures is different
index when display pcap file on another machine than the one which was
doing the capture on [1].
See: GH the-tcpdump-group/libpcap#127
[1] https://lists.sandelman.ca/pipermail/tcpdump-workers/2018-July/001019.html
Signed-off-by: Petr Vorel pvorel@suse.cz
Suggested-by: Guy Harris guy@alum.mit.edu","@infrastation I got your point, reverse it as ifindex is for sure, but ifname not. Make sense, I'll do it. I'll just use upper case (as for other) + keep the warning.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,689,2018-07-12T22:47:13Z,2018-07-19T06:15:12Z,2020-11-02T07:34:56Z,MERGED,True,27,2,7,https://github.com/pevik,Display interface on live captures on DLT_LINUX_SLL2,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/689,https://github.com/pevik,8,https://github.com/the-tcpdump-group/tcpdump/pull/689#issuecomment-406075264,"The reason why displaying interface only for live captures is different
index when display pcap file on another machine than the one which was
doing the capture on [1].
See: GH the-tcpdump-group/libpcap#127
[1] https://lists.sandelman.ca/pipermail/tcpdump-workers/2018-July/001019.html
Signed-off-by: Petr Vorel pvorel@suse.cz
Suggested-by: Guy Harris guy@alum.mit.edu","@guyharris @infrastation OK, at the end I used output suggested by Denis:
""ifindex %u (%s) "" and ""ifindex %u "".",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,689,2018-07-12T22:47:13Z,2018-07-19T06:15:12Z,2020-11-02T07:34:56Z,MERGED,True,27,2,7,https://github.com/pevik,Display interface on live captures on DLT_LINUX_SLL2,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/689,https://github.com/infrastation,9,https://github.com/the-tcpdump-group/tcpdump/pull/689#issuecomment-406166376,"The reason why displaying interface only for live captures is different
index when display pcap file on another machine than the one which was
doing the capture on [1].
See: GH the-tcpdump-group/libpcap#127
[1] https://lists.sandelman.ca/pipermail/tcpdump-workers/2018-July/001019.html
Signed-off-by: Petr Vorel pvorel@suse.cz
Suggested-by: Guy Harris guy@alum.mit.edu",Thank you.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,692,2018-07-26T14:55:31Z,2018-07-26T16:56:51Z,2018-07-26T16:56:51Z,MERGED,True,0,5,1,https://github.com/wrigjl,remove clauses 3/4 from license,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/692,https://github.com/wrigjl,1,https://github.com/the-tcpdump-group/tcpdump/pull/692,I'm the original author. Feel free to pull this and nuke clause 3/4.,I'm the original author. Feel free to pull this and nuke clause 3/4.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,693,2018-07-30T19:53:46Z,2018-07-31T12:54:04Z,2018-08-16T06:39:42Z,MERGED,True,4,0,1,https://github.com/steinbrecher,Add check for pcap warning PCAP_WARNING_TSTAMP_TYPE_NOTSUP,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/693,https://github.com/steinbrecher,1,https://github.com/the-tcpdump-group/tcpdump/pull/693,"Previously would silently accept any of ""host"", ""adapter"", or
""adapter_unsynced"" regardless of whether the interface supported
the option.","Previously would silently accept any of ""host"", ""adapter"", or
""adapter_unsynced"" regardless of whether the interface supported
the option.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,693,2018-07-30T19:53:46Z,2018-07-31T12:54:04Z,2018-08-16T06:39:42Z,MERGED,True,4,0,1,https://github.com/steinbrecher,Add check for pcap warning PCAP_WARNING_TSTAMP_TYPE_NOTSUP,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/693,https://github.com/steinbrecher,2,https://github.com/the-tcpdump-group/tcpdump/pull/693#issuecomment-408995481,"Previously would silently accept any of ""host"", ""adapter"", or
""adapter_unsynced"" regardless of whether the interface supported
the option.",Indentation issues should be fixed -- this is what I get for trying something other than emacs.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,693,2018-07-30T19:53:46Z,2018-07-31T12:54:04Z,2018-08-16T06:39:42Z,MERGED,True,4,0,1,https://github.com/steinbrecher,Add check for pcap warning PCAP_WARNING_TSTAMP_TYPE_NOTSUP,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/693,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/693#issuecomment-409211106,"Previously would silently accept any of ""host"", ""adapter"", or
""adapter_unsynced"" regardless of whether the interface supported
the option.","Merged as a single commit to keep the history clear. As a side note, indentation isn't quite consistent in that part of the file -- it mixes a few styles (see attached screenshot).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,693,2018-07-30T19:53:46Z,2018-07-31T12:54:04Z,2018-08-16T06:39:42Z,MERGED,True,4,0,1,https://github.com/steinbrecher,Add check for pcap warning PCAP_WARNING_TSTAMP_TYPE_NOTSUP,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/693,https://github.com/guyharris,4,https://github.com/the-tcpdump-group/tcpdump/pull/693#issuecomment-409293467,"Previously would silently accept any of ""host"", ""adapter"", or
""adapter_unsynced"" regardless of whether the interface supported
the option.",Indentation in that routine cleaned up in 67ac8ff.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,694,2018-08-06T00:22:04Z,2018-08-15T05:17:19Z,2018-08-15T05:17:19Z,CLOSED,False,9653,9363,454,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/694,https://github.com/aravindprasads,1,https://github.com/the-tcpdump-group/tcpdump/pull/694,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004","Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,694,2018-08-06T00:22:04Z,2018-08-15T05:17:19Z,2018-08-15T05:17:19Z,CLOSED,False,9653,9363,454,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/694,https://github.com/aravindprasads,2,https://github.com/the-tcpdump-group/tcpdump/pull/694#issuecomment-410561962,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004","Hi @infrastation
This is the same set of changes of the below pull request with the review comments addressed.
#579
I had messed up with the branch merges and sync with master. Hence, opened a new pull request.
Kindly review and let me know your views. Thanks for the support.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,694,2018-08-06T00:22:04Z,2018-08-15T05:17:19Z,2018-08-15T05:17:19Z,CLOSED,False,9653,9363,454,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/694,https://github.com/aravindprasads,3,https://github.com/the-tcpdump-group/tcpdump/pull/694#issuecomment-410911423,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004","Hi @infrastation @guyharris
Kindly review and let me know your views.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,694,2018-08-06T00:22:04Z,2018-08-15T05:17:19Z,2018-08-15T05:17:19Z,CLOSED,False,9653,9363,454,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/694,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/694#issuecomment-412798246,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004","Most of the new code in the proposed commit has been copied from print-eap.c, is there a good reason not to call the existing function eap_print() from print_attr_string() instead?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,698,2018-08-15T05:16:14Z,2020-07-16T10:16:08Z,2020-07-16T10:16:08Z,CLOSED,False,83,56,5,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages [RDY],1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/698,https://github.com/aravindprasads,1,https://github.com/the-tcpdump-group/tcpdump/pull/698,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004","Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,698,2018-08-15T05:16:14Z,2020-07-16T10:16:08Z,2020-07-16T10:16:08Z,CLOSED,False,83,56,5,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages [RDY],1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/698,https://github.com/aravindprasads,2,https://github.com/the-tcpdump-group/tcpdump/pull/698#issuecomment-413114675,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004","Hi @infrastation
Thanks for the review of #694 .
Had problems with merges with master again and messed up that pull request. Sorry, will try to avoid creating new pull requests in future.


Most of the new code in the proposed commit has been copied from print-eap.c, is there a good reason not to call the existing function eap_print() from print_attr_string() instead?


Agreed that the same info is added in print-radius.c.
But currently, eap_print() handles for all EAPOL type messages (EAPOL-START, EAPOL-LOGOFF, EAP-FRAME and so on). And we need only the handler for EAP-MESSAGE in radius.c.
And also, its better if we carve out the handler for EAP separately for modularity, future feature additions and maintainability.
Hence, renamed the existing eap_print() to eapol_print() which is more appropriate for its functionality.
And introduced the API - eap_print() which handles the EAP Message specific prints.
Kindly review  and let me know your views.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,698,2018-08-15T05:16:14Z,2020-07-16T10:16:08Z,2020-07-16T10:16:08Z,CLOSED,False,83,56,5,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages [RDY],1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/698,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/698#issuecomment-413206671,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004","Thank you for reworking this change to reuse existing code, please allow some time to review this change again.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,698,2018-08-15T05:16:14Z,2020-07-16T10:16:08Z,2020-07-16T10:16:08Z,CLOSED,False,83,56,5,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages [RDY],1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/698,https://github.com/aravindprasads,4,https://github.com/the-tcpdump-group/tcpdump/pull/698#issuecomment-413225990,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004","Hi @infrastation
Yes Ok. Thanks for the support.
It has been more than 1.5 years since I initially raised the pull request with initial set of changes. Hence, if possible, kindly review it sooner. Thanks for the support.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,698,2018-08-15T05:16:14Z,2020-07-16T10:16:08Z,2020-07-16T10:16:08Z,CLOSED,False,83,56,5,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages [RDY],1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/698,https://github.com/aravindprasads,5,https://github.com/the-tcpdump-group/tcpdump/pull/698#issuecomment-413758511,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004","Hi @infrastation
Thanks for the review.

Updated the code to make eap_print() API to return the success(0)/failure(-1). This is required since incase of any failures (type, value errors) in API, nd_print_trunc() would be already called and hence, in the caller, code must immediatley return.
Changed type of 'len' variable to unsigned int.
Reg question of value checks for length variable, I think they not may be needed.  And further, in case of any error in eap_print() API, we will immediately return at caller too and hence, separate checks may not be necessary.

Let me know your views. Thanks for the support.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,698,2018-08-15T05:16:14Z,2020-07-16T10:16:08Z,2020-07-16T10:16:08Z,CLOSED,False,83,56,5,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages [RDY],1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/698,https://github.com/infrastation,6,https://github.com/the-tcpdump-group/tcpdump/pull/698#issuecomment-413794398,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004","Thank you for the update. Looking through the changes, I had spotted a duplicate ND_PRINT() in the original code, this is now fixed in the master branch. Your radius-eap-dump-patch branch is now rebased on the latest master branch. The new code yields the following warnings:
./print-eap.c: In function ‘eapol_print’:
./print-eap.c:274:18: warning: unused variable ‘len’ [-Wunused-variable]
     int count=0, len;
                  ^~~
./print-eap.c:274:9: warning: unused variable ‘count’ [-Wunused-variable]
     int count=0, len;
         ^~~~~
./print-eap.c:273:33: warning: unused variable ‘subtype’ [-Wunused-variable]
     u_int eap_type, tlen, type, subtype;
                                 ^~~~~~~
./print-eap.c:273:27: warning: unused variable ‘type’ [-Wunused-variable]
     u_int eap_type, tlen, type, subtype;
                           ^~~~

To see these warnings in your working copy you need to compile tcpdump as follows:
touch .devel
./configure
make -s clean all

Please fix that and try to put your updated work into this pull request instead of opening another pull request. I will see the update and I will review again when I have time. Thank you.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,698,2018-08-15T05:16:14Z,2020-07-16T10:16:08Z,2020-07-16T10:16:08Z,CLOSED,False,83,56,5,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages [RDY],1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/698,https://github.com/aravindprasads,7,https://github.com/the-tcpdump-group/tcpdump/pull/698#issuecomment-414030987,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004","Hi @infrastation
Thanks a lot again for the review. My bad, sorry for those errors. Corrected them all.
Kindly review and let me know your views. thanks for the support.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,698,2018-08-15T05:16:14Z,2020-07-16T10:16:08Z,2020-07-16T10:16:08Z,CLOSED,False,83,56,5,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages [RDY],1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/698,https://github.com/infrastation,8,https://github.com/the-tcpdump-group/tcpdump/pull/698#issuecomment-414077252,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004","Thank you for the update. I have just rebased your work on the latest master branch and removed some trailing whitespace.
I have studied the proposed change more thoroughly and can now confirm (as suggested before) that the new function eap_print() must know how many bytes the RADIUS attribute has allocated for the EAP data, and must check that the EAP data fits into that amount of bytes (do not forget that the attribute can have invalid structure). Please find a way to implement these checks in the code with as much attention to detail as possible, and then update the pull request once a new version is ready.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,698,2018-08-15T05:16:14Z,2020-07-16T10:16:08Z,2020-07-16T10:16:08Z,CLOSED,False,83,56,5,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages [RDY],1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/698,https://github.com/aravindprasads,9,https://github.com/the-tcpdump-group/tcpdump/pull/698#issuecomment-414134945,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004","Hi @infrastation
Thanks a lot for taking time and reviewing the code. Greatly appreciate it.
I have placed the length check to verify if the RADIUS attribute payload length actually matches with the EAP attribute length.
Other than this check, I feel the code is well guarded for invalid value checks.
The basic length check is already made at the print_attr_string() API (""ND_TCHECK_LEN(data, length)"")  and the length/value checks are made in eap_print() API.
If I am missing anything, could you kindly guide me through the checks required additionally in the code.
Thanks a lot for the continued support.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,698,2018-08-15T05:16:14Z,2020-07-16T10:16:08Z,2020-07-16T10:16:08Z,CLOSED,False,83,56,5,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages [RDY],1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/698,https://github.com/infrastation,10,https://github.com/the-tcpdump-group/tcpdump/pull/698#issuecomment-414650016,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004","Thank you for the update. Let me try to explain how to get these details right and to keep this code safe.
The function eapol_print() knows the amount of bytes allocated for the EAP packet in the EAPOL frame. The function print_attr_string() knows the amount of bytes allocated for the EAP packet in the RADIUS attribute. These functions need to pass that amount into eap_print(), but they do not need to access into the EAP packet to avoid violation of layers. The function eap_print() needs to verify that the amount of bytes is sufficient for the EAP structure in the packet, which has its own length field (keep the optional EAP padding from RFC 3748 Section 4 in mind). If the function eap_print() finds that the EAP packet was truncated, it needs to signal this to the calling function.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,698,2018-08-15T05:16:14Z,2020-07-16T10:16:08Z,2020-07-16T10:16:08Z,CLOSED,False,83,56,5,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages [RDY],1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/698,https://github.com/aravindprasads,11,https://github.com/the-tcpdump-group/tcpdump/pull/698#issuecomment-415653030,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004","Hi @infrastation
Thanks a lot for the explanation. Understood your point. Introduced the length parameter in eap_print() API and added the check for verifying the length field in its own packet and the length passed from outer later (EAPOL/RADIUS).
Thanks a lot for the support and guidance. Kindly review the changes.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,698,2018-08-15T05:16:14Z,2020-07-16T10:16:08Z,2020-07-16T10:16:08Z,CLOSED,False,83,56,5,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages [RDY],1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/698,https://github.com/aravindprasads,12,https://github.com/the-tcpdump-group/tcpdump/pull/698#issuecomment-418965757,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004","Hi @infrastation
Kindly review the changes and let me know your views. Thanks for the support.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,698,2018-08-15T05:16:14Z,2020-07-16T10:16:08Z,2020-07-16T10:16:08Z,CLOSED,False,83,56,5,https://github.com/aravindprasads,Feature Request: Added support for EAP dump in RADIUS Messages [RDY],1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/698,https://github.com/aravindprasads,13,https://github.com/the-tcpdump-group/tcpdump/pull/698#issuecomment-421249482,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value:
                 Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value:
                 Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value:
                 Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value:
                 Success (3), id 2, len 4
            0x0000:  0302 0004","Hi @infrastation
Kindly review the changes and let me know your views. Thanks for the support.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,699,2018-08-23T05:21:49Z,2018-09-05T09:55:09Z,2018-09-05T10:03:46Z,MERGED,True,17,3,3,https://github.com/viralkmehta,print nfs write verifier cookie for write and commit operation,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/699,https://github.com/viralkmehta,1,https://github.com/the-tcpdump-group/tcpdump/pull/699,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,699,2018-08-23T05:21:49Z,2018-09-05T09:55:09Z,2018-09-05T10:03:46Z,MERGED,True,17,3,3,https://github.com/viralkmehta,print nfs write verifier cookie for write and commit operation,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/699,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/699#issuecomment-415303167,,Do you have a .pcap that shows the effect of the new code?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,699,2018-08-23T05:21:49Z,2018-09-05T09:55:09Z,2018-09-05T10:03:46Z,MERGED,True,17,3,3,https://github.com/viralkmehta,print nfs write verifier cookie for write and commit operation,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/699,https://github.com/viralkmehta,3,https://github.com/the-tcpdump-group/tcpdump/pull/699#issuecomment-415305172,,"Sure, here is the snippet with the effect of new code, “verf” is printed at the end of NFS WRITE reply.

[mehtav3@centos72_base tcpdump]$ ./tcpdump -vvv -A -r /tmp/sltf_packet_sniffer20180817-051652 | grep -i write                          reading from file /tmp/sltf_packet_sniffer20180817-051652, link-type EN10MB (Ethernet)
    cec.devvm.com.1004 > 10.98.159.140.nfs: Flags [P.], cksum 0x0029 (incorrect -> 0x4fb1), seq 472:648, ack 437, win 254, options [nop,nop,TS val 1038246747 ecr 4985707], length 176: NFS request xid 4080038983 172 write fh Unknown/F0A862C6000010000000000013000000A60463377E91765B0000000000000000 29 (29) bytes @ 0 <filesync>
    10.98.159.140.nfs > cec.devvm.com.1004: Flags [P.], cksum 0xe764 (correct), seq 437:601, ack 648, win 2882, options [nop,nop,TS val 4985742 ecr 1038246747], length 164: NFS reply xid 4080038983 reply ok 160 write PRE: sz 0 mtime 1534497435.547590000 ctime 1534497435.588976219 POST: REG 100644 ids 65534/65534 sz 29 nlink 1 rdev 0/0 fsid 5b76917e00000000 fileid 13 a/m/ctime 1534497435.602978000 1534497435.602978000 1534497435.602978000 29 bytes <filesync> verf 14a6

Thanks,
Viral

From: Denis Ovsienko [mailto:notifications@github.com]
Sent: Thursday, August 23, 2018 11:41 AM
To: the-tcpdump-group/tcpdump
Cc: Mehta, Viral; Author
Subject: Re: [the-tcpdump-group/tcpdump] print nfs write verifier cookie for write and commit operation (#699)

Do you have a .pcap that shows the effect of the new code?
—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,699,2018-08-23T05:21:49Z,2018-09-05T09:55:09Z,2018-09-05T10:03:46Z,MERGED,True,17,3,3,https://github.com/viralkmehta,print nfs write verifier cookie for write and commit operation,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/699,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/699#issuecomment-415318654,,It would be most helpful if you added a new test case based on a .pcap file that contains the required NFS packet(s) (tcpdump -# will show packet numbers andeditcap can filter these out for you).,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,699,2018-08-23T05:21:49Z,2018-09-05T09:55:09Z,2018-09-05T10:03:46Z,MERGED,True,17,3,3,https://github.com/viralkmehta,print nfs write verifier cookie for write and commit operation,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/699,https://github.com/viralkmehta,5,https://github.com/the-tcpdump-group/tcpdump/pull/699#issuecomment-415321790,,"Yes, I looked at that and I did not find any relevant existing .pcap file for general NFS testing.

I can see below pasted nfs testing .pcap files.
Let me know which one you think is the most appropriate to add new test and I will do that.

[mehtav3@centos72_base tests]$ grep -i nfs TESTLIST
unaligned-nfs-1 unaligned-nfs-1.pcap    unaligned-nfs-1.out     -v
nfs-attr-oobr           nfs-attr-oobr.pcap              nfs-attr-oobr.out
hoobr_nfs_printfh       hoobr_nfs_printfh.pcap          hoobr_nfs_printfh.out
hoobr_nfs_xid_map_enter hoobr_nfs_xid_map_enter.pcap    hoobr_nfs_xid_map_enter.out


Thanks,
Viral",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,699,2018-08-23T05:21:49Z,2018-09-05T09:55:09Z,2018-09-05T10:03:46Z,MERGED,True,17,3,3,https://github.com/viralkmehta,print nfs write verifier cookie for write and commit operation,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/699,https://github.com/infrastation,6,https://github.com/the-tcpdump-group/tcpdump/pull/699#issuecomment-415326736,,A new separate test would be the most appropriate.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,699,2018-08-23T05:21:49Z,2018-09-05T09:55:09Z,2018-09-05T10:03:46Z,MERGED,True,17,3,3,https://github.com/viralkmehta,print nfs write verifier cookie for write and commit operation,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/699,https://github.com/viralkmehta,7,https://github.com/the-tcpdump-group/tcpdump/pull/699#issuecomment-415333092,,"Alright, that sounds good. I will update the same patch to include test as well.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,699,2018-08-23T05:21:49Z,2018-09-05T09:55:09Z,2018-09-05T10:03:46Z,MERGED,True,17,3,3,https://github.com/viralkmehta,print nfs write verifier cookie for write and commit operation,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/699,https://github.com/viralkmehta,8,https://github.com/the-tcpdump-group/tcpdump/pull/699#issuecomment-415703165,,Added a new commit which adds new test for the code changes,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,699,2018-08-23T05:21:49Z,2018-09-05T09:55:09Z,2018-09-05T10:03:46Z,MERGED,True,17,3,3,https://github.com/viralkmehta,print nfs write verifier cookie for write and commit operation,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/699,https://github.com/infrastation,9,https://github.com/the-tcpdump-group/tcpdump/pull/699#issuecomment-417084614,,"If the proposed change follows RFC 7530, it could be helpful to refer to particular sections as that's quite a large document.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,699,2018-08-23T05:21:49Z,2018-09-05T09:55:09Z,2018-09-05T10:03:46Z,MERGED,True,17,3,3,https://github.com/viralkmehta,print nfs write verifier cookie for write and commit operation,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/699,https://github.com/infrastation,10,https://github.com/the-tcpdump-group/tcpdump/pull/699#issuecomment-418288022,,"Thank you for the comments, now it makes more sense. Do you have references to specific sections of the protocol specification?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,699,2018-08-23T05:21:49Z,2018-09-05T09:55:09Z,2018-09-05T10:03:46Z,MERGED,True,17,3,3,https://github.com/viralkmehta,print nfs write verifier cookie for write and commit operation,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/699,https://github.com/viralkmehta,11,https://github.com/the-tcpdump-group/tcpdump/pull/699#issuecomment-418289260,,"This one is standard reply for NFS WRITE operation and the verifier cookie is valid for both NFSv3 and NFSv4. So, far it was not being printed and I added the change.
For RFC section, you can look at,
https://tools.ietf.org/html/rfc1813#section-3.3.7",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,699,2018-08-23T05:21:49Z,2018-09-05T09:55:09Z,2018-09-05T10:03:46Z,MERGED,True,17,3,3,https://github.com/viralkmehta,print nfs write verifier cookie for write and commit operation,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/699,https://github.com/viralkmehta,12,https://github.com/the-tcpdump-group/tcpdump/pull/699#issuecomment-418290611,,"And under the section I mentioned, look at
struct WRITE3resok {
wcc_data    file_wcc;
count3      count;
stable_how  committed;
writeverf3  verf;
};
The last field is what this patch is printing, now.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,699,2018-08-23T05:21:49Z,2018-09-05T09:55:09Z,2018-09-05T10:03:46Z,MERGED,True,17,3,3,https://github.com/viralkmehta,print nfs write verifier cookie for write and commit operation,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/699,https://github.com/viralkmehta,13,https://github.com/the-tcpdump-group/tcpdump/pull/699#issuecomment-418295122,,"Hi,
Btw, had a question on who merges the code ? And when does that happen generally ?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,699,2018-08-23T05:21:49Z,2018-09-05T09:55:09Z,2018-09-05T10:03:46Z,MERGED,True,17,3,3,https://github.com/viralkmehta,print nfs write verifier cookie for write and commit operation,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/699,https://github.com/infrastation,14,https://github.com/the-tcpdump-group/tcpdump/pull/699#issuecomment-418425563,,"Thank you for the spec references, that is helpful. One or another maintainer merges pull requests when the changes are ready for production and the maintainer is able to proof-read. The amount of time and work differs, you can look through closed pull requests if interested. This pull request should not take long to merge.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,699,2018-08-23T05:21:49Z,2018-09-05T09:55:09Z,2018-09-05T10:03:46Z,MERGED,True,17,3,3,https://github.com/viralkmehta,print nfs write verifier cookie for write and commit operation,2,"['improvement', 'fixed in 4.10.0']",https://github.com/the-tcpdump-group/tcpdump/pull/699,https://github.com/infrastation,15,https://github.com/the-tcpdump-group/tcpdump/pull/699#issuecomment-418674548,,"I see how the existing code relates with the WRITE operation definition (Section 3.3.7), in that the structure is different for an OK and for a non-OK status. The COMMIT operation (Section 3.3.21) code does not seem to take the status into account (it does not call parsestatus() at all), so something may be wrong in this decoder, but the new code has bounds check, so even if it produces incorrect output, it will do it safely.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,700,2018-08-24T15:57:56Z,,2020-02-17T14:05:18Z,OPEN,False,280,0,6,https://github.com/catenacyber,Fuzzing tcpdump and netdissect,8,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/700,https://github.com/catenacyber,1,https://github.com/the-tcpdump-group/tcpdump/pull/700,For use with oss-fuzz,For use with oss-fuzz,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,700,2018-08-24T15:57:56Z,,2020-02-17T14:05:18Z,OPEN,False,280,0,6,https://github.com/catenacyber,Fuzzing tcpdump and netdissect,8,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/700,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/700#issuecomment-418072789,For use with oss-fuzz,Could you address the missing header issue with AppVeyor and make this change ready for merging (even if it does not make it into OSS-Fuzz)?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,700,2018-08-24T15:57:56Z,,2020-02-17T14:05:18Z,OPEN,False,280,0,6,https://github.com/catenacyber,Fuzzing tcpdump and netdissect,8,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/700,https://github.com/guyharris,3,https://github.com/the-tcpdump-group/tcpdump/pull/700#issuecomment-418165030,For use with oss-fuzz,"Could you address the missing header issue with AppVeyor

...which, as with libpcap, means ""don't build the fuzz subdirectory on Windows unless you port fuzz-pcap.c to Windows"".",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,700,2018-08-24T15:57:56Z,,2020-02-17T14:05:18Z,OPEN,False,280,0,6,https://github.com/catenacyber,Fuzzing tcpdump and netdissect,8,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/700,https://github.com/catenacyber,4,https://github.com/the-tcpdump-group/tcpdump/pull/700#issuecomment-472732630,For use with oss-fuzz,"Thanks for your review

I think there are benefits to both paths

I totally agree
I guess I took the lazy solution

This makes it harder to create a corpus
You can maybe use tshark
See for instance what I did for HTTP : catenacyber/libhtp@58e1db2",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,700,2018-08-24T15:57:56Z,,2020-02-17T14:05:18Z,OPEN,False,280,0,6,https://github.com/catenacyber,Fuzzing tcpdump and netdissect,8,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/700,https://github.com/fenner,5,https://github.com/the-tcpdump-group/tcpdump/pull/700#issuecomment-473028151,For use with oss-fuzz,"This makes it harder to create a corpus
You can maybe use tshark


I ended up using scapy and a short python script to take the existing pcap files and turn them into individual per-fuzzer corpora, and another script to do the inverse to convert the kind of file that oss-fuzz would provide with a bug report into a pcap file.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,700,2018-08-24T15:57:56Z,,2020-02-17T14:05:18Z,OPEN,False,280,0,6,https://github.com/catenacyber,Fuzzing tcpdump and netdissect,8,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/700,https://github.com/catenacyber,6,https://github.com/the-tcpdump-group/tcpdump/pull/700#issuecomment-473184814,For use with oss-fuzz,Looks great. Can you share these scripts ?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,700,2018-08-24T15:57:56Z,,2020-02-17T14:05:18Z,OPEN,False,280,0,6,https://github.com/catenacyber,Fuzzing tcpdump and netdissect,8,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/700,https://github.com/fenner,7,https://github.com/the-tcpdump-group/tcpdump/pull/700#issuecomment-473348711,For use with oss-fuzz,"Looks great. Can you share these scripts ?

Sorry, I thought I had posted a link. https://github.com/fenner/tcpdump/tree/fuzz/fuzz
I still want to move some of the build.sh to the tcpdump repo, but for now I added this to the oss-fuzz one that you wrote:
$CC $CFLAGS -I.. -I. -c ../fuzz/common.c -o common.o

for p in ip ip6 ether bgp
do 
   $CC $CFLAGS -I.. -I. -c ../fuzz/${p}_print_fuzzer.c -o ${p}_print_fuzzer.o
   $CXX $CXXFLAGS ${p}_print_fuzzer.o common.o -o $OUT/${p}_print_fuzzer libnetdissect.a ../../libpcap/build/libpcap.a -lFuzzingEngine
done

mkdir corpus
cd corpus
$SRC/tcpdump/fuzz/corpus/pcap2corpus $SRC/tcpdump/tests/*.pcap
for d in *
do
   zip -r $OUT/${d}_print_fuzzer_seed_corpus.zip $d/*
done

cd ..
and added python and scapy to the list of packages installed.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,701,2018-09-22T03:23:55Z,2018-09-22T03:29:09Z,2018-09-22T03:29:09Z,MERGED,True,1,1,1,https://github.com/loganaden,Update my email address,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/701,https://github.com/loganaden,1,https://github.com/the-tcpdump-group/tcpdump/pull/701,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,702,2018-09-25T08:44:40Z,2018-11-28T16:43:16Z,2019-02-16T02:42:52Z,CLOSED,False,8,4,3,https://github.com/Boucher-Lambert,Subject: Introduce -nn option,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/702,https://github.com/Boucher-Lambert,1,https://github.com/the-tcpdump-group/tcpdump/pull/702,"This changes the semantics on -n option so only namelookups are skipped. Port
numbers are translated to their string representations. Option -nn then has
the same semantics as -n had originally.
This is a partial upstreaming of tcpdump-4.9.2-3 used in CentOs 7.5.
Signed-off-by: Timothee Boucher-Lambert timothee.boucher-lambert@tessares.net","This changes the semantics on -n option so only namelookups are skipped. Port
numbers are translated to their string representations. Option -nn then has
the same semantics as -n had originally.
This is a partial upstreaming of tcpdump-4.9.2-3 used in CentOs 7.5.
Signed-off-by: Timothee Boucher-Lambert timothee.boucher-lambert@tessares.net",True,{'THUMBS_DOWN': ['https://github.com/ckreibich']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,702,2018-09-25T08:44:40Z,2018-11-28T16:43:16Z,2019-02-16T02:42:52Z,CLOSED,False,8,4,3,https://github.com/Boucher-Lambert,Subject: Introduce -nn option,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/702,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/702#issuecomment-424637818,"This changes the semantics on -n option so only namelookups are skipped. Port
numbers are translated to their string representations. Option -nn then has
the same semantics as -n had originally.
This is a partial upstreaming of tcpdump-4.9.2-3 used in CentOs 7.5.
Signed-off-by: Timothee Boucher-Lambert timothee.boucher-lambert@tessares.net","I vaguely remember a discussion along those lines, but do not remember why it did not result in such a change. Regardless if it was some code complications or just lack of time, from a user point of view the proposed change looks clear.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,702,2018-09-25T08:44:40Z,2018-11-28T16:43:16Z,2019-02-16T02:42:52Z,CLOSED,False,8,4,3,https://github.com/Boucher-Lambert,Subject: Introduce -nn option,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/702,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/702#issuecomment-433929496,"This changes the semantics on -n option so only namelookups are skipped. Port
numbers are translated to their string representations. Option -nn then has
the same semantics as -n had originally.
This is a partial upstreaming of tcpdump-4.9.2-3 used in CentOs 7.5.
Signed-off-by: Timothee Boucher-Lambert timothee.boucher-lambert@tessares.net",Should be discussed on tcpdump-workers@lists.tcpdump.org ?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,702,2018-09-25T08:44:40Z,2018-11-28T16:43:16Z,2019-02-16T02:42:52Z,CLOSED,False,8,4,3,https://github.com/Boucher-Lambert,Subject: Introduce -nn option,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/702,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/702#issuecomment-434235920,"This changes the semantics on -n option so only namelookups are skipped. Port
numbers are translated to their string representations. Option -nn then has
the same semantics as -n had originally.
This is a partial upstreaming of tcpdump-4.9.2-3 used in CentOs 7.5.
Signed-off-by: Timothee Boucher-Lambert timothee.boucher-lambert@tessares.net",Requested feedback on the list.,True,{'THUMBS_UP': ['https://github.com/fxlb']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,702,2018-09-25T08:44:40Z,2018-11-28T16:43:16Z,2019-02-16T02:42:52Z,CLOSED,False,8,4,3,https://github.com/Boucher-Lambert,Subject: Introduce -nn option,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/702,https://github.com/frisso,5,https://github.com/the-tcpdump-group/tcpdump/pull/702#issuecomment-435795800,"This changes the semantics on -n option so only namelookups are skipped. Port
numbers are translated to their string representations. Option -nn then has
the same semantics as -n had originally.
This is a partial upstreaming of tcpdump-4.9.2-3 used in CentOs 7.5.
Signed-off-by: Timothee Boucher-Lambert timothee.boucher-lambert@tessares.net","I would prefer to avoid breaking the semantic of already implemented switches.
My proposal would be to create a new switch (e.g., ""-na"" do not resolve addresses, which implicitly tells the user that port names can be translated) with the additional behavior, and leave ""-n"" as it is now.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,702,2018-09-25T08:44:40Z,2018-11-28T16:43:16Z,2019-02-16T02:42:52Z,CLOSED,False,8,4,3,https://github.com/Boucher-Lambert,Subject: Introduce -nn option,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/702,https://github.com/sethhall,6,https://github.com/the-tcpdump-group/tcpdump/pull/702#issuecomment-436636293,"This changes the semantics on -n option so only namelookups are skipped. Port
numbers are translated to their string representations. Option -nn then has
the same semantics as -n had originally.
This is a partial upstreaming of tcpdump-4.9.2-3 used in CentOs 7.5.
Signed-off-by: Timothee Boucher-Lambert timothee.boucher-lambert@tessares.net","Wow, please don't merge this change.  There are lots of great points being made on the tcpdump-workers list but for me the absolute most convincing one is that it would suddenly make my typical set of command line flags have a different behavior and it would be inconsistent between systems.
With most tools all I'm ever trying to do is figure out how to disable this behavior since pre-providing the lookup in /etc/services has rarely been helpful to me.",True,"{'THUMBS_UP': ['https://github.com/vstoffer', 'https://github.com/ckreibich', 'https://github.com/agnosticdev']}"
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,702,2018-09-25T08:44:40Z,2018-11-28T16:43:16Z,2019-02-16T02:42:52Z,CLOSED,False,8,4,3,https://github.com/Boucher-Lambert,Subject: Introduce -nn option,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/702,https://github.com/ckreibich,7,https://github.com/the-tcpdump-group/tcpdump/pull/702#issuecomment-436771381,"This changes the semantics on -n option so only namelookups are skipped. Port
numbers are translated to their string representations. Option -nn then has
the same semantics as -n had originally.
This is a partial upstreaming of tcpdump-4.9.2-3 used in CentOs 7.5.
Signed-off-by: Timothee Boucher-Lambert timothee.boucher-lambert@tessares.net","Please, no! Do not change established command line usage, period. This is a big deal. For the folks already used to -n vs -nn, running -nn already achieves the same thing, so if you really want to now allow distinction of just what doesn't get resolved, do it via a new mechanism, like the one Joerg suggests on the list.",True,{'THUMBS_UP': ['https://github.com/agnosticdev']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,702,2018-09-25T08:44:40Z,2018-11-28T16:43:16Z,2019-02-16T02:42:52Z,CLOSED,False,8,4,3,https://github.com/Boucher-Lambert,Subject: Introduce -nn option,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/702,https://github.com/infrastation,8,https://github.com/the-tcpdump-group/tcpdump/pull/702#issuecomment-436777739,"This changes the semantics on -n option so only namelookups are skipped. Port
numbers are translated to their string representations. Option -nn then has
the same semantics as -n had originally.
This is a partial upstreaming of tcpdump-4.9.2-3 used in CentOs 7.5.
Signed-off-by: Timothee Boucher-Lambert timothee.boucher-lambert@tessares.net","@Boucher-Lambert, could you please clarify the motivation for having the ""don't resolve addresses, but resolve service names"" mode, regardless of how exactly the user activates it? I could think of potential scenarios where it would be useful, but what is your practical use case?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,702,2018-09-25T08:44:40Z,2018-11-28T16:43:16Z,2019-02-16T02:42:52Z,CLOSED,False,8,4,3,https://github.com/Boucher-Lambert,Subject: Introduce -nn option,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/702,https://github.com/infrastation,9,https://github.com/the-tcpdump-group/tcpdump/pull/702#issuecomment-438586035,"This changes the semantics on -n option so only namelookups are skipped. Port
numbers are translated to their string representations. Option -nn then has
the same semantics as -n had originally.
This is a partial upstreaming of tcpdump-4.9.2-3 used in CentOs 7.5.
Signed-off-by: Timothee Boucher-Lambert timothee.boucher-lambert@tessares.net","Would everybody be willing to accept that -n remains as it is now (resolve neither hostnames nor service names) and -nn becomes ""do not resolve hostnames, but resolve service names)?",True,{'THUMBS_UP': ['https://github.com/agnosticdev']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,702,2018-09-25T08:44:40Z,2018-11-28T16:43:16Z,2019-02-16T02:42:52Z,CLOSED,False,8,4,3,https://github.com/Boucher-Lambert,Subject: Introduce -nn option,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/702,https://github.com/mcr,10,https://github.com/the-tcpdump-group/tcpdump/pull/702#issuecomment-438781454,"This changes the semantics on -n option so only namelookups are skipped. Port
numbers are translated to their string representations. Option -nn then has
the same semantics as -n had originally.
This is a partial upstreaming of tcpdump-4.9.2-3 used in CentOs 7.5.
Signed-off-by: Timothee Boucher-Lambert timothee.boucher-lambert@tessares.net","Denis Ovsienko <notifications@github.com> wrote:
 Would everybody be willing to accept that -n remains as it is now
 (resolve neither hostnames nor service names) and -nn becomes ""do not
 resolve hostnames, but resolve service names)?

I'm happy with that.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,702,2018-09-25T08:44:40Z,2018-11-28T16:43:16Z,2019-02-16T02:42:52Z,CLOSED,False,8,4,3,https://github.com/Boucher-Lambert,Subject: Introduce -nn option,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/702,https://github.com/Boucher-Lambert,11,https://github.com/the-tcpdump-group/tcpdump/pull/702#issuecomment-441639787,"This changes the semantics on -n option so only namelookups are skipped. Port
numbers are translated to their string representations. Option -nn then has
the same semantics as -n had originally.
This is a partial upstreaming of tcpdump-4.9.2-3 used in CentOs 7.5.
Signed-off-by: Timothee Boucher-Lambert timothee.boucher-lambert@tessares.net","Would everybody be willing to accept that -n remains as it is now (resolve neither hostnames nor service names) and -nn becomes ""do not resolve hostnames, but resolve service names)?

No.
I proposed this change because I noticed a difference in the semantic between the mainstream tcpdump and the tcpdump used in CentOs.
In CentOs, the options are as follow:
-n     Don't convert host addresses to names.  This can be used to avoid DNS lookups.
-nn    Don't convert protocol and port numbers etc. to names either.
With current implementation of -n in tcpdump, there is style somehow a compatibility ( since -nn will be interpreted as -n) with a code written for CentOs.
If  -nn becomes ""do not resolve hostnames, but resolve service names"", the semantic becomes the opposite of what it is in CentOs.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,702,2018-09-25T08:44:40Z,2018-11-28T16:43:16Z,2019-02-16T02:42:52Z,CLOSED,False,8,4,3,https://github.com/Boucher-Lambert,Subject: Introduce -nn option,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/702,https://github.com/infrastation,12,https://github.com/the-tcpdump-group/tcpdump/pull/702#issuecomment-442047826,"This changes the semantics on -n option so only namelookups are skipped. Port
numbers are translated to their string representations. Option -nn then has
the same semantics as -n had originally.
This is a partial upstreaming of tcpdump-4.9.2-3 used in CentOs 7.5.
Signed-off-by: Timothee Boucher-Lambert timothee.boucher-lambert@tessares.net","I have studied the change proposed in this pull request and I confirm you have explained its immediate effect correctly. However, an unsolicited default behaviour change in the CentOS tcpdump package (or any other tcpdump package, for that matter) does not on its own make valid grounds for the default behaviour change everywhere. If the proposed change is merged as it is now, it will likely cause a long-time annoyance for the software maintainers for no obvious gain.
As to ""code written for CentOS"", you still have not updated on the specific use cases, hence from your comments it looks like making a CentOS-specific change in one software and then having to make CentOS-specific changes in other software, i.e. keeping developers busy to achieve what was available in the first place -- original tcpdump and code written for generic Linux/POSIX.
If your goal is to introduce a new mode that disables host name lookups but leaves service name lookups in place, there are other, much cleaner ways to achieve that in CentOS and elsewhere. One of which could be, for example, adding a command-line parameter like --resolve-service-names and migrating the code to use it. If you decide to work in that direction, I would be willing to assist in merging such a change. But I believe it would be wrong to accept the change originally proposed in this pull request.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,702,2018-09-25T08:44:40Z,2018-11-28T16:43:16Z,2019-02-16T02:42:52Z,CLOSED,False,8,4,3,https://github.com/Boucher-Lambert,Subject: Introduce -nn option,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/702,https://github.com/micolous,13,https://github.com/the-tcpdump-group/tcpdump/pull/702#issuecomment-464276309,"This changes the semantics on -n option so only namelookups are skipped. Port
numbers are translated to their string representations. Option -nn then has
the same semantics as -n had originally.
This is a partial upstreaming of tcpdump-4.9.2-3 used in CentOs 7.5.
Signed-off-by: Timothee Boucher-Lambert timothee.boucher-lambert@tessares.net","This comment is offered neutrally, after trying to troubleshoot some tests in another software package which failed as a result of this patch.
I found this patch has been included in Red Hat's distributions of tcpdump since 2001, as tcpdump-3.6.1-portnumbers.patch:
* Sat Jan 13 2001 Pekka Savola <pekkas@netcore.fi>            
  - Make -n resolve port/protocol numbers but not hostnames, -nn for no            
    resolving at all

The publicly accessible mailing list archives for tcpdump only appear to go back to 2002, but I found a previous upstreaming attempt in 2009.
It does not appear that this patch has been applied to Debian or Gentoo.  I haven't checked other distributions of tcpdump.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,703,2018-10-02T03:11:13Z,2019-01-29T02:27:49Z,2019-01-29T02:27:49Z,MERGED,True,20,0,1,https://github.com/dmiller-nmap,Add files generated by CMake on Windows to .gitignore,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/703,https://github.com/dmiller-nmap,1,https://github.com/the-tcpdump-group/tcpdump/pull/703,These files were generated by running CMake.exe and then building the Debug configuration in Visual Studio 2015. I'll push one more commit in a moment for files created by building the other configurations.,These files were generated by running CMake.exe and then building the Debug configuration in Visual Studio 2015. I'll push one more commit in a moment for files created by building the other configurations.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,703,2018-10-02T03:11:13Z,2019-01-29T02:27:49Z,2019-01-29T02:27:49Z,MERGED,True,20,0,1,https://github.com/dmiller-nmap,Add files generated by CMake on Windows to .gitignore,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/703,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/703#issuecomment-426217477,These files were generated by running CMake.exe and then building the Debug configuration in Visual Studio 2015. I'll push one more commit in a moment for files created by building the other configurations.,"So this is for doing an in-tree build, running CMake from the top-level source tree, rather than, for example, making a separate build directory and running CMake from that directory, right?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,703,2018-10-02T03:11:13Z,2019-01-29T02:27:49Z,2019-01-29T02:27:49Z,MERGED,True,20,0,1,https://github.com/dmiller-nmap,Add files generated by CMake on Windows to .gitignore,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/703,https://github.com/dmiller-nmap,3,https://github.com/the-tcpdump-group/tcpdump/pull/703#issuecomment-426308298,These files were generated by running CMake.exe and then building the Debug configuration in Visual Studio 2015. I'll push one more commit in a moment for files created by building the other configurations.,"@guyharris Yes, that's correct. I hadn't considered using a separate build directory (we're a little behind the times like that at Nmap 😄 ). This is pretty low priority, then, considering that, and I'll understand if you want to just close it out.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,703,2018-10-02T03:11:13Z,2019-01-29T02:27:49Z,2019-01-29T02:27:49Z,MERGED,True,20,0,1,https://github.com/dmiller-nmap,Add files generated by CMake on Windows to .gitignore,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/703,https://github.com/guyharris,4,https://github.com/the-tcpdump-group/tcpdump/pull/703#issuecomment-458382993,These files were generated by running CMake.exe and then building the Debug configuration in Visual Studio 2015. I'll push one more commit in a moment for files created by building the other configurations.,"Might as well include them - I don't think there's any harm in adding additional stuff to .gitignore.
(Doing the equivalent for other CMake generators, e.g. UN*X make or Ninja, is left as an exercise to the reader^Win-tree builder.)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,704,2018-10-02T03:58:29Z,2018-10-02T16:48:03Z,2018-10-02T16:48:03Z,MERGED,True,1,0,1,https://github.com/dmiller-nmap,Ensure isatty is defined on Win32.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/704,https://github.com/dmiller-nmap,1,https://github.com/the-tcpdump-group/tcpdump/pull/704,"isatty has been deprecated in Visual Studio since at least VS 2012. It doesn't cause a compile error, but does generate a warning that it's not defined and is assumed to be an extern returning an int. This change includes the appropriate header, io.h, for the replacement _isatty function and defines isatty to be _isatty if it's not already defined.","isatty has been deprecated in Visual Studio since at least VS 2012. It doesn't cause a compile error, but does generate a warning that it's not defined and is assumed to be an extern returning an int. This change includes the appropriate header, io.h, for the replacement _isatty function and defines isatty to be _isatty if it's not already defined.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,704,2018-10-02T03:58:29Z,2018-10-02T16:48:03Z,2018-10-02T16:48:03Z,MERGED,True,1,0,1,https://github.com/dmiller-nmap,Ensure isatty is defined on Win32.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/704,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/704#issuecomment-426218647,"isatty has been deprecated in Visual Studio since at least VS 2012. It doesn't cause a compile error, but does generate a warning that it's not defined and is assumed to be an extern returning an int. This change includes the appropriate header, io.h, for the replacement _isatty function and defines isatty to be _isatty if it's not already defined.","This should probably go into the ""Microsoft tries to avoid polluting the C namespace with UN*Xisms"" section of netdissect-stdinc.h, along with the other ""pretend this is UN*X"" definitions.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,704,2018-10-02T03:58:29Z,2018-10-02T16:48:03Z,2018-10-02T16:48:03Z,MERGED,True,1,0,1,https://github.com/dmiller-nmap,Ensure isatty is defined on Win32.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/704,https://github.com/dmiller-nmap,3,https://github.com/the-tcpdump-group/tcpdump/pull/704#issuecomment-426307278,"isatty has been deprecated in Visual Studio since at least VS 2012. It doesn't cause a compile error, but does generate a warning that it's not defined and is assumed to be an extern returning an int. This change includes the appropriate header, io.h, for the replacement _isatty function and defines isatty to be _isatty if it's not already defined.",@guyharris I see how that would be cleaner. Please see the updated commit.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,705,2018-10-02T14:44:02Z,2018-10-03T19:30:38Z,2018-10-04T07:23:16Z,CLOSED,False,1,1,2,https://github.com/herwinw,Change unknown attribute in test,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/705,https://github.com/herwinw,1,https://github.com/the-tcpdump-group/tcpdump/pull/705,"The value 127 is actually assigned to the Location-Information Attribute
(RFC 5580). Change it to a very high value.
This way it won't interfere when we'll add the attributes from RFC5580 to the list.","The value 127 is actually assigned to the Location-Information Attribute
(RFC 5580). Change it to a very high value.
This way it won't interfere when we'll add the attributes from RFC5580 to the list.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,705,2018-10-02T14:44:02Z,2018-10-03T19:30:38Z,2018-10-04T07:23:16Z,CLOSED,False,1,1,2,https://github.com/herwinw,Change unknown attribute in test,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/705,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/705#issuecomment-426768233,"The value 127 is actually assigned to the Location-Information Attribute
(RFC 5580). Change it to a very high value.
This way it won't interfere when we'll add the attributes from RFC5580 to the list.",Merged as a4e008c after rebase.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,705,2018-10-02T14:44:02Z,2018-10-03T19:30:38Z,2018-10-04T07:23:16Z,CLOSED,False,1,1,2,https://github.com/herwinw,Change unknown attribute in test,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/705,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/705#issuecomment-426768768,"The value 127 is actually assigned to the Location-Information Attribute
(RFC 5580). Change it to a very high value.
This way it won't interfere when we'll add the attributes from RFC5580 to the list.",Thanks.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,706,2018-10-03T16:07:10Z,2020-08-27T14:29:34Z,2020-08-27T14:31:53Z,MERGED,True,209,0,4,https://github.com/herwinw,WIP: Add RADIUS attributes from RFC5580,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/706,https://github.com/herwinw,1,https://github.com/the-tcpdump-group/tcpdump/pull/706,"I've started decoding the RADIUS attributes from RFC5580, but I'm reaching the point where a first review and some pointers in the right direction might get useful.
The main issue here is Location-Information, which contains a lot of inner fields, making it complex to print. My main issues here:

Snooping a field currently consists of calling an EXTRACT-macro, manually advancing a pointer to data and finally decrementing length with all the fields already processed. This feels like taking 2 steps too many. Is there an existing way to simplify this?
The timestamps are the 64 bit format also used in ntp. Is it okay to extract some logic from print-ntp.c to a shared module that can be used by the ntp and radius dissectors?

The file tests/rfc5580.packet is something I feed to radclient to create the packets and will not be included in the final commit (once this is all done)","I've started decoding the RADIUS attributes from RFC5580, but I'm reaching the point where a first review and some pointers in the right direction might get useful.
The main issue here is Location-Information, which contains a lot of inner fields, making it complex to print. My main issues here:

Snooping a field currently consists of calling an EXTRACT-macro, manually advancing a pointer to data and finally decrementing length with all the fields already processed. This feels like taking 2 steps too many. Is there an existing way to simplify this?
The timestamps are the 64 bit format also used in ntp. Is it okay to extract some logic from print-ntp.c to a shared module that can be used by the ntp and radius dissectors?

The file tests/rfc5580.packet is something I feed to radclient to create the packets and will not be included in the final commit (once this is all done)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,706,2018-10-03T16:07:10Z,2020-08-27T14:29:34Z,2020-08-27T14:31:53Z,MERGED,True,209,0,4,https://github.com/herwinw,WIP: Add RADIUS attributes from RFC5580,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/706,https://github.com/mcr,2,https://github.com/the-tcpdump-group/tcpdump/pull/706#issuecomment-426715327,"I've started decoding the RADIUS attributes from RFC5580, but I'm reaching the point where a first review and some pointers in the right direction might get useful.
The main issue here is Location-Information, which contains a lot of inner fields, making it complex to print. My main issues here:

Snooping a field currently consists of calling an EXTRACT-macro, manually advancing a pointer to data and finally decrementing length with all the fields already processed. This feels like taking 2 steps too many. Is there an existing way to simplify this?
The timestamps are the 64 bit format also used in ntp. Is it okay to extract some logic from print-ntp.c to a shared module that can be used by the ntp and radius dissectors?

The file tests/rfc5580.packet is something I feed to radclient to create the packets and will not be included in the final commit (once this is all done)","Herwin <notifications@github.com> wrote:
 The timestamps
 are the 64 bit format also used in ntp. Is it okay to extract some
 logic from print-ntp.c to a shared module that can be used by the ntp
 and radius dissectors?

That's a great idea.
Make a separate pull request.
 The Travis tests will fail, but that is not really related to this PR
 (see #705). The file tests/rfc5580.packet is something I feed to
 radclient to create the packets and will not be included in the final
 commit (once this is all done)

Put it somewhere else, but please include it, as someone else might want to
use it.
…
--
]               Never tell me the odds!                 | ipv6 mesh networks [
]   Michael Richardson, Sandelman Software Works        | network architect  [
]     mcr@sandelman.ca  http://www.sandelman.ca/        |   ruby on rails    [",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,706,2018-10-03T16:07:10Z,2020-08-27T14:29:34Z,2020-08-27T14:31:53Z,MERGED,True,209,0,4,https://github.com/herwinw,WIP: Add RADIUS attributes from RFC5580,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/706,https://github.com/herwinw,3,https://github.com/the-tcpdump-group/tcpdump/pull/706#issuecomment-427065475,"I've started decoding the RADIUS attributes from RFC5580, but I'm reaching the point where a first review and some pointers in the right direction might get useful.
The main issue here is Location-Information, which contains a lot of inner fields, making it complex to print. My main issues here:

Snooping a field currently consists of calling an EXTRACT-macro, manually advancing a pointer to data and finally decrementing length with all the fields already processed. This feels like taking 2 steps too many. Is there an existing way to simplify this?
The timestamps are the 64 bit format also used in ntp. Is it okay to extract some logic from print-ntp.c to a shared module that can be used by the ntp and radius dissectors?

The file tests/rfc5580.packet is something I feed to radclient to create the packets and will not be included in the final commit (once this is all done)","@mcr Regarding the radclient-statement: this is more a generic problem than something specific for this issue. I've implemented a number of RADIUS-RFCs and all the pcap-files in the test-folder for RADIUS have been generated that way.
Problem is: these RADIUS-client-files are no foolproof way to regenerate the PCAP files. radclient uses a random client port, the UDP packet size may change, the RADIUS authenticator will change if the packet data (or the secret) is changed. I found myself constatly copy-pasting the new generated packet when working on this code.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,706,2018-10-03T16:07:10Z,2020-08-27T14:29:34Z,2020-08-27T14:31:53Z,MERGED,True,209,0,4,https://github.com/herwinw,WIP: Add RADIUS attributes from RFC5580,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/706,https://github.com/mcr,4,https://github.com/the-tcpdump-group/tcpdump/pull/706#issuecomment-427153690,"I've started decoding the RADIUS attributes from RFC5580, but I'm reaching the point where a first review and some pointers in the right direction might get useful.
The main issue here is Location-Information, which contains a lot of inner fields, making it complex to print. My main issues here:

Snooping a field currently consists of calling an EXTRACT-macro, manually advancing a pointer to data and finally decrementing length with all the fields already processed. This feels like taking 2 steps too many. Is there an existing way to simplify this?
The timestamps are the 64 bit format also used in ntp. Is it okay to extract some logic from print-ntp.c to a shared module that can be used by the ntp and radius dissectors?

The file tests/rfc5580.packet is something I feed to radclient to create the packets and will not be included in the final commit (once this is all done)","If we have the script, we can at least repeat what you did.
I think that I can teach radclient to use the same port number,
if I go to the effort if spining up a radius server.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,706,2018-10-03T16:07:10Z,2020-08-27T14:29:34Z,2020-08-27T14:31:53Z,MERGED,True,209,0,4,https://github.com/herwinw,WIP: Add RADIUS attributes from RFC5580,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/706,https://github.com/fxlb,5,https://github.com/the-tcpdump-group/tcpdump/pull/706#issuecomment-619349172,"I've started decoding the RADIUS attributes from RFC5580, but I'm reaching the point where a first review and some pointers in the right direction might get useful.
The main issue here is Location-Information, which contains a lot of inner fields, making it complex to print. My main issues here:

Snooping a field currently consists of calling an EXTRACT-macro, manually advancing a pointer to data and finally decrementing length with all the fields already processed. This feels like taking 2 steps too many. Is there an existing way to simplify this?
The timestamps are the 64 bit format also used in ntp. Is it okay to extract some logic from print-ntp.c to a shared module that can be used by the ntp and radius dissectors?

The file tests/rfc5580.packet is something I feed to radclient to create the packets and will not be included in the final commit (once this is all done)","Please, use the new GET_ macros instead of EXTRACT_ ones (See 176e182 and ee68aa3).
s/EXTRACT_/GET_/g
The new GET_ macros have embedded bounds checks, via get_ inline functions (see extract.h).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,706,2018-10-03T16:07:10Z,2020-08-27T14:29:34Z,2020-08-27T14:31:53Z,MERGED,True,209,0,4,https://github.com/herwinw,WIP: Add RADIUS attributes from RFC5580,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/706,https://github.com/fxlb,6,https://github.com/the-tcpdump-group/tcpdump/pull/706#issuecomment-619367349,"I've started decoding the RADIUS attributes from RFC5580, but I'm reaching the point where a first review and some pointers in the right direction might get useful.
The main issue here is Location-Information, which contains a lot of inner fields, making it complex to print. My main issues here:

Snooping a field currently consists of calling an EXTRACT-macro, manually advancing a pointer to data and finally decrementing length with all the fields already processed. This feels like taking 2 steps too many. Is there an existing way to simplify this?
The timestamps are the 64 bit format also used in ntp. Is it okay to extract some logic from print-ntp.c to a shared module that can be used by the ntp and radius dissectors?

The file tests/rfc5580.packet is something I feed to radclient to create the packets and will not be included in the final commit (once this is all done)","You should replace u_intN_t by C99-style uintN_t.
(Errors on Windows builds - Appveyor)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,706,2018-10-03T16:07:10Z,2020-08-27T14:29:34Z,2020-08-27T14:31:53Z,MERGED,True,209,0,4,https://github.com/herwinw,WIP: Add RADIUS attributes from RFC5580,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/706,https://github.com/infrastation,7,https://github.com/the-tcpdump-group/tcpdump/pull/706#issuecomment-673475601,"I've started decoding the RADIUS attributes from RFC5580, but I'm reaching the point where a first review and some pointers in the right direction might get useful.
The main issue here is Location-Information, which contains a lot of inner fields, making it complex to print. My main issues here:

Snooping a field currently consists of calling an EXTRACT-macro, manually advancing a pointer to data and finally decrementing length with all the fields already processed. This feels like taking 2 steps too many. Is there an existing way to simplify this?
The timestamps are the 64 bit format also used in ntp. Is it okay to extract some logic from print-ntp.c to a shared module that can be used by the ntp and radius dissectors?

The file tests/rfc5580.packet is something I feed to radclient to create the packets and will not be included in the final commit (once this is all done)","Let me know if you need help rebasing and updating this pull request, it should not be difficult to resolve this before long.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,706,2018-10-03T16:07:10Z,2020-08-27T14:29:34Z,2020-08-27T14:31:53Z,MERGED,True,209,0,4,https://github.com/herwinw,WIP: Add RADIUS attributes from RFC5580,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/706,https://github.com/infrastation,8,https://github.com/the-tcpdump-group/tcpdump/pull/706#issuecomment-675768760,"I've started decoding the RADIUS attributes from RFC5580, but I'm reaching the point where a first review and some pointers in the right direction might get useful.
The main issue here is Location-Information, which contains a lot of inner fields, making it complex to print. My main issues here:

Snooping a field currently consists of calling an EXTRACT-macro, manually advancing a pointer to data and finally decrementing length with all the fields already processed. This feels like taking 2 steps too many. Is there an existing way to simplify this?
The timestamps are the 64 bit format also used in ntp. Is it okay to extract some logic from print-ntp.c to a shared module that can be used by the ntp and radius dissectors?

The file tests/rfc5580.packet is something I feed to radclient to create the packets and will not be included in the final commit (once this is all done)","Rebased on the current master and added the trivial fixups requested above (please squash these before/during the merge).
Did not review any other aspects of the proposed change.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,706,2018-10-03T16:07:10Z,2020-08-27T14:29:34Z,2020-08-27T14:31:53Z,MERGED,True,209,0,4,https://github.com/herwinw,WIP: Add RADIUS attributes from RFC5580,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/706,https://github.com/infrastation,9,https://github.com/the-tcpdump-group/tcpdump/pull/706#issuecomment-679431041,"I've started decoding the RADIUS attributes from RFC5580, but I'm reaching the point where a first review and some pointers in the right direction might get useful.
The main issue here is Location-Information, which contains a lot of inner fields, making it complex to print. My main issues here:

Snooping a field currently consists of calling an EXTRACT-macro, manually advancing a pointer to data and finally decrementing length with all the fields already processed. This feels like taking 2 steps too many. Is there an existing way to simplify this?
The timestamps are the 64 bit format also used in ntp. Is it okay to extract some logic from print-ntp.c to a shared module that can be used by the ntp and radius dissectors?

The file tests/rfc5580.packet is something I feed to radclient to create the packets and will not be included in the final commit (once this is all done)","print_attr_operator_name() checked for NUL character when printing the Operator-Name part of the Text value, although Section 4.1 defines that string as counted, not terminated. It also tested if each character is printable. Please see the fixup commit that uses nd_printn() instead of the custom code and either object or squash it into the final version.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,706,2018-10-03T16:07:10Z,2020-08-27T14:29:34Z,2020-08-27T14:31:53Z,MERGED,True,209,0,4,https://github.com/herwinw,WIP: Add RADIUS attributes from RFC5580,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/706,https://github.com/infrastation,10,https://github.com/the-tcpdump-group/tcpdump/pull/706#issuecomment-679447316,"I've started decoding the RADIUS attributes from RFC5580, but I'm reaching the point where a first review and some pointers in the right direction might get useful.
The main issue here is Location-Information, which contains a lot of inner fields, making it complex to print. My main issues here:

Snooping a field currently consists of calling an EXTRACT-macro, manually advancing a pointer to data and finally decrementing length with all the fields already processed. This feels like taking 2 steps too many. Is there an existing way to simplify this?
The timestamps are the 64 bit format also used in ntp. Is it okay to extract some logic from print-ntp.c to a shared module that can be used by the ntp and radius dissectors?

The file tests/rfc5580.packet is something I feed to radclient to create the packets and will not be included in the final commit (once this is all done)","For print_attr_location_information() the same stands as above, plus I have changed the unknown value format strings to avoid duplication. That is another fixup commit.
Besides that, it would be nice to have Sighting Time and Time-to-Live decoded from NTP format (as stated in respective source code comments), although to me Section 4.2 reads as if Time-to-Live value is both absolute (NTP timestamp) and relative (""for how long""). I accept it may not be immediately doable.
Two more attributes yet to review.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,706,2018-10-03T16:07:10Z,2020-08-27T14:29:34Z,2020-08-27T14:31:53Z,MERGED,True,209,0,4,https://github.com/herwinw,WIP: Add RADIUS attributes from RFC5580,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/706,https://github.com/infrastation,11,https://github.com/the-tcpdump-group/tcpdump/pull/706#issuecomment-679455988,"I've started decoding the RADIUS attributes from RFC5580, but I'm reaching the point where a first review and some pointers in the right direction might get useful.
The main issue here is Location-Information, which contains a lot of inner fields, making it complex to print. My main issues here:

Snooping a field currently consists of calling an EXTRACT-macro, manually advancing a pointer to data and finally decrementing length with all the fields already processed. This feels like taking 2 steps too many. Is there an existing way to simplify this?
The timestamps are the 64 bit format also used in ntp. Is it okay to extract some logic from print-ntp.c to a shared module that can be used by the ntp and radius dissectors?

The file tests/rfc5580.packet is something I feed to radclient to create the packets and will not be included in the final commit (once this is all done)","For print_attr_location_data() it seems to be wrong to print the String field as a string.
Its structure depends on the Code value (which for some reason is stored in the Location-Information attribute); for Civic (0) the data is a variable-length structure with TLVs (RFC 4776 Section 3 less the first 3 octets); for Geospatial (1) the data is a fixed-length structure (RFC 3825 Section 2 less the first 2 octets). For any other code point the structure is unknown.
This way, there is no case where printing the data as a string would produce any useful output, and the sample packet has invalid data for location index 1. Could you double-check?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,706,2018-10-03T16:07:10Z,2020-08-27T14:29:34Z,2020-08-27T14:31:53Z,MERGED,True,209,0,4,https://github.com/herwinw,WIP: Add RADIUS attributes from RFC5580,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/706,https://github.com/infrastation,12,https://github.com/the-tcpdump-group/tcpdump/pull/706#issuecomment-679480056,"I've started decoding the RADIUS attributes from RFC5580, but I'm reaching the point where a first review and some pointers in the right direction might get useful.
The main issue here is Location-Information, which contains a lot of inner fields, making it complex to print. My main issues here:

Snooping a field currently consists of calling an EXTRACT-macro, manually advancing a pointer to data and finally decrementing length with all the fields already processed. This feels like taking 2 steps too many. Is there an existing way to simplify this?
The timestamps are the 64 bit format also used in ntp. Is it okay to extract some logic from print-ntp.c to a shared module that can be used by the ntp and radius dissectors?

The file tests/rfc5580.packet is something I feed to radclient to create the packets and will not be included in the final commit (once this is all done)","In print_basic_location_policy_rules() the Note Well field is optional, so another fixup commit amends the code accordingly and uses nd_printn() as before. Also in Flags the reserved bits must be zero, so I have changed the code to make it obvious when any MBZ bits are set. Also it would be nice to decode Retention Expires since Section 4.4 is sufficiently clear that the value is absolute, but that's not critical. Rebased on the latest master branch.
Summary: please see the print_attr_location_data() comment above, which is the only outstanding major issue in the proposed changes.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,706,2018-10-03T16:07:10Z,2020-08-27T14:29:34Z,2020-08-27T14:31:53Z,MERGED,True,209,0,4,https://github.com/herwinw,WIP: Add RADIUS attributes from RFC5580,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/706,https://github.com/infrastation,13,https://github.com/the-tcpdump-group/tcpdump/pull/706#issuecomment-680071372,"I've started decoding the RADIUS attributes from RFC5580, but I'm reaching the point where a first review and some pointers in the right direction might get useful.
The main issue here is Location-Information, which contains a lot of inner fields, making it complex to print. My main issues here:

Snooping a field currently consists of calling an EXTRACT-macro, manually advancing a pointer to data and finally decrementing length with all the fields already processed. This feels like taking 2 steps too many. Is there an existing way to simplify this?
The timestamps are the 64 bit format also used in ntp. Is it okay to extract some logic from print-ntp.c to a shared module that can be used by the ntp and radius dissectors?

The file tests/rfc5580.packet is something I feed to radclient to create the packets and will not be included in the final commit (once this is all done)","Added another minor fixup to print NTP timestamps (since that is easy after merging #708), which makes it apparent that all three example timestamps are 1900-08-09T22:25:43Z. It would be better to have more realistic values there, also Time-to-Live and Retention are supposed to be greater than Sighting Time. Also letter case and puntuation are more consistent now.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,706,2018-10-03T16:07:10Z,2020-08-27T14:29:34Z,2020-08-27T14:31:53Z,MERGED,True,209,0,4,https://github.com/herwinw,WIP: Add RADIUS attributes from RFC5580,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/706,https://github.com/infrastation,14,https://github.com/the-tcpdump-group/tcpdump/pull/706#issuecomment-681155183,"I've started decoding the RADIUS attributes from RFC5580, but I'm reaching the point where a first review and some pointers in the right direction might get useful.
The main issue here is Location-Information, which contains a lot of inner fields, making it complex to print. My main issues here:

Snooping a field currently consists of calling an EXTRACT-macro, manually advancing a pointer to data and finally decrementing length with all the fields already processed. This feels like taking 2 steps too many. Is there an existing way to simplify this?
The timestamps are the 64 bit format also used in ntp. Is it okay to extract some logic from print-ntp.c to a shared module that can be used by the ntp and radius dissectors?

The file tests/rfc5580.packet is something I feed to radclient to create the packets and will not be included in the final commit (once this is all done)","Added a fixup to plug the Location-Data issue explained above. If anybody sees any outstanding issues in the code, please comment before long. I am going to clean the pile of WIP commits up and to merge the final version soon.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,706,2018-10-03T16:07:10Z,2020-08-27T14:29:34Z,2020-08-27T14:31:53Z,MERGED,True,209,0,4,https://github.com/herwinw,WIP: Add RADIUS attributes from RFC5580,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/706,https://github.com/infrastation,15,https://github.com/the-tcpdump-group/tcpdump/pull/706#issuecomment-681986760,"I've started decoding the RADIUS attributes from RFC5580, but I'm reaching the point where a first review and some pointers in the right direction might get useful.
The main issue here is Location-Information, which contains a lot of inner fields, making it complex to print. My main issues here:

Snooping a field currently consists of calling an EXTRACT-macro, manually advancing a pointer to data and finally decrementing length with all the fields already processed. This feels like taking 2 steps too many. Is there an existing way to simplify this?
The timestamps are the 64 bit format also used in ntp. Is it okay to extract some logic from print-ntp.c to a shared module that can be used by the ntp and radius dissectors?

The file tests/rfc5580.packet is something I feed to radclient to create the packets and will not be included in the final commit (once this is all done)","This has been merged as the originally proposed commit with one annotated fixup commit on top, thank you everyone for your input.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,707,2018-10-03T18:24:02Z,2018-10-03T20:11:28Z,2018-10-04T07:23:02Z,MERGED,True,1,1,1,https://github.com/herwinw,Fix tab/spaces in GNUmakefile of win32,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/707,https://github.com/herwinw,1,https://github.com/the-tcpdump-group/tcpdump/pull/707,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,707,2018-10-03T18:24:02Z,2018-10-03T20:11:28Z,2018-10-04T07:23:02Z,MERGED,True,1,1,1,https://github.com/herwinw,Fix tab/spaces in GNUmakefile of win32,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/707,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/707#issuecomment-426744936,,"Note that neither Travis nor AppVeyor uses this; the only Windows build system files I'm bothering to maintain, at least, are the files for CMake (as they can be used for UN*Xes and Windows).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,707,2018-10-03T18:24:02Z,2018-10-03T20:11:28Z,2018-10-04T07:23:02Z,MERGED,True,1,1,1,https://github.com/herwinw,Fix tab/spaces in GNUmakefile of win32,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/707,https://github.com/guyharris,3,https://github.com/the-tcpdump-group/tcpdump/pull/707#issuecomment-426784427,,"Note that neither Travis nor AppVeyor uses this; the only Windows build system files I'm bothering to maintain, at least, are the files for CMake (as they can be used for UN*Xes and Windows).

This means that anybody who finds an issue with the GNUmakefile, or with the Visual Studio project files, will have to fix those files themselves, and submit a pull request if they want the fix to be in the repository.  It also means that they're likely to find issues appearing over time due to code rot....",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,708,2018-10-03T18:46:25Z,2020-04-22T07:10:42Z,2020-04-22T09:36:08Z,CLOSED,False,177,101,9,https://github.com/herwinw,Extract NTP printing,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/708,https://github.com/herwinw,1,https://github.com/the-tcpdump-group/tcpdump/pull/708,"This method is required to disect some RADIUS attributes (see #706)
The changes in the win32 folder are based on what grep could find for other shared modules, and have not been tested in any way.","This method is required to disect some RADIUS attributes (see #706)
The changes in the win32 folder are based on what grep could find for other shared modules, and have not been tested in any way.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,708,2018-10-03T18:46:25Z,2020-04-22T07:10:42Z,2020-04-22T09:36:08Z,CLOSED,False,177,101,9,https://github.com/herwinw,Extract NTP printing,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/708,https://github.com/mcr,2,https://github.com/the-tcpdump-group/tcpdump/pull/708#issuecomment-488886198,"This method is required to disect some RADIUS attributes (see #706)
The changes in the win32 folder are based on what grep could find for other shared modules, and have not been tested in any way.","I think this code will have to be redone, as we have changed the ND* check macros a lot, and so it probably does not merge.  Can you redo this from master?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,708,2018-10-03T18:46:25Z,2020-04-22T07:10:42Z,2020-04-22T09:36:08Z,CLOSED,False,177,101,9,https://github.com/herwinw,Extract NTP printing,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/708,https://github.com/herwinw,3,https://github.com/the-tcpdump-group/tcpdump/pull/708#issuecomment-490485716,"This method is required to disect some RADIUS attributes (see #706)
The changes in the win32 folder are based on what grep could find for other shared modules, and have not been tested in any way.",Rebased,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,708,2018-10-03T18:46:25Z,2020-04-22T07:10:42Z,2020-04-22T09:36:08Z,CLOSED,False,177,101,9,https://github.com/herwinw,Extract NTP printing,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/708,https://github.com/fxlb,4,https://github.com/the-tcpdump-group/tcpdump/pull/708#issuecomment-617594928,"This method is required to disect some RADIUS attributes (see #706)
The changes in the win32 folder are based on what grep could find for other shared modules, and have not been tested in any way.","Rebased, merged as commit 763bef5 with 2 changes:

fix typo in commit message,
update some #include.

Thanks for your patience.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,710,2018-10-09T02:21:07Z,2018-10-09T08:02:46Z,2018-10-09T13:44:29Z,MERGED,True,8,1,2,https://github.com/agnosticdev,return-checks: Added a return check for malloc and for strsep,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/710,https://github.com/agnosticdev,1,https://github.com/the-tcpdump-group/tcpdump/pull/710,"Added a return check for malloc in tcpdump.c.
Added a return check for strsep in print-esp.c.
Fixed a small typo.
All tests passed.","Added a return check for malloc in tcpdump.c.
Added a return check for strsep in print-esp.c.
Fixed a small typo.
All tests passed.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,710,2018-10-09T02:21:07Z,2018-10-09T08:02:46Z,2018-10-09T13:44:29Z,MERGED,True,8,1,2,https://github.com/agnosticdev,return-checks: Added a return check for malloc and for strsep,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/710,https://github.com/Bugcheckers,2,https://github.com/the-tcpdump-group/tcpdump/pull/710#issuecomment-428197366,"Added a return check for malloc in tcpdump.c.
Added a return check for strsep in print-esp.c.
Fixed a small typo.
All tests passed.",address issue #709,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,711,2018-10-09T10:09:52Z,2019-01-01T18:40:37Z,2019-01-01T18:40:42Z,CLOSED,False,4,0,1,https://github.com/agnosticdev,return-checks: 2 final return checks for SMB,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/711,https://github.com/agnosticdev,1,https://github.com/the-tcpdump-group/tcpdump/pull/711,"2 final return check for strchr in smbutil.c
Added to help address issue #709
All tests passed.","2 final return check for strchr in smbutil.c
Added to help address issue #709
All tests passed.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,711,2018-10-09T10:09:52Z,2019-01-01T18:40:37Z,2019-01-01T18:40:42Z,CLOSED,False,4,0,1,https://github.com/agnosticdev,return-checks: 2 final return checks for SMB,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/711,https://github.com/agnosticdev,2,https://github.com/the-tcpdump-group/tcpdump/pull/711#issuecomment-428533192,"2 final return check for strchr in smbutil.c
Added to help address issue #709
All tests passed.",Was there an issue with the build system previously that was causing Travis not to pass?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,711,2018-10-09T10:09:52Z,2019-01-01T18:40:37Z,2019-01-01T18:40:42Z,CLOSED,False,4,0,1,https://github.com/agnosticdev,return-checks: 2 final return checks for SMB,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/711,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/711#issuecomment-428648054,"2 final return check for strchr in smbutil.c
Added to help address issue #709
All tests passed.","Yes, Travis jobs sometimes fail to start or time out, and then a project administrator has to push a button to try again.",True,{'THUMBS_UP': ['https://github.com/agnosticdev']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,711,2018-10-09T10:09:52Z,2019-01-01T18:40:37Z,2019-01-01T18:40:42Z,CLOSED,False,4,0,1,https://github.com/agnosticdev,return-checks: 2 final return checks for SMB,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/711,https://github.com/guyharris,4,https://github.com/the-tcpdump-group/tcpdump/pull/711#issuecomment-428667885,"2 final return check for strchr in smbutil.c
Added to help address issue #709
All tests passed.","Yes, Travis jobs sometimes fail to start or time out, and then a project administrator has to push a button to try again.

At least in the notifications Travis sends by email, a build can be ""broken"" or can have ""errored""; the former seems to mean that the build failed because of, for example, a compile or link error, while the latter seems to mean that it failed to, for example, check out a revision from Git.  The latter is a ""fail to start or time out"" error.",True,{'THUMBS_UP': ['https://github.com/agnosticdev']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,711,2018-10-09T10:09:52Z,2019-01-01T18:40:37Z,2019-01-01T18:40:42Z,CLOSED,False,4,0,1,https://github.com/agnosticdev,return-checks: 2 final return checks for SMB,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/711,https://github.com/agnosticdev,5,https://github.com/the-tcpdump-group/tcpdump/pull/711#issuecomment-428742787,"2 final return check for strchr in smbutil.c
Added to help address issue #709
All tests passed.",Updated the PR to align the indentation between lines.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,711,2018-10-09T10:09:52Z,2019-01-01T18:40:37Z,2019-01-01T18:40:42Z,CLOSED,False,4,0,1,https://github.com/agnosticdev,return-checks: 2 final return checks for SMB,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/711,https://github.com/guyharris,6,https://github.com/the-tcpdump-group/tcpdump/pull/711#issuecomment-428753968,"2 final return check for strchr in smbutil.c
Added to help address issue #709
All tests passed.","The errors being checked for here are errors in the format string; those correspond to bugs in tcpdump, not to errors in the packet or to the packet being cut short by TCP reassembly not being done or by the snapshot length cutting the packet short, so they should probably be reported as such.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,711,2018-10-09T10:09:52Z,2019-01-01T18:40:37Z,2019-01-01T18:40:42Z,CLOSED,False,4,0,1,https://github.com/agnosticdev,return-checks: 2 final return checks for SMB,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/711,https://github.com/agnosticdev,7,https://github.com/the-tcpdump-group/tcpdump/pull/711#issuecomment-428763583,"2 final return check for strchr in smbutil.c
Added to help address issue #709
All tests passed.",Thank you for the feedback.  The PR has been updated.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,711,2018-10-09T10:09:52Z,2019-01-01T18:40:37Z,2019-01-01T18:40:42Z,CLOSED,False,4,0,1,https://github.com/agnosticdev,return-checks: 2 final return checks for SMB,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/711,https://github.com/infrastation,8,https://github.com/the-tcpdump-group/tcpdump/pull/711#issuecomment-428898619,"2 final return check for strchr in smbutil.c
Added to help address issue #709
All tests passed.",Made it one clean commit.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,711,2018-10-09T10:09:52Z,2019-01-01T18:40:37Z,2019-01-01T18:40:42Z,CLOSED,False,4,0,1,https://github.com/agnosticdev,return-checks: 2 final return checks for SMB,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/711,https://github.com/agnosticdev,9,https://github.com/the-tcpdump-group/tcpdump/pull/711#issuecomment-429273203,"2 final return check for strchr in smbutil.c
Added to help address issue #709
All tests passed.","Looks like the issue this is attached to is now closed.  #709
@guyharris  and @infrastation  do you want me to keep this open for merge?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,711,2018-10-09T10:09:52Z,2019-01-01T18:40:37Z,2019-01-01T18:40:42Z,CLOSED,False,4,0,1,https://github.com/agnosticdev,return-checks: 2 final return checks for SMB,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/711,https://github.com/agnosticdev,10,https://github.com/the-tcpdump-group/tcpdump/pull/711#issuecomment-437682029,"2 final return check for strchr in smbutil.c
Added to help address issue #709
All tests passed.",Any updates on this PR?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,711,2018-10-09T10:09:52Z,2019-01-01T18:40:37Z,2019-01-01T18:40:42Z,CLOSED,False,4,0,1,https://github.com/agnosticdev,return-checks: 2 final return checks for SMB,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/711,https://github.com/agnosticdev,11,https://github.com/the-tcpdump-group/tcpdump/pull/711#issuecomment-443444045,"2 final return check for strchr in smbutil.c
Added to help address issue #709
All tests passed.",@infrastation or @guyharris is this PR still being considered or should I close it?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,711,2018-10-09T10:09:52Z,2019-01-01T18:40:37Z,2019-01-01T18:40:42Z,CLOSED,False,4,0,1,https://github.com/agnosticdev,return-checks: 2 final return checks for SMB,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/711,https://github.com/agnosticdev,12,https://github.com/the-tcpdump-group/tcpdump/pull/711#issuecomment-450701550,"2 final return check for strchr in smbutil.c
Added to help address issue #709
All tests passed.",PING on this PR.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,711,2018-10-09T10:09:52Z,2019-01-01T18:40:37Z,2019-01-01T18:40:42Z,CLOSED,False,4,0,1,https://github.com/agnosticdev,return-checks: 2 final return checks for SMB,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/711,https://github.com/agnosticdev,13,https://github.com/the-tcpdump-group/tcpdump/pull/711#issuecomment-450749076,"2 final return check for strchr in smbutil.c
Added to help address issue #709
All tests passed.",Closing PR due to being outdated.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,715,2018-11-06T11:00:57Z,2018-11-09T19:20:01Z,2018-11-09T19:20:01Z,MERGED,True,1,1,1,https://github.com/rbgarga,Include correct capsicum header,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/715,https://github.com/rbgarga,1,https://github.com/the-tcpdump-group/tcpdump/pull/715,"Current included header sys/capability.h is deprecated. All
supported FreeBSD versions have now the proper header sys/capsicum.h","Current included header sys/capability.h is deprecated. All
supported FreeBSD versions have now the proper header sys/capsicum.h",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,715,2018-11-06T11:00:57Z,2018-11-09T19:20:01Z,2018-11-09T19:20:01Z,MERGED,True,1,1,1,https://github.com/rbgarga,Include correct capsicum header,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/715,https://github.com/emaste,2,https://github.com/the-tcpdump-group/tcpdump/pull/715#issuecomment-437449680,"Current included header sys/capability.h is deprecated. All
supported FreeBSD versions have now the proper header sys/capsicum.h",Note that FreeBSD's sys/capability.h will be removed before FreeBSD 13.0.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,715,2018-11-06T11:00:57Z,2018-11-09T19:20:01Z,2018-11-09T19:20:01Z,MERGED,True,1,1,1,https://github.com/rbgarga,Include correct capsicum header,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/715,https://github.com/guyharris,3,https://github.com/the-tcpdump-group/tcpdump/pull/715#issuecomment-437466453,"Current included header sys/capability.h is deprecated. All
supported FreeBSD versions have now the proper header sys/capsicum.h","My PC-BSD 9.1 system doesn't have sys/capsicum.h, but my PC-BSD 9.1 system also doesn't have a Flex capable of generating reentrant scanners, so I'm not that concerned with supporting FreeBSD 9 or earlier; if somebody wants to add configuration checks to include sys/capability.h on older systems, they may do so.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,716,2018-11-11T18:41:11Z,2018-11-12T18:14:02Z,2018-11-12T18:21:54Z,MERGED,True,4,4,3,https://github.com/x-way,show ICMPv6 echo request ID,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/716,https://github.com/x-way,1,https://github.com/the-tcpdump-group/tcpdump/pull/716,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,716,2018-11-11T18:41:11Z,2018-11-12T18:14:02Z,2018-11-12T18:21:54Z,MERGED,True,4,4,3,https://github.com/x-way,show ICMPv6 echo request ID,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/716,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/716#issuecomment-437980833,,Thank you.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,717,2018-11-18T16:31:03Z,2018-11-22T17:25:07Z,2018-11-22T17:25:13Z,CLOSED,False,16,0,4,None,Fix checksum calculation for IPv6 Segment Routing (SRv6) traffic,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/717,None,1,https://github.com/the-tcpdump-group/tcpdump/pull/717,"The checksum calculation for IPv6 packets is based on a pseudo
header that includes the packets’ final Destination Address (DA).
If the IPv6 packet contains a Routing header, the final DA is the
last element of the Routing header [RFC8200].
Currently, tcpdump supports Routing header types 0 and 2.
IPv6 Segment Routing Header (SRH) is a new Routing header type (4).
SRH is defined in draft-ietf-6man-segment-routing-header [1].
This patch fix the checksum calculation for SRv6 packets.
It allows tcpdump to get the final DA value from SRv6 packets.
[1] https://tools.ietf.org/html/draft-ietf-6man-segment-routing-header-15","The checksum calculation for IPv6 packets is based on a pseudo
header that includes the packets’ final Destination Address (DA).
If the IPv6 packet contains a Routing header, the final DA is the
last element of the Routing header [RFC8200].
Currently, tcpdump supports Routing header types 0 and 2.
IPv6 Segment Routing Header (SRH) is a new Routing header type (4).
SRH is defined in draft-ietf-6man-segment-routing-header [1].
This patch fix the checksum calculation for SRv6 packets.
It allows tcpdump to get the final DA value from SRv6 packets.
[1] https://tools.ietf.org/html/draft-ietf-6man-segment-routing-header-15",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,718,2018-11-22T18:09:46Z,2019-03-29T11:59:57Z,2019-03-29T11:59:57Z,CLOSED,False,16,0,4,None,Fix checksum calculation for IPv6 Segment Routing (SRv6) traffic,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/718,None,1,https://github.com/the-tcpdump-group/tcpdump/pull/718,"The checksum calculation for IPv6 packets is based on a pseudo
header that includes the packets’ final Destination Address (DA).
If the IPv6 packet contains a Routing header, the final DA is the
last element of the Routing header [RFC8200].
Currently, tcpdump supports Routing header types 0 and 2.
IPv6 Segment Routing Header (SRH) is a new Routing header type (4).
SRH is defined in draft-ietf-6man-segment-routing-header [1].
This patch fix the checksum calculation for SRv6 packets. It allows
tcpdump to get the final DA value from SRv6 packets.
[1] https://tools.ietf.org/html/draft-ietf-6man-segment-routing-header-15","The checksum calculation for IPv6 packets is based on a pseudo
header that includes the packets’ final Destination Address (DA).
If the IPv6 packet contains a Routing header, the final DA is the
last element of the Routing header [RFC8200].
Currently, tcpdump supports Routing header types 0 and 2.
IPv6 Segment Routing Header (SRH) is a new Routing header type (4).
SRH is defined in draft-ietf-6man-segment-routing-header [1].
This patch fix the checksum calculation for SRv6 packets. It allows
tcpdump to get the final DA value from SRv6 packets.
[1] https://tools.ietf.org/html/draft-ietf-6man-segment-routing-header-15",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,718,2018-11-22T18:09:46Z,2019-03-29T11:59:57Z,2019-03-29T11:59:57Z,CLOSED,False,16,0,4,None,Fix checksum calculation for IPv6 Segment Routing (SRv6) traffic,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/718,https://github.com/ahsalam,2,https://github.com/the-tcpdump-group/tcpdump/pull/718#issuecomment-476167362,"The checksum calculation for IPv6 packets is based on a pseudo
header that includes the packets’ final Destination Address (DA).
If the IPv6 packet contains a Routing header, the final DA is the
last element of the Routing header [RFC8200].
Currently, tcpdump supports Routing header types 0 and 2.
IPv6 Segment Routing Header (SRH) is a new Routing header type (4).
SRH is defined in draft-ietf-6man-segment-routing-header [1].
This patch fix the checksum calculation for SRv6 packets. It allows
tcpdump to get the final DA value from SRv6 packets.
[1] https://tools.ietf.org/html/draft-ietf-6man-segment-routing-header-15",Any news on this one ?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,718,2018-11-22T18:09:46Z,2019-03-29T11:59:57Z,2019-03-29T11:59:57Z,CLOSED,False,16,0,4,None,Fix checksum calculation for IPv6 Segment Routing (SRv6) traffic,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/718,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/718#issuecomment-477943569,"The checksum calculation for IPv6 packets is based on a pseudo
header that includes the packets’ final Destination Address (DA).
If the IPv6 packet contains a Routing header, the final DA is the
last element of the Routing header [RFC8200].
Currently, tcpdump supports Routing header types 0 and 2.
IPv6 Segment Routing Header (SRH) is a new Routing header type (4).
SRH is defined in draft-ietf-6man-segment-routing-header [1].
This patch fix the checksum calculation for SRv6 packets. It allows
tcpdump to get the final DA value from SRv6 packets.
[1] https://tools.ietf.org/html/draft-ietf-6man-segment-routing-header-15","Draft is now '-17', any change ?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,718,2018-11-22T18:09:46Z,2019-03-29T11:59:57Z,2019-03-29T11:59:57Z,CLOSED,False,16,0,4,None,Fix checksum calculation for IPv6 Segment Routing (SRv6) traffic,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/718,https://github.com/ahsalam,4,https://github.com/the-tcpdump-group/tcpdump/pull/718#issuecomment-477953141,"The checksum calculation for IPv6 packets is based on a pseudo
header that includes the packets’ final Destination Address (DA).
If the IPv6 packet contains a Routing header, the final DA is the
last element of the Routing header [RFC8200].
Currently, tcpdump supports Routing header types 0 and 2.
IPv6 Segment Routing Header (SRH) is a new Routing header type (4).
SRH is defined in draft-ietf-6man-segment-routing-header [1].
This patch fix the checksum calculation for SRv6 packets. It allows
tcpdump to get the final DA value from SRv6 packets.
[1] https://tools.ietf.org/html/draft-ietf-6man-segment-routing-header-15","There is no change regarding this as it is an architecture principle. At ingress node, the Segment Routing Header (SRH) is inserted between the IPv6 header and transport layer header. The Destination address (DA) of the packet is updated to be the first SID and accordingly to preserve to the original  destination address is added as the last SID in the SRH SID list. Hence, any node that needs to verify the checksum of packet must retrieve the packet original packet header which is the last as mentioned.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,718,2018-11-22T18:09:46Z,2019-03-29T11:59:57Z,2019-03-29T11:59:57Z,CLOSED,False,16,0,4,None,Fix checksum calculation for IPv6 Segment Routing (SRv6) traffic,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/718,https://github.com/fxlb,5,https://github.com/the-tcpdump-group/tcpdump/pull/718#issuecomment-477958288,"The checksum calculation for IPv6 packets is based on a pseudo
header that includes the packets’ final Destination Address (DA).
If the IPv6 packet contains a Routing header, the final DA is the
last element of the Routing header [RFC8200].
Currently, tcpdump supports Routing header types 0 and 2.
IPv6 Segment Routing Header (SRH) is a new Routing header type (4).
SRH is defined in draft-ietf-6man-segment-routing-header [1].
This patch fix the checksum calculation for SRv6 packets. It allows
tcpdump to get the final DA value from SRv6 packets.
[1] https://tools.ietf.org/html/draft-ietf-6man-segment-routing-header-15","In the commit message you mean ""packet's final Destination Address"" ?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,718,2018-11-22T18:09:46Z,2019-03-29T11:59:57Z,2019-03-29T11:59:57Z,CLOSED,False,16,0,4,None,Fix checksum calculation for IPv6 Segment Routing (SRv6) traffic,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/718,https://github.com/ahsalam,6,https://github.com/the-tcpdump-group/tcpdump/pull/718#issuecomment-477958959,"The checksum calculation for IPv6 packets is based on a pseudo
header that includes the packets’ final Destination Address (DA).
If the IPv6 packet contains a Routing header, the final DA is the
last element of the Routing header [RFC8200].
Currently, tcpdump supports Routing header types 0 and 2.
IPv6 Segment Routing Header (SRH) is a new Routing header type (4).
SRH is defined in draft-ietf-6man-segment-routing-header [1].
This patch fix the checksum calculation for SRv6 packets. It allows
tcpdump to get the final DA value from SRv6 packets.
[1] https://tools.ietf.org/html/draft-ietf-6man-segment-routing-header-15",Yes,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,718,2018-11-22T18:09:46Z,2019-03-29T11:59:57Z,2019-03-29T11:59:57Z,CLOSED,False,16,0,4,None,Fix checksum calculation for IPv6 Segment Routing (SRv6) traffic,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/718,https://github.com/fxlb,7,https://github.com/the-tcpdump-group/tcpdump/pull/718#issuecomment-477959778,"The checksum calculation for IPv6 packets is based on a pseudo
header that includes the packets’ final Destination Address (DA).
If the IPv6 packet contains a Routing header, the final DA is the
last element of the Routing header [RFC8200].
Currently, tcpdump supports Routing header types 0 and 2.
IPv6 Segment Routing Header (SRH) is a new Routing header type (4).
SRH is defined in draft-ietf-6man-segment-routing-header [1].
This patch fix the checksum calculation for SRv6 packets. It allows
tcpdump to get the final DA value from SRv6 packets.
[1] https://tools.ietf.org/html/draft-ietf-6man-segment-routing-header-15","Thanks, I will update that.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,718,2018-11-22T18:09:46Z,2019-03-29T11:59:57Z,2019-03-29T11:59:57Z,CLOSED,False,16,0,4,None,Fix checksum calculation for IPv6 Segment Routing (SRv6) traffic,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/718,https://github.com/fxlb,8,https://github.com/the-tcpdump-group/tcpdump/pull/718#issuecomment-477972513,"The checksum calculation for IPv6 packets is based on a pseudo
header that includes the packets’ final Destination Address (DA).
If the IPv6 packet contains a Routing header, the final DA is the
last element of the Routing header [RFC8200].
Currently, tcpdump supports Routing header types 0 and 2.
IPv6 Segment Routing Header (SRH) is a new Routing header type (4).
SRH is defined in draft-ietf-6man-segment-routing-header [1].
This patch fix the checksum calculation for SRv6 packets. It allows
tcpdump to get the final DA value from SRv6 packets.
[1] https://tools.ietf.org/html/draft-ietf-6man-segment-routing-header-15","Merged, Thank you !",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,719,2018-11-24T16:33:46Z,,2019-05-05T11:01:24Z,OPEN,False,12,6,2,https://github.com/teknoraver,allow to force a cooked capture,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/719,https://github.com/teknoraver,1,https://github.com/the-tcpdump-group/tcpdump/pull/719,"Using a datalink header can be used to show packets direction
depends on the-tcpdump-group/libpcap/pull/784","Using a datalink header can be used to show packets direction
depends on the-tcpdump-group/libpcap/pull/784",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,719,2018-11-24T16:33:46Z,,2019-05-05T11:01:24Z,OPEN,False,12,6,2,https://github.com/teknoraver,allow to force a cooked capture,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/719,https://github.com/mcr,2,https://github.com/the-tcpdump-group/tcpdump/pull/719#issuecomment-488885962,"Using a datalink header can be used to show packets direction
depends on the-tcpdump-group/libpcap/pull/784","New static flags like ""yflag"" are not the way to do stuff.  please add that to the ndo structure, and use a long option to enable it.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,719,2018-11-24T16:33:46Z,,2019-05-05T11:01:24Z,OPEN,False,12,6,2,https://github.com/teknoraver,allow to force a cooked capture,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/719,https://github.com/teknoraver,3,https://github.com/the-tcpdump-group/tcpdump/pull/719#issuecomment-489415349,"Using a datalink header can be used to show packets direction
depends on the-tcpdump-group/libpcap/pull/784","New static flags like ""yflag"" are not the way to do stuff. please add that to the ndo structure, and use a long option to enable it.

Done. The long option was already there as --linktype",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,720,2018-12-06T11:39:06Z,2018-12-13T21:34:34Z,2018-12-13T21:34:34Z,CLOSED,False,2,0,1,https://github.com/pmgdeb,CVE-2018-19519 buffer overread.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/720,https://github.com/pmgdeb,1,https://github.com/the-tcpdump-group/tcpdump/pull/720,"Here is the patch with the suggested solution for CVE-2018-19519 as mentioned in [0] which initializes buf in print-hncp.c:print_prefix.
[0] https://github.com/zyingp/temp/blob/master/tcpdump.md","Here is the patch with the suggested solution for CVE-2018-19519 as mentioned in [0] which initializes buf in print-hncp.c:print_prefix.
[0] https://github.com/zyingp/temp/blob/master/tcpdump.md",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,720,2018-12-06T11:39:06Z,2018-12-13T21:34:34Z,2018-12-13T21:34:34Z,CLOSED,False,2,0,1,https://github.com/pmgdeb,CVE-2018-19519 buffer overread.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/720,https://github.com/agnosticdev,2,https://github.com/the-tcpdump-group/tcpdump/pull/720#issuecomment-445481914,"Here is the patch with the suggested solution for CVE-2018-19519 as mentioned in [0] which initializes buf in print-hncp.c:print_prefix.
[0] https://github.com/zyingp/temp/blob/master/tcpdump.md","Very interesting. In CVE it states:

This issue did not affect the versions of tcpdump as shipped with Red Hat Enterprise Linux 5 and 6.

Why is it affecting Red Hat Enterprise Linux 7?
Is this issue present outside of RHEL also?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,720,2018-12-06T11:39:06Z,2018-12-13T21:34:34Z,2018-12-13T21:34:34Z,CLOSED,False,2,0,1,https://github.com/pmgdeb,CVE-2018-19519 buffer overread.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/720,https://github.com/pmgdeb,3,https://github.com/the-tcpdump-group/tcpdump/pull/720#issuecomment-447015592,"Here is the patch with the suggested solution for CVE-2018-19519 as mentioned in [0] which initializes buf in print-hncp.c:print_prefix.
[0] https://github.com/zyingp/temp/blob/master/tcpdump.md","Why is it affecting Red Hat Enterprise Linux 7?

The affected code was introduced in tcpdump version 4.8.0-bp, see also (https://access.redhat.com/security/cve/cve-2018-19519).

Is this issue present outside of RHEL also?

The reporter found it in Ubuntu, any distro using tcpdump > 4.8.0 should be affected.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,720,2018-12-06T11:39:06Z,2018-12-13T21:34:34Z,2018-12-13T21:34:34Z,CLOSED,False,2,0,1,https://github.com/pmgdeb,CVE-2018-19519 buffer overread.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/720,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/720#issuecomment-447128762,"Here is the patch with the suggested solution for CVE-2018-19519 as mentioned in [0] which initializes buf in print-hncp.c:print_prefix.
[0] https://github.com/zyingp/temp/blob/master/tcpdump.md","Thank you for suggesting this change, but this problem has been identified and fixed a few months ago, the fix will be available in the next tcpdump release. I am sorry, but the report on which you have based this work is a duplicate (as well as the CVE ID). Closing.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,721,2018-12-14T07:50:58Z,2019-11-22T19:59:20Z,2020-02-29T12:50:34Z,CLOSED,False,651,1,10,https://github.com/psglinux,precision time protocol (ptp) encapsulated in UDP,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/721,https://github.com/psglinux,1,https://github.com/the-tcpdump-group/tcpdump/pull/721,"PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.","PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,721,2018-12-14T07:50:58Z,2019-11-22T19:59:20Z,2020-02-29T12:50:34Z,CLOSED,False,651,1,10,https://github.com/psglinux,precision time protocol (ptp) encapsulated in UDP,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/721,https://github.com/psglinux,2,https://github.com/the-tcpdump-group/tcpdump/pull/721#issuecomment-448846753,"PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.",@agnosticdev Thanks for your time to review the changes. will wait for the other review comments before posting these changes and request for another pull request.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,721,2018-12-14T07:50:58Z,2019-11-22T19:59:20Z,2020-02-29T12:50:34Z,CLOSED,False,651,1,10,https://github.com/psglinux,precision time protocol (ptp) encapsulated in UDP,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/721,https://github.com/agnosticdev,3,https://github.com/the-tcpdump-group/tcpdump/pull/721#issuecomment-448982837,"PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.","No problem, thank you.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,721,2018-12-14T07:50:58Z,2019-11-22T19:59:20Z,2020-02-29T12:50:34Z,CLOSED,False,651,1,10,https://github.com/psglinux,precision time protocol (ptp) encapsulated in UDP,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/721,https://github.com/mcr,4,https://github.com/the-tcpdump-group/tcpdump/pull/721#issuecomment-488885691,"PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.","You'll need to redo the ND_ macros, as we have newer ones that do a better job.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,721,2018-12-14T07:50:58Z,2019-11-22T19:59:20Z,2020-02-29T12:50:34Z,CLOSED,False,651,1,10,https://github.com/psglinux,precision time protocol (ptp) encapsulated in UDP,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/721,https://github.com/fxlb,5,https://github.com/the-tcpdump-group/tcpdump/pull/721#issuecomment-489515186,"PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.","You should rebase you branch on the-tcpdump-group:master.
(No "" Merge branch 'master' of https://github.com/the-tcpdump-group/tcpdump "" in your PR).",True,{'THUMBS_UP': ['https://github.com/mcr']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,721,2018-12-14T07:50:58Z,2019-11-22T19:59:20Z,2020-02-29T12:50:34Z,CLOSED,False,651,1,10,https://github.com/psglinux,precision time protocol (ptp) encapsulated in UDP,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/721,https://github.com/psglinux,6,https://github.com/the-tcpdump-group/tcpdump/pull/721#issuecomment-489701089,"PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.","Thanks for pointing out. I haven't made the necessary changes yet . Will
kepp this in mind before sending the pull request again for this change.
…
On Sun, May 5, 2019, 23:43 fxlb ***@***.***> wrote:
 You should *rebase* you branch on the-tcpdump-group:master.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#721 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADA44FR4ZBPBB4LBTLH2QHLPT7HQXANCNFSM4GKMFT5A>
 .",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,721,2018-12-14T07:50:58Z,2019-11-22T19:59:20Z,2020-02-29T12:50:34Z,CLOSED,False,651,1,10,https://github.com/psglinux,precision time protocol (ptp) encapsulated in UDP,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/721,https://github.com/fxlb,7,https://github.com/the-tcpdump-group/tcpdump/pull/721#issuecomment-491623630,"PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.","Please, use the new GET_ macros instead of EXTRACT_ ones (See 176e182 and ee68aa3).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,721,2018-12-14T07:50:58Z,2019-11-22T19:59:20Z,2020-02-29T12:50:34Z,CLOSED,False,651,1,10,https://github.com/psglinux,precision time protocol (ptp) encapsulated in UDP,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/721,https://github.com/psglinux,8,https://github.com/the-tcpdump-group/tcpdump/pull/721#issuecomment-492095353,"PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.",@fxlb will take care of the changes to use EXTRACT_ instead of GET_,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,721,2018-12-14T07:50:58Z,2019-11-22T19:59:20Z,2020-02-29T12:50:34Z,CLOSED,False,651,1,10,https://github.com/psglinux,precision time protocol (ptp) encapsulated in UDP,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/721,https://github.com/psglinux,9,https://github.com/the-tcpdump-group/tcpdump/pull/721#issuecomment-492096028,"PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.","@mcr you mentioned  ""ND_ macros, as we have newer ones that do a better job."" in the code ND_PRINT is being used. Are you suggesting i use a different macro for the print ?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,721,2018-12-14T07:50:58Z,2019-11-22T19:59:20Z,2020-02-29T12:50:34Z,CLOSED,False,651,1,10,https://github.com/psglinux,precision time protocol (ptp) encapsulated in UDP,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/721,https://github.com/psglinux,10,https://github.com/the-tcpdump-group/tcpdump/pull/721#issuecomment-492096540,"PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.","My earlier merge was a mess. so please ignore the failed noises. Sorted that out. may be will raise a new pull request, once the comments are clear to me i will address all of them.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,721,2018-12-14T07:50:58Z,2019-11-22T19:59:20Z,2020-02-29T12:50:34Z,CLOSED,False,651,1,10,https://github.com/psglinux,precision time protocol (ptp) encapsulated in UDP,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/721,https://github.com/fxlb,11,https://github.com/the-tcpdump-group/tcpdump/pull/721#issuecomment-493100219,"PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.","There is no need for a new PR, you could:
# Save your master branch
git checkout master; git checkout -b master-save; git checkout -
# Cancel the last 2 commits (merge branch 'master' and revert the merge)
git reset --hard HEAD~2
# Configuring the remote for your fork (if not already done)
git remote add upstream https://github.com/the-tcpdump-group/tcpdump.git
# Fetch upstream
git fetch upstream
# Rebase on upstream/master
git rebase upstream/master
# Fix the conflict in tests/TESTLIST, editing the file
git add tests/TESTLIST
git rebase --continue
# Do the GET_ and others updates
# Test
make -s check
# Push (forced)
git push -f",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,721,2018-12-14T07:50:58Z,2019-11-22T19:59:20Z,2020-02-29T12:50:34Z,CLOSED,False,651,1,10,https://github.com/psglinux,precision time protocol (ptp) encapsulated in UDP,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/721,https://github.com/psglinux,12,https://github.com/the-tcpdump-group/tcpdump/pull/721#issuecomment-499578256,"PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.",Please let me know if there are any other comments or changes that needs to be taken care.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,721,2018-12-14T07:50:58Z,2019-11-22T19:59:20Z,2020-02-29T12:50:34Z,CLOSED,False,651,1,10,https://github.com/psglinux,precision time protocol (ptp) encapsulated in UDP,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/721,https://github.com/fxlb,13,https://github.com/the-tcpdump-group/tcpdump/pull/721#issuecomment-500735005,"PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.",A new rebase is needed.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,721,2018-12-14T07:50:58Z,2019-11-22T19:59:20Z,2020-02-29T12:50:34Z,CLOSED,False,651,1,10,https://github.com/psglinux,precision time protocol (ptp) encapsulated in UDP,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/721,https://github.com/psglinux,14,https://github.com/the-tcpdump-group/tcpdump/pull/721#issuecomment-506981281,"PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.",Please let me know if any thing else is needed for this pull request.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,721,2018-12-14T07:50:58Z,2019-11-22T19:59:20Z,2020-02-29T12:50:34Z,CLOSED,False,651,1,10,https://github.com/psglinux,precision time protocol (ptp) encapsulated in UDP,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/721,https://github.com/fxlb,15,https://github.com/the-tcpdump-group/tcpdump/pull/721#issuecomment-513273091,"PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.",The commit 4ad9e84 uses get_ inline functions instead of the GET_ macros asked (see a previous comment). Please remove it with a rebase -i and substitute EXTRACT_ macros by  GET_ ones (like in ee68aa3).,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,721,2018-12-14T07:50:58Z,2019-11-22T19:59:20Z,2020-02-29T12:50:34Z,CLOSED,False,651,1,10,https://github.com/psglinux,precision time protocol (ptp) encapsulated in UDP,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/721,https://github.com/psglinux,16,https://github.com/the-tcpdump-group/tcpdump/pull/721#issuecomment-530227798,"PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.",Let me know if the patch is good for merge.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,721,2018-12-14T07:50:58Z,2019-11-22T19:59:20Z,2020-02-29T12:50:34Z,CLOSED,False,651,1,10,https://github.com/psglinux,precision time protocol (ptp) encapsulated in UDP,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/721,https://github.com/fxlb,17,https://github.com/the-tcpdump-group/tcpdump/pull/721#issuecomment-530418103,"PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.","Please, see the indent problems in the  previous comments.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,721,2018-12-14T07:50:58Z,2019-11-22T19:59:20Z,2020-02-29T12:50:34Z,CLOSED,False,651,1,10,https://github.com/psglinux,precision time protocol (ptp) encapsulated in UDP,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/721,https://github.com/fxlb,18,https://github.com/the-tcpdump-group/tcpdump/pull/721#issuecomment-530418926,"PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.","Need to fix ""messsage"" typo.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,721,2018-12-14T07:50:58Z,2019-11-22T19:59:20Z,2020-02-29T12:50:34Z,CLOSED,False,651,1,10,https://github.com/psglinux,precision time protocol (ptp) encapsulated in UDP,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/721,https://github.com/psglinux,19,https://github.com/the-tcpdump-group/tcpdump/pull/721#issuecomment-554766935,"PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.",Let me know if any thing else needs to be done to get this one merged.,True,{'THUMBS_UP': ['https://github.com/mcr']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,721,2018-12-14T07:50:58Z,2019-11-22T19:59:20Z,2020-02-29T12:50:34Z,CLOSED,False,651,1,10,https://github.com/psglinux,precision time protocol (ptp) encapsulated in UDP,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/721,https://github.com/fxlb,20,https://github.com/the-tcpdump-group/tcpdump/pull/721#issuecomment-557115467,"PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.","For a better log history, you should git rebase -i HEAD~7
With r, reword for 050b7be (see h) A commit message must have in CONTRIBUTING file.
For the others commit s, squash ot better I think f, fixup.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,721,2018-12-14T07:50:58Z,2019-11-22T19:59:20Z,2020-02-29T12:50:34Z,CLOSED,False,651,1,10,https://github.com/psglinux,precision time protocol (ptp) encapsulated in UDP,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/721,https://github.com/fxlb,21,https://github.com/the-tcpdump-group/tcpdump/pull/721#issuecomment-557250525,"PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.","Many indent problems already noted, see [Files changed] tab.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,721,2018-12-14T07:50:58Z,2019-11-22T19:59:20Z,2020-02-29T12:50:34Z,CLOSED,False,651,1,10,https://github.com/psglinux,precision time protocol (ptp) encapsulated in UDP,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/721,https://github.com/psglinux,22,https://github.com/the-tcpdump-group/tcpdump/pull/721#issuecomment-557392389,"PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.",@fxlb have fixed the tabs in the other files that I've changed. New files do not have tabs in them and indented with 4 spaces.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,721,2018-12-14T07:50:58Z,2019-11-22T19:59:20Z,2020-02-29T12:50:34Z,CLOSED,False,651,1,10,https://github.com/psglinux,precision time protocol (ptp) encapsulated in UDP,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/721,https://github.com/fxlb,23,https://github.com/the-tcpdump-group/tcpdump/pull/721#issuecomment-557456668,"PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.",Indent problem:,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,721,2018-12-14T07:50:58Z,2019-11-22T19:59:20Z,2020-02-29T12:50:34Z,CLOSED,False,651,1,10,https://github.com/psglinux,precision time protocol (ptp) encapsulated in UDP,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/721,https://github.com/fxlb,24,https://github.com/the-tcpdump-group/tcpdump/pull/721#issuecomment-557456987,"PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.",Another indent problem:,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,721,2018-12-14T07:50:58Z,2019-11-22T19:59:20Z,2020-02-29T12:50:34Z,CLOSED,False,651,1,10,https://github.com/psglinux,precision time protocol (ptp) encapsulated in UDP,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/721,https://github.com/fxlb,25,https://github.com/the-tcpdump-group/tcpdump/pull/721#issuecomment-557673034,"PTP is used for synchronizing time across network.
Added support for PTP packet encapsulated in UDP packets. Have tested for 5 different types of ptp messages.
Greetings !!
I wrote the ptp over udp extension for TCP dump. I've raised a pull request for this. Would be looking forward for the review and suggestion for improvements. There was a ptp extension written by @lunn which is for ptp over L2 (wasn't aware about it till a few days back when i was thinking of sending the code
upstream and read the README :-) ). If needed i can integrate both these code.
Please let me know your thought and comments.","@psglinux
Merged, Thank you!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,722,2018-12-16T13:05:30Z,2019-01-29T02:29:38Z,2019-02-04T16:37:07Z,MERGED,True,11,2,1,https://github.com/aieri,Amend documentation about the use of the -C -G and -W switches.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/722,https://github.com/aieri,1,https://github.com/the-tcpdump-group/tcpdump/pull/722,"When using all three switches (-C -G and -W), the behavior can be a
little unpredictable; this commit aims to at least clarify the
situation.
Fixes #695","When using all three switches (-C -G and -W), the behavior can be a
little unpredictable; this commit aims to at least clarify the
situation.
Fixes #695",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,722,2018-12-16T13:05:30Z,2019-01-29T02:29:38Z,2019-02-04T16:37:07Z,MERGED,True,11,2,1,https://github.com/aieri,Amend documentation about the use of the -C -G and -W switches.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/722,https://github.com/agnosticdev,2,https://github.com/the-tcpdump-group/tcpdump/pull/722#issuecomment-451113577,"When using all three switches (-C -G and -W), the behavior can be a
little unpredictable; this commit aims to at least clarify the
situation.
Fixes #695",Any feedback on the documentation edit made in this PR?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,722,2018-12-16T13:05:30Z,2019-01-29T02:29:38Z,2019-02-04T16:37:07Z,MERGED,True,11,2,1,https://github.com/aieri,Amend documentation about the use of the -C -G and -W switches.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/722,https://github.com/agnosticdev,3,https://github.com/the-tcpdump-group/tcpdump/pull/722#issuecomment-459319160,"When using all three switches (-C -G and -W), the behavior can be a
little unpredictable; this commit aims to at least clarify the
situation.
Fixes #695","Awesome, looks like this has been merged in.  Thank you for the help on this @aieri",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,723,2018-12-23T13:35:49Z,2019-05-08T20:15:56Z,2019-05-08T20:54:11Z,MERGED,True,204,11,19,https://github.com/x-way,Add dissector for SSH version exchange,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/723,https://github.com/x-way,1,https://github.com/the-tcpdump-group/tcpdump/pull/723,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,723,2018-12-23T13:35:49Z,2019-05-08T20:15:56Z,2019-05-08T20:54:11Z,MERGED,True,204,11,19,https://github.com/x-way,Add dissector for SSH version exchange,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/723,https://github.com/mcr,2,https://github.com/the-tcpdump-group/tcpdump/pull/723#issuecomment-488885529,,Looks great. Can you rebase?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,723,2018-12-23T13:35:49Z,2019-05-08T20:15:56Z,2019-05-08T20:54:11Z,MERGED,True,204,11,19,https://github.com/x-way,Add dissector for SSH version exchange,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/723,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/723#issuecomment-489056367,,"Please, use new GET_ macros instead of EXTRACT_ ones (See 176e182 and ee68aa3).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,723,2018-12-23T13:35:49Z,2019-05-08T20:15:56Z,2019-05-08T20:54:11Z,MERGED,True,204,11,19,https://github.com/x-way,Add dissector for SSH version exchange,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/723,https://github.com/fxlb,4,https://github.com/the-tcpdump-group/tcpdump/pull/723#issuecomment-489305368,,"The new GET_ macros do the bounds checks with a setjmp/longjmp logic.
/* part of extract.h */

static inline uint8_t
get_u_1(netdissect_options *ndo, const u_char *p)
{
        if (!ND_TTEST_1(p))
                longjmp(ndo->ndo_truncated, 1);
        return EXTRACT_U_1(p);
}

[...]

#define GET_U_1(p) get_u_1(ndo, (const u_char *)(p))

Thus you can remove the ND_TCHECK_1 macros.",True,{'THUMBS_UP': ['https://github.com/x-way']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,723,2018-12-23T13:35:49Z,2019-05-08T20:15:56Z,2019-05-08T20:54:11Z,MERGED,True,204,11,19,https://github.com/x-way,Add dissector for SSH version exchange,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/723,https://github.com/fxlb,5,https://github.com/the-tcpdump-group/tcpdump/pull/723#issuecomment-489316234,,"For a better git history, I suggest you to squash all the commit in one with git rebase -i HEAD~8 (fixup (f) keyword for the last 7 commits)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,723,2018-12-23T13:35:49Z,2019-05-08T20:15:56Z,2019-05-08T20:54:11Z,MERGED,True,204,11,19,https://github.com/x-way,Add dissector for SSH version exchange,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/723,https://github.com/fxlb,6,https://github.com/the-tcpdump-group/tcpdump/pull/723#issuecomment-490634569,,Merged. Thank you.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,727,2019-01-16T22:56:16Z,2019-06-07T23:21:00Z,2019-06-07T23:21:00Z,CLOSED,False,53,11,1,https://github.com/Mister-X-,Fix and update reason codes based on 802.11-2016,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/727,https://github.com/Mister-X-,1,https://github.com/the-tcpdump-group/tcpdump/pull/727,"There is an issue with numbering too, as you can see in the first commit, 2aaa600, and tcpdump doesn't display the right one if above 18.
802.11-2016 can be obtained on https://ieee.org","There is an issue with numbering too, as you can see in the first commit, 2aaa600, and tcpdump doesn't display the right one if above 18.
802.11-2016 can be obtained on https://ieee.org",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,727,2019-01-16T22:56:16Z,2019-06-07T23:21:00Z,2019-06-07T23:21:00Z,CLOSED,False,53,11,1,https://github.com/Mister-X-,Fix and update reason codes based on 802.11-2016,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/727,https://github.com/mcr,2,https://github.com/the-tcpdump-group/tcpdump/pull/727#issuecomment-488885289,"There is an issue with numbering too, as you can see in the first commit, 2aaa600, and tcpdump doesn't display the right one if above 18.
802.11-2016 can be obtained on https://ieee.org","Hi, while I do 6tisch stuff, I don't know much about the reason codes. So whichever language you think is useful.  You may also want to talk to @kivinen .
Can you include some pcap files?  Ideally a packet with each reason code... I realize that might be rather difficult to do, but anything would help with future regression testing of this code.
And please rebase, I anticipate pulling your code in by end of June.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,727,2019-01-16T22:56:16Z,2019-06-07T23:21:00Z,2019-06-07T23:21:00Z,CLOSED,False,53,11,1,https://github.com/Mister-X-,Fix and update reason codes based on 802.11-2016,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/727,https://github.com/Mister-X-,3,https://github.com/the-tcpdump-group/tcpdump/pull/727#issuecomment-489363664,"There is an issue with numbering too, as you can see in the first commit, 2aaa600, and tcpdump doesn't display the right one if above 18.
802.11-2016 can be obtained on https://ieee.org","How about I close this PR, recreate one with updated and fixed reason codes with the exact same wording as in 802.11-2016?
Creating PCAPs is easy. It's basically knowing how one file is done (starting with reason code 0), then increment one byte until it reaches 255. I'll create a small C program to generate all possible PCAPs.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,727,2019-01-16T22:56:16Z,2019-06-07T23:21:00Z,2019-06-07T23:21:00Z,CLOSED,False,53,11,1,https://github.com/Mister-X-,Fix and update reason codes based on 802.11-2016,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/727,https://github.com/fxlb,4,https://github.com/the-tcpdump-group/tcpdump/pull/727#issuecomment-489409685,"There is an issue with numbering too, as you can see in the first commit, 2aaa600, and tcpdump doesn't display the right one if above 18.
802.11-2016 can be obtained on https://ieee.org",Difficult to have an avis without access at 802.11-2016. It seems this doc is behind a paywall.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,727,2019-01-16T22:56:16Z,2019-06-07T23:21:00Z,2019-06-07T23:21:00Z,CLOSED,False,53,11,1,https://github.com/Mister-X-,Fix and update reason codes based on 802.11-2016,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/727,https://github.com/Mister-X-,5,https://github.com/the-tcpdump-group/tcpdump/pull/727#issuecomment-489453068,"There is an issue with numbering too, as you can see in the first commit, 2aaa600, and tcpdump doesn't display the right one if above 18.
802.11-2016 can be obtained on https://ieee.org","There is screenshot attached to a conversation here: #727 (comment)
Feel free to ask @agnosticdev and I'm sure he can make a more complete screenshot for you.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,727,2019-01-16T22:56:16Z,2019-06-07T23:21:00Z,2019-06-07T23:21:00Z,CLOSED,False,53,11,1,https://github.com/Mister-X-,Fix and update reason codes based on 802.11-2016,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/727,https://github.com/kivinen,6,https://github.com/the-tcpdump-group/tcpdump/pull/727#issuecomment-490069256,"There is an issue with numbering too, as you can see in the first commit, 2aaa600, and tcpdump doesn't display the right one if above 18.
802.11-2016 can be obtained on https://ieee.org","IEEE has get ieee [1] program that allows access (click on IEEE Xplore's GET Programpage) to the 802 specifications (click GET 802(R) Standards) free of charge, which does include 802.11-2016 [3] also. To download the document you need to create account and then you should be able to download the document.
[1] https://standards.ieee.org/products-services/ieee-get-program.html
[2] https://ieeexplore.ieee.org/browse/standards/get-program/page/series?id=68
[3] https://ieeexplore.ieee.org/document/7786995",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,727,2019-01-16T22:56:16Z,2019-06-07T23:21:00Z,2019-06-07T23:21:00Z,CLOSED,False,53,11,1,https://github.com/Mister-X-,Fix and update reason codes based on 802.11-2016,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/727,https://github.com/fxlb,7,https://github.com/the-tcpdump-group/tcpdump/pull/727#issuecomment-491489056,"There is an issue with numbering too, as you can see in the first commit, 2aaa600, and tcpdump doesn't display the right one if above 18.
802.11-2016 can be obtained on https://ieee.org","IEEE has get ieee [1] program

Thanks, I will have a look.",True,{'THUMBS_UP': ['https://github.com/mcr']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,728,2019-01-17T22:35:04Z,2019-01-29T00:11:14Z,2019-01-30T04:30:21Z,MERGED,True,326,16,12,https://github.com/ffainelli,Add support for dissecting Broadcom tags,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/728,https://github.com/ffainelli,1,https://github.com/the-tcpdump-group/tcpdump/pull/728,"This pull request adds support for decoding the 4byte Broadcom tag format used by a wide variety of Broadcom Ethernet switches. These tags are present in Ethernet frames between the MAC SA and the EtherType of the original frame, and therefore, we have a bit of guess work to find out whether they are there or not.
There is possibly a better way to do this, via the use of specific DLT/linktype values. I would still like to get feedback on the approach being taken here.","This pull request adds support for decoding the 4byte Broadcom tag format used by a wide variety of Broadcom Ethernet switches. These tags are present in Ethernet frames between the MAC SA and the EtherType of the original frame, and therefore, we have a bit of guess work to find out whether they are there or not.
There is possibly a better way to do this, via the use of specific DLT/linktype values. I would still like to get feedback on the approach being taken here.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,728,2019-01-17T22:35:04Z,2019-01-29T00:11:14Z,2019-01-30T04:30:21Z,MERGED,True,326,16,12,https://github.com/ffainelli,Add support for dissecting Broadcom tags,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/728,https://github.com/mcr,2,https://github.com/the-tcpdump-group/tcpdump/pull/728#issuecomment-455557450,"This pull request adds support for decoding the 4byte Broadcom tag format used by a wide variety of Broadcom Ethernet switches. These tags are present in Ethernet frames between the MAC SA and the EtherType of the original frame, and therefore, we have a bit of guess work to find out whether they are there or not.
There is possibly a better way to do this, via the use of specific DLT/linktype values. I would still like to get feedback on the approach being taken here.",In what circumstances would a capture see these tags?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,728,2019-01-17T22:35:04Z,2019-01-29T00:11:14Z,2019-01-30T04:30:21Z,MERGED,True,326,16,12,https://github.com/ffainelli,Add support for dissecting Broadcom tags,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/728,https://github.com/ffainelli,3,https://github.com/the-tcpdump-group/tcpdump/pull/728#issuecomment-456173077,"This pull request adds support for decoding the 4byte Broadcom tag format used by a wide variety of Broadcom Ethernet switches. These tags are present in Ethernet frames between the MAC SA and the EtherType of the original frame, and therefore, we have a bit of guess work to find out whether they are there or not.
There is possibly a better way to do this, via the use of specific DLT/linktype values. I would still like to get feedback on the approach being taken here.","In what circumstances would a capture see these tags?

See the discussion on tcpdump-workers@lists.tcpdump.org for specific details:
https://lists.sandelman.ca/pipermail/tcpdump-workers/2019-January/001169.html
In a nutshell, you would be able to see those tags if you run a capture on the management interface that connects to the Ethernet switch, which is typically just another regular port of the switch, just with added functionality to tell you why you are seeing this packet to begin with.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,728,2019-01-17T22:35:04Z,2019-01-29T00:11:14Z,2019-01-30T04:30:21Z,MERGED,True,326,16,12,https://github.com/ffainelli,Add support for dissecting Broadcom tags,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/728,https://github.com/ffainelli,4,https://github.com/the-tcpdump-group/tcpdump/pull/728#issuecomment-456183418,"This pull request adds support for decoding the 4byte Broadcom tag format used by a wide variety of Broadcom Ethernet switches. These tags are present in Ethernet frames between the MAC SA and the EtherType of the original frame, and therefore, we have a bit of guess work to find out whether they are there or not.
There is possibly a better way to do this, via the use of specific DLT/linktype values. I would still like to get feedback on the approach being taken here.",@mcr @guyharris can you review these two commits and let me know if the approach is acceptable with respect to allowing to specify the Ethernet header length. Thank you,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,728,2019-01-17T22:35:04Z,2019-01-29T00:11:14Z,2019-01-30T04:30:21Z,MERGED,True,326,16,12,https://github.com/ffainelli,Add support for dissecting Broadcom tags,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/728,https://github.com/ffainelli,5,https://github.com/the-tcpdump-group/tcpdump/pull/728#issuecomment-456225374,"This pull request adds support for decoding the 4byte Broadcom tag format used by a wide variety of Broadcom Ethernet switches. These tags are present in Ethernet frames between the MAC SA and the EtherType of the original frame, and therefore, we have a bit of guess work to find out whether they are there or not.
There is possibly a better way to do this, via the use of specific DLT/linktype values. I would still like to get feedback on the approach being taken here.",This is dependent on the-tcpdump-group/libpcap#796,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,728,2019-01-17T22:35:04Z,2019-01-29T00:11:14Z,2019-01-30T04:30:21Z,MERGED,True,326,16,12,https://github.com/ffainelli,Add support for dissecting Broadcom tags,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/728,https://github.com/ffainelli,6,https://github.com/the-tcpdump-group/tcpdump/pull/728#issuecomment-456615891,"This pull request adds support for decoding the 4byte Broadcom tag format used by a wide variety of Broadcom Ethernet switches. These tags are present in Ethernet frames between the MAC SA and the EtherType of the original frame, and therefore, we have a bit of guess work to find out whether they are there or not.
There is possibly a better way to do this, via the use of specific DLT/linktype values. I would still like to get feedback on the approach being taken here.",Forced push an update which also takes care of dissection pre-pended (DSA_TAG_BRCM_PREPEND). We can use the print_encap_header() callback for that.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,728,2019-01-17T22:35:04Z,2019-01-29T00:11:14Z,2019-01-30T04:30:21Z,MERGED,True,326,16,12,https://github.com/ffainelli,Add support for dissecting Broadcom tags,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/728,https://github.com/ffainelli,7,https://github.com/the-tcpdump-group/tcpdump/pull/728#issuecomment-457242490,"This pull request adds support for decoding the 4byte Broadcom tag format used by a wide variety of Broadcom Ethernet switches. These tags are present in Ethernet frames between the MAC SA and the EtherType of the original frame, and therefore, we have a bit of guess work to find out whether they are there or not.
There is possibly a better way to do this, via the use of specific DLT/linktype values. I would still like to get feedback on the approach being taken here.","I need to make a couple of changes:

there is one hunk in netdissect.h that belongs in patch 2
the comment about print_ether_hdr_len() is not quite correct and refers to an earlier implementation where an offset was specified",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,728,2019-01-17T22:35:04Z,2019-01-29T00:11:14Z,2019-01-30T04:30:21Z,MERGED,True,326,16,12,https://github.com/ffainelli,Add support for dissecting Broadcom tags,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/728,https://github.com/ffainelli,8,https://github.com/the-tcpdump-group/tcpdump/pull/728#issuecomment-457785547,"This pull request adds support for decoding the 4byte Broadcom tag format used by a wide variety of Broadcom Ethernet switches. These tags are present in Ethernet frames between the MAC SA and the EtherType of the original frame, and therefore, we have a bit of guess work to find out whether they are there or not.
There is possibly a better way to do this, via the use of specific DLT/linktype values. I would still like to get feedback on the approach being taken here.","Now pushed an update which addresses the two things mentioned earlier as well as adds tests for Broadcom tags, ""normal"" and prepended.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,728,2019-01-17T22:35:04Z,2019-01-29T00:11:14Z,2019-01-30T04:30:21Z,MERGED,True,326,16,12,https://github.com/ffainelli,Add support for dissecting Broadcom tags,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/728,https://github.com/guyharris,9,https://github.com/the-tcpdump-group/tcpdump/pull/728#issuecomment-457863106,"This pull request adds support for decoding the 4byte Broadcom tag format used by a wide variety of Broadcom Ethernet switches. These tags are present in Ethernet frames between the MAC SA and the EtherType of the original frame, and therefore, we have a bit of guess work to find out whether they are there or not.
There is possibly a better way to do this, via the use of specific DLT/linktype values. I would still like to get feedback on the approach being taken here.","You have to add the new file to the NETDISSECT_SOURCE_LIST_C variable in CMakeLists.txt, too.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,728,2019-01-17T22:35:04Z,2019-01-29T00:11:14Z,2019-01-30T04:30:21Z,MERGED,True,326,16,12,https://github.com/ffainelli,Add support for dissecting Broadcom tags,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/728,https://github.com/guyharris,10,https://github.com/the-tcpdump-group/tcpdump/pull/728#issuecomment-458256391,"This pull request adds support for decoding the 4byte Broadcom tag format used by a wide variety of Broadcom Ethernet switches. These tags are present in Ethernet frames between the MAC SA and the EtherType of the original frame, and therefore, we have a bit of guess work to find out whether they are there or not.
There is possibly a better way to do this, via the use of specific DLT/linktype values. I would still like to get feedback on the approach being taken here.","You have to add the new file to the NETDISSECT_SOURCE_LIST_C variable in CMakeLists.txt, too.

Or put the dissectors for Ethernet+switch tag into print-ether.c.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,728,2019-01-17T22:35:04Z,2019-01-29T00:11:14Z,2019-01-30T04:30:21Z,MERGED,True,326,16,12,https://github.com/ffainelli,Add support for dissecting Broadcom tags,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/728,https://github.com/ffainelli,11,https://github.com/the-tcpdump-group/tcpdump/pull/728#issuecomment-458264694,"This pull request adds support for decoding the 4byte Broadcom tag format used by a wide variety of Broadcom Ethernet switches. These tags are present in Ethernet frames between the MAC SA and the EtherType of the original frame, and therefore, we have a bit of guess work to find out whether they are there or not.
There is possibly a better way to do this, via the use of specific DLT/linktype values. I would still like to get feedback on the approach being taken here.","You have to add the new file to the NETDISSECT_SOURCE_LIST_C variable in CMakeLists.txt, too.

Or put the dissectors for Ethernet+switch tag into print-ether.c.

Having a separate file allows for people to easily strip some functionality out if they desire a tiny tcpdump, see for instance OpenWrt's tcpdump-tiny package (which should probably be reworked to have a list of dissectors you can specify at ./configure time):
https://github.com/openwrt/openwrt/blob/master/package/network/utils/tcpdump/patches/100-tcpdump_mini.patch",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,728,2019-01-17T22:35:04Z,2019-01-29T00:11:14Z,2019-01-30T04:30:21Z,MERGED,True,326,16,12,https://github.com/ffainelli,Add support for dissecting Broadcom tags,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/728,https://github.com/guyharris,12,https://github.com/the-tcpdump-group/tcpdump/pull/728#issuecomment-458279930,"This pull request adds support for decoding the 4byte Broadcom tag format used by a wide variety of Broadcom Ethernet switches. These tags are present in Ethernet frames between the MAC SA and the EtherType of the original frame, and therefore, we have a bit of guess work to find out whether they are there or not.
There is possibly a better way to do this, via the use of specific DLT/linktype values. I would still like to get feedback on the approach being taken here.","Having a separate file allows for people to easily strip some functionality out if they desire a tiny tcpdump

Then you'll have to fix the CMakeLists.txt file for this to pass the tests (and thus you'll have to fix that file for this to be merged).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,728,2019-01-17T22:35:04Z,2019-01-29T00:11:14Z,2019-01-30T04:30:21Z,MERGED,True,326,16,12,https://github.com/ffainelli,Add support for dissecting Broadcom tags,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/728,https://github.com/ffainelli,13,https://github.com/the-tcpdump-group/tcpdump/pull/728#issuecomment-458280571,"This pull request adds support for decoding the 4byte Broadcom tag format used by a wide variety of Broadcom Ethernet switches. These tags are present in Ethernet frames between the MAC SA and the EtherType of the original frame, and therefore, we have a bit of guess work to find out whether they are there or not.
There is possibly a better way to do this, via the use of specific DLT/linktype values. I would still like to get feedback on the approach being taken here.","Having a separate file allows for people to easily strip some functionality out if they desire a tiny tcpdump

Then you'll have to fix the CMakeLists.txt file for this to pass the tests (and thus you'll have to fix that file for this to be merged).

Forced push an update with that. AppVeyor appears happy so far.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,728,2019-01-17T22:35:04Z,2019-01-29T00:11:14Z,2019-01-30T04:30:21Z,MERGED,True,326,16,12,https://github.com/ffainelli,Add support for dissecting Broadcom tags,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/728,https://github.com/ffainelli,14,https://github.com/the-tcpdump-group/tcpdump/pull/728#issuecomment-458807966,"This pull request adds support for decoding the 4byte Broadcom tag format used by a wide variety of Broadcom Ethernet switches. These tags are present in Ethernet frames between the MAC SA and the EtherType of the original frame, and therefore, we have a bit of guess work to find out whether they are there or not.
There is possibly a better way to do this, via the use of specific DLT/linktype values. I would still like to get feedback on the approach being taken here.",Thanks!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,729,2019-01-22T11:53:38Z,2019-01-23T07:26:30Z,2019-01-23T11:21:08Z,MERGED,True,1,1,1,https://github.com/agnosticdev,Update print-lldp.c with a small typo fix.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/729,https://github.com/agnosticdev,1,https://github.com/the-tcpdump-group/tcpdump/pull/729,Small typo fix for EVB Station in Link Layer Discovery Protocol (LLDP) printer - print-lldp.c,Small typo fix for EVB Station in Link Layer Discovery Protocol (LLDP) printer - print-lldp.c,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,729,2019-01-22T11:53:38Z,2019-01-23T07:26:30Z,2019-01-23T11:21:08Z,MERGED,True,1,1,1,https://github.com/agnosticdev,Update print-lldp.c with a small typo fix.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/729,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/729#issuecomment-456698116,Small typo fix for EVB Station in Link Layer Discovery Protocol (LLDP) printer - print-lldp.c,Thank you.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,729,2019-01-22T11:53:38Z,2019-01-23T07:26:30Z,2019-01-23T11:21:08Z,MERGED,True,1,1,1,https://github.com/agnosticdev,Update print-lldp.c with a small typo fix.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/729,https://github.com/agnosticdev,3,https://github.com/the-tcpdump-group/tcpdump/pull/729#issuecomment-456765750,Small typo fix for EVB Station in Link Layer Discovery Protocol (LLDP) printer - print-lldp.c,No problem.  Thank you!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,730,2019-01-23T16:36:37Z,2019-01-23T21:23:05Z,2019-01-24T00:25:36Z,MERGED,True,18,18,12,https://github.com/MisterDA,Fix small misspellings,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/730,https://github.com/MisterDA,1,https://github.com/the-tcpdump-group/tcpdump/pull/730,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,730,2019-01-23T16:36:37Z,2019-01-23T21:23:05Z,2019-01-24T00:25:36Z,MERGED,True,18,18,12,https://github.com/MisterDA,Fix small misspellings,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/730,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/730#issuecomment-456972226,,Thank you.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,732,2019-02-09T08:14:10Z,2019-04-13T12:06:57Z,2019-04-13T12:08:36Z,MERGED,True,17,0,5,https://github.com/lark,"Add support for decoding DNS URI RR (typecode 256, RFC7553)",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/732,https://github.com/lark,1,https://github.com/the-tcpdump-group/tcpdump/pull/732,"A trivial patch to add support for URI RR. I do some simple test and it seems to be ok, but I may use helper incorrectly.","A trivial patch to add support for URI RR. I do some simple test and it seems to be ok, but I may use helper incorrectly.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,732,2019-02-09T08:14:10Z,2019-04-13T12:06:57Z,2019-04-13T12:08:36Z,MERGED,True,17,0,5,https://github.com/lark,"Add support for decoding DNS URI RR (typecode 256, RFC7553)",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/732,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/732#issuecomment-465767916,"A trivial patch to add support for URI RR. I do some simple test and it seems to be ok, but I may use helper incorrectly.",Could you add a test for the new code based on a .pcap file?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,732,2019-02-09T08:14:10Z,2019-04-13T12:06:57Z,2019-04-13T12:08:36Z,MERGED,True,17,0,5,https://github.com/lark,"Add support for decoding DNS URI RR (typecode 256, RFC7553)",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/732,https://github.com/lark,3,https://github.com/the-tcpdump-group/tcpdump/pull/732#issuecomment-466258895,"A trivial patch to add support for URI RR. I do some simple test and it seems to be ok, but I may use helper incorrectly.","Done. The pcap file is generated against an unbound server with local-data.
local-data: ""_http.dns.test. 10800 IN URI 10 5 http://www.dns.test:8000""

Could you add a test for the new code based on a .pcap file?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,732,2019-02-09T08:14:10Z,2019-04-13T12:06:57Z,2019-04-13T12:08:36Z,MERGED,True,17,0,5,https://github.com/lark,"Add support for decoding DNS URI RR (typecode 256, RFC7553)",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/732,https://github.com/lark,4,https://github.com/the-tcpdump-group/tcpdump/pull/732#issuecomment-471008995,"A trivial patch to add support for URI RR. I do some simple test and it seems to be ok, but I may use helper incorrectly.",@infrastation ping,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,732,2019-02-09T08:14:10Z,2019-04-13T12:06:57Z,2019-04-13T12:08:36Z,MERGED,True,17,0,5,https://github.com/lark,"Add support for decoding DNS URI RR (typecode 256, RFC7553)",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/732,https://github.com/infrastation,5,https://github.com/the-tcpdump-group/tcpdump/pull/732#issuecomment-471340675,"A trivial patch to add support for URI RR. I do some simple test and it seems to be ok, but I may use helper incorrectly.","Thank you for adding the test, I have made a very quick look at the new code and it needs to be checked again for out-of-bounds access, so please have the patience.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,732,2019-02-09T08:14:10Z,2019-04-13T12:06:57Z,2019-04-13T12:08:36Z,MERGED,True,17,0,5,https://github.com/lark,"Add support for decoding DNS URI RR (typecode 256, RFC7553)",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/732,https://github.com/fxlb,6,https://github.com/the-tcpdump-group/tcpdump/pull/732#issuecomment-482785958,"A trivial patch to add support for URI RR. I do some simple test and it seems to be ok, but I may use helper incorrectly.",Do you have rebased your lark:urirr branch on master ?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,732,2019-02-09T08:14:10Z,2019-04-13T12:06:57Z,2019-04-13T12:08:36Z,MERGED,True,17,0,5,https://github.com/lark,"Add support for decoding DNS URI RR (typecode 256, RFC7553)",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/732,https://github.com/lark,7,https://github.com/the-tcpdump-group/tcpdump/pull/732#issuecomment-482786509,"A trivial patch to add support for URI RR. I do some simple test and it seems to be ok, but I may use helper incorrectly.","Do you have rebased (git rebase) your lark:urirr branch on the-tcpdump-group:master ?

Yes, I have rebased lark:urirr on origin master.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,732,2019-02-09T08:14:10Z,2019-04-13T12:06:57Z,2019-04-13T12:08:36Z,MERGED,True,17,0,5,https://github.com/lark,"Add support for decoding DNS URI RR (typecode 256, RFC7553)",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/732,https://github.com/fxlb,8,https://github.com/the-tcpdump-group/tcpdump/pull/732#issuecomment-482786923,"A trivial patch to add support for URI RR. I do some simple test and it seems to be ok, but I may use helper incorrectly.","Yes, I have rebased lark:urirr on origin master.

Since your last rebase the commit dc36fbc was added. A new rebase is needed on the-tcpdump-group:master.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,732,2019-02-09T08:14:10Z,2019-04-13T12:06:57Z,2019-04-13T12:08:36Z,MERGED,True,17,0,5,https://github.com/lark,"Add support for decoding DNS URI RR (typecode 256, RFC7553)",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/732,https://github.com/lark,9,https://github.com/the-tcpdump-group/tcpdump/pull/732#issuecomment-482787954,"A trivial patch to add support for URI RR. I do some simple test and it seems to be ok, but I may use helper incorrectly.","Do you have rebased your lark:urirr branch on master ?

Yes, I have rebased lark:urirr on origin master.

Oops, I know the reason. I did git pull & git reset & git clean & git rebase to resolve last conflict, but a new commit went in upstream a.t.t., so git rebase origin master doesn't pick up the latest commit.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,732,2019-02-09T08:14:10Z,2019-04-13T12:06:57Z,2019-04-13T12:08:36Z,MERGED,True,17,0,5,https://github.com/lark,"Add support for decoding DNS URI RR (typecode 256, RFC7553)",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/732,https://github.com/fxlb,10,https://github.com/the-tcpdump-group/tcpdump/pull/732#issuecomment-482803672,"A trivial patch to add support for URI RR. I do some simple test and it seems to be ok, but I may use helper incorrectly.","Merged, Thank you.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,733,2019-02-12T22:59:02Z,2019-03-23T14:32:00Z,2019-03-23T15:11:12Z,MERGED,True,71,2,6,https://github.com/marka63,Extract extend DNS rcode from OPT record.,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/733,https://github.com/marka63,1,https://github.com/the-tcpdump-group/tcpdump/pull/733,"Extend DNS printing
This extracts the extended rcode bits from the OPT record's TTL field and combines it with rcode to display the actual rcode.  This adds rcodes BADVERS (16) and BADCOOKIE (23) to the set of known rcodes.
BADCOOKIE is defined in RFC 6891.   BadCookie is currently being mis-reported as YXRRset (23 - 16).
And a actual DNS COOKIE exchange where BADCOOKIE was returned and the client retries with the new server cookie.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 262144 bytes
10:33:16.245522 IP (tos 0x0, ttl 64, id 26511, offset 0, flags [none], proto UDP (17), length 68, bad cksum 0 (->1518)!)
127.0.0.1.53324 > 127.0.0.1.53: 37225+ [1au] SOA? . (40)
10:33:16.245803 IP (tos 0x0, ttl 64, id 40438, offset 0, flags [none], proto UDP (17), length 84, bad cksum 0 (->dea0)!)
127.0.0.1.53 > 127.0.0.1.53324: 37225 BadCookie 0/0/1 (56)
10:33:16.246129 IP (tos 0x0, ttl 64, id 34739, offset 0, flags [none], proto UDP (17), length 84, bad cksum 0 (->f4e3)!)
127.0.0.1.51706 > 127.0.0.1.53: 18053+ [1au] SOA? . (56)
10:33:16.246387 IP (tos 0x0, ttl 64, id 27521, offset 0, flags [none], proto UDP (17), length 159, bad cksum 0 (->10cb)!)
127.0.0.1.53 > 127.0.0.1.51706: 18053$ 1/0/1 . SOA a.root-servers.net. nstld.verisign-grs.com. 2019021202 1800 900 604800 86400 (131)","Extend DNS printing
This extracts the extended rcode bits from the OPT record's TTL field and combines it with rcode to display the actual rcode.  This adds rcodes BADVERS (16) and BADCOOKIE (23) to the set of known rcodes.
BADCOOKIE is defined in RFC 6891.   BadCookie is currently being mis-reported as YXRRset (23 - 16).
And a actual DNS COOKIE exchange where BADCOOKIE was returned and the client retries with the new server cookie.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 262144 bytes
10:33:16.245522 IP (tos 0x0, ttl 64, id 26511, offset 0, flags [none], proto UDP (17), length 68, bad cksum 0 (->1518)!)
127.0.0.1.53324 > 127.0.0.1.53: 37225+ [1au] SOA? . (40)
10:33:16.245803 IP (tos 0x0, ttl 64, id 40438, offset 0, flags [none], proto UDP (17), length 84, bad cksum 0 (->dea0)!)
127.0.0.1.53 > 127.0.0.1.53324: 37225 BadCookie 0/0/1 (56)
10:33:16.246129 IP (tos 0x0, ttl 64, id 34739, offset 0, flags [none], proto UDP (17), length 84, bad cksum 0 (->f4e3)!)
127.0.0.1.51706 > 127.0.0.1.53: 18053+ [1au] SOA? . (56)
10:33:16.246387 IP (tos 0x0, ttl 64, id 27521, offset 0, flags [none], proto UDP (17), length 159, bad cksum 0 (->10cb)!)
127.0.0.1.53 > 127.0.0.1.51706: 18053$ 1/0/1 . SOA a.root-servers.net. nstld.verisign-grs.com. 2019021202 1800 900 604800 86400 (131)",True,{'THUMBS_UP': ['https://github.com/mcr']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,733,2019-02-12T22:59:02Z,2019-03-23T14:32:00Z,2019-03-23T15:11:12Z,MERGED,True,71,2,6,https://github.com/marka63,Extract extend DNS rcode from OPT record.,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/733,https://github.com/fenner,2,https://github.com/the-tcpdump-group/tcpdump/pull/733#issuecomment-475597946,"Extend DNS printing
This extracts the extended rcode bits from the OPT record's TTL field and combines it with rcode to display the actual rcode.  This adds rcodes BADVERS (16) and BADCOOKIE (23) to the set of known rcodes.
BADCOOKIE is defined in RFC 6891.   BadCookie is currently being mis-reported as YXRRset (23 - 16).
And a actual DNS COOKIE exchange where BADCOOKIE was returned and the client retries with the new server cookie.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 262144 bytes
10:33:16.245522 IP (tos 0x0, ttl 64, id 26511, offset 0, flags [none], proto UDP (17), length 68, bad cksum 0 (->1518)!)
127.0.0.1.53324 > 127.0.0.1.53: 37225+ [1au] SOA? . (40)
10:33:16.245803 IP (tos 0x0, ttl 64, id 40438, offset 0, flags [none], proto UDP (17), length 84, bad cksum 0 (->dea0)!)
127.0.0.1.53 > 127.0.0.1.53324: 37225 BadCookie 0/0/1 (56)
10:33:16.246129 IP (tos 0x0, ttl 64, id 34739, offset 0, flags [none], proto UDP (17), length 84, bad cksum 0 (->f4e3)!)
127.0.0.1.51706 > 127.0.0.1.53: 18053+ [1au] SOA? . (56)
10:33:16.246387 IP (tos 0x0, ttl 64, id 27521, offset 0, flags [none], proto UDP (17), length 159, bad cksum 0 (->10cb)!)
127.0.0.1.53 > 127.0.0.1.51706: 18053$ 1/0/1 . SOA a.root-servers.net. nstld.verisign-grs.com. 2019021202 1800 900 604800 86400 (131)",Is there a way to see that the rcode might be wrong because we hit the snaplen while trying to parse for the OPT record?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,733,2019-02-12T22:59:02Z,2019-03-23T14:32:00Z,2019-03-23T15:11:12Z,MERGED,True,71,2,6,https://github.com/marka63,Extract extend DNS rcode from OPT record.,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/733,https://github.com/marka63,3,https://github.com/the-tcpdump-group/tcpdump/pull/733#issuecomment-475863816,"Extend DNS printing
This extracts the extended rcode bits from the OPT record's TTL field and combines it with rcode to display the actual rcode.  This adds rcodes BADVERS (16) and BADCOOKIE (23) to the set of known rcodes.
BADCOOKIE is defined in RFC 6891.   BadCookie is currently being mis-reported as YXRRset (23 - 16).
And a actual DNS COOKIE exchange where BADCOOKIE was returned and the client retries with the new server cookie.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 262144 bytes
10:33:16.245522 IP (tos 0x0, ttl 64, id 26511, offset 0, flags [none], proto UDP (17), length 68, bad cksum 0 (->1518)!)
127.0.0.1.53324 > 127.0.0.1.53: 37225+ [1au] SOA? . (40)
10:33:16.245803 IP (tos 0x0, ttl 64, id 40438, offset 0, flags [none], proto UDP (17), length 84, bad cksum 0 (->dea0)!)
127.0.0.1.53 > 127.0.0.1.53324: 37225 BadCookie 0/0/1 (56)
10:33:16.246129 IP (tos 0x0, ttl 64, id 34739, offset 0, flags [none], proto UDP (17), length 84, bad cksum 0 (->f4e3)!)
127.0.0.1.51706 > 127.0.0.1.53: 18053+ [1au] SOA? . (56)
10:33:16.246387 IP (tos 0x0, ttl 64, id 27521, offset 0, flags [none], proto UDP (17), length 159, bad cksum 0 (->10cb)!)
127.0.0.1.53 > 127.0.0.1.51706: 18053$ 1/0/1 . SOA a.root-servers.net. nstld.verisign-grs.com. 2019021202 1800 900 604800 86400 (131)",There is nothing in the header that indicates that a OPT record is present.  You only know that there isn't a OPT record once the additional section is parsed.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,734,2019-02-15T20:52:30Z,2019-02-28T17:58:26Z,2019-02-28T17:58:26Z,MERGED,True,35,0,4,https://github.com/jkcko,Support DLT_IEEE802_15_4_TAP.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/734,https://github.com/jkcko,1,https://github.com/the-tcpdump-group/tcpdump/pull/734,"New link type for IEEE 802.15.4 with additional meta-data.
See https://bugs.wireshark.org/bugzilla/show_bug.cgi?id=15429 for full specification.
No actual parsing of meta-data TLVs are performed.  The header and TLVs are skipped and the PHY payload is passed to the common IEEE 802.15.4 print function.","New link type for IEEE 802.15.4 with additional meta-data.
See https://bugs.wireshark.org/bugzilla/show_bug.cgi?id=15429 for full specification.
No actual parsing of meta-data TLVs are performed.  The header and TLVs are skipped and the PHY payload is passed to the common IEEE 802.15.4 print function.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,734,2019-02-15T20:52:30Z,2019-02-28T17:58:26Z,2019-02-28T17:58:26Z,MERGED,True,35,0,4,https://github.com/jkcko,Support DLT_IEEE802_15_4_TAP.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/734,https://github.com/jkcko,2,https://github.com/the-tcpdump-group/tcpdump/pull/734#issuecomment-465687909,"New link type for IEEE 802.15.4 with additional meta-data.
See https://bugs.wireshark.org/bugzilla/show_bug.cgi?id=15429 for full specification.
No actual parsing of meta-data TLVs are performed.  The header and TLVs are skipped and the PHY payload is passed to the common IEEE 802.15.4 print function.","Commit updated.
Added sanity checks and default error printing to ieee802_15_4_tap_if_print parsing.
Add reference to specification on github.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,736,2019-03-03T21:32:19Z,2019-04-17T01:58:25Z,2019-04-17T01:58:26Z,CLOSED,False,531,44,7,https://github.com/lunn,print-medsa: Generalize to also print MDSA,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/736,https://github.com/lunn,1,https://github.com/the-tcpdump-group/tcpdump/pull/736,"Marvell SOHO Ethernet switches use two different tag formats.
EDSA uses an Ethertype, so can be identified from that. DSA lacks
the Ethertype, other information is needed to know it is present.
PCAP can now mark such frames, so generalize the EDSA printer to
also print DSA tagged frames.
Signed-off-by: Andrew Lunn andrew@lunn.ch","Marvell SOHO Ethernet switches use two different tag formats.
EDSA uses an Ethertype, so can be identified from that. DSA lacks
the Ethertype, other information is needed to know it is present.
PCAP can now mark such frames, so generalize the EDSA printer to
also print DSA tagged frames.
Signed-off-by: Andrew Lunn andrew@lunn.ch",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,736,2019-03-03T21:32:19Z,2019-04-17T01:58:25Z,2019-04-17T01:58:26Z,CLOSED,False,531,44,7,https://github.com/lunn,print-medsa: Generalize to also print MDSA,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/736,https://github.com/lunn,2,https://github.com/the-tcpdump-group/tcpdump/pull/736#issuecomment-469452952,"Marvell SOHO Ethernet switches use two different tag formats.
EDSA uses an Ethertype, so can be identified from that. DSA lacks
the Ethertype, other information is needed to know it is present.
PCAP can now mark such frames, so generalize the EDSA printer to
also print DSA tagged frames.
Signed-off-by: Andrew Lunn andrew@lunn.ch","Fixed up the unneeded ;
I assume the tests are failing because the libpcap it is using to build against does not yet have the DSA changes.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,736,2019-03-03T21:32:19Z,2019-04-17T01:58:25Z,2019-04-17T01:58:26Z,CLOSED,False,531,44,7,https://github.com/lunn,print-medsa: Generalize to also print MDSA,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/736,https://github.com/lunn,3,https://github.com/the-tcpdump-group/tcpdump/pull/736#issuecomment-483907618,"Marvell SOHO Ethernet switches use two different tag formats.
EDSA uses an Ethertype, so can be identified from that. DSA lacks
the Ethertype, other information is needed to know it is present.
PCAP can now mark such frames, so generalize the EDSA printer to
also print DSA tagged frames.
Signed-off-by: Andrew Lunn andrew@lunn.ch",The commit of Vivien code has made this redundant So closing.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,739,2019-03-16T11:40:05Z,2019-04-30T14:41:03Z,2019-04-30T14:41:03Z,CLOSED,False,2,0,1,https://github.com/loganaden,icmpv6: Add option for IPv6 only flag ,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/739,https://github.com/loganaden,1,https://github.com/the-tcpdump-group/tcpdump/pull/739,"https://www.ietf.org/id/draft-ietf-6man-ipv6only-flag-05.txt which is close to becoming
an IETF RFC: https://www.ietf.org/id/draft-ietf-6man-ipv6only-flag-05.txt.","https://www.ietf.org/id/draft-ietf-6man-ipv6only-flag-05.txt which is close to becoming
an IETF RFC: https://www.ietf.org/id/draft-ietf-6man-ipv6only-flag-05.txt.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,739,2019-03-16T11:40:05Z,2019-04-30T14:41:03Z,2019-04-30T14:41:03Z,CLOSED,False,2,0,1,https://github.com/loganaden,icmpv6: Add option for IPv6 only flag ,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/739,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/739#issuecomment-473545516,"https://www.ietf.org/id/draft-ietf-6man-ipv6only-flag-05.txt which is close to becoming
an IETF RFC: https://www.ietf.org/id/draft-ietf-6man-ipv6only-flag-05.txt.",Rebased and merged with an updated git message. Thank you.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,739,2019-03-16T11:40:05Z,2019-04-30T14:41:03Z,2019-04-30T14:41:03Z,CLOSED,False,2,0,1,https://github.com/loganaden,icmpv6: Add option for IPv6 only flag ,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/739,https://github.com/mcr,3,https://github.com/the-tcpdump-group/tcpdump/pull/739#issuecomment-473592770,"https://www.ietf.org/id/draft-ietf-6man-ipv6only-flag-05.txt which is close to becoming
an IETF RFC: https://www.ietf.org/id/draft-ietf-6man-ipv6only-flag-05.txt.",Would have been nice to have a sample (RA) packet to go with this.,True,{'THUMBS_UP': ['https://github.com/fxlb']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,743,2019-04-02T17:45:17Z,2019-04-03T18:17:31Z,2019-04-03T18:17:31Z,MERGED,True,32,9,2,https://github.com/rnsanchez,Add shortcuts for setting time stamp precision,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/743,https://github.com/rnsanchez,1,https://github.com/the-tcpdump-group/tcpdump/pull/743,"Rationale: when you need to quickly start collecting packets into a savefile and you happen to need a different time stamp precision as the default, it is easy to confuse whether the proper option it is --time-stamp-precision, --timestamp-precision, or what.  These shortcuts do not change tcpdump's behavior, they are equivalent to using the --time-stamp-precision option.
In order to present the shortcuts in print_usage(), it felt adequate to reshuffle the strings and group the ones related to time stamping (i.e., --time-stamp-precision and the included shortcuts).","Rationale: when you need to quickly start collecting packets into a savefile and you happen to need a different time stamp precision as the default, it is easy to confuse whether the proper option it is --time-stamp-precision, --timestamp-precision, or what.  These shortcuts do not change tcpdump's behavior, they are equivalent to using the --time-stamp-precision option.
In order to present the shortcuts in print_usage(), it felt adequate to reshuffle the strings and group the ones related to time stamping (i.e., --time-stamp-precision and the included shortcuts).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,744,2019-04-06T23:04:23Z,2019-04-16T18:33:25Z,2019-04-16T18:33:26Z,MERGED,True,292,248,19,https://github.com/vivien,Add DLT support for decoding (E)DSA tags,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/744,https://github.com/vivien,1,https://github.com/the-tcpdump-group/tcpdump/pull/744,"Following @ffainelli's work on adding DLT support for parsing DSA tagged master interfaces, this PR adds support for decoding the Marvell DSA and Marvell EDSA tags.","Following @ffainelli's work on adding DLT support for parsing DSA tagged master interfaces, this PR adds support for decoding the Marvell DSA and Marvell EDSA tags.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,745,2019-04-11T20:31:33Z,2019-04-11T21:05:03Z,2019-04-11T21:20:49Z,CLOSED,False,748,0,4,https://github.com/fenner,"Add 4-byte ASN tests, both with -b and without",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/745,https://github.com/fenner,1,https://github.com/the-tcpdump-group/tcpdump/pull/745,"I did some coverage analysis on print-bgp.c, and noticed that ""-b"" is not exercised at all, nor is the ""open"" message printer.  These are some packets captured from a 4-byte ASN test.","I did some coverage analysis on print-bgp.c, and noticed that ""-b"" is not exercised at all, nor is the ""open"" message printer.  These are some packets captured from a 4-byte ASN test.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,745,2019-04-11T20:31:33Z,2019-04-11T21:05:03Z,2019-04-11T21:20:49Z,CLOSED,False,748,0,4,https://github.com/fenner,"Add 4-byte ASN tests, both with -b and without",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/745,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/745#issuecomment-482313635,"I did some coverage analysis on print-bgp.c, and noticed that ""-b"" is not exercised at all, nor is the ""open"" message printer.  These are some packets captured from a 4-byte ASN test.","Rebased, merged (commit 550907c), thank you.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,747,2019-04-11T23:52:08Z,2019-04-12T17:56:56Z,2019-04-12T18:00:45Z,MERGED,True,67,34,5,https://github.com/fenner,Print Protocol ID correctly in Application Priority Table,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/747,https://github.com/fenner,1,https://github.com/the-tcpdump-group/tcpdump/pull/747,"Closes #511
It turns out that the report already had the hex dump of the payload, so to create a pcap example just took adding the pcap+ethernet wrapper.","Closes #511
It turns out that the report already had the hex dump of the payload, so to create a pcap example just took adding the pcap+ethernet wrapper.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,747,2019-04-11T23:52:08Z,2019-04-12T17:56:56Z,2019-04-12T18:00:45Z,MERGED,True,67,34,5,https://github.com/fenner,Print Protocol ID correctly in Application Priority Table,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/747,https://github.com/fenner,2,https://github.com/the-tcpdump-group/tcpdump/pull/747#issuecomment-482537924,"Closes #511
It turns out that the report already had the hex dump of the payload, so to create a pcap example just took adding the pcap+ethernet wrapper.",I overlooked updating one of the existing tests that relied on the wrong behavior; I've updated and squashed the commits and testing is running again.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,747,2019-04-11T23:52:08Z,2019-04-12T17:56:56Z,2019-04-12T18:00:45Z,MERGED,True,67,34,5,https://github.com/fenner,Print Protocol ID correctly in Application Priority Table,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/747,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/747#issuecomment-482667757,"Closes #511
It turns out that the report already had the hex dump of the payload, so to create a pcap example just took adding the pcap+ethernet wrapper.","Merged, Thank you.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,748,2019-04-14T21:38:22Z,,2019-09-27T00:29:39Z,OPEN,False,882,0,17,https://github.com/fenner,Add oss-fuzz support (not yet enabled),6,"['improvement', 'fuzz-testing']",https://github.com/the-tcpdump-group/tcpdump/pull/748,https://github.com/fenner,1,https://github.com/the-tcpdump-group/tcpdump/pull/748,"This builds on the work done by @catenacyber in #700. I started an independent effort to add oss-fuzz support, then discovered #700, and this is the combination of both efforts.
My version calls into printers directly - I've implemented the plumbing for ether, ip, ip6 and bgp.  This allows targeted testing: ""I wrote some code for a new bgp printer, let's fuzz it"".  It creates the corpus (example good packets for the fuzzing infrastructure to learn from) by parsing test/*.pcap using Scapy.
The other version uses pcap files, so can end up in any part of the system.  It's good for ""what can happen in the universe"" but is harder to target.
Adding this plumbing to the tcpdump package is one half of what's needed; the other half is to enable clusterfuzz by submitting to the oss-fuzz repository.  Merging this pull request can be done independently, so that fuzzing on the clusterfuzz infrastructure can be enabled when desirable.
I've tried to document some of how it works at https://github.com/fenner/tcpdump/blob/fuzz/fuzz/README.md .
Closes #700.","This builds on the work done by @catenacyber in #700. I started an independent effort to add oss-fuzz support, then discovered #700, and this is the combination of both efforts.
My version calls into printers directly - I've implemented the plumbing for ether, ip, ip6 and bgp.  This allows targeted testing: ""I wrote some code for a new bgp printer, let's fuzz it"".  It creates the corpus (example good packets for the fuzzing infrastructure to learn from) by parsing test/*.pcap using Scapy.
The other version uses pcap files, so can end up in any part of the system.  It's good for ""what can happen in the universe"" but is harder to target.
Adding this plumbing to the tcpdump package is one half of what's needed; the other half is to enable clusterfuzz by submitting to the oss-fuzz repository.  Merging this pull request can be done independently, so that fuzzing on the clusterfuzz infrastructure can be enabled when desirable.
I've tried to document some of how it works at https://github.com/fenner/tcpdump/blob/fuzz/fuzz/README.md .
Closes #700.",True,{'THUMBS_UP': ['https://github.com/catenacyber']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,748,2019-04-14T21:38:22Z,,2019-09-27T00:29:39Z,OPEN,False,882,0,17,https://github.com/fenner,Add oss-fuzz support (not yet enabled),6,"['improvement', 'fuzz-testing']",https://github.com/the-tcpdump-group/tcpdump/pull/748,https://github.com/catenacyber,2,https://github.com/the-tcpdump-group/tcpdump/pull/748#issuecomment-483724702,"This builds on the work done by @catenacyber in #700. I started an independent effort to add oss-fuzz support, then discovered #700, and this is the combination of both efforts.
My version calls into printers directly - I've implemented the plumbing for ether, ip, ip6 and bgp.  This allows targeted testing: ""I wrote some code for a new bgp printer, let's fuzz it"".  It creates the corpus (example good packets for the fuzzing infrastructure to learn from) by parsing test/*.pcap using Scapy.
The other version uses pcap files, so can end up in any part of the system.  It's good for ""what can happen in the universe"" but is harder to target.
Adding this plumbing to the tcpdump package is one half of what's needed; the other half is to enable clusterfuzz by submitting to the oss-fuzz repository.  Merging this pull request can be done independently, so that fuzzing on the clusterfuzz infrastructure can be enabled when desirable.
I've tried to document some of how it works at https://github.com/fenner/tcpdump/blob/fuzz/fuzz/README.md .
Closes #700.",I hope that we can integrate this soon,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,748,2019-04-14T21:38:22Z,,2019-09-27T00:29:39Z,OPEN,False,882,0,17,https://github.com/fenner,Add oss-fuzz support (not yet enabled),6,"['improvement', 'fuzz-testing']",https://github.com/the-tcpdump-group/tcpdump/pull/748,https://github.com/fenner,3,https://github.com/the-tcpdump-group/tcpdump/pull/748#issuecomment-487284144,"This builds on the work done by @catenacyber in #700. I started an independent effort to add oss-fuzz support, then discovered #700, and this is the combination of both efforts.
My version calls into printers directly - I've implemented the plumbing for ether, ip, ip6 and bgp.  This allows targeted testing: ""I wrote some code for a new bgp printer, let's fuzz it"".  It creates the corpus (example good packets for the fuzzing infrastructure to learn from) by parsing test/*.pcap using Scapy.
The other version uses pcap files, so can end up in any part of the system.  It's good for ""what can happen in the universe"" but is harder to target.
Adding this plumbing to the tcpdump package is one half of what's needed; the other half is to enable clusterfuzz by submitting to the oss-fuzz repository.  Merging this pull request can be done independently, so that fuzzing on the clusterfuzz infrastructure can be enabled when desirable.
I've tried to document some of how it works at https://github.com/fenner/tcpdump/blob/fuzz/fuzz/README.md .
Closes #700.",I rebased to get past the travis failure that was present in master.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,749,2019-04-17T13:10:39Z,,2020-05-28T23:58:30Z,OPEN,False,82,82,1,https://github.com/Sashan,"tcpdump should open file, where captured packets are going to be writ…",1,"['improvement', 'reviewed_needswork', 'priviledge-issue']",https://github.com/the-tcpdump-group/tcpdump/pull/749,https://github.com/Sashan,1,https://github.com/the-tcpdump-group/tcpdump/pull/749,"…ten to,
before it switches to user nobody.
patch has been submitted to upstream:
#637","…ten to,
before it switches to user nobody.
patch has been submitted to upstream:
#637",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,749,2019-04-17T13:10:39Z,,2020-05-28T23:58:30Z,OPEN,False,82,82,1,https://github.com/Sashan,"tcpdump should open file, where captured packets are going to be writ…",1,"['improvement', 'reviewed_needswork', 'priviledge-issue']",https://github.com/the-tcpdump-group/tcpdump/pull/749,https://github.com/mcr,2,https://github.com/the-tcpdump-group/tcpdump/pull/749#issuecomment-487978671,"…ten to,
before it switches to user nobody.
patch has been submitted to upstream:
#637","The problem with this is that tcpdump opens files again with -C switches, and so really mechanisms were tcpdump has any privilege are broken.   Your patch is welcome, but we need to decide how to do privilege separation correctly: tcpdump has perhaps three or four levels of trust.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,749,2019-04-17T13:10:39Z,,2020-05-28T23:58:30Z,OPEN,False,82,82,1,https://github.com/Sashan,"tcpdump should open file, where captured packets are going to be writ…",1,"['improvement', 'reviewed_needswork', 'priviledge-issue']",https://github.com/the-tcpdump-group/tcpdump/pull/749,https://github.com/Sashan,3,https://github.com/the-tcpdump-group/tcpdump/pull/749#issuecomment-488035690,"…ten to,
before it switches to user nobody.
patch has been submitted to upstream:
#637","The problem with this is that tcpdump opens files again with -C switches, and so really mechanisms were tcpdump has any privilege are broken. Your patch is welcome, but we need to decide how to do privilege separation correctly: tcpdump has perhaps three or four levels of trust.

I see. To be honest I have not looked at that deeply enough. I've just crafted the patch, which addresses the most common scenario for Solaris, which is mentioned in #637. I'll try to re-work my patch.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,750,2019-04-17T13:13:54Z,2019-04-17T17:21:15Z,2019-04-17T17:21:15Z,MERGED,True,3,1,1,https://github.com/Sashan,allow unit tests to specify an alternate tcpdump binary,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/750,https://github.com/Sashan,1,https://github.com/the-tcpdump-group/tcpdump/pull/750,"solaris userland gate requires this change. will make our
life bit easier if upstream will kindly accept this change.","solaris userland gate requires this change. will make our
life bit easier if upstream will kindly accept this change.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,751,2019-04-17T13:14:41Z,2019-04-18T01:46:11Z,2019-04-18T14:21:19Z,MERGED,True,135,0,6,https://github.com/Sashan,InfiniBand support for tcpdump.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/751,https://github.com/Sashan,1,https://github.com/the-tcpdump-group/tcpdump/pull/751,"InfiniBand support for tcpdump.
This is an in-house patch. Sent upstream for potential inclusion in future
versions of tcpdump.","InfiniBand support for tcpdump.
This is an in-house patch. Sent upstream for potential inclusion in future
versions of tcpdump.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,751,2019-04-17T13:14:41Z,2019-04-18T01:46:11Z,2019-04-18T14:21:19Z,MERGED,True,135,0,6,https://github.com/Sashan,InfiniBand support for tcpdump.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/751,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/751#issuecomment-484424190,"InfiniBand support for tcpdump.
This is an in-house patch. Sent upstream for potential inclusion in future
versions of tcpdump.","@Sashan
Please, could you add a test file for this protocol (see CONTRIBUTING - 6) ?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,751,2019-04-17T13:14:41Z,2019-04-18T01:46:11Z,2019-04-18T14:21:19Z,MERGED,True,135,0,6,https://github.com/Sashan,InfiniBand support for tcpdump.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/751,https://github.com/Sashan,3,https://github.com/the-tcpdump-group/tcpdump/pull/751#issuecomment-484531467,"InfiniBand support for tcpdump.
This is an in-house patch. Sent upstream for potential inclusion in future
versions of tcpdump.","@fxlb Thanks for pointing me to CONTRIBUTING-6. I'll open a new pull request
next week (after Easter) as I don't have an access to InfiniBand box at the moment, but will reserve it to get some .pcap files. Thanks for patience.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,752,2019-04-17T13:40:42Z,,2020-07-05T15:27:46Z,OPEN,False,34,19,1,https://github.com/Sashan,fprintf(3) should not be used by signal handlers,1,"['bug', 'improvement']",https://github.com/the-tcpdump-group/tcpdump/pull/752,https://github.com/Sashan,1,https://github.com/the-tcpdump-group/tcpdump/pull/752,"On most OS platforms fprintf() et.al. are considered to be signal unsafe. I've
noticed the signal handlers in tcpdump call fprintf(). The patch below defers
call to fprintf() triggered by signal to pcap_loop callback.
Submitted to upstream:
#638","On most OS platforms fprintf() et.al. are considered to be signal unsafe. I've
noticed the signal handlers in tcpdump call fprintf(). The patch below defers
call to fprintf() triggered by signal to pcap_loop callback.
Submitted to upstream:
#638",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,753,2019-04-18T20:21:19Z,2019-05-08T20:21:33Z,2019-06-19T20:32:58Z,MERGED,True,255,362,1,https://github.com/fenner,Factor BGP NLRI printing into a reusable function,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/753,https://github.com/fenner,1,https://github.com/the-tcpdump-group/tcpdump/pull/753,"The implementations of MP_REACH_NLRI and MP_UNREACH_NLRI attributes had duplicate implementations for each supported AFI/SAFI, and were out of sync (SAFNUM_RT_ROUTING_INFO had no handling for UNREACH).
The fact of having two implementations for each AFI/SAFI makes it easy to forget one when working on the other, as evidenced by my discovery of a locally-implemented printer that had only MP_REACH but not MP_UNREACH code.  Having a common implementation will eliminate this problem for people adding new AFI/SAFI support (and, of course, when fixing bugs in the existing implementation)
Coverage of the new code against existing tests is https://github.com/fenner/tcpdump/wiki/bgp_print_nlri-code-coverage-with-existing-tests .","The implementations of MP_REACH_NLRI and MP_UNREACH_NLRI attributes had duplicate implementations for each supported AFI/SAFI, and were out of sync (SAFNUM_RT_ROUTING_INFO had no handling for UNREACH).
The fact of having two implementations for each AFI/SAFI makes it easy to forget one when working on the other, as evidenced by my discovery of a locally-implemented printer that had only MP_REACH but not MP_UNREACH code.  Having a common implementation will eliminate this problem for people adding new AFI/SAFI support (and, of course, when fixing bugs in the existing implementation)
Coverage of the new code against existing tests is https://github.com/fenner/tcpdump/wiki/bgp_print_nlri-code-coverage-with-existing-tests .",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,753,2019-04-18T20:21:19Z,2019-05-08T20:21:33Z,2019-06-19T20:32:58Z,MERGED,True,255,362,1,https://github.com/fenner,Factor BGP NLRI printing into a reusable function,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/753,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/753#issuecomment-489107438,"The implementations of MP_REACH_NLRI and MP_UNREACH_NLRI attributes had duplicate implementations for each supported AFI/SAFI, and were out of sync (SAFNUM_RT_ROUTING_INFO had no handling for UNREACH).
The fact of having two implementations for each AFI/SAFI makes it easy to forget one when working on the other, as evidenced by my discovery of a locally-implemented printer that had only MP_REACH but not MP_UNREACH code.  Having a common implementation will eliminate this problem for people adding new AFI/SAFI support (and, of course, when fixing bugs in the existing implementation)
Coverage of the new code against existing tests is https://github.com/fenner/tcpdump/wiki/bgp_print_nlri-code-coverage-with-existing-tests .","There is a warning:
./print-bgp.c: In function ‘bgp_attr_print’:
./print-bgp.c:1785:11: warning: unused variable ‘path_id’ [-Wunused-variable]
     u_int path_id = 0;
           ^

See: https://travis-ci.org/the-tcpdump-group/tcpdump/jobs/521900320
Please fix and rebase.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,753,2019-04-18T20:21:19Z,2019-05-08T20:21:33Z,2019-06-19T20:32:58Z,MERGED,True,255,362,1,https://github.com/fenner,Factor BGP NLRI printing into a reusable function,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/753,https://github.com/fenner,3,https://github.com/the-tcpdump-group/tcpdump/pull/753#issuecomment-489430660,"The implementations of MP_REACH_NLRI and MP_UNREACH_NLRI attributes had duplicate implementations for each supported AFI/SAFI, and were out of sync (SAFNUM_RT_ROUTING_INFO had no handling for UNREACH).
The fact of having two implementations for each AFI/SAFI makes it easy to forget one when working on the other, as evidenced by my discovery of a locally-implemented printer that had only MP_REACH but not MP_UNREACH code.  Having a common implementation will eliminate this problem for people adding new AFI/SAFI support (and, of course, when fixing bugs in the existing implementation)
Coverage of the new code against existing tests is https://github.com/fenner/tcpdump/wiki/bgp_print_nlri-code-coverage-with-existing-tests .",Sorry about that. May I recommend making Travis use -Werror to help make problems like this more obvious?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,753,2019-04-18T20:21:19Z,2019-05-08T20:21:33Z,2019-06-19T20:32:58Z,MERGED,True,255,362,1,https://github.com/fenner,Factor BGP NLRI printing into a reusable function,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/753,https://github.com/fenner,4,https://github.com/the-tcpdump-group/tcpdump/pull/753#issuecomment-489438808,"The implementations of MP_REACH_NLRI and MP_UNREACH_NLRI attributes had duplicate implementations for each supported AFI/SAFI, and were out of sync (SAFNUM_RT_ROUTING_INFO had no handling for UNREACH).
The fact of having two implementations for each AFI/SAFI makes it easy to forget one when working on the other, as evidenced by my discovery of a locally-implemented printer that had only MP_REACH but not MP_UNREACH code.  Having a common implementation will eliminate this problem for people adding new AFI/SAFI support (and, of course, when fixing bugs in the existing implementation)
Coverage of the new code against existing tests is https://github.com/fenner/tcpdump/wiki/bgp_print_nlri-code-coverage-with-existing-tests .","I only just noticed this is 3 commits, I’ll squash and push again. The Travis build failure was a transient homebrew issue.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,753,2019-04-18T20:21:19Z,2019-05-08T20:21:33Z,2019-06-19T20:32:58Z,MERGED,True,255,362,1,https://github.com/fenner,Factor BGP NLRI printing into a reusable function,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/753,https://github.com/fxlb,5,https://github.com/the-tcpdump-group/tcpdump/pull/753#issuecomment-490636436,"The implementations of MP_REACH_NLRI and MP_UNREACH_NLRI attributes had duplicate implementations for each supported AFI/SAFI, and were out of sync (SAFNUM_RT_ROUTING_INFO had no handling for UNREACH).
The fact of having two implementations for each AFI/SAFI makes it easy to forget one when working on the other, as evidenced by my discovery of a locally-implemented printer that had only MP_REACH but not MP_UNREACH code.  Having a common implementation will eliminate this problem for people adding new AFI/SAFI support (and, of course, when fixing bugs in the existing implementation)
Coverage of the new code against existing tests is https://github.com/fenner/tcpdump/wiki/bgp_print_nlri-code-coverage-with-existing-tests .",Merged. Thank you.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,753,2019-04-18T20:21:19Z,2019-05-08T20:21:33Z,2019-06-19T20:32:58Z,MERGED,True,255,362,1,https://github.com/fenner,Factor BGP NLRI printing into a reusable function,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/753,https://github.com/fxlb,6,https://github.com/the-tcpdump-group/tcpdump/pull/753#issuecomment-500162891,"The implementations of MP_REACH_NLRI and MP_UNREACH_NLRI attributes had duplicate implementations for each supported AFI/SAFI, and were out of sync (SAFNUM_RT_ROUTING_INFO had no handling for UNREACH).
The fact of having two implementations for each AFI/SAFI makes it easy to forget one when working on the other, as evidenced by my discovery of a locally-implemented printer that had only MP_REACH but not MP_UNREACH code.  Having a common implementation will eliminate this problem for people adding new AFI/SAFI support (and, of course, when fixing bugs in the existing implementation)
Coverage of the new code against existing tests is https://github.com/fenner/tcpdump/wiki/bgp_print_nlri-code-coverage-with-existing-tests .","May I recommend making Travis use -Werror to help make problems like this more obvious?

Done with 06a4f18.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,753,2019-04-18T20:21:19Z,2019-05-08T20:21:33Z,2019-06-19T20:32:58Z,MERGED,True,255,362,1,https://github.com/fenner,Factor BGP NLRI printing into a reusable function,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/753,https://github.com/fenner,7,https://github.com/the-tcpdump-group/tcpdump/pull/753#issuecomment-503735624,"The implementations of MP_REACH_NLRI and MP_UNREACH_NLRI attributes had duplicate implementations for each supported AFI/SAFI, and were out of sync (SAFNUM_RT_ROUTING_INFO had no handling for UNREACH).
The fact of having two implementations for each AFI/SAFI makes it easy to forget one when working on the other, as evidenced by my discovery of a locally-implemented printer that had only MP_REACH but not MP_UNREACH code.  Having a common implementation will eliminate this problem for people adding new AFI/SAFI support (and, of course, when fixing bugs in the existing implementation)
Coverage of the new code against existing tests is https://github.com/fenner/tcpdump/wiki/bgp_print_nlri-code-coverage-with-existing-tests .","May I recommend making Travis use -Werror to help make problems like this more obvious?

Done with 06a4f18.

Thanks!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,754,2019-04-18T22:20:22Z,2019-04-23T09:53:10Z,2019-04-23T14:20:39Z,CLOSED,False,32,0,3,https://github.com/Sashan,adding tests for ipoib (IP over Infiniband),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/754,https://github.com/Sashan,1,https://github.com/the-tcpdump-group/tcpdump/pull/754,"empty-pcap                         : passed
    empty-pcapng                       : passed
    dns-badcookie                      : passed
    dns-badvers                        : passed
    lldp-app-priority                  : passed
    dns-uri                            : passed
    vsock-1                            : TEST FAILED(exit 256)
    ipoib                              : passed","empty-pcap                         : passed
    empty-pcapng                       : passed
    dns-badcookie                      : passed
    dns-badvers                        : passed
    lldp-app-priority                  : passed
    dns-uri                            : passed
    vsock-1                            : TEST FAILED(exit 256)
    ipoib                              : passed",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,754,2019-04-18T22:20:22Z,2019-04-23T09:53:10Z,2019-04-23T14:20:39Z,CLOSED,False,32,0,3,https://github.com/Sashan,adding tests for ipoib (IP over Infiniband),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/754,https://github.com/Sashan,2,https://github.com/the-tcpdump-group/tcpdump/pull/754#issuecomment-484708957,"empty-pcap                         : passed
    empty-pcapng                       : passed
    dns-badcookie                      : passed
    dns-badvers                        : passed
    lldp-app-priority                  : passed
    dns-uri                            : passed
    vsock-1                            : TEST FAILED(exit 256)
    ipoib                              : passed",this adds test case for stuff in PR #751,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,754,2019-04-18T22:20:22Z,2019-04-23T09:53:10Z,2019-04-23T14:20:39Z,CLOSED,False,32,0,3,https://github.com/Sashan,adding tests for ipoib (IP over Infiniband),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/754,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/754#issuecomment-484787982,"empty-pcap                         : passed
    empty-pcapng                       : passed
    dns-badcookie                      : passed
    dns-badvers                        : passed
    lldp-app-priority                  : passed
    dns-uri                            : passed
    vsock-1                            : TEST FAILED(exit 256)
    ipoib                              : passed","In you commit message:
> vsock-1                            : TEST FAILED(exit 256)

What libpcap version are you using ?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,754,2019-04-18T22:20:22Z,2019-04-23T09:53:10Z,2019-04-23T14:20:39Z,CLOSED,False,32,0,3,https://github.com/Sashan,adding tests for ipoib (IP over Infiniband),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/754,https://github.com/fxlb,4,https://github.com/the-tcpdump-group/tcpdump/pull/754#issuecomment-484793709,"empty-pcap                         : passed
    empty-pcapng                       : passed
    dns-badcookie                      : passed
    dns-badvers                        : passed
    lldp-app-priority                  : passed
    dns-uri                            : passed
    vsock-1                            : TEST FAILED(exit 256)
    ipoib                              : passed",Author field too long in your commit. Please only Name <email>.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,754,2019-04-18T22:20:22Z,2019-04-23T09:53:10Z,2019-04-23T14:20:39Z,CLOSED,False,32,0,3,https://github.com/Sashan,adding tests for ipoib (IP over Infiniband),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/754,https://github.com/Sashan,5,https://github.com/the-tcpdump-group/tcpdump/pull/754#issuecomment-485584079,"empty-pcap                         : passed
    empty-pcapng                       : passed
    dns-badcookie                      : passed
    dns-badvers                        : passed
    lldp-app-priority                  : passed
    dns-uri                            : passed
    vsock-1                            : TEST FAILED(exit 256)
    ipoib                              : passed","In you commit message:
> vsock-1                            : TEST FAILED(exit 256)

What libpcap version are you using ?

libpcap 1.8.1",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,754,2019-04-18T22:20:22Z,2019-04-23T09:53:10Z,2019-04-23T14:20:39Z,CLOSED,False,32,0,3,https://github.com/Sashan,adding tests for ipoib (IP over Infiniband),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/754,https://github.com/fxlb,6,https://github.com/the-tcpdump-group/tcpdump/pull/754#issuecomment-485735144,"empty-pcap                         : passed
    empty-pcapng                       : passed
    dns-badcookie                      : passed
    dns-badvers                        : passed
    lldp-app-priority                  : passed
    dns-uri                            : passed
    vsock-1                            : TEST FAILED(exit 256)
    ipoib                              : passed","libpcap 1.8.1

For other dev, I suggest you to use libpcap HEAD of the-tcpdump-group:master to avoid 'TEST FAILED' message(s).
Rebased, commit message updated, merged, thank you.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,755,2019-04-19T04:32:05Z,2019-05-03T09:46:15Z,2019-05-04T02:39:11Z,MERGED,True,24,26,4,https://github.com/x-way,Fix duplicate IP protocol printing,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/755,https://github.com/x-way,1,https://github.com/the-tcpdump-group/tcpdump/pull/755,"The IP protocol is already displayed in ip_print.
For IPv4-in-IPv6 the duplicate protocol printing was added during the restructuring of commit 202051b
Output with the duplicate print (which is confusing as the duplicate protocol print appears 'out-of-context'):

IP6 2402:f000:1:8e01::5555 > 2607:fcd0:10:2300::b108:2a6b: IP 172.16.44.3.40768 > 8.8.8.8.53: 42540+ AAAA? xqt-detect-mode2-97712e88-167a-45b9-93ee-913140e76678. (71) (ipip-proto-4)

Fixed output without the duplicate print (eg. the way it also was before commit 202051b):

IP6 2402:f000:1:8e01::5555 > 2607:fcd0:10:2300::b108:2a6b: IP 172.16.44.3.40768 > 8.8.8.8.53: 42540+ AAAA? xqt-detect-mode2-97712e88-167a-45b9-93ee-913140e76678. (71)","The IP protocol is already displayed in ip_print.
For IPv4-in-IPv6 the duplicate protocol printing was added during the restructuring of commit 202051b
Output with the duplicate print (which is confusing as the duplicate protocol print appears 'out-of-context'):

IP6 2402:f000:1:8e01::5555 > 2607:fcd0:10:2300::b108:2a6b: IP 172.16.44.3.40768 > 8.8.8.8.53: 42540+ AAAA? xqt-detect-mode2-97712e88-167a-45b9-93ee-913140e76678. (71) (ipip-proto-4)

Fixed output without the duplicate print (eg. the way it also was before commit 202051b):

IP6 2402:f000:1:8e01::5555 > 2607:fcd0:10:2300::b108:2a6b: IP 172.16.44.3.40768 > 8.8.8.8.53: 42540+ AAAA? xqt-detect-mode2-97712e88-167a-45b9-93ee-913140e76678. (71)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,755,2019-04-19T04:32:05Z,2019-05-03T09:46:15Z,2019-05-04T02:39:11Z,MERGED,True,24,26,4,https://github.com/x-way,Fix duplicate IP protocol printing,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/755,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/755#issuecomment-485666844,"The IP protocol is already displayed in ip_print.
For IPv4-in-IPv6 the duplicate protocol printing was added during the restructuring of commit 202051b
Output with the duplicate print (which is confusing as the duplicate protocol print appears 'out-of-context'):

IP6 2402:f000:1:8e01::5555 > 2607:fcd0:10:2300::b108:2a6b: IP 172.16.44.3.40768 > 8.8.8.8.53: 42540+ AAAA? xqt-detect-mode2-97712e88-167a-45b9-93ee-913140e76678. (71) (ipip-proto-4)

Fixed output without the duplicate print (eg. the way it also was before commit 202051b):

IP6 2402:f000:1:8e01::5555 > 2607:fcd0:10:2300::b108:2a6b: IP 172.16.44.3.40768 > 8.8.8.8.53: 42540+ AAAA? xqt-detect-mode2-97712e88-167a-45b9-93ee-913140e76678. (71)",You need to run make check and update the .out files in the tests directory.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,755,2019-04-19T04:32:05Z,2019-05-03T09:46:15Z,2019-05-04T02:39:11Z,MERGED,True,24,26,4,https://github.com/x-way,Fix duplicate IP protocol printing,1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/755,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/755#issuecomment-489036601,"The IP protocol is already displayed in ip_print.
For IPv4-in-IPv6 the duplicate protocol printing was added during the restructuring of commit 202051b
Output with the duplicate print (which is confusing as the duplicate protocol print appears 'out-of-context'):

IP6 2402:f000:1:8e01::5555 > 2607:fcd0:10:2300::b108:2a6b: IP 172.16.44.3.40768 > 8.8.8.8.53: 42540+ AAAA? xqt-detect-mode2-97712e88-167a-45b9-93ee-913140e76678. (71) (ipip-proto-4)

Fixed output without the duplicate print (eg. the way it also was before commit 202051b):

IP6 2402:f000:1:8e01::5555 > 2607:fcd0:10:2300::b108:2a6b: IP 172.16.44.3.40768 > 8.8.8.8.53: 42540+ AAAA? xqt-detect-mode2-97712e88-167a-45b9-93ee-913140e76678. (71)","Merged, Thank you.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,757,2019-04-26T20:14:44Z,2019-04-26T22:13:12Z,2019-04-26T22:13:12Z,MERGED,True,433,3,10,https://github.com/fenner,Add BFD multihop and lag decoding,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/757,https://github.com/fenner,1,https://github.com/the-tcpdump-group/tcpdump/pull/757,"Put back the bfd_port_values, and use it to distinguish between destination ports for RFC5883 multihop and RFC7310 lag sessions.  (The destination port is the only difference between these messages.)","Put back the bfd_port_values, and use it to distinguish between destination ports for RFC5883 multihop and RFC7310 lag sessions.  (The destination port is the only difference between these messages.)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,759,2019-04-30T14:30:14Z,2019-04-30T17:00:11Z,2020-12-01T14:34:29Z,MERGED,True,1,1,1,https://github.com/fenner,"Fix typo that increases, instead of decreases, caplen",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/759,https://github.com/fenner,1,https://github.com/the-tcpdump-group/tcpdump/pull/759,The refactoring in b258556 introduced this minor error.,The refactoring in b258556 introduced this minor error.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,760,2019-05-03T00:10:57Z,2019-05-03T00:53:53Z,2019-05-03T00:53:53Z,MERGED,True,1,1,1,https://github.com/leres,fix shell variable typo and unbreak --without-sandbox-capsicum,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/760,https://github.com/leres,1,https://github.com/the-tcpdump-group/tcpdump/pull/760,with_sandbox-capsicum -> with_sandbox_capsicum,with_sandbox-capsicum -> with_sandbox_capsicum,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,761,2019-05-03T01:37:44Z,2019-05-03T02:23:23Z,2019-05-03T02:23:23Z,MERGED,True,1,1,1,https://github.com/leres,"Sorry, I forgot to run autoconf and update configure",2,[],https://github.com/the-tcpdump-group/tcpdump/pull/761,https://github.com/leres,1,https://github.com/the-tcpdump-group/tcpdump/pull/761,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,762,2019-05-03T16:18:22Z,2020-04-10T13:59:14Z,2020-04-10T13:59:15Z,CLOSED,False,94,0,7,https://github.com/cdeccio,Print EDNS options,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/762,https://github.com/cdeccio,1,https://github.com/the-tcpdump-group/tcpdump/pull/762,This allows the EDNS options to be displayed with -vv.,This allows the EDNS options to be displayed with -vv.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,762,2019-05-03T16:18:22Z,2020-04-10T13:59:14Z,2020-04-10T13:59:15Z,CLOSED,False,94,0,7,https://github.com/cdeccio,Print EDNS options,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/762,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/762#issuecomment-500744703,This allows the EDNS options to be displayed with -vv.,A rebase on master is needed.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,762,2019-05-03T16:18:22Z,2020-04-10T13:59:14Z,2020-04-10T13:59:15Z,CLOSED,False,94,0,7,https://github.com/cdeccio,Print EDNS options,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/762,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/762#issuecomment-546080341,This allows the EDNS options to be displayed with -vv.,"""This branch cannot be rebased due to conflicts""
A rebase is needed.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,762,2019-05-03T16:18:22Z,2020-04-10T13:59:14Z,2020-04-10T13:59:15Z,CLOSED,False,94,0,7,https://github.com/cdeccio,Print EDNS options,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/762,https://github.com/fxlb,4,https://github.com/the-tcpdump-group/tcpdump/pull/762#issuecomment-612040423,This allows the EDNS options to be displayed with -vv.,"Rebased, merged with 27bf32e.
Updated by code in #808.
Thank you !",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,764,2019-05-09T13:03:07Z,2019-05-09T20:16:54Z,2019-05-09T20:17:14Z,MERGED,True,7,0,4,https://github.com/adventureloop,Add support for incomplete header chain param prob message,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/764,https://github.com/adventureloop,1,https://github.com/the-tcpdump-group/tcpdump/pull/764,"Add support for incomplete header chain paramater problem message as
defined in Section 6 of RFC7112.","Add support for incomplete header chain paramater problem message as
defined in Section 6 of RFC7112.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,764,2019-05-09T13:03:07Z,2019-05-09T20:16:54Z,2019-05-09T20:17:14Z,MERGED,True,7,0,4,https://github.com/adventureloop,Add support for incomplete header chain param prob message,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/764,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/764#issuecomment-490906059,"Add support for incomplete header chain paramater problem message as
defined in Section 6 of RFC7112.",Could you add a capture test in the tests/ directory (see CONTRIBUTING file) ?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,764,2019-05-09T13:03:07Z,2019-05-09T20:16:54Z,2019-05-09T20:17:14Z,MERGED,True,7,0,4,https://github.com/adventureloop,Add support for incomplete header chain param prob message,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/764,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/764#issuecomment-491050260,"Add support for incomplete header chain paramater problem message as
defined in Section 6 of RFC7112.",Merged. Thank you.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,766,2019-06-08T19:27:59Z,2019-06-11T07:40:53Z,2019-06-11T07:41:11Z,MERGED,True,65,22,4,https://github.com/woodbr,PGM: POLL and POLR packets were flip-flopped,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/766,https://github.com/woodbr,1,https://github.com/the-tcpdump-group/tcpdump/pull/766,Refer to RFC 3208 (Appendix D).,Refer to RFC 3208 (Appendix D).,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,766,2019-06-08T19:27:59Z,2019-06-11T07:40:53Z,2019-06-11T07:41:11Z,MERGED,True,65,22,4,https://github.com/woodbr,PGM: POLL and POLR packets were flip-flopped,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/766,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/766#issuecomment-500323238,Refer to RFC 3208 (Appendix D).,Could you add a capture with POLL/POLR in the tests directory ? (see CONTRIBUTING),True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,766,2019-06-08T19:27:59Z,2019-06-11T07:40:53Z,2019-06-11T07:41:11Z,MERGED,True,65,22,4,https://github.com/woodbr,PGM: POLL and POLR packets were flip-flopped,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/766,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/766#issuecomment-500725598,Refer to RFC 3208 (Appendix D).,"Merged, thank you!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,768,2019-06-11T16:51:16Z,2020-05-24T08:14:31Z,2020-05-24T08:14:31Z,CLOSED,False,1032,37,5,https://github.com/shadsaw,babel: add supports for rfc6126bis,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/768,https://github.com/shadsaw,1,https://github.com/the-tcpdump-group/tcpdump/pull/768,Update babel with rfc6126bis. See: link.,Update babel with rfc6126bis. See: link.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,768,2019-06-11T16:51:16Z,2020-05-24T08:14:31Z,2020-05-24T08:14:31Z,CLOSED,False,1032,37,5,https://github.com/shadsaw,babel: add supports for rfc6126bis,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/768,https://github.com/mcr,2,https://github.com/the-tcpdump-group/tcpdump/pull/768#issuecomment-508230365,Update babel with rfc6126bis. See: link.,"We have more macros that will come out in 5.0, on the master branch.

+        if(cp + sublen > ep) goto invalid;

You need to know if the pointer ""cp + sublen"" is in the capture buffer, right?
ND_TCHECK_LEN(cp, sublen) does exactly that.
…
--
]               Never tell me the odds!                 | ipv6 mesh networks [
]   Michael Richardson, Sandelman Software Works        |    IoT architect   [
]     mcr@sandelman.ca  http://www.sandelman.ca/        |   ruby on rails    [",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,768,2019-06-11T16:51:16Z,2020-05-24T08:14:31Z,2020-05-24T08:14:31Z,CLOSED,False,1032,37,5,https://github.com/shadsaw,babel: add supports for rfc6126bis,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/768,https://github.com/maiste,3,https://github.com/the-tcpdump-group/tcpdump/pull/768#issuecomment-508371400,Update babel with rfc6126bis. See: link.,"Sorry, I misunderstood how ND_TCHECK_LEN worked. It's corrected. Thanks for your help.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,768,2019-06-11T16:51:16Z,2020-05-24T08:14:31Z,2020-05-24T08:14:31Z,CLOSED,False,1032,37,5,https://github.com/shadsaw,babel: add supports for rfc6126bis,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/768,https://github.com/fxlb,4,https://github.com/the-tcpdump-group/tcpdump/pull/768#issuecomment-511333956,Update babel with rfc6126bis. See: link.,Many changes are about putting if or else instructions on one line instead of two and have nothing to do with  the rfc6126bis support. They should be removed to focus the PR about rfc6126bis.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,768,2019-06-11T16:51:16Z,2020-05-24T08:14:31Z,2020-05-24T08:14:31Z,CLOSED,False,1032,37,5,https://github.com/shadsaw,babel: add supports for rfc6126bis,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/768,https://github.com/maiste,5,https://github.com/the-tcpdump-group/tcpdump/pull/768#issuecomment-511373306,Update babel with rfc6126bis. See: link.,I remove the if else corrections from the PR.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,768,2019-06-11T16:51:16Z,2020-05-24T08:14:31Z,2020-05-24T08:14:31Z,CLOSED,False,1032,37,5,https://github.com/shadsaw,babel: add supports for rfc6126bis,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/768,https://github.com/guyharris,6,https://github.com/the-tcpdump-group/tcpdump/pull/768#issuecomment-633181901,Update babel with rfc6126bis. See: link.,"@fxlb, @mcr: are there any changes that still need to be made?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,768,2019-06-11T16:51:16Z,2020-05-24T08:14:31Z,2020-05-24T08:14:31Z,CLOSED,False,1032,37,5,https://github.com/shadsaw,babel: add supports for rfc6126bis,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/768,https://github.com/guyharris,7,https://github.com/the-tcpdump-group/tcpdump/pull/768#issuecomment-633183202,Update babel with rfc6126bis. See: link.,"There are some changes that need to be made, because some builds are failing the ""make check"" stage; I haven't figure out what they are yet.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,768,2019-06-11T16:51:16Z,2020-05-24T08:14:31Z,2020-05-24T08:14:31Z,CLOSED,False,1032,37,5,https://github.com/shadsaw,babel: add supports for rfc6126bis,2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/768,https://github.com/guyharris,8,https://github.com/the-tcpdump-group/tcpdump/pull/768#issuecomment-633196190,Update babel with rfc6126bis. See: link.,"A modified version of this, as per my comments, has been committed as dc5b398.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,770,2019-06-12T07:55:36Z,2019-06-12T08:05:05Z,2019-06-12T18:18:13Z,CLOSED,False,1,0,1,https://github.com/rebeccasf,CVE-2017-16808/AoE: Add a missing bounds check.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/770,https://github.com/rebeccasf,1,https://github.com/the-tcpdump-group/tcpdump/pull/770,"In aoev1_reserve_print() check bounds before trying to print an Ethernet
address.
Updated from a Denis Ovsienko's fix.
This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.
(backported from commit 46aead6)
Signed-off-by: Rebecca Chang Swee Funrebecca.swee.fun.chang@intel.com","In aoev1_reserve_print() check bounds before trying to print an Ethernet
address.
Updated from a Denis Ovsienko's fix.
This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.
(backported from commit 46aead6)
Signed-off-by: Rebecca Chang Swee Funrebecca.swee.fun.chang@intel.com",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,770,2019-06-12T07:55:36Z,2019-06-12T08:05:05Z,2019-06-12T18:18:13Z,CLOSED,False,1,0,1,https://github.com/rebeccasf,CVE-2017-16808/AoE: Add a missing bounds check.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/770,https://github.com/rebeccasf,2,https://github.com/the-tcpdump-group/tcpdump/pull/770#issuecomment-501165658,"In aoev1_reserve_print() check bounds before trying to print an Ethernet
address.
Updated from a Denis Ovsienko's fix.
This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.
(backported from commit 46aead6)
Signed-off-by: Rebecca Chang Swee Funrebecca.swee.fun.chang@intel.com",This requires more work other than a simple backport.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,770,2019-06-12T07:55:36Z,2019-06-12T08:05:05Z,2019-06-12T18:18:13Z,CLOSED,False,1,0,1,https://github.com/rebeccasf,CVE-2017-16808/AoE: Add a missing bounds check.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/770,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/770#issuecomment-501186048,"In aoev1_reserve_print() check bounds before trying to print an Ethernet
address.
Updated from a Denis Ovsienko's fix.
This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.
(backported from commit 46aead6)
Signed-off-by: Rebecca Chang Swee Funrebecca.swee.fun.chang@intel.com",Fixed by 28f6100.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,770,2019-06-12T07:55:36Z,2019-06-12T08:05:05Z,2019-06-12T18:18:13Z,CLOSED,False,1,0,1,https://github.com/rebeccasf,CVE-2017-16808/AoE: Add a missing bounds check.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/770,https://github.com/kloczek,4,https://github.com/the-tcpdump-group/tcpdump/pull/770#issuecomment-501284030,"In aoev1_reserve_print() check bounds before trying to print an Ethernet
address.
Updated from a Denis Ovsienko's fix.
This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.
(backported from commit 46aead6)
Signed-off-by: Rebecca Chang Swee Funrebecca.swee.fun.chang@intel.com",I really think that it would be good to make new release :P,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,770,2019-06-12T07:55:36Z,2019-06-12T08:05:05Z,2019-06-12T18:18:13Z,CLOSED,False,1,0,1,https://github.com/rebeccasf,CVE-2017-16808/AoE: Add a missing bounds check.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/770,https://github.com/mcr,5,https://github.com/the-tcpdump-group/tcpdump/pull/770#issuecomment-501394931,"In aoev1_reserve_print() check bounds before trying to print an Ethernet
address.
Updated from a Denis Ovsienko's fix.
This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.
(backported from commit 46aead6)
Signed-off-by: Rebecca Chang Swee Funrebecca.swee.fun.chang@intel.com","Tomasz Kłoczko <notifications@github.com> wrote:
 I really think that it would be good to make new release :P

working on it.",True,"{'LAUGH': ['https://github.com/kloczek'], 'THUMBS_UP': ['https://github.com/kloczek', 'https://github.com/rebeccasf']}"
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,772,2019-06-20T19:04:12Z,2020-05-25T03:40:20Z,2020-05-25T03:40:20Z,MERGED,True,142,48,109,https://github.com/Mister-X-,Fix and update 802.11 status codes,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/772,https://github.com/Mister-X-,1,https://github.com/the-tcpdump-group/tcpdump/pull/772,"Based on 802.11-2016 and includes PCAPs to test.
Here is a quick and dirty code to generate PCAPs:
// License: BSD
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define FIRST_SC 0
#define LAST_SC 107

unsigned char status_code_pcap[] = {
  0xd4, 0xc3, 0xb2, 0xa1, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00,
  0x5b, 0x9b, 0x9c, 0x45, 0xca, 0xb1, 0x07, 0x00, 0x36, 0x00, 0x00, 0x00,
  0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x8e, 0x58, 0x00, 0x00,
  0x00, 0x02, 0x6c, 0x09, 0xa0, 0x00, 0x58, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x65, 0xf4, 0x30, 0x96, 0xb0, 0x00, 0x3a, 0x01, 0x00, 0x0d, 0x93, 0x82,
  0x36, 0x3a, 0x00, 0x0c, 0x41, 0x82, 0xb2, 0x55, 0x00, 0x0c, 0x41, 0x82,
  0xb2, 0x55, 0x90, 0xfc, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
};
unsigned int status_code_pcap_len = 94;

#define SC_BYTE_POS (status_code_pcap_len - 2)

int main() {
	FILE * f = NULL;
	char tmp[25];

	for (status_code_pcap[SC_BYTE_POS] = FIRST_SC;
	     status_code_pcap[SC_BYTE_POS] <= LAST_SC;
	     ++status_code_pcap[SC_BYTE_POS])
	{
		memset(tmp, 0, 25);
		sprintf(tmp, ""status_code-%u.pcap"", status_code_pcap[SC_BYTE_POS]);
		f = fopen(tmp, ""wb"");
		if (f == NULL) {
			printf(""Failed opening %s for writing, aborting\n"");
			return EXIT_FAILURE;
		}
		fwrite(status_code_pcap, status_code_pcap_len, 1, f);
		fclose(f);
	}

	return EXIT_SUCCESS;
}","Based on 802.11-2016 and includes PCAPs to test.
Here is a quick and dirty code to generate PCAPs:
// License: BSD
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define FIRST_SC 0
#define LAST_SC 107

unsigned char status_code_pcap[] = {
  0xd4, 0xc3, 0xb2, 0xa1, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00,
  0x5b, 0x9b, 0x9c, 0x45, 0xca, 0xb1, 0x07, 0x00, 0x36, 0x00, 0x00, 0x00,
  0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x8e, 0x58, 0x00, 0x00,
  0x00, 0x02, 0x6c, 0x09, 0xa0, 0x00, 0x58, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x65, 0xf4, 0x30, 0x96, 0xb0, 0x00, 0x3a, 0x01, 0x00, 0x0d, 0x93, 0x82,
  0x36, 0x3a, 0x00, 0x0c, 0x41, 0x82, 0xb2, 0x55, 0x00, 0x0c, 0x41, 0x82,
  0xb2, 0x55, 0x90, 0xfc, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
};
unsigned int status_code_pcap_len = 94;

#define SC_BYTE_POS (status_code_pcap_len - 2)

int main() {
	FILE * f = NULL;
	char tmp[25];

	for (status_code_pcap[SC_BYTE_POS] = FIRST_SC;
	     status_code_pcap[SC_BYTE_POS] <= LAST_SC;
	     ++status_code_pcap[SC_BYTE_POS])
	{
		memset(tmp, 0, 25);
		sprintf(tmp, ""status_code-%u.pcap"", status_code_pcap[SC_BYTE_POS]);
		f = fopen(tmp, ""wb"");
		if (f == NULL) {
			printf(""Failed opening %s for writing, aborting\n"");
			return EXIT_FAILURE;
		}
		fwrite(status_code_pcap, status_code_pcap_len, 1, f);
		fclose(f);
	}

	return EXIT_SUCCESS;
}",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,773,2019-06-20T19:05:36Z,2020-05-25T03:41:01Z,2020-05-25T03:41:02Z,MERGED,True,72,28,68,https://github.com/Mister-X-,Fix and update 802.11 reason codes,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/773,https://github.com/Mister-X-,1,https://github.com/the-tcpdump-group/tcpdump/pull/773,"Based on 802.11-2016 and includes PCAPs to test.
Here is a quick and dirty code to generate PCAPs:
// License: BSD
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define RC_BYTE_POS 88
#define FIRST_RC 0
#define LAST_RC 66

unsigned char reason_code_pcap[] = {
  0xd4, 0xc3, 0xb2, 0xa1, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00,
  0x7a, 0x9b, 0x9c, 0x45, 0x9b, 0x0e, 0x0a, 0x00, 0x32, 0x00, 0x00, 0x00,
  0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x8e, 0x58, 0x00, 0x00,
  0x00, 0x02, 0x6c, 0x09, 0xa0, 0x00, 0x64, 0x00, 0x00, 0x39, 0x00, 0x00,
  0xfe, 0xaa, 0x65, 0xac, 0xc0, 0x00, 0x3a, 0x01, 0x00, 0x0c, 0x41, 0x82,
  0xb2, 0x55, 0x00, 0x0d, 0x93, 0x82, 0x36, 0x3a, 0x00, 0x0c, 0x41, 0x82,
  0xb2, 0x55, 0x50, 0x0b, 0x00, 0x00
};
unsigned char reason_code_pcap_len = 90;

int main() {
	FILE * f = NULL;
	char tmp[25];

	for (reason_code_pcap[RC_BYTE_POS] = FIRST_RC;
	     reason_code_pcap[RC_BYTE_POS] <= LAST_RC;
	     ++reason_code_pcap[RC_BYTE_POS])
	{
		memset(tmp, 0, 25);
		sprintf(tmp, ""reason_code-%u.pcap"", reason_code_pcap[RC_BYTE_POS]);
		f = fopen(tmp, ""wb"");
		if (f == NULL) {
			printf(""Failed opening %s for writing, aborting\n"");
			return EXIT_FAILURE;
		}
		fwrite(reason_code_pcap, reason_code_pcap_len, 1, f);
		fclose(f);
	}

	return EXIT_SUCCESS;
}","Based on 802.11-2016 and includes PCAPs to test.
Here is a quick and dirty code to generate PCAPs:
// License: BSD
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define RC_BYTE_POS 88
#define FIRST_RC 0
#define LAST_RC 66

unsigned char reason_code_pcap[] = {
  0xd4, 0xc3, 0xb2, 0xa1, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00,
  0x7a, 0x9b, 0x9c, 0x45, 0x9b, 0x0e, 0x0a, 0x00, 0x32, 0x00, 0x00, 0x00,
  0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x8e, 0x58, 0x00, 0x00,
  0x00, 0x02, 0x6c, 0x09, 0xa0, 0x00, 0x64, 0x00, 0x00, 0x39, 0x00, 0x00,
  0xfe, 0xaa, 0x65, 0xac, 0xc0, 0x00, 0x3a, 0x01, 0x00, 0x0c, 0x41, 0x82,
  0xb2, 0x55, 0x00, 0x0d, 0x93, 0x82, 0x36, 0x3a, 0x00, 0x0c, 0x41, 0x82,
  0xb2, 0x55, 0x50, 0x0b, 0x00, 0x00
};
unsigned char reason_code_pcap_len = 90;

int main() {
	FILE * f = NULL;
	char tmp[25];

	for (reason_code_pcap[RC_BYTE_POS] = FIRST_RC;
	     reason_code_pcap[RC_BYTE_POS] <= LAST_RC;
	     ++reason_code_pcap[RC_BYTE_POS])
	{
		memset(tmp, 0, 25);
		sprintf(tmp, ""reason_code-%u.pcap"", reason_code_pcap[RC_BYTE_POS]);
		f = fopen(tmp, ""wb"");
		if (f == NULL) {
			printf(""Failed opening %s for writing, aborting\n"");
			return EXIT_FAILURE;
		}
		fwrite(reason_code_pcap, reason_code_pcap_len, 1, f);
		fclose(f);
	}

	return EXIT_SUCCESS;
}",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,774,2019-06-21T05:57:39Z,2019-07-15T06:59:45Z,2019-07-19T06:29:27Z,MERGED,True,94,947,5,https://github.com/niks3089,Support 2 new versions for arista ethertype and print the time in utc for the new versions,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/774,https://github.com/niks3089,1,https://github.com/the-tcpdump-group/tcpdump/pull/774,This change is ,This change is ,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,774,2019-06-21T05:57:39Z,2019-07-15T06:59:45Z,2019-07-19T06:29:27Z,MERGED,True,94,947,5,https://github.com/niks3089,Support 2 new versions for arista ethertype and print the time in utc for the new versions,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/774,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/774#issuecomment-511295014,This change is ,"Merged, thank you!",True,{'THUMBS_UP': ['https://github.com/niks3089']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,776,2019-07-05T18:26:57Z,2019-07-05T21:46:22Z,2019-07-05T21:46:59Z,MERGED,True,4147,0,5,https://github.com/fenner,An assortment of PIMv2 packets for testing,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/776,https://github.com/fenner,1,https://github.com/the-tcpdump-group/tcpdump/pull/776,We have a decoder for DF Election packets which I will submit separately - this gives some coverage of PIM packet printers.,We have a decoder for DF Election packets which I will submit separately - this gives some coverage of PIM packet printers.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,776,2019-07-05T18:26:57Z,2019-07-05T21:46:22Z,2019-07-05T21:46:59Z,MERGED,True,4147,0,5,https://github.com/fenner,An assortment of PIMv2 packets for testing,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/776,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/776#issuecomment-508868275,We have a decoder for DF Election packets which I will submit separately - this gives some coverage of PIM packet printers.,"Merged, thanks !",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,777,2019-07-07T14:09:56Z,2019-07-13T08:25:48Z,2019-12-08T15:12:21Z,MERGED,True,310,132,5,https://github.com/fenner,PIM Designated Forwarder Election (RFC5015),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/777,https://github.com/fenner,1,https://github.com/the-tcpdump-group/tcpdump/pull/777,"RFC5015 splits the one-""reserved"" field in two halves, meaning that some of the fuzzed packets get printed differently with this change.","RFC5015 splits the one-""reserved"" field in two halves, meaning that some of the fuzzed packets get printed differently with this change.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,777,2019-07-07T14:09:56Z,2019-07-13T08:25:48Z,2019-12-08T15:12:21Z,MERGED,True,310,132,5,https://github.com/fenner,PIM Designated Forwarder Election (RFC5015),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/777,https://github.com/fenner,2,https://github.com/the-tcpdump-group/tcpdump/pull/777#issuecomment-509661513,"RFC5015 splits the one-""reserved"" field in two halves, meaning that some of the fuzzed packets get printed differently with this change.",Thanks for the comments. Obviously this was written before the GET_ macros and I didn't do as good a job porting this one.  I'll take another pass at it.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,777,2019-07-07T14:09:56Z,2019-07-13T08:25:48Z,2019-12-08T15:12:21Z,MERGED,True,310,132,5,https://github.com/fenner,PIM Designated Forwarder Election (RFC5015),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/777,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/777#issuecomment-511102150,"RFC5015 splits the one-""reserved"" field in two halves, meaning that some of the fuzzed packets get printed differently with this change.","Merged, thank you !",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,778,2019-07-07T14:51:38Z,2019-07-08T12:14:41Z,2019-07-08T12:15:32Z,MERGED,True,208,0,4,https://github.com/fenner,Decode the Multiple Labels capability (RFC8277),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/778,https://github.com/fenner,1,https://github.com/the-tcpdump-group/tcpdump/pull/778,"Decode the Multiple Labels capability message.  Note that the labeled-unicast printer in decode_labeled_prefix4() does not support multiple labels, so an update with multiple labels will be decoded as (illegal prefix length) as shown in the accompanying test pcap.","Decode the Multiple Labels capability message.  Note that the labeled-unicast printer in decode_labeled_prefix4() does not support multiple labels, so an update with multiple labels will be decoded as (illegal prefix length) as shown in the accompanying test pcap.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,778,2019-07-07T14:51:38Z,2019-07-08T12:14:41Z,2019-07-08T12:15:32Z,MERGED,True,208,0,4,https://github.com/fenner,Decode the Multiple Labels capability (RFC8277),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/778,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/778#issuecomment-509200980,"Decode the Multiple Labels capability message.  Note that the labeled-unicast printer in decode_labeled_prefix4() does not support multiple labels, so an update with multiple labels will be decoded as (illegal prefix length) as shown in the accompanying test pcap.","Merged, thanks !",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,780,2019-07-12T13:04:51Z,2019-07-15T09:07:35Z,2019-07-15T09:08:41Z,MERGED,True,17,1,4,https://github.com/fenner,Correct the extraction of the TIPC message size field.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/780,https://github.com/fenner,1,https://github.com/the-tcpdump-group/tcpdump/pull/780,Closes #771,Closes #771,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,780,2019-07-12T13:04:51Z,2019-07-15T09:07:35Z,2019-07-15T09:08:41Z,MERGED,True,17,1,4,https://github.com/fenner,Correct the extraction of the TIPC message size field.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/780,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/780#issuecomment-511326938,Closes #771,"Merged, thank you!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,781,2019-07-13T09:48:01Z,,2020-05-25T03:47:10Z,OPEN,False,140,37,2,https://github.com/DEADBEEFh,Add limit-capture-size option,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/781,https://github.com/DEADBEEFh,1,https://github.com/the-tcpdump-group/tcpdump/pull/781,"Using --limit-capture-size, tcpdump can now exit after capturing
a specified amount of data.  If used with -w, tcpdump will exit
after writing the specified limit to disk.  Without -w, tcpdump
will exit reaching the limit based on packets*h->len.
Works with -C/-W/-G options.
The method for specifying file size for -C and
--limit-capture-size was updated to allow users to enter
num[k,m,g,ki,mi,gi].  Leaving off units will result in the current
behavior of an argument being multiplied by a default of 1000000.
This commit updates and improves upon work done by @stevekay for
feature request 97 and pull request 464.","Using --limit-capture-size, tcpdump can now exit after capturing
a specified amount of data.  If used with -w, tcpdump will exit
after writing the specified limit to disk.  Without -w, tcpdump
will exit reaching the limit based on packets*h->len.
Works with -C/-W/-G options.
The method for specifying file size for -C and
--limit-capture-size was updated to allow users to enter
num[k,m,g,ki,mi,gi].  Leaving off units will result in the current
behavior of an argument being multiplied by a default of 1000000.
This commit updates and improves upon work done by @stevekay for
feature request 97 and pull request 464.",True,"{'THUMBS_UP': ['https://github.com/stevekay', 'https://github.com/allenzt']}"
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,781,2019-07-13T09:48:01Z,,2020-05-25T03:47:10Z,OPEN,False,140,37,2,https://github.com/DEADBEEFh,Add limit-capture-size option,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/781,https://github.com/DEADBEEFh,2,https://github.com/the-tcpdump-group/tcpdump/pull/781#issuecomment-511842607,"Using --limit-capture-size, tcpdump can now exit after capturing
a specified amount of data.  If used with -w, tcpdump will exit
after writing the specified limit to disk.  Without -w, tcpdump
will exit reaching the limit based on packets*h->len.
Works with -C/-W/-G options.
The method for specifying file size for -C and
--limit-capture-size was updated to allow users to enter
num[k,m,g,ki,mi,gi].  Leaving off units will result in the current
behavior of an argument being multiplied by a default of 1000000.
This commit updates and improves upon work done by @stevekay for
feature request 97 and pull request 464.","Upon further review, there are a few minor cleanups I'd like to do:
-looks like I left an errant errno=0 in the case statement
-probably don't need the sizeflag and can replace checks with size_bytes != 0
I'll wait for other comments and include those before committing.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,781,2019-07-13T09:48:01Z,,2020-05-25T03:47:10Z,OPEN,False,140,37,2,https://github.com/DEADBEEFh,Add limit-capture-size option,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/781,https://github.com/DEADBEEFh,3,https://github.com/the-tcpdump-group/tcpdump/pull/781#issuecomment-511942409,"Using --limit-capture-size, tcpdump can now exit after capturing
a specified amount of data.  If used with -w, tcpdump will exit
after writing the specified limit to disk.  Without -w, tcpdump
will exit reaching the limit based on packets*h->len.
Works with -C/-W/-G options.
The method for specifying file size for -C and
--limit-capture-size was updated to allow users to enter
num[k,m,g,ki,mi,gi].  Leaving off units will result in the current
behavior of an argument being multiplied by a default of 1000000.
This commit updates and improves upon work done by @stevekay for
feature request 97 and pull request 464.",Closes #569 and closes #97,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,788,2019-08-16T15:13:50Z,2019-08-16T15:18:26Z,2019-08-16T15:18:26Z,CLOSED,False,3,0,1,https://github.com/ckishimo,bgp add EVPN SAFI,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/788,https://github.com/ckishimo,1,https://github.com/the-tcpdump-group/tcpdump/pull/788,"Add EVPN SAFI per RFC 7432 section 7
	    Option Capabilities Advertisement (2), length: 6
	      Multiprotocol Extensions (1), length: 4
		AFI VPLS (25), SAFI Unknown (70)","Add EVPN SAFI per RFC 7432 section 7
	    Option Capabilities Advertisement (2), length: 6
	      Multiprotocol Extensions (1), length: 4
		AFI VPLS (25), SAFI Unknown (70)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,789,2019-08-19T09:10:40Z,2019-08-19T10:44:12Z,2019-08-20T08:45:55Z,MERGED,True,28,0,4,https://github.com/ckishimo,add bgp EVPN SAFI,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/789,https://github.com/ckishimo,1,https://github.com/the-tcpdump-group/tcpdump/pull/789,"Add EVPN SAFI per RFC 7432 section 7
	    Option Capabilities Advertisement (2), length: 6
	      Multiprotocol Extensions (1), length: 4
		AFI VPLS (25), SAFI Unknown (70)","Add EVPN SAFI per RFC 7432 section 7
	    Option Capabilities Advertisement (2), length: 6
	      Multiprotocol Extensions (1), length: 4
		AFI VPLS (25), SAFI Unknown (70)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,789,2019-08-19T09:10:40Z,2019-08-19T10:44:12Z,2019-08-20T08:45:55Z,MERGED,True,28,0,4,https://github.com/ckishimo,add bgp EVPN SAFI,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/789,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/789#issuecomment-522515793,"Add EVPN SAFI per RFC 7432 section 7
	    Option Capabilities Advertisement (2), length: 6
	      Multiprotocol Extensions (1), length: 4
		AFI VPLS (25), SAFI Unknown (70)","Merged, Thank you!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,791,2019-08-20T08:48:11Z,2019-08-20T19:27:50Z,2019-08-20T19:29:22Z,MERGED,True,28,2,4,https://github.com/ckishimo,add bgp LLGR capability,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/791,https://github.com/ckishimo,1,https://github.com/the-tcpdump-group/tcpdump/pull/791,"Add bgp Long-lived Graceful Restart Capability (draft-uttaro-idr-bgp-persistence-05 section 3.1)
	    Option Capabilities Advertisement (2), length: 2
	      Unknown (71), length: 0
		no decoder for Capability 71","Add bgp Long-lived Graceful Restart Capability (draft-uttaro-idr-bgp-persistence-05 section 3.1)
	    Option Capabilities Advertisement (2), length: 2
	      Unknown (71), length: 0
		no decoder for Capability 71",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,791,2019-08-20T08:48:11Z,2019-08-20T19:27:50Z,2019-08-20T19:29:22Z,MERGED,True,28,2,4,https://github.com/ckishimo,add bgp LLGR capability,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/791,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/791#issuecomment-522970516,"Add bgp Long-lived Graceful Restart Capability (draft-uttaro-idr-bgp-persistence-05 section 3.1)
	    Option Capabilities Advertisement (2), length: 2
	      Unknown (71), length: 0
		no decoder for Capability 71","There is a problem to fix:
Failed test: bgp-evpn

23,24c23
< 	      Unknown (71), length: 0
< 		no decoder for Capability 71
---
> 	      Long-lived Graceful Restart (71), length: 0

(https://travis-ci.org/the-tcpdump-group/tcpdump/jobs/574235630)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,791,2019-08-20T08:48:11Z,2019-08-20T19:27:50Z,2019-08-20T19:29:22Z,MERGED,True,28,2,4,https://github.com/ckishimo,add bgp LLGR capability,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/791,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/791#issuecomment-523161117,"Add bgp Long-lived Graceful Restart Capability (draft-uttaro-idr-bgp-persistence-05 section 3.1)
	    Option Capabilities Advertisement (2), length: 2
	      Unknown (71), length: 0
		no decoder for Capability 71","Merged, thank you!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,792,2019-08-22T19:06:42Z,2019-09-04T18:26:45Z,2019-09-04T18:27:07Z,MERGED,True,113,0,4,https://github.com/ckishimo,add isis router capability TLV,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/792,https://github.com/ckishimo,1,https://github.com/the-tcpdump-group/tcpdump/pull/792,"add isis router capability TLV per RFC 7981 section 2
	    unknown TLV #242, length: 8
	      0x0000:  c0a8 0001 0013 0100

	    IS-IS Router Capability TLV #242, length: 8
		Router-id: 192.168.0.1
		Flags: [none]","add isis router capability TLV per RFC 7981 section 2
	    unknown TLV #242, length: 8
	      0x0000:  c0a8 0001 0013 0100

	    IS-IS Router Capability TLV #242, length: 8
		Router-id: 192.168.0.1
		Flags: [none]",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,792,2019-08-22T19:06:42Z,2019-09-04T18:26:45Z,2019-09-04T18:27:07Z,MERGED,True,113,0,4,https://github.com/ckishimo,add isis router capability TLV,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/792,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/792#issuecomment-528026239,"add isis router capability TLV per RFC 7981 section 2
	    unknown TLV #242, length: 8
	      0x0000:  c0a8 0001 0013 0100

	    IS-IS Router Capability TLV #242, length: 8
		Router-id: 192.168.0.1
		Flags: [none]","Merged, thank you!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,795,2019-09-03T07:36:09Z,2019-09-19T17:21:59Z,2019-09-19T17:22:22Z,MERGED,True,44,0,4,https://github.com/ckishimo,add rsvp capability object rfc5063,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/795,https://github.com/ckishimo,1,https://github.com/the-tcpdump-group/tcpdump/pull/795,"add rsvp capability object rfc5063 (section 4.2)
	RSVPv1 Hello Message (20), Flags: [Refresh reduction capable], length: 40, ttl: 1, checksum: 0x7d4d
	  Unknown Object (134) Flags: [ignore silently if unknown], Class-Type: Unknown (1), length: 8
	    0x0000:  0000 0018

	RSVPv1 Hello Message (20), Flags: [Refresh reduction capable], length: 40, ttl: 1, checksum: 0x7d4d
	  Capability Object (134) Flags: [ignore silently if unknown], Class-Type: 1 (1), length: 8
	    Flags: [none]
	    0x0000:  0000 0018","add rsvp capability object rfc5063 (section 4.2)
	RSVPv1 Hello Message (20), Flags: [Refresh reduction capable], length: 40, ttl: 1, checksum: 0x7d4d
	  Unknown Object (134) Flags: [ignore silently if unknown], Class-Type: Unknown (1), length: 8
	    0x0000:  0000 0018

	RSVPv1 Hello Message (20), Flags: [Refresh reduction capable], length: 40, ttl: 1, checksum: 0x7d4d
	  Capability Object (134) Flags: [ignore silently if unknown], Class-Type: 1 (1), length: 8
	    Flags: [none]
	    0x0000:  0000 0018",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,795,2019-09-03T07:36:09Z,2019-09-19T17:21:59Z,2019-09-19T17:22:22Z,MERGED,True,44,0,4,https://github.com/ckishimo,add rsvp capability object rfc5063,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/795,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/795#issuecomment-531770255,"add rsvp capability object rfc5063 (section 4.2)
	RSVPv1 Hello Message (20), Flags: [Refresh reduction capable], length: 40, ttl: 1, checksum: 0x7d4d
	  Unknown Object (134) Flags: [ignore silently if unknown], Class-Type: Unknown (1), length: 8
	    0x0000:  0000 0018

	RSVPv1 Hello Message (20), Flags: [Refresh reduction capable], length: 40, ttl: 1, checksum: 0x7d4d
	  Capability Object (134) Flags: [ignore silently if unknown], Class-Type: 1 (1), length: 8
	    Flags: [none]
	    0x0000:  0000 0018",Do you have pcap samples with some capability_flag_values set?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,795,2019-09-03T07:36:09Z,2019-09-19T17:21:59Z,2019-09-19T17:22:22Z,MERGED,True,44,0,4,https://github.com/ckishimo,add rsvp capability object rfc5063,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/795,https://github.com/ckishimo,3,https://github.com/the-tcpdump-group/tcpdump/pull/795#issuecomment-532194354,"add rsvp capability object rfc5063 (section 4.2)
	RSVPv1 Hello Message (20), Flags: [Refresh reduction capable], length: 40, ttl: 1, checksum: 0x7d4d
	  Unknown Object (134) Flags: [ignore silently if unknown], Class-Type: Unknown (1), length: 8
	    0x0000:  0000 0018

	RSVPv1 Hello Message (20), Flags: [Refresh reduction capable], length: 40, ttl: 1, checksum: 0x7d4d
	  Capability Object (134) Flags: [ignore silently if unknown], Class-Type: 1 (1), length: 8
	    Flags: [none]
	    0x0000:  0000 0018","@fxlb as I did not have any pcap samples I took the liberty of modifying the current pcap sample
Please let me know if there is any problem with that or the updated code. Thanks",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,795,2019-09-03T07:36:09Z,2019-09-19T17:21:59Z,2019-09-19T17:22:22Z,MERGED,True,44,0,4,https://github.com/ckishimo,add rsvp capability object rfc5063,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/795,https://github.com/fenner,4,https://github.com/the-tcpdump-group/tcpdump/pull/795#issuecomment-532650863,"add rsvp capability object rfc5063 (section 4.2)
	RSVPv1 Hello Message (20), Flags: [Refresh reduction capable], length: 40, ttl: 1, checksum: 0x7d4d
	  Unknown Object (134) Flags: [ignore silently if unknown], Class-Type: Unknown (1), length: 8
	    0x0000:  0000 0018

	RSVPv1 Hello Message (20), Flags: [Refresh reduction capable], length: 40, ttl: 1, checksum: 0x7d4d
	  Capability Object (134) Flags: [ignore silently if unknown], Class-Type: 1 (1), length: 8
	    Flags: [none]
	    0x0000:  0000 0018","In your description you say
	    Flags: [none]
	    0x0000:  0000 0018

Why output the hex dump as well as the parsed flags?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,795,2019-09-03T07:36:09Z,2019-09-19T17:21:59Z,2019-09-19T17:22:22Z,MERGED,True,44,0,4,https://github.com/ckishimo,add rsvp capability object rfc5063,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/795,https://github.com/fxlb,5,https://github.com/the-tcpdump-group/tcpdump/pull/795#issuecomment-533038191,"add rsvp capability object rfc5063 (section 4.2)
	RSVPv1 Hello Message (20), Flags: [Refresh reduction capable], length: 40, ttl: 1, checksum: 0x7d4d
	  Unknown Object (134) Flags: [ignore silently if unknown], Class-Type: Unknown (1), length: 8
	    0x0000:  0000 0018

	RSVPv1 Hello Message (20), Flags: [Refresh reduction capable], length: 40, ttl: 1, checksum: 0x7d4d
	  Capability Object (134) Flags: [ignore silently if unknown], Class-Type: 1 (1), length: 8
	    Flags: [none]
	    0x0000:  0000 0018","I took the liberty of modifying the current pcap sample

OK.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,795,2019-09-03T07:36:09Z,2019-09-19T17:21:59Z,2019-09-19T17:22:22Z,MERGED,True,44,0,4,https://github.com/ckishimo,add rsvp capability object rfc5063,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/795,https://github.com/ckishimo,6,https://github.com/the-tcpdump-group/tcpdump/pull/795#issuecomment-533160211,"add rsvp capability object rfc5063 (section 4.2)
	RSVPv1 Hello Message (20), Flags: [Refresh reduction capable], length: 40, ttl: 1, checksum: 0x7d4d
	  Unknown Object (134) Flags: [ignore silently if unknown], Class-Type: Unknown (1), length: 8
	    0x0000:  0000 0018

	RSVPv1 Hello Message (20), Flags: [Refresh reduction capable], length: 40, ttl: 1, checksum: 0x7d4d
	  Capability Object (134) Flags: [ignore silently if unknown], Class-Type: 1 (1), length: 8
	    Flags: [none]
	    0x0000:  0000 0018","Why output the hex dump as well as the parsed flags?
No particular reason.... In fact as you said the sender is misbehaving as this value should be zero...",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,795,2019-09-03T07:36:09Z,2019-09-19T17:21:59Z,2019-09-19T17:22:22Z,MERGED,True,44,0,4,https://github.com/ckishimo,add rsvp capability object rfc5063,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/795,https://github.com/fxlb,7,https://github.com/the-tcpdump-group/tcpdump/pull/795#issuecomment-533228562,"add rsvp capability object rfc5063 (section 4.2)
	RSVPv1 Hello Message (20), Flags: [Refresh reduction capable], length: 40, ttl: 1, checksum: 0x7d4d
	  Unknown Object (134) Flags: [ignore silently if unknown], Class-Type: Unknown (1), length: 8
	    0x0000:  0000 0018

	RSVPv1 Hello Message (20), Flags: [Refresh reduction capable], length: 40, ttl: 1, checksum: 0x7d4d
	  Capability Object (134) Flags: [ignore silently if unknown], Class-Type: 1 (1), length: 8
	    Flags: [none]
	    0x0000:  0000 0018","Merged, Thanks.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,796,2019-09-03T07:52:35Z,2019-09-03T12:43:15Z,2019-09-03T12:45:40Z,MERGED,True,64,0,4,https://github.com/ckishimo,add BGP encap ext community,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/796,https://github.com/ckishimo,1,https://github.com/the-tcpdump-group/tcpdump/pull/796,"add BGP encap ext community (RFC 5512, section 4.5)
	  Extended Community (16), length: 16, Flags [OT]: 
	    target (0x0002), Flags [none]: 65000:101 (= 0.0.0.101)
	    unknown extd community typecode (0x030c), Flags [none]: 000000000008
	    0x0000:  0002 fde8 0000 0065 030c 0000 0000 0008

	  Extended Community (16), length: 16, Flags [OT]: 
	    target (0x0002), Flags [none]: 65000:101 (= 0.0.0.101)
	    encapsulation (0x030c), Flags [none]: Tunnel type: VXLAN
	    0x0000:  0002 fde8 0000 0065 030c 0000 0000 0008","add BGP encap ext community (RFC 5512, section 4.5)
	  Extended Community (16), length: 16, Flags [OT]: 
	    target (0x0002), Flags [none]: 65000:101 (= 0.0.0.101)
	    unknown extd community typecode (0x030c), Flags [none]: 000000000008
	    0x0000:  0002 fde8 0000 0065 030c 0000 0000 0008

	  Extended Community (16), length: 16, Flags [OT]: 
	    target (0x0002), Flags [none]: 65000:101 (= 0.0.0.101)
	    encapsulation (0x030c), Flags [none]: Tunnel type: VXLAN
	    0x0000:  0002 fde8 0000 0065 030c 0000 0000 0008",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,796,2019-09-03T07:52:35Z,2019-09-03T12:43:15Z,2019-09-03T12:45:40Z,MERGED,True,64,0,4,https://github.com/ckishimo,add BGP encap ext community,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/796,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/796#issuecomment-527442258,"add BGP encap ext community (RFC 5512, section 4.5)
	  Extended Community (16), length: 16, Flags [OT]: 
	    target (0x0002), Flags [none]: 65000:101 (= 0.0.0.101)
	    unknown extd community typecode (0x030c), Flags [none]: 000000000008
	    0x0000:  0002 fde8 0000 0065 030c 0000 0000 0008

	  Extended Community (16), length: 16, Flags [OT]: 
	    target (0x0002), Flags [none]: 65000:101 (= 0.0.0.101)
	    encapsulation (0x030c), Flags [none]: Tunnel type: VXLAN
	    0x0000:  0002 fde8 0000 0065 030c 0000 0000 0008","Merged, thanks.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,798,2019-09-12T13:33:25Z,2020-05-25T14:51:34Z,2020-05-25T14:51:34Z,CLOSED,False,162,6,5,https://github.com/ckishimo,add isis LAN adjacency segment identifiers subTLV,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/798,https://github.com/ckishimo,1,https://github.com/the-tcpdump-group/tcpdump/pull/798,"per draft-ietf-isis-segment-routing-extensions-25 (section 2.2.2)
               LAN Adjacency Segment Identifier subTLV #32, length: 11
                 Flags: [Value, Local significance]
                 Weight: 0
                 Neighbor System-ID: 0192.0168.0003
                 Label: 16","per draft-ietf-isis-segment-routing-extensions-25 (section 2.2.2)
               LAN Adjacency Segment Identifier subTLV #32, length: 11
                 Flags: [Value, Local significance]
                 Weight: 0
                 Neighbor System-ID: 0192.0168.0003
                 Label: 16",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,798,2019-09-12T13:33:25Z,2020-05-25T14:51:34Z,2020-05-25T14:51:34Z,CLOSED,False,162,6,5,https://github.com/ckishimo,add isis LAN adjacency segment identifiers subTLV,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/798,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/798#issuecomment-593383762,"per draft-ietf-isis-segment-routing-extensions-25 (section 2.2.2)
               LAN Adjacency Segment Identifier subTLV #32, length: 11
                 Flags: [Value, Local significance]
                 Weight: 0
                 Neighbor System-ID: 0192.0168.0003
                 Label: 16","I suggest a git summary line update:
add isis adjacency segment identifiers subTLV -> IS-IS: Add LAN Adjacency Segment Identifier subTLV",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,798,2019-09-12T13:33:25Z,2020-05-25T14:51:34Z,2020-05-25T14:51:34Z,CLOSED,False,162,6,5,https://github.com/ckishimo,add isis LAN adjacency segment identifiers subTLV,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/798,https://github.com/guyharris,3,https://github.com/the-tcpdump-group/tcpdump/pull/798#issuecomment-633143071,"per draft-ietf-isis-segment-routing-extensions-25 (section 2.2.2)
               LAN Adjacency Segment Identifier subTLV #32, length: 11
                 Flags: [Value, Local significance]
                 Weight: 0
                 Neighbor System-ID: 0192.0168.0003
                 Label: 16",Now RFC 8667; the differences between draft 25 and the RFC appear not to involve packet formats.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,798,2019-09-12T13:33:25Z,2020-05-25T14:51:34Z,2020-05-25T14:51:34Z,CLOSED,False,162,6,5,https://github.com/ckishimo,add isis LAN adjacency segment identifiers subTLV,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/798,https://github.com/guyharris,4,https://github.com/the-tcpdump-group/tcpdump/pull/798#issuecomment-633143177,"per draft-ietf-isis-segment-routing-extensions-25 (section 2.2.2)
               LAN Adjacency Segment Identifier subTLV #32, length: 11
                 Flags: [Value, Local significance]
                 Weight: 0
                 Neighbor System-ID: 0192.0168.0003
                 Label: 16","@fxlb, should we incorporate this?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,798,2019-09-12T13:33:25Z,2020-05-25T14:51:34Z,2020-05-25T14:51:34Z,CLOSED,False,162,6,5,https://github.com/ckishimo,add isis LAN adjacency segment identifiers subTLV,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/798,https://github.com/fxlb,5,https://github.com/the-tcpdump-group/tcpdump/pull/798#issuecomment-633210479,"per draft-ietf-isis-segment-routing-extensions-25 (section 2.2.2)
               LAN Adjacency Segment Identifier subTLV #32, length: 11
                 Flags: [Value, Local significance]
                 Weight: 0
                 Neighbor System-ID: 0192.0168.0003
                 Label: 16","After testing a rebase, an error occurs. Need a closer look.
https://travis-ci.org/github/fxlb/tcpdump/jobs/690575778",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,798,2019-09-12T13:33:25Z,2020-05-25T14:51:34Z,2020-05-25T14:51:34Z,CLOSED,False,162,6,5,https://github.com/ckishimo,add isis LAN adjacency segment identifiers subTLV,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/798,https://github.com/guyharris,6,https://github.com/the-tcpdump-group/tcpdump/pull/798#issuecomment-633310584,"per draft-ietf-isis-segment-routing-extensions-25 (section 2.2.2)
               LAN Adjacency Segment Identifier subTLV #32, length: 11
                 Flags: [Value, Local significance]
                 Weight: 0
                 Neighbor System-ID: 0192.0168.0003
                 Label: 16","After testing a rebase, an error occurs. Need a closer look.
https://travis-ci.org/github/fxlb/tcpdump/jobs/690575778

Change b09710d (pull request #845) modified the output format of the IS-IS dissector, so TESTS/isis_sid.out needs to be updated to reflect that change.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,798,2019-09-12T13:33:25Z,2020-05-25T14:51:34Z,2020-05-25T14:51:34Z,CLOSED,False,162,6,5,https://github.com/ckishimo,add isis LAN adjacency segment identifiers subTLV,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/798,https://github.com/fxlb,7,https://github.com/the-tcpdump-group/tcpdump/pull/798#issuecomment-633608054,"per draft-ietf-isis-segment-routing-extensions-25 (section 2.2.2)
               LAN Adjacency Segment Identifier subTLV #32, length: 11
                 Flags: [Value, Local significance]
                 Weight: 0
                 Neighbor System-ID: 0192.0168.0003
                 Label: 16","Rebased, updated, merged as commit 586e9b7.
Thanks.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,799,2019-09-24T14:53:50Z,2019-09-24T17:47:03Z,2022-03-03T06:24:35Z,CLOSED,False,2,0,1,https://github.com/H2O-2,"If decode_prefix6() returns a negative number, don't print buf.",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/799,https://github.com/H2O-2,1,https://github.com/the-tcpdump-group/tcpdump/pull/799,"If it returns a negative number, it hasn't necessarily filled in buf, so
just return immediately; this is similar to the IPv4 code path, wherein
we just return a negative number, and print nothing, on an error.
This should fix GitHub issue #763.
(backported from commit 511915b)","If it returns a negative number, it hasn't necessarily filled in buf, so
just return immediately; this is similar to the IPv4 code path, wherein
we just return a negative number, and print nothing, on an error.
This should fix GitHub issue #763.
(backported from commit 511915b)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,799,2019-09-24T14:53:50Z,2019-09-24T17:47:03Z,2022-03-03T06:24:35Z,CLOSED,False,2,0,1,https://github.com/H2O-2,"If decode_prefix6() returns a negative number, don't print buf.",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/799,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/799#issuecomment-534671168,"If it returns a negative number, it hasn't necessarily filled in buf, so
just return immediately; this is similar to the IPv4 code path, wherein
we just return a negative number, and print nothing, on an error.
This should fix GitHub issue #763.
(backported from commit 511915b)",New release with already this fix ongoing.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,799,2019-09-24T14:53:50Z,2019-09-24T17:47:03Z,2022-03-03T06:24:35Z,CLOSED,False,2,0,1,https://github.com/H2O-2,"If decode_prefix6() returns a negative number, don't print buf.",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/799,https://github.com/guyharris,3,https://github.com/the-tcpdump-group/tcpdump/pull/799#issuecomment-1057718273,"If it returns a negative number, it hasn't necessarily filled in buf, so
just return immediately; this is similar to the IPv4 code path, wherein
we just return a negative number, and print nothing, on an error.
This should fix GitHub issue #763.
(backported from commit 511915b)","The fix is in 4.9.3 and in all subsequent releases, including the current one and all other 4.99.x releases.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,800,2019-09-30T11:30:52Z,2019-10-24T20:09:16Z,2019-10-24T20:09:16Z,CLOSED,False,1,1,1,https://github.com/pmgdeb,Fix order when printing PGM_OPT_REDIRECT_FIXED_LEN and opt_len,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/800,https://github.com/pmgdeb,1,https://github.com/the-tcpdump-group/tcpdump/pull/800,"Fix order of PGM_OPT_REDIRECT_FIXED_LEN and opt_len to match the expression when printing in function print-pgm(), case PGM_OPT_REDIRECT.","Fix order of PGM_OPT_REDIRECT_FIXED_LEN and opt_len to match the expression when printing in function print-pgm(), case PGM_OPT_REDIRECT.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,800,2019-09-30T11:30:52Z,2019-10-24T20:09:16Z,2019-10-24T20:09:16Z,CLOSED,False,1,1,1,https://github.com/pmgdeb,Fix order when printing PGM_OPT_REDIRECT_FIXED_LEN and opt_len,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/800,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/800#issuecomment-546081992,"Fix order of PGM_OPT_REDIRECT_FIXED_LEN and opt_len to match the expression when printing in function print-pgm(), case PGM_OPT_REDIRECT.",Merged with commit message updated. Thank you !,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,805,2019-10-07T16:05:22Z,2019-11-13T18:34:08Z,2020-12-29T18:25:23Z,MERGED,True,23,0,1,https://github.com/fenner,Do not open an interface if not needed for -d,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/805,https://github.com/fenner,1,https://github.com/the-tcpdump-group/tcpdump/pull/805,"This allows the ""interface-less"" option described in #804 .  It's possible that it should be improved (e.g., if you can't find an interface, and the dump flag is specified, it could output ""Maybe you meant to add -y EN10MB?  Or, maybe it's common enough that it should default to -y EN10MB with a warning message?)","This allows the ""interface-less"" option described in #804 .  It's possible that it should be improved (e.g., if you can't find an interface, and the dump flag is specified, it could output ""Maybe you meant to add -y EN10MB?  Or, maybe it's common enough that it should default to -y EN10MB with a warning message?)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,805,2019-10-07T16:05:22Z,2019-11-13T18:34:08Z,2020-12-29T18:25:23Z,MERGED,True,23,0,1,https://github.com/fenner,Do not open an interface if not needed for -d,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/805,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/805#issuecomment-539124918,"This allows the ""interface-less"" option described in #804 .  It's possible that it should be improved (e.g., if you can't find an interface, and the dump flag is specified, it could output ""Maybe you meant to add -y EN10MB?  Or, maybe it's common enough that it should default to -y EN10MB with a warning message?)","This allows the ""interface-less"" option described in #804 . It's possible that it should be improved (e.g., if you can't find an interface, and the dump flag is specified, it could output ""Maybe you meant to add -d EN10MB? Or, maybe it's common enough that it should default to -d EN10MB with a warning message?)

Presumably you mean -y EN10MB?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,805,2019-10-07T16:05:22Z,2019-11-13T18:34:08Z,2020-12-29T18:25:23Z,MERGED,True,23,0,1,https://github.com/fenner,Do not open an interface if not needed for -d,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/805,https://github.com/fenner,3,https://github.com/the-tcpdump-group/tcpdump/pull/805#issuecomment-539131371,"This allows the ""interface-less"" option described in #804 .  It's possible that it should be improved (e.g., if you can't find an interface, and the dump flag is specified, it could output ""Maybe you meant to add -y EN10MB?  Or, maybe it's common enough that it should default to -y EN10MB with a warning message?)","Presumably you mean -y EN10MB?

Yes, thank you. I've edited the message, meaning that now your question looks out of place :-)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,805,2019-10-07T16:05:22Z,2019-11-13T18:34:08Z,2020-12-29T18:25:23Z,MERGED,True,23,0,1,https://github.com/fenner,Do not open an interface if not needed for -d,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/805,https://github.com/mcr,4,https://github.com/the-tcpdump-group/tcpdump/pull/805#issuecomment-539364435,"This allows the ""interface-less"" option described in #804 .  It's possible that it should be improved (e.g., if you can't find an interface, and the dump flag is specified, it could output ""Maybe you meant to add -y EN10MB?  Or, maybe it's common enough that it should default to -y EN10MB with a warning message?)","Guy Harris <notifications@github.com> wrote:
> This allows the ""interface-less"" option described in #804 . It's
>possible that it should be improved (e.g., if you can't find an
>interface, and the dump flag is specified, it could output ""Maybe you
>meant to add `-d EN10MB`? Or, maybe it's common enough that it should
>_default_ to `-d EN10MB` with a warning message?)

It should default with a warning.
 Presumably you mean `-y EN10MB`?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,805,2019-10-07T16:05:22Z,2019-11-13T18:34:08Z,2020-12-29T18:25:23Z,MERGED,True,23,0,1,https://github.com/fenner,Do not open an interface if not needed for -d,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/805,https://github.com/fxlb,5,https://github.com/the-tcpdump-group/tcpdump/pull/805#issuecomment-548374085,"This allows the ""interface-less"" option described in #804 .  It's possible that it should be improved (e.g., if you can't find an interface, and the dump flag is specified, it could output ""Maybe you meant to add -y EN10MB?  Or, maybe it's common enough that it should default to -y EN10MB with a warning message?)",Objection to a merge?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,805,2019-10-07T16:05:22Z,2019-11-13T18:34:08Z,2020-12-29T18:25:23Z,MERGED,True,23,0,1,https://github.com/fenner,Do not open an interface if not needed for -d,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/805,https://github.com/fxlb,6,https://github.com/the-tcpdump-group/tcpdump/pull/805#issuecomment-549026426,"This allows the ""interface-less"" option described in #804 .  It's possible that it should be improved (e.g., if you can't find an interface, and the dump flag is specified, it could output ""Maybe you meant to add -y EN10MB?  Or, maybe it's common enough that it should default to -y EN10MB with a warning message?)","@fenner
Could you rebase on current master ?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,805,2019-10-07T16:05:22Z,2019-11-13T18:34:08Z,2020-12-29T18:25:23Z,MERGED,True,23,0,1,https://github.com/fenner,Do not open an interface if not needed for -d,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/805,https://github.com/fxlb,7,https://github.com/the-tcpdump-group/tcpdump/pull/805#issuecomment-553541081,"This allows the ""interface-less"" option described in #804 .  It's possible that it should be improved (e.g., if you can't find an interface, and the dump flag is specified, it could output ""Maybe you meant to add -y EN10MB?  Or, maybe it's common enough that it should default to -y EN10MB with a warning message?)",Thank  you!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,807,2019-10-24T12:12:11Z,2020-03-01T04:38:16Z,2020-03-01T04:38:16Z,CLOSED,False,1,1,1,https://github.com/sh1r4s3,Use buffer_size instead of len in EVP_Cipher.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/807,https://github.com/sh1r4s3,1,https://github.com/the-tcpdump-group/tcpdump/pull/807,"Input data to the EVP_Cipher must be padded with zeros and data size
must be multiple of a block_size [1,2].
For example, in the case of the AES 128 CBC, if inl argument of the
EVP_Cipher is len (not buffer_size), then the result (output_buffer)
will depend on architecture.
This patch does fix ikev2pI2 test on a ppc64le (tested on PowerNV 8247-22L).
[1] https://tools.ietf.org/html/rfc2406
[2] https://tools.ietf.org/html/rfc3602","Input data to the EVP_Cipher must be padded with zeros and data size
must be multiple of a block_size [1,2].
For example, in the case of the AES 128 CBC, if inl argument of the
EVP_Cipher is len (not buffer_size), then the result (output_buffer)
will depend on architecture.
This patch does fix ikev2pI2 test on a ppc64le (tested on PowerNV 8247-22L).
[1] https://tools.ietf.org/html/rfc2406
[2] https://tools.ietf.org/html/rfc3602",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,807,2019-10-24T12:12:11Z,2020-03-01T04:38:16Z,2020-03-01T04:38:16Z,CLOSED,False,1,1,1,https://github.com/sh1r4s3,Use buffer_size instead of len in EVP_Cipher.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/807,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/807#issuecomment-593053082,"Input data to the EVP_Cipher must be padded with zeros and data size
must be multiple of a block_size [1,2].
For example, in the case of the AES 128 CBC, if inl argument of the
EVP_Cipher is len (not buffer_size), then the result (output_buffer)
will depend on architecture.
This patch does fix ikev2pI2 test on a ppc64le (tested on PowerNV 8247-22L).
[1] https://tools.ietf.org/html/rfc2406
[2] https://tools.ietf.org/html/rfc3602","The code is significantly changed in the master branch - for one thing, we don't call EVP_Cipher() any more, we call other routines.  We also require the block being decrypted to already have been padded as necessary.
So these changes 1) no longer apply and 2) are probably not necessary.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,808,2019-10-24T18:50:00Z,2020-04-10T14:01:42Z,2020-04-10T16:00:18Z,CLOSED,False,505,0,7,https://github.com/jacobgb24,Print EDNS options with data,24,[],https://github.com/the-tcpdump-group/tcpdump/pull/808,https://github.com/jacobgb24,1,https://github.com/the-tcpdump-group/tcpdump/pull/808,Builds directly on #762 . Adds printing of EDNS options and their data with -vv. Format of EDNS options matches format of TCP options.,Builds directly on #762 . Adds printing of EDNS options and their data with -vv. Format of EDNS options matches format of TCP options.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,808,2019-10-24T18:50:00Z,2020-04-10T14:01:42Z,2020-04-10T16:00:18Z,CLOSED,False,505,0,7,https://github.com/jacobgb24,Print EDNS options with data,24,[],https://github.com/the-tcpdump-group/tcpdump/pull/808,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/808#issuecomment-546064702,Builds directly on #762 . Adds printing of EDNS options and their data with -vv. Format of EDNS options matches format of TCP options.,"Builds directly on #762 .

""Builds directly on"" as in ""#762 should be checked in first"" or as in ""replaces #762""?  This includes the same changes to tests/TESTLIST that #762 does.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,808,2019-10-24T18:50:00Z,2020-04-10T14:01:42Z,2020-04-10T16:00:18Z,CLOSED,False,505,0,7,https://github.com/jacobgb24,Print EDNS options with data,24,[],https://github.com/the-tcpdump-group/tcpdump/pull/808,https://github.com/jacobgb24,3,https://github.com/the-tcpdump-group/tcpdump/pull/808#issuecomment-546065679,Builds directly on #762 . Adds printing of EDNS options and their data with -vv. Format of EDNS options matches format of TCP options.,"It should probably replace #762 (by built I meant that I started from that branch and added commits to it thus obsoleting it). The changes to tests/TESTLIST are the same, but the output of the tests themselves are different.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,808,2019-10-24T18:50:00Z,2020-04-10T14:01:42Z,2020-04-10T16:00:18Z,CLOSED,False,505,0,7,https://github.com/jacobgb24,Print EDNS options with data,24,[],https://github.com/the-tcpdump-group/tcpdump/pull/808,https://github.com/fxlb,4,https://github.com/the-tcpdump-group/tcpdump/pull/808#issuecomment-546066524,Builds directly on #762 . Adds printing of EDNS options and their data with -vv. Format of EDNS options matches format of TCP options.,"""This branch cannot be rebased due to conflicts"".",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,808,2019-10-24T18:50:00Z,2020-04-10T14:01:42Z,2020-04-10T16:00:18Z,CLOSED,False,505,0,7,https://github.com/jacobgb24,Print EDNS options with data,24,[],https://github.com/the-tcpdump-group/tcpdump/pull/808,https://github.com/fxlb,5,https://github.com/the-tcpdump-group/tcpdump/pull/808#issuecomment-546070388,Builds directly on #762 . Adds printing of EDNS options and their data with -vv. Format of EDNS options matches format of TCP options.,Rebase needed.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,808,2019-10-24T18:50:00Z,2020-04-10T14:01:42Z,2020-04-10T16:00:18Z,CLOSED,False,505,0,7,https://github.com/jacobgb24,Print EDNS options with data,24,[],https://github.com/the-tcpdump-group/tcpdump/pull/808,https://github.com/fxlb,6,https://github.com/the-tcpdump-group/tcpdump/pull/808#issuecomment-546241523,Builds directly on #762 . Adds printing of EDNS options and their data with -vv. Format of EDNS options matches format of TCP options.,"There is a conflict in tests/TESTLIST.
You should :
git rebase master after updating your master branch with the-tcpdump-group:master",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,808,2019-10-24T18:50:00Z,2020-04-10T14:01:42Z,2020-04-10T16:00:18Z,CLOSED,False,505,0,7,https://github.com/jacobgb24,Print EDNS options with data,24,[],https://github.com/the-tcpdump-group/tcpdump/pull/808,https://github.com/jacobgb24,7,https://github.com/the-tcpdump-group/tcpdump/pull/808#issuecomment-546440389,Builds directly on #762 . Adds printing of EDNS options and their data with -vv. Format of EDNS options matches format of TCP options.,"In terms of rebasing, I'm not super familiar with the process (I've generally avoided rebases). I pulled the-tcpdump-group:master into my master then did git rebase master which said Current branch master is up to date..
Sorry if that wasn't the correct process and let me know if there's something else I should do",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,808,2019-10-24T18:50:00Z,2020-04-10T14:01:42Z,2020-04-10T16:00:18Z,CLOSED,False,505,0,7,https://github.com/jacobgb24,Print EDNS options with data,24,[],https://github.com/the-tcpdump-group/tcpdump/pull/808,https://github.com/fxlb,8,https://github.com/the-tcpdump-group/tcpdump/pull/808#issuecomment-546450658,Builds directly on #762 . Adds printing of EDNS options and their data with -vv. Format of EDNS options matches format of TCP options.,"As you work in your master branch (not the best way I think), you could do:
git rebase @remote_for_the-tcpdump-group_repo@/master",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,808,2019-10-24T18:50:00Z,2020-04-10T14:01:42Z,2020-04-10T16:00:18Z,CLOSED,False,505,0,7,https://github.com/jacobgb24,Print EDNS options with data,24,[],https://github.com/the-tcpdump-group/tcpdump/pull/808,https://github.com/fxlb,9,https://github.com/the-tcpdump-group/tcpdump/pull/808#issuecomment-546451992,Builds directly on #762 . Adds printing of EDNS options and their data with -vv. Format of EDNS options matches format of TCP options.,"After removing the merge you have done with:
git reset --hard HEAD^
[first you could save your branch with : git checkout -b master-save; git checkout -]",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,808,2019-10-24T18:50:00Z,2020-04-10T14:01:42Z,2020-04-10T16:00:18Z,CLOSED,False,505,0,7,https://github.com/jacobgb24,Print EDNS options with data,24,[],https://github.com/the-tcpdump-group/tcpdump/pull/808,https://github.com/fxlb,10,https://github.com/the-tcpdump-group/tcpdump/pull/808#issuecomment-546472938,Builds directly on #762 . Adds printing of EDNS options and their data with -vv. Format of EDNS options matches format of TCP options.,"@jacobgb24
note for the future: your repo is forked from cdeccio/tcpdump, it should forked from the-tcpdump-group/tcpdump.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,808,2019-10-24T18:50:00Z,2020-04-10T14:01:42Z,2020-04-10T16:00:18Z,CLOSED,False,505,0,7,https://github.com/jacobgb24,Print EDNS options with data,24,[],https://github.com/the-tcpdump-group/tcpdump/pull/808,https://github.com/kimbo,11,https://github.com/the-tcpdump-group/tcpdump/pull/808#issuecomment-563709213,Builds directly on #762 . Adds printing of EDNS options and their data with -vv. Format of EDNS options matches format of TCP options.,Would love to see this merged 👍,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,808,2019-10-24T18:50:00Z,2020-04-10T14:01:42Z,2020-04-10T16:00:18Z,CLOSED,False,505,0,7,https://github.com/jacobgb24,Print EDNS options with data,24,[],https://github.com/the-tcpdump-group/tcpdump/pull/808,https://github.com/fxlb,12,https://github.com/the-tcpdump-group/tcpdump/pull/808#issuecomment-612041364,Builds directly on #762 . Adds printing of EDNS options and their data with -vv. Format of EDNS options matches format of TCP options.,"Rebased in two commits, merged with 6bb25b4.
Updated by 285a6e7.
Thank you !",True,{'ROCKET': ['https://github.com/kimbo']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,812,2019-11-12T13:53:29Z,,2021-07-12T07:44:18Z,OPEN,False,2,0,1,https://github.com/martinwilli,Skip privilege dropping when using -Z root on --with-user builds,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/812,https://github.com/martinwilli,1,https://github.com/the-tcpdump-group/tcpdump/pull/812,"Distributions which started building --with-user to switch to an
unpriviliged user claim that the old behavior of running under root
can be restored by passing ""-Z root"" on the command line. However,
doing so is different from not using --with-user, as tcpdump still
drops privileges and sets supplementary user groups.
In Linux containers using user namespaces with an in-container root
user mapped to an unprivileged external user, calling setgroups() is
usually denied, as it would allow that unprivileged user to leave
groups (see user_namespaces(7) for details). Passing ""-Z root"" on
a --with-user build still goes through initgroups() and therefore
setgroups(), which will fail in such a container environment. This
makes tcpdump builds using --with-user effectively unusable in such
containers.
Adjust the ""-Z root"" fallback to skip any privilege dropping and
supplementary group setup, making it identical to builds not using
--with-user.","Distributions which started building --with-user to switch to an
unpriviliged user claim that the old behavior of running under root
can be restored by passing ""-Z root"" on the command line. However,
doing so is different from not using --with-user, as tcpdump still
drops privileges and sets supplementary user groups.
In Linux containers using user namespaces with an in-container root
user mapped to an unprivileged external user, calling setgroups() is
usually denied, as it would allow that unprivileged user to leave
groups (see user_namespaces(7) for details). Passing ""-Z root"" on
a --with-user build still goes through initgroups() and therefore
setgroups(), which will fail in such a container environment. This
makes tcpdump builds using --with-user effectively unusable in such
containers.
Adjust the ""-Z root"" fallback to skip any privilege dropping and
supplementary group setup, making it identical to builds not using
--with-user.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,813,2019-12-03T20:22:07Z,2019-12-04T01:31:15Z,2020-12-29T18:24:51Z,MERGED,True,8,8,1,https://github.com/fenner,Don't use nd_ipv4 for non-packet data,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/813,https://github.com/fenner,1,https://github.com/the-tcpdump-group/tcpdump/pull/813,"nd_ipv4 was created for an unaligned field access inside of packet data,
so it should not be used for the rx_cache_entry.  Use uint32_t, and use
GET_IPV4_TO_NETWORK_ORDER instead of UNALIGNED_MEMCPY() to get the data
into them.
This caused test failures when your memory layout is such that the cache data
is stored above the packet data, since the GET_IPV4_TO_NETWORK_ORDER
accessing the cache would report that the packet is truncated.","nd_ipv4 was created for an unaligned field access inside of packet data,
so it should not be used for the rx_cache_entry.  Use uint32_t, and use
GET_IPV4_TO_NETWORK_ORDER instead of UNALIGNED_MEMCPY() to get the data
into them.
This caused test failures when your memory layout is such that the cache data
is stored above the packet data, since the GET_IPV4_TO_NETWORK_ORDER
accessing the cache would report that the packet is truncated.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,816,2020-01-13T16:01:23Z,2020-01-13T16:04:26Z,2020-01-13T17:02:47Z,CLOSED,False,44,14,7,https://github.com/dcaratti,MPTCP: parse MP_CAPABLE v1 options,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/816,https://github.com/dcaratti,1,https://github.com/the-tcpdump-group/tcpdump/pull/816,"A new version of MPTCP protocol (RFC8684) has been published, with some
changes to the MP_CAPABLE options handling. Let tcpdump print the protocol
version, and adjust parsing of MP_CAPABLE options according to RFC8684.
Signed-off-by: Davide Caratti dcaratti@redhat.com","A new version of MPTCP protocol (RFC8684) has been published, with some
changes to the MP_CAPABLE options handling. Let tcpdump print the protocol
version, and adjust parsing of MP_CAPABLE options according to RFC8684.
Signed-off-by: Davide Caratti dcaratti@redhat.com",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,817,2020-01-13T17:07:41Z,2020-02-28T13:34:49Z,2020-02-28T13:35:20Z,MERGED,True,46,16,7,https://github.com/dcaratti,MPTCP: parse MP_CAPABLE v1 options,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/817,https://github.com/dcaratti,1,https://github.com/the-tcpdump-group/tcpdump/pull/817,"A new version of MPTCP protocol (RFC8684) has been published, with some
changes to the MP_CAPABLE options handling. Let tcpdump print the protocol
version, and adjust parsing of MP_CAPABLE options according to RFC8684.
Signed-off-by: Davide Caratti dcaratti@redhat.com","A new version of MPTCP protocol (RFC8684) has been published, with some
changes to the MP_CAPABLE options handling. Let tcpdump print the protocol
version, and adjust parsing of MP_CAPABLE options according to RFC8684.
Signed-off-by: Davide Caratti dcaratti@redhat.com",True,"{'THUMBS_UP': ['https://github.com/matttbe', 'https://github.com/teto']}"
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,817,2020-01-13T17:07:41Z,2020-02-28T13:34:49Z,2020-02-28T13:35:20Z,MERGED,True,46,16,7,https://github.com/dcaratti,MPTCP: parse MP_CAPABLE v1 options,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/817,https://github.com/pkrystad,2,https://github.com/the-tcpdump-group/tcpdump/pull/817#issuecomment-592172937,"A new version of MPTCP protocol (RFC8684) has been published, with some
changes to the MP_CAPABLE options handling. Let tcpdump print the protocol
version, and adjust parsing of MP_CAPABLE options according to RFC8684.
Signed-off-by: Davide Caratti dcaratti@redhat.com","This commit prints an unneccesary '}' in the output of the initial SYN + MP_CAPABLE packet, i.e.
18:44:24.039044 IP ..... ,mptcp capable v1}], length 0",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,817,2020-01-13T17:07:41Z,2020-02-28T13:34:49Z,2020-02-28T13:35:20Z,MERGED,True,46,16,7,https://github.com/dcaratti,MPTCP: parse MP_CAPABLE v1 options,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/817,https://github.com/dcaratti,3,https://github.com/the-tcpdump-group/tcpdump/pull/817#issuecomment-592415743,"A new version of MPTCP protocol (RFC8684) has been published, with some
changes to the MP_CAPABLE options handling. Let tcpdump print the protocol
version, and adjust parsing of MP_CAPABLE options according to RFC8684.
Signed-off-by: Davide Caratti dcaratti@redhat.com","This commit prints an unneccesary '}' in the output of the initial SYN + MP_CAPABLE packet, i.e.
18:44:24.039044 IP ..... ,mptcp capable v1}], length 0

hello,
you are right, we should print the closing brace
203        ND_PRINT(""}"");

only if it was opened before, i.e. when opt_len is 12 or 20: I will post a v2 patch soon. Thanks!
davide",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,817,2020-01-13T17:07:41Z,2020-02-28T13:34:49Z,2020-02-28T13:35:20Z,MERGED,True,46,16,7,https://github.com/dcaratti,MPTCP: parse MP_CAPABLE v1 options,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/817,https://github.com/fxlb,4,https://github.com/the-tcpdump-group/tcpdump/pull/817#issuecomment-592515087,"A new version of MPTCP protocol (RFC8684) has been published, with some
changes to the MP_CAPABLE options handling. Let tcpdump print the protocol
version, and adjust parsing of MP_CAPABLE options according to RFC8684.
Signed-off-by: Davide Caratti dcaratti@redhat.com","Merged, thanks!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,821,2020-02-03T03:04:56Z,2020-02-04T22:19:18Z,2020-02-04T23:05:09Z,MERGED,True,240,286,8,https://github.com/mcr,Testrun perl,10,[],https://github.com/the-tcpdump-group/tcpdump/pull/821,https://github.com/mcr,1,https://github.com/the-tcpdump-group/tcpdump/pull/821,"This code changes TESTrun to process more complex test cases by loading perl code defining an array.  This replaces the attempt to do this with YAML.pm, which would have required an additional package to run tests.","This code changes TESTrun to process more complex test cases by loading perl code defining an array.  This replaces the attempt to do this with YAML.pm, which would have required an additional package to run tests.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,821,2020-02-03T03:04:56Z,2020-02-04T22:19:18Z,2020-02-04T23:05:09Z,MERGED,True,240,286,8,https://github.com/mcr,Testrun perl,10,[],https://github.com/the-tcpdump-group/tcpdump/pull/821,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/821#issuecomment-581219533,"This code changes TESTrun to process more complex test cases by loading perl code defining an array.  This replaces the attempt to do this with YAML.pm, which would have required an additional package to run tests.","This code changes TESTrun to process more complex test cases by loading perl code defining an array.

So the test descriptions are expressed in PON? :-)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,821,2020-02-03T03:04:56Z,2020-02-04T22:19:18Z,2020-02-04T23:05:09Z,MERGED,True,240,286,8,https://github.com/mcr,Testrun perl,10,[],https://github.com/the-tcpdump-group/tcpdump/pull/821,https://github.com/guyharris,3,https://github.com/the-tcpdump-group/tcpdump/pull/821#issuecomment-581240790,"This code changes TESTrun to process more complex test cases by loading perl code defining an array.  This replaces the attempt to do this with YAML.pm, which would have required an additional package to run tests.","AppVeyor is being even more annoying than usual - it's stuck trying to fetch something that's ""not a tree"", and won't try something that is a tree, it appears - and it doesn't matter anyway whether the build succeeds, because we're not yet doing the tests on Windows, so just ignore the issues it's having with ""switch from crypto.sh to crypto.tests"".  Succeeding with Travis and Cirrus is sufficient.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,821,2020-02-03T03:04:56Z,2020-02-04T22:19:18Z,2020-02-04T23:05:09Z,MERGED,True,240,286,8,https://github.com/mcr,Testrun perl,10,[],https://github.com/the-tcpdump-group/tcpdump/pull/821,https://github.com/mcr,4,https://github.com/the-tcpdump-group/tcpdump/pull/821#issuecomment-581276094,"This code changes TESTrun to process more complex test cases by loading perl code defining an array.  This replaces the attempt to do this with YAML.pm, which would have required an additional package to run tests.","This code changes TESTrun to process more complex test cases by loading perl code defining an array.

So the test descriptions are expressed in PON? :-)

I guess so...?!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,821,2020-02-03T03:04:56Z,2020-02-04T22:19:18Z,2020-02-04T23:05:09Z,MERGED,True,240,286,8,https://github.com/mcr,Testrun perl,10,[],https://github.com/the-tcpdump-group/tcpdump/pull/821,https://github.com/mcr,5,https://github.com/the-tcpdump-group/tcpdump/pull/821#issuecomment-581276308,"This code changes TESTrun to process more complex test cases by loading perl code defining an array.  This replaces the attempt to do this with YAML.pm, which would have required an additional package to run tests.","Looks good. Presumably if more than one thing needs to be defined to run the test, you could define it as ""THIS && THAT"" - presumably that will evaluate to undef if either THIS or THAT is undefined.

I plan to support config_set => ['CONFIG_THIS', 'CONFIG_THAT']",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,821,2020-02-03T03:04:56Z,2020-02-04T22:19:18Z,2020-02-04T23:05:09Z,MERGED,True,240,286,8,https://github.com/mcr,Testrun perl,10,[],https://github.com/the-tcpdump-group/tcpdump/pull/821,https://github.com/fxlb,6,https://github.com/the-tcpdump-group/tcpdump/pull/821#issuecomment-581292057,"This code changes TESTrun to process more complex test cases by loading perl code defining an array.  This replaces the attempt to do this with YAML.pm, which would have required an additional package to run tests.","(Closed by error, re-open).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,821,2020-02-03T03:04:56Z,2020-02-04T22:19:18Z,2020-02-04T23:05:09Z,MERGED,True,240,286,8,https://github.com/mcr,Testrun perl,10,[],https://github.com/the-tcpdump-group/tcpdump/pull/821,https://github.com/infrastation,7,https://github.com/the-tcpdump-group/tcpdump/pull/821#issuecomment-581377037,"This code changes TESTrun to process more complex test cases by loading perl code defining an array.  This replaces the attempt to do this with YAML.pm, which would have required an additional package to run tests.","Have you considered making the ""run/do not run"" decisions in the Perl space instead of the declarations? This way you could just set the test's key to a boolean variable or insert/skip items in an if branch, thus avoiding the need to invent and implement a declarative way for the conditional tests.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,821,2020-02-03T03:04:56Z,2020-02-04T22:19:18Z,2020-02-04T23:05:09Z,MERGED,True,240,286,8,https://github.com/mcr,Testrun perl,10,[],https://github.com/the-tcpdump-group/tcpdump/pull/821,https://github.com/infrastation,8,https://github.com/the-tcpdump-group/tcpdump/pull/821#issuecomment-581645354,"This code changes TESTrun to process more complex test cases by loading perl code defining an array.  This replaces the attempt to do this with YAML.pm, which would have required an additional package to run tests.","I mean it would be straightforward just to assign a variable like $test_crypto = $have_libcrypto && ! $have_capsicum; and use it in the list of test like 'when' => $test_crypto, instead of implementing an expression parser. And it would be nice to make it a few clean commits instead of exposing all the drafts.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,821,2020-02-03T03:04:56Z,2020-02-04T22:19:18Z,2020-02-04T23:05:09Z,MERGED,True,240,286,8,https://github.com/mcr,Testrun perl,10,[],https://github.com/the-tcpdump-group/tcpdump/pull/821,https://github.com/infrastation,9,https://github.com/the-tcpdump-group/tcpdump/pull/821#issuecomment-581671223,"This code changes TESTrun to process more complex test cases by loading perl code defining an array.  This replaces the attempt to do this with YAML.pm, which would have required an additional package to run tests.","For clarity, it would not be a big problem to use the proposed first implementation of conditional encoding (given it replaces the shell files). I have made a quick look through and a test run on FreeBSD (which finally works, which should enable make check in Cirrus CI later) and noticed the following debug output, which probably should not be in the final version:
FILE: /usr/home/denis/tcpdump/tests/crypto.tests
    esp1                                    : passed
    esp2                                    : passed
    esp3                                    : passed
    esp4                                    : passed
    esp5                                    : passed
    espudp1                                 : passed
    ikev2pI2                                : passed
    isakmp4                                 : passed
    bgp-as-path-oobr-ssl                    : passed
    bgp-aigp-oobr-ssl                       : passed
bgp-as-path-oobr-nossl ... skipped, HAVE_LIBCRYPTO is set
bgp-aigp-oobr-nossl ... skipped, HAVE_LIBCRYPTO is set
FILE: /usr/home/denis/tcpdump/tests/isis-seg-fault-1-v.tests
isis-seg-fault-1-v ... skipped, no USING_GCC
FILE: /usr/home/denis/tcpdump/tests/lmp-v.tests
lmp-v ... skipped, no USING_GCC
------------------------------------------------
   0 tests failed
 512 tests passed

Will make another round tomorrow.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,821,2020-02-03T03:04:56Z,2020-02-04T22:19:18Z,2020-02-04T23:05:09Z,MERGED,True,240,286,8,https://github.com/mcr,Testrun perl,10,[],https://github.com/the-tcpdump-group/tcpdump/pull/821,https://github.com/mcr,10,https://github.com/the-tcpdump-group/tcpdump/pull/821#issuecomment-581845834,"This code changes TESTrun to process more complex test cases by loading perl code defining an array.  This replaces the attempt to do this with YAML.pm, which would have required an additional package to run tests.","I mean it would be straightforward just to assign a variable like $test_crypto = $have_libcrypto && ! $have_capsicum; and use it in the list of test like 'when' => $test_crypto, instead of implementing an expression parser. And it would be nice to make it a few clean commits instead of exposing all the drafts.

I really don't want to write code in configuration files for tests.
I would prefer to keep the test configuration declarative, which is why I chose YAML at first.
I will be happy to rebase/merge things.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,821,2020-02-03T03:04:56Z,2020-02-04T22:19:18Z,2020-02-04T23:05:09Z,MERGED,True,240,286,8,https://github.com/mcr,Testrun perl,10,[],https://github.com/the-tcpdump-group/tcpdump/pull/821,https://github.com/mcr,11,https://github.com/the-tcpdump-group/tcpdump/pull/821#issuecomment-581846210,"This code changes TESTrun to process more complex test cases by loading perl code defining an array.  This replaces the attempt to do this with YAML.pm, which would have required an additional package to run tests.","FILE: /usr/home/denis/tcpdump/tests/crypto.tests

Is this the debug that you feel should be omitted?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,821,2020-02-03T03:04:56Z,2020-02-04T22:19:18Z,2020-02-04T23:05:09Z,MERGED,True,240,286,8,https://github.com/mcr,Testrun perl,10,[],https://github.com/the-tcpdump-group/tcpdump/pull/821,https://github.com/infrastation,12,https://github.com/the-tcpdump-group/tcpdump/pull/821#issuecomment-581850594,"This code changes TESTrun to process more complex test cases by loading perl code defining an array.  This replaces the attempt to do this with YAML.pm, which would have required an additional package to run tests.","Thank you. If the other non-indented lines are not debug, it would be nice to print them using the same format (can be fixed later though). I am going to get back to this later today.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,821,2020-02-03T03:04:56Z,2020-02-04T22:19:18Z,2020-02-04T23:05:09Z,MERGED,True,240,286,8,https://github.com/mcr,Testrun perl,10,[],https://github.com/the-tcpdump-group/tcpdump/pull/821,https://github.com/mcr,13,https://github.com/the-tcpdump-group/tcpdump/pull/821#issuecomment-581866199,"This code changes TESTrun to process more complex test cases by loading perl code defining an array.  This replaces the attempt to do this with YAML.pm, which would have required an additional package to run tests.","Thank you. If the other non-indented lines are not debug, it would be nice to print them using the same format (can be fixed later though). I am going to get back to this later today.

The FILE.. isn't exactly a debug, it is more of a section header.  I think it needs to be there to know where the tests are coming from.  I could prefix the test name with the base name of the tests if you prefer, but I think that would take more space.
So it would look like:
TESTLIST/foo
TESTLIST/bar
crypto/esp4
lmp-v/lmp-v
which I don't think will look as nice.  All easily changeable though.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,821,2020-02-03T03:04:56Z,2020-02-04T22:19:18Z,2020-02-04T23:05:09Z,MERGED,True,240,286,8,https://github.com/mcr,Testrun perl,10,[],https://github.com/the-tcpdump-group/tcpdump/pull/821,https://github.com/fxlb,14,https://github.com/the-tcpdump-group/tcpdump/pull/821#issuecomment-581875217,"This code changes TESTrun to process more complex test cases by loading perl code defining an array.  This replaces the attempt to do this with YAML.pm, which would have required an additional package to run tests.","Keeping FILE section header looks good for me.
I suggest:
    bgp-aigp-oobr-ssl                   : passed
    bgp-as-path-oobr-nossl              : skipped (HAVE_LIBCRYPTO is set)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,821,2020-02-03T03:04:56Z,2020-02-04T22:19:18Z,2020-02-04T23:05:09Z,MERGED,True,240,286,8,https://github.com/mcr,Testrun perl,10,[],https://github.com/the-tcpdump-group/tcpdump/pull/821,https://github.com/mcr,15,https://github.com/the-tcpdump-group/tcpdump/pull/821#issuecomment-581902520,"This code changes TESTrun to process more complex test cases by loading perl code defining an array.  This replaces the attempt to do this with YAML.pm, which would have required an additional package to run tests.","fxlb <notifications@github.com> wrote:
 Keeping FILE section header looks good for me.
 I suggest:
 ```
 bgp-aigp-oobr-ssl                   : passed
 bgp-as-path-oobr-nossl              : skipped (HAVE_LIBCRYPTO is set)
 ```

Done.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,822,2020-02-08T19:52:11Z,2020-02-08T21:43:34Z,2020-02-08T21:43:35Z,MERGED,True,17,0,6,https://github.com/dimmo,Print MPLS-over-UDP.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/822,https://github.com/dimmo,1,https://github.com/the-tcpdump-group/tcpdump/pull/822,"UDP Port 6635 is used (https://tools.ietf.org/html/rfc7510) for encapsulating MPLS in UDP.
This patch allows to see encapsulated packets:
$ ./tcpdump -n -r mpls-over-udp.dump 
reading from file mpls-over-udp.dump, link-type EN10MB (Ethernet), snapshot length 262144
00:10:12.233047 IP 10.100.12.170.58699 > 10.100.13.157.6635: MPLS (label 21, exp 0, [S], ttl 63) IP 10.3.0.10 > 10.1.0.10: ICMP echo request, id 42731, seq 16, length 64
00:10:12.233101 IP 10.100.13.157.51348 > 10.100.12.170.6635: MPLS (label 46, exp 0, [S], ttl 63) IP 10.1.0.10 > 10.3.0.10: ICMP echo reply, id 42731, seq 16, length 64

Instead of:
$ ./tcpdump -n -r mpls-over-udp.dump 
reading from file mpls-over-udp.dump, link-type EN10MB (Ethernet), snapshot length 262144
00:10:12.233047 IP 10.100.12.170.58699 > 10.100.13.157.6635: UDP, length 88
00:10:12.233101 IP 10.100.13.157.51348 > 10.100.12.170.6635: UDP, length 88

PS. Tcpdump already does this nice printing for MPLS-over-GRE.","UDP Port 6635 is used (https://tools.ietf.org/html/rfc7510) for encapsulating MPLS in UDP.
This patch allows to see encapsulated packets:
$ ./tcpdump -n -r mpls-over-udp.dump 
reading from file mpls-over-udp.dump, link-type EN10MB (Ethernet), snapshot length 262144
00:10:12.233047 IP 10.100.12.170.58699 > 10.100.13.157.6635: MPLS (label 21, exp 0, [S], ttl 63) IP 10.3.0.10 > 10.1.0.10: ICMP echo request, id 42731, seq 16, length 64
00:10:12.233101 IP 10.100.13.157.51348 > 10.100.12.170.6635: MPLS (label 46, exp 0, [S], ttl 63) IP 10.1.0.10 > 10.3.0.10: ICMP echo reply, id 42731, seq 16, length 64

Instead of:
$ ./tcpdump -n -r mpls-over-udp.dump 
reading from file mpls-over-udp.dump, link-type EN10MB (Ethernet), snapshot length 262144
00:10:12.233047 IP 10.100.12.170.58699 > 10.100.13.157.6635: UDP, length 88
00:10:12.233101 IP 10.100.13.157.51348 > 10.100.12.170.6635: UDP, length 88

PS. Tcpdump already does this nice printing for MPLS-over-GRE.",True,"{'THUMBS_UP': ['https://github.com/andgein', 'https://github.com/xelez']}"
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,827,2020-02-17T13:42:17Z,2020-02-17T17:15:29Z,2020-02-17T23:23:43Z,MERGED,True,1,1,1,https://github.com/NanXiao,Fix typo in tcpdump.1.in,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/827,https://github.com/NanXiao,1,https://github.com/the-tcpdump-group/tcpdump/pull/827,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,827,2020-02-17T13:42:17Z,2020-02-17T17:15:29Z,2020-02-17T23:23:43Z,MERGED,True,1,1,1,https://github.com/NanXiao,Fix typo in tcpdump.1.in,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/827,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/827#issuecomment-587159937,,On the web-site.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,828,2020-02-18T15:54:13Z,2020-02-19T10:48:27Z,2020-02-19T10:48:28Z,MERGED,True,187,1,14,https://github.com/ffatghub,Autosar SOME/IP protocol support,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/828,https://github.com/ffatghub,1,https://github.com/the-tcpdump-group/tcpdump/pull/828,"Hi, this is basic support for the Autosar SOME/IP protocol (Scalable service-Oriented MiddlewarE over IP) dissection. I am new in the automotive field, I needed a way to track down a problem in an embedded system and tcpdump printing someip packet details helped me a lot, grep-ing for service/client/session in particular. I hope I did all necessary stuff, let me know... I can work on this next week.
Ciao thank you
francesco","Hi, this is basic support for the Autosar SOME/IP protocol (Scalable service-Oriented MiddlewarE over IP) dissection. I am new in the automotive field, I needed a way to track down a problem in an embedded system and tcpdump printing someip packet details helped me a lot, grep-ing for service/client/session in particular. I hope I did all necessary stuff, let me know... I can work on this next week.
Ciao thank you
francesco",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,828,2020-02-18T15:54:13Z,2020-02-19T10:48:27Z,2020-02-19T10:48:28Z,MERGED,True,187,1,14,https://github.com/ffatghub,Autosar SOME/IP protocol support,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/828,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/828#issuecomment-587597796,"Hi, this is basic support for the Autosar SOME/IP protocol (Scalable service-Oriented MiddlewarE over IP) dissection. I am new in the automotive field, I needed a way to track down a problem in an embedded system and tcpdump printing someip packet details helped me a lot, grep-ing for service/client/session in particular. I hope I did all necessary stuff, let me know... I can work on this next week.
Ciao thank you
francesco","Use the standard C99  uintN_t types, not the u_intN_t types; that's why the build is failing on Windows.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,828,2020-02-18T15:54:13Z,2020-02-19T10:48:27Z,2020-02-19T10:48:28Z,MERGED,True,187,1,14,https://github.com/ffatghub,Autosar SOME/IP protocol support,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/828,https://github.com/ffatghub,3,https://github.com/the-tcpdump-group/tcpdump/pull/828#issuecomment-587808688,"Hi, this is basic support for the Autosar SOME/IP protocol (Scalable service-Oriented MiddlewarE over IP) dissection. I am new in the automotive field, I needed a way to track down a problem in an embedded system and tcpdump printing someip packet details helped me a lot, grep-ing for service/client/session in particular. I hope I did all necessary stuff, let me know... I can work on this next week.
Ciao thank you
francesco","Use the standard C99 uintN_t types, not the u_intN_t types; that's why the build is failing on Windows.

Hi Guy, I see, thanks. Done in cb9ed6c.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,829,2020-02-21T12:53:33Z,2020-02-24T09:55:27Z,2020-12-29T18:24:06Z,MERGED,True,797,78,6,https://github.com/fenner,Parse the IS-IS Instance Identifier TLV from RFC8202,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/829,https://github.com/fenner,1,https://github.com/the-tcpdump-group/tcpdump/pull/829,RFC8202 replaces the variable-length neighbor TLV with an Instance Identifier TLV.,RFC8202 replaces the variable-length neighbor TLV with an Instance Identifier TLV.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,829,2020-02-21T12:53:33Z,2020-02-24T09:55:27Z,2020-12-29T18:24:06Z,MERGED,True,797,78,6,https://github.com/fenner,Parse the IS-IS Instance Identifier TLV from RFC8202,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/829,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/829#issuecomment-590242553,RFC8202 replaces the variable-length neighbor TLV with an Instance Identifier TLV.,Thank you!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,830,2020-02-21T13:05:35Z,2020-02-29T18:01:21Z,2020-02-29T18:02:02Z,MERGED,True,214,0,5,https://github.com/fenner,Dispatch the PTP ethertype to ptp_print(),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/830,https://github.com/fenner,1,https://github.com/the-tcpdump-group/tcpdump/pull/830,"This implements ""IEEE 802.3/Ethernet"" mode as described in annex F of the PTP standard.  This uses the same format packets, but directly over Ethernet instead of encapsulated in UDP.","This implements ""IEEE 802.3/Ethernet"" mode as described in annex F of the PTP standard.  This uses the same format packets, but directly over Ethernet instead of encapsulated in UDP.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,830,2020-02-21T13:05:35Z,2020-02-29T18:01:21Z,2020-02-29T18:02:02Z,MERGED,True,214,0,5,https://github.com/fenner,Dispatch the PTP ethertype to ptp_print(),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/830,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/830#issuecomment-592521043,"This implements ""IEEE 802.3/Ethernet"" mode as described in annex F of the PTP standard.  This uses the same format packets, but directly over Ethernet instead of encapsulated in UDP.","This implements ""IEEE 802.3/Ethernet"" mode as described in annex F of the PTP standard. This uses the same format packets, but directly over Ethernet instead of encapsulated in UDP.

I suggest your comment be added in the commit message body.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,830,2020-02-21T13:05:35Z,2020-02-29T18:01:21Z,2020-02-29T18:02:02Z,MERGED,True,214,0,5,https://github.com/fenner,Dispatch the PTP ethertype to ptp_print(),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/830,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/830#issuecomment-592943885,"This implements ""IEEE 802.3/Ethernet"" mode as described in annex F of the PTP standard.  This uses the same format packets, but directly over Ethernet instead of encapsulated in UDP.","Please, rebase on top of the-tcpdump-group:master (there were some recent fixes on print-ptp.c).
Also tests/ptp_ethernet.out will require an update.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,830,2020-02-21T13:05:35Z,2020-02-29T18:01:21Z,2020-02-29T18:02:02Z,MERGED,True,214,0,5,https://github.com/fenner,Dispatch the PTP ethertype to ptp_print(),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/830,https://github.com/fenner,4,https://github.com/the-tcpdump-group/tcpdump/pull/830#issuecomment-592954500,"This implements ""IEEE 802.3/Ethernet"" mode as described in annex F of the PTP standard.  This uses the same format packets, but directly over Ethernet instead of encapsulated in UDP.","This implements ""IEEE 802.3/Ethernet"" mode as described in annex F of the PTP standard. This uses the same format packets, but directly over Ethernet instead of encapsulated in UDP.

I suggest your comment be added in the commit message body.

ok.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,830,2020-02-21T13:05:35Z,2020-02-29T18:01:21Z,2020-02-29T18:02:02Z,MERGED,True,214,0,5,https://github.com/fenner,Dispatch the PTP ethertype to ptp_print(),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/830,https://github.com/fxlb,5,https://github.com/the-tcpdump-group/tcpdump/pull/830#issuecomment-592974734,"This implements ""IEEE 802.3/Ethernet"" mode as described in annex F of the PTP standard.  This uses the same format packets, but directly over Ethernet instead of encapsulated in UDP.",Thank you!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,832,2020-02-26T19:45:04Z,2020-02-27T01:25:16Z,2020-02-27T01:25:59Z,CLOSED,False,79,30,6,https://github.com/pkrystad,mptcp: Add support for parsing v1 suboptions,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/832,https://github.com/pkrystad,1,https://github.com/the-tcpdump-group/tcpdump/pull/832,"RFC6824bis-18 (MPTCP version 1) makes changes to the MPTCP
option formats.
For the MP_CAPABLE option neither key is sent on the SYN, and
the final ACK may include data payload.
For the ADD_ADDR option the IP version field is removed and
replaced with an Echo bit that provides a reliability mechanism.
This change allows either v0 or v1 MP_CAPABLE and ADD_ADDR options
to be parsed and displayed correctly.","RFC6824bis-18 (MPTCP version 1) makes changes to the MPTCP
option formats.
For the MP_CAPABLE option neither key is sent on the SYN, and
the final ACK may include data payload.
For the ADD_ADDR option the IP version field is removed and
replaced with an Echo bit that provides a reliability mechanism.
This change allows either v0 or v1 MP_CAPABLE and ADD_ADDR options
to be parsed and displayed correctly.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,833,2020-02-27T21:07:15Z,2020-03-02T10:26:31Z,2021-05-17T17:28:33Z,MERGED,True,53,15,4,https://github.com/pkrystad,MPTCP: parse v1 ADD_ADDR option,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/833,https://github.com/pkrystad,1,https://github.com/the-tcpdump-group/tcpdump/pull/833,"RFC6824bis-18 (MPTCP version 1) makes changes to the MPTCP
ADD_ADDR option format.
An HMAC field is added to the option and the IP version field is
removed and replaced with an Echo bit that provides a reliability
mechanism.
This change allows either v0 or v1 ADD_ADDR options
to be parsed and displayed correctly.
Signed-off-by: Peter Krystad peter.krystad@linux.intel.com","RFC6824bis-18 (MPTCP version 1) makes changes to the MPTCP
ADD_ADDR option format.
An HMAC field is added to the option and the IP version field is
removed and replaced with an Echo bit that provides a reliability
mechanism.
This change allows either v0 or v1 ADD_ADDR options
to be parsed and displayed correctly.
Signed-off-by: Peter Krystad peter.krystad@linux.intel.com",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,833,2020-02-27T21:07:15Z,2020-03-02T10:26:31Z,2021-05-17T17:28:33Z,MERGED,True,53,15,4,https://github.com/pkrystad,MPTCP: parse v1 ADD_ADDR option,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/833,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/833#issuecomment-593331990,"RFC6824bis-18 (MPTCP version 1) makes changes to the MPTCP
ADD_ADDR option format.
An HMAC field is added to the option and the IP version field is
removed and replaced with an Echo bit that provides a reliability
mechanism.
This change allows either v0 or v1 ADD_ADDR options
to be parsed and displayed correctly.
Signed-off-by: Peter Krystad peter.krystad@linux.intel.com","Merged, thank you!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,836,2020-02-29T03:04:26Z,2020-04-23T08:27:10Z,2020-04-23T08:27:10Z,CLOSED,False,17,0,1,None,Create main.yml,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/836,None,1,https://github.com/the-tcpdump-group/tcpdump/pull/836,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,836,2020-02-29T03:04:26Z,2020-04-23T08:27:10Z,2020-04-23T08:27:10Z,CLOSED,False,17,0,1,None,Create main.yml,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/836,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/836#issuecomment-592837833,,"Which CI system is this intended for?  We already have .appveyor.yml, .cirrus.yml, and .travis.yml.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,836,2020-02-29T03:04:26Z,2020-04-23T08:27:10Z,2020-04-23T08:27:10Z,CLOSED,False,17,0,1,None,Create main.yml,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/836,https://github.com/guyharris,3,https://github.com/the-tcpdump-group/tcpdump/pull/836#issuecomment-592840759,,"Which CI system is this intended for? We already have .appveyor.yml, .cirrus.yml, and .travis.yml.

Ansible?  If so, this looks like a template or a stub; why not just check in what's intended to be the final version?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,836,2020-02-29T03:04:26Z,2020-04-23T08:27:10Z,2020-04-23T08:27:10Z,CLOSED,False,17,0,1,None,Create main.yml,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/836,https://github.com/fxlb,4,https://github.com/the-tcpdump-group/tcpdump/pull/836#issuecomment-618258882,,"Account deleted, closing.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,837,2020-02-29T22:46:20Z,2020-03-01T04:33:42Z,2020-03-01T04:33:42Z,MERGED,True,0,5,1,https://github.com/rscheff,Remove historic ECN definitions from IPv6,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/837,https://github.com/rscheff,1,https://github.com/the-tcpdump-group/tcpdump/pull/837,"ipv6.h still carries some unused, historic ECN references.
These are incompatible with the ECN signaling adopted by
IETF for both IPv4 and IPv6.
Fortunately, these references are nowhere used. Removing
these definitions should keep it this way in the future.
See also  https://reviews.freebsd.org/D23903","ipv6.h still carries some unused, historic ECN references.
These are incompatible with the ECN signaling adopted by
IETF for both IPv4 and IPv6.
Fortunately, these references are nowhere used. Removing
these definitions should keep it this way in the future.
See also  https://reviews.freebsd.org/D23903",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,838,2020-02-29T23:16:34Z,2021-11-28T16:07:58Z,2021-11-28T16:08:44Z,CLOSED,False,53,43,5,https://github.com/mcr,"move packets_captured out of arguments, and into netdissect_options",2,[],https://github.com/the-tcpdump-group/tcpdump/pull/838,https://github.com/mcr,1,https://github.com/the-tcpdump-group/tcpdump/pull/838,"This minor bit of cleanup moves the packets_captured variable into the ndo structure.
Unfortunately, this requires that the ndo structure be available globally for the signal handler to be able to call info().  It's not clear that we should really be doing that much work in a signal handler, but we do that already, so I did not change that.
Fundamentally, I made this change so make it easier to call pretty_print_packet() from other contexts (in patches still coming).","This minor bit of cleanup moves the packets_captured variable into the ndo structure.
Unfortunately, this requires that the ndo structure be available globally for the signal handler to be able to call info().  It's not clear that we should really be doing that much work in a signal handler, but we do that already, so I did not change that.
Fundamentally, I made this change so make it easier to call pretty_print_packet() from other contexts (in patches still coming).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,838,2020-02-29T23:16:34Z,2021-11-28T16:07:58Z,2021-11-28T16:08:44Z,CLOSED,False,53,43,5,https://github.com/mcr,"move packets_captured out of arguments, and into netdissect_options",2,[],https://github.com/the-tcpdump-group/tcpdump/pull/838,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/838#issuecomment-593005682,"This minor bit of cleanup moves the packets_captured variable into the ndo structure.
Unfortunately, this requires that the ndo structure be available globally for the signal handler to be able to call info().  It's not clear that we should really be doing that much work in a signal handler, but we do that already, so I did not change that.
Fundamentally, I made this change so make it easier to call pretty_print_packet() from other contexts (in patches still coming).","Fundamentally, I made this change so make it easier to call pretty_print_packet() from other contexts (in patches still coming).

So this is useful even if we change the code not to call info() in a signal handler, e.g. if we use a loop with pcap_dispatch(), have the signal handler call pcap_breakloop() and set a ""please print statistics"" flag, and, after pcap_dispatch() returns in the loop, check that flag and, if set, clear it and call info()?",True,{'THUMBS_UP': ['https://github.com/mcr']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,838,2020-02-29T23:16:34Z,2021-11-28T16:07:58Z,2021-11-28T16:08:44Z,CLOSED,False,53,43,5,https://github.com/mcr,"move packets_captured out of arguments, and into netdissect_options",2,[],https://github.com/the-tcpdump-group/tcpdump/pull/838,https://github.com/guyharris,3,https://github.com/the-tcpdump-group/tcpdump/pull/838#issuecomment-593048572,"This minor bit of cleanup moves the packets_captured variable into the ndo structure.
Unfortunately, this requires that the ndo structure be available globally for the signal handler to be able to call info().  It's not clear that we should really be doing that much work in a signal handler, but we do that already, so I did not change that.
Fundamentally, I made this change so make it easier to call pretty_print_packet() from other contexts (in patches still coming).","Fundamentally, I made this change so make it easier to call pretty_print_packet() from other contexts (in patches still coming).

So this is useful even if we change the code not to call info() in a signal handler, e.g. if we use a loop with pcap_dispatch(), have the signal handler call pcap_breakloop() and set a ""please print statistics"" flag, and, after pcap_dispatch() returns in the loop, check that flag and, if set, clear it and call info()?

AAAAAAAAAAAAAAAAAAAAAAAAAArgh pcap_breakoop() can lose the race:
pcap_dispatch()/pcap_loop()/etc. is in the middle of the read routine and has already checked the ""break out of the loop"" flag internal to pcap, and it's not set.
Signal comes in at time T1; the handler sets the ""break out of the loop"" flag, and returns.
The read routine continues, lands in the read/receive/whatever call to read more packets, and blocks.  It's not interrupted out of that, because the signal has already happened.
This means that, with my ""print the ^T information in the capture loop"" suggestion, the message might not be printed until the buffer timeout expires, which could be as much as 1 second.  This is noticeable.
I think there are tricks I can do to fix that (involving temporarily turning non-blocking mode on in pcap_breakloop(), in cases where it's necessary), but it's probably not appropriate to rely on it.  Perhaps only doing that with libpcap 1.10 or later, when it comes out, will do it.",True,{'HEART': ['https://github.com/mcr']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,838,2020-02-29T23:16:34Z,2021-11-28T16:07:58Z,2021-11-28T16:08:44Z,CLOSED,False,53,43,5,https://github.com/mcr,"move packets_captured out of arguments, and into netdissect_options",2,[],https://github.com/the-tcpdump-group/tcpdump/pull/838,https://github.com/fxlb,4,https://github.com/the-tcpdump-group/tcpdump/pull/838#issuecomment-593064318,"This minor bit of cleanup moves the packets_captured variable into the ndo structure.
Unfortunately, this requires that the ndo structure be available globally for the signal handler to be able to call info().  It's not clear that we should really be doing that much work in a signal handler, but we do that already, so I did not change that.
Fundamentally, I made this change so make it easier to call pretty_print_packet() from other contexts (in patches still coming).","Unfortunately, this requires that the ndo structure be available globally

In 2015 Brooks Davis works to disentangle libnetdissect from tcpdump to allows
libnetdissect to be more easily sandboxed. (see 115a063).
One of the result was to remove the global ndo.
Should have ndo structure be available globally again a regression in security?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,838,2020-02-29T23:16:34Z,2021-11-28T16:07:58Z,2021-11-28T16:08:44Z,CLOSED,False,53,43,5,https://github.com/mcr,"move packets_captured out of arguments, and into netdissect_options",2,[],https://github.com/the-tcpdump-group/tcpdump/pull/838,https://github.com/mcr,5,https://github.com/the-tcpdump-group/tcpdump/pull/838#issuecomment-593457959,"This minor bit of cleanup moves the packets_captured variable into the ndo structure.
Unfortunately, this requires that the ndo structure be available globally for the signal handler to be able to call info().  It's not clear that we should really be doing that much work in a signal handler, but we do that already, so I did not change that.
Fundamentally, I made this change so make it easier to call pretty_print_packet() from other contexts (in patches still coming).","Fundamentally, I made this change so make it easier to call pretty_print_packet() from other contexts (in patches still coming).

So this is useful even if we change the code not to call info() in a signal handler, e.g. if we use a loop with pcap_dispatch(), have the signal handler call pcap_breakloop() and set a ""please print statistics"" flag, and, after pcap_dispatch() returns in the loop, check that flag and, if set, clear it and call info()?

I can do this work, noted in #840. Clearly we need a pcap_dispatch()/breakloop that works better.
I suggest we do this as separate work.
I agree with the dis-intanglement work, and I am trying to take this further.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,838,2020-02-29T23:16:34Z,2021-11-28T16:07:58Z,2021-11-28T16:08:44Z,CLOSED,False,53,43,5,https://github.com/mcr,"move packets_captured out of arguments, and into netdissect_options",2,[],https://github.com/the-tcpdump-group/tcpdump/pull/838,https://github.com/mcr,6,https://github.com/the-tcpdump-group/tcpdump/pull/838#issuecomment-593463287,"This minor bit of cleanup moves the packets_captured variable into the ndo structure.
Unfortunately, this requires that the ndo structure be available globally for the signal handler to be able to call info().  It's not clear that we should really be doing that much work in a signal handler, but we do that already, so I did not change that.
Fundamentally, I made this change so make it easier to call pretty_print_packet() from other contexts (in patches still coming).","Fundamentally, I made this change so make it easier to call pretty_print_packet() from other contexts (in patches still coming).

So this is useful even if we change the code not to call info() in a signal handler, e.g. if we use a loop with pcap_dispatch(), have the signal handler call pcap_breakloop() and set a ""please print statistics"" flag, and, after pcap_dispatch() returns in the loop, check that flag and, if set, clear it and call info()?

AAAAAAAAAAAAAAAAAAAAAAAAAArgh pcap_breakoop() can lose the race:

Where did you propose that it be called?
We need a handle, and if we want to avoid global handles for pcap_t * into the signal handler, then the signal handler needs to set a single global flag, and we need to breakloop() in the application (callback) code.
Does this change the race condition?

This means that, with my ""print the ^T information in the capture loop"" suggestion, the message might not be printed until the buffer timeout expires, which could be as much as 1 second. This is noticeable.

Annoying.

I think there are tricks I can do to fix that (involving temporarily turning non-blocking mode on in pcap_breakloop(), in cases where it's necessary), but it's probably not appropriate to rely on it. Perhaps only doing that with libpcap 1.10 or later, when it comes out, will do it.

I'm okay with this.  Let's move this to #840 .",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,838,2020-02-29T23:16:34Z,2021-11-28T16:07:58Z,2021-11-28T16:08:44Z,CLOSED,False,53,43,5,https://github.com/mcr,"move packets_captured out of arguments, and into netdissect_options",2,[],https://github.com/the-tcpdump-group/tcpdump/pull/838,https://github.com/infrastation,7,https://github.com/the-tcpdump-group/tcpdump/pull/838#issuecomment-968311987,"This minor bit of cleanup moves the packets_captured variable into the ndo structure.
Unfortunately, this requires that the ndo structure be available globally for the signal handler to be able to call info().  It's not clear that we should really be doing that much work in a signal handler, but we do that already, so I did not change that.
Fundamentally, I made this change so make it easier to call pretty_print_packet() from other contexts (in patches still coming).","It is still not clear what the practical use case for these changes is, and why it involves changing TESTrun. From the pull request comments and the remaining indentation discrepancies it seems these changes are not ready for merging. Unless anyone is willing to address these issues, this pull request will be closed in 14 days and the branch will be moved to the incomplete works repository.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,838,2020-02-29T23:16:34Z,2021-11-28T16:07:58Z,2021-11-28T16:08:44Z,CLOSED,False,53,43,5,https://github.com/mcr,"move packets_captured out of arguments, and into netdissect_options",2,[],https://github.com/the-tcpdump-group/tcpdump/pull/838,https://github.com/infrastation,8,https://github.com/the-tcpdump-group/tcpdump/pull/838#issuecomment-981110330,"This minor bit of cleanup moves the packets_captured variable into the ndo structure.
Unfortunately, this requires that the ndo structure be available globally for the signal handler to be able to call info().  It's not clear that we should really be doing that much work in a signal handler, but we do that already, so I did not change that.
Fundamentally, I made this change so make it easier to call pretty_print_packet() from other contexts (in patches still coming).",It is time. The draft branch has been moved to the-tcpdump-group/tcpdump-incomplete-works/mcr-move-packets-captured-to-ndo.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,839,2020-02-29T23:28:25Z,2021-11-14T15:06:10Z,2021-11-14T15:07:07Z,CLOSED,False,82,53,5,https://github.com/mcr,Additional changes to TESTrun,11,[],https://github.com/the-tcpdump-group/tcpdump/pull/839,https://github.com/mcr,1,https://github.com/the-tcpdump-group/tcpdump/pull/839,"These changes normalize some of the internal processing, also allowing a program other then ""tcpdump"" to be what is used to run the tests.  This is part of background to introducing another main() function as ""pktdump"", patches to come.","These changes normalize some of the internal processing, also allowing a program other then ""tcpdump"" to be what is used to run the tests.  This is part of background to introducing another main() function as ""pktdump"", patches to come.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,839,2020-02-29T23:28:25Z,2021-11-14T15:06:10Z,2021-11-14T15:07:07Z,CLOSED,False,82,53,5,https://github.com/mcr,Additional changes to TESTrun,11,[],https://github.com/the-tcpdump-group/tcpdump/pull/839,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/839#issuecomment-673479388,"These changes normalize some of the internal processing, also allowing a program other then ""tcpdump"" to be what is used to run the tests.  This is part of background to introducing another main() function as ""pktdump"", patches to come.","Please mind that the title of this pull request is ""Additional changes to TESTrun"", but the very first commit makes changes to a number of .c and .h files and fails 50% of the Travis build jobs. Also it is for the ""move-packets-captured-to-ndo"" branch, which I do not recognize. If that's a temporary work in progress branch, it should not be in the main repository, and should not require any pull requests. If that's a permanent branch, what is it?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,839,2020-02-29T23:28:25Z,2021-11-14T15:06:10Z,2021-11-14T15:07:07Z,CLOSED,False,82,53,5,https://github.com/mcr,Additional changes to TESTrun,11,[],https://github.com/the-tcpdump-group/tcpdump/pull/839,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/839#issuecomment-968307995,"These changes normalize some of the internal processing, also allowing a program other then ""tcpdump"" to be what is used to run the tests.  This is part of background to introducing another main() function as ""pktdump"", patches to come.","This work in progress tcpdump/additional-changes-to-testrun branch has been in the upstream repository for quite a while. It is still not ready for merging, so I have moved it to tcpdump-incomplete-works/mcr-additional-changes-to-testrun, this way it can be completed later.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,843,2020-04-02T06:42:44Z,2020-04-02T16:56:39Z,2021-05-17T17:27:48Z,CLOSED,False,563,0,10,https://github.com/hannesgredler,add support for Broadcom Lawful Intercept header,9,[],https://github.com/the-tcpdump-group/tcpdump/pull/843,https://github.com/hannesgredler,1,https://github.com/the-tcpdump-group/tcpdump/pull/843,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,843,2020-04-02T06:42:44Z,2020-04-02T16:56:39Z,2021-05-17T17:27:48Z,CLOSED,False,563,0,10,https://github.com/hannesgredler,add support for Broadcom Lawful Intercept header,9,[],https://github.com/the-tcpdump-group/tcpdump/pull/843,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/843#issuecomment-607678170,,"Unlike Wireshark, we're still supporting both autotools and CMake, so you need to update Makefile.in by adding print-bcm-li.c to the list in LIBNETDISSECT_SRC.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,843,2020-04-02T06:42:44Z,2020-04-02T16:56:39Z,2021-05-17T17:27:48Z,CLOSED,False,563,0,10,https://github.com/hannesgredler,add support for Broadcom Lawful Intercept header,9,[],https://github.com/the-tcpdump-group/tcpdump/pull/843,https://github.com/hannesgredler,3,https://github.com/the-tcpdump-group/tcpdump/pull/843#issuecomment-607685808,,Thanks Guy - fixed.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,843,2020-04-02T06:42:44Z,2020-04-02T16:56:39Z,2021-05-17T17:27:48Z,CLOSED,False,563,0,10,https://github.com/hannesgredler,add support for Broadcom Lawful Intercept header,9,[],https://github.com/the-tcpdump-group/tcpdump/pull/843,https://github.com/fxlb,4,https://github.com/the-tcpdump-group/tcpdump/pull/843#issuecomment-607708900,,"The function is defined ""u_int bcm_li_print()"" but the return value is not used.
Should it be defined ""void bcm_li_print()"" ?


Could you add a test capture file in tests/ directory ?


Trailing tabs in lines 74 and 95.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,843,2020-04-02T06:42:44Z,2020-04-02T16:56:39Z,2021-05-17T17:27:48Z,CLOSED,False,563,0,10,https://github.com/hannesgredler,add support for Broadcom Lawful Intercept header,9,[],https://github.com/the-tcpdump-group/tcpdump/pull/843,https://github.com/hannesgredler,5,https://github.com/the-tcpdump-group/tcpdump/pull/843#issuecomment-607741394,,Thanks - review comments pushed;,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,843,2020-04-02T06:42:44Z,2020-04-02T16:56:39Z,2021-05-17T17:27:48Z,CLOSED,False,563,0,10,https://github.com/hannesgredler,add support for Broadcom Lawful Intercept header,9,[],https://github.com/the-tcpdump-group/tcpdump/pull/843,https://github.com/fxlb,6,https://github.com/the-tcpdump-group/tcpdump/pull/843#issuecomment-607751061,,"Thanks, I suggest this patch to have output references, with the bcm-li.out and bcm-li-v.out built via
./update-test.sh bcm-li and ./update-test.sh bcm-li-v
diff --git a/tests/TESTLIST b/tests/TESTLIST
index 150effb9..6f79ad6f 100644
--- a/tests/TESTLIST
+++ b/tests/TESTLIST
@@ -39,6 +39,10 @@ brcmtag		brcm-tag.pcap		brcm-tag.out
 brcmtag-e	brcm-tag.pcap		brcm-tag-e.out	-e
 brcmtagprepend	brcm-tag-prepend.pcap	brcm-tag-prepend.out -e
 
+# Broadcom LI
+bcm-li bcm-li.pcap bcm-li.out
+bcm-li-v bcm-li.pcap bcm-li-v.out -v
+
 # Marvell DSA tag tests
 dsa		dsa.pcap		dsa.out
 dsa-e		dsa.pcap		dsa-e.out	-e",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,843,2020-04-02T06:42:44Z,2020-04-02T16:56:39Z,2021-05-17T17:27:48Z,CLOSED,False,563,0,10,https://github.com/hannesgredler,add support for Broadcom Lawful Intercept header,9,[],https://github.com/the-tcpdump-group/tcpdump/pull/843,https://github.com/hannesgredler,7,https://github.com/the-tcpdump-group/tcpdump/pull/843#issuecomment-607753457,,thanks - added;,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,843,2020-04-02T06:42:44Z,2020-04-02T16:56:39Z,2021-05-17T17:27:48Z,CLOSED,False,563,0,10,https://github.com/hannesgredler,add support for Broadcom Lawful Intercept header,9,[],https://github.com/the-tcpdump-group/tcpdump/pull/843,https://github.com/fxlb,8,https://github.com/the-tcpdump-group/tcpdump/pull/843#issuecomment-607839564,,"@hannesgredler
Do you want to keep your PR like it is or to rebase it to have only one commit with git rebase -i HEAD~7 using fixup or squash for the commits following the first one ?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,843,2020-04-02T06:42:44Z,2020-04-02T16:56:39Z,2021-05-17T17:27:48Z,CLOSED,False,563,0,10,https://github.com/hannesgredler,add support for Broadcom Lawful Intercept header,9,[],https://github.com/the-tcpdump-group/tcpdump/pull/843,https://github.com/hannesgredler,9,https://github.com/the-tcpdump-group/tcpdump/pull/843#issuecomment-607926413,,rebased and squashed.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,843,2020-04-02T06:42:44Z,2020-04-02T16:56:39Z,2021-05-17T17:27:48Z,CLOSED,False,563,0,10,https://github.com/hannesgredler,add support for Broadcom Lawful Intercept header,9,[],https://github.com/the-tcpdump-group/tcpdump/pull/843,https://github.com/fxlb,10,https://github.com/the-tcpdump-group/tcpdump/pull/843#issuecomment-607967423,,"Rebased, merged, thank you !",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,844,2020-04-03T07:51:11Z,2020-04-03T10:09:16Z,2020-04-03T10:09:16Z,CLOSED,False,175,6,4,https://github.com/hannesgredler,add support for IS-IS Segment routing (Prefix/Node SIDs) as per RFC 8667,13,[],https://github.com/the-tcpdump-group/tcpdump/pull/844,https://github.com/hannesgredler,1,https://github.com/the-tcpdump-group/tcpdump/pull/844,"This is is to support for Node and Prefix SIDs in IS-IS.
Also add support for a general subTLV parser to the router-CAP TLV
Please review also the nested subTLV logic for buffer overruns.
Thinks should be relatively robust, but second ball of eyes never hurts ;
thanks,
/hannes","This is is to support for Node and Prefix SIDs in IS-IS.
Also add support for a general subTLV parser to the router-CAP TLV
Please review also the nested subTLV logic for buffer overruns.
Thinks should be relatively robust, but second ball of eyes never hurts ;
thanks,
/hannes",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,844,2020-04-03T07:51:11Z,2020-04-03T10:09:16Z,2020-04-03T10:09:16Z,CLOSED,False,175,6,4,https://github.com/hannesgredler,add support for IS-IS Segment routing (Prefix/Node SIDs) as per RFC 8667,13,[],https://github.com/the-tcpdump-group/tcpdump/pull/844,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/844#issuecomment-608289290,"This is is to support for Node and Prefix SIDs in IS-IS.
Also add support for a general subTLV parser to the router-CAP TLV
Please review also the nested subTLV logic for buffer overruns.
Thinks should be relatively robust, but second ball of eyes never hurts ;
thanks,
/hannes","There is a problem: This PR must be on top of  the-tcpdump-group:master. Github shows 13 commits mixing with commits of PR 843 and display ""This branch cannot be rebased due to conflicts"".",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,844,2020-04-03T07:51:11Z,2020-04-03T10:09:16Z,2020-04-03T10:09:16Z,CLOSED,False,175,6,4,https://github.com/hannesgredler,add support for IS-IS Segment routing (Prefix/Node SIDs) as per RFC 8667,13,[],https://github.com/the-tcpdump-group/tcpdump/pull/844,https://github.com/hannesgredler,3,https://github.com/the-tcpdump-group/tcpdump/pull/844#issuecomment-608350934,"This is is to support for Node and Prefix SIDs in IS-IS.
Also add support for a general subTLV parser to the router-CAP TLV
Please review also the nested subTLV logic for buffer overruns.
Thinks should be relatively robust, but second ball of eyes never hurts ;
thanks,
/hannes",submitted a fresh one.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,845,2020-04-03T10:06:29Z,2020-04-07T09:02:22Z,2021-05-17T17:26:45Z,CLOSED,False,202,24,6,https://github.com/hannesgredler,Add support for IS-IS Node/Prefix SIDs as per rfc 8667,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/845,https://github.com/hannesgredler,1,https://github.com/the-tcpdump-group/tcpdump/pull/845,This time patch applied to a clean fork of upstream. sorry for the inconvenience.,This time patch applied to a clean fork of upstream. sorry for the inconvenience.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,845,2020-04-03T10:06:29Z,2020-04-07T09:02:22Z,2021-05-17T17:26:45Z,CLOSED,False,202,24,6,https://github.com/hannesgredler,Add support for IS-IS Node/Prefix SIDs as per rfc 8667,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/845,https://github.com/hannesgredler,2,https://github.com/the-tcpdump-group/tcpdump/pull/845#issuecomment-608424606,This time patch applied to a clean fork of upstream. sorry for the inconvenience.,What is this appveyor check doing ? - it complains about errors vs. stock gcc passes just fine.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,845,2020-04-03T10:06:29Z,2020-04-07T09:02:22Z,2021-05-17T17:26:45Z,CLOSED,False,202,24,6,https://github.com/hannesgredler,Add support for IS-IS Node/Prefix SIDs as per rfc 8667,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/845,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/845#issuecomment-608441900,This time patch applied to a clean fork of upstream. sorry for the inconvenience.,"uint type seems unkown for some reason: error C2065: 'uint': undeclared identifier.
You should try: s/uint/u_int/.
$ git grep -n '\<uint\>'
print-isoclns.c:1906:       uint sid;
print-isoclns.c:2335:isis_print_router_cap_subtlv(netdissect_options *ndo, const uint8_t *tptr, uint tlen)
print-isoclns.c:2363:           uint range, sid;",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,845,2020-04-03T10:06:29Z,2020-04-07T09:02:22Z,2021-05-17T17:26:45Z,CLOSED,False,202,24,6,https://github.com/hannesgredler,Add support for IS-IS Node/Prefix SIDs as per rfc 8667,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/845,https://github.com/hannesgredler,4,https://github.com/the-tcpdump-group/tcpdump/pull/845#issuecomment-608469556,This time patch applied to a clean fork of upstream. sorry for the inconvenience.,"ok, replaced;",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,845,2020-04-03T10:06:29Z,2020-04-07T09:02:22Z,2021-05-17T17:26:45Z,CLOSED,False,202,24,6,https://github.com/hannesgredler,Add support for IS-IS Node/Prefix SIDs as per rfc 8667,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/845,https://github.com/guyharris,5,https://github.com/the-tcpdump-group/tcpdump/pull/845#issuecomment-608541409,This time patch applied to a clean fork of upstream. sorry for the inconvenience.,"What is this appveyor check doing ? - it complains about errors vs. stock gcc passes just fine.

It complains about builds on Windows with MSVC vs. stock GCC - on UN*X? - passes just fine.
Not every development environment defines a uint type.  For the current master branch, however, all the C99 uintN_t (and intN_t) types are guaranteed to be defined.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,845,2020-04-03T10:06:29Z,2020-04-07T09:02:22Z,2021-05-17T17:26:45Z,CLOSED,False,202,24,6,https://github.com/hannesgredler,Add support for IS-IS Node/Prefix SIDs as per rfc 8667,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/845,https://github.com/fxlb,6,https://github.com/the-tcpdump-group/tcpdump/pull/845#issuecomment-609632830,This time patch applied to a clean fork of upstream. sorry for the inconvenience.,"Some issue(s) :
https://travis-ci.org/github/the-tcpdump-group/tcpdump/builds/670602725?utm_source=github_status",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,845,2020-04-03T10:06:29Z,2020-04-07T09:02:22Z,2021-05-17T17:26:45Z,CLOSED,False,202,24,6,https://github.com/hannesgredler,Add support for IS-IS Node/Prefix SIDs as per rfc 8667,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/845,https://github.com/fxlb,7,https://github.com/the-tcpdump-group/tcpdump/pull/845#issuecomment-610268020,This time patch applied to a clean fork of upstream. sorry for the inconvenience.,"Rebased in one commit, merged, thank you !",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,845,2020-04-03T10:06:29Z,2020-04-07T09:02:22Z,2021-05-17T17:26:45Z,CLOSED,False,202,24,6,https://github.com/hannesgredler,Add support for IS-IS Node/Prefix SIDs as per rfc 8667,4,[],https://github.com/the-tcpdump-group/tcpdump/pull/845,https://github.com/hannesgredler,8,https://github.com/the-tcpdump-group/tcpdump/pull/845#issuecomment-610291005,This time patch applied to a clean fork of upstream. sorry for the inconvenience.,Thanks Francois-Xavier !,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,850,2020-05-08T12:14:35Z,2020-05-08T20:59:30Z,2021-05-17T17:26:05Z,MERGED,True,10,1,1,https://github.com/fxlb,"Set default linktype LINUX_SLL2 when capturing on the ""any"" device",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/850,https://github.com/fxlb,1,https://github.com/the-tcpdump-group/tcpdump/pull/850,"[Request for comments]
I propose to set the default linktype to LINUX_SLL2 when capturing on the ""any"" device.
(if available in libpcap)
It gives useful informations: interface name, in/out with '-e' option.
libpcap support since 1.9.1 version.
The printing is currently not supported in release 4.9.3.
Already asked on the mailing list.
No one said ""no"".","[Request for comments]
I propose to set the default linktype to LINUX_SLL2 when capturing on the ""any"" device.
(if available in libpcap)
It gives useful informations: interface name, in/out with '-e' option.
libpcap support since 1.9.1 version.
The printing is currently not supported in release 4.9.3.
Already asked on the mailing list.
No one said ""no"".",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,850,2020-05-08T12:14:35Z,2020-05-08T20:59:30Z,2021-05-17T17:26:05Z,MERGED,True,10,1,1,https://github.com/fxlb,"Set default linktype LINUX_SLL2 when capturing on the ""any"" device",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/850,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/850#issuecomment-625794983,"[Request for comments]
I propose to set the default linktype to LINUX_SLL2 when capturing on the ""any"" device.
(if available in libpcap)
It gives useful informations: interface name, in/out with '-e' option.
libpcap support since 1.9.1 version.
The printing is currently not supported in release 4.9.3.
Already asked on the mailing list.
No one said ""no"".",cc @pevik,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,850,2020-05-08T12:14:35Z,2020-05-08T20:59:30Z,2021-05-17T17:26:05Z,MERGED,True,10,1,1,https://github.com/fxlb,"Set default linktype LINUX_SLL2 when capturing on the ""any"" device",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/850,https://github.com/guyharris,3,https://github.com/the-tcpdump-group/tcpdump/pull/850#issuecomment-625927182,"[Request for comments]
I propose to set the default linktype to LINUX_SLL2 when capturing on the ""any"" device.
(if available in libpcap)
It gives useful informations: interface name, in/out with '-e' option.
libpcap support since 1.9.1 version.
The printing is currently not supported in release 4.9.3.
Already asked on the mailing list.
No one said ""no"".","Why not just make it the default in libpcap?  Tcpdump and Wireshark both have an option to override the default - -y on the command line, and a combo box in the GUI.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,850,2020-05-08T12:14:35Z,2020-05-08T20:59:30Z,2021-05-17T17:26:05Z,MERGED,True,10,1,1,https://github.com/fxlb,"Set default linktype LINUX_SLL2 when capturing on the ""any"" device",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/850,https://github.com/fxlb,4,https://github.com/the-tcpdump-group/tcpdump/pull/850#issuecomment-625937894,"[Request for comments]
I propose to set the default linktype to LINUX_SLL2 when capturing on the ""any"" device.
(if available in libpcap)
It gives useful informations: interface name, in/out with '-e' option.
libpcap support since 1.9.1 version.
The printing is currently not supported in release 4.9.3.
Already asked on the mailing list.
No one said ""no"".","Why not ...
Could other project not supporting LINUX_SLL2 be broken ?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,850,2020-05-08T12:14:35Z,2020-05-08T20:59:30Z,2021-05-17T17:26:05Z,MERGED,True,10,1,1,https://github.com/fxlb,"Set default linktype LINUX_SLL2 when capturing on the ""any"" device",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/850,https://github.com/guyharris,5,https://github.com/the-tcpdump-group/tcpdump/pull/850#issuecomment-625942510,"[Request for comments]
I propose to set the default linktype to LINUX_SLL2 when capturing on the ""any"" device.
(if available in libpcap)
It gives useful informations: interface name, in/out with '-e' option.
libpcap support since 1.9.1 version.
The printing is currently not supported in release 4.9.3.
Already asked on the mailing list.
No one said ""no"".","Could other project not supporting LINUX_SLL2 be broken ?

If those projects work like tcpdump, they will immediately fail as soon as they see a DLT_ value they don't support, and will allow one of the alternate link-layer types to be selected when capturing.
If they don't, they should be fixed to do so.  (And, yes, that includes Wireshark.  I'll see whether the ""immediately fail"" part for TShark - and whether it will even refuse to offer LINUX_SLL2 via the GUI - happen, and fix it if not.  The next step is to add LINUX_SLL2 support.)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,850,2020-05-08T12:14:35Z,2020-05-08T20:59:30Z,2021-05-17T17:26:05Z,MERGED,True,10,1,1,https://github.com/fxlb,"Set default linktype LINUX_SLL2 when capturing on the ""any"" device",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/850,https://github.com/fxlb,6,https://github.com/the-tcpdump-group/tcpdump/pull/850#issuecomment-625947588,"[Request for comments]
I propose to set the default linktype to LINUX_SLL2 when capturing on the ""any"" device.
(if available in libpcap)
It gives useful informations: interface name, in/out with '-e' option.
libpcap support since 1.9.1 version.
The printing is currently not supported in release 4.9.3.
Already asked on the mailing list.
No one said ""no"".","My idea was to use LINUX_SLL2  by default.
With this PR or with a libpcap update, I don't mind if this does not create new problems.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,850,2020-05-08T12:14:35Z,2020-05-08T20:59:30Z,2021-05-17T17:26:05Z,MERGED,True,10,1,1,https://github.com/fxlb,"Set default linktype LINUX_SLL2 when capturing on the ""any"" device",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/850,https://github.com/pevik,7,https://github.com/the-tcpdump-group/tcpdump/pull/850#issuecomment-626291885,"[Request for comments]
I propose to set the default linktype to LINUX_SLL2 when capturing on the ""any"" device.
(if available in libpcap)
It gives useful informations: interface name, in/out with '-e' option.
libpcap support since 1.9.1 version.
The printing is currently not supported in release 4.9.3.
Already asked on the mailing list.
No one said ""no"".","@fxlb thanks! I'm glad now the work has been completed, because not many people has been using LINUX_SLL2 as it wasn't the default.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,851,2020-05-09T18:43:09Z,2020-05-10T09:16:15Z,2021-05-17T17:22:16Z,MERGED,True,39,11,5,https://github.com/fxlb,Print packets for unsupported link protocols in hexadecimal and ASCII,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/851,https://github.com/fxlb,1,https://github.com/the-tcpdump-group/tcpdump/pull/851,"This avoids to get only:
tcpdump: packet printing is not supported for link type XYZ: use -w

Set ndo->ndo_packet_number.

The default printing is like:
    1  15:00:02.232595 UNSUPPORTED
        0x0000:  0000 0338 0000 0000 0000 0000 0000 0000
        0x0010:  1400 0000 1600 0503 0000 0000 0000 0000
        0x0020:  0200 0000
    2  15:00:02.232622 UNSUPPORTED
        0x0000:  0000 0338 0000 0000 0000 0000 0000 0000
        0x0010:  3000 0000 1400 0200 0000 0000 0000 0000
        0x0020:  0208 0000 0000 0000 0800 0200 7f00 0001
        [...]","This avoids to get only:
tcpdump: packet printing is not supported for link type XYZ: use -w

Set ndo->ndo_packet_number.

The default printing is like:
    1  15:00:02.232595 UNSUPPORTED
        0x0000:  0000 0338 0000 0000 0000 0000 0000 0000
        0x0010:  1400 0000 1600 0503 0000 0000 0000 0000
        0x0020:  0200 0000
    2  15:00:02.232622 UNSUPPORTED
        0x0000:  0000 0338 0000 0000 0000 0000 0000 0000
        0x0010:  3000 0000 1400 0200 0000 0000 0000 0000
        0x0020:  0208 0000 0000 0000 0800 0200 7f00 0001
        [...]",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,851,2020-05-09T18:43:09Z,2020-05-10T09:16:15Z,2021-05-17T17:22:16Z,MERGED,True,39,11,5,https://github.com/fxlb,Print packets for unsupported link protocols in hexadecimal and ASCII,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/851,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/851#issuecomment-626221965,"This avoids to get only:
tcpdump: packet printing is not supported for link type XYZ: use -w

Set ndo->ndo_packet_number.

The default printing is like:
    1  15:00:02.232595 UNSUPPORTED
        0x0000:  0000 0338 0000 0000 0000 0000 0000 0000
        0x0010:  1400 0000 1600 0503 0000 0000 0000 0000
        0x0020:  0200 0000
    2  15:00:02.232622 UNSUPPORTED
        0x0000:  0000 0338 0000 0000 0000 0000 0000 0000
        0x0010:  3000 0000 1400 0200 0000 0000 0000 0000
        0x0020:  0208 0000 0000 0000 0800 0200 7f00 0001
        [...]","+1 - Wireshark doesn't completely give up on packet types it doesn't understand; it doesn't dissect them, obviously, but it does show them, complete with the hex/ASCII dump pane, and TShark prints them, with the hex/ASCII dump.
Is there a reason to print the packet number for packets of an unknown link-layer type regardless of whether the -# flag was supplied or not?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,851,2020-05-09T18:43:09Z,2020-05-10T09:16:15Z,2021-05-17T17:22:16Z,MERGED,True,39,11,5,https://github.com/fxlb,Print packets for unsupported link protocols in hexadecimal and ASCII,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/851,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/851#issuecomment-626223729,"This avoids to get only:
tcpdump: packet printing is not supported for link type XYZ: use -w

Set ndo->ndo_packet_number.

The default printing is like:
    1  15:00:02.232595 UNSUPPORTED
        0x0000:  0000 0338 0000 0000 0000 0000 0000 0000
        0x0010:  1400 0000 1600 0503 0000 0000 0000 0000
        0x0020:  0200 0000
    2  15:00:02.232622 UNSUPPORTED
        0x0000:  0000 0338 0000 0000 0000 0000 0000 0000
        0x0010:  3000 0000 1400 0200 0000 0000 0000 0000
        0x0020:  0208 0000 0000 0000 0800 0200 7f00 0001
        [...]","Is there a reason to print the packet number for packets of an unknown link-layer type regardless of whether the -# flag was supplied or not?

This allows to better identify packets without giving -#.
I can remove that if it seems confusing.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,851,2020-05-09T18:43:09Z,2020-05-10T09:16:15Z,2021-05-17T17:22:16Z,MERGED,True,39,11,5,https://github.com/fxlb,Print packets for unsupported link protocols in hexadecimal and ASCII,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/851,https://github.com/fxlb,4,https://github.com/the-tcpdump-group/tcpdump/pull/851#issuecomment-626224630,"This avoids to get only:
tcpdump: packet printing is not supported for link type XYZ: use -w

Set ndo->ndo_packet_number.

The default printing is like:
    1  15:00:02.232595 UNSUPPORTED
        0x0000:  0000 0338 0000 0000 0000 0000 0000 0000
        0x0010:  1400 0000 1600 0503 0000 0000 0000 0000
        0x0020:  0200 0000
    2  15:00:02.232622 UNSUPPORTED
        0x0000:  0000 0338 0000 0000 0000 0000 0000 0000
        0x0010:  3000 0000 1400 0200 0000 0000 0000 0000
        0x0020:  0208 0000 0000 0000 0800 0200 7f00 0001
        [...]",I think I will replace print_unknown_data() call by hex_and_ascii_print() call to print also in ASCII.,True,{'THUMBS_UP': ['https://github.com/mcr']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,851,2020-05-09T18:43:09Z,2020-05-10T09:16:15Z,2021-05-17T17:22:16Z,MERGED,True,39,11,5,https://github.com/fxlb,Print packets for unsupported link protocols in hexadecimal and ASCII,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/851,https://github.com/fxlb,5,https://github.com/the-tcpdump-group/tcpdump/pull/851#issuecomment-626226282,"This avoids to get only:
tcpdump: packet printing is not supported for link type XYZ: use -w

Set ndo->ndo_packet_number.

The default printing is like:
    1  15:00:02.232595 UNSUPPORTED
        0x0000:  0000 0338 0000 0000 0000 0000 0000 0000
        0x0010:  1400 0000 1600 0503 0000 0000 0000 0000
        0x0020:  0200 0000
    2  15:00:02.232622 UNSUPPORTED
        0x0000:  0000 0338 0000 0000 0000 0000 0000 0000
        0x0010:  3000 0000 1400 0200 0000 0000 0000 0000
        0x0020:  0208 0000 0000 0000 0800 0200 7f00 0001
        [...]","I think I will replace print_unknown_data() call by hex_and_ascii_print() call to print also in ASCII.

Done.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,851,2020-05-09T18:43:09Z,2020-05-10T09:16:15Z,2021-05-17T17:22:16Z,MERGED,True,39,11,5,https://github.com/fxlb,Print packets for unsupported link protocols in hexadecimal and ASCII,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/851,https://github.com/fxlb,6,https://github.com/the-tcpdump-group/tcpdump/pull/851#issuecomment-626297532,"This avoids to get only:
tcpdump: packet printing is not supported for link type XYZ: use -w

Set ndo->ndo_packet_number.

The default printing is like:
    1  15:00:02.232595 UNSUPPORTED
        0x0000:  0000 0338 0000 0000 0000 0000 0000 0000
        0x0010:  1400 0000 1600 0503 0000 0000 0000 0000
        0x0020:  0200 0000
    2  15:00:02.232622 UNSUPPORTED
        0x0000:  0000 0338 0000 0000 0000 0000 0000 0000
        0x0010:  3000 0000 1400 0200 0000 0000 0000 0000
        0x0020:  0208 0000 0000 0000 0800 0200 7f00 0001
        [...]","Removed ""print the packet number"" by default.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,851,2020-05-09T18:43:09Z,2020-05-10T09:16:15Z,2021-05-17T17:22:16Z,MERGED,True,39,11,5,https://github.com/fxlb,Print packets for unsupported link protocols in hexadecimal and ASCII,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/851,https://github.com/fxlb,7,https://github.com/the-tcpdump-group/tcpdump/pull/851#issuecomment-626297828,"This avoids to get only:
tcpdump: packet printing is not supported for link type XYZ: use -w

Set ndo->ndo_packet_number.

The default printing is like:
    1  15:00:02.232595 UNSUPPORTED
        0x0000:  0000 0338 0000 0000 0000 0000 0000 0000
        0x0010:  1400 0000 1600 0503 0000 0000 0000 0000
        0x0020:  0200 0000
    2  15:00:02.232622 UNSUPPORTED
        0x0000:  0000 0338 0000 0000 0000 0000 0000 0000
        0x0010:  3000 0000 1400 0200 0000 0000 0000 0000
        0x0020:  0208 0000 0000 0000 0800 0200 7f00 0001
        [...]",Merged.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,852,2020-05-17T11:31:51Z,2020-05-18T00:54:04Z,2020-05-18T21:53:33Z,CLOSED,False,4,1,1,https://github.com/aidbal,Add -nn option to manpage,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/852,https://github.com/aidbal,1,https://github.com/the-tcpdump-group/tcpdump/pull/852,"Running tcpdump with -n option specified yields the following results
sudo tcpdump -n -i eth0 -c 3
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
11:38:16.007550 IP 172.16.0.4.ssh > 172.168.0.3.27821: Flags [P.], seq 3060418479:3060418595, ack 534867288, win 323, options [nop,nop,TS val 2032458301 ecr 1041040746], length 116
11:38:16.007638 IP 172.16.0.4.ssh > 172.168.0.3.27821: Flags [P.], seq 116:232, ack 1, win 323, options [nop,nop,TS val 2032458301 ecr 1041040746], length 116
11:38:16.007695 IP 172.16.0.4.ssh > 172.168.0.3.27821: Flags [P.], seq 232:452, ack 1, win 323, options [nop,nop,TS val 2032458301 ecr 1041040746], length 220

and running with -nn
sudo tcpdump -nn -i eth0 -c 3
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
11:38:06.430249 IP 172.16.0.4.22 > 172.168.0.3.27821: Flags [P.], seq 3060415183:3060415299, ack 534866556, win 323, options [nop,nop,TS val 2032448723 ecr 1041031419], length 116
11:38:06.430366 IP 172.16.0.4.22 > 172.168.0.3.27821: Flags [P.], seq 116:232, ack 1, win 323, options [nop,nop,TS val 2032448724 ecr 1041031419], length 116
11:38:06.430409 IP 172.16.0.4.22 > 172.168.0.3.27821: Flags [P.], seq 232:452, ack 1, win 323, options [nop,nop,TS val 2032448724 ecr 1041031419], length 220","Running tcpdump with -n option specified yields the following results
sudo tcpdump -n -i eth0 -c 3
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
11:38:16.007550 IP 172.16.0.4.ssh > 172.168.0.3.27821: Flags [P.], seq 3060418479:3060418595, ack 534867288, win 323, options [nop,nop,TS val 2032458301 ecr 1041040746], length 116
11:38:16.007638 IP 172.16.0.4.ssh > 172.168.0.3.27821: Flags [P.], seq 116:232, ack 1, win 323, options [nop,nop,TS val 2032458301 ecr 1041040746], length 116
11:38:16.007695 IP 172.16.0.4.ssh > 172.168.0.3.27821: Flags [P.], seq 232:452, ack 1, win 323, options [nop,nop,TS val 2032458301 ecr 1041040746], length 220

and running with -nn
sudo tcpdump -nn -i eth0 -c 3
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
11:38:06.430249 IP 172.16.0.4.22 > 172.168.0.3.27821: Flags [P.], seq 3060415183:3060415299, ack 534866556, win 323, options [nop,nop,TS val 2032448723 ecr 1041031419], length 116
11:38:06.430366 IP 172.16.0.4.22 > 172.168.0.3.27821: Flags [P.], seq 116:232, ack 1, win 323, options [nop,nop,TS val 2032448724 ecr 1041031419], length 116
11:38:06.430409 IP 172.16.0.4.22 > 172.168.0.3.27821: Flags [P.], seq 232:452, ack 1, win 323, options [nop,nop,TS val 2032448724 ecr 1041031419], length 220",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,852,2020-05-17T11:31:51Z,2020-05-18T00:54:04Z,2020-05-18T21:53:33Z,CLOSED,False,4,1,1,https://github.com/aidbal,Add -nn option to manpage,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/852,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/852#issuecomment-629871974,"Running tcpdump with -n option specified yields the following results
sudo tcpdump -n -i eth0 -c 3
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
11:38:16.007550 IP 172.16.0.4.ssh > 172.168.0.3.27821: Flags [P.], seq 3060418479:3060418595, ack 534867288, win 323, options [nop,nop,TS val 2032458301 ecr 1041040746], length 116
11:38:16.007638 IP 172.16.0.4.ssh > 172.168.0.3.27821: Flags [P.], seq 116:232, ack 1, win 323, options [nop,nop,TS val 2032458301 ecr 1041040746], length 116
11:38:16.007695 IP 172.16.0.4.ssh > 172.168.0.3.27821: Flags [P.], seq 232:452, ack 1, win 323, options [nop,nop,TS val 2032458301 ecr 1041040746], length 220

and running with -nn
sudo tcpdump -nn -i eth0 -c 3
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
11:38:06.430249 IP 172.16.0.4.22 > 172.168.0.3.27821: Flags [P.], seq 3060415183:3060415299, ack 534866556, win 323, options [nop,nop,TS val 2032448723 ecr 1041031419], length 116
11:38:06.430366 IP 172.16.0.4.22 > 172.168.0.3.27821: Flags [P.], seq 116:232, ack 1, win 323, options [nop,nop,TS val 2032448724 ecr 1041031419], length 116
11:38:06.430409 IP 172.16.0.4.22 > 172.168.0.3.27821: Flags [P.], seq 232:452, ack 1, win 323, options [nop,nop,TS val 2032448724 ecr 1041031419], length 220","With which version of tcpdump do you see this?
On my machine, with tcpdump built from the master branch, I got:
./tcpdump -i en0 port 80
tcpdump: verbose output suppressed, use -v[v]... for full protocol decode
listening on en0, link-type EN10MB (Ethernet), snapshot length 262144 bytes
15:37:34.625762 IP 192.168.42.85.60120 > www.sonic.net.http: Flags [S], seq 3063821309, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 513647075 ecr 0,sackOK,eol], length 0

and
./tcpdump -n -i en0 port 80
tcpdump: verbose output suppressed, use -v[v]... for full protocol decode
listening on en0, link-type EN10MB (Ethernet), snapshot length 262144 bytes
15:37:44.552341 IP 192.168.42.85.60124 > 209.204.190.64.80: Flags [S], seq 886715861, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 513656835 ecr 0,sackOK,eol], length 0

so -n, by itself, disabled both address and port resolution.
A quick look for ndo->ndo_nflag in the code found nothing that did any tests other than ""zero or non-zero"".",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,852,2020-05-17T11:31:51Z,2020-05-18T00:54:04Z,2020-05-18T21:53:33Z,CLOSED,False,4,1,1,https://github.com/aidbal,Add -nn option to manpage,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/852,https://github.com/fenner,3,https://github.com/the-tcpdump-group/tcpdump/pull/852#issuecomment-629872085,"Running tcpdump with -n option specified yields the following results
sudo tcpdump -n -i eth0 -c 3
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
11:38:16.007550 IP 172.16.0.4.ssh > 172.168.0.3.27821: Flags [P.], seq 3060418479:3060418595, ack 534867288, win 323, options [nop,nop,TS val 2032458301 ecr 1041040746], length 116
11:38:16.007638 IP 172.16.0.4.ssh > 172.168.0.3.27821: Flags [P.], seq 116:232, ack 1, win 323, options [nop,nop,TS val 2032458301 ecr 1041040746], length 116
11:38:16.007695 IP 172.16.0.4.ssh > 172.168.0.3.27821: Flags [P.], seq 232:452, ack 1, win 323, options [nop,nop,TS val 2032458301 ecr 1041040746], length 220

and running with -nn
sudo tcpdump -nn -i eth0 -c 3
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
11:38:06.430249 IP 172.16.0.4.22 > 172.168.0.3.27821: Flags [P.], seq 3060415183:3060415299, ack 534866556, win 323, options [nop,nop,TS val 2032448723 ecr 1041031419], length 116
11:38:06.430366 IP 172.16.0.4.22 > 172.168.0.3.27821: Flags [P.], seq 116:232, ack 1, win 323, options [nop,nop,TS val 2032448724 ecr 1041031419], length 116
11:38:06.430409 IP 172.16.0.4.22 > 172.168.0.3.27821: Flags [P.], seq 232:452, ack 1, win 323, options [nop,nop,TS val 2032448724 ecr 1041031419], length 220","This behavior of ""-n"" is a RedHat/Fedora/CentOS modification, so the patch for it should be submitted to them.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,852,2020-05-17T11:31:51Z,2020-05-18T00:54:04Z,2020-05-18T21:53:33Z,CLOSED,False,4,1,1,https://github.com/aidbal,Add -nn option to manpage,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/852,https://github.com/guyharris,4,https://github.com/the-tcpdump-group/tcpdump/pull/852#issuecomment-629890978,"Running tcpdump with -n option specified yields the following results
sudo tcpdump -n -i eth0 -c 3
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
11:38:16.007550 IP 172.16.0.4.ssh > 172.168.0.3.27821: Flags [P.], seq 3060418479:3060418595, ack 534867288, win 323, options [nop,nop,TS val 2032458301 ecr 1041040746], length 116
11:38:16.007638 IP 172.16.0.4.ssh > 172.168.0.3.27821: Flags [P.], seq 116:232, ack 1, win 323, options [nop,nop,TS val 2032458301 ecr 1041040746], length 116
11:38:16.007695 IP 172.16.0.4.ssh > 172.168.0.3.27821: Flags [P.], seq 232:452, ack 1, win 323, options [nop,nop,TS val 2032458301 ecr 1041040746], length 220

and running with -nn
sudo tcpdump -nn -i eth0 -c 3
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
11:38:06.430249 IP 172.16.0.4.22 > 172.168.0.3.27821: Flags [P.], seq 3060415183:3060415299, ack 534866556, win 323, options [nop,nop,TS val 2032448723 ecr 1041031419], length 116
11:38:06.430366 IP 172.16.0.4.22 > 172.168.0.3.27821: Flags [P.], seq 116:232, ack 1, win 323, options [nop,nop,TS val 2032448724 ecr 1041031419], length 116
11:38:06.430409 IP 172.16.0.4.22 > 172.168.0.3.27821: Flags [P.], seq 232:452, ack 1, win 323, options [nop,nop,TS val 2032448724 ecr 1041031419], length 220","This behavior of ""-n"" is a RedHat/Fedora/CentOS modification

As per this patch.

so the patch for it should be submitted to them.

The patch from Fedora already includes the documentation update.  If you want the standard tcpdump release to behave in that fashion, you could submit a pull request with both changes, but we might not choose to change the behavior.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,852,2020-05-17T11:31:51Z,2020-05-18T00:54:04Z,2020-05-18T21:53:33Z,CLOSED,False,4,1,1,https://github.com/aidbal,Add -nn option to manpage,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/852,https://github.com/infrastation,5,https://github.com/the-tcpdump-group/tcpdump/pull/852#issuecomment-630411067,"Running tcpdump with -n option specified yields the following results
sudo tcpdump -n -i eth0 -c 3
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
11:38:16.007550 IP 172.16.0.4.ssh > 172.168.0.3.27821: Flags [P.], seq 3060418479:3060418595, ack 534867288, win 323, options [nop,nop,TS val 2032458301 ecr 1041040746], length 116
11:38:16.007638 IP 172.16.0.4.ssh > 172.168.0.3.27821: Flags [P.], seq 116:232, ack 1, win 323, options [nop,nop,TS val 2032458301 ecr 1041040746], length 116
11:38:16.007695 IP 172.16.0.4.ssh > 172.168.0.3.27821: Flags [P.], seq 232:452, ack 1, win 323, options [nop,nop,TS val 2032458301 ecr 1041040746], length 220

and running with -nn
sudo tcpdump -nn -i eth0 -c 3
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
11:38:06.430249 IP 172.16.0.4.22 > 172.168.0.3.27821: Flags [P.], seq 3060415183:3060415299, ack 534866556, win 323, options [nop,nop,TS val 2032448723 ecr 1041031419], length 116
11:38:06.430366 IP 172.16.0.4.22 > 172.168.0.3.27821: Flags [P.], seq 116:232, ack 1, win 323, options [nop,nop,TS val 2032448724 ecr 1041031419], length 116
11:38:06.430409 IP 172.16.0.4.22 > 172.168.0.3.27821: Flags [P.], seq 232:452, ack 1, win 323, options [nop,nop,TS val 2032448724 ecr 1041031419], length 220",See pull request #702 for why messing with -n and -nn would be a wrong thing to do.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,852,2020-05-17T11:31:51Z,2020-05-18T00:54:04Z,2020-05-18T21:53:33Z,CLOSED,False,4,1,1,https://github.com/aidbal,Add -nn option to manpage,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/852,https://github.com/guyharris,6,https://github.com/the-tcpdump-group/tcpdump/pull/852#issuecomment-630454707,"Running tcpdump with -n option specified yields the following results
sudo tcpdump -n -i eth0 -c 3
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
11:38:16.007550 IP 172.16.0.4.ssh > 172.168.0.3.27821: Flags [P.], seq 3060418479:3060418595, ack 534867288, win 323, options [nop,nop,TS val 2032458301 ecr 1041040746], length 116
11:38:16.007638 IP 172.16.0.4.ssh > 172.168.0.3.27821: Flags [P.], seq 116:232, ack 1, win 323, options [nop,nop,TS val 2032458301 ecr 1041040746], length 116
11:38:16.007695 IP 172.16.0.4.ssh > 172.168.0.3.27821: Flags [P.], seq 232:452, ack 1, win 323, options [nop,nop,TS val 2032458301 ecr 1041040746], length 220

and running with -nn
sudo tcpdump -nn -i eth0 -c 3
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
11:38:06.430249 IP 172.16.0.4.22 > 172.168.0.3.27821: Flags [P.], seq 3060415183:3060415299, ack 534866556, win 323, options [nop,nop,TS val 2032448723 ecr 1041031419], length 116
11:38:06.430366 IP 172.16.0.4.22 > 172.168.0.3.27821: Flags [P.], seq 116:232, ack 1, win 323, options [nop,nop,TS val 2032448724 ecr 1041031419], length 116
11:38:06.430409 IP 172.16.0.4.22 > 172.168.0.3.27821: Flags [P.], seq 232:452, ack 1, win 323, options [nop,nop,TS val 2032448724 ecr 1041031419], length 220","See pull request #702 for why messing with -n and -nn would be a wrong thing to do.

I.e., in my comment, replace ""might not choose to change the behavior"" to ""will not choose to change the behavior"".
(Feel free to yell at the people at Red Hat for changing the behavior.)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,854,2020-05-22T15:04:07Z,2020-05-23T20:40:11Z,2020-05-23T20:40:11Z,MERGED,True,197,9,4,https://github.com/fenner,Fix BGP Route Target Membership NLRI prefix decoding,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/854,https://github.com/fenner,1,https://github.com/the-tcpdump-group/tcpdump/pull/854,"As described in RFC4684, prefix lengths of 0 and
32-96 are all valid.  Introduce bgp_rt_prefix_print()
to print partial route targets.
Fixes #853","As described in RFC4684, prefix lengths of 0 and
32-96 are all valid.  Introduce bgp_rt_prefix_print()
to print partial route targets.
Fixes #853",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,854,2020-05-22T15:04:07Z,2020-05-23T20:40:11Z,2020-05-23T20:40:11Z,MERGED,True,197,9,4,https://github.com/fenner,Fix BGP Route Target Membership NLRI prefix decoding,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/854,https://github.com/fenner,2,https://github.com/the-tcpdump-group/tcpdump/pull/854#issuecomment-632741353,"As described in RFC4684, prefix lengths of 0 and
32-96 are all valid.  Introduce bgp_rt_prefix_print()
to print partial route targets.
Fixes #853",I think the only problems with this patch are variable names and whitespace usage.  I wanted to improve it before creating the pull request but don't think that's critical.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,854,2020-05-22T15:04:07Z,2020-05-23T20:40:11Z,2020-05-23T20:40:11Z,MERGED,True,197,9,4,https://github.com/fenner,Fix BGP Route Target Membership NLRI prefix decoding,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/854,https://github.com/fenner,3,https://github.com/the-tcpdump-group/tcpdump/pull/854#issuecomment-633119856,"As described in RFC4684, prefix lengths of 0 and
32-96 are all valid.  Introduce bgp_rt_prefix_print()
to print partial route targets.
Fixes #853","Travis says failure - this is only because 22 arm64 builds failed because of overload in the system - said ""retry later"".  2 arm64 builds did succeed, so there is at least proof that it builds on arm64.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,854,2020-05-22T15:04:07Z,2020-05-23T20:40:11Z,2020-05-23T20:40:11Z,MERGED,True,197,9,4,https://github.com/fenner,Fix BGP Route Target Membership NLRI prefix decoding,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/854,https://github.com/guyharris,4,https://github.com/the-tcpdump-group/tcpdump/pull/854#issuecomment-633133188,"As described in RFC4684, prefix lengths of 0 and
32-96 are all valid.  Introduce bgp_rt_prefix_print()
to print partial route targets.
Fixes #853","Travis says failure - this is only because 22 arm64 builds failed because of overload in the system - said ""retry later"". 2 arm64 builds did succeed, so there is at least proof that it builds on arm64.

When all else fails, manually restart the builds.
A bunch of the builds are whiling about sudo being unable to resolve some host name (probably the host name of the VM running the build), so Travis are apparently having some issues, but those builds appear to be proceeding anyway.  I know they had, at least one point, a page to show the overall status of Travis, but it's no longer as easy to find as it used to be.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,854,2020-05-22T15:04:07Z,2020-05-23T20:40:11Z,2020-05-23T20:40:11Z,MERGED,True,197,9,4,https://github.com/fenner,Fix BGP Route Target Membership NLRI prefix decoding,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/854,https://github.com/guyharris,5,https://github.com/the-tcpdump-group/tcpdump/pull/854#issuecomment-633133646,"As described in RFC4684, prefix lengths of 0 and
32-96 are all valid.  Introduce bgp_rt_prefix_print()
to print partial route targets.
Fixes #853","I know they had, at least one point, a page to show the overall status of Travis, but it's no longer as easy to find as it used to be.

Click ""Help"" at the top of the page and, on the help page, click the ""* Travis CI: {status}"" link.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,854,2020-05-22T15:04:07Z,2020-05-23T20:40:11Z,2020-05-23T20:40:11Z,MERGED,True,197,9,4,https://github.com/fenner,Fix BGP Route Target Membership NLRI prefix decoding,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/854,https://github.com/guyharris,6,https://github.com/the-tcpdump-group/tcpdump/pull/854#issuecomment-633134072,"As described in RFC4684, prefix lengths of 0 and
32-96 are all valid.  Introduce bgp_rt_prefix_print()
to print partial route targets.
Fixes #853","Click ""Help"" at the top of the page and, on the help page, click the ""* Travis CI: {status}"" link.

There's a small break in the graphs somewhere in the early morning of 2020-05-23, so perhaps there was a glitch.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,854,2020-05-22T15:04:07Z,2020-05-23T20:40:11Z,2020-05-23T20:40:11Z,MERGED,True,197,9,4,https://github.com/fenner,Fix BGP Route Target Membership NLRI prefix decoding,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/854,https://github.com/guyharris,7,https://github.com/the-tcpdump-group/tcpdump/pull/854#issuecomment-633135705,"As described in RFC4684, prefix lengths of 0 and
32-96 are all valid.  Introduce bgp_rt_prefix_print()
to print partial route targets.
Fixes #853","Travis says failure - this is only because 22 arm64 builds failed because of overload in the system - said ""retry later"". 2 arm64 builds did succeed, so there is at least proof that it builds on arm64.

After restarting, Travis now reports success.  (AppVeyor has a ""restart incomplete"" button that will restart the whole process if some build failed due to CI platform problems.)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,862,2020-06-30T10:03:13Z,2020-06-30T20:12:32Z,2021-05-17T17:19:42Z,MERGED,True,32,0,5,https://github.com/mosesdevadason,LLDP 8021 link aggregation TLV support,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/862,https://github.com/mosesdevadason,1,https://github.com/the-tcpdump-group/tcpdump/pull/862,"As per IEEE std 802.1-AB-2009, 802.3 link aggregation TLV has been
deprecated and link aggregation TLV has been added as an 802.1
TLV. Support for this is given.
Before this change output used to be:
    Organization specific TLV (127), length 9: OUI Ethernet bridged (0x0080c2)                                                                                                         
      unknown Subtype (7)

After this change output is:
        Organization specific TLV (127), length 9: OUI Ethernet bridged (0x0080c2)                                                                                                     
          Link aggregation Subtype (7)                                                                                                                                                 
            aggregation status [supported, enabled], aggregation port ID 100

Output for a complete LLDP frame with 802.1 link aggregation TLV is attached.
lldp_full_8021_linkagg.txt","As per IEEE std 802.1-AB-2009, 802.3 link aggregation TLV has been
deprecated and link aggregation TLV has been added as an 802.1
TLV. Support for this is given.
Before this change output used to be:
    Organization specific TLV (127), length 9: OUI Ethernet bridged (0x0080c2)                                                                                                         
      unknown Subtype (7)

After this change output is:
        Organization specific TLV (127), length 9: OUI Ethernet bridged (0x0080c2)                                                                                                     
          Link aggregation Subtype (7)                                                                                                                                                 
            aggregation status [supported, enabled], aggregation port ID 100

Output for a complete LLDP frame with 802.1 link aggregation TLV is attached.
lldp_full_8021_linkagg.txt",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,862,2020-06-30T10:03:13Z,2020-06-30T20:12:32Z,2021-05-17T17:19:42Z,MERGED,True,32,0,5,https://github.com/mosesdevadason,LLDP 8021 link aggregation TLV support,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/862,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/862#issuecomment-652018137,"As per IEEE std 802.1-AB-2009, 802.3 link aggregation TLV has been
deprecated and link aggregation TLV has been added as an 802.1
TLV. Support for this is given.
Before this change output used to be:
    Organization specific TLV (127), length 9: OUI Ethernet bridged (0x0080c2)                                                                                                         
      unknown Subtype (7)

After this change output is:
        Organization specific TLV (127), length 9: OUI Ethernet bridged (0x0080c2)                                                                                                     
          Link aggregation Subtype (7)                                                                                                                                                 
            aggregation status [supported, enabled], aggregation port ID 100

Output for a complete LLDP frame with 802.1 link aggregation TLV is attached.
lldp_full_8021_linkagg.txt",Thank you!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,864,2020-07-16T10:15:45Z,2020-07-22T11:57:05Z,2021-05-17T17:19:18Z,CLOSED,False,102,77,5,https://github.com/aravindprasads,Add support for EAP Dump in RADIUS Messages,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/864,https://github.com/aravindprasads,1,https://github.com/the-tcpdump-group/tcpdump/pull/864,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value: Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value: Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value: Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value: Success (3), id 2, len 4
            0x0000:  0302 0004","Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value: Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value: Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value: Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value: Success (3), id 2, len 4
            0x0000:  0302 0004",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,864,2020-07-16T10:15:45Z,2020-07-22T11:57:05Z,2021-05-17T17:19:18Z,CLOSED,False,102,77,5,https://github.com/aravindprasads,Add support for EAP Dump in RADIUS Messages,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/864,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/864#issuecomment-659354631,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value: Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value: Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value: Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value: Success (3), id 2, len 4
            0x0000:  0302 0004","For getting data from a packet buffer, use the new GET_ macros instead of EXTRACT_ ones (See 176e182 and ee68aa3).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,864,2020-07-16T10:15:45Z,2020-07-22T11:57:05Z,2021-05-17T17:19:18Z,CLOSED,False,102,77,5,https://github.com/aravindprasads,Add support for EAP Dump in RADIUS Messages,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/864,https://github.com/aravindprasads,3,https://github.com/the-tcpdump-group/tcpdump/pull/864#issuecomment-659378223,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value: Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value: Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value: Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value: Success (3), id 2, len 4
            0x0000:  0302 0004","@fxlb Thanks for the review. Replaced all the EXTRACT_ macros with the GET_ macros.
Kindly review and let me know your views.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,864,2020-07-16T10:15:45Z,2020-07-22T11:57:05Z,2021-05-17T17:19:18Z,CLOSED,False,102,77,5,https://github.com/aravindprasads,Add support for EAP Dump in RADIUS Messages,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/864,https://github.com/aravindprasads,4,https://github.com/the-tcpdump-group/tcpdump/pull/864#issuecomment-659952470,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value: Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value: Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value: Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value: Success (3), id 2, len 4
            0x0000:  0302 0004",@fxlb Thanks for the review. I have addressed the review comment. Kindly review and let me know your views.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,864,2020-07-16T10:15:45Z,2020-07-22T11:57:05Z,2021-05-17T17:19:18Z,CLOSED,False,102,77,5,https://github.com/aravindprasads,Add support for EAP Dump in RADIUS Messages,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/864,https://github.com/aravindprasads,5,https://github.com/the-tcpdump-group/tcpdump/pull/864#issuecomment-660634264,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value: Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value: Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value: Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value: Success (3), id 2, len 4
            0x0000:  0302 0004","@fxlb Big thanks for your time and extensive review. I have addressed all the review comments.
Kindly review and let me know your views. Thanks.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,864,2020-07-16T10:15:45Z,2020-07-22T11:57:05Z,2021-05-17T17:19:18Z,CLOSED,False,102,77,5,https://github.com/aravindprasads,Add support for EAP Dump in RADIUS Messages,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/864,https://github.com/fxlb,6,https://github.com/the-tcpdump-group/tcpdump/pull/864#issuecomment-660897697,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value: Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value: Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value: Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value: Success (3), id 2, len 4
            0x0000:  0302 0004","I have added a verbose output for the test case eapon1.pcap.
When the PR is rebased on top of master, it shows a unwanted change.
32c32
<    14  15:17:35.622870 EAP packet (0) v1, len 5, Request (1), id 1, len 5
---
>    14  15:17:35.622870 EAP packet (0) v1, len 5Request (1), id 1, len 5

See : https://travis-ci.org/github/fxlb/tcpdump/jobs/709917622
Please, rebase the eap-radius-support branch on top of master and fix.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,864,2020-07-16T10:15:45Z,2020-07-22T11:57:05Z,2021-05-17T17:19:18Z,CLOSED,False,102,77,5,https://github.com/aravindprasads,Add support for EAP Dump in RADIUS Messages,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/864,https://github.com/aravindprasads,7,https://github.com/the-tcpdump-group/tcpdump/pull/864#issuecomment-661608583,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value: Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value: Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value: Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value: Success (3), id 2, len 4
            0x0000:  0302 0004","I have added a verbose output for the test case eapon1.pcap.
When the PR is rebased on top of master, it shows a unwanted change.
32c32
<    14  15:17:35.622870 EAP packet (0) v1, len 5, Request (1), id 1, len 5
---
>    14  15:17:35.622870 EAP packet (0) v1, len 5Request (1), id 1, len 5

See : https://travis-ci.org/github/fxlb/tcpdump/jobs/709917622
Please, rebase the eap-radius-support branch on top of master and fix.

Hi @fxlb
Fixed the issue. Kindly let me know if its fine now.
Thanks for your time and the detailed review again.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,864,2020-07-16T10:15:45Z,2020-07-22T11:57:05Z,2021-05-17T17:19:18Z,CLOSED,False,102,77,5,https://github.com/aravindprasads,Add support for EAP Dump in RADIUS Messages,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/864,https://github.com/fxlb,8,https://github.com/the-tcpdump-group/tcpdump/pull/864#issuecomment-662411304,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value: Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value: Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value: Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value: Success (3), id 2, len 4
            0x0000:  0302 0004","Rebased, merged, thank you for your patience!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,864,2020-07-16T10:15:45Z,2020-07-22T11:57:05Z,2021-05-17T17:19:18Z,CLOSED,False,102,77,5,https://github.com/aravindprasads,Add support for EAP Dump in RADIUS Messages,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/864,https://github.com/aravindprasads,9,https://github.com/the-tcpdump-group/tcpdump/pull/864#issuecomment-662610399,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value: Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value: Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value: Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value: Success (3), id 2, len 4
            0x0000:  0302 0004",@fxlb A Big thanks for your time and detailed review. Thanks for the support :-).,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,864,2020-07-16T10:15:45Z,2020-07-22T11:57:05Z,2021-05-17T17:19:18Z,CLOSED,False,102,77,5,https://github.com/aravindprasads,Add support for EAP Dump in RADIUS Messages,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/864,https://github.com/infrastation,10,https://github.com/the-tcpdump-group/tcpdump/pull/864#issuecomment-668120343,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value: Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value: Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value: Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value: Success (3), id 2, len 4
            0x0000:  0302 0004","I was going to resume reviewing this proposed feature (this started around 2018, I guess), but got dragged away by other things, please excuse me. Glad you have eventually sorted it.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,864,2020-07-16T10:15:45Z,2020-07-22T11:57:05Z,2021-05-17T17:19:18Z,CLOSED,False,102,77,5,https://github.com/aravindprasads,Add support for EAP Dump in RADIUS Messages,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/864,https://github.com/aravindprasads,11,https://github.com/the-tcpdump-group/tcpdump/pull/864#issuecomment-695927004,"Usually, for EAP related authentications, RADIUS messages contain EAP payload. Currently, RADIUS dump messages donot display the EAP frame information. Hence, added changes for displaying EAP info within RADIUS dump messages.
Sample O/P:

EAP Request Identity Frame:

Before this change:
         EAP-Message Attribute (79), length: 19, Value: .

After this change:
           EAP-Message Attribute (79), length: 10, Value: Response (2), id 1, len 8
                 Type Identity (1), Identity: avi
            0x0000:  0201 0008 0161 7669


EAP Request Challenge Frame:
Before this change:

          EAP-Message Attribute (79), length: 24, Value: ..
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2

After this change:
          EAP-Message Attribute (79), length: 24, Value: Request (1), id 2, len 22
                 Type MD5-challenge (4)
            0x0000:  0102 0016 0410 cd32 576a 04bd ea97 14c6
            0x0010:  9e84 ae7c 6de2


EAP Response Challenge frame:

Before this change:
          EAP-Message Attribute (79), length: 27, Value: ..
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69

After this change:
          EAP-Message Attribute (79), length: 27, Value: Response (2), id 2, len 25
                 Type MD5-challenge (4)
            0x0000:  0202 0019 0410 035f 1f16 c4e2 d71e 1553
            0x0010:  6b55 effc 0a0f 6176 69


EAP Success Frame:

Before this change:
          EAP-Message Attribute (79), length: 6, Value: ..
            0x0000:  0302 0004

After this change:
          EAP-Message Attribute (79), length: 6, Value: Success (3), id 2, len 4
            0x0000:  0302 0004","Hi Denis @infrastation,
Thanks for the initial reviews and the support.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,867,2020-08-04T15:15:03Z,2020-08-07T16:11:22Z,2021-05-17T16:06:53Z,MERGED,True,16,0,6,https://github.com/ahsalam,Add support for ethernet IP protocol,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/867,https://github.com/ahsalam,1,https://github.com/the-tcpdump-group/tcpdump/pull/867,"The SRv6 network programming defines a new IP protocol number [1].
The new protocol number is used in the Next Header field of an IPv6 header
or any extension header indicates that the payload is an Ethernet.
IANA has assigned 143 as the protocol number of ethernet [2].
The SRv6 packet has the following format:
IPv6 HDR + SRH + Ethernet HDR + IPv4/IPv6 packet
This patch allows TCPDUMP to dissect such SRv6 packets.
[1] https://tools.ietf.org/html/draft-ietf-spring-srv6-network-programming-16#section-9.1
[2] https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml
Signed-off-by: Ahmed Abdelsalam ahabdels@gmail.com","The SRv6 network programming defines a new IP protocol number [1].
The new protocol number is used in the Next Header field of an IPv6 header
or any extension header indicates that the payload is an Ethernet.
IANA has assigned 143 as the protocol number of ethernet [2].
The SRv6 packet has the following format:
IPv6 HDR + SRH + Ethernet HDR + IPv4/IPv6 packet
This patch allows TCPDUMP to dissect such SRv6 packets.
[1] https://tools.ietf.org/html/draft-ietf-spring-srv6-network-programming-16#section-9.1
[2] https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml
Signed-off-by: Ahmed Abdelsalam ahabdels@gmail.com",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,867,2020-08-04T15:15:03Z,2020-08-07T16:11:22Z,2021-05-17T16:06:53Z,MERGED,True,16,0,6,https://github.com/ahsalam,Add support for ethernet IP protocol,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/867,https://github.com/ahsalam,2,https://github.com/the-tcpdump-group/tcpdump/pull/867#issuecomment-670495280,"The SRv6 network programming defines a new IP protocol number [1].
The new protocol number is used in the Next Header field of an IPv6 header
or any extension header indicates that the payload is an Ethernet.
IANA has assigned 143 as the protocol number of ethernet [2].
The SRv6 packet has the following format:
IPv6 HDR + SRH + Ethernet HDR + IPv4/IPv6 packet
This patch allows TCPDUMP to dissect such SRv6 packets.
[1] https://tools.ietf.org/html/draft-ietf-spring-srv6-network-programming-16#section-9.1
[2] https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml
Signed-off-by: Ahmed Abdelsalam ahabdels@gmail.com",Any comments on the PR ?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,867,2020-08-04T15:15:03Z,2020-08-07T16:11:22Z,2021-05-17T16:06:53Z,MERGED,True,16,0,6,https://github.com/ahsalam,Add support for ethernet IP protocol,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/867,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/867#issuecomment-670498528,"The SRv6 network programming defines a new IP protocol number [1].
The new protocol number is used in the Next Header field of an IPv6 header
or any extension header indicates that the payload is an Ethernet.
IANA has assigned 143 as the protocol number of ethernet [2].
The SRv6 packet has the following format:
IPv6 HDR + SRH + Ethernet HDR + IPv4/IPv6 packet
This patch allows TCPDUMP to dissect such SRv6 packets.
[1] https://tools.ietf.org/html/draft-ietf-spring-srv6-network-programming-16#section-9.1
[2] https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml
Signed-off-by: Ahmed Abdelsalam ahabdels@gmail.com","Please, first rebase on top on master (9 new commits) and remove the FALSE parameter from ether_print() call (it was removed).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,867,2020-08-04T15:15:03Z,2020-08-07T16:11:22Z,2021-05-17T16:06:53Z,MERGED,True,16,0,6,https://github.com/ahsalam,Add support for ethernet IP protocol,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/867,https://github.com/fxlb,4,https://github.com/the-tcpdump-group/tcpdump/pull/867#issuecomment-670502558,"The SRv6 network programming defines a new IP protocol number [1].
The new protocol number is used in the Next Header field of an IPv6 header
or any extension header indicates that the payload is an Ethernet.
IANA has assigned 143 as the protocol number of ethernet [2].
The SRv6 packet has the following format:
IPv6 HDR + SRH + Ethernet HDR + IPv4/IPv6 packet
This patch allows TCPDUMP to dissect such SRv6 packets.
[1] https://tools.ietf.org/html/draft-ietf-spring-srv6-network-programming-16#section-9.1
[2] https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml
Signed-off-by: Ahmed Abdelsalam ahabdels@gmail.com","You also should add a test case with '-e' option to show Ethernet addresses, like:
ipv6-srh-ipproto-ether-ev ipv6-srh-ipproto-ether.pcap ipv6-srh-ipproto-ether.out-ev -ev",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,867,2020-08-04T15:15:03Z,2020-08-07T16:11:22Z,2021-05-17T16:06:53Z,MERGED,True,16,0,6,https://github.com/ahsalam,Add support for ethernet IP protocol,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/867,https://github.com/ahsalam,5,https://github.com/the-tcpdump-group/tcpdump/pull/867#issuecomment-670561749,"The SRv6 network programming defines a new IP protocol number [1].
The new protocol number is used in the Next Header field of an IPv6 header
or any extension header indicates that the payload is an Ethernet.
IANA has assigned 143 as the protocol number of ethernet [2].
The SRv6 packet has the following format:
IPv6 HDR + SRH + Ethernet HDR + IPv4/IPv6 packet
This patch allows TCPDUMP to dissect such SRv6 packets.
[1] https://tools.ietf.org/html/draft-ietf-spring-srv6-network-programming-16#section-9.1
[2] https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml
Signed-off-by: Ahmed Abdelsalam ahabdels@gmail.com",PR updated.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,867,2020-08-04T15:15:03Z,2020-08-07T16:11:22Z,2021-05-17T16:06:53Z,MERGED,True,16,0,6,https://github.com/ahsalam,Add support for ethernet IP protocol,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/867,https://github.com/fxlb,6,https://github.com/the-tcpdump-group/tcpdump/pull/867#issuecomment-670593394,"The SRv6 network programming defines a new IP protocol number [1].
The new protocol number is used in the Next Header field of an IPv6 header
or any extension header indicates that the payload is an Ethernet.
IANA has assigned 143 as the protocol number of ethernet [2].
The SRv6 packet has the following format:
IPv6 HDR + SRH + Ethernet HDR + IPv4/IPv6 packet
This patch allows TCPDUMP to dissect such SRv6 packets.
[1] https://tools.ietf.org/html/draft-ietf-spring-srv6-network-programming-16#section-9.1
[2] https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml
Signed-off-by: Ahmed Abdelsalam ahabdels@gmail.com",Thank you!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,871,2020-09-04T15:06:38Z,2021-05-17T14:52:12Z,2021-05-18T03:37:48Z,MERGED,True,720,18,4,https://github.com/neelabhsahay,Ipv6 agent Id Support for Sflow,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/871,https://github.com/neelabhsahay,1,https://github.com/the-tcpdump-group/tcpdump/pull/871,"At present IPv6 agent id support is not present in tcpdump. tcpdump doesn't parse sflow packet correctly when it has IPv6 agent id configured.
Adding the support.","At present IPv6 agent id support is not present in tcpdump. tcpdump doesn't parse sflow packet correctly when it has IPv6 agent id configured.
Adding the support.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,871,2020-09-04T15:06:38Z,2021-05-17T14:52:12Z,2021-05-18T03:37:48Z,MERGED,True,720,18,4,https://github.com/neelabhsahay,Ipv6 agent Id Support for Sflow,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/871,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/871#issuecomment-701551261,"At present IPv6 agent id support is not present in tcpdump. tcpdump doesn't parse sflow packet correctly when it has IPv6 agent id configured.
Adding the support.","I have rebased the changes on the current master branch, squashed them together, capitalized the protocol name correctly and resolved the conflict. Did not review the proposed protocol decoder changes.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,871,2020-09-04T15:06:38Z,2021-05-17T14:52:12Z,2021-05-18T03:37:48Z,MERGED,True,720,18,4,https://github.com/neelabhsahay,Ipv6 agent Id Support for Sflow,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/871,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/871#issuecomment-842278461,"At present IPv6 agent id support is not present in tcpdump. tcpdump doesn't parse sflow packet correctly when it has IPv6 agent id configured.
Adding the support.","Do you have normative reference to document the ""struct sflow_v6_datagram_t"" ?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,871,2020-09-04T15:06:38Z,2021-05-17T14:52:12Z,2021-05-18T03:37:48Z,MERGED,True,720,18,4,https://github.com/neelabhsahay,Ipv6 agent Id Support for Sflow,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/871,https://github.com/neelabhsahay,4,https://github.com/the-tcpdump-group/tcpdump/pull/871#issuecomment-842283776,"At present IPv6 agent id support is not present in tcpdump. tcpdump doesn't parse sflow packet correctly when it has IPv6 agent id configured.
Adding the support.","No I don't have normative reference to document the ""struct sflow_v6_datagram_t""",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,871,2020-09-04T15:06:38Z,2021-05-17T14:52:12Z,2021-05-18T03:37:48Z,MERGED,True,720,18,4,https://github.com/neelabhsahay,Ipv6 agent Id Support for Sflow,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/871,https://github.com/fxlb,5,https://github.com/the-tcpdump-group/tcpdump/pull/871#issuecomment-842389975,"At present IPv6 agent id support is not present in tcpdump. tcpdump doesn't parse sflow packet correctly when it has IPv6 agent id configured.
Adding the support.","Rebased, merged, thank you!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,874,2020-09-18T02:09:43Z,2020-09-20T15:37:49Z,2020-12-01T14:34:58Z,CLOSED,False,368,1539,124,https://github.com/fenner,"Print LSP ping timestamps as NTP time, not UNIX time",37,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/874,https://github.com/fenner,1,https://github.com/the-tcpdump-group/tcpdump/pull/874,"During development of LSP ping, the embedded timestamps were apparently changed from struct timeval to NTP time, but the printer has not been updated.
Fixes #873
(Sorry for filing an issue and then a pull request, I didn't think I was going to fix it but wanted to record the problem)","During development of LSP ping, the embedded timestamps were apparently changed from struct timeval to NTP time, but the printer has not been updated.
Fixes #873
(Sorry for filing an issue and then a pull request, I didn't think I was going to fix it but wanted to record the problem)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,874,2020-09-18T02:09:43Z,2020-09-20T15:37:49Z,2020-12-01T14:34:58Z,CLOSED,False,368,1539,124,https://github.com/fenner,"Print LSP ping timestamps as NTP time, not UNIX time",37,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/874,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/874#issuecomment-694608549,"During development of LSP ping, the embedded timestamps were apparently changed from struct timeval to NTP time, but the printer has not been updated.
Fixes #873
(Sorry for filing an issue and then a pull request, I didn't think I was going to fix it but wanted to record the problem)","Thank you. As a generic remark, the reasoning behind the change would serve the purpose much better in the commit message, where it can survive regardless of github.com.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,874,2020-09-18T02:09:43Z,2020-09-20T15:37:49Z,2020-12-01T14:34:58Z,CLOSED,False,368,1539,124,https://github.com/fenner,"Print LSP ping timestamps as NTP time, not UNIX time",37,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/874,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/874#issuecomment-694627783,"During development of LSP ping, the embedded timestamps were apparently changed from struct timeval to NTP time, but the printer has not been updated.
Fixes #873
(Sorry for filing an issue and then a pull request, I didn't think I was going to fix it but wanted to record the problem)","It looks like every CI build that runs make check fails, if the only reason for that is because the older LSP ping test cases need to be updated too, the solution is straightforward. However, please note that the older tests now have their printed timestamps in year 1934, is it correct? Besides that, perhaps you would want to base this change on the latest master branch and choose it as the destination.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,874,2020-09-18T02:09:43Z,2020-09-20T15:37:49Z,2020-12-01T14:34:58Z,CLOSED,False,368,1539,124,https://github.com/fenner,"Print LSP ping timestamps as NTP time, not UNIX time",37,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/874,https://github.com/fenner,4,https://github.com/the-tcpdump-group/tcpdump/pull/874#issuecomment-694649540,"During development of LSP ping, the embedded timestamps were apparently changed from struct timeval to NTP time, but the printer has not been updated.
Fixes #873
(Sorry for filing an issue and then a pull request, I didn't think I was going to fix it but wanted to record the problem)","Probably the right thing is to add a heuristic, if the year is before 2000 then assume it's the ""unix epoch and milliseconds"" style.  That will last until 2070.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,874,2020-09-18T02:09:43Z,2020-09-20T15:37:49Z,2020-12-01T14:34:58Z,CLOSED,False,368,1539,124,https://github.com/fenner,"Print LSP ping timestamps as NTP time, not UNIX time",37,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/874,https://github.com/infrastation,5,https://github.com/the-tcpdump-group/tcpdump/pull/874#issuecomment-694827827,"During development of LSP ping, the embedded timestamps were apparently changed from struct timeval to NTP time, but the printer has not been updated.
Fixes #873
(Sorry for filing an issue and then a pull request, I didn't think I was going to fix it but wanted to record the problem)",Do you mean these older captures contain packets that implement a draft that is different from the final specification? These .pcap files originate from commit 62fbfa3 in 2004. I can patch them the same way as in commit bc3bc62 if that helps.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,874,2020-09-18T02:09:43Z,2020-09-20T15:37:49Z,2020-12-01T14:34:58Z,CLOSED,False,368,1539,124,https://github.com/fenner,"Print LSP ping timestamps as NTP time, not UNIX time",37,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/874,https://github.com/fenner,6,https://github.com/the-tcpdump-group/tcpdump/pull/874#issuecomment-694872402,"During development of LSP ping, the embedded timestamps were apparently changed from struct timeval to NTP time, but the printer has not been updated.
Fixes #873
(Sorry for filing an issue and then a pull request, I didn't think I was going to fix it but wanted to record the problem)","Do you mean these older captures contain packets that implement a draft that is different from the final specification?

Yes, I believe the timestamp change came from late in the development process.
I have no idea whether or not there are implementations in the wild that have this behavior.  It will break in 2036 when NTP time rolls over, though, so maybe it's not a good idea.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,874,2020-09-18T02:09:43Z,2020-09-20T15:37:49Z,2020-12-01T14:34:58Z,CLOSED,False,368,1539,124,https://github.com/fenner,"Print LSP ping timestamps as NTP time, not UNIX time",37,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/874,https://github.com/fenner,7,https://github.com/the-tcpdump-group/tcpdump/pull/874#issuecomment-694873000,"During development of LSP ping, the embedded timestamps were apparently changed from struct timeval to NTP time, but the printer has not been updated.
Fixes #873
(Sorry for filing an issue and then a pull request, I didn't think I was going to fix it but wanted to record the problem)","It looks like every CI build that runs make check fails

It looks like all of the builds using CMAKE + BUILD_LIBPCAP are failing too, due to brcm tests.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,874,2020-09-18T02:09:43Z,2020-09-20T15:37:49Z,2020-12-01T14:34:58Z,CLOSED,False,368,1539,124,https://github.com/fenner,"Print LSP ping timestamps as NTP time, not UNIX time",37,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/874,https://github.com/infrastation,8,https://github.com/the-tcpdump-group/tcpdump/pull/874#issuecomment-694884384,"During development of LSP ping, the embedded timestamps were apparently changed from struct timeval to NTP time, but the printer has not been updated.
Fixes #873
(Sorry for filing an issue and then a pull request, I didn't think I was going to fix it but wanted to record the problem)","On a second thought about the timestamp encoding, the function of a packet analyzer is to tell precisely what the bytes on the wire mean, so if something is sending packets with an incorrect (as far as the current spec defines it) encoding, the right thing to do would be just to print ""this packet says the timestamp is this (1934)"" and let the human apply any interpretation. Heuristics could be appropriate in the protocol implementation to aid in a transition from draft to draft, if such a problem still exists. Does it make sense?
CMAKE + BUILD_LIBPCAP failures may be related to the problem I had described on tcpdump-workers about a week ago.",True,{'HEART': ['https://github.com/mcr']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,874,2020-09-18T02:09:43Z,2020-09-20T15:37:49Z,2020-12-01T14:34:58Z,CLOSED,False,368,1539,124,https://github.com/fenner,"Print LSP ping timestamps as NTP time, not UNIX time",37,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/874,https://github.com/fenner,9,https://github.com/the-tcpdump-group/tcpdump/pull/874#issuecomment-694900456,"During development of LSP ping, the embedded timestamps were apparently changed from struct timeval to NTP time, but the printer has not been updated.
Fixes #873
(Sorry for filing an issue and then a pull request, I didn't think I was going to fix it but wanted to record the problem)","On a second thought about the timestamp encoding, the function of a packet analyzer is to tell precisely what the bytes on the wire mean, so if something is sending packets with an incorrect (as far as the current spec defines it) encoding, the right thing to do would be just to print ""this packet says the timestamp is this (1934)"" and let the human apply any interpretation. Heuristics could be appropriate in the protocol implementation to aid in a transition from draft to draft, if such a problem still exists. Does it make sense?

I've come to the same conclusion and will remove the heuristic.  I'll regenerate the failing test output with the encoded timestamp - after all, it's what the packets say - and squash and repost.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,874,2020-09-18T02:09:43Z,2020-09-20T15:37:49Z,2020-12-01T14:34:58Z,CLOSED,False,368,1539,124,https://github.com/fenner,"Print LSP ping timestamps as NTP time, not UNIX time",37,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/874,https://github.com/infrastation,10,https://github.com/the-tcpdump-group/tcpdump/pull/874#issuecomment-695042743,"During development of LSP ping, the embedded timestamps were apparently changed from struct timeval to NTP time, but the printer has not been updated.
Fixes #873
(Sorry for filing an issue and then a pull request, I didn't think I was going to fix it but wanted to record the problem)","Thank you for the update. Year 1934 in NTP encoding seems to work on Solaris 10 SPARC too, so it will not be necessary to modify the old .pcap files to make make check work there (as was necessary in commit bc3bc62).
One more thing: if ((int_part != 0) && (fraction != 0)) should use a logical ""or"" because in its current form it will print both 12345.0 and 0.12345 as ""no timestamp"".
When the commit of interest is ready, I am going to cherry-pick it into the master branch (w/o the change that removes the currently failing configurations from the matrix -- that could be ""allowed to fail"" for now, but the root cause must be fixed eventually).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,874,2020-09-18T02:09:43Z,2020-09-20T15:37:49Z,2020-12-01T14:34:58Z,CLOSED,False,368,1539,124,https://github.com/fenner,"Print LSP ping timestamps as NTP time, not UNIX time",37,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/874,https://github.com/infrastation,11,https://github.com/the-tcpdump-group/tcpdump/pull/874#issuecomment-695800898,"During development of LSP ping, the embedded timestamps were apparently changed from struct timeval to NTP time, but the printer has not been updated.
Fixes #873
(Sorry for filing an issue and then a pull request, I didn't think I was going to fix it but wanted to record the problem)","I have cherry-picked the substantial commit from this pull request into the master branch verbatim, and fixed the time testing condition in a separate commit with comments (this code had this bug way before your change). Thank you for the contribution!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,875,2020-09-20T16:35:20Z,,2020-09-23T11:53:41Z,OPEN,False,22,67,4,https://github.com/mcr,"remove redundant ND_TCHECK, let GET_ routines handle checks",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/875,https://github.com/mcr,1,https://github.com/the-tcpdump-group/tcpdump/pull/875,"This is my first attempt at removing ND_TCHECK macros.
I notice that the output prints slightly less in the tests.
Please validate that I'm doing the right thing.","This is my first attempt at removing ND_TCHECK macros.
I notice that the output prints slightly less in the tests.
Please validate that I'm doing the right thing.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,876,2020-09-22T13:29:16Z,2020-09-23T10:17:31Z,2020-09-26T12:56:32Z,MERGED,True,456,13,4,https://github.com/fenner,Update DHCP printer for messages and TLVs defined in RFC4388,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/876,https://github.com/fenner,1,https://github.com/the-tcpdump-group/tcpdump/pull/876,"RFC4388 defines 4 message types and two options, this change adds the message types and changes the options from their historical value to their RFC-defined values.
This points out that the IANA registry for bootp options went through a great cleanup many years ago but many of the removed types are still present in tcpdump.","RFC4388 defines 4 message types and two options, this change adds the message types and changes the options from their historical value to their RFC-defined values.
This points out that the IANA registry for bootp options went through a great cleanup many years ago but many of the removed types are still present in tcpdump.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,876,2020-09-22T13:29:16Z,2020-09-23T10:17:31Z,2020-09-26T12:56:32Z,MERGED,True,456,13,4,https://github.com/fenner,Update DHCP printer for messages and TLVs defined in RFC4388,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/876,https://github.com/fenner,2,https://github.com/the-tcpdump-group/tcpdump/pull/876#issuecomment-696727860,"RFC4388 defines 4 message types and two options, this change adds the message types and changes the options from their historical value to their RFC-defined values.
This points out that the IANA registry for bootp options went through a great cleanup many years ago but many of the removed types are still present in tcpdump.","I know Travis on master is broken, but https://travis-ci.org/github/fenner/tcpdump/builds/729289535?utm_medium=notification&utm_source=email is a successful run with the broken combinations commented out.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,876,2020-09-22T13:29:16Z,2020-09-23T10:17:31Z,2020-09-26T12:56:32Z,MERGED,True,456,13,4,https://github.com/fenner,Update DHCP printer for messages and TLVs defined in RFC4388,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/876,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/876#issuecomment-697271885,"RFC4388 defines 4 message types and two options, this change adds the message types and changes the options from their historical value to their RFC-defined values.
This points out that the IANA registry for bootp options went through a great cleanup many years ago but many of the removed types are still present in tcpdump.",Thank you!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,878,2020-09-26T10:18:23Z,,2021-07-12T07:41:39Z,OPEN,False,205,7,12,https://github.com/george-hopkins,netlink: Implement printer,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/878,https://github.com/george-hopkins,1,https://github.com/the-tcpdump-group/tcpdump/pull/878,"This patch introduces a printer for DLT_NETLINK, Linux netlink packets. Each packet might contain multiple messages. The 16-byte header is the same as in SLL. Usually the packets are captured with the help of the nlmon kernel module and do not cross host boundaries. Since the endianness of the platform is not captured, the printer will assume it is on a host with the same endianness for now.
There might be some capture files which use DLT_LINUX_SLL. In these cases, the dissector will call the new printer as well.","This patch introduces a printer for DLT_NETLINK, Linux netlink packets. Each packet might contain multiple messages. The 16-byte header is the same as in SLL. Usually the packets are captured with the help of the nlmon kernel module and do not cross host boundaries. Since the endianness of the platform is not captured, the printer will assume it is on a host with the same endianness for now.
There might be some capture files which use DLT_LINUX_SLL. In these cases, the dissector will call the new printer as well.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,878,2020-09-26T10:18:23Z,,2021-07-12T07:41:39Z,OPEN,False,205,7,12,https://github.com/george-hopkins,netlink: Implement printer,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/878,https://github.com/guyharris,2,https://github.com/the-tcpdump-group/tcpdump/pull/878#issuecomment-699670570,"This patch introduces a printer for DLT_NETLINK, Linux netlink packets. Each packet might contain multiple messages. The 16-byte header is the same as in SLL. Usually the packets are captured with the help of the nlmon kernel module and do not cross host boundaries. Since the endianness of the platform is not captured, the printer will assume it is on a host with the same endianness for now.
There might be some capture files which use DLT_LINUX_SLL. In these cases, the dissector will call the new printer as well.","Usually the packets are captured with the help of the nlmon kernel module and do not cross host boundaries.

A packet crosses a host boundary if you email it to somebody so they can look at it, unless the capture was done on a time-sharing machine into which you both log in.

Since the endianness of the platform is not captured, the printer will assume it is on a host with the same endianness for now.

That's causing the tests to fail.
Wireshark makes an attempt to guess the byte order:
/*
 * We do not know the endianness of the capture host, we have to guess.
 * Compare the size of the message with the reported size of the TVB,
 * take the endianness in which the messsage length is closer to
 * the size of the TVB. Normally we have messages with less
 * than 10KiB here so the sizes are very huge in the wrong endianness.
 */

What it does is:

find the remaining length of the packet on the wire (len, not caplen, so that's len - amount parsed before the length of the message);
fetch the length of the message, both in big-endian and little-endian byte orders;
pick the byte order that minimizes the absolute value of the difference between the length remaining and the length of the message.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,878,2020-09-26T10:18:23Z,,2021-07-12T07:41:39Z,OPEN,False,205,7,12,https://github.com/george-hopkins,netlink: Implement printer,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/878,https://github.com/fenner,3,https://github.com/the-tcpdump-group/tcpdump/pull/878#issuecomment-700044316,"This patch introduces a printer for DLT_NETLINK, Linux netlink packets. Each packet might contain multiple messages. The 16-byte header is the same as in SLL. Usually the packets are captured with the help of the nlmon kernel module and do not cross host boundaries. Since the endianness of the platform is not captured, the printer will assume it is on a host with the same endianness for now.
There might be some capture files which use DLT_LINUX_SLL. In these cases, the dissector will call the new printer as well.","Can you assume that a live capture is host endian, and then use pcap_is_swapped() to decide to swap fields when reading from a capture file?  (Obviously some infrastructure would have to be created to propagate the swapped-ness info from pcap into the printer)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,878,2020-09-26T10:18:23Z,,2021-07-12T07:41:39Z,OPEN,False,205,7,12,https://github.com/george-hopkins,netlink: Implement printer,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/878,https://github.com/guyharris,4,https://github.com/the-tcpdump-group/tcpdump/pull/878#issuecomment-702332160,"This patch introduces a printer for DLT_NETLINK, Linux netlink packets. Each packet might contain multiple messages. The 16-byte header is the same as in SLL. Usually the packets are captured with the help of the nlmon kernel module and do not cross host boundaries. Since the endianness of the platform is not captured, the printer will assume it is on a host with the same endianness for now.
There might be some capture files which use DLT_LINUX_SLL. In these cases, the dissector will call the new printer as well.","Can you assume that a live capture is host endian, and then use pcap_is_swapped() to decide to swap fields when reading from a capture file?

That almost works.  However, if, for example:


you do a capture on a big-endian machine;


you read the capture on a little-endian machine, filtering it, and writing the packets that match the filter to a new file, doing tcpdump -r {file} -w {new file} {filter};


you end up with a little-endian version of the file.
That's why libpcap has code to byte-swap fields in some formats where the link-layer header is specified as host-endian (swap_pseudo_headers(), and routines it calls, in pcap-common.c), and Wireshark's pcap/pcapng-reading code does the same.  Unfortunately, that's more work to do with netlink.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,878,2020-09-26T10:18:23Z,,2021-07-12T07:41:39Z,OPEN,False,205,7,12,https://github.com/george-hopkins,netlink: Implement printer,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/878,https://github.com/george-hopkins,5,https://github.com/the-tcpdump-group/tcpdump/pull/878#issuecomment-702713472,"This patch introduces a printer for DLT_NETLINK, Linux netlink packets. Each packet might contain multiple messages. The 16-byte header is the same as in SLL. Usually the packets are captured with the help of the nlmon kernel module and do not cross host boundaries. Since the endianness of the platform is not captured, the printer will assume it is on a host with the same endianness for now.
There might be some capture files which use DLT_LINUX_SLL. In these cases, the dissector will call the new printer as well.",Thank you for the review! I added the same heuristic to guess the endianness and added a capture file which was captured on a big-endian system but filtered (and thus rewritten) on a little-endian system.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,878,2020-09-26T10:18:23Z,,2021-07-12T07:41:39Z,OPEN,False,205,7,12,https://github.com/george-hopkins,netlink: Implement printer,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/878,https://github.com/fxlb,6,https://github.com/the-tcpdump-group/tcpdump/pull/878#issuecomment-842931299,"This patch introduces a printer for DLT_NETLINK, Linux netlink packets. Each packet might contain multiple messages. The 16-byte header is the same as in SLL. Usually the packets are captured with the help of the nlmon kernel module and do not cross host boundaries. Since the endianness of the platform is not captured, the printer will assume it is on a host with the same endianness for now.
There might be some capture files which use DLT_LINUX_SLL. In these cases, the dissector will call the new printer as well.","Any reason for some ""truncated"" messages?
Example:
sudo ./tcpdump -#v -i nlmon0
tcpdump: listening on nlmon0, link-type NETLINK (Linux netlink), snapshot length 262144 bytes
    1  09:26:47.203019 Route: length 56
        type 18, length 40, flags 0x0301, sequence 1621322808, pid 0
[...]
    6  09:26:47.203513 Route: length 168
        type 22, length 24, flags 0x0301, sequence 1621322809, pid 0
        type 0, length 0, flags 0x0000, sequence 0, pid 0 [|netlink] <-------------------------------------------

To reproduce (on Debian Bullseye):
sudo modprobe nlmon
sudo ip link add type nlmon
sudo ip link set nlmon0 up
ip a",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,879,2020-09-28T20:09:36Z,2020-10-03T15:41:21Z,2020-10-03T15:41:40Z,MERGED,True,16,3,6,https://github.com/dcaratti,"mptcp: add support for ADD_ADDR ""echo bit""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/879,https://github.com/dcaratti,1,https://github.com/the-tcpdump-group/tcpdump/pull/879,"print ""echo"" if the echo bit is present in the ADD_ADDR suboption (see
RFC8684 §3.4.1).
Signed-off-by: Davide Caratti dcaratti@redhat.com","print ""echo"" if the echo bit is present in the ADD_ADDR suboption (see
RFC8684 §3.4.1).
Signed-off-by: Davide Caratti dcaratti@redhat.com",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,879,2020-09-28T20:09:36Z,2020-10-03T15:41:21Z,2020-10-03T15:41:40Z,MERGED,True,16,3,6,https://github.com/dcaratti,"mptcp: add support for ADD_ADDR ""echo bit""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/879,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/879#issuecomment-700266507,"print ""echo"" if the echo bit is present in the ADD_ADDR suboption (see
RFC8684 §3.4.1).
Signed-off-by: Davide Caratti dcaratti@redhat.com","Thank you for suggesting this improvement. If you want a simple solution for a simple problem, if (GET_U_1(add_addr->sub_echo) & 0x01) would do the job without the need to scroll 240 lines away to unpack a single-use macro. However, it you want to solve the problem in a systematic way, you can articulate the MBZ bits of the 4-bit field by having a simple struct tok[] variable and using it with bittok2str().",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,879,2020-09-28T20:09:36Z,2020-10-03T15:41:21Z,2020-10-03T15:41:40Z,MERGED,True,16,3,6,https://github.com/dcaratti,"mptcp: add support for ADD_ADDR ""echo bit""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/879,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/879#issuecomment-700267778,"print ""echo"" if the echo bit is present in the ADD_ADDR suboption (see
RFC8684 §3.4.1).
Signed-off-by: Davide Caratti dcaratti@redhat.com","Apparently, none of the existing MPTCP tests have the E bit set, do you have a sample .pcap file for this change?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,879,2020-09-28T20:09:36Z,2020-10-03T15:41:21Z,2020-10-03T15:41:40Z,MERGED,True,16,3,6,https://github.com/dcaratti,"mptcp: add support for ADD_ADDR ""echo bit""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/879,https://github.com/dcaratti,4,https://github.com/the-tcpdump-group/tcpdump/pull/879#issuecomment-700535040,"print ""echo"" if the echo bit is present in the ADD_ADDR suboption (see
RFC8684 §3.4.1).
Signed-off-by: Davide Caratti dcaratti@redhat.com","Thank you for suggesting this improvement. If you want a simple solution for a simple problem, if (GET_U_1(add_addr->sub_echo) & 0x01) would do the job without the need to scroll 240 lines away to unpack a single-use macro. However, it you want to solve the problem in a systematic way, you can articulate the MBZ bits of the 4-bit field by having a simple struct tok[] variable and using it with bittok2str().

thanks for reviewing! Ok, maybe the first option is the quickest one.

Apparently, none of the existing MPTCP tests have the E bit set, do you have a sample .pcap file for this change?

the echo bit is described in the recent V1 specification, and its implementation landed in Linux for the first time a couple of weeks ago. Sure, I will add a test that uses a trace from packetdrill or kselftests.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,879,2020-09-28T20:09:36Z,2020-10-03T15:41:21Z,2020-10-03T15:41:40Z,MERGED,True,16,3,6,https://github.com/dcaratti,"mptcp: add support for ADD_ADDR ""echo bit""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/879,https://github.com/dcaratti,5,https://github.com/the-tcpdump-group/tcpdump/pull/879#issuecomment-702838531,"print ""echo"" if the echo bit is present in the ADD_ADDR suboption (see
RFC8684 §3.4.1).
Signed-off-by: Davide Caratti dcaratti@redhat.com","Thank you for suggesting this improvement. If you want a simple solution for a simple problem, if (GET_U_1(add_addr->sub_echo) & 0x01) would do the job without the need to scroll 240 lines away to unpack a single-use macro. However, it you want to solve the problem in a systematic way, you can articulate the MBZ bits of the 4-bit field by having a simple struct tok[] variable and using it with bittok2str().

thanks for reviewing! Ok, maybe the first option is the quickest one.

on a second thought, it's better to check all values of these 4 bits, like you suggested: in this way, it becomes possible to:

check also the correctness of 'ver' in v0 packets, as specified in version 0 of the protocol
inform users when MBZ bits are non-zero on v0 and v1 logs



Apparently, none of the existing MPTCP tests have the E bit set, do you have a sample .pcap file for this change?

the echo bit is described in the recent V1 specification, and its implementation landed in Linux for the first time a couple of weeks ago. Sure, I will add a test that uses a trace from packetdrill or kselftests.

... done",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,879,2020-09-28T20:09:36Z,2020-10-03T15:41:21Z,2020-10-03T15:41:40Z,MERGED,True,16,3,6,https://github.com/dcaratti,"mptcp: add support for ADD_ADDR ""echo bit""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/879,https://github.com/infrastation,6,https://github.com/the-tcpdump-group/tcpdump/pull/879#issuecomment-702855233,"print ""echo"" if the echo bit is present in the ADD_ADDR suboption (see
RFC8684 §3.4.1).
Signed-off-by: Davide Caratti dcaratti@redhat.com","Thank you. It is unusual to validate protocol version numbers with bitmaps, but let's see. The bitmap is 16-bit, but the argument to bittok2str() is 8-bit. Also the MBZ bit numbers are one-off. Could you check?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,879,2020-09-28T20:09:36Z,2020-10-03T15:41:21Z,2020-10-03T15:41:40Z,MERGED,True,16,3,6,https://github.com/dcaratti,"mptcp: add support for ADD_ADDR ""echo bit""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/879,https://github.com/dcaratti,7,https://github.com/the-tcpdump-group/tcpdump/pull/879#issuecomment-702864413,"print ""echo"" if the echo bit is present in the ADD_ADDR suboption (see
RFC8684 §3.4.1).
Signed-off-by: Davide Caratti dcaratti@redhat.com","Thank you. It is unusual to validate protocol version numbers with bitmaps, but let's see. The bitmap is 16-bit, but the argument to bittok2str() is 8-bit. Also the MBZ bit numbers are one-off. Could you check?

... because it's not a bitmap actually, and I should use tok2str() rather than bittok2str(). When dissecting an ADD_ADDR
conformant to MPTCP v0, the echo bit is systematically 0 and the 'res' bit contain either  0x2 or 0x3. As a consequence, the whole 4 bits contain 0x4 or 0x6 (that is a hint about the length of the IP address in the option). On the contrary, when dissecting an ADD_ADDR conformant to MPTCP v1, the echo bit can be 0 or 1, while the remaining bits must be zero.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,879,2020-09-28T20:09:36Z,2020-10-03T15:41:21Z,2020-10-03T15:41:40Z,MERGED,True,16,3,6,https://github.com/dcaratti,"mptcp: add support for ADD_ADDR ""echo bit""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/879,https://github.com/infrastation,8,https://github.com/the-tcpdump-group/tcpdump/pull/879#issuecomment-702896049,"print ""echo"" if the echo bit is present in the ADD_ADDR suboption (see
RFC8684 §3.4.1).
Signed-off-by: Davide Caratti dcaratti@redhat.com",It would be possible to define one bit as the smallest amount of binary information that can cause a considerable confusion.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,879,2020-09-28T20:09:36Z,2020-10-03T15:41:21Z,2020-10-03T15:41:40Z,MERGED,True,16,3,6,https://github.com/dcaratti,"mptcp: add support for ADD_ADDR ""echo bit""",1,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/879,https://github.com/infrastation,9,https://github.com/the-tcpdump-group/tcpdump/pull/879#issuecomment-703122637,"print ""echo"" if the echo bit is present in the ADD_ADDR suboption (see
RFC8684 §3.4.1).
Signed-off-by: Davide Caratti dcaratti@redhat.com","All looks good now, merged, thank you!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,880,2020-09-30T08:46:40Z,2020-10-03T06:15:31Z,2020-10-03T06:15:36Z,CLOSED,False,5,1,1,https://github.com/gvanem,Fix ssize_t for _WIN64,1,"['compiling', 'windows']",https://github.com/the-tcpdump-group/tcpdump/pull/880,https://github.com/gvanem,1,https://github.com/the-tcpdump-group/tcpdump/pull/880,"Compiling Windump for x64 using clang-cl, gives this warning:
tcpdump.c(1085,45): warning: format specifies type 'ssize_t' (aka 'long long') but the argument has type 'ssize_t'
      (aka 'int') [-Wformat]
                error(""short read %s (%zd != %d)"", fname, cc, (int)buf.st_size);
                                      ~~~                 ^~
                                      %zd

So do as MinGW does and define ssize_t as __int64 for _WIN64.","Compiling Windump for x64 using clang-cl, gives this warning:
tcpdump.c(1085,45): warning: format specifies type 'ssize_t' (aka 'long long') but the argument has type 'ssize_t'
      (aka 'int') [-Wformat]
                error(""short read %s (%zd != %d)"", fname, cc, (int)buf.st_size);
                                      ~~~                 ^~
                                      %zd

So do as MinGW does and define ssize_t as __int64 for _WIN64.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,880,2020-09-30T08:46:40Z,2020-10-03T06:15:31Z,2020-10-03T06:15:36Z,CLOSED,False,5,1,1,https://github.com/gvanem,Fix ssize_t for _WIN64,1,"['compiling', 'windows']",https://github.com/the-tcpdump-group/tcpdump/pull/880,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/880#issuecomment-701417863,"Compiling Windump for x64 using clang-cl, gives this warning:
tcpdump.c(1085,45): warning: format specifies type 'ssize_t' (aka 'long long') but the argument has type 'ssize_t'
      (aka 'int') [-Wformat]
                error(""short read %s (%zd != %d)"", fname, cc, (int)buf.st_size);
                                      ~~~                 ^~
                                      %zd

So do as MinGW does and define ssize_t as __int64 for _WIN64.","Some macOS jobs fail in Travis CI because of the environment bootstrap failure, so the CI fault is a false negative. The change looks trivial at a glance, but because so many fine details were involved in spelling integer types right, I would not be a good enough reviewer for this change.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,880,2020-09-30T08:46:40Z,2020-10-03T06:15:31Z,2020-10-03T06:15:36Z,CLOSED,False,5,1,1,https://github.com/gvanem,Fix ssize_t for _WIN64,1,"['compiling', 'windows']",https://github.com/the-tcpdump-group/tcpdump/pull/880,https://github.com/gvanem,3,https://github.com/the-tcpdump-group/tcpdump/pull/880#issuecomment-701430645,"Compiling Windump for x64 using clang-cl, gives this warning:
tcpdump.c(1085,45): warning: format specifies type 'ssize_t' (aka 'long long') but the argument has type 'ssize_t'
      (aka 'int') [-Wformat]
                error(""short read %s (%zd != %d)"", fname, cc, (int)buf.st_size);
                                      ~~~                 ^~
                                      %zd

So do as MinGW does and define ssize_t as __int64 for _WIN64.","so the CI fault is a false negative.

AFAICS, looking at the Travis details, that has nothing to do with this PR. Some issue with curl/homebrew:
error: RPC failed; curl 18 transfer closed with outstanding read data remaining",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,880,2020-09-30T08:46:40Z,2020-10-03T06:15:31Z,2020-10-03T06:15:36Z,CLOSED,False,5,1,1,https://github.com/gvanem,Fix ssize_t for _WIN64,1,"['compiling', 'windows']",https://github.com/the-tcpdump-group/tcpdump/pull/880,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/880#issuecomment-701535976,"Compiling Windump for x64 using clang-cl, gives this warning:
tcpdump.c(1085,45): warning: format specifies type 'ssize_t' (aka 'long long') but the argument has type 'ssize_t'
      (aka 'int') [-Wformat]
                error(""short read %s (%zd != %d)"", fname, cc, (int)buf.st_size);
                                      ~~~                 ^~
                                      %zd

So do as MinGW does and define ssize_t as __int64 for _WIN64.","Yes, that is correct. I have raised the failure with Travis support.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,880,2020-09-30T08:46:40Z,2020-10-03T06:15:31Z,2020-10-03T06:15:36Z,CLOSED,False,5,1,1,https://github.com/gvanem,Fix ssize_t for _WIN64,1,"['compiling', 'windows']",https://github.com/the-tcpdump-group/tcpdump/pull/880,https://github.com/guyharris,5,https://github.com/the-tcpdump-group/tcpdump/pull/880#issuecomment-701557535,"Compiling Windump for x64 using clang-cl, gives this warning:
tcpdump.c(1085,45): warning: format specifies type 'ssize_t' (aka 'long long') but the argument has type 'ssize_t'
      (aka 'int') [-Wformat]
                error(""short read %s (%zd != %d)"", fname, cc, (int)buf.st_size);
                                      ~~~                 ^~
                                      %zd

So do as MinGW does and define ssize_t as __int64 for _WIN64.",That function probably needs some UN*X-vs-Windows and 32-bit-vs-64-bit cleanup.  I'll look at that.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,880,2020-09-30T08:46:40Z,2020-10-03T06:15:31Z,2020-10-03T06:15:36Z,CLOSED,False,5,1,1,https://github.com/gvanem,Fix ssize_t for _WIN64,1,"['compiling', 'windows']",https://github.com/the-tcpdump-group/tcpdump/pull/880,https://github.com/guyharris,6,https://github.com/the-tcpdump-group/tcpdump/pull/880#issuecomment-701609176,"Compiling Windump for x64 using clang-cl, gives this warning:
tcpdump.c(1085,45): warning: format specifies type 'ssize_t' (aka 'long long') but the argument has type 'ssize_t'
      (aka 'int') [-Wformat]
                error(""short read %s (%zd != %d)"", fname, cc, (int)buf.st_size);
                                      ~~~                 ^~
                                      %zd

So do as MinGW does and define ssize_t as __int64 for _WIN64.","That function probably needs some UN*X-vs-Windows and 32-bit-vs-64-bit cleanup. I'll look at that.

faf8fb7 should clear this up.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,880,2020-09-30T08:46:40Z,2020-10-03T06:15:31Z,2020-10-03T06:15:36Z,CLOSED,False,5,1,1,https://github.com/gvanem,Fix ssize_t for _WIN64,1,"['compiling', 'windows']",https://github.com/the-tcpdump-group/tcpdump/pull/880,https://github.com/infrastation,7,https://github.com/the-tcpdump-group/tcpdump/pull/880#issuecomment-702843317,"Compiling Windump for x64 using clang-cl, gives this warning:
tcpdump.c(1085,45): warning: format specifies type 'ssize_t' (aka 'long long') but the argument has type 'ssize_t'
      (aka 'int') [-Wformat]
                error(""short read %s (%zd != %d)"", fname, cc, (int)buf.st_size);
                                      ~~~                 ^~
                                      %zd

So do as MinGW does and define ssize_t as __int64 for _WIN64.","@gvanem, could you confirm the fix and close this issue if it is resolved?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,880,2020-09-30T08:46:40Z,2020-10-03T06:15:31Z,2020-10-03T06:15:36Z,CLOSED,False,5,1,1,https://github.com/gvanem,Fix ssize_t for _WIN64,1,"['compiling', 'windows']",https://github.com/the-tcpdump-group/tcpdump/pull/880,https://github.com/gvanem,8,https://github.com/the-tcpdump-group/tcpdump/pull/880#issuecomment-703054088,"Compiling Windump for x64 using clang-cl, gives this warning:
tcpdump.c(1085,45): warning: format specifies type 'ssize_t' (aka 'long long') but the argument has type 'ssize_t'
      (aka 'int') [-Wformat]
                error(""short read %s (%zd != %d)"", fname, cc, (int)buf.st_size);
                                      ~~~                 ^~
                                      %zd

So do as MinGW does and define ssize_t as __int64 for _WIN64.","could you confirm the fix and close this issue if it is resolved?

Yes, the warning on x64 is now gone. Closing.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,882,2020-10-03T21:29:59Z,2021-07-13T19:02:32Z,2021-07-13T19:02:59Z,MERGED,True,155,45,9,https://github.com/ishaangandhi,Add dissector for ICMP Interface Identification Object,2,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/882,https://github.com/ishaangandhi,1,https://github.com/the-tcpdump-group/tcpdump/pull/882,"The ICMP dissector currently assumes all ICMP multi-part extensions are MPLS extensions. This change correctly identifies these extensions as Multi-part extensions, not MPLS, and dissects the interface information object, as specified in RFC 5837.","The ICMP dissector currently assumes all ICMP multi-part extensions are MPLS extensions. This change correctly identifies these extensions as Multi-part extensions, not MPLS, and dissects the interface information object, as specified in RFC 5837.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,882,2020-10-03T21:29:59Z,2021-07-13T19:02:32Z,2021-07-13T19:02:59Z,MERGED,True,155,45,9,https://github.com/ishaangandhi,Add dissector for ICMP Interface Identification Object,2,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/882,https://github.com/ishaangandhi,2,https://github.com/the-tcpdump-group/tcpdump/pull/882#issuecomment-703175247,"The ICMP dissector currently assumes all ICMP multi-part extensions are MPLS extensions. This change correctly identifies these extensions as Multi-part extensions, not MPLS, and dissects the interface information object, as specified in RFC 5837.",One of the Travis jobs (https://travis-ci.org/github/the-tcpdump-group/tcpdump/jobs/732601177) are buggy (keeps on rerunning the same command). You might need to restart it.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,882,2020-10-03T21:29:59Z,2021-07-13T19:02:32Z,2021-07-13T19:02:59Z,MERGED,True,155,45,9,https://github.com/ishaangandhi,Add dissector for ICMP Interface Identification Object,2,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/882,https://github.com/ishaangandhi,3,https://github.com/the-tcpdump-group/tcpdump/pull/882#issuecomment-706813878,"The ICMP dissector currently assumes all ICMP multi-part extensions are MPLS extensions. This change correctly identifies these extensions as Multi-part extensions, not MPLS, and dissects the interface information object, as specified in RFC 5837.",Gently bumping this PR,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,882,2020-10-03T21:29:59Z,2021-07-13T19:02:32Z,2021-07-13T19:02:59Z,MERGED,True,155,45,9,https://github.com/ishaangandhi,Add dissector for ICMP Interface Identification Object,2,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/882,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/882#issuecomment-707865352,"The ICMP dissector currently assumes all ICMP multi-part extensions are MPLS extensions. This change correctly identifies these extensions as Multi-part extensions, not MPLS, and dissects the interface information object, as specified in RFC 5837.","Thank you for preparing this work. I will not be able to do a complete review in the next few weeks, so somebody else might do that first.
However, if I was making this change I would consider splitting it into two focused commits: one with only the changes that spell ICMP multipart instead of MPLS in the existing code, and another with only the new implementation of code point 2 and the associated test.
Also please terminate icmp_interface_identification_role_values[] with { 0, NULL } in case some code in future uses it with a value greater than 3.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,882,2020-10-03T21:29:59Z,2021-07-13T19:02:32Z,2021-07-13T19:02:59Z,MERGED,True,155,45,9,https://github.com/ishaangandhi,Add dissector for ICMP Interface Identification Object,2,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/882,https://github.com/ishaangandhi,5,https://github.com/the-tcpdump-group/tcpdump/pull/882#issuecomment-729332359,"The ICMP dissector currently assumes all ICMP multi-part extensions are MPLS extensions. This change correctly identifies these extensions as Multi-part extensions, not MPLS, and dissects the interface information object, as specified in RFC 5837.","Hi, @infrastation. Would you prefer I split into two focussed commits before performing a code review?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,882,2020-10-03T21:29:59Z,2021-07-13T19:02:32Z,2021-07-13T19:02:59Z,MERGED,True,155,45,9,https://github.com/ishaangandhi,Add dissector for ICMP Interface Identification Object,2,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/882,https://github.com/infrastation,6,https://github.com/the-tcpdump-group/tcpdump/pull/882#issuecomment-729505150,"The ICMP dissector currently assumes all ICMP multi-part extensions are MPLS extensions. This change correctly identifies these extensions as Multi-part extensions, not MPLS, and dissects the interface information object, as specified in RFC 5837.","Please try to do that if you can, and rebase on the current master branch.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,882,2020-10-03T21:29:59Z,2021-07-13T19:02:32Z,2021-07-13T19:02:59Z,MERGED,True,155,45,9,https://github.com/ishaangandhi,Add dissector for ICMP Interface Identification Object,2,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/882,https://github.com/ishaangandhi,7,https://github.com/the-tcpdump-group/tcpdump/pull/882#issuecomment-734428864,"The ICMP dissector currently assumes all ICMP multi-part extensions are MPLS extensions. This change correctly identifies these extensions as Multi-part extensions, not MPLS, and dissects the interface information object, as specified in RFC 5837.",Are f94b3b4 and ca46014 ok?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,882,2020-10-03T21:29:59Z,2021-07-13T19:02:32Z,2021-07-13T19:02:59Z,MERGED,True,155,45,9,https://github.com/ishaangandhi,Add dissector for ICMP Interface Identification Object,2,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/882,https://github.com/ishaangandhi,8,https://github.com/the-tcpdump-group/tcpdump/pull/882#issuecomment-816990425,"The ICMP dissector currently assumes all ICMP multi-part extensions are MPLS extensions. This change correctly identifies these extensions as Multi-part extensions, not MPLS, and dissects the interface information object, as specified in RFC 5837.","Hi, gently bumping this again.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,882,2020-10-03T21:29:59Z,2021-07-13T19:02:32Z,2021-07-13T19:02:59Z,MERGED,True,155,45,9,https://github.com/ishaangandhi,Add dissector for ICMP Interface Identification Object,2,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/882,https://github.com/fxlb,9,https://github.com/the-tcpdump-group/tcpdump/pull/882#issuecomment-843880104,"The ICMP dissector currently assumes all ICMP multi-part extensions are MPLS extensions. This change correctly identifies these extensions as Multi-part extensions, not MPLS, and dissects the interface information object, as specified in RFC 5837.","Also please terminate icmp_interface_identification_role_values[] with { 0, NULL } in case some code in future uses it with a value greater than 3.

+1",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,882,2020-10-03T21:29:59Z,2021-07-13T19:02:32Z,2021-07-13T19:02:59Z,MERGED,True,155,45,9,https://github.com/ishaangandhi,Add dissector for ICMP Interface Identification Object,2,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/882,https://github.com/fxlb,10,https://github.com/the-tcpdump-group/tcpdump/pull/882#issuecomment-878316680,"The ICMP dissector currently assumes all ICMP multi-part extensions are MPLS extensions. This change correctly identifies these extensions as Multi-part extensions, not MPLS, and dissects the interface information object, as specified in RFC 5837.","Please

Rebase on top of the-tcpdump-group:master.
Fix the conflicts.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,882,2020-10-03T21:29:59Z,2021-07-13T19:02:32Z,2021-07-13T19:02:59Z,MERGED,True,155,45,9,https://github.com/ishaangandhi,Add dissector for ICMP Interface Identification Object,2,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/882,https://github.com/ishaangandhi,11,https://github.com/the-tcpdump-group/tcpdump/pull/882#issuecomment-878560570,"The ICMP dissector currently assumes all ICMP multi-part extensions are MPLS extensions. This change correctly identifies these extensions as Multi-part extensions, not MPLS, and dissects the interface information object, as specified in RFC 5837.","Please

Rebase on top of the-tcpdump-group:master.
Fix the conflicts.


Done",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,882,2020-10-03T21:29:59Z,2021-07-13T19:02:32Z,2021-07-13T19:02:59Z,MERGED,True,155,45,9,https://github.com/ishaangandhi,Add dissector for ICMP Interface Identification Object,2,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/882,https://github.com/ishaangandhi,12,https://github.com/the-tcpdump-group/tcpdump/pull/882#issuecomment-879317969,"The ICMP dissector currently assumes all ICMP multi-part extensions are MPLS extensions. This change correctly identifies these extensions as Multi-part extensions, not MPLS, and dissects the interface information object, as specified in RFC 5837.","@fxlb This PR has been removed and all checks have passed. Can you remove the ""needs work"" label and merge it?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,882,2020-10-03T21:29:59Z,2021-07-13T19:02:32Z,2021-07-13T19:02:59Z,MERGED,True,155,45,9,https://github.com/ishaangandhi,Add dissector for ICMP Interface Identification Object,2,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/882,https://github.com/fxlb,13,https://github.com/the-tcpdump-group/tcpdump/pull/882#issuecomment-879327720,"The ICMP dissector currently assumes all ICMP multi-part extensions are MPLS extensions. This change correctly identifies these extensions as Multi-part extensions, not MPLS, and dissects the interface information object, as specified in RFC 5837.",Thank you!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,883,2020-10-11T20:18:37Z,,2022-01-10T18:38:12Z,OPEN,False,247,5,5,https://github.com/nickludwig,Implementation of IPv4 Extended Echo Request/Response,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/883,https://github.com/nickludwig,1,https://github.com/the-tcpdump-group/tcpdump/pull/883,"As specified in RFC 8337, an implementation of the IPv4 Extended Echo Request and Response within the print-icmp.c file. The included .pcap file is titled icmp-ext-ipv4.pcap
Link to RFC: https://tools.ietf.org/html/rfc8335#section-2.1 
Link to Wireshark implementation, where I found and used the example ipv4 pcap file: https://gitlab.com/wireshark/wireshark/-/issues/14457","As specified in RFC 8337, an implementation of the IPv4 Extended Echo Request and Response within the print-icmp.c file. The included .pcap file is titled icmp-ext-ipv4.pcap
Link to RFC: https://tools.ietf.org/html/rfc8335#section-2.1 
Link to Wireshark implementation, where I found and used the example ipv4 pcap file: https://gitlab.com/wireshark/wireshark/-/issues/14457",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,883,2020-10-11T20:18:37Z,,2022-01-10T18:38:12Z,OPEN,False,247,5,5,https://github.com/nickludwig,Implementation of IPv4 Extended Echo Request/Response,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/883,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/883#issuecomment-706774392,"As specified in RFC 8337, an implementation of the IPv4 Extended Echo Request and Response within the print-icmp.c file. The included .pcap file is titled icmp-ext-ipv4.pcap
Link to RFC: https://tools.ietf.org/html/rfc8335#section-2.1 
Link to Wireshark implementation, where I found and used the example ipv4 pcap file: https://gitlab.com/wireshark/wireshark/-/issues/14457","Thank you for suggesting this improvement. This pull request has 9 ""work in progress"" commits, is this the right branch?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,883,2020-10-11T20:18:37Z,,2022-01-10T18:38:12Z,OPEN,False,247,5,5,https://github.com/nickludwig,Implementation of IPv4 Extended Echo Request/Response,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/883,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/883#issuecomment-706775066,"As specified in RFC 8337, an implementation of the IPv4 Extended Echo Request and Response within the print-icmp.c file. The included .pcap file is titled icmp-ext-ipv4.pcap
Link to RFC: https://tools.ietf.org/html/rfc8335#section-2.1 
Link to Wireshark implementation, where I found and used the example ipv4 pcap file: https://gitlab.com/wireshark/wireshark/-/issues/14457","Obviously, the CI builds did not pass because of the compiler warnings, please run touch .devel && ./configure && make clean && make -s all (item 4 in CONTRIBUTING) to see them locally and to fix them.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,883,2020-10-11T20:18:37Z,,2022-01-10T18:38:12Z,OPEN,False,247,5,5,https://github.com/nickludwig,Implementation of IPv4 Extended Echo Request/Response,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/883,https://github.com/nickludwig,4,https://github.com/the-tcpdump-group/tcpdump/pull/883#issuecomment-707461853,"As specified in RFC 8337, an implementation of the IPv4 Extended Echo Request and Response within the print-icmp.c file. The included .pcap file is titled icmp-ext-ipv4.pcap
Link to RFC: https://tools.ietf.org/html/rfc8335#section-2.1 
Link to Wireshark implementation, where I found and used the example ipv4 pcap file: https://gitlab.com/wireshark/wireshark/-/issues/14457","Ah, yes. My bad. I'll fix the WIP commits/the CI builds and get back to you
in the next few days.
…
On Sun, Oct 11, 2020 at 3:08 PM Denis Ovsienko ***@***.***> wrote:
 Obviously, the CI builds did not pass because of the compiler warnings,
 please run touch .devel && ./configure && make clean && make -s all (item
 4 in CONTRIBUTING) to see them locally and to fix them.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#883 (comment)>,
 or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/AMIBK5XPGKG5EQDPGJK5AFTSKIUHNANCNFSM4SL7557A>
 .",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,883,2020-10-11T20:18:37Z,,2022-01-10T18:38:12Z,OPEN,False,247,5,5,https://github.com/nickludwig,Implementation of IPv4 Extended Echo Request/Response,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/883,https://github.com/nickludwig,5,https://github.com/the-tcpdump-group/tcpdump/pull/883#issuecomment-712429890,"As specified in RFC 8337, an implementation of the IPv4 Extended Echo Request and Response within the print-icmp.c file. The included .pcap file is titled icmp-ext-ipv4.pcap
Link to RFC: https://tools.ietf.org/html/rfc8335#section-2.1 
Link to Wireshark implementation, where I found and used the example ipv4 pcap file: https://gitlab.com/wireshark/wireshark/-/issues/14457",Fixed the previous issues.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,883,2020-10-11T20:18:37Z,,2022-01-10T18:38:12Z,OPEN,False,247,5,5,https://github.com/nickludwig,Implementation of IPv4 Extended Echo Request/Response,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/883,https://github.com/infrastation,6,https://github.com/the-tcpdump-group/tcpdump/pull/883#issuecomment-712502047,"As specified in RFC 8337, an implementation of the IPv4 Extended Echo Request and Response within the print-icmp.c file. The included .pcap file is titled icmp-ext-ipv4.pcap
Link to RFC: https://tools.ietf.org/html/rfc8335#section-2.1 
Link to Wireshark implementation, where I found and used the example ipv4 pcap file: https://gitlab.com/wireshark/wireshark/-/issues/14457","Thank you. Please do not include configure in this case even if it is slightly different, also please find a good place in tests/TESTLIST and follow items 6 and 7 of CONTRIBUTING as closely as possible to amend the proposed commit.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,883,2020-10-11T20:18:37Z,,2022-01-10T18:38:12Z,OPEN,False,247,5,5,https://github.com/nickludwig,Implementation of IPv4 Extended Echo Request/Response,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/883,https://github.com/fxlb,7,https://github.com/the-tcpdump-group/tcpdump/pull/883#issuecomment-719947766,"As specified in RFC 8337, an implementation of the IPv4 Extended Echo Request and Response within the print-icmp.c file. The included .pcap file is titled icmp-ext-ipv4.pcap
Link to RFC: https://tools.ietf.org/html/rfc8335#section-2.1 
Link to Wireshark implementation, where I found and used the example ipv4 pcap file: https://gitlab.com/wireshark/wireshark/-/issues/14457",configure file removed => some builds broken.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,883,2020-10-11T20:18:37Z,,2022-01-10T18:38:12Z,OPEN,False,247,5,5,https://github.com/nickludwig,Implementation of IPv4 Extended Echo Request/Response,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/883,https://github.com/nickludwig,8,https://github.com/the-tcpdump-group/tcpdump/pull/883#issuecomment-720021753,"As specified in RFC 8337, an implementation of the IPv4 Extended Echo Request and Response within the print-icmp.c file. The included .pcap file is titled icmp-ext-ipv4.pcap
Link to RFC: https://tools.ietf.org/html/rfc8335#section-2.1 
Link to Wireshark implementation, where I found and used the example ipv4 pcap file: https://gitlab.com/wireshark/wireshark/-/issues/14457",Thanks! Should be fixed now.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,883,2020-10-11T20:18:37Z,,2022-01-10T18:38:12Z,OPEN,False,247,5,5,https://github.com/nickludwig,Implementation of IPv4 Extended Echo Request/Response,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/883,https://github.com/nickludwig,9,https://github.com/the-tcpdump-group/tcpdump/pull/883#issuecomment-733159442,"As specified in RFC 8337, an implementation of the IPv4 Extended Echo Request and Response within the print-icmp.c file. The included .pcap file is titled icmp-ext-ipv4.pcap
Link to RFC: https://tools.ietf.org/html/rfc8335#section-2.1 
Link to Wireshark implementation, where I found and used the example ipv4 pcap file: https://gitlab.com/wireshark/wireshark/-/issues/14457","@infrastation, I followed all of the CONTRIBUTING guidelines and think it's ready to go. Please let me know if there is anything else that I can help with.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,883,2020-10-11T20:18:37Z,,2022-01-10T18:38:12Z,OPEN,False,247,5,5,https://github.com/nickludwig,Implementation of IPv4 Extended Echo Request/Response,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/883,https://github.com/fxlb,10,https://github.com/the-tcpdump-group/tcpdump/pull/883#issuecomment-843982937,"As specified in RFC 8337, an implementation of the IPv4 Extended Echo Request and Response within the print-icmp.c file. The included .pcap file is titled icmp-ext-ipv4.pcap
Link to RFC: https://tools.ietf.org/html/rfc8335#section-2.1 
Link to Wireshark implementation, where I found and used the example ipv4 pcap file: https://gitlab.com/wireshark/wireshark/-/issues/14457","As specified in RFC 8337, an implementation of the IPv4 Extended [...]
(also in the commit message)

Or RFC 8335?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,888,2020-10-27T20:16:40Z,,2020-10-29T16:56:13Z,OPEN,False,12,3,1,https://github.com/enh-google,Clean exit from tcpdump with asan.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/888,https://github.com/enh-google,1,https://github.com/the-tcpdump-group/tcpdump/pull/888,"Fixes the use-after-free of pd caused by leaving the signal handlers
that call pcap_breakloop() active after freeing the struct pcap_t.
This also fixes the leak of device.
Caught by gwp-asan in the wild. Android internal bug 170778539.","Fixes the use-after-free of pd caused by leaving the signal handlers
that call pcap_breakloop() active after freeing the struct pcap_t.
This also fixes the leak of device.
Caught by gwp-asan in the wild. Android internal bug 170778539.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,889,2020-10-30T10:29:14Z,2021-10-06T18:38:10Z,2021-10-07T11:57:15Z,MERGED,True,21,1,8,https://github.com/wkz,DSA: Correctly determine VID,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/889,https://github.com/wkz,1,https://github.com/the-tcpdump-group/tcpdump/pull/889,"The 4 MSBs of the VID is stored in the lower nibble of the tag's third
byte.
Previously the priority bits where folded into the VID space, e.g. a
packet with VID=1 and priority 6 was printed as having a VID of
1537 (0x601).","The 4 MSBs of the VID is stored in the lower nibble of the tag's third
byte.
Previously the priority bits where folded into the VID space, e.g. a
packet with VID=1 and priority 6 was printed as having a VID of
1537 (0x601).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,889,2020-10-30T10:29:14Z,2021-10-06T18:38:10Z,2021-10-07T11:57:15Z,MERGED,True,21,1,8,https://github.com/wkz,DSA: Correctly determine VID,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/889,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/889#issuecomment-748276341,"The 4 MSBs of the VID is stored in the lower nibble of the tag's third
byte.
Previously the priority bits where folded into the VID space, e.g. a
packet with VID=1 and priority 6 was printed as having a VID of
1537 (0x601).",Please add a test file [see CONTRIBUTING 6) and 7)],True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,889,2020-10-30T10:29:14Z,2021-10-06T18:38:10Z,2021-10-07T11:57:15Z,MERGED,True,21,1,8,https://github.com/wkz,DSA: Correctly determine VID,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/889,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/889#issuecomment-878305825,"The 4 MSBs of the VID is stored in the lower nibble of the tag's third
byte.
Previously the priority bits where folded into the VID space, e.g. a
packet with VID=1 and priority 6 was printed as having a VID of
1537 (0x601).","Please

Add a test file [see CONTRIBUTING 6) and 7)]
Rebase on top of the-tcpdump-group:master.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,889,2020-10-30T10:29:14Z,2021-10-06T18:38:10Z,2021-10-07T11:57:15Z,MERGED,True,21,1,8,https://github.com/wkz,DSA: Correctly determine VID,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/889,https://github.com/wkz,4,https://github.com/the-tcpdump-group/tcpdump/pull/889#issuecomment-879304234,"The 4 MSBs of the VID is stored in the lower nibble of the tag's third
byte.
Previously the priority bits where folded into the VID space, e.g. a
packet with VID=1 and priority 6 was printed as having a VID of
1537 (0x601).","Completely forgot about this. Thanks for the reminder.
I updated the DSA-related test PCAPs to show the issue.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,889,2020-10-30T10:29:14Z,2021-10-06T18:38:10Z,2021-10-07T11:57:15Z,MERGED,True,21,1,8,https://github.com/wkz,DSA: Correctly determine VID,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/889,https://github.com/wkz,5,https://github.com/the-tcpdump-group/tcpdump/pull/889#issuecomment-923694578,"The 4 MSBs of the VID is stored in the lower nibble of the tag's third
byte.
Previously the priority bits where folded into the VID space, e.g. a
packet with VID=1 and priority 6 was printed as having a VID of
1537 (0x601).",@fxlb: Are you waiting on anything more from my side on this?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,889,2020-10-30T10:29:14Z,2021-10-06T18:38:10Z,2021-10-07T11:57:15Z,MERGED,True,21,1,8,https://github.com/wkz,DSA: Correctly determine VID,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/889,https://github.com/fxlb,6,https://github.com/the-tcpdump-group/tcpdump/pull/889#issuecomment-932266151,"The 4 MSBs of the VID is stored in the lower nibble of the tag's third
byte.
Previously the priority bits where folded into the VID space, e.g. a
packet with VID=1 and priority 6 was printed as having a VID of
1537 (0x601).","Please, don't update the existing pcap files, needed for non-regressions tests. Add new pcap files with the needed values for your change.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,889,2020-10-30T10:29:14Z,2021-10-06T18:38:10Z,2021-10-07T11:57:15Z,MERGED,True,21,1,8,https://github.com/wkz,DSA: Correctly determine VID,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/889,https://github.com/fxlb,7,https://github.com/the-tcpdump-group/tcpdump/pull/889#issuecomment-932875402,"The 4 MSBs of the VID is stored in the lower nibble of the tag's third
byte.
Previously the priority bits where folded into the VID space, e.g. a
packet with VID=1 and priority 6 was printed as having a VID of
1537 (0x601).",Link to DSA documentation?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,889,2020-10-30T10:29:14Z,2021-10-06T18:38:10Z,2021-10-07T11:57:15Z,MERGED,True,21,1,8,https://github.com/wkz,DSA: Correctly determine VID,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/889,https://github.com/wkz,8,https://github.com/the-tcpdump-group/tcpdump/pull/889#issuecomment-932958471,"The 4 MSBs of the VID is stored in the lower nibble of the tag's third
byte.
Previously the priority bits where folded into the VID space, e.g. a
packet with VID=1 and priority 6 was printed as having a VID of
1537 (0x601).","The updated ones are basically equivalent, they just make sure to use the top-most nibble of the VID bits. But you are saying to keep the old ones as-is and then add these new ones as {dsa,edsa}-high-vid.pcap or something?
Are you looking for it, or do you mean that there should be a link in the code?
There is no ""official"" public documentation, that I know of. But I have heard that the phrase ""marvell 6097 datasheet"" on popular search engines might turn up interesting results that supposedly contains the information in section 7.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,889,2020-10-30T10:29:14Z,2021-10-06T18:38:10Z,2021-10-07T11:57:15Z,MERGED,True,21,1,8,https://github.com/wkz,DSA: Correctly determine VID,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/889,https://github.com/fxlb,9,https://github.com/the-tcpdump-group/tcpdump/pull/889#issuecomment-934352949,"The 4 MSBs of the VID is stored in the lower nibble of the tag's third
byte.
Previously the priority bits where folded into the VID space, e.g. a
packet with VID=1 and priority 6 was printed as having a VID of
1537 (0x601).","But you are saying to keep the old ones as-is and then add these new ones as {dsa,edsa}-high-vid.pcap or something?

Yes.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,889,2020-10-30T10:29:14Z,2021-10-06T18:38:10Z,2021-10-07T11:57:15Z,MERGED,True,21,1,8,https://github.com/wkz,DSA: Correctly determine VID,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/889,https://github.com/fxlb,10,https://github.com/the-tcpdump-group/tcpdump/pull/889#issuecomment-934354730,"The 4 MSBs of the VID is stored in the lower nibble of the tag's third
byte.
Previously the priority bits where folded into the VID space, e.g. a
packet with VID=1 and priority 6 was printed as having a VID of
1537 (0x601).",And please rebase on top of the-tcpdump-group:master.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,889,2020-10-30T10:29:14Z,2021-10-06T18:38:10Z,2021-10-07T11:57:15Z,MERGED,True,21,1,8,https://github.com/wkz,DSA: Correctly determine VID,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/889,https://github.com/mcr,11,https://github.com/the-tcpdump-group/tcpdump/pull/889#issuecomment-936875463,"The 4 MSBs of the VID is stored in the lower nibble of the tag's third
byte.
Previously the priority bits where folded into the VID space, e.g. a
packet with VID=1 and priority 6 was printed as having a VID of
1537 (0x601).","Accept this and close #945, because it has a test case.

I hope I didn't jump the gun on the rebase.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,889,2020-10-30T10:29:14Z,2021-10-06T18:38:10Z,2021-10-07T11:57:15Z,MERGED,True,21,1,8,https://github.com/wkz,DSA: Correctly determine VID,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/889,https://github.com/fxlb,12,https://github.com/the-tcpdump-group/tcpdump/pull/889#issuecomment-937722161,"The 4 MSBs of the VID is stored in the lower nibble of the tag's third
byte.
Previously the priority bits where folded into the VID space, e.g. a
packet with VID=1 and priority 6 was printed as having a VID of
1537 (0x601).","@wkz
Thank you!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,891,2020-12-02T00:52:54Z,,2020-12-02T00:54:28Z,OPEN,False,1837,0,20,https://github.com/T-X,batman-adv: Add tests for batman-adv version 15 packet types,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/891,https://github.com/T-X,1,https://github.com/the-tcpdump-group/tcpdump/pull/891,"This adds some simple, not yet disecting, tests for all
batman-adv compat version 15 packet types (except for the academic
packet type 'coded').
It also verifies the decoding offset adjustments by testing for
encapsulated ICMPv6 packets.
The pcap files were generated with the provided batman-adv-testgen.sh
script and contain the exchange in a simple two nodes setup.
Signed-off-by: Linus Lüssing <linus.luessing@c0d3.blue>","This adds some simple, not yet disecting, tests for all
batman-adv compat version 15 packet types (except for the academic
packet type 'coded').
It also verifies the decoding offset adjustments by testing for
encapsulated ICMPv6 packets.
The pcap files were generated with the provided batman-adv-testgen.sh
script and contain the exchange in a simple two nodes setup.
Signed-off-by: Linus Lüssing <linus.luessing@c0d3.blue>",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,891,2020-12-02T00:52:54Z,,2020-12-02T00:54:28Z,OPEN,False,1837,0,20,https://github.com/T-X,batman-adv: Add tests for batman-adv version 15 packet types,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/891,https://github.com/T-X,2,https://github.com/the-tcpdump-group/tcpdump/pull/891#issuecomment-736916163,"This adds some simple, not yet disecting, tests for all
batman-adv compat version 15 packet types (except for the academic
packet type 'coded').
It also verifies the decoding offset adjustments by testing for
encapsulated ICMPv6 packets.
The pcap files were generated with the provided batman-adv-testgen.sh
script and contain the exchange in a simple two nodes setup.
Signed-off-by: Linus Lüssing <linus.luessing@c0d3.blue>",Dependency: the-tcpdump-group/libpcap#980,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,897,2021-01-05T15:22:36Z,,2022-04-04T13:32:25Z,OPEN,False,23,1,2,https://github.com/fenner,Build system: Add WITH_COVERAGE to compile netdissect and tcpdump with code coverage,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/897,https://github.com/fenner,1,https://github.com/the-tcpdump-group/tcpdump/pull/897,"Build with --coverage and use the coveralls tool to submit
code coverage reports to https://coveralls.io/github/the-tcpdump-group/tcpdump
Support for coverage builds is added to both automake and cmake, but
coverage relies on running tests, and running tests is currently broken
with cmake.  So the added job is CMAKE=no but can be changed to
CMAKE=yes when running tests with cmake is fixed.
Enabling publishing to coveralls.io requires the ""the-tcpdump-group"" user
to link coveralls.io to github.","Build with --coverage and use the coveralls tool to submit
code coverage reports to https://coveralls.io/github/the-tcpdump-group/tcpdump
Support for coverage builds is added to both automake and cmake, but
coverage relies on running tests, and running tests is currently broken
with cmake.  So the added job is CMAKE=no but can be changed to
CMAKE=yes when running tests with cmake is fixed.
Enabling publishing to coveralls.io requires the ""the-tcpdump-group"" user
to link coveralls.io to github.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,897,2021-01-05T15:22:36Z,,2022-04-04T13:32:25Z,OPEN,False,23,1,2,https://github.com/fenner,Build system: Add WITH_COVERAGE to compile netdissect and tcpdump with code coverage,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/897,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/897#issuecomment-755221283,"Build with --coverage and use the coveralls tool to submit
code coverage reports to https://coveralls.io/github/the-tcpdump-group/tcpdump
Support for coverage builds is added to both automake and cmake, but
coverage relies on running tests, and running tests is currently broken
with cmake.  So the added job is CMAKE=no but can be changed to
CMAKE=yes when running tests with cmake is fixed.
Enabling publishing to coveralls.io requires the ""the-tcpdump-group"" user
to link coveralls.io to github.","Enabling publishing to coveralls.io requires the ""the-tcpdump-group"" user
to link coveralls.io to github.

Thanks for the PR. How do you do this link?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,897,2021-01-05T15:22:36Z,,2022-04-04T13:32:25Z,OPEN,False,23,1,2,https://github.com/fenner,Build system: Add WITH_COVERAGE to compile netdissect and tcpdump with code coverage,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/897,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/897#issuecomment-755364406,"Build with --coverage and use the coveralls tool to submit
code coverage reports to https://coveralls.io/github/the-tcpdump-group/tcpdump
Support for coverage builds is added to both automake and cmake, but
coverage relies on running tests, and running tests is currently broken
with cmake.  So the added job is CMAKE=no but can be changed to
CMAKE=yes when running tests with cmake is fixed.
Enabling publishing to coveralls.io requires the ""the-tcpdump-group"" user
to link coveralls.io to github.","You can do that by going to https://coveralls.io, clicking on the free plan, clicking on GitHub login and granting the thing access to your GH account when prompted. It will tell exactly which access it wants before you grant it. I can do that on my account if you prefer, it should result in the same effect on the GH organization.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,897,2021-01-05T15:22:36Z,,2022-04-04T13:32:25Z,OPEN,False,23,1,2,https://github.com/fenner,Build system: Add WITH_COVERAGE to compile netdissect and tcpdump with code coverage,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/897,https://github.com/fxlb,4,https://github.com/the-tcpdump-group/tcpdump/pull/897#issuecomment-755367946,"Build with --coverage and use the coveralls tool to submit
code coverage reports to https://coveralls.io/github/the-tcpdump-group/tcpdump
Support for coverage builds is added to both automake and cmake, but
coverage relies on running tests, and running tests is currently broken
with cmake.  So the added job is CMAKE=no but can be changed to
CMAKE=yes when running tests with cmake is fixed.
Enabling publishing to coveralls.io requires the ""the-tcpdump-group"" user
to link coveralls.io to github.","I can do that on my account if you prefer, it should result in the same effect on the GH organization.

Yes, please do it.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,897,2021-01-05T15:22:36Z,,2022-04-04T13:32:25Z,OPEN,False,23,1,2,https://github.com/fenner,Build system: Add WITH_COVERAGE to compile netdissect and tcpdump with code coverage,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/897,https://github.com/infrastation,5,https://github.com/the-tcpdump-group/tcpdump/pull/897#issuecomment-755378301,"Build with --coverage and use the coveralls tool to submit
code coverage reports to https://coveralls.io/github/the-tcpdump-group/tcpdump
Support for coverage builds is added to both automake and cmake, but
coverage relies on running tests, and running tests is currently broken
with cmake.  So the added job is CMAKE=no but can be changed to
CMAKE=yes when running tests with cmake is fixed.
Enabling publishing to coveralls.io requires the ""the-tcpdump-group"" user
to link coveralls.io to github.","This application will be able to read your organization, team membership, and private project boards.
This application will be able to read and write commit statuses (no direct code access).
This application will be able to read your private email addresses.

Authorized and enabled for the-tcpdump-group/libpcap, the-tcpdump-group/tcpdump and the-tcpdump-group/tcpslice (the latter is sometimes more convenient for testing due to its small size and short feedback loop).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,897,2021-01-05T15:22:36Z,,2022-04-04T13:32:25Z,OPEN,False,23,1,2,https://github.com/fenner,Build system: Add WITH_COVERAGE to compile netdissect and tcpdump with code coverage,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/897,https://github.com/infrastation,6,https://github.com/the-tcpdump-group/tcpdump/pull/897#issuecomment-755760893,"Build with --coverage and use the coveralls tool to submit
code coverage reports to https://coveralls.io/github/the-tcpdump-group/tcpdump
Support for coverage builds is added to both automake and cmake, but
coverage relies on running tests, and running tests is currently broken
with cmake.  So the added job is CMAKE=no but can be changed to
CMAKE=yes when running tests with cmake is fixed.
Enabling publishing to coveralls.io requires the ""the-tcpdump-group"" user
to link coveralls.io to github.",I had restarted the Travis job and Coverall is now displaying something.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,897,2021-01-05T15:22:36Z,,2022-04-04T13:32:25Z,OPEN,False,23,1,2,https://github.com/fenner,Build system: Add WITH_COVERAGE to compile netdissect and tcpdump with code coverage,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/897,https://github.com/fenner,7,https://github.com/the-tcpdump-group/tcpdump/pull/897#issuecomment-755800937,"Build with --coverage and use the coveralls tool to submit
code coverage reports to https://coveralls.io/github/the-tcpdump-group/tcpdump
Support for coverage builds is added to both automake and cmake, but
coverage relies on running tests, and running tests is currently broken
with cmake.  So the added job is CMAKE=no but can be changed to
CMAKE=yes when running tests with cmake is fixed.
Enabling publishing to coveralls.io requires the ""the-tcpdump-group"" user
to link coveralls.io to github.","The direct link to Coveralls is
https://coveralls.io/github/the-tcpdump-group/tcpdump

Thanks!
  Bill
…
On Wed, Jan 6, 2021 at 5:40 PM Denis Ovsienko ***@***.***> wrote:
 I had restarted the Travis job and Coverall is now displaying something.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#897 (comment)>,
 or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/AAFLMLOENKQQRYZW4J4W3ADSYTRFJANCNFSM4VVL2K3A>
 .",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,897,2021-01-05T15:22:36Z,,2022-04-04T13:32:25Z,OPEN,False,23,1,2,https://github.com/fenner,Build system: Add WITH_COVERAGE to compile netdissect and tcpdump with code coverage,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/897,https://github.com/fxlb,8,https://github.com/the-tcpdump-group/tcpdump/pull/897#issuecomment-755969233,"Build with --coverage and use the coveralls tool to submit
code coverage reports to https://coveralls.io/github/the-tcpdump-group/tcpdump
Support for coverage builds is added to both automake and cmake, but
coverage relies on running tests, and running tests is currently broken
with cmake.  So the added job is CMAKE=no but can be changed to
CMAKE=yes when running tests with cmake is fixed.
Enabling publishing to coveralls.io requires the ""the-tcpdump-group"" user
to link coveralls.io to github.","Many error messages with the job:
profiling:/home/travis/build:Cannot create directory
profiling:/home/travis/build/the-tcpdump-group/tcpdump/print-openflow-1.3.gcda:Skip
profiling:/home/travis/build:Cannot create directory
profiling:/home/travis/build/the-tcpdump-group/tcpdump/print-openflow-1.0.gcda:Skip
profiling:/home/travis/build:Cannot create directory
profiling:/home/travis/build/the-tcpdump-group/tcpdump/print-dvmrp.gcda:Skip
profiling:/home/travis/build:Cannot create directory
profiling:/home/travis/build/the-tcpdump-group/tcpdump/parsenfsfh.gcda:Skip
profiling:/home/travis/build:Cannot create directory
profiling:/home/travis/build/the-tcpdump-group/tcpdump/ntp.gcda:Skip
[...]",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,897,2021-01-05T15:22:36Z,,2022-04-04T13:32:25Z,OPEN,False,23,1,2,https://github.com/fenner,Build system: Add WITH_COVERAGE to compile netdissect and tcpdump with code coverage,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/897,https://github.com/infrastation,9,https://github.com/the-tcpdump-group/tcpdump/pull/897#issuecomment-780187842,"Build with --coverage and use the coveralls tool to submit
code coverage reports to https://coveralls.io/github/the-tcpdump-group/tcpdump
Support for coverage builds is added to both automake and cmake, but
coverage relies on running tests, and running tests is currently broken
with cmake.  So the added job is CMAKE=no but can be changed to
CMAKE=yes when running tests with cmake is fixed.
Enabling publishing to coveralls.io requires the ""the-tcpdump-group"" user
to link coveralls.io to github.","Did the Travis-based setup work reasonably close to what was originally expected? Coveralls will most likely need to be ported to Cirrus CI, as that's where AMD64 Linux CI currently is.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,897,2021-01-05T15:22:36Z,,2022-04-04T13:32:25Z,OPEN,False,23,1,2,https://github.com/fenner,Build system: Add WITH_COVERAGE to compile netdissect and tcpdump with code coverage,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/897,https://github.com/infrastation,10,https://github.com/the-tcpdump-group/tcpdump/pull/897#issuecomment-800381747,"Build with --coverage and use the coveralls tool to submit
code coverage reports to https://coveralls.io/github/the-tcpdump-group/tcpdump
Support for coverage builds is added to both automake and cmake, but
coverage relies on running tests, and running tests is currently broken
with cmake.  So the added job is CMAKE=no but can be changed to
CMAKE=yes when running tests with cmake is fixed.
Enabling publishing to coveralls.io requires the ""the-tcpdump-group"" user
to link coveralls.io to github.",This integration should be simpler in Cirrus CI with Coveralls-specific steps in a task of their own like Coverity Scan. Do you need my help porting it?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,897,2021-01-05T15:22:36Z,,2022-04-04T13:32:25Z,OPEN,False,23,1,2,https://github.com/fenner,Build system: Add WITH_COVERAGE to compile netdissect and tcpdump with code coverage,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/897,https://github.com/fenner,11,https://github.com/the-tcpdump-group/tcpdump/pull/897#issuecomment-802321530,"Build with --coverage and use the coveralls tool to submit
code coverage reports to https://coveralls.io/github/the-tcpdump-group/tcpdump
Support for coverage builds is added to both automake and cmake, but
coverage relies on running tests, and running tests is currently broken
with cmake.  So the added job is CMAKE=no but can be changed to
CMAKE=yes when running tests with cmake is fixed.
Enabling publishing to coveralls.io requires the ""the-tcpdump-group"" user
to link coveralls.io to github.","This integration should be simpler in Cirrus CI with Coveralls-specific steps in a task of their own like Coverity Scan. Do you need my help porting it?

I'll check it out, thanks for the reminder.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,897,2021-01-05T15:22:36Z,,2022-04-04T13:32:25Z,OPEN,False,23,1,2,https://github.com/fenner,Build system: Add WITH_COVERAGE to compile netdissect and tcpdump with code coverage,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/897,https://github.com/infrastation,12,https://github.com/the-tcpdump-group/tcpdump/pull/897#issuecomment-1008363029,"Build with --coverage and use the coveralls tool to submit
code coverage reports to https://coveralls.io/github/the-tcpdump-group/tcpdump
Support for coverage builds is added to both automake and cmake, but
coverage relies on running tests, and running tests is currently broken
with cmake.  So the added job is CMAKE=no but can be changed to
CMAKE=yes when running tests with cmake is fixed.
Enabling publishing to coveralls.io requires the ""the-tcpdump-group"" user
to link coveralls.io to github.","Here is a draft version for Cirrus CI rebased on the current master branch. It has not been tested in any way, but the difference should be obvious: instead of embedding Coveralls-specific steps into an existing generic procedure there is a separate procedure with only the required steps.
diff --git a/.cirrus.yml b/.cirrus.yml
index a9c47890..fccf9f17 100644
--- a/.cirrus.yml
+++ b/.cirrus.yml
@@ -90,3 +90,30 @@ coverity_task:
     - apt-get -qy install git curl wget ruby rubygems ruby-json # for the coverity script
     - apt list --installed 'lib*-dev'
     - ./.ci-coverity-scan-build.sh
+
+coveralls_task:
+  name: Coveralls
+  only_if: $CIRRUS_BRANCH != 'coverity_scan'
+  container:
+    cpu: 2
+    memory: 1G
+    image: ubuntu:20.04
+  env:
+    DEBIAN_FRONTEND: noninteractive
+    MAKEFLAGS: -j 2
+    CC=gcc
+  script:
+    - apt-get -qy update
+    - apt-get -qy install git autoconf make gcc
+    - apt-get -qy install flex bison libdbus-1-dev libbluetooth-dev libnl-genl-3-dev libibverbs-dev # for libpcap
+    - apt-get -qy install libssl-dev libsmi2-dev libcap-ng-dev libpcap-dev
+    - apt list --installed 'lib*-dev'
+    - pip install --user cpp-coveralls
+    - git -C .. clone --depth ${CIRRUS_CLONE_DEPTH} --branch=master --quiet ${LIBPCAP_GIT}
+    - (cd ../libpcap && REMOTE=no CMAKE=no ./build.sh)
+# Do not use build.sh because it runs ""make clean"" afterwards (does this break coveralls?).
+    - touch .devel configure --with-crypto=yes --enable-smb=yes
+    - CFLAGS=--coverage LDFLAGS=--coverage ./configure
+    - make -s CFLAGS=-Werror
+    - make check
+    - coveralls --gcov-options '\-lp'
diff --git a/CMakeLists.txt b/CMakeLists.txt
index ce4fe1a2..909bd6c3 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -157,6 +157,7 @@ option(WITH_CRYPTO ""Build with OpenSSL/libressl libcrypto, if available"" ON)
 option(WITH_CAPSICUM ""Build with Capsicum security functions, if available"" ON)
 option(WITH_CAP_NG ""Use libcap-ng, if available"" ON)
 option(ENABLE_SMB ""Build with the SMB dissector"" OFF)
+option(WITH_COVERAGE ""Enable coverage if using gcc"" OFF)
 
 #
 # String parameters.  Neither of them are set, initially; only if the
@@ -1207,6 +1208,13 @@ add_executable(tcpdump ${TCPDUMP_SOURCE_LIST_C})
 if(NOT C_ADDITIONAL_FLAGS STREQUAL """")
     set_target_properties(tcpdump PROPERTIES COMPILE_FLAGS ${C_ADDITIONAL_FLAGS})
 endif()
+if(WITH_COVERAGE AND ""${CMAKE_COMPILER_IS_GNUCC}"")
+    target_compile_options(tcpdump PUBLIC --coverage)
+    target_link_options(tcpdump PUBLIC --coverage)
+    target_compile_options(netdissect PUBLIC --coverage)
+    target_link_options(netdissect PUBLIC --coverage)
+endif()
+
 target_link_libraries(tcpdump netdissect ${TCPDUMP_LINK_LIBRARIES})
 
 ######################################",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,897,2021-01-05T15:22:36Z,,2022-04-04T13:32:25Z,OPEN,False,23,1,2,https://github.com/fenner,Build system: Add WITH_COVERAGE to compile netdissect and tcpdump with code coverage,1,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/897,https://github.com/fenner,13,https://github.com/the-tcpdump-group/tcpdump/pull/897#issuecomment-1087562635,"Build with --coverage and use the coveralls tool to submit
code coverage reports to https://coveralls.io/github/the-tcpdump-group/tcpdump
Support for coverage builds is added to both automake and cmake, but
coverage relies on running tests, and running tests is currently broken
with cmake.  So the added job is CMAKE=no but can be changed to
CMAKE=yes when running tests with cmake is fixed.
Enabling publishing to coveralls.io requires the ""the-tcpdump-group"" user
to link coveralls.io to github.","I've gotten it to do ... something ... from cirrus-ci - the result is at
https://coveralls.io/jobs/97271148
The job said it was pending on coveralls, even after cirrus-ci completed, and manually checking the ""mark job as completed"" button resulted in saying ""?% coverage"", even though the file browser shows files with coverage.
Getting this far required setting the repo token in the job.  I set it in cirrus's web interface, clicking on the gear icon at https://cirrus-ci.com/github/fenner/tcpdump and adding COVERALLS_REPO_TOKEN to the environment, with the value of the token that is visible to me at https://coveralls.io/github/fenner/tcpdump .  Conventional wisdom is that you add this as an encrypted environment variable to your repo, which I guess is OK except there's no way to allow both fenner/tcpdump and the-tcpdump-group/tcpdump to use the same config file.
I'll put this on hold again for now.  The changes that I've done for this so far are at https://github.com/fenner/tcpdump/tree/coveralls-update",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,898,2021-01-05T15:42:50Z,2021-01-06T08:52:45Z,2021-05-17T16:07:19Z,MERGED,True,103,103,20,https://github.com/fenner,"MPLS: rename the ""exp"" field to ""tc""",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/898,https://github.com/fenner,1,https://github.com/the-tcpdump-group/tcpdump/pull/898,"RFC5462 (https://tools.ietf.org/html/rfc5462) renamed the
MPLS ""EXP"" field to ""Traffic Class"" in 2009.  Use ""tc"" as an
abbreviation for this field name.","RFC5462 (https://tools.ietf.org/html/rfc5462) renamed the
MPLS ""EXP"" field to ""Traffic Class"" in 2009.  Use ""tc"" as an
abbreviation for this field name.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,898,2021-01-05T15:42:50Z,2021-01-06T08:52:45Z,2021-05-17T16:07:19Z,MERGED,True,103,103,20,https://github.com/fenner,"MPLS: rename the ""exp"" field to ""tc""",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/898,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/898#issuecomment-755170749,"RFC5462 (https://tools.ietf.org/html/rfc5462) renamed the
MPLS ""EXP"" field to ""Traffic Class"" in 2009.  Use ""tc"" as an
abbreviation for this field name.",Thank you!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,904,2021-01-22T10:05:52Z,2021-01-23T14:20:25Z,2021-01-23T14:20:58Z,MERGED,True,15,0,5,https://github.com/ckishimo,ospf: add support bit Nt RFC3101,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/904,https://github.com/ckishimo,1,https://github.com/the-tcpdump-group/tcpdump/pull/904,"RFC3101 appendix B
10.0.34.3 > 224.0.0.5: OSPFv2, LS-Update, length 76
	Router-ID 10.0.34.3, Area 0.0.0.1, Authentication Type: none (0), 1 LSA
	  LSA #1
	  Advertising Router 10.0.34.3, seq 0x80000004, age 1s, length 28
	    Router LSA (1), LSA-ID: 10.0.34.3
	    Options: [NSSA, Demand Circuit]
	    Router LSA Options: [ABR, ASBR, Nt]
	      Neighbor Router-ID: 10.0.34.4, Interface Address: 10.0.34.3","RFC3101 appendix B
10.0.34.3 > 224.0.0.5: OSPFv2, LS-Update, length 76
	Router-ID 10.0.34.3, Area 0.0.0.1, Authentication Type: none (0), 1 LSA
	  LSA #1
	  Advertising Router 10.0.34.3, seq 0x80000004, age 1s, length 28
	    Router LSA (1), LSA-ID: 10.0.34.3
	    Options: [NSSA, Demand Circuit]
	    Router LSA Options: [ABR, ASBR, Nt]
	      Neighbor Router-ID: 10.0.34.4, Interface Address: 10.0.34.3",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,904,2021-01-22T10:05:52Z,2021-01-23T14:20:25Z,2021-01-23T14:20:58Z,MERGED,True,15,0,5,https://github.com/ckishimo,ospf: add support bit Nt RFC3101,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/904,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/904#issuecomment-765314519,"RFC3101 appendix B
10.0.34.3 > 224.0.0.5: OSPFv2, LS-Update, length 76
	Router-ID 10.0.34.3, Area 0.0.0.1, Authentication Type: none (0), 1 LSA
	  LSA #1
	  Advertising Router 10.0.34.3, seq 0x80000004, age 1s, length 28
	    Router LSA (1), LSA-ID: 10.0.34.3
	    Options: [NSSA, Demand Circuit]
	    Router LSA Options: [ABR, ASBR, Nt]
	      Neighbor Router-ID: 10.0.34.4, Interface Address: 10.0.34.3",Mind the existing indentation please.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,904,2021-01-22T10:05:52Z,2021-01-23T14:20:25Z,2021-01-23T14:20:58Z,MERGED,True,15,0,5,https://github.com/ckishimo,ospf: add support bit Nt RFC3101,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/904,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/904#issuecomment-766087001,"RFC3101 appendix B
10.0.34.3 > 224.0.0.5: OSPFv2, LS-Update, length 76
	Router-ID 10.0.34.3, Area 0.0.0.1, Authentication Type: none (0), 1 LSA
	  LSA #1
	  Advertising Router 10.0.34.3, seq 0x80000004, age 1s, length 28
	    Router LSA (1), LSA-ID: 10.0.34.3
	    Options: [NSSA, Demand Circuit]
	    Router LSA Options: [ABR, ASBR, Nt]
	      Neighbor Router-ID: 10.0.34.4, Interface Address: 10.0.34.3","I have fixed a couple more indentation issues and merged this change, thank you!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,905,2021-02-10T12:58:54Z,2021-02-16T01:00:45Z,2021-02-18T16:08:33Z,MERGED,True,181,1,7,https://github.com/fenner,BFD: add SBFD support (RFC7880 and RFC7881),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/905,https://github.com/fenner,1,https://github.com/the-tcpdump-group/tcpdump/pull/905,"Add support for SBFD on UDP port 7784.  SBFD is different
in that packets from the reflector will be sent with source
port 7784; in all other BFD mechanisms, it is only the
destination port that matters.  For SBFD print-udp.c has to
check both source and destination port.","Add support for SBFD on UDP port 7784.  SBFD is different
in that packets from the reflector will be sent with source
port 7784; in all other BFD mechanisms, it is only the
destination port that matters.  For SBFD print-udp.c has to
check both source and destination port.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,905,2021-02-10T12:58:54Z,2021-02-16T01:00:45Z,2021-02-18T16:08:33Z,MERGED,True,181,1,7,https://github.com/fenner,BFD: add SBFD support (RFC7880 and RFC7881),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/905,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/905#issuecomment-778791178,"Add support for SBFD on UDP port 7784.  SBFD is different
in that packets from the reflector will be sent with source
port 7784; in all other BFD mechanisms, it is only the
destination port that matters.  For SBFD print-udp.c has to
check both source and destination port.",(Rebased on the current master to see up-to-date CI results.),True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,905,2021-02-10T12:58:54Z,2021-02-16T01:00:45Z,2021-02-18T16:08:33Z,MERGED,True,181,1,7,https://github.com/fenner,BFD: add SBFD support (RFC7880 and RFC7881),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/905,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/905#issuecomment-778817703,"Add support for SBFD on UDP port 7784.  SBFD is different
in that packets from the reflector will be sent with source
port 7784; in all other BFD mechanisms, it is only the
destination port that matters.  For SBFD print-udp.c has to
check both source and destination port.","Bill, would you mind if I update this to print ""S-BFD"" instead of ""Sbfd""? Other than that, the proposed changes seem to match the spec exactly.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,905,2021-02-10T12:58:54Z,2021-02-16T01:00:45Z,2021-02-18T16:08:33Z,MERGED,True,181,1,7,https://github.com/fenner,BFD: add SBFD support (RFC7880 and RFC7881),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/905,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/905#issuecomment-779518245,"Add support for SBFD on UDP port 7784.  SBFD is different
in that packets from the reflector will be sent with source
port 7784; in all other BFD mechanisms, it is only the
destination port that matters.  For SBFD print-udp.c has to
check both source and destination port.",Thank you for making this contribution!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,905,2021-02-10T12:58:54Z,2021-02-16T01:00:45Z,2021-02-18T16:08:33Z,MERGED,True,181,1,7,https://github.com/fenner,BFD: add SBFD support (RFC7880 and RFC7881),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/905,https://github.com/fenner,5,https://github.com/the-tcpdump-group/tcpdump/pull/905#issuecomment-781453075,"Add support for SBFD on UDP port 7784.  SBFD is different
in that packets from the reflector will be sent with source
port 7784; in all other BFD mechanisms, it is only the
destination port that matters.  For SBFD print-udp.c has to
check both source and destination port.","Bill, would you mind if I update this to print ""S-BFD"" instead of ""Sbfd""? Other than that, the proposed changes seem to match the spec exactly.

Hi Denis, thank you very much for merging this and for this naming improvement.  I apologize for not having been able to reply quickly, and I appreciate that you made the updates.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,907,2021-02-25T00:53:08Z,,2021-02-25T00:53:08Z,OPEN,False,12,0,5,https://github.com/nickludwig,IPv6: Implemented Tunnel Payload Forwarding (TPF) option,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/907,https://github.com/nickludwig,1,https://github.com/the-tcpdump-group/tcpdump/pull/907,"Implementation of Tunnel Payload Forwarding option, as specified in https://tools.ietf.org/html/draft-bonica-6man-vpn-dest-opt-13.","Implementation of Tunnel Payload Forwarding option, as specified in https://tools.ietf.org/html/draft-bonica-6man-vpn-dest-opt-13.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,911,2021-03-05T18:46:48Z,2021-03-05T20:33:06Z,2021-05-17T16:07:49Z,MERGED,True,4,4,1,https://github.com/edigaryev,.cirrus.yml: quote strings in only_if expression,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/911,https://github.com/edigaryev,1,https://github.com/the-tcpdump-group/tcpdump/pull/911,"Hi!
We're going to make some changes to how Cirrus CI parses configurations in the next couple of weeks (there's no press-release ATM) and found some potential issues with your .cirrus.yml while doing backwards compatibility checks.
Conditional task execution usingonly_if script should quote strings, similarly to the examples in the documentation, otherwise the expression engine might treat these characters as operators.
This change makes sure the transition goes smoothly.","Hi!
We're going to make some changes to how Cirrus CI parses configurations in the next couple of weeks (there's no press-release ATM) and found some potential issues with your .cirrus.yml while doing backwards compatibility checks.
Conditional task execution usingonly_if script should quote strings, similarly to the examples in the documentation, otherwise the expression engine might treat these characters as operators.
This change makes sure the transition goes smoothly.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,911,2021-03-05T18:46:48Z,2021-03-05T20:33:06Z,2021-05-17T16:07:49Z,MERGED,True,4,4,1,https://github.com/edigaryev,.cirrus.yml: quote strings in only_if expression,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/911,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/911#issuecomment-791670788,"Hi!
We're going to make some changes to how Cirrus CI parses configurations in the next couple of weeks (there's no press-release ATM) and found some potential issues with your .cirrus.yml while doing backwards compatibility checks.
Conditional task execution usingonly_if script should quote strings, similarly to the examples in the documentation, otherwise the expression engine might treat these characters as operators.
This change makes sure the transition goes smoothly.",Thank you!,True,{'ROCKET': ['https://github.com/edigaryev']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,912,2021-03-09T22:57:01Z,2021-05-18T17:09:43Z,2021-05-18T17:10:25Z,MERGED,True,72,24,2,https://github.com/phy1729,DNS: Sync types with IANA,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/912,https://github.com/phy1729,1,https://github.com/the-tcpdump-group/tcpdump/pull/912,"IANA reference: https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml
I updated the comments to reference the latest RFC where they didn't already. Let me know if you'd prefer that I leave that out.
Removed the UNSPECA type parsing as IANA has that query type number assigned to NID now.","IANA reference: https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml
I updated the comments to reference the latest RFC where they didn't already. Let me know if you'd prefer that I leave that out.
Removed the UNSPECA type parsing as IANA has that query type number assigned to NID now.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,912,2021-03-09T22:57:01Z,2021-05-18T17:09:43Z,2021-05-18T17:10:25Z,MERGED,True,72,24,2,https://github.com/phy1729,DNS: Sync types with IANA,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/912,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/912#issuecomment-843370294,"IANA reference: https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml
I updated the comments to reference the latest RFC where they didn't already. Let me know if you'd prefer that I leave that out.
Removed the UNSPECA type parsing as IANA has that query type number assigned to NID now.","Rebased, commit message updated, merged, thank you!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,914,2021-03-19T13:47:08Z,2021-04-09T12:01:27Z,2021-05-17T16:09:11Z,MERGED,True,320,318,7,https://github.com/mruprich,MPTCP: Print 'Length' inside mptcp options,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/914,https://github.com/mruprich,1,https://github.com/the-tcpdump-group/tcpdump/pull/914,"Current mptcp parser prints 'mptcp ...' but RFC 8684 in Section 3. states that the format should be 'mptcp  ...'
I added the printing of the Length field as just a plain number, it seems to me that having 'mptcp Length 8 dss...' is a little bit disruptive.","Current mptcp parser prints 'mptcp ...' but RFC 8684 in Section 3. states that the format should be 'mptcp  ...'
I added the printing of the Length field as just a plain number, it seems to me that having 'mptcp Length 8 dss...' is a little bit disruptive.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,914,2021-03-19T13:47:08Z,2021-04-09T12:01:27Z,2021-05-17T16:09:11Z,MERGED,True,320,318,7,https://github.com/mruprich,MPTCP: Print 'Length' inside mptcp options,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/914,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/914#issuecomment-802856617,"Current mptcp parser prints 'mptcp ...' but RFC 8684 in Section 3. states that the format should be 'mptcp  ...'
I added the printing of the Length field as just a plain number, it seems to me that having 'mptcp Length 8 dss...' is a little bit disruptive.","I was fixing buildbot configuration and restarting it at the time, if you squash the changes together it should retry the failed builds.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,914,2021-03-19T13:47:08Z,2021-04-09T12:01:27Z,2021-05-17T16:09:11Z,MERGED,True,320,318,7,https://github.com/mruprich,MPTCP: Print 'Length' inside mptcp options,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/914,https://github.com/mruprich,3,https://github.com/the-tcpdump-group/tcpdump/pull/914#issuecomment-802857801,"Current mptcp parser prints 'mptcp ...' but RFC 8684 in Section 3. states that the format should be 'mptcp  ...'
I added the printing of the Length field as just a plain number, it seems to me that having 'mptcp Length 8 dss...' is a little bit disruptive.","@infrastation will do, thanks ;)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,914,2021-03-19T13:47:08Z,2021-04-09T12:01:27Z,2021-05-17T16:09:11Z,MERGED,True,320,318,7,https://github.com/mruprich,MPTCP: Print 'Length' inside mptcp options,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/914,https://github.com/mruprich,4,https://github.com/the-tcpdump-group/tcpdump/pull/914#issuecomment-803591605,"Current mptcp parser prints 'mptcp ...' but RFC 8684 in Section 3. states that the format should be 'mptcp  ...'
I added the printing of the Length field as just a plain number, it seems to me that having 'mptcp Length 8 dss...' is a little bit disruptive.","@infrastation Hi, is the linux-aarch64 build error related to this PR? Thanks.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,914,2021-03-19T13:47:08Z,2021-04-09T12:01:27Z,2021-05-17T16:09:11Z,MERGED,True,320,318,7,https://github.com/mruprich,MPTCP: Print 'Length' inside mptcp options,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/914,https://github.com/infrastation,5,https://github.com/the-tcpdump-group/tcpdump/pull/914#issuecomment-803601723,"Current mptcp parser prints 'mptcp ...' but RFC 8684 in Section 3. states that the format should be 'mptcp  ...'
I added the printing of the Length field as just a plain number, it seems to me that having 'mptcp Length 8 dss...' is a little bit disruptive.","No, it was a build script bug, which should hopefully be fixed by now.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,914,2021-03-19T13:47:08Z,2021-04-09T12:01:27Z,2021-05-17T16:09:11Z,MERGED,True,320,318,7,https://github.com/mruprich,MPTCP: Print 'Length' inside mptcp options,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/914,https://github.com/mruprich,6,https://github.com/the-tcpdump-group/tcpdump/pull/914#issuecomment-805564910,"Current mptcp parser prints 'mptcp ...' but RFC 8684 in Section 3. states that the format should be 'mptcp  ...'
I added the printing of the Length field as just a plain number, it seems to me that having 'mptcp Length 8 dss...' is a little bit disruptive.","Hi, did anyone have any time to take a look at this? Thanks.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,914,2021-03-19T13:47:08Z,2021-04-09T12:01:27Z,2021-05-17T16:09:11Z,MERGED,True,320,318,7,https://github.com/mruprich,MPTCP: Print 'Length' inside mptcp options,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/914,https://github.com/mruprich,7,https://github.com/the-tcpdump-group/tcpdump/pull/914#issuecomment-816504600,"Current mptcp parser prints 'mptcp ...' but RFC 8684 in Section 3. states that the format should be 'mptcp  ...'
I added the printing of the Length field as just a plain number, it seems to me that having 'mptcp Length 8 dss...' is a little bit disruptive.",Any update on this PR? Is there anything I can do to help with this?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,914,2021-03-19T13:47:08Z,2021-04-09T12:01:27Z,2021-05-17T16:09:11Z,MERGED,True,320,318,7,https://github.com/mruprich,MPTCP: Print 'Length' inside mptcp options,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/914,https://github.com/fxlb,8,https://github.com/the-tcpdump-group/tcpdump/pull/914#issuecomment-816515399,"Current mptcp parser prints 'mptcp ...' but RFC 8684 in Section 3. states that the format should be 'mptcp  ...'
I added the printing of the Length field as just a plain number, it seems to me that having 'mptcp Length 8 dss...' is a little bit disruptive.",Could you rebase the PR on the top of master to redo all checks?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,914,2021-03-19T13:47:08Z,2021-04-09T12:01:27Z,2021-05-17T16:09:11Z,MERGED,True,320,318,7,https://github.com/mruprich,MPTCP: Print 'Length' inside mptcp options,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/914,https://github.com/infrastation,9,https://github.com/the-tcpdump-group/tcpdump/pull/914#issuecomment-816557922,"Current mptcp parser prints 'mptcp ...' but RFC 8684 in Section 3. states that the format should be 'mptcp  ...'
I added the printing of the Length field as just a plain number, it seems to me that having 'mptcp Length 8 dss...' is a little bit disruptive.",Which specific part of Section 3 do you refer to?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,914,2021-03-19T13:47:08Z,2021-04-09T12:01:27Z,2021-05-17T16:09:11Z,MERGED,True,320,318,7,https://github.com/mruprich,MPTCP: Print 'Length' inside mptcp options,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/914,https://github.com/mruprich,10,https://github.com/the-tcpdump-group/tcpdump/pull/914#issuecomment-816568270,"Current mptcp parser prints 'mptcp ...' but RFC 8684 in Section 3. states that the format should be 'mptcp  ...'
I added the printing of the Length field as just a plain number, it seems to me that having 'mptcp Length 8 dss...' is a little bit disruptive.","Sorry, seems like the first comment here got somehow stripped of some parts. It should have been like this:
Current mptcp parser prints 'mptcp Subtype ...' but RFC 8684 in Section
3. states that the format should be 'mptcp Length Subtype ...'
This is in the 3.  MPTCP Operations: An Overview -> Figure 3: MPTCP Option Format",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,914,2021-03-19T13:47:08Z,2021-04-09T12:01:27Z,2021-05-17T16:09:11Z,MERGED,True,320,318,7,https://github.com/mruprich,MPTCP: Print 'Length' inside mptcp options,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/914,https://github.com/fxlb,11,https://github.com/the-tcpdump-group/tcpdump/pull/914#issuecomment-816633564,"Current mptcp parser prints 'mptcp ...' but RFC 8684 in Section 3. states that the format should be 'mptcp  ...'
I added the printing of the Length field as just a plain number, it seems to me that having 'mptcp Length 8 dss...' is a little bit disruptive.","Merged, thank you!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,915,2021-03-23T18:11:05Z,2021-05-06T09:52:58Z,2021-05-17T16:09:34Z,MERGED,True,11,5,3,https://github.com/pabeni,MPTCP: parse MPC data_len field,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/915,https://github.com/pabeni,1,https://github.com/the-tcpdump-group/tcpdump/pull/915,"The RFC 8684 introduced a new field in the MPC header: the data_len.
If the client has not seen yet a DSS sub-option from the server, it
must use MPC with data_lan instead of a DSS for the first packet
carrying a data payload.
This change print the data_len, if present, after the receiver_key.
The field is already there in the existent pcap test trace, we just
need to update the expected output.
Signed-off-by: Paolo Abeni pabeni@redhat.com","The RFC 8684 introduced a new field in the MPC header: the data_len.
If the client has not seen yet a DSS sub-option from the server, it
must use MPC with data_lan instead of a DSS for the first packet
carrying a data payload.
This change print the data_len, if present, after the receiver_key.
The field is already there in the existent pcap test trace, we just
need to update the expected output.
Signed-off-by: Paolo Abeni pabeni@redhat.com",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,915,2021-03-23T18:11:05Z,2021-05-06T09:52:58Z,2021-05-17T16:09:34Z,MERGED,True,11,5,3,https://github.com/pabeni,MPTCP: parse MPC data_len field,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/915,https://github.com/mruprich,2,https://github.com/the-tcpdump-group/tcpdump/pull/915#issuecomment-818606788,"The RFC 8684 introduced a new field in the MPC header: the data_len.
If the client has not seen yet a DSS sub-option from the server, it
must use MPC with data_lan instead of a DSS for the first packet
carrying a data payload.
This change print the data_len, if present, after the receiver_key.
The field is already there in the existent pcap test trace, we just
need to update the expected output.
Signed-off-by: Paolo Abeni pabeni@redhat.com","@infrastation Hi Denis, Paolo rebased the PR so that it corresponds to data from #914. Is there anything that Paolo or me can do to help?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,915,2021-03-23T18:11:05Z,2021-05-06T09:52:58Z,2021-05-17T16:09:34Z,MERGED,True,11,5,3,https://github.com/pabeni,MPTCP: parse MPC data_len field,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/915,https://github.com/mruprich,3,https://github.com/the-tcpdump-group/tcpdump/pull/915#issuecomment-831103630,"The RFC 8684 introduced a new field in the MPC header: the data_len.
If the client has not seen yet a DSS sub-option from the server, it
must use MPC with data_lan instead of a DSS for the first packet
carrying a data payload.
This change print the data_len, if present, after the receiver_key.
The field is already there in the existent pcap test trace, we just
need to update the expected output.
Signed-off-by: Paolo Abeni pabeni@redhat.com",Any update on this PR?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,915,2021-03-23T18:11:05Z,2021-05-06T09:52:58Z,2021-05-17T16:09:34Z,MERGED,True,11,5,3,https://github.com/pabeni,MPTCP: parse MPC data_len field,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/915,https://github.com/fxlb,4,https://github.com/the-tcpdump-group/tcpdump/pull/915#issuecomment-833395539,"The RFC 8684 introduced a new field in the MPC header: the data_len.
If the client has not seen yet a DSS sub-option from the server, it
must use MPC with data_lan instead of a DSS for the first packet
carrying a data payload.
This change print the data_len, if present, after the receiver_key.
The field is already there in the existent pcap test trace, we just
need to update the expected output.
Signed-off-by: Paolo Abeni pabeni@redhat.com","Merged, thank you!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,916,2021-05-08T18:39:01Z,2021-07-10T20:45:11Z,2021-07-10T20:45:11Z,MERGED,True,22,5,2,https://github.com/stevekay,optional unit suffix on -C file size,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/916,https://github.com/stevekay,1,https://github.com/the-tcpdump-group/tcpdump/pull/916,"In response to #884 Add GNU-like block size suffix support to savefile's file_size
[steve@localhost tcpdump]$ sudo /home/steve/out/bin/tcpdump -C 5m -w /tmp/foo
tcpdump: listening on enp0s3, link-type EN10MB (Ethernet), snapshot length 262144 bytes
^C4951 packets captured
4959 packets received by filter
0 packets dropped by kernel
[steve@localhost tcpdump]$ ls -l /tmp/foo*
-rw-r--r--. 1 root root 5244047 May  8 14:31 /tmp/foo
-rw-r--r--. 1 root root 2644025 May  8 14:31 /tmp/foo1
[steve@localhost tcpdump]$ 

Default behaviour remains unchanged.
[steve@localhost tcpdump]$ sudo rm -f /tmp/foo*
[steve@localhost tcpdump]$ sudo /home/steve/out/bin/tcpdump -C 1 -w /tmp/foo
tcpdump: listening on enp0s3, link-type EN10MB (Ethernet), snapshot length 262144 bytes
^C4786 packets captured
4788 packets received by filter
0 packets dropped by kernel
[steve@localhost tcpdump]$ ls -l /tmp/foo*
-rw-r--r--. 1 root root 1003892 May  8 14:37 /tmp/foo
-rw-r--r--. 1 root root 1005480 May  8 14:37 /tmp/foo1
-rw-r--r--. 1 root root 1000046 May  8 14:37 /tmp/foo2
-rw-r--r--. 1 root root 1003442 May  8 14:37 /tmp/foo3
-rw-r--r--. 1 root root 1001766 May  8 14:37 /tmp/foo4
-rw-r--r--. 1 root root 1000152 May  8 14:37 /tmp/foo5
-rw-r--r--. 1 root root 1004212 May  8 14:37 /tmp/foo6
-rw-r--r--. 1 root root  849885 May  8 14:37 /tmp/foo7
[steve@localhost tcpdump]$","In response to #884 Add GNU-like block size suffix support to savefile's file_size
[steve@localhost tcpdump]$ sudo /home/steve/out/bin/tcpdump -C 5m -w /tmp/foo
tcpdump: listening on enp0s3, link-type EN10MB (Ethernet), snapshot length 262144 bytes
^C4951 packets captured
4959 packets received by filter
0 packets dropped by kernel
[steve@localhost tcpdump]$ ls -l /tmp/foo*
-rw-r--r--. 1 root root 5244047 May  8 14:31 /tmp/foo
-rw-r--r--. 1 root root 2644025 May  8 14:31 /tmp/foo1
[steve@localhost tcpdump]$ 

Default behaviour remains unchanged.
[steve@localhost tcpdump]$ sudo rm -f /tmp/foo*
[steve@localhost tcpdump]$ sudo /home/steve/out/bin/tcpdump -C 1 -w /tmp/foo
tcpdump: listening on enp0s3, link-type EN10MB (Ethernet), snapshot length 262144 bytes
^C4786 packets captured
4788 packets received by filter
0 packets dropped by kernel
[steve@localhost tcpdump]$ ls -l /tmp/foo*
-rw-r--r--. 1 root root 1003892 May  8 14:37 /tmp/foo
-rw-r--r--. 1 root root 1005480 May  8 14:37 /tmp/foo1
-rw-r--r--. 1 root root 1000046 May  8 14:37 /tmp/foo2
-rw-r--r--. 1 root root 1003442 May  8 14:37 /tmp/foo3
-rw-r--r--. 1 root root 1001766 May  8 14:37 /tmp/foo4
-rw-r--r--. 1 root root 1000152 May  8 14:37 /tmp/foo5
-rw-r--r--. 1 root root 1004212 May  8 14:37 /tmp/foo6
-rw-r--r--. 1 root root  849885 May  8 14:37 /tmp/foo7
[steve@localhost tcpdump]$",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,917,2021-05-11T23:02:49Z,,2021-05-12T01:14:10Z,OPEN,False,100,1,5,https://github.com/nickludwig,IPv6: Implemented Compact Routing Header (CRH) option,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/917,https://github.com/nickludwig,1,https://github.com/the-tcpdump-group/tcpdump/pull/917,"Implemented in accordance with the Compact Routing Header internet draft, as specified in the link below
https://datatracker.ietf.org/doc/draft-bonica-6man-comp-rtg-hdr/","Implemented in accordance with the Compact Routing Header internet draft, as specified in the link below
https://datatracker.ietf.org/doc/draft-bonica-6man-comp-rtg-hdr/",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,917,2021-05-11T23:02:49Z,,2021-05-12T01:14:10Z,OPEN,False,100,1,5,https://github.com/nickludwig,IPv6: Implemented Compact Routing Header (CRH) option,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/917,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/917#issuecomment-839274904,"Implemented in accordance with the Compact Routing Header internet draft, as specified in the link below
https://datatracker.ietf.org/doc/draft-bonica-6man-comp-rtg-hdr/",Thank you for proposing this improvement. Please see CONTRIBUTING.md about touch .devel to see why the CI has failed. Also please mind the indentation style.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,917,2021-05-11T23:02:49Z,,2021-05-12T01:14:10Z,OPEN,False,100,1,5,https://github.com/nickludwig,IPv6: Implemented Compact Routing Header (CRH) option,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/917,https://github.com/nickludwig,3,https://github.com/the-tcpdump-group/tcpdump/pull/917#issuecomment-839283920,"Implemented in accordance with the Compact Routing Header internet draft, as specified in the link below
https://datatracker.ietf.org/doc/draft-bonica-6man-comp-rtg-hdr/",Sounds good. I'll get that fixed up in a few.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,918,2021-05-12T14:46:40Z,2021-07-12T15:27:05Z,2021-07-12T15:27:05Z,MERGED,True,49,1,4,https://github.com/dcaratti,mptcp: add support for MP_TCPRST,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/918,https://github.com/dcaratti,1,https://github.com/the-tcpdump-group/tcpdump/pull/918,"dissect the MP_TCPRST sub-option in accordance to RFC8684 §3.6.
Link: multipath-tcp/mptcp_net-next#189
Signed-off-by: Davide Caratti dcaratti@redhat.com","dissect the MP_TCPRST sub-option in accordance to RFC8684 §3.6.
Link: multipath-tcp/mptcp_net-next#189
Signed-off-by: Davide Caratti dcaratti@redhat.com",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,918,2021-05-12T14:46:40Z,2021-07-12T15:27:05Z,2021-07-12T15:27:05Z,MERGED,True,49,1,4,https://github.com/dcaratti,mptcp: add support for MP_TCPRST,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/918,https://github.com/mcr,2,https://github.com/the-tcpdump-group/tcpdump/pull/918#issuecomment-878199619,"dissect the MP_TCPRST sub-option in accordance to RFC8684 §3.6.
Link: multipath-tcp/mptcp_net-next#189
Signed-off-by: Davide Caratti dcaratti@redhat.com",Will merge when Appveyor checks complete.  They are always slow.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,921,2021-06-03T12:03:20Z,2021-06-03T16:04:58Z,2021-06-03T16:05:03Z,MERGED,True,8,8,1,https://github.com/fxlb,AppVeyor: Update Npcap SDK to 1.07,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/921,https://github.com/fxlb,1,https://github.com/the-tcpdump-group/tcpdump/pull/921,Test before a merge,Test before a merge,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,923,2021-06-27T11:14:39Z,2021-06-27T19:00:00Z,2021-08-25T16:29:24Z,MERGED,True,1,1,1,https://github.com/gokulkumar792,"Fix the misleading comment regarding ""From DS"", ""To DS"" Frame Control Flags",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/923,https://github.com/gokulkumar792,1,https://github.com/the-tcpdump-group/tcpdump/pull/923,"In the case where the ""From DS"" bit is not set and the ""To DS"" bit is set in the Frame Control Bitmask, the comment line in the corresponding if else block was misleading that the ""From DS"" bit is set and the ""To DS"" bit is not set.","In the case where the ""From DS"" bit is not set and the ""To DS"" bit is set in the Frame Control Bitmask, the comment line in the corresponding if else block was misleading that the ""From DS"" bit is set and the ""To DS"" bit is not set.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,923,2021-06-27T11:14:39Z,2021-06-27T19:00:00Z,2021-08-25T16:29:24Z,MERGED,True,1,1,1,https://github.com/gokulkumar792,"Fix the misleading comment regarding ""From DS"", ""To DS"" Frame Control Flags",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/923,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/923#issuecomment-869185620,"In the case where the ""From DS"" bit is not set and the ""To DS"" bit is set in the Frame Control Bitmask, the comment line in the corresponding if else block was misleading that the ""From DS"" bit is set and the ""To DS"" bit is not set.","Thanks.
s/In the case where the the/In the case where the/",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,923,2021-06-27T11:14:39Z,2021-06-27T19:00:00Z,2021-08-25T16:29:24Z,MERGED,True,1,1,1,https://github.com/gokulkumar792,"Fix the misleading comment regarding ""From DS"", ""To DS"" Frame Control Flags",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/923,https://github.com/gokulkumar792,3,https://github.com/the-tcpdump-group/tcpdump/pull/923#issuecomment-869191782,"In the case where the ""From DS"" bit is not set and the ""To DS"" bit is set in the Frame Control Bitmask, the comment line in the corresponding if else block was misleading that the ""From DS"" bit is set and the ""To DS"" bit is not set.","Thanks.
s/In the case where the the/In the case where the/

I have updated the PR.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,923,2021-06-27T11:14:39Z,2021-06-27T19:00:00Z,2021-08-25T16:29:24Z,MERGED,True,1,1,1,https://github.com/gokulkumar792,"Fix the misleading comment regarding ""From DS"", ""To DS"" Frame Control Flags",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/923,https://github.com/fxlb,4,https://github.com/the-tcpdump-group/tcpdump/pull/923#issuecomment-869211734,"In the case where the ""From DS"" bit is not set and the ""To DS"" bit is set in the Frame Control Bitmask, the comment line in the corresponding if else block was misleading that the ""From DS"" bit is set and the ""To DS"" bit is not set.","Merged, thanks.",True,{'THUMBS_UP': ['https://github.com/gokulkumar792']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,924,2021-07-04T13:03:09Z,2021-08-25T15:44:08Z,2021-08-25T16:29:59Z,MERGED,True,47,0,4,https://github.com/gokulkumar792,"IEEE 802.11: include the ""Mesh ID"" field while printing management frames",2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/924,https://github.com/gokulkumar792,1,https://github.com/the-tcpdump-group/tcpdump/pull/924,"In an 802.11s mesh network, on detecting that the Beacon and Probe Response frames transmitted has a non-zero length ""Mesh ID"", print it.
Also add a test to check the 802.11s Mesh ID in management frames. The newly added pcap file contains a Mesh Beacon frame, a Wildcard Probe Request and a Mesh Probe Response. The test case checks if the ""Mesh ID"" field is properly parsed by the IEEE 802.11 printer.","In an 802.11s mesh network, on detecting that the Beacon and Probe Response frames transmitted has a non-zero length ""Mesh ID"", print it.
Also add a test to check the 802.11s Mesh ID in management frames. The newly added pcap file contains a Mesh Beacon frame, a Wildcard Probe Request and a Mesh Probe Response. The test case checks if the ""Mesh ID"" field is properly parsed by the IEEE 802.11 printer.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,924,2021-07-04T13:03:09Z,2021-08-25T15:44:08Z,2021-08-25T16:29:59Z,MERGED,True,47,0,4,https://github.com/gokulkumar792,"IEEE 802.11: include the ""Mesh ID"" field while printing management frames",2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/924,https://github.com/gokulkumar792,2,https://github.com/the-tcpdump-group/tcpdump/pull/924#issuecomment-903163305,"In an 802.11s mesh network, on detecting that the Beacon and Probe Response frames transmitted has a non-zero length ""Mesh ID"", print it.
Also add a test to check the 802.11s Mesh ID in management frames. The newly added pcap file contains a Mesh Beacon frame, a Wildcard Probe Request and a Mesh Probe Response. The test case checks if the ""Mesh ID"" field is properly parsed by the IEEE 802.11 printer.","Hi, please let me know if there is anything that I could help for integrating this changes into tcpdump. Thanks.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,924,2021-07-04T13:03:09Z,2021-08-25T15:44:08Z,2021-08-25T16:29:59Z,MERGED,True,47,0,4,https://github.com/gokulkumar792,"IEEE 802.11: include the ""Mesh ID"" field while printing management frames",2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/924,https://github.com/mcr,3,https://github.com/the-tcpdump-group/tcpdump/pull/924#issuecomment-903183105,"In an 802.11s mesh network, on detecting that the Beacon and Probe Response frames transmitted has a non-zero length ""Mesh ID"", print it.
Also add a test to check the 802.11s Mesh ID in management frames. The newly added pcap file contains a Mesh Beacon frame, a Wildcard Probe Request and a Mesh Probe Response. The test case checks if the ""Mesh ID"" field is properly parsed by the IEEE 802.11 printer.","Hi, please let me know if there is anything that I could help for integrating this changes into tcpdump. Thanks.

If @guyharris  has no further objections, I will merge.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,924,2021-07-04T13:03:09Z,2021-08-25T15:44:08Z,2021-08-25T16:29:59Z,MERGED,True,47,0,4,https://github.com/gokulkumar792,"IEEE 802.11: include the ""Mesh ID"" field while printing management frames",2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/924,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/924#issuecomment-903185512,"In an 802.11s mesh network, on detecting that the Beacon and Probe Response frames transmitted has a non-zero length ""Mesh ID"", print it.
Also add a test to check the 802.11s Mesh ID in management frames. The newly added pcap file contains a Mesh Beacon frame, a Wildcard Probe Request and a Mesh Probe Response. The test case checks if the ""Mesh ID"" field is properly parsed by the IEEE 802.11 printer.","59 commits behind the master branch, needs to be rebased.",True,"{'THUMBS_UP': ['https://github.com/mcr', 'https://github.com/gokulkumar792']}"
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,924,2021-07-04T13:03:09Z,2021-08-25T15:44:08Z,2021-08-25T16:29:59Z,MERGED,True,47,0,4,https://github.com/gokulkumar792,"IEEE 802.11: include the ""Mesh ID"" field while printing management frames",2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/924,https://github.com/gokulkumar792,5,https://github.com/the-tcpdump-group/tcpdump/pull/924#issuecomment-903217996,"In an 802.11s mesh network, on detecting that the Beacon and Probe Response frames transmitted has a non-zero length ""Mesh ID"", print it.
Also add a test to check the 802.11s Mesh ID in management frames. The newly added pcap file contains a Mesh Beacon frame, a Wildcard Probe Request and a Mesh Probe Response. The test case checks if the ""Mesh ID"" field is properly parsed by the IEEE 802.11 printer.","Rebased the branch on top of the-tcpdump-group:master, tested it and updated the PR, Thanks.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,924,2021-07-04T13:03:09Z,2021-08-25T15:44:08Z,2021-08-25T16:29:59Z,MERGED,True,47,0,4,https://github.com/gokulkumar792,"IEEE 802.11: include the ""Mesh ID"" field while printing management frames",2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/924,https://github.com/infrastation,6,https://github.com/the-tcpdump-group/tcpdump/pull/924#issuecomment-903244188,"In an 802.11s mesh network, on detecting that the Beacon and Probe Response frames transmitted has a non-zero length ""Mesh ID"", print it.
Also add a test to check the 802.11s Mesh ID in management frames. The newly added pcap file contains a Mesh Beacon frame, a Wildcard Probe Request and a Mesh Probe Response. The test case checks if the ""Mesh ID"" field is properly parsed by the IEEE 802.11 printer.","I looked at the initially proposed changes briefly in July and it was not immediately clear that data access was safe in terms of lenghts and shapend guards. After a closer look at the latest revision it looks fine in this regard.
The only potential issue that caught my eye this time is that meshid.meshid is not initialized and only its last byte is set to NUL, which leaves space for printing random bytes. For example, when meshid.length is zero (hence no call to memcpy()), or when it is not (if mesh ID on the wire is not NUL-terminated). If that's the case, it would be better to zero whole meshid.meshid before the if-block instead of NUL-terminating it after.",True,{'THUMBS_UP': ['https://github.com/mcr']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,924,2021-07-04T13:03:09Z,2021-08-25T15:44:08Z,2021-08-25T16:29:59Z,MERGED,True,47,0,4,https://github.com/gokulkumar792,"IEEE 802.11: include the ""Mesh ID"" field while printing management frames",2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/924,https://github.com/gokulkumar792,7,https://github.com/the-tcpdump-group/tcpdump/pull/924#issuecomment-904927485,"In an 802.11s mesh network, on detecting that the Beacon and Probe Response frames transmitted has a non-zero length ""Mesh ID"", print it.
Also add a test to check the 802.11s Mesh ID in management frames. The newly added pcap file contains a Mesh Beacon frame, a Wildcard Probe Request and a Mesh Probe Response. The test case checks if the ""Mesh ID"" field is properly parsed by the IEEE 802.11 printer.","I looked at the initially proposed changes briefly in July and it was not immediately clear that data access was safe in terms of lenghts and shapend guards. After a closer look at the latest revision it looks fine in this regard.
The only potential issue that caught my eye this time is that meshid.meshid is not initialized and only its last byte is set to NUL, which leaves space for printing random bytes. For example, when meshid.length is zero (hence no call to memcpy()), or when it is not (if mesh ID on the wire is not NUL-terminated). If that's the case, it would be better to zero whole meshid.meshid before the if-block instead of NUL-terminating it after.

Thanks for the review. For the ""MESHID"" field, if the meshid.length struct member is 0, then yes memcpy() to meshid.meshid is not done, but we are setting index 0 (meshid.length) of meshid.meshid to NULL.
So in this case, while printing the meshid.meshid, because of the 0th index being NULL, we would not attempt to print indexes that are > 0 irrespective of them having junk chars or not.
For example: The ""SSID"" & ""MESHID"" field parsing/printing follows the same logic.
So in the newly added tests/ieee802.11_meshid.out file, we can see that for the Mesh Beacon (1st line) containing the Wildcard SSID (ssid.length being 0), the ssid field is printed with empty parenthesis without any junk characters.
    1  12:20:37.867811 9526800862us tsft 6.0 Mb/s 5745 MHz 11a -34dBm signal [bit 22] Beacon () [6.0* 9.0 12.0* 18.0 24.0* 36.0 48.0 54.0 Mbit] IBSS CH: 149, PRIVACY (MESHID: 11s-mesh-network)
Also in the case of received meshid field not having a NULL termination, we are explicitly adding it after the last non-junk char (""after the last non-junk char"" index is meshid.length) in the meshid.meshid array. So I believe we would not need to memset the meshid.meshid to 0 before the if-block. Please clarify if I'm mistaken.
And let me know, if you still prefer to add it. But then I would suggest that we add the zero memset also for E_SSID, E_CHALLENGE along with E_MESHID for consistency.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,924,2021-07-04T13:03:09Z,2021-08-25T15:44:08Z,2021-08-25T16:29:59Z,MERGED,True,47,0,4,https://github.com/gokulkumar792,"IEEE 802.11: include the ""Mesh ID"" field while printing management frames",2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/924,https://github.com/infrastation,8,https://github.com/the-tcpdump-group/tcpdump/pull/924#issuecomment-904944514,"In an 802.11s mesh network, on detecting that the Beacon and Probe Response frames transmitted has a non-zero length ""Mesh ID"", print it.
Also add a test to check the 802.11s Mesh ID in management frames. The newly added pcap file contains a Mesh Beacon frame, a Wildcard Probe Request and a Mesh Probe Response. The test case checks if the ""Mesh ID"" field is properly parsed by the IEEE 802.11 printer.",You are right. It is good as it is now.,True,{'THUMBS_UP': ['https://github.com/gokulkumar792']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,924,2021-07-04T13:03:09Z,2021-08-25T15:44:08Z,2021-08-25T16:29:59Z,MERGED,True,47,0,4,https://github.com/gokulkumar792,"IEEE 802.11: include the ""Mesh ID"" field while printing management frames",2,['improvement'],https://github.com/the-tcpdump-group/tcpdump/pull/924,https://github.com/infrastation,9,https://github.com/the-tcpdump-group/tcpdump/pull/924#issuecomment-905335108,"In an 802.11s mesh network, on detecting that the Beacon and Probe Response frames transmitted has a non-zero length ""Mesh ID"", print it.
Also add a test to check the 802.11s Mesh ID in management frames. The newly added pcap file contains a Mesh Beacon frame, a Wildcard Probe Request and a Mesh Probe Response. The test case checks if the ""Mesh ID"" field is properly parsed by the IEEE 802.11 printer.","So let's merge it then, there is plenty of other work waiting to be done.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,925,2021-07-07T16:38:56Z,2021-07-08T19:19:02Z,2021-07-08T19:19:26Z,CLOSED,False,0,0,0,https://github.com/fxlb,WIP (test for now) Reinstate running tcpdump -J/-L and capture,0,[],https://github.com/the-tcpdump-group/tcpdump/pull/925,https://github.com/fxlb,1,https://github.com/the-tcpdump-group/tcpdump/pull/925,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,925,2021-07-07T16:38:56Z,2021-07-08T19:19:02Z,2021-07-08T19:19:26Z,CLOSED,False,0,0,0,https://github.com/fxlb,WIP (test for now) Reinstate running tcpdump -J/-L and capture,0,[],https://github.com/the-tcpdump-group/tcpdump/pull/925,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/925#issuecomment-876618677,,"linux-s390x is not good for the packet capture test, I had to cancel this build because it was stuck for 5 hours.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,926,2021-07-13T16:01:02Z,2021-09-13T21:50:44Z,2021-09-13T21:50:44Z,MERGED,True,6,3,1,https://github.com/gokulkumar792,"IEEE 802.11: include the ""TA"" field while printing Block Ack Control frame",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/926,https://github.com/gokulkumar792,1,https://github.com/the-tcpdump-group/tcpdump/pull/926,"As per the IEEE 802.11-2016 std, section 9.3.1.9, Fig 9-32, the Block Ack control frame has the Transmitter Address field. So include this TA field when printing the BA frame to stdout if the ""eflag"" is enabled.","As per the IEEE 802.11-2016 std, section 9.3.1.9, Fig 9-32, the Block Ack control frame has the Transmitter Address field. So include this TA field when printing the BA frame to stdout if the ""eflag"" is enabled.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,926,2021-07-13T16:01:02Z,2021-09-13T21:50:44Z,2021-09-13T21:50:44Z,MERGED,True,6,3,1,https://github.com/gokulkumar792,"IEEE 802.11: include the ""TA"" field while printing Block Ack Control frame",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/926,https://github.com/gokulkumar792,2,https://github.com/the-tcpdump-group/tcpdump/pull/926#issuecomment-879347172,"As per the IEEE 802.11-2016 std, section 9.3.1.9, Fig 9-32, the Block Ack control frame has the Transmitter Address field. So include this TA field when printing the BA frame to stdout if the ""eflag"" is enabled.","Hi @fxlb , i see that the same code got force pushed here, just curious to know whether this is for re-triggerring the build automation ?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,926,2021-07-13T16:01:02Z,2021-09-13T21:50:44Z,2021-09-13T21:50:44Z,MERGED,True,6,3,1,https://github.com/gokulkumar792,"IEEE 802.11: include the ""TA"" field while printing Block Ack Control frame",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/926,https://github.com/gokulkumar792,3,https://github.com/the-tcpdump-group/tcpdump/pull/926#issuecomment-906684721,"As per the IEEE 802.11-2016 std, section 9.3.1.9, Fig 9-32, the Block Ack control frame has the Transmitter Address field. So include this TA field when printing the BA frame to stdout if the ""eflag"" is enabled.","Hi, to help review the patch, I'm sharing the tcpdump output of a Block-Ack 802.11 Control frame.
Before adding the patch, the hexdump shows that the TA field MAC address ""fe34 4e80 7705"" (offset from 0x43 to 0x48) is present immediately after the RA field, but the TA is not parsed/printed along with the RA field when the ""-e"" flag is enabled.
$ sudo ./tcpdump -enr ./dot11-blolck-ack.pcap -XX -c 1
reading from file ./dot11-blolck-ack.pcap, link-type IEEE802_11_RADIO (802.11 plus radiotap header), snapshot length 262144
00:17:16.270514 3029744821us tsft 24.0 Mb/s 5260 MHz 11a -54dBm signal [bit 22] RA:ee:7a:0d:8c:48:16 BA
        0x0000:  0000 3800 2f40 40a0 2008 00a0 2008 0000  ..8./@@.........
        0x0010:  b53c 96b4 0000 0000 1030 8c14 4001 ca00  .<.......0..@...
        0x0020:  0000 0000 0000 0000 369e 96b4 0000 0000  ........6.......
        0x0030:  1600 1103 ca00 c701 9400 0000 ee7a 0d8c  .............z..
        0x0040:  4816 fe34 4e80 7705 0400 7004 ffff ffff  H..4N.w...p.....
        0x0050:  ffff ffff 541e df80                      ....T...


After adding the patch, the TA is printed along with the RA field when the ""-e"" flag is enabled.
$ sudo ./tcpdump -enr ./dot11-blolck-ack.pcap -XX -c 1
reading from file ./dot11-blolck-ack.pcap, link-type IEEE802_11_RADIO (802.11 plus radiotap header), snapshot length 262144
00:17:16.270514 3029744821us tsft 24.0 Mb/s 5260 MHz 11a -54dBm signal [bit 22] RA:ee:7a:0d:8c:48:16 TA:fe:34:4e:80:77:05 BA
        0x0000:  0000 3800 2f40 40a0 2008 00a0 2008 0000  ..8./@@.........
        0x0010:  b53c 96b4 0000 0000 1030 8c14 4001 ca00  .<.......0..@...
        0x0020:  0000 0000 0000 0000 369e 96b4 0000 0000  ........6.......
        0x0030:  1600 1103 ca00 c701 9400 0000 ee7a 0d8c  .............z..
        0x0040:  4816 fe34 4e80 7705 0400 7004 ffff ffff  H..4N.w...p.....
        0x0050:  ffff ffff 541e df80                      ....T...

Please let me know, if there is anything else that i could help for reviewing this PR. Thanks.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,926,2021-07-13T16:01:02Z,2021-09-13T21:50:44Z,2021-09-13T21:50:44Z,MERGED,True,6,3,1,https://github.com/gokulkumar792,"IEEE 802.11: include the ""TA"" field while printing Block Ack Control frame",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/926,https://github.com/gokulkumar792,4,https://github.com/the-tcpdump-group/tcpdump/pull/926#issuecomment-918267845,"As per the IEEE 802.11-2016 std, section 9.3.1.9, Fig 9-32, the Block Ack control frame has the Transmitter Address field. So include this TA field when printing the BA frame to stdout if the ""eflag"" is enabled.","Hi, please let me know, if there is anything that I could do to help review & merge this PR. Thanks.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,934,2021-08-16T18:38:47Z,2021-08-18T22:03:15Z,2021-08-18T22:03:19Z,MERGED,True,32,17,5,https://github.com/RuiCunhaM,MPTCP: Add missing MP_CAPABLE Flags,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/934,https://github.com/RuiCunhaM,1,https://github.com/the-tcpdump-group/tcpdump/pull/934,"Add missing flags in the MPTCP MP_CAPABLE option.
Fixes #933","Add missing flags in the MPTCP MP_CAPABLE option.
Fixes #933",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,934,2021-08-16T18:38:47Z,2021-08-18T22:03:15Z,2021-08-18T22:03:19Z,MERGED,True,32,17,5,https://github.com/RuiCunhaM,MPTCP: Add missing MP_CAPABLE Flags,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/934,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/934#issuecomment-900589669,"Add missing flags in the MPTCP MP_CAPABLE option.
Fixes #933","Thank you for preparing this change, it looks fine to me. Would anybody else like to make a look before merging?",True,{'THUMBS_UP': ['https://github.com/RuiCunhaM']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,934,2021-08-16T18:38:47Z,2021-08-18T22:03:15Z,2021-08-18T22:03:19Z,MERGED,True,32,17,5,https://github.com/RuiCunhaM,MPTCP: Add missing MP_CAPABLE Flags,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/934,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/934#issuecomment-901459126,"Add missing flags in the MPTCP MP_CAPABLE option.
Fixes #933","Rebased and merged, thank you!",True,{'THUMBS_UP': ['https://github.com/RuiCunhaM']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,937,2021-09-03T21:22:46Z,2021-09-04T07:52:29Z,2021-09-04T07:52:50Z,MERGED,True,2,2,2,https://github.com/a1346054,Remove last remaining trailing whitespace,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/937,https://github.com/a1346054,1,https://github.com/the-tcpdump-group/tcpdump/pull/937,"The CONTRIBUTING file advises us to ""Avoid trailing tabs/spaces"". This PR removes last remaining trailing whitespace from the source code, making it easier to setup a warning in case any new trailing whitespace were to be introduced.","The CONTRIBUTING file advises us to ""Avoid trailing tabs/spaces"". This PR removes last remaining trailing whitespace from the source code, making it easier to setup a warning in case any new trailing whitespace were to be introduced.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,937,2021-09-03T21:22:46Z,2021-09-04T07:52:29Z,2021-09-04T07:52:50Z,MERGED,True,2,2,2,https://github.com/a1346054,Remove last remaining trailing whitespace,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/937,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/937#issuecomment-912929556,"The CONTRIBUTING file advises us to ""Avoid trailing tabs/spaces"". This PR removes last remaining trailing whitespace from the source code, making it easier to setup a warning in case any new trailing whitespace were to be introduced.",Thank you!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,939,2021-09-09T20:16:46Z,2021-09-16T12:01:08Z,2021-09-16T12:33:37Z,CLOSED,False,92,0,4,https://github.com/ton31337,Decode FQDN Capability,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/939,https://github.com/ton31337,1,https://github.com/the-tcpdump-group/tcpdump/pull/939,"Tested using FRR/GoBGP.
Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com","Tested using FRR/GoBGP.
Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,939,2021-09-09T20:16:46Z,2021-09-16T12:01:08Z,2021-09-16T12:33:37Z,CLOSED,False,92,0,4,https://github.com/ton31337,Decode FQDN Capability,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/939,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/939#issuecomment-917407880,"Tested using FRR/GoBGP.
Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com","This capability was introduced in an expired individual I-D.
Type: Expired Internet-Draft (individual)
Last updated: 2016-07-21 (latest revision 2016-01-06)

(https://datatracker.ietf.org/doc/draft-walton-bgp-hostname-capability/)
Any reason to decode it?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,939,2021-09-09T20:16:46Z,2021-09-16T12:01:08Z,2021-09-16T12:33:37Z,CLOSED,False,92,0,4,https://github.com/ton31337,Decode FQDN Capability,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/939,https://github.com/ton31337,3,https://github.com/the-tcpdump-group/tcpdump/pull/939#issuecomment-917416041,"Tested using FRR/GoBGP.
Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com","The reason is simple, there are daemons supporting it: frr, gobgp, bird, exabgp, ... Even the number is assigned by IANA and wireshark has this as well.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,939,2021-09-09T20:16:46Z,2021-09-16T12:01:08Z,2021-09-16T12:33:37Z,CLOSED,False,92,0,4,https://github.com/ton31337,Decode FQDN Capability,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/939,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/939#issuecomment-918117450,"Tested using FRR/GoBGP.
Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com","Thank you for preparing these changes. It would help to understand who is the most interested party in maintaining this protocol extension, if there is such a party.

It is not Cumulus Networks, as they abandoned the I-D in 2016 and ceased to exist as a standalone company in 2020.
It is not Nvidia, as with their deep pockets and 1.5 years of owning the former Cumulus Networks business Nvidia could have the extension revived without effort, but they didn't.
It is not any of the tcpdump maintainers, as it occurs again and again that someone contributes an implementation of a specific revision of an I-D and disappears instead of updating tcpdump code to subsequent revisions of the I-D or the final document, leaving tcpdump maintainers with the ballast.
Is it you?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,939,2021-09-09T20:16:46Z,2021-09-16T12:01:08Z,2021-09-16T12:33:37Z,CLOSED,False,92,0,4,https://github.com/ton31337,Decode FQDN Capability,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/939,https://github.com/ton31337,5,https://github.com/the-tcpdump-group/tcpdump/pull/939#issuecomment-918132020,"Tested using FRR/GoBGP.
Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com","@infrastation hello,

It would help to understand who is the most interested party in maintaining this protocol extension, if there is such a party.

Do you mean extension == draft or maintaining this code which is gonna be pushed for tcpdump?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,939,2021-09-09T20:16:46Z,2021-09-16T12:01:08Z,2021-09-16T12:33:37Z,CLOSED,False,92,0,4,https://github.com/ton31337,Decode FQDN Capability,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/939,https://github.com/infrastation,6,https://github.com/the-tcpdump-group/tcpdump/pull/939#issuecomment-918177810,"Tested using FRR/GoBGP.
Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com","I mean the usual ecosystem of a network protocol. So long as the extension specification and everything that implements it hinge on an IANA allocation in an IETF protocol registry, the specification likely has to be something the registry recognizes (a current independent I-D or something else, it would be best to confirm there). Out of the spec come the protocol instance implementations (which you say already exist) and the packet analyzer implementations (which you are working to get in a better shape now). So are you maintaining the implementations and leaving the spec abandoned?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,939,2021-09-09T20:16:46Z,2021-09-16T12:01:08Z,2021-09-16T12:33:37Z,CLOSED,False,92,0,4,https://github.com/ton31337,Decode FQDN Capability,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/939,https://github.com/ton31337,7,https://github.com/the-tcpdump-group/tcpdump/pull/939#issuecomment-918186446,"Tested using FRR/GoBGP.
Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com","So are you maintaining the implementations and leaving the spec abandoned?

Right, I'm not the author of the draft.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,939,2021-09-09T20:16:46Z,2021-09-16T12:01:08Z,2021-09-16T12:33:37Z,CLOSED,False,92,0,4,https://github.com/ton31337,Decode FQDN Capability,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/939,https://github.com/infrastation,8,https://github.com/the-tcpdump-group/tcpdump/pull/939#issuecomment-918268105,"Tested using FRR/GoBGP.
Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com","Thank you for these comments. In short, just leaving the I-D abandoned will likely come back to bite later on. As much as is practicable, this should be avoided.
If I had real world use cases for this capability and was to work on its implementations, I'd ask the original authors to revive the 2-page I-D, and after a few weeks long timeout would create an independent I-D (with due acknowledgements) to salvage the existing code point allocation, which is outside of the IETF review range of the registry, so you don't have to engage in a 10-year long process for that. If that worked, it would simplify subsequent work. And if it didn't, perhaps it would be the least evil to lose the FQDN capability code early to save the energy for other important work.
Other opinions are welcome.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,939,2021-09-09T20:16:46Z,2021-09-16T12:01:08Z,2021-09-16T12:33:37Z,CLOSED,False,92,0,4,https://github.com/ton31337,Decode FQDN Capability,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/939,https://github.com/ton31337,9,https://github.com/the-tcpdump-group/tcpdump/pull/939#issuecomment-918273005,"Tested using FRR/GoBGP.
Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com","Well, it's expired or not, but there are players in the market supporting it and using it intensively. I agree to reject that if capability would be random and without its own IANA number.
For example, Bird and GoBGP just got this functionality recently. If that's useful, it doesn't care if it's expired or not. And IMO, since the IANA number is there, we should use it and adopt it as much as possible and not show as an Unknown capability.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,939,2021-09-09T20:16:46Z,2021-09-16T12:01:08Z,2021-09-16T12:33:37Z,CLOSED,False,92,0,4,https://github.com/ton31337,Decode FQDN Capability,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/939,https://github.com/infrastation,10,https://github.com/the-tcpdump-group/tcpdump/pull/939#issuecomment-918477368,"Tested using FRR/GoBGP.
Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com",This discussion seems to require some more time to achieve a good level of mutual understanding.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,939,2021-09-09T20:16:46Z,2021-09-16T12:01:08Z,2021-09-16T12:33:37Z,CLOSED,False,92,0,4,https://github.com/ton31337,Decode FQDN Capability,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/939,https://github.com/infrastation,11,https://github.com/the-tcpdump-group/tcpdump/pull/939#issuecomment-920827862,"Tested using FRR/GoBGP.
Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com",I would have more peace of mind closing this request now rather than talking in circles.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,939,2021-09-09T20:16:46Z,2021-09-16T12:01:08Z,2021-09-16T12:33:37Z,CLOSED,False,92,0,4,https://github.com/ton31337,Decode FQDN Capability,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/939,https://github.com/ton31337,12,https://github.com/the-tcpdump-group/tcpdump/pull/939#issuecomment-920840095,"Tested using FRR/GoBGP.
Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com",I don't understand then your point and overall attitude to open-source here.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,939,2021-09-09T20:16:46Z,2021-09-16T12:01:08Z,2021-09-16T12:33:37Z,CLOSED,False,92,0,4,https://github.com/ton31337,Decode FQDN Capability,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/939,https://github.com/infrastation,13,https://github.com/the-tcpdump-group/tcpdump/pull/939#issuecomment-920861108,"Tested using FRR/GoBGP.
Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com","My previous comment was an honest answer to your question (""Do we have any consensus/decision here or just closing? :)"") in a comment you have just deleted. I recognize your right not to like the answer and not to answer all questions about this request. Please recognize project maintainers' duty not to accept changes that do not look right. This might make more sense later if you re-read the conversation. Maybe on a different occasion a different request will work out better.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,941,2021-09-22T08:34:50Z,2021-10-09T20:34:30Z,2021-10-10T05:01:01Z,MERGED,True,65,1,4,https://github.com/ton31337,bgp: Decode BGP link-bandwidth extended community properly,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/941,https://github.com/ton31337,1,https://github.com/the-tcpdump-group/tcpdump/pull/941,"First two bytes are reserved for AS.
Before:
	  Extended Community (16), length: 8, Flags [OT]:
	    link-BW (0x4004), Flags [non-transitive]: bandwidth: -308754489798474897524123005616128.000 Mbps
	    0x0000:  4004 fde8 47f4 2400
	  Updated routes:
	    192.168.10.0/23

After:
	  Extended Community (16), length: 8, Flags [OT]:
	    link-BW (0x4004), Flags [non-transitive]: bandwidth: 1.000 Mbps
	    0x0000:  4004 fde8 47f4 2400
	  Updated routes:
	    192.168.10.0/23

Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com","First two bytes are reserved for AS.
Before:
	  Extended Community (16), length: 8, Flags [OT]:
	    link-BW (0x4004), Flags [non-transitive]: bandwidth: -308754489798474897524123005616128.000 Mbps
	    0x0000:  4004 fde8 47f4 2400
	  Updated routes:
	    192.168.10.0/23

After:
	  Extended Community (16), length: 8, Flags [OT]:
	    link-BW (0x4004), Flags [non-transitive]: bandwidth: 1.000 Mbps
	    0x0000:  4004 fde8 47f4 2400
	  Updated routes:
	    192.168.10.0/23

Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,941,2021-09-22T08:34:50Z,2021-10-09T20:34:30Z,2021-10-10T05:01:01Z,MERGED,True,65,1,4,https://github.com/ton31337,bgp: Decode BGP link-bandwidth extended community properly,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/941,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/941#issuecomment-925119427,"First two bytes are reserved for AS.
Before:
	  Extended Community (16), length: 8, Flags [OT]:
	    link-BW (0x4004), Flags [non-transitive]: bandwidth: -308754489798474897524123005616128.000 Mbps
	    0x0000:  4004 fde8 47f4 2400
	  Updated routes:
	    192.168.10.0/23

After:
	  Extended Community (16), length: 8, Flags [OT]:
	    link-BW (0x4004), Flags [non-transitive]: bandwidth: 1.000 Mbps
	    0x0000:  4004 fde8 47f4 2400
	  Updated routes:
	    192.168.10.0/23

Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com",Thank you for identifying this problem. Would you like to add a test .pcap file as well?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,941,2021-09-22T08:34:50Z,2021-10-09T20:34:30Z,2021-10-10T05:01:01Z,MERGED,True,65,1,4,https://github.com/ton31337,bgp: Decode BGP link-bandwidth extended community properly,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/941,https://github.com/ton31337,3,https://github.com/the-tcpdump-group/tcpdump/pull/941#issuecomment-925120355,"First two bytes are reserved for AS.
Before:
	  Extended Community (16), length: 8, Flags [OT]:
	    link-BW (0x4004), Flags [non-transitive]: bandwidth: -308754489798474897524123005616128.000 Mbps
	    0x0000:  4004 fde8 47f4 2400
	  Updated routes:
	    192.168.10.0/23

After:
	  Extended Community (16), length: 8, Flags [OT]:
	    link-BW (0x4004), Flags [non-transitive]: bandwidth: 1.000 Mbps
	    0x0000:  4004 fde8 47f4 2400
	  Updated routes:
	    192.168.10.0/23

Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com","Sure, I'll do.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,941,2021-09-22T08:34:50Z,2021-10-09T20:34:30Z,2021-10-10T05:01:01Z,MERGED,True,65,1,4,https://github.com/ton31337,bgp: Decode BGP link-bandwidth extended community properly,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/941,https://github.com/ton31337,4,https://github.com/the-tcpdump-group/tcpdump/pull/941#issuecomment-927288293,"First two bytes are reserved for AS.
Before:
	  Extended Community (16), length: 8, Flags [OT]:
	    link-BW (0x4004), Flags [non-transitive]: bandwidth: -308754489798474897524123005616128.000 Mbps
	    0x0000:  4004 fde8 47f4 2400
	  Updated routes:
	    192.168.10.0/23

After:
	  Extended Community (16), length: 8, Flags [OT]:
	    link-BW (0x4004), Flags [non-transitive]: bandwidth: 1.000 Mbps
	    0x0000:  4004 fde8 47f4 2400
	  Updated routes:
	    192.168.10.0/23

Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com",@infrastation I added a pcap test for this case.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,941,2021-09-22T08:34:50Z,2021-10-09T20:34:30Z,2021-10-10T05:01:01Z,MERGED,True,65,1,4,https://github.com/ton31337,bgp: Decode BGP link-bandwidth extended community properly,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/941,https://github.com/infrastation,5,https://github.com/the-tcpdump-group/tcpdump/pull/941#issuecomment-939318606,"First two bytes are reserved for AS.
Before:
	  Extended Community (16), length: 8, Flags [OT]:
	    link-BW (0x4004), Flags [non-transitive]: bandwidth: -308754489798474897524123005616128.000 Mbps
	    0x0000:  4004 fde8 47f4 2400
	  Updated routes:
	    192.168.10.0/23

After:
	  Extended Community (16), length: 8, Flags [OT]:
	    link-BW (0x4004), Flags [non-transitive]: bandwidth: 1.000 Mbps
	    0x0000:  4004 fde8 47f4 2400
	  Updated routes:
	    192.168.10.0/23

Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com","Thank you for waiting. A very similar reasoning applies to this change as in pull request #939 earlier, with the remarkable difference being that this protocol element has already been in print-bgp.c since 2002 and seems to predate the earliest respective internet draft by 7 years. So in this case it makes more sense to split the hair in favour of accepting the change.
That said, please remember that implementations of expired specifications are less likely to survive the code base churn due to the costs of long-term maintenance. As just one example, in this particular case commits that resulted in this little case block are 43fa6e0, c77a3f0, 7c790c6, 1a859e9, ee68aa3 and 12f570c. It has been a while since I last looked into BGP encoding, so it took me to look up draft-ietf-idr-link-bandwidth-07, draft-ietf-idr-link-bandwidth-00, RFC 7153 Section 5.2.3 and RFC4360 Section 3.1 to verify that your simple change is safe and consistent with the last revision of the I-D, which expired on 2018-09-06.
As before, if you need this protocol element to persist long-term, please find someone to revive the specification.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,941,2021-09-22T08:34:50Z,2021-10-09T20:34:30Z,2021-10-10T05:01:01Z,MERGED,True,65,1,4,https://github.com/ton31337,bgp: Decode BGP link-bandwidth extended community properly,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/941,https://github.com/ton31337,6,https://github.com/the-tcpdump-group/tcpdump/pull/941#issuecomment-939321254,"First two bytes are reserved for AS.
Before:
	  Extended Community (16), length: 8, Flags [OT]:
	    link-BW (0x4004), Flags [non-transitive]: bandwidth: -308754489798474897524123005616128.000 Mbps
	    0x0000:  4004 fde8 47f4 2400
	  Updated routes:
	    192.168.10.0/23

After:
	  Extended Community (16), length: 8, Flags [OT]:
	    link-BW (0x4004), Flags [non-transitive]: bandwidth: 1.000 Mbps
	    0x0000:  4004 fde8 47f4 2400
	  Updated routes:
	    192.168.10.0/23

Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com",Not sure what should I do here?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,941,2021-09-22T08:34:50Z,2021-10-09T20:34:30Z,2021-10-10T05:01:01Z,MERGED,True,65,1,4,https://github.com/ton31337,bgp: Decode BGP link-bandwidth extended community properly,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/941,https://github.com/infrastation,7,https://github.com/the-tcpdump-group/tcpdump/pull/941#issuecomment-939324299,"First two bytes are reserved for AS.
Before:
	  Extended Community (16), length: 8, Flags [OT]:
	    link-BW (0x4004), Flags [non-transitive]: bandwidth: -308754489798474897524123005616128.000 Mbps
	    0x0000:  4004 fde8 47f4 2400
	  Updated routes:
	    192.168.10.0/23

After:
	  Extended Community (16), length: 8, Flags [OT]:
	    link-BW (0x4004), Flags [non-transitive]: bandwidth: 1.000 Mbps
	    0x0000:  4004 fde8 47f4 2400
	  Updated routes:
	    192.168.10.0/23

Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com","Immediately: nothing. I have just rebased your branch to simplify the history, it will be merged in a few hours if nobody objects. Long term: please see above.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,942,2021-09-26T14:21:07Z,,2022-03-11T11:18:49Z,OPEN,False,865,0,4,https://github.com/colinbs,BGP: add dissector for BGPsec capability and path,4,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/942,https://github.com/colinbs,1,https://github.com/the-tcpdump-group/tcpdump/pull/942,"Add BGPsec capablility and path attribute parsing to the BGP dissector. BGPsec is defined by RFC8205.
Here is the example output of capability and BGPsec path attribute:
Capability:
Option Capabilities Advertisement (2), length: 5
  BGPsec (7), length: 3
    Version 0, Direction Receive (0), AFI IPv4 (1)

BGPsec path attribute:
BGPsec Path (33), length: 203, Flags [OE]: 
  Secure Path Length: 14
    Secure Path Segment: pCount: 1, Flags: [none] (0x00), AS: 3
    Secure Path Segment: pCount: 1, Flags: [none] (0x00), AS: 2
  Signature Block: Length: 189, Algo ID: 1
    Signature Segment:
      SKI:
        0x0000:  0ca0 6bdf c294 88fa 1a7f 4a47 93f3 a940
        0x0010:  10a8 0f97
      Length: 71
      Signature:
        0x0000:  3045 0221 0087 24ba eae1 09bc a23a c0f1 
        0x0010:  794c e301 3bab 329b 7c23 5e0a a0fd a4ca 
        0x0020:  0afe 736c ef02 203b 42ff c318 7568 16bb 
        0x0030:  3e88 0796 7379 db4f a83c fd56 1821 28d2 
        0x0040:  b78a 6ec7 145e 75 
    Signature Segment:
      SKI:
        0x0000: 0a15 fa1c b92f 4d34 95fe f0ca 9180 c0a9
        0x0010: 3c4a 254f 
      Length: 71
      Signature:
        0x0000:  3045 0220 7d87 e54d f871 4400 768a 3db7 
        0x0010:  acfa 55ae be23 e200 3cdf 21b6 1424 0d1e 
        0x0020:  8831 49e3 0221 00e2 d828 edb0 0277 dc25 
        0x0030:  f4c5 aa4e 2906 74e3 aa13 6c30 f78b d415 
        0x0040:  0e55 35ef 3fc8 70","Add BGPsec capablility and path attribute parsing to the BGP dissector. BGPsec is defined by RFC8205.
Here is the example output of capability and BGPsec path attribute:
Capability:
Option Capabilities Advertisement (2), length: 5
  BGPsec (7), length: 3
    Version 0, Direction Receive (0), AFI IPv4 (1)

BGPsec path attribute:
BGPsec Path (33), length: 203, Flags [OE]: 
  Secure Path Length: 14
    Secure Path Segment: pCount: 1, Flags: [none] (0x00), AS: 3
    Secure Path Segment: pCount: 1, Flags: [none] (0x00), AS: 2
  Signature Block: Length: 189, Algo ID: 1
    Signature Segment:
      SKI:
        0x0000:  0ca0 6bdf c294 88fa 1a7f 4a47 93f3 a940
        0x0010:  10a8 0f97
      Length: 71
      Signature:
        0x0000:  3045 0221 0087 24ba eae1 09bc a23a c0f1 
        0x0010:  794c e301 3bab 329b 7c23 5e0a a0fd a4ca 
        0x0020:  0afe 736c ef02 203b 42ff c318 7568 16bb 
        0x0030:  3e88 0796 7379 db4f a83c fd56 1821 28d2 
        0x0040:  b78a 6ec7 145e 75 
    Signature Segment:
      SKI:
        0x0000: 0a15 fa1c b92f 4d34 95fe f0ca 9180 c0a9
        0x0010: 3c4a 254f 
      Length: 71
      Signature:
        0x0000:  3045 0220 7d87 e54d f871 4400 768a 3db7 
        0x0010:  acfa 55ae be23 e200 3cdf 21b6 1424 0d1e 
        0x0020:  8831 49e3 0221 00e2 d828 edb0 0277 dc25 
        0x0030:  f4c5 aa4e 2906 74e3 aa13 6c30 f78b d415 
        0x0040:  0e55 35ef 3fc8 70",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,942,2021-09-26T14:21:07Z,,2022-03-11T11:18:49Z,OPEN,False,865,0,4,https://github.com/colinbs,BGP: add dissector for BGPsec capability and path,4,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/942,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/942#issuecomment-1038153721,"Add BGPsec capablility and path attribute parsing to the BGP dissector. BGPsec is defined by RFC8205.
Here is the example output of capability and BGPsec path attribute:
Capability:
Option Capabilities Advertisement (2), length: 5
  BGPsec (7), length: 3
    Version 0, Direction Receive (0), AFI IPv4 (1)

BGPsec path attribute:
BGPsec Path (33), length: 203, Flags [OE]: 
  Secure Path Length: 14
    Secure Path Segment: pCount: 1, Flags: [none] (0x00), AS: 3
    Secure Path Segment: pCount: 1, Flags: [none] (0x00), AS: 2
  Signature Block: Length: 189, Algo ID: 1
    Signature Segment:
      SKI:
        0x0000:  0ca0 6bdf c294 88fa 1a7f 4a47 93f3 a940
        0x0010:  10a8 0f97
      Length: 71
      Signature:
        0x0000:  3045 0221 0087 24ba eae1 09bc a23a c0f1 
        0x0010:  794c e301 3bab 329b 7c23 5e0a a0fd a4ca 
        0x0020:  0afe 736c ef02 203b 42ff c318 7568 16bb 
        0x0030:  3e88 0796 7379 db4f a83c fd56 1821 28d2 
        0x0040:  b78a 6ec7 145e 75 
    Signature Segment:
      SKI:
        0x0000: 0a15 fa1c b92f 4d34 95fe f0ca 9180 c0a9
        0x0010: 3c4a 254f 
      Length: 71
      Signature:
        0x0000:  3045 0220 7d87 e54d f871 4400 768a 3db7 
        0x0010:  acfa 55ae be23 e200 3cdf 21b6 1424 0d1e 
        0x0020:  8831 49e3 0221 00e2 d828 edb0 0277 dc25 
        0x0030:  f4c5 aa4e 2906 74e3 aa13 6c30 f78b d415 
        0x0040:  0e55 35ef 3fc8 70",The changes to config.h.in do not look relevant.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,942,2021-09-26T14:21:07Z,,2022-03-11T11:18:49Z,OPEN,False,865,0,4,https://github.com/colinbs,BGP: add dissector for BGPsec capability and path,4,['reviewed_needswork'],https://github.com/the-tcpdump-group/tcpdump/pull/942,https://github.com/colinbs,3,https://github.com/the-tcpdump-group/tcpdump/pull/942#issuecomment-1038187074,"Add BGPsec capablility and path attribute parsing to the BGP dissector. BGPsec is defined by RFC8205.
Here is the example output of capability and BGPsec path attribute:
Capability:
Option Capabilities Advertisement (2), length: 5
  BGPsec (7), length: 3
    Version 0, Direction Receive (0), AFI IPv4 (1)

BGPsec path attribute:
BGPsec Path (33), length: 203, Flags [OE]: 
  Secure Path Length: 14
    Secure Path Segment: pCount: 1, Flags: [none] (0x00), AS: 3
    Secure Path Segment: pCount: 1, Flags: [none] (0x00), AS: 2
  Signature Block: Length: 189, Algo ID: 1
    Signature Segment:
      SKI:
        0x0000:  0ca0 6bdf c294 88fa 1a7f 4a47 93f3 a940
        0x0010:  10a8 0f97
      Length: 71
      Signature:
        0x0000:  3045 0221 0087 24ba eae1 09bc a23a c0f1 
        0x0010:  794c e301 3bab 329b 7c23 5e0a a0fd a4ca 
        0x0020:  0afe 736c ef02 203b 42ff c318 7568 16bb 
        0x0030:  3e88 0796 7379 db4f a83c fd56 1821 28d2 
        0x0040:  b78a 6ec7 145e 75 
    Signature Segment:
      SKI:
        0x0000: 0a15 fa1c b92f 4d34 95fe f0ca 9180 c0a9
        0x0010: 3c4a 254f 
      Length: 71
      Signature:
        0x0000:  3045 0220 7d87 e54d f871 4400 768a 3db7 
        0x0010:  acfa 55ae be23 e200 3cdf 21b6 1424 0d1e 
        0x0020:  8831 49e3 0221 00e2 d828 edb0 0277 dc25 
        0x0030:  f4c5 aa4e 2906 74e3 aa13 6c30 f78b d415 
        0x0040:  0e55 35ef 3fc8 70","The changes to config.h.in do not look relevant.

TBH I have no idea where they come from. I will remove them.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,943,2021-10-01T01:43:31Z,2021-11-09T08:21:26Z,2021-11-09T21:09:50Z,MERGED,True,374,0,16,https://github.com/rpaulo,Initial support to parse QUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/943,https://github.com/rpaulo,1,https://github.com/the-tcpdump-group/tcpdump/pull/943,"This is the initial support for parsing QUIC packets.  I'd like to get feedback from the community as to the code readiness of this diff.  I'm aware the unit tests are missing, but I will correct that once the code is accepted.
This is how the parser looks like right now.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 524288 bytes
18:56:36.488940 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid f9f4b0816e432d29, length 1182
18:56:36.500845 IP6 (flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 142) ::1.443 > ::1.60794: quic, initial, scid efa67422ee5c3eb0, length 116
18:56:36.500871 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 1205) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 1180
18:56:36.500881 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 127) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 102
18:56:36.509651 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid efa67422ee5c3eb0, length 1182
18:56:36.509731 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 47) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 22
18:56:36.510251 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 81) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 56
18:56:36.510618 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 50) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 25
18:56:36.510715 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.510883 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 250) ::1.443 > ::1.60794: quic, protected
18:56:36.511289 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511551 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511655 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511692 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 34) ::1.443 > ::1.60794: quic, protected
18:56:36.511762 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 44) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.512221 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 86) ::1.443 > ::1.60794: quic, protected
18:56:36.512285 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.512619 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0","This is the initial support for parsing QUIC packets.  I'd like to get feedback from the community as to the code readiness of this diff.  I'm aware the unit tests are missing, but I will correct that once the code is accepted.
This is how the parser looks like right now.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 524288 bytes
18:56:36.488940 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid f9f4b0816e432d29, length 1182
18:56:36.500845 IP6 (flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 142) ::1.443 > ::1.60794: quic, initial, scid efa67422ee5c3eb0, length 116
18:56:36.500871 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 1205) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 1180
18:56:36.500881 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 127) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 102
18:56:36.509651 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid efa67422ee5c3eb0, length 1182
18:56:36.509731 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 47) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 22
18:56:36.510251 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 81) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 56
18:56:36.510618 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 50) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 25
18:56:36.510715 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.510883 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 250) ::1.443 > ::1.60794: quic, protected
18:56:36.511289 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511551 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511655 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511692 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 34) ::1.443 > ::1.60794: quic, protected
18:56:36.511762 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 44) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.512221 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 86) ::1.443 > ::1.60794: quic, protected
18:56:36.512285 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.512619 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,943,2021-10-01T01:43:31Z,2021-11-09T08:21:26Z,2021-11-09T21:09:50Z,MERGED,True,374,0,16,https://github.com/rpaulo,Initial support to parse QUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/943,https://github.com/rpaulo,2,https://github.com/the-tcpdump-group/tcpdump/pull/943#issuecomment-931829903,"This is the initial support for parsing QUIC packets.  I'd like to get feedback from the community as to the code readiness of this diff.  I'm aware the unit tests are missing, but I will correct that once the code is accepted.
This is how the parser looks like right now.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 524288 bytes
18:56:36.488940 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid f9f4b0816e432d29, length 1182
18:56:36.500845 IP6 (flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 142) ::1.443 > ::1.60794: quic, initial, scid efa67422ee5c3eb0, length 116
18:56:36.500871 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 1205) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 1180
18:56:36.500881 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 127) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 102
18:56:36.509651 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid efa67422ee5c3eb0, length 1182
18:56:36.509731 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 47) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 22
18:56:36.510251 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 81) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 56
18:56:36.510618 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 50) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 25
18:56:36.510715 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.510883 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 250) ::1.443 > ::1.60794: quic, protected
18:56:36.511289 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511551 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511655 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511692 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 34) ::1.443 > ::1.60794: quic, protected
18:56:36.511762 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 44) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.512221 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 86) ::1.443 > ::1.60794: quic, protected
18:56:36.512285 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.512619 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0","Looks like I forgot to add the file to cmake in addition to using the right format string.  Will fix it, but feel free to comment on the other parts of the code in the mean time.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,943,2021-10-01T01:43:31Z,2021-11-09T08:21:26Z,2021-11-09T21:09:50Z,MERGED,True,374,0,16,https://github.com/rpaulo,Initial support to parse QUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/943,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/943#issuecomment-945723967,"This is the initial support for parsing QUIC packets.  I'd like to get feedback from the community as to the code readiness of this diff.  I'm aware the unit tests are missing, but I will correct that once the code is accepted.
This is how the parser looks like right now.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 524288 bytes
18:56:36.488940 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid f9f4b0816e432d29, length 1182
18:56:36.500845 IP6 (flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 142) ::1.443 > ::1.60794: quic, initial, scid efa67422ee5c3eb0, length 116
18:56:36.500871 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 1205) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 1180
18:56:36.500881 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 127) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 102
18:56:36.509651 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid efa67422ee5c3eb0, length 1182
18:56:36.509731 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 47) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 22
18:56:36.510251 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 81) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 56
18:56:36.510618 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 50) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 25
18:56:36.510715 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.510883 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 250) ::1.443 > ::1.60794: quic, protected
18:56:36.511289 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511551 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511655 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511692 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 34) ::1.443 > ::1.60794: quic, protected
18:56:36.511762 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 44) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.512221 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 86) ::1.443 > ::1.60794: quic, protected
18:56:36.512285 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.512619 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0","First look:

You should replace EXTRACT_ macros by GET_ ones (They include bounds checks).
You should remove trailing spaces/tabs.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,943,2021-10-01T01:43:31Z,2021-11-09T08:21:26Z,2021-11-09T21:09:50Z,MERGED,True,374,0,16,https://github.com/rpaulo,Initial support to parse QUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/943,https://github.com/fxlb,4,https://github.com/the-tcpdump-group/tcpdump/pull/943#issuecomment-945728257,"This is the initial support for parsing QUIC packets.  I'd like to get feedback from the community as to the code readiness of this diff.  I'm aware the unit tests are missing, but I will correct that once the code is accepted.
This is how the parser looks like right now.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 524288 bytes
18:56:36.488940 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid f9f4b0816e432d29, length 1182
18:56:36.500845 IP6 (flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 142) ::1.443 > ::1.60794: quic, initial, scid efa67422ee5c3eb0, length 116
18:56:36.500871 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 1205) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 1180
18:56:36.500881 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 127) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 102
18:56:36.509651 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid efa67422ee5c3eb0, length 1182
18:56:36.509731 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 47) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 22
18:56:36.510251 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 81) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 56
18:56:36.510618 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 50) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 25
18:56:36.510715 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.510883 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 250) ::1.443 > ::1.60794: quic, protected
18:56:36.511289 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511551 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511655 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511692 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 34) ::1.443 > ::1.60794: quic, protected
18:56:36.511762 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 44) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.512221 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 86) ::1.443 > ::1.60794: quic, protected
18:56:36.512285 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.512619 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0","You should also have a look at the reasons of failed checks (follow ""Details"" links).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,943,2021-10-01T01:43:31Z,2021-11-09T08:21:26Z,2021-11-09T21:09:50Z,MERGED,True,374,0,16,https://github.com/rpaulo,Initial support to parse QUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/943,https://github.com/rpaulo,5,https://github.com/the-tcpdump-group/tcpdump/pull/943#issuecomment-946966049,"This is the initial support for parsing QUIC packets.  I'd like to get feedback from the community as to the code readiness of this diff.  I'm aware the unit tests are missing, but I will correct that once the code is accepted.
This is how the parser looks like right now.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 524288 bytes
18:56:36.488940 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid f9f4b0816e432d29, length 1182
18:56:36.500845 IP6 (flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 142) ::1.443 > ::1.60794: quic, initial, scid efa67422ee5c3eb0, length 116
18:56:36.500871 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 1205) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 1180
18:56:36.500881 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 127) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 102
18:56:36.509651 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid efa67422ee5c3eb0, length 1182
18:56:36.509731 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 47) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 22
18:56:36.510251 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 81) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 56
18:56:36.510618 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 50) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 25
18:56:36.510715 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.510883 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 250) ::1.443 > ::1.60794: quic, protected
18:56:36.511289 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511551 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511655 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511692 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 34) ::1.443 > ::1.60794: quic, protected
18:56:36.511762 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 44) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.512221 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 86) ::1.443 > ::1.60794: quic, protected
18:56:36.512285 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.512619 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0","First look:

You should replace EXTRACT_ macros by GET_ ones (They include bounds checks).


Technically it doesn't matter because I'm using the EXTRACT macros the same way GET does but I can replace them if that's the correct style.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,943,2021-10-01T01:43:31Z,2021-11-09T08:21:26Z,2021-11-09T21:09:50Z,MERGED,True,374,0,16,https://github.com/rpaulo,Initial support to parse QUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/943,https://github.com/fxlb,6,https://github.com/the-tcpdump-group/tcpdump/pull/943#issuecomment-946973070,"This is the initial support for parsing QUIC packets.  I'd like to get feedback from the community as to the code readiness of this diff.  I'm aware the unit tests are missing, but I will correct that once the code is accepted.
This is how the parser looks like right now.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 524288 bytes
18:56:36.488940 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid f9f4b0816e432d29, length 1182
18:56:36.500845 IP6 (flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 142) ::1.443 > ::1.60794: quic, initial, scid efa67422ee5c3eb0, length 116
18:56:36.500871 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 1205) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 1180
18:56:36.500881 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 127) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 102
18:56:36.509651 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid efa67422ee5c3eb0, length 1182
18:56:36.509731 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 47) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 22
18:56:36.510251 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 81) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 56
18:56:36.510618 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 50) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 25
18:56:36.510715 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.510883 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 250) ::1.443 > ::1.60794: quic, protected
18:56:36.511289 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511551 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511655 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511692 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 34) ::1.443 > ::1.60794: quic, protected
18:56:36.511762 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 44) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.512221 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 86) ::1.443 > ::1.60794: quic, protected
18:56:36.512285 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.512619 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0","Technically it doesn't matter because I'm using the EXTRACT macros the same way GET does but I can replace them if that's the correct style.

It's not only a matter of style. With GET_ macros, we don't have to verify that the bounds checks are done correctly.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,943,2021-10-01T01:43:31Z,2021-11-09T08:21:26Z,2021-11-09T21:09:50Z,MERGED,True,374,0,16,https://github.com/rpaulo,Initial support to parse QUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/943,https://github.com/fxlb,7,https://github.com/the-tcpdump-group/tcpdump/pull/943#issuecomment-947839229,"This is the initial support for parsing QUIC packets.  I'd like to get feedback from the community as to the code readiness of this diff.  I'm aware the unit tests are missing, but I will correct that once the code is accepted.
This is how the parser looks like right now.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 524288 bytes
18:56:36.488940 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid f9f4b0816e432d29, length 1182
18:56:36.500845 IP6 (flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 142) ::1.443 > ::1.60794: quic, initial, scid efa67422ee5c3eb0, length 116
18:56:36.500871 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 1205) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 1180
18:56:36.500881 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 127) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 102
18:56:36.509651 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid efa67422ee5c3eb0, length 1182
18:56:36.509731 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 47) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 22
18:56:36.510251 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 81) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 56
18:56:36.510618 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 50) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 25
18:56:36.510715 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.510883 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 250) ::1.443 > ::1.60794: quic, protected
18:56:36.511289 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511551 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511655 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511692 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 34) ::1.443 > ::1.60794: quic, protected
18:56:36.511762 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 44) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.512221 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 86) ::1.443 > ::1.60794: quic, protected
18:56:36.512285 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.512619 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0","Other problem to fix: Segmentation fault with the attached pcap file.
(Debian Bullseye, build with gcc or clang)
$ ./tcpdump -#n -r 17274-quic_46_sni.pcap
reading from file 17274-quic_46_sni.pcap, link-type RAW (Raw IP), snapshot length 262144
Segmentation fault

17274-quic_46_sni.pcap.gz",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,943,2021-10-01T01:43:31Z,2021-11-09T08:21:26Z,2021-11-09T21:09:50Z,MERGED,True,374,0,16,https://github.com/rpaulo,Initial support to parse QUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/943,https://github.com/rpaulo,8,https://github.com/the-tcpdump-group/tcpdump/pull/943#issuecomment-952369249,"This is the initial support for parsing QUIC packets.  I'd like to get feedback from the community as to the code readiness of this diff.  I'm aware the unit tests are missing, but I will correct that once the code is accepted.
This is how the parser looks like right now.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 524288 bytes
18:56:36.488940 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid f9f4b0816e432d29, length 1182
18:56:36.500845 IP6 (flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 142) ::1.443 > ::1.60794: quic, initial, scid efa67422ee5c3eb0, length 116
18:56:36.500871 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 1205) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 1180
18:56:36.500881 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 127) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 102
18:56:36.509651 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid efa67422ee5c3eb0, length 1182
18:56:36.509731 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 47) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 22
18:56:36.510251 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 81) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 56
18:56:36.510618 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 50) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 25
18:56:36.510715 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.510883 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 250) ::1.443 > ::1.60794: quic, protected
18:56:36.511289 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511551 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511655 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511692 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 34) ::1.443 > ::1.60794: quic, protected
18:56:36.511762 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 44) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.512221 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 86) ::1.443 > ::1.60794: quic, protected
18:56:36.512285 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.512619 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0","Other problem to fix: Segmentation fault with the attached pcap file. (Debian Bullseye, build with gcc or clang)
$ ./tcpdump -#n -r 17274-quic_46_sni.pcap
reading from file 17274-quic_46_sni.pcap, link-type RAW (Raw IP), snapshot length 262144
Segmentation fault

17274-quic_46_sni.pcap.gz

Thanks!  Fixed.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,943,2021-10-01T01:43:31Z,2021-11-09T08:21:26Z,2021-11-09T21:09:50Z,MERGED,True,374,0,16,https://github.com/rpaulo,Initial support to parse QUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/943,https://github.com/fxlb,9,https://github.com/the-tcpdump-group/tcpdump/pull/943#issuecomment-955647008,"This is the initial support for parsing QUIC packets.  I'd like to get feedback from the community as to the code readiness of this diff.  I'm aware the unit tests are missing, but I will correct that once the code is accepted.
This is how the parser looks like right now.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 524288 bytes
18:56:36.488940 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid f9f4b0816e432d29, length 1182
18:56:36.500845 IP6 (flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 142) ::1.443 > ::1.60794: quic, initial, scid efa67422ee5c3eb0, length 116
18:56:36.500871 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 1205) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 1180
18:56:36.500881 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 127) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 102
18:56:36.509651 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid efa67422ee5c3eb0, length 1182
18:56:36.509731 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 47) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 22
18:56:36.510251 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 81) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 56
18:56:36.510618 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 50) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 25
18:56:36.510715 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.510883 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 250) ::1.443 > ::1.60794: quic, protected
18:56:36.511289 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511551 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511655 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511692 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 34) ::1.443 > ::1.60794: quic, protected
18:56:36.511762 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 44) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.512221 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 86) ::1.443 > ::1.60794: quic, protected
18:56:36.512285 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.512619 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0","Thanks for the update. Before a merge please

remove trailing spaces/tabs,
rebase on top of  the-tcpdump-group:master and rebase -i to have only one commit.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,943,2021-10-01T01:43:31Z,2021-11-09T08:21:26Z,2021-11-09T21:09:50Z,MERGED,True,374,0,16,https://github.com/rpaulo,Initial support to parse QUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/943,https://github.com/rpaulo,10,https://github.com/the-tcpdump-group/tcpdump/pull/943#issuecomment-956448488,"This is the initial support for parsing QUIC packets.  I'd like to get feedback from the community as to the code readiness of this diff.  I'm aware the unit tests are missing, but I will correct that once the code is accepted.
This is how the parser looks like right now.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 524288 bytes
18:56:36.488940 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid f9f4b0816e432d29, length 1182
18:56:36.500845 IP6 (flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 142) ::1.443 > ::1.60794: quic, initial, scid efa67422ee5c3eb0, length 116
18:56:36.500871 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 1205) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 1180
18:56:36.500881 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 127) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 102
18:56:36.509651 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid efa67422ee5c3eb0, length 1182
18:56:36.509731 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 47) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 22
18:56:36.510251 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 81) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 56
18:56:36.510618 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 50) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 25
18:56:36.510715 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.510883 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 250) ::1.443 > ::1.60794: quic, protected
18:56:36.511289 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511551 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511655 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511692 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 34) ::1.443 > ::1.60794: quic, protected
18:56:36.511762 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 44) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.512221 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 86) ::1.443 > ::1.60794: quic, protected
18:56:36.512285 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.512619 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0","Thanks for the update. Before a merge please

remove trailing spaces/tabs,
rebase on top of  the-tcpdump-group:master and rebase -i to have only one commit.


Done!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,943,2021-10-01T01:43:31Z,2021-11-09T08:21:26Z,2021-11-09T21:09:50Z,MERGED,True,374,0,16,https://github.com/rpaulo,Initial support to parse QUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/943,https://github.com/fxlb,11,https://github.com/the-tcpdump-group/tcpdump/pull/943#issuecomment-956465416,"This is the initial support for parsing QUIC packets.  I'd like to get feedback from the community as to the code readiness of this diff.  I'm aware the unit tests are missing, but I will correct that once the code is accepted.
This is how the parser looks like right now.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 524288 bytes
18:56:36.488940 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid f9f4b0816e432d29, length 1182
18:56:36.500845 IP6 (flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 142) ::1.443 > ::1.60794: quic, initial, scid efa67422ee5c3eb0, length 116
18:56:36.500871 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 1205) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 1180
18:56:36.500881 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 127) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 102
18:56:36.509651 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid efa67422ee5c3eb0, length 1182
18:56:36.509731 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 47) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 22
18:56:36.510251 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 81) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 56
18:56:36.510618 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 50) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 25
18:56:36.510715 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.510883 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 250) ::1.443 > ::1.60794: quic, protected
18:56:36.511289 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511551 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511655 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511692 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 34) ::1.443 > ::1.60794: quic, protected
18:56:36.511762 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 44) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.512221 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 86) ::1.443 > ::1.60794: quic, protected
18:56:36.512285 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.512619 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0",Removed trailing tabs on line 85.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,943,2021-10-01T01:43:31Z,2021-11-09T08:21:26Z,2021-11-09T21:09:50Z,MERGED,True,374,0,16,https://github.com/rpaulo,Initial support to parse QUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/943,https://github.com/fxlb,12,https://github.com/the-tcpdump-group/tcpdump/pull/943#issuecomment-957188033,"This is the initial support for parsing QUIC packets.  I'd like to get feedback from the community as to the code readiness of this diff.  I'm aware the unit tests are missing, but I will correct that once the code is accepted.
This is how the parser looks like right now.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 524288 bytes
18:56:36.488940 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid f9f4b0816e432d29, length 1182
18:56:36.500845 IP6 (flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 142) ::1.443 > ::1.60794: quic, initial, scid efa67422ee5c3eb0, length 116
18:56:36.500871 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 1205) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 1180
18:56:36.500881 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 127) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 102
18:56:36.509651 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid efa67422ee5c3eb0, length 1182
18:56:36.509731 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 47) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 22
18:56:36.510251 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 81) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 56
18:56:36.510618 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 50) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 25
18:56:36.510715 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.510883 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 250) ::1.443 > ::1.60794: quic, protected
18:56:36.511289 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511551 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511655 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511692 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 34) ::1.443 > ::1.60794: quic, protected
18:56:36.511762 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 44) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.512221 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 86) ::1.443 > ::1.60794: quic, protected
18:56:36.512285 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.512619 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0","Missed warnings in Windows builds (32 bits):
C:\projects\tcpdump\print-quic.c(110): warning C4028: formal parameter 3 different from declaration [C:\projects\tcpdump\build\netdissect.vcxproj]
C:\projects\tcpdump\print-quic.c(133): warning C4244: '=': conversion from 'uint64_t' to 'uint8_t', possible loss of data [C:\projects\tcpdump\build\netdissect.vcxproj]
C:\projects\tcpdump\print-quic.c(220): warning C4242: 'function': conversion from 'uint64_t' to 'std::size_t', possible loss of data [C:\projects\tcpdump\build\netdissect.vcxproj]
C:\projects\tcpdump\print-quic.c(221): warning C4242: 'function': conversion from 'uint64_t' to 'std::size_t', possible loss of data [C:\projects\tcpdump\build\netdissect.vcxproj]
C:\projects\tcpdump\print-quic.c(224): warning C4242: 'function': conversion from 'uint64_t' to 'std::size_t', possible loss of data [C:\projects\tcpdump\build\netdissect.vcxproj]
C:\projects\tcpdump\print-quic.c(231): warning C4242: 'function': conversion from 'uint64_t' to 'std::size_t', possible loss of data [C:\projects\tcpdump\build\netdissect.vcxproj]
C:\projects\tcpdump\print-quic.c(232): warning C4242: 'function': conversion from 'uint64_t' to 'std::size_t', possible loss of data [C:\projects\tcpdump\build\netdissect.vcxproj]
C:\projects\tcpdump\print-quic.c(234): warning C4242: 'function': conversion from 'uint64_t' to 'std::size_t', possible loss of data [C:\projects\tcpdump\build\netdissect.vcxproj]
C:\projects\tcpdump\print-quic.c(274): warning C4028: formal parameter 3 different from declaration [C:\projects\tcpdump\build\netdissect.vcxproj]

https://ci.appveyor.com/project/guyharris/tcpdump/builds/41365352/job/mrddy4viik4omnmp",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,943,2021-10-01T01:43:31Z,2021-11-09T08:21:26Z,2021-11-09T21:09:50Z,MERGED,True,374,0,16,https://github.com/rpaulo,Initial support to parse QUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/943,https://github.com/gvanem,13,https://github.com/the-tcpdump-group/tcpdump/pull/943#issuecomment-957212683,"This is the initial support for parsing QUIC packets.  I'd like to get feedback from the community as to the code readiness of this diff.  I'm aware the unit tests are missing, but I will correct that once the code is accepted.
This is how the parser looks like right now.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 524288 bytes
18:56:36.488940 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid f9f4b0816e432d29, length 1182
18:56:36.500845 IP6 (flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 142) ::1.443 > ::1.60794: quic, initial, scid efa67422ee5c3eb0, length 116
18:56:36.500871 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 1205) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 1180
18:56:36.500881 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 127) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 102
18:56:36.509651 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid efa67422ee5c3eb0, length 1182
18:56:36.509731 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 47) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 22
18:56:36.510251 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 81) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 56
18:56:36.510618 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 50) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 25
18:56:36.510715 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.510883 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 250) ::1.443 > ::1.60794: quic, protected
18:56:36.511289 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511551 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511655 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511692 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 34) ::1.443 > ::1.60794: quic, protected
18:56:36.511762 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 44) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.512221 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 86) ::1.443 > ::1.60794: quic, protected
18:56:36.512285 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.512619 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0","... 'std::size_t', ...

Looks like a C++ warning. Yet option /TC was used. WTF!?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,943,2021-10-01T01:43:31Z,2021-11-09T08:21:26Z,2021-11-09T21:09:50Z,MERGED,True,374,0,16,https://github.com/rpaulo,Initial support to parse QUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/943,https://github.com/fxlb,14,https://github.com/the-tcpdump-group/tcpdump/pull/943#issuecomment-958808242,"This is the initial support for parsing QUIC packets.  I'd like to get feedback from the community as to the code readiness of this diff.  I'm aware the unit tests are missing, but I will correct that once the code is accepted.
This is how the parser looks like right now.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 524288 bytes
18:56:36.488940 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid f9f4b0816e432d29, length 1182
18:56:36.500845 IP6 (flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 142) ::1.443 > ::1.60794: quic, initial, scid efa67422ee5c3eb0, length 116
18:56:36.500871 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 1205) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 1180
18:56:36.500881 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 127) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 102
18:56:36.509651 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid efa67422ee5c3eb0, length 1182
18:56:36.509731 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 47) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 22
18:56:36.510251 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 81) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 56
18:56:36.510618 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 50) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 25
18:56:36.510715 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.510883 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 250) ::1.443 > ::1.60794: quic, protected
18:56:36.511289 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511551 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511655 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511692 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 34) ::1.443 > ::1.60794: quic, protected
18:56:36.511762 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 44) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.512221 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 86) ::1.443 > ::1.60794: quic, protected
18:56:36.512285 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.512619 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0","With Visual Studio 16 2019:
C:\projects\tcpdump\print-quic.c(220,41): warning C4242: 'function': conversion from 'uint64_t' to 'size_t', possible loss of data [C:\projects\tcpdump\build\netdissect.vcxproj]

Thus, no 'std::size_t' with this compiler...",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,943,2021-10-01T01:43:31Z,2021-11-09T08:21:26Z,2021-11-09T21:09:50Z,MERGED,True,374,0,16,https://github.com/rpaulo,Initial support to parse QUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/943,https://github.com/guyharris,15,https://github.com/the-tcpdump-group/tcpdump/pull/943#issuecomment-963617665,"This is the initial support for parsing QUIC packets.  I'd like to get feedback from the community as to the code readiness of this diff.  I'm aware the unit tests are missing, but I will correct that once the code is accepted.
This is how the parser looks like right now.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 524288 bytes
18:56:36.488940 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid f9f4b0816e432d29, length 1182
18:56:36.500845 IP6 (flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 142) ::1.443 > ::1.60794: quic, initial, scid efa67422ee5c3eb0, length 116
18:56:36.500871 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 1205) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 1180
18:56:36.500881 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 127) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 102
18:56:36.509651 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid efa67422ee5c3eb0, length 1182
18:56:36.509731 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 47) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 22
18:56:36.510251 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 81) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 56
18:56:36.510618 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 50) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 25
18:56:36.510715 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.510883 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 250) ::1.443 > ::1.60794: quic, protected
18:56:36.511289 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511551 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511655 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511692 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 34) ::1.443 > ::1.60794: quic, protected
18:56:36.511762 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 44) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.512221 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 86) ::1.443 > ::1.60794: quic, protected
18:56:36.512285 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.512619 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0","Thus, no 'std::size_t' with this compiler...

If, by that, you mean ""no 64-bit size_t with this compiler"", that's true. (std:: is a C++-ism, and this is presumably C code, so that doesn't apply.)
It's true because it's a 32-bit build, so size_t should be 32-bit, and a warning should be issued for an assignment of uint64_t to size_t.
And the correct fix may simply be to introduce a cast, e.g.
prefix = (uint8_t)v >> 6;

in get_be_vli() - v is 64-bit because it's used to construct a 64-bit value, but, at that point, it's been set by a call to GET_U_1(), so it's known to be in the range 0-255 and thus to fit into a uint8_t.  That's what the code currently does, as of the latest commit.
An alternative would be something such as
static inline uint64_t
get_be_vli(netdissect_options *ndo, const u_char *p, uint8_t *out_length)
{
	uint64_t v;
	uint8_t first_octet;
	uint8_t prefix;
	uint8_t length;

	first_octet = GET_U_1(p);
	p++;
	prefix = first_octet >> 6;
	length = 1 << prefix;
	if (out_length != NULL)
		*out_length = length;
	v = first_octet & 0x3f;
	while (length > 1) {
		v = (v << 8) + GET_U_1(p);
		p++;
		length--;
	}
 	return v;
}",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,943,2021-10-01T01:43:31Z,2021-11-09T08:21:26Z,2021-11-09T21:09:50Z,MERGED,True,374,0,16,https://github.com/rpaulo,Initial support to parse QUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/943,https://github.com/rpaulo,16,https://github.com/the-tcpdump-group/tcpdump/pull/943#issuecomment-963660879,"This is the initial support for parsing QUIC packets.  I'd like to get feedback from the community as to the code readiness of this diff.  I'm aware the unit tests are missing, but I will correct that once the code is accepted.
This is how the parser looks like right now.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 524288 bytes
18:56:36.488940 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid f9f4b0816e432d29, length 1182
18:56:36.500845 IP6 (flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 142) ::1.443 > ::1.60794: quic, initial, scid efa67422ee5c3eb0, length 116
18:56:36.500871 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 1205) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 1180
18:56:36.500881 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 127) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 102
18:56:36.509651 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid efa67422ee5c3eb0, length 1182
18:56:36.509731 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 47) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 22
18:56:36.510251 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 81) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 56
18:56:36.510618 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 50) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 25
18:56:36.510715 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.510883 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 250) ::1.443 > ::1.60794: quic, protected
18:56:36.511289 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511551 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511655 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511692 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 34) ::1.443 > ::1.60794: quic, protected
18:56:36.511762 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 44) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.512221 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 86) ::1.443 > ::1.60794: quic, protected
18:56:36.512285 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.512619 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0","Missed warnings in Windows builds (32 bits):
C:\projects\tcpdump\print-quic.c(110): warning C4028: formal parameter 3 different from declaration [C:\projects\tcpdump\build\netdissect.vcxproj]
C:\projects\tcpdump\print-quic.c(133): warning C4244: '=': conversion from 'uint64_t' to 'uint8_t', possible loss of data [C:\projects\tcpdump\build\netdissect.vcxproj]
C:\projects\tcpdump\print-quic.c(220): warning C4242: 'function': conversion from 'uint64_t' to 'std::size_t', possible loss of data [C:\projects\tcpdump\build\netdissect.vcxproj]
C:\projects\tcpdump\print-quic.c(221): warning C4242: 'function': conversion from 'uint64_t' to 'std::size_t', possible loss of data [C:\projects\tcpdump\build\netdissect.vcxproj]
C:\projects\tcpdump\print-quic.c(224): warning C4242: 'function': conversion from 'uint64_t' to 'std::size_t', possible loss of data [C:\projects\tcpdump\build\netdissect.vcxproj]
C:\projects\tcpdump\print-quic.c(231): warning C4242: 'function': conversion from 'uint64_t' to 'std::size_t', possible loss of data [C:\projects\tcpdump\build\netdissect.vcxproj]
C:\projects\tcpdump\print-quic.c(232): warning C4242: 'function': conversion from 'uint64_t' to 'std::size_t', possible loss of data [C:\projects\tcpdump\build\netdissect.vcxproj]
C:\projects\tcpdump\print-quic.c(234): warning C4242: 'function': conversion from 'uint64_t' to 'std::size_t', possible loss of data [C:\projects\tcpdump\build\netdissect.vcxproj]
C:\projects\tcpdump\print-quic.c(274): warning C4028: formal parameter 3 different from declaration [C:\projects\tcpdump\build\netdissect.vcxproj]

https://ci.appveyor.com/project/guyharris/tcpdump/builds/41365352/job/mrddy4viik4omnmp

Fixed.  Is this ready to go in now?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,943,2021-10-01T01:43:31Z,2021-11-09T08:21:26Z,2021-11-09T21:09:50Z,MERGED,True,374,0,16,https://github.com/rpaulo,Initial support to parse QUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/943,https://github.com/fxlb,17,https://github.com/the-tcpdump-group/tcpdump/pull/943#issuecomment-963910569,"This is the initial support for parsing QUIC packets.  I'd like to get feedback from the community as to the code readiness of this diff.  I'm aware the unit tests are missing, but I will correct that once the code is accepted.
This is how the parser looks like right now.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 524288 bytes
18:56:36.488940 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid f9f4b0816e432d29, length 1182
18:56:36.500845 IP6 (flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 142) ::1.443 > ::1.60794: quic, initial, scid efa67422ee5c3eb0, length 116
18:56:36.500871 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 1205) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 1180
18:56:36.500881 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 127) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 102
18:56:36.509651 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid efa67422ee5c3eb0, length 1182
18:56:36.509731 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 47) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 22
18:56:36.510251 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 81) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 56
18:56:36.510618 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 50) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 25
18:56:36.510715 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.510883 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 250) ::1.443 > ::1.60794: quic, protected
18:56:36.511289 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511551 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511655 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511692 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 34) ::1.443 > ::1.60794: quic, protected
18:56:36.511762 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 44) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.512221 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 86) ::1.443 > ::1.60794: quic, protected
18:56:36.512285 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.512619 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0","Fixed. Is this ready to go in now?

Yes. thank you!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,943,2021-10-01T01:43:31Z,2021-11-09T08:21:26Z,2021-11-09T21:09:50Z,MERGED,True,374,0,16,https://github.com/rpaulo,Initial support to parse QUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/943,https://github.com/gvanem,18,https://github.com/the-tcpdump-group/tcpdump/pull/943#issuecomment-963967386,"This is the initial support for parsing QUIC packets.  I'd like to get feedback from the community as to the code readiness of this diff.  I'm aware the unit tests are missing, but I will correct that once the code is accepted.
This is how the parser looks like right now.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 524288 bytes
18:56:36.488940 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid f9f4b0816e432d29, length 1182
18:56:36.500845 IP6 (flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 142) ::1.443 > ::1.60794: quic, initial, scid efa67422ee5c3eb0, length 116
18:56:36.500871 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 1205) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 1180
18:56:36.500881 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 127) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 102
18:56:36.509651 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid efa67422ee5c3eb0, length 1182
18:56:36.509731 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 47) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 22
18:56:36.510251 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 81) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 56
18:56:36.510618 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 50) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 25
18:56:36.510715 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.510883 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 250) ::1.443 > ::1.60794: quic, protected
18:56:36.511289 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511551 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511655 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511692 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 34) ::1.443 > ::1.60794: quic, protected
18:56:36.511762 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 44) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.512221 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 86) ::1.443 > ::1.60794: quic, protected
18:56:36.512285 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.512619 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0","I note for all tests/quic*.pcap files, tcpdump gives bad UDP checksums.
E.g.  windump.exe -tnr tests/quic_handshake.pcap -vv says:
[bad udp cksum 0x04cb -> 0x88c5!] for the first frame.
But with tshark -Vnr tests/quic_handshake.pcap it says:
User Datagram Protocol, Src Port: 50606, Dst Port: 443
    Source Port: 50606
    Destination Port: 443
    Length: 1208
    Checksum: 0x04cb [unverified]

for the first frame. Not sure what  [unverified] means here. or which program is most precise.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,943,2021-10-01T01:43:31Z,2021-11-09T08:21:26Z,2021-11-09T21:09:50Z,MERGED,True,374,0,16,https://github.com/rpaulo,Initial support to parse QUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/943,https://github.com/fxlb,19,https://github.com/the-tcpdump-group/tcpdump/pull/943#issuecomment-963976327,"This is the initial support for parsing QUIC packets.  I'd like to get feedback from the community as to the code readiness of this diff.  I'm aware the unit tests are missing, but I will correct that once the code is accepted.
This is how the parser looks like right now.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 524288 bytes
18:56:36.488940 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid f9f4b0816e432d29, length 1182
18:56:36.500845 IP6 (flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 142) ::1.443 > ::1.60794: quic, initial, scid efa67422ee5c3eb0, length 116
18:56:36.500871 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 1205) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 1180
18:56:36.500881 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 127) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 102
18:56:36.509651 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid efa67422ee5c3eb0, length 1182
18:56:36.509731 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 47) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 22
18:56:36.510251 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 81) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 56
18:56:36.510618 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 50) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 25
18:56:36.510715 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.510883 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 250) ::1.443 > ::1.60794: quic, protected
18:56:36.511289 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511551 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511655 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511692 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 34) ::1.443 > ::1.60794: quic, protected
18:56:36.511762 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 44) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.512221 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 86) ::1.443 > ::1.60794: quic, protected
18:56:36.512285 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.512619 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0","With tshark -o  udp.check_checksum:TRUE -V -r tests/quic_handshake.pcap, we have:
    Checksum: 0x04cb incorrect, should be 0x88c5 (maybe caused by ""UDP checksum offload""?)
        [Expert Info (Error/Checksum): Bad checksum [should be 0x88c5]]
            [Bad checksum [should be 0x88c5]]
            [Severity level: Error]
            [Group: Checksum]
        [Calculated Checksum: 0x88c5]
    [Checksum Status: Bad]",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,943,2021-10-01T01:43:31Z,2021-11-09T08:21:26Z,2021-11-09T21:09:50Z,MERGED,True,374,0,16,https://github.com/rpaulo,Initial support to parse QUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/943,https://github.com/fxlb,20,https://github.com/the-tcpdump-group/tcpdump/pull/943#issuecomment-964084143,"This is the initial support for parsing QUIC packets.  I'd like to get feedback from the community as to the code readiness of this diff.  I'm aware the unit tests are missing, but I will correct that once the code is accepted.
This is how the parser looks like right now.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 524288 bytes
18:56:36.488940 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid f9f4b0816e432d29, length 1182
18:56:36.500845 IP6 (flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 142) ::1.443 > ::1.60794: quic, initial, scid efa67422ee5c3eb0, length 116
18:56:36.500871 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 1205) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 1180
18:56:36.500881 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 127) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 102
18:56:36.509651 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid efa67422ee5c3eb0, length 1182
18:56:36.509731 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 47) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 22
18:56:36.510251 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 81) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 56
18:56:36.510618 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 50) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 25
18:56:36.510715 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.510883 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 250) ::1.443 > ::1.60794: quic, protected
18:56:36.511289 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511551 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511655 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511692 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 34) ::1.443 > ::1.60794: quic, protected
18:56:36.511762 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 44) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.512221 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 86) ::1.443 > ::1.60794: quic, protected
18:56:36.512285 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.512619 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0","There is a new defect reported by the tool Coverity Scan:
*** CID 1493488:  Control flow issues  (DEADCODE)
/print-quic.c: 179 in quic_print_packet()",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,943,2021-10-01T01:43:31Z,2021-11-09T08:21:26Z,2021-11-09T21:09:50Z,MERGED,True,374,0,16,https://github.com/rpaulo,Initial support to parse QUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/943,https://github.com/fxlb,21,https://github.com/the-tcpdump-group/tcpdump/pull/943#issuecomment-964187958,"This is the initial support for parsing QUIC packets.  I'd like to get feedback from the community as to the code readiness of this diff.  I'm aware the unit tests are missing, but I will correct that once the code is accepted.
This is how the parser looks like right now.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 524288 bytes
18:56:36.488940 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid f9f4b0816e432d29, length 1182
18:56:36.500845 IP6 (flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 142) ::1.443 > ::1.60794: quic, initial, scid efa67422ee5c3eb0, length 116
18:56:36.500871 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 1205) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 1180
18:56:36.500881 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 127) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 102
18:56:36.509651 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid efa67422ee5c3eb0, length 1182
18:56:36.509731 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 47) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 22
18:56:36.510251 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 81) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 56
18:56:36.510618 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 50) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 25
18:56:36.510715 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.510883 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 250) ::1.443 > ::1.60794: quic, protected
18:56:36.511289 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511551 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511655 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511692 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 34) ::1.443 > ::1.60794: quic, protected
18:56:36.511762 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 44) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.512221 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 86) ::1.443 > ::1.60794: quic, protected
18:56:36.512285 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.512619 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0","packet_type = (first_octet >> 4) & 0x02;
Should be
packet_type = (first_octet >> 4) & 0x03;
?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,943,2021-10-01T01:43:31Z,2021-11-09T08:21:26Z,2021-11-09T21:09:50Z,MERGED,True,374,0,16,https://github.com/rpaulo,Initial support to parse QUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/943,https://github.com/rpaulo,22,https://github.com/the-tcpdump-group/tcpdump/pull/943#issuecomment-964287130,"This is the initial support for parsing QUIC packets.  I'd like to get feedback from the community as to the code readiness of this diff.  I'm aware the unit tests are missing, but I will correct that once the code is accepted.
This is how the parser looks like right now.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 524288 bytes
18:56:36.488940 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid f9f4b0816e432d29, length 1182
18:56:36.500845 IP6 (flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 142) ::1.443 > ::1.60794: quic, initial, scid efa67422ee5c3eb0, length 116
18:56:36.500871 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 1205) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 1180
18:56:36.500881 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 127) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 102
18:56:36.509651 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid efa67422ee5c3eb0, length 1182
18:56:36.509731 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 47) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 22
18:56:36.510251 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 81) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 56
18:56:36.510618 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 50) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 25
18:56:36.510715 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.510883 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 250) ::1.443 > ::1.60794: quic, protected
18:56:36.511289 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511551 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511655 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511692 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 34) ::1.443 > ::1.60794: quic, protected
18:56:36.511762 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 44) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.512221 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 86) ::1.443 > ::1.60794: quic, protected
18:56:36.512285 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.512619 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0","packet_type = (first_octet >> 4) & 0x02;
Should be
packet_type = (first_octet >> 4) & 0x03;
?

Yes my bad. I should have added a test for retry packets",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,943,2021-10-01T01:43:31Z,2021-11-09T08:21:26Z,2021-11-09T21:09:50Z,MERGED,True,374,0,16,https://github.com/rpaulo,Initial support to parse QUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/943,https://github.com/fxlb,23,https://github.com/the-tcpdump-group/tcpdump/pull/943#issuecomment-964319122,"This is the initial support for parsing QUIC packets.  I'd like to get feedback from the community as to the code readiness of this diff.  I'm aware the unit tests are missing, but I will correct that once the code is accepted.
This is how the parser looks like right now.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 524288 bytes
18:56:36.488940 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid f9f4b0816e432d29, length 1182
18:56:36.500845 IP6 (flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 142) ::1.443 > ::1.60794: quic, initial, scid efa67422ee5c3eb0, length 116
18:56:36.500871 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 1205) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 1180
18:56:36.500881 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 127) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 102
18:56:36.509651 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid efa67422ee5c3eb0, length 1182
18:56:36.509731 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 47) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 22
18:56:36.510251 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 81) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 56
18:56:36.510618 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 50) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 25
18:56:36.510715 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.510883 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 250) ::1.443 > ::1.60794: quic, protected
18:56:36.511289 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511551 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511655 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511692 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 34) ::1.443 > ::1.60794: quic, protected
18:56:36.511762 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 44) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.512221 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 86) ::1.443 > ::1.60794: quic, protected
18:56:36.512285 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.512619 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0",Do you have a pcap file with retry packets?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,943,2021-10-01T01:43:31Z,2021-11-09T08:21:26Z,2021-11-09T21:09:50Z,MERGED,True,374,0,16,https://github.com/rpaulo,Initial support to parse QUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/943,https://github.com/rpaulo,24,https://github.com/the-tcpdump-group/tcpdump/pull/943#issuecomment-964546086,"This is the initial support for parsing QUIC packets.  I'd like to get feedback from the community as to the code readiness of this diff.  I'm aware the unit tests are missing, but I will correct that once the code is accepted.
This is how the parser looks like right now.
tcpdump: listening on lo0, link-type NULL (BSD loopback), snapshot length 524288 bytes
18:56:36.488940 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid f9f4b0816e432d29, length 1182
18:56:36.500845 IP6 (flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 142) ::1.443 > ::1.60794: quic, initial, scid efa67422ee5c3eb0, length 116
18:56:36.500871 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 1205) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 1180
18:56:36.500881 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 127) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 102
18:56:36.509651 IP6 (flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 1208) ::1.60794 > ::1.443: quic, initial, dcid efa67422ee5c3eb0, length 1182
18:56:36.509731 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 47) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 22
18:56:36.510251 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 81) ::1.60794 > ::1.443: quic, handshake, dcid efa67422ee5c3eb0, length 56
18:56:36.510618 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 50) ::1.443 > ::1.60794: quic, handshake, scid efa67422ee5c3eb0, length 25
18:56:36.510715 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.510883 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 250) ::1.443 > ::1.60794: quic, protected
18:56:36.511289 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511551 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511655 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 37) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.511692 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 34) ::1.443 > ::1.60794: quic, protected
18:56:36.511762 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 44) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0
18:56:36.512221 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 86) ::1.443 > ::1.60794: quic, protected
18:56:36.512285 IP6 (class 0x02, flowlabel 0xb0900, hlim 64, next-header UDP (17) payload length: 29) ::1.443 > ::1.60794: quic, protected
18:56:36.512619 IP6 (class 0x02, flowlabel 0x50500, hlim 64, next-header UDP (17) payload length: 39) ::1.60794 > ::1.443: quic, protected, dcid efa67422ee5c3eb0","Do you have a pcap file with retry packets?

Yes, will send a new PR shortly.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,944,2021-10-01T04:35:14Z,,2021-10-07T19:18:17Z,OPEN,False,3894,2863,15,https://github.com/haydenroche5,Add support for wolfSSL as an alternative to OpenSSL.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/944,https://github.com/haydenroche5,1,https://github.com/the-tcpdump-group/tcpdump/pull/944,"wolfSSL support leverages wolfSSL's OpenSSL compatibility layer, which maps
OpenSSL's API onto native wolfSSL functions. To use wolfSSL, clone the
wolfSSL repo from GitHub, configure with --enable-tcpdump, make, and make
install. Then, when configuring tcpdump, point it to the wolfSSL
installation with --with-wolfssl=<path to installation>.","wolfSSL support leverages wolfSSL's OpenSSL compatibility layer, which maps
OpenSSL's API onto native wolfSSL functions. To use wolfSSL, clone the
wolfSSL repo from GitHub, configure with --enable-tcpdump, make, and make
install. Then, when configuring tcpdump, point it to the wolfSSL
installation with --with-wolfssl=<path to installation>.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,944,2021-10-01T04:35:14Z,,2021-10-07T19:18:17Z,OPEN,False,3894,2863,15,https://github.com/haydenroche5,Add support for wolfSSL as an alternative to OpenSSL.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/944,https://github.com/mcr,2,https://github.com/the-tcpdump-group/tcpdump/pull/944#issuecomment-932313457,"wolfSSL support leverages wolfSSL's OpenSSL compatibility layer, which maps
OpenSSL's API onto native wolfSSL functions. To use wolfSSL, clone the
wolfSSL repo from GitHub, configure with --enable-tcpdump, make, and make
install. Then, when configuring tcpdump, point it to the wolfSSL
installation with --with-wolfssl=<path to installation>.","I am quite happy to have wolfSSL support, but if it's gonna remain functional, then it needs to be in the CI system.
Can you add some lines to .circle.yml/build-matrix.sh?    Thank you for doing cmake as well.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,944,2021-10-01T04:35:14Z,,2021-10-07T19:18:17Z,OPEN,False,3894,2863,15,https://github.com/haydenroche5,Add support for wolfSSL as an alternative to OpenSSL.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/944,https://github.com/mcr,3,https://github.com/the-tcpdump-group/tcpdump/pull/944#issuecomment-932314229,"wolfSSL support leverages wolfSSL's OpenSSL compatibility layer, which maps
OpenSSL's API onto native wolfSSL functions. To use wolfSSL, clone the
wolfSSL repo from GitHub, configure with --enable-tcpdump, make, and make
install. Then, when configuring tcpdump, point it to the wolfSSL
installation with --with-wolfssl=<path to installation>.",close #931,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,944,2021-10-01T04:35:14Z,,2021-10-07T19:18:17Z,OPEN,False,3894,2863,15,https://github.com/haydenroche5,Add support for wolfSSL as an alternative to OpenSSL.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/944,https://github.com/haydenroche5,4,https://github.com/the-tcpdump-group/tcpdump/pull/944#issuecomment-932437609,"wolfSSL support leverages wolfSSL's OpenSSL compatibility layer, which maps
OpenSSL's API onto native wolfSSL functions. To use wolfSSL, clone the
wolfSSL repo from GitHub, configure with --enable-tcpdump, make, and make
install. Then, when configuring tcpdump, point it to the wolfSSL
installation with --with-wolfssl=<path to installation>.","I am quite happy to have wolfSSL support, but if it's gonna remain functional, then it needs to be in the CI system. Can you add some lines to .circle.yml/build-matrix.sh? Thank you for doing cmake as well.

Sure, I can look into that.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,944,2021-10-01T04:35:14Z,,2021-10-07T19:18:17Z,OPEN,False,3894,2863,15,https://github.com/haydenroche5,Add support for wolfSSL as an alternative to OpenSSL.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/944,https://github.com/mcr,5,https://github.com/the-tcpdump-group/tcpdump/pull/944#issuecomment-932484535,"wolfSSL support leverages wolfSSL's OpenSSL compatibility layer, which maps
OpenSSL's API onto native wolfSSL functions. To use wolfSSL, clone the
wolfSSL repo from GitHub, configure with --enable-tcpdump, make, and make
install. Then, when configuring tcpdump, point it to the wolfSSL
installation with --with-wolfssl=<path to installation>.","close #931

Just FYI, this is magic github stuff, such that, when this PR is merged, it would close that issue. You didn't need to close it yourself.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,944,2021-10-01T04:35:14Z,,2021-10-07T19:18:17Z,OPEN,False,3894,2863,15,https://github.com/haydenroche5,Add support for wolfSSL as an alternative to OpenSSL.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/944,https://github.com/haydenroche5,6,https://github.com/the-tcpdump-group/tcpdump/pull/944#issuecomment-932516368,"wolfSSL support leverages wolfSSL's OpenSSL compatibility layer, which maps
OpenSSL's API onto native wolfSSL functions. To use wolfSSL, clone the
wolfSSL repo from GitHub, configure with --enable-tcpdump, make, and make
install. Then, when configuring tcpdump, point it to the wolfSSL
installation with --with-wolfssl=<path to installation>.","Just FYI, this is magic github stuff, such that, when this PR is merged, it would close that issue. You didn't need to close it yourself.

Good to know!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,944,2021-10-01T04:35:14Z,,2021-10-07T19:18:17Z,OPEN,False,3894,2863,15,https://github.com/haydenroche5,Add support for wolfSSL as an alternative to OpenSSL.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/944,https://github.com/haydenroche5,7,https://github.com/the-tcpdump-group/tcpdump/pull/944#issuecomment-937853981,"wolfSSL support leverages wolfSSL's OpenSSL compatibility layer, which maps
OpenSSL's API onto native wolfSSL functions. To use wolfSSL, clone the
wolfSSL repo from GitHub, configure with --enable-tcpdump, make, and make
install. Then, when configuring tcpdump, point it to the wolfSSL
installation with --with-wolfssl=<path to installation>.","@mcr I've added logic to build_matrix.sh and build.sh to run builds with wolfSSL as the crypto provider. Since the --enable-tcpdump option for wolfSSL is quite new, it's not in an official release yet. As such, build_matrix.sh uses wolfSSL's master branch.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,944,2021-10-01T04:35:14Z,,2021-10-07T19:18:17Z,OPEN,False,3894,2863,15,https://github.com/haydenroche5,Add support for wolfSSL as an alternative to OpenSSL.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/944,https://github.com/haydenroche5,8,https://github.com/the-tcpdump-group/tcpdump/pull/944#issuecomment-937860915,"wolfSSL support leverages wolfSSL's OpenSSL compatibility layer, which maps
OpenSSL's API onto native wolfSSL functions. To use wolfSSL, clone the
wolfSSL repo from GitHub, configure with --enable-tcpdump, make, and make
install. Then, when configuring tcpdump, point it to the wolfSSL
installation with --with-wolfssl=<path to installation>.","Will look into the build failures. At first glance, it looks like some are failing due to not having libtool installed.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,944,2021-10-01T04:35:14Z,,2021-10-07T19:18:17Z,OPEN,False,3894,2863,15,https://github.com/haydenroche5,Add support for wolfSSL as an alternative to OpenSSL.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/944,https://github.com/infrastation,9,https://github.com/the-tcpdump-group/tcpdump/pull/944#issuecomment-937931266,"wolfSSL support leverages wolfSSL's OpenSSL compatibility layer, which maps
OpenSSL's API onto native wolfSSL functions. To use wolfSSL, clone the
wolfSSL repo from GitHub, configure with --enable-tcpdump, make, and make
install. Then, when configuring tcpdump, point it to the wolfSSL
installation with --with-wolfssl=<path to installation>.","Thank you for preparing these changes. Regarding the build failures, it might be easier to identify the additional dependencies on Linux first by taking a minimal Ubuntu 20.04 VM and installing only the packages listed in .cirrus.yml. Then you could take note of any additional packages required to get to a passing build. I can look into translating that list for the other involved OSes where possible.
Regarding the new code, after a brief look it seems that the base of your work is not well layered for alternative crypto libraries. It does not look right that protocol dissectors should know which specific library is in use. Maybe that would be better to address in the same go, for example, with one or more preparatory/cleanup commits before the commit that actually adds a new library.
To explain that, with all changes in place instead of #if defined(HAVE_LIBCRYPTO) || defined(HAVE_LIBWOLFSSL) in a protocol dissector it would be #ifdef CRYPTO_PROVIDER and calls to wrapper functions like nd_crypto_hash() and nd_crypto_decode(), which would then test for different values of CRYPTO_PROVIDER to compile the right thing. In which case you might find it simpler to call native wolfSSL functions from the wrapper functions instead of using the OpenSSL compatibility layer. Likewise, in future this layering could allow for crypto libraries that don't mimic OpenSSL, such as Libgcrypt.
However, if you find it better to use the compatibility layer in the first working implementation, it might be acceptable as well. Other reviewers should be able to make plenty of useful input too.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,944,2021-10-01T04:35:14Z,,2021-10-07T19:18:17Z,OPEN,False,3894,2863,15,https://github.com/haydenroche5,Add support for wolfSSL as an alternative to OpenSSL.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/944,https://github.com/haydenroche5,10,https://github.com/the-tcpdump-group/tcpdump/pull/944#issuecomment-938083842,"wolfSSL support leverages wolfSSL's OpenSSL compatibility layer, which maps
OpenSSL's API onto native wolfSSL functions. To use wolfSSL, clone the
wolfSSL repo from GitHub, configure with --enable-tcpdump, make, and make
install. Then, when configuring tcpdump, point it to the wolfSSL
installation with --with-wolfssl=<path to installation>.","Hi @infrastation. Thanks for the feedback.

Regarding the build failures, it might be easier to identify the additional dependencies on Linux first by taking a minimal Ubuntu 20.04 VM and installing only the packages listed in .cirrus.yml. Then you could take note of any additional packages required to get to a passing build.

Excellent idea. I'll do just that.

I can look into translating that list for the other involved OSes where possible.

That would be great.

To explain that, with all changes in place instead of #if defined(HAVE_LIBCRYPTO) || defined(HAVE_LIBWOLFSSL) in a protocol dissector it would be #ifdef CRYPTO_PROVIDER and calls to wrapper functions like nd_crypto_hash() and nd_crypto_decode(), which would then test for different values of CRYPTO_PROVIDER to compile the right thing. In which case you might find it simpler to call native wolfSSL functions from the wrapper functions instead of using the OpenSSL compatibility layer. Likewise, in future this layering could allow for crypto libraries that don't mimic OpenSSL, such as Libgcrypt.

I think what you propose makes a lot of sense. If I understand you correctly, this is more-or-less the same approach I've seen in many other open source projects (e.g. OpenLDAP, libssh2). They abstract the crypto such that the code using it doesn't need to actually be aware of what the underlying crypto library is. I do think this is overall a better design than what I've done here. My work is the result of a customer request for us (wolfSSL) to port tcpdump to wolfSSL so that they could use tcpdump with a FIPS-validated cryptography library, which wolfSSL provides. Using the compatibility layer was the preferred route in order to get them up and running as quickly as possible. I think a better long term approach would be to create the abstraction layer and drop the usage of the compatibility layer, as you suggest.

However, if you find it better to use the compatibility layer in the first working implementation, it might be acceptable as well. Other reviewers should be able to make plenty of useful input too.

I'm not in any particular rush to have wolfSSL support upstreamed, so I would be fine with revising my approach here to create a crypto abstraction layer for tcpdump. Of course, this would be a slightly larger effort that I would probably find the time to work on here and there outside of my paid work duties, so it'll take a little while.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,945,2021-10-04T21:21:16Z,2021-10-07T12:02:49Z,2021-10-07T12:02:49Z,CLOSED,False,1,1,1,https://github.com/vladimiroltean,Fix printing VLAN ID values larger than 256 for Marvell DSA switches,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/945,https://github.com/vladimiroltean,1,https://github.com/the-tcpdump-group/tcpdump/pull/945,"The VLAN ID in Marvell DSA tags is split into two bytes of the switch
header. The extraction logic for the upper byte is broken, it is copy
pasted from the DSA_PRI above. So any VLAN ID higher than 256 gets
truncated to only the bottom-most 8 bits.","The VLAN ID in Marvell DSA tags is split into two bytes of the switch
header. The extraction logic for the upper byte is broken, it is copy
pasted from the DSA_PRI above. So any VLAN ID higher than 256 gets
truncated to only the bottom-most 8 bits.",True,{'THUMBS_UP': ['https://github.com/mcr']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,945,2021-10-04T21:21:16Z,2021-10-07T12:02:49Z,2021-10-07T12:02:49Z,CLOSED,False,1,1,1,https://github.com/vladimiroltean,Fix printing VLAN ID values larger than 256 for Marvell DSA switches,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/945,https://github.com/mcr,2,https://github.com/the-tcpdump-group/tcpdump/pull/945#issuecomment-934571800,"The VLAN ID in Marvell DSA tags is split into two bytes of the switch
header. The extraction logic for the upper byte is broken, it is copy
pasted from the DSA_PRI above. So any VLAN ID higher than 256 gets
truncated to only the bottom-most 8 bits.","Could you add (or amend) a test case that shows that this is fixed (and will remain fixed in the future).
Thank you.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,945,2021-10-04T21:21:16Z,2021-10-07T12:02:49Z,2021-10-07T12:02:49Z,CLOSED,False,1,1,1,https://github.com/vladimiroltean,Fix printing VLAN ID values larger than 256 for Marvell DSA switches,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/945,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/945#issuecomment-934594785,"The VLAN ID in Marvell DSA tags is split into two bytes of the switch
header. The extraction logic for the upper byte is broken, it is copy
pasted from the DSA_PRI above. So any VLAN ID higher than 256 gets
truncated to only the bottom-most 8 bits.",It is a duplicate of #889.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,945,2021-10-04T21:21:16Z,2021-10-07T12:02:49Z,2021-10-07T12:02:49Z,CLOSED,False,1,1,1,https://github.com/vladimiroltean,Fix printing VLAN ID values larger than 256 for Marvell DSA switches,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/945,https://github.com/vladimiroltean,4,https://github.com/the-tcpdump-group/tcpdump/pull/945#issuecomment-934604142,"The VLAN ID in Marvell DSA tags is split into two bytes of the switch
header. The extraction logic for the upper byte is broken, it is copy
pasted from the DSA_PRI above. So any VLAN ID higher than 256 gets
truncated to only the bottom-most 8 bits.","So considering that Tobias' patch does the exact same thing, should I close this PR and you can merge his?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,945,2021-10-04T21:21:16Z,2021-10-07T12:02:49Z,2021-10-07T12:02:49Z,CLOSED,False,1,1,1,https://github.com/vladimiroltean,Fix printing VLAN ID values larger than 256 for Marvell DSA switches,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/945,https://github.com/fxlb,5,https://github.com/the-tcpdump-group/tcpdump/pull/945#issuecomment-934618887,"The VLAN ID in Marvell DSA tags is split into two bytes of the switch
header. The extraction logic for the upper byte is broken, it is copy
pasted from the DSA_PRI above. So any VLAN ID higher than 256 gets
truncated to only the bottom-most 8 bits.","Yes, but waiting first for an update and rebase of his PR.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,945,2021-10-04T21:21:16Z,2021-10-07T12:02:49Z,2021-10-07T12:02:49Z,CLOSED,False,1,1,1,https://github.com/vladimiroltean,Fix printing VLAN ID values larger than 256 for Marvell DSA switches,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/945,https://github.com/fxlb,6,https://github.com/the-tcpdump-group/tcpdump/pull/945#issuecomment-935704403,"The VLAN ID in Marvell DSA tags is split into two bytes of the switch
header. The extraction logic for the upper byte is broken, it is copy
pasted from the DSA_PRI above. So any VLAN ID higher than 256 gets
truncated to only the bottom-most 8 bits.","@vladimiroltean
Do you have the DSA documentation or a link to it?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,945,2021-10-04T21:21:16Z,2021-10-07T12:02:49Z,2021-10-07T12:02:49Z,CLOSED,False,1,1,1,https://github.com/vladimiroltean,Fix printing VLAN ID values larger than 256 for Marvell DSA switches,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/945,https://github.com/vladimiroltean,7,https://github.com/the-tcpdump-group/tcpdump/pull/945#issuecomment-935816507,"The VLAN ID in Marvell DSA tags is split into two bytes of the switch
header. The extraction logic for the upper byte is broken, it is copy
pasted from the DSA_PRI above. So any VLAN ID higher than 256 gets
truncated to only the bottom-most 8 bits.","http://file2.dzsc.com/product/19/03/27/360334_113151208.pdf
Section 7, starting with page 144.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,945,2021-10-04T21:21:16Z,2021-10-07T12:02:49Z,2021-10-07T12:02:49Z,CLOSED,False,1,1,1,https://github.com/vladimiroltean,Fix printing VLAN ID values larger than 256 for Marvell DSA switches,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/945,https://github.com/infrastation,8,https://github.com/the-tcpdump-group/tcpdump/pull/945#issuecomment-935985932,"The VLAN ID in Marvell DSA tags is split into two bytes of the switch
header. The extraction logic for the upper byte is broken, it is copy
pasted from the DSA_PRI above. So any VLAN ID higher than 256 gets
truncated to only the bottom-most 8 bits.","If that document is the only source of information, it leads me to think that there may be a greater peace of mind in losing the (E)DSA decoder altogether.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,945,2021-10-04T21:21:16Z,2021-10-07T12:02:49Z,2021-10-07T12:02:49Z,CLOSED,False,1,1,1,https://github.com/vladimiroltean,Fix printing VLAN ID values larger than 256 for Marvell DSA switches,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/945,https://github.com/vladimiroltean,9,https://github.com/the-tcpdump-group/tcpdump/pull/945#issuecomment-936011044,"The VLAN ID in Marvell DSA tags is split into two bytes of the switch
header. The extraction logic for the upper byte is broken, it is copy
pasted from the DSA_PRI above. So any VLAN ID higher than 256 gets
truncated to only the bottom-most 8 bits.",What other source of information do you expect to see? It is a vendor-specific switch tagging protocol.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,945,2021-10-04T21:21:16Z,2021-10-07T12:02:49Z,2021-10-07T12:02:49Z,CLOSED,False,1,1,1,https://github.com/vladimiroltean,Fix printing VLAN ID values larger than 256 for Marvell DSA switches,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/945,https://github.com/mcr,10,https://github.com/the-tcpdump-group/tcpdump/pull/945#issuecomment-936871747,"The VLAN ID in Marvell DSA tags is split into two bytes of the switch
header. The extraction logic for the upper byte is broken, it is copy
pasted from the DSA_PRI above. So any VLAN ID higher than 256 gets
truncated to only the bottom-most 8 bits.","What other source of information do you expect to see? It is a vendor-specific switch tagging protocol.

That link was perfect. It's just to help future maintainers who might not know what's where.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,945,2021-10-04T21:21:16Z,2021-10-07T12:02:49Z,2021-10-07T12:02:49Z,CLOSED,False,1,1,1,https://github.com/vladimiroltean,Fix printing VLAN ID values larger than 256 for Marvell DSA switches,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/945,https://github.com/fxlb,11,https://github.com/the-tcpdump-group/tcpdump/pull/945#issuecomment-937721563,"The VLAN ID in Marvell DSA tags is split into two bytes of the switch
header. The extraction logic for the upper byte is broken, it is copy
pasted from the DSA_PRI above. So any VLAN ID higher than 256 gets
truncated to only the bottom-most 8 bits.","Section 7, starting with page 144.

Thanks for the link.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,946,2021-10-05T15:35:34Z,2022-03-11T23:53:28Z,2022-03-11T23:53:58Z,CLOSED,False,21,0,1,https://github.com/mcr,some parameters for enabling probot on the repository,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/946,https://github.com/mcr,1,https://github.com/the-tcpdump-group/tcpdump/pull/946,"https://github.com/organizations/the-tcpdump-group/settings/installations/19853667 explains how to enable probot.
This bot can close issues which have not had any activity.
Part of the goal of using this is to make active issues more active, and to figure out which issues have not had any focus.
The text of the message and the daysUntilX are open for discussion.
A similiar setting for libpcap would be enacted.
Maybe it's all a bad idea.  Opinions?","https://github.com/organizations/the-tcpdump-group/settings/installations/19853667 explains how to enable probot.
This bot can close issues which have not had any activity.
Part of the goal of using this is to make active issues more active, and to figure out which issues have not had any focus.
The text of the message and the daysUntilX are open for discussion.
A similiar setting for libpcap would be enacted.
Maybe it's all a bad idea.  Opinions?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,946,2021-10-05T15:35:34Z,2022-03-11T23:53:28Z,2022-03-11T23:53:58Z,CLOSED,False,21,0,1,https://github.com/mcr,some parameters for enabling probot on the repository,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/946,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/946#issuecomment-934585162,"https://github.com/organizations/the-tcpdump-group/settings/installations/19853667 explains how to enable probot.
This bot can close issues which have not had any activity.
Part of the goal of using this is to make active issues more active, and to figure out which issues have not had any focus.
The text of the message and the daysUntilX are open for discussion.
A similiar setting for libpcap would be enacted.
Maybe it's all a bad idea.  Opinions?","""N days without updates"" alone would not be a good criteria to chase/close a stale work item. Many of these are stale for a reason (a complicated problem or an expensive solution), and some of them still contain bits of relevant knowledge waiting to become a part of the documentation or a bugfix/workaround. Issues imported from SourceForge are no longer connected to their original reporters, so only the developers could respond to such automatic chasing anyway.
Which leads me to think it would be more productive to have a weekly job to pick a random ancient issue and to e-mail a random developer asking to review it and to see if it is ready to be closed. It might take a year to filter through this aspect of the technical debt as such a background activity, but this is a 30 year old project after all.
On the note of ""please rebase"", for me it would be a relief if a parrot script could respond with the message when the reporter updates the pull request and the branch is more than X commits behind. Instead of Francois-Xavier or myself, that is. Just chasing the authors to rebase no matter what and not having the time to review afterwards would be rude.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,946,2021-10-05T15:35:34Z,2022-03-11T23:53:28Z,2022-03-11T23:53:58Z,CLOSED,False,21,0,1,https://github.com/mcr,some parameters for enabling probot on the repository,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/946,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/946#issuecomment-1065667834,"https://github.com/organizations/the-tcpdump-group/settings/installations/19853667 explains how to enable probot.
This bot can close issues which have not had any activity.
Part of the goal of using this is to make active issues more active, and to figure out which issues have not had any focus.
The text of the message and the daysUntilX are open for discussion.
A similiar setting for libpcap would be enacted.
Maybe it's all a bad idea.  Opinions?",Closing because this suggestion is not actionable in foreseeable future. The change has been archived in tcpdump-incomplete-works/mcr-enable-probot-stale.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,948,2021-10-22T13:50:26Z,2021-10-25T14:45:56Z,2021-10-25T14:45:56Z,CLOSED,False,135,9,7,https://github.com/giulio-sido,Add SRH TLV parsing,21,[],https://github.com/the-tcpdump-group/tcpdump/pull/948,https://github.com/giulio-sido,1,https://github.com/the-tcpdump-group/tcpdump/pull/948,TLVs in the Segment Routing Header are now being parsed by tcpdump,TLVs in the Segment Routing Header are now being parsed by tcpdump,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,948,2021-10-22T13:50:26Z,2021-10-25T14:45:56Z,2021-10-25T14:45:56Z,CLOSED,False,135,9,7,https://github.com/giulio-sido,Add SRH TLV parsing,21,[],https://github.com/the-tcpdump-group/tcpdump/pull/948,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/948#issuecomment-949782836,TLVs in the Segment Routing Header are now being parsed by tcpdump,"Thank you for preparing this change. Besides the obvious git history cleanups, it would need to add some comments to point to the specification that it implements.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,949,2021-10-25T15:12:02Z,,2022-06-01T18:19:25Z,OPEN,False,129,9,6,https://github.com/giulio-sido,rt6: parse TLV,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/949,https://github.com/giulio-sido,1,https://github.com/the-tcpdump-group/tcpdump/pull/949,"Parse Type Length Values (TLV) in IPv6 Routing Header as specified by
RFC 8754 [1].
[1] https://datatracker.ietf.org/doc/html/rfc8754
Signed-off-by: Giulio Sidoretti giulio.sidoretti@uniroma2.it","Parse Type Length Values (TLV) in IPv6 Routing Header as specified by
RFC 8754 [1].
[1] https://datatracker.ietf.org/doc/html/rfc8754
Signed-off-by: Giulio Sidoretti giulio.sidoretti@uniroma2.it",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,949,2021-10-25T15:12:02Z,,2022-06-01T18:19:25Z,OPEN,False,129,9,6,https://github.com/giulio-sido,rt6: parse TLV,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/949,https://github.com/giulio-sido,2,https://github.com/the-tcpdump-group/tcpdump/pull/949#issuecomment-960616584,"Parse Type Length Values (TLV) in IPv6 Routing Header as specified by
RFC 8754 [1].
[1] https://datatracker.ietf.org/doc/html/rfc8754
Signed-off-by: Giulio Sidoretti giulio.sidoretti@uniroma2.it","Thanks for your comments, I have added these minor changes",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,949,2021-10-25T15:12:02Z,,2022-06-01T18:19:25Z,OPEN,False,129,9,6,https://github.com/giulio-sido,rt6: parse TLV,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/949,https://github.com/ahsalam,3,https://github.com/the-tcpdump-group/tcpdump/pull/949#issuecomment-965231116,"Parse Type Length Values (TLV) in IPv6 Routing Header as specified by
RFC 8754 [1].
[1] https://datatracker.ietf.org/doc/html/rfc8754
Signed-off-by: Giulio Sidoretti giulio.sidoretti@uniroma2.it","@fxlb any update on this PR ?
@giulio-sido There is a couple of SRH TLVs defined in https://datatracker.ietf.org/doc/html/draft-ietf-spring-sr-service-programming-05#section-7.2.1. They are still waiting for Type assignment by IANA. When they get assigned a type, will you be willing to send one more PR to support them ?
Thanks!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,949,2021-10-25T15:12:02Z,,2022-06-01T18:19:25Z,OPEN,False,129,9,6,https://github.com/giulio-sido,rt6: parse TLV,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/949,https://github.com/giulio-sido,4,https://github.com/the-tcpdump-group/tcpdump/pull/949#issuecomment-965261093,"Parse Type Length Values (TLV) in IPv6 Routing Header as specified by
RFC 8754 [1].
[1] https://datatracker.ietf.org/doc/html/rfc8754
Signed-off-by: Giulio Sidoretti giulio.sidoretti@uniroma2.it","@giulio-sido There is a couple of SRH TLVs defined in https://datatracker.ietf.org/doc/html/draft-ietf-spring-sr-service-programming-05#section-7.2.1. They are still waiting for Type assignment by IANA. When they get assigned a type, will you be willing to send one more PR to support them ?

Sure. In the meantime, all TLVs with types that are not in the RFC 8754 are parsed as generic TLVs.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,949,2021-10-25T15:12:02Z,,2022-06-01T18:19:25Z,OPEN,False,129,9,6,https://github.com/giulio-sido,rt6: parse TLV,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/949,https://github.com/ahsalam,5,https://github.com/the-tcpdump-group/tcpdump/pull/949#issuecomment-965281776,"Parse Type Length Values (TLV) in IPv6 Routing Header as specified by
RFC 8754 [1].
[1] https://datatracker.ietf.org/doc/html/rfc8754
Signed-off-by: Giulio Sidoretti giulio.sidoretti@uniroma2.it","@giulio-sido There is a couple of SRH TLVs defined in https://datatracker.ietf.org/doc/html/draft-ietf-spring-sr-service-programming-05#section-7.2.1. They are still waiting for Type assignment by IANA. When they get assigned a type, will you be willing to send one more PR to support them ?

Sure. In the meantime, all TLVs with types that are not in the RFC 8754 are parsed as generic TLVs.

Great, thanks Giulio!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,949,2021-10-25T15:12:02Z,,2022-06-01T18:19:25Z,OPEN,False,129,9,6,https://github.com/giulio-sido,rt6: parse TLV,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/949,https://github.com/ahsalam,6,https://github.com/the-tcpdump-group/tcpdump/pull/949#issuecomment-1139373949,"Parse Type Length Values (TLV) in IPv6 Routing Header as specified by
RFC 8754 [1].
[1] https://datatracker.ietf.org/doc/html/rfc8754
Signed-off-by: Giulio Sidoretti giulio.sidoretti@uniroma2.it","Hi @fxlb, could you please have a look on that PR? we have other new features that we plan to submit but they depend on that PR. thanks!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,949,2021-10-25T15:12:02Z,,2022-06-01T18:19:25Z,OPEN,False,129,9,6,https://github.com/giulio-sido,rt6: parse TLV,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/949,https://github.com/giulio-sido,7,https://github.com/the-tcpdump-group/tcpdump/pull/949#issuecomment-1139389648,"Parse Type Length Values (TLV) in IPv6 Routing Header as specified by
RFC 8754 [1].
[1] https://datatracker.ietf.org/doc/html/rfc8754
Signed-off-by: Giulio Sidoretti giulio.sidoretti@uniroma2.it","Hi, I have just rebased yesterday because the main repository had advanced and there was a little conflict to solve. Now the checks have all passed, so the PR should be ready.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,949,2021-10-25T15:12:02Z,,2022-06-01T18:19:25Z,OPEN,False,129,9,6,https://github.com/giulio-sido,rt6: parse TLV,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/949,https://github.com/fxlb,8,https://github.com/the-tcpdump-group/tcpdump/pull/949#issuecomment-1143983755,"Parse Type Length Values (TLV) in IPv6 Routing Header as specified by
RFC 8754 [1].
[1] https://datatracker.ietf.org/doc/html/rfc8754
Signed-off-by: Giulio Sidoretti giulio.sidoretti@uniroma2.it","Please have patience, I have no time for a review now. Maybe another maintainer will have time to review the changes.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,950,2021-10-31T15:34:00Z,2021-10-31T15:40:43Z,2021-10-31T15:40:43Z,CLOSED,False,19,7,3,https://github.com/pqarmitage,VRRP: Add support for IPv6,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/950,https://github.com/pqarmitage,1,https://github.com/the-tcpdump-group/tcpdump/pull/950,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,951,2021-10-31T16:55:11Z,2021-11-02T09:30:22Z,2021-11-02T09:30:31Z,MERGED,True,83,71,4,https://github.com/pqarmitage,VRRP: Add support for IPv6,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/951,https://github.com/pqarmitage,1,https://github.com/the-tcpdump-group/tcpdump/pull/951,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,951,2021-10-31T16:55:11Z,2021-11-02T09:30:22Z,2021-11-02T09:30:31Z,MERGED,True,83,71,4,https://github.com/pqarmitage,VRRP: Add support for IPv6,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/951,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/951#issuecomment-957263494,,Thanks!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,952,2021-10-31T19:22:21Z,2021-12-16T18:27:50Z,2021-12-16T19:24:53Z,MERGED,True,34,0,5,https://github.com/ton31337,Add missing rfc8654 capability parsing,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/952,https://github.com/ton31337,1,https://github.com/the-tcpdump-group/tcpdump/pull/952,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,952,2021-10-31T19:22:21Z,2021-12-16T18:27:50Z,2021-12-16T19:24:53Z,MERGED,True,34,0,5,https://github.com/ton31337,Add missing rfc8654 capability parsing,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/952,https://github.com/ton31337,2,https://github.com/the-tcpdump-group/tcpdump/pull/952#issuecomment-971447703,,"@infrastation do you mind reviewing this, please?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,952,2021-10-31T19:22:21Z,2021-12-16T18:27:50Z,2021-12-16T19:24:53Z,MERGED,True,34,0,5,https://github.com/ton31337,Add missing rfc8654 capability parsing,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/952,https://github.com/ton31337,3,https://github.com/the-tcpdump-group/tcpdump/pull/952#issuecomment-995876344,,Anyone from maintainers can look at these trivial changes?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,952,2021-10-31T19:22:21Z,2021-12-16T18:27:50Z,2021-12-16T19:24:53Z,MERGED,True,34,0,5,https://github.com/ton31337,Add missing rfc8654 capability parsing,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/952,https://github.com/fxlb,4,https://github.com/the-tcpdump-group/tcpdump/pull/952#issuecomment-996068306,,"OK, I remember now.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,952,2021-10-31T19:22:21Z,2021-12-16T18:27:50Z,2021-12-16T19:24:53Z,MERGED,True,34,0,5,https://github.com/ton31337,Add missing rfc8654 capability parsing,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/952,https://github.com/fxlb,5,https://github.com/the-tcpdump-group/tcpdump/pull/952#issuecomment-996071020,,"Merged, than you!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,952,2021-10-31T19:22:21Z,2021-12-16T18:27:50Z,2021-12-16T19:24:53Z,MERGED,True,34,0,5,https://github.com/ton31337,Add missing rfc8654 capability parsing,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/952,https://github.com/ton31337,6,https://github.com/the-tcpdump-group/tcpdump/pull/952#issuecomment-996079525,,"@fxlb thank you, would you mind reviewing #953 and #962 as well?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,953,2021-10-31T19:39:01Z,2022-01-23T10:01:43Z,2022-01-23T10:04:55Z,MERGED,True,106,10,8,https://github.com/ton31337,Enhanced route refresh capability improvements,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/953,https://github.com/ton31337,1,https://github.com/the-tcpdump-group/tcpdump/pull/953,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,953,2021-10-31T19:39:01Z,2022-01-23T10:01:43Z,2022-01-23T10:04:55Z,MERGED,True,106,10,8,https://github.com/ton31337,Enhanced route refresh capability improvements,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/953,https://github.com/ton31337,2,https://github.com/the-tcpdump-group/tcpdump/pull/953#issuecomment-971447681,,"@infrastation do you mind reviewing this, please?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,953,2021-10-31T19:39:01Z,2022-01-23T10:01:43Z,2022-01-23T10:04:55Z,MERGED,True,106,10,8,https://github.com/ton31337,Enhanced route refresh capability improvements,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/953,https://github.com/infrastation,3,https://github.com/the-tcpdump-group/tcpdump/pull/953#issuecomment-980675680,,"Please have patience, there is a lot of backlog. Maybe another maintainer will have time to proof-read the changes.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,953,2021-10-31T19:39:01Z,2022-01-23T10:01:43Z,2022-01-23T10:04:55Z,MERGED,True,106,10,8,https://github.com/ton31337,Enhanced route refresh capability improvements,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/953,https://github.com/ton31337,4,https://github.com/the-tcpdump-group/tcpdump/pull/953#issuecomment-998188895,,@fenner all good now?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,953,2021-10-31T19:39:01Z,2022-01-23T10:01:43Z,2022-01-23T10:04:55Z,MERGED,True,106,10,8,https://github.com/ton31337,Enhanced route refresh capability improvements,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/953,https://github.com/fenner,5,https://github.com/the-tcpdump-group/tcpdump/pull/953#issuecomment-1004246910,,"@fenner all good now?

Did you see my suggestion to implement the new NOTIFICATION and its subtype?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,953,2021-10-31T19:39:01Z,2022-01-23T10:01:43Z,2022-01-23T10:04:55Z,MERGED,True,106,10,8,https://github.com/ton31337,Enhanced route refresh capability improvements,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/953,https://github.com/ton31337,6,https://github.com/the-tcpdump-group/tcpdump/pull/953#issuecomment-1004317174,,"@fenner all good now?

Did you see my suggestion to implement the new NOTIFICATION and its subtype?

I saw. Let's just get this separate. I'll add another PR for error codes to distinguish things a bit and keep them as small as possible.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,953,2021-10-31T19:39:01Z,2022-01-23T10:01:43Z,2022-01-23T10:04:55Z,MERGED,True,106,10,8,https://github.com/ton31337,Enhanced route refresh capability improvements,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/953,https://github.com/ton31337,7,https://github.com/the-tcpdump-group/tcpdump/pull/953#issuecomment-1018593201,,@fxlb @infrastation just rebased to the latest master (was a conflict with TESTLIST file). Can be merged?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,953,2021-10-31T19:39:01Z,2022-01-23T10:01:43Z,2022-01-23T10:04:55Z,MERGED,True,106,10,8,https://github.com/ton31337,Enhanced route refresh capability improvements,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/953,https://github.com/fxlb,8,https://github.com/the-tcpdump-group/tcpdump/pull/953#issuecomment-1019356658,,Could you first 'rebase -i' it to have a clean commit?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,953,2021-10-31T19:39:01Z,2022-01-23T10:01:43Z,2022-01-23T10:04:55Z,MERGED,True,106,10,8,https://github.com/ton31337,Enhanced route refresh capability improvements,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/953,https://github.com/ton31337,9,https://github.com/the-tcpdump-group/tcpdump/pull/953#issuecomment-1019357395,,Do you mean squash into a single commit or what specifically?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,953,2021-10-31T19:39:01Z,2022-01-23T10:01:43Z,2022-01-23T10:04:55Z,MERGED,True,106,10,8,https://github.com/ton31337,Enhanced route refresh capability improvements,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/953,https://github.com/fxlb,10,https://github.com/the-tcpdump-group/tcpdump/pull/953#issuecomment-1019357808,,"Any reason to have more than one commit?
Yes squash.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,953,2021-10-31T19:39:01Z,2022-01-23T10:01:43Z,2022-01-23T10:04:55Z,MERGED,True,106,10,8,https://github.com/ton31337,Enhanced route refresh capability improvements,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/953,https://github.com/ton31337,11,https://github.com/the-tcpdump-group/tcpdump/pull/953#issuecomment-1019358653,,"Don't know the flow and backporting logic. If that's not necessary, I can easily squash, just tell me to squash or not :)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,953,2021-10-31T19:39:01Z,2022-01-23T10:01:43Z,2022-01-23T10:04:55Z,MERGED,True,106,10,8,https://github.com/ton31337,Enhanced route refresh capability improvements,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/953,https://github.com/ton31337,12,https://github.com/the-tcpdump-group/tcpdump/pull/953#issuecomment-1019359176,,"Anyway, squashed ✔️",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,953,2021-10-31T19:39:01Z,2022-01-23T10:01:43Z,2022-01-23T10:04:55Z,MERGED,True,106,10,8,https://github.com/ton31337,Enhanced route refresh capability improvements,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/953,https://github.com/fxlb,13,https://github.com/the-tcpdump-group/tcpdump/pull/953#issuecomment-1019446663,,"Rethinking about this PR, it's seems better with 3 commits (codes with corresponding tests). Done.",True,{'THUMBS_UP': ['https://github.com/ton31337']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,953,2021-10-31T19:39:01Z,2022-01-23T10:01:43Z,2022-01-23T10:04:55Z,MERGED,True,106,10,8,https://github.com/ton31337,Enhanced route refresh capability improvements,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/953,https://github.com/fxlb,14,https://github.com/the-tcpdump-group/tcpdump/pull/953#issuecomment-1019448747,,"Last question before merge: It's seems better to update the message for the second commit:
tests: No need to decode enhanced route refresh capability
to
bgp: <some text like Add a test file for...>
With a bgp: prefix. What message would be relevant?
(I will do the update)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,953,2021-10-31T19:39:01Z,2022-01-23T10:01:43Z,2022-01-23T10:04:55Z,MERGED,True,106,10,8,https://github.com/ton31337,Enhanced route refresh capability improvements,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/953,https://github.com/ton31337,15,https://github.com/the-tcpdump-group/tcpdump/pull/953#issuecomment-1019449518,,"Last question before merge: It's seems better to update the message for the second commit: tests: No need to decode enhanced route refresh capability to bgp: <some text like Add a test file for...> With a bgp: prefix. What message would be relevant? (I will do the update)

This is just to basically verify enhanced route refresh capability. I guess: bgp: Check if Enhanced route-refresh capability is printed properly.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,953,2021-10-31T19:39:01Z,2022-01-23T10:01:43Z,2022-01-23T10:04:55Z,MERGED,True,106,10,8,https://github.com/ton31337,Enhanced route refresh capability improvements,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/953,https://github.com/fxlb,16,https://github.com/the-tcpdump-group/tcpdump/pull/953#issuecomment-1019450700,,"I guess: bgp: Check if Enhanced route-refresh capability is printed properly.

Good. Done.",True,{'THUMBS_UP': ['https://github.com/ton31337']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,953,2021-10-31T19:39:01Z,2022-01-23T10:01:43Z,2022-01-23T10:04:55Z,MERGED,True,106,10,8,https://github.com/ton31337,Enhanced route refresh capability improvements,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/953,https://github.com/fxlb,17,https://github.com/the-tcpdump-group/tcpdump/pull/953#issuecomment-1019450971,,Thank you!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,953,2021-10-31T19:39:01Z,2022-01-23T10:01:43Z,2022-01-23T10:04:55Z,MERGED,True,106,10,8,https://github.com/ton31337,Enhanced route refresh capability improvements,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/953,https://github.com/ton31337,18,https://github.com/the-tcpdump-group/tcpdump/pull/953#issuecomment-1019451525,,@fxlb thanks.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,954,2021-11-03T09:51:12Z,2021-11-04T11:40:57Z,2021-11-04T11:41:04Z,MERGED,True,8,5,2,https://github.com/jiladahe1997,[bugfix]configure: fix error when cross-compile:,1,"['bug', 'compiling']",https://github.com/the-tcpdump-group/tcpdump/pull/954,https://github.com/jiladahe1997,1,https://github.com/the-tcpdump-group/tcpdump/pull/954,"While cross-compile, ./configure --host=xxx will output:
""checking whether printf(3) supports the z length modifier...
configure: error: in `/${path_to_tcpdump}/tcpdump':""
That is casued by AC_RUN_IFELSE, as describe in
""https://www.gnu.org/software/autoconf/manual/autoconf-2.63/html_node/Runtime.html""
, if AC_RUN_IFELSE do not have cross-compile option, configure prints an error message and exits.
Signed-off-by: Mingrui Ren jiladahe1997@gmail.com","While cross-compile, ./configure --host=xxx will output:
""checking whether printf(3) supports the z length modifier...
configure: error: in `/${path_to_tcpdump}/tcpdump':""
That is casued by AC_RUN_IFELSE, as describe in
""https://www.gnu.org/software/autoconf/manual/autoconf-2.63/html_node/Runtime.html""
, if AC_RUN_IFELSE do not have cross-compile option, configure prints an error message and exits.
Signed-off-by: Mingrui Ren jiladahe1997@gmail.com",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,954,2021-11-03T09:51:12Z,2021-11-04T11:40:57Z,2021-11-04T11:41:04Z,MERGED,True,8,5,2,https://github.com/jiladahe1997,[bugfix]configure: fix error when cross-compile:,1,"['bug', 'compiling']",https://github.com/the-tcpdump-group/tcpdump/pull/954,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/954#issuecomment-958810001,"While cross-compile, ./configure --host=xxx will output:
""checking whether printf(3) supports the z length modifier...
configure: error: in `/${path_to_tcpdump}/tcpdump':""
That is casued by AC_RUN_IFELSE, as describe in
""https://www.gnu.org/software/autoconf/manual/autoconf-2.63/html_node/Runtime.html""
, if AC_RUN_IFELSE do not have cross-compile option, configure prints an error message and exits.
Signed-off-by: Mingrui Ren jiladahe1997@gmail.com","Thank you for noticing that the missing default breaks cross-compiling and suggesting the fix.
The purpose of HAVE_NO_PRINTF_Z is to avoid running tests that depend on the %z modifier (as far as Autoconf builds go). In the case of cross-compiling the host does not run the tests anyway, so in that case perhaps it would be better just to print the message and leave it undefined, if that fixes the problem. Also it would be nice to keep indentation consistent.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,954,2021-11-03T09:51:12Z,2021-11-04T11:40:57Z,2021-11-04T11:41:04Z,MERGED,True,8,5,2,https://github.com/jiladahe1997,[bugfix]configure: fix error when cross-compile:,1,"['bug', 'compiling']",https://github.com/the-tcpdump-group/tcpdump/pull/954,https://github.com/jiladahe1997,3,https://github.com/the-tcpdump-group/tcpdump/pull/954#issuecomment-959115745,"While cross-compile, ./configure --host=xxx will output:
""checking whether printf(3) supports the z length modifier...
configure: error: in `/${path_to_tcpdump}/tcpdump':""
That is casued by AC_RUN_IFELSE, as describe in
""https://www.gnu.org/software/autoconf/manual/autoconf-2.63/html_node/Runtime.html""
, if AC_RUN_IFELSE do not have cross-compile option, configure prints an error message and exits.
Signed-off-by: Mingrui Ren jiladahe1997@gmail.com","@infrastation
Thanks for your quick reply, that's awesome. I have revised the PR:

leave HAVE_NO_PRINTF_Z undefined
fix indentation

By the way, an immature suggestion: I saw there are some checks in github pull request, maybe another cross-compile check is good :)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,954,2021-11-03T09:51:12Z,2021-11-04T11:40:57Z,2021-11-04T11:41:04Z,MERGED,True,8,5,2,https://github.com/jiladahe1997,[bugfix]configure: fix error when cross-compile:,1,"['bug', 'compiling']",https://github.com/the-tcpdump-group/tcpdump/pull/954,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/954#issuecomment-959984067,"While cross-compile, ./configure --host=xxx will output:
""checking whether printf(3) supports the z length modifier...
configure: error: in `/${path_to_tcpdump}/tcpdump':""
That is casued by AC_RUN_IFELSE, as describe in
""https://www.gnu.org/software/autoconf/manual/autoconf-2.63/html_node/Runtime.html""
, if AC_RUN_IFELSE do not have cross-compile option, configure prints an error message and exits.
Signed-off-by: Mingrui Ren jiladahe1997@gmail.com","It is a good point that at least one cross-compiling build could be tried in the CI set of builds.
Thank you for updating the commit, it looks better now. Please note that it changes configure.ac mode from 0644 to 0755, this is wrong. Also in configure the additional code that handles runstatedir should not be there. If you do not feel confident fixing that, let me know and I will amend your commit in place.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,954,2021-11-03T09:51:12Z,2021-11-04T11:40:57Z,2021-11-04T11:41:04Z,MERGED,True,8,5,2,https://github.com/jiladahe1997,[bugfix]configure: fix error when cross-compile:,1,"['bug', 'compiling']",https://github.com/the-tcpdump-group/tcpdump/pull/954,https://github.com/infrastation,5,https://github.com/the-tcpdump-group/tcpdump/pull/954#issuecomment-960006486,"While cross-compile, ./configure --host=xxx will output:
""checking whether printf(3) supports the z length modifier...
configure: error: in `/${path_to_tcpdump}/tcpdump':""
That is casued by AC_RUN_IFELSE, as describe in
""https://www.gnu.org/software/autoconf/manual/autoconf-2.63/html_node/Runtime.html""
, if AC_RUN_IFELSE do not have cross-compile option, configure prints an error message and exits.
Signed-off-by: Mingrui Ren jiladahe1997@gmail.com","For reference, the problem reproduces as described:
./configure --host=mips-linux-gnu
checking build system type... x86_64-pc-linux-gnu
checking host system type... mips-unknown-linux-gnu
[...]
configure: error: cannot run test program while cross compiling
See `config.log' for more details",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,954,2021-11-03T09:51:12Z,2021-11-04T11:40:57Z,2021-11-04T11:41:04Z,MERGED,True,8,5,2,https://github.com/jiladahe1997,[bugfix]configure: fix error when cross-compile:,1,"['bug', 'compiling']",https://github.com/the-tcpdump-group/tcpdump/pull/954,https://github.com/jiladahe1997,6,https://github.com/the-tcpdump-group/tcpdump/pull/954#issuecomment-960354400,"While cross-compile, ./configure --host=xxx will output:
""checking whether printf(3) supports the z length modifier...
configure: error: in `/${path_to_tcpdump}/tcpdump':""
That is casued by AC_RUN_IFELSE, as describe in
""https://www.gnu.org/software/autoconf/manual/autoconf-2.63/html_node/Runtime.html""
, if AC_RUN_IFELSE do not have cross-compile option, configure prints an error message and exits.
Signed-off-by: Mingrui Ren jiladahe1997@gmail.com","@infrastation
Sorry for the carelessness before :( ,  it should be fine now.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,954,2021-11-03T09:51:12Z,2021-11-04T11:40:57Z,2021-11-04T11:41:04Z,MERGED,True,8,5,2,https://github.com/jiladahe1997,[bugfix]configure: fix error when cross-compile:,1,"['bug', 'compiling']",https://github.com/the-tcpdump-group/tcpdump/pull/954,https://github.com/infrastation,7,https://github.com/the-tcpdump-group/tcpdump/pull/954#issuecomment-960703935,"While cross-compile, ./configure --host=xxx will output:
""checking whether printf(3) supports the z length modifier...
configure: error: in `/${path_to_tcpdump}/tcpdump':""
That is casued by AC_RUN_IFELSE, as describe in
""https://www.gnu.org/software/autoconf/manual/autoconf-2.63/html_node/Runtime.html""
, if AC_RUN_IFELSE do not have cross-compile option, configure prints an error message and exits.
Signed-off-by: Mingrui Ren jiladahe1997@gmail.com",Thank you.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,955,2021-11-04T00:36:10Z,2022-04-14T15:22:28Z,2022-04-19T16:01:20Z,CLOSED,False,16,14,5,https://github.com/BrynXu,Parse lower 4 bits in version field as hw info for arista ethertype,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/955,https://github.com/BrynXu,1,https://github.com/the-tcpdump-group/tcpdump/pull/955,"This change is based on PR668, quote its comment first to understand this change easier:
""Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp""
Recently, Arista divides the two-byte protocol version field further into two fields:
One-byte protocol version: 0x1 for 64-bit timestamp and 0x2 for 48-bit timestamp
One-byte protocol hw version: 0x0 for not-specified, 0x1 for J2
With this new definition, the current dissector will fail to print timestamp correctly, this PR fixes the problem.
The output of tcpdump are like those:
13:36:40.091512 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x0010, Timestamp TAI(64-bit): 2019-05-29 20:36:39, 944724424 ns, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 62
13:36:40.579036 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x0011, Timestamp TAI(64-bit): 2019-05-29 20:36:40, 432245804 ns, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 58
13:37:41.551225 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x0020, Timestamp TAI(48-bit): Seconds 60821, Nanoseconds 404038772, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 62
13:37:42.040995 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x0021, Timestamp TAI(48-bit): Seconds 60821, Nanoseconds 893796872, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 58","This change is based on PR668, quote its comment first to understand this change easier:
""Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp""
Recently, Arista divides the two-byte protocol version field further into two fields:
One-byte protocol version: 0x1 for 64-bit timestamp and 0x2 for 48-bit timestamp
One-byte protocol hw version: 0x0 for not-specified, 0x1 for J2
With this new definition, the current dissector will fail to print timestamp correctly, this PR fixes the problem.
The output of tcpdump are like those:
13:36:40.091512 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x0010, Timestamp TAI(64-bit): 2019-05-29 20:36:39, 944724424 ns, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 62
13:36:40.579036 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x0011, Timestamp TAI(64-bit): 2019-05-29 20:36:40, 432245804 ns, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 58
13:37:41.551225 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x0020, Timestamp TAI(48-bit): Seconds 60821, Nanoseconds 404038772, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 62
13:37:42.040995 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x0021, Timestamp TAI(48-bit): Seconds 60821, Nanoseconds 893796872, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 58",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,955,2021-11-04T00:36:10Z,2022-04-14T15:22:28Z,2022-04-19T16:01:20Z,CLOSED,False,16,14,5,https://github.com/BrynXu,Parse lower 4 bits in version field as hw info for arista ethertype,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/955,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/955#issuecomment-1009197513,"This change is based on PR668, quote its comment first to understand this change easier:
""Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp""
Recently, Arista divides the two-byte protocol version field further into two fields:
One-byte protocol version: 0x1 for 64-bit timestamp and 0x2 for 48-bit timestamp
One-byte protocol hw version: 0x0 for not-specified, 0x1 for J2
With this new definition, the current dissector will fail to print timestamp correctly, this PR fixes the problem.
The output of tcpdump are like those:
13:36:40.091512 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x0010, Timestamp TAI(64-bit): 2019-05-29 20:36:39, 944724424 ns, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 62
13:36:40.579036 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x0011, Timestamp TAI(64-bit): 2019-05-29 20:36:40, 432245804 ns, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 58
13:37:41.551225 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x0020, Timestamp TAI(48-bit): Seconds 60821, Nanoseconds 404038772, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 62
13:37:42.040995 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x0021, Timestamp TAI(48-bit): Seconds 60821, Nanoseconds 893796872, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 58","Thank you for preparing these changes. Please note that the new test cases would need to be in tests/TESTLIST to work, also that the code uses C99, so existing comments use an OK style. Is there any documentation for this EtherType?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,955,2021-11-04T00:36:10Z,2022-04-14T15:22:28Z,2022-04-19T16:01:20Z,CLOSED,False,16,14,5,https://github.com/BrynXu,Parse lower 4 bits in version field as hw info for arista ethertype,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/955,https://github.com/BrynXu,3,https://github.com/the-tcpdump-group/tcpdump/pull/955#issuecomment-1019019764,"This change is based on PR668, quote its comment first to understand this change easier:
""Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp""
Recently, Arista divides the two-byte protocol version field further into two fields:
One-byte protocol version: 0x1 for 64-bit timestamp and 0x2 for 48-bit timestamp
One-byte protocol hw version: 0x0 for not-specified, 0x1 for J2
With this new definition, the current dissector will fail to print timestamp correctly, this PR fixes the problem.
The output of tcpdump are like those:
13:36:40.091512 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x0010, Timestamp TAI(64-bit): 2019-05-29 20:36:39, 944724424 ns, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 62
13:36:40.579036 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x0011, Timestamp TAI(64-bit): 2019-05-29 20:36:40, 432245804 ns, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 58
13:37:41.551225 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x0020, Timestamp TAI(48-bit): Seconds 60821, Nanoseconds 404038772, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 62
13:37:42.040995 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x0021, Timestamp TAI(48-bit): Seconds 60821, Nanoseconds 893796872, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 58","Thank you for preparing these changes. Please note that the new test cases would need to be in tests/TESTLIST to work, also that the code uses C99, so existing comments use an OK style. Is there any documentation for this EtherType?

Thanks for reviewing it. I update the existing test case's input pcap and output files to cover the change, so there is no new testcase added.
The change is documented in Arista EOS Website, it is a public website but requires user registration.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,955,2021-11-04T00:36:10Z,2022-04-14T15:22:28Z,2022-04-19T16:01:20Z,CLOSED,False,16,14,5,https://github.com/BrynXu,Parse lower 4 bits in version field as hw info for arista ethertype,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/955,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/955#issuecomment-1019277215,"This change is based on PR668, quote its comment first to understand this change easier:
""Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp""
Recently, Arista divides the two-byte protocol version field further into two fields:
One-byte protocol version: 0x1 for 64-bit timestamp and 0x2 for 48-bit timestamp
One-byte protocol hw version: 0x0 for not-specified, 0x1 for J2
With this new definition, the current dissector will fail to print timestamp correctly, this PR fixes the problem.
The output of tcpdump are like those:
13:36:40.091512 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x0010, Timestamp TAI(64-bit): 2019-05-29 20:36:39, 944724424 ns, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 62
13:36:40.579036 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x0011, Timestamp TAI(64-bit): 2019-05-29 20:36:40, 432245804 ns, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 58
13:37:41.551225 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x0020, Timestamp TAI(48-bit): Seconds 60821, Nanoseconds 404038772, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 62
13:37:42.040995 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x0021, Timestamp TAI(48-bit): Seconds 60821, Nanoseconds 893796872, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 58","You are right, this updates existing tests only so TESTLIST does not need to be updated. On this note, the change modifies arista_ether.pcap as well, is it because the wire encoding has changed?
I have created an account at the portal, but apparently I am not authorized to view this particular document. @fenner, would it make more sense to put the current Arista packet diagrams into print-arista.c?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,955,2021-11-04T00:36:10Z,2022-04-14T15:22:28Z,2022-04-19T16:01:20Z,CLOSED,False,16,14,5,https://github.com/BrynXu,Parse lower 4 bits in version field as hw info for arista ethertype,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/955,https://github.com/fenner,5,https://github.com/the-tcpdump-group/tcpdump/pull/955#issuecomment-1090186728,"This change is based on PR668, quote its comment first to understand this change easier:
""Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp""
Recently, Arista divides the two-byte protocol version field further into two fields:
One-byte protocol version: 0x1 for 64-bit timestamp and 0x2 for 48-bit timestamp
One-byte protocol hw version: 0x0 for not-specified, 0x1 for J2
With this new definition, the current dissector will fail to print timestamp correctly, this PR fixes the problem.
The output of tcpdump are like those:
13:36:40.091512 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x0010, Timestamp TAI(64-bit): 2019-05-29 20:36:39, 944724424 ns, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 62
13:36:40.579036 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x0011, Timestamp TAI(64-bit): 2019-05-29 20:36:40, 432245804 ns, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 58
13:37:41.551225 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x0020, Timestamp TAI(48-bit): Seconds 60821, Nanoseconds 404038772, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 62
13:37:42.040995 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x0021, Timestamp TAI(48-bit): Seconds 60821, Nanoseconds 893796872, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 58","Would packet diagrams like this be enough?
The Arista timestamp header consists of the following fields:
1. The Arista ethertype (0xd28b)
2. A 2-byte subtype field; 0x01 indicates the timestamp header
3. A 2-byte version field, described below.
4. A 48-bit or 64-bit timestamp field, depending on the contents of the version field

This header is then followed by the original ethertype and the remainder of the original packet.

 0                   1                   2                   3  
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                            dst mac                            |
+                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               |                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +
|                            src mac                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|        ethertype 0xd28b       |          subtype 0x1          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            version            |                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +
|                          timestamp...                         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The two-byte version value is split into 3 fields:
1. The timescale in use.  Currently assigned values include:
    0 = TAI
    1 = UTC
2. The timestamp format and length.  Currently assigned values include:
    1 = 64-bit timestamp
    2 = 48-bit timestamp
3. The hardware info
    0 = R/R2 series
    1 = R3 series

 0                   1          
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   timescale   | format|hw info|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,955,2021-11-04T00:36:10Z,2022-04-14T15:22:28Z,2022-04-19T16:01:20Z,CLOSED,False,16,14,5,https://github.com/BrynXu,Parse lower 4 bits in version field as hw info for arista ethertype,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/955,https://github.com/infrastation,6,https://github.com/the-tcpdump-group/tcpdump/pull/955#issuecomment-1090830755,"This change is based on PR668, quote its comment first to understand this change easier:
""Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp""
Recently, Arista divides the two-byte protocol version field further into two fields:
One-byte protocol version: 0x1 for 64-bit timestamp and 0x2 for 48-bit timestamp
One-byte protocol hw version: 0x0 for not-specified, 0x1 for J2
With this new definition, the current dissector will fail to print timestamp correctly, this PR fixes the problem.
The output of tcpdump are like those:
13:36:40.091512 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x0010, Timestamp TAI(64-bit): 2019-05-29 20:36:39, 944724424 ns, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 62
13:36:40.579036 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x0011, Timestamp TAI(64-bit): 2019-05-29 20:36:40, 432245804 ns, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 58
13:37:41.551225 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x0020, Timestamp TAI(48-bit): Seconds 60821, Nanoseconds 404038772, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 62
13:37:42.040995 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x0021, Timestamp TAI(48-bit): Seconds 60821, Nanoseconds 893796872, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 58","Thank you, I expect to have another look in a few days.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,955,2021-11-04T00:36:10Z,2022-04-14T15:22:28Z,2022-04-19T16:01:20Z,CLOSED,False,16,14,5,https://github.com/BrynXu,Parse lower 4 bits in version field as hw info for arista ethertype,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/955,https://github.com/infrastation,7,https://github.com/the-tcpdump-group/tcpdump/pull/955#issuecomment-1098571391,"This change is based on PR668, quote its comment first to understand this change easier:
""Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp""
Recently, Arista divides the two-byte protocol version field further into two fields:
One-byte protocol version: 0x1 for 64-bit timestamp and 0x2 for 48-bit timestamp
One-byte protocol hw version: 0x0 for not-specified, 0x1 for J2
With this new definition, the current dissector will fail to print timestamp correctly, this PR fixes the problem.
The output of tcpdump are like those:
13:36:40.091512 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x0010, Timestamp TAI(64-bit): 2019-05-29 20:36:39, 944724424 ns, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 62
13:36:40.579036 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x0011, Timestamp TAI(64-bit): 2019-05-29 20:36:40, 432245804 ns, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 58
13:37:41.551225 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x0020, Timestamp TAI(48-bit): Seconds 60821, Nanoseconds 404038772, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 62
13:37:42.040995 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x0021, Timestamp TAI(48-bit): Seconds 60821, Nanoseconds 893796872, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 58","After looking at print-arista.c for a while I prepared a more substantial change, which is going to be committed tomorrow.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,955,2021-11-04T00:36:10Z,2022-04-14T15:22:28Z,2022-04-19T16:01:20Z,CLOSED,False,16,14,5,https://github.com/BrynXu,Parse lower 4 bits in version field as hw info for arista ethertype,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/955,https://github.com/infrastation,8,https://github.com/the-tcpdump-group/tcpdump/pull/955#issuecomment-1099297015,"This change is based on PR668, quote its comment first to understand this change easier:
""Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp""
Recently, Arista divides the two-byte protocol version field further into two fields:
One-byte protocol version: 0x1 for 64-bit timestamp and 0x2 for 48-bit timestamp
One-byte protocol hw version: 0x0 for not-specified, 0x1 for J2
With this new definition, the current dissector will fail to print timestamp correctly, this PR fixes the problem.
The output of tcpdump are like those:
13:36:40.091512 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x0010, Timestamp TAI(64-bit): 2019-05-29 20:36:39, 944724424 ns, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 62
13:36:40.579036 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x0011, Timestamp TAI(64-bit): 2019-05-29 20:36:40, 432245804 ns, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 58
13:37:41.551225 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x0020, Timestamp TAI(48-bit): Seconds 60821, Nanoseconds 404038772, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 62
13:37:42.040995 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x0021, Timestamp TAI(48-bit): Seconds 60821, Nanoseconds 893796872, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 58",Commit a807516 improves the associated code and adds support for HwInfo. Thank you @BrynXu for raising this issue and thank you @fenner for providing the packet diagram. Closing as resolved.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,955,2021-11-04T00:36:10Z,2022-04-14T15:22:28Z,2022-04-19T16:01:20Z,CLOSED,False,16,14,5,https://github.com/BrynXu,Parse lower 4 bits in version field as hw info for arista ethertype,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/955,https://github.com/fenner,9,https://github.com/the-tcpdump-group/tcpdump/pull/955#issuecomment-1102826335,"This change is based on PR668, quote its comment first to understand this change easier:
""Arista applied for, and received the assignment of, a vendor-specific EtherType Protocol Identifier in May of 2016. Details below:
Ethertype number is: D28B
Issue date is: May 12, 2016
Arista Subtype 0x01 is Timestamp L2 Header
The timestamp L2 header consist of the following fields:
Arista EtherType (0xD28B)
Two-byte protocol subtype of 0x1
Two-byte protocol version: 0x10 for 64-bit timestamp and 0x20 for 48-bit timestamp""
Recently, Arista divides the two-byte protocol version field further into two fields:
One-byte protocol version: 0x1 for 64-bit timestamp and 0x2 for 48-bit timestamp
One-byte protocol hw version: 0x0 for not-specified, 0x1 for J2
With this new definition, the current dissector will fail to print timestamp correctly, this PR fixes the problem.
The output of tcpdump are like those:
13:36:40.091512 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x0010, Timestamp TAI(64-bit): 2019-05-29 20:36:39, 944724424 ns, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 62
13:36:40.579036 ethertype Arista Vendor Specific Protocol (0xd28b), length 110: SubType: 0x1, Version: 0x0011, Timestamp TAI(64-bit): 2019-05-29 20:36:40, 432245804 ns, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 58
13:37:41.551225 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x0020, Timestamp TAI(48-bit): Seconds 60821, Nanoseconds 404038772, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 62
13:37:42.040995 ethertype Arista Vendor Specific Protocol (0xd28b), length 108: SubType: 0x1, Version: 0x0021, Timestamp TAI(48-bit): Seconds 60821, Nanoseconds 893796872, IP 10.136.1.32 > 10.2.23.24:  ip-proto-63 58","Thank you, @infrastation , for the extra improvements here!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,957,2021-11-09T21:16:09Z,2021-11-10T12:29:31Z,2021-11-10T12:29:45Z,MERGED,True,24,0,3,https://github.com/rpaulo,Add a test case for QUIC retry packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/957,https://github.com/rpaulo,1,https://github.com/the-tcpdump-group/tcpdump/pull/957,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,957,2021-11-09T21:16:09Z,2021-11-10T12:29:31Z,2021-11-10T12:29:45Z,MERGED,True,24,0,3,https://github.com/rpaulo,Add a test case for QUIC retry packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/957,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/957#issuecomment-965085921,,Thank you!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,958,2021-11-17T16:04:43Z,2022-03-31T07:42:30Z,2022-03-31T07:42:30Z,CLOSED,False,317,60,8,https://github.com/martinkunkel2,Add SOME/IP service discovery protocol support,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/958,https://github.com/martinkunkel2,1,https://github.com/the-tcpdump-group/tcpdump/pull/958,A SOME/IP service discovery message is a specific SOME/IP message with message_id 0xFFFF8100.,A SOME/IP service discovery message is a specific SOME/IP message with message_id 0xFFFF8100.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,960,2021-11-17T21:26:44Z,,2022-01-13T20:58:50Z,OPEN,False,5,2,2,https://github.com/rpaulo,Don't try to print any information about gQUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/960,https://github.com/rpaulo,1,https://github.com/the-tcpdump-group/tcpdump/pull/960,Fixes #959.,Fixes #959.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,960,2021-11-17T21:26:44Z,,2022-01-13T20:58:50Z,OPEN,False,5,2,2,https://github.com/rpaulo,Don't try to print any information about gQUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/960,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/960#issuecomment-974646661,Fixes #959.,"Thanks for the patch.
Have you documentation about ""magic"" value 0x51?
Is a test is needed for the ""Short Header"" case?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,960,2021-11-17T21:26:44Z,,2022-01-13T20:58:50Z,OPEN,False,5,2,2,https://github.com/rpaulo,Don't try to print any information about gQUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/960,https://github.com/rpaulo,3,https://github.com/the-tcpdump-group/tcpdump/pull/960#issuecomment-974678986,Fixes #959.,"The 0x51 is just the beginning of the Google QUIC version numbers.  I don't have any documentation on it.
Short headers have no version number, so nothing is needed there.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,960,2021-11-17T21:26:44Z,,2022-01-13T20:58:50Z,OPEN,False,5,2,2,https://github.com/rpaulo,Don't try to print any information about gQUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/960,https://github.com/fxlb,4,https://github.com/the-tcpdump-group/tcpdump/pull/960#issuecomment-975389195,Fixes #959.,"Looking for information about 0x51, I looked at:
https://datatracker.ietf.org/doc/html/draft-ietf-quic-transport-32
And found in it the link:
https://github.com/quicwg/base-drafts/wiki/QUIC-Versions
0x51 is not the only non-IETF QUIC version value...",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,960,2021-11-17T21:26:44Z,,2022-01-13T20:58:50Z,OPEN,False,5,2,2,https://github.com/rpaulo,Don't try to print any information about gQUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/960,https://github.com/rpaulo,5,https://github.com/the-tcpdump-group/tcpdump/pull/960#issuecomment-975677127,Fixes #959.,"I was told that 0x51 will be the last version before the transition to IETF QUIC is finalized. Regarding the other versions, we should let the authors of them add support to tcpdump if it’s important to them.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,960,2021-11-17T21:26:44Z,,2022-01-13T20:58:50Z,OPEN,False,5,2,2,https://github.com/rpaulo,Don't try to print any information about gQUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/960,https://github.com/fxlb,6,https://github.com/the-tcpdump-group/tcpdump/pull/960#issuecomment-977716331,Fixes #959.,"To detect only IETF QUIC, the quic_detect function could be enhanced to check, in the long header case, than the version is 0, 1 or 0x?a?a?a?a.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,960,2021-11-17T21:26:44Z,,2022-01-13T20:58:50Z,OPEN,False,5,2,2,https://github.com/rpaulo,Don't try to print any information about gQUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/960,https://github.com/rpaulo,7,https://github.com/the-tcpdump-group/tcpdump/pull/960#issuecomment-991832033,Fixes #959.,It could but it would make that function unnecessarily complicated.  The versions you pointed out were used before RFC 9000 was released.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,960,2021-11-17T21:26:44Z,,2022-01-13T20:58:50Z,OPEN,False,5,2,2,https://github.com/rpaulo,Don't try to print any information about gQUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/960,https://github.com/fxlb,8,https://github.com/the-tcpdump-group/tcpdump/pull/960#issuecomment-999687206,Fixes #959.,"Yes, but tcpdump needs to behave correctly with any input (gquic, pre-rfc9000, experiments, etc.). And with a fuzzed/corrupted capture file the version may be any random value...
Why not a quic_detect() update like (or better idea?):
diff --git a/print-quic.c b/print-quic.c
index be1a5450..14069638 100644
--- a/print-quic.c
+++ b/print-quic.c
@@ -114,9 +114,23 @@ quic_detect(netdissect_options *ndo, const u_char *p, const u_int len)
 		return 0;
 	first_octet = GET_U_1(p);
 	/* All QUIC packets must have the Fixed Bit set to 1. */
-	if ((first_octet & 0x40) == 0x40)
-		return 1;
-	else
+	if ((first_octet & 0x40) == 0x40) {
+		if (first_octet & 0x80) {
+			/* Long Header (Header Form set to 1) */
+			uint32_t version;
+			if (len < 6)
+				return 0;
+			p++;
+			version = GET_BE_U_4(p);
+			if (version == 0 || version == 1 ||
+			    (version & 0x0f0f0f0f) == 0x0a0a0a0a)
+				return 1;
+			else
+				return 0;
+		} else
+			/* Short Header */
+			return 1;
+	} else
 		return 0;
 }",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,960,2021-11-17T21:26:44Z,,2022-01-13T20:58:50Z,OPEN,False,5,2,2,https://github.com/rpaulo,Don't try to print any information about gQUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/960,https://github.com/rpaulo,9,https://github.com/the-tcpdump-group/tcpdump/pull/960#issuecomment-999787636,Fixes #959.,"I think that you can do that.  However, by time tcpdump 5 ships, I suspect gQUIC will not be enabled anymore, but who knows.
I do think that quic_detect() should be as simple as possible.  If we were to add full support for proprietary protocols like gQUIC then it would have to be different, but right now, I don't see much benefit in spending time on anything else but IETF QUIC.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,960,2021-11-17T21:26:44Z,,2022-01-13T20:58:50Z,OPEN,False,5,2,2,https://github.com/rpaulo,Don't try to print any information about gQUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/960,https://github.com/fxlb,10,https://github.com/the-tcpdump-group/tcpdump/pull/960#issuecomment-1010925748,Fixes #959.,"I do think that quic_detect() should be as simple as possible.

Why not. But in this case it seems better to remove the 0x51 version test (particular case) and test version like:
version == 0 || version == 1 || (version & 0x0f0f0f0f) == 0x0a0a0a0a)
All other versions should give : ""not RFC9000 packet""",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,960,2021-11-17T21:26:44Z,,2022-01-13T20:58:50Z,OPEN,False,5,2,2,https://github.com/rpaulo,Don't try to print any information about gQUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/960,https://github.com/rpaulo,11,https://github.com/the-tcpdump-group/tcpdump/pull/960#issuecomment-1011210415,Fixes #959.,Not all QUIC packets carry a version number so that would only work for LH packets.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,960,2021-11-17T21:26:44Z,,2022-01-13T20:58:50Z,OPEN,False,5,2,2,https://github.com/rpaulo,Don't try to print any information about gQUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/960,https://github.com/fxlb,12,https://github.com/the-tcpdump-group/tcpdump/pull/960#issuecomment-1012105880,Fixes #959.,"On 12/01/2022 17:11, Rui Paulo wrote:
 Not all QUIC packets carry a version number so that would only work for LH packets.
Exactly. This is what I mean.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,960,2021-11-17T21:26:44Z,,2022-01-13T20:58:50Z,OPEN,False,5,2,2,https://github.com/rpaulo,Don't try to print any information about gQUIC packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/960,https://github.com/rpaulo,13,https://github.com/the-tcpdump-group/tcpdump/pull/960#issuecomment-1012510448,Fixes #959.,"Okay, your patch works for me.  Feel free to commit that.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,962,2021-11-21T21:12:20Z,2022-02-02T10:21:59Z,2022-02-02T10:28:24Z,MERGED,True,67,12,4,https://github.com/ton31337,bgp: Parse rfc9072,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/962,https://github.com/ton31337,1,https://github.com/the-tcpdump-group/tcpdump/pull/962,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,962,2021-11-21T21:12:20Z,2022-02-02T10:21:59Z,2022-02-02T10:28:24Z,MERGED,True,67,12,4,https://github.com/ton31337,bgp: Parse rfc9072,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/962,https://github.com/ton31337,2,https://github.com/the-tcpdump-group/tcpdump/pull/962#issuecomment-1024527241,,@fxlb @infrastation just rebased to the latest master (was a conflict with TESTLIST file). Can be merged?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,962,2021-11-21T21:12:20Z,2022-02-02T10:21:59Z,2022-02-02T10:28:24Z,MERGED,True,67,12,4,https://github.com/ton31337,bgp: Parse rfc9072,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/962,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/962#issuecomment-1027743550,,The code and the test should be in one commit.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,962,2021-11-21T21:12:20Z,2022-02-02T10:21:59Z,2022-02-02T10:28:24Z,MERGED,True,67,12,4,https://github.com/ton31337,bgp: Parse rfc9072,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/962,https://github.com/ton31337,4,https://github.com/the-tcpdump-group/tcpdump/pull/962#issuecomment-1027747512,,"The code and the test should be in one commit.

Fixed.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,962,2021-11-21T21:12:20Z,2022-02-02T10:21:59Z,2022-02-02T10:28:24Z,MERGED,True,67,12,4,https://github.com/ton31337,bgp: Parse rfc9072,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/962,https://github.com/fxlb,5,https://github.com/the-tcpdump-group/tcpdump/pull/962#issuecomment-1027786565,,Thank you!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,962,2021-11-21T21:12:20Z,2022-02-02T10:21:59Z,2022-02-02T10:28:24Z,MERGED,True,67,12,4,https://github.com/ton31337,bgp: Parse rfc9072,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/962,https://github.com/fxlb,6,https://github.com/the-tcpdump-group/tcpdump/pull/962#issuecomment-1027790550,,"Please, always put code and test in the same commit.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,962,2021-11-21T21:12:20Z,2022-02-02T10:21:59Z,2022-02-02T10:28:24Z,MERGED,True,67,12,4,https://github.com/ton31337,bgp: Parse rfc9072,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/962,https://github.com/ton31337,7,https://github.com/the-tcpdump-group/tcpdump/pull/962#issuecomment-1027791612,,"Thanks, noted.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,966,2021-11-30T18:25:36Z,2021-12-23T11:11:54Z,2021-12-23T11:12:18Z,MERGED,True,5,3,2,https://github.com/rpaulo,Fix OOB read while parsing QUIC SH packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/966,https://github.com/rpaulo,1,https://github.com/the-tcpdump-group/tcpdump/pull/966,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,966,2021-11-30T18:25:36Z,2021-12-23T11:11:54Z,2021-12-23T11:12:18Z,MERGED,True,5,3,2,https://github.com/rpaulo,Fix OOB read while parsing QUIC SH packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/966,https://github.com/rpaulo,2,https://github.com/the-tcpdump-group/tcpdump/pull/966#issuecomment-999788162,,@fxlb can you merge this PR please or at least schedule another Coverity run with this PR?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,966,2021-11-30T18:25:36Z,2021-12-23T11:11:54Z,2021-12-23T11:12:18Z,MERGED,True,5,3,2,https://github.com/rpaulo,Fix OOB read while parsing QUIC SH packets.,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/966,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/966#issuecomment-1000230278,,"Rebased, merged, thank you.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,967,2021-12-13T00:05:21Z,,2021-12-13T00:05:41Z,OPEN,False,3,1,1,https://github.com/dleonard0,Avoid calling setuid() with -Zroot,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/967,https://github.com/dleonard0,1,https://github.com/the-tcpdump-group/tcpdump/pull/967,"Fixes an issue under Linux user namespaces, where having a uid of 0 is not enough for setuid(0) to succeed making tcpdump exit. There was no way to avoid this when compiled -DWITH_USER='""tcpdump""'
This patch achieves the behaviour documented in source by avoiding the setuid() when -Zroot is supplied.
FIxes this scenario on Linux:
 $ unshare -Urn
 # ip link add br0 type bridge
 # ip link set br0 up
 # tcpdump -ibr0 -lvn
 tcpdump: Couldn't change to 'tcpdump' uid=137 gid=146: Operation not permitted
 # tcpdump -Zroot -ibr0 -lvn
 tcpdump: Couldn't change to 'root' uid=0 gid=0: Operation not permitted","Fixes an issue under Linux user namespaces, where having a uid of 0 is not enough for setuid(0) to succeed making tcpdump exit. There was no way to avoid this when compiled -DWITH_USER='""tcpdump""'
This patch achieves the behaviour documented in source by avoiding the setuid() when -Zroot is supplied.
FIxes this scenario on Linux:
 $ unshare -Urn
 # ip link add br0 type bridge
 # ip link set br0 up
 # tcpdump -ibr0 -lvn
 tcpdump: Couldn't change to 'tcpdump' uid=137 gid=146: Operation not permitted
 # tcpdump -Zroot -ibr0 -lvn
 tcpdump: Couldn't change to 'root' uid=0 gid=0: Operation not permitted",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,968,2021-12-14T06:49:50Z,2022-01-17T19:43:59Z,2022-01-17T19:44:36Z,MERGED,True,43,5,7,https://github.com/nats,Add option to parse and print every Nth packet,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/968,https://github.com/nats,1,https://github.com/the-tcpdump-group/tcpdump/pull/968,"New option --sampling-rate=NTH will parse and print every NTH packet, with
all other packets producing no output. The default behaviour is
--sampling-rate=1, which prints every packet.
The sampling rate feature is useful for real-time inspection of an interface
with a high packet rate, or initial inspection of large capture files.","New option --sampling-rate=NTH will parse and print every NTH packet, with
all other packets producing no output. The default behaviour is
--sampling-rate=1, which prints every packet.
The sampling rate feature is useful for real-time inspection of an interface
with a high packet rate, or initial inspection of large capture files.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,968,2021-12-14T06:49:50Z,2022-01-17T19:43:59Z,2022-01-17T19:44:36Z,MERGED,True,43,5,7,https://github.com/nats,Add option to parse and print every Nth packet,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/968,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/968#issuecomment-993301836,"New option --sampling-rate=NTH will parse and print every NTH packet, with
all other packets producing no output. The default behaviour is
--sampling-rate=1, which prints every packet.
The sampling rate feature is useful for real-time inspection of an interface
with a high packet rate, or initial inspection of large capture files.",Thanks for your proposal. The print_usage() function need an update.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,968,2021-12-14T06:49:50Z,2022-01-17T19:43:59Z,2022-01-17T19:44:36Z,MERGED,True,43,5,7,https://github.com/nats,Add option to parse and print every Nth packet,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/968,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/968#issuecomment-993329818,"New option --sampling-rate=NTH will parse and print every NTH packet, with
all other packets producing no output. The default behaviour is
--sampling-rate=1, which prints every packet.
The sampling rate feature is useful for real-time inspection of an interface
with a high packet rate, or initial inspection of large capture files.","About the option name:
The rate for current --sampling-rate 5 (by example) is 0.2. Thus we could name the option just --sampling, --sampling 5 understood sampling every 5 packets.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,968,2021-12-14T06:49:50Z,2022-01-17T19:43:59Z,2022-01-17T19:44:36Z,MERGED,True,43,5,7,https://github.com/nats,Add option to parse and print every Nth packet,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/968,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/968#issuecomment-993476146,"New option --sampling-rate=NTH will parse and print every NTH packet, with
all other packets producing no output. The default behaviour is
--sampling-rate=1, which prints every packet.
The sampling rate feature is useful for real-time inspection of an interface
with a high packet rate, or initial inspection of large capture files.","A couple points about the user interface of the proposed changes:

Since sampling is not a new concept (sFlow had it at least 15 years ago it, at least in some implementations), it might be relevant to apply it at capture-time as well. Even if that isn't implemented right away (as perhaps the best place to do that would be as close to the OS kernel as possible), it would be easier to add it later if the option name stated which sampling it controls, for example --print-sampling for the proposed feature with a room for --capture-sampling in future.
Also, since print-time sampling implies -S, it would be better to enable it automatically instead of expecting the user to remember to do it every time.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,968,2021-12-14T06:49:50Z,2022-01-17T19:43:59Z,2022-01-17T19:44:36Z,MERGED,True,43,5,7,https://github.com/nats,Add option to parse and print every Nth packet,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/968,https://github.com/guyharris,5,https://github.com/the-tcpdump-group/tcpdump/pull/968#issuecomment-994033727,"New option --sampling-rate=NTH will parse and print every NTH packet, with
all other packets producing no output. The default behaviour is
--sampling-rate=1, which prints every packet.
The sampling rate feature is useful for real-time inspection of an interface
with a high packet rate, or initial inspection of large capture files.","A couple points about the user interface of the proposed changes:

Since sampling is not a new concept (sFlow had it at least 15 years ago it, at least in some implementations), it might be relevant to apply it at capture-time as well. Even if that isn't implemented right away (as perhaps the best place to do that would be as close to the OS kernel as possible),


...in which case there should be a libpcap API to enable sampling, so that the implementation is hidden from applications doing sampling (as the implementation might be platform-dependent, and applications shouldn't have to know the platform details).
WinPcap and Npcap have a slightly weird API to specify sampling - pcap_setsampling() returns a pointer to a struct pcap_samp for a pcap_t, and the caller fills in that structure with the desired parameters.  ""Sampling parameters cannot be changed when a capture is active. These parameters must be applied before starting the capture. If they are applied when the capture is in progress, the new settings are ignored."" - but, with pcap_open_live(), you can't do that, and I think they added that API before we had pcap_create() and pcap_activate().
The structure has a member that specifies the sampling method; they offer:

PCAP_SAMP_NOSAMP, which is ""every packet, no sampling"";
PCAP_SAMP_1_EVERY_N, which is ""every Nth packet"";
PCAP_SAMP_FIRST_AFTER_N_MS, which is ""1 packet every N milliseconds"".

The other member specifies N.
As they note, this affects both live captures and reading a capture file.
We could add this to libpcap-on-UN*X, and add it to the other live-capture pcap-XXX.c files (with a helper routine so there's less code duplication).",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,968,2021-12-14T06:49:50Z,2022-01-17T19:43:59Z,2022-01-17T19:44:36Z,MERGED,True,43,5,7,https://github.com/nats,Add option to parse and print every Nth packet,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/968,https://github.com/nats,6,https://github.com/the-tcpdump-group/tcpdump/pull/968#issuecomment-994182553,"New option --sampling-rate=NTH will parse and print every NTH packet, with
all other packets producing no output. The default behaviour is
--sampling-rate=1, which prints every packet.
The sampling rate feature is useful for real-time inspection of an interface
with a high packet rate, or initial inspection of large capture files.","I have renamed to --print-sampling, added it to print_usage(), enabled -S, and revised testcase and man page to match.
I have also enabled --print,  since tcpdump -w test.cap --print-sampling 100 not producing any output feels counter-intuitive given the flag+option names are now so similar, and tcpdump -w test.cap --print --print-sampling 100 feels redundant.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,968,2021-12-14T06:49:50Z,2022-01-17T19:43:59Z,2022-01-17T19:44:36Z,MERGED,True,43,5,7,https://github.com/nats,Add option to parse and print every Nth packet,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/968,https://github.com/guyharris,7,https://github.com/the-tcpdump-group/tcpdump/pull/968#issuecomment-994202622,"New option --sampling-rate=NTH will parse and print every NTH packet, with
all other packets producing no output. The default behaviour is
--sampling-rate=1, which prints every packet.
The sampling rate feature is useful for real-time inspection of an interface
with a high packet rate, or initial inspection of large capture files.","Why not just --sample-packets?  Presumably, it should work regardless of whether you're doing a live capture or reading from a file and should work regardless of whether you're printing dissected packets or writing them to a file.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,968,2021-12-14T06:49:50Z,2022-01-17T19:43:59Z,2022-01-17T19:44:36Z,MERGED,True,43,5,7,https://github.com/nats,Add option to parse and print every Nth packet,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/968,https://github.com/nats,8,https://github.com/the-tcpdump-group/tcpdump/pull/968#issuecomment-994278506,"New option --sampling-rate=NTH will parse and print every NTH packet, with
all other packets producing no output. The default behaviour is
--sampling-rate=1, which prints every packet.
The sampling rate feature is useful for real-time inspection of an interface
with a high packet rate, or initial inspection of large capture files.","or writing them to a file

This PR only affects printing.  Because writing to file is not affected, you can do: timeout 5m tcpdump -w test.cap --print-samples 100 , to get an overview of what is being captured without flooding your terminal and consuming a lot of processor time. All packets are written to the file and you can process it however you like afterwards.
In that sense, --print-sampling is almost a superset of --print; if it were possible to give --print an optional argument without breaking back-compat, I would suggest going that route.  However from what I can see it cannot be optional,  as the meaning of tcpdump --print <filter> would change.
I think your suggestion of capture-side sampling within libpcap would be great, but that appears to be a more involved change.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,968,2021-12-14T06:49:50Z,2022-01-17T19:43:59Z,2022-01-17T19:44:36Z,MERGED,True,43,5,7,https://github.com/nats,Add option to parse and print every Nth packet,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/968,https://github.com/guyharris,9,https://github.com/the-tcpdump-group/tcpdump/pull/968#issuecomment-994368844,"New option --sampling-rate=NTH will parse and print every NTH packet, with
all other packets producing no output. The default behaviour is
--sampling-rate=1, which prints every packet.
The sampling rate feature is useful for real-time inspection of an interface
with a high packet rate, or initial inspection of large capture files.","OK, so the idea is that this isn't intended for writing sampled packets to a file.
That also means that capture-side/read-side sampling won't work, as that eliminates packets before the capturing program sees them, so it can't write those packets to a file.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,968,2021-12-14T06:49:50Z,2022-01-17T19:43:59Z,2022-01-17T19:44:36Z,MERGED,True,43,5,7,https://github.com/nats,Add option to parse and print every Nth packet,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/968,https://github.com/infrastation,10,https://github.com/the-tcpdump-group/tcpdump/pull/968#issuecomment-994690774,"New option --sampling-rate=NTH will parse and print every NTH packet, with
all other packets producing no output. The default behaviour is
--sampling-rate=1, which prints every packet.
The sampling rate feature is useful for real-time inspection of an interface
with a high packet rate, or initial inspection of large capture files.","Are you saying it would be better to have one sampling control knob (whatever the name, but without the ""print"" in it), which would make tcpdump skip the packets at read time, so the effect would be in both the printing branch and the writing branch? And if libpcap later gets an API call to sample packets, then tcpdump would offload the request to libpcap, which possibly one day would offload that to the OS kernel?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,968,2021-12-14T06:49:50Z,2022-01-17T19:43:59Z,2022-01-17T19:44:36Z,MERGED,True,43,5,7,https://github.com/nats,Add option to parse and print every Nth packet,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/968,https://github.com/guyharris,11,https://github.com/the-tcpdump-group/tcpdump/pull/968#issuecomment-995175220,"New option --sampling-rate=NTH will parse and print every NTH packet, with
all other packets producing no output. The default behaviour is
--sampling-rate=1, which prints every packet.
The sampling rate feature is useful for real-time inspection of an interface
with a high packet rate, or initial inspection of large capture files.","Are you saying it would be better to have one sampling control knob (whatever the name, but without the ""print"" in it), which would make tcpdump skip the packets at read time, so the effect would be in both the printing branch and the writing branch?

That might be useful for some, but it appears not to be what @nats wants here, so it doesn't appear as if it would be completely better.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,968,2021-12-14T06:49:50Z,2022-01-17T19:43:59Z,2022-01-17T19:44:36Z,MERGED,True,43,5,7,https://github.com/nats,Add option to parse and print every Nth packet,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/968,https://github.com/infrastation,12,https://github.com/the-tcpdump-group/tcpdump/pull/968#issuecomment-995186215,"New option --sampling-rate=NTH will parse and print every NTH packet, with
all other packets producing no output. The default behaviour is
--sampling-rate=1, which prints every packet.
The sampling rate feature is useful for real-time inspection of an interface
with a high packet rate, or initial inspection of large capture files.","As another note, PCAP_SAMP_1_EVERY_N allows fine-grained control only for large enough values of N (1/2 = 50%, 1/3 = 33%, 1/4 = 25%, 1/5 = 20%...). At the same time, ""N percent"" does not allow to go below 0.01, if there is such a need (which might matter at 100Gb/s). Perhaps something like ""N out of M"" (or a float) could satisfy both extremes.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,968,2021-12-14T06:49:50Z,2022-01-17T19:43:59Z,2022-01-17T19:44:36Z,MERGED,True,43,5,7,https://github.com/nats,Add option to parse and print every Nth packet,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/968,https://github.com/infrastation,13,https://github.com/the-tcpdump-group/tcpdump/pull/968#issuecomment-995206729,"New option --sampling-rate=NTH will parse and print every NTH packet, with
all other packets producing no output. The default behaviour is
--sampling-rate=1, which prints every packet.
The sampling rate feature is useful for real-time inspection of an interface
with a high packet rate, or initial inspection of large capture files.","Then it looks like the read/capture time sampling would be a completely different thing, possibly not related to the print time sampling in any way except the potential command line options confusion when (and if) both things come into existence.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,968,2021-12-14T06:49:50Z,2022-01-17T19:43:59Z,2022-01-17T19:44:36Z,MERGED,True,43,5,7,https://github.com/nats,Add option to parse and print every Nth packet,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/968,https://github.com/nats,14,https://github.com/the-tcpdump-group/tcpdump/pull/968#issuecomment-995279114,"New option --sampling-rate=NTH will parse and print every NTH packet, with
all other packets producing no output. The default behaviour is
--sampling-rate=1, which prints every packet.
The sampling rate feature is useful for real-time inspection of an interface
with a high packet rate, or initial inspection of large capture files.","To be clear: the reason I want sampling (wherever it occurs within the packet pipeline) is to reduce processing time.  My personal usecase is I sample IPv4 packets in real-time on an interface , and in my testing I found that printing (parsing) is easily the single biggest consumer of CPU time.
I use a command line on linux like tcpdump -n --snapshot-length=34 --print-sampling=100 ip with stdout piped into another program - lets call it stats - for processing. Previously I did the packet sampling within stats by discarding most of tcpdump's output, and tcpdump would use about 85% of 1 core. The addition of --print-sampling=100 has dropped tcpdump to just 3% of 1 core.
Sampling at the print level was a trivial change and a big improvement for my usage of tcpdump. Pushing the sampling up into libpcap is a lot more work will have minimal further improvement to processing time, so I didn't pursue that.
--
If the thinking is --print-sampling is going to be confusing if/when a capture-side sampling option appears in the future, I can certainly understand that perspective and am happy to close this PR.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,968,2021-12-14T06:49:50Z,2022-01-17T19:43:59Z,2022-01-17T19:44:36Z,MERGED,True,43,5,7,https://github.com/nats,Add option to parse and print every Nth packet,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/968,https://github.com/infrastation,15,https://github.com/the-tcpdump-group/tcpdump/pull/968#issuecomment-995294479,"New option --sampling-rate=NTH will parse and print every NTH packet, with
all other packets producing no output. The default behaviour is
--sampling-rate=1, which prints every packet.
The sampling rate feature is useful for real-time inspection of an interface
with a high packet rate, or initial inspection of large capture files.","If the thinking is --print-sampling is going to be confusing if/when a capture-side sampling option appears in the future, I can certainly understand that perspective and am happy to close this PR.

No, that should not be a problem (""let's capture 2% of what has arrived to the interface and print 5% of what was captured"" could be a valid use case). This is an interesting new feature, let's think about it instead of closing.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,968,2021-12-14T06:49:50Z,2022-01-17T19:43:59Z,2022-01-17T19:44:36Z,MERGED,True,43,5,7,https://github.com/nats,Add option to parse and print every Nth packet,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/968,https://github.com/nats,16,https://github.com/the-tcpdump-group/tcpdump/pull/968#issuecomment-996361478,"New option --sampling-rate=NTH will parse and print every NTH packet, with
all other packets producing no output. The default behaviour is
--sampling-rate=1, which prints every packet.
The sampling rate feature is useful for real-time inspection of an interface
with a high packet rate, or initial inspection of large capture files.","The other approach I'm happy to put some time into is to capture-side sampling just within tcpdump's callback functions (print_packet, dump_packet, dump_packet_with_trunc) by just skipping all processing - either in addition to or instead of print-side sampling?
It wouldn't make any real improvement to processing time, but would at least open the door to a future libpcap-based implementation without needing to change command-line options.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,968,2021-12-14T06:49:50Z,2022-01-17T19:43:59Z,2022-01-17T19:44:36Z,MERGED,True,43,5,7,https://github.com/nats,Add option to parse and print every Nth packet,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/968,https://github.com/guyharris,17,https://github.com/the-tcpdump-group/tcpdump/pull/968#issuecomment-996365342,"New option --sampling-rate=NTH will parse and print every NTH packet, with
all other packets producing no output. The default behaviour is
--sampling-rate=1, which prints every packet.
The sampling rate feature is useful for real-time inspection of an interface
with a high packet rate, or initial inspection of large capture files.","At this point, if you have a need for print-side-only sampling, and only for that, we should just merge this branch and wait for somebody to express a need for capture-side sampling and do that in libpcap, with changes to tcpdump to use the libpcap APIs for it.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,968,2021-12-14T06:49:50Z,2022-01-17T19:43:59Z,2022-01-17T19:44:36Z,MERGED,True,43,5,7,https://github.com/nats,Add option to parse and print every Nth packet,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/968,https://github.com/nats,18,https://github.com/the-tcpdump-group/tcpdump/pull/968#issuecomment-996374298,"New option --sampling-rate=NTH will parse and print every NTH packet, with
all other packets producing no output. The default behaviour is
--sampling-rate=1, which prints every packet.
The sampling rate feature is useful for real-time inspection of an interface
with a high packet rate, or initial inspection of large capture files.","I dont specifically need print-side sampling personally (though as noted I do think there is merit in this PR's behaviour for tcpdump -w test.cap --print-sampling 100). It was  the simplest approach because there's no single callback function for pcap_loop and I didnt want to duplicate the logic across the three functions. That said, if you are happy for a small refactor moving pcap_handler callback into a static global with a single callback for pcap_loop to call its pretty equivalent; something like...
static pcap_handler capture_callback; /* replaces callback local variable */

static void
capture_packet(u_char *user, const struct pcap_pkthdr *h, const u_char *sp)
{
    ++packets_received;
    if (ndo->ndo_capture_sampling && packets_received % ndo->ndo_capture_sampling != 0)
        return;

   /* extract common behaviour from start of callback functions */
    ++packets_captured;
    ++infodelay;

    /* invoke print_packet/dump_packet/dump_packet_with_trunc as per existing behaviour */
   capture_callback(user, h,k sp);

   /* extract common behaviour from end of callback functions */
    --infodelay;
    if (infoprint)
        info(0);
}

?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,968,2021-12-14T06:49:50Z,2022-01-17T19:43:59Z,2022-01-17T19:44:36Z,MERGED,True,43,5,7,https://github.com/nats,Add option to parse and print every Nth packet,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/968,https://github.com/guyharris,19,https://github.com/the-tcpdump-group/tcpdump/pull/968#issuecomment-996385824,"New option --sampling-rate=NTH will parse and print every NTH packet, with
all other packets producing no output. The default behaviour is
--sampling-rate=1, which prints every packet.
The sampling rate feature is useful for real-time inspection of an interface
with a high packet rate, or initial inspection of large capture files.","I dont specifically need print-side sampling (though as noted I do think there is merit in this PR's behaviour for tcpdump -w test.cap --print-sampling 100)

So let's just merge this and, if anybody says they want capture-side sampling, add that in libpcap and add a separate command-line flag to tcpdump to use it.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,968,2021-12-14T06:49:50Z,2022-01-17T19:43:59Z,2022-01-17T19:44:36Z,MERGED,True,43,5,7,https://github.com/nats,Add option to parse and print every Nth packet,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/968,https://github.com/infrastation,20,https://github.com/the-tcpdump-group/tcpdump/pull/968#issuecomment-1006183186,"New option --sampling-rate=NTH will parse and print every NTH packet, with
all other packets producing no output. The default behaviour is
--sampling-rate=1, which prints every packet.
The sampling rate feature is useful for real-time inspection of an interface
with a high packet rate, or initial inspection of large capture files.","@nats, please rebase on the current master branch, update the man page to say that --print-sampling enables --print, squash the commits into one and make the resulting commit message up to date. If you need help doing that, shout.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,968,2021-12-14T06:49:50Z,2022-01-17T19:43:59Z,2022-01-17T19:44:36Z,MERGED,True,43,5,7,https://github.com/nats,Add option to parse and print every Nth packet,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/968,https://github.com/infrastation,21,https://github.com/the-tcpdump-group/tcpdump/pull/968#issuecomment-1006184179,"New option --sampling-rate=NTH will parse and print every NTH packet, with
all other packets producing no output. The default behaviour is
--sampling-rate=1, which prints every packet.
The sampling rate feature is useful for real-time inspection of an interface
with a high packet rate, or initial inspection of large capture files.",Also the timestamp in the first .TH of the man page needs to be updated to indicate a substantial change.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,968,2021-12-14T06:49:50Z,2022-01-17T19:43:59Z,2022-01-17T19:44:36Z,MERGED,True,43,5,7,https://github.com/nats,Add option to parse and print every Nth packet,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/968,https://github.com/infrastation,22,https://github.com/the-tcpdump-group/tcpdump/pull/968#issuecomment-1009186118,"New option --sampling-rate=NTH will parse and print every NTH packet, with
all other packets producing no output. The default behaviour is
--sampling-rate=1, which prints every packet.
The sampling rate feature is useful for real-time inspection of an interface
with a high packet rate, or initial inspection of large capture files.","To add to the above, the change log will also require an entry. Would anybody else like to rebase these changes and to add the missing finish?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,968,2021-12-14T06:49:50Z,2022-01-17T19:43:59Z,2022-01-17T19:44:36Z,MERGED,True,43,5,7,https://github.com/nats,Add option to parse and print every Nth packet,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/968,https://github.com/nats,23,https://github.com/the-tcpdump-group/tcpdump/pull/968#issuecomment-1011905652,"New option --sampling-rate=NTH will parse and print every NTH packet, with
all other packets producing no output. The default behaviour is
--sampling-rate=1, which prints every packet.
The sampling rate feature is useful for real-time inspection of an interface
with a high packet rate, or initial inspection of large capture files.","OK, I will have a look",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,968,2021-12-14T06:49:50Z,2022-01-17T19:43:59Z,2022-01-17T19:44:36Z,MERGED,True,43,5,7,https://github.com/nats,Add option to parse and print every Nth packet,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/968,https://github.com/infrastation,24,https://github.com/the-tcpdump-group/tcpdump/pull/968#issuecomment-1014842402,"New option --sampling-rate=NTH will parse and print every NTH packet, with
all other packets producing no output. The default behaviour is
--sampling-rate=1, which prints every packet.
The sampling rate feature is useful for real-time inspection of an interface
with a high packet rate, or initial inspection of large capture files.",Thank you!,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,969,2021-12-17T06:07:09Z,,2022-01-18T00:54:33Z,OPEN,False,47,28,3,https://github.com/nats,Add --sampling option for capture-side sampling,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/969,https://github.com/nats,1,https://github.com/the-tcpdump-group/tcpdump/pull/969,"New option --sampling NTH for sampling captured packets.
Received packets are counted via new global packets_received.
Captured packets are discarded in new function capture_packet as required,
and passed to existing dump_packet/dump_packet_with_trunc/print_packet.
The -S flag is enabled by default, since relative TCP sequence numbers do
not make a lot of sense when sampling.

CLI long option has been given provisional name of --sampling pending
initial review. print_usage(), and man page will be updated after desired
option name is confirmed.
The filtering is done entirely within tcpdump, but should allow for switching to a libpcap implementation under the same CLI option in the future.
If this is an approach you are happy to go with for now, let me know what long and/or short option name you want  and I will finish up print_usage() and the man page.","New option --sampling NTH for sampling captured packets.
Received packets are counted via new global packets_received.
Captured packets are discarded in new function capture_packet as required,
and passed to existing dump_packet/dump_packet_with_trunc/print_packet.
The -S flag is enabled by default, since relative TCP sequence numbers do
not make a lot of sense when sampling.

CLI long option has been given provisional name of --sampling pending
initial review. print_usage(), and man page will be updated after desired
option name is confirmed.
The filtering is done entirely within tcpdump, but should allow for switching to a libpcap implementation under the same CLI option in the future.
If this is an approach you are happy to go with for now, let me know what long and/or short option name you want  and I will finish up print_usage() and the man page.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,969,2021-12-17T06:07:09Z,,2022-01-18T00:54:33Z,OPEN,False,47,28,3,https://github.com/nats,Add --sampling option for capture-side sampling,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/969,https://github.com/nats,2,https://github.com/the-tcpdump-group/tcpdump/pull/969#issuecomment-996463846,"New option --sampling NTH for sampling captured packets.
Received packets are counted via new global packets_received.
Captured packets are discarded in new function capture_packet as required,
and passed to existing dump_packet/dump_packet_with_trunc/print_packet.
The -S flag is enabled by default, since relative TCP sequence numbers do
not make a lot of sense when sampling.

CLI long option has been given provisional name of --sampling pending
initial review. print_usage(), and man page will be updated after desired
option name is confirmed.
The filtering is done entirely within tcpdump, but should allow for switching to a libpcap implementation under the same CLI option in the future.
If this is an approach you are happy to go with for now, let me know what long and/or short option name you want  and I will finish up print_usage() and the man page.","The automatic -S flag under capture is somewhat nuanced; since if you tcpdump -w test.cap --sampling 100 and later tcpdump -r test.cap  then relative TCP sequence numbers will be using when printing it.
As such it may be preferable to not enable it automatically, and instead just suggest using -S in the man page when printing  sampled captures.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,970,2022-01-09T19:04:55Z,2022-01-10T17:57:13Z,2022-01-10T18:02:30Z,MERGED,True,0,6,1,https://github.com/ton31337,"bgp: Deprecate DPA, ADVERTISER and RCID_PATH path attributes",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/970,https://github.com/ton31337,1,https://github.com/the-tcpdump-group/tcpdump/pull/970,"rfc6938
Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com","rfc6938
Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,970,2022-01-09T19:04:55Z,2022-01-10T17:57:13Z,2022-01-10T18:02:30Z,MERGED,True,0,6,1,https://github.com/ton31337,"bgp: Deprecate DPA, ADVERTISER and RCID_PATH path attributes",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/970,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/970#issuecomment-1009184123,"rfc6938
Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com","Thank you. FYI, this project does not assign any meaning to ""Signed-off-by"".",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,970,2022-01-09T19:04:55Z,2022-01-10T17:57:13Z,2022-01-10T18:02:30Z,MERGED,True,0,6,1,https://github.com/ton31337,"bgp: Deprecate DPA, ADVERTISER and RCID_PATH path attributes",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/970,https://github.com/ton31337,3,https://github.com/the-tcpdump-group/tcpdump/pull/970#issuecomment-1009185858,"rfc6938
Signed-off-by: Donatas Abraitis donatas.abraitis@gmail.com","Thank you. FYI, this project does not assign any meaning to ""Signed-off-by"".

I believe, it's an automatic hook :)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,972,2022-01-21T01:29:44Z,,2022-05-14T19:19:14Z,OPEN,False,1,1,1,https://github.com/martinetd,child_cleanup: reap as many child processes as possible,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/972,https://github.com/martinetd,1,https://github.com/the-tcpdump-group/tcpdump/pull/972,"Hello,
one of our customer reported zombie processes when running tcpdump under load with -C/-z and I've been able to reproduce. Here's a patch suggestion, but feel free to use something else -- waitpid is also mandated by posix so there should be no portability issue (same requirement as wait) but I've only tested this on linux.
Commit message below:
Under load it's possible multiple children have been killed before we start processing the SIGCHILD signal, leaving zombie processes behind everytime we miss a process.
Reap as many processes as possible instead of assuming one handler call = one process like we currently did.
Can be reproduced by running the following commands in parallel:

tcpdump -i lo -w /tmp/test -C 1 -z /usr/bin/true
iperf3 -s
iperf3 -c localhost","Hello,
one of our customer reported zombie processes when running tcpdump under load with -C/-z and I've been able to reproduce. Here's a patch suggestion, but feel free to use something else -- waitpid is also mandated by posix so there should be no portability issue (same requirement as wait) but I've only tested this on linux.
Commit message below:
Under load it's possible multiple children have been killed before we start processing the SIGCHILD signal, leaving zombie processes behind everytime we miss a process.
Reap as many processes as possible instead of assuming one handler call = one process like we currently did.
Can be reproduced by running the following commands in parallel:

tcpdump -i lo -w /tmp/test -C 1 -z /usr/bin/true
iperf3 -s
iperf3 -c localhost",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,972,2022-01-21T01:29:44Z,,2022-05-14T19:19:14Z,OPEN,False,1,1,1,https://github.com/martinetd,child_cleanup: reap as many child processes as possible,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/972,https://github.com/martinetd,2,https://github.com/the-tcpdump-group/tcpdump/pull/972#issuecomment-1031234312,"Hello,
one of our customer reported zombie processes when running tcpdump under load with -C/-z and I've been able to reproduce. Here's a patch suggestion, but feel free to use something else -- waitpid is also mandated by posix so there should be no portability issue (same requirement as wait) but I've only tested this on linux.
Commit message below:
Under load it's possible multiple children have been killed before we start processing the SIGCHILD signal, leaving zombie processes behind everytime we miss a process.
Reap as many processes as possible instead of assuming one handler call = one process like we currently did.
Can be reproduced by running the following commands in parallel:

tcpdump -i lo -w /tmp/test -C 1 -z /usr/bin/true
iperf3 -s
iperf3 -c localhost","Hello,
sorry for being annoying, is there anything I could do to help getting this merged? I'm in no particular hurry, but I tend to forget the PRs I've opened if they don't get any reply in a while so prefer striking when the iron is hot :)
Thanks!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,972,2022-01-21T01:29:44Z,,2022-05-14T19:19:14Z,OPEN,False,1,1,1,https://github.com/martinetd,child_cleanup: reap as many child processes as possible,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/972,https://github.com/martinetd,3,https://github.com/the-tcpdump-group/tcpdump/pull/972#issuecomment-1070401981,"Hello,
one of our customer reported zombie processes when running tcpdump under load with -C/-z and I've been able to reproduce. Here's a patch suggestion, but feel free to use something else -- waitpid is also mandated by posix so there should be no portability issue (same requirement as wait) but I've only tested this on linux.
Commit message below:
Under load it's possible multiple children have been killed before we start processing the SIGCHILD signal, leaving zombie processes behind everytime we miss a process.
Reap as many processes as possible instead of assuming one handler call = one process like we currently did.
Can be reproduced by running the following commands in parallel:

tcpdump -i lo -w /tmp/test -C 1 -z /usr/bin/true
iperf3 -s
iperf3 -c localhost","Hello, It's been a bit over a month so it's time for my next being-the-annoying-guy here.
Once again please tell me if there's anything I can do to help get this merged: this is a real bug that affected one of our customers.
It might not be a huge bug, but leaving zombies around consumes memory and there's no harm in reaping these properly.
Thank you.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,972,2022-01-21T01:29:44Z,,2022-05-14T19:19:14Z,OPEN,False,1,1,1,https://github.com/martinetd,child_cleanup: reap as many child processes as possible,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/972,https://github.com/martinetd,4,https://github.com/the-tcpdump-group/tcpdump/pull/972#issuecomment-1094909219,"Hello,
one of our customer reported zombie processes when running tcpdump under load with -C/-z and I've been able to reproduce. Here's a patch suggestion, but feel free to use something else -- waitpid is also mandated by posix so there should be no portability issue (same requirement as wait) but I've only tested this on linux.
Commit message below:
Under load it's possible multiple children have been killed before we start processing the SIGCHILD signal, leaving zombie processes behind everytime we miss a process.
Reap as many processes as possible instead of assuming one handler call = one process like we currently did.
Can be reproduced by running the following commands in parallel:

tcpdump -i lo -w /tmp/test -C 1 -z /usr/bin/true
iperf3 -s
iperf3 -c localhost","@fxlb @infrastation sorry for the direct mention, would either of you be able to take a look eventually?
It's not a huge deal but I don't like keeping PRs in limbos, if there's anything I can do I'll be happy to update anything.
Thanks!",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,972,2022-01-21T01:29:44Z,,2022-05-14T19:19:14Z,OPEN,False,1,1,1,https://github.com/martinetd,child_cleanup: reap as many child processes as possible,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/972,https://github.com/fxlb,5,https://github.com/the-tcpdump-group/tcpdump/pull/972#issuecomment-1097829456,"Hello,
one of our customer reported zombie processes when running tcpdump under load with -C/-z and I've been able to reproduce. Here's a patch suggestion, but feel free to use something else -- waitpid is also mandated by posix so there should be no portability issue (same requirement as wait) but I've only tested this on linux.
Commit message below:
Under load it's possible multiple children have been killed before we start processing the SIGCHILD signal, leaving zombie processes behind everytime we miss a process.
Reap as many processes as possible instead of assuming one handler call = one process like we currently did.
Can be reproduced by running the following commands in parallel:

tcpdump -i lo -w /tmp/test -C 1 -z /usr/bin/true
iperf3 -s
iperf3 -c localhost","I don't think one test on Linux is enough. There should be tests at least on macOS, some *BSD, Windows.
Is using /usr/bin/true relevant is a test?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,972,2022-01-21T01:29:44Z,,2022-05-14T19:19:14Z,OPEN,False,1,1,1,https://github.com/martinetd,child_cleanup: reap as many child processes as possible,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/972,https://github.com/martinetd,6,https://github.com/the-tcpdump-group/tcpdump/pull/972#issuecomment-1097896580,"Hello,
one of our customer reported zombie processes when running tcpdump under load with -C/-z and I've been able to reproduce. Here's a patch suggestion, but feel free to use something else -- waitpid is also mandated by posix so there should be no portability issue (same requirement as wait) but I've only tested this on linux.
Commit message below:
Under load it's possible multiple children have been killed before we start processing the SIGCHILD signal, leaving zombie processes behind everytime we miss a process.
Reap as many processes as possible instead of assuming one handler call = one process like we currently did.
Can be reproduced by running the following commands in parallel:

tcpdump -i lo -w /tmp/test -C 1 -z /usr/bin/true
iperf3 -s
iperf3 -c localhost","Thanks!
I can setup some BSD to test in the next few days if that helps, but I don't have any macOS or windows around.
The condition to produce zombies is to have multiple children die fast enough so that multiple children deaths happen by the time tcpdump processes the sigchld (new signals aren't sent until we're done processing one); so it doesn't have to be true at all, what matters is producing lots of children quickly. Our user reproduced it with a normal log rotation script.
As far as test goes though, just confirming the signal handler reaps children as normal (doesn't hang, doesn't leave zombies behind for normal usage with single child death per signal) is probably enough -- there's no reason the loop wouldn't work if that does. It looks like to me that some of the CIs here aren't just builds but also run tests -- I assume there's some rotation test in there so it probably at least doesn't hang on tested platforms... Hard to tell for zombies though.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,972,2022-01-21T01:29:44Z,,2022-05-14T19:19:14Z,OPEN,False,1,1,1,https://github.com/martinetd,child_cleanup: reap as many child processes as possible,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/972,https://github.com/infrastation,7,https://github.com/the-tcpdump-group/tcpdump/pull/972#issuecomment-1097905888,"Hello,
one of our customer reported zombie processes when running tcpdump under load with -C/-z and I've been able to reproduce. Here's a patch suggestion, but feel free to use something else -- waitpid is also mandated by posix so there should be no portability issue (same requirement as wait) but I've only tested this on linux.
Commit message below:
Under load it's possible multiple children have been killed before we start processing the SIGCHILD signal, leaving zombie processes behind everytime we miss a process.
Reap as many processes as possible instead of assuming one handler call = one process like we currently did.
Can be reproduced by running the following commands in parallel:

tcpdump -i lo -w /tmp/test -C 1 -z /usr/bin/true
iperf3 -s
iperf3 -c localhost","""Child process"" is the proper term here.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,972,2022-01-21T01:29:44Z,,2022-05-14T19:19:14Z,OPEN,False,1,1,1,https://github.com/martinetd,child_cleanup: reap as many child processes as possible,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/972,https://github.com/martinetd,8,https://github.com/the-tcpdump-group/tcpdump/pull/972#issuecomment-1097980343,"Hello,
one of our customer reported zombie processes when running tcpdump under load with -C/-z and I've been able to reproduce. Here's a patch suggestion, but feel free to use something else -- waitpid is also mandated by posix so there should be no portability issue (same requirement as wait) but I've only tested this on linux.
Commit message below:
Under load it's possible multiple children have been killed before we start processing the SIGCHILD signal, leaving zombie processes behind everytime we miss a process.
Reap as many processes as possible instead of assuming one handler call = one process like we currently did.
Can be reproduced by running the following commands in parallel:

tcpdump -i lo -w /tmp/test -C 1 -z /usr/bin/true
iperf3 -s
iperf3 -c localhost","Sorry for the poor naming - I didn't realize. I've renamed the subject, and amended commit message.
I had a freeBSD VM laying around, and was able to easily confirm both the problem and solution:
from compiled master branch:
# ./tcpdump -i lo0 -w /tmp/trace -C 1 -z /usr/bin/true
# iperf3 -s
# iperf3 -c localhost
# ps -edfww
3322 u0  S+   0:06.77 `-- USER=root LOGNAME=root HOME=/root SHELL=/bin/csh BLOCKSIZE=K MAIL=/var/mail/root MM_CHARSET=UTF-8 LANG=C.UTF-8 PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:/root/bin TERM=vt100 HOSTTYPE=FreeBSD VENDOR=amd OSTYPE=FreeBSD MACHTYPE=x86_64 SHLVL=1 PWD=/root/tcpdump GROUP=wheel HOST=freebsd EDITOR=vi PAGER=less ./tcpdump -i lo0 -w /tmp/trace -C 1 -z /usr/bin/true
3567 u0  Z<+  0:00.01   `--  <defunct>

After updating to refs/pull/972/merge, I couldn't reproduce anymore. I've confirmed pid growth so tcpdump forked and reaped its child processes successfully.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,972,2022-01-21T01:29:44Z,,2022-05-14T19:19:14Z,OPEN,False,1,1,1,https://github.com/martinetd,child_cleanup: reap as many child processes as possible,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/972,https://github.com/martinetd,9,https://github.com/the-tcpdump-group/tcpdump/pull/972#issuecomment-1113267885,"Hello,
one of our customer reported zombie processes when running tcpdump under load with -C/-z and I've been able to reproduce. Here's a patch suggestion, but feel free to use something else -- waitpid is also mandated by posix so there should be no portability issue (same requirement as wait) but I've only tested this on linux.
Commit message below:
Under load it's possible multiple children have been killed before we start processing the SIGCHILD signal, leaving zombie processes behind everytime we miss a process.
Reap as many processes as possible instead of assuming one handler call = one process like we currently did.
Can be reproduced by running the following commands in parallel:

tcpdump -i lo -w /tmp/test -C 1 -z /usr/bin/true
iperf3 -s
iperf3 -c localhost","Hello,
it's been another couple of weeks, so I'm going to be annoying again.
I still don't have a windows, but the comment above the child_cleanup function explicitly states that On windows, we do not use a fork, so we do not care less about waiting a child processes to die with ifdefs that I read as the function isn't compiled on windows, so I don't think this particularly requires testing there.
It works on linux and freeBSD, both of which exhibit the problem without the patch and no longer do after patching.
Is there anything else you're waiting for?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,972,2022-01-21T01:29:44Z,,2022-05-14T19:19:14Z,OPEN,False,1,1,1,https://github.com/martinetd,child_cleanup: reap as many child processes as possible,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/972,https://github.com/fxlb,10,https://github.com/the-tcpdump-group/tcpdump/pull/972#issuecomment-1126797869,"Hello,
one of our customer reported zombie processes when running tcpdump under load with -C/-z and I've been able to reproduce. Here's a patch suggestion, but feel free to use something else -- waitpid is also mandated by posix so there should be no portability issue (same requirement as wait) but I've only tested this on linux.
Commit message below:
Under load it's possible multiple children have been killed before we start processing the SIGCHILD signal, leaving zombie processes behind everytime we miss a process.
Reap as many processes as possible instead of assuming one handler call = one process like we currently did.
Can be reproduced by running the following commands in parallel:

tcpdump -i lo -w /tmp/test -C 1 -z /usr/bin/true
iperf3 -s
iperf3 -c localhost",Does anyone see a problem with this change?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,973,2022-01-24T08:24:31Z,2022-01-27T18:21:13Z,2022-01-27T19:09:56Z,CLOSED,False,1,0,1,https://github.com/ton31337,git: Ignore instrument_functions.nm in .gitignore,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/973,https://github.com/ton31337,1,https://github.com/the-tcpdump-group/tcpdump/pull/973,Related commit 6d85463.,Related commit 6d85463.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,973,2022-01-24T08:24:31Z,2022-01-27T18:21:13Z,2022-01-27T19:09:56Z,CLOSED,False,1,0,1,https://github.com/ton31337,git: Ignore instrument_functions.nm in .gitignore,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/973,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/973#issuecomment-1019852120,Related commit 6d85463.,Thanks. Keep open but on wait because tcpdump_instrument_functions.nm should disappear in a next step.,True,{'THUMBS_UP': ['https://github.com/ton31337']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,973,2022-01-24T08:24:31Z,2022-01-27T18:21:13Z,2022-01-27T19:09:56Z,CLOSED,False,1,0,1,https://github.com/ton31337,git: Ignore instrument_functions.nm in .gitignore,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/973,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/973#issuecomment-1023515328,Related commit 6d85463.,No more needed with 65f4c88.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,974,2022-01-24T08:46:03Z,2022-02-12T16:37:38Z,2022-02-12T18:36:48Z,MERGED,True,5,3,4,https://github.com/ton31337,bgp: Adopt to rfc9003 (Extended Shutdown Message),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/974,https://github.com/ton31337,1,https://github.com/the-tcpdump-group/tcpdump/pull/974,,,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,974,2022-01-24T08:46:03Z,2022-02-12T16:37:38Z,2022-02-12T18:36:48Z,MERGED,True,5,3,4,https://github.com/ton31337,bgp: Adopt to rfc9003 (Extended Shutdown Message),1,[],https://github.com/the-tcpdump-group/tcpdump/pull/974,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/974#issuecomment-1037294516,,I have followed the spec and the code and this change looks correct. Thank you.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,976,2022-02-10T13:14:17Z,2022-04-03T09:36:32Z,2022-04-03T09:36:40Z,MERGED,True,57,0,4,https://github.com/deiger,Geneve: update format_opt_class,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/976,https://github.com/deiger,1,https://github.com/the-tcpdump-group/tcpdump/pull/976,Per https://www.iana.org/assignments/nvo3/nvo3.xhtml,Per https://www.iana.org/assignments/nvo3/nvo3.xhtml,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,976,2022-02-10T13:14:17Z,2022-04-03T09:36:32Z,2022-04-03T09:36:40Z,MERGED,True,57,0,4,https://github.com/deiger,Geneve: update format_opt_class,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/976,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/976#issuecomment-1036157790,Per https://www.iana.org/assignments/nvo3/nvo3.xhtml,The change looks good. Do you have an example packet capture file with a vendor-specific option class?,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,976,2022-02-10T13:14:17Z,2022-04-03T09:36:32Z,2022-04-03T09:36:40Z,MERGED,True,57,0,4,https://github.com/deiger,Geneve: update format_opt_class,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/976,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/976#issuecomment-1036165865,Per https://www.iana.org/assignments/nvo3/nvo3.xhtml,The first line of the commit message should be : Geneve: Update format_opt_class,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,976,2022-02-10T13:14:17Z,2022-04-03T09:36:32Z,2022-04-03T09:36:40Z,MERGED,True,57,0,4,https://github.com/deiger,Geneve: update format_opt_class,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/976,https://github.com/deiger,4,https://github.com/the-tcpdump-group/tcpdump/pull/976#issuecomment-1079938108,Per https://www.iana.org/assignments/nvo3/nvo3.xhtml,"The change looks good. Do you have an example packet capture file with a vendor-specific option class?

Sorry for the late reply. Here is a sample packet:
0000   42 01 c0 a8 64 03 42 01 c0 a8 64 fe 08 00 45 00   B...d.B...d...E.
0010   00 74 00 00 40 00 02 11 2e 27 c0 a8 64 fe c0 a8   .t..@....'..d...
0020   64 03 f0 a3 17 c1 00 60 00 00 0a 00 08 00 00 00   d......`........
0030   00 00 01 32 01 01 80 00 00 d1 01 32 02 04 08 00   ...2.......2....
0040   00 0d c0 a8 64 02 00 00 00 00 00 00 00 00 01 32   ....d..........2
0050   03 02 00 00 00 00 00 00 12 34 45 00 00 28 12 36   .........4E..(.6
0060   00 00 40 06 1f 46 c0 a8 64 02 c0 a8 64 01 0b 5b   ..@..F..d...d..[
0070   1f 90 6a d2 56 30 50 9f ba 54 50 00 02 00 6d ae   ..j.V0P..TP...m.
0080   00 00                                             ..

The Geneve header is from 002a to 0059.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,976,2022-02-10T13:14:17Z,2022-04-03T09:36:32Z,2022-04-03T09:36:40Z,MERGED,True,57,0,4,https://github.com/deiger,Geneve: update format_opt_class,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/976,https://github.com/infrastation,5,https://github.com/the-tcpdump-group/tcpdump/pull/976#issuecomment-1084751760,Per https://www.iana.org/assignments/nvo3/nvo3.xhtml,"Thank you. Could you please prepare a pcap file with a single packet with the new option, and add a new test for the new code path (see tests/TESTLIST)?",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,976,2022-02-10T13:14:17Z,2022-04-03T09:36:32Z,2022-04-03T09:36:40Z,MERGED,True,57,0,4,https://github.com/deiger,Geneve: update format_opt_class,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/976,https://github.com/deiger,6,https://github.com/the-tcpdump-group/tcpdump/pull/976#issuecomment-1084910301,Per https://www.iana.org/assignments/nvo3/nvo3.xhtml,"Thank you. Could you please prepare a pcap file with a single packet with the new option, and add a new test for the new code path (see tests/TESTLIST)?

Added.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,976,2022-02-10T13:14:17Z,2022-04-03T09:36:32Z,2022-04-03T09:36:40Z,MERGED,True,57,0,4,https://github.com/deiger,Geneve: update format_opt_class,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/976,https://github.com/infrastation,7,https://github.com/the-tcpdump-group/tcpdump/pull/976#issuecomment-1086823115,Per https://www.iana.org/assignments/nvo3/nvo3.xhtml,Thank you.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,978,2022-03-02T16:42:11Z,2022-03-03T03:18:23Z,2022-03-03T08:40:26Z,CLOSED,False,1,0,1,https://github.com/adventureloop,Add suggested fix for CVE-2018-19519,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/978,https://github.com/adventureloop,1,https://github.com/the-tcpdump-group/tcpdump/pull/978,"There is a buffer read in print-hncp.c error due to a lack of initialisation of the buffer.
Fix my initialising the buffer with a null byte as suggested in the write up of the
discoverer of the problem:
""Initialize buf[0] to '\0' in 'print_prefix'.
buf[0] = '\0';
(Just as print-cnfp.c and print-bgp.c do.)""
https://github.com/zyingp/temp/blob/master/tcpdump.md","There is a buffer read in print-hncp.c error due to a lack of initialisation of the buffer.
Fix my initialising the buffer with a null byte as suggested in the write up of the
discoverer of the problem:
""Initialize buf[0] to '\0' in 'print_prefix'.
buf[0] = '\0';
(Just as print-cnfp.c and print-bgp.c do.)""
https://github.com/zyingp/temp/blob/master/tcpdump.md",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,978,2022-03-02T16:42:11Z,2022-03-03T03:18:23Z,2022-03-03T08:40:26Z,CLOSED,False,1,0,1,https://github.com/adventureloop,Add suggested fix for CVE-2018-19519,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/978,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/978#issuecomment-1057193033,"There is a buffer read in print-hncp.c error due to a lack of initialisation of the buffer.
Fix my initialising the buffer with a null byte as suggested in the write up of the
discoverer of the problem:
""Initialize buf[0] to '\0' in 'print_prefix'.
buf[0] = '\0';
(Just as print-cnfp.c and print-bgp.c do.)""
https://github.com/zyingp/temp/blob/master/tcpdump.md",See issue #763.,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,978,2022-03-02T16:42:11Z,2022-03-03T03:18:23Z,2022-03-03T08:40:26Z,CLOSED,False,1,0,1,https://github.com/adventureloop,Add suggested fix for CVE-2018-19519,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/978,https://github.com/guyharris,3,https://github.com/the-tcpdump-group/tcpdump/pull/978#issuecomment-1057625373,"There is a buffer read in print-hncp.c error due to a lack of initialisation of the buffer.
Fix my initialising the buffer with a null byte as suggested in the write up of the
discoverer of the problem:
""Initialize buf[0] to '\0' in 'print_prefix'.
buf[0] = '\0';
(Just as print-cnfp.c and print-bgp.c do.)""
https://github.com/zyingp/temp/blob/master/tcpdump.md","""The problem"" no longer exists in the main branch or the 4.99 branch, so it's already fixed.
The test pcap file never makes it past libpcap's tests, so it can't be used to test unless the packet headers are fixed.  (As I've said on a number of occasions before: if you want to test tcpdump, rather than libpcap, DO NOT fuzz the packet headers in a way that modifies the captured length, or that modifies the on-the-network length so that it becomes < the captured length.)",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,978,2022-03-02T16:42:11Z,2022-03-03T03:18:23Z,2022-03-03T08:40:26Z,CLOSED,False,1,0,1,https://github.com/adventureloop,Add suggested fix for CVE-2018-19519,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/978,https://github.com/guyharris,4,https://github.com/the-tcpdump-group/tcpdump/pull/978#issuecomment-1057717467,"There is a buffer read in print-hncp.c error due to a lack of initialisation of the buffer.
Fix my initialising the buffer with a null byte as suggested in the write up of the
discoverer of the problem:
""Initialize buf[0] to '\0' in 'print_prefix'.
buf[0] = '\0';
(Just as print-cnfp.c and print-bgp.c do.)""
https://github.com/zyingp/temp/blob/master/tcpdump.md","The bug is present in 4.9.x releases prior to 4.9.3; it's fixed in 4.9.3, and is fixed in all releases after 4.9.3, so it's fixed in the current release and earlier 4.99.x releases.
It's also present in 4.8.1, but there's no 4.8.x release in which it's fixed; anybody using 4.8.x will need to back port the fix or upgrade to 4.9.3 or later.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,978,2022-03-02T16:42:11Z,2022-03-03T03:18:23Z,2022-03-03T08:40:26Z,CLOSED,False,1,0,1,https://github.com/adventureloop,Add suggested fix for CVE-2018-19519,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/978,https://github.com/adventureloop,5,https://github.com/the-tcpdump-group/tcpdump/pull/978#issuecomment-1057797070,"There is a buffer read in print-hncp.c error due to a lack of initialisation of the buffer.
Fix my initialising the buffer with a null byte as suggested in the write up of the
discoverer of the problem:
""Initialize buf[0] to '\0' in 'print_prefix'.
buf[0] = '\0';
(Just as print-cnfp.c and print-bgp.c do.)""
https://github.com/zyingp/temp/blob/master/tcpdump.md","Thanks for the response, I found this fix in a downstream vendors tree as a part of the process of upstreaming changes. I'm sorry this seems to be a continuing fight against people trying to fuzz tcpdump.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,978,2022-03-02T16:42:11Z,2022-03-03T03:18:23Z,2022-03-03T08:40:26Z,CLOSED,False,1,0,1,https://github.com/adventureloop,Add suggested fix for CVE-2018-19519,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/978,https://github.com/guyharris,6,https://github.com/the-tcpdump-group/tcpdump/pull/978#issuecomment-1057806017,"There is a buffer read in print-hncp.c error due to a lack of initialisation of the buffer.
Fix my initialising the buffer with a null byte as suggested in the write up of the
discoverer of the problem:
""Initialize buf[0] to '\0' in 'print_prefix'.
buf[0] = '\0';
(Just as print-cnfp.c and print-bgp.c do.)""
https://github.com/zyingp/temp/blob/master/tcpdump.md","The only problem with people fuzzing tcpdump is when they fuzz the pcap file record headers in such a way that causes the capture to get an error at the libpcap layer, meaning that tcpdump doesn't try to dissect the packet and no bugs are revealed by the fuzzing - all the fuzzing does, in the packet with the fuzzed record header, is indicate that libpcap is doing its job correctly.
It's probably best if fuzzers limit their fuzzing to the packet contents; at least for pcap files, the vast majority of bugs are likely to be in tcpdump, not libpcap, so whatever libpcap bugs aren't caught by fuzzing only the packet contents are probably more than made up for by tcpdump bugs caught by the fuzzing because the record headers weren't fuzzed and thus didn't cause tcpdump to give up on the capture file.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,980,2022-03-03T09:04:01Z,,2022-03-03T09:04:01Z,OPEN,False,1,6,1,https://github.com/ydroneaud,"OpenSSL_add_all_algorithms() is deprecated since OpenSSL 1.1.0, use it accordingly",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/980,https://github.com/ydroneaud,1,https://github.com/the-tcpdump-group/tcpdump/pull/980,"OPENSSL_API_COMPAT is to be set by the module including OpenSSL header to request a certain API level compatibility, and starting with OpenSSL 3, it's no more defined by OpenSSL header to the default API level.
OPENSSL_VERSION_NUMBER must be used instead.
Fixes #977","OPENSSL_API_COMPAT is to be set by the module including OpenSSL header to request a certain API level compatibility, and starting with OpenSSL 3, it's no more defined by OpenSSL header to the default API level.
OPENSSL_VERSION_NUMBER must be used instead.
Fixes #977",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,985,2022-03-31T23:00:55Z,2022-03-31T23:11:27Z,2022-03-31T23:11:27Z,CLOSED,False,28,12,4,https://github.com/jech,babel v4viav6,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/985,https://github.com/jech,1,https://github.com/the-tcpdump-group/tcpdump/pull/985,"Babel: update references
Babel: add support for draft-ietf-babel-v4viav6
Babel: add test for draft-ietf-babel-v4viav6","Babel: update references
Babel: add support for draft-ietf-babel-v4viav6
Babel: add test for draft-ietf-babel-v4viav6",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,986,2022-03-31T23:29:24Z,,2022-05-31T12:07:41Z,OPEN,False,50,19,4,https://github.com/jech,RFC 9229: Babel v4-via-v6,3,[],https://github.com/the-tcpdump-group/tcpdump/pull/986,https://github.com/jech,1,https://github.com/the-tcpdump-group/tcpdump/pull/986,This adds support for displaying routes announced according to RFC 9229 .,This adds support for displaying routes announced according to RFC 9229 .,True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,987,2022-04-04T10:59:46Z,2022-04-04T22:48:27Z,2022-04-04T23:00:45Z,CLOSED,False,115,35,12,https://github.com/fenner,"Add support for BFD and Hard Reset notifications, and GR N flag",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/987,https://github.com/fenner,1,https://github.com/the-tcpdump-group/tcpdump/pull/987,"Add support for the Hard Reset notifications and the corresponding
N flag in Graceful Restart capability advertisement, per RFC8538.
Add the BFD cease notification subcode assigned by IANA.
This value is an early assignment for an in-progress standard.
I don't know what the release plan is, so I developed this on the
4.99 branch.  If it should only go into master, I'm happy to rebase
it properly, just let me know.","Add support for the Hard Reset notifications and the corresponding
N flag in Graceful Restart capability advertisement, per RFC8538.
Add the BFD cease notification subcode assigned by IANA.
This value is an early assignment for an in-progress standard.
I don't know what the release plan is, so I developed this on the
4.99 branch.  If it should only go into master, I'm happy to rebase
it properly, just let me know.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,987,2022-04-04T10:59:46Z,2022-04-04T22:48:27Z,2022-04-04T23:00:45Z,CLOSED,False,115,35,12,https://github.com/fenner,"Add support for BFD and Hard Reset notifications, and GR N flag",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/987,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/987#issuecomment-1087931718,"Add support for the Hard Reset notifications and the corresponding
N flag in Graceful Restart capability advertisement, per RFC8538.
Add the BFD cease notification subcode assigned by IANA.
This value is an early assignment for an in-progress standard.
I don't know what the release plan is, so I developed this on the
4.99 branch.  If it should only go into master, I'm happy to rebase
it properly, just let me know.","I'm happy to rebase it properly, just let me know.

Yes, new code must go in the master branch.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,987,2022-04-04T10:59:46Z,2022-04-04T22:48:27Z,2022-04-04T23:00:45Z,CLOSED,False,115,35,12,https://github.com/fenner,"Add support for BFD and Hard Reset notifications, and GR N flag",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/987,https://github.com/fenner,3,https://github.com/the-tcpdump-group/tcpdump/pull/987#issuecomment-1088085728,"Add support for the Hard Reset notifications and the corresponding
N flag in Graceful Restart capability advertisement, per RFC8538.
Add the BFD cease notification subcode assigned by IANA.
This value is an early assignment for an in-progress standard.
I don't know what the release plan is, so I developed this on the
4.99 branch.  If it should only go into master, I'm happy to rebase
it properly, just let me know.","Sorry that I don't know how to replace a pull request, so I opened a new one at #988",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,987,2022-04-04T10:59:46Z,2022-04-04T22:48:27Z,2022-04-04T23:00:45Z,CLOSED,False,115,35,12,https://github.com/fenner,"Add support for BFD and Hard Reset notifications, and GR N flag",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/987,https://github.com/infrastation,4,https://github.com/the-tcpdump-group/tcpdump/pull/987#issuecomment-1088095007,"Add support for the Hard Reset notifications and the corresponding
N flag in Graceful Restart capability advertisement, per RFC8538.
Add the BFD cease notification subcode assigned by IANA.
This value is an early assignment for an in-progress standard.
I don't know what the release plan is, so I developed this on the
4.99 branch.  If it should only go into master, I'm happy to rebase
it properly, just let me know.","As far as I know, the current implementation of GitHub does not allow to change the source or the destination branch of a pull request after it has been created.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,988,2022-04-04T22:48:02Z,,2022-04-04T22:48:02Z,OPEN,False,110,31,12,https://github.com/fenner,"Add support for BFD and Hard Reset notifications, and GR N flag",1,[],https://github.com/the-tcpdump-group/tcpdump/pull/988,https://github.com/fenner,1,https://github.com/the-tcpdump-group/tcpdump/pull/988,"Add support for the Hard Reset notifications and the corresponding
N flag in Graceful Restart capability advertisement, per RFC8538.
Add the BFD cease notification subcode assigned by IANA.
This value is an early assignment for an in-progress standard.","Add support for the Hard Reset notifications and the corresponding
N flag in Graceful Restart capability advertisement, per RFC8538.
Add the BFD cease notification subcode assigned by IANA.
This value is an early assignment for an in-progress standard.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,989,2022-04-05T01:27:29Z,2022-04-05T16:20:43Z,2022-04-06T16:53:37Z,MERGED,True,12,0,3,https://github.com/fenner,Add pcap files to exercise corner cases for BGP shutdown message printer,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/989,https://github.com/fenner,1,https://github.com/the-tcpdump-group/tcpdump/pull/989,"3 new tests to make sure to exercise the BGP shutdown message printer:

A packet with more data than the length provides for
A packet that has a shutdown message with zero data
A packet whose shutdown message length is longer than the remaining data in the notification

I noticed these cases when porting my Hard Reset code to master, and wanted to make sure to have test cases so that the Hard Reset changes don't break these corner cases.","3 new tests to make sure to exercise the BGP shutdown message printer:

A packet with more data than the length provides for
A packet that has a shutdown message with zero data
A packet whose shutdown message length is longer than the remaining data in the notification

I noticed these cases when porting my Hard Reset code to master, and wanted to make sure to have test cases so that the Hard Reset changes don't break these corner cases.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,989,2022-04-05T01:27:29Z,2022-04-05T16:20:43Z,2022-04-06T16:53:37Z,MERGED,True,12,0,3,https://github.com/fenner,Add pcap files to exercise corner cases for BGP shutdown message printer,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/989,https://github.com/fxlb,2,https://github.com/the-tcpdump-group/tcpdump/pull/989#issuecomment-1088369641,"3 new tests to make sure to exercise the BGP shutdown message printer:

A packet with more data than the length provides for
A packet that has a shutdown message with zero data
A packet whose shutdown message length is longer than the remaining data in the notification

I noticed these cases when porting my Hard Reset code to master, and wanted to make sure to have test cases so that the Hard Reset changes don't break these corner cases.","Thanks.


A packet with more data than the length provides for
A packet that has a shutdown message with zero data
A packet whose shutdown message length is longer than the remaining data in the notification


I suggest adding these informations in the commit message with a git commit --amend and git push -f.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,989,2022-04-05T01:27:29Z,2022-04-05T16:20:43Z,2022-04-06T16:53:37Z,MERGED,True,12,0,3,https://github.com/fenner,Add pcap files to exercise corner cases for BGP shutdown message printer,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/989,https://github.com/fxlb,3,https://github.com/the-tcpdump-group/tcpdump/pull/989#issuecomment-1088966047,"3 new tests to make sure to exercise the BGP shutdown message printer:

A packet with more data than the length provides for
A packet that has a shutdown message with zero data
A packet whose shutdown message length is longer than the remaining data in the notification

I noticed these cases when porting my Hard Reset code to master, and wanted to make sure to have test cases so that the Hard Reset changes don't break these corner cases.","Merged, thanks!",True,{'THUMBS_UP': ['https://github.com/fenner']}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,990,2022-04-13T09:20:48Z,,2022-04-17T22:04:57Z,OPEN,False,2063,0,15,https://github.com/ryandoyle,TLS: Initial support for printing TLS PDUs,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/990,https://github.com/ryandoyle,1,https://github.com/the-tcpdump-group/tcpdump/pull/990,"Supports printing plain text parts of TLS. Basic record layer printing is
supported as well as more complex printing of handshake and alert protocols,
specifically ClientHello and ServerHello - these will print interesting parts
of TLS extensions like ALPN, SNI and the underlying TLS version negotiated.
As we don't keep state and TLS is stateful, this printer does assume/
is limited by this, specifically:

TLS version is printed as per record layer version. In the case of TLS 1.3,
the record layer is set to TLS 1.2, and the supported_versions extension is
used to negotiate the actual version used.
Alert and Handshake protocol messages can be plain text or encrypted,
depending on if a crypto context is established. This printer doesn't know
this, so we try to detect it and print ""(likely encrypted)"".","Supports printing plain text parts of TLS. Basic record layer printing is
supported as well as more complex printing of handshake and alert protocols,
specifically ClientHello and ServerHello - these will print interesting parts
of TLS extensions like ALPN, SNI and the underlying TLS version negotiated.
As we don't keep state and TLS is stateful, this printer does assume/
is limited by this, specifically:

TLS version is printed as per record layer version. In the case of TLS 1.3,
the record layer is set to TLS 1.2, and the supported_versions extension is
used to negotiate the actual version used.
Alert and Handshake protocol messages can be plain text or encrypted,
depending on if a crypto context is established. This printer doesn't know
this, so we try to detect it and print ""(likely encrypted)"".",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,990,2022-04-13T09:20:48Z,,2022-04-17T22:04:57Z,OPEN,False,2063,0,15,https://github.com/ryandoyle,TLS: Initial support for printing TLS PDUs,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/990,https://github.com/infrastation,2,https://github.com/the-tcpdump-group/tcpdump/pull/990#issuecomment-1098114431,"Supports printing plain text parts of TLS. Basic record layer printing is
supported as well as more complex printing of handshake and alert protocols,
specifically ClientHello and ServerHello - these will print interesting parts
of TLS extensions like ALPN, SNI and the underlying TLS version negotiated.
As we don't keep state and TLS is stateful, this printer does assume/
is limited by this, specifically:

TLS version is printed as per record layer version. In the case of TLS 1.3,
the record layer is set to TLS 1.2, and the supported_versions extension is
used to negotiate the actual version used.
Alert and Handshake protocol messages can be plain text or encrypted,
depending on if a crypto context is established. This printer doesn't know
this, so we try to detect it and print ""(likely encrypted)"".","Thank you for preparing these changes. Apparently, uint does not belong to the Windows C compiler vernacular. The type needs to be either u_int or unsigned.",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,990,2022-04-13T09:20:48Z,,2022-04-17T22:04:57Z,OPEN,False,2063,0,15,https://github.com/ryandoyle,TLS: Initial support for printing TLS PDUs,1,[],https://github.com/the-tcpdump-group/tcpdump/pull/990,https://github.com/ryandoyle,3,https://github.com/the-tcpdump-group/tcpdump/pull/990#issuecomment-1098788655,"Supports printing plain text parts of TLS. Basic record layer printing is
supported as well as more complex printing of handshake and alert protocols,
specifically ClientHello and ServerHello - these will print interesting parts
of TLS extensions like ALPN, SNI and the underlying TLS version negotiated.
As we don't keep state and TLS is stateful, this printer does assume/
is limited by this, specifically:

TLS version is printed as per record layer version. In the case of TLS 1.3,
the record layer is set to TLS 1.2, and the supported_versions extension is
used to negotiate the actual version used.
Alert and Handshake protocol messages can be plain text or encrypted,
depending on if a crypto context is established. This printer doesn't know
this, so we try to detect it and print ""(likely encrypted)"".","Cheers @infrastation, fixed 👍",True,{}
the-tcpdump-group/tcpdump,https://github.com/the-tcpdump-group/tcpdump,991,2022-04-14T08:23:39Z,,2022-04-17T22:01:25Z,OPEN,False,173,2,5,https://github.com/eamonjd,ZTP option (DHCPv6) and SZTP (DHCPv4 and v6) support,2,[],https://github.com/the-tcpdump-group/tcpdump/pull/991,https://github.com/eamonjd,1,https://github.com/the-tcpdump-group/tcpdump/pull/991,"Summary

Added ZTP DHCPv6 option BOOTFILE_URL support (previously only equivalent DHCPv4 option was supported) (RFC5970)
Added SZTP option support for both DHCPv4 and DHCPv6 requests and responses. (RFC8572)
Added DHCPv6 user-class  option (RFC8415)
As the existing DHCPv4 and DHCPv6 tcpdump output are not consistent with each other, these changes follow this convention and adopts the respective style for DHCPv4 and DHCPv6.

Details
A) Rather than Unknown (143, output now specifies SZTP-Redirect (143)
Added support for SZTP-Redirect Option 143 on requests
15:26:16.092235 00:00:44:01:00:00 (oui Unknown) > Broadcast, ethertype IPv4 (0x0800), length 342: (tos 0x10, ttl 128, id 0, offset 0, flags [none], proto UDP (17), length 328)
0.0.0.0.bootpc > 255.255.255.255.bootps: BOOTP/DHCP, Request from 00:00:44:01:00:00 (oui Unknown), length 300, xid 0xba761038, Flags [none]
Client-Ethernet-Address 00:00:44:01:00:00 (oui Unknown)
Vendor-rfc1048 Extensions
Magic Cookie 0x63825363
DHCP-Message (53), length 1: Discover
Parameter-Request (55), length 10:
MTU (26), Subnet-Mask (1), BR (28), Default-Gateway (3)
Domain-Name (15), Domain-Name-Server (6), LOG (7), Hostname (12)
Unknown (143), Classless-Static-Route (121)
Vendor-Class (60), length 6: ""Arista""
Client-ID (61), length 6: ""^@d^A^@^@""
15:25:54.957572 00:00:44:01:00:00 (oui Unknown) > Broadcast, ethertype IPv4 (0x0800), length 342: (tos 0x10, ttl 128, id 0, offset 0, flags [none], proto UDP
(17), length 328)
0.0.0.0.bootpc > 255.255.255.255.bootps: BOOTP/DHCP, Request from 00:00:44:01:00:00 (oui Unknown), length 300, xid 0xd53905c, Flags [none]
Client-Ethernet-Address 00:00:44:01:00:00 (oui Unknown)
Vendor-rfc1048 Extensions
Magic Cookie 0x63825363
DHCP-Message (53), length 1: Request
Server-ID (54), length 4: 10.10.0.2
Requested-IP (50), length 4: 10.10.0.4
Parameter-Request (55), length 10:
MTU (26), Subnet-Mask (1), BR (28), Default-Gateway (3)
Domain-Name (15), Domain-Name-Server (6), LOG (7), Hostname (12)
SZTP-Redirect (143), Classless-Static-Route (121)
Vendor-Class (60), length 6: ""Arista""
Client-ID (61), length 6: ""^@d^A^@^@""
B) Previously tcpdump outputted the binary values, it now shows the inidividual values in text format, (T143 Option 143 -> SZTP-Redirect (143)), e.g.
15:26:16.099544 IP (tos 0x10, ttl 128, id 0, offset 0, flags [none], proto UDP (17), length 412)
10.10.0.2.bootps > 10.10.0.4.bootpc: BOOTP/DHCP, Reply, length 384, xid 0xba761038, Flags [none]
Your-IP 10.10.0.4
Client-Ethernet-Address 00:00:44:01:00:00 (oui Unknown)
Vendor-rfc1048 Extensions
Magic Cookie 0x63825363
DHCP-Message Option 53, length 1: ACK
Server-ID Option 54, length 4: 10.10.0.2
Lease-Time Option 51, length 4: 28778
MTU Option 26, length 2: 1500
Subnet-Mask Option 1, length 4: 255.255.0.0
Default-Gateway Option 3, length 4: 10.10.0.1
Domain-Name Option 15, length 18: ""aristanetworks.com""
Domain-Name-Server Option 6, length 4: 10.10.0.1
T143 Option 143, length 84: 1730676,1953526586,791638906,1953509678,1685026670,1819238756,778268525,1140852,1953526586,791621936,774975534,8083333
12,594048116,1886599727,794505776,808532532,943075386,876099120,976894008,943217978,942684208
15:26:16.099544 4e:ae:9c:94:66:0d (oui Unknown) > 00:00:44:01:00:00 (oui Unknown), ethertype IPv4 (0x0800), length 426: (tos 0x10, ttl 128, id 0, offset 0, fl
ags [none], proto UDP (17), length 412)
10.10.0.2.bootps > 10.10.0.4.bootpc: BOOTP/DHCP, Reply, length 384, xid 0xba761038, Flags [none]
Your-IP 10.10.0.4
Client-Ethernet-Address 00:00:44:01:00:00 (oui Unknown)
Vendor-rfc1048 Extensions
Magic Cookie 0x63825363
DHCP-Message (53), length 1: ACK
Server-ID (54), length 4: 10.10.0.2
Lease-Time (51), length 4: 28778
MTU (26), length 2: 1500
Subnet-Mask (1), length 4: 255.255.0.0
Default-Gateway (3), length 4: 10.10.0.1
Domain-Name (15), length 18: ""aristanetworks.com""
Domain-Name-Server (6), length 4: 10.10.0.1
SZTP-Redirect (143), length 84:
instance#1: ""https://sztp1.download.com/"", length 26
instance#2: ""https://10.10.0.0/"", length 17
instance#3: ""https://[2001:4860:4860::8888]:8080"", length 35
C) In DHCPv6 solicit requests, rather than opt_59, now use Bootfile-URL, e.g.
19:24:08.422125 IP6 (flowlabel 0x1de3e, hlim 1, next-header UDP (17) payload length: 199) fe80::2edd:e9ff:fec9:3288.dhcpv6-client > ff02::1:2.dhcpv6-server: 
[udp sum ok] dhcp6 solicit (xid=422a14 (vendor-specific-info) (client-ID hwaddr/time type 1 time 700062283 2cdde9c93288) (option-request opt_59 DNS-search-li
st DNS-server) (elapsed-time 725) (user-class) (IA_NA IAID:3922277000 T1:3600 T2:5400))
19:24:08.422125 2c:dd:e9:c9:32:88 (oui Arista Networks) > 33:33:00:01:00:02 (oui Unknown), ethertype 802.1Q (0x8100), length 257: vlan 2204, p 0, ethertype IP
v6 (0x86dd), (flowlabel 0x1de3e, hlim 1, next-header UDP (17) payload length: 199) fe80::2edd:e9ff:fec9:3288.dhcpv6-client > ff02::1:2.dhcpv6-server: dhcp6 so
licit (xid=422a14 (vendor-specific-info) (client-ID hwaddr/time type 1 time 700062283 2cdde9c93288) (option-request Bootfile-URL DNS-search-list DNS-server) (
elapsed-time 725) (user-class) (IA_NA IAID:3922277000 T1:3600 T2:5400))
D) In DHCPv6 ZTP responses, rather than (opt_59), now use Bootfile-URL , e.g.
15:15:33.148466 IP6 (flowlabel 0x1570c, hlim 64, next-header UDP (17) payload length: 157) fe80::40d3:61ff:fe62:3810.dhcpv6-server > fe80::200:1ff:fe01:0.dhcpv6-client: [udp sum ok] dhcp6 advertise (xid=654242 (IA_NA IAID:16842752 T1:0 T2:0 (IA_ADDR 1234:5678::4 pltime:18000 vltime:28800)) (client-ID hwaddr/time type 1 time 701792102 000001010000) (server-ID hwaddr/time type 1 time 701792110 42d361623810) (opt_59) (DNS-search-list aristanetworks.com.) (DNS-server 1234:5678::2))
15:15:33.148466 42:d3:61:62:38:10 (oui Unknown) > 00:00:01:01:00:00 (oui Unknown), ethertype IPv6 (0x86dd), length 211: (flowlabel 0x1570c, hlim 64, next-header UDP (17) payload length: 157) fe80::40d3:61ff:fe62:3810.dhcpv6-server > fe80::200:1ff:fe01:0.dhcpv6-client: dhcp6 advertise (xid=654242 (IA_NA IAID:16842752 T1:0 T2:0 (IA_ADDR 1234:5678::4 pltime:18000 vltime:28800)) (client-ID hwaddr/time type 1 time 701792102 000001010000) (server-ID hwaddr/time type 1 time 701792110 42d361623810) (Bootfile-URL my-startup-config) (DNS-search-list aristanetworks.com.) (DNS-server 1234:5678::2))
E) In DHCPv6 SZTP responses, rather than (opt_136), now use (SZTP-redirect *(uri)), e.g.
(SZTP-redirect https://sztp1.download.com,https://sztp2.download.com:8080,https://10.10.0.0,https://10.10.0.0:8000,https://[2001:4860:4860::8888]:8080)
14:35:46.638223 IP6 (flowlabel 0xe612c, hlim 64, next-header UDP (17) payload length: 281) fe80::cc0d:b4ff:fe8a:3384.dhcpv6-server > fe80::200:1ff:fe01:0.dhcpv6-client: [udp sum ok] dhcp6 reply (xid=5f98e6 (IA_NA IAID:16842752 T1:0 T2:0 (IA_ADDR 1234:5678::4 pltime:7200 vltime:28800)) (client-ID hwaddr/time type 1
time 701530515 000001010000) (server-ID hwaddr/time type 1 time 701530524 ce0db48a3384) (opt_136) (DNS-search-list aristanetworks.com.) (DNS-server 1234:5678::2))
13:35:46.638223 ce:0d:b4:8a:33:84 (oui Unknown) > 00:00:01:01:00:00 (oui Unknown), ethertype IPv6 (0x86dd), length 335: (flowlabel 0xe612c, hlim 64, next-header UDP (17) payload length: 281) fe80::cc0d:b4ff:fe8a:3384.dhcpv6-server > fe80::200:1ff:fe01:0.dhcpv6-client: dhcp6 reply (xid=5f98e6 (IA_NA IAID:16842752 T1:0 T2:0 (IA_ADDR 1234:5678::4 pltime:7200 vltime:28800)) (client-ID hwaddr/time type 1 time 701530515 000001010000) (server-ID hwaddr/time type 1 time 701530524 ce0db48a3384) (SZTP-redirect https://sztp1.download.com,https://sztp2.download.com:8080,https://10.10.0.0,https://10.10.0.0:8000,https://[2001:4860:4860:
:8888]:8080) (DNS-search-list aristanetworks.com.) (DNS-server 1234:5678::2))
F) Add support for DHCPv6 user-class field as per RFC8415 (https://datatracker.ietf.org/doc/html/rfc8415#section-21.15).)
For example, now include the user-class values in the DHCPv6 output (user-class Arista;Test-Dhcpv6Discover;4.21.XX)
Previously:
09:08:32.009292 IP6 (flowlabel 0x09903, hlim 1, next-header UDP (17) payload length: 138) fe80::200:44ff:fe01:0.dhcpv6-client > ff02::1:2.dhcpv6-server: [udp sum ok] dhcp6 inf-req (xid=b5fcf (vendor-specific-info) (client-ID hwaddr type 1 000044010000) (option-request opt_59 DNS-search-list DNS-server) (elapsed-time 331) (user-class))
Updated to:
08:08:32.009292 IP6 (flowlabel 0x09903, hlim 1, next-header UDP (17) payload length: 138) fe80::200:44ff:fe01:0.546 > ff02::1:2.547: [udp sum ok] dhcp6 inf-req (xid=b5fcf (vendor-specific-info) (client-ID hwaddr type 1 000044010000) (option-request Bootfile-URL DNS-search-list DNS-server) (elapsed-time 331) (user-class Arista;Test-Dhcpv6Discover;4.21.XX))","Summary

Added ZTP DHCPv6 option BOOTFILE_URL support (previously only equivalent DHCPv4 option was supported) (RFC5970)
Added SZTP option support for both DHCPv4 and DHCPv6 requests and responses. (RFC8572)
Added DHCPv6 user-class  option (RFC8415)
As the existing DHCPv4 and DHCPv6 tcpdump output are not consistent with each other, these changes follow this convention and adopts the respective style for DHCPv4 and DHCPv6.

Details
A) Rather than Unknown (143, output now specifies SZTP-Redirect (143)
Added support for SZTP-Redirect Option 143 on requests
15:26:16.092235 00:00:44:01:00:00 (oui Unknown) > Broadcast, ethertype IPv4 (0x0800), length 342: (tos 0x10, ttl 128, id 0, offset 0, flags [none], proto UDP (17), length 328)
0.0.0.0.bootpc > 255.255.255.255.bootps: BOOTP/DHCP, Request from 00:00:44:01:00:00 (oui Unknown), length 300, xid 0xba761038, Flags [none]
Client-Ethernet-Address 00:00:44:01:00:00 (oui Unknown)
Vendor-rfc1048 Extensions
Magic Cookie 0x63825363
DHCP-Message (53), length 1: Discover
Parameter-Request (55), length 10:
MTU (26), Subnet-Mask (1), BR (28), Default-Gateway (3)
Domain-Name (15), Domain-Name-Server (6), LOG (7), Hostname (12)
Unknown (143), Classless-Static-Route (121)
Vendor-Class (60), length 6: ""Arista""
Client-ID (61), length 6: ""^@d^A^@^@""
15:25:54.957572 00:00:44:01:00:00 (oui Unknown) > Broadcast, ethertype IPv4 (0x0800), length 342: (tos 0x10, ttl 128, id 0, offset 0, flags [none], proto UDP
(17), length 328)
0.0.0.0.bootpc > 255.255.255.255.bootps: BOOTP/DHCP, Request from 00:00:44:01:00:00 (oui Unknown), length 300, xid 0xd53905c, Flags [none]
Client-Ethernet-Address 00:00:44:01:00:00 (oui Unknown)
Vendor-rfc1048 Extensions
Magic Cookie 0x63825363
DHCP-Message (53), length 1: Request
Server-ID (54), length 4: 10.10.0.2
Requested-IP (50), length 4: 10.10.0.4
Parameter-Request (55), length 10:
MTU (26), Subnet-Mask (1), BR (28), Default-Gateway (3)
Domain-Name (15), Domain-Name-Server (6), LOG (7), Hostname (12)
SZTP-Redirect (143), Classless-Static-Route (121)
Vendor-Class (60), length 6: ""Arista""
Client-ID (61), length 6: ""^@d^A^@^@""
B) Previously tcpdump outputted the binary values, it now shows the inidividual values in text format, (T143 Option 143 -> SZTP-Redirect (143)), e.g.
15:26:16.099544 IP (tos 0x10, ttl 128, id 0, offset 0, flags [none], proto UDP (17), length 412)
10.10.0.2.bootps > 10.10.0.4.bootpc: BOOTP/DHCP, Reply, length 384, xid 0xba761038, Flags [none]
Your-IP 10.10.0.4
Client-Ethernet-Address 00:00:44:01:00:00 (oui Unknown)
Vendor-rfc1048 Extensions
Magic Cookie 0x63825363
DHCP-Message Option 53, length 1: ACK
Server-ID Option 54, length 4: 10.10.0.2
Lease-Time Option 51, length 4: 28778
MTU Option 26, length 2: 1500
Subnet-Mask Option 1, length 4: 255.255.0.0
Default-Gateway Option 3, length 4: 10.10.0.1
Domain-Name Option 15, length 18: ""aristanetworks.com""
Domain-Name-Server Option 6, length 4: 10.10.0.1
T143 Option 143, length 84: 1730676,1953526586,791638906,1953509678,1685026670,1819238756,778268525,1140852,1953526586,791621936,774975534,8083333
12,594048116,1886599727,794505776,808532532,943075386,876099120,976894008,943217978,942684208
15:26:16.099544 4e:ae:9c:94:66:0d (oui Unknown) > 00:00:44:01:00:00 (oui Unknown), ethertype IPv4 (0x0800), length 426: (tos 0x10, ttl 128, id 0, offset 0, fl
ags [none], proto UDP (17), length 412)
10.10.0.2.bootps > 10.10.0.4.bootpc: BOOTP/DHCP, Reply, length 384, xid 0xba761038, Flags [none]
Your-IP 10.10.0.4
Client-Ethernet-Address 00:00:44:01:00:00 (oui Unknown)
Vendor-rfc1048 Extensions
Magic Cookie 0x63825363
DHCP-Message (53), length 1: ACK
Server-ID (54), length 4: 10.10.0.2
Lease-Time (51), length 4: 28778
MTU (26), length 2: 1500
Subnet-Mask (1), length 4: 255.255.0.0
Default-Gateway (3), length 4: 10.10.0.1
Domain-Name (15), length 18: ""aristanetworks.com""
Domain-Name-Server (6), length 4: 10.10.0.1
SZTP-Redirect (143), length 84:
instance#1: ""https://sztp1.download.com/"", length 26
instance#2: ""https://10.10.0.0/"", length 17
instance#3: ""https://[2001:4860:4860::8888]:8080"", length 35
C) In DHCPv6 solicit requests, rather than opt_59, now use Bootfile-URL, e.g.
19:24:08.422125 IP6 (flowlabel 0x1de3e, hlim 1, next-header UDP (17) payload length: 199) fe80::2edd:e9ff:fec9:3288.dhcpv6-client > ff02::1:2.dhcpv6-server: 
[udp sum ok] dhcp6 solicit (xid=422a14 (vendor-specific-info) (client-ID hwaddr/time type 1 time 700062283 2cdde9c93288) (option-request opt_59 DNS-search-li
st DNS-server) (elapsed-time 725) (user-class) (IA_NA IAID:3922277000 T1:3600 T2:5400))
19:24:08.422125 2c:dd:e9:c9:32:88 (oui Arista Networks) > 33:33:00:01:00:02 (oui Unknown), ethertype 802.1Q (0x8100), length 257: vlan 2204, p 0, ethertype IP
v6 (0x86dd), (flowlabel 0x1de3e, hlim 1, next-header UDP (17) payload length: 199) fe80::2edd:e9ff:fec9:3288.dhcpv6-client > ff02::1:2.dhcpv6-server: dhcp6 so
licit (xid=422a14 (vendor-specific-info) (client-ID hwaddr/time type 1 time 700062283 2cdde9c93288) (option-request Bootfile-URL DNS-search-list DNS-server) (
elapsed-time 725) (user-class) (IA_NA IAID:3922277000 T1:3600 T2:5400))
D) In DHCPv6 ZTP responses, rather than (opt_59), now use Bootfile-URL , e.g.
15:15:33.148466 IP6 (flowlabel 0x1570c, hlim 64, next-header UDP (17) payload length: 157) fe80::40d3:61ff:fe62:3810.dhcpv6-server > fe80::200:1ff:fe01:0.dhcpv6-client: [udp sum ok] dhcp6 advertise (xid=654242 (IA_NA IAID:16842752 T1:0 T2:0 (IA_ADDR 1234:5678::4 pltime:18000 vltime:28800)) (client-ID hwaddr/time type 1 time 701792102 000001010000) (server-ID hwaddr/time type 1 time 701792110 42d361623810) (opt_59) (DNS-search-list aristanetworks.com.) (DNS-server 1234:5678::2))
15:15:33.148466 42:d3:61:62:38:10 (oui Unknown) > 00:00:01:01:00:00 (oui Unknown), ethertype IPv6 (0x86dd), length 211: (flowlabel 0x1570c, hlim 64, next-header UDP (17) payload length: 157) fe80::40d3:61ff:fe62:3810.dhcpv6-server > fe80::200:1ff:fe01:0.dhcpv6-client: dhcp6 advertise (xid=654242 (IA_NA IAID:16842752 T1:0 T2:0 (IA_ADDR 1234:5678::4 pltime:18000 vltime:28800)) (client-ID hwaddr/time type 1 time 701792102 000001010000) (server-ID hwaddr/time type 1 time 701792110 42d361623810) (Bootfile-URL my-startup-config) (DNS-search-list aristanetworks.com.) (DNS-server 1234:5678::2))
E) In DHCPv6 SZTP responses, rather than (opt_136), now use (SZTP-redirect *(uri)), e.g.
(SZTP-redirect https://sztp1.download.com,https://sztp2.download.com:8080,https://10.10.0.0,https://10.10.0.0:8000,https://[2001:4860:4860::8888]:8080)
14:35:46.638223 IP6 (flowlabel 0xe612c, hlim 64, next-header UDP (17) payload length: 281) fe80::cc0d:b4ff:fe8a:3384.dhcpv6-server > fe80::200:1ff:fe01:0.dhcpv6-client: [udp sum ok] dhcp6 reply (xid=5f98e6 (IA_NA IAID:16842752 T1:0 T2:0 (IA_ADDR 1234:5678::4 pltime:7200 vltime:28800)) (client-ID hwaddr/time type 1
time 701530515 000001010000) (server-ID hwaddr/time type 1 time 701530524 ce0db48a3384) (opt_136) (DNS-search-list aristanetworks.com.) (DNS-server 1234:5678::2))
13:35:46.638223 ce:0d:b4:8a:33:84 (oui Unknown) > 00:00:01:01:00:00 (oui Unknown), ethertype IPv6 (0x86dd), length 335: (flowlabel 0xe612c, hlim 64, next-header UDP (17) payload length: 281) fe80::cc0d:b4ff:fe8a:3384.dhcpv6-server > fe80::200:1ff:fe01:0.dhcpv6-client: dhcp6 reply (xid=5f98e6 (IA_NA IAID:16842752 T1:0 T2:0 (IA_ADDR 1234:5678::4 pltime:7200 vltime:28800)) (client-ID hwaddr/time type 1 time 701530515 000001010000) (server-ID hwaddr/time type 1 time 701530524 ce0db48a3384) (SZTP-redirect https://sztp1.download.com,https://sztp2.download.com:8080,https://10.10.0.0,https://10.10.0.0:8000,https://[2001:4860:4860:
:8888]:8080) (DNS-search-list aristanetworks.com.) (DNS-server 1234:5678::2))
F) Add support for DHCPv6 user-class field as per RFC8415 (https://datatracker.ietf.org/doc/html/rfc8415#section-21.15).)
For example, now include the user-class values in the DHCPv6 output (user-class Arista;Test-Dhcpv6Discover;4.21.XX)
Previously:
09:08:32.009292 IP6 (flowlabel 0x09903, hlim 1, next-header UDP (17) payload length: 138) fe80::200:44ff:fe01:0.dhcpv6-client > ff02::1:2.dhcpv6-server: [udp sum ok] dhcp6 inf-req (xid=b5fcf (vendor-specific-info) (client-ID hwaddr type 1 000044010000) (option-request opt_59 DNS-search-list DNS-server) (elapsed-time 331) (user-class))
Updated to:
08:08:32.009292 IP6 (flowlabel 0x09903, hlim 1, next-header UDP (17) payload length: 138) fe80::200:44ff:fe01:0.546 > ff02::1:2.547: [udp sum ok] dhcp6 inf-req (xid=b5fcf (vendor-specific-info) (client-ID hwaddr type 1 000044010000) (option-request Bootfile-URL DNS-search-list DNS-server) (elapsed-time 331) (user-class Arista;Test-Dhcpv6Discover;4.21.XX))",True,{}
