Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,6,2016-02-25T10:07:42Z,2016-02-25T10:11:28Z,2016-02-25T10:19:08Z,MERGED,True,92,72,1,https://github.com/marcschier,Fix issue in tlsio_schannel with consumed_bytes window calculation,2,[],https://github.com/Azure/azure-c-shared-utility/pull/6,https://github.com/marcschier,1,https://github.com/Azure/azure-c-shared-utility/pull/6,"While working with a custom socket io layer that uses async triggered receives, I found that the logic to calculate the consumed window is broken in some cases, a) because the initial size is 1 and in case of incomplete messages then gets incremented by the ""actual needed bytes"", with the consumed bytes now incorrectly showing 1 byte too many and b) the final received buffer not being added to the consumed bytes, now missing the remainder and moving ahead by incorrect number of bytes. My fix is to use the extra data field in the secbuffer which is supposed to indicate the amount of extra data that was passed in. if there was no extra data passed, do not memmove, but reuse the entire receive buffer. Note that changes look larger than they are due to the fact that the case statements are indented.","While working with a custom socket io layer that uses async triggered receives, I found that the logic to calculate the consumed window is broken in some cases, a) because the initial size is 1 and in case of incomplete messages then gets incremented by the ""actual needed bytes"", with the consumed bytes now incorrectly showing 1 byte too many and b) the final received buffer not being added to the consumed bytes, now missing the remainder and moving ahead by incorrect number of bytes. My fix is to use the extra data field in the secbuffer which is supposed to indicate the amount of extra data that was passed in. if there was no extra data passed, do not memmove, but reuse the entire receive buffer. Note that changes look larger than they are due to the fact that the case statements are indented.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,7,2016-03-25T20:42:55Z,2016-03-25T20:43:18Z,2016-03-25T20:43:29Z,MERGED,True,93106,93106,253,https://github.com/avranju,Normalize all line endings,1,[],https://github.com/Azure/azure-c-shared-utility/pull/7,https://github.com/avranju,1,https://github.com/Azure/azure-c-shared-utility/pull/7,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,8,2016-04-05T12:13:34Z,2016-09-09T16:56:28Z,2016-09-09T16:56:28Z,CLOSED,False,4,0,1,https://github.com/Deadolus,NO_LOGGING flag also applied for normal log output,1,[],https://github.com/Azure/azure-c-shared-utility/pull/8,https://github.com/Deadolus,1,https://github.com/Azure/azure-c-shared-utility/pull/8,"Adding option to supress all the log output to console via existing NO_LOGGING flag.
Giving users a choice if they really always want to see the connection log outputs.
Most of the time this output is probably no longer needed once the program is deemed functional.
I found that it was only one line needed to be expanded for the unwanted logging output to go away.
For clarification, output such as the following will get eliminated adding the flag
-> Header (AMQP 0.1.0.0) <- Header (AMQP 0.1.0.0) -> [OPEN]* {default_container_id,mytarget.azure-devices.net,4294967295,65535} <- [OPEN]* {DeviceGateway_b8ce818551884a2184e1dec56d30ded4,10.0.0.60,65536,8191,240000,NULL,NULL,NULL,NULL,NULL} -> [BEGIN]* {NULL,0,4294967295,100,4294967295} <- [BEGIN]* {0,1,100,5000,262143,NULL,NULL,NULL} -> [ATTACH]* {cbs-sender,0,false,0,0,* {$cbs},* {$cbs},NULL,NULL,0,65535} -> [ATTACH]* {cbs-receiver,1,true,0,0,* {$cbs},* {$cbs},NULL,NULL,NULL,65535} <- [ATTACH]* {cbs-sender,0,true,0,0,* {$cbs,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL},* {$cbs,NULL,NULL,NULL,NULL,NULL,NULL},NULL,NULL,NULL,65535,NULL,NULL,NULL} <- [FLOW]* {0,100,1,5000,0,0,100,0,NULL,false,NULL} <- [ATTACH]* {cbs-receiver,1,false,0,0,* {$cbs,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL},* {$cbs,NULL,NULL,NULL,NULL,NULL,NULL},NULL,NULL,0,65535,NULL,NULL,NULL} -> [FLOW]* {NULL,4294968305,0,100,1,0,10000} -> [TRANSFER]* {0,0,<00 00 00 00>,0,false,false} <- [DISPOSITION]* {true,0,NULL,true,* {},NULL} <- [TRANSFER]* {1,0,<01 00 00 00>,0,NULL,false,NULL,NULL,NULL,NULL,false} -> [DISPOSITION]* {true,0,0,true,* {}} -> [ATTACH]* {receiver-link,2,true,0,0,* {amqps://mytarget.azure-devices.net/devices/Device1/messages/devicebound},* {ingress-rx},NULL,NULL,NULL,65536,NULL,NULL,{[com.microsoft:client-version:iothubclient/1.0.3]}} -> [ATTACH]* {sender-link,3,false,0,0,* {ingress},* {amqps://mytarget.azure-devices.net/devices/Device1/messages/events},NULL,NULL,0,18446744073709431615,NULL,NULL,{[com.microsoft:client-version:iothubclient/1.0.3]}} <- [ATTACH]* {receiver-link,2,false,0,0,* {amqps://mytarget.azure-devices.net/devices/Device1/messages/devicebound,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL},* {ingress-rx,NULL,NULL,NULL,NULL,NULL,NULL},NULL,NULL,0,65536,NULL,NULL,{[com.microsoft:client-version:iothubclient/1.0.3]}} -> [FLOW]* {NULL,4294967281,1,99,2,0,10000}
Signed-off-by: Simon Egli simon.egli@bbv.ch","Adding option to supress all the log output to console via existing NO_LOGGING flag.
Giving users a choice if they really always want to see the connection log outputs.
Most of the time this output is probably no longer needed once the program is deemed functional.
I found that it was only one line needed to be expanded for the unwanted logging output to go away.
For clarification, output such as the following will get eliminated adding the flag
-> Header (AMQP 0.1.0.0) <- Header (AMQP 0.1.0.0) -> [OPEN]* {default_container_id,mytarget.azure-devices.net,4294967295,65535} <- [OPEN]* {DeviceGateway_b8ce818551884a2184e1dec56d30ded4,10.0.0.60,65536,8191,240000,NULL,NULL,NULL,NULL,NULL} -> [BEGIN]* {NULL,0,4294967295,100,4294967295} <- [BEGIN]* {0,1,100,5000,262143,NULL,NULL,NULL} -> [ATTACH]* {cbs-sender,0,false,0,0,* {$cbs},* {$cbs},NULL,NULL,0,65535} -> [ATTACH]* {cbs-receiver,1,true,0,0,* {$cbs},* {$cbs},NULL,NULL,NULL,65535} <- [ATTACH]* {cbs-sender,0,true,0,0,* {$cbs,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL},* {$cbs,NULL,NULL,NULL,NULL,NULL,NULL},NULL,NULL,NULL,65535,NULL,NULL,NULL} <- [FLOW]* {0,100,1,5000,0,0,100,0,NULL,false,NULL} <- [ATTACH]* {cbs-receiver,1,false,0,0,* {$cbs,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL},* {$cbs,NULL,NULL,NULL,NULL,NULL,NULL},NULL,NULL,0,65535,NULL,NULL,NULL} -> [FLOW]* {NULL,4294968305,0,100,1,0,10000} -> [TRANSFER]* {0,0,<00 00 00 00>,0,false,false} <- [DISPOSITION]* {true,0,NULL,true,* {},NULL} <- [TRANSFER]* {1,0,<01 00 00 00>,0,NULL,false,NULL,NULL,NULL,NULL,false} -> [DISPOSITION]* {true,0,0,true,* {}} -> [ATTACH]* {receiver-link,2,true,0,0,* {amqps://mytarget.azure-devices.net/devices/Device1/messages/devicebound},* {ingress-rx},NULL,NULL,NULL,65536,NULL,NULL,{[com.microsoft:client-version:iothubclient/1.0.3]}} -> [ATTACH]* {sender-link,3,false,0,0,* {ingress},* {amqps://mytarget.azure-devices.net/devices/Device1/messages/events},NULL,NULL,0,18446744073709431615,NULL,NULL,{[com.microsoft:client-version:iothubclient/1.0.3]}} <- [ATTACH]* {receiver-link,2,false,0,0,* {amqps://mytarget.azure-devices.net/devices/Device1/messages/devicebound,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL},* {ingress-rx,NULL,NULL,NULL,NULL,NULL,NULL},NULL,NULL,0,65536,NULL,NULL,{[com.microsoft:client-version:iothubclient/1.0.3]}} -> [FLOW]* {NULL,4294967281,1,99,2,0,10000}
Signed-off-by: Simon Egli simon.egli@bbv.ch",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,8,2016-04-05T12:13:34Z,2016-09-09T16:56:28Z,2016-09-09T16:56:28Z,CLOSED,False,4,0,1,https://github.com/Deadolus,NO_LOGGING flag also applied for normal log output,1,[],https://github.com/Azure/azure-c-shared-utility/pull/8,https://github.com/Deadolus,2,https://github.com/Azure/azure-c-shared-utility/pull/8#issuecomment-210295639,"Adding option to supress all the log output to console via existing NO_LOGGING flag.
Giving users a choice if they really always want to see the connection log outputs.
Most of the time this output is probably no longer needed once the program is deemed functional.
I found that it was only one line needed to be expanded for the unwanted logging output to go away.
For clarification, output such as the following will get eliminated adding the flag
-> Header (AMQP 0.1.0.0) <- Header (AMQP 0.1.0.0) -> [OPEN]* {default_container_id,mytarget.azure-devices.net,4294967295,65535} <- [OPEN]* {DeviceGateway_b8ce818551884a2184e1dec56d30ded4,10.0.0.60,65536,8191,240000,NULL,NULL,NULL,NULL,NULL} -> [BEGIN]* {NULL,0,4294967295,100,4294967295} <- [BEGIN]* {0,1,100,5000,262143,NULL,NULL,NULL} -> [ATTACH]* {cbs-sender,0,false,0,0,* {$cbs},* {$cbs},NULL,NULL,0,65535} -> [ATTACH]* {cbs-receiver,1,true,0,0,* {$cbs},* {$cbs},NULL,NULL,NULL,65535} <- [ATTACH]* {cbs-sender,0,true,0,0,* {$cbs,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL},* {$cbs,NULL,NULL,NULL,NULL,NULL,NULL},NULL,NULL,NULL,65535,NULL,NULL,NULL} <- [FLOW]* {0,100,1,5000,0,0,100,0,NULL,false,NULL} <- [ATTACH]* {cbs-receiver,1,false,0,0,* {$cbs,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL},* {$cbs,NULL,NULL,NULL,NULL,NULL,NULL},NULL,NULL,0,65535,NULL,NULL,NULL} -> [FLOW]* {NULL,4294968305,0,100,1,0,10000} -> [TRANSFER]* {0,0,<00 00 00 00>,0,false,false} <- [DISPOSITION]* {true,0,NULL,true,* {},NULL} <- [TRANSFER]* {1,0,<01 00 00 00>,0,NULL,false,NULL,NULL,NULL,NULL,false} -> [DISPOSITION]* {true,0,0,true,* {}} -> [ATTACH]* {receiver-link,2,true,0,0,* {amqps://mytarget.azure-devices.net/devices/Device1/messages/devicebound},* {ingress-rx},NULL,NULL,NULL,65536,NULL,NULL,{[com.microsoft:client-version:iothubclient/1.0.3]}} -> [ATTACH]* {sender-link,3,false,0,0,* {ingress},* {amqps://mytarget.azure-devices.net/devices/Device1/messages/events},NULL,NULL,0,18446744073709431615,NULL,NULL,{[com.microsoft:client-version:iothubclient/1.0.3]}} <- [ATTACH]* {receiver-link,2,false,0,0,* {amqps://mytarget.azure-devices.net/devices/Device1/messages/devicebound,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL},* {ingress-rx,NULL,NULL,NULL,NULL,NULL,NULL},NULL,NULL,0,65536,NULL,NULL,{[com.microsoft:client-version:iothubclient/1.0.3]}} -> [FLOW]* {NULL,4294967281,1,99,2,0,10000}
Signed-off-by: Simon Egli simon.egli@bbv.ch","Any news on if you accept this or add anything else to curb unneeded debug output?
We'd like to get rid of all the debug output and if don't merge this, we'll create our own sub-repositories.
Which means more work for us and a few more steps to take care off, so this wouldn't actually be our preferred solution.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,8,2016-04-05T12:13:34Z,2016-09-09T16:56:28Z,2016-09-09T16:56:28Z,CLOSED,False,4,0,1,https://github.com/Deadolus,NO_LOGGING flag also applied for normal log output,1,[],https://github.com/Azure/azure-c-shared-utility/pull/8,https://github.com/markrad,3,https://github.com/Azure/azure-c-shared-utility/pull/8#issuecomment-241878775,"Adding option to supress all the log output to console via existing NO_LOGGING flag.
Giving users a choice if they really always want to see the connection log outputs.
Most of the time this output is probably no longer needed once the program is deemed functional.
I found that it was only one line needed to be expanded for the unwanted logging output to go away.
For clarification, output such as the following will get eliminated adding the flag
-> Header (AMQP 0.1.0.0) <- Header (AMQP 0.1.0.0) -> [OPEN]* {default_container_id,mytarget.azure-devices.net,4294967295,65535} <- [OPEN]* {DeviceGateway_b8ce818551884a2184e1dec56d30ded4,10.0.0.60,65536,8191,240000,NULL,NULL,NULL,NULL,NULL} -> [BEGIN]* {NULL,0,4294967295,100,4294967295} <- [BEGIN]* {0,1,100,5000,262143,NULL,NULL,NULL} -> [ATTACH]* {cbs-sender,0,false,0,0,* {$cbs},* {$cbs},NULL,NULL,0,65535} -> [ATTACH]* {cbs-receiver,1,true,0,0,* {$cbs},* {$cbs},NULL,NULL,NULL,65535} <- [ATTACH]* {cbs-sender,0,true,0,0,* {$cbs,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL},* {$cbs,NULL,NULL,NULL,NULL,NULL,NULL},NULL,NULL,NULL,65535,NULL,NULL,NULL} <- [FLOW]* {0,100,1,5000,0,0,100,0,NULL,false,NULL} <- [ATTACH]* {cbs-receiver,1,false,0,0,* {$cbs,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL},* {$cbs,NULL,NULL,NULL,NULL,NULL,NULL},NULL,NULL,0,65535,NULL,NULL,NULL} -> [FLOW]* {NULL,4294968305,0,100,1,0,10000} -> [TRANSFER]* {0,0,<00 00 00 00>,0,false,false} <- [DISPOSITION]* {true,0,NULL,true,* {},NULL} <- [TRANSFER]* {1,0,<01 00 00 00>,0,NULL,false,NULL,NULL,NULL,NULL,false} -> [DISPOSITION]* {true,0,0,true,* {}} -> [ATTACH]* {receiver-link,2,true,0,0,* {amqps://mytarget.azure-devices.net/devices/Device1/messages/devicebound},* {ingress-rx},NULL,NULL,NULL,65536,NULL,NULL,{[com.microsoft:client-version:iothubclient/1.0.3]}} -> [ATTACH]* {sender-link,3,false,0,0,* {ingress},* {amqps://mytarget.azure-devices.net/devices/Device1/messages/events},NULL,NULL,0,18446744073709431615,NULL,NULL,{[com.microsoft:client-version:iothubclient/1.0.3]}} <- [ATTACH]* {receiver-link,2,false,0,0,* {amqps://mytarget.azure-devices.net/devices/Device1/messages/devicebound,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL},* {ingress-rx,NULL,NULL,NULL,NULL,NULL,NULL},NULL,NULL,0,65536,NULL,NULL,{[com.microsoft:client-version:iothubclient/1.0.3]}} -> [FLOW]* {NULL,4294967281,1,99,2,0,10000}
Signed-off-by: Simon Egli simon.egli@bbv.ch","Hi @Deadolus,
This issue has already been addressed in the develop branch. You need to add the command line argument --no-logging to the build.sh script.
Mark Radbourne MSFT",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,8,2016-04-05T12:13:34Z,2016-09-09T16:56:28Z,2016-09-09T16:56:28Z,CLOSED,False,4,0,1,https://github.com/Deadolus,NO_LOGGING flag also applied for normal log output,1,[],https://github.com/Azure/azure-c-shared-utility/pull/8,https://github.com/olivierbloch,4,https://github.com/Azure/azure-c-shared-utility/pull/8#issuecomment-245973039,"Adding option to supress all the log output to console via existing NO_LOGGING flag.
Giving users a choice if they really always want to see the connection log outputs.
Most of the time this output is probably no longer needed once the program is deemed functional.
I found that it was only one line needed to be expanded for the unwanted logging output to go away.
For clarification, output such as the following will get eliminated adding the flag
-> Header (AMQP 0.1.0.0) <- Header (AMQP 0.1.0.0) -> [OPEN]* {default_container_id,mytarget.azure-devices.net,4294967295,65535} <- [OPEN]* {DeviceGateway_b8ce818551884a2184e1dec56d30ded4,10.0.0.60,65536,8191,240000,NULL,NULL,NULL,NULL,NULL} -> [BEGIN]* {NULL,0,4294967295,100,4294967295} <- [BEGIN]* {0,1,100,5000,262143,NULL,NULL,NULL} -> [ATTACH]* {cbs-sender,0,false,0,0,* {$cbs},* {$cbs},NULL,NULL,0,65535} -> [ATTACH]* {cbs-receiver,1,true,0,0,* {$cbs},* {$cbs},NULL,NULL,NULL,65535} <- [ATTACH]* {cbs-sender,0,true,0,0,* {$cbs,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL},* {$cbs,NULL,NULL,NULL,NULL,NULL,NULL},NULL,NULL,NULL,65535,NULL,NULL,NULL} <- [FLOW]* {0,100,1,5000,0,0,100,0,NULL,false,NULL} <- [ATTACH]* {cbs-receiver,1,false,0,0,* {$cbs,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL},* {$cbs,NULL,NULL,NULL,NULL,NULL,NULL},NULL,NULL,0,65535,NULL,NULL,NULL} -> [FLOW]* {NULL,4294968305,0,100,1,0,10000} -> [TRANSFER]* {0,0,<00 00 00 00>,0,false,false} <- [DISPOSITION]* {true,0,NULL,true,* {},NULL} <- [TRANSFER]* {1,0,<01 00 00 00>,0,NULL,false,NULL,NULL,NULL,NULL,false} -> [DISPOSITION]* {true,0,0,true,* {}} -> [ATTACH]* {receiver-link,2,true,0,0,* {amqps://mytarget.azure-devices.net/devices/Device1/messages/devicebound},* {ingress-rx},NULL,NULL,NULL,65536,NULL,NULL,{[com.microsoft:client-version:iothubclient/1.0.3]}} -> [ATTACH]* {sender-link,3,false,0,0,* {ingress},* {amqps://mytarget.azure-devices.net/devices/Device1/messages/events},NULL,NULL,0,18446744073709431615,NULL,NULL,{[com.microsoft:client-version:iothubclient/1.0.3]}} <- [ATTACH]* {receiver-link,2,false,0,0,* {amqps://mytarget.azure-devices.net/devices/Device1/messages/devicebound,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL},* {ingress-rx,NULL,NULL,NULL,NULL,NULL,NULL},NULL,NULL,0,65536,NULL,NULL,{[com.microsoft:client-version:iothubclient/1.0.3]}} -> [FLOW]* {NULL,4294967281,1,99,2,0,10000}
Signed-off-by: Simon Egli simon.egli@bbv.ch","Considering this issue has already been addressed, we are closing this one. Feel free to open an issue if this fix doesn't work,.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,9,2016-04-29T10:09:29Z,2016-09-12T18:14:56Z,2016-09-12T18:14:56Z,CLOSED,False,11,3,4,https://github.com/lmussier,Enable gcc 4.4,2,[],https://github.com/Azure/azure-c-shared-utility/pull/9,https://github.com/lmussier,1,https://github.com/Azure/azure-c-shared-utility/pull/9,"Hi,
Here is part of the way to be able to use the SDK with gcc 4.4.
It adds a new macro to avoid multiple typedef with the same base type.
See https://github.com/Azure/azure-iot-sdks/issues/466","Hi,
Here is part of the way to be able to use the SDK with gcc 4.4.
It adds a new macro to avoid multiple typedef with the same base type.
See https://github.com/Azure/azure-iot-sdks/issues/466",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,9,2016-04-29T10:09:29Z,2016-09-12T18:14:56Z,2016-09-12T18:14:56Z,CLOSED,False,11,3,4,https://github.com/lmussier,Enable gcc 4.4,2,[],https://github.com/Azure/azure-c-shared-utility/pull/9,https://github.com/olivierbloch,2,https://github.com/Azure/azure-c-shared-utility/pull/9#issuecomment-245974145,"Hi,
Here is part of the way to be able to use the SDK with gcc 4.4.
It adds a new macro to avoid multiple typedef with the same base type.
See https://github.com/Azure/azure-iot-sdks/issues/466",We have already made a set of changes to support gcc 4.4 and are working at adding this in our gated build. Once it's gone will update this PR.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,9,2016-04-29T10:09:29Z,2016-09-12T18:14:56Z,2016-09-12T18:14:56Z,CLOSED,False,11,3,4,https://github.com/lmussier,Enable gcc 4.4,2,[],https://github.com/Azure/azure-c-shared-utility/pull/9,https://github.com/tameraw,3,https://github.com/Azure/azure-c-shared-utility/pull/9#issuecomment-246439934,"Hi,
Here is part of the way to be able to use the SDK with gcc 4.4.
It adds a new macro to avoid multiple typedef with the same base type.
See https://github.com/Azure/azure-iot-sdks/issues/466","@lmussier - We have enabled 4.4 build in our gated system. Please reopen if you see more issues around 4.4 support.
Thanks.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,12,2016-07-19T21:57:57Z,2016-07-19T23:00:10Z,2016-07-19T23:00:10Z,MERGED,True,6,6,1,https://github.com/bfjelds,Add casts to satisfy UWP compiler,1,[],https://github.com/Azure/azure-c-shared-utility/pull/12,https://github.com/bfjelds,1,https://github.com/Azure/azure-c-shared-utility/pull/12,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,14,2016-08-07T22:58:10Z,2016-09-05T23:07:06Z,2016-09-05T23:07:11Z,CLOSED,False,165,150,4,https://github.com/damienpontifex,Fixing build errors on osx,1,[],https://github.com/Azure/azure-c-shared-utility/pull/14,https://github.com/damienpontifex,1,https://github.com/Azure/azure-c-shared-utility/pull/14,"A few apple checks to get Xcode to successfully build the project and fixes #13
Shouldn't cause any breaking changes on other platforms as all changes are surrounded by APPLE specific checks.","A few apple checks to get Xcode to successfully build the project and fixes #13
Shouldn't cause any breaking changes on other platforms as all changes are surrounded by APPLE specific checks.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,14,2016-08-07T22:58:10Z,2016-09-05T23:07:06Z,2016-09-05T23:07:11Z,CLOSED,False,165,150,4,https://github.com/damienpontifex,Fixing build errors on osx,1,[],https://github.com/Azure/azure-c-shared-utility/pull/14,https://github.com/damienpontifex,2,https://github.com/Azure/azure-c-shared-utility/pull/14#issuecomment-244819900,"A few apple checks to get Xcode to successfully build the project and fixes #13
Shouldn't cause any breaking changes on other platforms as all changes are surrounded by APPLE specific checks.",Closing as #21 seems to fix everything except the openssl include directory setting for OS X,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,15,2016-08-10T03:48:47Z,2016-08-11T01:50:49Z,2018-10-01T20:03:10Z,CLOSED,False,230,150,4,https://github.com/msjaosborn,Support building on iOS,1,[],https://github.com/Azure/azure-c-shared-utility/pull/15,https://github.com/msjaosborn,1,https://github.com/Azure/azure-c-shared-utility/pull/15,"azure-c-shared-utility won't build on iOS due to a syntax error (missing ;) in condition_pthreads.c, as well as some issues with pthread_condattr_getclock & pthread_condattr_setclock.  They're not available on iOS.  Also, TCP_KEEPIDLE is not defined on iOS.
Using mach_gettime.c/.h from gist (https://gist.github.com/alfwatt/3588c5aa1f7a1ef7a3bb).
Not sure why condtion_pthread.c shows extensive changes below.  Suspect it's just a line break (CRLF) issue.","azure-c-shared-utility won't build on iOS due to a syntax error (missing ;) in condition_pthreads.c, as well as some issues with pthread_condattr_getclock & pthread_condattr_setclock.  They're not available on iOS.  Also, TCP_KEEPIDLE is not defined on iOS.
Using mach_gettime.c/.h from gist (https://gist.github.com/alfwatt/3588c5aa1f7a1ef7a3bb).
Not sure why condtion_pthread.c shows extensive changes below.  Suspect it's just a line break (CRLF) issue.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,15,2016-08-10T03:48:47Z,2016-08-11T01:50:49Z,2018-10-01T20:03:10Z,CLOSED,False,230,150,4,https://github.com/msjaosborn,Support building on iOS,1,[],https://github.com/Azure/azure-c-shared-utility/pull/15,https://github.com/dcristoloveanu,2,https://github.com/Azure/azure-c-shared-utility/pull/15#issuecomment-238759459,"azure-c-shared-utility won't build on iOS due to a syntax error (missing ;) in condition_pthreads.c, as well as some issues with pthread_condattr_getclock & pthread_condattr_setclock.  They're not available on iOS.  Also, TCP_KEEPIDLE is not defined on iOS.
Using mach_gettime.c/.h from gist (https://gist.github.com/alfwatt/3588c5aa1f7a1ef7a3bb).
Not sure why condtion_pthread.c shows extensive changes below.  Suspect it's just a line break (CRLF) issue.","2 requests:
Can you please get this PR done against the develop branch?
Also it would be very good to have a script to build this in the gated system we have. If you would create a build script for iOs in the Jenkins folder we can plug it in the gated build so we make sure it does not break.
Cheers,
/Dan",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,16,2016-08-11T01:55:28Z,2017-01-06T21:09:51Z,2018-10-01T20:03:10Z,CLOSED,False,230,150,4,https://github.com/msjaosborn,Support building on iOS,1,[],https://github.com/Azure/azure-c-shared-utility/pull/16,https://github.com/msjaosborn,1,https://github.com/Azure/azure-c-shared-utility/pull/16,"azure-c-shared-utility won't build on iOS due to a syntax error (missing ;) in condition_pthreads.c, as well as some issues with pthread_condattr_getclock & pthread_condattr_setclock. They're not available on iOS. Also, TCP_KEEPIDLE is not defined on iOS.
Using mach_gettime.c/.h from gist (https://gist.github.com/alfwatt/3588c5aa1f7a1ef7a3bb).
Not sure why condtion_pthread.c shows extensive changes below. Suspect it's just a line break (CRLF) issue.","azure-c-shared-utility won't build on iOS due to a syntax error (missing ;) in condition_pthreads.c, as well as some issues with pthread_condattr_getclock & pthread_condattr_setclock. They're not available on iOS. Also, TCP_KEEPIDLE is not defined on iOS.
Using mach_gettime.c/.h from gist (https://gist.github.com/alfwatt/3588c5aa1f7a1ef7a3bb).
Not sure why condtion_pthread.c shows extensive changes below. Suspect it's just a line break (CRLF) issue.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,16,2016-08-11T01:55:28Z,2017-01-06T21:09:51Z,2018-10-01T20:03:10Z,CLOSED,False,230,150,4,https://github.com/msjaosborn,Support building on iOS,1,[],https://github.com/Azure/azure-c-shared-utility/pull/16,https://github.com/dcristoloveanu,2,https://github.com/Azure/azure-c-shared-utility/pull/16#issuecomment-239964408,"azure-c-shared-utility won't build on iOS due to a syntax error (missing ;) in condition_pthreads.c, as well as some issues with pthread_condattr_getclock & pthread_condattr_setclock. They're not available on iOS. Also, TCP_KEEPIDLE is not defined on iOS.
Using mach_gettime.c/.h from gist (https://gist.github.com/alfwatt/3588c5aa1f7a1ef7a3bb).
Not sure why condtion_pthread.c shows extensive changes below. Suspect it's just a line break (CRLF) issue.",🕐,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,19,2016-08-17T08:32:49Z,2016-10-06T09:34:06Z,2016-10-06T09:34:06Z,CLOSED,False,2,5,1,https://github.com/Jokymon,Make sure header files and libraries are also installed on Windows,1,[],https://github.com/Azure/azure-c-shared-utility/pull/19,https://github.com/Jokymon,1,https://github.com/Azure/azure-c-shared-utility/pull/19,Change is related to https://github.com/Azure/azure-iot-sdks/issues/752,Change is related to https://github.com/Azure/azure-iot-sdks/issues/752,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,19,2016-08-17T08:32:49Z,2016-10-06T09:34:06Z,2016-10-06T09:34:06Z,CLOSED,False,2,5,1,https://github.com/Jokymon,Make sure header files and libraries are also installed on Windows,1,[],https://github.com/Azure/azure-c-shared-utility/pull/19,https://github.com/Jokymon,2,https://github.com/Azure/azure-c-shared-utility/pull/19#issuecomment-251913069,Change is related to https://github.com/Azure/azure-iot-sdks/issues/752,Pull request is irrelevant since commit 4474a43,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,20,2016-08-18T02:52:35Z,2016-08-22T17:04:40Z,2016-08-23T01:14:21Z,MERGED,True,218,39,3,https://github.com/yaweiw,PR for malloc(0) can return NULL or valid pointer #18,2,[],https://github.com/Azure/azure-c-shared-utility/pull/20,https://github.com/yaweiw,1,https://github.com/Azure/azure-c-shared-utility/pull/20,PR for malloc(0) can return NULL or valid pointer #18,PR for malloc(0) can return NULL or valid pointer #18,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,20,2016-08-18T02:52:35Z,2016-08-22T17:04:40Z,2016-08-23T01:14:21Z,MERGED,True,218,39,3,https://github.com/yaweiw,PR for malloc(0) can return NULL or valid pointer #18,2,[],https://github.com/Azure/azure-c-shared-utility/pull/20,https://github.com/yaweiw,2,https://github.com/Azure/azure-c-shared-utility/pull/20#issuecomment-240610414,PR for malloc(0) can return NULL or valid pointer #18,@dcristoloveanu FYI,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,20,2016-08-18T02:52:35Z,2016-08-22T17:04:40Z,2016-08-23T01:14:21Z,MERGED,True,218,39,3,https://github.com/yaweiw,PR for malloc(0) can return NULL or valid pointer #18,2,[],https://github.com/Azure/azure-c-shared-utility/pull/20,https://github.com/dcristoloveanu,3,https://github.com/Azure/azure-c-shared-utility/pull/20#issuecomment-240936319,PR for malloc(0) can return NULL or valid pointer #18,"Sorry for the delay, I just got to this.

In reply to: 240610414 [](ancestors = 240610414)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,20,2016-08-18T02:52:35Z,2016-08-22T17:04:40Z,2016-08-23T01:14:21Z,MERGED,True,218,39,3,https://github.com/yaweiw,PR for malloc(0) can return NULL or valid pointer #18,2,[],https://github.com/Azure/azure-c-shared-utility/pull/20,https://github.com/dcristoloveanu,4,https://github.com/Azure/azure-c-shared-utility/pull/20#issuecomment-240936979,PR for malloc(0) can return NULL or valid pointer #18,@anporumb is added to the review. #Closed,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,20,2016-08-18T02:52:35Z,2016-08-22T17:04:40Z,2016-08-23T01:14:21Z,MERGED,True,218,39,3,https://github.com/yaweiw,PR for malloc(0) can return NULL or valid pointer #18,2,[],https://github.com/Azure/azure-c-shared-utility/pull/20,https://github.com/dcristoloveanu,5,https://github.com/Azure/azure-c-shared-utility/pull/20#issuecomment-240939475,PR for malloc(0) can return NULL or valid pointer #18,"Done reviewing, I'll have a look tomorrow morning to merge in the new iteration.

In reply to: 240936319 [](ancestors = 240936319,240610414)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,20,2016-08-18T02:52:35Z,2016-08-22T17:04:40Z,2016-08-23T01:14:21Z,MERGED,True,218,39,3,https://github.com/yaweiw,PR for malloc(0) can return NULL or valid pointer #18,2,[],https://github.com/Azure/azure-c-shared-utility/pull/20,https://github.com/dcristoloveanu,6,https://github.com/Azure/azure-c-shared-utility/pull/20#issuecomment-240939478,PR for malloc(0) can return NULL or valid pointer #18,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,20,2016-08-18T02:52:35Z,2016-08-22T17:04:40Z,2016-08-23T01:14:21Z,MERGED,True,218,39,3,https://github.com/yaweiw,PR for malloc(0) can return NULL or valid pointer #18,2,[],https://github.com/Azure/azure-c-shared-utility/pull/20,https://github.com/yaweiw,7,https://github.com/Azure/azure-c-shared-utility/pull/20#issuecomment-240952628,PR for malloc(0) can return NULL or valid pointer #18,@dcristoloveanu please have a look at the new iteration.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,20,2016-08-18T02:52:35Z,2016-08-22T17:04:40Z,2016-08-23T01:14:21Z,MERGED,True,218,39,3,https://github.com/yaweiw,PR for malloc(0) can return NULL or valid pointer #18,2,[],https://github.com/Azure/azure-c-shared-utility/pull/20,https://github.com/dcristoloveanu,8,https://github.com/Azure/azure-c-shared-utility/pull/20#issuecomment-241129386,PR for malloc(0) can return NULL or valid pointer #18,"Done, only some minor changes in tests needed and I will pull this in.

In reply to: 240952628 [](ancestors = 240952628)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,20,2016-08-18T02:52:35Z,2016-08-22T17:04:40Z,2016-08-23T01:14:21Z,MERGED,True,218,39,3,https://github.com/yaweiw,PR for malloc(0) can return NULL or valid pointer #18,2,[],https://github.com/Azure/azure-c-shared-utility/pull/20,https://github.com/dcristoloveanu,9,https://github.com/Azure/azure-c-shared-utility/pull/20#issuecomment-241129815,PR for malloc(0) can return NULL or valid pointer #18,"If you don't get to adjust the tests according to the comments I can do that myself tomorrow morning.

In reply to: 241129386 [](ancestors = 241129386,240952628)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,20,2016-08-18T02:52:35Z,2016-08-22T17:04:40Z,2016-08-23T01:14:21Z,MERGED,True,218,39,3,https://github.com/yaweiw,PR for malloc(0) can return NULL or valid pointer #18,2,[],https://github.com/Azure/azure-c-shared-utility/pull/20,https://github.com/yaweiw,10,https://github.com/Azure/azure-c-shared-utility/pull/20#issuecomment-241302088,PR for malloc(0) can return NULL or valid pointer #18,@dcristoloveanu feel free to add comments if you like and merge it. thanks.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,20,2016-08-18T02:52:35Z,2016-08-22T17:04:40Z,2016-08-23T01:14:21Z,MERGED,True,218,39,3,https://github.com/yaweiw,PR for malloc(0) can return NULL or valid pointer #18,2,[],https://github.com/Azure/azure-c-shared-utility/pull/20,https://github.com/dcristoloveanu,11,https://github.com/Azure/azure-c-shared-utility/pull/20#issuecomment-241473003,PR for malloc(0) can return NULL or valid pointer #18,"I have updated the code to have the appropriate /* Tests comments and merging this in now.

In reply to: 241302088 [](ancestors = 241302088)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,20,2016-08-18T02:52:35Z,2016-08-22T17:04:40Z,2016-08-23T01:14:21Z,MERGED,True,218,39,3,https://github.com/yaweiw,PR for malloc(0) can return NULL or valid pointer #18,2,[],https://github.com/Azure/azure-c-shared-utility/pull/20,https://github.com/yaweiw,12,https://github.com/Azure/azure-c-shared-utility/pull/20#issuecomment-241598871,PR for malloc(0) can return NULL or valid pointer #18,cool thanks @dcristoloveanu,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,21,2016-08-19T01:53:46Z,2016-09-03T07:53:44Z,2018-11-20T00:30:06Z,MERGED,True,255,166,11,https://github.com/damonbarry,updates to get OSX build working,2,[],https://github.com/Azure/azure-c-shared-utility/pull/21,https://github.com/damonbarry,1,https://github.com/Azure/azure-c-shared-utility/pull/21,"This gets azure-c-shared-utility building on OSX using the default arguments. I still need to make sure other cmake options build. I know valgrind fails, but need to consider whether that would be a different pull request.","This gets azure-c-shared-utility building on OSX using the default arguments. I still need to make sure other cmake options build. I know valgrind fails, but need to consider whether that would be a different pull request.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,21,2016-08-19T01:53:46Z,2016-09-03T07:53:44Z,2018-11-20T00:30:06Z,MERGED,True,255,166,11,https://github.com/damonbarry,updates to get OSX build working,2,[],https://github.com/Azure/azure-c-shared-utility/pull/21,https://github.com/dcristoloveanu,2,https://github.com/Azure/azure-c-shared-utility/pull/21#issuecomment-240910531,"This gets azure-c-shared-utility building on OSX using the default arguments. I still need to make sure other cmake options build. I know valgrind fails, but need to consider whether that would be a different pull request.",,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,22,2016-08-19T04:26:54Z,2016-08-19T05:59:56Z,2016-08-19T05:59:56Z,MERGED,True,1490,1297,3,https://github.com/dcristoloveanu,Convert wsio unittests to use umockc,3,[],https://github.com/Azure/azure-c-shared-utility/pull/22,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/22,"Convert wsio unittests to use umockc
Fix a leak in wsio option handling
Merge with latest develop","Convert wsio unittests to use umockc
Fix a leak in wsio option handling
Merge with latest develop",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,22,2016-08-19T04:26:54Z,2016-08-19T05:59:56Z,2016-08-19T05:59:56Z,MERGED,True,1490,1297,3,https://github.com/dcristoloveanu,Convert wsio unittests to use umockc,3,[],https://github.com/Azure/azure-c-shared-utility/pull/22,https://github.com/dcristoloveanu,2,https://github.com/Azure/azure-c-shared-utility/pull/22#issuecomment-240924966,"Convert wsio unittests to use umockc
Fix a leak in wsio option handling
Merge with latest develop",@jebrando is added to the review. #Closed,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,22,2016-08-19T04:26:54Z,2016-08-19T05:59:56Z,2016-08-19T05:59:56Z,MERGED,True,1490,1297,3,https://github.com/dcristoloveanu,Convert wsio unittests to use umockc,3,[],https://github.com/Azure/azure-c-shared-utility/pull/22,https://github.com/anporumb,3,https://github.com/Azure/azure-c-shared-utility/pull/22#issuecomment-240929125,"Convert wsio unittests to use umockc
Fix a leak in wsio option handling
Merge with latest develop",,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,24,2016-08-24T01:42:19Z,2016-12-20T00:35:27Z,2016-12-20T00:35:27Z,CLOSED,False,12,1,3,https://github.com/damienpontifex,Fixing warnings creating errors with -Werror when compiling with clang.,1,[],https://github.com/Azure/azure-c-shared-utility/pull/24,https://github.com/damienpontifex,1,https://github.com/Azure/azure-c-shared-utility/pull/24,"Builds with clang but unit test build still fails due to continued warnings in Azure-ctest submodule. So cmake generate with -Dskip_unittests=ON to ensure building just this project.
Tested a build with gcc also and hasn't caused any failures by these additions.
Associated with #13","Builds with clang but unit test build still fails due to continued warnings in Azure-ctest submodule. So cmake generate with -Dskip_unittests=ON to ensure building just this project.
Tested a build with gcc also and hasn't caused any failures by these additions.
Associated with #13",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,24,2016-08-24T01:42:19Z,2016-12-20T00:35:27Z,2016-12-20T00:35:27Z,CLOSED,False,12,1,3,https://github.com/damienpontifex,Fixing warnings creating errors with -Werror when compiling with clang.,1,[],https://github.com/Azure/azure-c-shared-utility/pull/24,https://github.com/olivierbloch,2,https://github.com/Azure/azure-c-shared-utility/pull/24#issuecomment-245976909,"Builds with clang but unit test build still fails due to continued warnings in Azure-ctest submodule. So cmake generate with -Dskip_unittests=ON to ensure building just this project.
Tested a build with gcc also and hasn't caused any failures by these additions.
Associated with #13","Thanks for your contribution, we are reviewing it.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,25,2016-08-24T02:07:38Z,2016-09-15T06:14:45Z,2016-09-15T06:14:45Z,CLOSED,False,176,18,3,https://github.com/randy-armstrong,Now possible to use OpenSSL on Windows by setting -Duse_openssl:BOOL=ON,2,[],https://github.com/Azure/azure-c-shared-utility/pull/25,https://github.com/randy-armstrong,1,https://github.com/Azure/azure-c-shared-utility/pull/25,"These updates have been tested with the azure-amqp-c project.
The message_receive_sample and message_sender_sample have been updated in a separate pull request.
They add 3 new IO options that:

set the TLS version
set the OpenSSL certificate verification callback.
set that data passed with 2)","These updates have been tested with the azure-amqp-c project.
The message_receive_sample and message_sender_sample have been updated in a separate pull request.
They add 3 new IO options that:

set the TLS version
set the OpenSSL certificate verification callback.
set that data passed with 2)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,25,2016-08-24T02:07:38Z,2016-09-15T06:14:45Z,2016-09-15T06:14:45Z,CLOSED,False,176,18,3,https://github.com/randy-armstrong,Now possible to use OpenSSL on Windows by setting -Duse_openssl:BOOL=ON,2,[],https://github.com/Azure/azure-c-shared-utility/pull/25,https://github.com/jebrando,2,https://github.com/Azure/azure-c-shared-utility/pull/25#issuecomment-245325998,"These updates have been tested with the azure-amqp-c project.
The message_receive_sample and message_sender_sample have been updated in a separate pull request.
They add 3 new IO options that:

set the TLS version
set the OpenSSL certificate verification callback.
set that data passed with 2)",Thank you for your contribution.  I will merge this change into develop.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,25,2016-08-24T02:07:38Z,2016-09-15T06:14:45Z,2016-09-15T06:14:45Z,CLOSED,False,176,18,3,https://github.com/randy-armstrong,Now possible to use OpenSSL on Windows by setting -Duse_openssl:BOOL=ON,2,[],https://github.com/Azure/azure-c-shared-utility/pull/25,https://github.com/randy-armstrong,3,https://github.com/Azure/azure-c-shared-utility/pull/25#issuecomment-246873624,"These updates have been tested with the azure-amqp-c project.
The message_receive_sample and message_sender_sample have been updated in a separate pull request.
They add 3 new IO options that:

set the TLS version
set the OpenSSL certificate verification callback.
set that data passed with 2)",Merged my fixes with the latest branch.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,25,2016-08-24T02:07:38Z,2016-09-15T06:14:45Z,2016-09-15T06:14:45Z,CLOSED,False,176,18,3,https://github.com/randy-armstrong,Now possible to use OpenSSL on Windows by setting -Duse_openssl:BOOL=ON,2,[],https://github.com/Azure/azure-c-shared-utility/pull/25,https://github.com/randy-armstrong,4,https://github.com/Azure/azure-c-shared-utility/pull/25#issuecomment-247174080,"These updates have been tested with the azure-amqp-c project.
The message_receive_sample and message_sender_sample have been updated in a separate pull request.
They add 3 new IO options that:

set the TLS version
set the OpenSSL certificate verification callback.
set that data passed with 2)",Fixed crash caused by access to deleted SSL object.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,25,2016-08-24T02:07:38Z,2016-09-15T06:14:45Z,2016-09-15T06:14:45Z,CLOSED,False,176,18,3,https://github.com/randy-armstrong,Now possible to use OpenSSL on Windows by setting -Duse_openssl:BOOL=ON,2,[],https://github.com/Azure/azure-c-shared-utility/pull/25,https://github.com/dcristoloveanu,5,https://github.com/Azure/azure-c-shared-utility/pull/25#issuecomment-247244479,"These updates have been tested with the azure-amqp-c project.
The message_receive_sample and message_sender_sample have been updated in a separate pull request.
They add 3 new IO options that:

set the TLS version
set the OpenSSL certificate verification callback.
set that data passed with 2)","This has been merged into the develop branch, closing PR.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,26,2016-09-06T15:39:32Z,2016-09-08T08:47:10Z,2016-09-08T08:47:10Z,CLOSED,False,10,3,1,https://github.com/srware,Fix lib install locations for multilib environments,2,[],https://github.com/Azure/azure-c-shared-utility/pull/26,https://github.com/srware,1,https://github.com/Azure/azure-c-shared-utility/pull/26,When installing libs or header files CMake variables should be used rather than using hard-coded paths. This can cause issues with multilib environments for example.,When installing libs or header files CMake variables should be used rather than using hard-coded paths. This can cause issues with multilib environments for example.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,26,2016-09-06T15:39:32Z,2016-09-08T08:47:10Z,2016-09-08T08:47:10Z,CLOSED,False,10,3,1,https://github.com/srware,Fix lib install locations for multilib environments,2,[],https://github.com/Azure/azure-c-shared-utility/pull/26,https://github.com/andrew-buckley,2,https://github.com/Azure/azure-c-shared-utility/pull/26#issuecomment-245312267,When installing libs or header files CMake variables should be used rather than using hard-coded paths. This can cause issues with multilib environments for example.,"This looks like the advantage is that it lets the user set where they want to install the libs and include files separately. Alternatively, a user can override the CMAKE_INSTALL_PREFIX variable to place the libs and include files somewhere other than the default. Would this accomplish what you're thinking?",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,26,2016-09-06T15:39:32Z,2016-09-08T08:47:10Z,2016-09-08T08:47:10Z,CLOSED,False,10,3,1,https://github.com/srware,Fix lib install locations for multilib environments,2,[],https://github.com/Azure/azure-c-shared-utility/pull/26,https://github.com/srware,3,https://github.com/Azure/azure-c-shared-utility/pull/26#issuecomment-245328905,When installing libs or header files CMake variables should be used rather than using hard-coded paths. This can cause issues with multilib environments for example.,"These variables are standard CMake variables which if not already populated will be populated by including GNUInstallDirs (https://cmake.org/cmake/help/v3.0/module/GNUInstallDirs.html). I forgot to add the include but have updated the pull request.
I have put in a catch as a precaution for older CMake versions in case CMAKE_INSTALL_LIBDIR is not populated but I don't think this is necessary for 2.8.11 and above. CMAKE_INSTALL_PREFIX can still be used with this implementation.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,26,2016-09-06T15:39:32Z,2016-09-08T08:47:10Z,2016-09-08T08:47:10Z,CLOSED,False,10,3,1,https://github.com/srware,Fix lib install locations for multilib environments,2,[],https://github.com/Azure/azure-c-shared-utility/pull/26,https://github.com/andrew-buckley,4,https://github.com/Azure/azure-c-shared-utility/pull/26#issuecomment-245354774,When installing libs or header files CMake variables should be used rather than using hard-coded paths. This can cause issues with multilib environments for example.,@srware can you make this PR against develop instead of master?,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,26,2016-09-06T15:39:32Z,2016-09-08T08:47:10Z,2016-09-08T08:47:10Z,CLOSED,False,10,3,1,https://github.com/srware,Fix lib install locations for multilib environments,2,[],https://github.com/Azure/azure-c-shared-utility/pull/26,https://github.com/srware,5,https://github.com/Azure/azure-c-shared-utility/pull/26#issuecomment-245533330,When installing libs or header files CMake variables should be used rather than using hard-coded paths. This can cause issues with multilib environments for example.,Going to close this one and open a new PR against develop rather than creating a merge or rebase mess :),True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,27,2016-09-07T13:38:37Z,2016-09-15T16:59:00Z,2016-09-15T16:59:00Z,MERGED,True,1,1,1,https://github.com/srware,Add missing link library UUID,1,[],https://github.com/Azure/azure-c-shared-utility/pull/27,https://github.com/srware,1,https://github.com/Azure/azure-c-shared-utility/pull/27,When building with Yocto I get multiple 'undefined reference' errors relating to uuid functions when linking against the shared utility library unless 'uuid' is included as a target link library.,When building with Yocto I get multiple 'undefined reference' errors relating to uuid functions when linking against the shared utility library unless 'uuid' is included as a target link library.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,27,2016-09-07T13:38:37Z,2016-09-15T16:59:00Z,2016-09-15T16:59:00Z,MERGED,True,1,1,1,https://github.com/srware,Add missing link library UUID,1,[],https://github.com/Azure/azure-c-shared-utility/pull/27,https://github.com/andrew-buckley,2,https://github.com/Azure/azure-c-shared-utility/pull/27#issuecomment-247382407,When building with Yocto I get multiple 'undefined reference' errors relating to uuid functions when linking against the shared utility library unless 'uuid' is included as a target link library.,"Hi @srware. I actually ran into this problem yesterday while working on making our gateway sdk installable/finable in cmake. This looks good to me, maybe @jebrando would like to have a look?",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,29,2016-09-08T08:57:31Z,2016-09-08T16:25:19Z,2016-09-08T16:25:19Z,MERGED,True,5,2,1,https://github.com/srware,Use GNU install directories to determine where to install files,1,[],https://github.com/Azure/azure-c-shared-utility/pull/29,https://github.com/srware,1,https://github.com/Azure/azure-c-shared-utility/pull/29,This allows each distro or user to specify where each type of file should be installed. By default GNU coding standards are adhered to.,This allows each distro or user to specify where each type of file should be installed. By default GNU coding standards are adhered to.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,30,2016-09-09T00:17:52Z,2016-09-27T22:58:50Z,2016-09-30T06:45:31Z,MERGED,True,1,1,1,https://github.com/damienpontifex,apple openssl include directories,1,[],https://github.com/Azure/azure-c-shared-utility/pull/30,https://github.com/damienpontifex,1,https://github.com/Azure/azure-c-shared-utility/pull/30,Errors when building on OS X for openssl header files not found. I have openssl installed with homebrew and adding this enabled a successful build with OpenSSLDir='/usr/local/opt/openssl',Errors when building on OS X for openssl header files not found. I have openssl installed with homebrew and adding this enabled a successful build with OpenSSLDir='/usr/local/opt/openssl',True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,30,2016-09-09T00:17:52Z,2016-09-27T22:58:50Z,2016-09-30T06:45:31Z,MERGED,True,1,1,1,https://github.com/damienpontifex,apple openssl include directories,1,[],https://github.com/Azure/azure-c-shared-utility/pull/30,https://github.com/olivierbloch,2,https://github.com/Azure/azure-c-shared-utility/pull/30#issuecomment-245980079,Errors when building on OS X for openssl header files not found. I have openssl installed with homebrew and adding this enabled a successful build with OpenSSLDir='/usr/local/opt/openssl',Thanks for your contribution. We will pull this one in real soon.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,31,2016-09-19T21:48:23Z,2016-10-11T23:57:36Z,2016-10-11T23:57:36Z,MERGED,True,4,2,1,https://github.com/randy-armstrong,Fix OpenSSL memory leak after deinit().,2,[],https://github.com/Azure/azure-c-shared-utility/pull/31,https://github.com/randy-armstrong,1,https://github.com/Azure/azure-c-shared-utility/pull/31,Minor issue.,Minor issue.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,31,2016-09-19T21:48:23Z,2016-10-11T23:57:36Z,2016-10-11T23:57:36Z,MERGED,True,4,2,1,https://github.com/randy-armstrong,Fix OpenSSL memory leak after deinit().,2,[],https://github.com/Azure/azure-c-shared-utility/pull/31,https://github.com/randy-armstrong,2,https://github.com/Azure/azure-c-shared-utility/pull/31#issuecomment-248720795,Minor issue.,Added #ifdef as requested.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,33,2016-09-23T14:28:05Z,2016-09-27T22:50:18Z,2016-09-27T22:50:18Z,MERGED,True,1,0,1,https://github.com/AlexandreMarechal,Avoid looping call to lws_context_destroy leading to segmentation fault,1,[],https://github.com/Azure/azure-c-shared-utility/pull/33,https://github.com/AlexandreMarechal,1,https://github.com/Azure/azure-c-shared-utility/pull/33,"Hi,
I observe that lws_context_destroy() will call itself again through a callback in wsio.c leading to a segmentation fault.
This pull request is linked to:
https://github.com/Azure/azure-iot-sdks/issues/735
The proposed patched has been validated and I have been asked to create a PR.
Thanks.
Alexandre","Hi,
I observe that lws_context_destroy() will call itself again through a callback in wsio.c leading to a segmentation fault.
This pull request is linked to:
https://github.com/Azure/azure-iot-sdks/issues/735
The proposed patched has been validated and I have been asked to create a PR.
Thanks.
Alexandre",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,34,2016-10-09T07:45:04Z,2016-10-10T16:56:00Z,2016-10-10T16:56:00Z,MERGED,True,146,0,4,https://github.com/mariusz-r,Add basic FreeRTOS adapters,1,[],https://github.com/Azure/azure-c-shared-utility/pull/34,https://github.com/mariusz-r,1,https://github.com/Azure/azure-c-shared-utility/pull/34,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,35,2016-10-11T05:47:14Z,2016-10-11T17:59:48Z,2016-10-11T17:59:48Z,MERGED,True,0,26,1,https://github.com/mariusz-r,Remove separate agenttime for FreeRTOS,1,[],https://github.com/Azure/azure-c-shared-utility/pull/35,https://github.com/mariusz-r,1,https://github.com/Azure/azure-c-shared-utility/pull/35,Separated adapter not necessary. At least for now.,Separated adapter not necessary. At least for now.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,36,2016-10-25T15:21:35Z,2017-04-13T21:16:27Z,2017-04-13T21:16:27Z,MERGED,True,3671,3,16,https://github.com/ritazh,Port for ESP8266,33,[],https://github.com/Azure/azure-c-shared-utility/pull/36,https://github.com/ritazh,1,https://github.com/Azure/azure-c-shared-utility/pull/36,"@olivierbloch @tameraw @dcristoloveanu
This PR is part of the ESP8266 port of Azure IoT C SDK. It contains updates to C utility to enable ESP8266. Please take a 👀 . Thanks! Will squash commits after review is done.
Future PRs will contain deployment scripts for copying necessary files needed to run Azure IoT C sdk and mqtt samples as part of the ESP8266 RTOS SDK.","@olivierbloch @tameraw @dcristoloveanu
This PR is part of the ESP8266 port of Azure IoT C SDK. It contains updates to C utility to enable ESP8266. Please take a 👀 . Thanks! Will squash commits after review is done.
Future PRs will contain deployment scripts for copying necessary files needed to run Azure IoT C sdk and mqtt samples as part of the ESP8266 RTOS SDK.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,36,2016-10-25T15:21:35Z,2017-04-13T21:16:27Z,2017-04-13T21:16:27Z,MERGED,True,3671,3,16,https://github.com/ritazh,Port for ESP8266,33,[],https://github.com/Azure/azure-c-shared-utility/pull/36,https://github.com/ritazh,2,https://github.com/Azure/azure-c-shared-utility/pull/36#issuecomment-256795049,"@olivierbloch @tameraw @dcristoloveanu
This PR is part of the ESP8266 port of Azure IoT C SDK. It contains updates to C utility to enable ESP8266. Please take a 👀 . Thanks! Will squash commits after review is done.
Future PRs will contain deployment scripts for copying necessary files needed to run Azure IoT C sdk and mqtt samples as part of the ESP8266 RTOS SDK.",@mamokarz Thanks for taking a look at this PR. I think you reviewed the earliest commit instead of all my changes as a whole under the File changed tab. I just squashed all the commits to make it easier for review. Thanks! 🙇‍♀️,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,36,2016-10-25T15:21:35Z,2017-04-13T21:16:27Z,2017-04-13T21:16:27Z,MERGED,True,3671,3,16,https://github.com/ritazh,Port for ESP8266,33,[],https://github.com/Azure/azure-c-shared-utility/pull/36,https://github.com/ritazh,3,https://github.com/Azure/azure-c-shared-utility/pull/36#issuecomment-257134577,"@olivierbloch @tameraw @dcristoloveanu
This PR is part of the ESP8266 port of Azure IoT C SDK. It contains updates to C utility to enable ESP8266. Please take a 👀 . Thanks! Will squash commits after review is done.
Future PRs will contain deployment scripts for copying necessary files needed to run Azure IoT C sdk and mqtt samples as part of the ESP8266 RTOS SDK.",@mamokarz Just pushed a new commit adding updates based on your feedback. Please take another look. Thanks! 🙇‍♀️,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,36,2016-10-25T15:21:35Z,2017-04-13T21:16:27Z,2017-04-13T21:16:27Z,MERGED,True,3671,3,16,https://github.com/ritazh,Port for ESP8266,33,[],https://github.com/Azure/azure-c-shared-utility/pull/36,https://github.com/ritazh,4,https://github.com/Azure/azure-c-shared-utility/pull/36#issuecomment-257794698,"@olivierbloch @tameraw @dcristoloveanu
This PR is part of the ESP8266 port of Azure IoT C SDK. It contains updates to C utility to enable ESP8266. Please take a 👀 . Thanks! Will squash commits after review is done.
Future PRs will contain deployment scripts for copying necessary files needed to run Azure IoT C sdk and mqtt samples as part of the ESP8266 RTOS SDK.","@mamokarz Just pushed a new commit removing underlying_io, init, and deinit based on your feedback. Please take another look. Thanks!",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,36,2016-10-25T15:21:35Z,2017-04-13T21:16:27Z,2017-04-13T21:16:27Z,MERGED,True,3671,3,16,https://github.com/ritazh,Port for ESP8266,33,[],https://github.com/Azure/azure-c-shared-utility/pull/36,https://github.com/ritazh,5,https://github.com/Azure/azure-c-shared-utility/pull/36#issuecomment-263344131,"@olivierbloch @tameraw @dcristoloveanu
This PR is part of the ESP8266 port of Azure IoT C SDK. It contains updates to C utility to enable ESP8266. Please take a 👀 . Thanks! Will squash commits after review is done.
Future PRs will contain deployment scripts for copying necessary files needed to run Azure IoT C sdk and mqtt samples as part of the ESP8266 RTOS SDK.",@mamokarz Unit tests have been added. Please take another look. Thanks!,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,36,2016-10-25T15:21:35Z,2017-04-13T21:16:27Z,2017-04-13T21:16:27Z,MERGED,True,3671,3,16,https://github.com/ritazh,Port for ESP8266,33,[],https://github.com/Azure/azure-c-shared-utility/pull/36,https://github.com/mamokarz,6,https://github.com/Azure/azure-c-shared-utility/pull/36#issuecomment-263996064,"@olivierbloch @tameraw @dcristoloveanu
This PR is part of the ESP8266 port of Azure IoT C SDK. It contains updates to C utility to enable ESP8266. Please take a 👀 . Thanks! Will squash commits after review is done.
Future PRs will contain deployment scripts for copying necessary files needed to run Azure IoT C sdk and mqtt samples as part of the ESP8266 RTOS SDK.","Hi Rita,
I apologize for the wrong feedback at the end of your review, I removed it.
Marcos",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,36,2016-10-25T15:21:35Z,2017-04-13T21:16:27Z,2017-04-13T21:16:27Z,MERGED,True,3671,3,16,https://github.com/ritazh,Port for ESP8266,33,[],https://github.com/Azure/azure-c-shared-utility/pull/36,https://github.com/damonbarry,7,https://github.com/Azure/azure-c-shared-utility/pull/36#issuecomment-271007888,"@olivierbloch @tameraw @dcristoloveanu
This PR is part of the ESP8266 port of Azure IoT C SDK. It contains updates to C utility to enable ESP8266. Please take a 👀 . Thanks! Will squash commits after review is done.
Future PRs will contain deployment scripts for copying necessary files needed to run Azure IoT C sdk and mqtt samples as part of the ESP8266 RTOS SDK.",@ritazh Any update?,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,36,2016-10-25T15:21:35Z,2017-04-13T21:16:27Z,2017-04-13T21:16:27Z,MERGED,True,3671,3,16,https://github.com/ritazh,Port for ESP8266,33,[],https://github.com/Azure/azure-c-shared-utility/pull/36,https://github.com/ritazh,8,https://github.com/Azure/azure-c-shared-utility/pull/36#issuecomment-271041247,"@olivierbloch @tameraw @dcristoloveanu
This PR is part of the ESP8266 port of Azure IoT C SDK. It contains updates to C utility to enable ESP8266. Please take a 👀 . Thanks! Will squash commits after review is done.
Future PRs will contain deployment scripts for copying necessary files needed to run Azure IoT C sdk and mqtt samples as part of the ESP8266 RTOS SDK.",@damonbarry Will pick this back up again. Had to work on few other projects before. Sorry for the major delay. 🙇‍♀️,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,36,2016-10-25T15:21:35Z,2017-04-13T21:16:27Z,2017-04-13T21:16:27Z,MERGED,True,3671,3,16,https://github.com/ritazh,Port for ESP8266,33,[],https://github.com/Azure/azure-c-shared-utility/pull/36,https://github.com/ritazh,9,https://github.com/Azure/azure-c-shared-utility/pull/36#issuecomment-273421858,"@olivierbloch @tameraw @dcristoloveanu
This PR is part of the ESP8266 port of Azure IoT C SDK. It contains updates to C utility to enable ESP8266. Please take a 👀 . Thanks! Will squash commits after review is done.
Future PRs will contain deployment scripts for copying necessary files needed to run Azure IoT C sdk and mqtt samples as part of the ESP8266 RTOS SDK.",@mamokarz Thank you for your feedback. I have updated all the implementation as well as added unit tests per your request. Please take another look. Thanks!,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,36,2016-10-25T15:21:35Z,2017-04-13T21:16:27Z,2017-04-13T21:16:27Z,MERGED,True,3671,3,16,https://github.com/ritazh,Port for ESP8266,33,[],https://github.com/Azure/azure-c-shared-utility/pull/36,https://github.com/ritazh,10,https://github.com/Azure/azure-c-shared-utility/pull/36#issuecomment-274960965,"@olivierbloch @tameraw @dcristoloveanu
This PR is part of the ESP8266 port of Azure IoT C SDK. It contains updates to C utility to enable ESP8266. Please take a 👀 . Thanks! Will squash commits after review is done.
Future PRs will contain deployment scripts for copying necessary files needed to run Azure IoT C sdk and mqtt samples as part of the ESP8266 RTOS SDK.",@mamokarz Thanks for the feedback. Ready for another round of review. Will squash all the commits into one when ready. Thanks!,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,36,2016-10-25T15:21:35Z,2017-04-13T21:16:27Z,2017-04-13T21:16:27Z,MERGED,True,3671,3,16,https://github.com/ritazh,Port for ESP8266,33,[],https://github.com/Azure/azure-c-shared-utility/pull/36,https://github.com/ritazh,11,https://github.com/Azure/azure-c-shared-utility/pull/36#issuecomment-290545997,"@olivierbloch @tameraw @dcristoloveanu
This PR is part of the ESP8266 port of Azure IoT C SDK. It contains updates to C utility to enable ESP8266. Please take a 👀 . Thanks! Will squash commits after review is done.
Future PRs will contain deployment scripts for copying necessary files needed to run Azure IoT C sdk and mqtt samples as part of the ESP8266 RTOS SDK.",@mamokarz @tameraw ready for another round of review.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,42,2016-12-30T00:28:42Z,2017-01-12T22:02:05Z,2017-01-12T22:02:05Z,CLOSED,False,709,1,7,https://github.com/bboo81,Develop,2,[],https://github.com/Azure/azure-c-shared-utility/pull/42,https://github.com/bboo81,1,https://github.com/Azure/azure-c-shared-utility/pull/42,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,42,2016-12-30T00:28:42Z,2017-01-12T22:02:05Z,2017-01-12T22:02:05Z,CLOSED,False,709,1,7,https://github.com/bboo81,Develop,2,[],https://github.com/Azure/azure-c-shared-utility/pull/42,https://github.com/anporumb,2,https://github.com/Azure/azure-c-shared-utility/pull/42#issuecomment-272281615,,"I will be working on this to have it accepted. Once that happens, the GitHub pull request will automatically close.
Best Regards,
Andrei Porumb",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,42,2016-12-30T00:28:42Z,2017-01-12T22:02:05Z,2017-01-12T22:02:05Z,CLOSED,False,709,1,7,https://github.com/bboo81,Develop,2,[],https://github.com/Azure/azure-c-shared-utility/pull/42,https://github.com/anporumb,3,https://github.com/Azure/azure-c-shared-utility/pull/42#issuecomment-272297883,,"#42 has been checked in ""master"" branch. (we are deprecating develop).
Thank you for your contribution.
Best Regards,
Andrei Porumb",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,43,2017-01-04T20:13:02Z,2017-01-05T00:58:38Z,2017-01-09T19:57:57Z,CLOSED,False,2,2,2,https://github.com/cwrenniks,Required for clang on OSX,1,[],https://github.com/Azure/azure-c-shared-utility/pull/43,https://github.com/cwrenniks,1,https://github.com/Azure/azure-c-shared-utility/pull/43,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,43,2017-01-04T20:13:02Z,2017-01-05T00:58:38Z,2017-01-09T19:57:57Z,CLOSED,False,2,2,2,https://github.com/cwrenniks,Required for clang on OSX,1,[],https://github.com/Azure/azure-c-shared-utility/pull/43,https://github.com/damonbarry,2,https://github.com/Azure/azure-c-shared-utility/pull/43#issuecomment-270532534,,The only change needed was to base this work on develop instead master so I just did a cherry-pick and ran it through Jenkins. Commited as 5dc2e0b. Closing this PR...,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,43,2017-01-04T20:13:02Z,2017-01-05T00:58:38Z,2017-01-09T19:57:57Z,CLOSED,False,2,2,2,https://github.com/cwrenniks,Required for clang on OSX,1,[],https://github.com/Azure/azure-c-shared-utility/pull/43,https://github.com/cwrenniks,3,https://github.com/Azure/azure-c-shared-utility/pull/43#issuecomment-270537787,,"Ah, good call. I made the same mistake with the other PRs. Thanks Damon!",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,44,2017-01-12T08:39:08Z,2017-02-05T07:41:54Z,2017-02-05T07:41:54Z,CLOSED,False,725,0,6,https://github.com/lirenhe,Integrate with Azure IOT sdk with MICO board,1,[],https://github.com/Azure/azure-c-shared-utility/pull/44,https://github.com/lirenhe,1,https://github.com/Azure/azure-c-shared-utility/pull/44,"This is the init work that we make Azure IOT sdk work in MICO platform.
MICO is a company located in China who product MXChip board.
Here is the site http://mico.io/ (In Chinese)
Some note about this change:

MICO OS has customized makefile for those OS, so we could not use folder name in the 'including'
That system contains a header file of platform.h, so in order to avoid conflict, we renamed platform.h to platform_mico.h","This is the init work that we make Azure IOT sdk work in MICO platform.
MICO is a company located in China who product MXChip board.
Here is the site http://mico.io/ (In Chinese)
Some note about this change:

MICO OS has customized makefile for those OS, so we could not use folder name in the 'including'
That system contains a header file of platform.h, so in order to avoid conflict, we renamed platform.h to platform_mico.h",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,44,2017-01-12T08:39:08Z,2017-02-05T07:41:54Z,2017-02-05T07:41:54Z,CLOSED,False,725,0,6,https://github.com/lirenhe,Integrate with Azure IOT sdk with MICO board,1,[],https://github.com/Azure/azure-c-shared-utility/pull/44,https://github.com/anporumb,2,https://github.com/Azure/azure-c-shared-utility/pull/44#issuecomment-272567621,"This is the init work that we make Azure IOT sdk work in MICO platform.
MICO is a company located in China who product MXChip board.
Here is the site http://mico.io/ (In Chinese)
Some note about this change:

MICO OS has customized makefile for those OS, so we could not use folder name in the 'including'
That system contains a header file of platform.h, so in order to avoid conflict, we renamed platform.h to platform_mico.h","We are discussing internally whether we will take this in.
Best Regards,
Andrei Porumb",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,44,2017-01-12T08:39:08Z,2017-02-05T07:41:54Z,2017-02-05T07:41:54Z,CLOSED,False,725,0,6,https://github.com/lirenhe,Integrate with Azure IOT sdk with MICO board,1,[],https://github.com/Azure/azure-c-shared-utility/pull/44,https://github.com/dcristoloveanu,3,https://github.com/Azure/azure-c-shared-utility/pull/44#issuecomment-275025072,"This is the init work that we make Azure IOT sdk work in MICO platform.
MICO is a company located in China who product MXChip board.
Here is the site http://mico.io/ (In Chinese)
Some note about this change:

MICO OS has customized makefile for those OS, so we could not use folder name in the 'including'
That system contains a header file of platform.h, so in order to avoid conflict, we renamed platform.h to platform_mico.h","Hi @lirenhe,
We have reviewed this pull request. Generally the code looks OK. As a general comment the socket APIs seem not to have the return codes checked and that should definitely be addressed. In order to pull this into mainline we also require unittests and a requirements document to accompany the checked in modules.
We typically have one .md file with the requirements for the unit/module being developed and we also typically have a unit test suite covering those requirements.
Examples for the requirements docs are in the devdoc folder and examples of unit test suites are in the tests folder.
For testing we use umock_c in order to mock calls and allow writing true unit tests. There are plenty of examples in the repo in the tests folder.
We will also need a build script that will allow us to build this either on a Linux machine or on a Windows one. We prefer Linux since it allows for an easier build of a Docker container at the moment. This is needed in order that we do not break the code when we check in new bits.
Until these are resolved, in order to have this available for your customers I would like to suggest keeping this code in a fork that you make public to your customers.
Thanks,
/Dan",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,44,2017-01-12T08:39:08Z,2017-02-05T07:41:54Z,2017-02-05T07:41:54Z,CLOSED,False,725,0,6,https://github.com/lirenhe,Integrate with Azure IOT sdk with MICO board,1,[],https://github.com/Azure/azure-c-shared-utility/pull/44,https://github.com/dcristoloveanu,4,https://github.com/Azure/azure-c-shared-utility/pull/44#issuecomment-277503030,"This is the init work that we make Azure IOT sdk work in MICO platform.
MICO is a company located in China who product MXChip board.
Here is the site http://mico.io/ (In Chinese)
Some note about this change:

MICO OS has customized makefile for those OS, so we could not use folder name in the 'including'
That system contains a header file of platform.h, so in order to avoid conflict, we renamed platform.h to platform_mico.h","@lirenhe
Closing, since we assume that you are keeping the code in a fork anyway.
If you would like to contribute this with tests and the build script feel free to reopen.
Thanks,
/Dan",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,52,2017-02-07T05:36:12Z,2017-02-07T22:03:41Z,2017-02-07T22:08:08Z,MERGED,True,4,0,1,https://github.com/damonbarry,Enable CMake policy to use @rpath on Mac,1,[],https://github.com/Azure/azure-c-shared-utility/pull/52,https://github.com/damonbarry,1,https://github.com/Azure/azure-c-shared-utility/pull/52,"I hit a CMake warning while trying to compile the gateway SDK, which depends on azure-c-shared-utility. The warning recommended that I explicitly enable a Mac-specific policy that directs CMake to use @rpath.","I hit a CMake warning while trying to compile the gateway SDK, which depends on azure-c-shared-utility. The warning recommended that I explicitly enable a Mac-specific policy that directs CMake to use @rpath.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,52,2017-02-07T05:36:12Z,2017-02-07T22:03:41Z,2017-02-07T22:08:08Z,MERGED,True,4,0,1,https://github.com/damonbarry,Enable CMake policy to use @rpath on Mac,1,[],https://github.com/Azure/azure-c-shared-utility/pull/52,https://github.com/anporumb,2,https://github.com/Azure/azure-c-shared-utility/pull/52#issuecomment-278152416,"I hit a CMake warning while trying to compile the gateway SDK, which depends on azure-c-shared-utility. The warning recommended that I explicitly enable a Mac-specific policy that directs CMake to use @rpath.",LGTM,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,53,2017-02-07T07:28:38Z,2017-02-07T22:18:02Z,2017-02-07T22:19:36Z,MERGED,True,3,1,1,https://github.com/damonbarry,Use CMake find_package() for curl,1,[],https://github.com/Azure/azure-c-shared-utility/pull/53,https://github.com/damonbarry,1,https://github.com/Azure/azure-c-shared-utility/pull/53,"When cross-compiling (and potentially in other scenarios too), the linker can't find curl because it isn't in the default location. This fix uses CMake's find_package() machinery to locate curl.","When cross-compiling (and potentially in other scenarios too), the linker can't find curl because it isn't in the default location. This fix uses CMake's find_package() machinery to locate curl.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,53,2017-02-07T07:28:38Z,2017-02-07T22:18:02Z,2017-02-07T22:19:36Z,MERGED,True,3,1,1,https://github.com/damonbarry,Use CMake find_package() for curl,1,[],https://github.com/Azure/azure-c-shared-utility/pull/53,https://github.com/anporumb,2,https://github.com/Azure/azure-c-shared-utility/pull/53#issuecomment-278152276,"When cross-compiling (and potentially in other scenarios too), the linker can't find curl because it isn't in the default location. This fix uses CMake's find_package() machinery to locate curl.",LGTM.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,54,2017-02-14T17:10:46Z,2017-02-14T17:42:59Z,2017-02-14T18:28:18Z,MERGED,True,1,1,1,https://github.com/damonbarry,Handle SAL headers for macOS too,1,[],https://github.com/Azure/azure-c-shared-utility/pull/54,https://github.com/damonbarry,1,https://github.com/Azure/azure-c-shared-utility/pull/54,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,57,2017-02-24T08:00:18Z,2017-03-06T19:29:59Z,2017-03-17T05:36:14Z,CLOSED,False,4,0,1,https://github.com/vjrantal,Call on_send_complete in case errors occur,1,[],https://github.com/Azure/azure-c-shared-utility/pull/57,https://github.com/vjrantal,1,https://github.com/Azure/azure-c-shared-utility/pull/57,Fixes Azure/azure-iot-sdk-c#73.,Fixes Azure/azure-iot-sdk-c#73.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,57,2017-02-24T08:00:18Z,2017-03-06T19:29:59Z,2017-03-17T05:36:14Z,CLOSED,False,4,0,1,https://github.com/vjrantal,Call on_send_complete in case errors occur,1,[],https://github.com/Azure/azure-c-shared-utility/pull/57,https://github.com/msftclas,2,https://github.com/Azure/azure-c-shared-utility/pull/57#issuecomment-282228411,Fixes Azure/azure-iot-sdk-c#73.,"@vjrantal,
Thanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.
Thanks,
Microsoft Pull Request Bot",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,57,2017-02-24T08:00:18Z,2017-03-06T19:29:59Z,2017-03-17T05:36:14Z,CLOSED,False,4,0,1,https://github.com/vjrantal,Call on_send_complete in case errors occur,1,[],https://github.com/Azure/azure-c-shared-utility/pull/57,https://github.com/dcristoloveanu,3,https://github.com/Azure/azure-c-shared-utility/pull/57#issuecomment-284505208,Fixes Azure/azure-iot-sdk-c#73.,"Hi @vjrantal
Firstly I am sorry it took so long for me to get to review this change.
The _send functions of the XIO interface do not need to call the on_send_complete in case of errors. The error gets returned immediately and the layer that called send should deal with it right away.
There most likely is something else wrong for Azure/azure-iot-sdk-c#73. One of our devs is taking a look at that issue and we will have a fix for it soon.
Let me know if I missed anything.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,57,2017-02-24T08:00:18Z,2017-03-06T19:29:59Z,2017-03-17T05:36:14Z,CLOSED,False,4,0,1,https://github.com/vjrantal,Call on_send_complete in case errors occur,1,[],https://github.com/Azure/azure-c-shared-utility/pull/57,https://github.com/vjrantal,4,https://github.com/Azure/azure-c-shared-utility/pull/57#issuecomment-284629166,Fixes Azure/azure-iot-sdk-c#73.,"@dcristoloveanu I was basically looking at 
  
    
      azure-c-shared-utility/adapters/tlsio_arduino.c
    
    
        Lines 377 to 378
      in
      abf2d4b
    
  
  
    

        
          
           /* Codes_SRS_TLSIO_ARDUINO_21_003: [ The tlsio_arduino shall report the send operation status using the IO_SEND_RESULT enumerator defined in the `xio.h`. ]*/ 
        

        
          
           on_send_complete(callback_context, IO_SEND_ERROR); 
        
    
  

 as reference. I wonder should the Arduino implementation be updated since that seems to be calling on_send_complete in case of errors? If I got it right, the right requirement would be to call on_send_complete only in case of success, but never in case of error?",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,57,2017-02-24T08:00:18Z,2017-03-06T19:29:59Z,2017-03-17T05:36:14Z,CLOSED,False,4,0,1,https://github.com/vjrantal,Call on_send_complete in case errors occur,1,[],https://github.com/Azure/azure-c-shared-utility/pull/57,https://github.com/vjrantal,5,https://github.com/Azure/azure-c-shared-utility/pull/57#issuecomment-285590498,Fixes Azure/azure-iot-sdk-c#73.,"@dcristoloveanu Can you give your thoughts on the comment above? This relates to the ESP8266 port where currently, the on_send_complete is called in case of errors similarly than in the Arduino code ( see this line https://github.com/Azure/azure-c-shared-utility/pull/36/files#diff-8c46433401166533c0791c5eb3f9ac77R798 ). However, based on #57 (comment) there is no need to call it. Which way would you recommend and should all adapters have the same behavior?",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,57,2017-02-24T08:00:18Z,2017-03-06T19:29:59Z,2017-03-17T05:36:14Z,CLOSED,False,4,0,1,https://github.com/vjrantal,Call on_send_complete in case errors occur,1,[],https://github.com/Azure/azure-c-shared-utility/pull/57,https://github.com/dcristoloveanu,6,https://github.com/Azure/azure-c-shared-utility/pull/57#issuecomment-287271332,Fixes Azure/azure-iot-sdk-c#73.,"@vjrantal I am extremely sorry about the delay, this got unnoticed for quite a while becaus ethe PR was closed. Lesson learned.
The _send functions should return immediately with an error if the error is in the context of the _send call. In that case they should not trigger the callback as it is unnecessary. The caller knows by the result of send that there is no way the send will proceed so it should take any action needed when the send fails.
So any XIO adapters that do call send_complete in _send() are wrong and have to be fixed.
Also for quite some time now we wanted to put up a spec for XIO so that it is clear what the intent is. Hope to get to it soon.
Let me know if this makes sense or not.
Thanks,
/Dan",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,59,2017-02-27T21:18:00Z,2017-02-27T21:58:24Z,2017-02-27T21:58:24Z,MERGED,True,1,1,1,https://github.com/rfairfax,Update WolfSSL driver to use TLS1.2,1,[],https://github.com/Azure/azure-c-shared-utility/pull/59,https://github.com/rfairfax,1,https://github.com/Azure/azure-c-shared-utility/pull/59,"Updates the WolfSSL TLS driver to negotiate TLS1.2, which has a number of security improvements over its previous use of TLS1.0.
All unit tests pass, basic manual testing of an app creating an AMQP connection passes.","Updates the WolfSSL TLS driver to negotiate TLS1.2, which has a number of security improvements over its previous use of TLS1.0.
All unit tests pass, basic manual testing of an app creating an AMQP connection passes.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,59,2017-02-27T21:18:00Z,2017-02-27T21:58:24Z,2017-02-27T21:58:24Z,MERGED,True,1,1,1,https://github.com/rfairfax,Update WolfSSL driver to use TLS1.2,1,[],https://github.com/Azure/azure-c-shared-utility/pull/59,https://github.com/msftclas,2,https://github.com/Azure/azure-c-shared-utility/pull/59#issuecomment-282856361,"Updates the WolfSSL TLS driver to negotiate TLS1.2, which has a number of security improvements over its previous use of TLS1.0.
All unit tests pass, basic manual testing of an app creating an AMQP connection passes.","This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.
Thanks,
Microsoft Pull Request Bot",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,61,2017-03-13T21:35:33Z,2017-03-14T16:49:07Z,2017-03-14T21:40:44Z,CLOSED,False,0,0,0,https://github.com/damonbarry,Remove missing exports,0,[],https://github.com/Azure/azure-c-shared-utility/pull/61,https://github.com/damonbarry,1,https://github.com/Azure/azure-c-shared-utility/pull/61,Also add a Jenkins script that will help us catch this problem in the future. After this script is checked in we'll create a new Jenkins job to call it.,Also add a Jenkins script that will help us catch this problem in the future. After this script is checked in we'll create a new Jenkins job to call it.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,65,2017-03-23T18:00:03Z,2017-03-23T19:05:55Z,2017-03-23T22:50:28Z,MERGED,True,7,3,1,https://github.com/damonbarry,Don't add VS unit test include path to target in VS2017,1,[],https://github.com/Azure/azure-c-shared-utility/pull/65,https://github.com/damonbarry,1,https://github.com/Azure/azure-c-shared-utility/pull/65,"This fixes a problem that prevents the gateway from building in VS 2017. The gateway has several unit test projects that use the older cpp-based micromock framework. In VS 2017, the directory being added to the micromock_cpp_unittest target doesn't exist, but the environment already has the right include path, so we can simply skip this CMake command.","This fixes a problem that prevents the gateway from building in VS 2017. The gateway has several unit test projects that use the older cpp-based micromock framework. In VS 2017, the directory being added to the micromock_cpp_unittest target doesn't exist, but the environment already has the right include path, so we can simply skip this CMake command.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,65,2017-03-23T18:00:03Z,2017-03-23T19:05:55Z,2017-03-23T22:50:28Z,MERGED,True,7,3,1,https://github.com/damonbarry,Don't add VS unit test include path to target in VS2017,1,[],https://github.com/Azure/azure-c-shared-utility/pull/65,https://github.com/damonbarry,2,https://github.com/Azure/azure-c-shared-utility/pull/65#issuecomment-288809022,"This fixes a problem that prevents the gateway from building in VS 2017. The gateway has several unit test projects that use the older cpp-based micromock framework. In VS 2017, the directory being added to the micromock_cpp_unittest target doesn't exist, but the environment already has the right include path, so we can simply skip this CMake command.",@andrew-buckley @Azure/iot-gateway-devs,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,66,2017-03-23T23:25:07Z,2017-03-23T23:37:11Z,2017-03-23T23:40:19Z,MERGED,True,218,216,1,https://github.com/damonbarry,Uws exports,3,[],https://github.com/Azure/azure-c-shared-utility/pull/66,https://github.com/damonbarry,1,https://github.com/Azure/azure-c-shared-utility/pull/66,A couple new functions didn't make it into the aziotsharedutil.def file...adding them now.,A couple new functions didn't make it into the aziotsharedutil.def file...adding them now.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,69,2017-04-04T21:53:08Z,2017-04-11T17:32:23Z,2017-04-11T17:37:26Z,MERGED,True,14,5,3,https://github.com/mrohera,Changes to squash compiler warnings,1,[],https://github.com/Azure/azure-c-shared-utility/pull/69,https://github.com/mrohera,1,https://github.com/Azure/azure-c-shared-utility/pull/69,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,69,2017-04-04T21:53:08Z,2017-04-11T17:32:23Z,2017-04-11T17:37:26Z,MERGED,True,14,5,3,https://github.com/mrohera,Changes to squash compiler warnings,1,[],https://github.com/Azure/azure-c-shared-utility/pull/69,https://github.com/jebrando,2,https://github.com/Azure/azure-c-shared-utility/pull/69#issuecomment-293335747,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,70,2017-04-11T06:23:16Z,2017-04-11T21:29:16Z,2018-01-03T19:03:29Z,MERGED,True,43,42,14,https://github.com/dcristoloveanu,Fixed to be able to compile production code with /TP,1,[],https://github.com/Azure/azure-c-shared-utility/pull/70,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/70,Fixed to be able to compile production code with /TP,Fixed to be able to compile production code with /TP,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,71,2017-04-11T17:16:55Z,2017-04-11T18:52:54Z,2017-04-11T18:52:54Z,CLOSED,False,1,1,1,https://github.com/anporumb,use latest umock_c,1,[],https://github.com/Azure/azure-c-shared-utility/pull/71,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/71,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,72,2017-04-15T06:30:19Z,2017-04-17T18:16:04Z,2018-01-03T19:03:27Z,MERGED,True,29,25,6,https://github.com/dcristoloveanu,Add option to disable Cpp Unit tests,1,[],https://github.com/Azure/azure-c-shared-utility/pull/72,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/72,Add option to disable Cpp Unit tests,Add option to disable Cpp Unit tests,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,72,2017-04-15T06:30:19Z,2017-04-17T18:16:04Z,2018-01-03T19:03:27Z,MERGED,True,29,25,6,https://github.com/dcristoloveanu,Add option to disable Cpp Unit tests,1,[],https://github.com/Azure/azure-c-shared-utility/pull/72,https://github.com/jebrando,2,https://github.com/Azure/azure-c-shared-utility/pull/72#issuecomment-294540410,Add option to disable Cpp Unit tests,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,75,2017-05-08T05:22:05Z,2017-05-09T04:15:12Z,2018-01-03T19:03:27Z,MERGED,True,148,34,16,https://github.com/dcristoloveanu,Fix error for building production code on VS2008,1,[],https://github.com/Azure/azure-c-shared-utility/pull/75,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/75,"Fix error for building production code on VS2008.
Added stdint.h and inttypes.h with minimal code needed to satisfy building the libs.","Fix error for building production code on VS2008.
Added stdint.h and inttypes.h with minimal code needed to satisfy building the libs.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,75,2017-05-08T05:22:05Z,2017-05-09T04:15:12Z,2018-01-03T19:03:27Z,MERGED,True,148,34,16,https://github.com/dcristoloveanu,Fix error for building production code on VS2008,1,[],https://github.com/Azure/azure-c-shared-utility/pull/75,https://github.com/tameraw,2,https://github.com/Azure/azure-c-shared-utility/pull/75#issuecomment-300005166,"Fix error for building production code on VS2008.
Added stdint.h and inttypes.h with minimal code needed to satisfy building the libs.",,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,76,2017-05-10T23:08:14Z,2017-05-12T00:29:56Z,2017-05-12T00:29:57Z,MERGED,True,221,12,4,https://github.com/anporumb,add getlasterror for windows,9,[],https://github.com/Azure/azure-c-shared-utility/pull/76,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/76,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,76,2017-05-10T23:08:14Z,2017-05-12T00:29:56Z,2017-05-12T00:29:57Z,MERGED,True,221,12,4,https://github.com/anporumb,add getlasterror for windows,9,[],https://github.com/Azure/azure-c-shared-utility/pull/76,https://github.com/jebrando,2,https://github.com/Azure/azure-c-shared-utility/pull/76#issuecomment-300638299,,"(void)vprintf(format, args);

If you would be so kind since you're in this file change all the tabs to spaces or vise versa.

Refers to: src/consolelogger.c:214 in ccab298. [](commit_id = ccab298, deletion_comment = False)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,76,2017-05-10T23:08:14Z,2017-05-12T00:29:56Z,2017-05-12T00:29:57Z,MERGED,True,221,12,4,https://github.com/anporumb,add getlasterror for windows,9,[],https://github.com/Azure/azure-c-shared-utility/pull/76,https://github.com/jebrando,3,https://github.com/Azure/azure-c-shared-utility/pull/76#issuecomment-300921572,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,77,2017-05-17T02:24:08Z,2017-05-17T22:39:32Z,2018-01-03T19:03:26Z,MERGED,True,1988,1199,63,https://github.com/dcristoloveanu,Fix errors when building unittests with VS2008,1,[],https://github.com/Azure/azure-c-shared-utility/pull/77,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/77,"Mostly fix mixing of code and variable declarations.
Some fixes were needed to define EAGAIN and similar error codes (that are not C99)","Mostly fix mixing of code and variable declarations.
Some fixes were needed to define EAGAIN and similar error codes (that are not C99)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,77,2017-05-17T02:24:08Z,2017-05-17T22:39:32Z,2018-01-03T19:03:26Z,MERGED,True,1988,1199,63,https://github.com/dcristoloveanu,Fix errors when building unittests with VS2008,1,[],https://github.com/Azure/azure-c-shared-utility/pull/77,https://github.com/jebrando,2,https://github.com/Azure/azure-c-shared-utility/pull/77#issuecomment-302141995,"Mostly fix mixing of code and variable declarations.
Some fixes were needed to define EAGAIN and similar error codes (that are not C99)",,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,78,2017-05-25T06:48:08Z,2017-06-26T05:23:03Z,2018-01-11T22:08:59Z,MERGED,True,26,17,1,https://github.com/dcristoloveanu,Build the SHARED lib as part of the regular build,1,[],https://github.com/Azure/azure-c-shared-utility/pull/78,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/78,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,78,2017-05-25T06:48:08Z,2017-06-26T05:23:03Z,2018-01-11T22:08:59Z,MERGED,True,26,17,1,https://github.com/dcristoloveanu,Build the SHARED lib as part of the regular build,1,[],https://github.com/Azure/azure-c-shared-utility/pull/78,https://github.com/dcristoloveanu,2,https://github.com/Azure/azure-c-shared-utility/pull/78#issuecomment-304080913,,"@darobs Can you have a look at the comments and let me know?
Thanks!
/Dan #Resolved",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,79,2017-05-25T18:29:17Z,2017-05-25T19:00:54Z,2018-01-03T19:03:23Z,MERGED,True,1,4,1,https://github.com/dcristoloveanu,Fix CPlusPlus guard for xlogging.h,1,[],https://github.com/Azure/azure-c-shared-utility/pull/79,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/79,Fix CPlusPlus guard for xlogging.h,Fix CPlusPlus guard for xlogging.h,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,79,2017-05-25T18:29:17Z,2017-05-25T19:00:54Z,2018-01-03T19:03:23Z,MERGED,True,1,4,1,https://github.com/dcristoloveanu,Fix CPlusPlus guard for xlogging.h,1,[],https://github.com/Azure/azure-c-shared-utility/pull/79,https://github.com/jebrando,2,https://github.com/Azure/azure-c-shared-utility/pull/79#issuecomment-304087312,Fix CPlusPlus guard for xlogging.h,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,80,2017-05-30T04:40:40Z,2017-05-30T17:12:46Z,2018-01-03T19:03:24Z,MERGED,True,40,24,3,https://github.com/dcristoloveanu,Fix errors when building tests with VS2008,1,[],https://github.com/Azure/azure-c-shared-utility/pull/80,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/80,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,80,2017-05-30T04:40:40Z,2017-05-30T17:12:46Z,2018-01-03T19:03:24Z,MERGED,True,40,24,3,https://github.com/dcristoloveanu,Fix errors when building tests with VS2008,1,[],https://github.com/Azure/azure-c-shared-utility/pull/80,https://github.com/jebrando,2,https://github.com/Azure/azure-c-shared-utility/pull/80#issuecomment-304939415,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,81,2017-05-30T18:29:27Z,2017-05-30T22:34:54Z,2018-01-11T22:08:56Z,MERGED,True,12,6,1,https://github.com/anporumb,have the testing tools build even when its own tests are not build,3,[],https://github.com/Azure/azure-c-shared-utility/pull/81,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/81,"upstream projects that have their own unittests / int tests / e2e tests should not necessarily need to generate / build / run azure-c-shared-utility's own unittests/int_tests/e2e_tests.
This always builds the testing tools (even when azure-c-shared-utility's unittests are disabled).
Example of such a CMakefile:
#bring in dependencies
#do not add or build any tests of the dependencies
set(original_run_e2e_tests ${run_e2e_tests})
set(original_run_int_tests ${run_int_tests})
set(original_run_unittests ${run_unittests})
set(run_e2e_tests OFF)
set(run_int_tests OFF)
set(run_unittests OFF)
add_subdirectory(deps/azure-macro-utils-c)
include_directories(${MACRO_UTILS_INC_FOLDER})
add_subdirectory(deps/azure-ctest)
include_directories(${CTEST_INC_FOLDER})
add_subdirectory(deps/azure-c-testrunnerswitcher)
include_directories(${TESTRUNNERSWITCHER_INC_FOLDER})
add_subdirectory(deps/umock-c)
include_directories(${UMOCK_C_INC_FOLDER})
add_subdirectory(deps/azure-c-shared-utility)
include_directories(${SHARED_UTIL_INC_FOLDER})
set(run_e2e_tests ${original_run_e2e_tests})
set(run_int_tests ${original_run_int_tests})
set(run_unittests ${original_run_unittests})
/add here the upstream's project own work/
note how azure-c-shared-utility is build without tests, but the upstream project is having its own switches.","upstream projects that have their own unittests / int tests / e2e tests should not necessarily need to generate / build / run azure-c-shared-utility's own unittests/int_tests/e2e_tests.
This always builds the testing tools (even when azure-c-shared-utility's unittests are disabled).
Example of such a CMakefile:
#bring in dependencies
#do not add or build any tests of the dependencies
set(original_run_e2e_tests ${run_e2e_tests})
set(original_run_int_tests ${run_int_tests})
set(original_run_unittests ${run_unittests})
set(run_e2e_tests OFF)
set(run_int_tests OFF)
set(run_unittests OFF)
add_subdirectory(deps/azure-macro-utils-c)
include_directories(${MACRO_UTILS_INC_FOLDER})
add_subdirectory(deps/azure-ctest)
include_directories(${CTEST_INC_FOLDER})
add_subdirectory(deps/azure-c-testrunnerswitcher)
include_directories(${TESTRUNNERSWITCHER_INC_FOLDER})
add_subdirectory(deps/umock-c)
include_directories(${UMOCK_C_INC_FOLDER})
add_subdirectory(deps/azure-c-shared-utility)
include_directories(${SHARED_UTIL_INC_FOLDER})
set(run_e2e_tests ${original_run_e2e_tests})
set(run_int_tests ${original_run_int_tests})
set(run_unittests ${original_run_unittests})
/add here the upstream's project own work/
note how azure-c-shared-utility is build without tests, but the upstream project is having its own switches.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,81,2017-05-30T18:29:27Z,2017-05-30T22:34:54Z,2018-01-11T22:08:56Z,MERGED,True,12,6,1,https://github.com/anporumb,have the testing tools build even when its own tests are not build,3,[],https://github.com/Azure/azure-c-shared-utility/pull/81,https://github.com/dcristoloveanu,2,https://github.com/Azure/azure-c-shared-utility/pull/81#issuecomment-304999734,"upstream projects that have their own unittests / int tests / e2e tests should not necessarily need to generate / build / run azure-c-shared-utility's own unittests/int_tests/e2e_tests.
This always builds the testing tools (even when azure-c-shared-utility's unittests are disabled).
Example of such a CMakefile:
#bring in dependencies
#do not add or build any tests of the dependencies
set(original_run_e2e_tests ${run_e2e_tests})
set(original_run_int_tests ${run_int_tests})
set(original_run_unittests ${run_unittests})
set(run_e2e_tests OFF)
set(run_int_tests OFF)
set(run_unittests OFF)
add_subdirectory(deps/azure-macro-utils-c)
include_directories(${MACRO_UTILS_INC_FOLDER})
add_subdirectory(deps/azure-ctest)
include_directories(${CTEST_INC_FOLDER})
add_subdirectory(deps/azure-c-testrunnerswitcher)
include_directories(${TESTRUNNERSWITCHER_INC_FOLDER})
add_subdirectory(deps/umock-c)
include_directories(${UMOCK_C_INC_FOLDER})
add_subdirectory(deps/azure-c-shared-utility)
include_directories(${SHARED_UTIL_INC_FOLDER})
set(run_e2e_tests ${original_run_e2e_tests})
set(run_int_tests ${original_run_int_tests})
set(run_unittests ${original_run_unittests})
/add here the upstream's project own work/
note how azure-c-shared-utility is build without tests, but the upstream project is having its own switches.",,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,82,2017-05-31T04:19:37Z,2017-06-08T16:08:24Z,2017-06-08T16:08:24Z,CLOSED,False,11,11,1,https://github.com/ArthurMa1978,"Fix typo: recieve, recive -> receive",1,[],https://github.com/Azure/azure-c-shared-utility/pull/82,https://github.com/ArthurMa1978,1,https://github.com/Azure/azure-c-shared-utility/pull/82,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,82,2017-05-31T04:19:37Z,2017-06-08T16:08:24Z,2017-06-08T16:08:24Z,CLOSED,False,11,11,1,https://github.com/ArthurMa1978,"Fix typo: recieve, recive -> receive",1,[],https://github.com/Azure/azure-c-shared-utility/pull/82,https://github.com/msftclas,2,https://github.com/Azure/azure-c-shared-utility/pull/82#issuecomment-305078554,,"@ArthurMa1978,
Thanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.
Thanks,
Microsoft Pull Request Bot",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,82,2017-05-31T04:19:37Z,2017-06-08T16:08:24Z,2017-06-08T16:08:24Z,CLOSED,False,11,11,1,https://github.com/ArthurMa1978,"Fix typo: recieve, recive -> receive",1,[],https://github.com/Azure/azure-c-shared-utility/pull/82,https://github.com/ewertons,3,https://github.com/Azure/azure-c-shared-utility/pull/82#issuecomment-306886701,,"Hi @ArthurMa1978 ,
the changes you made must be reflected on our requirement docs (.md) and unit tests.
I'll make those changes and check your code in. Next time please include the other changes as well.
Thanks for your contribution to Azure IoT SDKs",True,{'HOORAY': ['https://github.com/ArthurMa1978']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,82,2017-05-31T04:19:37Z,2017-06-08T16:08:24Z,2017-06-08T16:08:24Z,CLOSED,False,11,11,1,https://github.com/ArthurMa1978,"Fix typo: recieve, recive -> receive",1,[],https://github.com/Azure/azure-c-shared-utility/pull/82,https://github.com/ewertons,4,https://github.com/Azure/azure-c-shared-utility/pull/82#issuecomment-307150819,,"Your changes have been checked in.
Thanks for you contributions.
Please feel free to submit any other questions, suggestions and/or contributions.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,86,2017-06-22T21:49:54Z,2017-06-26T16:10:13Z,2017-06-26T16:10:14Z,MERGED,True,32,0,1,https://github.com/darobs,Add more public functions to c-shared DEF file.,1,[],https://github.com/Azure/azure-c-shared-utility/pull/86,https://github.com/darobs,1,https://github.com/Azure/azure-c-shared-utility/pull/86,"Building the azure edge, linker failed to find ""platform_get_platform_info"" - the GW builds this as a shared library, and so this function needs to be exposed, along with a few more I found.","Building the azure edge, linker failed to find ""platform_get_platform_info"" - the GW builds this as a shared library, and so this function needs to be exposed, along with a few more I found.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,87,2017-07-05T18:47:41Z,2017-07-05T20:33:32Z,2017-07-06T19:39:16Z,MERGED,True,18,19,2,https://github.com/jebrando,Fixed runtime issue with using lib instead of dll,2,[],https://github.com/Azure/azure-c-shared-utility/pull/87,https://github.com/jebrando,1,https://github.com/Azure/azure-c-shared-utility/pull/87,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,87,2017-07-05T18:47:41Z,2017-07-05T20:33:32Z,2017-07-06T19:39:16Z,MERGED,True,18,19,2,https://github.com/jebrando,Fixed runtime issue with using lib instead of dll,2,[],https://github.com/Azure/azure-c-shared-utility/pull/87,https://github.com/anthonyvercolano,2,https://github.com/Azure/azure-c-shared-utility/pull/87#issuecomment-313205912,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,89,2017-07-07T17:14:54Z,2017-07-07T21:00:36Z,2018-01-11T22:09:01Z,MERGED,True,1115,15,9,https://github.com/anporumb,have ETW logger,4,[],https://github.com/Azure/azure-c-shared-utility/pull/89,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/89,"with -Duse_etw:BOOL=ON azure c shared utility will log to ETW instead of the console screen.
Additional steps needed, that can only happen after the application is build:

link in the application the resources of the azure-c-shared-utility (in the ""res"" folder)
register the provider with wevtutil utility","with -Duse_etw:BOOL=ON azure c shared utility will log to ETW instead of the console screen.
Additional steps needed, that can only happen after the application is build:

link in the application the resources of the azure-c-shared-utility (in the ""res"" folder)
register the provider with wevtutil utility",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,89,2017-07-07T17:14:54Z,2017-07-07T21:00:36Z,2018-01-11T22:09:01Z,MERGED,True,1115,15,9,https://github.com/anporumb,have ETW logger,4,[],https://github.com/Azure/azure-c-shared-utility/pull/89,https://github.com/tameraw,2,https://github.com/Azure/azure-c-shared-utility/pull/89#issuecomment-313754340,"with -Duse_etw:BOOL=ON azure c shared utility will log to ETW instead of the console screen.
Additional steps needed, that can only happen after the application is build:

link in the application the resources of the azure-c-shared-utility (in the ""res"" folder)
register the provider with wevtutil utility",,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,89,2017-07-07T17:14:54Z,2017-07-07T21:00:36Z,2018-01-11T22:09:01Z,MERGED,True,1115,15,9,https://github.com/anporumb,have ETW logger,4,[],https://github.com/Azure/azure-c-shared-utility/pull/89,https://github.com/jebrando,3,https://github.com/Azure/azure-c-shared-utility/pull/89#issuecomment-313763115,"with -Duse_etw:BOOL=ON azure c shared utility will log to ETW instead of the console screen.
Additional steps needed, that can only happen after the application is build:

link in the application the resources of the azure-c-shared-utility (in the ""res"" folder)
register the provider with wevtutil utility",,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,89,2017-07-07T17:14:54Z,2017-07-07T21:00:36Z,2018-01-11T22:09:01Z,MERGED,True,1115,15,9,https://github.com/anporumb,have ETW logger,4,[],https://github.com/Azure/azure-c-shared-utility/pull/89,https://github.com/jebrando,4,https://github.com/Azure/azure-c-shared-utility/pull/89#issuecomment-313778465,"with -Duse_etw:BOOL=ON azure c shared utility will log to ETW instead of the console screen.
Additional steps needed, that can only happen after the application is build:

link in the application the resources of the azure-c-shared-utility (in the ""res"" folder)
register the provider with wevtutil utility",After thinking about it the res files should not be checked in.  These are transient files and will change for each implementation and should only be stored locally. #Closed,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,89,2017-07-07T17:14:54Z,2017-07-07T21:00:36Z,2018-01-11T22:09:01Z,MERGED,True,1115,15,9,https://github.com/anporumb,have ETW logger,4,[],https://github.com/Azure/azure-c-shared-utility/pull/89,https://github.com/anporumb,5,https://github.com/Azure/azure-c-shared-utility/pull/89#issuecomment-313786522,"with -Duse_etw:BOOL=ON azure c shared utility will log to ETW instead of the console screen.
Additional steps needed, that can only happen after the application is build:

link in the application the resources of the azure-c-shared-utility (in the ""res"" folder)
register the provider with wevtutil utility","Thy will be done

In reply to: 313778465 [](ancestors = 313778465)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,90,2017-07-11T00:37:00Z,2017-08-28T23:56:25Z,2018-10-01T20:03:07Z,CLOSED,False,66,53,2,https://github.com/markrad,Add additional proxy options,1,[],https://github.com/Azure/azure-c-shared-utility/pull/90,https://github.com/markrad,1,https://github.com/Azure/azure-c-shared-utility/pull/90,"Add support for socks4, socks5 and socks5h web proxy protocols.","Add support for socks4, socks5 and socks5h web proxy protocols.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,90,2017-07-11T00:37:00Z,2017-08-28T23:56:25Z,2018-10-01T20:03:07Z,CLOSED,False,66,53,2,https://github.com/markrad,Add additional proxy options,1,[],https://github.com/Azure/azure-c-shared-utility/pull/90,https://github.com/jebrando,2,https://github.com/Azure/azure-c-shared-utility/pull/90#issuecomment-314497516,"Add support for socks4, socks5 and socks5h web proxy protocols.",,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,90,2017-07-11T00:37:00Z,2017-08-28T23:56:25Z,2018-10-01T20:03:07Z,CLOSED,False,66,53,2,https://github.com/markrad,Add additional proxy options,1,[],https://github.com/Azure/azure-c-shared-utility/pull/90,https://github.com/tameraw,3,https://github.com/Azure/azure-c-shared-utility/pull/90#issuecomment-319744235,"Add support for socks4, socks5 and socks5h web proxy protocols.",,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,90,2017-07-11T00:37:00Z,2017-08-28T23:56:25Z,2018-10-01T20:03:07Z,CLOSED,False,66,53,2,https://github.com/markrad,Add additional proxy options,1,[],https://github.com/Azure/azure-c-shared-utility/pull/90,https://github.com/dcristoloveanu,4,https://github.com/Azure/azure-c-shared-utility/pull/90#issuecomment-319746383,"Add support for socks4, socks5 and socks5h web proxy protocols.",,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,92,2017-07-24T18:11:28Z,2017-09-22T22:56:40Z,2017-09-26T18:35:05Z,CLOSED,False,23,11,2,https://github.com/rcdailey,CMake improvements for inline building of targets,1,[],https://github.com/Azure/azure-c-shared-utility/pull/92,https://github.com/rcdailey,1,https://github.com/Azure/azure-c-shared-utility/pull/92,"The problem: I do not want to pre-build the IOT client libraries. Because I'm cross compiling to several platforms, it is much easier to build my third party libraries in ""real time"", meaning I build them with my normal source code. I treat third party libs as normal targets. This makes upgrading libraries and cross compiling much much easier (especially with CMake since this means everything is using the same toolchain file & configuration)
To achieve this goal with the iotclient project, I had to make some minor CMake changes. For the most part, the only real problem I had to solve is OpenSSL. I build OpenSSL using CMake, so I needed iotclient targets to link in the CMake target as a dependency, not use find_package(OpenSSL)
Below is a CMakeLists.txt that I use to pull in the iotclient_* targets. Notice I do an add_subdirectory( source ); I put the root of the azure-iot-sdk-c repo here under the source directory. This is not the cleanest solution, but basically I have these requirements:

All cache variables (e.g. options) that are introduced by a third party library's CMake scripts are hidden (this is the mark_as_advanced())
Create an interface target named IoT that I can use to transparently pull together multiple targets, include directories, and other things that I want all of my personal CMake targets to consume downstream (this is an adapter layer of sorts for configuring the iotclient targets how I want)

Notice that I'm making use of CMake 3.0 features (transitive include directories) by introducing the ability to link in OpenSSL targets. Pre-3.0, users will need to do include_directories() for openssl include directories prior to executing add_subdirectory() on the iotclient repository root. Also I had to disable the DLL copying; if users are providing their own OpenSSL target, the solution to this gets a bit more complex since now you need to utilize generator expressions + custom commands to copy the target output library file. I did not have the time to implement this.
Thoughts? I'm not super familiar with the IOT stuff, and the changes I've made were done adhoc to get my own personal usage of it working. I'd like more feedback on how I can adjust these changes for upstream consumption.
Here is the example CMake script I mentioned earlier:
set( use_openssl ON CACHE INTERNAL """" FORCE )
set( use_schannel OFF CACHE INTERNAL """" FORCE )
set( use_wolfssl OFF CACHE INTERNAL """" FORCE )
set( skip_samples ON CACHE INTERNAL """" FORCE )
set( use_builtin_httpapi ON CACHE INTERNAL """" FORCE )
set( use_condition OFF CACHE INTERNAL """" FORCE )
set( use_default_uuid ON CACHE INTERNAL """" FORCE )
set( build_as_dynamic OFF CACHE INTERNAL """" FORCE )

set( IOTHUB_USE_OPENSSL_TARGETS crypto ssl CACHE INTERNAL """" FORCE )

add_subdirectory( source EXCLUDE_FROM_ALL )

add_library( IoT INTERFACE )
target_link_libraries( IoT INTERFACE iothub_client iothub_service_client )
target_include_directories( IoT INTERFACE
    source

    # for iothub_service_client
    #source/parson
    ${IOTHUB_SERVICE_CLIENT_INC_FOLDER}

    # for iothub_client
    ${AZURE_C_SHARED_UTILITY_INCLUDES}
    ${SHARED_UTIL_INC_FOLDER}
    ${IOTHUB_CLIENT_INC_FOLDER}
)

target_sources( IoT INTERFACE
    ${CMAKE_CURRENT_SOURCE_DIR}/source/certs/certs.c
)

_add_to_third_party_group(
    iothub_client
    iothub_client_amqp_transport
    iothub_client_amqp_ws_transport
    #iothub_client_dll
    iothub_client_http_transport
    iothub_client_mqtt_transport
    iothub_client_mqtt_ws_transport
    iothub_service_client
)

mark_as_advanced(
    # options
    run_valgrind
    run_unittests
    skip_samples
    use_http
    use_condition
    use_wsio
    nuget_e2e_tests
    use_installed_dependencies
    use_default_uuid
    run_e2e_tests
    use_builtin_httpapi
    use_cppunittest
    use_etw
    use_schannel
    use_openssl
    use_wolfssl
    use_socketio
    use_cyclonessl
    compileOption_C
    compileOption_CXX
    build_as_dynamic
    use_amqp
    use_mqtt
    run_longhaul_tests
    build_service_client
    build_python
    build_javawrapper
    dont_use_uploadtoblob
    no_logging
    use_firmware_update
    build_network_e2e
    wip_use_c2d_amqp_methods

    # Cache variables
    mbed_project_base
    SHARED_UTIL_INC_FOLDER
    SHARED_UTIL_SRC_FOLDER
    SHARED_UTIL_ADAPTER_FOLDER
    OPENSSL_ROOT_DIR
    LIB_INSTALL_DIR
    INSTALL_H_FILES
    AZURE_C_SHARED_UTILITY_INCLUDES
    LOGGING_RC_FILE
    SHARED_UTIL_REAL_TEST_FOLDER
    CTEST_INC_FOLDER
    CTEST_INCLUDES
    micromock_h_files_full_path
    MICROMOCK_INC_FOLDER
    SAL_INC_FOLDER
    TESTRUNNERSWITCHER_INC_FOLDER
    TESTRUNNERSWITCHER_INCLUDES
    UMOCK_C_INC_FOLDER
    UMOCK_C_INCLUDES
    IOTHUB_CLIENT_INCLUDES
    IOTHUB_CLIENT_HTTP_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_MQTT_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_AMQP_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_INC_FOLDER
    IOTHUB_SERVICE_CLIENT_INC_FOLDER
    SERIALIZER_INC_FOLDER
    IOTHUB_TEST_INC_FOLDER
    UAMQP_INC_FOLDER
    UAMQP_SRC_FOLDER
    UAMQP_INCLUDES
    MQTT_INC_FOLDER
    MQTT_SRC_FOLDER
    UMQTT_INCLUDES
)","The problem: I do not want to pre-build the IOT client libraries. Because I'm cross compiling to several platforms, it is much easier to build my third party libraries in ""real time"", meaning I build them with my normal source code. I treat third party libs as normal targets. This makes upgrading libraries and cross compiling much much easier (especially with CMake since this means everything is using the same toolchain file & configuration)
To achieve this goal with the iotclient project, I had to make some minor CMake changes. For the most part, the only real problem I had to solve is OpenSSL. I build OpenSSL using CMake, so I needed iotclient targets to link in the CMake target as a dependency, not use find_package(OpenSSL)
Below is a CMakeLists.txt that I use to pull in the iotclient_* targets. Notice I do an add_subdirectory( source ); I put the root of the azure-iot-sdk-c repo here under the source directory. This is not the cleanest solution, but basically I have these requirements:

All cache variables (e.g. options) that are introduced by a third party library's CMake scripts are hidden (this is the mark_as_advanced())
Create an interface target named IoT that I can use to transparently pull together multiple targets, include directories, and other things that I want all of my personal CMake targets to consume downstream (this is an adapter layer of sorts for configuring the iotclient targets how I want)

Notice that I'm making use of CMake 3.0 features (transitive include directories) by introducing the ability to link in OpenSSL targets. Pre-3.0, users will need to do include_directories() for openssl include directories prior to executing add_subdirectory() on the iotclient repository root. Also I had to disable the DLL copying; if users are providing their own OpenSSL target, the solution to this gets a bit more complex since now you need to utilize generator expressions + custom commands to copy the target output library file. I did not have the time to implement this.
Thoughts? I'm not super familiar with the IOT stuff, and the changes I've made were done adhoc to get my own personal usage of it working. I'd like more feedback on how I can adjust these changes for upstream consumption.
Here is the example CMake script I mentioned earlier:
set( use_openssl ON CACHE INTERNAL """" FORCE )
set( use_schannel OFF CACHE INTERNAL """" FORCE )
set( use_wolfssl OFF CACHE INTERNAL """" FORCE )
set( skip_samples ON CACHE INTERNAL """" FORCE )
set( use_builtin_httpapi ON CACHE INTERNAL """" FORCE )
set( use_condition OFF CACHE INTERNAL """" FORCE )
set( use_default_uuid ON CACHE INTERNAL """" FORCE )
set( build_as_dynamic OFF CACHE INTERNAL """" FORCE )

set( IOTHUB_USE_OPENSSL_TARGETS crypto ssl CACHE INTERNAL """" FORCE )

add_subdirectory( source EXCLUDE_FROM_ALL )

add_library( IoT INTERFACE )
target_link_libraries( IoT INTERFACE iothub_client iothub_service_client )
target_include_directories( IoT INTERFACE
    source

    # for iothub_service_client
    #source/parson
    ${IOTHUB_SERVICE_CLIENT_INC_FOLDER}

    # for iothub_client
    ${AZURE_C_SHARED_UTILITY_INCLUDES}
    ${SHARED_UTIL_INC_FOLDER}
    ${IOTHUB_CLIENT_INC_FOLDER}
)

target_sources( IoT INTERFACE
    ${CMAKE_CURRENT_SOURCE_DIR}/source/certs/certs.c
)

_add_to_third_party_group(
    iothub_client
    iothub_client_amqp_transport
    iothub_client_amqp_ws_transport
    #iothub_client_dll
    iothub_client_http_transport
    iothub_client_mqtt_transport
    iothub_client_mqtt_ws_transport
    iothub_service_client
)

mark_as_advanced(
    # options
    run_valgrind
    run_unittests
    skip_samples
    use_http
    use_condition
    use_wsio
    nuget_e2e_tests
    use_installed_dependencies
    use_default_uuid
    run_e2e_tests
    use_builtin_httpapi
    use_cppunittest
    use_etw
    use_schannel
    use_openssl
    use_wolfssl
    use_socketio
    use_cyclonessl
    compileOption_C
    compileOption_CXX
    build_as_dynamic
    use_amqp
    use_mqtt
    run_longhaul_tests
    build_service_client
    build_python
    build_javawrapper
    dont_use_uploadtoblob
    no_logging
    use_firmware_update
    build_network_e2e
    wip_use_c2d_amqp_methods

    # Cache variables
    mbed_project_base
    SHARED_UTIL_INC_FOLDER
    SHARED_UTIL_SRC_FOLDER
    SHARED_UTIL_ADAPTER_FOLDER
    OPENSSL_ROOT_DIR
    LIB_INSTALL_DIR
    INSTALL_H_FILES
    AZURE_C_SHARED_UTILITY_INCLUDES
    LOGGING_RC_FILE
    SHARED_UTIL_REAL_TEST_FOLDER
    CTEST_INC_FOLDER
    CTEST_INCLUDES
    micromock_h_files_full_path
    MICROMOCK_INC_FOLDER
    SAL_INC_FOLDER
    TESTRUNNERSWITCHER_INC_FOLDER
    TESTRUNNERSWITCHER_INCLUDES
    UMOCK_C_INC_FOLDER
    UMOCK_C_INCLUDES
    IOTHUB_CLIENT_INCLUDES
    IOTHUB_CLIENT_HTTP_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_MQTT_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_AMQP_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_INC_FOLDER
    IOTHUB_SERVICE_CLIENT_INC_FOLDER
    SERIALIZER_INC_FOLDER
    IOTHUB_TEST_INC_FOLDER
    UAMQP_INC_FOLDER
    UAMQP_SRC_FOLDER
    UAMQP_INCLUDES
    MQTT_INC_FOLDER
    MQTT_SRC_FOLDER
    UMQTT_INCLUDES
)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,92,2017-07-24T18:11:28Z,2017-09-22T22:56:40Z,2017-09-26T18:35:05Z,CLOSED,False,23,11,2,https://github.com/rcdailey,CMake improvements for inline building of targets,1,[],https://github.com/Azure/azure-c-shared-utility/pull/92,https://github.com/msftclas,2,https://github.com/Azure/azure-c-shared-utility/pull/92#issuecomment-317508078,"The problem: I do not want to pre-build the IOT client libraries. Because I'm cross compiling to several platforms, it is much easier to build my third party libraries in ""real time"", meaning I build them with my normal source code. I treat third party libs as normal targets. This makes upgrading libraries and cross compiling much much easier (especially with CMake since this means everything is using the same toolchain file & configuration)
To achieve this goal with the iotclient project, I had to make some minor CMake changes. For the most part, the only real problem I had to solve is OpenSSL. I build OpenSSL using CMake, so I needed iotclient targets to link in the CMake target as a dependency, not use find_package(OpenSSL)
Below is a CMakeLists.txt that I use to pull in the iotclient_* targets. Notice I do an add_subdirectory( source ); I put the root of the azure-iot-sdk-c repo here under the source directory. This is not the cleanest solution, but basically I have these requirements:

All cache variables (e.g. options) that are introduced by a third party library's CMake scripts are hidden (this is the mark_as_advanced())
Create an interface target named IoT that I can use to transparently pull together multiple targets, include directories, and other things that I want all of my personal CMake targets to consume downstream (this is an adapter layer of sorts for configuring the iotclient targets how I want)

Notice that I'm making use of CMake 3.0 features (transitive include directories) by introducing the ability to link in OpenSSL targets. Pre-3.0, users will need to do include_directories() for openssl include directories prior to executing add_subdirectory() on the iotclient repository root. Also I had to disable the DLL copying; if users are providing their own OpenSSL target, the solution to this gets a bit more complex since now you need to utilize generator expressions + custom commands to copy the target output library file. I did not have the time to implement this.
Thoughts? I'm not super familiar with the IOT stuff, and the changes I've made were done adhoc to get my own personal usage of it working. I'd like more feedback on how I can adjust these changes for upstream consumption.
Here is the example CMake script I mentioned earlier:
set( use_openssl ON CACHE INTERNAL """" FORCE )
set( use_schannel OFF CACHE INTERNAL """" FORCE )
set( use_wolfssl OFF CACHE INTERNAL """" FORCE )
set( skip_samples ON CACHE INTERNAL """" FORCE )
set( use_builtin_httpapi ON CACHE INTERNAL """" FORCE )
set( use_condition OFF CACHE INTERNAL """" FORCE )
set( use_default_uuid ON CACHE INTERNAL """" FORCE )
set( build_as_dynamic OFF CACHE INTERNAL """" FORCE )

set( IOTHUB_USE_OPENSSL_TARGETS crypto ssl CACHE INTERNAL """" FORCE )

add_subdirectory( source EXCLUDE_FROM_ALL )

add_library( IoT INTERFACE )
target_link_libraries( IoT INTERFACE iothub_client iothub_service_client )
target_include_directories( IoT INTERFACE
    source

    # for iothub_service_client
    #source/parson
    ${IOTHUB_SERVICE_CLIENT_INC_FOLDER}

    # for iothub_client
    ${AZURE_C_SHARED_UTILITY_INCLUDES}
    ${SHARED_UTIL_INC_FOLDER}
    ${IOTHUB_CLIENT_INC_FOLDER}
)

target_sources( IoT INTERFACE
    ${CMAKE_CURRENT_SOURCE_DIR}/source/certs/certs.c
)

_add_to_third_party_group(
    iothub_client
    iothub_client_amqp_transport
    iothub_client_amqp_ws_transport
    #iothub_client_dll
    iothub_client_http_transport
    iothub_client_mqtt_transport
    iothub_client_mqtt_ws_transport
    iothub_service_client
)

mark_as_advanced(
    # options
    run_valgrind
    run_unittests
    skip_samples
    use_http
    use_condition
    use_wsio
    nuget_e2e_tests
    use_installed_dependencies
    use_default_uuid
    run_e2e_tests
    use_builtin_httpapi
    use_cppunittest
    use_etw
    use_schannel
    use_openssl
    use_wolfssl
    use_socketio
    use_cyclonessl
    compileOption_C
    compileOption_CXX
    build_as_dynamic
    use_amqp
    use_mqtt
    run_longhaul_tests
    build_service_client
    build_python
    build_javawrapper
    dont_use_uploadtoblob
    no_logging
    use_firmware_update
    build_network_e2e
    wip_use_c2d_amqp_methods

    # Cache variables
    mbed_project_base
    SHARED_UTIL_INC_FOLDER
    SHARED_UTIL_SRC_FOLDER
    SHARED_UTIL_ADAPTER_FOLDER
    OPENSSL_ROOT_DIR
    LIB_INSTALL_DIR
    INSTALL_H_FILES
    AZURE_C_SHARED_UTILITY_INCLUDES
    LOGGING_RC_FILE
    SHARED_UTIL_REAL_TEST_FOLDER
    CTEST_INC_FOLDER
    CTEST_INCLUDES
    micromock_h_files_full_path
    MICROMOCK_INC_FOLDER
    SAL_INC_FOLDER
    TESTRUNNERSWITCHER_INC_FOLDER
    TESTRUNNERSWITCHER_INCLUDES
    UMOCK_C_INC_FOLDER
    UMOCK_C_INCLUDES
    IOTHUB_CLIENT_INCLUDES
    IOTHUB_CLIENT_HTTP_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_MQTT_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_AMQP_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_INC_FOLDER
    IOTHUB_SERVICE_CLIENT_INC_FOLDER
    SERIALIZER_INC_FOLDER
    IOTHUB_TEST_INC_FOLDER
    UAMQP_INC_FOLDER
    UAMQP_SRC_FOLDER
    UAMQP_INCLUDES
    MQTT_INC_FOLDER
    MQTT_SRC_FOLDER
    UMQTT_INCLUDES
)","@rcdailey,
Thanks for your contribution.
To ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla.microsoft.com.
It will cover your contributions to all Microsoft-managed open source projects.
Thanks,
Microsoft Pull Request Bot",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,92,2017-07-24T18:11:28Z,2017-09-22T22:56:40Z,2017-09-26T18:35:05Z,CLOSED,False,23,11,2,https://github.com/rcdailey,CMake improvements for inline building of targets,1,[],https://github.com/Azure/azure-c-shared-utility/pull/92,https://github.com/rcdailey,3,https://github.com/Azure/azure-c-shared-utility/pull/92#issuecomment-317878534,"The problem: I do not want to pre-build the IOT client libraries. Because I'm cross compiling to several platforms, it is much easier to build my third party libraries in ""real time"", meaning I build them with my normal source code. I treat third party libs as normal targets. This makes upgrading libraries and cross compiling much much easier (especially with CMake since this means everything is using the same toolchain file & configuration)
To achieve this goal with the iotclient project, I had to make some minor CMake changes. For the most part, the only real problem I had to solve is OpenSSL. I build OpenSSL using CMake, so I needed iotclient targets to link in the CMake target as a dependency, not use find_package(OpenSSL)
Below is a CMakeLists.txt that I use to pull in the iotclient_* targets. Notice I do an add_subdirectory( source ); I put the root of the azure-iot-sdk-c repo here under the source directory. This is not the cleanest solution, but basically I have these requirements:

All cache variables (e.g. options) that are introduced by a third party library's CMake scripts are hidden (this is the mark_as_advanced())
Create an interface target named IoT that I can use to transparently pull together multiple targets, include directories, and other things that I want all of my personal CMake targets to consume downstream (this is an adapter layer of sorts for configuring the iotclient targets how I want)

Notice that I'm making use of CMake 3.0 features (transitive include directories) by introducing the ability to link in OpenSSL targets. Pre-3.0, users will need to do include_directories() for openssl include directories prior to executing add_subdirectory() on the iotclient repository root. Also I had to disable the DLL copying; if users are providing their own OpenSSL target, the solution to this gets a bit more complex since now you need to utilize generator expressions + custom commands to copy the target output library file. I did not have the time to implement this.
Thoughts? I'm not super familiar with the IOT stuff, and the changes I've made were done adhoc to get my own personal usage of it working. I'd like more feedback on how I can adjust these changes for upstream consumption.
Here is the example CMake script I mentioned earlier:
set( use_openssl ON CACHE INTERNAL """" FORCE )
set( use_schannel OFF CACHE INTERNAL """" FORCE )
set( use_wolfssl OFF CACHE INTERNAL """" FORCE )
set( skip_samples ON CACHE INTERNAL """" FORCE )
set( use_builtin_httpapi ON CACHE INTERNAL """" FORCE )
set( use_condition OFF CACHE INTERNAL """" FORCE )
set( use_default_uuid ON CACHE INTERNAL """" FORCE )
set( build_as_dynamic OFF CACHE INTERNAL """" FORCE )

set( IOTHUB_USE_OPENSSL_TARGETS crypto ssl CACHE INTERNAL """" FORCE )

add_subdirectory( source EXCLUDE_FROM_ALL )

add_library( IoT INTERFACE )
target_link_libraries( IoT INTERFACE iothub_client iothub_service_client )
target_include_directories( IoT INTERFACE
    source

    # for iothub_service_client
    #source/parson
    ${IOTHUB_SERVICE_CLIENT_INC_FOLDER}

    # for iothub_client
    ${AZURE_C_SHARED_UTILITY_INCLUDES}
    ${SHARED_UTIL_INC_FOLDER}
    ${IOTHUB_CLIENT_INC_FOLDER}
)

target_sources( IoT INTERFACE
    ${CMAKE_CURRENT_SOURCE_DIR}/source/certs/certs.c
)

_add_to_third_party_group(
    iothub_client
    iothub_client_amqp_transport
    iothub_client_amqp_ws_transport
    #iothub_client_dll
    iothub_client_http_transport
    iothub_client_mqtt_transport
    iothub_client_mqtt_ws_transport
    iothub_service_client
)

mark_as_advanced(
    # options
    run_valgrind
    run_unittests
    skip_samples
    use_http
    use_condition
    use_wsio
    nuget_e2e_tests
    use_installed_dependencies
    use_default_uuid
    run_e2e_tests
    use_builtin_httpapi
    use_cppunittest
    use_etw
    use_schannel
    use_openssl
    use_wolfssl
    use_socketio
    use_cyclonessl
    compileOption_C
    compileOption_CXX
    build_as_dynamic
    use_amqp
    use_mqtt
    run_longhaul_tests
    build_service_client
    build_python
    build_javawrapper
    dont_use_uploadtoblob
    no_logging
    use_firmware_update
    build_network_e2e
    wip_use_c2d_amqp_methods

    # Cache variables
    mbed_project_base
    SHARED_UTIL_INC_FOLDER
    SHARED_UTIL_SRC_FOLDER
    SHARED_UTIL_ADAPTER_FOLDER
    OPENSSL_ROOT_DIR
    LIB_INSTALL_DIR
    INSTALL_H_FILES
    AZURE_C_SHARED_UTILITY_INCLUDES
    LOGGING_RC_FILE
    SHARED_UTIL_REAL_TEST_FOLDER
    CTEST_INC_FOLDER
    CTEST_INCLUDES
    micromock_h_files_full_path
    MICROMOCK_INC_FOLDER
    SAL_INC_FOLDER
    TESTRUNNERSWITCHER_INC_FOLDER
    TESTRUNNERSWITCHER_INCLUDES
    UMOCK_C_INC_FOLDER
    UMOCK_C_INCLUDES
    IOTHUB_CLIENT_INCLUDES
    IOTHUB_CLIENT_HTTP_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_MQTT_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_AMQP_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_INC_FOLDER
    IOTHUB_SERVICE_CLIENT_INC_FOLDER
    SERIALIZER_INC_FOLDER
    IOTHUB_TEST_INC_FOLDER
    UAMQP_INC_FOLDER
    UAMQP_SRC_FOLDER
    UAMQP_INCLUDES
    MQTT_INC_FOLDER
    MQTT_SRC_FOLDER
    UMQTT_INCLUDES
)",Could I get any comments about the viability of this change? I need a little bit of guidance I think.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,92,2017-07-24T18:11:28Z,2017-09-22T22:56:40Z,2017-09-26T18:35:05Z,CLOSED,False,23,11,2,https://github.com/rcdailey,CMake improvements for inline building of targets,1,[],https://github.com/Azure/azure-c-shared-utility/pull/92,https://github.com/tameraw,4,https://github.com/Azure/azure-c-shared-utility/pull/92#issuecomment-319752992,"The problem: I do not want to pre-build the IOT client libraries. Because I'm cross compiling to several platforms, it is much easier to build my third party libraries in ""real time"", meaning I build them with my normal source code. I treat third party libs as normal targets. This makes upgrading libraries and cross compiling much much easier (especially with CMake since this means everything is using the same toolchain file & configuration)
To achieve this goal with the iotclient project, I had to make some minor CMake changes. For the most part, the only real problem I had to solve is OpenSSL. I build OpenSSL using CMake, so I needed iotclient targets to link in the CMake target as a dependency, not use find_package(OpenSSL)
Below is a CMakeLists.txt that I use to pull in the iotclient_* targets. Notice I do an add_subdirectory( source ); I put the root of the azure-iot-sdk-c repo here under the source directory. This is not the cleanest solution, but basically I have these requirements:

All cache variables (e.g. options) that are introduced by a third party library's CMake scripts are hidden (this is the mark_as_advanced())
Create an interface target named IoT that I can use to transparently pull together multiple targets, include directories, and other things that I want all of my personal CMake targets to consume downstream (this is an adapter layer of sorts for configuring the iotclient targets how I want)

Notice that I'm making use of CMake 3.0 features (transitive include directories) by introducing the ability to link in OpenSSL targets. Pre-3.0, users will need to do include_directories() for openssl include directories prior to executing add_subdirectory() on the iotclient repository root. Also I had to disable the DLL copying; if users are providing their own OpenSSL target, the solution to this gets a bit more complex since now you need to utilize generator expressions + custom commands to copy the target output library file. I did not have the time to implement this.
Thoughts? I'm not super familiar with the IOT stuff, and the changes I've made were done adhoc to get my own personal usage of it working. I'd like more feedback on how I can adjust these changes for upstream consumption.
Here is the example CMake script I mentioned earlier:
set( use_openssl ON CACHE INTERNAL """" FORCE )
set( use_schannel OFF CACHE INTERNAL """" FORCE )
set( use_wolfssl OFF CACHE INTERNAL """" FORCE )
set( skip_samples ON CACHE INTERNAL """" FORCE )
set( use_builtin_httpapi ON CACHE INTERNAL """" FORCE )
set( use_condition OFF CACHE INTERNAL """" FORCE )
set( use_default_uuid ON CACHE INTERNAL """" FORCE )
set( build_as_dynamic OFF CACHE INTERNAL """" FORCE )

set( IOTHUB_USE_OPENSSL_TARGETS crypto ssl CACHE INTERNAL """" FORCE )

add_subdirectory( source EXCLUDE_FROM_ALL )

add_library( IoT INTERFACE )
target_link_libraries( IoT INTERFACE iothub_client iothub_service_client )
target_include_directories( IoT INTERFACE
    source

    # for iothub_service_client
    #source/parson
    ${IOTHUB_SERVICE_CLIENT_INC_FOLDER}

    # for iothub_client
    ${AZURE_C_SHARED_UTILITY_INCLUDES}
    ${SHARED_UTIL_INC_FOLDER}
    ${IOTHUB_CLIENT_INC_FOLDER}
)

target_sources( IoT INTERFACE
    ${CMAKE_CURRENT_SOURCE_DIR}/source/certs/certs.c
)

_add_to_third_party_group(
    iothub_client
    iothub_client_amqp_transport
    iothub_client_amqp_ws_transport
    #iothub_client_dll
    iothub_client_http_transport
    iothub_client_mqtt_transport
    iothub_client_mqtt_ws_transport
    iothub_service_client
)

mark_as_advanced(
    # options
    run_valgrind
    run_unittests
    skip_samples
    use_http
    use_condition
    use_wsio
    nuget_e2e_tests
    use_installed_dependencies
    use_default_uuid
    run_e2e_tests
    use_builtin_httpapi
    use_cppunittest
    use_etw
    use_schannel
    use_openssl
    use_wolfssl
    use_socketio
    use_cyclonessl
    compileOption_C
    compileOption_CXX
    build_as_dynamic
    use_amqp
    use_mqtt
    run_longhaul_tests
    build_service_client
    build_python
    build_javawrapper
    dont_use_uploadtoblob
    no_logging
    use_firmware_update
    build_network_e2e
    wip_use_c2d_amqp_methods

    # Cache variables
    mbed_project_base
    SHARED_UTIL_INC_FOLDER
    SHARED_UTIL_SRC_FOLDER
    SHARED_UTIL_ADAPTER_FOLDER
    OPENSSL_ROOT_DIR
    LIB_INSTALL_DIR
    INSTALL_H_FILES
    AZURE_C_SHARED_UTILITY_INCLUDES
    LOGGING_RC_FILE
    SHARED_UTIL_REAL_TEST_FOLDER
    CTEST_INC_FOLDER
    CTEST_INCLUDES
    micromock_h_files_full_path
    MICROMOCK_INC_FOLDER
    SAL_INC_FOLDER
    TESTRUNNERSWITCHER_INC_FOLDER
    TESTRUNNERSWITCHER_INCLUDES
    UMOCK_C_INC_FOLDER
    UMOCK_C_INCLUDES
    IOTHUB_CLIENT_INCLUDES
    IOTHUB_CLIENT_HTTP_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_MQTT_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_AMQP_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_INC_FOLDER
    IOTHUB_SERVICE_CLIENT_INC_FOLDER
    SERIALIZER_INC_FOLDER
    IOTHUB_TEST_INC_FOLDER
    UAMQP_INC_FOLDER
    UAMQP_SRC_FOLDER
    UAMQP_INCLUDES
    MQTT_INC_FOLDER
    MQTT_SRC_FOLDER
    UMQTT_INCLUDES
)",@rcdailey - Thanks for this PR. We're looking at it and we'll provide you feedback.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,92,2017-07-24T18:11:28Z,2017-09-22T22:56:40Z,2017-09-26T18:35:05Z,CLOSED,False,23,11,2,https://github.com/rcdailey,CMake improvements for inline building of targets,1,[],https://github.com/Azure/azure-c-shared-utility/pull/92,https://github.com/tameraw,5,https://github.com/Azure/azure-c-shared-utility/pull/92#issuecomment-329623819,"The problem: I do not want to pre-build the IOT client libraries. Because I'm cross compiling to several platforms, it is much easier to build my third party libraries in ""real time"", meaning I build them with my normal source code. I treat third party libs as normal targets. This makes upgrading libraries and cross compiling much much easier (especially with CMake since this means everything is using the same toolchain file & configuration)
To achieve this goal with the iotclient project, I had to make some minor CMake changes. For the most part, the only real problem I had to solve is OpenSSL. I build OpenSSL using CMake, so I needed iotclient targets to link in the CMake target as a dependency, not use find_package(OpenSSL)
Below is a CMakeLists.txt that I use to pull in the iotclient_* targets. Notice I do an add_subdirectory( source ); I put the root of the azure-iot-sdk-c repo here under the source directory. This is not the cleanest solution, but basically I have these requirements:

All cache variables (e.g. options) that are introduced by a third party library's CMake scripts are hidden (this is the mark_as_advanced())
Create an interface target named IoT that I can use to transparently pull together multiple targets, include directories, and other things that I want all of my personal CMake targets to consume downstream (this is an adapter layer of sorts for configuring the iotclient targets how I want)

Notice that I'm making use of CMake 3.0 features (transitive include directories) by introducing the ability to link in OpenSSL targets. Pre-3.0, users will need to do include_directories() for openssl include directories prior to executing add_subdirectory() on the iotclient repository root. Also I had to disable the DLL copying; if users are providing their own OpenSSL target, the solution to this gets a bit more complex since now you need to utilize generator expressions + custom commands to copy the target output library file. I did not have the time to implement this.
Thoughts? I'm not super familiar with the IOT stuff, and the changes I've made were done adhoc to get my own personal usage of it working. I'd like more feedback on how I can adjust these changes for upstream consumption.
Here is the example CMake script I mentioned earlier:
set( use_openssl ON CACHE INTERNAL """" FORCE )
set( use_schannel OFF CACHE INTERNAL """" FORCE )
set( use_wolfssl OFF CACHE INTERNAL """" FORCE )
set( skip_samples ON CACHE INTERNAL """" FORCE )
set( use_builtin_httpapi ON CACHE INTERNAL """" FORCE )
set( use_condition OFF CACHE INTERNAL """" FORCE )
set( use_default_uuid ON CACHE INTERNAL """" FORCE )
set( build_as_dynamic OFF CACHE INTERNAL """" FORCE )

set( IOTHUB_USE_OPENSSL_TARGETS crypto ssl CACHE INTERNAL """" FORCE )

add_subdirectory( source EXCLUDE_FROM_ALL )

add_library( IoT INTERFACE )
target_link_libraries( IoT INTERFACE iothub_client iothub_service_client )
target_include_directories( IoT INTERFACE
    source

    # for iothub_service_client
    #source/parson
    ${IOTHUB_SERVICE_CLIENT_INC_FOLDER}

    # for iothub_client
    ${AZURE_C_SHARED_UTILITY_INCLUDES}
    ${SHARED_UTIL_INC_FOLDER}
    ${IOTHUB_CLIENT_INC_FOLDER}
)

target_sources( IoT INTERFACE
    ${CMAKE_CURRENT_SOURCE_DIR}/source/certs/certs.c
)

_add_to_third_party_group(
    iothub_client
    iothub_client_amqp_transport
    iothub_client_amqp_ws_transport
    #iothub_client_dll
    iothub_client_http_transport
    iothub_client_mqtt_transport
    iothub_client_mqtt_ws_transport
    iothub_service_client
)

mark_as_advanced(
    # options
    run_valgrind
    run_unittests
    skip_samples
    use_http
    use_condition
    use_wsio
    nuget_e2e_tests
    use_installed_dependencies
    use_default_uuid
    run_e2e_tests
    use_builtin_httpapi
    use_cppunittest
    use_etw
    use_schannel
    use_openssl
    use_wolfssl
    use_socketio
    use_cyclonessl
    compileOption_C
    compileOption_CXX
    build_as_dynamic
    use_amqp
    use_mqtt
    run_longhaul_tests
    build_service_client
    build_python
    build_javawrapper
    dont_use_uploadtoblob
    no_logging
    use_firmware_update
    build_network_e2e
    wip_use_c2d_amqp_methods

    # Cache variables
    mbed_project_base
    SHARED_UTIL_INC_FOLDER
    SHARED_UTIL_SRC_FOLDER
    SHARED_UTIL_ADAPTER_FOLDER
    OPENSSL_ROOT_DIR
    LIB_INSTALL_DIR
    INSTALL_H_FILES
    AZURE_C_SHARED_UTILITY_INCLUDES
    LOGGING_RC_FILE
    SHARED_UTIL_REAL_TEST_FOLDER
    CTEST_INC_FOLDER
    CTEST_INCLUDES
    micromock_h_files_full_path
    MICROMOCK_INC_FOLDER
    SAL_INC_FOLDER
    TESTRUNNERSWITCHER_INC_FOLDER
    TESTRUNNERSWITCHER_INCLUDES
    UMOCK_C_INC_FOLDER
    UMOCK_C_INCLUDES
    IOTHUB_CLIENT_INCLUDES
    IOTHUB_CLIENT_HTTP_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_MQTT_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_AMQP_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_INC_FOLDER
    IOTHUB_SERVICE_CLIENT_INC_FOLDER
    SERIALIZER_INC_FOLDER
    IOTHUB_TEST_INC_FOLDER
    UAMQP_INC_FOLDER
    UAMQP_SRC_FOLDER
    UAMQP_INCLUDES
    MQTT_INC_FOLDER
    MQTT_SRC_FOLDER
    UMQTT_INCLUDES
)",@rcdailey - Can you please sign the CLA when you get a chance? Thanks.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,92,2017-07-24T18:11:28Z,2017-09-22T22:56:40Z,2017-09-26T18:35:05Z,CLOSED,False,23,11,2,https://github.com/rcdailey,CMake improvements for inline building of targets,1,[],https://github.com/Azure/azure-c-shared-utility/pull/92,https://github.com/rcdailey,6,https://github.com/Azure/azure-c-shared-utility/pull/92#issuecomment-329641233,"The problem: I do not want to pre-build the IOT client libraries. Because I'm cross compiling to several platforms, it is much easier to build my third party libraries in ""real time"", meaning I build them with my normal source code. I treat third party libs as normal targets. This makes upgrading libraries and cross compiling much much easier (especially with CMake since this means everything is using the same toolchain file & configuration)
To achieve this goal with the iotclient project, I had to make some minor CMake changes. For the most part, the only real problem I had to solve is OpenSSL. I build OpenSSL using CMake, so I needed iotclient targets to link in the CMake target as a dependency, not use find_package(OpenSSL)
Below is a CMakeLists.txt that I use to pull in the iotclient_* targets. Notice I do an add_subdirectory( source ); I put the root of the azure-iot-sdk-c repo here under the source directory. This is not the cleanest solution, but basically I have these requirements:

All cache variables (e.g. options) that are introduced by a third party library's CMake scripts are hidden (this is the mark_as_advanced())
Create an interface target named IoT that I can use to transparently pull together multiple targets, include directories, and other things that I want all of my personal CMake targets to consume downstream (this is an adapter layer of sorts for configuring the iotclient targets how I want)

Notice that I'm making use of CMake 3.0 features (transitive include directories) by introducing the ability to link in OpenSSL targets. Pre-3.0, users will need to do include_directories() for openssl include directories prior to executing add_subdirectory() on the iotclient repository root. Also I had to disable the DLL copying; if users are providing their own OpenSSL target, the solution to this gets a bit more complex since now you need to utilize generator expressions + custom commands to copy the target output library file. I did not have the time to implement this.
Thoughts? I'm not super familiar with the IOT stuff, and the changes I've made were done adhoc to get my own personal usage of it working. I'd like more feedback on how I can adjust these changes for upstream consumption.
Here is the example CMake script I mentioned earlier:
set( use_openssl ON CACHE INTERNAL """" FORCE )
set( use_schannel OFF CACHE INTERNAL """" FORCE )
set( use_wolfssl OFF CACHE INTERNAL """" FORCE )
set( skip_samples ON CACHE INTERNAL """" FORCE )
set( use_builtin_httpapi ON CACHE INTERNAL """" FORCE )
set( use_condition OFF CACHE INTERNAL """" FORCE )
set( use_default_uuid ON CACHE INTERNAL """" FORCE )
set( build_as_dynamic OFF CACHE INTERNAL """" FORCE )

set( IOTHUB_USE_OPENSSL_TARGETS crypto ssl CACHE INTERNAL """" FORCE )

add_subdirectory( source EXCLUDE_FROM_ALL )

add_library( IoT INTERFACE )
target_link_libraries( IoT INTERFACE iothub_client iothub_service_client )
target_include_directories( IoT INTERFACE
    source

    # for iothub_service_client
    #source/parson
    ${IOTHUB_SERVICE_CLIENT_INC_FOLDER}

    # for iothub_client
    ${AZURE_C_SHARED_UTILITY_INCLUDES}
    ${SHARED_UTIL_INC_FOLDER}
    ${IOTHUB_CLIENT_INC_FOLDER}
)

target_sources( IoT INTERFACE
    ${CMAKE_CURRENT_SOURCE_DIR}/source/certs/certs.c
)

_add_to_third_party_group(
    iothub_client
    iothub_client_amqp_transport
    iothub_client_amqp_ws_transport
    #iothub_client_dll
    iothub_client_http_transport
    iothub_client_mqtt_transport
    iothub_client_mqtt_ws_transport
    iothub_service_client
)

mark_as_advanced(
    # options
    run_valgrind
    run_unittests
    skip_samples
    use_http
    use_condition
    use_wsio
    nuget_e2e_tests
    use_installed_dependencies
    use_default_uuid
    run_e2e_tests
    use_builtin_httpapi
    use_cppunittest
    use_etw
    use_schannel
    use_openssl
    use_wolfssl
    use_socketio
    use_cyclonessl
    compileOption_C
    compileOption_CXX
    build_as_dynamic
    use_amqp
    use_mqtt
    run_longhaul_tests
    build_service_client
    build_python
    build_javawrapper
    dont_use_uploadtoblob
    no_logging
    use_firmware_update
    build_network_e2e
    wip_use_c2d_amqp_methods

    # Cache variables
    mbed_project_base
    SHARED_UTIL_INC_FOLDER
    SHARED_UTIL_SRC_FOLDER
    SHARED_UTIL_ADAPTER_FOLDER
    OPENSSL_ROOT_DIR
    LIB_INSTALL_DIR
    INSTALL_H_FILES
    AZURE_C_SHARED_UTILITY_INCLUDES
    LOGGING_RC_FILE
    SHARED_UTIL_REAL_TEST_FOLDER
    CTEST_INC_FOLDER
    CTEST_INCLUDES
    micromock_h_files_full_path
    MICROMOCK_INC_FOLDER
    SAL_INC_FOLDER
    TESTRUNNERSWITCHER_INC_FOLDER
    TESTRUNNERSWITCHER_INCLUDES
    UMOCK_C_INC_FOLDER
    UMOCK_C_INCLUDES
    IOTHUB_CLIENT_INCLUDES
    IOTHUB_CLIENT_HTTP_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_MQTT_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_AMQP_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_INC_FOLDER
    IOTHUB_SERVICE_CLIENT_INC_FOLDER
    SERIALIZER_INC_FOLDER
    IOTHUB_TEST_INC_FOLDER
    UAMQP_INC_FOLDER
    UAMQP_SRC_FOLDER
    UAMQP_INCLUDES
    MQTT_INC_FOLDER
    MQTT_SRC_FOLDER
    UMQTT_INCLUDES
)",What is that and where do I do it?,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,92,2017-07-24T18:11:28Z,2017-09-22T22:56:40Z,2017-09-26T18:35:05Z,CLOSED,False,23,11,2,https://github.com/rcdailey,CMake improvements for inline building of targets,1,[],https://github.com/Azure/azure-c-shared-utility/pull/92,https://github.com/tameraw,7,https://github.com/Azure/azure-c-shared-utility/pull/92#issuecomment-331578797,"The problem: I do not want to pre-build the IOT client libraries. Because I'm cross compiling to several platforms, it is much easier to build my third party libraries in ""real time"", meaning I build them with my normal source code. I treat third party libs as normal targets. This makes upgrading libraries and cross compiling much much easier (especially with CMake since this means everything is using the same toolchain file & configuration)
To achieve this goal with the iotclient project, I had to make some minor CMake changes. For the most part, the only real problem I had to solve is OpenSSL. I build OpenSSL using CMake, so I needed iotclient targets to link in the CMake target as a dependency, not use find_package(OpenSSL)
Below is a CMakeLists.txt that I use to pull in the iotclient_* targets. Notice I do an add_subdirectory( source ); I put the root of the azure-iot-sdk-c repo here under the source directory. This is not the cleanest solution, but basically I have these requirements:

All cache variables (e.g. options) that are introduced by a third party library's CMake scripts are hidden (this is the mark_as_advanced())
Create an interface target named IoT that I can use to transparently pull together multiple targets, include directories, and other things that I want all of my personal CMake targets to consume downstream (this is an adapter layer of sorts for configuring the iotclient targets how I want)

Notice that I'm making use of CMake 3.0 features (transitive include directories) by introducing the ability to link in OpenSSL targets. Pre-3.0, users will need to do include_directories() for openssl include directories prior to executing add_subdirectory() on the iotclient repository root. Also I had to disable the DLL copying; if users are providing their own OpenSSL target, the solution to this gets a bit more complex since now you need to utilize generator expressions + custom commands to copy the target output library file. I did not have the time to implement this.
Thoughts? I'm not super familiar with the IOT stuff, and the changes I've made were done adhoc to get my own personal usage of it working. I'd like more feedback on how I can adjust these changes for upstream consumption.
Here is the example CMake script I mentioned earlier:
set( use_openssl ON CACHE INTERNAL """" FORCE )
set( use_schannel OFF CACHE INTERNAL """" FORCE )
set( use_wolfssl OFF CACHE INTERNAL """" FORCE )
set( skip_samples ON CACHE INTERNAL """" FORCE )
set( use_builtin_httpapi ON CACHE INTERNAL """" FORCE )
set( use_condition OFF CACHE INTERNAL """" FORCE )
set( use_default_uuid ON CACHE INTERNAL """" FORCE )
set( build_as_dynamic OFF CACHE INTERNAL """" FORCE )

set( IOTHUB_USE_OPENSSL_TARGETS crypto ssl CACHE INTERNAL """" FORCE )

add_subdirectory( source EXCLUDE_FROM_ALL )

add_library( IoT INTERFACE )
target_link_libraries( IoT INTERFACE iothub_client iothub_service_client )
target_include_directories( IoT INTERFACE
    source

    # for iothub_service_client
    #source/parson
    ${IOTHUB_SERVICE_CLIENT_INC_FOLDER}

    # for iothub_client
    ${AZURE_C_SHARED_UTILITY_INCLUDES}
    ${SHARED_UTIL_INC_FOLDER}
    ${IOTHUB_CLIENT_INC_FOLDER}
)

target_sources( IoT INTERFACE
    ${CMAKE_CURRENT_SOURCE_DIR}/source/certs/certs.c
)

_add_to_third_party_group(
    iothub_client
    iothub_client_amqp_transport
    iothub_client_amqp_ws_transport
    #iothub_client_dll
    iothub_client_http_transport
    iothub_client_mqtt_transport
    iothub_client_mqtt_ws_transport
    iothub_service_client
)

mark_as_advanced(
    # options
    run_valgrind
    run_unittests
    skip_samples
    use_http
    use_condition
    use_wsio
    nuget_e2e_tests
    use_installed_dependencies
    use_default_uuid
    run_e2e_tests
    use_builtin_httpapi
    use_cppunittest
    use_etw
    use_schannel
    use_openssl
    use_wolfssl
    use_socketio
    use_cyclonessl
    compileOption_C
    compileOption_CXX
    build_as_dynamic
    use_amqp
    use_mqtt
    run_longhaul_tests
    build_service_client
    build_python
    build_javawrapper
    dont_use_uploadtoblob
    no_logging
    use_firmware_update
    build_network_e2e
    wip_use_c2d_amqp_methods

    # Cache variables
    mbed_project_base
    SHARED_UTIL_INC_FOLDER
    SHARED_UTIL_SRC_FOLDER
    SHARED_UTIL_ADAPTER_FOLDER
    OPENSSL_ROOT_DIR
    LIB_INSTALL_DIR
    INSTALL_H_FILES
    AZURE_C_SHARED_UTILITY_INCLUDES
    LOGGING_RC_FILE
    SHARED_UTIL_REAL_TEST_FOLDER
    CTEST_INC_FOLDER
    CTEST_INCLUDES
    micromock_h_files_full_path
    MICROMOCK_INC_FOLDER
    SAL_INC_FOLDER
    TESTRUNNERSWITCHER_INC_FOLDER
    TESTRUNNERSWITCHER_INCLUDES
    UMOCK_C_INC_FOLDER
    UMOCK_C_INCLUDES
    IOTHUB_CLIENT_INCLUDES
    IOTHUB_CLIENT_HTTP_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_MQTT_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_AMQP_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_INC_FOLDER
    IOTHUB_SERVICE_CLIENT_INC_FOLDER
    SERIALIZER_INC_FOLDER
    IOTHUB_TEST_INC_FOLDER
    UAMQP_INC_FOLDER
    UAMQP_SRC_FOLDER
    UAMQP_INCLUDES
    MQTT_INC_FOLDER
    MQTT_SRC_FOLDER
    UMQTT_INCLUDES
)","@rcdailey
CLA is the Contribution License Agreement. When you submit the pull request there should've been an option for accepting the CLA.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,92,2017-07-24T18:11:28Z,2017-09-22T22:56:40Z,2017-09-26T18:35:05Z,CLOSED,False,23,11,2,https://github.com/rcdailey,CMake improvements for inline building of targets,1,[],https://github.com/Azure/azure-c-shared-utility/pull/92,https://github.com/tameraw,8,https://github.com/Azure/azure-c-shared-utility/pull/92#issuecomment-331578949,"The problem: I do not want to pre-build the IOT client libraries. Because I'm cross compiling to several platforms, it is much easier to build my third party libraries in ""real time"", meaning I build them with my normal source code. I treat third party libs as normal targets. This makes upgrading libraries and cross compiling much much easier (especially with CMake since this means everything is using the same toolchain file & configuration)
To achieve this goal with the iotclient project, I had to make some minor CMake changes. For the most part, the only real problem I had to solve is OpenSSL. I build OpenSSL using CMake, so I needed iotclient targets to link in the CMake target as a dependency, not use find_package(OpenSSL)
Below is a CMakeLists.txt that I use to pull in the iotclient_* targets. Notice I do an add_subdirectory( source ); I put the root of the azure-iot-sdk-c repo here under the source directory. This is not the cleanest solution, but basically I have these requirements:

All cache variables (e.g. options) that are introduced by a third party library's CMake scripts are hidden (this is the mark_as_advanced())
Create an interface target named IoT that I can use to transparently pull together multiple targets, include directories, and other things that I want all of my personal CMake targets to consume downstream (this is an adapter layer of sorts for configuring the iotclient targets how I want)

Notice that I'm making use of CMake 3.0 features (transitive include directories) by introducing the ability to link in OpenSSL targets. Pre-3.0, users will need to do include_directories() for openssl include directories prior to executing add_subdirectory() on the iotclient repository root. Also I had to disable the DLL copying; if users are providing their own OpenSSL target, the solution to this gets a bit more complex since now you need to utilize generator expressions + custom commands to copy the target output library file. I did not have the time to implement this.
Thoughts? I'm not super familiar with the IOT stuff, and the changes I've made were done adhoc to get my own personal usage of it working. I'd like more feedback on how I can adjust these changes for upstream consumption.
Here is the example CMake script I mentioned earlier:
set( use_openssl ON CACHE INTERNAL """" FORCE )
set( use_schannel OFF CACHE INTERNAL """" FORCE )
set( use_wolfssl OFF CACHE INTERNAL """" FORCE )
set( skip_samples ON CACHE INTERNAL """" FORCE )
set( use_builtin_httpapi ON CACHE INTERNAL """" FORCE )
set( use_condition OFF CACHE INTERNAL """" FORCE )
set( use_default_uuid ON CACHE INTERNAL """" FORCE )
set( build_as_dynamic OFF CACHE INTERNAL """" FORCE )

set( IOTHUB_USE_OPENSSL_TARGETS crypto ssl CACHE INTERNAL """" FORCE )

add_subdirectory( source EXCLUDE_FROM_ALL )

add_library( IoT INTERFACE )
target_link_libraries( IoT INTERFACE iothub_client iothub_service_client )
target_include_directories( IoT INTERFACE
    source

    # for iothub_service_client
    #source/parson
    ${IOTHUB_SERVICE_CLIENT_INC_FOLDER}

    # for iothub_client
    ${AZURE_C_SHARED_UTILITY_INCLUDES}
    ${SHARED_UTIL_INC_FOLDER}
    ${IOTHUB_CLIENT_INC_FOLDER}
)

target_sources( IoT INTERFACE
    ${CMAKE_CURRENT_SOURCE_DIR}/source/certs/certs.c
)

_add_to_third_party_group(
    iothub_client
    iothub_client_amqp_transport
    iothub_client_amqp_ws_transport
    #iothub_client_dll
    iothub_client_http_transport
    iothub_client_mqtt_transport
    iothub_client_mqtt_ws_transport
    iothub_service_client
)

mark_as_advanced(
    # options
    run_valgrind
    run_unittests
    skip_samples
    use_http
    use_condition
    use_wsio
    nuget_e2e_tests
    use_installed_dependencies
    use_default_uuid
    run_e2e_tests
    use_builtin_httpapi
    use_cppunittest
    use_etw
    use_schannel
    use_openssl
    use_wolfssl
    use_socketio
    use_cyclonessl
    compileOption_C
    compileOption_CXX
    build_as_dynamic
    use_amqp
    use_mqtt
    run_longhaul_tests
    build_service_client
    build_python
    build_javawrapper
    dont_use_uploadtoblob
    no_logging
    use_firmware_update
    build_network_e2e
    wip_use_c2d_amqp_methods

    # Cache variables
    mbed_project_base
    SHARED_UTIL_INC_FOLDER
    SHARED_UTIL_SRC_FOLDER
    SHARED_UTIL_ADAPTER_FOLDER
    OPENSSL_ROOT_DIR
    LIB_INSTALL_DIR
    INSTALL_H_FILES
    AZURE_C_SHARED_UTILITY_INCLUDES
    LOGGING_RC_FILE
    SHARED_UTIL_REAL_TEST_FOLDER
    CTEST_INC_FOLDER
    CTEST_INCLUDES
    micromock_h_files_full_path
    MICROMOCK_INC_FOLDER
    SAL_INC_FOLDER
    TESTRUNNERSWITCHER_INC_FOLDER
    TESTRUNNERSWITCHER_INCLUDES
    UMOCK_C_INC_FOLDER
    UMOCK_C_INCLUDES
    IOTHUB_CLIENT_INCLUDES
    IOTHUB_CLIENT_HTTP_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_MQTT_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_AMQP_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_INC_FOLDER
    IOTHUB_SERVICE_CLIENT_INC_FOLDER
    SERIALIZER_INC_FOLDER
    IOTHUB_TEST_INC_FOLDER
    UAMQP_INC_FOLDER
    UAMQP_SRC_FOLDER
    UAMQP_INCLUDES
    MQTT_INC_FOLDER
    MQTT_SRC_FOLDER
    UMQTT_INCLUDES
)",@rcdailey - Will close this one and ask to please resubmit the PR with CLA signed. Thanks.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,92,2017-07-24T18:11:28Z,2017-09-22T22:56:40Z,2017-09-26T18:35:05Z,CLOSED,False,23,11,2,https://github.com/rcdailey,CMake improvements for inline building of targets,1,[],https://github.com/Azure/azure-c-shared-utility/pull/92,https://github.com/tameraw,9,https://github.com/Azure/azure-c-shared-utility/pull/92#issuecomment-331583554,"The problem: I do not want to pre-build the IOT client libraries. Because I'm cross compiling to several platforms, it is much easier to build my third party libraries in ""real time"", meaning I build them with my normal source code. I treat third party libs as normal targets. This makes upgrading libraries and cross compiling much much easier (especially with CMake since this means everything is using the same toolchain file & configuration)
To achieve this goal with the iotclient project, I had to make some minor CMake changes. For the most part, the only real problem I had to solve is OpenSSL. I build OpenSSL using CMake, so I needed iotclient targets to link in the CMake target as a dependency, not use find_package(OpenSSL)
Below is a CMakeLists.txt that I use to pull in the iotclient_* targets. Notice I do an add_subdirectory( source ); I put the root of the azure-iot-sdk-c repo here under the source directory. This is not the cleanest solution, but basically I have these requirements:

All cache variables (e.g. options) that are introduced by a third party library's CMake scripts are hidden (this is the mark_as_advanced())
Create an interface target named IoT that I can use to transparently pull together multiple targets, include directories, and other things that I want all of my personal CMake targets to consume downstream (this is an adapter layer of sorts for configuring the iotclient targets how I want)

Notice that I'm making use of CMake 3.0 features (transitive include directories) by introducing the ability to link in OpenSSL targets. Pre-3.0, users will need to do include_directories() for openssl include directories prior to executing add_subdirectory() on the iotclient repository root. Also I had to disable the DLL copying; if users are providing their own OpenSSL target, the solution to this gets a bit more complex since now you need to utilize generator expressions + custom commands to copy the target output library file. I did not have the time to implement this.
Thoughts? I'm not super familiar with the IOT stuff, and the changes I've made were done adhoc to get my own personal usage of it working. I'd like more feedback on how I can adjust these changes for upstream consumption.
Here is the example CMake script I mentioned earlier:
set( use_openssl ON CACHE INTERNAL """" FORCE )
set( use_schannel OFF CACHE INTERNAL """" FORCE )
set( use_wolfssl OFF CACHE INTERNAL """" FORCE )
set( skip_samples ON CACHE INTERNAL """" FORCE )
set( use_builtin_httpapi ON CACHE INTERNAL """" FORCE )
set( use_condition OFF CACHE INTERNAL """" FORCE )
set( use_default_uuid ON CACHE INTERNAL """" FORCE )
set( build_as_dynamic OFF CACHE INTERNAL """" FORCE )

set( IOTHUB_USE_OPENSSL_TARGETS crypto ssl CACHE INTERNAL """" FORCE )

add_subdirectory( source EXCLUDE_FROM_ALL )

add_library( IoT INTERFACE )
target_link_libraries( IoT INTERFACE iothub_client iothub_service_client )
target_include_directories( IoT INTERFACE
    source

    # for iothub_service_client
    #source/parson
    ${IOTHUB_SERVICE_CLIENT_INC_FOLDER}

    # for iothub_client
    ${AZURE_C_SHARED_UTILITY_INCLUDES}
    ${SHARED_UTIL_INC_FOLDER}
    ${IOTHUB_CLIENT_INC_FOLDER}
)

target_sources( IoT INTERFACE
    ${CMAKE_CURRENT_SOURCE_DIR}/source/certs/certs.c
)

_add_to_third_party_group(
    iothub_client
    iothub_client_amqp_transport
    iothub_client_amqp_ws_transport
    #iothub_client_dll
    iothub_client_http_transport
    iothub_client_mqtt_transport
    iothub_client_mqtt_ws_transport
    iothub_service_client
)

mark_as_advanced(
    # options
    run_valgrind
    run_unittests
    skip_samples
    use_http
    use_condition
    use_wsio
    nuget_e2e_tests
    use_installed_dependencies
    use_default_uuid
    run_e2e_tests
    use_builtin_httpapi
    use_cppunittest
    use_etw
    use_schannel
    use_openssl
    use_wolfssl
    use_socketio
    use_cyclonessl
    compileOption_C
    compileOption_CXX
    build_as_dynamic
    use_amqp
    use_mqtt
    run_longhaul_tests
    build_service_client
    build_python
    build_javawrapper
    dont_use_uploadtoblob
    no_logging
    use_firmware_update
    build_network_e2e
    wip_use_c2d_amqp_methods

    # Cache variables
    mbed_project_base
    SHARED_UTIL_INC_FOLDER
    SHARED_UTIL_SRC_FOLDER
    SHARED_UTIL_ADAPTER_FOLDER
    OPENSSL_ROOT_DIR
    LIB_INSTALL_DIR
    INSTALL_H_FILES
    AZURE_C_SHARED_UTILITY_INCLUDES
    LOGGING_RC_FILE
    SHARED_UTIL_REAL_TEST_FOLDER
    CTEST_INC_FOLDER
    CTEST_INCLUDES
    micromock_h_files_full_path
    MICROMOCK_INC_FOLDER
    SAL_INC_FOLDER
    TESTRUNNERSWITCHER_INC_FOLDER
    TESTRUNNERSWITCHER_INCLUDES
    UMOCK_C_INC_FOLDER
    UMOCK_C_INCLUDES
    IOTHUB_CLIENT_INCLUDES
    IOTHUB_CLIENT_HTTP_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_MQTT_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_AMQP_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_INC_FOLDER
    IOTHUB_SERVICE_CLIENT_INC_FOLDER
    SERIALIZER_INC_FOLDER
    IOTHUB_TEST_INC_FOLDER
    UAMQP_INC_FOLDER
    UAMQP_SRC_FOLDER
    UAMQP_INCLUDES
    MQTT_INC_FOLDER
    MQTT_SRC_FOLDER
    UMQTT_INCLUDES
)",@rcdailey - You might've received an email to sign the CLA.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,92,2017-07-24T18:11:28Z,2017-09-22T22:56:40Z,2017-09-26T18:35:05Z,CLOSED,False,23,11,2,https://github.com/rcdailey,CMake improvements for inline building of targets,1,[],https://github.com/Azure/azure-c-shared-utility/pull/92,https://github.com/olivierbloch,10,https://github.com/Azure/azure-c-shared-utility/pull/92#issuecomment-332293693,"The problem: I do not want to pre-build the IOT client libraries. Because I'm cross compiling to several platforms, it is much easier to build my third party libraries in ""real time"", meaning I build them with my normal source code. I treat third party libs as normal targets. This makes upgrading libraries and cross compiling much much easier (especially with CMake since this means everything is using the same toolchain file & configuration)
To achieve this goal with the iotclient project, I had to make some minor CMake changes. For the most part, the only real problem I had to solve is OpenSSL. I build OpenSSL using CMake, so I needed iotclient targets to link in the CMake target as a dependency, not use find_package(OpenSSL)
Below is a CMakeLists.txt that I use to pull in the iotclient_* targets. Notice I do an add_subdirectory( source ); I put the root of the azure-iot-sdk-c repo here under the source directory. This is not the cleanest solution, but basically I have these requirements:

All cache variables (e.g. options) that are introduced by a third party library's CMake scripts are hidden (this is the mark_as_advanced())
Create an interface target named IoT that I can use to transparently pull together multiple targets, include directories, and other things that I want all of my personal CMake targets to consume downstream (this is an adapter layer of sorts for configuring the iotclient targets how I want)

Notice that I'm making use of CMake 3.0 features (transitive include directories) by introducing the ability to link in OpenSSL targets. Pre-3.0, users will need to do include_directories() for openssl include directories prior to executing add_subdirectory() on the iotclient repository root. Also I had to disable the DLL copying; if users are providing their own OpenSSL target, the solution to this gets a bit more complex since now you need to utilize generator expressions + custom commands to copy the target output library file. I did not have the time to implement this.
Thoughts? I'm not super familiar with the IOT stuff, and the changes I've made were done adhoc to get my own personal usage of it working. I'd like more feedback on how I can adjust these changes for upstream consumption.
Here is the example CMake script I mentioned earlier:
set( use_openssl ON CACHE INTERNAL """" FORCE )
set( use_schannel OFF CACHE INTERNAL """" FORCE )
set( use_wolfssl OFF CACHE INTERNAL """" FORCE )
set( skip_samples ON CACHE INTERNAL """" FORCE )
set( use_builtin_httpapi ON CACHE INTERNAL """" FORCE )
set( use_condition OFF CACHE INTERNAL """" FORCE )
set( use_default_uuid ON CACHE INTERNAL """" FORCE )
set( build_as_dynamic OFF CACHE INTERNAL """" FORCE )

set( IOTHUB_USE_OPENSSL_TARGETS crypto ssl CACHE INTERNAL """" FORCE )

add_subdirectory( source EXCLUDE_FROM_ALL )

add_library( IoT INTERFACE )
target_link_libraries( IoT INTERFACE iothub_client iothub_service_client )
target_include_directories( IoT INTERFACE
    source

    # for iothub_service_client
    #source/parson
    ${IOTHUB_SERVICE_CLIENT_INC_FOLDER}

    # for iothub_client
    ${AZURE_C_SHARED_UTILITY_INCLUDES}
    ${SHARED_UTIL_INC_FOLDER}
    ${IOTHUB_CLIENT_INC_FOLDER}
)

target_sources( IoT INTERFACE
    ${CMAKE_CURRENT_SOURCE_DIR}/source/certs/certs.c
)

_add_to_third_party_group(
    iothub_client
    iothub_client_amqp_transport
    iothub_client_amqp_ws_transport
    #iothub_client_dll
    iothub_client_http_transport
    iothub_client_mqtt_transport
    iothub_client_mqtt_ws_transport
    iothub_service_client
)

mark_as_advanced(
    # options
    run_valgrind
    run_unittests
    skip_samples
    use_http
    use_condition
    use_wsio
    nuget_e2e_tests
    use_installed_dependencies
    use_default_uuid
    run_e2e_tests
    use_builtin_httpapi
    use_cppunittest
    use_etw
    use_schannel
    use_openssl
    use_wolfssl
    use_socketio
    use_cyclonessl
    compileOption_C
    compileOption_CXX
    build_as_dynamic
    use_amqp
    use_mqtt
    run_longhaul_tests
    build_service_client
    build_python
    build_javawrapper
    dont_use_uploadtoblob
    no_logging
    use_firmware_update
    build_network_e2e
    wip_use_c2d_amqp_methods

    # Cache variables
    mbed_project_base
    SHARED_UTIL_INC_FOLDER
    SHARED_UTIL_SRC_FOLDER
    SHARED_UTIL_ADAPTER_FOLDER
    OPENSSL_ROOT_DIR
    LIB_INSTALL_DIR
    INSTALL_H_FILES
    AZURE_C_SHARED_UTILITY_INCLUDES
    LOGGING_RC_FILE
    SHARED_UTIL_REAL_TEST_FOLDER
    CTEST_INC_FOLDER
    CTEST_INCLUDES
    micromock_h_files_full_path
    MICROMOCK_INC_FOLDER
    SAL_INC_FOLDER
    TESTRUNNERSWITCHER_INC_FOLDER
    TESTRUNNERSWITCHER_INCLUDES
    UMOCK_C_INC_FOLDER
    UMOCK_C_INCLUDES
    IOTHUB_CLIENT_INCLUDES
    IOTHUB_CLIENT_HTTP_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_MQTT_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_AMQP_TRANSPORT_INC_FOLDER
    IOTHUB_CLIENT_INC_FOLDER
    IOTHUB_SERVICE_CLIENT_INC_FOLDER
    SERIALIZER_INC_FOLDER
    IOTHUB_TEST_INC_FOLDER
    UAMQP_INC_FOLDER
    UAMQP_SRC_FOLDER
    UAMQP_INCLUDES
    MQTT_INC_FOLDER
    MQTT_SRC_FOLDER
    UMQTT_INCLUDES
)",CLA signing is this way: https://cla.microsoft.com/,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,95,2017-08-14T18:22:01Z,2017-08-16T17:51:29Z,2017-08-16T17:54:19Z,MERGED,True,60,52,2,https://github.com/markrad,Modify socket read to continue until socket is drained,4,[],https://github.com/Azure/azure-c-shared-utility/pull/95,https://github.com/markrad,1,https://github.com/Azure/azure-c-shared-utility/pull/95,This fix addresses GitHub issues Azure/azure-iot-arduino#46 and Azure/azure-iot-arduino#50. It modifies the logic in the Arduino adapter to continue to read the socket until it receives zero bytes.,This fix addresses GitHub issues Azure/azure-iot-arduino#46 and Azure/azure-iot-arduino#50. It modifies the logic in the Arduino adapter to continue to read the socket until it receives zero bytes.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,96,2017-08-15T09:33:52Z,2017-09-14T22:37:07Z,2017-09-14T22:51:02Z,MERGED,True,9,3,1,https://github.com/JuergenKosel,Fix linux cross compile,1,[],https://github.com/Azure/azure-c-shared-utility/pull/96,https://github.com/JuergenKosel,1,https://github.com/Azure/azure-c-shared-utility/pull/96,"Hello,
this pull request fixes some small issues to cross build https://github.com/Azure/azure-iot-sdk-c .
Greetings
Juergen","Hello,
this pull request fixes some small issues to cross build https://github.com/Azure/azure-iot-sdk-c .
Greetings
Juergen",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,96,2017-08-15T09:33:52Z,2017-09-14T22:37:07Z,2017-09-14T22:51:02Z,MERGED,True,9,3,1,https://github.com/JuergenKosel,Fix linux cross compile,1,[],https://github.com/Azure/azure-c-shared-utility/pull/96,https://github.com/msftclas,2,https://github.com/Azure/azure-c-shared-utility/pull/96#issuecomment-322423902,"Hello,
this pull request fixes some small issues to cross build https://github.com/Azure/azure-iot-sdk-c .
Greetings
Juergen","@JuergenKosel,
Thanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.
Thanks,
Microsoft Pull Request Bot",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,96,2017-08-15T09:33:52Z,2017-09-14T22:37:07Z,2017-09-14T22:51:02Z,MERGED,True,9,3,1,https://github.com/JuergenKosel,Fix linux cross compile,1,[],https://github.com/Azure/azure-c-shared-utility/pull/96,https://github.com/tameraw,3,https://github.com/Azure/azure-c-shared-utility/pull/96#issuecomment-329630060,"Hello,
this pull request fixes some small issues to cross build https://github.com/Azure/azure-iot-sdk-c .
Greetings
Juergen",@JuergenKosel - Thanks for the PR.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,99,2017-08-21T04:12:40Z,2017-08-26T04:49:45Z,2018-05-03T15:48:53Z,MERGED,True,31,31,5,https://github.com/dcristoloveanu,Fix typos recieve => receive,1,[],https://github.com/Azure/azure-c-shared-utility/pull/99,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/99,Fix typos recieve => receive,Fix typos recieve => receive,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,100,2017-08-21T04:20:56Z,2017-08-26T04:40:57Z,2018-05-03T15:48:53Z,MERGED,True,3,1,4,https://github.com/dcristoloveanu,Remove unnecessary xlogging include from xio.h,1,[],https://github.com/Azure/azure-c-shared-utility/pull/100,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/100,"Remove unnecessary xlogging include from xio.h.
Fixes #93.","Remove unnecessary xlogging include from xio.h.
Fixes #93.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,104,2017-08-25T18:39:29Z,2017-08-25T20:17:19Z,2017-08-28T21:35:43Z,MERGED,True,0,4,2,https://github.com/markrad,Remove Unused #includes,2,[],https://github.com/Azure/azure-c-shared-utility/pull/104,https://github.com/markrad,1,https://github.com/Azure/azure-c-shared-utility/pull/104,"On earlier versions of GCC that do not fully support C++11, two includes cause build failures. Having review these two build failures it is apparent that they are not even required for C++ builds.
This change simply deletes unused #includes to enable earlier GCC versions to successfully compile the SDK.","On earlier versions of GCC that do not fully support C++11, two includes cause build failures. Having review these two build failures it is apparent that they are not even required for C++ builds.
This change simply deletes unused #includes to enable earlier GCC versions to successfully compile the SDK.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,106,2017-08-26T01:29:19Z,2017-10-16T15:01:18Z,2017-10-16T15:01:18Z,CLOSED,False,68,74,2,https://github.com/dbuijsma,Fix: Failure to reconnect after network issues.,2,[],https://github.com/Azure/azure-c-shared-utility/pull/106,https://github.com/dbuijsma,1,https://github.com/Azure/azure-c-shared-utility/pull/106,#105,#105,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,106,2017-08-26T01:29:19Z,2017-10-16T15:01:18Z,2017-10-16T15:01:18Z,CLOSED,False,68,74,2,https://github.com/dbuijsma,Fix: Failure to reconnect after network issues.,2,[],https://github.com/Azure/azure-c-shared-utility/pull/106,https://github.com/ewertons,2,https://github.com/Azure/azure-c-shared-utility/pull/106#issuecomment-330599933,#105,"Hello @dbuijsma, I will be verifying your PR today.
Thanks for contributing to the Azure IoT SDKs.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,106,2017-08-26T01:29:19Z,2017-10-16T15:01:18Z,2017-10-16T15:01:18Z,CLOSED,False,68,74,2,https://github.com/dbuijsma,Fix: Failure to reconnect after network issues.,2,[],https://github.com/Azure/azure-c-shared-utility/pull/106,https://github.com/dbuijsma,3,https://github.com/Azure/azure-c-shared-utility/pull/106#issuecomment-332023380,#105,Let me know if you need more info. It took us some time to figure out what was going on and we have trace information which shows how we got in the error states. They are not too easy to reproduce either.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,106,2017-08-26T01:29:19Z,2017-10-16T15:01:18Z,2017-10-16T15:01:18Z,CLOSED,False,68,74,2,https://github.com/dbuijsma,Fix: Failure to reconnect after network issues.,2,[],https://github.com/Azure/azure-c-shared-utility/pull/106,https://github.com/ewertons,4,https://github.com/Azure/azure-c-shared-utility/pull/106#issuecomment-332928528,#105,"Hi @dbijsma,
upon reviewing the PR we see there is a lot of code change that we would need to validate, possibly impacting a lot of other components that depend on this socket implementation.
Let me pause on taking the code changes in for now and investigate the initial issue first.
Most likely the fix will be a subset of the changes you are proposing.
We will come back to you briefly with an update.
Thanks a lot for contributing to the Azure IoT C SDK,",True,{'THUMBS_UP': ['https://github.com/dbuijsma']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,106,2017-08-26T01:29:19Z,2017-10-16T15:01:18Z,2017-10-16T15:01:18Z,CLOSED,False,68,74,2,https://github.com/dbuijsma,Fix: Failure to reconnect after network issues.,2,[],https://github.com/Azure/azure-c-shared-utility/pull/106,https://github.com/jebrando,5,https://github.com/Azure/azure-c-shared-utility/pull/106#issuecomment-336914673,#105,This has been merged into the repo.  Thanks you,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,107,2017-08-28T19:18:58Z,2017-09-15T00:25:54Z,2017-09-15T00:25:54Z,MERGED,True,75,75,24,https://github.com/AndWass,"Move includes to outside extern ""C""",1,[],https://github.com/Azure/azure-c-shared-utility/pull/107,https://github.com/AndWass,1,https://github.com/Azure/azure-c-shared-utility/pull/107,"Otherwise building with g++ may fail if headers are included in
""wrong"" order.
This should fix #101","Otherwise building with g++ may fail if headers are included in
""wrong"" order.
This should fix #101",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,107,2017-08-28T19:18:58Z,2017-09-15T00:25:54Z,2017-09-15T00:25:54Z,MERGED,True,75,75,24,https://github.com/AndWass,"Move includes to outside extern ""C""",1,[],https://github.com/Azure/azure-c-shared-utility/pull/107,https://github.com/msftclas,2,https://github.com/Azure/azure-c-shared-utility/pull/107#issuecomment-325451893,"Otherwise building with g++ may fail if headers are included in
""wrong"" order.
This should fix #101","@Shakti213,
Thanks for your contribution.
To ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla.microsoft.com.
It will cover your contributions to all Microsoft-managed open source projects.
Thanks,
Microsoft Pull Request Bot",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,107,2017-08-28T19:18:58Z,2017-09-15T00:25:54Z,2017-09-15T00:25:54Z,MERGED,True,75,75,24,https://github.com/AndWass,"Move includes to outside extern ""C""",1,[],https://github.com/Azure/azure-c-shared-utility/pull/107,https://github.com/msftclas,3,https://github.com/Azure/azure-c-shared-utility/pull/107#issuecomment-325453806,"Otherwise building with g++ may fail if headers are included in
""wrong"" order.
This should fix #101","@Shakti213, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.
Thanks, Microsoft Pull Request Bot",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,108,2017-09-01T00:23:36Z,2017-09-01T17:16:51Z,2017-09-01T17:36:40Z,MERGED,True,2,0,1,https://github.com/markrad,Add stdint.h back in because it breaks parent project,1,[],https://github.com/Azure/azure-c-shared-utility/pull/108,https://github.com/markrad,1,https://github.com/Azure/azure-c-shared-utility/pull/108,Removing stdint.h broke the azure-iot-sdk-c compile. Added back stdint.h which should be fine with both C and C++ compilers. Include cstdint is missing from early g++ compilers.,Removing stdint.h broke the azure-iot-sdk-c compile. Added back stdint.h which should be fine with both C and C++ compilers. Include cstdint is missing from early g++ compilers.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,109,2017-09-14T20:36:56Z,2017-12-12T18:20:30Z,2019-09-05T06:32:45Z,CLOSED,False,635,19,8,https://github.com/markrad,Mriosbuild,14,[],https://github.com/Azure/azure-c-shared-utility/pull/109,https://github.com/markrad,1,https://github.com/Azure/azure-c-shared-utility/pull/109,Add iOS adapters for cross compiling and running SDK on iPhone.,Add iOS adapters for cross compiling and running SDK on iPhone.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,109,2017-09-14T20:36:56Z,2017-12-12T18:20:30Z,2019-09-05T06:32:45Z,CLOSED,False,635,19,8,https://github.com/markrad,Mriosbuild,14,[],https://github.com/Azure/azure-c-shared-utility/pull/109,https://github.com/tameraw,2,https://github.com/Azure/azure-c-shared-utility/pull/109#issuecomment-351140203,Add iOS adapters for cross compiling and running SDK on iPhone.,@markrad - Closing as this PR is stale and is currently in review via CodeFlow. Please resubmit once comments addressed and merge conflicts resolved. Share with a new PR. Thanks.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,110,2017-09-19T18:36:02Z,2017-09-19T18:39:30Z,2018-10-01T20:03:01Z,CLOSED,False,75,76,4,https://github.com/ewertons,Renaming c-shared/uuid.h function names to avoid conflict with libuuid,1,[],https://github.com/Azure/azure-c-shared-utility/pull/110,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/110,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,111,2017-09-21T23:12:09Z,2017-09-22T22:54:12Z,2017-09-22T22:54:12Z,CLOSED,False,19,11,2,https://github.com/JetstreamRoySprowl,Time,2,[],https://github.com/Azure/azure-c-shared-utility/pull/111,https://github.com/JetstreamRoySprowl,1,https://github.com/Azure/azure-c-shared-utility/pull/111,Clarify usage of agenttime and deprecate functions not used in SDK,Clarify usage of agenttime and deprecate functions not used in SDK,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,112,2017-09-22T22:56:45Z,2017-09-22T23:13:04Z,2018-01-12T00:32:31Z,CLOSED,False,90,2,2,https://github.com/JetstreamRoySprowl,spec and fix template for tickcounter,1,[],https://github.com/Azure/azure-c-shared-utility/pull/112,https://github.com/JetstreamRoySprowl,1,https://github.com/Azure/azure-c-shared-utility/pull/112,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,112,2017-09-22T22:56:45Z,2017-09-22T23:13:04Z,2018-01-12T00:32:31Z,CLOSED,False,90,2,2,https://github.com/JetstreamRoySprowl,spec and fix template for tickcounter,1,[],https://github.com/Azure/azure-c-shared-utility/pull/112,https://github.com/msftclas,2,https://github.com/Azure/azure-c-shared-utility/pull/112#issuecomment-331580344,,"@JetstreamRoySprowl, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.
Thanks, Microsoft Pull Request Bot",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,113,2017-09-22T23:14:54Z,2017-09-25T19:25:45Z,2017-09-25T19:25:51Z,CLOSED,False,19,11,2,https://github.com/JetstreamRoySprowl,Time,3,[],https://github.com/Azure/azure-c-shared-utility/pull/113,https://github.com/JetstreamRoySprowl,1,https://github.com/Azure/azure-c-shared-utility/pull/113,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,113,2017-09-22T23:14:54Z,2017-09-25T19:25:45Z,2017-09-25T19:25:51Z,CLOSED,False,19,11,2,https://github.com/JetstreamRoySprowl,Time,3,[],https://github.com/Azure/azure-c-shared-utility/pull/113,https://github.com/JetstreamRoySprowl,2,https://github.com/Azure/azure-c-shared-utility/pull/113#issuecomment-331986137,,merged,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,114,2017-09-25T17:40:12Z,2017-09-27T00:24:45Z,2017-09-27T19:02:59Z,MERGED,True,220,11,4,https://github.com/JetstreamRoySprowl,"Add build-root and solution-name params to build.cmd, add external un…",1,[],https://github.com/Azure/azure-c-shared-utility/pull/114,https://github.com/JetstreamRoySprowl,1,https://github.com/Azure/azure-c-shared-utility/pull/114,Add support for external unit tests for ESP32 and Arduino,Add support for external unit tests for ESP32 and Arduino,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,115,2017-09-26T16:03:39Z,2017-09-26T17:51:44Z,2017-09-27T19:03:25Z,MERGED,True,2,2,1,https://github.com/mamokarz,Update tlsio_openssl_compact_requirements.md,1,[],https://github.com/Azure/azure-c-shared-utility/pull/115,https://github.com/mamokarz,1,https://github.com/Azure/azure-c-shared-utility/pull/115,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,116,2017-10-03T21:42:06Z,2017-10-11T00:48:10Z,2017-10-11T01:40:35Z,MERGED,True,8,2,1,https://github.com/markrad,Fix CMake error with installed dependencies,2,[],https://github.com/Azure/azure-c-shared-utility/pull/116,https://github.com/markrad,1,https://github.com/Azure/azure-c-shared-utility/pull/116,Bug in makefile attempts to install dynamic module when it is not building it. This addresses the issue raised here: #98,Bug in makefile attempts to install dynamic module when it is not building it. This addresses the issue raised here: #98,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,117,2017-10-04T17:57:34Z,2017-10-06T03:34:28Z,2018-10-01T20:03:37Z,MERGED,True,644,602,2,https://github.com/dcristoloveanu,Optimize singlylinkedlist to not have perf degradation when adding in an increasingly bigger list,2,[],https://github.com/Azure/azure-c-shared-utility/pull/117,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/117,Optimize singlylinkedlist to not have perf degradation when adding in an increasingly bigger list,Optimize singlylinkedlist to not have perf degradation when adding in an increasingly bigger list,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,117,2017-10-04T17:57:34Z,2017-10-06T03:34:28Z,2018-10-01T20:03:37Z,MERGED,True,644,602,2,https://github.com/dcristoloveanu,Optimize singlylinkedlist to not have perf degradation when adding in an increasingly bigger list,2,[],https://github.com/Azure/azure-c-shared-utility/pull/117,https://github.com/dcristoloveanu,2,https://github.com/Azure/azure-c-shared-utility/pull/117#issuecomment-334252135,Optimize singlylinkedlist to not have perf degradation when adding in an increasingly bigger list,"The functionality has not changed, this is all internal optimization. However I took a look if any areas do not have coverage and added 1 test to fill that.
Thanks for the review.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,120,2017-10-10T15:08:54Z,2017-11-03T04:49:04Z,2018-03-20T10:01:43Z,MERGED,True,13,7,1,https://github.com/alexmrtn,Add ECC support for curl in HTTP API,2,[],https://github.com/Azure/azure-c-shared-utility/pull/120,https://github.com/alexmrtn,1,https://github.com/Azure/azure-c-shared-utility/pull/120,"Hi,
We need ECC support in HTTP API for Linux but the adapter for curl does not implement the option to set ECC credentials.
We added the support of OPTION_X509_ECC_KEY and OPTION_X509_ECC_CERT options in  in HTTPAPI_SetOption method.
We also added a boolean flag isECC that let us know if we need to use the x509_openssl_add_credentials of x509_openssl_add_ecc_credentials function.
We checked that the unit tests pass.","Hi,
We need ECC support in HTTP API for Linux but the adapter for curl does not implement the option to set ECC credentials.
We added the support of OPTION_X509_ECC_KEY and OPTION_X509_ECC_CERT options in  in HTTPAPI_SetOption method.
We also added a boolean flag isECC that let us know if we need to use the x509_openssl_add_credentials of x509_openssl_add_ecc_credentials function.
We checked that the unit tests pass.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,120,2017-10-10T15:08:54Z,2017-11-03T04:49:04Z,2018-03-20T10:01:43Z,MERGED,True,13,7,1,https://github.com/alexmrtn,Add ECC support for curl in HTTP API,2,[],https://github.com/Azure/azure-c-shared-utility/pull/120,https://github.com/msftclas,2,https://github.com/Azure/azure-c-shared-utility/pull/120#issuecomment-335504931,"Hi,
We need ECC support in HTTP API for Linux but the adapter for curl does not implement the option to set ECC credentials.
We added the support of OPTION_X509_ECC_KEY and OPTION_X509_ECC_CERT options in  in HTTPAPI_SetOption method.
We also added a boolean flag isECC that let us know if we need to use the x509_openssl_add_credentials of x509_openssl_add_ecc_credentials function.
We checked that the unit tests pass.",All CLA requirements met.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,120,2017-10-10T15:08:54Z,2017-11-03T04:49:04Z,2018-03-20T10:01:43Z,MERGED,True,13,7,1,https://github.com/alexmrtn,Add ECC support for curl in HTTP API,2,[],https://github.com/Azure/azure-c-shared-utility/pull/120,https://github.com/jspaith,3,https://github.com/Azure/azure-c-shared-utility/pull/120#issuecomment-339497099,"Hi,
We need ECC support in HTTP API for Linux but the adapter for curl does not implement the option to set ECC credentials.
We added the support of OPTION_X509_ECC_KEY and OPTION_X509_ECC_CERT options in  in HTTPAPI_SetOption method.
We also added a boolean flag isECC that let us know if we need to use the x509_openssl_add_credentials of x509_openssl_add_ecc_credentials function.
We checked that the unit tests pass.","The change here looks good and we'll be happy to merge this back to our master.
However when i pulled this down and ran an e2e test, it failed.  At minimum you'll need to modify httpapi_curl.c's HTTPAPI_CloneOption() since we make copies of this data but it doesn't know about the ECC options.
Good the UT's are passing, but for integration like this we still rely on e2e.  We don't have e2e client SDK for ECC (yet) but you can do some basics here:

In IOT C client you'll need to force it to use ECC.  I've created https://github.com/Azure/azure-iot-sdk-c/tree/http_ecc_branch that has needful, it'll show where e2e tests are.
The environment variables you'll need to set are 'IOTHUB_E2E_X509_CERT_BASE64' and 'IOTHUB_E2E_X509_PRIVATE_KEY_BASE64' which will be base 64 encoded versions of a self-signed ECC cert.

Thanks @alexmrtn for taking this on.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,120,2017-10-10T15:08:54Z,2017-11-03T04:49:04Z,2018-03-20T10:01:43Z,MERGED,True,13,7,1,https://github.com/alexmrtn,Add ECC support for curl in HTTP API,2,[],https://github.com/Azure/azure-c-shared-utility/pull/120,https://github.com/alexmrtn,4,https://github.com/Azure/azure-c-shared-utility/pull/120#issuecomment-339962804,"Hi,
We need ECC support in HTTP API for Linux but the adapter for curl does not implement the option to set ECC credentials.
We added the support of OPTION_X509_ECC_KEY and OPTION_X509_ECC_CERT options in  in HTTPAPI_SetOption method.
We also added a boolean flag isECC that let us know if we need to use the x509_openssl_add_credentials of x509_openssl_add_ecc_credentials function.
We checked that the unit tests pass.","I modified the HTTPAPI_CloneOption functions.
Unfortunately I was not able to run the e2e tests, even though I compiled the SDK without any modification:

I followed the https://github.com/Azure/azure-iot-sdk-c/blob/master/doc/run_end_to_end_tests.md.
I populated the correct variable with the correct values in the ""iot_device_params.txt"" file.
I double checked my connection string and eventhub connection string.
I used RSA certificates.

On all e2e tests I obtained the following error:
 1/10 Test  #1: iothubclient_uploadtoblob_e2e .........***Failed    2.04 sec
 === Executing test suite iothubclient_uploadtoblob_e2e ===
Info: Created Device csdk_e2eDevice_sas_j_please_delete_c5008aa8-1061-4c5a-af50-8ea41e004427.
Info: Created Device csdk_e2eDevice_x509_j_please_delete_830e0950-1963-4243-b820-4bd1176bb289.
Error: Time:Fri Oct 27 14:37:38 2017 File:/tmp/azure-iot-sdk-c/c-utility/adapters/httpapi_curl.c Func:HTTPAPI_ExecuteRequest Line:594 Failure in HTTP communication: server reply code is 400
Info: HTTP Response:{""Message"":""ErrorCode:ArgumentInvalid;BadRequest"",""ExceptionMessage"":""Tracking ID:01a4f3f5851f4426be09b127dc08e14b-G:4-TimeStamp:10/27/2017 12:37:38""}
Error: Time:Fri Oct 27 14:37:38 2017 File:/tmp/azure-iot-sdk-c/iothub_service_client/src/iothub_registrymanager.c Func:sendHttpRequestCRUD Line:1000 Http Failure status code 400.
Error: Time:Fri Oct 27 14:37:38 2017 File:/tmp/azure-iot-sdk-c/testtools/iothub_test/src/iothub_account.c Func:provisionDevice Line:348 IoTHubRegistryManager_CreateDevice failed
Error: Time:Fri Oct 27 14:37:38 2017 File:/tmp/azure-iot-sdk-c/testtools/iothub_test/src/iothub_account.c Func:IoTHubAccount_Init_With_Config Line:628 Failed to create the X509 device
  Assert failed in line 64: non-NULL expected. Could not initialize IoTHubAccount
TEST_SUITE_INITIALIZE failed - suite ending

Any idea where does this come from?
Can you check from your side if now the e2e tests pass?
Thanks @jspaith!",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,120,2017-10-10T15:08:54Z,2017-11-03T04:49:04Z,2018-03-20T10:01:43Z,MERGED,True,13,7,1,https://github.com/alexmrtn,Add ECC support for curl in HTTP API,2,[],https://github.com/Azure/azure-c-shared-utility/pull/120,https://github.com/jspaith,5,https://github.com/Azure/azure-c-shared-utility/pull/120#issuecomment-340031196,"Hi,
We need ECC support in HTTP API for Linux but the adapter for curl does not implement the option to set ECC credentials.
We added the support of OPTION_X509_ECC_KEY and OPTION_X509_ECC_CERT options in  in HTTPAPI_SetOption method.
We also added a boolean flag isECC that let us know if we need to use the x509_openssl_add_credentials of x509_openssl_add_ecc_credentials function.
We checked that the unit tests pass.","1 - I've incorporated your changes and run e2e and everything works.  There is a bug in attached clone_options change, namely there's two ""||"" which cause compile break.  I've fixed that bit up locally to unblock.
2 - Could you please fix the ""||"" issue and then squash the changes into 1?  (I'm assuming you can do that on a pull request...?)  That makes it easier to track history.  Once you do that, let me know and...
3 - I'lll get on checking it through our proper gates.
4 - For ECC instructions specifically I forgot a step, which is you need to do set environment variable 'IOTHUB_E2E_X509_THUMBPRINT' to the thumbprint of the certs that you're using.  This is the thumbprint that you set when creating the device in IoT Hub.
5 - For E2E not working, is it only upload blob or is it everything?  Uploadblob needs some extra server setup.  In any case, if it's universal I'd recommend opening a new github issue (against https://github.com/Azure/azure-iot-sdk-c/, not this repo) for tracking since we want customers to be able to run e2e obviously.
6 - Thanks and welcome to the (extended) Azure IoT team!",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,120,2017-10-10T15:08:54Z,2017-11-03T04:49:04Z,2018-03-20T10:01:43Z,MERGED,True,13,7,1,https://github.com/alexmrtn,Add ECC support for curl in HTTP API,2,[],https://github.com/Azure/azure-c-shared-utility/pull/120,https://github.com/alexmrtn,6,https://github.com/Azure/azure-c-shared-utility/pull/120#issuecomment-340375815,"Hi,
We need ECC support in HTTP API for Linux but the adapter for curl does not implement the option to set ECC credentials.
We added the support of OPTION_X509_ECC_KEY and OPTION_X509_ECC_CERT options in  in HTTPAPI_SetOption method.
We also added a boolean flag isECC that let us know if we need to use the x509_openssl_add_credentials of x509_openssl_add_ecc_credentials function.
We checked that the unit tests pass.","Hi @jspaith
1,2 - If fixed it, sorry for this stupid error, I squashed it into the previous commit.
3 - Let me know when it's ready.
4,5 - I previously set the IOTHUB_E2E_X509_THUMBPRINT variable, this error was for all e2e tests not only the upload blob. I'll check again everything and if needed make an issue on the right repo.
6 Thanks!",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,120,2017-10-10T15:08:54Z,2017-11-03T04:49:04Z,2018-03-20T10:01:43Z,MERGED,True,13,7,1,https://github.com/alexmrtn,Add ECC support for curl in HTTP API,2,[],https://github.com/Azure/azure-c-shared-utility/pull/120,https://github.com/jspaith,7,https://github.com/Azure/azure-c-shared-utility/pull/120#issuecomment-341622334,"Hi,
We need ECC support in HTTP API for Linux but the adapter for curl does not implement the option to set ECC credentials.
We added the support of OPTION_X509_ECC_KEY and OPTION_X509_ECC_CERT options in  in HTTPAPI_SetOption method.
We also added a boolean flag isECC that let us know if we need to use the x509_openssl_add_credentials of x509_openssl_add_ecc_credentials function.
We checked that the unit tests pass.","I've just submitted this to master of cutility.  Sorry for delay and thanks again for this change.
Note that I have not yet updated the C SDK submodule to point to C-Utility, so a simple clone of CSDK won't pickup this change.  We update submodules fairly frequently though so this will be on the next train up.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,121,2017-10-13T15:21:09Z,2017-10-13T16:58:35Z,2017-10-13T16:58:35Z,MERGED,True,3,0,1,https://github.com/darobs,"Add UUID defines to .DEF file, since a call to UUID_to_string was added",1,[],https://github.com/Azure/azure-c-shared-utility/pull/121,https://github.com/darobs,1,https://github.com/Azure/azure-c-shared-utility/pull/121,"Add UUID defines to .DEF file, since a call to UUID_to_string was added in uamqp_messaging.c","Add UUID defines to .DEF file, since a call to UUID_to_string was added in uamqp_messaging.c",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,122,2017-10-21T03:37:10Z,2017-10-21T20:36:40Z,2018-10-01T20:03:36Z,MERGED,True,2,2,1,https://github.com/dcristoloveanu,Do not add /WX for MINGW,1,[],https://github.com/Azure/azure-c-shared-utility/pull/122,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/122,"Do not add /WX for MINGW.
In order to be able to compile using MingW /wx should be added for Win32 and no MINGW.","Do not add /WX for MINGW.
In order to be able to compile using MingW /wx should be added for Win32 and no MINGW.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,123,2017-10-24T00:13:30Z,2017-10-24T00:25:11Z,2017-10-27T19:49:53Z,CLOSED,False,26,0,2,https://github.com/jebrando,Adding C11 flag to test files,1,[],https://github.com/Azure/azure-c-shared-utility/pull/123,https://github.com/jebrando,1,https://github.com/Azure/azure-c-shared-utility/pull/123,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,124,2017-10-25T15:29:46Z,2017-10-31T01:01:25Z,2017-10-31T01:01:25Z,CLOSED,False,2057,9,1,https://github.com/mredd,Extend DEC and INC macros to reach up to 2048,3,[],https://github.com/Azure/azure-c-shared-utility/pull/124,https://github.com/mredd,1,https://github.com/Azure/azure-c-shared-utility/pull/124,"The current limit of the INC(x) and DEC(x) macros was a little bit too low for our data model, so I had to extend them. Now, they reach up to INC(2048) and DEC(2048).
The code was created with these two lines of bash code and then pasted into the header file:
for i in {2048..1024}; do echo ""#define INC${i} $((i+1))""; done
for i in {2048..1025}; do echo ""#define DEC${i} $((i-1))""; done","The current limit of the INC(x) and DEC(x) macros was a little bit too low for our data model, so I had to extend them. Now, they reach up to INC(2048) and DEC(2048).
The code was created with these two lines of bash code and then pasted into the header file:
for i in {2048..1024}; do echo ""#define INC${i} $((i+1))""; done
for i in {2048..1025}; do echo ""#define DEC${i} $((i-1))""; done",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,124,2017-10-25T15:29:46Z,2017-10-31T01:01:25Z,2017-10-31T01:01:25Z,CLOSED,False,2057,9,1,https://github.com/mredd,Extend DEC and INC macros to reach up to 2048,3,[],https://github.com/Azure/azure-c-shared-utility/pull/124,https://github.com/msftclas,2,https://github.com/Azure/azure-c-shared-utility/pull/124#issuecomment-339369571,"The current limit of the INC(x) and DEC(x) macros was a little bit too low for our data model, so I had to extend them. Now, they reach up to INC(2048) and DEC(2048).
The code was created with these two lines of bash code and then pasted into the header file:
for i in {2048..1024}; do echo ""#define INC${i} $((i+1))""; done
for i in {2048..1025}; do echo ""#define DEC${i} $((i-1))""; done",All CLA requirements met.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,124,2017-10-25T15:29:46Z,2017-10-31T01:01:25Z,2017-10-31T01:01:25Z,CLOSED,False,2057,9,1,https://github.com/mredd,Extend DEC and INC macros to reach up to 2048,3,[],https://github.com/Azure/azure-c-shared-utility/pull/124,https://github.com/mredd,3,https://github.com/Azure/azure-c-shared-utility/pull/124#issuecomment-340628921,"The current limit of the INC(x) and DEC(x) macros was a little bit too low for our data model, so I had to extend them. Now, they reach up to INC(2048) and DEC(2048).
The code was created with these two lines of bash code and then pasted into the header file:
for i in {2048..1024}; do echo ""#define INC${i} $((i+1))""; done
for i in {2048..1025}; do echo ""#define DEC${i} $((i-1))""; done","Don't merge this pull request now. I just figured out that there is a whole lot more to do to allow for bigger models. I'm currently dealing with a model with 89 WITH_DATA statements, all of them are of struct types, and counting. Seriously Microsoft, when you go with all that preprocessor vodoo, why are you restricting yourself (or us) with so small models? Only 61 attributes allowed? What type of machine should that be to monitor?
I'll close this pull request and provide a new one once I've found all the macros to extend.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,125,2017-10-25T17:42:32Z,2017-10-30T18:47:53Z,2017-10-30T19:22:22Z,MERGED,True,0,437,4,https://github.com/JetstreamRoySprowl,Moved Arduino dev docs to PAL repo,1,[],https://github.com/Azure/azure-c-shared-utility/pull/125,https://github.com/JetstreamRoySprowl,1,https://github.com/Azure/azure-c-shared-utility/pull/125,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,126,2017-10-27T16:12:41Z,2017-11-15T19:04:54Z,2018-03-20T10:01:03Z,CLOSED,False,1,1,1,https://github.com/alexmrtn,change Proxy to default access in httpapi_winhttp.c,1,[],https://github.com/Azure/azure-c-shared-utility/pull/126,https://github.com/alexmrtn,1,https://github.com/Azure/azure-c-shared-utility/pull/126,"This PR is to change the default proxy configuration so that the SDK can retreive the system configuration on Windows for the HTTP API.
As I understood this should have been the normal behavior as @tameraw told me in a previous issue ( see #103 (comment) )
I also aded in the SetOption the OPTION_HTTP_PROXY case, that has a similar behavior as the ""TrustedCerts"" option.","This PR is to change the default proxy configuration so that the SDK can retreive the system configuration on Windows for the HTTP API.
As I understood this should have been the normal behavior as @tameraw told me in a previous issue ( see #103 (comment) )
I also aded in the SetOption the OPTION_HTTP_PROXY case, that has a similar behavior as the ""TrustedCerts"" option.",True,{'THUMBS_UP': ['https://github.com/GeraldSchmitt']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,126,2017-10-27T16:12:41Z,2017-11-15T19:04:54Z,2018-03-20T10:01:03Z,CLOSED,False,1,1,1,https://github.com/alexmrtn,change Proxy to default access in httpapi_winhttp.c,1,[],https://github.com/Azure/azure-c-shared-utility/pull/126,https://github.com/tameraw,2,https://github.com/Azure/azure-c-shared-utility/pull/126#issuecomment-344066313,"This PR is to change the default proxy configuration so that the SDK can retreive the system configuration on Windows for the HTTP API.
As I understood this should have been the normal behavior as @tameraw told me in a previous issue ( see #103 (comment) )
I also aded in the SetOption the OPTION_HTTP_PROXY case, that has a similar behavior as the ""TrustedCerts"" option.",@alexmrtn - Thanks for the PR. Looks good. Just please address the one comment in the review. Regards.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,126,2017-10-27T16:12:41Z,2017-11-15T19:04:54Z,2018-03-20T10:01:03Z,CLOSED,False,1,1,1,https://github.com/alexmrtn,change Proxy to default access in httpapi_winhttp.c,1,[],https://github.com/Azure/azure-c-shared-utility/pull/126,https://github.com/alexmrtn,3,https://github.com/Azure/azure-c-shared-utility/pull/126#issuecomment-344320023,"This PR is to change the default proxy configuration so that the SDK can retreive the system configuration on Windows for the HTTP API.
As I understood this should have been the normal behavior as @tameraw told me in a previous issue ( see #103 (comment) )
I also aded in the SetOption the OPTION_HTTP_PROXY case, that has a similar behavior as the ""TrustedCerts"" option.","Hi @tameraw
I removed the error return, I squashed the two commit to keep a nice history.
Regards",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,126,2017-10-27T16:12:41Z,2017-11-15T19:04:54Z,2018-03-20T10:01:03Z,CLOSED,False,1,1,1,https://github.com/alexmrtn,change Proxy to default access in httpapi_winhttp.c,1,[],https://github.com/Azure/azure-c-shared-utility/pull/126,https://github.com/ewertons,4,https://github.com/Azure/azure-c-shared-utility/pull/126#issuecomment-344471790,"This PR is to change the default proxy configuration so that the SDK can retreive the system configuration on Windows for the HTTP API.
As I understood this should have been the normal behavior as @tameraw told me in a previous issue ( see #103 (comment) )
I also aded in the SetOption the OPTION_HTTP_PROXY case, that has a similar behavior as the ""TrustedCerts"" option.","I had to make a small change to your code, because that option you are using only exists on VS2010 and later.
https://msdn.microsoft.com/en-us/library/windows/desktop/aa384098(v=vs.85).aspx
https://stackoverflow.com/questions/70013/how-to-detect-if-im-compiling-code-with-visual-studio-2008
The code will be checked in tomorrow, there is a small build issue we need to fix before we proceed.
More updates to come once done.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,126,2017-10-27T16:12:41Z,2017-11-15T19:04:54Z,2018-03-20T10:01:03Z,CLOSED,False,1,1,1,https://github.com/alexmrtn,change Proxy to default access in httpapi_winhttp.c,1,[],https://github.com/Azure/azure-c-shared-utility/pull/126,https://github.com/ewertons,5,https://github.com/Azure/azure-c-shared-utility/pull/126#issuecomment-344694778,"This PR is to change the default proxy configuration so that the SDK can retreive the system configuration on Windows for the HTTP API.
As I understood this should have been the normal behavior as @tameraw told me in a previous issue ( see #103 (comment) )
I also aded in the SetOption the OPTION_HTTP_PROXY case, that has a similar behavior as the ""TrustedCerts"" option.","This code is now checked in.
commit edab51e
Author: Ewerton Scaboro da Silva ewertons@microsoft.com
Date:   Tue Nov 14 17:05:05 2017 -0800
Update to change 04a39360de7ba8d (automatic proxy selection on Windows)

commit 04a3936
Author: Alexis Martin alexis.martin@schneider-electric.com
Date:   Fri Oct 27 18:01:49 2017 +0200
change Proxy to default access in httpapi_winhttp.c",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,126,2017-10-27T16:12:41Z,2017-11-15T19:04:54Z,2018-03-20T10:01:03Z,CLOSED,False,1,1,1,https://github.com/alexmrtn,change Proxy to default access in httpapi_winhttp.c,1,[],https://github.com/Azure/azure-c-shared-utility/pull/126,https://github.com/ewertons,6,https://github.com/Azure/azure-c-shared-utility/pull/126#issuecomment-344694891,"This PR is to change the default proxy configuration so that the SDK can retreive the system configuration on Windows for the HTTP API.
As I understood this should have been the normal behavior as @tameraw told me in a previous issue ( see #103 (comment) )
I also aded in the SetOption the OPTION_HTTP_PROXY case, that has a similar behavior as the ""TrustedCerts"" option.","It still needs to be made available at the Azure IoT SDK level, which will be done today.
I'll close this PR, please feel free to reopen it if needed.
Thanks for contributing to the Azure IoT SDK.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,127,2017-10-31T16:04:10Z,2017-10-31T17:41:15Z,2017-10-31T17:45:50Z,MERGED,True,78,39,6,https://github.com/jspaith,Allow null KeyName during SaStoken generation,1,[],https://github.com/Azure/azure-c-shared-utility/pull/127,https://github.com/jspaith,1,https://github.com/Azure/azure-c-shared-utility/pull/127,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,127,2017-10-31T16:04:10Z,2017-10-31T17:41:15Z,2017-10-31T17:45:50Z,MERGED,True,78,39,6,https://github.com/jspaith,Allow null KeyName during SaStoken generation,1,[],https://github.com/Azure/azure-c-shared-utility/pull/127,https://github.com/jspaith,2,https://github.com/Azure/azure-c-shared-utility/pull/127#issuecomment-340812754,,@jspaith is added to the review. #Closed,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,127,2017-10-31T16:04:10Z,2017-10-31T17:41:15Z,2017-10-31T17:45:50Z,MERGED,True,78,39,6,https://github.com/jspaith,Allow null KeyName during SaStoken generation,1,[],https://github.com/Azure/azure-c-shared-utility/pull/127,https://github.com/jspaith,3,https://github.com/Azure/azure-c-shared-utility/pull/127#issuecomment-340812756,,@jebrando is added to the review. #Closed,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,127,2017-10-31T16:04:10Z,2017-10-31T17:41:15Z,2017-10-31T17:45:50Z,MERGED,True,78,39,6,https://github.com/jspaith,Allow null KeyName during SaStoken generation,1,[],https://github.com/Azure/azure-c-shared-utility/pull/127,https://github.com/jspaith,4,https://github.com/Azure/azure-c-shared-utility/pull/127#issuecomment-340812760,,@ewertons is added to the review. #Closed,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,129,2017-12-06T11:15:01Z,2017-12-13T00:22:59Z,2018-03-20T10:02:03Z,MERGED,True,5,5,1,https://github.com/alexmrtn,Add ECC option support for winhttp,1,[],https://github.com/Azure/azure-c-shared-utility/pull/129,https://github.com/alexmrtn,1,https://github.com/Azure/azure-c-shared-utility/pull/129,"Hi,
This PR is designed to add ECC support for winhttp. It is similar to the one I made for curl (#120)
The underlying function in X509_schannel.c handle the RSA and ECC certificates but the options were missing in the SetOption and CloneOption functions of winhttp implementation of HTTPAPI.","Hi,
This PR is designed to add ECC support for winhttp. It is similar to the one I made for curl (#120)
The underlying function in X509_schannel.c handle the RSA and ECC certificates but the options were missing in the SetOption and CloneOption functions of winhttp implementation of HTTPAPI.",True,{'THUMBS_UP': ['https://github.com/GeraldSchmitt']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,129,2017-12-06T11:15:01Z,2017-12-13T00:22:59Z,2018-03-20T10:02:03Z,MERGED,True,5,5,1,https://github.com/alexmrtn,Add ECC option support for winhttp,1,[],https://github.com/Azure/azure-c-shared-utility/pull/129,https://github.com/jspaith,2,https://github.com/Azure/azure-c-shared-utility/pull/129#issuecomment-351240574,"Hi,
This PR is designed to add ECC support for winhttp. It is similar to the one I made for curl (#120)
The underlying function in X509_schannel.c handle the RSA and ECC certificates but the options were missing in the SetOption and CloneOption functions of winhttp implementation of HTTPAPI.","Thanks for another good change, @alexmrtn!  I've verified manually that works on Windows and have submitted to our C-Utility 4d729fb.
I haven't updated C SDK submodule here yet as we typically have an update every few days free anyway.
If there's any urgency here let us know and we should be able to get the submodule pointed to sooner.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,129,2017-12-06T11:15:01Z,2017-12-13T00:22:59Z,2018-03-20T10:02:03Z,MERGED,True,5,5,1,https://github.com/alexmrtn,Add ECC option support for winhttp,1,[],https://github.com/Azure/azure-c-shared-utility/pull/129,https://github.com/alexmrtn,3,https://github.com/Azure/azure-c-shared-utility/pull/129#issuecomment-351397381,"Hi,
This PR is designed to add ECC support for winhttp. It is similar to the one I made for curl (#120)
The underlying function in X509_schannel.c handle the RSA and ECC certificates but the options were missing in the SetOption and CloneOption functions of winhttp implementation of HTTPAPI.","Hi @jspaith !
There is no urgency (yet!), the sooner the better though :)
Thanks",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,130,2017-12-13T02:15:02Z,2018-01-03T18:29:31Z,2018-01-03T18:29:32Z,MERGED,True,4,0,1,https://github.com/lukka,add no_logging option to disable output from xlogging,1,[],https://github.com/Azure/azure-c-shared-utility/pull/130,https://github.com/lukka,1,https://github.com/Azure/azure-c-shared-utility/pull/130,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,130,2017-12-13T02:15:02Z,2018-01-03T18:29:31Z,2018-01-03T18:29:32Z,MERGED,True,4,0,1,https://github.com/lukka,add no_logging option to disable output from xlogging,1,[],https://github.com/Azure/azure-c-shared-utility/pull/130,https://github.com/lukka,2,https://github.com/Azure/azure-c-shared-utility/pull/130#issuecomment-351463829,,"@ewertons if you do not compile the dependencies (i.e. the submodule) when building the azure-iot-sdk-c repository (i.e. CMake's option use_installed_dependencies=ON), then you do not have the NO_LOGGING option for the submodules. This is true for the azure-c-shared-utility submodule.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,132,2018-01-12T10:15:47Z,2018-02-28T17:15:52Z,2018-03-20T10:02:16Z,MERGED,True,373,160,1,https://github.com/alexmrtn,add proxy support for httpapi_winhttp,1,['enhancement'],https://github.com/Azure/azure-c-shared-utility/pull/132,https://github.com/alexmrtn,1,https://github.com/Azure/azure-c-shared-utility/pull/132,"Hi,
The goal of this PR is to add the support of proxy via SetOption to the winhttp implementation of httpapi.
I had to rollback on the changed I suggested in #126, otherwise it is not possible to use the WinHttpSetOption function on the requestHandle (we get an ERROR_WINHTTP_OPTION_NOT_SETTABLE error).
I added the support of the OPTION_HTTP_PROXY in both HTTPAPI_SetOption and HTTPAPI_CloneOption.
Since proxy cannot be added on a connection, I added proxy settings in the HTTP_HANDLE_DATA and use it when creating a request handler in the HTTPAPI_ExecuteRequest","Hi,
The goal of this PR is to add the support of proxy via SetOption to the winhttp implementation of httpapi.
I had to rollback on the changed I suggested in #126, otherwise it is not possible to use the WinHttpSetOption function on the requestHandle (we get an ERROR_WINHTTP_OPTION_NOT_SETTABLE error).
I added the support of the OPTION_HTTP_PROXY in both HTTPAPI_SetOption and HTTPAPI_CloneOption.
Since proxy cannot be added on a connection, I added proxy settings in the HTTP_HANDLE_DATA and use it when creating a request handler in the HTTPAPI_ExecuteRequest",True,{'THUMBS_UP': ['https://github.com/GeraldSchmitt']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,132,2018-01-12T10:15:47Z,2018-02-28T17:15:52Z,2018-03-20T10:02:16Z,MERGED,True,373,160,1,https://github.com/alexmrtn,add proxy support for httpapi_winhttp,1,['enhancement'],https://github.com/Azure/azure-c-shared-utility/pull/132,https://github.com/alexmrtn,2,https://github.com/Azure/azure-c-shared-utility/pull/132#issuecomment-366241217,"Hi,
The goal of this PR is to add the support of proxy via SetOption to the winhttp implementation of httpapi.
I had to rollback on the changed I suggested in #126, otherwise it is not possible to use the WinHttpSetOption function on the requestHandle (we get an ERROR_WINHTTP_OPTION_NOT_SETTABLE error).
I added the support of the OPTION_HTTP_PROXY in both HTTPAPI_SetOption and HTTPAPI_CloneOption.
Since proxy cannot be added on a connection, I added proxy settings in the HTTP_HANDLE_DATA and use it when creating a request handler in the HTTPAPI_ExecuteRequest","Hi @ewertons
Thanks for the quick-and-well-detailed review!
I revert all changes related to spaces (my text editor was automatically cleaning spaces on empty lines).
I also corrected my mistakes, added test for mbstowcs, added the free where they need to be (basically I followed all your review ;) )
I added the #if defined _MSC_VER && _MSC_VER >= 1600 check to include #include <VersionHelpers.h>. And I used #ifndef WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY as you suggested.
So here the implemented behavior depending platform and compiler version:



Compiler Version
Runtime
includes versionhelper.h ?
uses automatic proxy ?




<1600
<Win8.1
NO
NO


1600+
<Win8.1
YES
NO


<1600
Win8.1+
NO
NO


1600+
Win8.1+
YES
YES



Can you confirm this is what you expect?
Thanks,
Alexis.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,132,2018-01-12T10:15:47Z,2018-02-28T17:15:52Z,2018-03-20T10:02:16Z,MERGED,True,373,160,1,https://github.com/alexmrtn,add proxy support for httpapi_winhttp,1,['enhancement'],https://github.com/Azure/azure-c-shared-utility/pull/132,https://github.com/ewertons,3,https://github.com/Azure/azure-c-shared-utility/pull/132#issuecomment-366299634,"Hi,
The goal of this PR is to add the support of proxy via SetOption to the winhttp implementation of httpapi.
I had to rollback on the changed I suggested in #126, otherwise it is not possible to use the WinHttpSetOption function on the requestHandle (we get an ERROR_WINHTTP_OPTION_NOT_SETTABLE error).
I added the support of the OPTION_HTTP_PROXY in both HTTPAPI_SetOption and HTTPAPI_CloneOption.
Since proxy cannot be added on a connection, I added proxy settings in the HTTP_HANDLE_DATA and use it when creating a request handler in the HTTPAPI_ExecuteRequest","Hi @alexmrtn ,
thank you so much for the changes, I will review them again. Let's get this in as soon as possible.
I have one concern about the checks above (thanks for the table, that's pretty good). _MSC_VER refers to the version of the compiler (so it's related to the VS version installed) while VersionHelpers.h is part of the Windows API (related to the operating system version), so I understand you should not use _MSC_VER in this case. In one of my comments I mention another macro, MSVER, which would be the correct one. Take a look on the macro definitions and let us know what you think.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,132,2018-01-12T10:15:47Z,2018-02-28T17:15:52Z,2018-03-20T10:02:16Z,MERGED,True,373,160,1,https://github.com/alexmrtn,add proxy support for httpapi_winhttp,1,['enhancement'],https://github.com/Azure/azure-c-shared-utility/pull/132,https://github.com/alexmrtn,4,https://github.com/Azure/azure-c-shared-utility/pull/132#issuecomment-366659793,"Hi,
The goal of this PR is to add the support of proxy via SetOption to the winhttp implementation of httpapi.
I had to rollback on the changed I suggested in #126, otherwise it is not possible to use the WinHttpSetOption function on the requestHandle (we get an ERROR_WINHTTP_OPTION_NOT_SETTABLE error).
I added the support of the OPTION_HTTP_PROXY in both HTTPAPI_SetOption and HTTPAPI_CloneOption.
Since proxy cannot be added on a connection, I added proxy settings in the HTTP_HANDLE_DATA and use it when creating a request handler in the HTTPAPI_ExecuteRequest","Hi @ewertons
I'm a bit confused about this version checking so let's recap all of this:

Proxy option, must be checked at runtime (see):

We use WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY option for Win 8.1+
We use WINHTTP_ACCESS_TYPE_DEFAULT_PROXY option for <Win8.1
We use IsWindows8Point1OrGreater() function defined in versionhelpers.h to determine which option to use.
I think this part is OK.


versionhelpers.h is only available on Win8.1 SDK (see)

From my understanding, we need to check the SDK version and neither Windows version on which we compile, nor the version of the compiler we use.
The #if preprocessor for the include  versionhelpers.h and the one that defines a block that uses IsWindows8Point1OrGreater() must be the same, otherwise IsWindows8Point1OrGreater() is undefined.
We use WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY macro to determine if SDK is Win 8.1+.



Questions:

You suggested to use the macro MSVER instead of _MSC_VER, but did you mean WINVER as you mentioned in your previous comment?
So I guess we need to use #if defined WINVER && WINVER < 0x0602 for both #if?
Does WINVER really reflect the SDK version or does it reflect the windows version on which we compile? It seems that we can use SDK Win8.1 on Win7 (see) I just want to make sure we implement the correct behavior :)
Where are those macros defined WINVER/MSVER ?
Otherwise, can't  we use WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY for both ""if?

Thanks!",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,132,2018-01-12T10:15:47Z,2018-02-28T17:15:52Z,2018-03-20T10:02:16Z,MERGED,True,373,160,1,https://github.com/alexmrtn,add proxy support for httpapi_winhttp,1,['enhancement'],https://github.com/Azure/azure-c-shared-utility/pull/132,https://github.com/alexmrtn,5,https://github.com/Azure/azure-c-shared-utility/pull/132#issuecomment-368082031,"Hi,
The goal of this PR is to add the support of proxy via SetOption to the winhttp implementation of httpapi.
I had to rollback on the changed I suggested in #126, otherwise it is not possible to use the WinHttpSetOption function on the requestHandle (we get an ERROR_WINHTTP_OPTION_NOT_SETTABLE error).
I added the support of the OPTION_HTTP_PROXY in both HTTPAPI_SetOption and HTTPAPI_CloneOption.
Since proxy cannot be added on a connection, I added proxy settings in the HTTP_HANDLE_DATA and use it when creating a request handler in the HTTPAPI_ExecuteRequest","Hi @ewertons
I did few tests and is seems that our support to the automatic proxy is more complex than what I proposed:
If we use the WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY when we create the session handler, we cannot use the function WinHttpSetOption with the option WINHTTP_OPTION_PROXY on the request handler that depend on this session (we obtain an error code  12011       ERROR_INTERNET_OPTION_NOT_SETTABLE: The request option cannot be set, only queried).
As both set proxy option and automatic proxy are exclusive, it would require a more complex mechanism involving the elements we discussed previously (windows version, compiler version) plus this a new parameter to support all cases. Basically it would require to erase and recreate the g_SessionHandle that is initialliy created in the HTTPAPI_Init() function. However, this session handle is common for all the application that uses the HTTPAPI and we do not want to beak all other connections already created.
As I do not know how you want to support the automatic proxy regarding these problems,
I changed my PR to use only WINHTTP_ACCESS_TYPE_NO_PROXY instead of WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY and yet it allows a user to manually set the proxy, thus leveraging the issue on windows 7 currently present.
I would suggest we do the automatic proxy support in another PR, as this one is already complex and these are two different features.
What do you thinks?
Thanks,
Alexis.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,132,2018-01-12T10:15:47Z,2018-02-28T17:15:52Z,2018-03-20T10:02:16Z,MERGED,True,373,160,1,https://github.com/alexmrtn,add proxy support for httpapi_winhttp,1,['enhancement'],https://github.com/Azure/azure-c-shared-utility/pull/132,https://github.com/ewertons,6,https://github.com/Azure/azure-c-shared-utility/pull/132#issuecomment-368624359,"Hi,
The goal of this PR is to add the support of proxy via SetOption to the winhttp implementation of httpapi.
I had to rollback on the changed I suggested in #126, otherwise it is not possible to use the WinHttpSetOption function on the requestHandle (we get an ERROR_WINHTTP_OPTION_NOT_SETTABLE error).
I added the support of the OPTION_HTTP_PROXY in both HTTPAPI_SetOption and HTTPAPI_CloneOption.
Since proxy cannot be added on a connection, I added proxy settings in the HTTP_HANDLE_DATA and use it when creating a request handler in the HTTPAPI_ExecuteRequest","In reply to ""I did few tests and is seems that our support to the automatic proxy is more complex than what I proposed..."":
I agree, we should separate the issues. Thank you so much for noting that.
However changing the proxy mode to no proxy seems risky to me at this point, let me get more details and I'll reply back.
And you are right, I meant to say WINVER instead of MSVER.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,132,2018-01-12T10:15:47Z,2018-02-28T17:15:52Z,2018-03-20T10:02:16Z,MERGED,True,373,160,1,https://github.com/alexmrtn,add proxy support for httpapi_winhttp,1,['enhancement'],https://github.com/Azure/azure-c-shared-utility/pull/132,https://github.com/ewertons,7,https://github.com/Azure/azure-c-shared-utility/pull/132#issuecomment-368637712,"Hi,
The goal of this PR is to add the support of proxy via SetOption to the winhttp implementation of httpapi.
I had to rollback on the changed I suggested in #126, otherwise it is not possible to use the WinHttpSetOption function on the requestHandle (we get an ERROR_WINHTTP_OPTION_NOT_SETTABLE error).
I added the support of the OPTION_HTTP_PROXY in both HTTPAPI_SetOption and HTTPAPI_CloneOption.
Since proxy cannot be added on a connection, I added proxy settings in the HTTP_HANDLE_DATA and use it when creating a request handler in the HTTPAPI_ExecuteRequest","So upon discussing here, we believe you should not use the NO_PROXY option as the default value.
This would be the block to be used for now (until we change it again for the version discussion):
#if defined WINVER && WINVER < 0x0602
             WINHTTP_ACCESS_TYPE_DEFAULT_PROXY,
#else
             WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY,
#endif

Please adjust the indentation as appropriate.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,132,2018-01-12T10:15:47Z,2018-02-28T17:15:52Z,2018-03-20T10:02:16Z,MERGED,True,373,160,1,https://github.com/alexmrtn,add proxy support for httpapi_winhttp,1,['enhancement'],https://github.com/Azure/azure-c-shared-utility/pull/132,https://github.com/ewertons,8,https://github.com/Azure/azure-c-shared-utility/pull/132#issuecomment-368638561,"Hi,
The goal of this PR is to add the support of proxy via SetOption to the winhttp implementation of httpapi.
I had to rollback on the changed I suggested in #126, otherwise it is not possible to use the WinHttpSetOption function on the requestHandle (we get an ERROR_WINHTTP_OPTION_NOT_SETTABLE error).
I added the support of the OPTION_HTTP_PROXY in both HTTPAPI_SetOption and HTTPAPI_CloneOption.
Since proxy cannot be added on a connection, I added proxy settings in the HTTP_HANDLE_DATA and use it when creating a request handler in the HTTPAPI_ExecuteRequest","@alexmrtn,
we are planning on releasing a new version this Wednesday.
If you get the changes addressed before that we can take them in on this release. Would that work for you?",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,132,2018-01-12T10:15:47Z,2018-02-28T17:15:52Z,2018-03-20T10:02:16Z,MERGED,True,373,160,1,https://github.com/alexmrtn,add proxy support for httpapi_winhttp,1,['enhancement'],https://github.com/Azure/azure-c-shared-utility/pull/132,https://github.com/alexmrtn,9,https://github.com/Azure/azure-c-shared-utility/pull/132#issuecomment-368823066,"Hi,
The goal of this PR is to add the support of proxy via SetOption to the winhttp implementation of httpapi.
I had to rollback on the changed I suggested in #126, otherwise it is not possible to use the WinHttpSetOption function on the requestHandle (we get an ERROR_WINHTTP_OPTION_NOT_SETTABLE error).
I added the support of the OPTION_HTTP_PROXY in both HTTPAPI_SetOption and HTTPAPI_CloneOption.
Since proxy cannot be added on a connection, I added proxy settings in the HTTP_HANDLE_DATA and use it when creating a request handler in the HTTPAPI_ExecuteRequest","Hi @ewertons
Thanks for the review, I corrected the problems related to memory leaks and typo. However I still have a problem reintroducing the the block:
#if defined WINVER && WINVER < 0x0602
             WINHTTP_ACCESS_TYPE_DEFAULT_PROXY,
#else
             WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY,
#endif

On Windows 8.1+ the WinHttpOpen function takes the WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY mode, and when we use the set option we get the error:
[09:46:09.698][ERROR][AZURE_IOTHUB]                     failure setting proxy address (12011)

Indeed, using the WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY prevent us to set a manual proxy (err 12011 is ""The request option cannot be set, only queried."").
Using the WINHTTP_ACCESS_TYPE_DEFAULT_PROXY option does not trigger the error. What I suggest is to revert to this original value (when the API was written) before my PR adding this automatic proxy mode.
The if/else block you suggested can be then added back in a next PR that will solve the automatic proxy problem. I also think we should add the same mechanism in transport protocols for the connection to the iotHub in order to have some consistency in the SDK. But this will be addressed in another thread.
It would be awesome if these changes are merged into the next release! If you still have comments I will do the last modifications during my CET-Wednesday, this will be available for your PST-Wednesday!
Thanks again,
Alexis.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,132,2018-01-12T10:15:47Z,2018-02-28T17:15:52Z,2018-03-20T10:02:16Z,MERGED,True,373,160,1,https://github.com/alexmrtn,add proxy support for httpapi_winhttp,1,['enhancement'],https://github.com/Azure/azure-c-shared-utility/pull/132,https://github.com/ewertons,10,https://github.com/Azure/azure-c-shared-utility/pull/132#issuecomment-369313309,"Hi,
The goal of this PR is to add the support of proxy via SetOption to the winhttp implementation of httpapi.
I had to rollback on the changed I suggested in #126, otherwise it is not possible to use the WinHttpSetOption function on the requestHandle (we get an ERROR_WINHTTP_OPTION_NOT_SETTABLE error).
I added the support of the OPTION_HTTP_PROXY in both HTTPAPI_SetOption and HTTPAPI_CloneOption.
Since proxy cannot be added on a connection, I added proxy settings in the HTTP_HANDLE_DATA and use it when creating a request handler in the HTTPAPI_ExecuteRequest","Ok, this is merged into the c-shared repo.
Now I'll update the azure-iot-sdk-c repo to consume your changes. I'll post an update once done.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,132,2018-01-12T10:15:47Z,2018-02-28T17:15:52Z,2018-03-20T10:02:16Z,MERGED,True,373,160,1,https://github.com/alexmrtn,add proxy support for httpapi_winhttp,1,['enhancement'],https://github.com/Azure/azure-c-shared-utility/pull/132,https://github.com/ewertons,11,https://github.com/Azure/azure-c-shared-utility/pull/132#issuecomment-369341608,"Hi,
The goal of this PR is to add the support of proxy via SetOption to the winhttp implementation of httpapi.
I had to rollback on the changed I suggested in #126, otherwise it is not possible to use the WinHttpSetOption function on the requestHandle (we get an ERROR_WINHTTP_OPTION_NOT_SETTABLE error).
I added the support of the OPTION_HTTP_PROXY in both HTTPAPI_SetOption and HTTPAPI_CloneOption.
Since proxy cannot be added on a connection, I added proxy settings in the HTTP_HANDLE_DATA and use it when creating a request handler in the HTTPAPI_ExecuteRequest","@alexmrtn , I sent you an email with some questions, please let me know if you got it. Thanks.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,134,2018-01-22T22:52:25Z,2018-01-30T23:27:14Z,2018-01-30T23:27:14Z,CLOSED,False,3,3,1,https://github.com/darobs,The refcount include directories are not needed on installed libraries.,1,[],https://github.com/Azure/azure-c-shared-utility/pull/134,https://github.com/darobs,1,https://github.com/Azure/azure-c-shared-utility/pull/134,"Changed calls to target_include_directories()  to add the source include directories as PRIVATE, so that CMake doesn't balk at these directories on installation.  On c-utility installation, the appropriate files are copied into ${INSTALL_PATH}/azureiot/azure_c_shared_utility, so these source directories shouldn't be a part of the INTERFACE_INCLUDE_DIRECTORIES.
I was able to compile the c-sdk with this change on Linux x64 and Windows.  It seems that when c-utility is pulled in as a subdirectory, CMake finds the correct include directories.  The trick is you won't know if all the platforms work until you attempt to build the C-SDK with this change. :(","Changed calls to target_include_directories()  to add the source include directories as PRIVATE, so that CMake doesn't balk at these directories on installation.  On c-utility installation, the appropriate files are copied into ${INSTALL_PATH}/azureiot/azure_c_shared_utility, so these source directories shouldn't be a part of the INTERFACE_INCLUDE_DIRECTORIES.
I was able to compile the c-sdk with this change on Linux x64 and Windows.  It seems that when c-utility is pulled in as a subdirectory, CMake finds the correct include directories.  The trick is you won't know if all the platforms work until you attempt to build the C-SDK with this change. :(",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,134,2018-01-22T22:52:25Z,2018-01-30T23:27:14Z,2018-01-30T23:27:14Z,CLOSED,False,3,3,1,https://github.com/darobs,The refcount include directories are not needed on installed libraries.,1,[],https://github.com/Azure/azure-c-shared-utility/pull/134,https://github.com/jspaith,2,https://github.com/Azure/azure-c-shared-utility/pull/134#issuecomment-361769891,"Changed calls to target_include_directories()  to add the source include directories as PRIVATE, so that CMake doesn't balk at these directories on installation.  On c-utility installation, the appropriate files are copied into ${INSTALL_PATH}/azureiot/azure_c_shared_utility, so these source directories shouldn't be a part of the INTERFACE_INCLUDE_DIRECTORIES.
I was able to compile the c-sdk with this change on Linux x64 and Windows.  It seems that when c-utility is pulled in as a subdirectory, CMake finds the correct include directories.  The trick is you won't know if all the platforms work until you attempt to build the C-SDK with this change. :(",We've address via different means.,True,{'THUMBS_UP': ['https://github.com/darobs']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,135,2018-01-25T12:12:08Z,2018-02-15T16:07:03Z,2018-02-15T16:39:00Z,CLOSED,False,82,12,1,https://github.com/PeterSmithson,Proxy issues with Windows 7,2,[],https://github.com/Azure/azure-c-shared-utility/pull/135,https://github.com/PeterSmithson,1,https://github.com/Azure/azure-c-shared-utility/pull/135,"Hi,
I work for Schneider-electric in the UK as a developer.  We have submitted something similar to this via e-mail but nothing came of it.  I'm now using github for the first time so I hope I'm doing this right.
We had some issues with our EcoStuxureware product in an office running Windows 7 with a PAC file for the proxy settings.  These changes resolved that issue.  I've also checked it works on Windows 10 with a PAC file and also without any proxy (in a 3rd office).
I noticed a branch called ""EcoStruxure-SE/automatic_proxy_windows"" which seems related by @alexmrtn
There are two problems.

If the code is compiled with a Windows 10 SDK on a recent compiler, the code will use WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY.  When the compiled code is ran on a Windows 7 PC, the WinHttpOpen will fail as that option is not available on that OS. The fix will allow one compiled binary to be used on Windows 7 or later.  First (assuming you are compiling on up to date system), it will try the AUTOMATIC option.  If that fails, it falls back to DEFAULT.
In the DEFAULT mode, the proxy settings are required. We found this on a site where a PAC script was used - we don't know if it would apply to other situations.  A call to WinHttpSetOption has been added.

If the binary is ran on Windows 10 (and presumably 8.1), the AUTOMATIC option is used and everything works fine (we have found).","Hi,
I work for Schneider-electric in the UK as a developer.  We have submitted something similar to this via e-mail but nothing came of it.  I'm now using github for the first time so I hope I'm doing this right.
We had some issues with our EcoStuxureware product in an office running Windows 7 with a PAC file for the proxy settings.  These changes resolved that issue.  I've also checked it works on Windows 10 with a PAC file and also without any proxy (in a 3rd office).
I noticed a branch called ""EcoStruxure-SE/automatic_proxy_windows"" which seems related by @alexmrtn
There are two problems.

If the code is compiled with a Windows 10 SDK on a recent compiler, the code will use WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY.  When the compiled code is ran on a Windows 7 PC, the WinHttpOpen will fail as that option is not available on that OS. The fix will allow one compiled binary to be used on Windows 7 or later.  First (assuming you are compiling on up to date system), it will try the AUTOMATIC option.  If that fails, it falls back to DEFAULT.
In the DEFAULT mode, the proxy settings are required. We found this on a site where a PAC script was used - we don't know if it would apply to other situations.  A call to WinHttpSetOption has been added.

If the binary is ran on Windows 10 (and presumably 8.1), the AUTOMATIC option is used and everything works fine (we have found).",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,135,2018-01-25T12:12:08Z,2018-02-15T16:07:03Z,2018-02-15T16:39:00Z,CLOSED,False,82,12,1,https://github.com/PeterSmithson,Proxy issues with Windows 7,2,[],https://github.com/Azure/azure-c-shared-utility/pull/135,https://github.com/msftclas,2,https://github.com/Azure/azure-c-shared-utility/pull/135#issuecomment-360449232,"Hi,
I work for Schneider-electric in the UK as a developer.  We have submitted something similar to this via e-mail but nothing came of it.  I'm now using github for the first time so I hope I'm doing this right.
We had some issues with our EcoStuxureware product in an office running Windows 7 with a PAC file for the proxy settings.  These changes resolved that issue.  I've also checked it works on Windows 10 with a PAC file and also without any proxy (in a 3rd office).
I noticed a branch called ""EcoStruxure-SE/automatic_proxy_windows"" which seems related by @alexmrtn
There are two problems.

If the code is compiled with a Windows 10 SDK on a recent compiler, the code will use WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY.  When the compiled code is ran on a Windows 7 PC, the WinHttpOpen will fail as that option is not available on that OS. The fix will allow one compiled binary to be used on Windows 7 or later.  First (assuming you are compiling on up to date system), it will try the AUTOMATIC option.  If that fails, it falls back to DEFAULT.
In the DEFAULT mode, the proxy settings are required. We found this on a site where a PAC script was used - we don't know if it would apply to other situations.  A call to WinHttpSetOption has been added.

If the binary is ran on Windows 10 (and presumably 8.1), the AUTOMATIC option is used and everything works fine (we have found).",All CLA requirements met.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,135,2018-01-25T12:12:08Z,2018-02-15T16:07:03Z,2018-02-15T16:39:00Z,CLOSED,False,82,12,1,https://github.com/PeterSmithson,Proxy issues with Windows 7,2,[],https://github.com/Azure/azure-c-shared-utility/pull/135,https://github.com/PeterSmithson,3,https://github.com/Azure/azure-c-shared-utility/pull/135#issuecomment-360502192,"Hi,
I work for Schneider-electric in the UK as a developer.  We have submitted something similar to this via e-mail but nothing came of it.  I'm now using github for the first time so I hope I'm doing this right.
We had some issues with our EcoStuxureware product in an office running Windows 7 with a PAC file for the proxy settings.  These changes resolved that issue.  I've also checked it works on Windows 10 with a PAC file and also without any proxy (in a 3rd office).
I noticed a branch called ""EcoStruxure-SE/automatic_proxy_windows"" which seems related by @alexmrtn
There are two problems.

If the code is compiled with a Windows 10 SDK on a recent compiler, the code will use WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY.  When the compiled code is ran on a Windows 7 PC, the WinHttpOpen will fail as that option is not available on that OS. The fix will allow one compiled binary to be used on Windows 7 or later.  First (assuming you are compiling on up to date system), it will try the AUTOMATIC option.  If that fails, it falls back to DEFAULT.
In the DEFAULT mode, the proxy settings are required. We found this on a site where a PAC script was used - we don't know if it would apply to other situations.  A call to WinHttpSetOption has been added.

If the binary is ran on Windows 10 (and presumably 8.1), the AUTOMATIC option is used and everything works fine (we have found).",I just realised that this conflicts with #132 which also deals with the proxy.  It doesn't use the AUTOMATIC option at all though.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,135,2018-01-25T12:12:08Z,2018-02-15T16:07:03Z,2018-02-15T16:39:00Z,CLOSED,False,82,12,1,https://github.com/PeterSmithson,Proxy issues with Windows 7,2,[],https://github.com/Azure/azure-c-shared-utility/pull/135,https://github.com/ewertons,4,https://github.com/Azure/azure-c-shared-utility/pull/135#issuecomment-363522676,"Hi,
I work for Schneider-electric in the UK as a developer.  We have submitted something similar to this via e-mail but nothing came of it.  I'm now using github for the first time so I hope I'm doing this right.
We had some issues with our EcoStuxureware product in an office running Windows 7 with a PAC file for the proxy settings.  These changes resolved that issue.  I've also checked it works on Windows 10 with a PAC file and also without any proxy (in a 3rd office).
I noticed a branch called ""EcoStruxure-SE/automatic_proxy_windows"" which seems related by @alexmrtn
There are two problems.

If the code is compiled with a Windows 10 SDK on a recent compiler, the code will use WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY.  When the compiled code is ran on a Windows 7 PC, the WinHttpOpen will fail as that option is not available on that OS. The fix will allow one compiled binary to be used on Windows 7 or later.  First (assuming you are compiling on up to date system), it will try the AUTOMATIC option.  If that fails, it falls back to DEFAULT.
In the DEFAULT mode, the proxy settings are required. We found this on a site where a PAC script was used - we don't know if it would apply to other situations.  A call to WinHttpSetOption has been added.

If the binary is ran on Windows 10 (and presumably 8.1), the AUTOMATIC option is used and everything works fine (we have found).","Hi @PeterSmithson ,
thanks for the PR, however based on recent verification of the code the issue was root caused and the possible solution will need to be different than the proposed above.
Here is the ticket tracking this issue: #136",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,135,2018-01-25T12:12:08Z,2018-02-15T16:07:03Z,2018-02-15T16:39:00Z,CLOSED,False,82,12,1,https://github.com/PeterSmithson,Proxy issues with Windows 7,2,[],https://github.com/Azure/azure-c-shared-utility/pull/135,https://github.com/PeterSmithson,5,https://github.com/Azure/azure-c-shared-utility/pull/135#issuecomment-365974732,"Hi,
I work for Schneider-electric in the UK as a developer.  We have submitted something similar to this via e-mail but nothing came of it.  I'm now using github for the first time so I hope I'm doing this right.
We had some issues with our EcoStuxureware product in an office running Windows 7 with a PAC file for the proxy settings.  These changes resolved that issue.  I've also checked it works on Windows 10 with a PAC file and also without any proxy (in a 3rd office).
I noticed a branch called ""EcoStruxure-SE/automatic_proxy_windows"" which seems related by @alexmrtn
There are two problems.

If the code is compiled with a Windows 10 SDK on a recent compiler, the code will use WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY.  When the compiled code is ran on a Windows 7 PC, the WinHttpOpen will fail as that option is not available on that OS. The fix will allow one compiled binary to be used on Windows 7 or later.  First (assuming you are compiling on up to date system), it will try the AUTOMATIC option.  If that fails, it falls back to DEFAULT.
In the DEFAULT mode, the proxy settings are required. We found this on a site where a PAC script was used - we don't know if it would apply to other situations.  A call to WinHttpSetOption has been added.

If the binary is ran on Windows 10 (and presumably 8.1), the AUTOMATIC option is used and everything works fine (we have found).",This is covered by PR #132 so I'm closing it.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,135,2018-01-25T12:12:08Z,2018-02-15T16:07:03Z,2018-02-15T16:39:00Z,CLOSED,False,82,12,1,https://github.com/PeterSmithson,Proxy issues with Windows 7,2,[],https://github.com/Azure/azure-c-shared-utility/pull/135,https://github.com/ewertons,6,https://github.com/Azure/azure-c-shared-utility/pull/135#issuecomment-365985319,"Hi,
I work for Schneider-electric in the UK as a developer.  We have submitted something similar to this via e-mail but nothing came of it.  I'm now using github for the first time so I hope I'm doing this right.
We had some issues with our EcoStuxureware product in an office running Windows 7 with a PAC file for the proxy settings.  These changes resolved that issue.  I've also checked it works on Windows 10 with a PAC file and also without any proxy (in a 3rd office).
I noticed a branch called ""EcoStruxure-SE/automatic_proxy_windows"" which seems related by @alexmrtn
There are two problems.

If the code is compiled with a Windows 10 SDK on a recent compiler, the code will use WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY.  When the compiled code is ran on a Windows 7 PC, the WinHttpOpen will fail as that option is not available on that OS. The fix will allow one compiled binary to be used on Windows 7 or later.  First (assuming you are compiling on up to date system), it will try the AUTOMATIC option.  If that fails, it falls back to DEFAULT.
In the DEFAULT mode, the proxy settings are required. We found this on a site where a PAC script was used - we don't know if it would apply to other situations.  A call to WinHttpSetOption has been added.

If the binary is ran on Windows 10 (and presumably 8.1), the AUTOMATIC option is used and everything works fine (we have found).","Alright, we will focus on #132. Thanks @PeterSmithson",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,137,2018-02-13T19:10:35Z,2018-03-19T22:45:15Z,2019-09-05T06:32:41Z,CLOSED,False,40,8,1,https://github.com/markrad,Adds the shared library to the install and versions the .so file,2,[],https://github.com/Azure/azure-c-shared-utility/pull/137,https://github.com/markrad,1,https://github.com/Azure/azure-c-shared-utility/pull/137,"Now the .so or .dll file is built correctly when build_as_dynamic is passed to cmake, this fix ensures that the .so file is installed and versioned and the .dll file uses a cmake facility to remove the requirement to keep the .def file up to date. It also uses a obj build so that the code is only compiled once and then used to build the .so/.dll and .lib files.","Now the .so or .dll file is built correctly when build_as_dynamic is passed to cmake, this fix ensures that the .so file is installed and versioned and the .dll file uses a cmake facility to remove the requirement to keep the .def file up to date. It also uses a obj build so that the code is only compiled once and then used to build the .so/.dll and .lib files.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,137,2018-02-13T19:10:35Z,2018-03-19T22:45:15Z,2019-09-05T06:32:41Z,CLOSED,False,40,8,1,https://github.com/markrad,Adds the shared library to the install and versions the .so file,2,[],https://github.com/Azure/azure-c-shared-utility/pull/137,https://github.com/markrad,2,https://github.com/Azure/azure-c-shared-utility/pull/137#issuecomment-365374509,"Now the .so or .dll file is built correctly when build_as_dynamic is passed to cmake, this fix ensures that the .so file is installed and versioned and the .dll file uses a cmake facility to remove the requirement to keep the .def file up to date. It also uses a obj build so that the code is only compiled once and then used to build the .so/.dll and .lib files.",@ewertons is added to the review. #Closed,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,137,2018-02-13T19:10:35Z,2018-03-19T22:45:15Z,2019-09-05T06:32:41Z,CLOSED,False,40,8,1,https://github.com/markrad,Adds the shared library to the install and versions the .so file,2,[],https://github.com/Azure/azure-c-shared-utility/pull/137,https://github.com/ewertons,3,https://github.com/Azure/azure-c-shared-utility/pull/137#issuecomment-365404209,"Now the .so or .dll file is built correctly when build_as_dynamic is passed to cmake, this fix ensures that the .so file is installed and versioned and the .dll file uses a cmake facility to remove the requirement to keep the .def file up to date. It also uses a obj build so that the code is only compiled once and then used to build the .so/.dll and .lib files.",If possible please run a azure-iot-sdk-c buddy build on the gate using this before checking it into c-shared.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,137,2018-02-13T19:10:35Z,2018-03-19T22:45:15Z,2019-09-05T06:32:41Z,CLOSED,False,40,8,1,https://github.com/markrad,Adds the shared library to the install and versions the .so file,2,[],https://github.com/Azure/azure-c-shared-utility/pull/137,https://github.com/jspaith,4,https://github.com/Azure/azure-c-shared-utility/pull/137#issuecomment-374410104,"Now the .so or .dll file is built correctly when build_as_dynamic is passed to cmake, this fix ensures that the .so file is installed and versioned and the .dll file uses a cmake facility to remove the requirement to keep the .def file up to date. It also uses a obj build so that the code is only compiled once and then used to build the .so/.dll and .lib files.","Per offline discussion with Mark, closing for now until code is completely ready.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,141,2018-03-08T16:35:52Z,2018-03-16T17:17:43Z,2018-03-16T17:17:43Z,MERGED,True,2,0,1,https://github.com/raaaar,Copy hostname and port from socketio to tlsio config,1,[],https://github.com/Azure/azure-c-shared-utility/pull/141,https://github.com/raaaar,1,https://github.com/Azure/azure-c-shared-utility/pull/141,Fixes #139,Fixes #139,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,142,2018-03-09T15:43:25Z,2018-03-22T23:52:46Z,2018-08-24T08:12:51Z,MERGED,True,30,21,2,https://github.com/alexmrtn,Fix HTTP_API proxy credentials,1,[],https://github.com/Azure/azure-c-shared-utility/pull/142,https://github.com/alexmrtn,1,https://github.com/Azure/azure-c-shared-utility/pull/142,"Hi,
It seems that the current implementation of the proxy support for HTTP_API contains a bug. When sending the request to a proxy server that requests user name and password, the expected http header Proxy-Authorization (see) is missing:
Problem: Using WinHttpSetOption with the option flag WINHTTP_OPTION_PROXY_USERNAME or WINHTTP_OPTION_PROXY_PASSWORD seems not  to have any effect on the corresponding HINTERNET request.
Solution: Using WinHttpSetCredentials function instead of WinHttpSetOption fixes the missing header in the http request and is recommended (see).
I also changed the previous use of mbstowcs and used the secure mbstowcs_s.
Thanks,
Alexis.","Hi,
It seems that the current implementation of the proxy support for HTTP_API contains a bug. When sending the request to a proxy server that requests user name and password, the expected http header Proxy-Authorization (see) is missing:
Problem: Using WinHttpSetOption with the option flag WINHTTP_OPTION_PROXY_USERNAME or WINHTTP_OPTION_PROXY_PASSWORD seems not  to have any effect on the corresponding HINTERNET request.
Solution: Using WinHttpSetCredentials function instead of WinHttpSetOption fixes the missing header in the http request and is recommended (see).
I also changed the previous use of mbstowcs and used the secure mbstowcs_s.
Thanks,
Alexis.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,142,2018-03-09T15:43:25Z,2018-03-22T23:52:46Z,2018-08-24T08:12:51Z,MERGED,True,30,21,2,https://github.com/alexmrtn,Fix HTTP_API proxy credentials,1,[],https://github.com/Azure/azure-c-shared-utility/pull/142,https://github.com/jspaith,2,https://github.com/Azure/azure-c-shared-utility/pull/142#issuecomment-374662880,"Hi,
It seems that the current implementation of the proxy support for HTTP_API contains a bug. When sending the request to a proxy server that requests user name and password, the expected http header Proxy-Authorization (see) is missing:
Problem: Using WinHttpSetOption with the option flag WINHTTP_OPTION_PROXY_USERNAME or WINHTTP_OPTION_PROXY_PASSWORD seems not  to have any effect on the corresponding HINTERNET request.
Solution: Using WinHttpSetCredentials function instead of WinHttpSetOption fixes the missing header in the http request and is recommended (see).
I also changed the previous use of mbstowcs and used the secure mbstowcs_s.
Thanks,
Alexis.","I have one small change that needs addressing & squashing but looks good otherwise.  Once you get this fixed, we can take this in.  Thanks.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,142,2018-03-09T15:43:25Z,2018-03-22T23:52:46Z,2018-08-24T08:12:51Z,MERGED,True,30,21,2,https://github.com/alexmrtn,Fix HTTP_API proxy credentials,1,[],https://github.com/Azure/azure-c-shared-utility/pull/142,https://github.com/alexmrtn,3,https://github.com/Azure/azure-c-shared-utility/pull/142#issuecomment-374882982,"Hi,
It seems that the current implementation of the proxy support for HTTP_API contains a bug. When sending the request to a proxy server that requests user name and password, the expected http header Proxy-Authorization (see) is missing:
Problem: Using WinHttpSetOption with the option flag WINHTTP_OPTION_PROXY_USERNAME or WINHTTP_OPTION_PROXY_PASSWORD seems not  to have any effect on the corresponding HINTERNET request.
Solution: Using WinHttpSetCredentials function instead of WinHttpSetOption fixes the missing header in the http request and is recommended (see).
I also changed the previous use of mbstowcs and used the secure mbstowcs_s.
Thanks,
Alexis.","Hi, I made the modification and the squashing, thanks @jspaith!",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,143,2018-03-22T23:05:14Z,2018-03-23T00:56:02Z,2018-03-23T00:56:02Z,CLOSED,False,4,0,1,https://github.com/markrad,Add Missing Functions to .def File,2,[],https://github.com/Azure/azure-c-shared-utility/pull/143,https://github.com/markrad,1,https://github.com/Azure/azure-c-shared-utility/pull/143,The subject pretty much sums it up. When building dynamic libraries some of the required functions are not exported via the .def file on Windows. This adds the ones I know about.,The subject pretty much sums it up. When building dynamic libraries some of the required functions are not exported via the .def file on Windows. This adds the ones I know about.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,146,2018-04-03T16:26:03Z,2018-04-03T16:47:43Z,2018-10-01T20:03:35Z,MERGED,True,1,1,1,https://github.com/dcristoloveanu,Fix UUID includes when consumed from a .cpp file,1,[],https://github.com/Azure/azure-c-shared-utility/pull/146,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/146,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,149,2018-04-14T02:25:04Z,2018-05-15T22:33:42Z,2018-05-15T22:33:42Z,MERGED,True,50,22,4,https://github.com/seank-com,Silence Warnings,1,[],https://github.com/Azure/azure-c-shared-utility/pull/149,https://github.com/seank-com,1,https://github.com/Azure/azure-c-shared-utility/pull/149,"Found while trying to port 2018-03-02 on master to the TI CC3220SF at the #IoTInsiderLab
Silences the following warnings:
======== .libraries [../../c-utility/build_all/tirtos] ========
""../../adapters/agenttime.c"", line 32: warning: last line of file ends without a newline
""../../src/map.c"", line 677: warning: last line of file ends without a newline
""../../../c-utility/inc/azure_c_shared_utility/const_defines.h"", line 18: warning: last line of file ends without a newline
""../../src/iothubtransport_amqp_common.c"", line 91: warning: function ""AMQP_TRANSPORT_STATEStrings"" was declared but never referenced

All unittests pass
$ docker run -it --rm --mount type=bind,src=/Users/seank/Development/azure-c-shared-utility,dst=/src/azure-c-shared-utility azure-build
# cd azure-c-shared-utility/
# mkdir cmake
# cd cmake/
# cmake .. -Drun_unittests:bool=ON
-- The C compiler identification is GNU 5.4.0
     ...clipped for brevity...
-- Build files have been written to: /src/azure-c-shared-utility/cmake
# cmake --build .
Scanning dependencies of target aziotsharedutil
[  0%] Building C object CMakeFiles/aziotsharedutil.dir/src/base32.c.o
     ...clipped for brevity...
[100%] Built target tlsio_connect
# ./tests/agenttime_ut/agenttime_ut_exe
 === Executing test suite agenttime_unittests ===
     ...clipped for brevity...
3 tests ran, 0 failed, 3 succeeded.
# ./tests/base32_ut/base32_ut_exe
 === Executing test suite base32_ut ===
    ...clipped for brevity...
14 tests ran, 0 failed, 14 succeeded.
# ./tests/base64_ut/base64_ut_exe
 === Executing test suite base64_unittests ===
     ...clipped for brevity...
17 tests ran, 0 failed, 17 succeeded.
# ./tests/buffer_ut/buffer_ut_exe
 === Executing test suite Buffer_UnitTests ===
     ...clipped for brevity...
68 tests ran, 0 failed, 68 succeeded.
# ./tests/condition_ut/condition_ut_exe
 === Executing test suite Condition_UnitTests ===
     ...clipped for brevity...
12 tests ran, 0 failed, 12 succeeded.
# ./tests/connectionstringparser_ut/connectionstringparser_ut_exe
 === Executing test suite connectionstringparser_ut ===
     ...clipped for brevity...
27 tests ran, 0 failed, 27 succeeded.
# ./tests/constbuffer_ut/constbuffer_ut_exe
 === Executing test suite constbuffer_unittests ===
     ...clipped for brevity...
20 tests ran, 0 failed, 20 succeeded.
# ./tests/constmap_ut/constmap_ut_exe
 === Executing test suite constmap_unittests ===
     ...clipped for brevity...
22 tests ran, 0 failed, 22 succeeded.
# ./tests/crtabstractions_ut/crt_abstractions_ut_exe
 === Executing test suite CRTAbstractions_UnitTests ===
     ...clipped for brevity...
root@9c4dfdad6bf9:/src/azure-c-shared-utility/cmake# ./tests/dns_async_ut/dns_async_ut_exe
 === Executing test suite dns_async_ut ===
     ...clipped for brevity...
14 tests ran, 0 failed, 14 succeeded.
# ./tests/doublylinkedlist_ut/doublylinkedlist_ut_exe
 === Executing test suite doublylinkedlist_unittests ===
     ...clipped for brevity...
17 tests ran, 0 failed, 17 succeeded.
# ./tests/gballoc_ut/gballoc_ut_exe
 === Executing test suite GBAlloc_UnitTests ===
     ...clipped for brevity...
58 tests ran, 0 failed, 58 succeeded.
# ./tests/gballoc_without_init_ut/gballoc_without_init_ut_exe
 === Executing test suite GBAlloc_For_Init_UnitTests ===
     ...clipped for brevity...
7 tests ran, 0 failed, 7 succeeded.
# ./tests/hmacsha256_ut/hmacsha256_ut_exe
 === Executing test suite HMACSHA256_UnitTests ===
     ...clipped for brevity...
6 tests ran, 0 failed, 6 succeeded.
# ./tests/http_proxy_io_ut/http_proxy_io_ut_exe
 === Executing test suite http_proxy_io_unittests ===
     ...clipped for brevity...
98 tests ran, 0 failed, 98 succeeded.
# ./tests/httpapicompact_ut/httpapi_compact_ut_exe
 === Executing test suite httpapicompact_ut ===
     ...clipped for brevity...
78 tests ran, 0 failed, 78 succeeded.
# ./tests/httpapiex_ut/httpapiex_ut_exe
 === Executing test suite httpapiex_unittests ===
     ...clipped for brevity...
59 tests ran, 0 failed, 59 succeeded.
# ./tests/httpapiexsas_ut/httpapiexsas_ut_exe
 === Executing test suite httpapiexsas_unittests ===
     ...clipped for brevity...
22 tests ran, 0 failed, 22 succeeded.
# ./tests/httpheaders_ut/httpheaders_ut_exe
 === Executing test suite HTTPHeaders_UnitTests ===
     ...clipped for brevity...
46 tests ran, 0 failed, 46 succeeded.
# ./tests/lock_ut/lock_ut_exe
 === Executing test suite LOCK_UnitTests ===
     ...clipped for brevity...
7 tests ran, 0 failed, 7 succeeded.
# ./tests/map_ut/map_ut_exe
 === Executing test suite map_unittests ===
     ...clipped for brevity...
107 tests ran, 0 failed, 107 succeeded.
# ./tests/optionhandler_ut/optionhandler_ut_exe
 === Executing test suite optionhandler_unittests ===
     ...clipped for brevity...
31 tests ran, 0 failed, 31 succeeded.
# ./tests/refcount_ut/refcount_ut_exe
 === Executing test suite refcount_unittests ===
     ...clipped for brevity...
4 tests ran, 0 failed, 4 succeeded.
# ./tests/sastoken_ut/sastoken_ut_exe
 === Executing test suite sastoken_unittests ===
     ...clipped for brevity...
56 tests ran, 0 failed, 56 succeeded.
# ./tests/singlylinkedlist_ut/singlylinkedlist_ut_exe
 === Executing test suite singlylinkedlist_unittests ===
     ...clipped for brevity...
42 tests ran, 0 failed, 42 succeeded.
# ./tests/socket_async_ut/socket_async_ut_exe
 === Executing test suite socket_async_ut ===
     ...clipped for brevity...
25 tests ran, 0 failed, 25 succeeded.
# ./tests/socketio_berkeley_ut/socketio_berkeley_ut_exe
 === Executing test suite socketio_berkeley_unittests ===
0 tests ran, 0 failed, 0 succeeded.
# ./tests/string_tokenizer_ut/string_tokenizer_ut_exe
 === Executing test suite string_tokenizer_unittests ===
 ...clipped for brevity...
23 tests ran, 0 failed, 23 succeeded.
# ./tests/strings_ut/strings_ut_exe
 === Executing test suite strings_unittests ===
     ...clipped for brevity...
73 tests ran, 0 failed, 73 succeeded.
# ./tests/template_ut/template_ut_exe
 === Executing test suite template_ut ===
     ...clipped for brevity...
5 tests ran, 0 failed, 5 succeeded.
# ./tests/tickcounter_freertos_ut/tickcounter_freertos_ut_exe
 === Executing test suite tickcounter_freertos_unittests ===
     ...clipped for brevity...
8 tests ran, 0 failed, 8 succeeded.
# ./tests/tickcounter_ut/tickcounter_ut_exe
 === Executing test suite tickcounter_unittests ===
     ...clipped for brevity...
7 tests ran, 0 failed, 7 succeeded.
# ./tests/tlsio_esp8266_ut/tlsio_esp8266_ut_exe
 === Executing test suite tlsio_esp8266_ut ===
     ...clipped for brevity...
35 tests ran, 0 failed, 35 succeeded.
# ./tests/tlsio_options_ut/tlsio_options_ut_exe
 === Executing test suite tlsio_options_unittests ===
     ...clipped for brevity...
29 tests ran, 0 failed, 29 succeeded.
# ./tests/uniqueid_ut/uniqueid_ut_exe
 === Executing test suite uniqueid_unittests ===
     ...clipped for brevity...
3 tests ran, 0 failed, 3 succeeded.
# ./tests/urlencode_ut/urlencode_ut_exe
 === Executing test suite URLEncode_UnitTests ===
     ...clipped for brevity...
42 tests ran, 0 failed, 42 succeeded.
# ./tests/utf8_checker_ut/utf8_checker_ut_exe
 === Executing test suite utf8_checker_ut ===
     ...clipped for brevity...
34 tests ran, 0 failed, 34 succeeded.
# ./tests/uuid_ut/uuid_ut_exe
 === Executing test suite uuid_unittests ===
     ...clipped for brevity...
9 tests ran, 0 failed, 9 succeeded.
# ./tests/uws_client_ut/uws_client_ut_exe
 === Executing test suite uws_client_ut ===
     ...clipped for brevity...
194 tests ran, 0 failed, 194 succeeded.
# ./tests/uws_frame_encoder_ut/uws_frame_encoder_ut_exe
 === Executing test suite uws_frame_encoder_ut ===
     ...clipped for brevity...
40 tests ran, 0 failed, 40 succeeded.
# ./tests/vector_ut/vector_ut_exe
 === Executing test suite Vector_UnitTests ===
     ...clipped for brevity...
43 tests ran, 0 failed, 43 succeeded.
# ./tests/wsio_ut/wsio_ut_exe
 === Executing test suite wsio_ut ===
     ...clipped for brevity...
94 tests ran, 0 failed, 94 succeeded.
# ./tests/x509_openssl_ut/x509_openssl_ut_exe
 === Executing test suite x509_openssl_unittests ===
     ...clipped for brevity...
11 tests ran, 0 failed, 11 succeeded.
# ./tests/xio_ut/xio_ut_exe
 === Executing test suite xio_unittests ===
     ...clipped for brevity...
36 tests ran, 0 failed, 36 succeeded.
#","Found while trying to port 2018-03-02 on master to the TI CC3220SF at the #IoTInsiderLab
Silences the following warnings:
======== .libraries [../../c-utility/build_all/tirtos] ========
""../../adapters/agenttime.c"", line 32: warning: last line of file ends without a newline
""../../src/map.c"", line 677: warning: last line of file ends without a newline
""../../../c-utility/inc/azure_c_shared_utility/const_defines.h"", line 18: warning: last line of file ends without a newline
""../../src/iothubtransport_amqp_common.c"", line 91: warning: function ""AMQP_TRANSPORT_STATEStrings"" was declared but never referenced

All unittests pass
$ docker run -it --rm --mount type=bind,src=/Users/seank/Development/azure-c-shared-utility,dst=/src/azure-c-shared-utility azure-build
# cd azure-c-shared-utility/
# mkdir cmake
# cd cmake/
# cmake .. -Drun_unittests:bool=ON
-- The C compiler identification is GNU 5.4.0
     ...clipped for brevity...
-- Build files have been written to: /src/azure-c-shared-utility/cmake
# cmake --build .
Scanning dependencies of target aziotsharedutil
[  0%] Building C object CMakeFiles/aziotsharedutil.dir/src/base32.c.o
     ...clipped for brevity...
[100%] Built target tlsio_connect
# ./tests/agenttime_ut/agenttime_ut_exe
 === Executing test suite agenttime_unittests ===
     ...clipped for brevity...
3 tests ran, 0 failed, 3 succeeded.
# ./tests/base32_ut/base32_ut_exe
 === Executing test suite base32_ut ===
    ...clipped for brevity...
14 tests ran, 0 failed, 14 succeeded.
# ./tests/base64_ut/base64_ut_exe
 === Executing test suite base64_unittests ===
     ...clipped for brevity...
17 tests ran, 0 failed, 17 succeeded.
# ./tests/buffer_ut/buffer_ut_exe
 === Executing test suite Buffer_UnitTests ===
     ...clipped for brevity...
68 tests ran, 0 failed, 68 succeeded.
# ./tests/condition_ut/condition_ut_exe
 === Executing test suite Condition_UnitTests ===
     ...clipped for brevity...
12 tests ran, 0 failed, 12 succeeded.
# ./tests/connectionstringparser_ut/connectionstringparser_ut_exe
 === Executing test suite connectionstringparser_ut ===
     ...clipped for brevity...
27 tests ran, 0 failed, 27 succeeded.
# ./tests/constbuffer_ut/constbuffer_ut_exe
 === Executing test suite constbuffer_unittests ===
     ...clipped for brevity...
20 tests ran, 0 failed, 20 succeeded.
# ./tests/constmap_ut/constmap_ut_exe
 === Executing test suite constmap_unittests ===
     ...clipped for brevity...
22 tests ran, 0 failed, 22 succeeded.
# ./tests/crtabstractions_ut/crt_abstractions_ut_exe
 === Executing test suite CRTAbstractions_UnitTests ===
     ...clipped for brevity...
root@9c4dfdad6bf9:/src/azure-c-shared-utility/cmake# ./tests/dns_async_ut/dns_async_ut_exe
 === Executing test suite dns_async_ut ===
     ...clipped for brevity...
14 tests ran, 0 failed, 14 succeeded.
# ./tests/doublylinkedlist_ut/doublylinkedlist_ut_exe
 === Executing test suite doublylinkedlist_unittests ===
     ...clipped for brevity...
17 tests ran, 0 failed, 17 succeeded.
# ./tests/gballoc_ut/gballoc_ut_exe
 === Executing test suite GBAlloc_UnitTests ===
     ...clipped for brevity...
58 tests ran, 0 failed, 58 succeeded.
# ./tests/gballoc_without_init_ut/gballoc_without_init_ut_exe
 === Executing test suite GBAlloc_For_Init_UnitTests ===
     ...clipped for brevity...
7 tests ran, 0 failed, 7 succeeded.
# ./tests/hmacsha256_ut/hmacsha256_ut_exe
 === Executing test suite HMACSHA256_UnitTests ===
     ...clipped for brevity...
6 tests ran, 0 failed, 6 succeeded.
# ./tests/http_proxy_io_ut/http_proxy_io_ut_exe
 === Executing test suite http_proxy_io_unittests ===
     ...clipped for brevity...
98 tests ran, 0 failed, 98 succeeded.
# ./tests/httpapicompact_ut/httpapi_compact_ut_exe
 === Executing test suite httpapicompact_ut ===
     ...clipped for brevity...
78 tests ran, 0 failed, 78 succeeded.
# ./tests/httpapiex_ut/httpapiex_ut_exe
 === Executing test suite httpapiex_unittests ===
     ...clipped for brevity...
59 tests ran, 0 failed, 59 succeeded.
# ./tests/httpapiexsas_ut/httpapiexsas_ut_exe
 === Executing test suite httpapiexsas_unittests ===
     ...clipped for brevity...
22 tests ran, 0 failed, 22 succeeded.
# ./tests/httpheaders_ut/httpheaders_ut_exe
 === Executing test suite HTTPHeaders_UnitTests ===
     ...clipped for brevity...
46 tests ran, 0 failed, 46 succeeded.
# ./tests/lock_ut/lock_ut_exe
 === Executing test suite LOCK_UnitTests ===
     ...clipped for brevity...
7 tests ran, 0 failed, 7 succeeded.
# ./tests/map_ut/map_ut_exe
 === Executing test suite map_unittests ===
     ...clipped for brevity...
107 tests ran, 0 failed, 107 succeeded.
# ./tests/optionhandler_ut/optionhandler_ut_exe
 === Executing test suite optionhandler_unittests ===
     ...clipped for brevity...
31 tests ran, 0 failed, 31 succeeded.
# ./tests/refcount_ut/refcount_ut_exe
 === Executing test suite refcount_unittests ===
     ...clipped for brevity...
4 tests ran, 0 failed, 4 succeeded.
# ./tests/sastoken_ut/sastoken_ut_exe
 === Executing test suite sastoken_unittests ===
     ...clipped for brevity...
56 tests ran, 0 failed, 56 succeeded.
# ./tests/singlylinkedlist_ut/singlylinkedlist_ut_exe
 === Executing test suite singlylinkedlist_unittests ===
     ...clipped for brevity...
42 tests ran, 0 failed, 42 succeeded.
# ./tests/socket_async_ut/socket_async_ut_exe
 === Executing test suite socket_async_ut ===
     ...clipped for brevity...
25 tests ran, 0 failed, 25 succeeded.
# ./tests/socketio_berkeley_ut/socketio_berkeley_ut_exe
 === Executing test suite socketio_berkeley_unittests ===
0 tests ran, 0 failed, 0 succeeded.
# ./tests/string_tokenizer_ut/string_tokenizer_ut_exe
 === Executing test suite string_tokenizer_unittests ===
 ...clipped for brevity...
23 tests ran, 0 failed, 23 succeeded.
# ./tests/strings_ut/strings_ut_exe
 === Executing test suite strings_unittests ===
     ...clipped for brevity...
73 tests ran, 0 failed, 73 succeeded.
# ./tests/template_ut/template_ut_exe
 === Executing test suite template_ut ===
     ...clipped for brevity...
5 tests ran, 0 failed, 5 succeeded.
# ./tests/tickcounter_freertos_ut/tickcounter_freertos_ut_exe
 === Executing test suite tickcounter_freertos_unittests ===
     ...clipped for brevity...
8 tests ran, 0 failed, 8 succeeded.
# ./tests/tickcounter_ut/tickcounter_ut_exe
 === Executing test suite tickcounter_unittests ===
     ...clipped for brevity...
7 tests ran, 0 failed, 7 succeeded.
# ./tests/tlsio_esp8266_ut/tlsio_esp8266_ut_exe
 === Executing test suite tlsio_esp8266_ut ===
     ...clipped for brevity...
35 tests ran, 0 failed, 35 succeeded.
# ./tests/tlsio_options_ut/tlsio_options_ut_exe
 === Executing test suite tlsio_options_unittests ===
     ...clipped for brevity...
29 tests ran, 0 failed, 29 succeeded.
# ./tests/uniqueid_ut/uniqueid_ut_exe
 === Executing test suite uniqueid_unittests ===
     ...clipped for brevity...
3 tests ran, 0 failed, 3 succeeded.
# ./tests/urlencode_ut/urlencode_ut_exe
 === Executing test suite URLEncode_UnitTests ===
     ...clipped for brevity...
42 tests ran, 0 failed, 42 succeeded.
# ./tests/utf8_checker_ut/utf8_checker_ut_exe
 === Executing test suite utf8_checker_ut ===
     ...clipped for brevity...
34 tests ran, 0 failed, 34 succeeded.
# ./tests/uuid_ut/uuid_ut_exe
 === Executing test suite uuid_unittests ===
     ...clipped for brevity...
9 tests ran, 0 failed, 9 succeeded.
# ./tests/uws_client_ut/uws_client_ut_exe
 === Executing test suite uws_client_ut ===
     ...clipped for brevity...
194 tests ran, 0 failed, 194 succeeded.
# ./tests/uws_frame_encoder_ut/uws_frame_encoder_ut_exe
 === Executing test suite uws_frame_encoder_ut ===
     ...clipped for brevity...
40 tests ran, 0 failed, 40 succeeded.
# ./tests/vector_ut/vector_ut_exe
 === Executing test suite Vector_UnitTests ===
     ...clipped for brevity...
43 tests ran, 0 failed, 43 succeeded.
# ./tests/wsio_ut/wsio_ut_exe
 === Executing test suite wsio_ut ===
     ...clipped for brevity...
94 tests ran, 0 failed, 94 succeeded.
# ./tests/x509_openssl_ut/x509_openssl_ut_exe
 === Executing test suite x509_openssl_unittests ===
     ...clipped for brevity...
11 tests ran, 0 failed, 11 succeeded.
# ./tests/xio_ut/xio_ut_exe
 === Executing test suite xio_unittests ===
     ...clipped for brevity...
36 tests ran, 0 failed, 36 succeeded.
#",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,152,2018-04-24T23:56:32Z,2018-06-06T23:45:33Z,2019-09-05T06:32:43Z,CLOSED,False,284,256,47,https://github.com/markrad,Use declspec macro instead of .def file,4,[],https://github.com/Azure/azure-c-shared-utility/pull/152,https://github.com/markrad,1,https://github.com/Azure/azure-c-shared-utility/pull/152,"Putting this out here for review. I know there are a couple of items I need to address, one being the DLLEXPORT macro defined in two places but I wanted to get some general feedback on the changes before I go any further. Passes e2e and unit tests. Also installs the C shared so file properly with version numbers etc.","Putting this out here for review. I know there are a couple of items I need to address, one being the DLLEXPORT macro defined in two places but I wanted to get some general feedback on the changes before I go any further. Passes e2e and unit tests. Also installs the C shared so file properly with version numbers etc.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,152,2018-04-24T23:56:32Z,2018-06-06T23:45:33Z,2019-09-05T06:32:43Z,CLOSED,False,284,256,47,https://github.com/markrad,Use declspec macro instead of .def file,4,[],https://github.com/Azure/azure-c-shared-utility/pull/152,https://github.com/jspaith,2,https://github.com/Azure/azure-c-shared-utility/pull/152#issuecomment-395248163,"Putting this out here for review. I know there are a couple of items I need to address, one being the DLLEXPORT macro defined in two places but I wanted to get some general feedback on the changes before I go any further. Passes e2e and unit tests. Also installs the C shared so file properly with version numbers etc.",Closing this because we've moved to multiple .def files instead.  Thanks.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,153,2018-04-30T19:42:18Z,2018-06-08T06:01:24Z,2018-06-08T06:01:24Z,MERGED,True,64,0,2,https://github.com/jkriba,Added support to set the TLS and Ciphers,1,[],https://github.com/Azure/azure-c-shared-utility/pull/153,https://github.com/jkriba,1,https://github.com/Azure/azure-c-shared-utility/pull/153,"Description of the problem
This is an Enhancement based upon Critical Customer requirement and security audit finding towards Enforce TLS version and Cipher Suites for Honeywell IoT Devices [Gateways]. As a platform all device connection should be made via approved, secure cipher suites. However, today on Azure we don't control the cipher suites supported by Microsoft for Azure IoT Hub as they have to support many customers and devices which all don't have the latest ciphers.
As per our customer requirements in Honeywell we wanted to provide an option for the users to set the configuration of TLS version & cipher suites which should help the users to solve the above mentioned problem.
Description of the solution
The main modification is in the ‘c-utility’ module. We’ve modified two files, the full file names are:
c-utility/inc/azure_c_shared_utility/shared_util_options.h
c-utility/src/tlsio_openssl.c
and provided options for the user to set the relevent TLS version and Cipher suites from the Edge in order to support selection of them which is secure and relevant for the device environment.","Description of the problem
This is an Enhancement based upon Critical Customer requirement and security audit finding towards Enforce TLS version and Cipher Suites for Honeywell IoT Devices [Gateways]. As a platform all device connection should be made via approved, secure cipher suites. However, today on Azure we don't control the cipher suites supported by Microsoft for Azure IoT Hub as they have to support many customers and devices which all don't have the latest ciphers.
As per our customer requirements in Honeywell we wanted to provide an option for the users to set the configuration of TLS version & cipher suites which should help the users to solve the above mentioned problem.
Description of the solution
The main modification is in the ‘c-utility’ module. We’ve modified two files, the full file names are:
c-utility/inc/azure_c_shared_utility/shared_util_options.h
c-utility/src/tlsio_openssl.c
and provided options for the user to set the relevent TLS version and Cipher suites from the Edge in order to support selection of them which is secure and relevant for the device environment.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,153,2018-04-30T19:42:18Z,2018-06-08T06:01:24Z,2018-06-08T06:01:24Z,MERGED,True,64,0,2,https://github.com/jkriba,Added support to set the TLS and Ciphers,1,[],https://github.com/Azure/azure-c-shared-utility/pull/153,https://github.com/msftclas,2,https://github.com/Azure/azure-c-shared-utility/pull/153#issuecomment-385506887,"Description of the problem
This is an Enhancement based upon Critical Customer requirement and security audit finding towards Enforce TLS version and Cipher Suites for Honeywell IoT Devices [Gateways]. As a platform all device connection should be made via approved, secure cipher suites. However, today on Azure we don't control the cipher suites supported by Microsoft for Azure IoT Hub as they have to support many customers and devices which all don't have the latest ciphers.
As per our customer requirements in Honeywell we wanted to provide an option for the users to set the configuration of TLS version & cipher suites which should help the users to solve the above mentioned problem.
Description of the solution
The main modification is in the ‘c-utility’ module. We’ve modified two files, the full file names are:
c-utility/inc/azure_c_shared_utility/shared_util_options.h
c-utility/src/tlsio_openssl.c
and provided options for the user to set the relevent TLS version and Cipher suites from the Edge in order to support selection of them which is secure and relevant for the device environment.",All CLA requirements met.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,153,2018-04-30T19:42:18Z,2018-06-08T06:01:24Z,2018-06-08T06:01:24Z,MERGED,True,64,0,2,https://github.com/jkriba,Added support to set the TLS and Ciphers,1,[],https://github.com/Azure/azure-c-shared-utility/pull/153,https://github.com/jebrando,3,https://github.com/Azure/azure-c-shared-utility/pull/153#issuecomment-389336022,"Description of the problem
This is an Enhancement based upon Critical Customer requirement and security audit finding towards Enforce TLS version and Cipher Suites for Honeywell IoT Devices [Gateways]. As a platform all device connection should be made via approved, secure cipher suites. However, today on Azure we don't control the cipher suites supported by Microsoft for Azure IoT Hub as they have to support many customers and devices which all don't have the latest ciphers.
As per our customer requirements in Honeywell we wanted to provide an option for the users to set the configuration of TLS version & cipher suites which should help the users to solve the above mentioned problem.
Description of the solution
The main modification is in the ‘c-utility’ module. We’ve modified two files, the full file names are:
c-utility/inc/azure_c_shared_utility/shared_util_options.h
c-utility/src/tlsio_openssl.c
and provided options for the user to set the relevent TLS version and Cipher suites from the Edge in order to support selection of them which is secure and relevant for the device environment.","Thank you for the update, I will have to talk to compliance to see if we would want to take this change.  Stay tuned for updates.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,153,2018-04-30T19:42:18Z,2018-06-08T06:01:24Z,2018-06-08T06:01:24Z,MERGED,True,64,0,2,https://github.com/jkriba,Added support to set the TLS and Ciphers,1,[],https://github.com/Azure/azure-c-shared-utility/pull/153,https://github.com/jspaith,4,https://github.com/Azure/azure-c-shared-utility/pull/153#issuecomment-393981944,"Description of the problem
This is an Enhancement based upon Critical Customer requirement and security audit finding towards Enforce TLS version and Cipher Suites for Honeywell IoT Devices [Gateways]. As a platform all device connection should be made via approved, secure cipher suites. However, today on Azure we don't control the cipher suites supported by Microsoft for Azure IoT Hub as they have to support many customers and devices which all don't have the latest ciphers.
As per our customer requirements in Honeywell we wanted to provide an option for the users to set the configuration of TLS version & cipher suites which should help the users to solve the above mentioned problem.
Description of the solution
The main modification is in the ‘c-utility’ module. We’ve modified two files, the full file names are:
c-utility/inc/azure_c_shared_utility/shared_util_options.h
c-utility/src/tlsio_openssl.c
and provided options for the user to set the relevent TLS version and Cipher suites from the Edge in order to support selection of them which is secure and relevant for the device environment.","We're concerned about this proposal.  Let's say that an app sets cipher to ""BestInClass-2018"" and then feels good.  Fast forward to 2028.  Let's say this algorithm is no longer best practice and may even have weaknesses (but the server may accept these connections anyway for back-compat).  It happens very frequently that app devs set and forget these type of custom options, even if security community tells them to move on, so the 2028 code would still be tightly coupled to old tech by hard-coding in the 2018 ciphers.
By letting the SSL layer between the client and the server handle this negotiation, in 2028 their defaults should be BestInClass-2028.  Running 'openssl ciphers' on Ubuntu 18.04 shows what I believe to be the default order that it will chose.
Are there specific scenarios where this may not be the case?",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,155,2018-05-15T22:00:58Z,2018-05-15T23:03:49Z,2018-05-15T23:55:28Z,MERGED,True,23,12,1,https://github.com/JetstreamRoySprowl,Detect host closure on socket read,1,[],https://github.com/Azure/azure-c-shared-utility/pull/155,https://github.com/JetstreamRoySprowl,1,https://github.com/Azure/azure-c-shared-utility/pull/155,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,156,2018-05-15T23:11:13Z,2018-05-17T21:18:23Z,2018-05-17T21:18:23Z,MERGED,True,505,61,3,https://github.com/blico,Add UWS support for handling websocket frame fragmentation,3,[],https://github.com/Azure/azure-c-shared-utility/pull/156,https://github.com/blico,1,https://github.com/Azure/azure-c-shared-utility/pull/156,"Fix for issue #154
uws_client was not handling frame fragmentation, resulting in the dropping of fragmented frames:


SRS_UWS_CLIENT_01_213: [ A fragmented message consists of a single frame with the FIN bit clear and an opcode other than 0, followed by zero or more frames with the FIN bit clear and the opcode set to 0, and terminated by a single frame with the FIN bit set and an opcode of 0. ]


SRS_UWS_CLIENT_01_220: [ Clients and servers MUST support receiving both fragmented and unfragmented messages. ]


Fixed by buffering fragmented frames, and not bubbling up to user until the frame is fully received.
Tested by ensuring it fixes our broken scenario, and added unit tests to uws_client_ut.","Fix for issue #154
uws_client was not handling frame fragmentation, resulting in the dropping of fragmented frames:


SRS_UWS_CLIENT_01_213: [ A fragmented message consists of a single frame with the FIN bit clear and an opcode other than 0, followed by zero or more frames with the FIN bit clear and the opcode set to 0, and terminated by a single frame with the FIN bit set and an opcode of 0. ]


SRS_UWS_CLIENT_01_220: [ Clients and servers MUST support receiving both fragmented and unfragmented messages. ]


Fixed by buffering fragmented frames, and not bubbling up to user until the frame is fully received.
Tested by ensuring it fixes our broken scenario, and added unit tests to uws_client_ut.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,156,2018-05-15T23:11:13Z,2018-05-17T21:18:23Z,2018-05-17T21:18:23Z,MERGED,True,505,61,3,https://github.com/blico,Add UWS support for handling websocket frame fragmentation,3,[],https://github.com/Azure/azure-c-shared-utility/pull/156,https://github.com/msftclas,2,https://github.com/Azure/azure-c-shared-utility/pull/156#issuecomment-389343293,"Fix for issue #154
uws_client was not handling frame fragmentation, resulting in the dropping of fragmented frames:


SRS_UWS_CLIENT_01_213: [ A fragmented message consists of a single frame with the FIN bit clear and an opcode other than 0, followed by zero or more frames with the FIN bit clear and the opcode set to 0, and terminated by a single frame with the FIN bit set and an opcode of 0. ]


SRS_UWS_CLIENT_01_220: [ Clients and servers MUST support receiving both fragmented and unfragmented messages. ]


Fixed by buffering fragmented frames, and not bubbling up to user until the frame is fully received.
Tested by ensuring it fixes our broken scenario, and added unit tests to uws_client_ut.",All CLA requirements met.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,156,2018-05-15T23:11:13Z,2018-05-17T21:18:23Z,2018-05-17T21:18:23Z,MERGED,True,505,61,3,https://github.com/blico,Add UWS support for handling websocket frame fragmentation,3,[],https://github.com/Azure/azure-c-shared-utility/pull/156,https://github.com/blico,3,https://github.com/Azure/azure-c-shared-utility/pull/156#issuecomment-389955313,"Fix for issue #154
uws_client was not handling frame fragmentation, resulting in the dropping of fragmented frames:


SRS_UWS_CLIENT_01_213: [ A fragmented message consists of a single frame with the FIN bit clear and an opcode other than 0, followed by zero or more frames with the FIN bit clear and the opcode set to 0, and terminated by a single frame with the FIN bit set and an opcode of 0. ]


SRS_UWS_CLIENT_01_220: [ Clients and servers MUST support receiving both fragmented and unfragmented messages. ]


Fixed by buffering fragmented frames, and not bubbling up to user until the frame is fully received.
Tested by ensuring it fixes our broken scenario, and added unit tests to uws_client_ut.",@jebrando I addressed your feedback in my latest commit. Let me know if you have any other feedback.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,157,2018-05-30T23:00:20Z,2018-06-05T23:55:06Z,2018-06-05T23:55:06Z,MERGED,True,1369,1393,30,https://github.com/mrohera,Enabling stricter warnings in c shared utilities library,15,[],https://github.com/Azure/azure-c-shared-utility/pull/157,https://github.com/mrohera,1,https://github.com/Azure/azure-c-shared-utility/pull/157,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,157,2018-05-30T23:00:20Z,2018-06-05T23:55:06Z,2018-06-05T23:55:06Z,MERGED,True,1369,1393,30,https://github.com/mrohera,Enabling stricter warnings in c shared utilities library,15,[],https://github.com/Azure/azure-c-shared-utility/pull/157,https://github.com/mrohera,2,https://github.com/Azure/azure-c-shared-utility/pull/157#issuecomment-393358552,,PR for ctest and umock-c have been completed and merged.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,157,2018-05-30T23:00:20Z,2018-06-05T23:55:06Z,2018-06-05T23:55:06Z,MERGED,True,1369,1393,30,https://github.com/mrohera,Enabling stricter warnings in c shared utilities library,15,[],https://github.com/Azure/azure-c-shared-utility/pull/157,https://github.com/JetstreamRoySprowl,3,https://github.com/Azure/azure-c-shared-utility/pull/157#issuecomment-393363662,,"Damon’s right – make sure you check with Dan Cristoloveanu about the change to micromock.
Roy

From: Damon Barry <notifications@github.com>
Sent: Wednesday, May 30, 2018 5:05 PM
To: Azure/azure-c-shared-utility <azure-c-shared-utility@noreply.github.com>
Cc: Roy Sprowl <RoyS@jetstreamsoftware.com>; Review requested <review_requested@noreply.github.com>
Subject: Re: [Azure/azure-c-shared-utility] Enabling stricter warnings in c shared utilities library (#157)


@damonbarry commented on this pull request.

LGTM, although it would be good to get someone from the SDK team to sign off. One question: Are you doing a separate PR in the umock-c repo for the change to inc/umocktypes.h?

—
You are receiving this because your review was requested.
Reply to this email directly, view it on GitHub<#157 (review)>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AKDBhomdMyQHGol1BmoxcMeyKrPnphW2ks5t3zO1gaJpZM4UUI7u>.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,158,2018-06-06T05:29:16Z,2018-06-08T06:54:09Z,2018-06-08T06:54:10Z,CLOSED,False,205,117,2,https://github.com/jspaith,Domain sockets,6,[],https://github.com/Azure/azure-c-shared-utility/pull/158,https://github.com/jspaith,1,https://github.com/Azure/azure-c-shared-utility/pull/158,Enable unix domain sockets for Edge.  Did a mini-refactor of code while at it as it would've got unweildy.,Enable unix domain sockets for Edge.  Did a mini-refactor of code while at it as it would've got unweildy.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,159,2018-06-12T23:08:42Z,2018-06-13T04:27:49Z,2018-06-13T04:49:24Z,CLOSED,False,1,0,1,https://github.com/anporumb,Have the sam elibs in tests_only_lib,2,[],https://github.com/Azure/azure-c-shared-utility/pull/159,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/159,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,159,2018-06-12T23:08:42Z,2018-06-13T04:27:49Z,2018-06-13T04:49:24Z,CLOSED,False,1,0,1,https://github.com/anporumb,Have the sam elibs in tests_only_lib,2,[],https://github.com/Azure/azure-c-shared-utility/pull/159,https://github.com/jebrando,2,https://github.com/Azure/azure-c-shared-utility/pull/159#issuecomment-396809655,,The changes have been pulled in.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,159,2018-06-12T23:08:42Z,2018-06-13T04:27:49Z,2018-06-13T04:49:24Z,CLOSED,False,1,0,1,https://github.com/anporumb,Have the sam elibs in tests_only_lib,2,[],https://github.com/Azure/azure-c-shared-utility/pull/159,https://github.com/dcristoloveanu,3,https://github.com/Azure/azure-c-shared-utility/pull/159#issuecomment-396812431,,Thanks The Jelani!,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,160,2018-06-20T16:09:16Z,2018-07-16T23:32:39Z,2018-07-16T23:32:39Z,CLOSED,False,33,2,3,https://github.com/alexmrtn,add ability to disable ssl verification in HTTPAPI,1,[],https://github.com/Azure/azure-c-shared-utility/pull/160,https://github.com/alexmrtn,1,https://github.com/Azure/azure-c-shared-utility/pull/160,"Hi,
We would like to contribute to the c-shared-utility by adding the ability to trust insecure certificates for HTTPS connections. Our use case is when devices are out of time sync and they can't connect to the iothub. We can manually contact a time server using the HTTPAPI to sync the time of the device. As the HTTPAPI only support HTTPS connection, we have to bypass the SSL verification of the time server.
Alexis.","Hi,
We would like to contribute to the c-shared-utility by adding the ability to trust insecure certificates for HTTPS connections. Our use case is when devices are out of time sync and they can't connect to the iothub. We can manually contact a time server using the HTTPAPI to sync the time of the device. As the HTTPAPI only support HTTPS connection, we have to bypass the SSL verification of the time server.
Alexis.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,160,2018-06-20T16:09:16Z,2018-07-16T23:32:39Z,2018-07-16T23:32:39Z,CLOSED,False,33,2,3,https://github.com/alexmrtn,add ability to disable ssl verification in HTTPAPI,1,[],https://github.com/Azure/azure-c-shared-utility/pull/160,https://github.com/jspaith,2,https://github.com/Azure/azure-c-shared-utility/pull/160#issuecomment-403986480,"Hi,
We would like to contribute to the c-shared-utility by adding the ability to trust insecure certificates for HTTPS connections. Our use case is when devices are out of time sync and they can't connect to the iothub. We can manually contact a time server using the HTTPAPI to sync the time of the device. As the HTTPAPI only support HTTPS connection, we have to bypass the SSL verification of the time server.
Alexis.","@alexrtm - sorry for delayed response on this one.
Could you please talk directly to curl to get to the time server, where it gives you unlimited options, instead of through this?
We've seen many issues across multiple SDK's where the moment we plumb in a ""disable security"" option, its misused.  These disable certificate checks are particularly dangerous (a) because devs disable them to quickly get things going and (b) forget they're in, and the code they write is fine and yet silently vulnerable to man in the middle attacks.
While Microsoft is certainly not perfect on security(!), we take it very seriously and especially for embedded devices.  Even here, we've had problems with analogous back-doors here.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,160,2018-06-20T16:09:16Z,2018-07-16T23:32:39Z,2018-07-16T23:32:39Z,CLOSED,False,33,2,3,https://github.com/alexmrtn,add ability to disable ssl verification in HTTPAPI,1,[],https://github.com/Azure/azure-c-shared-utility/pull/160,https://github.com/alexmrtn,3,https://github.com/Azure/azure-c-shared-utility/pull/160#issuecomment-404097561,"Hi,
We would like to contribute to the c-shared-utility by adding the ability to trust insecure certificates for HTTPS connections. Our use case is when devices are out of time sync and they can't connect to the iothub. We can manually contact a time server using the HTTPAPI to sync the time of the device. As the HTTPAPI only support HTTPS connection, we have to bypass the SSL verification of the time server.
Alexis.","@jspaith I totally understand the reason why adding a ""disable security"" option is a not so good idea and that it can be easily misused.
This solution was the ""easy"" way to solve our problem. Using the HTTPAPI from the c-utility that leverage the problem of multi-platform support (the product we are building must run on both Linux and Windows) would be for us the best way to avoid platform-specific code + code duplication (regarding the c-utility).
Maybe a better solution would be to add the HTTP support in the HTTPAPI in addition to HTTPS. What do you think about that? I can work on this and submit a new PR if this is ok for you.
Alexis.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,160,2018-06-20T16:09:16Z,2018-07-16T23:32:39Z,2018-07-16T23:32:39Z,CLOSED,False,33,2,3,https://github.com/alexmrtn,add ability to disable ssl verification in HTTPAPI,1,[],https://github.com/Azure/azure-c-shared-utility/pull/160,https://github.com/jspaith,4,https://github.com/Azure/azure-c-shared-utility/pull/160#issuecomment-405412351,"Hi,
We would like to contribute to the c-shared-utility by adding the ability to trust insecure certificates for HTTPS connections. Our use case is when devices are out of time sync and they can't connect to the iothub. We can manually contact a time server using the HTTPAPI to sync the time of the device. As the HTTPAPI only support HTTPS connection, we have to bypass the SSL verification of the time server.
Alexis.","Another caveat -- we don't directly e2e test the HTTPAPI layers, nor do we have the same level of API contract promises that come from the Azure IoT C SDK.  Obviously its in our best interest never to break these things, but if something were to go wrong here we would likely only discover it when updating the submodule for the C SDK which is extensively e2e tested.
You could mitigate this to some extent by staying on same c-utility that C SDK's master points at since that implies its past the C SDK gates.
That said - if you're comfortable with these caveats, we'd be willing to take a PR for HTTP specific.  I'm closing this one per comments above, though, so we'd start clean.
Thanks",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,161,2018-06-22T10:15:13Z,2018-08-29T19:55:38Z,2018-08-29T19:55:38Z,MERGED,True,24,0,3,https://github.com/alexmrtn,add HEAD option in HTTPAPI,1,[],https://github.com/Azure/azure-c-shared-utility/pull/161,https://github.com/alexmrtn,1,https://github.com/Azure/azure-c-shared-utility/pull/161,"Hi
The HTTPAPI is missing the HEAD request, here a PR to fill this gap.
Alexis.","Hi
The HTTPAPI is missing the HEAD request, here a PR to fill this gap.
Alexis.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,161,2018-06-22T10:15:13Z,2018-08-29T19:55:38Z,2018-08-29T19:55:38Z,MERGED,True,24,0,3,https://github.com/alexmrtn,add HEAD option in HTTPAPI,1,[],https://github.com/Azure/azure-c-shared-utility/pull/161,https://github.com/jspaith,2,https://github.com/Azure/azure-c-shared-utility/pull/161#issuecomment-405414432,"Hi
The HTTPAPI is missing the HEAD request, here a PR to fill this gap.
Alexis.","Looks good.  If you could address my minor comments and squash, we can get this in.  Thanks.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,161,2018-06-22T10:15:13Z,2018-08-29T19:55:38Z,2018-08-29T19:55:38Z,MERGED,True,24,0,3,https://github.com/alexmrtn,add HEAD option in HTTPAPI,1,[],https://github.com/Azure/azure-c-shared-utility/pull/161,https://github.com/jspaith,3,https://github.com/Azure/azure-c-shared-utility/pull/161#issuecomment-415485809,"Hi
The HTTPAPI is missing the HEAD request, here a PR to fill this gap.
Alexis.","@alexmrtn - is this something you're still interested in?  If yes could you please make the changes when you have cycles, or otherwise close the PR?  Thanks",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,161,2018-06-22T10:15:13Z,2018-08-29T19:55:38Z,2018-08-29T19:55:38Z,MERGED,True,24,0,3,https://github.com/alexmrtn,add HEAD option in HTTPAPI,1,[],https://github.com/Azure/azure-c-shared-utility/pull/161,https://github.com/alexmrtn,4,https://github.com/Azure/azure-c-shared-utility/pull/161#issuecomment-415688794,"Hi
The HTTPAPI is missing the HEAD request, here a PR to fill this gap.
Alexis.","@jspaith - sorry for the delay, I made the changes. Explanations in your comments. Thanks",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,163,2018-06-29T21:12:51Z,2020-10-29T04:47:33Z,2020-10-29T04:48:28Z,CLOSED,False,6127,646,45,https://github.com/JetstreamRoySprowl,New porting process with new library code,38,[],https://github.com/Azure/azure-c-shared-utility/pull/163,https://github.com/JetstreamRoySprowl,1,https://github.com/Azure/azure-c-shared-utility/pull/163,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,163,2018-06-29T21:12:51Z,2020-10-29T04:47:33Z,2020-10-29T04:48:28Z,CLOSED,False,6127,646,45,https://github.com/JetstreamRoySprowl,New porting process with new library code,38,[],https://github.com/Azure/azure-c-shared-utility/pull/163,https://github.com/momuno,2,https://github.com/Azure/azure-c-shared-utility/pull/163#issuecomment-718357094,,Closing to delete branch. Work preserved in tag: archive/xio-state,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,165,2018-07-09T18:42:44Z,2018-07-10T17:51:57Z,2018-09-28T17:21:49Z,MERGED,True,10,2,4,https://github.com/dcristoloveanu,Fix refcount to use full memory barriers,1,[],https://github.com/Azure/azure-c-shared-utility/pull/165,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/165,"Fix refcount to use full memory barriers.
This addrresses #151.","Fix refcount to use full memory barriers.
This addrresses #151.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,166,2018-07-19T04:00:43Z,2018-08-24T16:25:47Z,2018-08-24T16:25:47Z,CLOSED,False,14,2,1,https://github.com/BillyONeal,Avoid warnings about narrowing wchar_t -> char in basic_string's range constructor,1,[],https://github.com/Azure/azure-c-shared-utility/pull/166,https://github.com/BillyONeal,1,https://github.com/Azure/azure-c-shared-utility/pull/166,"This change preserves the existing behavior rather than doing an encoding transformation; an encoding transform may be desired instead.
This warning was exposed by removal of an unintentional static_cast previously in basic_string which will be removed in a future release of Visual C++.","This change preserves the existing behavior rather than doing an encoding transformation; an encoding transform may be desired instead.
This warning was exposed by removal of an unintentional static_cast previously in basic_string which will be removed in a future release of Visual C++.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,166,2018-07-19T04:00:43Z,2018-08-24T16:25:47Z,2018-08-24T16:25:47Z,CLOSED,False,14,2,1,https://github.com/BillyONeal,Avoid warnings about narrowing wchar_t -> char in basic_string's range constructor,1,[],https://github.com/Azure/azure-c-shared-utility/pull/166,https://github.com/zolvarga,2,https://github.com/Azure/azure-c-shared-utility/pull/166#issuecomment-413612194,"This change preserves the existing behavior rather than doing an encoding transformation; an encoding transform may be desired instead.
This warning was exposed by removal of an unintentional static_cast previously in basic_string which will be removed in a future release of Visual C++.","@BillyONeal
Thank you for contributing to out repo!
I accepted the PR and will close it as soon as we merged.
Best Regards,
Zoltan",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,166,2018-07-19T04:00:43Z,2018-08-24T16:25:47Z,2018-08-24T16:25:47Z,CLOSED,False,14,2,1,https://github.com/BillyONeal,Avoid warnings about narrowing wchar_t -> char in basic_string's range constructor,1,[],https://github.com/Azure/azure-c-shared-utility/pull/166,https://github.com/zolvarga,3,https://github.com/Azure/azure-c-shared-utility/pull/166#issuecomment-414837113,"This change preserves the existing behavior rather than doing an encoding transformation; an encoding transform may be desired instead.
This warning was exposed by removal of an unintentional static_cast previously in basic_string which will be removed in a future release of Visual C++.","@BillyONeal
We are using VS2008 compiler for backward compatibility which doesn't support C++11 lambdas.
The error we got on the gate:
""C:\jenkins\workspace\c-windows-x86-vs2008\cmake\cshared_win32\azure_c_shared_utility.sln"" (default target) (1) ->
(test_tools\micromock_ctest target) ->
c:\jenkins\workspace\c-windows-x86-vs2008\testtools\micromock\inc\mockvalue.h(24): error C2059: syntax error : '['
c:\jenkins\workspace\c-windows-x86-vs2008\testtools\micromock\inc\mockvalue.h(24): error C2143: syntax error : missing ')' before '{'
c:\jenkins\workspace\c-windows-x86-vs2008\testtools\micromock\inc\mockvalue.h(24): error C2143: syntax error : missing ';' before '{'
c:\jenkins\workspace\c-windows-x86-vs2008\testtools\micromock\inc\mockvalue.h(24): error C2065: 'wch' : undeclared identifier
c:\jenkins\workspace\c-windows-x86-vs2008\testtools\micromock\inc\mockvalue.h(24): error C2059: syntax error : ')'
c:\jenkins\workspace\c-windows-x86-vs2008\testtools\micromock\inc\mockvalue.h(24): error C2059: syntax error : '['
c:\jenkins\workspace\c-windows-x86-vs2008\testtools\micromock\inc\mockvalue.h(24): error C2143: syntax error : missing ')' before '{'
c:\jenkins\workspace\c-windows-x86-vs2008\testtools\micromock\inc\mockvalue.h(24): error C2143: syntax error : missing ';' before '{'
c:\jenkins\workspace\c-windows-x86-vs2008\testtools\micromock\inc\mockvalue.h(24): error C2065: 'wch' : undeclared identifier
c:\jenkins\workspace\c-windows-x86-vs2008\testtools\micromock\inc\mockvalue.h(24): error C2059: syntax error : ')'
We need to look for possible workarounds.
Best Regards,
Zoltan",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,166,2018-07-19T04:00:43Z,2018-08-24T16:25:47Z,2018-08-24T16:25:47Z,CLOSED,False,14,2,1,https://github.com/BillyONeal,Avoid warnings about narrowing wchar_t -> char in basic_string's range constructor,1,[],https://github.com/Azure/azure-c-shared-utility/pull/166,https://github.com/BillyONeal,4,https://github.com/Azure/azure-c-shared-utility/pull/166#issuecomment-415235173,"This change preserves the existing behavior rather than doing an encoding transformation; an encoding transform may be desired instead.
This warning was exposed by removal of an unintentional static_cast previously in basic_string which will be removed in a future release of Visual C++.",Turns out the non-local warning suppression bits went in so we can just suppress the warning; this should make VS2008 happy.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,166,2018-07-19T04:00:43Z,2018-08-24T16:25:47Z,2018-08-24T16:25:47Z,CLOSED,False,14,2,1,https://github.com/BillyONeal,Avoid warnings about narrowing wchar_t -> char in basic_string's range constructor,1,[],https://github.com/Azure/azure-c-shared-utility/pull/166,https://github.com/zolvarga,5,https://github.com/Azure/azure-c-shared-utility/pull/166#issuecomment-415810771,"This change preserves the existing behavior rather than doing an encoding transformation; an encoding transform may be desired instead.
This warning was exposed by removal of an unintentional static_cast previously in basic_string which will be removed in a future release of Visual C++.","@BillyONeal
Closing it as the PR has been merged.
Best Regards,
Zoltan",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,167,2018-07-19T16:06:20Z,2018-08-16T21:42:11Z,2018-08-23T17:08:20Z,MERGED,True,41,7,3,https://github.com/vkuzmichev,Fix compiling for MinGW-W64,2,[],https://github.com/Azure/azure-c-shared-utility/pull/167,https://github.com/vkuzmichev,1,https://github.com/Azure/azure-c-shared-utility/pull/167,"Checklist

 I have read the [contribution guidelines] (https://github.com/Azure/azure-iot-sdk-c/blob/master/.github/CONTRIBUTING.md).
 I added or modified the existing tests to cover the change (we do not allow our test coverage to go down).
If this is a modification that impacts the behavior of a public API

 I edited the corresponding document in the devdoc folder and added or modified requirements.


I submitted this PR against the correct branch:

 This pull-request is submitted against the master branch.
 I have merged the latest master branch prior to submission and re-merged as needed after I took any feedback.
 I have squashed my changes into one with a clear description of the change.



Reference/Link to the issue solved with this PR (if any)
None.
Description of the problem
Azure IoT SDK does not compile in Windows using MinGW-W64 compiler.
Description of the solution

Disabled secure string functions ""strcpy_s"", ""strcat_s"", ""strncpy_s"", ""sprintf_s"" in 'azure-c-shared-utility' if they are already defined and implemented in MinGW-W64.
Added missing LogErrorWinHTTPWithGetLastErrorAsString macro definition for non-Microsoft compilers.","Checklist

 I have read the [contribution guidelines] (https://github.com/Azure/azure-iot-sdk-c/blob/master/.github/CONTRIBUTING.md).
 I added or modified the existing tests to cover the change (we do not allow our test coverage to go down).
If this is a modification that impacts the behavior of a public API

 I edited the corresponding document in the devdoc folder and added or modified requirements.


I submitted this PR against the correct branch:

 This pull-request is submitted against the master branch.
 I have merged the latest master branch prior to submission and re-merged as needed after I took any feedback.
 I have squashed my changes into one with a clear description of the change.



Reference/Link to the issue solved with this PR (if any)
None.
Description of the problem
Azure IoT SDK does not compile in Windows using MinGW-W64 compiler.
Description of the solution

Disabled secure string functions ""strcpy_s"", ""strcat_s"", ""strncpy_s"", ""sprintf_s"" in 'azure-c-shared-utility' if they are already defined and implemented in MinGW-W64.
Added missing LogErrorWinHTTPWithGetLastErrorAsString macro definition for non-Microsoft compilers.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,167,2018-07-19T16:06:20Z,2018-08-16T21:42:11Z,2018-08-23T17:08:20Z,MERGED,True,41,7,3,https://github.com/vkuzmichev,Fix compiling for MinGW-W64,2,[],https://github.com/Azure/azure-c-shared-utility/pull/167,https://github.com/msftclas,2,https://github.com/Azure/azure-c-shared-utility/pull/167#issuecomment-406330282,"Checklist

 I have read the [contribution guidelines] (https://github.com/Azure/azure-iot-sdk-c/blob/master/.github/CONTRIBUTING.md).
 I added or modified the existing tests to cover the change (we do not allow our test coverage to go down).
If this is a modification that impacts the behavior of a public API

 I edited the corresponding document in the devdoc folder and added or modified requirements.


I submitted this PR against the correct branch:

 This pull-request is submitted against the master branch.
 I have merged the latest master branch prior to submission and re-merged as needed after I took any feedback.
 I have squashed my changes into one with a clear description of the change.



Reference/Link to the issue solved with this PR (if any)
None.
Description of the problem
Azure IoT SDK does not compile in Windows using MinGW-W64 compiler.
Description of the solution

Disabled secure string functions ""strcpy_s"", ""strcat_s"", ""strncpy_s"", ""sprintf_s"" in 'azure-c-shared-utility' if they are already defined and implemented in MinGW-W64.
Added missing LogErrorWinHTTPWithGetLastErrorAsString macro definition for non-Microsoft compilers.",All CLA requirements met.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,167,2018-07-19T16:06:20Z,2018-08-16T21:42:11Z,2018-08-23T17:08:20Z,MERGED,True,41,7,3,https://github.com/vkuzmichev,Fix compiling for MinGW-W64,2,[],https://github.com/Azure/azure-c-shared-utility/pull/167,https://github.com/jspaith,3,https://github.com/Azure/azure-c-shared-utility/pull/167#issuecomment-409768784,"Checklist

 I have read the [contribution guidelines] (https://github.com/Azure/azure-iot-sdk-c/blob/master/.github/CONTRIBUTING.md).
 I added or modified the existing tests to cover the change (we do not allow our test coverage to go down).
If this is a modification that impacts the behavior of a public API

 I edited the corresponding document in the devdoc folder and added or modified requirements.


I submitted this PR against the correct branch:

 This pull-request is submitted against the master branch.
 I have merged the latest master branch prior to submission and re-merged as needed after I took any feedback.
 I have squashed my changes into one with a clear description of the change.



Reference/Link to the issue solved with this PR (if any)
None.
Description of the problem
Azure IoT SDK does not compile in Windows using MinGW-W64 compiler.
Description of the solution

Disabled secure string functions ""strcpy_s"", ""strcat_s"", ""strncpy_s"", ""sprintf_s"" in 'azure-c-shared-utility' if they are already defined and implemented in MinGW-W64.
Added missing LogErrorWinHTTPWithGetLastErrorAsString macro definition for non-Microsoft compilers.","The MINGW_HAS_SECURE_API is quite eloquent - really like that.
The feedback on the LogErrorWinHTTPWithGetLastErrorAsString is similar to the MinGW PR in C SDK proper.  The (existing) code is confusing the compiler with the platform the code is run on.  Pretty sure that the LogErrorWinHTTPWithGetLastErrorAsString should be wrapped in an #ifdef WIN32 as it needs Win32 primitives.  The LogError itself - on quick examination - seems to need the MSVC wrapper per differences in how preprocessor behaves.
Like other change, if you agree & can make change & squash (:)), we can get this in.
As a heads up, we update the c-sdk to point to latest c-utility submodule every few weeks or so.  We don't have a submodule update planned at present so it may be a bit until this reaches C SDK master, but it will arrive sooner than later.
Thanks again for sharing your fixes for MinGW.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,167,2018-07-19T16:06:20Z,2018-08-16T21:42:11Z,2018-08-23T17:08:20Z,MERGED,True,41,7,3,https://github.com/vkuzmichev,Fix compiling for MinGW-W64,2,[],https://github.com/Azure/azure-c-shared-utility/pull/167,https://github.com/vkuzmichev,4,https://github.com/Azure/azure-c-shared-utility/pull/167#issuecomment-410213127,"Checklist

 I have read the [contribution guidelines] (https://github.com/Azure/azure-iot-sdk-c/blob/master/.github/CONTRIBUTING.md).
 I added or modified the existing tests to cover the change (we do not allow our test coverage to go down).
If this is a modification that impacts the behavior of a public API

 I edited the corresponding document in the devdoc folder and added or modified requirements.


I submitted this PR against the correct branch:

 This pull-request is submitted against the master branch.
 I have merged the latest master branch prior to submission and re-merged as needed after I took any feedback.
 I have squashed my changes into one with a clear description of the change.



Reference/Link to the issue solved with this PR (if any)
None.
Description of the problem
Azure IoT SDK does not compile in Windows using MinGW-W64 compiler.
Description of the solution

Disabled secure string functions ""strcpy_s"", ""strcat_s"", ""strncpy_s"", ""sprintf_s"" in 'azure-c-shared-utility' if they are already defined and implemented in MinGW-W64.
Added missing LogErrorWinHTTPWithGetLastErrorAsString macro definition for non-Microsoft compilers.","@jspaith
Thank you for your review. Please find my comments below.

Pretty sure that the LogErrorWinHTTPWithGetLastErrorAsString should be wrapped in an #ifdef WIN32 as it needs Win32 primitives.

Right! I missed this out. Perhaps, because I did not try to compile my patch in Linux.
However, I have just verified that it builds as is. I guess this macro is used only from sources compiled for Windows only.
But I agree, it should look like the following:
#else // _MSC_VER
#define LogError(FORMAT, ...) do{ LOG(AZ_LOG_ERROR, LOG_LINE, FORMAT, ##__VA_ARGS__); }while((void)0,0)
#ifdef WIN32
#define LogErrorWinHTTPWithGetLastErrorAsString(FORMAT, ...) do { \
[...]
#else // WIN32
/* This actually should not be used from non-WIN32 sources */
#define LogErrorWinHTTPWithGetLastErrorAsString LogError
#endif // WIN32
#endif // _MSC_VER

The very first definition of  LogErrorWinHTTPWithGetLastErrorAsString under #if defined _MSC_VER does not look like requiring #ifdef WIN32, since _MSC_VER is available in Windows only, so already implies WIN32. This should work as is. Unless MS intend to release Visual Studio for Linux :)

The LogError itself - on quick examination - seems to need the MSVC wrapper per differences in how preprocessor behaves.

Hmm. Do you mean that different MS compiler may process LogError differently?
I'm not so familiar with that, so it would be better if you prepare your own commit.
This change, however, does not look like mingw specific, so is a different topic?

Also I just spotted that LogLastError is defined for _MSC_VER:
#if defined _MSC_VER

#if !defined(WINCE)
extern void xlogging_set_log_function_GetLastError(LOGGER_LOG_GETLASTERROR log_function);
extern LOGGER_LOG_GETLASTERROR xlogging_get_log_function_GetLastError(void);
#define LogLastError(FORMAT, ...) do{ LOGGER_LOG_GETLASTERROR l = xlogging_get_log_function_GetLastError(); if(l!=NULL) l(__FILE__, FUNC_NAME, __LINE__, FORMAT, __VA_ARGS__); }while((void)0,0)
#endif

#define LogError[...]

But I can not find any use of LogLastError in Azure SDK. Probably there is no one, and this is why missing non-_MSC_VER definition does not produce any compile errors.
Should I add definition for it similar way I define LogErrorWinHTTPWithGetLastErrorAsString? I think, it should be added.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,167,2018-07-19T16:06:20Z,2018-08-16T21:42:11Z,2018-08-23T17:08:20Z,MERGED,True,41,7,3,https://github.com/vkuzmichev,Fix compiling for MinGW-W64,2,[],https://github.com/Azure/azure-c-shared-utility/pull/167,https://github.com/jspaith,5,https://github.com/Azure/azure-c-shared-utility/pull/167#issuecomment-410421257,"Checklist

 I have read the [contribution guidelines] (https://github.com/Azure/azure-iot-sdk-c/blob/master/.github/CONTRIBUTING.md).
 I added or modified the existing tests to cover the change (we do not allow our test coverage to go down).
If this is a modification that impacts the behavior of a public API

 I edited the corresponding document in the devdoc folder and added or modified requirements.


I submitted this PR against the correct branch:

 This pull-request is submitted against the master branch.
 I have merged the latest master branch prior to submission and re-merged as needed after I took any feedback.
 I have squashed my changes into one with a clear description of the change.



Reference/Link to the issue solved with this PR (if any)
None.
Description of the problem
Azure IoT SDK does not compile in Windows using MinGW-W64 compiler.
Description of the solution

Disabled secure string functions ""strcpy_s"", ""strcat_s"", ""strncpy_s"", ""sprintf_s"" in 'azure-c-shared-utility' if they are already defined and implemented in MinGW-W64.
Added missing LogErrorWinHTTPWithGetLastErrorAsString macro definition for non-Microsoft compilers.","If there's a full Visual Studio coming out for Linux, knowledge of such is way beyond my pay grade!
As a heads up I'm about to be gone for ~1 week.  I've provided some context to my coworkers, but summer means we have some folks out so there maybe some delays in getting in.  It seems you're unblocked at least :) since you have the PR.
I took a quick look at the LogLastError  code and it looks like it's some sort of ETW tie in in addition to the xlogging.h but it's unclear thoes are compatible at same time even.  EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR LogLastError = {0x4, 0x0, 0x11, 0x2, 0xd, 0x1, 0x4000000000000008};  I haven't really dug into this much, but ETW is the Windows event tracer that is pretty heavily dependent on GUIDs.  As I said though I can't see how that and a macro defining something differert would work in practice in quirk review.
For the LogErrorWinHTTPWithGetLastErrorAsString for non Win32, it's quite fine if that's a #error.  Both WinHTTP and GetLastError are joined at hip to Win32 so we're not doing any favors to folks to let that code compile on Linux if they try to.  I agree the same pattern for defining LogLastError for non-Win32 - with a #error - should be appropriate.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,167,2018-07-19T16:06:20Z,2018-08-16T21:42:11Z,2018-08-23T17:08:20Z,MERGED,True,41,7,3,https://github.com/vkuzmichev,Fix compiling for MinGW-W64,2,[],https://github.com/Azure/azure-c-shared-utility/pull/167,https://github.com/vkuzmichev,6,https://github.com/Azure/azure-c-shared-utility/pull/167#issuecomment-412142059,"Checklist

 I have read the [contribution guidelines] (https://github.com/Azure/azure-iot-sdk-c/blob/master/.github/CONTRIBUTING.md).
 I added or modified the existing tests to cover the change (we do not allow our test coverage to go down).
If this is a modification that impacts the behavior of a public API

 I edited the corresponding document in the devdoc folder and added or modified requirements.


I submitted this PR against the correct branch:

 This pull-request is submitted against the master branch.
 I have merged the latest master branch prior to submission and re-merged as needed after I took any feedback.
 I have squashed my changes into one with a clear description of the change.



Reference/Link to the issue solved with this PR (if any)
None.
Description of the problem
Azure IoT SDK does not compile in Windows using MinGW-W64 compiler.
Description of the solution

Disabled secure string functions ""strcpy_s"", ""strcat_s"", ""strncpy_s"", ""sprintf_s"" in 'azure-c-shared-utility' if they are already defined and implemented in MinGW-W64.
Added missing LogErrorWinHTTPWithGetLastErrorAsString macro definition for non-Microsoft compilers.","@jspaith
Finally I have updated the branch with fresh version of logging related commit.
If I put #error in #else section it will not let to compile SDK in Linux.
So I left LogErrorWinHTTPWithGetLastErrorAsString undefined for non-WIN32, so first use of LogErrorWinHTTPWithGetLastErrorAsString in non-Win32 source code will cause compile error (missing definition).",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,167,2018-07-19T16:06:20Z,2018-08-16T21:42:11Z,2018-08-23T17:08:20Z,MERGED,True,41,7,3,https://github.com/vkuzmichev,Fix compiling for MinGW-W64,2,[],https://github.com/Azure/azure-c-shared-utility/pull/167,https://github.com/jspaith,7,https://github.com/Azure/azure-c-shared-utility/pull/167#issuecomment-412991183,"Checklist

 I have read the [contribution guidelines] (https://github.com/Azure/azure-iot-sdk-c/blob/master/.github/CONTRIBUTING.md).
 I added or modified the existing tests to cover the change (we do not allow our test coverage to go down).
If this is a modification that impacts the behavior of a public API

 I edited the corresponding document in the devdoc folder and added or modified requirements.


I submitted this PR against the correct branch:

 This pull-request is submitted against the master branch.
 I have merged the latest master branch prior to submission and re-merged as needed after I took any feedback.
 I have squashed my changes into one with a clear description of the change.



Reference/Link to the issue solved with this PR (if any)
None.
Description of the problem
Azure IoT SDK does not compile in Windows using MinGW-W64 compiler.
Description of the solution

Disabled secure string functions ""strcpy_s"", ""strcat_s"", ""strncpy_s"", ""sprintf_s"" in 'azure-c-shared-utility' if they are already defined and implemented in MinGW-W64.
Added missing LogErrorWinHTTPWithGetLastErrorAsString macro definition for non-Microsoft compilers.","Could you please take a look at https://github.com/Azure/azure-c-shared-utility/compare/minGw.  I've taken what you've done, but I've moved the core Win32 helper code into a helper function since it was too much for a macro and worse when duplicated.  It builds fine for me on MSVC/Win32 and also Ubuntu/clang.
If it's good, I'll get it in and I won't squash this one so your contribution stays in history.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,167,2018-07-19T16:06:20Z,2018-08-16T21:42:11Z,2018-08-23T17:08:20Z,MERGED,True,41,7,3,https://github.com/vkuzmichev,Fix compiling for MinGW-W64,2,[],https://github.com/Azure/azure-c-shared-utility/pull/167,https://github.com/vkuzmichev,8,https://github.com/Azure/azure-c-shared-utility/pull/167#issuecomment-413491117,"Checklist

 I have read the [contribution guidelines] (https://github.com/Azure/azure-iot-sdk-c/blob/master/.github/CONTRIBUTING.md).
 I added or modified the existing tests to cover the change (we do not allow our test coverage to go down).
If this is a modification that impacts the behavior of a public API

 I edited the corresponding document in the devdoc folder and added or modified requirements.


I submitted this PR against the correct branch:

 This pull-request is submitted against the master branch.
 I have merged the latest master branch prior to submission and re-merged as needed after I took any feedback.
 I have squashed my changes into one with a clear description of the change.



Reference/Link to the issue solved with this PR (if any)
None.
Description of the problem
Azure IoT SDK does not compile in Windows using MinGW-W64 compiler.
Description of the solution

Disabled secure string functions ""strcpy_s"", ""strcat_s"", ""strncpy_s"", ""sprintf_s"" in 'azure-c-shared-utility' if they are already defined and implemented in MinGW-W64.
Added missing LogErrorWinHTTPWithGetLastErrorAsString macro definition for non-Microsoft compilers.","@jspaith
Looks good. There is one change in your commit to note. LogError macros used within new function xlogging_LogErrorWinHTTPWithGetLastErrorAsStringFormatter will use __FILE__ == src/xlogging.c, FUNC_NAME == new function name, and __LINE__ number where it is located in src/xlogging.c instead of location where the macro LogErrorWinHTTPWithGetLastErrorAsString is actually used.
I think this is acceptable regression since you left one LogError within LogErrorWinHTTPWithGetLastErrorAsString definition, so at least first error message should point to actual place where error is detected.
You can just push your commit into this PR branch (although it is in my fork of repository), so all the work can be merged together.
Thank you.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,167,2018-07-19T16:06:20Z,2018-08-16T21:42:11Z,2018-08-23T17:08:20Z,MERGED,True,41,7,3,https://github.com/vkuzmichev,Fix compiling for MinGW-W64,2,[],https://github.com/Azure/azure-c-shared-utility/pull/167,https://github.com/jspaith,9,https://github.com/Azure/azure-c-shared-utility/pull/167#issuecomment-413695408,"Checklist

 I have read the [contribution guidelines] (https://github.com/Azure/azure-iot-sdk-c/blob/master/.github/CONTRIBUTING.md).
 I added or modified the existing tests to cover the change (we do not allow our test coverage to go down).
If this is a modification that impacts the behavior of a public API

 I edited the corresponding document in the devdoc folder and added or modified requirements.


I submitted this PR against the correct branch:

 This pull-request is submitted against the master branch.
 I have merged the latest master branch prior to submission and re-merged as needed after I took any feedback.
 I have squashed my changes into one with a clear description of the change.



Reference/Link to the issue solved with this PR (if any)
None.
Description of the problem
Azure IoT SDK does not compile in Windows using MinGW-W64 compiler.
Description of the solution

Disabled secure string functions ""strcpy_s"", ""strcat_s"", ""strncpy_s"", ""sprintf_s"" in 'azure-c-shared-utility' if they are already defined and implemented in MinGW-W64.
Added missing LogErrorWinHTTPWithGetLastErrorAsString macro definition for non-Microsoft compilers.","Ahh - good catch on the log lines having xlogging.c in them.  But I agree that the line above captures original error, and the good of moving from pre-processor outweighs the 1 wrong file.
RE checking this in, the way our gates for C work is that I can't just point at a PR but have to create a temporary branch anyway.  Since it's off the PR we don't lose history, but it means here I might as well just bring minGW in directly.  Done!
Thanks again for this fix.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,167,2018-07-19T16:06:20Z,2018-08-16T21:42:11Z,2018-08-23T17:08:20Z,MERGED,True,41,7,3,https://github.com/vkuzmichev,Fix compiling for MinGW-W64,2,[],https://github.com/Azure/azure-c-shared-utility/pull/167,https://github.com/jspaith,10,https://github.com/Azure/azure-c-shared-utility/pull/167#issuecomment-415487174,"Checklist

 I have read the [contribution guidelines] (https://github.com/Azure/azure-iot-sdk-c/blob/master/.github/CONTRIBUTING.md).
 I added or modified the existing tests to cover the change (we do not allow our test coverage to go down).
If this is a modification that impacts the behavior of a public API

 I edited the corresponding document in the devdoc folder and added or modified requirements.


I submitted this PR against the correct branch:

 This pull-request is submitted against the master branch.
 I have merged the latest master branch prior to submission and re-merged as needed after I took any feedback.
 I have squashed my changes into one with a clear description of the change.



Reference/Link to the issue solved with this PR (if any)
None.
Description of the problem
Azure IoT SDK does not compile in Windows using MinGW-W64 compiler.
Description of the solution

Disabled secure string functions ""strcpy_s"", ""strcat_s"", ""strncpy_s"", ""sprintf_s"" in 'azure-c-shared-utility' if they are already defined and implemented in MinGW-W64.
Added missing LogErrorWinHTTPWithGetLastErrorAsString macro definition for non-Microsoft compilers.",Ugh -  7948cf4 fixes a tricky one that slipped through (and clearly my fault).  Happy I found this early instead of having some horrible to debug customer issue losing error code.  Change should be in shortly.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,167,2018-07-19T16:06:20Z,2018-08-16T21:42:11Z,2018-08-23T17:08:20Z,MERGED,True,41,7,3,https://github.com/vkuzmichev,Fix compiling for MinGW-W64,2,[],https://github.com/Azure/azure-c-shared-utility/pull/167,https://github.com/vkuzmichev,11,https://github.com/Azure/azure-c-shared-utility/pull/167#issuecomment-415491203,"Checklist

 I have read the [contribution guidelines] (https://github.com/Azure/azure-iot-sdk-c/blob/master/.github/CONTRIBUTING.md).
 I added or modified the existing tests to cover the change (we do not allow our test coverage to go down).
If this is a modification that impacts the behavior of a public API

 I edited the corresponding document in the devdoc folder and added or modified requirements.


I submitted this PR against the correct branch:

 This pull-request is submitted against the master branch.
 I have merged the latest master branch prior to submission and re-merged as needed after I took any feedback.
 I have squashed my changes into one with a clear description of the change.



Reference/Link to the issue solved with this PR (if any)
None.
Description of the problem
Azure IoT SDK does not compile in Windows using MinGW-W64 compiler.
Description of the solution

Disabled secure string functions ""strcpy_s"", ""strcat_s"", ""strncpy_s"", ""sprintf_s"" in 'azure-c-shared-utility' if they are already defined and implemented in MinGW-W64.
Added missing LogErrorWinHTTPWithGetLastErrorAsString macro definition for non-Microsoft compilers.","@jspaith
Interestingly. I though printf can not change the error code variable used by SetLastError*/GetLastError*. printf even should not change errno, but even if it can, I expect that this is not the same variable.
However, I agree to save error code in advance.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,167,2018-07-19T16:06:20Z,2018-08-16T21:42:11Z,2018-08-23T17:08:20Z,MERGED,True,41,7,3,https://github.com/vkuzmichev,Fix compiling for MinGW-W64,2,[],https://github.com/Azure/azure-c-shared-utility/pull/167,https://github.com/jspaith,12,https://github.com/Azure/azure-c-shared-utility/pull/167#issuecomment-415495554,"Checklist

 I have read the [contribution guidelines] (https://github.com/Azure/azure-iot-sdk-c/blob/master/.github/CONTRIBUTING.md).
 I added or modified the existing tests to cover the change (we do not allow our test coverage to go down).
If this is a modification that impacts the behavior of a public API

 I edited the corresponding document in the devdoc folder and added or modified requirements.


I submitted this PR against the correct branch:

 This pull-request is submitted against the master branch.
 I have merged the latest master branch prior to submission and re-merged as needed after I took any feedback.
 I have squashed my changes into one with a clear description of the change.



Reference/Link to the issue solved with this PR (if any)
None.
Description of the problem
Azure IoT SDK does not compile in Windows using MinGW-W64 compiler.
Description of the solution

Disabled secure string functions ""strcpy_s"", ""strcat_s"", ""strncpy_s"", ""sprintf_s"" in 'azure-c-shared-utility' if they are already defined and implemented in MinGW-W64.
Added missing LogErrorWinHTTPWithGetLastErrorAsString macro definition for non-Microsoft compilers.","I saw the error code changed to 0 in one run, which motivated this fix.  Even if printf is leaving the LastError alone (it probably is), one of printf()`s callees must be doing something.  In any event should've been like this in 1st place to future proof.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,169,2018-07-31T22:03:51Z,2018-07-31T22:53:11Z,2018-09-28T17:21:53Z,MERGED,True,6,2,2,https://github.com/dcristoloveanu,Fix linker warning 4221 for gb_stdio.c and gb_time.c,1,[],https://github.com/Azure/azure-c-shared-utility/pull/169,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/169,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,171,2018-08-01T04:05:46Z,2018-08-01T04:46:31Z,2018-08-01T04:46:31Z,MERGED,True,65,8,1,https://github.com/dcristoloveanu,"Allow usage of debug, optimized and general in ADDITIONAL_LIBS",1,[],https://github.com/Azure/azure-c-shared-utility/pull/171,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/171,"There is a need to pass debug/optimized and general qualifiers on ADDITIONAL_LIBS arguments when building new test targets.
This is in order to allow linking different libs for debug and optimized targets in one of the projects we have.
Thus the loop that checks the args was modified to scan for the keywords and a new cmake function was created to set the target libraries with the appropriate qualifier.","There is a need to pass debug/optimized and general qualifiers on ADDITIONAL_LIBS arguments when building new test targets.
This is in order to allow linking different libs for debug and optimized targets in one of the projects we have.
Thus the loop that checks the args was modified to scan for the keywords and a new cmake function was created to set the target libraries with the appropriate qualifier.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,172,2018-08-02T15:30:47Z,2018-08-07T20:24:59Z,2018-08-07T20:24:59Z,CLOSED,False,29,18,6,https://github.com/lisaweixu,Weixu/uwp format,9,[],https://github.com/Azure/azure-c-shared-utility/pull/172,https://github.com/lisaweixu,1,https://github.com/Azure/azure-c-shared-utility/pull/172,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,172,2018-08-02T15:30:47Z,2018-08-07T20:24:59Z,2018-08-07T20:24:59Z,CLOSED,False,29,18,6,https://github.com/lisaweixu,Weixu/uwp format,9,[],https://github.com/Azure/azure-c-shared-utility/pull/172,https://github.com/lisaweixu,2,https://github.com/Azure/azure-c-shared-utility/pull/172#issuecomment-411190126,,"I want to check in some code changes into ""fmegen/azure-c-shared-utility"". I did not mean to push into the master branch of azure-c-shared-utility.
The changes are meant to make azure-c-shared-utility passing WACK. #172 contains some bugs that are being fixed by #173. So, I am closing #172.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,173,2018-08-02T17:58:09Z,2018-08-07T20:59:49Z,2018-08-07T20:59:49Z,CLOSED,False,28,17,6,https://github.com/lisaweixu,revert some of the ,10,[],https://github.com/Azure/azure-c-shared-utility/pull/173,https://github.com/lisaweixu,1,https://github.com/Azure/azure-c-shared-utility/pull/173,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,173,2018-08-02T17:58:09Z,2018-08-07T20:59:49Z,2018-08-07T20:59:49Z,CLOSED,False,28,17,6,https://github.com/lisaweixu,revert some of the ,10,[],https://github.com/Azure/azure-c-shared-utility/pull/173,https://github.com/jspaith,2,https://github.com/Azure/azure-c-shared-utility/pull/173#issuecomment-410361745,,Could you please explain how this is different than #172?  Should #172 be retired?  Also could you please provide a bit more background about the motivation behind this change in 1st place?  Thanks!,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,173,2018-08-02T17:58:09Z,2018-08-07T20:59:49Z,2018-08-07T20:59:49Z,CLOSED,False,28,17,6,https://github.com/lisaweixu,revert some of the ,10,[],https://github.com/Azure/azure-c-shared-utility/pull/173,https://github.com/lisaweixu,3,https://github.com/Azure/azure-c-shared-utility/pull/173#issuecomment-411200703,,"Sorry, as I explained in #172. I did this PR against the wrong branch. I am closing it.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,175,2018-08-13T04:16:19Z,2018-08-16T20:46:20Z,2018-08-16T20:46:20Z,CLOSED,False,1,1,1,https://github.com/Morozov-5F,Fix compilation with older GCC,1,[],https://github.com/Azure/azure-c-shared-utility/pull/175,https://github.com/Morozov-5F,1,https://github.com/Azure/azure-c-shared-utility/pull/175,"Reference/Link to the issue solved with this PR (if any)
None.
Description of the problem
Old gcc was unable to deduce that certain pointer is being initialized inside the function and it produced a warning which led to a build-time error. Error message as follows:
c-utility/adapters/socketio_berkeley.c: In function 'socketio_open':
c-utility/adapters/socketio_berkeley.c:323:17: error: 'connect_addr' may be used uninitialized in this function [-Werror=maybe-uninitialized]
             err = connect(socket_io_instance->socket, connect_addr, connect_addr_len);
                 ^
c-utility/adapters/socketio_berkeley.c:266:22: note: 'connect_addr' was declared here
     struct sockaddr* connect_addr;
                      ^
cc1: all warnings being treated as errors

Compiler version:
mips-openwrt-linux-gcc (OpenWrt/Linaro GCC 4.8-2014.04 r49163) 4.8.3
Copyright (C) 2013 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Description of the solution
Now variable connect_addr is explicitly initialized to NULL pointer to silence the compiler warning (also it definitely won't harm to initialize it anyway).","Reference/Link to the issue solved with this PR (if any)
None.
Description of the problem
Old gcc was unable to deduce that certain pointer is being initialized inside the function and it produced a warning which led to a build-time error. Error message as follows:
c-utility/adapters/socketio_berkeley.c: In function 'socketio_open':
c-utility/adapters/socketio_berkeley.c:323:17: error: 'connect_addr' may be used uninitialized in this function [-Werror=maybe-uninitialized]
             err = connect(socket_io_instance->socket, connect_addr, connect_addr_len);
                 ^
c-utility/adapters/socketio_berkeley.c:266:22: note: 'connect_addr' was declared here
     struct sockaddr* connect_addr;
                      ^
cc1: all warnings being treated as errors

Compiler version:
mips-openwrt-linux-gcc (OpenWrt/Linaro GCC 4.8-2014.04 r49163) 4.8.3
Copyright (C) 2013 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Description of the solution
Now variable connect_addr is explicitly initialized to NULL pointer to silence the compiler warning (also it definitely won't harm to initialize it anyway).",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,175,2018-08-13T04:16:19Z,2018-08-16T20:46:20Z,2018-08-16T20:46:20Z,CLOSED,False,1,1,1,https://github.com/Morozov-5F,Fix compilation with older GCC,1,[],https://github.com/Azure/azure-c-shared-utility/pull/175,https://github.com/zolvarga,2,https://github.com/Azure/azure-c-shared-utility/pull/175#issuecomment-413029762,"Reference/Link to the issue solved with this PR (if any)
None.
Description of the problem
Old gcc was unable to deduce that certain pointer is being initialized inside the function and it produced a warning which led to a build-time error. Error message as follows:
c-utility/adapters/socketio_berkeley.c: In function 'socketio_open':
c-utility/adapters/socketio_berkeley.c:323:17: error: 'connect_addr' may be used uninitialized in this function [-Werror=maybe-uninitialized]
             err = connect(socket_io_instance->socket, connect_addr, connect_addr_len);
                 ^
c-utility/adapters/socketio_berkeley.c:266:22: note: 'connect_addr' was declared here
     struct sockaddr* connect_addr;
                      ^
cc1: all warnings being treated as errors

Compiler version:
mips-openwrt-linux-gcc (OpenWrt/Linaro GCC 4.8-2014.04 r49163) 4.8.3
Copyright (C) 2013 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Description of the solution
Now variable connect_addr is explicitly initialized to NULL pointer to silence the compiler warning (also it definitely won't harm to initialize it anyway).","@Morozov-5F
Thank you for contributing to our repo!
I accepted the PR and will close it as soon as it merged.
Best Regards,
Zoltan",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,175,2018-08-13T04:16:19Z,2018-08-16T20:46:20Z,2018-08-16T20:46:20Z,CLOSED,False,1,1,1,https://github.com/Morozov-5F,Fix compilation with older GCC,1,[],https://github.com/Azure/azure-c-shared-utility/pull/175,https://github.com/zolvarga,3,https://github.com/Azure/azure-c-shared-utility/pull/175#issuecomment-413679274,"Reference/Link to the issue solved with this PR (if any)
None.
Description of the problem
Old gcc was unable to deduce that certain pointer is being initialized inside the function and it produced a warning which led to a build-time error. Error message as follows:
c-utility/adapters/socketio_berkeley.c: In function 'socketio_open':
c-utility/adapters/socketio_berkeley.c:323:17: error: 'connect_addr' may be used uninitialized in this function [-Werror=maybe-uninitialized]
             err = connect(socket_io_instance->socket, connect_addr, connect_addr_len);
                 ^
c-utility/adapters/socketio_berkeley.c:266:22: note: 'connect_addr' was declared here
     struct sockaddr* connect_addr;
                      ^
cc1: all warnings being treated as errors

Compiler version:
mips-openwrt-linux-gcc (OpenWrt/Linaro GCC 4.8-2014.04 r49163) 4.8.3
Copyright (C) 2013 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Description of the solution
Now variable connect_addr is explicitly initialized to NULL pointer to silence the compiler warning (also it definitely won't harm to initialize it anyway).","@Morozov-5F
The PR has been merged to master
Best Regards,
Zoltan",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,176,2018-08-13T23:04:11Z,2018-08-16T20:35:45Z,2018-08-16T21:12:13Z,CLOSED,False,2,0,1,https://github.com/darobs,Up to two files were missing from the header list in CMakeLists.txt,1,[],https://github.com/Azure/azure-c-shared-utility/pull/176,https://github.com/darobs,1,https://github.com/Azure/azure-c-shared-utility/pull/176,Which means they weren't installed.,Which means they weren't installed.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,176,2018-08-13T23:04:11Z,2018-08-16T20:35:45Z,2018-08-16T21:12:13Z,CLOSED,False,2,0,1,https://github.com/darobs,Up to two files were missing from the header list in CMakeLists.txt,1,[],https://github.com/Azure/azure-c-shared-utility/pull/176,https://github.com/zolvarga,2,https://github.com/Azure/azure-c-shared-utility/pull/176#issuecomment-413029126,Which means they weren't installed.,"@darobs
Thank you for contributing to our repo!
I accepting your PR and will close it as soon as it merged.
Best Regards,
Zoltan",True,{'THUMBS_UP': ['https://github.com/darobs']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,176,2018-08-13T23:04:11Z,2018-08-16T20:35:45Z,2018-08-16T21:12:13Z,CLOSED,False,2,0,1,https://github.com/darobs,Up to two files were missing from the header list in CMakeLists.txt,1,[],https://github.com/Azure/azure-c-shared-utility/pull/176,https://github.com/zolvarga,3,https://github.com/Azure/azure-c-shared-utility/pull/176#issuecomment-413676413,Which means they weren't installed.,"@darobs
The PR has been merged to master.
Best Regards,
Zoltan",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,177,2018-08-14T08:12:24Z,2018-08-16T20:08:12Z,2018-08-16T20:13:27Z,MERGED,True,2,2,1,https://github.com/pboettch,Fix #174: avoid new GCC 8.2 warnings (s/strncpy/memcpy/),1,[],https://github.com/Azure/azure-c-shared-utility/pull/177,https://github.com/pboettch,1,https://github.com/Azure/azure-c-shared-utility/pull/177,"GCC 8.2 is not able to determine that the length is OK for dst
and thus moans about the usage of strncpy.
How it is done, memcpy seems more appropriate to be used.
Maybe in the future this code can be even more simplified.","GCC 8.2 is not able to determine that the length is OK for dst
and thus moans about the usage of strncpy.
How it is done, memcpy seems more appropriate to be used.
Maybe in the future this code can be even more simplified.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,177,2018-08-14T08:12:24Z,2018-08-16T20:08:12Z,2018-08-16T20:13:27Z,MERGED,True,2,2,1,https://github.com/pboettch,Fix #174: avoid new GCC 8.2 warnings (s/strncpy/memcpy/),1,[],https://github.com/Azure/azure-c-shared-utility/pull/177,https://github.com/zolvarga,2,https://github.com/Azure/azure-c-shared-utility/pull/177#issuecomment-412995372,"GCC 8.2 is not able to determine that the length is OK for dst
and thus moans about the usage of strncpy.
How it is done, memcpy seems more appropriate to be used.
Maybe in the future this code can be even more simplified.","@pboettch
Thank you for contributing to our repo!
It is a good idea to switch to memcpy and in this case it won't cause a problem.
I am accepting the PR, ad will close it when it has been merged.
Best Regards,
Zoltan",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,177,2018-08-14T08:12:24Z,2018-08-16T20:08:12Z,2018-08-16T20:13:27Z,MERGED,True,2,2,1,https://github.com/pboettch,Fix #174: avoid new GCC 8.2 warnings (s/strncpy/memcpy/),1,[],https://github.com/Azure/azure-c-shared-utility/pull/177,https://github.com/zolvarga,3,https://github.com/Azure/azure-c-shared-utility/pull/177#issuecomment-413670426,"GCC 8.2 is not able to determine that the length is OK for dst
and thus moans about the usage of strncpy.
How it is done, memcpy seems more appropriate to be used.
Maybe in the future this code can be even more simplified.","@pboettch
The PR has been merged.
Best Regards,
Zoltan",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,178,2018-08-28T04:45:37Z,2018-08-28T21:24:06Z,2018-08-28T23:43:03Z,MERGED,True,23,23,4,https://github.com/dcristoloveanu,Rename UUID type to UUID_T to avoid collisions with Windows types,1,[],https://github.com/Azure/azure-c-shared-utility/pull/178,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/178,"This addresses the collision reported in #162.
After this is merged in a PR for uamqp will be issued, since that seems to be the only downstream repo that needs it.","This addresses the collision reported in #162.
After this is merged in a PR for uamqp will be issued, since that seems to be the only downstream repo that needs it.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,180,2018-08-30T20:55:31Z,2018-08-30T22:34:39Z,2018-09-28T17:21:57Z,MERGED,True,10,7,2,https://github.com/dcristoloveanu,Add PRI_UUID print format specifier,1,[],https://github.com/Azure/azure-c-shared-utility/pull/180,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/180,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,181,2018-09-03T09:03:17Z,2018-09-03T09:05:02Z,2018-09-03T09:05:02Z,CLOSED,False,31,31,13,https://github.com/SeanZhang0920,MOD: %zu->%lu to mbed-related files,1,[],https://github.com/Azure/azure-c-shared-utility/pull/181,https://github.com/SeanZhang0920,1,https://github.com/Azure/azure-c-shared-utility/pull/181,"As %zu cannot be shown correctly on mbed os5, I modified %zu to %lu in some mbed-os5-related files.","As %zu cannot be shown correctly on mbed os5, I modified %zu to %lu in some mbed-os5-related files.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,182,2018-09-03T09:22:04Z,2019-02-23T06:37:02Z,2019-02-23T06:37:02Z,CLOSED,False,31,31,13,https://github.com/SeanZhang0920,MOD: %zu->%lu to mbed-related files,1,[],https://github.com/Azure/azure-c-shared-utility/pull/182,https://github.com/SeanZhang0920,1,https://github.com/Azure/azure-c-shared-utility/pull/182,"As %zu cannot be shown correctly on mbed os5, I modified %zu to %lu in some mbed-os5-related files.","As %zu cannot be shown correctly on mbed os5, I modified %zu to %lu in some mbed-os5-related files.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,182,2018-09-03T09:22:04Z,2019-02-23T06:37:02Z,2019-02-23T06:37:02Z,CLOSED,False,31,31,13,https://github.com/SeanZhang0920,MOD: %zu->%lu to mbed-related files,1,[],https://github.com/Azure/azure-c-shared-utility/pull/182,https://github.com/massand,2,https://github.com/Azure/azure-c-shared-utility/pull/182#issuecomment-455451823,"As %zu cannot be shown correctly on mbed os5, I modified %zu to %lu in some mbed-os5-related files.",@SeanZhang0920 / @ArthurMa1978  - could you make the requested changes to push this PR through? I believe MBED5 support relies on this change?,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,183,2018-09-04T16:21:41Z,2018-10-01T20:18:08Z,2018-10-02T23:18:08Z,MERGED,True,3,3,3,https://github.com/dcristoloveanu,Make arg to UUID_to_string const,1,[],https://github.com/Azure/azure-c-shared-utility/pull/183,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/183,Make arg to UUID_to_string const,Make arg to UUID_to_string const,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,184,2018-09-09T07:53:12Z,2019-01-14T20:45:36Z,2019-01-14T20:45:36Z,MERGED,True,2,2,1,https://github.com/gregjesl,Fixed location of sntp.h for ESP32 Support,2,[],https://github.com/Azure/azure-c-shared-utility/pull/184,https://github.com/gregjesl,1,https://github.com/Azure/azure-c-shared-utility/pull/184,EspressIf recently changed their lwip implementation (espressif/esp-idf@3578fe3#diff-d4ffea296f65048ca90617f4680cf389).  The location of sntp.h has changed.  I asked about the change in EspressIf's esp-idf repository (espressif/esp-idf#2392 (comment)).  They responded by showing me the updated example where the header file changed (espressif/esp-idf#2392 (comment)),EspressIf recently changed their lwip implementation (espressif/esp-idf@3578fe3#diff-d4ffea296f65048ca90617f4680cf389).  The location of sntp.h has changed.  I asked about the change in EspressIf's esp-idf repository (espressif/esp-idf#2392 (comment)).  They responded by showing me the updated example where the header file changed (espressif/esp-idf#2392 (comment)),True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,184,2018-09-09T07:53:12Z,2019-01-14T20:45:36Z,2019-01-14T20:45:36Z,MERGED,True,2,2,1,https://github.com/gregjesl,Fixed location of sntp.h for ESP32 Support,2,[],https://github.com/Azure/azure-c-shared-utility/pull/184,https://github.com/gregjesl,2,https://github.com/Azure/azure-c-shared-utility/pull/184#issuecomment-419697911,EspressIf recently changed their lwip implementation (espressif/esp-idf@3578fe3#diff-d4ffea296f65048ca90617f4680cf389).  The location of sntp.h has changed.  I asked about the change in EspressIf's esp-idf repository (espressif/esp-idf#2392 (comment)).  They responded by showing me the updated example where the header file changed (espressif/esp-idf#2392 (comment)),See espressif/esp-idf@3578fe3#diff-706589310e651973213073b70e088191 for the EspressIf's update to their example code.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,184,2018-09-09T07:53:12Z,2019-01-14T20:45:36Z,2019-01-14T20:45:36Z,MERGED,True,2,2,1,https://github.com/gregjesl,Fixed location of sntp.h for ESP32 Support,2,[],https://github.com/Azure/azure-c-shared-utility/pull/184,https://github.com/massand,3,https://github.com/Azure/azure-c-shared-utility/pull/184#issuecomment-454141623,EspressIf recently changed their lwip implementation (espressif/esp-idf@3578fe3#diff-d4ffea296f65048ca90617f4680cf389).  The location of sntp.h has changed.  I asked about the change in EspressIf's esp-idf repository (espressif/esp-idf#2392 (comment)).  They responded by showing me the updated example where the header file changed (espressif/esp-idf#2392 (comment)),/AzurePipelines run all,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,185,2018-09-11T09:15:05Z,,2021-11-02T20:28:01Z,OPEN,False,3,1,1,https://github.com/qiying,Link uuid library by specific directories.,2,[],https://github.com/Azure/azure-c-shared-utility/pull/185,https://github.com/qiying,1,https://github.com/Azure/azure-c-shared-utility/pull/185,"If libuuid.so and uuid.h are under a specific path, CMakeLists.txt should provide variables for setting.","If libuuid.so and uuid.h are under a specific path, CMakeLists.txt should provide variables for setting.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,186,2018-09-18T17:49:52Z,2018-09-19T17:04:06Z,2018-09-19T17:04:06Z,CLOSED,False,152,15,2,https://github.com/hihigupt,Add head method in http compact client,1,[],https://github.com/Azure/azure-c-shared-utility/pull/186,https://github.com/hihigupt,1,https://github.com/Azure/azure-c-shared-utility/pull/186,"Changes:

Add head method in http compact client.
Update set option to not copy cert, because in mcu certs are in flash and it is unnecessary to copy those certs again into ram.
Unit tests.","Changes:

Add head method in http compact client.
Update set option to not copy cert, because in mcu certs are in flash and it is unnecessary to copy those certs again into ram.
Unit tests.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,188,2018-09-20T17:23:08Z,2018-10-02T18:25:18Z,2018-10-02T23:18:04Z,MERGED,True,3,1,2,https://github.com/hihigupt,Update requirements for httpcompact client HEAD method,1,[],https://github.com/Azure/azure-c-shared-utility/pull/188,https://github.com/hihigupt,1,https://github.com/Azure/azure-c-shared-utility/pull/188,Updating requirement doc for httpcompact client.,Updating requirement doc for httpcompact client.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,191,2018-09-24T17:59:46Z,2018-10-01T20:23:29Z,2018-10-01T20:23:29Z,MERGED,True,11,0,1,https://github.com/annatisch,Support for building with VC++ 9.0,1,[],https://github.com/Azure/azure-c-shared-utility/pull/191,https://github.com/annatisch,1,https://github.com/Azure/azure-c-shared-utility/pull/191,"Suppresses the following warning when building x64 in Visual Studio 2008:
azure-c-shared-utility\adapters\x509_schannel.c(76) : warning C4306: 'type cast' : conversion from 'int' to 'LPCSTR' of greater size

Resolves issue #187","Suppresses the following warning when building x64 in Visual Studio 2008:
azure-c-shared-utility\adapters\x509_schannel.c(76) : warning C4306: 'type cast' : conversion from 'int' to 'LPCSTR' of greater size

Resolves issue #187",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,191,2018-09-24T17:59:46Z,2018-10-01T20:23:29Z,2018-10-01T20:23:29Z,MERGED,True,11,0,1,https://github.com/annatisch,Support for building with VC++ 9.0,1,[],https://github.com/Azure/azure-c-shared-utility/pull/191,https://github.com/dcristoloveanu,2,https://github.com/Azure/azure-c-shared-utility/pull/191#issuecomment-425326797,"Suppresses the following warning when building x64 in Visual Studio 2008:
azure-c-shared-utility\adapters\x509_schannel.c(76) : warning C4306: 'type cast' : conversion from 'int' to 'LPCSTR' of greater size

Resolves issue #187","Hi @annatisch
Sorry for the delay, I tried merging this, but the gated build is broken and the powers that be are trying to fix it.
When the gate comes online again I'll merge it in.
Cheers!
/Dan",True,{'THUMBS_UP': ['https://github.com/annatisch']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,191,2018-09-24T17:59:46Z,2018-10-01T20:23:29Z,2018-10-01T20:23:29Z,MERGED,True,11,0,1,https://github.com/annatisch,Support for building with VC++ 9.0,1,[],https://github.com/Azure/azure-c-shared-utility/pull/191,https://github.com/annatisch,3,https://github.com/Azure/azure-c-shared-utility/pull/191#issuecomment-425451196,"Suppresses the following warning when building x64 in Visual Studio 2008:
azure-c-shared-utility\adapters\x509_schannel.c(76) : warning C4306: 'type cast' : conversion from 'int' to 'LPCSTR' of greater size

Resolves issue #187",Thanks - all good! :),True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,192,2018-09-26T17:20:25Z,2018-10-02T18:31:26Z,2018-10-02T23:18:05Z,MERGED,True,3,0,1,https://github.com/hihigupt,Fix http compact cert no copy,1,[],https://github.com/Azure/azure-c-shared-utility/pull/192,https://github.com/hihigupt,1,https://github.com/Azure/azure-c-shared-utility/pull/192,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,193,2018-09-26T20:44:51Z,2018-10-04T15:15:17Z,2018-10-04T15:15:17Z,CLOSED,False,6,4,1,https://github.com/darobs,"Fix bug in usePermissiveRulesForSamplesAndTests, make more permissive",4,[],https://github.com/Azure/azure-c-shared-utility/pull/193,https://github.com/darobs,1,https://github.com/Azure/azure-c-shared-utility/pull/193,"OK, I was trying to build with ""-Wall -Wextra"" in a certain other project, and I was wondering why my
added warning suppressions weren't getting applied.
That's because I was using a GNU compiler, and there's a bug in usePermissiveRulesForSamplesAndTests.
Suppose CMAKE_C_FLAGS ="""" coming into this function.
After the 1st set, CMAKE_C_FLAGS ="""", but the PARENT_SCOPE's CMAKE_C_FLAGS="" -Wno-unused-variable  -Wno-unused-function -Wno-missing-braces""
After the 2nd set, CMAKE_C_FLAGS ="""", but the PARENT_SCOPE's CMAKE_C_FLAGS =""-Wno-unused-but-set-variable""
Thus the result of usePermissiveRulesForSamplesAndTests for GNU compilers is CMAKE_C_FLAGS =""-Wno-unused-but-set-variable"" - not the intended "" -Wno-unused-variable  -Wno-unused-function -Wno-missing-braces -Wno-unused-but-set-variable"".
This fixes that bug, and it adds a few more warning supressions so this can build with ""-WError -Wall -Wextra"" set.","OK, I was trying to build with ""-Wall -Wextra"" in a certain other project, and I was wondering why my
added warning suppressions weren't getting applied.
That's because I was using a GNU compiler, and there's a bug in usePermissiveRulesForSamplesAndTests.
Suppose CMAKE_C_FLAGS ="""" coming into this function.
After the 1st set, CMAKE_C_FLAGS ="""", but the PARENT_SCOPE's CMAKE_C_FLAGS="" -Wno-unused-variable  -Wno-unused-function -Wno-missing-braces""
After the 2nd set, CMAKE_C_FLAGS ="""", but the PARENT_SCOPE's CMAKE_C_FLAGS =""-Wno-unused-but-set-variable""
Thus the result of usePermissiveRulesForSamplesAndTests for GNU compilers is CMAKE_C_FLAGS =""-Wno-unused-but-set-variable"" - not the intended "" -Wno-unused-variable  -Wno-unused-function -Wno-missing-braces -Wno-unused-but-set-variable"".
This fixes that bug, and it adds a few more warning supressions so this can build with ""-WError -Wall -Wextra"" set.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,193,2018-09-26T20:44:51Z,2018-10-04T15:15:17Z,2018-10-04T15:15:17Z,CLOSED,False,6,4,1,https://github.com/darobs,"Fix bug in usePermissiveRulesForSamplesAndTests, make more permissive",4,[],https://github.com/Azure/azure-c-shared-utility/pull/193,https://github.com/darobs,2,https://github.com/Azure/azure-c-shared-utility/pull/193#issuecomment-427057967,"OK, I was trying to build with ""-Wall -Wextra"" in a certain other project, and I was wondering why my
added warning suppressions weren't getting applied.
That's because I was using a GNU compiler, and there's a bug in usePermissiveRulesForSamplesAndTests.
Suppose CMAKE_C_FLAGS ="""" coming into this function.
After the 1st set, CMAKE_C_FLAGS ="""", but the PARENT_SCOPE's CMAKE_C_FLAGS="" -Wno-unused-variable  -Wno-unused-function -Wno-missing-braces""
After the 2nd set, CMAKE_C_FLAGS ="""", but the PARENT_SCOPE's CMAKE_C_FLAGS =""-Wno-unused-but-set-variable""
Thus the result of usePermissiveRulesForSamplesAndTests for GNU compilers is CMAKE_C_FLAGS =""-Wno-unused-but-set-variable"" - not the intended "" -Wno-unused-variable  -Wno-unused-function -Wno-missing-braces -Wno-unused-but-set-variable"".
This fixes that bug, and it adds a few more warning supressions so this can build with ""-WError -Wall -Wextra"" set.",Merged under a different branch name,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,194,2018-09-27T05:53:44Z,2018-10-01T18:23:32Z,2018-10-01T20:02:28Z,MERGED,True,1,160,46,https://github.com/dcristoloveanu,Remove useless g_DllByDll,1,[],https://github.com/Azure/azure-c-shared-utility/pull/194,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/194,Remove useless g_DllByDll in tests,Remove useless g_DllByDll in tests,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,198,2018-09-29T01:34:17Z,2018-10-04T05:03:02Z,2018-10-06T03:59:16Z,MERGED,True,61,183,6,https://github.com/dcristoloveanu,Improve const buffer to do only one malloc,1,[],https://github.com/Azure/azure-c-shared-utility/pull/198,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/198,"Improve const buffer to do only one malloc
Created INIT_VAR/INC_VAR/DEC_VAR macros in the refcount_os implementations for Windows/Linux/Generic. This is in order that we can use this abstraction without being bound to a ref count type from refcount.h. This will also help us in other projects :-).
Removed some oldies but goldies from the const buffer tests

Having the specs and test suite there was so awesome!","Improve const buffer to do only one malloc
Created INIT_VAR/INC_VAR/DEC_VAR macros in the refcount_os implementations for Windows/Linux/Generic. This is in order that we can use this abstraction without being bound to a ref count type from refcount.h. This will also help us in other projects :-).
Removed some oldies but goldies from the const buffer tests

Having the specs and test suite there was so awesome!",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,199,2018-10-01T14:45:41Z,2018-10-01T16:41:09Z,2018-10-01T16:41:09Z,MERGED,True,178,1,4,https://github.com/anporumb,have add head for singlylinked list,3,[],https://github.com/Azure/azure-c-shared-utility/pull/199,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/199,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,200,2018-10-03T21:43:39Z,2018-10-05T17:35:13Z,2018-10-05T17:35:13Z,CLOSED,False,0,0,0,https://github.com/dcristoloveanu,Improve LOG macro to detect errors when compiling,0,[],https://github.com/Azure/azure-c-shared-utility/pull/200,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/200,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,201,2018-10-06T03:57:03Z,2018-10-06T04:06:08Z,2018-10-10T18:16:14Z,MERGED,True,5,0,1,https://github.com/dcristoloveanu,Fix MBED break for xlogging,1,[],https://github.com/Azure/azure-c-shared-utility/pull/201,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/201,Fix MBED break for xlogging,Fix MBED break for xlogging,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,202,2018-10-10T06:37:22Z,2018-10-10T20:51:21Z,2018-10-12T06:47:04Z,MERGED,True,117,117,24,https://github.com/dcristoloveanu,Remove _WITH_MSG macros from tests,2,[],https://github.com/Azure/azure-c-shared-utility/pull/202,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/202,Remove _WITH_MSG macros from tests,Remove _WITH_MSG macros from tests,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,203,2018-10-10T19:03:49Z,2018-10-22T16:21:05Z,2018-10-22T16:21:05Z,CLOSED,False,135,1,2,https://github.com/BigPeteB,Use stub for HTTP proxy when SocketIO isn't enabled,2,[],https://github.com/Azure/azure-c-shared-utility/pull/203,https://github.com/BigPeteB,1,https://github.com/Azure/azure-c-shared-utility/pull/203,Fix for Azure/azure-iot-sdk-c#456,Fix for Azure/azure-iot-sdk-c#456,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,203,2018-10-10T19:03:49Z,2018-10-22T16:21:05Z,2018-10-22T16:21:05Z,CLOSED,False,135,1,2,https://github.com/BigPeteB,Use stub for HTTP proxy when SocketIO isn't enabled,2,[],https://github.com/Azure/azure-c-shared-utility/pull/203,https://github.com/msftclas,2,https://github.com/Azure/azure-c-shared-utility/pull/203#issuecomment-428693387,Fix for Azure/azure-iot-sdk-c#456,All CLA requirements met.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,204,2018-10-11T18:21:36Z,2019-01-09T22:16:05Z,2019-01-09T22:16:05Z,CLOSED,False,127,43,4,https://github.com/bfjelds,add SharedAccessSignature (in addition to existing SharedAccessKey) a…,1,[],https://github.com/Azure/azure-c-shared-utility/pull/204,https://github.com/bfjelds,1,https://github.com/Azure/azure-c-shared-utility/pull/204,…uthentication to module creation,…uthentication to module creation,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,204,2018-10-11T18:21:36Z,2019-01-09T22:16:05Z,2019-01-09T22:16:05Z,CLOSED,False,127,43,4,https://github.com/bfjelds,add SharedAccessSignature (in addition to existing SharedAccessKey) a…,1,[],https://github.com/Azure/azure-c-shared-utility/pull/204,https://github.com/bfjelds,2,https://github.com/Azure/azure-c-shared-utility/pull/204#issuecomment-429066226,…uthentication to module creation,Linked to: Azure/azure-iot-sdk-c#661,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,204,2018-10-11T18:21:36Z,2019-01-09T22:16:05Z,2019-01-09T22:16:05Z,CLOSED,False,127,43,4,https://github.com/bfjelds,add SharedAccessSignature (in addition to existing SharedAccessKey) a…,1,[],https://github.com/Azure/azure-c-shared-utility/pull/204,https://github.com/bfjelds,3,https://github.com/Azure/azure-c-shared-utility/pull/204#issuecomment-452889537,…uthentication to module creation,closed in favor of #252,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,219,2018-10-15T17:49:24Z,2018-10-15T17:55:59Z,2018-11-20T00:26:45Z,MERGED,True,4,4,1,https://github.com/dcristoloveanu,Run int tests depending on the true run_int_tests switch,1,[],https://github.com/Azure/azure-c-shared-utility/pull/219,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/219,Run int tests depending on the true run_int_tests switch,Run int tests depending on the true run_int_tests switch,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,220,2018-10-23T21:18:43Z,2018-11-09T17:03:37Z,2018-11-09T17:03:37Z,MERGED,True,4,0,1,https://github.com/schultetwin1,Put VS2017 folders in .gitignore,1,[],https://github.com/Azure/azure-c-shared-utility/pull/220,https://github.com/schultetwin1,1,https://github.com/Azure/azure-c-shared-utility/pull/220,"When opening azure-c-shared-utility in VS2017 (using its CMake support),
VS2017 creates a couple folders.

.vs
obj folders next to .slns

This adds those folders into the .gitignore file","When opening azure-c-shared-utility in VS2017 (using its CMake support),
VS2017 creates a couple folders.

.vs
obj folders next to .slns

This adds those folders into the .gitignore file",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,220,2018-10-23T21:18:43Z,2018-11-09T17:03:37Z,2018-11-09T17:03:37Z,MERGED,True,4,0,1,https://github.com/schultetwin1,Put VS2017 folders in .gitignore,1,[],https://github.com/Azure/azure-c-shared-utility/pull/220,https://github.com/dcristoloveanu,2,https://github.com/Azure/azure-c-shared-utility/pull/220#issuecomment-436890367,"When opening azure-c-shared-utility in VS2017 (using its CMake support),
VS2017 creates a couple folders.

.vs
obj folders next to .slns

This adds those folders into the .gitignore file","Cheers for the contributions!
I am one of the admins that can merge PRs, sorry for the delay in replying. #Resolved",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,221,2018-10-31T17:55:56Z,2018-11-01T18:27:20Z,2018-11-01T18:27:20Z,MERGED,True,227,65,6,https://github.com/dcristoloveanu,Add support for flexible arrays in refcount,3,[],https://github.com/Azure/azure-c-shared-utility/pull/221,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/221,"Add support for flexible arrays in refcount:

Added .md with specs
Added an extra constructor in refcount (CREATE_WITH_EXTRA_MEMORY)
Switched ref count to be first in the generated ref count struct (otherwise would not be able to have flexible arrays in there)","Add support for flexible arrays in refcount:

Added .md with specs
Added an extra constructor in refcount (CREATE_WITH_EXTRA_MEMORY)
Switched ref count to be first in the generated ref count struct (otherwise would not be able to have flexible arrays in there)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,221,2018-10-31T17:55:56Z,2018-11-01T18:27:20Z,2018-11-01T18:27:20Z,MERGED,True,227,65,6,https://github.com/dcristoloveanu,Add support for flexible arrays in refcount,3,[],https://github.com/Azure/azure-c-shared-utility/pull/221,https://github.com/anporumb,2,https://github.com/Azure/azure-c-shared-utility/pull/221#issuecomment-434815543,"Add support for flexible arrays in refcount:

Added .md with specs
Added an extra constructor in refcount (CREATE_WITH_EXTRA_MEMORY)
Switched ref count to be first in the generated ref count struct (otherwise would not be able to have flexible arrays in there)","}pos;

for the sake of _Create_Extra_Size there should be another REF_COUNTED struct that actually have a flexible array. #Resolved

Refers to: tests/refcount_ut/some_refcount_impl.c:11 in a462ac0. [](commit_id = a462ac0, deletion_comment = False)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,221,2018-10-31T17:55:56Z,2018-11-01T18:27:20Z,2018-11-01T18:27:20Z,MERGED,True,227,65,6,https://github.com/dcristoloveanu,Add support for flexible arrays in refcount,3,[],https://github.com/Azure/azure-c-shared-utility/pull/221,https://github.com/dcristoloveanu,3,https://github.com/Azure/azure-c-shared-utility/pull/221#issuecomment-434819370,"Add support for flexible arrays in refcount:

Added .md with specs
Added an extra constructor in refcount (CREATE_WITH_EXTRA_MEMORY)
Switched ref count to be first in the generated ref count struct (otherwise would not be able to have flexible arrays in there)","}pos;

I'm just going to make this one be that. Good observation. Because otherwise simply reversing the counted_type and ref_count fields could break it and we would not know. Very good catch.

In reply to: 434815543 [](ancestors = 434815543)

Refers to: tests/refcount_ut/some_refcount_impl.c:11 in a462ac0. [](commit_id = a462ac0, deletion_comment = False)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,221,2018-10-31T17:55:56Z,2018-11-01T18:27:20Z,2018-11-01T18:27:20Z,MERGED,True,227,65,6,https://github.com/dcristoloveanu,Add support for flexible arrays in refcount,3,[],https://github.com/Azure/azure-c-shared-utility/pull/221,https://github.com/jebrando,4,https://github.com/Azure/azure-c-shared-utility/pull/221#issuecomment-434830986,"Add support for flexible arrays in refcount:

Added .md with specs
Added an extra constructor in refcount (CREATE_WITH_EXTRA_MEMORY)
Switched ref count to be first in the generated ref count struct (otherwise would not be able to have flexible arrays in there)","typedef struct pos

Is this proper form using the same name in the typedef as the structure name. #Resolved

Refers to: tests/refcount_ut/some_refcount_impl.c:8 in 8909be7. [](commit_id = 8909be7, deletion_comment = False)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,221,2018-10-31T17:55:56Z,2018-11-01T18:27:20Z,2018-11-01T18:27:20Z,MERGED,True,227,65,6,https://github.com/dcristoloveanu,Add support for flexible arrays in refcount,3,[],https://github.com/Azure/azure-c-shared-utility/pull/221,https://github.com/dcristoloveanu,5,https://github.com/Azure/azure-c-shared-utility/pull/221#issuecomment-434876261,"Add support for flexible arrays in refcount:

Added .md with specs
Added an extra constructor in refcount (CREATE_WITH_EXTRA_MEMORY)
Switched ref count to be first in the generated ref count struct (otherwise would not be able to have flexible arrays in there)","typedef struct pos

That is why I changed it ... :_).

In reply to: 434830986 [](ancestors = 434830986)

Refers to: tests/refcount_ut/some_refcount_impl.c:8 in 8909be7. [](commit_id = 8909be7, deletion_comment = False)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,222,2018-11-01T20:18:38Z,2018-11-01T20:25:50Z,2018-11-20T00:26:52Z,MERGED,True,1,1,1,https://github.com/dcristoloveanu,[0] -> [] in refcount test code,1,[],https://github.com/Azure/azure-c-shared-utility/pull/222,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/222,Update some_refcount_impl.c that is used in refcount tests to have [] instead of [0],Update some_refcount_impl.c that is used in refcount tests to have [] instead of [0],True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,223,2018-11-08T07:01:27Z,2018-11-08T19:28:41Z,2018-11-20T00:26:53Z,MERGED,True,200,120,60,https://github.com/dcristoloveanu,Change compileAs to have per target statements,3,[],https://github.com/Azure/azure-c-shared-utility/pull/223,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/223,Change compileAs to have per target statements. This is needed as we have a project that needs to be built with C11. The compileAsC99 that was forced by C shared did not allow for that so the correct way of doing this is actually having the setting per project.,Change compileAs to have per target statements. This is needed as we have a project that needs to be built with C11. The compileAsC99 that was forced by C shared did not allow for that so the correct way of doing this is actually having the setting per project.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,225,2018-11-16T01:11:00Z,2018-11-17T01:38:56Z,2018-11-17T01:38:56Z,MERGED,True,36,31,1,https://github.com/wes-b,Reordered waiting_thread_count++ and unlock so that ++ happen under t…,1,[],https://github.com/Azure/azure-c-shared-utility/pull/225,https://github.com/wes-b,1,https://github.com/Azure/azure-c-shared-utility/pull/225,"Reordered waiting_thread_count++ and unlock so that ++ happen under the lock, removed interlocked functions as all touches are now under the lock. Also fixed error checking in Condition_Init as it related to CreateEvent, which should be compared against NULL to detect a failure.
This addresses open issues 189, 195, and 196.","Reordered waiting_thread_count++ and unlock so that ++ happen under the lock, removed interlocked functions as all touches are now under the lock. Also fixed error checking in Condition_Init as it related to CreateEvent, which should be compared against NULL to detect a failure.
This addresses open issues 189, 195, and 196.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,226,2018-11-16T07:38:45Z,2018-11-17T01:47:00Z,2018-11-20T00:27:07Z,MERGED,True,1731,4,12,https://github.com/dcristoloveanu,Add constbuffer_array module,2,[],https://github.com/Azure/azure-c-shared-utility/pull/226,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/226,Add constbuffer_array module,Add constbuffer_array module,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,228,2018-11-23T15:33:08Z,2018-11-28T07:28:35Z,2018-11-28T15:54:39Z,MERGED,True,1070,290,11,https://github.com/ArthurMa1978,Add support for mbedOS5.,5,[],https://github.com/Azure/azure-c-shared-utility/pull/228,https://github.com/ArthurMa1978,1,https://github.com/Azure/azure-c-shared-utility/pull/228,This is the first pr for c utility.,This is the first pr for c utility.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,228,2018-11-23T15:33:08Z,2018-11-28T07:28:35Z,2018-11-28T15:54:39Z,MERGED,True,1070,290,11,https://github.com/ArthurMa1978,Add support for mbedOS5.,5,[],https://github.com/Azure/azure-c-shared-utility/pull/228,https://github.com/massand,2,https://github.com/Azure/azure-c-shared-utility/pull/228#issuecomment-441870825,This is the first pr for c utility.,/AzurePipelines run c-Canary,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,228,2018-11-23T15:33:08Z,2018-11-28T07:28:35Z,2018-11-28T15:54:39Z,MERGED,True,1070,290,11,https://github.com/ArthurMa1978,Add support for mbedOS5.,5,[],https://github.com/Azure/azure-c-shared-utility/pull/228,https://github.com/ArthurMa1978,3,https://github.com/Azure/azure-c-shared-utility/pull/228#issuecomment-441871720,This is the first pr for c utility.,"/AzurePipelines run c-Canary


What does this mean?",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,228,2018-11-23T15:33:08Z,2018-11-28T07:28:35Z,2018-11-28T15:54:39Z,MERGED,True,1070,290,11,https://github.com/ArthurMa1978,Add support for mbedOS5.,5,[],https://github.com/Azure/azure-c-shared-utility/pull/228,https://github.com/massand,4,https://github.com/Azure/azure-c-shared-utility/pull/228#issuecomment-441872470,This is the first pr for c utility.,"@ArthurMa1978 we use that for manual build validation kickoff. Please ignore the comment.
I am reviewing the code with @jebrando. Thanks for your PR!",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,228,2018-11-23T15:33:08Z,2018-11-28T07:28:35Z,2018-11-28T15:54:39Z,MERGED,True,1070,290,11,https://github.com/ArthurMa1978,Add support for mbedOS5.,5,[],https://github.com/Azure/azure-c-shared-utility/pull/228,https://github.com/massand,5,https://github.com/Azure/azure-c-shared-utility/pull/228#issuecomment-442251265,This is the first pr for c utility.,"For posterity, please add an mbed5 folder with corresponding filelist here - https://github.com/Azure/azure-c-shared-utility/tree/master/build_all. We are trying to start building using mbed CLI and this would be super useful for that. Did you test building with the MBED online compiler? Please paste your build steps here to ensure we can still test this with the online compiler.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,228,2018-11-23T15:33:08Z,2018-11-28T07:28:35Z,2018-11-28T15:54:39Z,MERGED,True,1070,290,11,https://github.com/ArthurMa1978,Add support for mbedOS5.,5,[],https://github.com/Azure/azure-c-shared-utility/pull/228,https://github.com/ArthurMa1978,6,https://github.com/Azure/azure-c-shared-utility/pull/228#issuecomment-442327243,This is the first pr for c utility.,"For posterity, please add an mbed5 folder with corresponding filelist here - https://github.com/Azure/azure-c-shared-utility/tree/master/build_all. We are trying to start building using mbed CLI and this would be super useful for that. Did you test building with the MBED online compiler? Please paste your build steps here to ensure we can still test this with the online compiler.

will do it later, here is the repo https://github.com/VSChina/devkit-mbedos5-getstarted for build and test",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,228,2018-11-23T15:33:08Z,2018-11-28T07:28:35Z,2018-11-28T15:54:39Z,MERGED,True,1070,290,11,https://github.com/ArthurMa1978,Add support for mbedOS5.,5,[],https://github.com/Azure/azure-c-shared-utility/pull/228,https://github.com/massand,7,https://github.com/Azure/azure-c-shared-utility/pull/228#issuecomment-442345870,This is the first pr for c utility.,/AzurePipelines run c-canary,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,228,2018-11-23T15:33:08Z,2018-11-28T07:28:35Z,2018-11-28T15:54:39Z,MERGED,True,1070,290,11,https://github.com/ArthurMa1978,Add support for mbedOS5.,5,[],https://github.com/Azure/azure-c-shared-utility/pull/228,https://github.com/ArthurMa1978,8,https://github.com/Azure/azure-c-shared-utility/pull/228#issuecomment-442358625,This is the first pr for c utility.,"Thanks @massand , will you update the submodule in https://github.com/Azure/azure-iot-sdk-c ? or I do the pr?",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,228,2018-11-23T15:33:08Z,2018-11-28T07:28:35Z,2018-11-28T15:54:39Z,MERGED,True,1070,290,11,https://github.com/ArthurMa1978,Add support for mbedOS5.,5,[],https://github.com/Azure/azure-c-shared-utility/pull/228,https://github.com/massand,9,https://github.com/Azure/azure-c-shared-utility/pull/228#issuecomment-442497819,This is the first pr for c utility.,We can help there. You can checkout the master within c-utility submodule locally for now and submit a PR (without the submodule update).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,230,2018-11-27T20:41:11Z,2018-11-27T23:46:55Z,2018-11-29T03:34:13Z,MERGED,True,283,17,4,https://github.com/dcristoloveanu,Add constbuffer_array_get_all_buffers_size to const buffer array,1,[],https://github.com/Azure/azure-c-shared-utility/pull/230,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/230,Add constbuffer_array_get_all_buffers_size to const buffer array,Add constbuffer_array_get_all_buffers_size to const buffer array,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,231,2018-11-28T00:19:49Z,2018-11-28T17:37:16Z,2018-11-28T17:41:12Z,MERGED,True,25,46,2,https://github.com/jebrando,Update token_string to fixed possible memory leak in failure case,4,[],https://github.com/Azure/azure-c-shared-utility/pull/231,https://github.com/jebrando,1,https://github.com/Azure/azure-c-shared-utility/pull/231,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,232,2018-11-28T02:23:17Z,2018-11-29T02:47:38Z,2018-11-29T02:52:10Z,CLOSED,False,280,56,5,https://github.com/damonbarry,Support UNIX domain sockets in Windows RS5,1,[],https://github.com/Azure/azure-c-shared-utility/pull/232,https://github.com/damonbarry,1,https://github.com/Azure/azure-c-shared-utility/pull/232,"Windows supports UNIX domain sockets, but only on RS5 or later. So this change includes logic in CMakeLists.txt which adds the compiler definition AF_UNIX_ON_WINDOWS when building on RS5 or later. It also makes the Winsock2 adapter for socketio look a lot more like the Berkeley adapter, including support for the ADDRESS_TYPE option in socketio_setoption.","Windows supports UNIX domain sockets, but only on RS5 or later. So this change includes logic in CMakeLists.txt which adds the compiler definition AF_UNIX_ON_WINDOWS when building on RS5 or later. It also makes the Winsock2 adapter for socketio look a lot more like the Berkeley adapter, including support for the ADDRESS_TYPE option in socketio_setoption.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,232,2018-11-28T02:23:17Z,2018-11-29T02:47:38Z,2018-11-29T02:52:10Z,CLOSED,False,280,56,5,https://github.com/damonbarry,Support UNIX domain sockets in Windows RS5,1,[],https://github.com/Azure/azure-c-shared-utility/pull/232,https://github.com/damonbarry,2,https://github.com/Azure/azure-c-shared-utility/pull/232#issuecomment-442686429,"Windows supports UNIX domain sockets, but only on RS5 or later. So this change includes logic in CMakeLists.txt which adds the compiler definition AF_UNIX_ON_WINDOWS when building on RS5 or later. It also makes the Winsock2 adapter for socketio look a lot more like the Berkeley adapter, including support for the ADDRESS_TYPE option in socketio_setoption.","I opened this PR against my fork, but the build system needs a branch on the main repo. I opened #234; closing this one.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,233,2018-11-28T23:45:45Z,2018-11-29T03:33:49Z,2018-11-29T03:33:57Z,MERGED,True,258,44,6,https://github.com/dcristoloveanu,Add CONSTBUFFER_CreateWithMoveMemory API in CONSTBUFFER,1,[],https://github.com/Azure/azure-c-shared-utility/pull/233,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/233,Add CONSTBUFFER_CreateWithMoveMemory API in CONSTBUFFER,Add CONSTBUFFER_CreateWithMoveMemory API in CONSTBUFFER,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,234,2018-11-29T02:46:30Z,2018-11-30T23:30:06Z,2018-12-21T22:21:31Z,MERGED,True,295,56,5,https://github.com/damonbarry,Support UNIX domain sockets in Windows RS5,5,[],https://github.com/Azure/azure-c-shared-utility/pull/234,https://github.com/damonbarry,1,https://github.com/Azure/azure-c-shared-utility/pull/234,"Windows supports UNIX domain sockets, but only on RS5 or later. So this change includes logic in CMakeLists.txt which adds the compiler definition AF_UNIX_ON_WINDOWS when building on RS5 or later. It also makes the Winsock2 adapter for socketio look a lot more like the Berkeley adapter, including support for the ADDRESS_TYPE option in socketio_setoption.","Windows supports UNIX domain sockets, but only on RS5 or later. So this change includes logic in CMakeLists.txt which adds the compiler definition AF_UNIX_ON_WINDOWS when building on RS5 or later. It also makes the Winsock2 adapter for socketio look a lot more like the Berkeley adapter, including support for the ADDRESS_TYPE option in socketio_setoption.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,234,2018-11-29T02:46:30Z,2018-11-30T23:30:06Z,2018-12-21T22:21:31Z,MERGED,True,295,56,5,https://github.com/damonbarry,Support UNIX domain sockets in Windows RS5,5,[],https://github.com/Azure/azure-c-shared-utility/pull/234,https://github.com/damonbarry,2,https://github.com/Azure/azure-c-shared-utility/pull/234#issuecomment-443061068,"Windows supports UNIX domain sockets, but only on RS5 or later. So this change includes logic in CMakeLists.txt which adds the compiler definition AF_UNIX_ON_WINDOWS when building on RS5 or later. It also makes the Winsock2 adapter for socketio look a lot more like the Berkeley adapter, including support for the ADDRESS_TYPE option in socketio_setoption.",@jspaith I moved the parsing logic into socketio_win32 as discussed. Please review...,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,235,2018-11-29T03:50:43Z,2018-11-29T21:18:02Z,2019-01-31T22:26:51Z,MERGED,True,2,0,1,https://github.com/dcristoloveanu,Minor .md update missed on the previous update of CONSTBUFFER,1,[],https://github.com/Azure/azure-c-shared-utility/pull/235,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/235,Minor .md update missed on the previous update of CONSTBUFFER,Minor .md update missed on the previous update of CONSTBUFFER,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,236,2018-11-30T18:29:08Z,2018-12-03T19:44:50Z,2018-12-03T19:48:01Z,MERGED,True,625,152,7,https://github.com/jebrando,Adding unittests for the sha224 module,6,[],https://github.com/Azure/azure-c-shared-utility/pull/236,https://github.com/jebrando,1,https://github.com/Azure/azure-c-shared-utility/pull/236,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,237,2018-12-03T22:22:18Z,2018-12-03T23:15:20Z,2019-07-04T04:06:13Z,MERGED,True,19,13,5,https://github.com/bikamani,Tsa defects for c-utility,7,[],https://github.com/Azure/azure-c-shared-utility/pull/237,https://github.com/bikamani,1,https://github.com/Azure/azure-c-shared-utility/pull/237,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,238,2018-12-05T05:41:03Z,2018-12-06T20:59:26Z,2018-12-06T20:59:57Z,MERGED,True,147,6,5,https://github.com/jebrando,Adding a Buffer create with size function for mqtt,5,[],https://github.com/Azure/azure-c-shared-utility/pull/238,https://github.com/jebrando,1,https://github.com/Azure/azure-c-shared-utility/pull/238,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,238,2018-12-05T05:41:03Z,2018-12-06T20:59:26Z,2018-12-06T20:59:57Z,MERGED,True,147,6,5,https://github.com/jebrando,Adding a Buffer create with size function for mqtt,5,[],https://github.com/Azure/azure-c-shared-utility/pull/238,https://github.com/dcristoloveanu,2,https://github.com/Azure/azure-c-shared-utility/pull/238#issuecomment-444617227,,"Waiting for specs, otherwise looks OK.
We could think that one could obtain the same by creating an empty buffer and then enlarging, but I am with you, I like having to call only one API, makes things easier. #Closed",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,238,2018-12-05T05:41:03Z,2018-12-06T20:59:26Z,2018-12-06T20:59:57Z,MERGED,True,147,6,5,https://github.com/jebrando,Adding a Buffer create with size function for mqtt,5,[],https://github.com/Azure/azure-c-shared-utility/pull/238,https://github.com/dcristoloveanu,3,https://github.com/Azure/azure-c-shared-utility/pull/238#issuecomment-444742093,,"Thanks for adding the specs.

In reply to: 444617227 [](ancestors = 444617227)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,239,2018-12-06T06:50:43Z,2018-12-07T05:25:04Z,2019-01-31T22:26:51Z,MERGED,True,4,4,2,https://github.com/dcristoloveanu,Minor typo fix occurrs->occurs,2,[],https://github.com/Azure/azure-c-shared-utility/pull/239,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/239,Minor typo fix occurrs->occurs,Minor typo fix occurrs->occurs,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,240,2018-12-07T05:55:23Z,2018-12-07T06:28:43Z,2019-01-31T22:26:50Z,MERGED,True,140,4,4,https://github.com/dcristoloveanu,Add constbuffer_array_get_buffer_content API,1,[],https://github.com/Azure/azure-c-shared-utility/pull/240,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/240,Add constbuffer_array_get_buffer_content API,Add constbuffer_array_get_buffer_content API,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,241,2018-12-07T18:46:01Z,2018-12-08T03:36:58Z,2019-01-31T22:26:49Z,MERGED,True,50,136,46,https://github.com/dcristoloveanu,Simplify umock_c_error ASSERT,1,[],https://github.com/Azure/azure-c-shared-utility/pull/241,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/241,Simplify umock_c_error ASSERT by removing the snprintf as ASSERT_FAIL can handle it now,Simplify umock_c_error ASSERT by removing the snprintf as ASSERT_FAIL can handle it now,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,242,2018-12-07T23:33:09Z,2018-12-11T18:54:31Z,2018-12-11T18:55:10Z,MERGED,True,1655,579,12,https://github.com/jspaith,Windows verify trusted cert,25,[],https://github.com/Azure/azure-c-shared-utility/pull/242,https://github.com/jspaith,1,https://github.com/Azure/azure-c-shared-utility/pull/242,"Let Windows handle Trusted PEM's, analogous to openssl/curl.","Let Windows handle Trusted PEM's, analogous to openssl/curl.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,242,2018-12-07T23:33:09Z,2018-12-11T18:54:31Z,2018-12-11T18:55:10Z,MERGED,True,1655,579,12,https://github.com/jspaith,Windows verify trusted cert,25,[],https://github.com/Azure/azure-c-shared-utility/pull/242,https://github.com/massand,2,https://github.com/Azure/azure-c-shared-utility/pull/242#issuecomment-445418192,"Let Windows handle Trusted PEM's, analogous to openssl/curl.",/AzurePipelines run C-canary,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,243,2018-12-17T17:39:22Z,2018-12-17T17:50:30Z,2019-01-31T22:26:48Z,MERGED,True,1295,1295,37,https://github.com/dcristoloveanu,Remove backticks from .c and .h files,1,[],https://github.com/Azure/azure-c-shared-utility/pull/243,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/243,Remove backticks from .c and .h files,Remove backticks from .c and .h files,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,244,2018-12-17T18:20:08Z,2018-12-20T21:40:05Z,2019-01-31T22:26:46Z,MERGED,True,1,1,1,https://github.com/dcristoloveanu,Use latest umock_c,1,[],https://github.com/Azure/azure-c-shared-utility/pull/244,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/244,Use latest umock_c,Use latest umock_c,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,245,2018-12-17T18:38:41Z,2018-12-17T19:05:00Z,2018-12-17T19:05:05Z,CLOSED,False,213,0,2,https://github.com/amar-sagare,Add header and specs for constbuffer_array_array,1,[],https://github.com/Azure/azure-c-shared-utility/pull/245,https://github.com/amar-sagare,1,https://github.com/Azure/azure-c-shared-utility/pull/245,Headers and Specs,Headers and Specs,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,245,2018-12-17T18:38:41Z,2018-12-17T19:05:00Z,2018-12-17T19:05:05Z,CLOSED,False,213,0,2,https://github.com/amar-sagare,Add header and specs for constbuffer_array_array,1,[],https://github.com/Azure/azure-c-shared-utility/pull/245,https://github.com/msftclas,2,https://github.com/Azure/azure-c-shared-utility/pull/245#issuecomment-447952031,Headers and Specs,All CLA requirements met.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,246,2018-12-20T21:38:11Z,2018-12-24T00:24:45Z,2019-01-31T22:26:41Z,MERGED,True,313,14,6,https://github.com/dcristoloveanu,Add ConstBuffer_CreateWithCustomFree,2,[],https://github.com/Azure/azure-c-shared-utility/pull/246,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/246,Add ConstBuffer_CreateWithCustomFree,Add ConstBuffer_CreateWithCustomFree,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,247,2018-12-21T15:50:09Z,2021-11-05T02:37:30Z,2021-11-05T02:37:31Z,CLOSED,False,5,1,1,https://github.com/chlandsi,fix setting ssl property for iOS 10.x on iPhone 5,2,[],https://github.com/Azure/azure-c-shared-utility/pull/247,https://github.com/chlandsi,1,https://github.com/Azure/azure-c-shared-utility/pull/247,"Fix arguments according to https://developer.apple.com/documentation/cfnetwork/kcfstreampropertysslsettings?language=objc.
Original code resulted in an EXC_ARITHMETIC (code=EXC_I386_DIV, subcode=0x0) error from the CFReadStreamSetProperty call on iOS 10.x simulator.
This might fix #229.","Fix arguments according to https://developer.apple.com/documentation/cfnetwork/kcfstreampropertysslsettings?language=objc.
Original code resulted in an EXC_ARITHMETIC (code=EXC_I386_DIV, subcode=0x0) error from the CFReadStreamSetProperty call on iOS 10.x simulator.
This might fix #229.",True,{'THUMBS_UP': ['https://github.com/YoDaMa']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,247,2018-12-21T15:50:09Z,2021-11-05T02:37:30Z,2021-11-05T02:37:31Z,CLOSED,False,5,1,1,https://github.com/chlandsi,fix setting ssl property for iOS 10.x on iPhone 5,2,[],https://github.com/Azure/azure-c-shared-utility/pull/247,https://github.com/dnsmirnoff,2,https://github.com/Azure/azure-c-shared-utility/pull/247#issuecomment-482554654,"Fix arguments according to https://developer.apple.com/documentation/cfnetwork/kcfstreampropertysslsettings?language=objc.
Original code resulted in an EXC_ARITHMETIC (code=EXC_I386_DIV, subcode=0x0) error from the CFReadStreamSetProperty call on iOS 10.x simulator.
This might fix #229.",This PR fixes #229. I've tested it on iPhone 5c with iOS 10.3.3,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,247,2018-12-21T15:50:09Z,2021-11-05T02:37:30Z,2021-11-05T02:37:31Z,CLOSED,False,5,1,1,https://github.com/chlandsi,fix setting ssl property for iOS 10.x on iPhone 5,2,[],https://github.com/Azure/azure-c-shared-utility/pull/247,https://github.com/YoDaMa,3,https://github.com/Azure/azure-c-shared-utility/pull/247#issuecomment-483876472,"Fix arguments according to https://developer.apple.com/documentation/cfnetwork/kcfstreampropertysslsettings?language=objc.
Original code resulted in an EXC_ARITHMETIC (code=EXC_I386_DIV, subcode=0x0) error from the CFReadStreamSetProperty call on iOS 10.x simulator.
This might fix #229.",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,247,2018-12-21T15:50:09Z,2021-11-05T02:37:30Z,2021-11-05T02:37:31Z,CLOSED,False,5,1,1,https://github.com/chlandsi,fix setting ssl property for iOS 10.x on iPhone 5,2,[],https://github.com/Azure/azure-c-shared-utility/pull/247,https://github.com/apps/azure-pipelines,4,https://github.com/Azure/azure-c-shared-utility/pull/247#issuecomment-483876501,"Fix arguments according to https://developer.apple.com/documentation/cfnetwork/kcfstreampropertysslsettings?language=objc.
Original code resulted in an EXC_ARITHMETIC (code=EXC_I386_DIV, subcode=0x0) error from the CFReadStreamSetProperty call on iOS 10.x simulator.
This might fix #229.","For the Azure DevOps organization joantone, no matching pipelines using the Azure Pipelines app were found for this pull request.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,247,2018-12-21T15:50:09Z,2021-11-05T02:37:30Z,2021-11-05T02:37:31Z,CLOSED,False,5,1,1,https://github.com/chlandsi,fix setting ssl property for iOS 10.x on iPhone 5,2,[],https://github.com/Azure/azure-c-shared-utility/pull/247,https://github.com/danewalton,5,https://github.com/Azure/azure-c-shared-utility/pull/247#issuecomment-961582584,"Fix arguments according to https://developer.apple.com/documentation/cfnetwork/kcfstreampropertysslsettings?language=objc.
Original code resulted in an EXC_ARITHMETIC (code=EXC_I386_DIV, subcode=0x0) error from the CFReadStreamSetProperty call on iOS 10.x simulator.
This might fix #229.","Hi @chlandsi this section of the code has been updated integrating a lot of your suggestions. Please see the code below and let us know if that fixes the issue. For now I'm going to close this since many of the changes are already merged.

  
    
      azure-c-shared-utility/pal/ios-osx/tlsio_appleios.c
    
    
        Lines 529 to 538
      in
      2d74785
    
  
  
    

        
          
           CFStringRef keys[1] = {kCFStreamPropertySocketSecurityLevel}; 
        

        
          
           CFStringRef values[1] = {kCFStreamSocketSecurityLevelNegotiatedSSL}; 
        

        
          
            
        

        
          
           CFDictionaryRef tls_io_dictionary = CFDictionaryCreate(NULL , (void *)keys , (void *)values , 1,  NULL , NULL); 
        

        
          
            
        

        
          
           if (CFReadStreamSetProperty(tls_io_instance->sockRead, kCFStreamPropertySSLSettings, tls_io_dictionary)) 
        

        
          
            
        

        
          
           { 
        

        
          
               tls_io_instance->tlsio_state = TLSIO_STATE_OPENING_WAITING_SSL; 
        

        
          
           }",True,{'THUMBS_UP': ['https://github.com/chlandsi']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,248,2019-01-02T20:49:32Z,2019-01-04T00:46:45Z,2019-03-07T18:20:46Z,MERGED,True,937,9,4,https://github.com/mattdurak,Add constbuffer_array_create_from_array_array,6,[],https://github.com/Azure/azure-c-shared-utility/pull/248,https://github.com/mattdurak,1,https://github.com/Azure/azure-c-shared-utility/pull/248,constbuffer_array_append takes two constbuffer_array_handles and creates a new constbuffer_array_handle with the contents of the first followed by the contents of the second.,constbuffer_array_append takes two constbuffer_array_handles and creates a new constbuffer_array_handle with the contents of the first followed by the contents of the second.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,248,2019-01-02T20:49:32Z,2019-01-04T00:46:45Z,2019-03-07T18:20:46Z,MERGED,True,937,9,4,https://github.com/mattdurak,Add constbuffer_array_create_from_array_array,6,[],https://github.com/Azure/azure-c-shared-utility/pull/248,https://github.com/mattdurak,2,https://github.com/Azure/azure-c-shared-utility/pull/248#issuecomment-450981201,constbuffer_array_append takes two constbuffer_array_handles and creates a new constbuffer_array_handle with the contents of the first followed by the contents of the second.,@dcristoloveanu  #Closed,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,249,2019-01-04T05:06:13Z,2019-01-07T21:59:24Z,2019-01-31T22:26:38Z,MERGED,True,4,4,1,https://github.com/dcristoloveanu,Make gballoc_XXX mockable in gballoc.h,2,[],https://github.com/Azure/azure-c-shared-utility/pull/249,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/249,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,250,2019-01-04T16:09:13Z,2019-01-04T17:06:27Z,2019-01-04T17:06:27Z,MERGED,True,1,1,1,https://github.com/anporumb,remove \r\n,1,[],https://github.com/Azure/azure-c-shared-utility/pull/250,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/250,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,252,2019-01-07T22:06:41Z,2019-01-24T22:09:24Z,2019-01-24T22:09:24Z,MERGED,True,72,7,3,https://github.com/bfjelds,add sas support without changing APIs,1,[],https://github.com/Azure/azure-c-shared-utility/pull/252,https://github.com/bfjelds,1,https://github.com/Azure/azure-c-shared-utility/pull/252,"Currently, only SharedAccessKey access is enabled through the c SDK.  This attempts to add SharedAccessSignature support without changing any APIs (and trying not to break any backward compat).","Currently, only SharedAccessKey access is enabled through the c SDK.  This attempts to add SharedAccessSignature support without changing any APIs (and trying not to break any backward compat).",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,252,2019-01-07T22:06:41Z,2019-01-24T22:09:24Z,2019-01-24T22:09:24Z,MERGED,True,72,7,3,https://github.com/bfjelds,add sas support without changing APIs,1,[],https://github.com/Azure/azure-c-shared-utility/pull/252,https://github.com/bfjelds,2,https://github.com/Azure/azure-c-shared-utility/pull/252#issuecomment-452922983,"Currently, only SharedAccessKey access is enabled through the c SDK.  This attempts to add SharedAccessSignature support without changing any APIs (and trying not to break any backward compat).",supports this change: Azure/azure-iot-sdk-c#800,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,252,2019-01-07T22:06:41Z,2019-01-24T22:09:24Z,2019-01-24T22:09:24Z,MERGED,True,72,7,3,https://github.com/bfjelds,add sas support without changing APIs,1,[],https://github.com/Azure/azure-c-shared-utility/pull/252,https://github.com/massand,3,https://github.com/Azure/azure-c-shared-utility/pull/252#issuecomment-456632854,"Currently, only SharedAccessKey access is enabled through the c SDK.  This attempts to add SharedAccessSignature support without changing any APIs (and trying not to break any backward compat).",/AzurePipelines run c-canary,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,252,2019-01-07T22:06:41Z,2019-01-24T22:09:24Z,2019-01-24T22:09:24Z,MERGED,True,72,7,3,https://github.com/bfjelds,add sas support without changing APIs,1,[],https://github.com/Azure/azure-c-shared-utility/pull/252,https://github.com/massand,4,https://github.com/Azure/azure-c-shared-utility/pull/252#issuecomment-456895909,"Currently, only SharedAccessKey access is enabled through the c SDK.  This attempts to add SharedAccessSignature support without changing any APIs (and trying not to break any backward compat).",/AzurePipelines run c-canary,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,252,2019-01-07T22:06:41Z,2019-01-24T22:09:24Z,2019-01-24T22:09:24Z,MERGED,True,72,7,3,https://github.com/bfjelds,add sas support without changing APIs,1,[],https://github.com/Azure/azure-c-shared-utility/pull/252,https://github.com/massand,5,https://github.com/Azure/azure-c-shared-utility/pull/252#issuecomment-457305505,"Currently, only SharedAccessKey access is enabled through the c SDK.  This attempts to add SharedAccessSignature support without changing any APIs (and trying not to break any backward compat).",/AzurePipelines run c-canary,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,253,2019-01-12T01:06:09Z,2019-01-12T01:16:31Z,2019-03-07T18:20:50Z,MERGED,True,7,1,1,https://github.com/mattdurak,Add UUID_FORMAT_VALUES_OR_NULL to print UUID_T's that may be NULL,1,[],https://github.com/Azure/azure-c-shared-utility/pull/253,https://github.com/mattdurak,1,https://github.com/Azure/azure-c-shared-utility/pull/253,"Allows code like this:
int foo(const UUID_T uuid, void* bar)
{
    if (uuid == NULL || bar == NULL)
    {
        Log(""Invalid args: uuid=%"" PRI_UUID "", bar=%p"", UUID_FORMAT_VALUES_OR_NULL(uuid), bar);
        return -1;
    }
    return 0;
}

NULL UUID_T is printed as ""0000-00-00-00-000000""","Allows code like this:
int foo(const UUID_T uuid, void* bar)
{
    if (uuid == NULL || bar == NULL)
    {
        Log(""Invalid args: uuid=%"" PRI_UUID "", bar=%p"", UUID_FORMAT_VALUES_OR_NULL(uuid), bar);
        return -1;
    }
    return 0;
}

NULL UUID_T is printed as ""0000-00-00-00-000000""",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,254,2019-01-14T17:20:58Z,2019-01-14T17:27:16Z,2019-01-14T17:27:33Z,MERGED,True,6,6,3,https://github.com/jebrando,Replace %zu with %lu for mbed builds,1,[],https://github.com/Azure/azure-c-shared-utility/pull/254,https://github.com/jebrando,1,https://github.com/Azure/azure-c-shared-utility/pull/254,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,255,2019-01-14T17:33:58Z,2019-01-14T21:16:56Z,2019-01-14T21:16:56Z,MERGED,True,0,4,3,https://github.com/anporumb,remove extraneous #else,2,[],https://github.com/Azure/azure-c-shared-utility/pull/255,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/255,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,255,2019-01-14T17:33:58Z,2019-01-14T21:16:56Z,2019-01-14T21:16:56Z,MERGED,True,0,4,3,https://github.com/anporumb,remove extraneous #else,2,[],https://github.com/Azure/azure-c-shared-utility/pull/255,https://github.com/massand,2,https://github.com/Azure/azure-c-shared-utility/pull/255#issuecomment-454159121,,/AzurePipelines run all,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,256,2019-01-14T18:35:18Z,2019-01-14T19:00:44Z,2019-03-07T18:20:51Z,MERGED,True,4,4,1,https://github.com/mattdurak,Fix UUID_FORMAT_VALUES_OR_NULL to wrap uuid in parentheses,1,[],https://github.com/Azure/azure-c-shared-utility/pull/256,https://github.com/mattdurak,1,https://github.com/Azure/azure-c-shared-utility/pull/256,"Small cleanup to wrap ""uuid"" in parentheses for all of the NULL checks in UUID_FORMAT_VALUES_OR_NULL","Small cleanup to wrap ""uuid"" in parentheses for all of the NULL checks in UUID_FORMAT_VALUES_OR_NULL",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,257,2019-01-14T19:53:21Z,2021-11-03T21:45:51Z,2021-11-05T21:25:59Z,CLOSED,False,272,142,1,https://github.com/ukluk,Clone and Retrieve for OPTION_X509_ECC_KEY and OPTION_X509_ECC_CERT,2,[],https://github.com/Azure/azure-c-shared-utility/pull/257,https://github.com/ukluk,1,https://github.com/Azure/azure-c-shared-utility/pull/257,"The iothub client failed to connect to IoTHub when using mbed after provisioning client, because tlsio_mbed adapter did not implement clone and retrieve OPTION_X509_ECC_CERT and OPTION_X509_ECC_KEY","The iothub client failed to connect to IoTHub when using mbed after provisioning client, because tlsio_mbed adapter did not implement clone and retrieve OPTION_X509_ECC_CERT and OPTION_X509_ECC_KEY",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,257,2019-01-14T19:53:21Z,2021-11-03T21:45:51Z,2021-11-05T21:25:59Z,CLOSED,False,272,142,1,https://github.com/ukluk,Clone and Retrieve for OPTION_X509_ECC_KEY and OPTION_X509_ECC_CERT,2,[],https://github.com/Azure/azure-c-shared-utility/pull/257,https://github.com/momuno,2,https://github.com/Azure/azure-c-shared-utility/pull/257#issuecomment-960148721,"The iothub client failed to connect to IoTHub when using mbed after provisioning client, because tlsio_mbed adapter did not implement clone and retrieve OPTION_X509_ECC_CERT and OPTION_X509_ECC_KEY",Hi @ukluk.  I apologize for the very late reply.  It looks like the issue you are addressing via this PR was resolved in February 2019 - #264.  Thank you for finding this implementation gap and for your contribution to the C SDK!,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,257,2019-01-14T19:53:21Z,2021-11-03T21:45:51Z,2021-11-05T21:25:59Z,CLOSED,False,272,142,1,https://github.com/ukluk,Clone and Retrieve for OPTION_X509_ECC_KEY and OPTION_X509_ECC_CERT,2,[],https://github.com/Azure/azure-c-shared-utility/pull/257,https://github.com/uriel-kluk,3,https://github.com/Azure/azure-c-shared-utility/pull/257#issuecomment-962230956,"The iothub client failed to connect to IoTHub when using mbed after provisioning client, because tlsio_mbed adapter did not implement clone and retrieve OPTION_X509_ECC_CERT and OPTION_X509_ECC_KEY",Thanks for addressing and for letting me know!,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,258,2019-01-16T14:08:25Z,2019-02-22T17:31:49Z,2019-02-22T17:31:49Z,MERGED,True,1,1,1,https://github.com/koalo,Avoid syntax error if CMAKE_SYSTEM_VERSION is not defined (fixes #251),2,[],https://github.com/Azure/azure-c-shared-utility/pull/258,https://github.com/koalo,1,https://github.com/Azure/azure-c-shared-utility/pull/258,"In some cross-compilation environments, CMAKE_SYSTEM_VERSION is not
defined. Without, the expression itself is invalid. After the change,
the expression is valid and will result in false as expected.","In some cross-compilation environments, CMAKE_SYSTEM_VERSION is not
defined. Without, the expression itself is invalid. After the change,
the expression is valid and will result in false as expected.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,259,2019-01-17T06:00:52Z,2019-01-18T18:35:42Z,2019-01-31T22:26:28Z,MERGED,True,1088,0,8,https://github.com/dcristoloveanu,Move memory_data to C shared utility,1,[],https://github.com/Azure/azure-c-shared-utility/pull/259,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/259,Move memory_data to C shared utility,Move memory_data to C shared utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,260,2019-01-18T08:28:56Z,2019-01-30T06:08:48Z,2019-01-30T06:08:48Z,MERGED,True,39,39,20,https://github.com/ArthurMa1978,MOD: %zu->%lu to mbed-related files,2,[],https://github.com/Azure/azure-c-shared-utility/pull/260,https://github.com/ArthurMa1978,1,https://github.com/Azure/azure-c-shared-utility/pull/260,"As %zu cannot be shown correctly on mbed os5, I modified %zu to %lu in some mbed-os5-related files.
This is a Re-PR of #182","As %zu cannot be shown correctly on mbed os5, I modified %zu to %lu in some mbed-os5-related files.
This is a Re-PR of #182",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,260,2019-01-18T08:28:56Z,2019-01-30T06:08:48Z,2019-01-30T06:08:48Z,MERGED,True,39,39,20,https://github.com/ArthurMa1978,MOD: %zu->%lu to mbed-related files,2,[],https://github.com/Azure/azure-c-shared-utility/pull/260,https://github.com/ArthurMa1978,2,https://github.com/Azure/azure-c-shared-utility/pull/260#issuecomment-455466626,"As %zu cannot be shown correctly on mbed os5, I modified %zu to %lu in some mbed-os5-related files.
This is a Re-PR of #182",Compare the old one the change is explicitly casting to (unsigned long) according to the comment,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,260,2019-01-18T08:28:56Z,2019-01-30T06:08:48Z,2019-01-30T06:08:48Z,MERGED,True,39,39,20,https://github.com/ArthurMa1978,MOD: %zu->%lu to mbed-related files,2,[],https://github.com/Azure/azure-c-shared-utility/pull/260,https://github.com/massand,3,https://github.com/Azure/azure-c-shared-utility/pull/260#issuecomment-458820032,"As %zu cannot be shown correctly on mbed os5, I modified %zu to %lu in some mbed-os5-related files.
This is a Re-PR of #182",/AzurePipelines run all,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,261,2019-01-23T23:05:55Z,2019-01-24T18:28:57Z,2019-01-24T18:29:04Z,CLOSED,False,2,0,1,https://github.com/YoDaMa,add convenience layer do work frequency option,1,[],https://github.com/Azure/azure-c-shared-utility/pull/261,https://github.com/YoDaMa,1,https://github.com/Azure/azure-c-shared-utility/pull/261,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,262,2019-01-25T06:35:22Z,2019-01-30T07:14:09Z,2019-01-31T22:26:24Z,MERGED,True,203,627,10,https://github.com/dcristoloveanu,Change constbuffer from CLONE to INC_REF/DEC_REF,2,[],https://github.com/Azure/azure-c-shared-utility/pull/262,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/262,"Change constbuffer from CLONE to INC_REF/DEC_REF.
The motivation is that CONSTBUFFER does not allocate new resources for a clone, but in fact by the module contract does an inc_ref. And thus it is lighter on the user module to have an inc_ref/dec_ref API (less error checking and there is no need to treat the result as a potentially completely different handle.","Change constbuffer from CLONE to INC_REF/DEC_REF.
The motivation is that CONSTBUFFER does not allocate new resources for a clone, but in fact by the module contract does an inc_ref. And thus it is lighter on the user module to have an inc_ref/dec_ref API (less error checking and there is no need to treat the result as a potentially completely different handle.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,262,2019-01-25T06:35:22Z,2019-01-30T07:14:09Z,2019-01-31T22:26:24Z,MERGED,True,203,627,10,https://github.com/dcristoloveanu,Change constbuffer from CLONE to INC_REF/DEC_REF,2,[],https://github.com/Azure/azure-c-shared-utility/pull/262,https://github.com/dcristoloveanu,2,https://github.com/Azure/azure-c-shared-utility/pull/262#issuecomment-457781098,"Change constbuffer from CLONE to INC_REF/DEC_REF.
The motivation is that CONSTBUFFER does not allocate new resources for a clone, but in fact by the module contract does an inc_ref. And thus it is lighter on the user module to have an inc_ref/dec_ref API (less error checking and there is no need to treat the result as a potentially completely different handle.","Hi Ewerton, just writing down my thoughts so we can discuss on Monday in person.
Regarding changes to depending modules: IoT SDK for C which I assume you are concerned about has exactly 1 usage of this. If you wish I can make the change for you so you do not need to bother about it.
As for whether it makes sense or not from a design point of view:
IncRef/DecRef explictly state that a new handle is not created. IncRef will not fail if the handle is non-NULL and thus the user code that calls IncRef does not need to check for any errors. It is lighter weight on the user code.
Clone generally implies that a new handle is created (a new entity is created that perfectly mirrors the original). Because this is a const object Clone does not create a new handle and uses internally ref count. But the user code of Clone cannot know that and has to assume that maybe the clone result handle is different and also has to check for success. This is heavier on the user code of Clone.
Looking forward to the discussion on Monday.
Cheers,
/Dan",True,{'THUMBS_UP': ['https://github.com/ewertons']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,264,2019-02-06T22:01:21Z,2019-02-07T18:59:47Z,2019-02-07T18:59:53Z,MERGED,True,363,22,2,https://github.com/jebrando,Fixing mbedtls to include more options,5,[],https://github.com/Azure/azure-c-shared-utility/pull/264,https://github.com/jebrando,1,https://github.com/Azure/azure-c-shared-utility/pull/264,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,264,2019-02-06T22:01:21Z,2019-02-07T18:59:47Z,2019-02-07T18:59:53Z,MERGED,True,363,22,2,https://github.com/jebrando,Fixing mbedtls to include more options,5,[],https://github.com/Azure/azure-c-shared-utility/pull/264,https://github.com/massand,2,https://github.com/Azure/azure-c-shared-utility/pull/264#issuecomment-461241988,,"int tlsio_mbedtls_setoption(CONCRETE_IO_HANDLE tls_io, const char *optionName, const void *value)

Recently, there was a bug where they reported a missing option. Please add that here too - #263
#Resolved

Refers to: adapters/tlsio_mbedtls.c:791 in 540d68c. [](commit_id = 540d68c, deletion_comment = False)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,264,2019-02-06T22:01:21Z,2019-02-07T18:59:47Z,2019-02-07T18:59:53Z,MERGED,True,363,22,2,https://github.com/jebrando,Fixing mbedtls to include more options,5,[],https://github.com/Azure/azure-c-shared-utility/pull/264,https://github.com/massand,3,https://github.com/Azure/azure-c-shared-utility/pull/264#issuecomment-461242559,,"int tlsio_mbedtls_setoption(CONCRETE_IO_HANDLE tls_io, const char *optionName, const void *value)

On second thought - I have a question. Is there any socket_io implementations, that doesn't handle the OPTION_UNDERLYING_IO_OPTIONS. All underlying_io_options are handled by socket_io, right?

In reply to: 461241988 [](ancestors = 461241988)

Refers to: adapters/tlsio_mbedtls.c:791 in 540d68c. [](commit_id = 540d68c, deletion_comment = False)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,265,2019-02-07T21:26:01Z,2019-02-07T21:50:34Z,2019-02-07T21:51:13Z,MERGED,True,115,0,4,https://github.com/dcristoloveanu,Add constbuffer_array_get_const_buffer_handle_array,1,[],https://github.com/Azure/azure-c-shared-utility/pull/265,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/265,Add constbuffer_array_get_const_buffer_handle_array to const buffer array,Add constbuffer_array_get_const_buffer_handle_array to const buffer array,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,266,2019-02-07T23:19:10Z,2019-02-07T23:33:49Z,2019-02-07T23:46:42Z,MERGED,True,1,9,1,https://github.com/jebrando,Fixing a double destroy on xio,1,[],https://github.com/Azure/azure-c-shared-utility/pull/266,https://github.com/jebrando,1,https://github.com/Azure/azure-c-shared-utility/pull/266,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,267,2019-02-09T17:02:09Z,2019-02-27T22:04:47Z,2019-05-06T18:24:21Z,MERGED,True,1,1,1,https://github.com/jebrando,Adding extra logging to see which option is having issues,2,[],https://github.com/Azure/azure-c-shared-utility/pull/267,https://github.com/jebrando,1,https://github.com/Azure/azure-c-shared-utility/pull/267,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,268,2019-02-11T23:27:08Z,2019-03-01T18:53:34Z,2019-03-01T18:53:34Z,CLOSED,False,138,3,4,https://github.com/jadeiceman,Add SQM ID to platform info string,1,[],https://github.com/Azure/azure-c-shared-utility/pull/268,https://github.com/jadeiceman,1,https://github.com/Azure/azure-c-shared-utility/pull/268,Adding platform_get_platform_info_with_id to Win32 platform API so that SQM ID can be included in the product info.,Adding platform_get_platform_info_with_id to Win32 platform API so that SQM ID can be included in the product info.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,269,2019-02-12T05:38:28Z,2019-02-12T05:49:26Z,2019-05-06T18:24:19Z,MERGED,True,2,0,1,https://github.com/jspaith,Comment that OPTION_TLS_VERSION is deprecated,1,[],https://github.com/Azure/azure-c-shared-utility/pull/269,https://github.com/jspaith,1,https://github.com/Azure/azure-c-shared-utility/pull/269,Attempt to steer users from OPTION_TLS_VERSION.,Attempt to steer users from OPTION_TLS_VERSION.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,269,2019-02-12T05:38:28Z,2019-02-12T05:49:26Z,2019-05-06T18:24:19Z,MERGED,True,2,0,1,https://github.com/jspaith,Comment that OPTION_TLS_VERSION is deprecated,1,[],https://github.com/Azure/azure-c-shared-utility/pull/269,https://github.com/massand,2,https://github.com/Azure/azure-c-shared-utility/pull/269#issuecomment-462624033,Attempt to steer users from OPTION_TLS_VERSION.,"@jspaith - thanks! Please make the prov_client change in the other repo to remove the explicit setting of OPTION_TLS_VERSION there, since we always default to 1.2 for openSSL",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,270,2019-02-12T10:57:57Z,2019-02-16T01:34:14Z,2019-02-16T01:34:14Z,MERGED,True,34,2,3,https://github.com/alexmrtn,add option use_mbedtls,1,[],https://github.com/Azure/azure-c-shared-utility/pull/270,https://github.com/alexmrtn,1,https://github.com/Azure/azure-c-shared-utility/pull/270,Adding the ability to use mbedlts as tlsio layer for all platforms,Adding the ability to use mbedlts as tlsio layer for all platforms,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,271,2019-02-15T23:49:19Z,2019-02-16T01:34:12Z,2019-02-20T19:32:27Z,MERGED,True,243,173,5,https://github.com/jebrando,completing unittest for mbedtlsio,2,[],https://github.com/Azure/azure-c-shared-utility/pull/271,https://github.com/jebrando,1,https://github.com/Azure/azure-c-shared-utility/pull/271,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,272,2019-02-19T11:11:09Z,2019-10-03T09:24:38Z,2019-10-03T09:24:38Z,CLOSED,False,487,20,9,https://github.com/alexmrtn,Add Support FreeRTOS,1,[],https://github.com/Azure/azure-c-shared-utility/pull/272,https://github.com/alexmrtn,1,https://github.com/Azure/azure-c-shared-utility/pull/272,"This PR is to add support for FreeRTOS.
We filled the blanks in the c-utility so that thread are mapped on Freertos tasks, and conditions to the native freertos conditions.
We had to modify a bit the memory function used when using custom heap in order to secure the malloc / realloc calls when on freertos.
Please let us know if this PR make sens to you and if it needs any modifications.
Best,
Alexis Martin.","This PR is to add support for FreeRTOS.
We filled the blanks in the c-utility so that thread are mapped on Freertos tasks, and conditions to the native freertos conditions.
We had to modify a bit the memory function used when using custom heap in order to secure the malloc / realloc calls when on freertos.
Please let us know if this PR make sens to you and if it needs any modifications.
Best,
Alexis Martin.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,272,2019-02-19T11:11:09Z,2019-10-03T09:24:38Z,2019-10-03T09:24:38Z,CLOSED,False,487,20,9,https://github.com/alexmrtn,Add Support FreeRTOS,1,[],https://github.com/Azure/azure-c-shared-utility/pull/272,https://github.com/yzhong94,2,https://github.com/Azure/azure-c-shared-utility/pull/272#issuecomment-468781861,"This PR is to add support for FreeRTOS.
We filled the blanks in the c-utility so that thread are mapped on Freertos tasks, and conditions to the native freertos conditions.
We had to modify a bit the memory function used when using custom heap in order to secure the malloc / realloc calls when on freertos.
Please let us know if this PR make sens to you and if it needs any modifications.
Best,
Alexis Martin.",@alexmrtn we are reviewing this internally now.  Thank you!,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,272,2019-02-19T11:11:09Z,2019-10-03T09:24:38Z,2019-10-03T09:24:38Z,CLOSED,False,487,20,9,https://github.com/alexmrtn,Add Support FreeRTOS,1,[],https://github.com/Azure/azure-c-shared-utility/pull/272,https://github.com/ewertons,3,https://github.com/Azure/azure-c-shared-utility/pull/272#issuecomment-474514216,"This PR is to add support for FreeRTOS.
We filled the blanks in the c-utility so that thread are mapped on Freertos tasks, and conditions to the native freertos conditions.
We had to modify a bit the memory function used when using custom heap in order to secure the malloc / realloc calls when on freertos.
Please let us know if this PR make sens to you and if it needs any modifications.
Best,
Alexis Martin.","@alexmrtn ,
thanks for your PR.
We are working on our supportability infrastructure and we will need to assess how to onboard these changes (which will require adding tests, add proper devices to our build lab, etc).
We will keep this PR open until we close on those definitions.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,272,2019-02-19T11:11:09Z,2019-10-03T09:24:38Z,2019-10-03T09:24:38Z,CLOSED,False,487,20,9,https://github.com/alexmrtn,Add Support FreeRTOS,1,[],https://github.com/Azure/azure-c-shared-utility/pull/272,https://github.com/ewertons,4,https://github.com/Azure/azure-c-shared-utility/pull/272#issuecomment-474578025,"This PR is to add support for FreeRTOS.
We filled the blanks in the c-utility so that thread are mapped on Freertos tasks, and conditions to the native freertos conditions.
We had to modify a bit the memory function used when using custom heap in order to secure the malloc / realloc calls when on freertos.
Please let us know if this PR make sens to you and if it needs any modifications.
Best,
Alexis Martin.","@alexmrtn ,
just to gather some more info, would you mind sharing:

What is the device/platform you used for testing your changes?
Which TLS api you used?
What IP stack you used?
Did you use one of our PAL layers?",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,272,2019-02-19T11:11:09Z,2019-10-03T09:24:38Z,2019-10-03T09:24:38Z,CLOSED,False,487,20,9,https://github.com/alexmrtn,Add Support FreeRTOS,1,[],https://github.com/Azure/azure-c-shared-utility/pull/272,https://github.com/alexmrtn,5,https://github.com/Azure/azure-c-shared-utility/pull/272#issuecomment-476250817,"This PR is to add support for FreeRTOS.
We filled the blanks in the c-utility so that thread are mapped on Freertos tasks, and conditions to the native freertos conditions.
We had to modify a bit the memory function used when using custom heap in order to secure the malloc / realloc calls when on freertos.
Please let us know if this PR make sens to you and if it needs any modifications.
Best,
Alexis Martin.","@ewertons
Thanks for the details about the following of this PR. I entirely understand that it will add some validation work if this come to the official support.

We have developed the changes using the Posix/Linux Simulator for FreeRTOS, and then manually validated the functions on a stm32F429 Nucleo Board.
We used the mbedTLS adapter (the one we make through #270)
We used Lwip
Yes we have used the following files:

lock.c (No modification)
threadapi.c (with modifications)
tickcounter.c (with minor modifications)
platform_freertos.c (with minor modifications)
condition_freertos.c (new file created)
socketio_berkeley.c (minor modifications to be able to bind to Berkeley sockets API adapter of lwip )



Let me know if I can help / provide you more details.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,273,2019-02-20T01:29:49Z,2019-02-20T19:24:40Z,2019-02-20T19:38:02Z,MERGED,True,5,0,1,https://github.com/amar-sagare,add dummy implementation for 'xlogging_LogErrorWinHTTPWithGetLastErrorAsStringFormatter',1,[],https://github.com/Azure/azure-c-shared-utility/pull/273,https://github.com/amar-sagare,1,https://github.com/Azure/azure-c-shared-utility/pull/273,"add dummy implementation for 'xlogging_LogErrorWinHTTPWithGetLastErrorAsStringFormatter'
We have an ETW ‘writer’ for xlogging which can be enabled by building with the switch ‘use_etw’ in CMAKE. Turns out the current implementation was broken because the method ‘xlogging_LogErrorWinHTTPWithGetLastErrorAsStringFormatter’ was added to xlogging.h and was not implemented by the ETW writer.  I’ve fixed that by adding a dummy method in the ETW Xlogging implementation.","add dummy implementation for 'xlogging_LogErrorWinHTTPWithGetLastErrorAsStringFormatter'
We have an ETW ‘writer’ for xlogging which can be enabled by building with the switch ‘use_etw’ in CMAKE. Turns out the current implementation was broken because the method ‘xlogging_LogErrorWinHTTPWithGetLastErrorAsStringFormatter’ was added to xlogging.h and was not implemented by the ETW writer.  I’ve fixed that by adding a dummy method in the ETW Xlogging implementation.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,274,2019-02-20T19:34:26Z,2021-11-10T01:43:22Z,2021-11-10T01:43:22Z,CLOSED,False,70,32,1,https://github.com/EA007,Allow openssl multi-init,2,[],https://github.com/Azure/azure-c-shared-utility/pull/274,https://github.com/EA007,1,https://github.com/Azure/azure-c-shared-utility/pull/274,"Allow openssl multi-init, for scenarios where the caller of a component using openssl can also use openssl.","Allow openssl multi-init, for scenarios where the caller of a component using openssl can also use openssl.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,274,2019-02-20T19:34:26Z,2021-11-10T01:43:22Z,2021-11-10T01:43:22Z,CLOSED,False,70,32,1,https://github.com/EA007,Allow openssl multi-init,2,[],https://github.com/Azure/azure-c-shared-utility/pull/274,https://github.com/ericwol-msft,2,https://github.com/Azure/azure-c-shared-utility/pull/274#issuecomment-958148335,"Allow openssl multi-init, for scenarios where the caller of a component using openssl can also use openssl.","Elena, this issue is pretty old. We are cleaning this up. Is this still an issue for you?",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,274,2019-02-20T19:34:26Z,2021-11-10T01:43:22Z,2021-11-10T01:43:22Z,CLOSED,False,70,32,1,https://github.com/EA007,Allow openssl multi-init,2,[],https://github.com/Azure/azure-c-shared-utility/pull/274,https://github.com/EA007,3,https://github.com/Azure/azure-c-shared-utility/pull/274#issuecomment-962489074,"Allow openssl multi-init, for scenarios where the caller of a component using openssl can also use openssl.","This is no longer needed. Thanks for checking!
…
-Elena Apreutesei

From: Eric ***@***.***>
Sent: Tuesday, November 2, 2021 1:38 PM
To: ***@***.***>
Cc: Elena ***@***.***>; ***@***.***>
Subject: Re: [Azure/azure-c-shared-utility] Allow openssl multi-init (#274)


Elena, this issue is pretty old. We are cleaning this up. Is this still an issue for you?

—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub<#274 (comment)>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/ACAP3VJR7A7JRBBSWS6JVS3UKBK5JANCNFSM4GYX2PTA>.
Triage notifications on the go with GitHub Mobile for iOS<https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675> or Android<https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,275,2019-02-21T18:21:56Z,2019-03-14T21:33:04Z,2019-03-14T21:42:47Z,CLOSED,False,7093,8124,151,https://github.com/ewertons,Rename macro_utils DEC to CS_DEC (fix Arduino name collision),3,[],https://github.com/Azure/azure-c-shared-utility/pull/275,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/275,"This is one of the fixes for Arduino builds.
Related to Azure/azure-iot-sdk-c#795","This is one of the fixes for Arduino builds.
Related to Azure/azure-iot-sdk-c#795",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,275,2019-02-21T18:21:56Z,2019-03-14T21:33:04Z,2019-03-14T21:42:47Z,CLOSED,False,7093,8124,151,https://github.com/ewertons,Rename macro_utils DEC to CS_DEC (fix Arduino name collision),3,[],https://github.com/Azure/azure-c-shared-utility/pull/275,https://github.com/dcristoloveanu,2,https://github.com/Azure/azure-c-shared-utility/pull/275#issuecomment-466750624,"This is one of the fixes for Arduino builds.
Related to Azure/azure-iot-sdk-c#795","/* and all of these copies must be located and replaced. */

The fact that these things are out of sync with the real macro_utils is a problem.
So let's fix it in the right way by doing as originally suggested by YoDaMa and have the PR to the macro utils repo (https://github.com/Azure/azure-macro-utils-c).

Refers to: inc/azure_c_shared_utility/macro_utils.h:10 in 64ec0a6. [](commit_id = 64ec0a6, deletion_comment = True)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,275,2019-02-21T18:21:56Z,2019-03-14T21:33:04Z,2019-03-14T21:42:47Z,CLOSED,False,7093,8124,151,https://github.com/ewertons,Rename macro_utils DEC to CS_DEC (fix Arduino name collision),3,[],https://github.com/Azure/azure-c-shared-utility/pull/275,https://github.com/dcristoloveanu,3,https://github.com/Azure/azure-c-shared-utility/pull/275#issuecomment-466750707,"This is one of the fixes for Arduino builds.
Related to Azure/azure-iot-sdk-c#795","#define MU_TOSTRING_(x) #x

Especially if you're adding the prefix all over the place, this the divergence is getting really out of hand.

Refers to: inc/azure_c_shared_utility/macro_utils.h:17 in 64ec0a6. [](commit_id = 64ec0a6, deletion_comment = False)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,275,2019-02-21T18:21:56Z,2019-03-14T21:33:04Z,2019-03-14T21:42:47Z,CLOSED,False,7093,8124,151,https://github.com/ewertons,Rename macro_utils DEC to CS_DEC (fix Arduino name collision),3,[],https://github.com/Azure/azure-c-shared-utility/pull/275,https://github.com/ewertons,4,https://github.com/Azure/azure-c-shared-utility/pull/275#issuecomment-473072792,"This is one of the fixes for Arduino builds.
Related to Azure/azure-iot-sdk-c#795",Too many changes have been made since this was approved. I'll resubmit this PR.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,276,2019-02-22T10:21:38Z,2019-02-22T19:13:55Z,2019-02-22T19:13:55Z,MERGED,True,29,342,23,https://github.com/massand,Remove wince,5,[],https://github.com/Azure/azure-c-shared-utility/pull/276,https://github.com/massand,1,https://github.com/Azure/azure-c-shared-utility/pull/276,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,276,2019-02-22T10:21:38Z,2019-02-22T19:13:55Z,2019-02-22T19:13:55Z,MERGED,True,29,342,23,https://github.com/massand,Remove wince,5,[],https://github.com/Azure/azure-c-shared-utility/pull/276,https://github.com/massand,2,https://github.com/Azure/azure-c-shared-utility/pull/276#issuecomment-466348761,,/azp run integrate-into-repo-C-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,276,2019-02-22T10:21:38Z,2019-02-22T19:13:55Z,2019-02-22T19:13:55Z,MERGED,True,29,342,23,https://github.com/massand,Remove wince,5,[],https://github.com/Azure/azure-c-shared-utility/pull/276,https://github.com/massand,3,https://github.com/Azure/azure-c-shared-utility/pull/276#issuecomment-466350173,,/azp run integrate-into-repo-C-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,276,2019-02-22T10:21:38Z,2019-02-22T19:13:55Z,2019-02-22T19:13:55Z,MERGED,True,29,342,23,https://github.com/massand,Remove wince,5,[],https://github.com/Azure/azure-c-shared-utility/pull/276,https://github.com/massand,4,https://github.com/Azure/azure-c-shared-utility/pull/276#issuecomment-466487925,,/azp run integrate-into-repo-C-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,277,2019-02-25T01:11:52Z,2019-02-25T23:18:23Z,2019-05-06T18:25:52Z,MERGED,True,104,104,7,https://github.com/dcristoloveanu,Issue #73: Rename Base64_Encoder to Base64_Encode and Base64_Decoder …,1,[],https://github.com/Azure/azure-c-shared-utility/pull/277,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/277,…to Base64_Decode,…to Base64_Decode,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,278,2019-02-27T21:54:22Z,2019-06-12T22:00:58Z,2019-07-04T04:04:45Z,CLOSED,False,77,221,25,https://github.com/jebrando,Submodule restructure as to not force to have to do a recursive update,9,[],https://github.com/Azure/azure-c-shared-utility/pull/278,https://github.com/jebrando,1,https://github.com/Azure/azure-c-shared-utility/pull/278,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,279,2019-03-01T02:21:54Z,2019-08-31T17:22:41Z,2019-09-05T06:33:21Z,CLOSED,False,862,417,16,https://github.com/massand,[DO NOT MERGE] Async DNS resolver implementation,3,[],https://github.com/Azure/azure-c-shared-utility/pull/279,https://github.com/massand,1,https://github.com/Azure/azure-c-shared-utility/pull/279,"We are planning to add a asynchronous DNS resolution helper for the socket_io layers that can support the c-ares library (which is quite portable across many platforms).
This PR supports Windows and Linux platform only, so that we can vet the PAL changes for socket and dns_async addition. The plan is to leverage vcpkg / apt-get packages to obtain c-ares dependencies or assuming c-ares is part of your toolchain's sysroot/lib and /include (i.e. we do not plan to submodule c-ares).
How to build & test using iothub_ll_telemetry_sample on Windows with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c):

Install c-ares vcpkg

git clone https://github.com/Microsoft/vcpkg.git vcpkg_new
pushd vcpkg_new
.\bootstrap-vcpkg.bat
vcpkg integrate install
vcpkg install c-ares


Build SDK with async dns_resolver

git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver
popd
pushd umqtt\deps\c-utility
git fetch
git checkout dns_resolver
popd
mkdir cmake
cmake ..
cmake --build . -- /m /p:Configuration=Debug
iothub_client\samples\iothub_ll_telemetry_sample\Debug\iothub_ll_telemetry_sample.exe

In order to switch to the default synchronous DNS resolution, simply change the c-utility\CMakeLists.txt to dns_resolver_sync.c
How to build & test using iothub_ll_telemetry_sample on Linux with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c) -
sudo apt install libc-ares-dev
git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver_berkley
popd
pushd umqtt/deps/c-utility
git fetch
git checkout dns_resolver_berkley
popd
mkdir cmake
cd cmake
cmake ..
cmake --build .
pushd iothub_client/samples/iothub_ll_telemetry_sample
./iothub_ll_telemetry_sample","We are planning to add a asynchronous DNS resolution helper for the socket_io layers that can support the c-ares library (which is quite portable across many platforms).
This PR supports Windows and Linux platform only, so that we can vet the PAL changes for socket and dns_async addition. The plan is to leverage vcpkg / apt-get packages to obtain c-ares dependencies or assuming c-ares is part of your toolchain's sysroot/lib and /include (i.e. we do not plan to submodule c-ares).
How to build & test using iothub_ll_telemetry_sample on Windows with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c):

Install c-ares vcpkg

git clone https://github.com/Microsoft/vcpkg.git vcpkg_new
pushd vcpkg_new
.\bootstrap-vcpkg.bat
vcpkg integrate install
vcpkg install c-ares


Build SDK with async dns_resolver

git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver
popd
pushd umqtt\deps\c-utility
git fetch
git checkout dns_resolver
popd
mkdir cmake
cmake ..
cmake --build . -- /m /p:Configuration=Debug
iothub_client\samples\iothub_ll_telemetry_sample\Debug\iothub_ll_telemetry_sample.exe

In order to switch to the default synchronous DNS resolution, simply change the c-utility\CMakeLists.txt to dns_resolver_sync.c
How to build & test using iothub_ll_telemetry_sample on Linux with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c) -
sudo apt install libc-ares-dev
git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver_berkley
popd
pushd umqtt/deps/c-utility
git fetch
git checkout dns_resolver_berkley
popd
mkdir cmake
cd cmake
cmake ..
cmake --build .
pushd iothub_client/samples/iothub_ll_telemetry_sample
./iothub_ll_telemetry_sample",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,279,2019-03-01T02:21:54Z,2019-08-31T17:22:41Z,2019-09-05T06:33:21Z,CLOSED,False,862,417,16,https://github.com/massand,[DO NOT MERGE] Async DNS resolver implementation,3,[],https://github.com/Azure/azure-c-shared-utility/pull/279,https://github.com/angelobt,2,https://github.com/Azure/azure-c-shared-utility/pull/279#issuecomment-468594730,"We are planning to add a asynchronous DNS resolution helper for the socket_io layers that can support the c-ares library (which is quite portable across many platforms).
This PR supports Windows and Linux platform only, so that we can vet the PAL changes for socket and dns_async addition. The plan is to leverage vcpkg / apt-get packages to obtain c-ares dependencies or assuming c-ares is part of your toolchain's sysroot/lib and /include (i.e. we do not plan to submodule c-ares).
How to build & test using iothub_ll_telemetry_sample on Windows with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c):

Install c-ares vcpkg

git clone https://github.com/Microsoft/vcpkg.git vcpkg_new
pushd vcpkg_new
.\bootstrap-vcpkg.bat
vcpkg integrate install
vcpkg install c-ares


Build SDK with async dns_resolver

git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver
popd
pushd umqtt\deps\c-utility
git fetch
git checkout dns_resolver
popd
mkdir cmake
cmake ..
cmake --build . -- /m /p:Configuration=Debug
iothub_client\samples\iothub_ll_telemetry_sample\Debug\iothub_ll_telemetry_sample.exe

In order to switch to the default synchronous DNS resolution, simply change the c-utility\CMakeLists.txt to dns_resolver_sync.c
How to build & test using iothub_ll_telemetry_sample on Linux with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c) -
sudo apt install libc-ares-dev
git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver_berkley
popd
pushd umqtt/deps/c-utility
git fetch
git checkout dns_resolver_berkley
popd
mkdir cmake
cd cmake
cmake ..
cmake --build .
pushd iothub_client/samples/iothub_ll_telemetry_sample
./iothub_ll_telemetry_sample","Hi,
I have some problem compiling the shared utility package
/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-c-shared-utility/1.1.4-r0/recipe-sysroot-native/usr/bin/arm-poky-linux-gnueabi/arm-poky-linux-gnueabi-gcc -DARCHITECTURE_ARM=1 -Daziotsharedutil_dll_EXPORTS -I/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-c-shared-utility/1.1.4-r0/git/inc -I/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-c-shared-utility/1.1.4-r0/git/pal/linux -D_POSIX_C_SOURCE=200112L  -march=armv7-a -marm -mfpu=neon -mfloat-abi=hard -mcpu=cortex-a9  --sysroot=/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-c-shared-utility/1.1.4-r0/recipe-sysroot  -O2 -pipe -g -feliminate-unused-debug-types -fdebug-prefix-map=/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-c-shared-utility/1.1.4-r0=/usr/src/debug/azure-c-shared-utility/1.1.4-r0 -fdebug-prefix-map=/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-c-shared-utility/1.1.4-r0/recipe-sysroot= -fdebug-prefix-map=/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-c-shared-utility/1.1.4-r0/recipe-sysroot-native=   -march=armv7-a -marm -mfpu=neon -mfloat-abi=hard -mcpu=cortex-a9  --sysroot=/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-c-shared-utility/1.1.4-r0/recipe-sysroot -Werror -Werror -Wall -Wextra -Wformat=2 -Wformat-security -DUSE_OPENSSL -Wno-unused-variable -Wno-missing-braces -Wno-missing-field-initializers -Wno-format-nonliteral -fPIC -MD -MT CMakeFiles/aziotsharedutil_dll.dir/src/uws_client.c.o -MF CMakeFiles/aziotsharedutil_dll.dir/src/uws_client.c.o.d -o CMakeFiles/aziotsharedutil_dll.dir/src/uws_client.c.o   -c /home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-c-shared-utility/1.1.4-r0/git/src/uws_client.c
ninja: build stopped: subcommand failed
Do you have you any suggestion ?
I'm using Yocto (sumo) and I'm cross-compiling for arm
Thanks",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,279,2019-03-01T02:21:54Z,2019-08-31T17:22:41Z,2019-09-05T06:33:21Z,CLOSED,False,862,417,16,https://github.com/massand,[DO NOT MERGE] Async DNS resolver implementation,3,[],https://github.com/Azure/azure-c-shared-utility/pull/279,https://github.com/angelobt,3,https://github.com/Azure/azure-c-shared-utility/pull/279#issuecomment-468617700,"We are planning to add a asynchronous DNS resolution helper for the socket_io layers that can support the c-ares library (which is quite portable across many platforms).
This PR supports Windows and Linux platform only, so that we can vet the PAL changes for socket and dns_async addition. The plan is to leverage vcpkg / apt-get packages to obtain c-ares dependencies or assuming c-ares is part of your toolchain's sysroot/lib and /include (i.e. we do not plan to submodule c-ares).
How to build & test using iothub_ll_telemetry_sample on Windows with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c):

Install c-ares vcpkg

git clone https://github.com/Microsoft/vcpkg.git vcpkg_new
pushd vcpkg_new
.\bootstrap-vcpkg.bat
vcpkg integrate install
vcpkg install c-ares


Build SDK with async dns_resolver

git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver
popd
pushd umqtt\deps\c-utility
git fetch
git checkout dns_resolver
popd
mkdir cmake
cmake ..
cmake --build . -- /m /p:Configuration=Debug
iothub_client\samples\iothub_ll_telemetry_sample\Debug\iothub_ll_telemetry_sample.exe

In order to switch to the default synchronous DNS resolution, simply change the c-utility\CMakeLists.txt to dns_resolver_sync.c
How to build & test using iothub_ll_telemetry_sample on Linux with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c) -
sudo apt install libc-ares-dev
git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver_berkley
popd
pushd umqtt/deps/c-utility
git fetch
git checkout dns_resolver_berkley
popd
mkdir cmake
cd cmake
cmake ..
cmake --build .
pushd iothub_client/samples/iothub_ll_telemetry_sample
./iothub_ll_telemetry_sample","Ater removing from recipe -j 16 I get these errors
/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-c-shared-utility/1.1.4-r0/git/src/dns_resolver_ares.c:102:5: error: unkn
own type name 'ADDRINFO'; did you mean 'EADDRINUSE'?
ADDRINFO *ai;
^~~~~~~~
EADDRINUSE
/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-c-shared-utility/1.1.4-r0/git/src/dns_resolver_ares.c:103:5: error: unkn
own type name 'ADDRINFO'; did you mean 'EADDRINUSE'?
ADDRINFO *firstai = NULL;
^~~~~~~~
EADDRINUSE
/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-c-shared-utility/1.1.4-r0/git/src/dns_resolver_ares.c:104:5: error: unkn
own type name 'ADDRINFO'; did you mean 'EADDRINUSE'?
ADDRINFO *prevai = NULL;
^~~~~~~~
EADDRINUSE
/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-c-shared-utility/1.1.4-r0/git/src/dns_resolver_ares.c:111:38: error: 'AD
DRINFO' undeclared (first use in this function); did you mean 'EADDRINUSE'?
dns->addrInfo = calloc(1, sizeof(ADDRINFO));
^~~~~~~~
EADDRINUSE
/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-c-shared-utility/1.1.4-r0/git/src/dns_resolver_ares.c:111:38: note: each undeclared identifier is reported only once for each function it appears in
/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-c-shared-utility/1.1.4-r0/git/src/dns_resolver_ares.c:122:11: error: request for member 'ai_canonname' in something not a structure or union
ai->ai_canonname = _strdup(he->h_name);
^~
/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-c-shared-utility/1.1.4-r0/git/src/dns_resolver_ares.c:122:28: error: implicit declaration of function '_strdup'; did you mean 'strcmp'? [-Werror=implicit-function-declaration]
ai->ai_canonname = _strdup(he->h_name);
^~~~~~~
strcmp
/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-c-shared-utility/1.1.4-r0/git/src/dns_resolver_ares.c:123:16: error: request for member 'ai_canonname' in something not a structure or union
if (!ai->ai_canonname) {
^~
/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-c-shared-utility/1.1.4-r0/git/src/dns_resolver_ares.c:127:11: error: request for member 'ai_addr' in something not a structure or union
ai->ai_addr = calloc(1, ss_size);
^~
/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-c-shared-utility/1.1.4-r0/git/src/dns_resolver_ares.c:128:16: error: request for member 'ai_addr' in something not a structure or union
if (!ai->ai_addr) {
^~
/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-c-shared-utility/1.1.4-r0/git/src/dns_resolver_ares.c:129:20: error: request for member 'ai_canonname' in something not a structure or union
free(ai->ai_canonname);
^~
/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-c-shared-utility/1.1.4-r0/git/src/dns_resolver_ares.c:140:19: error: request for member 'ai_next' in something not a structure or union
prevai->ai_next = ai;
^~
/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-c-shared-utility/1.1.4-r0/git/src/dns_resolver_ares.c:142:11: error: request for member 'ai_family' in something not a structure or union
ai->ai_family = he->h_addrtype;
^~
/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-c-shared-utility/1.1.4-r0/git/src/dns_resolver_ares.c:146:11: error: request for member 'ai_socktype' in something not a structure or union
ai->ai_socktype = SOCK_STREAM;
^~",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,279,2019-03-01T02:21:54Z,2019-08-31T17:22:41Z,2019-09-05T06:33:21Z,CLOSED,False,862,417,16,https://github.com/massand,[DO NOT MERGE] Async DNS resolver implementation,3,[],https://github.com/Azure/azure-c-shared-utility/pull/279,https://github.com/angelobt,4,https://github.com/Azure/azure-c-shared-utility/pull/279#issuecomment-468639395,"We are planning to add a asynchronous DNS resolution helper for the socket_io layers that can support the c-ares library (which is quite portable across many platforms).
This PR supports Windows and Linux platform only, so that we can vet the PAL changes for socket and dns_async addition. The plan is to leverage vcpkg / apt-get packages to obtain c-ares dependencies or assuming c-ares is part of your toolchain's sysroot/lib and /include (i.e. we do not plan to submodule c-ares).
How to build & test using iothub_ll_telemetry_sample on Windows with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c):

Install c-ares vcpkg

git clone https://github.com/Microsoft/vcpkg.git vcpkg_new
pushd vcpkg_new
.\bootstrap-vcpkg.bat
vcpkg integrate install
vcpkg install c-ares


Build SDK with async dns_resolver

git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver
popd
pushd umqtt\deps\c-utility
git fetch
git checkout dns_resolver
popd
mkdir cmake
cmake ..
cmake --build . -- /m /p:Configuration=Debug
iothub_client\samples\iothub_ll_telemetry_sample\Debug\iothub_ll_telemetry_sample.exe

In order to switch to the default synchronous DNS resolution, simply change the c-utility\CMakeLists.txt to dns_resolver_sync.c
How to build & test using iothub_ll_telemetry_sample on Linux with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c) -
sudo apt install libc-ares-dev
git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver_berkley
popd
pushd umqtt/deps/c-utility
git fetch
git checkout dns_resolver_berkley
popd
mkdir cmake
cd cmake
cmake ..
cmake --build .
pushd iothub_client/samples/iothub_ll_telemetry_sample
./iothub_ll_telemetry_sample","Hi,
it seems that it compiles only for windows.
I need the linux version",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,279,2019-03-01T02:21:54Z,2019-08-31T17:22:41Z,2019-09-05T06:33:21Z,CLOSED,False,862,417,16,https://github.com/massand,[DO NOT MERGE] Async DNS resolver implementation,3,[],https://github.com/Azure/azure-c-shared-utility/pull/279,https://github.com/massand,5,https://github.com/Azure/azure-c-shared-utility/pull/279#issuecomment-469663014,"We are planning to add a asynchronous DNS resolution helper for the socket_io layers that can support the c-ares library (which is quite portable across many platforms).
This PR supports Windows and Linux platform only, so that we can vet the PAL changes for socket and dns_async addition. The plan is to leverage vcpkg / apt-get packages to obtain c-ares dependencies or assuming c-ares is part of your toolchain's sysroot/lib and /include (i.e. we do not plan to submodule c-ares).
How to build & test using iothub_ll_telemetry_sample on Windows with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c):

Install c-ares vcpkg

git clone https://github.com/Microsoft/vcpkg.git vcpkg_new
pushd vcpkg_new
.\bootstrap-vcpkg.bat
vcpkg integrate install
vcpkg install c-ares


Build SDK with async dns_resolver

git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver
popd
pushd umqtt\deps\c-utility
git fetch
git checkout dns_resolver
popd
mkdir cmake
cmake ..
cmake --build . -- /m /p:Configuration=Debug
iothub_client\samples\iothub_ll_telemetry_sample\Debug\iothub_ll_telemetry_sample.exe

In order to switch to the default synchronous DNS resolution, simply change the c-utility\CMakeLists.txt to dns_resolver_sync.c
How to build & test using iothub_ll_telemetry_sample on Linux with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c) -
sudo apt install libc-ares-dev
git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver_berkley
popd
pushd umqtt/deps/c-utility
git fetch
git checkout dns_resolver_berkley
popd
mkdir cmake
cd cmake
cmake ..
cmake --build .
pushd iothub_client/samples/iothub_ll_telemetry_sample
./iothub_ll_telemetry_sample","Yes - this change is being initially verified on Windows. There is some progress made on the berkeley Linux version at this branch. However, I am running into some issue in the post-resolution stage within query_completed_cb, which I did not hit on Windows. I will post back when I resolve the issue. I had to run the 'sudo apt install libc-ares-dev' command on Linux to test this.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,279,2019-03-01T02:21:54Z,2019-08-31T17:22:41Z,2019-09-05T06:33:21Z,CLOSED,False,862,417,16,https://github.com/massand,[DO NOT MERGE] Async DNS resolver implementation,3,[],https://github.com/Azure/azure-c-shared-utility/pull/279,https://github.com/massand,6,https://github.com/Azure/azure-c-shared-utility/pull/279#issuecomment-470472554,"We are planning to add a asynchronous DNS resolution helper for the socket_io layers that can support the c-ares library (which is quite portable across many platforms).
This PR supports Windows and Linux platform only, so that we can vet the PAL changes for socket and dns_async addition. The plan is to leverage vcpkg / apt-get packages to obtain c-ares dependencies or assuming c-ares is part of your toolchain's sysroot/lib and /include (i.e. we do not plan to submodule c-ares).
How to build & test using iothub_ll_telemetry_sample on Windows with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c):

Install c-ares vcpkg

git clone https://github.com/Microsoft/vcpkg.git vcpkg_new
pushd vcpkg_new
.\bootstrap-vcpkg.bat
vcpkg integrate install
vcpkg install c-ares


Build SDK with async dns_resolver

git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver
popd
pushd umqtt\deps\c-utility
git fetch
git checkout dns_resolver
popd
mkdir cmake
cmake ..
cmake --build . -- /m /p:Configuration=Debug
iothub_client\samples\iothub_ll_telemetry_sample\Debug\iothub_ll_telemetry_sample.exe

In order to switch to the default synchronous DNS resolution, simply change the c-utility\CMakeLists.txt to dns_resolver_sync.c
How to build & test using iothub_ll_telemetry_sample on Linux with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c) -
sudo apt install libc-ares-dev
git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver_berkley
popd
pushd umqtt/deps/c-utility
git fetch
git checkout dns_resolver_berkley
popd
mkdir cmake
cd cmake
cmake ..
cmake --build .
pushd iothub_client/samples/iothub_ll_telemetry_sample
./iothub_ll_telemetry_sample","@angelobt - i have a fix for the berkeley socket issue now, which I tested using the sample at iothub_client/samples/iothub_ll_telemetry_sample. I have updated the validation steps in the PR description comment. Please follow those steps and let me know if you run into issues building. Note that you will need to apt-get c-ares or build it and place it in the sysroot of your toolchain
As mentioned earlier, I need to run a lot more validation across all our supported compiler/platforms for the socketio and dns_resolver changes. In the meantime, please provide your feedback on the DNS resolution experience on your Linux environment,",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,279,2019-03-01T02:21:54Z,2019-08-31T17:22:41Z,2019-09-05T06:33:21Z,CLOSED,False,862,417,16,https://github.com/massand,[DO NOT MERGE] Async DNS resolver implementation,3,[],https://github.com/Azure/azure-c-shared-utility/pull/279,https://github.com/angelobt,7,https://github.com/Azure/azure-c-shared-utility/pull/279#issuecomment-470586801,"We are planning to add a asynchronous DNS resolution helper for the socket_io layers that can support the c-ares library (which is quite portable across many platforms).
This PR supports Windows and Linux platform only, so that we can vet the PAL changes for socket and dns_async addition. The plan is to leverage vcpkg / apt-get packages to obtain c-ares dependencies or assuming c-ares is part of your toolchain's sysroot/lib and /include (i.e. we do not plan to submodule c-ares).
How to build & test using iothub_ll_telemetry_sample on Windows with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c):

Install c-ares vcpkg

git clone https://github.com/Microsoft/vcpkg.git vcpkg_new
pushd vcpkg_new
.\bootstrap-vcpkg.bat
vcpkg integrate install
vcpkg install c-ares


Build SDK with async dns_resolver

git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver
popd
pushd umqtt\deps\c-utility
git fetch
git checkout dns_resolver
popd
mkdir cmake
cmake ..
cmake --build . -- /m /p:Configuration=Debug
iothub_client\samples\iothub_ll_telemetry_sample\Debug\iothub_ll_telemetry_sample.exe

In order to switch to the default synchronous DNS resolution, simply change the c-utility\CMakeLists.txt to dns_resolver_sync.c
How to build & test using iothub_ll_telemetry_sample on Linux with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c) -
sudo apt install libc-ares-dev
git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver_berkley
popd
pushd umqtt/deps/c-utility
git fetch
git checkout dns_resolver_berkley
popd
mkdir cmake
cd cmake
cmake ..
cmake --build .
pushd iothub_client/samples/iothub_ll_telemetry_sample
./iothub_ll_telemetry_sample","Hi,
sorry for this question, but I have to use Yocto environment to test your new implementation:
I have set all repos to the right commit (I hope), but when compiling the c sdk I get the following error:
make -E __create_def /home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-iot-sdk-c/1.2.4-r0/build/ioth
ub_client/CMakeFiles/iothub_client_dll.dir/exports.def /home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/a
zure-iot-sdk-c/1.2.4-r0/build/iothub_client/CMakeFiles/iothub_client_dll.dir/exports.def.objs && cd /home/sources/C100X/shark/poky-
tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-iot-sdk-c/1.2.4-r0/build && /home/sources/C100X/shark/poky-tmp/work/cortexa9hf-ne
on-poky-linux-gnueabi/azure-iot-sdk-c/1.2.4-r0/recipe-sysroot-native/usr/bin/arm-poky-linux-gnueabi/arm-poky-linux-gnueabi-gcc -fPI
C -fPIC  -march=armv7-a -marm -mfpu=neon -mfloat-abi=hard -mcpu=cortex-a9  --sysroot=/home/sources/C100X/shark/poky-tmp/work/cortex
a9hf-neon-poky-linux-gnueabi/azure-iot-sdk-c/1.2.4-r0/recipe-sysroot  -O2 -pipe -g -feliminate-unused-debug-types -fdebug-prefix-ma
p=/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-iot-sdk-c/1.2.4-r0=/usr/src/debug/azure-iot-sdk-c/1.2.4-r0 -fdebug-prefix-map=/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-iot-sdk-c/1.2.4-r0/recipe-sysroot= -fdebug-prefix-map=/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-iot-sdk-c/1.2.4-r0/recipe-sysroot-native=   -march=armv7-a -marm -mfpu=neon -mfloat-abi=hard -mcpu=cortex-a9  --sysroot=/home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-iot-sdk-c/1.2.4-r0/recipe-sysroot -w -Werror  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -shared -Wl,-soname,libiothub_client.so.1 -o iothub_client/libiothub_client.so.1.2.14 iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothub.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothub_client.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothub_client_core.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothub_client_core_ll.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothub_client_diagnostic.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothub_client_ll.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothub_device_client.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothub_device_client_ll.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothub_message.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothub_module_client.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothub_module_client_ll.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothubtransport.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/version.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothub_client_ll_uploadtoblob.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/blob.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothub_client_authorization.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothub_client_retry_control.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothub_transport_ll_private.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothubtransporthttp.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothubtransport_amqp_common.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothubtransport_amqp_device.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothubtransport_amqp_cbs_auth.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothubtransport_amqp_connection.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothubtransport_amqp_telemetry_messenger.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothubtransport_amqp_twin_messenger.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothubtransport_amqp_messenger.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothubtransportamqp_methods.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/message_queue.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/uamqp_messaging.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothubtransportamqp.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothubtransportamqp_websockets.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothubtransport_mqtt_common.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothubtransportmqtt.c.o iothub_client/CMakeFiles/iothub_client_dll.dir/src/iothubtransportmqtt_websockets.c.o  iothub_client/libiothub_client_http_transport.a iothub_client/libiothub_client_amqp_transport.a iothub_client/libiothub_client_amqp_ws_transport.a iothub_client/libiothub_client_mqtt_transport.a iothub_client/libiothub_client_mqtt_ws_transport.a libparson.a -Wl,--exclude-libs,libparson.a /home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-iot-sdk-c/1.2.4-r0/recipe-sysroot/usr/lib/libumqtt.so.1.1.4 /home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-iot-sdk-c/1.2.4-r0/recipe-sysroot/usr/lib/libaziotsharedutil.a -lcurl -lssl -lcrypto -lpthread -lm -lrt -luuid -lcares && :
CMake Error: cmake version 3.10.3
Usage: /home/sources/C100X/shark/poky-tmp/work/cortexa9hf-neon-poky-linux-gnueabi/azure-iot-sdk-c/1.2.4-r0/recipe-sysroot-native/usr/bin/cmake -E  [arguments...]
Seems that after compiling the libraries, a cmake -E __create_def command is executed, but, I think it is related to windows.
Do you know how to disable it via Cmake ?
Thanks",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,279,2019-03-01T02:21:54Z,2019-08-31T17:22:41Z,2019-09-05T06:33:21Z,CLOSED,False,862,417,16,https://github.com/massand,[DO NOT MERGE] Async DNS resolver implementation,3,[],https://github.com/Azure/azure-c-shared-utility/pull/279,https://github.com/angelobt,8,https://github.com/Azure/azure-c-shared-utility/pull/279#issuecomment-471960086,"We are planning to add a asynchronous DNS resolution helper for the socket_io layers that can support the c-ares library (which is quite portable across many platforms).
This PR supports Windows and Linux platform only, so that we can vet the PAL changes for socket and dns_async addition. The plan is to leverage vcpkg / apt-get packages to obtain c-ares dependencies or assuming c-ares is part of your toolchain's sysroot/lib and /include (i.e. we do not plan to submodule c-ares).
How to build & test using iothub_ll_telemetry_sample on Windows with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c):

Install c-ares vcpkg

git clone https://github.com/Microsoft/vcpkg.git vcpkg_new
pushd vcpkg_new
.\bootstrap-vcpkg.bat
vcpkg integrate install
vcpkg install c-ares


Build SDK with async dns_resolver

git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver
popd
pushd umqtt\deps\c-utility
git fetch
git checkout dns_resolver
popd
mkdir cmake
cmake ..
cmake --build . -- /m /p:Configuration=Debug
iothub_client\samples\iothub_ll_telemetry_sample\Debug\iothub_ll_telemetry_sample.exe

In order to switch to the default synchronous DNS resolution, simply change the c-utility\CMakeLists.txt to dns_resolver_sync.c
How to build & test using iothub_ll_telemetry_sample on Linux with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c) -
sudo apt install libc-ares-dev
git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver_berkley
popd
pushd umqtt/deps/c-utility
git fetch
git checkout dns_resolver_berkley
popd
mkdir cmake
cd cmake
cmake ..
cmake --build .
pushd iothub_client/samples/iothub_ll_telemetry_sample
./iothub_ll_telemetry_sample","Hi,
after updating Cmake, the compilation succeeded.
Now  I have a SIGSEV runtime.
seems that the function where the library dies is ResetConnectionIfNecessary when calling
xio_destroy.
I get ""free(): invalid pointer"" message",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,279,2019-03-01T02:21:54Z,2019-08-31T17:22:41Z,2019-09-05T06:33:21Z,CLOSED,False,862,417,16,https://github.com/massand,[DO NOT MERGE] Async DNS resolver implementation,3,[],https://github.com/Azure/azure-c-shared-utility/pull/279,https://github.com/angelobt,9,https://github.com/Azure/azure-c-shared-utility/pull/279#issuecomment-471998244,"We are planning to add a asynchronous DNS resolution helper for the socket_io layers that can support the c-ares library (which is quite portable across many platforms).
This PR supports Windows and Linux platform only, so that we can vet the PAL changes for socket and dns_async addition. The plan is to leverage vcpkg / apt-get packages to obtain c-ares dependencies or assuming c-ares is part of your toolchain's sysroot/lib and /include (i.e. we do not plan to submodule c-ares).
How to build & test using iothub_ll_telemetry_sample on Windows with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c):

Install c-ares vcpkg

git clone https://github.com/Microsoft/vcpkg.git vcpkg_new
pushd vcpkg_new
.\bootstrap-vcpkg.bat
vcpkg integrate install
vcpkg install c-ares


Build SDK with async dns_resolver

git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver
popd
pushd umqtt\deps\c-utility
git fetch
git checkout dns_resolver
popd
mkdir cmake
cmake ..
cmake --build . -- /m /p:Configuration=Debug
iothub_client\samples\iothub_ll_telemetry_sample\Debug\iothub_ll_telemetry_sample.exe

In order to switch to the default synchronous DNS resolution, simply change the c-utility\CMakeLists.txt to dns_resolver_sync.c
How to build & test using iothub_ll_telemetry_sample on Linux with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c) -
sudo apt install libc-ares-dev
git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver_berkley
popd
pushd umqtt/deps/c-utility
git fetch
git checkout dns_resolver_berkley
popd
mkdir cmake
cd cmake
cmake ..
cmake --build .
pushd iothub_client/samples/iothub_ll_telemetry_sample
./iothub_ll_telemetry_sample","Hi Rajeev,
in order to test c-ares async dns resolution, I had to comment out some ""free"" inside the code to avoid sigsev.
Seems that the resolution works well and the library does not block anymore waiting for dns.
These are the commit I have used:
git://github.com/Azure/azure-iot-sdk-c.git;rev=1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git://github.com/Azure/azure-c-shared-utility.git;branch=dns_resolver_berkley;rev=bf0a197b3bcf1d92e1d22661480032ca7889e5a6;destsuffix=git/c-utility
git://github.com/Azure/azure-umqtt-c.git;rev=6cd0cdeba607ed8de2e129e3451ef956f8ddf383;destsuffix=git/umqtt
git://github.com/Azure/azure-uamqp-c.git;rev=13f009ddd50a2837f651b0237de17db5f24c3af9;destsuffix=git/uamqp
git://github.com/kgabis/parson.git;rev=302fba9cbb31ffc523bf10a1ce705040194c289d;destsuffix=git/deps/parson
git://github.com/Azure/azure-uhttp-c.git;rev=43dce924b32818f8ab851f972cffebc204edc5c4;destsuffix=git/deps/uhttp \
I had to comment:
xio_destroy called by ResetConnectionIfNecessary and mqtt_disconnect_cb
handleData->IoTHubTransport_Destroy called by IoTHubClientCore_LL_Destroy",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,279,2019-03-01T02:21:54Z,2019-08-31T17:22:41Z,2019-09-05T06:33:21Z,CLOSED,False,862,417,16,https://github.com/massand,[DO NOT MERGE] Async DNS resolver implementation,3,[],https://github.com/Azure/azure-c-shared-utility/pull/279,https://github.com/massand,10,https://github.com/Azure/azure-c-shared-utility/pull/279#issuecomment-493262313,"We are planning to add a asynchronous DNS resolution helper for the socket_io layers that can support the c-ares library (which is quite portable across many platforms).
This PR supports Windows and Linux platform only, so that we can vet the PAL changes for socket and dns_async addition. The plan is to leverage vcpkg / apt-get packages to obtain c-ares dependencies or assuming c-ares is part of your toolchain's sysroot/lib and /include (i.e. we do not plan to submodule c-ares).
How to build & test using iothub_ll_telemetry_sample on Windows with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c):

Install c-ares vcpkg

git clone https://github.com/Microsoft/vcpkg.git vcpkg_new
pushd vcpkg_new
.\bootstrap-vcpkg.bat
vcpkg integrate install
vcpkg install c-ares


Build SDK with async dns_resolver

git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver
popd
pushd umqtt\deps\c-utility
git fetch
git checkout dns_resolver
popd
mkdir cmake
cmake ..
cmake --build . -- /m /p:Configuration=Debug
iothub_client\samples\iothub_ll_telemetry_sample\Debug\iothub_ll_telemetry_sample.exe

In order to switch to the default synchronous DNS resolution, simply change the c-utility\CMakeLists.txt to dns_resolver_sync.c
How to build & test using iothub_ll_telemetry_sample on Linux with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c) -
sudo apt install libc-ares-dev
git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver_berkley
popd
pushd umqtt/deps/c-utility
git fetch
git checkout dns_resolver_berkley
popd
mkdir cmake
cd cmake
cmake ..
cmake --build .
pushd iothub_client/samples/iothub_ll_telemetry_sample
./iothub_ll_telemetry_sample","@angelobt - we are still working on improving this code and not planning to release this month, due to significant refactors in submodules (which need to be merged in here). Moreover, we need to also align with the TLS stack of some other platforms that also have async DNS.
That said, you still have code to help accelerate your development in the dns_resolver_berkley branch. I have updated the PR instructions on how to set it up for Linux (when building from scratch) -
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c) -
sudo apt install libc-ares-dev
git clone https://github.com/Azure/azure-iot-sdk-c.git
cd azure-iot-sdk-c
git checkout 1078a7b
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver_berkley
popd
pushd umqtt/deps/c-utility
git fetch
git checkout dns_resolver_berkley
popd
mkdir cmake
cd cmake
cmake ..
cmake --build .
pushd iothub_client/samples/iothub_ll_telemetry_sample
./iothub_ll_telemetry_sample",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,279,2019-03-01T02:21:54Z,2019-08-31T17:22:41Z,2019-09-05T06:33:21Z,CLOSED,False,862,417,16,https://github.com/massand,[DO NOT MERGE] Async DNS resolver implementation,3,[],https://github.com/Azure/azure-c-shared-utility/pull/279,https://github.com/angelobt,11,https://github.com/Azure/azure-c-shared-utility/pull/279#issuecomment-494384695,"We are planning to add a asynchronous DNS resolution helper for the socket_io layers that can support the c-ares library (which is quite portable across many platforms).
This PR supports Windows and Linux platform only, so that we can vet the PAL changes for socket and dns_async addition. The plan is to leverage vcpkg / apt-get packages to obtain c-ares dependencies or assuming c-ares is part of your toolchain's sysroot/lib and /include (i.e. we do not plan to submodule c-ares).
How to build & test using iothub_ll_telemetry_sample on Windows with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c):

Install c-ares vcpkg

git clone https://github.com/Microsoft/vcpkg.git vcpkg_new
pushd vcpkg_new
.\bootstrap-vcpkg.bat
vcpkg integrate install
vcpkg install c-ares


Build SDK with async dns_resolver

git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver
popd
pushd umqtt\deps\c-utility
git fetch
git checkout dns_resolver
popd
mkdir cmake
cmake ..
cmake --build . -- /m /p:Configuration=Debug
iothub_client\samples\iothub_ll_telemetry_sample\Debug\iothub_ll_telemetry_sample.exe

In order to switch to the default synchronous DNS resolution, simply change the c-utility\CMakeLists.txt to dns_resolver_sync.c
How to build & test using iothub_ll_telemetry_sample on Linux with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c) -
sudo apt install libc-ares-dev
git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver_berkley
popd
pushd umqtt/deps/c-utility
git fetch
git checkout dns_resolver_berkley
popd
mkdir cmake
cd cmake
cmake ..
cmake --build .
pushd iothub_client/samples/iothub_ll_telemetry_sample
./iothub_ll_telemetry_sample","@massand
I have compiled the SDK but the first time I call
IoTHubClient_LL_DoWork function I get SIGSEGV (free invalid pointer)
azure-iot-sdk-c rev=1078a7bf699707ddddb8b2e08b57e1f8454a3cde
azure-umqtt-c rev=4fca26efad8f9ea9b4beb143099758314bd32e41
azure-uamqp-c rev=bae40b9d9a3939f666dc9ea137ba64e2b9fc0fb7
azure-c-shared-utility rev=8cccfe3f303b92740d86012077ea60abf254f0bd (dns_resolver_berkley)
Regards,
Angelo",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,279,2019-03-01T02:21:54Z,2019-08-31T17:22:41Z,2019-09-05T06:33:21Z,CLOSED,False,862,417,16,https://github.com/massand,[DO NOT MERGE] Async DNS resolver implementation,3,[],https://github.com/Azure/azure-c-shared-utility/pull/279,https://github.com/angelobt,12,https://github.com/Azure/azure-c-shared-utility/pull/279#issuecomment-494697532,"We are planning to add a asynchronous DNS resolution helper for the socket_io layers that can support the c-ares library (which is quite portable across many platforms).
This PR supports Windows and Linux platform only, so that we can vet the PAL changes for socket and dns_async addition. The plan is to leverage vcpkg / apt-get packages to obtain c-ares dependencies or assuming c-ares is part of your toolchain's sysroot/lib and /include (i.e. we do not plan to submodule c-ares).
How to build & test using iothub_ll_telemetry_sample on Windows with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c):

Install c-ares vcpkg

git clone https://github.com/Microsoft/vcpkg.git vcpkg_new
pushd vcpkg_new
.\bootstrap-vcpkg.bat
vcpkg integrate install
vcpkg install c-ares


Build SDK with async dns_resolver

git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver
popd
pushd umqtt\deps\c-utility
git fetch
git checkout dns_resolver
popd
mkdir cmake
cmake ..
cmake --build . -- /m /p:Configuration=Debug
iothub_client\samples\iothub_ll_telemetry_sample\Debug\iothub_ll_telemetry_sample.exe

In order to switch to the default synchronous DNS resolution, simply change the c-utility\CMakeLists.txt to dns_resolver_sync.c
How to build & test using iothub_ll_telemetry_sample on Linux with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c) -
sudo apt install libc-ares-dev
git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver_berkley
popd
pushd umqtt/deps/c-utility
git fetch
git checkout dns_resolver_berkley
popd
mkdir cmake
cd cmake
cmake ..
cmake --build .
pushd iothub_client/samples/iothub_ll_telemetry_sample
./iothub_ll_telemetry_sample","Hi,
in dns_resolver_create() function, DNSRESOLVER_INSTANCE struct is allocated with malloc and addrInfo field is not initialized. So if dns_resolver_destroy() is called before that field was initialized,
we get  free(): invalid pointer error.
Using calloc instead of malloc or initializing addrInfo field to NULL fixes the issue.
Please could you consider to use every time calloc instead of malloc ?
Best regards",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,279,2019-03-01T02:21:54Z,2019-08-31T17:22:41Z,2019-09-05T06:33:21Z,CLOSED,False,862,417,16,https://github.com/massand,[DO NOT MERGE] Async DNS resolver implementation,3,[],https://github.com/Azure/azure-c-shared-utility/pull/279,https://github.com/massand,13,https://github.com/Azure/azure-c-shared-utility/pull/279#issuecomment-526853346,"We are planning to add a asynchronous DNS resolution helper for the socket_io layers that can support the c-ares library (which is quite portable across many platforms).
This PR supports Windows and Linux platform only, so that we can vet the PAL changes for socket and dns_async addition. The plan is to leverage vcpkg / apt-get packages to obtain c-ares dependencies or assuming c-ares is part of your toolchain's sysroot/lib and /include (i.e. we do not plan to submodule c-ares).
How to build & test using iothub_ll_telemetry_sample on Windows with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c):

Install c-ares vcpkg

git clone https://github.com/Microsoft/vcpkg.git vcpkg_new
pushd vcpkg_new
.\bootstrap-vcpkg.bat
vcpkg integrate install
vcpkg install c-ares


Build SDK with async dns_resolver

git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver
popd
pushd umqtt\deps\c-utility
git fetch
git checkout dns_resolver
popd
mkdir cmake
cmake ..
cmake --build . -- /m /p:Configuration=Debug
iothub_client\samples\iothub_ll_telemetry_sample\Debug\iothub_ll_telemetry_sample.exe

In order to switch to the default synchronous DNS resolution, simply change the c-utility\CMakeLists.txt to dns_resolver_sync.c
How to build & test using iothub_ll_telemetry_sample on Linux with azure-iot-sdk-c
(note: an IoTHub connection string is required in azure-iot-sdk-c\iothub_client\samples\iothub_ll_telemetry_sample\iothub_ll_telemetry_sample.c) -
sudo apt install libc-ares-dev
git clone https://github.com/Azure/azure-iot-sdk-c.git 
cd azure-iot-sdk-c
git checkout 1078a7bf699707ddddb8b2e08b57e1f8454a3cde
git submodule update --init --recursive
pushd c-utility
git fetch
git checkout dns_resolver_berkley
popd
pushd umqtt/deps/c-utility
git fetch
git checkout dns_resolver_berkley
popd
mkdir cmake
cd cmake
cmake ..
cmake --build .
pushd iothub_client/samples/iothub_ll_telemetry_sample
./iothub_ll_telemetry_sample",I will reopen a new PR for this one when ready. Working on UTs and samples.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,280,2019-03-01T19:20:59Z,2019-03-25T19:12:14Z,2019-03-25T19:12:14Z,MERGED,True,150,14,12,https://github.com/jadeiceman,Add SQM ID to platform_get_platform_info string,8,[],https://github.com/Azure/azure-c-shared-utility/pull/280,https://github.com/jadeiceman,1,https://github.com/Azure/azure-c-shared-utility/pull/280,Adding an options parameter to platform_get_platform_info to add ability to include more information in returned string.  PLATFORM_OPTION_RETRIEVE_SQM adds the SQM ID to the string for Win32.,Adding an options parameter to platform_get_platform_info to add ability to include more information in returned string.  PLATFORM_OPTION_RETRIEVE_SQM adds the SQM ID to the string for Win32.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,280,2019-03-01T19:20:59Z,2019-03-25T19:12:14Z,2019-03-25T19:12:14Z,MERGED,True,150,14,12,https://github.com/jadeiceman,Add SQM ID to platform_get_platform_info string,8,[],https://github.com/Azure/azure-c-shared-utility/pull/280,https://github.com/jadeiceman,2,https://github.com/Azure/azure-c-shared-utility/pull/280#issuecomment-470215870,Adding an options parameter to platform_get_platform_info to add ability to include more information in returned string.  PLATFORM_OPTION_RETRIEVE_SQM adds the SQM ID to the string for Win32.,"@ewertons Thanks for the review!  I've made the requested changes, please let me know if there's anything else that needs to be addressed.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,280,2019-03-01T19:20:59Z,2019-03-25T19:12:14Z,2019-03-25T19:12:14Z,MERGED,True,150,14,12,https://github.com/jadeiceman,Add SQM ID to platform_get_platform_info string,8,[],https://github.com/Azure/azure-c-shared-utility/pull/280,https://github.com/YoDaMa,3,https://github.com/Azure/azure-c-shared-utility/pull/280#issuecomment-476333374,Adding an options parameter to platform_get_platform_info to add ability to include more information in returned string.  PLATFORM_OPTION_RETRIEVE_SQM adds the SQM ID to the string for Win32.,/azp run integrate-into-repo-C-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,280,2019-03-01T19:20:59Z,2019-03-25T19:12:14Z,2019-03-25T19:12:14Z,MERGED,True,150,14,12,https://github.com/jadeiceman,Add SQM ID to platform_get_platform_info string,8,[],https://github.com/Azure/azure-c-shared-utility/pull/280,https://github.com/apps/azure-pipelines,4,https://github.com/Azure/azure-c-shared-utility/pull/280#issuecomment-476333420,Adding an options parameter to platform_get_platform_info to add ability to include more information in returned string.  PLATFORM_OPTION_RETRIEVE_SQM adds the SQM ID to the string for Win32.,No pipelines are associated with this pull request.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,281,2019-03-04T22:26:18Z,2019-03-05T17:07:46Z,2019-03-05T18:07:05Z,MERGED,True,141,145,16,https://github.com/jebrando,Rename base64 module to avoid name clashes,5,[],https://github.com/Azure/azure-c-shared-utility/pull/281,https://github.com/jebrando,1,https://github.com/Azure/azure-c-shared-utility/pull/281,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,282,2019-03-04T22:43:22Z,2019-03-06T04:38:47Z,2019-03-07T18:20:15Z,MERGED,True,85,65,2,https://github.com/mattdurak,Change lock_win32 implementation from semaphore to SRWLOCK,3,[],https://github.com/Azure/azure-c-shared-utility/pull/282,https://github.com/mattdurak,1,https://github.com/Azure/azure-c-shared-utility/pull/282,"SRWLOCK implementation is more performant on Windows than Semaphores.
Also means that Lock and Unlock on Windows always return LOCK_OK.","SRWLOCK implementation is more performant on Windows than Semaphores.
Also means that Lock and Unlock on Windows always return LOCK_OK.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,282,2019-03-04T22:43:22Z,2019-03-06T04:38:47Z,2019-03-07T18:20:15Z,MERGED,True,85,65,2,https://github.com/mattdurak,Change lock_win32 implementation from semaphore to SRWLOCK,3,[],https://github.com/Azure/azure-c-shared-utility/pull/282,https://github.com/dcristoloveanu,2,https://github.com/Azure/azure-c-shared-utility/pull/282#issuecomment-469764111,"SRWLOCK implementation is more performant on Windows than Semaphores.
Also means that Lock and Unlock on Windows always return LOCK_OK.","LOCK_HANDLE Lock_Init(void)

Now if I say we should rename this to Lock_Creaate and Lock_Deinit to Lock_Destroy I think I would make many enemies. So don't :-). #Closed

Refers to: adapters/lock_win32.c:11 in 1516868. [](commit_id = 1516868, deletion_comment = False)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,283,2019-03-08T21:53:19Z,2019-03-09T03:24:18Z,2019-03-09T03:24:18Z,MERGED,True,2,2,2,https://github.com/anporumb,fix main.c,2,[],https://github.com/Azure/azure-c-shared-utility/pull/283,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/283,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,284,2019-03-18T20:25:04Z,2019-03-19T03:23:42Z,2019-07-04T04:06:04Z,MERGED,True,7094,8125,152,https://github.com/ewertons,Rename macro_utils defines to avoid collisions,2,[],https://github.com/Azure/azure-c-shared-utility/pull/284,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/284,"This commit changed the macros defined below to names prefixed with ""MU_"" whenever applicable.
When updating your code to consume this change, follow the new names below ( -> ).
Notice that, if present, FAILURE has been changed to MU_FAILURE.
C1 -> MU_C1
C2 -> MU_C2
C3 -> MU_C3
C4 -> MU_C4
C5 -> MU_C5
COUNT_1_OR_MORE_ARG -> MU_COUNT_1_OR_MORE_ARG
COUNT_ARG -> MU_COUNT_ARG
DEC -> MU_DEC
DECLARE_ENUM_STRINGS -> MU_DECLARE_ENUM_STRINGS
DEFINE_ENUM -> MU_DEFINE_ENUM
DEFINE_ENUMERATION_CONSTANT_AS_STRING -> MU_DEFINE_ENUMERATION_CONSTANT_AS_STRING
DEFINE_ENUMERATION_CONSTANT_AS_WIDESTRING -> MU_DEFINE_ENUMERATION_CONSTANT_AS_WIDESTRING
DEFINE_ENUM_STRINGS -> MU_DEFINE_ENUM_STRINGS
DEFINE_LOCAL_ENUM -> MU_DEFINE_LOCAL_ENUM
DEFINE_MICROMOCK -> MU_DEFINE_MICROMOCK
DISPTACH_EMPTY -> MU_DISPTACH_EMPTY
DIV2 -> MU_DIV2
DO -> MU_DO
EMPTY -> MU_EMPTY
ENUM_TO_STRING -> MU_ENUM_TO_STRING
EXPAND_ -> MU_EXPAND_
EXPAND_ARGS -> MU_EXPAND_ARGS
FOR_EACH -> MU_FOR_EACH
FOR_EACH_2 -> MU_FOR_EACH_2
IF -> MU_IF
IFCOMMA -> MU_IFCOMMA
IFCOMMA -> MU_IFCOMMA
INC -> MU_INC
INTERNALIF -> MU_INTERNALIF
ISEMPTY -> MU_ISEMPTY
ISZERO -> MU_ISZERO
LPAREN -> MU_LPAREN
MORE_THAN_1_ARG -> MU_MORE_THAN_1_ARG
P_OR_NULL -> MU_P_OR_NULL
STRING_TO_ENUM -> MU_STRING_TO_ENUM
THE_NTH_ARG -> MU_THE_NTH_ARG
TOSTRING -> MU_TOSTRING
WP_OR_NULL -> MU_WP_OR_NULL
TRIGGER_PARENTHESIS -> MU_TRIGGER_PARENTHESIS","This commit changed the macros defined below to names prefixed with ""MU_"" whenever applicable.
When updating your code to consume this change, follow the new names below ( -> ).
Notice that, if present, FAILURE has been changed to MU_FAILURE.
C1 -> MU_C1
C2 -> MU_C2
C3 -> MU_C3
C4 -> MU_C4
C5 -> MU_C5
COUNT_1_OR_MORE_ARG -> MU_COUNT_1_OR_MORE_ARG
COUNT_ARG -> MU_COUNT_ARG
DEC -> MU_DEC
DECLARE_ENUM_STRINGS -> MU_DECLARE_ENUM_STRINGS
DEFINE_ENUM -> MU_DEFINE_ENUM
DEFINE_ENUMERATION_CONSTANT_AS_STRING -> MU_DEFINE_ENUMERATION_CONSTANT_AS_STRING
DEFINE_ENUMERATION_CONSTANT_AS_WIDESTRING -> MU_DEFINE_ENUMERATION_CONSTANT_AS_WIDESTRING
DEFINE_ENUM_STRINGS -> MU_DEFINE_ENUM_STRINGS
DEFINE_LOCAL_ENUM -> MU_DEFINE_LOCAL_ENUM
DEFINE_MICROMOCK -> MU_DEFINE_MICROMOCK
DISPTACH_EMPTY -> MU_DISPTACH_EMPTY
DIV2 -> MU_DIV2
DO -> MU_DO
EMPTY -> MU_EMPTY
ENUM_TO_STRING -> MU_ENUM_TO_STRING
EXPAND_ -> MU_EXPAND_
EXPAND_ARGS -> MU_EXPAND_ARGS
FOR_EACH -> MU_FOR_EACH
FOR_EACH_2 -> MU_FOR_EACH_2
IF -> MU_IF
IFCOMMA -> MU_IFCOMMA
IFCOMMA -> MU_IFCOMMA
INC -> MU_INC
INTERNALIF -> MU_INTERNALIF
ISEMPTY -> MU_ISEMPTY
ISZERO -> MU_ISZERO
LPAREN -> MU_LPAREN
MORE_THAN_1_ARG -> MU_MORE_THAN_1_ARG
P_OR_NULL -> MU_P_OR_NULL
STRING_TO_ENUM -> MU_STRING_TO_ENUM
THE_NTH_ARG -> MU_THE_NTH_ARG
TOSTRING -> MU_TOSTRING
WP_OR_NULL -> MU_WP_OR_NULL
TRIGGER_PARENTHESIS -> MU_TRIGGER_PARENTHESIS",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,285,2019-03-19T20:59:18Z,2019-03-19T21:06:40Z,2019-05-06T18:25:34Z,MERGED,True,6,6,2,https://github.com/dcristoloveanu,Remove backticks from code,1,[],https://github.com/Azure/azure-c-shared-utility/pull/285,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/285,Remove backticks from code,Remove backticks from code,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,286,2019-03-26T20:26:33Z,2019-03-26T21:08:45Z,2019-03-26T21:08:48Z,MERGED,True,96,20,3,https://github.com/jebrando,Update mbedtls to fix missing option,2,[],https://github.com/Azure/azure-c-shared-utility/pull/286,https://github.com/jebrando,1,https://github.com/Azure/azure-c-shared-utility/pull/286,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,287,2019-03-27T16:00:59Z,2019-03-27T16:36:47Z,2019-03-27T16:36:50Z,MERGED,True,2,2,2,https://github.com/jebrando,Update ctest submodule,2,[],https://github.com/Azure/azure-c-shared-utility/pull/287,https://github.com/jebrando,1,https://github.com/Azure/azure-c-shared-utility/pull/287,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,288,2019-03-28T17:19:59Z,2019-03-28T17:30:08Z,2019-03-28T17:30:15Z,MERGED,True,3,0,1,https://github.com/jebrando,Adding a define for cpp unittests,1,[],https://github.com/Azure/azure-c-shared-utility/pull/288,https://github.com/jebrando,1,https://github.com/Azure/azure-c-shared-utility/pull/288,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,289,2019-03-28T22:55:37Z,2019-03-28T23:04:30Z,2019-05-06T18:25:32Z,MERGED,True,52,11646,45,https://github.com/dcristoloveanu,Submodule macro utils,5,[],https://github.com/Azure/azure-c-shared-utility/pull/289,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/289,Submodule macro utils,Submodule macro utils,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,290,2019-03-29T23:25:43Z,2019-03-30T00:05:16Z,2019-05-06T18:25:32Z,MERGED,True,4,3,2,https://github.com/dcristoloveanu,Add include_directories with MACRO_UTILS_INC,2,[],https://github.com/Azure/azure-c-shared-utility/pull/290,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/290,Add include_directories with MACRO_UTILS_INC,Add include_directories with MACRO_UTILS_INC,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,292,2019-04-04T19:41:44Z,2019-08-05T18:42:02Z,2020-01-17T00:38:13Z,MERGED,True,2854,2,11,https://github.com/markrad,Add BearSSL TLS adapter layer,42,[],https://github.com/Azure/azure-c-shared-utility/pull/292,https://github.com/markrad,1,https://github.com/Azure/azure-c-shared-utility/pull/292,"Adds support for BearSSL TLS library. Primarily this is being added for ESP8266 that are being using the Arduino environment to build IoT software based upon our C SDK. This TLS library is shipped with the ESP8266 board support package so it makes sense to support it. Performs full server certificate verification and supports X.509 authentication.
Build system has also been updated to allow the BearSSL TLS adapter to be used on a standard Linux platform should a customer desire. It is very light weight and a good candidate for low resource Linux devices too.","Adds support for BearSSL TLS library. Primarily this is being added for ESP8266 that are being using the Arduino environment to build IoT software based upon our C SDK. This TLS library is shipped with the ESP8266 board support package so it makes sense to support it. Performs full server certificate verification and supports X.509 authentication.
Build system has also been updated to allow the BearSSL TLS adapter to be used on a standard Linux platform should a customer desire. It is very light weight and a good candidate for low resource Linux devices too.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,292,2019-04-04T19:41:44Z,2019-08-05T18:42:02Z,2020-01-17T00:38:13Z,MERGED,True,2854,2,11,https://github.com/markrad,Add BearSSL TLS adapter layer,42,[],https://github.com/Azure/azure-c-shared-utility/pull/292,https://github.com/massand,2,https://github.com/Azure/azure-c-shared-utility/pull/292#issuecomment-484196587,"Adds support for BearSSL TLS library. Primarily this is being added for ESP8266 that are being using the Arduino environment to build IoT software based upon our C SDK. This TLS library is shipped with the ESP8266 board support package so it makes sense to support it. Performs full server certificate verification and supports X.509 authentication.
Build system has also been updated to allow the BearSSL TLS adapter to be used on a standard Linux platform should a customer desire. It is very light weight and a good candidate for low resource Linux devices too.",@markrad - could you please work with @ewertons to add a quick e2e validation for BearSSL on Linux in our lab. It will help ensure we don't break it going forward. This will likely be written within the azure-iot-sdk-c repo. You can post a branch and link the PR here. Thanks  #Resolved,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,292,2019-04-04T19:41:44Z,2019-08-05T18:42:02Z,2020-01-17T00:38:13Z,MERGED,True,2854,2,11,https://github.com/markrad,Add BearSSL TLS adapter layer,42,[],https://github.com/Azure/azure-c-shared-utility/pull/292,https://github.com/markrad,3,https://github.com/Azure/azure-c-shared-utility/pull/292#issuecomment-515237920,"Adds support for BearSSL TLS library. Primarily this is being added for ESP8266 that are being using the Arduino environment to build IoT software based upon our C SDK. This TLS library is shipped with the ESP8266 board support package so it makes sense to support it. Performs full server certificate verification and supports X.509 authentication.
Build system has also been updated to allow the BearSSL TLS adapter to be used on a standard Linux platform should a customer desire. It is very light weight and a good candidate for low resource Linux devices too.","I'm not that familiar with the E2E tests. Can't one just change the TLS library and run them? They don't do function mocking do they?

In reply to: 484196587 [](ancestors = 484196587)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,293,2019-04-05T19:53:03Z,2019-04-05T21:28:20Z,2019-04-05T21:28:22Z,MERGED,True,2,2,2,https://github.com/jebrando,Updating submodules for shared utility,2,[],https://github.com/Azure/azure-c-shared-utility/pull/293,https://github.com/jebrando,1,https://github.com/Azure/azure-c-shared-utility/pull/293,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,295,2019-04-09T00:15:14Z,2019-04-09T16:10:41Z,2019-04-09T16:10:41Z,MERGED,True,436,2,10,https://github.com/anporumb,have a compare function for 2 CONSTBUFFER_HANDLEs,1,[],https://github.com/Azure/azure-c-shared-utility/pull/295,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/295,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,296,2019-04-09T21:11:16Z,2019-04-10T20:34:31Z,2019-07-04T04:06:01Z,MERGED,True,6,6,1,https://github.com/ewertons,Fix macro_utils renaming in threadapi_rtx_mbed.cpp,1,[],https://github.com/Azure/azure-c-shared-utility/pull/296,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/296,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,297,2019-04-10T23:21:47Z,2019-04-11T00:36:09Z,2019-04-11T00:36:12Z,MERGED,True,245,276,121,https://github.com/jebrando,Update umock repo and renamed files that have changed,4,[],https://github.com/Azure/azure-c-shared-utility/pull/297,https://github.com/jebrando,1,https://github.com/Azure/azure-c-shared-utility/pull/297,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,301,2019-04-18T16:51:59Z,2019-04-18T18:39:51Z,2019-04-18T20:00:37Z,MERGED,True,90,27,4,https://github.com/jebrando,Update platform files to deal with mbedtls on linux,2,[],https://github.com/Azure/azure-c-shared-utility/pull/301,https://github.com/jebrando,1,https://github.com/Azure/azure-c-shared-utility/pull/301,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,302,2019-04-18T17:42:14Z,2019-04-18T23:36:39Z,2019-04-18T23:36:39Z,MERGED,True,740,214,5,https://github.com/anporumb,logerror captures stack traces,6,[],https://github.com/Azure/azure-c-shared-utility/pull/302,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/302,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,304,2019-04-30T06:51:55Z,2019-04-30T20:46:24Z,2019-05-04T15:35:43Z,MERGED,True,132,132,17,https://github.com/ArthurMa1978,Rename base32/64 to azure_base32/64,2,[],https://github.com/Azure/azure-c-shared-utility/pull/304,https://github.com/ArthurMa1978,1,https://github.com/Azure/azure-c-shared-utility/pull/304,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,307,2019-05-02T16:50:54Z,2019-05-06T17:29:08Z,2019-07-04T04:05:59Z,MERGED,True,6,6,1,https://github.com/ewertons,Update PLATFORM_INFO_OPTION enum to be defined using MU_DEFINE_ENUM,1,[],https://github.com/Azure/azure-c-shared-utility/pull/307,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/307,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,308,2019-05-04T15:45:44Z,2019-05-07T16:45:49Z,2019-05-07T16:45:49Z,MERGED,True,14,14,9,https://github.com/ArthurMa1978,Fix some base64/32 related files.,3,[],https://github.com/Azure/azure-c-shared-utility/pull/308,https://github.com/ArthurMa1978,1,https://github.com/Azure/azure-c-shared-utility/pull/308,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,309,2019-05-07T22:03:42Z,2019-05-08T16:41:52Z,2019-05-08T16:41:52Z,MERGED,True,1170,1,14,https://github.com/anporumb,move SRW/TIMER/STRING_UTILS to c shared,1,[],https://github.com/Azure/azure-c-shared-utility/pull/309,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/309,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,310,2019-05-08T12:22:21Z,2019-05-08T12:32:57Z,2019-05-08T12:32:57Z,CLOSED,False,2237,369,26,https://github.com/yinhew,Support streaming for HTTP API,75,[],https://github.com/Azure/azure-c-shared-utility/pull/310,https://github.com/yinhew,1,https://github.com/Azure/azure-c-shared-utility/pull/310,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,310,2019-05-08T12:22:21Z,2019-05-08T12:32:57Z,2019-05-08T12:32:57Z,CLOSED,False,2237,369,26,https://github.com/yinhew,Support streaming for HTTP API,75,[],https://github.com/Azure/azure-c-shared-utility/pull/310,https://github.com/yinhew,2,https://github.com/Azure/azure-c-shared-utility/pull/310#issuecomment-490467585,,This PR was created by mistake.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,311,2019-05-08T17:03:30Z,2019-05-08T18:41:24Z,2019-05-08T18:41:24Z,MERGED,True,88,36,7,https://github.com/ewertons,Fix building and producing configs when using installed dependencies,9,[],https://github.com/Azure/azure-c-shared-utility/pull/311,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/311,Please look at code for details.,Please look at code for details.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,312,2019-05-08T19:38:25Z,2019-05-08T20:20:02Z,2019-05-08T20:20:02Z,MERGED,True,576,1,5,https://github.com/anporumb,have unittests for SRW,2,[],https://github.com/Azure/azure-c-shared-utility/pull/312,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/312,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,313,2019-05-08T20:31:07Z,2019-05-08T20:38:51Z,2019-05-08T20:38:51Z,MERGED,True,1,1,1,https://github.com/anporumb,fix umock_c from umock-c target,1,[],https://github.com/Azure/azure-c-shared-utility/pull/313,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/313,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,314,2019-05-10T08:42:59Z,,2021-11-02T20:40:26Z,OPEN,False,21,5,1,https://github.com/mahilleb-msft,UUID_from_string: fix UUID_T overflow,3,[],https://github.com/Azure/azure-c-shared-utility/pull/314,https://github.com/mahilleb-msft,1,https://github.com/Azure/azure-c-shared-utility/pull/314,"Too few dashes in UUID string could have caused to write beyond UUID_T.
Check strictly for expected position with dashes.","Too few dashes in UUID string could have caused to write beyond UUID_T.
Check strictly for expected position with dashes.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,315,2019-05-13T16:32:45Z,2019-05-13T16:39:50Z,2019-07-04T04:05:56Z,MERGED,True,46,55,2,https://github.com/ewertons,Fix the way c-utility defines install(),2,[],https://github.com/Azure/azure-c-shared-utility/pull/315,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/315,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,316,2019-05-13T20:54:45Z,2019-05-13T21:13:35Z,2019-07-04T04:05:55Z,MERGED,True,1,1,1,https://github.com/ewertons,Keep c-shared installing headers on azureiot subdirectory,1,[],https://github.com/Azure/azure-c-shared-utility/pull/316,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/316,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,318,2019-05-14T22:18:17Z,2019-05-14T22:27:01Z,2019-05-14T22:32:45Z,MERGED,True,1,1,1,https://github.com/ewertons,Update umock-c,1,[],https://github.com/Azure/azure-c-shared-utility/pull/318,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/318,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,319,2019-05-15T16:37:37Z,2019-05-15T17:23:48Z,2019-07-04T04:04:37Z,MERGED,True,31,31,1,https://github.com/dcristoloveanu,Fix yml files to use the proper schema elements,1,[],https://github.com/Azure/azure-c-shared-utility/pull/319,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/319,Fix yml files to use the proper schema elements,Fix yml files to use the proper schema elements,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,320,2019-05-16T10:34:04Z,2019-05-19T07:38:29Z,2019-05-19T07:38:29Z,MERGED,True,13,13,1,https://github.com/ArthurMa1978,Fix base32 comments,2,[],https://github.com/Azure/azure-c-shared-utility/pull/320,https://github.com/ArthurMa1978,1,https://github.com/Azure/azure-c-shared-utility/pull/320,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,320,2019-05-16T10:34:04Z,2019-05-19T07:38:29Z,2019-05-19T07:38:29Z,MERGED,True,13,13,1,https://github.com/ArthurMa1978,Fix base32 comments,2,[],https://github.com/Azure/azure-c-shared-utility/pull/320,https://github.com/massand,2,https://github.com/Azure/azure-c-shared-utility/pull/320#issuecomment-493733879,,/azp run integrate-into-repo-C-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,320,2019-05-16T10:34:04Z,2019-05-19T07:38:29Z,2019-05-19T07:38:29Z,MERGED,True,13,13,1,https://github.com/ArthurMa1978,Fix base32 comments,2,[],https://github.com/Azure/azure-c-shared-utility/pull/320,https://github.com/apps/azure-pipelines,3,https://github.com/Azure/azure-c-shared-utility/pull/320#issuecomment-493733886,,No pipelines are associated with this pull request.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,321,2019-05-17T02:36:24Z,2019-05-17T16:43:13Z,2019-05-17T16:43:13Z,MERGED,True,545,18,6,https://github.com/anporumb,have CONSTBUFFER_CreateFromOffsetAndSize,1,[],https://github.com/Azure/azure-c-shared-utility/pull/321,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/321,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,322,2019-05-17T17:01:02Z,2019-05-17T17:38:51Z,2019-07-04T04:05:53Z,MERGED,True,6,6,4,https://github.com/ewertons,Fix for vcpkg,3,[],https://github.com/Azure/azure-c-shared-utility/pull/322,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/322,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,323,2019-05-20T21:22:23Z,2019-05-20T22:05:04Z,2019-05-20T22:05:04Z,MERGED,True,41,48,3,https://github.com/anporumb,allow 0 size for FromOffsetAndSize when offset is the last byte of source,2,[],https://github.com/Azure/azure-c-shared-utility/pull/323,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/323,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,324,2019-05-24T03:16:53Z,2019-05-24T18:08:01Z,2019-07-04T04:04:33Z,MERGED,True,35,19,7,https://github.com/dcristoloveanu,New dependencies and move test options saving out of dependencies.cmake,2,[],https://github.com/Azure/azure-c-shared-utility/pull/324,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/324,New dependencies and move test options saving out of dependencies.cmake,New dependencies and move test options saving out of dependencies.cmake,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,325,2019-05-24T19:55:32Z,2019-05-24T20:50:46Z,2019-07-04T04:04:32Z,MERGED,True,15,11,3,https://github.com/dcristoloveanu,Fix dependencies file to build when C shared is used without recursive cloning,2,[],https://github.com/Azure/azure-c-shared-utility/pull/325,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/325,Fix dependencies file to build when C shared is used without recursive cloning,Fix dependencies file to build when C shared is used without recursive cloning,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,327,2019-06-03T11:22:52Z,2021-11-02T20:43:33Z,2021-11-02T20:43:34Z,CLOSED,False,828,63,8,https://github.com/OYTIS,Add support for private keys in crypto devices,3,[],https://github.com/Azure/azure-c-shared-utility/pull/327,https://github.com/OYTIS,1,https://github.com/Azure/azure-c-shared-utility/pull/327,"The PR is related to this issue: Azure/azure-iot-sdk-c#1022
I tried to make changes to the API minimal, therefore the old option to add plain text private key is still there. Nevertheless, some changes to the API were necessary, so probably some projects depending on the c-utility can fail to build. If you approve the idea behind this PR, I can make fixes to the other ones.
Only OpenSSL is supported so far, but nothing prevents supporting other libraries.
No tests are included in this PR, I will definitely need maintainers' help here.
A PR to uhttp utilizing this will be made shortly.","The PR is related to this issue: Azure/azure-iot-sdk-c#1022
I tried to make changes to the API minimal, therefore the old option to add plain text private key is still there. Nevertheless, some changes to the API were necessary, so probably some projects depending on the c-utility can fail to build. If you approve the idea behind this PR, I can make fixes to the other ones.
Only OpenSSL is supported so far, but nothing prevents supporting other libraries.
No tests are included in this PR, I will definitely need maintainers' help here.
A PR to uhttp utilizing this will be made shortly.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,327,2019-06-03T11:22:52Z,2021-11-02T20:43:33Z,2021-11-02T20:43:34Z,CLOSED,False,828,63,8,https://github.com/OYTIS,Add support for private keys in crypto devices,3,[],https://github.com/Azure/azure-c-shared-utility/pull/327,https://github.com/OYTIS,2,https://github.com/Azure/azure-c-shared-utility/pull/327#issuecomment-518667830,"The PR is related to this issue: Azure/azure-iot-sdk-c#1022
I tried to make changes to the API minimal, therefore the old option to add plain text private key is still there. Nevertheless, some changes to the API were necessary, so probably some projects depending on the c-utility can fail to build. If you approve the idea behind this PR, I can make fixes to the other ones.
Only OpenSSL is supported so far, but nothing prevents supporting other libraries.
No tests are included in this PR, I will definitely need maintainers' help here.
A PR to uhttp utilizing this will be made shortly.","@jebrando @massand  @jspaith
Rebased on current master.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,327,2019-06-03T11:22:52Z,2021-11-02T20:43:33Z,2021-11-02T20:43:34Z,CLOSED,False,828,63,8,https://github.com/OYTIS,Add support for private keys in crypto devices,3,[],https://github.com/Azure/azure-c-shared-utility/pull/327,https://github.com/ericwol-msft,3,https://github.com/Azure/azure-c-shared-utility/pull/327#issuecomment-958151563,"The PR is related to this issue: Azure/azure-iot-sdk-c#1022
I tried to make changes to the API minimal, therefore the old option to add plain text private key is still there. Nevertheless, some changes to the API were necessary, so probably some projects depending on the c-utility can fail to build. If you approve the idea behind this PR, I can make fixes to the other ones.
Only OpenSSL is supported so far, but nothing prevents supporting other libraries.
No tests are included in this PR, I will definitely need maintainers' help here.
A PR to uhttp utilizing this will be made shortly.","Anton, we are not going to take this PR. OpenSSL engine is now supported in this SDK. Also please consider using the embedded C SDK at https://github.com/Azure/azure-sdk-for-c",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,331,2019-06-07T23:03:55Z,2019-06-08T02:05:11Z,2019-07-04T04:04:32Z,MERGED,True,60,40,55,https://github.com/dcristoloveanu,Fix tests includes and remove VLD checks,1,[],https://github.com/Azure/azure-c-shared-utility/pull/331,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/331,Fix tests includes and remove VLD checks,Fix tests includes and remove VLD checks,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,331,2019-06-07T23:03:55Z,2019-06-08T02:05:11Z,2019-07-04T04:04:32Z,MERGED,True,60,40,55,https://github.com/dcristoloveanu,Fix tests includes and remove VLD checks,1,[],https://github.com/Azure/azure-c-shared-utility/pull/331,https://github.com/anporumb,2,https://github.com/Azure/azure-c-shared-utility/pull/331#issuecomment-500065737,Fix tests includes and remove VLD checks,"// Copyright (c) Microsoft. All rights reserved.

not released under MIT? #Pending

Refers to: tests/srw_lock_ut/main.c:1 in 690865d. [](commit_id = 690865d, deletion_comment = False)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,331,2019-06-07T23:03:55Z,2019-06-08T02:05:11Z,2019-07-04T04:04:32Z,MERGED,True,60,40,55,https://github.com/dcristoloveanu,Fix tests includes and remove VLD checks,1,[],https://github.com/Azure/azure-c-shared-utility/pull/331,https://github.com/dcristoloveanu,3,https://github.com/Azure/azure-c-shared-utility/pull/331#issuecomment-500082674,Fix tests includes and remove VLD checks,"// Copyright (c) Microsoft. All rights reserved.

Fixed.

In reply to: 500065737 [](ancestors = 500065737)

Refers to: tests/srw_lock_ut/main.c:1 in 690865d. [](commit_id = 690865d, deletion_comment = False)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,332,2019-06-14T04:09:12Z,2019-06-17T22:28:42Z,2019-07-04T04:04:31Z,MERGED,True,354,238,78,https://github.com/dcristoloveanu,Fix includes,2,[],https://github.com/Azure/azure-c-shared-utility/pull/332,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/332,Fix includes,Fix includes,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,332,2019-06-14T04:09:12Z,2019-06-17T22:28:42Z,2019-07-04T04:04:31Z,MERGED,True,354,238,78,https://github.com/dcristoloveanu,Fix includes,2,[],https://github.com/Azure/azure-c-shared-utility/pull/332,https://github.com/mattdurak,2,https://github.com/Azure/azure-c-shared-utility/pull/332#issuecomment-502192198,Fix includes,"#include <stdint.h>

missing if def c++ cstdint #Resolved

Refers to: inc/azure_c_shared_utility/sha.h:30 in b77df06. [](commit_id = b77df06, deletion_comment = False)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,333,2019-06-18T20:29:12Z,2019-06-18T21:52:49Z,2019-07-04T04:04:23Z,MERGED,True,78,184,10,https://github.com/dcristoloveanu,Remove constbuffer real files,2,[],https://github.com/Azure/azure-c-shared-utility/pull/333,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/333,Remove constbuffer real files,Remove constbuffer real files,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,334,2019-06-20T19:24:37Z,2019-06-21T22:50:45Z,2019-06-22T00:41:17Z,CLOSED,False,4,1,1,https://github.com/rcdailey,Define USE_OPENSSL macro if it's enabled in CMake,1,[],https://github.com/Azure/azure-c-shared-utility/pull/334,https://github.com/rcdailey,1,https://github.com/Azure/azure-c-shared-utility/pull/334,"In platform_linux.c, USE_OPENSSL is not defined if it's enabled in cmake via the use_openssl option. Because of this, the header never gets included:
#ifdef USE_OPENSSL
#include ""azure_c_shared_utility/tlsio_openssl.h""
#endif
This is slightly related to Azure/azure-iot-sdk-c#999","In platform_linux.c, USE_OPENSSL is not defined if it's enabled in cmake via the use_openssl option. Because of this, the header never gets included:
#ifdef USE_OPENSSL
#include ""azure_c_shared_utility/tlsio_openssl.h""
#endif
This is slightly related to Azure/azure-iot-sdk-c#999",True,{'THUMBS_UP': ['https://github.com/Haythem-Zd']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,334,2019-06-20T19:24:37Z,2019-06-21T22:50:45Z,2019-06-22T00:41:17Z,CLOSED,False,4,1,1,https://github.com/rcdailey,Define USE_OPENSSL macro if it's enabled in CMake,1,[],https://github.com/Azure/azure-c-shared-utility/pull/334,https://github.com/rcdailey,2,https://github.com/Azure/azure-c-shared-utility/pull/334#issuecomment-504436383,"In platform_linux.c, USE_OPENSSL is not defined if it's enabled in cmake via the use_openssl option. Because of this, the header never gets included:
#ifdef USE_OPENSSL
#include ""azure_c_shared_utility/tlsio_openssl.h""
#endif
This is slightly related to Azure/azure-iot-sdk-c#999",@massand: If you have a moment...,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,334,2019-06-20T19:24:37Z,2019-06-21T22:50:45Z,2019-06-22T00:41:17Z,CLOSED,False,4,1,1,https://github.com/rcdailey,Define USE_OPENSSL macro if it's enabled in CMake,1,[],https://github.com/Azure/azure-c-shared-utility/pull/334,https://github.com/massand,3,https://github.com/Azure/azure-c-shared-utility/pull/334#issuecomment-504596895,"In platform_linux.c, USE_OPENSSL is not defined if it's enabled in cmake via the use_openssl option. Because of this, the header never gets included:
#ifdef USE_OPENSSL
#include ""azure_c_shared_utility/tlsio_openssl.h""
#endif
This is slightly related to Azure/azure-iot-sdk-c#999","@rcdailey thanks for the PR. The inclusion of USE_OPENSSL actually does occur on line 137 of the CMakeLists.txt. The higher order bit here that will help unblock here is the OS type. If it isn't set to MSVC, LINUX or APPLE, it ignores setting the CMAKE_C_FLAGS or CMAKE_CXX_FLAGS to include -DUSE_OPENSSL. We need to evaluate adding a new generic OS type or Android specifically to unblock folks, but at this point there aren't any plans to add this support.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,334,2019-06-20T19:24:37Z,2019-06-21T22:50:45Z,2019-06-22T00:41:17Z,CLOSED,False,4,1,1,https://github.com/rcdailey,Define USE_OPENSSL macro if it's enabled in CMake,1,[],https://github.com/Azure/azure-c-shared-utility/pull/334,https://github.com/massand,4,https://github.com/Azure/azure-c-shared-utility/pull/334#issuecomment-504598434,"In platform_linux.c, USE_OPENSSL is not defined if it's enabled in cmake via the use_openssl option. Because of this, the header never gets included:
#ifdef USE_OPENSSL
#include ""azure_c_shared_utility/tlsio_openssl.h""
#endif
This is slightly related to Azure/azure-iot-sdk-c#999","Also, I think it is possible to follow the compileOption_C cmake option pattern established in our azure-iot-sdk-c repo.
Here is how it is defined - https://github.com/Azure/azure-iot-sdk-c/blob/master/CMakeLists.txt#L77
Here is how it is used - https://github.com/Azure/azure-iot-sdk-c/blob/master/build_all/linux/build.sh#L130
You could submit another PR after you validate that pattern works for you. Thanks again.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,334,2019-06-20T19:24:37Z,2019-06-21T22:50:45Z,2019-06-22T00:41:17Z,CLOSED,False,4,1,1,https://github.com/rcdailey,Define USE_OPENSSL macro if it's enabled in CMake,1,[],https://github.com/Azure/azure-c-shared-utility/pull/334,https://github.com/rcdailey,5,https://github.com/Azure/azure-c-shared-utility/pull/334#issuecomment-504610143,"In platform_linux.c, USE_OPENSSL is not defined if it's enabled in cmake via the use_openssl option. Because of this, the header never gets included:
#ifdef USE_OPENSSL
#include ""azure_c_shared_utility/tlsio_openssl.h""
#endif
This is slightly related to Azure/azure-iot-sdk-c#999","Not sure why you closed this. Even though I linked back to Android support, that's got nothing to do with this PR. I would like this PR to remain open while we discuss options and modifications. If it ends up not being accepted after discussing, then I'd agree to closing this.
Enabling OpenSSL support is not a platform-specific behavior. The reason this isn't working is because you have the compiler flags duplicated under each platform-specific if condition. My solution is actually the correct one for a few reasons:

CMAKE_C_FLAGS and CMAKE_CXX_FLAGS are meant to be set from the command line. They aren't meant to be the first-class way of defining compiler flags for your targets. For that, you should be using add_definitions() or (preferrably) target_compile_definitions().
Mine sets the appropriate flags if OpenSSL is found and enabled. What determines whether or not the SSL-specific code should be enabled is the presence of OpenSSL, not a specific platform.

Please reconsider my proposal. I am happy to amend my commit with the removal of the compile flags you set around line 137. My change works with your existing setup and enables more use cases (such as Android, without you having to explicitly support it).",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,334,2019-06-20T19:24:37Z,2019-06-21T22:50:45Z,2019-06-22T00:41:17Z,CLOSED,False,4,1,1,https://github.com/rcdailey,Define USE_OPENSSL macro if it's enabled in CMake,1,[],https://github.com/Azure/azure-c-shared-utility/pull/334,https://github.com/rcdailey,6,https://github.com/Azure/azure-c-shared-utility/pull/334#issuecomment-504611215,"In platform_linux.c, USE_OPENSSL is not defined if it's enabled in cmake via the use_openssl option. Because of this, the header never gets included:
#ifdef USE_OPENSSL
#include ""azure_c_shared_utility/tlsio_openssl.h""
#endif
This is slightly related to Azure/azure-iot-sdk-c#999","@dcristoloveanu Could I get your opinion as well? I see you have a few commits in the repo.
EDIT: I have refactored my commit to replace the existing method of setting the ENABLE_OPENSSL preprocessor definition. But unfortunately the PR will not update to reflect that diff since it was closed.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,335,2019-06-21T21:34:03Z,2019-06-21T21:42:16Z,2019-07-04T04:04:22Z,MERGED,True,81,77,3,https://github.com/dcristoloveanu,Allow umock reals on memory_data,1,[],https://github.com/Azure/azure-c-shared-utility/pull/335,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/335,Allow umock reals on memory_data,Allow umock reals on memory_data,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,337,2019-07-01T09:15:35Z,2019-12-03T14:56:56Z,2019-12-03T14:56:56Z,CLOSED,False,46,0,1,https://github.com/alexmrtn,add mbedtls support for httpapi curl,1,[],https://github.com/Azure/azure-c-shared-utility/pull/337,https://github.com/alexmrtn,1,https://github.com/Azure/azure-c-shared-utility/pull/337,PR that address #336,PR that address #336,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,337,2019-07-01T09:15:35Z,2019-12-03T14:56:56Z,2019-12-03T14:56:56Z,CLOSED,False,46,0,1,https://github.com/alexmrtn,add mbedtls support for httpapi curl,1,[],https://github.com/Azure/azure-c-shared-utility/pull/337,https://github.com/alexmrtn,2,https://github.com/Azure/azure-c-shared-utility/pull/337#issuecomment-525746406,PR that address #336,Fixed + rebased on master + squash,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,338,2019-07-01T22:03:54Z,2019-07-01T22:33:16Z,2019-07-04T04:04:21Z,MERGED,True,19,0,1,https://github.com/dcristoloveanu,Add specs for constbuffer_array_create_with_move_memory,1,[],https://github.com/Azure/azure-c-shared-utility/pull/338,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/338,Add specs for constbuffer_array_create_with_move_memory,Add specs for constbuffer_array_create_with_move_memory,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,339,2019-07-02T00:08:17Z,2019-07-02T19:23:04Z,2019-07-04T04:04:20Z,MERGED,True,153,19,5,https://github.com/dcristoloveanu,Add constbufferarray_create_with_move_memory tests and code,1,[],https://github.com/Azure/azure-c-shared-utility/pull/339,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/339,Add constbufferarray_create_with_move_memory tests and code,Add constbufferarray_create_with_move_memory tests and code,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,340,2019-07-03T17:08:28Z,2019-07-09T01:21:23Z,2019-09-05T06:31:35Z,MERGED,True,4,36,14,https://github.com/dcristoloveanu,Update dependencies,2,[],https://github.com/Azure/azure-c-shared-utility/pull/340,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/340,Update dependencies,Update dependencies,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,342,2019-07-09T16:11:09Z,2019-07-10T22:10:36Z,2019-07-10T22:10:41Z,MERGED,True,113,46,5,https://github.com/jebrando,Fixing mbed tls not to close the socket until the TLS layer notifies the peer of closure,5,[],https://github.com/Azure/azure-c-shared-utility/pull/342,https://github.com/jebrando,1,https://github.com/Azure/azure-c-shared-utility/pull/342,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,343,2019-07-10T21:12:10Z,2019-07-10T21:49:46Z,2019-07-10T21:55:11Z,MERGED,True,94,3,3,https://github.com/mattdurak,Add wcs_to_mbs to string utils,1,[],https://github.com/Azure/azure-c-shared-utility/pull/343,https://github.com/mattdurak,1,https://github.com/Azure/azure-c-shared-utility/pull/343,Just the inverse of mbs_to_wcs,Just the inverse of mbs_to_wcs,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,344,2019-07-11T18:27:03Z,2019-07-11T20:01:12Z,2019-07-11T20:01:35Z,MERGED,True,10,8,2,https://github.com/mattdurak,real_ support for string_util mocks,1,[],https://github.com/Azure/azure-c-shared-utility/pull/344,https://github.com/mattdurak,1,https://github.com/Azure/azure-c-shared-utility/pull/344,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,345,2019-07-11T20:13:35Z,2019-07-11T20:33:34Z,2019-07-11T20:33:34Z,MERGED,True,4,4,1,https://github.com/mattdurak,Fix real support for string_utils when using cppunit,1,[],https://github.com/Azure/azure-c-shared-utility/pull/345,https://github.com/mattdurak,1,https://github.com/Azure/azure-c-shared-utility/pull/345,Need to cast the result of malloc so it can compile as c++,Need to cast the result of malloc so it can compile as c++,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,346,2019-07-22T22:19:48Z,2019-08-27T15:52:32Z,2019-08-27T15:52:39Z,MERGED,True,0,2106,10,https://github.com/dcristoloveanu,Remove old generator for macro utils and kick jenkins script,2,[],https://github.com/Azure/azure-c-shared-utility/pull/346,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/346,Remove old generator for macro utils and kick jenkins script,Remove old generator for macro utils and kick jenkins script,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,347,2019-07-29T21:24:17Z,2019-07-29T23:06:14Z,2019-07-29T23:06:18Z,MERGED,True,2,2,2,https://github.com/jebrando,Update submodule dep,2,[],https://github.com/Azure/azure-c-shared-utility/pull/347,https://github.com/jebrando,1,https://github.com/Azure/azure-c-shared-utility/pull/347,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,348,2019-08-01T09:01:37Z,,2021-11-02T20:48:30Z,OPEN,False,10,12,1,https://github.com/chlandsi,fix socketio queue bug on seeing EAGAIN,1,[],https://github.com/Azure/azure-c-shared-utility/pull/348,https://github.com/chlandsi,1,https://github.com/Azure/azure-c-shared-utility/pull/348,"Messages that cannot be sent right away because the call to send returns EAGAIN are not enqueued for retrying the send later, but discarded.","Messages that cannot be sent right away because the call to send returns EAGAIN are not enqueued for retrying the send later, but discarded.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,349,2019-08-01T19:38:25Z,2019-08-06T18:13:55Z,2019-08-06T18:13:55Z,MERGED,True,1,1,1,https://github.com/darobs,Improperly closed if statement in CMake functions.,4,[],https://github.com/Azure/azure-c-shared-utility/pull/349,https://github.com/darobs,1,https://github.com/Azure/azure-c-shared-utility/pull/349,A warning about an improperly closed if() statement came up when I was attempting a build.,A warning about an improperly closed if() statement came up when I was attempting a build.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,350,2019-08-01T20:46:21Z,2019-08-01T21:32:24Z,2019-08-01T21:32:34Z,MERGED,True,13,0,1,https://github.com/jebrando,Adding the remaining functions in real const buffer,1,[],https://github.com/Azure/azure-c-shared-utility/pull/350,https://github.com/jebrando,1,https://github.com/Azure/azure-c-shared-utility/pull/350,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,351,2019-08-05T17:27:35Z,2019-08-05T20:31:29Z,2019-08-05T20:31:34Z,MERGED,True,27,14,9,https://github.com/jebrando,Updating submodules,3,[],https://github.com/Azure/azure-c-shared-utility/pull/351,https://github.com/jebrando,1,https://github.com/Azure/azure-c-shared-utility/pull/351,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,352,2019-08-06T15:40:03Z,2021-11-02T20:51:12Z,2021-11-02T20:51:13Z,CLOSED,False,1091,63,10,https://github.com/OYTIS,Extend support for hardware keys to mbedTLS and wolfSSL,5,[],https://github.com/Azure/azure-c-shared-utility/pull/352,https://github.com/OYTIS,1,https://github.com/Azure/azure-c-shared-utility/pull/352,"Added support for MbedTLS and wolfSSL to #327
As there are some issues with wolfSSL and MbedTLS in the Azure SDK itself, it does not work perfectly, but it does show the same degree of correctness as cleartext keys.","Added support for MbedTLS and wolfSSL to #327
As there are some issues with wolfSSL and MbedTLS in the Azure SDK itself, it does not work perfectly, but it does show the same degree of correctness as cleartext keys.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,352,2019-08-06T15:40:03Z,2021-11-02T20:51:12Z,2021-11-02T20:51:13Z,CLOSED,False,1091,63,10,https://github.com/OYTIS,Extend support for hardware keys to mbedTLS and wolfSSL,5,[],https://github.com/Azure/azure-c-shared-utility/pull/352,https://github.com/ericwol-msft,2,https://github.com/Azure/azure-c-shared-utility/pull/352#issuecomment-958156532,"Added support for MbedTLS and wolfSSL to #327
As there are some issues with wolfSSL and MbedTLS in the Azure SDK itself, it does not work perfectly, but it does show the same degree of correctness as cleartext keys.","Anton, please evaluate the embedded C SDK. https://github.com/Azure/azure-sdk-for-c",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,353,2019-08-06T17:50:55Z,2019-08-06T18:07:06Z,2019-08-06T18:07:09Z,MERGED,True,11,11,2,https://github.com/jebrando,Fix base32 header to correct guard,1,[],https://github.com/Azure/azure-c-shared-utility/pull/353,https://github.com/jebrando,1,https://github.com/Azure/azure-c-shared-utility/pull/353,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,355,2019-08-14T14:10:02Z,2021-11-04T00:50:34Z,2021-11-04T00:50:35Z,CLOSED,False,7,8,2,https://github.com/DasRoteSkelett,Bugfix/location cmake config files on install,3,[],https://github.com/Azure/azure-c-shared-utility/pull/355,https://github.com/DasRoteSkelett,1,https://github.com/Azure/azure-c-shared-utility/pull/355,Trying to fix some of the cmake mess hopefully without breaking anything else,Trying to fix some of the cmake mess hopefully without breaking anything else,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,355,2019-08-14T14:10:02Z,2021-11-04T00:50:34Z,2021-11-04T00:50:35Z,CLOSED,False,7,8,2,https://github.com/DasRoteSkelett,Bugfix/location cmake config files on install,3,[],https://github.com/Azure/azure-c-shared-utility/pull/355,https://github.com/danewalton,2,https://github.com/Azure/azure-c-shared-utility/pull/355#issuecomment-960345991,Trying to fix some of the cmake mess hopefully without breaking anything else,closing in favor of #568,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,356,2019-08-17T03:24:01Z,2019-08-19T17:42:38Z,2019-09-05T06:31:33Z,MERGED,True,29,9,3,https://github.com/dcristoloveanu,Log to console when logging with ETW,1,[],https://github.com/Azure/azure-c-shared-utility/pull/356,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/356,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,357,2019-08-19T21:15:16Z,2019-08-19T21:27:13Z,2019-09-05T06:31:32Z,MERGED,True,34,24,1,https://github.com/dcristoloveanu,Add logging for ETW logging errors :-),1,[],https://github.com/Azure/azure-c-shared-utility/pull/357,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/357,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,360,2019-08-21T22:07:27Z,2019-08-21T23:41:47Z,2019-08-21T23:41:51Z,MERGED,True,7,0,1,https://github.com/jbobotek,Try new error fix by Mark Radbourne,2,[],https://github.com/Azure/azure-c-shared-utility/pull/360,https://github.com/jbobotek,1,https://github.com/Azure/azure-c-shared-utility/pull/360,Fix for bearssl not reporting an error when raised.,Fix for bearssl not reporting an error when raised.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,361,2019-08-21T22:47:48Z,2019-08-26T17:49:45Z,2019-08-26T17:49:45Z,MERGED,True,7,6,1,https://github.com/mattdurak,Support reals for vsprintf_char and vsprintf_wchar,2,[],https://github.com/Azure/azure-c-shared-utility/pull/361,https://github.com/mattdurak,1,https://github.com/Azure/azure-c-shared-utility/pull/361,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,362,2019-08-22T16:14:30Z,2019-08-26T18:03:00Z,2019-09-05T06:31:30Z,MERGED,True,318,0,7,https://github.com/amar-sagare,add a method for getting elapsed time in ms,8,[],https://github.com/Azure/azure-c-shared-utility/pull/362,https://github.com/amar-sagare,1,https://github.com/Azure/azure-c-shared-utility/pull/362,This method gets the elapsed time in milliseconds.,This method gets the elapsed time in milliseconds.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,363,2019-08-23T01:28:09Z,2019-09-03T23:56:35Z,2019-09-03T23:56:35Z,MERGED,True,8,8,2,https://github.com/rafilho,Adding C18 compiler support.,2,[],https://github.com/Azure/azure-c-shared-utility/pull/363,https://github.com/rafilho,1,https://github.com/Azure/azure-c-shared-utility/pull/363,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,364,2019-08-26T17:13:09Z,2019-08-30T17:36:31Z,2019-08-30T17:49:33Z,MERGED,True,148,25,9,https://github.com/jebrando,Update mbedtls to not send multiple complete messages for each send,9,[],https://github.com/Azure/azure-c-shared-utility/pull/364,https://github.com/jebrando,1,https://github.com/Azure/azure-c-shared-utility/pull/364,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,365,2019-08-29T20:08:39Z,2019-08-29T21:10:40Z,2019-08-29T21:10:40Z,MERGED,True,39,5,1,https://github.com/anporumb,stop printf logging when etw fails,1,[],https://github.com/Azure/azure-c-shared-utility/pull/365,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/365,ETW will make 1 printf and no more printf until ETW state is restored to working,ETW will make 1 printf and no more printf until ETW state is restored to working,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,366,2019-08-29T21:45:07Z,2019-09-09T22:08:08Z,2020-10-30T23:07:13Z,MERGED,True,401,9,6,https://github.com/mamokarz,Moka/fixhttpapiex,3,[],https://github.com/Azure/azure-c-shared-utility/pull/366,https://github.com/mamokarz,1,https://github.com/Azure/azure-c-shared-utility/pull/366,Force single initialization of HTTPAPIEX for upload to blob.,Force single initialization of HTTPAPIEX for upload to blob.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,366,2019-08-29T21:45:07Z,2019-09-09T22:08:08Z,2020-10-30T23:07:13Z,MERGED,True,401,9,6,https://github.com/mamokarz,Moka/fixhttpapiex,3,[],https://github.com/Azure/azure-c-shared-utility/pull/366,https://github.com/danewalton,2,https://github.com/Azure/azure-c-shared-utility/pull/366#issuecomment-526378399,Force single initialization of HTTPAPIEX for upload to blob.,"#ifdef __cplus

are tests for linux needed? #ByDesign

Refers to: tests/platform_win32_ut/platform_win32_ut.c:4 in bb8874a. [](commit_id = bb8874a, deletion_comment = False)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,366,2019-08-29T21:45:07Z,2019-09-09T22:08:08Z,2020-10-30T23:07:13Z,MERGED,True,401,9,6,https://github.com/mamokarz,Moka/fixhttpapiex,3,[],https://github.com/Azure/azure-c-shared-utility/pull/366,https://github.com/mamokarz,3,https://github.com/Azure/azure-c-shared-utility/pull/366#issuecomment-526397525,Force single initialization of HTTPAPIEX for upload to blob.,"#ifdef __cplus

Not for win32

In reply to: 526378399 [](ancestors = 526378399)

Refers to: tests/platform_win32_ut/platform_win32_ut.c:4 in bb8874a. [](commit_id = bb8874a, deletion_comment = False)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,366,2019-08-29T21:45:07Z,2019-09-09T22:08:08Z,2020-10-30T23:07:13Z,MERGED,True,401,9,6,https://github.com/mamokarz,Moka/fixhttpapiex,3,[],https://github.com/Azure/azure-c-shared-utility/pull/366,https://github.com/danewalton,4,https://github.com/Azure/azure-c-shared-utility/pull/366#issuecomment-526648864,Force single initialization of HTTPAPIEX for upload to blob.,"#ifdef __cplus

oh i mean for the adapter since there's a platform_win32.c and a platform_linux.c

In reply to: 526397525 [](ancestors = 526397525,526378399)

Refers to: tests/platform_win32_ut/platform_win32_ut.c:4 in bb8874a. [](commit_id = bb8874a, deletion_comment = False)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,366,2019-08-29T21:45:07Z,2019-09-09T22:08:08Z,2020-10-30T23:07:13Z,MERGED,True,401,9,6,https://github.com/mamokarz,Moka/fixhttpapiex,3,[],https://github.com/Azure/azure-c-shared-utility/pull/366,https://github.com/mamokarz,5,https://github.com/Azure/azure-c-shared-utility/pull/366#issuecomment-526682088,Force single initialization of HTTPAPIEX for upload to blob.,"#ifdef __cplus

We do not have UT for all adapters. We relay on E2E test for that. platform_linux.c is one of then.

In reply to: 526648864 [](ancestors = 526648864,526397525,526378399)

Refers to: tests/platform_win32_ut/platform_win32_ut.c:4 in bb8874a. [](commit_id = bb8874a, deletion_comment = False)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,366,2019-08-29T21:45:07Z,2019-09-09T22:08:08Z,2020-10-30T23:07:13Z,MERGED,True,401,9,6,https://github.com/mamokarz,Moka/fixhttpapiex,3,[],https://github.com/Azure/azure-c-shared-utility/pull/366,https://github.com/mamokarz,6,https://github.com/Azure/azure-c-shared-utility/pull/366#issuecomment-529669292,Force single initialization of HTTPAPIEX for upload to blob.,/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,366,2019-08-29T21:45:07Z,2019-09-09T22:08:08Z,2020-10-30T23:07:13Z,MERGED,True,401,9,6,https://github.com/mamokarz,Moka/fixhttpapiex,3,[],https://github.com/Azure/azure-c-shared-utility/pull/366,https://github.com/apps/azure-pipelines,7,https://github.com/Azure/azure-c-shared-utility/pull/366#issuecomment-529669325,Force single initialization of HTTPAPIEX for upload to blob.,No pipelines are associated with this pull request.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,367,2019-08-30T17:48:06Z,2019-08-30T20:06:41Z,2019-08-30T20:06:41Z,MERGED,True,83,86,1,https://github.com/anporumb,console and etw should work together in lasterror cases,2,[],https://github.com/Azure/azure-c-shared-utility/pull/367,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/367,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,368,2019-09-04T00:04:41Z,2019-09-04T17:58:28Z,2019-09-05T06:31:44Z,MERGED,True,46,0,1,https://github.com/hihigupt,Add x509 httpapicurl mbedtls,1,[],https://github.com/Azure/azure-c-shared-utility/pull/368,https://github.com/hihigupt,1,https://github.com/Azure/azure-c-shared-utility/pull/368,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,369,2019-09-04T05:54:27Z,2019-09-04T17:09:12Z,2019-09-05T06:31:46Z,MERGED,True,1,1,1,https://github.com/hihigupt,Fix mbedtls jenkins script,1,[],https://github.com/Azure/azure-c-shared-utility/pull/369,https://github.com/hihigupt,1,https://github.com/Azure/azure-c-shared-utility/pull/369,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,370,2019-09-05T00:16:11Z,2019-09-05T15:59:13Z,2019-09-05T15:59:13Z,MERGED,True,14,11,11,https://github.com/dcristoloveanu,Update dependencies,1,[],https://github.com/Azure/azure-c-shared-utility/pull/370,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/370,Update dependencies,Update dependencies,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,371,2019-09-05T22:23:53Z,2019-09-05T23:52:48Z,2020-01-16T21:51:40Z,MERGED,True,5,1,2,https://github.com/hihigupt,[BugFix] Fix mbedtls port,1,[],https://github.com/Azure/azure-c-shared-utility/pull/371,https://github.com/hihigupt,1,https://github.com/Azure/azure-c-shared-utility/pull/371,"Fixing mbedtls port when using mbedtls over proxy.
Azure/azure-iot-sdk-c#1137","Fixing mbedtls port when using mbedtls over proxy.
Azure/azure-iot-sdk-c#1137",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,372,2019-09-06T17:46:55Z,2019-09-06T17:53:29Z,2019-09-07T00:20:55Z,MERGED,True,4,4,4,https://github.com/dcristoloveanu,Update dependencies,1,[],https://github.com/Azure/azure-c-shared-utility/pull/372,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/372,Update dependencies,Update dependencies,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,373,2019-09-10T16:13:12Z,2019-09-10T16:31:32Z,2019-09-10T16:34:10Z,MERGED,True,2,2,1,https://github.com/jebrando,Fix check for lock result in openssl tlsio,1,[],https://github.com/Azure/azure-c-shared-utility/pull/373,https://github.com/jebrando,1,https://github.com/Azure/azure-c-shared-utility/pull/373,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,374,2019-09-12T22:29:24Z,2019-09-19T18:44:57Z,2020-10-27T03:29:03Z,MERGED,True,1177,587,21,https://github.com/massand,Async DNS resolution using c-ares,11,[],https://github.com/Azure/azure-c-shared-utility/pull/374,https://github.com/massand,1,https://github.com/Azure/azure-c-shared-utility/pull/374,"Adding a asynchronous DNS resolution helper for the socket_io layers that can support the c-ares library (which is quite portable across many platforms).
Currently, the async DNS functionality supports Linux sockets only. In order to use the new helper, a cmake option named 'use-cares' is used to reference the C-ares libraries (obtained via apt-get on the Linux build system). Therefore, it is assumed that c-ares is part of your toolchain's sysroot/lib and /include (i.e. we do not plan to submodule c-ares), akin to how OpenSSL dependency is structured.
The dns_resolver adds a thin interface atop the current DNS resolution functionality (i.e. getaddrinfo) and socket_win32 & socket_berkley changes were made to use that interface across both sync and async DNS implementations.
The socket UT and e2e validation is complete. The e2e test infra changes are introduced in a separate azure-iot-sdk-c PR.","Adding a asynchronous DNS resolution helper for the socket_io layers that can support the c-ares library (which is quite portable across many platforms).
Currently, the async DNS functionality supports Linux sockets only. In order to use the new helper, a cmake option named 'use-cares' is used to reference the C-ares libraries (obtained via apt-get on the Linux build system). Therefore, it is assumed that c-ares is part of your toolchain's sysroot/lib and /include (i.e. we do not plan to submodule c-ares), akin to how OpenSSL dependency is structured.
The dns_resolver adds a thin interface atop the current DNS resolution functionality (i.e. getaddrinfo) and socket_win32 & socket_berkley changes were made to use that interface across both sync and async DNS implementations.
The socket UT and e2e validation is complete. The e2e test infra changes are introduced in a separate azure-iot-sdk-c PR.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,374,2019-09-12T22:29:24Z,2019-09-19T18:44:57Z,2020-10-27T03:29:03Z,MERGED,True,1177,587,21,https://github.com/massand,Async DNS resolution using c-ares,11,[],https://github.com/Azure/azure-c-shared-utility/pull/374,https://github.com/danewalton,2,https://github.com/Azure/azure-c-shared-utility/pull/374#issuecomment-532298533,"Adding a asynchronous DNS resolution helper for the socket_io layers that can support the c-ares library (which is quite portable across many platforms).
Currently, the async DNS functionality supports Linux sockets only. In order to use the new helper, a cmake option named 'use-cares' is used to reference the C-ares libraries (obtained via apt-get on the Linux build system). Therefore, it is assumed that c-ares is part of your toolchain's sysroot/lib and /include (i.e. we do not plan to submodule c-ares), akin to how OpenSSL dependency is structured.
The dns_resolver adds a thin interface atop the current DNS resolution functionality (i.e. getaddrinfo) and socket_win32 & socket_berkley changes were made to use that interface across both sync and async DNS implementations.
The socket UT and e2e validation is complete. The e2e test infra changes are introduced in a separate azure-iot-sdk-c PR.",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,374,2019-09-12T22:29:24Z,2019-09-19T18:44:57Z,2020-10-27T03:29:03Z,MERGED,True,1177,587,21,https://github.com/massand,Async DNS resolution using c-ares,11,[],https://github.com/Azure/azure-c-shared-utility/pull/374,https://github.com/apps/azure-pipelines,3,https://github.com/Azure/azure-c-shared-utility/pull/374#issuecomment-532298570,"Adding a asynchronous DNS resolution helper for the socket_io layers that can support the c-ares library (which is quite portable across many platforms).
Currently, the async DNS functionality supports Linux sockets only. In order to use the new helper, a cmake option named 'use-cares' is used to reference the C-ares libraries (obtained via apt-get on the Linux build system). Therefore, it is assumed that c-ares is part of your toolchain's sysroot/lib and /include (i.e. we do not plan to submodule c-ares), akin to how OpenSSL dependency is structured.
The dns_resolver adds a thin interface atop the current DNS resolution functionality (i.e. getaddrinfo) and socket_win32 & socket_berkley changes were made to use that interface across both sync and async DNS implementations.
The socket UT and e2e validation is complete. The e2e test infra changes are introduced in a separate azure-iot-sdk-c PR.",No pipelines are associated with this pull request.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,374,2019-09-12T22:29:24Z,2019-09-19T18:44:57Z,2020-10-27T03:29:03Z,MERGED,True,1177,587,21,https://github.com/massand,Async DNS resolution using c-ares,11,[],https://github.com/Azure/azure-c-shared-utility/pull/374,https://github.com/massand,4,https://github.com/Azure/azure-c-shared-utility/pull/374#issuecomment-532446690,"Adding a asynchronous DNS resolution helper for the socket_io layers that can support the c-ares library (which is quite portable across many platforms).
Currently, the async DNS functionality supports Linux sockets only. In order to use the new helper, a cmake option named 'use-cares' is used to reference the C-ares libraries (obtained via apt-get on the Linux build system). Therefore, it is assumed that c-ares is part of your toolchain's sysroot/lib and /include (i.e. we do not plan to submodule c-ares), akin to how OpenSSL dependency is structured.
The dns_resolver adds a thin interface atop the current DNS resolution functionality (i.e. getaddrinfo) and socket_win32 & socket_berkley changes were made to use that interface across both sync and async DNS implementations.
The socket UT and e2e validation is complete. The e2e test infra changes are introduced in a separate azure-iot-sdk-c PR.",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,374,2019-09-12T22:29:24Z,2019-09-19T18:44:57Z,2020-10-27T03:29:03Z,MERGED,True,1177,587,21,https://github.com/massand,Async DNS resolution using c-ares,11,[],https://github.com/Azure/azure-c-shared-utility/pull/374,https://github.com/apps/azure-pipelines,5,https://github.com/Azure/azure-c-shared-utility/pull/374#issuecomment-532446858,"Adding a asynchronous DNS resolution helper for the socket_io layers that can support the c-ares library (which is quite portable across many platforms).
Currently, the async DNS functionality supports Linux sockets only. In order to use the new helper, a cmake option named 'use-cares' is used to reference the C-ares libraries (obtained via apt-get on the Linux build system). Therefore, it is assumed that c-ares is part of your toolchain's sysroot/lib and /include (i.e. we do not plan to submodule c-ares), akin to how OpenSSL dependency is structured.
The dns_resolver adds a thin interface atop the current DNS resolution functionality (i.e. getaddrinfo) and socket_win32 & socket_berkley changes were made to use that interface across both sync and async DNS implementations.
The socket UT and e2e validation is complete. The e2e test infra changes are introduced in a separate azure-iot-sdk-c PR.",No pipelines are associated with this pull request.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,374,2019-09-12T22:29:24Z,2019-09-19T18:44:57Z,2020-10-27T03:29:03Z,MERGED,True,1177,587,21,https://github.com/massand,Async DNS resolution using c-ares,11,[],https://github.com/Azure/azure-c-shared-utility/pull/374,https://github.com/massand,6,https://github.com/Azure/azure-c-shared-utility/pull/374#issuecomment-533246439,"Adding a asynchronous DNS resolution helper for the socket_io layers that can support the c-ares library (which is quite portable across many platforms).
Currently, the async DNS functionality supports Linux sockets only. In order to use the new helper, a cmake option named 'use-cares' is used to reference the C-ares libraries (obtained via apt-get on the Linux build system). Therefore, it is assumed that c-ares is part of your toolchain's sysroot/lib and /include (i.e. we do not plan to submodule c-ares), akin to how OpenSSL dependency is structured.
The dns_resolver adds a thin interface atop the current DNS resolution functionality (i.e. getaddrinfo) and socket_win32 & socket_berkley changes were made to use that interface across both sync and async DNS implementations.
The socket UT and e2e validation is complete. The e2e test infra changes are introduced in a separate azure-iot-sdk-c PR.",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,374,2019-09-12T22:29:24Z,2019-09-19T18:44:57Z,2020-10-27T03:29:03Z,MERGED,True,1177,587,21,https://github.com/massand,Async DNS resolution using c-ares,11,[],https://github.com/Azure/azure-c-shared-utility/pull/374,https://github.com/apps/azure-pipelines,7,https://github.com/Azure/azure-c-shared-utility/pull/374#issuecomment-533246480,"Adding a asynchronous DNS resolution helper for the socket_io layers that can support the c-ares library (which is quite portable across many platforms).
Currently, the async DNS functionality supports Linux sockets only. In order to use the new helper, a cmake option named 'use-cares' is used to reference the C-ares libraries (obtained via apt-get on the Linux build system). Therefore, it is assumed that c-ares is part of your toolchain's sysroot/lib and /include (i.e. we do not plan to submodule c-ares), akin to how OpenSSL dependency is structured.
The dns_resolver adds a thin interface atop the current DNS resolution functionality (i.e. getaddrinfo) and socket_win32 & socket_berkley changes were made to use that interface across both sync and async DNS implementations.
The socket UT and e2e validation is complete. The e2e test infra changes are introduced in a separate azure-iot-sdk-c PR.",No pipelines are associated with this pull request.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,375,2019-09-13T22:47:01Z,2019-09-13T23:16:04Z,2020-10-26T23:28:25Z,MERGED,True,2035,38,17,https://github.com/dcristoloveanu,Add constbuffer_array_batcher,1,[],https://github.com/Azure/azure-c-shared-utility/pull/375,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/375,Add constbuffer_array_batcher,Add constbuffer_array_batcher,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,378,2019-09-18T21:25:53Z,2019-09-20T18:05:35Z,2019-09-20T18:05:35Z,MERGED,True,4,13,1,https://github.com/anporumb,use 0 && printf instead of an if branch that is never executed,3,[],https://github.com/Azure/azure-c-shared-utility/pull/378,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/378,"The proposed solution takes 1 pragma out.
And it always results in all branches taken for coverage when Log macros are used in code.","The proposed solution takes 1 pragma out.
And it always results in all branches taken for coverage when Log macros are used in code.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,380,2019-09-19T22:07:12Z,2019-09-20T18:52:12Z,2020-10-30T22:15:12Z,MERGED,True,7,21,1,https://github.com/ewertons,Fix critical socketio_berkeley bug where socketio_send() will drop packets if send() returns -1 and errno=EAGAIN,3,[],https://github.com/Azure/azure-c-shared-utility/pull/380,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/380,"This is a fix for a bug in socketio_berkeley where packets may be lost by socketio_send().
In socketio_send, if send() returns -1 and errno is EAGAIN, the packet does not get added to the pending I/O queue and gets dropped.
This was caught by attempting to send huge amounts of data in a single shot to a remote endpoint which is applying throttling.
After a few calls to socketio_send where packets were lost, on the first call to send() that succeeds, the remote endpoint receives data out of order (since previous packets got dropped by socketio), cannot decrypt it and severs the connection.
The other socketio adapters are not affected by this bug (see socketio_mbed.c, socketio_mbed_os5.c, socketio_win32.c).
Note: there are no tests for this module. E2E tests would need to be added to correctly verify the behavior of socketio (and other xio layers) on key conditions (network latency/delay, high-throughput, etc).
For reference: On non-blocking mode send() will return -1 and errno=EAGAIN if the socket is not ready to send (see https://linux.die.net/man/3/send).","This is a fix for a bug in socketio_berkeley where packets may be lost by socketio_send().
In socketio_send, if send() returns -1 and errno is EAGAIN, the packet does not get added to the pending I/O queue and gets dropped.
This was caught by attempting to send huge amounts of data in a single shot to a remote endpoint which is applying throttling.
After a few calls to socketio_send where packets were lost, on the first call to send() that succeeds, the remote endpoint receives data out of order (since previous packets got dropped by socketio), cannot decrypt it and severs the connection.
The other socketio adapters are not affected by this bug (see socketio_mbed.c, socketio_mbed_os5.c, socketio_win32.c).
Note: there are no tests for this module. E2E tests would need to be added to correctly verify the behavior of socketio (and other xio layers) on key conditions (network latency/delay, high-throughput, etc).
For reference: On non-blocking mode send() will return -1 and errno=EAGAIN if the socket is not ready to send (see https://linux.die.net/man/3/send).",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,382,2019-09-23T23:05:38Z,2019-09-24T01:04:55Z,2019-09-24T01:04:55Z,MERGED,True,51,38,1,https://github.com/anporumb,fix one instance of a condition being constant,2,[],https://github.com/Azure/azure-c-shared-utility/pull/382,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/382,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,383,2019-09-24T15:09:26Z,2019-09-24T16:38:31Z,2019-09-24T16:38:31Z,MERGED,True,110,0,5,https://github.com/anporumb,make sure logging works with all cmake options,6,[],https://github.com/Azure/azure-c-shared-utility/pull/383,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/383,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,384,2019-09-25T09:18:50Z,2019-10-08T05:35:28Z,2019-10-08T05:35:28Z,CLOSED,False,4847,0,26,https://github.com/bo-ms,Add threadx porting files.,1,[],https://github.com/Azure/azure-c-shared-utility/pull/384,https://github.com/bo-ms,1,https://github.com/Azure/azure-c-shared-utility/pull/384,"Trying to add threadx porting files and threadx platform tests. Plan to work on user guide, cmake and samples in following PRs.
src folder contains the threadx porting files.
tests folder contains the threadx platform unit tests, check pal/threadx/tests/README.md to get more details about test.","Trying to add threadx porting files and threadx platform tests. Plan to work on user guide, cmake and samples in following PRs.
src folder contains the threadx porting files.
tests folder contains the threadx platform unit tests, check pal/threadx/tests/README.md to get more details about test.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,384,2019-09-25T09:18:50Z,2019-10-08T05:35:28Z,2019-10-08T05:35:28Z,CLOSED,False,4847,0,26,https://github.com/bo-ms,Add threadx porting files.,1,[],https://github.com/Azure/azure-c-shared-utility/pull/384,https://github.com/bo-ms,2,https://github.com/Azure/azure-c-shared-utility/pull/384#issuecomment-539336980,"Trying to add threadx porting files and threadx platform tests. Plan to work on user guide, cmake and samples in following PRs.
src folder contains the threadx porting files.
tests folder contains the threadx platform unit tests, check pal/threadx/tests/README.md to get more details about test.","Decouple the C-SDK with the porting layers, so decline this PR.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,386,2019-09-27T20:04:05Z,2019-09-27T20:32:42Z,2020-10-30T22:15:11Z,MERGED,True,3,2,1,https://github.com/ewertons,Fixes socketio_berkeley  send() in case not all bytes are sent in one shot,1,[],https://github.com/Azure/azure-c-shared-utility/pull/386,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/386,We didn't get this failure until DeviceStreaming e2e tests failed on public-preview.,We didn't get this failure until DeviceStreaming e2e tests failed on public-preview.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,386,2019-09-27T20:04:05Z,2019-09-27T20:32:42Z,2020-10-30T22:15:11Z,MERGED,True,3,2,1,https://github.com/ewertons,Fixes socketio_berkeley  send() in case not all bytes are sent in one shot,1,[],https://github.com/Azure/azure-c-shared-utility/pull/386,https://github.com/ewertons,2,https://github.com/Azure/azure-c-shared-utility/pull/386#issuecomment-536082555,We didn't get this failure until DeviceStreaming e2e tests failed on public-preview.,For reference: https://linux.die.net/man/3/send,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,387,2019-09-30T22:21:40Z,2019-10-01T15:14:50Z,2019-10-01T15:23:08Z,MERGED,True,1,1,1,https://github.com/ewertons,Fix bug in logging_ut (Cannot find source file: ../../../res/etwlogger.rc),1,[],https://github.com/Azure/azure-c-shared-utility/pull/387,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/387,"Introduced by commit:
ade27f3","Introduced by commit:
ade27f3",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,388,2019-10-01T20:42:49Z,2019-10-01T21:40:57Z,2019-10-01T21:41:03Z,MERGED,True,26,33,1,https://github.com/anporumb,better logging of the lost etw messages,3,[],https://github.com/Azure/azure-c-shared-utility/pull/388,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/388,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,389,2019-10-01T21:42:25Z,2019-10-22T18:00:47Z,2019-10-22T18:00:47Z,MERGED,True,5,5,5,https://github.com/gregman-msft,updating porting guide links,7,[],https://github.com/Azure/azure-c-shared-utility/pull/389,https://github.com/gregman-msft,1,https://github.com/Azure/azure-c-shared-utility/pull/389,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,389,2019-10-01T21:42:25Z,2019-10-22T18:00:47Z,2019-10-22T18:00:47Z,MERGED,True,5,5,5,https://github.com/gregman-msft,updating porting guide links,7,[],https://github.com/Azure/azure-c-shared-utility/pull/389,https://github.com/gregman-msft,2,https://github.com/Azure/azure-c-shared-utility/pull/389#issuecomment-545069106,,/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,389,2019-10-01T21:42:25Z,2019-10-22T18:00:47Z,2019-10-22T18:00:47Z,MERGED,True,5,5,5,https://github.com/gregman-msft,updating porting guide links,7,[],https://github.com/Azure/azure-c-shared-utility/pull/389,https://github.com/apps/azure-pipelines,3,https://github.com/Azure/azure-c-shared-utility/pull/389#issuecomment-545069137,,Commenter does not have sufficient privileges for PR 389 in repo Azure/azure-c-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,390,2019-10-02T16:59:51Z,2019-10-03T17:29:01Z,2020-10-30T22:15:08Z,MERGED,True,5,4,1,https://github.com/ewertons,Fix critical socketio_win32 bug where socketio_send() will drop packets if send() returns SOCKET_ERROR and WSAEWOULDBLOCK,1,[],https://github.com/Azure/azure-c-shared-utility/pull/390,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/390,"For reference:
https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-send
""If no error occurs, send returns the total number of bytes sent,
which can be less than the number requested to be sent in the len parameter.
Otherwise, a value of SOCKET_ERROR is returned, and a specific error code can be retrieved by calling WSAGetLastError.""

Investigation of socketio implementations for mbed:
adapters\socketio_mbed.c
socketio_send(...):
It has the correct logic to handle failure (<0) or not all bytes send in one call to tcpsocketconnection_send.
adapters\socketio_mbed_os5.c
socketio_send():
Always adds to the queue, does not try to send right away.
send_queued_data() has the correct logic to handle error (-1) or not sending all bytes in one call to tcpsocketconnection_send.
For reference:
https://os.mbed.com/users/mbed_official/code/Socket/docs/434906b5b977/TCPSocketConnection_8cpp_source.html
00048 int TCPSocketConnection::send(char* data, int length) {
if ((_sock_fd < 0) || !_is_connected)
return -1;
if (!_blocking) {
    TimeInterval timeout(_timeout);
    if (wait_writable(timeout) != 0)
        return -1;
}

int n = lwip_send(_sock_fd, data, length, 0);
_is_connected = (n != 0);

return n;

}
http://api.tst-sistemas.es/apitsmart-1.2/group___l_w_i_p___exported___functions.html#ga7c670890d4d4e7729d152eece5ac89e0
""Returns
Number of bytes sent
-1 - Failure""","For reference:
https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-send
""If no error occurs, send returns the total number of bytes sent,
which can be less than the number requested to be sent in the len parameter.
Otherwise, a value of SOCKET_ERROR is returned, and a specific error code can be retrieved by calling WSAGetLastError.""

Investigation of socketio implementations for mbed:
adapters\socketio_mbed.c
socketio_send(...):
It has the correct logic to handle failure (<0) or not all bytes send in one call to tcpsocketconnection_send.
adapters\socketio_mbed_os5.c
socketio_send():
Always adds to the queue, does not try to send right away.
send_queued_data() has the correct logic to handle error (-1) or not sending all bytes in one call to tcpsocketconnection_send.
For reference:
https://os.mbed.com/users/mbed_official/code/Socket/docs/434906b5b977/TCPSocketConnection_8cpp_source.html
00048 int TCPSocketConnection::send(char* data, int length) {
if ((_sock_fd < 0) || !_is_connected)
return -1;
if (!_blocking) {
    TimeInterval timeout(_timeout);
    if (wait_writable(timeout) != 0)
        return -1;
}

int n = lwip_send(_sock_fd, data, length, 0);
_is_connected = (n != 0);

return n;

}
http://api.tst-sistemas.es/apitsmart-1.2/group___l_w_i_p___exported___functions.html#ga7c670890d4d4e7729d152eece5ac89e0
""Returns
Number of bytes sent
-1 - Failure""",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,390,2019-10-02T16:59:51Z,2019-10-03T17:29:01Z,2020-10-30T22:15:08Z,MERGED,True,5,4,1,https://github.com/ewertons,Fix critical socketio_win32 bug where socketio_send() will drop packets if send() returns SOCKET_ERROR and WSAEWOULDBLOCK,1,[],https://github.com/Azure/azure-c-shared-utility/pull/390,https://github.com/jspaith,2,https://github.com/Azure/azure-c-shared-utility/pull/390#issuecomment-537591969,"For reference:
https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-send
""If no error occurs, send returns the total number of bytes sent,
which can be less than the number requested to be sent in the len parameter.
Otherwise, a value of SOCKET_ERROR is returned, and a specific error code can be retrieved by calling WSAGetLastError.""

Investigation of socketio implementations for mbed:
adapters\socketio_mbed.c
socketio_send(...):
It has the correct logic to handle failure (<0) or not all bytes send in one call to tcpsocketconnection_send.
adapters\socketio_mbed_os5.c
socketio_send():
Always adds to the queue, does not try to send right away.
send_queued_data() has the correct logic to handle error (-1) or not sending all bytes in one call to tcpsocketconnection_send.
For reference:
https://os.mbed.com/users/mbed_official/code/Socket/docs/434906b5b977/TCPSocketConnection_8cpp_source.html
00048 int TCPSocketConnection::send(char* data, int length) {
if ((_sock_fd < 0) || !_is_connected)
return -1;
if (!_blocking) {
    TimeInterval timeout(_timeout);
    if (wait_writable(timeout) != 0)
        return -1;
}

int n = lwip_send(_sock_fd, data, length, 0);
_is_connected = (n != 0);

return n;

}
http://api.tst-sistemas.es/apitsmart-1.2/group___l_w_i_p___exported___functions.html#ga7c670890d4d4e7729d152eece5ac89e0
""Returns
Number of bytes sent
-1 - Failure""","The following bug was filed: [WarnL4] socketio_win32 does not account for already sent bytes and there is a truncation of size from size_t to int */


I get this was pre-existing, but could we please remove this comment and open a GitHub item instead assuming it's still relevant.

Refers to: adapters/socketio_win32.c:556 in bb2dc39. [](commit_id = bb2dc39, deletion_comment = False)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,390,2019-10-02T16:59:51Z,2019-10-03T17:29:01Z,2020-10-30T22:15:08Z,MERGED,True,5,4,1,https://github.com/ewertons,Fix critical socketio_win32 bug where socketio_send() will drop packets if send() returns SOCKET_ERROR and WSAEWOULDBLOCK,1,[],https://github.com/Azure/azure-c-shared-utility/pull/390,https://github.com/ewertons,3,https://github.com/Azure/azure-c-shared-utility/pull/390#issuecomment-537594287,"For reference:
https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-send
""If no error occurs, send returns the total number of bytes sent,
which can be less than the number requested to be sent in the len parameter.
Otherwise, a value of SOCKET_ERROR is returned, and a specific error code can be retrieved by calling WSAGetLastError.""

Investigation of socketio implementations for mbed:
adapters\socketio_mbed.c
socketio_send(...):
It has the correct logic to handle failure (<0) or not all bytes send in one call to tcpsocketconnection_send.
adapters\socketio_mbed_os5.c
socketio_send():
Always adds to the queue, does not try to send right away.
send_queued_data() has the correct logic to handle error (-1) or not sending all bytes in one call to tcpsocketconnection_send.
For reference:
https://os.mbed.com/users/mbed_official/code/Socket/docs/434906b5b977/TCPSocketConnection_8cpp_source.html
00048 int TCPSocketConnection::send(char* data, int length) {
if ((_sock_fd < 0) || !_is_connected)
return -1;
if (!_blocking) {
    TimeInterval timeout(_timeout);
    if (wait_writable(timeout) != 0)
        return -1;
}

int n = lwip_send(_sock_fd, data, length, 0);
_is_connected = (n != 0);

return n;

}
http://api.tst-sistemas.es/apitsmart-1.2/group___l_w_i_p___exported___functions.html#ga7c670890d4d4e7729d152eece5ac89e0
""Returns
Number of bytes sent
-1 - Failure""","The following bug was filed: [WarnL4] socketio_win32 does not account for already sent bytes and there is a truncation of size from size_t to int */
I get this was pre-existing, but could we please remove this comment and open a GitHub item instead assuming it's still relevant.
Refers to: adapters/socketio_win32.c:556 in bb2dc39. [](commit_id = bb2dc39, deletion_comment = False)

Absolutely. I'll share the work item in separate.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,391,2019-10-03T01:15:19Z,2019-10-07T17:37:51Z,2019-10-07T17:37:51Z,MERGED,True,17,2,1,https://github.com/rafilho,[SDL] Use secure versions of SSL/TLS,5,[],https://github.com/Azure/azure-c-shared-utility/pull/391,https://github.com/rafilho,1,https://github.com/Azure/azure-c-shared-utility/pull/391,"Addressing SDL issue https://msazure.visualstudio.com/One/_workitems/edit/5240489. Details below:
WinHttp API:
By default, only SSL 3.0 and TLS 1.0 are enabled. Specify which versions of SSL and TLS to enable by setting the WINHTTP_OPTION_SECURE_PROTOCOLS option through the WinHttpSetOption function.
Following flags must be set
WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_2 (enable support for TLS1.2).
WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_1 (Optional if TLS 1.1 protocol support if required).
Following flags must not be set
WINHTTP_FLAG_SECURE_PROTOCOL_SSL3
WINHTTP_FLAG_SECURE_PROTOCOL_SSL2
WINHTTP_FLAG_SECURE_PROTOCOL_ALL","Addressing SDL issue https://msazure.visualstudio.com/One/_workitems/edit/5240489. Details below:
WinHttp API:
By default, only SSL 3.0 and TLS 1.0 are enabled. Specify which versions of SSL and TLS to enable by setting the WINHTTP_OPTION_SECURE_PROTOCOLS option through the WinHttpSetOption function.
Following flags must be set
WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_2 (enable support for TLS1.2).
WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_1 (Optional if TLS 1.1 protocol support if required).
Following flags must not be set
WINHTTP_FLAG_SECURE_PROTOCOL_SSL3
WINHTTP_FLAG_SECURE_PROTOCOL_SSL2
WINHTTP_FLAG_SECURE_PROTOCOL_ALL",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,393,2019-10-07T20:17:26Z,2019-10-07T20:38:57Z,2019-10-07T20:39:00Z,MERGED,True,29,25,1,https://github.com/ewertons,Move code to set WinHttp WINHTTP_OPTION_SECURE_PROTOCOLS to use the session handle,1,[],https://github.com/Azure/azure-c-shared-utility/pull/393,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/393,"Although the official Windows API documentation doesn't mention, WINHTTP_OPTION_SECURE_PROTOCOLS must be set on the session handle, not on the request handle.","Although the official Windows API documentation doesn't mention, WINHTTP_OPTION_SECURE_PROTOCOLS must be set on the session handle, not on the request handle.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,394,2019-10-07T22:30:39Z,2021-11-02T20:54:38Z,2021-11-02T20:54:38Z,CLOSED,False,26,0,1,https://github.com/CIPop,Adding Visual Studio debug window logging.,1,[],https://github.com/Azure/azure-c-shared-utility/pull/394,https://github.com/CIPop,1,https://github.com/Azure/azure-c-shared-utility/pull/394,"This change makes logging to be displayed in the Output window when tests are executed in Debug mode within Visual Studio.
Example:

The output should not be available in any other mode (Windows Release or non-Windows).","This change makes logging to be displayed in the Output window when tests are executed in Debug mode within Visual Studio.
Example:

The output should not be available in any other mode (Windows Release or non-Windows).",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,394,2019-10-07T22:30:39Z,2021-11-02T20:54:38Z,2021-11-02T20:54:38Z,CLOSED,False,26,0,1,https://github.com/CIPop,Adding Visual Studio debug window logging.,1,[],https://github.com/Azure/azure-c-shared-utility/pull/394,https://github.com/CIPop,2,https://github.com/Azure/azure-c-shared-utility/pull/394#issuecomment-539231927,"This change makes logging to be displayed in the Output window when tests are executed in Debug mode within Visual Studio.
Example:

The output should not be available in any other mode (Windows Release or non-Windows).",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,394,2019-10-07T22:30:39Z,2021-11-02T20:54:38Z,2021-11-02T20:54:38Z,CLOSED,False,26,0,1,https://github.com/CIPop,Adding Visual Studio debug window logging.,1,[],https://github.com/Azure/azure-c-shared-utility/pull/394,https://github.com/apps/azure-pipelines,3,https://github.com/Azure/azure-c-shared-utility/pull/394#issuecomment-539231954,"This change makes logging to be displayed in the Output window when tests are executed in Debug mode within Visual Studio.
Example:

The output should not be available in any other mode (Windows Release or non-Windows).",No pipelines are associated with this pull request.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,394,2019-10-07T22:30:39Z,2021-11-02T20:54:38Z,2021-11-02T20:54:38Z,CLOSED,False,26,0,1,https://github.com/CIPop,Adding Visual Studio debug window logging.,1,[],https://github.com/Azure/azure-c-shared-utility/pull/394,https://github.com/ericwol-msft,4,https://github.com/Azure/azure-c-shared-utility/pull/394#issuecomment-958158762,"This change makes logging to be displayed in the Output window when tests are executed in Debug mode within Visual Studio.
Example:

The output should not be available in any other mode (Windows Release or non-Windows).",Not supporting debug VS output.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,395,2019-10-09T05:14:17Z,2019-10-09T15:46:08Z,2019-10-09T15:46:12Z,MERGED,True,13,11,1,https://github.com/ewertons,Fix c-utility installation in Windows that has been broken by recent ETW-related changes,1,[],https://github.com/Azure/azure-c-shared-utility/pull/395,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/395,"This fixes the installation via vcpkg as well, which failure was:
CMake Error at C:/vsts/_work/2/s/installed/x64-windows/share/azure_c_shared_utility/azure_c_shared_utilityFunctions.cmake:643 (if):
if given arguments:
""OR"" ""("" ""STREQUAL"" ""ON_WITH_CONSOLE"" "")""

Unknown arguments specified
Call Stack (most recent call first):
CMakeLists.txt:112 (set_platform_files)","This fixes the installation via vcpkg as well, which failure was:
CMake Error at C:/vsts/_work/2/s/installed/x64-windows/share/azure_c_shared_utility/azure_c_shared_utilityFunctions.cmake:643 (if):
if given arguments:
""OR"" ""("" ""STREQUAL"" ""ON_WITH_CONSOLE"" "")""

Unknown arguments specified
Call Stack (most recent call first):
CMakeLists.txt:112 (set_platform_files)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,397,2019-10-16T22:59:44Z,2022-04-20T16:12:20Z,2022-04-20T16:12:20Z,CLOSED,False,5,4,3,https://github.com/CIPop,Logging fixes,1,[],https://github.com/Azure/azure-c-shared-utility/pull/397,https://github.com/CIPop,1,https://github.com/Azure/azure-c-shared-utility/pull/397,"Fixing NO_LOGGING option build.
Removing unnecessary/incorrect buffer error message.","Fixing NO_LOGGING option build.
Removing unnecessary/incorrect buffer error message.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,397,2019-10-16T22:59:44Z,2022-04-20T16:12:20Z,2022-04-20T16:12:20Z,CLOSED,False,5,4,3,https://github.com/CIPop,Logging fixes,1,[],https://github.com/Azure/azure-c-shared-utility/pull/397,https://github.com/CIPop,2,https://github.com/Azure/azure-c-shared-utility/pull/397#issuecomment-543343339,"Fixing NO_LOGGING option build.
Removing unnecessary/incorrect buffer error message.",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,397,2019-10-16T22:59:44Z,2022-04-20T16:12:20Z,2022-04-20T16:12:20Z,CLOSED,False,5,4,3,https://github.com/CIPop,Logging fixes,1,[],https://github.com/Azure/azure-c-shared-utility/pull/397,https://github.com/apps/azure-pipelines,3,https://github.com/Azure/azure-c-shared-utility/pull/397#issuecomment-543343369,"Fixing NO_LOGGING option build.
Removing unnecessary/incorrect buffer error message.",No pipelines are associated with this pull request.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,397,2019-10-16T22:59:44Z,2022-04-20T16:12:20Z,2022-04-20T16:12:20Z,CLOSED,False,5,4,3,https://github.com/CIPop,Logging fixes,1,[],https://github.com/Azure/azure-c-shared-utility/pull/397,https://github.com/CIPop,4,https://github.com/Azure/azure-c-shared-utility/pull/397#issuecomment-543343670,"Fixing NO_LOGGING option build.
Removing unnecessary/incorrect buffer error message.",/azp run integrate-into-repo-C-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,397,2019-10-16T22:59:44Z,2022-04-20T16:12:20Z,2022-04-20T16:12:20Z,CLOSED,False,5,4,3,https://github.com/CIPop,Logging fixes,1,[],https://github.com/Azure/azure-c-shared-utility/pull/397,https://github.com/apps/azure-pipelines,5,https://github.com/Azure/azure-c-shared-utility/pull/397#issuecomment-543343709,"Fixing NO_LOGGING option build.
Removing unnecessary/incorrect buffer error message.",No pipelines are associated with this pull request.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,397,2019-10-16T22:59:44Z,2022-04-20T16:12:20Z,2022-04-20T16:12:20Z,CLOSED,False,5,4,3,https://github.com/CIPop,Logging fixes,1,[],https://github.com/Azure/azure-c-shared-utility/pull/397,https://github.com/momuno,6,https://github.com/Azure/azure-c-shared-utility/pull/397#issuecomment-1103096148,"Fixing NO_LOGGING option build.
Removing unnecessary/incorrect buffer error message.",@CIPop can you take a look to see if this PR is still needed?  Thanks!,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,398,2019-10-16T23:07:20Z,2019-10-16T23:19:42Z,2019-10-16T23:19:42Z,CLOSED,False,3337,580,40,https://github.com/lisaweixu,Using ASN1 functions to check cache expiration.,111,[],https://github.com/Azure/azure-c-shared-utility/pull/398,https://github.com/lisaweixu,1,https://github.com/Azure/azure-c-shared-utility/pull/398,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,399,2019-10-17T22:33:25Z,2019-10-18T16:01:45Z,2019-10-18T16:01:51Z,MERGED,True,14,17,2,https://github.com/ewertons,Lts 07 2019 update20191007,2,[],https://github.com/Azure/azure-c-shared-utility/pull/399,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/399,"This is an update to the latest LTS branch out of azure-c-shared-utility repo.
The LTS branch lts_07_2019 was recently created for this repo based on the c-utility commit pointed by https://github.com/Azure/azure-iot-sdk-c/tree/lts_07_2019","This is an update to the latest LTS branch out of azure-c-shared-utility repo.
The LTS branch lts_07_2019 was recently created for this repo based on the c-utility commit pointed by https://github.com/Azure/azure-iot-sdk-c/tree/lts_07_2019",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,400,2019-10-18T15:50:01Z,2019-11-21T21:43:30Z,2019-11-21T21:43:30Z,CLOSED,False,11,3,1,https://github.com/mlilien,fix segfault resolving dns,1,[],https://github.com/Azure/azure-c-shared-utility/pull/400,https://github.com/mlilien,1,https://github.com/Azure/azure-c-shared-utility/pull/400,on alpine (armhf) the system crashed sometimes if connection was lost.,on alpine (armhf) the system crashed sometimes if connection was lost.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,400,2019-10-18T15:50:01Z,2019-11-21T21:43:30Z,2019-11-21T21:43:30Z,CLOSED,False,11,3,1,https://github.com/mlilien,fix segfault resolving dns,1,[],https://github.com/Azure/azure-c-shared-utility/pull/400,https://github.com/ewertons,2,https://github.com/Azure/azure-c-shared-utility/pull/400#issuecomment-557285485,on alpine (armhf) the system crashed sometimes if connection was lost.,"Hi @mlilien ,
thanks for the PR. There are a few more changes needed to address the failures with the new DNS resolver, so we will consolidate that in another PR and add your fix.
Thank you for your contribution.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,401,2019-10-22T17:37:30Z,2019-10-22T19:41:02Z,2020-10-30T23:07:11Z,MERGED,True,233,23,5,https://github.com/anporumb,use tracelogging,5,[],https://github.com/Azure/azure-c-shared-utility/pull/401,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/401,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,402,2019-10-22T20:46:01Z,2019-10-22T20:59:43Z,2020-10-30T23:07:10Z,MERGED,True,43,29,2,https://github.com/anporumb,do not use .rc file when it is not compiles,1,[],https://github.com/Azure/azure-c-shared-utility/pull/402,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/402,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,403,2019-10-23T13:08:14Z,2019-10-23T15:44:34Z,2019-10-23T15:44:34Z,MERGED,True,4,1193,8,https://github.com/anporumb,remove manifest based logging capability,1,[],https://github.com/Azure/azure-c-shared-utility/pull/403,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/403,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,405,2019-10-25T00:12:11Z,2019-11-08T21:35:22Z,2019-11-08T23:08:12Z,MERGED,True,22,23,8,https://github.com/CIPop,Removing incorrect buffer error message.,4,[],https://github.com/Azure/azure-c-shared-utility/pull/405,https://github.com/CIPop,1,https://github.com/Azure/azure-c-shared-utility/pull/405,"Unbuilding a buffer that is not null is the common case. The error was likely missed when running  no_logging=OFF.
Since the application cannot verify if the buffer is empty or not, unbuild should always work without errors.","Unbuilding a buffer that is not null is the common case. The error was likely missed when running  no_logging=OFF.
Since the application cannot verify if the buffer is empty or not, unbuild should always work without errors.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,405,2019-10-25T00:12:11Z,2019-11-08T21:35:22Z,2019-11-08T23:08:12Z,MERGED,True,22,23,8,https://github.com/CIPop,Removing incorrect buffer error message.,4,[],https://github.com/Azure/azure-c-shared-utility/pull/405,https://github.com/CIPop,2,https://github.com/Azure/azure-c-shared-utility/pull/405#issuecomment-546453766,"Unbuilding a buffer that is not null is the common case. The error was likely missed when running  no_logging=OFF.
Since the application cannot verify if the buffer is empty or not, unbuild should always work without errors.",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,405,2019-10-25T00:12:11Z,2019-11-08T21:35:22Z,2019-11-08T23:08:12Z,MERGED,True,22,23,8,https://github.com/CIPop,Removing incorrect buffer error message.,4,[],https://github.com/Azure/azure-c-shared-utility/pull/405,https://github.com/apps/azure-pipelines,3,https://github.com/Azure/azure-c-shared-utility/pull/405#issuecomment-546453796,"Unbuilding a buffer that is not null is the common case. The error was likely missed when running  no_logging=OFF.
Since the application cannot verify if the buffer is empty or not, unbuild should always work without errors.",No pipelines are associated with this pull request.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,405,2019-10-25T00:12:11Z,2019-11-08T21:35:22Z,2019-11-08T23:08:12Z,MERGED,True,22,23,8,https://github.com/CIPop,Removing incorrect buffer error message.,4,[],https://github.com/Azure/azure-c-shared-utility/pull/405,https://github.com/CIPop,4,https://github.com/Azure/azure-c-shared-utility/pull/405#issuecomment-551266856,"Unbuilding a buffer that is not null is the common case. The error was likely missed when running  no_logging=OFF.
Since the application cannot verify if the buffer is empty or not, unbuild should always work without errors.",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,405,2019-10-25T00:12:11Z,2019-11-08T21:35:22Z,2019-11-08T23:08:12Z,MERGED,True,22,23,8,https://github.com/CIPop,Removing incorrect buffer error message.,4,[],https://github.com/Azure/azure-c-shared-utility/pull/405,https://github.com/apps/azure-pipelines,5,https://github.com/Azure/azure-c-shared-utility/pull/405#issuecomment-551266907,"Unbuilding a buffer that is not null is the common case. The error was likely missed when running  no_logging=OFF.
Since the application cannot verify if the buffer is empty or not, unbuild should always work without errors.",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,405,2019-10-25T00:12:11Z,2019-11-08T21:35:22Z,2019-11-08T23:08:12Z,MERGED,True,22,23,8,https://github.com/CIPop,Removing incorrect buffer error message.,4,[],https://github.com/Azure/azure-c-shared-utility/pull/405,https://github.com/CIPop,6,https://github.com/Azure/azure-c-shared-utility/pull/405#issuecomment-551274614,"Unbuilding a buffer that is not null is the common case. The error was likely missed when running  no_logging=OFF.
Since the application cannot verify if the buffer is empty or not, unbuild should always work without errors.",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,405,2019-10-25T00:12:11Z,2019-11-08T21:35:22Z,2019-11-08T23:08:12Z,MERGED,True,22,23,8,https://github.com/CIPop,Removing incorrect buffer error message.,4,[],https://github.com/Azure/azure-c-shared-utility/pull/405,https://github.com/apps/azure-pipelines,7,https://github.com/Azure/azure-c-shared-utility/pull/405#issuecomment-551274681,"Unbuilding a buffer that is not null is the common case. The error was likely missed when running  no_logging=OFF.
Since the application cannot verify if the buffer is empty or not, unbuild should always work without errors.",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,405,2019-10-25T00:12:11Z,2019-11-08T21:35:22Z,2019-11-08T23:08:12Z,MERGED,True,22,23,8,https://github.com/CIPop,Removing incorrect buffer error message.,4,[],https://github.com/Azure/azure-c-shared-utility/pull/405,https://github.com/CIPop,8,https://github.com/Azure/azure-c-shared-utility/pull/405#issuecomment-551280475,"Unbuilding a buffer that is not null is the common case. The error was likely missed when running  no_logging=OFF.
Since the application cannot verify if the buffer is empty or not, unbuild should always work without errors.",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,405,2019-10-25T00:12:11Z,2019-11-08T21:35:22Z,2019-11-08T23:08:12Z,MERGED,True,22,23,8,https://github.com/CIPop,Removing incorrect buffer error message.,4,[],https://github.com/Azure/azure-c-shared-utility/pull/405,https://github.com/apps/azure-pipelines,9,https://github.com/Azure/azure-c-shared-utility/pull/405#issuecomment-551280555,"Unbuilding a buffer that is not null is the common case. The error was likely missed when running  no_logging=OFF.
Since the application cannot verify if the buffer is empty or not, unbuild should always work without errors.",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,405,2019-10-25T00:12:11Z,2019-11-08T21:35:22Z,2019-11-08T23:08:12Z,MERGED,True,22,23,8,https://github.com/CIPop,Removing incorrect buffer error message.,4,[],https://github.com/Azure/azure-c-shared-utility/pull/405,https://github.com/CIPop,10,https://github.com/Azure/azure-c-shared-utility/pull/405#issuecomment-551966561,"Unbuilding a buffer that is not null is the common case. The error was likely missed when running  no_logging=OFF.
Since the application cannot verify if the buffer is empty or not, unbuild should always work without errors.",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,405,2019-10-25T00:12:11Z,2019-11-08T21:35:22Z,2019-11-08T23:08:12Z,MERGED,True,22,23,8,https://github.com/CIPop,Removing incorrect buffer error message.,4,[],https://github.com/Azure/azure-c-shared-utility/pull/405,https://github.com/apps/azure-pipelines,11,https://github.com/Azure/azure-c-shared-utility/pull/405#issuecomment-551966601,"Unbuilding a buffer that is not null is the common case. The error was likely missed when running  no_logging=OFF.
Since the application cannot verify if the buffer is empty or not, unbuild should always work without errors.",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,405,2019-10-25T00:12:11Z,2019-11-08T21:35:22Z,2019-11-08T23:08:12Z,MERGED,True,22,23,8,https://github.com/CIPop,Removing incorrect buffer error message.,4,[],https://github.com/Azure/azure-c-shared-utility/pull/405,https://github.com/CIPop,12,https://github.com/Azure/azure-c-shared-utility/pull/405#issuecomment-552025694,"Unbuilding a buffer that is not null is the common case. The error was likely missed when running  no_logging=OFF.
Since the application cannot verify if the buffer is empty or not, unbuild should always work without errors.","Maybe we should have a section in this doc explaining how to use the XIO_RECEIVE_BYTES_VALUE

@ewertons please see Azure/azure-iot-sdk-c#1305",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,406,2019-10-28T05:48:13Z,2019-10-28T16:41:55Z,2020-10-26T23:27:02Z,MERGED,True,258,206,71,https://github.com/dcristoloveanu,Use PRI_MU_ENUM for printing enum values,1,[],https://github.com/Azure/azure-c-shared-utility/pull/406,https://github.com/dcristoloveanu,1,https://github.com/Azure/azure-c-shared-utility/pull/406,Use PRI_MU_ENUM for printing enum values,Use PRI_MU_ENUM for printing enum values,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,407,2019-11-05T00:43:54Z,2019-11-06T02:10:58Z,2020-10-30T23:07:08Z,MERGED,True,41,0,1,https://github.com/rafilho,Adding SECURITY.MD file to the repository.,1,[],https://github.com/Azure/azure-c-shared-utility/pull/407,https://github.com/rafilho,1,https://github.com/Azure/azure-c-shared-utility/pull/407,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,408,2019-11-08T18:57:43Z,2019-12-04T23:31:37Z,2020-10-28T21:26:52Z,MERGED,True,3,8,1,https://github.com/CIPop,Fixing porting guide broken link,4,[],https://github.com/Azure/azure-c-shared-utility/pull/408,https://github.com/CIPop,1,https://github.com/Azure/azure-c-shared-utility/pull/408,The tickcounter spec is missing. Referencing the tickcounter_freertos to fix the broken link for now.,The tickcounter spec is missing. Referencing the tickcounter_freertos to fix the broken link for now.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,408,2019-11-08T18:57:43Z,2019-12-04T23:31:37Z,2020-10-28T21:26:52Z,MERGED,True,3,8,1,https://github.com/CIPop,Fixing porting guide broken link,4,[],https://github.com/Azure/azure-c-shared-utility/pull/408,https://github.com/CIPop,2,https://github.com/Azure/azure-c-shared-utility/pull/408#issuecomment-551949143,The tickcounter spec is missing. Referencing the tickcounter_freertos to fix the broken link for now.,/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,408,2019-11-08T18:57:43Z,2019-12-04T23:31:37Z,2020-10-28T21:26:52Z,MERGED,True,3,8,1,https://github.com/CIPop,Fixing porting guide broken link,4,[],https://github.com/Azure/azure-c-shared-utility/pull/408,https://github.com/apps/azure-pipelines,3,https://github.com/Azure/azure-c-shared-utility/pull/408#issuecomment-551949196,The tickcounter spec is missing. Referencing the tickcounter_freertos to fix the broken link for now.,Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,408,2019-11-08T18:57:43Z,2019-12-04T23:31:37Z,2020-10-28T21:26:52Z,MERGED,True,3,8,1,https://github.com/CIPop,Fixing porting guide broken link,4,[],https://github.com/Azure/azure-c-shared-utility/pull/408,https://github.com/CIPop,4,https://github.com/Azure/azure-c-shared-utility/pull/408#issuecomment-551960525,The tickcounter spec is missing. Referencing the tickcounter_freertos to fix the broken link for now.,@gregman-msft can't find any trace of the original spec file. According to git annotate 740df09 was the commit bringing the porting guide in our repo.,True,{'THUMBS_UP': ['https://github.com/gregman-msft']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,410,2019-11-13T07:00:53Z,2019-11-14T18:48:04Z,2019-11-14T18:48:04Z,CLOSED,False,2,2,1,https://github.com/hihigupt,Fixing mbedtls port,2,[],https://github.com/Azure/azure-c-shared-utility/pull/410,https://github.com/hihigupt,1,https://github.com/Azure/azure-c-shared-utility/pull/410,Removing state manuplation in on_io_send.,Removing state manuplation in on_io_send.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,412,2019-11-13T22:21:49Z,2019-11-13T22:49:32Z,2019-11-13T22:49:37Z,MERGED,True,5,5,3,https://github.com/ewertons,"Fix OptionHandler_AddOption result check in tlsio_wolfssl.c, use MU_DEFINE_ENUM_WITHOUT_INVALID in OptionHandler",1,[],https://github.com/Azure/azure-c-shared-utility/pull/412,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/412,"Also did a code verification for other instances of improper result check of OptionHandler_AddOption across azure-c-shared-utility.
Did not find any other instances neededing fix.
Relates to #411","Also did a code verification for other instances of improper result check of OptionHandler_AddOption across azure-c-shared-utility.
Did not find any other instances neededing fix.
Relates to #411",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,413,2019-11-19T00:35:27Z,2019-11-19T19:10:43Z,2020-01-17T00:38:37Z,MERGED,True,16,0,1,https://github.com/jbobotek,Added socket_async_os.h to ios pal layer,22,[],https://github.com/Azure/azure-c-shared-utility/pull/413,https://github.com/jbobotek,1,https://github.com/Azure/azure-c-shared-utility/pull/413,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,414,2019-11-20T14:18:40Z,2019-11-20T23:18:11Z,2019-11-20T23:18:11Z,MERGED,True,1,1,1,https://github.com/anporumb,ETW now prints executable file name,1,[],https://github.com/Azure/azure-c-shared-utility/pull/414,https://github.com/anporumb,1,https://github.com/Azure/azure-c-shared-utility/pull/414,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,415,2019-11-21T21:58:39Z,2019-11-22T03:15:52Z,2019-11-22T03:15:57Z,MERGED,True,112,59,3,https://github.com/ewertons,Fix SEGFAULT errors introduced by dns_resolver in socketio (gh# 1275),6,[],https://github.com/Azure/azure-c-shared-utility/pull/415,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/415,"Relates to: Azure/azure-iot-sdk-c#1275
There were two instances of possible failures not properly handled on socketio related to dns_resolver:

The result of dns_resolver_create() was not being checked for NULL (which could be caused by memory allocation failure);
The result of dns_resolver_get_addrInfo() was not being checked for NULL, which could happen even if dns_resolver_is_lookup_complete returned true.

These failures affected socketio_berkeley.c and socketio_win32.c.
The currently remaining socketio implementations were not affected, since they do not use dns_resolver (socketio_mbed.c, socketio_mbed_os5.c).
Thanks @mlilien for the initial PR to fix this issue.","Relates to: Azure/azure-iot-sdk-c#1275
There were two instances of possible failures not properly handled on socketio related to dns_resolver:

The result of dns_resolver_create() was not being checked for NULL (which could be caused by memory allocation failure);
The result of dns_resolver_get_addrInfo() was not being checked for NULL, which could happen even if dns_resolver_is_lookup_complete returned true.

These failures affected socketio_berkeley.c and socketio_win32.c.
The currently remaining socketio implementations were not affected, since they do not use dns_resolver (socketio_mbed.c, socketio_mbed_os5.c).
Thanks @mlilien for the initial PR to fix this issue.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,416,2019-11-21T22:59:56Z,2019-11-21T23:38:46Z,2020-01-17T00:39:01Z,CLOSED,False,2,1,1,https://github.com/jbobotek,Update tlsio_mbedtls.c to work with Arduino easier,1,[],https://github.com/Azure/azure-c-shared-utility/pull/416,https://github.com/jbobotek,1,https://github.com/Azure/azure-c-shared-utility/pull/416,"Because Arduino tries to compile all files in a library, when we import multiple tlsio adapters, this one will cause errors for esp8266 because it will not have an 'mbedtls/' folder (and shouldn't). Adding this define, which is already used in cmake, will allow users to use the esp8266 on Arduino without deleting or defining this tlsio out.","Because Arduino tries to compile all files in a library, when we import multiple tlsio adapters, this one will cause errors for esp8266 because it will not have an 'mbedtls/' folder (and shouldn't). Adding this define, which is already used in cmake, will allow users to use the esp8266 on Arduino without deleting or defining this tlsio out.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,417,2019-11-25T19:02:05Z,2019-11-25T19:13:37Z,2019-11-25T19:13:41Z,MERGED,True,2,12,2,https://github.com/ewertons,Revert change of dns_resolver_create in socketio,1,[],https://github.com/Azure/azure-c-shared-utility/pull/417,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/417,"The additonal change related to dns_resolver_create in socketio_* unveiled another set of issues related to the
handling of hostname in the socketio structure. To provide proper fixes, the changes will be split into
separate commits, first to address github #1275 and a subsequent one to address the remaining issues.
Thus reverting part of the recent changes to align with the strategy of having separate fixes.","The additonal change related to dns_resolver_create in socketio_* unveiled another set of issues related to the
handling of hostname in the socketio structure. To provide proper fixes, the changes will be split into
separate commits, first to address github #1275 and a subsequent one to address the remaining issues.
Thus reverting part of the recent changes to align with the strategy of having separate fixes.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,417,2019-11-25T19:02:05Z,2019-11-25T19:13:37Z,2019-11-25T19:13:41Z,MERGED,True,2,12,2,https://github.com/ewertons,Revert change of dns_resolver_create in socketio,1,[],https://github.com/Azure/azure-c-shared-utility/pull/417,https://github.com/ewertons,2,https://github.com/Azure/azure-c-shared-utility/pull/417#issuecomment-558296751,"The additonal change related to dns_resolver_create in socketio_* unveiled another set of issues related to the
handling of hostname in the socketio structure. To provide proper fixes, the changes will be split into
separate commits, first to address github #1275 and a subsequent one to address the remaining issues.
Thus reverting part of the recent changes to align with the strategy of having separate fixes.",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,417,2019-11-25T19:02:05Z,2019-11-25T19:13:37Z,2019-11-25T19:13:41Z,MERGED,True,2,12,2,https://github.com/ewertons,Revert change of dns_resolver_create in socketio,1,[],https://github.com/Azure/azure-c-shared-utility/pull/417,https://github.com/apps/azure-pipelines,3,https://github.com/Azure/azure-c-shared-utility/pull/417#issuecomment-558296804,"The additonal change related to dns_resolver_create in socketio_* unveiled another set of issues related to the
handling of hostname in the socketio structure. To provide proper fixes, the changes will be split into
separate commits, first to address github #1275 and a subsequent one to address the remaining issues.
Thus reverting part of the recent changes to align with the strategy of having separate fixes.",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,419,2019-12-03T01:36:43Z,2019-12-03T22:54:33Z,2020-01-16T21:51:38Z,MERGED,True,13,2,1,https://github.com/hihigupt,Forced close when mbed_tlsio in Error state,1,[],https://github.com/Azure/azure-c-shared-utility/pull/419,https://github.com/hihigupt,1,https://github.com/Azure/azure-c-shared-utility/pull/419,"Doing forced close when mbedtls_io is in ERROR state.
Issue:
Azure/azure-iot-sdk-c#1202","Doing forced close when mbedtls_io is in ERROR state.
Issue:
Azure/azure-iot-sdk-c#1202",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,420,2019-12-03T14:53:55Z,2019-12-05T08:07:49Z,2019-12-05T08:07:50Z,CLOSED,False,46,4,1,https://github.com/alexmrtn,loop on mbedtls_ssl_write to handle partial writes,1,[],https://github.com/Azure/azure-c-shared-utility/pull/420,https://github.com/alexmrtn,1,https://github.com/Azure/azure-c-shared-utility/pull/420,"Current implementation of mbedtls tlsio caps the write to 16384 bytes. This limitation comes from TLS RFC 6066.
From the mbedtls spec of function mbedtls_ssl_write:

This function will do partial writes in some cases. If the return value is non-negative but less than length, the function must be called again with updated arguments: buf + ret, len - ret (if ret is the return value) until it returns a value equal to the last 'len' argument.

This PR address this current limitation.","Current implementation of mbedtls tlsio caps the write to 16384 bytes. This limitation comes from TLS RFC 6066.
From the mbedtls spec of function mbedtls_ssl_write:

This function will do partial writes in some cases. If the return value is non-negative but less than length, the function must be called again with updated arguments: buf + ret, len - ret (if ret is the return value) until it returns a value equal to the last 'len' argument.

This PR address this current limitation.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,420,2019-12-03T14:53:55Z,2019-12-05T08:07:49Z,2019-12-05T08:07:50Z,CLOSED,False,46,4,1,https://github.com/alexmrtn,loop on mbedtls_ssl_write to handle partial writes,1,[],https://github.com/Azure/azure-c-shared-utility/pull/420,https://github.com/alexmrtn,2,https://github.com/Azure/azure-c-shared-utility/pull/420#issuecomment-562018320,"Current implementation of mbedtls tlsio caps the write to 16384 bytes. This limitation comes from TLS RFC 6066.
From the mbedtls spec of function mbedtls_ssl_write:

This function will do partial writes in some cases. If the return value is non-negative but less than length, the function must be called again with updated arguments: buf + ret, len - ret (if ret is the return value) until it returns a value equal to the last 'len' argument.

This PR address this current limitation.",Closing as #421 fix this issue,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,421,2019-12-05T06:39:22Z,2019-12-09T19:20:41Z,2020-01-16T21:51:29Z,MERGED,True,224,20,2,https://github.com/hihigupt,[mbedtls] Adding support to send larger payload,1,[],https://github.com/Azure/azure-c-shared-utility/pull/421,https://github.com/hihigupt,1,https://github.com/Azure/azure-c-shared-utility/pull/421,"Currently mbedtlsio does not allow to send larger payload then
framgent size. Adding support to allow sending larger application
payload.","Currently mbedtlsio does not allow to send larger payload then
framgent size. Adding support to allow sending larger application
payload.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,421,2019-12-05T06:39:22Z,2019-12-09T19:20:41Z,2020-01-16T21:51:29Z,MERGED,True,224,20,2,https://github.com/hihigupt,[mbedtls] Adding support to send larger payload,1,[],https://github.com/Azure/azure-c-shared-utility/pull/421,https://github.com/alexmrtn,2,https://github.com/Azure/azure-c-shared-utility/pull/421#issuecomment-562018273,"Currently mbedtlsio does not allow to send larger payload then
framgent size. Adding support to allow sending larger application
payload.",Tested this fix and it does solve the 16kB limit! Thanks #Closed,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,422,2019-12-10T23:04:38Z,2019-12-11T19:17:14Z,2020-01-16T21:51:33Z,MERGED,True,20,7,2,https://github.com/hihigupt,[tlsio_mbedtls] Fix memory leak,1,[],https://github.com/Azure/azure-c-shared-utility/pull/422,https://github.com/hihigupt,1,https://github.com/Azure/azure-c-shared-utility/pull/422,"Fixing memory leak in tlsio_mbedtls.c
Issues: #381
#376","Fixing memory leak in tlsio_mbedtls.c
Issues: #381
#376",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,423,2020-01-17T22:12:32Z,2020-02-27T21:52:22Z,2020-02-27T21:52:22Z,MERGED,True,6,6,3,https://github.com/wes-b,tickcounter_get_current_ms now returns ms resolution time ticks,1,[],https://github.com/Azure/azure-c-shared-utility/pull/423,https://github.com/wes-b,1,https://github.com/Azure/azure-c-shared-utility/pull/423,"Fixes #190 prior to this fix the function only had a resolution of seconds, now it is really milliseconds.","Fixes #190 prior to this fix the function only had a resolution of seconds, now it is really milliseconds.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,423,2020-01-17T22:12:32Z,2020-02-27T21:52:22Z,2020-02-27T21:52:22Z,MERGED,True,6,6,3,https://github.com/wes-b,tickcounter_get_current_ms now returns ms resolution time ticks,1,[],https://github.com/Azure/azure-c-shared-utility/pull/423,https://github.com/danewalton,2,https://github.com/Azure/azure-c-shared-utility/pull/423#issuecomment-592186820,"Fixes #190 prior to this fix the function only had a resolution of seconds, now it is really milliseconds.",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,423,2020-01-17T22:12:32Z,2020-02-27T21:52:22Z,2020-02-27T21:52:22Z,MERGED,True,6,6,3,https://github.com/wes-b,tickcounter_get_current_ms now returns ms resolution time ticks,1,[],https://github.com/Azure/azure-c-shared-utility/pull/423,https://github.com/apps/azure-pipelines,3,https://github.com/Azure/azure-c-shared-utility/pull/423#issuecomment-592186884,"Fixes #190 prior to this fix the function only had a resolution of seconds, now it is really milliseconds.",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,424,2020-01-31T03:35:37Z,2020-10-27T06:12:19Z,2020-10-27T06:12:19Z,CLOSED,False,34,34,1,https://github.com/vicroms,Fix conditionals in azure_c_shared_utilityFunctions.cmake,1,[],https://github.com/Azure/azure-c-shared-utility/pull/424,https://github.com/vicroms,1,https://github.com/Azure/azure-c-shared-utility/pull/424,"This PR removes the incorrect expansion (${}) of variables inside if(<variable string> STREQUAL <variable|string>) statements.
Related CMake documentation:
https://cmake.org/cmake/help/latest/command/if.html#variable-expansion
Fixes #97","This PR removes the incorrect expansion (${}) of variables inside if(<variable string> STREQUAL <variable|string>) statements.
Related CMake documentation:
https://cmake.org/cmake/help/latest/command/if.html#variable-expansion
Fixes #97",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,427,2020-02-06T22:28:57Z,2020-03-05T19:56:04Z,2020-03-05T19:56:04Z,MERGED,True,1,1,1,https://github.com/yunhaoling,Update tlsio options when creating TLSIO on MacOS,2,[],https://github.com/Azure/azure-c-shared-utility/pull/427,https://github.com/yunhaoling,1,https://github.com/Azure/azure-c-shared-utility/pull/427,"Hi, I'm from the azure sdk python team, maintaining python messaging libraries. Our libraries depend on azure-c-shared-utility for fundamental network communication.
The problem I meet is:
When uamqp library (which utilizes azure-c-shared-utility library) wants to set certificate on MacOS, there is always an warning saying that ""Trusted certs option not supported"".
I debug the code in C and find on MacOS, the tls_options is set to TLSIO_OPTION_BIT_NONE in tlsio_appleios.c (code here):
tlsio_options_initialize(&result->options, TLSIO_OPTION_BIT_NONE);
Meanwhile in tlsio_options.c, in function tlsio_options_set, the if-statement is checking (coe here):
if ((options->supported_options & TLSIO_OPTION_BIT_TRUSTED_CERTS) == 0
This leads to
LogError(""Trusted certs option not supported"");
result = TLSIO_OPTIONS_RESULT_ERROR;
Related issue: #426
or the comment here: Azure/azure-sdk-for-python#7201 (comment).

My questions are:

Is setting TLSIO_OPTION_BIT_NONE an intentional behavior on MacOS due to some known issues?
Can we safely update TLSIO_OPTION_BIT_NONE to TLSIO_OPTION_BIT_TRUSTED_CERTS ?
If not, how to set certificate on MacOS
How are other platforms doing when setting certificate? I checked tlsio_schannel.c (windows) and tlsio_openssl.c (linux) but didn't find any setting related to the tls_options

Loop in @lmazuel  in the discussion.","Hi, I'm from the azure sdk python team, maintaining python messaging libraries. Our libraries depend on azure-c-shared-utility for fundamental network communication.
The problem I meet is:
When uamqp library (which utilizes azure-c-shared-utility library) wants to set certificate on MacOS, there is always an warning saying that ""Trusted certs option not supported"".
I debug the code in C and find on MacOS, the tls_options is set to TLSIO_OPTION_BIT_NONE in tlsio_appleios.c (code here):
tlsio_options_initialize(&result->options, TLSIO_OPTION_BIT_NONE);
Meanwhile in tlsio_options.c, in function tlsio_options_set, the if-statement is checking (coe here):
if ((options->supported_options & TLSIO_OPTION_BIT_TRUSTED_CERTS) == 0
This leads to
LogError(""Trusted certs option not supported"");
result = TLSIO_OPTIONS_RESULT_ERROR;
Related issue: #426
or the comment here: Azure/azure-sdk-for-python#7201 (comment).

My questions are:

Is setting TLSIO_OPTION_BIT_NONE an intentional behavior on MacOS due to some known issues?
Can we safely update TLSIO_OPTION_BIT_NONE to TLSIO_OPTION_BIT_TRUSTED_CERTS ?
If not, how to set certificate on MacOS
How are other platforms doing when setting certificate? I checked tlsio_schannel.c (windows) and tlsio_openssl.c (linux) but didn't find any setting related to the tls_options

Loop in @lmazuel  in the discussion.",True,{'THUMBS_UP': ['https://github.com/hemikak']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,427,2020-02-06T22:28:57Z,2020-03-05T19:56:04Z,2020-03-05T19:56:04Z,MERGED,True,1,1,1,https://github.com/yunhaoling,Update tlsio options when creating TLSIO on MacOS,2,[],https://github.com/Azure/azure-c-shared-utility/pull/427,https://github.com/yunhaoling,2,https://github.com/Azure/azure-c-shared-utility/pull/427#issuecomment-584302044,"Hi, I'm from the azure sdk python team, maintaining python messaging libraries. Our libraries depend on azure-c-shared-utility for fundamental network communication.
The problem I meet is:
When uamqp library (which utilizes azure-c-shared-utility library) wants to set certificate on MacOS, there is always an warning saying that ""Trusted certs option not supported"".
I debug the code in C and find on MacOS, the tls_options is set to TLSIO_OPTION_BIT_NONE in tlsio_appleios.c (code here):
tlsio_options_initialize(&result->options, TLSIO_OPTION_BIT_NONE);
Meanwhile in tlsio_options.c, in function tlsio_options_set, the if-statement is checking (coe here):
if ((options->supported_options & TLSIO_OPTION_BIT_TRUSTED_CERTS) == 0
This leads to
LogError(""Trusted certs option not supported"");
result = TLSIO_OPTIONS_RESULT_ERROR;
Related issue: #426
or the comment here: Azure/azure-sdk-for-python#7201 (comment).

My questions are:

Is setting TLSIO_OPTION_BIT_NONE an intentional behavior on MacOS due to some known issues?
Can we safely update TLSIO_OPTION_BIT_NONE to TLSIO_OPTION_BIT_TRUSTED_CERTS ?
If not, how to set certificate on MacOS
How are other platforms doing when setting certificate? I checked tlsio_schannel.c (windows) and tlsio_openssl.c (linux) but didn't find any setting related to the tls_options

Loop in @lmazuel  in the discussion.","Hello @hihigupt, @ewertons, could you take a look at my PR?",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,427,2020-02-06T22:28:57Z,2020-03-05T19:56:04Z,2020-03-05T19:56:04Z,MERGED,True,1,1,1,https://github.com/yunhaoling,Update tlsio options when creating TLSIO on MacOS,2,[],https://github.com/Azure/azure-c-shared-utility/pull/427,https://github.com/danewalton,3,https://github.com/Azure/azure-c-shared-utility/pull/427#issuecomment-595399151,"Hi, I'm from the azure sdk python team, maintaining python messaging libraries. Our libraries depend on azure-c-shared-utility for fundamental network communication.
The problem I meet is:
When uamqp library (which utilizes azure-c-shared-utility library) wants to set certificate on MacOS, there is always an warning saying that ""Trusted certs option not supported"".
I debug the code in C and find on MacOS, the tls_options is set to TLSIO_OPTION_BIT_NONE in tlsio_appleios.c (code here):
tlsio_options_initialize(&result->options, TLSIO_OPTION_BIT_NONE);
Meanwhile in tlsio_options.c, in function tlsio_options_set, the if-statement is checking (coe here):
if ((options->supported_options & TLSIO_OPTION_BIT_TRUSTED_CERTS) == 0
This leads to
LogError(""Trusted certs option not supported"");
result = TLSIO_OPTIONS_RESULT_ERROR;
Related issue: #426
or the comment here: Azure/azure-sdk-for-python#7201 (comment).

My questions are:

Is setting TLSIO_OPTION_BIT_NONE an intentional behavior on MacOS due to some known issues?
Can we safely update TLSIO_OPTION_BIT_NONE to TLSIO_OPTION_BIT_TRUSTED_CERTS ?
If not, how to set certificate on MacOS
How are other platforms doing when setting certificate? I checked tlsio_schannel.c (windows) and tlsio_openssl.c (linux) but didn't find any setting related to the tls_options

Loop in @lmazuel  in the discussion.",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,427,2020-02-06T22:28:57Z,2020-03-05T19:56:04Z,2020-03-05T19:56:04Z,MERGED,True,1,1,1,https://github.com/yunhaoling,Update tlsio options when creating TLSIO on MacOS,2,[],https://github.com/Azure/azure-c-shared-utility/pull/427,https://github.com/apps/azure-pipelines,4,https://github.com/Azure/azure-c-shared-utility/pull/427#issuecomment-595399219,"Hi, I'm from the azure sdk python team, maintaining python messaging libraries. Our libraries depend on azure-c-shared-utility for fundamental network communication.
The problem I meet is:
When uamqp library (which utilizes azure-c-shared-utility library) wants to set certificate on MacOS, there is always an warning saying that ""Trusted certs option not supported"".
I debug the code in C and find on MacOS, the tls_options is set to TLSIO_OPTION_BIT_NONE in tlsio_appleios.c (code here):
tlsio_options_initialize(&result->options, TLSIO_OPTION_BIT_NONE);
Meanwhile in tlsio_options.c, in function tlsio_options_set, the if-statement is checking (coe here):
if ((options->supported_options & TLSIO_OPTION_BIT_TRUSTED_CERTS) == 0
This leads to
LogError(""Trusted certs option not supported"");
result = TLSIO_OPTIONS_RESULT_ERROR;
Related issue: #426
or the comment here: Azure/azure-sdk-for-python#7201 (comment).

My questions are:

Is setting TLSIO_OPTION_BIT_NONE an intentional behavior on MacOS due to some known issues?
Can we safely update TLSIO_OPTION_BIT_NONE to TLSIO_OPTION_BIT_TRUSTED_CERTS ?
If not, how to set certificate on MacOS
How are other platforms doing when setting certificate? I checked tlsio_schannel.c (windows) and tlsio_openssl.c (linux) but didn't find any setting related to the tls_options

Loop in @lmazuel  in the discussion.",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,429,2020-02-19T23:52:31Z,2020-02-25T21:59:39Z,2020-02-25T22:19:57Z,CLOSED,False,21,21,12,https://github.com/ttins,"malloc() to calloc() calls, to zero initiate bytes",1,[],https://github.com/Azure/azure-c-shared-utility/pull/429,https://github.com/ttins,1,https://github.com/Azure/azure-c-shared-utility/pull/429,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,430,2020-02-25T21:56:43Z,2020-02-25T22:03:28Z,2020-02-25T22:19:54Z,CLOSED,False,22,22,13,https://github.com/ttins,add calloc support to umock submodule,2,[],https://github.com/Azure/azure-c-shared-utility/pull/430,https://github.com/ttins,1,https://github.com/Azure/azure-c-shared-utility/pull/430,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,431,2020-02-25T22:30:53Z,2020-02-25T22:38:16Z,2020-02-25T22:38:21Z,CLOSED,False,1,1,1,https://github.com/ttins,add calloc support to umock submodule,1,[],https://github.com/Azure/azure-c-shared-utility/pull/431,https://github.com/ttins,1,https://github.com/Azure/azure-c-shared-utility/pull/431,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,432,2020-02-27T00:16:17Z,2020-02-27T01:43:02Z,2020-02-27T01:43:07Z,CLOSED,False,1,1,1,https://github.com/ttins,umock-c reference update,1,[],https://github.com/Azure/azure-c-shared-utility/pull/432,https://github.com/ttins,1,https://github.com/Azure/azure-c-shared-utility/pull/432,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,433,2020-02-27T19:07:42Z,2020-03-05T00:21:06Z,2020-03-05T00:21:06Z,CLOSED,False,17,14,10,https://github.com/ttins,submodule update,14,[],https://github.com/Azure/azure-c-shared-utility/pull/433,https://github.com/ttins,1,https://github.com/Azure/azure-c-shared-utility/pull/433,"update umock-c, ctest, and testrunner to use new commit hashs","update umock-c, ctest, and testrunner to use new commit hashs",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,434,2020-02-28T21:30:18Z,2020-02-28T21:52:05Z,2020-03-05T20:20:23Z,MERGED,True,1,1,1,https://github.com/danewalton,change returned value to enum,1,[],https://github.com/Azure/azure-c-shared-utility/pull/434,https://github.com/danewalton,1,https://github.com/Azure/azure-c-shared-utility/pull/434,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,434,2020-02-28T21:30:18Z,2020-02-28T21:52:05Z,2020-03-05T20:20:23Z,MERGED,True,1,1,1,https://github.com/danewalton,change returned value to enum,1,[],https://github.com/Azure/azure-c-shared-utility/pull/434,https://github.com/danewalton,2,https://github.com/Azure/azure-c-shared-utility/pull/434#issuecomment-592737832,,/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,434,2020-02-28T21:30:18Z,2020-02-28T21:52:05Z,2020-03-05T20:20:23Z,MERGED,True,1,1,1,https://github.com/danewalton,change returned value to enum,1,[],https://github.com/Azure/azure-c-shared-utility/pull/434,https://github.com/apps/azure-pipelines,3,https://github.com/Azure/azure-c-shared-utility/pull/434#issuecomment-592737878,,Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,435,2020-03-05T19:06:44Z,2020-03-05T21:46:04Z,2020-03-05T22:38:53Z,MERGED,True,7,15,10,https://github.com/ttins,umock reference update & tickcounter apple define,23,[],https://github.com/Azure/azure-c-shared-utility/pull/435,https://github.com/ttins,1,https://github.com/Azure/azure-c-shared-utility/pull/435,"update reference hash for submodules:
umock, ctest, testrunner
update unit tests for umock aliasing check
update tickcounter.h to allow OSX to use 64bit","update reference hash for submodules:
umock, ctest, testrunner
update unit tests for umock aliasing check
update tickcounter.h to allow OSX to use 64bit",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,436,2020-03-06T02:10:55Z,2020-03-11T22:02:05Z,2020-10-30T22:20:45Z,CLOSED,False,2,2,1,https://github.com/jbobotek,Update constbuffer_array_batcher.c,1,[],https://github.com/Azure/azure-c-shared-utility/pull/436,https://github.com/jbobotek,1,https://github.com/Azure/azure-c-shared-utility/pull/436,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,437,2020-03-07T01:00:54Z,2020-03-10T22:48:41Z,2020-10-28T21:26:50Z,MERGED,True,3,1,1,https://github.com/CIPop,Fixing socket state when DNS resolution failed.,1,[],https://github.com/Azure/azure-c-shared-utility/pull/437,https://github.com/CIPop,1,https://github.com/Azure/azure-c-shared-utility/pull/437,Fixes Azure/azure-iot-sdk-c#1446 : the BSD socket state is not properly updated when DNS fails or connect is performed asynchronously.,Fixes Azure/azure-iot-sdk-c#1446 : the BSD socket state is not properly updated when DNS fails or connect is performed asynchronously.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,440,2020-03-17T20:13:01Z,2020-03-18T17:42:03Z,2020-03-27T17:34:35Z,MERGED,True,472,206,26,https://github.com/ttins,Malloc to Calloc calls for 0 initialize padding bytes,4,[],https://github.com/Azure/azure-c-shared-utility/pull/440,https://github.com/ttins,1,https://github.com/Azure/azure-c-shared-utility/pull/440,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,440,2020-03-17T20:13:01Z,2020-03-18T17:42:03Z,2020-03-27T17:34:35Z,MERGED,True,472,206,26,https://github.com/ttins,Malloc to Calloc calls for 0 initialize padding bytes,4,[],https://github.com/Azure/azure-c-shared-utility/pull/440,https://github.com/ttins,2,https://github.com/Azure/azure-c-shared-utility/pull/440#issuecomment-600275262,,Do not merge until [https://github.com/Azure/azure-iot-sdk-c/pull/1455] has been merged,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,441,2020-03-19T03:00:25Z,2021-09-01T20:26:27Z,2021-09-01T20:26:31Z,CLOSED,False,2,0,1,https://github.com/jbobotek,Update .vsts-ci.yml for Azure Pipelines,2,[],https://github.com/Azure/azure-c-shared-utility/pull/441,https://github.com/jbobotek,1,https://github.com/Azure/azure-c-shared-utility/pull/441,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,442,2020-03-20T21:03:18Z,2021-11-02T20:57:51Z,2021-11-02T20:57:51Z,CLOSED,False,1,1,1,https://github.com/Garry-Anderson,Update porting_guide.md,1,[],https://github.com/Azure/azure-c-shared-utility/pull/442,https://github.com/Garry-Anderson,1,https://github.com/Azure/azure-c-shared-utility/pull/442,Porting Guide is missing information about turning off the WIN32 compile switch.,Porting Guide is missing information about turning off the WIN32 compile switch.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,442,2020-03-20T21:03:18Z,2021-11-02T20:57:51Z,2021-11-02T20:57:51Z,CLOSED,False,1,1,1,https://github.com/Garry-Anderson,Update porting_guide.md,1,[],https://github.com/Azure/azure-c-shared-utility/pull/442,https://github.com/ericwol-msft,2,https://github.com/Azure/azure-c-shared-utility/pull/442#issuecomment-958160809,Porting Guide is missing information about turning off the WIN32 compile switch.,Rejecting PR changes.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,444,2020-03-24T10:33:33Z,2021-09-01T22:30:18Z,2021-09-02T15:28:17Z,MERGED,True,6,0,1,https://github.com/yulin-li,"fix #443, a dead loop in read chunk",2,[],https://github.com/Azure/azure-c-shared-utility/pull/444,https://github.com/yulin-li,1,https://github.com/Azure/azure-c-shared-utility/pull/444,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,444,2020-03-24T10:33:33Z,2021-09-01T22:30:18Z,2021-09-02T15:28:17Z,MERGED,True,6,0,1,https://github.com/yulin-li,"fix #443, a dead loop in read chunk",2,[],https://github.com/Azure/azure-c-shared-utility/pull/444,https://github.com/danewalton,2,https://github.com/Azure/azure-c-shared-utility/pull/444#issuecomment-910828749,,/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,444,2020-03-24T10:33:33Z,2021-09-01T22:30:18Z,2021-09-02T15:28:17Z,MERGED,True,6,0,1,https://github.com/yulin-li,"fix #443, a dead loop in read chunk",2,[],https://github.com/Azure/azure-c-shared-utility/pull/444,https://github.com/apps/azure-pipelines,3,https://github.com/Azure/azure-c-shared-utility/pull/444#issuecomment-910828851,,Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,445,2020-03-31T22:33:53Z,2020-04-02T21:14:58Z,2020-04-02T21:14:58Z,MERGED,True,40,27,3,https://github.com/ttins,Ttins/bug 43496,4,[],https://github.com/Azure/azure-c-shared-utility/pull/445,https://github.com/ttins,1,https://github.com/Azure/azure-c-shared-utility/pull/445,"Fixes for bugs:
4349662 & 6084598
4349643
4349642","Fixes for bugs:
4349662 & 6084598
4349643
4349642",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,446,2020-04-02T13:13:49Z,2020-07-07T11:42:31Z,2020-07-07T11:42:31Z,CLOSED,False,99,1,1,https://github.com/alexmrtn,add proxy support for httpapi compact,1,[],https://github.com/Azure/azure-c-shared-utility/pull/446,https://github.com/alexmrtn,1,https://github.com/Azure/azure-c-shared-utility/pull/446,"Hi,
This PR address the gap in HTTPAPI_compact implementation where proxy can not be used.
We had to introduce a small workaround  as the tlsio brick is created in the HTTPAPI_CreateConnection function, we destroy it and recreate one upon the call of HTTPAPI_SetOption
What do you think?
Best regards,","Hi,
This PR address the gap in HTTPAPI_compact implementation where proxy can not be used.
We had to introduce a small workaround  as the tlsio brick is created in the HTTPAPI_CreateConnection function, we destroy it and recreate one upon the call of HTTPAPI_SetOption
What do you think?
Best regards,",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,446,2020-04-02T13:13:49Z,2020-07-07T11:42:31Z,2020-07-07T11:42:31Z,CLOSED,False,99,1,1,https://github.com/alexmrtn,add proxy support for httpapi compact,1,[],https://github.com/Azure/azure-c-shared-utility/pull/446,https://github.com/alexmrtn,2,https://github.com/Azure/azure-c-shared-utility/pull/446#issuecomment-651101930,"Hi,
This PR address the gap in HTTPAPI_compact implementation where proxy can not be used.
We had to introduce a small workaround  as the tlsio brick is created in the HTTPAPI_CreateConnection function, we destroy it and recreate one upon the call of HTTPAPI_SetOption
What do you think?
Best regards,","rebased on latests master
malloc and free for hostName in http_instance
remove the logInfo for proxy config we previously introduced to prevent too much logs",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,446,2020-04-02T13:13:49Z,2020-07-07T11:42:31Z,2020-07-07T11:42:31Z,CLOSED,False,99,1,1,https://github.com/alexmrtn,add proxy support for httpapi compact,1,[],https://github.com/Azure/azure-c-shared-utility/pull/446,https://github.com/alexmrtn,3,https://github.com/Azure/azure-c-shared-utility/pull/446#issuecomment-654797557,"Hi,
This PR address the gap in HTTPAPI_compact implementation where proxy can not be used.
We had to introduce a small workaround  as the tlsio brick is created in the HTTPAPI_CreateConnection function, we destroy it and recreate one upon the call of HTTPAPI_SetOption
What do you think?
Best regards,",resolved by #455,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,447,2020-04-02T13:34:41Z,2020-07-08T00:47:46Z,2020-07-08T00:47:46Z,CLOSED,False,14,9,3,https://github.com/alexmrtn,fix library ref and casts in tlsio_mbedtls,1,[],https://github.com/Azure/azure-c-shared-utility/pull/447,https://github.com/alexmrtn,1,https://github.com/Azure/azure-c-shared-utility/pull/447,"Hi,
Small fixes to use mbedtls library on windows,
it fix cast errors and libraries missing .lib extention in cmakefile
Regards,","Hi,
Small fixes to use mbedtls library on windows,
it fix cast errors and libraries missing .lib extention in cmakefile
Regards,",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,447,2020-04-02T13:34:41Z,2020-07-08T00:47:46Z,2020-07-08T00:47:46Z,CLOSED,False,14,9,3,https://github.com/alexmrtn,fix library ref and casts in tlsio_mbedtls,1,[],https://github.com/Azure/azure-c-shared-utility/pull/447,https://github.com/alexmrtn,2,https://github.com/Azure/azure-c-shared-utility/pull/447#issuecomment-651013918,"Hi,
Small fixes to use mbedtls library on windows,
it fix cast errors and libraries missing .lib extention in cmakefile
Regards,","Hi, I understand that if a new feature is enabled it needs e2e tests. I need to check if we have bandwidth to implement it and come back to you!",True,{'THUMBS_UP': ['https://github.com/ewertons']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,447,2020-04-02T13:34:41Z,2020-07-08T00:47:46Z,2020-07-08T00:47:46Z,CLOSED,False,14,9,3,https://github.com/alexmrtn,fix library ref and casts in tlsio_mbedtls,1,[],https://github.com/Azure/azure-c-shared-utility/pull/447,https://github.com/ewertons,3,https://github.com/Azure/azure-c-shared-utility/pull/447#issuecomment-655214495,"Hi,
Small fixes to use mbedtls library on windows,
it fix cast errors and libraries missing .lib extention in cmakefile
Regards,","This change is now merged through PR #457.
We will add the proper tests on azure-iot-sdk-c repo.
Thanks for contributing to the Azure IoT SDKs!",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,448,2020-04-02T23:04:59Z,2020-04-03T23:18:49Z,2020-04-06T16:37:25Z,MERGED,True,0,8,2,https://github.com/ttins,Removed length check,2,[],https://github.com/Azure/azure-c-shared-utility/pull/448,https://github.com/ttins,1,https://github.com/Azure/azure-c-shared-utility/pull/448,Upon further testing in the e2e tests it seems this is not allowed and the function call in question resets the Message_Block_Index to 0 so this is actually not a bug - Revert to unmodified code,Upon further testing in the e2e tests it seems this is not allowed and the function call in question resets the Message_Block_Index to 0 so this is actually not a bug - Revert to unmodified code,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,450,2020-04-04T00:54:17Z,2020-04-04T01:24:56Z,2020-04-04T01:25:04Z,MERGED,True,25,5,2,https://github.com/jbobotek,Jbobotek new raspberrypi job,4,[],https://github.com/Azure/azure-c-shared-utility/pull/450,https://github.com/jbobotek,1,https://github.com/Azure/azure-c-shared-utility/pull/450,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,451,2020-04-08T05:25:27Z,2021-10-29T00:08:09Z,2021-10-29T00:08:10Z,CLOSED,False,3,0,1,https://github.com/reubeno,Suppress unused parameter warning,1,[],https://github.com/Azure/azure-c-shared-utility/pull/451,https://github.com/reubeno,1,https://github.com/Azure/azure-c-shared-utility/pull/451,This change addresses unused parameter warnings in process_option() by invoking the UNUSED macro.,This change addresses unused parameter warnings in process_option() by invoking the UNUSED macro.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,451,2020-04-08T05:25:27Z,2021-10-29T00:08:09Z,2021-10-29T00:08:10Z,CLOSED,False,3,0,1,https://github.com/reubeno,Suppress unused parameter warning,1,[],https://github.com/Azure/azure-c-shared-utility/pull/451,https://github.com/jspaith,2,https://github.com/Azure/azure-c-shared-utility/pull/451#issuecomment-954310491,This change addresses unused parameter warnings in process_option() by invoking the UNUSED macro.,"Hey @reubeno - sorry for delay responding, though fortunately #481 fixed the same issue so closing this one out.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,452,2020-04-29T16:59:33Z,2020-04-29T21:06:27Z,2020-10-30T22:15:04Z,MERGED,True,95,8,2,https://github.com/ewertons,Add proper handling of options retrieval in Http Proxy IO,2,[],https://github.com/Azure/azure-c-shared-utility/pull/452,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/452,"HTTP proxy IO tries to simplify the retrieve_options() function by returning the result of the
underlying I/O layer retrieve_options() directly, but that does not work when upper layer (TLS I/O)
tries to reapply the saved options.","HTTP proxy IO tries to simplify the retrieve_options() function by returning the result of the
underlying I/O layer retrieve_options() directly, but that does not work when upper layer (TLS I/O)
tries to reapply the saved options.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,453,2020-05-15T17:39:17Z,2020-05-16T16:46:04Z,2020-05-18T20:13:39Z,MERGED,True,22,0,1,https://github.com/ewertons,Update tlsio_openssl to send SNI on client hello,1,[],https://github.com/Azure/azure-c-shared-utility/pull/453,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/453,"This change addresses github issue #428
It is implemented by adding a call to SSL_set_tlsext_host_name (thanks @milope).
Verified through wireshark capture that SNI is now being sent:
Frame 39: 407 bytes on wire (3256 bits), 407 bytes captured (3256 bits) on interface 0
Ethernet II, Src: IntelCor_aa:bb:cc (dd:ee:ff:aa:bb:cc), Dst: Ubiquiti_4c:4d:f7 (aa:bb:cc:dd:ee:ff)
Internet Protocol Version 4, Src: 192.168.1.186, Dst: 52.180.177.125
Transmission Control Protocol, Src Port: 56250, Dst Port: 5671, Seq: 1, Ack: 1, Len: 341
Secure Sockets Layer
    TLSv1.2 Record Layer: Handshake Protocol: Client Hello
        Content Type: Handshake (22)
        Version: TLS 1.0 (0x0301)
        Length: 336
        Handshake Protocol: Client Hello
...
            Extension: server_name (len=44)
                Type: server_name (0)
                Length: 44
                Server Name Indication extension
                    Server Name list length: 42
                    Server Name Type: host_name (0)
                    Server Name length: 39
                    Server Name: contoso-iothub-000001.azure-devices.net","This change addresses github issue #428
It is implemented by adding a call to SSL_set_tlsext_host_name (thanks @milope).
Verified through wireshark capture that SNI is now being sent:
Frame 39: 407 bytes on wire (3256 bits), 407 bytes captured (3256 bits) on interface 0
Ethernet II, Src: IntelCor_aa:bb:cc (dd:ee:ff:aa:bb:cc), Dst: Ubiquiti_4c:4d:f7 (aa:bb:cc:dd:ee:ff)
Internet Protocol Version 4, Src: 192.168.1.186, Dst: 52.180.177.125
Transmission Control Protocol, Src Port: 56250, Dst Port: 5671, Seq: 1, Ack: 1, Len: 341
Secure Sockets Layer
    TLSv1.2 Record Layer: Handshake Protocol: Client Hello
        Content Type: Handshake (22)
        Version: TLS 1.0 (0x0301)
        Length: 336
        Handshake Protocol: Client Hello
...
            Extension: server_name (len=44)
                Type: server_name (0)
                Length: 44
                Server Name Indication extension
                    Server Name list length: 42
                    Server Name Type: host_name (0)
                    Server Name length: 39
                    Server Name: contoso-iothub-000001.azure-devices.net",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,453,2020-05-15T17:39:17Z,2020-05-16T16:46:04Z,2020-05-18T20:13:39Z,MERGED,True,22,0,1,https://github.com/ewertons,Update tlsio_openssl to send SNI on client hello,1,[],https://github.com/Azure/azure-c-shared-utility/pull/453,https://github.com/danewalton,2,https://github.com/Azure/azure-c-shared-utility/pull/453#issuecomment-629400142,"This change addresses github issue #428
It is implemented by adding a call to SSL_set_tlsext_host_name (thanks @milope).
Verified through wireshark capture that SNI is now being sent:
Frame 39: 407 bytes on wire (3256 bits), 407 bytes captured (3256 bits) on interface 0
Ethernet II, Src: IntelCor_aa:bb:cc (dd:ee:ff:aa:bb:cc), Dst: Ubiquiti_4c:4d:f7 (aa:bb:cc:dd:ee:ff)
Internet Protocol Version 4, Src: 192.168.1.186, Dst: 52.180.177.125
Transmission Control Protocol, Src Port: 56250, Dst Port: 5671, Seq: 1, Ack: 1, Len: 341
Secure Sockets Layer
    TLSv1.2 Record Layer: Handshake Protocol: Client Hello
        Content Type: Handshake (22)
        Version: TLS 1.0 (0x0301)
        Length: 336
        Handshake Protocol: Client Hello
...
            Extension: server_name (len=44)
                Type: server_name (0)
                Length: 44
                Server Name Indication extension
                    Server Name list length: 42
                    Server Name Type: host_name (0)
                    Server Name length: 39
                    Server Name: contoso-iothub-000001.azure-devices.net",sorry...but....any UT's for this?,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,453,2020-05-15T17:39:17Z,2020-05-16T16:46:04Z,2020-05-18T20:13:39Z,MERGED,True,22,0,1,https://github.com/ewertons,Update tlsio_openssl to send SNI on client hello,1,[],https://github.com/Azure/azure-c-shared-utility/pull/453,https://github.com/ewertons,3,https://github.com/Azure/azure-c-shared-utility/pull/453#issuecomment-629673803,"This change addresses github issue #428
It is implemented by adding a call to SSL_set_tlsext_host_name (thanks @milope).
Verified through wireshark capture that SNI is now being sent:
Frame 39: 407 bytes on wire (3256 bits), 407 bytes captured (3256 bits) on interface 0
Ethernet II, Src: IntelCor_aa:bb:cc (dd:ee:ff:aa:bb:cc), Dst: Ubiquiti_4c:4d:f7 (aa:bb:cc:dd:ee:ff)
Internet Protocol Version 4, Src: 192.168.1.186, Dst: 52.180.177.125
Transmission Control Protocol, Src Port: 56250, Dst Port: 5671, Seq: 1, Ack: 1, Len: 341
Secure Sockets Layer
    TLSv1.2 Record Layer: Handshake Protocol: Client Hello
        Content Type: Handshake (22)
        Version: TLS 1.0 (0x0301)
        Length: 336
        Handshake Protocol: Client Hello
...
            Extension: server_name (len=44)
                Type: server_name (0)
                Length: 44
                Server Name Indication extension
                    Server Name list length: 42
                    Server Name Type: host_name (0)
                    Server Name length: 39
                    Server Name: contoso-iothub-000001.azure-devices.net","@danewalton yes, unfortunately that is a technical debt on the SDK, we have no unit tests for tlsio_openssl at all.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,454,2020-06-29T20:57:18Z,2020-06-30T01:18:58Z,2020-08-12T01:10:39Z,MERGED,True,3,4,1,https://github.com/ericwol-msft,Update porting_guide.md,1,[],https://github.com/Azure/azure-c-shared-utility/pull/454,https://github.com/ericwol-msft,1,https://github.com/Azure/azure-c-shared-utility/pull/454,#449,#449,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,455,2020-07-03T02:03:02Z,2020-07-06T20:01:12Z,2020-10-30T22:15:02Z,MERGED,True,188,60,2,https://github.com/ewertons,Se/add support proxy httpapi compact,3,[],https://github.com/Azure/azure-c-shared-utility/pull/455,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/455,"This is a PR that replaces #446
Adding fixes and unit tests.","This is a PR that replaces #446
Adding fixes and unit tests.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,456,2020-07-04T00:19:44Z,2021-09-01T17:52:15Z,2021-09-01T17:52:15Z,CLOSED,False,0,0,0,https://github.com/sergioprado,Fix redirection of errno header,2,[],https://github.com/Azure/azure-c-shared-utility/pull/456,https://github.com/sergioprado,1,https://github.com/Azure/azure-c-shared-utility/pull/456,"The POSIX correct header to include is <errno.h>.
The glibc silently redirects incorrect includes, but musl libc prints
a warning:
#warning redirecting incorrect #include <sys/errno.h> to <errno.h>
Signed-off-by: Sergio Prado sergio.prado@e-labworks.com","The POSIX correct header to include is <errno.h>.
The glibc silently redirects incorrect includes, but musl libc prints
a warning:
#warning redirecting incorrect #include <sys/errno.h> to <errno.h>
Signed-off-by: Sergio Prado sergio.prado@e-labworks.com",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,456,2020-07-04T00:19:44Z,2021-09-01T17:52:15Z,2021-09-01T17:52:15Z,CLOSED,False,0,0,0,https://github.com/sergioprado,Fix redirection of errno header,2,[],https://github.com/Azure/azure-c-shared-utility/pull/456,https://github.com/danewalton,2,https://github.com/Azure/azure-c-shared-utility/pull/456#issuecomment-910516262,"The POSIX correct header to include is <errno.h>.
The glibc silently redirects incorrect includes, but musl libc prints
a warning:
#warning redirecting incorrect #include <sys/errno.h> to <errno.h>
Signed-off-by: Sergio Prado sergio.prado@e-labworks.com",This has already been updated in the code thank you for the contribution!,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,457,2020-07-08T00:25:11Z,2020-07-08T00:46:24Z,2020-07-08T00:46:28Z,MERGED,True,14,9,3,https://github.com/ewertons,fix library ref and casts in tlsio_mbedtls,1,[],https://github.com/Azure/azure-c-shared-utility/pull/457,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/457,This updates and replaces #447,This updates and replaces #447,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,460,2020-08-03T14:42:41Z,,2021-11-05T18:55:05Z,OPEN,False,1,1,1,https://github.com/makononov,Update call to get private key for compatibility with OpenSSL@1.1,2,[],https://github.com/Azure/azure-c-shared-utility/pull/460,https://github.com/makononov,1,https://github.com/Azure/azure-c-shared-utility/pull/460,This changes updates the method used to get the PK ID to make it compatible with OpenSSL@1.1,This changes updates the method used to get the PK ID to make it compatible with OpenSSL@1.1,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,460,2020-08-03T14:42:41Z,,2021-11-05T18:55:05Z,OPEN,False,1,1,1,https://github.com/makononov,Update call to get private key for compatibility with OpenSSL@1.1,2,[],https://github.com/Azure/azure-c-shared-utility/pull/460,https://github.com/danewalton,2,https://github.com/Azure/azure-c-shared-utility/pull/460#issuecomment-962138215,This changes updates the method used to get the PK ID to make it compatible with OpenSSL@1.1,"Does this solution work as well for you?
Azure/azure-iot-sdk-c#2026 (comment)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,461,2020-08-10T19:32:33Z,2020-08-10T21:33:20Z,2020-10-30T23:07:07Z,MERGED,True,2,2,1,https://github.com/hihigupt,Fix bug FormatMessage usage,1,[],https://github.com/Azure/azure-c-shared-utility/pull/461,https://github.com/hihigupt,1,https://github.com/Azure/azure-c-shared-utility/pull/461,"Changes: Fix usage of FormatMessage usage.
'Param(5)' could be '0': this does not adhere to the specification for
the function 'FormatMessageA'.","Changes: Fix usage of FormatMessage usage.
'Param(5)' could be '0': this does not adhere to the specification for
the function 'FormatMessageA'.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,462,2020-08-10T21:04:47Z,2020-10-21T19:44:50Z,2020-12-07T20:34:58Z,MERGED,True,30,1,1,https://github.com/fz-lyu,fix wolfssl retry bug,4,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/462,https://github.com/fz-lyu,1,https://github.com/Azure/azure-c-shared-utility/pull/462,fix wolfssl retry bug,fix wolfssl retry bug,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,462,2020-08-10T21:04:47Z,2020-10-21T19:44:50Z,2020-12-07T20:34:58Z,MERGED,True,30,1,1,https://github.com/fz-lyu,fix wolfssl retry bug,4,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/462,https://github.com/apps/microsoft-cla,2,https://github.com/Azure/azure-c-shared-utility/pull/462#issuecomment-671589156,fix wolfssl retry bug,All CLA requirements met.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,462,2020-08-10T21:04:47Z,2020-10-21T19:44:50Z,2020-12-07T20:34:58Z,MERGED,True,30,1,1,https://github.com/fz-lyu,fix wolfssl retry bug,4,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/462,https://github.com/momuno,3,https://github.com/Azure/azure-c-shared-utility/pull/462#issuecomment-702539558,fix wolfssl retry bug,@fanzhe98 I have the task to validate and merge this fix.  Can you tell me more about how the bug was found initially so I know what I'm testing against?  I don't see any linked issues. Thanks.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,462,2020-08-10T21:04:47Z,2020-10-21T19:44:50Z,2020-12-07T20:34:58Z,MERGED,True,30,1,1,https://github.com/fz-lyu,fix wolfssl retry bug,4,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/462,https://github.com/fz-lyu,4,https://github.com/Azure/azure-c-shared-utility/pull/462#issuecomment-708892486,fix wolfssl retry bug,@momuno please see the latest change,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,462,2020-08-10T21:04:47Z,2020-10-21T19:44:50Z,2020-12-07T20:34:58Z,MERGED,True,30,1,1,https://github.com/fz-lyu,fix wolfssl retry bug,4,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/462,https://github.com/momuno,5,https://github.com/Azure/azure-c-shared-utility/pull/462#issuecomment-712556462,fix wolfssl retry bug,"Since it is not possible for me to validate these updated changes on the Sphere (I don't have access to your build environment currently), can you please test the updated code and confirm it works?  Is there a way you can forward me that OS test bundle to install on my sphere so I can validate?  Thank you!",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,462,2020-08-10T21:04:47Z,2020-10-21T19:44:50Z,2020-12-07T20:34:58Z,MERGED,True,30,1,1,https://github.com/fz-lyu,fix wolfssl retry bug,4,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/462,https://github.com/fz-lyu,6,https://github.com/Azure/azure-c-shared-utility/pull/462#issuecomment-712587326,fix wolfssl retry bug,"Since it is not possible for me to validate these updated changes on the Sphere (I don't have access to your build environment currently), can you please test the updated code and confirm it works? Is there a way you can forward me that OS test bundle to install on my sphere so I can validate? Thank you!

Hi Mollie, I believe this is affecting all the customers who are using the C SDK with wolfssl. Verifying on our OS test bundle is not comprehensive enough for this task since we also modify some of our code to adapt our OS components. I could do so if this is the last resort. @ewertons, Could you please help @momuno here? Thanks!",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,462,2020-08-10T21:04:47Z,2020-10-21T19:44:50Z,2020-12-07T20:34:58Z,MERGED,True,30,1,1,https://github.com/fz-lyu,fix wolfssl retry bug,4,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/462,https://github.com/momuno,7,https://github.com/Azure/azure-c-shared-utility/pull/462#issuecomment-712625257,fix wolfssl retry bug,"Since it is not possible for me to validate these updated changes on the Sphere (I don't have access to your build environment currently), can you please test the updated code and confirm it works? Is there a way you can forward me that OS test bundle to install on my sphere so I can validate? Thank you!

Hi Mollie, I believe this is affecting all the customers who are using the C SDK with wolfssl. Verifying on our OS test bundle is not comprehensive enough for this task since we also modify some of our code to adapt our OS components. I could do so if this is the last resort. @ewertons, Could you please help @momuno here? Thanks!

Since the PR changes have been updated, it would be helpful if you could please validate those changes still work as expected for the Azure Sphere.  I am currently blocked at testing on Linux due to a newly discovered bug with wolfssl.  I will also talk to my team about what other device options we have to test on.  Thanks Fanzhe for your work on this.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,462,2020-08-10T21:04:47Z,2020-10-21T19:44:50Z,2020-12-07T20:34:58Z,MERGED,True,30,1,1,https://github.com/fz-lyu,fix wolfssl retry bug,4,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/462,https://github.com/fz-lyu,8,https://github.com/Azure/azure-c-shared-utility/pull/462#issuecomment-712642565,fix wolfssl retry bug,"Since it is not possible for me to validate these updated changes on the Sphere (I don't have access to your build environment currently), can you please test the updated code and confirm it works? Is there a way you can forward me that OS test bundle to install on my sphere so I can validate? Thank you!

Hi Mollie, I believe this is affecting all the customers who are using the C SDK with wolfssl. Verifying on our OS test bundle is not comprehensive enough for this task since we also modify some of our code to adapt our OS components. I could do so if this is the last resort. @ewertons, Could you please help @momuno here? Thanks!

Since the PR changes have been updated, it would be helpful if you could please validate those changes still work as expected for the Azure Sphere. I am currently blocked at testing on Linux due to a newly discovered bug with wolfssl. I will also talk to my team about what other device options we have to test on. Thanks Fanzhe for your work on this.

It works. Again, even though this is a data point, you should not rely on whether the patch is working on Azure Sphere or not.",True,{'THUMBS_UP': ['https://github.com/momuno']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,462,2020-08-10T21:04:47Z,2020-10-21T19:44:50Z,2020-12-07T20:34:58Z,MERGED,True,30,1,1,https://github.com/fz-lyu,fix wolfssl retry bug,4,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/462,https://github.com/momuno,9,https://github.com/Azure/azure-c-shared-utility/pull/462#issuecomment-713323262,fix wolfssl retry bug,"Issue addressed:
Toggling wifi enable/disable state on Azure Sphere, the device will not reconnect.
On a PC, reconnection will happen.
Testing:
Above code changes tested on Azure Sphere and fix the issue.
On a PC, the bug cannot be reproduced, which aligns with the original issue described.
Will merge and close.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,462,2020-08-10T21:04:47Z,2020-10-21T19:44:50Z,2020-12-07T20:34:58Z,MERGED,True,30,1,1,https://github.com/fz-lyu,fix wolfssl retry bug,4,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/462,https://github.com/fz-lyu,10,https://github.com/Azure/azure-c-shared-utility/pull/462#issuecomment-713345560,fix wolfssl retry bug,"Issue addressed:
Toggling wifi enable/disable state on Azure Sphere, the device will not reconnect.
On a PC, reconnection will happen.
Testing:
Above code changes tested on Azure Sphere and fix the issue.
On a PC, the bug cannot be reproduced, which aligns with the original issue described.
Will merge and close.

I believe this bug is targeting a general usage of wolfssl instead of only problems on Azure Sphere. Even though verifying on Azure Sphere provide a significant data point, I think it is better for you to test on your build environment. Anyway, this should be your group's call.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,462,2020-08-10T21:04:47Z,2020-10-21T19:44:50Z,2020-12-07T20:34:58Z,MERGED,True,30,1,1,https://github.com/fz-lyu,fix wolfssl retry bug,4,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/462,https://github.com/momuno,11,https://github.com/Azure/azure-c-shared-utility/pull/462#issuecomment-713738806,fix wolfssl retry bug,/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,462,2020-08-10T21:04:47Z,2020-10-21T19:44:50Z,2020-12-07T20:34:58Z,MERGED,True,30,1,1,https://github.com/fz-lyu,fix wolfssl retry bug,4,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/462,https://github.com/apps/azure-pipelines,12,https://github.com/Azure/azure-c-shared-utility/pull/462#issuecomment-713738853,fix wolfssl retry bug,No pipelines are associated with this pull request.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,462,2020-08-10T21:04:47Z,2020-10-21T19:44:50Z,2020-12-07T20:34:58Z,MERGED,True,30,1,1,https://github.com/fz-lyu,fix wolfssl retry bug,4,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/462,https://github.com/danewalton,13,https://github.com/Azure/azure-c-shared-utility/pull/462#issuecomment-713740128,fix wolfssl retry bug,/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,462,2020-08-10T21:04:47Z,2020-10-21T19:44:50Z,2020-12-07T20:34:58Z,MERGED,True,30,1,1,https://github.com/fz-lyu,fix wolfssl retry bug,4,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/462,https://github.com/apps/azure-pipelines,14,https://github.com/Azure/azure-c-shared-utility/pull/462#issuecomment-713740211,fix wolfssl retry bug,Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,463,2020-08-11T18:37:46Z,2020-08-11T18:58:38Z,2020-08-11T18:58:41Z,MERGED,True,81,0,1,https://github.com/danewalton,add constbuffer_array_batcher_batch ut for middle empty array,2,[],https://github.com/Azure/azure-c-shared-utility/pull/463,https://github.com/danewalton,1,https://github.com/Azure/azure-c-shared-utility/pull/463,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,464,2020-08-11T19:51:49Z,2020-08-11T20:33:47Z,2020-08-11T20:34:44Z,MERGED,True,4,3,1,https://github.com/danewalton,update dec ref for loop max value,5,[],https://github.com/Azure/azure-c-shared-utility/pull/464,https://github.com/danewalton,1,https://github.com/Azure/azure-c-shared-utility/pull/464,Updates the loop over which all_buffers is dec_ref'd to the size which originally allocated all_buffers instead of an indirectly-the-same value.,Updates the loop over which all_buffers is dec_ref'd to the size which originally allocated all_buffers instead of an indirectly-the-same value.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,465,2020-08-11T20:30:56Z,2020-08-12T17:34:08Z,2020-08-12T17:34:19Z,MERGED,True,8,5,5,https://github.com/ericwol-msft,Ericwol/sdl bugfix,5,[],https://github.com/Azure/azure-c-shared-utility/pull/465,https://github.com/ericwol-msft,1,https://github.com/Azure/azure-c-shared-utility/pull/465,"7579464 - Defect : WriteOverrun, Component : c-utility\src\sha384-512.c
7579487 - Defect : Unknown, Component : c-utility\src\crt_abstractions.c
7579472 - Defect : UsingUninitVar, Component : c-utility\adapters\httpapi_winhttp.c
7579467 - Defect : Unknown, Component : c-utility\src\sastoken.c
7579478 - Defect : UsingUninitVar, Component : c-utility\src\httpapiexsas.c","7579464 - Defect : WriteOverrun, Component : c-utility\src\sha384-512.c
7579487 - Defect : Unknown, Component : c-utility\src\crt_abstractions.c
7579472 - Defect : UsingUninitVar, Component : c-utility\adapters\httpapi_winhttp.c
7579467 - Defect : Unknown, Component : c-utility\src\sastoken.c
7579478 - Defect : UsingUninitVar, Component : c-utility\src\httpapiexsas.c",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,466,2020-08-11T22:32:31Z,2020-08-11T22:47:04Z,2020-08-11T22:47:16Z,CLOSED,False,2,5,1,https://github.com/momuno,Fix for bug-7579476,1,['bug'],https://github.com/Azure/azure-c-shared-utility/pull/466,https://github.com/momuno,1,https://github.com/Azure/azure-c-shared-utility/pull/466,"While memory was allocated for buffer_size + size + 1, memcpy only copied up to buffer_size + size.
I would think writing 0 to the last position of the reallocated memory would be fine, but based on the reported details of the bug there was still a complaint:
""Buffer overrun while writing to 'http_proxy_io_instance->receive_buffer': the writable size is 'http_proxy_io_instance->receive_buffer_size+size+1' bytes, but 'http_proxy_io_instance->receive_buffer_size' bytes might be written.""","While memory was allocated for buffer_size + size + 1, memcpy only copied up to buffer_size + size.
I would think writing 0 to the last position of the reallocated memory would be fine, but based on the reported details of the bug there was still a complaint:
""Buffer overrun while writing to 'http_proxy_io_instance->receive_buffer': the writable size is 'http_proxy_io_instance->receive_buffer_size+size+1' bytes, but 'http_proxy_io_instance->receive_buffer_size' bytes might be written.""",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,466,2020-08-11T22:32:31Z,2020-08-11T22:47:04Z,2020-08-11T22:47:16Z,CLOSED,False,2,5,1,https://github.com/momuno,Fix for bug-7579476,1,['bug'],https://github.com/Azure/azure-c-shared-utility/pull/466,https://github.com/momuno,2,https://github.com/Azure/azure-c-shared-utility/pull/466#issuecomment-672334540,"While memory was allocated for buffer_size + size + 1, memcpy only copied up to buffer_size + size.
I would think writing 0 to the last position of the reallocated memory would be fine, but based on the reported details of the bug there was still a complaint:
""Buffer overrun while writing to 'http_proxy_io_instance->receive_buffer': the writable size is 'http_proxy_io_instance->receive_buffer_size+size+1' bytes, but 'http_proxy_io_instance->receive_buffer_size' bytes might be written.""","I believe that will break the functionality.
Ignore.  Change reverted.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,467,2020-08-11T22:45:23Z,2020-08-12T01:53:22Z,2020-08-12T01:53:41Z,MERGED,True,6,1,1,https://github.com/danewalton,add check for overflow for BUFFER_prepend,3,[],https://github.com/Azure/azure-c-shared-utility/pull/467,https://github.com/danewalton,1,https://github.com/Azure/azure-c-shared-utility/pull/467,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,471,2020-09-02T21:33:07Z,2020-09-03T00:03:51Z,2020-10-30T23:07:05Z,MERGED,True,2,2,1,https://github.com/hihigupt,Fix: use correct wolfssl api in httpapi,2,[],https://github.com/Azure/azure-c-shared-utility/pull/471,https://github.com/hihigupt,1,https://github.com/Azure/azure-c-shared-utility/pull/471,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,472,2020-10-20T18:55:58Z,2020-10-21T21:14:53Z,2020-10-21T21:14:58Z,MERGED,True,2,0,1,https://github.com/ericwol-msft,fixed openssl include for protocol fuzzing,3,[],https://github.com/Azure/azure-c-shared-utility/pull/472,https://github.com/ericwol-msft,1,https://github.com/Azure/azure-c-shared-utility/pull/472,"This is needed so that we can build the fuzzer under linux, without openssl and socketio enabled","This is needed so that we can build the fuzzer under linux, without openssl and socketio enabled",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,472,2020-10-20T18:55:58Z,2020-10-21T21:14:53Z,2020-10-21T21:14:58Z,MERGED,True,2,0,1,https://github.com/ericwol-msft,fixed openssl include for protocol fuzzing,3,[],https://github.com/Azure/azure-c-shared-utility/pull/472,https://github.com/ericwol-msft,2,https://github.com/Azure/azure-c-shared-utility/pull/472#issuecomment-713741534,"This is needed so that we can build the fuzzer under linux, without openssl and socketio enabled",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,472,2020-10-20T18:55:58Z,2020-10-21T21:14:53Z,2020-10-21T21:14:58Z,MERGED,True,2,0,1,https://github.com/ericwol-msft,fixed openssl include for protocol fuzzing,3,[],https://github.com/Azure/azure-c-shared-utility/pull/472,https://github.com/apps/azure-pipelines,3,https://github.com/Azure/azure-c-shared-utility/pull/472#issuecomment-713741613,"This is needed so that we can build the fuzzer under linux, without openssl and socketio enabled",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,473,2020-10-21T07:39:57Z,2020-10-23T22:44:57Z,2020-12-07T20:36:42Z,MERGED,True,1,1,1,https://github.com/momuno,Fix for wolfssl failure to reconnect,4,"['bug', 'Azure Sphere']",https://github.com/Azure/azure-c-shared-utility/pull/473,https://github.com/momuno,1,https://github.com/Azure/azure-c-shared-utility/pull/473,"Address Issue #1704 of the azure-iot-sdk-c.
on_io_send is registered to be the function called for wolfssl_write(). (See tlsio_wolfssl.c, tlsio_wolfssl_create(): wolfSSL_SetIOSend(result->ssl_context, on_io_send);)
From the wolfssl sample implementing a similar pattern:
int CbIOSend(WOLFSSL *ssl, char *buf, int sz, void *ctx)
{
    int ret;
    int i;
    ret = write(fpSend, buf, sz);
    if (verboseFlag == 1) {
        printf(""/*------------------- SERVER SENDING ------------------*/\n"");
        for (i = 0; i < sz; i++) {
            printf(""%02x "", (unsigned char) buf[i]);
            if (i > 0 && (i % 16) == 0)
                printf(""\n"");
        }
        printf(""\n/*------------------- SERVER SENDING ------------------*/\n"");
    }
    return ret;
}

we see the return value is based on the result of write, so on error the value returned needs to be negative (-1), and not 0.  A return of 0 means nothing was written, and not that an actual error occurred. The appropriate return value to use then is WOLFSSL_CBIO_ERR_GENERAL (which is -1);
Please see issue #1704 for instructions on how to reproduce the bug and test this fix.","Address Issue #1704 of the azure-iot-sdk-c.
on_io_send is registered to be the function called for wolfssl_write(). (See tlsio_wolfssl.c, tlsio_wolfssl_create(): wolfSSL_SetIOSend(result->ssl_context, on_io_send);)
From the wolfssl sample implementing a similar pattern:
int CbIOSend(WOLFSSL *ssl, char *buf, int sz, void *ctx)
{
    int ret;
    int i;
    ret = write(fpSend, buf, sz);
    if (verboseFlag == 1) {
        printf(""/*------------------- SERVER SENDING ------------------*/\n"");
        for (i = 0; i < sz; i++) {
            printf(""%02x "", (unsigned char) buf[i]);
            if (i > 0 && (i % 16) == 0)
                printf(""\n"");
        }
        printf(""\n/*------------------- SERVER SENDING ------------------*/\n"");
    }
    return ret;
}

we see the return value is based on the result of write, so on error the value returned needs to be negative (-1), and not 0.  A return of 0 means nothing was written, and not that an actual error occurred. The appropriate return value to use then is WOLFSSL_CBIO_ERR_GENERAL (which is -1);
Please see issue #1704 for instructions on how to reproduce the bug and test this fix.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,473,2020-10-21T07:39:57Z,2020-10-23T22:44:57Z,2020-12-07T20:36:42Z,MERGED,True,1,1,1,https://github.com/momuno,Fix for wolfssl failure to reconnect,4,"['bug', 'Azure Sphere']",https://github.com/Azure/azure-c-shared-utility/pull/473,https://github.com/momuno,2,https://github.com/Azure/azure-c-shared-utility/pull/473#issuecomment-713741349,"Address Issue #1704 of the azure-iot-sdk-c.
on_io_send is registered to be the function called for wolfssl_write(). (See tlsio_wolfssl.c, tlsio_wolfssl_create(): wolfSSL_SetIOSend(result->ssl_context, on_io_send);)
From the wolfssl sample implementing a similar pattern:
int CbIOSend(WOLFSSL *ssl, char *buf, int sz, void *ctx)
{
    int ret;
    int i;
    ret = write(fpSend, buf, sz);
    if (verboseFlag == 1) {
        printf(""/*------------------- SERVER SENDING ------------------*/\n"");
        for (i = 0; i < sz; i++) {
            printf(""%02x "", (unsigned char) buf[i]);
            if (i > 0 && (i % 16) == 0)
                printf(""\n"");
        }
        printf(""\n/*------------------- SERVER SENDING ------------------*/\n"");
    }
    return ret;
}

we see the return value is based on the result of write, so on error the value returned needs to be negative (-1), and not 0.  A return of 0 means nothing was written, and not that an actual error occurred. The appropriate return value to use then is WOLFSSL_CBIO_ERR_GENERAL (which is -1);
Please see issue #1704 for instructions on how to reproduce the bug and test this fix.",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,473,2020-10-21T07:39:57Z,2020-10-23T22:44:57Z,2020-12-07T20:36:42Z,MERGED,True,1,1,1,https://github.com/momuno,Fix for wolfssl failure to reconnect,4,"['bug', 'Azure Sphere']",https://github.com/Azure/azure-c-shared-utility/pull/473,https://github.com/apps/azure-pipelines,3,https://github.com/Azure/azure-c-shared-utility/pull/473#issuecomment-713741431,"Address Issue #1704 of the azure-iot-sdk-c.
on_io_send is registered to be the function called for wolfssl_write(). (See tlsio_wolfssl.c, tlsio_wolfssl_create(): wolfSSL_SetIOSend(result->ssl_context, on_io_send);)
From the wolfssl sample implementing a similar pattern:
int CbIOSend(WOLFSSL *ssl, char *buf, int sz, void *ctx)
{
    int ret;
    int i;
    ret = write(fpSend, buf, sz);
    if (verboseFlag == 1) {
        printf(""/*------------------- SERVER SENDING ------------------*/\n"");
        for (i = 0; i < sz; i++) {
            printf(""%02x "", (unsigned char) buf[i]);
            if (i > 0 && (i % 16) == 0)
                printf(""\n"");
        }
        printf(""\n/*------------------- SERVER SENDING ------------------*/\n"");
    }
    return ret;
}

we see the return value is based on the result of write, so on error the value returned needs to be negative (-1), and not 0.  A return of 0 means nothing was written, and not that an actual error occurred. The appropriate return value to use then is WOLFSSL_CBIO_ERR_GENERAL (which is -1);
Please see issue #1704 for instructions on how to reproduce the bug and test this fix.",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,475,2020-10-26T18:40:33Z,2020-10-26T20:45:51Z,2020-10-26T20:46:07Z,MERGED,True,3,0,2,https://github.com/danewalton,fix memory leak in tlsio mbedtls,3,[],https://github.com/Azure/azure-c-shared-utility/pull/475,https://github.com/danewalton,1,https://github.com/Azure/azure-c-shared-utility/pull/475,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,476,2020-10-30T12:35:30Z,2020-11-02T19:21:53Z,2020-11-02T19:21:53Z,MERGED,True,4,4,1,https://github.com/YannGirard,add ecc support in httpapi_compact,1,[],https://github.com/Azure/azure-c-shared-utility/pull/476,https://github.com/YannGirard,1,https://github.com/Azure/azure-c-shared-utility/pull/476,"Hi,
This PR is designed to add ECC support for httpapi_compact. It is similar to the one made for curl (#120)
The underlying function in X509_schannel.c handle the RSA and ECC certificates but the options were missing in the SetOption and CloneOption functions of httpapi_compact implementation of HTTPAPI.","Hi,
This PR is designed to add ECC support for httpapi_compact. It is similar to the one made for curl (#120)
The underlying function in X509_schannel.c handle the RSA and ECC certificates but the options were missing in the SetOption and CloneOption functions of httpapi_compact implementation of HTTPAPI.",True,{'HEART': ['https://github.com/ewertons']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,476,2020-10-30T12:35:30Z,2020-11-02T19:21:53Z,2020-11-02T19:21:53Z,MERGED,True,4,4,1,https://github.com/YannGirard,add ecc support in httpapi_compact,1,[],https://github.com/Azure/azure-c-shared-utility/pull/476,https://github.com/ewertons,2,https://github.com/Azure/azure-c-shared-utility/pull/476#issuecomment-720670672,"Hi,
This PR is designed to add ECC support for httpapi_compact. It is similar to the one made for curl (#120)
The underlying function in X509_schannel.c handle the RSA and ECC certificates but the options were missing in the SetOption and CloneOption functions of httpapi_compact implementation of HTTPAPI.",/azp run integrate-into-repo-C-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,476,2020-10-30T12:35:30Z,2020-11-02T19:21:53Z,2020-11-02T19:21:53Z,MERGED,True,4,4,1,https://github.com/YannGirard,add ecc support in httpapi_compact,1,[],https://github.com/Azure/azure-c-shared-utility/pull/476,https://github.com/apps/azure-pipelines,3,https://github.com/Azure/azure-c-shared-utility/pull/476#issuecomment-720670743,"Hi,
This PR is designed to add ECC support for httpapi_compact. It is similar to the one made for curl (#120)
The underlying function in X509_schannel.c handle the RSA and ECC certificates but the options were missing in the SetOption and CloneOption functions of httpapi_compact implementation of HTTPAPI.",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,477,2020-11-09T08:50:02Z,2020-11-12T18:45:16Z,2020-11-12T18:45:17Z,MERGED,True,10,1,1,https://github.com/jbobotek,Fix for #1624 iOS 14 send temeletry fix,3,[],https://github.com/Azure/azure-c-shared-utility/pull/477,https://github.com/jbobotek,1,https://github.com/Azure/azure-c-shared-utility/pull/477,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,478,2020-11-23T19:38:25Z,2020-11-23T21:38:26Z,2020-11-23T21:38:27Z,MERGED,True,1,1,1,https://github.com/ericwol-msft,Fix compile issue on void*,2,[],https://github.com/Azure/azure-c-shared-utility/pull/478,https://github.com/ericwol-msft,1,https://github.com/Azure/azure-c-shared-utility/pull/478,"compile issue on Epson AT-991, Clear Linux OS Version 1, Intel icc 2021.1 Beta 20200827 and icpc 2021.1 Beta 20200827 for intel 64
Azure/azure-iot-sdk-c#1755","compile issue on Epson AT-991, Clear Linux OS Version 1, Intel icc 2021.1 Beta 20200827 and icpc 2021.1 Beta 20200827 for intel 64
Azure/azure-iot-sdk-c#1755",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,479,2020-11-30T20:19:07Z,2021-01-14T22:59:41Z,2021-01-14T22:59:41Z,MERGED,True,7,3,1,https://github.com/fz-lyu,patch to suppress sigpipe,3,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/479,https://github.com/fz-lyu,1,https://github.com/Azure/azure-c-shared-utility/pull/479,"patch to suppress sigpipe
Azure/azure-iot-sdk-c#1423","patch to suppress sigpipe
Azure/azure-iot-sdk-c#1423",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,479,2020-11-30T20:19:07Z,2021-01-14T22:59:41Z,2021-01-14T22:59:41Z,MERGED,True,7,3,1,https://github.com/fz-lyu,patch to suppress sigpipe,3,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/479,https://github.com/fz-lyu,2,https://github.com/Azure/azure-c-shared-utility/pull/479#issuecomment-737657672,"patch to suppress sigpipe
Azure/azure-iot-sdk-c#1423","for patch#11 discussed in the last meeting
cc @suhuruli @momuno",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,479,2020-11-30T20:19:07Z,2021-01-14T22:59:41Z,2021-01-14T22:59:41Z,MERGED,True,7,3,1,https://github.com/fz-lyu,patch to suppress sigpipe,3,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/479,https://github.com/ewertons,3,https://github.com/Azure/azure-c-shared-utility/pull/479#issuecomment-759076995,"patch to suppress sigpipe
Azure/azure-iot-sdk-c#1423","This change is good to go, with it just SIGPIPE is suppressed.
Source: https://www.man7.org/linux/man-pages/man2/send.2.html
Since we have a function in the tlsio for suppressing SIGPIPE, this commit wouldn't change the current expected behavior.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,479,2020-11-30T20:19:07Z,2021-01-14T22:59:41Z,2021-01-14T22:59:41Z,MERGED,True,7,3,1,https://github.com/fz-lyu,patch to suppress sigpipe,3,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/479,https://github.com/ewertons,4,https://github.com/Azure/azure-c-shared-utility/pull/479#issuecomment-759078885,"patch to suppress sigpipe
Azure/azure-iot-sdk-c#1423",/azp run all,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,479,2020-11-30T20:19:07Z,2021-01-14T22:59:41Z,2021-01-14T22:59:41Z,MERGED,True,7,3,1,https://github.com/fz-lyu,patch to suppress sigpipe,3,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/479,https://github.com/apps/azure-pipelines,5,https://github.com/Azure/azure-c-shared-utility/pull/479#issuecomment-759078914,"patch to suppress sigpipe
Azure/azure-iot-sdk-c#1423",No pipelines are associated with this pull request.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,479,2020-11-30T20:19:07Z,2021-01-14T22:59:41Z,2021-01-14T22:59:41Z,MERGED,True,7,3,1,https://github.com/fz-lyu,patch to suppress sigpipe,3,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/479,https://github.com/ewertons,6,https://github.com/Azure/azure-c-shared-utility/pull/479#issuecomment-759079189,"patch to suppress sigpipe
Azure/azure-iot-sdk-c#1423",/azp run integrate-into-repo-C-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,479,2020-11-30T20:19:07Z,2021-01-14T22:59:41Z,2021-01-14T22:59:41Z,MERGED,True,7,3,1,https://github.com/fz-lyu,patch to suppress sigpipe,3,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/479,https://github.com/apps/azure-pipelines,7,https://github.com/Azure/azure-c-shared-utility/pull/479#issuecomment-759079243,"patch to suppress sigpipe
Azure/azure-iot-sdk-c#1423",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,479,2020-11-30T20:19:07Z,2021-01-14T22:59:41Z,2021-01-14T22:59:41Z,MERGED,True,7,3,1,https://github.com/fz-lyu,patch to suppress sigpipe,3,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/479,https://github.com/ewertons,8,https://github.com/Azure/azure-c-shared-utility/pull/479#issuecomment-759082743,"patch to suppress sigpipe
Azure/azure-iot-sdk-c#1423","@fanzhe98 , this change fails to build on OS-X (it uses the same socket adapter).
For addressing that, one way is to add a define at the top of socketio_berkeley.c:
// MSG_NOSIGNAL is not defined on all platforms where socketio_berkeley.c is used (e.g., OS-X).
// Setting MSG_NOSIGNAL to 0 results in not suppressing SIGPIPE.
#ifndef MSG_NOSIGNAL
#define MSG_NOSIGNAL 0 
#endif
If you do need to have the signal suppressed on OS-X as well, this would be a recourse to be added:
https://stackoverflow.com/questions/19509348/sigpipe-osx-and-disconnected-sockets",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,479,2020-11-30T20:19:07Z,2021-01-14T22:59:41Z,2021-01-14T22:59:41Z,MERGED,True,7,3,1,https://github.com/fz-lyu,patch to suppress sigpipe,3,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/479,https://github.com/fz-lyu,9,https://github.com/Azure/azure-c-shared-utility/pull/479#issuecomment-759084992,"patch to suppress sigpipe
Azure/azure-iot-sdk-c#1423","@ewertons we do not support development on Os-X yet.
I will go ahead and add the lines of ifdef later today",True,{'THUMBS_UP': ['https://github.com/ewertons']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,479,2020-11-30T20:19:07Z,2021-01-14T22:59:41Z,2021-01-14T22:59:41Z,MERGED,True,7,3,1,https://github.com/fz-lyu,patch to suppress sigpipe,3,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/479,https://github.com/fz-lyu,10,https://github.com/Azure/azure-c-shared-utility/pull/479#issuecomment-759253879,"patch to suppress sigpipe
Azure/azure-iot-sdk-c#1423",/azp run integrate-into-repo-C-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,479,2020-11-30T20:19:07Z,2021-01-14T22:59:41Z,2021-01-14T22:59:41Z,MERGED,True,7,3,1,https://github.com/fz-lyu,patch to suppress sigpipe,3,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/479,https://github.com/apps/azure-pipelines,11,https://github.com/Azure/azure-c-shared-utility/pull/479#issuecomment-759253919,"patch to suppress sigpipe
Azure/azure-iot-sdk-c#1423",Commenter does not have sufficient privileges for PR 479 in repo Azure/azure-c-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,479,2020-11-30T20:19:07Z,2021-01-14T22:59:41Z,2021-01-14T22:59:41Z,MERGED,True,7,3,1,https://github.com/fz-lyu,patch to suppress sigpipe,3,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/479,https://github.com/fz-lyu,12,https://github.com/Azure/azure-c-shared-utility/pull/479#issuecomment-759254282,"patch to suppress sigpipe
Azure/azure-iot-sdk-c#1423",code updated @ewertons,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,479,2020-11-30T20:19:07Z,2021-01-14T22:59:41Z,2021-01-14T22:59:41Z,MERGED,True,7,3,1,https://github.com/fz-lyu,patch to suppress sigpipe,3,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/479,https://github.com/momuno,13,https://github.com/Azure/azure-c-shared-utility/pull/479#issuecomment-759934515,"patch to suppress sigpipe
Azure/azure-iot-sdk-c#1423",/azp run integrate-into-repo-C-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,479,2020-11-30T20:19:07Z,2021-01-14T22:59:41Z,2021-01-14T22:59:41Z,MERGED,True,7,3,1,https://github.com/fz-lyu,patch to suppress sigpipe,3,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/479,https://github.com/apps/azure-pipelines,14,https://github.com/Azure/azure-c-shared-utility/pull/479#issuecomment-759934561,"patch to suppress sigpipe
Azure/azure-iot-sdk-c#1423",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,479,2020-11-30T20:19:07Z,2021-01-14T22:59:41Z,2021-01-14T22:59:41Z,MERGED,True,7,3,1,https://github.com/fz-lyu,patch to suppress sigpipe,3,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/479,https://github.com/momuno,15,https://github.com/Azure/azure-c-shared-utility/pull/479#issuecomment-760467658,"patch to suppress sigpipe
Azure/azure-iot-sdk-c#1423",/azp run integrate-into-repo-C-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,479,2020-11-30T20:19:07Z,2021-01-14T22:59:41Z,2021-01-14T22:59:41Z,MERGED,True,7,3,1,https://github.com/fz-lyu,patch to suppress sigpipe,3,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/479,https://github.com/apps/azure-pipelines,16,https://github.com/Azure/azure-c-shared-utility/pull/479#issuecomment-760467741,"patch to suppress sigpipe
Azure/azure-iot-sdk-c#1423",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,479,2020-11-30T20:19:07Z,2021-01-14T22:59:41Z,2021-01-14T22:59:41Z,MERGED,True,7,3,1,https://github.com/fz-lyu,patch to suppress sigpipe,3,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/479,https://github.com/momuno,17,https://github.com/Azure/azure-c-shared-utility/pull/479#issuecomment-760478130,"patch to suppress sigpipe
Azure/azure-iot-sdk-c#1423",/azp run integrate-into-repo-C-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,479,2020-11-30T20:19:07Z,2021-01-14T22:59:41Z,2021-01-14T22:59:41Z,MERGED,True,7,3,1,https://github.com/fz-lyu,patch to suppress sigpipe,3,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/479,https://github.com/apps/azure-pipelines,18,https://github.com/Azure/azure-c-shared-utility/pull/479#issuecomment-760478198,"patch to suppress sigpipe
Azure/azure-iot-sdk-c#1423",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,481,2020-12-03T04:12:55Z,2021-01-15T22:17:04Z,2021-01-15T22:17:04Z,MERGED,True,3,0,1,https://github.com/fz-lyu,decorate unused parameter,6,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/481,https://github.com/fz-lyu,1,https://github.com/Azure/azure-c-shared-utility/pull/481,decorate unused parameter in tlsio_wolfssl.c #480,decorate unused parameter in tlsio_wolfssl.c #480,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,481,2020-12-03T04:12:55Z,2021-01-15T22:17:04Z,2021-01-15T22:17:04Z,MERGED,True,3,0,1,https://github.com/fz-lyu,decorate unused parameter,6,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/481,https://github.com/momuno,2,https://github.com/Azure/azure-c-shared-utility/pull/481#issuecomment-760415680,decorate unused parameter in tlsio_wolfssl.c #480,/azp run integrate-into-repo-C-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,481,2020-12-03T04:12:55Z,2021-01-15T22:17:04Z,2021-01-15T22:17:04Z,MERGED,True,3,0,1,https://github.com/fz-lyu,decorate unused parameter,6,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/481,https://github.com/apps/azure-pipelines,3,https://github.com/Azure/azure-c-shared-utility/pull/481#issuecomment-760415763,decorate unused parameter in tlsio_wolfssl.c #480,Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,481,2020-12-03T04:12:55Z,2021-01-15T22:17:04Z,2021-01-15T22:17:04Z,MERGED,True,3,0,1,https://github.com/fz-lyu,decorate unused parameter,6,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/481,https://github.com/momuno,4,https://github.com/Azure/azure-c-shared-utility/pull/481#issuecomment-760491987,decorate unused parameter in tlsio_wolfssl.c #480,"@fanzhe98 this is causing the build to fail.  Why is it passing in the build Azure Sphere is using?  Meaning, I speculate there would be some other code changes in Azure Sphere this depends on that are not included here -- can you please include?
Did you possibly mean to use
(void)name;

If I use the above, our build still compiles.  Does it solve the issue you ran into that required the ""unused"" patch?",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,481,2020-12-03T04:12:55Z,2021-01-15T22:17:04Z,2021-01-15T22:17:04Z,MERGED,True,3,0,1,https://github.com/fz-lyu,decorate unused parameter,6,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/481,https://github.com/fz-lyu,5,https://github.com/Azure/azure-c-shared-utility/pull/481#issuecomment-760504691,decorate unused parameter in tlsio_wolfssl.c #480,"@momuno yeah, possibly the depedencies in azure sphere that made this work though in
xlogging.h there is  #define UNUSED(x) (void)(x)
changing it tovoid(name) should be the same
eddited.",True,{'THUMBS_UP': ['https://github.com/momuno']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,481,2020-12-03T04:12:55Z,2021-01-15T22:17:04Z,2021-01-15T22:17:04Z,MERGED,True,3,0,1,https://github.com/fz-lyu,decorate unused parameter,6,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/481,https://github.com/momuno,6,https://github.com/Azure/azure-c-shared-utility/pull/481#issuecomment-760557353,decorate unused parameter in tlsio_wolfssl.c #480,"@momuno yeah, possibly the depedencies in azure sphere that made this work though in
xlogging.h there is  #define UNUSED(x) (void)(x)
changing it tovoid(name) should be the same
eddited.

I see tlsio_wolfssl.c has
#include ""azure_c_shared_utility/xlogging.h""

Looks like using the UNUSED macro requires a specific compiler option, ex:
#ifdef NO_LOGGING

Thanks for making the update.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,481,2020-12-03T04:12:55Z,2021-01-15T22:17:04Z,2021-01-15T22:17:04Z,MERGED,True,3,0,1,https://github.com/fz-lyu,decorate unused parameter,6,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/481,https://github.com/momuno,7,https://github.com/Azure/azure-c-shared-utility/pull/481#issuecomment-760559183,decorate unused parameter in tlsio_wolfssl.c #480,/azp run integrate-into-repo-C-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,481,2020-12-03T04:12:55Z,2021-01-15T22:17:04Z,2021-01-15T22:17:04Z,MERGED,True,3,0,1,https://github.com/fz-lyu,decorate unused parameter,6,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/481,https://github.com/apps/azure-pipelines,8,https://github.com/Azure/azure-c-shared-utility/pull/481#issuecomment-760559248,decorate unused parameter in tlsio_wolfssl.c #480,Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,481,2020-12-03T04:12:55Z,2021-01-15T22:17:04Z,2021-01-15T22:17:04Z,MERGED,True,3,0,1,https://github.com/fz-lyu,decorate unused parameter,6,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/481,https://github.com/momuno,9,https://github.com/Azure/azure-c-shared-utility/pull/481#issuecomment-760559766,decorate unused parameter in tlsio_wolfssl.c #480,/azp run integrate-into-repo-C-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,481,2020-12-03T04:12:55Z,2021-01-15T22:17:04Z,2021-01-15T22:17:04Z,MERGED,True,3,0,1,https://github.com/fz-lyu,decorate unused parameter,6,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/481,https://github.com/apps/azure-pipelines,10,https://github.com/Azure/azure-c-shared-utility/pull/481#issuecomment-760559823,decorate unused parameter in tlsio_wolfssl.c #480,Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,483,2020-12-03T04:20:11Z,2021-03-04T20:58:39Z,2021-03-04T20:58:39Z,CLOSED,False,46,7,1,https://github.com/fz-lyu,remove libuuid dependency,3,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/483,https://github.com/fz-lyu,1,https://github.com/Azure/azure-c-shared-utility/pull/483,remove libuuid dependency #482,remove libuuid dependency #482,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,483,2020-12-03T04:20:11Z,2021-03-04T20:58:39Z,2021-03-04T20:58:39Z,CLOSED,False,46,7,1,https://github.com/fz-lyu,remove libuuid dependency,3,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/483,https://github.com/fz-lyu,2,https://github.com/Azure/azure-c-shared-utility/pull/483#issuecomment-737655949,remove libuuid dependency #482,cc @suhuruli @momuno,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,483,2020-12-03T04:20:11Z,2021-03-04T20:58:39Z,2021-03-04T20:58:39Z,CLOSED,False,46,7,1,https://github.com/fz-lyu,remove libuuid dependency,3,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/483,https://github.com/fz-lyu,3,https://github.com/Azure/azure-c-shared-utility/pull/483#issuecomment-737657257,remove libuuid dependency #482,Waiting for an agreement on ifdef,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,483,2020-12-03T04:20:11Z,2021-03-04T20:58:39Z,2021-03-04T20:58:39Z,CLOSED,False,46,7,1,https://github.com/fz-lyu,remove libuuid dependency,3,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/483,https://github.com/momuno,4,https://github.com/Azure/azure-c-shared-utility/pull/483#issuecomment-775401030,remove libuuid dependency #482,Thanks @hihigupt for taking an initial look at this PR,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,483,2020-12-03T04:20:11Z,2021-03-04T20:58:39Z,2021-03-04T20:58:39Z,CLOSED,False,46,7,1,https://github.com/fz-lyu,remove libuuid dependency,3,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/483,https://github.com/fz-lyu,5,https://github.com/Azure/azure-c-shared-utility/pull/483#issuecomment-782310501,remove libuuid dependency #482,PR Comments addressed,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,483,2020-12-03T04:20:11Z,2021-03-04T20:58:39Z,2021-03-04T20:58:39Z,CLOSED,False,46,7,1,https://github.com/fz-lyu,remove libuuid dependency,3,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/483,https://github.com/momuno,6,https://github.com/Azure/azure-c-shared-utility/pull/483#issuecomment-790936915,remove libuuid dependency #482,This will not be absorbed into C SDK for backwards compatibility assurance.  Looking at alternative approach for Azure Sphere to maintain their required changes.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,485,2020-12-03T18:43:27Z,2020-12-22T01:20:02Z,2020-12-22T01:20:02Z,MERGED,True,1,1,1,https://github.com/fz-lyu,updating errno.h inclusion,2,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/485,https://github.com/fz-lyu,1,https://github.com/Azure/azure-c-shared-utility/pull/485,#484,#484,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,485,2020-12-03T18:43:27Z,2020-12-22T01:20:02Z,2020-12-22T01:20:02Z,MERGED,True,1,1,1,https://github.com/fz-lyu,updating errno.h inclusion,2,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/485,https://github.com/fz-lyu,2,https://github.com/Azure/azure-c-shared-utility/pull/485#issuecomment-738212008,#484,cc @suhuruli @momuno @reubeno,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,485,2020-12-03T18:43:27Z,2020-12-22T01:20:02Z,2020-12-22T01:20:02Z,MERGED,True,1,1,1,https://github.com/fz-lyu,updating errno.h inclusion,2,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/485,https://github.com/jbobotek,3,https://github.com/Azure/azure-c-shared-utility/pull/485#issuecomment-749267967,#484,comment,True,{'EYES': ['https://github.com/momuno']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,485,2020-12-03T18:43:27Z,2020-12-22T01:20:02Z,2020-12-22T01:20:02Z,MERGED,True,1,1,1,https://github.com/fz-lyu,updating errno.h inclusion,2,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/485,https://github.com/momuno,4,https://github.com/Azure/azure-c-shared-utility/pull/485#issuecomment-749280499,#484,/run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,485,2020-12-03T18:43:27Z,2020-12-22T01:20:02Z,2020-12-22T01:20:02Z,MERGED,True,1,1,1,https://github.com/fz-lyu,updating errno.h inclusion,2,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/485,https://github.com/momuno,5,https://github.com/Azure/azure-c-shared-utility/pull/485#issuecomment-749283961,#484,Correct tests were run for this via the pipeline with tag refs/pull/485/merge.  Those tests all passed but the result is not appearing here.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,486,2020-12-07T20:02:36Z,2020-12-08T21:05:49Z,2020-12-08T21:05:49Z,MERGED,True,1,1,1,https://github.com/yunhaoling,check kCFStreamStatusError on macos tlsio,2,[],https://github.com/Azure/azure-c-shared-utility/pull/486,https://github.com/yunhaoling,1,https://github.com/Azure/azure-c-shared-utility/pull/486,See issue: #487,See issue: #487,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,486,2020-12-07T20:02:36Z,2020-12-08T21:05:49Z,2020-12-08T21:05:49Z,MERGED,True,1,1,1,https://github.com/yunhaoling,check kCFStreamStatusError on macos tlsio,2,[],https://github.com/Azure/azure-c-shared-utility/pull/486,https://github.com/danewalton,2,https://github.com/Azure/azure-c-shared-utility/pull/486#issuecomment-740836570,See issue: #487,/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,486,2020-12-07T20:02:36Z,2020-12-08T21:05:49Z,2020-12-08T21:05:49Z,MERGED,True,1,1,1,https://github.com/yunhaoling,check kCFStreamStatusError on macos tlsio,2,[],https://github.com/Azure/azure-c-shared-utility/pull/486,https://github.com/apps/azure-pipelines,3,https://github.com/Azure/azure-c-shared-utility/pull/486#issuecomment-740836828,See issue: #487,Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,488,2020-12-08T18:14:47Z,2020-12-08T21:47:04Z,2020-12-08T21:47:06Z,MERGED,True,122,3309,16,https://github.com/CIPop,Fixing OpenSSL and WolfSSL hostname validation. Removing ESP adapters.,2,[],https://github.com/Azure/azure-c-shared-utility/pull/488,https://github.com/CIPop,1,https://github.com/Azure/azure-c-shared-utility/pull/488,"Tracked by CVE-2020-17002

Fixing OpenSSL Hostname Validation
Fixing WolfSSL Hostname Validation
Removing ESP8266 adapters now replaced by https://github.com/Azure-Samples/ESP-Samples","Tracked by CVE-2020-17002

Fixing OpenSSL Hostname Validation
Fixing WolfSSL Hostname Validation
Removing ESP8266 adapters now replaced by https://github.com/Azure-Samples/ESP-Samples",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,489,2020-12-08T19:05:03Z,2020-12-08T21:49:16Z,2020-12-08T21:49:17Z,MERGED,True,142,3308,16,https://github.com/CIPop,[LTS_02_2020] Fixing OpenSSL and WolfSSL hostname validation. Removing ESP adapters.,2,[],https://github.com/Azure/azure-c-shared-utility/pull/489,https://github.com/CIPop,1,https://github.com/Azure/azure-c-shared-utility/pull/489,"Tracked by CVE-2020-17002

Fixing OpenSSL Hostname Validation
Fixing WolfSSL Hostname Validation
Removing ESP8266 adapters now replaced by https://github.com/Azure-Samples/ESP-Samples","Tracked by CVE-2020-17002

Fixing OpenSSL Hostname Validation
Fixing WolfSSL Hostname Validation
Removing ESP8266 adapters now replaced by https://github.com/Azure-Samples/ESP-Samples",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,490,2020-12-08T19:05:04Z,2020-12-08T23:03:31Z,2020-12-08T23:03:32Z,MERGED,True,122,3309,16,https://github.com/CIPop,[LTS_07_2020] Fixing OpenSSL and WolfSSL hostname validation. Removing ESP adapters.,2,[],https://github.com/Azure/azure-c-shared-utility/pull/490,https://github.com/CIPop,1,https://github.com/Azure/azure-c-shared-utility/pull/490,"Tracked by CVE-2020-17002

Fixing OpenSSL Hostname Validation
Fixing WolfSSL Hostname Validation
Removing ESP8266 adapters now replaced by https://github.com/Azure-Samples/ESP-Samples","Tracked by CVE-2020-17002

Fixing OpenSSL Hostname Validation
Fixing WolfSSL Hostname Validation
Removing ESP8266 adapters now replaced by https://github.com/Azure-Samples/ESP-Samples",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,490,2020-12-08T19:05:04Z,2020-12-08T23:03:31Z,2020-12-08T23:03:32Z,MERGED,True,122,3309,16,https://github.com/CIPop,[LTS_07_2020] Fixing OpenSSL and WolfSSL hostname validation. Removing ESP adapters.,2,[],https://github.com/Azure/azure-c-shared-utility/pull/490,https://github.com/CIPop,2,https://github.com/Azure/azure-c-shared-utility/pull/490#issuecomment-741088826,"Tracked by CVE-2020-17002

Fixing OpenSSL Hostname Validation
Fixing WolfSSL Hostname Validation
Removing ESP8266 adapters now replaced by https://github.com/Azure-Samples/ESP-Samples",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,490,2020-12-08T19:05:04Z,2020-12-08T23:03:31Z,2020-12-08T23:03:32Z,MERGED,True,122,3309,16,https://github.com/CIPop,[LTS_07_2020] Fixing OpenSSL and WolfSSL hostname validation. Removing ESP adapters.,2,[],https://github.com/Azure/azure-c-shared-utility/pull/490,https://github.com/apps/azure-pipelines,3,https://github.com/Azure/azure-c-shared-utility/pull/490#issuecomment-741088938,"Tracked by CVE-2020-17002

Fixing OpenSSL Hostname Validation
Fixing WolfSSL Hostname Validation
Removing ESP8266 adapters now replaced by https://github.com/Azure-Samples/ESP-Samples",Azure Pipelines could not run because the pipeline triggers exclude this branch/path.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,491,2020-12-08T23:10:02Z,2020-12-08T23:21:50Z,2020-12-08T23:21:50Z,MERGED,True,25,5,2,https://github.com/CIPop,Upgrading the Raspberry PI image to use OpenSSL>1.0.2,1,[],https://github.com/Azure/azure-c-shared-utility/pull/491,https://github.com/CIPop,1,https://github.com/Azure/azure-c-shared-utility/pull/491,Current RPI image is using OpenSSL 1.0.1. Minimum allowed for this LTS is now 1.0.2.,Current RPI image is using OpenSSL 1.0.1. Minimum allowed for this LTS is now 1.0.2.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,491,2020-12-08T23:10:02Z,2020-12-08T23:21:50Z,2020-12-08T23:21:50Z,MERGED,True,25,5,2,https://github.com/CIPop,Upgrading the Raspberry PI image to use OpenSSL>1.0.2,1,[],https://github.com/Azure/azure-c-shared-utility/pull/491,https://github.com/jbobotek,2,https://github.com/Azure/azure-c-shared-utility/pull/491#issuecomment-741201788,Current RPI image is using OpenSSL 1.0.1. Minimum allowed for this LTS is now 1.0.2.,Shell script is the same as in c sdk for buster?,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,491,2020-12-08T23:10:02Z,2020-12-08T23:21:50Z,2020-12-08T23:21:50Z,MERGED,True,25,5,2,https://github.com/CIPop,Upgrading the Raspberry PI image to use OpenSSL>1.0.2,1,[],https://github.com/Azure/azure-c-shared-utility/pull/491,https://github.com/CIPop,3,https://github.com/Azure/azure-c-shared-utility/pull/491#issuecomment-741201989,Current RPI image is using OpenSSL 1.0.1. Minimum allowed for this LTS is now 1.0.2.,/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,491,2020-12-08T23:10:02Z,2020-12-08T23:21:50Z,2020-12-08T23:21:50Z,MERGED,True,25,5,2,https://github.com/CIPop,Upgrading the Raspberry PI image to use OpenSSL>1.0.2,1,[],https://github.com/Azure/azure-c-shared-utility/pull/491,https://github.com/apps/azure-pipelines,4,https://github.com/Azure/azure-c-shared-utility/pull/491#issuecomment-741202206,Current RPI image is using OpenSSL 1.0.1. Minimum allowed for this LTS is now 1.0.2.,Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,491,2020-12-08T23:10:02Z,2020-12-08T23:21:50Z,2020-12-08T23:21:50Z,MERGED,True,25,5,2,https://github.com/CIPop,Upgrading the Raspberry PI image to use OpenSSL>1.0.2,1,[],https://github.com/Azure/azure-c-shared-utility/pull/491,https://github.com/CIPop,5,https://github.com/Azure/azure-c-shared-utility/pull/491#issuecomment-741204984,Current RPI image is using OpenSSL 1.0.1. Minimum allowed for this LTS is now 1.0.2.,"Shell script is the same as in c sdk for buster?

Yes: I took the exact same script and YAML portion.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,492,2020-12-15T19:22:51Z,2020-12-21T17:04:47Z,2020-12-21T17:04:48Z,MERGED,True,484,89,9,https://github.com/CIPop,Adding OpenSSL Engine Support,6,[],https://github.com/Azure/azure-c-shared-utility/pull/492,https://github.com/CIPop,1,https://github.com/Azure/azure-c-shared-utility/pull/492,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,492,2020-12-15T19:22:51Z,2020-12-21T17:04:47Z,2020-12-21T17:04:48Z,MERGED,True,484,89,9,https://github.com/CIPop,Adding OpenSSL Engine Support,6,[],https://github.com/Azure/azure-c-shared-utility/pull/492,https://github.com/CIPop,2,https://github.com/Azure/azure-c-shared-utility/pull/492#issuecomment-748512281,,/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,492,2020-12-15T19:22:51Z,2020-12-21T17:04:47Z,2020-12-21T17:04:48Z,MERGED,True,484,89,9,https://github.com/CIPop,Adding OpenSSL Engine Support,6,[],https://github.com/Azure/azure-c-shared-utility/pull/492,https://github.com/apps/azure-pipelines,3,https://github.com/Azure/azure-c-shared-utility/pull/492#issuecomment-748512302,,Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,493,2020-12-22T01:23:05Z,2020-12-22T18:39:15Z,2020-12-22T18:39:36Z,CLOSED,False,1,1,1,https://github.com/momuno,"Revert ""updating errno.h inclusion""",1,[],https://github.com/Azure/azure-c-shared-utility/pull/493,https://github.com/momuno,1,https://github.com/Azure/azure-c-shared-utility/pull/493,Reverts #485,Reverts #485,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,493,2020-12-22T01:23:05Z,2020-12-22T18:39:15Z,2020-12-22T18:39:36Z,CLOSED,False,1,1,1,https://github.com/momuno,"Revert ""updating errno.h inclusion""",1,[],https://github.com/Azure/azure-c-shared-utility/pull/493,https://github.com/momuno,2,https://github.com/Azure/azure-c-shared-utility/pull/493#issuecomment-749711393,Reverts #485,unnecessary,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,494,2020-12-22T04:52:02Z,2020-12-23T00:40:11Z,2020-12-23T00:40:12Z,MERGED,True,173,38,9,https://github.com/CIPop,Addressing the Y2k38 issue for SAS tokens,4,[],https://github.com/Azure/azure-c-shared-utility/pull/494,https://github.com/CIPop,1,https://github.com/Azure/azure-c-shared-utility/pull/494,Changing from size_t (32 bit on 32bit systems) to uint64_t for SAS time related operations to avoid the https://en.wikipedia.org/wiki/Year_2038_problem .,Changing from size_t (32 bit on 32bit systems) to uint64_t for SAS time related operations to avoid the https://en.wikipedia.org/wiki/Year_2038_problem .,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,496,2021-01-06T22:51:42Z,2021-01-29T21:40:14Z,2021-01-29T21:40:15Z,MERGED,True,21,8,1,https://github.com/momuno,Fix for C SDK Issue segfault when using wolfSSL and MQTT/WS,7,"['bug', 'Azure Sphere']",https://github.com/Azure/azure-c-shared-utility/pull/496,https://github.com/momuno,1,https://github.com/Azure/azure-c-shared-utility/pull/496,"This is a fix for C SDK Issue #1759 [https://github.com/Azure/azure-iot-sdk-c/issues/1759].
It involves two fixes:

Addresses the segfault using wolfSSL and MQTT/WS.  A callback was not reset to NULL and was mistakenly being called resulting in the segfault. (It should only be called on application data).
Updates logic to not return WANT_READ during renegotiation when waiting to receive CONNACK.

This change requires wolfSSL/wolfssl#3594 to be merged, and the following wolfSSL release to be used. (v4.7.0 to be released mid-February)
Assuming this has occurred, wolfSSL must be configured with --enable-secure-renegotiation.
Enabling secure renegotiation does not obstruct using MQTT or AMQP.  It DOES enable MQTT/WS and AMQP/WS.","This is a fix for C SDK Issue #1759 [https://github.com/Azure/azure-iot-sdk-c/issues/1759].
It involves two fixes:

Addresses the segfault using wolfSSL and MQTT/WS.  A callback was not reset to NULL and was mistakenly being called resulting in the segfault. (It should only be called on application data).
Updates logic to not return WANT_READ during renegotiation when waiting to receive CONNACK.

This change requires wolfSSL/wolfssl#3594 to be merged, and the following wolfSSL release to be used. (v4.7.0 to be released mid-February)
Assuming this has occurred, wolfSSL must be configured with --enable-secure-renegotiation.
Enabling secure renegotiation does not obstruct using MQTT or AMQP.  It DOES enable MQTT/WS and AMQP/WS.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,498,2021-01-13T07:51:38Z,2021-01-19T23:50:31Z,2021-01-19T23:50:32Z,CLOSED,False,3,10,1,https://github.com/fz-lyu,fix wolfssl retry path,6,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/498,https://github.com/fz-lyu,1,https://github.com/Azure/azure-c-shared-utility/pull/498,"Fix wolfssl retry path with wolfssl version 4.6.0
note that ssl had chance to be null, and device id for ctx must also be set
#497","Fix wolfssl retry path with wolfssl version 4.6.0
note that ssl had chance to be null, and device id for ctx must also be set
#497",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,498,2021-01-13T07:51:38Z,2021-01-19T23:50:31Z,2021-01-19T23:50:32Z,CLOSED,False,3,10,1,https://github.com/fz-lyu,fix wolfssl retry path,6,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/498,https://github.com/fz-lyu,2,https://github.com/Azure/azure-c-shared-utility/pull/498#issuecomment-759271765,"Fix wolfssl retry path with wolfssl version 4.6.0
note that ssl had chance to be null, and device id for ctx must also be set
#497",@ewertons @momuno for visibility,True,{'THUMBS_UP': ['https://github.com/momuno']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,498,2021-01-13T07:51:38Z,2021-01-19T23:50:31Z,2021-01-19T23:50:32Z,CLOSED,False,3,10,1,https://github.com/fz-lyu,fix wolfssl retry path,6,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/498,https://github.com/momuno,3,https://github.com/Azure/azure-c-shared-utility/pull/498#issuecomment-759941026,"Fix wolfssl retry path with wolfssl version 4.6.0
note that ssl had chance to be null, and device id for ctx must also be set
#497",@fanzhe98 Why is wolfSSL_CTX_SetDevId() now required?,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,498,2021-01-13T07:51:38Z,2021-01-19T23:50:31Z,2021-01-19T23:50:32Z,CLOSED,False,3,10,1,https://github.com/fz-lyu,fix wolfssl retry path,6,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/498,https://github.com/fz-lyu,4,https://github.com/Azure/azure-c-shared-utility/pull/498#issuecomment-759982245,"Fix wolfssl retry path with wolfssl version 4.6.0
note that ssl had chance to be null, and device id for ctx must also be set
#497",Not entirely sure - theoretically CTX SetDevId is not needed per connection. Just get several trials and this will let it work.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,498,2021-01-13T07:51:38Z,2021-01-19T23:50:31Z,2021-01-19T23:50:32Z,CLOSED,False,3,10,1,https://github.com/fz-lyu,fix wolfssl retry path,6,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/498,https://github.com/momuno,5,https://github.com/Azure/azure-c-shared-utility/pull/498#issuecomment-760402407,"Fix wolfssl retry path with wolfssl version 4.6.0
note that ssl had chance to be null, and device id for ctx must also be set
#497","Not entirely sure - theoretically CTX SetDevId is not needed per connection. Just get several trials and this will let it work.

I want to check this out a bit more and understand why before I add it in.  Can you please remind me, to reproduce the issue and test this fix, did you run the Azure IoT sample, and then disconnect from the network and then reconnect?",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,498,2021-01-13T07:51:38Z,2021-01-19T23:50:31Z,2021-01-19T23:50:32Z,CLOSED,False,3,10,1,https://github.com/fz-lyu,fix wolfssl retry path,6,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/498,https://github.com/fz-lyu,6,https://github.com/Azure/azure-c-shared-utility/pull/498#issuecomment-760408011,"Fix wolfssl retry path with wolfssl version 4.6.0
note that ssl had chance to be null, and device id for ctx must also be set
#497","Not entirely sure - theoretically CTX SetDevId is not needed per connection. Just get several trials and this will let it work.

I want to check this out a bit more and understand why before I add it in. Can you please remind me, to reproduce the issue and test this fix, did you run the Azure IoT sample, and then disconnect from the network and then reconnect?

Yes, that is what I did.",True,{'THUMBS_UP': ['https://github.com/momuno']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,498,2021-01-13T07:51:38Z,2021-01-19T23:50:31Z,2021-01-19T23:50:32Z,CLOSED,False,3,10,1,https://github.com/fz-lyu,fix wolfssl retry path,6,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/498,https://github.com/momuno,7,https://github.com/Azure/azure-c-shared-utility/pull/498#issuecomment-760624993,"Fix wolfssl retry path with wolfssl version 4.6.0
note that ssl had chance to be null, and device id for ctx must also be set
#497","After reviewing the code, I suspect there may have been a bug from before the Azure Sphere updates.
tlsio_wolfssl_retrieveoptions() will add the needed SetDeviceId option ONLY if tls_io_instance->wolfssl_device_id has been set to something other than INVALID_DEVID.  But this never gets set unless the ssl object has not been created, and this scenario cannot happen (the ssl object appears to always be set before the options can be set).
Your code change includes a fix for this, but I do not think the additional wolfSSL_CTX_SetDevId() function calls matter in this case.
In short, can you please try these changes and see if it still fixes the retry path? Thanks!
https://github.com/Azure/azure-c-shared-utility/compare/momuno/azure-sphere-retry-wolfssl#diff-5bf189cb1123964e6673fed51a851c5d7625626b2258e00f5317c067e769e1a3L979-L999
(Side note, I speculate that none of the existing code from lines 610-615 is necessary, but I'd rather leave it as is right now to limit the amount of testing required.)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,498,2021-01-13T07:51:38Z,2021-01-19T23:50:31Z,2021-01-19T23:50:32Z,CLOSED,False,3,10,1,https://github.com/fz-lyu,fix wolfssl retry path,6,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/498,https://github.com/momuno,8,https://github.com/Azure/azure-c-shared-utility/pull/498#issuecomment-761277487,"Fix wolfssl retry path with wolfssl version 4.6.0
note that ssl had chance to be null, and device id for ctx must also be set
#497",/run integrate-into-repo-C-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,498,2021-01-13T07:51:38Z,2021-01-19T23:50:31Z,2021-01-19T23:50:32Z,CLOSED,False,3,10,1,https://github.com/fz-lyu,fix wolfssl retry path,6,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/498,https://github.com/momuno,9,https://github.com/Azure/azure-c-shared-utility/pull/498#issuecomment-761279184,"Fix wolfssl retry path with wolfssl version 4.6.0
note that ssl had chance to be null, and device id for ctx must also be set
#497",/azp run integrate-into-repo-C-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,498,2021-01-13T07:51:38Z,2021-01-19T23:50:31Z,2021-01-19T23:50:32Z,CLOSED,False,3,10,1,https://github.com/fz-lyu,fix wolfssl retry path,6,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/498,https://github.com/apps/azure-pipelines,10,https://github.com/Azure/azure-c-shared-utility/pull/498#issuecomment-761279203,"Fix wolfssl retry path with wolfssl version 4.6.0
note that ssl had chance to be null, and device id for ctx must also be set
#497",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,498,2021-01-13T07:51:38Z,2021-01-19T23:50:31Z,2021-01-19T23:50:32Z,CLOSED,False,3,10,1,https://github.com/fz-lyu,fix wolfssl retry path,6,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/498,https://github.com/momuno,11,https://github.com/Azure/azure-c-shared-utility/pull/498#issuecomment-763205101,"Fix wolfssl retry path with wolfssl version 4.6.0
note that ssl had chance to be null, and device id for ctx must also be set
#497","Hi @fanzhe98.  One of the unit tests was not passing due to the change and the following fixes that.  Can you please include this in your change?  Thanks.
https://github.com/Azure/azure-c-shared-utility/compare/momuno/azure-sphere-retry-wolfssl#diff-5bf189cb1123964e6673fed51a851c5d7625626b2258e00f5317c067e769e1a3L609-L615",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,498,2021-01-13T07:51:38Z,2021-01-19T23:50:31Z,2021-01-19T23:50:32Z,CLOSED,False,3,10,1,https://github.com/fz-lyu,fix wolfssl retry path,6,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/498,https://github.com/momuno,12,https://github.com/Azure/azure-c-shared-utility/pull/498#issuecomment-763217970,"Fix wolfssl retry path with wolfssl version 4.6.0
note that ssl had chance to be null, and device id for ctx must also be set
#497",Replacing with #500,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,499,2021-01-16T15:01:04Z,2021-11-03T02:20:37Z,2022-04-12T11:18:12Z,CLOSED,False,3,2,1,https://github.com/SuperSandro2000,Fix finding apple libraries,3,[],https://github.com/Azure/azure-c-shared-utility/pull/499,https://github.com/SuperSandro2000,1,https://github.com/Azure/azure-c-shared-utility/pull/499,I wrote this while fixing the library in nixpkgs for darwin and thought upstreaming is a good idea.,I wrote this while fixing the library in nixpkgs for darwin and thought upstreaming is a good idea.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,499,2021-01-16T15:01:04Z,2021-11-03T02:20:37Z,2022-04-12T11:18:12Z,CLOSED,False,3,2,1,https://github.com/SuperSandro2000,Fix finding apple libraries,3,[],https://github.com/Azure/azure-c-shared-utility/pull/499,https://github.com/SuperSandro2000,2,https://github.com/Azure/azure-c-shared-utility/pull/499#issuecomment-761762013,I wrote this while fixing the library in nixpkgs for darwin and thought upstreaming is a good idea.,Is the other pipeline supposed to be stuck like this?,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,499,2021-01-16T15:01:04Z,2021-11-03T02:20:37Z,2022-04-12T11:18:12Z,CLOSED,False,3,2,1,https://github.com/SuperSandro2000,Fix finding apple libraries,3,[],https://github.com/Azure/azure-c-shared-utility/pull/499,https://github.com/danewalton,3,https://github.com/Azure/azure-c-shared-utility/pull/499#issuecomment-909761693,I wrote this while fixing the library in nixpkgs for darwin and thought upstreaming is a good idea.,/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,499,2021-01-16T15:01:04Z,2021-11-03T02:20:37Z,2022-04-12T11:18:12Z,CLOSED,False,3,2,1,https://github.com/SuperSandro2000,Fix finding apple libraries,3,[],https://github.com/Azure/azure-c-shared-utility/pull/499,https://github.com/apps/azure-pipelines,4,https://github.com/Azure/azure-c-shared-utility/pull/499#issuecomment-909761767,I wrote this while fixing the library in nixpkgs for darwin and thought upstreaming is a good idea.,Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,499,2021-01-16T15:01:04Z,2021-11-03T02:20:37Z,2022-04-12T11:18:12Z,CLOSED,False,3,2,1,https://github.com/SuperSandro2000,Fix finding apple libraries,3,[],https://github.com/Azure/azure-c-shared-utility/pull/499,https://github.com/danewalton,5,https://github.com/Azure/azure-c-shared-utility/pull/499#issuecomment-910818621,I wrote this while fixing the library in nixpkgs for darwin and thought upstreaming is a good idea.,@SuperSandro2000 thanks for the contribution! Can you explain what behavior you were seeing and what this fixes? We have builds at the gate for nativexcode and OSX that don't seem to be having issues.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,499,2021-01-16T15:01:04Z,2021-11-03T02:20:37Z,2022-04-12T11:18:12Z,CLOSED,False,3,2,1,https://github.com/SuperSandro2000,Fix finding apple libraries,3,[],https://github.com/Azure/azure-c-shared-utility/pull/499,https://github.com/SuperSandro2000,6,https://github.com/Azure/azure-c-shared-utility/pull/499#issuecomment-915800916,I wrote this while fixing the library in nixpkgs for darwin and thought upstreaming is a good idea.,"Can you explain what behavior you were seeing and what this fixes?

I can't remember but nixpkgs has isolation for all frameworks so they are not just all available all the time and they are available under different paths. Without those changes it didn't build.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,499,2021-01-16T15:01:04Z,2021-11-03T02:20:37Z,2022-04-12T11:18:12Z,CLOSED,False,3,2,1,https://github.com/SuperSandro2000,Fix finding apple libraries,3,[],https://github.com/Azure/azure-c-shared-utility/pull/499,https://github.com/danewalton,7,https://github.com/Azure/azure-c-shared-utility/pull/499#issuecomment-958603123,I wrote this while fixing the library in nixpkgs for darwin and thought upstreaming is a good idea.,Thanks for the contribution @SuperSandro2000. At this time we don't have any issues with our gate checkins or our iOS samples. I'm going to close this for now since we don't currently see anything broken.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,500,2021-01-19T23:48:33Z,2021-01-20T01:12:37Z,2021-01-20T01:12:38Z,MERGED,True,16,30,1,https://github.com/momuno,Fix wolffSSL retry for setDeviceId,3,[],https://github.com/Azure/azure-c-shared-utility/pull/500,https://github.com/momuno,1,https://github.com/Azure/azure-c-shared-utility/pull/500,This PR replaces #498.,This PR replaces #498.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,502,2021-01-26T19:20:59Z,2021-01-26T23:45:47Z,2021-01-26T23:45:48Z,MERGED,True,74,50,5,https://github.com/ericwol-msft,[SDL] NULL pointer check,2,[],https://github.com/Azure/azure-c-shared-utility/pull/502,https://github.com/ericwol-msft,1,https://github.com/Azure/azure-c-shared-utility/pull/502,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,504,2021-01-30T08:16:03Z,2021-02-04T18:16:12Z,2021-02-04T18:16:13Z,MERGED,True,6,14,1,https://github.com/momuno,Proxy use-case fixed for wolfSSL,6,"['bug', 'Azure Sphere']",https://github.com/Azure/azure-c-shared-utility/pull/504,https://github.com/momuno,1,https://github.com/Azure/azure-c-shared-utility/pull/504,"This fixes the issue reported in Azure/azure-iot-sdk-c#1842
I have tested this with and without a proxy, for all 4 working protocols. MQTT, MQTT/WS, AMQP, AMQP/WS.  HTTP is not working currently and already has an issue filed for it.","This fixes the issue reported in Azure/azure-iot-sdk-c#1842
I have tested this with and without a proxy, for all 4 working protocols. MQTT, MQTT/WS, AMQP, AMQP/WS.  HTTP is not working currently and already has an issue filed for it.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,504,2021-01-30T08:16:03Z,2021-02-04T18:16:12Z,2021-02-04T18:16:13Z,MERGED,True,6,14,1,https://github.com/momuno,Proxy use-case fixed for wolfSSL,6,"['bug', 'Azure Sphere']",https://github.com/Azure/azure-c-shared-utility/pull/504,https://github.com/momuno,2,https://github.com/Azure/azure-c-shared-utility/pull/504#issuecomment-771986203,"This fixes the issue reported in Azure/azure-iot-sdk-c#1842
I have tested this with and without a proxy, for all 4 working protocols. MQTT, MQTT/WS, AMQP, AMQP/WS.  HTTP is not working currently and already has an issue filed for it.","It also looks like the Proxy state is HTTP_PROXY_IO_STATE_WAITING_FOR_CONNECT_RESPONSE when tlsio_wolfSSL_dowork is first called.  When decode_ssl_received_bytes is then called, wolfSSL will end up internally calling wolfSSL_connect -> ... -> on_io_send -> xio_send -> http_proxy_io_send, but since the Proxy state is not yet HTTP_PROXY_IO_STATE_OPEN, the failure occurs on line 850 of http_proxy_io.c
The proxy state is updated to HTTP_PROXY_IO_STATE_OPEN in (http_proxy_io.c)on_underlying_io_bytes_received",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,505,2021-02-02T18:00:35Z,2021-02-03T18:24:19Z,2021-02-03T18:24:20Z,MERGED,True,0,1,1,https://github.com/danewalton,update comment in mbedtls,1,[],https://github.com/Azure/azure-c-shared-utility/pull/505,https://github.com/danewalton,1,https://github.com/Azure/azure-c-shared-utility/pull/505,fixes #385,fixes #385,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,506,2021-02-04T07:17:16Z,2021-02-04T07:27:43Z,2021-02-04T08:03:33Z,MERGED,True,7,7,2,https://github.com/ericwol-msft,Update to use VS2017 as default,2,[],https://github.com/Azure/azure-c-shared-utility/pull/506,https://github.com/ericwol-msft,1,https://github.com/Azure/azure-c-shared-utility/pull/506,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,507,2021-02-04T08:14:26Z,2021-02-04T17:42:29Z,2021-02-04T17:42:30Z,MERGED,True,1,1,1,https://github.com/momuno,VS 2017 ARM update,1,[],https://github.com/Azure/azure-c-shared-utility/pull/507,https://github.com/momuno,1,https://github.com/Azure/azure-c-shared-utility/pull/507,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,509,2021-02-04T17:45:53Z,2021-02-04T19:06:39Z,2021-02-04T19:06:40Z,MERGED,True,3,0,1,https://github.com/danewalton,fix printing data not in buffer,2,[],https://github.com/Azure/azure-c-shared-utility/pull/509,https://github.com/danewalton,1,https://github.com/Azure/azure-c-shared-utility/pull/509,"closes #458
Before:
uint8_t data[] = {
        0x7d, 0xce, 0xb1, 0x62, 0x39, 0xf8, 0x3c, 0xd5, 0x9a, 0xad, 0x9e, 0x05,
        0xb1, 0x4f, 0x70, 0xa2, 0xfa, 0xd4, 0xfb, 0x04, 0xe5, 0x37, 0xd2, 0x63,
        0x9a, 0x46, 0x9e, 0xfd, 0xb0, 0x5b, 0x1e, 0xdf, 0xff };
Output:
33 bytes
0x55555580f020: 7D CE B1 62 39 F8 3C D5 9A AD 9E 05 B1 4F 70 A2     }..b9.<......Op.
0x55555580f030: FA D4 FB 04 E5 37 D2 63 9A 46 9E FD B0 5B 1E DF     .....7.c.F...[..
0x55555580f040: FF D4 
After:
uint8_t data[] = {
        0x7d, 0xce, 0xb1, 0x62, 0x39, 0xf8, 0x3c, 0xd5, 0x9a, 0xad, 0x9e, 0x05,
        0xb1, 0x4f, 0x70, 0xa2, 0xfa, 0xd4, 0xfb, 0x04, 0xe5, 0x37, 0xd2, 0x63,
        0x9a, 0x46, 0x9e, 0xfd, 0xb0, 0x5b, 0x1e, 0xdf, 0xff };
Output:
33 bytes
0x55555580f020: 7D CE B1 62 39 F8 3C D5 9A AD 9E 05 B1 4F 70 A2     }..b9.<......Op.
0x55555580f030: FA D4 FB 04 E5 37 D2 63 9A 46 9E FD B0 5B 1E DF     .....7.c.F...[..
0x55555580f040: FF","closes #458
Before:
uint8_t data[] = {
        0x7d, 0xce, 0xb1, 0x62, 0x39, 0xf8, 0x3c, 0xd5, 0x9a, 0xad, 0x9e, 0x05,
        0xb1, 0x4f, 0x70, 0xa2, 0xfa, 0xd4, 0xfb, 0x04, 0xe5, 0x37, 0xd2, 0x63,
        0x9a, 0x46, 0x9e, 0xfd, 0xb0, 0x5b, 0x1e, 0xdf, 0xff };
Output:
33 bytes
0x55555580f020: 7D CE B1 62 39 F8 3C D5 9A AD 9E 05 B1 4F 70 A2     }..b9.<......Op.
0x55555580f030: FA D4 FB 04 E5 37 D2 63 9A 46 9E FD B0 5B 1E DF     .....7.c.F...[..
0x55555580f040: FF D4 
After:
uint8_t data[] = {
        0x7d, 0xce, 0xb1, 0x62, 0x39, 0xf8, 0x3c, 0xd5, 0x9a, 0xad, 0x9e, 0x05,
        0xb1, 0x4f, 0x70, 0xa2, 0xfa, 0xd4, 0xfb, 0x04, 0xe5, 0x37, 0xd2, 0x63,
        0x9a, 0x46, 0x9e, 0xfd, 0xb0, 0x5b, 0x1e, 0xdf, 0xff };
Output:
33 bytes
0x55555580f020: 7D CE B1 62 39 F8 3C D5 9A AD 9E 05 B1 4F 70 A2     }..b9.<......Op.
0x55555580f030: FA D4 FB 04 E5 37 D2 63 9A 46 9E FD B0 5B 1E DF     .....7.c.F...[..
0x55555580f040: FF",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,510,2021-02-05T21:17:54Z,2021-02-11T18:39:50Z,2021-08-17T17:33:04Z,CLOSED,False,12,0,1,https://github.com/momuno,Test for returning uninitialized variable,2,[],https://github.com/Azure/azure-c-shared-utility/pull/510,https://github.com/momuno,1,https://github.com/Azure/azure-c-shared-utility/pull/510,Not to be merged.,Not to be merged.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,511,2021-02-06T00:45:50Z,2021-02-09T01:38:11Z,2021-02-09T01:38:12Z,MERGED,True,10,2,1,https://github.com/ericwol-msft,Do not set tcp_socket_connection NULL when the socket is closed,6,[],https://github.com/Azure/azure-c-shared-utility/pull/511,https://github.com/ericwol-msft,1,https://github.com/Azure/azure-c-shared-utility/pull/511,#503,#503,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,512,2021-02-08T17:37:42Z,2022-04-21T18:29:54Z,2022-04-21T18:29:54Z,CLOSED,False,513,4,8,https://github.com/yunhaoling,tlsio support for http proxy io,14,[],https://github.com/Azure/azure-c-shared-utility/pull/512,https://github.com/yunhaoling,1,https://github.com/Azure/azure-c-shared-utility/pull/512,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,512,2021-02-08T17:37:42Z,2022-04-21T18:29:54Z,2022-04-21T18:29:54Z,CLOSED,False,513,4,8,https://github.com/yunhaoling,tlsio support for http proxy io,14,[],https://github.com/Azure/azure-c-shared-utility/pull/512,https://github.com/ericwol-msft,2,https://github.com/Azure/azure-c-shared-utility/pull/512#issuecomment-775358995,,please add unit tests to https://github.com/Azure/azure-c-shared-utility/blob/master/tests/http_proxy_io_ut/http_proxy_io_ut.c,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,512,2021-02-08T17:37:42Z,2022-04-21T18:29:54Z,2022-04-21T18:29:54Z,CLOSED,False,513,4,8,https://github.com/yunhaoling,tlsio support for http proxy io,14,[],https://github.com/Azure/azure-c-shared-utility/pull/512,https://github.com/yunhaoling,3,https://github.com/Azure/azure-c-shared-utility/pull/512#issuecomment-775913522,,"hey @ericwol-msft, I tried to add two tests.
however, I don't know how to give a default value to the bool variable (true/false) in the struct -- I guess it's not supported in C.
I find that during runtime a random true/false could be assigned to the variable, do you know how to resolve the issue in a non-breaking way?",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,512,2021-02-08T17:37:42Z,2022-04-21T18:29:54Z,2022-04-21T18:29:54Z,CLOSED,False,513,4,8,https://github.com/yunhaoling,tlsio support for http proxy io,14,[],https://github.com/Azure/azure-c-shared-utility/pull/512,https://github.com/ericwol-msft,4,https://github.com/Azure/azure-c-shared-utility/pull/512#issuecomment-776344929,,"yes, this is an issue. You should use http_proxy_io_set_option() to extend the http functionality and not change the io_create_parameters. Move use_tls_proxy to HTTP_PROXY_IO_INSTANCE and add a new option name/value that can be passed in to see this value.
@ewertons",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,512,2021-02-08T17:37:42Z,2022-04-21T18:29:54Z,2022-04-21T18:29:54Z,CLOSED,False,513,4,8,https://github.com/yunhaoling,tlsio support for http proxy io,14,[],https://github.com/Azure/azure-c-shared-utility/pull/512,https://github.com/jessek,5,https://github.com/Azure/azure-c-shared-utility/pull/512#issuecomment-815540881,,@yunhaoling: Looks like there is some feedback and suggestions on the code. Can you please update the PR to reflect the requested changes? We are excited to have this capability!,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,512,2021-02-08T17:37:42Z,2022-04-21T18:29:54Z,2022-04-21T18:29:54Z,CLOSED,False,513,4,8,https://github.com/yunhaoling,tlsio support for http proxy io,14,[],https://github.com/Azure/azure-c-shared-utility/pull/512,https://github.com/yunhaoling,6,https://github.com/Azure/azure-c-shared-utility/pull/512#issuecomment-817775380,,"hey @jessek , thanks for checking! I was tied up with some python sdk issues last month, but I should have some free cycles this month and will continue the implantation on this one.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,512,2021-02-08T17:37:42Z,2022-04-21T18:29:54Z,2022-04-21T18:29:54Z,CLOSED,False,513,4,8,https://github.com/yunhaoling,tlsio support for http proxy io,14,[],https://github.com/Azure/azure-c-shared-utility/pull/512,https://github.com/yunhaoling,7,https://github.com/Azure/azure-c-shared-utility/pull/512#issuecomment-1105613462,,"closing the PR for now, but we could reactive this in the future if there's new customer wanting it",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,514,2021-03-12T23:06:49Z,2021-03-13T03:44:57Z,2021-03-13T03:44:58Z,MERGED,True,30,2,1,https://github.com/jspaith,Add deprecation messages,2,[],https://github.com/Azure/azure-c-shared-utility/pull/514,https://github.com/jspaith,1,https://github.com/Azure/azure-c-shared-utility/pull/514,"The httpapi.h layer is not something applications should directly invoke (or at minimum we should strongly steer people away from this).  Applications need to use the ex equivalents.
Add doxygen comments to this effect.","The httpapi.h layer is not something applications should directly invoke (or at minimum we should strongly steer people away from this).  Applications need to use the ex equivalents.
Add doxygen comments to this effect.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,515,2021-03-18T01:20:30Z,2021-03-18T18:45:00Z,2021-03-18T18:45:01Z,MERGED,True,0,7,2,https://github.com/ericwol-msft,fix memory leak in win32 socketio,3,[],https://github.com/Azure/azure-c-shared-utility/pull/515,https://github.com/ericwol-msft,1,https://github.com/Azure/azure-c-shared-utility/pull/515,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,516,2021-03-22T05:17:26Z,2021-03-25T20:00:57Z,2021-03-25T20:00:57Z,MERGED,True,35,0,2,https://github.com/rajaggrawal,fileupload through specific network interface,5,[],https://github.com/Azure/azure-c-shared-utility/pull/516,https://github.com/rajaggrawal,1,https://github.com/Azure/azure-c-shared-utility/pull/516,"raising a separate PR for c-utility.
This PR address the following feature requirement
Azure/azure-iot-sdk-c#1884","raising a separate PR for c-utility.
This PR address the following feature requirement
Azure/azure-iot-sdk-c#1884",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,516,2021-03-22T05:17:26Z,2021-03-25T20:00:57Z,2021-03-25T20:00:57Z,MERGED,True,35,0,2,https://github.com/rajaggrawal,fileupload through specific network interface,5,[],https://github.com/Azure/azure-c-shared-utility/pull/516,https://github.com/ewertons,2,https://github.com/Azure/azure-c-shared-utility/pull/516#issuecomment-806991577,"raising a separate PR for c-utility.
This PR address the following feature requirement
Azure/azure-iot-sdk-c#1884",/azp run integrate-into-repo-C-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,516,2021-03-22T05:17:26Z,2021-03-25T20:00:57Z,2021-03-25T20:00:57Z,MERGED,True,35,0,2,https://github.com/rajaggrawal,fileupload through specific network interface,5,[],https://github.com/Azure/azure-c-shared-utility/pull/516,https://github.com/apps/azure-pipelines,3,https://github.com/Azure/azure-c-shared-utility/pull/516#issuecomment-806991859,"raising a separate PR for c-utility.
This PR address the following feature requirement
Azure/azure-iot-sdk-c#1884",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,518,2021-03-24T21:28:05Z,2021-03-24T22:37:37Z,2021-03-24T22:37:38Z,MERGED,True,6,4,1,https://github.com/ewertons,Log the results of pthread Lock and Unlock in case of error,1,[],https://github.com/Azure/azure-c-shared-utility/pull/518,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/518,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,518,2021-03-24T21:28:05Z,2021-03-24T22:37:37Z,2021-03-24T22:37:38Z,MERGED,True,6,4,1,https://github.com/ewertons,Log the results of pthread Lock and Unlock in case of error,1,[],https://github.com/Azure/azure-c-shared-utility/pull/518,https://github.com/ericwol-msft,2,https://github.com/Azure/azure-c-shared-utility/pull/518#issuecomment-806212020,,"if you do the submodule dance, can you work with john on #516 getting it in so that it's only done once.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,519,2021-03-31T00:32:49Z,2021-05-10T21:22:19Z,2021-05-10T21:22:19Z,MERGED,True,83,0,2,https://github.com/fz-lyu,[Azure Sphere] add options to compile uuid for azsp,9,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/519,https://github.com/fz-lyu,1,https://github.com/Azure/azure-c-shared-utility/pull/519,#520,#520,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,519,2021-03-31T00:32:49Z,2021-05-10T21:22:19Z,2021-05-10T21:22:19Z,MERGED,True,83,0,2,https://github.com/fz-lyu,[Azure Sphere] add options to compile uuid for azsp,9,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/519,https://github.com/momuno,2,https://github.com/Azure/azure-c-shared-utility/pull/519#issuecomment-837258483,#520,/AzurePipelines run integrate-into-repo-C-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,519,2021-03-31T00:32:49Z,2021-05-10T21:22:19Z,2021-05-10T21:22:19Z,MERGED,True,83,0,2,https://github.com/fz-lyu,[Azure Sphere] add options to compile uuid for azsp,9,['Azure Sphere'],https://github.com/Azure/azure-c-shared-utility/pull/519,https://github.com/apps/azure-pipelines,3,https://github.com/Azure/azure-c-shared-utility/pull/519#issuecomment-837258669,#520,Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,521,2021-04-07T15:57:43Z,2021-05-10T15:46:14Z,2021-05-10T15:46:14Z,MERGED,True,31,1,1,https://github.com/maallahatem,Add support of tls renegotiation option,2,[],https://github.com/Azure/azure-c-shared-utility/pull/521,https://github.com/maallahatem,1,https://github.com/Azure/azure-c-shared-utility/pull/521,"This PR is designed to add TLS renegotiation support using HTTPAPI_SetOption()
The integration of this option allows fixing a TLS handshake fails with our server when the SDK is compiled using compact as HTTP stack and mbedtls as TLS layer","This PR is designed to add TLS renegotiation support using HTTPAPI_SetOption()
The integration of this option allows fixing a TLS handshake fails with our server when the SDK is compiled using compact as HTTP stack and mbedtls as TLS layer",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,521,2021-04-07T15:57:43Z,2021-05-10T15:46:14Z,2021-05-10T15:46:14Z,MERGED,True,31,1,1,https://github.com/maallahatem,Add support of tls renegotiation option,2,[],https://github.com/Azure/azure-c-shared-utility/pull/521,https://github.com/apps/microsoft-cla,2,https://github.com/Azure/azure-c-shared-utility/pull/521#issuecomment-815029343,"This PR is designed to add TLS renegotiation support using HTTPAPI_SetOption()
The integration of this option allows fixing a TLS handshake fails with our server when the SDK is compiled using compact as HTTP stack and mbedtls as TLS layer",All CLA requirements met.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,521,2021-04-07T15:57:43Z,2021-05-10T15:46:14Z,2021-05-10T15:46:14Z,MERGED,True,31,1,1,https://github.com/maallahatem,Add support of tls renegotiation option,2,[],https://github.com/Azure/azure-c-shared-utility/pull/521,https://github.com/danewalton,3,https://github.com/Azure/azure-c-shared-utility/pull/521#issuecomment-834682413,"This PR is designed to add TLS renegotiation support using HTTPAPI_SetOption()
The integration of this option allows fixing a TLS handshake fails with our server when the SDK is compiled using compact as HTTP stack and mbedtls as TLS layer",/azp-run integrate-into-repo-C-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,521,2021-04-07T15:57:43Z,2021-05-10T15:46:14Z,2021-05-10T15:46:14Z,MERGED,True,31,1,1,https://github.com/maallahatem,Add support of tls renegotiation option,2,[],https://github.com/Azure/azure-c-shared-utility/pull/521,https://github.com/danewalton,4,https://github.com/Azure/azure-c-shared-utility/pull/521#issuecomment-834683617,"This PR is designed to add TLS renegotiation support using HTTPAPI_SetOption()
The integration of this option allows fixing a TLS handshake fails with our server when the SDK is compiled using compact as HTTP stack and mbedtls as TLS layer",/azp run integrate-into-repo-C-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,521,2021-04-07T15:57:43Z,2021-05-10T15:46:14Z,2021-05-10T15:46:14Z,MERGED,True,31,1,1,https://github.com/maallahatem,Add support of tls renegotiation option,2,[],https://github.com/Azure/azure-c-shared-utility/pull/521,https://github.com/apps/azure-pipelines,5,https://github.com/Azure/azure-c-shared-utility/pull/521#issuecomment-834683702,"This PR is designed to add TLS renegotiation support using HTTPAPI_SetOption()
The integration of this option allows fixing a TLS handshake fails with our server when the SDK is compiled using compact as HTTP stack and mbedtls as TLS layer",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,521,2021-04-07T15:57:43Z,2021-05-10T15:46:14Z,2021-05-10T15:46:14Z,MERGED,True,31,1,1,https://github.com/maallahatem,Add support of tls renegotiation option,2,[],https://github.com/Azure/azure-c-shared-utility/pull/521,https://github.com/danewalton,6,https://github.com/Azure/azure-c-shared-utility/pull/521#issuecomment-834798793,"This PR is designed to add TLS renegotiation support using HTTPAPI_SetOption()
The integration of this option allows fixing a TLS handshake fails with our server when the SDK is compiled using compact as HTTP stack and mbedtls as TLS layer",HI @maallahatem can you update the branch to the latest master?,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,521,2021-04-07T15:57:43Z,2021-05-10T15:46:14Z,2021-05-10T15:46:14Z,MERGED,True,31,1,1,https://github.com/maallahatem,Add support of tls renegotiation option,2,[],https://github.com/Azure/azure-c-shared-utility/pull/521,https://github.com/maallahatem,7,https://github.com/Azure/azure-c-shared-utility/pull/521#issuecomment-835427437,"This PR is designed to add TLS renegotiation support using HTTPAPI_SetOption()
The integration of this option allows fixing a TLS handshake fails with our server when the SDK is compiled using compact as HTTP stack and mbedtls as TLS layer","Hi @danewalton , the branch is now updated to master",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,521,2021-04-07T15:57:43Z,2021-05-10T15:46:14Z,2021-05-10T15:46:14Z,MERGED,True,31,1,1,https://github.com/maallahatem,Add support of tls renegotiation option,2,[],https://github.com/Azure/azure-c-shared-utility/pull/521,https://github.com/danewalton,8,https://github.com/Azure/azure-c-shared-utility/pull/521#issuecomment-836838577,"This PR is designed to add TLS renegotiation support using HTTPAPI_SetOption()
The integration of this option allows fixing a TLS handshake fails with our server when the SDK is compiled using compact as HTTP stack and mbedtls as TLS layer",/azp run integrate-into-repo-C-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,521,2021-04-07T15:57:43Z,2021-05-10T15:46:14Z,2021-05-10T15:46:14Z,MERGED,True,31,1,1,https://github.com/maallahatem,Add support of tls renegotiation option,2,[],https://github.com/Azure/azure-c-shared-utility/pull/521,https://github.com/apps/azure-pipelines,9,https://github.com/Azure/azure-c-shared-utility/pull/521#issuecomment-836838818,"This PR is designed to add TLS renegotiation support using HTTPAPI_SetOption()
The integration of this option allows fixing a TLS handshake fails with our server when the SDK is compiled using compact as HTTP stack and mbedtls as TLS layer",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,522,2021-04-07T21:20:41Z,2021-04-08T18:33:52Z,2021-04-08T18:33:53Z,MERGED,True,84,2,5,https://github.com/CIPop,OpenSSL IP Address SAN validation support,8,[],https://github.com/Azure/azure-c-shared-utility/pull/522,https://github.com/CIPop,1,https://github.com/Azure/azure-c-shared-utility/pull/522,"Adding IP Address SAN list support.
Properly initializing WolfSSL.
Adding WolfSSL debug logging set-option (requires WolfSSL --enable-debug configured binary)","Adding IP Address SAN list support.
Properly initializing WolfSSL.
Adding WolfSSL debug logging set-option (requires WolfSSL --enable-debug configured binary)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,523,2021-04-08T23:31:26Z,2021-05-03T19:19:04Z,2021-05-03T19:19:04Z,MERGED,True,2,2,1,https://github.com/dargilco,Minor fix to root README.md,3,[],https://github.com/Azure/azure-c-shared-utility/pull/523,https://github.com/dargilco,1,https://github.com/Azure/azure-c-shared-utility/pull/523,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,523,2021-04-08T23:31:26Z,2021-05-03T19:19:04Z,2021-05-03T19:19:04Z,MERGED,True,2,2,1,https://github.com/dargilco,Minor fix to root README.md,3,[],https://github.com/Azure/azure-c-shared-utility/pull/523,https://github.com/danewalton,2,https://github.com/Azure/azure-c-shared-utility/pull/523#issuecomment-831434081,,/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,523,2021-04-08T23:31:26Z,2021-05-03T19:19:04Z,2021-05-03T19:19:04Z,MERGED,True,2,2,1,https://github.com/dargilco,Minor fix to root README.md,3,[],https://github.com/Azure/azure-c-shared-utility/pull/523,https://github.com/apps/azure-pipelines,3,https://github.com/Azure/azure-c-shared-utility/pull/523#issuecomment-831434170,,Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,524,2021-04-20T18:05:53Z,2021-04-21T00:14:17Z,2021-04-21T00:14:18Z,MERGED,True,41,4,2,https://github.com/ericwol-msft,Added framework for running longhaul tests under valgrind,13,[],https://github.com/Azure/azure-c-shared-utility/pull/524,https://github.com/ericwol-msft,1,https://github.com/Azure/azure-c-shared-utility/pull/524,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,527,2021-05-01T00:01:31Z,2021-05-03T17:34:26Z,2021-05-03T17:34:27Z,MERGED,True,4,0,1,https://github.com/ericwol-msft,clang static code analyzer issues,1,[],https://github.com/Azure/azure-c-shared-utility/pull/527,https://github.com/ericwol-msft,1,https://github.com/Azure/azure-c-shared-utility/pull/527,for SDK issue Azure/azure-iot-sdk-c#1298,for SDK issue Azure/azure-iot-sdk-c#1298,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,528,2021-05-03T21:41:58Z,2021-05-11T18:22:04Z,2021-05-11T18:22:04Z,MERGED,True,121,79,2,https://github.com/parsodark,Fix HTTPAPIEX_ExecuteRequest failing with HTTPAPI_REQUEST_HEAD,2,[],https://github.com/Azure/azure-c-shared-utility/pull/528,https://github.com/parsodark,1,https://github.com/Azure/azure-c-shared-utility/pull/528,"The HTTPAPI_REQUEST_TYPE enum is defined using the MU_DEFINE_ENUM
macro, which implicitely adds HTTPAPI_REQUEST_TYPE_INVALID as the first
value. This makes checking the validity of requestType with MU_COUNT_ARG
incorrect: HTTPAPI_REQUEST_TYPE_INVALID is accepted and
HTTPAPI_REQUEST_HEAD is rejected.
Unit tests:

Change all uses of HTTPAPI_REQUEST_PATCH (the previous last value in the
enum) to HTTPAPI_REQUEST_HEAD (the current last value in the enum) to test
that it is accepted.
Change HTTPAPIEX_ExecuteRequest_fails_with_invalid_request_type to use
a request type outside of the enum.
Add HTTPAPIEX_ExecuteRequest_fails_with_invalid_request_type_2, which
explicitely tests that HTTPAPIEX_INVALID_ARG is rejected.","The HTTPAPI_REQUEST_TYPE enum is defined using the MU_DEFINE_ENUM
macro, which implicitely adds HTTPAPI_REQUEST_TYPE_INVALID as the first
value. This makes checking the validity of requestType with MU_COUNT_ARG
incorrect: HTTPAPI_REQUEST_TYPE_INVALID is accepted and
HTTPAPI_REQUEST_HEAD is rejected.
Unit tests:

Change all uses of HTTPAPI_REQUEST_PATCH (the previous last value in the
enum) to HTTPAPI_REQUEST_HEAD (the current last value in the enum) to test
that it is accepted.
Change HTTPAPIEX_ExecuteRequest_fails_with_invalid_request_type to use
a request type outside of the enum.
Add HTTPAPIEX_ExecuteRequest_fails_with_invalid_request_type_2, which
explicitely tests that HTTPAPIEX_INVALID_ARG is rejected.",True,"{'THUMBS_UP': ['https://github.com/ewertons', 'https://github.com/jspaith']}"
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,528,2021-05-03T21:41:58Z,2021-05-11T18:22:04Z,2021-05-11T18:22:04Z,MERGED,True,121,79,2,https://github.com/parsodark,Fix HTTPAPIEX_ExecuteRequest failing with HTTPAPI_REQUEST_HEAD,2,[],https://github.com/Azure/azure-c-shared-utility/pull/528,https://github.com/apps/microsoft-cla,2,https://github.com/Azure/azure-c-shared-utility/pull/528#issuecomment-831553813,"The HTTPAPI_REQUEST_TYPE enum is defined using the MU_DEFINE_ENUM
macro, which implicitely adds HTTPAPI_REQUEST_TYPE_INVALID as the first
value. This makes checking the validity of requestType with MU_COUNT_ARG
incorrect: HTTPAPI_REQUEST_TYPE_INVALID is accepted and
HTTPAPI_REQUEST_HEAD is rejected.
Unit tests:

Change all uses of HTTPAPI_REQUEST_PATCH (the previous last value in the
enum) to HTTPAPI_REQUEST_HEAD (the current last value in the enum) to test
that it is accepted.
Change HTTPAPIEX_ExecuteRequest_fails_with_invalid_request_type to use
a request type outside of the enum.
Add HTTPAPIEX_ExecuteRequest_fails_with_invalid_request_type_2, which
explicitely tests that HTTPAPIEX_INVALID_ARG is rejected.",All CLA requirements met.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,528,2021-05-03T21:41:58Z,2021-05-11T18:22:04Z,2021-05-11T18:22:04Z,MERGED,True,121,79,2,https://github.com/parsodark,Fix HTTPAPIEX_ExecuteRequest failing with HTTPAPI_REQUEST_HEAD,2,[],https://github.com/Azure/azure-c-shared-utility/pull/528,https://github.com/ericwol-msft,3,https://github.com/Azure/azure-c-shared-utility/pull/528#issuecomment-838936315,"The HTTPAPI_REQUEST_TYPE enum is defined using the MU_DEFINE_ENUM
macro, which implicitely adds HTTPAPI_REQUEST_TYPE_INVALID as the first
value. This makes checking the validity of requestType with MU_COUNT_ARG
incorrect: HTTPAPI_REQUEST_TYPE_INVALID is accepted and
HTTPAPI_REQUEST_HEAD is rejected.
Unit tests:

Change all uses of HTTPAPI_REQUEST_PATCH (the previous last value in the
enum) to HTTPAPI_REQUEST_HEAD (the current last value in the enum) to test
that it is accepted.
Change HTTPAPIEX_ExecuteRequest_fails_with_invalid_request_type to use
a request type outside of the enum.
Add HTTPAPIEX_ExecuteRequest_fails_with_invalid_request_type_2, which
explicitely tests that HTTPAPIEX_INVALID_ARG is rejected.","Hi, the changes look ok to be merged, except for the tests.
None of the tests should be changed to cover HTTP_REQUEST_HEAD, there should be new ones added to cover it.

I think this is fine, the UT was not updated (or tested) when the HTTP_REQUEST_HEAD was added. Previously it pointed to the end of the enum, and this just updates to the new last value of the enum.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,528,2021-05-03T21:41:58Z,2021-05-11T18:22:04Z,2021-05-11T18:22:04Z,MERGED,True,121,79,2,https://github.com/parsodark,Fix HTTPAPIEX_ExecuteRequest failing with HTTPAPI_REQUEST_HEAD,2,[],https://github.com/Azure/azure-c-shared-utility/pull/528,https://github.com/ewertons,4,https://github.com/Azure/azure-c-shared-utility/pull/528#issuecomment-838938722,"The HTTPAPI_REQUEST_TYPE enum is defined using the MU_DEFINE_ENUM
macro, which implicitely adds HTTPAPI_REQUEST_TYPE_INVALID as the first
value. This makes checking the validity of requestType with MU_COUNT_ARG
incorrect: HTTPAPI_REQUEST_TYPE_INVALID is accepted and
HTTPAPI_REQUEST_HEAD is rejected.
Unit tests:

Change all uses of HTTPAPI_REQUEST_PATCH (the previous last value in the
enum) to HTTPAPI_REQUEST_HEAD (the current last value in the enum) to test
that it is accepted.
Change HTTPAPIEX_ExecuteRequest_fails_with_invalid_request_type to use
a request type outside of the enum.
Add HTTPAPIEX_ExecuteRequest_fails_with_invalid_request_type_2, which
explicitely tests that HTTPAPIEX_INVALID_ARG is rejected.","Hi, the changes look ok to be merged, except for the tests.
None of the tests should be changed to cover HTTP_REQUEST_HEAD, there should be new ones added to cover it.

Based on Eric's comment it should be fine to go in.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,528,2021-05-03T21:41:58Z,2021-05-11T18:22:04Z,2021-05-11T18:22:04Z,MERGED,True,121,79,2,https://github.com/parsodark,Fix HTTPAPIEX_ExecuteRequest failing with HTTPAPI_REQUEST_HEAD,2,[],https://github.com/Azure/azure-c-shared-utility/pull/528,https://github.com/ericwol-msft,5,https://github.com/Azure/azure-c-shared-utility/pull/528#issuecomment-838939738,"The HTTPAPI_REQUEST_TYPE enum is defined using the MU_DEFINE_ENUM
macro, which implicitely adds HTTPAPI_REQUEST_TYPE_INVALID as the first
value. This makes checking the validity of requestType with MU_COUNT_ARG
incorrect: HTTPAPI_REQUEST_TYPE_INVALID is accepted and
HTTPAPI_REQUEST_HEAD is rejected.
Unit tests:

Change all uses of HTTPAPI_REQUEST_PATCH (the previous last value in the
enum) to HTTPAPI_REQUEST_HEAD (the current last value in the enum) to test
that it is accepted.
Change HTTPAPIEX_ExecuteRequest_fails_with_invalid_request_type to use
a request type outside of the enum.
Add HTTPAPIEX_ExecuteRequest_fails_with_invalid_request_type_2, which
explicitely tests that HTTPAPIEX_INVALID_ARG is rejected.",/azp run all,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,528,2021-05-03T21:41:58Z,2021-05-11T18:22:04Z,2021-05-11T18:22:04Z,MERGED,True,121,79,2,https://github.com/parsodark,Fix HTTPAPIEX_ExecuteRequest failing with HTTPAPI_REQUEST_HEAD,2,[],https://github.com/Azure/azure-c-shared-utility/pull/528,https://github.com/apps/azure-pipelines,6,https://github.com/Azure/azure-c-shared-utility/pull/528#issuecomment-838939876,"The HTTPAPI_REQUEST_TYPE enum is defined using the MU_DEFINE_ENUM
macro, which implicitely adds HTTPAPI_REQUEST_TYPE_INVALID as the first
value. This makes checking the validity of requestType with MU_COUNT_ARG
incorrect: HTTPAPI_REQUEST_TYPE_INVALID is accepted and
HTTPAPI_REQUEST_HEAD is rejected.
Unit tests:

Change all uses of HTTPAPI_REQUEST_PATCH (the previous last value in the
enum) to HTTPAPI_REQUEST_HEAD (the current last value in the enum) to test
that it is accepted.
Change HTTPAPIEX_ExecuteRequest_fails_with_invalid_request_type to use
a request type outside of the enum.
Add HTTPAPIEX_ExecuteRequest_fails_with_invalid_request_type_2, which
explicitely tests that HTTPAPIEX_INVALID_ARG is rejected.",No pipelines are associated with this pull request.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,528,2021-05-03T21:41:58Z,2021-05-11T18:22:04Z,2021-05-11T18:22:04Z,MERGED,True,121,79,2,https://github.com/parsodark,Fix HTTPAPIEX_ExecuteRequest failing with HTTPAPI_REQUEST_HEAD,2,[],https://github.com/Azure/azure-c-shared-utility/pull/528,https://github.com/ericwol-msft,7,https://github.com/Azure/azure-c-shared-utility/pull/528#issuecomment-838941734,"The HTTPAPI_REQUEST_TYPE enum is defined using the MU_DEFINE_ENUM
macro, which implicitely adds HTTPAPI_REQUEST_TYPE_INVALID as the first
value. This makes checking the validity of requestType with MU_COUNT_ARG
incorrect: HTTPAPI_REQUEST_TYPE_INVALID is accepted and
HTTPAPI_REQUEST_HEAD is rejected.
Unit tests:

Change all uses of HTTPAPI_REQUEST_PATCH (the previous last value in the
enum) to HTTPAPI_REQUEST_HEAD (the current last value in the enum) to test
that it is accepted.
Change HTTPAPIEX_ExecuteRequest_fails_with_invalid_request_type to use
a request type outside of the enum.
Add HTTPAPIEX_ExecuteRequest_fails_with_invalid_request_type_2, which
explicitely tests that HTTPAPIEX_INVALID_ARG is rejected.",/azp run integrate-into-repo-C-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,528,2021-05-03T21:41:58Z,2021-05-11T18:22:04Z,2021-05-11T18:22:04Z,MERGED,True,121,79,2,https://github.com/parsodark,Fix HTTPAPIEX_ExecuteRequest failing with HTTPAPI_REQUEST_HEAD,2,[],https://github.com/Azure/azure-c-shared-utility/pull/528,https://github.com/apps/azure-pipelines,8,https://github.com/Azure/azure-c-shared-utility/pull/528#issuecomment-838941972,"The HTTPAPI_REQUEST_TYPE enum is defined using the MU_DEFINE_ENUM
macro, which implicitely adds HTTPAPI_REQUEST_TYPE_INVALID as the first
value. This makes checking the validity of requestType with MU_COUNT_ARG
incorrect: HTTPAPI_REQUEST_TYPE_INVALID is accepted and
HTTPAPI_REQUEST_HEAD is rejected.
Unit tests:

Change all uses of HTTPAPI_REQUEST_PATCH (the previous last value in the
enum) to HTTPAPI_REQUEST_HEAD (the current last value in the enum) to test
that it is accepted.
Change HTTPAPIEX_ExecuteRequest_fails_with_invalid_request_type to use
a request type outside of the enum.
Add HTTPAPIEX_ExecuteRequest_fails_with_invalid_request_type_2, which
explicitely tests that HTTPAPIEX_INVALID_ARG is rejected.",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,529,2021-05-06T19:00:39Z,2021-05-07T22:41:48Z,2021-05-07T22:41:48Z,MERGED,True,102,91,3,https://github.com/ewertons,Fix for crash in case AddOptionInternal fails adding xio CONCRETE_OPTIONS,4,[],https://github.com/Azure/azure-c-shared-utility/pull/529,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/529,"This crash occurs for the following callstack:
==31911== Invalid read of size 8
==31911==    at 0x144C04: DestroyInternal (optionhandler.c:111)
==31911==    by 0x14517F: OptionHandler_Destroy (optionhandler.c:278)
==31911==    by 0x144958: xio_retrieveoptions (xio.c:288)
==31911==    by 0x140395: tlsio_openssl_retrieveoptions (tlsio_openssl.c:335)
==31911==    by 0x14488B: xio_retrieveoptions (xio.c:276)
==31911==    by 0x14F12C: ResetConnectionIfNecessary (iothubtransport_mqtt_common.c:1977)
==31911==    by 0x15074B: UpdateMqttConnectionStateIfNeeded (iothubtransport_mqtt_common.c:2585)
==31911==    by 0x15290C: IoTHubTransport_MQTT_Common_DoWork (iothubtransport_mqtt_common.c:3474)
==31911==    by 0x14AD63: IoTHubTransportMqtt_DoWork (iothubtransportmqtt.c:121)
==31911==    by 0x11DD46: IoTHubClientCore_LL_DoWork (iothub_client_core_ll.c:2123)
==31911==    by 0x128F92: ScheduleWork_Thread (iothub_client_core.c:813)
==31911==    by 0x1397D0: ThreadWrapper (threadapi_pthreads.c:35)
==31911==  Address 0x6097008 is 24 bytes inside a block of size 32 free'd
==31911==    at 0x48369AB: free (vg_replace_malloc.c:530)
==31911==    by 0x144C98: DestroyInternal (optionhandler.c:123)
==31911==    by 0x14517F: OptionHandler_Destroy (optionhandler.c:278)
==31911==    by 0x14473A: xio_DestroyOption (xio.c:246)
==31911==    by 0x144BD0: AddOptionInternal (optionhandler.c:91)
==31911==    by 0x144FA6: OptionHandler_AddOption (optionhandler.c:219)
==31911==    by 0x144907: xio_retrieveoptions (xio.c:285)
==31911==    by 0x140395: tlsio_openssl_retrieveoptions (tlsio_openssl.c:335)
==31911==    by 0x14488B: xio_retrieveoptions (xio.c:276)
==31911==    by 0x14F12C: ResetConnectionIfNecessary (iothubtransport_mqtt_common.c:1977)
==31911==    by 0x15074B: UpdateMqttConnectionStateIfNeeded (iothubtransport_mqtt_common.c:2585)
==31911==    by 0x15290C: IoTHubTransport_MQTT_Common_DoWork (iothubtransport_mqtt_common.c:3474)
==31911==  Block was alloc'd at
==31911==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31911==    by 0x144990: CreateInternal (optionhandler.c:28)
==31911==    by 0x144D37: OptionHandler_Create (optionhandler.c:142)
==31911==    by 0x14543E: socketio_retrieveoptions (socketio_berkeley.c:178)
==31911==    by 0x14488B: xio_retrieveoptions (xio.c:276)
==31911==    by 0x140395: tlsio_openssl_retrieveoptions (tlsio_openssl.c:335)
==31911==    by 0x14488B: xio_retrieveoptions (xio.c:276)
==31911==    by 0x14F12C: ResetConnectionIfNecessary (iothubtransport_mqtt_common.c:1977)
==31911==    by 0x15074B: UpdateMqttConnectionStateIfNeeded (iothubtransport_mqtt_common.c:2585)
==31911==    by 0x15290C: IoTHubTransport_MQTT_Common_DoWork (iothubtransport_mqtt_common.c:3474)
==31911==    by 0x14AD63: IoTHubTransportMqtt_DoWork (iothubtransportmqtt.c:121)
==31911==    by 0x11DD46: IoTHubClientCore_LL_DoWork (iothub_client_core_ll.c:2123)","This crash occurs for the following callstack:
==31911== Invalid read of size 8
==31911==    at 0x144C04: DestroyInternal (optionhandler.c:111)
==31911==    by 0x14517F: OptionHandler_Destroy (optionhandler.c:278)
==31911==    by 0x144958: xio_retrieveoptions (xio.c:288)
==31911==    by 0x140395: tlsio_openssl_retrieveoptions (tlsio_openssl.c:335)
==31911==    by 0x14488B: xio_retrieveoptions (xio.c:276)
==31911==    by 0x14F12C: ResetConnectionIfNecessary (iothubtransport_mqtt_common.c:1977)
==31911==    by 0x15074B: UpdateMqttConnectionStateIfNeeded (iothubtransport_mqtt_common.c:2585)
==31911==    by 0x15290C: IoTHubTransport_MQTT_Common_DoWork (iothubtransport_mqtt_common.c:3474)
==31911==    by 0x14AD63: IoTHubTransportMqtt_DoWork (iothubtransportmqtt.c:121)
==31911==    by 0x11DD46: IoTHubClientCore_LL_DoWork (iothub_client_core_ll.c:2123)
==31911==    by 0x128F92: ScheduleWork_Thread (iothub_client_core.c:813)
==31911==    by 0x1397D0: ThreadWrapper (threadapi_pthreads.c:35)
==31911==  Address 0x6097008 is 24 bytes inside a block of size 32 free'd
==31911==    at 0x48369AB: free (vg_replace_malloc.c:530)
==31911==    by 0x144C98: DestroyInternal (optionhandler.c:123)
==31911==    by 0x14517F: OptionHandler_Destroy (optionhandler.c:278)
==31911==    by 0x14473A: xio_DestroyOption (xio.c:246)
==31911==    by 0x144BD0: AddOptionInternal (optionhandler.c:91)
==31911==    by 0x144FA6: OptionHandler_AddOption (optionhandler.c:219)
==31911==    by 0x144907: xio_retrieveoptions (xio.c:285)
==31911==    by 0x140395: tlsio_openssl_retrieveoptions (tlsio_openssl.c:335)
==31911==    by 0x14488B: xio_retrieveoptions (xio.c:276)
==31911==    by 0x14F12C: ResetConnectionIfNecessary (iothubtransport_mqtt_common.c:1977)
==31911==    by 0x15074B: UpdateMqttConnectionStateIfNeeded (iothubtransport_mqtt_common.c:2585)
==31911==    by 0x15290C: IoTHubTransport_MQTT_Common_DoWork (iothubtransport_mqtt_common.c:3474)
==31911==  Block was alloc'd at
==31911==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31911==    by 0x144990: CreateInternal (optionhandler.c:28)
==31911==    by 0x144D37: OptionHandler_Create (optionhandler.c:142)
==31911==    by 0x14543E: socketio_retrieveoptions (socketio_berkeley.c:178)
==31911==    by 0x14488B: xio_retrieveoptions (xio.c:276)
==31911==    by 0x140395: tlsio_openssl_retrieveoptions (tlsio_openssl.c:335)
==31911==    by 0x14488B: xio_retrieveoptions (xio.c:276)
==31911==    by 0x14F12C: ResetConnectionIfNecessary (iothubtransport_mqtt_common.c:1977)
==31911==    by 0x15074B: UpdateMqttConnectionStateIfNeeded (iothubtransport_mqtt_common.c:2585)
==31911==    by 0x15290C: IoTHubTransport_MQTT_Common_DoWork (iothubtransport_mqtt_common.c:3474)
==31911==    by 0x14AD63: IoTHubTransportMqtt_DoWork (iothubtransportmqtt.c:121)
==31911==    by 0x11DD46: IoTHubClientCore_LL_DoWork (iothub_client_core_ll.c:2123)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,529,2021-05-06T19:00:39Z,2021-05-07T22:41:48Z,2021-05-07T22:41:48Z,MERGED,True,102,91,3,https://github.com/ewertons,Fix for crash in case AddOptionInternal fails adding xio CONCRETE_OPTIONS,4,[],https://github.com/Azure/azure-c-shared-utility/pull/529,https://github.com/ericwol-msft,2,https://github.com/Azure/azure-c-shared-utility/pull/529#issuecomment-833936698,"This crash occurs for the following callstack:
==31911== Invalid read of size 8
==31911==    at 0x144C04: DestroyInternal (optionhandler.c:111)
==31911==    by 0x14517F: OptionHandler_Destroy (optionhandler.c:278)
==31911==    by 0x144958: xio_retrieveoptions (xio.c:288)
==31911==    by 0x140395: tlsio_openssl_retrieveoptions (tlsio_openssl.c:335)
==31911==    by 0x14488B: xio_retrieveoptions (xio.c:276)
==31911==    by 0x14F12C: ResetConnectionIfNecessary (iothubtransport_mqtt_common.c:1977)
==31911==    by 0x15074B: UpdateMqttConnectionStateIfNeeded (iothubtransport_mqtt_common.c:2585)
==31911==    by 0x15290C: IoTHubTransport_MQTT_Common_DoWork (iothubtransport_mqtt_common.c:3474)
==31911==    by 0x14AD63: IoTHubTransportMqtt_DoWork (iothubtransportmqtt.c:121)
==31911==    by 0x11DD46: IoTHubClientCore_LL_DoWork (iothub_client_core_ll.c:2123)
==31911==    by 0x128F92: ScheduleWork_Thread (iothub_client_core.c:813)
==31911==    by 0x1397D0: ThreadWrapper (threadapi_pthreads.c:35)
==31911==  Address 0x6097008 is 24 bytes inside a block of size 32 free'd
==31911==    at 0x48369AB: free (vg_replace_malloc.c:530)
==31911==    by 0x144C98: DestroyInternal (optionhandler.c:123)
==31911==    by 0x14517F: OptionHandler_Destroy (optionhandler.c:278)
==31911==    by 0x14473A: xio_DestroyOption (xio.c:246)
==31911==    by 0x144BD0: AddOptionInternal (optionhandler.c:91)
==31911==    by 0x144FA6: OptionHandler_AddOption (optionhandler.c:219)
==31911==    by 0x144907: xio_retrieveoptions (xio.c:285)
==31911==    by 0x140395: tlsio_openssl_retrieveoptions (tlsio_openssl.c:335)
==31911==    by 0x14488B: xio_retrieveoptions (xio.c:276)
==31911==    by 0x14F12C: ResetConnectionIfNecessary (iothubtransport_mqtt_common.c:1977)
==31911==    by 0x15074B: UpdateMqttConnectionStateIfNeeded (iothubtransport_mqtt_common.c:2585)
==31911==    by 0x15290C: IoTHubTransport_MQTT_Common_DoWork (iothubtransport_mqtt_common.c:3474)
==31911==  Block was alloc'd at
==31911==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31911==    by 0x144990: CreateInternal (optionhandler.c:28)
==31911==    by 0x144D37: OptionHandler_Create (optionhandler.c:142)
==31911==    by 0x14543E: socketio_retrieveoptions (socketio_berkeley.c:178)
==31911==    by 0x14488B: xio_retrieveoptions (xio.c:276)
==31911==    by 0x140395: tlsio_openssl_retrieveoptions (tlsio_openssl.c:335)
==31911==    by 0x14488B: xio_retrieveoptions (xio.c:276)
==31911==    by 0x14F12C: ResetConnectionIfNecessary (iothubtransport_mqtt_common.c:1977)
==31911==    by 0x15074B: UpdateMqttConnectionStateIfNeeded (iothubtransport_mqtt_common.c:2585)
==31911==    by 0x15290C: IoTHubTransport_MQTT_Common_DoWork (iothubtransport_mqtt_common.c:3474)
==31911==    by 0x14AD63: IoTHubTransportMqtt_DoWork (iothubtransportmqtt.c:121)
==31911==    by 0x11DD46: IoTHubClientCore_LL_DoWork (iothub_client_core_ll.c:2123)",36 - xio_ut (SEGFAULT),True,{'THUMBS_UP': ['https://github.com/ewertons']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,531,2021-05-07T01:40:04Z,2021-05-07T18:21:25Z,2021-05-07T18:21:26Z,MERGED,True,1,1,1,https://github.com/danewalton,update install location of cutility headers,2,[],https://github.com/Azure/azure-c-shared-utility/pull/531,https://github.com/danewalton,1,https://github.com/Azure/azure-c-shared-utility/pull/531,"Closes #530
Installs to directory which can be found by standard system include paths","Closes #530
Installs to directory which can be found by standard system include paths",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,532,2021-05-10T21:59:15Z,2021-05-10T22:04:51Z,2021-05-10T22:04:52Z,MERGED,True,1,1,1,https://github.com/ericwol-msft,Fix uuid memcpy length,1,[],https://github.com/Azure/azure-c-shared-utility/pull/532,https://github.com/ericwol-msft,1,https://github.com/Azure/azure-c-shared-utility/pull/532,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,533,2021-05-11T00:21:21Z,2021-05-11T15:25:43Z,2021-05-11T15:25:43Z,MERGED,True,89,65,6,https://github.com/ewertons,Fix websocket xio options clonning,2,[],https://github.com/Azure/azure-c-shared-utility/pull/533,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/533,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,536,2021-06-18T13:28:31Z,2021-08-09T20:31:54Z,2021-08-09T20:31:54Z,MERGED,True,14,5,4,https://github.com/maallahatem,Fail to upload long Blob using mbedtls+compact(Issue #1995),4,[],https://github.com/Azure/azure-c-shared-utility/pull/536,https://github.com/maallahatem,1,https://github.com/Azure/azure-c-shared-utility/pull/536,"Hello,
The aim of this pull request is to propose a fix for the bug Fail to upload long Blob using mbedtls+compact #1995
Note, that the other part of the solution is available a PR on the azure-iot-sdk-c repository #2004
Regard
Hatem","Hello,
The aim of this pull request is to propose a fix for the bug Fail to upload long Blob using mbedtls+compact #1995
Note, that the other part of the solution is available a PR on the azure-iot-sdk-c repository #2004
Regard
Hatem",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,536,2021-06-18T13:28:31Z,2021-08-09T20:31:54Z,2021-08-09T20:31:54Z,MERGED,True,14,5,4,https://github.com/maallahatem,Fail to upload long Blob using mbedtls+compact(Issue #1995),4,[],https://github.com/Azure/azure-c-shared-utility/pull/536,https://github.com/ericwol-msft,2,https://github.com/Azure/azure-c-shared-utility/pull/536#issuecomment-867216989,"Hello,
The aim of this pull request is to propose a fix for the bug Fail to upload long Blob using mbedtls+compact #1995
Note, that the other part of the solution is available a PR on the azure-iot-sdk-c repository #2004
Regard
Hatem",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,536,2021-06-18T13:28:31Z,2021-08-09T20:31:54Z,2021-08-09T20:31:54Z,MERGED,True,14,5,4,https://github.com/maallahatem,Fail to upload long Blob using mbedtls+compact(Issue #1995),4,[],https://github.com/Azure/azure-c-shared-utility/pull/536,https://github.com/apps/azure-pipelines,3,https://github.com/Azure/azure-c-shared-utility/pull/536#issuecomment-867217042,"Hello,
The aim of this pull request is to propose a fix for the bug Fail to upload long Blob using mbedtls+compact #1995
Note, that the other part of the solution is available a PR on the azure-iot-sdk-c repository #2004
Regard
Hatem",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,536,2021-06-18T13:28:31Z,2021-08-09T20:31:54Z,2021-08-09T20:31:54Z,MERGED,True,14,5,4,https://github.com/maallahatem,Fail to upload long Blob using mbedtls+compact(Issue #1995),4,[],https://github.com/Azure/azure-c-shared-utility/pull/536,https://github.com/ericwol-msft,4,https://github.com/Azure/azure-c-shared-utility/pull/536#issuecomment-867222833,"Hello,
The aim of this pull request is to propose a fix for the bug Fail to upload long Blob using mbedtls+compact #1995
Note, that the other part of the solution is available a PR on the azure-iot-sdk-c repository #2004
Regard
Hatem","There are unit test failures

2021-06-23T23:14:47.2835155Z ==3363== Command: /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe
2021-06-23T23:14:47.2836156Z ==3363==
2021-06-23T23:14:47.2836978Z ==3363== Conditional jump or move depends on uninitialised value(s)
2021-06-23T23:14:47.2838393Z ==3363==    at 0x2B9AE1: on_send_complete (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2840035Z ==3363==    by 0x2B090A: my_xio_send (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2842645Z ==3363==    by 0x16F9BB: xio_send (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2844729Z ==3363==    by 0x2B9C2C: on_io_send (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2846778Z ==3363==    by 0x2B09E4: my_mbedtls_ssl_write (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2848469Z ==3363==    by 0x26464A: mbedtls_ssl_write (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2850098Z ==3363==    by 0x2BA9C3: tlsio_mbedtls_send (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2851776Z ==3363==    by 0x2B6AE6: tlsio_mbedtls_send_large_payload_failure (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2853441Z ==3363==    by 0x2C192D: RunTests (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2854976Z ==3363==    by 0x2BBB84: main (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2856072Z ==3363==  Uninitialised value was created by a stack allocation
2021-06-23T23:14:47.2857520Z ==3363==    at 0x2B6612: tlsio_mbedtls_send_large_payload_failure (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2858700Z ==3363==
2021-06-23T23:14:47.2859418Z {
2021-06-23T23:14:47.2860121Z    <insert_a_suppression_name_here>
2021-06-23T23:14:47.2860857Z    Memcheck:Cond
2021-06-23T23:14:47.2861569Z    fun:on_send_complete
2021-06-23T23:14:47.2862281Z    fun:my_xio_send
2021-06-23T23:14:47.2862986Z    fun:xio_send
2021-06-23T23:14:47.2863675Z    fun:on_io_send
2021-06-23T23:14:47.2864383Z    fun:my_mbedtls_ssl_write
2021-06-23T23:14:47.2865113Z    fun:mbedtls_ssl_write
2021-06-23T23:14:47.2865852Z    fun:tlsio_mbedtls_send
2021-06-23T23:14:47.2866625Z    fun:tlsio_mbedtls_send_large_payload_failure
2021-06-23T23:14:47.2867376Z    fun:RunTests
2021-06-23T23:14:47.2868068Z    fun:main
2021-06-23T23:14:47.2868711Z }
2021-06-23T23:14:47.2869609Z ==3363== Conditional jump or move depends on uninitialised value(s)
2021-06-23T23:14:47.2871034Z ==3363==    at 0x2B9AE1: on_send_complete (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2872606Z ==3363==    by 0x2B08F6: my_xio_send (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2874326Z ==3363==    by 0x16FB3D: xio_send (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2875874Z ==3363==    by 0x2B9C2C: on_io_send (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2877431Z ==3363==    by 0x2B09E4: my_mbedtls_ssl_write (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2879069Z ==3363==    by 0x264725: mbedtls_ssl_write (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2890417Z ==3363==    by 0x2BA9C3: tlsio_mbedtls_send (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2892185Z ==3363==    by 0x2B6AE6: tlsio_mbedtls_send_large_payload_failure (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2896272Z ==3363==    by 0x2C192D: RunTests (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2898288Z ==3363==    by 0x2BBB84: main (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2899530Z ==3363==  Uninitialised value was created by a stack allocation
2021-06-23T23:14:47.2901038Z ==3363==    at 0x2B6612: tlsio_mbedtls_send_large_payload_failure (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2902100Z ==3363==
2021-06-23T23:14:47.2902761Z {
2021-06-23T23:14:47.2903646Z    <insert_a_suppression_name_here>
2021-06-23T23:14:47.2904399Z    Memcheck:Cond
2021-06-23T23:14:47.2905128Z    fun:on_send_complete
2021-06-23T23:14:47.2905851Z    fun:my_xio_send
2021-06-23T23:14:47.2906552Z    fun:xio_send
2021-06-23T23:14:47.2907243Z    fun:on_io_send
2021-06-23T23:14:47.2908125Z    fun:my_mbedtls_ssl_write
2021-06-23T23:14:47.2908879Z    fun:mbedtls_ssl_write
2021-06-23T23:14:47.2909602Z    fun:tlsio_mbedtls_send
2021-06-23T23:14:47.2910397Z    fun:tlsio_mbedtls_send_large_payload_failure
2021-06-23T23:14:47.2911163Z    fun:RunTests
2021-06-23T23:14:47.2911840Z    fun:main
2021-06-23T23:14:47.2912479Z }
2021-06-23T23:14:47.2913240Z ==3363== Conditional jump or move depends on uninitialised value(s)
2021-06-23T23:14:47.2914660Z ==3363==    at 0x2B9AE1: on_send_complete (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2916261Z ==3363==    by 0x2B090A: my_xio_send (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2917807Z ==3363==    by 0x16FB3D: xio_send (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2919341Z ==3363==    by 0x2B9C2C: on_io_send (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2920922Z ==3363==    by 0x2B09E4: my_mbedtls_ssl_write (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2922507Z ==3363==    by 0x264725: mbedtls_ssl_write (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2923922Z ==3363==    by 0x2BA9C3: tlsio_mbedtls_send (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2925497Z ==3363==    by 0x2B63B5: tlsio_mbedtls_send_large_payload_success (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2927142Z ==3363==    by 0x2C192D: RunTests (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2928496Z ==3363==    by 0x2BBB84: main (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2929375Z ==3363==  Uninitialised value was created by a stack allocation
2021-06-23T23:14:47.2930575Z ==3363==    at 0x2B5EEB: tlsio_mbedtls_send_large_payload_success (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.2931567Z ==3363==
2021-06-23T23:14:47.2932032Z {
2021-06-23T23:14:47.2932410Z    <insert_a_suppression_name_here>
2021-06-23T23:14:47.2932929Z    Memcheck:Cond
2021-06-23T23:14:47.2933424Z    fun:on_send_complete
2021-06-23T23:14:47.2933918Z    fun:my_xio_send
2021-06-23T23:14:47.2934410Z    fun:xio_send
2021-06-23T23:14:47.2934886Z    fun:on_io_send
2021-06-23T23:14:47.2935379Z    fun:my_mbedtls_ssl_write
2021-06-23T23:14:47.2935888Z    fun:mbedtls_ssl_write
2021-06-23T23:14:47.2936410Z    fun:tlsio_mbedtls_send
2021-06-23T23:14:47.2936973Z    fun:tlsio_mbedtls_send_large_payload_success
2021-06-23T23:14:47.2937508Z    fun:RunTests
2021-06-23T23:14:47.2937969Z    fun:main
2021-06-23T23:14:47.2938394Z }


2021-06-23T23:14:47.3050143Z �[0m==3363==
2021-06-23T23:14:47.3050705Z ==3363== HEAP SUMMARY:
2021-06-23T23:14:47.3051289Z ==3363==     in use at exit: 81,264 bytes in 6 blocks
2021-06-23T23:14:47.3051994Z ==3363==   total heap usage: 8,765 allocs, 8,759 frees, 1,409,456 bytes allocated
2021-06-23T23:14:47.3052605Z ==3363==
2021-06-23T23:14:47.3053248Z ==3363== 40,632 (40,608 direct, 24 indirect) bytes in 1 blocks are definitely lost in loss record 5 of 6
2021-06-23T23:14:47.3054286Z ==3363==    at 0x4C31B25: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
2021-06-23T23:14:47.3055507Z ==3363==    by 0x125FD6: my_gballoc_calloc (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.3056796Z ==3363==    by 0x12F2F6: gballoc_calloc (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.3058119Z ==3363==    by 0x2BA0AE: tlsio_mbedtls_create (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.3059484Z ==3363==    by 0x2B6669: tlsio_mbedtls_send_large_payload_failure (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.3060797Z ==3363==    by 0x2C192D: RunTests (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.3062054Z ==3363==    by 0x2BBB84: main (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.3062777Z ==3363==
2021-06-23T23:14:47.3063205Z {
2021-06-23T23:14:47.3063703Z    <insert_a_suppression_name_here>
2021-06-23T23:14:47.3064109Z    Memcheck:Leak
2021-06-23T23:14:47.3064849Z    match-leak-kinds: definite
2021-06-23T23:14:47.3065411Z    fun:calloc
2021-06-23T23:14:47.3065902Z    fun:my_gballoc_calloc
2021-06-23T23:14:47.3066433Z    fun:gballoc_calloc
2021-06-23T23:14:47.3066936Z    fun:tlsio_mbedtls_create
2021-06-23T23:14:47.3067499Z    fun:tlsio_mbedtls_send_large_payload_failure
2021-06-23T23:14:47.3068040Z    fun:RunTests
2021-06-23T23:14:47.3068521Z    fun:main
2021-06-23T23:14:47.3068956Z }
2021-06-23T23:14:47.3069566Z ==3363== 40,632 (40,608 direct, 24 indirect) bytes in 1 blocks are definitely lost in loss record 6 of 6
2021-06-23T23:14:47.3070850Z ==3363==    at 0x4C31B25: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
2021-06-23T23:14:47.3078558Z ==3363==    by 0x125FD6: my_gballoc_calloc (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.3079906Z ==3363==    by 0x12F2F6: gballoc_calloc (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.3081213Z ==3363==    by 0x2BA0AE: tlsio_mbedtls_create (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.3082642Z ==3363==    by 0x2B5F42: tlsio_mbedtls_send_large_payload_success (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.3085601Z ==3363==    by 0x2C192D: RunTests (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.3087030Z ==3363==    by 0x2BBB84: main (in /__w/16/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-23T23:14:47.3087822Z ==3363==
2021-06-23T23:14:47.3088297Z {
2021-06-23T23:14:47.3088800Z    <insert_a_suppression_name_here>
2021-06-23T23:14:47.3089330Z    Memcheck:Leak
2021-06-23T23:14:47.3090089Z    match-leak-kinds: definite
2021-06-23T23:14:47.3090683Z    fun:calloc
2021-06-23T23:14:47.3091191Z    fun:my_gballoc_calloc
2021-06-23T23:14:47.3091706Z    fun:gballoc_calloc
2021-06-23T23:14:47.3092221Z    fun:tlsio_mbedtls_create
2021-06-23T23:14:47.3092804Z    fun:tlsio_mbedtls_send_large_payload_success
2021-06-23T23:14:47.3093358Z    fun:RunTests
2021-06-23T23:14:47.3094003Z    fun:main
2021-06-23T23:14:47.3094455Z }",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,536,2021-06-18T13:28:31Z,2021-08-09T20:31:54Z,2021-08-09T20:31:54Z,MERGED,True,14,5,4,https://github.com/maallahatem,Fail to upload long Blob using mbedtls+compact(Issue #1995),4,[],https://github.com/Azure/azure-c-shared-utility/pull/536,https://github.com/ericwol-msft,5,https://github.com/Azure/azure-c-shared-utility/pull/536#issuecomment-868753510,"Hello,
The aim of this pull request is to propose a fix for the bug Fail to upload long Blob using mbedtls+compact #1995
Note, that the other part of the solution is available a PR on the azure-iot-sdk-c repository #2004
Regard
Hatem",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,536,2021-06-18T13:28:31Z,2021-08-09T20:31:54Z,2021-08-09T20:31:54Z,MERGED,True,14,5,4,https://github.com/maallahatem,Fail to upload long Blob using mbedtls+compact(Issue #1995),4,[],https://github.com/Azure/azure-c-shared-utility/pull/536,https://github.com/apps/azure-pipelines,6,https://github.com/Azure/azure-c-shared-utility/pull/536#issuecomment-868753595,"Hello,
The aim of this pull request is to propose a fix for the bug Fail to upload long Blob using mbedtls+compact #1995
Note, that the other part of the solution is available a PR on the azure-iot-sdk-c repository #2004
Regard
Hatem",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,536,2021-06-18T13:28:31Z,2021-08-09T20:31:54Z,2021-08-09T20:31:54Z,MERGED,True,14,5,4,https://github.com/maallahatem,Fail to upload long Blob using mbedtls+compact(Issue #1995),4,[],https://github.com/Azure/azure-c-shared-utility/pull/536,https://github.com/ericwol-msft,7,https://github.com/Azure/azure-c-shared-utility/pull/536#issuecomment-868760943,"Hello,
The aim of this pull request is to propose a fix for the bug Fail to upload long Blob using mbedtls+compact #1995
Note, that the other part of the solution is available a PR on the azure-iot-sdk-c repository #2004
Regard
Hatem","Still unit test failures
2021-06-25T18:29:36.9899908Z ==3366== HEAP SUMMARY:
2021-06-25T18:29:36.9900500Z ==3366==     in use at exit: 81,264 bytes in 6 blocks
2021-06-25T18:29:36.9901248Z ==3366==   total heap usage: 8,765 allocs, 8,759 frees, 1,409,456 bytes allocated
2021-06-25T18:29:36.9901866Z ==3366==
2021-06-25T18:29:36.9902514Z ==3366== 40,632 (40,608 direct, 24 indirect) bytes in 1 blocks are definitely lost in loss record 5 of 6
2021-06-25T18:29:36.9903628Z ==3366==    at 0x4C31B25: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
2021-06-25T18:29:36.9904895Z ==3366==    by 0x125FD6: my_gballoc_calloc (in /__w/20/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-25T18:29:36.9906190Z ==3366==    by 0x12F2F6: gballoc_calloc (in /__w/20/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-25T18:29:36.9907495Z ==3366==    by 0x2BA0BC: tlsio_mbedtls_create (in /__w/20/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-25T18:29:36.9908886Z ==3366==    by 0x2B6677: tlsio_mbedtls_send_large_payload_failure (in /__w/20/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-25T18:29:36.9910213Z ==3366==    by 0x2C193B: RunTests (in /__w/20/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-25T18:29:36.9911454Z ==3366==    by 0x2BBB92: main (in /__w/20/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-25T18:29:36.9912201Z ==3366==
2021-06-25T18:29:36.9912802Z {
2021-06-25T18:29:36.9913297Z    <insert_a_suppression_name_here>
2021-06-25T18:29:36.9913833Z    Memcheck:Leak
2021-06-25T18:29:36.9914621Z    match-leak-kinds: definite
2021-06-25T18:29:36.9915204Z    fun:calloc
2021-06-25T18:29:36.9915699Z    fun:my_gballoc_calloc
2021-06-25T18:29:36.9916207Z    fun:gballoc_calloc
2021-06-25T18:29:36.9916732Z    fun:tlsio_mbedtls_create
2021-06-25T18:29:36.9917302Z    fun:tlsio_mbedtls_send_large_payload_failure
2021-06-25T18:29:36.9917849Z    fun:RunTests
2021-06-25T18:29:36.9918318Z    fun:main
2021-06-25T18:29:36.9918756Z }
2021-06-25T18:29:36.9919400Z ==3366== 40,632 (40,608 direct, 24 indirect) bytes in 1 blocks are definitely lost in loss record 6 of 6
2021-06-25T18:29:36.9920518Z ==3366==    at 0x4C31B25: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
2021-06-25T18:29:36.9921909Z ==3366==    by 0x125FD6: my_gballoc_calloc (in /__w/20/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-25T18:29:36.9923232Z ==3366==    by 0x12F2F6: gballoc_calloc (in /__w/20/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-25T18:29:36.9924625Z ==3366==    by 0x2BA0BC: tlsio_mbedtls_create (in /__w/20/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-25T18:29:36.9926174Z ==3366==    by 0x2B5F49: tlsio_mbedtls_send_large_payload_success (in /__w/20/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-25T18:29:36.9927569Z ==3366==    by 0x2C193B: RunTests (in /__w/20/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-25T18:29:36.9928852Z ==3366==    by 0x2BBB92: main (in /__w/20/s/cmake/shared-util_linux/tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe)
2021-06-25T18:29:36.9929582Z ==3366==
2021-06-25T18:29:36.9930022Z {
2021-06-25T18:29:36.9930518Z    <insert_a_suppression_name_here>
2021-06-25T18:29:36.9931052Z    Memcheck:Leak
2021-06-25T18:29:36.9931788Z    match-leak-kinds: definite
2021-06-25T18:29:36.9932373Z    fun:calloc
2021-06-25T18:29:36.9932896Z    fun:my_gballoc_calloc
2021-06-25T18:29:36.9933472Z    fun:gballoc_calloc
2021-06-25T18:29:36.9933977Z    fun:tlsio_mbedtls_create
2021-06-25T18:29:36.9934547Z    fun:tlsio_mbedtls_send_large_payload_success
2021-06-25T18:29:36.9935092Z    fun:RunTests
2021-06-25T18:29:36.9935576Z    fun:main
2021-06-25T18:29:36.9936010Z }
2021-06-25T18:29:36.9936460Z ==3366== LEAK SUMMARY:
2021-06-25T18:29:36.9937033Z ==3366==    definitely lost: 81,216 bytes in 2 blocks
2021-06-25T18:29:36.9937704Z ==3366==    indirectly lost: 48 bytes in 4 blocks
2021-06-25T18:29:36.9938659Z ==3366==      possibly lost: 0 bytes in 0 blocks
2021-06-25T18:29:36.9939367Z ==3366==    still reachable: 0 bytes in 0 blocks
2021-06-25T18:29:36.9940001Z ==3366==         suppressed: 0 bytes in 0 blocks
2021-06-25T18:29:36.9940561Z ==3366==
2021-06-25T18:29:36.9941505Z ==3366== For counts of detected and suppressed errors, rerun with: -v
2021-06-25T18:29:36.9942580Z ==3366== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,536,2021-06-18T13:28:31Z,2021-08-09T20:31:54Z,2021-08-09T20:31:54Z,MERGED,True,14,5,4,https://github.com/maallahatem,Fail to upload long Blob using mbedtls+compact(Issue #1995),4,[],https://github.com/Azure/azure-c-shared-utility/pull/536,https://github.com/maallahatem,8,https://github.com/Azure/azure-c-shared-utility/pull/536#issuecomment-869697002,"Hello,
The aim of this pull request is to propose a fix for the bug Fail to upload long Blob using mbedtls+compact #1995
Note, that the other part of the solution is available a PR on the azure-iot-sdk-c repository #2004
Regard
Hatem","I'm using Valgrind on my side and everything feels fine
valgrind  --leak-check=full ./tlsio_mbedtls_ut_exe
==3398== Memcheck, a memory error detector
==3398== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3398== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==3398== Command: ./tlsio_mbedtls_ut_exe
==3398== 
 === Executing test suite tlsio_mbedtls_ut ===
Executing test tlsio_mbedtls_setoption_renegotiation_value_NULL_fail ...
Error: Time:Mon Jun 28 12:34:01 2021 File:/home/hatem/work/azure-c-shared-utility/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_setoption Line:1024 Invalid value set for tls renegotiation
Test tlsio_mbedtls_setoption_renegotiation_value_NULL_fail result = Succeeded.
Executing test tlsio_mbedtls_setoption_renegotiation_success ...
Test tlsio_mbedtls_setoption_renegotiation_success result = Succeeded.
Executing test tlsio_mbedtls_setoption_certificate_key_success ...
Test tlsio_mbedtls_setoption_certificate_key_success result = Succeeded.
Executing test tlsio_mbedtls_setoption_certificate_success ...
Test tlsio_mbedtls_setoption_certificate_success result = Succeeded.
Executing test tlsio_on_io_recv_context_NULL_success ...
Error: Time:Mon Jun 28 12:34:01 2021 File:/home/hatem/work/azure-c-shared-utility/adapters/tlsio_mbedtls.c Func:on_io_recv Line:288 Invalid context NULL value passed
Test tlsio_on_io_recv_context_NULL_success result = Succeeded.
Executing test tlsio_on_io_recv_success ...
Test tlsio_on_io_recv_success result = Succeeded.
Executing test tlsio_on_io_recv_timeout_success ...
Test tlsio_on_io_recv_timeout_success result = Succeeded.
Executing test tlsio_on_underlying_io_bytes_received_success ...
Test tlsio_on_underlying_io_bytes_received_success result = Succeeded.
Executing test tlsio_mbedtls_dowork_w_data_success ...
Test tlsio_mbedtls_dowork_w_data_success result = Succeeded.
Executing test tlsio_mbedtls_dowork_success ...
Test tlsio_mbedtls_dowork_success result = Succeeded.
Executing test tlsio_mbedtls_dowork_handle_NULL_fail ...
Test tlsio_mbedtls_dowork_handle_NULL_fail result = Succeeded.
Executing test tlsio_mbedtls_send_large_payload_failure ...
Error: Time:Mon Jun 28 12:34:01 2021 File:/home/hatem/work/azure-c-shared-utility/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_send Line:757 Failed to send last fragment with error:0x2, aborting whole send
Test tlsio_mbedtls_send_large_payload_failure result = Succeeded.
Executing test tlsio_mbedtls_send_large_payload_success ...
Test tlsio_mbedtls_send_large_payload_success result = Succeeded.
Executing test tlsio_mbedtls_send_failure ...
Error: Time:Mon Jun 28 12:34:01 2021 File:/home/hatem/work/azure-c-shared-utility/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_send Line:751 Unexpected data size returned from  mbedtls_ssl_write -1/3
Test tlsio_mbedtls_send_failure result = Succeeded.
Executing test tlsio_mbedtls_send_success ...
Test tlsio_mbedtls_send_success result = Succeeded.
Executing test tlsio_mbedtls_send_not_open_fail ...
Error: Time:Mon Jun 28 12:34:01 2021 File:/home/hatem/work/azure-c-shared-utility/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_send Line:732 Invalid state specified 0
Test tlsio_mbedtls_send_not_open_fail result = Succeeded.
Executing test tlsio_mbedtls_send_handle_NULL_fail ...
Error: Time:Mon Jun 28 12:34:01 2021 File:/home/hatem/work/azure-c-shared-utility/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_send Line:724 Invalid parameter specified tls_io: (nil), buffer: 0x2ce946, size: 3l
Test tlsio_mbedtls_send_handle_NULL_fail result = Succeeded.
Executing test tlsio_mbedtls_close_multiple_calls_fail ...
Error: Time:Mon Jun 28 12:34:01 2021 File:/home/hatem/work/azure-c-shared-utility/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_close Line:678 IO should not be closed: 4
Test tlsio_mbedtls_close_multiple_calls_fail result = Succeeded.
Executing test tlsio_mbedtls_close_success ...
Test tlsio_mbedtls_close_success result = Succeeded.
Executing test tlsio_mbedtls_close_handle_NULL_fail ...
Error: Time:Mon Jun 28 12:34:01 2021 File:/home/hatem/work/azure-c-shared-utility/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_close Line:668 Invalid parameter specified tls_io: NULL
Test tlsio_mbedtls_close_handle_NULL_fail result = Succeeded.
Executing test tlsio_entropy_poll_success ...
Test tlsio_entropy_poll_success result = Succeeded.
Executing test tlsio_mbedtls_open_fail ...
Error: Time:Mon Jun 28 12:34:01 2021 File:/home/hatem/work/azure-c-shared-utility/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_open Line:653 Underlying IO open failed
Test tlsio_mbedtls_open_fail result = Succeeded.
Executing test tlsio_mbedtls_open_multiple_calls_fail ...
Error: Time:Mon Jun 28 12:34:01 2021 File:/home/hatem/work/azure-c-shared-utility/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_open Line:631 IO should not be open: 1
Test tlsio_mbedtls_open_multiple_calls_fail result = Succeeded.
Executing test tlsio_mbedtls_open_succeed ...
Test tlsio_mbedtls_open_succeed result = Succeeded.
Executing test tlsio_mbedtls_open_handle_NULL_fail ...
Error: Time:Mon Jun 28 12:34:01 2021 File:/home/hatem/work/azure-c-shared-utility/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_open Line:622 Invalid parameter specified tls_io: NULL
Test tlsio_mbedtls_open_handle_NULL_fail result = Succeeded.
Executing test tlsio_mbedtls_destroy_handle_NULL_fail ...
Test tlsio_mbedtls_destroy_handle_NULL_fail result = Succeeded.
Executing test tlsio_mbedtls_destroy_succeed ...
Test tlsio_mbedtls_destroy_succeed result = Succeeded.
Executing test tlsio_mbedtls_create_fail ...
Error: Time:Mon Jun 28 12:34:02 2021 File:/home/hatem/work/azure-c-shared-utility/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_create Line:570 Failure allocating TLS object
Error: Time:Mon Jun 28 12:34:02 2021 File:/home/hatem/work/azure-c-shared-utility/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_create Line:550 Failure allocating hostname.
Test tlsio_mbedtls_create_fail result = Succeeded.
Executing test tlsio_mbedtls_create_succeed ...
Test tlsio_mbedtls_create_succeed result = Succeeded.
Executing test tlsio_mbedtls_create_config_NULL_fail ...
Error: Time:Mon Jun 28 12:34:02 2021 File:/home/hatem/work/azure-c-shared-utility/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_create Line:511 NULL tls_io_config
Test tlsio_mbedtls_create_config_NULL_fail result = Succeeded.
30 tests ran, 0 failed, 30 succeeded.
==3398== 
==3398== HEAP SUMMARY:
==3398==     in use at exit: 0 bytes in 0 blocks
==3398==   total heap usage: 8,708 allocs, 8,708 frees, 1,404,155 bytes allocated
==3398== 
==3398== All heap blocks were freed -- no leaks are possible
==3398== 
==3398== For lists of detected and suppressed errors, rerun with: -s
==3398== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,536,2021-06-18T13:28:31Z,2021-08-09T20:31:54Z,2021-08-09T20:31:54Z,MERGED,True,14,5,4,https://github.com/maallahatem,Fail to upload long Blob using mbedtls+compact(Issue #1995),4,[],https://github.com/Azure/azure-c-shared-utility/pull/536,https://github.com/ericwol-msft,9,https://github.com/Azure/azure-c-shared-utility/pull/536#issuecomment-870114469,"Hello,
The aim of this pull request is to propose a fix for the bug Fail to upload long Blob using mbedtls+compact #1995
Note, that the other part of the solution is available a PR on the azure-iot-sdk-c repository #2004
Regard
Hatem","We can't upgrade from valgrind 3.12 because there is no newer release on Ubuntu-18.04 I can look at adding valgrind suppressing rules.
There are still other failures as below.
2021-06-25T18:29:35.4783949Z [0mExecuting test tlsio_mbedtls_dowork_handle_NULL_fail ...
2021-06-25T18:29:35.4785214Z [32mTest tlsio_mbedtls_dowork_handle_NULL_fail result = Succeeded.
2021-06-25T18:29:35.4786499Z [0mExecuting test tlsio_mbedtls_send_large_payload_failure ...
2021-06-25T18:29:35.4787752Z Error: Time:Fri Jun 25 18:29:34 2021 File:/__w/20/s/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_send Line:758 Failed to send last fragment with error:0x2, aborting whole send
2021-06-25T18:29:35.4790290Z   Assert failed in line 957  Expected: [mbedtls_ssl_get_max_frag_len((nil))][mbedtls_ssl_write((nil),0x52,2)][xio_send((nil),(nil),0,(nil),(nil))][on_send_complete((nil),IO_SEND_ERROR)], Actual: [on_send_complete((nil),IO_SEND_OK)][mbedtls_ssl_get_max_frag_len(0x557185ae5628)][mbedtls_ssl_write(0x557185ae5628,0x52,2)][xio_send(0x557185ae6940,0x52,2,0x557183de4a89,0x557185adbfe0)][on_send_complete((nil),IO_SEND_ERROR)]
2021-06-25T18:29:35.4793052Z [31mTest tlsio_mbedtls_send_large_payload_failure result = !!! FAILED !!!
2021-06-25T18:29:35.4794475Z [0mExecuting test tlsio_mbedtls_send_large_payload_success ...
2021-06-25T18:29:35.4796841Z   Assert failed in line 912  Expected: [mbedtls_ssl_get_max_frag_len((nil))][mbedtls_ssl_write((nil),0x52,2)][xio_send((nil),(nil),0,(nil),(nil))][mbedtls_ssl_get_max_frag_len((nil))][mbedtls_ssl_write((nil),0x53,1)][xio_send((nil),(nil),0,(nil),(nil))][on_send_complete((nil),IO_SEND_OK)], Actual: [on_send_complete((nil),IO_SEND_OK)][mbedtls_ssl_get_max_frag_len(0x557185af2fb8)][mbedtls_ssl_write(0x557185af2fb8,0x52,2)][xio_send(0x557185ae5f20,0x52,2,0x557183de4a89,0x557185ae9970)][on_send_complete((nil),IO_SEND_OK)][mbedtls_ssl_get_max_frag_len(0x557185af2fb8)][mbedtls_ssl_write(0x557185af2fb8,0x53,1)][xio_send(0x557185ae5f20,0x53,1,0x557183de4a89,0x557185ae9970)][on_send_complete((nil),IO_SEND_OK)]
2021-06-25T18:29:35.4800079Z [31mTest tlsio_mbedtls_send_large_payload_success result = !!! FAILED !!!
2021-06-25T18:29:35.4801713Z [0mExecuting test tlsio_mbedtls_send_failure ...",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,536,2021-06-18T13:28:31Z,2021-08-09T20:31:54Z,2021-08-09T20:31:54Z,MERGED,True,14,5,4,https://github.com/maallahatem,Fail to upload long Blob using mbedtls+compact(Issue #1995),4,[],https://github.com/Azure/azure-c-shared-utility/pull/536,https://github.com/ericwol-msft,10,https://github.com/Azure/azure-c-shared-utility/pull/536#issuecomment-871027631,"Hello,
The aim of this pull request is to propose a fix for the bug Fail to upload long Blob using mbedtls+compact #1995
Note, that the other part of the solution is available a PR on the azure-iot-sdk-c repository #2004
Regard
Hatem","Humm, ran it under valgrind v3.15 and I still see the memory leak errors. Are you sure you are on the branch SE/fix_blob_upload_fail_mbedtls_1995?

$ valgrind tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe
==21265== Memcheck, a memory error detector
==21265== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==21265== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==21265== Command: tests/tlsio_mbedtls_ut/tlsio_mbedtls_ut_exe
==21265==
=== Executing test suite tlsio_mbedtls_ut ===
Executing test tlsio_mbedtls_setoption_renegotiation_value_NULL_fail ...
Error: Time:Tue Jun 29 18:20:11 2021 File:/mnt/c/temp/azure-c-shared-utility-EcoStruxure/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_setoption Line:1024 Invalid value set for tls renegotiation
Test tlsio_mbedtls_setoption_renegotiation_value_NULL_fail result = Succeeded.
Executing test tlsio_mbedtls_setoption_renegotiation_success ...
Test tlsio_mbedtls_setoption_renegotiation_success result = Succeeded.
Executing test tlsio_mbedtls_setoption_certificate_key_success ...
Test tlsio_mbedtls_setoption_certificate_key_success result = Succeeded.
Executing test tlsio_mbedtls_setoption_certificate_success ...
Test tlsio_mbedtls_setoption_certificate_success result = Succeeded.
Executing test tlsio_on_io_recv_context_NULL_success ...
Error: Time:Tue Jun 29 18:20:12 2021 File:/mnt/c/temp/azure-c-shared-utility-EcoStruxure/adapters/tlsio_mbedtls.c Func:on_io_recv Line:288 Invalid context NULL value passed
Test tlsio_on_io_recv_context_NULL_success result = Succeeded.
Executing test tlsio_on_io_recv_success ...
Test tlsio_on_io_recv_success result = Succeeded.
Executing test tlsio_on_io_recv_timeout_success ...
Test tlsio_on_io_recv_timeout_success result = Succeeded.
Executing test tlsio_on_underlying_io_bytes_received_success ...
Test tlsio_on_underlying_io_bytes_received_success result = Succeeded.
Executing test tlsio_mbedtls_dowork_w_data_success ...
Test tlsio_mbedtls_dowork_w_data_success result = Succeeded.
Executing test tlsio_mbedtls_dowork_success ...
Test tlsio_mbedtls_dowork_success result = Succeeded.
Executing test tlsio_mbedtls_dowork_handle_NULL_fail ...
Test tlsio_mbedtls_dowork_handle_NULL_fail result = Succeeded.
Executing test tlsio_mbedtls_send_large_payload_failure ...
Error: Time:Tue Jun 29 18:20:12 2021 File:/mnt/c/temp/azure-c-shared-utility-EcoStruxure/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_send Line:757 Failed to send last fragment with error:0x2, aborting whole send
Assert failed in line 957  Expected: [mbedtls_ssl_get_max_frag_len((nil))][mbedtls_ssl_write((nil),0x52,2)][xio_send((nil),(nil),0,(nil),(nil))][on_send_complete((nil),IO_SEND_ERROR)], Actual: [on_send_complete((nil),IO_SEND_OK)][mbedtls_ssl_get_max_frag_len(0x4b1f278)][mbedtls_ssl_write(0x4b1f278,0x52,2)][xio_send(0x4b20180,0x52,2,0x2c35d8,0x4b15c30)][on_send_complete((nil),IO_SEND_ERROR)]
Test tlsio_mbedtls_send_large_payload_failure result = !!! FAILED !!!
Executing test tlsio_mbedtls_send_large_payload_success ...
Assert failed in line 912  Expected: [mbedtls_ssl_get_max_frag_len((nil))][mbedtls_ssl_write((nil),0x52,2)][xio_send((nil),(nil),0,(nil),(nil))][mbedtls_ssl_get_max_frag_len((nil))][mbedtls_ssl_write((nil),0x53,1)][xio_send((nil),(nil),0,(nil),(nil))][on_send_complete((nil),IO_SEND_OK)], Actual: [on_send_complete((nil),IO_SEND_OK)][mbedtls_ssl_get_max_frag_len(0x4b35968)][mbedtls_ssl_write(0x4b35968,0x52,2)][xio_send(0x4b36870,0x52,2,0x2c35d8,0x4b2c320)][on_send_complete((nil),IO_SEND_OK)][mbedtls_ssl_get_max_frag_len(0x4b35968)][mbedtls_ssl_write(0x4b35968,0x53,1)][xio_send(0x4b36870,0x53,1,0x2c35d8,0x4b2c320)][on_send_complete((nil),IO_SEND_OK)]
Test tlsio_mbedtls_send_large_payload_success result = !!! FAILED !!!
Executing test tlsio_mbedtls_send_failure ...
Error: Time:Tue Jun 29 18:20:12 2021 File:/mnt/c/temp/azure-c-shared-utility-EcoStruxure/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_send Line:751 Unexpected data size returned from  mbedtls_ssl_write -1/3
Test tlsio_mbedtls_send_failure result = Succeeded.
Executing test tlsio_mbedtls_send_success ...
Test tlsio_mbedtls_send_success result = Succeeded.
Executing test tlsio_mbedtls_send_not_open_fail ...
Error: Time:Tue Jun 29 18:20:12 2021 File:/mnt/c/temp/azure-c-shared-utility-EcoStruxure/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_send Line:732 Invalid state specified 0
Test tlsio_mbedtls_send_not_open_fail result = Succeeded.
Executing test tlsio_mbedtls_send_handle_NULL_fail ...
Error: Time:Tue Jun 29 18:20:12 2021 File:/mnt/c/temp/azure-c-shared-utility-EcoStruxure/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_send Line:724 Invalid parameter specified tls_io: (nil), buffer: 0x2ce946, size: 3l
Test tlsio_mbedtls_send_handle_NULL_fail result = Succeeded.
Executing test tlsio_mbedtls_close_multiple_calls_fail ...
Error: Time:Tue Jun 29 18:20:12 2021 File:/mnt/c/temp/azure-c-shared-utility-EcoStruxure/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_close Line:678 IO should not be closed: 4
Test tlsio_mbedtls_close_multiple_calls_fail result = Succeeded.
Executing test tlsio_mbedtls_close_success ...
Test tlsio_mbedtls_close_success result = Succeeded.
Executing test tlsio_mbedtls_close_handle_NULL_fail ...
Error: Time:Tue Jun 29 18:20:12 2021 File:/mnt/c/temp/azure-c-shared-utility-EcoStruxure/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_close Line:668 Invalid parameter specified tls_io: NULL
Test tlsio_mbedtls_close_handle_NULL_fail result = Succeeded.
Executing test tlsio_entropy_poll_success ...
Test tlsio_entropy_poll_success result = Succeeded.
Executing test tlsio_mbedtls_open_fail ...
Error: Time:Tue Jun 29 18:20:12 2021 File:/mnt/c/temp/azure-c-shared-utility-EcoStruxure/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_open Line:653 Underlying IO open failed
Test tlsio_mbedtls_open_fail result = Succeeded.
Executing test tlsio_mbedtls_open_multiple_calls_fail ...
Error: Time:Tue Jun 29 18:20:12 2021 File:/mnt/c/temp/azure-c-shared-utility-EcoStruxure/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_open Line:631 IO should not be open: 1
Test tlsio_mbedtls_open_multiple_calls_fail result = Succeeded.
Executing test tlsio_mbedtls_open_succeed ...
Test tlsio_mbedtls_open_succeed result = Succeeded.
Executing test tlsio_mbedtls_open_handle_NULL_fail ...
Error: Time:Tue Jun 29 18:20:12 2021 File:/mnt/c/temp/azure-c-shared-utility-EcoStruxure/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_open Line:622 Invalid parameter specified tls_io: NULL
Test tlsio_mbedtls_open_handle_NULL_fail result = Succeeded.
Executing test tlsio_mbedtls_destroy_handle_NULL_fail ...
Test tlsio_mbedtls_destroy_handle_NULL_fail result = Succeeded.
Executing test tlsio_mbedtls_destroy_succeed ...
Test tlsio_mbedtls_destroy_succeed result = Succeeded.
Executing test tlsio_mbedtls_create_fail ...
Error: Time:Tue Jun 29 18:20:12 2021 File:/mnt/c/temp/azure-c-shared-utility-EcoStruxure/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_create Line:570 Failure allocating TLS object
Error: Time:Tue Jun 29 18:20:12 2021 File:/mnt/c/temp/azure-c-shared-utility-EcoStruxure/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_create Line:550 Failure allocating hostname.
Test tlsio_mbedtls_create_fail result = Succeeded.
Executing test tlsio_mbedtls_create_succeed ...
Test tlsio_mbedtls_create_succeed result = Succeeded.
Executing test tlsio_mbedtls_create_config_NULL_fail ...
Error: Time:Tue Jun 29 18:20:12 2021 File:/mnt/c/temp/azure-c-shared-utility-EcoStruxure/adapters/tlsio_mbedtls.c Func:tlsio_mbedtls_create Line:511 NULL tls_io_config
Test tlsio_mbedtls_create_config_NULL_fail result = Succeeded.
30 tests ran, 2 failed, 28 succeeded.
==21265==
==21265== HEAP SUMMARY:
==21265==     in use at exit: 81,296 bytes in 6 blocks
==21265==   total heap usage: 8,759 allocs, 8,753 frees, 1,405,465 bytes allocated
==21265==
==21265== LEAK SUMMARY:
==21265==    definitely lost: 81,248 bytes in 2 blocks
==21265==    indirectly lost: 48 bytes in 4 blocks
==21265==      possibly lost: 0 bytes in 0 blocks
==21265==    still reachable: 0 bytes in 0 blocks
==21265==         suppressed: 0 bytes in 0 blocks
==21265== Rerun with --leak-check=full to see details of leaked memory
==21265==
==21265== For lists of detected and suppressed errors, rerun with: -s
==21265== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,536,2021-06-18T13:28:31Z,2021-08-09T20:31:54Z,2021-08-09T20:31:54Z,MERGED,True,14,5,4,https://github.com/maallahatem,Fail to upload long Blob using mbedtls+compact(Issue #1995),4,[],https://github.com/Azure/azure-c-shared-utility/pull/536,https://github.com/maallahatem,11,https://github.com/Azure/azure-c-shared-utility/pull/536#issuecomment-871075224,"Hello,
The aim of this pull request is to propose a fix for the bug Fail to upload long Blob using mbedtls+compact #1995
Note, that the other part of the solution is available a PR on the azure-iot-sdk-c repository #2004
Regard
Hatem","I'm sorry, it seems that I'm using the wrong branch,
Now everything is ok, Could you check in your side, please
Regards",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,536,2021-06-18T13:28:31Z,2021-08-09T20:31:54Z,2021-08-09T20:31:54Z,MERGED,True,14,5,4,https://github.com/maallahatem,Fail to upload long Blob using mbedtls+compact(Issue #1995),4,[],https://github.com/Azure/azure-c-shared-utility/pull/536,https://github.com/ericwol-msft,12,https://github.com/Azure/azure-c-shared-utility/pull/536#issuecomment-874973293,"Hello,
The aim of this pull request is to propose a fix for the bug Fail to upload long Blob using mbedtls+compact #1995
Note, that the other part of the solution is available a PR on the azure-iot-sdk-c repository #2004
Regard
Hatem",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,536,2021-06-18T13:28:31Z,2021-08-09T20:31:54Z,2021-08-09T20:31:54Z,MERGED,True,14,5,4,https://github.com/maallahatem,Fail to upload long Blob using mbedtls+compact(Issue #1995),4,[],https://github.com/Azure/azure-c-shared-utility/pull/536,https://github.com/apps/azure-pipelines,13,https://github.com/Azure/azure-c-shared-utility/pull/536#issuecomment-874973370,"Hello,
The aim of this pull request is to propose a fix for the bug Fail to upload long Blob using mbedtls+compact #1995
Note, that the other part of the solution is available a PR on the azure-iot-sdk-c repository #2004
Regard
Hatem",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,536,2021-06-18T13:28:31Z,2021-08-09T20:31:54Z,2021-08-09T20:31:54Z,MERGED,True,14,5,4,https://github.com/maallahatem,Fail to upload long Blob using mbedtls+compact(Issue #1995),4,[],https://github.com/Azure/azure-c-shared-utility/pull/536,https://github.com/ericwol-msft,14,https://github.com/Azure/azure-c-shared-utility/pull/536#issuecomment-875813824,"Hello,
The aim of this pull request is to propose a fix for the bug Fail to upload long Blob using mbedtls+compact #1995
Note, that the other part of the solution is available a PR on the azure-iot-sdk-c repository #2004
Regard
Hatem",@maallahatem thanks. We will validate this before merging the PR.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,537,2021-07-01T17:12:15Z,2021-07-02T18:47:38Z,2021-07-02T23:50:32Z,MERGED,True,1,1,1,https://github.com/fgiancane8,hmac.c: fix mismatching function prototype,1,[],https://github.com/Azure/azure-c-shared-utility/pull/537,https://github.com/fgiancane8,1,https://github.com/Azure/azure-c-shared-utility/pull/537,"The reported function raises a warning when compilers assert the flag
-Warray-parameter=, signaling that an array-type argument was promoted
to a pointer-type argument.
While in practice in most C implementations this is correct, fixing the
warning (and, in this case, indicating the maximum size for the array)
would represent a best-practice for finding out-of-bound accesses or
identifying wrongly-sized arrays passed in the function.
Signed-off-by: Francesco Giancane francesco.giancane@accenture.com","The reported function raises a warning when compilers assert the flag
-Warray-parameter=, signaling that an array-type argument was promoted
to a pointer-type argument.
While in practice in most C implementations this is correct, fixing the
warning (and, in this case, indicating the maximum size for the array)
would represent a best-practice for finding out-of-bound accesses or
identifying wrongly-sized arrays passed in the function.
Signed-off-by: Francesco Giancane francesco.giancane@accenture.com",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,537,2021-07-01T17:12:15Z,2021-07-02T18:47:38Z,2021-07-02T23:50:32Z,MERGED,True,1,1,1,https://github.com/fgiancane8,hmac.c: fix mismatching function prototype,1,[],https://github.com/Azure/azure-c-shared-utility/pull/537,https://github.com/danewalton,2,https://github.com/Azure/azure-c-shared-utility/pull/537#issuecomment-872431238,"The reported function raises a warning when compilers assert the flag
-Warray-parameter=, signaling that an array-type argument was promoted
to a pointer-type argument.
While in practice in most C implementations this is correct, fixing the
warning (and, in this case, indicating the maximum size for the array)
would represent a best-practice for finding out-of-bound accesses or
identifying wrongly-sized arrays passed in the function.
Signed-off-by: Francesco Giancane francesco.giancane@accenture.com",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,537,2021-07-01T17:12:15Z,2021-07-02T18:47:38Z,2021-07-02T23:50:32Z,MERGED,True,1,1,1,https://github.com/fgiancane8,hmac.c: fix mismatching function prototype,1,[],https://github.com/Azure/azure-c-shared-utility/pull/537,https://github.com/apps/azure-pipelines,3,https://github.com/Azure/azure-c-shared-utility/pull/537#issuecomment-872431337,"The reported function raises a warning when compilers assert the flag
-Warray-parameter=, signaling that an array-type argument was promoted
to a pointer-type argument.
While in practice in most C implementations this is correct, fixing the
warning (and, in this case, indicating the maximum size for the array)
would represent a best-practice for finding out-of-bound accesses or
identifying wrongly-sized arrays passed in the function.
Signed-off-by: Francesco Giancane francesco.giancane@accenture.com",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,537,2021-07-01T17:12:15Z,2021-07-02T18:47:38Z,2021-07-02T23:50:32Z,MERGED,True,1,1,1,https://github.com/fgiancane8,hmac.c: fix mismatching function prototype,1,[],https://github.com/Azure/azure-c-shared-utility/pull/537,https://github.com/danewalton,4,https://github.com/Azure/azure-c-shared-utility/pull/537#issuecomment-873194658,"The reported function raises a warning when compilers assert the flag
-Warray-parameter=, signaling that an array-type argument was promoted
to a pointer-type argument.
While in practice in most C implementations this is correct, fixing the
warning (and, in this case, indicating the maximum size for the array)
would represent a best-practice for finding out-of-bound accesses or
identifying wrongly-sized arrays passed in the function.
Signed-off-by: Francesco Giancane francesco.giancane@accenture.com",thanks for the contribution @fgiancane8 !,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,537,2021-07-01T17:12:15Z,2021-07-02T18:47:38Z,2021-07-02T23:50:32Z,MERGED,True,1,1,1,https://github.com/fgiancane8,hmac.c: fix mismatching function prototype,1,[],https://github.com/Azure/azure-c-shared-utility/pull/537,https://github.com/fgiancane8,5,https://github.com/Azure/azure-c-shared-utility/pull/537#issuecomment-873307189,"The reported function raises a warning when compilers assert the flag
-Warray-parameter=, signaling that an array-type argument was promoted
to a pointer-type argument.
While in practice in most C implementations this is correct, fixing the
warning (and, in this case, indicating the maximum size for the array)
would represent a best-practice for finding out-of-bound accesses or
identifying wrongly-sized arrays passed in the function.
Signed-off-by: Francesco Giancane francesco.giancane@accenture.com","@danewalton ,
You're welcome :) thank you!",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,538,2021-07-16T06:20:20Z,2021-07-27T06:30:43Z,2021-07-27T06:30:43Z,CLOSED,False,43,7,4,https://github.com/sarh2o,port azure-c-shared-utility to VxWorks,1,[],https://github.com/Azure/azure-c-shared-utility/pull/538,https://github.com/sarh2o,1,https://github.com/Azure/azure-c-shared-utility/pull/538,"socketio_berkeley.c: values of EAGAIN and EWOULDBLOCK are different on VxWorks
uniqueid_vxworks.c: VxWorks' uuid implementation
azure_c_shared_utilityFunctions.cmake: add VxWorks' uuid adapter selection.
azure_iot_build_rules.cmake: make VxWorks use non-POSIX APIs","socketio_berkeley.c: values of EAGAIN and EWOULDBLOCK are different on VxWorks
uniqueid_vxworks.c: VxWorks' uuid implementation
azure_c_shared_utilityFunctions.cmake: add VxWorks' uuid adapter selection.
azure_iot_build_rules.cmake: make VxWorks use non-POSIX APIs",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,538,2021-07-16T06:20:20Z,2021-07-27T06:30:43Z,2021-07-27T06:30:43Z,CLOSED,False,43,7,4,https://github.com/sarh2o,port azure-c-shared-utility to VxWorks,1,[],https://github.com/Azure/azure-c-shared-utility/pull/538,https://github.com/apps/microsoft-cla,2,https://github.com/Azure/azure-c-shared-utility/pull/538#issuecomment-881207402,"socketio_berkeley.c: values of EAGAIN and EWOULDBLOCK are different on VxWorks
uniqueid_vxworks.c: VxWorks' uuid implementation
azure_c_shared_utilityFunctions.cmake: add VxWorks' uuid adapter selection.
azure_iot_build_rules.cmake: make VxWorks use non-POSIX APIs",All CLA requirements met.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,538,2021-07-16T06:20:20Z,2021-07-27T06:30:43Z,2021-07-27T06:30:43Z,CLOSED,False,43,7,4,https://github.com/sarh2o,port azure-c-shared-utility to VxWorks,1,[],https://github.com/Azure/azure-c-shared-utility/pull/538,https://github.com/AshokPeddakotla-MSFT,3,https://github.com/Azure/azure-c-shared-utility/pull/538#issuecomment-886737855,"socketio_berkeley.c: values of EAGAIN and EWOULDBLOCK are different on VxWorks
uniqueid_vxworks.c: VxWorks' uuid implementation
azure_c_shared_utilityFunctions.cmake: add VxWorks' uuid adapter selection.
azure_iot_build_rules.cmake: make VxWorks use non-POSIX APIs",@ericwol-msft Could you please review this PR,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,539,2021-07-16T21:29:42Z,2021-08-13T01:25:52Z,2021-08-13T01:25:53Z,MERGED,True,183,274,79,https://github.com/ericwol-msft,Move to devops hosted agent,25,[],https://github.com/Azure/azure-c-shared-utility/pull/539,https://github.com/ericwol-msft,1,https://github.com/Azure/azure-c-shared-utility/pull/539,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,540,2021-07-19T21:45:19Z,2021-09-01T00:35:49Z,2021-09-01T00:35:49Z,MERGED,True,6,0,1,https://github.com/yunhaoling,fix mem leak in tlsio_schannel.c,3,[],https://github.com/Azure/azure-c-shared-utility/pull/540,https://github.com/yunhaoling,1,https://github.com/Azure/azure-c-shared-utility/pull/540,"hey team, proposing a PR to fix some memory leak issues in the tlsio_schannel.c, not sure if it's the best fix, but after the fix, there's no memory leak in my test.


potential memory leak:
should tls_io_instance->credential_handle also be freed if (status != SEC_E_OK)?

as mentioned by the schannel doc: When you have finished using the returned credentials, free the memory used by the credentials by calling the FreeCredentialsHandle function.


potential leaking place:

https://github.com/Azure/azure-c-shared-utility/blob/master/adapters/tlsio_schannel.c#L341-L347
    status = AcquireCredentialsHandle(NULL, UNISP_NAME, SECPKG_CRED_OUTBOUND, NULL,
        &auth_data, NULL, NULL, &tls_io_instance->credential_handle, NULL);
    if (status != SEC_E_OK)
    {
        tls_io_instance->tlsio_state = TLSIO_STATE_ERROR;
        indicate_error(tls_io_instance);
    }



definite memory leak: output buffer in multiple InitializeSecurityContext call:

according to the schannel doc: With flag ISC_REQ_ALLOCATE_MEMORY, The [*security package*](../secgloss/s-gly.md) allocates output buffers for you. When you have finished using the output buffers, free them by calling the [FreeContextBuffer](/windows/win32/api/sspi/nf-sspi-freecontextbuffer) function.

in this case, we should call FreeContextBuffer to free the buffer after usage





leaking places:


https://github.com/Azure/azure-c-shared-utility/blob/master/adapters/tlsio_schannel.c#L363-L367
        flags = ISC_REQ_EXTENDED_ERROR | ISC_REQ_STREAM | ISC_REQ_ALLOCATE_MEMORY | ISC_REQ_USE_SUPPLIED_CREDS;
        status = InitializeSecurityContext(&tls_io_instance->credential_handle,
            NULL, tls_io_instance->host_name, ISC_REQ_EXTENDED_ERROR | ISC_REQ_STREAM | ISC_REQ_ALLOCATE_MEMORY | ISC_REQ_USE_SUPPLIED_CREDS, 0, 0, NULL, 0,
            &tls_io_instance->security_context, &security_buffers_desc,
            &context_attributes, NULL);
https://github.com/Azure/azure-c-shared-utility/blob/master/adapters/tlsio_schannel.c#L656-L660
                flags = ISC_REQ_EXTENDED_ERROR | ISC_REQ_STREAM | ISC_REQ_ALLOCATE_MEMORY | ISC_REQ_USE_SUPPLIED_CREDS;
                status = InitializeSecurityContext(&tls_io_instance->credential_handle,
                    &tls_io_instance->security_context, tls_io_instance->host_name, flags, 0, 0, &input_buffers_desc, 0,
                    &tls_io_instance->security_context, &output_buffers_desc,
                    &context_attributes, NULL);
https://github.com/Azure/azure-c-shared-utility/blob/master/adapters/tlsio_schannel.c#L938-L942
                    flags = ISC_REQ_EXTENDED_ERROR | ISC_REQ_STREAM | ISC_REQ_ALLOCATE_MEMORY | ISC_REQ_USE_SUPPLIED_CREDS;
                    status = InitializeSecurityContext(&tls_io_instance->credential_handle,
                        &tls_io_instance->security_context, tls_io_instance->host_name, flags, 0, 0, &input_buffers_desc, 0,
                        &tls_io_instance->security_context, &output_buffers_desc,
                        &context_attributes, NULL);","hey team, proposing a PR to fix some memory leak issues in the tlsio_schannel.c, not sure if it's the best fix, but after the fix, there's no memory leak in my test.


potential memory leak:
should tls_io_instance->credential_handle also be freed if (status != SEC_E_OK)?

as mentioned by the schannel doc: When you have finished using the returned credentials, free the memory used by the credentials by calling the FreeCredentialsHandle function.


potential leaking place:

https://github.com/Azure/azure-c-shared-utility/blob/master/adapters/tlsio_schannel.c#L341-L347
    status = AcquireCredentialsHandle(NULL, UNISP_NAME, SECPKG_CRED_OUTBOUND, NULL,
        &auth_data, NULL, NULL, &tls_io_instance->credential_handle, NULL);
    if (status != SEC_E_OK)
    {
        tls_io_instance->tlsio_state = TLSIO_STATE_ERROR;
        indicate_error(tls_io_instance);
    }



definite memory leak: output buffer in multiple InitializeSecurityContext call:

according to the schannel doc: With flag ISC_REQ_ALLOCATE_MEMORY, The [*security package*](../secgloss/s-gly.md) allocates output buffers for you. When you have finished using the output buffers, free them by calling the [FreeContextBuffer](/windows/win32/api/sspi/nf-sspi-freecontextbuffer) function.

in this case, we should call FreeContextBuffer to free the buffer after usage





leaking places:


https://github.com/Azure/azure-c-shared-utility/blob/master/adapters/tlsio_schannel.c#L363-L367
        flags = ISC_REQ_EXTENDED_ERROR | ISC_REQ_STREAM | ISC_REQ_ALLOCATE_MEMORY | ISC_REQ_USE_SUPPLIED_CREDS;
        status = InitializeSecurityContext(&tls_io_instance->credential_handle,
            NULL, tls_io_instance->host_name, ISC_REQ_EXTENDED_ERROR | ISC_REQ_STREAM | ISC_REQ_ALLOCATE_MEMORY | ISC_REQ_USE_SUPPLIED_CREDS, 0, 0, NULL, 0,
            &tls_io_instance->security_context, &security_buffers_desc,
            &context_attributes, NULL);
https://github.com/Azure/azure-c-shared-utility/blob/master/adapters/tlsio_schannel.c#L656-L660
                flags = ISC_REQ_EXTENDED_ERROR | ISC_REQ_STREAM | ISC_REQ_ALLOCATE_MEMORY | ISC_REQ_USE_SUPPLIED_CREDS;
                status = InitializeSecurityContext(&tls_io_instance->credential_handle,
                    &tls_io_instance->security_context, tls_io_instance->host_name, flags, 0, 0, &input_buffers_desc, 0,
                    &tls_io_instance->security_context, &output_buffers_desc,
                    &context_attributes, NULL);
https://github.com/Azure/azure-c-shared-utility/blob/master/adapters/tlsio_schannel.c#L938-L942
                    flags = ISC_REQ_EXTENDED_ERROR | ISC_REQ_STREAM | ISC_REQ_ALLOCATE_MEMORY | ISC_REQ_USE_SUPPLIED_CREDS;
                    status = InitializeSecurityContext(&tls_io_instance->credential_handle,
                        &tls_io_instance->security_context, tls_io_instance->host_name, flags, 0, 0, &input_buffers_desc, 0,
                        &tls_io_instance->security_context, &output_buffers_desc,
                        &context_attributes, NULL);",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,540,2021-07-19T21:45:19Z,2021-09-01T00:35:49Z,2021-09-01T00:35:49Z,MERGED,True,6,0,1,https://github.com/yunhaoling,fix mem leak in tlsio_schannel.c,3,[],https://github.com/Azure/azure-c-shared-utility/pull/540,https://github.com/yunhaoling,2,https://github.com/Azure/azure-c-shared-utility/pull/540#issuecomment-882882977,"hey team, proposing a PR to fix some memory leak issues in the tlsio_schannel.c, not sure if it's the best fix, but after the fix, there's no memory leak in my test.


potential memory leak:
should tls_io_instance->credential_handle also be freed if (status != SEC_E_OK)?

as mentioned by the schannel doc: When you have finished using the returned credentials, free the memory used by the credentials by calling the FreeCredentialsHandle function.


potential leaking place:

https://github.com/Azure/azure-c-shared-utility/blob/master/adapters/tlsio_schannel.c#L341-L347
    status = AcquireCredentialsHandle(NULL, UNISP_NAME, SECPKG_CRED_OUTBOUND, NULL,
        &auth_data, NULL, NULL, &tls_io_instance->credential_handle, NULL);
    if (status != SEC_E_OK)
    {
        tls_io_instance->tlsio_state = TLSIO_STATE_ERROR;
        indicate_error(tls_io_instance);
    }



definite memory leak: output buffer in multiple InitializeSecurityContext call:

according to the schannel doc: With flag ISC_REQ_ALLOCATE_MEMORY, The [*security package*](../secgloss/s-gly.md) allocates output buffers for you. When you have finished using the output buffers, free them by calling the [FreeContextBuffer](/windows/win32/api/sspi/nf-sspi-freecontextbuffer) function.

in this case, we should call FreeContextBuffer to free the buffer after usage





leaking places:


https://github.com/Azure/azure-c-shared-utility/blob/master/adapters/tlsio_schannel.c#L363-L367
        flags = ISC_REQ_EXTENDED_ERROR | ISC_REQ_STREAM | ISC_REQ_ALLOCATE_MEMORY | ISC_REQ_USE_SUPPLIED_CREDS;
        status = InitializeSecurityContext(&tls_io_instance->credential_handle,
            NULL, tls_io_instance->host_name, ISC_REQ_EXTENDED_ERROR | ISC_REQ_STREAM | ISC_REQ_ALLOCATE_MEMORY | ISC_REQ_USE_SUPPLIED_CREDS, 0, 0, NULL, 0,
            &tls_io_instance->security_context, &security_buffers_desc,
            &context_attributes, NULL);
https://github.com/Azure/azure-c-shared-utility/blob/master/adapters/tlsio_schannel.c#L656-L660
                flags = ISC_REQ_EXTENDED_ERROR | ISC_REQ_STREAM | ISC_REQ_ALLOCATE_MEMORY | ISC_REQ_USE_SUPPLIED_CREDS;
                status = InitializeSecurityContext(&tls_io_instance->credential_handle,
                    &tls_io_instance->security_context, tls_io_instance->host_name, flags, 0, 0, &input_buffers_desc, 0,
                    &tls_io_instance->security_context, &output_buffers_desc,
                    &context_attributes, NULL);
https://github.com/Azure/azure-c-shared-utility/blob/master/adapters/tlsio_schannel.c#L938-L942
                    flags = ISC_REQ_EXTENDED_ERROR | ISC_REQ_STREAM | ISC_REQ_ALLOCATE_MEMORY | ISC_REQ_USE_SUPPLIED_CREDS;
                    status = InitializeSecurityContext(&tls_io_instance->credential_handle,
                        &tls_io_instance->security_context, tls_io_instance->host_name, flags, 0, 0, &input_buffers_desc, 0,
                        &tls_io_instance->security_context, &output_buffers_desc,
                        &context_attributes, NULL);","hey @ewertons @ericwol-msft, could you help review my PR?",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,540,2021-07-19T21:45:19Z,2021-09-01T00:35:49Z,2021-09-01T00:35:49Z,MERGED,True,6,0,1,https://github.com/yunhaoling,fix mem leak in tlsio_schannel.c,3,[],https://github.com/Azure/azure-c-shared-utility/pull/540,https://github.com/yunhaoling,3,https://github.com/Azure/azure-c-shared-utility/pull/540#issuecomment-894374176,"hey team, proposing a PR to fix some memory leak issues in the tlsio_schannel.c, not sure if it's the best fix, but after the fix, there's no memory leak in my test.


potential memory leak:
should tls_io_instance->credential_handle also be freed if (status != SEC_E_OK)?

as mentioned by the schannel doc: When you have finished using the returned credentials, free the memory used by the credentials by calling the FreeCredentialsHandle function.


potential leaking place:

https://github.com/Azure/azure-c-shared-utility/blob/master/adapters/tlsio_schannel.c#L341-L347
    status = AcquireCredentialsHandle(NULL, UNISP_NAME, SECPKG_CRED_OUTBOUND, NULL,
        &auth_data, NULL, NULL, &tls_io_instance->credential_handle, NULL);
    if (status != SEC_E_OK)
    {
        tls_io_instance->tlsio_state = TLSIO_STATE_ERROR;
        indicate_error(tls_io_instance);
    }



definite memory leak: output buffer in multiple InitializeSecurityContext call:

according to the schannel doc: With flag ISC_REQ_ALLOCATE_MEMORY, The [*security package*](../secgloss/s-gly.md) allocates output buffers for you. When you have finished using the output buffers, free them by calling the [FreeContextBuffer](/windows/win32/api/sspi/nf-sspi-freecontextbuffer) function.

in this case, we should call FreeContextBuffer to free the buffer after usage





leaking places:


https://github.com/Azure/azure-c-shared-utility/blob/master/adapters/tlsio_schannel.c#L363-L367
        flags = ISC_REQ_EXTENDED_ERROR | ISC_REQ_STREAM | ISC_REQ_ALLOCATE_MEMORY | ISC_REQ_USE_SUPPLIED_CREDS;
        status = InitializeSecurityContext(&tls_io_instance->credential_handle,
            NULL, tls_io_instance->host_name, ISC_REQ_EXTENDED_ERROR | ISC_REQ_STREAM | ISC_REQ_ALLOCATE_MEMORY | ISC_REQ_USE_SUPPLIED_CREDS, 0, 0, NULL, 0,
            &tls_io_instance->security_context, &security_buffers_desc,
            &context_attributes, NULL);
https://github.com/Azure/azure-c-shared-utility/blob/master/adapters/tlsio_schannel.c#L656-L660
                flags = ISC_REQ_EXTENDED_ERROR | ISC_REQ_STREAM | ISC_REQ_ALLOCATE_MEMORY | ISC_REQ_USE_SUPPLIED_CREDS;
                status = InitializeSecurityContext(&tls_io_instance->credential_handle,
                    &tls_io_instance->security_context, tls_io_instance->host_name, flags, 0, 0, &input_buffers_desc, 0,
                    &tls_io_instance->security_context, &output_buffers_desc,
                    &context_attributes, NULL);
https://github.com/Azure/azure-c-shared-utility/blob/master/adapters/tlsio_schannel.c#L938-L942
                    flags = ISC_REQ_EXTENDED_ERROR | ISC_REQ_STREAM | ISC_REQ_ALLOCATE_MEMORY | ISC_REQ_USE_SUPPLIED_CREDS;
                    status = InitializeSecurityContext(&tls_io_instance->credential_handle,
                        &tls_io_instance->security_context, tls_io_instance->host_name, flags, 0, 0, &input_buffers_desc, 0,
                        &tls_io_instance->security_context, &output_buffers_desc,
                        &context_attributes, NULL);","hey @jspaith @ewertons , do you have time to take a look at the PR?",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,540,2021-07-19T21:45:19Z,2021-09-01T00:35:49Z,2021-09-01T00:35:49Z,MERGED,True,6,0,1,https://github.com/yunhaoling,fix mem leak in tlsio_schannel.c,3,[],https://github.com/Azure/azure-c-shared-utility/pull/540,https://github.com/danewalton,4,https://github.com/Azure/azure-c-shared-utility/pull/540#issuecomment-909751657,"hey team, proposing a PR to fix some memory leak issues in the tlsio_schannel.c, not sure if it's the best fix, but after the fix, there's no memory leak in my test.


potential memory leak:
should tls_io_instance->credential_handle also be freed if (status != SEC_E_OK)?

as mentioned by the schannel doc: When you have finished using the returned credentials, free the memory used by the credentials by calling the FreeCredentialsHandle function.


potential leaking place:

https://github.com/Azure/azure-c-shared-utility/blob/master/adapters/tlsio_schannel.c#L341-L347
    status = AcquireCredentialsHandle(NULL, UNISP_NAME, SECPKG_CRED_OUTBOUND, NULL,
        &auth_data, NULL, NULL, &tls_io_instance->credential_handle, NULL);
    if (status != SEC_E_OK)
    {
        tls_io_instance->tlsio_state = TLSIO_STATE_ERROR;
        indicate_error(tls_io_instance);
    }



definite memory leak: output buffer in multiple InitializeSecurityContext call:

according to the schannel doc: With flag ISC_REQ_ALLOCATE_MEMORY, The [*security package*](../secgloss/s-gly.md) allocates output buffers for you. When you have finished using the output buffers, free them by calling the [FreeContextBuffer](/windows/win32/api/sspi/nf-sspi-freecontextbuffer) function.

in this case, we should call FreeContextBuffer to free the buffer after usage





leaking places:


https://github.com/Azure/azure-c-shared-utility/blob/master/adapters/tlsio_schannel.c#L363-L367
        flags = ISC_REQ_EXTENDED_ERROR | ISC_REQ_STREAM | ISC_REQ_ALLOCATE_MEMORY | ISC_REQ_USE_SUPPLIED_CREDS;
        status = InitializeSecurityContext(&tls_io_instance->credential_handle,
            NULL, tls_io_instance->host_name, ISC_REQ_EXTENDED_ERROR | ISC_REQ_STREAM | ISC_REQ_ALLOCATE_MEMORY | ISC_REQ_USE_SUPPLIED_CREDS, 0, 0, NULL, 0,
            &tls_io_instance->security_context, &security_buffers_desc,
            &context_attributes, NULL);
https://github.com/Azure/azure-c-shared-utility/blob/master/adapters/tlsio_schannel.c#L656-L660
                flags = ISC_REQ_EXTENDED_ERROR | ISC_REQ_STREAM | ISC_REQ_ALLOCATE_MEMORY | ISC_REQ_USE_SUPPLIED_CREDS;
                status = InitializeSecurityContext(&tls_io_instance->credential_handle,
                    &tls_io_instance->security_context, tls_io_instance->host_name, flags, 0, 0, &input_buffers_desc, 0,
                    &tls_io_instance->security_context, &output_buffers_desc,
                    &context_attributes, NULL);
https://github.com/Azure/azure-c-shared-utility/blob/master/adapters/tlsio_schannel.c#L938-L942
                    flags = ISC_REQ_EXTENDED_ERROR | ISC_REQ_STREAM | ISC_REQ_ALLOCATE_MEMORY | ISC_REQ_USE_SUPPLIED_CREDS;
                    status = InitializeSecurityContext(&tls_io_instance->credential_handle,
                        &tls_io_instance->security_context, tls_io_instance->host_name, flags, 0, 0, &input_buffers_desc, 0,
                        &tls_io_instance->security_context, &output_buffers_desc,
                        &context_attributes, NULL);",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,540,2021-07-19T21:45:19Z,2021-09-01T00:35:49Z,2021-09-01T00:35:49Z,MERGED,True,6,0,1,https://github.com/yunhaoling,fix mem leak in tlsio_schannel.c,3,[],https://github.com/Azure/azure-c-shared-utility/pull/540,https://github.com/apps/azure-pipelines,5,https://github.com/Azure/azure-c-shared-utility/pull/540#issuecomment-909751722,"hey team, proposing a PR to fix some memory leak issues in the tlsio_schannel.c, not sure if it's the best fix, but after the fix, there's no memory leak in my test.


potential memory leak:
should tls_io_instance->credential_handle also be freed if (status != SEC_E_OK)?

as mentioned by the schannel doc: When you have finished using the returned credentials, free the memory used by the credentials by calling the FreeCredentialsHandle function.


potential leaking place:

https://github.com/Azure/azure-c-shared-utility/blob/master/adapters/tlsio_schannel.c#L341-L347
    status = AcquireCredentialsHandle(NULL, UNISP_NAME, SECPKG_CRED_OUTBOUND, NULL,
        &auth_data, NULL, NULL, &tls_io_instance->credential_handle, NULL);
    if (status != SEC_E_OK)
    {
        tls_io_instance->tlsio_state = TLSIO_STATE_ERROR;
        indicate_error(tls_io_instance);
    }



definite memory leak: output buffer in multiple InitializeSecurityContext call:

according to the schannel doc: With flag ISC_REQ_ALLOCATE_MEMORY, The [*security package*](../secgloss/s-gly.md) allocates output buffers for you. When you have finished using the output buffers, free them by calling the [FreeContextBuffer](/windows/win32/api/sspi/nf-sspi-freecontextbuffer) function.

in this case, we should call FreeContextBuffer to free the buffer after usage





leaking places:


https://github.com/Azure/azure-c-shared-utility/blob/master/adapters/tlsio_schannel.c#L363-L367
        flags = ISC_REQ_EXTENDED_ERROR | ISC_REQ_STREAM | ISC_REQ_ALLOCATE_MEMORY | ISC_REQ_USE_SUPPLIED_CREDS;
        status = InitializeSecurityContext(&tls_io_instance->credential_handle,
            NULL, tls_io_instance->host_name, ISC_REQ_EXTENDED_ERROR | ISC_REQ_STREAM | ISC_REQ_ALLOCATE_MEMORY | ISC_REQ_USE_SUPPLIED_CREDS, 0, 0, NULL, 0,
            &tls_io_instance->security_context, &security_buffers_desc,
            &context_attributes, NULL);
https://github.com/Azure/azure-c-shared-utility/blob/master/adapters/tlsio_schannel.c#L656-L660
                flags = ISC_REQ_EXTENDED_ERROR | ISC_REQ_STREAM | ISC_REQ_ALLOCATE_MEMORY | ISC_REQ_USE_SUPPLIED_CREDS;
                status = InitializeSecurityContext(&tls_io_instance->credential_handle,
                    &tls_io_instance->security_context, tls_io_instance->host_name, flags, 0, 0, &input_buffers_desc, 0,
                    &tls_io_instance->security_context, &output_buffers_desc,
                    &context_attributes, NULL);
https://github.com/Azure/azure-c-shared-utility/blob/master/adapters/tlsio_schannel.c#L938-L942
                    flags = ISC_REQ_EXTENDED_ERROR | ISC_REQ_STREAM | ISC_REQ_ALLOCATE_MEMORY | ISC_REQ_USE_SUPPLIED_CREDS;
                    status = InitializeSecurityContext(&tls_io_instance->credential_handle,
                        &tls_io_instance->security_context, tls_io_instance->host_name, flags, 0, 0, &input_buffers_desc, 0,
                        &tls_io_instance->security_context, &output_buffers_desc,
                        &context_attributes, NULL);",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,541,2021-08-03T23:57:54Z,2021-08-09T20:31:52Z,2021-08-09T20:31:53Z,MERGED,True,14,6,4,https://github.com/ewertons,Fail to upload long Blob using mbedtls+compact(Issue #1995),7,[],https://github.com/Azure/azure-c-shared-utility/pull/541,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/541,"This is a duplicate of #536, so we can update the PR with the latest changes from master branch.","This is a duplicate of #536, so we can update the PR with the latest changes from master branch.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,542,2021-08-17T17:27:44Z,2021-08-17T18:29:36Z,2021-08-17T18:29:37Z,MERGED,True,11,6,1,https://github.com/momuno,Fix for vcpkg build,2,[],https://github.com/Azure/azure-c-shared-utility/pull/542,https://github.com/momuno,1,https://github.com/Azure/azure-c-shared-utility/pull/542,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,542,2021-08-17T17:27:44Z,2021-08-17T18:29:36Z,2021-08-17T18:29:37Z,MERGED,True,11,6,1,https://github.com/momuno,Fix for vcpkg build,2,[],https://github.com/Azure/azure-c-shared-utility/pull/542,https://github.com/momuno,2,https://github.com/Azure/azure-c-shared-utility/pull/542#issuecomment-900505568,,/azp run integrate-into-repo-C-shared-utility,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,542,2021-08-17T17:27:44Z,2021-08-17T18:29:36Z,2021-08-17T18:29:37Z,MERGED,True,11,6,1,https://github.com/momuno,Fix for vcpkg build,2,[],https://github.com/Azure/azure-c-shared-utility/pull/542,https://github.com/apps/azure-pipelines,3,https://github.com/Azure/azure-c-shared-utility/pull/542#issuecomment-900505653,,Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,543,2021-08-18T00:45:07Z,2021-08-18T01:19:09Z,2021-08-18T01:19:10Z,MERGED,True,2,7,1,https://github.com/momuno,Revert all c-utility install location changes,1,[],https://github.com/Azure/azure-c-shared-utility/pull/543,https://github.com/momuno,1,https://github.com/Azure/azure-c-shared-utility/pull/543,This will update the CMakeLists.txt file to match the install logic at b6a92c4.,This will update the CMakeLists.txt file to match the install logic at b6a92c4.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,545,2021-08-24T19:06:15Z,2021-09-02T20:58:34Z,2021-09-02T20:58:34Z,MERGED,True,1,1,1,https://github.com/ODugas,crt_abstractions.c: fix error management in mallocAndStrcpy,1,[],https://github.com/Azure/azure-c-shared-utility/pull/545,https://github.com/ODugas,1,https://github.com/Azure/azure-c-shared-utility/pull/545,"It can be demonstrated that the errno_t returned by strcpy_s
(which is described as a regular int by the signature) can
and will contain a positive error code. We therefore need to
check for non-zero returned value instead of strictly
negative integers.","It can be demonstrated that the errno_t returned by strcpy_s
(which is described as a regular int by the signature) can
and will contain a positive error code. We therefore need to
check for non-zero returned value instead of strictly
negative integers.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,545,2021-08-24T19:06:15Z,2021-09-02T20:58:34Z,2021-09-02T20:58:34Z,MERGED,True,1,1,1,https://github.com/ODugas,crt_abstractions.c: fix error management in mallocAndStrcpy,1,[],https://github.com/Azure/azure-c-shared-utility/pull/545,https://github.com/danewalton,2,https://github.com/Azure/azure-c-shared-utility/pull/545#issuecomment-909763642,"It can be demonstrated that the errno_t returned by strcpy_s
(which is described as a regular int by the signature) can
and will contain a positive error code. We therefore need to
check for non-zero returned value instead of strictly
negative integers.","👍
From the docs here: https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2013/td1esda9(v=vs.120)

Zero if successful; otherwise, an error.

Do you mind updating and rebasing your changes?",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,545,2021-08-24T19:06:15Z,2021-09-02T20:58:34Z,2021-09-02T20:58:34Z,MERGED,True,1,1,1,https://github.com/ODugas,crt_abstractions.c: fix error management in mallocAndStrcpy,1,[],https://github.com/Azure/azure-c-shared-utility/pull/545,https://github.com/ODugas,3,https://github.com/Azure/azure-c-shared-utility/pull/545#issuecomment-911621610,"It can be demonstrated that the errno_t returned by strcpy_s
(which is described as a regular int by the signature) can
and will contain a positive error code. We therefore need to
check for non-zero returned value instead of strictly
negative integers.","@ericwol-msft  @danewalton  I updated and rebased my changes. I'll stay nearby, but I believe this is all I need to do for you to merge this, right?
Thanks a lot.",True,{'THUMBS_UP': ['https://github.com/danewalton']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,545,2021-08-24T19:06:15Z,2021-09-02T20:58:34Z,2021-09-02T20:58:34Z,MERGED,True,1,1,1,https://github.com/ODugas,crt_abstractions.c: fix error management in mallocAndStrcpy,1,[],https://github.com/Azure/azure-c-shared-utility/pull/545,https://github.com/danewalton,4,https://github.com/Azure/azure-c-shared-utility/pull/545#issuecomment-911763374,"It can be demonstrated that the errno_t returned by strcpy_s
(which is described as a regular int by the signature) can
and will contain a positive error code. We therefore need to
check for non-zero returned value instead of strictly
negative integers.",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,545,2021-08-24T19:06:15Z,2021-09-02T20:58:34Z,2021-09-02T20:58:34Z,MERGED,True,1,1,1,https://github.com/ODugas,crt_abstractions.c: fix error management in mallocAndStrcpy,1,[],https://github.com/Azure/azure-c-shared-utility/pull/545,https://github.com/apps/azure-pipelines,5,https://github.com/Azure/azure-c-shared-utility/pull/545#issuecomment-911763556,"It can be demonstrated that the errno_t returned by strcpy_s
(which is described as a regular int by the signature) can
and will contain a positive error code. We therefore need to
check for non-zero returned value instead of strictly
negative integers.",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,545,2021-08-24T19:06:15Z,2021-09-02T20:58:34Z,2021-09-02T20:58:34Z,MERGED,True,1,1,1,https://github.com/ODugas,crt_abstractions.c: fix error management in mallocAndStrcpy,1,[],https://github.com/Azure/azure-c-shared-utility/pull/545,https://github.com/danewalton,6,https://github.com/Azure/azure-c-shared-utility/pull/545#issuecomment-911899910,"It can be demonstrated that the errno_t returned by strcpy_s
(which is described as a regular int by the signature) can
and will contain a positive error code. We therefore need to
check for non-zero returned value instead of strictly
negative integers.",@ODugas sorry about this are you able to do it once more (rebase master)? It says it's still out of date.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,546,2021-08-25T11:05:29Z,2022-04-21T02:07:03Z,2022-05-06T13:39:01Z,CLOSED,False,7,0,1,https://github.com/maallahatem,fix memory leak mbedtls + curl,3,[],https://github.com/Azure/azure-c-shared-utility/pull/546,https://github.com/maallahatem,1,https://github.com/Azure/azure-c-shared-utility/pull/546,"This pull request fixes a potential memory leak when using curl with mbedlts
==32503== HEAP SUMMARY:
==32503==     in use at exit: 1,014 bytes in 3 blocks
==32503==   total heap usage: 33,097 allocs, 33,094 frees, 3,034,693 bytes allocated
==32503== 
==32503== 24 bytes in 1 blocks are definitely lost in loss record 1 of 3
==32503==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==32503==    by 0x4912B4B: ??? (in /usr/lib/x86_64-linux-gnu/libmbedtls.so.2.16.3)
==32503==    by 0x1BDB58: ssl_ctx_callback (httpapi_curl.c:303)
==32503==    by 0x48D5B89: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48D713E: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48D7FAE: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x4883295: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x4884D12: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48A58EC: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48A6980: curl_multi_perform (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x489CDFA: curl_easy_perform (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x1C085D: HTTPAPI_ExecuteRequest (httpapi_curl.c:645)
==32503== 
==32503== LEAK SUMMARY:
==32503==    definitely lost: 24 bytes in 1 blocks
==32503==    indirectly lost: 0 bytes in 0 blocks
==32503==      possibly lost: 0 bytes in 0 blocks
==32503==    still reachable: 990 bytes in 2 blocks
==32503==         suppressed: 0 bytes in 0 blocks","This pull request fixes a potential memory leak when using curl with mbedlts
==32503== HEAP SUMMARY:
==32503==     in use at exit: 1,014 bytes in 3 blocks
==32503==   total heap usage: 33,097 allocs, 33,094 frees, 3,034,693 bytes allocated
==32503== 
==32503== 24 bytes in 1 blocks are definitely lost in loss record 1 of 3
==32503==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==32503==    by 0x4912B4B: ??? (in /usr/lib/x86_64-linux-gnu/libmbedtls.so.2.16.3)
==32503==    by 0x1BDB58: ssl_ctx_callback (httpapi_curl.c:303)
==32503==    by 0x48D5B89: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48D713E: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48D7FAE: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x4883295: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x4884D12: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48A58EC: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48A6980: curl_multi_perform (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x489CDFA: curl_easy_perform (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x1C085D: HTTPAPI_ExecuteRequest (httpapi_curl.c:645)
==32503== 
==32503== LEAK SUMMARY:
==32503==    definitely lost: 24 bytes in 1 blocks
==32503==    indirectly lost: 0 bytes in 0 blocks
==32503==      possibly lost: 0 bytes in 0 blocks
==32503==    still reachable: 990 bytes in 2 blocks
==32503==         suppressed: 0 bytes in 0 blocks",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,546,2021-08-25T11:05:29Z,2022-04-21T02:07:03Z,2022-05-06T13:39:01Z,CLOSED,False,7,0,1,https://github.com/maallahatem,fix memory leak mbedtls + curl,3,[],https://github.com/Azure/azure-c-shared-utility/pull/546,https://github.com/momuno,2,https://github.com/Azure/azure-c-shared-utility/pull/546#issuecomment-970681209,"This pull request fixes a potential memory leak when using curl with mbedlts
==32503== HEAP SUMMARY:
==32503==     in use at exit: 1,014 bytes in 3 blocks
==32503==   total heap usage: 33,097 allocs, 33,094 frees, 3,034,693 bytes allocated
==32503== 
==32503== 24 bytes in 1 blocks are definitely lost in loss record 1 of 3
==32503==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==32503==    by 0x4912B4B: ??? (in /usr/lib/x86_64-linux-gnu/libmbedtls.so.2.16.3)
==32503==    by 0x1BDB58: ssl_ctx_callback (httpapi_curl.c:303)
==32503==    by 0x48D5B89: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48D713E: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48D7FAE: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x4883295: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x4884D12: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48A58EC: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48A6980: curl_multi_perform (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x489CDFA: curl_easy_perform (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x1C085D: HTTPAPI_ExecuteRequest (httpapi_curl.c:645)
==32503== 
==32503== LEAK SUMMARY:
==32503==    definitely lost: 24 bytes in 1 blocks
==32503==    indirectly lost: 0 bytes in 0 blocks
==32503==      possibly lost: 0 bytes in 0 blocks
==32503==    still reachable: 990 bytes in 2 blocks
==32503==         suppressed: 0 bytes in 0 blocks","@maallahatem There are a few scenarios where the final else will never be reached so the ssl_ctx will not be stored as intended.  I propose it be stored first thing when entering the USE_MBEDTLS block, since we don't want to leak that memory regardless of what else happens. Thoughts?",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,546,2021-08-25T11:05:29Z,2022-04-21T02:07:03Z,2022-05-06T13:39:01Z,CLOSED,False,7,0,1,https://github.com/maallahatem,fix memory leak mbedtls + curl,3,[],https://github.com/Azure/azure-c-shared-utility/pull/546,https://github.com/momuno,3,https://github.com/Azure/azure-c-shared-utility/pull/546#issuecomment-984259956,"This pull request fixes a potential memory leak when using curl with mbedlts
==32503== HEAP SUMMARY:
==32503==     in use at exit: 1,014 bytes in 3 blocks
==32503==   total heap usage: 33,097 allocs, 33,094 frees, 3,034,693 bytes allocated
==32503== 
==32503== 24 bytes in 1 blocks are definitely lost in loss record 1 of 3
==32503==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==32503==    by 0x4912B4B: ??? (in /usr/lib/x86_64-linux-gnu/libmbedtls.so.2.16.3)
==32503==    by 0x1BDB58: ssl_ctx_callback (httpapi_curl.c:303)
==32503==    by 0x48D5B89: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48D713E: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48D7FAE: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x4883295: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x4884D12: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48A58EC: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48A6980: curl_multi_perform (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x489CDFA: curl_easy_perform (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x1C085D: HTTPAPI_ExecuteRequest (httpapi_curl.c:645)
==32503== 
==32503== LEAK SUMMARY:
==32503==    definitely lost: 24 bytes in 1 blocks
==32503==    indirectly lost: 0 bytes in 0 blocks
==32503==      possibly lost: 0 bytes in 0 blocks
==32503==    still reachable: 990 bytes in 2 blocks
==32503==         suppressed: 0 bytes in 0 blocks",Hi @maallahatem.  Have you been able to review my proposal for the change?  Thanks.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,546,2021-08-25T11:05:29Z,2022-04-21T02:07:03Z,2022-05-06T13:39:01Z,CLOSED,False,7,0,1,https://github.com/maallahatem,fix memory leak mbedtls + curl,3,[],https://github.com/Azure/azure-c-shared-utility/pull/546,https://github.com/maallahatem,4,https://github.com/Azure/azure-c-shared-utility/pull/546#issuecomment-984491137,"This pull request fixes a potential memory leak when using curl with mbedlts
==32503== HEAP SUMMARY:
==32503==     in use at exit: 1,014 bytes in 3 blocks
==32503==   total heap usage: 33,097 allocs, 33,094 frees, 3,034,693 bytes allocated
==32503== 
==32503== 24 bytes in 1 blocks are definitely lost in loss record 1 of 3
==32503==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==32503==    by 0x4912B4B: ??? (in /usr/lib/x86_64-linux-gnu/libmbedtls.so.2.16.3)
==32503==    by 0x1BDB58: ssl_ctx_callback (httpapi_curl.c:303)
==32503==    by 0x48D5B89: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48D713E: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48D7FAE: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x4883295: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x4884D12: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48A58EC: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48A6980: curl_multi_perform (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x489CDFA: curl_easy_perform (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x1C085D: HTTPAPI_ExecuteRequest (httpapi_curl.c:645)
==32503== 
==32503== LEAK SUMMARY:
==32503==    definitely lost: 24 bytes in 1 blocks
==32503==    indirectly lost: 0 bytes in 0 blocks
==32503==      possibly lost: 0 bytes in 0 blocks
==32503==    still reachable: 990 bytes in 2 blocks
==32503==         suppressed: 0 bytes in 0 blocks","Hi @momuno , sorry to better late in my answer
Yes, you can go ahead with your proposal :)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,546,2021-08-25T11:05:29Z,2022-04-21T02:07:03Z,2022-05-06T13:39:01Z,CLOSED,False,7,0,1,https://github.com/maallahatem,fix memory leak mbedtls + curl,3,[],https://github.com/Azure/azure-c-shared-utility/pull/546,https://github.com/momuno,5,https://github.com/Azure/azure-c-shared-utility/pull/546#issuecomment-984969675,"This pull request fixes a potential memory leak when using curl with mbedlts
==32503== HEAP SUMMARY:
==32503==     in use at exit: 1,014 bytes in 3 blocks
==32503==   total heap usage: 33,097 allocs, 33,094 frees, 3,034,693 bytes allocated
==32503== 
==32503== 24 bytes in 1 blocks are definitely lost in loss record 1 of 3
==32503==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==32503==    by 0x4912B4B: ??? (in /usr/lib/x86_64-linux-gnu/libmbedtls.so.2.16.3)
==32503==    by 0x1BDB58: ssl_ctx_callback (httpapi_curl.c:303)
==32503==    by 0x48D5B89: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48D713E: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48D7FAE: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x4883295: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x4884D12: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48A58EC: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48A6980: curl_multi_perform (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x489CDFA: curl_easy_perform (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x1C085D: HTTPAPI_ExecuteRequest (httpapi_curl.c:645)
==32503== 
==32503== LEAK SUMMARY:
==32503==    definitely lost: 24 bytes in 1 blocks
==32503==    indirectly lost: 0 bytes in 0 blocks
==32503==      possibly lost: 0 bytes in 0 blocks
==32503==    still reachable: 990 bytes in 2 blocks
==32503==         suppressed: 0 bytes in 0 blocks","Hi @momuno , sorry to better late in my answer Yes, you can go ahead with your proposal :)

Thanks @maallahatem, appreciate your work on this.  I actually don't agree with my proposal anymore so am going to rework it haha.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,546,2021-08-25T11:05:29Z,2022-04-21T02:07:03Z,2022-05-06T13:39:01Z,CLOSED,False,7,0,1,https://github.com/maallahatem,fix memory leak mbedtls + curl,3,[],https://github.com/Azure/azure-c-shared-utility/pull/546,https://github.com/momuno,6,https://github.com/Azure/azure-c-shared-utility/pull/546#issuecomment-1104632382,"This pull request fixes a potential memory leak when using curl with mbedlts
==32503== HEAP SUMMARY:
==32503==     in use at exit: 1,014 bytes in 3 blocks
==32503==   total heap usage: 33,097 allocs, 33,094 frees, 3,034,693 bytes allocated
==32503== 
==32503== 24 bytes in 1 blocks are definitely lost in loss record 1 of 3
==32503==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==32503==    by 0x4912B4B: ??? (in /usr/lib/x86_64-linux-gnu/libmbedtls.so.2.16.3)
==32503==    by 0x1BDB58: ssl_ctx_callback (httpapi_curl.c:303)
==32503==    by 0x48D5B89: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48D713E: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48D7FAE: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x4883295: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x4884D12: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48A58EC: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48A6980: curl_multi_perform (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x489CDFA: curl_easy_perform (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x1C085D: HTTPAPI_ExecuteRequest (httpapi_curl.c:645)
==32503== 
==32503== LEAK SUMMARY:
==32503==    definitely lost: 24 bytes in 1 blocks
==32503==    indirectly lost: 0 bytes in 0 blocks
==32503==      possibly lost: 0 bytes in 0 blocks
==32503==    still reachable: 990 bytes in 2 blocks
==32503==         suppressed: 0 bytes in 0 blocks",Closing to create a separate PR.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,546,2021-08-25T11:05:29Z,2022-04-21T02:07:03Z,2022-05-06T13:39:01Z,CLOSED,False,7,0,1,https://github.com/maallahatem,fix memory leak mbedtls + curl,3,[],https://github.com/Azure/azure-c-shared-utility/pull/546,https://github.com/momuno,7,https://github.com/Azure/azure-c-shared-utility/pull/546#issuecomment-1119178257,"This pull request fixes a potential memory leak when using curl with mbedlts
==32503== HEAP SUMMARY:
==32503==     in use at exit: 1,014 bytes in 3 blocks
==32503==   total heap usage: 33,097 allocs, 33,094 frees, 3,034,693 bytes allocated
==32503== 
==32503== 24 bytes in 1 blocks are definitely lost in loss record 1 of 3
==32503==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==32503==    by 0x4912B4B: ??? (in /usr/lib/x86_64-linux-gnu/libmbedtls.so.2.16.3)
==32503==    by 0x1BDB58: ssl_ctx_callback (httpapi_curl.c:303)
==32503==    by 0x48D5B89: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48D713E: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48D7FAE: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x4883295: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x4884D12: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48A58EC: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48A6980: curl_multi_perform (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x489CDFA: curl_easy_perform (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x1C085D: HTTPAPI_ExecuteRequest (httpapi_curl.c:645)
==32503== 
==32503== LEAK SUMMARY:
==32503==    definitely lost: 24 bytes in 1 blocks
==32503==    indirectly lost: 0 bytes in 0 blocks
==32503==      possibly lost: 0 bytes in 0 blocks
==32503==    still reachable: 990 bytes in 2 blocks
==32503==         suppressed: 0 bytes in 0 blocks","Hi @maallahatem.  I did further investigation and was able to reproduce the memory leak.  When using cURL with OpenSSL (this can occur by directly using the curl installed via apt-get) and the C SDK with mbedTLS, the memory leak occurred as you describe above.  However, when I downloaded and configured cURL from source to use mbedTLS, there was no leak.
I have updated the httpapi_curl.c file to check for valid and matching TLS platforms between cURL and the CSDK.
#595
Thank you for your contribution and bringing this issue to our attention!",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,546,2021-08-25T11:05:29Z,2022-04-21T02:07:03Z,2022-05-06T13:39:01Z,CLOSED,False,7,0,1,https://github.com/maallahatem,fix memory leak mbedtls + curl,3,[],https://github.com/Azure/azure-c-shared-utility/pull/546,https://github.com/hatem-maalla,8,https://github.com/Azure/azure-c-shared-utility/pull/546#issuecomment-1119634120,"This pull request fixes a potential memory leak when using curl with mbedlts
==32503== HEAP SUMMARY:
==32503==     in use at exit: 1,014 bytes in 3 blocks
==32503==   total heap usage: 33,097 allocs, 33,094 frees, 3,034,693 bytes allocated
==32503== 
==32503== 24 bytes in 1 blocks are definitely lost in loss record 1 of 3
==32503==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==32503==    by 0x4912B4B: ??? (in /usr/lib/x86_64-linux-gnu/libmbedtls.so.2.16.3)
==32503==    by 0x1BDB58: ssl_ctx_callback (httpapi_curl.c:303)
==32503==    by 0x48D5B89: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48D713E: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48D7FAE: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x4883295: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x4884D12: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48A58EC: ??? (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x48A6980: curl_multi_perform (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x489CDFA: curl_easy_perform (in /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0)
==32503==    by 0x1C085D: HTTPAPI_ExecuteRequest (httpapi_curl.c:645)
==32503== 
==32503== LEAK SUMMARY:
==32503==    definitely lost: 24 bytes in 1 blocks
==32503==    indirectly lost: 0 bytes in 0 blocks
==32503==      possibly lost: 0 bytes in 0 blocks
==32503==    still reachable: 990 bytes in 2 blocks
==32503==         suppressed: 0 bytes in 0 blocks","Hi @momuno , Yes I see now the cause of this problem.
I think the fix will improve the robustness of the code against unexpected client side behavior.
Thanks a lot for your help.",True,{'THUMBS_UP': ['https://github.com/momuno']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,548,2021-08-30T22:34:45Z,2021-11-04T23:54:06Z,2021-11-04T23:54:06Z,CLOSED,False,58,0,2,https://github.com/fz-lyu,[Azure Sphere] add openssl options for setting client signature algorithms,1,[],https://github.com/Azure/azure-c-shared-utility/pull/548,https://github.com/fz-lyu,1,https://github.com/Azure/azure-c-shared-utility/pull/548,#547,#547,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,548,2021-08-30T22:34:45Z,2021-11-04T23:54:06Z,2021-11-04T23:54:06Z,CLOSED,False,58,0,2,https://github.com/fz-lyu,[Azure Sphere] add openssl options for setting client signature algorithms,1,[],https://github.com/Azure/azure-c-shared-utility/pull/548,https://github.com/CIPop,2,https://github.com/Azure/azure-c-shared-utility/pull/548#issuecomment-961520796,#547,"As discussed offline, we don't recommend changing OpenSSL defaults and this change is not meeting our feature bar at this time.
We support full TLS stack customization within our new Embedded C SDK.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,549,2021-09-01T00:14:03Z,2021-09-02T18:31:49Z,2021-09-02T18:31:49Z,MERGED,True,1,1,1,https://github.com/danewalton,update log,4,[],https://github.com/Azure/azure-c-shared-utility/pull/549,https://github.com/danewalton,1,https://github.com/Azure/azure-c-shared-utility/pull/549,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,552,2021-09-02T19:03:22Z,2021-09-02T21:23:31Z,2021-09-02T21:23:32Z,MERGED,True,1,1,1,https://github.com/danewalton,fix build break for gcc11,2,[],https://github.com/Azure/azure-c-shared-utility/pull/552,https://github.com/danewalton,1,https://github.com/Azure/azure-c-shared-utility/pull/552,"Fixes a ""may be uninitialized"" error.","Fixes a ""may be uninitialized"" error.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,553,2021-09-03T19:42:55Z,2021-09-03T20:22:33Z,2021-09-03T20:22:34Z,MERGED,True,8,8,1,https://github.com/danewalton,fix possible overflow warning gcc11,1,[],https://github.com/Azure/azure-c-shared-utility/pull/553,https://github.com/danewalton,1,https://github.com/Azure/azure-c-shared-utility/pull/553,With this build is clean on GCC 11.1+ using the -Wno-array-bounds flag.,With this build is clean on GCC 11.1+ using the -Wno-array-bounds flag.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,555,2021-09-04T01:40:58Z,2021-09-08T23:12:40Z,2021-09-09T02:27:57Z,MERGED,True,18,15,2,https://github.com/momuno,Vcpkg CURL fix for build,8,[],https://github.com/Azure/azure-c-shared-utility/pull/555,https://github.com/momuno,1,https://github.com/Azure/azure-c-shared-utility/pull/555,"This change updates how CURL is found for vcpkg.  It now checks CMake's find_package() before trying pkg-config.  This change is needed for vcpkg build.
As a result, the Config.cmake file must forward its dependency on CURL downstream.","This change updates how CURL is found for vcpkg.  It now checks CMake's find_package() before trying pkg-config.  This change is needed for vcpkg build.
As a result, the Config.cmake file must forward its dependency on CURL downstream.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,555,2021-09-04T01:40:58Z,2021-09-08T23:12:40Z,2021-09-09T02:27:57Z,MERGED,True,18,15,2,https://github.com/momuno,Vcpkg CURL fix for build,8,[],https://github.com/Azure/azure-c-shared-utility/pull/555,https://github.com/momuno,2,https://github.com/Azure/azure-c-shared-utility/pull/555#issuecomment-915520395,"This change updates how CURL is found for vcpkg.  It now checks CMake's find_package() before trying pkg-config.  This change is needed for vcpkg build.
As a result, the Config.cmake file must forward its dependency on CURL downstream.",I think this most recent change will work.  I am isolating the change needed for x64-linux to compile to UNIX.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,557,2021-09-10T20:50:24Z,2021-09-11T02:10:30Z,2021-09-11T02:10:31Z,MERGED,True,8,7,3,https://github.com/danewalton,change linux time to use int64_t,5,[],https://github.com/Azure/azure-c-shared-utility/pull/557,https://github.com/danewalton,1,https://github.com/Azure/azure-c-shared-utility/pull/557,"fixes #526
time_t is platform dependent and therefore size could be 32 bits. Milliseconds overflow after about 25 days with 32 bit so this increases the ms time to be 64 bits wide.","fixes #526
time_t is platform dependent and therefore size could be 32 bits. Milliseconds overflow after about 25 days with 32 bit so this increases the ms time to be 64 bits wide.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,557,2021-09-10T20:50:24Z,2021-09-11T02:10:30Z,2021-09-11T02:10:31Z,MERGED,True,8,7,3,https://github.com/danewalton,change linux time to use int64_t,5,[],https://github.com/Azure/azure-c-shared-utility/pull/557,https://github.com/ericwol-msft,2,https://github.com/Azure/azure-c-shared-utility/pull/557#issuecomment-917221722,"fixes #526
time_t is platform dependent and therefore size could be 32 bits. Milliseconds overflow after about 25 days with 32 bit so this increases the ms time to be 64 bits wide.",#526,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,557,2021-09-10T20:50:24Z,2021-09-11T02:10:30Z,2021-09-11T02:10:31Z,MERGED,True,8,7,3,https://github.com/danewalton,change linux time to use int64_t,5,[],https://github.com/Azure/azure-c-shared-utility/pull/557,https://github.com/danewalton,3,https://github.com/Azure/azure-c-shared-utility/pull/557#issuecomment-917317949,"fixes #526
time_t is platform dependent and therefore size could be 32 bits. Milliseconds overflow after about 25 days with 32 bit so this increases the ms time to be 64 bits wide.",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,557,2021-09-10T20:50:24Z,2021-09-11T02:10:30Z,2021-09-11T02:10:31Z,MERGED,True,8,7,3,https://github.com/danewalton,change linux time to use int64_t,5,[],https://github.com/Azure/azure-c-shared-utility/pull/557,https://github.com/apps/azure-pipelines,4,https://github.com/Azure/azure-c-shared-utility/pull/557#issuecomment-917317983,"fixes #526
time_t is platform dependent and therefore size could be 32 bits. Milliseconds overflow after about 25 days with 32 bit so this increases the ms time to be 64 bits wide.",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,558,2021-09-10T21:40:03Z,2021-09-15T01:34:10Z,2021-09-15T01:34:11Z,MERGED,True,22,643,4,https://github.com/ericwol-msft,Use PAL time functions in the console logger,7,[],https://github.com/Azure/azure-c-shared-utility/pull/558,https://github.com/ericwol-msft,1,https://github.com/Azure/azure-c-shared-utility/pull/558,fixes #556,fixes #556,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,558,2021-09-10T21:40:03Z,2021-09-15T01:34:10Z,2021-09-15T01:34:11Z,MERGED,True,22,643,4,https://github.com/ericwol-msft,Use PAL time functions in the console logger,7,[],https://github.com/Azure/azure-c-shared-utility/pull/558,https://github.com/ericwol-msft,2,https://github.com/Azure/azure-c-shared-utility/pull/558#issuecomment-917228728,fixes #556,"fixes #556
(Dane: I put it in the original message to auto link)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,559,2021-09-11T01:52:46Z,2021-10-29T22:04:34Z,2021-10-29T22:04:34Z,CLOSED,False,18,11,1,https://github.com/danewalton,Change Apple time for performance on newer versions,3,[],https://github.com/Azure/azure-c-shared-utility/pull/559,https://github.com/danewalton,1,https://github.com/Azure/azure-c-shared-utility/pull/559,"This incorporates the clock_gettime() function which is implemented in iOS 10.0+ and MacOS 10.12+. CLOCK_REALTIME is selected here instead of CLOCK_MONOTONIC since monotonic fails UT.
Original issue here: #525","This incorporates the clock_gettime() function which is implemented in iOS 10.0+ and MacOS 10.12+. CLOCK_REALTIME is selected here instead of CLOCK_MONOTONIC since monotonic fails UT.
Original issue here: #525",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,559,2021-09-11T01:52:46Z,2021-10-29T22:04:34Z,2021-10-29T22:04:34Z,CLOSED,False,18,11,1,https://github.com/danewalton,Change Apple time for performance on newer versions,3,[],https://github.com/Azure/azure-c-shared-utility/pull/559,https://github.com/jspaith,2,https://github.com/Azure/azure-c-shared-utility/pull/559#issuecomment-954309217,"This incorporates the clock_gettime() function which is implemented in iOS 10.0+ and MacOS 10.12+. CLOCK_REALTIME is selected here instead of CLOCK_MONOTONIC since monotonic fails UT.
Original issue here: #525","@danewalton  -
1 - trying to review this one, but I'm having problem finding what I consider definitive documentation RE __builtin_available.  I get the gist of this but ideally I'd stare at its reference docs to understand if there's any quirks in it prior to a sign off.  Any pointers?
2 - The Stackoverflow sites I was seeing around this e.g. this has a ""macOS"" in the __builtin_available check.  Will ""iOS 10"" we have here behave functionally the same?",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,559,2021-09-11T01:52:46Z,2021-10-29T22:04:34Z,2021-10-29T22:04:34Z,CLOSED,False,18,11,1,https://github.com/danewalton,Change Apple time for performance on newer versions,3,[],https://github.com/Azure/azure-c-shared-utility/pull/559,https://github.com/danewalton,3,https://github.com/Azure/azure-c-shared-utility/pull/559#issuecomment-955073458,"This incorporates the clock_gettime() function which is implemented in iOS 10.0+ and MacOS 10.12+. CLOCK_REALTIME is selected here instead of CLOCK_MONOTONIC since monotonic fails UT.
Original issue here: #525",@jspaith Sorry about that I should probably have closed this. Latest update in the issue is I didn't see the same performance problem the customer was originally seeing. So I'll hold off on the change.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,560,2021-09-16T22:34:20Z,2021-09-17T02:00:03Z,2021-09-17T02:00:04Z,MERGED,True,4,1,2,https://github.com/danewalton,use get_difftime,2,[],https://github.com/Azure/azure-c-shared-utility/pull/560,https://github.com/danewalton,1,https://github.com/Azure/azure-c-shared-utility/pull/560,closes #328,closes #328,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,560,2021-09-16T22:34:20Z,2021-09-17T02:00:03Z,2021-09-17T02:00:04Z,MERGED,True,4,1,2,https://github.com/danewalton,use get_difftime,2,[],https://github.com/Azure/azure-c-shared-utility/pull/560,https://github.com/danewalton,2,https://github.com/Azure/azure-c-shared-utility/pull/560#issuecomment-921304390,closes #328,/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,560,2021-09-16T22:34:20Z,2021-09-17T02:00:03Z,2021-09-17T02:00:04Z,MERGED,True,4,1,2,https://github.com/danewalton,use get_difftime,2,[],https://github.com/Azure/azure-c-shared-utility/pull/560,https://github.com/apps/azure-pipelines,3,https://github.com/Azure/azure-c-shared-utility/pull/560#issuecomment-921304454,closes #328,Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,561,2021-09-17T02:05:37Z,2021-09-20T20:47:42Z,2021-09-20T20:47:43Z,MERGED,True,8,6,2,https://github.com/danewalton,fix warnings in socketio mbed,3,[],https://github.com/Azure/azure-c-shared-utility/pull/561,https://github.com/danewalton,1,https://github.com/Azure/azure-c-shared-utility/pull/561,"closes #508
also unify windows socket send casting to other implementations.","closes #508
also unify windows socket send casting to other implementations.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,562,2021-09-28T17:46:18Z,2021-09-28T17:46:35Z,2021-09-28T17:46:35Z,CLOSED,False,4112,3960,61,https://github.com/amitkumarshukla,Users/amishu/crl download fix,164,[],https://github.com/Azure/azure-c-shared-utility/pull/562,https://github.com/amitkumarshukla,1,https://github.com/Azure/azure-c-shared-utility/pull/562,Putting lock to synchronize multiple threaded callback,Putting lock to synchronize multiple threaded callback,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,563,2021-10-12T18:40:48Z,2021-10-12T20:55:57Z,2021-10-12T20:55:58Z,MERGED,True,1,1,1,https://github.com/momuno,Remerge header install location change,1,['bug'],https://github.com/Azure/azure-c-shared-utility/pull/563,https://github.com/momuno,1,https://github.com/Azure/azure-c-shared-utility/pull/563,"Re-merging change found in PR #531, original solution to issue #530.
However, this solution caused the vcpkg build to fail.  To fix this failure, a patch will need to be applied in the vcpkg repo to azure-c-shared-utility/CMakeLists.txt reverting this change.  This will need to occur with the next vcpkg release that contains this PR merge.
See below:
diff --git a/CMakeLists.txt b/CMakeLists.txt
index ddcbaf57..1cd00da7 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -688,7 +688,7 @@ install (TARGETS ${targets} EXPORT aziotsharedutilTargets
     RUNTIME DESTINATION ${CMAKE_INSTALL_LIBDIR}/../bin
     INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/azureiot
 )
-install (FILES ${source_h_files} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/azure_c_shared_utility)
+install (FILES ${source_h_files} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/azureiot/azure_c_shared_utility)
 install (FILES ${micromock_h_files_full_path} ${INSTALL_H_FILES} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/azureiot)



To add the patch to vcpkg, add the patch file to the ports/azure-c-shared-utility directory.  Update the corresponding portfile.cmake to include reference to the new patch for both master and public preview logic branches.
E.g.:
        PATCHES
            fix-utilityFunctions-conditions.patch
            disable-error.patch
            install-location.patch","Re-merging change found in PR #531, original solution to issue #530.
However, this solution caused the vcpkg build to fail.  To fix this failure, a patch will need to be applied in the vcpkg repo to azure-c-shared-utility/CMakeLists.txt reverting this change.  This will need to occur with the next vcpkg release that contains this PR merge.
See below:
diff --git a/CMakeLists.txt b/CMakeLists.txt
index ddcbaf57..1cd00da7 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -688,7 +688,7 @@ install (TARGETS ${targets} EXPORT aziotsharedutilTargets
     RUNTIME DESTINATION ${CMAKE_INSTALL_LIBDIR}/../bin
     INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/azureiot
 )
-install (FILES ${source_h_files} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/azure_c_shared_utility)
+install (FILES ${source_h_files} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/azureiot/azure_c_shared_utility)
 install (FILES ${micromock_h_files_full_path} ${INSTALL_H_FILES} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/azureiot)



To add the patch to vcpkg, add the patch file to the ports/azure-c-shared-utility directory.  Update the corresponding portfile.cmake to include reference to the new patch for both master and public preview logic branches.
E.g.:
        PATCHES
            fix-utilityFunctions-conditions.patch
            disable-error.patch
            install-location.patch",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,564,2021-10-29T16:01:49Z,2021-11-01T22:17:12Z,2021-11-01T22:17:12Z,MERGED,True,1,1,1,https://github.com/maallahatem,fix crash wiht invalid proxy configuration,1,[],https://github.com/Azure/azure-c-shared-utility/pull/564,https://github.com/maallahatem,1,https://github.com/Azure/azure-c-shared-utility/pull/564,This patch fixes a crash when trying to connect iothub with invalid proxy configuration,This patch fixes a crash when trying to connect iothub with invalid proxy configuration,True,{'HEART': ['https://github.com/ewertons']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,564,2021-10-29T16:01:49Z,2021-11-01T22:17:12Z,2021-11-01T22:17:12Z,MERGED,True,1,1,1,https://github.com/maallahatem,fix crash wiht invalid proxy configuration,1,[],https://github.com/Azure/azure-c-shared-utility/pull/564,https://github.com/ewertons,2,https://github.com/Azure/azure-c-shared-utility/pull/564#issuecomment-955037904,This patch fixes a crash when trying to connect iothub with invalid proxy configuration,"That's pretty bad that this bug was out there. Thanks for the catch and even more for the proposed fix! I'm just checking on the unit tests for that, but should be good to go soon.",True,{'THUMBS_UP': ['https://github.com/maallahatem']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,567,2021-10-30T05:26:55Z,2021-11-01T22:17:11Z,2021-11-01T22:17:11Z,MERGED,True,69,6,3,https://github.com/ewertons,Fix crash with invalid proxy configuration,4,[],https://github.com/Azure/azure-c-shared-utility/pull/567,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/567,"This replaces the original PR #564
Unit tests were added to this new PR.","This replaces the original PR #564
Unit tests were added to this new PR.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,568,2021-11-04T00:49:39Z,2021-11-08T18:41:55Z,2021-11-08T18:41:56Z,MERGED,True,2,2,1,https://github.com/danewalton,update install paths for cmake,1,[],https://github.com/Azure/azure-c-shared-utility/pull/568,https://github.com/danewalton,1,https://github.com/Azure/azure-c-shared-utility/pull/568,taking suggestions from #355,taking suggestions from #355,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,569,2021-11-15T09:32:01Z,2021-11-17T22:09:50Z,2021-11-17T22:09:50Z,CLOSED,False,0,2,1,https://github.com/jlaliMohamed,remove invalid xio_close,1,[],https://github.com/Azure/azure-c-shared-utility/pull/569,https://github.com/jlaliMohamed,1,https://github.com/Azure/azure-c-shared-utility/pull/569,"remove invalid xio_close when using http_compact, mbedtls and proxy","remove invalid xio_close when using http_compact, mbedtls and proxy",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,569,2021-11-15T09:32:01Z,2021-11-17T22:09:50Z,2021-11-17T22:09:50Z,CLOSED,False,0,2,1,https://github.com/jlaliMohamed,remove invalid xio_close,1,[],https://github.com/Azure/azure-c-shared-utility/pull/569,https://github.com/danewalton,2,https://github.com/Azure/azure-c-shared-utility/pull/569#issuecomment-969141953,"remove invalid xio_close when using http_compact, mbedtls and proxy",Hi @jlaliMohamed can you give more details on why you think this is invalid?,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,569,2021-11-15T09:32:01Z,2021-11-17T22:09:50Z,2021-11-17T22:09:50Z,CLOSED,False,0,2,1,https://github.com/jlaliMohamed,remove invalid xio_close,1,[],https://github.com/Azure/azure-c-shared-utility/pull/569,https://github.com/jlaliMohamed,3,https://github.com/Azure/azure-c-shared-utility/pull/569#issuecomment-970368978,"remove invalid xio_close when using http_compact, mbedtls and proxy","Hi @danewalton, The problem is produced when using http_compact, tlsio mbedtls and proxy.
After sending a successful http request  (using mebdtls as a TLS layer and proxy) we receive a log like this:
[... httpapi_compact.c:774 ] Waiting for TLS connection
[... httpapi_compact.c:774 ] Waiting for TLS connection
[... httpapi_compact.c:774 ] Waiting for TLS connection
[... http_proxy_io.c:785 ] Invalid tlsio_state. Expected state is HTTP_PROXY_IO_STATE_OPEN.

when closing the io socket, the tls (for mbdtls) does the closing, then in the destroy tlsio_mbedtls_destroy function it calls the xio_close again.
To resume is a double call of xio_close ()",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,569,2021-11-15T09:32:01Z,2021-11-17T22:09:50Z,2021-11-17T22:09:50Z,CLOSED,False,0,2,1,https://github.com/jlaliMohamed,remove invalid xio_close,1,[],https://github.com/Azure/azure-c-shared-utility/pull/569,https://github.com/danewalton,4,https://github.com/Azure/azure-c-shared-utility/pull/569#issuecomment-971883567,"remove invalid xio_close when using http_compact, mbedtls and proxy",I have a repro. Looking into it to double check this is the right solution.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,569,2021-11-15T09:32:01Z,2021-11-17T22:09:50Z,2021-11-17T22:09:50Z,CLOSED,False,0,2,1,https://github.com/jlaliMohamed,remove invalid xio_close,1,[],https://github.com/Azure/azure-c-shared-utility/pull/569,https://github.com/danewalton,5,https://github.com/Azure/azure-c-shared-utility/pull/569#issuecomment-971894728,"remove invalid xio_close when using http_compact, mbedtls and proxy",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,569,2021-11-15T09:32:01Z,2021-11-17T22:09:50Z,2021-11-17T22:09:50Z,CLOSED,False,0,2,1,https://github.com/jlaliMohamed,remove invalid xio_close,1,[],https://github.com/Azure/azure-c-shared-utility/pull/569,https://github.com/apps/azure-pipelines,6,https://github.com/Azure/azure-c-shared-utility/pull/569#issuecomment-971894864,"remove invalid xio_close when using http_compact, mbedtls and proxy",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,569,2021-11-15T09:32:01Z,2021-11-17T22:09:50Z,2021-11-17T22:09:50Z,CLOSED,False,0,2,1,https://github.com/jlaliMohamed,remove invalid xio_close,1,[],https://github.com/Azure/azure-c-shared-utility/pull/569,https://github.com/danewalton,7,https://github.com/Azure/azure-c-shared-utility/pull/569#issuecomment-972130629,"remove invalid xio_close when using http_compact, mbedtls and proxy",fixed ut in #572,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,570,2021-11-15T17:18:08Z,2021-11-22T19:09:59Z,2021-11-22T19:09:59Z,CLOSED,False,211,402,4,https://github.com/jspaith,NEVER MERGE: testing update of check_submodules,2,[],https://github.com/Azure/azure-c-shared-utility/pull/570,https://github.com/jspaith,1,https://github.com/Azure/azure-c-shared-utility/pull/570,"NEVER MERGE THIS - Testing build gates only for check_submodules.
Ultimately the .js will be published to NPM but want to check that everything is OK without a publish 1st, so checking in file directly.","NEVER MERGE THIS - Testing build gates only for check_submodules.
Ultimately the .js will be published to NPM but want to check that everything is OK without a publish 1st, so checking in file directly.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,571,2021-11-15T23:42:26Z,2021-11-16T01:27:32Z,2021-11-16T01:27:32Z,MERGED,True,11,3,2,https://github.com/ericwol-msft,SDL Fixes,2,[],https://github.com/Azure/azure-c-shared-utility/pull/571,https://github.com/ericwol-msft,1,https://github.com/Azure/azure-c-shared-utility/pull/571,"11065424 - Defect : InvalidParamValue1, Component : c-utility\adapters\tlsio_schannel.c
11065425 - Defect : Unknown, Component : c-utility\src\crt_abstractions.c","11065424 - Defect : InvalidParamValue1, Component : c-utility\adapters\tlsio_schannel.c
11065425 - Defect : Unknown, Component : c-utility\src\crt_abstractions.c",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,572,2021-11-17T19:37:23Z,2021-11-17T22:10:01Z,2021-11-17T22:10:02Z,MERGED,True,0,3,2,https://github.com/danewalton,Mbed fix,2,[],https://github.com/Azure/azure-c-shared-utility/pull/572,https://github.com/danewalton,1,https://github.com/Azure/azure-c-shared-utility/pull/572,"This looks to duplicate the close which is done in tlsio_mbedtls_close()

  
    
      azure-c-shared-utility/adapters/tlsio_mbedtls.c
    
    
         Line 704
      in
      735be16
    
  
  
    

        
          
           if (xio_close(tls_io_instance->socket_io, on_underlying_io_close_complete_during_close, tls_io_instance) != 0) 
        
    
  


We don't do an xio close in these tlsio_ adapters either.

  
    
      azure-c-shared-utility/adapters/tlsio_openssl.c
    
    
        Lines 1357 to 1395
      in
      735be16
    
  
  
    

        
          
           void tlsio_openssl_destroy(CONCRETE_IO_HANDLE tls_io) 
        

        
          
           { 
        

        
          
               if (tls_io == NULL) 
        

        
          
               { 
        

        
          
                   LogError(""NULL tls_io.""); 
        

        
          
               } 
        

        
          
               else 
        

        
          
               { 
        

        
          
                   TLS_IO_INSTANCE* tls_io_instance = (TLS_IO_INSTANCE*)tls_io; 
        

        
          
                   engine_destroy(tls_io_instance); 
        

        
          
            
        

        
          
                   if (tls_io_instance->certificate != NULL) 
        

        
          
                   { 
        

        
          
                       free(tls_io_instance->certificate); 
        

        
          
                       tls_io_instance->certificate = NULL; 
        

        
          
                   } 
        

        
          
                   if (tls_io_instance->cipher_list != NULL) 
        

        
          
                   { 
        

        
          
                       free(tls_io_instance->cipher_list); 
        

        
          
                       tls_io_instance->cipher_list = NULL; 
        

        
          
                   } 
        

        
          
                   free((void*)tls_io_instance->x509_certificate); 
        

        
          
                   free((void*)tls_io_instance->x509_private_key); 
        

        
          
                   close_openssl_instance(tls_io_instance); 
        

        
          
                   if (tls_io_instance->underlying_io != NULL) 
        

        
          
                   { 
        

        
          
                       xio_destroy(tls_io_instance->underlying_io); 
        

        
          
                       tls_io_instance->underlying_io = NULL; 
        

        
          
                   } 
        

        
          
                   free(tls_io_instance->hostname); 
        

        
          
                   if (tls_io_instance->engine_id != NULL) 
        

        
          
                   { 
        

        
          
                       free(tls_io_instance->engine_id); 
        

        
          
                       tls_io_instance->engine_id = NULL; 
        

        
          
                   } 
        

        
          
            
        

        
          
                   free(tls_io); 
        

        
          
               } 
        

        
          
           } 
        
    
  



  
    
      azure-c-shared-utility/adapters/tlsio_schannel.c
    
    
        Lines 1149 to 1217
      in
      735be16
    
  
  
    

        
          
           void tlsio_schannel_destroy(CONCRETE_IO_HANDLE tls_io) 
        

        
          
           { 
        

        
          
               if (tls_io != NULL) 
        

        
          
               { 
        

        
          
                   TLS_IO_INSTANCE* tls_io_instance = (TLS_IO_INSTANCE*)tls_io; 
        

        
          
                   LIST_ITEM_HANDLE first_pending_io; 
        

        
          
            
        

        
          
                   if (tls_io_instance->credential_handle_allocated) 
        

        
          
                   { 
        

        
          
                       (void)FreeCredentialHandle(&tls_io_instance->credential_handle); 
        

        
          
                       tls_io_instance->credential_handle_allocated = false; 
        

        
          
                   } 
        

        
          
            
        

        
          
                   if (tls_io_instance->received_bytes != NULL) 
        

        
          
                   { 
        

        
          
                       free(tls_io_instance->received_bytes); 
        

        
          
                   } 
        

        
          
            
        

        
          
                   if (tls_io_instance->trustedCertificate != NULL) 
        

        
          
                   { 
        

        
          
                       free(tls_io_instance->trustedCertificate); 
        

        
          
                   } 
        

        
          
            
        

        
          
                   if (tls_io_instance->x509_schannel_handle != NULL) 
        

        
          
                   { 
        

        
          
                       x509_schannel_destroy(tls_io_instance->x509_schannel_handle); 
        

        
          
                   } 
        

        
          
            
        

        
          
                   if (tls_io_instance->x509certificate != NULL) 
        

        
          
                   { 
        

        
          
                       free(tls_io_instance->x509certificate); 
        

        
          
                   } 
        

        
          
            
        

        
          
                   if (tls_io_instance->x509privatekey != NULL) 
        

        
          
                   { 
        

        
          
                       free(tls_io_instance->x509privatekey); 
        

        
          
                   } 
        

        
          
            
        

        
          
                   xio_destroy(tls_io_instance->socket_io); 
        

        
          
                   free(tls_io_instance->host_name); 
        

        
          
            
        

        
          
                   first_pending_io = singlylinkedlist_get_head_item(tls_io_instance->pending_io_list); 
        

        
          
                   while (first_pending_io != NULL) 
        

        
          
                   { 
        

        
          
                       PENDING_SEND* pending_send = (PENDING_SEND*)singlylinkedlist_item_get_value(first_pending_io); 
        

        
          
                       if (pending_send == NULL) 
        

        
          
                       { 
        

        
          
                           LogError(""Failure: retrieving socket from list""); 
        

        
          
                           indicate_error(tls_io_instance); 
        

        
          
                           break; 
        

        
          
                       } 
        

        
          
                       else 
        

        
          
                       { 
        

        
          
                           if (pending_send->on_send_complete != NULL) 
        

        
          
                           { 
        

        
          
                               pending_send->on_send_complete(pending_send->on_send_complete_context, IO_SEND_CANCELLED); 
        

        
          
                           } 
        

        
          
            
        

        
          
                           if (singlylinkedlist_remove(tls_io_instance->pending_io_list, first_pending_io) != 0) 
        

        
          
                           { 
        

        
          
                               LogError(""Failure: removing pending IO from list""); 
        

        
          
                           } 
        

        
          
                       } 
        

        
          
                   } 
        

        
          
            
        

        
          
                   singlylinkedlist_destroy(tls_io_instance->pending_io_list); 
        

        
          
                   free(tls_io); 
        

        
          
               } 
        

        
          
           } 
        
    
  


I repro'd the issue detailed by #569 and removing this resolves the issue. I also ran the iot sample using mbedtls with MQTT and MQTT w/ WS and it looks to run just fine.","This looks to duplicate the close which is done in tlsio_mbedtls_close()

  
    
      azure-c-shared-utility/adapters/tlsio_mbedtls.c
    
    
         Line 704
      in
      735be16
    
  
  
    

        
          
           if (xio_close(tls_io_instance->socket_io, on_underlying_io_close_complete_during_close, tls_io_instance) != 0) 
        
    
  


We don't do an xio close in these tlsio_ adapters either.

  
    
      azure-c-shared-utility/adapters/tlsio_openssl.c
    
    
        Lines 1357 to 1395
      in
      735be16
    
  
  
    

        
          
           void tlsio_openssl_destroy(CONCRETE_IO_HANDLE tls_io) 
        

        
          
           { 
        

        
          
               if (tls_io == NULL) 
        

        
          
               { 
        

        
          
                   LogError(""NULL tls_io.""); 
        

        
          
               } 
        

        
          
               else 
        

        
          
               { 
        

        
          
                   TLS_IO_INSTANCE* tls_io_instance = (TLS_IO_INSTANCE*)tls_io; 
        

        
          
                   engine_destroy(tls_io_instance); 
        

        
          
            
        

        
          
                   if (tls_io_instance->certificate != NULL) 
        

        
          
                   { 
        

        
          
                       free(tls_io_instance->certificate); 
        

        
          
                       tls_io_instance->certificate = NULL; 
        

        
          
                   } 
        

        
          
                   if (tls_io_instance->cipher_list != NULL) 
        

        
          
                   { 
        

        
          
                       free(tls_io_instance->cipher_list); 
        

        
          
                       tls_io_instance->cipher_list = NULL; 
        

        
          
                   } 
        

        
          
                   free((void*)tls_io_instance->x509_certificate); 
        

        
          
                   free((void*)tls_io_instance->x509_private_key); 
        

        
          
                   close_openssl_instance(tls_io_instance); 
        

        
          
                   if (tls_io_instance->underlying_io != NULL) 
        

        
          
                   { 
        

        
          
                       xio_destroy(tls_io_instance->underlying_io); 
        

        
          
                       tls_io_instance->underlying_io = NULL; 
        

        
          
                   } 
        

        
          
                   free(tls_io_instance->hostname); 
        

        
          
                   if (tls_io_instance->engine_id != NULL) 
        

        
          
                   { 
        

        
          
                       free(tls_io_instance->engine_id); 
        

        
          
                       tls_io_instance->engine_id = NULL; 
        

        
          
                   } 
        

        
          
            
        

        
          
                   free(tls_io); 
        

        
          
               } 
        

        
          
           } 
        
    
  



  
    
      azure-c-shared-utility/adapters/tlsio_schannel.c
    
    
        Lines 1149 to 1217
      in
      735be16
    
  
  
    

        
          
           void tlsio_schannel_destroy(CONCRETE_IO_HANDLE tls_io) 
        

        
          
           { 
        

        
          
               if (tls_io != NULL) 
        

        
          
               { 
        

        
          
                   TLS_IO_INSTANCE* tls_io_instance = (TLS_IO_INSTANCE*)tls_io; 
        

        
          
                   LIST_ITEM_HANDLE first_pending_io; 
        

        
          
            
        

        
          
                   if (tls_io_instance->credential_handle_allocated) 
        

        
          
                   { 
        

        
          
                       (void)FreeCredentialHandle(&tls_io_instance->credential_handle); 
        

        
          
                       tls_io_instance->credential_handle_allocated = false; 
        

        
          
                   } 
        

        
          
            
        

        
          
                   if (tls_io_instance->received_bytes != NULL) 
        

        
          
                   { 
        

        
          
                       free(tls_io_instance->received_bytes); 
        

        
          
                   } 
        

        
          
            
        

        
          
                   if (tls_io_instance->trustedCertificate != NULL) 
        

        
          
                   { 
        

        
          
                       free(tls_io_instance->trustedCertificate); 
        

        
          
                   } 
        

        
          
            
        

        
          
                   if (tls_io_instance->x509_schannel_handle != NULL) 
        

        
          
                   { 
        

        
          
                       x509_schannel_destroy(tls_io_instance->x509_schannel_handle); 
        

        
          
                   } 
        

        
          
            
        

        
          
                   if (tls_io_instance->x509certificate != NULL) 
        

        
          
                   { 
        

        
          
                       free(tls_io_instance->x509certificate); 
        

        
          
                   } 
        

        
          
            
        

        
          
                   if (tls_io_instance->x509privatekey != NULL) 
        

        
          
                   { 
        

        
          
                       free(tls_io_instance->x509privatekey); 
        

        
          
                   } 
        

        
          
            
        

        
          
                   xio_destroy(tls_io_instance->socket_io); 
        

        
          
                   free(tls_io_instance->host_name); 
        

        
          
            
        

        
          
                   first_pending_io = singlylinkedlist_get_head_item(tls_io_instance->pending_io_list); 
        

        
          
                   while (first_pending_io != NULL) 
        

        
          
                   { 
        

        
          
                       PENDING_SEND* pending_send = (PENDING_SEND*)singlylinkedlist_item_get_value(first_pending_io); 
        

        
          
                       if (pending_send == NULL) 
        

        
          
                       { 
        

        
          
                           LogError(""Failure: retrieving socket from list""); 
        

        
          
                           indicate_error(tls_io_instance); 
        

        
          
                           break; 
        

        
          
                       } 
        

        
          
                       else 
        

        
          
                       { 
        

        
          
                           if (pending_send->on_send_complete != NULL) 
        

        
          
                           { 
        

        
          
                               pending_send->on_send_complete(pending_send->on_send_complete_context, IO_SEND_CANCELLED); 
        

        
          
                           } 
        

        
          
            
        

        
          
                           if (singlylinkedlist_remove(tls_io_instance->pending_io_list, first_pending_io) != 0) 
        

        
          
                           { 
        

        
          
                               LogError(""Failure: removing pending IO from list""); 
        

        
          
                           } 
        

        
          
                       } 
        

        
          
                   } 
        

        
          
            
        

        
          
                   singlylinkedlist_destroy(tls_io_instance->pending_io_list); 
        

        
          
                   free(tls_io); 
        

        
          
               } 
        

        
          
           } 
        
    
  


I repro'd the issue detailed by #569 and removing this resolves the issue. I also ran the iot sample using mbedtls with MQTT and MQTT w/ WS and it looks to run just fine.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,573,2021-11-19T01:13:21Z,2021-11-23T04:13:54Z,2021-11-23T04:13:54Z,MERGED,True,107,9,9,https://github.com/jspaith,Add clang builds for embedded TLS adapters,12,[],https://github.com/Azure/azure-c-shared-utility/pull/573,https://github.com/jspaith,1,https://github.com/Azure/azure-c-shared-utility/pull/573,"Our TLS stacks that are primarily used on embedded or low-end Linux devices - wolfssl, bear, and mbed - are currently compiled and tested against gcc only.  This is generally fine as gcc is the most common embedded compiler.
However... gcc misses certain warnings condition, especially around uninitialized variables.  (See StackOverflow discussion here - I was easily able to reproduce this on gcc even with -Wall and any optimization setting I tried.)
clang does not miss this class of errors.  So add a clang build to these stacks.  This build only checks compilation step and does not rerun tests gcc currently handles.","Our TLS stacks that are primarily used on embedded or low-end Linux devices - wolfssl, bear, and mbed - are currently compiled and tested against gcc only.  This is generally fine as gcc is the most common embedded compiler.
However... gcc misses certain warnings condition, especially around uninitialized variables.  (See StackOverflow discussion here - I was easily able to reproduce this on gcc even with -Wall and any optimization setting I tried.)
clang does not miss this class of errors.  So add a clang build to these stacks.  This build only checks compilation step and does not rerun tests gcc currently handles.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,574,2021-11-19T23:09:55Z,2021-12-01T23:06:47Z,2021-12-01T23:06:48Z,MERGED,True,19,6,2,https://github.com/ericwol-msft,"Update .vsts-ci.yml for Azure Pipelines, remove Win2016 build",5,[],https://github.com/Azure/azure-c-shared-utility/pull/574,https://github.com/ericwol-msft,1,https://github.com/Azure/azure-c-shared-utility/pull/574,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,576,2021-11-22T18:50:36Z,2021-11-22T21:29:30Z,2021-11-22T21:29:31Z,MERGED,True,9,9,6,https://github.com/danewalton,remove en-us from links,1,[],https://github.com/Azure/azure-c-shared-utility/pull/576,https://github.com/danewalton,1,https://github.com/Azure/azure-c-shared-utility/pull/576,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,577,2021-11-24T16:12:17Z,,2021-11-25T13:51:36Z,OPEN,False,5,5,2,https://github.com/schopin-pro,Relax the range checks on the OpenSSL version,1,[],https://github.com/Azure/azure-c-shared-utility/pull/577,https://github.com/schopin-pro,1,https://github.com/Azure/azure-c-shared-utility/pull/577,"OpenSSL 3.0 has a high degree of API compatibility with the 1.1.1
branch, so the 1.1 code branches are also valid for higher versions.
Note that this patch does not address the deprecation warnings
introduced by OpenSSL 3.0.","OpenSSL 3.0 has a high degree of API compatibility with the 1.1.1
branch, so the 1.1 code branches are also valid for higher versions.
Note that this patch does not address the deprecation warnings
introduced by OpenSSL 3.0.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,577,2021-11-24T16:12:17Z,,2021-11-25T13:51:36Z,OPEN,False,5,5,2,https://github.com/schopin-pro,Relax the range checks on the OpenSSL version,1,[],https://github.com/Azure/azure-c-shared-utility/pull/577,https://github.com/apps/microsoft-cla,2,https://github.com/Azure/azure-c-shared-utility/pull/577#issuecomment-978022342,"OpenSSL 3.0 has a high degree of API compatibility with the 1.1.1
branch, so the 1.1 code branches are also valid for higher versions.
Note that this patch does not address the deprecation warnings
introduced by OpenSSL 3.0.",All CLA requirements met.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,577,2021-11-24T16:12:17Z,,2021-11-25T13:51:36Z,OPEN,False,5,5,2,https://github.com/schopin-pro,Relax the range checks on the OpenSSL version,1,[],https://github.com/Azure/azure-c-shared-utility/pull/577,https://github.com/schopin-pro,3,https://github.com/Azure/azure-c-shared-utility/pull/577#issuecomment-978024859,"OpenSSL 3.0 has a high degree of API compatibility with the 1.1.1
branch, so the 1.1 code branches are also valid for higher versions.
Note that this patch does not address the deprecation warnings
introduced by OpenSSL 3.0.",This patch has been written when looking into the build failure of azure-uamqp-python in Ubuntu due to our transition to OpenSSL3. It will be shipped in the affected package.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,578,2021-12-03T23:53:15Z,2021-12-07T18:18:30Z,2021-12-07T18:18:30Z,MERGED,True,370,91,22,https://github.com/ericwol-msft,Fixes for SDLNativeRules issues,51,[],https://github.com/Azure/azure-c-shared-utility/pull/578,https://github.com/ericwol-msft,1,https://github.com/Azure/azure-c-shared-utility/pull/578,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,579,2021-12-06T17:17:59Z,2022-04-21T16:32:01Z,2022-04-21T16:32:02Z,MERGED,True,1,1,1,https://github.com/jspaith,Update Node version on gate from 6=>16,2,[],https://github.com/Azure/azure-c-shared-utility/pull/579,https://github.com/jspaith,1,https://github.com/Azure/azure-c-shared-utility/pull/579,Update the version of Node we're using on our submodule checks.,Update the version of Node we're using on our submodule checks.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,579,2021-12-06T17:17:59Z,2022-04-21T16:32:01Z,2022-04-21T16:32:02Z,MERGED,True,1,1,1,https://github.com/jspaith,Update Node version on gate from 6=>16,2,[],https://github.com/Azure/azure-c-shared-utility/pull/579,https://github.com/momuno,2,https://github.com/Azure/azure-c-shared-utility/pull/579#issuecomment-1104631895,Update the version of Node we're using on our submodule checks.,"@jspaith are you still planning to merge this PR?  Or, would you prefer it closed? Thanks!",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,579,2021-12-06T17:17:59Z,2022-04-21T16:32:01Z,2022-04-21T16:32:02Z,MERGED,True,1,1,1,https://github.com/jspaith,Update Node version on gate from 6=>16,2,[],https://github.com/Azure/azure-c-shared-utility/pull/579,https://github.com/jspaith,3,https://github.com/Azure/azure-c-shared-utility/pull/579#issuecomment-1105447350,Update the version of Node we're using on our submodule checks.,@momuno - thanks for calling out.  Fixing!,True,{'HOORAY': ['https://github.com/momuno']}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,580,2021-12-07T18:36:39Z,2021-12-07T18:51:57Z,2021-12-07T18:51:58Z,MERGED,True,4,1,3,https://github.com/ericwol-msft,update linux deps,3,[],https://github.com/Azure/azure-c-shared-utility/pull/580,https://github.com/ericwol-msft,1,https://github.com/Azure/azure-c-shared-utility/pull/580,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,586,2022-03-01T01:08:59Z,2022-03-01T19:56:30Z,2022-03-01T19:56:31Z,MERGED,True,4,4,2,https://github.com/CIPop,Fixing functions for strict-prototypes.,1,[],https://github.com/Azure/azure-c-shared-utility/pull/586,https://github.com/CIPop,1,https://github.com/Azure/azure-c-shared-utility/pull/586,Fixing code in preparation for -Wstrict-prototypes in Azure IoT C-SDK.,Fixing code in preparation for -Wstrict-prototypes in Azure IoT C-SDK.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,587,2022-03-03T23:32:12Z,2022-03-04T20:35:27Z,2022-03-04T20:35:28Z,MERGED,True,6,0,1,https://github.com/danewalton,update console logger,4,[],https://github.com/Azure/azure-c-shared-utility/pull/587,https://github.com/danewalton,1,https://github.com/Azure/azure-c-shared-utility/pull/587,"Crash discovered here: Azure/azure-iot-sdk-c#2248
Inserts a placeholder in case the timeString is NULL.","Crash discovered here: Azure/azure-iot-sdk-c#2248
Inserts a placeholder in case the timeString is NULL.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,589,2022-04-10T15:27:16Z,2022-04-12T18:00:37Z,2022-04-12T18:00:37Z,MERGED,True,5,5,3,https://github.com/ffontaine,adapters: fix build with libressl >= 2.8.0,1,[],https://github.com/Azure/azure-c-shared-utility/pull/589,https://github.com/ffontaine,1,https://github.com/Azure/azure-c-shared-utility/pull/589,"Fix the following build failure with libressl >= 2.8.0 raised since libressl-portable/openbsd@703abab:
/nvmedata/autobuild/instance-20/output-1/build/azure-iot-sdk-c-LTS_01_2022_Ref01/c-utility/adapters/tlsio_openssl.c: In function 'add_certificate_to_store':
/nvmedata/autobuild/instance-20/output-1/build/azure-iot-sdk-c-LTS_01_2022_Ref01/c-utility/adapters/tlsio_openssl.c:961:24: error: assignment discards 'const' qualifier from pointer target type [-Werror=discarded-qualifiers]
  961 |             bio_method = BIO_s_mem();
      |                        ^
cc1: all warnings being treated as errors

Fix #585
Fixes:

http://autobuild.buildroot.org/results/873f86fb2311ed29a791140f2341943475985fcc

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","Fix the following build failure with libressl >= 2.8.0 raised since libressl-portable/openbsd@703abab:
/nvmedata/autobuild/instance-20/output-1/build/azure-iot-sdk-c-LTS_01_2022_Ref01/c-utility/adapters/tlsio_openssl.c: In function 'add_certificate_to_store':
/nvmedata/autobuild/instance-20/output-1/build/azure-iot-sdk-c-LTS_01_2022_Ref01/c-utility/adapters/tlsio_openssl.c:961:24: error: assignment discards 'const' qualifier from pointer target type [-Werror=discarded-qualifiers]
  961 |             bio_method = BIO_s_mem();
      |                        ^
cc1: all warnings being treated as errors

Fix #585
Fixes:

http://autobuild.buildroot.org/results/873f86fb2311ed29a791140f2341943475985fcc

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,589,2022-04-10T15:27:16Z,2022-04-12T18:00:37Z,2022-04-12T18:00:37Z,MERGED,True,5,5,3,https://github.com/ffontaine,adapters: fix build with libressl >= 2.8.0,1,[],https://github.com/Azure/azure-c-shared-utility/pull/589,https://github.com/apps/microsoft-cla,2,https://github.com/Azure/azure-c-shared-utility/pull/589#issuecomment-1094297158,"Fix the following build failure with libressl >= 2.8.0 raised since libressl-portable/openbsd@703abab:
/nvmedata/autobuild/instance-20/output-1/build/azure-iot-sdk-c-LTS_01_2022_Ref01/c-utility/adapters/tlsio_openssl.c: In function 'add_certificate_to_store':
/nvmedata/autobuild/instance-20/output-1/build/azure-iot-sdk-c-LTS_01_2022_Ref01/c-utility/adapters/tlsio_openssl.c:961:24: error: assignment discards 'const' qualifier from pointer target type [-Werror=discarded-qualifiers]
  961 |             bio_method = BIO_s_mem();
      |                        ^
cc1: all warnings being treated as errors

Fix #585
Fixes:

http://autobuild.buildroot.org/results/873f86fb2311ed29a791140f2341943475985fcc

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com",All CLA requirements met.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,589,2022-04-10T15:27:16Z,2022-04-12T18:00:37Z,2022-04-12T18:00:37Z,MERGED,True,5,5,3,https://github.com/ffontaine,adapters: fix build with libressl >= 2.8.0,1,[],https://github.com/Azure/azure-c-shared-utility/pull/589,https://github.com/CIPop,3,https://github.com/Azure/azure-c-shared-utility/pull/589#issuecomment-1097003261,"Fix the following build failure with libressl >= 2.8.0 raised since libressl-portable/openbsd@703abab:
/nvmedata/autobuild/instance-20/output-1/build/azure-iot-sdk-c-LTS_01_2022_Ref01/c-utility/adapters/tlsio_openssl.c: In function 'add_certificate_to_store':
/nvmedata/autobuild/instance-20/output-1/build/azure-iot-sdk-c-LTS_01_2022_Ref01/c-utility/adapters/tlsio_openssl.c:961:24: error: assignment discards 'const' qualifier from pointer target type [-Werror=discarded-qualifiers]
  961 |             bio_method = BIO_s_mem();
      |                        ^
cc1: all warnings being treated as errors

Fix #585
Fixes:

http://autobuild.buildroot.org/results/873f86fb2311ed29a791140f2341943475985fcc

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,589,2022-04-10T15:27:16Z,2022-04-12T18:00:37Z,2022-04-12T18:00:37Z,MERGED,True,5,5,3,https://github.com/ffontaine,adapters: fix build with libressl >= 2.8.0,1,[],https://github.com/Azure/azure-c-shared-utility/pull/589,https://github.com/apps/azure-pipelines,4,https://github.com/Azure/azure-c-shared-utility/pull/589#issuecomment-1097003465,"Fix the following build failure with libressl >= 2.8.0 raised since libressl-portable/openbsd@703abab:
/nvmedata/autobuild/instance-20/output-1/build/azure-iot-sdk-c-LTS_01_2022_Ref01/c-utility/adapters/tlsio_openssl.c: In function 'add_certificate_to_store':
/nvmedata/autobuild/instance-20/output-1/build/azure-iot-sdk-c-LTS_01_2022_Ref01/c-utility/adapters/tlsio_openssl.c:961:24: error: assignment discards 'const' qualifier from pointer target type [-Werror=discarded-qualifiers]
  961 |             bio_method = BIO_s_mem();
      |                        ^
cc1: all warnings being treated as errors

Fix #585
Fixes:

http://autobuild.buildroot.org/results/873f86fb2311ed29a791140f2341943475985fcc

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,590,2022-04-13T22:18:04Z,2022-04-13T22:49:38Z,2022-04-13T22:49:39Z,MERGED,True,3,3,1,https://github.com/ewertons,Handle ENOBUFS correctly in socketio_berkeley,1,[],https://github.com/Azure/azure-c-shared-utility/pull/590,https://github.com/ewertons,1,https://github.com/Azure/azure-c-shared-utility/pull/590,"This issue was first reported on Green Hill's embedded Linux,
where the number of telemetry messages was big enough to
fill in the output buffers of the OS and cause send() to return
error and set errno to ENOBUFS.
ENOBUFS should be treated as a transient error, not critical as
it was so far.","This issue was first reported on Green Hill's embedded Linux,
where the number of telemetry messages was big enough to
fill in the output buffers of the OS and cause send() to return
error and set errno to ENOBUFS.
ENOBUFS should be treated as a transient error, not critical as
it was so far.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,591,2022-04-14T15:24:46Z,2022-04-14T15:27:01Z,2022-04-14T15:27:01Z,CLOSED,False,4140,3925,64,https://github.com/M-Hietala,M hietala/adding option to exclude networking,175,[],https://github.com/Azure/azure-c-shared-utility/pull/591,https://github.com/M-Hietala,1,https://github.com/Azure/azure-c-shared-utility/pull/591,,,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,592,2022-04-18T22:23:14Z,2022-04-19T20:14:26Z,2022-04-19T20:14:27Z,MERGED,True,18,7,2,https://github.com/momuno,Fix for memory leak in http-proxy-io,2,[],https://github.com/Azure/azure-c-shared-utility/pull/592,https://github.com/momuno,1,https://github.com/Azure/azure-c-shared-utility/pull/592,"Memory leak found during investigation of logic pertaining to xio_retrieveoptions.
Fix could be 2 lines.  Instead, approach chosen to mimic pattern found in other files using parallel logic, such as tlsio_mbedts.c and tlsio_openssl.c
Because OptionHandler_AddOption mallocs memory for the option-value being added (in this case  underlying_io_options), which has already been allocated once by xio_retrieveoptions, the memory must be destroyed if  OptionHandler_AddOption succeeds.","Memory leak found during investigation of logic pertaining to xio_retrieveoptions.
Fix could be 2 lines.  Instead, approach chosen to mimic pattern found in other files using parallel logic, such as tlsio_mbedts.c and tlsio_openssl.c
Because OptionHandler_AddOption mallocs memory for the option-value being added (in this case  underlying_io_options), which has already been allocated once by xio_retrieveoptions, the memory must be destroyed if  OptionHandler_AddOption succeeds.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,592,2022-04-18T22:23:14Z,2022-04-19T20:14:26Z,2022-04-19T20:14:27Z,MERGED,True,18,7,2,https://github.com/momuno,Fix for memory leak in http-proxy-io,2,[],https://github.com/Azure/azure-c-shared-utility/pull/592,https://github.com/momuno,2,https://github.com/Azure/azure-c-shared-utility/pull/592#issuecomment-1101815133,"Memory leak found during investigation of logic pertaining to xio_retrieveoptions.
Fix could be 2 lines.  Instead, approach chosen to mimic pattern found in other files using parallel logic, such as tlsio_mbedts.c and tlsio_openssl.c
Because OptionHandler_AddOption mallocs memory for the option-value being added (in this case  underlying_io_options), which has already been allocated once by xio_retrieveoptions, the memory must be destroyed if  OptionHandler_AddOption succeeds.",Will appreciate a second set of eyes on this :) sanity check...,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,592,2022-04-18T22:23:14Z,2022-04-19T20:14:26Z,2022-04-19T20:14:27Z,MERGED,True,18,7,2,https://github.com/momuno,Fix for memory leak in http-proxy-io,2,[],https://github.com/Azure/azure-c-shared-utility/pull/592,https://github.com/momuno,3,https://github.com/Azure/azure-c-shared-utility/pull/592#issuecomment-1103019328,"Memory leak found during investigation of logic pertaining to xio_retrieveoptions.
Fix could be 2 lines.  Instead, approach chosen to mimic pattern found in other files using parallel logic, such as tlsio_mbedts.c and tlsio_openssl.c
Because OptionHandler_AddOption mallocs memory for the option-value being added (in this case  underlying_io_options), which has already been allocated once by xio_retrieveoptions, the memory must be destroyed if  OptionHandler_AddOption succeeds.",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,592,2022-04-18T22:23:14Z,2022-04-19T20:14:26Z,2022-04-19T20:14:27Z,MERGED,True,18,7,2,https://github.com/momuno,Fix for memory leak in http-proxy-io,2,[],https://github.com/Azure/azure-c-shared-utility/pull/592,https://github.com/apps/azure-pipelines,4,https://github.com/Azure/azure-c-shared-utility/pull/592#issuecomment-1103019523,"Memory leak found during investigation of logic pertaining to xio_retrieveoptions.
Fix could be 2 lines.  Instead, approach chosen to mimic pattern found in other files using parallel logic, such as tlsio_mbedts.c and tlsio_openssl.c
Because OptionHandler_AddOption mallocs memory for the option-value being added (in this case  underlying_io_options), which has already been allocated once by xio_retrieveoptions, the memory must be destroyed if  OptionHandler_AddOption succeeds.",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,593,2022-04-28T21:44:01Z,2022-04-29T01:32:14Z,2022-04-29T01:32:15Z,MERGED,True,164,86,5,https://github.com/danewalton,Update containers from Docker Hub to ACR,6,[],https://github.com/Azure/azure-c-shared-utility/pull/593,https://github.com/danewalton,1,https://github.com/Azure/azure-c-shared-utility/pull/593,"Moves containers from Docker Hub to Azure Container Registry
Adds a test for Ubuntu 20.04
Drops references to Ubuntu 16.04
Removes the script for Ubuntu 15.10","Moves containers from Docker Hub to Azure Container Registry
Adds a test for Ubuntu 20.04
Drops references to Ubuntu 16.04
Removes the script for Ubuntu 15.10",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,594,2022-04-29T20:35:44Z,2022-05-02T18:06:54Z,2022-05-02T18:06:55Z,MERGED,True,238,220,18,https://github.com/danewalton,Fix no-op tests,1,[],https://github.com/Azure/azure-c-shared-utility/pull/594,https://github.com/danewalton,1,https://github.com/Azure/azure-c-shared-utility/pull/594,"Followup to #593

Fixes some tests which before were no-ops.
Adds some missing tests like ""Linux with Options"" and ""Linux with C-Ares"".
Breaks up the ""build"" and ""test"" phase as is done in the Azure C SDK (instead of all under ""build"").","Followup to #593

Fixes some tests which before were no-ops.
Adds some missing tests like ""Linux with Options"" and ""Linux with C-Ares"".
Breaks up the ""build"" and ""test"" phase as is done in the Azure C SDK (instead of all under ""build"").",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,595,2022-05-06T01:07:56Z,2022-05-07T01:05:00Z,2022-05-07T01:05:01Z,MERGED,True,84,11,1,https://github.com/momuno,Check cURL TLS platform is valid and matches CSDK TLS platform,14,[],https://github.com/Azure/azure-c-shared-utility/pull/595,https://github.com/momuno,1,https://github.com/Azure/azure-c-shared-utility/pull/595,"This is no longer a direct memory leak fix.
However, a memory leak can occur if cURL is configured to use a different TLS platform than the C SDK is using (particularly wrt mbedTLS and certificates), when using HTTP.
This fix checks that cURL is using a valid TLS platform that the CSDK supports (wolfSSL, OpenSSL, or mbedTLS), and that that platform matches what the C SDK is configured to use.
Consolidates else-if statements.","This is no longer a direct memory leak fix.
However, a memory leak can occur if cURL is configured to use a different TLS platform than the C SDK is using (particularly wrt mbedTLS and certificates), when using HTTP.
This fix checks that cURL is using a valid TLS platform that the CSDK supports (wolfSSL, OpenSSL, or mbedTLS), and that that platform matches what the C SDK is configured to use.
Consolidates else-if statements.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,595,2022-05-06T01:07:56Z,2022-05-07T01:05:00Z,2022-05-07T01:05:01Z,MERGED,True,84,11,1,https://github.com/momuno,Check cURL TLS platform is valid and matches CSDK TLS platform,14,[],https://github.com/Azure/azure-c-shared-utility/pull/595,https://github.com/danewalton,2,https://github.com/Azure/azure-c-shared-utility/pull/595#issuecomment-1120030271,"This is no longer a direct memory leak fix.
However, a memory leak can occur if cURL is configured to use a different TLS platform than the C SDK is using (particularly wrt mbedTLS and certificates), when using HTTP.
This fix checks that cURL is using a valid TLS platform that the CSDK supports (wolfSSL, OpenSSL, or mbedTLS), and that that platform matches what the C SDK is configured to use.
Consolidates else-if statements.",It might be that the version of curl that we support doesn't yet have bearssl (based on the gate checks). If that's the case I'm good with just a comment noting that and maybe a warning that this curl version doesn't support it.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,595,2022-05-06T01:07:56Z,2022-05-07T01:05:00Z,2022-05-07T01:05:01Z,MERGED,True,84,11,1,https://github.com/momuno,Check cURL TLS platform is valid and matches CSDK TLS platform,14,[],https://github.com/Azure/azure-c-shared-utility/pull/595,https://github.com/momuno,3,https://github.com/Azure/azure-c-shared-utility/pull/595#issuecomment-1120033958,"This is no longer a direct memory leak fix.
However, a memory leak can occur if cURL is configured to use a different TLS platform than the C SDK is using (particularly wrt mbedTLS and certificates), when using HTTP.
This fix checks that cURL is using a valid TLS platform that the CSDK supports (wolfSSL, OpenSSL, or mbedTLS), and that that platform matches what the C SDK is configured to use.
Consolidates else-if statements.","It might be that the version of curl that we support doesn't yet have bearssl (based on the gate checks). If that's the case I'm good with just a comment noting that and maybe a warning that this curl version doesn't support it.

Oh yikes.  Looking at curl on GitHub, its bearssl.h file didn't even show up until November 2019.  Gates are using 7.60 for cURL. that's old - May 2018.  apt-get for Ubuntu 20.04 installs 7.68.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,596,2022-05-09T09:36:22Z,,2022-05-11T21:24:53Z,OPEN,False,73,4,8,https://github.com/marcuscaisey,ssl: allow openssl engine support to be optional,2,[],https://github.com/Azure/azure-c-shared-utility/pull/596,https://github.com/marcuscaisey,1,https://github.com/Azure/azure-c-shared-utility/pull/596,"OpenSSL can be built without ENGINE support. This PR guards all references to the ENGINE API using OPENSSL_NO_ENGINE so that the openssl adapters can still be used in this case.
To verify these changes, i've done two things:

Guarded the engine related openssl adapter unit tests with OPENSSL_NO_ENGINE and added another test artefact which is built with OPENSSL_NO_ENGINE
Built Azure/azure-uamqp-python with an OpenSSL with no engine support and the modified shared utilities. Ran the samples found here which ran against Azure Event Hubs*. All passed.","OpenSSL can be built without ENGINE support. This PR guards all references to the ENGINE API using OPENSSL_NO_ENGINE so that the openssl adapters can still be used in this case.
To verify these changes, i've done two things:

Guarded the engine related openssl adapter unit tests with OPENSSL_NO_ENGINE and added another test artefact which is built with OPENSSL_NO_ENGINE
Built Azure/azure-uamqp-python with an OpenSSL with no engine support and the modified shared utilities. Ran the samples found here which ran against Azure Event Hubs*. All passed.",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,596,2022-05-09T09:36:22Z,,2022-05-11T21:24:53Z,OPEN,False,73,4,8,https://github.com/marcuscaisey,ssl: allow openssl engine support to be optional,2,[],https://github.com/Azure/azure-c-shared-utility/pull/596,https://github.com/apps/microsoft-cla,2,https://github.com/Azure/azure-c-shared-utility/pull/596#issuecomment-1120875402,"OpenSSL can be built without ENGINE support. This PR guards all references to the ENGINE API using OPENSSL_NO_ENGINE so that the openssl adapters can still be used in this case.
To verify these changes, i've done two things:

Guarded the engine related openssl adapter unit tests with OPENSSL_NO_ENGINE and added another test artefact which is built with OPENSSL_NO_ENGINE
Built Azure/azure-uamqp-python with an OpenSSL with no engine support and the modified shared utilities. Ran the samples found here which ran against Azure Event Hubs*. All passed.",All CLA requirements met.,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,596,2022-05-09T09:36:22Z,,2022-05-11T21:24:53Z,OPEN,False,73,4,8,https://github.com/marcuscaisey,ssl: allow openssl engine support to be optional,2,[],https://github.com/Azure/azure-c-shared-utility/pull/596,https://github.com/CIPop,3,https://github.com/Azure/azure-c-shared-utility/pull/596#issuecomment-1122661176,"OpenSSL can be built without ENGINE support. This PR guards all references to the ENGINE API using OPENSSL_NO_ENGINE so that the openssl adapters can still be used in this case.
To verify these changes, i've done two things:

Guarded the engine related openssl adapter unit tests with OPENSSL_NO_ENGINE and added another test artefact which is built with OPENSSL_NO_ENGINE
Built Azure/azure-uamqp-python with an OpenSSL with no engine support and the modified shared utilities. Ran the samples found here which ran against Azure Event Hubs*. All passed.",/azp run,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,596,2022-05-09T09:36:22Z,,2022-05-11T21:24:53Z,OPEN,False,73,4,8,https://github.com/marcuscaisey,ssl: allow openssl engine support to be optional,2,[],https://github.com/Azure/azure-c-shared-utility/pull/596,https://github.com/apps/azure-pipelines,4,https://github.com/Azure/azure-c-shared-utility/pull/596#issuecomment-1122661307,"OpenSSL can be built without ENGINE support. This PR guards all references to the ENGINE API using OPENSSL_NO_ENGINE so that the openssl adapters can still be used in this case.
To verify these changes, i've done two things:

Guarded the engine related openssl adapter unit tests with OPENSSL_NO_ENGINE and added another test artefact which is built with OPENSSL_NO_ENGINE
Built Azure/azure-uamqp-python with an OpenSSL with no engine support and the modified shared utilities. Ran the samples found here which ran against Azure Event Hubs*. All passed.",Azure Pipelines successfully started running 1 pipeline(s).,True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,596,2022-05-09T09:36:22Z,,2022-05-11T21:24:53Z,OPEN,False,73,4,8,https://github.com/marcuscaisey,ssl: allow openssl engine support to be optional,2,[],https://github.com/Azure/azure-c-shared-utility/pull/596,https://github.com/CIPop,5,https://github.com/Azure/azure-c-shared-utility/pull/596#issuecomment-1122679720,"OpenSSL can be built without ENGINE support. This PR guards all references to the ENGINE API using OPENSSL_NO_ENGINE so that the openssl adapters can still be used in this case.
To verify these changes, i've done two things:

Guarded the engine related openssl adapter unit tests with OPENSSL_NO_ENGINE and added another test artefact which is built with OPENSSL_NO_ENGINE
Built Azure/azure-uamqp-python with an OpenSSL with no engine support and the modified shared utilities. Ran the samples found here which ran against Azure Event Hubs*. All passed.","OSX build failed:
[ 61%] Building C object tests/x509_openssl_ut/no_engine/CMakeFiles/x509_openssl_ut_no_engine_exe.dir/main.c.o
In file included from /Users/jenkins/VSTS_agent/_work/19/s/tests/x509_openssl_ut/x509_openssl_ut.c:37:
/usr/local/opt/openssl/include/openssl/engine.h:71:4: error: ENGINE is disabled.
#  error ENGINE is disabled.
   ^
In file included from /Users/jenkins/VSTS_agent/_work/19/s/adapters/x509_openssl.c:14:
/usr/local/opt/openssl/include/openssl/engine.h:71:4: error: ENGINE is disabled.
#  error ENGINE is disabled.
   ^
[ 61%] Building C object tests/x509_openssl_ut/engine/CMakeFiles/x509_openssl_ut_engine_exe.dir/__/__/__/src/xlogging.c.o
1 error generated.
make[2]: *** [tests/x509_openssl_ut/no_engine/CMakeFiles/x509_openssl_ut_no_engine_exe.dir/__/__/__/adapters/x509_openssl.c.o] Error 1
make[2]: *** Waiting for unfinished jobs....",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,596,2022-05-09T09:36:22Z,,2022-05-11T21:24:53Z,OPEN,False,73,4,8,https://github.com/marcuscaisey,ssl: allow openssl engine support to be optional,2,[],https://github.com/Azure/azure-c-shared-utility/pull/596,https://github.com/CIPop,6,https://github.com/Azure/azure-c-shared-utility/pull/596#issuecomment-1124301227,"OpenSSL can be built without ENGINE support. This PR guards all references to the ENGINE API using OPENSSL_NO_ENGINE so that the openssl adapters can still be used in this case.
To verify these changes, i've done two things:

Guarded the engine related openssl adapter unit tests with OPENSSL_NO_ENGINE and added another test artefact which is built with OPENSSL_NO_ENGINE
Built Azure/azure-uamqp-python with an OpenSSL with no engine support and the modified shared utilities. Ran the samples found here which ran against Azure Event Hubs*. All passed.","@marcuscaisey The OSX build failed with this pragma  : /usr/local/opt/openssl/include/openssl/engine.h:71:4: error: ENGINE is disabled.
AFAIK our gate uses OpenSSL 1.0.2 so it's this line: https://github.com/openssl/openssl/blob/OpenSSL_1_0_2-stable/crypto/engine/engine.h#L71
Please let me know if you plan to make a change. (Gate is blocked by this build failure.)",True,{}
Azure/azure-c-shared-utility,https://github.com/Azure/azure-c-shared-utility,597,2022-05-11T23:03:37Z,2022-05-12T20:21:04Z,2022-05-12T20:21:05Z,MERGED,True,37,71,1,https://github.com/momuno,Remove failure on wrong TLS match with cURL.,6,[],https://github.com/Azure/azure-c-shared-utility/pull/597,https://github.com/momuno,1,https://github.com/Azure/azure-c-shared-utility/pull/597,,,True,{}
