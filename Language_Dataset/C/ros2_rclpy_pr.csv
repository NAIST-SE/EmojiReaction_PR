ros2/rclpy,https://github.com/ros2/rclpy,7,2016-02-29T03:31:04Z,2016-03-24T23:54:23Z,2016-03-24T23:54:28Z,MERGED,True,12,5,1,https://github.com/jacquelinekay,wait_set API change,2,[],https://github.com/ros2/rclpy/pull/7,https://github.com/jacquelinekay,1,https://github.com/ros2/rclpy/pull/7,"Connects to ros2/rcl#27
We'll delay implementing Python services until C services are merged. This is necessary for the C services branch to compile.","Connects to ros2/rcl#27
We'll delay implementing Python services until C services are merged. This is necessary for the C services branch to compile.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,7,2016-02-29T03:31:04Z,2016-03-24T23:54:23Z,2016-03-24T23:54:28Z,MERGED,True,12,5,1,https://github.com/jacquelinekay,wait_set API change,2,[],https://github.com/ros2/rclpy/pull/7,https://github.com/wjwwood,2,https://github.com/ros2/rclpy/pull/7#issuecomment-194552696,"Connects to ros2/rcl#27
We'll delay implementing Python services until C services are merged. This is necessary for the C services branch to compile.",lgtm,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,8,2016-03-11T22:23:01Z,2016-03-17T21:30:56Z,2016-03-17T21:31:00Z,CLOSED,False,4,1,1,https://github.com/jacquelinekay,Change for fixed guard conditions API,1,[],https://github.com/ros2/rclpy/pull/8,https://github.com/jacquelinekay,1,https://github.com/ros2/rclpy/pull/8,Connects to ros2/rcl#33 but does not add any fixed guard conditions.,Connects to ros2/rcl#33 but does not add any fixed guard conditions.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,8,2016-03-11T22:23:01Z,2016-03-17T21:30:56Z,2016-03-17T21:31:00Z,CLOSED,False,4,1,1,https://github.com/jacquelinekay,Change for fixed guard conditions API,1,[],https://github.com/ros2/rclpy/pull/8,https://github.com/jacquelinekay,2,https://github.com/ros2/rclpy/pull/8#issuecomment-198089385,Connects to ros2/rcl#33 but does not add any fixed guard conditions.,closing this to take a new approach.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,9,2016-03-29T08:53:07Z,2016-10-19T08:13:15Z,2016-10-19T08:13:15Z,CLOSED,False,629,1,4,https://github.com/vmayoral,Add rosnode and rostopic functionality,10,[],https://github.com/ros2/rclpy/pull/9,https://github.com/vmayoral,1,https://github.com/ros2/rclpy/pull/9,,,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,10,2016-04-06T00:10:24Z,2016-04-06T00:51:22Z,2016-04-06T02:09:57Z,MERGED,True,3,0,1,https://github.com/dhood,Don't allow fastrtps to be selected in rclpy,1,[],https://github.com/ros2/rclpy/pull/10,https://github.com/dhood,1,https://github.com/ros2/rclpy/pull/10,"If I have both Connext and fastRTPS installed, I get the following error when trying to run either listener_py or talker_py
Traceback (most recent call last):
  File ""/home/dhood/ros2_ws/install_isolated/rclpy_examples/bin/listener_py"", line 9, in <module>
    load_entry_point('rclpy-examples==0.0.0', 'console_scripts', 'listener_py')()
  File ""/home/dhood/ros2_ws/build_isolated/rclpy_examples/listener_py.py"", line 30, in main
    rclpy.init(args)
  File ""/home/dhood/ros2_ws/install_isolated/rclpy/lib/python3.4/site-packages/rclpy/__init__.py"", line 42, in init
    rmw_implementation_tools.import_rmw_implementation()
  File ""/home/dhood/ros2_ws/install_isolated/rclpy/lib/python3.4/site-packages/rclpy/impl/rmw_implementation_tools.py"", line 85, in import_rmw_implementation
    __rmw_implementation_module = importlib.import_module(module_name, package='rclpy')
  File ""/usr/lib/python3.4/importlib/__init__.py"", line 109, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 2254, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 2237, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 2224, in _find_and_load_unlocked
ImportError: No module named 'rclpy._rclpy__rmw_fastrtps_cpp'

From what I understand, fastrtps is chosen here even though it has been skipped over here
This is a pretty hack-y fix, but since this is the current default situation if following the linux install from source, I thought it would be worth patching.","If I have both Connext and fastRTPS installed, I get the following error when trying to run either listener_py or talker_py
Traceback (most recent call last):
  File ""/home/dhood/ros2_ws/install_isolated/rclpy_examples/bin/listener_py"", line 9, in <module>
    load_entry_point('rclpy-examples==0.0.0', 'console_scripts', 'listener_py')()
  File ""/home/dhood/ros2_ws/build_isolated/rclpy_examples/listener_py.py"", line 30, in main
    rclpy.init(args)
  File ""/home/dhood/ros2_ws/install_isolated/rclpy/lib/python3.4/site-packages/rclpy/__init__.py"", line 42, in init
    rmw_implementation_tools.import_rmw_implementation()
  File ""/home/dhood/ros2_ws/install_isolated/rclpy/lib/python3.4/site-packages/rclpy/impl/rmw_implementation_tools.py"", line 85, in import_rmw_implementation
    __rmw_implementation_module = importlib.import_module(module_name, package='rclpy')
  File ""/usr/lib/python3.4/importlib/__init__.py"", line 109, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 2254, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 2237, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 2224, in _find_and_load_unlocked
ImportError: No module named 'rclpy._rclpy__rmw_fastrtps_cpp'

From what I understand, fastrtps is chosen here even though it has been skipped over here
This is a pretty hack-y fix, but since this is the current default situation if following the linux install from source, I thought it would be worth patching.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,10,2016-04-06T00:10:24Z,2016-04-06T00:51:22Z,2016-04-06T02:09:57Z,MERGED,True,3,0,1,https://github.com/dhood,Don't allow fastrtps to be selected in rclpy,1,[],https://github.com/ros2/rclpy/pull/10,https://github.com/wjwwood,2,https://github.com/ros2/rclpy/pull/10#issuecomment-206043384,"If I have both Connext and fastRTPS installed, I get the following error when trying to run either listener_py or talker_py
Traceback (most recent call last):
  File ""/home/dhood/ros2_ws/install_isolated/rclpy_examples/bin/listener_py"", line 9, in <module>
    load_entry_point('rclpy-examples==0.0.0', 'console_scripts', 'listener_py')()
  File ""/home/dhood/ros2_ws/build_isolated/rclpy_examples/listener_py.py"", line 30, in main
    rclpy.init(args)
  File ""/home/dhood/ros2_ws/install_isolated/rclpy/lib/python3.4/site-packages/rclpy/__init__.py"", line 42, in init
    rmw_implementation_tools.import_rmw_implementation()
  File ""/home/dhood/ros2_ws/install_isolated/rclpy/lib/python3.4/site-packages/rclpy/impl/rmw_implementation_tools.py"", line 85, in import_rmw_implementation
    __rmw_implementation_module = importlib.import_module(module_name, package='rclpy')
  File ""/usr/lib/python3.4/importlib/__init__.py"", line 109, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 2254, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 2237, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 2224, in _find_and_load_unlocked
ImportError: No module named 'rclpy._rclpy__rmw_fastrtps_cpp'

From what I understand, fastrtps is chosen here even though it has been skipped over here
This is a pretty hack-y fix, but since this is the current default situation if following the linux install from source, I thought it would be worth patching.","Yeah, I'm not sure if we should fix it here, or update the tutorial to do something like:
$ RCLPY_IMPLEMENTATION=rmw_opensplice_cpp python3 `which talker_py`
$ RCLPY_IMPLEMENTATION=rmw_opensplice_cpp python3 `which listener_py`",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,10,2016-04-06T00:10:24Z,2016-04-06T00:51:22Z,2016-04-06T02:09:57Z,MERGED,True,3,0,1,https://github.com/dhood,Don't allow fastrtps to be selected in rclpy,1,[],https://github.com/ros2/rclpy/pull/10,https://github.com/dhood,3,https://github.com/ros2/rclpy/pull/10#issuecomment-206044170,"If I have both Connext and fastRTPS installed, I get the following error when trying to run either listener_py or talker_py
Traceback (most recent call last):
  File ""/home/dhood/ros2_ws/install_isolated/rclpy_examples/bin/listener_py"", line 9, in <module>
    load_entry_point('rclpy-examples==0.0.0', 'console_scripts', 'listener_py')()
  File ""/home/dhood/ros2_ws/build_isolated/rclpy_examples/listener_py.py"", line 30, in main
    rclpy.init(args)
  File ""/home/dhood/ros2_ws/install_isolated/rclpy/lib/python3.4/site-packages/rclpy/__init__.py"", line 42, in init
    rmw_implementation_tools.import_rmw_implementation()
  File ""/home/dhood/ros2_ws/install_isolated/rclpy/lib/python3.4/site-packages/rclpy/impl/rmw_implementation_tools.py"", line 85, in import_rmw_implementation
    __rmw_implementation_module = importlib.import_module(module_name, package='rclpy')
  File ""/usr/lib/python3.4/importlib/__init__.py"", line 109, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 2254, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 2237, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 2224, in _find_and_load_unlocked
ImportError: No module named 'rclpy._rclpy__rmw_fastrtps_cpp'

From what I understand, fastrtps is chosen here even though it has been skipped over here
This is a pretty hack-y fix, but since this is the current default situation if following the linux install from source, I thought it would be worth patching.","personally when I was trying out ros2 demos I just ran all of the executables I could see, so the error may still come up for some with that approach",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,10,2016-04-06T00:10:24Z,2016-04-06T00:51:22Z,2016-04-06T02:09:57Z,MERGED,True,3,0,1,https://github.com/dhood,Don't allow fastrtps to be selected in rclpy,1,[],https://github.com/ros2/rclpy/pull/10,https://github.com/jacquelinekay,4,https://github.com/ros2/rclpy/pull/10#issuecomment-206044442,"If I have both Connext and fastRTPS installed, I get the following error when trying to run either listener_py or talker_py
Traceback (most recent call last):
  File ""/home/dhood/ros2_ws/install_isolated/rclpy_examples/bin/listener_py"", line 9, in <module>
    load_entry_point('rclpy-examples==0.0.0', 'console_scripts', 'listener_py')()
  File ""/home/dhood/ros2_ws/build_isolated/rclpy_examples/listener_py.py"", line 30, in main
    rclpy.init(args)
  File ""/home/dhood/ros2_ws/install_isolated/rclpy/lib/python3.4/site-packages/rclpy/__init__.py"", line 42, in init
    rmw_implementation_tools.import_rmw_implementation()
  File ""/home/dhood/ros2_ws/install_isolated/rclpy/lib/python3.4/site-packages/rclpy/impl/rmw_implementation_tools.py"", line 85, in import_rmw_implementation
    __rmw_implementation_module = importlib.import_module(module_name, package='rclpy')
  File ""/usr/lib/python3.4/importlib/__init__.py"", line 109, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 2254, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 2237, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 2224, in _find_and_load_unlocked
ImportError: No module named 'rclpy._rclpy__rmw_fastrtps_cpp'

From what I understand, fastrtps is chosen here even though it has been skipped over here
This is a pretty hack-y fix, but since this is the current default situation if following the linux install from source, I thought it would be worth patching.","hmm. Connext Dynamic should work actually.
I think if these lines were removed:
https://github.com/ros2/rclpy/blob/master/rclpy/CMakeLists.txt#L43-L46
you could also remove the reference to rmw_connext_dynamic_cpp from this PR.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,10,2016-04-06T00:10:24Z,2016-04-06T00:51:22Z,2016-04-06T02:09:57Z,MERGED,True,3,0,1,https://github.com/dhood,Don't allow fastrtps to be selected in rclpy,1,[],https://github.com/ros2/rclpy/pull/10,https://github.com/wjwwood,5,https://github.com/ros2/rclpy/pull/10#issuecomment-206044848,"If I have both Connext and fastRTPS installed, I get the following error when trying to run either listener_py or talker_py
Traceback (most recent call last):
  File ""/home/dhood/ros2_ws/install_isolated/rclpy_examples/bin/listener_py"", line 9, in <module>
    load_entry_point('rclpy-examples==0.0.0', 'console_scripts', 'listener_py')()
  File ""/home/dhood/ros2_ws/build_isolated/rclpy_examples/listener_py.py"", line 30, in main
    rclpy.init(args)
  File ""/home/dhood/ros2_ws/install_isolated/rclpy/lib/python3.4/site-packages/rclpy/__init__.py"", line 42, in init
    rmw_implementation_tools.import_rmw_implementation()
  File ""/home/dhood/ros2_ws/install_isolated/rclpy/lib/python3.4/site-packages/rclpy/impl/rmw_implementation_tools.py"", line 85, in import_rmw_implementation
    __rmw_implementation_module = importlib.import_module(module_name, package='rclpy')
  File ""/usr/lib/python3.4/importlib/__init__.py"", line 109, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 2254, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 2237, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 2224, in _find_and_load_unlocked
ImportError: No module named 'rclpy._rclpy__rmw_fastrtps_cpp'

From what I understand, fastrtps is chosen here even though it has been skipped over here
This is a pretty hack-y fix, but since this is the current default situation if following the linux install from source, I thought it would be worth patching.","We could certainly do with a better error message than this, but the fact that there is currently no python implementation built for FastRTPS is only a temporary problem. Also, it would be possible in the future for you to accidentally build your workspace in such a way that FastRTPS is there, but there is no Python implementation built yet (it would be tricky to do this on purpose, but possible).
At one point I had a TODO to only use a separate ament_index name for python rmw implementations that have been built, which would avoid this issue partially.

personally when I was trying out ros2 demos I just ran all of the executables I could see, so the error may still come up for some with that approach

I agree, that's why I think an error message like:
<traceback>
Could not find a Python implementation for the '<selected rmw impl>' rmw implementation, these are the available ones you can select with the 'RCLPY_IMPLEMENATIONS' environment variable: <foo>, <bar>, <baz rmw impls>

It would similar to what you get when you select a bogus rmw implementations, e.g. try:
$ RCLPY_IMPLEMENTATION=bogus python3 `which talker_py`",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,10,2016-04-06T00:10:24Z,2016-04-06T00:51:22Z,2016-04-06T02:09:57Z,MERGED,True,3,0,1,https://github.com/dhood,Don't allow fastrtps to be selected in rclpy,1,[],https://github.com/ros2/rclpy/pull/10,https://github.com/wjwwood,6,https://github.com/ros2/rclpy/pull/10#issuecomment-206045099,"If I have both Connext and fastRTPS installed, I get the following error when trying to run either listener_py or talker_py
Traceback (most recent call last):
  File ""/home/dhood/ros2_ws/install_isolated/rclpy_examples/bin/listener_py"", line 9, in <module>
    load_entry_point('rclpy-examples==0.0.0', 'console_scripts', 'listener_py')()
  File ""/home/dhood/ros2_ws/build_isolated/rclpy_examples/listener_py.py"", line 30, in main
    rclpy.init(args)
  File ""/home/dhood/ros2_ws/install_isolated/rclpy/lib/python3.4/site-packages/rclpy/__init__.py"", line 42, in init
    rmw_implementation_tools.import_rmw_implementation()
  File ""/home/dhood/ros2_ws/install_isolated/rclpy/lib/python3.4/site-packages/rclpy/impl/rmw_implementation_tools.py"", line 85, in import_rmw_implementation
    __rmw_implementation_module = importlib.import_module(module_name, package='rclpy')
  File ""/usr/lib/python3.4/importlib/__init__.py"", line 109, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 2254, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 2237, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 2224, in _find_and_load_unlocked
ImportError: No module named 'rclpy._rclpy__rmw_fastrtps_cpp'

From what I understand, fastrtps is chosen here even though it has been skipped over here
This is a pretty hack-y fix, but since this is the current default situation if following the linux install from source, I thought it would be worth patching.","For example:
% RCLPY_IMPLEMENTATION=bogus python3 `which talker_py`
The rmw implementation specified in 'RCLPY_IMPLEMENTATION=bogus', is not one of the available implementations: ['rmw_fastrtps_cpp', 'rmw_opensplice_cpp']
Traceback (most recent call last):
  File ""/Users/william/ros2_ws/install_isolated/rclpy_examples/bin/talker_py"", line 9, in <module>
    load_entry_point('rclpy-examples', 'console_scripts', 'talker_py')()
  File ""/Users/william/ros2_ws/build_isolated/rclpy_examples/talker_py.py"", line 27, in main
    rclpy.init(args)
  File ""/Users/william/ros2_ws/install_isolated/rclpy/lib/python3.5/site-packages/rclpy/__init__.py"", line 38, in init
    raise InvalidRCLPYImplementation()
rclpy.exceptions.InvalidRCLPYImplementation: requested invalid rmw implementation",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,10,2016-04-06T00:10:24Z,2016-04-06T00:51:22Z,2016-04-06T02:09:57Z,MERGED,True,3,0,1,https://github.com/dhood,Don't allow fastrtps to be selected in rclpy,1,[],https://github.com/ros2/rclpy/pull/10,https://github.com/dhood,7,https://github.com/ros2/rclpy/pull/10#issuecomment-206048001,"If I have both Connext and fastRTPS installed, I get the following error when trying to run either listener_py or talker_py
Traceback (most recent call last):
  File ""/home/dhood/ros2_ws/install_isolated/rclpy_examples/bin/listener_py"", line 9, in <module>
    load_entry_point('rclpy-examples==0.0.0', 'console_scripts', 'listener_py')()
  File ""/home/dhood/ros2_ws/build_isolated/rclpy_examples/listener_py.py"", line 30, in main
    rclpy.init(args)
  File ""/home/dhood/ros2_ws/install_isolated/rclpy/lib/python3.4/site-packages/rclpy/__init__.py"", line 42, in init
    rmw_implementation_tools.import_rmw_implementation()
  File ""/home/dhood/ros2_ws/install_isolated/rclpy/lib/python3.4/site-packages/rclpy/impl/rmw_implementation_tools.py"", line 85, in import_rmw_implementation
    __rmw_implementation_module = importlib.import_module(module_name, package='rclpy')
  File ""/usr/lib/python3.4/importlib/__init__.py"", line 109, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 2254, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 2237, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 2224, in _find_and_load_unlocked
ImportError: No module named 'rclpy._rclpy__rmw_fastrtps_cpp'

From what I understand, fastrtps is chosen here even though it has been skipped over here
This is a pretty hack-y fix, but since this is the current default situation if following the linux install from source, I thought it would be worth patching.","I agree that we should add a better error message.
At the moment though, it's a fault of the code and not of the user. So, if I were testing ros2 for the first time I would not expect to have to do the workaround for this myself (especially in one of the first nodes that someone would try)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,10,2016-04-06T00:10:24Z,2016-04-06T00:51:22Z,2016-04-06T02:09:57Z,MERGED,True,3,0,1,https://github.com/dhood,Don't allow fastrtps to be selected in rclpy,1,[],https://github.com/ros2/rclpy/pull/10,https://github.com/wjwwood,8,https://github.com/ros2/rclpy/pull/10#issuecomment-206054674,"If I have both Connext and fastRTPS installed, I get the following error when trying to run either listener_py or talker_py
Traceback (most recent call last):
  File ""/home/dhood/ros2_ws/install_isolated/rclpy_examples/bin/listener_py"", line 9, in <module>
    load_entry_point('rclpy-examples==0.0.0', 'console_scripts', 'listener_py')()
  File ""/home/dhood/ros2_ws/build_isolated/rclpy_examples/listener_py.py"", line 30, in main
    rclpy.init(args)
  File ""/home/dhood/ros2_ws/install_isolated/rclpy/lib/python3.4/site-packages/rclpy/__init__.py"", line 42, in init
    rmw_implementation_tools.import_rmw_implementation()
  File ""/home/dhood/ros2_ws/install_isolated/rclpy/lib/python3.4/site-packages/rclpy/impl/rmw_implementation_tools.py"", line 85, in import_rmw_implementation
    __rmw_implementation_module = importlib.import_module(module_name, package='rclpy')
  File ""/usr/lib/python3.4/importlib/__init__.py"", line 109, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 2254, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 2237, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 2224, in _find_and_load_unlocked
ImportError: No module named 'rclpy._rclpy__rmw_fastrtps_cpp'

From what I understand, fastrtps is chosen here even though it has been skipped over here
This is a pretty hack-y fix, but since this is the current default situation if following the linux install from source, I thought it would be worth patching.","Ok, we're going to merge this and fix it in a more permanent way after the alpha 5 release.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,10,2016-04-06T00:10:24Z,2016-04-06T00:51:22Z,2016-04-06T02:09:57Z,MERGED,True,3,0,1,https://github.com/dhood,Don't allow fastrtps to be selected in rclpy,1,[],https://github.com/ros2/rclpy/pull/10,https://github.com/wjwwood,9,https://github.com/ros2/rclpy/pull/10#issuecomment-206056346,"If I have both Connext and fastRTPS installed, I get the following error when trying to run either listener_py or talker_py
Traceback (most recent call last):
  File ""/home/dhood/ros2_ws/install_isolated/rclpy_examples/bin/listener_py"", line 9, in <module>
    load_entry_point('rclpy-examples==0.0.0', 'console_scripts', 'listener_py')()
  File ""/home/dhood/ros2_ws/build_isolated/rclpy_examples/listener_py.py"", line 30, in main
    rclpy.init(args)
  File ""/home/dhood/ros2_ws/install_isolated/rclpy/lib/python3.4/site-packages/rclpy/__init__.py"", line 42, in init
    rmw_implementation_tools.import_rmw_implementation()
  File ""/home/dhood/ros2_ws/install_isolated/rclpy/lib/python3.4/site-packages/rclpy/impl/rmw_implementation_tools.py"", line 85, in import_rmw_implementation
    __rmw_implementation_module = importlib.import_module(module_name, package='rclpy')
  File ""/usr/lib/python3.4/importlib/__init__.py"", line 109, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 2254, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 2237, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 2224, in _find_and_load_unlocked
ImportError: No module named 'rclpy._rclpy__rmw_fastrtps_cpp'

From what I understand, fastrtps is chosen here even though it has been skipped over here
This is a pretty hack-y fix, but since this is the current default situation if following the linux install from source, I thought it would be worth patching.",I opened a new issue to track this: #11,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,10,2016-04-06T00:10:24Z,2016-04-06T00:51:22Z,2016-04-06T02:09:57Z,MERGED,True,3,0,1,https://github.com/dhood,Don't allow fastrtps to be selected in rclpy,1,[],https://github.com/ros2/rclpy/pull/10,https://github.com/dirk-thomas,10,https://github.com/ros2/rclpy/pull/10#issuecomment-206076846,"If I have both Connext and fastRTPS installed, I get the following error when trying to run either listener_py or talker_py
Traceback (most recent call last):
  File ""/home/dhood/ros2_ws/install_isolated/rclpy_examples/bin/listener_py"", line 9, in <module>
    load_entry_point('rclpy-examples==0.0.0', 'console_scripts', 'listener_py')()
  File ""/home/dhood/ros2_ws/build_isolated/rclpy_examples/listener_py.py"", line 30, in main
    rclpy.init(args)
  File ""/home/dhood/ros2_ws/install_isolated/rclpy/lib/python3.4/site-packages/rclpy/__init__.py"", line 42, in init
    rmw_implementation_tools.import_rmw_implementation()
  File ""/home/dhood/ros2_ws/install_isolated/rclpy/lib/python3.4/site-packages/rclpy/impl/rmw_implementation_tools.py"", line 85, in import_rmw_implementation
    __rmw_implementation_module = importlib.import_module(module_name, package='rclpy')
  File ""/usr/lib/python3.4/importlib/__init__.py"", line 109, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 2254, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 2237, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 2224, in _find_and_load_unlocked
ImportError: No module named 'rclpy._rclpy__rmw_fastrtps_cpp'

From what I understand, fastrtps is chosen here even though it has been skipped over here
This is a pretty hack-y fix, but since this is the current default situation if following the linux install from source, I thought it would be worth patching.",Fails PEP8 check: http://ci.ros2.org/job/ci_linux/1161/testReport/,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,12,2016-04-06T02:15:27Z,2016-04-26T20:07:04Z,2016-04-26T20:17:13Z,MERGED,True,116,10,4,https://github.com/wjwwood,Improved rclpy import failed message,5,[],https://github.com/ros2/rclpy/pull/12,https://github.com/wjwwood,1,https://github.com/ros2/rclpy/pull/12,"I achieved this by adding a helpful message which prints when the import fails, but only if it goes unhandled.
I wanted to avoid printing it always incase someone is explicitly trying each of the implementations and wants to avoid the logging output. To accomplish this I added a custom excepthook for rclpy to override the built-in sys.excepthook. You can also add ""addendum's"" for uncaught exceptions, which will printed before the traceback. In the custom excepthook, it looks for a matching addendum, prints it if it finds one, and then passes along the unhandled exception to the original excepthook.
This is the observed behavior:

In the normal case you get something like:

% python3 -c ""import talker_py; talker_py.main()""

Failed to import the Python extension for the 'rmw_fastrtps_cpp' rmw implementation.
A different rmw implementation can be selected using the 'RCLPY_IMPLEMENTATION' env variable.
These are the available rmw implementations:
  - rmw_fastrtps_cpp
  - rmw_opensplice_cpp

Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""/Users/william/ros2_ws/build_isolated/rclpy_examples/talker_py.py"", line 27, in main
    rclpy.init(args)
  File ""/Users/william/ros2_ws/install_isolated/rclpy/lib/python3.5/site-packages/rclpy/__init__.py"", line 47, in init
    rmw_implementation_tools.import_rmw_implementation()
  File ""/Users/william/ros2_ws/install_isolated/rclpy/lib/python3.5/site-packages/rclpy/impl/rmw_implementation_tools.py"", line 90, in import_rmw_implementation
    __rmw_implementation_module = importlib.import_module(module_name, package='rclpy')
  File ""/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/importlib/__init__.py"", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 986, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 969, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 956, in _find_and_load_unlocked
ImportError: No module named 'rclpy._rclpy__rmw_fastrtps_cpp'


In the case that you catch it, you get:

% python3 -c ""
import talker_py
try:
    talker_py.main()
except ImportError:
    print('failed to import')
""
failed to import","I achieved this by adding a helpful message which prints when the import fails, but only if it goes unhandled.
I wanted to avoid printing it always incase someone is explicitly trying each of the implementations and wants to avoid the logging output. To accomplish this I added a custom excepthook for rclpy to override the built-in sys.excepthook. You can also add ""addendum's"" for uncaught exceptions, which will printed before the traceback. In the custom excepthook, it looks for a matching addendum, prints it if it finds one, and then passes along the unhandled exception to the original excepthook.
This is the observed behavior:

In the normal case you get something like:

% python3 -c ""import talker_py; talker_py.main()""

Failed to import the Python extension for the 'rmw_fastrtps_cpp' rmw implementation.
A different rmw implementation can be selected using the 'RCLPY_IMPLEMENTATION' env variable.
These are the available rmw implementations:
  - rmw_fastrtps_cpp
  - rmw_opensplice_cpp

Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""/Users/william/ros2_ws/build_isolated/rclpy_examples/talker_py.py"", line 27, in main
    rclpy.init(args)
  File ""/Users/william/ros2_ws/install_isolated/rclpy/lib/python3.5/site-packages/rclpy/__init__.py"", line 47, in init
    rmw_implementation_tools.import_rmw_implementation()
  File ""/Users/william/ros2_ws/install_isolated/rclpy/lib/python3.5/site-packages/rclpy/impl/rmw_implementation_tools.py"", line 90, in import_rmw_implementation
    __rmw_implementation_module = importlib.import_module(module_name, package='rclpy')
  File ""/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/importlib/__init__.py"", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 986, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 969, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 956, in _find_and_load_unlocked
ImportError: No module named 'rclpy._rclpy__rmw_fastrtps_cpp'


In the case that you catch it, you get:

% python3 -c ""
import talker_py
try:
    talker_py.main()
except ImportError:
    print('failed to import')
""
failed to import",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,12,2016-04-06T02:15:27Z,2016-04-26T20:07:04Z,2016-04-26T20:17:13Z,MERGED,True,116,10,4,https://github.com/wjwwood,Improved rclpy import failed message,5,[],https://github.com/ros2/rclpy/pull/12,https://github.com/wjwwood,2,https://github.com/ros2/rclpy/pull/12#issuecomment-206086394,"I achieved this by adding a helpful message which prints when the import fails, but only if it goes unhandled.
I wanted to avoid printing it always incase someone is explicitly trying each of the implementations and wants to avoid the logging output. To accomplish this I added a custom excepthook for rclpy to override the built-in sys.excepthook. You can also add ""addendum's"" for uncaught exceptions, which will printed before the traceback. In the custom excepthook, it looks for a matching addendum, prints it if it finds one, and then passes along the unhandled exception to the original excepthook.
This is the observed behavior:

In the normal case you get something like:

% python3 -c ""import talker_py; talker_py.main()""

Failed to import the Python extension for the 'rmw_fastrtps_cpp' rmw implementation.
A different rmw implementation can be selected using the 'RCLPY_IMPLEMENTATION' env variable.
These are the available rmw implementations:
  - rmw_fastrtps_cpp
  - rmw_opensplice_cpp

Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""/Users/william/ros2_ws/build_isolated/rclpy_examples/talker_py.py"", line 27, in main
    rclpy.init(args)
  File ""/Users/william/ros2_ws/install_isolated/rclpy/lib/python3.5/site-packages/rclpy/__init__.py"", line 47, in init
    rmw_implementation_tools.import_rmw_implementation()
  File ""/Users/william/ros2_ws/install_isolated/rclpy/lib/python3.5/site-packages/rclpy/impl/rmw_implementation_tools.py"", line 90, in import_rmw_implementation
    __rmw_implementation_module = importlib.import_module(module_name, package='rclpy')
  File ""/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/importlib/__init__.py"", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 986, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 969, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 956, in _find_and_load_unlocked
ImportError: No module named 'rclpy._rclpy__rmw_fastrtps_cpp'


In the case that you catch it, you get:

% python3 -c ""
import talker_py
try:
    talker_py.main()
except ImportError:
    print('failed to import')
""
failed to import",I also addressed the style problems from #10 (comment).,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,12,2016-04-06T02:15:27Z,2016-04-26T20:07:04Z,2016-04-26T20:17:13Z,MERGED,True,116,10,4,https://github.com/wjwwood,Improved rclpy import failed message,5,[],https://github.com/ros2/rclpy/pull/12,https://github.com/wjwwood,3,https://github.com/ros2/rclpy/pull/12#issuecomment-206088575,"I achieved this by adding a helpful message which prints when the import fails, but only if it goes unhandled.
I wanted to avoid printing it always incase someone is explicitly trying each of the implementations and wants to avoid the logging output. To accomplish this I added a custom excepthook for rclpy to override the built-in sys.excepthook. You can also add ""addendum's"" for uncaught exceptions, which will printed before the traceback. In the custom excepthook, it looks for a matching addendum, prints it if it finds one, and then passes along the unhandled exception to the original excepthook.
This is the observed behavior:

In the normal case you get something like:

% python3 -c ""import talker_py; talker_py.main()""

Failed to import the Python extension for the 'rmw_fastrtps_cpp' rmw implementation.
A different rmw implementation can be selected using the 'RCLPY_IMPLEMENTATION' env variable.
These are the available rmw implementations:
  - rmw_fastrtps_cpp
  - rmw_opensplice_cpp

Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""/Users/william/ros2_ws/build_isolated/rclpy_examples/talker_py.py"", line 27, in main
    rclpy.init(args)
  File ""/Users/william/ros2_ws/install_isolated/rclpy/lib/python3.5/site-packages/rclpy/__init__.py"", line 47, in init
    rmw_implementation_tools.import_rmw_implementation()
  File ""/Users/william/ros2_ws/install_isolated/rclpy/lib/python3.5/site-packages/rclpy/impl/rmw_implementation_tools.py"", line 90, in import_rmw_implementation
    __rmw_implementation_module = importlib.import_module(module_name, package='rclpy')
  File ""/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/importlib/__init__.py"", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 986, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 969, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 956, in _find_and_load_unlocked
ImportError: No module named 'rclpy._rclpy__rmw_fastrtps_cpp'


In the case that you catch it, you get:

% python3 -c ""
import talker_py
try:
    talker_py.main()
except ImportError:
    print('failed to import')
""
failed to import","Actually, scratch that. I remove the commit that cleans up #10 so I can put it in a different pr.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,12,2016-04-06T02:15:27Z,2016-04-26T20:07:04Z,2016-04-26T20:17:13Z,MERGED,True,116,10,4,https://github.com/wjwwood,Improved rclpy import failed message,5,[],https://github.com/ros2/rclpy/pull/12,https://github.com/wjwwood,4,https://github.com/ros2/rclpy/pull/12#issuecomment-209162396,"I achieved this by adding a helpful message which prints when the import fails, but only if it goes unhandled.
I wanted to avoid printing it always incase someone is explicitly trying each of the implementations and wants to avoid the logging output. To accomplish this I added a custom excepthook for rclpy to override the built-in sys.excepthook. You can also add ""addendum's"" for uncaught exceptions, which will printed before the traceback. In the custom excepthook, it looks for a matching addendum, prints it if it finds one, and then passes along the unhandled exception to the original excepthook.
This is the observed behavior:

In the normal case you get something like:

% python3 -c ""import talker_py; talker_py.main()""

Failed to import the Python extension for the 'rmw_fastrtps_cpp' rmw implementation.
A different rmw implementation can be selected using the 'RCLPY_IMPLEMENTATION' env variable.
These are the available rmw implementations:
  - rmw_fastrtps_cpp
  - rmw_opensplice_cpp

Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""/Users/william/ros2_ws/build_isolated/rclpy_examples/talker_py.py"", line 27, in main
    rclpy.init(args)
  File ""/Users/william/ros2_ws/install_isolated/rclpy/lib/python3.5/site-packages/rclpy/__init__.py"", line 47, in init
    rmw_implementation_tools.import_rmw_implementation()
  File ""/Users/william/ros2_ws/install_isolated/rclpy/lib/python3.5/site-packages/rclpy/impl/rmw_implementation_tools.py"", line 90, in import_rmw_implementation
    __rmw_implementation_module = importlib.import_module(module_name, package='rclpy')
  File ""/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/importlib/__init__.py"", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 986, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 969, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 956, in _find_and_load_unlocked
ImportError: No module named 'rclpy._rclpy__rmw_fastrtps_cpp'


In the case that you catch it, you get:

% python3 -c ""
import talker_py
try:
    talker_py.main()
except ImportError:
    print('failed to import')
""
failed to import","CI:

http://ci.ros2.org/job/ci_linux/1174/
http://ci.ros2.org/job/ci_osx/949/
http://ci.ros2.org/job/ci_windows/1229/",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,12,2016-04-06T02:15:27Z,2016-04-26T20:07:04Z,2016-04-26T20:17:13Z,MERGED,True,116,10,4,https://github.com/wjwwood,Improved rclpy import failed message,5,[],https://github.com/ros2/rclpy/pull/12,https://github.com/wjwwood,5,https://github.com/ros2/rclpy/pull/12#issuecomment-209174073,"I achieved this by adding a helpful message which prints when the import fails, but only if it goes unhandled.
I wanted to avoid printing it always incase someone is explicitly trying each of the implementations and wants to avoid the logging output. To accomplish this I added a custom excepthook for rclpy to override the built-in sys.excepthook. You can also add ""addendum's"" for uncaught exceptions, which will printed before the traceback. In the custom excepthook, it looks for a matching addendum, prints it if it finds one, and then passes along the unhandled exception to the original excepthook.
This is the observed behavior:

In the normal case you get something like:

% python3 -c ""import talker_py; talker_py.main()""

Failed to import the Python extension for the 'rmw_fastrtps_cpp' rmw implementation.
A different rmw implementation can be selected using the 'RCLPY_IMPLEMENTATION' env variable.
These are the available rmw implementations:
  - rmw_fastrtps_cpp
  - rmw_opensplice_cpp

Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""/Users/william/ros2_ws/build_isolated/rclpy_examples/talker_py.py"", line 27, in main
    rclpy.init(args)
  File ""/Users/william/ros2_ws/install_isolated/rclpy/lib/python3.5/site-packages/rclpy/__init__.py"", line 47, in init
    rmw_implementation_tools.import_rmw_implementation()
  File ""/Users/william/ros2_ws/install_isolated/rclpy/lib/python3.5/site-packages/rclpy/impl/rmw_implementation_tools.py"", line 90, in import_rmw_implementation
    __rmw_implementation_module = importlib.import_module(module_name, package='rclpy')
  File ""/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/importlib/__init__.py"", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 986, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 969, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 956, in _find_and_load_unlocked
ImportError: No module named 'rclpy._rclpy__rmw_fastrtps_cpp'


In the case that you catch it, you get:

% python3 -c ""
import talker_py
try:
    talker_py.main()
except ImportError:
    print('failed to import')
""
failed to import","I fixed http://ci.ros2.org/job/ci_linux/1174/testReport/junit/projectroot.home.rosbuild.ci_scripts.ws.src.ros2.rclpy/rclpy/pep257/ in b994e52, it shouldn't need a retest.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,12,2016-04-06T02:15:27Z,2016-04-26T20:07:04Z,2016-04-26T20:17:13Z,MERGED,True,116,10,4,https://github.com/wjwwood,Improved rclpy import failed message,5,[],https://github.com/ros2/rclpy/pull/12,https://github.com/wjwwood,6,https://github.com/ros2/rclpy/pull/12#issuecomment-209189590,"I achieved this by adding a helpful message which prints when the import fails, but only if it goes unhandled.
I wanted to avoid printing it always incase someone is explicitly trying each of the implementations and wants to avoid the logging output. To accomplish this I added a custom excepthook for rclpy to override the built-in sys.excepthook. You can also add ""addendum's"" for uncaught exceptions, which will printed before the traceback. In the custom excepthook, it looks for a matching addendum, prints it if it finds one, and then passes along the unhandled exception to the original excepthook.
This is the observed behavior:

In the normal case you get something like:

% python3 -c ""import talker_py; talker_py.main()""

Failed to import the Python extension for the 'rmw_fastrtps_cpp' rmw implementation.
A different rmw implementation can be selected using the 'RCLPY_IMPLEMENTATION' env variable.
These are the available rmw implementations:
  - rmw_fastrtps_cpp
  - rmw_opensplice_cpp

Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""/Users/william/ros2_ws/build_isolated/rclpy_examples/talker_py.py"", line 27, in main
    rclpy.init(args)
  File ""/Users/william/ros2_ws/install_isolated/rclpy/lib/python3.5/site-packages/rclpy/__init__.py"", line 47, in init
    rmw_implementation_tools.import_rmw_implementation()
  File ""/Users/william/ros2_ws/install_isolated/rclpy/lib/python3.5/site-packages/rclpy/impl/rmw_implementation_tools.py"", line 90, in import_rmw_implementation
    __rmw_implementation_module = importlib.import_module(module_name, package='rclpy')
  File ""/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/importlib/__init__.py"", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 986, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 969, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 956, in _find_and_load_unlocked
ImportError: No module named 'rclpy._rclpy__rmw_fastrtps_cpp'


In the case that you catch it, you get:

% python3 -c ""
import talker_py
try:
    talker_py.main()
except ImportError:
    print('failed to import')
""
failed to import","I believe all the CI is satisfactory (with my pep257 fix), looking for final reviews before squash and merge.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,12,2016-04-06T02:15:27Z,2016-04-26T20:07:04Z,2016-04-26T20:17:13Z,MERGED,True,116,10,4,https://github.com/wjwwood,Improved rclpy import failed message,5,[],https://github.com/ros2/rclpy/pull/12,https://github.com/wjwwood,7,https://github.com/ros2/rclpy/pull/12#issuecomment-214869606,"I achieved this by adding a helpful message which prints when the import fails, but only if it goes unhandled.
I wanted to avoid printing it always incase someone is explicitly trying each of the implementations and wants to avoid the logging output. To accomplish this I added a custom excepthook for rclpy to override the built-in sys.excepthook. You can also add ""addendum's"" for uncaught exceptions, which will printed before the traceback. In the custom excepthook, it looks for a matching addendum, prints it if it finds one, and then passes along the unhandled exception to the original excepthook.
This is the observed behavior:

In the normal case you get something like:

% python3 -c ""import talker_py; talker_py.main()""

Failed to import the Python extension for the 'rmw_fastrtps_cpp' rmw implementation.
A different rmw implementation can be selected using the 'RCLPY_IMPLEMENTATION' env variable.
These are the available rmw implementations:
  - rmw_fastrtps_cpp
  - rmw_opensplice_cpp

Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""/Users/william/ros2_ws/build_isolated/rclpy_examples/talker_py.py"", line 27, in main
    rclpy.init(args)
  File ""/Users/william/ros2_ws/install_isolated/rclpy/lib/python3.5/site-packages/rclpy/__init__.py"", line 47, in init
    rmw_implementation_tools.import_rmw_implementation()
  File ""/Users/william/ros2_ws/install_isolated/rclpy/lib/python3.5/site-packages/rclpy/impl/rmw_implementation_tools.py"", line 90, in import_rmw_implementation
    __rmw_implementation_module = importlib.import_module(module_name, package='rclpy')
  File ""/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/importlib/__init__.py"", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 986, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 969, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 956, in _find_and_load_unlocked
ImportError: No module named 'rclpy._rclpy__rmw_fastrtps_cpp'


In the case that you catch it, you get:

% python3 -c ""
import talker_py
try:
    talker_py.main()
except ImportError:
    print('failed to import')
""
failed to import","I believe all the CI is satisfactory (with my pep257 fix), looking for final reviews before squash and merge.

bump",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,12,2016-04-06T02:15:27Z,2016-04-26T20:07:04Z,2016-04-26T20:17:13Z,MERGED,True,116,10,4,https://github.com/wjwwood,Improved rclpy import failed message,5,[],https://github.com/ros2/rclpy/pull/12,https://github.com/jacquelinekay,8,https://github.com/ros2/rclpy/pull/12#issuecomment-214870181,"I achieved this by adding a helpful message which prints when the import fails, but only if it goes unhandled.
I wanted to avoid printing it always incase someone is explicitly trying each of the implementations and wants to avoid the logging output. To accomplish this I added a custom excepthook for rclpy to override the built-in sys.excepthook. You can also add ""addendum's"" for uncaught exceptions, which will printed before the traceback. In the custom excepthook, it looks for a matching addendum, prints it if it finds one, and then passes along the unhandled exception to the original excepthook.
This is the observed behavior:

In the normal case you get something like:

% python3 -c ""import talker_py; talker_py.main()""

Failed to import the Python extension for the 'rmw_fastrtps_cpp' rmw implementation.
A different rmw implementation can be selected using the 'RCLPY_IMPLEMENTATION' env variable.
These are the available rmw implementations:
  - rmw_fastrtps_cpp
  - rmw_opensplice_cpp

Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""/Users/william/ros2_ws/build_isolated/rclpy_examples/talker_py.py"", line 27, in main
    rclpy.init(args)
  File ""/Users/william/ros2_ws/install_isolated/rclpy/lib/python3.5/site-packages/rclpy/__init__.py"", line 47, in init
    rmw_implementation_tools.import_rmw_implementation()
  File ""/Users/william/ros2_ws/install_isolated/rclpy/lib/python3.5/site-packages/rclpy/impl/rmw_implementation_tools.py"", line 90, in import_rmw_implementation
    __rmw_implementation_module = importlib.import_module(module_name, package='rclpy')
  File ""/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/importlib/__init__.py"", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 986, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 969, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 956, in _find_and_load_unlocked
ImportError: No module named 'rclpy._rclpy__rmw_fastrtps_cpp'


In the case that you catch it, you get:

% python3 -c ""
import talker_py
try:
    talker_py.main()
except ImportError:
    print('failed to import')
""
failed to import",+1,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,13,2016-04-06T04:21:59Z,2016-04-12T18:02:37Z,2016-04-12T18:02:47Z,MERGED,True,21,31,3,https://github.com/wjwwood,register rmw python extensions separately,5,[],https://github.com/ros2/rclpy/pull/13,https://github.com/wjwwood,1,https://github.com/ros2/rclpy/pull/13,"I added a new ""ament index"" entry specifically for rmw implementations with Python extensions and use that to load from. This removes the need for the blacklist in #10 and also addresses the style issues from #10.
I also removed the exceptions in the tests for these failures. However, in order to get the tests working I had to add another patch to ament_cmake so that I can use the ament index before installing.","I added a new ""ament index"" entry specifically for rmw implementations with Python extensions and use that to load from. This removes the need for the blacklist in #10 and also addresses the style issues from #10.
I also removed the exceptions in the tests for these failures. However, in order to get the tests working I had to add another patch to ament_cmake so that I can use the ament index before installing.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,13,2016-04-06T04:21:59Z,2016-04-12T18:02:37Z,2016-04-12T18:02:47Z,MERGED,True,21,31,3,https://github.com/wjwwood,register rmw python extensions separately,5,[],https://github.com/ros2/rclpy/pull/13,https://github.com/wjwwood,2,https://github.com/ros2/rclpy/pull/13#issuecomment-206113215,"I added a new ""ament index"" entry specifically for rmw implementations with Python extensions and use that to load from. This removes the need for the blacklist in #10 and also addresses the style issues from #10.
I also removed the exceptions in the tests for these failures. However, in order to get the tests working I had to add another patch to ament_cmake so that I can use the ament index before installing.",See: ament/ament_cmake#65,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,13,2016-04-06T04:21:59Z,2016-04-12T18:02:37Z,2016-04-12T18:02:47Z,MERGED,True,21,31,3,https://github.com/wjwwood,register rmw python extensions separately,5,[],https://github.com/ros2/rclpy/pull/13,https://github.com/wjwwood,3,https://github.com/ros2/rclpy/pull/13#issuecomment-208665157,"I added a new ""ament index"" entry specifically for rmw implementations with Python extensions and use that to load from. This removes the need for the blacklist in #10 and also addresses the style issues from #10.
I also removed the exceptions in the tests for these failures. However, in order to get the tests working I had to add another patch to ament_cmake so that I can use the ament index before installing.","I started a new CI:

http://ci.ros2.org/job/ci_linux/1170/
http://ci.ros2.org/job/ci_osx/946/
http://ci.ros2.org/job/ci_windows/1226/",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,13,2016-04-06T04:21:59Z,2016-04-12T18:02:37Z,2016-04-12T18:02:47Z,MERGED,True,21,31,3,https://github.com/wjwwood,register rmw python extensions separately,5,[],https://github.com/ros2/rclpy/pull/13,https://github.com/dirk-thomas,4,https://github.com/ros2/rclpy/pull/13#issuecomment-208712362,"I added a new ""ament index"" entry specifically for rmw implementations with Python extensions and use that to load from. This removes the need for the blacklist in #10 and also addresses the style issues from #10.
I also removed the exceptions in the tests for these failures. However, in order to get the tests working I had to add another patch to ament_cmake so that I can use the ament index before installing.",LGTM,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,14,2016-04-06T15:58:07Z,2016-04-06T19:59:31Z,2016-04-06T22:41:32Z,MERGED,True,5,2,1,https://github.com/dhood,fix lint tests,1,[],https://github.com/ros2/rclpy/pull/14,https://github.com/dhood,1,https://github.com/ros2/rclpy/pull/14,,,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,14,2016-04-06T15:58:07Z,2016-04-06T19:59:31Z,2016-04-06T22:41:32Z,MERGED,True,5,2,1,https://github.com/dhood,fix lint tests,1,[],https://github.com/ros2/rclpy/pull/14,https://github.com/dhood,2,https://github.com/ros2/rclpy/pull/14#issuecomment-206465313,,dealt with in #13,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,14,2016-04-06T15:58:07Z,2016-04-06T19:59:31Z,2016-04-06T22:41:32Z,MERGED,True,5,2,1,https://github.com/dhood,fix lint tests,1,[],https://github.com/ros2/rclpy/pull/14,https://github.com/dirk-thomas,3,https://github.com/ros2/rclpy/pull/14#issuecomment-206504279,,Since @wjwwood removed the patch from his PR (#12 (comment)) this can be reopened.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,14,2016-04-06T15:58:07Z,2016-04-06T19:59:31Z,2016-04-06T22:41:32Z,MERGED,True,5,2,1,https://github.com/dhood,fix lint tests,1,[],https://github.com/ros2/rclpy/pull/14,https://github.com/wjwwood,4,https://github.com/ros2/rclpy/pull/14#issuecomment-206504679,,We can certainly merge this before mine. +1 (with @dirk-thomas's comments addressed).,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,14,2016-04-06T15:58:07Z,2016-04-06T19:59:31Z,2016-04-06T22:41:32Z,MERGED,True,5,2,1,https://github.com/dhood,fix lint tests,1,[],https://github.com/ros2/rclpy/pull/14,https://github.com/dhood,5,https://github.com/ros2/rclpy/pull/14#issuecomment-206509422,,ok fixed. Sorry about this pep8 stuff - something is missing on my system so that the lint checks are just spitting out junk (around 1000 lines just for rclpy). I'll find whatever is missing today and add it to the ros2 install instructions.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,14,2016-04-06T15:58:07Z,2016-04-06T19:59:31Z,2016-04-06T22:41:32Z,MERGED,True,5,2,1,https://github.com/dhood,fix lint tests,1,[],https://github.com/ros2/rclpy/pull/14,https://github.com/dirk-thomas,6,https://github.com/ros2/rclpy/pull/14#issuecomment-206517734,,+1,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,14,2016-04-06T15:58:07Z,2016-04-06T19:59:31Z,2016-04-06T22:41:32Z,MERGED,True,5,2,1,https://github.com/dhood,fix lint tests,1,[],https://github.com/ros2/rclpy/pull/14,https://github.com/wjwwood,7,https://github.com/ros2/rclpy/pull/14#issuecomment-206533386,,lgtm too,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,14,2016-04-06T15:58:07Z,2016-04-06T19:59:31Z,2016-04-06T22:41:32Z,MERGED,True,5,2,1,https://github.com/dhood,fix lint tests,1,[],https://github.com/ros2/rclpy/pull/14,https://github.com/dhood,8,https://github.com/ros2/rclpy/pull/14#issuecomment-206588043,,"Regarding my previous comment re linter tests failing, I found (in addition to ament/ament_lint#48) that in the CI build there's a line
Step 14 : RUN apt-get update && apt-get install -y clang-format-3.4 cppcheck git pyflakes python3-coverage python3-mock python3-nose python3-pep8 uncrustify

which is (mostly) missing from the source installation instructions, so I was missing some of the packages.
Since the instructions call ament with --build-tests, should we also include a line in the instructions for the appropriate packages to run the tests? Or is there a more appropriate way to fix this?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,14,2016-04-06T15:58:07Z,2016-04-06T19:59:31Z,2016-04-06T22:41:32Z,MERGED,True,5,2,1,https://github.com/dhood,fix lint tests,1,[],https://github.com/ros2/rclpy/pull/14,https://github.com/wjwwood,9,https://github.com/ros2/rclpy/pull/14#issuecomment-206599678,,"@dhood I think you're right, it appears to be missing from both the Linux and OS X development guides. Ironically I think the Windows setup guide is up-to-date: https://github.com/ros2/ros2/wiki/Windows-Development-Setup#installing-a-few-dependencies
It's probably because our Linux and OS X machines are already set up with these tools for our other work, whereas the Windows machines are otherwise unused. Can you update those wiki pages (Linux and OS X)? If you need help or want a review on your changes, just let me know.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,15,2016-04-06T22:14:31Z,2016-04-30T00:11:15Z,2016-10-30T17:26:46Z,CLOSED,False,0,4,1,https://github.com/jacquelinekay,Reenable connext dynamic,1,[],https://github.com/ros2/rclpy/pull/15,https://github.com/jacquelinekay,1,https://github.com/ros2/rclpy/pull/15,With the changes made in ros2/rosidl#115 this will allow us to use the dynamic implementation of Connext in rclpy.,With the changes made in ros2/rosidl#115 this will allow us to use the dynamic implementation of Connext in rclpy.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,15,2016-04-06T22:14:31Z,2016-04-30T00:11:15Z,2016-10-30T17:26:46Z,CLOSED,False,0,4,1,https://github.com/jacquelinekay,Reenable connext dynamic,1,[],https://github.com/ros2/rclpy/pull/15,https://github.com/jacquelinekay,2,https://github.com/ros2/rclpy/pull/15#issuecomment-215900466,With the changes made in ros2/rosidl#115 this will allow us to use the dynamic implementation of Connext in rclpy.,"Seeing if Connext Dynamic and Python get along:
http://ci.ros2.org/job/ci_linux/1248/
http://ci.ros2.org/job/ci_osx/1003/
http://ci.ros2.org/job/ci_windows/1286/",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,15,2016-04-06T22:14:31Z,2016-04-30T00:11:15Z,2016-10-30T17:26:46Z,CLOSED,False,0,4,1,https://github.com/jacquelinekay,Reenable connext dynamic,1,[],https://github.com/ros2/rclpy/pull/15,https://github.com/jacquelinekay,3,https://github.com/ros2/rclpy/pull/15#issuecomment-215903465,With the changes made in ros2/rosidl#115 this will allow us to use the dynamic implementation of Connext in rclpy.,I forgot that rclpytests doesn't produce different test results for the different middlewares. Locally I can see that the package built a _rclpy__rmw_connext_dynamic_cpp.cpython(etc...).so.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,15,2016-04-06T22:14:31Z,2016-04-30T00:11:15Z,2016-10-30T17:26:46Z,CLOSED,False,0,4,1,https://github.com/jacquelinekay,Reenable connext dynamic,1,[],https://github.com/ros2/rclpy/pull/15,https://github.com/jacquelinekay,4,https://github.com/ros2/rclpy/pull/15#issuecomment-215912466,With the changes made in ros2/rosidl#115 this will allow us to use the dynamic implementation of Connext in rclpy.,"nevermind, I have a better solution coming up.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,16,2016-04-13T01:38:45Z,2016-04-27T21:57:40Z,2016-05-04T13:47:25Z,MERGED,True,107,13,4,https://github.com/mikaelarguedas,extended test to cover nested messages,1,[],https://github.com/ros2/rclpy/pull/16,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/16,"Connects to ros2/rosidl#96
This PR allows to test nested messages added in ros2/rosidl#113","Connects to ros2/rosidl#96
This PR allows to test nested messages added in ros2/rosidl#113",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,16,2016-04-13T01:38:45Z,2016-04-27T21:57:40Z,2016-05-04T13:47:25Z,MERGED,True,107,13,4,https://github.com/mikaelarguedas,extended test to cover nested messages,1,[],https://github.com/ros2/rclpy/pull/16,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/16#issuecomment-214826401,"Connects to ros2/rosidl#96
This PR allows to test nested messages added in ros2/rosidl#113",@dirk-thomas Could you have a look at this PR and give me some feedback? Thanks!,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,16,2016-04-13T01:38:45Z,2016-04-27T21:57:40Z,2016-05-04T13:47:25Z,MERGED,True,107,13,4,https://github.com/mikaelarguedas,extended test to cover nested messages,1,[],https://github.com/ros2/rclpy/pull/16,https://github.com/mikaelarguedas,3,https://github.com/ros2/rclpy/pull/16#issuecomment-215131340,"Connects to ros2/rosidl#96
This PR allows to test nested messages added in ros2/rosidl#113",thanks @dirk-thomas for reviewing.  Addressed the comments in the previous commit. Let me know if you have any other comments.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,16,2016-04-13T01:38:45Z,2016-04-27T21:57:40Z,2016-05-04T13:47:25Z,MERGED,True,107,13,4,https://github.com/mikaelarguedas,extended test to cover nested messages,1,[],https://github.com/ros2/rclpy/pull/16,https://github.com/mikaelarguedas,4,https://github.com/ros2/rclpy/pull/16#issuecomment-215170043,"Connects to ros2/rosidl#96
This PR allows to test nested messages added in ros2/rosidl#113",Should I rerun CI for that or are we good to merge #16 and ros2/rosidl#113?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,16,2016-04-13T01:38:45Z,2016-04-27T21:57:40Z,2016-05-04T13:47:25Z,MERGED,True,107,13,4,https://github.com/mikaelarguedas,extended test to cover nested messages,1,[],https://github.com/ros2/rclpy/pull/16,https://github.com/dirk-thomas,5,https://github.com/ros2/rclpy/pull/16#issuecomment-215170727,"Connects to ros2/rosidl#96
This PR allows to test nested messages added in ros2/rosidl#113",Your call. If nothing significant has changed since the last CI runs and you are confident it still works the same you might merge without running another set of jobs.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,18,2016-04-18T23:42:51Z,2016-04-18T23:55:20Z,2016-04-18T23:55:24Z,MERGED,True,6,20,1,https://github.com/jacquelinekay,remove hardcoded map from implementation identifier test,1,[],https://github.com/ros2/rclpy/pull/18,https://github.com/jacquelinekay,1,https://github.com/ros2/rclpy/pull/18,This will fix the failing CI.,This will fix the failing CI.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,18,2016-04-18T23:42:51Z,2016-04-18T23:55:20Z,2016-04-18T23:55:24Z,MERGED,True,6,20,1,https://github.com/jacquelinekay,remove hardcoded map from implementation identifier test,1,[],https://github.com/ros2/rclpy/pull/18,https://github.com/wjwwood,2,https://github.com/ros2/rclpy/pull/18#issuecomment-211635537,This will fix the failing CI.,Lgtm,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,18,2016-04-18T23:42:51Z,2016-04-18T23:55:20Z,2016-04-18T23:55:24Z,MERGED,True,6,20,1,https://github.com/jacquelinekay,remove hardcoded map from implementation identifier test,1,[],https://github.com/ros2/rclpy/pull/18,https://github.com/jacquelinekay,3,https://github.com/ros2/rclpy/pull/18#issuecomment-211635698,This will fix the failing CI.,http://ci.ros2.org/job/ci_linux/1204/ gonna just check that this is green then I'll merge.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,19,2016-04-26T20:16:42Z,2016-04-28T00:56:24Z,2016-04-28T00:56:29Z,MERGED,True,1,1,1,https://github.com/wjwwood,fix import order,1,[],https://github.com/ros2/rclpy/pull/19,https://github.com/wjwwood,1,https://github.com/ros2/rclpy/pull/19,Follow up to #12,Follow up to #12,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,19,2016-04-26T20:16:42Z,2016-04-28T00:56:24Z,2016-04-28T00:56:29Z,MERGED,True,1,1,1,https://github.com/wjwwood,fix import order,1,[],https://github.com/ros2/rclpy/pull/19,https://github.com/wjwwood,2,https://github.com/ros2/rclpy/pull/19#issuecomment-215276371,Follow up to #12,I'm gonna merge this since it's trivial. I tested it locally for bizarre consequences.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,20,2016-04-29T01:51:36Z,2016-05-02T17:11:40Z,2016-05-02T17:11:43Z,MERGED,True,1,1,1,https://github.com/dirk-thomas,use CTest BUILD_TESTING,1,[],https://github.com/ros2/rclpy/pull/20,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/20,Connect to ament/ament_cmake#68,Connect to ament/ament_cmake#68,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,21,2016-04-30T01:23:02Z,2016-05-02T22:17:58Z,2016-05-02T22:22:14Z,MERGED,True,5,6,1,https://github.com/jacquelinekay,Skip building rclpy for rmw implementations with no C typesupport,1,[],https://github.com/ros2/rclpy/pull/21,https://github.com/jacquelinekay,1,https://github.com/ros2/rclpy/pull/21,"For reducing hardcoded rmw implementation blacklisting.
Needs ros2/rmw#67","For reducing hardcoded rmw implementation blacklisting.
Needs ros2/rmw#67",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,21,2016-04-30T01:23:02Z,2016-05-02T22:17:58Z,2016-05-02T22:22:14Z,MERGED,True,5,6,1,https://github.com/jacquelinekay,Skip building rclpy for rmw implementations with no C typesupport,1,[],https://github.com/ros2/rclpy/pull/21,https://github.com/jacquelinekay,2,https://github.com/ros2/rclpy/pull/21#issuecomment-215921083,"For reducing hardcoded rmw implementation blacklisting.
Needs ros2/rmw#67","http://ci.ros2.org/job/ci_linux/1249/
http://ci.ros2.org/job/ci_osx/1005/
http://ci.ros2.org/job/ci_windows/1287/",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,21,2016-04-30T01:23:02Z,2016-05-02T22:17:58Z,2016-05-02T22:22:14Z,MERGED,True,5,6,1,https://github.com/jacquelinekay,Skip building rclpy for rmw implementations with no C typesupport,1,[],https://github.com/ros2/rclpy/pull/21,https://github.com/dirk-thomas,3,https://github.com/ros2/rclpy/pull/21#issuecomment-215923143,"For reducing hardcoded rmw implementation blacklisting.
Needs ros2/rmw#67",Lgtm,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,23,2016-05-04T00:52:55Z,2016-05-06T19:45:22Z,2016-05-06T19:45:38Z,MERGED,True,222,4,6,https://github.com/mikaelarguedas,add tests for array,2,[],https://github.com/ros2/rclpy/pull/23,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/23,"Add testing for primitive arrays bounded or not + tests for nested messages arrays
Note: feature working but tests failing on windows because of underlying rclpy issues that should be addressed in a separate PR.
Connects to ros2/rosidl#114","Add testing for primitive arrays bounded or not + tests for nested messages arrays
Note: feature working but tests failing on windows because of underlying rclpy issues that should be addressed in a separate PR.
Connects to ros2/rosidl#114",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,23,2016-05-04T00:52:55Z,2016-05-06T19:45:22Z,2016-05-06T19:45:38Z,MERGED,True,222,4,6,https://github.com/mikaelarguedas,add tests for array,2,[],https://github.com/ros2/rclpy/pull/23,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/23#issuecomment-216770908,"Add testing for primitive arrays bounded or not + tests for nested messages arrays
Note: feature working but tests failing on windows because of underlying rclpy issues that should be addressed in a separate PR.
Connects to ros2/rosidl#114","CI:
http://ci.ros2.org/job/ci_osx/1008/
http://ci.ros2.org/job/ci_linux/1258/
http://ci.ros2.org/job/ci_windows/1294/ tests failing
The test failures on windows are the result of already existing breakage of rclpy on windows. These have been reproduced on simple talker_listener test in the following CI job:
http://ci.ros2.org/job/ci_windows/1293/",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,23,2016-05-04T00:52:55Z,2016-05-06T19:45:22Z,2016-05-06T19:45:38Z,MERGED,True,222,4,6,https://github.com/mikaelarguedas,add tests for array,2,[],https://github.com/ros2/rclpy/pull/23,https://github.com/dirk-thomas,3,https://github.com/ros2/rclpy/pull/23#issuecomment-216944592,"Add testing for primitive arrays bounded or not + tests for nested messages arrays
Note: feature working but tests failing on windows because of underlying rclpy issues that should be addressed in a separate PR.
Connects to ros2/rosidl#114",Beside the small comments I would be in favor of merging this - despite the fact that it adds one more failing test in Windows. But it allows us to move forwards on the additional Python related tasks.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,23,2016-05-04T00:52:55Z,2016-05-06T19:45:22Z,2016-05-06T19:45:38Z,MERGED,True,222,4,6,https://github.com/mikaelarguedas,add tests for array,2,[],https://github.com/ros2/rclpy/pull/23,https://github.com/mikaelarguedas,4,https://github.com/ros2/rclpy/pull/23#issuecomment-216948300,"Add testing for primitive arrays bounded or not + tests for nested messages arrays
Note: feature working but tests failing on windows because of underlying rclpy issues that should be addressed in a separate PR.
Connects to ros2/rosidl#114",Done,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,23,2016-05-04T00:52:55Z,2016-05-06T19:45:22Z,2016-05-06T19:45:38Z,MERGED,True,222,4,6,https://github.com/mikaelarguedas,add tests for array,2,[],https://github.com/ros2/rclpy/pull/23,https://github.com/dirk-thomas,5,https://github.com/ros2/rclpy/pull/23#issuecomment-216997970,"Add testing for primitive arrays bounded or not + tests for nested messages arrays
Note: feature working but tests failing on windows because of underlying rclpy issues that should be addressed in a separate PR.
Connects to ros2/rosidl#114","+1
@ros2/ros2_team Any other comments on this?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,23,2016-05-04T00:52:55Z,2016-05-06T19:45:22Z,2016-05-06T19:45:38Z,MERGED,True,222,4,6,https://github.com/mikaelarguedas,add tests for array,2,[],https://github.com/ros2/rclpy/pull/23,https://github.com/wjwwood,6,https://github.com/ros2/rclpy/pull/23#issuecomment-217499059,"Add testing for primitive arrays bounded or not + tests for nested messages arrays
Note: feature working but tests failing on windows because of underlying rclpy issues that should be addressed in a separate PR.
Connects to ros2/rosidl#114",+1,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,25,2016-05-06T01:17:01Z,2016-05-07T03:19:53Z,2016-05-07T03:19:57Z,MERGED,True,0,7,4,https://github.com/mikaelarguedas,Fix null terminator,1,[],https://github.com/ros2/rclpy/pull/25,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/25,"This removes the now useless string initialization in test files
Connects to #17
Relies on #23","This removes the now useless string initialization in test files
Connects to #17
Relies on #23",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,25,2016-05-06T01:17:01Z,2016-05-07T03:19:53Z,2016-05-07T03:19:57Z,MERGED,True,0,7,4,https://github.com/mikaelarguedas,Fix null terminator,1,[],https://github.com/ros2/rclpy/pull/25,https://github.com/wjwwood,2,https://github.com/ros2/rclpy/pull/25#issuecomment-217499354,"This removes the now useless string initialization in test files
Connects to #17
Relies on #23",d86dddf +1,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,26,2016-05-12T18:29:37Z,2016-07-11T23:50:02Z,2016-07-11T23:53:38Z,CLOSED,False,14,24,1,https://github.com/dirk-thomas,update style to pass new uncrustify version,1,[],https://github.com/ros2/rclpy/pull/26,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/26,"While the wrapped line without any extra indentation doesn't look appealing this is the only way I got it to pass the new uncrustify version.
Connect to ament/uncrustify#13","While the wrapped line without any extra indentation doesn't look appealing this is the only way I got it to pass the new uncrustify version.
Connect to ament/uncrustify#13",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,26,2016-05-12T18:29:37Z,2016-07-11T23:50:02Z,2016-07-11T23:53:38Z,CLOSED,False,14,24,1,https://github.com/dirk-thomas,update style to pass new uncrustify version,1,[],https://github.com/ros2/rclpy/pull/26,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/26#issuecomment-231899293,"While the wrapped line without any extra indentation doesn't look appealing this is the only way I got it to pass the new uncrustify version.
Connect to ament/uncrustify#13",Obsolete with the latest version of uncrustify from master.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,27,2016-05-12T23:46:52Z,2016-05-27T22:21:20Z,2016-05-27T22:48:33Z,MERGED,True,115,0,1,https://github.com/mikaelarguedas,add testing for init and shutdown,4,[],https://github.com/ros2/rclpy/pull/27,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/27,,,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,27,2016-05-12T23:46:52Z,2016-05-27T22:21:20Z,2016-05-27T22:48:33Z,MERGED,True,115,0,1,https://github.com/mikaelarguedas,add testing for init and shutdown,4,[],https://github.com/ros2/rclpy/pull/27,https://github.com/tfoote,2,https://github.com/ros2/rclpy/pull/27#issuecomment-222208267,,"The code lgtm, do you want to run ci on this?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,27,2016-05-12T23:46:52Z,2016-05-27T22:21:20Z,2016-05-27T22:48:33Z,MERGED,True,115,0,1,https://github.com/mikaelarguedas,add testing for init and shutdown,4,[],https://github.com/ros2/rclpy/pull/27,https://github.com/mikaelarguedas,3,https://github.com/ros2/rclpy/pull/27#issuecomment-222209843,,"Pending round of CI:

Linux:




OS X:




Windows:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,27,2016-05-12T23:46:52Z,2016-05-27T22:21:20Z,2016-05-27T22:48:33Z,MERGED,True,115,0,1,https://github.com/mikaelarguedas,add testing for init and shutdown,4,[],https://github.com/ros2/rclpy/pull/27,https://github.com/mikaelarguedas,4,https://github.com/ros2/rclpy/pull/27#issuecomment-222264572,,CI passed on all platforms,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,27,2016-05-12T23:46:52Z,2016-05-27T22:21:20Z,2016-05-27T22:48:33Z,MERGED,True,115,0,1,https://github.com/mikaelarguedas,add testing for init and shutdown,4,[],https://github.com/ros2/rclpy/pull/27,https://github.com/tfoote,5,https://github.com/ros2/rclpy/pull/27#issuecomment-222265817,,+1,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,28,2016-05-12T23:51:39Z,2016-05-26T19:39:11Z,2016-10-05T17:48:28Z,CLOSED,False,175,324,7,https://github.com/mikaelarguedas,refactor talker and listener to run in independent processes,8,[],https://github.com/ros2/rclpy/pull/28,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/28,"addresses current failing rclpy tests
Waiting for CI to see if it actually fixes the problem on windows","addresses current failing rclpy tests
Waiting for CI to see if it actually fixes the problem on windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,28,2016-05-12T23:51:39Z,2016-05-26T19:39:11Z,2016-10-05T17:48:28Z,CLOSED,False,175,324,7,https://github.com/mikaelarguedas,refactor talker and listener to run in independent processes,8,[],https://github.com/ros2/rclpy/pull/28,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/28#issuecomment-218931227,"addresses current failing rclpy tests
Waiting for CI to see if it actually fixes the problem on windows","I don't know if d98d61e actually makes sense.
Seems to be solving the failing tests on windows:
http://ci.ros2.org/job/ci_windows/1329/
http://ci.ros2.org/job/ci_linux/1297/
http://ci.ros2.org/job/ci_osx/1028/",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,28,2016-05-12T23:51:39Z,2016-05-26T19:39:11Z,2016-10-05T17:48:28Z,CLOSED,False,175,324,7,https://github.com/mikaelarguedas,refactor talker and listener to run in independent processes,8,[],https://github.com/ros2/rclpy/pull/28,https://github.com/mikaelarguedas,3,https://github.com/ros2/rclpy/pull/28#issuecomment-219201214,"addresses current failing rclpy tests
Waiting for CI to see if it actually fixes the problem on windows","no more rclpy test failure on CI:
http://ci.ros2.org/job/ci_linux/1300/
http://ci.ros2.org/job/ci_windows/1335/
http://ci.ros2.org/job/ci_osx/1030/",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,28,2016-05-12T23:51:39Z,2016-05-26T19:39:11Z,2016-10-05T17:48:28Z,CLOSED,False,175,324,7,https://github.com/mikaelarguedas,refactor talker and listener to run in independent processes,8,[],https://github.com/ros2/rclpy/pull/28,https://github.com/mikaelarguedas,4,https://github.com/ros2/rclpy/pull/28#issuecomment-219571934,"addresses current failing rclpy tests
Waiting for CI to see if it actually fixes the problem on windows","Done, thanks @dirk-thomas for your patience",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,28,2016-05-12T23:51:39Z,2016-05-26T19:39:11Z,2016-10-05T17:48:28Z,CLOSED,False,175,324,7,https://github.com/mikaelarguedas,refactor talker and listener to run in independent processes,8,[],https://github.com/ros2/rclpy/pull/28,https://github.com/tfoote,5,https://github.com/ros2/rclpy/pull/28#issuecomment-221395768,"addresses current failing rclpy tests
Waiting for CI to see if it actually fixes the problem on windows",From the meeting it would be good to refactor the message definitions into a separate test_interfaces package for shared coverage of message datatype corner cases. But this can be done in a followup.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,28,2016-05-12T23:51:39Z,2016-05-26T19:39:11Z,2016-10-05T17:48:28Z,CLOSED,False,175,324,7,https://github.com/mikaelarguedas,refactor talker and listener to run in independent processes,8,[],https://github.com/ros2/rclpy/pull/28,https://github.com/mikaelarguedas,6,https://github.com/ros2/rclpy/pull/28#issuecomment-221972680,"addresses current failing rclpy tests
Waiting for CI to see if it actually fixes the problem on windows",Closing this in favour of #30 and ros2/system_tests#121,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,29,2016-05-12T23:54:21Z,2016-05-26T19:53:11Z,2016-10-05T17:48:26Z,CLOSED,False,228,325,7,https://github.com/mikaelarguedas,Rclpy test multiple rmw implementations,9,[],https://github.com/ros2/rclpy/pull/29,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/29,"Connects to #22
Depends on #28
Test passes with connext_static and opensplice but it seems that connext_dynamic crashes on nested messages. Investigating now","Connects to #22
Depends on #28
Test passes with connext_static and opensplice but it seems that connext_dynamic crashes on nested messages. Investigating now",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,29,2016-05-12T23:54:21Z,2016-05-26T19:53:11Z,2016-10-05T17:48:26Z,CLOSED,False,228,325,7,https://github.com/mikaelarguedas,Rclpy test multiple rmw implementations,9,[],https://github.com/ros2/rclpy/pull/29,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/29#issuecomment-221976169,"Connects to #22
Depends on #28
Test passes with connext_static and opensplice but it seems that connext_dynamic crashes on nested messages. Investigating now",Closing this since the tests will not be stored here anymore. A follow up PR adding rmw_implementations testing will be opened in https://www.github.com/ros2/system_tests,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,30,2016-05-26T19:34:24Z,2016-06-11T01:04:03Z,2016-06-11T01:04:23Z,MERGED,True,0,424,6,https://github.com/mikaelarguedas,moved talker listener tests to test_communication package,1,[],https://github.com/ros2/rclpy/pull/30,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/30,"remove all talker_listener tests in favor of ros2/system_tests#121
Connects to #22","remove all talker_listener tests in favor of ros2/system_tests#121
Connects to #22",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,30,2016-05-26T19:34:24Z,2016-06-11T01:04:03Z,2016-06-11T01:04:23Z,MERGED,True,0,424,6,https://github.com/mikaelarguedas,moved talker listener tests to test_communication package,1,[],https://github.com/ros2/rclpy/pull/30,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/30#issuecomment-225315518,"remove all talker_listener tests in favor of ros2/system_tests#121
Connects to #22",please review,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,30,2016-05-26T19:34:24Z,2016-06-11T01:04:03Z,2016-06-11T01:04:23Z,MERGED,True,0,424,6,https://github.com/mikaelarguedas,moved talker listener tests to test_communication package,1,[],https://github.com/ros2/rclpy/pull/30,https://github.com/tfoote,3,https://github.com/ros2/rclpy/pull/30#issuecomment-225316582,"remove all talker_listener tests in favor of ros2/system_tests#121
Connects to #22",+1,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,32,2016-06-08T08:18:03Z,2017-01-09T19:08:05Z,2017-01-09T19:08:08Z,CLOSED,False,5,0,1,https://github.com/esteve,Disable on Android,1,[],https://github.com/ros2/rclpy/pull/32,https://github.com/esteve,1,https://github.com/ros2/rclpy/pull/32,Disable on Android,Disable on Android,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,32,2016-06-08T08:18:03Z,2017-01-09T19:08:05Z,2017-01-09T19:08:08Z,CLOSED,False,5,0,1,https://github.com/esteve,Disable on Android,1,[],https://github.com/ros2/rclpy/pull/32,https://github.com/tfoote,2,https://github.com/ros2/rclpy/pull/32#issuecomment-225070181,Disable on Android,+1,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,32,2016-06-08T08:18:03Z,2017-01-09T19:08:05Z,2017-01-09T19:08:08Z,CLOSED,False,5,0,1,https://github.com/esteve,Disable on Android,1,[],https://github.com/ros2/rclpy/pull/32,https://github.com/wjwwood,3,https://github.com/ros2/rclpy/pull/32#issuecomment-226315252,Disable on Android,"There was some concerns raised about where this returns from. Since it doesn't even call ament_package() it won't install anything, including a package.xml. And so it leaves us, at least me, wondering what happens to packages which depend on rclpy? Maybe this style of ""graceful failing"" is intended, but it's not clear how this package (and in general other packages) should be skipped when building for Android. Maybe it would useful to have some more insight into how you're doing the Android build.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,32,2016-06-08T08:18:03Z,2017-01-09T19:08:05Z,2017-01-09T19:08:08Z,CLOSED,False,5,0,1,https://github.com/esteve,Disable on Android,1,[],https://github.com/ros2/rclpy/pull/32,https://github.com/esteve,4,https://github.com/ros2/rclpy/pull/32#issuecomment-226431919,Disable on Android,"@wjwwood I disable rclpy_examples as well (which is the only one depending on rclpy), by either invoking --skip-packages rclpy_examples or adding an AMENT_IGNORE file, ideally there should be a way to skip ament_python packages without an explicit ament incantation, but I haven't looked into it. Any ideas?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,32,2016-06-08T08:18:03Z,2017-01-09T19:08:05Z,2017-01-09T19:08:08Z,CLOSED,False,5,0,1,https://github.com/esteve,Disable on Android,1,[],https://github.com/ros2/rclpy/pull/32,https://github.com/wjwwood,5,https://github.com/ros2/rclpy/pull/32#issuecomment-227320688,Disable on Android,"The AMENT_IGNORE files or just avoiding downloading the packages in question would be my suggestion. The reason I ask, is I'm wondering why you don't use AMENT_IGNORE in this package too rather than the suggested change here. Or put another way, why is this the only package which is disabled this, why not disable the other packages like rclpy_examples this way too?
My personal preference would be to disable any packages with AMENT_IGNORE files or remove them from the source space, rather than explicitly detecting and disabling all packages which don't work on Android. Simply because it keeps the CMakeLists.txt boilerplate in all of those packages smaller.
However, I'm willing to go with whatever is most convenient for you since you're working on Android, but we should be consistent either way.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,33,2016-06-10T20:52:50Z,2016-06-15T04:59:51Z,2016-06-15T04:59:55Z,MERGED,True,1,3,1,https://github.com/dirk-thomas,require Python 3.5,1,[],https://github.com/ros2/rclpy/pull/33,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/33,Only merge after the switch to Xenial.,Only merge after the switch to Xenial.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,33,2016-06-10T20:52:50Z,2016-06-15T04:59:51Z,2016-06-15T04:59:55Z,MERGED,True,1,3,1,https://github.com/dirk-thomas,require Python 3.5,1,[],https://github.com/ros2/rclpy/pull/33,https://github.com/jacquelinekay,2,https://github.com/ros2/rclpy/pull/33#issuecomment-226066704,Only merge after the switch to Xenial.,+1,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,34,2016-06-13T16:42:28Z,2016-06-22T19:53:53Z,2016-06-22T19:53:57Z,MERGED,True,5,2,1,https://github.com/mikaelarguedas,look for python debug interpreter,5,[],https://github.com/ros2/rclpy/pull/34,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/34,"Look for python debug interpreter.
Connects to ros2/rosidl#153","Look for python debug interpreter.
Connects to ros2/rosidl#153",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,34,2016-06-13T16:42:28Z,2016-06-22T19:53:53Z,2016-06-22T19:53:57Z,MERGED,True,5,2,1,https://github.com/mikaelarguedas,look for python debug interpreter,5,[],https://github.com/ros2/rclpy/pull/34,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/34#issuecomment-225642349,"Look for python debug interpreter.
Connects to ros2/rosidl#153",FindPythonExtra should export a function to be reused instead of duplicating the logic.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,34,2016-06-13T16:42:28Z,2016-06-22T19:53:53Z,2016-06-22T19:53:57Z,MERGED,True,5,2,1,https://github.com/mikaelarguedas,look for python debug interpreter,5,[],https://github.com/ros2/rclpy/pull/34,https://github.com/dirk-thomas,3,https://github.com/ros2/rclpy/pull/34#issuecomment-227833095,"Look for python debug interpreter.
Connects to ros2/rosidl#153",Beside the comment +1,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,35,2016-06-15T19:46:14Z,2016-06-16T19:20:00Z,2016-06-16T19:20:04Z,MERGED,True,4,4,1,https://github.com/dirk-thomas,require CMake 3.5,2,[],https://github.com/ros2/rclpy/pull/35,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/35,Connect to ament/ament_cmake#72,Connect to ament/ament_cmake#72,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,37,2016-06-20T23:56:50Z,2016-06-22T18:04:50Z,2016-06-22T18:05:27Z,MERGED,True,4,0,1,https://github.com/mikaelarguedas,import type_support at subscriber/publisher creation time,2,[],https://github.com/ros2/rclpy/pull/37,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/37,Connects to #36,Connects to #36,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,39,2016-09-30T18:02:33Z,2016-10-04T03:05:49Z,2016-10-04T14:13:17Z,MERGED,True,307,18,5,https://github.com/mikaelarguedas,Addin QoS support,16,[],https://github.com/ros2/rclpy/pull/39,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/39,connects to #38,connects to #38,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,39,2016-09-30T18:02:33Z,2016-10-04T03:05:49Z,2016-10-04T14:13:17Z,MERGED,True,307,18,5,https://github.com/mikaelarguedas,Addin QoS support,16,[],https://github.com/ros2/rclpy/pull/39,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/39#issuecomment-250824704,connects to #38,I don't really like the idea to have to go back and forth between c and python to get rmw_qos_profile_t but that's the only way I found to avoid creating an extension for the QoSProfile class. @wjwwood any advice about a better way to do this ?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,39,2016-09-30T18:02:33Z,2016-10-04T03:05:49Z,2016-10-04T14:13:17Z,MERGED,True,307,18,5,https://github.com/mikaelarguedas,Addin QoS support,16,[],https://github.com/ros2/rclpy/pull/39,https://github.com/mikaelarguedas,3,https://github.com/ros2/rclpy/pull/39#issuecomment-250880454,connects to #38,"This PR now creates a new python module for rmw_agnostic rclpy functions. This allow to import and use these functions before rclpy.init() is called.
All comments have been addressed and it is ready for a new round of review",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,39,2016-09-30T18:02:33Z,2016-10-04T03:05:49Z,2016-10-04T14:13:17Z,MERGED,True,307,18,5,https://github.com/mikaelarguedas,Addin QoS support,16,[],https://github.com/ros2/rclpy/pull/39,https://github.com/wjwwood,4,https://github.com/ros2/rclpy/pull/39#issuecomment-251254326,connects to #38,"I think this is good to go, with CI.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,39,2016-09-30T18:02:33Z,2016-10-04T03:05:49Z,2016-10-04T14:13:17Z,MERGED,True,307,18,5,https://github.com/mikaelarguedas,Addin QoS support,16,[],https://github.com/ros2/rclpy/pull/39,https://github.com/mikaelarguedas,5,https://github.com/ros2/rclpy/pull/39#issuecomment-251268917,connects to #38,"CI:
Linux: 
OSX: 
Windows: 
Now that we comply with D213 pep257 failed, no other test failure appeared.
style fixed in b2f37ff",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,39,2016-09-30T18:02:33Z,2016-10-04T03:05:49Z,2016-10-04T14:13:17Z,MERGED,True,307,18,5,https://github.com/mikaelarguedas,Addin QoS support,16,[],https://github.com/ros2/rclpy/pull/39,https://github.com/mikaelarguedas,6,https://github.com/ros2/rclpy/pull/39#issuecomment-251282479,connects to #38,@wjwwood what is the final decision regarding this? should we hold this PR until after ROSCon ?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,39,2016-09-30T18:02:33Z,2016-10-04T03:05:49Z,2016-10-04T14:13:17Z,MERGED,True,307,18,5,https://github.com/mikaelarguedas,Addin QoS support,16,[],https://github.com/ros2/rclpy/pull/39,https://github.com/wjwwood,7,https://github.com/ros2/rclpy/pull/39#issuecomment-251283269,connects to #38,"If it's good to go, I'd say merge it.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,39,2016-09-30T18:02:33Z,2016-10-04T03:05:49Z,2016-10-04T14:13:17Z,MERGED,True,307,18,5,https://github.com/mikaelarguedas,Addin QoS support,16,[],https://github.com/ros2/rclpy/pull/39,https://github.com/mikaelarguedas,8,https://github.com/ros2/rclpy/pull/39#issuecomment-251399774,connects to #38,better co convert from the right type... 4c80fdc,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,40,2016-10-01T02:43:49Z,2016-11-08T22:21:56Z,2016-11-08T22:21:59Z,MERGED,True,173,1,4,https://github.com/mikaelarguedas,Add get topic names and types,22,[],https://github.com/ros2/rclpy/pull/40,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/40,"depends on #39
Goal of this PR is to add the functions needed to implement a basic  rostopic tool
WIP","depends on #39
Goal of this PR is to add the functions needed to implement a basic  rostopic tool
WIP",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,40,2016-10-01T02:43:49Z,2016-11-08T22:21:56Z,2016-11-08T22:21:59Z,MERGED,True,173,1,4,https://github.com/mikaelarguedas,Add get topic names and types,22,[],https://github.com/ros2/rclpy/pull/40,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/40#issuecomment-250950413,"depends on #39
Goal of this PR is to add the functions needed to implement a basic  rostopic tool
WIP",segfault fixed by e6bac57,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,40,2016-10-01T02:43:49Z,2016-11-08T22:21:56Z,2016-11-08T22:21:59Z,MERGED,True,173,1,4,https://github.com/mikaelarguedas,Add get topic names and types,22,[],https://github.com/ros2/rclpy/pull/40,https://github.com/mikaelarguedas,3,https://github.com/ros2/rclpy/pull/40#issuecomment-250952105,"depends on #39
Goal of this PR is to add the functions needed to implement a basic  rostopic tool
WIP",Thanks for the comments! Still in progress not ready for review yet hence all the artefacts. I'll address them before submitting it for review,True,{'THUMBS_UP': ['https://github.com/dhood']}
ros2/rclpy,https://github.com/ros2/rclpy,40,2016-10-01T02:43:49Z,2016-11-08T22:21:56Z,2016-11-08T22:21:59Z,MERGED,True,173,1,4,https://github.com/mikaelarguedas,Add get topic names and types,22,[],https://github.com/ros2/rclpy/pull/40,https://github.com/mikaelarguedas,4,https://github.com/ros2/rclpy/pull/40#issuecomment-251285883,"depends on #39
Goal of this PR is to add the functions needed to implement a basic  rostopic tool
WIP",the test of this new features are added in ros2/system_tests#167,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,40,2016-10-01T02:43:49Z,2016-11-08T22:21:56Z,2016-11-08T22:21:59Z,MERGED,True,173,1,4,https://github.com/mikaelarguedas,Add get topic names and types,22,[],https://github.com/ros2/rclpy/pull/40,https://github.com/mikaelarguedas,5,https://github.com/ros2/rclpy/pull/40#issuecomment-258988054,"depends on #39
Goal of this PR is to add the functions needed to implement a basic  rostopic tool
WIP","Placing this in review to allow people implementing rostopic to build on top of it.
Question: Should I use PyMem_Malloc to allocate memory for the rcl_topic_names_and_types_t structure or is it ok to use the rcl_get_zero_initialized_topic_names_and_types() function?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,40,2016-10-01T02:43:49Z,2016-11-08T22:21:56Z,2016-11-08T22:21:59Z,MERGED,True,173,1,4,https://github.com/mikaelarguedas,Add get topic names and types,22,[],https://github.com/ros2/rclpy/pull/40,https://github.com/wjwwood,6,https://github.com/ros2/rclpy/pull/40#issuecomment-258989420,"depends on #39
Goal of this PR is to add the functions needed to implement a basic  rostopic tool
WIP","rcl_get_zero_initialized_topic_names_and_types() just returns a zero-initialized structure that you can assign to your structure to make sure it is zero'ed. It doesn't have anything to do with allocation method AFAIK.
So I'd say ""yes"" and ""yes""? They are not mutually exclusive options.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,40,2016-10-01T02:43:49Z,2016-11-08T22:21:56Z,2016-11-08T22:21:59Z,MERGED,True,173,1,4,https://github.com/mikaelarguedas,Add get topic names and types,22,[],https://github.com/ros2/rclpy/pull/40,https://github.com/mikaelarguedas,7,https://github.com/ros2/rclpy/pull/40#issuecomment-258992509,"depends on #39
Goal of this PR is to add the functions needed to implement a basic  rostopic tool
WIP","Thanks for confirming, I was wondering why we never used any get_zero_initialized_XX functions in Python and thought I missed something related to memory allocation .",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,40,2016-10-01T02:43:49Z,2016-11-08T22:21:56Z,2016-11-08T22:21:59Z,MERGED,True,173,1,4,https://github.com/mikaelarguedas,Add get topic names and types,22,[],https://github.com/ros2/rclpy/pull/40,https://github.com/wjwwood,8,https://github.com/ros2/rclpy/pull/40#issuecomment-258995289,"depends on #39
Goal of this PR is to add the functions needed to implement a basic  rostopic tool
WIP",It might be because the Python allocator behaves like calloc and zero's memory on allocation and so the functions are not necessary.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,40,2016-10-01T02:43:49Z,2016-11-08T22:21:56Z,2016-11-08T22:21:59Z,MERGED,True,173,1,4,https://github.com/mikaelarguedas,Add get topic names and types,22,[],https://github.com/ros2/rclpy/pull/40,https://github.com/wjwwood,9,https://github.com/ros2/rclpy/pull/40#issuecomment-258995407,"depends on #39
Goal of this PR is to add the functions needed to implement a basic  rostopic tool
WIP","I should say, I don't know if it behaves like that, but it might (which would explain why it isn't necessary).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,41,2016-10-03T16:44:46Z,2016-10-03T23:07:34Z,2016-10-03T23:07:37Z,MERGED,True,16,8,3,https://github.com/Karsten1987,(dev) comply with D213,1,[],https://github.com/ros2/rclpy/pull/41,https://github.com/Karsten1987,1,https://github.com/ros2/rclpy/pull/41,see ament/ament_lint#61,see ament/ament_lint#61,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,43,2016-10-19T08:15:04Z,2017-06-14T22:51:47Z,2017-06-14T22:51:47Z,CLOSED,False,592,1,4,https://github.com/vmayoral,Add rosnode and rostopic functionality (alpha8),22,[],https://github.com/ros2/rclpy/pull/43,https://github.com/vmayoral,1,https://github.com/ros2/rclpy/pull/43,Follows from #9.,Follows from #9.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,43,2016-10-19T08:15:04Z,2017-06-14T22:51:47Z,2017-06-14T22:51:47Z,CLOSED,False,592,1,4,https://github.com/vmayoral,Add rosnode and rostopic functionality (alpha8),22,[],https://github.com/ros2/rclpy/pull/43,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/43#issuecomment-308580347,Follows from #9.,"We now have a first implementation of the ros commandline tools available on https://github.com/ros2/ros2cli. Feel free to comment on ros2/ros2#197 (comment) for any feedback.
Thanks a lot @vmayoral for all this preliminary work !",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,44,2016-10-24T21:07:07Z,2017-05-10T18:54:14Z,2017-05-10T18:54:18Z,CLOSED,False,4,2,1,https://github.com/mikaelarguedas,fix logic for python executable for Windows debug,2,[],https://github.com/ros2/rclpy/pull/44,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/44,"fixes test failures on windows debug (http://ci.ros2.org/view/nightly/job/nightly_win_deb/258/#showFailuresLink)
Windows:","fixes test failures on windows debug (http://ci.ros2.org/view/nightly/job/nightly_win_deb/258/#showFailuresLink)
Windows:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,44,2016-10-24T21:07:07Z,2017-05-10T18:54:14Z,2017-05-10T18:54:18Z,CLOSED,False,4,2,1,https://github.com/mikaelarguedas,fix logic for python executable for Windows debug,2,[],https://github.com/ros2/rclpy/pull/44,https://github.com/codebot,2,https://github.com/ros2/rclpy/pull/44#issuecomment-256166094,"fixes test failures on windows debug (http://ci.ros2.org/view/nightly/job/nightly_win_deb/258/#showFailuresLink)
Windows:","Specifically, for dealing with debug symbols/interpreter on Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,44,2016-10-24T21:07:07Z,2017-05-10T18:54:14Z,2017-05-10T18:54:18Z,CLOSED,False,4,2,1,https://github.com/mikaelarguedas,fix logic for python executable for Windows debug,2,[],https://github.com/ros2/rclpy/pull/44,https://github.com/mikaelarguedas,3,https://github.com/ros2/rclpy/pull/44#issuecomment-291962893,"fixes test failures on windows debug (http://ci.ros2.org/view/nightly/job/nightly_win_deb/258/#showFailuresLink)
Windows:",not the right fix need investigation someday,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,44,2016-10-24T21:07:07Z,2017-05-10T18:54:14Z,2017-05-10T18:54:18Z,CLOSED,False,4,2,1,https://github.com/mikaelarguedas,fix logic for python executable for Windows debug,2,[],https://github.com/ros2/rclpy/pull/44,https://github.com/mikaelarguedas,4,https://github.com/ros2/rclpy/pull/44#issuecomment-300578722,"fixes test failures on windows debug (http://ci.ros2.org/view/nightly/job/nightly_win_deb/258/#showFailuresLink)
Windows:",will be replaced by @dirk-thomas PRs (provide link),True,{}
ros2/rclpy,https://github.com/ros2/rclpy,44,2016-10-24T21:07:07Z,2017-05-10T18:54:14Z,2017-05-10T18:54:18Z,CLOSED,False,4,2,1,https://github.com/mikaelarguedas,fix logic for python executable for Windows debug,2,[],https://github.com/ros2/rclpy/pull/44,https://github.com/dirk-thomas,5,https://github.com/ros2/rclpy/pull/44#issuecomment-300579460,"fixes test failures on windows debug (http://ci.ros2.org/view/nightly/job/nightly_win_deb/258/#showFailuresLink)
Windows:","Not directly but addressed by #82, ros2/ci#72 and ament/ament_tools#147.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,45,2016-10-25T21:18:13Z,2016-10-25T21:31:46Z,2016-10-25T21:31:49Z,MERGED,True,7,1,1,https://github.com/dirk-thomas,choose FastRTPS as the default if available,1,[],https://github.com/ros2/rclpy/pull/45,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/45,Connect to ros2/ros2#282,Connect to ros2/ros2#282,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,46,2016-10-27T02:31:14Z,2016-10-30T04:40:42Z,2016-10-30T04:41:02Z,CLOSED,False,172,1,5,https://github.com/mikaelarguedas,use Zero initialized topic names and types,19,[],https://github.com/ros2/rclpy/pull/46,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/46,"connects to ros2/rcl#85
for testing only, rebased on add_topic_names_and_types branch","connects to ros2/rcl#85
for testing only, rebased on add_topic_names_and_types branch",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,47,2016-10-31T17:25:11Z,2016-11-05T00:18:09Z,2016-11-05T18:09:59Z,MERGED,True,50,8,4,https://github.com/mikaelarguedas,[spin_once] check waitset content to trigger subscription callbacks,6,[],https://github.com/ros2/rclpy/pull/47,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/47,,,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,47,2016-10-31T17:25:11Z,2016-11-05T00:18:09Z,2016-11-05T18:09:59Z,MERGED,True,50,8,4,https://github.com/mikaelarguedas,[spin_once] check waitset content to trigger subscription callbacks,6,[],https://github.com/ros2/rclpy/pull/47,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/47#issuecomment-258475974,,"Updated this to use the subscription pointers instead of indexes. Not ideal given that these pointers could have been reallocated by the time we use them but I don't see a good way to access GUIDs from that high in the stack.
To test this with 3 subscriptions, you can checkout the branch rclpy_spin_once in both rclpy and rclpy_examples and run talker_py and listener_py",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,47,2016-10-31T17:25:11Z,2016-11-05T00:18:09Z,2016-11-05T18:09:59Z,MERGED,True,50,8,4,https://github.com/mikaelarguedas,[spin_once] check waitset content to trigger subscription callbacks,6,[],https://github.com/ros2/rclpy/pull/47,https://github.com/mikaelarguedas,3,https://github.com/ros2/rclpy/pull/47#issuecomment-258630577,,warning on windows: fa9f286,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,48,2016-11-04T20:50:22Z,2016-11-04T22:45:48Z,2016-11-04T22:45:53Z,MERGED,True,11,5,2,https://github.com/mikaelarguedas,Add optional timeout to spin_once,8,[],https://github.com/ros2/rclpy/pull/48,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/48,,,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,48,2016-11-04T20:50:22Z,2016-11-04T22:45:48Z,2016-11-04T22:45:53Z,MERGED,True,11,5,2,https://github.com/mikaelarguedas,Add optional timeout to spin_once,8,[],https://github.com/ros2/rclpy/pull/48,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/48#issuecomment-258553800,,"Should the parameter be checked for reasonable value ranges?
Beside that comment the patch lgtm.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,48,2016-11-04T20:50:22Z,2016-11-04T22:45:48Z,2016-11-04T22:45:53Z,MERGED,True,11,5,2,https://github.com/mikaelarguedas,Add optional timeout to spin_once,8,[],https://github.com/ros2/rclpy/pull/48,https://github.com/mikaelarguedas,3,https://github.com/ros2/rclpy/pull/48#issuecomment-258559077,,"I thought relying on the checks performed by rcl in the wait function, do you think we should expose a narrower range to the users in the client libraries ?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,48,2016-11-04T20:50:22Z,2016-11-04T22:45:48Z,2016-11-04T22:45:53Z,MERGED,True,11,5,2,https://github.com/mikaelarguedas,Add optional timeout to spin_once,8,[],https://github.com/ros2/rclpy/pull/48,https://github.com/dirk-thomas,4,https://github.com/ros2/rclpy/pull/48#issuecomment-258562490,,"Sure, we can rely on the underlying function which accepts any integer. The Python API will just accept None as well as negative numbers for the same purpose. I guess once the functions has a docblock that should be fine.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,48,2016-11-04T20:50:22Z,2016-11-04T22:45:48Z,2016-11-04T22:45:53Z,MERGED,True,11,5,2,https://github.com/mikaelarguedas,Add optional timeout to spin_once,8,[],https://github.com/ros2/rclpy/pull/48,https://github.com/mikaelarguedas,5,https://github.com/ros2/rclpy/pull/48#issuecomment-258563148,,"Agreed, rclpy is not documented at all ATM.
I'll open a pull request to add documentation for all functions (Python and C) before iterating on services.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,48,2016-11-04T20:50:22Z,2016-11-04T22:45:48Z,2016-11-04T22:45:53Z,MERGED,True,11,5,2,https://github.com/mikaelarguedas,Add optional timeout to spin_once,8,[],https://github.com/ros2/rclpy/pull/48,https://github.com/dirk-thomas,6,https://github.com/ros2/rclpy/pull/48#issuecomment-258565576,,👍,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,49,2016-11-08T22:54:23Z,2016-11-10T22:35:13Z,2016-11-10T22:35:16Z,MERGED,True,148,2,4,https://github.com/mikaelarguedas,document rclpy,8,[],https://github.com/ros2/rclpy/pull/49,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/49,,,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,50,2016-11-09T00:05:48Z,2016-11-09T00:12:34Z,2016-11-09T00:12:37Z,MERGED,True,4,14,1,https://github.com/mikaelarguedas,use rcl functions for initialization,1,[],https://github.com/ros2/rclpy/pull/50,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/50,Avoid code duplication by using rcl underlying functions to initialize all rcl structures,Avoid code duplication by using rcl underlying functions to initialize all rcl structures,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,51,2016-11-11T18:23:26Z,2016-11-16T22:27:49Z,2016-11-16T22:27:53Z,MERGED,True,818,70,11,https://github.com/mikaelarguedas,Python services,24,[],https://github.com/ros2/rclpy/pull/51,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/51,"This PR adds support for services and clean up rcl entities when a python node is killed.
API is not fully defined yet and needs discussion before this being reviewed.
Some basic examples demonstrating the feature have been added in  ros2/examples#134
connects to ros2/rosidl#67","This PR adds support for services and clean up rcl entities when a python node is killed.
API is not fully defined yet and needs discussion before this being reviewed.
Some basic examples demonstrating the feature have been added in  ros2/examples#134
connects to ros2/rosidl#67",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,52,2016-11-16T23:27:43Z,2016-11-16T23:30:08Z,2016-11-16T23:30:12Z,MERGED,True,3,3,1,https://github.com/mikaelarguedas,fix indent,1,[],https://github.com/ros2/rclpy/pull/52,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/52,linter fix following up #51,linter fix following up #51,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,53,2016-11-16T23:29:42Z,2016-11-17T04:28:28Z,2016-11-17T04:28:31Z,MERGED,True,16,33,1,https://github.com/mikaelarguedas,use macro to limit code duplication,2,[],https://github.com/ros2/rclpy/pull/53,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/53,"refactor mentionned in #51 (comment)
Don't know where the right place to put the new macro would be ? a macros.h file ? on top of this file ?","refactor mentionned in #51 (comment)
Don't know where the right place to put the new macro would be ? a macros.h file ? on top of this file ?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,53,2016-11-16T23:29:42Z,2016-11-17T04:28:28Z,2016-11-17T04:28:31Z,MERGED,True,16,33,1,https://github.com/mikaelarguedas,use macro to limit code duplication,2,[],https://github.com/ros2/rclpy/pull/53,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/53#issuecomment-261106764,"refactor mentionned in #51 (comment)
Don't know where the right place to put the new macro would be ? a macros.h file ? on top of this file ?",Since it is only used in one place I would suggest as close to that location as possible.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,53,2016-11-16T23:29:42Z,2016-11-17T04:28:28Z,2016-11-17T04:28:31Z,MERGED,True,16,33,1,https://github.com/mikaelarguedas,use macro to limit code duplication,2,[],https://github.com/ros2/rclpy/pull/53,https://github.com/mikaelarguedas,3,https://github.com/ros2/rclpy/pull/53#issuecomment-261118630,"refactor mentionned in #51 (comment)
Don't know where the right place to put the new macro would be ? a macros.h file ? on top of this file ?","Passing CI:
http://ci.ros2.org/job/ci_linux/1921/
http://ci.ros2.org/job/ci_osx/1473/
http://ci.ros2.org/job/ci_windows/1874
linting fixed in 1edab98",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,54,2016-11-17T02:27:44Z,2016-11-19T00:18:25Z,2016-11-19T00:18:29Z,MERGED,True,603,5,5,https://github.com/mikaelarguedas,Add timer support,17,[],https://github.com/ros2/rclpy/pull/54,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/54,,,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,54,2016-11-17T02:27:44Z,2016-11-19T00:18:25Z,2016-11-19T00:18:29Z,MERGED,True,603,5,5,https://github.com/mikaelarguedas,Add timer support,17,[],https://github.com/ros2/rclpy/pull/54,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/54#issuecomment-261298344,,It seems that we miss timing when running tests at higher frequency (kilohertz). I don't think it's tied to the implementation of this PR. I'll try to revive this stale branch that aimed to improve timer checking in wait_set at the rcl level,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,54,2016-11-17T02:27:44Z,2016-11-19T00:18:25Z,2016-11-19T00:18:29Z,MERGED,True,603,5,5,https://github.com/mikaelarguedas,Add timer support,17,[],https://github.com/ros2/rclpy/pull/54,https://github.com/mikaelarguedas,3,https://github.com/ros2/rclpy/pull/54#issuecomment-261321499,,"Launching CI and documenting the C functions before merging:
Linux: 
OSX: 
Windows:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,54,2016-11-17T02:27:44Z,2016-11-19T00:18:25Z,2016-11-19T00:18:29Z,MERGED,True,603,5,5,https://github.com/mikaelarguedas,Add timer support,17,[],https://github.com/ros2/rclpy/pull/54,https://github.com/mikaelarguedas,4,https://github.com/ros2/rclpy/pull/54#issuecomment-261393290,,"Commented out the higher frequency tests and kept only the tests running at 10Hz (same frequency used for rclcpp tests)
Passing CI:
http://ci.ros2.org/job/ci_linux/1934/
http://ci.ros2.org/job/ci_osx/1492/
http://ci.ros2.org/job/ci_windows/1883/",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,54,2016-11-17T02:27:44Z,2016-11-19T00:18:25Z,2016-11-19T00:18:29Z,MERGED,True,603,5,5,https://github.com/mikaelarguedas,Add timer support,17,[],https://github.com/ros2/rclpy/pull/54,https://github.com/mikaelarguedas,5,https://github.com/ros2/rclpy/pull/54#issuecomment-261675494,,"everything went fine with high speed tests skipped on windows.
http://ci.ros2.org/job/ci_windows/lastSuccessfulBuild/testReport/
http://ci.ros2.org/job/ci_osx/lastSuccessfulBuild/testReport/
http://ci.ros2.org/job/ci_linux/lastSuccessfulBuild/testReport/
Merging this",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,55,2016-11-21T18:33:49Z,2016-11-21T19:53:21Z,2016-11-21T19:53:25Z,MERGED,True,60,23,1,https://github.com/mikaelarguedas,Error handling,4,[],https://github.com/ros2/rclpy/pull/55,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/55,raise errors on argument mismatch rather than asserts. Also gives more descriptive error messages when asserts fail,raise errors on argument mismatch rather than asserts. Also gives more descriptive error messages when asserts fail,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,55,2016-11-21T18:33:49Z,2016-11-21T19:53:21Z,2016-11-21T19:53:25Z,MERGED,True,60,23,1,https://github.com/mikaelarguedas,Error handling,4,[],https://github.com/ros2/rclpy/pull/55,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/55#issuecomment-262048115,raise errors on argument mismatch rather than asserts. Also gives more descriptive error messages when asserts fail,thanks for the fixups,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,56,2016-12-07T19:32:24Z,2016-12-08T02:38:39Z,2016-12-08T02:38:43Z,MERGED,True,1,0,1,https://github.com/mikaelarguedas,reset response every call,1,[],https://github.com/ros2/rclpy/pull/56,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/56,,,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,56,2016-12-07T19:32:24Z,2016-12-08T02:38:39Z,2016-12-08T02:38:43Z,MERGED,True,1,0,1,https://github.com/mikaelarguedas,reset response every call,1,[],https://github.com/ros2/rclpy/pull/56,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/56#issuecomment-265604428,,"Sorry lacking context again.
When doing busy wait on client response I was checking the content of the response field. Hence had to reset this before every request sent. So I decided to push that down one layer to make user code simpler",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,57,2016-12-07T19:34:47Z,2016-12-08T23:03:04Z,2016-12-11T06:42:48Z,CLOSED,False,1,1,1,https://github.com/mikaelarguedas,restor spin timeout to 1sec,2,[],https://github.com/ros2/rclpy/pull/57,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/57,"Right now the absence of guard_condition support prevent python script to be interrupted when waiting in c (rcl_wait)
This sets the default value to 1sec.
see ros2/examples#141 (comment)","Right now the absence of guard_condition support prevent python script to be interrupted when waiting in c (rcl_wait)
This sets the default value to 1sec.
see ros2/examples#141 (comment)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,57,2016-12-07T19:34:47Z,2016-12-08T23:03:04Z,2016-12-11T06:42:48Z,CLOSED,False,1,1,1,https://github.com/mikaelarguedas,restor spin timeout to 1sec,2,[],https://github.com/ros2/rclpy/pull/57,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/57#issuecomment-265563066,"Right now the absence of guard_condition support prevent python script to be interrupted when waiting in c (rcl_wait)
This sets the default value to 1sec.
see ros2/examples#141 (comment)","Thanks for pointing out there is some context missing here.
In the original implementation the timeout was hardcoded to 1 sec and not exposed to the users.
Since rclpy now handles waitset we decided to make the default behavior match the design decision that is ""spin and friends should wait forever and exit only if something happens"".
Putting the timeout to 1 sec by default in this PR is a temporary fix that should be reverted as soon as we have guard conditions / the ability to exit rcl_wait on keyboard interrupts.
The motivation for changing it here rather that in every example is that we expect user to use timers if they want to exit spin periodically rather than using a timeout. Because timeout is an upper bound and not thus doesn't ensure periodicity and also because we would prefer users letting control of the main thread to the ROS 2 machinery.
So setting it in every example may send the wrong message about the good practices in writing rclpy nodes.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,57,2016-12-07T19:34:47Z,2016-12-08T23:03:04Z,2016-12-11T06:42:48Z,CLOSED,False,1,1,1,https://github.com/mikaelarguedas,restor spin timeout to 1sec,2,[],https://github.com/ros2/rclpy/pull/57,https://github.com/dhood,3,https://github.com/ros2/rclpy/pull/57#issuecomment-265568117,"Right now the absence of guard_condition support prevent python script to be interrupted when waiting in c (rcl_wait)
This sets the default value to 1sec.
see ros2/examples#141 (comment)","Thanks, I didn't realise that this was a temporary thing.
If the only reason we would add timeouts to the examples is 1) where we should actually be using a timer and 2) to get around guard conditions being pending, then I think adding a nonzero default timeout is a good workaround",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,57,2016-12-07T19:34:47Z,2016-12-08T23:03:04Z,2016-12-11T06:42:48Z,CLOSED,False,1,1,1,https://github.com/mikaelarguedas,restor spin timeout to 1sec,2,[],https://github.com/ros2/rclpy/pull/57,https://github.com/mikaelarguedas,4,https://github.com/ros2/rclpy/pull/57#issuecomment-265603288,"Right now the absence of guard_condition support prevent python script to be interrupted when waiting in c (rcl_wait)
This sets the default value to 1sec.
see ros2/examples#141 (comment)","I'm putting this back to ready hoping that I'll have time to get guard_conditions in before the release, will merge this if getting them in is not possible",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,57,2016-12-07T19:34:47Z,2016-12-08T23:03:04Z,2016-12-11T06:42:48Z,CLOSED,False,1,1,1,https://github.com/mikaelarguedas,restor spin timeout to 1sec,2,[],https://github.com/ros2/rclpy/pull/57,https://github.com/mikaelarguedas,5,https://github.com/ros2/rclpy/pull/57#issuecomment-265882175,"Right now the absence of guard_condition support prevent python script to be interrupted when waiting in c (rcl_wait)
This sets the default value to 1sec.
see ros2/examples#141 (comment)",closed in favor of #59,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,59,2016-12-08T02:30:48Z,2016-12-09T17:49:49Z,2016-12-09T19:24:05Z,MERGED,True,63,4,2,https://github.com/mikaelarguedas,Add sigint guard condition,1,[],https://github.com/ros2/rclpy/pull/59,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/59,"This add support for SIGINT signals to be processed from C code and raise the interrupt in Python.
This solves the current issue of Python scripts not killable if they're spinning","This add support for SIGINT signals to be processed from C code and raise the interrupt in Python.
This solves the current issue of Python scripts not killable if they're spinning",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,59,2016-12-08T02:30:48Z,2016-12-09T17:49:49Z,2016-12-09T19:24:05Z,MERGED,True,63,4,2,https://github.com/mikaelarguedas,Add sigint guard condition,1,[],https://github.com/ros2/rclpy/pull/59,https://github.com/dhood,2,https://github.com/ros2/rclpy/pull/59#issuecomment-266098862,"This add support for SIGINT signals to be processed from C code and raise the interrupt in Python.
This solves the current issue of Python scripts not killable if they're spinning","I think this broke the windows jobs:
http://ci.ros2.org/job/ci_windows/1989/consoleFull
search for error C2065: 'SIGINT'",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,59,2016-12-08T02:30:48Z,2016-12-09T17:49:49Z,2016-12-09T19:24:05Z,MERGED,True,63,4,2,https://github.com/mikaelarguedas,Add sigint guard condition,1,[],https://github.com/ros2/rclpy/pull/59,https://github.com/mikaelarguedas,3,https://github.com/ros2/rclpy/pull/59#issuecomment-266099401,"This add support for SIGINT signals to be processed from C code and raise the interrupt in Python.
This solves the current issue of Python scripts not killable if they're spinning",oh how weird I thought I took that approach from MSDN website. Reverting this for investigation and allow other CI to be ran. Sorry about that,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,60,2016-12-09T19:26:45Z,2016-12-09T19:27:00Z,2016-12-11T06:42:46Z,MERGED,True,3,63,2,https://github.com/mikaelarguedas,Revert59,2,[],https://github.com/ros2/rclpy/pull/60,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/60,#59 doesn't build on windows: see #59 (comment),#59 doesn't build on windows: see #59 (comment),True,{}
ros2/rclpy,https://github.com/ros2/rclpy,61,2016-12-10T00:49:23Z,2016-12-10T01:08:08Z,2016-12-10T01:08:13Z,MERGED,True,65,3,2,https://github.com/mikaelarguedas,add sigint guard condition,1,[],https://github.com/ros2/rclpy/pull/61,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/61,"Round 2 without windows failure.
Use dummily sigint and doesn't leverage sigactions.
This could be refactored onece executor and guard conditions are properly integrated but it does solve the problem of script not being killed by Ctrl-C when waiting for something to happen in waitset.
Linux: 
OSX:  (pub/sub flaky tests not related)
Windows:  (warnings not related)","Round 2 without windows failure.
Use dummily sigint and doesn't leverage sigactions.
This could be refactored onece executor and guard conditions are properly integrated but it does solve the problem of script not being killed by Ctrl-C when waiting for something to happen in waitset.
Linux: 
OSX:  (pub/sub flaky tests not related)
Windows:  (warnings not related)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,61,2016-12-10T00:49:23Z,2016-12-10T01:08:08Z,2016-12-10T01:08:13Z,MERGED,True,65,3,2,https://github.com/mikaelarguedas,add sigint guard condition,1,[],https://github.com/ros2/rclpy/pull/61,https://github.com/dhood,2,https://github.com/ros2/rclpy/pull/61#issuecomment-266164173,"Round 2 without windows failure.
Use dummily sigint and doesn't leverage sigactions.
This could be refactored onece executor and guard conditions are properly integrated but it does solve the problem of script not being killed by Ctrl-C when waiting for something to happen in waitset.
Linux: 
OSX:  (pub/sub flaky tests not related)
Windows:  (warnings not related)",for flaky test tracking: this was run after ros2/rmw#82 was merged but before  ros2/rmw#84,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,61,2016-12-10T00:49:23Z,2016-12-10T01:08:08Z,2016-12-10T01:08:13Z,MERGED,True,65,3,2,https://github.com/mikaelarguedas,add sigint guard condition,1,[],https://github.com/ros2/rclpy/pull/61,https://github.com/mikaelarguedas,3,https://github.com/ros2/rclpy/pull/61#issuecomment-266165532,"Round 2 without windows failure.
Use dummily sigint and doesn't leverage sigactions.
This could be refactored onece executor and guard conditions are properly integrated but it does solve the problem of script not being killed by Ctrl-C when waiting for something to happen in waitset.
Linux: 
OSX:  (pub/sub flaky tests not related)
Windows:  (warnings not related)","ok thanks for the details for test tracking, will look into flakyness now.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,62,2016-12-11T23:44:07Z,2016-12-12T03:19:56Z,2016-12-12T03:19:59Z,MERGED,True,0,5,1,https://github.com/mikaelarguedas,remove unused dependencies,1,[],https://github.com/ros2/rclpy/pull/62,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/62,"All these are artifacts from the time rclpy was testing pub/sub internally and not in test_communication.
Linux: 
OSX: 
Windows:","All these are artifacts from the time rclpy was testing pub/sub internally and not in test_communication.
Linux: 
OSX: 
Windows:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,63,2016-12-12T05:53:18Z,2016-12-14T18:34:11Z,2016-12-14T18:34:15Z,MERGED,True,216,10,3,https://github.com/mikaelarguedas,Prevent null handle,5,[],https://github.com/ros2/rclpy/pull/63,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/63,"This PR:

prevents user from setting/modifying the handle of a python node
adds a bunch of tests for destruction of various node entities","This PR:

prevents user from setting/modifying the handle of a python node
adds a bunch of tests for destruction of various node entities",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,63,2016-12-12T05:53:18Z,2016-12-14T18:34:11Z,2016-12-14T18:34:15Z,MERGED,True,216,10,3,https://github.com/mikaelarguedas,Prevent null handle,5,[],https://github.com/ros2/rclpy/pull/63,https://github.com/codebot,2,https://github.com/ros2/rclpy/pull/63#issuecomment-266867793,"This PR:

prevents user from setting/modifying the handle of a python node
adds a bunch of tests for destruction of various node entities",let's wait for CI,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,63,2016-12-12T05:53:18Z,2016-12-14T18:34:11Z,2016-12-14T18:34:15Z,MERGED,True,216,10,3,https://github.com/mikaelarguedas,Prevent null handle,5,[],https://github.com/ros2/rclpy/pull/63,https://github.com/mikaelarguedas,3,https://github.com/ros2/rclpy/pull/63#issuecomment-266927002,"This PR:

prevents user from setting/modifying the handle of a python node
adds a bunch of tests for destruction of various node entities","CI:
Linux: 
OSX: 
Windows:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,64,2016-12-13T03:15:06Z,2016-12-13T05:12:39Z,2016-12-13T05:12:42Z,MERGED,True,6,6,1,https://github.com/dhood,Rename QoS policies,1,[],https://github.com/ros2/rclpy/pull/64,https://github.com/dhood,1,https://github.com/ros2/rclpy/pull/64,Connects to ros2/rmw#85,Connects to ros2/rmw#85,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,65,2016-12-19T20:43:00Z,2016-12-19T20:45:45Z,2016-12-19T20:45:48Z,MERGED,True,4,1,1,https://github.com/dirk-thomas,check return value of rclpy_take_request for None,1,[],https://github.com/ros2/rclpy/pull/65,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/65,Fixes a traceback in the server side of example_rclpy.,Fixes a traceback in the server side of example_rclpy.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,66,2017-01-05T22:16:41Z,2017-01-09T16:54:44Z,2017-01-09T17:03:19Z,MERGED,True,54,242,6,https://github.com/dirk-thomas,use rmw implementation,3,[],https://github.com/ros2/rclpy/pull/66,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/66,"Connect to ros2/rcl#106
The patch explicitly selects rmw_implementation. As a follow up a lot of the logic to handle rmw implementations as well as the RCLPY_IMPLEMENTATION environment variable can be removed from rclpy.","Connect to ros2/rcl#106
The patch explicitly selects rmw_implementation. As a follow up a lot of the logic to handle rmw implementations as well as the RCLPY_IMPLEMENTATION environment variable can be removed from rclpy.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,66,2017-01-05T22:16:41Z,2017-01-09T16:54:44Z,2017-01-09T17:03:19Z,MERGED,True,54,242,6,https://github.com/dirk-thomas,use rmw implementation,3,[],https://github.com/ros2/rclpy/pull/66,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/66#issuecomment-271047889,"Connect to ros2/rcl#106
The patch explicitly selects rmw_implementation. As a follow up a lot of the logic to handle rmw implementations as well as the RCLPY_IMPLEMENTATION environment variable can be removed from rclpy.","I added a bullet to the typesupport redesign ticket.
Does the approval only cover this PR or all other related PRs referenced from the parent ticket (ros2/rcl#106)?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,66,2017-01-05T22:16:41Z,2017-01-09T16:54:44Z,2017-01-09T17:03:19Z,MERGED,True,54,242,6,https://github.com/dirk-thomas,use rmw implementation,3,[],https://github.com/ros2/rclpy/pull/66,https://github.com/wjwwood,3,https://github.com/ros2/rclpy/pull/66#issuecomment-271048070,"Connect to ros2/rcl#106
The patch explicitly selects rmw_implementation. As a follow up a lot of the logic to handle rmw implementations as well as the RCLPY_IMPLEMENTATION environment variable can be removed from rclpy.","Just this one, I'll review the others now.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,66,2017-01-05T22:16:41Z,2017-01-09T16:54:44Z,2017-01-09T17:03:19Z,MERGED,True,54,242,6,https://github.com/dirk-thomas,use rmw implementation,3,[],https://github.com/ros2/rclpy/pull/66,https://github.com/esteve,4,https://github.com/ros2/rclpy/pull/66#issuecomment-271072935,"Connect to ros2/rcl#106
The patch explicitly selects rmw_implementation. As a follow up a lot of the logic to handle rmw implementations as well as the RCLPY_IMPLEMENTATION environment variable can be removed from rclpy.","I see @wjwwood already approved this PR, so I don't know if this is still open for discussion, but I'd rather not see this functionality go away (cleaned up yes, but not removed). There are certain cases where it's more convenient to pick the RMW implementation from Python, instead of relying on an environment variable.
For example, if you're developing a Django application that uses rclpy (yeah, a bit crazy, but it may be the case that you want to build a web frontend for ROS2), it's far easier to deploy if the RMW implementation is specified in the Django settings (DJANGO_SETTINGS_MODULE) and later loaded in Python, it's also more explicit, which is always better than implicit. Of course most people will just use whatever default RMW implementation is available, but in any case, I don't see any strong reason for removing this.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,66,2017-01-05T22:16:41Z,2017-01-09T16:54:44Z,2017-01-09T17:03:19Z,MERGED,True,54,242,6,https://github.com/dirk-thomas,use rmw implementation,3,[],https://github.com/ros2/rclpy/pull/66,https://github.com/dirk-thomas,5,https://github.com/ros2/rclpy/pull/66#issuecomment-271107067,"Connect to ros2/rcl#106
The patch explicitly selects rmw_implementation. As a follow up a lot of the logic to handle rmw implementations as well as the RCLPY_IMPLEMENTATION environment variable can be removed from rclpy.",We can't keep the current functionality as is - simple because it would require to continue to build separate libraries of rcl / rclcpp for each rmw implementation (which we want to get rid of). Currently rmw_implementation chooses only based on an environment variable which rmw implemenation to load. I mentioned in ros2/rcl#106 (comment) that a select function could be added to override that selection process. Maybe that would be useful for the described use case too.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,66,2017-01-05T22:16:41Z,2017-01-09T16:54:44Z,2017-01-09T17:03:19Z,MERGED,True,54,242,6,https://github.com/dirk-thomas,use rmw implementation,3,[],https://github.com/ros2/rclpy/pull/66,https://github.com/esteve,6,https://github.com/ros2/rclpy/pull/66#issuecomment-271341649,"Connect to ros2/rcl#106
The patch explicitly selects rmw_implementation. As a follow up a lot of the logic to handle rmw implementations as well as the RCLPY_IMPLEMENTATION environment variable can be removed from rclpy.","@dirk-thomas We can't keep the current functionality as is

Exactly, that's what I meant with:

I'd rather not see this functionality go away (cleaned up yes, but not removed)

so as long as there's something else functionally equivalent (i.e. being able to select the RMW implementation explicitly without relying on an environment variable), that's fine, doesn't matter how it's implemented.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,67,2017-01-31T02:02:37Z,2017-02-01T02:09:30Z,2017-02-01T02:09:33Z,MERGED,True,3,2,3,https://github.com/dhood,Comply with flake8 + flake8-import-order linters,1,[],https://github.com/ros2/rclpy/pull/67,https://github.com/dhood,1,https://github.com/ros2/rclpy/pull/67,Connects to ament/ament_lint#53,Connects to ament/ament_lint#53,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,70,2017-03-27T19:36:01Z,2017-03-27T19:53:33Z,2017-03-27T19:53:37Z,MERGED,True,86,0,3,https://github.com/dirk-thomas,expose node name,1,['enhancement'],https://github.com/ros2/rclpy/pull/70,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/70,Ready for review.,Ready for review.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,71,2017-03-27T23:43:28Z,2017-03-31T23:59:04Z,2017-03-31T23:59:08Z,MERGED,True,50,6,3,https://github.com/mikaelarguedas,wrap rcl_get_names in rclpy,4,[],https://github.com/ros2/rclpy/pull/71,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/71,,,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,71,2017-03-27T23:43:28Z,2017-03-31T23:59:04Z,2017-03-31T23:59:08Z,MERGED,True,50,6,3,https://github.com/mikaelarguedas,wrap rcl_get_names in rclpy,4,[],https://github.com/ros2/rclpy/pull/71,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/71#issuecomment-289833763,,Looking at the data structure _topic_count seems redundant to me. It is already available as len(self._topic_names) and len(self._type_names). (Again unrelated to this PR - just noticed it when reading the code.),True,{}
ros2/rclpy,https://github.com/ros2/rclpy,71,2017-03-27T23:43:28Z,2017-03-31T23:59:04Z,2017-03-31T23:59:08Z,MERGED,True,50,6,3,https://github.com/mikaelarguedas,wrap rcl_get_names in rclpy,4,[],https://github.com/ros2/rclpy/pull/71,https://github.com/mikaelarguedas,3,https://github.com/ros2/rclpy/pull/71#issuecomment-289834438,,"Yeah I agree, I basically wrapped the c-structure that has that field but there is no need to reflect it in the python object.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,71,2017-03-27T23:43:28Z,2017-03-31T23:59:04Z,2017-03-31T23:59:08Z,MERGED,True,50,6,3,https://github.com/mikaelarguedas,wrap rcl_get_names in rclpy,4,[],https://github.com/ros2/rclpy/pull/71,https://github.com/mikaelarguedas,4,https://github.com/ros2/rclpy/pull/71#issuecomment-290872299,,"merging this along https://github.com/ros2/cli_tools/pull/9
If there is any follow-up comment please post them here and I'll address them",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,72,2017-03-29T08:15:43Z,2017-04-08T09:04:17Z,2017-04-08T09:04:21Z,MERGED,True,6,4,2,https://github.com/wjwwood,updates to support node namespace and new rcl API,4,['enhancement'],https://github.com/ros2/rclpy/pull/72,https://github.com/wjwwood,1,https://github.com/ros2/rclpy/pull/72,Connects to ros2/rmw#95,Connects to ros2/rmw#95,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,72,2017-03-29T08:15:43Z,2017-04-08T09:04:17Z,2017-04-08T09:04:21Z,MERGED,True,6,4,2,https://github.com/wjwwood,updates to support node namespace and new rcl API,4,['enhancement'],https://github.com/ros2/rclpy/pull/72,https://github.com/wjwwood,2,https://github.com/ros2/rclpy/pull/72#issuecomment-292370574,Connects to ros2/rmw#95,"I think a separate validation function makes sense.

In rclpy?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,73,2017-04-05T19:02:19Z,2017-04-05T21:02:57Z,2017-04-05T21:03:22Z,MERGED,True,11,11,3,https://github.com/dirk-thomas,force using explicit kwargs,1,[],https://github.com/ros2/rclpy/pull/73,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/73,,,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,73,2017-04-05T19:02:19Z,2017-04-05T21:02:57Z,2017-04-05T21:03:22Z,MERGED,True,11,11,3,https://github.com/dirk-thomas,force using explicit kwargs,1,[],https://github.com/ros2/rclpy/pull/73,https://github.com/dhood,2,https://github.com/ros2/rclpy/pull/73#issuecomment-291968183,,"If I understand the implications of this correctly, won't it break demos e.g. https://github.com/ros2/demos/blob/master/demo_nodes_py/topics/listener_qos_py.py#L49 ?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,73,2017-04-05T19:02:19Z,2017-04-05T21:02:57Z,2017-04-05T21:03:22Z,MERGED,True,11,11,3,https://github.com/dirk-thomas,force using explicit kwargs,1,[],https://github.com/ros2/rclpy/pull/73,https://github.com/mikaelarguedas,3,https://github.com/ros2/rclpy/pull/73#issuecomment-291969058,,"it will, demos and examples need to be updated accordingly
…
On Wed, Apr 5, 2017 at 12:20 PM, dhood ***@***.***> wrote:
 If I understand the implications of this correctly, won't it break demos
 e.g. https://github.com/ros2/demos/blob/master/demo_nodes_py/
 topics/listener_qos_py.py#L49 ?

 —
 You are receiving this because you commented.
 Reply to this email directly, view it on GitHub
 <#73 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AGVh8LaeDISQihW1JlyP9mF-S7ORAmpOks5rs-mYgaJpZM4M0rMJ>
 .",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,73,2017-04-05T19:02:19Z,2017-04-05T21:02:57Z,2017-04-05T21:03:22Z,MERGED,True,11,11,3,https://github.com/dirk-thomas,force using explicit kwargs,1,[],https://github.com/ros2/rclpy/pull/73,https://github.com/dirk-thomas,4,https://github.com/ros2/rclpy/pull/73#issuecomment-291993242,,Here we go including the referenced PRs:,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,73,2017-04-05T19:02:19Z,2017-04-05T21:02:57Z,2017-04-05T21:03:22Z,MERGED,True,11,11,3,https://github.com/dirk-thomas,force using explicit kwargs,1,[],https://github.com/ros2/rclpy/pull/73,https://github.com/mikaelarguedas,5,https://github.com/ros2/rclpy/pull/73#issuecomment-291993258,,"I know it's not tested by ci and a reflection of the demos, but can you update https://github.com/ros2/tutorials/ accordingly too ? thanks!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,73,2017-04-05T19:02:19Z,2017-04-05T21:02:57Z,2017-04-05T21:03:22Z,MERGED,True,11,11,3,https://github.com/dirk-thomas,force using explicit kwargs,1,[],https://github.com/ros2/rclpy/pull/73,https://github.com/dirk-thomas,6,https://github.com/ros2/rclpy/pull/73#issuecomment-291995827,,https://github.com/ros2/ros2/wiki/Rosbag-with-ROS1-Bridge/_compare/ff21d181b126d2b4e8484dd4f45bdb9939684783...4a6dfb3ef6fe0447185da37c042ea86559663a21,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,75,2017-04-11T23:20:48Z,2017-04-14T23:18:59Z,2017-04-14T23:19:03Z,MERGED,True,12,7,3,https://github.com/Karsten1987,use string_array_t from c_utilities package,2,[],https://github.com/ros2/rclpy/pull/75,https://github.com/Karsten1987,1,https://github.com/ros2/rclpy/pull/75,connects to ros2/rmw#100,connects to ros2/rmw#100,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,76,2017-04-13T21:33:01Z,2017-04-19T19:38:07Z,2017-04-19T19:38:11Z,MERGED,True,3,2,1,https://github.com/wjwwood,refactor to pass allocator to some rcl functions,1,['enhancement'],https://github.com/ros2/rclpy/pull/76,https://github.com/wjwwood,1,https://github.com/ros2/rclpy/pull/76,Connects to ros2/rcutils#16,Connects to ros2/rcutils#16,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,77,2017-04-19T04:56:11Z,2017-04-19T06:05:17Z,2017-04-19T06:05:20Z,MERGED,True,1,1,1,https://github.com/wjwwood,skip D401 on rclpy_excepthook,1,[],https://github.com/ros2/rclpy/pull/77,https://github.com/wjwwood,1,https://github.com/ros2/rclpy/pull/77,"I couldn't find a way to make the docstring imperative and still make sense. So I added a noqa as suggested by pydocstyle when this one gives a false positive. I'm 100% happy with the solution, but I'm going to merge it as soon as I get a green CI back since it is broken on master atm due to the new pydocstyle version.
If someone has a better solution please open up a new pr for it.","I couldn't find a way to make the docstring imperative and still make sense. So I added a noqa as suggested by pydocstyle when this one gives a false positive. I'm 100% happy with the solution, but I'm going to merge it as soon as I get a green CI back since it is broken on master atm due to the new pydocstyle version.
If someone has a better solution please open up a new pr for it.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,77,2017-04-19T04:56:11Z,2017-04-19T06:05:17Z,2017-04-19T06:05:20Z,MERGED,True,1,1,1,https://github.com/wjwwood,skip D401 on rclpy_excepthook,1,[],https://github.com/ros2/rclpy/pull/77,https://github.com/wjwwood,2,https://github.com/ros2/rclpy/pull/77#issuecomment-295110687,"I couldn't find a way to make the docstring imperative and still make sense. So I added a noqa as suggested by pydocstyle when this one gives a false positive. I'm 100% happy with the solution, but I'm going to merge it as soon as I get a green CI back since it is broken on master atm due to the new pydocstyle version.
If someone has a better solution please open up a new pr for it.",,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,78,2017-04-20T01:35:30Z,2017-04-20T18:15:18Z,2017-04-20T18:15:21Z,MERGED,True,11,11,3,https://github.com/mikaelarguedas,rename {c_}utilities to rcutils,2,[],https://github.com/ros2/rclpy/pull/78,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/78,"Connects to ros2/rcutils#17
looks like this one was missing","Connects to ros2/rcutils#17
looks like this one was missing",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,79,2017-04-20T19:46:51Z,2017-04-21T00:04:22Z,2017-04-21T00:04:22Z,MERGED,True,11,0,1,https://github.com/yamokosk,fixes memory leak in rclpy_publish,1,[],https://github.com/ros2/rclpy/pull/79,https://github.com/yamokosk,1,https://github.com/ros2/rclpy/pull/79,"I believe this PR fixes the memory leak referred to in #74. Here are my results with valgrind, pre- and post-fix:
Without fix (Float64MultiArray test):
==23766== LEAK SUMMARY:
==23766==    definitely lost: 584 bytes in 17 blocks
==23766==    indirectly lost: 2,400,702 bytes in 22 blocks
==23766==      possibly lost: 8,888 bytes in 14 blocks
==23766==    still reachable: 3,967,098 bytes in 3,247 blocks
==23766==         suppressed: 0 bytes in 0 blocks

With fix (Float64MultiArray test):
==18138== LEAK SUMMARY:
==18138==    definitely lost: 323 bytes in 13 blocks
==18138==    indirectly lost: 320 bytes in 7 blocks
==18138==      possibly lost: 8,200 bytes in 13 blocks
==18138==    still reachable: 3,949,000 bytes in 3,240 blocks
==18138==         suppressed: 0 bytes in 0 blocks


Without fix (String):
==29155== LEAK SUMMARY:
==29155==    definitely lost: 500,298 bytes in 9 blocks
==29155==    indirectly lost: 750,323 bytes in 10 blocks
==29155==      possibly lost: 6,680 bytes in 11 blocks
==29155==    still reachable: 1,714,333 bytes in 3,213 blocks
==29155==         suppressed: 0 bytes in 0 blocks

With fix (String):
==19726== LEAK SUMMARY:
==19726==    definitely lost: 500,314 bytes in 7 blocks
==19726==    indirectly lost: 600 bytes in 13 blocks
==19726==      possibly lost: 12,144 bytes in 18 blocks
==19726==    still reachable: 1,731,327 bytes in 3,220 blocks
==19726==         suppressed: 0 bytes in 0 blocks

Unfortunately, there is something funny still going on with String. Valgrind seems to think its something with Python3:
==22910== 500,098 bytes in 2 blocks are definitely lost in loss record 925 of 926
==22910==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==22910==    by 0x5D3AD6: PyObject_Malloc (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x5440EF: PyUnicode_New (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x532C78: PyUnicode_Join (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528B25: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528813: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52D82E: ??? (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528EED: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52D2E2: ??? (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528EED: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52D2E2: ??? (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52DFDE: PyEval_EvalCode (in /home/yamokosk/ros2_ws/rclpy/bin/python3)

Here is the test code I was using with valgrind:
import rclpy
import utilities as ut
from random import choice
from string import ascii_uppercase

from std_msgs.msg import String
from std_msgs.msg import MultiArrayDimension
from std_msgs.msg import MultiArrayLayout
from std_msgs.msg import Float64MultiArray
from rclpy.qos import qos_profile_default


class MinimalPublisher:

    def __init__(self, node):
        # String
        self.publisher = node.create_publisher(String, '~/topic')

        # Float64MultiArray
        # self.publisher = node.create_publisher(Float64MultiArray, '~/topic')

        timer_period = 1  # seconds

        # Define a new timer for each pub
        self.str_timer = node.create_timer(timer_period, self.str_timer_callback)

    def str_timer_callback(self):
        # String
        msg = String()
        msg.data = ''.join(choice(ascii_uppercase) for i in range(250000))

        # Float64MultiArray
        # size = 100000
        # msg = Float64MultiArray()
        # msg.layout = MultiArrayLayout()
        # msg.layout.dim.append(MultiArrayDimension())
        # msg.layout.dim[0].label = 'x'
        # msg.layout.dim[0].size = size
        # msg.layout.dim[0].stride = 1
        # msg.layout.data_offset = 0
        # msg.data = [float(x) for x in range(size)]

        self.publisher.publish(msg)
        print('Publishing: ', len(msg.data))


def main(args=None):
    rclpy.init(args=args)

    node = rclpy.create_node('minimal_publisher')

    minimal_publisher = MinimalPublisher(node)
    # minimal_publisher  # prevent unused variable warning

    count = 0
    max_count = 3
    while rclpy.ok() and count < max_count:
        rclpy.spin_once(node)
        count = count + 1

    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
Subscriber
import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '../../src/playground/'))

import rclpy
from rclpy.qos import qos_profile_default, qos_profile_sensor_data
from std_msgs.msg import String
from std_msgs.msg import Float64MultiArray

class MinimalSubscriber:

    def __init__(self, node):
        # String
        self.subscription = node.create_subscription(String, '~/topic', self.listener_callback, qos_profile=qos_profile_default)

        # Float64MultiArray
        # self.subscription = node.create_subscription(Float64MultiArray, '~/topic', self.listener_callback)
        self.subscription  # prevent unused variable warning

    def listener_callback(self, msg):
        print(""I heard - "", len(msg.data))


def main(args=None):
    rclpy.init(args=args)

    node = rclpy.create_node('minimal_publisher')

    minimal_subscriber = MinimalSubscriber(node)
    minimal_subscriber  # prevent unused variable warning
    while rclpy.ok():
        rclpy.spin_once(node)

    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
And what I ran in one terminal:
$ valgrind --tool=memcheck --leak-check=full pg_pub

And in another terminal:
$ pg_sub","I believe this PR fixes the memory leak referred to in #74. Here are my results with valgrind, pre- and post-fix:
Without fix (Float64MultiArray test):
==23766== LEAK SUMMARY:
==23766==    definitely lost: 584 bytes in 17 blocks
==23766==    indirectly lost: 2,400,702 bytes in 22 blocks
==23766==      possibly lost: 8,888 bytes in 14 blocks
==23766==    still reachable: 3,967,098 bytes in 3,247 blocks
==23766==         suppressed: 0 bytes in 0 blocks

With fix (Float64MultiArray test):
==18138== LEAK SUMMARY:
==18138==    definitely lost: 323 bytes in 13 blocks
==18138==    indirectly lost: 320 bytes in 7 blocks
==18138==      possibly lost: 8,200 bytes in 13 blocks
==18138==    still reachable: 3,949,000 bytes in 3,240 blocks
==18138==         suppressed: 0 bytes in 0 blocks


Without fix (String):
==29155== LEAK SUMMARY:
==29155==    definitely lost: 500,298 bytes in 9 blocks
==29155==    indirectly lost: 750,323 bytes in 10 blocks
==29155==      possibly lost: 6,680 bytes in 11 blocks
==29155==    still reachable: 1,714,333 bytes in 3,213 blocks
==29155==         suppressed: 0 bytes in 0 blocks

With fix (String):
==19726== LEAK SUMMARY:
==19726==    definitely lost: 500,314 bytes in 7 blocks
==19726==    indirectly lost: 600 bytes in 13 blocks
==19726==      possibly lost: 12,144 bytes in 18 blocks
==19726==    still reachable: 1,731,327 bytes in 3,220 blocks
==19726==         suppressed: 0 bytes in 0 blocks

Unfortunately, there is something funny still going on with String. Valgrind seems to think its something with Python3:
==22910== 500,098 bytes in 2 blocks are definitely lost in loss record 925 of 926
==22910==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==22910==    by 0x5D3AD6: PyObject_Malloc (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x5440EF: PyUnicode_New (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x532C78: PyUnicode_Join (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528B25: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528813: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52D82E: ??? (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528EED: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52D2E2: ??? (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528EED: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52D2E2: ??? (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52DFDE: PyEval_EvalCode (in /home/yamokosk/ros2_ws/rclpy/bin/python3)

Here is the test code I was using with valgrind:
import rclpy
import utilities as ut
from random import choice
from string import ascii_uppercase

from std_msgs.msg import String
from std_msgs.msg import MultiArrayDimension
from std_msgs.msg import MultiArrayLayout
from std_msgs.msg import Float64MultiArray
from rclpy.qos import qos_profile_default


class MinimalPublisher:

    def __init__(self, node):
        # String
        self.publisher = node.create_publisher(String, '~/topic')

        # Float64MultiArray
        # self.publisher = node.create_publisher(Float64MultiArray, '~/topic')

        timer_period = 1  # seconds

        # Define a new timer for each pub
        self.str_timer = node.create_timer(timer_period, self.str_timer_callback)

    def str_timer_callback(self):
        # String
        msg = String()
        msg.data = ''.join(choice(ascii_uppercase) for i in range(250000))

        # Float64MultiArray
        # size = 100000
        # msg = Float64MultiArray()
        # msg.layout = MultiArrayLayout()
        # msg.layout.dim.append(MultiArrayDimension())
        # msg.layout.dim[0].label = 'x'
        # msg.layout.dim[0].size = size
        # msg.layout.dim[0].stride = 1
        # msg.layout.data_offset = 0
        # msg.data = [float(x) for x in range(size)]

        self.publisher.publish(msg)
        print('Publishing: ', len(msg.data))


def main(args=None):
    rclpy.init(args=args)

    node = rclpy.create_node('minimal_publisher')

    minimal_publisher = MinimalPublisher(node)
    # minimal_publisher  # prevent unused variable warning

    count = 0
    max_count = 3
    while rclpy.ok() and count < max_count:
        rclpy.spin_once(node)
        count = count + 1

    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
Subscriber
import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '../../src/playground/'))

import rclpy
from rclpy.qos import qos_profile_default, qos_profile_sensor_data
from std_msgs.msg import String
from std_msgs.msg import Float64MultiArray

class MinimalSubscriber:

    def __init__(self, node):
        # String
        self.subscription = node.create_subscription(String, '~/topic', self.listener_callback, qos_profile=qos_profile_default)

        # Float64MultiArray
        # self.subscription = node.create_subscription(Float64MultiArray, '~/topic', self.listener_callback)
        self.subscription  # prevent unused variable warning

    def listener_callback(self, msg):
        print(""I heard - "", len(msg.data))


def main(args=None):
    rclpy.init(args=args)

    node = rclpy.create_node('minimal_publisher')

    minimal_subscriber = MinimalSubscriber(node)
    minimal_subscriber  # prevent unused variable warning
    while rclpy.ok():
        rclpy.spin_once(node)

    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
And what I ran in one terminal:
$ valgrind --tool=memcheck --leak-check=full pg_pub

And in another terminal:
$ pg_sub",True,{'THUMBS_UP': ['https://github.com/IanTheEngineer']}
ros2/rclpy,https://github.com/ros2/rclpy,79,2017-04-20T19:46:51Z,2017-04-21T00:04:22Z,2017-04-21T00:04:22Z,MERGED,True,11,0,1,https://github.com/yamokosk,fixes memory leak in rclpy_publish,1,[],https://github.com/ros2/rclpy/pull/79,https://github.com/IanTheEngineer,2,https://github.com/ros2/rclpy/pull/79#issuecomment-295887948,"I believe this PR fixes the memory leak referred to in #74. Here are my results with valgrind, pre- and post-fix:
Without fix (Float64MultiArray test):
==23766== LEAK SUMMARY:
==23766==    definitely lost: 584 bytes in 17 blocks
==23766==    indirectly lost: 2,400,702 bytes in 22 blocks
==23766==      possibly lost: 8,888 bytes in 14 blocks
==23766==    still reachable: 3,967,098 bytes in 3,247 blocks
==23766==         suppressed: 0 bytes in 0 blocks

With fix (Float64MultiArray test):
==18138== LEAK SUMMARY:
==18138==    definitely lost: 323 bytes in 13 blocks
==18138==    indirectly lost: 320 bytes in 7 blocks
==18138==      possibly lost: 8,200 bytes in 13 blocks
==18138==    still reachable: 3,949,000 bytes in 3,240 blocks
==18138==         suppressed: 0 bytes in 0 blocks


Without fix (String):
==29155== LEAK SUMMARY:
==29155==    definitely lost: 500,298 bytes in 9 blocks
==29155==    indirectly lost: 750,323 bytes in 10 blocks
==29155==      possibly lost: 6,680 bytes in 11 blocks
==29155==    still reachable: 1,714,333 bytes in 3,213 blocks
==29155==         suppressed: 0 bytes in 0 blocks

With fix (String):
==19726== LEAK SUMMARY:
==19726==    definitely lost: 500,314 bytes in 7 blocks
==19726==    indirectly lost: 600 bytes in 13 blocks
==19726==      possibly lost: 12,144 bytes in 18 blocks
==19726==    still reachable: 1,731,327 bytes in 3,220 blocks
==19726==         suppressed: 0 bytes in 0 blocks

Unfortunately, there is something funny still going on with String. Valgrind seems to think its something with Python3:
==22910== 500,098 bytes in 2 blocks are definitely lost in loss record 925 of 926
==22910==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==22910==    by 0x5D3AD6: PyObject_Malloc (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x5440EF: PyUnicode_New (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x532C78: PyUnicode_Join (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528B25: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528813: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52D82E: ??? (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528EED: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52D2E2: ??? (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528EED: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52D2E2: ??? (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52DFDE: PyEval_EvalCode (in /home/yamokosk/ros2_ws/rclpy/bin/python3)

Here is the test code I was using with valgrind:
import rclpy
import utilities as ut
from random import choice
from string import ascii_uppercase

from std_msgs.msg import String
from std_msgs.msg import MultiArrayDimension
from std_msgs.msg import MultiArrayLayout
from std_msgs.msg import Float64MultiArray
from rclpy.qos import qos_profile_default


class MinimalPublisher:

    def __init__(self, node):
        # String
        self.publisher = node.create_publisher(String, '~/topic')

        # Float64MultiArray
        # self.publisher = node.create_publisher(Float64MultiArray, '~/topic')

        timer_period = 1  # seconds

        # Define a new timer for each pub
        self.str_timer = node.create_timer(timer_period, self.str_timer_callback)

    def str_timer_callback(self):
        # String
        msg = String()
        msg.data = ''.join(choice(ascii_uppercase) for i in range(250000))

        # Float64MultiArray
        # size = 100000
        # msg = Float64MultiArray()
        # msg.layout = MultiArrayLayout()
        # msg.layout.dim.append(MultiArrayDimension())
        # msg.layout.dim[0].label = 'x'
        # msg.layout.dim[0].size = size
        # msg.layout.dim[0].stride = 1
        # msg.layout.data_offset = 0
        # msg.data = [float(x) for x in range(size)]

        self.publisher.publish(msg)
        print('Publishing: ', len(msg.data))


def main(args=None):
    rclpy.init(args=args)

    node = rclpy.create_node('minimal_publisher')

    minimal_publisher = MinimalPublisher(node)
    # minimal_publisher  # prevent unused variable warning

    count = 0
    max_count = 3
    while rclpy.ok() and count < max_count:
        rclpy.spin_once(node)
        count = count + 1

    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
Subscriber
import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '../../src/playground/'))

import rclpy
from rclpy.qos import qos_profile_default, qos_profile_sensor_data
from std_msgs.msg import String
from std_msgs.msg import Float64MultiArray

class MinimalSubscriber:

    def __init__(self, node):
        # String
        self.subscription = node.create_subscription(String, '~/topic', self.listener_callback, qos_profile=qos_profile_default)

        # Float64MultiArray
        # self.subscription = node.create_subscription(Float64MultiArray, '~/topic', self.listener_callback)
        self.subscription  # prevent unused variable warning

    def listener_callback(self, msg):
        print(""I heard - "", len(msg.data))


def main(args=None):
    rclpy.init(args=args)

    node = rclpy.create_node('minimal_publisher')

    minimal_subscriber = MinimalSubscriber(node)
    minimal_subscriber  # prevent unused variable warning
    while rclpy.ok():
        rclpy.spin_once(node)

    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
And what I ran in one terminal:
$ valgrind --tool=memcheck --leak-check=full pg_pub

And in another terminal:
$ pg_sub","Interesting, this does seem this solves the second memory issue mentioned in that issue, well done! I have a feeling that initial memory issue reported in #74 is to blame for the still reachable memory:
With fix (Float64MultiArray test):
==18138== LEAK SUMMARY:
==18138==    definitely lost: 323 bytes in 13 blocks
==18138==    indirectly lost: 320 bytes in 7 blocks
==18138==      possibly lost: 8,200 bytes in 13 blocks
==18138==    still reachable: 3,949,000 bytes in 3,240 blocks <---
==18138==         suppressed: 0 bytes in 0 blocks

That should probably addressed separately though.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,79,2017-04-20T19:46:51Z,2017-04-21T00:04:22Z,2017-04-21T00:04:22Z,MERGED,True,11,0,1,https://github.com/yamokosk,fixes memory leak in rclpy_publish,1,[],https://github.com/ros2/rclpy/pull/79,https://github.com/mikaelarguedas,3,https://github.com/ros2/rclpy/pull/79#issuecomment-295902382,"I believe this PR fixes the memory leak referred to in #74. Here are my results with valgrind, pre- and post-fix:
Without fix (Float64MultiArray test):
==23766== LEAK SUMMARY:
==23766==    definitely lost: 584 bytes in 17 blocks
==23766==    indirectly lost: 2,400,702 bytes in 22 blocks
==23766==      possibly lost: 8,888 bytes in 14 blocks
==23766==    still reachable: 3,967,098 bytes in 3,247 blocks
==23766==         suppressed: 0 bytes in 0 blocks

With fix (Float64MultiArray test):
==18138== LEAK SUMMARY:
==18138==    definitely lost: 323 bytes in 13 blocks
==18138==    indirectly lost: 320 bytes in 7 blocks
==18138==      possibly lost: 8,200 bytes in 13 blocks
==18138==    still reachable: 3,949,000 bytes in 3,240 blocks
==18138==         suppressed: 0 bytes in 0 blocks


Without fix (String):
==29155== LEAK SUMMARY:
==29155==    definitely lost: 500,298 bytes in 9 blocks
==29155==    indirectly lost: 750,323 bytes in 10 blocks
==29155==      possibly lost: 6,680 bytes in 11 blocks
==29155==    still reachable: 1,714,333 bytes in 3,213 blocks
==29155==         suppressed: 0 bytes in 0 blocks

With fix (String):
==19726== LEAK SUMMARY:
==19726==    definitely lost: 500,314 bytes in 7 blocks
==19726==    indirectly lost: 600 bytes in 13 blocks
==19726==      possibly lost: 12,144 bytes in 18 blocks
==19726==    still reachable: 1,731,327 bytes in 3,220 blocks
==19726==         suppressed: 0 bytes in 0 blocks

Unfortunately, there is something funny still going on with String. Valgrind seems to think its something with Python3:
==22910== 500,098 bytes in 2 blocks are definitely lost in loss record 925 of 926
==22910==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==22910==    by 0x5D3AD6: PyObject_Malloc (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x5440EF: PyUnicode_New (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x532C78: PyUnicode_Join (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528B25: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528813: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52D82E: ??? (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528EED: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52D2E2: ??? (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528EED: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52D2E2: ??? (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52DFDE: PyEval_EvalCode (in /home/yamokosk/ros2_ws/rclpy/bin/python3)

Here is the test code I was using with valgrind:
import rclpy
import utilities as ut
from random import choice
from string import ascii_uppercase

from std_msgs.msg import String
from std_msgs.msg import MultiArrayDimension
from std_msgs.msg import MultiArrayLayout
from std_msgs.msg import Float64MultiArray
from rclpy.qos import qos_profile_default


class MinimalPublisher:

    def __init__(self, node):
        # String
        self.publisher = node.create_publisher(String, '~/topic')

        # Float64MultiArray
        # self.publisher = node.create_publisher(Float64MultiArray, '~/topic')

        timer_period = 1  # seconds

        # Define a new timer for each pub
        self.str_timer = node.create_timer(timer_period, self.str_timer_callback)

    def str_timer_callback(self):
        # String
        msg = String()
        msg.data = ''.join(choice(ascii_uppercase) for i in range(250000))

        # Float64MultiArray
        # size = 100000
        # msg = Float64MultiArray()
        # msg.layout = MultiArrayLayout()
        # msg.layout.dim.append(MultiArrayDimension())
        # msg.layout.dim[0].label = 'x'
        # msg.layout.dim[0].size = size
        # msg.layout.dim[0].stride = 1
        # msg.layout.data_offset = 0
        # msg.data = [float(x) for x in range(size)]

        self.publisher.publish(msg)
        print('Publishing: ', len(msg.data))


def main(args=None):
    rclpy.init(args=args)

    node = rclpy.create_node('minimal_publisher')

    minimal_publisher = MinimalPublisher(node)
    # minimal_publisher  # prevent unused variable warning

    count = 0
    max_count = 3
    while rclpy.ok() and count < max_count:
        rclpy.spin_once(node)
        count = count + 1

    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
Subscriber
import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '../../src/playground/'))

import rclpy
from rclpy.qos import qos_profile_default, qos_profile_sensor_data
from std_msgs.msg import String
from std_msgs.msg import Float64MultiArray

class MinimalSubscriber:

    def __init__(self, node):
        # String
        self.subscription = node.create_subscription(String, '~/topic', self.listener_callback, qos_profile=qos_profile_default)

        # Float64MultiArray
        # self.subscription = node.create_subscription(Float64MultiArray, '~/topic', self.listener_callback)
        self.subscription  # prevent unused variable warning

    def listener_callback(self, msg):
        print(""I heard - "", len(msg.data))


def main(args=None):
    rclpy.init(args=args)

    node = rclpy.create_node('minimal_publisher')

    minimal_subscriber = MinimalSubscriber(node)
    minimal_subscriber  # prevent unused variable warning
    while rclpy.ok():
        rclpy.spin_once(node)

    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
And what I ran in one terminal:
$ valgrind --tool=memcheck --leak-check=full pg_pub

And in another terminal:
$ pg_sub",This looks good to me as well. Thanks for working on this. I'll rebase these branches on top of master to run CI if it's ok with you @yamokosk,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,79,2017-04-20T19:46:51Z,2017-04-21T00:04:22Z,2017-04-21T00:04:22Z,MERGED,True,11,0,1,https://github.com/yamokosk,fixes memory leak in rclpy_publish,1,[],https://github.com/ros2/rclpy/pull/79,https://github.com/mikaelarguedas,4,https://github.com/ros2/rclpy/pull/79#issuecomment-295906672,"I believe this PR fixes the memory leak referred to in #74. Here are my results with valgrind, pre- and post-fix:
Without fix (Float64MultiArray test):
==23766== LEAK SUMMARY:
==23766==    definitely lost: 584 bytes in 17 blocks
==23766==    indirectly lost: 2,400,702 bytes in 22 blocks
==23766==      possibly lost: 8,888 bytes in 14 blocks
==23766==    still reachable: 3,967,098 bytes in 3,247 blocks
==23766==         suppressed: 0 bytes in 0 blocks

With fix (Float64MultiArray test):
==18138== LEAK SUMMARY:
==18138==    definitely lost: 323 bytes in 13 blocks
==18138==    indirectly lost: 320 bytes in 7 blocks
==18138==      possibly lost: 8,200 bytes in 13 blocks
==18138==    still reachable: 3,949,000 bytes in 3,240 blocks
==18138==         suppressed: 0 bytes in 0 blocks


Without fix (String):
==29155== LEAK SUMMARY:
==29155==    definitely lost: 500,298 bytes in 9 blocks
==29155==    indirectly lost: 750,323 bytes in 10 blocks
==29155==      possibly lost: 6,680 bytes in 11 blocks
==29155==    still reachable: 1,714,333 bytes in 3,213 blocks
==29155==         suppressed: 0 bytes in 0 blocks

With fix (String):
==19726== LEAK SUMMARY:
==19726==    definitely lost: 500,314 bytes in 7 blocks
==19726==    indirectly lost: 600 bytes in 13 blocks
==19726==      possibly lost: 12,144 bytes in 18 blocks
==19726==    still reachable: 1,731,327 bytes in 3,220 blocks
==19726==         suppressed: 0 bytes in 0 blocks

Unfortunately, there is something funny still going on with String. Valgrind seems to think its something with Python3:
==22910== 500,098 bytes in 2 blocks are definitely lost in loss record 925 of 926
==22910==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==22910==    by 0x5D3AD6: PyObject_Malloc (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x5440EF: PyUnicode_New (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x532C78: PyUnicode_Join (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528B25: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528813: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52D82E: ??? (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528EED: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52D2E2: ??? (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528EED: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52D2E2: ??? (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52DFDE: PyEval_EvalCode (in /home/yamokosk/ros2_ws/rclpy/bin/python3)

Here is the test code I was using with valgrind:
import rclpy
import utilities as ut
from random import choice
from string import ascii_uppercase

from std_msgs.msg import String
from std_msgs.msg import MultiArrayDimension
from std_msgs.msg import MultiArrayLayout
from std_msgs.msg import Float64MultiArray
from rclpy.qos import qos_profile_default


class MinimalPublisher:

    def __init__(self, node):
        # String
        self.publisher = node.create_publisher(String, '~/topic')

        # Float64MultiArray
        # self.publisher = node.create_publisher(Float64MultiArray, '~/topic')

        timer_period = 1  # seconds

        # Define a new timer for each pub
        self.str_timer = node.create_timer(timer_period, self.str_timer_callback)

    def str_timer_callback(self):
        # String
        msg = String()
        msg.data = ''.join(choice(ascii_uppercase) for i in range(250000))

        # Float64MultiArray
        # size = 100000
        # msg = Float64MultiArray()
        # msg.layout = MultiArrayLayout()
        # msg.layout.dim.append(MultiArrayDimension())
        # msg.layout.dim[0].label = 'x'
        # msg.layout.dim[0].size = size
        # msg.layout.dim[0].stride = 1
        # msg.layout.data_offset = 0
        # msg.data = [float(x) for x in range(size)]

        self.publisher.publish(msg)
        print('Publishing: ', len(msg.data))


def main(args=None):
    rclpy.init(args=args)

    node = rclpy.create_node('minimal_publisher')

    minimal_publisher = MinimalPublisher(node)
    # minimal_publisher  # prevent unused variable warning

    count = 0
    max_count = 3
    while rclpy.ok() and count < max_count:
        rclpy.spin_once(node)
        count = count + 1

    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
Subscriber
import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '../../src/playground/'))

import rclpy
from rclpy.qos import qos_profile_default, qos_profile_sensor_data
from std_msgs.msg import String
from std_msgs.msg import Float64MultiArray

class MinimalSubscriber:

    def __init__(self, node):
        # String
        self.subscription = node.create_subscription(String, '~/topic', self.listener_callback, qos_profile=qos_profile_default)

        # Float64MultiArray
        # self.subscription = node.create_subscription(Float64MultiArray, '~/topic', self.listener_callback)
        self.subscription  # prevent unused variable warning

    def listener_callback(self, msg):
        print(""I heard - "", len(msg.data))


def main(args=None):
    rclpy.init(args=args)

    node = rclpy.create_node('minimal_publisher')

    minimal_subscriber = MinimalSubscriber(node)
    minimal_subscriber  # prevent unused variable warning
    while rclpy.ok():
        rclpy.spin_once(node)

    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
And what I ran in one terminal:
$ valgrind --tool=memcheck --leak-check=full pg_pub

And in another terminal:
$ pg_sub","CI job for this and the rosidl related PR:

Linux 
Linux arm64 
MacOS 
Windows  (flaky WaitSetTestFixture__rmw_connext_cpp.zero_timeout not related to this PR)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,79,2017-04-20T19:46:51Z,2017-04-21T00:04:22Z,2017-04-21T00:04:22Z,MERGED,True,11,0,1,https://github.com/yamokosk,fixes memory leak in rclpy_publish,1,[],https://github.com/ros2/rclpy/pull/79,https://github.com/mikaelarguedas,5,https://github.com/ros2/rclpy/pull/79#issuecomment-295926979,"I believe this PR fixes the memory leak referred to in #74. Here are my results with valgrind, pre- and post-fix:
Without fix (Float64MultiArray test):
==23766== LEAK SUMMARY:
==23766==    definitely lost: 584 bytes in 17 blocks
==23766==    indirectly lost: 2,400,702 bytes in 22 blocks
==23766==      possibly lost: 8,888 bytes in 14 blocks
==23766==    still reachable: 3,967,098 bytes in 3,247 blocks
==23766==         suppressed: 0 bytes in 0 blocks

With fix (Float64MultiArray test):
==18138== LEAK SUMMARY:
==18138==    definitely lost: 323 bytes in 13 blocks
==18138==    indirectly lost: 320 bytes in 7 blocks
==18138==      possibly lost: 8,200 bytes in 13 blocks
==18138==    still reachable: 3,949,000 bytes in 3,240 blocks
==18138==         suppressed: 0 bytes in 0 blocks


Without fix (String):
==29155== LEAK SUMMARY:
==29155==    definitely lost: 500,298 bytes in 9 blocks
==29155==    indirectly lost: 750,323 bytes in 10 blocks
==29155==      possibly lost: 6,680 bytes in 11 blocks
==29155==    still reachable: 1,714,333 bytes in 3,213 blocks
==29155==         suppressed: 0 bytes in 0 blocks

With fix (String):
==19726== LEAK SUMMARY:
==19726==    definitely lost: 500,314 bytes in 7 blocks
==19726==    indirectly lost: 600 bytes in 13 blocks
==19726==      possibly lost: 12,144 bytes in 18 blocks
==19726==    still reachable: 1,731,327 bytes in 3,220 blocks
==19726==         suppressed: 0 bytes in 0 blocks

Unfortunately, there is something funny still going on with String. Valgrind seems to think its something with Python3:
==22910== 500,098 bytes in 2 blocks are definitely lost in loss record 925 of 926
==22910==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==22910==    by 0x5D3AD6: PyObject_Malloc (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x5440EF: PyUnicode_New (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x532C78: PyUnicode_Join (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528B25: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528813: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52D82E: ??? (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528EED: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52D2E2: ??? (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528EED: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52D2E2: ??? (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52DFDE: PyEval_EvalCode (in /home/yamokosk/ros2_ws/rclpy/bin/python3)

Here is the test code I was using with valgrind:
import rclpy
import utilities as ut
from random import choice
from string import ascii_uppercase

from std_msgs.msg import String
from std_msgs.msg import MultiArrayDimension
from std_msgs.msg import MultiArrayLayout
from std_msgs.msg import Float64MultiArray
from rclpy.qos import qos_profile_default


class MinimalPublisher:

    def __init__(self, node):
        # String
        self.publisher = node.create_publisher(String, '~/topic')

        # Float64MultiArray
        # self.publisher = node.create_publisher(Float64MultiArray, '~/topic')

        timer_period = 1  # seconds

        # Define a new timer for each pub
        self.str_timer = node.create_timer(timer_period, self.str_timer_callback)

    def str_timer_callback(self):
        # String
        msg = String()
        msg.data = ''.join(choice(ascii_uppercase) for i in range(250000))

        # Float64MultiArray
        # size = 100000
        # msg = Float64MultiArray()
        # msg.layout = MultiArrayLayout()
        # msg.layout.dim.append(MultiArrayDimension())
        # msg.layout.dim[0].label = 'x'
        # msg.layout.dim[0].size = size
        # msg.layout.dim[0].stride = 1
        # msg.layout.data_offset = 0
        # msg.data = [float(x) for x in range(size)]

        self.publisher.publish(msg)
        print('Publishing: ', len(msg.data))


def main(args=None):
    rclpy.init(args=args)

    node = rclpy.create_node('minimal_publisher')

    minimal_publisher = MinimalPublisher(node)
    # minimal_publisher  # prevent unused variable warning

    count = 0
    max_count = 3
    while rclpy.ok() and count < max_count:
        rclpy.spin_once(node)
        count = count + 1

    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
Subscriber
import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '../../src/playground/'))

import rclpy
from rclpy.qos import qos_profile_default, qos_profile_sensor_data
from std_msgs.msg import String
from std_msgs.msg import Float64MultiArray

class MinimalSubscriber:

    def __init__(self, node):
        # String
        self.subscription = node.create_subscription(String, '~/topic', self.listener_callback, qos_profile=qos_profile_default)

        # Float64MultiArray
        # self.subscription = node.create_subscription(Float64MultiArray, '~/topic', self.listener_callback)
        self.subscription  # prevent unused variable warning

    def listener_callback(self, msg):
        print(""I heard - "", len(msg.data))


def main(args=None):
    rclpy.init(args=args)

    node = rclpy.create_node('minimal_publisher')

    minimal_subscriber = MinimalSubscriber(node)
    minimal_subscriber  # prevent unused variable warning
    while rclpy.ok():
        rclpy.spin_once(node)

    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
And what I ran in one terminal:
$ valgrind --tool=memcheck --leak-check=full pg_pub

And in another terminal:
$ pg_sub","Ci is failing because the generated python code doesn't comply with flake8. It's fixed in ros2/rosidl@17f9e60.
I'll wait for the jobs to finish to see if any outstanding test failure appears otherwise I think this is ready to be merged",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,79,2017-04-20T19:46:51Z,2017-04-21T00:04:22Z,2017-04-21T00:04:22Z,MERGED,True,11,0,1,https://github.com/yamokosk,fixes memory leak in rclpy_publish,1,[],https://github.com/ros2/rclpy/pull/79,https://github.com/mikaelarguedas,6,https://github.com/ros2/rclpy/pull/79#issuecomment-295977975,"I believe this PR fixes the memory leak referred to in #74. Here are my results with valgrind, pre- and post-fix:
Without fix (Float64MultiArray test):
==23766== LEAK SUMMARY:
==23766==    definitely lost: 584 bytes in 17 blocks
==23766==    indirectly lost: 2,400,702 bytes in 22 blocks
==23766==      possibly lost: 8,888 bytes in 14 blocks
==23766==    still reachable: 3,967,098 bytes in 3,247 blocks
==23766==         suppressed: 0 bytes in 0 blocks

With fix (Float64MultiArray test):
==18138== LEAK SUMMARY:
==18138==    definitely lost: 323 bytes in 13 blocks
==18138==    indirectly lost: 320 bytes in 7 blocks
==18138==      possibly lost: 8,200 bytes in 13 blocks
==18138==    still reachable: 3,949,000 bytes in 3,240 blocks
==18138==         suppressed: 0 bytes in 0 blocks


Without fix (String):
==29155== LEAK SUMMARY:
==29155==    definitely lost: 500,298 bytes in 9 blocks
==29155==    indirectly lost: 750,323 bytes in 10 blocks
==29155==      possibly lost: 6,680 bytes in 11 blocks
==29155==    still reachable: 1,714,333 bytes in 3,213 blocks
==29155==         suppressed: 0 bytes in 0 blocks

With fix (String):
==19726== LEAK SUMMARY:
==19726==    definitely lost: 500,314 bytes in 7 blocks
==19726==    indirectly lost: 600 bytes in 13 blocks
==19726==      possibly lost: 12,144 bytes in 18 blocks
==19726==    still reachable: 1,731,327 bytes in 3,220 blocks
==19726==         suppressed: 0 bytes in 0 blocks

Unfortunately, there is something funny still going on with String. Valgrind seems to think its something with Python3:
==22910== 500,098 bytes in 2 blocks are definitely lost in loss record 925 of 926
==22910==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==22910==    by 0x5D3AD6: PyObject_Malloc (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x5440EF: PyUnicode_New (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x532C78: PyUnicode_Join (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528B25: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528813: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52D82E: ??? (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528EED: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52D2E2: ??? (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x528EED: PyEval_EvalFrameEx (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52D2E2: ??? (in /home/yamokosk/ros2_ws/rclpy/bin/python3)
==22910==    by 0x52DFDE: PyEval_EvalCode (in /home/yamokosk/ros2_ws/rclpy/bin/python3)

Here is the test code I was using with valgrind:
import rclpy
import utilities as ut
from random import choice
from string import ascii_uppercase

from std_msgs.msg import String
from std_msgs.msg import MultiArrayDimension
from std_msgs.msg import MultiArrayLayout
from std_msgs.msg import Float64MultiArray
from rclpy.qos import qos_profile_default


class MinimalPublisher:

    def __init__(self, node):
        # String
        self.publisher = node.create_publisher(String, '~/topic')

        # Float64MultiArray
        # self.publisher = node.create_publisher(Float64MultiArray, '~/topic')

        timer_period = 1  # seconds

        # Define a new timer for each pub
        self.str_timer = node.create_timer(timer_period, self.str_timer_callback)

    def str_timer_callback(self):
        # String
        msg = String()
        msg.data = ''.join(choice(ascii_uppercase) for i in range(250000))

        # Float64MultiArray
        # size = 100000
        # msg = Float64MultiArray()
        # msg.layout = MultiArrayLayout()
        # msg.layout.dim.append(MultiArrayDimension())
        # msg.layout.dim[0].label = 'x'
        # msg.layout.dim[0].size = size
        # msg.layout.dim[0].stride = 1
        # msg.layout.data_offset = 0
        # msg.data = [float(x) for x in range(size)]

        self.publisher.publish(msg)
        print('Publishing: ', len(msg.data))


def main(args=None):
    rclpy.init(args=args)

    node = rclpy.create_node('minimal_publisher')

    minimal_publisher = MinimalPublisher(node)
    # minimal_publisher  # prevent unused variable warning

    count = 0
    max_count = 3
    while rclpy.ok() and count < max_count:
        rclpy.spin_once(node)
        count = count + 1

    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
Subscriber
import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '../../src/playground/'))

import rclpy
from rclpy.qos import qos_profile_default, qos_profile_sensor_data
from std_msgs.msg import String
from std_msgs.msg import Float64MultiArray

class MinimalSubscriber:

    def __init__(self, node):
        # String
        self.subscription = node.create_subscription(String, '~/topic', self.listener_callback, qos_profile=qos_profile_default)

        # Float64MultiArray
        # self.subscription = node.create_subscription(Float64MultiArray, '~/topic', self.listener_callback)
        self.subscription  # prevent unused variable warning

    def listener_callback(self, msg):
        print(""I heard - "", len(msg.data))


def main(args=None):
    rclpy.init(args=args)

    node = rclpy.create_node('minimal_publisher')

    minimal_subscriber = MinimalSubscriber(node)
    minimal_subscriber  # prevent unused variable warning
    while rclpy.ok():
        rclpy.spin_once(node)

    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
And what I ran in one terminal:
$ valgrind --tool=memcheck --leak-check=full pg_pub

And in another terminal:
$ pg_sub","ci is green now: 
merging",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,80,2017-04-21T20:26:53Z,2017-05-11T16:53:09Z,2017-05-11T16:53:13Z,MERGED,True,55,0,1,https://github.com/yamokosk,Fixes memory leaks in python subscribers (and probably also python services),1,[],https://github.com/ros2/rclpy/pull/80,https://github.com/yamokosk,1,https://github.com/ros2/rclpy/pull/80,"This is a follow on from #79. It pairs every convert_from_py call with a destroy_ros_message. Running valgrind on a python subscriber (same test setup used in #79) yielded something like:
Before fix
==7972== LEAK SUMMARY:
==7972==    definitely lost: 709,984 bytes in 12,104 blocks
==7972==    indirectly lost: 1,232,986 bytes in 28,242 blocks
==7972==      possibly lost: 217,896 bytes in 348 blocks
==7972==    still reachable: 11,638,082 bytes in 28,306 blocks
==7972==         suppressed: 0 bytes in 0 blocks
==7972== Reachable blocks (those to which a pointer was found) are not shown.

After adding destroy_ros_message to rclpy_take (and others):
After fix
==23836== LEAK SUMMARY:
==23836==    definitely lost: 1,240 bytes in 23 blocks
==23836==    indirectly lost: 2,920 bytes in 71 blocks
==23836==      possibly lost: 11,408 bytes in 17 blocks
==23836==    still reachable: 1,563,802 bytes in 3,279 blocks
==23836==         suppressed: 0 bytes in 0 blocks
==23836== Reachable blocks (those to which a pointer was found) are not shown.

I did not explicitly test that a memory leak exists in the service functions. But by code inspection, there should be. The same fix was applied there.","This is a follow on from #79. It pairs every convert_from_py call with a destroy_ros_message. Running valgrind on a python subscriber (same test setup used in #79) yielded something like:
Before fix
==7972== LEAK SUMMARY:
==7972==    definitely lost: 709,984 bytes in 12,104 blocks
==7972==    indirectly lost: 1,232,986 bytes in 28,242 blocks
==7972==      possibly lost: 217,896 bytes in 348 blocks
==7972==    still reachable: 11,638,082 bytes in 28,306 blocks
==7972==         suppressed: 0 bytes in 0 blocks
==7972== Reachable blocks (those to which a pointer was found) are not shown.

After adding destroy_ros_message to rclpy_take (and others):
After fix
==23836== LEAK SUMMARY:
==23836==    definitely lost: 1,240 bytes in 23 blocks
==23836==    indirectly lost: 2,920 bytes in 71 blocks
==23836==      possibly lost: 11,408 bytes in 17 blocks
==23836==    still reachable: 1,563,802 bytes in 3,279 blocks
==23836==         suppressed: 0 bytes in 0 blocks
==23836== Reachable blocks (those to which a pointer was found) are not shown.

I did not explicitly test that a memory leak exists in the service functions. But by code inspection, there should be. The same fix was applied there.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,80,2017-04-21T20:26:53Z,2017-05-11T16:53:09Z,2017-05-11T16:53:13Z,MERGED,True,55,0,1,https://github.com/yamokosk,Fixes memory leaks in python subscribers (and probably also python services),1,[],https://github.com/ros2/rclpy/pull/80,https://github.com/wjwwood,2,https://github.com/ros2/rclpy/pull/80#issuecomment-297928014,"This is a follow on from #79. It pairs every convert_from_py call with a destroy_ros_message. Running valgrind on a python subscriber (same test setup used in #79) yielded something like:
Before fix
==7972== LEAK SUMMARY:
==7972==    definitely lost: 709,984 bytes in 12,104 blocks
==7972==    indirectly lost: 1,232,986 bytes in 28,242 blocks
==7972==      possibly lost: 217,896 bytes in 348 blocks
==7972==    still reachable: 11,638,082 bytes in 28,306 blocks
==7972==         suppressed: 0 bytes in 0 blocks
==7972== Reachable blocks (those to which a pointer was found) are not shown.

After adding destroy_ros_message to rclpy_take (and others):
After fix
==23836== LEAK SUMMARY:
==23836==    definitely lost: 1,240 bytes in 23 blocks
==23836==    indirectly lost: 2,920 bytes in 71 blocks
==23836==      possibly lost: 11,408 bytes in 17 blocks
==23836==    still reachable: 1,563,802 bytes in 3,279 blocks
==23836==         suppressed: 0 bytes in 0 blocks
==23836== Reachable blocks (those to which a pointer was found) are not shown.

I did not explicitly test that a memory leak exists in the service functions. But by code inspection, there should be. The same fix was applied there.","Thanks for the pr, we'll try to get to asap.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,80,2017-04-21T20:26:53Z,2017-05-11T16:53:09Z,2017-05-11T16:53:13Z,MERGED,True,55,0,1,https://github.com/yamokosk,Fixes memory leaks in python subscribers (and probably also python services),1,[],https://github.com/ros2/rclpy/pull/80,https://github.com/yamokosk,3,https://github.com/ros2/rclpy/pull/80#issuecomment-298074337,"This is a follow on from #79. It pairs every convert_from_py call with a destroy_ros_message. Running valgrind on a python subscriber (same test setup used in #79) yielded something like:
Before fix
==7972== LEAK SUMMARY:
==7972==    definitely lost: 709,984 bytes in 12,104 blocks
==7972==    indirectly lost: 1,232,986 bytes in 28,242 blocks
==7972==      possibly lost: 217,896 bytes in 348 blocks
==7972==    still reachable: 11,638,082 bytes in 28,306 blocks
==7972==         suppressed: 0 bytes in 0 blocks
==7972== Reachable blocks (those to which a pointer was found) are not shown.

After adding destroy_ros_message to rclpy_take (and others):
After fix
==23836== LEAK SUMMARY:
==23836==    definitely lost: 1,240 bytes in 23 blocks
==23836==    indirectly lost: 2,920 bytes in 71 blocks
==23836==      possibly lost: 11,408 bytes in 17 blocks
==23836==    still reachable: 1,563,802 bytes in 3,279 blocks
==23836==         suppressed: 0 bytes in 0 blocks
==23836== Reachable blocks (those to which a pointer was found) are not shown.

I did not explicitly test that a memory leak exists in the service functions. But by code inspection, there should be. The same fix was applied there.","No worries. I was considering pulling this PR back as I think a more complete fix would also address the PyMem_Malloc losses that are also occuring. I made a comment on this on another PR (#81).
I can submit a PR with both fixes. Or we can do one at a time.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,80,2017-04-21T20:26:53Z,2017-05-11T16:53:09Z,2017-05-11T16:53:13Z,MERGED,True,55,0,1,https://github.com/yamokosk,Fixes memory leaks in python subscribers (and probably also python services),1,[],https://github.com/ros2/rclpy/pull/80,https://github.com/mikaelarguedas,4,https://github.com/ros2/rclpy/pull/80#issuecomment-300566104,"This is a follow on from #79. It pairs every convert_from_py call with a destroy_ros_message. Running valgrind on a python subscriber (same test setup used in #79) yielded something like:
Before fix
==7972== LEAK SUMMARY:
==7972==    definitely lost: 709,984 bytes in 12,104 blocks
==7972==    indirectly lost: 1,232,986 bytes in 28,242 blocks
==7972==      possibly lost: 217,896 bytes in 348 blocks
==7972==    still reachable: 11,638,082 bytes in 28,306 blocks
==7972==         suppressed: 0 bytes in 0 blocks
==7972== Reachable blocks (those to which a pointer was found) are not shown.

After adding destroy_ros_message to rclpy_take (and others):
After fix
==23836== LEAK SUMMARY:
==23836==    definitely lost: 1,240 bytes in 23 blocks
==23836==    indirectly lost: 2,920 bytes in 71 blocks
==23836==      possibly lost: 11,408 bytes in 17 blocks
==23836==    still reachable: 1,563,802 bytes in 3,279 blocks
==23836==         suppressed: 0 bytes in 0 blocks
==23836== Reachable blocks (those to which a pointer was found) are not shown.

I did not explicitly test that a memory leak exists in the service functions. But by code inspection, there should be. The same fix was applied there.",@mikaelarguedas to review this,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,80,2017-04-21T20:26:53Z,2017-05-11T16:53:09Z,2017-05-11T16:53:13Z,MERGED,True,55,0,1,https://github.com/yamokosk,Fixes memory leaks in python subscribers (and probably also python services),1,[],https://github.com/ros2/rclpy/pull/80,https://github.com/mikaelarguedas,5,https://github.com/ros2/rclpy/pull/80#issuecomment-300641297,"This is a follow on from #79. It pairs every convert_from_py call with a destroy_ros_message. Running valgrind on a python subscriber (same test setup used in #79) yielded something like:
Before fix
==7972== LEAK SUMMARY:
==7972==    definitely lost: 709,984 bytes in 12,104 blocks
==7972==    indirectly lost: 1,232,986 bytes in 28,242 blocks
==7972==      possibly lost: 217,896 bytes in 348 blocks
==7972==    still reachable: 11,638,082 bytes in 28,306 blocks
==7972==         suppressed: 0 bytes in 0 blocks
==7972== Reachable blocks (those to which a pointer was found) are not shown.

After adding destroy_ros_message to rclpy_take (and others):
After fix
==23836== LEAK SUMMARY:
==23836==    definitely lost: 1,240 bytes in 23 blocks
==23836==    indirectly lost: 2,920 bytes in 71 blocks
==23836==      possibly lost: 11,408 bytes in 17 blocks
==23836==    still reachable: 1,563,802 bytes in 3,279 blocks
==23836==         suppressed: 0 bytes in 0 blocks
==23836== Reachable blocks (those to which a pointer was found) are not shown.

I did not explicitly test that a memory leak exists in the service functions. But by code inspection, there should be. The same fix was applied there.","The code change looks good to me. This has the same problem of leaking nested messages as reported in ros2/rosidl#216 but is a good incremental improvement.
I rebased the branch and ran CI on it:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,80,2017-04-21T20:26:53Z,2017-05-11T16:53:09Z,2017-05-11T16:53:13Z,MERGED,True,55,0,1,https://github.com/yamokosk,Fixes memory leaks in python subscribers (and probably also python services),1,[],https://github.com/ros2/rclpy/pull/80,https://github.com/mikaelarguedas,6,https://github.com/ros2/rclpy/pull/80#issuecomment-300850486,"This is a follow on from #79. It pairs every convert_from_py call with a destroy_ros_message. Running valgrind on a python subscriber (same test setup used in #79) yielded something like:
Before fix
==7972== LEAK SUMMARY:
==7972==    definitely lost: 709,984 bytes in 12,104 blocks
==7972==    indirectly lost: 1,232,986 bytes in 28,242 blocks
==7972==      possibly lost: 217,896 bytes in 348 blocks
==7972==    still reachable: 11,638,082 bytes in 28,306 blocks
==7972==         suppressed: 0 bytes in 0 blocks
==7972== Reachable blocks (those to which a pointer was found) are not shown.

After adding destroy_ros_message to rclpy_take (and others):
After fix
==23836== LEAK SUMMARY:
==23836==    definitely lost: 1,240 bytes in 23 blocks
==23836==    indirectly lost: 2,920 bytes in 71 blocks
==23836==      possibly lost: 11,408 bytes in 17 blocks
==23836==    still reachable: 1,563,802 bytes in 3,279 blocks
==23836==         suppressed: 0 bytes in 0 blocks
==23836== Reachable blocks (those to which a pointer was found) are not shown.

I did not explicitly test that a memory leak exists in the service functions. But by code inspection, there should be. The same fix was applied there.","I'm going to merge this as is. We'll do a follow-up PR to cleanup the asserts.
Thanks @yamokosk for the contribution!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,81,2017-04-26T04:05:40Z,2017-05-02T14:35:11Z,2017-09-05T23:40:39Z,CLOSED,False,57,0,2,https://github.com/srsidd,Bugfix/rclpy mem leak,2,[],https://github.com/ros2/rclpy/pull/81,https://github.com/srsidd,1,https://github.com/ros2/rclpy/pull/81,In reference to #74 .,In reference to #74 .,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,81,2017-04-26T04:05:40Z,2017-05-02T14:35:11Z,2017-09-05T23:40:39Z,CLOSED,False,57,0,2,https://github.com/srsidd,Bugfix/rclpy mem leak,2,[],https://github.com/ros2/rclpy/pull/81,https://github.com/yamokosk,2,https://github.com/ros2/rclpy/pull/81#issuecomment-297560279,In reference to #74 .,"Here's my suggestion for fixing this:
/// waitset destructor
void
rclpy_destroy_wait_set(PyObject* pywait_set)
{
  rcl_wait_set_t * wait_set = (rcl_wait_set_t *)PyCapsule_GetPointer(pywait_set, NULL);
  rcl_ret_t ret = rcl_wait_set_fini(wait_set);
  if (ret != RCL_RET_OK) {
    PyErr_Format(PyExc_RuntimeError,
      ""Failed to destroy wait set: %s"", rcl_get_error_string_safe());
  }
  PyMem_Free(wait_set);
  return;
}

/// Return a Capsule pointing to a zero initialized rcl_wait_set_t structure
static PyObject *
rclpy_get_zero_initialized_wait_set(PyObject * Py_UNUSED(self), PyObject * Py_UNUSED(args))
{
  rcl_wait_set_t * wait_set = (rcl_wait_set_t *)PyMem_Malloc(sizeof(rcl_wait_set_t));
  *wait_set = rcl_get_zero_initialized_wait_set();

  PyObject * pywait_set = PyCapsule_New(wait_set, NULL, rclpy_destroy_wait_set);

  return pywait_set;
}
In testing on my machine, this eliminated the leak that grew linearly with the number of calls to spin_once (and confirmed with valgrind that it was coming from wait_set). The problem is that this is not a universal fix for all the other PyMem_Malloc calls in _rclpy.c. It addresses a lot of them but for things like publisher that take two args for its _fini function, this pattern won't work.
rcl_ret_t
rcl_publisher_fini(rcl_publisher_t * publisher, rcl_node_t * node)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,81,2017-04-26T04:05:40Z,2017-05-02T14:35:11Z,2017-09-05T23:40:39Z,CLOSED,False,57,0,2,https://github.com/srsidd,Bugfix/rclpy mem leak,2,[],https://github.com/ros2/rclpy/pull/81,https://github.com/srsidd,3,https://github.com/ros2/rclpy/pull/81#issuecomment-298654024,In reference to #74 .,Closing pull request since this is not the right way of doing this. And there is an issue tracking this at #74 .,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,81,2017-04-26T04:05:40Z,2017-05-02T14:35:11Z,2017-09-05T23:40:39Z,CLOSED,False,57,0,2,https://github.com/srsidd,Bugfix/rclpy mem leak,2,[],https://github.com/ros2/rclpy/pull/81,https://github.com/BrannonKing,4,https://github.com/ros2/rclpy/pull/81#issuecomment-327322475,In reference to #74 .,Reincorporating the above rclpy_destroy_wait_set on a current build does not eliminate the memory leak.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,81,2017-04-26T04:05:40Z,2017-05-02T14:35:11Z,2017-09-05T23:40:39Z,CLOSED,False,57,0,2,https://github.com/srsidd,Bugfix/rclpy mem leak,2,[],https://github.com/ros2/rclpy/pull/81,https://github.com/mikaelarguedas,5,https://github.com/ros2/rclpy/pull/81#issuecomment-327324542,In reference to #74 .,"thanks @BrannonKing for following up on this
Yeah I think the main leak is elsewhere, especially given than the bigger the messages the bigger the leak (would go along this #74 (comment) about PyMem_Malloc)
I'm planning on chasing it down once the refactor of rclpy to use executors has been merged.
For reference: can you give more detail about the code you're running and if you also observe leaks proportional to the amount of data transmitted?
Feel free to comment on the open ticket #74 or to open another one if the leak doesn't happen in spin_once, otherwise we may lose track of comments on an already closed ticket.
Also any contribution reducing (even partially) the current leaks is more than welcome!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,81,2017-04-26T04:05:40Z,2017-05-02T14:35:11Z,2017-09-05T23:40:39Z,CLOSED,False,57,0,2,https://github.com/srsidd,Bugfix/rclpy mem leak,2,[],https://github.com/ros2/rclpy/pull/81,https://github.com/BrannonKing,6,https://github.com/ros2/rclpy/pull/81#issuecomment-327326925,In reference to #74 .,I'm aware of #74 -- it is the exact bug I was looking at. I'm not sending any messages (in my test). spin_once with a small/zero timeout leaks like the Titanic. It's super easy to reproduce: make a node and call spin_once repeatedly.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,81,2017-04-26T04:05:40Z,2017-05-02T14:35:11Z,2017-09-05T23:40:39Z,CLOSED,False,57,0,2,https://github.com/srsidd,Bugfix/rclpy mem leak,2,[],https://github.com/ros2/rclpy/pull/81,https://github.com/dirk-thomas,7,https://github.com/ros2/rclpy/pull/81#issuecomment-327333238,In reference to #74 .,@BrannonKing Can you please try the patch from #109 which should fix the memory leak described in #74 and report back.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,82,2017-05-10T04:36:18Z,2017-05-10T18:56:36Z,2017-05-19T21:53:35Z,MERGED,True,129,566,11,https://github.com/dirk-thomas,Remove agnostic lib,3,[],https://github.com/ros2/rclpy/pull/82,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/82,"Since the rclpy lib is now agnostic to the RMW impl. there is no need to keep some functions in a separate library. And since the loaded Python extension is always the same I removed all the fancy loading logic around it.
The second commit addresses a test failure. Instead of passing a known invalid parameter to the C function raise a ValueError instead.
 fixes the failing rclpytestst (http://ci.ros2.org/view/nightly/job/nightly_win_deb/lastCompletedBuild/testReport/(root)/projectroot/rclpytests/).","Since the rclpy lib is now agnostic to the RMW impl. there is no need to keep some functions in a separate library. And since the loaded Python extension is always the same I removed all the fancy loading logic around it.
The second commit addresses a test failure. Instead of passing a known invalid parameter to the C function raise a ValueError instead.
 fixes the failing rclpytestst (http://ci.ros2.org/view/nightly/job/nightly_win_deb/lastCompletedBuild/testReport/(root)/projectroot/rclpytests/).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,82,2017-05-10T04:36:18Z,2017-05-10T18:56:36Z,2017-05-19T21:53:35Z,MERGED,True,129,566,11,https://github.com/dirk-thomas,Remove agnostic lib,3,[],https://github.com/ros2/rclpy/pull/82,https://github.com/wjwwood,2,https://github.com/ros2/rclpy/pull/82#issuecomment-302818268,"Since the rclpy lib is now agnostic to the RMW impl. there is no need to keep some functions in a separate library. And since the loaded Python extension is always the same I removed all the fancy loading logic around it.
The second commit addresses a test failure. Instead of passing a known invalid parameter to the C function raise a ValueError instead.
 fixes the failing rclpytestst (http://ci.ros2.org/view/nightly/job/nightly_win_deb/lastCompletedBuild/testReport/(root)/projectroot/rclpytests/).","Unfortunately I didn't catch this before, but the removal of the proxy object machinery has caused a regression in the check that rclpy.init() has been called before using other functions. Now you get a general RuntimeError rather than the more specific rclpy.exceptions.NotInitializedException when doing something like this:
In [1]: import rclpy

In [2]: node = rclpy.create_node('foo')
---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
<ipython-input-25-e3302d2d805e> in <module>()
----> 1 node = rclpy.create_node('foo')

/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/__init__.py in create_node(node_name, namespace)
     26
     27 def create_node(node_name, *, namespace=None):
---> 28     node_handle = _rclpy.rclpy_create_node(node_name, namespace or '')
     29     return Node(node_handle)
     30

RuntimeError: Failed to create node: rcl_init() has not been called, at /Users/william/ros2_ws/src/ros2/rcl/rcl/src/rcl/node.c:92

Please restore the proxy object stuff or check that rclpy.init() has been called in each of the cases and raise the right exception.
This is the code that checked on each access of _rclpy and raise if init() had not been called:
https://github.com/ros2/rclpy/pull/82/files#diff-7486716035fb1f918746b7f5b1b31b35L49",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,82,2017-05-10T04:36:18Z,2017-05-10T18:56:36Z,2017-05-19T21:53:35Z,MERGED,True,129,566,11,https://github.com/dirk-thomas,Remove agnostic lib,3,[],https://github.com/ros2/rclpy/pull/82,https://github.com/wjwwood,3,https://github.com/ros2/rclpy/pull/82#issuecomment-302818512,"Since the rclpy lib is now agnostic to the RMW impl. there is no need to keep some functions in a separate library. And since the loaded Python extension is always the same I removed all the fancy loading logic around it.
The second commit addresses a test failure. Instead of passing a known invalid parameter to the C function raise a ValueError instead.
 fixes the failing rclpytestst (http://ci.ros2.org/view/nightly/job/nightly_win_deb/lastCompletedBuild/testReport/(root)/projectroot/rclpytests/).",I created #84 to track the issue since this cannot be reopened.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,82,2017-05-10T04:36:18Z,2017-05-10T18:56:36Z,2017-05-19T21:53:35Z,MERGED,True,129,566,11,https://github.com/dirk-thomas,Remove agnostic lib,3,[],https://github.com/ros2/rclpy/pull/82,https://github.com/wjwwood,4,https://github.com/ros2/rclpy/pull/82#issuecomment-302820092,"Since the rclpy lib is now agnostic to the RMW impl. there is no need to keep some functions in a separate library. And since the loaded Python extension is always the same I removed all the fancy loading logic around it.
The second commit addresses a test failure. Instead of passing a known invalid parameter to the C function raise a ValueError instead.
 fixes the failing rclpytestst (http://ci.ros2.org/view/nightly/job/nightly_win_deb/lastCompletedBuild/testReport/(root)/projectroot/rclpytests/).","Also, after this pr, NoImplementationAvailableException is no longer used anywhere. I'll remove it in my upcoming pr.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,85,2017-05-20T02:30:11Z,2017-05-25T20:45:31Z,2017-07-24T18:43:33Z,CLOSED,False,1238,127,17,https://github.com/wjwwood,Use namespace,7,['enhancement'],https://github.com/ros2/rclpy/pull/85,https://github.com/wjwwood,1,https://github.com/ros2/rclpy/pull/85,"Connects to ros2/rcl#137
Here are some examples of what it looks like when you give invalid names now:

invalid node name

% python3 -c ""import rclpy; rclpy.init(); rclpy.create_node('invalid_node?')""
Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/__init__.py"", line 38, in create_node
    validate_node_name(node_name)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_node_name.py"", line 34, in validate_node_name
    raise InvalidNodeNameException(node_name, error_msg, invalid_index)
rclpy.exceptions.InvalidNodeNameException: Invalid node name: node name must not contain characters other than alphanumerics or '_':
  'invalid_node?'
               ^


invalid node namespace

% python3 -c ""
import rclpy
rclpy.init()
rclpy.create_node('node_name', namespace='/invalid_ns?')""
Traceback (most recent call last):
  File ""<string>"", line 4, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/__init__.py"", line 43, in create_node
    validate_namespace(namespace)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_namespace.py"", line 38, in validate_namespace
    raise InvalidNamespaceException(namespace, error_msg, invalid_index)
rclpy.exceptions.InvalidNamespaceException: Invalid namespace: namespace must not contain characters other than alphanumerics, '_', or '/':
  '/invalid_ns?'
              ^


invalid topic name

% python3 -c ""
import rclpy
from std_msgs.msg import String
rclpy.init()
n = rclpy.create_node('node_name')
n.create_publisher(String, 'chatter?')""
Traceback (most recent call last):
  File ""<string>"", line 6, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 77, in create_publisher
    self._validate_topic_or_service_name(topic)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 60, in _validate_topic_or_service_name
    validate_topic_name(topic_or_service_name, is_service=is_service)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_topic_name.py"", line 41, in validate_topic_name
    raise InvalidTopicNameException(name, error_msg, invalid_index)
rclpy.exceptions.InvalidTopicNameException: Invalid topic name: topic name must not contain characters other than alphanumerics, '_', '~', '{', or '}':
  'chatter?'
          ^


invalid service name

% python3 -c ""
import rclpy
from std_srvs.srv import Empty
rclpy.init()
n = rclpy.create_node('node_name')
n.create_client(Empty, 'empty?')""
Traceback (most recent call last):
  File ""<string>"", line 6, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 118, in create_client
    self._validate_topic_or_service_name(srv_name, is_service=True)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 60, in _validate_topic_or_service_name
    validate_topic_name(topic_or_service_name, is_service=is_service)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_topic_name.py"", line 39, in validate_topic_name
    raise InvalidServiceNameException(name, error_msg, invalid_index)
rclpy.exceptions.InvalidServiceNameException: Invalid service name: topic name must not contain characters other than alphanumerics, '_', '~', '{', or '}':
  'empty?'
        ^","Connects to ros2/rcl#137
Here are some examples of what it looks like when you give invalid names now:

invalid node name

% python3 -c ""import rclpy; rclpy.init(); rclpy.create_node('invalid_node?')""
Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/__init__.py"", line 38, in create_node
    validate_node_name(node_name)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_node_name.py"", line 34, in validate_node_name
    raise InvalidNodeNameException(node_name, error_msg, invalid_index)
rclpy.exceptions.InvalidNodeNameException: Invalid node name: node name must not contain characters other than alphanumerics or '_':
  'invalid_node?'
               ^


invalid node namespace

% python3 -c ""
import rclpy
rclpy.init()
rclpy.create_node('node_name', namespace='/invalid_ns?')""
Traceback (most recent call last):
  File ""<string>"", line 4, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/__init__.py"", line 43, in create_node
    validate_namespace(namespace)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_namespace.py"", line 38, in validate_namespace
    raise InvalidNamespaceException(namespace, error_msg, invalid_index)
rclpy.exceptions.InvalidNamespaceException: Invalid namespace: namespace must not contain characters other than alphanumerics, '_', or '/':
  '/invalid_ns?'
              ^


invalid topic name

% python3 -c ""
import rclpy
from std_msgs.msg import String
rclpy.init()
n = rclpy.create_node('node_name')
n.create_publisher(String, 'chatter?')""
Traceback (most recent call last):
  File ""<string>"", line 6, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 77, in create_publisher
    self._validate_topic_or_service_name(topic)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 60, in _validate_topic_or_service_name
    validate_topic_name(topic_or_service_name, is_service=is_service)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_topic_name.py"", line 41, in validate_topic_name
    raise InvalidTopicNameException(name, error_msg, invalid_index)
rclpy.exceptions.InvalidTopicNameException: Invalid topic name: topic name must not contain characters other than alphanumerics, '_', '~', '{', or '}':
  'chatter?'
          ^


invalid service name

% python3 -c ""
import rclpy
from std_srvs.srv import Empty
rclpy.init()
n = rclpy.create_node('node_name')
n.create_client(Empty, 'empty?')""
Traceback (most recent call last):
  File ""<string>"", line 6, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 118, in create_client
    self._validate_topic_or_service_name(srv_name, is_service=True)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 60, in _validate_topic_or_service_name
    validate_topic_name(topic_or_service_name, is_service=is_service)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_topic_name.py"", line 39, in validate_topic_name
    raise InvalidServiceNameException(name, error_msg, invalid_index)
rclpy.exceptions.InvalidServiceNameException: Invalid service name: topic name must not contain characters other than alphanumerics, '_', '~', '{', or '}':
  'empty?'
        ^",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,85,2017-05-20T02:30:11Z,2017-05-25T20:45:31Z,2017-07-24T18:43:33Z,CLOSED,False,1238,127,17,https://github.com/wjwwood,Use namespace,7,['enhancement'],https://github.com/ros2/rclpy/pull/85,https://github.com/wjwwood,2,https://github.com/ros2/rclpy/pull/85#issuecomment-304119274,"Connects to ros2/rcl#137
Here are some examples of what it looks like when you give invalid names now:

invalid node name

% python3 -c ""import rclpy; rclpy.init(); rclpy.create_node('invalid_node?')""
Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/__init__.py"", line 38, in create_node
    validate_node_name(node_name)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_node_name.py"", line 34, in validate_node_name
    raise InvalidNodeNameException(node_name, error_msg, invalid_index)
rclpy.exceptions.InvalidNodeNameException: Invalid node name: node name must not contain characters other than alphanumerics or '_':
  'invalid_node?'
               ^


invalid node namespace

% python3 -c ""
import rclpy
rclpy.init()
rclpy.create_node('node_name', namespace='/invalid_ns?')""
Traceback (most recent call last):
  File ""<string>"", line 4, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/__init__.py"", line 43, in create_node
    validate_namespace(namespace)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_namespace.py"", line 38, in validate_namespace
    raise InvalidNamespaceException(namespace, error_msg, invalid_index)
rclpy.exceptions.InvalidNamespaceException: Invalid namespace: namespace must not contain characters other than alphanumerics, '_', or '/':
  '/invalid_ns?'
              ^


invalid topic name

% python3 -c ""
import rclpy
from std_msgs.msg import String
rclpy.init()
n = rclpy.create_node('node_name')
n.create_publisher(String, 'chatter?')""
Traceback (most recent call last):
  File ""<string>"", line 6, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 77, in create_publisher
    self._validate_topic_or_service_name(topic)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 60, in _validate_topic_or_service_name
    validate_topic_name(topic_or_service_name, is_service=is_service)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_topic_name.py"", line 41, in validate_topic_name
    raise InvalidTopicNameException(name, error_msg, invalid_index)
rclpy.exceptions.InvalidTopicNameException: Invalid topic name: topic name must not contain characters other than alphanumerics, '_', '~', '{', or '}':
  'chatter?'
          ^


invalid service name

% python3 -c ""
import rclpy
from std_srvs.srv import Empty
rclpy.init()
n = rclpy.create_node('node_name')
n.create_client(Empty, 'empty?')""
Traceback (most recent call last):
  File ""<string>"", line 6, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 118, in create_client
    self._validate_topic_or_service_name(srv_name, is_service=True)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 60, in _validate_topic_or_service_name
    validate_topic_name(topic_or_service_name, is_service=is_service)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_topic_name.py"", line 39, in validate_topic_name
    raise InvalidServiceNameException(name, error_msg, invalid_index)
rclpy.exceptions.InvalidServiceNameException: Invalid service name: topic name must not contain characters other than alphanumerics, '_', '~', '{', or '}':
  'empty?'
        ^","I had the wrong branch name in this one, closing in favor of #86",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,85,2017-05-20T02:30:11Z,2017-05-25T20:45:31Z,2017-07-24T18:43:33Z,CLOSED,False,1238,127,17,https://github.com/wjwwood,Use namespace,7,['enhancement'],https://github.com/ros2/rclpy/pull/85,https://github.com/mikaelarguedas,3,https://github.com/ros2/rclpy/pull/85#issuecomment-317486657,"Connects to ros2/rcl#137
Here are some examples of what it looks like when you give invalid names now:

invalid node name

% python3 -c ""import rclpy; rclpy.init(); rclpy.create_node('invalid_node?')""
Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/__init__.py"", line 38, in create_node
    validate_node_name(node_name)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_node_name.py"", line 34, in validate_node_name
    raise InvalidNodeNameException(node_name, error_msg, invalid_index)
rclpy.exceptions.InvalidNodeNameException: Invalid node name: node name must not contain characters other than alphanumerics or '_':
  'invalid_node?'
               ^


invalid node namespace

% python3 -c ""
import rclpy
rclpy.init()
rclpy.create_node('node_name', namespace='/invalid_ns?')""
Traceback (most recent call last):
  File ""<string>"", line 4, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/__init__.py"", line 43, in create_node
    validate_namespace(namespace)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_namespace.py"", line 38, in validate_namespace
    raise InvalidNamespaceException(namespace, error_msg, invalid_index)
rclpy.exceptions.InvalidNamespaceException: Invalid namespace: namespace must not contain characters other than alphanumerics, '_', or '/':
  '/invalid_ns?'
              ^


invalid topic name

% python3 -c ""
import rclpy
from std_msgs.msg import String
rclpy.init()
n = rclpy.create_node('node_name')
n.create_publisher(String, 'chatter?')""
Traceback (most recent call last):
  File ""<string>"", line 6, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 77, in create_publisher
    self._validate_topic_or_service_name(topic)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 60, in _validate_topic_or_service_name
    validate_topic_name(topic_or_service_name, is_service=is_service)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_topic_name.py"", line 41, in validate_topic_name
    raise InvalidTopicNameException(name, error_msg, invalid_index)
rclpy.exceptions.InvalidTopicNameException: Invalid topic name: topic name must not contain characters other than alphanumerics, '_', '~', '{', or '}':
  'chatter?'
          ^


invalid service name

% python3 -c ""
import rclpy
from std_srvs.srv import Empty
rclpy.init()
n = rclpy.create_node('node_name')
n.create_client(Empty, 'empty?')""
Traceback (most recent call last):
  File ""<string>"", line 6, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 118, in create_client
    self._validate_topic_or_service_name(srv_name, is_service=True)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 60, in _validate_topic_or_service_name
    validate_topic_name(topic_or_service_name, is_service=is_service)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_topic_name.py"", line 39, in validate_topic_name
    raise InvalidServiceNameException(name, error_msg, invalid_index)
rclpy.exceptions.InvalidServiceNameException: Invalid service name: topic name must not contain characters other than alphanumerics, '_', '~', '{', or '}':
  'empty?'
        ^",@wjwwood Can this branch be deleted?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,85,2017-05-20T02:30:11Z,2017-05-25T20:45:31Z,2017-07-24T18:43:33Z,CLOSED,False,1238,127,17,https://github.com/wjwwood,Use namespace,7,['enhancement'],https://github.com/ros2/rclpy/pull/85,https://github.com/wjwwood,4,https://github.com/ros2/rclpy/pull/85#issuecomment-317517081,"Connects to ros2/rcl#137
Here are some examples of what it looks like when you give invalid names now:

invalid node name

% python3 -c ""import rclpy; rclpy.init(); rclpy.create_node('invalid_node?')""
Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/__init__.py"", line 38, in create_node
    validate_node_name(node_name)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_node_name.py"", line 34, in validate_node_name
    raise InvalidNodeNameException(node_name, error_msg, invalid_index)
rclpy.exceptions.InvalidNodeNameException: Invalid node name: node name must not contain characters other than alphanumerics or '_':
  'invalid_node?'
               ^


invalid node namespace

% python3 -c ""
import rclpy
rclpy.init()
rclpy.create_node('node_name', namespace='/invalid_ns?')""
Traceback (most recent call last):
  File ""<string>"", line 4, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/__init__.py"", line 43, in create_node
    validate_namespace(namespace)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_namespace.py"", line 38, in validate_namespace
    raise InvalidNamespaceException(namespace, error_msg, invalid_index)
rclpy.exceptions.InvalidNamespaceException: Invalid namespace: namespace must not contain characters other than alphanumerics, '_', or '/':
  '/invalid_ns?'
              ^


invalid topic name

% python3 -c ""
import rclpy
from std_msgs.msg import String
rclpy.init()
n = rclpy.create_node('node_name')
n.create_publisher(String, 'chatter?')""
Traceback (most recent call last):
  File ""<string>"", line 6, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 77, in create_publisher
    self._validate_topic_or_service_name(topic)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 60, in _validate_topic_or_service_name
    validate_topic_name(topic_or_service_name, is_service=is_service)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_topic_name.py"", line 41, in validate_topic_name
    raise InvalidTopicNameException(name, error_msg, invalid_index)
rclpy.exceptions.InvalidTopicNameException: Invalid topic name: topic name must not contain characters other than alphanumerics, '_', '~', '{', or '}':
  'chatter?'
          ^


invalid service name

% python3 -c ""
import rclpy
from std_srvs.srv import Empty
rclpy.init()
n = rclpy.create_node('node_name')
n.create_client(Empty, 'empty?')""
Traceback (most recent call last):
  File ""<string>"", line 6, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 118, in create_client
    self._validate_topic_or_service_name(srv_name, is_service=True)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 60, in _validate_topic_or_service_name
    validate_topic_name(topic_or_service_name, is_service=is_service)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_topic_name.py"", line 39, in validate_topic_name
    raise InvalidServiceNameException(name, error_msg, invalid_index)
rclpy.exceptions.InvalidServiceNameException: Invalid service name: topic name must not contain characters other than alphanumerics, '_', '~', '{', or '}':
  'empty?'
        ^","Yes, I don't know why it was restored.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,86,2017-05-25T20:45:13Z,2017-05-31T01:24:55Z,2017-05-31T01:24:59Z,MERGED,True,1236,127,17,https://github.com/wjwwood,Use namespaces,9,[],https://github.com/ros2/rclpy/pull/86,https://github.com/wjwwood,1,https://github.com/ros2/rclpy/pull/86,"Connects to ros2/rcl#137
Here are some examples of what it looks like when you give invalid names now:

invalid node name

% python3 -c ""import rclpy; rclpy.init(); rclpy.create_node('invalid_node?')""
Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/__init__.py"", line 38, in create_node
    validate_node_name(node_name)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_node_name.py"", line 34, in validate_node_name
    raise InvalidNodeNameException(node_name, error_msg, invalid_index)
rclpy.exceptions.InvalidNodeNameException: Invalid node name: node name must not contain characters other than alphanumerics or '_':
  'invalid_node?'
               ^


invalid node namespace

% python3 -c ""
import rclpy
rclpy.init()
rclpy.create_node('node_name', namespace='/invalid_ns?')""
Traceback (most recent call last):
  File ""<string>"", line 4, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/__init__.py"", line 43, in create_node
    validate_namespace(namespace)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_namespace.py"", line 38, in validate_namespace
    raise InvalidNamespaceException(namespace, error_msg, invalid_index)
rclpy.exceptions.InvalidNamespaceException: Invalid namespace: namespace must not contain characters other than alphanumerics, '_', or '/':
  '/invalid_ns?'
              ^


invalid topic name

% python3 -c ""
import rclpy
from std_msgs.msg import String
rclpy.init()
n = rclpy.create_node('node_name')
n.create_publisher(String, 'chatter?')""
Traceback (most recent call last):
  File ""<string>"", line 6, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 77, in create_publisher
    self._validate_topic_or_service_name(topic)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 60, in _validate_topic_or_service_name
    validate_topic_name(topic_or_service_name, is_service=is_service)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_topic_name.py"", line 41, in validate_topic_name
    raise InvalidTopicNameException(name, error_msg, invalid_index)
rclpy.exceptions.InvalidTopicNameException: Invalid topic name: topic name must not contain characters other than alphanumerics, '_', '~', '{', or '}':
  'chatter?'
          ^


invalid service name

% python3 -c ""
import rclpy
from std_srvs.srv import Empty
rclpy.init()
n = rclpy.create_node('node_name')
n.create_client(Empty, 'empty?')""
Traceback (most recent call last):
  File ""<string>"", line 6, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 118, in create_client
    self._validate_topic_or_service_name(srv_name, is_service=True)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 60, in _validate_topic_or_service_name
    validate_topic_name(topic_or_service_name, is_service=is_service)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_topic_name.py"", line 39, in validate_topic_name
    raise InvalidServiceNameException(name, error_msg, invalid_index)
rclpy.exceptions.InvalidServiceNameException: Invalid service name: topic name must not contain characters other than alphanumerics, '_', '~', '{', or '}':
  'empty?'
        ^","Connects to ros2/rcl#137
Here are some examples of what it looks like when you give invalid names now:

invalid node name

% python3 -c ""import rclpy; rclpy.init(); rclpy.create_node('invalid_node?')""
Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/__init__.py"", line 38, in create_node
    validate_node_name(node_name)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_node_name.py"", line 34, in validate_node_name
    raise InvalidNodeNameException(node_name, error_msg, invalid_index)
rclpy.exceptions.InvalidNodeNameException: Invalid node name: node name must not contain characters other than alphanumerics or '_':
  'invalid_node?'
               ^


invalid node namespace

% python3 -c ""
import rclpy
rclpy.init()
rclpy.create_node('node_name', namespace='/invalid_ns?')""
Traceback (most recent call last):
  File ""<string>"", line 4, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/__init__.py"", line 43, in create_node
    validate_namespace(namespace)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_namespace.py"", line 38, in validate_namespace
    raise InvalidNamespaceException(namespace, error_msg, invalid_index)
rclpy.exceptions.InvalidNamespaceException: Invalid namespace: namespace must not contain characters other than alphanumerics, '_', or '/':
  '/invalid_ns?'
              ^


invalid topic name

% python3 -c ""
import rclpy
from std_msgs.msg import String
rclpy.init()
n = rclpy.create_node('node_name')
n.create_publisher(String, 'chatter?')""
Traceback (most recent call last):
  File ""<string>"", line 6, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 77, in create_publisher
    self._validate_topic_or_service_name(topic)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 60, in _validate_topic_or_service_name
    validate_topic_name(topic_or_service_name, is_service=is_service)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_topic_name.py"", line 41, in validate_topic_name
    raise InvalidTopicNameException(name, error_msg, invalid_index)
rclpy.exceptions.InvalidTopicNameException: Invalid topic name: topic name must not contain characters other than alphanumerics, '_', '~', '{', or '}':
  'chatter?'
          ^


invalid service name

% python3 -c ""
import rclpy
from std_srvs.srv import Empty
rclpy.init()
n = rclpy.create_node('node_name')
n.create_client(Empty, 'empty?')""
Traceback (most recent call last):
  File ""<string>"", line 6, in <module>
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 118, in create_client
    self._validate_topic_or_service_name(srv_name, is_service=True)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/node.py"", line 60, in _validate_topic_or_service_name
    validate_topic_name(topic_or_service_name, is_service=is_service)
  File ""/Users/william/ros2_ws/install/lib/python3.6/site-packages/rclpy/validate_topic_name.py"", line 39, in validate_topic_name
    raise InvalidServiceNameException(name, error_msg, invalid_index)
rclpy.exceptions.InvalidServiceNameException: Invalid service name: topic name must not contain characters other than alphanumerics, '_', '~', '{', or '}':
  'empty?'
        ^",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,87,2017-06-08T17:12:13Z,2017-06-24T04:16:21Z,2017-06-24T04:16:30Z,CLOSED,False,6,67,1,https://github.com/mikaelarguedas,Fix destroy segfault,2,[],https://github.com/ros2/rclpy/pull/87,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/87,this reverts #80 and #79 that (by not clearing the allocated memory properly) makes the subscriber crash on message destruction for arrays of nested arrays. Leaving this in progress the time I add a regression test for it,this reverts #80 and #79 that (by not clearing the allocated memory properly) makes the subscriber crash on message destruction for arrays of nested arrays. Leaving this in progress the time I add a regression test for it,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,87,2017-06-08T17:12:13Z,2017-06-24T04:16:21Z,2017-06-24T04:16:30Z,CLOSED,False,6,67,1,https://github.com/mikaelarguedas,Fix destroy segfault,2,[],https://github.com/ros2/rclpy/pull/87,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/87#issuecomment-310812747,this reverts #80 and #79 that (by not clearing the allocated memory properly) makes the subscriber crash on message destruction for arrays of nested arrays. Leaving this in progress the time I add a regression test for it,Fixed in ros2/rosidl#223 ros2/rmw_fastrtps#126 and ros2/system_tests#211,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,88,2017-06-09T22:27:35Z,2017-06-11T15:35:35Z,2017-06-11T17:34:06Z,MERGED,True,7,1,1,https://github.com/dirk-thomas,restore signal handler after wait,1,[],https://github.com/ros2/rclpy/pull/88,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/88,"Otherwise Python code not blocked on wait but anywhere else can't be Ctrl-Ced.

Linux 
Linux-aarch64 
macOS 
Windows","Otherwise Python code not blocked on wait but anywhere else can't be Ctrl-Ced.

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,89,2017-06-09T23:23:58Z,2017-06-10T14:39:32Z,2017-06-11T03:11:47Z,MERGED,True,12,125,2,https://github.com/dirk-thomas,replace custom topic-and-types class with list-of-tuples,1,[],https://github.com/ros2/rclpy/pull/89,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/89,"The custom class isn't necessary. A simple list of tuples represents the data much better. This is also necessary to pass the data structure via xml-rpc (since it only supports builtin types).

Linux 
Linux-aarch64 
macOS 
Windows","The custom class isn't necessary. A simple list of tuples represents the data much better. This is also necessary to pass the data structure via xml-rpc (since it only supports builtin types).

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,90,2017-06-10T17:29:12Z,2017-06-10T17:46:58Z,2017-06-10T17:47:25Z,CLOSED,False,2,2,1,https://github.com/Karsten1987,RCL_RET_SERVICE_NAME_INVALID to RCL_RET_SERVICE_INVALID,1,[],https://github.com/ros2/rclpy/pull/90,https://github.com/Karsten1987,1,https://github.com/ros2/rclpy/pull/90,"the current master branch does not compile on my machine. Not sure if that is the best fix, but it makes it compile.
>C:\dev\ros2\src\ros2\rclpy\rclpy\src\rclpy\_rclpy.c(1098): error C2065: 'RCL_RET_SERVICE_NAME_INVALID': 
undeclared identifier [c:\dev\ros2\build\rclpy\rclpy.vcxproj]","the current master branch does not compile on my machine. Not sure if that is the best fix, but it makes it compile.
>C:\dev\ros2\src\ros2\rclpy\rclpy\src\rclpy\_rclpy.c(1098): error C2065: 'RCL_RET_SERVICE_NAME_INVALID': 
undeclared identifier [c:\dev\ros2\build\rclpy\rclpy.vcxproj]",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,90,2017-06-10T17:29:12Z,2017-06-10T17:46:58Z,2017-06-10T17:47:25Z,CLOSED,False,2,2,1,https://github.com/Karsten1987,RCL_RET_SERVICE_NAME_INVALID to RCL_RET_SERVICE_INVALID,1,[],https://github.com/ros2/rclpy/pull/90,https://github.com/wjwwood,2,https://github.com/ros2/rclpy/pull/90#issuecomment-307579828,"the current master branch does not compile on my machine. Not sure if that is the best fix, but it makes it compile.
>C:\dev\ros2\src\ros2\rclpy\rclpy\src\rclpy\_rclpy.c(1098): error C2065: 'RCL_RET_SERVICE_NAME_INVALID': 
undeclared identifier [c:\dev\ros2\build\rclpy\rclpy.vcxproj]","Do you have the latest version of rcl? You have build rcl too not just pull since it looks like you're on windows.
The nightlies pass, this should not be needed.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,90,2017-06-10T17:29:12Z,2017-06-10T17:46:58Z,2017-06-10T17:47:25Z,CLOSED,False,2,2,1,https://github.com/Karsten1987,RCL_RET_SERVICE_NAME_INVALID to RCL_RET_SERVICE_INVALID,1,[],https://github.com/ros2/rclpy/pull/90,https://github.com/Karsten1987,3,https://github.com/ros2/rclpy/pull/90#issuecomment-307580102,"the current master branch does not compile on my machine. Not sure if that is the best fix, but it makes it compile.
>C:\dev\ros2\src\ros2\rclpy\rclpy\src\rclpy\_rclpy.c(1098): error C2065: 'RCL_RET_SERVICE_NAME_INVALID': 
undeclared identifier [c:\dev\ros2\build\rclpy\rclpy.vcxproj]","Oh, I did vcs pull, but I haven't noticed that I have still been on an old branch of rcl.
Sorry for the noise. Master compiles just fine.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,91,2017-06-13T00:39:16Z,2017-06-13T04:16:23Z,2017-06-13T04:16:26Z,MERGED,True,35,2,2,https://github.com/wjwwood,support new qos avoid_ros_namespace_conventions,2,[],https://github.com/ros2/rclpy/pull/91,https://github.com/wjwwood,1,https://github.com/ros2/rclpy/pull/91,"CI:

Linux:




Linux-aarch64:




macOS:




macOS (with nightly release settings):




Windows:




Windows (with nightly release settings):





Fixes ros2/build_farmer#29","CI:

Linux:




Linux-aarch64:




macOS:




macOS (with nightly release settings):




Windows:




Windows (with nightly release settings):





Fixes ros2/build_farmer#29",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,91,2017-06-13T00:39:16Z,2017-06-13T04:16:23Z,2017-06-13T04:16:26Z,MERGED,True,35,2,2,https://github.com/wjwwood,support new qos avoid_ros_namespace_conventions,2,[],https://github.com/ros2/rclpy/pull/91,https://github.com/wjwwood,2,https://github.com/ros2/rclpy/pull/91#issuecomment-307984017,"CI:

Linux:




Linux-aarch64:




macOS:




macOS (with nightly release settings):




Windows:




Windows (with nightly release settings):





Fixes ros2/build_farmer#29","Bah, the bool setting method I used isn't working, should be fixed in bb8ed20, replacing CI links in the OP.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,91,2017-06-13T00:39:16Z,2017-06-13T04:16:23Z,2017-06-13T04:16:26Z,MERGED,True,35,2,2,https://github.com/wjwwood,support new qos avoid_ros_namespace_conventions,2,[],https://github.com/ros2/rclpy/pull/91,https://github.com/wjwwood,3,https://github.com/ros2/rclpy/pull/91#issuecomment-308002187,"CI:

Linux:




Linux-aarch64:




macOS:




macOS (with nightly release settings):




Windows:




Windows (with nightly release settings):





Fixes ros2/build_farmer#29",Windows' one test failure is unrelated.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,92,2017-06-14T15:09:55Z,2017-06-14T18:39:36Z,2017-06-14T18:39:40Z,MERGED,True,3,2,1,https://github.com/Karsten1987,string array takes allocator,1,[],https://github.com/ros2/rclpy/pull/92,https://github.com/Karsten1987,1,https://github.com/ros2/rclpy/pull/92,connects to ros2/rcutils#6,connects to ros2/rcutils#6,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,93,2017-06-15T10:25:26Z,2017-06-17T01:02:17Z,2017-06-17T01:02:20Z,MERGED,True,233,40,7,https://github.com/wjwwood,Refactor get topic names and types,6,[],https://github.com/ros2/rclpy/pull/93,https://github.com/wjwwood,1,https://github.com/ros2/rclpy/pull/93,Connects to ros2/ros2#361,Connects to ros2/ros2#361,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,94,2017-06-27T18:11:20Z,2017-06-27T19:05:42Z,2017-06-27T19:06:55Z,MERGED,True,34,22,2,https://github.com/dirk-thomas,fix destroy logic and error handling,2,[],https://github.com/ros2/rclpy/pull/94,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/94,"The patch fixes three problems:

The destroy logic was broken. Removing elements from a list while iterating of it results in the wrong behavior (only every second item was destroyed before).
When an exception is being set the function must return NULL in order to pass it correctly from the C extension to Python.
Before using the node handle for the destroy calls in needs to be checked if it is valid. Update: covered by the fixed error handling code already.

This can be reproduced by running these two commands with rmw_connext_cpp:

ros2 run examples_rclpy_minimal_service examples_rclpy_minimal_service
ros2 run examples_rclpy_minimal_client examples_rclpy_minimal_client_async

With the patch the problem of the node being invalid when the client is trying to be destroyed is at least reported correctly.
Updated CI links with only two commits being in this PR:

Linux 
Linux-aarch64 
macOS 
Windows 

Ready for review.","The patch fixes three problems:

The destroy logic was broken. Removing elements from a list while iterating of it results in the wrong behavior (only every second item was destroyed before).
When an exception is being set the function must return NULL in order to pass it correctly from the C extension to Python.
Before using the node handle for the destroy calls in needs to be checked if it is valid. Update: covered by the fixed error handling code already.

This can be reproduced by running these two commands with rmw_connext_cpp:

ros2 run examples_rclpy_minimal_service examples_rclpy_minimal_service
ros2 run examples_rclpy_minimal_client examples_rclpy_minimal_client_async

With the patch the problem of the node being invalid when the client is trying to be destroyed is at least reported correctly.
Updated CI links with only two commits being in this PR:

Linux 
Linux-aarch64 
macOS 
Windows 

Ready for review.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,94,2017-06-27T18:11:20Z,2017-06-27T19:05:42Z,2017-06-27T19:06:55Z,MERGED,True,34,22,2,https://github.com/dirk-thomas,fix destroy logic and error handling,2,[],https://github.com/ros2/rclpy/pull/94,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/94#issuecomment-311455089,"The patch fixes three problems:

The destroy logic was broken. Removing elements from a list while iterating of it results in the wrong behavior (only every second item was destroyed before).
When an exception is being set the function must return NULL in order to pass it correctly from the C extension to Python.
Before using the node handle for the destroy calls in needs to be checked if it is valid. Update: covered by the fixed error handling code already.

This can be reproduced by running these two commands with rmw_connext_cpp:

ros2 run examples_rclpy_minimal_service examples_rclpy_minimal_service
ros2 run examples_rclpy_minimal_client examples_rclpy_minimal_client_async

With the patch the problem of the node being invalid when the client is trying to be destroyed is at least reported correctly.
Updated CI links with only two commits being in this PR:

Linux 
Linux-aarch64 
macOS 
Windows 

Ready for review.",I missed that the new CI builds haven't finished yet. I will check back to make sure that is the case.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,95,2017-06-28T22:47:38Z,2017-10-16T21:40:51Z,2017-10-16T21:40:55Z,CLOSED,False,8,0,1,https://github.com/dirk-thomas,check for exceptions before returning from C extension,1,[],https://github.com/ros2/rclpy/pull/95,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/95,"Some background on Python C extensions: a C function being called from Python can only do either of the two:

return a non-NULL value or
set an error (with PyErr_) or exception.

If both is done the call will trigger a SystemError: <built-in function your-name-here> returned a result with an error set.
Now consider the following case: a user presses Ctrl-C which sets the KeyboardInterrupt exception while a C function is running. If the function tries to return a non-NULL value a SystemError is the consequence. Instead before returning from the C function the code should check if an error is set (using PyErr_Occurred) and if that is the case return NULL (the standard rule applies to avoid leaking memory in that case).
The benefit of the current patch can be reproduced with the following example which has a high chance of hitting Ctrl-C while this C function is running:

Invoke ros2 run image_tools cam2image in one terminal
Invoke ros2 topic echo /image in a second terminal and while it is printing messages hit Ctrl-C

Without the patch you have a high chance of seeing the SystemError. With the patch the program should gracefully exit without a visible exception.
This PR currently only patches the function rclpy_take. The same would need to be done in all C function exposed in Python for each non-NULL return (which is in quite a few places). Before replicating the change for all other cases I would like to have feedback if this is viable or if there is a different way (or we don't care about the way this ""crashes"").","Some background on Python C extensions: a C function being called from Python can only do either of the two:

return a non-NULL value or
set an error (with PyErr_) or exception.

If both is done the call will trigger a SystemError: <built-in function your-name-here> returned a result with an error set.
Now consider the following case: a user presses Ctrl-C which sets the KeyboardInterrupt exception while a C function is running. If the function tries to return a non-NULL value a SystemError is the consequence. Instead before returning from the C function the code should check if an error is set (using PyErr_Occurred) and if that is the case return NULL (the standard rule applies to avoid leaking memory in that case).
The benefit of the current patch can be reproduced with the following example which has a high chance of hitting Ctrl-C while this C function is running:

Invoke ros2 run image_tools cam2image in one terminal
Invoke ros2 topic echo /image in a second terminal and while it is printing messages hit Ctrl-C

Without the patch you have a high chance of seeing the SystemError. With the patch the program should gracefully exit without a visible exception.
This PR currently only patches the function rclpy_take. The same would need to be done in all C function exposed in Python for each non-NULL return (which is in quite a few places). Before replicating the change for all other cases I would like to have feedback if this is viable or if there is a different way (or we don't care about the way this ""crashes"").",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,95,2017-06-28T22:47:38Z,2017-10-16T21:40:51Z,2017-10-16T21:40:55Z,CLOSED,False,8,0,1,https://github.com/dirk-thomas,check for exceptions before returning from C extension,1,[],https://github.com/ros2/rclpy/pull/95,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/95#issuecomment-311816042,"Some background on Python C extensions: a C function being called from Python can only do either of the two:

return a non-NULL value or
set an error (with PyErr_) or exception.

If both is done the call will trigger a SystemError: <built-in function your-name-here> returned a result with an error set.
Now consider the following case: a user presses Ctrl-C which sets the KeyboardInterrupt exception while a C function is running. If the function tries to return a non-NULL value a SystemError is the consequence. Instead before returning from the C function the code should check if an error is set (using PyErr_Occurred) and if that is the case return NULL (the standard rule applies to avoid leaking memory in that case).
The benefit of the current patch can be reproduced with the following example which has a high chance of hitting Ctrl-C while this C function is running:

Invoke ros2 run image_tools cam2image in one terminal
Invoke ros2 topic echo /image in a second terminal and while it is printing messages hit Ctrl-C

Without the patch you have a high chance of seeing the SystemError. With the patch the program should gracefully exit without a visible exception.
This PR currently only patches the function rclpy_take. The same would need to be done in all C function exposed in Python for each non-NULL return (which is in quite a few places). Before replicating the change for all other cases I would like to have feedback if this is viable or if there is a different way (or we don't care about the way this ""crashes"").",This shouldn't be merged for beta 2 since it has too much potential for side effects.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,95,2017-06-28T22:47:38Z,2017-10-16T21:40:51Z,2017-10-16T21:40:55Z,CLOSED,False,8,0,1,https://github.com/dirk-thomas,check for exceptions before returning from C extension,1,[],https://github.com/ros2/rclpy/pull/95,https://github.com/wjwwood,3,https://github.com/ros2/rclpy/pull/95#issuecomment-311818984,"Some background on Python C extensions: a C function being called from Python can only do either of the two:

return a non-NULL value or
set an error (with PyErr_) or exception.

If both is done the call will trigger a SystemError: <built-in function your-name-here> returned a result with an error set.
Now consider the following case: a user presses Ctrl-C which sets the KeyboardInterrupt exception while a C function is running. If the function tries to return a non-NULL value a SystemError is the consequence. Instead before returning from the C function the code should check if an error is set (using PyErr_Occurred) and if that is the case return NULL (the standard rule applies to avoid leaking memory in that case).
The benefit of the current patch can be reproduced with the following example which has a high chance of hitting Ctrl-C while this C function is running:

Invoke ros2 run image_tools cam2image in one terminal
Invoke ros2 topic echo /image in a second terminal and while it is printing messages hit Ctrl-C

Without the patch you have a high chance of seeing the SystemError. With the patch the program should gracefully exit without a visible exception.
This PR currently only patches the function rclpy_take. The same would need to be done in all C function exposed in Python for each non-NULL return (which is in quite a few places). Before replicating the change for all other cases I would like to have feedback if this is viable or if there is a different way (or we don't care about the way this ""crashes"").","Actually, after doing some reading I think we should be ok. Apparently the KeyboardInterrupt can only be set when PyErr_CheckSignals() (https://docs.python.org/3.6/c-api/exceptions.html#c.PyErr_CheckSignals) is explicitly called. The issue is that this function is called within many of the built-in Python C functions.
So my conclusion is that:

there is no race condition as I indicated above because the error is not set in the signal handler directly
we should not need to check if an exception is set at the end of our functions, if that helps then it means we're not checking the return code of all of the Python functions we call (one of which my be calling PyErr_CheckSignals())",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,95,2017-06-28T22:47:38Z,2017-10-16T21:40:51Z,2017-10-16T21:40:55Z,CLOSED,False,8,0,1,https://github.com/dirk-thomas,check for exceptions before returning from C extension,1,[],https://github.com/ros2/rclpy/pull/95,https://github.com/wjwwood,4,https://github.com/ros2/rclpy/pull/95#issuecomment-311819045,"Some background on Python C extensions: a C function being called from Python can only do either of the two:

return a non-NULL value or
set an error (with PyErr_) or exception.

If both is done the call will trigger a SystemError: <built-in function your-name-here> returned a result with an error set.
Now consider the following case: a user presses Ctrl-C which sets the KeyboardInterrupt exception while a C function is running. If the function tries to return a non-NULL value a SystemError is the consequence. Instead before returning from the C function the code should check if an error is set (using PyErr_Occurred) and if that is the case return NULL (the standard rule applies to avoid leaking memory in that case).
The benefit of the current patch can be reproduced with the following example which has a high chance of hitting Ctrl-C while this C function is running:

Invoke ros2 run image_tools cam2image in one terminal
Invoke ros2 topic echo /image in a second terminal and while it is printing messages hit Ctrl-C

Without the patch you have a high chance of seeing the SystemError. With the patch the program should gracefully exit without a visible exception.
This PR currently only patches the function rclpy_take. The same would need to be done in all C function exposed in Python for each non-NULL return (which is in quite a few places). Before replicating the change for all other cases I would like to have feedback if this is viable or if there is a different way (or we don't care about the way this ""crashes"").","Some more references:

https://stackoverflow.com/questions/25874823/pyerr-checksignals-not-picking-up-signal
http://grokbase.com/t/python/python-bugs-list/11cwd618cm/issue13673-sigint-prevents-raising-of-exceptions-unless-pyerr-checksignals-called",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,95,2017-06-28T22:47:38Z,2017-10-16T21:40:51Z,2017-10-16T21:40:55Z,CLOSED,False,8,0,1,https://github.com/dirk-thomas,check for exceptions before returning from C extension,1,[],https://github.com/ros2/rclpy/pull/95,https://github.com/clalancette,5,https://github.com/ros2/rclpy/pull/95#issuecomment-320309763,"Some background on Python C extensions: a C function being called from Python can only do either of the two:

return a non-NULL value or
set an error (with PyErr_) or exception.

If both is done the call will trigger a SystemError: <built-in function your-name-here> returned a result with an error set.
Now consider the following case: a user presses Ctrl-C which sets the KeyboardInterrupt exception while a C function is running. If the function tries to return a non-NULL value a SystemError is the consequence. Instead before returning from the C function the code should check if an error is set (using PyErr_Occurred) and if that is the case return NULL (the standard rule applies to avoid leaking memory in that case).
The benefit of the current patch can be reproduced with the following example which has a high chance of hitting Ctrl-C while this C function is running:

Invoke ros2 run image_tools cam2image in one terminal
Invoke ros2 topic echo /image in a second terminal and while it is printing messages hit Ctrl-C

Without the patch you have a high chance of seeing the SystemError. With the patch the program should gracefully exit without a visible exception.
This PR currently only patches the function rclpy_take. The same would need to be done in all C function exposed in Python for each non-NULL return (which is in quite a few places). Before replicating the change for all other cases I would like to have feedback if this is viable or if there is a different way (or we don't care about the way this ""crashes"").","Given @wjwwood 's research, it seems like we may be able to merge this now.  I've fired off a CI job for it (which doesn't guarantee this is correct, but at least ensures that there are no obvious regressions):

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,95,2017-06-28T22:47:38Z,2017-10-16T21:40:51Z,2017-10-16T21:40:55Z,CLOSED,False,8,0,1,https://github.com/dirk-thomas,check for exceptions before returning from C extension,1,[],https://github.com/ros2/rclpy/pull/95,https://github.com/mikaelarguedas,6,https://github.com/ros2/rclpy/pull/95#issuecomment-320310265,"Some background on Python C extensions: a C function being called from Python can only do either of the two:

return a non-NULL value or
set an error (with PyErr_) or exception.

If both is done the call will trigger a SystemError: <built-in function your-name-here> returned a result with an error set.
Now consider the following case: a user presses Ctrl-C which sets the KeyboardInterrupt exception while a C function is running. If the function tries to return a non-NULL value a SystemError is the consequence. Instead before returning from the C function the code should check if an error is set (using PyErr_Occurred) and if that is the case return NULL (the standard rule applies to avoid leaking memory in that case).
The benefit of the current patch can be reproduced with the following example which has a high chance of hitting Ctrl-C while this C function is running:

Invoke ros2 run image_tools cam2image in one terminal
Invoke ros2 topic echo /image in a second terminal and while it is printing messages hit Ctrl-C

Without the patch you have a high chance of seeing the SystemError. With the patch the program should gracefully exit without a visible exception.
This PR currently only patches the function rclpy_take. The same would need to be done in all C function exposed in Python for each non-NULL return (which is in quite a few places). Before replicating the change for all other cases I would like to have feedback if this is viable or if there is a different way (or we don't care about the way this ""crashes"").","as discussed in the waffle triage meetings of the last two weeks we decided to hold this until we look into the root of the problem rather than fixing the symptom

This PR currently only patches the function rclpy_take. The same would need to be done in all C function exposed in Python for each non-NULL return (which is in quite a few places).

This is still adressing only that function and is still labeled as in progress",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,95,2017-06-28T22:47:38Z,2017-10-16T21:40:51Z,2017-10-16T21:40:55Z,CLOSED,False,8,0,1,https://github.com/dirk-thomas,check for exceptions before returning from C extension,1,[],https://github.com/ros2/rclpy/pull/95,https://github.com/dirk-thomas,7,https://github.com/ros2/rclpy/pull/95#issuecomment-337051920,"Some background on Python C extensions: a C function being called from Python can only do either of the two:

return a non-NULL value or
set an error (with PyErr_) or exception.

If both is done the call will trigger a SystemError: <built-in function your-name-here> returned a result with an error set.
Now consider the following case: a user presses Ctrl-C which sets the KeyboardInterrupt exception while a C function is running. If the function tries to return a non-NULL value a SystemError is the consequence. Instead before returning from the C function the code should check if an error is set (using PyErr_Occurred) and if that is the case return NULL (the standard rule applies to avoid leaking memory in that case).
The benefit of the current patch can be reproduced with the following example which has a high chance of hitting Ctrl-C while this C function is running:

Invoke ros2 run image_tools cam2image in one terminal
Invoke ros2 topic echo /image in a second terminal and while it is printing messages hit Ctrl-C

Without the patch you have a high chance of seeing the SystemError. With the patch the program should gracefully exit without a visible exception.
This PR currently only patches the function rclpy_take. The same would need to be done in all C function exposed in Python for each non-NULL return (which is in quite a few places). Before replicating the change for all other cases I would like to have feedback if this is viable or if there is a different way (or we don't care about the way this ""crashes"").",ros2/rosidl#240 addresses the actual problem. During the convert_to_py call two functions could fail in case a SIGINT was triggered in the meantime. With the patch in rosidl the convert_to_py returns NULL in those cases which is already being handled correctly by rclpy.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,96,2017-06-28T23:28:04Z,2017-06-29T03:56:50Z,2017-06-29T06:18:06Z,MERGED,True,36,0,1,https://github.com/dirk-thomas,check return code of convert functions,1,[],https://github.com/ros2/rclpy/pull/96,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/96,This goes together with ros2/rosidl#226.,This goes together with ros2/rosidl#226.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,98,2017-07-13T18:13:57Z,2017-07-14T00:16:39Z,2017-07-14T00:16:44Z,MERGED,True,18,1,2,https://github.com/allenh1,Raise NotInitializedException if rclpy has not been initialized,1,[],https://github.com/ros2/rclpy/pull/98,https://github.com/allenh1,1,https://github.com/ros2/rclpy/pull/98,connects to #84,connects to #84,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,98,2017-07-13T18:13:57Z,2017-07-14T00:16:39Z,2017-07-14T00:16:44Z,MERGED,True,18,1,2,https://github.com/allenh1,Raise NotInitializedException if rclpy has not been initialized,1,[],https://github.com/ros2/rclpy/pull/98,https://github.com/allenh1,2,https://github.com/ros2/rclpy/pull/98#issuecomment-315164014,connects to #84,Just a quick general question: how are the tests being called here?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,98,2017-07-13T18:13:57Z,2017-07-14T00:16:39Z,2017-07-14T00:16:44Z,MERGED,True,18,1,2,https://github.com/allenh1,Raise NotInitializedException if rclpy has not been initialized,1,[],https://github.com/ros2/rclpy/pull/98,https://github.com/dirk-thomas,3,https://github.com/ros2/rclpy/pull/98#issuecomment-315164341,connects to #84,"Just a quick general question: how are the tests being called here?

With nosetests.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,98,2017-07-13T18:13:57Z,2017-07-14T00:16:39Z,2017-07-14T00:16:44Z,MERGED,True,18,1,2,https://github.com/allenh1,Raise NotInitializedException if rclpy has not been initialized,1,[],https://github.com/ros2/rclpy/pull/98,https://github.com/allenh1,4,https://github.com/ros2/rclpy/pull/98#issuecomment-315164480,connects to #84,I meant to ask where I should put the expected results?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,98,2017-07-13T18:13:57Z,2017-07-14T00:16:39Z,2017-07-14T00:16:44Z,MERGED,True,18,1,2,https://github.com/allenh1,Raise NotInitializedException if rclpy has not been initialized,1,[],https://github.com/ros2/rclpy/pull/98,https://github.com/dirk-thomas,5,https://github.com/ros2/rclpy/pull/98#issuecomment-315164988,connects to #84,"I meant to ask where I should put the expected results?

What mean ""expected results"" here? The tests either pass or fail. In your case you probably expect an exception. If that happens (as expected) the test should pass. If the exception doesn't happen than the test should fail.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,98,2017-07-13T18:13:57Z,2017-07-14T00:16:39Z,2017-07-14T00:16:44Z,MERGED,True,18,1,2,https://github.com/allenh1,Raise NotInitializedException if rclpy has not been initialized,1,[],https://github.com/ros2/rclpy/pull/98,https://github.com/allenh1,6,https://github.com/ros2/rclpy/pull/98#issuecomment-315166008,connects to #84,"Is this the desired behavior?
allenh1@machina:~/ros2_ws$ python3
Python 3.5.2 (default, Nov 17 2016, 17:05:23) 
[GCC 5.4.0 20160609] on linux
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import rclpy
>>> node = rclpy.create_node('foo')
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/home/allenh1/ros2_ws/install/lib/python3.5/site-packages/rclpy/__init__.py"", line 37, in create_node
    raise NotInitializedException('cannot create node')
rclpy.NotInitializedException: cannot create node

allenh1@machina:~/ros2_ws$ python3
Python 3.5.2 (default, Nov 17 2016, 17:05:23) 
[GCC 5.4.0 20160609] on linux
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import rclpy
>>> rclpy.init()
>>> node = rclpy.create_node('foo')
>>> vars(node)
{'clients': [], 'publishers': [], 'subscriptions': [], 'services': [], 'timers': [], '_handle': <capsule object NULL at 0x7f10382057b0>}
>>> quit()",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,98,2017-07-13T18:13:57Z,2017-07-14T00:16:39Z,2017-07-14T00:16:44Z,MERGED,True,18,1,2,https://github.com/allenh1,Raise NotInitializedException if rclpy has not been initialized,1,[],https://github.com/ros2/rclpy/pull/98,https://github.com/dirk-thomas,7,https://github.com/ros2/rclpy/pull/98#issuecomment-315166703,connects to #84,"Is this the desired behavior?

Looks pretty close. The exception message should come from the existing class though: 
  
    
      rclpy/rclpy/rclpy/exceptions.py
    
    
         Line 20
      in
      6b217da
    
  
  
    

        
          
           Exception.__init__(self, 'rclpy.init() has not been called', *args)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,98,2017-07-13T18:13:57Z,2017-07-14T00:16:39Z,2017-07-14T00:16:44Z,MERGED,True,18,1,2,https://github.com/allenh1,Raise NotInitializedException if rclpy has not been initialized,1,[],https://github.com/ros2/rclpy/pull/98,https://github.com/allenh1,8,https://github.com/ros2/rclpy/pull/98#issuecomment-315169005,connects to #84,"Looks pretty close. The exception message should come from the existing class though: 
  
    
      rclpy/rclpy/rclpy/exceptions.py
    
    
         Line 20
      in
      6b217da
    
  
  
    

        
          
           Exception.__init__(self, 'rclpy.init() has not been called', *args) 
        
    
  



Good catch, forgot to remove the redefined class.
Are there any other functions that should raise this exception?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,98,2017-07-13T18:13:57Z,2017-07-14T00:16:39Z,2017-07-14T00:16:44Z,MERGED,True,18,1,2,https://github.com/allenh1,Raise NotInitializedException if rclpy has not been initialized,1,[],https://github.com/ros2/rclpy/pull/98,https://github.com/mikaelarguedas,9,https://github.com/ros2/rclpy/pull/98#issuecomment-315172343,connects to #84,"does this function needs to exist in the c land ? I think that a pure python approach relying on rclpy.ok() should be enough isnt it ? (I think that's the same remark as #98 (comment))
Could this test be simply added to test_init_shutdown, or do we need a new file + class for this one test ?
It would be cleaner to use a try, except, else structure rather than a self.assertEqual(0, 1) in the try block",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,98,2017-07-13T18:13:57Z,2017-07-14T00:16:39Z,2017-07-14T00:16:44Z,MERGED,True,18,1,2,https://github.com/allenh1,Raise NotInitializedException if rclpy has not been initialized,1,[],https://github.com/ros2/rclpy/pull/98,https://github.com/allenh1,10,https://github.com/ros2/rclpy/pull/98#issuecomment-315174312,connects to #84,"@mikaelarguedas @dirk-thomas Yes, ok() does the trick. Replaced the C function.

Could this test be simply added to test_init_shutdown, or do we need a new file + class for this one test?

@mikaelarguedas I'm not sure yet. I'll give that a try. I'd definitely prefer to use an existing class.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,98,2017-07-13T18:13:57Z,2017-07-14T00:16:39Z,2017-07-14T00:16:44Z,MERGED,True,18,1,2,https://github.com/allenh1,Raise NotInitializedException if rclpy has not been initialized,1,[],https://github.com/ros2/rclpy/pull/98,https://github.com/allenh1,11,https://github.com/ros2/rclpy/pull/98#issuecomment-315221221,connects to #84,"Ok, addressed final remarks by @dirk-thomas.
CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,99,2017-07-20T18:25:58Z,2017-07-20T18:41:06Z,2017-07-20T18:41:09Z,MERGED,True,3,0,1,https://github.com/dirk-thomas,cleanup node correctly in test,1,[],https://github.com/ros2/rclpy/pull/99,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/99,"After messing with the internal node handle and testing that the destroy function will raise the expected exception the test needs to restore the original node handle and actually destroy the node correctly. Otherwise the Python GC will try to delete the node (eventually) later and run into the same exception the test checked for.
This will get rid of the exception which is being raised even though the actual test passes (happening in existing CI jobs e.g. http://ci.ros2.org/view/nightly/job/nightly_linux_debug/524/consoleFull#console-section-264):
test 1
    Start 1: rclpytests

1: Test command: /home/rosbuild/ci_scripts/venv/bin/python3 ""-u"" ""/home/rosbuild/ci_scripts/ws/install/ament_cmake_test/share/ament_cmake_test/cmake/run_test.py"" ""/home/rosbuild/ci_scripts/ws/build/rclpy/test_results/rclpy/rclpytests.xunit.xml"" ""--output-file"" ""/home/rosbuild/ci_scripts/ws/build/rclpy/ament_cmake_nose/rclpytests.txt"" ""--append-env"" ""AMENT_PREFIX_PATH=/home/rosbuild/ci_scripts/ws/build/rclpy/ament_cmake_index"" ""--command"" ""/home/rosbuild/ci_scripts/venv/bin/python3"" ""-u"" ""/usr/bin/nosetests3"" ""/home/rosbuild/ci_scripts/ws/src/ros2/rclpy/rclpy/test"" ""--nocapture"" ""--with-xunit"" ""--xunit-file=/home/rosbuild/ci_scripts/ws/build/rclpy/test_results/rclpy/rclpytests.xunit.xml"" ""--xunit-testsuite-name=rclpy.nosetests""
1: Test timeout computed to be: 60
1: -- run_test.py: extra environment variables to append:
1:  - AMENT_PREFIX_PATH=/home/rosbuild/ci_scripts/ws/build/rclpy/ament_cmake_index
1: -- run_test.py: invoking following command in '/home/rosbuild/ci_scripts/ws/build/rclpy':
1:  - /home/rosbuild/ci_scripts/venv/bin/python3 -u /usr/bin/nosetests3 /home/rosbuild/ci_scripts/ws/src/ros2/rclpy/rclpy/test --nocapture --with-xunit --xunit-file=/home/rosbuild/ci_scripts/ws/build/rclpy/test_results/rclpy/rclpytests.xunit.xml --xunit-testsuite-name=rclpy.nosetests
1: .........Exception ignored in: <bound method Node.__del__ of <rclpy.node.Node object at 0x7f3774e64da0>>
1: Traceback (most recent call last):
1:   File ""/home/rosbuild/ci_scripts/ws/src/ros2/rclpy/rclpy/rclpy/node.py"", line 255, in __del__
1:     self.destroy_node()
1:   File ""/home/rosbuild/ci_scripts/ws/src/ros2/rclpy/rclpy/rclpy/node.py"", line 208, in destroy_node
1:     raise ValueError('The node handle must be a PyCapsule')
1: ValueError: The node handle must be a PyCapsule
1: ........................................
1: ----------------------------------------------------------------------
1: Ran 49 tests in 3.398s
1: 
1: OK
1: -- run_test.py: return code 0
1: -- run_test.py: verify result file '/home/rosbuild/ci_scripts/ws/build/rclpy/test_results/rclpy/rclpytests.xunit.xml'
1/8 Test #1: rclpytests .......................   Passed    4.14 sec

With this patch the exception is gone (with the test still passing as it was before): http://ci.ros2.org/job/ci_linux/2906/consoleFull#console-section-115","After messing with the internal node handle and testing that the destroy function will raise the expected exception the test needs to restore the original node handle and actually destroy the node correctly. Otherwise the Python GC will try to delete the node (eventually) later and run into the same exception the test checked for.
This will get rid of the exception which is being raised even though the actual test passes (happening in existing CI jobs e.g. http://ci.ros2.org/view/nightly/job/nightly_linux_debug/524/consoleFull#console-section-264):
test 1
    Start 1: rclpytests

1: Test command: /home/rosbuild/ci_scripts/venv/bin/python3 ""-u"" ""/home/rosbuild/ci_scripts/ws/install/ament_cmake_test/share/ament_cmake_test/cmake/run_test.py"" ""/home/rosbuild/ci_scripts/ws/build/rclpy/test_results/rclpy/rclpytests.xunit.xml"" ""--output-file"" ""/home/rosbuild/ci_scripts/ws/build/rclpy/ament_cmake_nose/rclpytests.txt"" ""--append-env"" ""AMENT_PREFIX_PATH=/home/rosbuild/ci_scripts/ws/build/rclpy/ament_cmake_index"" ""--command"" ""/home/rosbuild/ci_scripts/venv/bin/python3"" ""-u"" ""/usr/bin/nosetests3"" ""/home/rosbuild/ci_scripts/ws/src/ros2/rclpy/rclpy/test"" ""--nocapture"" ""--with-xunit"" ""--xunit-file=/home/rosbuild/ci_scripts/ws/build/rclpy/test_results/rclpy/rclpytests.xunit.xml"" ""--xunit-testsuite-name=rclpy.nosetests""
1: Test timeout computed to be: 60
1: -- run_test.py: extra environment variables to append:
1:  - AMENT_PREFIX_PATH=/home/rosbuild/ci_scripts/ws/build/rclpy/ament_cmake_index
1: -- run_test.py: invoking following command in '/home/rosbuild/ci_scripts/ws/build/rclpy':
1:  - /home/rosbuild/ci_scripts/venv/bin/python3 -u /usr/bin/nosetests3 /home/rosbuild/ci_scripts/ws/src/ros2/rclpy/rclpy/test --nocapture --with-xunit --xunit-file=/home/rosbuild/ci_scripts/ws/build/rclpy/test_results/rclpy/rclpytests.xunit.xml --xunit-testsuite-name=rclpy.nosetests
1: .........Exception ignored in: <bound method Node.__del__ of <rclpy.node.Node object at 0x7f3774e64da0>>
1: Traceback (most recent call last):
1:   File ""/home/rosbuild/ci_scripts/ws/src/ros2/rclpy/rclpy/rclpy/node.py"", line 255, in __del__
1:     self.destroy_node()
1:   File ""/home/rosbuild/ci_scripts/ws/src/ros2/rclpy/rclpy/rclpy/node.py"", line 208, in destroy_node
1:     raise ValueError('The node handle must be a PyCapsule')
1: ValueError: The node handle must be a PyCapsule
1: ........................................
1: ----------------------------------------------------------------------
1: Ran 49 tests in 3.398s
1: 
1: OK
1: -- run_test.py: return code 0
1: -- run_test.py: verify result file '/home/rosbuild/ci_scripts/ws/build/rclpy/test_results/rclpy/rclpytests.xunit.xml'
1/8 Test #1: rclpytests .......................   Passed    4.14 sec

With this patch the exception is gone (with the test still passing as it was before): http://ci.ros2.org/job/ci_linux/2906/consoleFull#console-section-115",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,100,2017-07-20T20:58:26Z,2017-07-20T21:02:09Z,2017-07-20T21:02:13Z,MERGED,True,1,0,1,https://github.com/dirk-thomas,increase timeout for python tests,1,[],https://github.com/ros2/rclpy/pull/100,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/100,"connects to ros2/rmw_connext#236
Running these tests with Connext takes longer than 60s (http://ci.ros2.org/job/ci_linux/2907/). Therefore increasing the timeout (http://ci.ros2.org/job/ci_linux/2908/).","connects to ros2/rmw_connext#236
Running these tests with Connext takes longer than 60s (http://ci.ros2.org/job/ci_linux/2907/). Therefore increasing the timeout (http://ci.ros2.org/job/ci_linux/2908/).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,101,2017-08-03T21:14:44Z,2017-08-05T00:36:27Z,2017-08-05T00:36:31Z,MERGED,True,1,1,1,https://github.com/mikaelarguedas,convert bool to int to fix failure on windshield,1,[],https://github.com/ros2/rclpy/pull/101,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/101,"Not sure exactly why this fails on some machines and pass on others. I found that patch when investigating the numerous python test failures on Windows Debug on windshield.
Looks like ""p"" provides a bool but it's actually an int.

Linux 
Linux-aarch64 
macOS 
Windows  (unrelated test failures)

Job on windshield:
Before patch:
 (all python tests fail)
After patch:
 (only c/c++ errors)","Not sure exactly why this fails on some machines and pass on others. I found that patch when investigating the numerous python test failures on Windows Debug on windshield.
Looks like ""p"" provides a bool but it's actually an int.

Linux 
Linux-aarch64 
macOS 
Windows  (unrelated test failures)

Job on windshield:
Before patch:
 (all python tests fail)
After patch:
 (only c/c++ errors)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,102,2017-08-19T01:33:08Z,2017-09-08T00:12:39Z,2017-09-08T00:12:43Z,MERGED,True,776,21,5,https://github.com/dhood,Support for logging via rcutils,65,[],https://github.com/ros2/rclpy/pull/102,https://github.com/dhood,1,https://github.com/ros2/rclpy/pull/102,"connects to #103
Could I get some feedback on the direction this is going in? I add logging as an additional module of the rclpy package but it might belong in its own package or in the rclpy module itself.","connects to #103
Could I get some feedback on the direction this is going in? I add logging as an additional module of the rclpy package but it might belong in its own package or in the rclpy module itself.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,102,2017-08-19T01:33:08Z,2017-09-08T00:12:39Z,2017-09-08T00:12:43Z,MERGED,True,776,21,5,https://github.com/dhood,Support for logging via rcutils,65,[],https://github.com/ros2/rclpy/pull/102,https://github.com/wjwwood,2,https://github.com/ros2/rclpy/pull/102#issuecomment-323492623,"connects to #103
Could I get some feedback on the direction this is going in? I add logging as an additional module of the rclpy package but it might belong in its own package or in the rclpy module itself.",Looks reasonable to me so far. It could either be its own module or part of the existing one. I don't think it needs to be in a separate package. Is there any downside to initializing it automatically?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,102,2017-08-19T01:33:08Z,2017-09-08T00:12:39Z,2017-09-08T00:12:43Z,MERGED,True,776,21,5,https://github.com/dhood,Support for logging via rcutils,65,[],https://github.com/ros2/rclpy/pull/102,https://github.com/dhood,3,https://github.com/ros2/rclpy/pull/102#issuecomment-327264025,"connects to #103
Could I get some feedback on the direction this is going in? I add logging as an additional module of the rclpy package but it might belong in its own package or in the rclpy module itself.","Putting this into review.
Summary:
Log calls can be on a specific user-created logger, or the general rclpy.logging.log() calls go to the root rclpy logger.
At some point the C extension was wrapping calls to each supported logging macro from rcutils to avoid reimplementing each logging ""feature"" (e.g. throttle, skip_first). However, this would lead to all rclpy logging calls sharing the same 'context' (e.g. last throttle time), so the C extension now just wraps the underlying rcutils_log function call and rclpy doesn't reuse any of the implementation of logging ""features"" from rcutils except 'named'.
Each log call has a context associated with it that is initialised on the first call. Relevant logging features (referred to as ""filters"" in rclpy to match python's logging module) for the call are detected from the combination of keyword arguments in the log call, and each filter has an opportunity to add their required state variables to the context. On each log call the filters check the context to see if logging should be skipped or not.
To match behaviour in the C implementation, no changes are permitted to any logging options on-the-fly for a particular log call. There's some overhead involved in performing this check.
Regarding initialisation, each log call uses RCUTILS_LOGGING_AUTOINIT, and as of ros2/rcutils#52 there's no need to manually initialise before setting the severity. The initialisation doesn't happen at module import time anymore because @dirk-thomas pointed out that someone might be interested in importing the module, customising things, then calling initialise themselves.
The usage is captured in the unit tests. Note that I added a return_log_condition option solely for the purpose of simplifying testing. It causes the log call to return whether or not the message got logged, or if one of the filters filtered it out. That might not be best practice, it was just simpler than checking everything with launch_testing: I'm open to other alternatives.
Todos:

Currently all loggers are using the global severity threshold from rcutils, but I think that should be changed to an attribute of the logger. At the moment it'd be independent of the rcutils logging library.
All of the convenience functions take the same set of filter options but none of them have been documented which inhibits autocompletion.
'function' and/or 'expression' filter support
Allow log calls to take a format string + args (currently only pre-formatted strings are supported)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,102,2017-08-19T01:33:08Z,2017-09-08T00:12:39Z,2017-09-08T00:12:43Z,MERGED,True,776,21,5,https://github.com/dhood,Support for logging via rcutils,65,[],https://github.com/ros2/rclpy/pull/102,https://github.com/wjwwood,4,https://github.com/ros2/rclpy/pull/102#issuecomment-327312787,"connects to #103
Could I get some feedback on the direction this is going in? I add logging as an additional module of the rclpy package but it might belong in its own package or in the rclpy module itself.","Currently all loggers are using the global severity threshold from rcutils, but I think that should be changed to an attribute of the logger. At the moment it'd be independent of the rcutils logging library.

That's a feature that I have pointed out before should be supported by the common logging API (so in rcutils. I believe it wasn't implemented yet because you need some sort of map like structure to correlate settings to a given logger name and we didn't have that in C. I proposed the implementation could use C++ and the std::map structure for the storage and lookup of the settings by logger name, but I think @dirk-thomas wanted to use C and also did not want to implement the data structure. So we left it hanging waiting on a decision about which C library to pull it that would give us that data structure.
You could implement it in python separately, but I think that's wasted effort if we know it needs to work at the rcutils level as well in the future.

Allow log calls to take a format string + args (currently only pre-formatted strings are supported)

I think that's fine for Python since all of its string formatting options happen in place.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,102,2017-08-19T01:33:08Z,2017-09-08T00:12:39Z,2017-09-08T00:12:43Z,MERGED,True,776,21,5,https://github.com/dhood,Support for logging via rcutils,65,[],https://github.com/ros2/rclpy/pull/102,https://github.com/dhood,5,https://github.com/ros2/rclpy/pull/102#issuecomment-327312993,"connects to #103
Could I get some feedback on the direction this is going in? I add logging as an additional module of the rclpy package but it might belong in its own package or in the rclpy module itself.",note to reviewers: something in the logic for determining the caller's filename etc isn't working correctly on windows and I am looking into it,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,102,2017-08-19T01:33:08Z,2017-09-08T00:12:39Z,2017-09-08T00:12:43Z,MERGED,True,776,21,5,https://github.com/dhood,Support for logging via rcutils,65,[],https://github.com/ros2/rclpy/pull/102,https://github.com/dirk-thomas,6,https://github.com/ros2/rclpy/pull/102#issuecomment-327313551,"connects to #103
Could I get some feedback on the direction this is going in? I add logging as an additional module of the rclpy package but it might belong in its own package or in the rclpy module itself.",I am not sure if the return_log_condition option is necessary. It would be fine if the log function simply always returns a boolean indicating of the C log function was called (not sure if that semantic has much value though). The user can just commonly ignore the return value.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,102,2017-08-19T01:33:08Z,2017-09-08T00:12:39Z,2017-09-08T00:12:43Z,MERGED,True,776,21,5,https://github.com/dhood,Support for logging via rcutils,65,[],https://github.com/ros2/rclpy/pull/102,https://github.com/dhood,7,https://github.com/ros2/rclpy/pull/102#issuecomment-327313996,"connects to #103
Could I get some feedback on the direction this is going in? I add logging as an additional module of the rclpy package but it might belong in its own package or in the rclpy module itself.","Allow log calls to take a format string + args (currently only pre-formatted strings are supported)
I think that's fine for Python since all of its string formatting options happen in place.

@wjwwood Do you mean that we don't want to add support for log(format_string, *args, **kwargs) like in ROS 1 and python's logging module? (in my mind it's a good thing to add for compatibility, but is not immediately necessary)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,102,2017-08-19T01:33:08Z,2017-09-08T00:12:39Z,2017-09-08T00:12:43Z,MERGED,True,776,21,5,https://github.com/dhood,Support for logging via rcutils,65,[],https://github.com/ros2/rclpy/pull/102,https://github.com/dhood,8,https://github.com/ros2/rclpy/pull/102#issuecomment-327314801,"connects to #103
Could I get some feedback on the direction this is going in? I add logging as an additional module of the rclpy package but it might belong in its own package or in the rclpy module itself.","It would be fine of the log function simply always returns a boolean indicating of the C log function was called. The user can just commonly ignore the return value.

@dirk-thomas I forgot to mention that the reason why I added it was because if it always returns the value, then logging in an interactive environment shows the return value which seemed weird, e.g.:
In [3]: import rclpy.logging

In [4]: rclpy.logging.log('asdf', 1, once=True, throttle_duration_sec=1)
[INFO] []: asdf (<module>() at /home/dhood/src/ros2ci/<ipython-input-4-958facd46620>:1)
Out[4]: True

but now that I think about it, users won't use logging in an interactive environment very often and so this shouldn't influence the design for the standard usage.
I will update it to always return the value, thanks",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,102,2017-08-19T01:33:08Z,2017-09-08T00:12:39Z,2017-09-08T00:12:43Z,MERGED,True,776,21,5,https://github.com/dhood,Support for logging via rcutils,65,[],https://github.com/ros2/rclpy/pull/102,https://github.com/dhood,9,https://github.com/ros2/rclpy/pull/102#issuecomment-327317146,"connects to #103
Could I get some feedback on the direction this is going in? I add logging as an additional module of the rclpy package but it might belong in its own package or in the rclpy module itself.","That's a feature that I have pointed out before should be supported by the common logging API (so in rcutils. I believe it wasn't implemented yet because you need some sort of map like structure to correlate settings to a given logger name and we didn't have that in C. I proposed the implementation could use C++ and the std::map structure for the storage and lookup of the settings by logger name, but I think @dirk-thomas wanted to use C and also did not want to implement the data structure. So we left it hanging waiting on a decision about which C library to pull it that would give us that data structure.
You could implement it in python separately, but I think that's wasted effort if we know it needs to work at the rcutils level as well in the future.

@wjwwood Yeah, I was thinking to add logger thresholds in rclpy independent of rcutils just as a temporary measure so that people could leverage it in the interim, but it's not all that useful without an interface for configuring the logger severities. So I'm in favour of leaving the rclpy logger severity thresholds referencing the rcutils global severity threshold for now, and we can update rclpy at the same time we add configuration for loggers in general.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,102,2017-08-19T01:33:08Z,2017-09-08T00:12:39Z,2017-09-08T00:12:43Z,MERGED,True,776,21,5,https://github.com/dhood,Support for logging via rcutils,65,[],https://github.com/ros2/rclpy/pull/102,https://github.com/dhood,10,https://github.com/ros2/rclpy/pull/102#issuecomment-327659858,"connects to #103
Could I get some feedback on the direction this is going in? I add logging as an additional module of the rclpy package but it might belong in its own package or in the rclpy module itself.","To fix _find_caller on windows, I had to introduce pathlib.Path().resolve() wrappers to each of the filenames returned by inspect.getabsfile(). This is because inspect.getabsfile() appears to return paths  as lowercase on windows (only). Using pathlib.Path().resolve() corrects the case somehow (not sure how it would deal with ambiguity?).
Another issue on Windows was that, surprisingly to me, the __file__ attribute of the module had a mix of forward and backwards slashes.. So I applied the same approach to the internal filenames.
Most of this was done in 6c6917f; if there's a cleaner way that avoids lower casing everything I'm interested.
Example usage on windows is:
[INFO] []: message (test_log_arguments() at C:\J\workspace\ci_windows\ws\src\ros2\rclpy\rclpy\test\test_logging.py:128)

and on linux:
[INFO] []: message (test_log_arguments() at /home/dhood/ros2_ws/src/ros2/rclpy/rclpy/test/test_logging.py:128)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,102,2017-08-19T01:33:08Z,2017-09-08T00:12:39Z,2017-09-08T00:12:43Z,MERGED,True,776,21,5,https://github.com/dhood,Support for logging via rcutils,65,[],https://github.com/ros2/rclpy/pull/102,https://github.com/dhood,11,https://github.com/ros2/rclpy/pull/102#issuecomment-327660374,"connects to #103
Could I get some feedback on the direction this is going in? I add logging as an additional module of the rclpy package but it might belong in its own package or in the rclpy module itself.",there are still a few outstanding comments that I will respond to tomorrow,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,102,2017-08-19T01:33:08Z,2017-09-08T00:12:39Z,2017-09-08T00:12:43Z,MERGED,True,776,21,5,https://github.com/dhood,Support for logging via rcutils,65,[],https://github.com/ros2/rclpy/pull/102,https://github.com/dhood,12,https://github.com/ros2/rclpy/pull/102#issuecomment-327943200,"connects to #103
Could I get some feedback on the direction this is going in? I add logging as an additional module of the rclpy package but it might belong in its own package or in the rclpy module itself.","Indeed using os.path.abspath to get the absolute path instead of inspect.getabsfile prevents the case change, thanks @dirk-thomas. I switched to that in b028243 and 06367b0
I noted in the code comments that the abspath on the internal filenames is needed because otherwise __file__ can include a mix of slash directions on Windows e.g.  (output as debug print from this job):
Internal callers: ['C:/J/workspace/ci_windows/ws/src/ros2/rclpy/rclpy\\rclpy\\impl\\rcutils_logger.py', 'C:/J/workspace/ci_windows/ws/src/ros2/rclpy/rclpy\\rclpy\\logging.py']

Update on the aforementioned todos:

Currently all loggers are using the global severity threshold from rcutils: this will stay until we have a way to set thresholds with more granularity in rcutils.
All of the convenience functions take the same set of filter options but none of them have been documented which inhibits autocompletion: I hard-coded documentation for the main log method and referenced it from the other callers in dea180d. We can avoid the hard-coding of filter options at a later date.
'function' and/or 'expression' filter support: post-PR enhancement.
Allow log calls to take a format string + args (currently only pre-formatted strings are supported): post-PR enhancement for ROS 1 compatibility.
Use rcutils instead of python time: post-PR enhancement.

With that, I'll put this back in review (I think I've addressed the comments to date, LMK if I missed something)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,102,2017-08-19T01:33:08Z,2017-09-08T00:12:39Z,2017-09-08T00:12:43Z,MERGED,True,776,21,5,https://github.com/dhood,Support for logging via rcutils,65,[],https://github.com/ros2/rclpy/pull/102,https://github.com/dhood,13,https://github.com/ros2/rclpy/pull/102#issuecomment-327962590,"connects to #103
Could I get some feedback on the direction this is going in? I add logging as an additional module of the rclpy package but it might belong in its own package or in the rclpy module itself.","🚢 🚢 🎉

Linux 
Linux-aarch64 
macOS 
Windows",True,{'HOORAY': ['https://github.com/mikaelarguedas']}
ros2/rclpy,https://github.com/ros2/rclpy,104,2017-08-24T21:12:45Z,2017-09-11T04:13:35Z,2017-09-15T17:33:55Z,MERGED,True,886,123,12,https://github.com/sloretz,Executors and Callback Groups,16,[],https://github.com/ros2/rclpy/pull/104,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/104,"This adds Executors and CallbackGroups to rclpy. This is part of feature parity with rclcpp.
Executors and CallbackGroups are added in the fourth commit on this branch. The first 3 commits are prerequisites:

Release the GIL so other python threads can run during a call to rcl_wait()
Add functions to rclpy for guard conditions
Change Node.__init__ arguments so it can be created by inheriting from it

See examples in ros2/examples#182 and ros2/demos#169

Linux 
Linux-aarch64 
macOS 
Windows","This adds Executors and CallbackGroups to rclpy. This is part of feature parity with rclcpp.
Executors and CallbackGroups are added in the fourth commit on this branch. The first 3 commits are prerequisites:

Release the GIL so other python threads can run during a call to rcl_wait()
Add functions to rclpy for guard conditions
Change Node.__init__ arguments so it can be created by inheriting from it

See examples in ros2/examples#182 and ros2/demos#169

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,104,2017-08-24T21:12:45Z,2017-09-11T04:13:35Z,2017-09-15T17:33:55Z,MERGED,True,886,123,12,https://github.com/sloretz,Executors and Callback Groups,16,[],https://github.com/ros2/rclpy/pull/104,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/104#issuecomment-328410908,"This adds Executors and CallbackGroups to rclpy. This is part of feature parity with rclcpp.
Executors and CallbackGroups are added in the fourth commit on this branch. The first 3 commits are prerequisites:

Release the GIL so other python threads can run during a call to rcl_wait()
Add functions to rclpy for guard conditions
Change Node.__init__ arguments so it can be created by inheriting from it

See examples in ros2/examples#182 and ros2/demos#169

Linux 
Linux-aarch64 
macOS 
Windows",PR squashed/merged. Will address issues pointed out by @dirk-thomas in a PR to be merged after r2b3.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,104,2017-08-24T21:12:45Z,2017-09-11T04:13:35Z,2017-09-15T17:33:55Z,MERGED,True,886,123,12,https://github.com/sloretz,Executors and Callback Groups,16,[],https://github.com/ros2/rclpy/pull/104,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/104#issuecomment-329848216,"This adds Executors and CallbackGroups to rclpy. This is part of feature parity with rclcpp.
Executors and CallbackGroups are added in the fourth commit on this branch. The first 3 commits are prerequisites:

Release the GIL so other python threads can run during a call to rcl_wait()
Add functions to rclpy for guard conditions
Change Node.__init__ arguments so it can be created by inheriting from it

See examples in ros2/examples#182 and ros2/demos#169

Linux 
Linux-aarch64 
macOS 
Windows","@dirk-thomas I can't reply to your comment about checking for Py_None, but It's fixed here f6ff01e",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,105,2017-08-24T21:34:17Z,2017-08-25T00:10:09Z,2017-08-25T00:10:13Z,MERGED,True,2,3,2,https://github.com/sloretz,Remove duplicate call to rclpy_create_timer(),1,[],https://github.com/ros2/rclpy/pull/105,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/105,This removes an extra call to rclpy_create_timer()  and two unused arguments in WallTimer.__init__(). A timer handle was created inside of Node.create_timer() and given to WallTimer.__init__() which ignored the handle and created its own.,This removes an extra call to rclpy_create_timer()  and two unused arguments in WallTimer.__init__(). A timer handle was created inside of Node.create_timer() and given to WallTimer.__init__() which ignored the handle and created its own.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,105,2017-08-24T21:34:17Z,2017-08-25T00:10:09Z,2017-08-25T00:10:13Z,MERGED,True,2,3,2,https://github.com/sloretz,Remove duplicate call to rclpy_create_timer(),1,[],https://github.com/ros2/rclpy/pull/105,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/105#issuecomment-324777757,This removes an extra call to rclpy_create_timer()  and two unused arguments in WallTimer.__init__(). A timer handle was created inside of Node.create_timer() and given to WallTimer.__init__() which ignored the handle and created its own.,"Looks good to me, we discussed it offline a few day ago. I had it as part of a bigger timer cleanup PR connected to ros2/rcl#160 but we can merge this now and I'll remove it from the other one",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,106,2017-08-25T23:26:23Z,2017-08-28T16:14:10Z,2017-08-28T16:14:14Z,MERGED,True,2,2,2,https://github.com/mikaelarguedas,implicitly inherit from object,1,[],https://github.com/ros2/rclpy/pull/106,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/106,"In python 3 classes implicitely inherit from object, so no need to express inheritence except if the class inherits from something else.
Addresses #104 (comment)","In python 3 classes implicitely inherit from object, so no need to express inheritence except if the class inherits from something else.
Addresses #104 (comment)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,107,2017-08-30T00:10:06Z,2017-08-30T21:57:47Z,2017-08-30T21:57:51Z,MERGED,True,13,11,8,https://github.com/dirk-thomas,update style to satisfy new flake8 plugins,1,[],https://github.com/ros2/rclpy/pull/107,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/107,Connect to ros2/ci#98.,Connect to ros2/ci#98.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,108,2017-08-31T23:09:10Z,2017-09-01T01:44:05Z,2017-09-01T01:44:09Z,CLOSED,False,5,3,1,https://github.com/mikaelarguedas,Don't add canceled timers to waitset,2,[],https://github.com/ros2/rclpy/pull/108,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/108,"follow up of ros2/rcl#160 and ros2/rcl#163
connects to ros2/rcl#163","follow up of ros2/rcl#160 and ros2/rcl#163
connects to ros2/rcl#163",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,108,2017-08-31T23:09:10Z,2017-09-01T01:44:05Z,2017-09-01T01:44:09Z,CLOSED,False,5,3,1,https://github.com/mikaelarguedas,Don't add canceled timers to waitset,2,[],https://github.com/ros2/rclpy/pull/108,https://github.com/wjwwood,2,https://github.com/ros2/rclpy/pull/108#issuecomment-326457720,"follow up of ros2/rcl#160 and ros2/rcl#163
connects to ros2/rcl#163","@mikaelarguedas I was just looking into ros2/rclcpp#319 and I think that it might be the same problem but in C++.
Perhaps we should check the given timers in rcl_wait and ignore the canceled ones? I still don't think it is ""correct"" to pass canceled timers to wait, but at least this will prevent similar code in rclpy and rclcpp, plus the state of the timer's cancel is stored in rcl as well (rather than in the c++/py code).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,108,2017-08-31T23:09:10Z,2017-09-01T01:44:05Z,2017-09-01T01:44:09Z,CLOSED,False,5,3,1,https://github.com/mikaelarguedas,Don't add canceled timers to waitset,2,[],https://github.com/ros2/rclpy/pull/108,https://github.com/wjwwood,3,https://github.com/ros2/rclpy/pull/108#issuecomment-326458000,"follow up of ros2/rcl#160 and ros2/rcl#163
connects to ros2/rcl#163","Oh wait, we aren't considering passing canceled timers anyways it seems...
https://github.com/ros2/rcl/blob/master/rcl/src/rcl/wait.c#L545-L552
Maybe there is something broken in that logic. I'll look into it.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,108,2017-08-31T23:09:10Z,2017-09-01T01:44:05Z,2017-09-01T01:44:09Z,CLOSED,False,5,3,1,https://github.com/mikaelarguedas,Don't add canceled timers to waitset,2,[],https://github.com/ros2/rclpy/pull/108,https://github.com/wjwwood,4,https://github.com/ros2/rclpy/pull/108#issuecomment-326465211,"follow up of ros2/rcl#160 and ros2/rcl#163
connects to ros2/rcl#163",Closing because it is not needed after ros2/rcl#163.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,109,2017-09-05T23:39:44Z,2017-09-06T15:36:20Z,2017-09-06T18:49:27Z,MERGED,True,43,0,2,https://github.com/dirk-thomas,add function to destroy waitset and call it in spin_once,1,['in review'],https://github.com/ros2/rclpy/pull/109,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/109,"Addresses the memory leak described in #74. The script still uses a large amount of memory though.
This PR only fixes the leak of the waitset. A similar patch is required for every entity allocated with PyMem_Malloc (node, publisher, subscriptions, service, client, timer, guard condition, header (twice), qos_profile).","Addresses the memory leak described in #74. The script still uses a large amount of memory though.
This PR only fixes the leak of the waitset. A similar patch is required for every entity allocated with PyMem_Malloc (node, publisher, subscriptions, service, client, timer, guard condition, header (twice), qos_profile).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,109,2017-09-05T23:39:44Z,2017-09-06T15:36:20Z,2017-09-06T18:49:27Z,MERGED,True,43,0,2,https://github.com/dirk-thomas,add function to destroy waitset and call it in spin_once,1,['in review'],https://github.com/ros2/rclpy/pull/109,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/109#issuecomment-327334724,"Addresses the memory leak described in #74. The script still uses a large amount of memory though.
This PR only fixes the leak of the waitset. A similar patch is required for every entity allocated with PyMem_Malloc (node, publisher, subscriptions, service, client, timer, guard condition, header (twice), qos_profile).","While that will allow to destroy the wait set, I don't think that will fix the main memory leak seen in spin_once (to be fair I didnt see any difference in memory allocation with or without this patch).
After a quick look at it I think that the guard_condition is the main reason of the leak and by removing it from spin_once I don't see any leak whatsoever.
Can you try it with and without the following patch and confirm that the leak stops only when removing the guard_condition from the equation ?
--- a/rclpy/rclpy/__init__.py
+++ b/rclpy/rclpy/__init__.py
@@ -57,12 +57,12 @@ def spin_once(node, *, timeout_sec=None):
     _rclpy.rclpy_wait_set_init(
         wait_set,
         len(node.subscriptions),
-        1,
+        0,  # 1,
         len(node.timers),
         len(node.clients),
         len(node.services))
 
-    [sigint_gc, sigint_gc_handle] = _rclpy.rclpy_get_sigint_guard_condition()
+    # [sigint_gc, sigint_gc_handle] = _rclpy.rclpy_get_sigint_guard_condition()
     entities = {
         'subscription': (node.subscriptions, 'subscription_handle'),
         'client': (node.clients, 'client_handle'),
@@ -75,8 +75,8 @@ def spin_once(node, *, timeout_sec=None):
             _rclpy.rclpy_wait_set_add_entity(
                 entity, wait_set, h.__getattribute__(handle_name)
             )
-    _rclpy.rclpy_wait_set_clear_entities('guard_condition', wait_set)
-    _rclpy.rclpy_wait_set_add_entity('guard_condition', wait_set, sigint_gc)
+   #  _rclpy.rclpy_wait_set_clear_entities('guard_condition', wait_set)
+   #  _rclpy.rclpy_wait_set_add_entity('guard_condition', wait_set, sigint_gc)
 
     if timeout_sec is None:
         timeout = -1
@@ -85,9 +85,9 @@ def spin_once(node, *, timeout_sec=None):
 
     _rclpy.rclpy_wait(wait_set, timeout)
 
-    guard_condition_ready_list = _rclpy.rclpy_get_ready_entities('guard_condition', wait_set)
-    if sigint_gc_handle in guard_condition_ready_list:
-        raise KeyboardInterrupt
+    # guard_condition_ready_list = _rclpy.rclpy_get_ready_entities('guard_condition', wait_set)
+    # if sigint_gc_handle in guard_condition_ready_list:
+    #     raise KeyboardInterrupt
 
     timer_ready_list = _rclpy.rclpy_get_ready_entities('timer', wait_set)
     for tmr in [t for t in node.timers if t.timer_pointer in timer_ready_list]:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,109,2017-09-05T23:39:44Z,2017-09-06T15:36:20Z,2017-09-06T18:49:27Z,MERGED,True,43,0,2,https://github.com/dirk-thomas,add function to destroy waitset and call it in spin_once,1,['in review'],https://github.com/ros2/rclpy/pull/109,https://github.com/dirk-thomas,3,https://github.com/ros2/rclpy/pull/109#issuecomment-327335043,"Addresses the memory leak described in #74. The script still uses a large amount of memory though.
This PR only fixes the leak of the waitset. A similar patch is required for every entity allocated with PyMem_Malloc (node, publisher, subscriptions, service, client, timer, guard condition, header (twice), qos_profile).","While that will allow to destroy the wait set, I don't think that will fix the main memory leak seen in spin_once (to be fair I didnt see any difference in memory allocation with or without this patch).

This patch does remove the repeated leak mention in #74 for me. I used #74 (comment) to confirm this. Please try it with the same example without and with this patch. I would be surprised if your results are different.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,109,2017-09-05T23:39:44Z,2017-09-06T15:36:20Z,2017-09-06T18:49:27Z,MERGED,True,43,0,2,https://github.com/dirk-thomas,add function to destroy waitset and call it in spin_once,1,['in review'],https://github.com/ros2/rclpy/pull/109,https://github.com/mikaelarguedas,4,https://github.com/ros2/rclpy/pull/109#issuecomment-327337027,"Addresses the memory leak described in #74. The script still uses a large amount of memory though.
This PR only fixes the leak of the waitset. A similar patch is required for every entity allocated with PyMem_Malloc (node, publisher, subscriptions, service, client, timer, guard condition, header (twice), qos_profile).","After quick check with @dirk-thomas, this patch does fix the memory leak reported by valgrind. The memory usage still goes up a lot when using a very small timeout but is (according to valgrind) not leaked by the process.
I can confirm that the memory accumulation stops growing when removing the guard_condition so there is definitely something to do there but can be addressed in a separate PR.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,109,2017-09-05T23:39:44Z,2017-09-06T15:36:20Z,2017-09-06T18:49:27Z,MERGED,True,43,0,2,https://github.com/dirk-thomas,add function to destroy waitset and call it in spin_once,1,['in review'],https://github.com/ros2/rclpy/pull/109,https://github.com/dirk-thomas,5,https://github.com/ros2/rclpy/pull/109#issuecomment-327523460,"Addresses the memory leak described in #74. The script still uses a large amount of memory though.
This PR only fixes the leak of the waitset. A similar patch is required for every entity allocated with PyMem_Malloc (node, publisher, subscriptions, service, client, timer, guard condition, header (twice), qos_profile).","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,109,2017-09-05T23:39:44Z,2017-09-06T15:36:20Z,2017-09-06T18:49:27Z,MERGED,True,43,0,2,https://github.com/dirk-thomas,add function to destroy waitset and call it in spin_once,1,['in review'],https://github.com/ros2/rclpy/pull/109,https://github.com/dirk-thomas,6,https://github.com/ros2/rclpy/pull/109#issuecomment-327572624,"Addresses the memory leak described in #74. The script still uses a large amount of memory though.
This PR only fixes the leak of the waitset. A similar patch is required for every entity allocated with PyMem_Malloc (node, publisher, subscriptions, service, client, timer, guard condition, header (twice), qos_profile).","I tried the above patch locally. I had to add at least a time to the minimal example with the spin_once loop since otherwise the waitset if empty which results in an exception.
While the script is still accumulating memory over time (in 30s ~110 MB) that is much slower than without the patch (in 30s ~850 MB). This is kind of expected since otherwise a new guard condition is create every cycle.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,109,2017-09-05T23:39:44Z,2017-09-06T15:36:20Z,2017-09-06T18:49:27Z,MERGED,True,43,0,2,https://github.com/dirk-thomas,add function to destroy waitset and call it in spin_once,1,['in review'],https://github.com/ros2/rclpy/pull/109,https://github.com/mikaelarguedas,7,https://github.com/ros2/rclpy/pull/109#issuecomment-327573429,"Addresses the memory leak described in #74. The script still uses a large amount of memory though.
This PR only fixes the leak of the waitset. A similar patch is required for every entity allocated with PyMem_Malloc (node, publisher, subscriptions, service, client, timer, guard condition, header (twice), qos_profile).","Thanks for trying it out, looking at a patch right now to submit a PR soon: #112",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,110,2017-09-06T15:38:30Z,2017-09-06T17:19:52Z,2017-09-06T17:19:57Z,MERGED,True,41,7,1,https://github.com/dirk-thomas,free all entities after fini,1,[],https://github.com/ros2/rclpy/pull/110,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/110,Same as #109 but for all other entities.,Same as #109 but for all other entities.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,110,2017-09-06T15:38:30Z,2017-09-06T17:19:52Z,2017-09-06T17:19:57Z,MERGED,True,41,7,1,https://github.com/dirk-thomas,free all entities after fini,1,[],https://github.com/ros2/rclpy/pull/110,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/110#issuecomment-327553642,Same as #109 but for all other entities.,"Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,111,2017-09-06T17:21:52Z,2017-09-06T18:52:05Z,2017-09-06T18:52:10Z,MERGED,True,32,12,1,https://github.com/dirk-thomas,free allocated qos profiles,1,[],https://github.com/ros2/rclpy/pull/111,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/111,"Same as #109 and #110 but for the qos profiles.

Linux 
Linux-aarch64 
macOS 
Windows","Same as #109 and #110 but for the qos profiles.

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,112,2017-09-06T18:43:36Z,2017-09-06T21:37:33Z,2017-09-06T21:37:37Z,MERGED,True,7,0,3,https://github.com/mikaelarguedas,add abilitiy to destroy guard conditions and destroy the sigint guard condition in spin_once,3,[],https://github.com/ros2/rclpy/pull/112,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/112,This fixes partially #74,This fixes partially #74,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,112,2017-09-06T18:43:36Z,2017-09-06T21:37:33Z,2017-09-06T21:37:37Z,MERGED,True,7,0,3,https://github.com/mikaelarguedas,add abilitiy to destroy guard conditions and destroy the sigint guard condition in spin_once,3,[],https://github.com/ros2/rclpy/pull/112,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/112#issuecomment-327586790,This fixes partially #74,The remaining memory usage is still related to the rclpy_get_sigint_guard_condition call. So this needs some more changes.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,112,2017-09-06T18:43:36Z,2017-09-06T21:37:33Z,2017-09-06T21:37:37Z,MERGED,True,7,0,3,https://github.com/mikaelarguedas,add abilitiy to destroy guard conditions and destroy the sigint guard condition in spin_once,3,[],https://github.com/ros2/rclpy/pull/112,https://github.com/dirk-thomas,3,https://github.com/ros2/rclpy/pull/112#issuecomment-327606410,This fixes partially #74,"Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,113,2017-09-06T20:35:38Z,2017-09-06T21:37:22Z,2017-09-06T21:37:26Z,MERGED,True,18,18,1,https://github.com/dirk-thomas,fix ref count of list items,1,[],https://github.com/ros2/rclpy/pull/113,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/113,"Before the calling code would still own the list items and therefore their ref count would never go to zero. Preallocating the list and then using PyList_SET_ITEM will make sure that the ref count of each item is decremented automatically when being added to the list.
This gives me a constant memory usage for an infinite spin_once loop as described in #74 🎉","Before the calling code would still own the list items and therefore their ref count would never go to zero. Preallocating the list and then using PyList_SET_ITEM will make sure that the ref count of each item is decremented automatically when being added to the list.
This gives me a constant memory usage for an infinite spin_once loop as described in #74 🎉",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,113,2017-09-06T20:35:38Z,2017-09-06T21:37:22Z,2017-09-06T21:37:26Z,MERGED,True,18,18,1,https://github.com/dirk-thomas,fix ref count of list items,1,[],https://github.com/ros2/rclpy/pull/113,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/113#issuecomment-327606426,"Before the calling code would still own the list items and therefore their ref count would never go to zero. Preallocating the list and then using PyList_SET_ITEM will make sure that the ref count of each item is decremented automatically when being added to the list.
This gives me a constant memory usage for an infinite spin_once loop as described in #74 🎉","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,114,2017-09-06T22:45:49Z,2017-09-07T22:13:08Z,2017-09-07T22:38:08Z,MERGED,True,0,6,1,https://github.com/dirk-thomas,fix ref count of messages,1,[],https://github.com/ros2/rclpy/pull/114,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/114,"Fixes other aspects of #74.
Due to the extra Py_INCREF message instance were never collected.","Fixes other aspects of #74.
Due to the extra Py_INCREF message instance were never collected.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,114,2017-09-06T22:45:49Z,2017-09-07T22:13:08Z,2017-09-07T22:38:08Z,MERGED,True,0,6,1,https://github.com/dirk-thomas,fix ref count of messages,1,[],https://github.com/ros2/rclpy/pull/114,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/114#issuecomment-327632931,"Fixes other aspects of #74.
Due to the extra Py_INCREF message instance were never collected.","This allows me to run a Python talker and listener with looooong messages (250k each) without the memory increasing notably.

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,114,2017-09-06T22:45:49Z,2017-09-07T22:13:08Z,2017-09-07T22:38:08Z,MERGED,True,0,6,1,https://github.com/dirk-thomas,fix ref count of messages,1,[],https://github.com/ros2/rclpy/pull/114,https://github.com/mikaelarguedas,3,https://github.com/ros2/rclpy/pull/114#issuecomment-327641274,"Fixes other aspects of #74.
Due to the extra Py_INCREF message instance were never collected.",Note (will not fix the test failures): looks like Py_CLEAR is a recommended alternative to Py_DECREF,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,114,2017-09-06T22:45:49Z,2017-09-07T22:13:08Z,2017-09-07T22:38:08Z,MERGED,True,0,6,1,https://github.com/dirk-thomas,fix ref count of messages,1,[],https://github.com/ros2/rclpy/pull/114,https://github.com/dirk-thomas,4,https://github.com/ros2/rclpy/pull/114#issuecomment-327923692,"Fixes other aspects of #74.
Due to the extra Py_INCREF message instance were never collected.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,116,2017-09-12T21:51:53Z,2017-09-12T22:46:24Z,2017-09-12T22:46:29Z,MERGED,True,11,3,1,https://github.com/mikaelarguedas,add hint if rclpy fails to be imported,7,[],https://github.com/ros2/rclpy/pull/116,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/116,"closes #115
connects to #115
Thew content of the referenced wiki page can be updated at a later date
Without this change
Failed to load entry point 'pub': DLL load failed: The specified module could not be found.
Traceback (most recent call last):
  File ""C:\dev\ros2\lib\demo_nodes_py\talker-script.py"", line 11, in <module>
    load_entry_point('demo-nodes-py==0.0.0', 'console_scripts', 'talker')()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 570, in load_entry_point
    return get_distribution(dist).load_entry_point(group, name)
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2687, in load_entry_point
    return ep.load()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2341, in load
    return self.resolve()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2347, in resolve
    module = __import__(self.module_name, fromlist=['__name__'], level=0)
  File ""C:\dev\ros2\Lib\site-packages\demo_nodes_py\topics\talker.py"", line 17, in <module>
    import rclpy
  File ""C:\dev\ros2\Lib\site-packages\rclpy\__init__.py"", line 17, in <module>
    from rclpy.executors import SingleThreadedExecutor as _SingleThreadedExecutor
  File ""C:\dev\ros2\Lib\site-packages\rclpy\executors.py"", line 21, in <module>
    from rclpy.impl.implementation_singleton import rclpy_implementation as _rclpy
  File ""C:\dev\ros2\Lib\site-packages\rclpy\impl\implementation_singleton.py"", line 32, in <module>
    rclpy_implementation = importlib.import_module('._rclpy', package='rclpy')
  File ""C:\Python36\lib\importlib\__init__.py"", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
ImportError: DLL load failed: The specified module could not be found.

With this change
Failed to load entry point 'pub': DLL load failed: The specified module could not be found.
The module '._rclpy' failed to be imported while being present on the system. Please refer to 'https://github.com/ros2/ros2/wiki/Rclpy-Import-error-hint' for possible solutions

Traceback (most recent call last):
  File ""C:\dev\ros2\lib\demo_nodes_py\talker-script.py"", line 11, in <module>
    load_entry_point('demo-nodes-py==0.0.0', 'console_scripts', 'talker')()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 570, in load_entry_point
    return get_distribution(dist).load_entry_point(group, name)
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2687, in load_entry_point
    return ep.load()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2341, in load
    return self.resolve()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2347, in resolve
    module = __import__(self.module_name, fromlist=['__name__'], level=0)
  File ""C:\dev\ros2\Lib\site-packages\demo_nodes_py\topics\talker.py"", line 17, in <module>
    import rclpy
  File ""C:\dev\ros2\Lib\site-packages\rclpy\__init__.py"", line 17, in <module>
    from rclpy.executors import SingleThreadedExecutor as _SingleThreadedExecutor
  File ""C:\dev\ros2\Lib\site-packages\rclpy\executors.py"", line 21, in <module>
    from rclpy.impl.implementation_singleton import rclpy_implementation as _rclpy
  File ""C:\dev\ros2\Lib\site-packages\rclpy\impl\implementation_singleton.py"", line 35, in <module>
    rclpy_implementation = importlib.import_module(module_name, package='rclpy')
  File ""C:\Python36\lib\importlib\__init__.py"", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
ImportError: DLL load failed: The specified module could not be found.

Alternatively we could not reraise the exception and exit. That will give a cleaner error message but has the downside of restricting user ability to catch it and fallback. So I settled on the current behavior
Without reraising
Failed to load entry point 'pub': DLL load failed: The specified module could not be found.
The module '._rclpy' failed to be imported while being present on the system. Please refer to 'https://github.com/ros2/ros2/wiki/Rclpy-Import-error-hint' for possible solutions","closes #115
connects to #115
Thew content of the referenced wiki page can be updated at a later date
Without this change
Failed to load entry point 'pub': DLL load failed: The specified module could not be found.
Traceback (most recent call last):
  File ""C:\dev\ros2\lib\demo_nodes_py\talker-script.py"", line 11, in <module>
    load_entry_point('demo-nodes-py==0.0.0', 'console_scripts', 'talker')()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 570, in load_entry_point
    return get_distribution(dist).load_entry_point(group, name)
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2687, in load_entry_point
    return ep.load()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2341, in load
    return self.resolve()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2347, in resolve
    module = __import__(self.module_name, fromlist=['__name__'], level=0)
  File ""C:\dev\ros2\Lib\site-packages\demo_nodes_py\topics\talker.py"", line 17, in <module>
    import rclpy
  File ""C:\dev\ros2\Lib\site-packages\rclpy\__init__.py"", line 17, in <module>
    from rclpy.executors import SingleThreadedExecutor as _SingleThreadedExecutor
  File ""C:\dev\ros2\Lib\site-packages\rclpy\executors.py"", line 21, in <module>
    from rclpy.impl.implementation_singleton import rclpy_implementation as _rclpy
  File ""C:\dev\ros2\Lib\site-packages\rclpy\impl\implementation_singleton.py"", line 32, in <module>
    rclpy_implementation = importlib.import_module('._rclpy', package='rclpy')
  File ""C:\Python36\lib\importlib\__init__.py"", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
ImportError: DLL load failed: The specified module could not be found.

With this change
Failed to load entry point 'pub': DLL load failed: The specified module could not be found.
The module '._rclpy' failed to be imported while being present on the system. Please refer to 'https://github.com/ros2/ros2/wiki/Rclpy-Import-error-hint' for possible solutions

Traceback (most recent call last):
  File ""C:\dev\ros2\lib\demo_nodes_py\talker-script.py"", line 11, in <module>
    load_entry_point('demo-nodes-py==0.0.0', 'console_scripts', 'talker')()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 570, in load_entry_point
    return get_distribution(dist).load_entry_point(group, name)
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2687, in load_entry_point
    return ep.load()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2341, in load
    return self.resolve()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2347, in resolve
    module = __import__(self.module_name, fromlist=['__name__'], level=0)
  File ""C:\dev\ros2\Lib\site-packages\demo_nodes_py\topics\talker.py"", line 17, in <module>
    import rclpy
  File ""C:\dev\ros2\Lib\site-packages\rclpy\__init__.py"", line 17, in <module>
    from rclpy.executors import SingleThreadedExecutor as _SingleThreadedExecutor
  File ""C:\dev\ros2\Lib\site-packages\rclpy\executors.py"", line 21, in <module>
    from rclpy.impl.implementation_singleton import rclpy_implementation as _rclpy
  File ""C:\dev\ros2\Lib\site-packages\rclpy\impl\implementation_singleton.py"", line 35, in <module>
    rclpy_implementation = importlib.import_module(module_name, package='rclpy')
  File ""C:\Python36\lib\importlib\__init__.py"", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
ImportError: DLL load failed: The specified module could not be found.

Alternatively we could not reraise the exception and exit. That will give a cleaner error message but has the downside of restricting user ability to catch it and fallback. So I settled on the current behavior
Without reraising
Failed to load entry point 'pub': DLL load failed: The specified module could not be found.
The module '._rclpy' failed to be imported while being present on the system. Please refer to 'https://github.com/ros2/ros2/wiki/Rclpy-Import-error-hint' for possible solutions",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,116,2017-09-12T21:51:53Z,2017-09-12T22:46:24Z,2017-09-12T22:46:29Z,MERGED,True,11,3,1,https://github.com/mikaelarguedas,add hint if rclpy fails to be imported,7,[],https://github.com/ros2/rclpy/pull/116,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/116#issuecomment-328999851,"closes #115
connects to #115
Thew content of the referenced wiki page can be updated at a later date
Without this change
Failed to load entry point 'pub': DLL load failed: The specified module could not be found.
Traceback (most recent call last):
  File ""C:\dev\ros2\lib\demo_nodes_py\talker-script.py"", line 11, in <module>
    load_entry_point('demo-nodes-py==0.0.0', 'console_scripts', 'talker')()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 570, in load_entry_point
    return get_distribution(dist).load_entry_point(group, name)
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2687, in load_entry_point
    return ep.load()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2341, in load
    return self.resolve()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2347, in resolve
    module = __import__(self.module_name, fromlist=['__name__'], level=0)
  File ""C:\dev\ros2\Lib\site-packages\demo_nodes_py\topics\talker.py"", line 17, in <module>
    import rclpy
  File ""C:\dev\ros2\Lib\site-packages\rclpy\__init__.py"", line 17, in <module>
    from rclpy.executors import SingleThreadedExecutor as _SingleThreadedExecutor
  File ""C:\dev\ros2\Lib\site-packages\rclpy\executors.py"", line 21, in <module>
    from rclpy.impl.implementation_singleton import rclpy_implementation as _rclpy
  File ""C:\dev\ros2\Lib\site-packages\rclpy\impl\implementation_singleton.py"", line 32, in <module>
    rclpy_implementation = importlib.import_module('._rclpy', package='rclpy')
  File ""C:\Python36\lib\importlib\__init__.py"", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
ImportError: DLL load failed: The specified module could not be found.

With this change
Failed to load entry point 'pub': DLL load failed: The specified module could not be found.
The module '._rclpy' failed to be imported while being present on the system. Please refer to 'https://github.com/ros2/ros2/wiki/Rclpy-Import-error-hint' for possible solutions

Traceback (most recent call last):
  File ""C:\dev\ros2\lib\demo_nodes_py\talker-script.py"", line 11, in <module>
    load_entry_point('demo-nodes-py==0.0.0', 'console_scripts', 'talker')()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 570, in load_entry_point
    return get_distribution(dist).load_entry_point(group, name)
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2687, in load_entry_point
    return ep.load()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2341, in load
    return self.resolve()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2347, in resolve
    module = __import__(self.module_name, fromlist=['__name__'], level=0)
  File ""C:\dev\ros2\Lib\site-packages\demo_nodes_py\topics\talker.py"", line 17, in <module>
    import rclpy
  File ""C:\dev\ros2\Lib\site-packages\rclpy\__init__.py"", line 17, in <module>
    from rclpy.executors import SingleThreadedExecutor as _SingleThreadedExecutor
  File ""C:\dev\ros2\Lib\site-packages\rclpy\executors.py"", line 21, in <module>
    from rclpy.impl.implementation_singleton import rclpy_implementation as _rclpy
  File ""C:\dev\ros2\Lib\site-packages\rclpy\impl\implementation_singleton.py"", line 35, in <module>
    rclpy_implementation = importlib.import_module(module_name, package='rclpy')
  File ""C:\Python36\lib\importlib\__init__.py"", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
ImportError: DLL load failed: The specified module could not be found.

Alternatively we could not reraise the exception and exit. That will give a cleaner error message but has the downside of restricting user ability to catch it and fallback. So I settled on the current behavior
Without reraising
Failed to load entry point 'pub': DLL load failed: The specified module could not be found.
The module '._rclpy' failed to be imported while being present on the system. Please refer to 'https://github.com/ros2/ros2/wiki/Rclpy-Import-error-hint' for possible solutions","new message:
Failed to load entry point 'pub': The C extension 'C:\dev\ros2\Lib\site-packages\rclpy\_rclpy.pyd' failed to be imported while being present on the system. Please refer to 'https://github.com/ros2/ros2/wiki/Rclpy-Import-error-hint' for possible solutions

Traceback (most recent call last):
  File ""C:\dev\ros2\Lib\site-packages\rclpy\impl\implementation_singleton.py"", line 33, in <module>
    rclpy_implementation = importlib.import_module('._rclpy', package='rclpy')
  File ""C:\Python36\lib\importlib\__init__.py"", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 978, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 961, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 950, in _find_and_load_unlocked
  File ""<frozen importlib._bootstrap>"", line 648, in _load_unlocked
  File ""<frozen importlib._bootstrap>"", line 560, in module_from_spec
  File ""<frozen importlib._bootstrap_external>"", line 922, in create_module
  File ""<frozen importlib._bootstrap>"", line 205, in _call_with_frames_removed
ImportError: DLL load failed: The specified module could not be found.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""C:\dev\ros2\lib\demo_nodes_py\talker-script.py"", line 11, in <module>
    load_entry_point('demo-nodes-py==0.0.0', 'console_scripts', 'talker')()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 570, in load_entry_point
    return get_distribution(dist).load_entry_point(group, name)
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2687, in load_entry_point
    return ep.load()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2341, in load
    return self.resolve()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2347, in resolve
    module = __import__(self.module_name, fromlist=['__name__'], level=0)
  File ""C:\dev\ros2\Lib\site-packages\demo_nodes_py\topics\talker.py"", line 17, in <module>
    import rclpy
  File ""C:\dev\ros2\Lib\site-packages\rclpy\__init__.py"", line 17, in <module>
    from rclpy.executors import SingleThreadedExecutor as _SingleThreadedExecutor
  File ""C:\dev\ros2\Lib\site-packages\rclpy\executors.py"", line 21, in <module>
    from rclpy.impl.implementation_singleton import rclpy_implementation as _rclpy
  File ""C:\dev\ros2\Lib\site-packages\rclpy\impl\implementation_singleton.py"", line 39, in <module>
    (e.path, 'https://github.com/ros2/ros2/wiki/Rclpy-Import-error-hint'))
ImportWarning: The C extension 'C:\dev\ros2\Lib\site-packages\rclpy\_rclpy.pyd' failed to be imported while being present on the system. Please refer to 'https://github.com/ros2/ros2/wiki/Rclpy-Import-error-hint' for possible solutions",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,116,2017-09-12T21:51:53Z,2017-09-12T22:46:24Z,2017-09-12T22:46:29Z,MERGED,True,11,3,1,https://github.com/mikaelarguedas,add hint if rclpy fails to be imported,7,[],https://github.com/ros2/rclpy/pull/116,https://github.com/mikaelarguedas,3,https://github.com/ros2/rclpy/pull/116#issuecomment-329004620,"closes #115
connects to #115
Thew content of the referenced wiki page can be updated at a later date
Without this change
Failed to load entry point 'pub': DLL load failed: The specified module could not be found.
Traceback (most recent call last):
  File ""C:\dev\ros2\lib\demo_nodes_py\talker-script.py"", line 11, in <module>
    load_entry_point('demo-nodes-py==0.0.0', 'console_scripts', 'talker')()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 570, in load_entry_point
    return get_distribution(dist).load_entry_point(group, name)
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2687, in load_entry_point
    return ep.load()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2341, in load
    return self.resolve()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2347, in resolve
    module = __import__(self.module_name, fromlist=['__name__'], level=0)
  File ""C:\dev\ros2\Lib\site-packages\demo_nodes_py\topics\talker.py"", line 17, in <module>
    import rclpy
  File ""C:\dev\ros2\Lib\site-packages\rclpy\__init__.py"", line 17, in <module>
    from rclpy.executors import SingleThreadedExecutor as _SingleThreadedExecutor
  File ""C:\dev\ros2\Lib\site-packages\rclpy\executors.py"", line 21, in <module>
    from rclpy.impl.implementation_singleton import rclpy_implementation as _rclpy
  File ""C:\dev\ros2\Lib\site-packages\rclpy\impl\implementation_singleton.py"", line 32, in <module>
    rclpy_implementation = importlib.import_module('._rclpy', package='rclpy')
  File ""C:\Python36\lib\importlib\__init__.py"", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
ImportError: DLL load failed: The specified module could not be found.

With this change
Failed to load entry point 'pub': DLL load failed: The specified module could not be found.
The module '._rclpy' failed to be imported while being present on the system. Please refer to 'https://github.com/ros2/ros2/wiki/Rclpy-Import-error-hint' for possible solutions

Traceback (most recent call last):
  File ""C:\dev\ros2\lib\demo_nodes_py\talker-script.py"", line 11, in <module>
    load_entry_point('demo-nodes-py==0.0.0', 'console_scripts', 'talker')()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 570, in load_entry_point
    return get_distribution(dist).load_entry_point(group, name)
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2687, in load_entry_point
    return ep.load()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2341, in load
    return self.resolve()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2347, in resolve
    module = __import__(self.module_name, fromlist=['__name__'], level=0)
  File ""C:\dev\ros2\Lib\site-packages\demo_nodes_py\topics\talker.py"", line 17, in <module>
    import rclpy
  File ""C:\dev\ros2\Lib\site-packages\rclpy\__init__.py"", line 17, in <module>
    from rclpy.executors import SingleThreadedExecutor as _SingleThreadedExecutor
  File ""C:\dev\ros2\Lib\site-packages\rclpy\executors.py"", line 21, in <module>
    from rclpy.impl.implementation_singleton import rclpy_implementation as _rclpy
  File ""C:\dev\ros2\Lib\site-packages\rclpy\impl\implementation_singleton.py"", line 35, in <module>
    rclpy_implementation = importlib.import_module(module_name, package='rclpy')
  File ""C:\Python36\lib\importlib\__init__.py"", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
ImportError: DLL load failed: The specified module could not be found.

Alternatively we could not reraise the exception and exit. That will give a cleaner error message but has the downside of restricting user ability to catch it and fallback. So I settled on the current behavior
Without reraising
Failed to load entry point 'pub': DLL load failed: The specified module could not be found.
The module '._rclpy' failed to be imported while being present on the system. Please refer to 'https://github.com/ros2/ros2/wiki/Rclpy-Import-error-hint' for possible solutions","Resulting stack trace:
Failed to load entry point 'pub': DLL load failed: The specified module could not be found.
The C extension 'C:\dev\ros2\Lib\site-packages\rclpy\_rclpy.pyd' failed to be imported while being present on the system. Please refer to 'https://github.com/ros2/ros2/wiki/Rclpy-Import-error-hint' for possible solutions

Traceback (most recent call last):
  File ""C:\dev\ros2\lib\demo_nodes_py\talker-script.py"", line 11, in <module>
    load_entry_point('demo-nodes-py==0.0.0', 'console_scripts', 'talker')()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 570, in load_entry_point
    return get_distribution(dist).load_entry_point(group, name)
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2687, in load_entry_point
    return ep.load()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2341, in load
    return self.resolve()
  File ""C:\Python36\lib\site-packages\pkg_resources\__init__.py"", line 2347, in resolve
    module = __import__(self.module_name, fromlist=['__name__'], level=0)
  File ""C:\dev\ros2\Lib\site-packages\demo_nodes_py\topics\talker.py"", line 17, in <module>
    import rclpy
  File ""C:\dev\ros2\Lib\site-packages\rclpy\__init__.py"", line 17, in <module>
    from rclpy.executors import SingleThreadedExecutor as _SingleThreadedExecutor
  File ""C:\dev\ros2\Lib\site-packages\rclpy\executors.py"", line 21, in <module>
    from rclpy.impl.implementation_singleton import rclpy_implementation as _rclpy
  File ""C:\dev\ros2\Lib\site-packages\rclpy\impl\implementation_singleton.py"", line 33, in <module>
    rclpy_implementation = importlib.import_module('._rclpy', package='rclpy')
  File ""C:\Python36\lib\importlib\__init__.py"", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
ImportError: DLL load failed: The specified module could not be found.
The C extension 'C:\dev\ros2\Lib\site-packages\rclpy\_rclpy.pyd' failed to be imported while being present on the system. Please refer to 'https://github.com/ros2/ros2/wiki/Rclpy-Import-error-hint' for possible solutions",True,{'THUMBS_UP': ['https://github.com/dirk-thomas']}
ros2/rclpy,https://github.com/ros2/rclpy,117,2017-09-13T20:48:52Z,2017-09-13T21:59:56Z,2017-09-13T21:59:58Z,MERGED,True,20,16,1,https://github.com/mikaelarguedas,Improve type support error message,6,[],https://github.com/ros2/rclpy/pull/117,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/117,this refactors the type support checks and add a hint as of the reason it is failing,this refactors the type support checks and add a hint as of the reason it is failing,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,117,2017-09-13T20:48:52Z,2017-09-13T21:59:56Z,2017-09-13T21:59:58Z,MERGED,True,20,16,1,https://github.com/mikaelarguedas,Improve type support error message,6,[],https://github.com/ros2/rclpy/pull/117,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/117#issuecomment-329308352,this refactors the type support checks and add a hint as of the reason it is failing,"Resulting output:
$ ros2 run examples_rclpy_minimal_subscriber subscriber_old_school 
Traceback (most recent call last):
  File ""/home/mikael/work/ros2/test_sprint_ws/install/lib/examples_rclpy_minimal_subscriber/subscriber_old_school"", line 11, in <module>
    load_entry_point('examples-rclpy-minimal-subscriber', 'console_scripts', 'subscriber_old_school')()
  File ""/home/mikael/work/ros2/test_sprint_ws/build/examples_rclpy_minimal_subscriber/subscriber_old_school.py"", line 30, in main
    subscription = node.create_subscription(String, 'topic', chatter_callback)
  File ""/home/mikael/work/ros2/test_sprint_ws/install/lib/python3.5/site-packages/rclpy/node.py"", line 123, in create_subscription
    check_for_type_support(msg_type)
  File ""/home/mikael/work/ros2/test_sprint_ws/install/lib/python3.5/site-packages/rclpy/node.py"", line 36, in check_for_type_support
    ts = msg_type.__class__._TYPE_SUPPORT
AttributeError: type object 'type' has no attribute '_TYPE_SUPPORT' This might be a ROS 1 message type but it should be a ROS 2 message type. Make sure to source your ROS 2 workspace after your ROS 1 workspace.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,118,2017-09-13T23:33:11Z,2017-09-14T15:55:04Z,2017-09-14T15:55:08Z,MERGED,True,10,3,1,https://github.com/mikaelarguedas,default to c11,2,[],https://github.com/ros2/rclpy/pull/118,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/118,follow up of ros2/ros2#362 revived during review of #102 (comment),follow up of ros2/ros2#362 revived during review of #102 (comment),True,{}
ros2/rclpy,https://github.com/ros2/rclpy,118,2017-09-13T23:33:11Z,2017-09-14T15:55:04Z,2017-09-14T15:55:08Z,MERGED,True,10,3,1,https://github.com/mikaelarguedas,default to c11,2,[],https://github.com/ros2/rclpy/pull/118,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/118#issuecomment-329330115,follow up of ros2/ros2#362 revived during review of #102 (comment),"Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,118,2017-09-13T23:33:11Z,2017-09-14T15:55:04Z,2017-09-14T15:55:08Z,MERGED,True,10,3,1,https://github.com/mikaelarguedas,default to c11,2,[],https://github.com/ros2/rclpy/pull/118,https://github.com/dirk-thomas,3,https://github.com/ros2/rclpy/pull/118#issuecomment-329345036,follow up of ros2/ros2#362 revived during review of #102 (comment),The new compiler warning seems to indicate that we need C11.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,118,2017-09-13T23:33:11Z,2017-09-14T15:55:04Z,2017-09-14T15:55:08Z,MERGED,True,10,3,1,https://github.com/mikaelarguedas,default to c11,2,[],https://github.com/ros2/rclpy/pull/118,https://github.com/mikaelarguedas,4,https://github.com/ros2/rclpy/pull/118#issuecomment-329357576,follow up of ros2/ros2#362 revived during review of #102 (comment),"The new compiler warning seems to indicate that we need C11.

Indeed.
The question is: if we ""require"" C11 to build without warnings on MacOS, should we lock down the standard version and not allow users to override it ? Or should we keep the conditional leaving control to the users at their own risks?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,118,2017-09-13T23:33:11Z,2017-09-14T15:55:04Z,2017-09-14T15:55:08Z,MERGED,True,10,3,1,https://github.com/mikaelarguedas,default to c11,2,[],https://github.com/ros2/rclpy/pull/118,https://github.com/dirk-thomas,5,https://github.com/ros2/rclpy/pull/118#issuecomment-329357831,follow up of ros2/ros2#362 revived during review of #102 (comment),Imo we should always allow an external override. A user might have a use case to override it - either with an older or newer version. We shouldn't prevent them from doing it (or require them to modify the sources).,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,118,2017-09-13T23:33:11Z,2017-09-14T15:55:04Z,2017-09-14T15:55:08Z,MERGED,True,10,3,1,https://github.com/mikaelarguedas,default to c11,2,[],https://github.com/ros2/rclpy/pull/118,https://github.com/mikaelarguedas,6,https://github.com/ros2/rclpy/pull/118#issuecomment-329359005,follow up of ros2/ros2#362 revived during review of #102 (comment),"Imo we should always allow an external override.

Fair enough 822298d
Run a macOS job just to confirm that warnings disappear (even if the warnings were pretty explicit...)

macOS",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,119,2017-09-13T23:39:51Z,2017-09-14T15:54:04Z,2017-09-14T15:54:09Z,MERGED,True,4,1,1,https://github.com/mikaelarguedas,define docstring as in logging module,2,[],https://github.com/ros2/rclpy/pull/119,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/119,define doc string as in rclpy_logging module (follow up of #102 (comment)),define doc string as in rclpy_logging module (follow up of #102 (comment)),True,{}
ros2/rclpy,https://github.com/ros2/rclpy,120,2017-09-15T17:32:56Z,2017-09-15T19:56:12Z,2017-10-10T20:26:39Z,MERGED,True,4,3,2,https://github.com/sloretz,Follow up to executor pull request,3,[],https://github.com/ros2/rclpy/pull/120,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/120,"Follow up to address comments #104 that didn't make it into r2b3
connects to ros2/examples#184","Follow up to address comments #104 that didn't make it into r2b3
connects to ros2/examples#184",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,120,2017-09-15T17:32:56Z,2017-09-15T19:56:12Z,2017-10-10T20:26:39Z,MERGED,True,4,3,2,https://github.com/sloretz,Follow up to executor pull request,3,[],https://github.com/ros2/rclpy/pull/120,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/120#issuecomment-329885597,"Follow up to address comments #104 that didn't make it into r2b3
connects to ros2/examples#184","Builds passed and approved, squash/merging",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,121,2017-09-28T23:43:09Z,2017-09-29T18:12:52Z,2017-09-29T18:12:57Z,MERGED,True,241,135,2,https://github.com/dirk-thomas,update style to match latest uncrustify,1,[],https://github.com/ros2/rclpy/pull/121,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/121,Connect to ament/uncrustify#18.,Connect to ament/uncrustify#18.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,122,2017-09-29T15:44:40Z,2017-09-29T16:51:10Z,2017-09-29T16:51:14Z,MERGED,True,1,1,1,https://github.com/mikaelarguedas,python extras is required to build c extensions,1,[],https://github.com/ros2/rclpy/pull/122,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/122,connects to ros2/rosidl#239,connects to ros2/rosidl#239,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,125,2017-10-10T22:12:30Z,2017-10-11T00:24:01Z,2017-10-11T00:24:05Z,MERGED,True,14,12,1,https://github.com/mikaelarguedas,Check exact capsules,3,[],https://github.com/ros2/rclpy/pull/125,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/125,"The first commit makes sure that we return NULL each time PyArg_ParseTuple fails and raises an exception.
The second commit uses PyCapsule_CheckExact rather than comparing capsules to Py_None. It is an attempt to address #120 (review) but doesnt reduce the amount of code unfortunately because we still need to extract the pointer (to pass it's value to the entity we create) and then free it... This could be changed to a call to PyCapsule_IsValid and adapt the names passed to in when our capsules get names.","The first commit makes sure that we return NULL each time PyArg_ParseTuple fails and raises an exception.
The second commit uses PyCapsule_CheckExact rather than comparing capsules to Py_None. It is an attempt to address #120 (review) but doesnt reduce the amount of code unfortunately because we still need to extract the pointer (to pass it's value to the entity we create) and then free it... This could be changed to a call to PyCapsule_IsValid and adapt the names passed to in when our capsules get names.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,127,2017-10-13T16:11:26Z,2018-01-04T16:16:30Z,2018-01-04T16:16:50Z,CLOSED,False,1512,524,14,https://github.com/sloretz,Rclpy wait for service,49,[],https://github.com/ros2/rclpy/pull/127,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/127,"This adds a blocking wait_for_service() to the client. It is implemented using a GraphListener which runs in its own thread - similar to rclcpp. This is needed to prevent wait_for_service() from deadlocking a single threaded executor if someone calls it from a subscriber callback.
There is a small amount of refactoring in the executor for the purpose of reusing code in the graph listener. Also after talking with @mikaelarguedas negative timeouts now block forever instead of returning immediately.

Linux 
Linux-aarch64 
macOS 
Windows 

connects to #58","This adds a blocking wait_for_service() to the client. It is implemented using a GraphListener which runs in its own thread - similar to rclcpp. This is needed to prevent wait_for_service() from deadlocking a single threaded executor if someone calls it from a subscriber callback.
There is a small amount of refactoring in the executor for the purpose of reusing code in the graph listener. Also after talking with @mikaelarguedas negative timeouts now block forever instead of returning immediately.

Linux 
Linux-aarch64 
macOS 
Windows 

connects to #58",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,127,2017-10-13T16:11:26Z,2018-01-04T16:16:30Z,2018-01-04T16:16:50Z,CLOSED,False,1512,524,14,https://github.com/sloretz,Rclpy wait for service,49,[],https://github.com/ros2/rclpy/pull/127,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/127#issuecomment-339455924,"This adds a blocking wait_for_service() to the client. It is implemented using a GraphListener which runs in its own thread - similar to rclcpp. This is needed to prevent wait_for_service() from deadlocking a single threaded executor if someone calls it from a subscriber callback.
There is a small amount of refactoring in the executor for the purpose of reusing code in the graph listener. Also after talking with @mikaelarguedas negative timeouts now block forever instead of returning immediately.

Linux 
Linux-aarch64 
macOS 
Windows 

connects to #58","Rebased onto master and re-running CI

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,127,2017-10-13T16:11:26Z,2018-01-04T16:16:30Z,2018-01-04T16:16:50Z,CLOSED,False,1512,524,14,https://github.com/sloretz,Rclpy wait for service,49,[],https://github.com/ros2/rclpy/pull/127,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/127#issuecomment-340474466,"This adds a blocking wait_for_service() to the client. It is implemented using a GraphListener which runs in its own thread - similar to rclcpp. This is needed to prevent wait_for_service() from deadlocking a single threaded executor if someone calls it from a subscriber callback.
There is a small amount of refactoring in the executor for the purpose of reusing code in the graph listener. Also after talking with @mikaelarguedas negative timeouts now block forever instead of returning immediately.

Linux 
Linux-aarch64 
macOS 
Windows 

connects to #58",@ros2/team Mind giving this one more look?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,127,2017-10-13T16:11:26Z,2018-01-04T16:16:30Z,2018-01-04T16:16:50Z,CLOSED,False,1512,524,14,https://github.com/sloretz,Rclpy wait for service,49,[],https://github.com/ros2/rclpy/pull/127,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/127#issuecomment-340818853,"This adds a blocking wait_for_service() to the client. It is implemented using a GraphListener which runs in its own thread - similar to rclcpp. This is needed to prevent wait_for_service() from deadlocking a single threaded executor if someone calls it from a subscriber callback.
There is a small amount of refactoring in the executor for the purpose of reusing code in the graph listener. Also after talking with @mikaelarguedas negative timeouts now block forever instead of returning immediately.

Linux 
Linux-aarch64 
macOS 
Windows 

connects to #58","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,127,2017-10-13T16:11:26Z,2018-01-04T16:16:30Z,2018-01-04T16:16:50Z,CLOSED,False,1512,524,14,https://github.com/sloretz,Rclpy wait for service,49,[],https://github.com/ros2/rclpy/pull/127,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/127#issuecomment-341168562,"This adds a blocking wait_for_service() to the client. It is implemented using a GraphListener which runs in its own thread - similar to rclcpp. This is needed to prevent wait_for_service() from deadlocking a single threaded executor if someone calls it from a subscriber callback.
There is a small amount of refactoring in the executor for the purpose of reusing code in the graph listener. Also after talking with @mikaelarguedas negative timeouts now block forever instead of returning immediately.

Linux 
Linux-aarch64 
macOS 
Windows 

connects to #58","Not merging yet because it appears to push the 1000Hz timer test from flaky to failing 100% of the time on aarch64. Even with --retest-until-pass 100 the timer test never passed
http://ci.ros2.org/job/ci_linux-aarch64/658/
The reason for this test failure is probably performance in spin_once. Nothing stands out using cProfile on x86_64. The largest amount of time (besides rclpy_wait) is spent doing list comprehensions, so I'll try reducing those first.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,127,2017-10-13T16:11:26Z,2018-01-04T16:16:30Z,2018-01-04T16:16:50Z,CLOSED,False,1512,524,14,https://github.com/sloretz,Rclpy wait for service,49,[],https://github.com/ros2/rclpy/pull/127,https://github.com/sloretz,6,https://github.com/ros2/rclpy/pull/127#issuecomment-341198769,"This adds a blocking wait_for_service() to the client. It is implemented using a GraphListener which runs in its own thread - similar to rclcpp. This is needed to prevent wait_for_service() from deadlocking a single threaded executor if someone calls it from a subscriber callback.
There is a small amount of refactoring in the executor for the purpose of reusing code in the graph listener. Also after talking with @mikaelarguedas negative timeouts now block forever instead of returning immediately.

Linux 
Linux-aarch64 
macOS 
Windows 

connects to #58",@dirk-thomas replaced comprehensions with list() 0dbf8c7,True,{'THUMBS_UP': ['https://github.com/dirk-thomas']}
ros2/rclpy,https://github.com/ros2/rclpy,127,2017-10-13T16:11:26Z,2018-01-04T16:16:30Z,2018-01-04T16:16:50Z,CLOSED,False,1512,524,14,https://github.com/sloretz,Rclpy wait for service,49,[],https://github.com/ros2/rclpy/pull/127,https://github.com/sloretz,7,https://github.com/ros2/rclpy/pull/127#issuecomment-341199907,"This adds a blocking wait_for_service() to the client. It is implemented using a GraphListener which runs in its own thread - similar to rclcpp. This is needed to prevent wait_for_service() from deadlocking a single threaded executor if someone calls it from a subscriber callback.
There is a small amount of refactoring in the executor for the purpose of reusing code in the graph listener. Also after talking with @mikaelarguedas negative timeouts now block forever instead of returning immediately.

Linux 
Linux-aarch64 
macOS 
Windows 

connects to #58","Improvements result in ~9% less overhead in wait_for_ready_callbacks on x86_64. I started another job to see if that's good enough to get the 1kHz timer test to pass on aarch64 http://ci.ros2.org/job/ci_linux-aarch64/661 http://ci.ros2.org/job/ci_linux-aarch64/663/
Edit: Still not fast enough :(
Build with 7ee5ead Another try http://ci.ros2.org/job/ci_linux-aarch64/668/
Edit, more stuff I don't expect this to pass, but it will give me more info in the morning

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,127,2017-10-13T16:11:26Z,2018-01-04T16:16:30Z,2018-01-04T16:16:50Z,CLOSED,False,1512,524,14,https://github.com/sloretz,Rclpy wait for service,49,[],https://github.com/ros2/rclpy/pull/127,https://github.com/sloretz,8,https://github.com/ros2/rclpy/pull/127#issuecomment-355325160,"This adds a blocking wait_for_service() to the client. It is implemented using a GraphListener which runs in its own thread - similar to rclcpp. This is needed to prevent wait_for_service() from deadlocking a single threaded executor if someone calls it from a subscriber callback.
There is a small amount of refactoring in the executor for the purpose of reusing code in the graph listener. Also after talking with @mikaelarguedas negative timeouts now block forever instead of returning immediately.

Linux 
Linux-aarch64 
macOS 
Windows 

connects to #58","Lots has been split off, changed, and merged since this PR. I'll close this expecting to open smaller PRs with these features in the future.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,128,2017-10-13T22:24:39Z,2017-10-13T22:31:15Z,2017-10-13T22:31:19Z,CLOSED,False,3,0,1,https://github.com/sloretz,Ignore vim files,1,[],https://github.com/ros2/rclpy/pull/128,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/128,"Git ignore uses glob syntax. Editing files in vim produces a file with a leading . and suffix that starts with .swp. If a vim instance fails to close cleanly a new instance will bump the last character in the suffix to .swo. I've never crashed vim enough times in a row to see what happens when it gets to the last single character available, so that's not handled here.","Git ignore uses glob syntax. Editing files in vim produces a file with a leading . and suffix that starts with .swp. If a vim instance fails to close cleanly a new instance will bump the last character in the suffix to .swo. I've never crashed vim enough times in a row to see what happens when it gets to the last single character available, so that's not handled here.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,128,2017-10-13T22:24:39Z,2017-10-13T22:31:15Z,2017-10-13T22:31:19Z,CLOSED,False,3,0,1,https://github.com/sloretz,Ignore vim files,1,[],https://github.com/ros2/rclpy/pull/128,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/128#issuecomment-336582222,"Git ignore uses glob syntax. Editing files in vim produces a file with a leading . and suffix that starts with .swp. If a vim instance fails to close cleanly a new instance will bump the last character in the suffix to .swo. I've never crashed vim enough times in a row to see what happens when it gets to the last single character available, so that's not handled here.",If you use vim you might want to add this suffix to your local ignore file which applies to all repos on your machine?,True,"{'THUMBS_UP': ['https://github.com/sloretz'], 'LAUGH': ['https://github.com/sloretz'], 'HOORAY': ['https://github.com/sloretz']}"
ros2/rclpy,https://github.com/ros2/rclpy,128,2017-10-13T22:24:39Z,2017-10-13T22:31:15Z,2017-10-13T22:31:19Z,CLOSED,False,3,0,1,https://github.com/sloretz,Ignore vim files,1,[],https://github.com/ros2/rclpy/pull/128,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/128#issuecomment-336582620,"Git ignore uses glob syntax. Editing files in vim produces a file with a leading . and suffix that starts with .swp. If a vim instance fails to close cleanly a new instance will bump the last character in the suffix to .swo. I've never crashed vim enough times in a row to see what happens when it gets to the last single character available, so that's not handled here.","@dirk-thomas I had no idea I could have a global .gitignore. This is fantastic!
Closing this PR.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,129,2017-10-18T23:00:42Z,2017-10-25T19:52:53Z,2017-10-31T16:10:04Z,MERGED,True,391,248,5,https://github.com/sloretz,Use PyCapsule names,12,[],https://github.com/ros2/rclpy/pull/129,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/129,"Naming capsules prevents calling the wrong kind of cleanup on a pointer. This also removes the string parameter from rclpy_destroy_entity and rclpy_destroy_node_entity since it can be figured out from the capsule name.
If a non-capsule or a capsule of the wrong type is specified, the functions let PyCapsule_GetPointer raise.

Linux 
Linux-aarch64 
macOS 
Windows","Naming capsules prevents calling the wrong kind of cleanup on a pointer. This also removes the string parameter from rclpy_destroy_entity and rclpy_destroy_node_entity since it can be figured out from the capsule name.
If a non-capsule or a capsule of the wrong type is specified, the functions let PyCapsule_GetPointer raise.

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,129,2017-10-18T23:00:42Z,2017-10-25T19:52:53Z,2017-10-31T16:10:04Z,MERGED,True,391,248,5,https://github.com/sloretz,Use PyCapsule names,12,[],https://github.com/ros2/rclpy/pull/129,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/129#issuecomment-339407844,"Naming capsules prevents calling the wrong kind of cleanup on a pointer. This also removes the string parameter from rclpy_destroy_entity and rclpy_destroy_node_entity since it can be figured out from the capsule name.
If a non-capsule or a capsule of the wrong type is specified, the functions let PyCapsule_GetPointer raise.

Linux 
Linux-aarch64 
macOS 
Windows","I found a few bugs in this PR, please hold before merging",True,{'THUMBS_UP': ['https://github.com/sloretz']}
ros2/rclpy,https://github.com/ros2/rclpy,129,2017-10-18T23:00:42Z,2017-10-25T19:52:53Z,2017-10-31T16:10:04Z,MERGED,True,391,248,5,https://github.com/sloretz,Use PyCapsule names,12,[],https://github.com/ros2/rclpy/pull/129,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/129#issuecomment-339422416,"Naming capsules prevents calling the wrong kind of cleanup on a pointer. This also removes the string parameter from rclpy_destroy_entity and rclpy_destroy_node_entity since it can be figured out from the capsule name.
If a non-capsule or a capsule of the wrong type is specified, the functions let PyCapsule_GetPointer raise.

Linux 
Linux-aarch64 
macOS 
Windows","@mikaelarguedas CI in progress
edit: started again with d4048f6

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,129,2017-10-18T23:00:42Z,2017-10-25T19:52:53Z,2017-10-31T16:10:04Z,MERGED,True,391,248,5,https://github.com/sloretz,Use PyCapsule names,12,[],https://github.com/ros2/rclpy/pull/129,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/129#issuecomment-339450691,"Naming capsules prevents calling the wrong kind of cleanup on a pointer. This also removes the string parameter from rclpy_destroy_entity and rclpy_destroy_node_entity since it can be figured out from the capsule name.
If a non-capsule or a capsule of the wrong type is specified, the functions let PyCapsule_GetPointer raise.

Linux 
Linux-aarch64 
macOS 
Windows",CI green. squash/merging.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,130,2017-10-19T16:49:04Z,2017-11-09T19:25:47Z,2017-11-09T19:25:51Z,CLOSED,False,9,9,2,https://github.com/dhood,Updates for global severity threshold -> default severity threshold,2,[],https://github.com/ros2/rclpy/pull/130,https://github.com/dhood,1,https://github.com/ros2/rclpy/pull/130,"connects to ros2/rcutils#57
This is the minimum PR required to keep rclpy working with the changes in ros2/rcutils#57
It does not attempt to leverage any of the configuration of loggers (that'll be a separate PR)","connects to ros2/rcutils#57
This is the minimum PR required to keep rclpy working with the changes in ros2/rcutils#57
It does not attempt to leverage any of the configuration of loggers (that'll be a separate PR)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,130,2017-10-19T16:49:04Z,2017-11-09T19:25:47Z,2017-11-09T19:25:51Z,CLOSED,False,9,9,2,https://github.com/dhood,Updates for global severity threshold -> default severity threshold,2,[],https://github.com/ros2/rclpy/pull/130,https://github.com/dhood,2,https://github.com/ros2/rclpy/pull/130#issuecomment-343264041,"connects to ros2/rcutils#57
This is the minimum PR required to keep rclpy working with the changes in ros2/rcutils#57
It does not attempt to leverage any of the configuration of loggers (that'll be a separate PR)",closed in favour of #132,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,131,2017-10-19T18:26:01Z,2017-10-24T15:01:00Z,2017-10-24T15:01:07Z,MERGED,True,172,3,4,https://github.com/sloretz,Rclpy GuardCondition,3,[],https://github.com/ros2/rclpy/pull/131,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/131,"Adds a class GuardCondition that can be instantiated with node.create_guard_condition(callback). The callback will be executed after gc.trigger() is called.
There is no queue of callbacks. If a user triggers a guard condition multiple times the callback will only be called once during the next spin cycle.
Labeled in-progress while CI is running. I'll switch it to in-review when the jobs complete.

Linux 
Linux-aarch64 
macOS 
Windows","Adds a class GuardCondition that can be instantiated with node.create_guard_condition(callback). The callback will be executed after gc.trigger() is called.
There is no queue of callbacks. If a user triggers a guard condition multiple times the callback will only be called once during the next spin cycle.
Labeled in-progress while CI is running. I'll switch it to in-review when the jobs complete.

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,132,2017-10-20T23:29:44Z,2017-11-09T19:25:07Z,2017-11-09T19:26:27Z,MERGED,True,291,39,5,https://github.com/dhood,Named logger config + logger hierarchy,23,[],https://github.com/ros2/rclpy/pull/132,https://github.com/dhood,1,https://github.com/ros2/rclpy/pull/132,"connects to ros2/rcutils#57
currently including commits from #130; if this PR is ready before ros2/rcutils#57 gets merged then it can replace #130.
This PR exposes the new notions from ros2/rcutils#57:

there's a default severity threshold,
each logger can have its own severity threshold specified,
there's a hierarchy of loggers: I've added a get_child() method on loggers; children inherit the severity threshold of their parent if set (the severity threshold inheritance taken care of by rcutils now that it has a notion of logger hierarchy)
all loggers at some point are attached to the root rclpy logger (which is where they get their default severity threshold)

Out of scope:

node.get_logger() or any notion of attaching loggers to nodes (waiting on decision in ros2/examples#186)
any caching of whether or not loggers are enabled and updating based on notifications when severity levels change","connects to ros2/rcutils#57
currently including commits from #130; if this PR is ready before ros2/rcutils#57 gets merged then it can replace #130.
This PR exposes the new notions from ros2/rcutils#57:

there's a default severity threshold,
each logger can have its own severity threshold specified,
there's a hierarchy of loggers: I've added a get_child() method on loggers; children inherit the severity threshold of their parent if set (the severity threshold inheritance taken care of by rcutils now that it has a notion of logger hierarchy)
all loggers at some point are attached to the root rclpy logger (which is where they get their default severity threshold)

Out of scope:

node.get_logger() or any notion of attaching loggers to nodes (waiting on decision in ros2/examples#186)
any caching of whether or not loggers are enabled and updating based on notifications when severity levels change",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,132,2017-10-20T23:29:44Z,2017-11-09T19:25:07Z,2017-11-09T19:26:27Z,MERGED,True,291,39,5,https://github.com/dhood,Named logger config + logger hierarchy,23,[],https://github.com/ros2/rclpy/pull/132,https://github.com/dhood,2,https://github.com/ros2/rclpy/pull/132#issuecomment-341291877,"connects to ros2/rcutils#57
currently including commits from #130; if this PR is ready before ros2/rcutils#57 gets merged then it can replace #130.
This PR exposes the new notions from ros2/rcutils#57:

there's a default severity threshold,
each logger can have its own severity threshold specified,
there's a hierarchy of loggers: I've added a get_child() method on loggers; children inherit the severity threshold of their parent if set (the severity threshold inheritance taken care of by rcutils now that it has a notion of logger hierarchy)
all loggers at some point are attached to the root rclpy logger (which is where they get their default severity threshold)

Out of scope:

node.get_logger() or any notion of attaching loggers to nodes (waiting on decision in ros2/examples#186)
any caching of whether or not loggers are enabled and updating based on notifications when severity levels change","This is ready for review, it brings in a the notion of logger hierarchy but doesn't act on any not-yet-made design conclusions about what those loggers will be named in userland/how loggers are associated with nodes (e.g. the name of loggers attached to nodes, etc).
The only design-like decision that is being made in this PR is that the root logger is nameless, but we just need to change the line that creates the root logger if we decide that a specific name is more appropriate, and then it will propagate to all created loggers.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,132,2017-10-20T23:29:44Z,2017-11-09T19:25:07Z,2017-11-09T19:26:27Z,MERGED,True,291,39,5,https://github.com/dhood,Named logger config + logger hierarchy,23,[],https://github.com/ros2/rclpy/pull/132,https://github.com/dhood,3,https://github.com/ros2/rclpy/pull/132#issuecomment-343264263,"connects to ros2/rcutils#57
currently including commits from #130; if this PR is ready before ros2/rcutils#57 gets merged then it can replace #130.
This PR exposes the new notions from ros2/rcutils#57:

there's a default severity threshold,
each logger can have its own severity threshold specified,
there's a hierarchy of loggers: I've added a get_child() method on loggers; children inherit the severity threshold of their parent if set (the severity threshold inheritance taken care of by rcutils now that it has a notion of logger hierarchy)
all loggers at some point are attached to the root rclpy logger (which is where they get their default severity threshold)

Out of scope:

node.get_logger() or any notion of attaching loggers to nodes (waiting on decision in ros2/examples#186)
any caching of whether or not loggers are enabled and updating based on notifications when severity levels change",CI for this PR is in ros2/rcutils#57 (comment),True,{}
ros2/rclpy,https://github.com/ros2/rclpy,133,2017-10-25T01:46:04Z,2017-10-25T15:22:07Z,2017-10-25T15:22:19Z,MERGED,True,30,30,1,https://github.com/mikaelarguedas,Rclpy named capsules fixups,2,[],https://github.com/ros2/rclpy/pull/133,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/133,@sloretz I made a few fixups in the modified docblocks of #129 but didnt want to push directly on your branch. Feel free to cherry pick/apply what you think makes sense.,@sloretz I made a few fixups in the modified docblocks of #129 but didnt want to push directly on your branch. Feel free to cherry pick/apply what you think makes sense.,True,{'THUMBS_UP': ['https://github.com/sloretz']}
ros2/rclpy,https://github.com/ros2/rclpy,133,2017-10-25T01:46:04Z,2017-10-25T15:22:07Z,2017-10-25T15:22:19Z,MERGED,True,30,30,1,https://github.com/mikaelarguedas,Rclpy named capsules fixups,2,[],https://github.com/ros2/rclpy/pull/133,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/133#issuecomment-339366742,@sloretz I made a few fixups in the modified docblocks of #129 but didnt want to push directly on your branch. Feel free to cherry pick/apply what you think makes sense.,"It all looks good to me. Thanks for the doc fixes.
In the future feel free to push to the branch directly. Just send a heads up so I don't accidentally overwrite them if I'm about to rebase onto master and force push.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,134,2017-10-26T22:30:25Z,2017-10-26T22:33:35Z,2017-10-26T22:46:08Z,MERGED,True,1,1,1,https://github.com/wjwwood,protect against ImportError.path being None,1,[],https://github.com/ros2/rclpy/pull/134,https://github.com/wjwwood,1,https://github.com/ros2/rclpy/pull/134,"Error looks something like:
  File ""C:\path\to\ws\install\Lib\site-packages\rclpy\impl\implementation_singleton.py"", line 35, in <module>
    if os.path.isfile(e.path):
  File ""C:\Python36\lib\genericpath.py"", line 30, in isfile
    st = os.stat(path)
TypeError: stat: path should be string, bytes, os.PathLike or integer, not NoneType","Error looks something like:
  File ""C:\path\to\ws\install\Lib\site-packages\rclpy\impl\implementation_singleton.py"", line 35, in <module>
    if os.path.isfile(e.path):
  File ""C:\Python36\lib\genericpath.py"", line 30, in isfile
    st = os.stat(path)
TypeError: stat: path should be string, bytes, os.PathLike or integer, not NoneType",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,134,2017-10-26T22:30:25Z,2017-10-26T22:33:35Z,2017-10-26T22:46:08Z,MERGED,True,1,1,1,https://github.com/wjwwood,protect against ImportError.path being None,1,[],https://github.com/ros2/rclpy/pull/134,https://github.com/dhood,2,https://github.com/ros2/rclpy/pull/134#issuecomment-339820341,"Error looks something like:
  File ""C:\path\to\ws\install\Lib\site-packages\rclpy\impl\implementation_singleton.py"", line 35, in <module>
    if os.path.isfile(e.path):
  File ""C:\Python36\lib\genericpath.py"", line 30, in isfile
    st = os.stat(path)
TypeError: stat: path should be string, bytes, os.PathLike or integer, not NoneType",for future reference can you advise under what circumstances this error occurs?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,134,2017-10-26T22:30:25Z,2017-10-26T22:33:35Z,2017-10-26T22:46:08Z,MERGED,True,1,1,1,https://github.com/wjwwood,protect against ImportError.path being None,1,[],https://github.com/ros2/rclpy/pull/134,https://github.com/wjwwood,3,https://github.com/ros2/rclpy/pull/134#issuecomment-339821972,"Error looks something like:
  File ""C:\path\to\ws\install\Lib\site-packages\rclpy\impl\implementation_singleton.py"", line 35, in <module>
    if os.path.isfile(e.path):
  File ""C:\Python36\lib\genericpath.py"", line 30, in isfile
    st = os.stat(path)
TypeError: stat: path should be string, bytes, os.PathLike or integer, not NoneType",@dhood If you run the script with the non-debug version of Python but only the debug version of the c extension exists (i.e. you use python3 rather than python3_d but only rclpy/_rclpy_d.pyd exists).,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,134,2017-10-26T22:30:25Z,2017-10-26T22:33:35Z,2017-10-26T22:46:08Z,MERGED,True,1,1,1,https://github.com/wjwwood,protect against ImportError.path being None,1,[],https://github.com/ros2/rclpy/pull/134,https://github.com/dhood,4,https://github.com/ros2/rclpy/pull/134#issuecomment-339822345,"Error looks something like:
  File ""C:\path\to\ws\install\Lib\site-packages\rclpy\impl\implementation_singleton.py"", line 35, in <module>
    if os.path.isfile(e.path):
  File ""C:\Python36\lib\genericpath.py"", line 30, in isfile
    st = os.stat(path)
TypeError: stat: path should be string, bytes, os.PathLike or integer, not NoneType",OK good to know,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,135,2017-10-30T23:25:22Z,2018-01-04T16:19:53Z,2018-01-04T16:20:01Z,CLOSED,False,1851,687,23,https://github.com/sloretz,[WIP] Futures/coroutines for services,31,[],https://github.com/ros2/rclpy/pull/135,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/135,"Note:Ignore this PR. A lot of it has already been split into separate pull requests. I'll close this when there is nothing left to split.
This is part of service feature parity.  It is not ready for review, but feedback is welcome if you can tolerate the chaotic writing below. Once #127 is merged this will need to be rebased onto master (omitting d980051).
Futures are a way to support multiple simultaneous client requests. Coroutines are a way to support futures inside of callbacks in an executor. Futures need a task running in parallel to update the result. A task can get to the executor via

a callback in the executor calling await future

Future.__await__ can invoke the task, and yield if the result is not ready yet.
Callback itself must be a coroutine (i.e. async def)


code outside giving the future to the executor directly

Add an equivalent of rclcpp::Executor::spin_until_future_complete(future)

In asyncio everything has a reference to the event loop so adding a task is easy, but not everything has a reference to the executor in rclpy. One possibility is a future having a reference to a task that needs to be executed to complete it. spin_until_future_complete could add that task to the executor.





Current state:

Added executor support for coroutines

async def/await only. Does not support generator/yield from coroutines (but it could)
executor wait_for_ready_callbacks yields new callbacks first, then old coroutines that yielded the last time they were run.

Requires an executor to run the iterator returned from wait_for_ready_callbacks until StopIteration or old coroutines may never get resumed.
Maybe for some cases it makes sense to interleave new tasks with old tasks? I think wait_for_ready_callbacks should only yield new tasks, and another method should yield old ones. Custom executors should be responsible for implementing their own old-vs-new task strategy.


Service callbacks cannot be coroutines. (not impossible; haven't figured out a clean implementation).


Executor yields a Task instance

Task class hides the difference between a normal function and a coroutine from an executor
Task done callbacks get executed in series after the original callback/coroutine finishes

Task is greedy and executes as many done callbacks as it can, pausing only if one is a coroutine that yields.
asyncio.Task done callbacks get scheduled in the event loop, but this would be a problem in rclpy because it could mean another rcl_wait before executing a done callback.


Not using asyncio.Task because it is not thread safe, and it expects a reference to an asyncio event loop


Does not yet have a Future class

asyncio.Future is await-able but not thread safe and expects an event loop reference (though partially works without it)
concurrent.futures.Future is thread safe but not await-able (Maybe could be subclassed for this)
In asyncio.Task is a subclass of future, so maybe a Task could be it's own future too?



connects to #123","Note:Ignore this PR. A lot of it has already been split into separate pull requests. I'll close this when there is nothing left to split.
This is part of service feature parity.  It is not ready for review, but feedback is welcome if you can tolerate the chaotic writing below. Once #127 is merged this will need to be rebased onto master (omitting d980051).
Futures are a way to support multiple simultaneous client requests. Coroutines are a way to support futures inside of callbacks in an executor. Futures need a task running in parallel to update the result. A task can get to the executor via

a callback in the executor calling await future

Future.__await__ can invoke the task, and yield if the result is not ready yet.
Callback itself must be a coroutine (i.e. async def)


code outside giving the future to the executor directly

Add an equivalent of rclcpp::Executor::spin_until_future_complete(future)

In asyncio everything has a reference to the event loop so adding a task is easy, but not everything has a reference to the executor in rclpy. One possibility is a future having a reference to a task that needs to be executed to complete it. spin_until_future_complete could add that task to the executor.





Current state:

Added executor support for coroutines

async def/await only. Does not support generator/yield from coroutines (but it could)
executor wait_for_ready_callbacks yields new callbacks first, then old coroutines that yielded the last time they were run.

Requires an executor to run the iterator returned from wait_for_ready_callbacks until StopIteration or old coroutines may never get resumed.
Maybe for some cases it makes sense to interleave new tasks with old tasks? I think wait_for_ready_callbacks should only yield new tasks, and another method should yield old ones. Custom executors should be responsible for implementing their own old-vs-new task strategy.


Service callbacks cannot be coroutines. (not impossible; haven't figured out a clean implementation).


Executor yields a Task instance

Task class hides the difference between a normal function and a coroutine from an executor
Task done callbacks get executed in series after the original callback/coroutine finishes

Task is greedy and executes as many done callbacks as it can, pausing only if one is a coroutine that yields.
asyncio.Task done callbacks get scheduled in the event loop, but this would be a problem in rclpy because it could mean another rcl_wait before executing a done callback.


Not using asyncio.Task because it is not thread safe, and it expects a reference to an asyncio event loop


Does not yet have a Future class

asyncio.Future is await-able but not thread safe and expects an event loop reference (though partially works without it)
concurrent.futures.Future is thread safe but not await-able (Maybe could be subclassed for this)
In asyncio.Task is a subclass of future, so maybe a Task could be it's own future too?



connects to #123",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,135,2017-10-30T23:25:22Z,2018-01-04T16:19:53Z,2018-01-04T16:20:01Z,CLOSED,False,1851,687,23,https://github.com/sloretz,[WIP] Futures/coroutines for services,31,[],https://github.com/ros2/rclpy/pull/135,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/135#issuecomment-355326081,"Note:Ignore this PR. A lot of it has already been split into separate pull requests. I'll close this when there is nothing left to split.
This is part of service feature parity.  It is not ready for review, but feedback is welcome if you can tolerate the chaotic writing below. Once #127 is merged this will need to be rebased onto master (omitting d980051).
Futures are a way to support multiple simultaneous client requests. Coroutines are a way to support futures inside of callbacks in an executor. Futures need a task running in parallel to update the result. A task can get to the executor via

a callback in the executor calling await future

Future.__await__ can invoke the task, and yield if the result is not ready yet.
Callback itself must be a coroutine (i.e. async def)


code outside giving the future to the executor directly

Add an equivalent of rclcpp::Executor::spin_until_future_complete(future)

In asyncio everything has a reference to the event loop so adding a task is easy, but not everything has a reference to the executor in rclpy. One possibility is a future having a reference to a task that needs to be executed to complete it. spin_until_future_complete could add that task to the executor.





Current state:

Added executor support for coroutines

async def/await only. Does not support generator/yield from coroutines (but it could)
executor wait_for_ready_callbacks yields new callbacks first, then old coroutines that yielded the last time they were run.

Requires an executor to run the iterator returned from wait_for_ready_callbacks until StopIteration or old coroutines may never get resumed.
Maybe for some cases it makes sense to interleave new tasks with old tasks? I think wait_for_ready_callbacks should only yield new tasks, and another method should yield old ones. Custom executors should be responsible for implementing their own old-vs-new task strategy.


Service callbacks cannot be coroutines. (not impossible; haven't figured out a clean implementation).


Executor yields a Task instance

Task class hides the difference between a normal function and a coroutine from an executor
Task done callbacks get executed in series after the original callback/coroutine finishes

Task is greedy and executes as many done callbacks as it can, pausing only if one is a coroutine that yields.
asyncio.Task done callbacks get scheduled in the event loop, but this would be a problem in rclpy because it could mean another rcl_wait before executing a done callback.


Not using asyncio.Task because it is not thread safe, and it expects a reference to an asyncio event loop


Does not yet have a Future class

asyncio.Future is await-able but not thread safe and expects an event loop reference (though partially works without it)
concurrent.futures.Future is thread safe but not await-able (Maybe could be subclassed for this)
In asyncio.Task is a subclass of future, so maybe a Task could be it's own future too?



connects to #123",Closing since it was split with the wait set refactor in #140 and the future/coroutine support in #166.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,137,2017-10-31T16:42:05Z,2017-10-31T19:16:04Z,2017-11-01T19:32:18Z,MERGED,True,1,1,1,https://github.com/dhood,Fix incorrect reference to service instead of pyservice,1,[],https://github.com/ros2/rclpy/pull/137,https://github.com/dhood,1,https://github.com/ros2/rclpy/pull/137,"Fixes #136
Standard CI:

Linux 
Linux-aarch64 
macOS 
Windows 

Windows Debug retest-until-fail 10 on rclpy:","Fixes #136
Standard CI:

Linux 
Linux-aarch64 
macOS 
Windows 

Windows Debug retest-until-fail 10 on rclpy:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,138,2017-11-01T19:32:07Z,2017-11-08T22:09:45Z,2017-11-08T22:09:50Z,MERGED,True,32,38,1,https://github.com/sloretz,Free memory when things don't go as planned,1,[],https://github.com/ros2/rclpy/pull/138,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/138,"Follow up to comments on #137

Reverted moving of the PyCapsule creation to eliminate some Py_DECREF()
Added PyMem_Free calls to failure cases (sometimes moving code down to reduce the number of places where this is called)

CI

Linux 
Linux-aarch64 
macOS 
Windows","Follow up to comments on #137

Reverted moving of the PyCapsule creation to eliminate some Py_DECREF()
Added PyMem_Free calls to failure cases (sometimes moving code down to reduce the number of places where this is called)

CI

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,140,2017-11-10T00:04:44Z,2018-03-08T22:48:56Z,2018-03-08T22:49:09Z,CLOSED,False,1175,527,12,https://github.com/sloretz,Executor bug fixes and WaitSet refactor,19,[],https://github.com/ros2/rclpy/pull/140,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/140,"This PR is split from #127. It has performance improvements to the executor that get the 1kHz timer test to pass consistently. If you've already reviewed #127 the new changes are:

Implemented WaitSet class as a cpython extension

Executor updated to use it


Moved sigint handler to a library for sharing between _rclpy and _rclpy_wait_set

Changes that were already in #127

wait_for_callbacks refactored readability + performance
Fixed bug where wait_for_callbacks could yield the wrong node
Removed underscores from imported names
added utilty timeout_sec_to_nsec
SingleThreadedExecutor and MultiThreadedExecutor reuse the iterator from wait_for_callbacks over multiple spin_once calls

CI

Linux 
Linux-aarch64 
macOS 
Windows","This PR is split from #127. It has performance improvements to the executor that get the 1kHz timer test to pass consistently. If you've already reviewed #127 the new changes are:

Implemented WaitSet class as a cpython extension

Executor updated to use it


Moved sigint handler to a library for sharing between _rclpy and _rclpy_wait_set

Changes that were already in #127

wait_for_callbacks refactored readability + performance
Fixed bug where wait_for_callbacks could yield the wrong node
Removed underscores from imported names
added utilty timeout_sec_to_nsec
SingleThreadedExecutor and MultiThreadedExecutor reuse the iterator from wait_for_callbacks over multiple spin_once calls

CI

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,140,2017-11-10T00:04:44Z,2018-03-08T22:48:56Z,2018-03-08T22:49:09Z,CLOSED,False,1175,527,12,https://github.com/sloretz,Executor bug fixes and WaitSet refactor,19,[],https://github.com/ros2/rclpy/pull/140,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/140#issuecomment-369689291,"This PR is split from #127. It has performance improvements to the executor that get the 1kHz timer test to pass consistently. If you've already reviewed #127 the new changes are:

Implemented WaitSet class as a cpython extension

Executor updated to use it


Moved sigint handler to a library for sharing between _rclpy and _rclpy_wait_set

Changes that were already in #127

wait_for_callbacks refactored readability + performance
Fixed bug where wait_for_callbacks could yield the wrong node
Removed underscores from imported names
added utilty timeout_sec_to_nsec
SingleThreadedExecutor and MultiThreadedExecutor reuse the iterator from wait_for_callbacks over multiple spin_once calls

CI

Linux 
Linux-aarch64 
macOS 
Windows","@sloretz Will this PR be replaced by favor of https://github.com/ros2/rclpy/pull/173/files when we switch to pybind11?
Are all the changes you want to the waitset part of this other PR or should this branch be kept?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,140,2017-11-10T00:04:44Z,2018-03-08T22:48:56Z,2018-03-08T22:49:09Z,CLOSED,False,1175,527,12,https://github.com/sloretz,Executor bug fixes and WaitSet refactor,19,[],https://github.com/ros2/rclpy/pull/140,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/140#issuecomment-371651867,"This PR is split from #127. It has performance improvements to the executor that get the 1kHz timer test to pass consistently. If you've already reviewed #127 the new changes are:

Implemented WaitSet class as a cpython extension

Executor updated to use it


Moved sigint handler to a library for sharing between _rclpy and _rclpy_wait_set

Changes that were already in #127

wait_for_callbacks refactored readability + performance
Fixed bug where wait_for_callbacks could yield the wrong node
Removed underscores from imported names
added utilty timeout_sec_to_nsec
SingleThreadedExecutor and MultiThreadedExecutor reuse the iterator from wait_for_callbacks over multiple spin_once calls

CI

Linux 
Linux-aarch64 
macOS 
Windows","@mikaelarguedas There is a little bit of code in here that might make it to a future PR, but most of the code here has already made it or will be replaced by a switch to pybind11. The code worth saving is in a fork, so I'll close this and delete the branch.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,141,2017-11-13T06:06:17Z,2017-11-13T19:36:20Z,2017-11-13T19:36:21Z,CLOSED,False,6,3,1,https://github.com/minggangw,Reset the error when rcl_take_response failed.,1,[],https://github.com/ros2/rclpy/pull/141,https://github.com/minggangw,1,https://github.com/ros2/rclpy/pull/141,[edit dhood]: connect to #142,[edit dhood]: connect to #142,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,141,2017-11-13T06:06:17Z,2017-11-13T19:36:20Z,2017-11-13T19:36:21Z,CLOSED,False,6,3,1,https://github.com/minggangw,Reset the error when rcl_take_response failed.,1,[],https://github.com/ros2/rclpy/pull/141,https://github.com/dhood,2,https://github.com/ros2/rclpy/pull/141#issuecomment-344032668,[edit dhood]: connect to #142,"Thank you for the patch @minggangw. Actually rcl_take_response can return RCL_RET_CLIENT_TAKE_FAILED if there was nothing to take, and we don't consider this an error state. Because of that I will close this PR as with ros2/rclcpp#396
Looking at this code, however, it seems that this section is missing an equivalent of https://github.com/ros2/rclcpp/pull/373/files in order to check the correct error message. If you have been seeing an error output when you didn't expect it, it may have been caused by that bug. The fix has been proposed in #143",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,143,2017-11-13T19:35:16Z,2017-11-13T22:16:48Z,2017-11-14T00:00:09Z,MERGED,True,1,1,1,https://github.com/dhood,"Check for the client error code, not server",1,[],https://github.com/ros2/rclpy/pull/143,https://github.com/dhood,1,https://github.com/ros2/rclpy/pull/143,"Equivalent of ros2/rclcpp#373

Linux 
Linux-aarch64 
macOS 
Windows","Equivalent of ros2/rclcpp#373

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,143,2017-11-13T19:35:16Z,2017-11-13T22:16:48Z,2017-11-14T00:00:09Z,MERGED,True,1,1,1,https://github.com/dhood,"Check for the client error code, not server",1,[],https://github.com/ros2/rclpy/pull/143,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/143#issuecomment-344100002,"Equivalent of ros2/rclcpp#373

Linux 
Linux-aarch64 
macOS 
Windows",Should this close #142?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,144,2017-11-13T19:41:49Z,2017-11-13T21:42:44Z,2017-11-13T21:42:47Z,MERGED,True,2,2,1,https://github.com/dhood, Relax the tolerance on throttle timing,1,[],https://github.com/ros2/rclpy/pull/144,https://github.com/dhood,1,https://github.com/ros2/rclpy/pull/144,"Too strict on ARM debug repeated: http://ci.ros2.org/view/nightly/job/nightly_linux-aarch64_debug/267/
Repeating rclpy tests (manually excluding the flaky test_timer.py) 50 times on ARM debug:","Too strict on ARM debug repeated: http://ci.ros2.org/view/nightly/job/nightly_linux-aarch64_debug/267/
Repeating rclpy tests (manually excluding the flaky test_timer.py) 50 times on ARM debug:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,145,2017-11-14T00:00:57Z,2017-11-14T01:35:20Z,2017-11-14T01:35:24Z,MERGED,True,4,2,2,https://github.com/dirk-thomas,use ament_cmake_pytest instead of ament_cmake_nose,1,[],https://github.com/ros2/rclpy/pull/145,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/145,Connect to ament/ament_cmake#115.,Connect to ament/ament_cmake#115.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,146,2017-11-14T19:21:29Z,2017-11-14T21:01:37Z,2017-11-14T21:01:42Z,MERGED,True,17,3,1,https://github.com/dhood,Relax the tolerance on throttle + skipfirst timing,2,[],https://github.com/ros2/rclpy/pull/146,https://github.com/dhood,1,https://github.com/ros2/rclpy/pull/146,"Timing was too strict on ARM: http://ci.ros2.org/job/ci_linux-aarch64/740/testReport/junit/rclpy.src.ros2.rclpy.rclpy.test.test_logging/TestLogging/test_log_skip_first_throttle/
followup of #144
also added comments to explain the expected output of the throttle tests
CI ARM (not repeated):","Timing was too strict on ARM: http://ci.ros2.org/job/ci_linux-aarch64/740/testReport/junit/rclpy.src.ros2.rclpy.rclpy.test.test_logging/TestLogging/test_log_skip_first_throttle/
followup of #144
also added comments to explain the expected output of the throttle tests
CI ARM (not repeated):",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,147,2017-11-14T19:27:39Z,2017-11-15T04:11:20Z,2017-11-15T04:11:22Z,MERGED,True,73,73,7,https://github.com/dirk-thomas,avoid custom working directory,1,['in review'],https://github.com/ros2/rclpy/pull/147,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/147,"Follow up of ament/ament_cmake#116 (comment)
See http://ci.ros2.org/job/ci_linux/3522/testReport/ with the ""nicer"" grouping.

Linux 
Linux-aarch64 
macOS 
Windows 

Ready for review.","Follow up of ament/ament_cmake#116 (comment)
See http://ci.ros2.org/job/ci_linux/3522/testReport/ with the ""nicer"" grouping.

Linux 
Linux-aarch64 
macOS 
Windows 

Ready for review.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,147,2017-11-14T19:27:39Z,2017-11-15T04:11:20Z,2017-11-15T04:11:22Z,MERGED,True,73,73,7,https://github.com/dirk-thomas,avoid custom working directory,1,['in review'],https://github.com/ros2/rclpy/pull/147,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/147#issuecomment-344371046,"Follow up of ament/ament_cmake#116 (comment)
See http://ci.ros2.org/job/ci_linux/3522/testReport/ with the ""nicer"" grouping.

Linux 
Linux-aarch64 
macOS 
Windows 

Ready for review.","I think I missed something here. Isnt the grouping exactly the same as in http://ci.ros2.org/job/ci_linux/3515/testReport/ ?
On the bright side I can now access the test results for all these tests so that's the most important improvement 👍",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,147,2017-11-14T19:27:39Z,2017-11-15T04:11:20Z,2017-11-15T04:11:22Z,MERGED,True,73,73,7,https://github.com/dirk-thomas,avoid custom working directory,1,['in review'],https://github.com/ros2/rclpy/pull/147,https://github.com/dirk-thomas,3,https://github.com/ros2/rclpy/pull/147#issuecomment-344371754,"Follow up of ament/ament_cmake#116 (comment)
See http://ci.ros2.org/job/ci_linux/3522/testReport/ with the ""nicer"" grouping.

Linux 
Linux-aarch64 
macOS 
Windows 

Ready for review.","I think I missed something here. Isnt the grouping exactly the same as in http://ci.ros2.org/job/ci_linux/3515/testReport/ ?

The old test report lists the tests with rclpy.src.ros2.rclpy.rclpy.test* while the new one lists them as rclpy.test*.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,147,2017-11-14T19:27:39Z,2017-11-15T04:11:20Z,2017-11-15T04:11:22Z,MERGED,True,73,73,7,https://github.com/dirk-thomas,avoid custom working directory,1,['in review'],https://github.com/ros2/rclpy/pull/147,https://github.com/mikaelarguedas,4,https://github.com/ros2/rclpy/pull/147#issuecomment-344373771,"Follow up of ament/ament_cmake#116 (comment)
See http://ci.ros2.org/job/ci_linux/3522/testReport/ with the ""nicer"" grouping.

Linux 
Linux-aarch64 
macOS 
Windows 

Ready for review.","The old test report lists the tests with rclpy.src.ros2.rclpy.rclpy.test* while the new one lists them as rclpy.test*.

Oh yeah my bad, I was expecting all of them to be under a single rclpy folder and I just compared the number of folders and not the names",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,147,2017-11-14T19:27:39Z,2017-11-15T04:11:20Z,2017-11-15T04:11:22Z,MERGED,True,73,73,7,https://github.com/dirk-thomas,avoid custom working directory,1,['in review'],https://github.com/ros2/rclpy/pull/147,https://github.com/mikaelarguedas,5,https://github.com/ros2/rclpy/pull/147#issuecomment-344449314,"Follow up of ament/ament_cmake#116 (comment)
See http://ci.ros2.org/job/ci_linux/3522/testReport/ with the ""nicer"" grouping.

Linux 
Linux-aarch64 
macOS 
Windows 

Ready for review.",This seems to have a warning on windows. But Jenkins displays this job weirdly and when you click on the warning it brings you to a page saying 0 warnings o_O,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,147,2017-11-14T19:27:39Z,2017-11-15T04:11:20Z,2017-11-15T04:11:22Z,MERGED,True,73,73,7,https://github.com/dirk-thomas,avoid custom working directory,1,['in review'],https://github.com/ros2/rclpy/pull/147,https://github.com/dirk-thomas,6,https://github.com/ros2/rclpy/pull/147#issuecomment-344480497,"Follow up of ament/ament_cmake#116 (comment)
See http://ci.ros2.org/job/ci_linux/3522/testReport/ with the ""nicer"" grouping.

Linux 
Linux-aarch64 
macOS 
Windows 

Ready for review.",A retriggered Windows build looks fine:,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,148,2017-11-15T02:18:44Z,2017-11-22T00:08:34Z,2017-11-22T00:08:37Z,MERGED,True,15,0,3,https://github.com/dhood,Give nodes a logger,4,['in review'],https://github.com/ros2/rclpy/pull/148,https://github.com/dhood,1,https://github.com/ros2/rclpy/pull/148,Minimum required to switch demos to using node loggers: logger names are not using namespaces at the moment nor calling to rcl to get their logger name.,Minimum required to switch demos to using node loggers: logger names are not using namespaces at the moment nor calling to rcl to get their logger name.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,148,2017-11-15T02:18:44Z,2017-11-22T00:08:34Z,2017-11-22T00:08:37Z,MERGED,True,15,0,3,https://github.com/dhood,Give nodes a logger,4,['in review'],https://github.com/ros2/rclpy/pull/148,https://github.com/dhood,2,https://github.com/ros2/rclpy/pull/148#issuecomment-344781872,Minimum required to switch demos to using node loggers: logger names are not using namespaces at the moment nor calling to rcl to get their logger name.,"Please review this PR in combination with ros2/demos#190 to check that the usage is as expected. In particular, I opted for a get_logger method on the node as opposed to giving users access to the logger attribute (1) to match the other accessors, (2) in case we ever need to do something more complicated to retrieve the logger for the user.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,148,2017-11-15T02:18:44Z,2017-11-22T00:08:34Z,2017-11-22T00:08:37Z,MERGED,True,15,0,3,https://github.com/dhood,Give nodes a logger,4,['in review'],https://github.com/ros2/rclpy/pull/148,https://github.com/dhood,3,https://github.com/ros2/rclpy/pull/148#issuecomment-345043454,Minimum required to switch demos to using node loggers: logger names are not using namespaces at the moment nor calling to rcl to get their logger name.,"@ros2/team, following @sloretz's suggestion above, what do we think about:

accessing the node's logger as an attribute as opposed to via an accessor
updating node.get_name() and node.get_namespace() to match?

We can raise when users try to set the attributes. I checked the PRs that added the other getters (#70 and #86) and there wasn't a discussion about why accessors have been used",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,148,2017-11-15T02:18:44Z,2017-11-22T00:08:34Z,2017-11-22T00:08:37Z,MERGED,True,15,0,3,https://github.com/dhood,Give nodes a logger,4,['in review'],https://github.com/ros2/rclpy/pull/148,https://github.com/wjwwood,4,https://github.com/ros2/rclpy/pull/148#issuecomment-345043816,Minimum required to switch demos to using node loggers: logger names are not using namespaces at the moment nor calling to rcl to get their logger name.,"I don't have a problem with using properties rather than getters, but I only hesitate to avoid a difference with C++ where we cannot easily do that I think.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,148,2017-11-15T02:18:44Z,2017-11-22T00:08:34Z,2017-11-22T00:08:37Z,MERGED,True,15,0,3,https://github.com/dhood,Give nodes a logger,4,['in review'],https://github.com/ros2/rclpy/pull/148,https://github.com/clalancette,5,https://github.com/ros2/rclpy/pull/148#issuecomment-345085801,Minimum required to switch demos to using node loggers: logger names are not using namespaces at the moment nor calling to rcl to get their logger name.,"I'm for using properties, as it is more pythonic in general.  But I don't really have a strong opinion either way.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,148,2017-11-15T02:18:44Z,2017-11-22T00:08:34Z,2017-11-22T00:08:37Z,MERGED,True,15,0,3,https://github.com/dhood,Give nodes a logger,4,['in review'],https://github.com/ros2/rclpy/pull/148,https://github.com/dhood,6,https://github.com/ros2/rclpy/pull/148#issuecomment-345086588,Minimum required to switch demos to using node loggers: logger names are not using namespaces at the moment nor calling to rcl to get their logger name.,I suppose it could be a bit counter-intuitive if it looks like an attribute but then raises when users try to set it. It might be more user-friendly to just give them the getters without setters if we don't want users to try to modify the names/logger after creation. Does that influence your opinion from a user perspective @sloretz ?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,148,2017-11-15T02:18:44Z,2017-11-22T00:08:34Z,2017-11-22T00:08:37Z,MERGED,True,15,0,3,https://github.com/dhood,Give nodes a logger,4,['in review'],https://github.com/ros2/rclpy/pull/148,https://github.com/mikaelarguedas,7,https://github.com/ros2/rclpy/pull/148#issuecomment-345088348,Minimum required to switch demos to using node loggers: logger names are not using namespaces at the moment nor calling to rcl to get their logger name.,"May be related to the discussion (havent followed it)

  
    
      rclpy/rclpy/rclpy/node.py
    
    
        Lines 84 to 86
      in
      5c1b6e1
    
  
  
    

        
          
           @handle.setter 
        

        
          
           def handle(self, value): 
        

        
          
               raise AttributeError('handle cannot be modified after node creation')",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,148,2017-11-15T02:18:44Z,2017-11-22T00:08:34Z,2017-11-22T00:08:37Z,MERGED,True,15,0,3,https://github.com/dhood,Give nodes a logger,4,['in review'],https://github.com/ros2/rclpy/pull/148,https://github.com/sloretz,8,https://github.com/ros2/rclpy/pull/148#issuecomment-345091475,Minimum required to switch demos to using node loggers: logger names are not using namespaces at the moment nor calling to rcl to get their logger name.,@dhood On point 2 my preference isn't strong enough for me to say the existing code should be changed. I think it would be fine to leave it as get_logger to stay consistent with the existing code.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,148,2017-11-15T02:18:44Z,2017-11-22T00:08:34Z,2017-11-22T00:08:37Z,MERGED,True,15,0,3,https://github.com/dhood,Give nodes a logger,4,['in review'],https://github.com/ros2/rclpy/pull/148,https://github.com/dhood,9,https://github.com/ros2/rclpy/pull/148#issuecomment-345099192,Minimum required to switch demos to using node loggers: logger names are not using namespaces at the moment nor calling to rcl to get their logger name.,"OK it doesn't seem like we have a strong enough motivation to swap to attributes, while ""intuitiveness"", existing code and similarity with c++ slightly lean us towards using getters, so the conclusion I'm drawing is that we'll stick with get_logger in this PR",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,148,2017-11-15T02:18:44Z,2017-11-22T00:08:34Z,2017-11-22T00:08:37Z,MERGED,True,15,0,3,https://github.com/dhood,Give nodes a logger,4,['in review'],https://github.com/ros2/rclpy/pull/148,https://github.com/dhood,10,https://github.com/ros2/rclpy/pull/148#issuecomment-345786440,Minimum required to switch demos to using node loggers: logger names are not using namespaces at the moment nor calling to rcl to get their logger name.,"CI including changes in ros2/demos#190, will merge once comes back green

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,148,2017-11-15T02:18:44Z,2017-11-22T00:08:34Z,2017-11-22T00:08:37Z,MERGED,True,15,0,3,https://github.com/dhood,Give nodes a logger,4,['in review'],https://github.com/ros2/rclpy/pull/148,https://github.com/mikaelarguedas,11,https://github.com/ros2/rclpy/pull/148#issuecomment-345791391,Minimum required to switch demos to using node loggers: logger names are not using namespaces at the moment nor calling to rcl to get their logger name.,"updating node.get_name() and node.get_namespace() to match?

name and namespace are not stored in Python land (not slots or attributes of the node class) so we need getters for them as we get them from rcl.
If we want to take the same approach here we would never store the logger in python and get it from rcl everytime a user want to access it (which is totally fine IMO).
If it's stored as an attribute like in this PR there is nothing preventing users from getting and setting it as any other attribute right ?
Not saying we should change it here, I'm just wondering where we expect this to be stored in the future and if the decision is made only for being consistent with rclcpp and that it'll be inconsistent within rclpy only for the time being or if we chose to treat some attributes differently than others in rclpy for the long-term.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,148,2017-11-15T02:18:44Z,2017-11-22T00:08:34Z,2017-11-22T00:08:37Z,MERGED,True,15,0,3,https://github.com/dhood,Give nodes a logger,4,['in review'],https://github.com/ros2/rclpy/pull/148,https://github.com/dhood,12,https://github.com/ros2/rclpy/pull/148#issuecomment-345816123,Minimum required to switch demos to using node loggers: logger names are not using namespaces at the moment nor calling to rcl to get their logger name.,"name and namespace are not stored in Python land (not slots or attributes of the node class) so we need getters for them as we get them from rcl.

They wouldn't need to be stored in Python. If we swap them to properties as with 
  
    
      rclpy/rclpy/rclpy/node.py
    
    
         Line 82
      in
      5c1b6e1
    
  
  
    

        
          
           return self._handle 
        
    
  

 we could have the accessor call through to rcl, and then we could remove the getters.

If we want to take the same approach here we would never store the logger in python and get it from rcl everytime a user want to access it

Python has a notion of logger objects where rcl doesn't, so in this case it is appropriate for us to store the logger object associated with the node (this is what I envision for both short-term and long-term)

If it's stored as an attribute like in this PR there is nothing preventing users from getting and setting it as any other attribute right ?

That's correct, but attributes with underscores are not considered public",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,148,2017-11-15T02:18:44Z,2017-11-22T00:08:34Z,2017-11-22T00:08:37Z,MERGED,True,15,0,3,https://github.com/dhood,Give nodes a logger,4,['in review'],https://github.com/ros2/rclpy/pull/148,https://github.com/dhood,13,https://github.com/ros2/rclpy/pull/148#issuecomment-345853661,Minimum required to switch demos to using node loggers: logger names are not using namespaces at the moment nor calling to rcl to get their logger name.,"Edit (commenting so notification gets sent): ""Python has a notion of logger objects where rcl doesn't"" -> ""rclpy has a notion of logger objects"" (as of #102)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,149,2017-11-17T03:04:00Z,2017-11-17T17:40:52Z,2018-07-18T02:03:04Z,MERGED,True,12,13,1,https://github.com/dirk-thomas,keep consistency when destroying node raises an exception,1,[],https://github.com/ros2/rclpy/pull/149,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/149,Fixes the bad behavior described in ros2/ros2cli#62 but not the actual case of the exception.,Fixes the bad behavior described in ros2/ros2cli#62 but not the actual case of the exception.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,149,2017-11-17T03:04:00Z,2017-11-17T17:40:52Z,2018-07-18T02:03:04Z,MERGED,True,12,13,1,https://github.com/dirk-thomas,keep consistency when destroying node raises an exception,1,[],https://github.com/ros2/rclpy/pull/149,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/149#issuecomment-345132406,Fixes the bad behavior described in ros2/ros2cli#62 but not the actual case of the exception.,"@sloretz FYI since you modified the logic in #129 from ""destroying and removing elements one by one"" to ""destroy all elements and empty the list afterwards"".",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,150,2017-11-17T07:51:17Z,2017-11-17T18:46:59Z,2017-11-17T19:19:31Z,MERGED,True,2,8,1,https://github.com/mikaelarguedas,reenable 100Hz timer test on windows,1,[],https://github.com/ros2/rclpy/pull/150,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/150,"now that we have better time resolution on windows these tests can be restored.
Unfortunately the 1kHz timer tests still fail and have to stay disabled.

Windows (rclpy tests ranusing --retest-until-fail 50)","now that we have better time resolution on windows these tests can be restored.
Unfortunately the 1kHz timer tests still fail and have to stay disabled.

Windows (rclpy tests ranusing --retest-until-fail 50)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,150,2017-11-17T07:51:17Z,2017-11-17T18:46:59Z,2017-11-17T19:19:31Z,MERGED,True,2,8,1,https://github.com/mikaelarguedas,reenable 100Hz timer test on windows,1,[],https://github.com/ros2/rclpy/pull/150,https://github.com/serge-nikulin,2,https://github.com/ros2/rclpy/pull/150#issuecomment-345236891,"now that we have better time resolution on windows these tests can be restored.
Unfortunately the 1kHz timer tests still fail and have to stay disabled.

Windows (rclpy tests ranusing --retest-until-fail 50)","Unfortunately the 1kHz timer tests still fail and have to stay disabled.

Have you enabled 1KHz switching in Windows from the default 15ms or so?
AFAIK, MS has introduced this feature for gamers and it might help you.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,150,2017-11-17T07:51:17Z,2017-11-17T18:46:59Z,2017-11-17T19:19:31Z,MERGED,True,2,8,1,https://github.com/mikaelarguedas,reenable 100Hz timer test on windows,1,[],https://github.com/ros2/rclpy/pull/150,https://github.com/mikaelarguedas,3,https://github.com/ros2/rclpy/pull/150#issuecomment-345329796,"now that we have better time resolution on windows these tests can be restored.
Unfortunately the 1kHz timer tests still fail and have to stay disabled.

Windows (rclpy tests ranusing --retest-until-fail 50)","@serge-nikulin Thanks for the tip,
I don't think we changed anything explicitly. Though if the default resolution is 15.6ms I would expect our 100Hz tests to fail, at least sporadically. I'll merge this for now and post an update here when I find time to explore that lead.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,150,2017-11-17T07:51:17Z,2017-11-17T18:46:59Z,2017-11-17T19:19:31Z,MERGED,True,2,8,1,https://github.com/mikaelarguedas,reenable 100Hz timer test on windows,1,[],https://github.com/ros2/rclpy/pull/150,https://github.com/serge-nikulin,4,https://github.com/ros2/rclpy/pull/150#issuecomment-345332941,"now that we have better time resolution on windows these tests can be restored.
Unfortunately the 1kHz timer tests still fail and have to stay disabled.

Windows (rclpy tests ranusing --retest-until-fail 50)","See https://msdn.microsoft.com/en-us/library/windows/desktop/dd757624(v=vs.85).aspx.
Call timeBeginPeriod  at the startup time and don't bother to call timeEndPeriod at all.
A lot of airport security equipment around the world works in this mode for many years, non-stop, 24/365 :)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,150,2017-11-17T07:51:17Z,2017-11-17T18:46:59Z,2017-11-17T19:19:31Z,MERGED,True,2,8,1,https://github.com/mikaelarguedas,reenable 100Hz timer test on windows,1,[],https://github.com/ros2/rclpy/pull/150,https://github.com/mikaelarguedas,5,https://github.com/ros2/rclpy/pull/150#issuecomment-345340030,"now that we have better time resolution on windows these tests can be restored.
Unfortunately the 1kHz timer tests still fail and have to stay disabled.

Windows (rclpy tests ranusing --retest-until-fail 50)","Good to know, thanks for the pointer",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,151,2017-11-20T04:02:54Z,2017-11-21T01:10:52Z,2017-11-21T01:10:52Z,MERGED,True,1,1,1,https://github.com/gaoethan,Avoid unexpected free to null,2,[],https://github.com/ros2/rclpy/pull/151,https://github.com/gaoethan,1,https://github.com/ros2/rclpy/pull/151,"the expanded_topic is possible to be NULL from
rcl_expand_topic_name() and then the free is problematic
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com","the expanded_topic is possible to be NULL from
rcl_expand_topic_name() and then the free is problematic
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,151,2017-11-20T04:02:54Z,2017-11-21T01:10:52Z,2017-11-21T01:10:52Z,MERGED,True,1,1,1,https://github.com/gaoethan,Avoid unexpected free to null,2,[],https://github.com/ros2/rclpy/pull/151,https://github.com/gaoethan,2,https://github.com/ros2/rclpy/pull/151#issuecomment-345655377,"the expanded_topic is possible to be NULL from
rcl_expand_topic_name() and then the free is problematic
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com","@tfoote thanks for your comments, actually, I'm not sure it's a NOP on all platform. :) and It makes sense to unify the checking in the deallocate if it's decided to be necessary to avoid NULL free. anyway, I'm open to that and let's conclude it. thanks.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,151,2017-11-20T04:02:54Z,2017-11-21T01:10:52Z,2017-11-21T01:10:52Z,MERGED,True,1,1,1,https://github.com/gaoethan,Avoid unexpected free to null,2,[],https://github.com/ros2/rclpy/pull/151,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/151#issuecomment-345841247,"the expanded_topic is possible to be NULL from
rcl_expand_topic_name() and then the free is problematic
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com","I just updated it to just set expanded_topic to NULL, in the name of defensive programming.  I'm going to run CI against this and then, assuming that passes, merge.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,151,2017-11-20T04:02:54Z,2017-11-21T01:10:52Z,2017-11-21T01:10:52Z,MERGED,True,1,1,1,https://github.com/gaoethan,Avoid unexpected free to null,2,[],https://github.com/ros2/rclpy/pull/151,https://github.com/clalancette,4,https://github.com/ros2/rclpy/pull/151#issuecomment-345841858,"the expanded_topic is possible to be NULL from
rcl_expand_topic_name() and then the free is problematic
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,152,2017-11-22T22:24:32Z,2017-11-27T21:30:02Z,2017-11-27T21:30:07Z,MERGED,True,15,15,1,https://github.com/mikaelarguedas,waitset -> wait_set,2,[],https://github.com/ros2/rclpy/pull/152,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/152,connects to ros2/rmw#131,connects to ros2/rmw#131,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,154,2017-11-25T00:47:59Z,2017-11-28T16:57:33Z,2017-11-28T16:57:38Z,MERGED,True,12,7,1,https://github.com/dhood,Only check logger filters if severity is sufficient,2,[],https://github.com/ros2/rclpy/pull/154,https://github.com/dhood,1,https://github.com/ros2/rclpy/pull/154,"connects to ros2/rcutils#75
no test for this has been added because there isn't currently support in rclpy for the equivalent of the ""expression""/""function"" filters that rcutils supports","connects to ros2/rcutils#75
no test for this has been added because there isn't currently support in rclpy for the equivalent of the ""expression""/""function"" filters that rcutils supports",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,155,2017-11-27T22:02:16Z,2018-03-16T00:00:50Z,2018-03-16T00:36:57Z,CLOSED,False,0,20,1,https://github.com/BrannonKing,extension should not free the passed-in QoS,3,['requires-changes'],https://github.com/ros2/rclpy/pull/155,https://github.com/BrannonKing,1,https://github.com/ros2/rclpy/pull/155,We have never seen this cause a problem; it just didn't seem right to free a variable passed in by the user. There could be a problem in some convoluted situation where QoS is reused in a second publisher after a period of time.,We have never seen this cause a problem; it just didn't seem right to free a variable passed in by the user. There could be a problem in some convoluted situation where QoS is reused in a second publisher after a period of time.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,155,2017-11-27T22:02:16Z,2018-03-16T00:00:50Z,2018-03-16T00:36:57Z,CLOSED,False,0,20,1,https://github.com/BrannonKing,extension should not free the passed-in QoS,3,['requires-changes'],https://github.com/ros2/rclpy/pull/155,https://github.com/BrannonKing,2,https://github.com/ros2/rclpy/pull/155#issuecomment-348255261,We have never seen this cause a problem; it just didn't seem right to free a variable passed in by the user. There could be a problem in some convoluted situation where QoS is reused in a second publisher after a period of time.,"@sloretz , I can't understand what you're asking for. You're saying that the python wrapper for rmw_qos_profile_t doesn't clean up the underlying object properly as part of its finalization? That we should use the destructor parameter on PyCapsule_New to clean this up? That sounds like a great plan to me. However, most of those extension methods call PyCapsule_New in a similar pattern where they wrap newly allocated memory without doing anything in that method to ensure said memory is freed in the future. Are they really all wrong? They all leak?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,155,2017-11-27T22:02:16Z,2018-03-16T00:00:50Z,2018-03-16T00:36:57Z,CLOSED,False,0,20,1,https://github.com/BrannonKing,extension should not free the passed-in QoS,3,['requires-changes'],https://github.com/ros2/rclpy/pull/155,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/155#issuecomment-348298901,We have never seen this cause a problem; it just didn't seem right to free a variable passed in by the user. There could be a problem in some convoluted situation where QoS is reused in a second publisher after a period of time.,"@BrannonKing  Yup, that's exactly what I'm asking for. I think only the qos profile PyCapsule can safely use the destructor parameter at the moment.
The other PyCapsule can't make use of the destructor right now.  Instead of using python's garbage collector the other PyCapsule rely on python code calling rclpy_destroy_entity or rclpy_destroy_node_entity on them. This happens in the methods node.destroy_*(). Those capsules do leak memory if the appropriate destroy method is not called on them.
Using the node as an example, if rcl_shutdown is called before rcl_node_fini then rcl will error because the instance id doesn't match. It then returns without freeing memory used by the node. This means rcl_node_fini must be called before rcl_shutdown. If the node PyCapsule called fini in its destructor then it would be left up to python's garbage collector. It may not get around collecting the PyCapsule until after a user has called rclpy.shutdown().
I can think of a way to make the rest of the PyCapsule be free'd by the python garbage collector, but it would mean getting rid of rclpy.init() and rclpy.shutdown(). Say the _rclpy module called rcl_init() when it is imported, and  rcl_shutdown() when it is unloaded. The module would need to be incref'd when one of the other PyCapsule is created and decref'd it when they're collected. It's a little more complicated because node entities (clients, subscribers, etc) would need to incref the node when they're created and decref it when they're collected too.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,155,2017-11-27T22:02:16Z,2018-03-16T00:00:50Z,2018-03-16T00:36:57Z,CLOSED,False,0,20,1,https://github.com/BrannonKing,extension should not free the passed-in QoS,3,['requires-changes'],https://github.com/ros2/rclpy/pull/155,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/155#issuecomment-373460366,We have never seen this cause a problem; it just didn't seem right to free a variable passed in by the user. There could be a problem in some convoluted situation where QoS is reused in a second publisher after a period of time.,"Hi @BrannonKing, friendly ping. Are you still interested in working on this PR?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,155,2017-11-27T22:02:16Z,2018-03-16T00:00:50Z,2018-03-16T00:36:57Z,CLOSED,False,0,20,1,https://github.com/BrannonKing,extension should not free the passed-in QoS,3,['requires-changes'],https://github.com/ros2/rclpy/pull/155,https://github.com/BrannonKing,5,https://github.com/ros2/rclpy/pull/155#issuecomment-373465732,We have never seen this cause a problem; it just didn't seem right to free a variable passed in by the user. There could be a problem in some convoluted situation where QoS is reused in a second publisher after a period of time.,"@sloretz , I don't feel confident in my ability to accomplish all that you were asking for on this. I don't at present have sufficient understanding of Python's API to make the necessary modifications. (I recently used pybind11 for a project, but it, fortunately, kept me from needing to learn the details of Python's internals.)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,155,2017-11-27T22:02:16Z,2018-03-16T00:00:50Z,2018-03-16T00:36:57Z,CLOSED,False,0,20,1,https://github.com/BrannonKing,extension should not free the passed-in QoS,3,['requires-changes'],https://github.com/ros2/rclpy/pull/155,https://github.com/sloretz,6,https://github.com/ros2/rclpy/pull/155#issuecomment-373560483,We have never seen this cause a problem; it just didn't seem right to free a variable passed in by the user. There could be a problem in some convoluted situation where QoS is reused in a second publisher after a period of time.,"@BrannonKing Ok, thanks for the PR! I'll close it for now.
We are also thinking about using pybind11 for rclpy. Just curious, what version of pybind11 are you using?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,155,2017-11-27T22:02:16Z,2018-03-16T00:00:50Z,2018-03-16T00:36:57Z,CLOSED,False,0,20,1,https://github.com/BrannonKing,extension should not free the passed-in QoS,3,['requires-changes'],https://github.com/ros2/rclpy/pull/155,https://github.com/BrannonKing,7,https://github.com/ros2/rclpy/pull/155#issuecomment-373566504,We have never seen this cause a problem; it just didn't seem right to free a variable passed in by the user. There could be a problem in some convoluted situation where QoS is reused in a second publisher after a period of time.,"Yes, use pybind11! It's a sweet deal. I was just using a snapshot from their master close to their 2.2.1 release date. I had no issues with it.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,157,2017-11-28T07:14:58Z,2018-01-08T19:01:52Z,2018-01-08T19:01:53Z,MERGED,True,4,20,1,https://github.com/gaoethan,adapt to the NULL removal from rmw result validation string,3,[],https://github.com/ros2/rclpy/pull/157,https://github.com/gaoethan,1,https://github.com/ros2/rclpy/pull/157,"Change to align to the update of APIs rmw_*_validation_result_string()
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com
Connects to ros2/rmw#130","Change to align to the update of APIs rmw_*_validation_result_string()
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com
Connects to ros2/rmw#130",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,157,2017-11-28T07:14:58Z,2018-01-08T19:01:52Z,2018-01-08T19:01:53Z,MERGED,True,4,20,1,https://github.com/gaoethan,adapt to the NULL removal from rmw result validation string,3,[],https://github.com/ros2/rclpy/pull/157,https://github.com/gaoethan,2,https://github.com/ros2/rclpy/pull/157#issuecomment-347435003,"Change to align to the update of APIs rmw_*_validation_result_string()
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com
Connects to ros2/rmw#130",This PR relates to PR: #ros2/rmw#130,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,157,2017-11-28T07:14:58Z,2018-01-08T19:01:52Z,2018-01-08T19:01:53Z,MERGED,True,4,20,1,https://github.com/gaoethan,adapt to the NULL removal from rmw result validation string,3,[],https://github.com/ros2/rclpy/pull/157,https://github.com/gaoethan,3,https://github.com/ros2/rclpy/pull/157#issuecomment-349220067,"Change to align to the update of APIs rmw_*_validation_result_string()
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com
Connects to ros2/rmw#130","yes, I initially intend to show the specific validation message, but the error msg is returned from the final result_list, there is no need now, thanks for your comments.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,158,2017-11-28T19:23:06Z,2018-03-01T18:39:40Z,2018-03-01T18:39:45Z,CLOSED,False,4,4,2,https://github.com/mikaelarguedas,use ament cmake ros to honor BUILD_SHARED_LIBS cmake argument,1,[],https://github.com/ros2/rclpy/pull/158,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/158,"connects to ros2/ros2#306

Linux 
Linux-aarch64 
macOS 
Windows","connects to ros2/ros2#306

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,158,2017-11-28T19:23:06Z,2018-03-01T18:39:40Z,2018-03-01T18:39:45Z,CLOSED,False,4,4,2,https://github.com/mikaelarguedas,use ament cmake ros to honor BUILD_SHARED_LIBS cmake argument,1,[],https://github.com/ros2/rclpy/pull/158,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/158#issuecomment-369688403,"connects to ros2/ros2#306

Linux 
Linux-aarch64 
macOS 
Windows",Closing this as the python part of the stack cannot be static anyway,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,159,2017-11-28T23:05:14Z,2017-12-01T16:08:25Z,2017-12-01T16:08:31Z,MERGED,True,51,13,1,https://github.com/sloretz,Reuse ready callbacks generator,3,[],https://github.com/ros2/rclpy/pull/159,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/159,"This adds a wrapper around wait_for_ready_callbacks that reuses the callback generator when multiple things are ready. It avoids unnecessary wait list construction and waiting. It also prevents one callback (like a very fast timer) from starving other callbacks (similar to ros2/rclcpp#392).
Taken from #140 and improved upon.
CI (New run after fixing a merge conflict)

Linux 
Linux-aarch64 
macOS 
Windows","This adds a wrapper around wait_for_ready_callbacks that reuses the callback generator when multiple things are ready. It avoids unnecessary wait list construction and waiting. It also prevents one callback (like a very fast timer) from starving other callbacks (similar to ros2/rclcpp#392).
Taken from #140 and improved upon.
CI (New run after fixing a merge conflict)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,159,2017-11-28T23:05:14Z,2017-12-01T16:08:25Z,2017-12-01T16:08:31Z,MERGED,True,51,13,1,https://github.com/sloretz,Reuse ready callbacks generator,3,[],https://github.com/ros2/rclpy/pull/159,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/159#issuecomment-348351292,"This adds a wrapper around wait_for_ready_callbacks that reuses the callback generator when multiple things are ready. It avoids unnecessary wait list construction and waiting. It also prevents one callback (like a very fast timer) from starving other callbacks (similar to ros2/rclcpp#392).
Taken from #140 and improved upon.
CI (New run after fixing a merge conflict)

Linux 
Linux-aarch64 
macOS 
Windows","It also prevents one callback (like a very fast timer) from starving other callbacks (similar to ros2/rclcpp#392).

Does this new code have this property because we always process everything from the previous wait set before constructing a new one?  (I just want to make sure I understand)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,159,2017-11-28T23:05:14Z,2017-12-01T16:08:25Z,2017-12-01T16:08:31Z,MERGED,True,51,13,1,https://github.com/sloretz,Reuse ready callbacks generator,3,[],https://github.com/ros2/rclpy/pull/159,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/159#issuecomment-348351986,"This adds a wrapper around wait_for_ready_callbacks that reuses the callback generator when multiple things are ready. It avoids unnecessary wait list construction and waiting. It also prevents one callback (like a very fast timer) from starving other callbacks (similar to ros2/rclcpp#392).
Taken from #140 and improved upon.
CI (New run after fixing a merge conflict)

Linux 
Linux-aarch64 
macOS 
Windows","Does this new code have this property because we always process everything from the previous wait set before constructing a new one?

@clalancette Yup
Edit: Assuming of course that rmw_wait populates the wait set with everything that is ready, rather than returning just the first thing it sees that is ready.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,159,2017-11-28T23:05:14Z,2017-12-01T16:08:25Z,2017-12-01T16:08:31Z,MERGED,True,51,13,1,https://github.com/sloretz,Reuse ready callbacks generator,3,[],https://github.com/ros2/rclpy/pull/159,https://github.com/clalancette,4,https://github.com/ros2/rclpy/pull/159#issuecomment-348356945,"This adds a wrapper around wait_for_ready_callbacks that reuses the callback generator when multiple things are ready. It avoids unnecessary wait list construction and waiting. It also prevents one callback (like a very fast timer) from starving other callbacks (similar to ros2/rclcpp#392).
Taken from #140 and improved upon.
CI (New run after fixing a merge conflict)

Linux 
Linux-aarch64 
macOS 
Windows","The only concern I have is with the recursive nature of wait_for_ready_callbacks, and whether that recursion can go without bounds in some cases.  @sloretz thinks that the maximum we can go is one level deep, but he is doing a bit of research/playing around and will report back.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,159,2017-11-28T23:05:14Z,2017-12-01T16:08:25Z,2017-12-01T16:08:31Z,MERGED,True,51,13,1,https://github.com/sloretz,Reuse ready callbacks generator,3,[],https://github.com/ros2/rclpy/pull/159,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/159#issuecomment-348357586,"This adds a wrapper around wait_for_ready_callbacks that reuses the callback generator when multiple things are ready. It avoids unnecessary wait list construction and waiting. It also prevents one callback (like a very fast timer) from starving other callbacks (similar to ros2/rclcpp#392).
Taken from #140 and improved upon.
CI (New run after fixing a merge conflict)

Linux 
Linux-aarch64 
macOS 
Windows","@clalancette eliminated the recursion in b7fa6d6
CI

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,160,2017-11-28T23:39:00Z,2017-11-29T15:44:25Z,2017-11-29T15:44:27Z,MERGED,True,68,18,3,https://github.com/sloretz,Added timeout_sec_to_nsec utility,2,['in review'],https://github.com/ros2/rclpy/pull/160,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/160,"Taken from #140 / #127. It adds a utility for converting timeouts from seconds to nanoseconds for rcl_wait. Additionally executor timeouts now block if None or negative and are only non-blocking if the timeout is zero.
CI

Linux 
Linux-aarch64 
macOS 
Windows","Taken from #140 / #127. It adds a utility for converting timeouts from seconds to nanoseconds for rcl_wait. Additionally executor timeouts now block if None or negative and are only non-blocking if the timeout is zero.
CI

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,160,2017-11-28T23:39:00Z,2017-11-29T15:44:25Z,2017-11-29T15:44:27Z,MERGED,True,68,18,3,https://github.com/sloretz,Added timeout_sec_to_nsec utility,2,['in review'],https://github.com/ros2/rclpy/pull/160,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/160#issuecomment-347900669,"Taken from #140 / #127. It adds a utility for converting timeouts from seconds to nanoseconds for rcl_wait. Additionally executor timeouts now block if None or negative and are only non-blocking if the timeout is zero.
CI

Linux 
Linux-aarch64 
macOS 
Windows",OSX job failed because the node died. Jenkins auto-retriggered it and the second build succeeded: http://ci.ros2.org/job/ci_osx/2965/. I think this can be merged.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,161,2017-11-29T00:09:15Z,2017-11-29T20:11:46Z,2017-11-29T20:11:51Z,MERGED,True,139,0,3,https://github.com/sloretz,Add client.service_is_ready,5,[],https://github.com/ros2/rclpy/pull/161,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/161,"This adds a method service_is_ready to the client, same as rclcpp.
It also adds a temporary implementation of wait_for_service. It is not an acceptable implementation long term. Including it allows merging ros2/demos#182, ros2/examples#185, and ros2/system_tests#244.
CI (4th run with 111a4cb )

Linux 
Linux-aarch64  (Flaky 1kHz python timer tests failed).
macOS 
Windows","This adds a method service_is_ready to the client, same as rclcpp.
It also adds a temporary implementation of wait_for_service. It is not an acceptable implementation long term. Including it allows merging ros2/demos#182, ros2/examples#185, and ros2/system_tests#244.
CI (4th run with 111a4cb )

Linux 
Linux-aarch64  (Flaky 1kHz python timer tests failed).
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,161,2017-11-29T00:09:15Z,2017-11-29T20:11:46Z,2017-11-29T20:11:51Z,MERGED,True,139,0,3,https://github.com/sloretz,Add client.service_is_ready,5,[],https://github.com/ros2/rclpy/pull/161,https://github.com/dhood,2,https://github.com/ros2/rclpy/pull/161#issuecomment-347932692,"This adds a method service_is_ready to the client, same as rclcpp.
It also adds a temporary implementation of wait_for_service. It is not an acceptable implementation long term. Including it allows merging ros2/demos#182, ros2/examples#185, and ros2/system_tests#244.
CI (4th run with 111a4cb )

Linux 
Linux-aarch64  (Flaky 1kHz python timer tests failed).
macOS 
Windows","+1 for adding this functionality with an intermediate implementation, thanks @sloretz
Could we also cherry-pick the wait_for_service tests from https://github.com/ros2/rclpy/pull/127/files#diff-d6a24eb9c2461ebc379fb9280a9dbd4f, just with a higher time fudge?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,161,2017-11-29T00:09:15Z,2017-11-29T20:11:46Z,2017-11-29T20:11:51Z,MERGED,True,139,0,3,https://github.com/sloretz,Add client.service_is_ready,5,[],https://github.com/ros2/rclpy/pull/161,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/161#issuecomment-347939478,"This adds a method service_is_ready to the client, same as rclcpp.
It also adds a temporary implementation of wait_for_service. It is not an acceptable implementation long term. Including it allows merging ros2/demos#182, ros2/examples#185, and ros2/system_tests#244.
CI (4th run with 111a4cb )

Linux 
Linux-aarch64  (Flaky 1kHz python timer tests failed).
macOS 
Windows","@dhood I added the tests in 3a1c7da and retriggered CI.
Side note, the first windows CI failed because the node disconnected with java.nio.channels.ClosedChannelException; however, the master did not queue another build. Is that normal for windows nodes?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,161,2017-11-29T00:09:15Z,2017-11-29T20:11:46Z,2017-11-29T20:11:51Z,MERGED,True,139,0,3,https://github.com/sloretz,Add client.service_is_ready,5,[],https://github.com/ros2/rclpy/pull/161,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/161#issuecomment-347981574,"This adds a method service_is_ready to the client, same as rclcpp.
It also adds a temporary implementation of wait_for_service. It is not an acceptable implementation long term. Including it allows merging ros2/demos#182, ros2/examples#185, and ros2/system_tests#244.
CI (4th run with 111a4cb )

Linux 
Linux-aarch64  (Flaky 1kHz python timer tests failed).
macOS 
Windows","@mikaelarguedas Yes, the 1kHz timer test flakiness should be unchanged by this PR",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,162,2017-11-30T00:32:32Z,2017-11-30T19:07:09Z,2017-11-30T19:46:43Z,MERGED,True,55,49,1,https://github.com/sloretz,Executor avoids list comprehensions,1,[],https://github.com/ros2/rclpy/pull/162,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/162,"These are some minor optimizations pulled out of #140.
All of them avoid unnecessary list comprehensions. The result is the time spent in the executor during spin_once in the 1kHz timer test using func_number_callbacks drops from 25.5% to 22.2% (average of 100 runs). It's not much, but it might be enough to reduce the test flakiness. I made one change at a time checking the overhead with a script, so I'm confident that each change here is an optimization.
CI

Linux 
Linux-aarch64 
macOS 
Windows","These are some minor optimizations pulled out of #140.
All of them avoid unnecessary list comprehensions. The result is the time spent in the executor during spin_once in the 1kHz timer test using func_number_callbacks drops from 25.5% to 22.2% (average of 100 runs). It's not much, but it might be enough to reduce the test flakiness. I made one change at a time checking the overhead with a script, so I'm confident that each change here is an optimization.
CI

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,163,2017-12-01T00:48:01Z,2017-12-01T03:36:34Z,2017-12-01T03:36:38Z,MERGED,True,6,1,1,https://github.com/dhood,Clear rcutils error on failure,2,[],https://github.com/ros2/rclpy/pull/163,https://github.com/dhood,1,https://github.com/ros2/rclpy/pull/163,"rcutils logging sets error messages on failure as of ros2/rcutils#65

Linux 
Linux-aarch64 
macOS 
Windows","rcutils logging sets error messages on failure as of ros2/rcutils#65

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,164,2017-12-01T04:56:24Z,2017-12-02T00:37:38Z,2017-12-02T00:37:44Z,MERGED,True,49,118,5,https://github.com/dhood,Remove root logger usage (rclpy.loginfo) and get_severity_threshold(),5,[],https://github.com/ros2/rclpy/pull/164,https://github.com/dhood,1,https://github.com/ros2/rclpy/pull/164,"In light of the upcoming supported release I want to remove some things that have been bothering me about the logging API.
Remove rclpy.loginfo()
We decided that in rclcpp users should be ""forced"" to create a named logger to make a call, so that they think about the hierarchy etc. Because of this I have removed the convenience functions rclpy.loginfo etc on the root logger (now ""private"") to match.
I did not remove the root logger completely: user-created loggers still attach to the root logger because the root logger's name, though it's currently empty, will encapsulate prefix conventions should they ever be introduced.
10cea41
6d67190
Rename get_named_logger to get_logger()
Matches python logging module; the ""named"" part is redundant.
4531c89
Remove logger.get_severity_threshold()

A logger can have its severity explicitly set with logger.set_severity_threshold().
By default loggers have UNSET severity threshold, which causes them to inherit their parent's severity threshold: resolved via get_effective_severity_threshold()
Users almost always want to call logger.get_effective_severity_threshold()/logger.is_enabled_for(). However, a few times I have accidentally called logger.get_severity_threshold() which usually returns UNSET.

=> I've removed get_severity_threshold() (python logging module doesn't have it) because, except for test purposes, I can't imagine why someone would want to know whether the severity of a logger was explicitly set to X or if it just resolved to X. We lose information but I users will be less likely to trip over the similarly named methods.
217f1c3

Linux 
Linux-aarch64 
macOS 
Windows","In light of the upcoming supported release I want to remove some things that have been bothering me about the logging API.
Remove rclpy.loginfo()
We decided that in rclcpp users should be ""forced"" to create a named logger to make a call, so that they think about the hierarchy etc. Because of this I have removed the convenience functions rclpy.loginfo etc on the root logger (now ""private"") to match.
I did not remove the root logger completely: user-created loggers still attach to the root logger because the root logger's name, though it's currently empty, will encapsulate prefix conventions should they ever be introduced.
10cea41
6d67190
Rename get_named_logger to get_logger()
Matches python logging module; the ""named"" part is redundant.
4531c89
Remove logger.get_severity_threshold()

A logger can have its severity explicitly set with logger.set_severity_threshold().
By default loggers have UNSET severity threshold, which causes them to inherit their parent's severity threshold: resolved via get_effective_severity_threshold()
Users almost always want to call logger.get_effective_severity_threshold()/logger.is_enabled_for(). However, a few times I have accidentally called logger.get_severity_threshold() which usually returns UNSET.

=> I've removed get_severity_threshold() (python logging module doesn't have it) because, except for test purposes, I can't imagine why someone would want to know whether the severity of a logger was explicitly set to X or if it just resolved to X. We lose information but I users will be less likely to trip over the similarly named methods.
217f1c3

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,164,2017-12-01T04:56:24Z,2017-12-02T00:37:38Z,2017-12-02T00:37:44Z,MERGED,True,49,118,5,https://github.com/dhood,Remove root logger usage (rclpy.loginfo) and get_severity_threshold(),5,[],https://github.com/ros2/rclpy/pull/164,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/164#issuecomment-348563499,"In light of the upcoming supported release I want to remove some things that have been bothering me about the logging API.
Remove rclpy.loginfo()
We decided that in rclcpp users should be ""forced"" to create a named logger to make a call, so that they think about the hierarchy etc. Because of this I have removed the convenience functions rclpy.loginfo etc on the root logger (now ""private"") to match.
I did not remove the root logger completely: user-created loggers still attach to the root logger because the root logger's name, though it's currently empty, will encapsulate prefix conventions should they ever be introduced.
10cea41
6d67190
Rename get_named_logger to get_logger()
Matches python logging module; the ""named"" part is redundant.
4531c89
Remove logger.get_severity_threshold()

A logger can have its severity explicitly set with logger.set_severity_threshold().
By default loggers have UNSET severity threshold, which causes them to inherit their parent's severity threshold: resolved via get_effective_severity_threshold()
Users almost always want to call logger.get_effective_severity_threshold()/logger.is_enabled_for(). However, a few times I have accidentally called logger.get_severity_threshold() which usually returns UNSET.

=> I've removed get_severity_threshold() (python logging module doesn't have it) because, except for test purposes, I can't imagine why someone would want to know whether the severity of a logger was explicitly set to X or if it just resolved to X. We lose information but I users will be less likely to trip over the similarly named methods.
217f1c3

Linux 
Linux-aarch64 
macOS 
Windows","With ros2/rcutils#77 logger.get_effective_severity_threshold() will become logger.get_effective_level() right?
(because logger.get_effective_severity_threshold() seems very uinconvenient to write if it's the only way to get a logger level in the public API)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,164,2017-12-01T04:56:24Z,2017-12-02T00:37:38Z,2017-12-02T00:37:44Z,MERGED,True,49,118,5,https://github.com/dhood,Remove root logger usage (rclpy.loginfo) and get_severity_threshold(),5,[],https://github.com/ros2/rclpy/pull/164,https://github.com/dhood,3,https://github.com/ros2/rclpy/pull/164#issuecomment-348563780,"In light of the upcoming supported release I want to remove some things that have been bothering me about the logging API.
Remove rclpy.loginfo()
We decided that in rclcpp users should be ""forced"" to create a named logger to make a call, so that they think about the hierarchy etc. Because of this I have removed the convenience functions rclpy.loginfo etc on the root logger (now ""private"") to match.
I did not remove the root logger completely: user-created loggers still attach to the root logger because the root logger's name, though it's currently empty, will encapsulate prefix conventions should they ever be introduced.
10cea41
6d67190
Rename get_named_logger to get_logger()
Matches python logging module; the ""named"" part is redundant.
4531c89
Remove logger.get_severity_threshold()

A logger can have its severity explicitly set with logger.set_severity_threshold().
By default loggers have UNSET severity threshold, which causes them to inherit their parent's severity threshold: resolved via get_effective_severity_threshold()
Users almost always want to call logger.get_effective_severity_threshold()/logger.is_enabled_for(). However, a few times I have accidentally called logger.get_severity_threshold() which usually returns UNSET.

=> I've removed get_severity_threshold() (python logging module doesn't have it) because, except for test purposes, I can't imagine why someone would want to know whether the severity of a logger was explicitly set to X or if it just resolved to X. We lose information but I users will be less likely to trip over the similarly named methods.
217f1c3

Linux 
Linux-aarch64 
macOS 
Windows",correct,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,164,2017-12-01T04:56:24Z,2017-12-02T00:37:38Z,2017-12-02T00:37:44Z,MERGED,True,49,118,5,https://github.com/dhood,Remove root logger usage (rclpy.loginfo) and get_severity_threshold(),5,[],https://github.com/ros2/rclpy/pull/164,https://github.com/mikaelarguedas,4,https://github.com/ros2/rclpy/pull/164#issuecomment-348567634,"In light of the upcoming supported release I want to remove some things that have been bothering me about the logging API.
Remove rclpy.loginfo()
We decided that in rclcpp users should be ""forced"" to create a named logger to make a call, so that they think about the hierarchy etc. Because of this I have removed the convenience functions rclpy.loginfo etc on the root logger (now ""private"") to match.
I did not remove the root logger completely: user-created loggers still attach to the root logger because the root logger's name, though it's currently empty, will encapsulate prefix conventions should they ever be introduced.
10cea41
6d67190
Rename get_named_logger to get_logger()
Matches python logging module; the ""named"" part is redundant.
4531c89
Remove logger.get_severity_threshold()

A logger can have its severity explicitly set with logger.set_severity_threshold().
By default loggers have UNSET severity threshold, which causes them to inherit their parent's severity threshold: resolved via get_effective_severity_threshold()
Users almost always want to call logger.get_effective_severity_threshold()/logger.is_enabled_for(). However, a few times I have accidentally called logger.get_severity_threshold() which usually returns UNSET.

=> I've removed get_severity_threshold() (python logging module doesn't have it) because, except for test purposes, I can't imagine why someone would want to know whether the severity of a logger was explicitly set to X or if it just resolved to X. We lose information but I users will be less likely to trip over the similarly named methods.
217f1c3

Linux 
Linux-aarch64 
macOS 
Windows","I've removed get_severity_threshold() (python logging module doesn't have it) because, except for test purposes, I can't imagine why someone would want to know whether the severity of a logger was explicitly set to X or if it just resolved to X.

I guess that's to match the python module API exactly, but I think it would be more user-friendly to provide just logger.get_level() and an optional keyword argument if we don't want it to traverse the hierarchy ?
This way we can get the information if we really want to but have a reasonable default and a shorter function name",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,164,2017-12-01T04:56:24Z,2017-12-02T00:37:38Z,2017-12-02T00:37:44Z,MERGED,True,49,118,5,https://github.com/dhood,Remove root logger usage (rclpy.loginfo) and get_severity_threshold(),5,[],https://github.com/ros2/rclpy/pull/164,https://github.com/dhood,5,https://github.com/ros2/rclpy/pull/164#issuecomment-348651211,"In light of the upcoming supported release I want to remove some things that have been bothering me about the logging API.
Remove rclpy.loginfo()
We decided that in rclcpp users should be ""forced"" to create a named logger to make a call, so that they think about the hierarchy etc. Because of this I have removed the convenience functions rclpy.loginfo etc on the root logger (now ""private"") to match.
I did not remove the root logger completely: user-created loggers still attach to the root logger because the root logger's name, though it's currently empty, will encapsulate prefix conventions should they ever be introduced.
10cea41
6d67190
Rename get_named_logger to get_logger()
Matches python logging module; the ""named"" part is redundant.
4531c89
Remove logger.get_severity_threshold()

A logger can have its severity explicitly set with logger.set_severity_threshold().
By default loggers have UNSET severity threshold, which causes them to inherit their parent's severity threshold: resolved via get_effective_severity_threshold()
Users almost always want to call logger.get_effective_severity_threshold()/logger.is_enabled_for(). However, a few times I have accidentally called logger.get_severity_threshold() which usually returns UNSET.

=> I've removed get_severity_threshold() (python logging module doesn't have it) because, except for test purposes, I can't imagine why someone would want to know whether the severity of a logger was explicitly set to X or if it just resolved to X. We lose information but I users will be less likely to trip over the similarly named methods.
217f1c3

Linux 
Linux-aarch64 
macOS 
Windows","I think it would be more user-friendly to provide just logger.get_level() and an optional keyword argument if we don't want it to traverse the hierarchy ?

we spoke offline and I'll leave it as more the more explicit name since just get_level() hides the notion of resolving severity levels and we want to keep users conscious of logger hierarchy

will this be affected by ros2/rcutils#77?

I'll rename the functions that remain after this is merged 👍",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,165,2017-12-02T18:58:46Z,2017-12-04T02:40:23Z,2017-12-04T02:40:34Z,MERGED,True,85,85,5,https://github.com/dhood,Rename severity_thresold -> level,2,[],https://github.com/ros2/rclpy/pull/165,https://github.com/dhood,1,https://github.com/ros2/rclpy/pull/165,connects to ros2/rcutils#77,connects to ros2/rcutils#77,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,166,2018-01-04T00:26:17Z,2018-01-17T18:53:12Z,2018-01-18T21:12:06Z,MERGED,True,681,27,4,https://github.com/sloretz,Futures and coroutines,9,[],https://github.com/ros2/rclpy/pull/166,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/166,"This adds coroutine support to the executor and is part of service feature parity #123 and wait_for_service without a GraphListener #58.
Any callback can now be a coroutine function (async def). If the callback is a coroutine and it becomes blocked the executor will move on and resume executing it later. The details of this are handled in the class Task which is a class very similar to asyncio.Task. asyncio can't be used directly because it is not thread safe.
This PR also adds a Future class that represents the result of a stored task. It is not used in this PR, but an example of using it is in #170.
CI ( with 5f2cb1e)

Linux 
Linux-aarch64 
macOS 
Windows","This adds coroutine support to the executor and is part of service feature parity #123 and wait_for_service without a GraphListener #58.
Any callback can now be a coroutine function (async def). If the callback is a coroutine and it becomes blocked the executor will move on and resume executing it later. The details of this are handled in the class Task which is a class very similar to asyncio.Task. asyncio can't be used directly because it is not thread safe.
This PR also adds a Future class that represents the result of a stored task. It is not used in this PR, but an example of using it is in #170.
CI ( with 5f2cb1e)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,166,2018-01-04T00:26:17Z,2018-01-17T18:53:12Z,2018-01-18T21:12:06Z,MERGED,True,681,27,4,https://github.com/sloretz,Futures and coroutines,9,[],https://github.com/ros2/rclpy/pull/166,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/166#issuecomment-355655809,"This adds coroutine support to the executor and is part of service feature parity #123 and wait_for_service without a GraphListener #58.
Any callback can now be a coroutine function (async def). If the callback is a coroutine and it becomes blocked the executor will move on and resume executing it later. The details of this are handled in the class Task which is a class very similar to asyncio.Task. asyncio can't be used directly because it is not thread safe.
This PR also adds a Future class that represents the result of a stored task. It is not used in this PR, but an example of using it is in #170.
CI ( with 5f2cb1e)

Linux 
Linux-aarch64 
macOS 
Windows","Oops, looks like the description I put on this task was completely wrong and from another PR. It's fixed now.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,166,2018-01-04T00:26:17Z,2018-01-17T18:53:12Z,2018-01-18T21:12:06Z,MERGED,True,681,27,4,https://github.com/sloretz,Futures and coroutines,9,[],https://github.com/ros2/rclpy/pull/166,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/166#issuecomment-357319039,"This adds coroutine support to the executor and is part of service feature parity #123 and wait_for_service without a GraphListener #58.
Any callback can now be a coroutine function (async def). If the callback is a coroutine and it becomes blocked the executor will move on and resume executing it later. The details of this are handled in the class Task which is a class very similar to asyncio.Task. asyncio can't be used directly because it is not thread safe.
This PR also adds a Future class that represents the result of a stored task. It is not used in this PR, but an example of using it is in #170.
CI ( with 5f2cb1e)

Linux 
Linux-aarch64 
macOS 
Windows",@ros2/team Friendly ping. I would appreciate a review of this one. It is a prerequisite to multiple concurrent client requests (#170) and a wait_for_service implementation that returns asap instead of sleep/polling.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,167,2018-01-04T16:28:55Z,2018-01-04T19:53:51Z,2018-01-04T19:53:55Z,MERGED,True,8,8,1,https://github.com/sloretz,Remove underscores from imports,1,[],https://github.com/ros2/rclpy/pull/167,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/167,"This removes the addition of a leading underscore to imported names. I believe it was a review comment from @dirk-thomas on an earlier pull request, but I wasn't able to quickly find it.
CI

Linux 
Linux-aarch64 
macOS 

test_composition__rmw_fastrtps_cpp timed out, unrelated to these changes


Windows 

test_composition__rmw_fastrtps_cpp timed out, unrelated to these changes
Two compiler warnings in Fast-RTPS (eProsima/Fast-DDS#175)
Cmake warning about variable SECURITY being unused. (ros2/build_farmer#79)","This removes the addition of a leading underscore to imported names. I believe it was a review comment from @dirk-thomas on an earlier pull request, but I wasn't able to quickly find it.
CI

Linux 
Linux-aarch64 
macOS 

test_composition__rmw_fastrtps_cpp timed out, unrelated to these changes


Windows 

test_composition__rmw_fastrtps_cpp timed out, unrelated to these changes
Two compiler warnings in Fast-RTPS (eProsima/Fast-DDS#175)
Cmake warning about variable SECURITY being unused. (ros2/build_farmer#79)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,168,2018-01-04T17:00:34Z,2018-01-04T19:52:53Z,2018-01-04T19:52:57Z,MERGED,True,3,0,1,https://github.com/sloretz,Sleep to workaround race condition in MultiThreadedExecutor test,2,[],https://github.com/ros2/rclpy/pull/168,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/168,"This adds a sleep to workaround a race condition in test_multi_threaded_executor_executes. MultiThreadedExecutor runs callbacks in a thread pool. It is possible for func_execution to return False before the thread pool executes timer_callback.
CI with testing set test only rclpy since this only changes a test.

Linux 
Linux-aarch64 
macOS 
Windows  (Unstable due to warnings in eProsima Fast-RTPS code, see eProsima/Fast-DDS#175 )","This adds a sleep to workaround a race condition in test_multi_threaded_executor_executes. MultiThreadedExecutor runs callbacks in a thread pool. It is possible for func_execution to return False before the thread pool executes timer_callback.
CI with testing set test only rclpy since this only changes a test.

Linux 
Linux-aarch64 
macOS 
Windows  (Unstable due to warnings in eProsima Fast-RTPS code, see eProsima/Fast-DDS#175 )",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,169,2018-01-04T17:28:23Z,2018-01-04T19:41:25Z,2018-01-04T19:41:30Z,MERGED,True,5,3,1,https://github.com/sloretz,Disable 1kHz timer tests on arm,1,[],https://github.com/ros2/rclpy/pull/169,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/169,"This pull request disables the 1kHz timer tests on arm. They sometimes fail due to the time it takes for the executor to execute the timer callbacks being slightly too long. That issue will need to be fixed, but this will eliminate the noise in the meantime.
CI (only testing rclpy)

Linux 
Linux-aarch64 
macOS 
Windows","This pull request disables the 1kHz timer tests on arm. They sometimes fail due to the time it takes for the executor to execute the timer callbacks being slightly too long. That issue will need to be fixed, but this will eliminate the noise in the meantime.
CI (only testing rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,170,2018-01-04T22:54:45Z,2018-03-27T00:56:46Z,2019-02-19T21:12:02Z,MERGED,True,109,48,4,https://github.com/sloretz,Refactor client for multiple requests,8,['in review'],https://github.com/ros2/rclpy/pull/170,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/170,"Opening a PR for feedback. This uses the Future class added in pull request #166 to allow simultaneous requests from the same client (part of #123). It is implemented like option 3 in this comment.
Specifically any ideas about call? This new version should not be called inside a callback because it would deadlock a SingleThreadedExecutor. It also is not very useful outside because an executor would need to be running in another thread for the client response to be taken from rcl.
CI

Linux 
Linux-aarch64 
macOS 
Windows 

Unrelated failing test (timeout): projectroot.test_api_srv_composition_client_first__rmw_fastrtps_cpp

Also timed out on nightly_win_deb http://ci.ros2.org/view/nightly/job/nightly_win_deb/764
However, it passed in nightly_win_rep http://ci.ros2.org/view/nightly/job/nightly_win_rel/705","Opening a PR for feedback. This uses the Future class added in pull request #166 to allow simultaneous requests from the same client (part of #123). It is implemented like option 3 in this comment.
Specifically any ideas about call? This new version should not be called inside a callback because it would deadlock a SingleThreadedExecutor. It also is not very useful outside because an executor would need to be running in another thread for the client response to be taken from rcl.
CI

Linux 
Linux-aarch64 
macOS 
Windows 

Unrelated failing test (timeout): projectroot.test_api_srv_composition_client_first__rmw_fastrtps_cpp

Also timed out on nightly_win_deb http://ci.ros2.org/view/nightly/job/nightly_win_deb/764
However, it passed in nightly_win_rep http://ci.ros2.org/view/nightly/job/nightly_win_rel/705",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,170,2018-01-04T22:54:45Z,2018-03-27T00:56:46Z,2019-02-19T21:12:02Z,MERGED,True,109,48,4,https://github.com/sloretz,Refactor client for multiple requests,8,['in review'],https://github.com/ros2/rclpy/pull/170,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/170#issuecomment-361997023,"Opening a PR for feedback. This uses the Future class added in pull request #166 to allow simultaneous requests from the same client (part of #123). It is implemented like option 3 in this comment.
Specifically any ideas about call? This new version should not be called inside a callback because it would deadlock a SingleThreadedExecutor. It also is not very useful outside because an executor would need to be running in another thread for the client response to be taken from rcl.
CI

Linux 
Linux-aarch64 
macOS 
Windows 

Unrelated failing test (timeout): projectroot.test_api_srv_composition_client_first__rmw_fastrtps_cpp

Also timed out on nightly_win_deb http://ci.ros2.org/view/nightly/job/nightly_win_deb/764
However, it passed in nightly_win_rep http://ci.ros2.org/view/nightly/job/nightly_win_rel/705","Mentioned it to @sloretz offline but writing it here for book-keeping.
This PR removes API used by various packages so we'll need to update those to use the new API and merge these PRs all together, of the top of my head: demo_nodes_py, examples_rclpy_* and ros2service need corresponding PRs",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,170,2018-01-04T22:54:45Z,2018-03-27T00:56:46Z,2019-02-19T21:12:02Z,MERGED,True,109,48,4,https://github.com/sloretz,Refactor client for multiple requests,8,['in review'],https://github.com/ros2/rclpy/pull/170,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/170#issuecomment-363625874,"Opening a PR for feedback. This uses the Future class added in pull request #166 to allow simultaneous requests from the same client (part of #123). It is implemented like option 3 in this comment.
Specifically any ideas about call? This new version should not be called inside a callback because it would deadlock a SingleThreadedExecutor. It also is not very useful outside because an executor would need to be running in another thread for the client response to be taken from rcl.
CI

Linux 
Linux-aarch64 
macOS 
Windows 

Unrelated failing test (timeout): projectroot.test_api_srv_composition_client_first__rmw_fastrtps_cpp

Also timed out on nightly_win_deb http://ci.ros2.org/view/nightly/job/nightly_win_deb/764
However, it passed in nightly_win_rep http://ci.ros2.org/view/nightly/job/nightly_win_rel/705","CI including updates to other packages

Linux 
Linux-aarch64 
macOS 
Windows 

rclpy.test.test_timer.test_timer_number_callbacks100hertz Unrelated, though usually it's the 1khz timer test that is flaky not the 100hz test. Intereasting that the 100Hz failed while the 1Khz test passed",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,170,2018-01-04T22:54:45Z,2018-03-27T00:56:46Z,2019-02-19T21:12:02Z,MERGED,True,109,48,4,https://github.com/sloretz,Refactor client for multiple requests,8,['in review'],https://github.com/ros2/rclpy/pull/170,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/170#issuecomment-375719856,"Opening a PR for feedback. This uses the Future class added in pull request #166 to allow simultaneous requests from the same client (part of #123). It is implemented like option 3 in this comment.
Specifically any ideas about call? This new version should not be called inside a callback because it would deadlock a SingleThreadedExecutor. It also is not very useful outside because an executor would need to be running in another thread for the client response to be taken from rcl.
CI

Linux 
Linux-aarch64 
macOS 
Windows 

Unrelated failing test (timeout): projectroot.test_api_srv_composition_client_first__rmw_fastrtps_cpp

Also timed out on nightly_win_deb http://ci.ros2.org/view/nightly/job/nightly_win_deb/764
However, it passed in nightly_win_rep http://ci.ros2.org/view/nightly/job/nightly_win_rel/705","Running CI since it's been a while and cf17f38 was added.
Edit: CI looks good

Linux 
Linux-aarch64 
macOS 
Windows  (2 Composition test failures)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,171,2018-01-08T16:23:38Z,2018-01-24T23:27:20Z,2018-01-24T23:27:24Z,MERGED,True,32,17,3,https://github.com/sloretz,rclpy_take_response checks sequence number,2,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/171,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/171,"This fixes a bug where rclpy_take_response ignores the sequence number in a struct populated by rcl_take_response. This becomes important once the client supports multiple outstanding requests (#170).
connects to ros2/rcl#205
CI (with  e260ce6)

Linux 
Linux-aarch64 
macOS 
Windows","This fixes a bug where rclpy_take_response ignores the sequence number in a struct populated by rcl_take_response. This becomes important once the client supports multiple outstanding requests (#170).
connects to ros2/rcl#205
CI (with  e260ce6)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,172,2018-01-10T00:12:34Z,2018-02-07T01:50:54Z,2019-04-05T22:22:45Z,CLOSED,False,293,0,5,https://github.com/sloretz,Proof of concept part of cpython extension using Cython,1,[],https://github.com/ros2/rclpy/pull/172,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/172,"This PR is meant to generate discussion on using Cython for creating parts of the cpython extension in rclpy. Cython is a superset of python that can generate C code for cpython extensions. This PR does nothing beyond successfully build (as long as sudo apt install cython3 happens first). If the outcome of discussion is consensus in favor, I think the next step would be to replace #140 with a PR using Cython.
Advantages

Much less human-written code (compare this with the WaitSet in #140)
Generated code handles reference counting
Generated code handles exceptions and checking return values from cpython functions (#139)

Disadvantages

New dependency on cython (how to get it on windows? Vendor package?)
Linter tests don't work on cython files

Some things a linter would catch are caught at build time, like trying to use an uninitialized variable


Some burden in declaring C functions that are used (see rcl.pxd)
cython from CMake is a little bit of a pain (it would be much easier if rclpy used a setup.py instead)","This PR is meant to generate discussion on using Cython for creating parts of the cpython extension in rclpy. Cython is a superset of python that can generate C code for cpython extensions. This PR does nothing beyond successfully build (as long as sudo apt install cython3 happens first). If the outcome of discussion is consensus in favor, I think the next step would be to replace #140 with a PR using Cython.
Advantages

Much less human-written code (compare this with the WaitSet in #140)
Generated code handles reference counting
Generated code handles exceptions and checking return values from cpython functions (#139)

Disadvantages

New dependency on cython (how to get it on windows? Vendor package?)
Linter tests don't work on cython files

Some things a linter would catch are caught at build time, like trying to use an uninitialized variable


Some burden in declaring C functions that are used (see rcl.pxd)
cython from CMake is a little bit of a pain (it would be much easier if rclpy used a setup.py instead)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,172,2018-01-10T00:12:34Z,2018-02-07T01:50:54Z,2019-04-05T22:22:45Z,CLOSED,False,293,0,5,https://github.com/sloretz,Proof of concept part of cpython extension using Cython,1,[],https://github.com/ros2/rclpy/pull/172,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/172#issuecomment-357025729,"This PR is meant to generate discussion on using Cython for creating parts of the cpython extension in rclpy. Cython is a superset of python that can generate C code for cpython extensions. This PR does nothing beyond successfully build (as long as sudo apt install cython3 happens first). If the outcome of discussion is consensus in favor, I think the next step would be to replace #140 with a PR using Cython.
Advantages

Much less human-written code (compare this with the WaitSet in #140)
Generated code handles reference counting
Generated code handles exceptions and checking return values from cpython functions (#139)

Disadvantages

New dependency on cython (how to get it on windows? Vendor package?)
Linter tests don't work on cython files

Some things a linter would catch are caught at build time, like trying to use an uninitialized variable


Some burden in declaring C functions that are used (see rcl.pxd)
cython from CMake is a little bit of a pain (it would be much easier if rclpy used a setup.py instead)","I am not familiar with Cython. Is it correct that the result depends on the CPython runtime? Is that limiting us on which interpreter our code works?
I have recently read about pybind11. Maybe that would be another alternative to consider.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,172,2018-01-10T00:12:34Z,2018-02-07T01:50:54Z,2019-04-05T22:22:45Z,CLOSED,False,293,0,5,https://github.com/sloretz,Proof of concept part of cpython extension using Cython,1,[],https://github.com/ros2/rclpy/pull/172,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/172#issuecomment-357094797,"This PR is meant to generate discussion on using Cython for creating parts of the cpython extension in rclpy. Cython is a superset of python that can generate C code for cpython extensions. This PR does nothing beyond successfully build (as long as sudo apt install cython3 happens first). If the outcome of discussion is consensus in favor, I think the next step would be to replace #140 with a PR using Cython.
Advantages

Much less human-written code (compare this with the WaitSet in #140)
Generated code handles reference counting
Generated code handles exceptions and checking return values from cpython functions (#139)

Disadvantages

New dependency on cython (how to get it on windows? Vendor package?)
Linter tests don't work on cython files

Some things a linter would catch are caught at build time, like trying to use an uninitialized variable


Some burden in declaring C functions that are used (see rcl.pxd)
cython from CMake is a little bit of a pain (it would be much easier if rclpy used a setup.py instead)","@dirk-thomas Yes, it limits us to the cpython interpreter. Cython generates C code that uses the CPython extension API. It also supports pypy because pypy implements a subset of that. The current state and pybind11 have the same interpreter limitation for the same reason.
I can look into pybind11 and make a list of pros and cons",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,172,2018-01-10T00:12:34Z,2018-02-07T01:50:54Z,2019-04-05T22:22:45Z,CLOSED,False,293,0,5,https://github.com/sloretz,Proof of concept part of cpython extension using Cython,1,[],https://github.com/ros2/rclpy/pull/172,https://github.com/dirk-thomas,4,https://github.com/ros2/rclpy/pull/172#issuecomment-357095136,"This PR is meant to generate discussion on using Cython for creating parts of the cpython extension in rclpy. Cython is a superset of python that can generate C code for cpython extensions. This PR does nothing beyond successfully build (as long as sudo apt install cython3 happens first). If the outcome of discussion is consensus in favor, I think the next step would be to replace #140 with a PR using Cython.
Advantages

Much less human-written code (compare this with the WaitSet in #140)
Generated code handles reference counting
Generated code handles exceptions and checking return values from cpython functions (#139)

Disadvantages

New dependency on cython (how to get it on windows? Vendor package?)
Linter tests don't work on cython files

Some things a linter would catch are caught at build time, like trying to use an uninitialized variable


Some burden in declaring C functions that are used (see rcl.pxd)
cython from CMake is a little bit of a pain (it would be much easier if rclpy used a setup.py instead)","The current state and pybind11 have the same interpreter limitation for the same reason.

Thanks for the clarification.

I can look into pybind11 and make a list of pros and cons

That would be great.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,172,2018-01-10T00:12:34Z,2018-02-07T01:50:54Z,2019-04-05T22:22:45Z,CLOSED,False,293,0,5,https://github.com/sloretz,Proof of concept part of cpython extension using Cython,1,[],https://github.com/ros2/rclpy/pull/172,https://github.com/clalancette,5,https://github.com/ros2/rclpy/pull/172#issuecomment-357252026,"This PR is meant to generate discussion on using Cython for creating parts of the cpython extension in rclpy. Cython is a superset of python that can generate C code for cpython extensions. This PR does nothing beyond successfully build (as long as sudo apt install cython3 happens first). If the outcome of discussion is consensus in favor, I think the next step would be to replace #140 with a PR using Cython.
Advantages

Much less human-written code (compare this with the WaitSet in #140)
Generated code handles reference counting
Generated code handles exceptions and checking return values from cpython functions (#139)

Disadvantages

New dependency on cython (how to get it on windows? Vendor package?)
Linter tests don't work on cython files

Some things a linter would catch are caught at build time, like trying to use an uninitialized variable


Some burden in declaring C functions that are used (see rcl.pxd)
cython from CMake is a little bit of a pain (it would be much easier if rclpy used a setup.py instead)","In general, I'm in favor of using something that generates code and reduces the burden of python binding maintenance for us.  Off the top of my head, it is probably worth surveying Cython, pybind11, boost::python, and SWIG for this purpose, and seeing which fits in with our goals the best.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,172,2018-01-10T00:12:34Z,2018-02-07T01:50:54Z,2019-04-05T22:22:45Z,CLOSED,False,293,0,5,https://github.com/sloretz,Proof of concept part of cpython extension using Cython,1,[],https://github.com/ros2/rclpy/pull/172,https://github.com/sloretz,6,https://github.com/ros2/rclpy/pull/172#issuecomment-357316699,"This PR is meant to generate discussion on using Cython for creating parts of the cpython extension in rclpy. Cython is a superset of python that can generate C code for cpython extensions. This PR does nothing beyond successfully build (as long as sudo apt install cython3 happens first). If the outcome of discussion is consensus in favor, I think the next step would be to replace #140 with a PR using Cython.
Advantages

Much less human-written code (compare this with the WaitSet in #140)
Generated code handles reference counting
Generated code handles exceptions and checking return values from cpython functions (#139)

Disadvantages

New dependency on cython (how to get it on windows? Vendor package?)
Linter tests don't work on cython files

Some things a linter would catch are caught at build time, like trying to use an uninitialized variable


Some burden in declaring C functions that are used (see rcl.pxd)
cython from CMake is a little bit of a pain (it would be much easier if rclpy used a setup.py instead)","@dirk-thomas comparison to pybind11 in #173
@clalancette I think boost::python can be skipped since pybind11 is a header only fork-ish of it. I think it is safe to assume pybind11 has all of the advantages without the overhead of installing boost.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,172,2018-01-10T00:12:34Z,2018-02-07T01:50:54Z,2019-04-05T22:22:45Z,CLOSED,False,293,0,5,https://github.com/sloretz,Proof of concept part of cpython extension using Cython,1,[],https://github.com/ros2/rclpy/pull/172,https://github.com/mikaelarguedas,7,https://github.com/ros2/rclpy/pull/172#issuecomment-359540574,"This PR is meant to generate discussion on using Cython for creating parts of the cpython extension in rclpy. Cython is a superset of python that can generate C code for cpython extensions. This PR does nothing beyond successfully build (as long as sudo apt install cython3 happens first). If the outcome of discussion is consensus in favor, I think the next step would be to replace #140 with a PR using Cython.
Advantages

Much less human-written code (compare this with the WaitSet in #140)
Generated code handles reference counting
Generated code handles exceptions and checking return values from cpython functions (#139)

Disadvantages

New dependency on cython (how to get it on windows? Vendor package?)
Linter tests don't work on cython files

Some things a linter would catch are caught at build time, like trying to use an uninitialized variable


Some burden in declaring C functions that are used (see rcl.pxd)
cython from CMake is a little bit of a pain (it would be much easier if rclpy used a setup.py instead)","Thanks @sloretz for putting this together.
Agreed regarding the statement about pybind11 over boost::python. Some sugar from boost::python is not available in pybind11 but it's very c++ specific and shouldn't impact us for C bindings.
I used pybind11 recently in other projects and it was a good experience, actually more intuitive than boost::python and pretty feature complete.
I haven't played with SWIG but it could be interesting to add it to the comparison to make an educated decision.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,172,2018-01-10T00:12:34Z,2018-02-07T01:50:54Z,2019-04-05T22:22:45Z,CLOSED,False,293,0,5,https://github.com/sloretz,Proof of concept part of cpython extension using Cython,1,[],https://github.com/ros2/rclpy/pull/172,https://github.com/sloretz,8,https://github.com/ros2/rclpy/pull/172#issuecomment-363628753,"This PR is meant to generate discussion on using Cython for creating parts of the cpython extension in rclpy. Cython is a superset of python that can generate C code for cpython extensions. This PR does nothing beyond successfully build (as long as sudo apt install cython3 happens first). If the outcome of discussion is consensus in favor, I think the next step would be to replace #140 with a PR using Cython.
Advantages

Much less human-written code (compare this with the WaitSet in #140)
Generated code handles reference counting
Generated code handles exceptions and checking return values from cpython functions (#139)

Disadvantages

New dependency on cython (how to get it on windows? Vendor package?)
Linter tests don't work on cython files

Some things a linter would catch are caught at build time, like trying to use an uninitialized variable


Some burden in declaring C functions that are used (see rcl.pxd)
cython from CMake is a little bit of a pain (it would be much easier if rclpy used a setup.py instead)","I will close this for now since it seems pybind11 is most likely, but I will wait to delete the branch until that is confirmed.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,173,2018-01-12T18:24:19Z,2020-02-27T18:39:05Z,2021-08-11T22:54:13Z,CLOSED,False,299,1,4,https://github.com/sloretz,Proof of concept part of cpython extension using Pybind11,1,[],https://github.com/ros2/rclpy/pull/173,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/173,"Like #172 this is a proof of concept meant to generate discussion. It implements a WaitSet class in c++ and uses pybind11 to create a cpython extension. To build first pip3 install pybind11.
Advantages over Cython

No new language to learn: Pybind11 is pure C++, cython uses a superset of python
c++ Linter tests work, cython files don't have a linter
Do not need to maintain duplicate definitions for C methods (compare with rcl.pxd)
No code generation step: Pybind11 uses C++ templates that expand to python extension code at compile time. Cython has to generate C code that is then built.
Enables rclcpp and rclpy to possibly resuse C++ code.
pybind11 is a ""lighter"" dependency since it does not install any executables

Disadvantages compared to Cython

Cython is in debian
Cython PR #172 required slightly less code (rcl.pxd + _rclpy_wait_set.px = 208 lines, _rcl_wait_set.cpp = 244)
When calling a cpython extension API directly code using pybind11 still needs to check if a python exception was raised. Cython generated does this automatically (compare call to PyCapsule_GetPointer here with call using cython).

Not as big of a deal as it seems, being able to throw a C++ exception that gets translated to a python exception makes error handling much easier than the current state.
This PR uses is_subscription_ready instead of ready_subscriptions and pysubs is not actually the python type because it would have been a little more verbose with the checks.


Default parameter values are separated from C++ function definition (see default value of timeout on wait here and when using cython)

Same as Cython

Both reduce the code needed to check for python exceptions
Both are in homebrew
Both limited to interpreters that implement cpython's extension API
Both can be rolled out in incrementally: no need to rewrite all of the C code in rclpy right away.
Both can be built using CMake or a setup.py
Both are only build dependencies, the user doesn't need anything new installed at run time

Misc info

Requires Visual Studio 2015 or higher
Released under a BSD license
Pybind11 is a header only library
Pip installation of pybind11 does not come with a CMake <project>Config.cmake. It appears to have some nice CMake code if it is installed from source.

connects to #172","Like #172 this is a proof of concept meant to generate discussion. It implements a WaitSet class in c++ and uses pybind11 to create a cpython extension. To build first pip3 install pybind11.
Advantages over Cython

No new language to learn: Pybind11 is pure C++, cython uses a superset of python
c++ Linter tests work, cython files don't have a linter
Do not need to maintain duplicate definitions for C methods (compare with rcl.pxd)
No code generation step: Pybind11 uses C++ templates that expand to python extension code at compile time. Cython has to generate C code that is then built.
Enables rclcpp and rclpy to possibly resuse C++ code.
pybind11 is a ""lighter"" dependency since it does not install any executables

Disadvantages compared to Cython

Cython is in debian
Cython PR #172 required slightly less code (rcl.pxd + _rclpy_wait_set.px = 208 lines, _rcl_wait_set.cpp = 244)
When calling a cpython extension API directly code using pybind11 still needs to check if a python exception was raised. Cython generated does this automatically (compare call to PyCapsule_GetPointer here with call using cython).

Not as big of a deal as it seems, being able to throw a C++ exception that gets translated to a python exception makes error handling much easier than the current state.
This PR uses is_subscription_ready instead of ready_subscriptions and pysubs is not actually the python type because it would have been a little more verbose with the checks.


Default parameter values are separated from C++ function definition (see default value of timeout on wait here and when using cython)

Same as Cython

Both reduce the code needed to check for python exceptions
Both are in homebrew
Both limited to interpreters that implement cpython's extension API
Both can be rolled out in incrementally: no need to rewrite all of the C code in rclpy right away.
Both can be built using CMake or a setup.py
Both are only build dependencies, the user doesn't need anything new installed at run time

Misc info

Requires Visual Studio 2015 or higher
Released under a BSD license
Pybind11 is a header only library
Pip installation of pybind11 does not come with a CMake <project>Config.cmake. It appears to have some nice CMake code if it is installed from source.

connects to #172",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,173,2018-01-12T18:24:19Z,2020-02-27T18:39:05Z,2021-08-11T22:54:13Z,CLOSED,False,299,1,4,https://github.com/sloretz,Proof of concept part of cpython extension using Pybind11,1,[],https://github.com/ros2/rclpy/pull/173,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/173#issuecomment-592112796,"Like #172 this is a proof of concept meant to generate discussion. It implements a WaitSet class in c++ and uses pybind11 to create a cpython extension. To build first pip3 install pybind11.
Advantages over Cython

No new language to learn: Pybind11 is pure C++, cython uses a superset of python
c++ Linter tests work, cython files don't have a linter
Do not need to maintain duplicate definitions for C methods (compare with rcl.pxd)
No code generation step: Pybind11 uses C++ templates that expand to python extension code at compile time. Cython has to generate C code that is then built.
Enables rclcpp and rclpy to possibly resuse C++ code.
pybind11 is a ""lighter"" dependency since it does not install any executables

Disadvantages compared to Cython

Cython is in debian
Cython PR #172 required slightly less code (rcl.pxd + _rclpy_wait_set.px = 208 lines, _rcl_wait_set.cpp = 244)
When calling a cpython extension API directly code using pybind11 still needs to check if a python exception was raised. Cython generated does this automatically (compare call to PyCapsule_GetPointer here with call using cython).

Not as big of a deal as it seems, being able to throw a C++ exception that gets translated to a python exception makes error handling much easier than the current state.
This PR uses is_subscription_ready instead of ready_subscriptions and pysubs is not actually the python type because it would have been a little more verbose with the checks.


Default parameter values are separated from C++ function definition (see default value of timeout on wait here and when using cython)

Same as Cython

Both reduce the code needed to check for python exceptions
Both are in homebrew
Both limited to interpreters that implement cpython's extension API
Both can be rolled out in incrementally: no need to rewrite all of the C code in rclpy right away.
Both can be built using CMake or a setup.py
Both are only build dependencies, the user doesn't need anything new installed at run time

Misc info

Requires Visual Studio 2015 or higher
Released under a BSD license
Pybind11 is a header only library
Pip installation of pybind11 does not come with a CMake <project>Config.cmake. It appears to have some nice CMake code if it is installed from source.

connects to #172","This is pretty stale, and just a proof of concept, so I'll close it.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,174,2018-01-24T19:01:52Z,2018-02-26T22:36:19Z,2018-02-26T22:36:23Z,MERGED,True,36,4,3,https://github.com/dhood,Get node's logger name from rcl,3,[],https://github.com/ros2/rclpy/pull/174,https://github.com/dhood,1,https://github.com/ros2/rclpy/pull/174,"connects to ros2/rcl#212
Note that the rclpy logger associated with a node won't be created until after the rcl node is created. I don't see an issue with this because we're not using the logger before that point anyway.","connects to ros2/rcl#212
Note that the rclpy logger associated with a node won't be created until after the rcl node is created. I don't see an issue with this because we're not using the logger before that point anyway.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,174,2018-01-24T19:01:52Z,2018-02-26T22:36:19Z,2018-02-26T22:36:23Z,MERGED,True,36,4,3,https://github.com/dhood,Get node's logger name from rcl,3,[],https://github.com/ros2/rclpy/pull/174,https://github.com/dhood,2,https://github.com/ros2/rclpy/pull/174#issuecomment-367038209,"connects to ros2/rcl#212
Note that the rclpy logger associated with a node won't be created until after the rcl node is created. I don't see an issue with this because we're not using the logger before that point anyway.",waiting for review @ros2/team,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,175,2018-01-31T01:51:31Z,2018-02-01T21:50:39Z,2018-02-01T21:50:42Z,MERGED,True,3,3,1,https://github.com/tfoote,Update for changing rcl time primative to int64_t,1,['in review'],https://github.com/ros2/rclpy/pull/175,https://github.com/tfoote,1,https://github.com/ros2/rclpy/pull/175,closes ros2/rcutils#79,closes ros2/rcutils#79,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,176,2018-02-02T19:08:45Z,2018-04-13T15:18:53Z,2018-04-13T15:18:57Z,MERGED,True,101,19,3,https://github.com/sloretz,Make rclpy.spin*() use a persistent executor,3,['bug'],https://github.com/ros2/rclpy/pull/176,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/176,"This fixes a bug where coroutine callbacks that yield while being handled in rclpy.spin_once() never get executed again. The task is stored in the executor, but the executor is thrown away after spinning.
This PR makes the global methods reuse an executor. The test checks that a task which yields during rclpy.spin_once() gets resumed on a second invocation.
CI

Linux 
Linux-aarch64 
macOS 

Unrelated failure in rcl.TestGetNodeNames__rmw_fastrtps_cpp.test_rcl_get_node_names


Windows 

false positive cmake warning ros2/build_farmer#79 caused by race condition due to --parallel","This fixes a bug where coroutine callbacks that yield while being handled in rclpy.spin_once() never get executed again. The task is stored in the executor, but the executor is thrown away after spinning.
This PR makes the global methods reuse an executor. The test checks that a task which yields during rclpy.spin_once() gets resumed on a second invocation.
CI

Linux 
Linux-aarch64 
macOS 

Unrelated failure in rcl.TestGetNodeNames__rmw_fastrtps_cpp.test_rcl_get_node_names


Windows 

false positive cmake warning ros2/build_farmer#79 caused by race condition due to --parallel",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,176,2018-02-02T19:08:45Z,2018-04-13T15:18:53Z,2018-04-13T15:18:57Z,MERGED,True,101,19,3,https://github.com/sloretz,Make rclpy.spin*() use a persistent executor,3,['bug'],https://github.com/ros2/rclpy/pull/176,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/176#issuecomment-377339544,"This fixes a bug where coroutine callbacks that yield while being handled in rclpy.spin_once() never get executed again. The task is stored in the executor, but the executor is thrown away after spinning.
This PR makes the global methods reuse an executor. The test checks that a task which yields during rclpy.spin_once() gets resumed on a second invocation.
CI

Linux 
Linux-aarch64 
macOS 

Unrelated failure in rcl.TestGetNodeNames__rmw_fastrtps_cpp.test_rcl_get_node_names


Windows 

false positive cmake warning ros2/build_farmer#79 caused by race condition due to --parallel","New CI

Linux 
Linux-aarch64 
macOS 
Windows 

FYI @mikaelarguedas I rebased with master. It means spin_until_future_complete has been updated to use a persistent executor. While in the neighborhood I also added doc strings to spin() and spin_once()",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,176,2018-02-02T19:08:45Z,2018-04-13T15:18:53Z,2018-04-13T15:18:57Z,MERGED,True,101,19,3,https://github.com/sloretz,Make rclpy.spin*() use a persistent executor,3,['bug'],https://github.com/ros2/rclpy/pull/176,https://github.com/mikaelarguedas,3,https://github.com/ros2/rclpy/pull/176#issuecomment-379006475,"This fixes a bug where coroutine callbacks that yield while being handled in rclpy.spin_once() never get executed again. The task is stored in the executor, but the executor is thrown away after spinning.
This PR makes the global methods reuse an executor. The test checks that a task which yields during rclpy.spin_once() gets resumed on a second invocation.
CI

Linux 
Linux-aarch64 
macOS 

Unrelated failure in rcl.TestGetNodeNames__rmw_fastrtps_cpp.test_rcl_get_node_names


Windows 

false positive cmake warning ros2/build_farmer#79 caused by race condition due to --parallel",@mikaelarguedas PTAL,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,176,2018-02-02T19:08:45Z,2018-04-13T15:18:53Z,2018-04-13T15:18:57Z,MERGED,True,101,19,3,https://github.com/sloretz,Make rclpy.spin*() use a persistent executor,3,['bug'],https://github.com/ros2/rclpy/pull/176,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/176#issuecomment-380521724,"This fixes a bug where coroutine callbacks that yield while being handled in rclpy.spin_once() never get executed again. The task is stored in the executor, but the executor is thrown away after spinning.
This PR makes the global methods reuse an executor. The test checks that a task which yields during rclpy.spin_once() gets resumed on a second invocation.
CI

Linux 
Linux-aarch64 
macOS 

Unrelated failure in rcl.TestGetNodeNames__rmw_fastrtps_cpp.test_rcl_get_node_names


Windows 

false positive cmake warning ros2/build_farmer#79 caused by race condition due to --parallel","New commit is only a docstring change, so running CI Linux testing only rclpy to run linters",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,177,2018-02-02T21:45:27Z,2018-03-30T17:56:26Z,2018-03-30T17:56:30Z,MERGED,True,7,2,1,https://github.com/dirk-thomas,handle node names which are null,1,[],https://github.com/ros2/rclpy/pull/177,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/177,"Necessary since each item can potentially contain a nullptr.
Connect to ros2/ros2#438.","Necessary since each item can potentially contain a nullptr.
Connect to ros2/ros2#438.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,179,2018-03-05T22:10:19Z,2018-03-06T19:38:22Z,2018-03-06T19:38:27Z,MERGED,True,56,7,1,https://github.com/sloretz,rclpy_init() passes command line arguments to rcl_init(),4,[],https://github.com/ros2/rclpy/pull/179,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/179,"This passes command line arguments through to rcl. Previously there was only a TODO message. This PR allows python nodes to be remapped using ros2/rcl#217.
CI

Linux 
Linux-aarch64 
macOS 
Windows 

connects to ros2/ros2#450","This passes command line arguments through to rcl. Previously there was only a TODO message. This PR allows python nodes to be remapped using ros2/rcl#217.
CI

Linux 
Linux-aarch64 
macOS 
Windows 

connects to ros2/ros2#450",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,179,2018-03-05T22:10:19Z,2018-03-06T19:38:22Z,2018-03-06T19:38:27Z,MERGED,True,56,7,1,https://github.com/sloretz,rclpy_init() passes command line arguments to rcl_init(),4,[],https://github.com/ros2/rclpy/pull/179,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/179#issuecomment-370845579,"This passes command line arguments through to rcl. Previously there was only a TODO message. This PR allows python nodes to be remapped using ros2/rcl#217.
CI

Linux 
Linux-aarch64 
macOS 
Windows 

connects to ros2/ros2#450","New CI after fixing a windows warning

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,179,2018-03-05T22:10:19Z,2018-03-06T19:38:22Z,2018-03-06T19:38:27Z,MERGED,True,56,7,1,https://github.com/sloretz,rclpy_init() passes command line arguments to rcl_init(),4,[],https://github.com/ros2/rclpy/pull/179,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/179#issuecomment-370854071,"This passes command line arguments through to rcl. Previously there was only a TODO message. This PR allows python nodes to be remapped using ros2/rcl#217.
CI

Linux 
Linux-aarch64 
macOS 
Windows 

connects to ros2/ros2#450","CI with 93c634b

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,180,2018-03-21T23:48:55Z,2018-03-27T22:06:21Z,2018-03-27T22:06:25Z,MERGED,True,158,1,3,https://github.com/mjcarroll,Remove ros arguments,5,[],https://github.com/ros2/rclpy/pull/180,https://github.com/mjcarroll,1,https://github.com/ros2/rclpy/pull/180,"Python support for remove command line arguments for ros2/rcl#219
Connects to ros2/rcl#219","Python support for remove command line arguments for ros2/rcl#219
Connects to ros2/rcl#219",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,180,2018-03-21T23:48:55Z,2018-03-27T22:06:21Z,2018-03-27T22:06:25Z,MERGED,True,158,1,3,https://github.com/mjcarroll,Remove ros arguments,5,[],https://github.com/ros2/rclpy/pull/180,https://github.com/mjcarroll,2,https://github.com/ros2/rclpy/pull/180#issuecomment-375133093,"Python support for remove command line arguments for ros2/rcl#219
Connects to ros2/rcl#219","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,180,2018-03-21T23:48:55Z,2018-03-27T22:06:21Z,2018-03-27T22:06:25Z,MERGED,True,158,1,3,https://github.com/mjcarroll,Remove ros arguments,5,[],https://github.com/ros2/rclpy/pull/180,https://github.com/mxgrey,3,https://github.com/ros2/rclpy/pull/180#issuecomment-375452757,"Python support for remove command line arguments for ros2/rcl#219
Connects to ros2/rcl#219","Regarding the MSVC warning that changed the Windows build to unstable, I believe this is an MSVC front-end parsing error (which occur shockingly often).
It's complaining about implicitly casting a const char * * to a void * on the premise of C4090. The purpose of that warning is to avoid a situation where a pointer that points to a const value is given to a pointer that points to a mutable value.
However, the lines it's complaining about are not converting from pointer-to-const-value to pointer-to-mutable-value. The warning would be correct if we were trying to convert a char * const * to a void *, but instead we are converting from a const char * *, which is equivalent to char const * *.
I'm pretty convinced that whatever parsing method is being used to trigger the warning is misreading the cv-qualifications of the pointer.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,180,2018-03-21T23:48:55Z,2018-03-27T22:06:21Z,2018-03-27T22:06:25Z,MERGED,True,158,1,3,https://github.com/mjcarroll,Remove ros arguments,5,[],https://github.com/ros2/rclpy/pull/180,https://github.com/mjcarroll,4,https://github.com/ros2/rclpy/pull/180#issuecomment-375489990,"Python support for remove command line arguments for ros2/rcl#219
Connects to ros2/rcl#219","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,180,2018-03-21T23:48:55Z,2018-03-27T22:06:21Z,2018-03-27T22:06:25Z,MERGED,True,158,1,3,https://github.com/mjcarroll,Remove ros arguments,5,[],https://github.com/ros2/rclpy/pull/180,https://github.com/mjcarroll,5,https://github.com/ros2/rclpy/pull/180#issuecomment-376337291,"Python support for remove command line arguments for ros2/rcl#219
Connects to ros2/rcl#219","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,182,2018-04-06T14:53:08Z,2018-04-11T17:42:47Z,2018-04-11T17:42:54Z,MERGED,True,1,1,1,https://github.com/mjcarroll,Fix zero-initialization of rcl_arguments_t,1,[],https://github.com/ros2/rclpy/pull/182,https://github.com/mjcarroll,1,https://github.com/ros2/rclpy/pull/182,Connects to ros2/rclcpp#458,Connects to ros2/rclcpp#458,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,183,2018-04-07T06:10:22Z,2018-05-11T17:50:49Z,2018-05-11T17:50:54Z,MERGED,True,132,4,3,https://github.com/Nickolaim,Count publishers and subscribers,6,['enhancement'],https://github.com/ros2/rclpy/pull/183,https://github.com/Nickolaim,1,https://github.com/ros2/rclpy/pull/183,"This is a partial implementation of ros2/ros2cli#60.  I marked it as a WIP since I expect some comments.  Plan to merge changes later and do another PR.
Connects to ros2/ros2cli#60","This is a partial implementation of ros2/ros2cli#60.  I marked it as a WIP since I expect some comments.  Plan to merge changes later and do another PR.
Connects to ros2/ros2cli#60",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,183,2018-04-07T06:10:22Z,2018-05-11T17:50:49Z,2018-05-11T17:50:54Z,MERGED,True,132,4,3,https://github.com/Nickolaim,Count publishers and subscribers,6,['enhancement'],https://github.com/ros2/rclpy/pull/183,https://github.com/wjwwood,2,https://github.com/ros2/rclpy/pull/183#issuecomment-379648572,"This is a partial implementation of ros2/ros2cli#60.  I marked it as a WIP since I expect some comments.  Plan to merge changes later and do another PR.
Connects to ros2/ros2cli#60",Is this still a WIP? Let us know when this and related pr's are ready for review.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,183,2018-04-07T06:10:22Z,2018-05-11T17:50:49Z,2018-05-11T17:50:54Z,MERGED,True,132,4,3,https://github.com/Nickolaim,Count publishers and subscribers,6,['enhancement'],https://github.com/ros2/rclpy/pull/183,https://github.com/wjwwood,3,https://github.com/ros2/rclpy/pull/183#issuecomment-379648636,"This is a partial implementation of ros2/ros2cli#60.  I marked it as a WIP since I expect some comments.  Plan to merge changes later and do another PR.
Connects to ros2/ros2cli#60","Sorry for closing, misclick on my part.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,183,2018-04-07T06:10:22Z,2018-05-11T17:50:49Z,2018-05-11T17:50:54Z,MERGED,True,132,4,3,https://github.com/Nickolaim,Count publishers and subscribers,6,['enhancement'],https://github.com/ros2/rclpy/pull/183,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/183#issuecomment-387910125,"This is a partial implementation of ros2/ros2cli#60.  I marked it as a WIP since I expect some comments.  Plan to merge changes later and do another PR.
Connects to ros2/ros2cli#60","CI

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,183,2018-04-07T06:10:22Z,2018-05-11T17:50:49Z,2018-05-11T17:50:54Z,MERGED,True,132,4,3,https://github.com/Nickolaim,Count publishers and subscribers,6,['enhancement'],https://github.com/ros2/rclpy/pull/183,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/183#issuecomment-388082003,"This is a partial implementation of ros2/ros2cli#60.  I marked it as a WIP since I expect some comments.  Plan to merge changes later and do another PR.
Connects to ros2/ros2cli#60",@Nickolaim Would you mind rebasing your branch with master? CI looks ok except for test failures caused by not having #182.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,183,2018-04-07T06:10:22Z,2018-05-11T17:50:49Z,2018-05-11T17:50:54Z,MERGED,True,132,4,3,https://github.com/Nickolaim,Count publishers and subscribers,6,['enhancement'],https://github.com/ros2/rclpy/pull/183,https://github.com/Nickolaim,6,https://github.com/ros2/rclpy/pull/183#issuecomment-388106992,"This is a partial implementation of ros2/ros2cli#60.  I marked it as a WIP since I expect some comments.  Plan to merge changes later and do another PR.
Connects to ros2/ros2cli#60","Sure, will do later today.  I am relatively new to github; for the request I plan to add remote upstream that points to ros2/rclpy and merge the changes from it.  Does it sound good?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,183,2018-04-07T06:10:22Z,2018-05-11T17:50:49Z,2018-05-11T17:50:54Z,MERGED,True,132,4,3,https://github.com/Nickolaim,Count publishers and subscribers,6,['enhancement'],https://github.com/ros2/rclpy/pull/183,https://github.com/Karsten1987,7,https://github.com/ros2/rclpy/pull/183#issuecomment-388113822,"This is a partial implementation of ros2/ros2cli#60.  I marked it as a WIP since I expect some comments.  Plan to merge changes later and do another PR.
Connects to ros2/ros2cli#60","I assume here your remote is called upstream, points to ros2/rclpy and your current branch is pubsub_count3. Then the way to rebase is as follows.
# making sure you update all remotes
git fetch --all 
# rebase your changes on top of current master
git rebase upstream/master",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,183,2018-04-07T06:10:22Z,2018-05-11T17:50:49Z,2018-05-11T17:50:54Z,MERGED,True,132,4,3,https://github.com/Nickolaim,Count publishers and subscribers,6,['enhancement'],https://github.com/ros2/rclpy/pull/183,https://github.com/sloretz,8,https://github.com/ros2/rclpy/pull/183#issuecomment-388152955,"This is a partial implementation of ros2/ros2cli#60.  I marked it as a WIP since I expect some comments.  Plan to merge changes later and do another PR.
Connects to ros2/ros2cli#60","@Nickolaim adding on to @Karsten1987's comment, assuming your fork is called origin make sure to
git checkout pubsub_count3
git pull origin pubsub_count3

then after rebasing
git push --force-with-lease origin pubsub_count3",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,183,2018-04-07T06:10:22Z,2018-05-11T17:50:49Z,2018-05-11T17:50:54Z,MERGED,True,132,4,3,https://github.com/Nickolaim,Count publishers and subscribers,6,['enhancement'],https://github.com/ros2/rclpy/pull/183,https://github.com/Nickolaim,9,https://github.com/ros2/rclpy/pull/183#issuecomment-388259137,"This is a partial implementation of ros2/ros2cli#60.  I marked it as a WIP since I expect some comments.  Plan to merge changes later and do another PR.
Connects to ros2/ros2cli#60",I rebased this PR with the master.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,183,2018-04-07T06:10:22Z,2018-05-11T17:50:49Z,2018-05-11T17:50:54Z,MERGED,True,132,4,3,https://github.com/Nickolaim,Count publishers and subscribers,6,['enhancement'],https://github.com/ros2/rclpy/pull/183,https://github.com/sloretz,10,https://github.com/ros2/rclpy/pull/183#issuecomment-388382215,"This is a partial implementation of ros2/ros2cli#60.  I marked it as a WIP since I expect some comments.  Plan to merge changes later and do another PR.
Connects to ros2/ros2cli#60","CI

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,183,2018-04-07T06:10:22Z,2018-05-11T17:50:49Z,2018-05-11T17:50:54Z,MERGED,True,132,4,3,https://github.com/Nickolaim,Count publishers and subscribers,6,['enhancement'],https://github.com/ros2/rclpy/pull/183,https://github.com/Nickolaim,11,https://github.com/ros2/rclpy/pull/183#issuecomment-388434406,"This is a partial implementation of ros2/ros2cli#60.  I marked it as a WIP since I expect some comments.  Plan to merge changes later and do another PR.
Connects to ros2/ros2cli#60",Looks like all the builds have passed.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,184,2018-04-17T20:21:46Z,2018-04-17T22:50:38Z,2018-04-17T22:50:44Z,MERGED,True,1,1,1,https://github.com/mikaelarguedas,increase timeout as if this is running with connext as the default it…,1,[],https://github.com/ros2/rclpy/pull/184,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/184,"… takes much longer
Tested this locally and it takes ~130 seconds for me with connext.
I put 200 as I expect it to take longer on slower machines
Examples of jobs failing when ran with connext only:
https://ci.ros2.org/job/ci_osx/3482/
https://ci.ros2.org/job/ci_linux/4235/
Jobs with this change:
https://ci.ros2.org/job/ci_linux/4241
Waiting for CI to come back to place this in review","… takes much longer
Tested this locally and it takes ~130 seconds for me with connext.
I put 200 as I expect it to take longer on slower machines
Examples of jobs failing when ran with connext only:
https://ci.ros2.org/job/ci_osx/3482/
https://ci.ros2.org/job/ci_linux/4235/
Jobs with this change:
https://ci.ros2.org/job/ci_linux/4241
Waiting for CI to come back to place this in review",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,184,2018-04-17T20:21:46Z,2018-04-17T22:50:38Z,2018-04-17T22:50:44Z,MERGED,True,1,1,1,https://github.com/mikaelarguedas,increase timeout as if this is running with connext as the default it…,1,[],https://github.com/ros2/rclpy/pull/184,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/184#issuecomment-382181546,"… takes much longer
Tested this locally and it takes ~130 seconds for me with connext.
I put 200 as I expect it to take longer on slower machines
Examples of jobs failing when ran with connext only:
https://ci.ros2.org/job/ci_osx/3482/
https://ci.ros2.org/job/ci_linux/4235/
Jobs with this change:
https://ci.ros2.org/job/ci_linux/4241
Waiting for CI to come back to place this in review","Build without this patch timed out on rcply tests: https://ci.ros2.org/job/ci_linux/4242/testReport/junit/(root)/projectroot/rclpytests/
With this patch it passed: https://ci.ros2.org/job/ci_linux/4243/
As this is already approved, I'm merging it without stopping by the review column",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,185,2018-04-25T18:28:42Z,2018-04-26T17:30:30Z,2018-04-26T17:30:45Z,MERGED,True,205,76,4,https://github.com/sloretz,Node accepts command line args and can ignore global args,1,[],https://github.com/ros2/rclpy/pull/185,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/185,"This adds cli_args and use_global_arguments as keyword arguments to the node constructor.
I moved code from remove_ros_arguments() that created a c-array from a python sequence of strings into separate functions so I could reuse it. The downside is the c-strings in the array are now copied where before a pointer to the string was borrowed. I think reusing code is preferable to avoiding a copy in this case because removing ros arguments or creating a node is probably an infrequent task.
In progress while CI runs

Linux 
Linux-aarch64 
macOS 
Windows","This adds cli_args and use_global_arguments as keyword arguments to the node constructor.
I moved code from remove_ros_arguments() that created a c-array from a python sequence of strings into separate functions so I could reuse it. The downside is the c-strings in the array are now copied where before a pointer to the string was borrowed. I think reusing code is preferable to avoiding a copy in this case because removing ros arguments or creating a node is probably an infrequent task.
In progress while CI runs

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,187,2018-05-01T16:14:08Z,2018-05-01T19:59:04Z,2018-05-01T19:59:20Z,MERGED,True,19,0,1,https://github.com/sloretz,Fini arguments passed to rcl_node_init(),1,[],https://github.com/ros2/rclpy/pull/187,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/187,"Finalize arguments because caller is responsible for freeing memory used by node options.
connects to ros2/rcl#231","Finalize arguments because caller is responsible for freeing memory used by node options.
connects to ros2/rcl#231",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,191,2018-06-18T23:24:52Z,2018-06-19T19:42:35Z,2018-06-19T19:42:40Z,MERGED,True,45,24,2,https://github.com/wjwwood,call the original signal handler when receiving SIGINT during wait,5,['bug'],https://github.com/ros2/rclpy/pull/191,https://github.com/wjwwood,1,https://github.com/ros2/rclpy/pull/191,"Fixes ros2/launch#80
Previously we just stored it and restored it after wait woke up.","Fixes ros2/launch#80
Previously we just stored it and restored it after wait woke up.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,191,2018-06-18T23:24:52Z,2018-06-19T19:42:35Z,2018-06-19T19:42:40Z,MERGED,True,45,24,2,https://github.com/wjwwood,call the original signal handler when receiving SIGINT during wait,5,['bug'],https://github.com/ros2/rclpy/pull/191,https://github.com/wjwwood,2,https://github.com/ros2/rclpy/pull/191#issuecomment-398263887,"Fixes ros2/launch#80
Previously we just stored it and restored it after wait woke up.","CI (--packages-up-to ros2launch rclpy/--packages-select rclpy ros2launch launch launch_ros):

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,191,2018-06-18T23:24:52Z,2018-06-19T19:42:35Z,2018-06-19T19:42:40Z,MERGED,True,45,24,2,https://github.com/wjwwood,call the original signal handler when receiving SIGINT during wait,5,['bug'],https://github.com/ros2/rclpy/pull/191,https://github.com/dhood,3,https://github.com/ros2/rclpy/pull/191#issuecomment-398464405,"Fixes ros2/launch#80
Previously we just stored it and restored it after wait woke up.",Linter fix,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,191,2018-06-18T23:24:52Z,2018-06-19T19:42:35Z,2018-06-19T19:42:40Z,MERGED,True,45,24,2,https://github.com/wjwwood,call the original signal handler when receiving SIGINT during wait,5,['bug'],https://github.com/ros2/rclpy/pull/191,https://github.com/dhood,4,https://github.com/ros2/rclpy/pull/191#issuecomment-398517156,"Fixes ros2/launch#80
Previously we just stored it and restored it after wait woke up.",@wjwwood can we merge this?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,191,2018-06-18T23:24:52Z,2018-06-19T19:42:35Z,2018-06-19T19:42:40Z,MERGED,True,45,24,2,https://github.com/wjwwood,call the original signal handler when receiving SIGINT during wait,5,['bug'],https://github.com/ros2/rclpy/pull/191,https://github.com/wjwwood,5,https://github.com/ros2/rclpy/pull/191#issuecomment-398521038,"Fixes ros2/launch#80
Previously we just stored it and restored it after wait woke up.","Yes, thanks for fixing the linter error.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,193,2018-06-20T01:54:44Z,2018-08-02T17:21:16Z,2018-08-02T17:21:20Z,MERGED,True,17,16,1,https://github.com/wjwwood,avoid leak of sigint guard condition used in wait sets,1,[],https://github.com/ros2/rclpy/pull/193,https://github.com/wjwwood,1,https://github.com/ros2/rclpy/pull/193,"I don't think this needs to go in for Bouncy, but it's just a small bug fix that we noticed when making some other changes.","I don't think this needs to go in for Bouncy, but it's just a small bug fix that we noticed when making some other changes.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,193,2018-06-20T01:54:44Z,2018-08-02T17:21:16Z,2018-08-02T17:21:20Z,MERGED,True,17,16,1,https://github.com/wjwwood,avoid leak of sigint guard condition used in wait sets,1,[],https://github.com/ros2/rclpy/pull/193,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/193#issuecomment-408185876,"I don't think this needs to go in for Bouncy, but it's just a small bug fix that we noticed when making some other changes.","CI

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,194,2018-06-22T17:25:20Z,2018-06-24T05:23:32Z,2018-06-24T05:23:41Z,MERGED,True,15,8,1,https://github.com/dhood,Register our signal handler in rclpy_init vs each wait,3,[],https://github.com/ros2/rclpy/pull/194,https://github.com/dhood,1,https://github.com/ros2/rclpy/pull/194,"This is my current thinking towards addressing ros2/launch#88
Opensplice python nodes would crash on sigint when calling the original signal handler. It is suspected that the signal handler by that point is changed to one that is opensplice specific, which is not what we are intending to call (we are intending to call the python signal module's handler).
I suspect that the point at which opensplice registers their signal handler is when a node is created, because if the creation of launch_ros' rclpy node is skipped (but we still call spin), then the crash on shutdown doesn't occur.
Registering the signal handler in rclpy_init (and only in init) matches the behaviour in rclcpp: https://github.com/ros2/rclcpp/blob/07e5be76218bd830c787b1d5c4af12e9eb6d5f6e/rclcpp/src/rclcpp/utilities.cpp#L187
This is in progress as I do more testing but feedback on the approach is appreciated","This is my current thinking towards addressing ros2/launch#88
Opensplice python nodes would crash on sigint when calling the original signal handler. It is suspected that the signal handler by that point is changed to one that is opensplice specific, which is not what we are intending to call (we are intending to call the python signal module's handler).
I suspect that the point at which opensplice registers their signal handler is when a node is created, because if the creation of launch_ros' rclpy node is skipped (but we still call spin), then the crash on shutdown doesn't occur.
Registering the signal handler in rclpy_init (and only in init) matches the behaviour in rclcpp: https://github.com/ros2/rclcpp/blob/07e5be76218bd830c787b1d5c4af12e9eb6d5f6e/rclcpp/src/rclcpp/utilities.cpp#L187
This is in progress as I do more testing but feedback on the approach is appreciated",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,194,2018-06-22T17:25:20Z,2018-06-24T05:23:32Z,2018-06-24T05:23:41Z,MERGED,True,15,8,1,https://github.com/dhood,Register our signal handler in rclpy_init vs each wait,3,[],https://github.com/ros2/rclpy/pull/194,https://github.com/dhood,2,https://github.com/ros2/rclpy/pull/194#issuecomment-399600660,"This is my current thinking towards addressing ros2/launch#88
Opensplice python nodes would crash on sigint when calling the original signal handler. It is suspected that the signal handler by that point is changed to one that is opensplice specific, which is not what we are intending to call (we are intending to call the python signal module's handler).
I suspect that the point at which opensplice registers their signal handler is when a node is created, because if the creation of launch_ros' rclpy node is skipped (but we still call spin), then the crash on shutdown doesn't occur.
Registering the signal handler in rclpy_init (and only in init) matches the behaviour in rclcpp: https://github.com/ros2/rclcpp/blob/07e5be76218bd830c787b1d5c4af12e9eb6d5f6e/rclcpp/src/rclcpp/utilities.cpp#L187
This is in progress as I do more testing but feedback on the approach is appreciated","I missed @wjwwood 's comment in #192 (comment) that also suggested that this is a reasonable approach.
I've testing this on windows, osx and xenial and it's behaving as expected.
One thing I noticed was that with opensplice on windows the return code is set to 3221225786, which according to this page just indicates the program was stopped with ctrl-c. That seems reasonable to me (note: the following invocation was including a workaround for ros2/launch#91)
C:\J\workspace\ci_packaging_windows\ws>ros2 launch demo_nodes_cpp talker_listener.launch.py
[INFO] [launch]: process[talker.EXE-1]: started with pid [10812]
[INFO] [launch]: process[listener.EXE-2]: started with pid [5184]
[INFO] [talker]: Publishing: 'Hello World: 1'
[INFO] [listener]: I heard: [Hello World: 1]
[INFO] [talker]: Publishing: 'Hello World: 2'
[INFO] [listener]: I heard: [Hello World: 2]
[INFO] [talker]: Publishing: 'Hello World: 3'
[INFO] [listener]: I heard: [Hello World: 3]
[INFO] [talker]: Publishing: 'Hello World: 4'
[INFO] [listener]: I heard: [Hello World: 4]
[WARNING] [launch.LaunchService]: user interrupted with ctrl-c (SIGINT)
ssignal_handler(2)
[WARNING] [launch.LaunchService]: user interrupted with ctrl-c (SIGINT) again, ignoring...
ignal_handler(2)
[ERROR] [launch]: process[talker.EXE-1] process has died [pid 10812, exit code 3221225786, cmd 'C:\J\workspace\ci_packag
ing_windows\ws\install\lib\demo_nodes_cpp\talker.EXE'].
[ERROR] [launch]: process[listener.EXE-2] process has died [pid 5184, exit code 3221225786, cmd 'C:\J\workspace\ci_packa
ging_windows\ws\install\lib\demo_nodes_cpp\listener.EXE'].

C:\J\workspace\ci_packaging_windows\ws>ros2 launch demo_nodes_cpp talker_listener.launch.py
[INFO] [launch]: process[talker.EXE-1]: started with pid [9456]
[INFO] [launch]: process[listener.EXE-2]: started with pid [12252]
[INFO] [talker]: Publishing: 'Hello World: 1'
[INFO] [listener]: I heard: [Hello World: 1]
signal_handler(2)
signal_handler(2)
[WARNING] [launch.LaunchService]: user interrupted with ctrl-c (SIGINT)
[WARNING] [launch.LaunchService]: user interrupted with ctrl-c (SIGINT)
[ERROR] [launch]: process[listener.EXE-2] process has died [pid 12252, exit code 3221225786, cmd 'C:\J\workspace\ci_pack
aging_windows\ws\install\lib\demo_nodes_cpp\listener.EXE'].
[ERROR] [launch]: process[talker.EXE-1] process has died [pid 9456, exit code 3221225786, cmd 'C:\J\workspace\ci_packagi
ng_windows\ws\install\lib\demo_nodes_cpp\talker.EXE'].

So I will run CI on this and put it in review",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,194,2018-06-22T17:25:20Z,2018-06-24T05:23:32Z,2018-06-24T05:23:41Z,MERGED,True,15,8,1,https://github.com/dhood,Register our signal handler in rclpy_init vs each wait,3,[],https://github.com/ros2/rclpy/pull/194,https://github.com/dhood,3,https://github.com/ros2/rclpy/pull/194#issuecomment-399613328,"This is my current thinking towards addressing ros2/launch#88
Opensplice python nodes would crash on sigint when calling the original signal handler. It is suspected that the signal handler by that point is changed to one that is opensplice specific, which is not what we are intending to call (we are intending to call the python signal module's handler).
I suspect that the point at which opensplice registers their signal handler is when a node is created, because if the creation of launch_ros' rclpy node is skipped (but we still call spin), then the crash on shutdown doesn't occur.
Registering the signal handler in rclpy_init (and only in init) matches the behaviour in rclcpp: https://github.com/ros2/rclcpp/blob/07e5be76218bd830c787b1d5c4af12e9eb6d5f6e/rclcpp/src/rclcpp/utilities.cpp#L187
This is in progress as I do more testing but feedback on the approach is appreciated","Full CI, including opensplice, before 8573fe7

Linux 
Linux-aarch64 
macOS 
Windows 

CI after 8573fe7 including packages that call shutdown:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,194,2018-06-22T17:25:20Z,2018-06-24T05:23:32Z,2018-06-24T05:23:41Z,MERGED,True,15,8,1,https://github.com/dhood,Register our signal handler in rclpy_init vs each wait,3,[],https://github.com/ros2/rclpy/pull/194,https://github.com/dhood,4,https://github.com/ros2/rclpy/pull/194#issuecomment-399617048,"This is my current thinking towards addressing ros2/launch#88
Opensplice python nodes would crash on sigint when calling the original signal handler. It is suspected that the signal handler by that point is changed to one that is opensplice specific, which is not what we are intending to call (we are intending to call the python signal module's handler).
I suspect that the point at which opensplice registers their signal handler is when a node is created, because if the creation of launch_ros' rclpy node is skipped (but we still call spin), then the crash on shutdown doesn't occur.
Registering the signal handler in rclpy_init (and only in init) matches the behaviour in rclcpp: https://github.com/ros2/rclcpp/blob/07e5be76218bd830c787b1d5c4af12e9eb6d5f6e/rclcpp/src/rclcpp/utilities.cpp#L187
This is in progress as I do more testing but feedback on the approach is appreciated",windows looks alright but I'm not expecting linux to come back green because I'm seeing a lot of failing launch tests.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,194,2018-06-22T17:25:20Z,2018-06-24T05:23:32Z,2018-06-24T05:23:41Z,MERGED,True,15,8,1,https://github.com/dhood,Register our signal handler in rclpy_init vs each wait,3,[],https://github.com/ros2/rclpy/pull/194,https://github.com/dhood,5,https://github.com/ros2/rclpy/pull/194#issuecomment-399621663,"This is my current thinking towards addressing ros2/launch#88
Opensplice python nodes would crash on sigint when calling the original signal handler. It is suspected that the signal handler by that point is changed to one that is opensplice specific, which is not what we are intending to call (we are intending to call the python signal module's handler).
I suspect that the point at which opensplice registers their signal handler is when a node is created, because if the creation of launch_ros' rclpy node is skipped (but we still call spin), then the crash on shutdown doesn't occur.
Registering the signal handler in rclpy_init (and only in init) matches the behaviour in rclcpp: https://github.com/ros2/rclcpp/blob/07e5be76218bd830c787b1d5c4af12e9eb6d5f6e/rclcpp/src/rclcpp/utilities.cpp#L187
This is in progress as I do more testing but feedback on the approach is appreciated","The issue was 69c19df: I had been testing with processes that were always calling wait and so had guard conditions set up, but that's not the case for processes that just have publishers, for example.
New CI (full, including opensplice):

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,196,2018-06-28T00:26:09Z,2018-06-28T01:12:54Z,2018-06-28T01:12:59Z,MERGED,True,5,1,1,https://github.com/wjwwood,claim maintainership,2,['documentation'],https://github.com/ros2/rclpy/pull/196,https://github.com/wjwwood,1,https://github.com/ros2/rclpy/pull/196,See: ros2/ros2#519,See: ros2/ros2#519,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,196,2018-06-28T00:26:09Z,2018-06-28T01:12:54Z,2018-06-28T01:12:59Z,MERGED,True,5,1,1,https://github.com/wjwwood,claim maintainership,2,['documentation'],https://github.com/ros2/rclpy/pull/196,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/196#issuecomment-400872323,See: ros2/ros2#519,"Thanks @wjwwood !
Can you please add the author entry under the license so that this still passes the linter?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,196,2018-06-28T00:26:09Z,2018-06-28T01:12:54Z,2018-06-28T01:12:59Z,MERGED,True,5,1,1,https://github.com/wjwwood,claim maintainership,2,['documentation'],https://github.com/ros2/rclpy/pull/196,https://github.com/wjwwood,3,https://github.com/ros2/rclpy/pull/196#issuecomment-400874523,See: ros2/ros2#519,"I don't understand the rationale for splitting up maintainers and authors, but sure ok :)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,196,2018-06-28T00:26:09Z,2018-06-28T01:12:54Z,2018-06-28T01:12:59Z,MERGED,True,5,1,1,https://github.com/wjwwood,claim maintainership,2,['documentation'],https://github.com/ros2/rclpy/pull/196,https://github.com/wjwwood,4,https://github.com/ros2/rclpy/pull/196#issuecomment-400874684,See: ros2/ros2#519,Do I have to do a new release of rclpy?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,196,2018-06-28T00:26:09Z,2018-06-28T01:12:54Z,2018-06-28T01:12:59Z,MERGED,True,5,1,1,https://github.com/wjwwood,claim maintainership,2,['documentation'],https://github.com/ros2/rclpy/pull/196,https://github.com/mikaelarguedas,5,https://github.com/ros2/rclpy/pull/196#issuecomment-400875488,See: ros2/ros2#519,"I don't understand the rationale for splitting up maintainers and authors, but sure ok :)

Me neither as I was not around when these xsds were created...

Do I have to do a new release of rclpy?

Yes please :)",True,{'CONFUSED': ['https://github.com/wjwwood']}
ros2/rclpy,https://github.com/ros2/rclpy,197,2018-06-28T01:39:13Z,2018-06-29T00:11:47Z,2018-06-29T00:11:51Z,MERGED,True,13,9,1,https://github.com/martins-mozeiko,Fix memory leaks,6,[],https://github.com/ros2/rclpy/pull/197,https://github.com/martins-mozeiko,1,https://github.com/ros2/rclpy/pull/197,"This fixes two memory leaks in rclpy.
Python Object reference count was not decreased where it is needed.","This fixes two memory leaks in rclpy.
Python Object reference count was not decreased where it is needed.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,197,2018-06-28T01:39:13Z,2018-06-29T00:11:47Z,2018-06-29T00:11:51Z,MERGED,True,13,9,1,https://github.com/martins-mozeiko,Fix memory leaks,6,[],https://github.com/ros2/rclpy/pull/197,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/197#issuecomment-400888274,"This fixes two memory leaks in rclpy.
Python Object reference count was not decreased where it is needed.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,197,2018-06-28T01:39:13Z,2018-06-29T00:11:47Z,2018-06-29T00:11:51Z,MERGED,True,13,9,1,https://github.com/martins-mozeiko,Fix memory leaks,6,[],https://github.com/ros2/rclpy/pull/197,https://github.com/dirk-thomas,3,https://github.com/ros2/rclpy/pull/197#issuecomment-400897923,"This fixes two memory leaks in rclpy.
Python Object reference count was not decreased where it is needed.",@martins-mozeiko Please provide more information about how you debugged / tested this - at best a reproducible example.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,197,2018-06-28T01:39:13Z,2018-06-29T00:11:47Z,2018-06-29T00:11:51Z,MERGED,True,13,9,1,https://github.com/martins-mozeiko,Fix memory leaks,6,[],https://github.com/ros2/rclpy/pull/197,https://github.com/martins-mozeiko,4,https://github.com/ros2/rclpy/pull/197#issuecomment-400908179,"This fixes two memory leaks in rclpy.
Python Object reference count was not decreased where it is needed.","One memory leak happens in rclpy_take function. It does not release pymsg python object. This function is called for all incoming messages. This means - anything that subscribes will leak memory.
Simple test to demonstrate this is to run demo listener: ros2 run demo_nodes_py listener.
Launch talker in separate terminal and start watching memory usage of listener process. It will grow unbounded.
Here's an example from my machine (Ubuntu 16.04). First I modified talker node to produce more message to get memory usage grow faster - set timer_period to 0.001 and disable logging to stdout so it does not slow down on printing messages to terminal. Now check the memory usage immediately after I run the listener node:
$ grep VmRSS /proc/`pgrep -f demo_nodes_py/listener`/status
VmRSS:     32700 kB

After running for ~10min:
$ grep VmRSS /proc/`pgrep -f demo_nodes_py/listener`/status
VmRSS:     80112 kB

And it keeps growing...
Other memory leak happens in rclpy_get_ready_entities function which is called multiple times from here. If any of these calls will return non-empty list, it will leak memory for each element that is added to list. In my case I was using timer in a ros node, so I saw memory being allocated because of call in line 416. But this will happen for other calls as well (not exactly sure how to reproduce those).
Reproducing memory leak for timer is easy with ros2 run demo_nodes_py talker. It will use timer to publish messages.
Same a before I run modified talker with timer_period set to 0.001 to produce much more messages so it is easier to see how memory grows. Here's the memory usage immediately after I launch it:
$ grep VmRSS /proc/`pgrep -f demo_nodes_py/talker`/status
VmRSS:     32360 kB

Here's the memory usage after ~10 min:
$ grep VmRSS /proc/`pgrep -f demo_nodes_py/talker`/status
VmRSS:     59392 kB

And it keeps growing...
After this patch is applied to rclpy, the memory usage for these two demo nodes does not change at all regardless of how long you run.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,197,2018-06-28T01:39:13Z,2018-06-29T00:11:47Z,2018-06-29T00:11:51Z,MERGED,True,13,9,1,https://github.com/martins-mozeiko,Fix memory leaks,6,[],https://github.com/ros2/rclpy/pull/197,https://github.com/dirk-thomas,5,https://github.com/ros2/rclpy/pull/197#issuecomment-401094282,"This fixes two memory leaks in rclpy.
Python Object reference count was not decreased where it is needed.","I just tried to reproduce your example. I modified the talker to fire the timer every ms and removd the log call from the talker (actually print a message every one thousand msgs to see progress). When I run both nodes they use a constant memory amount of 21.2 MB (talker) and 21.4 MB (listener) - the same after running for several minutes.
Can you please clarify which state of the code you are basing your testing on. Is it the latest release (Ardent) or the current master? Please also mention the Python version you are using  - since I am testing on Bionic I am using 3.6.5.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,197,2018-06-28T01:39:13Z,2018-06-29T00:11:47Z,2018-06-29T00:11:51Z,MERGED,True,13,9,1,https://github.com/martins-mozeiko,Fix memory leaks,6,[],https://github.com/ros2/rclpy/pull/197,https://github.com/martins-mozeiko,6,https://github.com/ros2/rclpy/pull/197#issuecomment-401141125,"This fixes two memory leaks in rclpy.
Python Object reference count was not decreased where it is needed.","I'm pretty sure this is Python version independent.
For this demo talker/listener example I was using Ubuntu 16.04 with Python 3.5.2 and ros2 build from current master. I was running it on x86_64 desktop.
Just now I tried with Ubuntu 18.04 that has Python 3.6.5 - same result, both talker and listener are leaking.
But we have also reproduced this on Yocto based build with Python 3.5.2, using Ardent (0.4.0 tag) and running on armv7 Raspberry Pi 3 with custom ros2 nodes.
Just to be clear, my modified talker node looks like this:
class Talker(Node):

    def __init__(self):
        super().__init__('talker')
        self.i = 0
        self.pub = self.create_publisher(String, 'chatter')
        timer_period = 0.001   ### MODIFIED HERE
        self.tmr = self.create_timer(timer_period, self.timer_callback)

    def timer_callback(self):
        msg = String()
        msg.data = 'Hello World: {0}'.format(self.i)
        self.i += 1
        #self.get_logger().info('Publishing: ""{0}""'.format(msg.data)) ### COMMENTED OUT
        self.pub.publish(msg)

Here's a screen recording of session that gives me memory leak on Ubuntu 18.04 with current master of ros2. User is root because I'm running this inside docker: https://asciinema.org/a/a5Gg2GvjhBjkYPVOXiygWtOAY",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,197,2018-06-28T01:39:13Z,2018-06-29T00:11:47Z,2018-06-29T00:11:51Z,MERGED,True,13,9,1,https://github.com/martins-mozeiko,Fix memory leaks,6,[],https://github.com/ros2/rclpy/pull/197,https://github.com/dirk-thomas,7,https://github.com/ros2/rclpy/pull/197#issuecomment-401192087,"This fixes two memory leaks in rclpy.
Python Object reference count was not decreased where it is needed.","Local testing looks promising but here are a few CI builds just ot make sure
Just testing rclpy: 

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,197,2018-06-28T01:39:13Z,2018-06-29T00:11:47Z,2018-06-29T00:11:51Z,MERGED,True,13,9,1,https://github.com/martins-mozeiko,Fix memory leaks,6,[],https://github.com/ros2/rclpy/pull/197,https://github.com/martins-mozeiko,8,https://github.com/ros2/rclpy/pull/197#issuecomment-401203512,"This fixes two memory leaks in rclpy.
Python Object reference count was not decreased where it is needed.",@dirk-thomas FYI I found one more memory leak in Python code generated by rosidl. It's a pretty big one actually. I'll be submitting new pull request for rosidl shortly.,True,{'THUMBS_UP': ['https://github.com/dirk-thomas']}
ros2/rclpy,https://github.com/ros2/rclpy,197,2018-06-28T01:39:13Z,2018-06-29T00:11:47Z,2018-06-29T00:11:51Z,MERGED,True,13,9,1,https://github.com/martins-mozeiko,Fix memory leaks,6,[],https://github.com/ros2/rclpy/pull/197,https://github.com/mikaelarguedas,9,https://github.com/ros2/rclpy/pull/197#issuecomment-401209741,"This fixes two memory leaks in rclpy.
Python Object reference count was not decreased where it is needed.",ci looks happy 👍,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,199,2018-06-28T16:53:25Z,2018-06-28T22:40:34Z,2018-06-28T22:41:03Z,MERGED,True,12,0,2,https://github.com/dirk-thomas,Fix exception handling,9,['bug'],https://github.com/ros2/rclpy/pull/199,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/199,"Fixes #198.
Looking for feedback on this patch.","Fixes #198.
Looking for feedback on this patch.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,199,2018-06-28T16:53:25Z,2018-06-28T22:40:34Z,2018-06-28T22:41:03Z,MERGED,True,12,0,2,https://github.com/dirk-thomas,Fix exception handling,9,['bug'],https://github.com/ros2/rclpy/pull/199,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/199#issuecomment-401159345,"Fixes #198.
Looking for feedback on this patch.","We can't check for done in result() (see 8b9fe32) since result is now being called after a spin_once(). A coroutines which yields won't be finished after a single spin though.
This should at least pass our tests now. Back in review.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,199,2018-06-28T16:53:25Z,2018-06-28T22:40:34Z,2018-06-28T22:41:03Z,MERGED,True,12,0,2,https://github.com/dirk-thomas,Fix exception handling,9,['bug'],https://github.com/ros2/rclpy/pull/199,https://github.com/dirk-thomas,3,https://github.com/ros2/rclpy/pull/199#issuecomment-401159686,"Fixes #198.
Looking for feedback on this patch.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,199,2018-06-28T16:53:25Z,2018-06-28T22:40:34Z,2018-06-28T22:41:03Z,MERGED,True,12,0,2,https://github.com/dirk-thomas,Fix exception handling,9,['bug'],https://github.com/ros2/rclpy/pull/199,https://github.com/dirk-thomas,4,https://github.com/ros2/rclpy/pull/199#issuecomment-401170130,"Fixes #198.
Looking for feedback on this patch.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,203,2018-07-11T21:18:34Z,2018-07-12T20:57:52Z,2018-07-12T20:57:56Z,MERGED,True,113,107,1,https://github.com/martins-mozeiko,Fixes memory leaks for nested fields,4,[],https://github.com/ros2/rclpy/pull/203,https://github.com/martins-mozeiko,1,https://github.com/ros2/rclpy/pull/203,"This separates memory allocation out from convert_from_py function. Now it uses separate create_message function to allocate message, making it explicit gives better control where and how memory is allocated and freed.
See ros2/rosidl_python#5 for details.
This pull request depends on changes in ros2/rosidl_python#7
connects to ros2/rosidl_python#7","This separates memory allocation out from convert_from_py function. Now it uses separate create_message function to allocate message, making it explicit gives better control where and how memory is allocated and freed.
See ros2/rosidl_python#5 for details.
This pull request depends on changes in ros2/rosidl_python#7
connects to ros2/rosidl_python#7",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,204,2018-07-13T22:36:27Z,2018-07-17T18:43:37Z,2018-07-17T18:43:41Z,MERGED,True,23,21,4,https://github.com/mikaelarguedas,use test_msgs instead of std_msgs,1,[],https://github.com/ros2/rclpy/pull/204,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/204,"To be backported in bouncy ros2/ros2#537
Allows to release the rclpy repo without needing to release common_interfaces first
Connects to ros2/rcl#270
CI at ros2/rcl#270 (comment)","To be backported in bouncy ros2/ros2#537
Allows to release the rclpy repo without needing to release common_interfaces first
Connects to ros2/rcl#270
CI at ros2/rcl#270 (comment)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,204,2018-07-13T22:36:27Z,2018-07-17T18:43:37Z,2018-07-17T18:43:41Z,MERGED,True,23,21,4,https://github.com/mikaelarguedas,use test_msgs instead of std_msgs,1,[],https://github.com/ros2/rclpy/pull/204,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/204#issuecomment-404971422,"To be backported in bouncy ros2/ros2#537
Allows to release the rclpy repo without needing to release common_interfaces first
Connects to ros2/rcl#270
CI at ros2/rcl#270 (comment)","To be backported in bouncy ros2/ros2#537

Why is this necessary for the Bouncy patch release?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,204,2018-07-13T22:36:27Z,2018-07-17T18:43:37Z,2018-07-17T18:43:41Z,MERGED,True,23,21,4,https://github.com/mikaelarguedas,use test_msgs instead of std_msgs,1,[],https://github.com/ros2/rclpy/pull/204,https://github.com/mikaelarguedas,3,https://github.com/ros2/rclpy/pull/204#issuecomment-404973290,"To be backported in bouncy ros2/ros2#537
Allows to release the rclpy repo without needing to release common_interfaces first
Connects to ros2/rcl#270
CI at ros2/rcl#270 (comment)",Will not be necessary with the requirement of not overlapping repos to variants being dropped for Bouncy ros2/variants#1 (comment),True,{}
ros2/rclpy,https://github.com/ros2/rclpy,206,2018-07-16T21:39:51Z,2019-05-02T01:42:16Z,2019-05-02T01:42:21Z,CLOSED,False,82,1,2,https://github.com/sloretz,Create entity wake executor,2,[],https://github.com/ros2/rclpy/pull/206,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/206,"This probably fixes #188, but I haven't figured out how to write a test that isn't blocked by #205.
Every node gets a guard condition that is triggered when an entity is created or destroyed. The guard condition triggering will wake the executor which will cause it to rebuild the wait set.
The test is broken. It requires an executor to be blocked in rclpy_wait() when an entity is created/destroyed. However, rclpy_wait() is not woken when an executor is shutdown, and the blocked executor lives forever. Every other test using an executor fails because #191 uses a global variable to prevent two executors running at the same time and it seems pytest runs all tests in the same python process.
connects to #188
blocked by #205","This probably fixes #188, but I haven't figured out how to write a test that isn't blocked by #205.
Every node gets a guard condition that is triggered when an entity is created or destroyed. The guard condition triggering will wake the executor which will cause it to rebuild the wait set.
The test is broken. It requires an executor to be blocked in rclpy_wait() when an entity is created/destroyed. However, rclpy_wait() is not woken when an executor is shutdown, and the blocked executor lives forever. Every other test using an executor fails because #191 uses a global variable to prevent two executors running at the same time and it seems pytest runs all tests in the same python process.
connects to #188
blocked by #205",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,206,2018-07-16T21:39:51Z,2019-05-02T01:42:16Z,2019-05-02T01:42:21Z,CLOSED,False,82,1,2,https://github.com/sloretz,Create entity wake executor,2,[],https://github.com/ros2/rclpy/pull/206,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/206#issuecomment-488531148,"This probably fixes #188, but I haven't figured out how to write a test that isn't blocked by #205.
Every node gets a guard condition that is triggered when an entity is created or destroyed. The guard condition triggering will wake the executor which will cause it to rebuild the wait set.
The test is broken. It requires an executor to be blocked in rclpy_wait() when an entity is created/destroyed. However, rclpy_wait() is not woken when an executor is shutdown, and the blocked executor lives forever. Every other test using an executor fails because #191 uses a global variable to prevent two executors running at the same time and it seems pytest runs all tests in the same python process.
connects to #188
blocked by #205",Replaced by #336,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,207,2018-07-17T18:48:52Z,2018-07-17T19:00:04Z,2018-07-17T19:00:09Z,CLOSED,False,21,23,4,https://github.com/mikaelarguedas,"Revert ""use test_msgs instead of std_msgs""",1,[],https://github.com/ros2/rclpy/pull/207,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/207,"Reverts #204
My bad I was holding #204 to cut the release from master and fast forward it to the bouncy branch before merging...
So I'm reverting #204, cutting the release and then will reapply it.","Reverts #204
My bad I was holding #204 to cut the release from master and fast forward it to the bouncy branch before merging...
So I'm reverting #204, cutting the release and then will reapply it.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,207,2018-07-17T18:48:52Z,2018-07-17T19:00:04Z,2018-07-17T19:00:09Z,CLOSED,False,21,23,4,https://github.com/mikaelarguedas,"Revert ""use test_msgs instead of std_msgs""",1,[],https://github.com/ros2/rclpy/pull/207,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/207#issuecomment-405689500,"Reverts #204
My bad I was holding #204 to cut the release from master and fast forward it to the bouncy branch before merging...
So I'm reverting #204, cutting the release and then will reapply it.","Since this only changes tests and a <test_depend>, would it be harmless to include this in the patch release?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,207,2018-07-17T18:48:52Z,2018-07-17T19:00:04Z,2018-07-17T19:00:09Z,CLOSED,False,21,23,4,https://github.com/mikaelarguedas,"Revert ""use test_msgs instead of std_msgs""",1,[],https://github.com/ros2/rclpy/pull/207,https://github.com/mikaelarguedas,3,https://github.com/ros2/rclpy/pull/207#issuecomment-405689912,"Reverts #204
My bad I was holding #204 to cut the release from master and fast forward it to the bouncy branch before merging...
So I'm reverting #204, cutting the release and then will reapply it.","it should not be impactful for users. It just doesn't ""need"" to be backported but should be fine to keep it as part of the patch release",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,207,2018-07-17T18:48:52Z,2018-07-17T19:00:04Z,2018-07-17T19:00:09Z,CLOSED,False,21,23,4,https://github.com/mikaelarguedas,"Revert ""use test_msgs instead of std_msgs""",1,[],https://github.com/ros2/rclpy/pull/207,https://github.com/mikaelarguedas,4,https://github.com/ros2/rclpy/pull/207#issuecomment-405691556,"Reverts #204
My bad I was holding #204 to cut the release from master and fast forward it to the bouncy branch before merging...
So I'm reverting #204, cutting the release and then will reapply it.",closing this then and cutting the release with the current state from master,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,208,2018-07-17T19:11:17Z,2018-07-17T22:11:19Z,2018-07-17T22:11:23Z,MERGED,True,147,129,6,https://github.com/mikaelarguedas,Fast-forward bouncy to catchup with master for patch 1 release,4,[],https://github.com/ros2/rclpy/pull/208,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/208,,,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,208,2018-07-17T19:11:17Z,2018-07-17T22:11:19Z,2018-07-17T22:11:23Z,MERGED,True,147,129,6,https://github.com/mikaelarguedas,Fast-forward bouncy to catchup with master for patch 1 release,4,[],https://github.com/ros2/rclpy/pull/208,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/208#issuecomment-405739024,,CI failure expected as this relies on features from rosidl_generator_py 0.5.2 ros2/rosdistro#244,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,208,2018-07-17T19:11:17Z,2018-07-17T22:11:19Z,2018-07-17T22:11:23Z,MERGED,True,147,129,6,https://github.com/mikaelarguedas,Fast-forward bouncy to catchup with master for patch 1 release,4,[],https://github.com/ros2/rclpy/pull/208,https://github.com/mikaelarguedas,3,https://github.com/ros2/rclpy/pull/208#issuecomment-405744861,,Merging as is and will trigger dev job manually once dependencies have been released and rebuilt,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,209,2018-07-18T06:34:57Z,2018-07-26T22:51:02Z,2018-07-30T23:46:02Z,MERGED,True,815,0,7,https://github.com/dhood,"Time, Duration, Clock wrapping rcl",26,[],https://github.com/ros2/rclpy/pull/209,https://github.com/dhood,1,https://github.com/ros2/rclpy/pull/209,"connects to #186
Still a work-in-progress but input is welcome.
The scope of this PR is the first few steps of #186 (comment). It excludes TimeSource/ROS time implementation to avoid the PR getting too large.","connects to #186
Still a work-in-progress but input is welcome.
The scope of this PR is the first few steps of #186 (comment). It excludes TimeSource/ROS time implementation to avoid the PR getting too large.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,209,2018-07-18T06:34:57Z,2018-07-26T22:51:02Z,2018-07-30T23:46:02Z,MERGED,True,815,0,7,https://github.com/dhood,"Time, Duration, Clock wrapping rcl",26,[],https://github.com/ros2/rclpy/pull/209,https://github.com/dhood,2,https://github.com/ros2/rclpy/pull/209#issuecomment-406199435,"connects to #186
Still a work-in-progress but input is welcome.
The scope of this PR is the first few steps of #186 (comment). It excludes TimeSource/ROS time implementation to avoid the PR getting too large.","Putting this in review:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,209,2018-07-18T06:34:57Z,2018-07-26T22:51:02Z,2018-07-30T23:46:02Z,MERGED,True,815,0,7,https://github.com/dhood,"Time, Duration, Clock wrapping rcl",26,[],https://github.com/ros2/rclpy/pull/209,https://github.com/dhood,3,https://github.com/ros2/rclpy/pull/209#issuecomment-406450031,"connects to #186
Still a work-in-progress but input is welcome.
The scope of this PR is the first few steps of #186 (comment). It excludes TimeSource/ROS time implementation to avoid the PR getting too large.","CI without typo in args:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,209,2018-07-18T06:34:57Z,2018-07-26T22:51:02Z,2018-07-30T23:46:02Z,MERGED,True,815,0,7,https://github.com/dhood,"Time, Duration, Clock wrapping rcl",26,[],https://github.com/ros2/rclpy/pull/209,https://github.com/dhood,4,https://github.com/ros2/rclpy/pull/209#issuecomment-408251413,"connects to #186
Still a work-in-progress but input is welcome.
The scope of this PR is the first few steps of #186 (comment). It excludes TimeSource/ROS time implementation to avoid the PR getting too large.","@sloretz from discussion in ros2/rclcpp#525, this implementation needs to allow negative Time and Durations, which currently it doesn't. My thinking, to assist reviewing, is to merge this PR with its current implementation (negative Time and Duration not supported) and create a followup that supports negatives, so that it's just the diff that needs to be reviewed incrementally. sound good?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,209,2018-07-18T06:34:57Z,2018-07-26T22:51:02Z,2018-07-30T23:46:02Z,MERGED,True,815,0,7,https://github.com/dhood,"Time, Duration, Clock wrapping rcl",26,[],https://github.com/ros2/rclpy/pull/209,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/209#issuecomment-408251851,"connects to #186
Still a work-in-progress but input is welcome.
The scope of this PR is the first few steps of #186 (comment). It excludes TimeSource/ROS time implementation to avoid the PR getting too large.",@dhood Sounds good to me,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,209,2018-07-18T06:34:57Z,2018-07-26T22:51:02Z,2018-07-30T23:46:02Z,MERGED,True,815,0,7,https://github.com/dhood,"Time, Duration, Clock wrapping rcl",26,[],https://github.com/ros2/rclpy/pull/209,https://github.com/dhood,6,https://github.com/ros2/rclpy/pull/209#issuecomment-408252780,"connects to #186
Still a work-in-progress but input is welcome.
The scope of this PR is the first few steps of #186 (comment). It excludes TimeSource/ROS time implementation to avoid the PR getting too large.","Thanks!

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,210,2018-07-20T11:13:25Z,2018-08-03T21:44:39Z,2018-08-03T21:44:44Z,MERGED,True,403,4,7,https://github.com/dhood,TimeSource and support for ROS time,16,[],https://github.com/ros2/rclpy/pull/210,https://github.com/dhood,1,https://github.com/ros2/rclpy/pull/210,"Connects to #186
Requires ros2/rcl#274
Gives nodes a clock of type ROS_TIME which will reflect the time received on /clock topic if the Time Source has had use of ROS time activated. Since parameters aren't available in python yet, there's no support for the use_sim_time parameter, but the Time Source can have ROS time activated manually by calling time_source.ros_time_is_active = True.
Support for clock jump notifiers not targeted for this PR.","Connects to #186
Requires ros2/rcl#274
Gives nodes a clock of type ROS_TIME which will reflect the time received on /clock topic if the Time Source has had use of ROS time activated. Since parameters aren't available in python yet, there's no support for the use_sim_time parameter, but the Time Source can have ROS time activated manually by calling time_source.ros_time_is_active = True.
Support for clock jump notifiers not targeted for this PR.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,210,2018-07-20T11:13:25Z,2018-08-03T21:44:39Z,2018-08-03T21:44:44Z,MERGED,True,403,4,7,https://github.com/dhood,TimeSource and support for ROS time,16,[],https://github.com/ros2/rclpy/pull/210,https://github.com/dhood,2,https://github.com/ros2/rclpy/pull/210#issuecomment-409056686,"Connects to #186
Requires ros2/rcl#274
Gives nodes a clock of type ROS_TIME which will reflect the time received on /clock topic if the Time Source has had use of ROS time activated. Since parameters aren't available in python yet, there's no support for the use_sim_time parameter, but the Time Source can have ROS time activated manually by calling time_source.ros_time_is_active = True.
Support for clock jump notifiers not targeted for this PR.","Putting this in review
The description of this PR has been updated to reflect a recent change to the code: Following discussion in ros2/rclcpp#516 I understand now that all clocks managed by a time source should have the same value for ros_time_is_active. So, I have added ros_time_is_active to the TimeSource class, and made it read-only on the ROSClock class (before clocks could individually have use of ROS time configured on them, now it is 'inherited' from the TimeSource's state).
The ROSClock class has also been added recently as a specialisation of the Clock class that provides ROS time-specific methods. A time source can still take in a clock like Clock(clock_type=ROS_TIME), but the expected usage is that it will be passed a ROSClock (that is what will be stored underneath). I did this because I thought it was cleaner than having methods that only applied for ROS time in the general Clock class (e.g. like this), but am open to alternatives.
Overall I tried to mirror the implementation in rclcpp, where possible. It diverges in the following ways:

Clock callbacks have not been implemented yet
Support for parameters isn't available in rclpy yet so the TimeSource has to have ros_time_is_active set manually as opposed to with the use_sim_time parameter
A ROSClock specialisation does not exist in rclcpp, but does in rclpy.
I aimed for the end-result from ros2/rclcpp#515 where a subscription is only created for a Timesource if sim time is in use. That is not the current state in rclcpp however.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,210,2018-07-20T11:13:25Z,2018-08-03T21:44:39Z,2018-08-03T21:44:44Z,MERGED,True,403,4,7,https://github.com/dhood,TimeSource and support for ROS time,16,[],https://github.com/ros2/rclpy/pull/210,https://github.com/dhood,3,https://github.com/ros2/rclpy/pull/210#issuecomment-410344004,"Connects to #186
Requires ros2/rcl#274
Gives nodes a clock of type ROS_TIME which will reflect the time received on /clock topic if the Time Source has had use of ROS time activated. Since parameters aren't available in python yet, there's no support for the use_sim_time parameter, but the Time Source can have ROS time activated manually by calling time_source.ros_time_is_active = True.
Support for clock jump notifiers not targeted for this PR.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,210,2018-07-20T11:13:25Z,2018-08-03T21:44:39Z,2018-08-03T21:44:44Z,MERGED,True,403,4,7,https://github.com/dhood,TimeSource and support for ROS time,16,[],https://github.com/ros2/rclpy/pull/210,https://github.com/dhood,4,https://github.com/ros2/rclpy/pull/210#issuecomment-410374371,"Connects to #186
Requires ros2/rcl#274
Gives nodes a clock of type ROS_TIME which will reflect the time received on /clock topic if the Time Source has had use of ROS time activated. Since parameters aren't available in python yet, there's no support for the use_sim_time parameter, but the Time Source can have ROS time activated manually by calling time_source.ros_time_is_active = True.
Support for clock jump notifiers not targeted for this PR.","Interestingly OS X (only) is failing with ValueError: PyCapsule_GetPointer called with invalid PyCapsule object when _rclpy.rclpy_clock_set_ros_time_override_is_enabled(self._clock_handle, enabled) is called. Not sure yet what's causing that: will have to look into it before this can be merged",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,210,2018-07-20T11:13:25Z,2018-08-03T21:44:39Z,2018-08-03T21:44:44Z,MERGED,True,403,4,7,https://github.com/dhood,TimeSource and support for ROS time,16,[],https://github.com/ros2/rclpy/pull/210,https://github.com/dhood,5,https://github.com/ros2/rclpy/pull/210#issuecomment-410381523,"Connects to #186
Requires ros2/rcl#274
Gives nodes a clock of type ROS_TIME which will reflect the time received on /clock topic if the Time Source has had use of ROS time activated. Since parameters aren't available in python yet, there's no support for the use_sim_time parameter, but the Time Source can have ROS time activated manually by calling time_source.ros_time_is_active = True.
Support for clock jump notifiers not targeted for this PR.","Back in action!
Will go ahead and merge this now the bug's been fixed in 6ac5bf9

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,211,2018-07-24T22:44:16Z,2018-07-28T01:28:21Z,2018-07-28T01:28:25Z,MERGED,True,50,19,3,https://github.com/dirk-thomas,create timer with clock,5,['enhancement'],https://github.com/ros2/rclpy/pull/211,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/211,Match API change from ros2/rcl#272. Connect to ros2/rclcpp#523.,Match API change from ros2/rcl#272. Connect to ros2/rclcpp#523.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,211,2018-07-24T22:44:16Z,2018-07-28T01:28:21Z,2018-07-28T01:28:25Z,MERGED,True,50,19,3,https://github.com/dirk-thomas,create timer with clock,5,['enhancement'],https://github.com/ros2/rclpy/pull/211,https://github.com/dhood,2,https://github.com/ros2/rclpy/pull/211#issuecomment-408279117,Match API change from ros2/rcl#272. Connect to ros2/rclcpp#523.,"could you comment on the next steps for this? we have Clocks in rclpy now (I just merged #209) and I'm wondering if we plan to let users pass a clock into the Timer in the rclpy API at a later date or not (probably this PR is just to keep it compiling with changes in connected PRs and change to the API is followup, but want to double check)",True,"{'THUMBS_UP': ['https://github.com/dirk-thomas', 'https://github.com/sloretz']}"
ros2/rclpy,https://github.com/ros2/rclpy,211,2018-07-24T22:44:16Z,2018-07-28T01:28:21Z,2018-07-28T01:28:25Z,MERGED,True,50,19,3,https://github.com/dirk-thomas,create timer with clock,5,['enhancement'],https://github.com/ros2/rclpy/pull/211,https://github.com/dirk-thomas,3,https://github.com/ros2/rclpy/pull/211#issuecomment-408285786,Match API change from ros2/rcl#272. Connect to ros2/rclcpp#523.,"I would suggest to get the current PRs merged. For rcl and rclcpp they add the clock argument to the timer classes. In rclpy the patch only updates the code which uses that function. So the current (wall) timer continues to work.
In a follow up PR we can add new API (probably to the Node class) to create timers with an arbitrary clock type. Internally it has to maintain (at least) one clock per type. Additional timers with the same clock type should be able to share the clock.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,212,2018-07-27T18:43:13Z,2018-07-27T23:14:18Z,2018-07-27T23:14:22Z,MERGED,True,45,45,3,https://github.com/sloretz,Alternative way of giving timers a clock,6,[],https://github.com/ros2/rclpy/pull/212,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/212,"I was having trouble putting feedback for #211 into words. This passes the clock into rclpy_create_timer() instead of it being returned in an unused variable, and makes use of the cleanup code in _rclpy_destroy_clock().","I was having trouble putting feedback for #211 into words. This passes the clock into rclpy_create_timer() instead of it being returned in an unused variable, and makes use of the cleanup code in _rclpy_destroy_clock().",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,212,2018-07-27T18:43:13Z,2018-07-27T23:14:18Z,2018-07-27T23:14:22Z,MERGED,True,45,45,3,https://github.com/sloretz,Alternative way of giving timers a clock,6,[],https://github.com/ros2/rclpy/pull/212,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/212#issuecomment-408508919,"I was having trouble putting feedback for #211 into words. This passes the clock into rclpy_create_timer() instead of it being returned in an unused variable, and makes use of the cleanup code in _rclpy_destroy_clock().",@dirk-thomas if the changes look OK to you feel free to merge this PR. It's targeted at branch timer-with-clock,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,212,2018-07-27T18:43:13Z,2018-07-27T23:14:18Z,2018-07-27T23:14:22Z,MERGED,True,45,45,3,https://github.com/sloretz,Alternative way of giving timers a clock,6,[],https://github.com/ros2/rclpy/pull/212,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/212#issuecomment-408553027,"I was having trouble putting feedback for #211 into words. This passes the clock into rclpy_create_timer() instead of it being returned in an unused variable, and makes use of the cleanup code in _rclpy_destroy_clock().","@dirk-thomas CI testing rclpy with this branch + rcl timer-with-clock

Linux 
Linux-aarch64 

Connext not installed? Another run with connext unchecked 


macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,212,2018-07-27T18:43:13Z,2018-07-27T23:14:18Z,2018-07-27T23:14:22Z,MERGED,True,45,45,3,https://github.com/sloretz,Alternative way of giving timers a clock,6,[],https://github.com/ros2/rclpy/pull/212,https://github.com/dirk-thomas,4,https://github.com/ros2/rclpy/pull/212#issuecomment-408559359,"I was having trouble putting feedback for #211 into words. This passes the clock into rclpy_create_timer() instead of it being returned in an unused variable, and makes use of the cleanup code in _rclpy_destroy_clock().","Connext not installed?

Fixed in ros2/ci#212 (comment)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,214,2018-08-06T18:52:57Z,2018-08-16T23:20:56Z,2018-08-16T23:21:05Z,MERGED,True,460,5,8,https://github.com/nuclearsandwich,Implement node parameters and parameter services,8,[],https://github.com/ros2/rclpy/pull/214,https://github.com/nuclearsandwich,1,https://github.com/ros2/rclpy/pull/214,"This adds parameter services to rclpy nodes. Like rclcpp nodes, parameter services are started by default and can be turned off with the create_node/Node constructor kwarg start_parameter_services=False.
Parameters are stored on the Node class via a _parameters dict attribute. The methods following methods have been added to the Node API.

get_parameter(name)
get_parameters(names)
set_parameters(parameters)
set_parameters_atomically(parameters)

A Parameter class provides a python interface to individual parameters that is (hopefully) a bit more ergonomic than using the Parameter-related message types from rcl_interfaces.
connects to #202","This adds parameter services to rclpy nodes. Like rclcpp nodes, parameter services are started by default and can be turned off with the create_node/Node constructor kwarg start_parameter_services=False.
Parameters are stored on the Node class via a _parameters dict attribute. The methods following methods have been added to the Node API.

get_parameter(name)
get_parameters(names)
set_parameters(parameters)
set_parameters_atomically(parameters)

A Parameter class provides a python interface to individual parameters that is (hopefully) a bit more ergonomic than using the Parameter-related message types from rcl_interfaces.
connects to #202",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,214,2018-08-06T18:52:57Z,2018-08-16T23:20:56Z,2018-08-16T23:21:05Z,MERGED,True,460,5,8,https://github.com/nuclearsandwich,Implement node parameters and parameter services,8,[],https://github.com/ros2/rclpy/pull/214,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/214#issuecomment-410865708,"This adds parameter services to rclpy nodes. Like rclcpp nodes, parameter services are started by default and can be turned off with the create_node/Node constructor kwarg start_parameter_services=False.
Parameters are stored on the Node class via a _parameters dict attribute. The methods following methods have been added to the Node API.

get_parameter(name)
get_parameters(names)
set_parameters(parameters)
set_parameters_atomically(parameters)

A Parameter class provides a python interface to individual parameters that is (hopefully) a bit more ergonomic than using the Parameter-related message types from rcl_interfaces.
connects to #202","This looks great !
I didn't get a chance to thoroughly review it yet so just dropped a note for the questions I had. I'll give a review tomorrow morning if noone gets to it by then",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,214,2018-08-06T18:52:57Z,2018-08-16T23:20:56Z,2018-08-16T23:21:05Z,MERGED,True,460,5,8,https://github.com/nuclearsandwich,Implement node parameters and parameter services,8,[],https://github.com/ros2/rclpy/pull/214,https://github.com/nuclearsandwich,3,https://github.com/ros2/rclpy/pull/214#issuecomment-411230519,"This adds parameter services to rclpy nodes. Like rclcpp nodes, parameter services are started by default and can be turned off with the create_node/Node constructor kwarg start_parameter_services=False.
Parameters are stored on the Node class via a _parameters dict attribute. The methods following methods have been added to the Node API.

get_parameter(name)
get_parameters(names)
set_parameters(parameters)
set_parameters_atomically(parameters)

A Parameter class provides a python interface to individual parameters that is (hopefully) a bit more ergonomic than using the Parameter-related message types from rcl_interfaces.
connects to #202","Where will the testing of the callbacks happen ? in a separate PR here ? or just in a higher level integration test?

During our sync meeting we talked about unit tests going here and integration tests happening in system tests (I haven't written any there yet either) but I guess there's nothing stopping me from unit testing the callback functions.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,214,2018-08-06T18:52:57Z,2018-08-16T23:20:56Z,2018-08-16T23:21:05Z,MERGED,True,460,5,8,https://github.com/nuclearsandwich,Implement node parameters and parameter services,8,[],https://github.com/ros2/rclpy/pull/214,https://github.com/mikaelarguedas,4,https://github.com/ros2/rclpy/pull/214#issuecomment-411232465,"This adds parameter services to rclpy nodes. Like rclcpp nodes, parameter services are started by default and can be turned off with the create_node/Node constructor kwarg start_parameter_services=False.
Parameters are stored on the Node class via a _parameters dict attribute. The methods following methods have been added to the Node API.

get_parameter(name)
get_parameters(names)
set_parameters(parameters)
set_parameters_atomically(parameters)

A Parameter class provides a python interface to individual parameters that is (hopefully) a bit more ergonomic than using the Parameter-related message types from rcl_interfaces.
connects to #202","During our sync meeting we talked about unit tests going here and integration tests happening in system tests (I haven't written any there yet either) but I guess there's nothing stopping me from unit testing the callback functions.

Good point, I remember that now.
Looking at rclcpp it looks like the only test that's performed is ensuring that it throws on invalid service name. But that the actual functionality testing of the callbacks is done at the test_rclcpp level.
So let's do this in system_test/test_rclpy to match what is done for rclcpp 👍",True,{'THUMBS_UP': ['https://github.com/nuclearsandwich']}
ros2/rclpy,https://github.com/ros2/rclpy,214,2018-08-06T18:52:57Z,2018-08-16T23:20:56Z,2018-08-16T23:21:05Z,MERGED,True,460,5,8,https://github.com/nuclearsandwich,Implement node parameters and parameter services,8,[],https://github.com/ros2/rclpy/pull/214,https://github.com/nuclearsandwich,5,https://github.com/ros2/rclpy/pull/214#issuecomment-412177333,"This adds parameter services to rclpy nodes. Like rclcpp nodes, parameter services are started by default and can be turned off with the create_node/Node constructor kwarg start_parameter_services=False.
Parameters are stored on the Node class via a _parameters dict attribute. The methods following methods have been added to the Node API.

get_parameter(name)
get_parameters(names)
set_parameters(parameters)
set_parameters_atomically(parameters)

A Parameter class provides a python interface to individual parameters that is (hopefully) a bit more ergonomic than using the Parameter-related message types from rcl_interfaces.
connects to #202",@mikaelarguedas this is ready for another round of review.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,214,2018-08-06T18:52:57Z,2018-08-16T23:20:56Z,2018-08-16T23:21:05Z,MERGED,True,460,5,8,https://github.com/nuclearsandwich,Implement node parameters and parameter services,8,[],https://github.com/ros2/rclpy/pull/214,https://github.com/nuclearsandwich,6,https://github.com/ros2/rclpy/pull/214#issuecomment-412177615,"This adds parameter services to rclpy nodes. Like rclcpp nodes, parameter services are started by default and can be turned off with the create_node/Node constructor kwarg start_parameter_services=False.
Parameters are stored on the Node class via a _parameters dict attribute. The methods following methods have been added to the Node API.

get_parameter(name)
get_parameters(names)
set_parameters(parameters)
set_parameters_atomically(parameters)

A Parameter class provides a python interface to individual parameters that is (hopefully) a bit more ergonomic than using the Parameter-related message types from rcl_interfaces.
connects to #202","Running some CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,214,2018-08-06T18:52:57Z,2018-08-16T23:20:56Z,2018-08-16T23:21:05Z,MERGED,True,460,5,8,https://github.com/nuclearsandwich,Implement node parameters and parameter services,8,[],https://github.com/ros2/rclpy/pull/214,https://github.com/nuclearsandwich,7,https://github.com/ros2/rclpy/pull/214#issuecomment-412939986,"This adds parameter services to rclpy nodes. Like rclcpp nodes, parameter services are started by default and can be turned off with the create_node/Node constructor kwarg start_parameter_services=False.
Parameters are stored on the Node class via a _parameters dict attribute. The methods following methods have been added to the Node API.

get_parameter(name)
get_parameters(names)
set_parameters(parameters)
set_parameters_atomically(parameters)

A Parameter class provides a python interface to individual parameters that is (hopefully) a bit more ergonomic than using the Parameter-related message types from rcl_interfaces.
connects to #202","I sent an earlier version of this to @mikaelarguedas directly but here is the node I've been testing parameter services on and an equivalent params.yaml file for matching behavior to the rclcpp implementation. https://gist.github.com/nuclearsandwich/8753121711671bfa8d9cb5f718ce09bc
There are some differences in the order of results when listing parameters due to the different traversal techniques between implementations but that service has no order-dependent cases (as opposed to setting parameters  non-atomically where the results are ordered based on the inputs).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,214,2018-08-06T18:52:57Z,2018-08-16T23:20:56Z,2018-08-16T23:21:05Z,MERGED,True,460,5,8,https://github.com/nuclearsandwich,Implement node parameters and parameter services,8,[],https://github.com/ros2/rclpy/pull/214,https://github.com/nuclearsandwich,8,https://github.com/ros2/rclpy/pull/214#issuecomment-412947815,"This adds parameter services to rclpy nodes. Like rclcpp nodes, parameter services are started by default and can be turned off with the create_node/Node constructor kwarg start_parameter_services=False.
Parameters are stored on the Node class via a _parameters dict attribute. The methods following methods have been added to the Node API.

get_parameter(name)
get_parameters(names)
set_parameters(parameters)
set_parameters_atomically(parameters)

A Parameter class provides a python interface to individual parameters that is (hopefully) a bit more ergonomic than using the Parameter-related message types from rcl_interfaces.
connects to #202","New round of CI with increased timeout for rclpytests.

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,214,2018-08-06T18:52:57Z,2018-08-16T23:20:56Z,2018-08-16T23:21:05Z,MERGED,True,460,5,8,https://github.com/nuclearsandwich,Implement node parameters and parameter services,8,[],https://github.com/ros2/rclpy/pull/214,https://github.com/nuclearsandwich,9,https://github.com/ros2/rclpy/pull/214#issuecomment-413301387,"This adds parameter services to rclpy nodes. Like rclcpp nodes, parameter services are started by default and can be turned off with the create_node/Node constructor kwarg start_parameter_services=False.
Parameters are stored on the Node class via a _parameters dict attribute. The methods following methods have been added to the Node API.

get_parameter(name)
get_parameters(names)
set_parameters(parameters)
set_parameters_atomically(parameters)

A Parameter class provides a python interface to individual parameters that is (hopefully) a bit more ergonomic than using the Parameter-related message types from rcl_interfaces.
connects to #202",I'm able to reproduce the hang that is happening on ARM and am now investigating.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,214,2018-08-06T18:52:57Z,2018-08-16T23:20:56Z,2018-08-16T23:21:05Z,MERGED,True,460,5,8,https://github.com/nuclearsandwich,Implement node parameters and parameter services,8,[],https://github.com/ros2/rclpy/pull/214,https://github.com/nuclearsandwich,10,https://github.com/ros2/rclpy/pull/214#issuecomment-413644686,"This adds parameter services to rclpy nodes. Like rclcpp nodes, parameter services are started by default and can be turned off with the create_node/Node constructor kwarg start_parameter_services=False.
Parameters are stored on the Node class via a _parameters dict attribute. The methods following methods have been added to the Node API.

get_parameter(name)
get_parameters(names)
set_parameters(parameters)
set_parameters_atomically(parameters)

A Parameter class provides a python interface to individual parameters that is (hopefully) a bit more ergonomic than using the Parameter-related message types from rcl_interfaces.
connects to #202","Linux 
Linux-aarch64 
macOS 
Windows 

A full CI run with the timeout I originally set and changes to the node creation tests so they clean up properly.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,214,2018-08-06T18:52:57Z,2018-08-16T23:20:56Z,2018-08-16T23:21:05Z,MERGED,True,460,5,8,https://github.com/nuclearsandwich,Implement node parameters and parameter services,8,[],https://github.com/ros2/rclpy/pull/214,https://github.com/mikaelarguedas,11,https://github.com/ros2/rclpy/pull/214#issuecomment-413652951,"This adds parameter services to rclpy nodes. Like rclcpp nodes, parameter services are started by default and can be turned off with the create_node/Node constructor kwarg start_parameter_services=False.
Parameters are stored on the Node class via a _parameters dict attribute. The methods following methods have been added to the Node API.

get_parameter(name)
get_parameters(names)
set_parameters(parameters)
set_parameters_atomically(parameters)

A Parameter class provides a python interface to individual parameters that is (hopefully) a bit more ergonomic than using the Parameter-related message types from rcl_interfaces.
connects to #202","full CI run with the timeout I originally set

Now that we know that the timeout issues on arm were related to a hang and not because we were getting close to the timeout limit. Is bumping the existing timeout still necessary ?
As the last timeout bump introduced a significant margin, I would expect it to be sufficient",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,214,2018-08-06T18:52:57Z,2018-08-16T23:20:56Z,2018-08-16T23:21:05Z,MERGED,True,460,5,8,https://github.com/nuclearsandwich,Implement node parameters and parameter services,8,[],https://github.com/ros2/rclpy/pull/214,https://github.com/nuclearsandwich,12,https://github.com/ros2/rclpy/pull/214#issuecomment-413670740,"This adds parameter services to rclpy nodes. Like rclcpp nodes, parameter services are started by default and can be turned off with the create_node/Node constructor kwarg start_parameter_services=False.
Parameters are stored on the Node class via a _parameters dict attribute. The methods following methods have been added to the Node API.

get_parameter(name)
get_parameters(names)
set_parameters(parameters)
set_parameters_atomically(parameters)

A Parameter class provides a python interface to individual parameters that is (hopefully) a bit more ergonomic than using the Parameter-related message types from rcl_interfaces.
connects to #202","Is bumping the existing timeout still necessary ?

I could be mistaken about failures like: https://ci.ros2.org/job/ci_linux/5031/testReport/junit/(root)/projectroot/rclpytests/
Which I thought you had mentioned were related to earlier repeats of a test run timing out.  It seems like we should comfortably get by with no timeout. What's a good way to test that well? Run just the rclpy tests with a retest until fail?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,214,2018-08-06T18:52:57Z,2018-08-16T23:20:56Z,2018-08-16T23:21:05Z,MERGED,True,460,5,8,https://github.com/nuclearsandwich,Implement node parameters and parameter services,8,[],https://github.com/ros2/rclpy/pull/214,https://github.com/mikaelarguedas,13,https://github.com/ros2/rclpy/pull/214#issuecomment-413674894,"This adds parameter services to rclpy nodes. Like rclcpp nodes, parameter services are started by default and can be turned off with the create_node/Node constructor kwarg start_parameter_services=False.
Parameters are stored on the Node class via a _parameters dict attribute. The methods following methods have been added to the Node API.

get_parameter(name)
get_parameters(names)
set_parameters(parameters)
set_parameters_atomically(parameters)

A Parameter class provides a python interface to individual parameters that is (hopefully) a bit more ergonomic than using the Parameter-related message types from rcl_interfaces.
connects to #202","Which I thought you had mentioned were related to earlier repeats of a test run timing out.

Yeah that was the initial thought as the original console output was indicating a Timeout.
After we looked closer at it we noticed that the tests were actually hanging with Fast-RTPS causing a timeout.
e.g. the console output from the job linked above:
1: ========================= 155 passed in 30.38 seconds ==========================
1/1 Test #1: rclpytests .......................***Timeout 200.01 sec

0% tests passed, 1 tests failed out of 1

Label Time Summary:
pytest    = 200.01 sec*proc (1 test)

The actual tests take 30 seconds to run and then hang.
One way to check how close we get to the timeout is to run the tests with Connext only and --retest-until-fail 30 or something like that.",True,{'THUMBS_UP': ['https://github.com/nuclearsandwich']}
ros2/rclpy,https://github.com/ros2/rclpy,214,2018-08-06T18:52:57Z,2018-08-16T23:20:56Z,2018-08-16T23:21:05Z,MERGED,True,460,5,8,https://github.com/nuclearsandwich,Implement node parameters and parameter services,8,[],https://github.com/ros2/rclpy/pull/214,https://github.com/nuclearsandwich,14,https://github.com/ros2/rclpy/pull/214#issuecomment-413675843,"This adds parameter services to rclpy nodes. Like rclcpp nodes, parameter services are started by default and can be turned off with the create_node/Node constructor kwarg start_parameter_services=False.
Parameters are stored on the Node class via a _parameters dict attribute. The methods following methods have been added to the Node API.

get_parameter(name)
get_parameters(names)
set_parameters(parameters)
set_parameters_atomically(parameters)

A Parameter class provides a python interface to individual parameters that is (hopefully) a bit more ergonomic than using the Parameter-related message types from rcl_interfaces.
connects to #202","Running just rclpy and tests with connext checking that the unmodified timeout length is still appropriate. 
Edit: CI did not want to be run without FastRTPS",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,214,2018-08-06T18:52:57Z,2018-08-16T23:20:56Z,2018-08-16T23:21:05Z,MERGED,True,460,5,8,https://github.com/nuclearsandwich,Implement node parameters and parameter services,8,[],https://github.com/ros2/rclpy/pull/214,https://github.com/mikaelarguedas,15,https://github.com/ros2/rclpy/pull/214#issuecomment-413684935,"This adds parameter services to rclpy nodes. Like rclcpp nodes, parameter services are started by default and can be turned off with the create_node/Node constructor kwarg start_parameter_services=False.
Parameters are stored on the Node class via a _parameters dict attribute. The methods following methods have been added to the Node API.

get_parameter(name)
get_parameters(names)
set_parameters(parameters)
set_parameters_atomically(parameters)

A Parameter class provides a python interface to individual parameters that is (hopefully) a bit more ergonomic than using the Parameter-related message types from rcl_interfaces.
connects to #202",Job with only connext using ros2/ci#214:,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,216,2018-08-08T21:14:56Z,2018-08-08T23:06:37Z,2018-08-08T23:06:41Z,MERGED,True,13,4,2,https://github.com/sloretz,executor.add_node() returns a bool,1,['bug'],https://github.com/ros2/rclpy/pull/216,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/216,"The documentation for executor.add_node() says it returns True if the node was added; however it currently just returns None. This fixes the function, and also makes it so the guard condition to rebuild the waitset is only triggered if the node really was added.","The documentation for executor.add_node() says it returns True if the node was added; however it currently just returns None. This fixes the function, and also makes it so the guard condition to rebuild the waitset is only triggered if the node really was added.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,216,2018-08-08T21:14:56Z,2018-08-08T23:06:37Z,2018-08-08T23:06:41Z,MERGED,True,13,4,2,https://github.com/sloretz,executor.add_node() returns a bool,1,['bug'],https://github.com/ros2/rclpy/pull/216,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/216#issuecomment-411554988,"The documentation for executor.add_node() says it returns True if the node was added; however it currently just returns None. This fixes the function, and also makes it so the guard condition to rebuild the waitset is only triggered if the node really was added.","CI

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,217,2018-08-08T21:48:24Z,2018-08-08T23:51:27Z,2018-08-08T23:54:18Z,MERGED,True,24,1,2,https://github.com/sloretz,Fix executor.remove_node(),1,['bug'],https://github.com/ros2/rclpy/pull/217,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/217,executor.remove_node() was adding the node to executor._nodes instead of removing it. This PR fixes the function and adds a unit test.,executor.remove_node() was adding the node to executor._nodes instead of removing it. This PR fixes the function and adds a unit test.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,217,2018-08-08T21:48:24Z,2018-08-08T23:51:27Z,2018-08-08T23:54:18Z,MERGED,True,24,1,2,https://github.com/sloretz,Fix executor.remove_node(),1,['bug'],https://github.com/ros2/rclpy/pull/217,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/217#issuecomment-411563525,executor.remove_node() was adding the node to executor._nodes instead of removing it. This PR fixes the function and adds a unit test.,"CI

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,218,2018-08-09T00:00:40Z,2018-08-09T16:13:20Z,2018-08-09T20:50:04Z,MERGED,True,71,1,3,https://github.com/sloretz,Node has a reference to its executor,1,['enhancement'],https://github.com/ros2/rclpy/pull/218,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/218,"This adds a property node.executor which accesses the executor the node has been added to. Internally the node stores the executor as a weak reference to avoid a reference cycle.
The purpose is to allow something with a node reference call executor functions. Specifically I want to make another PR where TimeSource calls node.executor.create_task() with time jump callbacks.
A nice side effect is node.executor enforces that a node has only been added to one executor. This should prevent the same entities from being waited on in multiple wait sets.
CI

Linux 
Linux-aarch64 
macOS 
Windows","This adds a property node.executor which accesses the executor the node has been added to. Internally the node stores the executor as a weak reference to avoid a reference cycle.
The purpose is to allow something with a node reference call executor functions. Specifically I want to make another PR where TimeSource calls node.executor.create_task() with time jump callbacks.
A nice side effect is node.executor enforces that a node has only been added to one executor. This should prevent the same entities from being waited on in multiple wait sets.
CI

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,218,2018-08-09T00:00:40Z,2018-08-09T16:13:20Z,2018-08-09T20:50:04Z,MERGED,True,71,1,3,https://github.com/sloretz,Node has a reference to its executor,1,['enhancement'],https://github.com/ros2/rclpy/pull/218,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/218#issuecomment-411824283,"This adds a property node.executor which accesses the executor the node has been added to. Internally the node stores the executor as a weak reference to avoid a reference cycle.
The purpose is to allow something with a node reference call executor functions. Specifically I want to make another PR where TimeSource calls node.executor.create_task() with time jump callbacks.
A nice side effect is node.executor enforces that a node has only been added to one executor. This should prevent the same entities from being waited on in multiple wait sets.
CI

Linux 
Linux-aarch64 
macOS 
Windows","Note for future enhancements: We mentioned recently the motivation for having multiple executors operating on a node, they would process different callback groups of a given node. This makes the assumption that the executor is unique for a node.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,218,2018-08-09T00:00:40Z,2018-08-09T16:13:20Z,2018-08-09T20:50:04Z,MERGED,True,71,1,3,https://github.com/sloretz,Node has a reference to its executor,1,['enhancement'],https://github.com/ros2/rclpy/pull/218,https://github.com/wjwwood,3,https://github.com/ros2/rclpy/pull/218#issuecomment-411892414,"This adds a property node.executor which accesses the executor the node has been added to. Internally the node stores the executor as a weak reference to avoid a reference cycle.
The purpose is to allow something with a node reference call executor functions. Specifically I want to make another PR where TimeSource calls node.executor.create_task() with time jump callbacks.
A nice side effect is node.executor enforces that a node has only been added to one executor. This should prevent the same entities from being waited on in multiple wait sets.
CI

Linux 
Linux-aarch64 
macOS 
Windows","Yeah, at some point we would change the relationship to be between executors and callback groups, rather than nodes, at which point this would need to change as well. For now, however, it aligns Python and C++.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,220,2018-08-10T15:41:42Z,2018-08-10T18:35:31Z,2018-08-10T18:35:35Z,MERGED,True,14,17,3,https://github.com/sloretz,Allow Duration to be negative,2,[],https://github.com/ros2/rclpy/pull/220,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/220,"This allows Duration instances to be negative as talked about in ros2/rclcpp#525. Time is unchanged and cannot have negative values in this PR.

Linux 
Linux-aarch64 
macOS 
Windows","This allows Duration instances to be negative as talked about in ros2/rclcpp#525. Time is unchanged and cannot have negative values in this PR.

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,220,2018-08-10T15:41:42Z,2018-08-10T18:35:31Z,2018-08-10T18:35:35Z,MERGED,True,14,17,3,https://github.com/sloretz,Allow Duration to be negative,2,[],https://github.com/ros2/rclpy/pull/220,https://github.com/dhood,2,https://github.com/ros2/rclpy/pull/220#issuecomment-412135076,"This allows Duration instances to be negative as talked about in ros2/rclcpp#525. Time is unchanged and cannot have negative values in this PR.

Linux 
Linux-aarch64 
macOS 
Windows","thanks for following up on this @sloretz. For context, this is a follow up to #209 (comment)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,220,2018-08-10T15:41:42Z,2018-08-10T18:35:31Z,2018-08-10T18:35:35Z,MERGED,True,14,17,3,https://github.com/sloretz,Allow Duration to be negative,2,[],https://github.com/ros2/rclpy/pull/220,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/220#issuecomment-412137625,"This allows Duration instances to be negative as talked about in ros2/rclcpp#525. Time is unchanged and cannot have negative values in this PR.

Linux 
Linux-aarch64 
macOS 
Windows","New CI

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,221,2018-08-10T21:33:10Z,2018-08-10T23:05:00Z,2018-08-10T23:05:04Z,MERGED,True,7,7,2,https://github.com/sloretz,Allow duration to be initialized with negative nanoseconds,1,[],https://github.com/ros2/rclpy/pull/221,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/221,"Allow a Duration to be initialized with a negative value for nanoseconds. This allows two Time instances being subtracted to initialize negative duration without converting the result to floating point seconds.
CI

Linux 
Linux-aarch64 
macOS 
Windows","Allow a Duration to be initialized with a negative value for nanoseconds. This allows two Time instances being subtracted to initialize negative duration without converting the result to floating point seconds.
CI

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,222,2018-08-10T23:38:07Z,2018-08-28T22:00:07Z,2018-09-13T15:50:06Z,MERGED,True,537,8,5,https://github.com/sloretz,Callbacks when time jumps,16,['enhancement'],https://github.com/ros2/rclpy/pull/222,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/222,"This adds callbacks when ROSTime jumps. The implementation closely mimics the implementation in rclcpp.
Time jump callbacks use the rcl_clock_t time jump callbacks. Python code is called in the callbacks using PyObject_CallObject().
Requires ros2/rcl#284","This adds callbacks when ROSTime jumps. The implementation closely mimics the implementation in rclcpp.
Time jump callbacks use the rcl_clock_t time jump callbacks. Python code is called in the callbacks using PyObject_CallObject().
Requires ros2/rcl#284",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,222,2018-08-10T23:38:07Z,2018-08-28T22:00:07Z,2018-09-13T15:50:06Z,MERGED,True,537,8,5,https://github.com/sloretz,Callbacks when time jumps,16,['enhancement'],https://github.com/ros2/rclpy/pull/222,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/222#issuecomment-413277100,"This adds callbacks when ROSTime jumps. The implementation closely mimics the implementation in rclcpp.
Time jump callbacks use the rcl_clock_t time jump callbacks. Python code is called in the callbacks using PyObject_CallObject().
Requires ros2/rcl#284","Taking out of review, changes coming",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,222,2018-08-10T23:38:07Z,2018-08-28T22:00:07Z,2018-09-13T15:50:06Z,MERGED,True,537,8,5,https://github.com/sloretz,Callbacks when time jumps,16,['enhancement'],https://github.com/ros2/rclpy/pull/222,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/222#issuecomment-416679753,"This adds callbacks when ROSTime jumps. The implementation closely mimics the implementation in rclcpp.
Time jump callbacks use the rcl_clock_t time jump callbacks. Python code is called in the callbacks using PyObject_CallObject().
Requires ros2/rcl#284","CI just rclpy because I don't expect changes to affect anything downstream.

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,222,2018-08-10T23:38:07Z,2018-08-28T22:00:07Z,2018-09-13T15:50:06Z,MERGED,True,537,8,5,https://github.com/sloretz,Callbacks when time jumps,16,['enhancement'],https://github.com/ros2/rclpy/pull/222,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/222#issuecomment-416726608,"This adds callbacks when ROSTime jumps. The implementation closely mimics the implementation in rclcpp.
Time jump callbacks use the rcl_clock_t time jump callbacks. Python code is called in the callbacks using PyObject_CallObject().
Requires ros2/rcl#284","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,222,2018-08-10T23:38:07Z,2018-08-28T22:00:07Z,2018-09-13T15:50:06Z,MERGED,True,537,8,5,https://github.com/sloretz,Callbacks when time jumps,16,['enhancement'],https://github.com/ros2/rclpy/pull/222,https://github.com/dhood,5,https://github.com/ros2/rclpy/pull/222#issuecomment-421056085,"This adds callbacks when ROSTime jumps. The implementation closely mimics the implementation in rclcpp.
Time jump callbacks use the rcl_clock_t time jump callbacks. Python code is called in the callbacks using PyObject_CallObject().
Requires ros2/rcl#284",I noticed that the tests added in this PR seem to fail on xenial release nightlies: ros2/build_farmer#147,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,223,2018-08-15T00:08:51Z,2018-08-15T17:17:25Z,2018-08-15T17:17:29Z,MERGED,True,6,0,2,https://github.com/mikaelarguedas,disable 1kHz test on all platforms,6,[],https://github.com/ros2/rclpy/pull/223,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/223,"these tests fail more and more often on all platforms (e.g. here)
Disabling the 1kHz test on all platforms for now until we decide how to refactor them

Linux 
Linux-aarch64 
macOS 
Windows","these tests fail more and more often on all platforms (e.g. here)
Disabling the 1kHz test on all platforms for now until we decide how to refactor them

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,223,2018-08-15T00:08:51Z,2018-08-15T17:17:25Z,2018-08-15T17:17:29Z,MERGED,True,6,0,2,https://github.com/mikaelarguedas,disable 1kHz test on all platforms,6,[],https://github.com/ros2/rclpy/pull/223,https://github.com/mikaelarguedas,2,https://github.com/ros2/rclpy/pull/223#issuecomment-413061569,"these tests fail more and more often on all platforms (e.g. here)
Disabling the 1kHz test on all platforms for now until we decide how to refactor them

Linux 
Linux-aarch64 
macOS 
Windows",macOS job with --retest-umtil-fail 20,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,223,2018-08-15T00:08:51Z,2018-08-15T17:17:25Z,2018-08-15T17:17:29Z,MERGED,True,6,0,2,https://github.com/mikaelarguedas,disable 1kHz test on all platforms,6,[],https://github.com/ros2/rclpy/pull/223,https://github.com/dirk-thomas,3,https://github.com/ros2/rclpy/pull/223#issuecomment-413064282,"these tests fail more and more often on all platforms (e.g. here)
Disabling the 1kHz test on all platforms for now until we decide how to refactor them

Linux 
Linux-aarch64 
macOS 
Windows",I would suggest to use an annotation instead.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,223,2018-08-15T00:08:51Z,2018-08-15T17:17:25Z,2018-08-15T17:17:29Z,MERGED,True,6,0,2,https://github.com/mikaelarguedas,disable 1kHz test on all platforms,6,[],https://github.com/ros2/rclpy/pull/223,https://github.com/mikaelarguedas,4,https://github.com/ros2/rclpy/pull/223#issuecomment-413065685,"these tests fail more and more often on all platforms (e.g. here)
Disabling the 1kHz test on all platforms for now until we decide how to refactor them

Linux 
Linux-aarch64 
macOS 
Windows","I would suggest to use an annotation instead.

Done in 39bf6db",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,223,2018-08-15T00:08:51Z,2018-08-15T17:17:25Z,2018-08-15T17:17:29Z,MERGED,True,6,0,2,https://github.com/mikaelarguedas,disable 1kHz test on all platforms,6,[],https://github.com/ros2/rclpy/pull/223,https://github.com/mikaelarguedas,5,https://github.com/ros2/rclpy/pull/223#issuecomment-413268697,"these tests fail more and more often on all platforms (e.g. here)
Disabling the 1kHz test on all platforms for now until we decide how to refactor them

Linux 
Linux-aarch64 
macOS 
Windows",CI as of a850ae0,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,225,2018-08-17T00:05:19Z,2018-08-29T19:31:01Z,2018-08-29T19:31:06Z,MERGED,True,399,5,5,https://github.com/nuclearsandwich,Take initial parameters from parameters yaml files and constructor arguments.,35,[],https://github.com/ros2/rclpy/pull/225,https://github.com/nuclearsandwich,1,https://github.com/ros2/rclpy/pull/225,"With this pull request initial parameters can be passed via yaml parameters file with the __params:= and as a list of parameters in the initial_parameters kwarg of the Node constructor.
Parameters in the constructor will override parameters from a parameters file.
If at least one reviewer could keep a close eye on my use of Py_DECREF and make sure that I have employed everywhere I should and nowhere I shouldn't have I'd be grateful..  I'm fairly confident in my usage but it's also my first time in Python's C API.
To test this PR I've been using the params.yaml in this gist https://gist.github.com/nuclearsandwich/8753121711671bfa8d9cb5f718ce09bc and the talker node from demo_nodes_py as well as the parameter services behavior just merged from #214
Connects to #202","With this pull request initial parameters can be passed via yaml parameters file with the __params:= and as a list of parameters in the initial_parameters kwarg of the Node constructor.
Parameters in the constructor will override parameters from a parameters file.
If at least one reviewer could keep a close eye on my use of Py_DECREF and make sure that I have employed everywhere I should and nowhere I shouldn't have I'd be grateful..  I'm fairly confident in my usage but it's also my first time in Python's C API.
To test this PR I've been using the params.yaml in this gist https://gist.github.com/nuclearsandwich/8753121711671bfa8d9cb5f718ce09bc and the talker node from demo_nodes_py as well as the parameter services behavior just merged from #214
Connects to #202",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,225,2018-08-17T00:05:19Z,2018-08-29T19:31:01Z,2018-08-29T19:31:06Z,MERGED,True,399,5,5,https://github.com/nuclearsandwich,Take initial parameters from parameters yaml files and constructor arguments.,35,[],https://github.com/ros2/rclpy/pull/225,https://github.com/nuclearsandwich,2,https://github.com/ros2/rclpy/pull/225#issuecomment-413982186,"With this pull request initial parameters can be passed via yaml parameters file with the __params:= and as a list of parameters in the initial_parameters kwarg of the Node constructor.
Parameters in the constructor will override parameters from a parameters file.
If at least one reviewer could keep a close eye on my use of Py_DECREF and make sure that I have employed everywhere I should and nowhere I shouldn't have I'd be grateful..  I'm fairly confident in my usage but it's also my first time in Python's C API.
To test this PR I've been using the params.yaml in this gist https://gist.github.com/nuclearsandwich/8753121711671bfa8d9cb5f718ce09bc and the talker node from demo_nodes_py as well as the parameter services behavior just merged from #214
Connects to #202","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,225,2018-08-17T00:05:19Z,2018-08-29T19:31:01Z,2018-08-29T19:31:06Z,MERGED,True,399,5,5,https://github.com/nuclearsandwich,Take initial parameters from parameters yaml files and constructor arguments.,35,[],https://github.com/ros2/rclpy/pull/225,https://github.com/nuclearsandwich,3,https://github.com/ros2/rclpy/pull/225#issuecomment-414013136,"With this pull request initial parameters can be passed via yaml parameters file with the __params:= and as a list of parameters in the initial_parameters kwarg of the Node constructor.
Parameters in the constructor will override parameters from a parameters file.
If at least one reviewer could keep a close eye on my use of Py_DECREF and make sure that I have employed everywhere I should and nowhere I shouldn't have I'd be grateful..  I'm fairly confident in my usage but it's also my first time in Python's C API.
To test this PR I've been using the params.yaml in this gist https://gist.github.com/nuclearsandwich/8753121711671bfa8d9cb5f718ce09bc and the talker node from demo_nodes_py as well as the parameter services behavior just merged from #214
Connects to #202","Linux 
Linux-aarch64 
macOS 
Windows 

Next CI after fixing lint and some warnings. I couldn't track the MSBuild warnings so I'll get those next wave.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,225,2018-08-17T00:05:19Z,2018-08-29T19:31:01Z,2018-08-29T19:31:06Z,MERGED,True,399,5,5,https://github.com/nuclearsandwich,Take initial parameters from parameters yaml files and constructor arguments.,35,[],https://github.com/ros2/rclpy/pull/225,https://github.com/nuclearsandwich,4,https://github.com/ros2/rclpy/pull/225#issuecomment-414804028,"With this pull request initial parameters can be passed via yaml parameters file with the __params:= and as a list of parameters in the initial_parameters kwarg of the Node constructor.
Parameters in the constructor will override parameters from a parameters file.
If at least one reviewer could keep a close eye on my use of Py_DECREF and make sure that I have employed everywhere I should and nowhere I shouldn't have I'd be grateful..  I'm fairly confident in my usage but it's also my first time in Python's C API.
To test this PR I've been using the params.yaml in this gist https://gist.github.com/nuclearsandwich/8753121711671bfa8d9cb5f718ce09bc and the talker node from demo_nodes_py as well as the parameter services behavior just merged from #214
Connects to #202",While setting up system tests I discovered that the yaml parameter parser doesn't preserve any parameters currently in the struct as I though. So I'll need to refactor this to extract parameters one file as a time and store them in a Python dict rather than a list.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,225,2018-08-17T00:05:19Z,2018-08-29T19:31:01Z,2018-08-29T19:31:06Z,MERGED,True,399,5,5,https://github.com/nuclearsandwich,Take initial parameters from parameters yaml files and constructor arguments.,35,[],https://github.com/ros2/rclpy/pull/225,https://github.com/nuclearsandwich,5,https://github.com/ros2/rclpy/pull/225#issuecomment-415174715,"With this pull request initial parameters can be passed via yaml parameters file with the __params:= and as a list of parameters in the initial_parameters kwarg of the Node constructor.
Parameters in the constructor will override parameters from a parameters file.
If at least one reviewer could keep a close eye on my use of Py_DECREF and make sure that I have employed everywhere I should and nowhere I shouldn't have I'd be grateful..  I'm fairly confident in my usage but it's also my first time in Python's C API.
To test this PR I've been using the params.yaml in this gist https://gist.github.com/nuclearsandwich/8753121711671bfa8d9cb5f718ce09bc and the talker node from demo_nodes_py as well as the parameter services behavior just merged from #214
Connects to #202","refactor this to extract parameters one file at a time and store them in a Python dict rather than a list.

This refactor is complete and the implementation is now working against the existing tests in system_tests/test_cli.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,225,2018-08-17T00:05:19Z,2018-08-29T19:31:01Z,2018-08-29T19:31:06Z,MERGED,True,399,5,5,https://github.com/nuclearsandwich,Take initial parameters from parameters yaml files and constructor arguments.,35,[],https://github.com/ros2/rclpy/pull/225,https://github.com/wjwwood,6,https://github.com/ros2/rclpy/pull/225#issuecomment-415592399,"With this pull request initial parameters can be passed via yaml parameters file with the __params:= and as a list of parameters in the initial_parameters kwarg of the Node constructor.
Parameters in the constructor will override parameters from a parameters file.
If at least one reviewer could keep a close eye on my use of Py_DECREF and make sure that I have employed everywhere I should and nowhere I shouldn't have I'd be grateful..  I'm fairly confident in my usage but it's also my first time in Python's C API.
To test this PR I've been using the params.yaml in this gist https://gist.github.com/nuclearsandwich/8753121711671bfa8d9cb5f718ce09bc and the talker node from demo_nodes_py as well as the parameter services behavior just merged from #214
Connects to #202","Looks like this comment is still pending right?
#225 (comment)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,225,2018-08-17T00:05:19Z,2018-08-29T19:31:01Z,2018-08-29T19:31:06Z,MERGED,True,399,5,5,https://github.com/nuclearsandwich,Take initial parameters from parameters yaml files and constructor arguments.,35,[],https://github.com/ros2/rclpy/pull/225,https://github.com/nuclearsandwich,7,https://github.com/ros2/rclpy/pull/225#issuecomment-415604442,"With this pull request initial parameters can be passed via yaml parameters file with the __params:= and as a list of parameters in the initial_parameters kwarg of the Node constructor.
Parameters in the constructor will override parameters from a parameters file.
If at least one reviewer could keep a close eye on my use of Py_DECREF and make sure that I have employed everywhere I should and nowhere I shouldn't have I'd be grateful..  I'm fairly confident in my usage but it's also my first time in Python's C API.
To test this PR I've been using the params.yaml in this gist https://gist.github.com/nuclearsandwich/8753121711671bfa8d9cb5f718ce09bc and the talker node from demo_nodes_py as well as the parameter services behavior just merged from #214
Connects to #202","Looks like this comment is still pending right? #225 (comment)

It was addressed indirectly. Added an explanation.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,225,2018-08-17T00:05:19Z,2018-08-29T19:31:01Z,2018-08-29T19:31:06Z,MERGED,True,399,5,5,https://github.com/nuclearsandwich,Take initial parameters from parameters yaml files and constructor arguments.,35,[],https://github.com/ros2/rclpy/pull/225,https://github.com/nuclearsandwich,8,https://github.com/ros2/rclpy/pull/225#issuecomment-415604624,"With this pull request initial parameters can be passed via yaml parameters file with the __params:= and as a list of parameters in the initial_parameters kwarg of the Node constructor.
Parameters in the constructor will override parameters from a parameters file.
If at least one reviewer could keep a close eye on my use of Py_DECREF and make sure that I have employed everywhere I should and nowhere I shouldn't have I'd be grateful..  I'm fairly confident in my usage but it's also my first time in Python's C API.
To test this PR I've been using the params.yaml in this gist https://gist.github.com/nuclearsandwich/8753121711671bfa8d9cb5f718ce09bc and the talker node from demo_nodes_py as well as the parameter services behavior just merged from #214
Connects to #202","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,225,2018-08-17T00:05:19Z,2018-08-29T19:31:01Z,2018-08-29T19:31:06Z,MERGED,True,399,5,5,https://github.com/nuclearsandwich,Take initial parameters from parameters yaml files and constructor arguments.,35,[],https://github.com/ros2/rclpy/pull/225,https://github.com/nuclearsandwich,9,https://github.com/ros2/rclpy/pull/225#issuecomment-416239584,"With this pull request initial parameters can be passed via yaml parameters file with the __params:= and as a list of parameters in the initial_parameters kwarg of the Node constructor.
Parameters in the constructor will override parameters from a parameters file.
If at least one reviewer could keep a close eye on my use of Py_DECREF and make sure that I have employed everywhere I should and nowhere I shouldn't have I'd be grateful..  I'm fairly confident in my usage but it's also my first time in Python's C API.
To test this PR I've been using the params.yaml in this gist https://gist.github.com/nuclearsandwich/8753121711671bfa8d9cb5f718ce09bc and the talker node from demo_nodes_py as well as the parameter services behavior just merged from #214
Connects to #202",FYI for any reviewers who have pulled locally I've just rebased and pushed in order to resolve merge conflicts.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,225,2018-08-17T00:05:19Z,2018-08-29T19:31:01Z,2018-08-29T19:31:06Z,MERGED,True,399,5,5,https://github.com/nuclearsandwich,Take initial parameters from parameters yaml files and constructor arguments.,35,[],https://github.com/ros2/rclpy/pull/225,https://github.com/nuclearsandwich,10,https://github.com/ros2/rclpy/pull/225#issuecomment-416692295,"With this pull request initial parameters can be passed via yaml parameters file with the __params:= and as a list of parameters in the initial_parameters kwarg of the Node constructor.
Parameters in the constructor will override parameters from a parameters file.
If at least one reviewer could keep a close eye on my use of Py_DECREF and make sure that I have employed everywhere I should and nowhere I shouldn't have I'd be grateful..  I'm fairly confident in my usage but it's also my first time in Python's C API.
To test this PR I've been using the params.yaml in this gist https://gist.github.com/nuclearsandwich/8753121711671bfa8d9cb5f718ce09bc and the talker node from demo_nodes_py as well as the parameter services behavior just merged from #214
Connects to #202","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,225,2018-08-17T00:05:19Z,2018-08-29T19:31:01Z,2018-08-29T19:31:06Z,MERGED,True,399,5,5,https://github.com/nuclearsandwich,Take initial parameters from parameters yaml files and constructor arguments.,35,[],https://github.com/ros2/rclpy/pull/225,https://github.com/nuclearsandwich,11,https://github.com/ros2/rclpy/pull/225#issuecomment-417063004,"With this pull request initial parameters can be passed via yaml parameters file with the __params:= and as a list of parameters in the initial_parameters kwarg of the Node constructor.
Parameters in the constructor will override parameters from a parameters file.
If at least one reviewer could keep a close eye on my use of Py_DECREF and make sure that I have employed everywhere I should and nowhere I shouldn't have I'd be grateful..  I'm fairly confident in my usage but it's also my first time in Python's C API.
To test this PR I've been using the params.yaml in this gist https://gist.github.com/nuclearsandwich/8753121711671bfa8d9cb5f718ce09bc and the talker node from demo_nodes_py as well as the parameter services behavior just merged from #214
Connects to #202","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,225,2018-08-17T00:05:19Z,2018-08-29T19:31:01Z,2018-08-29T19:31:06Z,MERGED,True,399,5,5,https://github.com/nuclearsandwich,Take initial parameters from parameters yaml files and constructor arguments.,35,[],https://github.com/ros2/rclpy/pull/225,https://github.com/nuclearsandwich,12,https://github.com/ros2/rclpy/pull/225#issuecomment-417076219,"With this pull request initial parameters can be passed via yaml parameters file with the __params:= and as a list of parameters in the initial_parameters kwarg of the Node constructor.
Parameters in the constructor will override parameters from a parameters file.
If at least one reviewer could keep a close eye on my use of Py_DECREF and make sure that I have employed everywhere I should and nowhere I shouldn't have I'd be grateful..  I'm fairly confident in my usage but it's also my first time in Python's C API.
To test this PR I've been using the params.yaml in this gist https://gist.github.com/nuclearsandwich/8753121711671bfa8d9cb5f718ce09bc and the talker node from demo_nodes_py as well as the parameter services behavior just merged from #214
Connects to #202",Thank you @sloretz and @mikaelarguedas. This PR wouldn't have been realized without the time you spent providing clear feedback and meticulous review.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,226,2018-08-17T00:40:57Z,2018-08-24T17:52:21Z,2018-08-24T17:52:25Z,MERGED,True,53,23,5,https://github.com/nuclearsandwich,Publish parameter events,10,[],https://github.com/ros2/rclpy/pull/226,https://github.com/nuclearsandwich,1,https://github.com/ros2/rclpy/pull/226,"This is a recreation of a change that was accidentally authored in a temporary container 😭.
Adds a parameter events publisher to rclpy nodes and publishes events when parameters are successfully set atomically.
I did some basic testing of the earlier version of this using ros2 topic echo and comparing the results with rclcpp nodes but I need to do a bit more before I feel good putting this in review.
Connects to #202","This is a recreation of a change that was accidentally authored in a temporary container 😭.
Adds a parameter events publisher to rclpy nodes and publishes events when parameters are successfully set atomically.
I did some basic testing of the earlier version of this using ros2 topic echo and comparing the results with rclcpp nodes but I need to do a bit more before I feel good putting this in review.
Connects to #202",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,226,2018-08-17T00:40:57Z,2018-08-24T17:52:21Z,2018-08-24T17:52:25Z,MERGED,True,53,23,5,https://github.com/nuclearsandwich,Publish parameter events,10,[],https://github.com/ros2/rclpy/pull/226,https://github.com/nuclearsandwich,2,https://github.com/ros2/rclpy/pull/226#issuecomment-414002923,"This is a recreation of a change that was accidentally authored in a temporary container 😭.
Adds a parameter events publisher to rclpy nodes and publishes events when parameters are successfully set atomically.
I did some basic testing of the earlier version of this using ros2 topic echo and comparing the results with rclcpp nodes but I need to do a bit more before I feel good putting this in review.
Connects to #202",For reviewers: I tested this pull request by echoing the parameter events topic and running this script https://gist.github.com/nuclearsandwich/944595aad28cb1323c909be45f4d4259 while either the python or cpp talker node was running and comparing the results.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,226,2018-08-17T00:40:57Z,2018-08-24T17:52:21Z,2018-08-24T17:52:25Z,MERGED,True,53,23,5,https://github.com/nuclearsandwich,Publish parameter events,10,[],https://github.com/ros2/rclpy/pull/226,https://github.com/nuclearsandwich,3,https://github.com/ros2/rclpy/pull/226#issuecomment-414013278,"This is a recreation of a change that was accidentally authored in a temporary container 😭.
Adds a parameter events publisher to rclpy nodes and publishes events when parameters are successfully set atomically.
I did some basic testing of the earlier version of this using ros2 topic echo and comparing the results with rclcpp nodes but I need to do a bit more before I feel good putting this in review.
Connects to #202","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,227,2018-08-20T21:21:09Z,2018-08-22T19:02:58Z,2018-08-22T19:03:03Z,MERGED,True,37,5,2,https://github.com/mikaelarguedas,Bouncy patch2 backports,2,[],https://github.com/ros2/rclpy/pull/227,https://github.com/mikaelarguedas,1,https://github.com/ros2/rclpy/pull/227,"Backport #216 and #217 to bouncy branch
Connects to ros2/ros2#563","Backport #216 and #217 to bouncy branch
Connects to ros2/ros2#563",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,228,2018-08-20T21:23:47Z,2018-08-24T17:50:04Z,2018-08-24T17:50:08Z,MERGED,True,129,0,2,https://github.com/nuclearsandwich,Add Node API method for setting the parameters_callback.,2,[],https://github.com/ros2/rclpy/pull/228,https://github.com/nuclearsandwich,1,https://github.com/ros2/rclpy/pull/228,"In #214 I wired up support for invoking a callback function to accept or reject a set of parameters but did not add the API to set that callback or tests for that functionality.
This pull request adds a set_parameters_callback method to rclpy.Node and some unit tests verifying that the callbacks are used and that the parameter values are set or not appropriately.
Every test case I used has been put into the unit tests below.
Connects to #202","In #214 I wired up support for invoking a callback function to accept or reject a set of parameters but did not add the API to set that callback or tests for that functionality.
This pull request adds a set_parameters_callback method to rclpy.Node and some unit tests verifying that the callbacks are used and that the parameter values are set or not appropriately.
Every test case I used has been put into the unit tests below.
Connects to #202",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,228,2018-08-20T21:23:47Z,2018-08-24T17:50:04Z,2018-08-24T17:50:08Z,MERGED,True,129,0,2,https://github.com/nuclearsandwich,Add Node API method for setting the parameters_callback.,2,[],https://github.com/ros2/rclpy/pull/228,https://github.com/nuclearsandwich,2,https://github.com/ros2/rclpy/pull/228#issuecomment-415616521,"In #214 I wired up support for invoking a callback function to accept or reject a set of parameters but did not add the API to set that callback or tests for that functionality.
This pull request adds a set_parameters_callback method to rclpy.Node and some unit tests verifying that the callbacks are used and that the parameter values are set or not appropriately.
Every test case I used has been put into the unit tests below.
Connects to #202","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,229,2018-08-21T20:02:59Z,2018-08-21T20:22:00Z,2018-08-21T20:22:04Z,MERGED,True,3,0,1,https://github.com/dhood,Add test for when sim time is active but unset,1,[],https://github.com/ros2/rclpy/pull/229,https://github.com/dhood,1,https://github.com/ros2/rclpy/pull/229,"Currently the time is uninitialised in rcl in that state Should be addressed by ros2/rcl#283
I added this test in the past and it would fail. CI should pass now:

Linux 
Linux-aarch64 
macOS 
Windows","Currently the time is uninitialised in rcl in that state Should be addressed by ros2/rcl#283
I added this test in the past and it would fail. CI should pass now:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,230,2018-08-21T23:47:04Z,2018-08-27T18:55:21Z,2018-08-27T18:55:26Z,MERGED,True,6,24,2,https://github.com/sloretz,Use consolidated rcl_wait_set_clear(),2,['enhancement'],https://github.com/ros2/rclpy/pull/230,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/230,connects to ros2/rcl#285,connects to ros2/rcl#285,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,232,2018-08-22T22:01:52Z,2018-08-23T23:27:17Z,2018-08-23T23:27:22Z,CLOSED,False,39,0,1,https://github.com/hemantku,Missing exception states in rclpy,1,['more-information-needed'],https://github.com/ros2/rclpy/pull/232,https://github.com/hemantku,1,https://github.com/ros2/rclpy/pull/232,#224,#224,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,232,2018-08-22T22:01:52Z,2018-08-23T23:27:17Z,2018-08-23T23:27:22Z,CLOSED,False,39,0,1,https://github.com/hemantku,Missing exception states in rclpy,1,['more-information-needed'],https://github.com/ros2/rclpy/pull/232,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/232#issuecomment-415476083,#224,I agree with @wjwwood that exceptions should be added with code raising them. Without that I'm not sure if any given exception will be necessary.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,232,2018-08-22T22:01:52Z,2018-08-23T23:27:17Z,2018-08-23T23:27:22Z,CLOSED,False,39,0,1,https://github.com/hemantku,Missing exception states in rclpy,1,['more-information-needed'],https://github.com/ros2/rclpy/pull/232,https://github.com/hemantku,3,https://github.com/ros2/rclpy/pull/232#issuecomment-415485874,#224,I have used these exceptions in the joint_state_publisher package which I migrated to ROS 2. I would be happy to include this along with appropriate CR's for initiate and shutdown as they are made,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,232,2018-08-22T22:01:52Z,2018-08-23T23:27:17Z,2018-08-23T23:27:22Z,CLOSED,False,39,0,1,https://github.com/hemantku,Missing exception states in rclpy,1,['more-information-needed'],https://github.com/ros2/rclpy/pull/232,https://github.com/wjwwood,4,https://github.com/ros2/rclpy/pull/232#issuecomment-415586391,#224,@hemantku how are you using these exceptions in joint_state_publisher? are you just try-except'ing them or are you throwing them yourself?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,232,2018-08-22T22:01:52Z,2018-08-23T23:27:17Z,2018-08-23T23:27:22Z,CLOSED,False,39,0,1,https://github.com/hemantku,Missing exception states in rclpy,1,['more-information-needed'],https://github.com/ros2/rclpy/pull/232,https://github.com/hemantku,5,https://github.com/ros2/rclpy/pull/232#issuecomment-415594211,#224,@wjwwood  Try-except'ing them,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,232,2018-08-22T22:01:52Z,2018-08-23T23:27:17Z,2018-08-23T23:27:22Z,CLOSED,False,39,0,1,https://github.com/hemantku,Missing exception states in rclpy,1,['more-information-needed'],https://github.com/ros2/rclpy/pull/232,https://github.com/wjwwood,6,https://github.com/ros2/rclpy/pull/232#issuecomment-415594748,#224,"Well, if nothing is raising them then why do you need to try-except them? 😄",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,232,2018-08-22T22:01:52Z,2018-08-23T23:27:17Z,2018-08-23T23:27:22Z,CLOSED,False,39,0,1,https://github.com/hemantku,Missing exception states in rclpy,1,['more-information-needed'],https://github.com/ros2/rclpy/pull/232,https://github.com/wjwwood,7,https://github.com/ros2/rclpy/pull/232#issuecomment-415595166,#224,"Are you trying to have one Python file that supports ROS 1 and ROS 2 maybe?
If not, then I'd really say let's leave this pr (perhaps close it but leave the branch/fork) and reintroduce the exceptions when they're being used.
It's also possible that there are already functions which should raise them already but are not. In which case updating this pr to replace existing RuntimeError raises with more specific exceptions would be acceptable as well.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,232,2018-08-22T22:01:52Z,2018-08-23T23:27:17Z,2018-08-23T23:27:22Z,CLOSED,False,39,0,1,https://github.com/hemantku,Missing exception states in rclpy,1,['more-information-needed'],https://github.com/ros2/rclpy/pull/232,https://github.com/hemantku,8,https://github.com/ros2/rclpy/pull/232#issuecomment-415604542,#224,"Alright, I will close this PR out and introduce them along when I replace the RuntimeError",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,233,2018-08-29T14:36:35Z,2018-09-06T13:02:26Z,2018-09-06T13:02:31Z,MERGED,True,40,16,3,https://github.com/mjcarroll,Get node names and namespaces,3,[],https://github.com/ros2/rclpy/pull/233,https://github.com/mjcarroll,1,https://github.com/ros2/rclpy/pull/233,"Add a new method to return a list of tuple to get both node names and namespaces.
Connects to ros2/rmw#142","Add a new method to return a list of tuple to get both node names and namespaces.
Connects to ros2/rmw#142",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,233,2018-08-29T14:36:35Z,2018-09-06T13:02:26Z,2018-09-06T13:02:31Z,MERGED,True,40,16,3,https://github.com/mjcarroll,Get node names and namespaces,3,[],https://github.com/ros2/rclpy/pull/233,https://github.com/wjwwood,2,https://github.com/ros2/rclpy/pull/233#issuecomment-417111587,"Add a new method to return a list of tuple to get both node names and namespaces.
Connects to ros2/rmw#142","I resolved the merge conflict with ee89fac, @mjcarroll please have a look at it. A rebase might be better.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,234,2018-08-30T12:13:20Z,2018-08-30T13:59:59Z,2018-08-30T14:00:35Z,MERGED,True,6,3,1,https://github.com/nuclearsandwich,Fix warning when parameter value is uninitialized.,2,[],https://github.com/ros2/rclpy/pull/234,https://github.com/nuclearsandwich,1,https://github.com/ros2/rclpy/pull/234,"Resolves the warning below which popped up in the nightlies (example) from #225
In file included from /usr/include/python3.6m/pytime.h:6:0,
                 from /usr/include/python3.6m/Python.h:68,
                 from /home/rosbuild/ci_scripts/ws/src/ros2/rclpy/rclpy/src/rclpy/_rclpy.c:15:
/home/rosbuild/ci_scripts/ws/src/ros2/rclpy/rclpy/src/rclpy/_rclpy.c: In function ‘_parse_param_files’:
/usr/include/python3.6m/object.h:791:27: warning: ‘value’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         --(_py_decref_tmp)->ob_refcnt != 0)             \
                           ^~
/home/rosbuild/ci_scripts/ws/src/ros2/rclpy/rclpy/src/rclpy/_rclpy.c:3547:14: note: ‘value’ was declared here
   PyObject * value;
              ^~~~~","Resolves the warning below which popped up in the nightlies (example) from #225
In file included from /usr/include/python3.6m/pytime.h:6:0,
                 from /usr/include/python3.6m/Python.h:68,
                 from /home/rosbuild/ci_scripts/ws/src/ros2/rclpy/rclpy/src/rclpy/_rclpy.c:15:
/home/rosbuild/ci_scripts/ws/src/ros2/rclpy/rclpy/src/rclpy/_rclpy.c: In function ‘_parse_param_files’:
/usr/include/python3.6m/object.h:791:27: warning: ‘value’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         --(_py_decref_tmp)->ob_refcnt != 0)             \
                           ^~
/home/rosbuild/ci_scripts/ws/src/ros2/rclpy/rclpy/src/rclpy/_rclpy.c:3547:14: note: ‘value’ was declared here
   PyObject * value;
              ^~~~~",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,234,2018-08-30T12:13:20Z,2018-08-30T13:59:59Z,2018-08-30T14:00:35Z,MERGED,True,6,3,1,https://github.com/nuclearsandwich,Fix warning when parameter value is uninitialized.,2,[],https://github.com/ros2/rclpy/pull/234,https://github.com/nuclearsandwich,2,https://github.com/ros2/rclpy/pull/234#issuecomment-417297905,"Resolves the warning below which popped up in the nightlies (example) from #225
In file included from /usr/include/python3.6m/pytime.h:6:0,
                 from /usr/include/python3.6m/Python.h:68,
                 from /home/rosbuild/ci_scripts/ws/src/ros2/rclpy/rclpy/src/rclpy/_rclpy.c:15:
/home/rosbuild/ci_scripts/ws/src/ros2/rclpy/rclpy/src/rclpy/_rclpy.c: In function ‘_parse_param_files’:
/usr/include/python3.6m/object.h:791:27: warning: ‘value’ may be used uninitialized in this function [-Wmaybe-uninitialized]
         --(_py_decref_tmp)->ob_refcnt != 0)             \
                           ^~
/home/rosbuild/ci_scripts/ws/src/ros2/rclpy/rclpy/src/rclpy/_rclpy.c:3547:14: note: ‘value’ was declared here
   PyObject * value;
              ^~~~~","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,235,2018-09-07T15:36:28Z,2018-09-13T15:50:56Z,2018-09-13T15:51:04Z,MERGED,True,15,0,2,https://github.com/dirk-thomas,add getter for tuple with seconds and nanoseconds,4,['enhancement'],https://github.com/ros2/rclpy/pull/235,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/235,Exposing the tuple avoids calling code to perform the same computation in numerous places.,Exposing the tuple avoids calling code to perform the same computation in numerous places.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,235,2018-09-07T15:36:28Z,2018-09-13T15:50:56Z,2018-09-13T15:51:04Z,MERGED,True,15,0,2,https://github.com/dirk-thomas,add getter for tuple with seconds and nanoseconds,4,['enhancement'],https://github.com/ros2/rclpy/pull/235,https://github.com/yechun1,2,https://github.com/ros2/rclpy/pull/235#issuecomment-419803780,Exposing the tuple avoids calling code to perform the same computation in numerous places.,"below changes could work on my system:
 def seconds_nanoseconds(self):

-        nanoseconds = self.nanoseconds()
-        return (int(nanoseconds / 1e9), nanoseconds % 1e9)
+        nanoseconds = self.nanoseconds
+        return (int(nanoseconds / 1e9), int(nanoseconds % 1e9))",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,235,2018-09-07T15:36:28Z,2018-09-13T15:50:56Z,2018-09-13T15:51:04Z,MERGED,True,15,0,2,https://github.com/dirk-thomas,add getter for tuple with seconds and nanoseconds,4,['enhancement'],https://github.com/ros2/rclpy/pull/235,https://github.com/dirk-thomas,3,https://github.com/ros2/rclpy/pull/235#issuecomment-421056359,Exposing the tuple avoids calling code to perform the same computation in numerous places.,"I added a doc string and test, hope you don't mind. LGTM

I don't mind at all. That is great. One docstring in the class is certainly better than none 👍",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,237,2018-09-13T18:29:29Z,2018-09-13T23:46:52Z,2018-09-13T23:46:57Z,MERGED,True,40,0,3,https://github.com/sloretz,Add methods on Mock class for Python 3.5 compatibility,3,['bug'],https://github.com/ros2/rclpy/pull/237,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/237,"This fixes some test failures on xenial caused by #222. The tests used methods on unittest.mock.Mock that were added in python 3.6. This PR ~~~adds a subclass with those methods defined~~~ monkey patches those methods onto the mock class if they are not present.
Xenial CI just rclpy

CI bionic just rclpy

Will run full CI post review
Connects to ros2/build_farmer#147","This fixes some test failures on xenial caused by #222. The tests used methods on unittest.mock.Mock that were added in python 3.6. This PR ~~~adds a subclass with those methods defined~~~ monkey patches those methods onto the mock class if they are not present.
Xenial CI just rclpy

CI bionic just rclpy

Will run full CI post review
Connects to ros2/build_farmer#147",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,237,2018-09-13T18:29:29Z,2018-09-13T23:46:52Z,2018-09-13T23:46:57Z,MERGED,True,40,0,3,https://github.com/sloretz,Add methods on Mock class for Python 3.5 compatibility,3,['bug'],https://github.com/ros2/rclpy/pull/237,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/237#issuecomment-421109810,"This fixes some test failures on xenial caused by #222. The tests used methods on unittest.mock.Mock that were added in python 3.6. This PR ~~~adds a subclass with those methods defined~~~ monkey patches those methods onto the mock class if they are not present.
Xenial CI just rclpy

CI bionic just rclpy

Will run full CI post review
Connects to ros2/build_farmer#147","Looks like CI is quick, CI testing just rclpy

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,237,2018-09-13T18:29:29Z,2018-09-13T23:46:52Z,2018-09-13T23:46:57Z,MERGED,True,40,0,3,https://github.com/sloretz,Add methods on Mock class for Python 3.5 compatibility,3,['bug'],https://github.com/ros2/rclpy/pull/237,https://github.com/dirk-thomas,3,https://github.com/ros2/rclpy/pull/237#issuecomment-421116193,"This fixes some test failures on xenial caused by #222. The tests used methods on unittest.mock.Mock that were added in python 3.6. This PR ~~~adds a subclass with those methods defined~~~ monkey patches those methods onto the mock class if they are not present.
Xenial CI just rclpy

CI bionic just rclpy

Will run full CI post review
Connects to ros2/build_farmer#147",You don't need a subclass you could just add the methods to the existing class.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,237,2018-09-13T18:29:29Z,2018-09-13T23:46:52Z,2018-09-13T23:46:57Z,MERGED,True,40,0,3,https://github.com/sloretz,Add methods on Mock class for Python 3.5 compatibility,3,['bug'],https://github.com/ros2/rclpy/pull/237,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/237#issuecomment-421164825,"This fixes some test failures on xenial caused by #222. The tests used methods on unittest.mock.Mock that were added in python 3.6. This PR ~~~adds a subclass with those methods defined~~~ monkey patches those methods onto the mock class if they are not present.
Xenial CI just rclpy

CI bionic just rclpy

Will run full CI post review
Connects to ros2/build_farmer#147",@dirk-thomas monkey patch instead of subclass in acc2065,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,238,2018-09-14T00:59:24Z,2018-09-14T16:53:20Z,2018-09-14T16:53:24Z,MERGED,True,4,3,1,https://github.com/dhood,Avoid repeated fini-ing on failure to parse yaml params,2,[],https://github.com/ros2/rclpy/pull/238,https://github.com/dhood,1,https://github.com/ros2/rclpy/pull/238,I was getting a segfault parsing an invalid yaml file.,I was getting a segfault parsing an invalid yaml file.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,238,2018-09-14T00:59:24Z,2018-09-14T16:53:20Z,2018-09-14T16:53:24Z,MERGED,True,4,3,1,https://github.com/dhood,Avoid repeated fini-ing on failure to parse yaml params,2,[],https://github.com/ros2/rclpy/pull/238,https://github.com/dhood,2,https://github.com/ros2/rclpy/pull/238#issuecomment-421419537,I was getting a segfault parsing an invalid yaml file.,,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,239,2018-09-17T20:32:29Z,2018-09-17T21:56:14Z,2018-09-17T21:56:18Z,MERGED,True,2,3,1,https://github.com/sloretz,Don't use MethodType when monkey patching,1,['bug'],https://github.com/ros2/rclpy/pull/239,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/239,"#237 added monkey patching to unitest.mock.Mock for compatibility with python 3.5. It looks like I got confused and ended up merging without running xenial CI again, and the approach had test failures: https://ci.ros2.org/view/nightly/job/nightly_xenial_linux_release/101/testReport/junit/(root)/rclpy/test_test_clock/
There seems to be a difference in the number of arguments MethodType takes in python 3.5 and 3.6. It turns out MethodType isn't necessary when adding new methods to a class rather than an instance, so this PR removes it.
Xenial

CI

Linux 
Linux-aarch64 
macOS 
Windows","#237 added monkey patching to unitest.mock.Mock for compatibility with python 3.5. It looks like I got confused and ended up merging without running xenial CI again, and the approach had test failures: https://ci.ros2.org/view/nightly/job/nightly_xenial_linux_release/101/testReport/junit/(root)/rclpy/test_test_clock/
There seems to be a difference in the number of arguments MethodType takes in python 3.5 and 3.6. It turns out MethodType isn't necessary when adding new methods to a class rather than an instance, so this PR removes it.
Xenial

CI

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,242,2018-10-08T19:16:35Z,2019-01-10T10:56:54Z,2019-01-10T10:56:59Z,MERGED,True,90,6,6,https://github.com/josephduchesne,rclpy raw subscriptions,12,[],https://github.com/ros2/rclpy/pull/242,https://github.com/josephduchesne,1,https://github.com/ros2/rclpy/pull/242,"Note: This implementation is incomplete and at the moment this PR exists primarily for getting feedback.
This is being done so that ros2cli#132 can implement ""ros2 topic bw"".

 Initial prototype
 Correct memory allocation implementation
 Add tests
 Add example to demos/demo_nodes_py

The general idea is to allow creating a raw subscription like so:
class ListenerRaw(Node):

    def __init__(self):
        super().__init__('listener')
        self.sub = self.create_subscription(String, 'chatter', self.chatter_callback, raw=True)

    def chatter_callback(self, msg):
        self.get_logger().info('I heard: [%s]' % msg)

This will call rcl_take_serialized_message rather than rcl_take internally, and return a python byte array representing the serialised message.

[INFO] [listener]: I heard: [b'\x00\x01\x00\x00\x05\x00\x00\x00Test\x00\x00\x00\x00']
(For the message ""Test"").","Note: This implementation is incomplete and at the moment this PR exists primarily for getting feedback.
This is being done so that ros2cli#132 can implement ""ros2 topic bw"".

 Initial prototype
 Correct memory allocation implementation
 Add tests
 Add example to demos/demo_nodes_py

The general idea is to allow creating a raw subscription like so:
class ListenerRaw(Node):

    def __init__(self):
        super().__init__('listener')
        self.sub = self.create_subscription(String, 'chatter', self.chatter_callback, raw=True)

    def chatter_callback(self, msg):
        self.get_logger().info('I heard: [%s]' % msg)

This will call rcl_take_serialized_message rather than rcl_take internally, and return a python byte array representing the serialised message.

[INFO] [listener]: I heard: [b'\x00\x01\x00\x00\x05\x00\x00\x00Test\x00\x00\x00\x00']
(For the message ""Test"").",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,242,2018-10-08T19:16:35Z,2019-01-10T10:56:54Z,2019-01-10T10:56:59Z,MERGED,True,90,6,6,https://github.com/josephduchesne,rclpy raw subscriptions,12,[],https://github.com/ros2/rclpy/pull/242,https://github.com/josephduchesne,2,https://github.com/ros2/rclpy/pull/242#issuecomment-428039291,"Note: This implementation is incomplete and at the moment this PR exists primarily for getting feedback.
This is being done so that ros2cli#132 can implement ""ros2 topic bw"".

 Initial prototype
 Correct memory allocation implementation
 Add tests
 Add example to demos/demo_nodes_py

The general idea is to allow creating a raw subscription like so:
class ListenerRaw(Node):

    def __init__(self):
        super().__init__('listener')
        self.sub = self.create_subscription(String, 'chatter', self.chatter_callback, raw=True)

    def chatter_callback(self, msg):
        self.get_logger().info('I heard: [%s]' % msg)

This will call rcl_take_serialized_message rather than rcl_take internally, and return a python byte array representing the serialised message.

[INFO] [listener]: I heard: [b'\x00\x01\x00\x00\x05\x00\x00\x00Test\x00\x00\x00\x00']
(For the message ""Test"").",I've updated the implementation to use rmw's allocator (I believe) properly. Let me know if this is a reasonable way to go about this and I'll round it out with tests and an example.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,242,2018-10-08T19:16:35Z,2019-01-10T10:56:54Z,2019-01-10T10:56:59Z,MERGED,True,90,6,6,https://github.com/josephduchesne,rclpy raw subscriptions,12,[],https://github.com/ros2/rclpy/pull/242,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/242#issuecomment-436311173,"Note: This implementation is incomplete and at the moment this PR exists primarily for getting feedback.
This is being done so that ros2cli#132 can implement ""ros2 topic bw"".

 Initial prototype
 Correct memory allocation implementation
 Add tests
 Add example to demos/demo_nodes_py

The general idea is to allow creating a raw subscription like so:
class ListenerRaw(Node):

    def __init__(self):
        super().__init__('listener')
        self.sub = self.create_subscription(String, 'chatter', self.chatter_callback, raw=True)

    def chatter_callback(self, msg):
        self.get_logger().info('I heard: [%s]' % msg)

This will call rcl_take_serialized_message rather than rcl_take internally, and return a python byte array representing the serialised message.

[INFO] [listener]: I heard: [b'\x00\x01\x00\x00\x05\x00\x00\x00Test\x00\x00\x00\x00']
(For the message ""Test"").","The idea here looks good to me.  This needs a rebase, and as you mentioned tests and examples, but I think we can go ahead with this.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,242,2018-10-08T19:16:35Z,2019-01-10T10:56:54Z,2019-01-10T10:56:59Z,MERGED,True,90,6,6,https://github.com/josephduchesne,rclpy raw subscriptions,12,[],https://github.com/ros2/rclpy/pull/242,https://github.com/josephduchesne,4,https://github.com/ros2/rclpy/pull/242#issuecomment-438541800,"Note: This implementation is incomplete and at the moment this PR exists primarily for getting feedback.
This is being done so that ros2cli#132 can implement ""ros2 topic bw"".

 Initial prototype
 Correct memory allocation implementation
 Add tests
 Add example to demos/demo_nodes_py

The general idea is to allow creating a raw subscription like so:
class ListenerRaw(Node):

    def __init__(self):
        super().__init__('listener')
        self.sub = self.create_subscription(String, 'chatter', self.chatter_callback, raw=True)

    def chatter_callback(self, msg):
        self.get_logger().info('I heard: [%s]' % msg)

This will call rcl_take_serialized_message rather than rcl_take internally, and return a python byte array representing the serialised message.

[INFO] [listener]: I heard: [b'\x00\x01\x00\x00\x05\x00\x00\x00Test\x00\x00\x00\x00']
(For the message ""Test"").","Thanks for the review. I'll have a chance to work on the rebase, requested changes and tests this weekend.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,242,2018-10-08T19:16:35Z,2019-01-10T10:56:54Z,2019-01-10T10:56:59Z,MERGED,True,90,6,6,https://github.com/josephduchesne,rclpy raw subscriptions,12,[],https://github.com/ros2/rclpy/pull/242,https://github.com/josephduchesne,5,https://github.com/ros2/rclpy/pull/242#issuecomment-441406777,"Note: This implementation is incomplete and at the moment this PR exists primarily for getting feedback.
This is being done so that ros2cli#132 can implement ""ros2 topic bw"".

 Initial prototype
 Correct memory allocation implementation
 Add tests
 Add example to demos/demo_nodes_py

The general idea is to allow creating a raw subscription like so:
class ListenerRaw(Node):

    def __init__(self):
        super().__init__('listener')
        self.sub = self.create_subscription(String, 'chatter', self.chatter_callback, raw=True)

    def chatter_callback(self, msg):
        self.get_logger().info('I heard: [%s]' % msg)

This will call rcl_take_serialized_message rather than rcl_take internally, and return a python byte array representing the serialised message.

[INFO] [listener]: I heard: [b'\x00\x01\x00\x00\x05\x00\x00\x00Test\x00\x00\x00\x00']
(For the message ""Test"").","I think this PR is done now. I don't believe that this functionality requires a demo node, although I can happily add one. It's fairly esoteric and demo nodes are aimed at beginners.
Unit tests pass locally for the package, however the build farm test is failing. I think it's due to the build farm compiling against bouncy debs (specifically bouncy rcl), when this is built against and branched off of the latest master branch. Let me know if you believe that is my fault and I'll dig further to fix it.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,242,2018-10-08T19:16:35Z,2019-01-10T10:56:54Z,2019-01-10T10:56:59Z,MERGED,True,90,6,6,https://github.com/josephduchesne,rclpy raw subscriptions,12,[],https://github.com/ros2/rclpy/pull/242,https://github.com/Karsten1987,6,https://github.com/ros2/rclpy/pull/242#issuecomment-441416893,"Note: This implementation is incomplete and at the moment this PR exists primarily for getting feedback.
This is being done so that ros2cli#132 can implement ""ros2 topic bw"".

 Initial prototype
 Correct memory allocation implementation
 Add tests
 Add example to demos/demo_nodes_py

The general idea is to allow creating a raw subscription like so:
class ListenerRaw(Node):

    def __init__(self):
        super().__init__('listener')
        self.sub = self.create_subscription(String, 'chatter', self.chatter_callback, raw=True)

    def chatter_callback(self, msg):
        self.get_logger().info('I heard: [%s]' % msg)

This will call rcl_take_serialized_message rather than rcl_take internally, and return a python byte array representing the serialised message.

[INFO] [listener]: I heard: [b'\x00\x01\x00\x00\x05\x00\x00\x00Test\x00\x00\x00\x00']
(For the message ""Test"").","@josephduchesne thanks for all the work done here.
I ran a first CI build on that:

Linux 
Linux-aarch64 
macOS 
Windows 

In the meantime, I am actually in favor of having a demo similar to the C++ version of it so that the demo packages don't diverge too much. I don't consider them only aiming at beginners, but also to literally demonstrate the capabilities of ROS 2 and their respective APIs.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,242,2018-10-08T19:16:35Z,2019-01-10T10:56:54Z,2019-01-10T10:56:59Z,MERGED,True,90,6,6,https://github.com/josephduchesne,rclpy raw subscriptions,12,[],https://github.com/ros2/rclpy/pull/242,https://github.com/josephduchesne,7,https://github.com/ros2/rclpy/pull/242#issuecomment-441460753,"Note: This implementation is incomplete and at the moment this PR exists primarily for getting feedback.
This is being done so that ros2cli#132 can implement ""ros2 topic bw"".

 Initial prototype
 Correct memory allocation implementation
 Add tests
 Add example to demos/demo_nodes_py

The general idea is to allow creating a raw subscription like so:
class ListenerRaw(Node):

    def __init__(self):
        super().__init__('listener')
        self.sub = self.create_subscription(String, 'chatter', self.chatter_callback, raw=True)

    def chatter_callback(self, msg):
        self.get_logger().info('I heard: [%s]' % msg)

This will call rcl_take_serialized_message rather than rcl_take internally, and return a python byte array representing the serialised message.

[INFO] [listener]: I heard: [b'\x00\x01\x00\x00\x05\x00\x00\x00Test\x00\x00\x00\x00']
(For the message ""Test"").","In your opinion, how much effort would it be to expose the rcl_serialize and rcl_deserialize functions to this PR? This would allow to instantiate the message being published, serialize it and byte-wise compare the received message.

I poked around the rcl code and it appears that this doesn't exist in rcl. The functions you are thinking of are probably rmw_serialize and rmw_deserialize. That raises some design questions.
How would these look:
rmw_ret_t
rmw_deserialize(
  const rmw_serialized_message_t * serialized_message,
  const rosidl_message_type_support_t * type_support,
void * ros_message)
string_message = rclpy.deserialize(input_bytes, std_msgs.msg.String)
rmw_ret_t
rmw_serialize(
  const void * ros_message,
  const rosidl_message_type_support_t * type_support,
  rmw_serialized_message_t * serialized_message)
output_bytes = rclpy.serialize(std_msgs_string_object)
Should I go ahead with this, or is this too much of a diversion from this original ticket?
It's not prohibitively complex, but I'm not sure the use case justifies the effort at the moment.
This would be required if someone wanted to implement something like ros1's rosbag (ros2bag doesn't use the rmw serialization system AFIK, and for good reasons- although it appears to me to result in an inevitable performance hit due to the abstraction). Other than that I don't think it provides much value.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,242,2018-10-08T19:16:35Z,2019-01-10T10:56:54Z,2019-01-10T10:56:59Z,MERGED,True,90,6,6,https://github.com/josephduchesne,rclpy raw subscriptions,12,[],https://github.com/ros2/rclpy/pull/242,https://github.com/Karsten1987,8,https://github.com/ros2/rclpy/pull/242#issuecomment-442172032,"Note: This implementation is incomplete and at the moment this PR exists primarily for getting feedback.
This is being done so that ros2cli#132 can implement ""ros2 topic bw"".

 Initial prototype
 Correct memory allocation implementation
 Add tests
 Add example to demos/demo_nodes_py

The general idea is to allow creating a raw subscription like so:
class ListenerRaw(Node):

    def __init__(self):
        super().__init__('listener')
        self.sub = self.create_subscription(String, 'chatter', self.chatter_callback, raw=True)

    def chatter_callback(self, msg):
        self.get_logger().info('I heard: [%s]' % msg)

This will call rcl_take_serialized_message rather than rcl_take internally, and return a python byte array representing the serialised message.

[INFO] [listener]: I heard: [b'\x00\x01\x00\x00\x05\x00\x00\x00Test\x00\x00\x00\x00']
(For the message ""Test"").","Should I go ahead with this, or is this too much of a diversion from this original ticket?
It's not prohibitively complex, but I'm not sure the use case justifies the effort at the moment.

I believe it makes sense to add this here, e.g. once you've received binary data, eventually the binary data should be converted to ROS messages again. This use case is also helpful for the tests of this PR.
We would appreciate if you spend a little bit more time on this, but it's entirely up to you :)
In case, the proposed python API for the rmw_serialize and rmw_deserialize look good to me. You could maybe stay consistent with the rclpy API and swap the arguments similar like here:
self.pub = self.create_publisher(String, 'chatter')
https://github.com/ros2/demos/blob/master/demo_nodes_py/demo_nodes_py/topics/talker.py#L26
With that the proposed API:
string_message = rclpy.deserialize(std_msgs.msg.String, input_bytes)
binary_message = rclpy.serialize(std_msgs.msg.String, message)
Let us know if you want to work a little bit more on this. Otherwise, we could go ahead and merge this and ticket the remaining tasks.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,242,2018-10-08T19:16:35Z,2019-01-10T10:56:54Z,2019-01-10T10:56:59Z,MERGED,True,90,6,6,https://github.com/josephduchesne,rclpy raw subscriptions,12,[],https://github.com/ros2/rclpy/pull/242,https://github.com/dirk-thomas,9,https://github.com/ros2/rclpy/pull/242#issuecomment-442173734,"Note: This implementation is incomplete and at the moment this PR exists primarily for getting feedback.
This is being done so that ros2cli#132 can implement ""ros2 topic bw"".

 Initial prototype
 Correct memory allocation implementation
 Add tests
 Add example to demos/demo_nodes_py

The general idea is to allow creating a raw subscription like so:
class ListenerRaw(Node):

    def __init__(self):
        super().__init__('listener')
        self.sub = self.create_subscription(String, 'chatter', self.chatter_callback, raw=True)

    def chatter_callback(self, msg):
        self.get_logger().info('I heard: [%s]' % msg)

This will call rcl_take_serialized_message rather than rcl_take internally, and return a python byte array representing the serialised message.

[INFO] [listener]: I heard: [b'\x00\x01\x00\x00\x05\x00\x00\x00Test\x00\x00\x00\x00']
(For the message ""Test"").","rclpy.serialize(std_msgs.msg.String, message)

For rclpy.serialize the first argument isn't necessary since it is implicitly available as type(message).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,242,2018-10-08T19:16:35Z,2019-01-10T10:56:54Z,2019-01-10T10:56:59Z,MERGED,True,90,6,6,https://github.com/josephduchesne,rclpy raw subscriptions,12,[],https://github.com/ros2/rclpy/pull/242,https://github.com/josephduchesne,10,https://github.com/ros2/rclpy/pull/242#issuecomment-443843071,"Note: This implementation is incomplete and at the moment this PR exists primarily for getting feedback.
This is being done so that ros2cli#132 can implement ""ros2 topic bw"".

 Initial prototype
 Correct memory allocation implementation
 Add tests
 Add example to demos/demo_nodes_py

The general idea is to allow creating a raw subscription like so:
class ListenerRaw(Node):

    def __init__(self):
        super().__init__('listener')
        self.sub = self.create_subscription(String, 'chatter', self.chatter_callback, raw=True)

    def chatter_callback(self, msg):
        self.get_logger().info('I heard: [%s]' % msg)

This will call rcl_take_serialized_message rather than rcl_take internally, and return a python byte array representing the serialised message.

[INFO] [listener]: I heard: [b'\x00\x01\x00\x00\x05\x00\x00\x00Test\x00\x00\x00\x00']
(For the message ""Test"").","Unfortunately, I don't think I'll have time in the next few weeks to work on further extending rclpy, and it would be nice to unblock the rostopic bw work that I originally wrote this for. If it's possible for this to be merged as is or with minimal changes, that would be nice.
I can try to do the rclpy.deserialize/rclpy.serialize work around the holidays, but that's probably about as much work as this PR by itself, again.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,242,2018-10-08T19:16:35Z,2019-01-10T10:56:54Z,2019-01-10T10:56:59Z,MERGED,True,90,6,6,https://github.com/josephduchesne,rclpy raw subscriptions,12,[],https://github.com/ros2/rclpy/pull/242,https://github.com/josephduchesne,11,https://github.com/ros2/rclpy/pull/242#issuecomment-447720292,"Note: This implementation is incomplete and at the moment this PR exists primarily for getting feedback.
This is being done so that ros2cli#132 can implement ""ros2 topic bw"".

 Initial prototype
 Correct memory allocation implementation
 Add tests
 Add example to demos/demo_nodes_py

The general idea is to allow creating a raw subscription like so:
class ListenerRaw(Node):

    def __init__(self):
        super().__init__('listener')
        self.sub = self.create_subscription(String, 'chatter', self.chatter_callback, raw=True)

    def chatter_callback(self, msg):
        self.get_logger().info('I heard: [%s]' % msg)

This will call rcl_take_serialized_message rather than rcl_take internally, and return a python byte array representing the serialised message.

[INFO] [listener]: I heard: [b'\x00\x01\x00\x00\x05\x00\x00\x00Test\x00\x00\x00\x00']
(For the message ""Test"").",@Karsten1987 can this be merged?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,242,2018-10-08T19:16:35Z,2019-01-10T10:56:54Z,2019-01-10T10:56:59Z,MERGED,True,90,6,6,https://github.com/josephduchesne,rclpy raw subscriptions,12,[],https://github.com/ros2/rclpy/pull/242,https://github.com/Karsten1987,12,https://github.com/ros2/rclpy/pull/242#issuecomment-447723215,"Note: This implementation is incomplete and at the moment this PR exists primarily for getting feedback.
This is being done so that ros2cli#132 can implement ""ros2 topic bw"".

 Initial prototype
 Correct memory allocation implementation
 Add tests
 Add example to demos/demo_nodes_py

The general idea is to allow creating a raw subscription like so:
class ListenerRaw(Node):

    def __init__(self):
        super().__init__('listener')
        self.sub = self.create_subscription(String, 'chatter', self.chatter_callback, raw=True)

    def chatter_callback(self, msg):
        self.get_logger().info('I heard: [%s]' % msg)

This will call rcl_take_serialized_message rather than rcl_take internally, and return a python byte array representing the serialised message.

[INFO] [listener]: I heard: [b'\x00\x01\x00\x00\x05\x00\x00\x00Test\x00\x00\x00\x00']
(For the message ""Test"").","The current branch does not compile with the latest master version and has to be rebased as far as I can tell.
Then further, there was a recent change in the crystal API which takes the serialized messages with a buffer of type uint8_t and not as char *. This change has to be addressed here as well.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,242,2018-10-08T19:16:35Z,2019-01-10T10:56:54Z,2019-01-10T10:56:59Z,MERGED,True,90,6,6,https://github.com/josephduchesne,rclpy raw subscriptions,12,[],https://github.com/ros2/rclpy/pull/242,https://github.com/josephduchesne,13,https://github.com/ros2/rclpy/pull/242#issuecomment-450465949,"Note: This implementation is incomplete and at the moment this PR exists primarily for getting feedback.
This is being done so that ros2cli#132 can implement ""ros2 topic bw"".

 Initial prototype
 Correct memory allocation implementation
 Add tests
 Add example to demos/demo_nodes_py

The general idea is to allow creating a raw subscription like so:
class ListenerRaw(Node):

    def __init__(self):
        super().__init__('listener')
        self.sub = self.create_subscription(String, 'chatter', self.chatter_callback, raw=True)

    def chatter_callback(self, msg):
        self.get_logger().info('I heard: [%s]' % msg)

This will call rcl_take_serialized_message rather than rcl_take internally, and return a python byte array representing the serialised message.

[INFO] [listener]: I heard: [b'\x00\x01\x00\x00\x05\x00\x00\x00Test\x00\x00\x00\x00']
(For the message ""Test"").","Latest master branch merged in, compiled and tested in a clean source install of ros2 crystal (with the minor fixes performed). Also updated the sister request in ros2/demos#287 in the same way although it worked without changes after merging.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,242,2018-10-08T19:16:35Z,2019-01-10T10:56:54Z,2019-01-10T10:56:59Z,MERGED,True,90,6,6,https://github.com/josephduchesne,rclpy raw subscriptions,12,[],https://github.com/ros2/rclpy/pull/242,https://github.com/Karsten1987,14,https://github.com/ros2/rclpy/pull/242#issuecomment-452300047,"Note: This implementation is incomplete and at the moment this PR exists primarily for getting feedback.
This is being done so that ros2cli#132 can implement ""ros2 topic bw"".

 Initial prototype
 Correct memory allocation implementation
 Add tests
 Add example to demos/demo_nodes_py

The general idea is to allow creating a raw subscription like so:
class ListenerRaw(Node):

    def __init__(self):
        super().__init__('listener')
        self.sub = self.create_subscription(String, 'chatter', self.chatter_callback, raw=True)

    def chatter_callback(self, msg):
        self.get_logger().info('I heard: [%s]' % msg)

This will call rcl_take_serialized_message rather than rcl_take internally, and return a python byte array representing the serialised message.

[INFO] [listener]: I heard: [b'\x00\x01\x00\x00\x05\x00\x00\x00Test\x00\x00\x00\x00']
(For the message ""Test"").","Thanks for iterating over this.
CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,242,2018-10-08T19:16:35Z,2019-01-10T10:56:54Z,2019-01-10T10:56:59Z,MERGED,True,90,6,6,https://github.com/josephduchesne,rclpy raw subscriptions,12,[],https://github.com/ros2/rclpy/pull/242,https://github.com/Karsten1987,15,https://github.com/ros2/rclpy/pull/242#issuecomment-453055113,"Note: This implementation is incomplete and at the moment this PR exists primarily for getting feedback.
This is being done so that ros2cli#132 can implement ""ros2 topic bw"".

 Initial prototype
 Correct memory allocation implementation
 Add tests
 Add example to demos/demo_nodes_py

The general idea is to allow creating a raw subscription like so:
class ListenerRaw(Node):

    def __init__(self):
        super().__init__('listener')
        self.sub = self.create_subscription(String, 'chatter', self.chatter_callback, raw=True)

    def chatter_callback(self, msg):
        self.get_logger().info('I heard: [%s]' % msg)

This will call rcl_take_serialized_message rather than rcl_take internally, and return a python byte array representing the serialised message.

[INFO] [listener]: I heard: [b'\x00\x01\x00\x00\x05\x00\x00\x00Test\x00\x00\x00\x00']
(For the message ""Test"").",Thanks for iterating over this.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,243,2018-10-08T22:50:54Z,2018-10-11T18:34:02Z,2018-10-11T18:34:08Z,MERGED,True,6,0,1,https://github.com/nuclearsandwich,Add library path hook.,1,[],https://github.com/ros2/rclpy/pull/243,https://github.com/nuclearsandwich,1,https://github.com/ros2/rclpy/pull/243,"Set library path environment hook for this package. This package is one of a handful which installs libraries without setting an environment hook to add them to the platform library path.
Connects to ros2/ros_workspace#10","Set library path environment hook for this package. This package is one of a handful which installs libraries without setting an environment hook to add them to the platform library path.
Connects to ros2/ros_workspace#10",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,243,2018-10-08T22:50:54Z,2018-10-11T18:34:02Z,2018-10-11T18:34:08Z,MERGED,True,6,0,1,https://github.com/nuclearsandwich,Add library path hook.,1,[],https://github.com/ros2/rclpy/pull/243,https://github.com/nuclearsandwich,2,https://github.com/ros2/rclpy/pull/243#issuecomment-429070689,"Set library path environment hook for this package. This package is one of a handful which installs libraries without setting an environment hook to add them to the platform library path.
Connects to ros2/ros_workspace#10",CI for this change was run successfully and linked in ros2/ros_workspace#10 (comment),True,{}
ros2/rclpy,https://github.com/ros2/rclpy,245,2018-10-30T03:52:24Z,2018-11-02T02:08:43Z,2018-11-02T02:08:47Z,MERGED,True,85,84,1,https://github.com/wjwwood,use new error handling API from rcutils,1,['enhancement'],https://github.com/ros2/rclpy/pull/245,https://github.com/wjwwood,1,https://github.com/ros2/rclpy/pull/245,Connects to ros2/rcutils#121,Connects to ros2/rcutils#121,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,247,2018-11-16T23:34:51Z,2018-12-07T00:05:24Z,2018-12-07T00:05:28Z,MERGED,True,250,0,2,https://github.com/ross-desmond,Add node graph functions,8,[],https://github.com/ros2/rclpy/pull/247,https://github.com/ross-desmond,1,https://github.com/ros2/rclpy/pull/247,"Summary: Add node graph calls to Node class in ros2 python
Connects to ros2/rcl#333","Summary: Add node graph calls to Node class in ros2 python
Connects to ros2/rcl#333",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,247,2018-11-16T23:34:51Z,2018-12-07T00:05:24Z,2018-12-07T00:05:28Z,MERGED,True,250,0,2,https://github.com/ross-desmond,Add node graph functions,8,[],https://github.com/ros2/rclpy/pull/247,https://github.com/ross-desmond,2,https://github.com/ros2/rclpy/pull/247#issuecomment-439564856,"Summary: Add node graph calls to Node class in ros2 python
Connects to ros2/rcl#333",Connected to rcl,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,247,2018-11-16T23:34:51Z,2018-12-07T00:05:24Z,2018-12-07T00:05:28Z,MERGED,True,250,0,2,https://github.com/ross-desmond,Add node graph functions,8,[],https://github.com/ros2/rclpy/pull/247,https://github.com/thomas-moulard,3,https://github.com/ros2/rclpy/pull/247#issuecomment-443483153,"Summary: Add node graph calls to Node class in ros2 python
Connects to ros2/rcl#333",@ross-desmond PTAL at https://github.com/thomas-moulard/rclpy/tree/node_graph_impl - this fixes flake8 issues.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,247,2018-11-16T23:34:51Z,2018-12-07T00:05:24Z,2018-12-07T00:05:28Z,MERGED,True,250,0,2,https://github.com/ross-desmond,Add node graph functions,8,[],https://github.com/ros2/rclpy/pull/247,https://github.com/thomas-moulard,4,https://github.com/ros2/rclpy/pull/247#issuecomment-443483162,"Summary: Add node graph calls to Node class in ros2 python
Connects to ros2/rcl#333",Verified that tests are passing locally.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,247,2018-11-16T23:34:51Z,2018-12-07T00:05:24Z,2018-12-07T00:05:28Z,MERGED,True,250,0,2,https://github.com/ross-desmond,Add node graph functions,8,[],https://github.com/ros2/rclpy/pull/247,https://github.com/ross-desmond,5,https://github.com/ros2/rclpy/pull/247#issuecomment-444323140,"Summary: Add node graph calls to Node class in ros2 python
Connects to ros2/rcl#333",CI build failing due to 0.6.0 tag.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,247,2018-11-16T23:34:51Z,2018-12-07T00:05:24Z,2018-12-07T00:05:28Z,MERGED,True,250,0,2,https://github.com/ross-desmond,Add node graph functions,8,[],https://github.com/ros2/rclpy/pull/247,https://github.com/ross-desmond,6,https://github.com/ros2/rclpy/pull/247#issuecomment-444635001,"Summary: Add node graph calls to Node class in ros2 python
Connects to ros2/rcl#333",@clalancette Thanks!,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,248,2018-11-19T21:54:52Z,2018-11-20T19:04:56Z,2018-11-20T19:05:00Z,MERGED,True,5,5,1,https://github.com/jacobperron,Update rcl_wait_set_add_* calls,1,[],https://github.com/ros2/rclpy/pull/248,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/248,"Connects to ros2/rcl#335
Now the functions take an optional output index argument.","Connects to ros2/rcl#335
Now the functions take an optional output index argument.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,248,2018-11-19T21:54:52Z,2018-11-20T19:04:56Z,2018-11-20T19:05:00Z,MERGED,True,5,5,1,https://github.com/jacobperron,Update rcl_wait_set_add_* calls,1,[],https://github.com/ros2/rclpy/pull/248,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/248#issuecomment-440389422,"Connects to ros2/rcl#335
Now the functions take an optional output index argument.",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,249,2018-11-19T23:34:34Z,2018-11-30T05:33:11Z,2018-11-30T05:33:15Z,MERGED,True,480,203,23,https://github.com/wjwwood,refactor to allow for non-global init,4,['enhancement'],https://github.com/ros2/rclpy/pull/249,https://github.com/wjwwood,1,https://github.com/ros2/rclpy/pull/249,"Notable this pr, unlike the rclcpp one, does not provide access to the ingoing init options, partially because I think it's not as useful right now and partially because I'm completely out of time to work on this set of changes.
Connects to ros2/rmw#154","Notable this pr, unlike the rclcpp one, does not provide access to the ingoing init options, partially because I think it's not as useful right now and partially because I'm completely out of time to work on this set of changes.
Connects to ros2/rmw#154",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,249,2018-11-19T23:34:34Z,2018-11-30T05:33:11Z,2018-11-30T05:33:15Z,MERGED,True,480,203,23,https://github.com/wjwwood,refactor to allow for non-global init,4,['enhancement'],https://github.com/ros2/rclpy/pull/249,https://github.com/gonzodepedro,2,https://github.com/ros2/rclpy/pull/249#issuecomment-442147559,"Notable this pr, unlike the rclcpp one, does not provide access to the ingoing init options, partially because I think it's not as useful right now and partially because I'm completely out of time to work on this set of changes.
Connects to ros2/rmw#154",LGTM,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,250,2018-11-21T03:10:18Z,2018-11-26T17:27:51Z,2018-11-26T17:27:55Z,MERGED,True,568,16,5,https://github.com/sloretz,Python thing that adds things to the wait set,7,[],https://github.com/ros2/rclpy/pull/250,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/250,Python equivalent of ros2/rclcpp#589,Python equivalent of ros2/rclcpp#589,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,250,2018-11-21T03:10:18Z,2018-11-26T17:27:51Z,2018-11-26T17:27:55Z,MERGED,True,568,16,5,https://github.com/sloretz,Python thing that adds things to the wait set,7,[],https://github.com/ros2/rclpy/pull/250,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/250#issuecomment-440849697,Python equivalent of ros2/rclcpp#589,"Linux 
Linux-aarch64 

These failed due to jenkins issues, re-running

macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,250,2018-11-21T03:10:18Z,2018-11-26T17:27:51Z,2018-11-26T17:27:55Z,MERGED,True,568,16,5,https://github.com/sloretz,Python thing that adds things to the wait set,7,[],https://github.com/ros2/rclpy/pull/250,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/250#issuecomment-440870769,Python equivalent of ros2/rclcpp#589,"WIndows 
OSX",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,251,2018-11-27T00:51:58Z,2018-11-27T00:54:58Z,2018-11-27T00:55:02Z,MERGED,True,1,1,1,https://github.com/dirk-thomas,fix spelling,1,[],https://github.com/ros2/rclpy/pull/251,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/251,,,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,252,2018-11-30T01:11:00Z,2018-12-04T22:24:24Z,2018-12-04T22:24:28Z,MERGED,True,6,0,1,https://github.com/bpwilcox,Fill ParameterEvent.msg with timestamp and node path name,1,[],https://github.com/ros2/rclpy/pull/252,https://github.com/bpwilcox,1,https://github.com/ros2/rclpy/pull/252,"Connects to ros2/rcl_interfaces#51
This PR follows my pull request in rcl_interfaces: ros2/rcl_interfaces#51 which adds a node name field and timestamp field to the ParameterEvents.msg. This pull request fills those fields.","Connects to ros2/rcl_interfaces#51
This PR follows my pull request in rcl_interfaces: ros2/rcl_interfaces#51 which adds a node name field and timestamp field to the ParameterEvents.msg. This pull request fills those fields.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,254,2018-12-18T00:35:09Z,,2019-12-11T14:01:07Z,OPEN,False,54,4,4,https://github.com/mlautman,Adding a service to nodes for adjusting the node's logger level,1,['backlog'],https://github.com/ros2/rclpy/pull/254,https://github.com/mlautman,1,https://github.com/ros2/rclpy/pull/254,"This adds a service to python nodes for changing the logger level.
Depends on: ros2/rcl_interfaces#56","This adds a service to python nodes for changing the logger level.
Depends on: ros2/rcl_interfaces#56",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,254,2018-12-18T00:35:09Z,,2019-12-11T14:01:07Z,OPEN,False,54,4,4,https://github.com/mlautman,Adding a service to nodes for adjusting the node's logger level,1,['backlog'],https://github.com/ros2/rclpy/pull/254,https://github.com/tfoote,2,https://github.com/ros2/rclpy/pull/254#issuecomment-448421271,"This adds a service to python nodes for changing the logger level.
Depends on: ros2/rcl_interfaces#56","This makes sense generally as a direct port of the ROS1 functionality. However just looking at the message and the service it seems like it really is just a parameter on the node. And that if we reused the existing parameter infrastructure we would get a lot more tools and introspection available.
Logging level could be set and introspected using standard parameter tools. All that it would take is to pick a convention like using parameters that start with /logging_level / <LOGGERNAME> / level
Then tools like rqt_logger_level could simply be a parameter setting GUI with a filter for parameters that start with the prefix. Listing loggers would simply use the parameter listing capabilities.
When a new logger is created in the node it would create the parameter with it's startup setting. And would register for a parameter changed callback to validate any new logger settings.
In the future potentially other parameters could be added such as changing the logging output, not just the level.",True,{'THUMBS_UP': ['https://github.com/mlautman']}
ros2/rclpy,https://github.com/ros2/rclpy,254,2018-12-18T00:35:09Z,,2019-12-11T14:01:07Z,OPEN,False,54,4,4,https://github.com/mlautman,Adding a service to nodes for adjusting the node's logger level,1,['backlog'],https://github.com/ros2/rclpy/pull/254,https://github.com/mlautman,3,https://github.com/ros2/rclpy/pull/254#issuecomment-449130542,"This adds a service to python nodes for changing the logger level.
Depends on: ros2/rcl_interfaces#56","@tfoote I think that is a great Idea but I'm a little lost as to how I should implement that. Parsing through the code, the Python and C++ node classes call a shared method from logging.c in the rclutils package. (https://github.com/ros2/rcutils/blob/a7f880efc5701386ee8be8069a84a7ae7139cd6b/src/logging.c#L280). This method uses a map to store logger levels which would need to be replaced by setters and getters to the parameter server. I was initially thinking that I could put the parameter logic in the rcutils code but I don't see any examples for setting/getting parameters in C.
My second thought is that it may be better to remove the map logic entirely and implement setter and getter methods for the parameters in the Python and C++ code separately. Does this sound like a reasonable plan of attack?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,254,2018-12-18T00:35:09Z,,2019-12-11T14:01:07Z,OPEN,False,54,4,4,https://github.com/mlautman,Adding a service to nodes for adjusting the node's logger level,1,['backlog'],https://github.com/ros2/rclpy/pull/254,https://github.com/tfoote,4,https://github.com/ros2/rclpy/pull/254#issuecomment-449212607,"This adds a service to python nodes for changing the logger level.
Depends on: ros2/rcl_interfaces#56","I think that for the moment we should probably implement it in c++ and python separately.
At a high level the logging level node component will

register a callback for a new requested parameter change (along the lines of 
  
    
      rclpy/rclpy/rclpy/node.py
    
    
         Line 216
      in
      e173ccd
    
  
  
    

        
          
           def set_parameters_callback(self, callback): 
        
    
  

 though this needs to be extended to support multiple callbacks so the user can set one or more as well as other components)
in that callback when the parameter for the logging level is set it will validate the request and if there's a change required call the rcutils set logger level, and then set the parameter and the
The get will just read the parameter. This has the risk that the logging level could be set at the lower level. If that's something we think might be a risk we could setup a callback to be invoked when the rcutils logging level changes and that will update the parameter storage value. (This will also provide a conveniently streamed parameter event for people introspecting the system too)

I'm not as familar with the rclpy code base but for rclcpp I'd suggest creating a node_log_level_interface that can leverage the the parameter interface and the logging interface. It probably makes sense to extend the logging interface to support getting and setting the logging level. Then the log_level_interface can register a param_change_callback  to validate the changes and act on them. This also would want to have the notification callback from the rcutils layer to know if the logging level is changed by some other mechanism. And again this will require extending the registration to support multiple callbacks to support potentially multiple user callback as well as our new internal implementation callbacks.",True,{'THUMBS_UP': ['https://github.com/mlautman']}
ros2/rclpy,https://github.com/ros2/rclpy,254,2018-12-18T00:35:09Z,,2019-12-11T14:01:07Z,OPEN,False,54,4,4,https://github.com/mlautman,Adding a service to nodes for adjusting the node's logger level,1,['backlog'],https://github.com/ros2/rclpy/pull/254,https://github.com/mlautman,5,https://github.com/ros2/rclpy/pull/254#issuecomment-449513824,"This adds a service to python nodes for changing the logger level.
Depends on: ros2/rcl_interfaces#56","On further consideration, I don't know if I agree that this is the best way forward. If all loggers were created by nodes storing logger levels as parameters would make a ton of sense. However, maintaining logger_levels for both node loggers and rclutils loggers would require either duplicate or split storage. This would add quite a bit of complexity and likely break API while offering limited new functionality. Splitting storage between parameters and rclutils would be less complex but it would make it unclear to the user where data is being stored.


register a callback for a new requested parameter change ( ... though this needs to be extended to support multiple callbacks so the user can set one or more as well as other components)


Independent of logger_levels I think this would be a great contribution. ROS2 users very likely would appreciate the ability to register different callbacks for different parameters. If we change API from:
NodeParameters::register_param_change_callback(ParametersCallbackFunction callback)

to something like:
NodeParameters::register_param_change_callback(const std::string& parameter_path, ParametersCallbackFunction callback)

We could store these callbacks in a map std::map<std::string, ParametersCallbackFunction callback>. Then for each incoming parameter change we apply all matching callbacks. (eg: if we had a callback for '/logger/logger_level/', and we set /logger/logger_level/my_node/my_logger to 10, then the callback would be called)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,254,2018-12-18T00:35:09Z,,2019-12-11T14:01:07Z,OPEN,False,54,4,4,https://github.com/mlautman,Adding a service to nodes for adjusting the node's logger level,1,['backlog'],https://github.com/ros2/rclpy/pull/254,https://github.com/mlautman,6,https://github.com/ros2/rclpy/pull/254#issuecomment-450954803,"This adds a service to python nodes for changing the logger level.
Depends on: ros2/rcl_interfaces#56",@tfoote Have you had the chance to look at this again?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,254,2018-12-18T00:35:09Z,,2019-12-11T14:01:07Z,OPEN,False,54,4,4,https://github.com/mlautman,Adding a service to nodes for adjusting the node's logger level,1,['backlog'],https://github.com/ros2/rclpy/pull/254,https://github.com/tfoote,7,https://github.com/ros2/rclpy/pull/254#issuecomment-450962141,"This adds a service to python nodes for changing the logger level.
Depends on: ros2/rcl_interfaces#56","Indeed it's slightly more complex to have the duplicate storage, but if the parameter value is treated as a cached version of the underlying logger the status is relatively clear. And as long as we have a reliable method to make sure that the parameter value is updated any time the rcutils value is updated then we can be confident that any query will be valid. And vice versa setting the parameter doesn't actually change the value of the parameter it calls rcutils to change the value which then sets the parameter. The double bookkeeping is a small overhead compared to implementing all the necessary front ends and adds another whole interface surface for developers and users to learn.
For the callbacks I think that we will want to use a handle based approach not a path/filter string. The path/filter is another feature but it's easy to see that there might be multiple components interested in the same set of parameters so the path/filter would not be unique and then only one would get it's callbacks.
Also unless there's a significant optimization for pre-filtering I suspect that it might be simpler to just filter at the top of each callback instead of trying to externalize that filtering. There's potentially a lot of custom logic for filtering that would be hard to capture in a generic API. However a helper function that callbacks could use might be helpful.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,254,2018-12-18T00:35:09Z,,2019-12-11T14:01:07Z,OPEN,False,54,4,4,https://github.com/mlautman,Adding a service to nodes for adjusting the node's logger level,1,['backlog'],https://github.com/ros2/rclpy/pull/254,https://github.com/mlautman,8,https://github.com/ros2/rclpy/pull/254#issuecomment-456540563,"This adds a service to python nodes for changing the logger level.
Depends on: ros2/rcl_interfaces#56",We have a limited budget for this effort and I don't think we have the resources to implement the preferred solution that you outlined. I'm happy to support anyone else who has an interest in picking up where this left off.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,256,2019-01-07T20:52:35Z,2019-01-08T20:34:23Z,2019-04-04T21:51:19Z,MERGED,True,47,0,1,https://github.com/hidmic,Adds a test for invalid string checks on publishing,2,[],https://github.com/ros2/rclpy/pull/256,https://github.com/hidmic,1,https://github.com/ros2/rclpy/pull/256,"This pull request validates that only ASCII strings are published on string fields.
Connected to ros2/rosidl_python#26.","This pull request validates that only ASCII strings are published on string fields.
Connected to ros2/rosidl_python#26.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,256,2019-01-07T20:52:35Z,2019-01-08T20:34:23Z,2019-04-04T21:51:19Z,MERGED,True,47,0,1,https://github.com/hidmic,Adds a test for invalid string checks on publishing,2,[],https://github.com/ros2/rclpy/pull/256,https://github.com/hidmic,2,https://github.com/ros2/rclpy/pull/256#issuecomment-452291797,"This pull request validates that only ASCII strings are published on string fields.
Connected to ros2/rosidl_python#26.",Looks like Windows didn't like the turtle emoji for a unicode character.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,256,2019-01-07T20:52:35Z,2019-01-08T20:34:23Z,2019-04-04T21:51:19Z,MERGED,True,47,0,1,https://github.com/hidmic,Adds a test for invalid string checks on publishing,2,[],https://github.com/ros2/rclpy/pull/256,https://github.com/hidmic,3,https://github.com/ros2/rclpy/pull/256#issuecomment-452292569,"This pull request validates that only ASCII strings are published on string fields.
Connected to ros2/rosidl_python#26.","Copied from ros2/rosidl_python#26 (comment):

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,256,2019-01-07T20:52:35Z,2019-01-08T20:34:23Z,2019-04-04T21:51:19Z,MERGED,True,47,0,1,https://github.com/hidmic,Adds a test for invalid string checks on publishing,2,[],https://github.com/ros2/rclpy/pull/256,https://github.com/hidmic,4,https://github.com/ros2/rclpy/pull/256#issuecomment-452437855,"This pull request validates that only ASCII strings are published on string fields.
Connected to ros2/rosidl_python#26.",We're good to go!,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,258,2019-01-10T10:04:18Z,2019-01-25T03:44:10Z,2019-01-25T03:44:32Z,MERGED,True,12,4,2,https://github.com/wjwwood,pass context to wait set,1,[],https://github.com/ros2/rclpy/pull/258,https://github.com/wjwwood,1,https://github.com/ros2/rclpy/pull/258,Connects to ros2/rmw#163,Connects to ros2/rmw#163,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,259,2019-01-11T00:23:28Z,2019-01-11T22:23:52Z,2019-01-11T22:23:56Z,MERGED,True,2,0,1,https://github.com/AAlon,Adding HIDDEN_NODE_PREFIX definition to node.py,2,[],https://github.com/ros2/rclpy/pull/259,https://github.com/AAlon,1,https://github.com/ros2/rclpy/pull/259,Related to the ros2cli changes in ros2/ros2cli#158,Related to the ros2cli changes in ros2/ros2cli#158,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,259,2019-01-11T00:23:28Z,2019-01-11T22:23:52Z,2019-01-11T22:23:56Z,MERGED,True,2,0,1,https://github.com/AAlon,Adding HIDDEN_NODE_PREFIX definition to node.py,2,[],https://github.com/ros2/rclpy/pull/259,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/259#issuecomment-453676258,Related to the ros2cli changes in ros2/ros2cli#158,"Thanks for the patch.
The failing CI can be ignored. It is due to an updated dependency not being released yet.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,262,2019-01-24T02:09:49Z,2019-02-05T05:00:28Z,2019-02-05T05:00:32Z,MERGED,True,2036,69,14,https://github.com/jacobperron,Add Action Client,36,[],https://github.com/ros2/rclpy/pull/262,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/262,"Connects to #257

Added _rclpy_action extension module for interfacing rcl_action library and rclpy
Implemented ActionClient and integrated with Node as a Waitable
Added unit tests for ActionClient and ClientGoalHandle

I still need to go through and update the code documentation and perhaps add some more unit tests.","Connects to #257

Added _rclpy_action extension module for interfacing rcl_action library and rclpy
Implemented ActionClient and integrated with Node as a Waitable
Added unit tests for ActionClient and ClientGoalHandle

I still need to go through and update the code documentation and perhaps add some more unit tests.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,262,2019-01-24T02:09:49Z,2019-02-05T05:00:28Z,2019-02-05T05:00:32Z,MERGED,True,2036,69,14,https://github.com/jacobperron,Add Action Client,36,[],https://github.com/ros2/rclpy/pull/262,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/262#issuecomment-457040146,"Connects to #257

Added _rclpy_action extension module for interfacing rcl_action library and rclpy
Implemented ActionClient and integrated with Node as a Waitable
Added unit tests for ActionClient and ClientGoalHandle

I still need to go through and update the code documentation and perhaps add some more unit tests.","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,262,2019-01-24T02:09:49Z,2019-02-05T05:00:28Z,2019-02-05T05:00:32Z,MERGED,True,2036,69,14,https://github.com/jacobperron,Add Action Client,36,[],https://github.com/ros2/rclpy/pull/262,https://github.com/jacobperron,3,https://github.com/ros2/rclpy/pull/262#issuecomment-457341382,"Connects to #257

Added _rclpy_action extension module for interfacing rcl_action library and rclpy
Implemented ActionClient and integrated with Node as a Waitable
Added unit tests for ActionClient and ClientGoalHandle

I still need to go through and update the code documentation and perhaps add some more unit tests.",I still have to implement the synchronous methods (meant to do that prior to this PR).,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,262,2019-01-24T02:09:49Z,2019-02-05T05:00:28Z,2019-02-05T05:00:32Z,MERGED,True,2036,69,14,https://github.com/jacobperron,Add Action Client,36,[],https://github.com/ros2/rclpy/pull/262,https://github.com/jacobperron,4,https://github.com/ros2/rclpy/pull/262#issuecomment-457724216,"Connects to #257

Added _rclpy_action extension module for interfacing rcl_action library and rclpy
Implemented ActionClient and integrated with Node as a Waitable
Added unit tests for ActionClient and ClientGoalHandle

I still need to go through and update the code documentation and perhaps add some more unit tests.","Rebased on master.
@sloretz Thanks for the review so far!
I believe I've address most of your comments in 7ce5e74",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,262,2019-01-24T02:09:49Z,2019-02-05T05:00:28Z,2019-02-05T05:00:32Z,MERGED,True,2036,69,14,https://github.com/jacobperron,Add Action Client,36,[],https://github.com/ros2/rclpy/pull/262,https://github.com/jacobperron,5,https://github.com/ros2/rclpy/pull/262#issuecomment-458352034,"Connects to #257

Added _rclpy_action extension module for interfacing rcl_action library and rclpy
Implemented ActionClient and integrated with Node as a Waitable
Added unit tests for ActionClient and ClientGoalHandle

I still need to go through and update the code documentation and perhaps add some more unit tests.",@sloretz I've extended the Waitable API so executors can call Future callbacks e405bd9,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,262,2019-01-24T02:09:49Z,2019-02-05T05:00:28Z,2019-02-05T05:00:32Z,MERGED,True,2036,69,14,https://github.com/jacobperron,Add Action Client,36,[],https://github.com/ros2/rclpy/pull/262,https://github.com/jacobperron,6,https://github.com/ros2/rclpy/pull/262#issuecomment-459051780,"Connects to #257

Added _rclpy_action extension module for interfacing rcl_action library and rclpy
Implemented ActionClient and integrated with Node as a Waitable
Added unit tests for ActionClient and ClientGoalHandle

I still need to go through and update the code documentation and perhaps add some more unit tests.","This is ready for another round of review.
CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,262,2019-01-24T02:09:49Z,2019-02-05T05:00:28Z,2019-02-05T05:00:32Z,MERGED,True,2036,69,14,https://github.com/jacobperron,Add Action Client,36,[],https://github.com/ros2/rclpy/pull/262,https://github.com/sloretz,7,https://github.com/ros2/rclpy/pull/262#issuecomment-459572703,"Connects to #257

Added _rclpy_action extension module for interfacing rcl_action library and rclpy
Implemented ActionClient and integrated with Node as a Waitable
Added unit tests for ActionClient and ClientGoalHandle

I still need to go through and update the code documentation and perhaps add some more unit tests.","CI

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,262,2019-01-24T02:09:49Z,2019-02-05T05:00:28Z,2019-02-05T05:00:32Z,MERGED,True,2036,69,14,https://github.com/jacobperron,Add Action Client,36,[],https://github.com/ros2/rclpy/pull/262,https://github.com/jacobperron,8,https://github.com/ros2/rclpy/pull/262#issuecomment-459893868,"Connects to #257

Added _rclpy_action extension module for interfacing rcl_action library and rclpy
Implemented ActionClient and integrated with Node as a Waitable
Added unit tests for ActionClient and ClientGoalHandle

I still need to go through and update the code documentation and perhaps add some more unit tests.","@sloretz I've addressed all of your comments.
I've hidden the cancel_goal and get_result calls in ActionClient and added facades to GoalHandle (12907d7). It seemed like the easiest route considering the ActionClient is needed for making the outgoing/incoming requests.
Perhaps if we add the notion of a client goal handle to rcl and give it (and the server goal handle) more responsibility related sending/receiving cancel and result requests it will tie in more naturally at the rclpy and rclcpp layers. This is just a thought and outside the scope of this PR of course.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,262,2019-01-24T02:09:49Z,2019-02-05T05:00:28Z,2019-02-05T05:00:32Z,MERGED,True,2036,69,14,https://github.com/jacobperron,Add Action Client,36,[],https://github.com/ros2/rclpy/pull/262,https://github.com/jacobperron,9,https://github.com/ros2/rclpy/pull/262#issuecomment-459919139,"Connects to #257

Added _rclpy_action extension module for interfacing rcl_action library and rclpy
Implemented ActionClient and integrated with Node as a Waitable
Added unit tests for ActionClient and ClientGoalHandle

I still need to go through and update the code documentation and perhaps add some more unit tests.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,262,2019-01-24T02:09:49Z,2019-02-05T05:00:28Z,2019-02-05T05:00:32Z,MERGED,True,2036,69,14,https://github.com/jacobperron,Add Action Client,36,[],https://github.com/ros2/rclpy/pull/262,https://github.com/jacobperron,10,https://github.com/ros2/rclpy/pull/262#issuecomment-460337588,"Connects to #257

Added _rclpy_action extension module for interfacing rcl_action library and rclpy
Implemented ActionClient and integrated with Node as a Waitable
Added unit tests for ActionClient and ClientGoalHandle

I still need to go through and update the code documentation and perhaps add some more unit tests.","Increased test timeout:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,262,2019-01-24T02:09:49Z,2019-02-05T05:00:28Z,2019-02-05T05:00:32Z,MERGED,True,2036,69,14,https://github.com/jacobperron,Add Action Client,36,[],https://github.com/ros2/rclpy/pull/262,https://github.com/jacobperron,11,https://github.com/ros2/rclpy/pull/262#issuecomment-460502252,"Connects to #257

Added _rclpy_action extension module for interfacing rcl_action library and rclpy
Implemented ActionClient and integrated with Node as a Waitable
Added unit tests for ActionClient and ClientGoalHandle

I still need to go through and update the code documentation and perhaps add some more unit tests.","I'm not sure why, but the multi-threaded test was timing out on CI machines. I've disabled it and opened an issue (#268) to come back to.

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,263,2019-01-24T15:58:04Z,2019-01-24T16:27:53Z,2019-01-24T16:27:57Z,MERGED,True,2,2,1,https://github.com/sloretz,Fix flake8 error,1,[],https://github.com/ros2/rclpy/pull/263,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/263,"https://ci.ros2.org/view/nightly/job/nightly_linux-aarch64_debug/706/testReport/junit/

Linux 
Linux-aarch64 
macOS 
Windows","https://ci.ros2.org/view/nightly/job/nightly_linux-aarch64_debug/706/testReport/junit/

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,265,2019-01-25T00:41:07Z,2019-01-25T01:33:11Z,2019-01-25T01:33:15Z,MERGED,True,30,1,2,https://github.com/jacobperron,Add Waitable to callback group,1,[],https://github.com/ros2/rclpy/pull/265,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/265,"Resolves #264
This fixes an assertion error that occurs if a Waitable is used with a MutuallyExclusiveCallbackGroup.
Added a unit test to cover this case.","Resolves #264
This fixes an assertion error that occurs if a Waitable is used with a MutuallyExclusiveCallbackGroup.
Added a unit test to cover this case.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,265,2019-01-25T00:41:07Z,2019-01-25T01:33:11Z,2019-01-25T01:33:15Z,MERGED,True,30,1,2,https://github.com/jacobperron,Add Waitable to callback group,1,[],https://github.com/ros2/rclpy/pull/265,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/265#issuecomment-457413170,"Resolves #264
This fixes an assertion error that occurs if a Waitable is used with a MutuallyExclusiveCallbackGroup.
Added a unit test to cover this case.","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,269,2019-02-05T23:19:47Z,2019-02-15T19:14:54Z,2019-02-15T19:14:58Z,MERGED,True,247,175,6,https://github.com/jacobperron,Abstract type conversions into functions,5,[],https://github.com/ros2/rclpy/pull/269,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/269,"This helps with readability and maintainability.
Also eliminated use of assertions during conversions, defering to exceptions.
I plan to make use of these functions for the Action extension module (#257) in a follow-up PR.","This helps with readability and maintainability.
Also eliminated use of assertions during conversions, defering to exceptions.
I plan to make use of these functions for the Action extension module (#257) in a follow-up PR.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,269,2019-02-05T23:19:47Z,2019-02-15T19:14:54Z,2019-02-15T19:14:58Z,MERGED,True,247,175,6,https://github.com/jacobperron,Abstract type conversions into functions,5,[],https://github.com/ros2/rclpy/pull/269,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/269#issuecomment-460843879,"This helps with readability and maintainability.
Also eliminated use of assertions during conversions, defering to exceptions.
I plan to make use of these functions for the Action extension module (#257) in a follow-up PR.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,269,2019-02-05T23:19:47Z,2019-02-15T19:14:54Z,2019-02-15T19:14:58Z,MERGED,True,247,175,6,https://github.com/jacobperron,Abstract type conversions into functions,5,[],https://github.com/ros2/rclpy/pull/269,https://github.com/jacobperron,3,https://github.com/ros2/rclpy/pull/269#issuecomment-461129368,"This helps with readability and maintainability.
Also eliminated use of assertions during conversions, defering to exceptions.
I plan to make use of these functions for the Action extension module (#257) in a follow-up PR.",The warnings are due to the new functions not being used in _rclpy_action.c. This is addressed in #270.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,269,2019-02-05T23:19:47Z,2019-02-15T19:14:54Z,2019-02-15T19:14:58Z,MERGED,True,247,175,6,https://github.com/jacobperron,Abstract type conversions into functions,5,[],https://github.com/ros2/rclpy/pull/269,https://github.com/wjwwood,4,https://github.com/ros2/rclpy/pull/269#issuecomment-461137692,"This helps with readability and maintainability.
Also eliminated use of assertions during conversions, defering to exceptions.
I plan to make use of these functions for the Action extension module (#257) in a follow-up PR.","Though if it requires #270 to avoid warnings, then maybe we should merge them into one pr.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,269,2019-02-05T23:19:47Z,2019-02-15T19:14:54Z,2019-02-15T19:14:58Z,MERGED,True,247,175,6,https://github.com/jacobperron,Abstract type conversions into functions,5,[],https://github.com/ros2/rclpy/pull/269,https://github.com/jacobperron,5,https://github.com/ros2/rclpy/pull/269#issuecomment-461143605,"This helps with readability and maintainability.
Also eliminated use of assertions during conversions, defering to exceptions.
I plan to make use of these functions for the Action extension module (#257) in a follow-up PR.","Though if it requires #270 to avoid warnings, then maybe we should merge them into one pr.

That works for me. #270 already has this commit. Before I was aware of the warnings, I thought it was nice to make this separate. I'll leave this hear for visibility, until #270 is merged.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,269,2019-02-05T23:19:47Z,2019-02-15T19:14:54Z,2019-02-15T19:14:58Z,MERGED,True,247,175,6,https://github.com/jacobperron,Abstract type conversions into functions,5,[],https://github.com/ros2/rclpy/pull/269,https://github.com/jacobperron,6,https://github.com/ros2/rclpy/pull/269#issuecomment-462590175,"This helps with readability and maintainability.
Also eliminated use of assertions during conversions, defering to exceptions.
I plan to make use of these functions for the Action extension module (#257) in a follow-up PR.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,269,2019-02-05T23:19:47Z,2019-02-15T19:14:54Z,2019-02-15T19:14:58Z,MERGED,True,247,175,6,https://github.com/jacobperron,Abstract type conversions into functions,5,[],https://github.com/ros2/rclpy/pull/269,https://github.com/jacobperron,7,https://github.com/ros2/rclpy/pull/269#issuecomment-463345876,"This helps with readability and maintainability.
Also eliminated use of assertions during conversions, defering to exceptions.
I plan to make use of these functions for the Action extension module (#257) in a follow-up PR.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,269,2019-02-05T23:19:47Z,2019-02-15T19:14:54Z,2019-02-15T19:14:58Z,MERGED,True,247,175,6,https://github.com/jacobperron,Abstract type conversions into functions,5,[],https://github.com/ros2/rclpy/pull/269,https://github.com/jacobperron,8,https://github.com/ros2/rclpy/pull/269#issuecomment-463379359,"This helps with readability and maintainability.
Also eliminated use of assertions during conversions, defering to exceptions.
I plan to make use of these functions for the Action extension module (#257) in a follow-up PR.","Rebuilding for Windows after adding visibility control: 
Edit: Re-triggered build after 0eded64",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,270,2019-02-06T07:17:24Z,2019-02-25T17:42:41Z,2019-02-25T17:42:46Z,MERGED,True,2222,94,7,https://github.com/jacobperron,Add ActionServer,18,[],https://github.com/ros2/rclpy/pull/270,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/270,"Resolves #257
Similar to ActionClient, ActionServer is implemented as a Waitable and the user interacts with goals via ServerGoalHandle objects.
This is a work in progress. Still need to implement the ""get result"" logic, add documentation, and some more tests. I separated some changes to _rclpy.c into #269 to avoid adding more to this large change. Since this PR is based on that branch, #269 should be resolved first.","Resolves #257
Similar to ActionClient, ActionServer is implemented as a Waitable and the user interacts with goals via ServerGoalHandle objects.
This is a work in progress. Still need to implement the ""get result"" logic, add documentation, and some more tests. I separated some changes to _rclpy.c into #269 to avoid adding more to this large change. Since this PR is based on that branch, #269 should be resolved first.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,270,2019-02-06T07:17:24Z,2019-02-25T17:42:41Z,2019-02-25T17:42:46Z,MERGED,True,2222,94,7,https://github.com/jacobperron,Add ActionServer,18,[],https://github.com/ros2/rclpy/pull/270,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/270#issuecomment-461250585,"Resolves #257
Similar to ActionClient, ActionServer is implemented as a Waitable and the user interacts with goals via ServerGoalHandle objects.
This is a work in progress. Still need to implement the ""get result"" logic, add documentation, and some more tests. I separated some changes to _rclpy.c into #269 to avoid adding more to this large change. Since this PR is based on that branch, #269 should be resolved first.","Rooting out any cross-platform issues:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,270,2019-02-06T07:17:24Z,2019-02-25T17:42:41Z,2019-02-25T17:42:46Z,MERGED,True,2222,94,7,https://github.com/jacobperron,Add ActionServer,18,[],https://github.com/ros2/rclpy/pull/270,https://github.com/jacobperron,3,https://github.com/ros2/rclpy/pull/270#issuecomment-461579337,"Resolves #257
Similar to ActionClient, ActionServer is implemented as a Waitable and the user interacts with goals via ServerGoalHandle objects.
This is a work in progress. Still need to implement the ""get result"" logic, add documentation, and some more tests. I separated some changes to _rclpy.c into #269 to avoid adding more to this large change. Since this PR is based on that branch, #269 should be resolved first.","Since this is a large PR, I think it can start being reviewed while I try to resolve two outstanding issues:

Feedback messages aren't making it to action clients (but the mock action client used in the tests appears to work).
Tests involving a MultiThreadedExecutor timeout (#268)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,270,2019-02-06T07:17:24Z,2019-02-25T17:42:41Z,2019-02-25T17:42:46Z,MERGED,True,2222,94,7,https://github.com/jacobperron,Add ActionServer,18,[],https://github.com/ros2/rclpy/pull/270,https://github.com/jacobperron,4,https://github.com/ros2/rclpy/pull/270#issuecomment-461886411,"Resolves #257
Similar to ActionClient, ActionServer is implemented as a Waitable and the user interacts with goals via ServerGoalHandle objects.
This is a work in progress. Still need to implement the ""get result"" logic, add documentation, and some more tests. I separated some changes to _rclpy.c into #269 to avoid adding more to this large change. Since this PR is based on that branch, #269 should be resolved first.","Feedback messages aren't making it to action clients (but the mock action client used in the tests appears to work).


This is because I forgot to set the goal ID when publishing feedback messages.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,270,2019-02-06T07:17:24Z,2019-02-25T17:42:41Z,2019-02-25T17:42:46Z,MERGED,True,2222,94,7,https://github.com/jacobperron,Add ActionServer,18,[],https://github.com/ros2/rclpy/pull/270,https://github.com/jacobperron,5,https://github.com/ros2/rclpy/pull/270#issuecomment-462443585,"Resolves #257
Similar to ActionClient, ActionServer is implemented as a Waitable and the user interacts with goals via ServerGoalHandle objects.
This is a work in progress. Still need to implement the ""get result"" logic, add documentation, and some more tests. I separated some changes to _rclpy.c into #269 to avoid adding more to this large change. Since this PR is based on that branch, #269 should be resolved first.","@sloretz Please take a look at c2026b5. It is an attempt to fix a scenario where 'done callbacks' for futures were not being called, specifically when result responses are ready for Action Servers. I'm not sure if this is the right thing to do.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,270,2019-02-06T07:17:24Z,2019-02-25T17:42:41Z,2019-02-25T17:42:46Z,MERGED,True,2222,94,7,https://github.com/jacobperron,Add ActionServer,18,[],https://github.com/ros2/rclpy/pull/270,https://github.com/sloretz,6,https://github.com/ros2/rclpy/pull/270#issuecomment-462444635,"Resolves #257
Similar to ActionClient, ActionServer is implemented as a Waitable and the user interacts with goals via ServerGoalHandle objects.
This is a work in progress. Still need to implement the ""get result"" logic, add documentation, and some more tests. I separated some changes to _rclpy.c into #269 to avoid adding more to this large change. Since this PR is based on that branch, #269 should be resolved first.","@sloretz Please take a look at c2026b5. It is an attempt to fix a scenario where 'done callbacks' for futures were not being called,

@jacobperron Looking at it now. Mind moving it to a separate PR with a test? (Edit: oops, it already has a test)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,270,2019-02-06T07:17:24Z,2019-02-25T17:42:41Z,2019-02-25T17:42:46Z,MERGED,True,2222,94,7,https://github.com/jacobperron,Add ActionServer,18,[],https://github.com/ros2/rclpy/pull/270,https://github.com/jacobperron,7,https://github.com/ros2/rclpy/pull/270#issuecomment-462446191,"Resolves #257
Similar to ActionClient, ActionServer is implemented as a Waitable and the user interacts with goals via ServerGoalHandle objects.
This is a work in progress. Still need to implement the ""get result"" logic, add documentation, and some more tests. I separated some changes to _rclpy.c into #269 to avoid adding more to this large change. Since this PR is based on that branch, #269 should be resolved first.","Looking at it now. Mind moving it to a separate PR with a test?

Done #272",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,270,2019-02-06T07:17:24Z,2019-02-25T17:42:41Z,2019-02-25T17:42:46Z,MERGED,True,2222,94,7,https://github.com/jacobperron,Add ActionServer,18,[],https://github.com/ros2/rclpy/pull/270,https://github.com/jacobperron,8,https://github.com/ros2/rclpy/pull/270#issuecomment-463036166,"Resolves #257
Similar to ActionClient, ActionServer is implemented as a Waitable and the user interacts with goals via ServerGoalHandle objects.
This is a work in progress. Still need to implement the ""get result"" logic, add documentation, and some more tests. I separated some changes to _rclpy.c into #269 to avoid adding more to this large change. Since this PR is based on that branch, #269 should be resolved first.","Rebased on #275, which is required for creating tasks associated with user callbacks with the executor.
The Waitable.add_future mechanism is not as reliable since it needs something in the wait set to be ready for rcl_wait to wake up.
I'm considering replacing the add_future API introduced in #262 with direct calls to Executor.create_task().",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,270,2019-02-06T07:17:24Z,2019-02-25T17:42:41Z,2019-02-25T17:42:46Z,MERGED,True,2222,94,7,https://github.com/jacobperron,Add ActionServer,18,[],https://github.com/ros2/rclpy/pull/270,https://github.com/jacobperron,9,https://github.com/ros2/rclpy/pull/270#issuecomment-463443935,"Resolves #257
Similar to ActionClient, ActionServer is implemented as a Waitable and the user interacts with goals via ServerGoalHandle objects.
This is a work in progress. Still need to implement the ""get result"" logic, add documentation, and some more tests. I separated some changes to _rclpy.c into #269 to avoid adding more to this large change. Since this PR is based on that branch, #269 should be resolved first.","@sloretz Thank you for the reviews 🙇‍♂️
In addition to addressing your latest comments, I've resolved an issue for the scenario where a goal is deferred, canceled, and then executed in 093d52d.
I've also pushed an example of a goal being deferred in ros2/examples#222.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,270,2019-02-06T07:17:24Z,2019-02-25T17:42:41Z,2019-02-25T17:42:46Z,MERGED,True,2222,94,7,https://github.com/jacobperron,Add ActionServer,18,[],https://github.com/ros2/rclpy/pull/270,https://github.com/jacobperron,10,https://github.com/ros2/rclpy/pull/270#issuecomment-463868769,"Resolves #257
Similar to ActionClient, ActionServer is implemented as a Waitable and the user interacts with goals via ServerGoalHandle objects.
This is a work in progress. Still need to implement the ""get result"" logic, add documentation, and some more tests. I separated some changes to _rclpy.c into #269 to avoid adding more to this large change. Since this PR is based on that branch, #269 should be resolved first.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,270,2019-02-06T07:17:24Z,2019-02-25T17:42:41Z,2019-02-25T17:42:46Z,MERGED,True,2222,94,7,https://github.com/jacobperron,Add ActionServer,18,[],https://github.com/ros2/rclpy/pull/270,https://github.com/jacobperron,11,https://github.com/ros2/rclpy/pull/270#issuecomment-464171167,"Resolves #257
Similar to ActionClient, ActionServer is implemented as a Waitable and the user interacts with goals via ServerGoalHandle objects.
This is a work in progress. Still need to implement the ""get result"" logic, add documentation, and some more tests. I separated some changes to _rclpy.c into #269 to avoid adding more to this large change. Since this PR is based on that branch, #269 should be resolved first.",Rebased on master.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,270,2019-02-06T07:17:24Z,2019-02-25T17:42:41Z,2019-02-25T17:42:46Z,MERGED,True,2222,94,7,https://github.com/jacobperron,Add ActionServer,18,[],https://github.com/ros2/rclpy/pull/270,https://github.com/jacobperron,12,https://github.com/ros2/rclpy/pull/270#issuecomment-465284333,"Resolves #257
Similar to ActionClient, ActionServer is implemented as a Waitable and the user interacts with goals via ServerGoalHandle objects.
This is a work in progress. Still need to implement the ""get result"" logic, add documentation, and some more tests. I separated some changes to _rclpy.c into #269 to avoid adding more to this large change. Since this PR is based on that branch, #269 should be resolved first.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,270,2019-02-06T07:17:24Z,2019-02-25T17:42:41Z,2019-02-25T17:42:46Z,MERGED,True,2222,94,7,https://github.com/jacobperron,Add ActionServer,18,[],https://github.com/ros2/rclpy/pull/270,https://github.com/jacobperron,13,https://github.com/ros2/rclpy/pull/270#issuecomment-465820625,"Resolves #257
Similar to ActionClient, ActionServer is implemented as a Waitable and the user interacts with goals via ServerGoalHandle objects.
This is a work in progress. Still need to implement the ""get result"" logic, add documentation, and some more tests. I separated some changes to _rclpy.c into #269 to avoid adding more to this large change. Since this PR is based on that branch, #269 should be resolved first.","Hopefully, fixed the Windows build 🤞

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,270,2019-02-06T07:17:24Z,2019-02-25T17:42:41Z,2019-02-25T17:42:46Z,MERGED,True,2222,94,7,https://github.com/jacobperron,Add ActionServer,18,[],https://github.com/ros2/rclpy/pull/270,https://github.com/jacobperron,14,https://github.com/ros2/rclpy/pull/270#issuecomment-466116902,"Resolves #257
Similar to ActionClient, ActionServer is implemented as a Waitable and the user interacts with goals via ServerGoalHandle objects.
This is a work in progress. Still need to implement the ""get result"" logic, add documentation, and some more tests. I separated some changes to _rclpy.c into #269 to avoid adding more to this large change. Since this PR is based on that branch, #269 should be resolved first.","@sloretz Test failures are unrelated.
This is ready for another round of review :)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,271,2019-02-09T02:04:59Z,2019-02-11T17:20:19Z,2019-02-11T17:20:24Z,MERGED,True,35,50,2,https://github.com/jacobperron,Replace PyUnicode_1BYTE_DATA() with PyUnicode_AsUTF8(),2,[],https://github.com/ros2/rclpy/pull/271,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/271,"Resolves #266
Ensure return value is const char * for compatibility with Python v3.7+.
Also, renamed PyObject variables for consistency with the rest of the file.
Update expected error message in unit test.","Resolves #266
Ensure return value is const char * for compatibility with Python v3.7+.
Also, renamed PyObject variables for consistency with the rest of the file.
Update expected error message in unit test.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,271,2019-02-09T02:04:59Z,2019-02-11T17:20:19Z,2019-02-11T17:20:24Z,MERGED,True,35,50,2,https://github.com/jacobperron,Replace PyUnicode_1BYTE_DATA() with PyUnicode_AsUTF8(),2,[],https://github.com/ros2/rclpy/pull/271,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/271#issuecomment-462003626,"Resolves #266
Ensure return value is const char * for compatibility with Python v3.7+.
Also, renamed PyObject variables for consistency with the rest of the file.
Update expected error message in unit test.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,272,2019-02-11T18:46:38Z,2019-02-11T22:44:58Z,2019-02-11T22:45:07Z,MERGED,True,54,12,2,https://github.com/jacobperron,Fix Executor not executing tasks if there are no ready entities in the wait set,2,[],https://github.com/ros2/rclpy/pull/272,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/272,"If a task is created, then trigger the Executors guard condition. This will wake any blocking call to rcl_wait().
In this scenario, no work is yielded, so we also have to move the check for 'in-progress' tasks into the wait loop.
Added a unit test to reproduce the issue.
This resolves an issue in some cases where the result response from the action server is never processed, therefore never reaching the action client.","If a task is created, then trigger the Executors guard condition. This will wake any blocking call to rcl_wait().
In this scenario, no work is yielded, so we also have to move the check for 'in-progress' tasks into the wait loop.
Added a unit test to reproduce the issue.
This resolves an issue in some cases where the result response from the action server is never processed, therefore never reaching the action client.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,272,2019-02-11T18:46:38Z,2019-02-11T22:44:58Z,2019-02-11T22:45:07Z,MERGED,True,54,12,2,https://github.com/jacobperron,Fix Executor not executing tasks if there are no ready entities in the wait set,2,[],https://github.com/ros2/rclpy/pull/272,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/272#issuecomment-462506866,"If a task is created, then trigger the Executors guard condition. This will wake any blocking call to rcl_wait().
In this scenario, no work is yielded, so we also have to move the check for 'in-progress' tasks into the wait loop.
Added a unit test to reproduce the issue.
This resolves an issue in some cases where the result response from the action server is never processed, therefore never reaching the action client.","CI

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,273,2019-02-11T20:50:00Z,2019-02-12T18:07:54Z,2019-02-12T18:08:00Z,MERGED,True,23,1,2,https://github.com/hidmic,Enforce UTF8 argv on rclpy.init(),2,[],https://github.com/ros2/rclpy/pull/273,https://github.com/hidmic,1,https://github.com/ros2/rclpy/pull/273,Connected to ros2/rcl#374. An additional check to provide better exception messages.,Connected to ros2/rcl#374. An additional check to provide better exception messages.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,273,2019-02-11T20:50:00Z,2019-02-12T18:07:54Z,2019-02-12T18:08:00Z,MERGED,True,23,1,2,https://github.com/hidmic,Enforce UTF8 argv on rclpy.init(),2,[],https://github.com/ros2/rclpy/pull/273,https://github.com/hidmic,2,https://github.com/ros2/rclpy/pull/273#issuecomment-462869745,Connected to ros2/rcl#374. An additional check to provide better exception messages.,"@jacobperron copied from ros2/rcl#388 (comment):

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,274,2019-02-12T19:52:51Z,2019-03-12T04:12:58Z,2019-03-12T04:13:03Z,MERGED,True,113,100,4,https://github.com/dirk-thomas,update to use separated action types,5,['enhancement'],https://github.com/ros2/rclpy/pull/274,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/274,Connected to ros2/rosidl#334.,Connected to ros2/rosidl#334.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,275,2019-02-13T01:27:40Z,2019-02-13T18:03:41Z,2019-02-13T18:03:46Z,MERGED,True,6,1,2,https://github.com/jacobperron,Fix Node's reference to executor,1,[],https://github.com/ros2/rclpy/pull/275,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/275,"Previously, if a Node was added to an Executor using the executors add_node method, then the nodes executor property would return None.","Previously, if a Node was added to an Executor using the executors add_node method, then the nodes executor property would return None.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,275,2019-02-13T01:27:40Z,2019-02-13T18:03:41Z,2019-02-13T18:03:46Z,MERGED,True,6,1,2,https://github.com/jacobperron,Fix Node's reference to executor,1,[],https://github.com/ros2/rclpy/pull/275,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/275#issuecomment-463030050,"Previously, if a Node was added to an Executor using the executors add_node method, then the nodes executor property would return None.","Looks reasonable and changes look good, but don't have a whole lot of context for the change.

As part of the ActionServer, I want to schedule tasks for user callbacks using the executor. Something like:
class ActionServer:
    ...
    self.node.executor.create_task(user_execute_callback)
But, without this change self.node.executor is None (which I presume is a bug).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,275,2019-02-13T01:27:40Z,2019-02-13T18:03:41Z,2019-02-13T18:03:46Z,MERGED,True,6,1,2,https://github.com/jacobperron,Fix Node's reference to executor,1,[],https://github.com/ros2/rclpy/pull/275,https://github.com/jacobperron,3,https://github.com/ros2/rclpy/pull/275#issuecomment-463036717,"Previously, if a Node was added to an Executor using the executors add_node method, then the nodes executor property would return None.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,276,2019-02-19T21:30:48Z,2019-02-19T23:03:31Z,2019-02-19T23:03:35Z,MERGED,True,1,1,1,https://github.com/sloretz,Dictionaries raise KeyError,1,[],https://github.com/ros2/rclpy/pull/276,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/276,"Dictionaries raise KeyError instead of IndexError. I'm not sure how to write a test for this, so I didn't.
See #170 (comment)","Dictionaries raise KeyError instead of IndexError. I'm not sure how to write a test for this, so I didn't.
See #170 (comment)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,276,2019-02-19T21:30:48Z,2019-02-19T23:03:31Z,2019-02-19T23:03:35Z,MERGED,True,1,1,1,https://github.com/sloretz,Dictionaries raise KeyError,1,[],https://github.com/ros2/rclpy/pull/276,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/276#issuecomment-465337345,"Dictionaries raise KeyError instead of IndexError. I'm not sure how to write a test for this, so I didn't.
See #170 (comment)","CI

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,277,2019-02-26T23:49:53Z,2019-03-12T18:12:39Z,2019-03-12T18:12:51Z,MERGED,True,1211,229,30,https://github.com/jacobperron,Improve documentation,17,[],https://github.com/ros2/rclpy/pull/277,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/277,Adding Sphinx documentation that makes use of the autodoc and sphinx-autodoc-typehints extensions for auto-generating documentation from docstrings and annotations.,Adding Sphinx documentation that makes use of the autodoc and sphinx-autodoc-typehints extensions for auto-generating documentation from docstrings and annotations.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,277,2019-02-26T23:49:53Z,2019-03-12T18:12:39Z,2019-03-12T18:12:51Z,MERGED,True,1211,229,30,https://github.com/jacobperron,Improve documentation,17,[],https://github.com/ros2/rclpy/pull/277,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/277#issuecomment-467663783,Adding Sphinx documentation that makes use of the autodoc and sphinx-autodoc-typehints extensions for auto-generating documentation from docstrings and annotations.,So far I've only documented the Node module. I'm looking for early feedback on the proposed method for documentation before I continue documenting more rclpy modules.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,277,2019-02-26T23:49:53Z,2019-03-12T18:12:39Z,2019-03-12T18:12:51Z,MERGED,True,1211,229,30,https://github.com/jacobperron,Improve documentation,17,[],https://github.com/ros2/rclpy/pull/277,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/277#issuecomment-467677318,Adding Sphinx documentation that makes use of the autodoc and sphinx-autodoc-typehints extensions for auto-generating documentation from docstrings and annotations.,Does documentation generated this way show up at https://index.ros.org/p/rclpy/ ?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,277,2019-02-26T23:49:53Z,2019-03-12T18:12:39Z,2019-03-12T18:12:51Z,MERGED,True,1211,229,30,https://github.com/jacobperron,Improve documentation,17,[],https://github.com/ros2/rclpy/pull/277,https://github.com/jacobperron,4,https://github.com/ros2/rclpy/pull/277#issuecomment-467680557,Adding Sphinx documentation that makes use of the autodoc and sphinx-autodoc-typehints extensions for auto-generating documentation from docstrings and annotations.,"Does documentation generated this way show up at https://index.ros.org/p/rclpy/ ?

I would like it to be, but I'm not sure what is required to make that happen. I didn't find any examples of ROS 2 Python packages that had their documentation available on ROS Index, but I can look into it.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,277,2019-02-26T23:49:53Z,2019-03-12T18:12:39Z,2019-03-12T18:12:51Z,MERGED,True,1211,229,30,https://github.com/jacobperron,Improve documentation,17,[],https://github.com/ros2/rclpy/pull/277,https://github.com/Karsten1987,5,https://github.com/ros2/rclpy/pull/277#issuecomment-467683062,Adding Sphinx documentation that makes use of the autodoc and sphinx-autodoc-typehints extensions for auto-generating documentation from docstrings and annotations.,"I might be wrong here, but I believe this has to be backported to the crystal branch and re-released.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,277,2019-02-26T23:49:53Z,2019-03-12T18:12:39Z,2019-03-12T18:12:51Z,MERGED,True,1211,229,30,https://github.com/jacobperron,Improve documentation,17,[],https://github.com/ros2/rclpy/pull/277,https://github.com/jacobperron,6,https://github.com/ros2/rclpy/pull/277#issuecomment-468006381,Adding Sphinx documentation that makes use of the autodoc and sphinx-autodoc-typehints extensions for auto-generating documentation from docstrings and annotations.,"After some investigation, I don't think code API documentation generated this way will show up on ROS index. It doesn't appear that we have the infrastructure up and running to facilitate this. I found a Makefile with some instructions, indicating the current process for generating API docs is done manually and only for a small set of packages (excluding rclpy).
@nuclearsandwich Does this sound right?
I'll proceed with adding more Sphinx documentation under the assumption that we'll eventually integrate a documentation tool like rosdoc_lite (from ROS 1).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,277,2019-02-26T23:49:53Z,2019-03-12T18:12:39Z,2019-03-12T18:12:51Z,MERGED,True,1211,229,30,https://github.com/jacobperron,Improve documentation,17,[],https://github.com/ros2/rclpy/pull/277,https://github.com/nuclearsandwich,7,https://github.com/ros2/rclpy/pull/277#issuecomment-468034827,Adding Sphinx documentation that makes use of the autodoc and sphinx-autodoc-typehints extensions for auto-generating documentation from docstrings and annotations.,"@nuclearsandwich Does this sound right?

Yeah. It doesn't take much but a ROS 2 workspace and push access to update the documentation and it's probably do for a refresh from Crystal patch releases (Off-topic, I also recall you mentioning the desire to add rcl{,cpp}_action docs). If you've got a way to build documentation locally, there's no reason we can't expand the makefile to include rclpy documentation.",True,{'THUMBS_UP': ['https://github.com/jacobperron']}
ros2/rclpy,https://github.com/ros2/rclpy,277,2019-02-26T23:49:53Z,2019-03-12T18:12:39Z,2019-03-12T18:12:51Z,MERGED,True,1211,229,30,https://github.com/jacobperron,Improve documentation,17,[],https://github.com/ros2/rclpy/pull/277,https://github.com/jacobperron,8,https://github.com/ros2/rclpy/pull/277#issuecomment-468818905,Adding Sphinx documentation that makes use of the autodoc and sphinx-autodoc-typehints extensions for auto-generating documentation from docstrings and annotations.,"This is ready for review.
I've only documented what I considered the major components of rclpy, and plan to open a follow-up PR adding more docstrings and annotations. I figured there's enough here to review for now.
In particular, I've held off on updating the docs for Actions until after the IDL work has landed #274.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,277,2019-02-26T23:49:53Z,2019-03-12T18:12:39Z,2019-03-12T18:12:51Z,MERGED,True,1211,229,30,https://github.com/jacobperron,Improve documentation,17,[],https://github.com/ros2/rclpy/pull/277,https://github.com/jacobperron,9,https://github.com/ros2/rclpy/pull/277#issuecomment-472104214,Adding Sphinx documentation that makes use of the autodoc and sphinx-autodoc-typehints extensions for auto-generating documentation from docstrings and annotations.,"Confirming I didn't break any linters:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,278,2019-03-02T02:50:49Z,2019-03-25T16:06:34Z,2019-03-25T16:06:38Z,MERGED,True,528,126,1,https://github.com/jacobperron,Improve error handling to avoid memory leaks in C extension,4,[],https://github.com/ros2/rclpy/pull/278,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/278,"Linux 
Linux-aarch64 
macOS 
Windows 

Edit: test failures are unrelated.","Linux 
Linux-aarch64 
macOS 
Windows 

Edit: test failures are unrelated.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,278,2019-03-02T02:50:49Z,2019-03-25T16:06:34Z,2019-03-25T16:06:38Z,MERGED,True,528,126,1,https://github.com/jacobperron,Improve error handling to avoid memory leaks in C extension,4,[],https://github.com/ros2/rclpy/pull/278,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/278#issuecomment-475788806,"Linux 
Linux-aarch64 
macOS 
Windows 

Edit: test failures are unrelated.","Thanks for the reviews!

Linux 
Linux-aarch64 
macOS 
Windows 

(I expect test_params_yaml to fail ros2/build_farmer#166)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,280,2019-03-05T02:08:00Z,2019-03-05T02:14:18Z,2019-03-05T02:14:22Z,MERGED,True,25,26,1,https://github.com/jacobperron,Enable test using MultiThreadedExecutor,1,[],https://github.com/ros2/rclpy/pull/280,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/280,"Closes #268.
I believe the issue was resolved by #272. This PR enables the previously failing test.
CI:

Linux 
Linux-aarch64 
macOS 
Windows 

Errors are unrelated to this change (ros2/build_farmer#166).","Closes #268.
I believe the issue was resolved by #272. This PR enables the previously failing test.
CI:

Linux 
Linux-aarch64 
macOS 
Windows 

Errors are unrelated to this change (ros2/build_farmer#166).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,281,2019-03-07T00:18:33Z,2019-03-07T19:10:19Z,2019-03-07T19:10:24Z,MERGED,True,32,12,2,https://github.com/jacobperron,Guard against failed take when taking action messages,1,[],https://github.com/ros2/rclpy/pull/281,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/281,"Some middlewares (e.g. Connext and OpenSplice) appear to send empty messages after a successful service call which results in a 'failed take'.
It is unclear if this is correct behavior from the rmw/rcl layers, but it doesn't hurt to guard against this scenario.
Connects to ros2/system_tests#332.","Some middlewares (e.g. Connext and OpenSplice) appear to send empty messages after a successful service call which results in a 'failed take'.
It is unclear if this is correct behavior from the rmw/rcl layers, but it doesn't hurt to guard against this scenario.
Connects to ros2/system_tests#332.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,281,2019-03-07T00:18:33Z,2019-03-07T19:10:19Z,2019-03-07T19:10:24Z,MERGED,True,32,12,2,https://github.com/jacobperron,Guard against failed take when taking action messages,1,[],https://github.com/ros2/rclpy/pull/281,https://github.com/wjwwood,2,https://github.com/ros2/rclpy/pull/281#issuecomment-470334185,"Some middlewares (e.g. Connext and OpenSplice) appear to send empty messages after a successful service call which results in a 'failed take'.
It is unclear if this is correct behavior from the rmw/rcl layers, but it doesn't hurt to guard against this scenario.
Connects to ros2/system_tests#332.","For reference, rclcpp also allows take to fail, but only if the reason is ""RET_TAKE_FAILED"" (or similar):
https://github.com/ros2/rclcpp/blob/d2d9ad8796cb0528351482b1f55ba36fffaa9728/rclcpp/src/rclcpp/executor.cpp#L324-L332
This can happen if the sample is invalid (DDS's way of indicating the instance has been disposed), but we don't know that until we try to take (i.e. we don't know that is the reason rather than data being available after being woken up from the waitset).",True,{'THUMBS_UP': ['https://github.com/jacobperron']}
ros2/rclpy,https://github.com/ros2/rclpy,282,2019-03-07T23:55:37Z,2019-03-10T02:53:34Z,2019-03-10T02:53:39Z,MERGED,True,4470,237,20,https://github.com/jacobperron,Backport Python Actions,7,[],https://github.com/ros2/rclpy/pull/282,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/282,"Cherry-picking the following commits related to Python Actions (#257):

6e086af #262
0bfd0b7 #272
4028bc6 #275
174e337 #269
be4bc88 #270
3b57762 #280
ba90da4 #281","Cherry-picking the following commits related to Python Actions (#257):

6e086af #262
0bfd0b7 #272
4028bc6 #275
174e337 #269
be4bc88 #270
3b57762 #280
ba90da4 #281",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,283,2019-03-11T21:07:12Z,2019-03-12T04:48:13Z,2019-03-12T04:48:18Z,MERGED,True,4,4,2,https://github.com/dirk-thomas,update logger.warn (deprecated) to logger.warning,1,[],https://github.com/ros2/rclpy/pull/283,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/283,Use non-deprecated method.,Use non-deprecated method.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,284,2019-03-12T07:22:13Z,2019-03-12T07:23:20Z,2019-03-12T07:23:25Z,MERGED,True,9,1,1,https://github.com/dirk-thomas,add RcutilsLogger.warning,1,['bug'],https://github.com/ros2/rclpy/pull/284,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/284,Follow up of #283.,Follow up of #283.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,284,2019-03-12T07:22:13Z,2019-03-12T07:23:20Z,2019-03-12T07:23:25Z,MERGED,True,9,1,1,https://github.com/dirk-thomas,add RcutilsLogger.warning,1,['bug'],https://github.com/ros2/rclpy/pull/284,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/284#issuecomment-471885793,Follow up of #283.,In order to avoid new test failures introduced by #283 to appear in all nightlies I will go ahead and merge this without review. Please feel free to comment after the fact and I am happy to address the feedback.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,285,2019-03-14T23:43:08Z,2019-03-28T21:37:46Z,2019-03-28T21:37:51Z,CLOSED,False,186,0,1,https://github.com/jacobperron,Add message utilities module,1,[],https://github.com/ros2/rclpy/pull/285,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/285,"Contains functions for setting the values of a ROS message and converting ROS messages to other formats (e.g. YAML or CSV).
These functions have been copied from the package ros2topic so they can be used by other packages.
Specifically, these functions can be reused by ros2service and ros2action CLI tools. I'm proposing moving them to rclpy since they might be used in other tools (e.g. rosbag).

Here's the diff of the changes I made to the functions while moving them (excluding the docstrings):
diff --git a/ros2topic/ros2topic/api/__init__.py b/ros2topic/ros2topic/api/__init__.py
index 0156c43..548c62e 100644
--- a/ros2topic/ros2topic/api/__init__.py
+++ b/ros2topic/ros2topic/api/__init__.py
@@ -98,7 +98,7 @@ class SetFieldError(Exception):
         self.exception = exception
 
 
-def set_msg_fields(msg, values):
+def set_msg_fields(msg: Any, values: Dict[str, str]) -> None:
     for field_name, field_value in values.items():
         field_type = type(getattr(msg, field_name))
         try:
diff --git a/ros2topic/ros2topic/verb/echo.py b/ros2topic/ros2topic/verb/echo.py
index 95db572..afe71db 100644
--- a/ros2topic/ros2topic/verb/echo.py
+++ b/ros2topic/ros2topic/verb/echo.py
@@ -90,7 +90,7 @@ def register_yaml_representer():
 # an OrderedDict.
 # Inspired by:
 # http://stackoverflow.com/a/16782282/7169408
-def represent_ordereddict(dumper, data):
+def __represent_ordereddict(dumper, data):
     items = []
     for k, v in data.items():
         items.append((dumper.represent_data(k), dumper.represent_data(v)))
@@ -137,12 +137,15 @@ def subscriber_cb(args):
     return cb
 
 
-def msg_to_yaml(args, msg):
-    return yaml.dump(
-        msg_to_ordereddict(
-            msg,
-            truncate_length=args.truncate_length if not args.full_length else None
-        ), width=sys.maxsize)
+def msg_to_yaml(msg: Any, truncate_length: int = None) -> str:
+    global __yaml_representer_registered
+
+    # Register our custom representer for YAML output
+    if not __yaml_representer_registered:
+        yaml.add_representer(OrderedDict, __represent_ordereddict)
+        __yaml_representer_registered = True
+
+    return yaml.dump(msg_to_ordereddict(msg, truncate_length=truncate_length), width=sys.maxsize)
 
 
 def subscriber_cb_csv(args):
@@ -152,29 +155,29 @@ def subscriber_cb_csv(args):
     return cb
 
 
-def msg_to_csv(args, msg):
+def msg_to_csv(msg: Any, truncate_length: int = None) -> str:
     def to_string(val):
-        nonlocal args
+        nonlocal truncate_length
         r = ''
         if any(isinstance(val, t) for t in [list, tuple]):
             for i, v in enumerate(val):
                 if r:
                     r += ','
-                if not args.full_length and i >= args.truncate_length:
+                if truncate_legnth is not None and i >= truncate_length:
                     r += '...'
                     break
                 r += to_string(v)
         elif any(isinstance(val, t) for t in [bool, bytes, float, int, str]):
             if any(isinstance(val, t) for t in [bytes, str]):
-                if not args.full_length and len(val) > args.truncate_length:
-                    val = val[:args.truncate_length]
+                if truncate_length is not None and len(val) > truncate_length:
+                    val = val[:truncate_length]
                     if isinstance(val, bytes):
                         val += b'...'
                     else:
                         val += '...'
             r = str(val)
         else:
-            r = msg_to_csv(args, val)
+            r = msg_to_csv(val, truncate_length)
         return r
     result = ''
     # We rely on __slots__ retaining the order of the fields in the .msg file.
@@ -189,18 +192,18 @@ def msg_to_csv(args, msg):
 # Convert a msg to an OrderedDict. We do this instead of implementing a generic
 # __dict__() method in the msg because we want to preserve order of fields from
 # the .msg file(s).
-def msg_to_ordereddict(msg, truncate_length=None):
+def msg_to_ordereddict(msg: Any, truncate_length: int = None) -> OrderedDict:
     d = OrderedDict()
     # We rely on __slots__ retaining the order of the fields in the .msg file.
     for field_name in msg.__slots__:
         value = getattr(msg, field_name, None)
-        value = _convert_value(value, truncate_length=truncate_length)
-        # remove leading underscore from field name
+        value = __convert_value(value, truncate_length=truncate_length)
+        # Remove leading underscore from field name
         d[field_name[1:]] = value
     return d
 
 
-def _convert_value(value, truncate_length=None):
+def __convert_value(value, truncate_length=None):
     if isinstance(value, bytes):
         if truncate_length is not None and len(value) > truncate_length:
             value = ''.join([chr(c) for c in value[:truncate_length]]) + '...'
@@ -214,19 +217,18 @@ def _convert_value(value, truncate_length=None):
             # Truncate the sequence
             value = value[:truncate_length]
             # Truncate every item in the sequence
-            value = type(value)([_convert_value(v, truncate_length) for v in value] + ['...'])
+            value = type(value)([__convert_value(v, truncate_length) for v in value] + ['...'])
         else:
             # Truncate every item in the list
-            value = type(value)([_convert_value(v, truncate_length) for v in value])
+            value = type(value)([__convert_value(v, truncate_length) for v in value])
     elif isinstance(value, dict) or isinstance(value, OrderedDict):
-        # convert each key and value in the mapping
+        # Convert each key and value in the mapping
         new_value = {} if isinstance(value, dict) else OrderedDict()
         for k, v in value.items():
-            # don't truncate keys because that could result in key collisions and data loss
-            new_value[_convert_value(k)] = _convert_value(v, truncate_length=truncate_length)
+            # Don't truncate keys because that could result in key collisions and data loss
+            new_value[__convert_value(k)] = __convert_value(v, truncate_length=truncate_length)
         value = new_value
     elif not any(isinstance(value, t) for t in (bool, float, int)):
-        # assuming value is a message
-        # since it is neither a collection nor a primitive type
+        # Assuming value is a message since it is neither a collection nor a primitive type
         value = msg_to_ordereddict(value, truncate_length=truncate_length)
     return value","Contains functions for setting the values of a ROS message and converting ROS messages to other formats (e.g. YAML or CSV).
These functions have been copied from the package ros2topic so they can be used by other packages.
Specifically, these functions can be reused by ros2service and ros2action CLI tools. I'm proposing moving them to rclpy since they might be used in other tools (e.g. rosbag).

Here's the diff of the changes I made to the functions while moving them (excluding the docstrings):
diff --git a/ros2topic/ros2topic/api/__init__.py b/ros2topic/ros2topic/api/__init__.py
index 0156c43..548c62e 100644
--- a/ros2topic/ros2topic/api/__init__.py
+++ b/ros2topic/ros2topic/api/__init__.py
@@ -98,7 +98,7 @@ class SetFieldError(Exception):
         self.exception = exception
 
 
-def set_msg_fields(msg, values):
+def set_msg_fields(msg: Any, values: Dict[str, str]) -> None:
     for field_name, field_value in values.items():
         field_type = type(getattr(msg, field_name))
         try:
diff --git a/ros2topic/ros2topic/verb/echo.py b/ros2topic/ros2topic/verb/echo.py
index 95db572..afe71db 100644
--- a/ros2topic/ros2topic/verb/echo.py
+++ b/ros2topic/ros2topic/verb/echo.py
@@ -90,7 +90,7 @@ def register_yaml_representer():
 # an OrderedDict.
 # Inspired by:
 # http://stackoverflow.com/a/16782282/7169408
-def represent_ordereddict(dumper, data):
+def __represent_ordereddict(dumper, data):
     items = []
     for k, v in data.items():
         items.append((dumper.represent_data(k), dumper.represent_data(v)))
@@ -137,12 +137,15 @@ def subscriber_cb(args):
     return cb
 
 
-def msg_to_yaml(args, msg):
-    return yaml.dump(
-        msg_to_ordereddict(
-            msg,
-            truncate_length=args.truncate_length if not args.full_length else None
-        ), width=sys.maxsize)
+def msg_to_yaml(msg: Any, truncate_length: int = None) -> str:
+    global __yaml_representer_registered
+
+    # Register our custom representer for YAML output
+    if not __yaml_representer_registered:
+        yaml.add_representer(OrderedDict, __represent_ordereddict)
+        __yaml_representer_registered = True
+
+    return yaml.dump(msg_to_ordereddict(msg, truncate_length=truncate_length), width=sys.maxsize)
 
 
 def subscriber_cb_csv(args):
@@ -152,29 +155,29 @@ def subscriber_cb_csv(args):
     return cb
 
 
-def msg_to_csv(args, msg):
+def msg_to_csv(msg: Any, truncate_length: int = None) -> str:
     def to_string(val):
-        nonlocal args
+        nonlocal truncate_length
         r = ''
         if any(isinstance(val, t) for t in [list, tuple]):
             for i, v in enumerate(val):
                 if r:
                     r += ','
-                if not args.full_length and i >= args.truncate_length:
+                if truncate_legnth is not None and i >= truncate_length:
                     r += '...'
                     break
                 r += to_string(v)
         elif any(isinstance(val, t) for t in [bool, bytes, float, int, str]):
             if any(isinstance(val, t) for t in [bytes, str]):
-                if not args.full_length and len(val) > args.truncate_length:
-                    val = val[:args.truncate_length]
+                if truncate_length is not None and len(val) > truncate_length:
+                    val = val[:truncate_length]
                     if isinstance(val, bytes):
                         val += b'...'
                     else:
                         val += '...'
             r = str(val)
         else:
-            r = msg_to_csv(args, val)
+            r = msg_to_csv(val, truncate_length)
         return r
     result = ''
     # We rely on __slots__ retaining the order of the fields in the .msg file.
@@ -189,18 +192,18 @@ def msg_to_csv(args, msg):
 # Convert a msg to an OrderedDict. We do this instead of implementing a generic
 # __dict__() method in the msg because we want to preserve order of fields from
 # the .msg file(s).
-def msg_to_ordereddict(msg, truncate_length=None):
+def msg_to_ordereddict(msg: Any, truncate_length: int = None) -> OrderedDict:
     d = OrderedDict()
     # We rely on __slots__ retaining the order of the fields in the .msg file.
     for field_name in msg.__slots__:
         value = getattr(msg, field_name, None)
-        value = _convert_value(value, truncate_length=truncate_length)
-        # remove leading underscore from field name
+        value = __convert_value(value, truncate_length=truncate_length)
+        # Remove leading underscore from field name
         d[field_name[1:]] = value
     return d
 
 
-def _convert_value(value, truncate_length=None):
+def __convert_value(value, truncate_length=None):
     if isinstance(value, bytes):
         if truncate_length is not None and len(value) > truncate_length:
             value = ''.join([chr(c) for c in value[:truncate_length]]) + '...'
@@ -214,19 +217,18 @@ def _convert_value(value, truncate_length=None):
             # Truncate the sequence
             value = value[:truncate_length]
             # Truncate every item in the sequence
-            value = type(value)([_convert_value(v, truncate_length) for v in value] + ['...'])
+            value = type(value)([__convert_value(v, truncate_length) for v in value] + ['...'])
         else:
             # Truncate every item in the list
-            value = type(value)([_convert_value(v, truncate_length) for v in value])
+            value = type(value)([__convert_value(v, truncate_length) for v in value])
     elif isinstance(value, dict) or isinstance(value, OrderedDict):
-        # convert each key and value in the mapping
+        # Convert each key and value in the mapping
         new_value = {} if isinstance(value, dict) else OrderedDict()
         for k, v in value.items():
-            # don't truncate keys because that could result in key collisions and data loss
-            new_value[_convert_value(k)] = _convert_value(v, truncate_length=truncate_length)
+            # Don't truncate keys because that could result in key collisions and data loss
+            new_value[__convert_value(k)] = __convert_value(v, truncate_length=truncate_length)
         value = new_value
     elif not any(isinstance(value, t) for t in (bool, float, int)):
-        # assuming value is a message
-        # since it is neither a collection nor a primitive type
+        # Assuming value is a message since it is neither a collection nor a primitive type
         value = msg_to_ordereddict(value, truncate_length=truncate_length)
     return value",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,285,2019-03-14T23:43:08Z,2019-03-28T21:37:46Z,2019-03-28T21:37:51Z,CLOSED,False,186,0,1,https://github.com/jacobperron,Add message utilities module,1,[],https://github.com/ros2/rclpy/pull/285,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/285#issuecomment-473107733,"Contains functions for setting the values of a ROS message and converting ROS messages to other formats (e.g. YAML or CSV).
These functions have been copied from the package ros2topic so they can be used by other packages.
Specifically, these functions can be reused by ros2service and ros2action CLI tools. I'm proposing moving them to rclpy since they might be used in other tools (e.g. rosbag).

Here's the diff of the changes I made to the functions while moving them (excluding the docstrings):
diff --git a/ros2topic/ros2topic/api/__init__.py b/ros2topic/ros2topic/api/__init__.py
index 0156c43..548c62e 100644
--- a/ros2topic/ros2topic/api/__init__.py
+++ b/ros2topic/ros2topic/api/__init__.py
@@ -98,7 +98,7 @@ class SetFieldError(Exception):
         self.exception = exception
 
 
-def set_msg_fields(msg, values):
+def set_msg_fields(msg: Any, values: Dict[str, str]) -> None:
     for field_name, field_value in values.items():
         field_type = type(getattr(msg, field_name))
         try:
diff --git a/ros2topic/ros2topic/verb/echo.py b/ros2topic/ros2topic/verb/echo.py
index 95db572..afe71db 100644
--- a/ros2topic/ros2topic/verb/echo.py
+++ b/ros2topic/ros2topic/verb/echo.py
@@ -90,7 +90,7 @@ def register_yaml_representer():
 # an OrderedDict.
 # Inspired by:
 # http://stackoverflow.com/a/16782282/7169408
-def represent_ordereddict(dumper, data):
+def __represent_ordereddict(dumper, data):
     items = []
     for k, v in data.items():
         items.append((dumper.represent_data(k), dumper.represent_data(v)))
@@ -137,12 +137,15 @@ def subscriber_cb(args):
     return cb
 
 
-def msg_to_yaml(args, msg):
-    return yaml.dump(
-        msg_to_ordereddict(
-            msg,
-            truncate_length=args.truncate_length if not args.full_length else None
-        ), width=sys.maxsize)
+def msg_to_yaml(msg: Any, truncate_length: int = None) -> str:
+    global __yaml_representer_registered
+
+    # Register our custom representer for YAML output
+    if not __yaml_representer_registered:
+        yaml.add_representer(OrderedDict, __represent_ordereddict)
+        __yaml_representer_registered = True
+
+    return yaml.dump(msg_to_ordereddict(msg, truncate_length=truncate_length), width=sys.maxsize)
 
 
 def subscriber_cb_csv(args):
@@ -152,29 +155,29 @@ def subscriber_cb_csv(args):
     return cb
 
 
-def msg_to_csv(args, msg):
+def msg_to_csv(msg: Any, truncate_length: int = None) -> str:
     def to_string(val):
-        nonlocal args
+        nonlocal truncate_length
         r = ''
         if any(isinstance(val, t) for t in [list, tuple]):
             for i, v in enumerate(val):
                 if r:
                     r += ','
-                if not args.full_length and i >= args.truncate_length:
+                if truncate_legnth is not None and i >= truncate_length:
                     r += '...'
                     break
                 r += to_string(v)
         elif any(isinstance(val, t) for t in [bool, bytes, float, int, str]):
             if any(isinstance(val, t) for t in [bytes, str]):
-                if not args.full_length and len(val) > args.truncate_length:
-                    val = val[:args.truncate_length]
+                if truncate_length is not None and len(val) > truncate_length:
+                    val = val[:truncate_length]
                     if isinstance(val, bytes):
                         val += b'...'
                     else:
                         val += '...'
             r = str(val)
         else:
-            r = msg_to_csv(args, val)
+            r = msg_to_csv(val, truncate_length)
         return r
     result = ''
     # We rely on __slots__ retaining the order of the fields in the .msg file.
@@ -189,18 +192,18 @@ def msg_to_csv(args, msg):
 # Convert a msg to an OrderedDict. We do this instead of implementing a generic
 # __dict__() method in the msg because we want to preserve order of fields from
 # the .msg file(s).
-def msg_to_ordereddict(msg, truncate_length=None):
+def msg_to_ordereddict(msg: Any, truncate_length: int = None) -> OrderedDict:
     d = OrderedDict()
     # We rely on __slots__ retaining the order of the fields in the .msg file.
     for field_name in msg.__slots__:
         value = getattr(msg, field_name, None)
-        value = _convert_value(value, truncate_length=truncate_length)
-        # remove leading underscore from field name
+        value = __convert_value(value, truncate_length=truncate_length)
+        # Remove leading underscore from field name
         d[field_name[1:]] = value
     return d
 
 
-def _convert_value(value, truncate_length=None):
+def __convert_value(value, truncate_length=None):
     if isinstance(value, bytes):
         if truncate_length is not None and len(value) > truncate_length:
             value = ''.join([chr(c) for c in value[:truncate_length]]) + '...'
@@ -214,19 +217,18 @@ def _convert_value(value, truncate_length=None):
             # Truncate the sequence
             value = value[:truncate_length]
             # Truncate every item in the sequence
-            value = type(value)([_convert_value(v, truncate_length) for v in value] + ['...'])
+            value = type(value)([__convert_value(v, truncate_length) for v in value] + ['...'])
         else:
             # Truncate every item in the list
-            value = type(value)([_convert_value(v, truncate_length) for v in value])
+            value = type(value)([__convert_value(v, truncate_length) for v in value])
     elif isinstance(value, dict) or isinstance(value, OrderedDict):
-        # convert each key and value in the mapping
+        # Convert each key and value in the mapping
         new_value = {} if isinstance(value, dict) else OrderedDict()
         for k, v in value.items():
-            # don't truncate keys because that could result in key collisions and data loss
-            new_value[_convert_value(k)] = _convert_value(v, truncate_length=truncate_length)
+            # Don't truncate keys because that could result in key collisions and data loss
+            new_value[__convert_value(k)] = __convert_value(v, truncate_length=truncate_length)
         value = new_value
     elif not any(isinstance(value, t) for t in (bool, float, int)):
-        # assuming value is a message
-        # since it is neither a collection nor a primitive type
+        # Assuming value is a message since it is neither a collection nor a primitive type
         value = msg_to_ordereddict(value, truncate_length=truncate_length)
     return value",Since neither of these functions is related to the client library I would suggest putting it in a package related to rosidl_generator_py (as described in ros2/ros2#442 for C++).,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,285,2019-03-14T23:43:08Z,2019-03-28T21:37:46Z,2019-03-28T21:37:51Z,CLOSED,False,186,0,1,https://github.com/jacobperron,Add message utilities module,1,[],https://github.com/ros2/rclpy/pull/285,https://github.com/jacobperron,3,https://github.com/ros2/rclpy/pull/285#issuecomment-473114933,"Contains functions for setting the values of a ROS message and converting ROS messages to other formats (e.g. YAML or CSV).
These functions have been copied from the package ros2topic so they can be used by other packages.
Specifically, these functions can be reused by ros2service and ros2action CLI tools. I'm proposing moving them to rclpy since they might be used in other tools (e.g. rosbag).

Here's the diff of the changes I made to the functions while moving them (excluding the docstrings):
diff --git a/ros2topic/ros2topic/api/__init__.py b/ros2topic/ros2topic/api/__init__.py
index 0156c43..548c62e 100644
--- a/ros2topic/ros2topic/api/__init__.py
+++ b/ros2topic/ros2topic/api/__init__.py
@@ -98,7 +98,7 @@ class SetFieldError(Exception):
         self.exception = exception
 
 
-def set_msg_fields(msg, values):
+def set_msg_fields(msg: Any, values: Dict[str, str]) -> None:
     for field_name, field_value in values.items():
         field_type = type(getattr(msg, field_name))
         try:
diff --git a/ros2topic/ros2topic/verb/echo.py b/ros2topic/ros2topic/verb/echo.py
index 95db572..afe71db 100644
--- a/ros2topic/ros2topic/verb/echo.py
+++ b/ros2topic/ros2topic/verb/echo.py
@@ -90,7 +90,7 @@ def register_yaml_representer():
 # an OrderedDict.
 # Inspired by:
 # http://stackoverflow.com/a/16782282/7169408
-def represent_ordereddict(dumper, data):
+def __represent_ordereddict(dumper, data):
     items = []
     for k, v in data.items():
         items.append((dumper.represent_data(k), dumper.represent_data(v)))
@@ -137,12 +137,15 @@ def subscriber_cb(args):
     return cb
 
 
-def msg_to_yaml(args, msg):
-    return yaml.dump(
-        msg_to_ordereddict(
-            msg,
-            truncate_length=args.truncate_length if not args.full_length else None
-        ), width=sys.maxsize)
+def msg_to_yaml(msg: Any, truncate_length: int = None) -> str:
+    global __yaml_representer_registered
+
+    # Register our custom representer for YAML output
+    if not __yaml_representer_registered:
+        yaml.add_representer(OrderedDict, __represent_ordereddict)
+        __yaml_representer_registered = True
+
+    return yaml.dump(msg_to_ordereddict(msg, truncate_length=truncate_length), width=sys.maxsize)
 
 
 def subscriber_cb_csv(args):
@@ -152,29 +155,29 @@ def subscriber_cb_csv(args):
     return cb
 
 
-def msg_to_csv(args, msg):
+def msg_to_csv(msg: Any, truncate_length: int = None) -> str:
     def to_string(val):
-        nonlocal args
+        nonlocal truncate_length
         r = ''
         if any(isinstance(val, t) for t in [list, tuple]):
             for i, v in enumerate(val):
                 if r:
                     r += ','
-                if not args.full_length and i >= args.truncate_length:
+                if truncate_legnth is not None and i >= truncate_length:
                     r += '...'
                     break
                 r += to_string(v)
         elif any(isinstance(val, t) for t in [bool, bytes, float, int, str]):
             if any(isinstance(val, t) for t in [bytes, str]):
-                if not args.full_length and len(val) > args.truncate_length:
-                    val = val[:args.truncate_length]
+                if truncate_length is not None and len(val) > truncate_length:
+                    val = val[:truncate_length]
                     if isinstance(val, bytes):
                         val += b'...'
                     else:
                         val += '...'
             r = str(val)
         else:
-            r = msg_to_csv(args, val)
+            r = msg_to_csv(val, truncate_length)
         return r
     result = ''
     # We rely on __slots__ retaining the order of the fields in the .msg file.
@@ -189,18 +192,18 @@ def msg_to_csv(args, msg):
 # Convert a msg to an OrderedDict. We do this instead of implementing a generic
 # __dict__() method in the msg because we want to preserve order of fields from
 # the .msg file(s).
-def msg_to_ordereddict(msg, truncate_length=None):
+def msg_to_ordereddict(msg: Any, truncate_length: int = None) -> OrderedDict:
     d = OrderedDict()
     # We rely on __slots__ retaining the order of the fields in the .msg file.
     for field_name in msg.__slots__:
         value = getattr(msg, field_name, None)
-        value = _convert_value(value, truncate_length=truncate_length)
-        # remove leading underscore from field name
+        value = __convert_value(value, truncate_length=truncate_length)
+        # Remove leading underscore from field name
         d[field_name[1:]] = value
     return d
 
 
-def _convert_value(value, truncate_length=None):
+def __convert_value(value, truncate_length=None):
     if isinstance(value, bytes):
         if truncate_length is not None and len(value) > truncate_length:
             value = ''.join([chr(c) for c in value[:truncate_length]]) + '...'
@@ -214,19 +217,18 @@ def _convert_value(value, truncate_length=None):
             # Truncate the sequence
             value = value[:truncate_length]
             # Truncate every item in the sequence
-            value = type(value)([_convert_value(v, truncate_length) for v in value] + ['...'])
+            value = type(value)([__convert_value(v, truncate_length) for v in value] + ['...'])
         else:
             # Truncate every item in the list
-            value = type(value)([_convert_value(v, truncate_length) for v in value])
+            value = type(value)([__convert_value(v, truncate_length) for v in value])
     elif isinstance(value, dict) or isinstance(value, OrderedDict):
-        # convert each key and value in the mapping
+        # Convert each key and value in the mapping
         new_value = {} if isinstance(value, dict) else OrderedDict()
         for k, v in value.items():
-            # don't truncate keys because that could result in key collisions and data loss
-            new_value[_convert_value(k)] = _convert_value(v, truncate_length=truncate_length)
+            # Don't truncate keys because that could result in key collisions and data loss
+            new_value[__convert_value(k)] = __convert_value(v, truncate_length=truncate_length)
         value = new_value
     elif not any(isinstance(value, t) for t in (bool, float, int)):
-        # assuming value is a message
-        # since it is neither a collection nor a primitive type
+        # Assuming value is a message since it is neither a collection nor a primitive type
         value = msg_to_ordereddict(value, truncate_length=truncate_length)
     return value","Since neither of these functions is related to the client library I would suggest putting it in a package related to rosidl_generator_py (as described in ros2/ros2#442 for C++).

Sure. I could add a new package, rosidl_pyutils to the repo rosidl_python, or some other name if you have a better suggestion.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,285,2019-03-14T23:43:08Z,2019-03-28T21:37:46Z,2019-03-28T21:37:51Z,CLOSED,False,186,0,1,https://github.com/jacobperron,Add message utilities module,1,[],https://github.com/ros2/rclpy/pull/285,https://github.com/dirk-thomas,4,https://github.com/ros2/rclpy/pull/285#issuecomment-473358246,"Contains functions for setting the values of a ROS message and converting ROS messages to other formats (e.g. YAML or CSV).
These functions have been copied from the package ros2topic so they can be used by other packages.
Specifically, these functions can be reused by ros2service and ros2action CLI tools. I'm proposing moving them to rclpy since they might be used in other tools (e.g. rosbag).

Here's the diff of the changes I made to the functions while moving them (excluding the docstrings):
diff --git a/ros2topic/ros2topic/api/__init__.py b/ros2topic/ros2topic/api/__init__.py
index 0156c43..548c62e 100644
--- a/ros2topic/ros2topic/api/__init__.py
+++ b/ros2topic/ros2topic/api/__init__.py
@@ -98,7 +98,7 @@ class SetFieldError(Exception):
         self.exception = exception
 
 
-def set_msg_fields(msg, values):
+def set_msg_fields(msg: Any, values: Dict[str, str]) -> None:
     for field_name, field_value in values.items():
         field_type = type(getattr(msg, field_name))
         try:
diff --git a/ros2topic/ros2topic/verb/echo.py b/ros2topic/ros2topic/verb/echo.py
index 95db572..afe71db 100644
--- a/ros2topic/ros2topic/verb/echo.py
+++ b/ros2topic/ros2topic/verb/echo.py
@@ -90,7 +90,7 @@ def register_yaml_representer():
 # an OrderedDict.
 # Inspired by:
 # http://stackoverflow.com/a/16782282/7169408
-def represent_ordereddict(dumper, data):
+def __represent_ordereddict(dumper, data):
     items = []
     for k, v in data.items():
         items.append((dumper.represent_data(k), dumper.represent_data(v)))
@@ -137,12 +137,15 @@ def subscriber_cb(args):
     return cb
 
 
-def msg_to_yaml(args, msg):
-    return yaml.dump(
-        msg_to_ordereddict(
-            msg,
-            truncate_length=args.truncate_length if not args.full_length else None
-        ), width=sys.maxsize)
+def msg_to_yaml(msg: Any, truncate_length: int = None) -> str:
+    global __yaml_representer_registered
+
+    # Register our custom representer for YAML output
+    if not __yaml_representer_registered:
+        yaml.add_representer(OrderedDict, __represent_ordereddict)
+        __yaml_representer_registered = True
+
+    return yaml.dump(msg_to_ordereddict(msg, truncate_length=truncate_length), width=sys.maxsize)
 
 
 def subscriber_cb_csv(args):
@@ -152,29 +155,29 @@ def subscriber_cb_csv(args):
     return cb
 
 
-def msg_to_csv(args, msg):
+def msg_to_csv(msg: Any, truncate_length: int = None) -> str:
     def to_string(val):
-        nonlocal args
+        nonlocal truncate_length
         r = ''
         if any(isinstance(val, t) for t in [list, tuple]):
             for i, v in enumerate(val):
                 if r:
                     r += ','
-                if not args.full_length and i >= args.truncate_length:
+                if truncate_legnth is not None and i >= truncate_length:
                     r += '...'
                     break
                 r += to_string(v)
         elif any(isinstance(val, t) for t in [bool, bytes, float, int, str]):
             if any(isinstance(val, t) for t in [bytes, str]):
-                if not args.full_length and len(val) > args.truncate_length:
-                    val = val[:args.truncate_length]
+                if truncate_length is not None and len(val) > truncate_length:
+                    val = val[:truncate_length]
                     if isinstance(val, bytes):
                         val += b'...'
                     else:
                         val += '...'
             r = str(val)
         else:
-            r = msg_to_csv(args, val)
+            r = msg_to_csv(val, truncate_length)
         return r
     result = ''
     # We rely on __slots__ retaining the order of the fields in the .msg file.
@@ -189,18 +192,18 @@ def msg_to_csv(args, msg):
 # Convert a msg to an OrderedDict. We do this instead of implementing a generic
 # __dict__() method in the msg because we want to preserve order of fields from
 # the .msg file(s).
-def msg_to_ordereddict(msg, truncate_length=None):
+def msg_to_ordereddict(msg: Any, truncate_length: int = None) -> OrderedDict:
     d = OrderedDict()
     # We rely on __slots__ retaining the order of the fields in the .msg file.
     for field_name in msg.__slots__:
         value = getattr(msg, field_name, None)
-        value = _convert_value(value, truncate_length=truncate_length)
-        # remove leading underscore from field name
+        value = __convert_value(value, truncate_length=truncate_length)
+        # Remove leading underscore from field name
         d[field_name[1:]] = value
     return d
 
 
-def _convert_value(value, truncate_length=None):
+def __convert_value(value, truncate_length=None):
     if isinstance(value, bytes):
         if truncate_length is not None and len(value) > truncate_length:
             value = ''.join([chr(c) for c in value[:truncate_length]]) + '...'
@@ -214,19 +217,18 @@ def _convert_value(value, truncate_length=None):
             # Truncate the sequence
             value = value[:truncate_length]
             # Truncate every item in the sequence
-            value = type(value)([_convert_value(v, truncate_length) for v in value] + ['...'])
+            value = type(value)([__convert_value(v, truncate_length) for v in value] + ['...'])
         else:
             # Truncate every item in the list
-            value = type(value)([_convert_value(v, truncate_length) for v in value])
+            value = type(value)([__convert_value(v, truncate_length) for v in value])
     elif isinstance(value, dict) or isinstance(value, OrderedDict):
-        # convert each key and value in the mapping
+        # Convert each key and value in the mapping
         new_value = {} if isinstance(value, dict) else OrderedDict()
         for k, v in value.items():
-            # don't truncate keys because that could result in key collisions and data loss
-            new_value[_convert_value(k)] = _convert_value(v, truncate_length=truncate_length)
+            # Don't truncate keys because that could result in key collisions and data loss
+            new_value[__convert_value(k)] = __convert_value(v, truncate_length=truncate_length)
         value = new_value
     elif not any(isinstance(value, t) for t in (bool, float, int)):
-        # assuming value is a message
-        # since it is neither a collection nor a primitive type
+        # Assuming value is a message since it is neither a collection nor a primitive type
         value = msg_to_ordereddict(value, truncate_length=truncate_length)
     return value",We do have message_generation / message_runtime packages in ROS 1. So maybe each rosidl_generator_X package could have a sibling rosidl_runtime_X. Or as suggested in the referenced ticket rosidl_X_runtime. (All assuming that we think this is important enough for message packages to not depend on the generators.),True,{}
ros2/rclpy,https://github.com/ros2/rclpy,285,2019-03-14T23:43:08Z,2019-03-28T21:37:46Z,2019-03-28T21:37:51Z,CLOSED,False,186,0,1,https://github.com/jacobperron,Add message utilities module,1,[],https://github.com/ros2/rclpy/pull/285,https://github.com/jacobperron,5,https://github.com/ros2/rclpy/pull/285#issuecomment-473376325,"Contains functions for setting the values of a ROS message and converting ROS messages to other formats (e.g. YAML or CSV).
These functions have been copied from the package ros2topic so they can be used by other packages.
Specifically, these functions can be reused by ros2service and ros2action CLI tools. I'm proposing moving them to rclpy since they might be used in other tools (e.g. rosbag).

Here's the diff of the changes I made to the functions while moving them (excluding the docstrings):
diff --git a/ros2topic/ros2topic/api/__init__.py b/ros2topic/ros2topic/api/__init__.py
index 0156c43..548c62e 100644
--- a/ros2topic/ros2topic/api/__init__.py
+++ b/ros2topic/ros2topic/api/__init__.py
@@ -98,7 +98,7 @@ class SetFieldError(Exception):
         self.exception = exception
 
 
-def set_msg_fields(msg, values):
+def set_msg_fields(msg: Any, values: Dict[str, str]) -> None:
     for field_name, field_value in values.items():
         field_type = type(getattr(msg, field_name))
         try:
diff --git a/ros2topic/ros2topic/verb/echo.py b/ros2topic/ros2topic/verb/echo.py
index 95db572..afe71db 100644
--- a/ros2topic/ros2topic/verb/echo.py
+++ b/ros2topic/ros2topic/verb/echo.py
@@ -90,7 +90,7 @@ def register_yaml_representer():
 # an OrderedDict.
 # Inspired by:
 # http://stackoverflow.com/a/16782282/7169408
-def represent_ordereddict(dumper, data):
+def __represent_ordereddict(dumper, data):
     items = []
     for k, v in data.items():
         items.append((dumper.represent_data(k), dumper.represent_data(v)))
@@ -137,12 +137,15 @@ def subscriber_cb(args):
     return cb
 
 
-def msg_to_yaml(args, msg):
-    return yaml.dump(
-        msg_to_ordereddict(
-            msg,
-            truncate_length=args.truncate_length if not args.full_length else None
-        ), width=sys.maxsize)
+def msg_to_yaml(msg: Any, truncate_length: int = None) -> str:
+    global __yaml_representer_registered
+
+    # Register our custom representer for YAML output
+    if not __yaml_representer_registered:
+        yaml.add_representer(OrderedDict, __represent_ordereddict)
+        __yaml_representer_registered = True
+
+    return yaml.dump(msg_to_ordereddict(msg, truncate_length=truncate_length), width=sys.maxsize)
 
 
 def subscriber_cb_csv(args):
@@ -152,29 +155,29 @@ def subscriber_cb_csv(args):
     return cb
 
 
-def msg_to_csv(args, msg):
+def msg_to_csv(msg: Any, truncate_length: int = None) -> str:
     def to_string(val):
-        nonlocal args
+        nonlocal truncate_length
         r = ''
         if any(isinstance(val, t) for t in [list, tuple]):
             for i, v in enumerate(val):
                 if r:
                     r += ','
-                if not args.full_length and i >= args.truncate_length:
+                if truncate_legnth is not None and i >= truncate_length:
                     r += '...'
                     break
                 r += to_string(v)
         elif any(isinstance(val, t) for t in [bool, bytes, float, int, str]):
             if any(isinstance(val, t) for t in [bytes, str]):
-                if not args.full_length and len(val) > args.truncate_length:
-                    val = val[:args.truncate_length]
+                if truncate_length is not None and len(val) > truncate_length:
+                    val = val[:truncate_length]
                     if isinstance(val, bytes):
                         val += b'...'
                     else:
                         val += '...'
             r = str(val)
         else:
-            r = msg_to_csv(args, val)
+            r = msg_to_csv(val, truncate_length)
         return r
     result = ''
     # We rely on __slots__ retaining the order of the fields in the .msg file.
@@ -189,18 +192,18 @@ def msg_to_csv(args, msg):
 # Convert a msg to an OrderedDict. We do this instead of implementing a generic
 # __dict__() method in the msg because we want to preserve order of fields from
 # the .msg file(s).
-def msg_to_ordereddict(msg, truncate_length=None):
+def msg_to_ordereddict(msg: Any, truncate_length: int = None) -> OrderedDict:
     d = OrderedDict()
     # We rely on __slots__ retaining the order of the fields in the .msg file.
     for field_name in msg.__slots__:
         value = getattr(msg, field_name, None)
-        value = _convert_value(value, truncate_length=truncate_length)
-        # remove leading underscore from field name
+        value = __convert_value(value, truncate_length=truncate_length)
+        # Remove leading underscore from field name
         d[field_name[1:]] = value
     return d
 
 
-def _convert_value(value, truncate_length=None):
+def __convert_value(value, truncate_length=None):
     if isinstance(value, bytes):
         if truncate_length is not None and len(value) > truncate_length:
             value = ''.join([chr(c) for c in value[:truncate_length]]) + '...'
@@ -214,19 +217,18 @@ def _convert_value(value, truncate_length=None):
             # Truncate the sequence
             value = value[:truncate_length]
             # Truncate every item in the sequence
-            value = type(value)([_convert_value(v, truncate_length) for v in value] + ['...'])
+            value = type(value)([__convert_value(v, truncate_length) for v in value] + ['...'])
         else:
             # Truncate every item in the list
-            value = type(value)([_convert_value(v, truncate_length) for v in value])
+            value = type(value)([__convert_value(v, truncate_length) for v in value])
     elif isinstance(value, dict) or isinstance(value, OrderedDict):
-        # convert each key and value in the mapping
+        # Convert each key and value in the mapping
         new_value = {} if isinstance(value, dict) else OrderedDict()
         for k, v in value.items():
-            # don't truncate keys because that could result in key collisions and data loss
-            new_value[_convert_value(k)] = _convert_value(v, truncate_length=truncate_length)
+            # Don't truncate keys because that could result in key collisions and data loss
+            new_value[__convert_value(k)] = __convert_value(v, truncate_length=truncate_length)
         value = new_value
     elif not any(isinstance(value, t) for t in (bool, float, int)):
-        # assuming value is a message
-        # since it is neither a collection nor a primitive type
+        # Assuming value is a message since it is neither a collection nor a primitive type
         value = msg_to_ordereddict(value, truncate_length=truncate_length)
     return value","Do you imagine this to be the package that also contains functions like these:
https://github.com/ros2/ros2cli/blob/9ea0672aa6cc1700b2aa4833eee157355cac4291/ros2msg/ros2msg/api/__init__.py#L39-L44
https://github.com/ros2/ros2cli/blob/9ea0672aa6cc1700b2aa4833eee157355cac4291/ros2msg/ros2msg/api/__init__.py#L52-L54",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,285,2019-03-14T23:43:08Z,2019-03-28T21:37:46Z,2019-03-28T21:37:51Z,CLOSED,False,186,0,1,https://github.com/jacobperron,Add message utilities module,1,[],https://github.com/ros2/rclpy/pull/285,https://github.com/dirk-thomas,6,https://github.com/ros2/rclpy/pull/285#issuecomment-473377664,"Contains functions for setting the values of a ROS message and converting ROS messages to other formats (e.g. YAML or CSV).
These functions have been copied from the package ros2topic so they can be used by other packages.
Specifically, these functions can be reused by ros2service and ros2action CLI tools. I'm proposing moving them to rclpy since they might be used in other tools (e.g. rosbag).

Here's the diff of the changes I made to the functions while moving them (excluding the docstrings):
diff --git a/ros2topic/ros2topic/api/__init__.py b/ros2topic/ros2topic/api/__init__.py
index 0156c43..548c62e 100644
--- a/ros2topic/ros2topic/api/__init__.py
+++ b/ros2topic/ros2topic/api/__init__.py
@@ -98,7 +98,7 @@ class SetFieldError(Exception):
         self.exception = exception
 
 
-def set_msg_fields(msg, values):
+def set_msg_fields(msg: Any, values: Dict[str, str]) -> None:
     for field_name, field_value in values.items():
         field_type = type(getattr(msg, field_name))
         try:
diff --git a/ros2topic/ros2topic/verb/echo.py b/ros2topic/ros2topic/verb/echo.py
index 95db572..afe71db 100644
--- a/ros2topic/ros2topic/verb/echo.py
+++ b/ros2topic/ros2topic/verb/echo.py
@@ -90,7 +90,7 @@ def register_yaml_representer():
 # an OrderedDict.
 # Inspired by:
 # http://stackoverflow.com/a/16782282/7169408
-def represent_ordereddict(dumper, data):
+def __represent_ordereddict(dumper, data):
     items = []
     for k, v in data.items():
         items.append((dumper.represent_data(k), dumper.represent_data(v)))
@@ -137,12 +137,15 @@ def subscriber_cb(args):
     return cb
 
 
-def msg_to_yaml(args, msg):
-    return yaml.dump(
-        msg_to_ordereddict(
-            msg,
-            truncate_length=args.truncate_length if not args.full_length else None
-        ), width=sys.maxsize)
+def msg_to_yaml(msg: Any, truncate_length: int = None) -> str:
+    global __yaml_representer_registered
+
+    # Register our custom representer for YAML output
+    if not __yaml_representer_registered:
+        yaml.add_representer(OrderedDict, __represent_ordereddict)
+        __yaml_representer_registered = True
+
+    return yaml.dump(msg_to_ordereddict(msg, truncate_length=truncate_length), width=sys.maxsize)
 
 
 def subscriber_cb_csv(args):
@@ -152,29 +155,29 @@ def subscriber_cb_csv(args):
     return cb
 
 
-def msg_to_csv(args, msg):
+def msg_to_csv(msg: Any, truncate_length: int = None) -> str:
     def to_string(val):
-        nonlocal args
+        nonlocal truncate_length
         r = ''
         if any(isinstance(val, t) for t in [list, tuple]):
             for i, v in enumerate(val):
                 if r:
                     r += ','
-                if not args.full_length and i >= args.truncate_length:
+                if truncate_legnth is not None and i >= truncate_length:
                     r += '...'
                     break
                 r += to_string(v)
         elif any(isinstance(val, t) for t in [bool, bytes, float, int, str]):
             if any(isinstance(val, t) for t in [bytes, str]):
-                if not args.full_length and len(val) > args.truncate_length:
-                    val = val[:args.truncate_length]
+                if truncate_length is not None and len(val) > truncate_length:
+                    val = val[:truncate_length]
                     if isinstance(val, bytes):
                         val += b'...'
                     else:
                         val += '...'
             r = str(val)
         else:
-            r = msg_to_csv(args, val)
+            r = msg_to_csv(val, truncate_length)
         return r
     result = ''
     # We rely on __slots__ retaining the order of the fields in the .msg file.
@@ -189,18 +192,18 @@ def msg_to_csv(args, msg):
 # Convert a msg to an OrderedDict. We do this instead of implementing a generic
 # __dict__() method in the msg because we want to preserve order of fields from
 # the .msg file(s).
-def msg_to_ordereddict(msg, truncate_length=None):
+def msg_to_ordereddict(msg: Any, truncate_length: int = None) -> OrderedDict:
     d = OrderedDict()
     # We rely on __slots__ retaining the order of the fields in the .msg file.
     for field_name in msg.__slots__:
         value = getattr(msg, field_name, None)
-        value = _convert_value(value, truncate_length=truncate_length)
-        # remove leading underscore from field name
+        value = __convert_value(value, truncate_length=truncate_length)
+        # Remove leading underscore from field name
         d[field_name[1:]] = value
     return d
 
 
-def _convert_value(value, truncate_length=None):
+def __convert_value(value, truncate_length=None):
     if isinstance(value, bytes):
         if truncate_length is not None and len(value) > truncate_length:
             value = ''.join([chr(c) for c in value[:truncate_length]]) + '...'
@@ -214,19 +217,18 @@ def _convert_value(value, truncate_length=None):
             # Truncate the sequence
             value = value[:truncate_length]
             # Truncate every item in the sequence
-            value = type(value)([_convert_value(v, truncate_length) for v in value] + ['...'])
+            value = type(value)([__convert_value(v, truncate_length) for v in value] + ['...'])
         else:
             # Truncate every item in the list
-            value = type(value)([_convert_value(v, truncate_length) for v in value])
+            value = type(value)([__convert_value(v, truncate_length) for v in value])
     elif isinstance(value, dict) or isinstance(value, OrderedDict):
-        # convert each key and value in the mapping
+        # Convert each key and value in the mapping
         new_value = {} if isinstance(value, dict) else OrderedDict()
         for k, v in value.items():
-            # don't truncate keys because that could result in key collisions and data loss
-            new_value[_convert_value(k)] = _convert_value(v, truncate_length=truncate_length)
+            # Don't truncate keys because that could result in key collisions and data loss
+            new_value[__convert_value(k)] = __convert_value(v, truncate_length=truncate_length)
         value = new_value
     elif not any(isinstance(value, t) for t in (bool, float, int)):
-        # assuming value is a message
-        # since it is neither a collection nor a primitive type
+        # Assuming value is a message since it is neither a collection nor a primitive type
         value = msg_to_ordereddict(value, truncate_length=truncate_length)
     return value",These functions don't have anything to do with the generated message classes. So I would rather say no.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,285,2019-03-14T23:43:08Z,2019-03-28T21:37:46Z,2019-03-28T21:37:51Z,CLOSED,False,186,0,1,https://github.com/jacobperron,Add message utilities module,1,[],https://github.com/ros2/rclpy/pull/285,https://github.com/jacobperron,7,https://github.com/ros2/rclpy/pull/285#issuecomment-473404762,"Contains functions for setting the values of a ROS message and converting ROS messages to other formats (e.g. YAML or CSV).
These functions have been copied from the package ros2topic so they can be used by other packages.
Specifically, these functions can be reused by ros2service and ros2action CLI tools. I'm proposing moving them to rclpy since they might be used in other tools (e.g. rosbag).

Here's the diff of the changes I made to the functions while moving them (excluding the docstrings):
diff --git a/ros2topic/ros2topic/api/__init__.py b/ros2topic/ros2topic/api/__init__.py
index 0156c43..548c62e 100644
--- a/ros2topic/ros2topic/api/__init__.py
+++ b/ros2topic/ros2topic/api/__init__.py
@@ -98,7 +98,7 @@ class SetFieldError(Exception):
         self.exception = exception
 
 
-def set_msg_fields(msg, values):
+def set_msg_fields(msg: Any, values: Dict[str, str]) -> None:
     for field_name, field_value in values.items():
         field_type = type(getattr(msg, field_name))
         try:
diff --git a/ros2topic/ros2topic/verb/echo.py b/ros2topic/ros2topic/verb/echo.py
index 95db572..afe71db 100644
--- a/ros2topic/ros2topic/verb/echo.py
+++ b/ros2topic/ros2topic/verb/echo.py
@@ -90,7 +90,7 @@ def register_yaml_representer():
 # an OrderedDict.
 # Inspired by:
 # http://stackoverflow.com/a/16782282/7169408
-def represent_ordereddict(dumper, data):
+def __represent_ordereddict(dumper, data):
     items = []
     for k, v in data.items():
         items.append((dumper.represent_data(k), dumper.represent_data(v)))
@@ -137,12 +137,15 @@ def subscriber_cb(args):
     return cb
 
 
-def msg_to_yaml(args, msg):
-    return yaml.dump(
-        msg_to_ordereddict(
-            msg,
-            truncate_length=args.truncate_length if not args.full_length else None
-        ), width=sys.maxsize)
+def msg_to_yaml(msg: Any, truncate_length: int = None) -> str:
+    global __yaml_representer_registered
+
+    # Register our custom representer for YAML output
+    if not __yaml_representer_registered:
+        yaml.add_representer(OrderedDict, __represent_ordereddict)
+        __yaml_representer_registered = True
+
+    return yaml.dump(msg_to_ordereddict(msg, truncate_length=truncate_length), width=sys.maxsize)
 
 
 def subscriber_cb_csv(args):
@@ -152,29 +155,29 @@ def subscriber_cb_csv(args):
     return cb
 
 
-def msg_to_csv(args, msg):
+def msg_to_csv(msg: Any, truncate_length: int = None) -> str:
     def to_string(val):
-        nonlocal args
+        nonlocal truncate_length
         r = ''
         if any(isinstance(val, t) for t in [list, tuple]):
             for i, v in enumerate(val):
                 if r:
                     r += ','
-                if not args.full_length and i >= args.truncate_length:
+                if truncate_legnth is not None and i >= truncate_length:
                     r += '...'
                     break
                 r += to_string(v)
         elif any(isinstance(val, t) for t in [bool, bytes, float, int, str]):
             if any(isinstance(val, t) for t in [bytes, str]):
-                if not args.full_length and len(val) > args.truncate_length:
-                    val = val[:args.truncate_length]
+                if truncate_length is not None and len(val) > truncate_length:
+                    val = val[:truncate_length]
                     if isinstance(val, bytes):
                         val += b'...'
                     else:
                         val += '...'
             r = str(val)
         else:
-            r = msg_to_csv(args, val)
+            r = msg_to_csv(val, truncate_length)
         return r
     result = ''
     # We rely on __slots__ retaining the order of the fields in the .msg file.
@@ -189,18 +192,18 @@ def msg_to_csv(args, msg):
 # Convert a msg to an OrderedDict. We do this instead of implementing a generic
 # __dict__() method in the msg because we want to preserve order of fields from
 # the .msg file(s).
-def msg_to_ordereddict(msg, truncate_length=None):
+def msg_to_ordereddict(msg: Any, truncate_length: int = None) -> OrderedDict:
     d = OrderedDict()
     # We rely on __slots__ retaining the order of the fields in the .msg file.
     for field_name in msg.__slots__:
         value = getattr(msg, field_name, None)
-        value = _convert_value(value, truncate_length=truncate_length)
-        # remove leading underscore from field name
+        value = __convert_value(value, truncate_length=truncate_length)
+        # Remove leading underscore from field name
         d[field_name[1:]] = value
     return d
 
 
-def _convert_value(value, truncate_length=None):
+def __convert_value(value, truncate_length=None):
     if isinstance(value, bytes):
         if truncate_length is not None and len(value) > truncate_length:
             value = ''.join([chr(c) for c in value[:truncate_length]]) + '...'
@@ -214,19 +217,18 @@ def _convert_value(value, truncate_length=None):
             # Truncate the sequence
             value = value[:truncate_length]
             # Truncate every item in the sequence
-            value = type(value)([_convert_value(v, truncate_length) for v in value] + ['...'])
+            value = type(value)([__convert_value(v, truncate_length) for v in value] + ['...'])
         else:
             # Truncate every item in the list
-            value = type(value)([_convert_value(v, truncate_length) for v in value])
+            value = type(value)([__convert_value(v, truncate_length) for v in value])
     elif isinstance(value, dict) or isinstance(value, OrderedDict):
-        # convert each key and value in the mapping
+        # Convert each key and value in the mapping
         new_value = {} if isinstance(value, dict) else OrderedDict()
         for k, v in value.items():
-            # don't truncate keys because that could result in key collisions and data loss
-            new_value[_convert_value(k)] = _convert_value(v, truncate_length=truncate_length)
+            # Don't truncate keys because that could result in key collisions and data loss
+            new_value[__convert_value(k)] = __convert_value(v, truncate_length=truncate_length)
         value = new_value
     elif not any(isinstance(value, t) for t in (bool, float, int)):
-        # assuming value is a message
-        # since it is neither a collection nor a primitive type
+        # Assuming value is a message since it is neither a collection nor a primitive type
         value = msg_to_ordereddict(value, truncate_length=truncate_length)
     return value",@dirk-thomas See ros2/rosidl_python#34,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,285,2019-03-14T23:43:08Z,2019-03-28T21:37:46Z,2019-03-28T21:37:51Z,CLOSED,False,186,0,1,https://github.com/jacobperron,Add message utilities module,1,[],https://github.com/ros2/rclpy/pull/285,https://github.com/jacobperron,8,https://github.com/ros2/rclpy/pull/285#issuecomment-477780784,"Contains functions for setting the values of a ROS message and converting ROS messages to other formats (e.g. YAML or CSV).
These functions have been copied from the package ros2topic so they can be used by other packages.
Specifically, these functions can be reused by ros2service and ros2action CLI tools. I'm proposing moving them to rclpy since they might be used in other tools (e.g. rosbag).

Here's the diff of the changes I made to the functions while moving them (excluding the docstrings):
diff --git a/ros2topic/ros2topic/api/__init__.py b/ros2topic/ros2topic/api/__init__.py
index 0156c43..548c62e 100644
--- a/ros2topic/ros2topic/api/__init__.py
+++ b/ros2topic/ros2topic/api/__init__.py
@@ -98,7 +98,7 @@ class SetFieldError(Exception):
         self.exception = exception
 
 
-def set_msg_fields(msg, values):
+def set_msg_fields(msg: Any, values: Dict[str, str]) -> None:
     for field_name, field_value in values.items():
         field_type = type(getattr(msg, field_name))
         try:
diff --git a/ros2topic/ros2topic/verb/echo.py b/ros2topic/ros2topic/verb/echo.py
index 95db572..afe71db 100644
--- a/ros2topic/ros2topic/verb/echo.py
+++ b/ros2topic/ros2topic/verb/echo.py
@@ -90,7 +90,7 @@ def register_yaml_representer():
 # an OrderedDict.
 # Inspired by:
 # http://stackoverflow.com/a/16782282/7169408
-def represent_ordereddict(dumper, data):
+def __represent_ordereddict(dumper, data):
     items = []
     for k, v in data.items():
         items.append((dumper.represent_data(k), dumper.represent_data(v)))
@@ -137,12 +137,15 @@ def subscriber_cb(args):
     return cb
 
 
-def msg_to_yaml(args, msg):
-    return yaml.dump(
-        msg_to_ordereddict(
-            msg,
-            truncate_length=args.truncate_length if not args.full_length else None
-        ), width=sys.maxsize)
+def msg_to_yaml(msg: Any, truncate_length: int = None) -> str:
+    global __yaml_representer_registered
+
+    # Register our custom representer for YAML output
+    if not __yaml_representer_registered:
+        yaml.add_representer(OrderedDict, __represent_ordereddict)
+        __yaml_representer_registered = True
+
+    return yaml.dump(msg_to_ordereddict(msg, truncate_length=truncate_length), width=sys.maxsize)
 
 
 def subscriber_cb_csv(args):
@@ -152,29 +155,29 @@ def subscriber_cb_csv(args):
     return cb
 
 
-def msg_to_csv(args, msg):
+def msg_to_csv(msg: Any, truncate_length: int = None) -> str:
     def to_string(val):
-        nonlocal args
+        nonlocal truncate_length
         r = ''
         if any(isinstance(val, t) for t in [list, tuple]):
             for i, v in enumerate(val):
                 if r:
                     r += ','
-                if not args.full_length and i >= args.truncate_length:
+                if truncate_legnth is not None and i >= truncate_length:
                     r += '...'
                     break
                 r += to_string(v)
         elif any(isinstance(val, t) for t in [bool, bytes, float, int, str]):
             if any(isinstance(val, t) for t in [bytes, str]):
-                if not args.full_length and len(val) > args.truncate_length:
-                    val = val[:args.truncate_length]
+                if truncate_length is not None and len(val) > truncate_length:
+                    val = val[:truncate_length]
                     if isinstance(val, bytes):
                         val += b'...'
                     else:
                         val += '...'
             r = str(val)
         else:
-            r = msg_to_csv(args, val)
+            r = msg_to_csv(val, truncate_length)
         return r
     result = ''
     # We rely on __slots__ retaining the order of the fields in the .msg file.
@@ -189,18 +192,18 @@ def msg_to_csv(args, msg):
 # Convert a msg to an OrderedDict. We do this instead of implementing a generic
 # __dict__() method in the msg because we want to preserve order of fields from
 # the .msg file(s).
-def msg_to_ordereddict(msg, truncate_length=None):
+def msg_to_ordereddict(msg: Any, truncate_length: int = None) -> OrderedDict:
     d = OrderedDict()
     # We rely on __slots__ retaining the order of the fields in the .msg file.
     for field_name in msg.__slots__:
         value = getattr(msg, field_name, None)
-        value = _convert_value(value, truncate_length=truncate_length)
-        # remove leading underscore from field name
+        value = __convert_value(value, truncate_length=truncate_length)
+        # Remove leading underscore from field name
         d[field_name[1:]] = value
     return d
 
 
-def _convert_value(value, truncate_length=None):
+def __convert_value(value, truncate_length=None):
     if isinstance(value, bytes):
         if truncate_length is not None and len(value) > truncate_length:
             value = ''.join([chr(c) for c in value[:truncate_length]]) + '...'
@@ -214,19 +217,18 @@ def _convert_value(value, truncate_length=None):
             # Truncate the sequence
             value = value[:truncate_length]
             # Truncate every item in the sequence
-            value = type(value)([_convert_value(v, truncate_length) for v in value] + ['...'])
+            value = type(value)([__convert_value(v, truncate_length) for v in value] + ['...'])
         else:
             # Truncate every item in the list
-            value = type(value)([_convert_value(v, truncate_length) for v in value])
+            value = type(value)([__convert_value(v, truncate_length) for v in value])
     elif isinstance(value, dict) or isinstance(value, OrderedDict):
-        # convert each key and value in the mapping
+        # Convert each key and value in the mapping
         new_value = {} if isinstance(value, dict) else OrderedDict()
         for k, v in value.items():
-            # don't truncate keys because that could result in key collisions and data loss
-            new_value[_convert_value(k)] = _convert_value(v, truncate_length=truncate_length)
+            # Don't truncate keys because that could result in key collisions and data loss
+            new_value[__convert_value(k)] = __convert_value(v, truncate_length=truncate_length)
         value = new_value
     elif not any(isinstance(value, t) for t in (bool, float, int)):
-        # assuming value is a message
-        # since it is neither a collection nor a primitive type
+        # Assuming value is a message since it is neither a collection nor a primitive type
         value = msg_to_ordereddict(value, truncate_length=truncate_length)
     return value",Replaced by ros2/rosidl_python#34,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,286,2019-03-15T17:17:16Z,2019-03-19T12:24:48Z,2019-03-19T18:30:43Z,MERGED,True,3,4,1,https://github.com/ivanpauno,Using ament_target_dependencies where possible,1,[],https://github.com/ros2/rclpy/pull/286,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/286,Partially targets ros2/ros2#658,Partially targets ros2/ros2#658,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,286,2019-03-15T17:17:16Z,2019-03-19T12:24:48Z,2019-03-19T18:30:43Z,MERGED,True,3,4,1,https://github.com/ivanpauno,Using ament_target_dependencies where possible,1,[],https://github.com/ros2/rclpy/pull/286,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/286#issuecomment-474339886,Partially targets ros2/ros2#658,"CI:

Linux 
Linux-aarch64 
macOS 
Windows 

All failures are unrelated, so I'm merging",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,288,2019-03-18T09:52:53Z,2019-03-20T21:32:18Z,2019-03-21T16:13:29Z,MERGED,True,3,0,1,https://github.com/reed-lau,fix sigint guard condition's lifecycle bug,1,[],https://github.com/ros2/rclpy/pull/288,https://github.com/reed-lau,1,https://github.com/ros2/rclpy/pull/288,"fix #215, #253

Signed-off-by: reed-lau geoliuwei@gmail.com","fix #215, #253

Signed-off-by: reed-lau geoliuwei@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,288,2019-03-18T09:52:53Z,2019-03-20T21:32:18Z,2019-03-21T16:13:29Z,MERGED,True,3,0,1,https://github.com/reed-lau,fix sigint guard condition's lifecycle bug,1,[],https://github.com/ros2/rclpy/pull/288,https://github.com/reed-lau,2,https://github.com/ros2/rclpy/pull/288#issuecomment-473844155,"fix #215, #253

Signed-off-by: reed-lau geoliuwei@gmail.com","in the executor.py  'sigint_gc' is related with rclpy_get_sigint_guard_condition, rclpy_wait_set_add_entity, rclpy_destroy_entity these three functions. the rclpy_get_sigint_guard_condition assign the sigint_gc to the global static variable g_sigint_gc_handle, but the  rclpy_destroy_entity function does not remove it. so sometimes, when we destroy it, and at the same time Ctrl-C is triggered, the catch_function(signal handler function) will using the valid pointer, which could cause segmentfault.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,288,2019-03-18T09:52:53Z,2019-03-20T21:32:18Z,2019-03-21T16:13:29Z,MERGED,True,3,0,1,https://github.com/reed-lau,fix sigint guard condition's lifecycle bug,1,[],https://github.com/ros2/rclpy/pull/288,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/288#issuecomment-474173691,"fix #215, #253

Signed-off-by: reed-lau geoliuwei@gmail.com","CI

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,288,2019-03-18T09:52:53Z,2019-03-20T21:32:18Z,2019-03-21T16:13:29Z,MERGED,True,3,0,1,https://github.com/reed-lau,fix sigint guard condition's lifecycle bug,1,[],https://github.com/ros2/rclpy/pull/288,https://github.com/reed-lau,4,https://github.com/ros2/rclpy/pull/288#issuecomment-474187520,"fix #215, #253

Signed-off-by: reed-lau geoliuwei@gmail.com","change the code to the offical style, re-ci please @sloretz",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,288,2019-03-18T09:52:53Z,2019-03-20T21:32:18Z,2019-03-21T16:13:29Z,MERGED,True,3,0,1,https://github.com/reed-lau,fix sigint guard condition's lifecycle bug,1,[],https://github.com/ros2/rclpy/pull/288,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/288#issuecomment-474590763,"fix #215, #253

Signed-off-by: reed-lau geoliuwei@gmail.com","CI

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,288,2019-03-18T09:52:53Z,2019-03-20T21:32:18Z,2019-03-21T16:13:29Z,MERGED,True,3,0,1,https://github.com/reed-lau,fix sigint guard condition's lifecycle bug,1,[],https://github.com/ros2/rclpy/pull/288,https://github.com/sloretz,6,https://github.com/ros2/rclpy/pull/288#issuecomment-474865854,"fix #215, #253

Signed-off-by: reed-lau geoliuwei@gmail.com","CI ( I messed up the test parameters last time)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,288,2019-03-18T09:52:53Z,2019-03-20T21:32:18Z,2019-03-21T16:13:29Z,MERGED,True,3,0,1,https://github.com/reed-lau,fix sigint guard condition's lifecycle bug,1,[],https://github.com/ros2/rclpy/pull/288,https://github.com/sloretz,7,https://github.com/ros2/rclpy/pull/288#issuecomment-475036883,"fix #215, #253

Signed-off-by: reed-lau geoliuwei@gmail.com",Thanks for the fix @reed-lau !,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,288,2019-03-18T09:52:53Z,2019-03-20T21:32:18Z,2019-03-21T16:13:29Z,MERGED,True,3,0,1,https://github.com/reed-lau,fix sigint guard condition's lifecycle bug,1,[],https://github.com/ros2/rclpy/pull/288,https://github.com/reed-lau,8,https://github.com/ros2/rclpy/pull/288#issuecomment-475100623,"fix #215, #253

Signed-off-by: reed-lau geoliuwei@gmail.com","will this patch backport to bouncy-branch? as we're still using bouncy, compiling for source.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,288,2019-03-18T09:52:53Z,2019-03-20T21:32:18Z,2019-03-21T16:13:29Z,MERGED,True,3,0,1,https://github.com/reed-lau,fix sigint guard condition's lifecycle bug,1,[],https://github.com/ros2/rclpy/pull/288,https://github.com/sloretz,9,https://github.com/ros2/rclpy/pull/288#issuecomment-475297129,"fix #215, #253

Signed-off-by: reed-lau geoliuwei@gmail.com","@reed-lau I've added this PR to the list: ros2/ros2#575, though I don't know whether or not another bouncy patch release will happen.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,289,2019-03-21T02:50:47Z,2019-04-17T15:13:12Z,2019-04-17T15:13:22Z,CLOSED,False,1,0,1,https://github.com/reed-lau,fix server's request header's memory leakage,1,"['bug', 'duplicate', 'requires-changes']",https://github.com/ros2/rclpy/pull/289,https://github.com/reed-lau,1,https://github.com/ros2/rclpy/pull/289,"in ros2's server-client mode:
client send_request to server, then server take_request  and send_response  to the client, after client take_response, the one rpc is finished.
in the server side, take_request will create(in fact PyMem_Malloc is called) a header(type rmw_request_id_t) which is used for identifying the request, conceptually, the header will be destroyed after send_response. The offical implementation forget to PyMem_Free it, which will cause the memory leakage.
Signed-off-by: reed-lau geoliuwei@gmail.com","in ros2's server-client mode:
client send_request to server, then server take_request  and send_response  to the client, after client take_response, the one rpc is finished.
in the server side, take_request will create(in fact PyMem_Malloc is called) a header(type rmw_request_id_t) which is used for identifying the request, conceptually, the header will be destroyed after send_response. The offical implementation forget to PyMem_Free it, which will cause the memory leakage.
Signed-off-by: reed-lau geoliuwei@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,289,2019-03-21T02:50:47Z,2019-04-17T15:13:12Z,2019-04-17T15:13:22Z,CLOSED,False,1,0,1,https://github.com/reed-lau,fix server's request header's memory leakage,1,"['bug', 'duplicate', 'requires-changes']",https://github.com/ros2/rclpy/pull/289,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/289#issuecomment-475105643,"in ros2's server-client mode:
client send_request to server, then server take_request  and send_response  to the client, after client take_response, the one rpc is finished.
in the server side, take_request will create(in fact PyMem_Malloc is called) a header(type rmw_request_id_t) which is used for identifying the request, conceptually, the header will be destroyed after send_response. The offical implementation forget to PyMem_Free it, which will cause the memory leakage.
Signed-off-by: reed-lau geoliuwei@gmail.com",The header is a parameter to the function rclpy_send_response therefore I don't think the function can assume ownership and free the memory. The caller of the function might want to continue using the header parameter after the function returns. So the cleanup likely needs to be done somewhere else.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,289,2019-03-21T02:50:47Z,2019-04-17T15:13:12Z,2019-04-17T15:13:22Z,CLOSED,False,1,0,1,https://github.com/reed-lau,fix server's request header's memory leakage,1,"['bug', 'duplicate', 'requires-changes']",https://github.com/ros2/rclpy/pull/289,https://github.com/reed-lau,3,https://github.com/ros2/rclpy/pull/289#issuecomment-475107703,"in ros2's server-client mode:
client send_request to server, then server take_request  and send_response  to the client, after client take_response, the one rpc is finished.
in the server side, take_request will create(in fact PyMem_Malloc is called) a header(type rmw_request_id_t) which is used for identifying the request, conceptually, the header will be destroyed after send_response. The offical implementation forget to PyMem_Free it, which will cause the memory leakage.
Signed-off-by: reed-lau geoliuwei@gmail.com","yes, it may be released somewhere else, but the current state is that: no one release it, which will cause a memory leakage in server side, and the amount is one sizeof(rmw_request_id_t) per request. we can also add one interface something like _rclpy_destroy_request_id in the _rclpy.c. but in my point of view, the request_id's lifecycle can be last until _rclpy_send_response finished.
to reproduce the memory leak:
change the add_two_ints_client to a infinite while loop, each request will cause the server leak sizeof(rmw_request_id)  size memory.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,289,2019-03-21T02:50:47Z,2019-04-17T15:13:12Z,2019-04-17T15:13:22Z,CLOSED,False,1,0,1,https://github.com/reed-lau,fix server's request header's memory leakage,1,"['bug', 'duplicate', 'requires-changes']",https://github.com/ros2/rclpy/pull/289,https://github.com/dirk-thomas,4,https://github.com/ros2/rclpy/pull/289#issuecomment-475688323,"in ros2's server-client mode:
client send_request to server, then server take_request  and send_response  to the client, after client take_response, the one rpc is finished.
in the server side, take_request will create(in fact PyMem_Malloc is called) a header(type rmw_request_id_t) which is used for identifying the request, conceptually, the header will be destroyed after send_response. The offical implementation forget to PyMem_Free it, which will cause the memory leakage.
Signed-off-by: reed-lau geoliuwei@gmail.com","change the add_two_ints_client to a infinite while loop

Please provide the exact patch you are using.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,289,2019-03-21T02:50:47Z,2019-04-17T15:13:12Z,2019-04-17T15:13:22Z,CLOSED,False,1,0,1,https://github.com/reed-lau,fix server's request header's memory leakage,1,"['bug', 'duplicate', 'requires-changes']",https://github.com/ros2/rclpy/pull/289,https://github.com/reed-lau,5,https://github.com/ros2/rclpy/pull/289#issuecomment-476033396,"in ros2's server-client mode:
client send_request to server, then server take_request  and send_response  to the client, after client take_response, the one rpc is finished.
in the server side, take_request will create(in fact PyMem_Malloc is called) a header(type rmw_request_id_t) which is used for identifying the request, conceptually, the header will be destroyed after send_response. The offical implementation forget to PyMem_Free it, which will cause the memory leakage.
Signed-off-by: reed-lau geoliuwei@gmail.com","diff --git a/demo_nodes_py/demo_nodes_py/services/add_two_ints_client.py b/demo_nodes_py/demo_nodes_py/services/add_two_ints_client.py
index 3535846..c708ffc 100644
--- a/demo_nodes_py/demo_nodes_py/services/add_two_ints_client.py
+++ b/demo_nodes_py/demo_nodes_py/services/add_two_ints_client.py
@@ -25,15 +25,16 @@ def main(args=None):
     cli = node.create_client(AddTwoInts, 'add_two_ints')
     while not cli.wait_for_service(timeout_sec=1.0):
         print('service not available, waiting again...')
-    req = AddTwoInts.Request()
-    req.a = 2
-    req.b = 3
-    future = cli.call_async(req)
-    rclpy.spin_until_future_complete(node, future)
-    if future.result() is not None:
-        node.get_logger().info('Result of add_two_ints: %d' % future.result().sum)
-    else:
-        node.get_logger().error('Exception while calling service: %r' % future.exception())
+    while True:
+      req = AddTwoInts.Request()
+      req.a = 2
+      req.b = 3
+      future = cli.call_async(req)
+      rclpy.spin_until_future_complete(node, future)
+      if future.result() is not None:
+          node.get_logger().info('Result of add_two_ints: %d' % future.result().sum)
+      else:
+          node.get_logger().error('Exception while calling service: %r' % future.exception())
 
     node.destroy_node()
     rclpy.shutdown()",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,289,2019-03-21T02:50:47Z,2019-04-17T15:13:12Z,2019-04-17T15:13:22Z,CLOSED,False,1,0,1,https://github.com/reed-lau,fix server's request header's memory leakage,1,"['bug', 'duplicate', 'requires-changes']",https://github.com/ros2/rclpy/pull/289,https://github.com/reed-lau,6,https://github.com/ros2/rclpy/pull/289#issuecomment-477030824,"in ros2's server-client mode:
client send_request to server, then server take_request  and send_response  to the client, after client take_response, the one rpc is finished.
in the server side, take_request will create(in fact PyMem_Malloc is called) a header(type rmw_request_id_t) which is used for identifying the request, conceptually, the header will be destroyed after send_response. The offical implementation forget to PyMem_Free it, which will cause the memory leakage.
Signed-off-by: reed-lau geoliuwei@gmail.com",@dirk-thomas,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,289,2019-03-21T02:50:47Z,2019-04-17T15:13:12Z,2019-04-17T15:13:22Z,CLOSED,False,1,0,1,https://github.com/reed-lau,fix server's request header's memory leakage,1,"['bug', 'duplicate', 'requires-changes']",https://github.com/ros2/rclpy/pull/289,https://github.com/dirk-thomas,7,https://github.com/ros2/rclpy/pull/289#issuecomment-478672639,"in ros2's server-client mode:
client send_request to server, then server take_request  and send_response  to the client, after client take_response, the one rpc is finished.
in the server side, take_request will create(in fact PyMem_Malloc is called) a header(type rmw_request_id_t) which is used for identifying the request, conceptually, the header will be destroyed after send_response. The offical implementation forget to PyMem_Free it, which will cause the memory leakage.
Signed-off-by: reed-lau geoliuwei@gmail.com",I can confirm the increasing memory usage over time (I would recommend using while rclpy.ok(): though). But the patch in this PR doesn't fix the problem for me (despite doing the free in the wrong location).,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,289,2019-03-21T02:50:47Z,2019-04-17T15:13:12Z,2019-04-17T15:13:22Z,CLOSED,False,1,0,1,https://github.com/reed-lau,fix server's request header's memory leakage,1,"['bug', 'duplicate', 'requires-changes']",https://github.com/ros2/rclpy/pull/289,https://github.com/dirk-thomas,8,https://github.com/ros2/rclpy/pull/289#issuecomment-478674460,"in ros2's server-client mode:
client send_request to server, then server take_request  and send_response  to the client, after client take_response, the one rpc is finished.
in the server side, take_request will create(in fact PyMem_Malloc is called) a header(type rmw_request_id_t) which is used for identifying the request, conceptually, the header will be destroyed after send_response. The offical implementation forget to PyMem_Free it, which will cause the memory leakage.
Signed-off-by: reed-lau geoliuwei@gmail.com",#302 is similar and it would be good to address that one first to make sure the simple cases don't have an increasing memory usage.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,289,2019-03-21T02:50:47Z,2019-04-17T15:13:12Z,2019-04-17T15:13:22Z,CLOSED,False,1,0,1,https://github.com/reed-lau,fix server's request header's memory leakage,1,"['bug', 'duplicate', 'requires-changes']",https://github.com/ros2/rclpy/pull/289,https://github.com/dirk-thomas,9,https://github.com/ros2/rclpy/pull/289#issuecomment-484133218,"in ros2's server-client mode:
client send_request to server, then server take_request  and send_response  to the client, after client take_response, the one rpc is finished.
in the server side, take_request will create(in fact PyMem_Malloc is called) a header(type rmw_request_id_t) which is used for identifying the request, conceptually, the header will be destroyed after send_response. The offical implementation forget to PyMem_Free it, which will cause the memory leakage.
Signed-off-by: reed-lau geoliuwei@gmail.com","As suspected the fix for #302 seems to also address the memory increase reported in this ticket. Please try the patch from ros2/rcl#418 to check that it addresses the problem for you too.
Since it does so for me and since this patch was not mergable I will go ahead and close the ticket for now. Please feel free to continue commenting with your findings.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,292,2019-03-25T23:30:40Z,2019-03-27T19:22:00Z,2019-03-27T19:22:05Z,MERGED,True,7,5,1,https://github.com/dirk-thomas,update tests to pass with numpy arrays,1,['enhancement'],https://github.com/ros2/rclpy/pull/292,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/292,Connect to ros2/rosidl_python#35.,Connect to ros2/rosidl_python#35.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,294,2019-03-26T21:25:26Z,2019-05-08T05:47:42Z,2019-05-08T05:47:57Z,MERGED,True,15,15,2,https://github.com/jacobperron,Update tests to include namespace in ROS types,1,[],https://github.com/ros2/rclpy/pull/294,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/294,Connects to ros2/ros2#677,Connects to ros2/ros2#677,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,294,2019-03-26T21:25:26Z,2019-05-08T05:47:42Z,2019-05-08T05:47:57Z,MERGED,True,15,15,2,https://github.com/jacobperron,Update tests to include namespace in ROS types,1,[],https://github.com/ros2/rclpy/pull/294,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/294#issuecomment-490188358,Connects to ros2/ros2#677,"The code looks fine.
Is action, msg, and srv indicating the type of interface, or the namespace the namespace in the idl file? If a struct in an idl file has arbitrary namespace test_msgs::foo::bar::Fibonacci, what will the type name be here? test_msgs/foo/bar/Fibonacci?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,294,2019-03-26T21:25:26Z,2019-05-08T05:47:42Z,2019-05-08T05:47:57Z,MERGED,True,15,15,2,https://github.com/jacobperron,Update tests to include namespace in ROS types,1,[],https://github.com/ros2/rclpy/pull/294,https://github.com/jacobperron,3,https://github.com/ros2/rclpy/pull/294#issuecomment-490265983,Connects to ros2/ros2#677,"Is action, msg, and srv indicating the type of interface, or the namespace the namespace in the idl file? If a struct in an idl file has arbitrary namespace test_msgs::foo::bar::Fibonacci, what will the type name be here? test_msgs/foo/bar/Fibonacci?

Indicating the namespace of the IDL type.
So, in theory, a type defined with namespace test_msgs::foo::bar::Fibonacci would have the identifying name test_msgs/foo/bar/Fibonacci. I'm not sure that generating code from arbitrary IDL files will work right now, but I believe that this the long term goal. By convention, namespaces of legacy ROS interfaces (msg, srv, and action) will coincide with the type, ie <pkg_name>/<msg|srv|action>/<type_name>.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,297,2019-03-29T07:23:42Z,2019-04-01T17:42:46Z,2019-04-01T17:42:51Z,MERGED,True,63,14,3,https://github.com/vinnamkim,Add param callback to time_source,2,[],https://github.com/ros2/rclpy/pull/297,https://github.com/vinnamkim,1,https://github.com/ros2/rclpy/pull/297,"Targets to #240
Since it seems there have been no response on #240 for a long time, I made this PR. However, It seems that the callback function should be changed from parameter callback to something like rclcpp::SyncParametersClient or rclcpp::AsyncParametersClient.
Signed-off-by: vinnamkim vinnam.kim@gmail.com","Targets to #240
Since it seems there have been no response on #240 for a long time, I made this PR. However, It seems that the callback function should be changed from parameter callback to something like rclcpp::SyncParametersClient or rclcpp::AsyncParametersClient.
Signed-off-by: vinnamkim vinnam.kim@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,297,2019-03-29T07:23:42Z,2019-04-01T17:42:46Z,2019-04-01T17:42:51Z,MERGED,True,63,14,3,https://github.com/vinnamkim,Add param callback to time_source,2,[],https://github.com/ros2/rclpy/pull/297,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/297#issuecomment-478675627,"Targets to #240
Since it seems there have been no response on #240 for a long time, I made this PR. However, It seems that the callback function should be changed from parameter callback to something like rclcpp::SyncParametersClient or rclcpp::AsyncParametersClient.
Signed-off-by: vinnamkim vinnam.kim@gmail.com",Test failures are unrelated.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,298,2019-03-29T22:31:54Z,2019-03-29T23:32:11Z,2019-03-29T23:32:15Z,MERGED,True,3,0,1,https://github.com/sloretz,fix sigint guard condition's lifecycle bug (#288),1,[],https://github.com/ros2/rclpy/pull/298,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/298,"Cherry-pick of #288 for crystal patch release 4 ros2/ros2#668
closes #295","Cherry-pick of #288 for crystal patch release 4 ros2/ros2#668
closes #295",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,298,2019-03-29T22:31:54Z,2019-03-29T23:32:11Z,2019-03-29T23:32:15Z,MERGED,True,3,0,1,https://github.com/sloretz,fix sigint guard condition's lifecycle bug (#288),1,[],https://github.com/ros2/rclpy/pull/298,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/298#issuecomment-478169800,"Cherry-pick of #288 for crystal patch release 4 ros2/ros2#668
closes #295","First try at CI

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,299,2019-03-30T00:16:59Z,2019-03-30T00:20:37Z,2019-03-30T00:20:42Z,MERGED,True,6,1,2,https://github.com/sloretz,Crystal patch 4 changelogs,1,[],https://github.com/ros2/rclpy/pull/299,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/299,"Opening for visibility, but immediately merging","Opening for visibility, but immediately merging",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,300,2019-03-30T02:27:22Z,2019-04-16T11:46:55Z,2019-04-16T11:46:59Z,MERGED,True,57,57,3,https://github.com/jacobperron,Rename action state transitions,2,[],https://github.com/ros2/rclpy/pull/300,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/300,"Now using active verbs as described in the design doc:
http://design.ros2.org/articles/actions.html#goal-states
Connects to ros2/rcl#399.","Now using active verbs as described in the design doc:
http://design.ros2.org/articles/actions.html#goal-states
Connects to ros2/rcl#399.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,300,2019-03-30T02:27:22Z,2019-04-16T11:46:55Z,2019-04-16T11:46:59Z,MERGED,True,57,57,3,https://github.com/jacobperron,Rename action state transitions,2,[],https://github.com/ros2/rclpy/pull/300,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/300#issuecomment-483276261,"Now using active verbs as described in the design doc:
http://design.ros2.org/articles/actions.html#goal-states
Connects to ros2/rcl#399.","Updated based on design discussion (ros2/design#226). @hidmic, please take another look.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,301,2019-04-01T15:31:19Z,2019-04-11T15:54:28Z,2019-04-11T15:54:33Z,MERGED,True,116,6,3,https://github.com/vinnamkim,Add timeout to executor_spin_until_future_complete,4,[],https://github.com/ros2/rclpy/pull/301,https://github.com/vinnamkim,1,https://github.com/ros2/rclpy/pull/301,"Fix #261.
Signed-off-by: vinnamkim vinnam.kim@gmail.com","Fix #261.
Signed-off-by: vinnamkim vinnam.kim@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,301,2019-04-01T15:31:19Z,2019-04-11T15:54:28Z,2019-04-11T15:54:33Z,MERGED,True,116,6,3,https://github.com/vinnamkim,Add timeout to executor_spin_until_future_complete,4,[],https://github.com/ros2/rclpy/pull/301,https://github.com/vinnamkim,2,https://github.com/ros2/rclpy/pull/301#issuecomment-479748147,"Fix #261.
Signed-off-by: vinnamkim vinnam.kim@gmail.com",@jacobperron Thanks for review. updated commit.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,301,2019-04-01T15:31:19Z,2019-04-11T15:54:28Z,2019-04-11T15:54:33Z,MERGED,True,116,6,3,https://github.com/vinnamkim,Add timeout to executor_spin_until_future_complete,4,[],https://github.com/ros2/rclpy/pull/301,https://github.com/jacobperron,3,https://github.com/ros2/rclpy/pull/301#issuecomment-480371259,"Fix #261.
Signed-off-by: vinnamkim vinnam.kim@gmail.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,301,2019-04-01T15:31:19Z,2019-04-11T15:54:28Z,2019-04-11T15:54:33Z,MERGED,True,116,6,3,https://github.com/vinnamkim,Add timeout to executor_spin_until_future_complete,4,[],https://github.com/ros2/rclpy/pull/301,https://github.com/jacobperron,4,https://github.com/ros2/rclpy/pull/301#issuecomment-481776171,"Fix #261.
Signed-off-by: vinnamkim vinnam.kim@gmail.com",Wndows:,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,301,2019-04-01T15:31:19Z,2019-04-11T15:54:28Z,2019-04-11T15:54:33Z,MERGED,True,116,6,3,https://github.com/vinnamkim,Add timeout to executor_spin_until_future_complete,4,[],https://github.com/ros2/rclpy/pull/301,https://github.com/jacobperron,5,https://github.com/ros2/rclpy/pull/301#issuecomment-481813069,"Fix #261.
Signed-off-by: vinnamkim vinnam.kim@gmail.com","@vinnamkim Sorry, a recent merge to master seems to have caused conflicts. For future, a rebase instead of a merge should help avoid this. After the conflict is resolved I'll merge this PR, thanks!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,304,2019-04-03T14:26:41Z,2019-04-05T01:34:16Z,2019-04-05T01:34:21Z,MERGED,True,11,10,3,https://github.com/vinnamkim,Use rosgraph_msgs.msg.Clock for TimeSource,1,[],https://github.com/ros2/rclpy/pull/304,https://github.com/vinnamkim,1,https://github.com/ros2/rclpy/pull/304,"Fix #303.
Signed-off-by: vinnamkim vinnam.kim@gmail.com","Fix #303.
Signed-off-by: vinnamkim vinnam.kim@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,304,2019-04-03T14:26:41Z,2019-04-05T01:34:16Z,2019-04-05T01:34:21Z,MERGED,True,11,10,3,https://github.com/vinnamkim,Use rosgraph_msgs.msg.Clock for TimeSource,1,[],https://github.com/ros2/rclpy/pull/304,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/304#issuecomment-480045155,"Fix #303.
Signed-off-by: vinnamkim vinnam.kim@gmail.com","CI (test packages above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,304,2019-04-03T14:26:41Z,2019-04-05T01:34:16Z,2019-04-05T01:34:21Z,MERGED,True,11,10,3,https://github.com/vinnamkim,Use rosgraph_msgs.msg.Clock for TimeSource,1,[],https://github.com/ros2/rclpy/pull/304,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/304#issuecomment-480119374,"Fix #303.
Signed-off-by: vinnamkim vinnam.kim@gmail.com","The test failures seem unrelated
Known failure ros2/build_farmer#166 https://ci.ros2.org/job/ci_windows/6437/testReport/junit/(root)/projectroot/test_params_yaml/
Haven't seen this failure before:
https://ci.ros2.org/job/ci_windows/6437/testReport/junit/rqt_py_common.test.test_rqt_common_unit/TestMessageTreeModel/test_path_names/
But it also happened on this unrelated job: https://ci.ros2.org/job/ci_linux/6616/testReport/junit/rqt_py_common.test.test_rqt_common_unit/TestMessageTreeModel/test_path_names/",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,305,2019-04-03T17:59:22Z,2019-05-03T17:17:19Z,2019-09-04T18:42:19Z,MERGED,True,25,9,3,https://github.com/emersonknapp,QoS - Minimal change for build against new rcl API,2,[],https://github.com/ros2/rclpy/pull/305,https://github.com/emersonknapp,1,https://github.com/ros2/rclpy/pull/305,"Connects to ros2/rmw#171
Allows this package to build when new QoS APIs are checked in, but exposes none of the new functionality
Signed-off-by: Emerson Knapp eknapp@amazon.com","Connects to ros2/rmw#171
Allows this package to build when new QoS APIs are checked in, but exposes none of the new functionality
Signed-off-by: Emerson Knapp eknapp@amazon.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,305,2019-04-03T17:59:22Z,2019-05-03T17:17:19Z,2019-09-04T18:42:19Z,MERGED,True,25,9,3,https://github.com/emersonknapp,QoS - Minimal change for build against new rcl API,2,[],https://github.com/ros2/rclpy/pull/305,https://github.com/nburek,2,https://github.com/ros2/rclpy/pull/305#issuecomment-482666302,"Connects to ros2/rmw#171
Allows this package to build when new QoS APIs are checked in, but exposes none of the new functionality
Signed-off-by: Emerson Knapp eknapp@amazon.com",@wjwwood This is ready for review. Can you please update the label for us. Thanks.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,305,2019-04-03T17:59:22Z,2019-05-03T17:17:19Z,2019-09-04T18:42:19Z,MERGED,True,25,9,3,https://github.com/emersonknapp,QoS - Minimal change for build against new rcl API,2,[],https://github.com/ros2/rclpy/pull/305,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/305#issuecomment-488408521,"Connects to ros2/rmw#171
Allows this package to build when new QoS APIs are checked in, but exposes none of the new functionality
Signed-off-by: Emerson Knapp eknapp@amazon.com",@emersonknapp It looks like there is a merge conflict. Mind rebasing?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,305,2019-04-03T17:59:22Z,2019-05-03T17:17:19Z,2019-09-04T18:42:19Z,MERGED,True,25,9,3,https://github.com/emersonknapp,QoS - Minimal change for build against new rcl API,2,[],https://github.com/ros2/rclpy/pull/305,https://github.com/emersonknapp,4,https://github.com/ros2/rclpy/pull/305#issuecomment-488437684,"Connects to ros2/rmw#171
Allows this package to build when new QoS APIs are checked in, but exposes none of the new functionality
Signed-off-by: Emerson Knapp eknapp@amazon.com",Done,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,306,2019-04-03T21:14:43Z,2019-04-14T14:31:04Z,2019-04-14T14:31:09Z,MERGED,True,497,92,8,https://github.com/jacobperron,Add action graph API,7,[],https://github.com/ros2/rclpy/pull/306,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/306,"As a prerequisite, I've  moved the names and types functions to rclpy_common for reuse in the rclpy action C extension.
Connects to ros2/ros2cli#202","As a prerequisite, I've  moved the names and types functions to rclpy_common for reuse in the rclpy action C extension.
Connects to ros2/ros2cli#202",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,306,2019-04-03T21:14:43Z,2019-04-14T14:31:04Z,2019-04-14T14:31:09Z,MERGED,True,497,92,8,https://github.com/jacobperron,Add action graph API,7,[],https://github.com/ros2/rclpy/pull/306,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/306#issuecomment-479663808,"As a prerequisite, I've  moved the names and types functions to rclpy_common for reuse in the rclpy action C extension.
Connects to ros2/ros2cli#202","Testing rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,306,2019-04-03T21:14:43Z,2019-04-14T14:31:04Z,2019-04-14T14:31:09Z,MERGED,True,497,92,8,https://github.com/jacobperron,Add action graph API,7,[],https://github.com/ros2/rclpy/pull/306,https://github.com/jacobperron,3,https://github.com/ros2/rclpy/pull/306#issuecomment-482688834,"As a prerequisite, I've  moved the names and types functions to rclpy_common for reuse in the rclpy action C extension.
Connects to ros2/ros2cli#202","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,306,2019-04-03T21:14:43Z,2019-04-14T14:31:04Z,2019-04-14T14:31:09Z,MERGED,True,497,92,8,https://github.com/jacobperron,Add action graph API,7,[],https://github.com/ros2/rclpy/pull/306,https://github.com/jacobperron,4,https://github.com/ros2/rclpy/pull/306#issuecomment-482980957,"As a prerequisite, I've  moved the names and types functions to rclpy_common for reuse in the rclpy action C extension.
Connects to ros2/ros2cli#202","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,307,2019-04-04T20:36:18Z,2019-04-10T22:08:50Z,2019-04-10T22:53:27Z,MERGED,True,55,31,1,https://github.com/emersonknapp,"Refactor QoS Python-C conversion into less error-prone pattern (pre-QoS, standalone)",5,[],https://github.com/ros2/rclpy/pull/307,https://github.com/emersonknapp,1,https://github.com/ros2/rclpy/pull/307,"The manual ordering of DECREFs is unwieldy - refactor to a simpler pattern that is easier to extend.
I am adding new policy types for QoS - which will utilize this change to make it much easier to do so.
Signed-off-by: Emerson Knapp eknapp@amazon.com","The manual ordering of DECREFs is unwieldy - refactor to a simpler pattern that is easier to extend.
I am adding new policy types for QoS - which will utilize this change to make it much easier to do so.
Signed-off-by: Emerson Knapp eknapp@amazon.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,307,2019-04-04T20:36:18Z,2019-04-10T22:08:50Z,2019-04-10T22:53:27Z,MERGED,True,55,31,1,https://github.com/emersonknapp,"Refactor QoS Python-C conversion into less error-prone pattern (pre-QoS, standalone)",5,[],https://github.com/ros2/rclpy/pull/307,https://github.com/emersonknapp,2,https://github.com/ros2/rclpy/pull/307#issuecomment-480361669,"The manual ordering of DECREFs is unwieldy - refactor to a simpler pattern that is easier to extend.
I am adding new policy types for QoS - which will utilize this change to make it much easier to do so.
Signed-off-by: Emerson Knapp eknapp@amazon.com","@thomas-moulard - please run the following CI job:

Gist file: https://gist.githubusercontent.com/emersonknapp/136ce7fc45add2a8553c08dad819d635/raw/950e24815a567dffac2eb4f7a4fb45c9f5da9ee7/ros2.repos
Additional test flags: --packages-up-to rclpy
CI Jobs: ci_launcher",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,307,2019-04-04T20:36:18Z,2019-04-10T22:08:50Z,2019-04-10T22:53:27Z,MERGED,True,55,31,1,https://github.com/emersonknapp,"Refactor QoS Python-C conversion into less error-prone pattern (pre-QoS, standalone)",5,[],https://github.com/ros2/rclpy/pull/307,https://github.com/thomas-moulard,3,https://github.com/ros2/rclpy/pull/307#issuecomment-480373988,"The manual ordering of DECREFs is unwieldy - refactor to a simpler pattern that is easier to extend.
I am adding new policy types for QoS - which will utilize this change to make it much easier to do so.
Signed-off-by: Emerson Knapp eknapp@amazon.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,307,2019-04-04T20:36:18Z,2019-04-10T22:08:50Z,2019-04-10T22:53:27Z,MERGED,True,55,31,1,https://github.com/emersonknapp,"Refactor QoS Python-C conversion into less error-prone pattern (pre-QoS, standalone)",5,[],https://github.com/ros2/rclpy/pull/307,https://github.com/thomas-moulard,4,https://github.com/ros2/rclpy/pull/307#issuecomment-480939168,"The manual ordering of DECREFs is unwieldy - refactor to a simpler pattern that is easier to extend.
I am adding new policy types for QoS - which will utilize this change to make it much easier to do so.
Signed-off-by: Emerson Knapp eknapp@amazon.com","It's hard to know when we need to decrease the ref count.
Here is what I found: https://mail.python.org/pipermail/python-list/2009-November/557842.html
IIUC this code is correct because the cleanup code (Py_XDECREF) is called even if the function succeeds which is what we want.
Why? Creating the Python object increases the ref count by one, PyObject_SetAttrString increases the ref count by one so we need to decrease by one to make sure the objects are not leaker when the Python object holding those attributes die.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,307,2019-04-04T20:36:18Z,2019-04-10T22:08:50Z,2019-04-10T22:53:27Z,MERGED,True,55,31,1,https://github.com/emersonknapp,"Refactor QoS Python-C conversion into less error-prone pattern (pre-QoS, standalone)",5,[],https://github.com/ros2/rclpy/pull/307,https://github.com/emersonknapp,5,https://github.com/ros2/rclpy/pull/307#issuecomment-481482530,"The manual ordering of DECREFs is unwieldy - refactor to a simpler pattern that is easier to extend.
I am adding new policy types for QoS - which will utilize this change to make it much easier to do so.
Signed-off-by: Emerson Knapp eknapp@amazon.com","@tfoote this PR is prerequisite for upcoming QoS work, I'm not sure who the best person is to review rclpy changes - can we ping them?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,307,2019-04-04T20:36:18Z,2019-04-10T22:08:50Z,2019-04-10T22:53:27Z,MERGED,True,55,31,1,https://github.com/emersonknapp,"Refactor QoS Python-C conversion into less error-prone pattern (pre-QoS, standalone)",5,[],https://github.com/ros2/rclpy/pull/307,https://github.com/jacobperron,6,https://github.com/ros2/rclpy/pull/307#issuecomment-481832397,"The manual ordering of DECREFs is unwieldy - refactor to a simpler pattern that is easier to extend.
I am adding new policy types for QoS - which will utilize this change to make it much easier to do so.
Signed-off-by: Emerson Knapp eknapp@amazon.com","Linux 
Linux-aarch64 
macOS 
Windows 

(edit: failing tests are from an unrelated issue)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,308,2019-04-05T01:27:40Z,2019-04-19T18:02:45Z,2019-04-19T18:02:50Z,MERGED,True,466,227,10,https://github.com/sloretz,Every executor gets its own SIGINT guard condition,25,[],https://github.com/ros2/rclpy/pull/308,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/308,"Implements @wjwwood's comment #192 (comment)
This moves signal handling code to a separate module _rclpy_signal_handler. Every executor adds a guard condition to a global list. The signal handler triggers all guard conditions in that list.
Resolves #192, and because of that this PR also allows multiple executors to wait in parallel again. This also resolves #287 by having each executor reuse the same guard condition.
It does not change the updated behavior of #253 described here: #253 (comment) . Maybe that should be an issue downstream of rclpy?","Implements @wjwwood's comment #192 (comment)
This moves signal handling code to a separate module _rclpy_signal_handler. Every executor adds a guard condition to a global list. The signal handler triggers all guard conditions in that list.
Resolves #192, and because of that this PR also allows multiple executors to wait in parallel again. This also resolves #287 by having each executor reuse the same guard condition.
It does not change the updated behavior of #253 described here: #253 (comment) . Maybe that should be an issue downstream of rclpy?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,308,2019-04-05T01:27:40Z,2019-04-19T18:02:45Z,2019-04-19T18:02:50Z,MERGED,True,466,227,10,https://github.com/sloretz,Every executor gets its own SIGINT guard condition,25,[],https://github.com/ros2/rclpy/pull/308,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/308#issuecomment-480118644,"Implements @wjwwood's comment #192 (comment)
This moves signal handling code to a separate module _rclpy_signal_handler. Every executor adds a guard condition to a global list. The signal handler triggers all guard conditions in that list.
Resolves #192, and because of that this PR also allows multiple executors to wait in parallel again. This also resolves #287 by having each executor reuse the same guard condition.
It does not change the updated behavior of #253 described here: #253 (comment) . Maybe that should be an issue downstream of rclpy?","CI (testing packages above rclpy, spelled --packages-above correctly this time)

Linux 

rqt_py_common.test.test_rqt_common_unit.TestMessageTreeModel.test_path_names
test_cli.test_params_yaml.xunit.missing_result


Linux-aarch64 

rqt_py_common.test.test_rqt_common_unit.TestMessageTreeModel.test_path_names


macOS 

rqt_py_common.test.test_rqt_common_unit.TestMessageTreeModel.test_path_names


Windows 

rqt_py_common.test.test_rqt_common_unit.TestMessageTreeModel.test_path_names
test_cli.test_params_yaml.xunit.missing_result",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,308,2019-04-05T01:27:40Z,2019-04-19T18:02:45Z,2019-04-19T18:02:50Z,MERGED,True,466,227,10,https://github.com/sloretz,Every executor gets its own SIGINT guard condition,25,[],https://github.com/ros2/rclpy/pull/308,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/308#issuecomment-480387751,"Implements @wjwwood's comment #192 (comment)
This moves signal handling code to a separate module _rclpy_signal_handler. Every executor adds a guard condition to a global list. The signal handler triggers all guard conditions in that list.
Resolves #192, and because of that this PR also allows multiple executors to wait in parallel again. This also resolves #287 by having each executor reuse the same guard condition.
It does not change the updated behavior of #253 described here: #253 (comment) . Maybe that should be an issue downstream of rclpy?","CI looks good, just failures from ros2/build_farmer#166 and ros-visualization/rqt#192",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,308,2019-04-05T01:27:40Z,2019-04-19T18:02:45Z,2019-04-19T18:02:50Z,MERGED,True,466,227,10,https://github.com/sloretz,Every executor gets its own SIGINT guard condition,25,[],https://github.com/ros2/rclpy/pull/308,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/308#issuecomment-480879369,"Implements @wjwwood's comment #192 (comment)
This moves signal handling code to a separate module _rclpy_signal_handler. Every executor adds a guard condition to a global list. The signal handler triggers all guard conditions in that list.
Resolves #192, and because of that this PR also allows multiple executors to wait in parallel again. This also resolves #287 by having each executor reuse the same guard condition.
It does not change the updated behavior of #253 described here: #253 (comment) . Maybe that should be an issue downstream of rclpy?","how's that this is both thread- and signal-safe? Specially when it comes to manipulating a global list. Am I missing something?

This relies on the GIL for thread safety. Neither function that edits the list releases the GIL. As long as they don't invoke anything that can call arbitrary python code (like getting an attribute off a python object, because it could have a custom __getattr__ that releases the GIL), there's no way these could touch the list at the same time.
Since the signal handler only reads the list, this tries to make sure g_guard_conditions can be read no matter where the code is interrupted. Edits are done by copying the current list, manipulating the copy, then swapping the original with the copy (assumes assigning to the global pointer is atomic so the signal handler doesn't fetch some invalid memory address).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,308,2019-04-05T01:27:40Z,2019-04-19T18:02:45Z,2019-04-19T18:02:50Z,MERGED,True,466,227,10,https://github.com/sloretz,Every executor gets its own SIGINT guard condition,25,[],https://github.com/ros2/rclpy/pull/308,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/308#issuecomment-480914154,"Implements @wjwwood's comment #192 (comment)
This moves signal handling code to a separate module _rclpy_signal_handler. Every executor adds a guard condition to a global list. The signal handler triggers all guard conditions in that list.
Resolves #192, and because of that this PR also allows multiple executors to wait in parallel again. This also resolves #287 by having each executor reuse the same guard condition.
It does not change the updated behavior of #253 described here: #253 (comment) . Maybe that should be an issue downstream of rclpy?","CI

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,308,2019-04-05T01:27:40Z,2019-04-19T18:02:45Z,2019-04-19T18:02:50Z,MERGED,True,466,227,10,https://github.com/sloretz,Every executor gets its own SIGINT guard condition,25,[],https://github.com/ros2/rclpy/pull/308,https://github.com/hidmic,6,https://github.com/ros2/rclpy/pull/308#issuecomment-480917116,"Implements @wjwwood's comment #192 (comment)
This moves signal handling code to a separate module _rclpy_signal_handler. Every executor adds a guard condition to a global list. The signal handler triggers all guard conditions in that list.
Resolves #192, and because of that this PR also allows multiple executors to wait in parallel again. This also resolves #287 by having each executor reuse the same guard condition.
It does not change the updated behavior of #253 described here: #253 (comment) . Maybe that should be an issue downstream of rclpy?","This relies on the GIL for thread safety.

I see. I thought we were not relying on the GIL on purpose. I've seen locks here and there (not in this PR) that seemed redundant with the GIL. Anyways, sounds good.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,308,2019-04-05T01:27:40Z,2019-04-19T18:02:45Z,2019-04-19T18:02:50Z,MERGED,True,466,227,10,https://github.com/sloretz,Every executor gets its own SIGINT guard condition,25,[],https://github.com/ros2/rclpy/pull/308,https://github.com/sloretz,7,https://github.com/ros2/rclpy/pull/308#issuecomment-480924312,"Implements @wjwwood's comment #192 (comment)
This moves signal handling code to a separate module _rclpy_signal_handler. Every executor adds a guard condition to a global list. The signal handler triggers all guard conditions in that list.
Resolves #192, and because of that this PR also allows multiple executors to wait in parallel again. This also resolves #287 by having each executor reuse the same guard condition.
It does not change the updated behavior of #253 described here: #253 (comment) . Maybe that should be an issue downstream of rclpy?","CI (testing packages above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,308,2019-04-05T01:27:40Z,2019-04-19T18:02:45Z,2019-04-19T18:02:50Z,MERGED,True,466,227,10,https://github.com/sloretz,Every executor gets its own SIGINT guard condition,25,[],https://github.com/ros2/rclpy/pull/308,https://github.com/sloretz,8,https://github.com/ros2/rclpy/pull/308#issuecomment-480930956,"Implements @wjwwood's comment #192 (comment)
This moves signal handling code to a separate module _rclpy_signal_handler. Every executor adds a guard condition to a global list. The signal handler triggers all guard conditions in that list.
Resolves #192, and because of that this PR also allows multiple executors to wait in parallel again. This also resolves #287 by having each executor reuse the same guard condition.
It does not change the updated behavior of #253 described here: #253 (comment) . Maybe that should be an issue downstream of rclpy?","CI (testing packages above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,308,2019-04-05T01:27:40Z,2019-04-19T18:02:45Z,2019-04-19T18:02:50Z,MERGED,True,466,227,10,https://github.com/sloretz,Every executor gets its own SIGINT guard condition,25,[],https://github.com/ros2/rclpy/pull/308,https://github.com/sloretz,9,https://github.com/ros2/rclpy/pull/308#issuecomment-481823144,"Implements @wjwwood's comment #192 (comment)
This moves signal handling code to a separate module _rclpy_signal_handler. Every executor adds a guard condition to a global list. The signal handler triggers all guard conditions in that list.
Resolves #192, and because of that this PR also allows multiple executors to wait in parallel again. This also resolves #287 by having each executor reuse the same guard condition.
It does not change the updated behavior of #253 described here: #253 (comment) . Maybe that should be an issue downstream of rclpy?","CI (test packages above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,308,2019-04-05T01:27:40Z,2019-04-19T18:02:45Z,2019-04-19T18:02:50Z,MERGED,True,466,227,10,https://github.com/sloretz,Every executor gets its own SIGINT guard condition,25,[],https://github.com/ros2/rclpy/pull/308,https://github.com/sloretz,10,https://github.com/ros2/rclpy/pull/308#issuecomment-481902350,"Implements @wjwwood's comment #192 (comment)
This moves signal handling code to a separate module _rclpy_signal_handler. Every executor adds a guard condition to a global list. The signal handler triggers all guard conditions in that list.
Resolves #192, and because of that this PR also allows multiple executors to wait in parallel again. This also resolves #287 by having each executor reuse the same guard condition.
It does not change the updated behavior of #253 described here: #253 (comment) . Maybe that should be an issue downstream of rclpy?",Blocked by ros2/rcutils#150,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,308,2019-04-05T01:27:40Z,2019-04-19T18:02:45Z,2019-04-19T18:02:50Z,MERGED,True,466,227,10,https://github.com/sloretz,Every executor gets its own SIGINT guard condition,25,[],https://github.com/ros2/rclpy/pull/308,https://github.com/sloretz,11,https://github.com/ros2/rclpy/pull/308#issuecomment-482155771,"Implements @wjwwood's comment #192 (comment)
This moves signal handling code to a separate module _rclpy_signal_handler. Every executor adds a guard condition to a global list. The signal handler triggers all guard conditions in that list.
Resolves #192, and because of that this PR also allows multiple executors to wait in parallel again. This also resolves #287 by having each executor reuse the same guard condition.
It does not change the updated behavior of #253 described here: #253 (comment) . Maybe that should be an issue downstream of rclpy?",Quick check on windows with ros2/rcutils#150 to make sure warnings are gone,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,308,2019-04-05T01:27:40Z,2019-04-19T18:02:45Z,2019-04-19T18:02:50Z,MERGED,True,466,227,10,https://github.com/sloretz,Every executor gets its own SIGINT guard condition,25,[],https://github.com/ros2/rclpy/pull/308,https://github.com/sloretz,12,https://github.com/ros2/rclpy/pull/308#issuecomment-482355832,"Implements @wjwwood's comment #192 (comment)
This moves signal handling code to a separate module _rclpy_signal_handler. Every executor adds a guard condition to a global list. The signal handler triggers all guard conditions in that list.
Resolves #192, and because of that this PR also allows multiple executors to wait in parallel again. This also resolves #287 by having each executor reuse the same guard condition.
It does not change the updated behavior of #253 described here: #253 (comment) . Maybe that should be an issue downstream of rclpy?","CI and moving back to review

Linux 

test_params_yaml ros2/build_farmer#166


Linux-aarch64 

test_params_yaml ros2/build_farmer#166


macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,308,2019-04-05T01:27:40Z,2019-04-19T18:02:45Z,2019-04-19T18:02:50Z,MERGED,True,466,227,10,https://github.com/sloretz,Every executor gets its own SIGINT guard condition,25,[],https://github.com/ros2/rclpy/pull/308,https://github.com/sloretz,13,https://github.com/ros2/rclpy/pull/308#issuecomment-484943739,"Implements @wjwwood's comment #192 (comment)
This moves signal handling code to a separate module _rclpy_signal_handler. Every executor adds a guard condition to a global list. The signal handler triggers all guard conditions in that list.
Resolves #192, and because of that this PR also allows multiple executors to wait in parallel again. This also resolves #287 by having each executor reuse the same guard condition.
It does not change the updated behavior of #253 described here: #253 (comment) . Maybe that should be an issue downstream of rclpy?","CI (testing packages above rclpy)

Linux  (test_params_yaml ros2/build_farmer#166)
Linux-aarch64  (test_params_yaml ros2/build_farmer#166)
macOS 
Windows  (test_params_yaml ros2/build_farmer#166)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,308,2019-04-05T01:27:40Z,2019-04-19T18:02:45Z,2019-04-19T18:02:50Z,MERGED,True,466,227,10,https://github.com/sloretz,Every executor gets its own SIGINT guard condition,25,[],https://github.com/ros2/rclpy/pull/308,https://github.com/sloretz,14,https://github.com/ros2/rclpy/pull/308#issuecomment-484972824,"Implements @wjwwood's comment #192 (comment)
This moves signal handling code to a separate module _rclpy_signal_handler. Every executor adds a guard condition to a global list. The signal handler triggers all guard conditions in that list.
Resolves #192, and because of that this PR also allows multiple executors to wait in parallel again. This also resolves #287 by having each executor reuse the same guard condition.
It does not change the updated behavior of #253 described here: #253 (comment) . Maybe that should be an issue downstream of rclpy?",CI looks good. Since the only changes were addressing CI comments I'll assume @dirk-thomas's approval still applies and merge this.,True,{'THUMBS_UP': ['https://github.com/dirk-thomas']}
ros2/rclpy,https://github.com/ros2/rclpy,309,2019-04-05T20:32:56Z,2019-04-08T15:29:40Z,2019-04-08T15:29:44Z,MERGED,True,53,3,2,https://github.com/sloretz,Executor exits immediately when shut down,2,[],https://github.com/ros2/rclpy/pull/309,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/309,This makes executor.shutdown() trigger the executor's guard condition. Without this the executor could block forever if no more work comes in.,This makes executor.shutdown() trigger the executor's guard condition. Without this the executor could block forever if no more work comes in.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,309,2019-04-05T20:32:56Z,2019-04-08T15:29:40Z,2019-04-08T15:29:44Z,MERGED,True,53,3,2,https://github.com/sloretz,Executor exits immediately when shut down,2,[],https://github.com/ros2/rclpy/pull/309,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/309#issuecomment-480414384,This makes executor.shutdown() trigger the executor's guard condition. Without this the executor could block forever if no more work comes in.,"CI (Packages above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,310,2019-04-05T20:54:06Z,2019-04-08T15:30:44Z,2019-04-08T15:30:48Z,MERGED,True,37,7,2,https://github.com/sloretz,Refresh nodes when executor is woken,1,[],https://github.com/ros2/rclpy/pull/310,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/310,"This fixes bug where executor would rebuild wait_set without adding or
removing nodes. This happened when an executor was waiting and had not
executed any work yet at the time the node was added or removed.","This fixes bug where executor would rebuild wait_set without adding or
removing nodes. This happened when an executor was waiting and had not
executed any work yet at the time the node was added or removed.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,310,2019-04-05T20:54:06Z,2019-04-08T15:30:44Z,2019-04-08T15:30:48Z,MERGED,True,37,7,2,https://github.com/sloretz,Refresh nodes when executor is woken,1,[],https://github.com/ros2/rclpy/pull/310,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/310#issuecomment-480418889,"This fixes bug where executor would rebuild wait_set without adding or
removing nodes. This happened when an executor was waiting and had not
executed any work yet at the time the node was added or removed.","CI (test packages above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,311,2019-04-10T00:06:27Z,2019-04-10T18:17:19Z,2019-04-10T22:53:39Z,MERGED,True,3,0,1,https://github.com/emersonknapp,"Set QoS profile to default values (pre-QoS, standalone)",1,[],https://github.com/ros2/rclpy/pull/311,https://github.com/emersonknapp,1,https://github.com/ros2/rclpy/pull/311,"Set allocated rmw_qos_profile_t to the default, to future-proof against uninitialized data if new fields are added. E.g. if a field is added to rmw_qos_profile_t and that field is not immediately exposed in rclpy, the value of that field will be garbage data, and be passed all the way to the RMW implementation.
Signed-off-by: Emerson Knapp eknapp@amazon.com","Set allocated rmw_qos_profile_t to the default, to future-proof against uninitialized data if new fields are added. E.g. if a field is added to rmw_qos_profile_t and that field is not immediately exposed in rclpy, the value of that field will be garbage data, and be passed all the way to the RMW implementation.
Signed-off-by: Emerson Knapp eknapp@amazon.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,311,2019-04-10T00:06:27Z,2019-04-10T18:17:19Z,2019-04-10T22:53:39Z,MERGED,True,3,0,1,https://github.com/emersonknapp,"Set QoS profile to default values (pre-QoS, standalone)",1,[],https://github.com/ros2/rclpy/pull/311,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/311#issuecomment-481734486,"Set allocated rmw_qos_profile_t to the default, to future-proof against uninitialized data if new fields are added. E.g. if a field is added to rmw_qos_profile_t and that field is not immediately exposed in rclpy, the value of that field will be garbage data, and be passed all the way to the RMW implementation.
Signed-off-by: Emerson Knapp eknapp@amazon.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,312,2019-04-10T22:46:26Z,2019-04-26T21:01:41Z,2019-04-26T21:08:56Z,MERGED,True,336,14,7,https://github.com/emersonknapp,"QoS - Expose Lifespan, Deadline, and Liveliness policy settings",5,[],https://github.com/ros2/rclpy/pull/312,https://github.com/emersonknapp,1,https://github.com/ros2/rclpy/pull/312,"Depends on ros2/rmw#173
Expose the new QoS policy settings for the Python client. Needs rmw/types.h from the above mentioned PR
Signed-off-by: Emerson Knapp eknapp@amazon.com","Depends on ros2/rmw#173
Expose the new QoS policy settings for the Python client. Needs rmw/types.h from the above mentioned PR
Signed-off-by: Emerson Knapp eknapp@amazon.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,312,2019-04-10T22:46:26Z,2019-04-26T21:01:41Z,2019-04-26T21:08:56Z,MERGED,True,336,14,7,https://github.com/emersonknapp,"QoS - Expose Lifespan, Deadline, and Liveliness policy settings",5,[],https://github.com/ros2/rclpy/pull/312,https://github.com/emersonknapp,2,https://github.com/ros2/rclpy/pull/312#issuecomment-482674672,"Depends on ros2/rmw#173
Expose the new QoS policy settings for the Python client. Needs rmw/types.h from the above mentioned PR
Signed-off-by: Emerson Knapp eknapp@amazon.com","@wjwwood this is ready for review, can we update the label/waffle column",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,312,2019-04-10T22:46:26Z,2019-04-26T21:01:41Z,2019-04-26T21:08:56Z,MERGED,True,336,14,7,https://github.com/emersonknapp,"QoS - Expose Lifespan, Deadline, and Liveliness policy settings",5,[],https://github.com/ros2/rclpy/pull/312,https://github.com/emersonknapp,3,https://github.com/ros2/rclpy/pull/312#issuecomment-486448955,"Depends on ros2/rmw#173
Expose the new QoS policy settings for the Python client. Needs rmw/types.h from the above mentioned PR
Signed-off-by: Emerson Knapp eknapp@amazon.com","Thanks for the feedback! I will address the comments. There are no other dependencies than the one listed in the description, and that's been merged. This PR stands alone.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,312,2019-04-10T22:46:26Z,2019-04-26T21:01:41Z,2019-04-26T21:08:56Z,MERGED,True,336,14,7,https://github.com/emersonknapp,"QoS - Expose Lifespan, Deadline, and Liveliness policy settings",5,[],https://github.com/ros2/rclpy/pull/312,https://github.com/emersonknapp,4,https://github.com/ros2/rclpy/pull/312#issuecomment-486851586,"Depends on ros2/rmw#173
Expose the new QoS policy settings for the Python client. Needs rmw/types.h from the above mentioned PR
Signed-off-by: Emerson Knapp eknapp@amazon.com","@sloretz I've updated to address your comments - did a bit of restructuring to make the code less error prone. Additionally, exposed an API and used that to add some unit tests for the new type conversions.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,312,2019-04-10T22:46:26Z,2019-04-26T21:01:41Z,2019-04-26T21:08:56Z,MERGED,True,336,14,7,https://github.com/emersonknapp,"QoS - Expose Lifespan, Deadline, and Liveliness policy settings",5,[],https://github.com/ros2/rclpy/pull/312,https://github.com/emersonknapp,5,https://github.com/ros2/rclpy/pull/312#issuecomment-486855610,"Depends on ros2/rmw#173
Expose the new QoS policy settings for the Python client. Needs rmw/types.h from the above mentioned PR
Signed-off-by: Emerson Knapp eknapp@amazon.com","@thomas-moulard please trigger CI for this PR
Gist: https://gist.githubusercontent.com/emersonknapp/0c3f022bd8104fa9ed39610501e24dfd/raw/001c650b781a8cccbff48dc801aad94128798075/ros2.repos
Additional BUILD flags: --packages-up-to rclpy
Additional TEST flags: --packages-select rclpy
CI Job: ci_launcher",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,312,2019-04-10T22:46:26Z,2019-04-26T21:01:41Z,2019-04-26T21:08:56Z,MERGED,True,336,14,7,https://github.com/emersonknapp,"QoS - Expose Lifespan, Deadline, and Liveliness policy settings",5,[],https://github.com/ros2/rclpy/pull/312,https://github.com/thomas-moulard,6,https://github.com/ros2/rclpy/pull/312#issuecomment-486863186,"Depends on ros2/rmw#173
Expose the new QoS policy settings for the Python client. Needs rmw/types.h from the above mentioned PR
Signed-off-by: Emerson Knapp eknapp@amazon.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,312,2019-04-10T22:46:26Z,2019-04-26T21:01:41Z,2019-04-26T21:08:56Z,MERGED,True,336,14,7,https://github.com/emersonknapp,"QoS - Expose Lifespan, Deadline, and Liveliness policy settings",5,[],https://github.com/ros2/rclpy/pull/312,https://github.com/emersonknapp,7,https://github.com/ros2/rclpy/pull/312#issuecomment-486881757,"Depends on ros2/rmw#173
Expose the new QoS policy settings for the Python client. Needs rmw/types.h from the above mentioned PR
Signed-off-by: Emerson Knapp eknapp@amazon.com",Windooooowwwwwwwws - I'll have to spin up a windows instance tomorrow and try this out... @sloretz any ideas about the 32-bit int issue in converting between layers?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,312,2019-04-10T22:46:26Z,2019-04-26T21:01:41Z,2019-04-26T21:08:56Z,MERGED,True,336,14,7,https://github.com/emersonknapp,"QoS - Expose Lifespan, Deadline, and Liveliness policy settings",5,[],https://github.com/ros2/rclpy/pull/312,https://github.com/thomas-moulard,8,https://github.com/ros2/rclpy/pull/312#issuecomment-487193574,"Depends on ros2/rmw#173
Expose the new QoS policy settings for the Python client. Needs rmw/types.h from the above mentioned PR
Signed-off-by: Emerson Knapp eknapp@amazon.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,313,2019-04-16T23:52:36Z,2019-05-03T21:43:24Z,2019-05-03T21:43:28Z,MERGED,True,69,0,3,https://github.com/emersonknapp,QoS - Expose the assert_liveliness API for Publishers and Nodes,2,[],https://github.com/ros2/rclpy/pull/313,https://github.com/emersonknapp,1,https://github.com/ros2/rclpy/pull/313,"Depends on ros2/rmw#171
Expose the rcl assert_liveliness APIs for Nodes and Publishers
Signed-off-by: Emerson Knapp eknapp@amazon.com","Depends on ros2/rmw#171
Expose the rcl assert_liveliness APIs for Nodes and Publishers
Signed-off-by: Emerson Knapp eknapp@amazon.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,313,2019-04-16T23:52:36Z,2019-05-03T21:43:24Z,2019-05-03T21:43:28Z,MERGED,True,69,0,3,https://github.com/emersonknapp,QoS - Expose the assert_liveliness API for Publishers and Nodes,2,[],https://github.com/ros2/rclpy/pull/313,https://github.com/nburek,2,https://github.com/ros2/rclpy/pull/313#issuecomment-484968315,"Depends on ros2/rmw#171
Expose the rcl assert_liveliness APIs for Nodes and Publishers
Signed-off-by: Emerson Knapp eknapp@amazon.com",@wjwwood This is ready for review. Can you please update the label? Thank you.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,313,2019-04-16T23:52:36Z,2019-05-03T21:43:24Z,2019-05-03T21:43:28Z,MERGED,True,69,0,3,https://github.com/emersonknapp,QoS - Expose the assert_liveliness API for Publishers and Nodes,2,[],https://github.com/ros2/rclpy/pull/313,https://github.com/emersonknapp,3,https://github.com/ros2/rclpy/pull/313#issuecomment-486472519,"Depends on ros2/rmw#171
Expose the rcl assert_liveliness APIs for Nodes and Publishers
Signed-off-by: Emerson Knapp eknapp@amazon.com",Thanks for the feedback! I've addressed the comments in a pushed commit. If we're happy with how this looks - we can leave it on deck for CI for when the bundle of dependencies ros2/rmw#171 is merged.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,313,2019-04-16T23:52:36Z,2019-05-03T21:43:24Z,2019-05-03T21:43:28Z,MERGED,True,69,0,3,https://github.com/emersonknapp,QoS - Expose the assert_liveliness API for Publishers and Nodes,2,[],https://github.com/ros2/rclpy/pull/313,https://github.com/emersonknapp,4,https://github.com/ros2/rclpy/pull/313#issuecomment-489178759,"Depends on ros2/rmw#171
Expose the rcl assert_liveliness APIs for Nodes and Publishers
Signed-off-by: Emerson Knapp eknapp@amazon.com","@thomas-moulard - please run the following CI job:

Gist file: https://gist.githubusercontent.com/emersonknapp/02889df53fbb6e7b06ebda807d930d15/raw/5a135ec8266374e6b9e7ae3a2e54b4d0a7fa67b9/ros2.repos
Additional BUILD flags: --packages-up-to rclpy
Additional TEST flags: --packages-select rclpy
CI Job: ci_launcher",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,313,2019-04-16T23:52:36Z,2019-05-03T21:43:24Z,2019-05-03T21:43:28Z,MERGED,True,69,0,3,https://github.com/emersonknapp,QoS - Expose the assert_liveliness API for Publishers and Nodes,2,[],https://github.com/ros2/rclpy/pull/313,https://github.com/thomas-moulard,5,https://github.com/ros2/rclpy/pull/313#issuecomment-489185302,"Depends on ros2/rmw#171
Expose the rcl assert_liveliness APIs for Nodes and Publishers
Signed-off-by: Emerson Knapp eknapp@amazon.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,313,2019-04-16T23:52:36Z,2019-05-03T21:43:24Z,2019-05-03T21:43:28Z,MERGED,True,69,0,3,https://github.com/emersonknapp,QoS - Expose the assert_liveliness API for Publishers and Nodes,2,[],https://github.com/ros2/rclpy/pull/313,https://github.com/emersonknapp,6,https://github.com/ros2/rclpy/pull/313#issuecomment-489198684,"Depends on ros2/rmw#171
Expose the rcl assert_liveliness APIs for Nodes and Publishers
Signed-off-by: Emerson Knapp eknapp@amazon.com","@thomas-moulard I messed up and pointed that CI against the other Python PR - I have updated the existing Gist to be correct - here it is. So sorry about that
https://gist.githubusercontent.com/emersonknapp/02889df53fbb6e7b06ebda807d930d15/raw/789129bd6b869b0bbc16a5f1f2b890da87e711c3/ros2.repos
You can cancel any remaining running builds, they'll fail too.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,313,2019-04-16T23:52:36Z,2019-05-03T21:43:24Z,2019-05-03T21:43:28Z,MERGED,True,69,0,3,https://github.com/emersonknapp,QoS - Expose the assert_liveliness API for Publishers and Nodes,2,[],https://github.com/ros2/rclpy/pull/313,https://github.com/tfoote,7,https://github.com/ros2/rclpy/pull/313#issuecomment-489201180,"Depends on ros2/rmw#171
Expose the rcl assert_liveliness APIs for Nodes and Publishers
Signed-off-by: Emerson Knapp eknapp@amazon.com","Retriggered with the updated repos file:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,313,2019-04-16T23:52:36Z,2019-05-03T21:43:24Z,2019-05-03T21:43:28Z,MERGED,True,69,0,3,https://github.com/emersonknapp,QoS - Expose the assert_liveliness API for Publishers and Nodes,2,[],https://github.com/ros2/rclpy/pull/313,https://github.com/sloretz,8,https://github.com/ros2/rclpy/pull/313#issuecomment-489235465,"Depends on ros2/rmw#171
Expose the rcl assert_liveliness APIs for Nodes and Publishers
Signed-off-by: Emerson Knapp eknapp@amazon.com","CI (Testing just rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{'HOORAY': ['https://github.com/emersonknapp']}
ros2/rclpy,https://github.com/ros2/rclpy,313,2019-04-16T23:52:36Z,2019-05-03T21:43:24Z,2019-05-03T21:43:28Z,MERGED,True,69,0,3,https://github.com/emersonknapp,QoS - Expose the assert_liveliness API for Publishers and Nodes,2,[],https://github.com/ros2/rclpy/pull/313,https://github.com/emersonknapp,9,https://github.com/ros2/rclpy/pull/313#issuecomment-489242369,"Depends on ros2/rmw#171
Expose the rcl assert_liveliness APIs for Nodes and Publishers
Signed-off-by: Emerson Knapp eknapp@amazon.com",@sloretz hurray!,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,313,2019-04-16T23:52:36Z,2019-05-03T21:43:24Z,2019-05-03T21:43:28Z,MERGED,True,69,0,3,https://github.com/emersonknapp,QoS - Expose the assert_liveliness API for Publishers and Nodes,2,[],https://github.com/ros2/rclpy/pull/313,https://github.com/sloretz,10,https://github.com/ros2/rclpy/pull/313#issuecomment-489249062,"Depends on ros2/rmw#171
Expose the rcl assert_liveliness APIs for Nodes and Publishers
Signed-off-by: Emerson Knapp eknapp@amazon.com",Thanks for the PR!,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,315,2019-04-17T15:36:43Z,2019-04-17T18:45:48Z,2019-04-17T18:45:53Z,MERGED,True,7,1,2,https://github.com/dirk-thomas,add missing error handling and cleanup,1,[],https://github.com/ros2/rclpy/pull/315,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/315,"Just found these while debugging something else.

Linux 
Linux-aarch64 
macOS 
Windows","Just found these while debugging something else.

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/emersonknapp,1,https://github.com/ros2/rclpy/pull/316,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/316#issuecomment-486868195,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.",@emersonknapp Looks like there are merge conflicts,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/emersonknapp,3,https://github.com/ros2/rclpy/pull/316#issuecomment-486881586,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.",Added new commit to refactor to use the new Subscription+Handle stuff properly,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/emersonknapp,4,https://github.com/ros2/rclpy/pull/316#issuecomment-487783353,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","@sloretz when you get a chance, would love feedback on this PR",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/emersonknapp,5,https://github.com/ros2/rclpy/pull/316#issuecomment-488792761,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","@sloretz thanks for the feeback, I am trying to address these as quickly as possible today because we want to get this through for the API freeze today. The part that will take the most time is using the new Handle type, it is a good change but definitely caught me unprepared.

Are you planning on merging any more changes that would affect this feature?
Will you be available to review this later this afternoon so that we can push it through once the dependency is merged?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/sloretz,6,https://github.com/ros2/rclpy/pull/316#issuecomment-488808232,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","Are you planning on merging any more changes that would affect this feature?

No changes are planned. I would like to add API to the Waitable interface to make destroying them thread safe too, but I doubt I will be able to work on that before Dashing is released.

Will you be available to review this later this afternoon so that we can push it through once the dependency is merged?

Yes",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/emersonknapp,7,https://github.com/ros2/rclpy/pull/316#issuecomment-488851464,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","@sloretz I've updated, tests are passing locally. I will have to do a rebase when https://waffle.io/ros2/ros2/cards/5c9e5639f2c40c0066440aba is merged (because of  #305) but it should affect very little of what's here - a few lines.
Will I need to do any further restructuring of this?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/emersonknapp,8,https://github.com/ros2/rclpy/pull/316#issuecomment-488874064,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","@sloretz thanks - it seems like it'd be hard to run CI on this change until ros2/rmw#171 (comment) this batch passes and is merged first, since these features depend on those new APIs from rcl and rmw, and I'm not sure I'd trust a CI run against the pre-merged PR branches.
Got my fingers crossedon that build.
If you need to get some other things under this that are small (saw the comment from the other one), it should be fine - I will be doing the one final rebase for this, and that conflict looks trivial to resolve.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/emersonknapp,9,https://github.com/ros2/rclpy/pull/316#issuecomment-488880697,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.",While wringing my hands over the other ci - addressed the nitpicks,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/emersonknapp,10,https://github.com/ros2/rclpy/pull/316#issuecomment-489199837,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","@thomas-moulard - please run the following CI job:
NOTE - it contains the changes for this PR plus its two new dependencies
ros2/rcl#432
ros2/rmw_fastrtps#276

Gist file: https://gist.githubusercontent.com/emersonknapp/67d93f9e90183987832715b5979640e8/raw/e75240e9745803f9f8fa09632f997cd07ce95f83/qos-4-callbacks.repos
Additional BUILD flags: --packages-up-to rclpy
Additional TEST flags: --packages-select rclpy
CI Job: ci_launcher",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/thomas-moulard,11,https://github.com/ros2/rclpy/pull/316#issuecomment-489222936,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/sloretz,12,https://github.com/ros2/rclpy/pull/316#issuecomment-489259435,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","CI (testing just rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/sloretz,13,https://github.com/ros2/rclpy/pull/316#issuecomment-489275464,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.",@emersonknapp Looks like test_qos_event.py is crashing on OSX https://ci.ros2.org/job/ci_osx/5715/testReport/junit/(root)/projectroot/test_qos_event/ . Mind taking a look?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/rutvih,14,https://github.com/ros2/rclpy/pull/316#issuecomment-489680224,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","@emersonknapp Looks like test_qos_event.py is crashing on OSX https://ci.ros2.org/job/ci_osx/5715/testReport/junit/(root)/projectroot/test_qos_event/ . Mind taking a look?

@sloretz @emersonknapp is on vacation today. @mm318 from our team will take a look at this and address comments.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/emersonknapp,15,https://github.com/ros2/rclpy/pull/316#issuecomment-490273703,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","Well - it seems to be that trying on OSX to PyArg_ParseTuple(""OOk"") on an IntEnum type from Python overflows 32 bits into the second O from the k. That makes it much more clear why all the other enum-based APIs use PY_LONG_LONG instead of native int types directly. (thanks @nburek for the overflow insight). Pushed a new commit to follow that pattern. @thomas-moulard or @sloretz can you please re-trigger CI with the latest version?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/thomas-moulard,16,https://github.com/ros2/rclpy/pull/316#issuecomment-490292955,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/emersonknapp,17,https://github.com/ros2/rclpy/pull/316#issuecomment-490294577,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","The gist rotted after merging the dependent PRs - I have updated and the latest version of the gist passes import, build, test from scratch locally.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/thomas-moulard,18,https://github.com/ros2/rclpy/pull/316#issuecomment-490296114,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/emersonknapp,19,https://github.com/ros2/rclpy/pull/316#issuecomment-490296971,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","@thomas-moulard - recreated a fresh gist since the update seems to have not worked for some reason
Gist file: https://gist.githubusercontent.com/emersonknapp/ec686aca278eb8896b1d3415a19ec169/raw/5a135ec8266374e6b9e7ae3a2e54b4d0a7fa67b9/ros2.repos
Additional BUILD flags: --packages-up-to rclpy
Additional TEST flags: --packages-select rclpy
CI Job: ci_launcher",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/thomas-moulard,20,https://github.com/ros2/rclpy/pull/316#issuecomment-490297834,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/emersonknapp,21,https://github.com/ros2/rclpy/pull/316#issuecomment-490302704,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.",@sloretz @wjwwood Can we merge this PR? The fix was the right one so we're all verified now - this is the final API for the Dashing QoS features.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/wjwwood,22,https://github.com/ros2/rclpy/pull/316#issuecomment-490306874,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","Yes, but I want to run a full CI (not stopping at rclpy) on at least Linux to make sure nothing else is broken. As you can imagine, breaking CI right now is high cost.
This CI builds everything, but without Connext, so it should be a bit faster than normal, and tests --packages-above rclpy:",True,{'THUMBS_UP': ['https://github.com/emersonknapp']}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/emersonknapp,23,https://github.com/ros2/rclpy/pull/316#issuecomment-490319573,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","@wjwwood Looks like the only failure is the cli params known issue, is that correct?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/wjwwood,24,https://github.com/ros2/rclpy/pull/316#issuecomment-490356077,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","That's right, but I'm going to hold merging this until tomorrow, since we have some other actual API changes in the pipe. This only adds to the API as far as I can tell.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/emersonknapp,25,https://github.com/ros2/rclpy/pull/316#issuecomment-490513473,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","That's right, it just adds optional kwargs to the create_ functions",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/emersonknapp,26,https://github.com/ros2/rclpy/pull/316#issuecomment-491922676,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.",@wjwwood ok to merge now? Looks like the API freeze board has been closed out,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/wjwwood,27,https://github.com/ros2/rclpy/pull/316#issuecomment-491944660,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","lgtm, but a lot has been merged since the last CI, so I'm running Linux again:

It's possible this needs to be rebased or merged with master.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/emersonknapp,28,https://github.com/ros2/rclpy/pull/316#issuecomment-491976663,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","@wjwwood Ok - rebased - built and tested locally on linux, looks good, can you run that again?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/wjwwood,29,https://github.com/ros2/rclpy/pull/316#issuecomment-491980747,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","Sure thing, thanks for the rebase:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/suab321321,30,https://github.com/ros2/rclpy/pull/316#issuecomment-582019110,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","@emersonknapp could you please brief me what did you do on the backend side(.c files) to achieve?
I m trying to implement this rclnodejs issue RobotWebTools/rclnodejs#492.
:)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/emersonknapp,31,https://github.com/ros2/rclpy/pull/316#issuecomment-582154410,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","@suab321321 do you have a specific question about the code? Most of it is just data type conversions between rcl and the Python layer. The functionality part of it is exposing the new Waitable type rcl_event_t and adding the polling for events.
You can see this PR ros2/rclcpp#695 for how this feature was added to rclcpp, for more context on the pattern.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/suab321321,32,https://github.com/ros2/rclpy/pull/316#issuecomment-582521811,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","@emersonknapp thanks for helping me :).If you could tell me about the hiarchey of this implementation from its core to python side user side api,example how _rclpy.c calls _rclpy_qos_event.c like this a brief word about you did, will be very much helpful :)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/emersonknapp,33,https://github.com/ros2/rclpy/pull/316#issuecomment-582526037,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","https://github.com/ros2/rclpy/pull/316/files?file-filters%5B%5D=.c#diff-80dda03110b5be606b823d6b0558b5c2R40 you can see on this line that the source file is included directly, they are only split for readability.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/suab321321,34,https://github.com/ros2/rclpy/pull/316#issuecomment-586688515,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.",@emersonknapp why qos events are waitables type,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/suab321321,35,https://github.com/ros2/rclpy/pull/316#issuecomment-586729889,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","class QoSEventHandler(Waitable):
    """"""Waitable type to handle QoS events.""""""

    def __init__(
        self,
        *,
        callback_group: CallbackGroup,
        callback: Callable,
        event_type: IntEnum,
        parent_handle: Handle,
    ):
        # Waitable init adds self to callback_group
        super().__init__(callback_group)
        self.event_type = event_type
        self.callback = callback

        self._parent_handle = parent_handle
        with parent_handle as parent_capsule:
            event_capsule = _rclpy.rclpy_create_event(event_type, parent_capsule)
        self._event_handle = Handle(event_capsule)
        self._event_handle.requires(self._parent_handle)
        self._ready_to_take_data = False
        self._event_index = None

file : qos_event.py
@emersonknapp can you please explain what the third last line self._event_handle.requires(self._parent_handle) is doing.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/emersonknapp,36,https://github.com/ros2/rclpy/pull/316#issuecomment-587120946,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","Waitables are used for asynchronous communication. You ""wait"" for things to happen on it. If you familiarize yourself with the rclpy code, you will see that Action Servers and Clients are also Waitables. You add them to a ""wait set"" that is checked during ""spin"" to see if the event has occurred.
For your second question, please look at https://github.com/ros2/rclpy/blob/master/rclpy/rclpy/handle.py#L103 - requires on a Python Capsule Handle means that the Handle does not work without the other entity. In this case, the parent is the subscription or publisher that the QoSEventHandler is attached to. If that parent entity is deleted, this event handler is no longer valid.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/suab321321,37,https://github.com/ros2/rclpy/pull/316#issuecomment-589993535,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","@emersonknapp I just want to know that in _rclpy.c for a timer callback to get executed there is method rcl_timer_call taking rcl_timer_t* as a paramter,so is there any method like this which is used for calling the qos callback? :)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,316,2019-04-18T19:52:31Z,2019-05-13T21:38:20Z,2020-02-24T20:03:57Z,MERGED,True,920,49,10,https://github.com/emersonknapp,QoS - API and implementation for Liveliness and Deadline event callbacks,8,['enhancement'],https://github.com/ros2/rclpy/pull/316,https://github.com/emersonknapp,38,https://github.com/ros2/rclpy/pull/316#issuecomment-590523041,"Depends on ros2/rmw#171
Depends on ros2/rmw_fastrtps#276
Depends on ros2/rcl#432

Present the Python-side API for receiving QoS event callbacks for Liveliness and Deadline QoS policies.
Provide the C-side translation layer to rcl to support that API.

Unit tests are still in progress - but the code is working according to manual testing and is ready for review.","Timers, Subscriptions, Guards, Clients, and Services use an old way of asynchronous communication, they all have special lists that they are held in (https://github.com/ros2/rclpy/blob/master/rclpy/rclpy/executors.py#L589)
QoS Events use the generic Waitable pattern which can hold many types of objects, not just QoS Events. It is checked right before that special cases loop - (https://github.com/ros2/rclpy/blob/master/rclpy/rclpy/executors.py#L579) -
you can see that it checks on every spin loop, if an event is_ready (has an event happened?), then it uses take_data to grab the event data if one is ready. Python side and C side",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,317,2019-04-22T18:27:03Z,2019-04-24T00:17:56Z,2019-04-24T00:18:01Z,MERGED,True,105,2,9,https://github.com/dirk-thomas,enforce correct message type is passed to various API,2,['enhancement'],https://github.com/ros2/rclpy/pull/317,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/317,"Closes #314.
The PR contains two commits:

Adding tests passing an invalid type to the various APIs PR and expecting a TypeError to be raised. CI with these tests failing:  ( intentionally failing tests)
Update the implementation to check the passes type and raise TypeError in case it doesn't match the expected type:","Closes #314.
The PR contains two commits:

Adding tests passing an invalid type to the various APIs PR and expecting a TypeError to be raised. CI with these tests failing:  ( intentionally failing tests)
Update the implementation to check the passes type and raise TypeError in case it doesn't match the expected type:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,317,2019-04-22T18:27:03Z,2019-04-24T00:17:56Z,2019-04-24T00:18:01Z,MERGED,True,105,2,9,https://github.com/dirk-thomas,enforce correct message type is passed to various API,2,['enhancement'],https://github.com/ros2/rclpy/pull/317,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/317#issuecomment-485886859,"Closes #314.
The PR contains two commits:

Adding tests passing an invalid type to the various APIs PR and expecting a TypeError to be raised. CI with these tests failing:  ( intentionally failing tests)
Update the implementation to check the passes type and raise TypeError in case it doesn't match the expected type:",Full build to ensure no code relies on using the API in that way:,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,318,2019-04-23T19:30:50Z,2019-04-24T14:35:25Z,2019-04-24T14:35:32Z,MERGED,True,420,64,10,https://github.com/sloretz,Make destroy_subscription thread safe,7,[],https://github.com/ros2/rclpy/pull/318,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/318,"Resolves #255
This makes node.destroy_subscription thread safe by wrapping the pycapsule with a class that keeps track of who is using it. The subscription is destroyed when it is no longer being used.
Potentially breaking changes

_rclpy.rclpy_create_subscription() returns just the pycapsule instead of a tuple. However, I would be surprised if any downstream projects are using this method.
_rclpy.rclpy_destroy_node_entity() no longer destroys subscriptions. Instead rclpy_pycapsule_destroy() does the work. Again I would be surprised if any downstream code is using this.
The class Subscription no longer has attributes subscription_handle and subscription_pointer. Instead it just has handle. I would expect those attributes to have been for internal use only.

Next steps
In order to keep PRs small, I would like this PR to get review and be merged after addressing feedback. Afterwards I'll create a new PR to fix the same thread safety issues for the other destroy methods:

destroy_publisher
destroy_client
destroy_service
destroy_timer
destroy_guard_condition

Finally I want to defer making destroy_node thread safe, and instead create an issue for it. It requires more thought since it can't be destroyed until every entity created from is no longer being used and has been destroyed.","Resolves #255
This makes node.destroy_subscription thread safe by wrapping the pycapsule with a class that keeps track of who is using it. The subscription is destroyed when it is no longer being used.
Potentially breaking changes

_rclpy.rclpy_create_subscription() returns just the pycapsule instead of a tuple. However, I would be surprised if any downstream projects are using this method.
_rclpy.rclpy_destroy_node_entity() no longer destroys subscriptions. Instead rclpy_pycapsule_destroy() does the work. Again I would be surprised if any downstream code is using this.
The class Subscription no longer has attributes subscription_handle and subscription_pointer. Instead it just has handle. I would expect those attributes to have been for internal use only.

Next steps
In order to keep PRs small, I would like this PR to get review and be merged after addressing feedback. Afterwards I'll create a new PR to fix the same thread safety issues for the other destroy methods:

destroy_publisher
destroy_client
destroy_service
destroy_timer
destroy_guard_condition

Finally I want to defer making destroy_node thread safe, and instead create an issue for it. It requires more thought since it can't be destroyed until every entity created from is no longer being used and has been destroyed.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,318,2019-04-23T19:30:50Z,2019-04-24T14:35:25Z,2019-04-24T14:35:32Z,MERGED,True,420,64,10,https://github.com/sloretz,Make destroy_subscription thread safe,7,[],https://github.com/ros2/rclpy/pull/318,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/318#issuecomment-485943132,"Resolves #255
This makes node.destroy_subscription thread safe by wrapping the pycapsule with a class that keeps track of who is using it. The subscription is destroyed when it is no longer being used.
Potentially breaking changes

_rclpy.rclpy_create_subscription() returns just the pycapsule instead of a tuple. However, I would be surprised if any downstream projects are using this method.
_rclpy.rclpy_destroy_node_entity() no longer destroys subscriptions. Instead rclpy_pycapsule_destroy() does the work. Again I would be surprised if any downstream code is using this.
The class Subscription no longer has attributes subscription_handle and subscription_pointer. Instead it just has handle. I would expect those attributes to have been for internal use only.

Next steps
In order to keep PRs small, I would like this PR to get review and be merged after addressing feedback. Afterwards I'll create a new PR to fix the same thread safety issues for the other destroy methods:

destroy_publisher
destroy_client
destroy_service
destroy_timer
destroy_guard_condition

Finally I want to defer making destroy_node thread safe, and instead create an issue for it. It requires more thought since it can't be destroyed until every entity created from is no longer being used and has been destroyed.","CI (testing packages above rclpy)

Linux  (test_params_yaml ros2/build_farmer#166)
Linux-aarch64  (test_params_yaml ros2/build_farmer#166)
macOS  Some sort of CI machine failure, investigating
--- stderr: intra_process_demo
13:24:37 make: *** [all] Alarm clock: 14
13:24:37 make: INTERNAL: Exiting with 1 jobserver tokens available; should be 4!
13:24:37 ---
13:24:37 Failed   <<< intra_process_demo	[ Exited with code 2 ]
13:24:48 


re-run 


Windows  failed to delete workspace ros2/build_farmer#161

Windows  (test_params_yaml ros2/build_farmer#166)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,318,2019-04-23T19:30:50Z,2019-04-24T14:35:25Z,2019-04-24T14:35:32Z,MERGED,True,420,64,10,https://github.com/sloretz,Make destroy_subscription thread safe,7,[],https://github.com/ros2/rclpy/pull/318,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/318#issuecomment-486003984,"Resolves #255
This makes node.destroy_subscription thread safe by wrapping the pycapsule with a class that keeps track of who is using it. The subscription is destroyed when it is no longer being used.
Potentially breaking changes

_rclpy.rclpy_create_subscription() returns just the pycapsule instead of a tuple. However, I would be surprised if any downstream projects are using this method.
_rclpy.rclpy_destroy_node_entity() no longer destroys subscriptions. Instead rclpy_pycapsule_destroy() does the work. Again I would be surprised if any downstream code is using this.
The class Subscription no longer has attributes subscription_handle and subscription_pointer. Instead it just has handle. I would expect those attributes to have been for internal use only.

Next steps
In order to keep PRs small, I would like this PR to get review and be merged after addressing feedback. Afterwards I'll create a new PR to fix the same thread safety issues for the other destroy methods:

destroy_publisher
destroy_client
destroy_service
destroy_timer
destroy_guard_condition

Finally I want to defer making destroy_node thread safe, and instead create an issue for it. It requires more thought since it can't be destroyed until every entity created from is no longer being used and has been destroyed.","CI (testing just rclpy, mostly to check that _Static_assert is supported on all platforms)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,318,2019-04-23T19:30:50Z,2019-04-24T14:35:25Z,2019-04-24T14:35:32Z,MERGED,True,420,64,10,https://github.com/sloretz,Make destroy_subscription thread safe,7,[],https://github.com/ros2/rclpy/pull/318,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/318#issuecomment-486010579,"Resolves #255
This makes node.destroy_subscription thread safe by wrapping the pycapsule with a class that keeps track of who is using it. The subscription is destroyed when it is no longer being used.
Potentially breaking changes

_rclpy.rclpy_create_subscription() returns just the pycapsule instead of a tuple. However, I would be surprised if any downstream projects are using this method.
_rclpy.rclpy_destroy_node_entity() no longer destroys subscriptions. Instead rclpy_pycapsule_destroy() does the work. Again I would be surprised if any downstream code is using this.
The class Subscription no longer has attributes subscription_handle and subscription_pointer. Instead it just has handle. I would expect those attributes to have been for internal use only.

Next steps
In order to keep PRs small, I would like this PR to get review and be merged after addressing feedback. Afterwards I'll create a new PR to fix the same thread safety issues for the other destroy methods:

destroy_publisher
destroy_client
destroy_service
destroy_timer
destroy_guard_condition

Finally I want to defer making destroy_node thread safe, and instead create an issue for it. It requires more thought since it can't be destroyed until every entity created from is no longer being used and has been destroyed.","CI with 69399f5 testing packages above rclpy to make sure the new commits didn't break anything

Linux 
Linux-aarch64  (test_params_yaml ros2/build_farmer#166)
macOS 
Windows  (test_params_yaml ros2/build_farmer#166)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,319,2019-04-24T15:43:59Z,2019-05-01T17:56:54Z,2019-05-01T17:56:58Z,MERGED,True,621,465,13,https://github.com/sloretz,Thread safe node.destroy_*,16,[],https://github.com/ros2/rclpy/pull/319,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/319,"Follow up to #318 and #330. This PR applies the changes done to Subscription to the rest of the entities on the node so they can all be destroyed safely.

 destroy_publisher
 destroy_client
 destroy_service
 destroy_timer

 Clock used by timer safely destroyed


 destroy_guard_condition

Not done in this PR. These might require a change to the waitable API.

action server
action client","Follow up to #318 and #330. This PR applies the changes done to Subscription to the rest of the entities on the node so they can all be destroyed safely.

 destroy_publisher
 destroy_client
 destroy_service
 destroy_timer

 Clock used by timer safely destroyed


 destroy_guard_condition

Not done in this PR. These might require a change to the waitable API.

action server
action client",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,319,2019-04-24T15:43:59Z,2019-05-01T17:56:54Z,2019-05-01T17:56:58Z,MERGED,True,621,465,13,https://github.com/sloretz,Thread safe node.destroy_*,16,[],https://github.com/ros2/rclpy/pull/319,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/319#issuecomment-486860562,"Follow up to #318 and #330. This PR applies the changes done to Subscription to the rest of the entities on the node so they can all be destroyed safely.

 destroy_publisher
 destroy_client
 destroy_service
 destroy_timer

 Clock used by timer safely destroyed


 destroy_guard_condition

Not done in this PR. These might require a change to the waitable API.

action server
action client","I think I have to include destroy_node in this PR. This approach can change the order that entities get shut down.
# In another thread an executor is spinning
# srv destruction delayed because executor is waiting on service
node.destroy_service(srv)

# node is destroyed instantly; service still not destroyed because it's being used by executor
node.destroy_node()

# When executor shuts down the service is no longer being used, so it's destroyed
# since the node was destroyed first the service will segfault in rmw_fastrtps
executor.shutdown()
I'm thinking of chaining handles so that node.destroy_node() destroy's all node entities before allowing itself to be destroyed.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,319,2019-04-24T15:43:59Z,2019-05-01T17:56:54Z,2019-05-01T17:56:58Z,MERGED,True,621,465,13,https://github.com/sloretz,Thread safe node.destroy_*,16,[],https://github.com/ros2/rclpy/pull/319,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/319#issuecomment-488134698,"Follow up to #318 and #330. This PR applies the changes done to Subscription to the rest of the entities on the node so they can all be destroyed safely.

 destroy_publisher
 destroy_client
 destroy_service
 destroy_timer

 Clock used by timer safely destroyed


 destroy_guard_condition

Not done in this PR. These might require a change to the waitable API.

action server
action client","Ready for review.
CI (testing rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,319,2019-04-24T15:43:59Z,2019-05-01T17:56:54Z,2019-05-01T17:56:58Z,MERGED,True,621,465,13,https://github.com/sloretz,Thread safe node.destroy_*,16,[],https://github.com/ros2/rclpy/pull/319,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/319#issuecomment-488170986,"Follow up to #318 and #330. This PR applies the changes done to Subscription to the rest of the entities on the node so they can all be destroyed safely.

 destroy_publisher
 destroy_client
 destroy_service
 destroy_timer

 Clock used by timer safely destroyed


 destroy_guard_condition

Not done in this PR. These might require a change to the waitable API.

action server
action client","CI (testing rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,319,2019-04-24T15:43:59Z,2019-05-01T17:56:54Z,2019-05-01T17:56:58Z,MERGED,True,621,465,13,https://github.com/sloretz,Thread safe node.destroy_*,16,[],https://github.com/ros2/rclpy/pull/319,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/319#issuecomment-488359078,"Follow up to #318 and #330. This PR applies the changes done to Subscription to the rest of the entities on the node so they can all be destroyed safely.

 destroy_publisher
 destroy_client
 destroy_service
 destroy_timer

 Clock used by timer safely destroyed


 destroy_guard_condition

Not done in this PR. These might require a change to the waitable API.

action server
action client","My only remaining question is whether we should open an issue for reducing the complexity here by introducing rmw_shutdown_but_not_fini for a future enhancement. Thoughts on that?

I've gone back and forth between writing the issue on rmw vs making it a higher level feature of rcl. I opened ros2/rcl#429, but the solution seems a lot more complicated than I first thought. I put it in the backlog since it feels like it needs more thought.",True,{'THUMBS_UP': ['https://github.com/clalancette']}
ros2/rclpy,https://github.com/ros2/rclpy,320,2019-04-24T18:45:12Z,2019-04-24T21:55:37Z,2019-04-24T21:55:42Z,MERGED,True,21,23,2,https://github.com/sloretz,Fix subscription pycapsule not being destroyed,5,['bug'],https://github.com/ros2/rclpy/pull/320,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/320,"Fixes bug in #318.
The subscription is never being destroyed because rclpy_pycapsule_destroy was passing the destructor the pointer held by the pycapsule rather than the pycapsule itself. This fixes the issue and adds a warning to _rclpy_destroy_subscription to make this visible if it happens again.","Fixes bug in #318.
The subscription is never being destroyed because rclpy_pycapsule_destroy was passing the destructor the pointer held by the pycapsule rather than the pycapsule itself. This fixes the issue and adds a warning to _rclpy_destroy_subscription to make this visible if it happens again.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,320,2019-04-24T18:45:12Z,2019-04-24T21:55:37Z,2019-04-24T21:55:42Z,MERGED,True,21,23,2,https://github.com/sloretz,Fix subscription pycapsule not being destroyed,5,['bug'],https://github.com/ros2/rclpy/pull/320,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/320#issuecomment-486378137,"Fixes bug in #318.
The subscription is never being destroyed because rclpy_pycapsule_destroy was passing the destructor the pointer held by the pycapsule rather than the pycapsule itself. This fixes the issue and adds a warning to _rclpy_destroy_subscription to make this visible if it happens again.","CI (testing just rclpy)

Linux  Java traceback

Linux 


Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,320,2019-04-24T18:45:12Z,2019-04-24T21:55:37Z,2019-04-24T21:55:42Z,MERGED,True,21,23,2,https://github.com/sloretz,Fix subscription pycapsule not being destroyed,5,['bug'],https://github.com/ros2/rclpy/pull/320,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/320#issuecomment-486412442,"Fixes bug in #318.
The subscription is never being destroyed because rclpy_pycapsule_destroy was passing the destructor the pointer held by the pycapsule rather than the pycapsule itself. This fixes the issue and adds a warning to _rclpy_destroy_subscription to make this visible if it happens again.","CI (with 590117b testing just rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,320,2019-04-24T18:45:12Z,2019-04-24T21:55:37Z,2019-04-24T21:55:42Z,MERGED,True,21,23,2,https://github.com/sloretz,Fix subscription pycapsule not being destroyed,5,['bug'],https://github.com/ros2/rclpy/pull/320,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/320#issuecomment-486433710,"Fixes bug in #318.
The subscription is never being destroyed because rclpy_pycapsule_destroy was passing the destructor the pointer held by the pycapsule rather than the pycapsule itself. This fixes the issue and adds a warning to _rclpy_destroy_subscription to make this visible if it happens again.","CI (with e0c9c21 testing rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,323,2019-04-26T18:04:10Z,2019-04-26T18:34:51Z,2019-04-26T18:34:55Z,MERGED,True,0,6,1,https://github.com/sloretz,Remove __eq__ and __hash__ from Subscription,1,['bug'],https://github.com/ros2/rclpy/pull/323,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/323,"Fixes #322
TL;DR the default __eq__ and __hash__ work just fine.
The Subscription class was using the address held by the pycapsule as the hash. However, that address is free'd when Subscription.destroy() is called. This makes it possible for a new subscription to be created using the same address, and therefore having the same hash as a destroy()'d subscription.
This is a problem in the unit tests that reuse the same node for multiple tests. After the subscription is destroyed in one test, a new test can create a subscription that has the same memory address. Callback groups keep a set() of weak references to entities (including subscriptions) that are in them. This prevents the new subscription from being added to the node's default callback group, because a weak reference with that hash already exists. The weak reference to the destroy()'d entity stays in the callback group's set() until it is garbage collected.
After the garbage collector runs the callback group's weakref to the old subscription is deleted. This leads to an assertion error in callback_group.can_execute because there is no weak reference with the same hash as the newly created subscription.","Fixes #322
TL;DR the default __eq__ and __hash__ work just fine.
The Subscription class was using the address held by the pycapsule as the hash. However, that address is free'd when Subscription.destroy() is called. This makes it possible for a new subscription to be created using the same address, and therefore having the same hash as a destroy()'d subscription.
This is a problem in the unit tests that reuse the same node for multiple tests. After the subscription is destroyed in one test, a new test can create a subscription that has the same memory address. Callback groups keep a set() of weak references to entities (including subscriptions) that are in them. This prevents the new subscription from being added to the node's default callback group, because a weak reference with that hash already exists. The weak reference to the destroy()'d entity stays in the callback group's set() until it is garbage collected.
After the garbage collector runs the callback group's weakref to the old subscription is deleted. This leads to an assertion error in callback_group.can_execute because there is no weak reference with the same hash as the newly created subscription.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,323,2019-04-26T18:04:10Z,2019-04-26T18:34:51Z,2019-04-26T18:34:55Z,MERGED,True,0,6,1,https://github.com/sloretz,Remove __eq__ and __hash__ from Subscription,1,['bug'],https://github.com/ros2/rclpy/pull/323,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/323#issuecomment-487148730,"Fixes #322
TL;DR the default __eq__ and __hash__ work just fine.
The Subscription class was using the address held by the pycapsule as the hash. However, that address is free'd when Subscription.destroy() is called. This makes it possible for a new subscription to be created using the same address, and therefore having the same hash as a destroy()'d subscription.
This is a problem in the unit tests that reuse the same node for multiple tests. After the subscription is destroyed in one test, a new test can create a subscription that has the same memory address. Callback groups keep a set() of weak references to entities (including subscriptions) that are in them. This prevents the new subscription from being added to the node's default callback group, because a weak reference with that hash already exists. The weak reference to the destroy()'d entity stays in the callback group's set() until it is garbage collected.
After the garbage collector runs the callback group's weakref to the old subscription is deleted. This leads to an assertion error in callback_group.can_execute because there is no weak reference with the same hash as the newly created subscription.","CI (testing just rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,323,2019-04-26T18:04:10Z,2019-04-26T18:34:51Z,2019-04-26T18:34:55Z,MERGED,True,0,6,1,https://github.com/sloretz,Remove __eq__ and __hash__ from Subscription,1,['bug'],https://github.com/ros2/rclpy/pull/323,https://github.com/dirk-thomas,3,https://github.com/ros2/rclpy/pull/323#issuecomment-487155792,"Fixes #322
TL;DR the default __eq__ and __hash__ work just fine.
The Subscription class was using the address held by the pycapsule as the hash. However, that address is free'd when Subscription.destroy() is called. This makes it possible for a new subscription to be created using the same address, and therefore having the same hash as a destroy()'d subscription.
This is a problem in the unit tests that reuse the same node for multiple tests. After the subscription is destroyed in one test, a new test can create a subscription that has the same memory address. Callback groups keep a set() of weak references to entities (including subscriptions) that are in them. This prevents the new subscription from being added to the node's default callback group, because a weak reference with that hash already exists. The weak reference to the destroy()'d entity stays in the callback group's set() until it is garbage collected.
After the garbage collector runs the callback group's weakref to the old subscription is deleted. This leads to an assertion error in callback_group.can_execute because there is no weak reference with the same hash as the newly created subscription.","Are there any cases where we create two instances of Subscription with the same subscription handle? If not, I agree these functions can be removed. If yes, we need to make sure that we don't rely on them being equal and instead compare the handle property explicitly.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,323,2019-04-26T18:04:10Z,2019-04-26T18:34:51Z,2019-04-26T18:34:55Z,MERGED,True,0,6,1,https://github.com/sloretz,Remove __eq__ and __hash__ from Subscription,1,['bug'],https://github.com/ros2/rclpy/pull/323,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/323#issuecomment-487156070,"Fixes #322
TL;DR the default __eq__ and __hash__ work just fine.
The Subscription class was using the address held by the pycapsule as the hash. However, that address is free'd when Subscription.destroy() is called. This makes it possible for a new subscription to be created using the same address, and therefore having the same hash as a destroy()'d subscription.
This is a problem in the unit tests that reuse the same node for multiple tests. After the subscription is destroyed in one test, a new test can create a subscription that has the same memory address. Callback groups keep a set() of weak references to entities (including subscriptions) that are in them. This prevents the new subscription from being added to the node's default callback group, because a weak reference with that hash already exists. The weak reference to the destroy()'d entity stays in the callback group's set() until it is garbage collected.
After the garbage collector runs the callback group's weakref to the old subscription is deleted. This leads to an assertion error in callback_group.can_execute because there is no weak reference with the same hash as the newly created subscription.","Are there any cases where we create two instances of Subscription with the same subscription handle?

@dirk-thomas No cases that I'm aware of.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,324,2019-04-26T18:24:25Z,2019-04-26T21:02:25Z,2019-04-26T21:03:34Z,MERGED,True,4,4,1,https://github.com/sloretz,Wait set uses pointers to rcl types not rcl->impl types,3,['bug'],https://github.com/ros2/rclpy/pull/324,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/324,"rclpy_get_ready_entities is returning a list of pointers to the entity->impl pointer, but it should be returning a list of pointers to the entity. For most entities this doesn't matter because the impl object is the first member of the struct, so the addresses are the same. rcl_guard_condition_t is different because the first member is a pointer to the context.
This fixes the macro used by rcl_get_ready_entities and removes the workaround to the bug in rclpy_create_guard_condition.
Blocks #319","rclpy_get_ready_entities is returning a list of pointers to the entity->impl pointer, but it should be returning a list of pointers to the entity. For most entities this doesn't matter because the impl object is the first member of the struct, so the addresses are the same. rcl_guard_condition_t is different because the first member is a pointer to the context.
This fixes the macro used by rcl_get_ready_entities and removes the workaround to the bug in rclpy_create_guard_condition.
Blocks #319",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,324,2019-04-26T18:24:25Z,2019-04-26T21:02:25Z,2019-04-26T21:03:34Z,MERGED,True,4,4,1,https://github.com/sloretz,Wait set uses pointers to rcl types not rcl->impl types,3,['bug'],https://github.com/ros2/rclpy/pull/324,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/324#issuecomment-487155299,"rclpy_get_ready_entities is returning a list of pointers to the entity->impl pointer, but it should be returning a list of pointers to the entity. For most entities this doesn't matter because the impl object is the first member of the struct, so the addresses are the same. rcl_guard_condition_t is different because the first member is a pointer to the context.
This fixes the macro used by rcl_get_ready_entities and removes the workaround to the bug in rclpy_create_guard_condition.
Blocks #319","CI (testing rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,324,2019-04-26T18:24:25Z,2019-04-26T21:02:25Z,2019-04-26T21:03:34Z,MERGED,True,4,4,1,https://github.com/sloretz,Wait set uses pointers to rcl types not rcl->impl types,3,['bug'],https://github.com/ros2/rclpy/pull/324,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/324#issuecomment-487157477,"rclpy_get_ready_entities is returning a list of pointers to the entity->impl pointer, but it should be returning a list of pointers to the entity. For most entities this doesn't matter because the impl object is the first member of the struct, so the addresses are the same. rcl_guard_condition_t is different because the first member is a pointer to the context.
This fixes the macro used by rcl_get_ready_entities and removes the workaround to the bug in rclpy_create_guard_condition.
Blocks #319","CI with 49aa8f0

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,325,2019-04-26T23:23:19Z,2019-05-04T00:52:12Z,2019-05-06T17:02:04Z,MERGED,True,669,38,11,https://github.com/jubeira,Parameter API enhancements,4,[],https://github.com/ros2/rclpy/pull/325,https://github.com/jubeira,1,https://github.com/ros2/rclpy/pull/325,Closes #321; refer to the issue for details.,Closes #321; refer to the issue for details.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,325,2019-04-26T23:23:19Z,2019-05-04T00:52:12Z,2019-05-06T17:02:04Z,MERGED,True,669,38,11,https://github.com/jubeira,Parameter API enhancements,4,[],https://github.com/ros2/rclpy/pull/325,https://github.com/jubeira,2,https://github.com/ros2/rclpy/pull/325#issuecomment-487230245,Closes #321; refer to the issue for details.,"This is a draft for now; there are still multiple TODOs around the code and testing to be done before promoting it to a PR.
If anyone's interested in taking a preliminary look and providing feedback, it is more than welcome!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,325,2019-04-26T23:23:19Z,2019-05-04T00:52:12Z,2019-05-06T17:02:04Z,MERGED,True,669,38,11,https://github.com/jubeira,Parameter API enhancements,4,[],https://github.com/ros2/rclpy/pull/325,https://github.com/jubeira,3,https://github.com/ros2/rclpy/pull/325#issuecomment-488091428,Closes #321; refer to the issue for details.,"Code updated and rebased with the current master.
This is ready for review; the only pending tasks are adding proper test cases for the new API, and improving exception handling. Existing
Note that this PR should get in before the API freeze. The implementation reused the existing codebase as much as possible; the intention was to comply with the new API changing it as little as possible. Following that line, I would suggest to correct implementation details that may appear after the API freeze.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,325,2019-04-26T23:23:19Z,2019-05-04T00:52:12Z,2019-05-06T17:02:04Z,MERGED,True,669,38,11,https://github.com/jubeira,Parameter API enhancements,4,[],https://github.com/ros2/rclpy/pull/325,https://github.com/hidmic,4,https://github.com/ros2/rclpy/pull/325#issuecomment-488094185,Closes #321; refer to the issue for details.,"CI (full run):

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,325,2019-04-26T23:23:19Z,2019-05-04T00:52:12Z,2019-05-06T17:02:04Z,MERGED,True,669,38,11,https://github.com/jubeira,Parameter API enhancements,4,[],https://github.com/ros2/rclpy/pull/325,https://github.com/jubeira,5,https://github.com/ros2/rclpy/pull/325#issuecomment-488826326,Closes #321; refer to the issue for details.,"Thanks for the comments @wjwwood @jacobperron !
I've just pushed some more changes addressing them. I still need to add more test cases, but this seems to be taking shape. I'll rebase to fix the conflicts before proceeding.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,325,2019-04-26T23:23:19Z,2019-05-04T00:52:12Z,2019-05-06T17:02:04Z,MERGED,True,669,38,11,https://github.com/jubeira,Parameter API enhancements,4,[],https://github.com/ros2/rclpy/pull/325,https://github.com/jubeira,6,https://github.com/ros2/rclpy/pull/325#issuecomment-488874884,Closes #321; refer to the issue for details.,"CI for linux:

Linux: 
Linux-aarch64: 
MacOS: 

Windows was not available and didn't finish yet. Other than that CI looks good for this.
@wjwwood any more thoughts or comments? Do you think this can get in the API freeze?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,325,2019-04-26T23:23:19Z,2019-05-04T00:52:12Z,2019-05-06T17:02:04Z,MERGED,True,669,38,11,https://github.com/jubeira,Parameter API enhancements,4,[],https://github.com/ros2/rclpy/pull/325,https://github.com/sloretz,7,https://github.com/ros2/rclpy/pull/325#issuecomment-488878375,Closes #321; refer to the issue for details.,@jubeira It looks like those CI runs tested all packages. For the next run I recommend --packages-above rclpy in the tests args to reduce the time CI takes,True,{'THUMBS_UP': ['https://github.com/jubeira']}
ros2/rclpy,https://github.com/ros2/rclpy,325,2019-04-26T23:23:19Z,2019-05-04T00:52:12Z,2019-05-06T17:02:04Z,MERGED,True,669,38,11,https://github.com/jubeira,Parameter API enhancements,4,[],https://github.com/ros2/rclpy/pull/325,https://github.com/jacobperron,8,https://github.com/ros2/rclpy/pull/325#issuecomment-488886583,Closes #321; refer to the issue for details.,"@jubeira My recent review is just minor nitpicks. Also, I'm okay if we want to put the additional tests in a follow-up PR.",True,{'THUMBS_UP': ['https://github.com/jubeira']}
ros2/rclpy,https://github.com/ros2/rclpy,325,2019-04-26T23:23:19Z,2019-05-04T00:52:12Z,2019-05-06T17:02:04Z,MERGED,True,669,38,11,https://github.com/jubeira,Parameter API enhancements,4,[],https://github.com/ros2/rclpy/pull/325,https://github.com/jubeira,9,https://github.com/ros2/rclpy/pull/325#issuecomment-489094471,Closes #321; refer to the issue for details.,"@jacobperron @wjwwood thanks again for your reviews!
If you are OK with it, I'd suggest merging this one and opening a ticket to track down the missing suggestions and test cases. I can do the follow-up.
/cc @hidmic",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,325,2019-04-26T23:23:19Z,2019-05-04T00:52:12Z,2019-05-06T17:02:04Z,MERGED,True,669,38,11,https://github.com/jubeira,Parameter API enhancements,4,[],https://github.com/ros2/rclpy/pull/325,https://github.com/jubeira,10,https://github.com/ros2/rclpy/pull/325#issuecomment-489277205,Closes #321; refer to the issue for details.,"CI:

Linux: 
Linux-aarch64: 
Mac OS: 
Windows 

Overall looks good; the failing cases seem to be unrelated.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,326,2019-04-27T02:25:58Z,2019-04-27T16:30:19Z,2019-04-27T16:30:23Z,MERGED,True,1,1,1,https://github.com/thomas-moulard,Prevent rcutils_log from accessing invalid memory,1,[],https://github.com/ros2/rclpy/pull/326,https://github.com/thomas-moulard,1,https://github.com/ros2/rclpy/pull/326,"Before this fix, rclpy_logging_rcutils_log was using
rcutils_log without a format string (log message was
passed directly as the foramt).
This is unsafe because if the log message contains
a sequence of character which can be interpreted by
snprintf (""%d"" for instance), snprintf will look for
this argument value which was never passed.
This leads to reading invalid memory and may cause a crash
or corrupted log messages.
The simple fix is to always pass ""%s"" when a static log
string needs to be logged.
Signed-off-by: Thomas Moulard tmoulard@amazon.com","Before this fix, rclpy_logging_rcutils_log was using
rcutils_log without a format string (log message was
passed directly as the foramt).
This is unsafe because if the log message contains
a sequence of character which can be interpreted by
snprintf (""%d"" for instance), snprintf will look for
this argument value which was never passed.
This leads to reading invalid memory and may cause a crash
or corrupted log messages.
The simple fix is to always pass ""%s"" when a static log
string needs to be logged.
Signed-off-by: Thomas Moulard tmoulard@amazon.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,326,2019-04-27T02:25:58Z,2019-04-27T16:30:19Z,2019-04-27T16:30:23Z,MERGED,True,1,1,1,https://github.com/thomas-moulard,Prevent rcutils_log from accessing invalid memory,1,[],https://github.com/ros2/rclpy/pull/326,https://github.com/thomas-moulard,2,https://github.com/ros2/rclpy/pull/326#issuecomment-487247450,"Before this fix, rclpy_logging_rcutils_log was using
rcutils_log without a format string (log message was
passed directly as the foramt).
This is unsafe because if the log message contains
a sequence of character which can be interpreted by
snprintf (""%d"" for instance), snprintf will look for
this argument value which was never passed.
This leads to reading invalid memory and may cause a crash
or corrupted log messages.
The simple fix is to always pass ""%s"" when a static log
string needs to be logged.
Signed-off-by: Thomas Moulard tmoulard@amazon.com",https://ci.ros2.org/job/ci_launcher/3376/,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,326,2019-04-27T02:25:58Z,2019-04-27T16:30:19Z,2019-04-27T16:30:23Z,MERGED,True,1,1,1,https://github.com/thomas-moulard,Prevent rcutils_log from accessing invalid memory,1,[],https://github.com/ros2/rclpy/pull/326,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/326#issuecomment-487300037,"Before this fix, rclpy_logging_rcutils_log was using
rcutils_log without a format string (log message was
passed directly as the foramt).
This is unsafe because if the log message contains
a sequence of character which can be interpreted by
snprintf (""%d"" for instance), snprintf will look for
this argument value which was never passed.
This leads to reading invalid memory and may cause a crash
or corrupted log messages.
The simple fix is to always pass ""%s"" when a static log
string needs to be logged.
Signed-off-by: Thomas Moulard tmoulard@amazon.com","Thanks for the PR! CI LGTM

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,328,2019-04-29T19:49:11Z,2019-04-29T21:47:56Z,2019-04-29T21:48:00Z,MERGED,True,223,436,7,https://github.com/sloretz,Don't use multiprocessing in tests,3,[],https://github.com/ros2/rclpy/pull/328,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/328,"Blocks #319
Some tests use the multiprocessing module to run tests in another process. On linux this uses fork(), which is not safe to do when using multiple threads.
From http://man7.org/linux/man-pages/man2/fork.2.html
The child process is created with a single thread—the one that
          called fork().  The entire virtual address space of the parent is
          replicated in the child, including the states of mutexes,
          condition variables, and other pthreads objects;

This means the child only has one thread, but objects with references to other threads exist. If another test does not call destroy_node() then the fork will get a copy of that node, including a copy of an eprosima::fastrtps::rtps::ChannelResource which has a reference to a thread that only exists in the parent. When the garbage collector runs in the child, the child's the copy of the node will block forever when it the ChannelResource tries to join() the non-existent thread.
It should be possible to work around this by changing the multiprocessing module to use the spawn method instead of fork, but for some reason multiprocessing.Pool.apply() deadlocks in my python environment with trivial functions when using spawn, so I rewrote these tests to get rid of multiprocessing altogether.","Blocks #319
Some tests use the multiprocessing module to run tests in another process. On linux this uses fork(), which is not safe to do when using multiple threads.
From http://man7.org/linux/man-pages/man2/fork.2.html
The child process is created with a single thread—the one that
          called fork().  The entire virtual address space of the parent is
          replicated in the child, including the states of mutexes,
          condition variables, and other pthreads objects;

This means the child only has one thread, but objects with references to other threads exist. If another test does not call destroy_node() then the fork will get a copy of that node, including a copy of an eprosima::fastrtps::rtps::ChannelResource which has a reference to a thread that only exists in the parent. When the garbage collector runs in the child, the child's the copy of the node will block forever when it the ChannelResource tries to join() the non-existent thread.
It should be possible to work around this by changing the multiprocessing module to use the spawn method instead of fork, but for some reason multiprocessing.Pool.apply() deadlocks in my python environment with trivial functions when using spawn, so I rewrote these tests to get rid of multiprocessing altogether.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,328,2019-04-29T19:49:11Z,2019-04-29T21:47:56Z,2019-04-29T21:48:00Z,MERGED,True,223,436,7,https://github.com/sloretz,Don't use multiprocessing in tests,3,[],https://github.com/ros2/rclpy/pull/328,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/328#issuecomment-487718580,"Blocks #319
Some tests use the multiprocessing module to run tests in another process. On linux this uses fork(), which is not safe to do when using multiple threads.
From http://man7.org/linux/man-pages/man2/fork.2.html
The child process is created with a single thread—the one that
          called fork().  The entire virtual address space of the parent is
          replicated in the child, including the states of mutexes,
          condition variables, and other pthreads objects;

This means the child only has one thread, but objects with references to other threads exist. If another test does not call destroy_node() then the fork will get a copy of that node, including a copy of an eprosima::fastrtps::rtps::ChannelResource which has a reference to a thread that only exists in the parent. When the garbage collector runs in the child, the child's the copy of the node will block forever when it the ChannelResource tries to join() the non-existent thread.
It should be possible to work around this by changing the multiprocessing module to use the spawn method instead of fork, but for some reason multiprocessing.Pool.apply() deadlocks in my python environment with trivial functions when using spawn, so I rewrote these tests to get rid of multiprocessing altogether.","CI (testing just rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,328,2019-04-29T19:49:11Z,2019-04-29T21:47:56Z,2019-04-29T21:48:00Z,MERGED,True,223,436,7,https://github.com/sloretz,Don't use multiprocessing in tests,3,[],https://github.com/ros2/rclpy/pull/328,https://github.com/wjwwood,3,https://github.com/ros2/rclpy/pull/328#issuecomment-487722893,"Blocks #319
Some tests use the multiprocessing module to run tests in another process. On linux this uses fork(), which is not safe to do when using multiple threads.
From http://man7.org/linux/man-pages/man2/fork.2.html
The child process is created with a single thread—the one that
          called fork().  The entire virtual address space of the parent is
          replicated in the child, including the states of mutexes,
          condition variables, and other pthreads objects;

This means the child only has one thread, but objects with references to other threads exist. If another test does not call destroy_node() then the fork will get a copy of that node, including a copy of an eprosima::fastrtps::rtps::ChannelResource which has a reference to a thread that only exists in the parent. When the garbage collector runs in the child, the child's the copy of the node will block forever when it the ChannelResource tries to join() the non-existent thread.
It should be possible to work around this by changing the multiprocessing module to use the spawn method instead of fork, but for some reason multiprocessing.Pool.apply() deadlocks in my python environment with trivial functions when using spawn, so I rewrote these tests to get rid of multiprocessing altogether.","The reason for using multiprocessing in the past was to allow us to use more than one rmw implementation. Without multiprocessing you cannot test fastrtps and connext in the same pytest instance. Also you cannot be sure that init/shutdown is isolated between tests.
Is this not a problem of doing some work outside of multiprocessing and the rest inside? Perhaps this could be addressed by moving statements into the multiprocessing functions rather than removing multiprocessing?
Can you say whether or not multiprocessing is no longer required for the use cases I mentioned above (may be the case)?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,328,2019-04-29T19:49:11Z,2019-04-29T21:47:56Z,2019-04-29T21:48:00Z,MERGED,True,223,436,7,https://github.com/sloretz,Don't use multiprocessing in tests,3,[],https://github.com/ros2/rclpy/pull/328,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/328#issuecomment-487731375,"Blocks #319
Some tests use the multiprocessing module to run tests in another process. On linux this uses fork(), which is not safe to do when using multiple threads.
From http://man7.org/linux/man-pages/man2/fork.2.html
The child process is created with a single thread—the one that
          called fork().  The entire virtual address space of the parent is
          replicated in the child, including the states of mutexes,
          condition variables, and other pthreads objects;

This means the child only has one thread, but objects with references to other threads exist. If another test does not call destroy_node() then the fork will get a copy of that node, including a copy of an eprosima::fastrtps::rtps::ChannelResource which has a reference to a thread that only exists in the parent. When the garbage collector runs in the child, the child's the copy of the node will block forever when it the ChannelResource tries to join() the non-existent thread.
It should be possible to work around this by changing the multiprocessing module to use the spawn method instead of fork, but for some reason multiprocessing.Pool.apply() deadlocks in my python environment with trivial functions when using spawn, so I rewrote these tests to get rid of multiprocessing altogether.","Is this not a problem of doing some work outside of multiprocessing and the rest inside? Perhaps this could be addressed by moving statements into the multiprocessing functions rather than removing multiprocessing?

Hmm it could be fixed by making every test use multiprocessing instead of just these 3.

Can you say whether or not multiprocessing is no longer required for the use cases I mentioned above (may be the case)?

I'll look into this. I wasn't aware we were testing multiple RMW implementations starting from the same pytest instance.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,328,2019-04-29T19:49:11Z,2019-04-29T21:47:56Z,2019-04-29T21:48:00Z,MERGED,True,223,436,7,https://github.com/sloretz,Don't use multiprocessing in tests,3,[],https://github.com/ros2/rclpy/pull/328,https://github.com/wjwwood,5,https://github.com/ros2/rclpy/pull/328#issuecomment-487738965,"Blocks #319
Some tests use the multiprocessing module to run tests in another process. On linux this uses fork(), which is not safe to do when using multiple threads.
From http://man7.org/linux/man-pages/man2/fork.2.html
The child process is created with a single thread—the one that
          called fork().  The entire virtual address space of the parent is
          replicated in the child, including the states of mutexes,
          condition variables, and other pthreads objects;

This means the child only has one thread, but objects with references to other threads exist. If another test does not call destroy_node() then the fork will get a copy of that node, including a copy of an eprosima::fastrtps::rtps::ChannelResource which has a reference to a thread that only exists in the parent. When the garbage collector runs in the child, the child's the copy of the node will block forever when it the ChannelResource tries to join() the non-existent thread.
It should be possible to work around this by changing the multiprocessing module to use the spawn method instead of fork, but for some reason multiprocessing.Pool.apply() deadlocks in my python environment with trivial functions when using spawn, so I rewrote these tests to get rid of multiprocessing altogether.","We may not be anymore, but that's why we used it originally, in order to isolate which rmw implementation we imported.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,328,2019-04-29T19:49:11Z,2019-04-29T21:47:56Z,2019-04-29T21:48:00Z,MERGED,True,223,436,7,https://github.com/sloretz,Don't use multiprocessing in tests,3,[],https://github.com/ros2/rclpy/pull/328,https://github.com/sloretz,6,https://github.com/ros2/rclpy/pull/328#issuecomment-487741023,"Blocks #319
Some tests use the multiprocessing module to run tests in another process. On linux this uses fork(), which is not safe to do when using multiple threads.
From http://man7.org/linux/man-pages/man2/fork.2.html
The child process is created with a single thread—the one that
          called fork().  The entire virtual address space of the parent is
          replicated in the child, including the states of mutexes,
          condition variables, and other pthreads objects;

This means the child only has one thread, but objects with references to other threads exist. If another test does not call destroy_node() then the fork will get a copy of that node, including a copy of an eprosima::fastrtps::rtps::ChannelResource which has a reference to a thread that only exists in the parent. When the garbage collector runs in the child, the child's the copy of the node will block forever when it the ChannelResource tries to join() the non-existent thread.
It should be possible to work around this by changing the multiprocessing module to use the spawn method instead of fork, but for some reason multiprocessing.Pool.apply() deadlocks in my python environment with trivial functions when using spawn, so I rewrote these tests to get rid of multiprocessing altogether.","The reason for using multiprocessing in the past was to allow us to use more than one rmw implementation. Without multiprocessing you cannot test fastrtps and connext in the same pytest instance.

It looks like rclpy only runs its tests for a single RMW implementation. If we were going to add this I think the least effort way would be to call ament_add_pytest_test() for each RMW, meaning each is a different pytest invocation, and multiprocessing isn't needed.

Also you cannot be sure that init/shutdown is isolated between tests.

It does look like multiprocessing is required for assurance that init/shutdown is isolated. This only works if all tests use multiprocessing otherwise state will be copied to the child process. This standard is unique to rclpy; rclcpp does not make every test in a test file run in a separate process, but rclcpp does have more isolation because each test file is a separate executable.
Rewriting all tests to use multiprocessing looks like a bit of work. There are more tests not using multiprocessing than using it. We could get more isolation in rclpy by calling ament_add_pytest_test for each test file instead of once for the whole test directory, which would make it more like rclcpp.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,328,2019-04-29T19:49:11Z,2019-04-29T21:47:56Z,2019-04-29T21:48:00Z,MERGED,True,223,436,7,https://github.com/sloretz,Don't use multiprocessing in tests,3,[],https://github.com/ros2/rclpy/pull/328,https://github.com/sloretz,7,https://github.com/ros2/rclpy/pull/328#issuecomment-487746815,"Blocks #319
Some tests use the multiprocessing module to run tests in another process. On linux this uses fork(), which is not safe to do when using multiple threads.
From http://man7.org/linux/man-pages/man2/fork.2.html
The child process is created with a single thread—the one that
          called fork().  The entire virtual address space of the parent is
          replicated in the child, including the states of mutexes,
          condition variables, and other pthreads objects;

This means the child only has one thread, but objects with references to other threads exist. If another test does not call destroy_node() then the fork will get a copy of that node, including a copy of an eprosima::fastrtps::rtps::ChannelResource which has a reference to a thread that only exists in the parent. When the garbage collector runs in the child, the child's the copy of the node will block forever when it the ChannelResource tries to join() the non-existent thread.
It should be possible to work around this by changing the multiprocessing module to use the spawn method instead of fork, but for some reason multiprocessing.Pool.apply() deadlocks in my python environment with trivial functions when using spawn, so I rewrote these tests to get rid of multiprocessing altogether.",@wjwwood a3806cc calls ament_add_pytest_test for each test file. How does that approach sound?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,328,2019-04-29T19:49:11Z,2019-04-29T21:47:56Z,2019-04-29T21:48:00Z,MERGED,True,223,436,7,https://github.com/sloretz,Don't use multiprocessing in tests,3,[],https://github.com/ros2/rclpy/pull/328,https://github.com/wjwwood,8,https://github.com/ros2/rclpy/pull/328#issuecomment-487749564,"Blocks #319
Some tests use the multiprocessing module to run tests in another process. On linux this uses fork(), which is not safe to do when using multiple threads.
From http://man7.org/linux/man-pages/man2/fork.2.html
The child process is created with a single thread—the one that
          called fork().  The entire virtual address space of the parent is
          replicated in the child, including the states of mutexes,
          condition variables, and other pthreads objects;

This means the child only has one thread, but objects with references to other threads exist. If another test does not call destroy_node() then the fork will get a copy of that node, including a copy of an eprosima::fastrtps::rtps::ChannelResource which has a reference to a thread that only exists in the parent. When the garbage collector runs in the child, the child's the copy of the node will block forever when it the ChannelResource tries to join() the non-existent thread.
It should be possible to work around this by changing the multiprocessing module to use the spawn method instead of fork, but for some reason multiprocessing.Pool.apply() deadlocks in my python environment with trivial functions when using spawn, so I rewrote these tests to get rid of multiprocessing altogether.",That's ok by me.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,328,2019-04-29T19:49:11Z,2019-04-29T21:47:56Z,2019-04-29T21:48:00Z,MERGED,True,223,436,7,https://github.com/sloretz,Don't use multiprocessing in tests,3,[],https://github.com/ros2/rclpy/pull/328,https://github.com/sloretz,9,https://github.com/ros2/rclpy/pull/328#issuecomment-487750812,"Blocks #319
Some tests use the multiprocessing module to run tests in another process. On linux this uses fork(), which is not safe to do when using multiple threads.
From http://man7.org/linux/man-pages/man2/fork.2.html
The child process is created with a single thread—the one that
          called fork().  The entire virtual address space of the parent is
          replicated in the child, including the states of mutexes,
          condition variables, and other pthreads objects;

This means the child only has one thread, but objects with references to other threads exist. If another test does not call destroy_node() then the fork will get a copy of that node, including a copy of an eprosima::fastrtps::rtps::ChannelResource which has a reference to a thread that only exists in the parent. When the garbage collector runs in the child, the child's the copy of the node will block forever when it the ChannelResource tries to join() the non-existent thread.
It should be possible to work around this by changing the multiprocessing module to use the spawn method instead of fork, but for some reason multiprocessing.Pool.apply() deadlocks in my python environment with trivial functions when using spawn, so I rewrote these tests to get rid of multiprocessing altogether.","CI (testing rclpy)

Linux 
Linux-aarch64 
macOS 
Windows 

Assuming CI comes back green, I'll rebase and merge to preserve the commit renaming the action test files in e65e018",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,329,2019-04-29T21:47:36Z,2019-04-29T22:31:55Z,2019-04-29T22:32:00Z,MERGED,True,5,16,1,https://github.com/clalancette,Remove most of the timing checks in test_executor,1,[],https://github.com/ros2/rclpy/pull/329,https://github.com/clalancette,1,https://github.com/ros2/rclpy/pull/329,"The threaded sleep waits at least 0.1 seconds from when it
is started, but there are no guarantees on when the other
thread gets scheduled in to finish the testing.  Thus, just
remove the various timing checks and just make sure that the
future completes; if it doesn't, it will get picked up by
the overall test timeout.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
Fixes ros2/build_farmer#187
CI:

Linux 
Linux-aarch64 
macOS 
Windows","The threaded sleep waits at least 0.1 seconds from when it
is started, but there are no guarantees on when the other
thread gets scheduled in to finish the testing.  Thus, just
remove the various timing checks and just make sure that the
future completes; if it doesn't, it will get picked up by
the overall test timeout.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
Fixes ros2/build_farmer#187
CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,329,2019-04-29T21:47:36Z,2019-04-29T22:31:55Z,2019-04-29T22:32:00Z,MERGED,True,5,16,1,https://github.com/clalancette,Remove most of the timing checks in test_executor,1,[],https://github.com/ros2/rclpy/pull/329,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/329#issuecomment-487756469,"The threaded sleep waits at least 0.1 seconds from when it
is started, but there are no guarantees on when the other
thread gets scheduled in to finish the testing.  Thus, just
remove the various timing checks and just make sure that the
future completes; if it doesn't, it will get picked up by
the overall test timeout.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
Fixes ros2/build_farmer#187
CI:

Linux 
Linux-aarch64 
macOS 
Windows",Note that the failure on Linux-aarch64 is a different failure: ros2/build_farmer#186,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,329,2019-04-29T21:47:36Z,2019-04-29T22:31:55Z,2019-04-29T22:32:00Z,MERGED,True,5,16,1,https://github.com/clalancette,Remove most of the timing checks in test_executor,1,[],https://github.com/ros2/rclpy/pull/329,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/329#issuecomment-487766949,"The threaded sleep waits at least 0.1 seconds from when it
is started, but there are no guarantees on when the other
thread gets scheduled in to finish the testing.  Thus, just
remove the various timing checks and just make sure that the
future completes; if it doesn't, it will get picked up by
the overall test timeout.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
Fixes ros2/build_farmer#187
CI:

Linux 
Linux-aarch64 
macOS 
Windows","Thanks, merging.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,330,2019-04-29T22:54:40Z,2019-04-30T19:40:33Z,2019-04-30T19:40:39Z,MERGED,True,372,137,12,https://github.com/sloretz,Make `destroy_node` thread safe,10,[],https://github.com/ros2/rclpy/pull/330,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/330,"Blocks #319
I was going to make this part of #319, but I think it would be easier to review separately. This makes Node.handle use the Handle class from #308. It also adds handle.requires(another_handle) to make sure handle is destroyed before another_handle.
Problem this solves
#308 makes destroy_subscription thread safe by delaying destruction if the handle is currently being used. This makes it possible for a subscription to be destroyed after the node; which crashes when doing the same strategy with services using fast-rtps. See #319 (comment) for a better explanation.
Breaking changes

Previously node.destroy_node() either returned True or raised an exception. I removed the return value since it was only ever True.
Previously node.handle was set to None after the node was destroyed. Now it raises InvalidHandle when someone tries to use it after it is destroyed.
previously node.handle was a pycapsule and could be used directly. Now one must use:
with node.handle as node_capsule:
   ...


How handle.requires() works
Subscriptions must be destroyed before the node that created them, so
subscription.handle.requires(node.handle)

When node.handle.destroy() is called the subscription handle is destroyed first. Once the node handle is no longer being used it will mark itself invalid so no one else can use it. Then the node handle tells the subscription handle to destroy itself. Once the subscription handle is no longer in use it will delete itself, and then tell the node it can destroy itself.
If the user does not call destroy() on either handle, the subscription handle holds a reference to the node handle so the subscription handle will be garbage collected first. The node handle only holds a weak reference to the subscription handle.
Next steps
After incorporating feedback, assuming this approach is OK I would like to merge this PR. Then I'll rebase #319 to make all the other entities require the node so everything can be destroyed safely.","Blocks #319
I was going to make this part of #319, but I think it would be easier to review separately. This makes Node.handle use the Handle class from #308. It also adds handle.requires(another_handle) to make sure handle is destroyed before another_handle.
Problem this solves
#308 makes destroy_subscription thread safe by delaying destruction if the handle is currently being used. This makes it possible for a subscription to be destroyed after the node; which crashes when doing the same strategy with services using fast-rtps. See #319 (comment) for a better explanation.
Breaking changes

Previously node.destroy_node() either returned True or raised an exception. I removed the return value since it was only ever True.
Previously node.handle was set to None after the node was destroyed. Now it raises InvalidHandle when someone tries to use it after it is destroyed.
previously node.handle was a pycapsule and could be used directly. Now one must use:
with node.handle as node_capsule:
   ...


How handle.requires() works
Subscriptions must be destroyed before the node that created them, so
subscription.handle.requires(node.handle)

When node.handle.destroy() is called the subscription handle is destroyed first. Once the node handle is no longer being used it will mark itself invalid so no one else can use it. Then the node handle tells the subscription handle to destroy itself. Once the subscription handle is no longer in use it will delete itself, and then tell the node it can destroy itself.
If the user does not call destroy() on either handle, the subscription handle holds a reference to the node handle so the subscription handle will be garbage collected first. The node handle only holds a weak reference to the subscription handle.
Next steps
After incorporating feedback, assuming this approach is OK I would like to merge this PR. Then I'll rebase #319 to make all the other entities require the node so everything can be destroyed safely.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,330,2019-04-29T22:54:40Z,2019-04-30T19:40:33Z,2019-04-30T19:40:39Z,MERGED,True,372,137,12,https://github.com/sloretz,Make `destroy_node` thread safe,10,[],https://github.com/ros2/rclpy/pull/330,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/330#issuecomment-487772012,"Blocks #319
I was going to make this part of #319, but I think it would be easier to review separately. This makes Node.handle use the Handle class from #308. It also adds handle.requires(another_handle) to make sure handle is destroyed before another_handle.
Problem this solves
#308 makes destroy_subscription thread safe by delaying destruction if the handle is currently being used. This makes it possible for a subscription to be destroyed after the node; which crashes when doing the same strategy with services using fast-rtps. See #319 (comment) for a better explanation.
Breaking changes

Previously node.destroy_node() either returned True or raised an exception. I removed the return value since it was only ever True.
Previously node.handle was set to None after the node was destroyed. Now it raises InvalidHandle when someone tries to use it after it is destroyed.
previously node.handle was a pycapsule and could be used directly. Now one must use:
with node.handle as node_capsule:
   ...


How handle.requires() works
Subscriptions must be destroyed before the node that created them, so
subscription.handle.requires(node.handle)

When node.handle.destroy() is called the subscription handle is destroyed first. Once the node handle is no longer being used it will mark itself invalid so no one else can use it. Then the node handle tells the subscription handle to destroy itself. Once the subscription handle is no longer in use it will delete itself, and then tell the node it can destroy itself.
If the user does not call destroy() on either handle, the subscription handle holds a reference to the node handle so the subscription handle will be garbage collected first. The node handle only holds a weak reference to the subscription handle.
Next steps
After incorporating feedback, assuming this approach is OK I would like to merge this PR. Then I'll rebase #319 to make all the other entities require the node so everything can be destroyed safely.","CI (testing all packages above rclpy)

Linux  (test_params_yaml ros2/build_farmer#166)
Linux-aarch64  (test_params_yaml ros2/build_farmer#166)
macOS 
Windows  (test_params_yaml ros2/build_farmer#166)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,330,2019-04-29T22:54:40Z,2019-04-30T19:40:33Z,2019-04-30T19:40:39Z,MERGED,True,372,137,12,https://github.com/sloretz,Make `destroy_node` thread safe,10,[],https://github.com/ros2/rclpy/pull/330,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/330#issuecomment-488051951,"Blocks #319
I was going to make this part of #319, but I think it would be easier to review separately. This makes Node.handle use the Handle class from #308. It also adds handle.requires(another_handle) to make sure handle is destroyed before another_handle.
Problem this solves
#308 makes destroy_subscription thread safe by delaying destruction if the handle is currently being used. This makes it possible for a subscription to be destroyed after the node; which crashes when doing the same strategy with services using fast-rtps. See #319 (comment) for a better explanation.
Breaking changes

Previously node.destroy_node() either returned True or raised an exception. I removed the return value since it was only ever True.
Previously node.handle was set to None after the node was destroyed. Now it raises InvalidHandle when someone tries to use it after it is destroyed.
previously node.handle was a pycapsule and could be used directly. Now one must use:
with node.handle as node_capsule:
   ...


How handle.requires() works
Subscriptions must be destroyed before the node that created them, so
subscription.handle.requires(node.handle)

When node.handle.destroy() is called the subscription handle is destroyed first. Once the node handle is no longer being used it will mark itself invalid so no one else can use it. Then the node handle tells the subscription handle to destroy itself. Once the subscription handle is no longer in use it will delete itself, and then tell the node it can destroy itself.
If the user does not call destroy() on either handle, the subscription handle holds a reference to the node handle so the subscription handle will be garbage collected first. The node handle only holds a weak reference to the subscription handle.
Next steps
After incorporating feedback, assuming this approach is OK I would like to merge this PR. Then I'll rebase #319 to make all the other entities require the node so everything can be destroyed safely.","CI (testing just rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,330,2019-04-29T22:54:40Z,2019-04-30T19:40:33Z,2019-04-30T19:40:39Z,MERGED,True,372,137,12,https://github.com/sloretz,Make `destroy_node` thread safe,10,[],https://github.com/ros2/rclpy/pull/330,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/330#issuecomment-488059813,"Blocks #319
I was going to make this part of #319, but I think it would be easier to review separately. This makes Node.handle use the Handle class from #308. It also adds handle.requires(another_handle) to make sure handle is destroyed before another_handle.
Problem this solves
#308 makes destroy_subscription thread safe by delaying destruction if the handle is currently being used. This makes it possible for a subscription to be destroyed after the node; which crashes when doing the same strategy with services using fast-rtps. See #319 (comment) for a better explanation.
Breaking changes

Previously node.destroy_node() either returned True or raised an exception. I removed the return value since it was only ever True.
Previously node.handle was set to None after the node was destroyed. Now it raises InvalidHandle when someone tries to use it after it is destroyed.
previously node.handle was a pycapsule and could be used directly. Now one must use:
with node.handle as node_capsule:
   ...


How handle.requires() works
Subscriptions must be destroyed before the node that created them, so
subscription.handle.requires(node.handle)

When node.handle.destroy() is called the subscription handle is destroyed first. Once the node handle is no longer being used it will mark itself invalid so no one else can use it. Then the node handle tells the subscription handle to destroy itself. Once the subscription handle is no longer in use it will delete itself, and then tell the node it can destroy itself.
If the user does not call destroy() on either handle, the subscription handle holds a reference to the node handle so the subscription handle will be garbage collected first. The node handle only holds a weak reference to the subscription handle.
Next steps
After incorporating feedback, assuming this approach is OK I would like to merge this PR. Then I'll rebase #319 to make all the other entities require the node so everything can be destroyed safely.","CI (testing rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,330,2019-04-29T22:54:40Z,2019-04-30T19:40:33Z,2019-04-30T19:40:39Z,MERGED,True,372,137,12,https://github.com/sloretz,Make `destroy_node` thread safe,10,[],https://github.com/ros2/rclpy/pull/330,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/330#issuecomment-488074802,"Blocks #319
I was going to make this part of #319, but I think it would be easier to review separately. This makes Node.handle use the Handle class from #308. It also adds handle.requires(another_handle) to make sure handle is destroyed before another_handle.
Problem this solves
#308 makes destroy_subscription thread safe by delaying destruction if the handle is currently being used. This makes it possible for a subscription to be destroyed after the node; which crashes when doing the same strategy with services using fast-rtps. See #319 (comment) for a better explanation.
Breaking changes

Previously node.destroy_node() either returned True or raised an exception. I removed the return value since it was only ever True.
Previously node.handle was set to None after the node was destroyed. Now it raises InvalidHandle when someone tries to use it after it is destroyed.
previously node.handle was a pycapsule and could be used directly. Now one must use:
with node.handle as node_capsule:
   ...


How handle.requires() works
Subscriptions must be destroyed before the node that created them, so
subscription.handle.requires(node.handle)

When node.handle.destroy() is called the subscription handle is destroyed first. Once the node handle is no longer being used it will mark itself invalid so no one else can use it. Then the node handle tells the subscription handle to destroy itself. Once the subscription handle is no longer in use it will delete itself, and then tell the node it can destroy itself.
If the user does not call destroy() on either handle, the subscription handle holds a reference to the node handle so the subscription handle will be garbage collected first. The node handle only holds a weak reference to the subscription handle.
Next steps
After incorporating feedback, assuming this approach is OK I would like to merge this PR. Then I'll rebase #319 to make all the other entities require the node so everything can be destroyed safely.","CI (testing rclpy with 8c95ea6)

Linux 
Linux-aarch64 
macOS 
Windows",True,{'THUMBS_UP': ['https://github.com/dirk-thomas']}
ros2/rclpy,https://github.com/ros2/rclpy,332,2019-05-01T01:09:54Z,2019-05-01T23:32:45Z,2019-05-01T23:32:50Z,MERGED,True,33,33,4,https://github.com/jacobperron,Use new test interface definitions,3,[],https://github.com/ros2/rclpy/pull/332,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/332,Connects to ros2/rcl_interfaces#58,Connects to ros2/rcl_interfaces#58,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,332,2019-05-01T01:09:54Z,2019-05-01T23:32:45Z,2019-05-01T23:32:50Z,MERGED,True,33,33,4,https://github.com/jacobperron,Use new test interface definitions,3,[],https://github.com/ros2/rclpy/pull/332,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/332#issuecomment-488485335,Connects to ros2/rcl_interfaces#58,@jacobperron FYI it looks like there's a small merge conflict (git doesn't know which order to add the new import statements),True,{}
ros2/rclpy,https://github.com/ros2/rclpy,332,2019-05-01T01:09:54Z,2019-05-01T23:32:45Z,2019-05-01T23:32:50Z,MERGED,True,33,33,4,https://github.com/jacobperron,Use new test interface definitions,3,[],https://github.com/ros2/rclpy/pull/332,https://github.com/jacobperron,3,https://github.com/ros2/rclpy/pull/332#issuecomment-488489560,Connects to ros2/rcl_interfaces#58,@sloretz I've rebased and also updated the changes from master to use the new service name BasicTypes.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,333,2019-05-01T22:10:03Z,2019-05-02T00:11:26Z,2019-05-02T00:11:30Z,MERGED,True,82,46,2,https://github.com/sloretz,Make pub/sub/cli/srv/etc lists use @property on node,2,[],https://github.com/ros2/rclpy/pull/333,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/333,"I would call this API neutral, but it is possible this raises an exception in already broken downstream code. Edit: Changes APIs to be generators in 236b20a
Currently Node stores publishers, subscriptions, clients, ... in lists on itself. These names are pretty generic, and since we expect users to inherit from Node there is a risk of the names colliding. This is a problem because the executor uses these lists to add stuff to a wait set. This PR uses @property to at least prevent the attribute from being assigned a different object.","I would call this API neutral, but it is possible this raises an exception in already broken downstream code. Edit: Changes APIs to be generators in 236b20a
Currently Node stores publishers, subscriptions, clients, ... in lists on itself. These names are pretty generic, and since we expect users to inherit from Node there is a risk of the names colliding. This is a problem because the executor uses these lists to add stuff to a wait set. This PR uses @property to at least prevent the attribute from being assigned a different object.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,333,2019-05-01T22:10:03Z,2019-05-02T00:11:26Z,2019-05-02T00:11:30Z,MERGED,True,82,46,2,https://github.com/sloretz,Make pub/sub/cli/srv/etc lists use @property on node,2,[],https://github.com/ros2/rclpy/pull/333,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/333#issuecomment-488474253,"I would call this API neutral, but it is possible this raises an exception in already broken downstream code. Edit: Changes APIs to be generators in 236b20a
Currently Node stores publishers, subscriptions, clients, ... in lists on itself. These names are pretty generic, and since we expect users to inherit from Node there is a risk of the names colliding. This is a problem because the executor uses these lists to add stuff to a wait set. This PR uses @property to at least prevent the attribute from being assigned a different object.","CI (testing rclpy, I ran a local test using --packages-above rclpy and saw no test failures so I assume all downstream code is ok with these being generators)

Linux 
Linux-aarch64 
macOS 
Windows  (Failed to delete workspace ros2/build_farmer#161)

Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,333,2019-05-01T22:10:03Z,2019-05-02T00:11:26Z,2019-05-02T00:11:30Z,MERGED,True,82,46,2,https://github.com/sloretz,Make pub/sub/cli/srv/etc lists use @property on node,2,[],https://github.com/ros2/rclpy/pull/333,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/333#issuecomment-488498883,"I would call this API neutral, but it is possible this raises an exception in already broken downstream code. Edit: Changes APIs to be generators in 236b20a
Currently Node stores publishers, subscriptions, clients, ... in lists on itself. These names are pretty generic, and since we expect users to inherit from Node there is a risk of the names colliding. This is a problem because the executor uses these lists to add stuff to a wait set. This PR uses @property to at least prevent the attribute from being assigned a different object.","CI after rebasing

Linux 
Linux-aarch64 
macOS 
Windows  (New unrelated warnings fixed by ros2/rosidl#375)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,333,2019-05-01T22:10:03Z,2019-05-02T00:11:26Z,2019-05-02T00:11:30Z,MERGED,True,82,46,2,https://github.com/sloretz,Make pub/sub/cli/srv/etc lists use @property on node,2,[],https://github.com/ros2/rclpy/pull/333,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/333#issuecomment-488511396,"I would call this API neutral, but it is possible this raises an exception in already broken downstream code. Edit: Changes APIs to be generators in 236b20a
Currently Node stores publishers, subscriptions, clients, ... in lists on itself. These names are pretty generic, and since we expect users to inherit from Node there is a risk of the names colliding. This is a problem because the executor uses these lists to add stuff to a wait set. This PR uses @property to at least prevent the attribute from being assigned a different object.",Since the rebase didn't change any lines (#332 changed adjacent lines and git didn't know which order to put the changes in) I'll assume that @dirk-thomas's approval still applies and merge.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,334,2019-05-01T23:01:15Z,2019-05-01T23:51:17Z,2019-05-01T23:51:23Z,MERGED,True,3,0,1,https://github.com/sloretz,Ignore ValueError in SignalHandlerGuardCondition.__del__,2,['bug'],https://github.com/ros2/rclpy/pull/334,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/334,"This catches an exception that causes a warning to be printed during interpreter shutdown.
Steps to reproduce
ros2 run examples_rclcpp_minimal_action_server action_server_not_composable

ros2 action send_goal /fibonacci example_interfaces/Fibonacci '{order: 10}'

expected
$ ros2 action send_goal /fibonacci example_interfaces/Fibonacci '{order: 10}'
Waiting for an action server to become available...
Sending goal:
     order: 10

Goal accepted with ID: 7569e0d6d7624a59b80bd1960ce5c8ee

Result:
    sequence: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]

Goal finished with status: SUCCEEDED

actual
$ ros2 action send_goal /fibonacci example_interfaces/Fibonacci '{order: 10}'
Waiting for an action server to become available...
Sending goal:
     order: 10

Goal accepted with ID: 88ed3bca54be425b981be303eee95c27

Result:
    sequence: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]

Goal finished with status: SUCCEEDED
Canceling goal...
Failed to cancel goal
Exception ignored in: <bound method SignalHandlerGuardCondition.__del__ of <rclpy.signals.SignalHandlerGuardCondition object at 0x7f761c19c748>>
Traceback (most recent call last):
  File ""/home/sloretz/ws/ros2/install/rclpy/lib/python3.6/site-packages/rclpy/signals.py"", line 29, in __del__
  File ""/home/sloretz/ws/ros2/install/rclpy/lib/python3.6/site-packages/rclpy/signals.py"", line 36, in destroy
ValueError: Guard condition was not registered","This catches an exception that causes a warning to be printed during interpreter shutdown.
Steps to reproduce
ros2 run examples_rclcpp_minimal_action_server action_server_not_composable

ros2 action send_goal /fibonacci example_interfaces/Fibonacci '{order: 10}'

expected
$ ros2 action send_goal /fibonacci example_interfaces/Fibonacci '{order: 10}'
Waiting for an action server to become available...
Sending goal:
     order: 10

Goal accepted with ID: 7569e0d6d7624a59b80bd1960ce5c8ee

Result:
    sequence: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]

Goal finished with status: SUCCEEDED

actual
$ ros2 action send_goal /fibonacci example_interfaces/Fibonacci '{order: 10}'
Waiting for an action server to become available...
Sending goal:
     order: 10

Goal accepted with ID: 88ed3bca54be425b981be303eee95c27

Result:
    sequence: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]

Goal finished with status: SUCCEEDED
Canceling goal...
Failed to cancel goal
Exception ignored in: <bound method SignalHandlerGuardCondition.__del__ of <rclpy.signals.SignalHandlerGuardCondition object at 0x7f761c19c748>>
Traceback (most recent call last):
  File ""/home/sloretz/ws/ros2/install/rclpy/lib/python3.6/site-packages/rclpy/signals.py"", line 29, in __del__
  File ""/home/sloretz/ws/ros2/install/rclpy/lib/python3.6/site-packages/rclpy/signals.py"", line 36, in destroy
ValueError: Guard condition was not registered",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,334,2019-05-01T23:01:15Z,2019-05-01T23:51:17Z,2019-05-01T23:51:23Z,MERGED,True,3,0,1,https://github.com/sloretz,Ignore ValueError in SignalHandlerGuardCondition.__del__,2,['bug'],https://github.com/ros2/rclpy/pull/334,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/334#issuecomment-488489749,"This catches an exception that causes a warning to be printed during interpreter shutdown.
Steps to reproduce
ros2 run examples_rclcpp_minimal_action_server action_server_not_composable

ros2 action send_goal /fibonacci example_interfaces/Fibonacci '{order: 10}'

expected
$ ros2 action send_goal /fibonacci example_interfaces/Fibonacci '{order: 10}'
Waiting for an action server to become available...
Sending goal:
     order: 10

Goal accepted with ID: 7569e0d6d7624a59b80bd1960ce5c8ee

Result:
    sequence: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]

Goal finished with status: SUCCEEDED

actual
$ ros2 action send_goal /fibonacci example_interfaces/Fibonacci '{order: 10}'
Waiting for an action server to become available...
Sending goal:
     order: 10

Goal accepted with ID: 88ed3bca54be425b981be303eee95c27

Result:
    sequence: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]

Goal finished with status: SUCCEEDED
Canceling goal...
Failed to cancel goal
Exception ignored in: <bound method SignalHandlerGuardCondition.__del__ of <rclpy.signals.SignalHandlerGuardCondition object at 0x7f761c19c748>>
Traceback (most recent call last):
  File ""/home/sloretz/ws/ros2/install/rclpy/lib/python3.6/site-packages/rclpy/signals.py"", line 29, in __del__
  File ""/home/sloretz/ws/ros2/install/rclpy/lib/python3.6/site-packages/rclpy/signals.py"", line 36, in destroy
ValueError: Guard condition was not registered","CI (testing rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,335,2019-05-02T00:37:47Z,2019-05-03T00:59:59Z,2019-05-03T01:00:05Z,MERGED,True,9,28,6,https://github.com/sloretz,Remove extra references to node handle,1,[],https://github.com/ros2/rclpy/pull/335,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/335,After #319 entities don't need a reference to the node handle. The entity's pycapsule has the pointer already. This PR removes the extra references.,After #319 entities don't need a reference to the node handle. The entity's pycapsule has the pointer already. This PR removes the extra references.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,335,2019-05-02T00:37:47Z,2019-05-03T00:59:59Z,2019-05-03T01:00:05Z,MERGED,True,9,28,6,https://github.com/sloretz,Remove extra references to node handle,1,[],https://github.com/ros2/rclpy/pull/335,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/335#issuecomment-488763472,After #319 entities don't need a reference to the node handle. The entity's pycapsule has the pointer already. This PR removes the extra references.,"CI (test just rclpy)

Linux  (#337)
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,335,2019-05-02T00:37:47Z,2019-05-03T00:59:59Z,2019-05-03T01:00:05Z,MERGED,True,9,28,6,https://github.com/sloretz,Remove extra references to node handle,1,[],https://github.com/ros2/rclpy/pull/335,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/335#issuecomment-488858299,After #319 entities don't need a reference to the node handle. The entity's pycapsule has the pointer already. This PR removes the extra references.,Waiting until after #316 to run CI since it will conflict https://github.com/ros2/rclpy/pull/316/files#diff-129fafcf34261ae2f52bd43718815308R428,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,335,2019-05-02T00:37:47Z,2019-05-03T00:59:59Z,2019-05-03T01:00:05Z,MERGED,True,9,28,6,https://github.com/sloretz,Remove extra references to node handle,1,[],https://github.com/ros2/rclpy/pull/335,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/335#issuecomment-488874716,After #319 entities don't need a reference to the node handle. The entity's pycapsule has the pointer already. This PR removes the extra references.,"Looks like some CI machines are free (testing just rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,335,2019-05-02T00:37:47Z,2019-05-03T00:59:59Z,2019-05-03T01:00:05Z,MERGED,True,9,28,6,https://github.com/sloretz,Remove extra references to node handle,1,[],https://github.com/ros2/rclpy/pull/335,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/335#issuecomment-488882483,After #319 entities don't need a reference to the node handle. The entity's pycapsule has the pointer already. This PR removes the extra references.,Since I rebased without changes I assume @dirk-thomas's approval still applies.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,336,2019-05-02T01:39:54Z,2019-05-06T21:05:34Z,2019-05-06T21:05:38Z,MERGED,True,149,0,4,https://github.com/sloretz,Wake executor when entities created or destroyed,3,['bug'],https://github.com/ros2/rclpy/pull/336,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/336,"Replaces #206
Fixes #188
This wakes the executor when entities are created or destroyed. I added tests for creating entities waking the executor, but I haven't figured out how to add tests for destroying entities waking the executor.
This was unblocked by #308 which made it possible to write a test for creating entities.","Replaces #206
Fixes #188
This wakes the executor when entities are created or destroyed. I added tests for creating entities waking the executor, but I haven't figured out how to add tests for destroying entities waking the executor.
This was unblocked by #308 which made it possible to write a test for creating entities.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,336,2019-05-02T01:39:54Z,2019-05-06T21:05:34Z,2019-05-06T21:05:38Z,MERGED,True,149,0,4,https://github.com/sloretz,Wake executor when entities created or destroyed,3,['bug'],https://github.com/ros2/rclpy/pull/336,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/336#issuecomment-488531087,"Replaces #206
Fixes #188
This wakes the executor when entities are created or destroyed. I added tests for creating entities waking the executor, but I haven't figured out how to add tests for destroying entities waking the executor.
This was unblocked by #308 which made it possible to write a test for creating entities.","Proof that tests fail without 2b611a0
8: test/test_create_while_spinning.py FFFFF                                                                                                                                                                                                                                             [100%]
8: 
8: ========================================================================================================================================= FAILURES =========================================================================================================================================
8: ________________________________________________________________________________________________________________________ TestCreateWhileSpinning.test_client_server ________________________________________________________________________________________________________________________
8: 
8: self = <test.test_create_while_spinning.TestCreateWhileSpinning testMethod=test_client_server>
8: 
8:     def test_client_server(self):
8:         evt = threading.Event()
8:     
8:         def trigger_event(req, resp):
8:             nonlocal evt
8:             evt.set()
8:             return resp
8:     
8:         srv = self.node.create_service(BasicTypesSrv, 'foo', trigger_event)
8:         cli = self.node.create_client(BasicTypesSrv, 'foo')
8:         cli.wait_for_service()
8:         cli.call_async(BasicTypesSrv.Request())
8: >       assert evt.wait(TIMEOUT)
8: E       AssertionError: assert False
8: E        +  where False = <bound method Event.wait of <threading.Event object at 0x7fa1b4139438>>(0.5)
8: E        +    where <bound method Event.wait of <threading.Event object at 0x7fa1b4139438>> = <threading.Event object at 0x7fa1b4139438>.wait
8: 
8: test/test_create_while_spinning.py:74: AssertionError
8: _______________________________________________________________________________________________________________________ TestCreateWhileSpinning.test_guard_condition _______________________________________________________________________________________________________________________
8: 
8: self = <test.test_create_while_spinning.TestCreateWhileSpinning testMethod=test_guard_condition>
8: 
8:     def test_guard_condition(self):
8:         evt = threading.Event()
8:     
8:         guard = self.node.create_guard_condition(lambda: evt.set())
8:         guard.trigger()
8: >       assert evt.wait(TIMEOUT)
8: E       AssertionError: assert False
8: E        +  where False = <bound method Event.wait of <threading.Event object at 0x7fa1b41649e8>>(0.5)
8: E        +    where <bound method Event.wait of <threading.Event object at 0x7fa1b41649e8>> = <threading.Event object at 0x7fa1b41649e8>.wait
8: 
8: test/test_create_while_spinning.py:81: AssertionError
8: ______________________________________________________________________________________________________________________ TestCreateWhileSpinning.test_publish_subscribe ______________________________________________________________________________________________________________________
8: 
8: self = <test.test_create_while_spinning.TestCreateWhileSpinning testMethod=test_publish_subscribe>
8: 
8:     def test_publish_subscribe(self):
8:         evt = threading.Event()
8:         sub = self.node.create_subscription(BasicTypes, 'foo', lambda msg: evt.set())
8:         pub = self.node.create_publisher(BasicTypes, 'foo')
8:         pub.publish(BasicTypes())
8: >       assert evt.wait(TIMEOUT)
8: E       AssertionError: assert False
8: E        +  where False = <bound method Event.wait of <threading.Event object at 0x7fa1b4e85208>>(0.5)
8: E        +    where <bound method Event.wait of <threading.Event object at 0x7fa1b4e85208>> = <threading.Event object at 0x7fa1b4e85208>.wait
8: 
8: test/test_create_while_spinning.py:60: AssertionError
8: ____________________________________________________________________________________________________________________________ TestCreateWhileSpinning.test_timer ____________________________________________________________________________________________________________________________
8: 
8: self = <test.test_create_while_spinning.TestCreateWhileSpinning testMethod=test_timer>
8: 
8:     def test_timer(self):
8:         evt = threading.Event()
8:     
8:         tmr = self.node.create_timer(TIMEOUT / 10, lambda: evt.set())
8: >       assert evt.wait(TIMEOUT)
8: E       AssertionError: assert False
8: E        +  where False = <bound method Event.wait of <threading.Event object at 0x7fa1b41ad358>>(0.5)
8: E        +    where <bound method Event.wait of <threading.Event object at 0x7fa1b41ad358>> = <threading.Event object at 0x7fa1b41ad358>.wait
8: 
8: test/test_create_while_spinning.py:87: AssertionError
8: __________________________________________________________________________________________________________________________ TestCreateWhileSpinning.test_waitable ___________________________________________________________________________________________________________________________
8: 
8: self = <test.test_create_while_spinning.TestCreateWhileSpinning testMethod=test_waitable>
8: 
8:     def test_waitable(self):
8:         evt = threading.Event()
8:     
8:         class DummyWaitable(Waitable):
8:     
8:             def __init__(self):
8:                 super().__init__(ReentrantCallbackGroup())
8:     
8:             def is_ready(self, wait_set):
8:                 return False
8:     
8:             def take_data(self):
8:                 return None
8:     
8:             async def execute(self, taken_data):
8:                 pass
8:     
8:             def get_num_entities(self):
8:                 return NumberOfEntities(0, 0, 0, 0, 0)
8:     
8:             def add_to_wait_set(self, wait_set):
8:                 nonlocal evt
8:                 evt.set()
8:                 pass
8:     
8:         self.node.add_waitable(DummyWaitable())
8: >       assert evt.wait(TIMEOUT)
8: E       AssertionError: assert False
8: E        +  where False = <bound method Event.wait of <threading.Event object at 0x7fa1b4109908>>(0.5)
8: E        +    where <bound method Event.wait of <threading.Event object at 0x7fa1b4109908>> = <threading.Event object at 0x7fa1b4109908>.wait
8: 
8: test/test_create_while_spinning.py:115: AssertionError",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,336,2019-05-02T01:39:54Z,2019-05-06T21:05:34Z,2019-05-06T21:05:38Z,MERGED,True,149,0,4,https://github.com/sloretz,Wake executor when entities created or destroyed,3,['bug'],https://github.com/ros2/rclpy/pull/336,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/336#issuecomment-488531307,"Replaces #206
Fixes #188
This wakes the executor when entities are created or destroyed. I added tests for creating entities waking the executor, but I haven't figured out how to add tests for destroying entities waking the executor.
This was unblocked by #308 which made it possible to write a test for creating entities.","CI (testing rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,336,2019-05-02T01:39:54Z,2019-05-06T21:05:34Z,2019-05-06T21:05:38Z,MERGED,True,149,0,4,https://github.com/sloretz,Wake executor when entities created or destroyed,3,['bug'],https://github.com/ros2/rclpy/pull/336,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/336#issuecomment-488745816,"Replaces #206
Fixes #188
This wakes the executor when entities are created or destroyed. I added tests for creating entities waking the executor, but I haven't figured out how to add tests for destroying entities waking the executor.
This was unblocked by #308 which made it possible to write a test for creating entities.","CI (testing just rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,336,2019-05-02T01:39:54Z,2019-05-06T21:05:34Z,2019-05-06T21:05:38Z,MERGED,True,149,0,4,https://github.com/sloretz,Wake executor when entities created or destroyed,3,['bug'],https://github.com/ros2/rclpy/pull/336,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/336#issuecomment-488809520,"Replaces #206
Fixes #188
This wakes the executor when entities are created or destroyed. I added tests for creating entities waking the executor, but I haven't figured out how to add tests for destroying entities waking the executor.
This was unblocked by #308 which made it possible to write a test for creating entities.","CI (testing just rclpy after rebasing on master)

Linux 
Linux-aarch64 
macOS Edit: Canceled job in build queue, will wait until after API freeze
Windows  (faild to delete workspace ros2/build_farmer#161)

Edit: WIll re-run windows CI post API freeze",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,336,2019-05-02T01:39:54Z,2019-05-06T21:05:34Z,2019-05-06T21:05:38Z,MERGED,True,149,0,4,https://github.com/sloretz,Wake executor when entities created or destroyed,3,['bug'],https://github.com/ros2/rclpy/pull/336,https://github.com/sloretz,6,https://github.com/ros2/rclpy/pull/336#issuecomment-489766488,"Replaces #206
Fixes #188
This wakes the executor when entities are created or destroyed. I added tests for creating entities waking the executor, but I haven't figured out how to add tests for destroying entities waking the executor.
This was unblocked by #308 which made it possible to write a test for creating entities.","CI (testing just rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,337,2019-05-02T17:53:53Z,2019-05-02T17:59:32Z,2019-05-02T17:59:37Z,MERGED,True,3,3,1,https://github.com/mjcarroll,API updates for RMW preallocation work.,1,[],https://github.com/ros2/rclpy/pull/337,https://github.com/mjcarroll,1,https://github.com/ros2/rclpy/pull/337,Signed-off-by: Michael Carroll michael@openrobotics.org,Signed-off-by: Michael Carroll michael@openrobotics.org,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,338,2019-05-03T14:12:38Z,2019-05-06T18:45:17Z,2019-05-06T18:46:04Z,MERGED,True,146,55,1,https://github.com/hidmic,Improve signal handling,5,[],https://github.com/ros2/rclpy/pull/338,https://github.com/hidmic,1,https://github.com/ros2/rclpy/pull/338,This pull request rewrites rclpy signal handling code after rclcpp. Fixes #327.,This pull request rewrites rclpy signal handling code after rclcpp. Fixes #327.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,338,2019-05-03T14:12:38Z,2019-05-06T18:45:17Z,2019-05-06T18:46:04Z,MERGED,True,146,55,1,https://github.com/hidmic,Improve signal handling,5,[],https://github.com/ros2/rclpy/pull/338,https://github.com/hidmic,2,https://github.com/ros2/rclpy/pull/338#issuecomment-489109987,This pull request rewrites rclpy signal handling code after rclcpp. Fixes #327.,"CI (testing rclpy and test_communication using Opensplice)

Linux 
Linux-aarch64  (timeout failure on a cross vendor pubsub test, seems unrelated)
macOS 
Windows  (stack corruption for Connext, also occurred for CI of an unrelated patch)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,338,2019-05-03T14:12:38Z,2019-05-06T18:45:17Z,2019-05-06T18:46:04Z,MERGED,True,146,55,1,https://github.com/hidmic,Improve signal handling,5,[],https://github.com/ros2/rclpy/pull/338,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/338#issuecomment-489213902,This pull request rewrites rclpy signal handling code after rclcpp. Fixes #327.,"hidmic requested a review from sloretz a minute ago

@hidmic Review is above, or did you already make changes and they're just not pushed yet?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,338,2019-05-03T14:12:38Z,2019-05-06T18:45:17Z,2019-05-06T18:46:04Z,MERGED,True,146,55,1,https://github.com/hidmic,Improve signal handling,5,[],https://github.com/ros2/rclpy/pull/338,https://github.com/hidmic,4,https://github.com/ros2/rclpy/pull/338#issuecomment-489214989,This pull request rewrites rclpy signal handling code after rclcpp. Fixes #327.,"Review is above, or did you already make changes and they're just not pushed yet?

I had not refreshed my browser :) Sorry!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,338,2019-05-03T14:12:38Z,2019-05-06T18:45:17Z,2019-05-06T18:46:04Z,MERGED,True,146,55,1,https://github.com/hidmic,Improve signal handling,5,[],https://github.com/ros2/rclpy/pull/338,https://github.com/hidmic,5,https://github.com/ros2/rclpy/pull/338#issuecomment-489217955,This pull request rewrites rclpy signal handling code after rclcpp. Fixes #327.,"Sorry about the force push, I just hit compilation errors I think are related to repos being out of sync.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,338,2019-05-03T14:12:38Z,2019-05-06T18:45:17Z,2019-05-06T18:46:04Z,MERGED,True,146,55,1,https://github.com/hidmic,Improve signal handling,5,[],https://github.com/ros2/rclpy/pull/338,https://github.com/hidmic,6,https://github.com/ros2/rclpy/pull/338#issuecomment-489696967,This pull request rewrites rclpy signal handling code after rclcpp. Fixes #327.,"Alright, CI is passing but for seemingly unrelated test failures. I'll try to reproduce stack corruption again and based on that we can merge (or not). Opinions in favor or against are welcome.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,338,2019-05-03T14:12:38Z,2019-05-06T18:45:17Z,2019-05-06T18:46:04Z,MERGED,True,146,55,1,https://github.com/hidmic,Improve signal handling,5,[],https://github.com/ros2/rclpy/pull/338,https://github.com/hidmic,7,https://github.com/ros2/rclpy/pull/338#issuecomment-489731013,This pull request rewrites rclpy signal handling code after rclcpp. Fixes #327.,"With the latest approval and after getting confirmation during our internal sync that seen failures also occur on master, I merged this patch.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,339,2019-05-05T23:55:28Z,2019-05-06T20:45:29Z,2019-05-06T20:45:34Z,MERGED,True,3,10,1,https://github.com/jubeira,Setting automatic declaration for initial parameters to False.,2,[],https://github.com/ros2/rclpy/pull/339,https://github.com/jubeira,1,https://github.com/ros2/rclpy/pull/339,Follow-up on #325; addressing this pending comment.,Follow-up on #325; addressing this pending comment.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,339,2019-05-05T23:55:28Z,2019-05-06T20:45:29Z,2019-05-06T20:45:34Z,MERGED,True,3,10,1,https://github.com/jubeira,Setting automatic declaration for initial parameters to False.,2,[],https://github.com/ros2/rclpy/pull/339,https://github.com/jubeira,2,https://github.com/ros2/rclpy/pull/339#issuecomment-489486201,Follow-up on #325; addressing this pending comment.,"CI:

Linux: 
Linux-aarch64: 
Mac OS: 
Windows: 

Only known tests are failing AFAIU.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,339,2019-05-05T23:55:28Z,2019-05-06T20:45:29Z,2019-05-06T20:45:34Z,MERGED,True,3,10,1,https://github.com/jubeira,Setting automatic declaration for initial parameters to False.,2,[],https://github.com/ros2/rclpy/pull/339,https://github.com/jubeira,3,https://github.com/ros2/rclpy/pull/339#issuecomment-489619269,Follow-up on #325; addressing this pending comment.,/cc @hidmic,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,339,2019-05-05T23:55:28Z,2019-05-06T20:45:29Z,2019-05-06T20:45:34Z,MERGED,True,3,10,1,https://github.com/jubeira,Setting automatic declaration for initial parameters to False.,2,[],https://github.com/ros2/rclpy/pull/339,https://github.com/jubeira,4,https://github.com/ros2/rclpy/pull/339#issuecomment-489746971,Follow-up on #325; addressing this pending comment.,"CI results (same as above):

Linux: 
Linux-aarch64: 
Mac OS: 
Windows:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,340,2019-05-06T21:01:23Z,2019-05-06T22:08:11Z,2019-05-06T22:08:15Z,MERGED,True,4,2,2,https://github.com/sloretz,Fix assert_liveliness use of node and publisher capsules,1,[],https://github.com/ros2/rclpy/pull/340,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/340,"I overlooked this when merging #313. The publisher and node pycapsules are managed by self.handle instead of using node_handle and publisher_handle.
There are no tests for these APIs at the moment.","I overlooked this when merging #313. The publisher and node pycapsules are managed by self.handle instead of using node_handle and publisher_handle.
There are no tests for these APIs at the moment.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,340,2019-05-06T21:01:23Z,2019-05-06T22:08:11Z,2019-05-06T22:08:15Z,MERGED,True,4,2,2,https://github.com/sloretz,Fix assert_liveliness use of node and publisher capsules,1,[],https://github.com/ros2/rclpy/pull/340,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/340#issuecomment-489792867,"I overlooked this when merging #313. The publisher and node pycapsules are managed by self.handle instead of using node_handle and publisher_handle.
There are no tests for these APIs at the moment.","CI (testing just rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,340,2019-05-06T21:01:23Z,2019-05-06T22:08:11Z,2019-05-06T22:08:15Z,MERGED,True,4,2,2,https://github.com/sloretz,Fix assert_liveliness use of node and publisher capsules,1,[],https://github.com/ros2/rclpy/pull/340,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/340#issuecomment-489801214,"I overlooked this when merging #313. The publisher and node pycapsules are managed by self.handle instead of using node_handle and publisher_handle.
There are no tests for these APIs at the moment.","CI looks good. test_timer with 0.01 period failed, which is surprising, but is very unlikely to be caused by this PR.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,343,2019-05-09T21:49:43Z,2019-05-10T15:13:15Z,2019-05-10T15:13:20Z,MERGED,True,7,7,2,https://github.com/jacobperron,Ignore flake8 error 'imported but unused',2,[],https://github.com/ros2/rclpy/pull/343,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/343,"Fixes http://build.ros2.org/job/Ddev__rclpy__ubuntu_bionic_amd64/27/testReport/
Build up to rclpy; test rclpy:

Linux 
Linux-aarch64 
macOS 
Windows","Fixes http://build.ros2.org/job/Ddev__rclpy__ubuntu_bionic_amd64/27/testReport/
Build up to rclpy; test rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,344,2019-05-10T23:25:51Z,2019-05-14T16:29:24Z,2019-05-14T16:29:29Z,MERGED,True,307,110,16,https://github.com/jacobperron,Encourage users to always provide a QoS history depth,7,[],https://github.com/ros2/rclpy/pull/344,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/344,"Resolves #342


Added a new parameter to methods for creating publishers and subscriptions
The new parameter is required and must be a QoSProfile object or an integer value for the history depth.
For now, it is possible to not use the parameter for backwards compatibility, but a deprecation warning is made.


Add deprecation warning when constructing a QoSProfile without a history depth
If the history setting is KEEP_ALL, then it is not required to pass the depth setting.","Resolves #342


Added a new parameter to methods for creating publishers and subscriptions
The new parameter is required and must be a QoSProfile object or an integer value for the history depth.
For now, it is possible to not use the parameter for backwards compatibility, but a deprecation warning is made.


Add deprecation warning when constructing a QoSProfile without a history depth
If the history setting is KEEP_ALL, then it is not required to pass the depth setting.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,344,2019-05-10T23:25:51Z,2019-05-14T16:29:24Z,2019-05-14T16:29:29Z,MERGED,True,307,110,16,https://github.com/jacobperron,Encourage users to always provide a QoS history depth,7,[],https://github.com/ros2/rclpy/pull/344,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/344#issuecomment-491456453,"Resolves #342


Added a new parameter to methods for creating publishers and subscriptions
The new parameter is required and must be a QoSProfile object or an integer value for the history depth.
For now, it is possible to not use the parameter for backwards compatibility, but a deprecation warning is made.


Add deprecation warning when constructing a QoSProfile without a history depth
If the history setting is KEEP_ALL, then it is not required to pass the depth setting.",@wjwwood I'm not sure if this exactly what we discussed. PTAL before I continue with services and actions.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,344,2019-05-10T23:25:51Z,2019-05-14T16:29:24Z,2019-05-14T16:29:29Z,MERGED,True,307,110,16,https://github.com/jacobperron,Encourage users to always provide a QoS history depth,7,[],https://github.com/ros2/rclpy/pull/344,https://github.com/jacobperron,3,https://github.com/ros2/rclpy/pull/344#issuecomment-491957740,"Resolves #342


Added a new parameter to methods for creating publishers and subscriptions
The new parameter is required and must be a QoSProfile object or an integer value for the history depth.
For now, it is possible to not use the parameter for backwards compatibility, but a deprecation warning is made.


Add deprecation warning when constructing a QoSProfile without a history depth
If the history setting is KEEP_ALL, then it is not required to pass the depth setting.","@wjwwood Thanks for the review!
I've address your comments and will continue to make similar changes for services and actions.
I've refactored the RMW to rclpy conversion function (ea2de90) so it constructs a QoSProfile with keyword arguments. This avoids deprecation warnings when importing rclpy.qos due to the construction of the default profiles.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,344,2019-05-10T23:25:51Z,2019-05-14T16:29:24Z,2019-05-14T16:29:29Z,MERGED,True,307,110,16,https://github.com/jacobperron,Encourage users to always provide a QoS history depth,7,[],https://github.com/ros2/rclpy/pull/344,https://github.com/jacobperron,4,https://github.com/ros2/rclpy/pull/344#issuecomment-492026651,"Resolves #342


Added a new parameter to methods for creating publishers and subscriptions
The new parameter is required and must be a QoSProfile object or an integer value for the history depth.
For now, it is possible to not use the parameter for backwards compatibility, but a deprecation warning is made.


Add deprecation warning when constructing a QoSProfile without a history depth
If the history setting is KEEP_ALL, then it is not required to pass the depth setting.",Rebased on master; ready for review.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,344,2019-05-10T23:25:51Z,2019-05-14T16:29:24Z,2019-05-14T16:29:29Z,MERGED,True,307,110,16,https://github.com/jacobperron,Encourage users to always provide a QoS history depth,7,[],https://github.com/ros2/rclpy/pull/344,https://github.com/jacobperron,5,https://github.com/ros2/rclpy/pull/344#issuecomment-492027425,"Resolves #342


Added a new parameter to methods for creating publishers and subscriptions
The new parameter is required and must be a QoSProfile object or an integer value for the history depth.
For now, it is possible to not use the parameter for backwards compatibility, but a deprecation warning is made.


Add deprecation warning when constructing a QoSProfile without a history depth
If the history setting is KEEP_ALL, then it is not required to pass the depth setting.",I forgot to find/replace usage of qos_profile_default with QoSProfile(depth=10). Doing that now.,True,{'THUMBS_UP': ['https://github.com/wjwwood']}
ros2/rclpy,https://github.com/ros2/rclpy,344,2019-05-10T23:25:51Z,2019-05-14T16:29:24Z,2019-05-14T16:29:29Z,MERGED,True,307,110,16,https://github.com/jacobperron,Encourage users to always provide a QoS history depth,7,[],https://github.com/ros2/rclpy/pull/344,https://github.com/jacobperron,6,https://github.com/ros2/rclpy/pull/344#issuecomment-492036589,"Resolves #342


Added a new parameter to methods for creating publishers and subscriptions
The new parameter is required and must be a QoSProfile object or an integer value for the history depth.
For now, it is possible to not use the parameter for backwards compatibility, but a deprecation warning is made.


Add deprecation warning when constructing a QoSProfile without a history depth
If the history setting is KEEP_ALL, then it is not required to pass the depth setting.","Linux 
Linux-aarch64  (Existing issue test_cli.test_params_yaml)
macOS  (Existing issue ros2/build_farmer#189)
Windows  (Existing issue test_cli.test_params_yaml)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,345,2019-05-13T21:39:24Z,2019-05-15T05:06:51Z,2019-05-15T05:07:10Z,MERGED,True,738,32,3,https://github.com/jubeira,Parameter handling improvements.,2,[],https://github.com/ros2/rclpy/pull/345,https://github.com/jubeira,1,https://github.com/ros2/rclpy/pull/345,"Closes #341.
There are some details that still need a bit of attention (see #341 (comment)). The PR includes a proposal for set_descriptor as described in the comment.
On the other hand, I'd like some input about the optional signature using Parameter as input for declare_parameter (see comment). Is it worth implementing it even if it only applies to declare_parameter but not declare_parameters?
Other than that, this should be ready for an initial review.","Closes #341.
There are some details that still need a bit of attention (see #341 (comment)). The PR includes a proposal for set_descriptor as described in the comment.
On the other hand, I'd like some input about the optional signature using Parameter as input for declare_parameter (see comment). Is it worth implementing it even if it only applies to declare_parameter but not declare_parameters?
Other than that, this should be ready for an initial review.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,345,2019-05-13T21:39:24Z,2019-05-15T05:06:51Z,2019-05-15T05:07:10Z,MERGED,True,738,32,3,https://github.com/jubeira,Parameter handling improvements.,2,[],https://github.com/ros2/rclpy/pull/345,https://github.com/wjwwood,2,https://github.com/ros2/rclpy/pull/345#issuecomment-492002914,"Closes #341.
There are some details that still need a bit of attention (see #341 (comment)). The PR includes a proposal for set_descriptor as described in the comment.
On the other hand, I'd like some input about the optional signature using Parameter as input for declare_parameter (see comment). Is it worth implementing it even if it only applies to declare_parameter but not declare_parameters?
Other than that, this should be ready for an initial review.","On the other hand, I'd like some input about the optional signature using Parameter as input for declare_parameter (see comment). Is it worth implementing it even if it only applies to declare_parameter but not declare_parameters?

I don't think it is necessary. It just looked more consistent.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,345,2019-05-13T21:39:24Z,2019-05-15T05:06:51Z,2019-05-15T05:07:10Z,MERGED,True,738,32,3,https://github.com/jubeira,Parameter handling improvements.,2,[],https://github.com/ros2/rclpy/pull/345,https://github.com/jubeira,3,https://github.com/ros2/rclpy/pull/345#issuecomment-492420955,"Closes #341.
There are some details that still need a bit of attention (see #341 (comment)). The PR includes a proposal for set_descriptor as described in the comment.
On the other hand, I'd like some input about the optional signature using Parameter as input for declare_parameter (see comment). Is it worth implementing it even if it only applies to declare_parameter but not declare_parameters?
Other than that, this should be ready for an initial review.","CI:

Linux: 
Linux-aarch64: 
Mac OS: 
Windows: 

@wjwwood Errors look unrelated; I think we can proceed with this one.",True,{'THUMBS_UP': ['https://github.com/jacobperron']}
ros2/rclpy,https://github.com/ros2/rclpy,345,2019-05-13T21:39:24Z,2019-05-15T05:06:51Z,2019-05-15T05:07:10Z,MERGED,True,738,32,3,https://github.com/jubeira,Parameter handling improvements.,2,[],https://github.com/ros2/rclpy/pull/345,https://github.com/wjwwood,4,https://github.com/ros2/rclpy/pull/345#issuecomment-492505022,"Closes #341.
There are some details that still need a bit of attention (see #341 (comment)). The PR includes a proposal for set_descriptor as described in the comment.
On the other hand, I'd like some input about the optional signature using Parameter as input for declare_parameter (see comment). Is it worth implementing it even if it only applies to declare_parameter but not declare_parameters?
Other than that, this should be ready for an initial review.",Thanks @jubeira!,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,346,2019-05-15T19:54:19Z,2019-05-15T20:10:15Z,2019-05-15T20:10:19Z,MERGED,True,2,3,1,https://github.com/dirk-thomas,update test since unicode characters are allowed now,1,[],https://github.com/ros2/rclpy/pull/346,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/346,Related to ros2/rosidl_python#57.,Related to ros2/rosidl_python#57.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,347,2019-05-15T21:14:23Z,2019-05-16T16:43:12Z,2019-05-16T16:43:17Z,MERGED,True,334,164,5,https://github.com/jubeira,Parameter flexibility enhancements,4,[],https://github.com/ros2/rclpy/pull/347,https://github.com/jubeira,1,https://github.com/ros2/rclpy/pull/347,"This PR is another iteration for #341.

Addresses this comment about declare_parameter and declare_parameters usability.
Allows creating Parameter objects without specifying the type, which is deduced in the constructor without changing the API.
Prevents service calls from raising exceptions for set and describe parameters (as in ros2/rclcpp#718).","This PR is another iteration for #341.

Addresses this comment about declare_parameter and declare_parameters usability.
Allows creating Parameter objects without specifying the type, which is deduced in the constructor without changing the API.
Prevents service calls from raising exceptions for set and describe parameters (as in ros2/rclcpp#718).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,347,2019-05-15T21:14:23Z,2019-05-16T16:43:12Z,2019-05-16T16:43:17Z,MERGED,True,334,164,5,https://github.com/jubeira,Parameter flexibility enhancements,4,[],https://github.com/ros2/rclpy/pull/347,https://github.com/jubeira,2,https://github.com/ros2/rclpy/pull/347#issuecomment-493109870,"This PR is another iteration for #341.

Addresses this comment about declare_parameter and declare_parameters usability.
Allows creating Parameter objects without specifying the type, which is deduced in the constructor without changing the API.
Prevents service calls from raising exceptions for set and describe parameters (as in ros2/rclcpp#718).","CI:

Linux: 
Linux-aarch64: 
Mac OS: 
Windows: 

There were some failures but they seem unrelated (on cpp side).
I think it should be safe to merge.",True,{'THUMBS_UP': ['https://github.com/dirk-thomas']}
ros2/rclpy,https://github.com/ros2/rclpy,348,2019-05-16T14:05:44Z,2019-05-16T14:25:36Z,2019-05-16T14:25:43Z,MERGED,True,2,1,1,https://github.com/mjcarroll,Update troubleshooting reference to index.ros.org,1,[],https://github.com/ros2/rclpy/pull/348,https://github.com/mjcarroll,1,https://github.com/ros2/rclpy/pull/348,"Since documentation has moved.
Signed-off-by: Michael Carroll michael@openrobotics.org","Since documentation has moved.
Signed-off-by: Michael Carroll michael@openrobotics.org",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,349,2019-05-17T00:31:25Z,2019-05-17T18:50:03Z,2019-05-17T18:59:37Z,MERGED,True,1,1,1,https://github.com/emersonknapp,Don't wrap QoS Event callback argument in a list,1,['in progress'],https://github.com/ros2/rclpy/pull/349,https://github.com/emersonknapp,1,https://github.com/ros2/rclpy/pull/349,"It was a mistake introduced in a review feedback on the original PR #316
Signed-off-by: Emerson Knapp eknapp@amazon.com","It was a mistake introduced in a review feedback on the original PR #316
Signed-off-by: Emerson Knapp eknapp@amazon.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,349,2019-05-17T00:31:25Z,2019-05-17T18:50:03Z,2019-05-17T18:59:37Z,MERGED,True,1,1,1,https://github.com/emersonknapp,Don't wrap QoS Event callback argument in a list,1,['in progress'],https://github.com/ros2/rclpy/pull/349,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/349#issuecomment-493281175,"It was a mistake introduced in a review feedback on the original PR #316
Signed-off-by: Emerson Knapp eknapp@amazon.com","It was a mistake introduced in a review feedback on the original PR

Please reference the original PR.
I assume this part is not covered by any tests atm?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,349,2019-05-17T00:31:25Z,2019-05-17T18:50:03Z,2019-05-17T18:59:37Z,MERGED,True,1,1,1,https://github.com/emersonknapp,Don't wrap QoS Event callback argument in a list,1,['in progress'],https://github.com/ros2/rclpy/pull/349,https://github.com/emersonknapp,3,https://github.com/ros2/rclpy/pull/349#issuecomment-493281718,"It was a mistake introduced in a review feedback on the original PR #316
Signed-off-by: Emerson Knapp eknapp@amazon.com","Updated the description. Correct, it's not covered by any tests right now. I'll add one to this change - no sense allowing future regression.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,349,2019-05-17T00:31:25Z,2019-05-17T18:50:03Z,2019-05-17T18:59:37Z,MERGED,True,1,1,1,https://github.com/emersonknapp,Don't wrap QoS Event callback argument in a list,1,['in progress'],https://github.com/ros2/rclpy/pull/349,https://github.com/dirk-thomas,4,https://github.com/ros2/rclpy/pull/349#issuecomment-493510481,"It was a mistake introduced in a review feedback on the original PR #316
Signed-off-by: Emerson Knapp eknapp@amazon.com",@thomas-moulard Please run CI for this. I would rather get the fix merged without a test before releasing new versions today. The test can be added in a follow up PR.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,349,2019-05-17T00:31:25Z,2019-05-17T18:50:03Z,2019-05-17T18:59:37Z,MERGED,True,1,1,1,https://github.com/emersonknapp,Don't wrap QoS Event callback argument in a list,1,['in progress'],https://github.com/ros2/rclpy/pull/349,https://github.com/thomas-moulard,5,https://github.com/ros2/rclpy/pull/349#issuecomment-493516347,"It was a mistake introduced in a review feedback on the original PR #316
Signed-off-by: Emerson Knapp eknapp@amazon.com",Ack. I'm on it,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,349,2019-05-17T00:31:25Z,2019-05-17T18:50:03Z,2019-05-17T18:59:37Z,MERGED,True,1,1,1,https://github.com/emersonknapp,Don't wrap QoS Event callback argument in a list,1,['in progress'],https://github.com/ros2/rclpy/pull/349,https://github.com/emersonknapp,6,https://github.com/ros2/rclpy/pull/349#issuecomment-493517568,"It was a mistake introduced in a review feedback on the original PR #316
Signed-off-by: Emerson Knapp eknapp@amazon.com","@thomas-moulard
gist: https://gist.githubusercontent.com/emersonknapp/79bd23760c4169a19a84dd5de1212fbc/raw/d324137d2a575017da8fb879c1e2a761a8d3a9ed/ros2.repos
build: --packages-up-to rclpy
test: --packages-select rclpy
job: ci_launcher",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,349,2019-05-17T00:31:25Z,2019-05-17T18:50:03Z,2019-05-17T18:59:37Z,MERGED,True,1,1,1,https://github.com/emersonknapp,Don't wrap QoS Event callback argument in a list,1,['in progress'],https://github.com/ros2/rclpy/pull/349,https://github.com/thomas-moulard,7,https://github.com/ros2/rclpy/pull/349#issuecomment-493518392,"It was a mistake introduced in a review feedback on the original PR #316
Signed-off-by: Emerson Knapp eknapp@amazon.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,351,2019-05-17T20:27:43Z,2019-05-17T21:32:07Z,2019-05-17T21:52:46Z,MERGED,True,3,1,1,https://github.com/sloretz,Create RLock() early to avoid exception at shutdown,1,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/351,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/351,"This is attempt to fix an exception raised in interpreter shutdown: https://ci.ros2.org/view/nightly/job/nightly_linux_debug/1194/testReport/launch_testing_ros.test/test_examples/test_examples_talker_listener_test_py_/
Traceback
[listener-2] Exception ignored in: <bound method Executor.__del__ of <rclpy.executors.SingleThreadedExecutor object at 0x7f6c2fbacc50>>
[listener-2] Traceback (most recent call last):
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/executors.py"", line 223, in __del__
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/signals.py"", line 40, in destroy
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/guard_condition.py"", line 41, in destroy
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/handle.py"", line 95, in destroy
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/handle.py"", line 156, in __destroy
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/handle.py"", line 160, in __destroy_dependents
[listener-2]   File ""/usr/lib/python3.6/threading.py"", line 84, in RLock
[listener-2] TypeError: 'NoneType' object is not callable


I think this is happening because it's calling threading.RLock() at interpreter shutdown (via Executor.__del__).

  
    
      rclpy/rclpy/rclpy/handle.py
    
    
         Line 160
      in
      bfcb40c
    
  
  
    

        
          
           deps_lock = RLock() 
        
    
  


threading.RLock() is a method that uses a module scope variable beginning with a single underscore.
 return _PyRLock(*args, **kwargs)
Python guarantees that module variables beginning with a single underscore are garbage collected before the rest of the module.

del() can be executed during interpreter shutdown. As a consequence, the global variables it
needs to access (including other modules) may already have been deleted or set to None. Python
guarantees that globals whose name begins with a single underscore are deleted from their module
before other globals are deleted ...

I think threading._PyRLock was garbage collected and set to None before the executor was garbage collected. This PR tries to fix it by calling RLock() when the handle is created and holding onto it.","This is attempt to fix an exception raised in interpreter shutdown: https://ci.ros2.org/view/nightly/job/nightly_linux_debug/1194/testReport/launch_testing_ros.test/test_examples/test_examples_talker_listener_test_py_/
Traceback
[listener-2] Exception ignored in: <bound method Executor.__del__ of <rclpy.executors.SingleThreadedExecutor object at 0x7f6c2fbacc50>>
[listener-2] Traceback (most recent call last):
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/executors.py"", line 223, in __del__
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/signals.py"", line 40, in destroy
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/guard_condition.py"", line 41, in destroy
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/handle.py"", line 95, in destroy
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/handle.py"", line 156, in __destroy
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/handle.py"", line 160, in __destroy_dependents
[listener-2]   File ""/usr/lib/python3.6/threading.py"", line 84, in RLock
[listener-2] TypeError: 'NoneType' object is not callable


I think this is happening because it's calling threading.RLock() at interpreter shutdown (via Executor.__del__).

  
    
      rclpy/rclpy/rclpy/handle.py
    
    
         Line 160
      in
      bfcb40c
    
  
  
    

        
          
           deps_lock = RLock() 
        
    
  


threading.RLock() is a method that uses a module scope variable beginning with a single underscore.
 return _PyRLock(*args, **kwargs)
Python guarantees that module variables beginning with a single underscore are garbage collected before the rest of the module.

del() can be executed during interpreter shutdown. As a consequence, the global variables it
needs to access (including other modules) may already have been deleted or set to None. Python
guarantees that globals whose name begins with a single underscore are deleted from their module
before other globals are deleted ...

I think threading._PyRLock was garbage collected and set to None before the executor was garbage collected. This PR tries to fix it by calling RLock() when the handle is created and holding onto it.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,351,2019-05-17T20:27:43Z,2019-05-17T21:32:07Z,2019-05-17T21:52:46Z,MERGED,True,3,1,1,https://github.com/sloretz,Create RLock() early to avoid exception at shutdown,1,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/351,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/351#issuecomment-493589900,"This is attempt to fix an exception raised in interpreter shutdown: https://ci.ros2.org/view/nightly/job/nightly_linux_debug/1194/testReport/launch_testing_ros.test/test_examples/test_examples_talker_listener_test_py_/
Traceback
[listener-2] Exception ignored in: <bound method Executor.__del__ of <rclpy.executors.SingleThreadedExecutor object at 0x7f6c2fbacc50>>
[listener-2] Traceback (most recent call last):
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/executors.py"", line 223, in __del__
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/signals.py"", line 40, in destroy
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/guard_condition.py"", line 41, in destroy
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/handle.py"", line 95, in destroy
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/handle.py"", line 156, in __destroy
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/handle.py"", line 160, in __destroy_dependents
[listener-2]   File ""/usr/lib/python3.6/threading.py"", line 84, in RLock
[listener-2] TypeError: 'NoneType' object is not callable


I think this is happening because it's calling threading.RLock() at interpreter shutdown (via Executor.__del__).

  
    
      rclpy/rclpy/rclpy/handle.py
    
    
         Line 160
      in
      bfcb40c
    
  
  
    

        
          
           deps_lock = RLock() 
        
    
  


threading.RLock() is a method that uses a module scope variable beginning with a single underscore.
 return _PyRLock(*args, **kwargs)
Python guarantees that module variables beginning with a single underscore are garbage collected before the rest of the module.

del() can be executed during interpreter shutdown. As a consequence, the global variables it
needs to access (including other modules) may already have been deleted or set to None. Python
guarantees that globals whose name begins with a single underscore are deleted from their module
before other globals are deleted ...

I think threading._PyRLock was garbage collected and set to None before the executor was garbage collected. This PR tries to fix it by calling RLock() when the handle is created and holding onto it.","CI (testing just rclpy)

Linux 
Linux-aarch64 
macOS 
Windows 

CI testing launch_testing_ros on linux debug",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,351,2019-05-17T20:27:43Z,2019-05-17T21:32:07Z,2019-05-17T21:52:46Z,MERGED,True,3,1,1,https://github.com/sloretz,Create RLock() early to avoid exception at shutdown,1,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/351,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/351#issuecomment-493605613,"This is attempt to fix an exception raised in interpreter shutdown: https://ci.ros2.org/view/nightly/job/nightly_linux_debug/1194/testReport/launch_testing_ros.test/test_examples/test_examples_talker_listener_test_py_/
Traceback
[listener-2] Exception ignored in: <bound method Executor.__del__ of <rclpy.executors.SingleThreadedExecutor object at 0x7f6c2fbacc50>>
[listener-2] Traceback (most recent call last):
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/executors.py"", line 223, in __del__
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/signals.py"", line 40, in destroy
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/guard_condition.py"", line 41, in destroy
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/handle.py"", line 95, in destroy
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/handle.py"", line 156, in __destroy
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/handle.py"", line 160, in __destroy_dependents
[listener-2]   File ""/usr/lib/python3.6/threading.py"", line 84, in RLock
[listener-2] TypeError: 'NoneType' object is not callable


I think this is happening because it's calling threading.RLock() at interpreter shutdown (via Executor.__del__).

  
    
      rclpy/rclpy/rclpy/handle.py
    
    
         Line 160
      in
      bfcb40c
    
  
  
    

        
          
           deps_lock = RLock() 
        
    
  


threading.RLock() is a method that uses a module scope variable beginning with a single underscore.
 return _PyRLock(*args, **kwargs)
Python guarantees that module variables beginning with a single underscore are garbage collected before the rest of the module.

del() can be executed during interpreter shutdown. As a consequence, the global variables it
needs to access (including other modules) may already have been deleted or set to None. Python
guarantees that globals whose name begins with a single underscore are deleted from their module
before other globals are deleted ...

I think threading._PyRLock was garbage collected and set to None before the executor was garbage collected. This PR tries to fix it by calling RLock() when the handle is created and holding onto it.","The traceback during shutdown is gone from the debug launch_testing_ros test, though the test failure itself is not resolved by this PR.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,351,2019-05-17T20:27:43Z,2019-05-17T21:32:07Z,2019-05-17T21:52:46Z,MERGED,True,3,1,1,https://github.com/sloretz,Create RLock() early to avoid exception at shutdown,1,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/351,https://github.com/dirk-thomas,4,https://github.com/ros2/rclpy/pull/351#issuecomment-493610137,"This is attempt to fix an exception raised in interpreter shutdown: https://ci.ros2.org/view/nightly/job/nightly_linux_debug/1194/testReport/launch_testing_ros.test/test_examples/test_examples_talker_listener_test_py_/
Traceback
[listener-2] Exception ignored in: <bound method Executor.__del__ of <rclpy.executors.SingleThreadedExecutor object at 0x7f6c2fbacc50>>
[listener-2] Traceback (most recent call last):
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/executors.py"", line 223, in __del__
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/signals.py"", line 40, in destroy
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/guard_condition.py"", line 41, in destroy
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/handle.py"", line 95, in destroy
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/handle.py"", line 156, in __destroy
[listener-2]   File ""/home/jenkins-agent/workspace/nightly_linux_debug/ws/install/rclpy/lib/python3.6/site-packages/rclpy/handle.py"", line 160, in __destroy_dependents
[listener-2]   File ""/usr/lib/python3.6/threading.py"", line 84, in RLock
[listener-2] TypeError: 'NoneType' object is not callable


I think this is happening because it's calling threading.RLock() at interpreter shutdown (via Executor.__del__).

  
    
      rclpy/rclpy/rclpy/handle.py
    
    
         Line 160
      in
      bfcb40c
    
  
  
    

        
          
           deps_lock = RLock() 
        
    
  


threading.RLock() is a method that uses a module scope variable beginning with a single underscore.
 return _PyRLock(*args, **kwargs)
Python guarantees that module variables beginning with a single underscore are garbage collected before the rest of the module.

del() can be executed during interpreter shutdown. As a consequence, the global variables it
needs to access (including other modules) may already have been deleted or set to None. Python
guarantees that globals whose name begins with a single underscore are deleted from their module
before other globals are deleted ...

I think threading._PyRLock was garbage collected and set to None before the executor was garbage collected. This PR tries to fix it by calling RLock() when the handle is created and holding onto it.","though the test failure itself is not resolved by this PR.

Tracked in ros2/build_farmer#197.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,352,2019-05-17T20:58:18Z,2019-05-21T01:15:57Z,2019-05-21T01:15:57Z,MERGED,True,81,4,2,https://github.com/emersonknapp,Add convenience name translations for use by commandline utilities etc.,3,[],https://github.com/ros2/rclpy/pull/352,https://github.com/emersonknapp,1,https://github.com/ros2/rclpy/pull/352,"Unblocks ros2/ros2cli#240
Signed-off-by: Emerson Knapp eknapp@amazon.com","Unblocks ros2/ros2cli#240
Signed-off-by: Emerson Knapp eknapp@amazon.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,352,2019-05-17T20:58:18Z,2019-05-21T01:15:57Z,2019-05-21T01:15:57Z,MERGED,True,81,4,2,https://github.com/emersonknapp,Add convenience name translations for use by commandline utilities etc.,3,[],https://github.com/ros2/rclpy/pull/352,https://github.com/emersonknapp,2,https://github.com/ros2/rclpy/pull/352#issuecomment-493597667,"Unblocks ros2/ros2cli#240
Signed-off-by: Emerson Knapp eknapp@amazon.com","@mjcarroll see this and ros2/ros2cli#240, is this along the lines of what you were thinking?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,352,2019-05-17T20:58:18Z,2019-05-21T01:15:57Z,2019-05-21T01:15:57Z,MERGED,True,81,4,2,https://github.com/emersonknapp,Add convenience name translations for use by commandline utilities etc.,3,[],https://github.com/ros2/rclpy/pull/352,https://github.com/emersonknapp,3,https://github.com/ros2/rclpy/pull/352#issuecomment-494186323,"Unblocks ros2/ros2cli#240
Signed-off-by: Emerson Knapp eknapp@amazon.com","@thomas-moulard can you please run CI for this change
Gist: https://gist.githubusercontent.com/emersonknapp/9116731124636553c3e0a03a1bdf1509/raw/628a181f31d6ee43b70c179a592c395b867d6921/ros2.repos
Build args: --packages-up-to rclpy
Test args: --packages-select rclpy
Job: ci_launcher",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,352,2019-05-17T20:58:18Z,2019-05-21T01:15:57Z,2019-05-21T01:15:57Z,MERGED,True,81,4,2,https://github.com/emersonknapp,Add convenience name translations for use by commandline utilities etc.,3,[],https://github.com/ros2/rclpy/pull/352,https://github.com/jacobperron,4,https://github.com/ros2/rclpy/pull/352#issuecomment-494189293,"Unblocks ros2/ros2cli#240
Signed-off-by: Emerson Knapp eknapp@amazon.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,352,2019-05-17T20:58:18Z,2019-05-21T01:15:57Z,2019-05-21T01:15:57Z,MERGED,True,81,4,2,https://github.com/emersonknapp,Add convenience name translations for use by commandline utilities etc.,3,[],https://github.com/ros2/rclpy/pull/352,https://github.com/emersonknapp,5,https://github.com/ros2/rclpy/pull/352#issuecomment-494193552,"Unblocks ros2/ros2cli#240
Signed-off-by: Emerson Knapp eknapp@amazon.com","I'm pretty confused about the osx and windows build failures there. Both show 100% tests pass and fail with
17:08:06 [95.826s] colcon.colcon_core.executor ERROR Exception in executor extension 'sequential': no running event loop
17:08:06 Traceback (most recent call last):
17:08:06   File ""c:\python37\lib\site-packages\colcon_core\executor\__init__.py"", line 327, in execute_jobs
17:08:06     rc = func(context.args, jobs, **kwargs)
17:08:06   File ""c:\python37\lib\site-packages\colcon_core\executor\sequential.py"", line 99, in execute
17:08:06     for task in all_tasks():
17:08:06   File ""c:\python37\lib\asyncio\tasks.py"", line 37, in all_tasks
17:08:06     loop = events.get_running_loop()
17:08:06 RuntimeError: no running event loop",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,352,2019-05-17T20:58:18Z,2019-05-21T01:15:57Z,2019-05-21T01:15:57Z,MERGED,True,81,4,2,https://github.com/emersonknapp,Add convenience name translations for use by commandline utilities etc.,3,[],https://github.com/ros2/rclpy/pull/352,https://github.com/dirk-thomas,6,https://github.com/ros2/rclpy/pull/352#issuecomment-494196018,"Unblocks ros2/ros2cli#240
Signed-off-by: Emerson Knapp eknapp@amazon.com",This smells like a problem in this recent change: colcon/colcon-core#187,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,352,2019-05-17T20:58:18Z,2019-05-21T01:15:57Z,2019-05-21T01:15:57Z,MERGED,True,81,4,2,https://github.com/emersonknapp,Add convenience name translations for use by commandline utilities etc.,3,[],https://github.com/ros2/rclpy/pull/352,https://github.com/emersonknapp,7,https://github.com/ros2/rclpy/pull/352#issuecomment-494196244,"Unblocks ros2/ros2cli#240
Signed-off-by: Emerson Knapp eknapp@amazon.com",Same issue on these builds ros2/demos#338 (comment) - so that seems likely to me since these two have no common changes,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,352,2019-05-17T20:58:18Z,2019-05-21T01:15:57Z,2019-05-21T01:15:57Z,MERGED,True,81,4,2,https://github.com/emersonknapp,Add convenience name translations for use by commandline utilities etc.,3,[],https://github.com/ros2/rclpy/pull/352,https://github.com/jacobperron,8,https://github.com/ros2/rclpy/pull/352#issuecomment-494199013,"Unblocks ros2/ros2cli#240
Signed-off-by: Emerson Knapp eknapp@amazon.com","Problem fixed in ros2/launch#245.
Re-triggering builds:

macOS: 
Windows:",True,{'HOORAY': ['https://github.com/emersonknapp']}
ros2/rclpy,https://github.com/ros2/rclpy,354,2019-05-20T14:37:52Z,2019-05-20T18:35:31Z,2019-05-20T18:35:35Z,MERGED,True,15,0,1,https://github.com/hidmic,Wait for nodes to discover each other in test_action_graph.py,2,['in review'],https://github.com/ros2/rclpy/pull/354,https://github.com/hidmic,1,https://github.com/ros2/rclpy/pull/354,"Precisely what the title says. Test tends to flake otherwise, specially when using RTI Connext as RMW implementation.
As seen in CI.","Precisely what the title says. Test tends to flake otherwise, specially when using RTI Connext as RMW implementation.
As seen in CI.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,354,2019-05-20T14:37:52Z,2019-05-20T18:35:31Z,2019-05-20T18:35:35Z,MERGED,True,15,0,1,https://github.com/hidmic,Wait for nodes to discover each other in test_action_graph.py,2,['in review'],https://github.com/ros2/rclpy/pull/354,https://github.com/hidmic,2,https://github.com/ros2/rclpy/pull/354#issuecomment-494016852,"Precisely what the title says. Test tends to flake otherwise, specially when using RTI Connext as RMW implementation.
As seen in CI.","Running CI (up to rclpy and testing rclpy only):

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,354,2019-05-20T14:37:52Z,2019-05-20T18:35:31Z,2019-05-20T18:35:35Z,MERGED,True,15,0,1,https://github.com/hidmic,Wait for nodes to discover each other in test_action_graph.py,2,['in review'],https://github.com/ros2/rclpy/pull/354,https://github.com/hidmic,3,https://github.com/ros2/rclpy/pull/354#issuecomment-494102349,"Precisely what the title says. Test tends to flake otherwise, specially when using RTI Connext as RMW implementation.
As seen in CI.","Alright, all green, going in.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,355,2019-05-20T17:19:21Z,2019-05-20T18:01:01Z,2019-05-20T18:01:05Z,MERGED,True,2,0,1,https://github.com/dirk-thomas,destroy publishers after test is done,1,['in review'],https://github.com/ros2/rclpy/pull/355,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/355,Just cleaning up.,Just cleaning up.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,355,2019-05-20T17:19:21Z,2019-05-20T18:01:01Z,2019-05-20T18:01:05Z,MERGED,True,2,0,1,https://github.com/dirk-thomas,destroy publishers after test is done,1,['in review'],https://github.com/ros2/rclpy/pull/355,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/355#issuecomment-494090542,Just cleaning up.,"Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,356,2019-05-21T23:16:54Z,2019-05-23T22:58:47Z,2019-05-23T23:31:29Z,MERGED,True,39,21,2,https://github.com/emersonknapp,Initialize QoSProfile with values from rmw_qos_profile_default,6,['in review'],https://github.com/ros2/rclpy/pull/356,https://github.com/emersonknapp,1,https://github.com/ros2/rclpy/pull/356,"To match behavior in rclcpp.
Fixes #353
Would like some feedback on the approach, it feels a little kludgy. It's an awkward situation though, where the default profile values we want are only exposed via a QoSProfile instance from _rclpy.c, so we have a circular dependency.
Signed-off-by: Emerson Knapp eknapp@amazon.com","To match behavior in rclcpp.
Fixes #353
Would like some feedback on the approach, it feels a little kludgy. It's an awkward situation though, where the default profile values we want are only exposed via a QoSProfile instance from _rclpy.c, so we have a circular dependency.
Signed-off-by: Emerson Knapp eknapp@amazon.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,356,2019-05-21T23:16:54Z,2019-05-23T22:58:47Z,2019-05-23T23:31:29Z,MERGED,True,39,21,2,https://github.com/emersonknapp,Initialize QoSProfile with values from rmw_qos_profile_default,6,['in review'],https://github.com/ros2/rclpy/pull/356,https://github.com/emersonknapp,2,https://github.com/ros2/rclpy/pull/356#issuecomment-494601171,"To match behavior in rclcpp.
Fixes #353
Would like some feedback on the approach, it feels a little kludgy. It's an awkward situation though, where the default profile values we want are only exposed via a QoSProfile instance from _rclpy.c, so we have a circular dependency.
Signed-off-by: Emerson Knapp eknapp@amazon.com","@thomas-moulard - please run this CI job
Gist: https://gist.githubusercontent.com/emersonknapp/a3bb0ea80650afa69910ebe9d0ac4a06/raw/be2aecf41e6fdfd09e8c41969684627ac4ae7ce0/ros2.repos
BUILD args: --packages-up-to rclpy
TEST args: --packages-select rclpy
Job: ci_launcher",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,356,2019-05-21T23:16:54Z,2019-05-23T22:58:47Z,2019-05-23T23:31:29Z,MERGED,True,39,21,2,https://github.com/emersonknapp,Initialize QoSProfile with values from rmw_qos_profile_default,6,['in review'],https://github.com/ros2/rclpy/pull/356,https://github.com/thomas-moulard,3,https://github.com/ros2/rclpy/pull/356#issuecomment-494601874,"To match behavior in rclcpp.
Fixes #353
Would like some feedback on the approach, it feels a little kludgy. It's an awkward situation though, where the default profile values we want are only exposed via a QoSProfile instance from _rclpy.c, so we have a circular dependency.
Signed-off-by: Emerson Knapp eknapp@amazon.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,356,2019-05-21T23:16:54Z,2019-05-23T22:58:47Z,2019-05-23T23:31:29Z,MERGED,True,39,21,2,https://github.com/emersonknapp,Initialize QoSProfile with values from rmw_qos_profile_default,6,['in review'],https://github.com/ros2/rclpy/pull/356,https://github.com/jacobperron,4,https://github.com/ros2/rclpy/pull/356#issuecomment-495357501,"To match behavior in rclcpp.
Fixes #353
Would like some feedback on the approach, it feels a little kludgy. It's an awkward situation though, where the default profile values we want are only exposed via a QoSProfile instance from _rclpy.c, so we have a circular dependency.
Signed-off-by: Emerson Knapp eknapp@amazon.com","Linux 
Linux-aarch64 
macOS 
Windows 

Edit: RViz test failures can't be related since there's no connection to rclpy.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,357,2019-05-23T16:56:11Z,2019-05-28T22:56:25Z,2019-05-28T22:56:31Z,MERGED,True,430,64,3,https://github.com/jubeira,Enforcing parameter ranges.,3,['in review'],https://github.com/ros2/rclpy/pull/357,https://github.com/jubeira,1,https://github.com/ros2/rclpy/pull/357,"Closes #350.
See ros2/rclcpp#728 for details and related discussion.","Closes #350.
See ros2/rclcpp#728 for details and related discussion.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,357,2019-05-23T16:56:11Z,2019-05-28T22:56:25Z,2019-05-28T22:56:31Z,MERGED,True,430,64,3,https://github.com/jubeira,Enforcing parameter ranges.,3,['in review'],https://github.com/ros2/rclpy/pull/357,https://github.com/jubeira,2,https://github.com/ros2/rclpy/pull/357#issuecomment-495596187,"Closes #350.
See ros2/rclcpp#728 for details and related discussion.","Partial CI:

Linux: .

Running remaining jobs now.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,357,2019-05-23T16:56:11Z,2019-05-28T22:56:25Z,2019-05-28T22:56:31Z,MERGED,True,430,64,3,https://github.com/jubeira,Enforcing parameter ranges.,3,['in review'],https://github.com/ros2/rclpy/pull/357,https://github.com/jubeira,3,https://github.com/ros2/rclpy/pull/357#issuecomment-495666759,"Closes #350.
See ros2/rclcpp#728 for details and related discussion.","Full CI:

Linux: 
Linux-aarch64: 
Mac OS: 
Windows:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,357,2019-05-23T16:56:11Z,2019-05-28T22:56:25Z,2019-05-28T22:56:31Z,MERGED,True,430,64,3,https://github.com/jubeira,Enforcing parameter ranges.,3,['in review'],https://github.com/ros2/rclpy/pull/357,https://github.com/jubeira,4,https://github.com/ros2/rclpy/pull/357#issuecomment-496624013,"Closes #350.
See ros2/rclcpp#728 for details and related discussion.","CI after comments:

Linux: 
Linux-aarch64: 
Mac OS: 
Windows:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,357,2019-05-23T16:56:11Z,2019-05-28T22:56:25Z,2019-05-28T22:56:31Z,MERGED,True,430,64,3,https://github.com/jubeira,Enforcing parameter ranges.,3,['in review'],https://github.com/ros2/rclpy/pull/357,https://github.com/jubeira,5,https://github.com/ros2/rclpy/pull/357#issuecomment-496682585,"Closes #350.
See ros2/rclcpp#728 for details and related discussion.","Thanks for the thoughtful comments @jacobperron!
They should be addressed now; I'll run CI once more.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,357,2019-05-23T16:56:11Z,2019-05-28T22:56:25Z,2019-05-28T22:56:31Z,MERGED,True,430,64,3,https://github.com/jubeira,Enforcing parameter ranges.,3,['in review'],https://github.com/ros2/rclpy/pull/357,https://github.com/jubeira,6,https://github.com/ros2/rclpy/pull/357#issuecomment-496718926,"Closes #350.
See ros2/rclcpp#728 for details and related discussion.","CI:

Linux: 
Linux-aarch64: 
Mac OS: 
Windows:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,357,2019-05-23T16:56:11Z,2019-05-28T22:56:25Z,2019-05-28T22:56:31Z,MERGED,True,430,64,3,https://github.com/jubeira,Enforcing parameter ranges.,3,['in review'],https://github.com/ros2/rclpy/pull/357,https://github.com/jubeira,7,https://github.com/ros2/rclpy/pull/357#issuecomment-496719867,"Closes #350.
See ros2/rclcpp#728 for details and related discussion.",Failure on Windows seems to be unrelated; merging now!,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,357,2019-05-23T16:56:11Z,2019-05-28T22:56:25Z,2019-05-28T22:56:31Z,MERGED,True,430,64,3,https://github.com/jubeira,Enforcing parameter ranges.,3,['in review'],https://github.com/ros2/rclpy/pull/357,https://github.com/nuclearsandwich,8,https://github.com/ros2/rclpy/pull/357#issuecomment-496720086,"Closes #350.
See ros2/rclcpp#728 for details and related discussion.",The Windows CI failure has appeared before and is in test_rclcpp. When  runs it should tell is whether we made the right call.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,362,2019-05-28T21:20:10Z,2019-05-28T23:52:48Z,2019-05-28T23:52:51Z,MERGED,True,12,38,2,https://github.com/dirk-thomas,consolidate create_publisher arguments,2,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/362,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/362,"The modified signature allows to write code which is compatible with Crystal as well as Dashing (without getting a warning).

Linux 
Linux-aarch64 
macOS 
Windows","The modified signature allows to write code which is compatible with Crystal as well as Dashing (without getting a warning).

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,363,2019-05-28T21:59:33Z,2019-05-29T19:12:38Z,2019-05-29T19:12:41Z,MERGED,True,30,25,3,https://github.com/wjwwood,Rename parameter options,5,['in review'],https://github.com/ros2/rclpy/pull/363,https://github.com/wjwwood,1,https://github.com/ros2/rclpy/pull/363,Connects to ros2/ros2_documentation#242,Connects to ros2/ros2_documentation#242,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,364,2019-05-30T22:12:03Z,2019-05-31T22:34:49Z,2019-05-31T22:34:52Z,MERGED,True,30,54,6,https://github.com/skucheria,Refactored _rclpy.rclpy_get_rmw_qos_profile to return dictionary instead of QoSProfile,2,[],https://github.com/ros2/rclpy/pull/364,https://github.com/skucheria,1,https://github.com/ros2/rclpy/pull/364,Fixes #358,Fixes #358,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,364,2019-05-30T22:12:03Z,2019-05-31T22:34:49Z,2019-05-31T22:34:52Z,MERGED,True,30,54,6,https://github.com/skucheria,Refactored _rclpy.rclpy_get_rmw_qos_profile to return dictionary instead of QoSProfile,2,[],https://github.com/ros2/rclpy/pull/364,https://github.com/skucheria,2,https://github.com/ros2/rclpy/pull/364#issuecomment-497803807,Fixes #358,"Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,364,2019-05-30T22:12:03Z,2019-05-31T22:34:49Z,2019-05-31T22:34:52Z,MERGED,True,30,54,6,https://github.com/skucheria,Refactored _rclpy.rclpy_get_rmw_qos_profile to return dictionary instead of QoSProfile,2,[],https://github.com/ros2/rclpy/pull/364,https://github.com/jacobperron,3,https://github.com/ros2/rclpy/pull/364#issuecomment-497880101,Fixes #358,It looks like those test failures appear in the nightlies as well. You can squash and merge this change 👍,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,365,2019-06-03T22:23:33Z,2019-06-07T17:28:57Z,2019-06-07T17:29:01Z,MERGED,True,18,12,3,https://github.com/jacobperron,Treat warnings as test failures and fix warnings,3,[],https://github.com/ros2/rclpy/pull/365,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/365,"Linux 
Linux-aarch64 
macOS 
Windows","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,366,2019-06-07T17:23:11Z,2019-06-07T18:45:59Z,2019-06-07T18:46:03Z,MERGED,True,47,27,3,https://github.com/jacobperron,Fix API documentation related to ROS graph methods,1,[],https://github.com/ros2/rclpy/pull/366,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/366,,,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,366,2019-06-07T17:23:11Z,2019-06-07T18:45:59Z,2019-06-07T18:46:03Z,MERGED,True,47,27,3,https://github.com/jacobperron,Fix API documentation related to ROS graph methods,1,[],https://github.com/ros2/rclpy/pull/366,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/366#issuecomment-499978716,,Linux (up to rclpy):,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,368,2019-06-12T13:26:52Z,2019-06-12T20:02:14Z,2019-06-12T20:02:17Z,MERGED,True,47,27,3,https://github.com/clalancette,Fix API documentation related to ROS graph methods (#366),1,[],https://github.com/ros2/rclpy/pull/368,https://github.com/clalancette,1,https://github.com/ros2/rclpy/pull/368,Signed-off-by: Jacob Perron jacob@openrobotics.org,Signed-off-by: Jacob Perron jacob@openrobotics.org,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,370,2019-06-14T00:41:52Z,2019-06-24T22:55:18Z,2019-07-29T23:26:39Z,MERGED,True,27,8,1,https://github.com/cottsay,Use params from node '/**' from parameter YAML file,1,['enhancement'],https://github.com/ros2/rclpy/pull/370,https://github.com/cottsay,1,https://github.com/ros2/rclpy/pull/370,"The short-term goal of this change is to enable the creation of a parameter YAML file which is applied to each node, regardless of node name or namespace.
Future work is to support all wildcard syntax in node names in parameter YAML files.","The short-term goal of this change is to enable the creation of a parameter YAML file which is applied to each node, regardless of node name or namespace.
Future work is to support all wildcard syntax in node names in parameter YAML files.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,370,2019-06-14T00:41:52Z,2019-06-24T22:55:18Z,2019-07-29T23:26:39Z,MERGED,True,27,8,1,https://github.com/cottsay,Use params from node '/**' from parameter YAML file,1,['enhancement'],https://github.com/ros2/rclpy/pull/370,https://github.com/cottsay,2,https://github.com/ros2/rclpy/pull/370#issuecomment-501927376,"The short-term goal of this change is to enable the creation of a parameter YAML file which is applied to each node, regardless of node name or namespace.
Future work is to support all wildcard syntax in node names in parameter YAML files.","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,370,2019-06-14T00:41:52Z,2019-06-24T22:55:18Z,2019-07-29T23:26:39Z,MERGED,True,27,8,1,https://github.com/cottsay,Use params from node '/**' from parameter YAML file,1,['enhancement'],https://github.com/ros2/rclpy/pull/370,https://github.com/cottsay,3,https://github.com/ros2/rclpy/pull/370#issuecomment-501927455,"The short-term goal of this change is to enable the creation of a parameter YAML file which is applied to each node, regardless of node name or namespace.
Future work is to support all wildcard syntax in node names in parameter YAML files.","I'm completely new to Python's C API, so if anything looks wonky, speak up.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,372,2019-06-19T09:05:50Z,2019-06-19T15:49:59Z,2019-06-19T15:49:59Z,MERGED,True,1,1,1,https://github.com/stonier,[executors] don't convert a timeout_sec to nsecs,1,[],https://github.com/ros2/rclpy/pull/372,https://github.com/stonier,1,https://github.com/ros2/rclpy/pull/372,Certainly something fishy here - I was getting unduly long blocks when the service server was not available.,Certainly something fishy here - I was getting unduly long blocks when the service server was not available.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,372,2019-06-19T09:05:50Z,2019-06-19T15:49:59Z,2019-06-19T15:49:59Z,MERGED,True,1,1,1,https://github.com/stonier,[executors] don't convert a timeout_sec to nsecs,1,[],https://github.com/ros2/rclpy/pull/372,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/372#issuecomment-503589550,Certainly something fishy here - I was getting unduly long blocks when the service server was not available.,"CI (testing just rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,372,2019-06-19T09:05:50Z,2019-06-19T15:49:59Z,2019-06-19T15:49:59Z,MERGED,True,1,1,1,https://github.com/stonier,[executors] don't convert a timeout_sec to nsecs,1,[],https://github.com/ros2/rclpy/pull/372,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/372#issuecomment-503618864,Certainly something fishy here - I was getting unduly long blocks when the service server was not available.,Thanks for the PR!,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,376,2019-06-23T15:15:07Z,2019-06-25T10:50:30Z,2019-06-25T10:50:30Z,CLOSED,False,0,0,0,https://github.com/suab321321,Rename QoS*Policy enum's to *Policy,0,[],https://github.com/ros2/rclpy/pull/376,https://github.com/suab321321,1,https://github.com/ros2/rclpy/pull/376,"Renamed QoS*Policy enum's to *Policy #371
I have made the necessary changes to the which was to rename the class name of few classes which was starting by name of QoS.","Renamed QoS*Policy enum's to *Policy #371
I have made the necessary changes to the which was to rename the class name of few classes which was starting by name of QoS.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,376,2019-06-23T15:15:07Z,2019-06-25T10:50:30Z,2019-06-25T10:50:30Z,CLOSED,False,0,0,0,https://github.com/suab321321,Rename QoS*Policy enum's to *Policy,0,[],https://github.com/ros2/rclpy/pull/376,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/376#issuecomment-505058298,"Renamed QoS*Policy enum's to *Policy #371
I have made the necessary changes to the which was to rename the class name of few classes which was starting by name of QoS.","Ups, @sloretz didn't see your review when I started",True,"{'THUMBS_UP': ['https://github.com/sloretz', 'https://github.com/suab321321']}"
ros2/rclpy,https://github.com/ros2/rclpy,376,2019-06-23T15:15:07Z,2019-06-25T10:50:30Z,2019-06-25T10:50:30Z,CLOSED,False,0,0,0,https://github.com/suab321321,Rename QoS*Policy enum's to *Policy,0,[],https://github.com/ros2/rclpy/pull/376,https://github.com/suab321321,3,https://github.com/ros2/rclpy/pull/376#issuecomment-505146498,"Renamed QoS*Policy enum's to *Policy #371
I have made the necessary changes to the which was to rename the class name of few classes which was starting by name of QoS.",I will commit the requested changes,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,377,2019-06-24T00:14:40Z,2019-06-26T18:02:12Z,2019-06-26T18:02:15Z,MERGED,True,36,20,3,https://github.com/jubeira,Fixing namespace expansion for declare_parameters.,1,[],https://github.com/ros2/rclpy/pull/377,https://github.com/jubeira,1,https://github.com/ros2/rclpy/pull/377,"Closes #375.
Partially addresses #373 considering the first option described in #373 (comment).
The complete parameter name validation has yet to be implemented; removing the current (incorrect) check is required to address #375. If this patch is accepted, the next step would be implementing the correct check at RCL level so that it can be used both in rclpy and rclcpp like the current topic name check.
Finally, note that in rclcpp the current parameter name validation is also a 'non-empty' check.","Closes #375.
Partially addresses #373 considering the first option described in #373 (comment).
The complete parameter name validation has yet to be implemented; removing the current (incorrect) check is required to address #375. If this patch is accepted, the next step would be implementing the correct check at RCL level so that it can be used both in rclpy and rclcpp like the current topic name check.
Finally, note that in rclcpp the current parameter name validation is also a 'non-empty' check.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,377,2019-06-24T00:14:40Z,2019-06-26T18:02:12Z,2019-06-26T18:02:15Z,MERGED,True,36,20,3,https://github.com/jubeira,Fixing namespace expansion for declare_parameters.,1,[],https://github.com/ros2/rclpy/pull/377,https://github.com/Karsten1987,2,https://github.com/ros2/rclpy/pull/377#issuecomment-504990562,"Closes #375.
Partially addresses #373 considering the first option described in #373 (comment).
The complete parameter name validation has yet to be implemented; removing the current (incorrect) check is required to address #375. If this patch is accepted, the next step would be implementing the correct check at RCL level so that it can be used both in rclpy and rclcpp like the current topic name check.
Finally, note that in rclcpp the current parameter name validation is also a 'non-empty' check.","I can confirm that with that patch, the code snippet reported in the original bug report is working correctly. 👍",True,{'THUMBS_UP': ['https://github.com/jubeira']}
ros2/rclpy,https://github.com/ros2/rclpy,377,2019-06-24T00:14:40Z,2019-06-26T18:02:12Z,2019-06-26T18:02:15Z,MERGED,True,36,20,3,https://github.com/jubeira,Fixing namespace expansion for declare_parameters.,1,[],https://github.com/ros2/rclpy/pull/377,https://github.com/Karsten1987,3,https://github.com/ros2/rclpy/pull/377#issuecomment-505094374,"Closes #375.
Partially addresses #373 considering the first option described in #373 (comment).
The complete parameter name validation has yet to be implemented; removing the current (incorrect) check is required to address #375. If this patch is accepted, the next step would be implementing the correct check at RCL level so that it can be used both in rclpy and rclcpp like the current topic name check.
Finally, note that in rclcpp the current parameter name validation is also a 'non-empty' check.","Looking at the changes, I see that there are two Todos in it. Are you planning on addressing them with this round of PR or is that a follow-up PR?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,377,2019-06-24T00:14:40Z,2019-06-26T18:02:12Z,2019-06-26T18:02:15Z,MERGED,True,36,20,3,https://github.com/jubeira,Fixing namespace expansion for declare_parameters.,1,[],https://github.com/ros2/rclpy/pull/377,https://github.com/wjwwood,4,https://github.com/ros2/rclpy/pull/377#issuecomment-505094865,"Closes #375.
Partially addresses #373 considering the first option described in #373 (comment).
The complete parameter name validation has yet to be implemented; removing the current (incorrect) check is required to address #375. If this patch is accepted, the next step would be implementing the correct check at RCL level so that it can be used both in rclpy and rclcpp like the current topic name check.
Finally, note that in rclcpp the current parameter name validation is also a 'non-empty' check.","Those todo's were preexisting imo, and probably out of scope for this pr. We should do it, but first I think we should get a design doc together that explicitly lays out how parameter addressing works and exactly what is allowed in their names.",True,"{'THUMBS_UP': ['https://github.com/Karsten1987', 'https://github.com/jubeira']}"
ros2/rclpy,https://github.com/ros2/rclpy,377,2019-06-24T00:14:40Z,2019-06-26T18:02:12Z,2019-06-26T18:02:15Z,MERGED,True,36,20,3,https://github.com/jubeira,Fixing namespace expansion for declare_parameters.,1,[],https://github.com/ros2/rclpy/pull/377,https://github.com/jubeira,5,https://github.com/ros2/rclpy/pull/377#issuecomment-505127863,"Closes #375.
Partially addresses #373 considering the first option described in #373 (comment).
The complete parameter name validation has yet to be implemented; removing the current (incorrect) check is required to address #375. If this patch is accepted, the next step would be implementing the correct check at RCL level so that it can be used both in rclpy and rclcpp like the current topic name check.
Finally, note that in rclcpp the current parameter name validation is also a 'non-empty' check.","Those todo's were preexisting imo, and probably out of scope for this pr. We should do it, but first I think we should get a design doc together that explicitly lays out how parameter addressing works and exactly what is allowed in their names.

Yes, that's exactly the case. I'll open an issue that supersedes #373 to keep track of the pending action items in this repository.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,377,2019-06-24T00:14:40Z,2019-06-26T18:02:12Z,2019-06-26T18:02:15Z,MERGED,True,36,20,3,https://github.com/jubeira,Fixing namespace expansion for declare_parameters.,1,[],https://github.com/ros2/rclpy/pull/377,https://github.com/jubeira,6,https://github.com/ros2/rclpy/pull/377#issuecomment-505152982,"Closes #375.
Partially addresses #373 considering the first option described in #373 (comment).
The complete parameter name validation has yet to be implemented; removing the current (incorrect) check is required to address #375. If this patch is accepted, the next step would be implementing the correct check at RCL level so that it can be used both in rclpy and rclcpp like the current topic name check.
Finally, note that in rclcpp the current parameter name validation is also a 'non-empty' check.","Initial incomplete CI:

Linux: 

I took a quick look and the error seems unrelated. I'll double check and run complete CI.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,377,2019-06-24T00:14:40Z,2019-06-26T18:02:12Z,2019-06-26T18:02:15Z,MERGED,True,36,20,3,https://github.com/jubeira,Fixing namespace expansion for declare_parameters.,1,[],https://github.com/ros2/rclpy/pull/377,https://github.com/jubeira,7,https://github.com/ros2/rclpy/pull/377#issuecomment-505568577,"Closes #375.
Partially addresses #373 considering the first option described in #373 (comment).
The complete parameter name validation has yet to be implemented; removing the current (incorrect) check is required to address #375. If this patch is accepted, the next step would be implementing the correct check at RCL level so that it can be used both in rclpy and rclcpp like the current topic name check.
Finally, note that in rclcpp the current parameter name validation is also a 'non-empty' check.","The failing test also failed in nightly tests yesterday, but it seems to be fixed today. Running full CI now.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,377,2019-06-24T00:14:40Z,2019-06-26T18:02:12Z,2019-06-26T18:02:15Z,MERGED,True,36,20,3,https://github.com/jubeira,Fixing namespace expansion for declare_parameters.,1,[],https://github.com/ros2/rclpy/pull/377,https://github.com/Karsten1987,8,https://github.com/ros2/rclpy/pull/377#issuecomment-505777511,"Closes #375.
Partially addresses #373 considering the first option described in #373 (comment).
The complete parameter name validation has yet to be implemented; removing the current (incorrect) check is required to address #375. If this patch is accepted, the next step would be implementing the correct check at RCL level so that it can be used both in rclpy and rclcpp like the current topic name check.
Finally, note that in rclcpp the current parameter name validation is also a 'non-empty' check.",can this be merged?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,377,2019-06-24T00:14:40Z,2019-06-26T18:02:12Z,2019-06-26T18:02:15Z,MERGED,True,36,20,3,https://github.com/jubeira,Fixing namespace expansion for declare_parameters.,1,[],https://github.com/ros2/rclpy/pull/377,https://github.com/jubeira,9,https://github.com/ros2/rclpy/pull/377#issuecomment-505853248,"Closes #375.
Partially addresses #373 considering the first option described in #373 (comment).
The complete parameter name validation has yet to be implemented; removing the current (incorrect) check is required to address #375. If this patch is accepted, the next step would be implementing the correct check at RCL level so that it can be used both in rclpy and rclcpp like the current topic name check.
Finally, note that in rclcpp the current parameter name validation is also a 'non-empty' check.","CI:

Linux: 
Linux-aarch64: 
Mac OS: 
Windows: 

@Karsten1987 errors seem unrelated; I'll merge if you think it's safe to do so.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,377,2019-06-24T00:14:40Z,2019-06-26T18:02:12Z,2019-06-26T18:02:15Z,MERGED,True,36,20,3,https://github.com/jubeira,Fixing namespace expansion for declare_parameters.,1,[],https://github.com/ros2/rclpy/pull/377,https://github.com/jubeira,10,https://github.com/ros2/rclpy/pull/377#issuecomment-505982943,"Closes #375.
Partially addresses #373 considering the first option described in #373 (comment).
The complete parameter name validation has yet to be implemented; removing the current (incorrect) check is required to address #375. If this patch is accepted, the next step would be implementing the correct check at RCL level so that it can be used both in rclpy and rclcpp like the current topic name check.
Finally, note that in rclcpp the current parameter name validation is also a 'non-empty' check.","Just double checked nightly builds and the failures are present there as well:

Linux
Windows

Merging now!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,378,2019-06-25T09:39:13Z,2019-06-25T10:30:28Z,2019-06-25T10:30:40Z,CLOSED,False,21,6,2,https://github.com/suab321321,Rclpy2,19,[],https://github.com/ros2/rclpy/pull/378,https://github.com/suab321321,1,https://github.com/ros2/rclpy/pull/378,I have made the necessary changes as mentioned in the to update the comments and managing white space to pass linter test,I have made the necessary changes as mentioned in the to update the comments and managing white space to pass linter test,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,379,2019-06-25T11:05:09Z,2019-06-27T14:49:00Z,2019-06-27T15:41:23Z,MERGED,True,16,4,1,https://github.com/suab321321,Rename QoS*Policy enum's to *Policy,3,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/379,https://github.com/suab321321,1,https://github.com/ros2/rclpy/pull/379,"…ters
Signed-off-by: Abhinav singhabhinav9051571833@gmail.com

Edit(@ivanpauno):
Fixes #371","…ters
Signed-off-by: Abhinav singhabhinav9051571833@gmail.com

Edit(@ivanpauno):
Fixes #371",True,"{'THUMBS_UP': ['https://github.com/sloretz'], 'HOORAY': ['https://github.com/sloretz']}"
ros2/rclpy,https://github.com/ros2/rclpy,379,2019-06-25T11:05:09Z,2019-06-27T14:49:00Z,2019-06-27T15:41:23Z,MERGED,True,16,4,1,https://github.com/suab321321,Rename QoS*Policy enum's to *Policy,3,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/379,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/379#issuecomment-505861243,"…ters
Signed-off-by: Abhinav singhabhinav9051571833@gmail.com

Edit(@ivanpauno):
Fixes #371","For the record, this is a follow-up of #376.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,379,2019-06-25T11:05:09Z,2019-06-27T14:49:00Z,2019-06-27T15:41:23Z,MERGED,True,16,4,1,https://github.com/suab321321,Rename QoS*Policy enum's to *Policy,3,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/379,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/379#issuecomment-505861587,"…ters
Signed-off-by: Abhinav singhabhinav9051571833@gmail.com

Edit(@ivanpauno):
Fixes #371","Also, edit the description to something more meaningful. Like:
Fixes https://github.com/ros2/rclpy/issues/371.
Thanks!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,379,2019-06-25T11:05:09Z,2019-06-27T14:49:00Z,2019-06-27T15:41:23Z,MERGED,True,16,4,1,https://github.com/suab321321,Rename QoS*Policy enum's to *Policy,3,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/379,https://github.com/suab321321,4,https://github.com/ros2/rclpy/pull/379#issuecomment-506196741,"…ters
Signed-off-by: Abhinav singhabhinav9051571833@gmail.com

Edit(@ivanpauno):
Fixes #371",I will update the changes,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,379,2019-06-25T11:05:09Z,2019-06-27T14:49:00Z,2019-06-27T15:41:23Z,MERGED,True,16,4,1,https://github.com/suab321321,Rename QoS*Policy enum's to *Policy,3,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/379,https://github.com/suab321321,5,https://github.com/ros2/rclpy/pull/379#issuecomment-506200061,"…ters
Signed-off-by: Abhinav singhabhinav9051571833@gmail.com

Edit(@ivanpauno):
Fixes #371","I want to ask one more thing ...
Is it necessary to understand the whole codebase of a open source project to start contributing to some tough issues?
Thank you",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,379,2019-06-25T11:05:09Z,2019-06-27T14:49:00Z,2019-06-27T15:41:23Z,MERGED,True,16,4,1,https://github.com/suab321321,Rename QoS*Policy enum's to *Policy,3,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/379,https://github.com/ivanpauno,6,https://github.com/ros2/rclpy/pull/379#issuecomment-506333351,"…ters
Signed-off-by: Abhinav singhabhinav9051571833@gmail.com

Edit(@ivanpauno):
Fixes #371","Is it necessary to understand the whole codebase of a open source project to start contributing to some tough issues?

I really don't understand the whole codebase. But you have to thoroughly understand the issue.",True,"{'THUMBS_UP': ['https://github.com/suab321321', 'https://github.com/sloretz']}"
ros2/rclpy,https://github.com/ros2/rclpy,379,2019-06-25T11:05:09Z,2019-06-27T14:49:00Z,2019-06-27T15:41:23Z,MERGED,True,16,4,1,https://github.com/suab321321,Rename QoS*Policy enum's to *Policy,3,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/379,https://github.com/ivanpauno,7,https://github.com/ros2/rclpy/pull/379#issuecomment-506342039,"…ters
Signed-off-by: Abhinav singhabhinav9051571833@gmail.com

Edit(@ivanpauno):
Fixes #371","Sanity check:

Linux:",True,{'HOORAY': ['https://github.com/sloretz']}
ros2/rclpy,https://github.com/ros2/rclpy,379,2019-06-25T11:05:09Z,2019-06-27T14:49:00Z,2019-06-27T15:41:23Z,MERGED,True,16,4,1,https://github.com/suab321321,Rename QoS*Policy enum's to *Policy,3,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/379,https://github.com/sloretz,8,https://github.com/ros2/rclpy/pull/379#issuecomment-506399760,"…ters
Signed-off-by: Abhinav singhabhinav9051571833@gmail.com

Edit(@ivanpauno):
Fixes #371",Thanks for the PR @suab321321 !,True,"{'THUMBS_UP': ['https://github.com/ivanpauno', 'https://github.com/suab321321']}"
ros2/rclpy,https://github.com/ros2/rclpy,381,2019-06-27T20:25:24Z,2019-06-27T20:52:22Z,2019-06-27T20:52:25Z,MERGED,True,12,8,1,https://github.com/ivanpauno,Make flake8 happy on windows,1,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/381,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/381,"A flake8 failure appeared on Windows after #379.
eg:

Windows 

I don't know why they didn't appear on Linux.","A flake8 failure appeared on Windows after #379.
eg:

Windows 

I don't know why they didn't appear on Linux.",True,{'THUMBS_UP': ['https://github.com/jubeira']}
ros2/rclpy,https://github.com/ros2/rclpy,381,2019-06-27T20:25:24Z,2019-06-27T20:52:22Z,2019-06-27T20:52:25Z,MERGED,True,12,8,1,https://github.com/ivanpauno,Make flake8 happy on windows,1,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/381,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/381#issuecomment-506498632,"A flake8 failure appeared on Windows after #379.
eg:

Windows 

I don't know why they didn't appear on Linux.","CI (up to rclpy):

Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,382,2019-06-28T19:30:21Z,2019-07-02T17:50:46Z,2019-07-02T17:50:52Z,MERGED,True,47,29,2,https://github.com/jubeira,Allowing parameter declaration without a given value.,1,[],https://github.com/ros2/rclpy/pull/382,https://github.com/jubeira,1,https://github.com/ros2/rclpy/pull/382,"Closes #369.
/cc @kyrofa","Closes #369.
/cc @kyrofa",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,382,2019-06-28T19:30:21Z,2019-07-02T17:50:46Z,2019-07-02T17:50:52Z,MERGED,True,47,29,2,https://github.com/jubeira,Allowing parameter declaration without a given value.,1,[],https://github.com/ros2/rclpy/pull/382,https://github.com/jubeira,2,https://github.com/ros2/rclpy/pull/382#issuecomment-506852012,"Closes #369.
/cc @kyrofa","Speculative partial CI:

Linux:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,382,2019-06-28T19:30:21Z,2019-07-02T17:50:46Z,2019-07-02T17:50:52Z,MERGED,True,47,29,2,https://github.com/jubeira,Allowing parameter declaration without a given value.,1,[],https://github.com/ros2/rclpy/pull/382,https://github.com/jubeira,3,https://github.com/ros2/rclpy/pull/382#issuecomment-507292086,"Closes #369.
/cc @kyrofa","Complete CI:

Linux: 
Linux-aarch64: 
OSX: 
Windows: 

I'll merge once everything is finished if no errors arise.
EDIT: the failures are not related; I'll re-run CI once it goes back to normal.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,382,2019-06-28T19:30:21Z,2019-07-02T17:50:46Z,2019-07-02T17:50:52Z,MERGED,True,47,29,2,https://github.com/jubeira,Allowing parameter declaration without a given value.,1,[],https://github.com/ros2/rclpy/pull/382,https://github.com/jubeira,4,https://github.com/ros2/rclpy/pull/382#issuecomment-507780399,"Closes #369.
/cc @kyrofa","CI re-run:

Linux: 
Linux-aarch64: 
OSX: 
Windows: 

Failures are unrelated, so I'll proceed merging now.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,383,2019-07-03T18:03:09Z,2019-07-09T16:32:28Z,2019-07-11T18:33:44Z,MERGED,True,85,4,3,https://github.com/skucheria,Added clients by node implementation from rcl,8,[],https://github.com/ros2/rclpy/pull/383,https://github.com/skucheria,1,https://github.com/ros2/rclpy/pull/383,"Connects to ros2/sros2#141
Requires ros2/rcl#459","Connects to ros2/sros2#141
Requires ros2/rcl#459",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,383,2019-07-03T18:03:09Z,2019-07-09T16:32:28Z,2019-07-11T18:33:44Z,MERGED,True,85,4,3,https://github.com/skucheria,Added clients by node implementation from rcl,8,[],https://github.com/ros2/rclpy/pull/383,https://github.com/skucheria,2,https://github.com/ros2/rclpy/pull/383#issuecomment-509422916,"Connects to ros2/sros2#141
Requires ros2/rcl#459","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,383,2019-07-03T18:03:09Z,2019-07-09T16:32:28Z,2019-07-11T18:33:44Z,MERGED,True,85,4,3,https://github.com/skucheria,Added clients by node implementation from rcl,8,[],https://github.com/ros2/rclpy/pull/383,https://github.com/wjwwood,3,https://github.com/ros2/rclpy/pull/383#issuecomment-510601531,"Connects to ros2/sros2#141
Requires ros2/rcl#459","I believe this introduced a regression in our nightlies:
https://ci.ros2.org/view/nightly/job/nightly_linux_release/1232/testReport/junit/(root)/projectroot/flake8/
I don't understand why, though because I don't see the trailing whitespace on line 182...",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,383,2019-07-03T18:03:09Z,2019-07-09T16:32:28Z,2019-07-11T18:33:44Z,MERGED,True,85,4,3,https://github.com/skucheria,Added clients by node implementation from rcl,8,[],https://github.com/ros2/rclpy/pull/383,https://github.com/wjwwood,4,https://github.com/ros2/rclpy/pull/383#issuecomment-510603126,"Connects to ros2/sros2#141
Requires ros2/rcl#459","It's definitely there, but I don't know that this pr was the culprit: #385",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,384,2019-07-06T06:30:39Z,2019-07-08T23:06:37Z,2019-07-08T23:06:37Z,MERGED,True,16,4,2,https://github.com/vinnamkim,Fix time conversion for a big nanoseconds value,2,['bug'],https://github.com/ros2/rclpy/pull/384,https://github.com/vinnamkim,1,https://github.com/ros2/rclpy/pull/384,"Related to #293

Change from the floating constant value(1e9) to the integer constant value(10 ** 9)

Signed-off-by: vinnamkim vinnam.kim@gmail.com","Related to #293

Change from the floating constant value(1e9) to the integer constant value(10 ** 9)

Signed-off-by: vinnamkim vinnam.kim@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,384,2019-07-06T06:30:39Z,2019-07-08T23:06:37Z,2019-07-08T23:06:37Z,MERGED,True,16,4,2,https://github.com/vinnamkim,Fix time conversion for a big nanoseconds value,2,['bug'],https://github.com/ros2/rclpy/pull/384,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/384#issuecomment-509417252,"Related to #293

Change from the floating constant value(1e9) to the integer constant value(10 ** 9)

Signed-off-by: vinnamkim vinnam.kim@gmail.com","CI (testing just rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,385,2019-07-11T18:33:11Z,2019-07-11T19:53:52Z,2019-07-11T19:53:55Z,MERGED,True,1,1,1,https://github.com/wjwwood,remove whitespace,1,['bug'],https://github.com/ros2/rclpy/pull/385,https://github.com/wjwwood,1,https://github.com/ros2/rclpy/pull/385,"This is causing all of our nightly jobs to be unstable, e.g.:
https://ci.ros2.org/view/nightly/job/nightly_linux_release/1232/testReport/junit/(root)/projectroot/flake8/
I think it's a follow up of #383, but I'm not sure.","This is causing all of our nightly jobs to be unstable, e.g.:
https://ci.ros2.org/view/nightly/job/nightly_linux_release/1232/testReport/junit/(root)/projectroot/flake8/
I think it's a follow up of #383, but I'm not sure.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,385,2019-07-11T18:33:11Z,2019-07-11T19:53:52Z,2019-07-11T19:53:55Z,MERGED,True,1,1,1,https://github.com/wjwwood,remove whitespace,1,['bug'],https://github.com/ros2/rclpy/pull/385,https://github.com/wjwwood,2,https://github.com/ros2/rclpy/pull/385#issuecomment-510630317,"This is causing all of our nightly jobs to be unstable, e.g.:
https://ci.ros2.org/view/nightly/job/nightly_linux_release/1232/testReport/junit/(root)/projectroot/flake8/
I think it's a follow up of #383, but I'm not sure.","Yeah, it's just weird because I don't see it in the github diff for the pr, and the CI settings for that job looked ok to me.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,386,2019-07-11T19:59:45Z,2019-07-17T12:42:38Z,2019-07-17T12:42:46Z,MERGED,True,84,2,2,https://github.com/jubeira,Adding get_parameters_by_prefix method to Node.,3,[],https://github.com/ros2/rclpy/pull/386,https://github.com/jubeira,1,https://github.com/ros2/rclpy/pull/386,Closes #374.,Closes #374.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,386,2019-07-11T19:59:45Z,2019-07-17T12:42:38Z,2019-07-17T12:42:46Z,MERGED,True,84,2,2,https://github.com/jubeira,Adding get_parameters_by_prefix method to Node.,3,[],https://github.com/ros2/rclpy/pull/386,https://github.com/jubeira,2,https://github.com/ros2/rclpy/pull/386#issuecomment-510633463,Closes #374.,"Speculative partial CI:

Linux:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,386,2019-07-11T19:59:45Z,2019-07-17T12:42:38Z,2019-07-17T12:42:46Z,MERGED,True,84,2,2,https://github.com/jubeira,Adding get_parameters_by_prefix method to Node.,3,[],https://github.com/ros2/rclpy/pull/386,https://github.com/jubeira,3,https://github.com/ros2/rclpy/pull/386#issuecomment-510646238,Closes #374.,"I understand the use-case in C++, but considering the parameter name is part of each object in the list, returning a dictionary seemed a bit redundant. Furthermore, the current get_parameters method returns a list of parameters, so a list seemed more consistent.
Getting a dictionary with the current approach can be done via dict comprehension like this (it can also be compressed into one line):
param_list = node.get_parameters_by_prefix('foo')
param_dict = {param.name: param for param in param_list}

That being said, is it still preferable to return a dictionary?
I'm bringing @clalancette in the loop for comments, who was in the discussion referenced above.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,386,2019-07-11T19:59:45Z,2019-07-17T12:42:38Z,2019-07-17T12:42:46Z,MERGED,True,84,2,2,https://github.com/jubeira,Adding get_parameters_by_prefix method to Node.,3,[],https://github.com/ros2/rclpy/pull/386,https://github.com/clalancette,4,https://github.com/ros2/rclpy/pull/386#issuecomment-510653751,Closes #374.,"The big difference here is that the C++ version of the code explicitly cuts off the prefix: https://github.com/ros2/rclcpp/blob/master/rclcpp/src/rclcpp/node_interfaces/node_parameters.cpp#L719
From an API consistency standpoint, I'd rather that the Python API more closely mirror the C++ API.  That would imply (to me) a dictionary, where the key is the name stripped of the prefix, and the value is the Parameter class (or whatever the equivalent in Python is).",True,{'THUMBS_UP': ['https://github.com/jubeira']}
ros2/rclpy,https://github.com/ros2/rclpy,386,2019-07-11T19:59:45Z,2019-07-17T12:42:38Z,2019-07-17T12:42:46Z,MERGED,True,84,2,2,https://github.com/jubeira,Adding get_parameters_by_prefix method to Node.,3,[],https://github.com/ros2/rclpy/pull/386,https://github.com/jubeira,5,https://github.com/ros2/rclpy/pull/386#issuecomment-511401653,Closes #374.,"@ivanpauno comment addressed; PTAL.
/cc @clalancette",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,386,2019-07-11T19:59:45Z,2019-07-17T12:42:38Z,2019-07-17T12:42:46Z,MERGED,True,84,2,2,https://github.com/jubeira,Adding get_parameters_by_prefix method to Node.,3,[],https://github.com/ros2/rclpy/pull/386,https://github.com/jubeira,6,https://github.com/ros2/rclpy/pull/386#issuecomment-511879232,Closes #374.,"CI:

Linux: 
Linux-aarch64: 
OSX: 
Windows:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,386,2019-07-11T19:59:45Z,2019-07-17T12:42:38Z,2019-07-17T12:42:46Z,MERGED,True,84,2,2,https://github.com/jubeira,Adding get_parameters_by_prefix method to Node.,3,[],https://github.com/ros2/rclpy/pull/386,https://github.com/jubeira,7,https://github.com/ros2/rclpy/pull/386#issuecomment-511973760,Closes #374.,Failures are known and unrelated; merging now!,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,389,2019-07-16T00:23:02Z,2019-08-15T15:45:43Z,2019-08-15T15:47:07Z,MERGED,True,19,9,2,https://github.com/christianrauch,accept tuples as parameter arrays,2,['in review'],https://github.com/ros2/rclpy/pull/389,https://github.com/christianrauch,1,https://github.com/ros2/rclpy/pull/389,"Providing a python dict inside a launch file that contains a list parameter, e.g.
composable_node = ComposableNode(parameters=[{""tag_ids"": [9, 14]}])
or loading a YAML file (that contains tag_ids: [9, 14])
composable_node = ComposableNode(parameters=[""path/to/configuration.yaml""])
results in an error like:
[ERROR] [launch]: Caught exception in launch (see debug for traceback): invalid parameter value (9, 14)
because [9, 14] is recognised as tuple and not as list.
However, the parameter list logic only expects python lists.
This PR simply extends the parameter check to tuples to allow them to be used as iterables. There might be more places where a type check against list should be extended to all iterables.","Providing a python dict inside a launch file that contains a list parameter, e.g.
composable_node = ComposableNode(parameters=[{""tag_ids"": [9, 14]}])
or loading a YAML file (that contains tag_ids: [9, 14])
composable_node = ComposableNode(parameters=[""path/to/configuration.yaml""])
results in an error like:
[ERROR] [launch]: Caught exception in launch (see debug for traceback): invalid parameter value (9, 14)
because [9, 14] is recognised as tuple and not as list.
However, the parameter list logic only expects python lists.
This PR simply extends the parameter check to tuples to allow them to be used as iterables. There might be more places where a type check against list should be extended to all iterables.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,389,2019-07-16T00:23:02Z,2019-08-15T15:45:43Z,2019-08-15T15:47:07Z,MERGED,True,19,9,2,https://github.com/christianrauch,accept tuples as parameter arrays,2,['in review'],https://github.com/ros2/rclpy/pull/389,https://github.com/christianrauch,2,https://github.com/ros2/rclpy/pull/389#issuecomment-519733020,"Providing a python dict inside a launch file that contains a list parameter, e.g.
composable_node = ComposableNode(parameters=[{""tag_ids"": [9, 14]}])
or loading a YAML file (that contains tag_ids: [9, 14])
composable_node = ComposableNode(parameters=[""path/to/configuration.yaml""])
results in an error like:
[ERROR] [launch]: Caught exception in launch (see debug for traceback): invalid parameter value (9, 14)
because [9, 14] is recognised as tuple and not as list.
However, the parameter list logic only expects python lists.
This PR simply extends the parameter check to tuples to allow them to be used as iterables. There might be more places where a type check against list should be extended to all iterables.",I added the tuple check to 'from_parameter_value' and added tests for 'from_parameter_value' and 'check' on tuples. I removed one test that expected failure on tuple values.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,389,2019-07-16T00:23:02Z,2019-08-15T15:45:43Z,2019-08-15T15:47:07Z,MERGED,True,19,9,2,https://github.com/christianrauch,accept tuples as parameter arrays,2,['in review'],https://github.com/ros2/rclpy/pull/389,https://github.com/cottsay,3,https://github.com/ros2/rclpy/pull/389#issuecomment-519737433,"Providing a python dict inside a launch file that contains a list parameter, e.g.
composable_node = ComposableNode(parameters=[{""tag_ids"": [9, 14]}])
or loading a YAML file (that contains tag_ids: [9, 14])
composable_node = ComposableNode(parameters=[""path/to/configuration.yaml""])
results in an error like:
[ERROR] [launch]: Caught exception in launch (see debug for traceback): invalid parameter value (9, 14)
because [9, 14] is recognised as tuple and not as list.
However, the parameter list logic only expects python lists.
This PR simply extends the parameter check to tuples to allow them to be used as iterables. There might be more places where a type check against list should be extended to all iterables.","Thanks for adding the unit tests, @christianrauch.
The only open issue I can see is that the new test code doesn't pass flake8:
E128 (./test/test_parameter.py:132:13)
continuation line under-indented for visual indent:
            Parameter.Type.from_parameter_value(int_tuple))",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,389,2019-07-16T00:23:02Z,2019-08-15T15:45:43Z,2019-08-15T15:47:07Z,MERGED,True,19,9,2,https://github.com/christianrauch,accept tuples as parameter arrays,2,['in review'],https://github.com/ros2/rclpy/pull/389,https://github.com/christianrauch,4,https://github.com/ros2/rclpy/pull/389#issuecomment-519739279,"Providing a python dict inside a launch file that contains a list parameter, e.g.
composable_node = ComposableNode(parameters=[{""tag_ids"": [9, 14]}])
or loading a YAML file (that contains tag_ids: [9, 14])
composable_node = ComposableNode(parameters=[""path/to/configuration.yaml""])
results in an error like:
[ERROR] [launch]: Caught exception in launch (see debug for traceback): invalid parameter value (9, 14)
because [9, 14] is recognised as tuple and not as list.
However, the parameter list logic only expects python lists.
This PR simply extends the parameter check to tuples to allow them to be used as iterables. There might be more places where a type check against list should be extended to all iterables.",@cottsay Should be fixed now.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,389,2019-07-16T00:23:02Z,2019-08-15T15:45:43Z,2019-08-15T15:47:07Z,MERGED,True,19,9,2,https://github.com/christianrauch,accept tuples as parameter arrays,2,['in review'],https://github.com/ros2/rclpy/pull/389,https://github.com/nuclearsandwich,5,https://github.com/ros2/rclpy/pull/389#issuecomment-521648593,"Providing a python dict inside a launch file that contains a list parameter, e.g.
composable_node = ComposableNode(parameters=[{""tag_ids"": [9, 14]}])
or loading a YAML file (that contains tag_ids: [9, 14])
composable_node = ComposableNode(parameters=[""path/to/configuration.yaml""])
results in an error like:
[ERROR] [launch]: Caught exception in launch (see debug for traceback): invalid parameter value (9, 14)
because [9, 14] is recognised as tuple and not as list.
However, the parameter list logic only expects python lists.
This PR simply extends the parameter check to tuples to allow them to be used as iterables. There might be more places where a type check against list should be extended to all iterables.","Linux 
Linux-aarch64 
macOS 
Windows",True,{'ROCKET': ['https://github.com/nuclearsandwich']}
ros2/rclpy,https://github.com/ros2/rclpy,389,2019-07-16T00:23:02Z,2019-08-15T15:45:43Z,2019-08-15T15:47:07Z,MERGED,True,19,9,2,https://github.com/christianrauch,accept tuples as parameter arrays,2,['in review'],https://github.com/ros2/rclpy/pull/389,https://github.com/nuclearsandwich,6,https://github.com/ros2/rclpy/pull/389#issuecomment-521649835,"Providing a python dict inside a launch file that contains a list parameter, e.g.
composable_node = ComposableNode(parameters=[{""tag_ids"": [9, 14]}])
or loading a YAML file (that contains tag_ids: [9, 14])
composable_node = ComposableNode(parameters=[""path/to/configuration.yaml""])
results in an error like:
[ERROR] [launch]: Caught exception in launch (see debug for traceback): invalid parameter value (9, 14)
because [9, 14] is recognised as tuple and not as list.
However, the parameter list logic only expects python lists.
This PR simply extends the parameter check to tuples to allow them to be used as iterables. There might be more places where a type check against list should be extended to all iterables.",Will merge if CI results are good.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,390,2019-07-17T23:10:17Z,2019-07-18T12:47:58Z,2019-07-18T14:57:35Z,MERGED,True,1,1,1,https://github.com/danielwangksu,fix missing 'raise',1,[],https://github.com/ros2/rclpy/pull/390,https://github.com/danielwangksu,1,https://github.com/ros2/rclpy/pull/390,fix  #387,fix  #387,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,390,2019-07-17T23:10:17Z,2019-07-18T12:47:58Z,2019-07-18T14:57:35Z,MERGED,True,1,1,1,https://github.com/danielwangksu,fix missing 'raise',1,[],https://github.com/ros2/rclpy/pull/390,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/390#issuecomment-512603992,fix  #387,"Thanks for the PR @danielwangksu ! It looks like the DCO check is complaining. Would you mind signing off on the commit?
git commit --amend --signoff",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,390,2019-07-17T23:10:17Z,2019-07-18T12:47:58Z,2019-07-18T14:57:35Z,MERGED,True,1,1,1,https://github.com/danielwangksu,fix missing 'raise',1,[],https://github.com/ros2/rclpy/pull/390,https://github.com/danielwangksu,3,https://github.com/ros2/rclpy/pull/390#issuecomment-512608600,fix  #387,"Sure thank you for reminding me.

Thanks
-Dan
…
On Jul 17 2019, at 4:20 pm, Shane Loretz ***@***.***> wrote:
 Thanks for the PR @danielwangksu ***@***.***/0?redirect=https%3A%2F%2Fgithub.com%2Fdanielwangksu&recipient=cmVwbHkrQUE1WkFXNkpSNENNVlc2Sk5QR0tMS0YzSFRQNFZFVkJOSEhCWDY3QTNRQHJlcGx5LmdpdGh1Yi5jb20%3D) ! It looks like the DCO check ***@***.***/1?redirect=https%3A%2F%2Fdiscourse.ros.org%2Ft%2Fstarting-to-enforce-developer-certificate-of-origin-dco-for-some-ros-2-repos%2F7420&recipient=cmVwbHkrQUE1WkFXNkpSNENNVlc2Sk5QR0tMS0YzSFRQNFZFVkJOSEhCWDY3QTNRQHJlcGx5LmdpdGh1Yi5jb20%3D) is complaining. Would you mind signing off on the commit?

 git commit --amend --signoff
 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub ***@***.***/2?redirect=https%3A%2F%2Fgithub.com%2Fros2%2Frclpy%2Fpull%2F390%3Femail_source%3Dnotifications%26email_token%3DAA5ZAW663ZJ35F455LRMLMDP76SMVA5CNFSM4IEVN2J2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD2G3OWA%23issuecomment-512603992&recipient=cmVwbHkrQUE1WkFXNkpSNENNVlc2Sk5QR0tMS0YzSFRQNFZFVkJOSEhCWDY3QTNRQHJlcGx5LmdpdGh1Yi5jb20%3D), or mute the thread ***@***.***/3?redirect=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAA5ZAWYZFCPWDRIAGWNRA73P76SMVANCNFSM4IEVN2JQ&recipient=cmVwbHkrQUE1WkFXNkpSNENNVlc2Sk5QR0tMS0YzSFRQNFZFVkJOSEhCWDY3QTNRQHJlcGx5LmdpdGh1Yi5jb20%3D).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,390,2019-07-17T23:10:17Z,2019-07-18T12:47:58Z,2019-07-18T14:57:35Z,MERGED,True,1,1,1,https://github.com/danielwangksu,fix missing 'raise',1,[],https://github.com/ros2/rclpy/pull/390,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/390#issuecomment-512610332,fix  #387,"CI (testing rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,390,2019-07-17T23:10:17Z,2019-07-18T12:47:58Z,2019-07-18T14:57:35Z,MERGED,True,1,1,1,https://github.com/danielwangksu,fix missing 'raise',1,[],https://github.com/ros2/rclpy/pull/390,https://github.com/clalancette,5,https://github.com/ros2/rclpy/pull/390#issuecomment-512800431,fix  #387,"@danielwangksu Thanks for the patch, looks good and CI is green, so I'll merge.  @sloretz , should we propose this for Dashing patch release 2?  It is a change in behavior, but right now I think Dashing will just ""do the wrong thing"" if a wrong object type is passed to set_ros_time_override.  Thoughts?",True,"{'THUMBS_UP': ['https://github.com/jubeira', 'https://github.com/danielwangksu']}"
ros2/rclpy,https://github.com/ros2/rclpy,390,2019-07-17T23:10:17Z,2019-07-18T12:47:58Z,2019-07-18T14:57:35Z,MERGED,True,1,1,1,https://github.com/danielwangksu,fix missing 'raise',1,[],https://github.com/ros2/rclpy/pull/390,https://github.com/sloretz,6,https://github.com/ros2/rclpy/pull/390#issuecomment-512852184,fix  #387,"@clalancette I added to the dashing patch release because I think the risk is low. IIUC the old behavior would likely be raising AttributeError if the object doesn't have an attribute called _time_handle, or raising ValueError if it does, but it's not a pycapsule with the right name.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,392,2019-07-24T19:36:00Z,2019-07-25T18:09:03Z,2019-07-25T18:09:12Z,MERGED,True,50,13,2,https://github.com/jubeira,Adding ignore_override parameter to declare_parameter(s).,1,[],https://github.com/ros2/rclpy/pull/392,https://github.com/jubeira,1,https://github.com/ros2/rclpy/pull/392,"Solves #391.
Signed-off-by: Juan Ignacio Ubeira jubeira@ekumenlabs.com","Solves #391.
Signed-off-by: Juan Ignacio Ubeira jubeira@ekumenlabs.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,392,2019-07-24T19:36:00Z,2019-07-25T18:09:03Z,2019-07-25T18:09:12Z,MERGED,True,50,13,2,https://github.com/jubeira,Adding ignore_override parameter to declare_parameter(s).,1,[],https://github.com/ros2/rclpy/pull/392,https://github.com/jubeira,2,https://github.com/ros2/rclpy/pull/392#issuecomment-515060765,"Solves #391.
Signed-off-by: Juan Ignacio Ubeira jubeira@ekumenlabs.com","CI:

Linux: 
Linux-aarch64: 
OSX: 
Windows:  (edit: first run stopped for unrelated reasons)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,392,2019-07-24T19:36:00Z,2019-07-25T18:09:03Z,2019-07-25T18:09:12Z,MERGED,True,50,13,2,https://github.com/jubeira,Adding ignore_override parameter to declare_parameter(s).,1,[],https://github.com/ros2/rclpy/pull/392,https://github.com/jubeira,3,https://github.com/ros2/rclpy/pull/392#issuecomment-515153813,"Solves #391.
Signed-off-by: Juan Ignacio Ubeira jubeira@ekumenlabs.com",Failures are known issues; merging now.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,394,2019-07-25T15:13:24Z,2019-07-29T12:39:31Z,2019-07-29T12:39:34Z,MERGED,True,82,48,3,https://github.com/jubeira,[Backport] Fixes for parameter handling,2,[],https://github.com/ros2/rclpy/pull/394,https://github.com/jubeira,1,https://github.com/ros2/rclpy/pull/394,"This PR is a backport of:

#377 (namespace expansion check; commit d6291cf).
#382 (allowing parameter declaration without a value; commit 72f5546).","This PR is a backport of:

#377 (namespace expansion check; commit d6291cf).
#382 (allowing parameter declaration without a value; commit 72f5546).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,394,2019-07-25T15:13:24Z,2019-07-29T12:39:31Z,2019-07-29T12:39:34Z,MERGED,True,82,48,3,https://github.com/jubeira,[Backport] Fixes for parameter handling,2,[],https://github.com/ros2/rclpy/pull/394,https://github.com/jubeira,2,https://github.com/ros2/rclpy/pull/394#issuecomment-515451486,"This PR is a backport of:

#377 (namespace expansion check; commit d6291cf).
#382 (allowing parameter declaration without a value; commit 72f5546).","CI:

Linux: 
Linux-aarch64: 
OSX: 
Windows:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,394,2019-07-25T15:13:24Z,2019-07-29T12:39:31Z,2019-07-29T12:39:34Z,MERGED,True,82,48,3,https://github.com/jubeira,[Backport] Fixes for parameter handling,2,[],https://github.com/ros2/rclpy/pull/394,https://github.com/jubeira,3,https://github.com/ros2/rclpy/pull/394#issuecomment-515973788,"This PR is a backport of:

#377 (namespace expansion check; commit d6291cf).
#382 (allowing parameter declaration without a value; commit 72f5546).","CI for dashing-release repos (as suggested by @nuclearsandwich):

Lunux: 
Linux-aarch64: 
OSX: 
Windows: 

Merging now!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,396,2019-07-29T14:08:16Z,2019-07-30T21:33:20Z,2019-07-30T21:33:26Z,MERGED,True,41,13,3,https://github.com/jubeira,Declaring 'use_sim_time' when attaching node to time source.,3,[],https://github.com/ros2/rclpy/pull/396,https://github.com/jubeira,1,https://github.com/ros2/rclpy/pull/396,"Closes #395.
Signed-off-by: Juan Ignacio Ubeira jubeira@ekumenlabs.com","Closes #395.
Signed-off-by: Juan Ignacio Ubeira jubeira@ekumenlabs.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,396,2019-07-29T14:08:16Z,2019-07-30T21:33:20Z,2019-07-30T21:33:26Z,MERGED,True,41,13,3,https://github.com/jubeira,Declaring 'use_sim_time' when attaching node to time source.,3,[],https://github.com/ros2/rclpy/pull/396,https://github.com/jubeira,2,https://github.com/ros2/rclpy/pull/396#issuecomment-516171603,"Closes #395.
Signed-off-by: Juan Ignacio Ubeira jubeira@ekumenlabs.com","CI:

Linux: 
Linux-aarch64: 
OSX: 
Windows: 

Needs ros2/ros2cli#307 for CI to pass.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,396,2019-07-29T14:08:16Z,2019-07-30T21:33:20Z,2019-07-30T21:33:26Z,MERGED,True,41,13,3,https://github.com/jubeira,Declaring 'use_sim_time' when attaching node to time source.,3,[],https://github.com/ros2/rclpy/pull/396,https://github.com/jubeira,3,https://github.com/ros2/rclpy/pull/396#issuecomment-516604299,"Closes #395.
Signed-off-by: Juan Ignacio Ubeira jubeira@ekumenlabs.com",Failures are unrelated known issues; merging now!,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,397,2019-07-29T16:40:27Z,2019-07-29T18:25:18Z,2019-07-29T18:25:20Z,MERGED,True,1,1,1,https://github.com/nuclearsandwich,[Backport] Don't convert a timeout_sec to nsecs in executors,1,['in review'],https://github.com/ros2/rclpy/pull/397,https://github.com/nuclearsandwich,1,https://github.com/ros2/rclpy/pull/397,Backport of #372 for Dashing.,Backport of #372 for Dashing.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,397,2019-07-29T16:40:27Z,2019-07-29T18:25:18Z,2019-07-29T18:25:20Z,MERGED,True,1,1,1,https://github.com/nuclearsandwich,[Backport] Don't convert a timeout_sec to nsecs in executors,1,['in review'],https://github.com/ros2/rclpy/pull/397,https://github.com/nuclearsandwich,2,https://github.com/ros2/rclpy/pull/397#issuecomment-516067941,Backport of #372 for Dashing.,"Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,399,2019-07-29T23:31:21Z,2019-07-31T21:05:11Z,2019-07-31T21:05:14Z,MERGED,True,27,8,1,https://github.com/cottsay,[Backport] Use params from node '/**' from parameter YAML file,1,['in review'],https://github.com/ros2/rclpy/pull/399,https://github.com/cottsay,1,https://github.com/ros2/rclpy/pull/399,"This is a backport of #370 for Dashing.

The short-term goal of this change is to enable the creation of a parameter YAML file which is applied to each node, regardless of node name or namespace.
Future work is to support all wildcard syntax in node names in parameter YAML files.","This is a backport of #370 for Dashing.

The short-term goal of this change is to enable the creation of a parameter YAML file which is applied to each node, regardless of node name or namespace.
Future work is to support all wildcard syntax in node names in parameter YAML files.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,399,2019-07-29T23:31:21Z,2019-07-31T21:05:11Z,2019-07-31T21:05:14Z,MERGED,True,27,8,1,https://github.com/cottsay,[Backport] Use params from node '/**' from parameter YAML file,1,['in review'],https://github.com/ros2/rclpy/pull/399,https://github.com/cottsay,2,https://github.com/ros2/rclpy/pull/399#issuecomment-516953683,"This is a backport of #370 for Dashing.

The short-term goal of this change is to enable the creation of a parameter YAML file which is applied to each node, regardless of node name or namespace.
Future work is to support all wildcard syntax in node names in parameter YAML files.",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,399,2019-07-29T23:31:21Z,2019-07-31T21:05:11Z,2019-07-31T21:05:14Z,MERGED,True,27,8,1,https://github.com/cottsay,[Backport] Use params from node '/**' from parameter YAML file,1,['in review'],https://github.com/ros2/rclpy/pull/399,https://github.com/cottsay,3,https://github.com/ros2/rclpy/pull/399#issuecomment-516959747,"This is a backport of #370 for Dashing.

The short-term goal of this change is to enable the creation of a parameter YAML file which is applied to each node, regardless of node name or namespace.
Future work is to support all wildcard syntax in node names in parameter YAML files.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,401,2019-07-30T21:59:56Z,2019-07-31T13:23:54Z,2019-07-31T13:23:59Z,MERGED,True,38,11,3,https://github.com/jubeira,[Backport - dashing] Declaring 'use_sim_time' when attaching node to time source,1,[],https://github.com/ros2/rclpy/pull/401,https://github.com/jubeira,1,https://github.com/ros2/rclpy/pull/401,Backports #396 to dashing.,Backports #396 to dashing.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,401,2019-07-30T21:59:56Z,2019-07-31T13:23:54Z,2019-07-31T13:23:59Z,MERGED,True,38,11,3,https://github.com/jubeira,[Backport - dashing] Declaring 'use_sim_time' when attaching node to time source,1,[],https://github.com/ros2/rclpy/pull/401,https://github.com/jubeira,2,https://github.com/ros2/rclpy/pull/401#issuecomment-516613311,Backports #396 to dashing.,"CI:

Linux: 
Linux-aarch64: 
OSX: 
Windows:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,401,2019-07-30T21:59:56Z,2019-07-31T13:23:54Z,2019-07-31T13:23:59Z,MERGED,True,38,11,3,https://github.com/jubeira,[Backport - dashing] Declaring 'use_sim_time' when attaching node to time source,1,[],https://github.com/ros2/rclpy/pull/401,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/401#issuecomment-516840037,Backports #396 to dashing.,"My one concern with this pull request is that any tests or tools that (incorrectly) assume how many parameters a python node will have, may now have that assumption broken because we're now always declaring this parameter.

From @jubeira 's partial CI above, it's pretty clear that none of the core ROS 2 tests have these expectations.  That doesn't mean that others outside of the core don't, but I agree that this is a bug and we should fix it.  Anything that is relying on certain numbers of parameters is fragile and buggy anyway, I guess they'll find out now :).  So I'm going to approve this as well.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,401,2019-07-30T21:59:56Z,2019-07-31T13:23:54Z,2019-07-31T13:23:59Z,MERGED,True,38,11,3,https://github.com/jubeira,[Backport - dashing] Declaring 'use_sim_time' when attaching node to time source,1,[],https://github.com/ros2/rclpy/pull/401,https://github.com/jubeira,4,https://github.com/ros2/rclpy/pull/401#issuecomment-516846863,Backports #396 to dashing.,"Thanks for your input @wjwwood @clalancette!
I've edited the comment above with full CI results; everything's green.
Just for the record, the only test that I found that had this issue was fixed in ros2/ros2cli#307 (master branch; the test doesn't exist in dashing).
That being said, I'll proceed to merge now.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,402,2019-07-31T20:15:22Z,2019-08-19T21:05:29Z,2019-08-19T21:05:30Z,CLOSED,False,3,0,1,https://github.com/ivanpauno,Check if context is ok when initializing wait set in executor,1,['in progress'],https://github.com/ros2/rclpy/pull/402,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/402,"Fixes #398.
The context is being shutdown externally https://github.com/ros-visualization/rqt/blob/3911625f95cc14a751c91fa2712d78ab1a6854cc/rqt_gui_py/src/rqt_gui_py/ros_py_plugin_provider.py#L81-L85.
But the executor is using it for creating a wait_set:

  
    
      rclpy/rclpy/rclpy/executors.py
    
    
        Lines 524 to 532
      in
      1588d07
    
  
  
    

        
          
           _rclpy.rclpy_wait_set_init( 
        

        
          
               wait_set, 
        

        
          
               entity_count.num_subscriptions, 
        

        
          
               entity_count.num_guard_conditions, 
        

        
          
               entity_count.num_timers, 
        

        
          
               entity_count.num_clients, 
        

        
          
               entity_count.num_services, 
        

        
          
               entity_count.num_events, 
        

        
          
               self._context.handle) 
        
    
  


So when the context is shut down externally, this error happens:
Traceback (most recent call last):
  File ""/Users/karsten/workspace/osrf/ros2_full/build/rqt_gui_py/src/rqt_gui_py/rclpy_spinner.py"", line 32, in run
    executor.spin_once(timeout_sec=1.0)
  File ""/Users/karsten/workspace/osrf/ros2_full/install/lib/python3.7/site-packages/rclpy/executors.py"", line 695, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/Users/karsten/workspace/osrf/ros2_full/install/lib/python3.7/site-packages/rclpy/executors.py"", line 649, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/Users/karsten/workspace/osrf/ros2_full/install/lib/python3.7/site-packages/rclpy/executors.py"", line 532, in _wait_for_ready_callbacks
    self._context.handle)
RuntimeError: Failed to initialize wait set: the given context is not valid, either rcl_init() was not called or rcl_shutdown() was called., at /Users/karsten/workspace/osrf/ros2_full/src/ros2/rcl/rcl/src/rcl/wait.c:130

This avoids the error, by checking if the context is ok. If not it raises a ShutdownException.

rclcpp is doing something much cleaner: It doesn't use the executor when waiting for a new executable. It only uses the context when creating/destructing the executor. Why?
Because rclcpp doesn't create a wait set each time, but resizes it:
https://github.com/ros2/rclcpp/blob/9be3e08cd4d04193fb76cb6dd8f5db11d7199e2f/rclcpp/src/rclcpp/executor.cpp#L451-L459
A context is not needed for resizing.
If we want to do the same, we will need to add some functions from rcl to rclpy (I think that's subject of a follow up).

rqt_publisher still fails when closing it, but with a failure not related to rclpy:
Exception ignored in: <bound method DockWidgetTitleBar.__del__ of <qt_gui.dock_widget_title_bar.DockWidgetTitleBar object at 0x7fe914174678>>
Traceback (most recent call last):
  File ""/home/ivanpauno/ros2_ws/install/qt_gui/lib/python3.6/site-packages/qt_gui/dock_widget_title_bar.py"", line 109, in __del__
    self._dock_widget.removeEventFilter(self)
RuntimeError: wrapped C/C++ object of type DockWidget has been deleted","Fixes #398.
The context is being shutdown externally https://github.com/ros-visualization/rqt/blob/3911625f95cc14a751c91fa2712d78ab1a6854cc/rqt_gui_py/src/rqt_gui_py/ros_py_plugin_provider.py#L81-L85.
But the executor is using it for creating a wait_set:

  
    
      rclpy/rclpy/rclpy/executors.py
    
    
        Lines 524 to 532
      in
      1588d07
    
  
  
    

        
          
           _rclpy.rclpy_wait_set_init( 
        

        
          
               wait_set, 
        

        
          
               entity_count.num_subscriptions, 
        

        
          
               entity_count.num_guard_conditions, 
        

        
          
               entity_count.num_timers, 
        

        
          
               entity_count.num_clients, 
        

        
          
               entity_count.num_services, 
        

        
          
               entity_count.num_events, 
        

        
          
               self._context.handle) 
        
    
  


So when the context is shut down externally, this error happens:
Traceback (most recent call last):
  File ""/Users/karsten/workspace/osrf/ros2_full/build/rqt_gui_py/src/rqt_gui_py/rclpy_spinner.py"", line 32, in run
    executor.spin_once(timeout_sec=1.0)
  File ""/Users/karsten/workspace/osrf/ros2_full/install/lib/python3.7/site-packages/rclpy/executors.py"", line 695, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/Users/karsten/workspace/osrf/ros2_full/install/lib/python3.7/site-packages/rclpy/executors.py"", line 649, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/Users/karsten/workspace/osrf/ros2_full/install/lib/python3.7/site-packages/rclpy/executors.py"", line 532, in _wait_for_ready_callbacks
    self._context.handle)
RuntimeError: Failed to initialize wait set: the given context is not valid, either rcl_init() was not called or rcl_shutdown() was called., at /Users/karsten/workspace/osrf/ros2_full/src/ros2/rcl/rcl/src/rcl/wait.c:130

This avoids the error, by checking if the context is ok. If not it raises a ShutdownException.

rclcpp is doing something much cleaner: It doesn't use the executor when waiting for a new executable. It only uses the context when creating/destructing the executor. Why?
Because rclcpp doesn't create a wait set each time, but resizes it:
https://github.com/ros2/rclcpp/blob/9be3e08cd4d04193fb76cb6dd8f5db11d7199e2f/rclcpp/src/rclcpp/executor.cpp#L451-L459
A context is not needed for resizing.
If we want to do the same, we will need to add some functions from rcl to rclpy (I think that's subject of a follow up).

rqt_publisher still fails when closing it, but with a failure not related to rclpy:
Exception ignored in: <bound method DockWidgetTitleBar.__del__ of <qt_gui.dock_widget_title_bar.DockWidgetTitleBar object at 0x7fe914174678>>
Traceback (most recent call last):
  File ""/home/ivanpauno/ros2_ws/install/qt_gui/lib/python3.6/site-packages/qt_gui/dock_widget_title_bar.py"", line 109, in __del__
    self._dock_widget.removeEventFilter(self)
RuntimeError: wrapped C/C++ object of type DockWidget has been deleted",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,402,2019-07-31T20:15:22Z,2019-08-19T21:05:29Z,2019-08-19T21:05:30Z,CLOSED,False,3,0,1,https://github.com/ivanpauno,Check if context is ok when initializing wait set in executor,1,['in progress'],https://github.com/ros2/rclpy/pull/402,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/402#issuecomment-517008620,"Fixes #398.
The context is being shutdown externally https://github.com/ros-visualization/rqt/blob/3911625f95cc14a751c91fa2712d78ab1a6854cc/rqt_gui_py/src/rqt_gui_py/ros_py_plugin_provider.py#L81-L85.
But the executor is using it for creating a wait_set:

  
    
      rclpy/rclpy/rclpy/executors.py
    
    
        Lines 524 to 532
      in
      1588d07
    
  
  
    

        
          
           _rclpy.rclpy_wait_set_init( 
        

        
          
               wait_set, 
        

        
          
               entity_count.num_subscriptions, 
        

        
          
               entity_count.num_guard_conditions, 
        

        
          
               entity_count.num_timers, 
        

        
          
               entity_count.num_clients, 
        

        
          
               entity_count.num_services, 
        

        
          
               entity_count.num_events, 
        

        
          
               self._context.handle) 
        
    
  


So when the context is shut down externally, this error happens:
Traceback (most recent call last):
  File ""/Users/karsten/workspace/osrf/ros2_full/build/rqt_gui_py/src/rqt_gui_py/rclpy_spinner.py"", line 32, in run
    executor.spin_once(timeout_sec=1.0)
  File ""/Users/karsten/workspace/osrf/ros2_full/install/lib/python3.7/site-packages/rclpy/executors.py"", line 695, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/Users/karsten/workspace/osrf/ros2_full/install/lib/python3.7/site-packages/rclpy/executors.py"", line 649, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/Users/karsten/workspace/osrf/ros2_full/install/lib/python3.7/site-packages/rclpy/executors.py"", line 532, in _wait_for_ready_callbacks
    self._context.handle)
RuntimeError: Failed to initialize wait set: the given context is not valid, either rcl_init() was not called or rcl_shutdown() was called., at /Users/karsten/workspace/osrf/ros2_full/src/ros2/rcl/rcl/src/rcl/wait.c:130

This avoids the error, by checking if the context is ok. If not it raises a ShutdownException.

rclcpp is doing something much cleaner: It doesn't use the executor when waiting for a new executable. It only uses the context when creating/destructing the executor. Why?
Because rclcpp doesn't create a wait set each time, but resizes it:
https://github.com/ros2/rclcpp/blob/9be3e08cd4d04193fb76cb6dd8f5db11d7199e2f/rclcpp/src/rclcpp/executor.cpp#L451-L459
A context is not needed for resizing.
If we want to do the same, we will need to add some functions from rcl to rclpy (I think that's subject of a follow up).

rqt_publisher still fails when closing it, but with a failure not related to rclpy:
Exception ignored in: <bound method DockWidgetTitleBar.__del__ of <qt_gui.dock_widget_title_bar.DockWidgetTitleBar object at 0x7fe914174678>>
Traceback (most recent call last):
  File ""/home/ivanpauno/ros2_ws/install/qt_gui/lib/python3.6/site-packages/qt_gui/dock_widget_title_bar.py"", line 109, in __del__
    self._dock_widget.removeEventFilter(self)
RuntimeError: wrapped C/C++ object of type DockWidget has been deleted","+1 to resizing the wait set instead of re-initializing it.
There are definitely other places that will raise if the context becomes invalid. It may be worthwhile to have a dedicated exception to raise when that occurs instead of raising RuntimeError.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,402,2019-07-31T20:15:22Z,2019-08-19T21:05:29Z,2019-08-19T21:05:30Z,CLOSED,False,3,0,1,https://github.com/ivanpauno,Check if context is ok when initializing wait set in executor,1,['in progress'],https://github.com/ros2/rclpy/pull/402,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/402#issuecomment-517013400,"Fixes #398.
The context is being shutdown externally https://github.com/ros-visualization/rqt/blob/3911625f95cc14a751c91fa2712d78ab1a6854cc/rqt_gui_py/src/rqt_gui_py/ros_py_plugin_provider.py#L81-L85.
But the executor is using it for creating a wait_set:

  
    
      rclpy/rclpy/rclpy/executors.py
    
    
        Lines 524 to 532
      in
      1588d07
    
  
  
    

        
          
           _rclpy.rclpy_wait_set_init( 
        

        
          
               wait_set, 
        

        
          
               entity_count.num_subscriptions, 
        

        
          
               entity_count.num_guard_conditions, 
        

        
          
               entity_count.num_timers, 
        

        
          
               entity_count.num_clients, 
        

        
          
               entity_count.num_services, 
        

        
          
               entity_count.num_events, 
        

        
          
               self._context.handle) 
        
    
  


So when the context is shut down externally, this error happens:
Traceback (most recent call last):
  File ""/Users/karsten/workspace/osrf/ros2_full/build/rqt_gui_py/src/rqt_gui_py/rclpy_spinner.py"", line 32, in run
    executor.spin_once(timeout_sec=1.0)
  File ""/Users/karsten/workspace/osrf/ros2_full/install/lib/python3.7/site-packages/rclpy/executors.py"", line 695, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/Users/karsten/workspace/osrf/ros2_full/install/lib/python3.7/site-packages/rclpy/executors.py"", line 649, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/Users/karsten/workspace/osrf/ros2_full/install/lib/python3.7/site-packages/rclpy/executors.py"", line 532, in _wait_for_ready_callbacks
    self._context.handle)
RuntimeError: Failed to initialize wait set: the given context is not valid, either rcl_init() was not called or rcl_shutdown() was called., at /Users/karsten/workspace/osrf/ros2_full/src/ros2/rcl/rcl/src/rcl/wait.c:130

This avoids the error, by checking if the context is ok. If not it raises a ShutdownException.

rclcpp is doing something much cleaner: It doesn't use the executor when waiting for a new executable. It only uses the context when creating/destructing the executor. Why?
Because rclcpp doesn't create a wait set each time, but resizes it:
https://github.com/ros2/rclcpp/blob/9be3e08cd4d04193fb76cb6dd8f5db11d7199e2f/rclcpp/src/rclcpp/executor.cpp#L451-L459
A context is not needed for resizing.
If we want to do the same, we will need to add some functions from rcl to rclpy (I think that's subject of a follow up).

rqt_publisher still fails when closing it, but with a failure not related to rclpy:
Exception ignored in: <bound method DockWidgetTitleBar.__del__ of <qt_gui.dock_widget_title_bar.DockWidgetTitleBar object at 0x7fe914174678>>
Traceback (most recent call last):
  File ""/home/ivanpauno/ros2_ws/install/qt_gui/lib/python3.6/site-packages/qt_gui/dock_widget_title_bar.py"", line 109, in __del__
    self._dock_widget.removeEventFilter(self)
RuntimeError: wrapped C/C++ object of type DockWidget has been deleted","There are definitely other places that will raise if the context becomes invalid. It may be worthwhile to have a dedicated exception to raise when that occurs instead of raising RuntimeError.

Yes, I have played a little bit more, and there are some other cases when this is still failing:
import threading
import time
import rclpy
from rclpy.node import Node
from std_msgs.msg import String
from rclpy.executors import MultiThreadedExecutor

class Talker(Node):

    def __init__(self):
        super().__init__('talker')
        self.i = 0
        self.pub = self.create_publisher(String, 'chatter', 10)
        timer_period = 1.0
        self.tmr = self.create_timer(timer_period, self.timer_callback)

    def timer_callback(self):
        msg = String()
        msg.data = 'Hello World: {0}'.format(self.i)
        self.i += 1
        self.get_logger().info('Publishing: ""{0}""'.format(msg.data))
        self.pub.publish(msg)

def kill():
    print('waiting')
    time.sleep(5)
    print('shutting down')
    rclpy.shutdown()


def main(args=None):
    rclpy.init(args=args)

    node = Talker()

    thread = threading.Thread(target=kill)
    thread.start()

    executor = MultiThreadedExecutor()
    executor.add_node(node)

    print('spinning')
    while rclpy.ok():
        executor.spin_once(timeout_sec=1.0)

    print('done')


if __name__ == '__main__':
    main()
Traceback (most recent call last):
  File ""example.py"", line 50, in <module>
    main()
  File ""example.py"", line 44, in main
    executor.spin_once(timeout_sec=1.0)
  File ""/home/ivanpauno/ros2_ws/install/rclpy/lib/python3.6/site-packages/rclpy/executors.py"", line 695, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/ivanpauno/ros2_ws/install/rclpy/lib/python3.6/site-packages/rclpy/executors.py"", line 649, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/ivanpauno/ros2_ws/install/rclpy/lib/python3.6/site-packages/rclpy/executors.py"", line 532, in _wait_for_ready_callbacks
    self._context.handle)
RuntimeError: Failed to initialize wait set: the given context is not valid, either rcl_init() was not called or rcl_shutdown() was called., at /home/ivanpauno/ros2_ws/src/ros2/rcl/rcl/src/rcl/wait.c:130
The following exception was never retrieved: Failed to publish: publisher's context is invalid, at /home/ivanpauno/ros2_ws/src/ros2/rcl/rcl/src/rcl/publisher.c:343
sys:1: RuntimeWarning: Failed to fini publisher: rcl node implementation is invalid, at /home/ivanpauno/ros2_ws/src/ros2/rcl/rcl/src/rcl/node.c:462

And the problem is the same, shutting down a context isn't cleaning executors nicely.
I will take another look before merging this.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,402,2019-07-31T20:15:22Z,2019-08-19T21:05:29Z,2019-08-19T21:05:30Z,CLOSED,False,3,0,1,https://github.com/ivanpauno,Check if context is ok when initializing wait set in executor,1,['in progress'],https://github.com/ros2/rclpy/pull/402,https://github.com/nuclearsandwich,4,https://github.com/ros2/rclpy/pull/402#issuecomment-519558475,"Fixes #398.
The context is being shutdown externally https://github.com/ros-visualization/rqt/blob/3911625f95cc14a751c91fa2712d78ab1a6854cc/rqt_gui_py/src/rqt_gui_py/ros_py_plugin_provider.py#L81-L85.
But the executor is using it for creating a wait_set:

  
    
      rclpy/rclpy/rclpy/executors.py
    
    
        Lines 524 to 532
      in
      1588d07
    
  
  
    

        
          
           _rclpy.rclpy_wait_set_init( 
        

        
          
               wait_set, 
        

        
          
               entity_count.num_subscriptions, 
        

        
          
               entity_count.num_guard_conditions, 
        

        
          
               entity_count.num_timers, 
        

        
          
               entity_count.num_clients, 
        

        
          
               entity_count.num_services, 
        

        
          
               entity_count.num_events, 
        

        
          
               self._context.handle) 
        
    
  


So when the context is shut down externally, this error happens:
Traceback (most recent call last):
  File ""/Users/karsten/workspace/osrf/ros2_full/build/rqt_gui_py/src/rqt_gui_py/rclpy_spinner.py"", line 32, in run
    executor.spin_once(timeout_sec=1.0)
  File ""/Users/karsten/workspace/osrf/ros2_full/install/lib/python3.7/site-packages/rclpy/executors.py"", line 695, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/Users/karsten/workspace/osrf/ros2_full/install/lib/python3.7/site-packages/rclpy/executors.py"", line 649, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/Users/karsten/workspace/osrf/ros2_full/install/lib/python3.7/site-packages/rclpy/executors.py"", line 532, in _wait_for_ready_callbacks
    self._context.handle)
RuntimeError: Failed to initialize wait set: the given context is not valid, either rcl_init() was not called or rcl_shutdown() was called., at /Users/karsten/workspace/osrf/ros2_full/src/ros2/rcl/rcl/src/rcl/wait.c:130

This avoids the error, by checking if the context is ok. If not it raises a ShutdownException.

rclcpp is doing something much cleaner: It doesn't use the executor when waiting for a new executable. It only uses the context when creating/destructing the executor. Why?
Because rclcpp doesn't create a wait set each time, but resizes it:
https://github.com/ros2/rclcpp/blob/9be3e08cd4d04193fb76cb6dd8f5db11d7199e2f/rclcpp/src/rclcpp/executor.cpp#L451-L459
A context is not needed for resizing.
If we want to do the same, we will need to add some functions from rcl to rclpy (I think that's subject of a follow up).

rqt_publisher still fails when closing it, but with a failure not related to rclpy:
Exception ignored in: <bound method DockWidgetTitleBar.__del__ of <qt_gui.dock_widget_title_bar.DockWidgetTitleBar object at 0x7fe914174678>>
Traceback (most recent call last):
  File ""/home/ivanpauno/ros2_ws/install/qt_gui/lib/python3.6/site-packages/qt_gui/dock_widget_title_bar.py"", line 109, in __del__
    self._dock_widget.removeEventFilter(self)
RuntimeError: wrapped C/C++ object of type DockWidget has been deleted",@ivanpauno I didn't see that #403 replaces this PR. I'm going to leave the applied labels to make sure this doesn't get looked at by the next triager.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,402,2019-07-31T20:15:22Z,2019-08-19T21:05:29Z,2019-08-19T21:05:30Z,CLOSED,False,3,0,1,https://github.com/ivanpauno,Check if context is ok when initializing wait set in executor,1,['in progress'],https://github.com/ros2/rclpy/pull/402,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/402#issuecomment-522753533,"Fixes #398.
The context is being shutdown externally https://github.com/ros-visualization/rqt/blob/3911625f95cc14a751c91fa2712d78ab1a6854cc/rqt_gui_py/src/rqt_gui_py/ros_py_plugin_provider.py#L81-L85.
But the executor is using it for creating a wait_set:

  
    
      rclpy/rclpy/rclpy/executors.py
    
    
        Lines 524 to 532
      in
      1588d07
    
  
  
    

        
          
           _rclpy.rclpy_wait_set_init( 
        

        
          
               wait_set, 
        

        
          
               entity_count.num_subscriptions, 
        

        
          
               entity_count.num_guard_conditions, 
        

        
          
               entity_count.num_timers, 
        

        
          
               entity_count.num_clients, 
        

        
          
               entity_count.num_services, 
        

        
          
               entity_count.num_events, 
        

        
          
               self._context.handle) 
        
    
  


So when the context is shut down externally, this error happens:
Traceback (most recent call last):
  File ""/Users/karsten/workspace/osrf/ros2_full/build/rqt_gui_py/src/rqt_gui_py/rclpy_spinner.py"", line 32, in run
    executor.spin_once(timeout_sec=1.0)
  File ""/Users/karsten/workspace/osrf/ros2_full/install/lib/python3.7/site-packages/rclpy/executors.py"", line 695, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/Users/karsten/workspace/osrf/ros2_full/install/lib/python3.7/site-packages/rclpy/executors.py"", line 649, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/Users/karsten/workspace/osrf/ros2_full/install/lib/python3.7/site-packages/rclpy/executors.py"", line 532, in _wait_for_ready_callbacks
    self._context.handle)
RuntimeError: Failed to initialize wait set: the given context is not valid, either rcl_init() was not called or rcl_shutdown() was called., at /Users/karsten/workspace/osrf/ros2_full/src/ros2/rcl/rcl/src/rcl/wait.c:130

This avoids the error, by checking if the context is ok. If not it raises a ShutdownException.

rclcpp is doing something much cleaner: It doesn't use the executor when waiting for a new executable. It only uses the context when creating/destructing the executor. Why?
Because rclcpp doesn't create a wait set each time, but resizes it:
https://github.com/ros2/rclcpp/blob/9be3e08cd4d04193fb76cb6dd8f5db11d7199e2f/rclcpp/src/rclcpp/executor.cpp#L451-L459
A context is not needed for resizing.
If we want to do the same, we will need to add some functions from rcl to rclpy (I think that's subject of a follow up).

rqt_publisher still fails when closing it, but with a failure not related to rclpy:
Exception ignored in: <bound method DockWidgetTitleBar.__del__ of <qt_gui.dock_widget_title_bar.DockWidgetTitleBar object at 0x7fe914174678>>
Traceback (most recent call last):
  File ""/home/ivanpauno/ros2_ws/install/qt_gui/lib/python3.6/site-packages/qt_gui/dock_widget_title_bar.py"", line 109, in __del__
    self._dock_widget.removeEventFilter(self)
RuntimeError: wrapped C/C++ object of type DockWidget has been deleted",Closing since #403 was merged.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,403,2019-08-02T14:41:31Z,2019-08-16T19:41:17Z,2019-08-16T19:41:21Z,MERGED,True,34,3,2,https://github.com/ivanpauno,"Awake waitables on shutdown, check if context is valid",5,['in review'],https://github.com/ros2/rclpy/pull/403,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/403,"Replaces #402.
Fixes #398.
It solves two problems:

The executor wasn't awaken when shutdown
_wait_for_ready_callbacks was looping until yielding work, without checking if the context is valid.

Some error messages may still appear when shutting down contexts (similar to ros2/rclcpp#812), but they are harder to reproduce.","Replaces #402.
Fixes #398.
It solves two problems:

The executor wasn't awaken when shutdown
_wait_for_ready_callbacks was looping until yielding work, without checking if the context is valid.

Some error messages may still appear when shutting down contexts (similar to ros2/rclcpp#812), but they are harder to reproduce.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,403,2019-08-02T14:41:31Z,2019-08-16T19:41:17Z,2019-08-16T19:41:21Z,MERGED,True,34,3,2,https://github.com/ivanpauno,"Awake waitables on shutdown, check if context is valid",5,['in review'],https://github.com/ros2/rclpy/pull/403,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/403#issuecomment-517727486,"Replaces #402.
Fixes #398.
It solves two problems:

The executor wasn't awaken when shutdown
_wait_for_ready_callbacks was looping until yielding work, without checking if the context is valid.

Some error messages may still appear when shutting down contexts (similar to ros2/rclcpp#812), but they are harder to reproduce.","An example that was waiting forever after shutdown without this fix:
import threading
import time
import rclpy
from rclpy.node import Node
from std_msgs.msg import String
from rclpy.executors import MultiThreadedExecutor

class Listener(Node):

    def __init__(self):
        super().__init__('listener')
        self.sub = self.create_subscription(String, 'chatter', self.chatter_callback, 10)

    def chatter_callback(self, msg):
        self.get_logger().info('I heard: [%s]' % msg.data)


def kill():
    print('waiting')
    time.sleep(5)
    print('shutting down')
    rclpy.shutdown()


def main(args=None):
    rclpy.init()
    executor = MultiThreadedExecutor()
    node = Listener()

    thread = threading.Thread(target=kill)
    thread.start()

    executor.add_node(node)

    print('spinning')
    while rclpy.ok():
        executor.spin_once()

    print('done')


if __name__ == '__main__':
    main()",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,403,2019-08-02T14:41:31Z,2019-08-16T19:41:17Z,2019-08-16T19:41:21Z,MERGED,True,34,3,2,https://github.com/ivanpauno,"Awake waitables on shutdown, check if context is valid",5,['in review'],https://github.com/ros2/rclpy/pull/403,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/403#issuecomment-519251881,"Replaces #402.
Fixes #398.
It solves two problems:

The executor wasn't awaken when shutdown
_wait_for_ready_callbacks was looping until yielding work, without checking if the context is valid.

Some error messages may still appear when shutting down contexts (similar to ros2/rclcpp#812), but they are harder to reproduce.",@sloretz Friendly ping,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,403,2019-08-02T14:41:31Z,2019-08-16T19:41:17Z,2019-08-16T19:41:21Z,MERGED,True,34,3,2,https://github.com/ivanpauno,"Awake waitables on shutdown, check if context is valid",5,['in review'],https://github.com/ros2/rclpy/pull/403,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/403#issuecomment-522116532,"Replaces #402.
Fixes #398.
It solves two problems:

The executor wasn't awaken when shutdown
_wait_for_ready_callbacks was looping until yielding work, without checking if the context is valid.

Some error messages may still appear when shutting down contexts (similar to ros2/rclcpp#812), but they are harder to reproduce.","CI (testing rclpy, only fastrtps)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,404,2019-08-05T11:54:54Z,2019-08-05T17:00:46Z,2019-08-05T17:00:46Z,MERGED,True,58,58,3,https://github.com/Geno117,Replace 'NULL == ' with ! Signed-off-by: Geno117,1,[],https://github.com/ros2/rclpy/pull/404,https://github.com/Geno117,1,https://github.com/ros2/rclpy/pull/404,fix #331,fix #331,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,404,2019-08-05T11:54:54Z,2019-08-05T17:00:46Z,2019-08-05T17:00:46Z,MERGED,True,58,58,3,https://github.com/Geno117,Replace 'NULL == ' with ! Signed-off-by: Geno117,1,[],https://github.com/ros2/rclpy/pull/404,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/404#issuecomment-518300624,fix #331,"CI (testing rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,405,2019-08-05T16:52:27Z,2019-08-07T15:58:25Z,2019-09-02T15:04:40Z,MERGED,True,22,4,4,https://github.com/hidmic,Adapt to '--ros-args ... [--]'-based ROS args extraction,4,[],https://github.com/ros2/rclpy/pull/405,https://github.com/hidmic,1,https://github.com/ros2/rclpy/pull/405,Precisely what the title says. Connected to ros2/rcl#477.,Precisely what the title says. Connected to ros2/rcl#477.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,405,2019-08-05T16:52:27Z,2019-08-07T15:58:25Z,2019-09-02T15:04:40Z,MERGED,True,22,4,4,https://github.com/hidmic,Adapt to '--ros-args ... [--]'-based ROS args extraction,4,[],https://github.com/ros2/rclpy/pull/405,https://github.com/hidmic,2,https://github.com/ros2/rclpy/pull/405#issuecomment-518354581,Precisely what the title says. Connected to ros2/rcl#477.,"So, I'm having second thoughts about 3256ee2 too. I did it for consistency with rclcpp behaviour but it makes the API somewhat asymmetric compared to arguments provided to rclpy.init().",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,405,2019-08-05T16:52:27Z,2019-08-07T15:58:25Z,2019-09-02T15:04:40Z,MERGED,True,22,4,4,https://github.com/hidmic,Adapt to '--ros-args ... [--]'-based ROS args extraction,4,[],https://github.com/ros2/rclpy/pull/405,https://github.com/wjwwood,3,https://github.com/ros2/rclpy/pull/405#issuecomment-518396004,Precisely what the title says. Connected to ros2/rcl#477.,"Again, I don't feel strongly about it, I don't mind the feature as long as it's documented and consistent.

it makes the API somewhat asymmetric compared to arguments provided to rclpy.init().

I don't really think this is an issue (especially if documented). Personally I think of the arguments to rclpy.init() as ""argv"" which traditionally the command line arguments, even if it does not have to be the command line arguments, and I think of the arguments to the node as ""arguments for this node"" which implies to me that it is probably a subset of the full command line arguments anyways.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,407,2019-08-23T17:25:04Z,2019-08-24T00:41:33Z,2019-08-24T00:41:36Z,MERGED,True,16,4,2,https://github.com/sloretz,[backport] Time conversion fix to Dashing,1,['in review'],https://github.com/ros2/rclpy/pull/407,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/407,Backports #384,Backports #384,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,407,2019-08-23T17:25:04Z,2019-08-24T00:41:33Z,2019-08-24T00:41:36Z,MERGED,True,16,4,2,https://github.com/sloretz,[backport] Time conversion fix to Dashing,1,['in review'],https://github.com/ros2/rclpy/pull/407,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/407#issuecomment-524398363,Backports #384,@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,408,2019-08-23T17:29:26Z,2019-08-24T00:41:24Z,2019-08-24T00:41:28Z,MERGED,True,1,1,1,https://github.com/sloretz,[backport] Missing raise to Dashing,1,['in review'],https://github.com/ros2/rclpy/pull/408,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/408,Backport of #390,Backport of #390,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,408,2019-08-23T17:29:26Z,2019-08-24T00:41:24Z,2019-08-24T00:41:28Z,MERGED,True,1,1,1,https://github.com/sloretz,[backport] Missing raise to Dashing,1,['in review'],https://github.com/ros2/rclpy/pull/408,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/408#issuecomment-524403158,Backport of #390,@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,410,2019-08-28T17:21:22Z,2019-09-23T18:33:12Z,2019-09-23T18:33:16Z,MERGED,True,21,1,2,https://github.com/sloretz,Changelog version to master,4,['in review'],https://github.com/ros2/rclpy/pull/410,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/410,"This brings the version and CHANGELOG on master up to date with the dashing branch.
@nuclearsandwich what's your opinion on keeping master's version up to date with the latest release?","This brings the version and CHANGELOG on master up to date with the dashing branch.
@nuclearsandwich what's your opinion on keeping master's version up to date with the latest release?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,410,2019-08-28T17:21:22Z,2019-09-23T18:33:12Z,2019-09-23T18:33:16Z,MERGED,True,21,1,2,https://github.com/sloretz,Changelog version to master,4,['in review'],https://github.com/ros2/rclpy/pull/410,https://github.com/nuclearsandwich,2,https://github.com/ros2/rclpy/pull/410#issuecomment-525927509,"This brings the version and CHANGELOG on master up to date with the dashing branch.
@nuclearsandwich what's your opinion on keeping master's version up to date with the latest release?","This brings the version and CHANGELOG on master up to date with the dashing branch

As an aside while we're discussing changelog updates, have there been any updates to rclpy in Crystal that we should also consider pulling?

@nuclearsandwich what's your opinion on keeping master's version up to date with the latest release?

It is something I'd heartily endorse if we can find a straightforward way to manage them without manual labor and/or merge conflicts. How difficult was one this to perform?
One further concern is will this interfere with catkin_generate_changelog in a scenario like:

commit is made to master
commit is backported to dashing
dashing gets a new changelog via catkin_generate_changelog and is tagged 0.7.x
master gets a new changelog via catkin_generate_changelog and is tagged 0.8.0

I would expect that the commit shows up in the 0.8.0 changelog if the backport PR is squash merged but not if it is merged with a merge commit although it depends on what tags catkin_generate_changelog examines (those on the current branch or all).

Looking for precedence, using ROS 1 *-devel branches I  would expect we have divergent changelogs once a new -devel branch is created with point releases still occurring on the previous -devel branch. Do we do anything about changelogs in that case? Since we branch off of mainline unconditionally for each ROS 2 release the problem is more extreme than in ROS 1 where a repo may share one devel branch for all compatible forward development in which case there's no divergence in changelog.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,410,2019-08-28T17:21:22Z,2019-09-23T18:33:12Z,2019-09-23T18:33:16Z,MERGED,True,21,1,2,https://github.com/sloretz,Changelog version to master,4,['in review'],https://github.com/ros2/rclpy/pull/410,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/410#issuecomment-528953041,"This brings the version and CHANGELOG on master up to date with the dashing branch.
@nuclearsandwich what's your opinion on keeping master's version up to date with the latest release?","It is something I'd heartily endorse if we can find a straightforward way to manage them without manual labor and/or merge conflicts. How difficult was one this to perform?

Pretty easy.

checkout branch from master
Cherry pick the commits that bump version and edit changelog git cherry-pick -s abc123 def456
Open PR


One further concern is will this interfere with catkin_generate_changelog in a scenario like

Is step 5 is cherry pick changelog commits from dashing to master?
When master CHANGELOG.rst is generated in step 4, it looks like it gets all commits since the last release from master regardless of the tags on dashing. Step 5 see's merge conflicts when the cherry picks are performed. I think this is easy to resolve: take both and manually put releases in chronological order. Entries will be duplicated between 0.7.0 and 0.8.0, but I think that's the right thing since those were the changes in that release.

Looking for precedence, using ROS 1 *-devel branches I would expect we have divergent changelogs once a new -devel branch is created with point releases still occurring on the previous -devel branch. Do we do anything about changelogs in that case?

Not usually. ros_comm melodic-devel CHANGELOG.rst is missing 1.13.7 from lunar-devel CHANGELOG.rst.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,410,2019-08-28T17:21:22Z,2019-09-23T18:33:12Z,2019-09-23T18:33:16Z,MERGED,True,21,1,2,https://github.com/sloretz,Changelog version to master,4,['in review'],https://github.com/ros2/rclpy/pull/410,https://github.com/nuclearsandwich,4,https://github.com/ros2/rclpy/pull/410#issuecomment-533234278,"This brings the version and CHANGELOG on master up to date with the dashing branch.
@nuclearsandwich what's your opinion on keeping master's version up to date with the latest release?",To me this feels like more trouble than it is worth to adopt as a general practice but I don't have a problem with it. I was looking at index.ros.org and realized that this practice may have a negative consequence. The changelog field on https://index.ros.org/p/rclpy/#crystal appears to show changelog entries only for versions released in that rosdistro. I'm not sure what filtering technique is used there but merging changelog entries forward may interfere with it.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,410,2019-08-28T17:21:22Z,2019-09-23T18:33:12Z,2019-09-23T18:33:16Z,MERGED,True,21,1,2,https://github.com/sloretz,Changelog version to master,4,['in review'],https://github.com/ros2/rclpy/pull/410,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/410#issuecomment-534227018,"This brings the version and CHANGELOG on master up to date with the dashing branch.
@nuclearsandwich what's your opinion on keeping master's version up to date with the latest release?","The changelog field on https://index.ros.org/p/rclpy/#crystal appears to show changelog entries only for versions released in that rosdistro. I'm not sure what filtering technique is used there but merging changelog entries forward may interfere with it.

@nuclearsandwich I didn't find any changelog filtering. It looks like index.ros.org renders the whole changelog from either the source entry or the tag of the last release. I would expect those changelogs to be unchanged when merging changes to master.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,411,2019-08-29T12:40:28Z,2019-09-03T17:34:59Z,2019-09-03T17:35:02Z,MERGED,True,4,4,2,https://github.com/hidmic,Use of -r/--remap flags where appropriate.,1,[],https://github.com/ros2/rclpy/pull/411,https://github.com/hidmic,1,https://github.com/ros2/rclpy/pull/411,"Precisely what the title says.
Connected to ros2/rcl#491.","Precisely what the title says.
Connected to ros2/rcl#491.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,412,2019-08-30T18:01:28Z,2019-09-04T00:11:36Z,2019-09-04T00:11:39Z,MERGED,True,22,3,2,https://github.com/sloretz,Make Future result() and __await__ raise exceptions,2,['enhancement'],https://github.com/ros2/rclpy/pull/412,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/412,"This matches the behavior of result and __await__ on asyncio Future's, and makes them a little more convenient to use in other coroutines.

asyncio.futures.Future.result()
asyncio.futures.Future.__await__

Before
result = await future
if result is None:
   # Do something with exception
   raise future.exception()
After
# Exception is raised if task fails
result = await future","This matches the behavior of result and __await__ on asyncio Future's, and makes them a little more convenient to use in other coroutines.

asyncio.futures.Future.result()
asyncio.futures.Future.__await__

Before
result = await future
if result is None:
   # Do something with exception
   raise future.exception()
After
# Exception is raised if task fails
result = await future",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,412,2019-08-30T18:01:28Z,2019-09-04T00:11:36Z,2019-09-04T00:11:39Z,MERGED,True,22,3,2,https://github.com/sloretz,Make Future result() and __await__ raise exceptions,2,['enhancement'],https://github.com/ros2/rclpy/pull/412,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/412#issuecomment-526694606,"This matches the behavior of result and __await__ on asyncio Future's, and makes them a little more convenient to use in other coroutines.

asyncio.futures.Future.result()
asyncio.futures.Future.__await__

Before
result = await future
if result is None:
   # Do something with exception
   raise future.exception()
After
# Exception is raised if task fails
result = await future","CI (Testing packages above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,412,2019-08-30T18:01:28Z,2019-09-04T00:11:36Z,2019-09-04T00:11:39Z,MERGED,True,22,3,2,https://github.com/sloretz,Make Future result() and __await__ raise exceptions,2,['enhancement'],https://github.com/ros2/rclpy/pull/412,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/412#issuecomment-527565876,"This matches the behavior of result and __await__ on asyncio Future's, and makes them a little more convenient to use in other coroutines.

asyncio.futures.Future.result()
asyncio.futures.Future.__await__

Before
result = await future
if result is None:
   # Do something with exception
   raise future.exception()
After
# Exception is raised if task fails
result = await future","CI attempt 2, packages above rclpy again

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,412,2019-08-30T18:01:28Z,2019-09-04T00:11:36Z,2019-09-04T00:11:39Z,MERGED,True,22,3,2,https://github.com/sloretz,Make Future result() and __await__ raise exceptions,2,['enhancement'],https://github.com/ros2/rclpy/pull/412,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/412#issuecomment-527615754,"This matches the behavior of result and __await__ on asyncio Future's, and makes them a little more convenient to use in other coroutines.

asyncio.futures.Future.result()
asyncio.futures.Future.__await__

Before
result = await future
if result is None:
   # Do something with exception
   raise future.exception()
After
# Exception is raised if task fails
result = await future","CI again after rebasing

Linux  (test failure also occurred in the nightly: https://ci.ros2.org/view/nightly/job/nightly_linux_release/1288/)
Linux-aarch64 
macOS 
Windows  (all test failures also occurred in the nightly: https://ci.ros2.org/view/nightly/job/nightly_win_rel/1300/#showFailuresLink)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,413,2019-08-30T20:07:57Z,2019-09-17T13:28:08Z,2019-09-17T13:28:11Z,MERGED,True,43,6,2,https://github.com/ivanpauno,Raise custom error when node name is not found,5,['in review'],https://github.com/ros2/rclpy/pull/413,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/413,Addresses ros2/ros2cli#322 (comment),Addresses ros2/ros2cli#322 (comment),True,{}
ros2/rclpy,https://github.com/ros2/rclpy,413,2019-08-30T20:07:57Z,2019-09-17T13:28:08Z,2019-09-17T13:28:11Z,MERGED,True,43,6,2,https://github.com/ivanpauno,Raise custom error when node name is not found,5,['in review'],https://github.com/ros2/rclpy/pull/413,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/413#issuecomment-531946303,Addresses ros2/ros2cli#322 (comment),"CI:
build up to: rclpy
test: rmw rmw_fastrtps_shared_cpp rmw_connext_shared_cpp rmw_opensplice_cpp rcl rclpy

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,413,2019-08-30T20:07:57Z,2019-09-17T13:28:08Z,2019-09-17T13:28:11Z,MERGED,True,43,6,2,https://github.com/ivanpauno,Raise custom error when node name is not found,5,['in review'],https://github.com/ros2/rclpy/pull/413,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/413#issuecomment-531962417,Addresses ros2/ros2cli#322 (comment),"I forgot to push a commit in ros2/rcl#492, again CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,413,2019-08-30T20:07:57Z,2019-09-17T13:28:08Z,2019-09-17T13:28:11Z,MERGED,True,43,6,2,https://github.com/ivanpauno,Raise custom error when node name is not found,5,['in review'],https://github.com/ros2/rclpy/pull/413,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/413#issuecomment-532220426,Addresses ros2/ros2cli#322 (comment),"I'm merging this one, we can continue the discussion on how importing C extensions in #422.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,414,2019-08-30T20:28:10Z,2019-09-04T17:03:45Z,2019-09-04T17:03:47Z,MERGED,True,30,30,5,https://github.com/nuclearsandwich,[Dashing] Fix Python 3.5 compatibility by removing unsupported type hints.,3,['in review'],https://github.com/ros2/rclpy/pull/414,https://github.com/nuclearsandwich,1,https://github.com/ros2/rclpy/pull/414,"Some of the type hints introduced in Dashing are not compatible with
Python 3.5. Where possible I tried to convert the hints to type comments
but for the type hints within function definitions that did not appear
to be possible so those hints were simply removed.
This is going to make backporting changes more challenging since we'll
have to:

Review backported changes for incompatible type hints.
Reconcile merge conflicts caused by the removal of type hints on the
dashing development branches.","Some of the type hints introduced in Dashing are not compatible with
Python 3.5. Where possible I tried to convert the hints to type comments
but for the type hints within function definitions that did not appear
to be possible so those hints were simply removed.
This is going to make backporting changes more challenging since we'll
have to:

Review backported changes for incompatible type hints.
Reconcile merge conflicts caused by the removal of type hints on the
dashing development branches.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,414,2019-08-30T20:28:10Z,2019-09-04T17:03:45Z,2019-09-04T17:03:47Z,MERGED,True,30,30,5,https://github.com/nuclearsandwich,[Dashing] Fix Python 3.5 compatibility by removing unsupported type hints.,3,['in review'],https://github.com/ros2/rclpy/pull/414,https://github.com/nuclearsandwich,2,https://github.com/ros2/rclpy/pull/414#issuecomment-527992418,"Some of the type hints introduced in Dashing are not compatible with
Python 3.5. Where possible I tried to convert the hints to type comments
but for the type hints within function definitions that did not appear
to be possible so those hints were simply removed.
This is going to make backporting changes more challenging since we'll
have to:

Review backported changes for incompatible type hints.
Reconcile merge conflicts caused by the removal of type hints on the
dashing development branches.",CI in ros2/launch_ros#65 (comment) is 📗,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,415,2019-09-03T17:40:54Z,2019-09-06T18:35:40Z,2019-09-06T20:58:18Z,MERGED,True,137,3,2,https://github.com/hidmic,Fail on invalid and unknown ROS specific arguments,2,[],https://github.com/ros2/rclpy/pull/415,https://github.com/hidmic,1,https://github.com/ros2/rclpy/pull/415,Precisely what the title says. This pull request makes rclpy raise if either an invalid or an unknown ROS argument is found.,Precisely what the title says. This pull request makes rclpy raise if either an invalid or an unknown ROS argument is found.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,415,2019-09-03T17:40:54Z,2019-09-06T18:35:40Z,2019-09-06T20:58:18Z,MERGED,True,137,3,2,https://github.com/hidmic,Fail on invalid and unknown ROS specific arguments,2,[],https://github.com/ros2/rclpy/pull/415,https://github.com/hidmic,2,https://github.com/ros2/rclpy/pull/415#issuecomment-527563544,Precisely what the title says. This pull request makes rclpy raise if either an invalid or an unknown ROS argument is found.,We should probably discuss the implications of having exceptions defined in the C extensions vs. Python sources.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,415,2019-09-03T17:40:54Z,2019-09-06T18:35:40Z,2019-09-06T20:58:18Z,MERGED,True,137,3,2,https://github.com/hidmic,Fail on invalid and unknown ROS specific arguments,2,[],https://github.com/ros2/rclpy/pull/415,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/415#issuecomment-528997481,Precisely what the title says. This pull request makes rclpy raise if either an invalid or an unknown ROS argument is found.,"@hidmic This have introduced a linter failure (from #420)

Linux 

Where is the original CI build of this branch?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,415,2019-09-03T17:40:54Z,2019-09-06T18:35:40Z,2019-09-06T20:58:18Z,MERGED,True,137,3,2,https://github.com/hidmic,Fail on invalid and unknown ROS specific arguments,2,[],https://github.com/ros2/rclpy/pull/415,https://github.com/hidmic,4,https://github.com/ros2/rclpy/pull/415#issuecomment-529012080,Precisely what the title says. This pull request makes rclpy raise if either an invalid or an unknown ROS argument is found.,"@ivanpauno it's here. Only reasonable explanation is that I thought I re-ran it after addressing your comments but I didn't. I'll fix it, sorry!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,416,2019-09-04T17:30:51Z,2019-09-05T16:20:51Z,2019-09-05T16:20:54Z,MERGED,True,7,5,2,https://github.com/hidmic,Force explicit --ros-args in cli args.,1,[],https://github.com/ros2/rclpy/pull/416,https://github.com/hidmic,1,https://github.com/ros2/rclpy/pull/416,Precisely what the title says. Follow-up after ros2/rclcpp#816 and #405 (comment). Necessary for ros2/rcl#493 considering ros2/rclcpp#784.,Precisely what the title says. Follow-up after ros2/rclcpp#816 and #405 (comment). Necessary for ros2/rcl#493 considering ros2/rclcpp#784.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,417,2019-09-05T18:04:40Z,2020-05-22T21:21:34Z,2020-05-22T21:21:39Z,CLOSED,False,50,29,6,https://github.com/ivanpauno,Avoid the limitation of not being able to import rclpy C extensions at module level,1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/417,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/417,"Kind of reverting the old #147, plus solving the ""not nice grouping"" problem in another way.
See discussion: #413 (comment)

There's some new nightly failures that are somewhat related with this problem, eg:
https://ci.ros2.org/view/nightly/job/nightly_win_rel/1302/testReport/junit/(root)/projectroot/test_client/
Basically, a pytest plugin is trying to import the C extensions before we ""hack"" the import in __init__.py file of the test directory.
This PR doesn't solve that problem.
I'm not to sure why this is only hitting as on Windows.
There are some possible solutions:

avoiding importing rclpy at module level in the plugin
Figuring out why we're loading that pytest plugin on Windows and not in the other os (rclpy doesn't depend on the package that provides the plugin).
Change how we install python packages, to avoid doing weird imports while testing.","Kind of reverting the old #147, plus solving the ""not nice grouping"" problem in another way.
See discussion: #413 (comment)

There's some new nightly failures that are somewhat related with this problem, eg:
https://ci.ros2.org/view/nightly/job/nightly_win_rel/1302/testReport/junit/(root)/projectroot/test_client/
Basically, a pytest plugin is trying to import the C extensions before we ""hack"" the import in __init__.py file of the test directory.
This PR doesn't solve that problem.
I'm not to sure why this is only hitting as on Windows.
There are some possible solutions:

avoiding importing rclpy at module level in the plugin
Figuring out why we're loading that pytest plugin on Windows and not in the other os (rclpy doesn't depend on the package that provides the plugin).
Change how we install python packages, to avoid doing weird imports while testing.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,417,2019-09-05T18:04:40Z,2020-05-22T21:21:34Z,2020-05-22T21:21:39Z,CLOSED,False,50,29,6,https://github.com/ivanpauno,Avoid the limitation of not being able to import rclpy C extensions at module level,1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/417,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/417#issuecomment-528507364,"Kind of reverting the old #147, plus solving the ""not nice grouping"" problem in another way.
See discussion: #413 (comment)

There's some new nightly failures that are somewhat related with this problem, eg:
https://ci.ros2.org/view/nightly/job/nightly_win_rel/1302/testReport/junit/(root)/projectroot/test_client/
Basically, a pytest plugin is trying to import the C extensions before we ""hack"" the import in __init__.py file of the test directory.
This PR doesn't solve that problem.
I'm not to sure why this is only hitting as on Windows.
There are some possible solutions:

avoiding importing rclpy at module level in the plugin
Figuring out why we're loading that pytest plugin on Windows and not in the other os (rclpy doesn't depend on the package that provides the plugin).
Change how we install python packages, to avoid doing weird imports while testing.","There's some new nightly failures that are somewhat related with this problem, eg:
https://ci.ros2.org/view/nightly/job/nightly_win_deb/1366/testReport/junit/(root)/projectroot/test_client/

The referenced test passed?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,417,2019-09-05T18:04:40Z,2020-05-22T21:21:34Z,2020-05-22T21:21:39Z,CLOSED,False,50,29,6,https://github.com/ivanpauno,Avoid the limitation of not being able to import rclpy C extensions at module level,1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/417,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/417#issuecomment-528508150,"Kind of reverting the old #147, plus solving the ""not nice grouping"" problem in another way.
See discussion: #413 (comment)

There's some new nightly failures that are somewhat related with this problem, eg:
https://ci.ros2.org/view/nightly/job/nightly_win_rel/1302/testReport/junit/(root)/projectroot/test_client/
Basically, a pytest plugin is trying to import the C extensions before we ""hack"" the import in __init__.py file of the test directory.
This PR doesn't solve that problem.
I'm not to sure why this is only hitting as on Windows.
There are some possible solutions:

avoiding importing rclpy at module level in the plugin
Figuring out why we're loading that pytest plugin on Windows and not in the other os (rclpy doesn't depend on the package that provides the plugin).
Change how we install python packages, to avoid doing weird imports while testing.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,417,2019-09-05T18:04:40Z,2020-05-22T21:21:34Z,2020-05-22T21:21:39Z,CLOSED,False,50,29,6,https://github.com/ivanpauno,Avoid the limitation of not being able to import rclpy C extensions at module level,1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/417,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/417#issuecomment-528508723,"Kind of reverting the old #147, plus solving the ""not nice grouping"" problem in another way.
See discussion: #413 (comment)

There's some new nightly failures that are somewhat related with this problem, eg:
https://ci.ros2.org/view/nightly/job/nightly_win_rel/1302/testReport/junit/(root)/projectroot/test_client/
Basically, a pytest plugin is trying to import the C extensions before we ""hack"" the import in __init__.py file of the test directory.
This PR doesn't solve that problem.
I'm not to sure why this is only hitting as on Windows.
There are some possible solutions:

avoiding importing rclpy at module level in the plugin
Figuring out why we're loading that pytest plugin on Windows and not in the other os (rclpy doesn't depend on the package that provides the plugin).
Change how we install python packages, to avoid doing weird imports while testing.","There's some new nightly failures that are somewhat related with this problem, eg:
https://ci.ros2.org/view/nightly/job/nightly_win_deb/1366/testReport/junit/(root)/projectroot/test_client/

The referenced test passed?

Sorry, wrong link. Updated post.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,417,2019-09-05T18:04:40Z,2020-05-22T21:21:34Z,2020-05-22T21:21:39Z,CLOSED,False,50,29,6,https://github.com/ivanpauno,Avoid the limitation of not being able to import rclpy C extensions at module level,1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/417,https://github.com/dirk-thomas,5,https://github.com/ros2/rclpy/pull/417#issuecomment-528511853,"Kind of reverting the old #147, plus solving the ""not nice grouping"" problem in another way.
See discussion: #413 (comment)

There's some new nightly failures that are somewhat related with this problem, eg:
https://ci.ros2.org/view/nightly/job/nightly_win_rel/1302/testReport/junit/(root)/projectroot/test_client/
Basically, a pytest plugin is trying to import the C extensions before we ""hack"" the import in __init__.py file of the test directory.
This PR doesn't solve that problem.
I'm not to sure why this is only hitting as on Windows.
There are some possible solutions:

avoiding importing rclpy at module level in the plugin
Figuring out why we're loading that pytest plugin on Windows and not in the other os (rclpy doesn't depend on the package that provides the plugin).
Change how we install python packages, to avoid doing weird imports while testing.","https://ci.ros2.org/view/nightly/job/nightly_win_rel/1302/testReport/junit/(root)/projectroot/test_client/

Still referencing a passed test.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,417,2019-09-05T18:04:40Z,2020-05-22T21:21:34Z,2020-05-22T21:21:39Z,CLOSED,False,50,29,6,https://github.com/ivanpauno,Avoid the limitation of not being able to import rclpy C extensions at module level,1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/417,https://github.com/hidmic,6,https://github.com/ros2/rclpy/pull/417#issuecomment-528517132,"Kind of reverting the old #147, plus solving the ""not nice grouping"" problem in another way.
See discussion: #413 (comment)

There's some new nightly failures that are somewhat related with this problem, eg:
https://ci.ros2.org/view/nightly/job/nightly_win_rel/1302/testReport/junit/(root)/projectroot/test_client/
Basically, a pytest plugin is trying to import the C extensions before we ""hack"" the import in __init__.py file of the test directory.
This PR doesn't solve that problem.
I'm not to sure why this is only hitting as on Windows.
There are some possible solutions:

avoiding importing rclpy at module level in the plugin
Figuring out why we're loading that pytest plugin on Windows and not in the other os (rclpy doesn't depend on the package that provides the plugin).
Change how we install python packages, to avoid doing weird imports while testing.","The original link shows the regression https://ci.ros2.org/view/nightly/job/nightly_win_deb/1366/testReport/junit/(root)/projectroot/test_client/, but it can also be seen everywhere in CI. There's ros2/build_farmer#235 tracking it.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,417,2019-09-05T18:04:40Z,2020-05-22T21:21:34Z,2020-05-22T21:21:39Z,CLOSED,False,50,29,6,https://github.com/ivanpauno,Avoid the limitation of not being able to import rclpy C extensions at module level,1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/417,https://github.com/ivanpauno,7,https://github.com/ros2/rclpy/pull/417#issuecomment-528534082,"Kind of reverting the old #147, plus solving the ""not nice grouping"" problem in another way.
See discussion: #413 (comment)

There's some new nightly failures that are somewhat related with this problem, eg:
https://ci.ros2.org/view/nightly/job/nightly_win_rel/1302/testReport/junit/(root)/projectroot/test_client/
Basically, a pytest plugin is trying to import the C extensions before we ""hack"" the import in __init__.py file of the test directory.
This PR doesn't solve that problem.
I'm not to sure why this is only hitting as on Windows.
There are some possible solutions:

avoiding importing rclpy at module level in the plugin
Figuring out why we're loading that pytest plugin on Windows and not in the other os (rclpy doesn't depend on the package that provides the plugin).
Change how we install python packages, to avoid doing weird imports while testing.","There's something weird in the links, when I enter the first time, they show the regression and the error message.
When I enter again a time later, they show Passed.
If I enter to the job status, navigate through the failing tests and enter again, I see the correct regression message ... and the same link as before.
It happened again with @hidmic link ....",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,417,2019-09-05T18:04:40Z,2020-05-22T21:21:34Z,2020-05-22T21:21:39Z,CLOSED,False,50,29,6,https://github.com/ivanpauno,Avoid the limitation of not being able to import rclpy C extensions at module level,1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/417,https://github.com/ivanpauno,8,https://github.com/ros2/rclpy/pull/417#issuecomment-528536980,"Kind of reverting the old #147, plus solving the ""not nice grouping"" problem in another way.
See discussion: #413 (comment)

There's some new nightly failures that are somewhat related with this problem, eg:
https://ci.ros2.org/view/nightly/job/nightly_win_rel/1302/testReport/junit/(root)/projectroot/test_client/
Basically, a pytest plugin is trying to import the C extensions before we ""hack"" the import in __init__.py file of the test directory.
This PR doesn't solve that problem.
I'm not to sure why this is only hitting as on Windows.
There are some possible solutions:

avoiding importing rclpy at module level in the plugin
Figuring out why we're loading that pytest plugin on Windows and not in the other os (rclpy doesn't depend on the package that provides the plugin).
Change how we install python packages, to avoid doing weird imports while testing.","The grouping of the tests is looking well after this patch, see:
https://ci.ros2.org/job/ci_linux/8072/testReport/",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,417,2019-09-05T18:04:40Z,2020-05-22T21:21:34Z,2020-05-22T21:21:39Z,CLOSED,False,50,29,6,https://github.com/ivanpauno,Avoid the limitation of not being able to import rclpy C extensions at module level,1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/417,https://github.com/dirk-thomas,9,https://github.com/ros2/rclpy/pull/417#issuecomment-528931878,"Kind of reverting the old #147, plus solving the ""not nice grouping"" problem in another way.
See discussion: #413 (comment)

There's some new nightly failures that are somewhat related with this problem, eg:
https://ci.ros2.org/view/nightly/job/nightly_win_rel/1302/testReport/junit/(root)/projectroot/test_client/
Basically, a pytest plugin is trying to import the C extensions before we ""hack"" the import in __init__.py file of the test directory.
This PR doesn't solve that problem.
I'm not to sure why this is only hitting as on Windows.
There are some possible solutions:

avoiding importing rclpy at module level in the plugin
Figuring out why we're loading that pytest plugin on Windows and not in the other os (rclpy doesn't depend on the package that provides the plugin).
Change how we install python packages, to avoid doing weird imports while testing.","There's something weird in the links

If you look at the list of tests (https://ci.ros2.org/view/nightly/job/nightly_win_deb/1366/testReport/junit/(root)/projectroot/) you will find that there are three test results named test_client.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,417,2019-09-05T18:04:40Z,2020-05-22T21:21:34Z,2020-05-22T21:21:39Z,CLOSED,False,50,29,6,https://github.com/ivanpauno,Avoid the limitation of not being able to import rclpy C extensions at module level,1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/417,https://github.com/ivanpauno,10,https://github.com/ros2/rclpy/pull/417#issuecomment-528946893,"Kind of reverting the old #147, plus solving the ""not nice grouping"" problem in another way.
See discussion: #413 (comment)

There's some new nightly failures that are somewhat related with this problem, eg:
https://ci.ros2.org/view/nightly/job/nightly_win_rel/1302/testReport/junit/(root)/projectroot/test_client/
Basically, a pytest plugin is trying to import the C extensions before we ""hack"" the import in __init__.py file of the test directory.
This PR doesn't solve that problem.
I'm not to sure why this is only hitting as on Windows.
There are some possible solutions:

avoiding importing rclpy at module level in the plugin
Figuring out why we're loading that pytest plugin on Windows and not in the other os (rclpy doesn't depend on the package that provides the plugin).
Change how we install python packages, to avoid doing weird imports while testing.","If you look at the list of tests (https://ci.ros2.org/view/nightly/job/nightly_win_deb/1366/testReport/junit/(root)/projectroot/) you will find that there are three test results named test_client.

That's really inconvenient. This other doesn't have a repeated name:
https://ci.ros2.org/view/nightly/job/nightly_win_deb/1366/testReport/junit/(root)/projectroot/test_parameters_callback/

@ivanpauno using that envvar is so shady... there has to be a natural way to do this. I wonder what setuptools does under the hood when installing a regular Python package.

The current solution is also shady ...",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,417,2019-09-05T18:04:40Z,2020-05-22T21:21:34Z,2020-05-22T21:21:39Z,CLOSED,False,50,29,6,https://github.com/ivanpauno,Avoid the limitation of not being able to import rclpy C extensions at module level,1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/417,https://github.com/dirk-thomas,11,https://github.com/ros2/rclpy/pull/417#issuecomment-528950307,"Kind of reverting the old #147, plus solving the ""not nice grouping"" problem in another way.
See discussion: #413 (comment)

There's some new nightly failures that are somewhat related with this problem, eg:
https://ci.ros2.org/view/nightly/job/nightly_win_rel/1302/testReport/junit/(root)/projectroot/test_client/
Basically, a pytest plugin is trying to import the C extensions before we ""hack"" the import in __init__.py file of the test directory.
This PR doesn't solve that problem.
I'm not to sure why this is only hitting as on Windows.
There are some possible solutions:

avoiding importing rclpy at module level in the plugin
Figuring out why we're loading that pytest plugin on Windows and not in the other os (rclpy doesn't depend on the package that provides the plugin).
Change how we install python packages, to avoid doing weird imports while testing.","That's really inconvenient.

More like not smart naming of our tests. All three tests have the same name:

rclcpp test client
rclcpp_action test client
rclpy test client

Giving them more precise and therefore unique names would resolve this.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,417,2019-09-05T18:04:40Z,2020-05-22T21:21:34Z,2020-05-22T21:21:39Z,CLOSED,False,50,29,6,https://github.com/ivanpauno,Avoid the limitation of not being able to import rclpy C extensions at module level,1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/417,https://github.com/ivanpauno,12,https://github.com/ros2/rclpy/pull/417#issuecomment-529011051,"Kind of reverting the old #147, plus solving the ""not nice grouping"" problem in another way.
See discussion: #413 (comment)

There's some new nightly failures that are somewhat related with this problem, eg:
https://ci.ros2.org/view/nightly/job/nightly_win_rel/1302/testReport/junit/(root)/projectroot/test_client/
Basically, a pytest plugin is trying to import the C extensions before we ""hack"" the import in __init__.py file of the test directory.
This PR doesn't solve that problem.
I'm not to sure why this is only hitting as on Windows.
There are some possible solutions:

avoiding importing rclpy at module level in the plugin
Figuring out why we're loading that pytest plugin on Windows and not in the other os (rclpy doesn't depend on the package that provides the plugin).
Change how we install python packages, to avoid doing weird imports while testing.","Checking than this still have failures on windows when launch_testing_ros is present:

Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,417,2019-09-05T18:04:40Z,2020-05-22T21:21:34Z,2020-05-22T21:21:39Z,CLOSED,False,50,29,6,https://github.com/ivanpauno,Avoid the limitation of not being able to import rclpy C extensions at module level,1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/417,https://github.com/ivanpauno,13,https://github.com/ros2/rclpy/pull/417#issuecomment-632913265,"Kind of reverting the old #147, plus solving the ""not nice grouping"" problem in another way.
See discussion: #413 (comment)

There's some new nightly failures that are somewhat related with this problem, eg:
https://ci.ros2.org/view/nightly/job/nightly_win_rel/1302/testReport/junit/(root)/projectroot/test_client/
Basically, a pytest plugin is trying to import the C extensions before we ""hack"" the import in __init__.py file of the test directory.
This PR doesn't solve that problem.
I'm not to sure why this is only hitting as on Windows.
There are some possible solutions:

avoiding importing rclpy at module level in the plugin
Figuring out why we're loading that pytest plugin on Windows and not in the other os (rclpy doesn't depend on the package that provides the plugin).
Change how we install python packages, to avoid doing weird imports while testing.","Closing, because this is outdated.
We should still investigate ways of solving this issue.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,419,2019-09-06T18:37:34Z,2019-09-13T22:08:27Z,2019-09-13T22:08:30Z,MERGED,True,21,17,3,https://github.com/sloretz,Timer uses ROS time by default,1,['in review'],https://github.com/ros2/rclpy/pull/419,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/419,"Renamed WallTimer to Timer and made it accept a clock
create_timer() uses the node's clock by default, which uses ROS time by default
Executor stores and reuses clock to pass to Timer","Renamed WallTimer to Timer and made it accept a clock
create_timer() uses the node's clock by default, which uses ROS time by default
Executor stores and reuses clock to pass to Timer",True,{'THUMBS_UP': ['https://github.com/IanTheEngineer']}
ros2/rclpy,https://github.com/ros2/rclpy,419,2019-09-06T18:37:34Z,2019-09-13T22:08:27Z,2019-09-13T22:08:30Z,MERGED,True,21,17,3,https://github.com/sloretz,Timer uses ROS time by default,1,['in review'],https://github.com/ros2/rclpy/pull/419,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/419#issuecomment-528968030,"Renamed WallTimer to Timer and made it accept a clock
create_timer() uses the node's clock by default, which uses ROS time by default
Executor stores and reuses clock to pass to Timer","CI (testing packages above rclpy)

Linux  Just uncrustify issue fixed by #421
Linux-aarch64   Just uncrustify issue fixed by #421
macOS   Just uncrustify issue fixed by #421
Windows  lots of test failures, but it looks like the only one not in the latest nightly is the uncrustify issue fixed by #421",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,420,2019-09-06T18:54:20Z,2020-05-22T21:21:57Z,2020-05-26T12:47:24Z,CLOSED,False,14,47,6,https://github.com/ivanpauno,Avoid the limitation of not being able to import rclpy C extensions at module level [alternative],1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/420,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/420,"Alternative to #417.
In this case, instead of installing the C extensions as a module of rclpy package, I installed them in a new package rclpy_impl.
In this way, we don't need to ""hack"" the imports while testing.
This solve the same problem as #417, and also, it should solve the testing problems of rclpy on windows when launch_testing_ros is present.","Alternative to #417.
In this case, instead of installing the C extensions as a module of rclpy package, I installed them in a new package rclpy_impl.
In this way, we don't need to ""hack"" the imports while testing.
This solve the same problem as #417, and also, it should solve the testing problems of rclpy on windows when launch_testing_ros is present.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,420,2019-09-06T18:54:20Z,2020-05-22T21:21:57Z,2020-05-26T12:47:24Z,CLOSED,False,14,47,6,https://github.com/ivanpauno,Avoid the limitation of not being able to import rclpy C extensions at module level [alternative],1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/420,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/420#issuecomment-528975129,"Alternative to #417.
In this case, instead of installing the C extensions as a module of rclpy package, I installed them in a new package rclpy_impl.
In this way, we don't need to ""hack"" the imports while testing.
This solve the same problem as #417, and also, it should solve the testing problems of rclpy on windows when launch_testing_ros is present.","CI up to rclpy (on windows, also built up to launch_testing_ros)

Linux  (unrelated, see #415 (comment))
Linux-aarch64  (unrelated, see #415 (comment))
macOS 
Windows  (unrelated, see #415 (comment))",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,420,2019-09-06T18:54:20Z,2020-05-22T21:21:57Z,2020-05-26T12:47:24Z,CLOSED,False,14,47,6,https://github.com/ivanpauno,Avoid the limitation of not being able to import rclpy C extensions at module level [alternative],1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/420,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/420#issuecomment-529019281,"Alternative to #417.
In this case, instead of installing the C extensions as a module of rclpy package, I installed them in a new package rclpy_impl.
In this way, we don't need to ""hack"" the imports while testing.
This solve the same problem as #417, and also, it should solve the testing problems of rclpy on windows when launch_testing_ros is present.","So, this PR is solving all the test failures on Windows CI, plus allowing to import the C extensions at module level.
#417 just solves the second problem, but as proved in this CI run, it doesn't solve the first one.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,420,2019-09-06T18:54:20Z,2020-05-22T21:21:57Z,2020-05-26T12:47:24Z,CLOSED,False,14,47,6,https://github.com/ivanpauno,Avoid the limitation of not being able to import rclpy C extensions at module level [alternative],1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/420,https://github.com/hidmic,4,https://github.com/ros2/rclpy/pull/420#issuecomment-529051431,"Alternative to #417.
In this case, instead of installing the C extensions as a module of rclpy package, I installed them in a new package rclpy_impl.
In this way, we don't need to ""hack"" the imports while testing.
This solve the same problem as #417, and also, it should solve the testing problems of rclpy on windows when launch_testing_ros is present.","I thought the general goal was to delay that until any function from the C extension is actually being used?

Hmm, why is that a goal?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,420,2019-09-06T18:54:20Z,2020-05-22T21:21:57Z,2020-05-26T12:47:24Z,CLOSED,False,14,47,6,https://github.com/ivanpauno,Avoid the limitation of not being able to import rclpy C extensions at module level [alternative],1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/420,https://github.com/dirk-thomas,5,https://github.com/ros2/rclpy/pull/420#issuecomment-529058182,"Alternative to #417.
In this case, instead of installing the C extensions as a module of rclpy package, I installed them in a new package rclpy_impl.
In this way, we don't need to ""hack"" the imports while testing.
This solve the same problem as #417, and also, it should solve the testing problems of rclpy on windows when launch_testing_ros is present.","why is that a goal?

As the comments on the local imports state: ""to avoid loading extensions on module import"".
First of all if you import any Python module it doesn't need to load the C extensions yet - hence it is faster and lighter weight. Second it avoid the race condition between any customization you might want to do before trying to load the C extensions. Third any tool which needs to import the Python modules but doesn't want to ever call any of the API can do so without the need to have / load the C extensions.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,420,2019-09-06T18:54:20Z,2020-05-22T21:21:57Z,2020-05-26T12:47:24Z,CLOSED,False,14,47,6,https://github.com/ivanpauno,Avoid the limitation of not being able to import rclpy C extensions at module level [alternative],1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/420,https://github.com/hidmic,6,https://github.com/ros2/rclpy/pull/420#issuecomment-529060154,"Alternative to #417.
In this case, instead of installing the C extensions as a module of rclpy package, I installed them in a new package rclpy_impl.
In this way, we don't need to ""hack"" the imports while testing.
This solve the same problem as #417, and also, it should solve the testing problems of rclpy on windows when launch_testing_ros is present.","First of all if you import any Python module it doesn't need to load the C extensions yet - hence it is faster and lighter weight.

Is there an observable difference in speed? Do we have a measure of how bigger the memory footprint is? Correct me if I'm wrong but I'd expect rmw implementations to introduce the largest overhead in dynamic library loading and we're already deferring loading for those (at least on Linux, not sure about the other platforms?).

Second it avoid the race condition between any customization you might want to do before trying to load the C extensions.

What kind of customization? Are we doing so? Could a downstream package achieve the same effect by delaying rclpy imports?

Third any tool which needs to import the Python modules but doesn't want to ever call any of the API can do so without the need to have / load the C extensions.

Which goes back to the first statement, unless we apply that same logic to every single module import. I'd like to further understand why we need to give special treatment for an otherwise regular CPython module. It certainly makes it non-standard and creates issues from time to time -- which are easy to fix, sure, but only once you've understood all the implications of how we build and install rclpy.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,420,2019-09-06T18:54:20Z,2020-05-22T21:21:57Z,2020-05-26T12:47:24Z,CLOSED,False,14,47,6,https://github.com/ivanpauno,Avoid the limitation of not being able to import rclpy C extensions at module level [alternative],1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/420,https://github.com/ivanpauno,7,https://github.com/ros2/rclpy/pull/420#issuecomment-529612157,"Alternative to #417.
In this case, instead of installing the C extensions as a module of rclpy package, I installed them in a new package rclpy_impl.
In this way, we don't need to ""hack"" the imports while testing.
This solve the same problem as #417, and also, it should solve the testing problems of rclpy on windows when launch_testing_ros is present.","@hidmic @dirk-thomas I've worked in a lazy import alternative, but I first want to finish with this discussion.
I understand @hidmic point, I think we're doing kind of a ""premature optimization"".
In general, _rclpy C extension will be loaded sooner or later, so I don't think is bad to load it in a global import.
The others, like _rclpy_action, should be only loaded when the module that uses it is loaded (rclpy.action in this case).
This is not currently happening, as rclpy.impl.implementation_singleton is doing all the imports in the same place, so if any C extension is loaded the others too.

There is currently two problems:

The installed package folder structure is different than the package source directory structure, so pytest doesn't find the C extensions if we don't do something

A way to solve the problem, is to split each C extensions in its own package.


Where to do the imports of the C extensions? Use lazy import?

I would move each import to the module where is used and I would avoid doing lazy import (I don't see much performance benefit).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,420,2019-09-06T18:54:20Z,2020-05-22T21:21:57Z,2020-05-26T12:47:24Z,CLOSED,False,14,47,6,https://github.com/ivanpauno,Avoid the limitation of not being able to import rclpy C extensions at module level [alternative],1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/420,https://github.com/dirk-thomas,8,https://github.com/ros2/rclpy/pull/420#issuecomment-529681952,"Alternative to #417.
In this case, instead of installing the C extensions as a module of rclpy package, I installed them in a new package rclpy_impl.
In this way, we don't need to ""hack"" the imports while testing.
This solve the same problem as #417, and also, it should solve the testing problems of rclpy on windows when launch_testing_ros is present.","I think we're doing kind of a ""premature optimization"".

The primary goal for doing lazy load is not performance improvement. It is to avoid the current race and in use cases which don't need the C extension not requiring it to be loaded.

In general, _rclpy C extension will be loaded sooner or later, so I don't think is bad to load it in a global import.

I think you are missing some use cases:

An application might just be interested in some constants or helper functions defined in rclpy, e.g. 
  
    
      rclpy/rclpy/rclpy/node.py
    
    
         Line 78
      in
      158fdef
    
  
  
    

        
          
           HIDDEN_NODE_PREFIX = '_' 
        
    
  

 In that case it would never trigger API which needs the C extensions.
A linter doing static code analysis needs to import all modules but doesn't execute any API.


The others, like _rclpy_action, should be only loaded when the module that uses it is loaded (rclpy.action in this case).
This is not currently happening, as rclpy.impl.implementation_singleton is doing all the imports in the same place, so if any C extension is loaded the others too.

With my proposal to convert the globally initialized handles into functions providing a lazily loaded singleton instance of the C extension that would not be the case anymore and each library would be loaded only when needed and on demand.

The installed package folder structure is different than the package source directory structure, so pytest doesn't find the C extensions if we don't do something

A way to solve the problem, is to split each C extensions in its own package.


See my above comment why I don't think that is feasible. Also the current approach would work just fine as is. In the cases it currently fails due to the race it would work once we do lazy loading.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,420,2019-09-06T18:54:20Z,2020-05-22T21:21:57Z,2020-05-26T12:47:24Z,CLOSED,False,14,47,6,https://github.com/ivanpauno,Avoid the limitation of not being able to import rclpy C extensions at module level [alternative],1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/420,https://github.com/ivanpauno,9,https://github.com/ros2/rclpy/pull/420#issuecomment-632913398,"Alternative to #417.
In this case, instead of installing the C extensions as a module of rclpy package, I installed them in a new package rclpy_impl.
In this way, we don't need to ""hack"" the imports while testing.
This solve the same problem as #417, and also, it should solve the testing problems of rclpy on windows when launch_testing_ros is present.","Closing, because this is outdated.
We should still investigate ways of solving this issue.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,420,2019-09-06T18:54:20Z,2020-05-22T21:21:57Z,2020-05-26T12:47:24Z,CLOSED,False,14,47,6,https://github.com/ivanpauno,Avoid the limitation of not being able to import rclpy C extensions at module level [alternative],1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/420,https://github.com/dirk-thomas,10,https://github.com/ros2/rclpy/pull/420#issuecomment-632935581,"Alternative to #417.
In this case, instead of installing the C extensions as a module of rclpy package, I installed them in a new package rclpy_impl.
In this way, we don't need to ""hack"" the imports while testing.
This solve the same problem as #417, and also, it should solve the testing problems of rclpy on windows when launch_testing_ros is present.","We should still investigate ways of solving this issue.

@ivanpauno Is there any open ticket for this? If not, please create one and reference the previous approaches.
Also is the branch still needed?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,420,2019-09-06T18:54:20Z,2020-05-22T21:21:57Z,2020-05-26T12:47:24Z,CLOSED,False,14,47,6,https://github.com/ivanpauno,Avoid the limitation of not being able to import rclpy C extensions at module level [alternative],1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/420,https://github.com/ivanpauno,11,https://github.com/ros2/rclpy/pull/420#issuecomment-634002592,"Alternative to #417.
In this case, instead of installing the C extensions as a module of rclpy package, I installed them in a new package rclpy_impl.
In this way, we don't need to ""hack"" the imports while testing.
This solve the same problem as #417, and also, it should solve the testing problems of rclpy on windows when launch_testing_ros is present.","@ivanpauno Is there any open ticket for this? If not, please create one and reference the previous approaches.

See #560.

Also is the branch still needed?

Deleted.",True,{'THUMBS_UP': ['https://github.com/dirk-thomas']}
ros2/rclpy,https://github.com/ros2/rclpy,421,2019-09-06T21:01:26Z,2019-09-06T21:57:24Z,2019-09-06T21:57:28Z,MERGED,True,1,1,1,https://github.com/hidmic,Fix _rclpy.c formatting.,1,[],https://github.com/ros2/rclpy/pull/421,https://github.com/hidmic,1,https://github.com/ros2/rclpy/pull/421,"Precisely what the title says. Follow-up after #415.

Linux","Precisely what the title says. Follow-up after #415.

Linux",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,422,2019-09-11T00:34:13Z,2020-05-22T21:22:09Z,2020-05-26T12:46:22Z,CLOSED,False,673,332,33,https://github.com/ivanpauno,Lazily import C extensions,2,['in review'],https://github.com/ros2/rclpy/pull/422,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/422,"Yet another alternative to #417 #420.
See #420 (comment).
I ended up having a lot of problems with the qos module after applying lazy import, as all the default profiles are constructed at module level.
For working around the problem, I did a lot of changes that I don't like at all.
I would rather solve ros2/build_farmer#235 directly in launch_testing_ros, and figure out later how to avoid having to ""hack"" the imports while testing in rclpy (which is the root cause of ros2/build_farmer#235).
I would rather not merge this PR nor apply lazy import in general, as I believe is creating more problems than solving.","Yet another alternative to #417 #420.
See #420 (comment).
I ended up having a lot of problems with the qos module after applying lazy import, as all the default profiles are constructed at module level.
For working around the problem, I did a lot of changes that I don't like at all.
I would rather solve ros2/build_farmer#235 directly in launch_testing_ros, and figure out later how to avoid having to ""hack"" the imports while testing in rclpy (which is the root cause of ros2/build_farmer#235).
I would rather not merge this PR nor apply lazy import in general, as I believe is creating more problems than solving.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,422,2019-09-11T00:34:13Z,2020-05-22T21:22:09Z,2020-05-26T12:46:22Z,CLOSED,False,673,332,33,https://github.com/ivanpauno,Lazily import C extensions,2,['in review'],https://github.com/ros2/rclpy/pull/422,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/422#issuecomment-530182046,"Yet another alternative to #417 #420.
See #420 (comment).
I ended up having a lot of problems with the qos module after applying lazy import, as all the default profiles are constructed at module level.
For working around the problem, I did a lot of changes that I don't like at all.
I would rather solve ros2/build_farmer#235 directly in launch_testing_ros, and figure out later how to avoid having to ""hack"" the imports while testing in rclpy (which is the root cause of ros2/build_farmer#235).
I would rather not merge this PR nor apply lazy import in general, as I believe is creating more problems than solving.","This is the launch_testing_ros patch that @hidmic sent:
ros2/launch_ros#69",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,422,2019-09-11T00:34:13Z,2020-05-22T21:22:09Z,2020-05-26T12:46:22Z,CLOSED,False,673,332,33,https://github.com/ivanpauno,Lazily import C extensions,2,['in review'],https://github.com/ros2/rclpy/pull/422,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/422#issuecomment-632913466,"Yet another alternative to #417 #420.
See #420 (comment).
I ended up having a lot of problems with the qos module after applying lazy import, as all the default profiles are constructed at module level.
For working around the problem, I did a lot of changes that I don't like at all.
I would rather solve ros2/build_farmer#235 directly in launch_testing_ros, and figure out later how to avoid having to ""hack"" the imports while testing in rclpy (which is the root cause of ros2/build_farmer#235).
I would rather not merge this PR nor apply lazy import in general, as I believe is creating more problems than solving.","Closing, because this is outdated.
We should still investigate ways of solving this issue.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,422,2019-09-11T00:34:13Z,2020-05-22T21:22:09Z,2020-05-26T12:46:22Z,CLOSED,False,673,332,33,https://github.com/ivanpauno,Lazily import C extensions,2,['in review'],https://github.com/ros2/rclpy/pull/422,https://github.com/dirk-thomas,4,https://github.com/ros2/rclpy/pull/422#issuecomment-632935567,"Yet another alternative to #417 #420.
See #420 (comment).
I ended up having a lot of problems with the qos module after applying lazy import, as all the default profiles are constructed at module level.
For working around the problem, I did a lot of changes that I don't like at all.
I would rather solve ros2/build_farmer#235 directly in launch_testing_ros, and figure out later how to avoid having to ""hack"" the imports while testing in rclpy (which is the root cause of ros2/build_farmer#235).
I would rather not merge this PR nor apply lazy import in general, as I believe is creating more problems than solving.","We should still investigate ways of solving this issue.

@ivanpauno Is there any open ticket for this? If not, please create one and reference the previous approaches.
Also is the branch still needed?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,422,2019-09-11T00:34:13Z,2020-05-22T21:22:09Z,2020-05-26T12:46:22Z,CLOSED,False,673,332,33,https://github.com/ivanpauno,Lazily import C extensions,2,['in review'],https://github.com/ros2/rclpy/pull/422,https://github.com/ivanpauno,5,https://github.com/ros2/rclpy/pull/422#issuecomment-634002024,"Yet another alternative to #417 #420.
See #420 (comment).
I ended up having a lot of problems with the qos module after applying lazy import, as all the default profiles are constructed at module level.
For working around the problem, I did a lot of changes that I don't like at all.
I would rather solve ros2/build_farmer#235 directly in launch_testing_ros, and figure out later how to avoid having to ""hack"" the imports while testing in rclpy (which is the root cause of ros2/build_farmer#235).
I would rather not merge this PR nor apply lazy import in general, as I believe is creating more problems than solving.","@ivanpauno Is there any open ticket for this? If not, please create one and reference the previous approaches.

See #560.

Also is the branch still needed?

I deleted the branch on one of the PRs, and forgot to do ot in the others.",True,{'THUMBS_UP': ['https://github.com/dirk-thomas']}
ros2/rclpy,https://github.com/ros2/rclpy,423,2019-09-12T19:26:31Z,2019-09-13T00:39:07Z,2019-09-16T16:53:20Z,CLOSED,False,6,0,1,https://github.com/suab321321,I just defined the add and remove callback methods,1,[],https://github.com/ros2/rclpy/pull/423,https://github.com/suab321321,1,https://github.com/ros2/rclpy/pull/423,"Issue #393
@ivanpauno
I cant seem to understand what @wjwwood did in  rclcpp.
So I have just defined these and have some questions
Questions:
1.Callback are there for specefic parameters or group of parameters right?So if I want to remove or add a callback I should also have the parameter(Parameter class) or groups of same kind parameters to either add or remove callbacks from list.
2.I dont know where the original list of callback is it the _paramters_callback(in rospy node.py line 144)?If it is then I think it should initalized as empty list but here it is initialized as None.
3.Also when a paramter is undeclared shouldnt its callback needs to be removed too?
3.(Silly One)Callbacks are triggered when we recevie some action (example when a subscriber recevies a message he will have a callback,which will manage what to do with recevied messaged),so what is point of having a callback in parameter setting and updating","Issue #393
@ivanpauno
I cant seem to understand what @wjwwood did in  rclcpp.
So I have just defined these and have some questions
Questions:
1.Callback are there for specefic parameters or group of parameters right?So if I want to remove or add a callback I should also have the parameter(Parameter class) or groups of same kind parameters to either add or remove callbacks from list.
2.I dont know where the original list of callback is it the _paramters_callback(in rospy node.py line 144)?If it is then I think it should initalized as empty list but here it is initialized as None.
3.Also when a paramter is undeclared shouldnt its callback needs to be removed too?
3.(Silly One)Callbacks are triggered when we recevie some action (example when a subscriber recevies a message he will have a callback,which will manage what to do with recevied messaged),so what is point of having a callback in parameter setting and updating",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,423,2019-09-12T19:26:31Z,2019-09-13T00:39:07Z,2019-09-16T16:53:20Z,CLOSED,False,6,0,1,https://github.com/suab321321,I just defined the add and remove callback methods,1,[],https://github.com/ros2/rclpy/pull/423,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/423#issuecomment-531057536,"Issue #393
@ivanpauno
I cant seem to understand what @wjwwood did in  rclcpp.
So I have just defined these and have some questions
Questions:
1.Callback are there for specefic parameters or group of parameters right?So if I want to remove or add a callback I should also have the parameter(Parameter class) or groups of same kind parameters to either add or remove callbacks from list.
2.I dont know where the original list of callback is it the _paramters_callback(in rospy node.py line 144)?If it is then I think it should initalized as empty list but here it is initialized as None.
3.Also when a paramter is undeclared shouldnt its callback needs to be removed too?
3.(Silly One)Callbacks are triggered when we recevie some action (example when a subscriber recevies a message he will have a callback,which will manage what to do with recevied messaged),so what is point of having a callback in parameter setting and updating","1.Callback are there for specefic parameters or group of parameters right?So if I want to remove or add a callback I should also have the parameter(Parameter class) or groups of same kind parameters to either add or remove callbacks from list.

So, parameter callbacks aren't targeted to an specific parameter or group of parameters
They receive the whole list of parameters that are going to be updated (see here).

2.I don't know where the original list of callback is it the _paramters_callback(in rospy node.py line 144)?If it is then I think it should initalized as empty list but here it is initialized as None.

Currently you can have only one parameter callback, and because of that it's initialized to None. For adding support to multiple callbacks you should initialize it as an empty list.

3.Also when a paramter is undeclared shouldnt its callback needs to be removed too?

No, callbacks and parameters are different concepts.


(Silly One)Callbacks are triggered when we recevie some action (example when a subscriber recevies a message he will have a callback,which will manage what to do with recevied messaged),so what is point of having a callback in parameter setting and updating


This callbacks are for REJECTING or ACCEPTING a parameter update.
So, if someone set the parameters to an incorrect value, you can reject it in the callback and it won't be updated then.

I'm closing the PR. Please feel free to continue asking, or to reopen it after pushing some changes.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,423,2019-09-12T19:26:31Z,2019-09-13T00:39:07Z,2019-09-16T16:53:20Z,CLOSED,False,6,0,1,https://github.com/suab321321,I just defined the add and remove callback methods,1,[],https://github.com/ros2/rclpy/pull/423,https://github.com/suab321321,3,https://github.com/ros2/rclpy/pull/423#issuecomment-531859553,"Issue #393
@ivanpauno
I cant seem to understand what @wjwwood did in  rclcpp.
So I have just defined these and have some questions
Questions:
1.Callback are there for specefic parameters or group of parameters right?So if I want to remove or add a callback I should also have the parameter(Parameter class) or groups of same kind parameters to either add or remove callbacks from list.
2.I dont know where the original list of callback is it the _paramters_callback(in rospy node.py line 144)?If it is then I think it should initalized as empty list but here it is initialized as None.
3.Also when a paramter is undeclared shouldnt its callback needs to be removed too?
3.(Silly One)Callbacks are triggered when we recevie some action (example when a subscriber recevies a message he will have a callback,which will manage what to do with recevied messaged),so what is point of having a callback in parameter setting and updating",Okay,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,423,2019-09-12T19:26:31Z,2019-09-13T00:39:07Z,2019-09-16T16:53:20Z,CLOSED,False,6,0,1,https://github.com/suab321321,I just defined the add and remove callback methods,1,[],https://github.com/ros2/rclpy/pull/423,https://github.com/suab321321,4,https://github.com/ros2/rclpy/pull/423#issuecomment-531863081,"Issue #393
@ivanpauno
I cant seem to understand what @wjwwood did in  rclcpp.
So I have just defined these and have some questions
Questions:
1.Callback are there for specefic parameters or group of parameters right?So if I want to remove or add a callback I should also have the parameter(Parameter class) or groups of same kind parameters to either add or remove callbacks from list.
2.I dont know where the original list of callback is it the _paramters_callback(in rospy node.py line 144)?If it is then I think it should initalized as empty list but here it is initialized as None.
3.Also when a paramter is undeclared shouldnt its callback needs to be removed too?
3.(Silly One)Callbacks are triggered when we recevie some action (example when a subscriber recevies a message he will have a callback,which will manage what to do with recevied messaged),so what is point of having a callback in parameter setting and updating",@ivanpauno  this PR is already closed so my new push is not reflecting in here.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,425,2019-09-14T10:35:18Z,2019-09-14T11:26:09Z,2019-09-14T11:26:09Z,CLOSED,False,43,2,6,https://github.com/suab321321,Support multiple `on parameter set` callbacks #393,2,[],https://github.com/ros2/rclpy/pull/425,https://github.com/suab321321,1,https://github.com/ros2/rclpy/pull/425,"@ivanpauno
Is my add_on_set_parameter_callback() correct?","@ivanpauno
Is my add_on_set_parameter_callback() correct?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,426,2019-09-14T11:28:58Z,2019-09-14T11:30:06Z,2019-09-14T11:30:06Z,CLOSED,False,43,2,6,https://github.com/suab321321,Support multiple `on parameter set` callbacks #393 #425,2,[],https://github.com/ros2/rclpy/pull/426,https://github.com/suab321321,1,https://github.com/ros2/rclpy/pull/426,is add_on_set_callback() correctly done?,is add_on_set_callback() correctly done?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,427,2019-09-14T11:35:51Z,2019-11-12T21:46:57Z,2019-11-12T21:47:33Z,CLOSED,False,1,24161,107,https://github.com/suab321321,Support multiple `on parameter set` callbacks #393,20,['enhancement'],https://github.com/ros2/rclpy/pull/427,https://github.com/suab321321,1,https://github.com/ros2/rclpy/pull/427,"@ivanpauno
Is my method add_on_set_callback correctly implemented?","@ivanpauno
Is my method add_on_set_callback correctly implemented?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,427,2019-09-14T11:35:51Z,2019-11-12T21:46:57Z,2019-11-12T21:47:33Z,CLOSED,False,1,24161,107,https://github.com/suab321321,Support multiple `on parameter set` callbacks #393,20,['enhancement'],https://github.com/ros2/rclpy/pull/427,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/427#issuecomment-531775871,"@ivanpauno
Is my method add_on_set_callback correctly implemented?","Please, do not open multiple PRs, always update #423.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,427,2019-09-14T11:35:51Z,2019-11-12T21:46:57Z,2019-11-12T21:47:33Z,CLOSED,False,1,24161,107,https://github.com/suab321321,Support multiple `on parameter set` callbacks #393,20,['enhancement'],https://github.com/ros2/rclpy/pull/427,https://github.com/suab321321,3,https://github.com/ros2/rclpy/pull/427#issuecomment-531854230,"@ivanpauno
Is my method add_on_set_callback correctly implemented?",Okay sir..I m having trouble updating to that same PR..it is always creating its new PR,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,427,2019-09-14T11:35:51Z,2019-11-12T21:46:57Z,2019-11-12T21:47:33Z,CLOSED,False,1,24161,107,https://github.com/suab321321,Support multiple `on parameter set` callbacks #393,20,['enhancement'],https://github.com/ros2/rclpy/pull/427,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/427#issuecomment-531880726,"@ivanpauno
Is my method add_on_set_callback correctly implemented?","Okay sir..I m having trouble updating to that same PR..it is always creating its new PR

The PR should be automatically updated when you push to your branch, the diff may not be updated when it has been closed.
In that case, left a comment in the PR asking to be reopen, instead of opening a new one.
note: You can continue here instead than in #423.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,427,2019-09-14T11:35:51Z,2019-11-12T21:46:57Z,2019-11-12T21:47:33Z,CLOSED,False,1,24161,107,https://github.com/suab321321,Support multiple `on parameter set` callbacks #393,20,['enhancement'],https://github.com/ros2/rclpy/pull/427,https://github.com/suab321321,5,https://github.com/ros2/rclpy/pull/427#issuecomment-531934766,"@ivanpauno
Is my method add_on_set_callback correctly implemented?",Okay @ivanpauno  I got it,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,427,2019-09-14T11:35:51Z,2019-11-12T21:46:57Z,2019-11-12T21:47:33Z,CLOSED,False,1,24161,107,https://github.com/suab321321,Support multiple `on parameter set` callbacks #393,20,['enhancement'],https://github.com/ros2/rclpy/pull/427,https://github.com/suab321321,6,https://github.com/ros2/rclpy/pull/427#issuecomment-531972643,"@ivanpauno
Is my method add_on_set_callback correctly implemented?",@ivanpauno  is this correct?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,427,2019-09-14T11:35:51Z,2019-11-12T21:46:57Z,2019-11-12T21:47:33Z,CLOSED,False,1,24161,107,https://github.com/suab321321,Support multiple `on parameter set` callbacks #393,20,['enhancement'],https://github.com/ros2/rclpy/pull/427,https://github.com/ivanpauno,7,https://github.com/ros2/rclpy/pull/427#issuecomment-532218970,"@ivanpauno
Is my method add_on_set_callback correctly implemented?","@ivanpauno is this correct?

Yes, you still need to modify how the callbacks are called",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,427,2019-09-14T11:35:51Z,2019-11-12T21:46:57Z,2019-11-12T21:47:33Z,CLOSED,False,1,24161,107,https://github.com/suab321321,Support multiple `on parameter set` callbacks #393,20,['enhancement'],https://github.com/ros2/rclpy/pull/427,https://github.com/suab321321,8,https://github.com/ros2/rclpy/pull/427#issuecomment-532488374,"@ivanpauno
Is my method add_on_set_callback correctly implemented?","@ivanpauno is this correct?

Yes, you still need to modify how the callbacks are called
@ivanpauno  what is meant by this..
According to me there are two function that will use add_on_set_callback()


_set_paramters_atomically
_set_parameters
but the comments are showing that these will trigger the callback which is registred with  methods on_set_parameters so where is the role of my implemented methods.

I tried to understanding it from rclcpp but cant seem to figure it out.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,427,2019-09-14T11:35:51Z,2019-11-12T21:46:57Z,2019-11-12T21:47:33Z,CLOSED,False,1,24161,107,https://github.com/suab321321,Support multiple `on parameter set` callbacks #393,20,['enhancement'],https://github.com/ros2/rclpy/pull/427,https://github.com/suab321321,9,https://github.com/ros2/rclpy/pull/427#issuecomment-533835431,"@ivanpauno
Is my method add_on_set_callback correctly implemented?",@ivanpauno sir could you please help me,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,427,2019-09-14T11:35:51Z,2019-11-12T21:46:57Z,2019-11-12T21:47:33Z,CLOSED,False,1,24161,107,https://github.com/suab321321,Support multiple `on parameter set` callbacks #393,20,['enhancement'],https://github.com/ros2/rclpy/pull/427,https://github.com/suab321321,10,https://github.com/ros2/rclpy/pull/427#issuecomment-541408136,"@ivanpauno
Is my method add_on_set_callback correctly implemented?","@ivanpauno  I have some doubts
1.I cant find where the callbacks are called so dont know how to use my two functions.
I just little hint sir to complete this,for reference I tried understanding it from rclcpp but cant seem to understand it.
My pull request are failing I have no idea why",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,427,2019-09-14T11:35:51Z,2019-11-12T21:46:57Z,2019-11-12T21:47:33Z,CLOSED,False,1,24161,107,https://github.com/suab321321,Support multiple `on parameter set` callbacks #393,20,['enhancement'],https://github.com/ros2/rclpy/pull/427,https://github.com/suab321321,11,https://github.com/ros2/rclpy/pull/427#issuecomment-542704183,"@ivanpauno
Is my method add_on_set_callback correctly implemented?",@mabelzhang could you please help me,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,427,2019-09-14T11:35:51Z,2019-11-12T21:46:57Z,2019-11-12T21:47:33Z,CLOSED,False,1,24161,107,https://github.com/suab321321,Support multiple `on parameter set` callbacks #393,20,['enhancement'],https://github.com/ros2/rclpy/pull/427,https://github.com/suab321321,12,https://github.com/ros2/rclpy/pull/427#issuecomment-544173891,"@ivanpauno
Is my method add_on_set_callback correctly implemented?","@jacobperron
If I change it in your way then I wont be able to add element into the self._parameters_callback it will instead override the self._parameters_callback as far I see it",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,427,2019-09-14T11:35:51Z,2019-11-12T21:46:57Z,2019-11-12T21:47:33Z,CLOSED,False,1,24161,107,https://github.com/suab321321,Support multiple `on parameter set` callbacks #393,20,['enhancement'],https://github.com/ros2/rclpy/pull/427,https://github.com/jacobperron,13,https://github.com/ros2/rclpy/pull/427#issuecomment-544272630,"@ivanpauno
Is my method add_on_set_callback correctly implemented?","If I change it in your way then I wont be able to add element into the self._parameters_callback it will instead override the self._parameters_callback as far I see it

self._parameters_callback.insert(0, callback)
is not overriding anything, it is modifying the list by inserting a new element at index 0.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,427,2019-09-14T11:35:51Z,2019-11-12T21:46:57Z,2019-11-12T21:47:33Z,CLOSED,False,1,24161,107,https://github.com/suab321321,Support multiple `on parameter set` callbacks #393,20,['enhancement'],https://github.com/ros2/rclpy/pull/427,https://github.com/suab321321,14,https://github.com/ros2/rclpy/pull/427#issuecomment-544411039,"@ivanpauno
Is my method add_on_set_callback correctly implemented?",Okay sir will update soon,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,427,2019-09-14T11:35:51Z,2019-11-12T21:46:57Z,2019-11-12T21:47:33Z,CLOSED,False,1,24161,107,https://github.com/suab321321,Support multiple `on parameter set` callbacks #393,20,['enhancement'],https://github.com/ros2/rclpy/pull/427,https://github.com/suab321321,15,https://github.com/ros2/rclpy/pull/427#issuecomment-545512185,"@ivanpauno
Is my method add_on_set_callback correctly implemented?",Why are my pull request not passing successfully,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,427,2019-09-14T11:35:51Z,2019-11-12T21:46:57Z,2019-11-12T21:47:33Z,CLOSED,False,1,24161,107,https://github.com/suab321321,Support multiple `on parameter set` callbacks #393,20,['enhancement'],https://github.com/ros2/rclpy/pull/427,https://github.com/jacobperron,16,https://github.com/ros2/rclpy/pull/427#issuecomment-545649811,"@ivanpauno
Is my method add_on_set_callback correctly implemented?","@suab321321 Looking at the CI log, it looks like there's a formatting error:
E         File ""/tmp/ws/src/rclpy/rclpy/rclpy/node.py"", line 783
E           if callback in self._parameters_callback:
E                                                   ^
E       IndentationError: unindent does not match any outer indentation level

Before pushing changes, it's a good idea to test changes locally. This helps us in the review process.
You should be able to reproduce the test errors; if you are using colcon:
colcon test --packages-select rclpy
colcon test-result --verbose",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,427,2019-09-14T11:35:51Z,2019-11-12T21:46:57Z,2019-11-12T21:47:33Z,CLOSED,False,1,24161,107,https://github.com/suab321321,Support multiple `on parameter set` callbacks #393,20,['enhancement'],https://github.com/ros2/rclpy/pull/427,https://github.com/suab321321,17,https://github.com/ros2/rclpy/pull/427#issuecomment-545900938,"@ivanpauno
Is my method add_on_set_callback correctly implemented?","@suab321321 Looking at the CI log, it looks like there's a formatting error:
E         File ""/tmp/ws/src/rclpy/rclpy/rclpy/node.py"", line 783
E           if callback in self._parameters_callback:
E                                                   ^
E       IndentationError: unindent does not match any outer indentation level

Before pushing changes, it's a good idea to test changes locally. This helps us in the review process.
You should be able to reproduce the test errors; if you are using colcon:
colcon test --packages-select rclpy
colcon test-result --verbose


Okay sir,I will update soon",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,427,2019-09-14T11:35:51Z,2019-11-12T21:46:57Z,2019-11-12T21:47:33Z,CLOSED,False,1,24161,107,https://github.com/suab321321,Support multiple `on parameter set` callbacks #393,20,['enhancement'],https://github.com/ros2/rclpy/pull/427,https://github.com/suab321321,18,https://github.com/ros2/rclpy/pull/427#issuecomment-546856968,"@ivanpauno
Is my method add_on_set_callback correctly implemented?","@jacobperron sir I cant understand what continuation line unaligned for hanging indent:
callback: Callable[[List[Parameter]], SetParametersResult]
,but this is same as
def set_parameters_callback(
self,
callback: Callable[[List[Parameter]], SetParametersResult]
) -> None: i
but it is showing error
And also it is showing error on multiple file like client.py,action_graph.py and others but I did not touch the files so how come those are showing errors
And I have made this changes how in callbacks are called
for parameter in parameter_list:
result = self._parameters_callback(parameter)
but cant upload due to errors",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,427,2019-09-14T11:35:51Z,2019-11-12T21:46:57Z,2019-11-12T21:47:33Z,CLOSED,False,1,24161,107,https://github.com/suab321321,Support multiple `on parameter set` callbacks #393,20,['enhancement'],https://github.com/ros2/rclpy/pull/427,https://github.com/suab321321,19,https://github.com/ros2/rclpy/pull/427#issuecomment-553131100,"@ivanpauno
Is my method add_on_set_callback correctly implemented?",Continued in Support multiple parameters callback #457,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,428,2019-09-16T16:08:51Z,2019-09-16T16:52:58Z,2019-09-16T16:52:58Z,CLOSED,False,43,2,6,https://github.com/suab321321,multiple parameters support,5,[],https://github.com/ros2/rclpy/pull/428,https://github.com/suab321321,1,https://github.com/ros2/rclpy/pull/428,dsddsdsds,dsddsdsds,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,429,2019-09-17T20:11:31Z,2019-09-18T16:17:53Z,2019-09-18T16:17:56Z,MERGED,True,45,1,3,https://github.com/BMarchi,Provide subscription count from Publisher #418,2,[],https://github.com/ros2/rclpy/pull/429,https://github.com/BMarchi,1,https://github.com/ros2/rclpy/pull/429,"fixes #418 . Publisher python's class can get the amount of subscribers that it has.

Linux 
Arch 
OSX 
Windows 

There are some test failures which I think they are unrelated with this change. You can see for example:

Linux job 
Arch job 
OSX job 
Windows job 

All of them related with rmw (connext and fastrtps) in master","fixes #418 . Publisher python's class can get the amount of subscribers that it has.

Linux 
Arch 
OSX 
Windows 

There are some test failures which I think they are unrelated with this change. You can see for example:

Linux job 
Arch job 
OSX job 
Windows job 

All of them related with rmw (connext and fastrtps) in master",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,431,2019-09-17T23:15:15Z,2019-09-18T22:06:46Z,2019-09-18T22:06:49Z,MERGED,True,40,139,4,https://github.com/jacobperron,Remove deprecated QoS functionality,1,[],https://github.com/ros2/rclpy/pull/431,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/431,"Existing warnings are replaced with a new exception, InvalidQoSProfileException.
Resolves #430","Existing warnings are replaced with a new exception, InvalidQoSProfileException.
Resolves #430",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,431,2019-09-17T23:15:15Z,2019-09-18T22:06:46Z,2019-09-18T22:06:49Z,MERGED,True,40,139,4,https://github.com/jacobperron,Remove deprecated QoS functionality,1,[],https://github.com/ros2/rclpy/pull/431,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/431#issuecomment-532843225,"Existing warnings are replaced with a new exception, InvalidQoSProfileException.
Resolves #430","Linux 
Linux-aarch64 
macOS 
Windows  (tf2_ros and sros2 errors are also occurring on master)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,432,2019-09-17T23:18:32Z,2019-09-18T18:50:17Z,2019-09-18T18:50:20Z,MERGED,True,0,2,1,https://github.com/jacobperron,Remove comment,1,[],https://github.com/ros2/rclpy/pull/432,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/432,The comment is no longer true.,The comment is no longer true.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,433,2019-09-21T21:35:57Z,2019-10-07T23:54:03Z,2019-10-07T23:54:07Z,CLOSED,False,1,1,1,https://github.com/Karsten1987,Zero copy api,1,['enhancement'],https://github.com/ros2/rclpy/pull/433,https://github.com/Karsten1987,1,https://github.com/ros2/rclpy/pull/433,"ros2/ros2#785
Signed-off-by: Karsten Knese karsten@openrobotics.org","ros2/ros2#785
Signed-off-by: Karsten Knese karsten@openrobotics.org",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,434,2019-09-23T13:29:41Z,2019-09-25T17:57:53Z,2019-09-25T17:57:56Z,MERGED,True,48,35,3,https://github.com/hidmic,Take parameter overrides provided through the CLI.,1,[],https://github.com/ros2/rclpy/pull/434,https://github.com/hidmic,1,https://github.com/ros2/rclpy/pull/434,"This pull request delegates all parameter parsing to rcl, as introduced in ros2/rcl#508.","This pull request delegates all parameter parsing to rcl, as introduced in ros2/rcl#508.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,437,2019-09-30T20:40:53Z,2019-10-01T19:41:01Z,2019-10-01T19:41:05Z,MERGED,True,38,2,2,https://github.com/jacobperron,Action server: catch exception from user execute callback,1,['in review'],https://github.com/ros2/rclpy/pull/437,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/437,"Fixes #296.
Catch and print exception traceback from user-defined execute callback.
Added unit test to cover this case.","Fixes #296.
Catch and print exception traceback from user-defined execute callback.
Added unit test to cover this case.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,437,2019-09-30T20:40:53Z,2019-10-01T19:41:01Z,2019-10-01T19:41:05Z,MERGED,True,38,2,2,https://github.com/jacobperron,Action server: catch exception from user execute callback,1,['in review'],https://github.com/ros2/rclpy/pull/437,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/437#issuecomment-536769473,"Fixes #296.
Catch and print exception traceback from user-defined execute callback.
Added unit test to cover this case.","CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows  (cppcheck error is happening on master)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,438,2019-10-01T15:30:50Z,2019-10-01T16:22:12Z,2019-10-01T16:22:15Z,MERGED,True,3,0,1,https://github.com/jacobperron,Make cppcheck happy,1,[],https://github.com/ros2/rclpy/pull/438,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/438,"It looks like adding an assert fixes a false-positive from cppcheck.
Previously, cppcheck was complaining that rclpy_profile may not be set 
With this fix:","It looks like adding an assert fixes a false-positive from cppcheck.
Previously, cppcheck was complaining that rclpy_profile may not be set 
With this fix:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,438,2019-10-01T15:30:50Z,2019-10-01T16:22:12Z,2019-10-01T16:22:15Z,MERGED,True,3,0,1,https://github.com/jacobperron,Make cppcheck happy,1,[],https://github.com/ros2/rclpy/pull/438,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/438#issuecomment-537093771,"It looks like adding an assert fixes a false-positive from cppcheck.
Previously, cppcheck was complaining that rclpy_profile may not be set 
With this fix:","Release build, just to be sure:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,439,2019-10-01T21:40:22Z,2019-10-10T15:33:24Z,2019-10-10T15:33:28Z,MERGED,True,38,2,2,https://github.com/jacobperron,[dashing backport] Action server: catch exception from user execute callback (#437),1,['in review'],https://github.com/ros2/rclpy/pull/439,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/439,"Backport #437 to Dashing.
Fixes #296.
Catch and print exception traceback from user-defined execute callback.
Added unit test to cover this case.","Backport #437 to Dashing.
Fixes #296.
Catch and print exception traceback from user-defined execute callback.
Added unit test to cover this case.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,439,2019-10-01T21:40:22Z,2019-10-10T15:33:24Z,2019-10-10T15:33:28Z,MERGED,True,38,2,2,https://github.com/jacobperron,[dashing backport] Action server: catch exception from user execute callback (#437),1,['in review'],https://github.com/ros2/rclpy/pull/439,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/439#issuecomment-537244109,"Backport #437 to Dashing.
Fixes #296.
Catch and print exception traceback from user-defined execute callback.
Added unit test to cover this case.","Linux 
Linux-aarch64 
macOS 
Windows  (unrelated cppcheck warning)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,440,2019-10-01T21:48:43Z,2019-11-26T20:30:24Z,2019-11-26T20:30:53Z,MERGED,True,38,2,2,https://github.com/jacobperron,[crystal backport] Action server: catch exception from user execute callback (#437),2,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/440,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/440,"Backport #437 to Crystal.
Fixes #296.
Catch and print exception traceback from user-defined execute callback.
Added unit test to cover this case.

Linux 
Linux-aarch64 
macOS 
Windows 

Edit: retrigger CI with test refactor (bb76362).
Edit: Unrelated linter errors and one rosidl_parser test failure on all platforms.
CI without this change has the same failures:","Backport #437 to Crystal.
Fixes #296.
Catch and print exception traceback from user-defined execute callback.
Added unit test to cover this case.

Linux 
Linux-aarch64 
macOS 
Windows 

Edit: retrigger CI with test refactor (bb76362).
Edit: Unrelated linter errors and one rosidl_parser test failure on all platforms.
CI without this change has the same failures:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,440,2019-10-01T21:48:43Z,2019-11-26T20:30:24Z,2019-11-26T20:30:53Z,MERGED,True,38,2,2,https://github.com/jacobperron,[crystal backport] Action server: catch exception from user execute callback (#437),2,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/440,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/440#issuecomment-537252328,"Backport #437 to Crystal.
Fixes #296.
Catch and print exception traceback from user-defined execute callback.
Added unit test to cover this case.

Linux 
Linux-aarch64 
macOS 
Windows 

Edit: retrigger CI with test refactor (bb76362).
Edit: Unrelated linter errors and one rosidl_parser test failure on all platforms.
CI without this change has the same failures:",I had to refactor the test for compatibility with Crystal (bb76362),True,{}
ros2/rclpy,https://github.com/ros2/rclpy,441,2019-10-08T12:15:55Z,2019-10-18T19:20:22Z,2019-10-18T19:20:25Z,MERGED,True,60,14,2,https://github.com/BMarchi,Make use of Clock class for throttling logs,2,['enhancement'],https://github.com/ros2/rclpy/pull/441,https://github.com/BMarchi,1,https://github.com/ros2/rclpy/pull/441,"As the title says, this make use of the python clock class for throttling logs. Follow up PR for rclcpp and rcutils

Linux 
Arch 
Windows 
OSX 

CI failures are unrelated to my changes.","As the title says, this make use of the python clock class for throttling logs. Follow up PR for rclcpp and rcutils

Linux 
Arch 
Windows 
OSX 

CI failures are unrelated to my changes.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,441,2019-10-08T12:15:55Z,2019-10-18T19:20:22Z,2019-10-18T19:20:25Z,MERGED,True,60,14,2,https://github.com/BMarchi,Make use of Clock class for throttling logs,2,['enhancement'],https://github.com/ros2/rclpy/pull/441,https://github.com/BMarchi,2,https://github.com/ros2/rclpy/pull/441#issuecomment-542819082,"As the title says, this make use of the python clock class for throttling logs. Follow up PR for rclcpp and rcutils

Linux 
Arch 
Windows 
OSX 

CI failures are unrelated to my changes.","No, I'll run it soon, once it gets stabilized",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,441,2019-10-08T12:15:55Z,2019-10-18T19:20:22Z,2019-10-18T19:20:25Z,MERGED,True,60,14,2,https://github.com/BMarchi,Make use of Clock class for throttling logs,2,['enhancement'],https://github.com/ros2/rclpy/pull/441,https://github.com/BMarchi,3,https://github.com/ros2/rclpy/pull/441#issuecomment-543816715,"As the title says, this make use of the python clock class for throttling logs. Follow up PR for rclcpp and rcutils

Linux 
Arch 
Windows 
OSX 

CI failures are unrelated to my changes.","@hidmic , I rerun CI now, at least for linux it passed. Waiting for windows and osx",True,{'THUMBS_UP': ['https://github.com/hidmic']}
ros2/rclpy,https://github.com/ros2/rclpy,441,2019-10-08T12:15:55Z,2019-10-18T19:20:22Z,2019-10-18T19:20:25Z,MERGED,True,60,14,2,https://github.com/BMarchi,Make use of Clock class for throttling logs,2,['enhancement'],https://github.com/ros2/rclpy/pull/441,https://github.com/hidmic,4,https://github.com/ros2/rclpy/pull/441#issuecomment-543897527,"As the title says, this make use of the python clock class for throttling logs. Follow up PR for rclcpp and rcutils

Linux 
Arch 
Windows 
OSX 

CI failures are unrelated to my changes.","Alright, all's green. Going in, hope you don't mind @BMarchi.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,442,2019-10-10T14:30:30Z,2019-10-10T16:58:02Z,2019-10-10T16:58:04Z,MERGED,True,19,9,2,https://github.com/nuclearsandwich,[Dashing] Accept tuples as parameter arrays.,1,['in review'],https://github.com/ros2/rclpy/pull/442,https://github.com/nuclearsandwich,1,https://github.com/ros2/rclpy/pull/442,Backports #389 for Dashing.,Backports #389 for Dashing.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,442,2019-10-10T14:30:30Z,2019-10-10T16:58:02Z,2019-10-10T16:58:04Z,MERGED,True,19,9,2,https://github.com/nuclearsandwich,[Dashing] Accept tuples as parameter arrays.,1,['in review'],https://github.com/ros2/rclpy/pull/442,https://github.com/nuclearsandwich,2,https://github.com/ros2/rclpy/pull/442#issuecomment-540617934,Backports #389 for Dashing.,"Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,443,2019-10-10T22:15:33Z,2019-10-14T20:48:52Z,2019-10-24T16:38:08Z,MERGED,True,244,2,7,https://github.com/sloretz,Add Rate,4,['needs review'],https://github.com/ros2/rclpy/pull/443,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/443,"Resolves #186
This adds a Rate class. It's a tool for running a loop at a constant rate.
Plus:

Made context shutdown callbacks use weakref.WeakMethod().

Should prevent the callback list from growing infinitely.


Added Handle.__bool__().

Used to avoid sleeping if the timer was destroyed.



Comparison with ROS 1:

ROS 1: rate = rospy.Rate(10); ROS 2 rate = node.create_rate(10).
Both raise ROSInterruptException if the client library has been shutdown
ROS 1: may raise ROSTimeMovedBackwardsException; ROS 2: uses timer time jump logic.

If it went back more than 1 period, Rate sleeps for 1 full period. If it went backwards less than a period, Rate sleeps for the time remaining. If the time source changed, sleeps for the time remaining.


ROS 1: Almost always ok to call in a callback; ROS 2: An executor must be serving the timer, so may block if called in a callback in a SingleThreadedExecutor
ROS 1: Had Rate.remaining(); ROS 2: not implemented. It should be easy to add if someone needs it.","Resolves #186
This adds a Rate class. It's a tool for running a loop at a constant rate.
Plus:

Made context shutdown callbacks use weakref.WeakMethod().

Should prevent the callback list from growing infinitely.


Added Handle.__bool__().

Used to avoid sleeping if the timer was destroyed.



Comparison with ROS 1:

ROS 1: rate = rospy.Rate(10); ROS 2 rate = node.create_rate(10).
Both raise ROSInterruptException if the client library has been shutdown
ROS 1: may raise ROSTimeMovedBackwardsException; ROS 2: uses timer time jump logic.

If it went back more than 1 period, Rate sleeps for 1 full period. If it went backwards less than a period, Rate sleeps for the time remaining. If the time source changed, sleeps for the time remaining.


ROS 1: Almost always ok to call in a callback; ROS 2: An executor must be serving the timer, so may block if called in a callback in a SingleThreadedExecutor
ROS 1: Had Rate.remaining(); ROS 2: not implemented. It should be easy to add if someone needs it.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,443,2019-10-10T22:15:33Z,2019-10-14T20:48:52Z,2019-10-24T16:38:08Z,MERGED,True,244,2,7,https://github.com/sloretz,Add Rate,4,['needs review'],https://github.com/ros2/rclpy/pull/443,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/443#issuecomment-541784365,"Resolves #186
This adds a Rate class. It's a tool for running a loop at a constant rate.
Plus:

Made context shutdown callbacks use weakref.WeakMethod().

Should prevent the callback list from growing infinitely.


Added Handle.__bool__().

Used to avoid sleeping if the timer was destroyed.



Comparison with ROS 1:

ROS 1: rate = rospy.Rate(10); ROS 2 rate = node.create_rate(10).
Both raise ROSInterruptException if the client library has been shutdown
ROS 1: may raise ROSTimeMovedBackwardsException; ROS 2: uses timer time jump logic.

If it went back more than 1 period, Rate sleeps for 1 full period. If it went backwards less than a period, Rate sleeps for the time remaining. If the time source changed, sleeps for the time remaining.


ROS 1: Almost always ok to call in a callback; ROS 2: An executor must be serving the timer, so may block if called in a callback in a SingleThreadedExecutor
ROS 1: Had Rate.remaining(); ROS 2: not implemented. It should be easy to add if someone needs it.","CI (testing rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,443,2019-10-10T22:15:33Z,2019-10-14T20:48:52Z,2019-10-24T16:38:08Z,MERGED,True,244,2,7,https://github.com/sloretz,Add Rate,4,['needs review'],https://github.com/ros2/rclpy/pull/443,https://github.com/charlotteheggem,3,https://github.com/ros2/rclpy/pull/443#issuecomment-545895523,"Resolves #186
This adds a Rate class. It's a tool for running a loop at a constant rate.
Plus:

Made context shutdown callbacks use weakref.WeakMethod().

Should prevent the callback list from growing infinitely.


Added Handle.__bool__().

Used to avoid sleeping if the timer was destroyed.



Comparison with ROS 1:

ROS 1: rate = rospy.Rate(10); ROS 2 rate = node.create_rate(10).
Both raise ROSInterruptException if the client library has been shutdown
ROS 1: may raise ROSTimeMovedBackwardsException; ROS 2: uses timer time jump logic.

If it went back more than 1 period, Rate sleeps for 1 full period. If it went backwards less than a period, Rate sleeps for the time remaining. If the time source changed, sleeps for the time remaining.


ROS 1: Almost always ok to call in a callback; ROS 2: An executor must be serving the timer, so may block if called in a callback in a SingleThreadedExecutor
ROS 1: Had Rate.remaining(); ROS 2: not implemented. It should be easy to add if someone needs it.","Hi, is it possible to make this feature be available for ROS2 dashing?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,443,2019-10-10T22:15:33Z,2019-10-14T20:48:52Z,2019-10-24T16:38:08Z,MERGED,True,244,2,7,https://github.com/sloretz,Add Rate,4,['needs review'],https://github.com/ros2/rclpy/pull/443,https://github.com/jacobperron,4,https://github.com/ros2/rclpy/pull/443#issuecomment-546001884,"Resolves #186
This adds a Rate class. It's a tool for running a loop at a constant rate.
Plus:

Made context shutdown callbacks use weakref.WeakMethod().

Should prevent the callback list from growing infinitely.


Added Handle.__bool__().

Used to avoid sleeping if the timer was destroyed.



Comparison with ROS 1:

ROS 1: rate = rospy.Rate(10); ROS 2 rate = node.create_rate(10).
Both raise ROSInterruptException if the client library has been shutdown
ROS 1: may raise ROSTimeMovedBackwardsException; ROS 2: uses timer time jump logic.

If it went back more than 1 period, Rate sleeps for 1 full period. If it went backwards less than a period, Rate sleeps for the time remaining. If the time source changed, sleeps for the time remaining.


ROS 1: Almost always ok to call in a callback; ROS 2: An executor must be serving the timer, so may block if called in a callback in a SingleThreadedExecutor
ROS 1: Had Rate.remaining(); ROS 2: not implemented. It should be easy to add if someone needs it.","We typically only backport bug fixes and not features. Though, I don't see much risk in backporting this particular feature and am open to it. @sloretz, what do you think?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,444,2019-10-16T16:41:33Z,2019-10-21T20:32:43Z,2019-10-21T20:32:47Z,MERGED,True,27,3,2,https://github.com/BMarchi,Support array parameter types,2,[],https://github.com/ros2/rclpy/pull/444,https://github.com/BMarchi,1,https://github.com/ros2/rclpy/pull/444,"Fixes #424. Adds support for double and int python arrays

Linux 
Arch 
macOS 
Windows 

Edit: Rerunning jobs","Fixes #424. Adds support for double and int python arrays

Linux 
Arch 
macOS 
Windows 

Edit: Rerunning jobs",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,445,2019-10-17T15:00:26Z,2019-10-17T19:22:54Z,2019-10-17T19:22:58Z,MERGED,True,0,5,1,https://github.com/hidmic,Drop rclpy test_remove_ros_args_empty test case.,1,['enhancement'],https://github.com/ros2/rclpy/pull/445,https://github.com/hidmic,1,https://github.com/ros2/rclpy/pull/445,Follow-up PR after ros2/rcl#518.,Follow-up PR after ros2/rcl#518.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,445,2019-10-17T15:00:26Z,2019-10-17T19:22:54Z,2019-10-17T19:22:58Z,MERGED,True,0,5,1,https://github.com/hidmic,Drop rclpy test_remove_ros_args_empty test case.,1,['enhancement'],https://github.com/ros2/rclpy/pull/445,https://github.com/hidmic,2,https://github.com/ros2/rclpy/pull/445#issuecomment-543218290,Follow-up PR after ros2/rcl#518.,"CI (up to rclcpp and rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,445,2019-10-17T15:00:26Z,2019-10-17T19:22:54Z,2019-10-17T19:22:58Z,MERGED,True,0,5,1,https://github.com/hidmic,Drop rclpy test_remove_ros_args_empty test case.,1,['enhancement'],https://github.com/ros2/rclpy/pull/445,https://github.com/hidmic,3,https://github.com/ros2/rclpy/pull/445#issuecomment-543323958,Follow-up PR after ros2/rcl#518.,Going in!,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,447,2019-10-23T14:24:17Z,2019-10-24T02:30:59Z,2019-10-24T02:31:02Z,MERGED,True,10,1,1,https://github.com/BMarchi,Fix the unicode test string for opensplice rmw implementation,2,[],https://github.com/ros2/rclpy/pull/447,https://github.com/BMarchi,1,https://github.com/ros2/rclpy/pull/447,"As the title says, this fixes a particular test for opensplice.
I don't think this is a proper solution for the issue, but it keeps CI happy. What I was able to understand and find, is that opensplice caches the topics that are created. I know we are using a deb, but I took a peek to their community edition and it seems that the errors matched just fine. You can see that error here.
As I was saying, when one creates a publisher/subscriber, it reaches a point where it creates a topic, calling this function
https://github.com/ADLINK-IST/opensplice/blob/c98e118a2e4366d2a5a6af8cbcecdf112bf9e4ab/src/kernel/code/v_topicImpl.c#L477
Specifically, this is part of our interest
https://github.com/ADLINK-IST/opensplice/blob/c98e118a2e4366d2a5a6af8cbcecdf112bf9e4ab/src/kernel/code/v_topicImpl.c#L527
Here, it makes use of a lookuptable for topics that lives within the kernel.
https://github.com/ADLINK-IST/opensplice/blob/c98e118a2e4366d2a5a6af8cbcecdf112bf9e4ab/src/kernel/code/v_topicImpl.c#L532
That function is the one that checks the types of the new topic and the one it found (since the names are the same).
Digging a little bit in the rmw implementation for the publisher, I saw that we do call a delete_topic function for the participant
https://github.com/ros2/rmw_opensplice/blob/f9997162920857a46a782ad1fbf7b876f6ba05bd/rmw_opensplice_cpp/src/rmw_publisher.cpp#L274
And it seems that there's no issue in ""deleting"" the topic, otherwise an error/exception should show.
When a node is destroyed, in rmw_destroy_node, I found a curious comment.
https://github.com/ros2/rmw_opensplice/blob/f9997162920857a46a782ad1fbf7b876f6ba05bd/rmw_opensplice_cpp/src/rmw_node.cpp#L381-L386
The interesting thing is that it seems that we are somewhat aware that some stuff could be in memory yet even if they shouldn't.
Does anyone have a clue if this is a known issue or we are missing a function call in the destroy_publisher function?

Opensplice jobs:
Linux 
Arch 
macOS 
Windows","As the title says, this fixes a particular test for opensplice.
I don't think this is a proper solution for the issue, but it keeps CI happy. What I was able to understand and find, is that opensplice caches the topics that are created. I know we are using a deb, but I took a peek to their community edition and it seems that the errors matched just fine. You can see that error here.
As I was saying, when one creates a publisher/subscriber, it reaches a point where it creates a topic, calling this function
https://github.com/ADLINK-IST/opensplice/blob/c98e118a2e4366d2a5a6af8cbcecdf112bf9e4ab/src/kernel/code/v_topicImpl.c#L477
Specifically, this is part of our interest
https://github.com/ADLINK-IST/opensplice/blob/c98e118a2e4366d2a5a6af8cbcecdf112bf9e4ab/src/kernel/code/v_topicImpl.c#L527
Here, it makes use of a lookuptable for topics that lives within the kernel.
https://github.com/ADLINK-IST/opensplice/blob/c98e118a2e4366d2a5a6af8cbcecdf112bf9e4ab/src/kernel/code/v_topicImpl.c#L532
That function is the one that checks the types of the new topic and the one it found (since the names are the same).
Digging a little bit in the rmw implementation for the publisher, I saw that we do call a delete_topic function for the participant
https://github.com/ros2/rmw_opensplice/blob/f9997162920857a46a782ad1fbf7b876f6ba05bd/rmw_opensplice_cpp/src/rmw_publisher.cpp#L274
And it seems that there's no issue in ""deleting"" the topic, otherwise an error/exception should show.
When a node is destroyed, in rmw_destroy_node, I found a curious comment.
https://github.com/ros2/rmw_opensplice/blob/f9997162920857a46a782ad1fbf7b876f6ba05bd/rmw_opensplice_cpp/src/rmw_node.cpp#L381-L386
The interesting thing is that it seems that we are somewhat aware that some stuff could be in memory yet even if they shouldn't.
Does anyone have a clue if this is a known issue or we are missing a function call in the destroy_publisher function?

Opensplice jobs:
Linux 
Arch 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,447,2019-10-23T14:24:17Z,2019-10-24T02:30:59Z,2019-10-24T02:31:02Z,MERGED,True,10,1,1,https://github.com/BMarchi,Fix the unicode test string for opensplice rmw implementation,2,[],https://github.com/ros2/rclpy/pull/447,https://github.com/BMarchi,2,https://github.com/ros2/rclpy/pull/447#issuecomment-545492240,"As the title says, this fixes a particular test for opensplice.
I don't think this is a proper solution for the issue, but it keeps CI happy. What I was able to understand and find, is that opensplice caches the topics that are created. I know we are using a deb, but I took a peek to their community edition and it seems that the errors matched just fine. You can see that error here.
As I was saying, when one creates a publisher/subscriber, it reaches a point where it creates a topic, calling this function
https://github.com/ADLINK-IST/opensplice/blob/c98e118a2e4366d2a5a6af8cbcecdf112bf9e4ab/src/kernel/code/v_topicImpl.c#L477
Specifically, this is part of our interest
https://github.com/ADLINK-IST/opensplice/blob/c98e118a2e4366d2a5a6af8cbcecdf112bf9e4ab/src/kernel/code/v_topicImpl.c#L527
Here, it makes use of a lookuptable for topics that lives within the kernel.
https://github.com/ADLINK-IST/opensplice/blob/c98e118a2e4366d2a5a6af8cbcecdf112bf9e4ab/src/kernel/code/v_topicImpl.c#L532
That function is the one that checks the types of the new topic and the one it found (since the names are the same).
Digging a little bit in the rmw implementation for the publisher, I saw that we do call a delete_topic function for the participant
https://github.com/ros2/rmw_opensplice/blob/f9997162920857a46a782ad1fbf7b876f6ba05bd/rmw_opensplice_cpp/src/rmw_publisher.cpp#L274
And it seems that there's no issue in ""deleting"" the topic, otherwise an error/exception should show.
When a node is destroyed, in rmw_destroy_node, I found a curious comment.
https://github.com/ros2/rmw_opensplice/blob/f9997162920857a46a782ad1fbf7b876f6ba05bd/rmw_opensplice_cpp/src/rmw_node.cpp#L381-L386
The interesting thing is that it seems that we are somewhat aware that some stuff could be in memory yet even if they shouldn't.
Does anyone have a clue if this is a known issue or we are missing a function call in the destroy_publisher function?

Opensplice jobs:
Linux 
Arch 
macOS 
Windows",Should we call someone from opensplice to give us an insight of what's going on?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,447,2019-10-23T14:24:17Z,2019-10-24T02:30:59Z,2019-10-24T02:31:02Z,MERGED,True,10,1,1,https://github.com/BMarchi,Fix the unicode test string for opensplice rmw implementation,2,[],https://github.com/ros2/rclpy/pull/447,https://github.com/hidmic,3,https://github.com/ros2/rclpy/pull/447#issuecomment-545612691,"As the title says, this fixes a particular test for opensplice.
I don't think this is a proper solution for the issue, but it keeps CI happy. What I was able to understand and find, is that opensplice caches the topics that are created. I know we are using a deb, but I took a peek to their community edition and it seems that the errors matched just fine. You can see that error here.
As I was saying, when one creates a publisher/subscriber, it reaches a point where it creates a topic, calling this function
https://github.com/ADLINK-IST/opensplice/blob/c98e118a2e4366d2a5a6af8cbcecdf112bf9e4ab/src/kernel/code/v_topicImpl.c#L477
Specifically, this is part of our interest
https://github.com/ADLINK-IST/opensplice/blob/c98e118a2e4366d2a5a6af8cbcecdf112bf9e4ab/src/kernel/code/v_topicImpl.c#L527
Here, it makes use of a lookuptable for topics that lives within the kernel.
https://github.com/ADLINK-IST/opensplice/blob/c98e118a2e4366d2a5a6af8cbcecdf112bf9e4ab/src/kernel/code/v_topicImpl.c#L532
That function is the one that checks the types of the new topic and the one it found (since the names are the same).
Digging a little bit in the rmw implementation for the publisher, I saw that we do call a delete_topic function for the participant
https://github.com/ros2/rmw_opensplice/blob/f9997162920857a46a782ad1fbf7b876f6ba05bd/rmw_opensplice_cpp/src/rmw_publisher.cpp#L274
And it seems that there's no issue in ""deleting"" the topic, otherwise an error/exception should show.
When a node is destroyed, in rmw_destroy_node, I found a curious comment.
https://github.com/ros2/rmw_opensplice/blob/f9997162920857a46a782ad1fbf7b876f6ba05bd/rmw_opensplice_cpp/src/rmw_node.cpp#L381-L386
The interesting thing is that it seems that we are somewhat aware that some stuff could be in memory yet even if they shouldn't.
Does anyone have a clue if this is a known issue or we are missing a function call in the destroy_publisher function?

Opensplice jobs:
Linux 
Arch 
macOS 
Windows","Should we call someone from opensplice to give us an insight of what's going on?

I think we should, but that fix won't land before Eloquent is out so let's merge this one!",True,{'THUMBS_UP': ['https://github.com/mjcarroll']}
ros2/rclpy,https://github.com/ros2/rclpy,448,2019-10-23T20:35:44Z,2019-10-23T21:38:31Z,2019-10-23T21:38:34Z,CLOSED,False,1,1,1,https://github.com/hidmic,Increase rclpy tests timeout,1,[],https://github.com/ros2/rclpy/pull/448,https://github.com/hidmic,1,https://github.com/ros2/rclpy/pull/448,"Precisely what the title says.
I managed to reproduce recent test_executor failures on Linux when using RTI Connext (see https://ci.ros2.org/job/ci_linux/8479/testReport/junit/(root)/projectroot/test_executor/). It turns out it takes ~61 sec to complete... So I'll guess and say other recent failures are flakes as well (note how all fail exactly after 60s).
CI (up to rclpy, using RTI Connext only)

Linux","Precisely what the title says.
I managed to reproduce recent test_executor failures on Linux when using RTI Connext (see https://ci.ros2.org/job/ci_linux/8479/testReport/junit/(root)/projectroot/test_executor/). It turns out it takes ~61 sec to complete... So I'll guess and say other recent failures are flakes as well (note how all fail exactly after 60s).
CI (up to rclpy, using RTI Connext only)

Linux",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,448,2019-10-23T20:35:44Z,2019-10-23T21:38:31Z,2019-10-23T21:38:34Z,CLOSED,False,1,1,1,https://github.com/hidmic,Increase rclpy tests timeout,1,[],https://github.com/ros2/rclpy/pull/448,https://github.com/hidmic,2,https://github.com/ros2/rclpy/pull/448#issuecomment-545625326,"Precisely what the title says.
I managed to reproduce recent test_executor failures on Linux when using RTI Connext (see https://ci.ros2.org/job/ci_linux/8479/testReport/junit/(root)/projectroot/test_executor/). It turns out it takes ~61 sec to complete... So I'll guess and say other recent failures are flakes as well (note how all fail exactly after 60s).
CI (up to rclpy, using RTI Connext only)

Linux",@dirk-thomas I think ament_cmake_add_pytest() (and ament_cmake_add_gtest() too) should generate an xUnit file in this case i.e. when timeouts are external to the testing tool. WDYT?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,448,2019-10-23T20:35:44Z,2019-10-23T21:38:31Z,2019-10-23T21:38:34Z,CLOSED,False,1,1,1,https://github.com/hidmic,Increase rclpy tests timeout,1,[],https://github.com/ros2/rclpy/pull/448,https://github.com/dirk-thomas,3,https://github.com/ros2/rclpy/pull/448#issuecomment-545628998,"Precisely what the title says.
I managed to reproduce recent test_executor failures on Linux when using RTI Connext (see https://ci.ros2.org/job/ci_linux/8479/testReport/junit/(root)/projectroot/test_executor/). It turns out it takes ~61 sec to complete... So I'll guess and say other recent failures are flakes as well (note how all fail exactly after 60s).
CI (up to rclpy, using RTI Connext only)

Linux",That should already be the case: ament_add_pytest_test calls ament_add_test which invokes run_test.py which generates a result file in the beginning.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,448,2019-10-23T20:35:44Z,2019-10-23T21:38:31Z,2019-10-23T21:38:34Z,CLOSED,False,1,1,1,https://github.com/hidmic,Increase rclpy tests timeout,1,[],https://github.com/ros2/rclpy/pull/448,https://github.com/hidmic,4,https://github.com/ros2/rclpy/pull/448#issuecomment-545631478,"Precisely what the title says.
I managed to reproduce recent test_executor failures on Linux when using RTI Connext (see https://ci.ros2.org/job/ci_linux/8479/testReport/junit/(root)/projectroot/test_executor/). It turns out it takes ~61 sec to complete... So I'll guess and say other recent failures are flakes as well (note how all fail exactly after 60s).
CI (up to rclpy, using RTI Connext only)

Linux","Hmm, that's curious. Could it be that Jenkins is not picking it up? Oh, so it's ament_cmake_add_*() that generates test result file that simply says that no test result was generated. It'd be nice if it provided a bit more insight: the test timed out, the test returned -11, and so on. WDYT?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,448,2019-10-23T20:35:44Z,2019-10-23T21:38:31Z,2019-10-23T21:38:34Z,CLOSED,False,1,1,1,https://github.com/hidmic,Increase rclpy tests timeout,1,[],https://github.com/ros2/rclpy/pull/448,https://github.com/mjcarroll,5,https://github.com/ros2/rclpy/pull/448#issuecomment-545647563,"Precisely what the title says.
I managed to reproduce recent test_executor failures on Linux when using RTI Connext (see https://ci.ros2.org/job/ci_linux/8479/testReport/junit/(root)/projectroot/test_executor/). It turns out it takes ~61 sec to complete... So I'll guess and say other recent failures are flakes as well (note how all fail exactly after 60s).
CI (up to rclpy, using RTI Connext only)

Linux","Needed to be a tiny bit longer, I'm closing this in favor of #449",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,449,2019-10-23T20:49:13Z,2019-10-23T21:38:49Z,2019-10-23T21:38:52Z,MERGED,True,1,1,1,https://github.com/mjcarroll,Expand test timeout to deflake rmw_connext,1,[],https://github.com/ros2/rclpy/pull/449,https://github.com/mjcarroll,1,https://github.com/ros2/rclpy/pull/449,"I didn't see any duplication as in other tests, the following are just very substantial test files.
Based on a test local to my laptop, two test exceed the current 60 second timeout:
test_executor .....................   Passed   61.35 sec
test_node .........................   Passed  103.98 sec

And one is marginal:
test_time_source ..................   Passed   54.96 sec

Signed-off-by: Michael Carroll michael@openrobotics.org","I didn't see any duplication as in other tests, the following are just very substantial test files.
Based on a test local to my laptop, two test exceed the current 60 second timeout:
test_executor .....................   Passed   61.35 sec
test_node .........................   Passed  103.98 sec

And one is marginal:
test_time_source ..................   Passed   54.96 sec

Signed-off-by: Michael Carroll michael@openrobotics.org",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,449,2019-10-23T20:49:13Z,2019-10-23T21:38:49Z,2019-10-23T21:38:52Z,MERGED,True,1,1,1,https://github.com/mjcarroll,Expand test timeout to deflake rmw_connext,1,[],https://github.com/ros2/rclpy/pull/449,https://github.com/mjcarroll,2,https://github.com/ros2/rclpy/pull/449#issuecomment-545630519,"I didn't see any duplication as in other tests, the following are just very substantial test files.
Based on a test local to my laptop, two test exceed the current 60 second timeout:
test_executor .....................   Passed   61.35 sec
test_node .........................   Passed  103.98 sec

And one is marginal:
test_time_source ..................   Passed   54.96 sec

Signed-off-by: Michael Carroll michael@openrobotics.org",,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,449,2019-10-23T20:49:13Z,2019-10-23T21:38:49Z,2019-10-23T21:38:52Z,MERGED,True,1,1,1,https://github.com/mjcarroll,Expand test timeout to deflake rmw_connext,1,[],https://github.com/ros2/rclpy/pull/449,https://github.com/hidmic,3,https://github.com/ros2/rclpy/pull/449#issuecomment-545632919,"I didn't see any duplication as in other tests, the following are just very substantial test files.
Based on a test local to my laptop, two test exceed the current 60 second timeout:
test_executor .....................   Passed   61.35 sec
test_node .........................   Passed  103.98 sec

And one is marginal:
test_time_source ..................   Passed   54.96 sec

Signed-off-by: Michael Carroll michael@openrobotics.org","A duplicate of #448 ? Either is fine, let's see which one is less flaky :)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,449,2019-10-23T20:49:13Z,2019-10-23T21:38:49Z,2019-10-23T21:38:52Z,MERGED,True,1,1,1,https://github.com/mjcarroll,Expand test timeout to deflake rmw_connext,1,[],https://github.com/ros2/rclpy/pull/449,https://github.com/mjcarroll,4,https://github.com/ros2/rclpy/pull/449#issuecomment-545635915,"I didn't see any duplication as in other tests, the following are just very substantial test files.
Based on a test local to my laptop, two test exceed the current 60 second timeout:
test_executor .....................   Passed   61.35 sec
test_node .........................   Passed  103.98 sec

And one is marginal:
test_time_source ..................   Passed   54.96 sec

Signed-off-by: Michael Carroll michael@openrobotics.org","Whoops, didn't see that you had opened that, I found that you're going to need > 100 seconds in some cases, so your threshold may not be enough.",True,{'THUMBS_UP': ['https://github.com/hidmic']}
ros2/rclpy,https://github.com/ros2/rclpy,450,2019-10-24T00:10:39Z,2019-10-24T08:29:40Z,2019-10-24T08:30:03Z,CLOSED,False,1,1,1,https://github.com/werner-ne,Solves #446,2,[],https://github.com/ros2/rclpy/pull/450,https://github.com/werner-ne,1,https://github.com/ros2/rclpy/pull/450,,,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,450,2019-10-24T00:10:39Z,2019-10-24T08:29:40Z,2019-10-24T08:30:03Z,CLOSED,False,1,1,1,https://github.com/werner-ne,Solves #446,2,[],https://github.com/ros2/rclpy/pull/450,https://github.com/werner-ne,2,https://github.com/ros2/rclpy/pull/450#issuecomment-545689980,,Signed-off-by Werner.neubauer@siemens.com,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,450,2019-10-24T00:10:39Z,2019-10-24T08:29:40Z,2019-10-24T08:30:03Z,CLOSED,False,1,1,1,https://github.com/werner-ne,Solves #446,2,[],https://github.com/ros2/rclpy/pull/450,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/450#issuecomment-545690499,,"@werner-ne Mind signing off the commit messages? I think this will do it:
git rebase --signoff master",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,450,2019-10-24T00:10:39Z,2019-10-24T08:29:40Z,2019-10-24T08:30:03Z,CLOSED,False,1,1,1,https://github.com/werner-ne,Solves #446,2,[],https://github.com/ros2/rclpy/pull/450,https://github.com/werner-ne,4,https://github.com/ros2/rclpy/pull/450#issuecomment-545690813,,Sorry I am not at command line right now. Just in the browser and don't know how to do it here..,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,450,2019-10-24T00:10:39Z,2019-10-24T08:29:40Z,2019-10-24T08:30:03Z,CLOSED,False,1,1,1,https://github.com/werner-ne,Solves #446,2,[],https://github.com/ros2/rclpy/pull/450,https://github.com/werner-ne,5,https://github.com/ros2/rclpy/pull/450#issuecomment-545807773,,I'll try it a different way...,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,451,2019-10-24T12:51:00Z,2019-11-21T21:39:37Z,2019-11-21T21:39:37Z,MERGED,True,1,1,1,https://github.com/werner-ne,Send feedback callbacks properly in send_goal() of action client,1,[],https://github.com/ros2/rclpy/pull/451,https://github.com/werner-ne,1,https://github.com/ros2/rclpy/pull/451,"Fixes #446
Signed-off-by: Werner Neubauer werner.neubauer@siemens.com","Fixes #446
Signed-off-by: Werner Neubauer werner.neubauer@siemens.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,452,2019-10-24T15:01:11Z,2019-10-24T15:54:48Z,2019-10-24T15:54:51Z,MERGED,True,1,1,1,https://github.com/dirk-thomas,add missing exec depend on rcl_interfaces,1,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/452,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/452,Fixes ros2/rcl_interfaces#87.,Fixes ros2/rcl_interfaces#87.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,453,2019-10-24T17:42:22Z,2019-10-24T18:10:23Z,2019-10-24T18:10:27Z,MERGED,True,2,2,2,https://github.com/dirk-thomas,fix import to use builtin_interfaces.msg,1,['bug'],https://github.com/ros2/rclpy/pull/453,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/453,Fix functions using builtin_interfaces.msg.Duration / builtin_interfaces.msg.Time.,Fix functions using builtin_interfaces.msg.Duration / builtin_interfaces.msg.Time.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,454,2019-10-29T20:22:33Z,2020-02-14T20:23:25Z,2020-02-14T20:23:25Z,MERGED,True,772,13,10,https://github.com/jaisontj,Implement functions to get publisher and subcription informations like QoS policies from topic name,24,[],https://github.com/ros2/rclpy/pull/454,https://github.com/jaisontj,1,https://github.com/ros2/rclpy/pull/454,"NOTE: DO NOT MERGE until rmw #186,  rmw_implementation #72 and rcl #511 are merged.
This PR makes the necessary changes to implement this feature request. The RCLPY layer needs to expose functions to the ros2cli layer such that ros2 topic info <topic_name> can display publisher and subscriptions information for the given topic_name.
Summary of changes:

Added a new helper function in common.h/c to convert rmw_topic_info_array_t to a Python list of dictionaries.
Added  get_publishers_info_by_topic and get_subscriptions_info_by_topic in node.py
Added  rclpy_get_publishers_info_by_topic and
rclpy_get_subscriptions_information_by_topic in _rclpy.c
Added tests for node.get_publishers_info_by_topic and
node.get_subscriptions_info_by_topic

Related to issues in aws-roadmap #85","NOTE: DO NOT MERGE until rmw #186,  rmw_implementation #72 and rcl #511 are merged.
This PR makes the necessary changes to implement this feature request. The RCLPY layer needs to expose functions to the ros2cli layer such that ros2 topic info <topic_name> can display publisher and subscriptions information for the given topic_name.
Summary of changes:

Added a new helper function in common.h/c to convert rmw_topic_info_array_t to a Python list of dictionaries.
Added  get_publishers_info_by_topic and get_subscriptions_info_by_topic in node.py
Added  rclpy_get_publishers_info_by_topic and
rclpy_get_subscriptions_information_by_topic in _rclpy.c
Added tests for node.get_publishers_info_by_topic and
node.get_subscriptions_info_by_topic

Related to issues in aws-roadmap #85",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,454,2019-10-29T20:22:33Z,2020-02-14T20:23:25Z,2020-02-14T20:23:25Z,MERGED,True,772,13,10,https://github.com/jaisontj,Implement functions to get publisher and subcription informations like QoS policies from topic name,24,[],https://github.com/ros2/rclpy/pull/454,https://github.com/piraka9011,2,https://github.com/ros2/rclpy/pull/454#issuecomment-576772161,"NOTE: DO NOT MERGE until rmw #186,  rmw_implementation #72 and rcl #511 are merged.
This PR makes the necessary changes to implement this feature request. The RCLPY layer needs to expose functions to the ros2cli layer such that ros2 topic info <topic_name> can display publisher and subscriptions information for the given topic_name.
Summary of changes:

Added a new helper function in common.h/c to convert rmw_topic_info_array_t to a Python list of dictionaries.
Added  get_publishers_info_by_topic and get_subscriptions_info_by_topic in node.py
Added  rclpy_get_publishers_info_by_topic and
rclpy_get_subscriptions_information_by_topic in _rclpy.c
Added tests for node.get_publishers_info_by_topic and
node.get_subscriptions_info_by_topic

Related to issues in aws-roadmap #85",@ivanpauno @hidmic It looks like this is ready to merge?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,454,2019-10-29T20:22:33Z,2020-02-14T20:23:25Z,2020-02-14T20:23:25Z,MERGED,True,772,13,10,https://github.com/jaisontj,Implement functions to get publisher and subcription informations like QoS policies from topic name,24,[],https://github.com/ros2/rclpy/pull/454,https://github.com/wjwwood,3,https://github.com/ros2/rclpy/pull/454#issuecomment-576783618,"NOTE: DO NOT MERGE until rmw #186,  rmw_implementation #72 and rcl #511 are merged.
This PR makes the necessary changes to implement this feature request. The RCLPY layer needs to expose functions to the ros2cli layer such that ros2 topic info <topic_name> can display publisher and subscriptions information for the given topic_name.
Summary of changes:

Added a new helper function in common.h/c to convert rmw_topic_info_array_t to a Python list of dictionaries.
Added  get_publishers_info_by_topic and get_subscriptions_info_by_topic in node.py
Added  rclpy_get_publishers_info_by_topic and
rclpy_get_subscriptions_information_by_topic in _rclpy.c
Added tests for node.get_publishers_info_by_topic and
node.get_subscriptions_info_by_topic

Related to issues in aws-roadmap #85","This should be merged with rclcpp's version of the same thing, but not before.",True,{'THUMBS_UP': ['https://github.com/piraka9011']}
ros2/rclpy,https://github.com/ros2/rclpy,454,2019-10-29T20:22:33Z,2020-02-14T20:23:25Z,2020-02-14T20:23:25Z,MERGED,True,772,13,10,https://github.com/jaisontj,Implement functions to get publisher and subcription informations like QoS policies from topic name,24,[],https://github.com/ros2/rclpy/pull/454,https://github.com/wjwwood,4,https://github.com/ros2/rclpy/pull/454#issuecomment-576783859,"NOTE: DO NOT MERGE until rmw #186,  rmw_implementation #72 and rcl #511 are merged.
This PR makes the necessary changes to implement this feature request. The RCLPY layer needs to expose functions to the ros2cli layer such that ros2 topic info <topic_name> can display publisher and subscriptions information for the given topic_name.
Summary of changes:

Added a new helper function in common.h/c to convert rmw_topic_info_array_t to a Python list of dictionaries.
Added  get_publishers_info_by_topic and get_subscriptions_info_by_topic in node.py
Added  rclpy_get_publishers_info_by_topic and
rclpy_get_subscriptions_information_by_topic in _rclpy.c
Added tests for node.get_publishers_info_by_topic and
node.get_subscriptions_info_by_topic

Related to issues in aws-roadmap #85",This one I think: ros2/rclcpp#960,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,454,2019-10-29T20:22:33Z,2020-02-14T20:23:25Z,2020-02-14T20:23:25Z,MERGED,True,772,13,10,https://github.com/jaisontj,Implement functions to get publisher and subcription informations like QoS policies from topic name,24,[],https://github.com/ros2/rclpy/pull/454,https://github.com/mm318,5,https://github.com/ros2/rclpy/pull/454#issuecomment-576789089,"NOTE: DO NOT MERGE until rmw #186,  rmw_implementation #72 and rcl #511 are merged.
This PR makes the necessary changes to implement this feature request. The RCLPY layer needs to expose functions to the ros2cli layer such that ros2 topic info <topic_name> can display publisher and subscriptions information for the given topic_name.
Summary of changes:

Added a new helper function in common.h/c to convert rmw_topic_info_array_t to a Python list of dictionaries.
Added  get_publishers_info_by_topic and get_subscriptions_info_by_topic in node.py
Added  rclpy_get_publishers_info_by_topic and
rclpy_get_subscriptions_information_by_topic in _rclpy.c
Added tests for node.get_publishers_info_by_topic and
node.get_subscriptions_info_by_topic

Related to issues in aws-roadmap #85","This one I think: ros2/rclcpp#960

Yes, that is the one.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,454,2019-10-29T20:22:33Z,2020-02-14T20:23:25Z,2020-02-14T20:23:25Z,MERGED,True,772,13,10,https://github.com/jaisontj,Implement functions to get publisher and subcription informations like QoS policies from topic name,24,[],https://github.com/ros2/rclpy/pull/454,https://github.com/mm318,6,https://github.com/ros2/rclpy/pull/454#issuecomment-583342285,"NOTE: DO NOT MERGE until rmw #186,  rmw_implementation #72 and rcl #511 are merged.
This PR makes the necessary changes to implement this feature request. The RCLPY layer needs to expose functions to the ros2cli layer such that ros2 topic info <topic_name> can display publisher and subscriptions information for the given topic_name.
Summary of changes:

Added a new helper function in common.h/c to convert rmw_topic_info_array_t to a Python list of dictionaries.
Added  get_publishers_info_by_topic and get_subscriptions_info_by_topic in node.py
Added  rclpy_get_publishers_info_by_topic and
rclpy_get_subscriptions_information_by_topic in _rclpy.c
Added tests for node.get_publishers_info_by_topic and
node.get_subscriptions_info_by_topic

Related to issues in aws-roadmap #85",Sorry for the delay. I haven't been able to get around to finishing the rclpy implementation to match rclcpp. It will be finished by tomorrow.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,454,2019-10-29T20:22:33Z,2020-02-14T20:23:25Z,2020-02-14T20:23:25Z,MERGED,True,772,13,10,https://github.com/jaisontj,Implement functions to get publisher and subcription informations like QoS policies from topic name,24,[],https://github.com/ros2/rclpy/pull/454,https://github.com/mm318,7,https://github.com/ros2/rclpy/pull/454#issuecomment-583572488,"NOTE: DO NOT MERGE until rmw #186,  rmw_implementation #72 and rcl #511 are merged.
This PR makes the necessary changes to implement this feature request. The RCLPY layer needs to expose functions to the ros2cli layer such that ros2 topic info <topic_name> can display publisher and subscriptions information for the given topic_name.
Summary of changes:

Added a new helper function in common.h/c to convert rmw_topic_info_array_t to a Python list of dictionaries.
Added  get_publishers_info_by_topic and get_subscriptions_info_by_topic in node.py
Added  rclpy_get_publishers_info_by_topic and
rclpy_get_subscriptions_information_by_topic in _rclpy.c
Added tests for node.get_publishers_info_by_topic and
node.get_subscriptions_info_by_topic

Related to issues in aws-roadmap #85","I have added topic name remapping to _get_info_by_topic() in rclpy, so now it behaves like the rclcpp one. Please re-review, @wjwwood and @ivanpauno. Thanks!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,454,2019-10-29T20:22:33Z,2020-02-14T20:23:25Z,2020-02-14T20:23:25Z,MERGED,True,772,13,10,https://github.com/jaisontj,Implement functions to get publisher and subcription informations like QoS policies from topic name,24,[],https://github.com/ros2/rclpy/pull/454,https://github.com/ivanpauno,8,https://github.com/ros2/rclpy/pull/454#issuecomment-584138107,"NOTE: DO NOT MERGE until rmw #186,  rmw_implementation #72 and rcl #511 are merged.
This PR makes the necessary changes to implement this feature request. The RCLPY layer needs to expose functions to the ros2cli layer such that ros2 topic info <topic_name> can display publisher and subscriptions information for the given topic_name.
Summary of changes:

Added a new helper function in common.h/c to convert rmw_topic_info_array_t to a Python list of dictionaries.
Added  get_publishers_info_by_topic and get_subscriptions_info_by_topic in node.py
Added  rclpy_get_publishers_info_by_topic and
rclpy_get_subscriptions_information_by_topic in _rclpy.c
Added tests for node.get_publishers_info_by_topic and
node.get_subscriptions_info_by_topic

Related to issues in aws-roadmap #85","Linux 
Linux-aarch64 
macOS 
macOS",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,454,2019-10-29T20:22:33Z,2020-02-14T20:23:25Z,2020-02-14T20:23:25Z,MERGED,True,772,13,10,https://github.com/jaisontj,Implement functions to get publisher and subcription informations like QoS policies from topic name,24,[],https://github.com/ros2/rclpy/pull/454,https://github.com/ivanpauno,9,https://github.com/ros2/rclpy/pull/454#issuecomment-584174166,"NOTE: DO NOT MERGE until rmw #186,  rmw_implementation #72 and rcl #511 are merged.
This PR makes the necessary changes to implement this feature request. The RCLPY layer needs to expose functions to the ros2cli layer such that ros2 topic info <topic_name> can display publisher and subscriptions information for the given topic_name.
Summary of changes:

Added a new helper function in common.h/c to convert rmw_topic_info_array_t to a Python list of dictionaries.
Added  get_publishers_info_by_topic and get_subscriptions_info_by_topic in node.py
Added  rclpy_get_publishers_info_by_topic and
rclpy_get_subscriptions_information_by_topic in _rclpy.c
Added tests for node.get_publishers_info_by_topic and
node.get_subscriptions_info_by_topic

Related to issues in aws-roadmap #85",@mm318 can you check the build failures?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,454,2019-10-29T20:22:33Z,2020-02-14T20:23:25Z,2020-02-14T20:23:25Z,MERGED,True,772,13,10,https://github.com/jaisontj,Implement functions to get publisher and subcription informations like QoS policies from topic name,24,[],https://github.com/ros2/rclpy/pull/454,https://github.com/mm318,10,https://github.com/ros2/rclpy/pull/454#issuecomment-584176170,"NOTE: DO NOT MERGE until rmw #186,  rmw_implementation #72 and rcl #511 are merged.
This PR makes the necessary changes to implement this feature request. The RCLPY layer needs to expose functions to the ros2cli layer such that ros2 topic info <topic_name> can display publisher and subscriptions information for the given topic_name.
Summary of changes:

Added a new helper function in common.h/c to convert rmw_topic_info_array_t to a Python list of dictionaries.
Added  get_publishers_info_by_topic and get_subscriptions_info_by_topic in node.py
Added  rclpy_get_publishers_info_by_topic and
rclpy_get_subscriptions_information_by_topic in _rclpy.c
Added tests for node.get_publishers_info_by_topic and
node.get_subscriptions_info_by_topic

Related to issues in aws-roadmap #85","@mm318 can you check the build failures?

Hi @ivanpauno, did you include the changes in ros2/rcl#558?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,454,2019-10-29T20:22:33Z,2020-02-14T20:23:25Z,2020-02-14T20:23:25Z,MERGED,True,772,13,10,https://github.com/jaisontj,Implement functions to get publisher and subcription informations like QoS policies from topic name,24,[],https://github.com/ros2/rclpy/pull/454,https://github.com/ivanpauno,11,https://github.com/ros2/rclpy/pull/454#issuecomment-584184164,"NOTE: DO NOT MERGE until rmw #186,  rmw_implementation #72 and rcl #511 are merged.
This PR makes the necessary changes to implement this feature request. The RCLPY layer needs to expose functions to the ros2cli layer such that ros2 topic info <topic_name> can display publisher and subscriptions information for the given topic_name.
Summary of changes:

Added a new helper function in common.h/c to convert rmw_topic_info_array_t to a Python list of dictionaries.
Added  get_publishers_info_by_topic and get_subscriptions_info_by_topic in node.py
Added  rclpy_get_publishers_info_by_topic and
rclpy_get_subscriptions_information_by_topic in _rclpy.c
Added tests for node.get_publishers_info_by_topic and
node.get_subscriptions_info_by_topic

Related to issues in aws-roadmap #85","Hi @ivanpauno, did you include the changes in ros2/rcl#558?

Thanks! I didn't remember about that PR.
Another run:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,454,2019-10-29T20:22:33Z,2020-02-14T20:23:25Z,2020-02-14T20:23:25Z,MERGED,True,772,13,10,https://github.com/jaisontj,Implement functions to get publisher and subcription informations like QoS policies from topic name,24,[],https://github.com/ros2/rclpy/pull/454,https://github.com/ivanpauno,12,https://github.com/ros2/rclpy/pull/454#issuecomment-584334750,"NOTE: DO NOT MERGE until rmw #186,  rmw_implementation #72 and rcl #511 are merged.
This PR makes the necessary changes to implement this feature request. The RCLPY layer needs to expose functions to the ros2cli layer such that ros2 topic info <topic_name> can display publisher and subscriptions information for the given topic_name.
Summary of changes:

Added a new helper function in common.h/c to convert rmw_topic_info_array_t to a Python list of dictionaries.
Added  get_publishers_info_by_topic and get_subscriptions_info_by_topic in node.py
Added  rclpy_get_publishers_info_by_topic and
rclpy_get_subscriptions_information_by_topic in _rclpy.c
Added tests for node.get_publishers_info_by_topic and
node.get_subscriptions_info_by_topic

Related to issues in aws-roadmap #85","@mm318 The errors seem to be due to the following:

Linters errors have probably already been solved in master, can you rebase?
macOS failure is unrelated (I will run it again when that's fixed).
Windows failures are because of RCLCPP PUBLIC missing in some places.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,454,2019-10-29T20:22:33Z,2020-02-14T20:23:25Z,2020-02-14T20:23:25Z,MERGED,True,772,13,10,https://github.com/jaisontj,Implement functions to get publisher and subcription informations like QoS policies from topic name,24,[],https://github.com/ros2/rclpy/pull/454,https://github.com/mm318,13,https://github.com/ros2/rclpy/pull/454#issuecomment-585032587,"NOTE: DO NOT MERGE until rmw #186,  rmw_implementation #72 and rcl #511 are merged.
This PR makes the necessary changes to implement this feature request. The RCLPY layer needs to expose functions to the ros2cli layer such that ros2 topic info <topic_name> can display publisher and subscriptions information for the given topic_name.
Summary of changes:

Added a new helper function in common.h/c to convert rmw_topic_info_array_t to a Python list of dictionaries.
Added  get_publishers_info_by_topic and get_subscriptions_info_by_topic in node.py
Added  rclpy_get_publishers_info_by_topic and
rclpy_get_subscriptions_information_by_topic in _rclpy.c
Added tests for node.get_publishers_info_by_topic and
node.get_subscriptions_info_by_topic

Related to issues in aws-roadmap #85",The issues found on Linux and Windows should be fixed now.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,454,2019-10-29T20:22:33Z,2020-02-14T20:23:25Z,2020-02-14T20:23:25Z,MERGED,True,772,13,10,https://github.com/jaisontj,Implement functions to get publisher and subcription informations like QoS policies from topic name,24,[],https://github.com/ros2/rclpy/pull/454,https://github.com/ivanpauno,14,https://github.com/ros2/rclpy/pull/454#issuecomment-585214475,"NOTE: DO NOT MERGE until rmw #186,  rmw_implementation #72 and rcl #511 are merged.
This PR makes the necessary changes to implement this feature request. The RCLPY layer needs to expose functions to the ros2cli layer such that ros2 topic info <topic_name> can display publisher and subscriptions information for the given topic_name.
Summary of changes:

Added a new helper function in common.h/c to convert rmw_topic_info_array_t to a Python list of dictionaries.
Added  get_publishers_info_by_topic and get_subscriptions_info_by_topic in node.py
Added  rclpy_get_publishers_info_by_topic and
rclpy_get_subscriptions_information_by_topic in _rclpy.c
Added tests for node.get_publishers_info_by_topic and
node.get_subscriptions_info_by_topic

Related to issues in aws-roadmap #85","Linux 
Linux-aarch64 
macOS  (unrelated problem in macOS CI)
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,454,2019-10-29T20:22:33Z,2020-02-14T20:23:25Z,2020-02-14T20:23:25Z,MERGED,True,772,13,10,https://github.com/jaisontj,Implement functions to get publisher and subcription informations like QoS policies from topic name,24,[],https://github.com/ros2/rclpy/pull/454,https://github.com/wjwwood,15,https://github.com/ros2/rclpy/pull/454#issuecomment-585389237,"NOTE: DO NOT MERGE until rmw #186,  rmw_implementation #72 and rcl #511 are merged.
This PR makes the necessary changes to implement this feature request. The RCLPY layer needs to expose functions to the ros2cli layer such that ros2 topic info <topic_name> can display publisher and subscriptions information for the given topic_name.
Summary of changes:

Added a new helper function in common.h/c to convert rmw_topic_info_array_t to a Python list of dictionaries.
Added  get_publishers_info_by_topic and get_subscriptions_info_by_topic in node.py
Added  rclpy_get_publishers_info_by_topic and
rclpy_get_subscriptions_information_by_topic in _rclpy.c
Added tests for node.get_publishers_info_by_topic and
node.get_subscriptions_info_by_topic

Related to issues in aws-roadmap #85","Once the fastrtps issue is fixed, can you re-run these @ivanpauno?",True,{'THUMBS_UP': ['https://github.com/ivanpauno']}
ros2/rclpy,https://github.com/ros2/rclpy,454,2019-10-29T20:22:33Z,2020-02-14T20:23:25Z,2020-02-14T20:23:25Z,MERGED,True,772,13,10,https://github.com/jaisontj,Implement functions to get publisher and subcription informations like QoS policies from topic name,24,[],https://github.com/ros2/rclpy/pull/454,https://github.com/ivanpauno,16,https://github.com/ros2/rclpy/pull/454#issuecomment-585767994,"NOTE: DO NOT MERGE until rmw #186,  rmw_implementation #72 and rcl #511 are merged.
This PR makes the necessary changes to implement this feature request. The RCLPY layer needs to expose functions to the ros2cli layer such that ros2 topic info <topic_name> can display publisher and subscriptions information for the given topic_name.
Summary of changes:

Added a new helper function in common.h/c to convert rmw_topic_info_array_t to a Python list of dictionaries.
Added  get_publishers_info_by_topic and get_subscriptions_info_by_topic in node.py
Added  rclpy_get_publishers_info_by_topic and
rclpy_get_subscriptions_information_by_topic in _rclpy.c
Added tests for node.get_publishers_info_by_topic and
node.get_subscriptions_info_by_topic

Related to issues in aws-roadmap #85","Linux 
Linux-aarch64 
macOS  (unrelated failures)
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,454,2019-10-29T20:22:33Z,2020-02-14T20:23:25Z,2020-02-14T20:23:25Z,MERGED,True,772,13,10,https://github.com/jaisontj,Implement functions to get publisher and subcription informations like QoS policies from topic name,24,[],https://github.com/ros2/rclpy/pull/454,https://github.com/mm318,17,https://github.com/ros2/rclpy/pull/454#issuecomment-586435299,"NOTE: DO NOT MERGE until rmw #186,  rmw_implementation #72 and rcl #511 are merged.
This PR makes the necessary changes to implement this feature request. The RCLPY layer needs to expose functions to the ros2cli layer such that ros2 topic info <topic_name> can display publisher and subscriptions information for the given topic_name.
Summary of changes:

Added a new helper function in common.h/c to convert rmw_topic_info_array_t to a Python list of dictionaries.
Added  get_publishers_info_by_topic and get_subscriptions_info_by_topic in node.py
Added  rclpy_get_publishers_info_by_topic and
rclpy_get_subscriptions_information_by_topic in _rclpy.c
Added tests for node.get_publishers_info_by_topic and
node.get_subscriptions_info_by_topic

Related to issues in aws-roadmap #85",I think the test failures in the Windows build are unrelated. What do you think?,True,{'THUMBS_UP': ['https://github.com/ivanpauno']}
ros2/rclpy,https://github.com/ros2/rclpy,454,2019-10-29T20:22:33Z,2020-02-14T20:23:25Z,2020-02-14T20:23:25Z,MERGED,True,772,13,10,https://github.com/jaisontj,Implement functions to get publisher and subcription informations like QoS policies from topic name,24,[],https://github.com/ros2/rclpy/pull/454,https://github.com/ivanpauno,18,https://github.com/ros2/rclpy/pull/454#issuecomment-586441292,"NOTE: DO NOT MERGE until rmw #186,  rmw_implementation #72 and rcl #511 are merged.
This PR makes the necessary changes to implement this feature request. The RCLPY layer needs to expose functions to the ros2cli layer such that ros2 topic info <topic_name> can display publisher and subscriptions information for the given topic_name.
Summary of changes:

Added a new helper function in common.h/c to convert rmw_topic_info_array_t to a Python list of dictionaries.
Added  get_publishers_info_by_topic and get_subscriptions_info_by_topic in node.py
Added  rclpy_get_publishers_info_by_topic and
rclpy_get_subscriptions_information_by_topic in _rclpy.c
Added tests for node.get_publishers_info_by_topic and
node.get_subscriptions_info_by_topic

Related to issues in aws-roadmap #85","I think the test failures in the Windows build are unrelated. What do you think?

Yes, I'm wating the macOS job.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,454,2019-10-29T20:22:33Z,2020-02-14T20:23:25Z,2020-02-14T20:23:25Z,MERGED,True,772,13,10,https://github.com/jaisontj,Implement functions to get publisher and subcription informations like QoS policies from topic name,24,[],https://github.com/ros2/rclpy/pull/454,https://github.com/ivanpauno,19,https://github.com/ros2/rclpy/pull/454#issuecomment-586458061,"NOTE: DO NOT MERGE until rmw #186,  rmw_implementation #72 and rcl #511 are merged.
This PR makes the necessary changes to implement this feature request. The RCLPY layer needs to expose functions to the ros2cli layer such that ros2 topic info <topic_name> can display publisher and subscriptions information for the given topic_name.
Summary of changes:

Added a new helper function in common.h/c to convert rmw_topic_info_array_t to a Python list of dictionaries.
Added  get_publishers_info_by_topic and get_subscriptions_info_by_topic in node.py
Added  rclpy_get_publishers_info_by_topic and
rclpy_get_subscriptions_information_by_topic in _rclpy.c
Added tests for node.get_publishers_info_by_topic and
node.get_subscriptions_info_by_topic

Related to issues in aws-roadmap #85",Merging! Thanks @jaisontj @mm318 for pushing this!!,True,{'HOORAY': ['https://github.com/mm318']}
ros2/rclpy,https://github.com/ros2/rclpy,455,2019-10-30T14:31:18Z,2019-11-12T20:45:50Z,2019-11-12T20:45:54Z,MERGED,True,3,0,1,https://github.com/BMarchi,Get proper parameters with prefixes without dot separator,1,[],https://github.com/ros2/rclpy/pull/455,https://github.com/BMarchi,1,https://github.com/ros2/rclpy/pull/455,"For parameters without a ""."" prefix, the code wasn't working as it should. Connected to ros2/ros2cli#389","For parameters without a ""."" prefix, the code wasn't working as it should. Connected to ros2/ros2cli#389",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,455,2019-10-30T14:31:18Z,2019-11-12T20:45:50Z,2019-11-12T20:45:54Z,MERGED,True,3,0,1,https://github.com/BMarchi,Get proper parameters with prefixes without dot separator,1,[],https://github.com/ros2/rclpy/pull/455,https://github.com/BMarchi,2,https://github.com/ros2/rclpy/pull/455#issuecomment-553020754,"For parameters without a ""."" prefix, the code wasn't working as it should. Connected to ros2/ros2cli#389",What do you mean by sanity linter?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,455,2019-10-30T14:31:18Z,2019-11-12T20:45:50Z,2019-11-12T20:45:54Z,MERGED,True,3,0,1,https://github.com/BMarchi,Get proper parameters with prefixes without dot separator,1,[],https://github.com/ros2/rclpy/pull/455,https://github.com/hidmic,3,https://github.com/ros2/rclpy/pull/455#issuecomment-553031789,"For parameters without a ""."" prefix, the code wasn't working as it should. Connected to ros2/ros2cli#389","What do you mean by sanity linter?

Even if no tests are available, do a CI run on e.g. Linux to make sure at least linters are passing.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,455,2019-10-30T14:31:18Z,2019-11-12T20:45:50Z,2019-11-12T20:45:54Z,MERGED,True,3,0,1,https://github.com/BMarchi,Get proper parameters with prefixes without dot separator,1,[],https://github.com/ros2/rclpy/pull/455,https://github.com/mjcarroll,4,https://github.com/ros2/rclpy/pull/455#issuecomment-553033477,"For parameters without a ""."" prefix, the code wasn't working as it should. Connected to ros2/ros2cli#389",The Epr job runs linters.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,455,2019-10-30T14:31:18Z,2019-11-12T20:45:50Z,2019-11-12T20:45:54Z,MERGED,True,3,0,1,https://github.com/BMarchi,Get proper parameters with prefixes without dot separator,1,[],https://github.com/ros2/rclpy/pull/455,https://github.com/hidmic,5,https://github.com/ros2/rclpy/pull/455#issuecomment-553035028,"For parameters without a ""."" prefix, the code wasn't working as it should. Connected to ros2/ros2cli#389","Oh, that's right. Then go ahead if the ROSBoss approves.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,456,2019-11-07T22:55:58Z,2019-11-13T14:06:22Z,2019-11-13T14:06:26Z,MERGED,True,14,6,1,https://github.com/nuclearsandwich,Expressly destroy a node's objects before the node.,5,['in progress'],https://github.com/ros2/rclpy/pull/456,https://github.com/nuclearsandwich,1,https://github.com/ros2/rclpy/pull/456,"This seems to reduce hangs during test runs described in
ros2/build_farmer#248.
Another few hours of testing will convince me to strengthen that statement.
The handles corresponding to the destroyed objects should be getting
destroyed explicitly when self.handle.destroy() is called below. It
seems however that when running with Fast-RTPS it's possible to get into
a state where multiple threads are waiting on futexes and none can move
forward. The rclpy context of this apparent deadlock is while clearing
a node's list of publishers or services (possibly others, although
publishers and services were the only ones observed).
I consider this patch to be a workaround rather than a fix as I'm not particularly proud of how little I understand why the existing destruction handling is insufficient.
I think there may either be a race condition between the rcl/rmw layer
and the rmw implementation layer which is being tripped by the
haphazardness of Python's garbage collector or there is a logical
problem with the handle destruction ordering in rclpy that only
Fast-RTPS is sensitive to. A further possibility is to play around with pausing the garbage collector and triggering it at explicit points to see if that changes results at all.","This seems to reduce hangs during test runs described in
ros2/build_farmer#248.
Another few hours of testing will convince me to strengthen that statement.
The handles corresponding to the destroyed objects should be getting
destroyed explicitly when self.handle.destroy() is called below. It
seems however that when running with Fast-RTPS it's possible to get into
a state where multiple threads are waiting on futexes and none can move
forward. The rclpy context of this apparent deadlock is while clearing
a node's list of publishers or services (possibly others, although
publishers and services were the only ones observed).
I consider this patch to be a workaround rather than a fix as I'm not particularly proud of how little I understand why the existing destruction handling is insufficient.
I think there may either be a race condition between the rcl/rmw layer
and the rmw implementation layer which is being tripped by the
haphazardness of Python's garbage collector or there is a logical
problem with the handle destruction ordering in rclpy that only
Fast-RTPS is sensitive to. A further possibility is to play around with pausing the garbage collector and triggering it at explicit points to see if that changes results at all.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,456,2019-11-07T22:55:58Z,2019-11-13T14:06:22Z,2019-11-13T14:06:26Z,MERGED,True,14,6,1,https://github.com/nuclearsandwich,Expressly destroy a node's objects before the node.,5,['in progress'],https://github.com/ros2/rclpy/pull/456,https://github.com/nuclearsandwich,2,https://github.com/ros2/rclpy/pull/456#issuecomment-551304886,"This seems to reduce hangs during test runs described in
ros2/build_farmer#248.
Another few hours of testing will convince me to strengthen that statement.
The handles corresponding to the destroyed objects should be getting
destroyed explicitly when self.handle.destroy() is called below. It
seems however that when running with Fast-RTPS it's possible to get into
a state where multiple threads are waiting on futexes and none can move
forward. The rclpy context of this apparent deadlock is while clearing
a node's list of publishers or services (possibly others, although
publishers and services were the only ones observed).
I consider this patch to be a workaround rather than a fix as I'm not particularly proud of how little I understand why the existing destruction handling is insufficient.
I think there may either be a race condition between the rcl/rmw layer
and the rmw implementation layer which is being tripped by the
haphazardness of Python's garbage collector or there is a logical
problem with the handle destruction ordering in rclpy that only
Fast-RTPS is sensitive to. A further possibility is to play around with pausing the garbage collector and triggering it at explicit points to see if that changes results at all.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,456,2019-11-07T22:55:58Z,2019-11-13T14:06:22Z,2019-11-13T14:06:26Z,MERGED,True,14,6,1,https://github.com/nuclearsandwich,Expressly destroy a node's objects before the node.,5,['in progress'],https://github.com/ros2/rclpy/pull/456,https://github.com/mjcarroll,3,https://github.com/ros2/rclpy/pull/456#issuecomment-551305259,"This seems to reduce hangs during test runs described in
ros2/build_farmer#248.
Another few hours of testing will convince me to strengthen that statement.
The handles corresponding to the destroyed objects should be getting
destroyed explicitly when self.handle.destroy() is called below. It
seems however that when running with Fast-RTPS it's possible to get into
a state where multiple threads are waiting on futexes and none can move
forward. The rclpy context of this apparent deadlock is while clearing
a node's list of publishers or services (possibly others, although
publishers and services were the only ones observed).
I consider this patch to be a workaround rather than a fix as I'm not particularly proud of how little I understand why the existing destruction handling is insufficient.
I think there may either be a race condition between the rcl/rmw layer
and the rmw implementation layer which is being tripped by the
haphazardness of Python's garbage collector or there is a logical
problem with the handle destruction ordering in rclpy that only
Fast-RTPS is sensitive to. A further possibility is to play around with pausing the garbage collector and triggering it at explicit points to see if that changes results at all.","This doesn't seem outrageous. It does seem like there may be a more elegant solution, but it probably requires some arcane knowledge of Python garbage collection's interactions with C extensions.  Unless @sloretz has any immediate thoughts, I'm good with merging this + adding a tracking issue for a longer-term solution.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,456,2019-11-07T22:55:58Z,2019-11-13T14:06:22Z,2019-11-13T14:06:26Z,MERGED,True,14,6,1,https://github.com/nuclearsandwich,Expressly destroy a node's objects before the node.,5,['in progress'],https://github.com/ros2/rclpy/pull/456,https://github.com/dirk-thomas,4,https://github.com/ros2/rclpy/pull/456#issuecomment-551319016,"This seems to reduce hangs during test runs described in
ros2/build_farmer#248.
Another few hours of testing will convince me to strengthen that statement.
The handles corresponding to the destroyed objects should be getting
destroyed explicitly when self.handle.destroy() is called below. It
seems however that when running with Fast-RTPS it's possible to get into
a state where multiple threads are waiting on futexes and none can move
forward. The rclpy context of this apparent deadlock is while clearing
a node's list of publishers or services (possibly others, although
publishers and services were the only ones observed).
I consider this patch to be a workaround rather than a fix as I'm not particularly proud of how little I understand why the existing destruction handling is insufficient.
I think there may either be a race condition between the rcl/rmw layer
and the rmw implementation layer which is being tripped by the
haphazardness of Python's garbage collector or there is a logical
problem with the handle destruction ordering in rclpy that only
Fast-RTPS is sensitive to. A further possibility is to play around with pausing the garbage collector and triggering it at explicit points to see if that changes results at all.",The new logic seems to remove items for the collections while iterating over them which shouldn't be done. The loops should be changed into while self._[name]: to avoid that.,True,{'THUMBS_UP': ['https://github.com/nuclearsandwich']}
ros2/rclpy,https://github.com/ros2/rclpy,456,2019-11-07T22:55:58Z,2019-11-13T14:06:22Z,2019-11-13T14:06:26Z,MERGED,True,14,6,1,https://github.com/nuclearsandwich,Expressly destroy a node's objects before the node.,5,['in progress'],https://github.com/ros2/rclpy/pull/456,https://github.com/nuclearsandwich,5,https://github.com/ros2/rclpy/pull/456#issuecomment-551768332,"This seems to reduce hangs during test runs described in
ros2/build_farmer#248.
Another few hours of testing will convince me to strengthen that statement.
The handles corresponding to the destroyed objects should be getting
destroyed explicitly when self.handle.destroy() is called below. It
seems however that when running with Fast-RTPS it's possible to get into
a state where multiple threads are waiting on futexes and none can move
forward. The rclpy context of this apparent deadlock is while clearing
a node's list of publishers or services (possibly others, although
publishers and services were the only ones observed).
I consider this patch to be a workaround rather than a fix as I'm not particularly proud of how little I understand why the existing destruction handling is insufficient.
I think there may either be a race condition between the rcl/rmw layer
and the rmw implementation layer which is being tripped by the
haphazardness of Python's garbage collector or there is a logical
problem with the handle destruction ordering in rclpy that only
Fast-RTPS is sensitive to. A further possibility is to play around with pausing the garbage collector and triggering it at explicit points to see if that changes results at all.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,456,2019-11-07T22:55:58Z,2019-11-13T14:06:22Z,2019-11-13T14:06:26Z,MERGED,True,14,6,1,https://github.com/nuclearsandwich,Expressly destroy a node's objects before the node.,5,['in progress'],https://github.com/ros2/rclpy/pull/456,https://github.com/nuclearsandwich,6,https://github.com/ros2/rclpy/pull/456#issuecomment-551902080,"This seems to reduce hangs during test runs described in
ros2/build_farmer#248.
Another few hours of testing will convince me to strengthen that statement.
The handles corresponding to the destroyed objects should be getting
destroyed explicitly when self.handle.destroy() is called below. It
seems however that when running with Fast-RTPS it's possible to get into
a state where multiple threads are waiting on futexes and none can move
forward. The rclpy context of this apparent deadlock is while clearing
a node's list of publishers or services (possibly others, although
publishers and services were the only ones observed).
I consider this patch to be a workaround rather than a fix as I'm not particularly proud of how little I understand why the existing destruction handling is insufficient.
I think there may either be a race condition between the rcl/rmw layer
and the rmw implementation layer which is being tripped by the
haphazardness of Python's garbage collector or there is a logical
problem with the handle destruction ordering in rclpy that only
Fast-RTPS is sensitive to. A further possibility is to play around with pausing the garbage collector and triggering it at explicit points to see if that changes results at all.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,456,2019-11-07T22:55:58Z,2019-11-13T14:06:22Z,2019-11-13T14:06:26Z,MERGED,True,14,6,1,https://github.com/nuclearsandwich,Expressly destroy a node's objects before the node.,5,['in progress'],https://github.com/ros2/rclpy/pull/456,https://github.com/nuclearsandwich,7,https://github.com/ros2/rclpy/pull/456#issuecomment-551998210,"This seems to reduce hangs during test runs described in
ros2/build_farmer#248.
Another few hours of testing will convince me to strengthen that statement.
The handles corresponding to the destroyed objects should be getting
destroyed explicitly when self.handle.destroy() is called below. It
seems however that when running with Fast-RTPS it's possible to get into
a state where multiple threads are waiting on futexes and none can move
forward. The rclpy context of this apparent deadlock is while clearing
a node's list of publishers or services (possibly others, although
publishers and services were the only ones observed).
I consider this patch to be a workaround rather than a fix as I'm not particularly proud of how little I understand why the existing destruction handling is insufficient.
I think there may either be a race condition between the rcl/rmw layer
and the rmw implementation layer which is being tripped by the
haphazardness of Python's garbage collector or there is a logical
problem with the handle destruction ordering in rclpy that only
Fast-RTPS is sensitive to. A further possibility is to play around with pausing the garbage collector and triggering it at explicit points to see if that changes results at all.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,456,2019-11-07T22:55:58Z,2019-11-13T14:06:22Z,2019-11-13T14:06:26Z,MERGED,True,14,6,1,https://github.com/nuclearsandwich,Expressly destroy a node's objects before the node.,5,['in progress'],https://github.com/ros2/rclpy/pull/456,https://github.com/nuclearsandwich,8,https://github.com/ros2/rclpy/pull/456#issuecomment-552063345,"This seems to reduce hangs during test runs described in
ros2/build_farmer#248.
Another few hours of testing will convince me to strengthen that statement.
The handles corresponding to the destroyed objects should be getting
destroyed explicitly when self.handle.destroy() is called below. It
seems however that when running with Fast-RTPS it's possible to get into
a state where multiple threads are waiting on futexes and none can move
forward. The rclpy context of this apparent deadlock is while clearing
a node's list of publishers or services (possibly others, although
publishers and services were the only ones observed).
I consider this patch to be a workaround rather than a fix as I'm not particularly proud of how little I understand why the existing destruction handling is insufficient.
I think there may either be a race condition between the rcl/rmw layer
and the rmw implementation layer which is being tripped by the
haphazardness of Python's garbage collector or there is a logical
problem with the handle destruction ordering in rclpy that only
Fast-RTPS is sensitive to. A further possibility is to play around with pausing the garbage collector and triggering it at explicit points to see if that changes results at all.","I don't know what causes the hang or how this works around it.

I've also been dissatisfied with this solution. After discussion with @sloretz I've started another experiment running with Python's GC disabled before 1461 and enabled after self.handle.destroy(). That has also seemingly stopped the hang from occurring over the last ~50 test runs which means we might need to look more closely at the handle destruction logic.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,456,2019-11-07T22:55:58Z,2019-11-13T14:06:22Z,2019-11-13T14:06:26Z,MERGED,True,14,6,1,https://github.com/nuclearsandwich,Expressly destroy a node's objects before the node.,5,['in progress'],https://github.com/ros2/rclpy/pull/456,https://github.com/nuclearsandwich,9,https://github.com/ros2/rclpy/pull/456#issuecomment-552504625,"This seems to reduce hangs during test runs described in
ros2/build_farmer#248.
Another few hours of testing will convince me to strengthen that statement.
The handles corresponding to the destroyed objects should be getting
destroyed explicitly when self.handle.destroy() is called below. It
seems however that when running with Fast-RTPS it's possible to get into
a state where multiple threads are waiting on futexes and none can move
forward. The rclpy context of this apparent deadlock is while clearing
a node's list of publishers or services (possibly others, although
publishers and services were the only ones observed).
I consider this patch to be a workaround rather than a fix as I'm not particularly proud of how little I understand why the existing destruction handling is insufficient.
I think there may either be a race condition between the rcl/rmw layer
and the rmw implementation layer which is being tripped by the
haphazardness of Python's garbage collector or there is a logical
problem with the handle destruction ordering in rclpy that only
Fast-RTPS is sensitive to. A further possibility is to play around with pausing the garbage collector and triggering it at explicit points to see if that changes results at all.","I ran experimental tests most of the day Saturday and I was able to reproduce a hang using this branch of rclpy with rmw_cyclonedds_cpp as well. Although it's in a slightly different place.
In this gdb log thread 2 is stuck during capsule destruction in a futex down in cyclonedds.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,456,2019-11-07T22:55:58Z,2019-11-13T14:06:22Z,2019-11-13T14:06:26Z,MERGED,True,14,6,1,https://github.com/nuclearsandwich,Expressly destroy a node's objects before the node.,5,['in progress'],https://github.com/ros2/rclpy/pull/456,https://github.com/nuclearsandwich,10,https://github.com/ros2/rclpy/pull/456#issuecomment-552963158,"This seems to reduce hangs during test runs described in
ros2/build_farmer#248.
Another few hours of testing will convince me to strengthen that statement.
The handles corresponding to the destroyed objects should be getting
destroyed explicitly when self.handle.destroy() is called below. It
seems however that when running with Fast-RTPS it's possible to get into
a state where multiple threads are waiting on futexes and none can move
forward. The rclpy context of this apparent deadlock is while clearing
a node's list of publishers or services (possibly others, although
publishers and services were the only ones observed).
I consider this patch to be a workaround rather than a fix as I'm not particularly proud of how little I understand why the existing destruction handling is insufficient.
I think there may either be a race condition between the rcl/rmw layer
and the rmw implementation layer which is being tripped by the
haphazardness of Python's garbage collector or there is a logical
problem with the handle destruction ordering in rclpy that only
Fast-RTPS is sensitive to. A further possibility is to play around with pausing the garbage collector and triggering it at explicit points to see if that changes results at all.","@hidmic and I dove into this today and we couldn't pinpoint a reason for the hang. It is still possible to hang with even with this PR although the incidence rate is lower.
We did a couple of experiments trying to reproduce the hang outside of launch tests using multiple threads and rclpy but were unable to do so.
I do have a bit more detail from the current reproduction since the destruction doesn't occur as part of a garbage collection. In python, we're inside Handle.__destroy_self
 192        def __destroy_self(self):
 193            with self.__rlock:
 194                # Calls pycapsule destructor
>195                _rclpy_capsule.rclpy_pycapsule_destroy(self.__capsule)
 196                # Call post-destroy callbacks
 197                while self.__destroy_callbacks:
 198                    self.__destroy_callbacks.pop()(self)
 199                # get rid of references to other handles to break reference cycles
 200                del self.__required_handles

and in the C context we can see the pycapsule destructor calling rcl_publisher_fini which is carrying us into Fast-RTPS internals where we're stuck waiting for a lock:
#0  0x00007f40703f19f3 in futex_wait_cancelable (private=<optimized out>, expected=0, futex_word=0x1f77a04) at ../sysdeps/unix/sysv/linux/futex-internal.h:88
#1  __pthread_cond_wait_common (abstime=0x0, mutex=0x1f779b0, cond=0x1f779d8) at pthread_cond_wait.c:502
#2  __pthread_cond_wait (cond=0x1f779d8, mutex=0x1f779b0) at pthread_cond_wait.c:655
#3  0x00007f40632a5951 in eprosima::fastrtps::TimedConditionVariable::wait<std::timed_mutex>(std::unique_lock<std::timed_mutex>&, std::function<bool ()>) (this=0x1f779d8, lock=..., predicate=...)
    at /home/osrf/debug_ws/src/eProsima/Fast-RTPS/include/fastrtps/rtps/resources/../../utils/TimedConditionVariable.hpp:79
#4  0x00007f406329fd0e in eprosima::fastrtps::rtps::ResourceEvent::unregister_timer (this=0x1f779a0, event=0x20deb20) at /home/osrf/debug_ws/src/eProsima/Fast-RTPS/src/cpp/rtps/resources/ResourceEvent.cpp:101
#5  0x00007f40632a8962 in eprosima::fastrtps::rtps::TimedEvent::~TimedEvent (this=0x1797100, __in_chrg=<optimized out>) at /home/osrf/debug_ws/src/eProsima/Fast-RTPS/src/cpp/rtps/resources/TimedEvent.cpp:42
#6  0x00007f40632a89a0 in eprosima::fastrtps::rtps::TimedEvent::~TimedEvent (this=0x1797100, __in_chrg=<optimized out>) at /home/osrf/debug_ws/src/eProsima/Fast-RTPS/src/cpp/rtps/resources/TimedEvent.cpp:44
#7  0x00007f4063367911 in eprosima::fastrtps::PublisherImpl::~PublisherImpl (this=0x20cef00, __in_chrg=<optimized out>) at /home/osrf/debug_ws/src/eProsima/Fast-RTPS/src/cpp/publisher/PublisherImpl.cpp:105
#8  0x00007f40633679ec in eprosima::fastrtps::PublisherImpl::~PublisherImpl (this=0x20cef00, __in_chrg=<optimized out>) at /home/osrf/debug_ws/src/eProsima/Fast-RTPS/src/cpp/publisher/PublisherImpl.cpp:115
#9  0x00007f406335a689 in eprosima::fastrtps::ParticipantImpl::removePublisher (this=0x1f16450, pub=0x18f46c0) at /home/osrf/debug_ws/src/eProsima/Fast-RTPS/src/cpp/participant/ParticipantImpl.cpp:91
#10 0x00007f406334e85b in eprosima::fastrtps::Domain::removePublisher (pub=0x18f46c0) at /home/osrf/debug_ws/src/eProsima/Fast-RTPS/src/cpp/Domain.cpp:116
#11 0x00007f4063bf99e3 in rmw_fastrtps_shared_cpp::__rmw_destroy_publisher (identifier=0x7f406427fc17 ""rmw_fastrtps_cpp"", node=0x191e3b0, publisher=0x162e0d0)
    at /home/osrf/debug_ws/src/ros2/rmw_fastrtps/rmw_fastrtps_shared_cpp/src/rmw_publisher.cpp:66
#12 0x00007f4064274f8f in rmw_destroy_publisher (node=0x191e3b0, publisher=0x162e0d0) at /home/osrf/debug_ws/src/ros2/rmw_fastrtps/rmw_fastrtps_cpp/src/rmw_publisher.cpp:295
#13 0x00007f406a533f34 in rmw_destroy_publisher (v2=0x191e3b0, v1=0x162e0d0) at /home/osrf/debug_ws/src/ros2/rmw_implementation/rmw_implementation/src/functions.cpp:285
#14 0x00007f406a758cc2 in rcl_publisher_fini (publisher=0x7f4064e68720, node=0x7f4064e686f0) at /home/osrf/debug_ws/src/ros2/rcl/rcl/src/rcl/publisher.c:231
#15 0x00007f406b231336 in _rclpy_destroy_publisher (pyentity=<PyCapsule at remote 0x7f40600a86f0>) at /home/osrf/debug_ws/src/ros2/rclpy/rclpy/src/rclpy/_rclpy.c:1259
#16 0x00007f4067599d78 in rclpy_pycapsule_destroy (_unused_self=<module at remote 0x7f406b4740e8>, args=(<PyCapsule at remote 0x7f40600a86f0>,))
    at /home/osrf/debug_ws/src/ros2/rclpy/rclpy/src/rclpy/_rclpy_pycapsule.c:100

This PR still improves matters, but it's not a full solution.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,456,2019-11-07T22:55:58Z,2019-11-13T14:06:22Z,2019-11-13T14:06:26Z,MERGED,True,14,6,1,https://github.com/nuclearsandwich,Expressly destroy a node's objects before the node.,5,['in progress'],https://github.com/ros2/rclpy/pull/456,https://github.com/nuclearsandwich,11,https://github.com/ros2/rclpy/pull/456#issuecomment-553418075,"This seems to reduce hangs during test runs described in
ros2/build_farmer#248.
Another few hours of testing will convince me to strengthen that statement.
The handles corresponding to the destroyed objects should be getting
destroyed explicitly when self.handle.destroy() is called below. It
seems however that when running with Fast-RTPS it's possible to get into
a state where multiple threads are waiting on futexes and none can move
forward. The rclpy context of this apparent deadlock is while clearing
a node's list of publishers or services (possibly others, although
publishers and services were the only ones observed).
I consider this patch to be a workaround rather than a fix as I'm not particularly proud of how little I understand why the existing destruction handling is insufficient.
I think there may either be a race condition between the rcl/rmw layer
and the rmw implementation layer which is being tripped by the
haphazardness of Python's garbage collector or there is a logical
problem with the handle destruction ordering in rclpy that only
Fast-RTPS is sensitive to. A further possibility is to play around with pausing the garbage collector and triggering it at explicit points to see if that changes results at all.",In discussion yesterday we've decided to merge this as an incremental improvement. I'll leave ros2/build_farmer#248 open or create a more focused issue to continue investigation.,True,{'THUMBS_UP': ['https://github.com/mjcarroll']}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,1,https://github.com/ros2/rclpy/pull/457,@allenh1 now #427 is continued here as my previous repos were a lot messy,@allenh1 now #427 is continued here as my previous repos were a lot messy,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/allenh1,2,https://github.com/ros2/rclpy/pull/457#issuecomment-552117110,@allenh1 now #427 is continued here as my previous repos were a lot messy,"@allenh1 now #427 is continued here as my previous repos were a lot messy

@suab321321 Please refrain from opening multiple pull requests. Instead, It's best to fix the original pull request instead.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,3,https://github.com/ros2/rclpy/pull/457#issuecomment-554665595,@allenh1 now #427 is continued here as my previous repos were a lot messy,@allenh1 @dirk-thomas sir is the test files okay,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,4,https://github.com/ros2/rclpy/pull/457#issuecomment-559566973,@allenh1 now #427 is continued here as my previous repos were a lot messy,@dirk-thomas @allenh1 sir is it okay now..I did not do a forced pushed this time :),True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,5,https://github.com/ros2/rclpy/pull/457#issuecomment-559975627,@allenh1 now #427 is continued here as my previous repos were a lot messy,@dirk-thomas @allenh1 sir is it okay now?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,6,https://github.com/ros2/rclpy/pull/457#issuecomment-561770293,@allenh1 now #427 is continued here as my previous repos were a lot messy,@allenh1 @dirk-thomas sir did I do something wrong?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,7,https://github.com/ros2/rclpy/pull/457#issuecomment-562752447,@allenh1 now #427 is continued here as my previous repos were a lot messy,@allenh1 sir..is it okay now..,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,8,https://github.com/ros2/rclpy/pull/457#issuecomment-563372337,@allenh1 now #427 is continued here as my previous repos were a lot messy,"@allenh1 sir I removed these functions
def test_node_set_parameters_rejection2(self) and def test_node_set_parameters_rejection3(self) as these were no longer used...Also adjusted some spaces to make it more compact.
only def test_node_set_parameters_rejection(self) and def test_node_set_parameters_rejection(self) is used for testing my multipe paramter callback",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/allenh1,9,https://github.com/ros2/rclpy/pull/457#issuecomment-564557013,@allenh1 now #427 is continued here as my previous repos were a lot messy,"@suab321321 I rebased your branch for you. Please do the following in your local repository:
git fetch origin
git reset --hard origin/master

At that point, you should be caught up with where your remote is.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,10,https://github.com/ros2/rclpy/pull/457#issuecomment-564562925,@allenh1 now #427 is continued here as my previous repos were a lot messy,@allenh1 sir I had to do a force push sorry for that...but sir now I m seeing 20 files have changed is this suppose to happen,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/allenh1,11,https://github.com/ros2/rclpy/pull/457#issuecomment-564590134,@allenh1 now #427 is continued here as my previous repos were a lot messy,"I had to do a force push sorry for that...

I think you undid my cleanup work by doing that. Did the git reset --hard origin/master step not work or something? I'm not following why you needed to force push.

now I m seeing 20 files have changed is this suppose to happen

No, no it isn't.
@suab321321 It seems the history has been corrupted. Please try this:
git rebase

and force push the result. After that, we'll see where we are and figure out how best to proceed.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,12,https://github.com/ros2/rclpy/pull/457#issuecomment-564597136,@allenh1 now #427 is continued here as my previous repos were a lot messy,@allenh1 sir did not see your comment..and I was trying to reslove it on my own..,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/allenh1,13,https://github.com/ros2/rclpy/pull/457#issuecomment-564597888,@allenh1 now #427 is continued here as my previous repos were a lot messy,"@allenh1 sir did not see your comment..and I was trying to reslove it on my own..

Not a problem. Is the git rebase command working out?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,14,https://github.com/ros2/rclpy/pull/457#issuecomment-564598637,@allenh1 now #427 is continued here as my previous repos were a lot messy,"@allenh1
First, rewinding head to replay your work on top of it... Fast-forwarded master to refs/remotes/origin/master.  showed this...unable to push because everything upto date.
sir I have local copy of my cloned repo..should I just replace the file with that of local copy?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/allenh1,15,https://github.com/ros2/rclpy/pull/457#issuecomment-564601097,@allenh1 now #427 is continued here as my previous repos were a lot messy,"sir I have local copy of my cloned repo..should I just replace the file with that of local copy?

@suab321321 I think it would be best to learn how to fix this with git instead of just giving up on it.
Can you please show me the full output of the rebase command, as well as the following on your local repo?
git status
git log --oneline | head -n 10",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,16,https://github.com/ros2/rclpy/pull/457#issuecomment-564602700,@allenh1 now #427 is continued here as my previous repos were a lot messy,sir above output was full response by git rebase,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/allenh1,17,https://github.com/ros2/rclpy/pull/457#issuecomment-564610593,@allenh1 now #427 is continued here as my previous repos were a lot messy,"@suab321321 Okay, so I think I understand what's going on. It looks like your repository's master is at version 0.8.1. The current master branch is at 0.8.3. So, to proceed, I'd like to do two things: first, we'll clean up the commits on your repo to be just the ones you worked on (and collapse the merge commits). Then, we'll rebase your code on top of the current ros2 master.
Step 1:
git rebase -i HEAD~19

When you see this:
The previous cherry-pick is now empty, possibly due to conflict resolution.
If you wish to commit it anyway, use:

    git commit --allow-empty

use the following.
git rebase --continue

If you see a message about an unmerged path, you will need to resolve the conflict. When I did it on your branch, I had conflicts in two files (but on separate steps of the rebase):
rclpy/test/test_node.py

and
rclpy/rclpy/node.py

When resolving, select the copy of your code from the commit you are rebasing (note this will likely not be the final version you want to PR, just the way it looked in the commit you are adding).
Once the rebase is done, your git history should look like this.
$ git log --oneline | head -n 5
5fa35c7 Update rclpy/rclpy/node.py
73cf9e1 multiple paramters callback_support
aa63d9c asa
3a941ab Support multiple `on parameter set` callbacks
af632a4 add missing exec depend on rcl_interfaces (#452)

If it does, go ahead and do git push --foce-with-lease.
Step 2:
If you did not add ros2's remote, we'll do so now.
git remote add ros2 https://github.com/ros2/rclpy

Next, we will rebase your changes on the current ros2 branch.
git fetch ros2
git rebase ros2/master

After those commands are run, you should have the following history:
$ git log --oneline | head -n 10
319cbf5 Update rclpy/rclpy/node.py
aeea59e multiple paramters callback_support
150d51d asa
dd858b1 Support multiple `on parameter set` callbacks
83dd5c3 Replace RuntimeError with new custom exception RCLError (#478)
2882040 Update constructor docstrings to use imperative mood. (#480)
09df56a Use absolute topic name for rosout. (#479)
19dc19c Guard against unexpected action responses (#474)
9a4471c Fix test_action_client.py failures (#471)
23827e5 enable/disable rosout logging in each node individually (#469)

When it looks like this, go ahead and force push to your branch.
git push --force-with-lease

Hopefully things will be straightened out!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,18,https://github.com/ros2/rclpy/pull/457#issuecomment-564626144,@allenh1 now #427 is continued here as my previous repos were a lot messy,"@allenh1 sir rclpy/rclpy/node.py: needs update rclpy/test/test_node.py: needs merge You must edit all merge conflicts and then mark them as resolved using git add  after git rebase --continue
but when open vscode I see no option for merging current or incoming changes..
:(",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/allenh1,19,https://github.com/ros2/rclpy/pull/457#issuecomment-564633446,@allenh1 now #427 is continued here as my previous repos were a lot messy,"but when open vscode I see no option for merging current or incoming changes..

I don't use vcscode, so I don't know if there's any automatic way to do it there. Stack Overflow seems to have some suggestions for you.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,20,https://github.com/ros2/rclpy/pull/457#issuecomment-564671234,@allenh1 now #427 is continued here as my previous repos were a lot messy,@allenh1 nope sir none is helping....sir what if I merge my customexception(as replace custom rcl error is merged) branch with this master branch of mine.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,21,https://github.com/ros2/rclpy/pull/457#issuecomment-564684138,@allenh1 now #427 is continued here as my previous repos were a lot messy,"@allenh1 in when I run git rebase -i HEAD~19 it gave me:
pick 37c07f6 Add Rate (#443) pick 7366b76 Drop rclpy test_remove_ros_args_empty test case. (#445) pick f2bc3a2 Make use of Clock class for throttling logs (#441) pick 11ecd21 Support array parameter types (#444) pick 531e8c4 Expand test timeout to deflake rmw_connext (#449) pick e37feab Fix the unicode test string for opensplice rmw implementation (#44$ pick e22ee6a 0.8.1 pick af632a4 add missing exec depend on rcl_interfaces (#452) pick 3a941ab Support multiple on parameter set callbacks pick e566f3e fix import to use builtin_interfaces.msg (#453) pick d2adb17 asa pick a93d432 multiple paramters callback_support pick dd015cb s pick 323ea58 Update rclpy/rclpy/node.py
now what if I delete the  local commit(which caused the changing of 20 files) and force push it..it will also delete my remote commit and we will have same state of this PR as before
Should I try it sir?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/allenh1,22,https://github.com/ros2/rclpy/pull/457#issuecomment-564688509,@allenh1 now #427 is continued here as my previous repos were a lot messy,"now what if I delete the local commit(which caused the changing of 20 files) and force push it..it will also delete my remote commit and we will have same state of this PR as before

Yes. That would delete the remote as well.
I recommend you read up on working with multiple remotes with Git.
Harsh learning curve, but an incredibly powerful tool.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,23,https://github.com/ros2/rclpy/pull/457#issuecomment-564688854,@allenh1 now #427 is continued here as my previous repos were a lot messy,"now what if I delete the local commit(which caused the changing of 20 files) and force push it..it will also delete my remote commit and we will have same state of this PR as before

Yes. That would delete the remote as well.
I recommend you read up on working with multiple remotes with Git.
Harsh learning curve, but an incredibly powerful tool.

sir so should I proceed my way?
@allenh1",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/allenh1,24,https://github.com/ros2/rclpy/pull/457#issuecomment-564694165,@allenh1 now #427 is continued here as my previous repos were a lot messy,"sir so should I proceed my way?

Sure. I would create a copy of the current branch, then proceed.
git branch master-backup",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,25,https://github.com/ros2/rclpy/pull/457#issuecomment-564700163,@allenh1 now #427 is continued here as my previous repos were a lot messy,"@allenh1 sir its done...
Now I should rebase my current branch ros2/master to get the update my repo isnt it?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/allenh1,26,https://github.com/ros2/rclpy/pull/457#issuecomment-564715317,@allenh1 now #427 is continued here as my previous repos were a lot messy,"Now I should rebase my current branch ros2/master to get the update my repo isnt it?

I'm confused what you mean?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,27,https://github.com/ros2/rclpy/pull/457#issuecomment-567146797,@allenh1 now #427 is continued here as my previous repos were a lot messy,@allenh1 sir anything else?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/allenh1,28,https://github.com/ros2/rclpy/pull/457#issuecomment-567161176,@allenh1 now #427 is continued here as my previous repos were a lot messy,"@suab321321 you should probably fix the conflicts in _rclpy.c by rebasing on top of the ros2 master, but, other than that, I think I'm good with this.
The big question I have is if an issue should be filed for deprecating the set_parameters_callback function. I'm not the person to make that choice, so I'll defer to @ivanpauno / @dirk-thomas there.
Thanks for iterating.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,29,https://github.com/ros2/rclpy/pull/457#issuecomment-567248949,@allenh1 now #427 is continued here as my previous repos were a lot messy,"@suab321321 you should probably fix the conflicts in _rclpy.c by rebasing on top of the ros2 master, but, other than that, I think I'm good with this.
The big question I have is if an issue should be filed for deprecating the set_parameters_callback function. I'm not the person to make that choice, so I'll defer to @ivanpauno / @dirk-thomas there.
Thanks for iterating.

@allenh1 sir by rebasing you mean
git add remote upstream https://github.com/ros2
git fetch upstream
git add-->commit->>push?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,30,https://github.com/ros2/rclpy/pull/457#issuecomment-567573544,@allenh1 now #427 is continued here as my previous repos were a lot messy,@allenh1 done sir,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,31,https://github.com/ros2/rclpy/pull/457#issuecomment-570073767,@allenh1 now #427 is continued here as my previous repos were a lot messy,@dirk-thomas @ivanpauno sir is my code ready to be merged?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/jacobperron,32,https://github.com/ros2/rclpy/pull/457#issuecomment-579562991,@allenh1 now #427 is continued here as my previous repos were a lot messy,"@suab321321 make sure to ""sign-off"" on your commits acknowledging the developer certificate of origin (DCO). You can do this by adding the option -s when you commit (ie. git commit -s).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,33,https://github.com/ros2/rclpy/pull/457#issuecomment-580343575,@allenh1 now #427 is continued here as my previous repos were a lot messy,"@jacobperron sir I m committing by git commit --signoff --amend,but still it is showing DCO failure",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/jacobperron,34,https://github.com/ros2/rclpy/pull/457#issuecomment-580459098,@allenh1 now #427 is continued here as my previous repos were a lot messy,"The DCO is failing because it wants all of your commits to be signed. If you take a look at the DCO failure details, it suggests some commands for you:
git rebase HEAD~41 --signoff
git push --force-with-lease origin master",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,35,https://github.com/ros2/rclpy/pull/457#issuecomment-580563596,@allenh1 now #427 is continued here as my previous repos were a lot messy,@jacobperron sir when I did git rebase HEAD~41 I lost some of my work.Isnt rebase used to unstag remove commit?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/jacobperron,36,https://github.com/ros2/rclpy/pull/457#issuecomment-580880023,@allenh1 now #427 is continued here as my previous repos were a lot messy,"git rebase will reapply your commits. The command git rebase HEAD~41 --signoff should reapply the last 41 commits on the current branch that is checked out, but with the ""--signoff"" option. I wouldn't expect any of the code changes to be different.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,37,https://github.com/ros2/rclpy/pull/457#issuecomment-580928309,@allenh1 now #427 is continued here as my previous repos were a lot messy,@jacobperron is it okay now sir?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,38,https://github.com/ros2/rclpy/pull/457#issuecomment-580928476,@allenh1 now #427 is continued here as my previous repos were a lot messy,@jacobperron sir it is showing 19 files changed is it okay?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,39,https://github.com/ros2/rclpy/pull/457#issuecomment-581227821,@allenh1 now #427 is continued here as my previous repos were a lot messy,@jacobperron sir?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,40,https://github.com/ros2/rclpy/pull/457#issuecomment-581525516,@allenh1 now #427 is continued here as my previous repos were a lot messy,@jacobperron sir now is it okay?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/jacobperron,41,https://github.com/ros2/rclpy/pull/457#issuecomment-581538885,@allenh1 now #427 is continued here as my previous repos were a lot messy,"The same test is still failing for me as I commented in #457 (comment)
Can you reproduce the test failure?
I am running the following commands to build and test this code:
colcon build --packages-up-to rclpy
colcon test --packages-select rclpy --ctest-args -R test_node --event-handlers console_direct+

The second command will limit the test to test_node.py and give you more detailed output about the failure.
Please fix the test.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/allenh1,42,https://github.com/ros2/rclpy/pull/457#issuecomment-581573734,@allenh1 now #427 is continued here as my previous repos were a lot messy,"The command git rebase HEAD~41 --signoff should reapply the last 41 commits on the current branch that is checked out, but with the ""--signoff"" option.

I think this inadvertently caused a large amount of older commits to get signed by @suab321321...
here we discovered that the first commit on this branch was waiting on @dirk-thomas's signoff, causing the DCO failure.
This branch is in a rather odd place... way too many changes and way too many commits... They should resolve after a squash merge though, right?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/dirk-thomas,43,https://github.com/ros2/rclpy/pull/457#issuecomment-581578558,@allenh1 now #427 is continued here as my previous repos were a lot messy,"The PR is only being considered for merging once it has a ""clean"" commit list. That means only list commits related to the change proposed in this PR.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/allenh1,44,https://github.com/ros2/rclpy/pull/457#issuecomment-581974771,@allenh1 now #427 is continued here as my previous repos were a lot messy,"The PR is only being considered for merging once it has a ""clean"" commit list.

Yeah, I think that's wise.
Maybe git cherry-pick can salvage this one?
My suggestion here would be:

check out a temporary branch off the current ROS 2 master
git cherry-pick --signoff each individual commit on suab321321:master
Once you are 100% sure it is correct do a git branch -D for suab321321:master, and replace that branch with the temporary one
git push --force-with-lease the new master branch created by @suab321321 with the patches applied on top of the current master

Does this sound like a good approach? Just thinking out loud here.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,45,https://github.com/ros2/rclpy/pull/457#issuecomment-582008378,@allenh1 now #427 is continued here as my previous repos were a lot messy,@allenh1 sir now my commits are passing DCO checking..is this needed now?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,46,https://github.com/ros2/rclpy/pull/457#issuecomment-582072450,@allenh1 now #427 is continued here as my previous repos were a lot messy,@jacobperron sir now it is passing :),True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/allenh1,47,https://github.com/ros2/rclpy/pull/457#issuecomment-582123366,@allenh1 now #427 is continued here as my previous repos were a lot messy,"@allenh1 sir now my commits are passing DCO checking..is this needed now?

@dirk-thomas has answered this already:

The PR is only being considered for merging once it has a ""clean"" commit list. That means only list commits related to the change proposed in this PR.

What I was recommending is a potential way to get this branch to the state required for merging. It doesn't feel right to me to use cherry-pick for this though, to be honest.
Anybody have any ideas for fixing this?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/jacobperron,48,https://github.com/ros2/rclpy/pull/457#issuecomment-582130751,@allenh1 now #427 is continued here as my previous repos were a lot messy,"Anybody have any ideas for fixing this?

It might be easier to start a fresh branch off of master, copy the files with changes there, and do a single commit. After verifying the changes are the same as upstream, you can force push to this branch. I can do this after my latest comments are addressed.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/allenh1,49,https://github.com/ros2/rclpy/pull/457#issuecomment-582132489,@allenh1 now #427 is continued here as my previous repos were a lot messy,"Anybody have any ideas for fixing this?

It might be easier to start a fresh branch off of master, copy the files with changes there, and do a single commit.

Yeah, that's probably the cleanest fix. 👍",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,50,https://github.com/ros2/rclpy/pull/457#issuecomment-582511697,@allenh1 now #427 is continued here as my previous repos were a lot messy,@jacobperron sir is it good now?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,457,2019-11-09T00:54:12Z,2020-02-05T22:18:13Z,2020-02-06T04:05:45Z,MERGED,True,166,9,2,https://github.com/suab321321,Support multiple parameters callback,1,['enhancement'],https://github.com/ros2/rclpy/pull/457,https://github.com/suab321321,51,https://github.com/ros2/rclpy/pull/457#issuecomment-582726933,@allenh1 now #427 is continued here as my previous repos were a lot messy,thanks @jacobperron sir for merging and @allenh1 sir thank you so much for the guidance :),True,{'THUMBS_UP': ['https://github.com/allenh1']}
ros2/rclpy,https://github.com/ros2/rclpy,458,2019-11-12T18:32:58Z,2019-11-26T17:46:48Z,2019-11-26T17:46:51Z,MERGED,True,48,0,3,https://github.com/BMarchi,Provide logging severity for string,3,['in review'],https://github.com/ros2/rclpy/pull/458,https://github.com/BMarchi,1,https://github.com/ros2/rclpy/pull/458,"Connected to ros2/ros2cli#390
As the title says, this PR provides an API to get the logging severity from a name in string format","Connected to ros2/ros2cli#390
As the title says, this PR provides an API to get the logging severity from a name in string format",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,458,2019-11-12T18:32:58Z,2019-11-26T17:46:48Z,2019-11-26T17:46:51Z,MERGED,True,48,0,3,https://github.com/BMarchi,Provide logging severity for string,3,['in review'],https://github.com/ros2/rclpy/pull/458,https://github.com/BMarchi,2,https://github.com/ros2/rclpy/pull/458#issuecomment-558676517,"Connected to ros2/ros2cli#390
As the title says, this PR provides an API to get the logging severity from a name in string format","Linux 
Arch 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,459,2019-11-15T01:15:07Z,2020-04-01T15:17:55Z,2020-04-01T15:17:55Z,MERGED,True,238,16,5,https://github.com/jaisontj,Support for ON_REQUESTED_INCOMPATIBLE_QOS and ON_OFFERED_INCOMPATIBLE_QOS events,9,['in review'],https://github.com/ros2/rclpy/pull/459,https://github.com/jaisontj,1,https://github.com/ros2/rclpy/pull/459,"Depends on ros2/rcl:535
Related to this feature request. The design and implementation details can also be found there.

Added INCOMPATIBLE_QOS event type to QoSPublisherEventType and QoSSubscriptionEventType
Added support for the above events in the QoSEventHandler
modified test_qos_event.py to include the new events.

Signed-off-by: Jaison Titus jaisontj92@gmail.com","Depends on ros2/rcl:535
Related to this feature request. The design and implementation details can also be found there.

Added INCOMPATIBLE_QOS event type to QoSPublisherEventType and QoSSubscriptionEventType
Added support for the above events in the QoSEventHandler
modified test_qos_event.py to include the new events.

Signed-off-by: Jaison Titus jaisontj92@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,459,2019-11-15T01:15:07Z,2020-04-01T15:17:55Z,2020-04-01T15:17:55Z,MERGED,True,238,16,5,https://github.com/jaisontj,Support for ON_REQUESTED_INCOMPATIBLE_QOS and ON_OFFERED_INCOMPATIBLE_QOS events,9,['in review'],https://github.com/ros2/rclpy/pull/459,https://github.com/mm318,2,https://github.com/ros2/rclpy/pull/459#issuecomment-604278068,"Depends on ros2/rcl:535
Related to this feature request. The design and implementation details can also be found there.

Added INCOMPATIBLE_QOS event type to QoSPublisherEventType and QoSSubscriptionEventType
Added support for the above events in the QoSEventHandler
modified test_qos_event.py to include the new events.

Signed-off-by: Jaison Titus jaisontj92@gmail.com",Are the rclpy tests only run with rmw_fastrtps_cpp? Should we make it run with additional rmw implementations?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,459,2019-11-15T01:15:07Z,2020-04-01T15:17:55Z,2020-04-01T15:17:55Z,MERGED,True,238,16,5,https://github.com/jaisontj,Support for ON_REQUESTED_INCOMPATIBLE_QOS and ON_OFFERED_INCOMPATIBLE_QOS events,9,['in review'],https://github.com/ros2/rclpy/pull/459,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/459#issuecomment-604576804,"Depends on ros2/rcl:535
Related to this feature request. The design and implementation details can also be found there.

Added INCOMPATIBLE_QOS event type to QoSPublisherEventType and QoSSubscriptionEventType
Added support for the above events in the QoSEventHandler
modified test_qos_event.py to include the new events.

Signed-off-by: Jaison Titus jaisontj92@gmail.com","Are the rclpy tests only run with rmw_fastrtps_cpp? Should we make it run with additional rmw implementations?

I'm ok with running them in only one implementation.
We also have jobs in build.ros2.org where only one implementation is available, so it will cover all off them there.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,459,2019-11-15T01:15:07Z,2020-04-01T15:17:55Z,2020-04-01T15:17:55Z,MERGED,True,238,16,5,https://github.com/jaisontj,Support for ON_REQUESTED_INCOMPATIBLE_QOS and ON_OFFERED_INCOMPATIBLE_QOS events,9,['in review'],https://github.com/ros2/rclpy/pull/459,https://github.com/mm318,4,https://github.com/ros2/rclpy/pull/459#issuecomment-606291885,"Depends on ros2/rcl:535
Related to this feature request. The design and implementation details can also be found there.

Added INCOMPATIBLE_QOS event type to QoSPublisherEventType and QoSSubscriptionEventType
Added support for the above events in the QoSEventHandler
modified test_qos_event.py to include the new events.

Signed-off-by: Jaison Titus jaisontj92@gmail.com","Thanks!
The following is the set of remaining pull requests for this feature:

ros2/rclcpp#924
#459
ros2/ros2cli#410
ros2/demos#416

After I add some more tests to rclcpp (to address ros2/rclcpp#924 (review)), I'll request to kick of CI.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,459,2019-11-15T01:15:07Z,2020-04-01T15:17:55Z,2020-04-01T15:17:55Z,MERGED,True,238,16,5,https://github.com/jaisontj,Support for ON_REQUESTED_INCOMPATIBLE_QOS and ON_OFFERED_INCOMPATIBLE_QOS events,9,['in review'],https://github.com/ros2/rclpy/pull/459,https://github.com/mm318,5,https://github.com/ros2/rclpy/pull/459#issuecomment-606451193,"Depends on ros2/rcl:535
Related to this feature request. The design and implementation details can also be found there.

Added INCOMPATIBLE_QOS event type to QoSPublisherEventType and QoSSubscriptionEventType
Added support for the above events in the QoSEventHandler
modified test_qos_event.py to include the new events.

Signed-off-by: Jaison Titus jaisontj92@gmail.com","@ros2/aws-oncall - please run this CI job
Gist: https://gist.githubusercontent.com/mm318/e32e5d8c1e712f6098101fa6b32efc57/raw/48efc95ff1c41ef1cab6322f2b639221637c34a0/ros2_qos.repos
BUILD args: --packages-up-to ros2topic quality_of_service_demo_cpp quality_of_service_demo_py
TEST args: --packages-select rclcpp rclpy ros2topic quality_of_service_demo_cpp quality_of_service_demo_py
Job: ci_launcher",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,459,2019-11-15T01:15:07Z,2020-04-01T15:17:55Z,2020-04-01T15:17:55Z,MERGED,True,238,16,5,https://github.com/jaisontj,Support for ON_REQUESTED_INCOMPATIBLE_QOS and ON_OFFERED_INCOMPATIBLE_QOS events,9,['in review'],https://github.com/ros2/rclpy/pull/459,https://github.com/dabonnie,6,https://github.com/ros2/rclpy/pull/459#issuecomment-606739854,"Depends on ros2/rcl:535
Related to this feature request. The design and implementation details can also be found there.

Added INCOMPATIBLE_QOS event type to QoSPublisherEventType and QoSSubscriptionEventType
Added support for the above events in the QoSEventHandler
modified test_qos_event.py to include the new events.

Signed-off-by: Jaison Titus jaisontj92@gmail.com","@ros2/aws-oncall - please run this CI job
Gist: https://gist.githubusercontent.com/mm318/e32e5d8c1e712f6098101fa6b32efc57/raw/48efc95ff1c41ef1cab6322f2b639221637c34a0/ros2_qos.repos
BUILD args: --packages-up-to ros2topic quality_of_service_demo_cpp quality_of_service_demo_py
TEST args: --packages-select rclcpp rclpy ros2topic quality_of_service_demo_cpp quality_of_service_demo_py
Job: ci_launcher


Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,459,2019-11-15T01:15:07Z,2020-04-01T15:17:55Z,2020-04-01T15:17:55Z,MERGED,True,238,16,5,https://github.com/jaisontj,Support for ON_REQUESTED_INCOMPATIBLE_QOS and ON_OFFERED_INCOMPATIBLE_QOS events,9,['in review'],https://github.com/ros2/rclpy/pull/459,https://github.com/mm318,7,https://github.com/ros2/rclpy/pull/459#issuecomment-606810898,"Depends on ros2/rcl:535
Related to this feature request. The design and implementation details can also be found there.

Added INCOMPATIBLE_QOS event type to QoSPublisherEventType and QoSSubscriptionEventType
Added support for the above events in the QoSEventHandler
modified test_qos_event.py to include the new events.

Signed-off-by: Jaison Titus jaisontj92@gmail.com","I have pushed a fix to ros2/ros2cli#410. @ros2/aws-oncall, can you please re-run CI (#459 (comment))?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,459,2019-11-15T01:15:07Z,2020-04-01T15:17:55Z,2020-04-01T15:17:55Z,MERGED,True,238,16,5,https://github.com/jaisontj,Support for ON_REQUESTED_INCOMPATIBLE_QOS and ON_OFFERED_INCOMPATIBLE_QOS events,9,['in review'],https://github.com/ros2/rclpy/pull/459,https://github.com/dabonnie,8,https://github.com/ros2/rclpy/pull/459#issuecomment-606820891,"Depends on ros2/rcl:535
Related to this feature request. The design and implementation details can also be found there.

Added INCOMPATIBLE_QOS event type to QoSPublisherEventType and QoSSubscriptionEventType
Added support for the above events in the QoSEventHandler
modified test_qos_event.py to include the new events.

Signed-off-by: Jaison Titus jaisontj92@gmail.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,459,2019-11-15T01:15:07Z,2020-04-01T15:17:55Z,2020-04-01T15:17:55Z,MERGED,True,238,16,5,https://github.com/jaisontj,Support for ON_REQUESTED_INCOMPATIBLE_QOS and ON_OFFERED_INCOMPATIBLE_QOS events,9,['in review'],https://github.com/ros2/rclpy/pull/459,https://github.com/mm318,9,https://github.com/ros2/rclpy/pull/459#issuecomment-606898264,"Depends on ros2/rcl:535
Related to this feature request. The design and implementation details can also be found there.

Added INCOMPATIBLE_QOS event type to QoSPublisherEventType and QoSSubscriptionEventType
Added support for the above events in the QoSEventHandler
modified test_qos_event.py to include the new events.

Signed-off-by: Jaison Titus jaisontj92@gmail.com","Hi @ivanpauno, can you take a look at the CI results at #459 (comment)? I think the macOS and Windows CI test failures are unrelated.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,459,2019-11-15T01:15:07Z,2020-04-01T15:17:55Z,2020-04-01T15:17:55Z,MERGED,True,238,16,5,https://github.com/jaisontj,Support for ON_REQUESTED_INCOMPATIBLE_QOS and ON_OFFERED_INCOMPATIBLE_QOS events,9,['in review'],https://github.com/ros2/rclpy/pull/459,https://github.com/ivanpauno,10,https://github.com/ros2/rclpy/pull/459#issuecomment-607228099,"Depends on ros2/rcl:535
Related to this feature request. The design and implementation details can also be found there.

Added INCOMPATIBLE_QOS event type to QoSPublisherEventType and QoSSubscriptionEventType
Added support for the above events in the QoSEventHandler
modified test_qos_event.py to include the new events.

Signed-off-by: Jaison Titus jaisontj92@gmail.com","Hi @ivanpauno, can you take a look at the CI results at #459 (comment)? I think the macOS and Windows CI test failures are unrelated.

Seems to be unrelated to me.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,459,2019-11-15T01:15:07Z,2020-04-01T15:17:55Z,2020-04-01T15:17:55Z,MERGED,True,238,16,5,https://github.com/jaisontj,Support for ON_REQUESTED_INCOMPATIBLE_QOS and ON_OFFERED_INCOMPATIBLE_QOS events,9,['in review'],https://github.com/ros2/rclpy/pull/459,https://github.com/mm318,11,https://github.com/ros2/rclpy/pull/459#issuecomment-607303506,"Depends on ros2/rcl:535
Related to this feature request. The design and implementation details can also be found there.

Added INCOMPATIBLE_QOS event type to QoSPublisherEventType and QoSSubscriptionEventType
Added support for the above events in the QoSEventHandler
modified test_qos_event.py to include the new events.

Signed-off-by: Jaison Titus jaisontj92@gmail.com","Great! Then this set of pull requests are ready to merge:

ros2/rclcpp#924
#459
ros2/ros2cli#410
ros2/demos#416

Thanks, @ivanpauno!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,459,2019-11-15T01:15:07Z,2020-04-01T15:17:55Z,2020-04-01T15:17:55Z,MERGED,True,238,16,5,https://github.com/jaisontj,Support for ON_REQUESTED_INCOMPATIBLE_QOS and ON_OFFERED_INCOMPATIBLE_QOS events,9,['in review'],https://github.com/ros2/rclpy/pull/459,https://github.com/ivanpauno,12,https://github.com/ros2/rclpy/pull/459#issuecomment-607310786,"Depends on ros2/rcl:535
Related to this feature request. The design and implementation details can also be found there.

Added INCOMPATIBLE_QOS event type to QoSPublisherEventType and QoSSubscriptionEventType
Added support for the above events in the QoSEventHandler
modified test_qos_event.py to include the new events.

Signed-off-by: Jaison Titus jaisontj92@gmail.com","ros2/demos#416

Please, address the comment in that one. I will merge the others now.",True,{'THUMBS_UP': ['https://github.com/mm318']}
ros2/rclpy,https://github.com/ros2/rclpy,461,2019-11-15T19:57:11Z,2019-11-18T21:47:25Z,2019-11-18T21:47:28Z,MERGED,True,85,8,2,https://github.com/sloretz,Future invokes done callbacks when done,1,['bug'],https://github.com/ros2/rclpy/pull/461,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/461,"Fixes #460
If an executor is set, the future try to schedule done callback on it. If no executor is set, the future will invoke the done callbacks directly. This is sort of a hybrid of how asyncio and concurrent.futures handle this situation.
This should be backported to Dashing.","Fixes #460
If an executor is set, the future try to schedule done callback on it. If no executor is set, the future will invoke the done callbacks directly. This is sort of a hybrid of how asyncio and concurrent.futures handle this situation.
This should be backported to Dashing.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,461,2019-11-15T19:57:11Z,2019-11-18T21:47:25Z,2019-11-18T21:47:28Z,MERGED,True,85,8,2,https://github.com/sloretz,Future invokes done callbacks when done,1,['bug'],https://github.com/ros2/rclpy/pull/461,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/461#issuecomment-554528662,"Fixes #460
If an executor is set, the future try to schedule done callback on it. If no executor is set, the future will invoke the done callbacks directly. This is sort of a hybrid of how asyncio and concurrent.futures handle this situation.
This should be backported to Dashing.","CI (Testing all packages above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,461,2019-11-15T19:57:11Z,2019-11-18T21:47:25Z,2019-11-18T21:47:28Z,MERGED,True,85,8,2,https://github.com/sloretz,Future invokes done callbacks when done,1,['bug'],https://github.com/ros2/rclpy/pull/461,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/461#issuecomment-555151990,"Fixes #460
If an executor is set, the future try to schedule done callback on it. If no executor is set, the future will invoke the done callbacks directly. This is sort of a hybrid of how asyncio and concurrent.futures handle this situation.
This should be backported to Dashing.","CI looks ok, just flake8 warnings already fixed by ros2/ros2cli#399 and ros2/launch_ros#94",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,462,2019-11-15T21:07:24Z,2019-11-15T22:44:46Z,2019-11-15T22:44:51Z,MERGED,True,1,1,1,https://github.com/dirk-thomas,fix new linter warnings as of flake8-comprehensions 3.1.0,1,[],https://github.com/ros2/rclpy/pull/462,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/462,Address new linter warnings.,Address new linter warnings.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,462,2019-11-15T21:07:24Z,2019-11-15T22:44:46Z,2019-11-15T22:44:51Z,MERGED,True,1,1,1,https://github.com/dirk-thomas,fix new linter warnings as of flake8-comprehensions 3.1.0,1,[],https://github.com/ros2/rclpy/pull/462,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/462#issuecomment-554550014,Address new linter warnings.,Linux CI:,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,463,2019-11-15T23:07:47Z,2019-11-16T04:20:11Z,2019-11-16T04:20:15Z,MERGED,True,11,0,1,https://github.com/dirk-thomas,make short key of a QoS policy accessible,1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/463,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/463,Allows to retrieve the name of the QoS value.,Allows to retrieve the name of the QoS value.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,465,2019-11-21T22:51:40Z,2019-11-25T21:16:23Z,2019-11-25T21:16:27Z,MERGED,True,1,1,1,https://github.com/jacobperron,[eloquent backport] Send feedback callbacks properly in send_goal() of action client (#451),1,[],https://github.com/ros2/rclpy/pull/465,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/465,Backport #451 to Eloquent,Backport #451 to Eloquent,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,465,2019-11-21T22:51:40Z,2019-11-25T21:16:23Z,2019-11-25T21:16:27Z,MERGED,True,1,1,1,https://github.com/jacobperron,[eloquent backport] Send feedback callbacks properly in send_goal() of action client (#451),1,[],https://github.com/ros2/rclpy/pull/465,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/465#issuecomment-558288953,Backport #451 to Eloquent,"Eloquent branches:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,466,2019-11-21T22:52:27Z,2019-11-25T21:17:28Z,2019-11-25T21:17:32Z,MERGED,True,1,1,1,https://github.com/jacobperron,[dashing backport] Send feedback callbacks properly in send_goal() of action client (#451),1,[],https://github.com/ros2/rclpy/pull/466,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/466,Backport #451 to Dashing,Backport #451 to Dashing,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,466,2019-11-21T22:52:27Z,2019-11-25T21:17:28Z,2019-11-25T21:17:32Z,MERGED,True,1,1,1,https://github.com/jacobperron,[dashing backport] Send feedback callbacks properly in send_goal() of action client (#451),1,[],https://github.com/ros2/rclpy/pull/466,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/466#issuecomment-558289432,Backport #451 to Dashing,"Dashing branches:

Linux 
Linux-aarch64 
macOS 
Windows 

Edit: unrelated lint errors.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,467,2019-11-21T22:54:04Z,2019-12-05T22:05:58Z,2019-12-05T22:06:02Z,MERGED,True,1,1,1,https://github.com/jacobperron,[crystal backport] Send feedback callbacks properly in send_goal() of action client (#451),1,['in review'],https://github.com/ros2/rclpy/pull/467,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/467,Backport #451 to Crystal,Backport #451 to Crystal,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,467,2019-11-21T22:54:04Z,2019-12-05T22:05:58Z,2019-12-05T22:06:02Z,MERGED,True,1,1,1,https://github.com/jacobperron,[crystal backport] Send feedback callbacks properly in send_goal() of action client (#451),1,['in review'],https://github.com/ros2/rclpy/pull/467,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/467#issuecomment-558805608,Backport #451 to Crystal,"Linux 
Linux-aarch64 
macOS 
Windows   Edit: rebuild",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,468,2019-11-26T20:33:11Z,2019-11-27T21:18:01Z,2019-11-27T21:21:40Z,MERGED,True,78,6,2,https://github.com/BMarchi,Make use of rcutils log severity defined enum instead of duplicating code,2,[],https://github.com/ros2/rclpy/pull/468,https://github.com/BMarchi,1,https://github.com/ros2/rclpy/pull/468,Follow up of #458. Remove log severity hard coded and copied values from rcutils,Follow up of #458. Remove log severity hard coded and copied values from rcutils,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,468,2019-11-26T20:33:11Z,2019-11-27T21:18:01Z,2019-11-27T21:21:40Z,MERGED,True,78,6,2,https://github.com/BMarchi,Make use of rcutils log severity defined enum instead of duplicating code,2,[],https://github.com/ros2/rclpy/pull/468,https://github.com/BMarchi,2,https://github.com/ros2/rclpy/pull/468#issuecomment-559064779,Follow up of #458. Remove log severity hard coded and copied values from rcutils,"Linux 
Arch 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,468,2019-11-26T20:33:11Z,2019-11-27T21:18:01Z,2019-11-27T21:21:40Z,MERGED,True,78,6,2,https://github.com/BMarchi,Make use of rcutils log severity defined enum instead of duplicating code,2,[],https://github.com/ros2/rclpy/pull/468,https://github.com/dirk-thomas,3,https://github.com/ros2/rclpy/pull/468#issuecomment-559157537,Follow up of #458. Remove log severity hard coded and copied values from rcutils,"The patch is fine for now.
I am still worried that this will get us further away from being able to import rclpy modules side effect free (see #420). But that shouldn't hold up this PR.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,468,2019-11-26T20:33:11Z,2019-11-27T21:18:01Z,2019-11-27T21:21:40Z,MERGED,True,78,6,2,https://github.com/BMarchi,Make use of rcutils log severity defined enum instead of duplicating code,2,[],https://github.com/ros2/rclpy/pull/468,https://github.com/hidmic,4,https://github.com/ros2/rclpy/pull/468#issuecomment-559254837,Follow up of #458. Remove log severity hard coded and copied values from rcutils,"I am still worried that this will get us further away from being able to import rclpy modules side effect free (see #420). But that shouldn't hold up this PR.

Yes, I remember the ticket and the discussions. Thanks for bumping that one up. I also recall that most variations trying to circumvent the problem weren't great either. It'd be good if we could spend the time to really solve the problem i.e. C extensions need not be special, it's a trap to make them so.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,469,2019-12-02T03:10:49Z,2019-12-05T13:37:12Z,2020-04-25T07:00:30Z,MERGED,True,106,2,5,https://github.com/Barry-Xu-2018,enable/disable rosout logging in each node individually,3,[],https://github.com/ros2/rclpy/pull/469,https://github.com/Barry-Xu-2018,1,https://github.com/ros2/rclpy/pull/469,"This is following PR for ros2/rcl#532.
Provide option to enable/disable  rosout logging for rclpy.
Related issue is ros2/rcl#510.
There are 2 commits.  One is for implementation. The other is for test codes.
There is a problem on test.  Test codes needs python3-parameterized package.
'python3-parameterized' package is not supported currently in python  test of ros2.
Whether do we can use 'python3-parameterized' this time?
If yes, do I need to update other repositories? (such as rosdistro, ros2 CI or some document) Not very clear about these steps.","This is following PR for ros2/rcl#532.
Provide option to enable/disable  rosout logging for rclpy.
Related issue is ros2/rcl#510.
There are 2 commits.  One is for implementation. The other is for test codes.
There is a problem on test.  Test codes needs python3-parameterized package.
'python3-parameterized' package is not supported currently in python  test of ros2.
Whether do we can use 'python3-parameterized' this time?
If yes, do I need to update other repositories? (such as rosdistro, ros2 CI or some document) Not very clear about these steps.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,469,2019-12-02T03:10:49Z,2019-12-05T13:37:12Z,2020-04-25T07:00:30Z,MERGED,True,106,2,5,https://github.com/Barry-Xu-2018,enable/disable rosout logging in each node individually,3,[],https://github.com/ros2/rclpy/pull/469,https://github.com/Barry-Xu-2018,2,https://github.com/ros2/rclpy/pull/469#issuecomment-560210457,"This is following PR for ros2/rcl#532.
Provide option to enable/disable  rosout logging for rclpy.
Related issue is ros2/rcl#510.
There are 2 commits.  One is for implementation. The other is for test codes.
There is a problem on test.  Test codes needs python3-parameterized package.
'python3-parameterized' package is not supported currently in python  test of ros2.
Whether do we can use 'python3-parameterized' this time?
If yes, do I need to update other repositories? (such as rosdistro, ros2 CI or some document) Not very clear about these steps.","@ivanpauno
Please review this PR.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,469,2019-12-02T03:10:49Z,2019-12-05T13:37:12Z,2020-04-25T07:00:30Z,MERGED,True,106,2,5,https://github.com/Barry-Xu-2018,enable/disable rosout logging in each node individually,3,[],https://github.com/ros2/rclpy/pull/469,https://github.com/Barry-Xu-2018,3,https://github.com/ros2/rclpy/pull/469#issuecomment-561461067,"This is following PR for ros2/rcl#532.
Provide option to enable/disable  rosout logging for rclpy.
Related issue is ros2/rcl#510.
There are 2 commits.  One is for implementation. The other is for test codes.
There is a problem on test.  Test codes needs python3-parameterized package.
'python3-parameterized' package is not supported currently in python  test of ros2.
Whether do we can use 'python3-parameterized' this time?
If yes, do I need to update other repositories? (such as rosdistro, ros2 CI or some document) Not very clear about these steps.","@ivanpauno
I have updated test codes based on pytest.
Please review again.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,469,2019-12-02T03:10:49Z,2019-12-05T13:37:12Z,2020-04-25T07:00:30Z,MERGED,True,106,2,5,https://github.com/Barry-Xu-2018,enable/disable rosout logging in each node individually,3,[],https://github.com/ros2/rclpy/pull/469,https://github.com/fujitatomoya,4,https://github.com/ros2/rclpy/pull/469#issuecomment-561469979,"This is following PR for ros2/rcl#532.
Provide option to enable/disable  rosout logging for rclpy.
Related issue is ros2/rcl#510.
There are 2 commits.  One is for implementation. The other is for test codes.
There is a problem on test.  Test codes needs python3-parameterized package.
'python3-parameterized' package is not supported currently in python  test of ros2.
Whether do we can use 'python3-parameterized' this time?
If yes, do I need to update other repositories? (such as rosdistro, ros2 CI or some document) Not very clear about these steps.","@Barry-Xu-2018 @ivanpauno
LGTM",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,469,2019-12-02T03:10:49Z,2019-12-05T13:37:12Z,2020-04-25T07:00:30Z,MERGED,True,106,2,5,https://github.com/Barry-Xu-2018,enable/disable rosout logging in each node individually,3,[],https://github.com/ros2/rclpy/pull/469,https://github.com/ivanpauno,5,https://github.com/ros2/rclpy/pull/469#issuecomment-561647230,"This is following PR for ros2/rcl#532.
Provide option to enable/disable  rosout logging for rclpy.
Related issue is ros2/rcl#510.
There are 2 commits.  One is for implementation. The other is for test codes.
There is a problem on test.  Test codes needs python3-parameterized package.
'python3-parameterized' package is not supported currently in python  test of ros2.
Whether do we can use 'python3-parameterized' this time?
If yes, do I need to update other repositories? (such as rosdistro, ros2 CI or some document) Not very clear about these steps.","Linux 
AArch64 
macOS 
Windows 

Failures are all unrelated, and being fixed by #471.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,469,2019-12-02T03:10:49Z,2019-12-05T13:37:12Z,2020-04-25T07:00:30Z,MERGED,True,106,2,5,https://github.com/Barry-Xu-2018,enable/disable rosout logging in each node individually,3,[],https://github.com/ros2/rclpy/pull/469,https://github.com/ivanpauno,6,https://github.com/ros2/rclpy/pull/469#issuecomment-562131312,"This is following PR for ros2/rcl#532.
Provide option to enable/disable  rosout logging for rclpy.
Related issue is ros2/rcl#510.
There are 2 commits.  One is for implementation. The other is for test codes.
There is a problem on test.  Test codes needs python3-parameterized package.
'python3-parameterized' package is not supported currently in python  test of ros2.
Whether do we can use 'python3-parameterized' this time?
If yes, do I need to update other repositories? (such as rosdistro, ros2 CI or some document) Not very clear about these steps.",Going in! Thanks for the contribution @Barry-Xu-2018 !,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,470,2019-12-03T20:27:04Z,2020-01-20T17:09:32Z,2020-01-20T17:09:39Z,CLOSED,False,105,61,10,https://github.com/ivanpauno,Context destruction order bug,2,"['bug', 'help wanted']",https://github.com/ros2/rclpy/pull/470,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/470,"Intro
As part of ros2/rmw#183, I needed to ensure that the context is destructed after the nodes/publishers/etc. That's needed as now the Participant will be part of the context, and the Participant is needed in the destruction of most of the entities (e.g.: https://github.com/ros2/rmw_fastrtps/blob/a16c45ef11a19361a15c585497bf373a7ed0bae6/rmw_fastrtps_shared_cpp/src/rmw_service.cpp#L75).
Also, rcl documentation says that not doing so, is undefined behavior https://github.com/ros2/rcl/blob/3a5c3a34191bd95491cb72c7458b9409452a28f0/rcl/include/rcl/context.h#L101-L106 (before, undefined meant nothing happened. Now it means a segfault).
Commits

b740f90 is using a Handle object to wrap the context capsule, and establishing a dependency of the node handle on the context handle. The other changes are just a consequence of this.
5f7f249 is adding some debug messages I will use in the buggy example.

Buggy example
The context is sometimes being destructed out of order, though it's hard to reproduce it.
Here is one example:


Example

Code
import rclpy
from rclpy.executors import SingleThreadedExecutor
from rclpy.node import Node
from std_msgs.msg import String


def main(args=None):
    rclpy.init(args=args)
    node = Node('talker')
    node2 = Node('asd')
    rclpy.shutdown()

if __name__ == '__main__':
    main()


Output
destroying rcl_node_t   140190542497472
destroying rcl_context_t   140190450323888
destroying rclpy_publisher_t   140190542497824
destroying rcl_clock_t   140190449713680
destroying rclpy_service_t   140190542497872
destroying rclpy_service_t   140190542497856
destroying rclpy_service_t   140190542497888
destroying rclpy_service_t   140190542497904
destroying rclpy_service_t   140190542497920
destroying rclpy_service_t   140190542497936
destroying rcl_node_t   140190542497952
destroying rclpy_publisher_t   140190542497968
destroying rcl_clock_t   140190375035248
destroying rclpy_service_t   140190542498016
destroying rclpy_service_t   140190542498000
destroying rclpy_service_t   140190542498032
destroying rclpy_service_t   140190542498048
destroying rclpy_service_t   140190542498064
destroying rclpy_service_t   140190542498080
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node
context being destructed
context destructed
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node



Conclusion
The context is being destructed out of order.
All the example where I observed this have two nodes (maybe someone is decrementing a reference twice (?)).



Original bug
In the branches where I'm moving the Participant to the context, the following test failed 
  
    
      rclpy/rclpy/test/test_handle.py
    
    
        Lines 77 to 98
      in
      d375c84
    
  
  
    

        
          
           def test_handle_does_not_destroy_requirements(): 
        

        
          
               context = rclpy.context.Context() 
        

        
          
               rclpy.init(context=context) 
        

        
          
            
        

        
          
               try: 
        

        
          
                   node1 = rclpy.create_node('test_handle_does_not_destroy_requirements1', context=context) 
        

        
          
                   node2 = rclpy.create_node('test_handle_does_not_destroy_requirements2', context=context) 
        

        
          
                   node2.handle.requires(node1.handle) 
        

        
          
            
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
                   with node2.handle: 
        

        
          
                       pass 
        

        
          
            
        

        
          
                   node2.handle.destroy() 
        

        
          
                   with pytest.raises(InvalidHandle): 
        

        
          
                       with node2.handle: 
        

        
          
                           pass 
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
               finally: 
        

        
          
                   rclpy.shutdown(context=context) 
        
    
  

.
Some interesting facts:

It always failed when I calling colcon test --packages-select rclpy
It didn't fail when calling python3 -m pytest -s test_handle.py
It did fail when calling python3 -m pytest -s test_handle.py::test_handle_does_not_destroy_requirements.

I have been debugging, and found that the objects are being destructed by the gc.
AFAIU, cpython gc doesn't ensure any destruction order (my understanding of cpython garbage collection process is really poor).","Intro
As part of ros2/rmw#183, I needed to ensure that the context is destructed after the nodes/publishers/etc. That's needed as now the Participant will be part of the context, and the Participant is needed in the destruction of most of the entities (e.g.: https://github.com/ros2/rmw_fastrtps/blob/a16c45ef11a19361a15c585497bf373a7ed0bae6/rmw_fastrtps_shared_cpp/src/rmw_service.cpp#L75).
Also, rcl documentation says that not doing so, is undefined behavior https://github.com/ros2/rcl/blob/3a5c3a34191bd95491cb72c7458b9409452a28f0/rcl/include/rcl/context.h#L101-L106 (before, undefined meant nothing happened. Now it means a segfault).
Commits

b740f90 is using a Handle object to wrap the context capsule, and establishing a dependency of the node handle on the context handle. The other changes are just a consequence of this.
5f7f249 is adding some debug messages I will use in the buggy example.

Buggy example
The context is sometimes being destructed out of order, though it's hard to reproduce it.
Here is one example:


Example

Code
import rclpy
from rclpy.executors import SingleThreadedExecutor
from rclpy.node import Node
from std_msgs.msg import String


def main(args=None):
    rclpy.init(args=args)
    node = Node('talker')
    node2 = Node('asd')
    rclpy.shutdown()

if __name__ == '__main__':
    main()


Output
destroying rcl_node_t   140190542497472
destroying rcl_context_t   140190450323888
destroying rclpy_publisher_t   140190542497824
destroying rcl_clock_t   140190449713680
destroying rclpy_service_t   140190542497872
destroying rclpy_service_t   140190542497856
destroying rclpy_service_t   140190542497888
destroying rclpy_service_t   140190542497904
destroying rclpy_service_t   140190542497920
destroying rclpy_service_t   140190542497936
destroying rcl_node_t   140190542497952
destroying rclpy_publisher_t   140190542497968
destroying rcl_clock_t   140190375035248
destroying rclpy_service_t   140190542498016
destroying rclpy_service_t   140190542498000
destroying rclpy_service_t   140190542498032
destroying rclpy_service_t   140190542498048
destroying rclpy_service_t   140190542498064
destroying rclpy_service_t   140190542498080
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node
context being destructed
context destructed
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node



Conclusion
The context is being destructed out of order.
All the example where I observed this have two nodes (maybe someone is decrementing a reference twice (?)).



Original bug
In the branches where I'm moving the Participant to the context, the following test failed 
  
    
      rclpy/rclpy/test/test_handle.py
    
    
        Lines 77 to 98
      in
      d375c84
    
  
  
    

        
          
           def test_handle_does_not_destroy_requirements(): 
        

        
          
               context = rclpy.context.Context() 
        

        
          
               rclpy.init(context=context) 
        

        
          
            
        

        
          
               try: 
        

        
          
                   node1 = rclpy.create_node('test_handle_does_not_destroy_requirements1', context=context) 
        

        
          
                   node2 = rclpy.create_node('test_handle_does_not_destroy_requirements2', context=context) 
        

        
          
                   node2.handle.requires(node1.handle) 
        

        
          
            
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
                   with node2.handle: 
        

        
          
                       pass 
        

        
          
            
        

        
          
                   node2.handle.destroy() 
        

        
          
                   with pytest.raises(InvalidHandle): 
        

        
          
                       with node2.handle: 
        

        
          
                           pass 
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
               finally: 
        

        
          
                   rclpy.shutdown(context=context) 
        
    
  

.
Some interesting facts:

It always failed when I calling colcon test --packages-select rclpy
It didn't fail when calling python3 -m pytest -s test_handle.py
It did fail when calling python3 -m pytest -s test_handle.py::test_handle_does_not_destroy_requirements.

I have been debugging, and found that the objects are being destructed by the gc.
AFAIU, cpython gc doesn't ensure any destruction order (my understanding of cpython garbage collection process is really poor).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,470,2019-12-03T20:27:04Z,2020-01-20T17:09:32Z,2020-01-20T17:09:39Z,CLOSED,False,105,61,10,https://github.com/ivanpauno,Context destruction order bug,2,"['bug', 'help wanted']",https://github.com/ros2/rclpy/pull/470,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/470#issuecomment-561343143,"Intro
As part of ros2/rmw#183, I needed to ensure that the context is destructed after the nodes/publishers/etc. That's needed as now the Participant will be part of the context, and the Participant is needed in the destruction of most of the entities (e.g.: https://github.com/ros2/rmw_fastrtps/blob/a16c45ef11a19361a15c585497bf373a7ed0bae6/rmw_fastrtps_shared_cpp/src/rmw_service.cpp#L75).
Also, rcl documentation says that not doing so, is undefined behavior https://github.com/ros2/rcl/blob/3a5c3a34191bd95491cb72c7458b9409452a28f0/rcl/include/rcl/context.h#L101-L106 (before, undefined meant nothing happened. Now it means a segfault).
Commits

b740f90 is using a Handle object to wrap the context capsule, and establishing a dependency of the node handle on the context handle. The other changes are just a consequence of this.
5f7f249 is adding some debug messages I will use in the buggy example.

Buggy example
The context is sometimes being destructed out of order, though it's hard to reproduce it.
Here is one example:


Example

Code
import rclpy
from rclpy.executors import SingleThreadedExecutor
from rclpy.node import Node
from std_msgs.msg import String


def main(args=None):
    rclpy.init(args=args)
    node = Node('talker')
    node2 = Node('asd')
    rclpy.shutdown()

if __name__ == '__main__':
    main()


Output
destroying rcl_node_t   140190542497472
destroying rcl_context_t   140190450323888
destroying rclpy_publisher_t   140190542497824
destroying rcl_clock_t   140190449713680
destroying rclpy_service_t   140190542497872
destroying rclpy_service_t   140190542497856
destroying rclpy_service_t   140190542497888
destroying rclpy_service_t   140190542497904
destroying rclpy_service_t   140190542497920
destroying rclpy_service_t   140190542497936
destroying rcl_node_t   140190542497952
destroying rclpy_publisher_t   140190542497968
destroying rcl_clock_t   140190375035248
destroying rclpy_service_t   140190542498016
destroying rclpy_service_t   140190542498000
destroying rclpy_service_t   140190542498032
destroying rclpy_service_t   140190542498048
destroying rclpy_service_t   140190542498064
destroying rclpy_service_t   140190542498080
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node
context being destructed
context destructed
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node



Conclusion
The context is being destructed out of order.
All the example where I observed this have two nodes (maybe someone is decrementing a reference twice (?)).



Original bug
In the branches where I'm moving the Participant to the context, the following test failed 
  
    
      rclpy/rclpy/test/test_handle.py
    
    
        Lines 77 to 98
      in
      d375c84
    
  
  
    

        
          
           def test_handle_does_not_destroy_requirements(): 
        

        
          
               context = rclpy.context.Context() 
        

        
          
               rclpy.init(context=context) 
        

        
          
            
        

        
          
               try: 
        

        
          
                   node1 = rclpy.create_node('test_handle_does_not_destroy_requirements1', context=context) 
        

        
          
                   node2 = rclpy.create_node('test_handle_does_not_destroy_requirements2', context=context) 
        

        
          
                   node2.handle.requires(node1.handle) 
        

        
          
            
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
                   with node2.handle: 
        

        
          
                       pass 
        

        
          
            
        

        
          
                   node2.handle.destroy() 
        

        
          
                   with pytest.raises(InvalidHandle): 
        

        
          
                       with node2.handle: 
        

        
          
                           pass 
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
               finally: 
        

        
          
                   rclpy.shutdown(context=context) 
        
    
  

.
Some interesting facts:

It always failed when I calling colcon test --packages-select rclpy
It didn't fail when calling python3 -m pytest -s test_handle.py
It did fail when calling python3 -m pytest -s test_handle.py::test_handle_does_not_destroy_requirements.

I have been debugging, and found that the objects are being destructed by the gc.
AFAIU, cpython gc doesn't ensure any destruction order (my understanding of cpython garbage collection process is really poor).","@hidmic FYI
@sloretz Can you take a look to this? I'm not really sure what's the problem (nor how to fix it).",True,{'THUMBS_UP': ['https://github.com/hidmic']}
ros2/rclpy,https://github.com/ros2/rclpy,470,2019-12-03T20:27:04Z,2020-01-20T17:09:32Z,2020-01-20T17:09:39Z,CLOSED,False,105,61,10,https://github.com/ivanpauno,Context destruction order bug,2,"['bug', 'help wanted']",https://github.com/ros2/rclpy/pull/470,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/470#issuecomment-561446358,"Intro
As part of ros2/rmw#183, I needed to ensure that the context is destructed after the nodes/publishers/etc. That's needed as now the Participant will be part of the context, and the Participant is needed in the destruction of most of the entities (e.g.: https://github.com/ros2/rmw_fastrtps/blob/a16c45ef11a19361a15c585497bf373a7ed0bae6/rmw_fastrtps_shared_cpp/src/rmw_service.cpp#L75).
Also, rcl documentation says that not doing so, is undefined behavior https://github.com/ros2/rcl/blob/3a5c3a34191bd95491cb72c7458b9409452a28f0/rcl/include/rcl/context.h#L101-L106 (before, undefined meant nothing happened. Now it means a segfault).
Commits

b740f90 is using a Handle object to wrap the context capsule, and establishing a dependency of the node handle on the context handle. The other changes are just a consequence of this.
5f7f249 is adding some debug messages I will use in the buggy example.

Buggy example
The context is sometimes being destructed out of order, though it's hard to reproduce it.
Here is one example:


Example

Code
import rclpy
from rclpy.executors import SingleThreadedExecutor
from rclpy.node import Node
from std_msgs.msg import String


def main(args=None):
    rclpy.init(args=args)
    node = Node('talker')
    node2 = Node('asd')
    rclpy.shutdown()

if __name__ == '__main__':
    main()


Output
destroying rcl_node_t   140190542497472
destroying rcl_context_t   140190450323888
destroying rclpy_publisher_t   140190542497824
destroying rcl_clock_t   140190449713680
destroying rclpy_service_t   140190542497872
destroying rclpy_service_t   140190542497856
destroying rclpy_service_t   140190542497888
destroying rclpy_service_t   140190542497904
destroying rclpy_service_t   140190542497920
destroying rclpy_service_t   140190542497936
destroying rcl_node_t   140190542497952
destroying rclpy_publisher_t   140190542497968
destroying rcl_clock_t   140190375035248
destroying rclpy_service_t   140190542498016
destroying rclpy_service_t   140190542498000
destroying rclpy_service_t   140190542498032
destroying rclpy_service_t   140190542498048
destroying rclpy_service_t   140190542498064
destroying rclpy_service_t   140190542498080
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node
context being destructed
context destructed
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node



Conclusion
The context is being destructed out of order.
All the example where I observed this have two nodes (maybe someone is decrementing a reference twice (?)).



Original bug
In the branches where I'm moving the Participant to the context, the following test failed 
  
    
      rclpy/rclpy/test/test_handle.py
    
    
        Lines 77 to 98
      in
      d375c84
    
  
  
    

        
          
           def test_handle_does_not_destroy_requirements(): 
        

        
          
               context = rclpy.context.Context() 
        

        
          
               rclpy.init(context=context) 
        

        
          
            
        

        
          
               try: 
        

        
          
                   node1 = rclpy.create_node('test_handle_does_not_destroy_requirements1', context=context) 
        

        
          
                   node2 = rclpy.create_node('test_handle_does_not_destroy_requirements2', context=context) 
        

        
          
                   node2.handle.requires(node1.handle) 
        

        
          
            
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
                   with node2.handle: 
        

        
          
                       pass 
        

        
          
            
        

        
          
                   node2.handle.destroy() 
        

        
          
                   with pytest.raises(InvalidHandle): 
        

        
          
                       with node2.handle: 
        

        
          
                           pass 
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
               finally: 
        

        
          
                   rclpy.shutdown(context=context) 
        
    
  

.
Some interesting facts:

It always failed when I calling colcon test --packages-select rclpy
It didn't fail when calling python3 -m pytest -s test_handle.py
It did fail when calling python3 -m pytest -s test_handle.py::test_handle_does_not_destroy_requirements.

I have been debugging, and found that the objects are being destructed by the gc.
AFAIU, cpython gc doesn't ensure any destruction order (my understanding of cpython garbage collection process is really poor).","cpython gc doesn't ensure any destruction order

Handle is responsible for the destruction order. When garbage collected, it forces the order using python's reference counting. Both of the nodes' handles should be keeping a reference to the context handle. The context handle's reference count is non-zero until the node's are destroyed because it's still held by them. In theory the context shouldn't get garbage collected at the same time.
That's the theory anyways. From the print statements it looks like the context is being destroyed after the first node, but before the second node. Maybe there's a bug in Handle that causes the second node handle to lose its reference to the context handle? I can look at this deeper later this week.",True,{'THUMBS_UP': ['https://github.com/ivanpauno']}
ros2/rclpy,https://github.com/ros2/rclpy,470,2019-12-03T20:27:04Z,2020-01-20T17:09:32Z,2020-01-20T17:09:39Z,CLOSED,False,105,61,10,https://github.com/ivanpauno,Context destruction order bug,2,"['bug', 'help wanted']",https://github.com/ros2/rclpy/pull/470,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/470#issuecomment-561648367,"Intro
As part of ros2/rmw#183, I needed to ensure that the context is destructed after the nodes/publishers/etc. That's needed as now the Participant will be part of the context, and the Participant is needed in the destruction of most of the entities (e.g.: https://github.com/ros2/rmw_fastrtps/blob/a16c45ef11a19361a15c585497bf373a7ed0bae6/rmw_fastrtps_shared_cpp/src/rmw_service.cpp#L75).
Also, rcl documentation says that not doing so, is undefined behavior https://github.com/ros2/rcl/blob/3a5c3a34191bd95491cb72c7458b9409452a28f0/rcl/include/rcl/context.h#L101-L106 (before, undefined meant nothing happened. Now it means a segfault).
Commits

b740f90 is using a Handle object to wrap the context capsule, and establishing a dependency of the node handle on the context handle. The other changes are just a consequence of this.
5f7f249 is adding some debug messages I will use in the buggy example.

Buggy example
The context is sometimes being destructed out of order, though it's hard to reproduce it.
Here is one example:


Example

Code
import rclpy
from rclpy.executors import SingleThreadedExecutor
from rclpy.node import Node
from std_msgs.msg import String


def main(args=None):
    rclpy.init(args=args)
    node = Node('talker')
    node2 = Node('asd')
    rclpy.shutdown()

if __name__ == '__main__':
    main()


Output
destroying rcl_node_t   140190542497472
destroying rcl_context_t   140190450323888
destroying rclpy_publisher_t   140190542497824
destroying rcl_clock_t   140190449713680
destroying rclpy_service_t   140190542497872
destroying rclpy_service_t   140190542497856
destroying rclpy_service_t   140190542497888
destroying rclpy_service_t   140190542497904
destroying rclpy_service_t   140190542497920
destroying rclpy_service_t   140190542497936
destroying rcl_node_t   140190542497952
destroying rclpy_publisher_t   140190542497968
destroying rcl_clock_t   140190375035248
destroying rclpy_service_t   140190542498016
destroying rclpy_service_t   140190542498000
destroying rclpy_service_t   140190542498032
destroying rclpy_service_t   140190542498048
destroying rclpy_service_t   140190542498064
destroying rclpy_service_t   140190542498080
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node
context being destructed
context destructed
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node



Conclusion
The context is being destructed out of order.
All the example where I observed this have two nodes (maybe someone is decrementing a reference twice (?)).



Original bug
In the branches where I'm moving the Participant to the context, the following test failed 
  
    
      rclpy/rclpy/test/test_handle.py
    
    
        Lines 77 to 98
      in
      d375c84
    
  
  
    

        
          
           def test_handle_does_not_destroy_requirements(): 
        

        
          
               context = rclpy.context.Context() 
        

        
          
               rclpy.init(context=context) 
        

        
          
            
        

        
          
               try: 
        

        
          
                   node1 = rclpy.create_node('test_handle_does_not_destroy_requirements1', context=context) 
        

        
          
                   node2 = rclpy.create_node('test_handle_does_not_destroy_requirements2', context=context) 
        

        
          
                   node2.handle.requires(node1.handle) 
        

        
          
            
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
                   with node2.handle: 
        

        
          
                       pass 
        

        
          
            
        

        
          
                   node2.handle.destroy() 
        

        
          
                   with pytest.raises(InvalidHandle): 
        

        
          
                       with node2.handle: 
        

        
          
                           pass 
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
               finally: 
        

        
          
                   rclpy.shutdown(context=context) 
        
    
  

.
Some interesting facts:

It always failed when I calling colcon test --packages-select rclpy
It didn't fail when calling python3 -m pytest -s test_handle.py
It did fail when calling python3 -m pytest -s test_handle.py::test_handle_does_not_destroy_requirements.

I have been debugging, and found that the objects are being destructed by the gc.
AFAIU, cpython gc doesn't ensure any destruction order (my understanding of cpython garbage collection process is really poor).","Handle is responsible for the destruction order. When garbage collected, it forces the order using python's reference counting. Both of the nodes' handles should be keeping a reference to the context handle. The context handle's reference count is non-zero until the node's are destroyed because it's still held by them. In theory the context shouldn't get garbage collected at the same time.

I understand the same.

That's the theory anyways. From the print statements it looks like the context is being destroyed after the first node, but before the second node. Maybe there's a bug in Handle that causes the second node handle to lose its reference to the context handle?

That's possible, though I unfortunately haven't found a bug.

I can look at this deeper later this week.

Thanks!!!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,470,2019-12-03T20:27:04Z,2020-01-20T17:09:32Z,2020-01-20T17:09:39Z,CLOSED,False,105,61,10,https://github.com/ivanpauno,Context destruction order bug,2,"['bug', 'help wanted']",https://github.com/ros2/rclpy/pull/470,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/470#issuecomment-564127628,"Intro
As part of ros2/rmw#183, I needed to ensure that the context is destructed after the nodes/publishers/etc. That's needed as now the Participant will be part of the context, and the Participant is needed in the destruction of most of the entities (e.g.: https://github.com/ros2/rmw_fastrtps/blob/a16c45ef11a19361a15c585497bf373a7ed0bae6/rmw_fastrtps_shared_cpp/src/rmw_service.cpp#L75).
Also, rcl documentation says that not doing so, is undefined behavior https://github.com/ros2/rcl/blob/3a5c3a34191bd95491cb72c7458b9409452a28f0/rcl/include/rcl/context.h#L101-L106 (before, undefined meant nothing happened. Now it means a segfault).
Commits

b740f90 is using a Handle object to wrap the context capsule, and establishing a dependency of the node handle on the context handle. The other changes are just a consequence of this.
5f7f249 is adding some debug messages I will use in the buggy example.

Buggy example
The context is sometimes being destructed out of order, though it's hard to reproduce it.
Here is one example:


Example

Code
import rclpy
from rclpy.executors import SingleThreadedExecutor
from rclpy.node import Node
from std_msgs.msg import String


def main(args=None):
    rclpy.init(args=args)
    node = Node('talker')
    node2 = Node('asd')
    rclpy.shutdown()

if __name__ == '__main__':
    main()


Output
destroying rcl_node_t   140190542497472
destroying rcl_context_t   140190450323888
destroying rclpy_publisher_t   140190542497824
destroying rcl_clock_t   140190449713680
destroying rclpy_service_t   140190542497872
destroying rclpy_service_t   140190542497856
destroying rclpy_service_t   140190542497888
destroying rclpy_service_t   140190542497904
destroying rclpy_service_t   140190542497920
destroying rclpy_service_t   140190542497936
destroying rcl_node_t   140190542497952
destroying rclpy_publisher_t   140190542497968
destroying rcl_clock_t   140190375035248
destroying rclpy_service_t   140190542498016
destroying rclpy_service_t   140190542498000
destroying rclpy_service_t   140190542498032
destroying rclpy_service_t   140190542498048
destroying rclpy_service_t   140190542498064
destroying rclpy_service_t   140190542498080
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node
context being destructed
context destructed
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node



Conclusion
The context is being destructed out of order.
All the example where I observed this have two nodes (maybe someone is decrementing a reference twice (?)).



Original bug
In the branches where I'm moving the Participant to the context, the following test failed 
  
    
      rclpy/rclpy/test/test_handle.py
    
    
        Lines 77 to 98
      in
      d375c84
    
  
  
    

        
          
           def test_handle_does_not_destroy_requirements(): 
        

        
          
               context = rclpy.context.Context() 
        

        
          
               rclpy.init(context=context) 
        

        
          
            
        

        
          
               try: 
        

        
          
                   node1 = rclpy.create_node('test_handle_does_not_destroy_requirements1', context=context) 
        

        
          
                   node2 = rclpy.create_node('test_handle_does_not_destroy_requirements2', context=context) 
        

        
          
                   node2.handle.requires(node1.handle) 
        

        
          
            
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
                   with node2.handle: 
        

        
          
                       pass 
        

        
          
            
        

        
          
                   node2.handle.destroy() 
        

        
          
                   with pytest.raises(InvalidHandle): 
        

        
          
                       with node2.handle: 
        

        
          
                           pass 
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
               finally: 
        

        
          
                   rclpy.shutdown(context=context) 
        
    
  

.
Some interesting facts:

It always failed when I calling colcon test --packages-select rclpy
It didn't fail when calling python3 -m pytest -s test_handle.py
It did fail when calling python3 -m pytest -s test_handle.py::test_handle_does_not_destroy_requirements.

I have been debugging, and found that the objects are being destructed by the gc.
AFAIU, cpython gc doesn't ensure any destruction order (my understanding of cpython garbage collection process is really poor).","No conclusions yet, but I do have a workaround. The destruction order appears correct using ctx.handle.destroy(), but incorrect when done via the garbage collector. Destroying the handle when the context is shutdown works around the issue.
diff --git a/rclpy/rclpy/context.py b/rclpy/rclpy/context.py
index 76a2fcc..2a26696 100644
--- a/rclpy/rclpy/context.py
+++ b/rclpy/rclpy/context.py
@@ -59,6 +59,7 @@ class Context:
         with self._handle as capsule, self._lock:
             rclpy_implementation.rclpy_shutdown(capsule)
         self._call_on_shutdown_callbacks()
+        self.handle.destroy()
 
     def try_shutdown(self):
         """"""Shutdown this context, if not already shutdown.""""""
$ ./two_node_shutdown.py 
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying node
destroyed node
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying node
destroyed node
context being destructed
context destructed
delaying interpretter exit
destroying rcl_node_t   140172171982528
destroying rcl_context_t   140172050260376
destroying rclpy_publisher_t   140172171982880
destroying rcl_clock_t   140172050237280
destroying rclpy_service_t   140172171982928
destroying rclpy_service_t   140172171982912
destroying rclpy_service_t   140172171982944
destroying rclpy_service_t   140172171982960
destroying rclpy_service_t   140172171982976
destroying rclpy_service_t   140172171982992
destroying rcl_node_t   140172171983008
destroying rclpy_publisher_t   140172171983024
destroying rcl_clock_t   140171974628976
destroying rclpy_service_t   140172171983072
destroying rclpy_service_t   140172171983056
destroying rclpy_service_t   140172171983088
destroying rclpy_service_t   140172171983104
destroying rclpy_service_t   140172171983120
destroying rclpy_service_t   140172171983136",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,470,2019-12-03T20:27:04Z,2020-01-20T17:09:32Z,2020-01-20T17:09:39Z,CLOSED,False,105,61,10,https://github.com/ivanpauno,Context destruction order bug,2,"['bug', 'help wanted']",https://github.com/ros2/rclpy/pull/470,https://github.com/ivanpauno,6,https://github.com/ros2/rclpy/pull/470#issuecomment-565148226,"Intro
As part of ros2/rmw#183, I needed to ensure that the context is destructed after the nodes/publishers/etc. That's needed as now the Participant will be part of the context, and the Participant is needed in the destruction of most of the entities (e.g.: https://github.com/ros2/rmw_fastrtps/blob/a16c45ef11a19361a15c585497bf373a7ed0bae6/rmw_fastrtps_shared_cpp/src/rmw_service.cpp#L75).
Also, rcl documentation says that not doing so, is undefined behavior https://github.com/ros2/rcl/blob/3a5c3a34191bd95491cb72c7458b9409452a28f0/rcl/include/rcl/context.h#L101-L106 (before, undefined meant nothing happened. Now it means a segfault).
Commits

b740f90 is using a Handle object to wrap the context capsule, and establishing a dependency of the node handle on the context handle. The other changes are just a consequence of this.
5f7f249 is adding some debug messages I will use in the buggy example.

Buggy example
The context is sometimes being destructed out of order, though it's hard to reproduce it.
Here is one example:


Example

Code
import rclpy
from rclpy.executors import SingleThreadedExecutor
from rclpy.node import Node
from std_msgs.msg import String


def main(args=None):
    rclpy.init(args=args)
    node = Node('talker')
    node2 = Node('asd')
    rclpy.shutdown()

if __name__ == '__main__':
    main()


Output
destroying rcl_node_t   140190542497472
destroying rcl_context_t   140190450323888
destroying rclpy_publisher_t   140190542497824
destroying rcl_clock_t   140190449713680
destroying rclpy_service_t   140190542497872
destroying rclpy_service_t   140190542497856
destroying rclpy_service_t   140190542497888
destroying rclpy_service_t   140190542497904
destroying rclpy_service_t   140190542497920
destroying rclpy_service_t   140190542497936
destroying rcl_node_t   140190542497952
destroying rclpy_publisher_t   140190542497968
destroying rcl_clock_t   140190375035248
destroying rclpy_service_t   140190542498016
destroying rclpy_service_t   140190542498000
destroying rclpy_service_t   140190542498032
destroying rclpy_service_t   140190542498048
destroying rclpy_service_t   140190542498064
destroying rclpy_service_t   140190542498080
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node
context being destructed
context destructed
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node



Conclusion
The context is being destructed out of order.
All the example where I observed this have two nodes (maybe someone is decrementing a reference twice (?)).



Original bug
In the branches where I'm moving the Participant to the context, the following test failed 
  
    
      rclpy/rclpy/test/test_handle.py
    
    
        Lines 77 to 98
      in
      d375c84
    
  
  
    

        
          
           def test_handle_does_not_destroy_requirements(): 
        

        
          
               context = rclpy.context.Context() 
        

        
          
               rclpy.init(context=context) 
        

        
          
            
        

        
          
               try: 
        

        
          
                   node1 = rclpy.create_node('test_handle_does_not_destroy_requirements1', context=context) 
        

        
          
                   node2 = rclpy.create_node('test_handle_does_not_destroy_requirements2', context=context) 
        

        
          
                   node2.handle.requires(node1.handle) 
        

        
          
            
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
                   with node2.handle: 
        

        
          
                       pass 
        

        
          
            
        

        
          
                   node2.handle.destroy() 
        

        
          
                   with pytest.raises(InvalidHandle): 
        

        
          
                       with node2.handle: 
        

        
          
                           pass 
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
               finally: 
        

        
          
                   rclpy.shutdown(context=context) 
        
    
  

.
Some interesting facts:

It always failed when I calling colcon test --packages-select rclpy
It didn't fail when calling python3 -m pytest -s test_handle.py
It did fail when calling python3 -m pytest -s test_handle.py::test_handle_does_not_destroy_requirements.

I have been debugging, and found that the objects are being destructed by the gc.
AFAIU, cpython gc doesn't ensure any destruction order (my understanding of cpython garbage collection process is really poor).","No conclusions yet, but I do have a workaround. The destruction order appears correct using ctx.handle.destroy(), but incorrect when done via the garbage collector. Destroying the handle when the context is shutdown works around the issue.

Yeah, that fixes this specific problem.
But if we don't understand the bug, we may hit it again in the future and have surprising segfaults (e.g.: with handles of other capsules not being destructed in order).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,470,2019-12-03T20:27:04Z,2020-01-20T17:09:32Z,2020-01-20T17:09:39Z,CLOSED,False,105,61,10,https://github.com/ivanpauno,Context destruction order bug,2,"['bug', 'help wanted']",https://github.com/ros2/rclpy/pull/470,https://github.com/hidmic,7,https://github.com/ros2/rclpy/pull/470#issuecomment-565151773,"Intro
As part of ros2/rmw#183, I needed to ensure that the context is destructed after the nodes/publishers/etc. That's needed as now the Participant will be part of the context, and the Participant is needed in the destruction of most of the entities (e.g.: https://github.com/ros2/rmw_fastrtps/blob/a16c45ef11a19361a15c585497bf373a7ed0bae6/rmw_fastrtps_shared_cpp/src/rmw_service.cpp#L75).
Also, rcl documentation says that not doing so, is undefined behavior https://github.com/ros2/rcl/blob/3a5c3a34191bd95491cb72c7458b9409452a28f0/rcl/include/rcl/context.h#L101-L106 (before, undefined meant nothing happened. Now it means a segfault).
Commits

b740f90 is using a Handle object to wrap the context capsule, and establishing a dependency of the node handle on the context handle. The other changes are just a consequence of this.
5f7f249 is adding some debug messages I will use in the buggy example.

Buggy example
The context is sometimes being destructed out of order, though it's hard to reproduce it.
Here is one example:


Example

Code
import rclpy
from rclpy.executors import SingleThreadedExecutor
from rclpy.node import Node
from std_msgs.msg import String


def main(args=None):
    rclpy.init(args=args)
    node = Node('talker')
    node2 = Node('asd')
    rclpy.shutdown()

if __name__ == '__main__':
    main()


Output
destroying rcl_node_t   140190542497472
destroying rcl_context_t   140190450323888
destroying rclpy_publisher_t   140190542497824
destroying rcl_clock_t   140190449713680
destroying rclpy_service_t   140190542497872
destroying rclpy_service_t   140190542497856
destroying rclpy_service_t   140190542497888
destroying rclpy_service_t   140190542497904
destroying rclpy_service_t   140190542497920
destroying rclpy_service_t   140190542497936
destroying rcl_node_t   140190542497952
destroying rclpy_publisher_t   140190542497968
destroying rcl_clock_t   140190375035248
destroying rclpy_service_t   140190542498016
destroying rclpy_service_t   140190542498000
destroying rclpy_service_t   140190542498032
destroying rclpy_service_t   140190542498048
destroying rclpy_service_t   140190542498064
destroying rclpy_service_t   140190542498080
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node
context being destructed
context destructed
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node



Conclusion
The context is being destructed out of order.
All the example where I observed this have two nodes (maybe someone is decrementing a reference twice (?)).



Original bug
In the branches where I'm moving the Participant to the context, the following test failed 
  
    
      rclpy/rclpy/test/test_handle.py
    
    
        Lines 77 to 98
      in
      d375c84
    
  
  
    

        
          
           def test_handle_does_not_destroy_requirements(): 
        

        
          
               context = rclpy.context.Context() 
        

        
          
               rclpy.init(context=context) 
        

        
          
            
        

        
          
               try: 
        

        
          
                   node1 = rclpy.create_node('test_handle_does_not_destroy_requirements1', context=context) 
        

        
          
                   node2 = rclpy.create_node('test_handle_does_not_destroy_requirements2', context=context) 
        

        
          
                   node2.handle.requires(node1.handle) 
        

        
          
            
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
                   with node2.handle: 
        

        
          
                       pass 
        

        
          
            
        

        
          
                   node2.handle.destroy() 
        

        
          
                   with pytest.raises(InvalidHandle): 
        

        
          
                       with node2.handle: 
        

        
          
                           pass 
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
               finally: 
        

        
          
                   rclpy.shutdown(context=context) 
        
    
  

.
Some interesting facts:

It always failed when I calling colcon test --packages-select rclpy
It didn't fail when calling python3 -m pytest -s test_handle.py
It did fail when calling python3 -m pytest -s test_handle.py::test_handle_does_not_destroy_requirements.

I have been debugging, and found that the objects are being destructed by the gc.
AFAIU, cpython gc doesn't ensure any destruction order (my understanding of cpython garbage collection process is really poor).","but incorrect when done via the garbage collector.

This. Should test that the garbage collector behaves as we'd expect it to? If ref counting does not result in ordered destruction, then the Handle rationale falls apart.",True,{'THUMBS_UP': ['https://github.com/ivanpauno']}
ros2/rclpy,https://github.com/ros2/rclpy,470,2019-12-03T20:27:04Z,2020-01-20T17:09:32Z,2020-01-20T17:09:39Z,CLOSED,False,105,61,10,https://github.com/ivanpauno,Context destruction order bug,2,"['bug', 'help wanted']",https://github.com/ros2/rclpy/pull/470,https://github.com/sloretz,8,https://github.com/ros2/rclpy/pull/470#issuecomment-566742251,"Intro
As part of ros2/rmw#183, I needed to ensure that the context is destructed after the nodes/publishers/etc. That's needed as now the Participant will be part of the context, and the Participant is needed in the destruction of most of the entities (e.g.: https://github.com/ros2/rmw_fastrtps/blob/a16c45ef11a19361a15c585497bf373a7ed0bae6/rmw_fastrtps_shared_cpp/src/rmw_service.cpp#L75).
Also, rcl documentation says that not doing so, is undefined behavior https://github.com/ros2/rcl/blob/3a5c3a34191bd95491cb72c7458b9409452a28f0/rcl/include/rcl/context.h#L101-L106 (before, undefined meant nothing happened. Now it means a segfault).
Commits

b740f90 is using a Handle object to wrap the context capsule, and establishing a dependency of the node handle on the context handle. The other changes are just a consequence of this.
5f7f249 is adding some debug messages I will use in the buggy example.

Buggy example
The context is sometimes being destructed out of order, though it's hard to reproduce it.
Here is one example:


Example

Code
import rclpy
from rclpy.executors import SingleThreadedExecutor
from rclpy.node import Node
from std_msgs.msg import String


def main(args=None):
    rclpy.init(args=args)
    node = Node('talker')
    node2 = Node('asd')
    rclpy.shutdown()

if __name__ == '__main__':
    main()


Output
destroying rcl_node_t   140190542497472
destroying rcl_context_t   140190450323888
destroying rclpy_publisher_t   140190542497824
destroying rcl_clock_t   140190449713680
destroying rclpy_service_t   140190542497872
destroying rclpy_service_t   140190542497856
destroying rclpy_service_t   140190542497888
destroying rclpy_service_t   140190542497904
destroying rclpy_service_t   140190542497920
destroying rclpy_service_t   140190542497936
destroying rcl_node_t   140190542497952
destroying rclpy_publisher_t   140190542497968
destroying rcl_clock_t   140190375035248
destroying rclpy_service_t   140190542498016
destroying rclpy_service_t   140190542498000
destroying rclpy_service_t   140190542498032
destroying rclpy_service_t   140190542498048
destroying rclpy_service_t   140190542498064
destroying rclpy_service_t   140190542498080
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node
context being destructed
context destructed
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node



Conclusion
The context is being destructed out of order.
All the example where I observed this have two nodes (maybe someone is decrementing a reference twice (?)).



Original bug
In the branches where I'm moving the Participant to the context, the following test failed 
  
    
      rclpy/rclpy/test/test_handle.py
    
    
        Lines 77 to 98
      in
      d375c84
    
  
  
    

        
          
           def test_handle_does_not_destroy_requirements(): 
        

        
          
               context = rclpy.context.Context() 
        

        
          
               rclpy.init(context=context) 
        

        
          
            
        

        
          
               try: 
        

        
          
                   node1 = rclpy.create_node('test_handle_does_not_destroy_requirements1', context=context) 
        

        
          
                   node2 = rclpy.create_node('test_handle_does_not_destroy_requirements2', context=context) 
        

        
          
                   node2.handle.requires(node1.handle) 
        

        
          
            
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
                   with node2.handle: 
        

        
          
                       pass 
        

        
          
            
        

        
          
                   node2.handle.destroy() 
        

        
          
                   with pytest.raises(InvalidHandle): 
        

        
          
                       with node2.handle: 
        

        
          
                           pass 
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
               finally: 
        

        
          
                   rclpy.shutdown(context=context) 
        
    
  

.
Some interesting facts:

It always failed when I calling colcon test --packages-select rclpy
It didn't fail when calling python3 -m pytest -s test_handle.py
It did fail when calling python3 -m pytest -s test_handle.py::test_handle_does_not_destroy_requirements.

I have been debugging, and found that the objects are being destructed by the gc.
AFAIU, cpython gc doesn't ensure any destruction order (my understanding of cpython garbage collection process is really poor).","If ref counting does not result in ordered destruction, then the Handle rationale falls apart.

Yeah, that seems to be the case. It looks like the garbage collector is destroying Handle instances that are still referred to by other handles, which is an assumption the garbage collection part of Handle relies on.
If I modify the example so gc.collect() happens inside of main() then the objects are destroyed in the correct order. If I modify it so gc.collect() happens after main() returns, then it happens in the wrong order. Maybe this is a special case of the garbage collector when handling a group of objects that became an island? Regardless, solving this will require a scheme that destroys the rcl instances in order regardless of the order the PyCapsule's get garbage collected.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,470,2019-12-03T20:27:04Z,2020-01-20T17:09:32Z,2020-01-20T17:09:39Z,CLOSED,False,105,61,10,https://github.com/ivanpauno,Context destruction order bug,2,"['bug', 'help wanted']",https://github.com/ros2/rclpy/pull/470,https://github.com/ivanpauno,9,https://github.com/ros2/rclpy/pull/470#issuecomment-567058281,"Intro
As part of ros2/rmw#183, I needed to ensure that the context is destructed after the nodes/publishers/etc. That's needed as now the Participant will be part of the context, and the Participant is needed in the destruction of most of the entities (e.g.: https://github.com/ros2/rmw_fastrtps/blob/a16c45ef11a19361a15c585497bf373a7ed0bae6/rmw_fastrtps_shared_cpp/src/rmw_service.cpp#L75).
Also, rcl documentation says that not doing so, is undefined behavior https://github.com/ros2/rcl/blob/3a5c3a34191bd95491cb72c7458b9409452a28f0/rcl/include/rcl/context.h#L101-L106 (before, undefined meant nothing happened. Now it means a segfault).
Commits

b740f90 is using a Handle object to wrap the context capsule, and establishing a dependency of the node handle on the context handle. The other changes are just a consequence of this.
5f7f249 is adding some debug messages I will use in the buggy example.

Buggy example
The context is sometimes being destructed out of order, though it's hard to reproduce it.
Here is one example:


Example

Code
import rclpy
from rclpy.executors import SingleThreadedExecutor
from rclpy.node import Node
from std_msgs.msg import String


def main(args=None):
    rclpy.init(args=args)
    node = Node('talker')
    node2 = Node('asd')
    rclpy.shutdown()

if __name__ == '__main__':
    main()


Output
destroying rcl_node_t   140190542497472
destroying rcl_context_t   140190450323888
destroying rclpy_publisher_t   140190542497824
destroying rcl_clock_t   140190449713680
destroying rclpy_service_t   140190542497872
destroying rclpy_service_t   140190542497856
destroying rclpy_service_t   140190542497888
destroying rclpy_service_t   140190542497904
destroying rclpy_service_t   140190542497920
destroying rclpy_service_t   140190542497936
destroying rcl_node_t   140190542497952
destroying rclpy_publisher_t   140190542497968
destroying rcl_clock_t   140190375035248
destroying rclpy_service_t   140190542498016
destroying rclpy_service_t   140190542498000
destroying rclpy_service_t   140190542498032
destroying rclpy_service_t   140190542498048
destroying rclpy_service_t   140190542498064
destroying rclpy_service_t   140190542498080
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node
context being destructed
context destructed
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node



Conclusion
The context is being destructed out of order.
All the example where I observed this have two nodes (maybe someone is decrementing a reference twice (?)).



Original bug
In the branches where I'm moving the Participant to the context, the following test failed 
  
    
      rclpy/rclpy/test/test_handle.py
    
    
        Lines 77 to 98
      in
      d375c84
    
  
  
    

        
          
           def test_handle_does_not_destroy_requirements(): 
        

        
          
               context = rclpy.context.Context() 
        

        
          
               rclpy.init(context=context) 
        

        
          
            
        

        
          
               try: 
        

        
          
                   node1 = rclpy.create_node('test_handle_does_not_destroy_requirements1', context=context) 
        

        
          
                   node2 = rclpy.create_node('test_handle_does_not_destroy_requirements2', context=context) 
        

        
          
                   node2.handle.requires(node1.handle) 
        

        
          
            
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
                   with node2.handle: 
        

        
          
                       pass 
        

        
          
            
        

        
          
                   node2.handle.destroy() 
        

        
          
                   with pytest.raises(InvalidHandle): 
        

        
          
                       with node2.handle: 
        

        
          
                           pass 
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
               finally: 
        

        
          
                   rclpy.shutdown(context=context) 
        
    
  

.
Some interesting facts:

It always failed when I calling colcon test --packages-select rclpy
It didn't fail when calling python3 -m pytest -s test_handle.py
It did fail when calling python3 -m pytest -s test_handle.py::test_handle_does_not_destroy_requirements.

I have been debugging, and found that the objects are being destructed by the gc.
AFAIU, cpython gc doesn't ensure any destruction order (my understanding of cpython garbage collection process is really poor).","Yeah, that seems to be the case. It looks like the garbage collector is destroying Handle instances that are still referred to by other handles, which is an assumption the garbage collection part of Handle relies on.
If I modify the example so gc.collect() happens inside of main() then the objects are destroyed in the correct order. If I modify it so gc.collect() happens after main() returns, then it happens in the wrong order. Maybe this is a special case of the garbage collector when handling a group of objects that became an island? Regardless, solving this will require a scheme that destroys the rcl instances in order regardless of the order the PyCapsule's get garbage collected.

I'm surprised that Python doesn't ensure destruction order in this case at all, where there is no reference cycle nor anything strange, but I reached the same conclusion.
About how to solve the problem, I'm thinking about implementing the handle type in C:
Roughly:
typedef struct rclpy_handle_t {
  void * ptr; // opaque pointer to the wrapped object.
  size_t ref_count; // Reference count.
  rclpy_handle_t ** dependencies; // array of pointers to dependencies.
  size_t num_of_dependencies; // size of the array.
} rclpy_handle_t;

// Start with ref count 1, empty dependency list.
// A deleter might be added to the signature, though we just use malloc/free in rclpy.
rclpy_handle_t *
rclpy_create_handle(void * ptr);

// Increments ref count of the dependency, and add the dependency to the dependent list.
void
rclpy_handle_add_dependency(rclpy_handle_t * dependent, rclpy_handle_t * dependency);

// Decrements the ref count of the handle.
// If reaches zero:
// - Calls `rclpy_handle_dec_ref` of its dependencies.
// - Deallocates the handels.
void
rclpy_handle_dec_ref(rclpy_handle_t * handle);
We can wrap that in a normal PyCapsule and create a python Handle class based on that.
@hidmic @sloretz @dirk-thomas Does that sound reasonable?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,470,2019-12-03T20:27:04Z,2020-01-20T17:09:32Z,2020-01-20T17:09:39Z,CLOSED,False,105,61,10,https://github.com/ivanpauno,Context destruction order bug,2,"['bug', 'help wanted']",https://github.com/ros2/rclpy/pull/470,https://github.com/ivanpauno,10,https://github.com/ros2/rclpy/pull/470#issuecomment-570629990,"Intro
As part of ros2/rmw#183, I needed to ensure that the context is destructed after the nodes/publishers/etc. That's needed as now the Participant will be part of the context, and the Participant is needed in the destruction of most of the entities (e.g.: https://github.com/ros2/rmw_fastrtps/blob/a16c45ef11a19361a15c585497bf373a7ed0bae6/rmw_fastrtps_shared_cpp/src/rmw_service.cpp#L75).
Also, rcl documentation says that not doing so, is undefined behavior https://github.com/ros2/rcl/blob/3a5c3a34191bd95491cb72c7458b9409452a28f0/rcl/include/rcl/context.h#L101-L106 (before, undefined meant nothing happened. Now it means a segfault).
Commits

b740f90 is using a Handle object to wrap the context capsule, and establishing a dependency of the node handle on the context handle. The other changes are just a consequence of this.
5f7f249 is adding some debug messages I will use in the buggy example.

Buggy example
The context is sometimes being destructed out of order, though it's hard to reproduce it.
Here is one example:


Example

Code
import rclpy
from rclpy.executors import SingleThreadedExecutor
from rclpy.node import Node
from std_msgs.msg import String


def main(args=None):
    rclpy.init(args=args)
    node = Node('talker')
    node2 = Node('asd')
    rclpy.shutdown()

if __name__ == '__main__':
    main()


Output
destroying rcl_node_t   140190542497472
destroying rcl_context_t   140190450323888
destroying rclpy_publisher_t   140190542497824
destroying rcl_clock_t   140190449713680
destroying rclpy_service_t   140190542497872
destroying rclpy_service_t   140190542497856
destroying rclpy_service_t   140190542497888
destroying rclpy_service_t   140190542497904
destroying rclpy_service_t   140190542497920
destroying rclpy_service_t   140190542497936
destroying rcl_node_t   140190542497952
destroying rclpy_publisher_t   140190542497968
destroying rcl_clock_t   140190375035248
destroying rclpy_service_t   140190542498016
destroying rclpy_service_t   140190542498000
destroying rclpy_service_t   140190542498032
destroying rclpy_service_t   140190542498048
destroying rclpy_service_t   140190542498064
destroying rclpy_service_t   140190542498080
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node
context being destructed
context destructed
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node



Conclusion
The context is being destructed out of order.
All the example where I observed this have two nodes (maybe someone is decrementing a reference twice (?)).



Original bug
In the branches where I'm moving the Participant to the context, the following test failed 
  
    
      rclpy/rclpy/test/test_handle.py
    
    
        Lines 77 to 98
      in
      d375c84
    
  
  
    

        
          
           def test_handle_does_not_destroy_requirements(): 
        

        
          
               context = rclpy.context.Context() 
        

        
          
               rclpy.init(context=context) 
        

        
          
            
        

        
          
               try: 
        

        
          
                   node1 = rclpy.create_node('test_handle_does_not_destroy_requirements1', context=context) 
        

        
          
                   node2 = rclpy.create_node('test_handle_does_not_destroy_requirements2', context=context) 
        

        
          
                   node2.handle.requires(node1.handle) 
        

        
          
            
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
                   with node2.handle: 
        

        
          
                       pass 
        

        
          
            
        

        
          
                   node2.handle.destroy() 
        

        
          
                   with pytest.raises(InvalidHandle): 
        

        
          
                       with node2.handle: 
        

        
          
                           pass 
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
               finally: 
        

        
          
                   rclpy.shutdown(context=context) 
        
    
  

.
Some interesting facts:

It always failed when I calling colcon test --packages-select rclpy
It didn't fail when calling python3 -m pytest -s test_handle.py
It did fail when calling python3 -m pytest -s test_handle.py::test_handle_does_not_destroy_requirements.

I have been debugging, and found that the objects are being destructed by the gc.
AFAIU, cpython gc doesn't ensure any destruction order (my understanding of cpython garbage collection process is really poor).","I tested a bit more today, and I think I understand way Python doesn't destruct the object without respecting the order:
Nodes create reference cycles when constructing a TimeSource and a ParameterService:

  
    
      rclpy/rclpy/rclpy/node.py
    
    
        Lines 203 to 207
      in
      d2c30d9
    
  
  
    

        
          
           self._time_source = TimeSource(node=self) 
        

        
          
           self._time_source.attach_clock(self._clock) 
        

        
          
            
        

        
          
           if start_parameter_services: 
        

        
          
               self._parameter_service = ParameterService(self) 
        
    
  


That means that all Node objects can't be destructed by reference counting and are destructed by the gc.
As nodes also mantain a reference to the node handle and the context, and the context mantain a reference of the context handle, that means that all those objects also can't be destructed by reference counting and must be destructed by the gc.
The gc doesn't ensure any destruction order (as that would be impossible).
The Handle trick ""usually"" worked well because how the gc is coded, but that seems to by just by chance and not ensured at all.
I commented the mentioned lines, and the example works correctly. It's pretty hard to confirm that my supposal is correct, but I think it is.
I don't think that the problem is that we're creating reference cycles when creating nodes (which probably is not ideal), the problem is the whole Handle concept.
If we are careful enough to to not create any reference cycle, ensuring objects are destructed by ref counting, this might work. But if a user happens to make that same mistake, they'll face the same problem. And triaging this kind of problems is usually a rabbit hole.
I think that all this ""dependency order of objects"" problem has to be solved in C, I don't think that it can be solved in Python.
@dirk-thomas @sloretz @hidmic Friedly ping. I proposed in my last comment a solution, I would like to have some feedback.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,470,2019-12-03T20:27:04Z,2020-01-20T17:09:32Z,2020-01-20T17:09:39Z,CLOSED,False,105,61,10,https://github.com/ivanpauno,Context destruction order bug,2,"['bug', 'help wanted']",https://github.com/ros2/rclpy/pull/470,https://github.com/hidmic,11,https://github.com/ros2/rclpy/pull/470#issuecomment-570656088,"Intro
As part of ros2/rmw#183, I needed to ensure that the context is destructed after the nodes/publishers/etc. That's needed as now the Participant will be part of the context, and the Participant is needed in the destruction of most of the entities (e.g.: https://github.com/ros2/rmw_fastrtps/blob/a16c45ef11a19361a15c585497bf373a7ed0bae6/rmw_fastrtps_shared_cpp/src/rmw_service.cpp#L75).
Also, rcl documentation says that not doing so, is undefined behavior https://github.com/ros2/rcl/blob/3a5c3a34191bd95491cb72c7458b9409452a28f0/rcl/include/rcl/context.h#L101-L106 (before, undefined meant nothing happened. Now it means a segfault).
Commits

b740f90 is using a Handle object to wrap the context capsule, and establishing a dependency of the node handle on the context handle. The other changes are just a consequence of this.
5f7f249 is adding some debug messages I will use in the buggy example.

Buggy example
The context is sometimes being destructed out of order, though it's hard to reproduce it.
Here is one example:


Example

Code
import rclpy
from rclpy.executors import SingleThreadedExecutor
from rclpy.node import Node
from std_msgs.msg import String


def main(args=None):
    rclpy.init(args=args)
    node = Node('talker')
    node2 = Node('asd')
    rclpy.shutdown()

if __name__ == '__main__':
    main()


Output
destroying rcl_node_t   140190542497472
destroying rcl_context_t   140190450323888
destroying rclpy_publisher_t   140190542497824
destroying rcl_clock_t   140190449713680
destroying rclpy_service_t   140190542497872
destroying rclpy_service_t   140190542497856
destroying rclpy_service_t   140190542497888
destroying rclpy_service_t   140190542497904
destroying rclpy_service_t   140190542497920
destroying rclpy_service_t   140190542497936
destroying rcl_node_t   140190542497952
destroying rclpy_publisher_t   140190542497968
destroying rcl_clock_t   140190375035248
destroying rclpy_service_t   140190542498016
destroying rclpy_service_t   140190542498000
destroying rclpy_service_t   140190542498032
destroying rclpy_service_t   140190542498048
destroying rclpy_service_t   140190542498064
destroying rclpy_service_t   140190542498080
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node
context being destructed
context destructed
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node



Conclusion
The context is being destructed out of order.
All the example where I observed this have two nodes (maybe someone is decrementing a reference twice (?)).



Original bug
In the branches where I'm moving the Participant to the context, the following test failed 
  
    
      rclpy/rclpy/test/test_handle.py
    
    
        Lines 77 to 98
      in
      d375c84
    
  
  
    

        
          
           def test_handle_does_not_destroy_requirements(): 
        

        
          
               context = rclpy.context.Context() 
        

        
          
               rclpy.init(context=context) 
        

        
          
            
        

        
          
               try: 
        

        
          
                   node1 = rclpy.create_node('test_handle_does_not_destroy_requirements1', context=context) 
        

        
          
                   node2 = rclpy.create_node('test_handle_does_not_destroy_requirements2', context=context) 
        

        
          
                   node2.handle.requires(node1.handle) 
        

        
          
            
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
                   with node2.handle: 
        

        
          
                       pass 
        

        
          
            
        

        
          
                   node2.handle.destroy() 
        

        
          
                   with pytest.raises(InvalidHandle): 
        

        
          
                       with node2.handle: 
        

        
          
                           pass 
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
               finally: 
        

        
          
                   rclpy.shutdown(context=context) 
        
    
  

.
Some interesting facts:

It always failed when I calling colcon test --packages-select rclpy
It didn't fail when calling python3 -m pytest -s test_handle.py
It did fail when calling python3 -m pytest -s test_handle.py::test_handle_does_not_destroy_requirements.

I have been debugging, and found that the objects are being destructed by the gc.
AFAIU, cpython gc doesn't ensure any destruction order (my understanding of cpython garbage collection process is really poor).","Aha! That's fun. I see why we may need to extend rclpy's C extension to deal with this too. I'd say, let's go for it. It's definitely a huge bug in Eloquent and something I think we'd want fixed for Foxy.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,470,2019-12-03T20:27:04Z,2020-01-20T17:09:32Z,2020-01-20T17:09:39Z,CLOSED,False,105,61,10,https://github.com/ivanpauno,Context destruction order bug,2,"['bug', 'help wanted']",https://github.com/ros2/rclpy/pull/470,https://github.com/dirk-thomas,12,https://github.com/ros2/rclpy/pull/470#issuecomment-570657466,"Intro
As part of ros2/rmw#183, I needed to ensure that the context is destructed after the nodes/publishers/etc. That's needed as now the Participant will be part of the context, and the Participant is needed in the destruction of most of the entities (e.g.: https://github.com/ros2/rmw_fastrtps/blob/a16c45ef11a19361a15c585497bf373a7ed0bae6/rmw_fastrtps_shared_cpp/src/rmw_service.cpp#L75).
Also, rcl documentation says that not doing so, is undefined behavior https://github.com/ros2/rcl/blob/3a5c3a34191bd95491cb72c7458b9409452a28f0/rcl/include/rcl/context.h#L101-L106 (before, undefined meant nothing happened. Now it means a segfault).
Commits

b740f90 is using a Handle object to wrap the context capsule, and establishing a dependency of the node handle on the context handle. The other changes are just a consequence of this.
5f7f249 is adding some debug messages I will use in the buggy example.

Buggy example
The context is sometimes being destructed out of order, though it's hard to reproduce it.
Here is one example:


Example

Code
import rclpy
from rclpy.executors import SingleThreadedExecutor
from rclpy.node import Node
from std_msgs.msg import String


def main(args=None):
    rclpy.init(args=args)
    node = Node('talker')
    node2 = Node('asd')
    rclpy.shutdown()

if __name__ == '__main__':
    main()


Output
destroying rcl_node_t   140190542497472
destroying rcl_context_t   140190450323888
destroying rclpy_publisher_t   140190542497824
destroying rcl_clock_t   140190449713680
destroying rclpy_service_t   140190542497872
destroying rclpy_service_t   140190542497856
destroying rclpy_service_t   140190542497888
destroying rclpy_service_t   140190542497904
destroying rclpy_service_t   140190542497920
destroying rclpy_service_t   140190542497936
destroying rcl_node_t   140190542497952
destroying rclpy_publisher_t   140190542497968
destroying rcl_clock_t   140190375035248
destroying rclpy_service_t   140190542498016
destroying rclpy_service_t   140190542498000
destroying rclpy_service_t   140190542498032
destroying rclpy_service_t   140190542498048
destroying rclpy_service_t   140190542498064
destroying rclpy_service_t   140190542498080
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node
context being destructed
context destructed
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node



Conclusion
The context is being destructed out of order.
All the example where I observed this have two nodes (maybe someone is decrementing a reference twice (?)).



Original bug
In the branches where I'm moving the Participant to the context, the following test failed 
  
    
      rclpy/rclpy/test/test_handle.py
    
    
        Lines 77 to 98
      in
      d375c84
    
  
  
    

        
          
           def test_handle_does_not_destroy_requirements(): 
        

        
          
               context = rclpy.context.Context() 
        

        
          
               rclpy.init(context=context) 
        

        
          
            
        

        
          
               try: 
        

        
          
                   node1 = rclpy.create_node('test_handle_does_not_destroy_requirements1', context=context) 
        

        
          
                   node2 = rclpy.create_node('test_handle_does_not_destroy_requirements2', context=context) 
        

        
          
                   node2.handle.requires(node1.handle) 
        

        
          
            
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
                   with node2.handle: 
        

        
          
                       pass 
        

        
          
            
        

        
          
                   node2.handle.destroy() 
        

        
          
                   with pytest.raises(InvalidHandle): 
        

        
          
                       with node2.handle: 
        

        
          
                           pass 
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
               finally: 
        

        
          
                   rclpy.shutdown(context=context) 
        
    
  

.
Some interesting facts:

It always failed when I calling colcon test --packages-select rclpy
It didn't fail when calling python3 -m pytest -s test_handle.py
It did fail when calling python3 -m pytest -s test_handle.py::test_handle_does_not_destroy_requirements.

I have been debugging, and found that the objects are being destructed by the gc.
AFAIU, cpython gc doesn't ensure any destruction order (my understanding of cpython garbage collection process is really poor).","Nodes create reference cycles when constructing a TimeSource and a ParameterService:
That means that all Node objects can't be destructed by reference counting and are destructed by the gc.

Would breaking these cycles solve the problem? If yes, I would suggest to do that instead of a custom handle class.
E.g. considering the same in C++ we wouldn't use shared_ptr between the objects leading to a ""island"" which would never be cleaned up. Instead we would break the cycle somewhere using a weak_ptr.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,470,2019-12-03T20:27:04Z,2020-01-20T17:09:32Z,2020-01-20T17:09:39Z,CLOSED,False,105,61,10,https://github.com/ivanpauno,Context destruction order bug,2,"['bug', 'help wanted']",https://github.com/ros2/rclpy/pull/470,https://github.com/sloretz,13,https://github.com/ros2/rclpy/pull/470#issuecomment-570660962,"Intro
As part of ros2/rmw#183, I needed to ensure that the context is destructed after the nodes/publishers/etc. That's needed as now the Participant will be part of the context, and the Participant is needed in the destruction of most of the entities (e.g.: https://github.com/ros2/rmw_fastrtps/blob/a16c45ef11a19361a15c585497bf373a7ed0bae6/rmw_fastrtps_shared_cpp/src/rmw_service.cpp#L75).
Also, rcl documentation says that not doing so, is undefined behavior https://github.com/ros2/rcl/blob/3a5c3a34191bd95491cb72c7458b9409452a28f0/rcl/include/rcl/context.h#L101-L106 (before, undefined meant nothing happened. Now it means a segfault).
Commits

b740f90 is using a Handle object to wrap the context capsule, and establishing a dependency of the node handle on the context handle. The other changes are just a consequence of this.
5f7f249 is adding some debug messages I will use in the buggy example.

Buggy example
The context is sometimes being destructed out of order, though it's hard to reproduce it.
Here is one example:


Example

Code
import rclpy
from rclpy.executors import SingleThreadedExecutor
from rclpy.node import Node
from std_msgs.msg import String


def main(args=None):
    rclpy.init(args=args)
    node = Node('talker')
    node2 = Node('asd')
    rclpy.shutdown()

if __name__ == '__main__':
    main()


Output
destroying rcl_node_t   140190542497472
destroying rcl_context_t   140190450323888
destroying rclpy_publisher_t   140190542497824
destroying rcl_clock_t   140190449713680
destroying rclpy_service_t   140190542497872
destroying rclpy_service_t   140190542497856
destroying rclpy_service_t   140190542497888
destroying rclpy_service_t   140190542497904
destroying rclpy_service_t   140190542497920
destroying rclpy_service_t   140190542497936
destroying rcl_node_t   140190542497952
destroying rclpy_publisher_t   140190542497968
destroying rcl_clock_t   140190375035248
destroying rclpy_service_t   140190542498016
destroying rclpy_service_t   140190542498000
destroying rclpy_service_t   140190542498032
destroying rclpy_service_t   140190542498048
destroying rclpy_service_t   140190542498064
destroying rclpy_service_t   140190542498080
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node
context being destructed
context destructed
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node



Conclusion
The context is being destructed out of order.
All the example where I observed this have two nodes (maybe someone is decrementing a reference twice (?)).



Original bug
In the branches where I'm moving the Participant to the context, the following test failed 
  
    
      rclpy/rclpy/test/test_handle.py
    
    
        Lines 77 to 98
      in
      d375c84
    
  
  
    

        
          
           def test_handle_does_not_destroy_requirements(): 
        

        
          
               context = rclpy.context.Context() 
        

        
          
               rclpy.init(context=context) 
        

        
          
            
        

        
          
               try: 
        

        
          
                   node1 = rclpy.create_node('test_handle_does_not_destroy_requirements1', context=context) 
        

        
          
                   node2 = rclpy.create_node('test_handle_does_not_destroy_requirements2', context=context) 
        

        
          
                   node2.handle.requires(node1.handle) 
        

        
          
            
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
                   with node2.handle: 
        

        
          
                       pass 
        

        
          
            
        

        
          
                   node2.handle.destroy() 
        

        
          
                   with pytest.raises(InvalidHandle): 
        

        
          
                       with node2.handle: 
        

        
          
                           pass 
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
               finally: 
        

        
          
                   rclpy.shutdown(context=context) 
        
    
  

.
Some interesting facts:

It always failed when I calling colcon test --packages-select rclpy
It didn't fail when calling python3 -m pytest -s test_handle.py
It did fail when calling python3 -m pytest -s test_handle.py::test_handle_does_not_destroy_requirements.

I have been debugging, and found that the objects are being destructed by the gc.
AFAIU, cpython gc doesn't ensure any destruction order (my understanding of cpython garbage collection process is really poor).","We can wrap that in a normal PyCapsule

I'm not sure I understand here. Would rclpy_create_context() return a PyCapsule with a pointer to an instance of rclpy_handle_t with the PyCapsule name still being ""rcl_context_t""?

and create a python Handle class based on that.

What's the separation between rclpy_handle_t and class Handle? What is each responsible for?
I think I understand how rclpy_handle_t would work if it is garbage collected, but how would it support being explicitly destroyed? IIUC Handle.destroy() tries to destroy the object right away. Any handles that depend on it get destroyed first. The catch is if a handle is being used (like a subscription is in the wait set in rcl_wait()), then the handle gets marked for destruction and the last user to be done with the handle destroys it. I think this would need more information then rclpy_handle_t has: a way to tell if a handle is being used, a way to tell if the handle should be destroyed when its done being used, and a way to traverse the the DAG from an object to other objects that depend on it. Would this be part of rclpy_handle_t, or is the thought that it will be implemented in Handle above rclpy_handle_t?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,470,2019-12-03T20:27:04Z,2020-01-20T17:09:32Z,2020-01-20T17:09:39Z,CLOSED,False,105,61,10,https://github.com/ivanpauno,Context destruction order bug,2,"['bug', 'help wanted']",https://github.com/ros2/rclpy/pull/470,https://github.com/ivanpauno,14,https://github.com/ros2/rclpy/pull/470#issuecomment-570679041,"Intro
As part of ros2/rmw#183, I needed to ensure that the context is destructed after the nodes/publishers/etc. That's needed as now the Participant will be part of the context, and the Participant is needed in the destruction of most of the entities (e.g.: https://github.com/ros2/rmw_fastrtps/blob/a16c45ef11a19361a15c585497bf373a7ed0bae6/rmw_fastrtps_shared_cpp/src/rmw_service.cpp#L75).
Also, rcl documentation says that not doing so, is undefined behavior https://github.com/ros2/rcl/blob/3a5c3a34191bd95491cb72c7458b9409452a28f0/rcl/include/rcl/context.h#L101-L106 (before, undefined meant nothing happened. Now it means a segfault).
Commits

b740f90 is using a Handle object to wrap the context capsule, and establishing a dependency of the node handle on the context handle. The other changes are just a consequence of this.
5f7f249 is adding some debug messages I will use in the buggy example.

Buggy example
The context is sometimes being destructed out of order, though it's hard to reproduce it.
Here is one example:


Example

Code
import rclpy
from rclpy.executors import SingleThreadedExecutor
from rclpy.node import Node
from std_msgs.msg import String


def main(args=None):
    rclpy.init(args=args)
    node = Node('talker')
    node2 = Node('asd')
    rclpy.shutdown()

if __name__ == '__main__':
    main()


Output
destroying rcl_node_t   140190542497472
destroying rcl_context_t   140190450323888
destroying rclpy_publisher_t   140190542497824
destroying rcl_clock_t   140190449713680
destroying rclpy_service_t   140190542497872
destroying rclpy_service_t   140190542497856
destroying rclpy_service_t   140190542497888
destroying rclpy_service_t   140190542497904
destroying rclpy_service_t   140190542497920
destroying rclpy_service_t   140190542497936
destroying rcl_node_t   140190542497952
destroying rclpy_publisher_t   140190542497968
destroying rcl_clock_t   140190375035248
destroying rclpy_service_t   140190542498016
destroying rclpy_service_t   140190542498000
destroying rclpy_service_t   140190542498032
destroying rclpy_service_t   140190542498048
destroying rclpy_service_t   140190542498064
destroying rclpy_service_t   140190542498080
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node
context being destructed
context destructed
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node



Conclusion
The context is being destructed out of order.
All the example where I observed this have two nodes (maybe someone is decrementing a reference twice (?)).



Original bug
In the branches where I'm moving the Participant to the context, the following test failed 
  
    
      rclpy/rclpy/test/test_handle.py
    
    
        Lines 77 to 98
      in
      d375c84
    
  
  
    

        
          
           def test_handle_does_not_destroy_requirements(): 
        

        
          
               context = rclpy.context.Context() 
        

        
          
               rclpy.init(context=context) 
        

        
          
            
        

        
          
               try: 
        

        
          
                   node1 = rclpy.create_node('test_handle_does_not_destroy_requirements1', context=context) 
        

        
          
                   node2 = rclpy.create_node('test_handle_does_not_destroy_requirements2', context=context) 
        

        
          
                   node2.handle.requires(node1.handle) 
        

        
          
            
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
                   with node2.handle: 
        

        
          
                       pass 
        

        
          
            
        

        
          
                   node2.handle.destroy() 
        

        
          
                   with pytest.raises(InvalidHandle): 
        

        
          
                       with node2.handle: 
        

        
          
                           pass 
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
               finally: 
        

        
          
                   rclpy.shutdown(context=context) 
        
    
  

.
Some interesting facts:

It always failed when I calling colcon test --packages-select rclpy
It didn't fail when calling python3 -m pytest -s test_handle.py
It did fail when calling python3 -m pytest -s test_handle.py::test_handle_does_not_destroy_requirements.

I have been debugging, and found that the objects are being destructed by the gc.
AFAIU, cpython gc doesn't ensure any destruction order (my understanding of cpython garbage collection process is really poor).","Would breaking these cycles solve the problem? If yes, I would suggest to do that instead of a custom handle class.

That partially solves the problem. The problem is that if the user creates any reference cycle, and one object in that cycle references a Node, then that node can't be destroyed by reference counting more.
Then, the Handle trick for ensuring destruction order doesn't work and the user have an strange segmentation fault (or maybe something hangs, or some other strange error).
And the ""python style"" is that you don't have to worry about if you created a reference cycle or not, your objects will at some point be collected and destructed without causing problems. Conditioning users to not create reference cycles wouldn't be much ""Pythonic"".
And yes, we shouldn't create reference cycles in rclpy.

I'm not sure I understand here. Would rclpy_create_context() return a PyCapsule with a pointer to an instance of rclpy_handle_t with the PyCapsule name still being ""rcl_context_t""?

I think that's ok, maybe a little strange though.
It's also true that after this, all places that were expecting a capsule to a rcl object will get a handle to a rclpy_handle_t, and an extra step must be done to get the pointer to the rcl object.

IIUC Handle.destroy() tries to destroy the object right away. Any handles that depend on it get destroyed first. The catch is if a handle is being used (like a subscription is in the wait set in rcl_wait()), then the handle gets marked for destruction and the last user to be done with the handle destroys it. I think this would need more information then rclpy_handle_t has: a way to tell if a handle is being used, a way to tell if the handle should be destroyed when its done being used, and a way to traverse the the DAG from an object to other objects that depend on it. Would this be part of rclpy_handle_t, or is the thought that it will be implemented in Handle above rclpy_handle_t?

That's a good question.
Currently, when a handle is destroyed also their dependents are destroyed (i.e. if someone called dependent_handle.requires(dependency_handle), doing dependency_handle.destroy() destroy boths).
I find that really strange. What I think should happen is that if someone call dependency_handle.destroy(), the ref count of the (dependecy_)handle should be decremented, and the object shouldn't be actually destroyed until the dependents are destroyed too (and not force the dependents to be destructed at the moment).
Following that idea, what should happen when someone call handle.destroy is that the reference count of the wrapped rclpy_handle_t should be decremented and the capsule destroyed.
That would not actually destroy the rcl object, until all the other rclpy_handle_t objects that added it as a dependency are destroyed. In that case, the reference count of all the stored dependencies in rclpy_handle_t are decremented, and the stored rcl object is destroyed.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,470,2019-12-03T20:27:04Z,2020-01-20T17:09:32Z,2020-01-20T17:09:39Z,CLOSED,False,105,61,10,https://github.com/ivanpauno,Context destruction order bug,2,"['bug', 'help wanted']",https://github.com/ros2/rclpy/pull/470,https://github.com/dirk-thomas,15,https://github.com/ros2/rclpy/pull/470#issuecomment-570682077,"Intro
As part of ros2/rmw#183, I needed to ensure that the context is destructed after the nodes/publishers/etc. That's needed as now the Participant will be part of the context, and the Participant is needed in the destruction of most of the entities (e.g.: https://github.com/ros2/rmw_fastrtps/blob/a16c45ef11a19361a15c585497bf373a7ed0bae6/rmw_fastrtps_shared_cpp/src/rmw_service.cpp#L75).
Also, rcl documentation says that not doing so, is undefined behavior https://github.com/ros2/rcl/blob/3a5c3a34191bd95491cb72c7458b9409452a28f0/rcl/include/rcl/context.h#L101-L106 (before, undefined meant nothing happened. Now it means a segfault).
Commits

b740f90 is using a Handle object to wrap the context capsule, and establishing a dependency of the node handle on the context handle. The other changes are just a consequence of this.
5f7f249 is adding some debug messages I will use in the buggy example.

Buggy example
The context is sometimes being destructed out of order, though it's hard to reproduce it.
Here is one example:


Example

Code
import rclpy
from rclpy.executors import SingleThreadedExecutor
from rclpy.node import Node
from std_msgs.msg import String


def main(args=None):
    rclpy.init(args=args)
    node = Node('talker')
    node2 = Node('asd')
    rclpy.shutdown()

if __name__ == '__main__':
    main()


Output
destroying rcl_node_t   140190542497472
destroying rcl_context_t   140190450323888
destroying rclpy_publisher_t   140190542497824
destroying rcl_clock_t   140190449713680
destroying rclpy_service_t   140190542497872
destroying rclpy_service_t   140190542497856
destroying rclpy_service_t   140190542497888
destroying rclpy_service_t   140190542497904
destroying rclpy_service_t   140190542497920
destroying rclpy_service_t   140190542497936
destroying rcl_node_t   140190542497952
destroying rclpy_publisher_t   140190542497968
destroying rcl_clock_t   140190375035248
destroying rclpy_service_t   140190542498016
destroying rclpy_service_t   140190542498000
destroying rclpy_service_t   140190542498032
destroying rclpy_service_t   140190542498048
destroying rclpy_service_t   140190542498064
destroying rclpy_service_t   140190542498080
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node
context being destructed
context destructed
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node



Conclusion
The context is being destructed out of order.
All the example where I observed this have two nodes (maybe someone is decrementing a reference twice (?)).



Original bug
In the branches where I'm moving the Participant to the context, the following test failed 
  
    
      rclpy/rclpy/test/test_handle.py
    
    
        Lines 77 to 98
      in
      d375c84
    
  
  
    

        
          
           def test_handle_does_not_destroy_requirements(): 
        

        
          
               context = rclpy.context.Context() 
        

        
          
               rclpy.init(context=context) 
        

        
          
            
        

        
          
               try: 
        

        
          
                   node1 = rclpy.create_node('test_handle_does_not_destroy_requirements1', context=context) 
        

        
          
                   node2 = rclpy.create_node('test_handle_does_not_destroy_requirements2', context=context) 
        

        
          
                   node2.handle.requires(node1.handle) 
        

        
          
            
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
                   with node2.handle: 
        

        
          
                       pass 
        

        
          
            
        

        
          
                   node2.handle.destroy() 
        

        
          
                   with pytest.raises(InvalidHandle): 
        

        
          
                       with node2.handle: 
        

        
          
                           pass 
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
               finally: 
        

        
          
                   rclpy.shutdown(context=context) 
        
    
  

.
Some interesting facts:

It always failed when I calling colcon test --packages-select rclpy
It didn't fail when calling python3 -m pytest -s test_handle.py
It did fail when calling python3 -m pytest -s test_handle.py::test_handle_does_not_destroy_requirements.

I have been debugging, and found that the objects are being destructed by the gc.
AFAIU, cpython gc doesn't ensure any destruction order (my understanding of cpython garbage collection process is really poor).","we shouldn't create reference cycles in rclpy.

Then lets fix those first.

Conditioning users to not create reference cycles wouldn't be much ""Pythonic"".

And worry about user code which does create their own cycles in a second step.",True,{'THUMBS_UP': ['https://github.com/jacobperron']}
ros2/rclpy,https://github.com/ros2/rclpy,470,2019-12-03T20:27:04Z,2020-01-20T17:09:32Z,2020-01-20T17:09:39Z,CLOSED,False,105,61,10,https://github.com/ivanpauno,Context destruction order bug,2,"['bug', 'help wanted']",https://github.com/ros2/rclpy/pull/470,https://github.com/sloretz,16,https://github.com/ros2/rclpy/pull/470#issuecomment-571701572,"Intro
As part of ros2/rmw#183, I needed to ensure that the context is destructed after the nodes/publishers/etc. That's needed as now the Participant will be part of the context, and the Participant is needed in the destruction of most of the entities (e.g.: https://github.com/ros2/rmw_fastrtps/blob/a16c45ef11a19361a15c585497bf373a7ed0bae6/rmw_fastrtps_shared_cpp/src/rmw_service.cpp#L75).
Also, rcl documentation says that not doing so, is undefined behavior https://github.com/ros2/rcl/blob/3a5c3a34191bd95491cb72c7458b9409452a28f0/rcl/include/rcl/context.h#L101-L106 (before, undefined meant nothing happened. Now it means a segfault).
Commits

b740f90 is using a Handle object to wrap the context capsule, and establishing a dependency of the node handle on the context handle. The other changes are just a consequence of this.
5f7f249 is adding some debug messages I will use in the buggy example.

Buggy example
The context is sometimes being destructed out of order, though it's hard to reproduce it.
Here is one example:


Example

Code
import rclpy
from rclpy.executors import SingleThreadedExecutor
from rclpy.node import Node
from std_msgs.msg import String


def main(args=None):
    rclpy.init(args=args)
    node = Node('talker')
    node2 = Node('asd')
    rclpy.shutdown()

if __name__ == '__main__':
    main()


Output
destroying rcl_node_t   140190542497472
destroying rcl_context_t   140190450323888
destroying rclpy_publisher_t   140190542497824
destroying rcl_clock_t   140190449713680
destroying rclpy_service_t   140190542497872
destroying rclpy_service_t   140190542497856
destroying rclpy_service_t   140190542497888
destroying rclpy_service_t   140190542497904
destroying rclpy_service_t   140190542497920
destroying rclpy_service_t   140190542497936
destroying rcl_node_t   140190542497952
destroying rclpy_publisher_t   140190542497968
destroying rcl_clock_t   140190375035248
destroying rclpy_service_t   140190542498016
destroying rclpy_service_t   140190542498000
destroying rclpy_service_t   140190542498032
destroying rclpy_service_t   140190542498048
destroying rclpy_service_t   140190542498064
destroying rclpy_service_t   140190542498080
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node
context being destructed
context destructed
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node



Conclusion
The context is being destructed out of order.
All the example where I observed this have two nodes (maybe someone is decrementing a reference twice (?)).



Original bug
In the branches where I'm moving the Participant to the context, the following test failed 
  
    
      rclpy/rclpy/test/test_handle.py
    
    
        Lines 77 to 98
      in
      d375c84
    
  
  
    

        
          
           def test_handle_does_not_destroy_requirements(): 
        

        
          
               context = rclpy.context.Context() 
        

        
          
               rclpy.init(context=context) 
        

        
          
            
        

        
          
               try: 
        

        
          
                   node1 = rclpy.create_node('test_handle_does_not_destroy_requirements1', context=context) 
        

        
          
                   node2 = rclpy.create_node('test_handle_does_not_destroy_requirements2', context=context) 
        

        
          
                   node2.handle.requires(node1.handle) 
        

        
          
            
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
                   with node2.handle: 
        

        
          
                       pass 
        

        
          
            
        

        
          
                   node2.handle.destroy() 
        

        
          
                   with pytest.raises(InvalidHandle): 
        

        
          
                       with node2.handle: 
        

        
          
                           pass 
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
               finally: 
        

        
          
                   rclpy.shutdown(context=context) 
        
    
  

.
Some interesting facts:

It always failed when I calling colcon test --packages-select rclpy
It didn't fail when calling python3 -m pytest -s test_handle.py
It did fail when calling python3 -m pytest -s test_handle.py::test_handle_does_not_destroy_requirements.

I have been debugging, and found that the objects are being destructed by the gc.
AFAIU, cpython gc doesn't ensure any destruction order (my understanding of cpython garbage collection process is really poor).","Currently, when a handle is destroyed also their dependents are destroyed (i.e. if someone called dependent_handle.requires(dependency_handle), doing dependency_handle.destroy() destroy boths).
I find that really strange. What I think should happen is that if someone call dependency_handle.destroy(), the ref count of the (dependecy_)handle should be decremented, and the object shouldn't be actually destroyed until the dependents are destroyed too (and not force the dependents to be destructed at the moment).

Yeah I agree it's a strange thing to do in Python. The goal is to remove stuff from the middleware asap. rclpy can't rely on the gc because it doesn't make any guarantees about when it will collect stuff. __enter__() and __exit__() don't quite fit here either. The closest thing I can think of is  socket.close(). If someone calls node.destroy_node(), rclpy tries to destroy the node right away* so it no longer appears on the node graph, which means publishers/subscribers/clients/etc need to be destroyed first.

what should happen when someone call handle.destroy is that the reference count of the wrapped rclpy_handle_t should be decremented and the capsule destroyed.
That would not actually destroy the rcl object, until all the other rclpy_handle_t objects that added it as a dependency are destroyed

I can see how this would work for nodes. If service_handle requires node_handle then  node_handle.ref_count is 2 and service_handle.ref_count is 1. If someone calls node_handle.destroy() then both are 1, so nothing is destroyed. If this were all then the node destruction would have to wait for the garbage collector to collect service_handle, and that's to be avoided. However, most would call node.destroy_node() which calls node.destroy_service() which would call service_handle.destroy() which would then destroy service_handle followed by the node_handle without waiting for the gc.
In the context of this PR, context.shutdown() would need more information to do this. If node_handle requires context_handle, then context would need a reference to node so that context.shutdown() could call node.destroy_node(). Otherwise context.shutdown() can only decrement context_handle.ref_count, which as shown above means it would have to wait for the node to be garbage collected.
* It can be delayed by subscribers/timers/services/etc being used in rcl_wait(), but that's easier to control than the garbage collector. This is why destroy_node() wakes the executor.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,470,2019-12-03T20:27:04Z,2020-01-20T17:09:32Z,2020-01-20T17:09:39Z,CLOSED,False,105,61,10,https://github.com/ivanpauno,Context destruction order bug,2,"['bug', 'help wanted']",https://github.com/ros2/rclpy/pull/470,https://github.com/ivanpauno,17,https://github.com/ros2/rclpy/pull/470#issuecomment-571739416,"Intro
As part of ros2/rmw#183, I needed to ensure that the context is destructed after the nodes/publishers/etc. That's needed as now the Participant will be part of the context, and the Participant is needed in the destruction of most of the entities (e.g.: https://github.com/ros2/rmw_fastrtps/blob/a16c45ef11a19361a15c585497bf373a7ed0bae6/rmw_fastrtps_shared_cpp/src/rmw_service.cpp#L75).
Also, rcl documentation says that not doing so, is undefined behavior https://github.com/ros2/rcl/blob/3a5c3a34191bd95491cb72c7458b9409452a28f0/rcl/include/rcl/context.h#L101-L106 (before, undefined meant nothing happened. Now it means a segfault).
Commits

b740f90 is using a Handle object to wrap the context capsule, and establishing a dependency of the node handle on the context handle. The other changes are just a consequence of this.
5f7f249 is adding some debug messages I will use in the buggy example.

Buggy example
The context is sometimes being destructed out of order, though it's hard to reproduce it.
Here is one example:


Example

Code
import rclpy
from rclpy.executors import SingleThreadedExecutor
from rclpy.node import Node
from std_msgs.msg import String


def main(args=None):
    rclpy.init(args=args)
    node = Node('talker')
    node2 = Node('asd')
    rclpy.shutdown()

if __name__ == '__main__':
    main()


Output
destroying rcl_node_t   140190542497472
destroying rcl_context_t   140190450323888
destroying rclpy_publisher_t   140190542497824
destroying rcl_clock_t   140190449713680
destroying rclpy_service_t   140190542497872
destroying rclpy_service_t   140190542497856
destroying rclpy_service_t   140190542497888
destroying rclpy_service_t   140190542497904
destroying rclpy_service_t   140190542497920
destroying rclpy_service_t   140190542497936
destroying rcl_node_t   140190542497952
destroying rclpy_publisher_t   140190542497968
destroying rcl_clock_t   140190375035248
destroying rclpy_service_t   140190542498016
destroying rclpy_service_t   140190542498000
destroying rclpy_service_t   140190542498032
destroying rclpy_service_t   140190542498048
destroying rclpy_service_t   140190542498064
destroying rclpy_service_t   140190542498080
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node
context being destructed
context destructed
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node



Conclusion
The context is being destructed out of order.
All the example where I observed this have two nodes (maybe someone is decrementing a reference twice (?)).



Original bug
In the branches where I'm moving the Participant to the context, the following test failed 
  
    
      rclpy/rclpy/test/test_handle.py
    
    
        Lines 77 to 98
      in
      d375c84
    
  
  
    

        
          
           def test_handle_does_not_destroy_requirements(): 
        

        
          
               context = rclpy.context.Context() 
        

        
          
               rclpy.init(context=context) 
        

        
          
            
        

        
          
               try: 
        

        
          
                   node1 = rclpy.create_node('test_handle_does_not_destroy_requirements1', context=context) 
        

        
          
                   node2 = rclpy.create_node('test_handle_does_not_destroy_requirements2', context=context) 
        

        
          
                   node2.handle.requires(node1.handle) 
        

        
          
            
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
                   with node2.handle: 
        

        
          
                       pass 
        

        
          
            
        

        
          
                   node2.handle.destroy() 
        

        
          
                   with pytest.raises(InvalidHandle): 
        

        
          
                       with node2.handle: 
        

        
          
                           pass 
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
               finally: 
        

        
          
                   rclpy.shutdown(context=context) 
        
    
  

.
Some interesting facts:

It always failed when I calling colcon test --packages-select rclpy
It didn't fail when calling python3 -m pytest -s test_handle.py
It did fail when calling python3 -m pytest -s test_handle.py::test_handle_does_not_destroy_requirements.

I have been debugging, and found that the objects are being destructed by the gc.
AFAIU, cpython gc doesn't ensure any destruction order (my understanding of cpython garbage collection process is really poor).","Yeah I agree it's a strange thing to do in Python. The goal is to remove stuff from the middleware asap. rclpy can't rely on the gc because it doesn't make any guarantees about when it will collect stuff. enter() and exit() don't quite fit here either. The closest thing I can think of is socket.close(). If someone calls node.destroy_node(), rclpy tries to destroy the node right away* so it no longer appears on the node graph, which means publishers/subscribers/clients/etc need to be destroyed first.

The socket example is also not the same.  You can actually solve the problem using the context manager (example).
Our use case is pretty strange. We don't want to only rely in the gc, because the desire is to have a way to clean objects immediately to free middleware resources. But we also have a lot of dependencies between objects, in which we want to ensure that they are destructed in the correct order, if not something might crash. I unfortunatelly haven't seen any other python library with this kind of problem (though I haven't use a lot), I would love to see solutions that other libraries apply.

I can see how this would work for nodes. If service_handle requires node_handle then node_handle.ref_count is 2 and service_handle.ref_count is 1. If someone calls node_handle.destroy() then both are 1, so nothing is destroyed. If this were all then the node destruction would have to wait for the garbage collector to collect service_handle, and that's to be avoided. However, most would call node.destroy_node() which calls node.destroy_service() which would call service_handle.destroy() which would then destroy service_handle followed by the node_handle without waiting for the gc.

I think that users shouldn't call directly handle.destroy(), they should just call the destroy method of the corresponding object as you commented. We probable should make documentation clearer, or delete handle from the public api (just have an attribute node._handle that users aren't suppossed to use, don't provide the property node.handle).

In the context of this PR, context.shutdown() would need more information to do this. If node_handle requires context_handle, then context would need a reference to node so that context.shutdown() could call node.destroy_node(). Otherwise context.shutdown() can only decrement context_handle.ref_count, which as shown above means it would have to wait for the node to be garbage collected.

IMO, I don't think that context.shutdown() should destroy anything.
It should call the corresponding rcl method, that it actually doesn't destruct anything (AFAIR), it just indicate that the context is invalid afterwards.
If we want to provide a way to destruct all the objects related with a context, I think we should add another method, called destroy. In that case, I think that keeping track of the nodes created by a context should be enough (using weak references, to avoid a ref cycle between the nodes and the context).

I also want to mention that I consider my proposal ""complex"", but I have failed to find a simpler alternative.
I also don't like the fact that this problem might also happen in other client libraries of garbage collected languages.
It would be good if we find a solution that can live in rcl, but I don't know if that's possible.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,470,2019-12-03T20:27:04Z,2020-01-20T17:09:32Z,2020-01-20T17:09:39Z,CLOSED,False,105,61,10,https://github.com/ivanpauno,Context destruction order bug,2,"['bug', 'help wanted']",https://github.com/ros2/rclpy/pull/470,https://github.com/sloretz,18,https://github.com/ros2/rclpy/pull/470#issuecomment-571752124,"Intro
As part of ros2/rmw#183, I needed to ensure that the context is destructed after the nodes/publishers/etc. That's needed as now the Participant will be part of the context, and the Participant is needed in the destruction of most of the entities (e.g.: https://github.com/ros2/rmw_fastrtps/blob/a16c45ef11a19361a15c585497bf373a7ed0bae6/rmw_fastrtps_shared_cpp/src/rmw_service.cpp#L75).
Also, rcl documentation says that not doing so, is undefined behavior https://github.com/ros2/rcl/blob/3a5c3a34191bd95491cb72c7458b9409452a28f0/rcl/include/rcl/context.h#L101-L106 (before, undefined meant nothing happened. Now it means a segfault).
Commits

b740f90 is using a Handle object to wrap the context capsule, and establishing a dependency of the node handle on the context handle. The other changes are just a consequence of this.
5f7f249 is adding some debug messages I will use in the buggy example.

Buggy example
The context is sometimes being destructed out of order, though it's hard to reproduce it.
Here is one example:


Example

Code
import rclpy
from rclpy.executors import SingleThreadedExecutor
from rclpy.node import Node
from std_msgs.msg import String


def main(args=None):
    rclpy.init(args=args)
    node = Node('talker')
    node2 = Node('asd')
    rclpy.shutdown()

if __name__ == '__main__':
    main()


Output
destroying rcl_node_t   140190542497472
destroying rcl_context_t   140190450323888
destroying rclpy_publisher_t   140190542497824
destroying rcl_clock_t   140190449713680
destroying rclpy_service_t   140190542497872
destroying rclpy_service_t   140190542497856
destroying rclpy_service_t   140190542497888
destroying rclpy_service_t   140190542497904
destroying rclpy_service_t   140190542497920
destroying rclpy_service_t   140190542497936
destroying rcl_node_t   140190542497952
destroying rclpy_publisher_t   140190542497968
destroying rcl_clock_t   140190375035248
destroying rclpy_service_t   140190542498016
destroying rclpy_service_t   140190542498000
destroying rclpy_service_t   140190542498032
destroying rclpy_service_t   140190542498048
destroying rclpy_service_t   140190542498064
destroying rclpy_service_t   140190542498080
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node
context being destructed
context destructed
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node



Conclusion
The context is being destructed out of order.
All the example where I observed this have two nodes (maybe someone is decrementing a reference twice (?)).



Original bug
In the branches where I'm moving the Participant to the context, the following test failed 
  
    
      rclpy/rclpy/test/test_handle.py
    
    
        Lines 77 to 98
      in
      d375c84
    
  
  
    

        
          
           def test_handle_does_not_destroy_requirements(): 
        

        
          
               context = rclpy.context.Context() 
        

        
          
               rclpy.init(context=context) 
        

        
          
            
        

        
          
               try: 
        

        
          
                   node1 = rclpy.create_node('test_handle_does_not_destroy_requirements1', context=context) 
        

        
          
                   node2 = rclpy.create_node('test_handle_does_not_destroy_requirements2', context=context) 
        

        
          
                   node2.handle.requires(node1.handle) 
        

        
          
            
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
                   with node2.handle: 
        

        
          
                       pass 
        

        
          
            
        

        
          
                   node2.handle.destroy() 
        

        
          
                   with pytest.raises(InvalidHandle): 
        

        
          
                       with node2.handle: 
        

        
          
                           pass 
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
               finally: 
        

        
          
                   rclpy.shutdown(context=context) 
        
    
  

.
Some interesting facts:

It always failed when I calling colcon test --packages-select rclpy
It didn't fail when calling python3 -m pytest -s test_handle.py
It did fail when calling python3 -m pytest -s test_handle.py::test_handle_does_not_destroy_requirements.

I have been debugging, and found that the objects are being destructed by the gc.
AFAIU, cpython gc doesn't ensure any destruction order (my understanding of cpython garbage collection process is really poor).","The socket example is also not the same

Right, not the same since there aren't any dependencies, but similar in that there's a resource to be free'd without waiting for the garbage collector.

Our use case is pretty strange. We don't want to only rely in the gc, because the desire is to have a way to clean objects immediately to free middleware resources.  But we also have a lot of dependencies between objects, in which we want to ensure that they are destructed in the correct order, if not something might crash.

That sums it up.

I would love to see solutions that other libraries apply.

If a context manager is used to cleanup things without waiting for the garbage collector, then nesting context managers (nesting with statements) can clean up context managers that depend on other context managers. contextlib.ExitStack is a way to nest context managers without hardcoding with statements.

I don't think that context.shutdown() should destroy anything. [...] If we want to provide a way to destruct all the objects related with a context, I think we should add another method, called destroy.

It can be called context.destroy() instead of context.shutdown(). Whatever the name, it should be called by rclpy.shutdown(). I think there would be a lot of value in this PR to make rclpy.shutdown() destroy all resources used in the middleware, so nodes created by one unit test won't affect the next.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,470,2019-12-03T20:27:04Z,2020-01-20T17:09:32Z,2020-01-20T17:09:39Z,CLOSED,False,105,61,10,https://github.com/ivanpauno,Context destruction order bug,2,"['bug', 'help wanted']",https://github.com/ros2/rclpy/pull/470,https://github.com/ivanpauno,19,https://github.com/ros2/rclpy/pull/470#issuecomment-571772625,"Intro
As part of ros2/rmw#183, I needed to ensure that the context is destructed after the nodes/publishers/etc. That's needed as now the Participant will be part of the context, and the Participant is needed in the destruction of most of the entities (e.g.: https://github.com/ros2/rmw_fastrtps/blob/a16c45ef11a19361a15c585497bf373a7ed0bae6/rmw_fastrtps_shared_cpp/src/rmw_service.cpp#L75).
Also, rcl documentation says that not doing so, is undefined behavior https://github.com/ros2/rcl/blob/3a5c3a34191bd95491cb72c7458b9409452a28f0/rcl/include/rcl/context.h#L101-L106 (before, undefined meant nothing happened. Now it means a segfault).
Commits

b740f90 is using a Handle object to wrap the context capsule, and establishing a dependency of the node handle on the context handle. The other changes are just a consequence of this.
5f7f249 is adding some debug messages I will use in the buggy example.

Buggy example
The context is sometimes being destructed out of order, though it's hard to reproduce it.
Here is one example:


Example

Code
import rclpy
from rclpy.executors import SingleThreadedExecutor
from rclpy.node import Node
from std_msgs.msg import String


def main(args=None):
    rclpy.init(args=args)
    node = Node('talker')
    node2 = Node('asd')
    rclpy.shutdown()

if __name__ == '__main__':
    main()


Output
destroying rcl_node_t   140190542497472
destroying rcl_context_t   140190450323888
destroying rclpy_publisher_t   140190542497824
destroying rcl_clock_t   140190449713680
destroying rclpy_service_t   140190542497872
destroying rclpy_service_t   140190542497856
destroying rclpy_service_t   140190542497888
destroying rclpy_service_t   140190542497904
destroying rclpy_service_t   140190542497920
destroying rclpy_service_t   140190542497936
destroying rcl_node_t   140190542497952
destroying rclpy_publisher_t   140190542497968
destroying rcl_clock_t   140190375035248
destroying rclpy_service_t   140190542498016
destroying rclpy_service_t   140190542498000
destroying rclpy_service_t   140190542498032
destroying rclpy_service_t   140190542498048
destroying rclpy_service_t   140190542498064
destroying rclpy_service_t   140190542498080
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node
context being destructed
context destructed
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node



Conclusion
The context is being destructed out of order.
All the example where I observed this have two nodes (maybe someone is decrementing a reference twice (?)).



Original bug
In the branches where I'm moving the Participant to the context, the following test failed 
  
    
      rclpy/rclpy/test/test_handle.py
    
    
        Lines 77 to 98
      in
      d375c84
    
  
  
    

        
          
           def test_handle_does_not_destroy_requirements(): 
        

        
          
               context = rclpy.context.Context() 
        

        
          
               rclpy.init(context=context) 
        

        
          
            
        

        
          
               try: 
        

        
          
                   node1 = rclpy.create_node('test_handle_does_not_destroy_requirements1', context=context) 
        

        
          
                   node2 = rclpy.create_node('test_handle_does_not_destroy_requirements2', context=context) 
        

        
          
                   node2.handle.requires(node1.handle) 
        

        
          
            
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
                   with node2.handle: 
        

        
          
                       pass 
        

        
          
            
        

        
          
                   node2.handle.destroy() 
        

        
          
                   with pytest.raises(InvalidHandle): 
        

        
          
                       with node2.handle: 
        

        
          
                           pass 
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
               finally: 
        

        
          
                   rclpy.shutdown(context=context) 
        
    
  

.
Some interesting facts:

It always failed when I calling colcon test --packages-select rclpy
It didn't fail when calling python3 -m pytest -s test_handle.py
It did fail when calling python3 -m pytest -s test_handle.py::test_handle_does_not_destroy_requirements.

I have been debugging, and found that the objects are being destructed by the gc.
AFAIU, cpython gc doesn't ensure any destruction order (my understanding of cpython garbage collection process is really poor).","It can be called context.destroy() instead of context.shutdown(). Whatever the name, it should be called by rclpy.shutdown(). I think there would be a lot of value in this PR to make rclpy.shutdown() destroy all resources used in the middleware, so nodes created by one unit test won't affect the next.

I forgot about rclpy.shutdown. It sounds reasonable.
I find many of this thing inconsistent with rclcpp, e.g.: rclcpp::shutdown doesn't clean any object. Maybe, the comparision is not fair though.
The proposal I made I think can also satisfy that requirement (as commented above).
I will wait for some more opinions before starting to implement something.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,470,2019-12-03T20:27:04Z,2020-01-20T17:09:32Z,2020-01-20T17:09:39Z,CLOSED,False,105,61,10,https://github.com/ivanpauno,Context destruction order bug,2,"['bug', 'help wanted']",https://github.com/ros2/rclpy/pull/470,https://github.com/hidmic,20,https://github.com/ros2/rclpy/pull/470#issuecomment-571869033,"Intro
As part of ros2/rmw#183, I needed to ensure that the context is destructed after the nodes/publishers/etc. That's needed as now the Participant will be part of the context, and the Participant is needed in the destruction of most of the entities (e.g.: https://github.com/ros2/rmw_fastrtps/blob/a16c45ef11a19361a15c585497bf373a7ed0bae6/rmw_fastrtps_shared_cpp/src/rmw_service.cpp#L75).
Also, rcl documentation says that not doing so, is undefined behavior https://github.com/ros2/rcl/blob/3a5c3a34191bd95491cb72c7458b9409452a28f0/rcl/include/rcl/context.h#L101-L106 (before, undefined meant nothing happened. Now it means a segfault).
Commits

b740f90 is using a Handle object to wrap the context capsule, and establishing a dependency of the node handle on the context handle. The other changes are just a consequence of this.
5f7f249 is adding some debug messages I will use in the buggy example.

Buggy example
The context is sometimes being destructed out of order, though it's hard to reproduce it.
Here is one example:


Example

Code
import rclpy
from rclpy.executors import SingleThreadedExecutor
from rclpy.node import Node
from std_msgs.msg import String


def main(args=None):
    rclpy.init(args=args)
    node = Node('talker')
    node2 = Node('asd')
    rclpy.shutdown()

if __name__ == '__main__':
    main()


Output
destroying rcl_node_t   140190542497472
destroying rcl_context_t   140190450323888
destroying rclpy_publisher_t   140190542497824
destroying rcl_clock_t   140190449713680
destroying rclpy_service_t   140190542497872
destroying rclpy_service_t   140190542497856
destroying rclpy_service_t   140190542497888
destroying rclpy_service_t   140190542497904
destroying rclpy_service_t   140190542497920
destroying rclpy_service_t   140190542497936
destroying rcl_node_t   140190542497952
destroying rclpy_publisher_t   140190542497968
destroying rcl_clock_t   140190375035248
destroying rclpy_service_t   140190542498016
destroying rclpy_service_t   140190542498000
destroying rclpy_service_t   140190542498032
destroying rclpy_service_t   140190542498048
destroying rclpy_service_t   140190542498064
destroying rclpy_service_t   140190542498080
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node
context being destructed
context destructed
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node



Conclusion
The context is being destructed out of order.
All the example where I observed this have two nodes (maybe someone is decrementing a reference twice (?)).



Original bug
In the branches where I'm moving the Participant to the context, the following test failed 
  
    
      rclpy/rclpy/test/test_handle.py
    
    
        Lines 77 to 98
      in
      d375c84
    
  
  
    

        
          
           def test_handle_does_not_destroy_requirements(): 
        

        
          
               context = rclpy.context.Context() 
        

        
          
               rclpy.init(context=context) 
        

        
          
            
        

        
          
               try: 
        

        
          
                   node1 = rclpy.create_node('test_handle_does_not_destroy_requirements1', context=context) 
        

        
          
                   node2 = rclpy.create_node('test_handle_does_not_destroy_requirements2', context=context) 
        

        
          
                   node2.handle.requires(node1.handle) 
        

        
          
            
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
                   with node2.handle: 
        

        
          
                       pass 
        

        
          
            
        

        
          
                   node2.handle.destroy() 
        

        
          
                   with pytest.raises(InvalidHandle): 
        

        
          
                       with node2.handle: 
        

        
          
                           pass 
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
               finally: 
        

        
          
                   rclpy.shutdown(context=context) 
        
    
  

.
Some interesting facts:

It always failed when I calling colcon test --packages-select rclpy
It didn't fail when calling python3 -m pytest -s test_handle.py
It did fail when calling python3 -m pytest -s test_handle.py::test_handle_does_not_destroy_requirements.

I have been debugging, and found that the objects are being destructed by the gc.
AFAIU, cpython gc doesn't ensure any destruction order (my understanding of cpython garbage collection process is really poor).","Following that idea, what should happen when someone call handle.destroy is that the reference count of the wrapped rclpy_handle_t should be decremented and the capsule destroyed.
That would not actually destroy the rcl object, until all the other rclpy_handle_t objects that added it as a dependency are destroyed. In that case, the reference count of all the stored dependencies in rclpy_handle_t are decremented, and the stored rcl object is destroyed.

Essentially recreating std::shared_ptr in C. That's what we do for rclcpp, so I guess it's fine for a relatively non-intrusive solution. BTW pybind11 supports std::shared_ptr i.e. shared ownership between Python and C++, but that'd be a much larger change to rclpy.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,470,2019-12-03T20:27:04Z,2020-01-20T17:09:32Z,2020-01-20T17:09:39Z,CLOSED,False,105,61,10,https://github.com/ivanpauno,Context destruction order bug,2,"['bug', 'help wanted']",https://github.com/ros2/rclpy/pull/470,https://github.com/ivanpauno,21,https://github.com/ros2/rclpy/pull/470#issuecomment-576363187,"Intro
As part of ros2/rmw#183, I needed to ensure that the context is destructed after the nodes/publishers/etc. That's needed as now the Participant will be part of the context, and the Participant is needed in the destruction of most of the entities (e.g.: https://github.com/ros2/rmw_fastrtps/blob/a16c45ef11a19361a15c585497bf373a7ed0bae6/rmw_fastrtps_shared_cpp/src/rmw_service.cpp#L75).
Also, rcl documentation says that not doing so, is undefined behavior https://github.com/ros2/rcl/blob/3a5c3a34191bd95491cb72c7458b9409452a28f0/rcl/include/rcl/context.h#L101-L106 (before, undefined meant nothing happened. Now it means a segfault).
Commits

b740f90 is using a Handle object to wrap the context capsule, and establishing a dependency of the node handle on the context handle. The other changes are just a consequence of this.
5f7f249 is adding some debug messages I will use in the buggy example.

Buggy example
The context is sometimes being destructed out of order, though it's hard to reproduce it.
Here is one example:


Example

Code
import rclpy
from rclpy.executors import SingleThreadedExecutor
from rclpy.node import Node
from std_msgs.msg import String


def main(args=None):
    rclpy.init(args=args)
    node = Node('talker')
    node2 = Node('asd')
    rclpy.shutdown()

if __name__ == '__main__':
    main()


Output
destroying rcl_node_t   140190542497472
destroying rcl_context_t   140190450323888
destroying rclpy_publisher_t   140190542497824
destroying rcl_clock_t   140190449713680
destroying rclpy_service_t   140190542497872
destroying rclpy_service_t   140190542497856
destroying rclpy_service_t   140190542497888
destroying rclpy_service_t   140190542497904
destroying rclpy_service_t   140190542497920
destroying rclpy_service_t   140190542497936
destroying rcl_node_t   140190542497952
destroying rclpy_publisher_t   140190542497968
destroying rcl_clock_t   140190375035248
destroying rclpy_service_t   140190542498016
destroying rclpy_service_t   140190542498000
destroying rclpy_service_t   140190542498032
destroying rclpy_service_t   140190542498048
destroying rclpy_service_t   140190542498064
destroying rclpy_service_t   140190542498080
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node
context being destructed
context destructed
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying service
destroyed service
destroying publisher
destroyed publisher
destroying node
destroyed node



Conclusion
The context is being destructed out of order.
All the example where I observed this have two nodes (maybe someone is decrementing a reference twice (?)).



Original bug
In the branches where I'm moving the Participant to the context, the following test failed 
  
    
      rclpy/rclpy/test/test_handle.py
    
    
        Lines 77 to 98
      in
      d375c84
    
  
  
    

        
          
           def test_handle_does_not_destroy_requirements(): 
        

        
          
               context = rclpy.context.Context() 
        

        
          
               rclpy.init(context=context) 
        

        
          
            
        

        
          
               try: 
        

        
          
                   node1 = rclpy.create_node('test_handle_does_not_destroy_requirements1', context=context) 
        

        
          
                   node2 = rclpy.create_node('test_handle_does_not_destroy_requirements2', context=context) 
        

        
          
                   node2.handle.requires(node1.handle) 
        

        
          
            
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
                   with node2.handle: 
        

        
          
                       pass 
        

        
          
            
        

        
          
                   node2.handle.destroy() 
        

        
          
                   with pytest.raises(InvalidHandle): 
        

        
          
                       with node2.handle: 
        

        
          
                           pass 
        

        
          
                   with node1.handle: 
        

        
          
                       pass 
        

        
          
               finally: 
        

        
          
                   rclpy.shutdown(context=context) 
        
    
  

.
Some interesting facts:

It always failed when I calling colcon test --packages-select rclpy
It didn't fail when calling python3 -m pytest -s test_handle.py
It did fail when calling python3 -m pytest -s test_handle.py::test_handle_does_not_destroy_requirements.

I have been debugging, and found that the objects are being destructed by the gc.
AFAIU, cpython gc doesn't ensure any destruction order (my understanding of cpython garbage collection process is really poor).","Closing, superseded by #497.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,471,2019-12-05T13:16:58Z,2019-12-05T17:18:54Z,2019-12-05T21:36:07Z,MERGED,True,5,0,1,https://github.com/ivanpauno,Fix test_action_client failures,1,['in review'],https://github.com/ros2/rclpy/pull/471,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/471,"ros2/rcl#541 triggered some failures in CI, though the problem was that the test wasn't creating an status publisher.","ros2/rcl#541 triggered some failures in CI, though the problem was that the test wasn't creating an status publisher.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,471,2019-12-05T13:16:58Z,2019-12-05T17:18:54Z,2019-12-05T21:36:07Z,MERGED,True,5,0,1,https://github.com/ivanpauno,Fix test_action_client failures,1,['in review'],https://github.com/ros2/rclpy/pull/471,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/471#issuecomment-562126832,"ros2/rcl#541 triggered some failures in CI, though the problem was that the test wasn't creating an status publisher.","Linux 
Arch 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,471,2019-12-05T13:16:58Z,2019-12-05T17:18:54Z,2019-12-05T21:36:07Z,MERGED,True,5,0,1,https://github.com/ivanpauno,Fix test_action_client failures,1,['in review'],https://github.com/ros2/rclpy/pull/471,https://github.com/jacobperron,3,https://github.com/ros2/rclpy/pull/471#issuecomment-562329207,"ros2/rcl#541 triggered some failures in CI, though the problem was that the test wasn't creating an status publisher.",Glad you found the real issue!,True,{'THUMBS_UP': ['https://github.com/ivanpauno']}
ros2/rclpy,https://github.com/ros2/rclpy,472,2019-12-05T18:59:37Z,2019-12-05T19:53:46Z,2019-12-05T19:53:50Z,MERGED,True,1,1,1,https://github.com/dirk-thomas,[backport dashing] add missing exec depend on rcl_interfaces,1,['bug'],https://github.com/ros2/rclpy/pull/472,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/472,Backport of #452.,Backport of #452.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,472,2019-12-05T18:59:37Z,2019-12-05T19:53:46Z,2019-12-05T19:53:50Z,MERGED,True,1,1,1,https://github.com/dirk-thomas,[backport dashing] add missing exec depend on rcl_interfaces,1,['bug'],https://github.com/ros2/rclpy/pull/472,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/472#issuecomment-562273972,Backport of #452.,@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,472,2019-12-05T18:59:37Z,2019-12-05T19:53:46Z,2019-12-05T19:53:50Z,MERGED,True,1,1,1,https://github.com/dirk-thomas,[backport dashing] add missing exec depend on rcl_interfaces,1,['bug'],https://github.com/ros2/rclpy/pull/472,https://github.com/dirk-thomas,3,https://github.com/ros2/rclpy/pull/472#issuecomment-562281973,Backport of #452.,@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,472,2019-12-05T18:59:37Z,2019-12-05T19:53:46Z,2019-12-05T19:53:50Z,MERGED,True,1,1,1,https://github.com/dirk-thomas,[backport dashing] add missing exec depend on rcl_interfaces,1,['bug'],https://github.com/ros2/rclpy/pull/472,https://github.com/dirk-thomas,4,https://github.com/ros2/rclpy/pull/472#issuecomment-562283798,Backport of #452.,@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,472,2019-12-05T18:59:37Z,2019-12-05T19:53:46Z,2019-12-05T19:53:50Z,MERGED,True,1,1,1,https://github.com/dirk-thomas,[backport dashing] add missing exec depend on rcl_interfaces,1,['bug'],https://github.com/ros2/rclpy/pull/472,https://github.com/dirk-thomas,5,https://github.com/ros2/rclpy/pull/472#issuecomment-562285780,Backport of #452.,@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,473,2019-12-05T19:00:55Z,2019-12-05T19:53:24Z,2019-12-05T19:53:28Z,MERGED,True,2,2,2,https://github.com/dirk-thomas,[backport dashing] fix import to use builtin_interfaces.msg,1,['bug'],https://github.com/ros2/rclpy/pull/473,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/473,Backport of #453.,Backport of #453.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,473,2019-12-05T19:00:55Z,2019-12-05T19:53:24Z,2019-12-05T19:53:28Z,MERGED,True,2,2,2,https://github.com/dirk-thomas,[backport dashing] fix import to use builtin_interfaces.msg,1,['bug'],https://github.com/ros2/rclpy/pull/473,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/473#issuecomment-562276143,Backport of #453.,@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,473,2019-12-05T19:00:55Z,2019-12-05T19:53:24Z,2019-12-05T19:53:28Z,MERGED,True,2,2,2,https://github.com/dirk-thomas,[backport dashing] fix import to use builtin_interfaces.msg,1,['bug'],https://github.com/ros2/rclpy/pull/473,https://github.com/dirk-thomas,3,https://github.com/ros2/rclpy/pull/473#issuecomment-562282749,Backport of #453.,@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,473,2019-12-05T19:00:55Z,2019-12-05T19:53:24Z,2019-12-05T19:53:28Z,MERGED,True,2,2,2,https://github.com/dirk-thomas,[backport dashing] fix import to use builtin_interfaces.msg,1,['bug'],https://github.com/ros2/rclpy/pull/473,https://github.com/dirk-thomas,4,https://github.com/ros2/rclpy/pull/473#issuecomment-562283171,Backport of #453.,"The Dev job for rclpy hasn't run in a while so the test failures may be present on mainline dashing ...

The dev job for rclpy for Dashing just ran and passed green.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,474,2019-12-06T00:56:31Z,2019-12-07T00:30:26Z,2019-12-07T00:30:30Z,MERGED,True,34,15,1,https://github.com/jacobperron,Guard against unexpected action responses,2,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/474,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/474,"Fixes ros2/demos#417
If multiple action servers are running with the same action name, then it is possible that both
servers will reply to requests from the action client. In the event that this happens, we avoid
crashing the code by ignoring the unexpected response and logging a warning for the user.
We have similar behavior for the action client implementation in rclcpp.

Example output running the Python action tutorials client node when there are two action servers running:
$ ros2 run action_tutorials_py fibonacci_action_client
[INFO] [1575593387.895730727] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1])
[INFO] [1575593387.896286699] [fibonacci_action_client]: Goal accepted :)
[WARN] [1575593387.897040932] [fibonacci_action_client]: Ignoring unexpected goal response. There may be two or more action servers for the action 'fibonacci'
[INFO] [1575593387.897367530] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1])
[INFO] [1575593388.884332723] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2])
[INFO] [1575593388.886578244] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2])
[INFO] [1575593389.882818973] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3])
[INFO] [1575593389.884030116] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3])
[INFO] [1575593390.884331581] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5])
[INFO] [1575593390.887038829] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5])
[INFO] [1575593391.882985796] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8])
[INFO] [1575593391.884393489] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8])
[INFO] [1575593392.882920103] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13])
[INFO] [1575593392.884465125] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13])
[INFO] [1575593393.884446345] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21])
[INFO] [1575593393.887311851] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21])
[INFO] [1575593394.884352707] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21, 34])
[INFO] [1575593394.887224341] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21, 34])
[INFO] [1575593395.883523546] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55])
[INFO] [1575593395.885521965] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55])
[INFO] [1575593396.884616024] [fibonacci_action_client]: Result: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55])","Fixes ros2/demos#417
If multiple action servers are running with the same action name, then it is possible that both
servers will reply to requests from the action client. In the event that this happens, we avoid
crashing the code by ignoring the unexpected response and logging a warning for the user.
We have similar behavior for the action client implementation in rclcpp.

Example output running the Python action tutorials client node when there are two action servers running:
$ ros2 run action_tutorials_py fibonacci_action_client
[INFO] [1575593387.895730727] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1])
[INFO] [1575593387.896286699] [fibonacci_action_client]: Goal accepted :)
[WARN] [1575593387.897040932] [fibonacci_action_client]: Ignoring unexpected goal response. There may be two or more action servers for the action 'fibonacci'
[INFO] [1575593387.897367530] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1])
[INFO] [1575593388.884332723] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2])
[INFO] [1575593388.886578244] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2])
[INFO] [1575593389.882818973] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3])
[INFO] [1575593389.884030116] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3])
[INFO] [1575593390.884331581] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5])
[INFO] [1575593390.887038829] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5])
[INFO] [1575593391.882985796] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8])
[INFO] [1575593391.884393489] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8])
[INFO] [1575593392.882920103] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13])
[INFO] [1575593392.884465125] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13])
[INFO] [1575593393.884446345] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21])
[INFO] [1575593393.887311851] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21])
[INFO] [1575593394.884352707] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21, 34])
[INFO] [1575593394.887224341] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21, 34])
[INFO] [1575593395.883523546] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55])
[INFO] [1575593395.885521965] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55])
[INFO] [1575593396.884616024] [fibonacci_action_client]: Result: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55])",True,{'THUMBS_UP': ['https://github.com/ivanpauno']}
ros2/rclpy,https://github.com/ros2/rclpy,474,2019-12-06T00:56:31Z,2019-12-07T00:30:26Z,2019-12-07T00:30:30Z,MERGED,True,34,15,1,https://github.com/jacobperron,Guard against unexpected action responses,2,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/474,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/474#issuecomment-562385523,"Fixes ros2/demos#417
If multiple action servers are running with the same action name, then it is possible that both
servers will reply to requests from the action client. In the event that this happens, we avoid
crashing the code by ignoring the unexpected response and logging a warning for the user.
We have similar behavior for the action client implementation in rclcpp.

Example output running the Python action tutorials client node when there are two action servers running:
$ ros2 run action_tutorials_py fibonacci_action_client
[INFO] [1575593387.895730727] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1])
[INFO] [1575593387.896286699] [fibonacci_action_client]: Goal accepted :)
[WARN] [1575593387.897040932] [fibonacci_action_client]: Ignoring unexpected goal response. There may be two or more action servers for the action 'fibonacci'
[INFO] [1575593387.897367530] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1])
[INFO] [1575593388.884332723] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2])
[INFO] [1575593388.886578244] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2])
[INFO] [1575593389.882818973] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3])
[INFO] [1575593389.884030116] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3])
[INFO] [1575593390.884331581] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5])
[INFO] [1575593390.887038829] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5])
[INFO] [1575593391.882985796] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8])
[INFO] [1575593391.884393489] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8])
[INFO] [1575593392.882920103] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13])
[INFO] [1575593392.884465125] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13])
[INFO] [1575593393.884446345] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21])
[INFO] [1575593393.887311851] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21])
[INFO] [1575593394.884352707] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21, 34])
[INFO] [1575593394.887224341] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21, 34])
[INFO] [1575593395.883523546] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55])
[INFO] [1575593395.885521965] [fibonacci_action_client]: Received feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55])
[INFO] [1575593396.884616024] [fibonacci_action_client]: Result: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55])","Testing rclpy, action_tutorials_py, and test_communication:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,475,2019-12-06T01:59:56Z,2019-12-10T18:49:51Z,2019-12-10T18:49:56Z,MERGED,True,34,15,1,https://github.com/jacobperron,[dashing backport] Guard against unexpected action responses,1,[],https://github.com/ros2/rclpy/pull/475,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/475,"Backport #474 to Dashing.
If multiple action servers are running with the same action name, then it is possible that both
servers will reply to requests from the action client. In the event that this happens, we avoid
crashing the code by ignoring the unexpected response and logging a warning for the user.
We have similar behavior for the action client implementation in rclcpp.","Backport #474 to Dashing.
If multiple action servers are running with the same action name, then it is possible that both
servers will reply to requests from the action client. In the event that this happens, we avoid
crashing the code by ignoring the unexpected response and logging a warning for the user.
We have similar behavior for the action client implementation in rclcpp.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,475,2019-12-06T01:59:56Z,2019-12-10T18:49:51Z,2019-12-10T18:49:56Z,MERGED,True,34,15,1,https://github.com/jacobperron,[dashing backport] Guard against unexpected action responses,1,[],https://github.com/ros2/rclpy/pull/475,https://github.com/nuclearsandwich,2,https://github.com/ros2/rclpy/pull/475#issuecomment-564168235,"Backport #474 to Dashing.
If multiple action servers are running with the same action name, then it is possible that both
servers will reply to requests from the action client. In the event that this happens, we avoid
crashing the code by ignoring the unexpected response and logging a warning for the user.
We have similar behavior for the action client implementation in rclcpp.","I ran CI for this and #477 together against Dashing. The failures are all related to linters which have been upgraded since Dashing and so are not blockers.

Linux 
Linux-aarch64 
macOS 
Windows",True,{'HOORAY': ['https://github.com/jacobperron']}
ros2/rclpy,https://github.com/ros2/rclpy,476,2019-12-06T02:00:05Z,2020-01-14T23:10:11Z,2020-01-14T23:10:15Z,MERGED,True,34,15,1,https://github.com/jacobperron,[eloquent backport] Guard against unexpected action responses,1,['in review'],https://github.com/ros2/rclpy/pull/476,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/476,"Backport #474 to Eloquent.
If multiple action servers are running with the same action name, then it is possible that both
servers will reply to requests from the action client. In the event that this happens, we avoid
crashing the code by ignoring the unexpected response and logging a warning for the user.
We have similar behavior for the action client implementation in rclcpp.","Backport #474 to Eloquent.
If multiple action servers are running with the same action name, then it is possible that both
servers will reply to requests from the action client. In the event that this happens, we avoid
crashing the code by ignoring the unexpected response and logging a warning for the user.
We have similar behavior for the action client implementation in rclcpp.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,476,2019-12-06T02:00:05Z,2020-01-14T23:10:11Z,2020-01-14T23:10:15Z,MERGED,True,34,15,1,https://github.com/jacobperron,[eloquent backport] Guard against unexpected action responses,1,['in review'],https://github.com/ros2/rclpy/pull/476,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/476#issuecomment-562793035,"Backport #474 to Eloquent.
If multiple action servers are running with the same action name, then it is possible that both
servers will reply to requests from the action client. In the event that this happens, we avoid
crashing the code by ignoring the unexpected response and logging a warning for the user.
We have similar behavior for the action client implementation in rclcpp.",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,476,2019-12-06T02:00:05Z,2020-01-14T23:10:11Z,2020-01-14T23:10:15Z,MERGED,True,34,15,1,https://github.com/jacobperron,[eloquent backport] Guard against unexpected action responses,1,['in review'],https://github.com/ros2/rclpy/pull/476,https://github.com/jacobperron,3,https://github.com/ros2/rclpy/pull/476#issuecomment-572813547,"Backport #474 to Eloquent.
If multiple action servers are running with the same action name, then it is possible that both
servers will reply to requests from the action client. In the event that this happens, we avoid
crashing the code by ignoring the unexpected response and logging a warning for the user.
We have similar behavior for the action client implementation in rclcpp.",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,476,2019-12-06T02:00:05Z,2020-01-14T23:10:11Z,2020-01-14T23:10:15Z,MERGED,True,34,15,1,https://github.com/jacobperron,[eloquent backport] Guard against unexpected action responses,1,['in review'],https://github.com/ros2/rclpy/pull/476,https://github.com/nuclearsandwich,4,https://github.com/ros2/rclpy/pull/476#issuecomment-574357322,"Backport #474 to Eloquent.
If multiple action servers are running with the same action name, then it is possible that both
servers will reply to requests from the action client. In the event that this happens, we avoid
crashing the code by ignoring the unexpected response and logging a warning for the user.
We have similar behavior for the action client implementation in rclcpp.",@ros-pull-request-builder retest this please,True,{'HEART': ['https://github.com/jacobperron']}
ros2/rclpy,https://github.com/ros2/rclpy,477,2019-12-06T13:26:16Z,2019-12-10T18:07:24Z,2019-12-10T18:07:26Z,MERGED,True,85,8,2,https://github.com/nuclearsandwich,[Dashing] Future invokes done callbacks when done,1,[],https://github.com/ros2/rclpy/pull/477,https://github.com/nuclearsandwich,1,https://github.com/ros2/rclpy/pull/477,Backport of #461 to Dashing.,Backport of #461 to Dashing.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,478,2019-12-06T21:24:43Z,2019-12-10T21:15:00Z,2019-12-11T13:38:24Z,MERGED,True,91,77,1,https://github.com/suab321321,Replace RuntimeError with new custom exception RCLError,23,[],https://github.com/ros2/rclpy/pull/478,https://github.com/suab321321,1,https://github.com/ros2/rclpy/pull/478,"Fixes #31
Replacing RuntimeError with new custom exception RCLError.","Fixes #31
Replacing RuntimeError with new custom exception RCLError.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,478,2019-12-06T21:24:43Z,2019-12-10T21:15:00Z,2019-12-11T13:38:24Z,MERGED,True,91,77,1,https://github.com/suab321321,Replace RuntimeError with new custom exception RCLError,23,[],https://github.com/ros2/rclpy/pull/478,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/478#issuecomment-562757155,"Fixes #31
Replacing RuntimeError with new custom exception RCLError.","@suab321321 Thanks for the patch! It looks like there was some git branching issues, so I've updated your branch customexception to just contain the one commit I think you wanted.
Also, for the future, it's good to populate the description and title with useful information (for example, a reference to the ticket this is fixing). I have updated the description for you this time.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,478,2019-12-06T21:24:43Z,2019-12-10T21:15:00Z,2019-12-11T13:38:24Z,MERGED,True,91,77,1,https://github.com/suab321321,Replace RuntimeError with new custom exception RCLError,23,[],https://github.com/ros2/rclpy/pull/478,https://github.com/suab321321,3,https://github.com/ros2/rclpy/pull/478#issuecomment-562759654,"Fixes #31
Replacing RuntimeError with new custom exception RCLError.",@jacobperron thank you sir.. I will keep this in mind..will this be merged now sir?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,478,2019-12-06T21:24:43Z,2019-12-10T21:15:00Z,2019-12-11T13:38:24Z,MERGED,True,91,77,1,https://github.com/suab321321,Replace RuntimeError with new custom exception RCLError,23,[],https://github.com/ros2/rclpy/pull/478,https://github.com/suab321321,4,https://github.com/ros2/rclpy/pull/478#issuecomment-563359639,"Fixes #31
Replacing RuntimeError with new custom exception RCLError.",@jacobperron sir I m just comitting the suggested changes from here.,True,"{'THUMBS_UP': ['https://github.com/jacobperron', 'https://github.com/suab321321']}"
ros2/rclpy,https://github.com/ros2/rclpy,478,2019-12-06T21:24:43Z,2019-12-10T21:15:00Z,2019-12-11T13:38:24Z,MERGED,True,91,77,1,https://github.com/suab321321,Replace RuntimeError with new custom exception RCLError,23,[],https://github.com/ros2/rclpy/pull/478,https://github.com/suab321321,5,https://github.com/ros2/rclpy/pull/478#issuecomment-563376840,"Fixes #31
Replacing RuntimeError with new custom exception RCLError.",@jacobperron done sir.....,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,478,2019-12-06T21:24:43Z,2019-12-10T21:15:00Z,2019-12-11T13:38:24Z,MERGED,True,91,77,1,https://github.com/suab321321,Replace RuntimeError with new custom exception RCLError,23,[],https://github.com/ros2/rclpy/pull/478,https://github.com/jacobperron,6,https://github.com/ros2/rclpy/pull/478#issuecomment-564262009,"Fixes #31
Replacing RuntimeError with new custom exception RCLError.",@suab321321 Thanks again for the improvement!,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,478,2019-12-06T21:24:43Z,2019-12-10T21:15:00Z,2019-12-11T13:38:24Z,MERGED,True,91,77,1,https://github.com/suab321321,Replace RuntimeError with new custom exception RCLError,23,[],https://github.com/ros2/rclpy/pull/478,https://github.com/suab321321,7,https://github.com/ros2/rclpy/pull/478#issuecomment-564543938,"Fixes #31
Replacing RuntimeError with new custom exception RCLError.",@allenh1 @jacobperron thank you for your guiding me sir.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,479,2019-12-07T22:06:55Z,2019-12-09T21:50:53Z,2019-12-09T21:50:55Z,MERGED,True,1,1,1,https://github.com/nuclearsandwich,Use absolute topic name for rosout.,1,[],https://github.com/ros2/rclpy/pull/479,https://github.com/nuclearsandwich,1,https://github.com/ros2/rclpy/pull/479,Matches the change made in ros2/rcl#549 to fix test failures in nightlies.,Matches the change made in ros2/rcl#549 to fix test failures in nightlies.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,479,2019-12-07T22:06:55Z,2019-12-09T21:50:53Z,2019-12-09T21:50:55Z,MERGED,True,1,1,1,https://github.com/nuclearsandwich,Use absolute topic name for rosout.,1,[],https://github.com/ros2/rclpy/pull/479,https://github.com/nuclearsandwich,2,https://github.com/ros2/rclpy/pull/479#issuecomment-562890890,Matches the change made in ros2/rcl#549 to fix test failures in nightlies.,"Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,480,2019-12-09T19:54:27Z,2019-12-10T03:31:39Z,2019-12-10T03:31:41Z,MERGED,True,5,5,4,https://github.com/nuclearsandwich,Update constructor docstrings to use imperative mood.,1,['in review'],https://github.com/ros2/rclpy/pull/480,https://github.com/nuclearsandwich,1,https://github.com/ros2/rclpy/pull/480,"Resolves D401 errors with pydocstyle 5.0.0.
Contributes to closing ros2/build_farmer#255","Resolves D401 errors with pydocstyle 5.0.0.
Contributes to closing ros2/build_farmer#255",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,480,2019-12-09T19:54:27Z,2019-12-10T03:31:39Z,2019-12-10T03:31:41Z,MERGED,True,5,5,4,https://github.com/nuclearsandwich,Update constructor docstrings to use imperative mood.,1,['in review'],https://github.com/ros2/rclpy/pull/480,https://github.com/nuclearsandwich,2,https://github.com/ros2/rclpy/pull/480#issuecomment-563415875,"Resolves D401 errors with pydocstyle 5.0.0.
Contributes to closing ros2/build_farmer#255",CI ros2/build_farmer#255 (comment),True,{}
ros2/rclpy,https://github.com/ros2/rclpy,482,2019-12-12T16:11:11Z,2019-12-12T19:49:32Z,2019-12-17T22:26:47Z,MERGED,True,1,1,1,https://github.com/clalancette,Fix the type annotation on get_parameters_by_prefix,1,[],https://github.com/ros2/rclpy/pull/482,https://github.com/clalancette,1,https://github.com/ros2/rclpy/pull/482,"It definitely returns a dictionary of strings to Parameters,
not a list.  The documentation and code was right, but just
the type annotation was wrong.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","It definitely returns a dictionary of strings to Parameters,
not a list.  The documentation and code was right, but just
the type annotation was wrong.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,482,2019-12-12T16:11:11Z,2019-12-12T19:49:32Z,2019-12-17T22:26:47Z,MERGED,True,1,1,1,https://github.com/clalancette,Fix the type annotation on get_parameters_by_prefix,1,[],https://github.com/ros2/rclpy/pull/482,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/482#issuecomment-565073580,"It definitely returns a dictionary of strings to Parameters,
not a list.  The documentation and code was right, but just
the type annotation was wrong.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org",@sloretz FYI.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,482,2019-12-12T16:11:11Z,2019-12-12T19:49:32Z,2019-12-17T22:26:47Z,MERGED,True,1,1,1,https://github.com/clalancette,Fix the type annotation on get_parameters_by_prefix,1,[],https://github.com/ros2/rclpy/pull/482,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/482#issuecomment-565091187,"It definitely returns a dictionary of strings to Parameters,
not a list.  The documentation and code was right, but just
the type annotation was wrong.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","I didn't test with mypy, but it looks correct to me

Thanks!  Here's CI up to rclpy.  It won't show much other than I didn't break anything with a typo:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,482,2019-12-12T16:11:11Z,2019-12-12T19:49:32Z,2019-12-17T22:26:47Z,MERGED,True,1,1,1,https://github.com/clalancette,Fix the type annotation on get_parameters_by_prefix,1,[],https://github.com/ros2/rclpy/pull/482,https://github.com/clalancette,4,https://github.com/ros2/rclpy/pull/482#issuecomment-565158227,"It definitely returns a dictionary of strings to Parameters,
not a list.  The documentation and code was right, but just
the type annotation was wrong.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","CI looks clean, and approved, so merging.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,482,2019-12-12T16:11:11Z,2019-12-12T19:49:32Z,2019-12-17T22:26:47Z,MERGED,True,1,1,1,https://github.com/clalancette,Fix the type annotation on get_parameters_by_prefix,1,[],https://github.com/ros2/rclpy/pull/482,https://github.com/felixdivo,5,https://github.com/ros2/rclpy/pull/482#issuecomment-566777255,"It definitely returns a dictionary of strings to Parameters,
not a list.  The documentation and code was right, but just
the type annotation was wrong.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","Thank's, just ran into this.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,483,2019-12-12T18:01:54Z,2019-12-12T18:32:43Z,2019-12-12T18:32:48Z,MERGED,True,3,3,1,https://github.com/jacobperron,[dashing] Remove f-strings,1,[],https://github.com/ros2/rclpy/pull/483,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/483,"They are not compatible with Python 3.5 and accidentally introduced in #475.
Fixes #481","They are not compatible with Python 3.5 and accidentally introduced in #475.
Fixes #481",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,483,2019-12-12T18:01:54Z,2019-12-12T18:32:43Z,2019-12-12T18:32:48Z,MERGED,True,3,3,1,https://github.com/jacobperron,[dashing] Remove f-strings,1,[],https://github.com/ros2/rclpy/pull/483,https://github.com/nuclearsandwich,2,https://github.com/ros2/rclpy/pull/483#issuecomment-565118117,"They are not compatible with Python 3.5 and accidentally introduced in #475.
Fixes #481",Checking this in my py35 workspace now.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,485,2019-12-18T16:55:33Z,2019-12-19T13:38:22Z,2019-12-19T13:38:27Z,MERGED,True,35,7,2,https://github.com/hidmic,Handle unknown global ROS arguments.,1,[],https://github.com/ros2/rclpy/pull/485,https://github.com/hidmic,1,https://github.com/ros2/rclpy/pull/485,"Follow up PR after #415, for the exact same set of reasons. We should probably backport this on the next Eloquent patch release.","Follow up PR after #415, for the exact same set of reasons. We should probably backport this on the next Eloquent patch release.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,485,2019-12-18T16:55:33Z,2019-12-19T13:38:22Z,2019-12-19T13:38:27Z,MERGED,True,35,7,2,https://github.com/hidmic,Handle unknown global ROS arguments.,1,[],https://github.com/ros2/rclpy/pull/485,https://github.com/hidmic,2,https://github.com/ros2/rclpy/pull/485#issuecomment-567121623,"Follow up PR after #415, for the exact same set of reasons. We should probably backport this on the next Eloquent patch release.","CI up to rclpy, rclcpp and test_cli_remapping:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,488,2020-01-03T21:19:17Z,2020-01-06T21:13:48Z,2020-01-07T12:37:45Z,MERGED,True,34,20,2,https://github.com/ivanpauno,Avoid a reference cycle between Node and TimeSource,2,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/488,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/488,See #470 (comment).,See #470 (comment).,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,488,2020-01-03T21:19:17Z,2020-01-06T21:13:48Z,2020-01-07T12:37:45Z,MERGED,True,34,20,2,https://github.com/ivanpauno,Avoid a reference cycle between Node and TimeSource,2,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/488,https://github.com/mjcarroll,2,https://github.com/ros2/rclpy/pull/488#issuecomment-571161415,See #470 (comment).,"Let's make sure to include the ros2* test suite in this CI, to see if issues with nightly hangs are resolved (specifically ros2topic and ros2action)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,488,2020-01-03T21:19:17Z,2020-01-06T21:13:48Z,2020-01-07T12:37:45Z,MERGED,True,34,20,2,https://github.com/ivanpauno,Avoid a reference cycle between Node and TimeSource,2,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/488,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/488#issuecomment-571188119,See #470 (comment).,"Let's make sure to include the ros2* test suite in this CI, to see if issues with nightly hangs are resolved (specifically ros2topic and ros2action)

The hangs observed in CI might be related with rclpy object destruction order problems.
This PR together with #490 might ""fix"" the problems.
But the value of this PR is completly unrelated to whatever those tests hang or not, so I'm just going to include rclpy in the CI run.
CI up to rclpy, only fastrtps:

Linux 
Linux-aarch64 
macOS 
Windows",True,{'THUMBS_UP': ['https://github.com/mjcarroll']}
ros2/rclpy,https://github.com/ros2/rclpy,488,2020-01-03T21:19:17Z,2020-01-06T21:13:48Z,2020-01-07T12:37:45Z,MERGED,True,34,20,2,https://github.com/ivanpauno,Avoid a reference cycle between Node and TimeSource,2,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/488,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/488#issuecomment-571316833,See #470 (comment).,"The windows fail is an unrelated flaky test, here this same branch passing:

Windows 

I'm merging this!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,489,2020-01-04T12:03:05Z,2020-01-05T14:38:31Z,2020-01-05T14:38:31Z,MERGED,True,1,1,1,https://github.com/felixdivo,Fix typo,1,[],https://github.com/ros2/rclpy/pull/489,https://github.com/felixdivo,1,https://github.com/ros2/rclpy/pull/489,,,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,489,2020-01-04T12:03:05Z,2020-01-05T14:38:31Z,2020-01-05T14:38:31Z,MERGED,True,1,1,1,https://github.com/felixdivo,Fix typo,1,[],https://github.com/ros2/rclpy/pull/489,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/489#issuecomment-570789152,,"This looks good, but you need to sign your commit to pass the DCO check.  Run git commit --amend -s on this branch, then force push it to pass the DCO check.  Then we can merge it.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,489,2020-01-04T12:03:05Z,2020-01-05T14:38:31Z,2020-01-05T14:38:31Z,MERGED,True,1,1,1,https://github.com/felixdivo,Fix typo,1,[],https://github.com/ros2/rclpy/pull/489,https://github.com/felixdivo,3,https://github.com/ros2/rclpy/pull/489#issuecomment-570800607,,"Okay, done. 😄",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,489,2020-01-04T12:03:05Z,2020-01-05T14:38:31Z,2020-01-05T14:38:31Z,MERGED,True,1,1,1,https://github.com/felixdivo,Fix typo,1,[],https://github.com/ros2/rclpy/pull/489,https://github.com/clalancette,4,https://github.com/ros2/rclpy/pull/489#issuecomment-570918200,,"Thanks for iterating, and the contribution.  I'm going to merge this without CI since it is just a typo fix in a comment.",True,{'LAUGH': ['https://github.com/felixdivo']}
ros2/rclpy,https://github.com/ros2/rclpy,490,2020-01-06T12:44:31Z,2020-01-07T16:36:55Z,2020-01-07T16:36:58Z,MERGED,True,21,7,1,https://github.com/ivanpauno,Avoid reference cycle between Node and ParameterService,4,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/490,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/490,See #470 (comment).,See #470 (comment).,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,490,2020-01-06T12:44:31Z,2020-01-07T16:36:55Z,2020-01-07T16:36:58Z,MERGED,True,21,7,1,https://github.com/ivanpauno,Avoid reference cycle between Node and ParameterService,4,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/490,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/490#issuecomment-571160368,See #470 (comment).,Why did you choose to refactor all methods to local function? This seems to make it much harder to write tests for the numerous functions since they are unaccessible from the outside. Wouldn't a weakref of the node be an option here too?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,490,2020-01-06T12:44:31Z,2020-01-07T16:36:55Z,2020-01-07T16:36:58Z,MERGED,True,21,7,1,https://github.com/ivanpauno,Avoid reference cycle between Node and ParameterService,4,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/490,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/490#issuecomment-571183367,See #470 (comment).,"Why did you choose to refactor all methods to local function? This seems to make it much harder to write tests for the numerous functions since they are unaccessible from the outside. Wouldn't a weakref of the node be an option here too?

Actually, it wasn't just only bad for unit testing, it wasn't breaking the reference cycle (1).
I now tested this together with #488, and #470 destruction order is ok.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,490,2020-01-06T12:44:31Z,2020-01-07T16:36:55Z,2020-01-07T16:36:58Z,MERGED,True,21,7,1,https://github.com/ivanpauno,Avoid reference cycle between Node and ParameterService,4,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/490,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/490#issuecomment-571570009,See #470 (comment).,"CI up to rclpy, only fastrtps:

Linux 
Linux-aarch64 
macOS 
Windows  (unrelated failure)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,492,2020-01-09T19:59:03Z,2020-01-10T17:14:03Z,2020-01-10T17:14:07Z,MERGED,True,34,78,4,https://github.com/jacobperron,Move logic for getting type support into a common function,1,['enhancement'],https://github.com/ros2/rclpy/pull/492,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/492,"CI testing rclpy:

Linux 
Linux-aarch64 
macOS 
Windows","CI testing rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,493,2020-01-09T20:46:11Z,2020-01-09T23:55:26Z,2020-01-09T23:55:30Z,MERGED,True,1,0,1,https://github.com/jacobperron,Find test dependency rosidl_generator_py,1,['in review'],https://github.com/ros2/rclpy/pull/493,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/493,"The package provides the cmake macro 'rosidl_generator_py_get_typesupports'.
There was no error before since calling 'ament_lint_auto_find_test_dependencies' appears to
be calling find_package for us. Though, I'm not sure we want to rely on the ament_lint command
since I presume it is responsible for finding linter dependencies, which rosidl_generator_py is not.

Linux 
Linux-aarch64 
macOS 
Windows  (Edit: unrelated failure #494)","The package provides the cmake macro 'rosidl_generator_py_get_typesupports'.
There was no error before since calling 'ament_lint_auto_find_test_dependencies' appears to
be calling find_package for us. Though, I'm not sure we want to rely on the ament_lint command
since I presume it is responsible for finding linter dependencies, which rosidl_generator_py is not.

Linux 
Linux-aarch64 
macOS 
Windows  (Edit: unrelated failure #494)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,495,2020-01-10T17:29:04Z,2020-01-15T18:06:14Z,2020-01-15T18:06:18Z,MERGED,True,217,0,4,https://github.com/jacobperron,Add wrappers for RMW serialize and deserialize functions,10,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/495,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/495,"Related to ros2/rosbag2#232
Added a serialization submodule with functions for serializing and deserializing ROS messages.
I noticed an issue related to the serialization of floating-point values. I believe it's a bug related to loss of precision for 32-bit floating point values as (de)serialization happens with underlying C-types. I'm not sure how to resolve it at the moment, but left a TODO and test that if uncommented
demonstrates the bug.","Related to ros2/rosbag2#232
Added a serialization submodule with functions for serializing and deserializing ROS messages.
I noticed an issue related to the serialization of floating-point values. I believe it's a bug related to loss of precision for 32-bit floating point values as (de)serialization happens with underlying C-types. I'm not sure how to resolve it at the moment, but left a TODO and test that if uncommented
demonstrates the bug.",True,{'THUMBS_UP': ['https://github.com/shmpwk']}
ros2/rclpy,https://github.com/ros2/rclpy,495,2020-01-10T17:29:04Z,2020-01-15T18:06:14Z,2020-01-15T18:06:18Z,MERGED,True,217,0,4,https://github.com/jacobperron,Add wrappers for RMW serialize and deserialize functions,10,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/495,https://github.com/Karsten1987,2,https://github.com/ros2/rclpy/pull/495#issuecomment-574413750,"Related to ros2/rosbag2#232
Added a serialization submodule with functions for serializing and deserializing ROS messages.
I noticed an issue related to the serialization of floating-point values. I believe it's a bug related to loss of precision for 32-bit floating point values as (de)serialization happens with underlying C-types. I'm not sure how to resolve it at the moment, but left a TODO and test that if uncommented
demonstrates the bug.","are you considering adding rcl_take_serialized_message and/or rcl_publish_serialized_message as well here?
I am asking because this would make it easy to check the interoperability between the serialization in python as well as c++.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,495,2020-01-10T17:29:04Z,2020-01-15T18:06:14Z,2020-01-15T18:06:18Z,MERGED,True,217,0,4,https://github.com/jacobperron,Add wrappers for RMW serialize and deserialize functions,10,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/495,https://github.com/jacobperron,3,https://github.com/ros2/rclpy/pull/495#issuecomment-574414468,"Related to ros2/rosbag2#232
Added a serialization submodule with functions for serializing and deserializing ROS messages.
I noticed an issue related to the serialization of floating-point values. I believe it's a bug related to loss of precision for 32-bit floating point values as (de)serialization happens with underlying C-types. I'm not sure how to resolve it at the moment, but left a TODO and test that if uncommented
demonstrates the bug.","are you considering adding rcl_take_serialized_message and/or rcl_publish_serialized_message as well here?

I hadn't, but we could expose these in a follow-up PR.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,495,2020-01-10T17:29:04Z,2020-01-15T18:06:14Z,2020-01-15T18:06:18Z,MERGED,True,217,0,4,https://github.com/jacobperron,Add wrappers for RMW serialize and deserialize functions,10,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/495,https://github.com/jacobperron,4,https://github.com/ros2/rclpy/pull/495#issuecomment-574425324,"Related to ros2/rosbag2#232
Added a serialization submodule with functions for serializing and deserializing ROS messages.
I noticed an issue related to the serialization of floating-point values. I believe it's a bug related to loss of precision for 32-bit floating point values as (de)serialization happens with underlying C-types. I'm not sure how to resolve it at the moment, but left a TODO and test that if uncommented
demonstrates the bug.","CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,495,2020-01-10T17:29:04Z,2020-01-15T18:06:14Z,2020-01-15T18:06:18Z,MERGED,True,217,0,4,https://github.com/jacobperron,Add wrappers for RMW serialize and deserialize functions,10,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/495,https://github.com/jacobperron,5,https://github.com/ros2/rclpy/pull/495#issuecomment-574780909,"Related to ros2/rosbag2#232
Added a serialization submodule with functions for serializing and deserializing ROS messages.
I noticed an issue related to the serialization of floating-point values. I believe it's a bug related to loss of precision for 32-bit floating point values as (de)serialization happens with underlying C-types. I'm not sure how to resolve it at the moment, but left a TODO and test that if uncommented
demonstrates the bug.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,497,2020-01-20T17:09:11Z,2020-03-04T15:55:33Z,2020-03-04T15:55:38Z,MERGED,True,981,485,22,https://github.com/ivanpauno,Fix object destruction order,11,['bug'],https://github.com/ros2/rclpy/pull/497,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/497,"Supersedes #470.
See #470 (comment).
Solves strange bugs related with destruction order.
Included in this PR:

rclpy_handle_t struct, related methods, and usage of it in Handle class.
Replaces usage of PyCapsule for rclpy_handle_t where needed.
Some formatting changes (avoid unnecessary castings, etc).

Not included (subject of a follow up):

rmw_request_id_t capsule is leaking.
rmw_qos_profile_t capsule is leaking.
Refactor wait set related code, so it can be wrapped by a Handle.
Refactor rclpy_action objects, so they can be wrapped in a Handle.","Supersedes #470.
See #470 (comment).
Solves strange bugs related with destruction order.
Included in this PR:

rclpy_handle_t struct, related methods, and usage of it in Handle class.
Replaces usage of PyCapsule for rclpy_handle_t where needed.
Some formatting changes (avoid unnecessary castings, etc).

Not included (subject of a follow up):

rmw_request_id_t capsule is leaking.
rmw_qos_profile_t capsule is leaking.
Refactor wait set related code, so it can be wrapped by a Handle.
Refactor rclpy_action objects, so they can be wrapped in a Handle.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,497,2020-01-20T17:09:11Z,2020-03-04T15:55:33Z,2020-03-04T15:55:38Z,MERGED,True,981,485,22,https://github.com/ivanpauno,Fix object destruction order,11,['bug'],https://github.com/ros2/rclpy/pull/497,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/497#issuecomment-576364312,"Supersedes #470.
See #470 (comment).
Solves strange bugs related with destruction order.
Included in this PR:

rclpy_handle_t struct, related methods, and usage of it in Handle class.
Replaces usage of PyCapsule for rclpy_handle_t where needed.
Some formatting changes (avoid unnecessary castings, etc).

Not included (subject of a follow up):

rmw_request_id_t capsule is leaking.
rmw_qos_profile_t capsule is leaking.
Refactor wait set related code, so it can be wrapped by a Handle.
Refactor rclpy_action objects, so they can be wrapped in a Handle.","CI above rclpy:

Linux",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,497,2020-01-20T17:09:11Z,2020-03-04T15:55:33Z,2020-03-04T15:55:38Z,MERGED,True,981,485,22,https://github.com/ivanpauno,Fix object destruction order,11,['bug'],https://github.com/ros2/rclpy/pull/497,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/497#issuecomment-576747460,"Supersedes #470.
See #470 (comment).
Solves strange bugs related with destruction order.
Included in this PR:

rclpy_handle_t struct, related methods, and usage of it in Handle class.
Replaces usage of PyCapsule for rclpy_handle_t where needed.
Some formatting changes (avoid unnecessary castings, etc).

Not included (subject of a follow up):

rmw_request_id_t capsule is leaking.
rmw_qos_profile_t capsule is leaking.
Refactor wait set related code, so it can be wrapped by a Handle.
Refactor rclpy_action objects, so they can be wrapped in a Handle.","New CI, after fixing failures:

Linux",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,497,2020-01-20T17:09:11Z,2020-03-04T15:55:33Z,2020-03-04T15:55:38Z,MERGED,True,981,485,22,https://github.com/ivanpauno,Fix object destruction order,11,['bug'],https://github.com/ros2/rclpy/pull/497,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/497#issuecomment-587025645,"Supersedes #470.
See #470 (comment).
Solves strange bugs related with destruction order.
Included in this PR:

rclpy_handle_t struct, related methods, and usage of it in Handle class.
Replaces usage of PyCapsule for rclpy_handle_t where needed.
Some formatting changes (avoid unnecessary castings, etc).

Not included (subject of a follow up):

rmw_request_id_t capsule is leaking.
rmw_qos_profile_t capsule is leaking.
Refactor wait set related code, so it can be wrapped by a Handle.
Refactor rclpy_action objects, so they can be wrapped in a Handle.",Linux,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,497,2020-01-20T17:09:11Z,2020-03-04T15:55:33Z,2020-03-04T15:55:38Z,MERGED,True,981,485,22,https://github.com/ivanpauno,Fix object destruction order,11,['bug'],https://github.com/ros2/rclpy/pull/497,https://github.com/ivanpauno,5,https://github.com/ros2/rclpy/pull/497#issuecomment-589181296,"Supersedes #470.
See #470 (comment).
Solves strange bugs related with destruction order.
Included in this PR:

rclpy_handle_t struct, related methods, and usage of it in Handle class.
Replaces usage of PyCapsule for rclpy_handle_t where needed.
Some formatting changes (avoid unnecessary castings, etc).

Not included (subject of a follow up):

rmw_request_id_t capsule is leaking.
rmw_qos_profile_t capsule is leaking.
Refactor wait set related code, so it can be wrapped by a Handle.
Refactor rclpy_action objects, so they can be wrapped in a Handle.","@hidmic About the regression test you asked, I gave it a try, but it's super hard to reproduce the problem.
The only example of the problem I found is #470, which is not more reproducible after #488 and #490.
My main reason to move lifetime manangement to C is that destruction order is not documented in Python, nor how the gc works. Both of them are an implementation detail of a particular python interpreter, and users shouldn't make any supposition about how they work.
From PEP 442:

Cyclic isolate (CI)
A standalone subgraph of objects in which no object is referenced from the outside, containing one or several reference cycles, and whose objects are still in a usable, non-broken state: they can access each other from their respective finalizers.


For CI objects, the order in which finalizers are called (step 2 above) is undefined.",True,{'THUMBS_UP': ['https://github.com/hidmic']}
ros2/rclpy,https://github.com/ros2/rclpy,497,2020-01-20T17:09:11Z,2020-03-04T15:55:33Z,2020-03-04T15:55:38Z,MERGED,True,981,485,22,https://github.com/ivanpauno,Fix object destruction order,11,['bug'],https://github.com/ros2/rclpy/pull/497,https://github.com/hidmic,6,https://github.com/ros2/rclpy/pull/497#issuecomment-592110813,"Supersedes #470.
See #470 (comment).
Solves strange bugs related with destruction order.
Included in this PR:

rclpy_handle_t struct, related methods, and usage of it in Handle class.
Replaces usage of PyCapsule for rclpy_handle_t where needed.
Some formatting changes (avoid unnecessary castings, etc).

Not included (subject of a follow up):

rmw_request_id_t capsule is leaking.
rmw_qos_profile_t capsule is leaking.
Refactor wait set related code, so it can be wrapped by a Handle.
Refactor rclpy_action objects, so they can be wrapped in a Handle.",I think listing that PEP to back up rclpy_handler_t rationale would be great for our future selves.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,497,2020-01-20T17:09:11Z,2020-03-04T15:55:33Z,2020-03-04T15:55:38Z,MERGED,True,981,485,22,https://github.com/ivanpauno,Fix object destruction order,11,['bug'],https://github.com/ros2/rclpy/pull/497,https://github.com/ivanpauno,7,https://github.com/ros2/rclpy/pull/497#issuecomment-592175700,"Supersedes #470.
See #470 (comment).
Solves strange bugs related with destruction order.
Included in this PR:

rclpy_handle_t struct, related methods, and usage of it in Handle class.
Replaces usage of PyCapsule for rclpy_handle_t where needed.
Some formatting changes (avoid unnecessary castings, etc).

Not included (subject of a follow up):

rmw_request_id_t capsule is leaking.
rmw_qos_profile_t capsule is leaking.
Refactor wait set related code, so it can be wrapped by a Handle.
Refactor rclpy_action objects, so they can be wrapped in a Handle.","I think listing that PEP to back up rclpy_handler_t rationale would be great for our future selves.

See 826e6cc.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,497,2020-01-20T17:09:11Z,2020-03-04T15:55:33Z,2020-03-04T15:55:38Z,MERGED,True,981,485,22,https://github.com/ivanpauno,Fix object destruction order,11,['bug'],https://github.com/ros2/rclpy/pull/497,https://github.com/ivanpauno,8,https://github.com/ros2/rclpy/pull/497#issuecomment-593462480,"Supersedes #470.
See #470 (comment).
Solves strange bugs related with destruction order.
Included in this PR:

rclpy_handle_t struct, related methods, and usage of it in Handle class.
Replaces usage of PyCapsule for rclpy_handle_t where needed.
Some formatting changes (avoid unnecessary castings, etc).

Not included (subject of a follow up):

rmw_request_id_t capsule is leaking.
rmw_qos_profile_t capsule is leaking.
Refactor wait set related code, so it can be wrapped by a Handle.
Refactor rclpy_action objects, so they can be wrapped in a Handle.","Linux  (unrelated failures)
Linux-aarch64   (unrelated failures)
macOS 
Windows   (unrelated failures)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,497,2020-01-20T17:09:11Z,2020-03-04T15:55:33Z,2020-03-04T15:55:38Z,MERGED,True,981,485,22,https://github.com/ivanpauno,Fix object destruction order,11,['bug'],https://github.com/ros2/rclpy/pull/497,https://github.com/ivanpauno,9,https://github.com/ros2/rclpy/pull/497#issuecomment-593963824,"Supersedes #470.
See #470 (comment).
Solves strange bugs related with destruction order.
Included in this PR:

rclpy_handle_t struct, related methods, and usage of it in Handle class.
Replaces usage of PyCapsule for rclpy_handle_t where needed.
Some formatting changes (avoid unnecessary castings, etc).

Not included (subject of a follow up):

rmw_request_id_t capsule is leaking.
rmw_qos_profile_t capsule is leaking.
Refactor wait set related code, so it can be wrapped by a Handle.
Refactor rclpy_action objects, so they can be wrapped in a Handle.",macOS   (unrelated failures),True,{}
ros2/rclpy,https://github.com/ros2/rclpy,498,2020-01-22T00:34:02Z,2020-01-22T00:38:59Z,2020-01-22T00:39:03Z,MERGED,True,2,1,1,https://github.com/claireyywang,add online doc link,1,['in review'],https://github.com/ros2/rclpy/pull/498,https://github.com/claireyywang,1,https://github.com/ros2/rclpy/pull/498,"I figured it might be easier to direct users to an existing page, then asking them to build their own documentation. Feel free to close this if it's not a preferable change.","I figured it might be easier to direct users to an existing page, then asking them to build their own documentation. Feel free to close this if it's not a preferable change.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,500,2020-01-31T21:06:15Z,2020-02-04T19:41:01Z,2020-02-04T19:41:07Z,MERGED,True,249,167,7,https://github.com/dirk-thomas,code style only: wrap after open parenthesis if not in one line,1,[],https://github.com/ros2/rclpy/pull/500,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/500,Style update to match the ROS 2 development guide and pass with the updated linter configuration from ament/ament_lint#210.,Style update to match the ROS 2 development guide and pass with the updated linter configuration from ament/ament_lint#210.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,503,2020-02-04T22:24:29Z,2020-02-04T23:18:32Z,2020-02-24T22:17:59Z,CLOSED,False,3,0,1,https://github.com/Arnatious,add QoSPresetProfile entry for default QoS profile,1,[],https://github.com/ros2/rclpy/pull/503,https://github.com/Arnatious,1,https://github.com/ros2/rclpy/pull/503,"Per #502, add an entry for the default qos profile specified by rclpy.
Signed-off-by: Ted Kern ted.kern@canonical.com","Per #502, add an entry for the default qos profile specified by rclpy.
Signed-off-by: Ted Kern ted.kern@canonical.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,504,2020-02-06T02:13:04Z,2020-03-10T20:44:17Z,2020-03-10T20:44:21Z,MERGED,True,39,19,4,https://github.com/jacobperron,Deprecate set_parameters_callback API,2,[],https://github.com/ros2/rclpy/pull/504,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/504,"Resolves #499
Replaced by new API that supports multiple callbacks introduced in #457.
Replaced references to the old API with the new API.
Left tests for the old API that should be removed or updated when we remove
the deprecated API.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows-container","Resolves #499
Replaced by new API that supports multiple callbacks introduced in #457.
Replaced references to the old API with the new API.
Left tests for the old API that should be removed or updated when we remove
the deprecated API.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows-container",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,504,2020-02-06T02:13:04Z,2020-03-10T20:44:17Z,2020-03-10T20:44:21Z,MERGED,True,39,19,4,https://github.com/jacobperron,Deprecate set_parameters_callback API,2,[],https://github.com/ros2/rclpy/pull/504,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/504#issuecomment-595926760,"Resolves #499
Replaced by new API that supports multiple callbacks introduced in #457.
Replaced references to the old API with the new API.
Left tests for the old API that should be removed or updated when we remove
the deprecated API.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows-container","Rebuild with latest changes:

Linux 
Linux-aarch64 
macOS 
Windows  (unrelated failures occurring on nightly)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,508,2020-02-12T21:23:18Z,2020-02-14T12:37:13Z,2020-02-14T12:37:18Z,MERGED,True,18,5,2,https://github.com/ivanpauno,Call init and shutdown thread safely,3,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/508,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/508,"The rcl functions aren't thread safe.
The upper layer has to lock.","The rcl functions aren't thread safe.
The upper layer has to lock.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,508,2020-02-12T21:23:18Z,2020-02-14T12:37:13Z,2020-02-14T12:37:18Z,MERGED,True,18,5,2,https://github.com/ivanpauno,Call init and shutdown thread safely,3,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/508,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/508#issuecomment-585772351,"The rcl functions aren't thread safe.
The upper layer has to lock.","Out of curiosity, did this show up as errors somewhere?

No, I realized about the problem in another discussion.
It's pretty hard to hit the problem, as shutdown should be called asynchronously while init is still running, which is an strange use-case.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,508,2020-02-12T21:23:18Z,2020-02-14T12:37:13Z,2020-02-14T12:37:18Z,MERGED,True,18,5,2,https://github.com/ivanpauno,Call init and shutdown thread safely,3,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/508,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/508#issuecomment-585882553,"The rcl functions aren't thread safe.
The upper layer has to lock.",Linux,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,509,2020-02-16T15:11:22Z,2020-03-23T21:11:46Z,2020-03-24T11:27:00Z,MERGED,True,67,5,3,https://github.com/Suyash458,Add capability to publish serialized messages,2,['enhancement'],https://github.com/ros2/rclpy/pull/509,https://github.com/Suyash458,1,https://github.com/ros2/rclpy/pull/509,"add rclpy_publish_raw to _rclpy.c
add publish_raw to publisher.py
add tests
fixes 496","add rclpy_publish_raw to _rclpy.c
add publish_raw to publisher.py
add tests
fixes 496",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,509,2020-02-16T15:11:22Z,2020-03-23T21:11:46Z,2020-03-24T11:27:00Z,MERGED,True,67,5,3,https://github.com/Suyash458,Add capability to publish serialized messages,2,['enhancement'],https://github.com/ros2/rclpy/pull/509,https://github.com/Suyash458,2,https://github.com/ros2/rclpy/pull/509#issuecomment-586718564,"add rclpy_publish_raw to _rclpy.c
add publish_raw to publisher.py
add tests
fixes 496","@jacobperron test_serialized_publish fails with the following stack trace
[64.578s] 17: 
[64.578s] 17:     def publish_raw(self, msg: bytes) -> None:
[64.578s] 17:         """"""
[64.578s] 17:         Send a serialized message to the topic for the publisher.
[64.578s] 17:     
[64.578s] 17:         :param msg: The ROS message to publish.
[64.578s] 17:         :raises: TypeError if the type of the passed message isn't an instance
[64.578s] 17:           of the provided type when the publisher was constructed.
[64.578s] 17:         """"""
[64.578s] 17:         if not isinstance(msg, bytes):
[64.578s] 17:             raise TypeError()
[64.578s] 17:         with self.handle as capsule:
[64.578s] 17: >           _rclpy.rclpy_publish_raw(capsule, msg)
[64.578s] 17: E           _rclpy.RCLError: Failed to initialize message: failed to allocate memory for uint8 array, at e:\projects\ros\src\ros2\rcutils\src\uint8_array.c:51
[64.578s] 17: 
[64.578s] 17: ..\..\src\ros2\rclpy\rclpy\rclpy\publisher.py:83: RCLError
I'm allocating space for the message  using rmw_serialized_message_init
  rcl_ret_t ret = rmw_serialized_message_init(&msg, (size_t)pymsg_size, &allocator);
Any idea what could be going wrong here?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,509,2020-02-16T15:11:22Z,2020-03-23T21:11:46Z,2020-03-24T11:27:00Z,MERGED,True,67,5,3,https://github.com/Suyash458,Add capability to publish serialized messages,2,['enhancement'],https://github.com/ros2/rclpy/pull/509,https://github.com/reed-lau,3,https://github.com/ros2/rclpy/pull/509#issuecomment-588024039,"add rclpy_publish_raw to _rclpy.c
add publish_raw to publisher.py
add tests
fixes 496",pymsg_size == 0 ?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,509,2020-02-16T15:11:22Z,2020-03-23T21:11:46Z,2020-03-24T11:27:00Z,MERGED,True,67,5,3,https://github.com/Suyash458,Add capability to publish serialized messages,2,['enhancement'],https://github.com/ros2/rclpy/pull/509,https://github.com/Suyash458,4,https://github.com/ros2/rclpy/pull/509#issuecomment-588025370,"add rclpy_publish_raw to _rclpy.c
add publish_raw to publisher.py
add tests
fixes 496","pymsg_size == 0 ?

No, it's the number of bytes in the serialized message
Py_ssize_t pymsg_size = PyBytes_Size(msg)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,509,2020-02-16T15:11:22Z,2020-03-23T21:11:46Z,2020-03-24T11:27:00Z,MERGED,True,67,5,3,https://github.com/Suyash458,Add capability to publish serialized messages,2,['enhancement'],https://github.com/ros2/rclpy/pull/509,https://github.com/reed-lau,5,https://github.com/ros2/rclpy/pull/509#issuecomment-588027787,"add rclpy_publish_raw to _rclpy.c
add publish_raw to publisher.py
add tests
fixes 496","Do we really need a publish_raw interface in python for the final user?
how about we check it  automtically in the publish in python, as follow:
def publish(self, msg):
  if isinstance(msg, MsgType):
    self._rclpy_publish(..., msg)
  elif isinstance(msg, bytes):
    self._rclpy_publish_raw(...., msg, raw)
  else:
    raise ...",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,509,2020-02-16T15:11:22Z,2020-03-23T21:11:46Z,2020-03-24T11:27:00Z,MERGED,True,67,5,3,https://github.com/Suyash458,Add capability to publish serialized messages,2,['enhancement'],https://github.com/ros2/rclpy/pull/509,https://github.com/Suyash458,6,https://github.com/ros2/rclpy/pull/509#issuecomment-588029643,"add rclpy_publish_raw to _rclpy.c
add publish_raw to publisher.py
add tests
fixes 496","Sure, that makes sense",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,509,2020-02-16T15:11:22Z,2020-03-23T21:11:46Z,2020-03-24T11:27:00Z,MERGED,True,67,5,3,https://github.com/Suyash458,Add capability to publish serialized messages,2,['enhancement'],https://github.com/ros2/rclpy/pull/509,https://github.com/Suyash458,7,https://github.com/ros2/rclpy/pull/509#issuecomment-589537580,"add rclpy_publish_raw to _rclpy.c
add publish_raw to publisher.py
add tests
fixes 496","@reed-lau How about overriding publish with the message type as bytes. Similar to the rclcpp API here
def publish(self, msg: bytes):
      with self.handle as capsule:
            _rclpy.rclpy_publish_raw(capsule, msg)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,509,2020-02-16T15:11:22Z,2020-03-23T21:11:46Z,2020-03-24T11:27:00Z,MERGED,True,67,5,3,https://github.com/Suyash458,Add capability to publish serialized messages,2,['enhancement'],https://github.com/ros2/rclpy/pull/509,https://github.com/reed-lau,8,https://github.com/ros2/rclpy/pull/509#issuecomment-589932547,"add rclpy_publish_raw to _rclpy.c
add publish_raw to publisher.py
add tests
fixes 496",you can discuss it with the community. what I said is my personal opinion.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,509,2020-02-16T15:11:22Z,2020-03-23T21:11:46Z,2020-03-24T11:27:00Z,MERGED,True,67,5,3,https://github.com/Suyash458,Add capability to publish serialized messages,2,['enhancement'],https://github.com/ros2/rclpy/pull/509,https://github.com/Suyash458,9,https://github.com/ros2/rclpy/pull/509#issuecomment-601069599,"add rclpy_publish_raw to _rclpy.c
add publish_raw to publisher.py
add tests
fixes 496",@jacobperron lemme know if these changes look good,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,509,2020-02-16T15:11:22Z,2020-03-23T21:11:46Z,2020-03-24T11:27:00Z,MERGED,True,67,5,3,https://github.com/Suyash458,Add capability to publish serialized messages,2,['enhancement'],https://github.com/ros2/rclpy/pull/509,https://github.com/jacobperron,10,https://github.com/ros2/rclpy/pull/509#issuecomment-602856974,"add rclpy_publish_raw to _rclpy.c
add publish_raw to publisher.py
add tests
fixes 496",@Suyash458 Thanks for the contribution!,True,{'THUMBS_UP': ['https://github.com/Suyash458']}
ros2/rclpy,https://github.com/ros2/rclpy,509,2020-02-16T15:11:22Z,2020-03-23T21:11:46Z,2020-03-24T11:27:00Z,MERGED,True,67,5,3,https://github.com/Suyash458,Add capability to publish serialized messages,2,['enhancement'],https://github.com/ros2/rclpy/pull/509,https://github.com/Suyash458,11,https://github.com/ros2/rclpy/pull/509#issuecomment-603184453,"add rclpy_publish_raw to _rclpy.c
add publish_raw to publisher.py
add tests
fixes 496",@jacobperron Thanks for reviewing!,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,510,2020-02-17T15:27:45Z,2020-02-20T17:11:14Z,2020-02-20T17:11:18Z,MERGED,True,2,2,1,https://github.com/ivanpauno,Rename rmw_topic_endpoint_info_array count to size,1,[],https://github.com/ros2/rclpy/pull/510,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/510,See ros2/rmw#196.,See ros2/rmw#196.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,511,2020-02-21T21:42:35Z,2020-02-27T17:29:49Z,2020-02-27T17:29:49Z,MERGED,True,0,3,1,https://github.com/mm318,Enable test_get_publishers_subscriptions_info_by_topic() unit test for more rmw_implementations,2,[],https://github.com/ros2/rclpy/pull/511,https://github.com/mm318,1,https://github.com/ros2/rclpy/pull/511,"This is for addressing the comment at ros2/rmw_connext#380 (comment).
Since ros2/rmw_connext#391 is ready for review, this change can be reviewed and merged along with it.","This is for addressing the comment at ros2/rmw_connext#380 (comment).
Since ros2/rmw_connext#391 is ready for review, this change can be reviewed and merged along with it.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,511,2020-02-21T21:42:35Z,2020-02-27T17:29:49Z,2020-02-27T17:29:49Z,MERGED,True,0,3,1,https://github.com/mm318,Enable test_get_publishers_subscriptions_info_by_topic() unit test for more rmw_implementations,2,[],https://github.com/ros2/rclpy/pull/511,https://github.com/prajakta-gokhale,2,https://github.com/ros2/rclpy/pull/511#issuecomment-590548871,"This is for addressing the comment at ros2/rmw_connext#380 (comment).
Since ros2/rmw_connext#391 is ready for review, this change can be reviewed and merged along with it.",@ros2/aws-oncall please run CI on this.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,512,2020-02-22T00:16:14Z,2020-03-04T00:53:44Z,2020-03-04T00:53:44Z,MERGED,True,7,2,1,https://github.com/brawner,Fixes max_jitter calculation,1,[],https://github.com/ros2/rclpy/pull/512,https://github.com/brawner,1,https://github.com/ros2/rclpy/pull/512,"The calculation of the max_jitter, which is a criterion for this test's success, was incorrect. This fixes the abs() calculation and adds min/max to the __str__() call.","The calculation of the max_jitter, which is a criterion for this test's success, was incorrect. This fixes the abs() calculation and adds min/max to the __str__() call.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,512,2020-02-22T00:16:14Z,2020-03-04T00:53:44Z,2020-03-04T00:53:44Z,MERGED,True,7,2,1,https://github.com/brawner,Fixes max_jitter calculation,1,[],https://github.com/ros2/rclpy/pull/512,https://github.com/brawner,2,https://github.com/ros2/rclpy/pull/512#issuecomment-589890832,"The calculation of the max_jitter, which is a criterion for this test's success, was incorrect. This fixes the abs() calculation and adds min/max to the __str__() call.","This is a flakey test on windows and mac. This was run with --retest-until-fail 50 for this specific test.

Linux 
Linux-aarch64 
macOS 
Windows 
Windows-container",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,512,2020-02-22T00:16:14Z,2020-03-04T00:53:44Z,2020-03-04T00:53:44Z,MERGED,True,7,2,1,https://github.com/brawner,Fixes max_jitter calculation,1,[],https://github.com/ros2/rclpy/pull/512,https://github.com/brawner,3,https://github.com/ros2/rclpy/pull/512#issuecomment-594241312,"The calculation of the max_jitter, which is a criterion for this test's success, was incorrect. This fixes the abs() calculation and adds min/max to the __str__() call.",Is someone able to approve (and merge) this PR? @dirk-thomas @clalancette,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,514,2020-02-24T19:42:45Z,2020-02-25T16:50:30Z,2020-03-05T20:32:37Z,MERGED,True,3,1,1,https://github.com/rotu,Change sizes to Py_ssize_t,1,[],https://github.com/ros2/rclpy/pull/514,https://github.com/rotu,1,https://github.com/ros2/rclpy/pull/514,"Fixes CI issue http://build.ros2.org/user/rotu/my-views/view/CycloneDDS/job/Fci__nightly-cyclonedds_ubuntu_focal_amd64/lastSuccessfulBuild/testReport/junit/rclpy.src.ros2.rclpy.rclpy.test/test_serialization/test_serialize_deserialize_msgs7_MultiNested_/
message = test_msgs.msg.MultiNested(array_of_arrays=[test_msgs.msg.Arrays(bool_values=[False, True, False], byte_values=[b'\x00'...values_default=[0, 1, 18446744073709551615], string_values_default=['', 'max value', 'min value'], alignment_check=2)])

    def serialize_message(message) -> bytes:
        """"""
        Serialize a ROS message.

        :param message: The ROS message to serialize.
        :return: The serialized bytes.
        """"""
        message_type = type(message)
        # this line imports the typesupport for the message module if not already done
        check_for_type_support(message_type)
>       return _rclpy.rclpy_serialize(message, message_type)
E       DeprecationWarning: PY_SSIZE_T_CLEAN will be required for '#' formats

../../src/ros2/rclpy/rclpy/rclpy/serialization.py:29: DeprecationWarning

Signed-off-by: Dan Rose dan@digilabs.io","Fixes CI issue http://build.ros2.org/user/rotu/my-views/view/CycloneDDS/job/Fci__nightly-cyclonedds_ubuntu_focal_amd64/lastSuccessfulBuild/testReport/junit/rclpy.src.ros2.rclpy.rclpy.test/test_serialization/test_serialize_deserialize_msgs7_MultiNested_/
message = test_msgs.msg.MultiNested(array_of_arrays=[test_msgs.msg.Arrays(bool_values=[False, True, False], byte_values=[b'\x00'...values_default=[0, 1, 18446744073709551615], string_values_default=['', 'max value', 'min value'], alignment_check=2)])

    def serialize_message(message) -> bytes:
        """"""
        Serialize a ROS message.

        :param message: The ROS message to serialize.
        :return: The serialized bytes.
        """"""
        message_type = type(message)
        # this line imports the typesupport for the message module if not already done
        check_for_type_support(message_type)
>       return _rclpy.rclpy_serialize(message, message_type)
E       DeprecationWarning: PY_SSIZE_T_CLEAN will be required for '#' formats

../../src/ros2/rclpy/rclpy/rclpy/serialization.py:29: DeprecationWarning

Signed-off-by: Dan Rose dan@digilabs.io",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,514,2020-02-24T19:42:45Z,2020-02-25T16:50:30Z,2020-03-05T20:32:37Z,MERGED,True,3,1,1,https://github.com/rotu,Change sizes to Py_ssize_t,1,[],https://github.com/ros2/rclpy/pull/514,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/514#issuecomment-590636949,"Fixes CI issue http://build.ros2.org/user/rotu/my-views/view/CycloneDDS/job/Fci__nightly-cyclonedds_ubuntu_focal_amd64/lastSuccessfulBuild/testReport/junit/rclpy.src.ros2.rclpy.rclpy.test/test_serialization/test_serialize_deserialize_msgs7_MultiNested_/
message = test_msgs.msg.MultiNested(array_of_arrays=[test_msgs.msg.Arrays(bool_values=[False, True, False], byte_values=[b'\x00'...values_default=[0, 1, 18446744073709551615], string_values_default=['', 'max value', 'min value'], alignment_check=2)])

    def serialize_message(message) -> bytes:
        """"""
        Serialize a ROS message.

        :param message: The ROS message to serialize.
        :return: The serialized bytes.
        """"""
        message_type = type(message)
        # this line imports the typesupport for the message module if not already done
        check_for_type_support(message_type)
>       return _rclpy.rclpy_serialize(message, message_type)
E       DeprecationWarning: PY_SSIZE_T_CLEAN will be required for '#' formats

../../src/ros2/rclpy/rclpy/rclpy/serialization.py:29: DeprecationWarning

Signed-off-by: Dan Rose dan@digilabs.io","Linux 
Linux-aarch64 
macOS 
Windows 
Windows-container 

Edit: The test_timer failures are also present on the nightly windows-container build.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,515,2020-02-24T20:01:08Z,2020-06-17T18:28:46Z,2020-06-17T18:48:56Z,CLOSED,False,6,1,1,https://github.com/brawner,Disable 100Hz test in test_timer.py for Windows,1,[],https://github.com/ros2/rclpy/pull/515,https://github.com/brawner,1,https://github.com/ros2/rclpy/pull/515,"This is related to issue #513, but this test fails periodically on windows, and quite regularly on the windows container builds. This PR disables the 0.01s period version for the test.
Without fix:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows-container 

With fix:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows-container","This is related to issue #513, but this test fails periodically on windows, and quite regularly on the windows container builds. This PR disables the 0.01s period version for the test.
Without fix:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows-container 

With fix:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows-container",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,515,2020-02-24T20:01:08Z,2020-06-17T18:28:46Z,2020-06-17T18:48:56Z,CLOSED,False,6,1,1,https://github.com/brawner,Disable 100Hz test in test_timer.py for Windows,1,[],https://github.com/ros2/rclpy/pull/515,https://github.com/brawner,2,https://github.com/ros2/rclpy/pull/515#issuecomment-645029599,"This is related to issue #513, but this test fails periodically on windows, and quite regularly on the windows container builds. This PR disables the 0.01s period version for the test.
Without fix:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows-container 

With fix:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows-container",@ivanpauno Do you know if this test failure has been an issue recently. It doesn't show up on nightly_win_rep,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,515,2020-02-24T20:01:08Z,2020-06-17T18:28:46Z,2020-06-17T18:48:56Z,CLOSED,False,6,1,1,https://github.com/brawner,Disable 100Hz test in test_timer.py for Windows,1,[],https://github.com/ros2/rclpy/pull/515,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/515#issuecomment-645490597,"This is related to issue #513, but this test fails periodically on windows, and quite regularly on the windows container builds. This PR disables the 0.01s period version for the test.
Without fix:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows-container 

With fix:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows-container","@ivanpauno Do you know if this test failure has been an issue recently. It doesn't show up on nightly_win_rep

No, but I would still skip it on Windows, where we have problems in test using small timeouts (smaller than 100ms).
Adding that test case doesn't improve code coverage, and it confuses contributors when it fails (even more when it's extremely flaky like this case, and you can't find other failures in nightly repeated jobs to check it's unrelated).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,515,2020-02-24T20:01:08Z,2020-06-17T18:28:46Z,2020-06-17T18:48:56Z,CLOSED,False,6,1,1,https://github.com/brawner,Disable 100Hz test in test_timer.py for Windows,1,[],https://github.com/ros2/rclpy/pull/515,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/515#issuecomment-645492330,"This is related to issue #513, but this test fails periodically on windows, and quite regularly on the windows container builds. This PR disables the 0.01s period version for the test.
Without fix:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows-container 

With fix:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows-container","Based on #267, I would consider parameterize the test only with periods greater than 100ms.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,515,2020-02-24T20:01:08Z,2020-06-17T18:28:46Z,2020-06-17T18:48:56Z,CLOSED,False,6,1,1,https://github.com/brawner,Disable 100Hz test in test_timer.py for Windows,1,[],https://github.com/ros2/rclpy/pull/515,https://github.com/brawner,5,https://github.com/ros2/rclpy/pull/515#issuecomment-645542334,"This is related to issue #513, but this test fails periodically on windows, and quite regularly on the windows container builds. This PR disables the 0.01s period version for the test.
Without fix:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows-container 

With fix:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows-container","Ok, I'll rebase and rerun CI",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,515,2020-02-24T20:01:08Z,2020-06-17T18:28:46Z,2020-06-17T18:48:56Z,CLOSED,False,6,1,1,https://github.com/brawner,Disable 100Hz test in test_timer.py for Windows,1,[],https://github.com/ros2/rclpy/pull/515,https://github.com/brawner,6,https://github.com/ros2/rclpy/pull/515#issuecomment-645545223,"This is related to issue #513, but this test fails periodically on windows, and quite regularly on the windows container builds. This PR disables the 0.01s period version for the test.
Without fix:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows-container 

With fix:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows-container","Actually, this was already done in #554. Closing.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,515,2020-02-24T20:01:08Z,2020-06-17T18:28:46Z,2020-06-17T18:48:56Z,CLOSED,False,6,1,1,https://github.com/brawner,Disable 100Hz test in test_timer.py for Windows,1,[],https://github.com/ros2/rclpy/pull/515,https://github.com/ivanpauno,7,https://github.com/ros2/rclpy/pull/515#issuecomment-645555767,"This is related to issue #513, but this test fails periodically on windows, and quite regularly on the windows container builds. This PR disables the 0.01s period version for the test.
Without fix:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows-container 

With fix:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows-container","Actually, this was already done in #554. Closing.

Haha 😂, I forgot about that sorry.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,516,2020-02-25T17:09:02Z,2020-02-27T18:22:31Z,2020-02-27T18:22:31Z,MERGED,True,1,1,1,https://github.com/mm318,Embolden the warning in the docs about Client.call() potentially deadlocking,1,[],https://github.com/ros2/rclpy/pull/516,https://github.com/mm318,1,https://github.com/ros2/rclpy/pull/516,The potential for the synchronous call() to cause a deadlock if called from inside a callback warrants a more serious warning than how it is currently being documented.,The potential for the synchronous call() to cause a deadlock if called from inside a callback warrants a more serious warning than how it is currently being documented.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,516,2020-02-25T17:09:02Z,2020-02-27T18:22:31Z,2020-02-27T18:22:31Z,MERGED,True,1,1,1,https://github.com/mm318,Embolden the warning in the docs about Client.call() potentially deadlocking,1,[],https://github.com/ros2/rclpy/pull/516,https://github.com/piraka9011,2,https://github.com/ros2/rclpy/pull/516#issuecomment-592103151,The potential for the synchronous call() to cause a deadlock if called from inside a callback warrants a more serious warning than how it is currently being documented.,"@jacobperron @ivanpauno Hopefully a simple PR :)
Could any of you PTAL?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,517,2020-02-27T14:57:07Z,2020-03-03T09:42:57Z,2020-03-03T20:20:51Z,MERGED,True,8,0,1,https://github.com/ahcorde,Included get_available_rmw_implementations,1,['enhancement'],https://github.com/ros2/rclpy/pull/517,https://github.com/ahcorde,1,https://github.com/ros2/rclpy/pull/517,"As discussed in these PRs ros2/ros2cli#460, ros2/rmw_implementation#85 and ros2/rmw_implementation#84 I included in rclpy the utility function get_available_rmw_implementations()","As discussed in these PRs ros2/ros2cli#460, ros2/rmw_implementation#85 and ros2/rmw_implementation#84 I included in rclpy the utility function get_available_rmw_implementations()",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,517,2020-02-27T14:57:07Z,2020-03-03T09:42:57Z,2020-03-03T20:20:51Z,MERGED,True,8,0,1,https://github.com/ahcorde,Included get_available_rmw_implementations,1,['enhancement'],https://github.com/ros2/rclpy/pull/517,https://github.com/ahcorde,2,https://github.com/ros2/rclpy/pull/517#issuecomment-593858203,"As discussed in these PRs ros2/ros2cli#460, ros2/rmw_implementation#85 and ros2/rmw_implementation#84 I included in rclpy the utility function get_available_rmw_implementations()","Testing

ros2/rmw_implementation#85
#517
ros2/ros2cli#461



Linux 
Linux-aarch64 
macOS 
Windows 
Windows-container 


Unrelated test failures. Merging",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,518,2020-03-03T19:52:04Z,2020-04-23T20:34:12Z,2021-05-28T21:08:38Z,MERGED,True,86,1,2,https://github.com/ivanpauno,Ensure logging is initialized only once,4,['in review'],https://github.com/ros2/rclpy/pull/518,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/518,"Connects to ros2/rcl#579.
Connects to ros2/rclcpp#998.","Connects to ros2/rcl#579.
Connects to ros2/rclcpp#998.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,518,2020-03-03T19:52:04Z,2020-04-23T20:34:12Z,2021-05-28T21:08:38Z,MERGED,True,86,1,2,https://github.com/ivanpauno,Ensure logging is initialized only once,4,['in review'],https://github.com/ros2/rclpy/pull/518,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/518#issuecomment-595299788,"Connects to ros2/rcl#579.
Connects to ros2/rclcpp#998.",Rebased after #497 went in.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,518,2020-03-03T19:52:04Z,2020-04-23T20:34:12Z,2021-05-28T21:08:38Z,MERGED,True,86,1,2,https://github.com/ivanpauno,Ensure logging is initialized only once,4,['in review'],https://github.com/ros2/rclpy/pull/518,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/518#issuecomment-595304798,"Connects to ros2/rcl#579.
Connects to ros2/rclcpp#998.",CI jobs in ros2/rcl#579 (comment).,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,519,2020-03-03T20:20:14Z,2020-03-04T07:41:53Z,2020-03-04T07:41:57Z,MERGED,True,2,2,1,https://github.com/ahcorde,[rclpy] fixed flake8 test utilities.py,1,"['enhancement', 'tests']",https://github.com/ros2/rclpy/pull/519,https://github.com/ahcorde,1,https://github.com/ros2/rclpy/pull/519,Fixed flake8 test #517 (comment),Fixed flake8 test #517 (comment),True,{}
ros2/rclpy,https://github.com/ros2/rclpy,519,2020-03-03T20:20:14Z,2020-03-04T07:41:53Z,2020-03-04T07:41:57Z,MERGED,True,2,2,1,https://github.com/ahcorde,[rclpy] fixed flake8 test utilities.py,1,"['enhancement', 'tests']",https://github.com/ros2/rclpy/pull/519,https://github.com/ahcorde,2,https://github.com/ros2/rclpy/pull/519#issuecomment-594156101,Fixed flake8 test #517 (comment),"Linux 
Linux-aarch64 
macOS 
Windows 
Windows-container",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,519,2020-03-03T20:20:14Z,2020-03-04T07:41:53Z,2020-03-04T07:41:57Z,MERGED,True,2,2,1,https://github.com/ahcorde,[rclpy] fixed flake8 test utilities.py,1,"['enhancement', 'tests']",https://github.com/ros2/rclpy/pull/519,https://github.com/ahcorde,3,https://github.com/ros2/rclpy/pull/519#issuecomment-594372165,Fixed flake8 test #517 (comment),Flake8 passing in all of them. Merging,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,522,2020-03-06T23:20:19Z,2020-03-08T04:51:19Z,2020-03-08T04:51:22Z,MERGED,True,32,3,1,https://github.com/dirk-thomas,add env var to filter available RMW implementations,2,['enhancement'],https://github.com/ros2/rclpy/pull/522,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/522,Same as ros2/rmw#199 (review).,Same as ros2/rmw#199 (review).,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,522,2020-03-06T23:20:19Z,2020-03-08T04:51:19Z,2020-03-08T04:51:22Z,MERGED,True,32,3,1,https://github.com/dirk-thomas,add env var to filter available RMW implementations,2,['enhancement'],https://github.com/ros2/rclpy/pull/522,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/522#issuecomment-596015387,Same as ros2/rmw#199 (review).,,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,523,2020-03-10T21:00:19Z,2020-03-12T17:28:20Z,2020-03-12T17:28:20Z,MERGED,True,9,8,1,https://github.com/rotu,Don't check lifespan on subscriber QoS,1,[],https://github.com/ros2/rclpy/pull/523,https://github.com/rotu,1,https://github.com/ros2/rclpy/pull/523,"Similar to changes in ros2/rcl#571 and ros2/rclcpp#1002
Fixes CI issue http://build.ros2.org/view/Fci/job/Fci__nightly-cyclonedds_ubuntu_focal_amd64/lastCompletedBuild/testReport/rclpy.src.ros2.rclpy.rclpy.test.test_node/TestNodeAllowUndeclaredParameters/test_get_publishers_subscriptions_info_by_topic/
Signed-off-by: Dan Rose dan@digilabs.io","Similar to changes in ros2/rcl#571 and ros2/rclcpp#1002
Fixes CI issue http://build.ros2.org/view/Fci/job/Fci__nightly-cyclonedds_ubuntu_focal_amd64/lastCompletedBuild/testReport/rclpy.src.ros2.rclpy.rclpy.test.test_node/TestNodeAllowUndeclaredParameters/test_get_publishers_subscriptions_info_by_topic/
Signed-off-by: Dan Rose dan@digilabs.io",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,523,2020-03-10T21:00:19Z,2020-03-12T17:28:20Z,2020-03-12T17:28:20Z,MERGED,True,9,8,1,https://github.com/rotu,Don't check lifespan on subscriber QoS,1,[],https://github.com/ros2/rclpy/pull/523,https://github.com/rotu,2,https://github.com/ros2/rclpy/pull/523#issuecomment-597757112,"Similar to changes in ros2/rcl#571 and ros2/rclcpp#1002
Fixes CI issue http://build.ros2.org/view/Fci/job/Fci__nightly-cyclonedds_ubuntu_focal_amd64/lastCompletedBuild/testReport/rclpy.src.ros2.rclpy.rclpy.test.test_node/TestNodeAllowUndeclaredParameters/test_get_publishers_subscriptions_info_by_topic/
Signed-off-by: Dan Rose dan@digilabs.io","@jacobperron, could you please review this?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,523,2020-03-10T21:00:19Z,2020-03-12T17:28:20Z,2020-03-12T17:28:20Z,MERGED,True,9,8,1,https://github.com/rotu,Don't check lifespan on subscriber QoS,1,[],https://github.com/ros2/rclpy/pull/523,https://github.com/jacobperron,3,https://github.com/ros2/rclpy/pull/523#issuecomment-598314859,"Similar to changes in ros2/rcl#571 and ros2/rclcpp#1002
Fixes CI issue http://build.ros2.org/view/Fci/job/Fci__nightly-cyclonedds_ubuntu_focal_amd64/lastCompletedBuild/testReport/rclpy.src.ros2.rclpy.rclpy.test.test_node/TestNodeAllowUndeclaredParameters/test_get_publishers_subscriptions_info_by_topic/
Signed-off-by: Dan Rose dan@digilabs.io","Linux 
Linux-aarch64 
macOS 
Windows 

Warnings and test failures are unrelated.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,525,2020-03-13T05:23:46Z,2020-03-13T17:23:11Z,2020-03-13T17:23:26Z,MERGED,True,1,1,1,https://github.com/DongheeYe,Set context when creating Timer.,1,[],https://github.com/ros2/rclpy/pull/525,https://github.com/DongheeYe,1,https://github.com/ros2/rclpy/pull/525,"rcl timer must create a guard condition in order to reset a canceled timer.
When calling rcl_create_timer, it will alls guard condition and it is need context.
Signed-off-by: Donghee Ye donghee.ye@samsung.com
It is related to : ros2/rcl#589","rcl timer must create a guard condition in order to reset a canceled timer.
When calling rcl_create_timer, it will alls guard condition and it is need context.
Signed-off-by: Donghee Ye donghee.ye@samsung.com
It is related to : ros2/rcl#589",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,525,2020-03-13T05:23:46Z,2020-03-13T17:23:11Z,2020-03-13T17:23:26Z,MERGED,True,1,1,1,https://github.com/DongheeYe,Set context when creating Timer.,1,[],https://github.com/ros2/rclpy/pull/525,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/525#issuecomment-598831219,"rcl timer must create a guard condition in order to reset a canceled timer.
When calling rcl_create_timer, it will alls guard condition and it is need context.
Signed-off-by: Donghee Ye donghee.ye@samsung.com
It is related to : ros2/rcl#589",CI here: ros2/rcl#589 (comment).,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,526,2020-03-22T20:38:05Z,2020-04-06T17:27:50Z,2020-04-06T17:27:50Z,MERGED,True,11,11,1,https://github.com/rotu,Don't persist node and context between tests,1,[],https://github.com/ros2/rclpy/pull/526,https://github.com/rotu,1,https://github.com/ros2/rclpy/pull/526,"Maybe fix ros2/rmw_cyclonedds#117
Signed-off-by: Dan Rose dan@digilabs.io","Maybe fix ros2/rmw_cyclonedds#117
Signed-off-by: Dan Rose dan@digilabs.io",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,526,2020-03-22T20:38:05Z,2020-04-06T17:27:50Z,2020-04-06T17:27:50Z,MERGED,True,11,11,1,https://github.com/rotu,Don't persist node and context between tests,1,[],https://github.com/ros2/rclpy/pull/526,https://github.com/rotu,2,https://github.com/ros2/rclpy/pull/526#issuecomment-603290940,"Maybe fix ros2/rmw_cyclonedds#117
Signed-off-by: Dan Rose dan@digilabs.io","@emersonknapp could you please review this? I can't seem to reproduce the original error locally, but this seems the likely culprit.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,526,2020-03-22T20:38:05Z,2020-04-06T17:27:50Z,2020-04-06T17:27:50Z,MERGED,True,11,11,1,https://github.com/rotu,Don't persist node and context between tests,1,[],https://github.com/ros2/rclpy/pull/526,https://github.com/emersonknapp,3,https://github.com/ros2/rclpy/pull/526#issuecomment-603376714,"Maybe fix ros2/rmw_cyclonedds#117
Signed-off-by: Dan Rose dan@digilabs.io","@ros2/aws-oncall  - please run this CI job
Gist: https://gist.githubusercontent.com/emersonknapp/df99345d71fabde7dc19d7cbb242c8ba/raw/c0dd6e8dcb15d2f5f54b48df4ec7e11df921450a/ros2.repos
BUILD args: --packages-up-to rclpy
TEST args: --packages-select rclpy
Job: ci_launcher",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,526,2020-03-22T20:38:05Z,2020-04-06T17:27:50Z,2020-04-06T17:27:50Z,MERGED,True,11,11,1,https://github.com/rotu,Don't persist node and context between tests,1,[],https://github.com/ros2/rclpy/pull/526,https://github.com/emersonknapp,4,https://github.com/ros2/rclpy/pull/526#issuecomment-603377596,"Maybe fix ros2/rmw_cyclonedds#117
Signed-off-by: Dan Rose dan@digilabs.io","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,526,2020-03-22T20:38:05Z,2020-04-06T17:27:50Z,2020-04-06T17:27:50Z,MERGED,True,11,11,1,https://github.com/rotu,Don't persist node and context between tests,1,[],https://github.com/ros2/rclpy/pull/526,https://github.com/rotu,5,https://github.com/ros2/rclpy/pull/526#issuecomment-603392959,"Maybe fix ros2/rmw_cyclonedds#117
Signed-off-by: Dan Rose dan@digilabs.io",Oops. Fixed flake8 mistake,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,526,2020-03-22T20:38:05Z,2020-04-06T17:27:50Z,2020-04-06T17:27:50Z,MERGED,True,11,11,1,https://github.com/rotu,Don't persist node and context between tests,1,[],https://github.com/ros2/rclpy/pull/526,https://github.com/emersonknapp,6,https://github.com/ros2/rclpy/pull/526#issuecomment-603399364,"Maybe fix ros2/rmw_cyclonedds#117
Signed-off-by: Dan Rose dan@digilabs.io","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,526,2020-03-22T20:38:05Z,2020-04-06T17:27:50Z,2020-04-06T17:27:50Z,MERGED,True,11,11,1,https://github.com/rotu,Don't persist node and context between tests,1,[],https://github.com/ros2/rclpy/pull/526,https://github.com/rotu,7,https://github.com/ros2/rclpy/pull/526#issuecomment-603445430,"Maybe fix ros2/rmw_cyclonedds#117
Signed-off-by: Dan Rose dan@digilabs.io",Unrelated test failures.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,526,2020-03-22T20:38:05Z,2020-04-06T17:27:50Z,2020-04-06T17:27:50Z,MERGED,True,11,11,1,https://github.com/rotu,Don't persist node and context between tests,1,[],https://github.com/ros2/rclpy/pull/526,https://github.com/emersonknapp,8,https://github.com/ros2/rclpy/pull/526#issuecomment-603449475,"Maybe fix ros2/rmw_cyclonedds#117
Signed-off-by: Dan Rose dan@digilabs.io","Verified that those failures are already present in the nightly windows build https://ci.ros2.org/view/nightly/job/nightly_win_deb/1568/#showFailuresLink.
I don't have merge access though so this'll need approval from a maintainer",True,{'THUMBS_UP': ['https://github.com/rotu']}
ros2/rclpy,https://github.com/ros2/rclpy,526,2020-03-22T20:38:05Z,2020-04-06T17:27:50Z,2020-04-06T17:27:50Z,MERGED,True,11,11,1,https://github.com/rotu,Don't persist node and context between tests,1,[],https://github.com/ros2/rclpy/pull/526,https://github.com/clalancette,9,https://github.com/ros2/rclpy/pull/526#issuecomment-608048472,"Maybe fix ros2/rmw_cyclonedds#117
Signed-off-by: Dan Rose dan@digilabs.io","This seems reasonable to me, but needs a rebase since it has a conflict now.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,526,2020-03-22T20:38:05Z,2020-04-06T17:27:50Z,2020-04-06T17:27:50Z,MERGED,True,11,11,1,https://github.com/rotu,Don't persist node and context between tests,1,[],https://github.com/ros2/rclpy/pull/526,https://github.com/rotu,10,https://github.com/ros2/rclpy/pull/526#issuecomment-608061604,"Maybe fix ros2/rmw_cyclonedds#117
Signed-off-by: Dan Rose dan@digilabs.io","Thank for the heads-up, @clalancette.
It's rather dispiriting to have to ""fix"" a PR 9 days later through no fault of my own. How do I request a timely review and merge for a PR once development is complete?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,526,2020-03-22T20:38:05Z,2020-04-06T17:27:50Z,2020-04-06T17:27:50Z,MERGED,True,11,11,1,https://github.com/rotu,Don't persist node and context between tests,1,[],https://github.com/ros2/rclpy/pull/526,https://github.com/rotu,11,https://github.com/ros2/rclpy/pull/526#issuecomment-608612312,"Maybe fix ros2/rmw_cyclonedds#117
Signed-off-by: Dan Rose dan@digilabs.io","@clalancette, could you please re-review and merge?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,526,2020-03-22T20:38:05Z,2020-04-06T17:27:50Z,2020-04-06T17:27:50Z,MERGED,True,11,11,1,https://github.com/rotu,Don't persist node and context between tests,1,[],https://github.com/ros2/rclpy/pull/526,https://github.com/clalancette,12,https://github.com/ros2/rclpy/pull/526#issuecomment-608624033,"Maybe fix ros2/rmw_cyclonedds#117
Signed-off-by: Dan Rose dan@digilabs.io","FYI: locally flake8 complained that the line that created the node was > 99 characters.  So I fixed that, but I'm honestly not sure why CI didn't pick it up earlier.  I'm going to run one more CI here just to be sure it is happy, then I'll merge.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,526,2020-03-22T20:38:05Z,2020-04-06T17:27:50Z,2020-04-06T17:27:50Z,MERGED,True,11,11,1,https://github.com/rotu,Don't persist node and context between tests,1,[],https://github.com/ros2/rclpy/pull/526,https://github.com/clalancette,13,https://github.com/ros2/rclpy/pull/526#issuecomment-608624775,"Maybe fix ros2/rmw_cyclonedds#117
Signed-off-by: Dan Rose dan@digilabs.io","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,526,2020-03-22T20:38:05Z,2020-04-06T17:27:50Z,2020-04-06T17:27:50Z,MERGED,True,11,11,1,https://github.com/rotu,Don't persist node and context between tests,1,[],https://github.com/ros2/rclpy/pull/526,https://github.com/rotu,14,https://github.com/ros2/rclpy/pull/526#issuecomment-608980956,"Maybe fix ros2/rmw_cyclonedds#117
Signed-off-by: Dan Rose dan@digilabs.io",Build failures do not appear caused by this PR. What is my next step to move this PR forward?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,526,2020-03-22T20:38:05Z,2020-04-06T17:27:50Z,2020-04-06T17:27:50Z,MERGED,True,11,11,1,https://github.com/rotu,Don't persist node and context between tests,1,[],https://github.com/ros2/rclpy/pull/526,https://github.com/clalancette,15,https://github.com/ros2/rclpy/pull/526#issuecomment-609854117,"Maybe fix ros2/rmw_cyclonedds#117
Signed-off-by: Dan Rose dan@digilabs.io","All right, rebased to take care of the compiler issues.  One more CI 🤞

Linux 
Linux-aarch64 
macOS 
Windows",True,{'HOORAY': ['https://github.com/rotu']}
ros2/rclpy,https://github.com/ros2/rclpy,526,2020-03-22T20:38:05Z,2020-04-06T17:27:50Z,2020-04-06T17:27:50Z,MERGED,True,11,11,1,https://github.com/rotu,Don't persist node and context between tests,1,[],https://github.com/ros2/rclpy/pull/526,https://github.com/rotu,16,https://github.com/ros2/rclpy/pull/526#issuecomment-609878621,"Maybe fix ros2/rmw_cyclonedds#117
Signed-off-by: Dan Rose dan@digilabs.io",Yay! Green!,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,526,2020-03-22T20:38:05Z,2020-04-06T17:27:50Z,2020-04-06T17:27:50Z,MERGED,True,11,11,1,https://github.com/rotu,Don't persist node and context between tests,1,[],https://github.com/ros2/rclpy/pull/526,https://github.com/clalancette,17,https://github.com/ros2/rclpy/pull/526#issuecomment-609930544,"Maybe fix ros2/rmw_cyclonedds#117
Signed-off-by: Dan Rose dan@digilabs.io","The windows test failures are all flakes, and can be seen in earlier nightlies.  Thus, I'll go ahead and merge this.  Thanks for the contribution.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,531,2020-03-31T08:09:29Z,2020-04-01T22:14:53Z,2020-04-01T22:54:32Z,MERGED,True,58,1,2,https://github.com/tfoote,Add support for functions passed to Context.on_shutdown,1,[],https://github.com/ros2/rclpy/pull/531,https://github.com/tfoote,1,https://github.com/ros2/rclpy/pull/531,"Add support for on_shutdown functions not just methods.
Otherwise you get an error like this:
  File ""./test_shutdown.py"", line 37, in <module>
    main()
  File ""./test_shutdown.py"", line 22, in main
    rclpy.get_default_context().on_shutdown(lambda : print(""lambda on shutdown called""))
  File ""/opt/ros/eloquent/lib/python3.6/site-packages/rclpy/context.py"", line 82, in on_shutdown
    self._callbacks.append(weakref.WeakMethod(callback, self._remove_callback))
  File ""/usr/lib/python3.6/weakref.py"", line 50, in __new__
    .format(type(meth))) from None
TypeError: argument should be a bound method, not <class 'function'>

I also added unit tests to cover the callback types and the weak pointers being broken.

Linux 
Linux-aarch64 
macOS 
Windows","Add support for on_shutdown functions not just methods.
Otherwise you get an error like this:
  File ""./test_shutdown.py"", line 37, in <module>
    main()
  File ""./test_shutdown.py"", line 22, in main
    rclpy.get_default_context().on_shutdown(lambda : print(""lambda on shutdown called""))
  File ""/opt/ros/eloquent/lib/python3.6/site-packages/rclpy/context.py"", line 82, in on_shutdown
    self._callbacks.append(weakref.WeakMethod(callback, self._remove_callback))
  File ""/usr/lib/python3.6/weakref.py"", line 50, in __new__
    .format(type(meth))) from None
TypeError: argument should be a bound method, not <class 'function'>

I also added unit tests to cover the callback types and the weak pointers being broken.

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,534,2020-04-01T23:13:33Z,,2020-04-03T22:48:07Z,OPEN,False,58,1,2,https://github.com/tfoote,Add support for functions passed to Context.on_shutdown,1,[],https://github.com/ros2/rclpy/pull/534,https://github.com/tfoote,1,https://github.com/ros2/rclpy/pull/534,"This is a redo of #531 which I accidentally merged.
With the feedback from @claireyywang
Re: isinstance
I switched to isinstance which is slightly more generic to support inheritance, but in this case I don't think there's other cases that will appear.
Re: testing
You should be able to invoke the individual tests, but I just ran all of rclpy's suite it took just over 1 minute to validate.
New CI:

Linux 
Linux-aarch64 
macOS 
Windows","This is a redo of #531 which I accidentally merged.
With the feedback from @claireyywang
Re: isinstance
I switched to isinstance which is slightly more generic to support inheritance, but in this case I don't think there's other cases that will appear.
Re: testing
You should be able to invoke the individual tests, but I just ran all of rclpy's suite it took just over 1 minute to validate.
New CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,534,2020-04-01T23:13:33Z,,2020-04-03T22:48:07Z,OPEN,False,58,1,2,https://github.com/tfoote,Add support for functions passed to Context.on_shutdown,1,[],https://github.com/ros2/rclpy/pull/534,https://github.com/tfoote,2,https://github.com/ros2/rclpy/pull/534#issuecomment-608176122,"This is a redo of #531 which I accidentally merged.
With the feedback from @claireyywang
Re: isinstance
I switched to isinstance which is slightly more generic to support inheritance, but in this case I don't think there's other cases that will appear.
Re: testing
You should be able to invoke the individual tests, but I just ran all of rclpy's suite it took just over 1 minute to validate.
New CI:

Linux 
Linux-aarch64 
macOS 
Windows","There are 6 failures on windows. I traced them all to previous builds.


projectroot.test_rate :
passed 1577 https://ci.ros2.org/view/nightly/job/nightly_win_deb/lastCompletedBuild/testReport/rclpy.src.ros2.rclpy.rclpy.test.test_rate/
failed 1575 https://ci.ros2.org/view/nightly/job/nightly_win_deb/1575/testReport/rclpy.src.ros2.rclpy.rclpy.test.test_rate/
failed 1571: https://ci.ros2.org/view/nightly/job/nightly_win_deb/1571/testReport/rclpy.src.ros2.rclpy.rclpy.test.test_rate/


projectroot.test_timer  failed 1577 https://ci.ros2.org/view/nightly/job/nightly_win_deb/1577/testReport/(root)/projectroot/test_timer/


rclpy.src.ros2.rclpy.rclpy.test.test_rate.TestRate.test_rate_valid_period
Not run in debug?? failing in release since 1507 https://ci.ros2.org/view/nightly/job/nightly_win_rel/1507/testReport/rclpy.src.ros2.rclpy.rclpy.test.test_rate/TestRate/test_rate_valid_period/


rclpy.src.ros2.rclpy.rclpy.test.test_timer.test_zero_callback[0.01]  failing since #1563 https://ci.ros2.org/view/nightly/job/nightly_win_deb/1577/testReport/rclpy.src.ros2.rclpy.rclpy.test/test_timer/test_zero_callback_0_01_/


rclpy.src.ros2.rclpy.rclpy.test.test_timer.test_number_callbacks[0.01] failing since 1573 https://ci.ros2.org/view/nightly/job/nightly_win_deb/1577/testReport/rclpy.src.ros2.rclpy.rclpy.test/test_timer/test_number_callbacks_0_01_/


rclpy.src.ros2.rclpy.rclpy.test.test_timer.test_cancel_reset[0.01] Not in debug results?? failing since 1497 rel https://ci.ros2.org/view/nightly/job/nightly_win_rel/1507/testReport/rclpy.src.ros2.rclpy.rclpy.test/test_timer/test_cancel_reset_0_01_/",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,535,2020-04-02T13:16:25Z,2020-04-03T13:15:14Z,2020-04-03T13:15:17Z,MERGED,True,1,1,1,https://github.com/ivanpauno,Avoid unsigned/signed comparison warning,1,['in review'],https://github.com/ros2/rclpy/pull/535,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/535,Required because of change here https://github.com/ros2/rmw/blob/cbb5fc008f4304a62cf070663e3174c9f7970f9f/rmw/include/rmw/types.h#L40 in ros2/rmw#189.,Required because of change here https://github.com/ros2/rmw/blob/cbb5fc008f4304a62cf070663e3174c9f7970f9f/rmw/include/rmw/types.h#L40 in ros2/rmw#189.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,536,2020-04-07T07:17:27Z,2020-04-15T16:36:21Z,2020-04-16T03:01:50Z,MERGED,True,225,23,3,https://github.com/emersonknapp,Create a default warning for qos incompatibility,6,[],https://github.com/ros2/rclpy/pull/536,https://github.com/emersonknapp,1,https://github.com/ros2/rclpy/pull/536,Signed-off-by: Emerson Knapp emerson.b.knapp@gmail.com,Signed-off-by: Emerson Knapp emerson.b.knapp@gmail.com,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,536,2020-04-07T07:17:27Z,2020-04-15T16:36:21Z,2020-04-16T03:01:50Z,MERGED,True,225,23,3,https://github.com/emersonknapp,Create a default warning for qos incompatibility,6,[],https://github.com/ros2/rclpy/pull/536,https://github.com/mm318,2,https://github.com/ros2/rclpy/pull/536#issuecomment-612836774,Signed-off-by: Emerson Knapp emerson.b.knapp@gmail.com,This pull request has been updated to behave similarly to the rclcpp version (in ros2/rclcpp#1051).,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,536,2020-04-07T07:17:27Z,2020-04-15T16:36:21Z,2020-04-16T03:01:50Z,MERGED,True,225,23,3,https://github.com/emersonknapp,Create a default warning for qos incompatibility,6,[],https://github.com/ros2/rclpy/pull/536,https://github.com/mm318,3,https://github.com/ros2/rclpy/pull/536#issuecomment-613864583,Signed-off-by: Emerson Knapp emerson.b.knapp@gmail.com,"@ros2/aws-oncall - please run this CI job
Gist: https://gist.githubusercontent.com/mm318/9ab95351a88ec18085660718f582912f/raw/779f53aa1e5ffcebc4c093d71f49bd5c7d2c97c4/ros2_incompatible_qos_callbacks.repos
BUILD args: --packages-up-to rclpy
TEST args: --packages-select rclpy
Job: ci_launcher",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,536,2020-04-07T07:17:27Z,2020-04-15T16:36:21Z,2020-04-16T03:01:50Z,MERGED,True,225,23,3,https://github.com/emersonknapp,Create a default warning for qos incompatibility,6,[],https://github.com/ros2/rclpy/pull/536,https://github.com/piraka9011,4,https://github.com/ros2/rclpy/pull/536#issuecomment-614035125,Signed-off-by: Emerson Knapp emerson.b.knapp@gmail.com,"Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,536,2020-04-07T07:17:27Z,2020-04-15T16:36:21Z,2020-04-16T03:01:50Z,MERGED,True,225,23,3,https://github.com/emersonknapp,Create a default warning for qos incompatibility,6,[],https://github.com/ros2/rclpy/pull/536,https://github.com/mm318,5,https://github.com/ros2/rclpy/pull/536#issuecomment-614110053,Signed-off-by: Emerson Knapp emerson.b.knapp@gmail.com,"Windows 


Looks to me like the build test failures on Windows are unrelated, @ivanpauno.",True,{'THUMBS_UP': ['https://github.com/ivanpauno']}
ros2/rclpy,https://github.com/ros2/rclpy,536,2020-04-07T07:17:27Z,2020-04-15T16:36:21Z,2020-04-16T03:01:50Z,MERGED,True,225,23,3,https://github.com/emersonknapp,Create a default warning for qos incompatibility,6,[],https://github.com/ros2/rclpy/pull/536,https://github.com/jacobperron,6,https://github.com/ros2/rclpy/pull/536#issuecomment-614338473,Signed-off-by: Emerson Knapp emerson.b.knapp@gmail.com,"FYI, I think this change is going to cause a string of new test failures in ros2cli, as the warning appears when running various CLI tools (e.g. ros2 topic echo).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,536,2020-04-07T07:17:27Z,2020-04-15T16:36:21Z,2020-04-16T03:01:50Z,MERGED,True,225,23,3,https://github.com/emersonknapp,Create a default warning for qos incompatibility,6,[],https://github.com/ros2/rclpy/pull/536,https://github.com/dirk-thomas,7,https://github.com/ros2/rclpy/pull/536#issuecomment-614347733,Signed-off-by: Emerson Knapp emerson.b.knapp@gmail.com,"FYI, I think this change is going to cause a string of new test failures in ros2cli, as the warning appears when running various CLI tools (e.g. ros2 topic echo).

@emersonknapp @mm318 @ros2/aws-oncall FYI",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,536,2020-04-07T07:17:27Z,2020-04-15T16:36:21Z,2020-04-16T03:01:50Z,MERGED,True,225,23,3,https://github.com/emersonknapp,Create a default warning for qos incompatibility,6,[],https://github.com/ros2/rclpy/pull/536,https://github.com/emersonknapp,8,https://github.com/ros2/rclpy/pull/536#issuecomment-614348154,Signed-off-by: Emerson Knapp emerson.b.knapp@gmail.com,"Thx for the heads up. Saw one such test failure in rosbag2, though that was resolvable by making the test less fragile. CLI is a bit different",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,536,2020-04-07T07:17:27Z,2020-04-15T16:36:21Z,2020-04-16T03:01:50Z,MERGED,True,225,23,3,https://github.com/emersonknapp,Create a default warning for qos incompatibility,6,[],https://github.com/ros2/rclpy/pull/536,https://github.com/dirk-thomas,9,https://github.com/ros2/rclpy/pull/536#issuecomment-614369068,Signed-off-by: Emerson Knapp emerson.b.knapp@gmail.com,See https://ci.ros2.org/job/ci_linux/10244/testReport/ for a list of test failures in the ros2cli repo.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,536,2020-04-07T07:17:27Z,2020-04-15T16:36:21Z,2020-04-16T03:01:50Z,MERGED,True,225,23,3,https://github.com/emersonknapp,Create a default warning for qos incompatibility,6,[],https://github.com/ros2/rclpy/pull/536,https://github.com/nuclearsandwich,10,https://github.com/ros2/rclpy/pull/536#issuecomment-614380507,Signed-off-by: Emerson Knapp emerson.b.knapp@gmail.com,@emersonknapp since this PR will introduce test failures. I'm wondering if we should revert it before the nightlies and explore solutions in the morning?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,536,2020-04-07T07:17:27Z,2020-04-15T16:36:21Z,2020-04-16T03:01:50Z,MERGED,True,225,23,3,https://github.com/emersonknapp,Create a default warning for qos incompatibility,6,[],https://github.com/ros2/rclpy/pull/536,https://github.com/emersonknapp,11,https://github.com/ros2/rclpy/pull/536#issuecomment-614388104,Signed-off-by: Emerson Knapp emerson.b.knapp@gmail.com,"I'm personally fine with that, I believe in a revert-friendly engineering culture. I'm unfortunately not at my computer for the remainder of the evening, if you or @mm318 would be able to do it?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,537,2020-04-07T10:23:33Z,2020-04-15T06:55:30Z,2020-04-15T06:55:30Z,CLOSED,False,35,15,2,https://github.com/iluetkeb,Return wait_set timestamps from rclpy.,1,[],https://github.com/ros2/rclpy/pull/537,https://github.com/iluetkeb,1,https://github.com/ros2/rclpy/pull/537,"@wjwwood  please have a look whether this would be okay for you. The timestamps are currently not used, but are exposed in the API.","@wjwwood  please have a look whether this would be okay for you. The timestamps are currently not used, but are exposed in the API.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,538,2020-04-09T14:31:53Z,2020-04-13T17:07:20Z,2020-04-13T17:07:24Z,MERGED,True,89,7,3,https://github.com/ivanpauno,Add enclaves introspection method in `Node`,8,['in review'],https://github.com/ros2/rclpy/pull/538,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/538,"Fixes #529.
With this, policy generation from a running example can be reactivated in sros2.","Fixes #529.
With this, policy generation from a running example can be reactivated in sros2.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,538,2020-04-09T14:31:53Z,2020-04-13T17:07:20Z,2020-04-13T17:07:24Z,MERGED,True,89,7,3,https://github.com/ivanpauno,Add enclaves introspection method in `Node`,8,['in review'],https://github.com/ros2/rclpy/pull/538,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/538#issuecomment-612048561,"Fixes #529.
With this, policy generation from a running example can be reactivated in sros2.","this looks like a lot of copied code, would there be a way to reuse rather than duplicate ?

See 7b4e246.
It would be easier if rcl API would only provide one function, and accept a nullptr in the other outputs. But, I don't want to create PRs in many layers.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,538,2020-04-09T14:31:53Z,2020-04-13T17:07:20Z,2020-04-13T17:07:24Z,MERGED,True,89,7,3,https://github.com/ivanpauno,Add enclaves introspection method in `Node`,8,['in review'],https://github.com/ros2/rclpy/pull/538,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/538#issuecomment-612050535,"Fixes #529.
With this, policy generation from a running example can be reactivated in sros2.","Linux  (unrelated failures)
Linux-aarch64  (unrelated failures)
macOS  (unrelated failures, was run after the block doc addition)
Windows   (unrelated failures)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,538,2020-04-09T14:31:53Z,2020-04-13T17:07:20Z,2020-04-13T17:07:24Z,MERGED,True,89,7,3,https://github.com/ivanpauno,Add enclaves introspection method in `Node`,8,['in review'],https://github.com/ros2/rclpy/pull/538,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/538#issuecomment-612131636,"Fixes #529.
With this, policy generation from a running example can be reactivated in sros2.","I would be great to update this to use ""enclaves"" and match ros2/rcl#612 so that there isn't a need for an immediate follow-up PR changing this new API

Sounds good, I will wait until the other group of PRs get merged, and then update.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,538,2020-04-09T14:31:53Z,2020-04-13T17:07:20Z,2020-04-13T17:07:24Z,MERGED,True,89,7,3,https://github.com/ivanpauno,Add enclaves introspection method in `Node`,8,['in review'],https://github.com/ros2/rclpy/pull/538,https://github.com/ivanpauno,5,https://github.com/ros2/rclpy/pull/538#issuecomment-612947622,"Fixes #529.
With this, policy generation from a running example can be reactivated in sros2.","Linux  (unrelated build warning)
Linux-aarch64  (unrelated build warning)
macOS  (unrelated build warning)
Windows  (unrelated build warning + unrelated test failures)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,539,2020-04-10T14:16:04Z,2020-04-11T04:55:44Z,2020-04-11T04:55:48Z,MERGED,True,1,1,1,https://github.com/nuclearsandwich,use f-string to fix flake8 warning,2,[],https://github.com/ros2/rclpy/pull/539,https://github.com/nuclearsandwich,1,https://github.com/ros2/rclpy/pull/539,"Resolves a flake8 error which would manifest as a KeyError at runtime
when this exception is created.
Spotted in nightlies it took a minute to reproduce since the flake8 version we install claims to be incompatible with pyflakes 2.2.0 which was just released, which is likely why the error has the F999 code.","Resolves a flake8 error which would manifest as a KeyError at runtime
when this exception is created.
Spotted in nightlies it took a minute to reproduce since the flake8 version we install claims to be incompatible with pyflakes 2.2.0 which was just released, which is likely why the error has the F999 code.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,539,2020-04-10T14:16:04Z,2020-04-11T04:55:44Z,2020-04-11T04:55:48Z,MERGED,True,1,1,1,https://github.com/nuclearsandwich,use f-string to fix flake8 warning,2,[],https://github.com/ros2/rclpy/pull/539,https://github.com/nuclearsandwich,2,https://github.com/ros2/rclpy/pull/539#issuecomment-612048175,"Resolves a flake8 error which would manifest as a KeyError at runtime
when this exception is created.
Spotted in nightlies it took a minute to reproduce since the flake8 version we install claims to be incompatible with pyflakes 2.2.0 which was just released, which is likely why the error has the F999 code.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,539,2020-04-10T14:16:04Z,2020-04-11T04:55:44Z,2020-04-11T04:55:48Z,MERGED,True,1,1,1,https://github.com/nuclearsandwich,use f-string to fix flake8 warning,2,[],https://github.com/ros2/rclpy/pull/539,https://github.com/nuclearsandwich,3,https://github.com/ros2/rclpy/pull/539#issuecomment-612057155,"Resolves a flake8 error which would manifest as a KeyError at runtime
when this exception is created.
Spotted in nightlies it took a minute to reproduce since the flake8 version we install claims to be incompatible with pyflakes 2.2.0 which was just released, which is likely why the error has the F999 code.",The CMake warning is from ament/ament_cmake#238 and is not related to this change.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,539,2020-04-10T14:16:04Z,2020-04-11T04:55:44Z,2020-04-11T04:55:48Z,MERGED,True,1,1,1,https://github.com/nuclearsandwich,use f-string to fix flake8 warning,2,[],https://github.com/ros2/rclpy/pull/539,https://github.com/nuclearsandwich,4,https://github.com/ros2/rclpy/pull/539#issuecomment-612197965,"Resolves a flake8 error which would manifest as a KeyError at runtime
when this exception is created.
Spotted in nightlies it took a minute to reproduce since the flake8 version we install claims to be incompatible with pyflakes 2.2.0 which was just released, which is likely why the error has the F999 code.",Sanity rebuild on Linux alone,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,539,2020-04-10T14:16:04Z,2020-04-11T04:55:44Z,2020-04-11T04:55:48Z,MERGED,True,1,1,1,https://github.com/nuclearsandwich,use f-string to fix flake8 warning,2,[],https://github.com/ros2/rclpy/pull/539,https://github.com/dirk-thomas,5,https://github.com/ros2/rclpy/pull/539#issuecomment-612327740,"Resolves a flake8 error which would manifest as a KeyError at runtime
when this exception is created.
Spotted in nightlies it took a minute to reproduce since the flake8 version we install claims to be incompatible with pyflakes 2.2.0 which was just released, which is likely why the error has the F999 code.",I updated the title and will go ahead and merge this since CI showed the flake8 warning is resolved.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,540,2020-04-11T03:44:57Z,2020-04-11T04:58:27Z,2020-04-11T04:58:30Z,MERGED,True,1,1,1,https://github.com/dirk-thomas,rename rosidl_generator_c namespace to rosidl_runtime_c,1,[],https://github.com/ros2/rclpy/pull/540,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/540,Related to ros2/rosidl#458.,Related to ros2/rosidl#458.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,541,2020-04-14T16:53:23Z,2020-04-16T19:46:02Z,2020-04-16T19:46:06Z,MERGED,True,1,1,1,https://github.com/dirk-thomas,update includes to use non-entry point headers from detail subdir,2,[],https://github.com/ros2/rclpy/pull/541,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/541,Related to ros2/rosidl#461.,Related to ros2/rosidl#461.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,541,2020-04-14T16:53:23Z,2020-04-16T19:46:02Z,2020-04-16T19:46:06Z,MERGED,True,1,1,1,https://github.com/dirk-thomas,update includes to use non-entry point headers from detail subdir,2,[],https://github.com/ros2/rclpy/pull/541,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/541#issuecomment-614858469,Related to ros2/rosidl#461.,We should update the PR title.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,542,2020-04-14T19:04:21Z,2020-04-23T21:29:07Z,2020-08-10T23:41:31Z,MERGED,True,94,33,4,https://github.com/iluetkeb,Add method to take with message_info,7,[],https://github.com/ros2/rclpy/pull/542,https://github.com/iluetkeb,1,https://github.com/ros2/rclpy/pull/542,"This implements the Python side of ros2/design#259 and needs ros2/rcl#619
The message info is simply returned as a dictionary. I figured if we want to encapsulate it into something else, we can always do that in Python. That shouldn't break API.
So far, only subscriptions have a method to take with info.","This implements the Python side of ros2/design#259 and needs ros2/rcl#619
The message info is simply returned as a dictionary. I figured if we want to encapsulate it into something else, we can always do that in Python. That shouldn't break API.
So far, only subscriptions have a method to take with info.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,542,2020-04-14T19:04:21Z,2020-04-23T21:29:07Z,2020-08-10T23:41:31Z,MERGED,True,94,33,4,https://github.com/iluetkeb,Add method to take with message_info,7,[],https://github.com/ros2/rclpy/pull/542,https://github.com/iluetkeb,2,https://github.com/ros2/rclpy/pull/542#issuecomment-617410726,"This implements the Python side of ros2/design#259 and needs ros2/rcl#619
The message info is simply returned as a dictionary. I figured if we want to encapsulate it into something else, we can always do that in Python. That shouldn't break API.
So far, only subscriptions have a method to take with info.","I've reworked this to take comments into acount, but we still have several test failures that I can't really figure out right now. I'll look into it tomorrow.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,542,2020-04-14T19:04:21Z,2020-04-23T21:29:07Z,2020-08-10T23:41:31Z,MERGED,True,94,33,4,https://github.com/iluetkeb,Add method to take with message_info,7,[],https://github.com/ros2/rclpy/pull/542,https://github.com/iluetkeb,3,https://github.com/ros2/rclpy/pull/542#issuecomment-617745720,"This implements the Python side of ros2/design#259 and needs ros2/rcl#619
The message info is simply returned as a dictionary. I figured if we want to encapsulate it into something else, we can always do that in Python. That shouldn't break API.
So far, only subscriptions have a method to take with info.","OK, I fixed the tests. It was a really simple issue because of a bad merge.
btw, since I now integrated taking the message-info with the ""normal"" rcl_take, we can be sure it won't segfault at least.
the correctness of the timestamps is not yet checked, because none of the existing tests can be easily modified, I will have to write a new one.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,542,2020-04-14T19:04:21Z,2020-04-23T21:29:07Z,2020-08-10T23:41:31Z,MERGED,True,94,33,4,https://github.com/iluetkeb,Add method to take with message_info,7,[],https://github.com/ros2/rclpy/pull/542,https://github.com/wjwwood,4,https://github.com/ros2/rclpy/pull/542#issuecomment-617957075,"This implements the Python side of ros2/design#259 and needs ros2/rcl#619
The message info is simply returned as a dictionary. I figured if we want to encapsulate it into something else, we can always do that in Python. That shouldn't break API.
So far, only subscriptions have a method to take with info.","I really think we need a basic test to show how it would be used in python and to ensure that the timestamps are getting converted correctly (whether they be 0 or some value). Do you have time to work on that still?
I can start testing in the meantime.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,542,2020-04-14T19:04:21Z,2020-04-23T21:29:07Z,2020-08-10T23:41:31Z,MERGED,True,94,33,4,https://github.com/iluetkeb,Add method to take with message_info,7,[],https://github.com/ros2/rclpy/pull/542,https://github.com/iluetkeb,5,https://github.com/ros2/rclpy/pull/542#issuecomment-617964092,"This implements the Python side of ros2/design#259 and needs ros2/rcl#619
The message info is simply returned as a dictionary. I figured if we want to encapsulate it into something else, we can always do that in Python. That shouldn't break API.
So far, only subscriptions have a method to take with info.","I really think we need a basic test to show how it would be used in python and to ensure that the timestamps are getting converted correctly (whether they be 0 or some value). Do you have time to work on that still?

When is the deadline? If it has to be today, that'd be tough. It's already almost 9pm here and I'm also looking at the service timestamps.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,542,2020-04-14T19:04:21Z,2020-04-23T21:29:07Z,2020-08-10T23:41:31Z,MERGED,True,94,33,4,https://github.com/iluetkeb,Add method to take with message_info,7,[],https://github.com/ros2/rclpy/pull/542,https://github.com/wjwwood,6,https://github.com/ros2/rclpy/pull/542#issuecomment-617965298,"This implements the Python side of ros2/design#259 and needs ros2/rcl#619
The message info is simply returned as a dictionary. I figured if we want to encapsulate it into something else, we can always do that in Python. That shouldn't break API.
So far, only subscriptions have a method to take with info.",Today is the deadline.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,542,2020-04-14T19:04:21Z,2020-04-23T21:29:07Z,2020-08-10T23:41:31Z,MERGED,True,94,33,4,https://github.com/iluetkeb,Add method to take with message_info,7,[],https://github.com/ros2/rclpy/pull/542,https://github.com/iluetkeb,7,https://github.com/ros2/rclpy/pull/542#issuecomment-617967894,"This implements the Python side of ros2/design#259 and needs ros2/rcl#619
The message info is simply returned as a dictionary. I figured if we want to encapsulate it into something else, we can always do that in Python. That shouldn't break API.
So far, only subscriptions have a method to take with info.",Alright. I'll get it done.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,542,2020-04-14T19:04:21Z,2020-04-23T21:29:07Z,2020-08-10T23:41:31Z,MERGED,True,94,33,4,https://github.com/iluetkeb,Add method to take with message_info,7,[],https://github.com/ros2/rclpy/pull/542,https://github.com/wjwwood,8,https://github.com/ros2/rclpy/pull/542#issuecomment-618038499,"This implements the Python side of ros2/design#259 and needs ros2/rcl#619
The message info is simply returned as a dictionary. I figured if we want to encapsulate it into something else, we can always do that in Python. That shouldn't break API.
So far, only subscriptions have a method to take with info.","There are also some compiler warnings on Windows:
https://ci.ros2.org/job/ci_windows/10284/msbuild/new/
If you need to get off, that's fine, just tell me what's not done and I'll do my best to finish things.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,542,2020-04-14T19:04:21Z,2020-04-23T21:29:07Z,2020-08-10T23:41:31Z,MERGED,True,94,33,4,https://github.com/iluetkeb,Add method to take with message_info,7,[],https://github.com/ros2/rclpy/pull/542,https://github.com/iluetkeb,9,https://github.com/ros2/rclpy/pull/542#issuecomment-618039870,"This implements the Python side of ros2/design#259 and needs ros2/rcl#619
The message info is simply returned as a dictionary. I figured if we want to encapsulate it into something else, we can always do that in Python. That shouldn't break API.
So far, only subscriptions have a method to take with info.","If you need to get off, that's fine, just tell me what's not done and I'll do my best to finish things.

Thanks for the offer. So far, I'm planning to continue for a while, probably at least one more hour or maybe two. Those warnings look easy, I'll get to them.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,542,2020-04-14T19:04:21Z,2020-04-23T21:29:07Z,2020-08-10T23:41:31Z,MERGED,True,94,33,4,https://github.com/iluetkeb,Add method to take with message_info,7,[],https://github.com/ros2/rclpy/pull/542,https://github.com/iluetkeb,10,https://github.com/ros2/rclpy/pull/542#issuecomment-618068983,"This implements the Python side of ros2/design#259 and needs ros2/rcl#619
The message info is simply returned as a dictionary. I figured if we want to encapsulate it into something else, we can always do that in Python. That shouldn't break API.
So far, only subscriptions have a method to take with info.","I have now added a test. It is really very basic, but should do the trick.",True,{'THUMBS_UP': ['https://github.com/wjwwood']}
ros2/rclpy,https://github.com/ros2/rclpy,542,2020-04-14T19:04:21Z,2020-04-23T21:29:07Z,2020-08-10T23:41:31Z,MERGED,True,94,33,4,https://github.com/iluetkeb,Add method to take with message_info,7,[],https://github.com/ros2/rclpy/pull/542,https://github.com/iluetkeb,11,https://github.com/ros2/rclpy/pull/542#issuecomment-618077737,"This implements the Python side of ros2/design#259 and needs ros2/rcl#619
The message info is simply returned as a dictionary. I figured if we want to encapsulate it into something else, we can always do that in Python. That shouldn't break API.
So far, only subscriptions have a method to take with info.","@wjwwood okay, with the last commit this should now also solve the warning problem on Windows.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,542,2020-04-14T19:04:21Z,2020-04-23T21:29:07Z,2020-08-10T23:41:31Z,MERGED,True,94,33,4,https://github.com/iluetkeb,Add method to take with message_info,7,[],https://github.com/ros2/rclpy/pull/542,https://github.com/wjwwood,12,https://github.com/ros2/rclpy/pull/542#issuecomment-618078583,"This implements the Python side of ros2/design#259 and needs ros2/rcl#619
The message info is simply returned as a dictionary. I figured if we want to encapsulate it into something else, we can always do that in Python. That shouldn't break API.
So far, only subscriptions have a method to take with info.",Yup I’m going to rerun ci and stuff ASAP.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,542,2020-04-14T19:04:21Z,2020-04-23T21:29:07Z,2020-08-10T23:41:31Z,MERGED,True,94,33,4,https://github.com/iluetkeb,Add method to take with message_info,7,[],https://github.com/ros2/rclpy/pull/542,https://github.com/iluetkeb,13,https://github.com/ros2/rclpy/pull/542#issuecomment-618665529,"This implements the Python side of ros2/design#259 and needs ros2/rcl#619
The message info is simply returned as a dictionary. I figured if we want to encapsulate it into something else, we can always do that in Python. That shouldn't break API.
So far, only subscriptions have a method to take with info.",🥳,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,543,2020-04-16T03:02:49Z,2020-04-16T03:13:32Z,2020-04-16T12:27:11Z,MERGED,True,23,225,3,https://github.com/nuclearsandwich,"Revert ""Create a default warning for qos incompatibility""",1,[],https://github.com/ros2/rclpy/pull/543,https://github.com/nuclearsandwich,1,https://github.com/ros2/rclpy/pull/543,"Reverts #536 until test failures in ros2cli can be addressed.
FYI @ivanpauno as the reviewer of #536.","Reverts #536 until test failures in ros2cli can be addressed.
FYI @ivanpauno as the reviewer of #536.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,543,2020-04-16T03:02:49Z,2020-04-16T03:13:32Z,2020-04-16T12:27:11Z,MERGED,True,23,225,3,https://github.com/nuclearsandwich,"Revert ""Create a default warning for qos incompatibility""",1,[],https://github.com/ros2/rclpy/pull/543,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/543#issuecomment-614620898,"Reverts #536 until test failures in ros2cli can be addressed.
FYI @ivanpauno as the reviewer of #536.",Thanks for reverting @nuclearsandwich !,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,544,2020-04-16T04:53:37Z,2020-04-17T19:56:01Z,2020-04-17T20:03:12Z,MERGED,True,217,23,3,https://github.com/mm318,"Revert ""Revert ""Create a default warning for qos incompatibility""""",2,[],https://github.com/ros2/rclpy/pull/544,https://github.com/mm318,1,https://github.com/ros2/rclpy/pull/544,"Reverts #543
Let's work on solving the aforementioned test failures before merging this pull request.","Reverts #543
Let's work on solving the aforementioned test failures before merging this pull request.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,544,2020-04-16T04:53:37Z,2020-04-17T19:56:01Z,2020-04-17T20:03:12Z,MERGED,True,217,23,3,https://github.com/mm318,"Revert ""Revert ""Create a default warning for qos incompatibility""""",2,[],https://github.com/ros2/rclpy/pull/544,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/544#issuecomment-614625361,"Reverts #543
Let's work on solving the aforementioned test failures before merging this pull request.","Continuing discussion from #536:

FYI, I think this change is going to cause a string of new test failures in ros2cli, as the warning appears when running various CLI tools (e.g. ros2 topic echo).

The warning that appeared is the one saying that Fast-RTPS doesn't support qos incompatibility callbacks, right?
I think the problem can be avoided in the following way:

A warning is showed if the event type is not supported and the user explicitly required a callback.
If the user doesn't specify a callback, the default one is registered. If the event isn't supported no warning is showed, and there's not default callback for that rmw vendor.

The approach commented here #536 (comment) will make this easier to implement IMO.
@mm318 let me know if this sounds reasonable to you.
In case that yes, I would delete the warning in rclcpp too: https://github.com/aws-ros-dev/rclcpp/blob/f6d0fc388fbf9baf3262aa158b32569228437de8/rclcpp/include/rclcpp/publisher.hpp#L100.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,544,2020-04-16T04:53:37Z,2020-04-17T19:56:01Z,2020-04-17T20:03:12Z,MERGED,True,217,23,3,https://github.com/mm318,"Revert ""Revert ""Create a default warning for qos incompatibility""""",2,[],https://github.com/ros2/rclpy/pull/544,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/544#issuecomment-614625800,"Reverts #543
Let's work on solving the aforementioned test failures before merging this pull request.","@mm318 The revert commit has to be singed too, to make the DCO check pass.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,544,2020-04-16T04:53:37Z,2020-04-17T19:56:01Z,2020-04-17T20:03:12Z,MERGED,True,217,23,3,https://github.com/mm318,"Revert ""Revert ""Create a default warning for qos incompatibility""""",2,[],https://github.com/ros2/rclpy/pull/544,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/544#issuecomment-614626588,"Reverts #543
Let's work on solving the aforementioned test failures before merging this pull request.","A warning is showed if the event type is not supported and the user explicitly required a callback.

Sorry for the mistake here. Currently we're ricing an exception in this case, and that approach is correct. Ignore this item.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,544,2020-04-16T04:53:37Z,2020-04-17T19:56:01Z,2020-04-17T20:03:12Z,MERGED,True,217,23,3,https://github.com/mm318,"Revert ""Revert ""Create a default warning for qos incompatibility""""",2,[],https://github.com/ros2/rclpy/pull/544,https://github.com/mm318,5,https://github.com/ros2/rclpy/pull/544#issuecomment-614714155,"Reverts #543
Let's work on solving the aforementioned test failures before merging this pull request.","Let's just remove the warning log message in the case of failing to register a default callback.

The approach commented here #536 (comment) will make this easier to implement IMO.

The structure shouldn't really change, because the logic is:
if (user provided callback) {  // the ""use default callback"" flag can still be true here
  register user provided callback
  if (failed to register) {
    throw exception
  }
} else if (use default callback) {  // the ""user provided callback"" was None
  register default callback
  if (failed to register) {
    log warning message  // will be removing this
    don't throw exception
  }
}

If we set the incompatible_qos field to a default callback beforehand (as suggested in #536 (comment)), it would be more difficult to determine if it was a user provided callback or a default callback.",True,{'THUMBS_UP': ['https://github.com/ivanpauno']}
ros2/rclpy,https://github.com/ros2/rclpy,544,2020-04-16T04:53:37Z,2020-04-17T19:56:01Z,2020-04-17T20:03:12Z,MERGED,True,217,23,3,https://github.com/mm318,"Revert ""Revert ""Create a default warning for qos incompatibility""""",2,[],https://github.com/ros2/rclpy/pull/544,https://github.com/ivanpauno,6,https://github.com/ros2/rclpy/pull/544#issuecomment-614737178,"Reverts #543
Let's work on solving the aforementioned test failures before merging this pull request.","The structure shouldn't really change, because the logic is:

Yes, sorry. I was convinced that the error was shown when creating the publisher.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,544,2020-04-16T04:53:37Z,2020-04-17T19:56:01Z,2020-04-17T20:03:12Z,MERGED,True,217,23,3,https://github.com/mm318,"Revert ""Revert ""Create a default warning for qos incompatibility""""",2,[],https://github.com/ros2/rclpy/pull/544,https://github.com/mm318,7,https://github.com/ros2/rclpy/pull/544#issuecomment-614743503,"Reverts #543
Let's work on solving the aforementioned test failures before merging this pull request.","@ivanpauno, @nuclearsandwich, and @dirk-thomas, I am not sure which packages should go through CI for this pull request, but here is the relevant gist: https://gist.githubusercontent.com/mm318/8bb18da56a1acff5cd6944f1e5ca2166/raw/c5d4d67220843da47b4591821a6fe4342baa9b00/ros2_incompatible_qos_callbacks.repos (it covers both ros2/rclcpp#1067 and #544).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,544,2020-04-16T04:53:37Z,2020-04-17T19:56:01Z,2020-04-17T20:03:12Z,MERGED,True,217,23,3,https://github.com/mm318,"Revert ""Revert ""Create a default warning for qos incompatibility""""",2,[],https://github.com/ros2/rclpy/pull/544,https://github.com/ivanpauno,8,https://github.com/ros2/rclpy/pull/544#issuecomment-614745795,"Reverts #543
Let's work on solving the aforementioned test failures before merging this pull request.","Full Linux CI here:

Linux 

If the others agree, I will just run CI covering rclpy and rclcpp in the other platforms (which are the repos being modified).",True,{'THUMBS_UP': ['https://github.com/dirk-thomas']}
ros2/rclpy,https://github.com/ros2/rclpy,544,2020-04-16T04:53:37Z,2020-04-17T19:56:01Z,2020-04-17T20:03:12Z,MERGED,True,217,23,3,https://github.com/mm318,"Revert ""Revert ""Create a default warning for qos incompatibility""""",2,[],https://github.com/ros2/rclpy/pull/544,https://github.com/ivanpauno,9,https://github.com/ros2/rclpy/pull/544#issuecomment-614857623,"Reverts #543
Let's work on solving the aforementioned test failures before merging this pull request.","@mm318 There are a few more test failures than in the nightlies https://ci.ros2.org/view/nightly/job/nightly_linux_release/1514/.
Can you take a look locally to them?
Unfortunately, the test output that CI shows in launch tests isn't really useful.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,544,2020-04-16T04:53:37Z,2020-04-17T19:56:01Z,2020-04-17T20:03:12Z,MERGED,True,217,23,3,https://github.com/mm318,"Revert ""Revert ""Create a default warning for qos incompatibility""""",2,[],https://github.com/ros2/rclpy/pull/544,https://github.com/mm318,10,https://github.com/ros2/rclpy/pull/544#issuecomment-615087973,"Reverts #543
Let's work on solving the aforementioned test failures before merging this pull request.","Sorry, there was something wrong with the .repos gist. Can you please re-run CI with this one: https://gist.githubusercontent.com/mm318/8bb18da56a1acff5cd6944f1e5ca2166/raw/5d2aa0956ef303b1583d39dbd0367668c8f39796/ros2_incompatible_qos_callbacks.repos? Thanks!",True,{'THUMBS_UP': ['https://github.com/ivanpauno']}
ros2/rclpy,https://github.com/ros2/rclpy,544,2020-04-16T04:53:37Z,2020-04-17T19:56:01Z,2020-04-17T20:03:12Z,MERGED,True,217,23,3,https://github.com/mm318,"Revert ""Revert ""Create a default warning for qos incompatibility""""",2,[],https://github.com/ros2/rclpy/pull/544,https://github.com/ivanpauno,11,https://github.com/ros2/rclpy/pull/544#issuecomment-615258070,"Reverts #543
Let's work on solving the aforementioned test failures before merging this pull request.",Linux,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,544,2020-04-16T04:53:37Z,2020-04-17T19:56:01Z,2020-04-17T20:03:12Z,MERGED,True,217,23,3,https://github.com/mm318,"Revert ""Revert ""Create a default warning for qos incompatibility""""",2,[],https://github.com/ros2/rclpy/pull/544,https://github.com/mm318,12,https://github.com/ros2/rclpy/pull/544#issuecomment-615318102,"Reverts #543
Let's work on solving the aforementioned test failures before merging this pull request.","Linux 


Hi @ivanpauno, I just rebased. Can you please re-run CI?",True,{'THUMBS_UP': ['https://github.com/ivanpauno']}
ros2/rclpy,https://github.com/ros2/rclpy,544,2020-04-16T04:53:37Z,2020-04-17T19:56:01Z,2020-04-17T20:03:12Z,MERGED,True,217,23,3,https://github.com/mm318,"Revert ""Revert ""Create a default warning for qos incompatibility""""",2,[],https://github.com/ros2/rclpy/pull/544,https://github.com/ivanpauno,13,https://github.com/ros2/rclpy/pull/544#issuecomment-615406321,"Reverts #543
Let's work on solving the aforementioned test failures before merging this pull request.","Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,544,2020-04-16T04:53:37Z,2020-04-17T19:56:01Z,2020-04-17T20:03:12Z,MERGED,True,217,23,3,https://github.com/mm318,"Revert ""Revert ""Create a default warning for qos incompatibility""""",2,[],https://github.com/ros2/rclpy/pull/544,https://github.com/ivanpauno,14,https://github.com/ros2/rclpy/pull/544#issuecomment-615436630,"Reverts #543
Let's work on solving the aforementioned test failures before merging this pull request.","Ok, CI looks good, going finally in!",True,{'THUMBS_UP': ['https://github.com/mm318']}
ros2/rclpy,https://github.com/ros2/rclpy,544,2020-04-16T04:53:37Z,2020-04-17T19:56:01Z,2020-04-17T20:03:12Z,MERGED,True,217,23,3,https://github.com/mm318,"Revert ""Revert ""Create a default warning for qos incompatibility""""",2,[],https://github.com/ros2/rclpy/pull/544,https://github.com/mm318,15,https://github.com/ros2/rclpy/pull/544#issuecomment-615439462,"Reverts #543
Let's work on solving the aforementioned test failures before merging this pull request.",Great! Thanks!,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,545,2020-04-23T22:29:04Z,2020-04-24T04:31:15Z,2020-08-10T23:41:20Z,MERGED,True,126,13,3,https://github.com/iluetkeb,Feature/services timestamps,7,[],https://github.com/ros2/rclpy/pull/545,https://github.com/iluetkeb,1,https://github.com/ros2/rclpy/pull/545,Connects to ros2/rmw#217,Connects to ros2/rmw#217,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,547,2020-04-24T18:22:33Z,2020-04-27T18:14:59Z,2020-04-27T18:15:03Z,MERGED,True,18,12,2,https://github.com/hidmic,Enforce a precedence for wildcard matching in parameter overrides.,2,[],https://github.com/ros2/rclpy/pull/547,https://github.com/hidmic,1,https://github.com/ros2/rclpy/pull/547,Connected to ros2/rclcpp#953.,Connected to ros2/rclcpp#953.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,547,2020-04-24T18:22:33Z,2020-04-27T18:14:59Z,2020-04-27T18:15:03Z,MERGED,True,18,12,2,https://github.com/hidmic,Enforce a precedence for wildcard matching in parameter overrides.,2,[],https://github.com/ros2/rclpy/pull/547,https://github.com/hidmic,2,https://github.com/ros2/rclpy/pull/547#issuecomment-619181923,Connected to ros2/rclcpp#953.,"CI up to rclpy and rclcpp:

Linux 
Linux-aarch64 
macOS 
Windows 

Test failures are unrelated.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,548,2020-04-26T05:17:02Z,2020-05-11T15:30:32Z,2020-05-11T15:30:32Z,MERGED,True,24,15,1,https://github.com/Barry-Xu-2018,Fix bug that not to get expected data because use less timeout,4,[],https://github.com/ros2/rclpy/pull/548,https://github.com/Barry-Xu-2018,1,https://github.com/ros2/rclpy/pull/548,Signed-off-by: Barry Xu Barry.Xu@sony.com,Signed-off-by: Barry Xu Barry.Xu@sony.com,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,548,2020-04-26T05:17:02Z,2020-05-11T15:30:32Z,2020-05-11T15:30:32Z,MERGED,True,24,15,1,https://github.com/Barry-Xu-2018,Fix bug that not to get expected data because use less timeout,4,[],https://github.com/ros2/rclpy/pull/548,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/548#issuecomment-619494043,Signed-off-by: Barry Xu Barry.Xu@sony.com,"i made up pseudo code fujitatomoya@9b33ab2,
i believe that this is more sustainable, what do you think?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,548,2020-04-26T05:17:02Z,2020-05-11T15:30:32Z,2020-05-11T15:30:32Z,MERGED,True,24,15,1,https://github.com/Barry-Xu-2018,Fix bug that not to get expected data because use less timeout,4,[],https://github.com/ros2/rclpy/pull/548,https://github.com/Barry-Xu-2018,3,https://github.com/ros2/rclpy/pull/548#issuecomment-619497580,Signed-off-by: Barry Xu Barry.Xu@sony.com,"@Barry-Xu-2018 @wjwwood @ivanpauno
not only adding the iteration loop, but also checking the contents of rosout if expected message which contains INFO and 'SOMETHING'?

Absolutely. Update codes.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,548,2020-04-26T05:17:02Z,2020-05-11T15:30:32Z,2020-05-11T15:30:32Z,MERGED,True,24,15,1,https://github.com/Barry-Xu-2018,Fix bug that not to get expected data because use less timeout,4,[],https://github.com/ros2/rclpy/pull/548,https://github.com/Barry-Xu-2018,4,https://github.com/ros2/rclpy/pull/548#issuecomment-619497795,Signed-off-by: Barry Xu Barry.Xu@sony.com,"i made up pseudo code fujitatomoya@9b33ab2,
i believe that this is more sustainable, what do you think?

Thanks for your example.  I update codes like this.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,548,2020-04-26T05:17:02Z,2020-05-11T15:30:32Z,2020-05-11T15:30:32Z,MERGED,True,24,15,1,https://github.com/Barry-Xu-2018,Fix bug that not to get expected data because use less timeout,4,[],https://github.com/ros2/rclpy/pull/548,https://github.com/hidmic,5,https://github.com/ros2/rclpy/pull/548#issuecomment-625364493,Signed-off-by: Barry Xu Barry.Xu@sony.com,"CI up to rclpy:

Linux  (canary build)
Linux-aarch64 
macOS  (unrelated warnings)
Windows  (unrelated test failures)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,548,2020-04-26T05:17:02Z,2020-05-11T15:30:32Z,2020-05-11T15:30:32Z,MERGED,True,24,15,1,https://github.com/Barry-Xu-2018,Fix bug that not to get expected data because use less timeout,4,[],https://github.com/ros2/rclpy/pull/548,https://github.com/hidmic,6,https://github.com/ros2/rclpy/pull/548#issuecomment-625428905,Signed-off-by: Barry Xu Barry.Xu@sony.com,"@Barry-Xu-2018 flake8 isn't happy, please check locally.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,548,2020-04-26T05:17:02Z,2020-05-11T15:30:32Z,2020-05-11T15:30:32Z,MERGED,True,24,15,1,https://github.com/Barry-Xu-2018,Fix bug that not to get expected data because use less timeout,4,[],https://github.com/ros2/rclpy/pull/548,https://github.com/Barry-Xu-2018,7,https://github.com/ros2/rclpy/pull/548#issuecomment-625667831,Signed-off-by: Barry Xu Barry.Xu@sony.com,"@hidmic

flake8 isn't happy, please check locally.

Thanks for notification.
I have checked in my local environment and didn't find these flake8 errors.
After checking, I find CI use Ubuntu 20.04 environment (But I use Ubuntu 18.04).
Anyway, I have fixed flake8 errors.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,550,2020-04-27T17:39:35Z,2020-04-27T18:31:36Z,2020-04-27T18:31:40Z,MERGED,True,9,7,1,https://github.com/hidmic,Handle a failed rcl_take() call in rclpy_take().,1,[],https://github.com/ros2/rclpy/pull/550,https://github.com/hidmic,1,https://github.com/ros2/rclpy/pull/550,Fixes #549.,Fixes #549.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,550,2020-04-27T17:39:35Z,2020-04-27T18:31:36Z,2020-04-27T18:31:40Z,MERGED,True,9,7,1,https://github.com/hidmic,Handle a failed rcl_take() call in rclpy_take().,1,[],https://github.com/ros2/rclpy/pull/550,https://github.com/hidmic,2,https://github.com/ros2/rclpy/pull/550#issuecomment-620135904,Fixes #549.,"CI to check on linters:

Linux",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,550,2020-04-27T17:39:35Z,2020-04-27T18:31:36Z,2020-04-27T18:31:40Z,MERGED,True,9,7,1,https://github.com/hidmic,Handle a failed rcl_take() call in rclpy_take().,1,[],https://github.com/ros2/rclpy/pull/550,https://github.com/hidmic,3,https://github.com/ros2/rclpy/pull/550#issuecomment-620137409,Fixes #549.,"Note to the reviewers: there's no regression test in place for this. I could try add one, though it'd probably go into test_communication and it's unclear to me if we can even trigger an rcl_take() failure consistently. Either that or mocking rcl.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,550,2020-04-27T17:39:35Z,2020-04-27T18:31:36Z,2020-04-27T18:31:40Z,MERGED,True,9,7,1,https://github.com/hidmic,Handle a failed rcl_take() call in rclpy_take().,1,[],https://github.com/ros2/rclpy/pull/550,https://github.com/hidmic,4,https://github.com/ros2/rclpy/pull/550#issuecomment-620157262,Fixes #549.,"Alright, going in.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,551,2020-04-28T00:28:52Z,2020-04-28T02:18:20Z,2020-04-28T02:21:00Z,MERGED,True,5,5,1,https://github.com/sloretz,Fix warning about pytaken_msg maybe being uninitialized,2,['bug'],https://github.com/ros2/rclpy/pull/551,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/551,"Seen in https://ci.ros2.org/job/nightly_linux_release/1525/gcc/new/
This initializes pytaken_msg with NULL, and changes the check that pytaken_msg is not NULL to cover both raw and non-raw cases.","Seen in https://ci.ros2.org/job/nightly_linux_release/1525/gcc/new/
This initializes pytaken_msg with NULL, and changes the check that pytaken_msg is not NULL to cover both raw and non-raw cases.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,551,2020-04-28T00:28:52Z,2020-04-28T02:18:20Z,2020-04-28T02:21:00Z,MERGED,True,5,5,1,https://github.com/sloretz,Fix warning about pytaken_msg maybe being uninitialized,2,['bug'],https://github.com/ros2/rclpy/pull/551,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/551#issuecomment-620308096,"Seen in https://ci.ros2.org/job/nightly_linux_release/1525/gcc/new/
This initializes pytaken_msg with NULL, and changes the check that pytaken_msg is not NULL to cover both raw and non-raw cases.","CI (testing just rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,551,2020-04-28T00:28:52Z,2020-04-28T02:18:20Z,2020-04-28T02:21:00Z,MERGED,True,5,5,1,https://github.com/sloretz,Fix warning about pytaken_msg maybe being uninitialized,2,['bug'],https://github.com/ros2/rclpy/pull/551,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/551#issuecomment-620327015,"Seen in https://ci.ros2.org/job/nightly_linux_release/1525/gcc/new/
This initializes pytaken_msg with NULL, and changes the check that pytaken_msg is not NULL to cover both raw and non-raw cases.","CI windows only shows these test failures which are clearly unrelated to this PR
    projectroot.test_timer
    rclpy.src.ros2.rclpy.rclpy.test.test_timer.test_zero_callback[0.01]
    rclpy.src.ros2.rclpy.rclpy.test.test_timer.test_number_callbacks[0.01]

But console output shows
19: ..\..\src\ros2\rclpy\rclpy\test\test_node.py ........................... [ 46%]
19: F..............................                                          [100%]
19: 
19: ================================== FAILURES ===================================
19: _________________ TestNodeAllowUndeclaredParameters.test_take _________________
19: 
19: self = <test.test_node.TestNodeAllowUndeclaredParameters testMethod=test_take>
19: 
19:     def test_take(self):
19:         basic_types_pub = self.node.create_publisher(BasicTypes, 'take_test', 1)
19:         sub = self.node.create_subscription(
19:             BasicTypes,
19:             'take_test',
19:             self.dummy_cb,
19:             1)
19:         basic_types_msg = BasicTypes()
19:         basic_types_pub.publish(basic_types_msg)
19:         cycle_count = 0
19:         while cycle_count < 5:
19:             with sub.handle as capsule:
19:                 result = _rclpy.rclpy_take(capsule, sub.msg_type, False)
19:             if result is not None:
19:                 msg, info = result
19: >               self.assertNotEqual(0, info['source_timestamp'])
19: E               TypeError: 'NoneType' object is not subscriptable
19: 
19: ..\..\src\ros2\rclpy\rclpy\test\test_node.py:157: TypeError
19: - generated xml file: C:\ci\ws\build\rclpy\test_results\rclpy\test_node.xunit.xml -
19: =========================== short test summary info ===========================
19: FAILED ..\..\src\ros2\rclpy\rclpy\test\test_node.py::TestNodeAllowUndeclaredParameters::test_take
19: ======================== 1 failed, 57 passed in 0.95s =========================
19: -- run_test.py: return code 1
19: -- run_test.py: verify result file 'C:/ci/ws/build/rclpy/test_results/rclpy/test_node.xunit.xml'
19/45 Test #19: test_node .........................***Failed    1.81 sec
test 20

Which may  be related, and wasn't captured in the test results. Investigating.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,551,2020-04-28T00:28:52Z,2020-04-28T02:18:20Z,2020-04-28T02:21:00Z,MERGED,True,5,5,1,https://github.com/sloretz,Fix warning about pytaken_msg maybe being uninitialized,2,['bug'],https://github.com/ros2/rclpy/pull/551,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/551#issuecomment-620336568,"Seen in https://ci.ros2.org/job/nightly_linux_release/1525/gcc/new/
This initializes pytaken_msg with NULL, and changes the check that pytaken_msg is not NULL to cover both raw and non-raw cases.","Which may be related, and wasn't captured in the test results. Investigating.

Ok, I think I understand what happened here. The test got re-ran because CI uses --retest-until-pass 2 and the second test passed. The test is flaky and passed the second time. This comes down to rclpy_take() returning (None, None) when take fails since #550 (@hidmic FYI) which was added to fix #542 crashing in this case, but the original behavior is that the code used to return just None. This happens when the subscription wakes the wait set, but the middleware says there is no message.
Anyways, this PR is good as is. I'll open a separate PR to make rclpy_take return just None like it used to. Edit: changed my mind about how I'd like to fix this.",True,{'THUMBS_UP': ['https://github.com/wjwwood']}
ros2/rclpy,https://github.com/ros2/rclpy,552,2020-04-28T02:30:32Z,2020-04-29T16:00:48Z,2020-04-29T16:00:53Z,MERGED,True,10,5,3,https://github.com/sloretz,Fix flaky test expecting wrong return type of rclpy_take,3,[],https://github.com/ros2/rclpy/pull/552,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/552,"#542 made rclpy_take() return a 2-tuple of (message, message_info), but wrote a test that expected rclpy_take() to return None when there is no message to take. However, it seems it actually crashed in that case. #550 fixed the crash by making rclpy_take() return (None, None) when there was no message to take from the middleware, but the test still expected None. This causes the test added in #542 to be flaky: #551 (comment) . This PR fixes the issue by making the test expect (None, None) and documenting this return code in rclpy_take().","#542 made rclpy_take() return a 2-tuple of (message, message_info), but wrote a test that expected rclpy_take() to return None when there is no message to take. However, it seems it actually crashed in that case. #550 fixed the crash by making rclpy_take() return (None, None) when there was no message to take from the middleware, but the test still expected None. This causes the test added in #542 to be flaky: #551 (comment) . This PR fixes the issue by making the test expect (None, None) and documenting this return code in rclpy_take().",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,552,2020-04-28T02:30:32Z,2020-04-29T16:00:48Z,2020-04-29T16:00:53Z,MERGED,True,10,5,3,https://github.com/sloretz,Fix flaky test expecting wrong return type of rclpy_take,3,[],https://github.com/ros2/rclpy/pull/552,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/552#issuecomment-620340854,"#542 made rclpy_take() return a 2-tuple of (message, message_info), but wrote a test that expected rclpy_take() to return None when there is no message to take. However, it seems it actually crashed in that case. #550 fixed the crash by making rclpy_take() return (None, None) when there was no message to take from the middleware, but the test still expected None. This causes the test added in #542 to be flaky: #551 (comment) . This PR fixes the issue by making the test expect (None, None) and documenting this return code in rclpy_take().","CI (testing just rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,552,2020-04-28T02:30:32Z,2020-04-29T16:00:48Z,2020-04-29T16:00:53Z,MERGED,True,10,5,3,https://github.com/sloretz,Fix flaky test expecting wrong return type of rclpy_take,3,[],https://github.com/ros2/rclpy/pull/552,https://github.com/wjwwood,3,https://github.com/ros2/rclpy/pull/552#issuecomment-620341488,"#542 made rclpy_take() return a 2-tuple of (message, message_info), but wrote a test that expected rclpy_take() to return None when there is no message to take. However, it seems it actually crashed in that case. #550 fixed the crash by making rclpy_take() return (None, None) when there was no message to take from the middleware, but the test still expected None. This causes the test added in #542 to be flaky: #551 (comment) . This PR fixes the issue by making the test expect (None, None) and documenting this return code in rclpy_take().","Yeah, I wonder if returning (None, None) was the right move. Like is that more valuable as a return type than just None? AFAIK, it would never be (something, None) or (None, something), so it seems useless to return a tuple of none to me.
I think @iluetkeb should comment on this to see what was originally intended.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,552,2020-04-28T02:30:32Z,2020-04-29T16:00:48Z,2020-04-29T16:00:53Z,MERGED,True,10,5,3,https://github.com/sloretz,Fix flaky test expecting wrong return type of rclpy_take,3,[],https://github.com/ros2/rclpy/pull/552,https://github.com/iluetkeb,4,https://github.com/ros2/rclpy/pull/552#issuecomment-620411788,"#542 made rclpy_take() return a 2-tuple of (message, message_info), but wrote a test that expected rclpy_take() to return None when there is no message to take. However, it seems it actually crashed in that case. #550 fixed the crash by making rclpy_take() return (None, None) when there was no message to take from the middleware, but the test still expected None. This causes the test added in #542 to be flaky: #551 (comment) . This PR fixes the issue by making the test expect (None, None) and documenting this return code in rclpy_take().","The function already returned (None, None) when I modified it. The only thing I did was change the type of the first return value.
I agree with @wjwwood that there is not much value in returning a tuple of None and it is rather unusual. However, there are a few places in the executor code where a tuple is expected, which would need to be modified if we change this to return just a single None.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,552,2020-04-28T02:30:32Z,2020-04-29T16:00:48Z,2020-04-29T16:00:53Z,MERGED,True,10,5,3,https://github.com/sloretz,Fix flaky test expecting wrong return type of rclpy_take,3,[],https://github.com/ros2/rclpy/pull/552,https://github.com/hidmic,5,https://github.com/ros2/rclpy/pull/552#issuecomment-620679020,"#542 made rclpy_take() return a 2-tuple of (message, message_info), but wrote a test that expected rclpy_take() to return None when there is no message to take. However, it seems it actually crashed in that case. #550 fixed the crash by making rclpy_take() return (None, None) when there was no message to take from the middleware, but the test still expected None. This causes the test added in #542 to be flaky: #551 (comment) . This PR fixes the issue by making the test expect (None, None) and documenting this return code in rclpy_take().","However, there are a few places in the executor code where a tuple is expected, which would need to be modified if we change this to return just a single None

And that's why #550 keeps its return value a tuple, so that unpacking remains simple. I don't mind changing it to None.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,552,2020-04-28T02:30:32Z,2020-04-29T16:00:48Z,2020-04-29T16:00:53Z,MERGED,True,10,5,3,https://github.com/sloretz,Fix flaky test expecting wrong return type of rclpy_take,3,[],https://github.com/ros2/rclpy/pull/552,https://github.com/sloretz,6,https://github.com/ros2/rclpy/pull/552#issuecomment-620893915,"#542 made rclpy_take() return a 2-tuple of (message, message_info), but wrote a test that expected rclpy_take() to return None when there is no message to take. However, it seems it actually crashed in that case. #550 fixed the crash by making rclpy_take() return (None, None) when there was no message to take from the middleware, but the test still expected None. This causes the test added in #542 to be flaky: #551 (comment) . This PR fixes the issue by making the test expect (None, None) and documenting this return code in rclpy_take().","Well, since no one approved the PR f808d21 restores rclpy_take() returning None if there's no message to take.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,552,2020-04-28T02:30:32Z,2020-04-29T16:00:48Z,2020-04-29T16:00:53Z,MERGED,True,10,5,3,https://github.com/sloretz,Fix flaky test expecting wrong return type of rclpy_take,3,[],https://github.com/ros2/rclpy/pull/552,https://github.com/sloretz,7,https://github.com/ros2/rclpy/pull/552#issuecomment-620894125,"#542 made rclpy_take() return a 2-tuple of (message, message_info), but wrote a test that expected rclpy_take() to return None when there is no message to take. However, it seems it actually crashed in that case. #550 fixed the crash by making rclpy_take() return (None, None) when there was no message to take from the middleware, but the test still expected None. This causes the test added in #542 to be flaky: #551 (comment) . This PR fixes the issue by making the test expect (None, None) and documenting this return code in rclpy_take().","CI (testing just rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,552,2020-04-28T02:30:32Z,2020-04-29T16:00:48Z,2020-04-29T16:00:53Z,MERGED,True,10,5,3,https://github.com/sloretz,Fix flaky test expecting wrong return type of rclpy_take,3,[],https://github.com/ros2/rclpy/pull/552,https://github.com/iluetkeb,8,https://github.com/ros2/rclpy/pull/552#issuecomment-621121698,"#542 made rclpy_take() return a 2-tuple of (message, message_info), but wrote a test that expected rclpy_take() to return None when there is no message to take. However, it seems it actually crashed in that case. #550 fixed the crash by making rclpy_take() return (None, None) when there was no message to take from the middleware, but the test still expected None. This causes the test added in #542 to be flaky: #551 (comment) . This PR fixes the issue by making the test expect (None, None) and documenting this return code in rclpy_take().","@hidmic I don't have approval rights...
How is this: If you open this PR against our rclpy fork on boschresearch/rclpy, I will accept it and complete the necessary changes to the executor for a PR against ros2/rclpy.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,552,2020-04-28T02:30:32Z,2020-04-29T16:00:48Z,2020-04-29T16:00:53Z,MERGED,True,10,5,3,https://github.com/sloretz,Fix flaky test expecting wrong return type of rclpy_take,3,[],https://github.com/ros2/rclpy/pull/552,https://github.com/hidmic,9,https://github.com/ros2/rclpy/pull/552#issuecomment-621212017,"#542 made rclpy_take() return a 2-tuple of (message, message_info), but wrote a test that expected rclpy_take() to return None when there is no message to take. However, it seems it actually crashed in that case. #550 fixed the crash by making rclpy_take() return (None, None) when there was no message to take from the middleware, but the test still expected None. This causes the test added in #542 to be flaky: #551 (comment) . This PR fixes the issue by making the test expect (None, None) and documenting this return code in rclpy_take().","Test failures seem unrelated. I think we're good to merge.
@iluetkeb not sure I follow you here, why not building on top of this branch? You can always rebase afterwards.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,552,2020-04-28T02:30:32Z,2020-04-29T16:00:48Z,2020-04-29T16:00:53Z,MERGED,True,10,5,3,https://github.com/sloretz,Fix flaky test expecting wrong return type of rclpy_take,3,[],https://github.com/ros2/rclpy/pull/552,https://github.com/iluetkeb,10,https://github.com/ros2/rclpy/pull/552#issuecomment-621273517,"#542 made rclpy_take() return a 2-tuple of (message, message_info), but wrote a test that expected rclpy_take() to return None when there is no message to take. However, it seems it actually crashed in that case. #550 fixed the crash by making rclpy_take() return (None, None) when there was no message to take from the middleware, but the test still expected None. This causes the test added in #542 to be flaky: #551 (comment) . This PR fixes the issue by making the test expect (None, None) and documenting this return code in rclpy_take().","not sure I follow you here, why not building on top of this branch?

To minimize the number of PRs, but anyway, since this is approved now, it's easy anyway ;-)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,553,2020-04-30T22:41:00Z,2020-05-04T12:40:01Z,2020-05-04T12:40:01Z,MERGED,True,16,10,1,https://github.com/mm318,Cleanup rmw publisher/subscription on exception,2,[],https://github.com/ros2/rclpy/pull/553,https://github.com/mm318,1,https://github.com/ros2/rclpy/pull/553,"As mentioned at ros2/ros2cli#500 (comment) and ros2/ros2cli#500 (comment), when create_publisher()/create_subscription() fails to register QoS event callbacks, there should not remain a dangling rmw_publisher_t/rmw_subscription_t instance until Python performs garbage collection.
This pull request changes the behavior of create_publisher()/create_subscription() so that it eagerly destroys the just newly created rmw_publisher_t/rmw_subscription_t instance if an exception occurs.","As mentioned at ros2/ros2cli#500 (comment) and ros2/ros2cli#500 (comment), when create_publisher()/create_subscription() fails to register QoS event callbacks, there should not remain a dangling rmw_publisher_t/rmw_subscription_t instance until Python performs garbage collection.
This pull request changes the behavior of create_publisher()/create_subscription() so that it eagerly destroys the just newly created rmw_publisher_t/rmw_subscription_t instance if an exception occurs.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,553,2020-04-30T22:41:00Z,2020-05-04T12:40:01Z,2020-05-04T12:40:01Z,MERGED,True,16,10,1,https://github.com/mm318,Cleanup rmw publisher/subscription on exception,2,[],https://github.com/ros2/rclpy/pull/553,https://github.com/mm318,2,https://github.com/ros2/rclpy/pull/553#issuecomment-622189687,"As mentioned at ros2/ros2cli#500 (comment) and ros2/ros2cli#500 (comment), when create_publisher()/create_subscription() fails to register QoS event callbacks, there should not remain a dangling rmw_publisher_t/rmw_subscription_t instance until Python performs garbage collection.
This pull request changes the behavior of create_publisher()/create_subscription() so that it eagerly destroys the just newly created rmw_publisher_t/rmw_subscription_t instance if an exception occurs.","@ros2/aws-oncall - please run this CI job
Gist: https://gist.githubusercontent.com/mm318/2dcf03fee968a55c3fbb677f66146b1e/raw/a6e21f917b2793f1a1e33526bb739e09b4287827/ros2_create_pubsub.repos
BUILD args: --packages-up-to rclpy ros2topic
TEST args: --packages-select rclpy ros2topic
Job: ci_launcher
Can you also please additionally run with RMW_IMPLEMENTATION=rmw_connext_cpp and RMW_IMPLEMENTATION=rmw_cyclonedds_cpp?
Note: This .repos gist also includes changes for ros2/ros2cli#496.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,553,2020-04-30T22:41:00Z,2020-05-04T12:40:01Z,2020-05-04T12:40:01Z,MERGED,True,16,10,1,https://github.com/mm318,Cleanup rmw publisher/subscription on exception,2,[],https://github.com/ros2/rclpy/pull/553,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/553#issuecomment-622453577,"As mentioned at ros2/ros2cli#500 (comment) and ros2/ros2cli#500 (comment), when create_publisher()/create_subscription() fails to register QoS event callbacks, there should not remain a dangling rmw_publisher_t/rmw_subscription_t instance until Python performs garbage collection.
This pull request changes the behavior of create_publisher()/create_subscription() so that it eagerly destroys the just newly created rmw_publisher_t/rmw_subscription_t instance if an exception occurs.",See CI jobs here ros2/ros2cli#496 (comment).,True,{'THUMBS_UP': ['https://github.com/mm318']}
ros2/rclpy,https://github.com/ros2/rclpy,553,2020-04-30T22:41:00Z,2020-05-04T12:40:01Z,2020-05-04T12:40:01Z,MERGED,True,16,10,1,https://github.com/mm318,Cleanup rmw publisher/subscription on exception,2,[],https://github.com/ros2/rclpy/pull/553,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/553#issuecomment-623439321,"As mentioned at ros2/ros2cli#500 (comment) and ros2/ros2cli#500 (comment), when create_publisher()/create_subscription() fails to register QoS event callbacks, there should not remain a dangling rmw_publisher_t/rmw_subscription_t instance until Python performs garbage collection.
This pull request changes the behavior of create_publisher()/create_subscription() so that it eagerly destroys the just newly created rmw_publisher_t/rmw_subscription_t instance if an exception occurs.","Merging this one, thanks for the fix @mm318 !",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,554,2020-05-01T17:48:09Z,2020-05-06T19:52:23Z,2020-05-06T19:52:27Z,MERGED,True,6,1,1,https://github.com/ivanpauno,Skip flaky timer test on windows,1,['in review'],https://github.com/ros2/rclpy/pull/554,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/554,Fixes failures on Windows CI https://ci.ros2.org/view/nightly/job/nightly_win_rel/1537/testReport/junit/(root)/projectroot/test_timer/.,Fixes failures on Windows CI https://ci.ros2.org/view/nightly/job/nightly_win_rel/1537/testReport/junit/(root)/projectroot/test_timer/.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,554,2020-05-01T17:48:09Z,2020-05-06T19:52:23Z,2020-05-06T19:52:27Z,MERGED,True,6,1,1,https://github.com/ivanpauno,Skip flaky timer test on windows,1,['in review'],https://github.com/ros2/rclpy/pull/554,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/554#issuecomment-624740453,Fixes failures on Windows CI https://ci.ros2.org/view/nightly/job/nightly_win_rel/1537/testReport/junit/(root)/projectroot/test_timer/.,See ros2/system_tests#430 and ros2/system_tests#430 (comment) for some rational of why we have timing issues on Windows.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,554,2020-05-01T17:48:09Z,2020-05-06T19:52:23Z,2020-05-06T19:52:27Z,MERGED,True,6,1,1,https://github.com/ivanpauno,Skip flaky timer test on windows,1,['in review'],https://github.com/ros2/rclpy/pull/554,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/554#issuecomment-624808751,Fixes failures on Windows CI https://ci.ros2.org/view/nightly/job/nightly_win_rel/1537/testReport/junit/(root)/projectroot/test_timer/.,Windows,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,554,2020-05-01T17:48:09Z,2020-05-06T19:52:23Z,2020-05-06T19:52:27Z,MERGED,True,6,1,1,https://github.com/ivanpauno,Skip flaky timer test on windows,1,['in review'],https://github.com/ros2/rclpy/pull/554,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/554#issuecomment-624855377,Fixes failures on Windows CI https://ci.ros2.org/view/nightly/job/nightly_win_rel/1537/testReport/junit/(root)/projectroot/test_timer/.,"The failing test is test_rate, and not test_timer.
The origin of the failure is similar, but I'll improve that one in another PR.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,555,2020-05-05T18:42:13Z,2020-05-07T21:45:35Z,2020-05-07T21:45:39Z,MERGED,True,1,2,1,https://github.com/hidmic,Fix bad rmw_time_t to nanoseconds conversion.,4,[],https://github.com/ros2/rclpy/pull/555,https://github.com/hidmic,1,https://github.com/ros2/rclpy/pull/555,"Fixes ros2/ros2cli#503 (i.e. the failure, not the hang). rmw_time_t instances were being forced into an rcutils_time_duration_t value (actually, first into a single uint64_t total nanosecond count, then into an unsigned PY_LONG_LONG, and then into an rcutils_time_duration_t i.e. an int64_t), causing overflows.

This happened in the first place because, RMW graph APIs are not currently bound to return anything reasonable for QoS related durations that do not make sense in a given context. That is the case for data reader (subscribers' backbone) lifespans in rmw_connext_cpp (see here and here), which come with whatever value was in the stack at the moment that rmw_qos_profile_t variable enters scope.
I see there's some discussion in ros2/rmw#210 about introducing some consistency in rmw_time_t values. I'll defer to them on what to do about RMWs in general.","Fixes ros2/ros2cli#503 (i.e. the failure, not the hang). rmw_time_t instances were being forced into an rcutils_time_duration_t value (actually, first into a single uint64_t total nanosecond count, then into an unsigned PY_LONG_LONG, and then into an rcutils_time_duration_t i.e. an int64_t), causing overflows.

This happened in the first place because, RMW graph APIs are not currently bound to return anything reasonable for QoS related durations that do not make sense in a given context. That is the case for data reader (subscribers' backbone) lifespans in rmw_connext_cpp (see here and here), which come with whatever value was in the stack at the moment that rmw_qos_profile_t variable enters scope.
I see there's some discussion in ros2/rmw#210 about introducing some consistency in rmw_time_t values. I'll defer to them on what to do about RMWs in general.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,555,2020-05-05T18:42:13Z,2020-05-07T21:45:35Z,2020-05-07T21:45:39Z,MERGED,True,1,2,1,https://github.com/hidmic,Fix bad rmw_time_t to nanoseconds conversion.,4,[],https://github.com/ros2/rclpy/pull/555,https://github.com/hidmic,2,https://github.com/ros2/rclpy/pull/555#issuecomment-624236043,"Fixes ros2/ros2cli#503 (i.e. the failure, not the hang). rmw_time_t instances were being forced into an rcutils_time_duration_t value (actually, first into a single uint64_t total nanosecond count, then into an unsigned PY_LONG_LONG, and then into an rcutils_time_duration_t i.e. an int64_t), causing overflows.

This happened in the first place because, RMW graph APIs are not currently bound to return anything reasonable for QoS related durations that do not make sense in a given context. That is the case for data reader (subscribers' backbone) lifespans in rmw_connext_cpp (see here and here), which come with whatever value was in the stack at the moment that rmw_qos_profile_t variable enters scope.
I see there's some discussion in ros2/rmw#210 about introducing some consistency in rmw_time_t values. I'll defer to them on what to do about RMWs in general.",FYI @emersonknapp.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,555,2020-05-05T18:42:13Z,2020-05-07T21:45:35Z,2020-05-07T21:45:39Z,MERGED,True,1,2,1,https://github.com/hidmic,Fix bad rmw_time_t to nanoseconds conversion.,4,[],https://github.com/ros2/rclpy/pull/555,https://github.com/dirk-thomas,3,https://github.com/ros2/rclpy/pull/555#issuecomment-624241078,"Fixes ros2/ros2cli#503 (i.e. the failure, not the hang). rmw_time_t instances were being forced into an rcutils_time_duration_t value (actually, first into a single uint64_t total nanosecond count, then into an unsigned PY_LONG_LONG, and then into an rcutils_time_duration_t i.e. an int64_t), causing overflows.

This happened in the first place because, RMW graph APIs are not currently bound to return anything reasonable for QoS related durations that do not make sense in a given context. That is the case for data reader (subscribers' backbone) lifespans in rmw_connext_cpp (see here and here), which come with whatever value was in the stack at the moment that rmw_qos_profile_t variable enters scope.
I see there's some discussion in ros2/rmw#210 about introducing some consistency in rmw_time_t values. I'll defer to them on what to do about RMWs in general.","I don't think I have the necessary context for a meaningful review. It seems wrong to me to just map ""invalid"" input to some value without any warning / error.

This happened in the first place because, RMW graph APIs are not currently bound to return anything reasonable for QoS related durations that do not make sense in a given context.

Why can't the rmw API not be forced to set reasonable values in these cases?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,555,2020-05-05T18:42:13Z,2020-05-07T21:45:35Z,2020-05-07T21:45:39Z,MERGED,True,1,2,1,https://github.com/hidmic,Fix bad rmw_time_t to nanoseconds conversion.,4,[],https://github.com/ros2/rclpy/pull/555,https://github.com/hidmic,4,https://github.com/ros2/rclpy/pull/555#issuecomment-624249851,"Fixes ros2/ros2cli#503 (i.e. the failure, not the hang). rmw_time_t instances were being forced into an rcutils_time_duration_t value (actually, first into a single uint64_t total nanosecond count, then into an unsigned PY_LONG_LONG, and then into an rcutils_time_duration_t i.e. an int64_t), causing overflows.

This happened in the first place because, RMW graph APIs are not currently bound to return anything reasonable for QoS related durations that do not make sense in a given context. That is the case for data reader (subscribers' backbone) lifespans in rmw_connext_cpp (see here and here), which come with whatever value was in the stack at the moment that rmw_qos_profile_t variable enters scope.
I see there's some discussion in ros2/rmw#210 about introducing some consistency in rmw_time_t values. I'll defer to them on what to do about RMWs in general.","It seems wrong to me to just map ""invalid"" input to some value without any warning / error.

We can certainly add a warning if overflow would ensue, though that'll add noise for RMWs that can potentially return garbage.

Why can't the rmw API not be forced to set reasonable values in these cases?

I believe there's no consensus as to what would be a reasonable value in some cases. There're some who even think that rmw_time_t doesn't need to exist (see ros2/rmw#215). Zeroing values or defining an INFINITY would make sense to me, but I have not been actively involved in the design to make that call.
In any case, this patch is still necessary.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,555,2020-05-05T18:42:13Z,2020-05-07T21:45:35Z,2020-05-07T21:45:39Z,MERGED,True,1,2,1,https://github.com/hidmic,Fix bad rmw_time_t to nanoseconds conversion.,4,[],https://github.com/ros2/rclpy/pull/555,https://github.com/jacobperron,5,https://github.com/ros2/rclpy/pull/555#issuecomment-624252068,"Fixes ros2/ros2cli#503 (i.e. the failure, not the hang). rmw_time_t instances were being forced into an rcutils_time_duration_t value (actually, first into a single uint64_t total nanosecond count, then into an unsigned PY_LONG_LONG, and then into an rcutils_time_duration_t i.e. an int64_t), causing overflows.

This happened in the first place because, RMW graph APIs are not currently bound to return anything reasonable for QoS related durations that do not make sense in a given context. That is the case for data reader (subscribers' backbone) lifespans in rmw_connext_cpp (see here and here), which come with whatever value was in the stack at the moment that rmw_qos_profile_t variable enters scope.
I see there's some discussion in ros2/rmw#210 about introducing some consistency in rmw_time_t values. I'll defer to them on what to do about RMWs in general.","In any case, this patch is still necessary.

Makes sense to guard against overflow to me, since we're casting from uint64_t to int64_t.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,555,2020-05-05T18:42:13Z,2020-05-07T21:45:35Z,2020-05-07T21:45:39Z,MERGED,True,1,2,1,https://github.com/hidmic,Fix bad rmw_time_t to nanoseconds conversion.,4,[],https://github.com/ros2/rclpy/pull/555,https://github.com/dirk-thomas,6,https://github.com/ros2/rclpy/pull/555#issuecomment-624273122,"Fixes ros2/ros2cli#503 (i.e. the failure, not the hang). rmw_time_t instances were being forced into an rcutils_time_duration_t value (actually, first into a single uint64_t total nanosecond count, then into an unsigned PY_LONG_LONG, and then into an rcutils_time_duration_t i.e. an int64_t), causing overflows.

This happened in the first place because, RMW graph APIs are not currently bound to return anything reasonable for QoS related durations that do not make sense in a given context. That is the case for data reader (subscribers' backbone) lifespans in rmw_connext_cpp (see here and here), which come with whatever value was in the stack at the moment that rmw_qos_profile_t variable enters scope.
I see there's some discussion in ros2/rmw#210 about introducing some consistency in rmw_time_t values. I'll defer to them on what to do about RMWs in general.","RMWs that can potentially return garbage.

Imo that is simply unacceptable API. Do RMW implementations actually return uninitialized data? If yes, this might open us up to undefined which we should really avoid.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,555,2020-05-05T18:42:13Z,2020-05-07T21:45:35Z,2020-05-07T21:45:39Z,MERGED,True,1,2,1,https://github.com/hidmic,Fix bad rmw_time_t to nanoseconds conversion.,4,[],https://github.com/ros2/rclpy/pull/555,https://github.com/emersonknapp,7,https://github.com/ros2/rclpy/pull/555#issuecomment-624279871,"Fixes ros2/ros2cli#503 (i.e. the failure, not the hang). rmw_time_t instances were being forced into an rcutils_time_duration_t value (actually, first into a single uint64_t total nanosecond count, then into an unsigned PY_LONG_LONG, and then into an rcutils_time_duration_t i.e. an int64_t), causing overflows.

This happened in the first place because, RMW graph APIs are not currently bound to return anything reasonable for QoS related durations that do not make sense in a given context. That is the case for data reader (subscribers' backbone) lifespans in rmw_connext_cpp (see here and here), which come with whatever value was in the stack at the moment that rmw_qos_profile_t variable enters scope.
I see there's some discussion in ros2/rmw#210 about introducing some consistency in rmw_time_t values. I'll defer to them on what to do about RMWs in general.","I don't think that they return unitialized values, but we don't currently have a defined constant. fastrtps and connext return one value for ""unspecified"", and cyclone has some whole other constant that it seems to use for that value. ros2/rmw#210 is an attempt to discuss some ROS2-global constants that we would dictate in the API and expect rmw implementations to use.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,555,2020-05-05T18:42:13Z,2020-05-07T21:45:35Z,2020-05-07T21:45:39Z,MERGED,True,1,2,1,https://github.com/hidmic,Fix bad rmw_time_t to nanoseconds conversion.,4,[],https://github.com/ros2/rclpy/pull/555,https://github.com/hidmic,8,https://github.com/ros2/rclpy/pull/555#issuecomment-624286603,"Fixes ros2/ros2cli#503 (i.e. the failure, not the hang). rmw_time_t instances were being forced into an rcutils_time_duration_t value (actually, first into a single uint64_t total nanosecond count, then into an unsigned PY_LONG_LONG, and then into an rcutils_time_duration_t i.e. an int64_t), causing overflows.

This happened in the first place because, RMW graph APIs are not currently bound to return anything reasonable for QoS related durations that do not make sense in a given context. That is the case for data reader (subscribers' backbone) lifespans in rmw_connext_cpp (see here and here), which come with whatever value was in the stack at the moment that rmw_qos_profile_t variable enters scope.
I see there's some discussion in ros2/rmw#210 about introducing some consistency in rmw_time_t values. I'll defer to them on what to do about RMWs in general.","I don't think that they return unitialized values

That's not exactly true. Graph cache in rmw_connext_cpp gets populated with QoS data here, for which it uses dds_remote_qos_to_rmw_qos which in turn may use an empty dds_qos_lifespan_to_rmw_qos_lifespan implementation. As the first rmw_qos_profile_t instance isn't initialized, nowhere is. The same goes for any QoS getter that doesn't initialize that duration prior to function call.

fastrtps and connext return one value for ""unspecified""

Which value? I don't have a strong opinion against zero initialization though.

Instead of working around the problem here the RMW implementations should be updated to return a defined value.

This patch is orthogonal to that change.

The only logic which should be present here is to check valid boundaries and show an error / raise an exception when that is violated.

We can raise an exception if the uint64_t to int64_t conversion is not feasible, sure. But bear in mind that unreasonable values are not invalid values, type wise. We've set ourselves up for a problem by introducing rmw_time_t in the first place IMHO.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,555,2020-05-05T18:42:13Z,2020-05-07T21:45:35Z,2020-05-07T21:45:39Z,MERGED,True,1,2,1,https://github.com/hidmic,Fix bad rmw_time_t to nanoseconds conversion.,4,[],https://github.com/ros2/rclpy/pull/555,https://github.com/hidmic,9,https://github.com/ros2/rclpy/pull/555#issuecomment-624322427,"Fixes ros2/ros2cli#503 (i.e. the failure, not the hang). rmw_time_t instances were being forced into an rcutils_time_duration_t value (actually, first into a single uint64_t total nanosecond count, then into an unsigned PY_LONG_LONG, and then into an rcutils_time_duration_t i.e. an int64_t), causing overflows.

This happened in the first place because, RMW graph APIs are not currently bound to return anything reasonable for QoS related durations that do not make sense in a given context. That is the case for data reader (subscribers' backbone) lifespans in rmw_connext_cpp (see here and here), which come with whatever value was in the stack at the moment that rmw_qos_profile_t variable enters scope.
I see there's some discussion in ros2/rmw#210 about introducing some consistency in rmw_time_t values. I'll defer to them on what to do about RMWs in general.","See ros2/rmw_connext#422 and 0ef805b. It's not a silver bullet for the rmw_time_t <-> rcutils_time_point_t problem, but it's an improvement.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,555,2020-05-05T18:42:13Z,2020-05-07T21:45:35Z,2020-05-07T21:45:39Z,MERGED,True,1,2,1,https://github.com/hidmic,Fix bad rmw_time_t to nanoseconds conversion.,4,[],https://github.com/ros2/rclpy/pull/555,https://github.com/emersonknapp,10,https://github.com/ros2/rclpy/pull/555#issuecomment-624344907,"Fixes ros2/ros2cli#503 (i.e. the failure, not the hang). rmw_time_t instances were being forced into an rcutils_time_duration_t value (actually, first into a single uint64_t total nanosecond count, then into an unsigned PY_LONG_LONG, and then into an rcutils_time_duration_t i.e. an int64_t), causing overflows.

This happened in the first place because, RMW graph APIs are not currently bound to return anything reasonable for QoS related durations that do not make sense in a given context. That is the case for data reader (subscribers' backbone) lifespans in rmw_connext_cpp (see here and here), which come with whatever value was in the stack at the moment that rmw_qos_profile_t variable enters scope.
I see there's some discussion in ros2/rmw#210 about introducing some consistency in rmw_time_t values. I'll defer to them on what to do about RMWs in general.","Which value? I don't have a strong opinion against zero initialization though.

I don't have it up and running in front of me right now, but I was seeing (from ros2/rosbag2#335 (comment))
FastRTPS seems to always return the following when a QoS policy duration was unspecified (e.g. {0, 0} passed in)
sec: 0x7FFFFFFF 
nsec: 0xFFFFFFFF

Cyclone seems to always return the following when a QoS policy duration was unspecified (e.g. {0, 0} passed in) maybe this was an uninitialized value
sec = 9223372036 == 0x225C17D04 
nsec = 854775807 == 0x32F2D7FF",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,555,2020-05-05T18:42:13Z,2020-05-07T21:45:35Z,2020-05-07T21:45:39Z,MERGED,True,1,2,1,https://github.com/hidmic,Fix bad rmw_time_t to nanoseconds conversion.,4,[],https://github.com/ros2/rclpy/pull/555,https://github.com/hidmic,11,https://github.com/ros2/rclpy/pull/555#issuecomment-624664724,"Fixes ros2/ros2cli#503 (i.e. the failure, not the hang). rmw_time_t instances were being forced into an rcutils_time_duration_t value (actually, first into a single uint64_t total nanosecond count, then into an unsigned PY_LONG_LONG, and then into an rcutils_time_duration_t i.e. an int64_t), causing overflows.

This happened in the first place because, RMW graph APIs are not currently bound to return anything reasonable for QoS related durations that do not make sense in a given context. That is the case for data reader (subscribers' backbone) lifespans in rmw_connext_cpp (see here and here), which come with whatever value was in the stack at the moment that rmw_qos_profile_t variable enters scope.
I see there's some discussion in ros2/rmw#210 about introducing some consistency in rmw_time_t values. I'll defer to them on what to do about RMWs in general.","CI up to ros2cli, rclpy, and rmw_connext (when possible):

Linux 
Linux-aarch64 
macOS 
Windows  (unrelated test failures)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,555,2020-05-05T18:42:13Z,2020-05-07T21:45:35Z,2020-05-07T21:45:39Z,MERGED,True,1,2,1,https://github.com/hidmic,Fix bad rmw_time_t to nanoseconds conversion.,4,[],https://github.com/ros2/rclpy/pull/555,https://github.com/dirk-thomas,12,https://github.com/ros2/rclpy/pull/555#issuecomment-624809078,"Fixes ros2/ros2cli#503 (i.e. the failure, not the hang). rmw_time_t instances were being forced into an rcutils_time_duration_t value (actually, first into a single uint64_t total nanosecond count, then into an unsigned PY_LONG_LONG, and then into an rcutils_time_duration_t i.e. an int64_t), causing overflows.

This happened in the first place because, RMW graph APIs are not currently bound to return anything reasonable for QoS related durations that do not make sense in a given context. That is the case for data reader (subscribers' backbone) lifespans in rmw_connext_cpp (see here and here), which come with whatever value was in the stack at the moment that rmw_qos_profile_t variable enters scope.
I see there's some discussion in ros2/rmw#210 about introducing some consistency in rmw_time_t values. I'll defer to them on what to do about RMWs in general.",How about an alternative: construct the Python Duration with two arguments - seconds and nanoseconds - as provided by rmw_time_t and instead perform the check if the value matches the bounds of the underlying C type in rclpy_create_duration()?,True,{'THUMBS_UP': ['https://github.com/hidmic']}
ros2/rclpy,https://github.com/ros2/rclpy,555,2020-05-05T18:42:13Z,2020-05-07T21:45:35Z,2020-05-07T21:45:39Z,MERGED,True,1,2,1,https://github.com/hidmic,Fix bad rmw_time_t to nanoseconds conversion.,4,[],https://github.com/ros2/rclpy/pull/555,https://github.com/hidmic,13,https://github.com/ros2/rclpy/pull/555#issuecomment-625361649,"Fixes ros2/ros2cli#503 (i.e. the failure, not the hang). rmw_time_t instances were being forced into an rcutils_time_duration_t value (actually, first into a single uint64_t total nanosecond count, then into an unsigned PY_LONG_LONG, and then into an rcutils_time_duration_t i.e. an int64_t), causing overflows.

This happened in the first place because, RMW graph APIs are not currently bound to return anything reasonable for QoS related durations that do not make sense in a given context. That is the case for data reader (subscribers' backbone) lifespans in rmw_connext_cpp (see here and here), which come with whatever value was in the stack at the moment that rmw_qos_profile_t variable enters scope.
I see there's some discussion in ros2/rmw#210 about introducing some consistency in rmw_time_t values. I'll defer to them on what to do about RMWs in general.",@dirk-thomas PTAL,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,555,2020-05-05T18:42:13Z,2020-05-07T21:45:35Z,2020-05-07T21:45:39Z,MERGED,True,1,2,1,https://github.com/hidmic,Fix bad rmw_time_t to nanoseconds conversion.,4,[],https://github.com/ros2/rclpy/pull/555,https://github.com/dirk-thomas,14,https://github.com/ros2/rclpy/pull/555#issuecomment-625370184,"Fixes ros2/ros2cli#503 (i.e. the failure, not the hang). rmw_time_t instances were being forced into an rcutils_time_duration_t value (actually, first into a single uint64_t total nanosecond count, then into an unsigned PY_LONG_LONG, and then into an rcutils_time_duration_t i.e. an int64_t), causing overflows.

This happened in the first place because, RMW graph APIs are not currently bound to return anything reasonable for QoS related durations that do not make sense in a given context. That is the case for data reader (subscribers' backbone) lifespans in rmw_connext_cpp (see here and here), which come with whatever value was in the stack at the moment that rmw_qos_profile_t variable enters scope.
I see there's some discussion in ros2/rmw#210 about introducing some consistency in rmw_time_t values. I'll defer to them on what to do about RMWs in general.","instead perform the check if the value matches the bounds of the underlying C type in rclpy_create_duration()?

Does something need to be changed in this function?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,555,2020-05-05T18:42:13Z,2020-05-07T21:45:35Z,2020-05-07T21:45:39Z,MERGED,True,1,2,1,https://github.com/hidmic,Fix bad rmw_time_t to nanoseconds conversion.,4,[],https://github.com/ros2/rclpy/pull/555,https://github.com/hidmic,15,https://github.com/ros2/rclpy/pull/555#issuecomment-625393608,"Fixes ros2/ros2cli#503 (i.e. the failure, not the hang). rmw_time_t instances were being forced into an rcutils_time_duration_t value (actually, first into a single uint64_t total nanosecond count, then into an unsigned PY_LONG_LONG, and then into an rcutils_time_duration_t i.e. an int64_t), causing overflows.

This happened in the first place because, RMW graph APIs are not currently bound to return anything reasonable for QoS related durations that do not make sense in a given context. That is the case for data reader (subscribers' backbone) lifespans in rmw_connext_cpp (see here and here), which come with whatever value was in the stack at the moment that rmw_qos_profile_t variable enters scope.
I see there's some discussion in ros2/rmw#210 about introducing some consistency in rmw_time_t values. I'll defer to them on what to do about RMWs in general.","Does something need to be changed in this function?

@dirk-thomas No need to. rclpy.Duration will perform the summation and then rclpy_create_duration() will attempt to parse that into a C long. If the latter operation would overflow, it'll raise.",True,{'THUMBS_UP': ['https://github.com/dirk-thomas']}
ros2/rclpy,https://github.com/ros2/rclpy,556,2020-05-07T16:14:44Z,2020-05-12T17:52:38Z,2020-05-12T17:52:42Z,MERGED,True,8,29,5,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,4,['in review'],https://github.com/ros2/rclpy/pull/556,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/556,See ros2/rmw#227.,See ros2/rmw#227.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,558,2020-05-14T17:58:30Z,2020-05-18T22:57:58Z,2020-05-18T22:58:01Z,MERGED,True,15,2,3,https://github.com/jacobperron,Explicitly add DLL directories for Windows before importing,5,[],https://github.com/ros2/rclpy/pull/558,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/558,"New in Python 3.8, we should call os.add_dll_directory for directories
containing the DLLs we intend to import as well as their recursive
dependencies.
See https://docs.python.org/3/whatsnew/3.8.html#bpo-36085-whatsnew
Unblocks ros2/ci#432 🤞","New in Python 3.8, we should call os.add_dll_directory for directories
containing the DLLs we intend to import as well as their recursive
dependencies.
See https://docs.python.org/3/whatsnew/3.8.html#bpo-36085-whatsnew
Unblocks ros2/ci#432 🤞",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,558,2020-05-14T17:58:30Z,2020-05-18T22:57:58Z,2020-05-18T22:58:01Z,MERGED,True,15,2,3,https://github.com/jacobperron,Explicitly add DLL directories for Windows before importing,5,[],https://github.com/ros2/rclpy/pull/558,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/558#issuecomment-628903804,"New in Python 3.8, we should call os.add_dll_directory for directories
containing the DLLs we intend to import as well as their recursive
dependencies.
See https://docs.python.org/3/whatsnew/3.8.html#bpo-36085-whatsnew
Unblocks ros2/ci#432 🤞",I also had to make the same patch to the test module 4f1676c,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,558,2020-05-14T17:58:30Z,2020-05-18T22:57:58Z,2020-05-18T22:58:01Z,MERGED,True,15,2,3,https://github.com/jacobperron,Explicitly add DLL directories for Windows before importing,5,[],https://github.com/ros2/rclpy/pull/558,https://github.com/jacobperron,3,https://github.com/ros2/rclpy/pull/558#issuecomment-629554124,"New in Python 3.8, we should call os.add_dll_directory for directories
containing the DLLs we intend to import as well as their recursive
dependencies.
See https://docs.python.org/3/whatsnew/3.8.html#bpo-36085-whatsnew
Unblocks ros2/ci#432 🤞","I've moved the logic to a new common package rpyutils (a795304).
This PR now depends on ros2/ros2#920 and ros2/rpyutils#2",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,558,2020-05-14T17:58:30Z,2020-05-18T22:57:58Z,2020-05-18T22:58:01Z,MERGED,True,15,2,3,https://github.com/jacobperron,Explicitly add DLL directories for Windows before importing,5,[],https://github.com/ros2/rclpy/pull/558,https://github.com/jacobperron,4,https://github.com/ros2/rclpy/pull/558#issuecomment-630477623,"New in Python 3.8, we should call os.add_dll_directory for directories
containing the DLLs we intend to import as well as their recursive
dependencies.
See https://docs.python.org/3/whatsnew/3.8.html#bpo-36085-whatsnew
Unblocks ros2/ci#432 🤞","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,559,2020-05-16T21:45:27Z,2020-08-27T22:01:45Z,2020-08-27T22:01:45Z,MERGED,True,6,3,1,https://github.com/dawonn-haval,PARAM_REL_TOL comment was incorrect in the api doc.,1,[],https://github.com/ros2/rclpy/pull/559,https://github.com/dawonn-haval,1,https://github.com/ros2/rclpy/pull/559,"See: http://docs.ros2.org/latest/api/rclpy/api/node.html
Signed-off-by: Dereck Wonnacott dereck.wonnacott@havalus.com","See: http://docs.ros2.org/latest/api/rclpy/api/node.html
Signed-off-by: Dereck Wonnacott dereck.wonnacott@havalus.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,559,2020-05-16T21:45:27Z,2020-08-27T22:01:45Z,2020-08-27T22:01:45Z,MERGED,True,6,3,1,https://github.com/dawonn-haval,PARAM_REL_TOL comment was incorrect in the api doc.,1,[],https://github.com/ros2/rclpy/pull/559,https://github.com/hidmic,2,https://github.com/ros2/rclpy/pull/559#issuecomment-659043781,"See: http://docs.ros2.org/latest/api/rclpy/api/node.html
Signed-off-by: Dereck Wonnacott dereck.wonnacott@havalus.com",@dawonn-haval DCO and linters are not happy.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,559,2020-05-16T21:45:27Z,2020-08-27T22:01:45Z,2020-08-27T22:01:45Z,MERGED,True,6,3,1,https://github.com/dawonn-haval,PARAM_REL_TOL comment was incorrect in the api doc.,1,[],https://github.com/ros2/rclpy/pull/559,https://github.com/dirk-thomas,3,https://github.com/ros2/rclpy/pull/559#issuecomment-666504438,"See: http://docs.ros2.org/latest/api/rclpy/api/node.html
Signed-off-by: Dereck Wonnacott dereck.wonnacott@havalus.com",@dawonn-haval Friendly ping.,True,{'EYES': ['https://github.com/dawonn-haval']}
ros2/rclpy,https://github.com/ros2/rclpy,559,2020-05-16T21:45:27Z,2020-08-27T22:01:45Z,2020-08-27T22:01:45Z,MERGED,True,6,3,1,https://github.com/dawonn-haval,PARAM_REL_TOL comment was incorrect in the api doc.,1,[],https://github.com/ros2/rclpy/pull/559,https://github.com/dirk-thomas,4,https://github.com/ros2/rclpy/pull/559#issuecomment-673577728,"See: http://docs.ros2.org/latest/api/rclpy/api/node.html
Signed-off-by: Dereck Wonnacott dereck.wonnacott@havalus.com",@dawonn-haval Friendly ping.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,559,2020-05-16T21:45:27Z,2020-08-27T22:01:45Z,2020-08-27T22:01:45Z,MERGED,True,6,3,1,https://github.com/dawonn-haval,PARAM_REL_TOL comment was incorrect in the api doc.,1,[],https://github.com/ros2/rclpy/pull/559,https://github.com/hidmic,5,https://github.com/ros2/rclpy/pull/559#issuecomment-682202030,"See: http://docs.ros2.org/latest/api/rclpy/api/node.html
Signed-off-by: Dereck Wonnacott dereck.wonnacott@havalus.com","@dawonn-haval it's no silver bullet, better to have your editor configured, but I've found out that autopep8 goes a long way.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,559,2020-05-16T21:45:27Z,2020-08-27T22:01:45Z,2020-08-27T22:01:45Z,MERGED,True,6,3,1,https://github.com/dawonn-haval,PARAM_REL_TOL comment was incorrect in the api doc.,1,[],https://github.com/ros2/rclpy/pull/559,https://github.com/dawonn-haval,6,https://github.com/ros2/rclpy/pull/559#issuecomment-682203339,"See: http://docs.ros2.org/latest/api/rclpy/api/node.html
Signed-off-by: Dereck Wonnacott dereck.wonnacott@havalus.com","yeah, my editor is configured for work, and every time I save I need to use 'save without formatting.'
I clearly just hit ctrl+s mindlessly for the dozen'th time...",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,562,2020-05-29T02:34:51Z,2020-06-01T17:38:51Z,2020-06-01T17:38:55Z,MERGED,True,332,10,8,https://github.com/wjwwood,protect access to global logging calls with a mutex,2,['bug'],https://github.com/ros2/rclpy/pull/562,https://github.com/wjwwood,1,https://github.com/ros2/rclpy/pull/562,"Counter part to ros2/rclcpp#1125
Note this pull request introduces C++ code to the rclpy python library (though it keeps the main files as pure C). I started by trying to implement it without std mutex from C++, but that was taking a lot more time, so I decided to create new C functions to do the mutex locking and call those from the main file. In the future we could reimplement these few functions to be C only if we wanted to do so.","Counter part to ros2/rclcpp#1125
Note this pull request introduces C++ code to the rclpy python library (though it keeps the main files as pure C). I started by trying to implement it without std mutex from C++, but that was taking a lot more time, so I decided to create new C functions to do the mutex locking and call those from the main file. In the future we could reimplement these few functions to be C only if we wanted to do so.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,562,2020-05-29T02:34:51Z,2020-06-01T17:38:51Z,2020-06-01T17:38:55Z,MERGED,True,332,10,8,https://github.com/wjwwood,protect access to global logging calls with a mutex,2,['bug'],https://github.com/ros2/rclpy/pull/562,https://github.com/wjwwood,2,https://github.com/ros2/rclpy/pull/562#issuecomment-635723252,"Counter part to ros2/rclcpp#1125
Note this pull request introduces C++ code to the rclpy python library (though it keeps the main files as pure C). I started by trying to implement it without std mutex from C++, but that was taking a lot more time, so I decided to create new C functions to do the mutex locking and call those from the main file. In the future we could reimplement these few functions to be C only if we wanted to do so.","CI (full because I couldn't come up with a good way to cover what might be affected without potentially missing something):

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,562,2020-05-29T02:34:51Z,2020-06-01T17:38:51Z,2020-06-01T17:38:55Z,MERGED,True,332,10,8,https://github.com/wjwwood,protect access to global logging calls with a mutex,2,['bug'],https://github.com/ros2/rclpy/pull/562,https://github.com/wjwwood,3,https://github.com/ros2/rclpy/pull/562#issuecomment-636240470,"Counter part to ros2/rclcpp#1125
Note this pull request introduces C++ code to the rclpy python library (though it keeps the main files as pure C). I started by trying to implement it without std mutex from C++, but that was taking a lot more time, so I decided to create new C functions to do the mutex locking and call those from the main file. In the future we could reimplement these few functions to be C only if we wanted to do so.","New CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,562,2020-05-29T02:34:51Z,2020-06-01T17:38:51Z,2020-06-01T17:38:55Z,MERGED,True,332,10,8,https://github.com/wjwwood,protect access to global logging calls with a mutex,2,['bug'],https://github.com/ros2/rclpy/pull/562,https://github.com/wjwwood,4,https://github.com/ros2/rclpy/pull/562#issuecomment-637003947,"Counter part to ros2/rclcpp#1125
Note this pull request introduces C++ code to the rclpy python library (though it keeps the main files as pure C). I started by trying to implement it without std mutex from C++, but that was taking a lot more time, so I decided to create new C functions to do the mutex locking and call those from the main file. In the future we could reimplement these few functions to be C only if we wanted to do so.","The CI failures are, in my opinion, unrelated. Just waiting on second review from @jacobperron, but I think this is gtg.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,563,2020-05-29T20:09:41Z,2020-06-01T13:22:12Z,2020-06-01T13:22:17Z,MERGED,True,13,9,1,https://github.com/hidmic,Ensure executors' spinning API handles shutdown properly.,1,[],https://github.com/ros2/rclpy/pull/563,https://github.com/hidmic,1,https://github.com/ros2/rclpy/pull/563,"Precisely what the title says. Came across this apparent omission while working on ros2/ros2cli#521. Calling Executor.shutdown from another thread would often cause Executor.spin to throw when Executor.wait_for_ready_callbacks returned None.
Traceback (most recent call last):
  File ""/usr/lib/python3.8/threading.py"", line 932, in _bootstrap_inner
    self.run()
  File ""/usr/lib/python3.8/threading.py"", line 870, in run
    self._target(*self._args, **self._kwargs)
  File ""/home/michel/Workspaces/focal_ros2_ws/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 284, in spin
    self.spin_once()
  File ""/home/michel/Workspaces/focal_ros2_ws/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 680, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
TypeError: cannot unpack non-iterable NoneType object","Precisely what the title says. Came across this apparent omission while working on ros2/ros2cli#521. Calling Executor.shutdown from another thread would often cause Executor.spin to throw when Executor.wait_for_ready_callbacks returned None.
Traceback (most recent call last):
  File ""/usr/lib/python3.8/threading.py"", line 932, in _bootstrap_inner
    self.run()
  File ""/usr/lib/python3.8/threading.py"", line 870, in run
    self._target(*self._args, **self._kwargs)
  File ""/home/michel/Workspaces/focal_ros2_ws/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 284, in spin
    self.spin_once()
  File ""/home/michel/Workspaces/focal_ros2_ws/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 680, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
TypeError: cannot unpack non-iterable NoneType object",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,563,2020-05-29T20:09:41Z,2020-06-01T13:22:12Z,2020-06-01T13:22:17Z,MERGED,True,13,9,1,https://github.com/hidmic,Ensure executors' spinning API handles shutdown properly.,1,[],https://github.com/ros2/rclpy/pull/563,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/563#issuecomment-636173584,"Precisely what the title says. Came across this apparent omission while working on ros2/ros2cli#521. Calling Executor.shutdown from another thread would often cause Executor.spin to throw when Executor.wait_for_ready_callbacks returned None.
Traceback (most recent call last):
  File ""/usr/lib/python3.8/threading.py"", line 932, in _bootstrap_inner
    self.run()
  File ""/usr/lib/python3.8/threading.py"", line 870, in run
    self._target(*self._args, **self._kwargs)
  File ""/home/michel/Workspaces/focal_ros2_ws/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 284, in spin
    self.spin_once()
  File ""/home/michel/Workspaces/focal_ros2_ws/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 680, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
TypeError: cannot unpack non-iterable NoneType object",@hidmic can you copy a traceback of what was the error?,True,{'THUMBS_UP': ['https://github.com/hidmic']}
ros2/rclpy,https://github.com/ros2/rclpy,563,2020-05-29T20:09:41Z,2020-06-01T13:22:12Z,2020-06-01T13:22:17Z,MERGED,True,13,9,1,https://github.com/hidmic,Ensure executors' spinning API handles shutdown properly.,1,[],https://github.com/ros2/rclpy/pull/563,https://github.com/hidmic,3,https://github.com/ros2/rclpy/pull/563#issuecomment-636184313,"Precisely what the title says. Came across this apparent omission while working on ros2/ros2cli#521. Calling Executor.shutdown from another thread would often cause Executor.spin to throw when Executor.wait_for_ready_callbacks returned None.
Traceback (most recent call last):
  File ""/usr/lib/python3.8/threading.py"", line 932, in _bootstrap_inner
    self.run()
  File ""/usr/lib/python3.8/threading.py"", line 870, in run
    self._target(*self._args, **self._kwargs)
  File ""/home/michel/Workspaces/focal_ros2_ws/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 284, in spin
    self.spin_once()
  File ""/home/michel/Workspaces/focal_ros2_ws/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 680, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
TypeError: cannot unpack non-iterable NoneType object","@ivanpauno PTAL. The issue here is that if self._is_shutdown evaluates to True before the loop in Executor._wait_for_ready_callbacks(), the generator will be empty and Executor.wait_for_ready_callbacks() will return None.
Overall, the way we deal with shutdown in those functions is somewhat peculiar. I see some shutdown exceptions here and there besides the loop condition. But I didn't want to go and try to refactor that now.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,563,2020-05-29T20:09:41Z,2020-06-01T13:22:12Z,2020-06-01T13:22:17Z,MERGED,True,13,9,1,https://github.com/hidmic,Ensure executors' spinning API handles shutdown properly.,1,[],https://github.com/ros2/rclpy/pull/563,https://github.com/hidmic,4,https://github.com/ros2/rclpy/pull/563#issuecomment-636209824,"Precisely what the title says. Came across this apparent omission while working on ros2/ros2cli#521. Calling Executor.shutdown from another thread would often cause Executor.spin to throw when Executor.wait_for_ready_callbacks returned None.
Traceback (most recent call last):
  File ""/usr/lib/python3.8/threading.py"", line 932, in _bootstrap_inner
    self.run()
  File ""/usr/lib/python3.8/threading.py"", line 870, in run
    self._target(*self._args, **self._kwargs)
  File ""/home/michel/Workspaces/focal_ros2_ws/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 284, in spin
    self.spin_once()
  File ""/home/michel/Workspaces/focal_ros2_ws/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 680, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
TypeError: cannot unpack non-iterable NoneType object","CI up to rclpy and test_communication:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,565,2020-06-04T22:54:15Z,2020-06-05T00:28:08Z,2020-06-05T00:28:12Z,MERGED,True,18,1,1,https://github.com/jacobperron,Improve documentation on building API documentation,2,[],https://github.com/ros2/rclpy/pull/565,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/565,Fixes #561,Fixes #561,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,566,2020-06-04T23:18:51Z,2020-06-04T23:40:49Z,2020-06-04T23:40:54Z,MERGED,True,3,2,2,https://github.com/jacobperron,Fix docstrings,2,[],https://github.com/ros2/rclpy/pull/566,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/566,Noticed these when attempting to generate docs.,Noticed these when attempting to generate docs.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,568,2020-06-09T06:40:36Z,2020-06-16T16:55:16Z,2020-06-16T16:59:47Z,MERGED,True,146,1,4,https://github.com/crystaldust,Add resolved_name() method to publisher,8,[],https://github.com/ros2/rclpy/pull/568,https://github.com/crystaldust,1,https://github.com/ros2/rclpy/pull/568,The method internally call the c function rcl_publisher_get_topic_name in rcl library.,The method internally call the c function rcl_publisher_get_topic_name in rcl library.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,568,2020-06-09T06:40:36Z,2020-06-16T16:55:16Z,2020-06-16T16:59:47Z,MERGED,True,146,1,4,https://github.com/crystaldust,Add resolved_name() method to publisher,8,[],https://github.com/ros2/rclpy/pull/568,https://github.com/crystaldust,2,https://github.com/ros2/rclpy/pull/568#issuecomment-641068113,The method internally call the c function rcl_publisher_get_topic_name in rcl library.,"@sloretz Let's talke about the feature here.
I see the publisher class in rclcpp has a method get_topic_name which calls the same c function rcl_publisher_get_topic_name, should we keep the method name the same in rclpy? Since at first sight resolved_name seems to be something like the name of the host machine which the node is running on.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,568,2020-06-09T06:40:36Z,2020-06-16T16:55:16Z,2020-06-16T16:59:47Z,MERGED,True,146,1,4,https://github.com/crystaldust,Add resolved_name() method to publisher,8,[],https://github.com/ros2/rclpy/pull/568,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/568#issuecomment-641448933,The method internally call the c function rcl_publisher_get_topic_name in rcl library.,"I see the publisher class in rclcpp has a method get_topic_name which calls the same c function rcl_publisher_get_topic_name, should we keep the method name the same in rclpy? Since at first sight resolved_name seems to be something like the name of the host machine which the node is running on.

That's a good point! topic seems clearer to me than resolved when on the publisher. I don't think the naming between rclcpp and rclpy has to be exactly the same since there are different norms for naming in C++ and Python. I wouldn't expect to see a get_...() method on a Python class. Now that you mention it, I think an @property called topic_name would be a good way to access this, while still being similar enough to rclcpp that C++ users can find it.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,568,2020-06-09T06:40:36Z,2020-06-16T16:55:16Z,2020-06-16T16:59:47Z,MERGED,True,146,1,4,https://github.com/crystaldust,Add resolved_name() method to publisher,8,[],https://github.com/ros2/rclpy/pull/568,https://github.com/crystaldust,4,https://github.com/ros2/rclpy/pull/568#issuecomment-642556042,The method internally call the c function rcl_publisher_get_topic_name in rcl library.,"I've made some updates following the comments. The test cases cover the node namespace effects on topic_name, and the remapping rules.
I used to think we should have full coverage on naming and remapping, while found the rules are pretty complicated, but they are well covered in rcl test_remap.cpp and test_remap_integration.cpp. Since rclpy is just a binding on rcl, we may not need to test every aspect on remapping on rclpy.",True,"{'ROCKET': ['https://github.com/sloretz'], 'THUMBS_UP': ['https://github.com/sloretz']}"
ros2/rclpy,https://github.com/ros2/rclpy,568,2020-06-09T06:40:36Z,2020-06-16T16:55:16Z,2020-06-16T16:59:47Z,MERGED,True,146,1,4,https://github.com/crystaldust,Add resolved_name() method to publisher,8,[],https://github.com/ros2/rclpy/pull/568,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/568#issuecomment-643075114,The method internally call the c function rcl_publisher_get_topic_name in rcl library.,Looks like the PR is really close to completion. Running linux CI testing just rclpy to see if new tests pass and if linters pass,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,568,2020-06-09T06:40:36Z,2020-06-16T16:55:16Z,2020-06-16T16:59:47Z,MERGED,True,146,1,4,https://github.com/crystaldust,Add resolved_name() method to publisher,8,[],https://github.com/ros2/rclpy/pull/568,https://github.com/crystaldust,6,https://github.com/ros2/rclpy/pull/568#issuecomment-643878383,The method internally call the c function rcl_publisher_get_topic_name in rcl library.,"Fixed the two snippets, should I do a rebase before the PR is merged?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,568,2020-06-09T06:40:36Z,2020-06-16T16:55:16Z,2020-06-16T16:59:47Z,MERGED,True,146,1,4,https://github.com/crystaldust,Add resolved_name() method to publisher,8,[],https://github.com/ros2/rclpy/pull/568,https://github.com/crystaldust,7,https://github.com/ros2/rclpy/pull/568#issuecomment-643955293,The method internally call the c function rcl_publisher_get_topic_name in rcl library.,"Opps, I'll take a look at the pylint errors in the CI build",True,{'ROCKET': ['https://github.com/sloretz']}
ros2/rclpy,https://github.com/ros2/rclpy,568,2020-06-09T06:40:36Z,2020-06-16T16:55:16Z,2020-06-16T16:59:47Z,MERGED,True,146,1,4,https://github.com/crystaldust,Add resolved_name() method to publisher,8,[],https://github.com/ros2/rclpy/pull/568,https://github.com/crystaldust,8,https://github.com/ros2/rclpy/pull/568#issuecomment-644440319,The method internally call the c function rcl_publisher_get_topic_name in rcl library.,test/test_publisher.py added to CMakeLists.txt :),True,{}
ros2/rclpy,https://github.com/ros2/rclpy,568,2020-06-09T06:40:36Z,2020-06-16T16:55:16Z,2020-06-16T16:59:47Z,MERGED,True,146,1,4,https://github.com/crystaldust,Add resolved_name() method to publisher,8,[],https://github.com/ros2/rclpy/pull/568,https://github.com/sloretz,9,https://github.com/ros2/rclpy/pull/568#issuecomment-644457455,The method internally call the c function rcl_publisher_get_topic_name in rcl library.,"CI (Testing just rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,568,2020-06-09T06:40:36Z,2020-06-16T16:55:16Z,2020-06-16T16:59:47Z,MERGED,True,146,1,4,https://github.com/crystaldust,Add resolved_name() method to publisher,8,[],https://github.com/ros2/rclpy/pull/568,https://github.com/sloretz,10,https://github.com/ros2/rclpy/pull/568#issuecomment-644887936,The method internally call the c function rcl_publisher_get_topic_name in rcl library.,"Approved and CI is green; merging 🎉
Thank you @crystaldust for contributing and iterating!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,568,2020-06-09T06:40:36Z,2020-06-16T16:55:16Z,2020-06-16T16:59:47Z,MERGED,True,146,1,4,https://github.com/crystaldust,Add resolved_name() method to publisher,8,[],https://github.com/ros2/rclpy/pull/568,https://github.com/sloretz,11,https://github.com/ros2/rclpy/pull/568#issuecomment-644889904,The method internally call the c function rcl_publisher_get_topic_name in rcl library.,I think it would be safe to backport this change to Foxy. There appears to be a merge conflict with Eloquent. I'll add this to just the Foxy backport board.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,569,2020-06-09T18:49:54Z,2020-06-09T20:29:00Z,2020-06-09T20:31:35Z,MERGED,True,12,0,2,https://github.com/sloretz,Doc+fix rclpy_handle_get_pointer_from_capsule(),3,"['bug', 'documentation']",https://github.com/ros2/rclpy/pull/569,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/569,This documents rclpy_handle_get_pointer_from_capsule() and fixes a case where RuntimeError is set when an exception was already set by PyCapsule_GetPointer.,This documents rclpy_handle_get_pointer_from_capsule() and fixes a case where RuntimeError is set when an exception was already set by PyCapsule_GetPointer.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,569,2020-06-09T18:49:54Z,2020-06-09T20:29:00Z,2020-06-09T20:31:35Z,MERGED,True,12,0,2,https://github.com/sloretz,Doc+fix rclpy_handle_get_pointer_from_capsule(),3,"['bug', 'documentation']",https://github.com/ros2/rclpy/pull/569,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/569#issuecomment-641505753,This documents rclpy_handle_get_pointer_from_capsule() and fixes a case where RuntimeError is set when an exception was already set by PyCapsule_GetPointer.,"CI (testing just rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,569,2020-06-09T18:49:54Z,2020-06-09T20:29:00Z,2020-06-09T20:31:35Z,MERGED,True,12,0,2,https://github.com/sloretz,Doc+fix rclpy_handle_get_pointer_from_capsule(),3,"['bug', 'documentation']",https://github.com/ros2/rclpy/pull/569,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/569#issuecomment-641551576,This documents rclpy_handle_get_pointer_from_capsule() and fixes a case where RuntimeError is set when an exception was already set by PyCapsule_GetPointer.,"Ignoring windows test failure from cppcheck as unrelated to this PR.
There is an unknown macro here somewhere. Configuration is required. If RCUTILS_STRINGIFY is a macro then please configure it.


lgtm, should be backported?'

Yup, but only to Foxy. The file changed doesn't appear to exist in Eloquent.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,569,2020-06-09T18:49:54Z,2020-06-09T20:29:00Z,2020-06-09T20:31:35Z,MERGED,True,12,0,2,https://github.com/sloretz,Doc+fix rclpy_handle_get_pointer_from_capsule(),3,"['bug', 'documentation']",https://github.com/ros2/rclpy/pull/569,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/569#issuecomment-641552809,This documents rclpy_handle_get_pointer_from_capsule() and fixes a case where RuntimeError is set when an exception was already set by PyCapsule_GetPointer.,"This does not need to be released immediately; it can wait for the next rclpy release. The bug is unlikely to be encountered, and if it is the symptom is just extra stderr console spam about an exception already being set.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,570,2020-06-09T20:34:53Z,2020-06-09T20:57:44Z,2020-06-09T20:57:48Z,MERGED,True,12,0,2,https://github.com/sloretz,[Foxy Backport] Doc+fix rclpy_handle_get_pointer_from_capsule() (#569),1,"['bug', 'documentation']",https://github.com/ros2/rclpy/pull/570,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/570,"Doc+fix rclpy_handle_get_pointer_from_capsule()

Document parameters and return value
Fix case where RuntimeError is set when an exception is already set if
the PyCapsule is invalid or the PyCapsule name does not match.
Signed-off-by: Shane Loretzsloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org

Typos

Signed-off-by: Shane Loretz sloretz@osrfoundation.org

Period at end of sentence

Signed-off-by: Shane Loretz sloretz@osrfoundation.org","Doc+fix rclpy_handle_get_pointer_from_capsule()

Document parameters and return value
Fix case where RuntimeError is set when an exception is already set if
the PyCapsule is invalid or the PyCapsule name does not match.
Signed-off-by: Shane Loretzsloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org

Typos

Signed-off-by: Shane Loretz sloretz@osrfoundation.org

Period at end of sentence

Signed-off-by: Shane Loretz sloretz@osrfoundation.org",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,570,2020-06-09T20:34:53Z,2020-06-09T20:57:44Z,2020-06-09T20:57:48Z,MERGED,True,12,0,2,https://github.com/sloretz,[Foxy Backport] Doc+fix rclpy_handle_get_pointer_from_capsule() (#569),1,"['bug', 'documentation']",https://github.com/ros2/rclpy/pull/570,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/570#issuecomment-641557091,"Doc+fix rclpy_handle_get_pointer_from_capsule()

Document parameters and return value
Fix case where RuntimeError is set when an exception is already set if
the PyCapsule is invalid or the PyCapsule name does not match.
Signed-off-by: Shane Loretzsloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org

Typos

Signed-off-by: Shane Loretz sloretz@osrfoundation.org

Period at end of sentence

Signed-off-by: Shane Loretz sloretz@osrfoundation.org",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,570,2020-06-09T20:34:53Z,2020-06-09T20:57:44Z,2020-06-09T20:57:48Z,MERGED,True,12,0,2,https://github.com/sloretz,[Foxy Backport] Doc+fix rclpy_handle_get_pointer_from_capsule() (#569),1,"['bug', 'documentation']",https://github.com/ros2/rclpy/pull/570,https://github.com/jacobperron,3,https://github.com/ros2/rclpy/pull/570#issuecomment-641559945,"Doc+fix rclpy_handle_get_pointer_from_capsule()

Document parameters and return value
Fix case where RuntimeError is set when an exception is already set if
the PyCapsule is invalid or the PyCapsule name does not match.
Signed-off-by: Shane Loretzsloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org

Typos

Signed-off-by: Shane Loretz sloretz@osrfoundation.org

Period at end of sentence

Signed-off-by: Shane Loretz sloretz@osrfoundation.org",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,570,2020-06-09T20:34:53Z,2020-06-09T20:57:44Z,2020-06-09T20:57:48Z,MERGED,True,12,0,2,https://github.com/sloretz,[Foxy Backport] Doc+fix rclpy_handle_get_pointer_from_capsule() (#569),1,"['bug', 'documentation']",https://github.com/ros2/rclpy/pull/570,https://github.com/jacobperron,4,https://github.com/ros2/rclpy/pull/570#issuecomment-641560141,"Doc+fix rclpy_handle_get_pointer_from_capsule()

Document parameters and return value
Fix case where RuntimeError is set when an exception is already set if
the PyCapsule is invalid or the PyCapsule name does not match.
Signed-off-by: Shane Loretzsloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org

Typos

Signed-off-by: Shane Loretz sloretz@osrfoundation.org

Period at end of sentence

Signed-off-by: Shane Loretz sloretz@osrfoundation.org",I wiped the workspace before re-triggering the PR job.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,570,2020-06-09T20:34:53Z,2020-06-09T20:57:44Z,2020-06-09T20:57:48Z,MERGED,True,12,0,2,https://github.com/sloretz,[Foxy Backport] Doc+fix rclpy_handle_get_pointer_from_capsule() (#569),1,"['bug', 'documentation']",https://github.com/ros2/rclpy/pull/570,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/570#issuecomment-641565747,"Doc+fix rclpy_handle_get_pointer_from_capsule()

Document parameters and return value
Fix case where RuntimeError is set when an exception is already set if
the PyCapsule is invalid or the PyCapsule name does not match.
Signed-off-by: Shane Loretzsloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org

Typos

Signed-off-by: Shane Loretz sloretz@osrfoundation.org

Period at end of sentence

Signed-off-by: Shane Loretz sloretz@osrfoundation.org",Merging with approval and green PR job since it's a backport and the original PR CI passed,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,571,2020-06-09T20:41:30Z,2020-06-16T21:21:34Z,2020-06-16T21:21:37Z,MERGED,True,107,0,4,https://github.com/audrow,Add `topic_name` property to Subscription,10,['enhancement'],https://github.com/ros2/rclpy/pull/571,https://github.com/audrow,1,https://github.com/ros2/rclpy/pull/571,,,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,571,2020-06-09T20:41:30Z,2020-06-16T21:21:34Z,2020-06-16T21:21:37Z,MERGED,True,107,0,4,https://github.com/audrow,Add `topic_name` property to Subscription,10,['enhancement'],https://github.com/ros2/rclpy/pull/571,https://github.com/audrow,2,https://github.com/ros2/rclpy/pull/571#issuecomment-642174237,,"Maybe it would be better to do follow-up PR for publication.

@fujitatomoya If I understand correctly, there is one in the works: #568.",True,{'THUMBS_UP': ['https://github.com/fujitatomoya']}
ros2/rclpy,https://github.com/ros2/rclpy,571,2020-06-09T20:41:30Z,2020-06-16T21:21:34Z,2020-06-16T21:21:37Z,MERGED,True,107,0,4,https://github.com/audrow,Add `topic_name` property to Subscription,10,['enhancement'],https://github.com/ros2/rclpy/pull/571,https://github.com/fujitatomoya,3,https://github.com/ros2/rclpy/pull/571#issuecomment-642349845,,"@audrow
thanks, i will look into it.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,571,2020-06-09T20:41:30Z,2020-06-16T21:21:34Z,2020-06-16T21:21:37Z,MERGED,True,107,0,4,https://github.com/audrow,Add `topic_name` property to Subscription,10,['enhancement'],https://github.com/ros2/rclpy/pull/571,https://github.com/audrow,4,https://github.com/ros2/rclpy/pull/571#issuecomment-643405509,,"Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,571,2020-06-09T20:41:30Z,2020-06-16T21:21:34Z,2020-06-16T21:21:37Z,MERGED,True,107,0,4,https://github.com/audrow,Add `topic_name` property to Subscription,10,['enhancement'],https://github.com/ros2/rclpy/pull/571,https://github.com/audrow,5,https://github.com/ros2/rclpy/pull/571#issuecomment-644923575,,"Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,572,2020-06-10T20:14:55Z,2020-06-17T21:58:14Z,2020-06-17T21:58:17Z,MERGED,True,47,7,2,https://github.com/ivanpauno,Add message lost subscription event,1,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/572,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/572,See ros2/rmw#226.,See ros2/rmw#226.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,573,2020-06-12T23:44:17Z,2020-06-16T22:44:40Z,2020-06-16T22:44:44Z,MERGED,True,1,0,1,https://github.com/claireyywang,add missing macro ,4,['in review'],https://github.com/ros2/rclpy/pull/573,https://github.com/claireyywang,1,https://github.com/ros2/rclpy/pull/573,"add rcutils/macros.h that configures RCUTILS_STRINGIFY, see discussion on ros2/ros2#942
Signed-off-by: claireyywang 22240514+claireyywang@users.noreply.github.com","add rcutils/macros.h that configures RCUTILS_STRINGIFY, see discussion on ros2/ros2#942
Signed-off-by: claireyywang 22240514+claireyywang@users.noreply.github.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,573,2020-06-12T23:44:17Z,2020-06-16T22:44:40Z,2020-06-16T22:44:44Z,MERGED,True,1,0,1,https://github.com/claireyywang,add missing macro ,4,['in review'],https://github.com/ros2/rclpy/pull/573,https://github.com/claireyywang,2,https://github.com/ros2/rclpy/pull/573#issuecomment-643527987,"add rcutils/macros.h that configures RCUTILS_STRINGIFY, see discussion on ros2/ros2#942
Signed-off-by: claireyywang 22240514+claireyywang@users.noreply.github.com","CI on rclpy
linux 
linux-aarch64 
osx 
windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,573,2020-06-12T23:44:17Z,2020-06-16T22:44:40Z,2020-06-16T22:44:44Z,MERGED,True,1,0,1,https://github.com/claireyywang,add missing macro ,4,['in review'],https://github.com/ros2/rclpy/pull/573,https://github.com/claireyywang,3,https://github.com/ros2/rclpy/pull/573#issuecomment-645036017,"add rcutils/macros.h that configures RCUTILS_STRINGIFY, see discussion on ros2/ros2#942
Signed-off-by: claireyywang 22240514+claireyywang@users.noreply.github.com","CI
linux 
linux-aarch64 
osx 
windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,574,2020-06-15T22:41:48Z,2020-06-16T22:45:14Z,2021-05-14T16:43:56Z,MERGED,True,28,15,2,https://github.com/audrow,Fix executor behavior on shutdown,9,['bug'],https://github.com/ros2/rclpy/pull/574,https://github.com/audrow,1,https://github.com/ros2/rclpy/pull/574,"Fixes #435 and reverts the changes in #563.
Note that this PR makes wait_for_ready_callbacks() return a Tuple[Task, WaitableEntityType, 'Node'] as it's type annotation specifies.  Before this method could return None and this was implicitly handled in the spin_once method for the single and multi thread executors.","Fixes #435 and reverts the changes in #563.
Note that this PR makes wait_for_ready_callbacks() return a Tuple[Task, WaitableEntityType, 'Node'] as it's type annotation specifies.  Before this method could return None and this was implicitly handled in the spin_once method for the single and multi thread executors.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,574,2020-06-15T22:41:48Z,2020-06-16T22:45:14Z,2021-05-14T16:43:56Z,MERGED,True,28,15,2,https://github.com/audrow,Fix executor behavior on shutdown,9,['bug'],https://github.com/ros2/rclpy/pull/574,https://github.com/audrow,2,https://github.com/ros2/rclpy/pull/574#issuecomment-644922741,"Fixes #435 and reverts the changes in #563.
Note that this PR makes wait_for_ready_callbacks() return a Tuple[Task, WaitableEntityType, 'Node'] as it's type annotation specifies.  Before this method could return None and this was implicitly handled in the spin_once method for the single and multi thread executors.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,574,2020-06-15T22:41:48Z,2020-06-16T22:45:14Z,2021-05-14T16:43:56Z,MERGED,True,28,15,2,https://github.com/audrow,Fix executor behavior on shutdown,9,['bug'],https://github.com/ros2/rclpy/pull/574,https://github.com/audrow,3,https://github.com/ros2/rclpy/pull/574#issuecomment-645058526,"Fixes #435 and reverts the changes in #563.
Note that this PR makes wait_for_ready_callbacks() return a Tuple[Task, WaitableEntityType, 'Node'] as it's type annotation specifies.  Before this method could return None and this was implicitly handled in the spin_once method for the single and multi thread executors.","I should have put this up before merging:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,574,2020-06-15T22:41:48Z,2020-06-16T22:45:14Z,2021-05-14T16:43:56Z,MERGED,True,28,15,2,https://github.com/audrow,Fix executor behavior on shutdown,9,['bug'],https://github.com/ros2/rclpy/pull/574,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/574#issuecomment-646292996,"Fixes #435 and reverts the changes in #563.
Note that this PR makes wait_for_ready_callbacks() return a Tuple[Task, WaitableEntityType, 'Node'] as it's type annotation specifies.  Before this method could return None and this was implicitly handled in the spin_once method for the single and multi thread executors.","should this fix be backported to foxy/eloquent/dashing? @audrow @hidmic
(edit) it's already on foxy board, but it sounds reasonable to also backport to eloquent and dashing.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,574,2020-06-15T22:41:48Z,2020-06-16T22:45:14Z,2021-05-14T16:43:56Z,MERGED,True,28,15,2,https://github.com/audrow,Fix executor behavior on shutdown,9,['bug'],https://github.com/ros2/rclpy/pull/574,https://github.com/ivanpauno,5,https://github.com/ros2/rclpy/pull/574#issuecomment-646295843,"Fixes #435 and reverts the changes in #563.
Note that this PR makes wait_for_ready_callbacks() return a Tuple[Task, WaitableEntityType, 'Node'] as it's type annotation specifies.  Before this method could return None and this was implicitly handled in the spin_once method for the single and multi thread executors.",@audrow remember to use squash-merge instead of plain merge,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,574,2020-06-15T22:41:48Z,2020-06-16T22:45:14Z,2021-05-14T16:43:56Z,MERGED,True,28,15,2,https://github.com/audrow,Fix executor behavior on shutdown,9,['bug'],https://github.com/ros2/rclpy/pull/574,https://github.com/audrow,6,https://github.com/ros2/rclpy/pull/574#issuecomment-646328929,"Fixes #435 and reverts the changes in #563.
Note that this PR makes wait_for_ready_callbacks() return a Tuple[Task, WaitableEntityType, 'Node'] as it's type annotation specifies.  Before this method could return None and this was implicitly handled in the spin_once method for the single and multi thread executors.","@ivanpauno Thanks for pointing it out, I'll try to make sure to squash and merge in the future.
I plan to backport to Foxy; I can look into backporting to Eloquent and Dashing.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,574,2020-06-15T22:41:48Z,2020-06-16T22:45:14Z,2021-05-14T16:43:56Z,MERGED,True,28,15,2,https://github.com/audrow,Fix executor behavior on shutdown,9,['bug'],https://github.com/ros2/rclpy/pull/574,https://github.com/audrow,7,https://github.com/ros2/rclpy/pull/574#issuecomment-646345423,"Fixes #435 and reverts the changes in #563.
Note that this PR makes wait_for_ready_callbacks() return a Tuple[Task, WaitableEntityType, 'Node'] as it's type annotation specifies.  Before this method could return None and this was implicitly handled in the spin_once method for the single and multi thread executors.","I didn't port this to Eloquent because of unexpected test failures (#584).
Also, these changes don't merge cleanly into Dashing.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,574,2020-06-15T22:41:48Z,2020-06-16T22:45:14Z,2021-05-14T16:43:56Z,MERGED,True,28,15,2,https://github.com/audrow,Fix executor behavior on shutdown,9,['bug'],https://github.com/ros2/rclpy/pull/574,https://github.com/ivanpauno,8,https://github.com/ros2/rclpy/pull/574#issuecomment-646653010,"Fixes #435 and reverts the changes in #563.
Note that this PR makes wait_for_ready_callbacks() return a Tuple[Task, WaitableEntityType, 'Node'] as it's type annotation specifies.  Before this method could return None and this was implicitly handled in the spin_once method for the single and multi thread executors.","I didn't port this to Eloquent because of unexpected test failures (#584).
Also, these changes don't merge cleanly into Dashing.

#435 was reported in Dashing.
It might be harder to get CI passing or to get the patch applied in older releases, but that doesn't mean it isn't a bug there and shouldn't be backported.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,574,2020-06-15T22:41:48Z,2020-06-16T22:45:14Z,2021-05-14T16:43:56Z,MERGED,True,28,15,2,https://github.com/audrow,Fix executor behavior on shutdown,9,['bug'],https://github.com/ros2/rclpy/pull/574,https://github.com/nuclearsandwich,9,https://github.com/ros2/rclpy/pull/574#issuecomment-729881840,"Fixes #435 and reverts the changes in #563.
Note that this PR makes wait_for_ready_callbacks() return a Tuple[Task, WaitableEntityType, 'Node'] as it's type annotation specifies.  Before this method could return None and this was implicitly handled in the spin_once method for the single and multi thread executors.",Since the Dashing backport isn't trivial I'm going to bump this to the next patch release in order to give it more time.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,574,2020-06-15T22:41:48Z,2020-06-16T22:45:14Z,2021-05-14T16:43:56Z,MERGED,True,28,15,2,https://github.com/audrow,Fix executor behavior on shutdown,9,['bug'],https://github.com/ros2/rclpy/pull/574,https://github.com/nuclearsandwich,10,https://github.com/ros2/rclpy/pull/574#issuecomment-841363883,"Fixes #435 and reverts the changes in #563.
Note that this PR makes wait_for_ready_callbacks() return a Tuple[Task, WaitableEntityType, 'Node'] as it's type annotation specifies.  Before this method could return None and this was implicitly handled in the spin_once method for the single and multi thread executors.",I'm reviewing the board for the final Dashing patch release. Since this backport isn't trivial and there hasn't been any outside request for this fix to be backported I am going to remove it from the patch release board.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,576,2020-06-16T17:11:32Z,2020-06-25T17:40:45Z,2020-06-25T17:40:49Z,MERGED,True,146,1,4,https://github.com/sloretz,[Foxy backport] Backport `Publisher.topic_name` #568,1,[],https://github.com/ros2/rclpy/pull/576,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/576,Backports #568 to Foxy,Backports #568 to Foxy,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,577,2020-06-17T18:15:34Z,2020-06-23T23:15:16Z,2020-06-23T23:15:20Z,MERGED,True,2,0,1,https://github.com/claireyywang,Pass rcutils_include_dirs to cppcheck ,4,[],https://github.com/ros2/rclpy/pull/577,https://github.com/claireyywang,1,https://github.com/ros2/rclpy/pull/577,"This fixes the rclpy's unknown macro error on osx and windows, but it may not be the best strategy, cuz it will require manually pass in include_dirs to cppcheck in all other repos listed on this test report https://ci.ros2.org/view/nightly/job/nightly_win_rel/1576/testReport/
We've encountered the same error before and managed to fix it in this ticket ament/ament_lint#116 I'm not sure why this is happening again.
Original issue ros2/ros2#942","This fixes the rclpy's unknown macro error on osx and windows, but it may not be the best strategy, cuz it will require manually pass in include_dirs to cppcheck in all other repos listed on this test report https://ci.ros2.org/view/nightly/job/nightly_win_rel/1576/testReport/
We've encountered the same error before and managed to fix it in this ticket ament/ament_lint#116 I'm not sure why this is happening again.
Original issue ros2/ros2#942",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,577,2020-06-17T18:15:34Z,2020-06-23T23:15:16Z,2020-06-23T23:15:20Z,MERGED,True,2,0,1,https://github.com/claireyywang,Pass rcutils_include_dirs to cppcheck ,4,[],https://github.com/ros2/rclpy/pull/577,https://github.com/claireyywang,2,https://github.com/ros2/rclpy/pull/577#issuecomment-645554558,"This fixes the rclpy's unknown macro error on osx and windows, but it may not be the best strategy, cuz it will require manually pass in include_dirs to cppcheck in all other repos listed on this test report https://ci.ros2.org/view/nightly/job/nightly_win_rel/1576/testReport/
We've encountered the same error before and managed to fix it in this ticket ament/ament_lint#116 I'm not sure why this is happening again.
Original issue ros2/ros2#942",windows CI against cppcheck2.0,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,577,2020-06-17T18:15:34Z,2020-06-23T23:15:16Z,2020-06-23T23:15:20Z,MERGED,True,2,0,1,https://github.com/claireyywang,Pass rcutils_include_dirs to cppcheck ,4,[],https://github.com/ros2/rclpy/pull/577,https://github.com/dirk-thomas,3,https://github.com/ros2/rclpy/pull/577#issuecomment-645644639,"This fixes the rclpy's unknown macro error on osx and windows, but it may not be the best strategy, cuz it will require manually pass in include_dirs to cppcheck in all other repos listed on this test report https://ci.ros2.org/view/nightly/job/nightly_win_rel/1576/testReport/
We've encountered the same error before and managed to fix it in this ticket ament/ament_lint#116 I'm not sure why this is happening again.
Original issue ros2/ros2#942",This approach doesn't seem like the right solution. Maybe the original decision to not include dirs from other packages needs to be reconsidered (see ament/ament_lint#117 (comment)).,True,{'THUMBS_UP': ['https://github.com/rotu']}
ros2/rclpy,https://github.com/ros2/rclpy,577,2020-06-17T18:15:34Z,2020-06-23T23:15:16Z,2020-06-23T23:15:20Z,MERGED,True,2,0,1,https://github.com/claireyywang,Pass rcutils_include_dirs to cppcheck ,4,[],https://github.com/ros2/rclpy/pull/577,https://github.com/jacobperron,4,https://github.com/ros2/rclpy/pull/577#issuecomment-645648256,"This fixes the rclpy's unknown macro error on osx and windows, but it may not be the best strategy, cuz it will require manually pass in include_dirs to cppcheck in all other repos listed on this test report https://ci.ros2.org/view/nightly/job/nightly_win_rel/1576/testReport/
We've encountered the same error before and managed to fix it in this ticket ament/ament_lint#116 I'm not sure why this is happening again.
Original issue ros2/ros2#942","This approach doesn't seem like the right solution. Maybe the original decision to not include dirs from other packages needs to be reconsidered (see ament/ament_lint#117 (comment)).

IIRC, the reason I opted to not include headers from all dependencies was that the running time of cppcheck increase by a lot (e.g. the test timeout was easily exceeded). It still might be worth trying again; perhaps there have been performance improvements to cppcheck since then.
edit: also, we have to be careful adding headers from third-party libraries as cppcheck will report any errors in their headers as well.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,577,2020-06-17T18:15:34Z,2020-06-23T23:15:16Z,2020-06-23T23:15:20Z,MERGED,True,2,0,1,https://github.com/claireyywang,Pass rcutils_include_dirs to cppcheck ,4,[],https://github.com/ros2/rclpy/pull/577,https://github.com/claireyywang,5,https://github.com/ros2/rclpy/pull/577#issuecomment-645693155,"This fixes the rclpy's unknown macro error on osx and windows, but it may not be the best strategy, cuz it will require manually pass in include_dirs to cppcheck in all other repos listed on this test report https://ci.ros2.org/view/nightly/job/nightly_win_rel/1576/testReport/
We've encountered the same error before and managed to fix it in this ticket ament/ament_lint#116 I'm not sure why this is happening again.
Original issue ros2/ros2#942","It used to be rare that we needed to give these hints, but if it starting to become a common occurrence maybe we should investigate alternatives.

rclpy is one of the packages having this error. The bulk of errors from test report seem to be from a bunch of rosidl_typesupport and rcl packages. It's hard to estimate from the report how many are affected, but if this approach is the right way to go, I will need to start setting ament_cmake_cppcheck_ADDITIONAL_INCLUDE_DIRS for all those packages.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,577,2020-06-17T18:15:34Z,2020-06-23T23:15:16Z,2020-06-23T23:15:20Z,MERGED,True,2,0,1,https://github.com/claireyywang,Pass rcutils_include_dirs to cppcheck ,4,[],https://github.com/ros2/rclpy/pull/577,https://github.com/claireyywang,6,https://github.com/ros2/rclpy/pull/577#issuecomment-645694544,"This fixes the rclpy's unknown macro error on osx and windows, but it may not be the best strategy, cuz it will require manually pass in include_dirs to cppcheck in all other repos listed on this test report https://ci.ros2.org/view/nightly/job/nightly_win_rel/1576/testReport/
We've encountered the same error before and managed to fix it in this ticket ament/ament_lint#116 I'm not sure why this is happening again.
Original issue ros2/ros2#942","I guess another way is to pass all macro include_dirs  used by the package to cppcheck in ament_lint, instead of just include_dirs of the package being tested, but I don't know enough cmake or build process to see the down side of this approach.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,577,2020-06-17T18:15:34Z,2020-06-23T23:15:16Z,2020-06-23T23:15:20Z,MERGED,True,2,0,1,https://github.com/claireyywang,Pass rcutils_include_dirs to cppcheck ,4,[],https://github.com/ros2/rclpy/pull/577,https://github.com/dirk-thomas,7,https://github.com/ros2/rclpy/pull/577#issuecomment-645756478,"This fixes the rclpy's unknown macro error on osx and windows, but it may not be the best strategy, cuz it will require manually pass in include_dirs to cppcheck in all other repos listed on this test report https://ci.ros2.org/view/nightly/job/nightly_win_rel/1576/testReport/
We've encountered the same error before and managed to fix it in this ticket ament/ament_lint#116 I'm not sure why this is happening again.
Original issue ros2/ros2#942","I am mostly concerned about the locality of a change. If a package starts using a macro it might need to update the cppcheck arguments (not great but not terrible either).
But that change shouldn't be exposed to downstream packages and if upstream packages change their implementation that shouldn't effect this package either.
The exception would be if an upstream package is already explicitly listed for additional include directories - at that point any future change in the upstream package might cause a regression in this package. That would be case which might bubble through the stack which would be really unfortunate.
Beside my minor inline comment this patch addresses a specific issue we are having (when unpinning) so I am fine to merge it (with the comment addressed). Maybe a ticket to follow up this to see if there is any way to automate this while not killing performance would be good to create.",True,{'THUMBS_UP': ['https://github.com/claireyywang']}
ros2/rclpy,https://github.com/ros2/rclpy,577,2020-06-17T18:15:34Z,2020-06-23T23:15:16Z,2020-06-23T23:15:20Z,MERGED,True,2,0,1,https://github.com/claireyywang,Pass rcutils_include_dirs to cppcheck ,4,[],https://github.com/ros2/rclpy/pull/577,https://github.com/claireyywang,8,https://github.com/ros2/rclpy/pull/577#issuecomment-648387392,"This fixes the rclpy's unknown macro error on osx and windows, but it may not be the best strategy, cuz it will require manually pass in include_dirs to cppcheck in all other repos listed on this test report https://ci.ros2.org/view/nightly/job/nightly_win_rel/1576/testReport/
We've encountered the same error before and managed to fix it in this ticket ament/ament_lint#116 I'm not sure why this is happening again.
Original issue ros2/ros2#942","CI again
linux 
linux-aaaarch64 
osx 
windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,579,2020-06-18T18:26:36Z,2020-06-19T14:48:36Z,2020-06-19T14:48:41Z,MERGED,True,1,1,1,https://github.com/dirk-thomas,fix moved troubleshooting url,1,['bug'],https://github.com/ros2/rclpy/pull/579,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/579,Since the page was moved in ros2/ros2_documentation#700.,Since the page was moved in ros2/ros2_documentation#700.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,580,2020-06-18T19:18:09Z,2020-06-19T05:03:39Z,2020-06-19T05:03:42Z,MERGED,True,12,0,1,https://github.com/dirk-thomas,improve error message if rclpy C extensions are not found,3,['enhancement'],https://github.com/ros2/rclpy/pull/580,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/580,"There have been numerous tickets / questions regarding problems loading the rclpy C extensions (just the latest example https://answers.ros.org/question/355064/ros2-modulenotfounderror-no-module-named-rclpy_rclpy/):

ModuleNotFoundError: No module named ‘rclpy._rclpy’

This PR adds more context to this specific failure (the expected library not being found / existing). See the referenced PR to add the linked section to the docs.","There have been numerous tickets / questions regarding problems loading the rclpy C extensions (just the latest example https://answers.ros.org/question/355064/ros2-modulenotfounderror-no-module-named-rclpy_rclpy/):

ModuleNotFoundError: No module named ‘rclpy._rclpy’

This PR adds more context to this specific failure (the expected library not being found / existing). See the referenced PR to add the linked section to the docs.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,581,2020-06-18T19:27:29Z,2020-07-09T18:32:51Z,2020-07-09T18:32:51Z,MERGED,True,1,1,1,https://github.com/LoyVanBeek,Add useful debug info when trying to publish the wrong type,2,[],https://github.com/ros2/rclpy/pull/581,https://github.com/LoyVanBeek,1,https://github.com/ros2/rclpy/pull/581,"I stumbled upon https://stackoverflow.com/questions/62324936/ros2-typeerror-when-publishing-custom-message-to-topic-python the other day and thought: ""Should be an easy fix, if you know what you did wrong"" and this PR should help with that.","I stumbled upon https://stackoverflow.com/questions/62324936/ros2-typeerror-when-publishing-custom-message-to-topic-python the other day and thought: ""Should be an easy fix, if you know what you did wrong"" and this PR should help with that.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,581,2020-06-18T19:27:29Z,2020-07-09T18:32:51Z,2020-07-09T18:32:51Z,MERGED,True,1,1,1,https://github.com/LoyVanBeek,Add useful debug info when trying to publish the wrong type,2,[],https://github.com/ros2/rclpy/pull/581,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/581#issuecomment-646286092,"I stumbled upon https://stackoverflow.com/questions/62324936/ros2-typeerror-when-publishing-custom-message-to-topic-python the other day and thought: ""Should be an easy fix, if you know what you did wrong"" and this PR should help with that.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,581,2020-06-18T19:27:29Z,2020-07-09T18:32:51Z,2020-07-09T18:32:51Z,MERGED,True,1,1,1,https://github.com/LoyVanBeek,Add useful debug info when trying to publish the wrong type,2,[],https://github.com/ros2/rclpy/pull/581,https://github.com/LoyVanBeek,3,https://github.com/ros2/rclpy/pull/581#issuecomment-646474180,"I stumbled upon https://stackoverflow.com/questions/62324936/ros2-typeerror-when-publishing-custom-message-to-topic-python the other day and thought: ""Should be an easy fix, if you know what you did wrong"" and this PR should help with that.","The Rpr__rclpy__ubuntu_focal_amd64 check fails, but for unrelated reasons it seems:
13:40:27 In file included from /tmp/ws/src/rclpy/rclpy/src/rclpy/_rclpy.c:57:
13:40:27 /tmp/ws/src/rclpy/rclpy/src/rclpy/./_rclpy_qos_event.c:23:3: error: unknown type name ‘rmw_message_lost_status_t’
13:40:27    23 |   rmw_message_lost_status_t message_lost;
13:40:27       |   ^~~~~~~~~~~~~~~~~~~~~~~~~
13:40:27 /tmp/ws/src/rclpy/rclpy/src/rclpy/./_rclpy_qos_event.c: In function ‘_message_lost_to_py_object’:
13:40:27 /tmp/ws/src/rclpy/rclpy/src/rclpy/./_rclpy_qos_event.c:171:3: error: unknown type name ‘rmw_message_lost_status_t’; did you mean ‘rmw_liveliness_lost_status_t’?
13:40:27   171 |   rmw_message_lost_status_t * actual_data = &data->message_lost;
13:40:27       |   ^~~~~~~~~~~~~~~~~~~~~~~~~
13:40:27       |   rmw_liveliness_lost_status_t
13:40:27 /tmp/ws/src/rclpy/rclpy/src/rclpy/./_rclpy_qos_event.c:174:16: error: request for member ‘total_count’ in something not a structure or union
13:40:27   174 |     actual_data->total_count,
13:40:27       |                ^~
13:40:27 /tmp/ws/src/rclpy/rclpy/src/rclpy/./_rclpy_qos_event.c:175:16: error: request for member ‘total_count_change’ in something not a structure or union
13:40:27   175 |     actual_data->total_count_change);
13:40:27       |                ^~
13:40:27 /tmp/ws/src/rclpy/rclpy/src/rclpy/./_rclpy_qos_event.c: In function ‘_get_qos_event_data_filler_function_for’:
13:40:27 /tmp/ws/src/rclpy/rclpy/src/rclpy/./_rclpy_qos_event.c:254:12: error: ‘RCL_SUBSCRIPTION_MESSAGE_LOST’ undeclared (first use in this function)
13:40:27   254 |       case RCL_SUBSCRIPTION_MESSAGE_LOST:
13:40:27       |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
13:40:27 /tmp/ws/src/rclpy/rclpy/src/rclpy/./_rclpy_qos_event.c:254:12: note: each undeclared identifier is reported only once for each function it appears in
13:40:27 make[2]: *** [CMakeFiles/rclpy.dir/build.make:63: CMakeFiles/rclpy.dir/src/rclpy/_rclpy.c.o] Error 1
13:40:27 make[1]: *** [CMakeFiles/Makefile2:117: CMakeFiles/rclpy.dir/all] Error 2
13:40:27 make: *** [Makefile:141: all] Error 2",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,581,2020-06-18T19:27:29Z,2020-07-09T18:32:51Z,2020-07-09T18:32:51Z,MERGED,True,1,1,1,https://github.com/LoyVanBeek,Add useful debug info when trying to publish the wrong type,2,[],https://github.com/ros2/rclpy/pull/581,https://github.com/clalancette,4,https://github.com/ros2/rclpy/pull/581#issuecomment-646604162,"I stumbled upon https://stackoverflow.com/questions/62324936/ros2-typeerror-when-publishing-custom-message-to-topic-python the other day and thought: ""Should be an easy fix, if you know what you did wrong"" and this PR should help with that.","Yes, I'm not sure what is going on with the Rolling PR build.
But there is actually a warning from the regular CI build.  It looks like a flake8 error:
./rclpy/publisher.py:73:22: E271 multiple spaces after keyword
                raise  TypeError('Expected {}, got {}'.format(self.msg_type, type(msg)))
                     ^

1     E271 multiple spaces after keyword

86 files checked
1 errors

Can you please fix it up?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,581,2020-06-18T19:27:29Z,2020-07-09T18:32:51Z,2020-07-09T18:32:51Z,MERGED,True,1,1,1,https://github.com/LoyVanBeek,Add useful debug info when trying to publish the wrong type,2,[],https://github.com/ros2/rclpy/pull/581,https://github.com/LoyVanBeek,5,https://github.com/ros2/rclpy/pull/581#issuecomment-646616681,"I stumbled upon https://stackoverflow.com/questions/62324936/ros2-typeerror-when-publishing-custom-message-to-topic-python the other day and thought: ""Should be an easy fix, if you know what you did wrong"" and this PR should help with that.",Done,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,581,2020-06-18T19:27:29Z,2020-07-09T18:32:51Z,2020-07-09T18:32:51Z,MERGED,True,1,1,1,https://github.com/LoyVanBeek,Add useful debug info when trying to publish the wrong type,2,[],https://github.com/ros2/rclpy/pull/581,https://github.com/clalancette,6,https://github.com/ros2/rclpy/pull/581#issuecomment-646626122,"I stumbled upon https://stackoverflow.com/questions/62324936/ros2-typeerror-when-publishing-custom-message-to-topic-python the other day and thought: ""Should be an easy fix, if you know what you did wrong"" and this PR should help with that.","Can you please sign that last commit?  That will make the DCO check pass.  I'll also run CI again, then I think this will be good to go in.  Thanks.",True,{'THUMBS_UP': ['https://github.com/LoyVanBeek']}
ros2/rclpy,https://github.com/ros2/rclpy,581,2020-06-18T19:27:29Z,2020-07-09T18:32:51Z,2020-07-09T18:32:51Z,MERGED,True,1,1,1,https://github.com/LoyVanBeek,Add useful debug info when trying to publish the wrong type,2,[],https://github.com/ros2/rclpy/pull/581,https://github.com/clalancette,7,https://github.com/ros2/rclpy/pull/581#issuecomment-646627160,"I stumbled upon https://stackoverflow.com/questions/62324936/ros2-typeerror-when-publishing-custom-message-to-topic-python the other day and thought: ""Should be an easy fix, if you know what you did wrong"" and this PR should help with that.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,581,2020-06-18T19:27:29Z,2020-07-09T18:32:51Z,2020-07-09T18:32:51Z,MERGED,True,1,1,1,https://github.com/LoyVanBeek,Add useful debug info when trying to publish the wrong type,2,[],https://github.com/ros2/rclpy/pull/581,https://github.com/clalancette,8,https://github.com/ros2/rclpy/pull/581#issuecomment-656284847,"I stumbled upon https://stackoverflow.com/questions/62324936/ros2-typeerror-when-publishing-custom-message-to-topic-python the other day and thought: ""Should be an easy fix, if you know what you did wrong"" and this PR should help with that.","Sorry, this dropped off of my radar.  CI looks good, there have been no significant changes since CI was last run, so I'll go ahead and merge.  Thanks for the contribution.",True,{'HOORAY': ['https://github.com/LoyVanBeek']}
ros2/rclpy,https://github.com/ros2/rclpy,582,2020-06-18T20:17:11Z,2020-06-18T22:52:51Z,2020-06-18T22:52:55Z,MERGED,True,107,0,4,https://github.com/audrow,[Foxy backport] Add `topic_name` property to Subscription (#571),1,[],https://github.com/ros2/rclpy/pull/582,https://github.com/audrow,1,https://github.com/ros2/rclpy/pull/582,Backports #571 to Foxy.,Backports #571 to Foxy.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,583,2020-06-18T22:13:00Z,2020-06-18T22:53:35Z,2020-06-18T22:53:39Z,MERGED,True,28,15,2,https://github.com/audrow,[Foxy Backport] Fix executor behavior on shutdown (#574),1,[],https://github.com/ros2/rclpy/pull/583,https://github.com/audrow,1,https://github.com/ros2/rclpy/pull/583,Backports #574 to Foxy.,Backports #574 to Foxy.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,584,2020-06-18T22:25:11Z,2020-06-18T22:56:47Z,2020-06-18T23:15:26Z,CLOSED,False,22,5,2,https://github.com/audrow,[Eloquent Backport] Fix executor behavior on shutdown (#574),1,[],https://github.com/ros2/rclpy/pull/584,https://github.com/audrow,1,https://github.com/ros2/rclpy/pull/584,Backports #574 to Eloquent.,Backports #574 to Eloquent.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,586,2020-06-22T16:36:12Z,2020-06-22T17:55:07Z,2020-06-22T17:55:12Z,MERGED,True,7,6,1,https://github.com/dirk-thomas,wrap lines to shorten line length,1,[],https://github.com/ros2/rclpy/pull/586,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/586,Follow up of #579. Also use f-string.,Follow up of #579. Also use f-string.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,587,2020-06-22T17:24:37Z,2020-06-25T16:45:53Z,2020-06-25T16:45:57Z,MERGED,True,2,0,1,https://github.com/clalancette,Add pytest.ini so tests succeed without warnings when run locally.,1,[],https://github.com/ros2/rclpy/pull/587,https://github.com/clalancette,1,https://github.com/ros2/rclpy/pull/587,"Signed-off-by: Chris Lalancette clalancette@openrobotics.org
Connects to ros2/ros2#951, which has further explanation and CI.","Signed-off-by: Chris Lalancette clalancette@openrobotics.org
Connects to ros2/ros2#951, which has further explanation and CI.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,589,2020-06-30T20:41:31Z,2020-07-01T12:08:47Z,2020-07-01T12:08:51Z,MERGED,True,1,1,1,https://github.com/dirk-thomas,[backport eloquent] fix moved troubleshooting url,1,[],https://github.com/ros2/rclpy/pull/589,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/589,Backport of #579.,Backport of #579.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,590,2020-06-30T20:41:37Z,2020-07-09T18:39:52Z,2020-07-09T18:39:56Z,MERGED,True,3,3,1,https://github.com/dirk-thomas,[backport dashing] fix moved troubleshooting url,2,[],https://github.com/ros2/rclpy/pull/590,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/590,Backport of #579.,Backport of #579.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,590,2020-06-30T20:41:37Z,2020-07-09T18:39:52Z,2020-07-09T18:39:56Z,MERGED,True,3,3,1,https://github.com/dirk-thomas,[backport dashing] fix moved troubleshooting url,2,[],https://github.com/ros2/rclpy/pull/590,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/590#issuecomment-655580740,Backport of #579.,@nuclearsandwich Friendly ping.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,590,2020-06-30T20:41:37Z,2020-07-09T18:39:52Z,2020-07-09T18:39:56Z,MERGED,True,3,3,1,https://github.com/dirk-thomas,[backport dashing] fix moved troubleshooting url,2,[],https://github.com/ros2/rclpy/pull/590,https://github.com/dirk-thomas,3,https://github.com/ros2/rclpy/pull/590#issuecomment-656288015,Backport of #579.,Remaining test failures are unrelated. Merging...,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,591,2020-06-30T20:41:42Z,2020-07-01T12:08:13Z,2020-07-01T12:08:18Z,MERGED,True,12,0,1,https://github.com/dirk-thomas,[backport eloquent] improve error message if rclpy C extensions are not found,1,[],https://github.com/ros2/rclpy/pull/591,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/591,Backport of #580.,Backport of #580.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,591,2020-06-30T20:41:42Z,2020-07-01T12:08:13Z,2020-07-01T12:08:18Z,MERGED,True,12,0,1,https://github.com/dirk-thomas,[backport eloquent] improve error message if rclpy C extensions are not found,1,[],https://github.com/ros2/rclpy/pull/591,https://github.com/mjcarroll,2,https://github.com/ros2/rclpy/pull/591#issuecomment-652379693,Backport of #580.,Test failures are unrelated.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,592,2020-06-30T20:41:48Z,2020-07-01T19:03:16Z,2020-07-01T19:03:20Z,MERGED,True,12,0,1,https://github.com/dirk-thomas,[backport dashing] improve error message if rclpy C extensions are not found,2,[],https://github.com/ros2/rclpy/pull/592,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/592,Backport of #580.,Backport of #580.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,593,2020-06-30T21:59:36Z,2020-07-10T17:00:12Z,2020-07-10T17:00:15Z,MERGED,True,5,0,1,https://github.com/dirk-thomas,add QoSProfile.__str__,1,['enhancement'],https://github.com/ros2/rclpy/pull/593,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/593,"I found it helpful to print all the attributes of a QoSProfile instance.
CI builds testing rclpy:

Linux 
Linux-aarch64 
macOS 
Windows","I found it helpful to print all the attributes of a QoSProfile instance.
CI builds testing rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,594,2020-07-02T07:59:46Z,2020-07-08T02:39:15Z,2020-07-08T03:27:08Z,CLOSED,False,60,5,4,https://github.com/Barry-Xu-2018,Add ability to configure domain ID,4,[],https://github.com/ros2/rclpy/pull/594,https://github.com/Barry-Xu-2018,1,https://github.com/ros2/rclpy/pull/594,Related to #484,Related to #484,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,594,2020-07-02T07:59:46Z,2020-07-08T02:39:15Z,2020-07-08T03:27:08Z,CLOSED,False,60,5,4,https://github.com/Barry-Xu-2018,Add ability to configure domain ID,4,[],https://github.com/ros2/rclpy/pull/594,https://github.com/Barry-Xu-2018,2,https://github.com/ros2/rclpy/pull/594#issuecomment-652859803,Related to #484,"After checking failure log for  Rpr__rclpy__ubuntu_focal_amd64 — Build finished., I find the error is the same as below.
It seems that test environment has problem.
Traceback:
../../src/rclpy/rclpy/test/__init__.py:23: in <module>
    import rclpy.impl  # noqa
../../src/rclpy/rclpy/rclpy/__init__.py:47: in <module>
    from rclpy.context import Context
../../src/rclpy/rclpy/rclpy/context.py:21: in <module>
    from rclpy.impl.implementation_singleton import rclpy_implementation
../../src/rclpy/rclpy/rclpy/impl/implementation_singleton.py:31: in <module>
    rclpy_implementation = _import('._rclpy')
../../src/rclpy/rclpy/rclpy/impl/__init__.py:28: in _import
    return importlib.import_module(name, package='rclpy')
/usr/lib/python3.8/importlib/__init__.py:127: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
E   ModuleNotFoundError: No module named 'rclpy._rclpy'
E   The C extension '/tmp/ws/src/rclpy/rclpy/rclpy/_rclpy.cpython-38-x86_64-linux-gnu.so' isn't present on the system. Please refer to 'https://index.ros.org/doc/ros2/Troubleshooting/Installation-Troubleshooting/#import-failing-without-library-present-on-the-system' for possible solutions",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,594,2020-07-02T07:59:46Z,2020-07-08T02:39:15Z,2020-07-08T03:27:08Z,CLOSED,False,60,5,4,https://github.com/Barry-Xu-2018,Add ability to configure domain ID,4,[],https://github.com/ros2/rclpy/pull/594,https://github.com/Barry-Xu-2018,3,https://github.com/ros2/rclpy/pull/594#issuecomment-654658394,Related to #484,"#594 (comment)

Sorry. It is my mistake.
The failure is caused from my modification.
I will fix it.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,594,2020-07-02T07:59:46Z,2020-07-08T02:39:15Z,2020-07-08T03:27:08Z,CLOSED,False,60,5,4,https://github.com/Barry-Xu-2018,Add ability to configure domain ID,4,[],https://github.com/ros2/rclpy/pull/594,https://github.com/Barry-Xu-2018,4,https://github.com/ros2/rclpy/pull/594#issuecomment-655246313,Related to #484,"@fujitatomoya
Sorry.
Since the change is a bit big, I will close this PR and create new PR to review.
New PR is #596.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,595,2020-07-06T19:03:42Z,2020-07-06T19:37:48Z,2020-07-06T19:37:52Z,MERGED,True,19,6,1,https://github.com/dirk-thomas,[backport foxy] fix/improve error message failing to load C extension,3,"['bug', 'enhancement']",https://github.com/ros2/rclpy/pull/595,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/595,"Backports #579, #580, and #586.","Backports #579, #580, and #586.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,596,2020-07-08T02:50:02Z,2020-08-05T16:23:21Z,2020-08-05T16:23:59Z,MERGED,True,126,5,4,https://github.com/Barry-Xu-2018,Add ability to configure domain ID,9,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/596,https://github.com/Barry-Xu-2018,1,https://github.com/ros2/rclpy/pull/596,Signed-off-by: Barry Xu barry.xu@sony.com,Signed-off-by: Barry Xu barry.xu@sony.com,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,596,2020-07-08T02:50:02Z,2020-08-05T16:23:21Z,2020-08-05T16:23:59Z,MERGED,True,126,5,4,https://github.com/Barry-Xu-2018,Add ability to configure domain ID,9,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/596,https://github.com/Barry-Xu-2018,2,https://github.com/ros2/rclpy/pull/596#issuecomment-655258736,Signed-off-by: Barry Xu barry.xu@sony.com,"After checking error, I find below 2 functions doesn't exist in rcl

rcl_init_options_get_domain_id
rcl_init_options_set_domain_id

Rpr__rclpy__ubuntu_focal_amd64 environment use rcl package from http://repo.ros2.org/ubuntu/testing/pool/main/r/ros-foxy-rcl/










ros-foxy-rcl-dbgsym_1.1.5-1focal.20200624.145908_amd64.deb
2020-06-24 15:26
180K


ros-foxy-rcl-dbgsym_1.1.5-1focal.20200625.081610_arm64.deb
2020-06-25 08:28
177K


ros-foxy-rcl_1.1.5-1focal.20200624.145908_amd64.deb
2020-06-24 15:26
118K


ros-foxy-rcl_1.1.5-1focal.20200625.081610_arm64.deb
2020-06-25 08:28
113K


ros-foxy-rcl_1.1.5-1focal.debian.tar.xz
2020-06-04 03:48
8.2K


ros-foxy-rcl_1.1.5-1focal.dsc
2020-06-04 03:48
1.4K


ros-foxy-rcl_1.1.5.orig.tar.gz
2020-06-04 03:48
181K



But these 2 functions are added at 6/30.
So have to wait for rcl package updated",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,596,2020-07-08T02:50:02Z,2020-08-05T16:23:21Z,2020-08-05T16:23:59Z,MERGED,True,126,5,4,https://github.com/Barry-Xu-2018,Add ability to configure domain ID,9,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/596,https://github.com/Barry-Xu-2018,3,https://github.com/ros2/rclpy/pull/596#issuecomment-655845119,Signed-off-by: Barry Xu barry.xu@sony.com,"@ros-pull-request-builder
I find rcl package has been updated in http://repo.ros2.org/ubuntu/testing/pool/main/r/ros-foxy-rcl/.
This change depends on rcl commit (6/30).
I think current updated rcl package has included dependent interfaces.
Could you help to do retest ?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,596,2020-07-08T02:50:02Z,2020-08-05T16:23:21Z,2020-08-05T16:23:59Z,MERGED,True,126,5,4,https://github.com/Barry-Xu-2018,Add ability to configure domain ID,9,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/596,https://github.com/Barry-Xu-2018,4,https://github.com/ros2/rclpy/pull/596#issuecomment-657321765,Signed-off-by: Barry Xu barry.xu@sony.com,"@fujitatomoya

domain_id should be checked if it is greater than or equal to zero?

Updated codes.
Please review again.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,596,2020-07-08T02:50:02Z,2020-08-05T16:23:21Z,2020-08-05T16:23:59Z,MERGED,True,126,5,4,https://github.com/Barry-Xu-2018,Add ability to configure domain ID,9,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/596,https://github.com/Barry-Xu-2018,5,https://github.com/ros2/rclpy/pull/596#issuecomment-657392730,Signed-off-by: Barry Xu barry.xu@sony.com,"@ivanpauno
Please help to review this commit.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,596,2020-07-08T02:50:02Z,2020-08-05T16:23:21Z,2020-08-05T16:23:59Z,MERGED,True,126,5,4,https://github.com/Barry-Xu-2018,Add ability to configure domain ID,9,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/596,https://github.com/Barry-Xu-2018,6,https://github.com/ros2/rclpy/pull/596#issuecomment-663801987,Signed-off-by: Barry Xu barry.xu@sony.com,"@ivanpauno
Please review again.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,596,2020-07-08T02:50:02Z,2020-08-05T16:23:21Z,2020-08-05T16:23:59Z,MERGED,True,126,5,4,https://github.com/Barry-Xu-2018,Add ability to configure domain ID,9,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/596,https://github.com/Barry-Xu-2018,7,https://github.com/ros2/rclpy/pull/596#issuecomment-665417175,Signed-off-by: Barry Xu barry.xu@sony.com,"@ivanpauno

With #596 (comment) addressed and get_domain_id_in_context deleted I think this is ready to go.

Got it. Please look at commit 5a8c761.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,596,2020-07-08T02:50:02Z,2020-08-05T16:23:21Z,2020-08-05T16:23:59Z,MERGED,True,126,5,4,https://github.com/Barry-Xu-2018,Add ability to configure domain ID,9,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/596,https://github.com/Barry-Xu-2018,8,https://github.com/ros2/rclpy/pull/596#issuecomment-666039400,Signed-off-by: Barry Xu barry.xu@sony.com,"@ivanpauno
Update test codes at commit 43c42c3.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,596,2020-07-08T02:50:02Z,2020-08-05T16:23:21Z,2020-08-05T16:23:59Z,MERGED,True,126,5,4,https://github.com/Barry-Xu-2018,Add ability to configure domain ID,9,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/596,https://github.com/ivanpauno,9,https://github.com/ros2/rclpy/pull/596#issuecomment-667986712,Signed-off-by: Barry Xu barry.xu@sony.com,"CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,596,2020-07-08T02:50:02Z,2020-08-05T16:23:21Z,2020-08-05T16:23:59Z,MERGED,True,126,5,4,https://github.com/Barry-Xu-2018,Add ability to configure domain ID,9,"['enhancement', 'in review']",https://github.com/ros2/rclpy/pull/596,https://github.com/ivanpauno,10,https://github.com/ros2/rclpy/pull/596#issuecomment-669293307,Signed-off-by: Barry Xu barry.xu@sony.com,Thanks @Barry-Xu-2018 !,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,597,2020-07-10T20:10:21Z,2020-07-10T20:34:12Z,2020-07-10T20:34:17Z,CLOSED,False,5,4,1,https://github.com/nuclearsandwich,[Dashing] Wrap lines to shorten line length.,1,[],https://github.com/ros2/rclpy/pull/597,https://github.com/nuclearsandwich,1,https://github.com/ros2/rclpy/pull/597,"Backports #586 but does not include the f-string change since they are not available in Dashing's minimum supported Python version, 3.5.","Backports #586 but does not include the f-string change since they are not available in Dashing's minimum supported Python version, 3.5.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,597,2020-07-10T20:10:21Z,2020-07-10T20:34:12Z,2020-07-10T20:34:17Z,CLOSED,False,5,4,1,https://github.com/nuclearsandwich,[Dashing] Wrap lines to shorten line length.,1,[],https://github.com/ros2/rclpy/pull/597,https://github.com/dirk-thomas,2,https://github.com/ros2/rclpy/pull/597#issuecomment-656875901,"Backports #586 but does not include the f-string change since they are not available in Dashing's minimum supported Python version, 3.5.",The second commit in #590 already made sure that the code passed the linter?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,597,2020-07-10T20:10:21Z,2020-07-10T20:34:12Z,2020-07-10T20:34:17Z,CLOSED,False,5,4,1,https://github.com/nuclearsandwich,[Dashing] Wrap lines to shorten line length.,1,[],https://github.com/ros2/rclpy/pull/597,https://github.com/nuclearsandwich,3,https://github.com/ros2/rclpy/pull/597#issuecomment-656876744,"Backports #586 but does not include the f-string change since they are not available in Dashing's minimum supported Python version, 3.5.","The second commit in #590 already made sure that the code passed the linter?

Does that mean this PR is spurious and I can drop 586 from the board of things that need backporting?",True,{'THUMBS_UP': ['https://github.com/dirk-thomas']}
ros2/rclpy,https://github.com/ros2/rclpy,597,2020-07-10T20:10:21Z,2020-07-10T20:34:12Z,2020-07-10T20:34:17Z,CLOSED,False,5,4,1,https://github.com/nuclearsandwich,[Dashing] Wrap lines to shorten line length.,1,[],https://github.com/ros2/rclpy/pull/597,https://github.com/dirk-thomas,4,https://github.com/ros2/rclpy/pull/597#issuecomment-656877302,"Backports #586 but does not include the f-string change since they are not available in Dashing's minimum supported Python version, 3.5.",Assuming that CI for Dashing already passes I would think this backport is not necessary anymore.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,597,2020-07-10T20:10:21Z,2020-07-10T20:34:12Z,2020-07-10T20:34:17Z,CLOSED,False,5,4,1,https://github.com/nuclearsandwich,[Dashing] Wrap lines to shorten line length.,1,[],https://github.com/ros2/rclpy/pull/597,https://github.com/nuclearsandwich,5,https://github.com/ros2/rclpy/pull/597#issuecomment-656877642,"Backports #586 but does not include the f-string change since they are not available in Dashing's minimum supported Python version, 3.5.",http://build.ros2.org/view/Ddev/job/Ddev__rclpy__ubuntu_bionic_amd64/70/ is happy so I am happy.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,598,2020-07-14T00:20:05Z,2020-08-24T19:39:48Z,2020-08-24T19:39:49Z,MERGED,True,121,0,3,https://github.com/crystaldust,Node get fully qualified name,3,[],https://github.com/ros2/rclpy/pull/598,https://github.com/crystaldust,1,https://github.com/ros2/rclpy/pull/598,"Add the binding to c function rcl_node_get_fully_qualified_name, which will be used in the composition API. Refer to the cpp implementation:
https://github.com/ros2/rclcpp/blob/9a7e33f3b18dcc631fb36a0806a4868384e19477/rclcpp_components/src/component_manager.cpp#L214","Add the binding to c function rcl_node_get_fully_qualified_name, which will be used in the composition API. Refer to the cpp implementation:
https://github.com/ros2/rclcpp/blob/9a7e33f3b18dcc631fb36a0806a4868384e19477/rclcpp_components/src/component_manager.cpp#L214",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,598,2020-07-14T00:20:05Z,2020-08-24T19:39:48Z,2020-08-24T19:39:49Z,MERGED,True,121,0,3,https://github.com/crystaldust,Node get fully qualified name,3,[],https://github.com/ros2/rclpy/pull/598,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/598#issuecomment-679298106,"Add the binding to c function rcl_node_get_fully_qualified_name, which will be used in the composition API. Refer to the cpp implementation:
https://github.com/ros2/rclcpp/blob/9a7e33f3b18dcc631fb36a0806a4868384e19477/rclcpp_components/src/component_manager.cpp#L214","CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,598,2020-07-14T00:20:05Z,2020-08-24T19:39:48Z,2020-08-24T19:39:49Z,MERGED,True,121,0,3,https://github.com/crystaldust,Node get fully qualified name,3,[],https://github.com/ros2/rclpy/pull/598,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/598#issuecomment-679326272,"Add the binding to c function rcl_node_get_fully_qualified_name, which will be used in the composition API. Refer to the cpp implementation:
https://github.com/ros2/rclcpp/blob/9a7e33f3b18dcc631fb36a0806a4868384e19477/rclcpp_components/src/component_manager.cpp#L214",CI LGTM! Thanks for the enhancement @crystaldust and thanks for the reviews @fujitatomoya 🎉,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,599,2020-07-14T16:04:15Z,,2022-06-02T18:52:37Z,OPEN,False,660,0,15,https://github.com/crystaldust,Composition API,5,[],https://github.com/ros2/rclpy/pull/599,https://github.com/crystaldust,1,https://github.com/ros2/rclpy/pull/599,"The composition API for rclpy.
Add a new rclpy_components sub project just like what rclcpp_components does. The project provides the component manager(essentially a wrapper of Node and executor), which provides the required services described in the composition design doc for the ros2cli to load/unload/list components
Related PR: ros2/ros2cli#554","The composition API for rclpy.
Add a new rclpy_components sub project just like what rclcpp_components does. The project provides the component manager(essentially a wrapper of Node and executor), which provides the required services described in the composition design doc for the ros2cli to load/unload/list components
Related PR: ros2/ros2cli#554",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,599,2020-07-14T16:04:15Z,,2022-06-02T18:52:37Z,OPEN,False,660,0,15,https://github.com/crystaldust,Composition API,5,[],https://github.com/ros2/rclpy/pull/599,https://github.com/crystaldust,2,https://github.com/ros2/rclpy/pull/599#issuecomment-658276356,"The composition API for rclpy.
Add a new rclpy_components sub project just like what rclcpp_components does. The project provides the component manager(essentially a wrapper of Node and executor), which provides the required services described in the composition design doc for the ros2cli to load/unload/list components
Related PR: ros2/ros2cli#554","Missing features/TODO list records:

 The supported_types service(discussed here), need a discussion on where to put this service, put it in the composition_interfaces package, or just the rclpy package.
 Need some essential test cases",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,599,2020-07-14T16:04:15Z,,2022-06-02T18:52:37Z,OPEN,False,660,0,15,https://github.com/crystaldust,Composition API,5,[],https://github.com/ros2/rclpy/pull/599,https://github.com/crystaldust,3,https://github.com/ros2/rclpy/pull/599#issuecomment-683402925,"The composition API for rclpy.
Add a new rclpy_components sub project just like what rclcpp_components does. The project provides the component manager(essentially a wrapper of Node and executor), which provides the required services described in the composition design doc for the ros2cli to load/unload/list components
Related PR: ros2/ros2cli#554",Thanks for the review! Just get myself back to work after a LONG business travel. I'll look into the code and make some fixes/improvments,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,599,2020-07-14T16:04:15Z,,2022-06-02T18:52:37Z,OPEN,False,660,0,15,https://github.com/crystaldust,Composition API,5,[],https://github.com/ros2/rclpy/pull/599,https://github.com/crystaldust,4,https://github.com/ros2/rclpy/pull/599#issuecomment-711967202,"The composition API for rclpy.
Add a new rclpy_components sub project just like what rclcpp_components does. The project provides the component manager(essentially a wrapper of Node and executor), which provides the required services described in the composition design doc for the ros2cli to load/unload/list components
Related PR: ros2/ros2cli#554","@jacobperron Hi, I've made some changes following the reviews, make a list here for better track:

 Remove the unnecessary spin in ComponentManager's __init__ method
 Make up the meta data in package.xml and setup.py, like author info, desc, version, license etc
 Surround spin with try-catch, instead of creating a shadow _main function
 Call component manager's destroy node when exiting program
 Use the node's logger instead of creating a new global one
 Use f string for logging
 Return error message in response instead of logging it
 Use request.id(type integer) as ComponentManager's components member as key

Also with the basic unit/integrated test code added. Let's first make this PR merged and then move to next PRs related to ros2cli and examples",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,599,2020-07-14T16:04:15Z,,2022-06-02T18:52:37Z,OPEN,False,660,0,15,https://github.com/crystaldust,Composition API,5,[],https://github.com/ros2/rclpy/pull/599,https://github.com/buschbapti,5,https://github.com/ros2/rclpy/pull/599#issuecomment-884241934,"The composition API for rclpy.
Add a new rclpy_components sub project just like what rclcpp_components does. The project provides the component manager(essentially a wrapper of Node and executor), which provides the required services described in the composition design doc for the ros2cli to load/unload/list components
Related PR: ros2/ros2cli#554",Any update on this? We have the need for launching python components and having that integrated would be very neat.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,599,2020-07-14T16:04:15Z,,2022-06-02T18:52:37Z,OPEN,False,660,0,15,https://github.com/crystaldust,Composition API,5,[],https://github.com/ros2/rclpy/pull/599,https://github.com/crystaldust,6,https://github.com/ros2/rclpy/pull/599#issuecomment-887144805,"The composition API for rclpy.
Add a new rclpy_components sub project just like what rclcpp_components does. The project provides the component manager(essentially a wrapper of Node and executor), which provides the required services described in the composition design doc for the ros2cli to load/unload/list components
Related PR: ros2/ros2cli#554",@buschbapti Thanks for the attention. I'll make a recheck on this and see if it can be merged ASAP.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,599,2020-07-14T16:04:15Z,,2022-06-02T18:52:37Z,OPEN,False,660,0,15,https://github.com/crystaldust,Composition API,5,[],https://github.com/ros2/rclpy/pull/599,https://github.com/buschbapti,7,https://github.com/ros2/rclpy/pull/599#issuecomment-887298065,"The composition API for rclpy.
Add a new rclpy_components sub project just like what rclcpp_components does. The project provides the component manager(essentially a wrapper of Node and executor), which provides the required services described in the composition design doc for the ros2cli to load/unload/list components
Related PR: ros2/ros2cli#554",I copied your rclpy_components to make this work in our application. Everything runs smoothly but I needed to change the get_fully_qualified_node_name line. Either this function has been deleted in the latest version (galactic) or is not integrated yet.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,599,2020-07-14T16:04:15Z,,2022-06-02T18:52:37Z,OPEN,False,660,0,15,https://github.com/crystaldust,Composition API,5,[],https://github.com/ros2/rclpy/pull/599,https://github.com/alpylmz,8,https://github.com/ros2/rclpy/pull/599#issuecomment-1113454711,"The composition API for rclpy.
Add a new rclpy_components sub project just like what rclcpp_components does. The project provides the component manager(essentially a wrapper of Node and executor), which provides the required services described in the composition design doc for the ros2cli to load/unload/list components
Related PR: ros2/ros2cli#554",This seems to be an important feature and it is almost done! Any update on this?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,599,2020-07-14T16:04:15Z,,2022-06-02T18:52:37Z,OPEN,False,660,0,15,https://github.com/crystaldust,Composition API,5,[],https://github.com/ros2/rclpy/pull/599,https://github.com/SteveMacenski,9,https://github.com/ros2/rclpy/pull/599#issuecomment-1135255219,"The composition API for rclpy.
Add a new rclpy_components sub project just like what rclcpp_components does. The project provides the component manager(essentially a wrapper of Node and executor), which provides the required services described in the composition design doc for the ros2cli to load/unload/list components
Related PR: ros2/ros2cli#554",+1,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,599,2020-07-14T16:04:15Z,,2022-06-02T18:52:37Z,OPEN,False,660,0,15,https://github.com/crystaldust,Composition API,5,[],https://github.com/ros2/rclpy/pull/599,https://github.com/ihasdapie,10,https://github.com/ros2/rclpy/pull/599#issuecomment-1145202816,"The composition API for rclpy.
Add a new rclpy_components sub project just like what rclcpp_components does. The project provides the component manager(essentially a wrapper of Node and executor), which provides the required services described in the composition design doc for the ros2cli to load/unload/list components
Related PR: ros2/ros2cli#554",@crystaldust Are you still working on this? If not I'd be take over and help push this PR through.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,601,2020-07-15T17:56:08Z,2020-07-15T20:58:04Z,2020-07-15T20:58:08Z,MERGED,True,14,14,1,https://github.com/ivanpauno,Default incompatible qos callback should be set when there's no user specified callback,1,['bug'],https://github.com/ros2/rclpy/pull/601,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/601,"It's currently being set when there's no user specified ""message lost"" callback, which doesn't make sense.
The regression was introduced in #572.
Partially addresses #588.
There's another failure in the same test file, but not related to this one.","It's currently being set when there's no user specified ""message lost"" callback, which doesn't make sense.
The regression was introduced in #572.
Partially addresses #588.
There's another failure in the same test file, but not related to this one.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,601,2020-07-15T17:56:08Z,2020-07-15T20:58:04Z,2020-07-15T20:58:08Z,MERGED,True,14,14,1,https://github.com/ivanpauno,Default incompatible qos callback should be set when there's no user specified callback,1,['bug'],https://github.com/ros2/rclpy/pull/601,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/601#issuecomment-658993809,"It's currently being set when there's no user specified ""message lost"" callback, which doesn't make sense.
The regression was introduced in #572.
Partially addresses #588.
There's another failure in the same test file, but not related to this one.",Linux,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,601,2020-07-15T17:56:08Z,2020-07-15T20:58:04Z,2020-07-15T20:58:08Z,MERGED,True,14,14,1,https://github.com/ivanpauno,Default incompatible qos callback should be set when there's no user specified callback,1,['bug'],https://github.com/ros2/rclpy/pull/601,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/601#issuecomment-659006034,"It's currently being set when there's no user specified ""message lost"" callback, which doesn't make sense.
The regression was introduced in #572.
Partially addresses #588.
There's another failure in the same test file, but not related to this one.","Failures are matching the ones in http://build.ros2.org/view/Fci/job/Fci__nightly-cyclonedds_ubuntu_focal_amd64/162, and unrelated to this PR.
#603 will complete the fix.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,602,2020-07-15T18:16:53Z,2020-07-15T20:56:43Z,2020-07-15T20:56:47Z,MERGED,True,4,3,1,https://github.com/dirk-thomas,relax rate jitter test for individual periods,1,['bug'],https://github.com/ros2/rclpy/pull/602,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/602,"Fixes #513.
The test uses a timer with a rate of 100ms and expected each and every period to not have a jitter of more than 10ms. On a non-realtime system (especially Windows) that isn't a realistic expectation. Therefore this test has been flaky for a while: https://ci.ros2.org/view/nightly/job/nightly_win_rel/1613/testReport/rclpy.rclpy.test.test_rate/TestRate/test_rate_valid_period/
The patch continues to check for a maximum jitter of 10ms over the average of all deltas: abs(runner.avg_period - PERIOD) <= PASS_MAX_AVERAGE_JITTER. If there are some outliers the average should still be close.
But the check for the biggest individual delta is relaxed from 10ms to 25ms since checking for 10ms on each period is more of a performance test (which isn't satisfies across all platforms all the time): runner.max_jitter <= PASS_MAX_SINGLE_JITTER
The usual CI builds testing only rclpy:

Linux 
Linux-aarch64 
macOS 
Windows 

And an extra retest-until fail 3 on Windows Release:","Fixes #513.
The test uses a timer with a rate of 100ms and expected each and every period to not have a jitter of more than 10ms. On a non-realtime system (especially Windows) that isn't a realistic expectation. Therefore this test has been flaky for a while: https://ci.ros2.org/view/nightly/job/nightly_win_rel/1613/testReport/rclpy.rclpy.test.test_rate/TestRate/test_rate_valid_period/
The patch continues to check for a maximum jitter of 10ms over the average of all deltas: abs(runner.avg_period - PERIOD) <= PASS_MAX_AVERAGE_JITTER. If there are some outliers the average should still be close.
But the check for the biggest individual delta is relaxed from 10ms to 25ms since checking for 10ms on each period is more of a performance test (which isn't satisfies across all platforms all the time): runner.max_jitter <= PASS_MAX_SINGLE_JITTER
The usual CI builds testing only rclpy:

Linux 
Linux-aarch64 
macOS 
Windows 

And an extra retest-until fail 3 on Windows Release:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,603,2020-07-15T20:52:27Z,2020-07-16T20:42:16Z,2020-07-16T20:42:22Z,MERGED,True,15,3,4,https://github.com/ivanpauno,Destroy event handlers owned by publishers/subscriptions when calling publisher.destroy()/subscription.destroy(),6,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/603,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/603,"The other half of #601 to completely fix #588.
The assumption in comment 
  
    
      rclpy/rclpy/test/test_qos_event.py
    
    
        Lines 271 to 272
      in
      be1deb6
    
  
  
    

        
          
           # We live in our own namespace and have created no other participants, so 
        

        
          
           # there can't be any of these events. 
        
    
  

 was wrong because some of the objects created in the previous test cases were still around.","The other half of #601 to completely fix #588.
The assumption in comment 
  
    
      rclpy/rclpy/test/test_qos_event.py
    
    
        Lines 271 to 272
      in
      be1deb6
    
  
  
    

        
          
           # We live in our own namespace and have created no other participants, so 
        

        
          
           # there can't be any of these events. 
        
    
  

 was wrong because some of the objects created in the previous test cases were still around.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,603,2020-07-15T20:52:27Z,2020-07-16T20:42:16Z,2020-07-16T20:42:22Z,MERGED,True,15,3,4,https://github.com/ivanpauno,Destroy event handlers owned by publishers/subscriptions when calling publisher.destroy()/subscription.destroy(),6,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/603,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/603#issuecomment-659007860,"The other half of #601 to completely fix #588.
The assumption in comment 
  
    
      rclpy/rclpy/test/test_qos_event.py
    
    
        Lines 271 to 272
      in
      be1deb6
    
  
  
    

        
          
           # We live in our own namespace and have created no other participants, so 
        

        
          
           # there can't be any of these events. 
        
    
  

 was wrong because some of the objects created in the previous test cases were still around.","Linux  (failure reported in #601 is gone, the other failure is unrelated an preexisting)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,603,2020-07-15T20:52:27Z,2020-07-16T20:42:16Z,2020-07-16T20:42:22Z,MERGED,True,15,3,4,https://github.com/ivanpauno,Destroy event handlers owned by publishers/subscriptions when calling publisher.destroy()/subscription.destroy(),6,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/603,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/603#issuecomment-659043314,"The other half of #601 to completely fix #588.
The assumption in comment 
  
    
      rclpy/rclpy/test/test_qos_event.py
    
    
        Lines 271 to 272
      in
      be1deb6
    
  
  
    

        
          
           # We live in our own namespace and have created no other participants, so 
        

        
          
           # there can't be any of these events. 
        
    
  

 was wrong because some of the objects created in the previous test cases were still around.",Linux,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,603,2020-07-15T20:52:27Z,2020-07-16T20:42:16Z,2020-07-16T20:42:22Z,MERGED,True,15,3,4,https://github.com/ivanpauno,Destroy event handlers owned by publishers/subscriptions when calling publisher.destroy()/subscription.destroy(),6,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/603,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/603#issuecomment-659389862,"The other half of #601 to completely fix #588.
The assumption in comment 
  
    
      rclpy/rclpy/test/test_qos_event.py
    
    
        Lines 271 to 272
      in
      be1deb6
    
  
  
    

        
          
           # We live in our own namespace and have created no other participants, so 
        

        
          
           # there can't be any of these events. 
        
    
  

 was wrong because some of the objects created in the previous test cases were still around.","Change seems reasonable to me, but the test failures seem odd. At least, I don't see test_waitable_with_timer failing in the nightly Linux. @ivanpauno any thoughts?

That test is extremely unrelated, so it's maybe flaky.
I'm testing here only rmw_cyclonedds which is not the usual nightly conditions (the reported bug #588 didn't happen in nightlies).
I cannot find a similar failure in the only cyclonedds job in buld.ros2.org, so I will investigate a bit more before merging.

Linux  (including fastrtps)
Linux   (only cyclone)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,603,2020-07-15T20:52:27Z,2020-07-16T20:42:16Z,2020-07-16T20:42:22Z,MERGED,True,15,3,4,https://github.com/ivanpauno,Destroy event handlers owned by publishers/subscriptions when calling publisher.destroy()/subscription.destroy(),6,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/603,https://github.com/ivanpauno,5,https://github.com/ros2/rclpy/pull/603#issuecomment-659390047,"The other half of #601 to completely fix #588.
The assumption in comment 
  
    
      rclpy/rclpy/test/test_qos_event.py
    
    
        Lines 271 to 272
      in
      be1deb6
    
  
  
    

        
          
           # We live in our own namespace and have created no other participants, so 
        

        
          
           # there can't be any of these events. 
        
    
  

 was wrong because some of the objects created in the previous test cases were still around.",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,603,2020-07-15T20:52:27Z,2020-07-16T20:42:16Z,2020-07-16T20:42:22Z,MERGED,True,15,3,4,https://github.com/ivanpauno,Destroy event handlers owned by publishers/subscriptions when calling publisher.destroy()/subscription.destroy(),6,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/603,https://github.com/ivanpauno,6,https://github.com/ros2/rclpy/pull/603#issuecomment-659411234,"The other half of #601 to completely fix #588.
The assumption in comment 
  
    
      rclpy/rclpy/test/test_qos_event.py
    
    
        Lines 271 to 272
      in
      be1deb6
    
  
  
    

        
          
           # We live in our own namespace and have created no other participants, so 
        

        
          
           # there can't be any of these events. 
        
    
  

 was wrong because some of the objects created in the previous test cases were still around.","That test is extremely unrelated, so it's maybe flaky.

It seems to be related actually 😕",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,603,2020-07-15T20:52:27Z,2020-07-16T20:42:16Z,2020-07-16T20:42:22Z,MERGED,True,15,3,4,https://github.com/ivanpauno,Destroy event handlers owned by publishers/subscriptions when calling publisher.destroy()/subscription.destroy(),6,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/603,https://github.com/ivanpauno,7,https://github.com/ros2/rclpy/pull/603#issuecomment-659445879,"The other half of #601 to completely fix #588.
The assumption in comment 
  
    
      rclpy/rclpy/test/test_qos_event.py
    
    
        Lines 271 to 272
      in
      be1deb6
    
  
  
    

        
          
           # We live in our own namespace and have created no other participants, so 
        

        
          
           # there can't be any of these events. 
        
    
  

 was wrong because some of the objects created in the previous test cases were still around.","Ok, I think I've got it right now:

Linux   (only cyclonedds)

edit: Updated after last commit",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,603,2020-07-15T20:52:27Z,2020-07-16T20:42:16Z,2020-07-16T20:42:22Z,MERGED,True,15,3,4,https://github.com/ivanpauno,Destroy event handlers owned by publishers/subscriptions when calling publisher.destroy()/subscription.destroy(),6,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/603,https://github.com/clalancette,8,https://github.com/ros2/rclpy/pull/603#issuecomment-659455909,"The other half of #601 to completely fix #588.
The assumption in comment 
  
    
      rclpy/rclpy/test/test_qos_event.py
    
    
        Lines 271 to 272
      in
      be1deb6
    
  
  
    

        
          
           # We live in our own namespace and have created no other participants, so 
        

        
          
           # there can't be any of these events. 
        
    
  

 was wrong because some of the objects created in the previous test cases were still around.","This is looking good.  However, there is enough change in here that I'll suggest a more thorough test before merging.  I think we should run CI on all platforms and test with --packages-above rclpy just to make sure there isn't something else lurking out there.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,603,2020-07-15T20:52:27Z,2020-07-16T20:42:16Z,2020-07-16T20:42:22Z,MERGED,True,15,3,4,https://github.com/ivanpauno,Destroy event handlers owned by publishers/subscriptions when calling publisher.destroy()/subscription.destroy(),6,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/603,https://github.com/ivanpauno,9,https://github.com/ros2/rclpy/pull/603#issuecomment-659488050,"The other half of #601 to completely fix #588.
The assumption in comment 
  
    
      rclpy/rclpy/test/test_qos_event.py
    
    
        Lines 271 to 272
      in
      be1deb6
    
  
  
    

        
          
           # We live in our own namespace and have created no other participants, so 
        

        
          
           # there can't be any of these events. 
        
    
  

 was wrong because some of the objects created in the previous test cases were still around.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,603,2020-07-15T20:52:27Z,2020-07-16T20:42:16Z,2020-07-16T20:42:22Z,MERGED,True,15,3,4,https://github.com/ivanpauno,Destroy event handlers owned by publishers/subscriptions when calling publisher.destroy()/subscription.destroy(),6,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/603,https://github.com/ivanpauno,10,https://github.com/ros2/rclpy/pull/603#issuecomment-659609711,"The other half of #601 to completely fix #588.
The assumption in comment 
  
    
      rclpy/rclpy/test/test_qos_event.py
    
    
        Lines 271 to 272
      in
      be1deb6
    
  
  
    

        
          
           # We live in our own namespace and have created no other participants, so 
        

        
          
           # there can't be any of these events. 
        
    
  

 was wrong because some of the objects created in the previous test cases were still around.","@clalancette the failing windows build is due to a bug in rosbag (nightlies did fail too).
I think this is safe to merge now, it's highly unlikely that this behavior is platform dependent.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,605,2020-07-20T16:43:04Z,2020-08-11T20:40:13Z,2020-11-20T19:30:44Z,MERGED,True,47,6,1,https://github.com/ivanpauno,MultiThreadedExecutor spin_until_future complete should not continue waiting when the future is done,8,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/605,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/605,Fixes #585.,Fixes #585.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,605,2020-07-20T16:43:04Z,2020-08-11T20:40:13Z,2020-11-20T19:30:44Z,MERGED,True,47,6,1,https://github.com/ivanpauno,MultiThreadedExecutor spin_until_future complete should not continue waiting when the future is done,8,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/605,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/605#issuecomment-661878959,Fixes #585.,"My original approach was incorrect as executor.wake should be called when the future is done.
I was going to simply add a done callback to the future that would call executor.wake(), but that didn't work because the executor isn't waken when a guard condition is triggered.
@sloretz was that intentional? IMO, wait_for_ready_callbacks should return when a guard condition was triggered, and not continue waiting for work.
For the moment, I have fixed the issue by adding an artificial ""condition"" argument to wait_for_ready_callbacks.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,605,2020-07-20T16:43:04Z,2020-08-11T20:40:13Z,2020-11-20T19:30:44Z,MERGED,True,47,6,1,https://github.com/ivanpauno,MultiThreadedExecutor spin_until_future complete should not continue waiting when the future is done,8,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/605,https://github.com/hidmic,3,https://github.com/ros2/rclpy/pull/605#issuecomment-662073445,Fixes #585.,"I was going to simply add a done callback to the future that would call executor.wake(), but that didn't work because the executor isn't waken when a guard condition is triggered.
@sloretz was that intentional? IMO, wait_for_ready_callbacks should return when a guard condition was triggered, and not continue waiting for work.

I second this question. To trigger a guard condition seems like the ""natural"" solution for this problem to me too.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,605,2020-07-20T16:43:04Z,2020-08-11T20:40:13Z,2020-11-20T19:30:44Z,MERGED,True,47,6,1,https://github.com/ivanpauno,MultiThreadedExecutor spin_until_future complete should not continue waiting when the future is done,8,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/605,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/605#issuecomment-663771463,Fixes #585.,"I was going to simply add a done callback to the future that would call executor.wake(), but that didn't work because the executor isn't waken when a guard condition is triggered.
@sloretz was that intentional? IMO, wait_for_ready_callbacks should return when a guard condition was triggered, and not continue waiting for work.

It's intentional. User created guard conditions count as work, while the internal guard condition does not count as work. Executor.wake() tells the executor to wake up so it can reexamine the entities it's waiting for work on. For example, this tells the executor to wake once when the data was taken from the rmw layer so the same entity can be added back to the wait list, but no actual work has been done.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,605,2020-07-20T16:43:04Z,2020-08-11T20:40:13Z,2020-11-20T19:30:44Z,MERGED,True,47,6,1,https://github.com/ivanpauno,MultiThreadedExecutor spin_until_future complete should not continue waiting when the future is done,8,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/605,https://github.com/ivanpauno,5,https://github.com/ros2/rclpy/pull/605#issuecomment-664392934,Fixes #585.,"It's intentional. User created guard conditions count as work, while the internal guard condition does not count as work.

Thanks for clarifying, I didn't realize of the difference.

Executor.wake() tells the executor to wake up so it can reexamine the entities it's waiting for work on. For example, this tells the executor to wake once when the data was taken from the rmw layer so the same entity can be added back to the wait list, but no actual work has been done.

That makes sense, but I wouldn't call the method wake.
wake sounds like the executor is actually waking up (stopping to spin).
I would use something like refresh_entities, or similar.
Should we have both alternatives?
I think that with one internal guard condition and an extra flag we can achieve both behaviors.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,605,2020-07-20T16:43:04Z,2020-08-11T20:40:13Z,2020-11-20T19:30:44Z,MERGED,True,47,6,1,https://github.com/ivanpauno,MultiThreadedExecutor spin_until_future complete should not continue waiting when the future is done,8,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/605,https://github.com/ivanpauno,6,https://github.com/ros2/rclpy/pull/605#issuecomment-669240105,Fixes #585.,@sloretz friendly ping,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,605,2020-07-20T16:43:04Z,2020-08-11T20:40:13Z,2020-11-20T19:30:44Z,MERGED,True,47,6,1,https://github.com/ivanpauno,MultiThreadedExecutor spin_until_future complete should not continue waiting when the future is done,8,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/605,https://github.com/ivanpauno,7,https://github.com/ros2/rclpy/pull/605#issuecomment-671337360,Fixes #585.,"Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,605,2020-07-20T16:43:04Z,2020-08-11T20:40:13Z,2020-11-20T19:30:44Z,MERGED,True,47,6,1,https://github.com/ivanpauno,MultiThreadedExecutor spin_until_future complete should not continue waiting when the future is done,8,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/605,https://github.com/ivanpauno,8,https://github.com/ros2/rclpy/pull/605#issuecomment-672214141,Fixes #585.,"CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,605,2020-07-20T16:43:04Z,2020-08-11T20:40:13Z,2020-11-20T19:30:44Z,MERGED,True,47,6,1,https://github.com/ivanpauno,MultiThreadedExecutor spin_until_future complete should not continue waiting when the future is done,8,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/605,https://github.com/ivanpauno,9,https://github.com/ros2/rclpy/pull/605#issuecomment-672268075,Fixes #585.,"@sloretz let me know if you have any comments about this #605 (comment), maybe we can simplify this in a follow up.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,605,2020-07-20T16:43:04Z,2020-08-11T20:40:13Z,2020-11-20T19:30:44Z,MERGED,True,47,6,1,https://github.com/ivanpauno,MultiThreadedExecutor spin_until_future complete should not continue waiting when the future is done,8,"['bug', 'in review']",https://github.com/ros2/rclpy/pull/605,https://github.com/nuclearsandwich,10,https://github.com/ros2/rclpy/pull/605#issuecomment-731365827,Fixes #585.,I don't believe any backports have been opened for this PR yet so I am bumping it from patch release 8 for Dashing.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,606,2020-07-21T06:50:21Z,2020-07-21T13:55:32Z,2020-07-21T13:55:33Z,CLOSED,False,14,2,1,https://github.com/fujitatomoya,MultiThreadedExecutor spin_until_future complete should return once future is done,1,[],https://github.com/ros2/rclpy/pull/606,https://github.com/fujitatomoya,1,https://github.com/ros2/rclpy/pull/606,"proposal fix for #585
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com","proposal fix for #585
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,606,2020-07-21T06:50:21Z,2020-07-21T13:55:32Z,2020-07-21T13:55:33Z,CLOSED,False,14,2,1,https://github.com/fujitatomoya,MultiThreadedExecutor spin_until_future complete should return once future is done,1,[],https://github.com/ros2/rclpy/pull/606,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/606#issuecomment-661672163,"proposal fix for #585
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com","@ivanpauno
what about using single thread for spin_until_future_complete()? I think that this fix aligned with rclcpp. at least this can fix the problem.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,606,2020-07-21T06:50:21Z,2020-07-21T13:55:32Z,2020-07-21T13:55:33Z,CLOSED,False,14,2,1,https://github.com/fujitatomoya,MultiThreadedExecutor spin_until_future complete should return once future is done,1,[],https://github.com/ros2/rclpy/pull/606,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/606#issuecomment-661845585,"proposal fix for #585
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com","I think that trying the multithreaded approach is better, it's definitely possible to fix the current error.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,606,2020-07-21T06:50:21Z,2020-07-21T13:55:32Z,2020-07-21T13:55:33Z,CLOSED,False,14,2,1,https://github.com/fujitatomoya,MultiThreadedExecutor spin_until_future complete should return once future is done,1,[],https://github.com/ros2/rclpy/pull/606,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/606#issuecomment-661876613,"proposal fix for #585
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com","Closing, as the idea is to make actual usage of the multithreaded capability in spin_until_future_complete.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,610,2020-08-01T00:43:25Z,2020-08-07T13:43:58Z,2020-08-07T13:43:59Z,MERGED,True,11,45,3,https://github.com/emersonknapp,Use the rpyutils shared import_c_library function.,2,[],https://github.com/ros2/rclpy/pull/610,https://github.com/emersonknapp,1,https://github.com/ros2/rclpy/pull/610,"Depends on ros2/rpyutils#4
Related to ros2/rosbag2#445
Uses the new function that has been moved to rpyutils","Depends on ros2/rpyutils#4
Related to ros2/rosbag2#445
Uses the new function that has been moved to rpyutils",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,610,2020-08-01T00:43:25Z,2020-08-07T13:43:58Z,2020-08-07T13:43:59Z,MERGED,True,11,45,3,https://github.com/emersonknapp,Use the rpyutils shared import_c_library function.,2,[],https://github.com/ros2/rclpy/pull/610,https://github.com/emersonknapp,2,https://github.com/ros2/rclpy/pull/610#issuecomment-669583726,"Depends on ros2/rpyutils#4
Related to ros2/rosbag2#445
Uses the new function that has been moved to rpyutils","using https://gist.githubusercontent.com/emersonknapp/03048af0c22cf44348e76a3da1e1dd1b/raw/5fc3c523f2e6446a0d7e941d7cff9d90c13f4eaa/ros2.repos


Linux 


Linux-aarch64 


macOS 


Windows 


Windows (re-triggered to check for flaky test) 


Windows Debug 


Since library loading can sometimes misbehave on Windows Debug, added a CI run specifically testing it.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,612,2020-08-03T19:24:02Z,2020-08-04T01:40:47Z,2020-08-04T01:40:50Z,MERGED,True,1,1,1,https://github.com/ivanpauno,Use absolute parameter events topic name,1,['enhancement'],https://github.com/ros2/rclpy/pull/612,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/612,Follow up of ros2/rclcpp#929.,Follow up of ros2/rclcpp#929.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,612,2020-08-03T19:24:02Z,2020-08-04T01:40:47Z,2020-08-04T01:40:50Z,MERGED,True,1,1,1,https://github.com/ivanpauno,Use absolute parameter events topic name,1,['enhancement'],https://github.com/ros2/rclpy/pull/612,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/612#issuecomment-668212827,Follow up of ros2/rclcpp#929.,"Sorry, missed this before opening my own (#613)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,612,2020-08-03T19:24:02Z,2020-08-04T01:40:47Z,2020-08-04T01:40:50Z,MERGED,True,1,1,1,https://github.com/ivanpauno,Use absolute parameter events topic name,1,['enhancement'],https://github.com/ros2/rclpy/pull/612,https://github.com/jacobperron,3,https://github.com/ros2/rclpy/pull/612#issuecomment-668213698,Follow up of ros2/rclcpp#929.,"Note, I've already triggered a full CI run (together with the rclcpp change):

Linux 
Linux-aarch64 
macOS 
Windows  (unrelated test failures in rcl)",True,{'THUMBS_UP': ['https://github.com/ivanpauno']}
ros2/rclpy,https://github.com/ros2/rclpy,613,2020-08-03T19:35:23Z,2020-08-03T19:58:39Z,2020-08-05T16:28:31Z,CLOSED,False,1,1,1,https://github.com/jacobperron,Use global namespace for parameter events topic,1,[],https://github.com/ros2/rclpy/pull/613,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/613,"Similar to ros2/rclcpp#929.
As a side note, it appears we've implemented a parameter service in rclpy, but not a parameter client. I couldn't find any ticket tracking the addition of a parameter client, but perhaps it's something to consider adding. It might be a good ticket for ""help wanted"". @sloretz what do you think?","Similar to ros2/rclcpp#929.
As a side note, it appears we've implemented a parameter service in rclpy, but not a parameter client. I couldn't find any ticket tracking the addition of a parameter client, but perhaps it's something to consider adding. It might be a good ticket for ""help wanted"". @sloretz what do you think?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,613,2020-08-03T19:35:23Z,2020-08-03T19:58:39Z,2020-08-05T16:28:31Z,CLOSED,False,1,1,1,https://github.com/jacobperron,Use global namespace for parameter events topic,1,[],https://github.com/ros2/rclpy/pull/613,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/613#issuecomment-668213287,"Similar to ros2/rclcpp#929.
As a side note, it appears we've implemented a parameter service in rclpy, but not a parameter client. I couldn't find any ticket tracking the addition of a parameter client, but perhaps it's something to consider adding. It might be a good ticket for ""help wanted"". @sloretz what do you think?",Duplicates #612,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,614,2020-08-06T16:40:31Z,2020-11-06T17:36:48Z,2020-11-06T17:36:52Z,MERGED,True,1,1,1,https://github.com/jacobperron,[foxy backport] Use absolute parameter events topic name (#612),1,['bug'],https://github.com/ros2/rclpy/pull/614,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/614,Backport #612 to Foxy.,Backport #612 to Foxy.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,614,2020-08-06T16:40:31Z,2020-11-06T17:36:48Z,2020-11-06T17:36:52Z,MERGED,True,1,1,1,https://github.com/jacobperron,[foxy backport] Use absolute parameter events topic name (#612),1,['bug'],https://github.com/ros2/rclpy/pull/614,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/614#issuecomment-702314218,Backport #612 to Foxy.,"Linux 
Linux-aarch64 
macOS  (unrelated failures)
Windows  (edit: retriggered)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,614,2020-08-06T16:40:31Z,2020-11-06T17:36:48Z,2020-11-06T17:36:52Z,MERGED,True,1,1,1,https://github.com/jacobperron,[foxy backport] Use absolute parameter events topic name (#612),1,['bug'],https://github.com/ros2/rclpy/pull/614,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/614#issuecomment-722485745,Backport #612 to Foxy.,@jacobperron are the windows CI failures unrelated too?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,614,2020-08-06T16:40:31Z,2020-11-06T17:36:48Z,2020-11-06T17:36:52Z,MERGED,True,1,1,1,https://github.com/jacobperron,[foxy backport] Use absolute parameter events topic name (#612),1,['bug'],https://github.com/ros2/rclpy/pull/614,https://github.com/jacobperron,4,https://github.com/ros2/rclpy/pull/614#issuecomment-722538255,Backport #612 to Foxy.,"I'm not sure about the Windows failures, triggering a regular Foxy job for comparison:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,614,2020-08-06T16:40:31Z,2020-11-06T17:36:48Z,2020-11-06T17:36:52Z,MERGED,True,1,1,1,https://github.com/jacobperron,[foxy backport] Use absolute parameter events topic name (#612),1,['bug'],https://github.com/ros2/rclpy/pull/614,https://github.com/jacobperron,5,https://github.com/ros2/rclpy/pull/614#issuecomment-723207779,Backport #612 to Foxy.,"I'm pretty sure all the windows failures are unrelated. The only one that I don't recall seeing before is this demo_nodes_cpp failure, but it looks like timeouts in the demo_nodes_cpp tests have happened recently on Windows with Connext: https://ci.ros2.org/view/nightly/job/nightly_win_rep/2055/testReport/junit/demo_nodes_cpp/TestExecutablesTutorial/test_processes_output/",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,615,2020-08-10T23:39:49Z,2020-08-11T05:12:53Z,2020-08-11T05:13:05Z,MERGED,True,10,0,2,https://github.com/dirk-thomas,skip test relying on source timestamps with Connext,1,['bug'],https://github.com/ros2/rclpy/pull/615,https://github.com/dirk-thomas,1,https://github.com/ros2/rclpy/pull/615,"Skip test with Connext which have been failing since they have been added:

#545: http://build.ros2.org/view/Rci/job/Rci__nightly-connext_ubuntu_focal_amd64/42/testReport/rclpy.rclpy.test.test_client/TestClient/test_service_timestamps/
#542: http://build.ros2.org/view/Rci/job/Rci__nightly-connext_ubuntu_focal_amd64/42/testReport/rclpy.rclpy.test.test_node/TestNodeAllowUndeclaredParameters/test_take/

The missing feature is ticketed in ros2/rmw_connext#405.
Before: 
After:","Skip test with Connext which have been failing since they have been added:

#545: http://build.ros2.org/view/Rci/job/Rci__nightly-connext_ubuntu_focal_amd64/42/testReport/rclpy.rclpy.test.test_client/TestClient/test_service_timestamps/
#542: http://build.ros2.org/view/Rci/job/Rci__nightly-connext_ubuntu_focal_amd64/42/testReport/rclpy.rclpy.test.test_node/TestNodeAllowUndeclaredParameters/test_take/

The missing feature is ticketed in ros2/rmw_connext#405.
Before: 
After:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,615,2020-08-10T23:39:49Z,2020-08-11T05:12:53Z,2020-08-11T05:13:05Z,MERGED,True,10,0,2,https://github.com/dirk-thomas,skip test relying on source timestamps with Connext,1,['bug'],https://github.com/ros2/rclpy/pull/615,https://github.com/gbiggs,2,https://github.com/ros2/rclpy/pull/615#issuecomment-671647078,"Skip test with Connext which have been failing since they have been added:

#545: http://build.ros2.org/view/Rci/job/Rci__nightly-connext_ubuntu_focal_amd64/42/testReport/rclpy.rclpy.test.test_client/TestClient/test_service_timestamps/
#542: http://build.ros2.org/view/Rci/job/Rci__nightly-connext_ubuntu_focal_amd64/42/testReport/rclpy.rclpy.test.test_node/TestNodeAllowUndeclaredParameters/test_take/

The missing feature is ticketed in ros2/rmw_connext#405.
Before: 
After:","The changes themselves LGTM.
Is there an alternative test for _rclpy.rclpy_take() available?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,615,2020-08-10T23:39:49Z,2020-08-11T05:12:53Z,2020-08-11T05:13:05Z,MERGED,True,10,0,2,https://github.com/dirk-thomas,skip test relying on source timestamps with Connext,1,['bug'],https://github.com/ros2/rclpy/pull/615,https://github.com/dirk-thomas,3,https://github.com/ros2/rclpy/pull/615#issuecomment-671649984,"Skip test with Connext which have been failing since they have been added:

#545: http://build.ros2.org/view/Rci/job/Rci__nightly-connext_ubuntu_focal_amd64/42/testReport/rclpy.rclpy.test.test_client/TestClient/test_service_timestamps/
#542: http://build.ros2.org/view/Rci/job/Rci__nightly-connext_ubuntu_focal_amd64/42/testReport/rclpy.rclpy.test.test_node/TestNodeAllowUndeclaredParameters/test_take/

The missing feature is ticketed in ros2/rmw_connext#405.
Before: 
After:","Is there an alternative test for _rclpy.rclpy_take() available?

I don't understand the question - what for?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,615,2020-08-10T23:39:49Z,2020-08-11T05:12:53Z,2020-08-11T05:13:05Z,MERGED,True,10,0,2,https://github.com/dirk-thomas,skip test relying on source timestamps with Connext,1,['bug'],https://github.com/ros2/rclpy/pull/615,https://github.com/gbiggs,4,https://github.com/ros2/rclpy/pull/615#issuecomment-671651595,"Skip test with Connext which have been failing since they have been added:

#545: http://build.ros2.org/view/Rci/job/Rci__nightly-connext_ubuntu_focal_amd64/42/testReport/rclpy.rclpy.test.test_client/TestClient/test_service_timestamps/
#542: http://build.ros2.org/view/Rci/job/Rci__nightly-connext_ubuntu_focal_amd64/42/testReport/rclpy.rclpy.test.test_node/TestNodeAllowUndeclaredParameters/test_take/

The missing feature is ticketed in ros2/rmw_connext#405.
Before: 
After:","I'm probably misunderstanding something, but it looks like you're skipping the only tests here that call rclpy_take() for Connext. I was asking if that function is tested with Connext somewhere else or if it's just left untested with Connext. If the function relies on source timestamps and is completely unusable with Connext then that's fine, but it's probably worth being more specific about that in the skip comment.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,615,2020-08-10T23:39:49Z,2020-08-11T05:12:53Z,2020-08-11T05:13:05Z,MERGED,True,10,0,2,https://github.com/dirk-thomas,skip test relying on source timestamps with Connext,1,['bug'],https://github.com/ros2/rclpy/pull/615,https://github.com/iluetkeb,5,https://github.com/ros2/rclpy/pull/615#issuecomment-671727492,"Skip test with Connext which have been failing since they have been added:

#545: http://build.ros2.org/view/Rci/job/Rci__nightly-connext_ubuntu_focal_amd64/42/testReport/rclpy.rclpy.test.test_client/TestClient/test_service_timestamps/
#542: http://build.ros2.org/view/Rci/job/Rci__nightly-connext_ubuntu_focal_amd64/42/testReport/rclpy.rclpy.test.test_node/TestNodeAllowUndeclaredParameters/test_take/

The missing feature is ticketed in ros2/rmw_connext#405.
Before: 
After:","One test is timestamp-specific (get_service_timestamps), but the other (test_take) isn't. In the C++ tests I've #ifdef'd out the check blocks only. Not sure if sth like that is possible for pyunit?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,615,2020-08-10T23:39:49Z,2020-08-11T05:12:53Z,2020-08-11T05:13:05Z,MERGED,True,10,0,2,https://github.com/dirk-thomas,skip test relying on source timestamps with Connext,1,['bug'],https://github.com/ros2/rclpy/pull/615,https://github.com/dirk-thomas,6,https://github.com/ros2/rclpy/pull/615#issuecomment-671729199,"Skip test with Connext which have been failing since they have been added:

#545: http://build.ros2.org/view/Rci/job/Rci__nightly-connext_ubuntu_focal_amd64/42/testReport/rclpy.rclpy.test.test_client/TestClient/test_service_timestamps/
#542: http://build.ros2.org/view/Rci/job/Rci__nightly-connext_ubuntu_focal_amd64/42/testReport/rclpy.rclpy.test.test_node/TestNodeAllowUndeclaredParameters/test_take/

The missing feature is ticketed in ros2/rmw_connext#405.
Before: 
After:","I'm probably misunderstanding something, but it looks like you're skipping the only tests here that call rclpy_take() for Connext. I was asking if that function is tested with Connext somewhere else or if it's just left untested with Connext.

The specific test was added in the above referenced PR and has failed for Connext since then. This patch only skips the always failing test.
Adding a separate test to check rclpy_take() without considering the source timestamp would be an option as well as modifying the test to skip part of the logic for Connext.
Since this change doesn't reduce the previously covered (and passed) code I don't think either should happen in this PR.",True,{'THUMBS_UP': ['https://github.com/gbiggs']}
ros2/rclpy,https://github.com/ros2/rclpy,616,2020-08-13T22:49:51Z,2020-08-18T16:40:17Z,2020-08-18T16:40:21Z,MERGED,True,2,0,1,https://github.com/jacobperron,[foxy backport] Add pytest.ini so tests succeed without warnings when run locally. (#587),1,[],https://github.com/ros2/rclpy/pull/616,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/616,"Backport #587 to Foxy.
This should help resolve one of the outstanding failures in ros2/ci#503","Backport #587 to Foxy.
This should help resolve one of the outstanding failures in ros2/ci#503",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,616,2020-08-13T22:49:51Z,2020-08-18T16:40:17Z,2020-08-18T16:40:21Z,MERGED,True,2,0,1,https://github.com/jacobperron,[foxy backport] Add pytest.ini so tests succeed without warnings when run locally. (#587),1,[],https://github.com/ros2/rclpy/pull/616,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/616#issuecomment-675136708,"Backport #587 to Foxy.
This should help resolve one of the outstanding failures in ros2/ci#503",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,616,2020-08-13T22:49:51Z,2020-08-18T16:40:17Z,2020-08-18T16:40:21Z,MERGED,True,2,0,1,https://github.com/jacobperron,[foxy backport] Add pytest.ini so tests succeed without warnings when run locally. (#587),1,[],https://github.com/ros2/rclpy/pull/616,https://github.com/jacobperron,3,https://github.com/ros2/rclpy/pull/616#issuecomment-675136732,"Backport #587 to Foxy.
This should help resolve one of the outstanding failures in ros2/ci#503",CI for this PR and several other similar backports can be found here: ros2/ci#503 (comment),True,{}
ros2/rclpy,https://github.com/ros2/rclpy,619,2020-09-11T20:51:12Z,2020-09-17T18:13:06Z,2020-09-17T18:13:09Z,MERGED,True,3,1,1,https://github.com/ivanpauno,"Use best effort, keep last, history depth 1 QoS Profile for '/clock' subscriptions",2,['enhancement'],https://github.com/ros2/rclpy/pull/619,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/619,See ros2/rclcpp#1312.,See ros2/rclcpp#1312.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,620,2020-09-13T10:28:51Z,2020-12-23T00:07:02Z,2020-12-23T00:07:02Z,CLOSED,False,1,1,1,https://github.com/nyxaria,fix _get_parameter_types_callback Enum to ParameterType conversion,1,['more-information-needed'],https://github.com/ros2/rclpy/pull/620,https://github.com/nyxaria,1,https://github.com/ros2/rclpy/pull/620,"As discussed in #618, this fixes the conversion from Python Enum type to the int type in ParameterType.msg.
Before:
...
""parameter_service.py"", line 90, in _get_parameter_types_callback
response.types.append(node.get_parameter_or(name).type_)
TypeError: an integer is required (got type Type)

Fixes #618","As discussed in #618, this fixes the conversion from Python Enum type to the int type in ParameterType.msg.
Before:
...
""parameter_service.py"", line 90, in _get_parameter_types_callback
response.types.append(node.get_parameter_or(name).type_)
TypeError: an integer is required (got type Type)

Fixes #618",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,620,2020-09-13T10:28:51Z,2020-12-23T00:07:02Z,2020-12-23T00:07:02Z,CLOSED,False,1,1,1,https://github.com/nyxaria,fix _get_parameter_types_callback Enum to ParameterType conversion,1,['more-information-needed'],https://github.com/ros2/rclpy/pull/620,https://github.com/nyxaria,2,https://github.com/ros2/rclpy/pull/620#issuecomment-696429449,"As discussed in #618, this fixes the conversion from Python Enum type to the int type in ParameterType.msg.
Before:
...
""parameter_service.py"", line 90, in _get_parameter_types_callback
response.types.append(node.get_parameter_or(name).type_)
TypeError: an integer is required (got type Type)

Fixes #618","I will try to do this in the following week, moving houses at the moment and swamped with work so I have no time to fix this now. Apologies for the delays.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,620,2020-09-13T10:28:51Z,2020-12-23T00:07:02Z,2020-12-23T00:07:02Z,CLOSED,False,1,1,1,https://github.com/nyxaria,fix _get_parameter_types_callback Enum to ParameterType conversion,1,['more-information-needed'],https://github.com/ros2/rclpy/pull/620,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/620#issuecomment-696709871,"As discussed in #618, this fixes the conversion from Python Enum type to the int type in ParameterType.msg.
Before:
...
""parameter_service.py"", line 90, in _get_parameter_types_callback
response.types.append(node.get_parameter_or(name).type_)
TypeError: an integer is required (got type Type)

Fixes #618","@nyxaria No problem, thanks for the heads up.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,620,2020-09-13T10:28:51Z,2020-12-23T00:07:02Z,2020-12-23T00:07:02Z,CLOSED,False,1,1,1,https://github.com/nyxaria,fix _get_parameter_types_callback Enum to ParameterType conversion,1,['more-information-needed'],https://github.com/ros2/rclpy/pull/620,https://github.com/clalancette,4,https://github.com/ros2/rclpy/pull/620#issuecomment-705557307,"As discussed in #618, this fixes the conversion from Python Enum type to the int type in ParameterType.msg.
Before:
...
""parameter_service.py"", line 90, in _get_parameter_types_callback
response.types.append(node.get_parameter_or(name).type_)
TypeError: an integer is required (got type Type)

Fixes #618","@nyxaria Hope your house moving went well.  Friendly ping to add a test here, thanks.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,620,2020-09-13T10:28:51Z,2020-12-23T00:07:02Z,2020-12-23T00:07:02Z,CLOSED,False,1,1,1,https://github.com/nyxaria,fix _get_parameter_types_callback Enum to ParameterType conversion,1,['more-information-needed'],https://github.com/ros2/rclpy/pull/620,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/620#issuecomment-749844070,"As discussed in #618, this fixes the conversion from Python Enum type to the int type in ParameterType.msg.
Before:
...
""parameter_service.py"", line 90, in _get_parameter_types_callback
response.types.append(node.get_parameter_or(name).type_)
TypeError: an integer is required (got type Type)

Fixes #618","Oops, it looks like someone opened a duplicate PR and it got merged (#641). Thanks for the PR!  Closing.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,621,2020-09-18T15:59:01Z,2020-09-23T13:52:38Z,2020-09-23T13:52:41Z,MERGED,True,12,12,4,https://github.com/clalancette,Add in the topic name when QoS events are fired.,1,[],https://github.com/ros2/rclpy/pull/621,https://github.com/clalancette,1,https://github.com/ros2/rclpy/pull/621,"This makes debugging for the user a little easier.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
This is the rclpy counterpart to ros2/rclcpp#1286 .  @codebot FYI.","This makes debugging for the user a little easier.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
This is the rclpy counterpart to ros2/rclcpp#1286 .  @codebot FYI.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,621,2020-09-18T15:59:01Z,2020-09-23T13:52:38Z,2020-09-23T13:52:41Z,MERGED,True,12,12,4,https://github.com/clalancette,Add in the topic name when QoS events are fired.,1,[],https://github.com/ros2/rclpy/pull/621,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/621#issuecomment-694956641,"This makes debugging for the user a little easier.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
This is the rclpy counterpart to ros2/rclcpp#1286 .  @codebot FYI.","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,624,2020-10-01T01:09:54Z,2020-10-05T17:39:31Z,2020-10-05T17:39:34Z,MERGED,True,1,1,1,https://github.com/clalancette,Add in semicolon on RCUTILS_LOGGING_AUTOINIT.,1,[],https://github.com/ros2/rclpy/pull/624,https://github.com/clalancette,1,https://github.com/ros2/rclpy/pull/624,"This makes it look more like a C statement.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
This goes along with ros2/rcutils#290 ; see that PR for CI.","This makes it look more like a C statement.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
This goes along with ros2/rcutils#290 ; see that PR for CI.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,625,2020-10-01T23:15:14Z,2020-11-06T17:38:34Z,2020-11-06T17:38:37Z,MERGED,True,15,3,4,https://github.com/jacobperron,[foxy] Destroy event handlers owned by publishers/subscriptions when calling publisher.destroy()/subscription.destroy() (#603),1,[],https://github.com/ros2/rclpy/pull/625,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/625,Backport #603 to Foxy.,Backport #603 to Foxy.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,625,2020-10-01T23:15:14Z,2020-11-06T17:38:34Z,2020-11-06T17:38:37Z,MERGED,True,15,3,4,https://github.com/jacobperron,[foxy] Destroy event handlers owned by publishers/subscriptions when calling publisher.destroy()/subscription.destroy() (#603),1,[],https://github.com/ros2/rclpy/pull/625,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/625#issuecomment-718977330,Backport #603 to Foxy.,"Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,625,2020-10-01T23:15:14Z,2020-11-06T17:38:34Z,2020-11-06T17:38:37Z,MERGED,True,15,3,4,https://github.com/jacobperron,[foxy] Destroy event handlers owned by publishers/subscriptions when calling publisher.destroy()/subscription.destroy() (#603),1,[],https://github.com/ros2/rclpy/pull/625,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/625#issuecomment-722484916,Backport #603 to Foxy.,"Re-running CI with typo in test args fixed (build: --packages-above-and-dependencies rclpy test: --packages-above-and-dependencies rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{'HEART': ['https://github.com/jacobperron']}
ros2/rclpy,https://github.com/ros2/rclpy,625,2020-10-01T23:15:14Z,2020-11-06T17:38:34Z,2020-11-06T17:38:37Z,MERGED,True,15,3,4,https://github.com/jacobperron,[foxy] Destroy event handlers owned by publishers/subscriptions when calling publisher.destroy()/subscription.destroy() (#603),1,[],https://github.com/ros2/rclpy/pull/625,https://github.com/jacobperron,4,https://github.com/ros2/rclpy/pull/625#issuecomment-723208633,Backport #603 to Foxy.,Test failures appear to be known failures.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,626,2020-10-02T00:29:40Z,2020-10-22T22:57:28Z,2020-10-22T22:57:35Z,MERGED,True,47,6,1,https://github.com/jacobperron,[foxy] MultiThreadedExecutor spin_until_future complete should not continue waiting when the future is done (#605),1,[],https://github.com/ros2/rclpy/pull/626,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/626,Backport #605 to Foxy.,Backport #605 to Foxy.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,626,2020-10-02T00:29:40Z,2020-10-22T22:57:28Z,2020-10-22T22:57:35Z,MERGED,True,47,6,1,https://github.com/jacobperron,[foxy] MultiThreadedExecutor spin_until_future complete should not continue waiting when the future is done (#605),1,[],https://github.com/ros2/rclpy/pull/626,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/626#issuecomment-714672561,Backport #605 to Foxy.,"Linux 
Linux-aarch64 
macOS 
Windows  (unrelated test failures)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,627,2020-10-07T13:38:28Z,2020-10-07T16:34:29Z,2020-10-07T16:34:32Z,MERGED,True,4,1,1,https://github.com/ivanpauno,Update maintainers,1,[],https://github.com/ros2/rclpy/pull/627,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/627,,,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,632,2020-10-19T19:36:48Z,2020-10-21T18:40:17Z,2020-10-21T18:40:19Z,MERGED,True,1,1,1,https://github.com/clalancette,Make sure to use Py_XDECREF in rclpy_get_service_names_and_types,1,[],https://github.com/ros2/rclpy/pull/632,https://github.com/clalancette,1,https://github.com/ros2/rclpy/pull/632,"When there is an error, it is possible that pyservice_names_and_types
is NULL, so make sure to use Py_XDECREF when cleaning up.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","When there is an error, it is possible that pyservice_names_and_types
is NULL, so make sure to use Py_XDECREF when cleaning up.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,632,2020-10-19T19:36:48Z,2020-10-21T18:40:17Z,2020-10-21T18:40:19Z,MERGED,True,1,1,1,https://github.com/clalancette,Make sure to use Py_XDECREF in rclpy_get_service_names_and_types,1,[],https://github.com/ros2/rclpy/pull/632,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/632#issuecomment-712397250,"When there is an error, it is possible that pyservice_names_and_types
is NULL, so make sure to use Py_XDECREF when cleaning up.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,632,2020-10-19T19:36:48Z,2020-10-21T18:40:17Z,2020-10-21T18:40:19Z,MERGED,True,1,1,1,https://github.com/clalancette,Make sure to use Py_XDECREF in rclpy_get_service_names_and_types,1,[],https://github.com/ros2/rclpy/pull/632,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/632#issuecomment-713791793,"When there is an error, it is possible that pyservice_names_and_types
is NULL, so make sure to use Py_XDECREF when cleaning up.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","The multithreaded__rmw_connext_cpp tests are known to be flaky on Windows, so merging.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,633,2020-10-26T14:19:32Z,2020-10-26T19:07:44Z,2020-10-26T19:07:47Z,MERGED,True,0,162,3,https://github.com/ivanpauno,Remove deprecated set_parameters_callback,3,['enhancement'],https://github.com/ros2/rclpy/pull/633,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/633,"Removing method that was deprecated before Foxy release.
Tests file test_parameter_callbacks.py is being removed, because add_on_set_parameters_callback() already has equivalent tests in test_node.py.","Removing method that was deprecated before Foxy release.
Tests file test_parameter_callbacks.py is being removed, because add_on_set_parameters_callback() already has equivalent tests in test_node.py.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,633,2020-10-26T14:19:32Z,2020-10-26T19:07:44Z,2020-10-26T19:07:47Z,MERGED,True,0,162,3,https://github.com/ivanpauno,Remove deprecated set_parameters_callback,3,['enhancement'],https://github.com/ros2/rclpy/pull/633,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/633#issuecomment-716582618,"Removing method that was deprecated before Foxy release.
Tests file test_parameter_callbacks.py is being removed, because add_on_set_parameters_callback() already has equivalent tests in test_node.py.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,634,2020-10-26T21:41:14Z,2020-10-28T13:44:57Z,2020-10-28T13:45:02Z,MERGED,True,110,83,8,https://github.com/ivanpauno,Deprecate verbose qos policy value names,2,['enhancement'],https://github.com/ros2/rclpy/pull/634,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/634,"Deprecate the verbose versions (e.g. rclpy.qos.HistoryPolicy.RMW_QOS_POLICY_HISTORY_KEEP_LAST) in favor of the less verbose versions (e.g. rclpy.qos.HistoryPolicy.KEEP_LAST), so we can remove the verbose version in a future.","Deprecate the verbose versions (e.g. rclpy.qos.HistoryPolicy.RMW_QOS_POLICY_HISTORY_KEEP_LAST) in favor of the less verbose versions (e.g. rclpy.qos.HistoryPolicy.KEEP_LAST), so we can remove the verbose version in a future.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,634,2020-10-26T21:41:14Z,2020-10-28T13:44:57Z,2020-10-28T13:45:02Z,MERGED,True,110,83,8,https://github.com/ivanpauno,Deprecate verbose qos policy value names,2,['enhancement'],https://github.com/ros2/rclpy/pull/634,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/634#issuecomment-716841376,"Deprecate the verbose versions (e.g. rclpy.qos.HistoryPolicy.RMW_QOS_POLICY_HISTORY_KEEP_LAST) in favor of the less verbose versions (e.g. rclpy.qos.HistoryPolicy.KEEP_LAST), so we can remove the verbose version in a future.",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,634,2020-10-26T21:41:14Z,2020-10-28T13:44:57Z,2020-10-28T13:45:02Z,MERGED,True,110,83,8,https://github.com/ivanpauno,Deprecate verbose qos policy value names,2,['enhancement'],https://github.com/ros2/rclpy/pull/634,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/634#issuecomment-716841851,"Deprecate the verbose versions (e.g. rclpy.qos.HistoryPolicy.RMW_QOS_POLICY_HISTORY_KEEP_LAST) in favor of the less verbose versions (e.g. rclpy.qos.HistoryPolicy.KEEP_LAST), so we can remove the verbose version in a future.","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,634,2020-10-26T21:41:14Z,2020-10-28T13:44:57Z,2020-10-28T13:45:02Z,MERGED,True,110,83,8,https://github.com/ivanpauno,Deprecate verbose qos policy value names,2,['enhancement'],https://github.com/ros2/rclpy/pull/634,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/634#issuecomment-717489013,"Deprecate the verbose versions (e.g. rclpy.qos.HistoryPolicy.RMW_QOS_POLICY_HISTORY_KEEP_LAST) in favor of the less verbose versions (e.g. rclpy.qos.HistoryPolicy.KEEP_LAST), so we can remove the verbose version in a future.","Checking that the demo_nodes_cpp linter errors are actually fixed:

Linux",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,634,2020-10-26T21:41:14Z,2020-10-28T13:44:57Z,2020-10-28T13:45:02Z,MERGED,True,110,83,8,https://github.com/ivanpauno,Deprecate verbose qos policy value names,2,['enhancement'],https://github.com/ros2/rclpy/pull/634,https://github.com/ivanpauno,5,https://github.com/ros2/rclpy/pull/634#issuecomment-717496308,"Deprecate the verbose versions (e.g. rclpy.qos.HistoryPolicy.RMW_QOS_POLICY_HISTORY_KEEP_LAST) in favor of the less verbose versions (e.g. rclpy.qos.HistoryPolicy.KEEP_LAST), so we can remove the verbose version in a future.",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,635,2020-10-28T16:56:38Z,2020-11-17T20:43:26Z,2020-11-17T20:43:29Z,MERGED,True,379,10,4,https://github.com/ivanpauno,Qos configurability,29,['enhancement'],https://github.com/ros2/rclpy/pull/635,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/635,"Depends on #636. (update:merged)
Equivalent to ros2/rclcpp#1408.
It adds all the needed helper function and classes to enable qos configurability.
I haven't yet modified Node.create_publisher and Node.create_subscription. (update: done)","Depends on #636. (update:merged)
Equivalent to ros2/rclcpp#1408.
It adds all the needed helper function and classes to enable qos configurability.
I haven't yet modified Node.create_publisher and Node.create_subscription. (update: done)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,635,2020-10-28T16:56:38Z,2020-11-17T20:43:26Z,2020-11-17T20:43:29Z,MERGED,True,379,10,4,https://github.com/ivanpauno,Qos configurability,29,['enhancement'],https://github.com/ros2/rclpy/pull/635,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/635#issuecomment-719776436,"Depends on #636. (update:merged)
Equivalent to ros2/rclcpp#1408.
It adds all the needed helper function and classes to enable qos configurability.
I haven't yet modified Node.create_publisher and Node.create_subscription. (update: done)",Force-pushed to resolve conflicts with master.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,635,2020-10-28T16:56:38Z,2020-11-17T20:43:26Z,2020-11-17T20:43:29Z,MERGED,True,379,10,4,https://github.com/ivanpauno,Qos configurability,29,['enhancement'],https://github.com/ros2/rclpy/pull/635,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/635#issuecomment-723148929,"Depends on #636. (update:merged)
Equivalent to ros2/rclcpp#1408.
It adds all the needed helper function and classes to enable qos configurability.
I haven't yet modified Node.create_publisher and Node.create_subscription. (update: done)",CI can be found here.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,635,2020-10-28T16:56:38Z,2020-11-17T20:43:26Z,2020-11-17T20:43:29Z,MERGED,True,379,10,4,https://github.com/ivanpauno,Qos configurability,29,['enhancement'],https://github.com/ros2/rclpy/pull/635,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/635#issuecomment-729136081,"Depends on #636. (update:merged)
Equivalent to ros2/rclcpp#1408.
It adds all the needed helper function and classes to enable qos configurability.
I haven't yet modified Node.create_publisher and Node.create_subscription. (update: done)",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,635,2020-10-28T16:56:38Z,2020-11-17T20:43:26Z,2020-11-17T20:43:29Z,MERGED,True,379,10,4,https://github.com/ivanpauno,Qos configurability,29,['enhancement'],https://github.com/ros2/rclpy/pull/635,https://github.com/ivanpauno,5,https://github.com/ros2/rclpy/pull/635#issuecomment-729136835,"Depends on #636. (update:merged)
Equivalent to ros2/rclcpp#1408.
It adds all the needed helper function and classes to enable qos configurability.
I haven't yet modified Node.create_publisher and Node.create_subscription. (update: done)","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,636,2020-10-28T18:50:32Z,2020-10-30T19:14:19Z,2020-10-30T19:14:23Z,MERGED,True,101,0,3,https://github.com/ivanpauno,Add method in Node to resolve a topic or service name,11,['enhancement'],https://github.com/ros2/rclpy/pull/636,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/636,"Adds bindings for ros2/rcl#835.
Equivalent to ros2/rclcpp#1410.
Will be useful in #635.","Adds bindings for ros2/rcl#835.
Equivalent to ros2/rclcpp#1410.
Will be useful in #635.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,636,2020-10-28T18:50:32Z,2020-10-30T19:14:19Z,2020-10-30T19:14:23Z,MERGED,True,101,0,3,https://github.com/ivanpauno,Add method in Node to resolve a topic or service name,11,['enhancement'],https://github.com/ros2/rclpy/pull/636,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/636#issuecomment-718158375,"Adds bindings for ros2/rcl#835.
Equivalent to ros2/rclcpp#1410.
Will be useful in #635.",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,636,2020-10-28T18:50:32Z,2020-10-30T19:14:19Z,2020-10-30T19:14:23Z,MERGED,True,101,0,3,https://github.com/ivanpauno,Add method in Node to resolve a topic or service name,11,['enhancement'],https://github.com/ros2/rclpy/pull/636,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/636#issuecomment-719037819,"Adds bindings for ros2/rcl#835.
Equivalent to ros2/rclcpp#1410.
Will be useful in #635.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,636,2020-10-28T18:50:32Z,2020-10-30T19:14:19Z,2020-10-30T19:14:23Z,MERGED,True,101,0,3,https://github.com/ivanpauno,Add method in Node to resolve a topic or service name,11,['enhancement'],https://github.com/ros2/rclpy/pull/636,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/636#issuecomment-719560066,"Adds bindings for ros2/rcl#835.
Equivalent to ros2/rclcpp#1410.
Will be useful in #635.","I'm not sure why mac failed before, there shouldn't be anything platform dependent here:

macOS",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,636,2020-10-28T18:50:32Z,2020-10-30T19:14:19Z,2020-10-30T19:14:23Z,MERGED,True,101,0,3,https://github.com/ivanpauno,Add method in Node to resolve a topic or service name,11,['enhancement'],https://github.com/ros2/rclpy/pull/636,https://github.com/ivanpauno,5,https://github.com/ros2/rclpy/pull/636#issuecomment-719690958,"Adds bindings for ros2/rcl#835.
Equivalent to ros2/rclcpp#1410.
Will be useful in #635.",macOS,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,636,2020-10-28T18:50:32Z,2020-10-30T19:14:19Z,2020-10-30T19:14:23Z,MERGED,True,101,0,3,https://github.com/ivanpauno,Add method in Node to resolve a topic or service name,11,['enhancement'],https://github.com/ros2/rclpy/pull/636,https://github.com/ivanpauno,6,https://github.com/ros2/rclpy/pull/636#issuecomment-719717854,"Adds bindings for ros2/rcl#835.
Equivalent to ros2/rclcpp#1410.
Will be useful in #635.","🤞

macOS",True,{'HOORAY': ['https://github.com/jacobperron']}
ros2/rclpy,https://github.com/ros2/rclpy,636,2020-10-28T18:50:32Z,2020-10-30T19:14:19Z,2020-10-30T19:14:23Z,MERGED,True,101,0,3,https://github.com/ivanpauno,Add method in Node to resolve a topic or service name,11,['enhancement'],https://github.com/ros2/rclpy/pull/636,https://github.com/ivanpauno,7,https://github.com/ros2/rclpy/pull/636#issuecomment-719719411,"Adds bindings for ros2/rcl#835.
Equivalent to ros2/rclcpp#1410.
Will be useful in #635.",Force pushed to fix missing DCO signing.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,637,2020-10-30T21:30:25Z,2020-11-02T19:01:59Z,2020-11-02T19:02:03Z,MERGED,True,5,4,2,https://github.com/ivanpauno,qos_policy_name_from_kind() should accept either a QoSPolicyKind or an int,2,['bug'],https://github.com/ros2/rclpy/pull/637,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/637,"Fix error introduced in #634.
qos_policy_name_from_kind() was previously accepting either QoSPolicyKind or an int (which wasn't properly documented in the type annotation).
The changes introduced on that function only accepted a QoSPolicyKind, this patch reintroduce int support.
Here 
  
    
      rclpy/rclpy/rclpy/qos_event.py
    
    
         Line 251
      in
      0a3a2bf
    
  
  
    

        
          
           policy_name = qos_policy_name_from_kind(event.last_policy_kind) 
        
    
  


event.last_policy_kind is an int.
The error wasn't caught because fastrtps doesn't support the feature, but it the following nightlies were failing:

http://build.ros2.org/view/Rci/job/Rci__nightly-cyclonedds_ubuntu_focal_amd64/
http://build.ros2.org/view/Rci/job/Rci__nightly-connext_ubuntu_focal_amd64/","Fix error introduced in #634.
qos_policy_name_from_kind() was previously accepting either QoSPolicyKind or an int (which wasn't properly documented in the type annotation).
The changes introduced on that function only accepted a QoSPolicyKind, this patch reintroduce int support.
Here 
  
    
      rclpy/rclpy/rclpy/qos_event.py
    
    
         Line 251
      in
      0a3a2bf
    
  
  
    

        
          
           policy_name = qos_policy_name_from_kind(event.last_policy_kind) 
        
    
  


event.last_policy_kind is an int.
The error wasn't caught because fastrtps doesn't support the feature, but it the following nightlies were failing:

http://build.ros2.org/view/Rci/job/Rci__nightly-cyclonedds_ubuntu_focal_amd64/
http://build.ros2.org/view/Rci/job/Rci__nightly-connext_ubuntu_focal_amd64/",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,637,2020-10-30T21:30:25Z,2020-11-02T19:01:59Z,2020-11-02T19:02:03Z,MERGED,True,5,4,2,https://github.com/ivanpauno,qos_policy_name_from_kind() should accept either a QoSPolicyKind or an int,2,['bug'],https://github.com/ros2/rclpy/pull/637,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/637#issuecomment-719809969,"Fix error introduced in #634.
qos_policy_name_from_kind() was previously accepting either QoSPolicyKind or an int (which wasn't properly documented in the type annotation).
The changes introduced on that function only accepted a QoSPolicyKind, this patch reintroduce int support.
Here 
  
    
      rclpy/rclpy/rclpy/qos_event.py
    
    
         Line 251
      in
      0a3a2bf
    
  
  
    

        
          
           policy_name = qos_policy_name_from_kind(event.last_policy_kind) 
        
    
  


event.last_policy_kind is an int.
The error wasn't caught because fastrtps doesn't support the feature, but it the following nightlies were failing:

http://build.ros2.org/view/Rci/job/Rci__nightly-cyclonedds_ubuntu_focal_amd64/
http://build.ros2.org/view/Rci/job/Rci__nightly-connext_ubuntu_focal_amd64/",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,637,2020-10-30T21:30:25Z,2020-11-02T19:01:59Z,2020-11-02T19:02:03Z,MERGED,True,5,4,2,https://github.com/ivanpauno,qos_policy_name_from_kind() should accept either a QoSPolicyKind or an int,2,['bug'],https://github.com/ros2/rclpy/pull/637,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/637#issuecomment-719810523,"Fix error introduced in #634.
qos_policy_name_from_kind() was previously accepting either QoSPolicyKind or an int (which wasn't properly documented in the type annotation).
The changes introduced on that function only accepted a QoSPolicyKind, this patch reintroduce int support.
Here 
  
    
      rclpy/rclpy/rclpy/qos_event.py
    
    
         Line 251
      in
      0a3a2bf
    
  
  
    

        
          
           policy_name = qos_policy_name_from_kind(event.last_policy_kind) 
        
    
  


event.last_policy_kind is an int.
The error wasn't caught because fastrtps doesn't support the feature, but it the following nightlies were failing:

http://build.ros2.org/view/Rci/job/Rci__nightly-cyclonedds_ubuntu_focal_amd64/
http://build.ros2.org/view/Rci/job/Rci__nightly-connext_ubuntu_focal_amd64/","CI, testing rclpy and ros2topic with only rmw_cyclonedds available:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,637,2020-10-30T21:30:25Z,2020-11-02T19:01:59Z,2020-11-02T19:02:03Z,MERGED,True,5,4,2,https://github.com/ivanpauno,qos_policy_name_from_kind() should accept either a QoSPolicyKind or an int,2,['bug'],https://github.com/ros2/rclpy/pull/637,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/637#issuecomment-720445650,"Fix error introduced in #634.
qos_policy_name_from_kind() was previously accepting either QoSPolicyKind or an int (which wasn't properly documented in the type annotation).
The changes introduced on that function only accepted a QoSPolicyKind, this patch reintroduce int support.
Here 
  
    
      rclpy/rclpy/rclpy/qos_event.py
    
    
         Line 251
      in
      0a3a2bf
    
  
  
    

        
          
           policy_name = qos_policy_name_from_kind(event.last_policy_kind) 
        
    
  


event.last_policy_kind is an int.
The error wasn't caught because fastrtps doesn't support the feature, but it the following nightlies were failing:

http://build.ros2.org/view/Rci/job/Rci__nightly-cyclonedds_ubuntu_focal_amd64/
http://build.ros2.org/view/Rci/job/Rci__nightly-connext_ubuntu_focal_amd64/",Linux,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,637,2020-10-30T21:30:25Z,2020-11-02T19:01:59Z,2020-11-02T19:02:03Z,MERGED,True,5,4,2,https://github.com/ivanpauno,qos_policy_name_from_kind() should accept either a QoSPolicyKind or an int,2,['bug'],https://github.com/ros2/rclpy/pull/637,https://github.com/ivanpauno,5,https://github.com/ros2/rclpy/pull/637#issuecomment-720446002,"Fix error introduced in #634.
qos_policy_name_from_kind() was previously accepting either QoSPolicyKind or an int (which wasn't properly documented in the type annotation).
The changes introduced on that function only accepted a QoSPolicyKind, this patch reintroduce int support.
Here 
  
    
      rclpy/rclpy/rclpy/qos_event.py
    
    
         Line 251
      in
      0a3a2bf
    
  
  
    

        
          
           policy_name = qos_policy_name_from_kind(event.last_policy_kind) 
        
    
  


event.last_policy_kind is an int.
The error wasn't caught because fastrtps doesn't support the feature, but it the following nightlies were failing:

http://build.ros2.org/view/Rci/job/Rci__nightly-cyclonedds_ubuntu_focal_amd64/
http://build.ros2.org/view/Rci/job/Rci__nightly-connext_ubuntu_focal_amd64/","The change looks okay, but not sure about the test failure.

Another failure introduced in #634 that wasn't caught because of only running tests with fastrtps.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,638,2020-11-11T17:45:56Z,2020-11-11T20:49:12Z,2020-11-11T20:49:15Z,MERGED,True,1,1,1,https://github.com/clalancette,Use Py_XDECREF for pytopic_names_and_types.,1,[],https://github.com/ros2/rclpy/pull/638,https://github.com/clalancette,1,https://github.com/ros2/rclpy/pull/638,"If we got here through PyList_New failing, then pytopic_names_and_types
could be NULL.  Therefore, we need to use Py_XDECREF to handle
the situation.  Pointed out by clang static analysis.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","If we got here through PyList_New failing, then pytopic_names_and_types
could be NULL.  Therefore, we need to use Py_XDECREF to handle
the situation.  Pointed out by clang static analysis.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,638,2020-11-11T17:45:56Z,2020-11-11T20:49:12Z,2020-11-11T20:49:15Z,MERGED,True,1,1,1,https://github.com/clalancette,Use Py_XDECREF for pytopic_names_and_types.,1,[],https://github.com/ros2/rclpy/pull/638,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/638#issuecomment-725624594,"If we got here through PyList_New failing, then pytopic_names_and_types
could be NULL.  Therefore, we need to use Py_XDECREF to handle
the situation.  Pointed out by clang static analysis.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,638,2020-11-11T17:45:56Z,2020-11-11T20:49:12Z,2020-11-11T20:49:15Z,MERGED,True,1,1,1,https://github.com/clalancette,Use Py_XDECREF for pytopic_names_and_types.,1,[],https://github.com/ros2/rclpy/pull/638,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/638#issuecomment-725653799,"If we got here through PyList_New failing, then pytopic_names_and_types
could be NULL.  Therefore, we need to use Py_XDECREF to handle
the situation.  Pointed out by clang static analysis.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","The warnings on Windows are being addressed by ros2/rcutils#311 , so they aren't caused by this PR.
Thanks for the review, going ahead and merging this.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,641,2020-11-27T06:44:47Z,2020-12-02T17:05:05Z,2020-12-02T17:05:05Z,MERGED,True,1,1,1,https://github.com/fujitatomoya,Fix Enum not being comparable with ints in get_parameter_types service,1,['bug'],https://github.com/ros2/rclpy/pull/641,https://github.com/fujitatomoya,1,https://github.com/ros2/rclpy/pull/641,"fix #640
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com","fix #640
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,641,2020-11-27T06:44:47Z,2020-12-02T17:05:05Z,2020-12-02T17:05:05Z,MERGED,True,1,1,1,https://github.com/fujitatomoya,Fix Enum not being comparable with ints in get_parameter_types service,1,['bug'],https://github.com/ros2/rclpy/pull/641,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/641#issuecomment-734674064,"fix #640
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com","@ivanpauno @clalancette
would you check this minor fix when you get back? thanks in advance.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,641,2020-11-27T06:44:47Z,2020-12-02T17:05:05Z,2020-12-02T17:05:05Z,MERGED,True,1,1,1,https://github.com/fujitatomoya,Fix Enum not being comparable with ints in get_parameter_types service,1,['bug'],https://github.com/ros2/rclpy/pull/641,https://github.com/fujitatomoya,3,https://github.com/ros2/rclpy/pull/641#issuecomment-736117365,"fix #640
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com","When was #640 introduced?

i'm not sure, i was checking on ros2/rclcpp#1482, and accidentally found that.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,641,2020-11-27T06:44:47Z,2020-12-02T17:05:05Z,2020-12-02T17:05:05Z,MERGED,True,1,1,1,https://github.com/fujitatomoya,Fix Enum not being comparable with ints in get_parameter_types service,1,['bug'],https://github.com/ros2/rclpy/pull/641,https://github.com/fujitatomoya,4,https://github.com/ros2/rclpy/pull/641#issuecomment-736890534,"fix #640
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com","@iuhilnehc-ynos @ivanpauno
friendly ping, could you have a look again? (I confirmed that this fixes problem, and rclpy passes all test in local environment.)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,641,2020-11-27T06:44:47Z,2020-12-02T17:05:05Z,2020-12-02T17:05:05Z,MERGED,True,1,1,1,https://github.com/fujitatomoya,Fix Enum not being comparable with ints in get_parameter_types service,1,['bug'],https://github.com/ros2/rclpy/pull/641,https://github.com/fujitatomoya,5,https://github.com/ros2/rclpy/pull/641#issuecomment-736891938,"fix #640
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com","sorry there was error for DCO, i just did git push -f, now it is ready to review.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,641,2020-11-27T06:44:47Z,2020-12-02T17:05:05Z,2020-12-02T17:05:05Z,MERGED,True,1,1,1,https://github.com/fujitatomoya,Fix Enum not being comparable with ints in get_parameter_types service,1,['bug'],https://github.com/ros2/rclpy/pull/641,https://github.com/ivanpauno,6,https://github.com/ros2/rclpy/pull/641#issuecomment-737313430,"fix #640
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,641,2020-11-27T06:44:47Z,2020-12-02T17:05:05Z,2020-12-02T17:05:05Z,MERGED,True,1,1,1,https://github.com/fujitatomoya,Fix Enum not being comparable with ints in get_parameter_types service,1,['bug'],https://github.com/ros2/rclpy/pull/641,https://github.com/ivanpauno,7,https://github.com/ros2/rclpy/pull/641#issuecomment-737364737,"fix #640
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com","Windows build warning is unrelated, merging!
Thanks @fujitatomoya !",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,644,2020-12-08T19:34:58Z,2020-12-23T00:04:23Z,2020-12-23T00:04:27Z,MERGED,True,1,1,1,https://github.com/jacobperron,[foxy] Fix Enum not being comparable with ints in get_parameter_types service,1,[],https://github.com/ros2/rclpy/pull/644,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/644,Backport #641 to Foxy.,Backport #641 to Foxy.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,644,2020-12-08T19:34:58Z,2020-12-23T00:04:23Z,2020-12-23T00:04:27Z,MERGED,True,1,1,1,https://github.com/jacobperron,[foxy] Fix Enum not being comparable with ints in get_parameter_types service,1,[],https://github.com/ros2/rclpy/pull/644,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/644#issuecomment-740936581,Backport #641 to Foxy.,"Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,645,2020-12-09T00:05:16Z,2020-12-14T15:07:39Z,2020-12-14T15:07:39Z,MERGED,True,5,19,1,https://github.com/fujitatomoya,memory leak (#643),2,[],https://github.com/ros2/rclpy/pull/645,https://github.com/fujitatomoya,1,https://github.com/ros2/rclpy/pull/645,"address #643
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com
Co-authored-by: Chen Lihui lihui.chen@sony.com","address #643
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com
Co-authored-by: Chen Lihui lihui.chen@sony.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,645,2020-12-09T00:05:16Z,2020-12-14T15:07:39Z,2020-12-14T15:07:39Z,MERGED,True,5,19,1,https://github.com/fujitatomoya,memory leak (#643),2,[],https://github.com/ros2/rclpy/pull/645,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/645#issuecomment-741279697,"address #643
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com
Co-authored-by: Chen Lihui lihui.chen@sony.com","@iuhilnehc-ynos
i include you as co-author, could you review this just in case?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,645,2020-12-09T00:05:16Z,2020-12-14T15:07:39Z,2020-12-14T15:07:39Z,MERGED,True,5,19,1,https://github.com/fujitatomoya,memory leak (#643),2,[],https://github.com/ros2/rclpy/pull/645,https://github.com/iuhilnehc-ynos,3,https://github.com/ros2/rclpy/pull/645#issuecomment-742206022,"address #643
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com
Co-authored-by: Chen Lihui lihui.chen@sony.com","it seems like using Py_BuildValue is the preferred way to create dictionaries

👍",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,645,2020-12-09T00:05:16Z,2020-12-14T15:07:39Z,2020-12-14T15:07:39Z,MERGED,True,5,19,1,https://github.com/fujitatomoya,memory leak (#643),2,[],https://github.com/ros2/rclpy/pull/645,https://github.com/iuhilnehc-ynos,4,https://github.com/ros2/rclpy/pull/645#issuecomment-742211963,"address #643
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com
Co-authored-by: Chen Lihui lihui.chen@sony.com","@fujitatomoya
It seems that I can't update your repository or add a code update suggestion in this PR after approval.
Could you update rclpy_message_info_to_dict by following @clalancette 's suggestion?
static PyObject *
rclpy_message_info_to_dict(rmw_message_info_t * message_info)
{
  PyObject * dict = Py_BuildValue(
    ""{s:L,s:L}"",
    ""source_timestamp"", message_info->source_timestamp,
    ""received_timestamp"", message_info->received_timestamp);
  if (dict == NULL) {
    PyErr_Format(PyExc_RuntimeError, ""Failed to create dictionary object for message info"");
    return NULL;
  }
  return dict;
}",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,645,2020-12-09T00:05:16Z,2020-12-14T15:07:39Z,2020-12-14T15:07:39Z,MERGED,True,5,19,1,https://github.com/fujitatomoya,memory leak (#643),2,[],https://github.com/ros2/rclpy/pull/645,https://github.com/fujitatomoya,5,https://github.com/ros2/rclpy/pull/645#issuecomment-742283550,"address #643
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com
Co-authored-by: Chen Lihui lihui.chen@sony.com","yeah, i will. thanks for comments to all 👍",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,645,2020-12-09T00:05:16Z,2020-12-14T15:07:39Z,2020-12-14T15:07:39Z,MERGED,True,5,19,1,https://github.com/fujitatomoya,memory leak (#643),2,[],https://github.com/ros2/rclpy/pull/645,https://github.com/fujitatomoya,6,https://github.com/ros2/rclpy/pull/645#issuecomment-742904826,"address #643
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com
Co-authored-by: Chen Lihui lihui.chen@sony.com","@clalancette @sloretz
CC: @iuhilnehc-ynos
requesting review once more time, thanks!
note: no memory leak confirmed with 30mins, local rclpy test green light.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,645,2020-12-09T00:05:16Z,2020-12-14T15:07:39Z,2020-12-14T15:07:39Z,MERGED,True,5,19,1,https://github.com/fujitatomoya,memory leak (#643),2,[],https://github.com/ros2/rclpy/pull/645,https://github.com/fujitatomoya,7,https://github.com/ros2/rclpy/pull/645#issuecomment-742908024,"address #643
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com
Co-authored-by: Chen Lihui lihui.chen@sony.com","@clalancette
i don't think https://build.ros2.org/job/Rpr__rclpy__ubuntu_focal_amd64/137/ is related to the fix.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,645,2020-12-09T00:05:16Z,2020-12-14T15:07:39Z,2020-12-14T15:07:39Z,MERGED,True,5,19,1,https://github.com/fujitatomoya,memory leak (#643),2,[],https://github.com/ros2/rclpy/pull/645,https://github.com/clalancette,8,https://github.com/ros2/rclpy/pull/645#issuecomment-743185163,"address #643
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com
Co-authored-by: Chen Lihui lihui.chen@sony.com",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,645,2020-12-09T00:05:16Z,2020-12-14T15:07:39Z,2020-12-14T15:07:39Z,MERGED,True,5,19,1,https://github.com/fujitatomoya,memory leak (#643),2,[],https://github.com/ros2/rclpy/pull/645,https://github.com/clalancette,9,https://github.com/ros2/rclpy/pull/645#issuecomment-744005989,"address #643
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com
Co-authored-by: Chen Lihui lihui.chen@sony.com","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,645,2020-12-09T00:05:16Z,2020-12-14T15:07:39Z,2020-12-14T15:07:39Z,MERGED,True,5,19,1,https://github.com/fujitatomoya,memory leak (#643),2,[],https://github.com/ros2/rclpy/pull/645,https://github.com/fujitatomoya,10,https://github.com/ros2/rclpy/pull/645#issuecomment-744095528,"address #643
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com
Co-authored-by: Chen Lihui lihui.chen@sony.com","@clalancette
CC: @iuhilnehc-ynos
I do not think any CI unstable reason and https://build.ros2.org/job/Rpr__rclpy__ubuntu_focal_amd64/144/ is related to this fix. (I cannot reproduce this error in local environment.) it is flaky and AFAIK it should use try & except statement to catch the exception in test code.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,645,2020-12-09T00:05:16Z,2020-12-14T15:07:39Z,2020-12-14T15:07:39Z,MERGED,True,5,19,1,https://github.com/fujitatomoya,memory leak (#643),2,[],https://github.com/ros2/rclpy/pull/645,https://github.com/fujitatomoya,11,https://github.com/ros2/rclpy/pull/645#issuecomment-744096944,"address #643
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com
Co-authored-by: Chen Lihui lihui.chen@sony.com","it is flaky and AFAIK it should use try & except statement to catch the exception in test code.

follow-up issue is created #648",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,645,2020-12-09T00:05:16Z,2020-12-14T15:07:39Z,2020-12-14T15:07:39Z,MERGED,True,5,19,1,https://github.com/fujitatomoya,memory leak (#643),2,[],https://github.com/ros2/rclpy/pull/645,https://github.com/clalancette,12,https://github.com/ros2/rclpy/pull/645#issuecomment-744502628,"address #643
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com
Co-authored-by: Chen Lihui lihui.chen@sony.com",I'm going to go ahead and merge this; all of the failing tests are unrelated.  Thanks for the fix and the iterations.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,646,2020-12-09T00:13:02Z,2020-12-15T23:00:05Z,2020-12-15T23:00:05Z,MERGED,True,5,19,1,https://github.com/fujitatomoya,[foxy] memory leak (#643),2,[],https://github.com/ros2/rclpy/pull/646,https://github.com/fujitatomoya,1,https://github.com/ros2/rclpy/pull/646,"#643 backport for foxy
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com
Co-authored-by: Chen Lihui lihui.chen@sony.com","#643 backport for foxy
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com
Co-authored-by: Chen Lihui lihui.chen@sony.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,646,2020-12-09T00:13:02Z,2020-12-15T23:00:05Z,2020-12-15T23:00:05Z,MERGED,True,5,19,1,https://github.com/fujitatomoya,[foxy] memory leak (#643),2,[],https://github.com/ros2/rclpy/pull/646,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/646#issuecomment-741289910,"#643 backport for foxy
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com
Co-authored-by: Chen Lihui lihui.chen@sony.com",CC: @iuhilnehc-ynos,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,646,2020-12-09T00:13:02Z,2020-12-15T23:00:05Z,2020-12-15T23:00:05Z,MERGED,True,5,19,1,https://github.com/fujitatomoya,[foxy] memory leak (#643),2,[],https://github.com/ros2/rclpy/pull/646,https://github.com/fujitatomoya,3,https://github.com/ros2/rclpy/pull/646#issuecomment-744867777,"#643 backport for foxy
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com
Co-authored-by: Chen Lihui lihui.chen@sony.com","@clalancette
this one is foxy backport of #645, could you also check?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,646,2020-12-09T00:13:02Z,2020-12-15T23:00:05Z,2020-12-15T23:00:05Z,MERGED,True,5,19,1,https://github.com/fujitatomoya,[foxy] memory leak (#643),2,[],https://github.com/ros2/rclpy/pull/646,https://github.com/clalancette,4,https://github.com/ros2/rclpy/pull/646#issuecomment-745274653,"#643 backport for foxy
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com
Co-authored-by: Chen Lihui lihui.chen@sony.com","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,646,2020-12-09T00:13:02Z,2020-12-15T23:00:05Z,2020-12-15T23:00:05Z,MERGED,True,5,19,1,https://github.com/fujitatomoya,[foxy] memory leak (#643),2,[],https://github.com/ros2/rclpy/pull/646,https://github.com/clalancette,5,https://github.com/ros2/rclpy/pull/646#issuecomment-745620176,"#643 backport for foxy
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com
Co-authored-by: Chen Lihui lihui.chen@sony.com","The test warnings are all coming from elsewhere, so I'm going to go ahead and merge this.  Thanks for the backport.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,647,2020-12-11T20:45:42Z,2020-12-11T22:10:47Z,2021-12-16T01:40:51Z,MERGED,True,1,0,1,https://github.com/ssumoo,added wake executor to Node.create_subscription to fix issue 628,1,[],https://github.com/ros2/rclpy/pull/647,https://github.com/ssumoo,1,https://github.com/ros2/rclpy/pull/647,"As @ivanpauno suggested, this PR fixes #628","As @ivanpauno suggested, this PR fixes #628",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,647,2020-12-11T20:45:42Z,2020-12-11T22:10:47Z,2021-12-16T01:40:51Z,MERGED,True,1,0,1,https://github.com/ssumoo,added wake executor to Node.create_subscription to fix issue 628,1,[],https://github.com/ros2/rclpy/pull/647,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/647#issuecomment-743437434,"As @ivanpauno suggested, this PR fixes #628","CI:

Linux 
Linux-aarch64 
macOS 
Windows  (unrelated warning)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,647,2020-12-11T20:45:42Z,2020-12-11T22:10:47Z,2021-12-16T01:40:51Z,MERGED,True,1,0,1,https://github.com/ssumoo,added wake executor to Node.create_subscription to fix issue 628,1,[],https://github.com/ros2/rclpy/pull/647,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/647#issuecomment-743453250,"As @ivanpauno suggested, this PR fixes #628",Thanks for the contribution @ssumoo !!,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,647,2020-12-11T20:45:42Z,2020-12-11T22:10:47Z,2021-12-16T01:40:51Z,MERGED,True,1,0,1,https://github.com/ssumoo,added wake executor to Node.create_subscription to fix issue 628,1,[],https://github.com/ros2/rclpy/pull/647,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/647#issuecomment-995362343,"As @ivanpauno suggested, this PR fixes #628",@Mergifyio backport galactic,True,{'THUMBS_UP': ['https://github.com/mergify%5Bbot%5D']}
ros2/rclpy,https://github.com/ros2/rclpy,647,2020-12-11T20:45:42Z,2020-12-11T22:10:47Z,2021-12-16T01:40:51Z,MERGED,True,1,0,1,https://github.com/ssumoo,added wake executor to Node.create_subscription to fix issue 628,1,[],https://github.com/ros2/rclpy/pull/647,https://github.com/apps/mergify,5,https://github.com/ros2/rclpy/pull/647#issuecomment-995362405,"As @ivanpauno suggested, this PR fixes #628","backport galactic

✅ Backports have been created


#866 added wake executor to Node.create_subscription to fix issue 628 (backport #647) has been created for branch galactic",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,649,2020-12-14T15:05:07Z,2020-12-15T00:16:59Z,2020-12-15T00:17:03Z,MERGED,True,11,1,1,https://github.com/clalancette,Don't throw an exception if timer canceled while sleeping.,3,[],https://github.com/ros2/rclpy/pull/649,https://github.com/clalancette,1,https://github.com/ros2/rclpy/pull/649,"It is a valid situation that may happen sometimes in threading,
so just quietly clean ourselves up and don't throw an
exception.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
This resolves the failures we are seeing in the latest CI builds, e.g. https://ci.ros2.org/view/nightly/job/nightly_linux-aarch64_debug/1447/testReport/junit/rclpy.rclpy.test/test_rate/test_shutdown_wakes_rate/ .
Here's a build where I ran the tests 10 times with this patch in place: https://ci.ros2.org/job/ci_linux-aarch64/8191/
@sloretz I'd appreciate a look by you, since you put this code in to start with.  I'm not sure if what I'm doing here is OK.","It is a valid situation that may happen sometimes in threading,
so just quietly clean ourselves up and don't throw an
exception.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
This resolves the failures we are seeing in the latest CI builds, e.g. https://ci.ros2.org/view/nightly/job/nightly_linux-aarch64_debug/1447/testReport/junit/rclpy.rclpy.test/test_rate/test_shutdown_wakes_rate/ .
Here's a build where I ran the tests 10 times with this patch in place: https://ci.ros2.org/job/ci_linux-aarch64/8191/
@sloretz I'd appreciate a look by you, since you put this code in to start with.  I'm not sure if what I'm doing here is OK.",True,{'EYES': ['https://github.com/sloretz']}
ros2/rclpy,https://github.com/ros2/rclpy,649,2020-12-14T15:05:07Z,2020-12-15T00:16:59Z,2020-12-15T00:17:03Z,MERGED,True,11,1,1,https://github.com/clalancette,Don't throw an exception if timer canceled while sleeping.,3,[],https://github.com/ros2/rclpy/pull/649,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/649#issuecomment-744634673,"It is a valid situation that may happen sometimes in threading,
so just quietly clean ourselves up and don't throw an
exception.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
This resolves the failures we are seeing in the latest CI builds, e.g. https://ci.ros2.org/view/nightly/job/nightly_linux-aarch64_debug/1447/testReport/junit/rclpy.rclpy.test/test_rate/test_shutdown_wakes_rate/ .
Here's a build where I ran the tests 10 times with this patch in place: https://ci.ros2.org/job/ci_linux-aarch64/8191/
@sloretz I'd appreciate a look by you, since you put this code in to start with.  I'm not sure if what I'm doing here is OK.","Likely fix: Catch ROSInteruptException in thread created by this test:
https://github.com/ros2/rclpy/blob/master/rclpy/test/test_rate.py#L114-L128
It looks like within the last month pytest started paying attention to exceptions in these daemon threads. pytest-dev/pytest@d50df85",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,649,2020-12-14T15:05:07Z,2020-12-15T00:16:59Z,2020-12-15T00:17:03Z,MERGED,True,11,1,1,https://github.com/clalancette,Don't throw an exception if timer canceled while sleeping.,3,[],https://github.com/ros2/rclpy/pull/649,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/649#issuecomment-744635597,"It is a valid situation that may happen sometimes in threading,
so just quietly clean ourselves up and don't throw an
exception.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
This resolves the failures we are seeing in the latest CI builds, e.g. https://ci.ros2.org/view/nightly/job/nightly_linux-aarch64_debug/1447/testReport/junit/rclpy.rclpy.test/test_rate/test_shutdown_wakes_rate/ .
Here's a build where I ran the tests 10 times with this patch in place: https://ci.ros2.org/job/ci_linux-aarch64/8191/
@sloretz I'd appreciate a look by you, since you put this code in to start with.  I'm not sure if what I'm doing here is OK.","It looks like within the last month pytest started paying attention to exceptions in these daemon threads. pytest-dev/pytest@d50df85

Ah!  Good catch, that is likely what caused us to start failing the test.

Likely fix: Catch ROSInteruptException in thread created by this test:
https://github.com/ros2/rclpy/blob/master/rclpy/test/test_rate.py#L114-L128

I considered that before doing this, and that would also fix the current problem.  But it also means that all downstream consumers of rate.sleep also have to do this to be ready for this situation.  Is that the API we are going for?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,649,2020-12-14T15:05:07Z,2020-12-15T00:16:59Z,2020-12-15T00:17:03Z,MERGED,True,11,1,1,https://github.com/clalancette,Don't throw an exception if timer canceled while sleeping.,3,[],https://github.com/ros2/rclpy/pull/649,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/649#issuecomment-744637879,"It is a valid situation that may happen sometimes in threading,
so just quietly clean ourselves up and don't throw an
exception.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
This resolves the failures we are seeing in the latest CI builds, e.g. https://ci.ros2.org/view/nightly/job/nightly_linux-aarch64_debug/1447/testReport/junit/rclpy.rclpy.test/test_rate/test_shutdown_wakes_rate/ .
Here's a build where I ran the tests 10 times with this patch in place: https://ci.ros2.org/job/ci_linux-aarch64/8191/
@sloretz I'd appreciate a look by you, since you put this code in to start with.  I'm not sure if what I'm doing here is OK.","But it also means that all downstream consumers of rate.sleep also have to do this to be ready for this situation. Is that the API we are going for?

I think it's a good idea. It lets downstream code know that rate.sleep() has woken early, and why. ROS 1 Rate raises the same exception.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,649,2020-12-14T15:05:07Z,2020-12-15T00:16:59Z,2020-12-15T00:17:03Z,MERGED,True,11,1,1,https://github.com/clalancette,Don't throw an exception if timer canceled while sleeping.,3,[],https://github.com/ros2/rclpy/pull/649,https://github.com/clalancette,5,https://github.com/ros2/rclpy/pull/649#issuecomment-744639032,"It is a valid situation that may happen sometimes in threading,
so just quietly clean ourselves up and don't throw an
exception.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
This resolves the failures we are seeing in the latest CI builds, e.g. https://ci.ros2.org/view/nightly/job/nightly_linux-aarch64_debug/1447/testReport/junit/rclpy.rclpy.test/test_rate/test_shutdown_wakes_rate/ .
Here's a build where I ran the tests 10 times with this patch in place: https://ci.ros2.org/job/ci_linux-aarch64/8191/
@sloretz I'd appreciate a look by you, since you put this code in to start with.  I'm not sure if what I'm doing here is OK.","I think it's a good idea. It lets downstream code know that rate.sleep() has woken early, and why. ROS 1 Rate raises the same exception.

All right, sounds good.  I'll change this to catch the exception in the test instead.  Thanks for the feedback.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,649,2020-12-14T15:05:07Z,2020-12-15T00:16:59Z,2020-12-15T00:17:03Z,MERGED,True,11,1,1,https://github.com/clalancette,Don't throw an exception if timer canceled while sleeping.,3,[],https://github.com/ros2/rclpy/pull/649,https://github.com/clalancette,6,https://github.com/ros2/rclpy/pull/649#issuecomment-744684005,"It is a valid situation that may happen sometimes in threading,
so just quietly clean ourselves up and don't throw an
exception.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
This resolves the failures we are seeing in the latest CI builds, e.g. https://ci.ros2.org/view/nightly/job/nightly_linux-aarch64_debug/1447/testReport/junit/rclpy.rclpy.test/test_rate/test_shutdown_wakes_rate/ .
Here's a build where I ran the tests 10 times with this patch in place: https://ci.ros2.org/job/ci_linux-aarch64/8191/
@sloretz I'd appreciate a look by you, since you put this code in to start with.  I'm not sure if what I'm doing here is OK.","I've changed the test to catch the exception now.  @sloretz please take another look.  In the meantime, here is CI (--packages-select rclpy --retest-until-fail 2):

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,649,2020-12-14T15:05:07Z,2020-12-15T00:16:59Z,2020-12-15T00:17:03Z,MERGED,True,11,1,1,https://github.com/clalancette,Don't throw an exception if timer canceled while sleeping.,3,[],https://github.com/ros2/rclpy/pull/649,https://github.com/clalancette,7,https://github.com/ros2/rclpy/pull/649#issuecomment-744699320,"It is a valid situation that may happen sometimes in threading,
so just quietly clean ourselves up and don't throw an
exception.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
This resolves the failures we are seeing in the latest CI builds, e.g. https://ci.ros2.org/view/nightly/job/nightly_linux-aarch64_debug/1447/testReport/junit/rclpy.rclpy.test/test_rate/test_shutdown_wakes_rate/ .
Here's a build where I ran the tests 10 times with this patch in place: https://ci.ros2.org/job/ci_linux-aarch64/8191/
@sloretz I'd appreciate a look by you, since you put this code in to start with.  I'm not sure if what I'm doing here is OK.","New CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,650,2020-12-15T19:35:17Z,2020-12-16T16:46:51Z,2020-12-16T16:46:55Z,MERGED,True,11,1,1,https://github.com/clalancette,[Foxy backport]: Make sure to catch the ROSInterruptException when calling rate.sleep. (#649),1,[],https://github.com/ros2/rclpy/pull/650,https://github.com/clalancette,1,https://github.com/ros2/rclpy/pull/650,"This ensures that we don't get an exception in the extra
thread, which as of pytest 6.2.0 also causes an exception in
the main program.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","This ensures that we don't get an exception in the extra
thread, which as of pytest 6.2.0 also causes an exception in
the main program.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,650,2020-12-15T19:35:17Z,2020-12-16T16:46:51Z,2020-12-16T16:46:55Z,MERGED,True,11,1,1,https://github.com/clalancette,[Foxy backport]: Make sure to catch the ROSInterruptException when calling rate.sleep. (#649),1,[],https://github.com/ros2/rclpy/pull/650,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/650#issuecomment-745524484,"This ensures that we don't get an exception in the extra
thread, which as of pytest 6.2.0 also causes an exception in
the main program.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,650,2020-12-15T19:35:17Z,2020-12-16T16:46:51Z,2020-12-16T16:46:55Z,MERGED,True,11,1,1,https://github.com/clalancette,[Foxy backport]: Make sure to catch the ROSInterruptException when calling rate.sleep. (#649),1,[],https://github.com/ros2/rclpy/pull/650,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/650#issuecomment-746613472,"This ensures that we don't get an exception in the extra
thread, which as of pytest 6.2.0 also causes an exception in
the main program.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","The test failures on macOS and Windows are unrelated, so merging.  Thanks for the backport.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,651,2020-12-22T19:38:32Z,2020-12-22T22:44:38Z,2020-12-22T22:44:42Z,CLOSED,False,16,4,2,https://github.com/sloretz,Use Pybind11's CMake functions for pycapsule lib,3,[],https://github.com/ros2/rclpy/pull/651,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/651,"This is a small check to see if Pybind11's CMake function works on all
platforms. It works fine locally on Linux Ubuntu Focal using CMAKE_BUILD_TYPE=Debug.
@cottsay @IanTheEngineer FYI","This is a small check to see if Pybind11's CMake function works on all
platforms. It works fine locally on Linux Ubuntu Focal using CMAKE_BUILD_TYPE=Debug.
@cottsay @IanTheEngineer FYI",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,651,2020-12-22T19:38:32Z,2020-12-22T22:44:38Z,2020-12-22T22:44:42Z,CLOSED,False,16,4,2,https://github.com/sloretz,Use Pybind11's CMake functions for pycapsule lib,3,[],https://github.com/ros2/rclpy/pull/651,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/651#issuecomment-749738918,"This is a small check to see if Pybind11's CMake function works on all
platforms. It works fine locally on Linux Ubuntu Focal using CMAKE_BUILD_TYPE=Debug.
@cottsay @IanTheEngineer FYI","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,651,2020-12-22T19:38:32Z,2020-12-22T22:44:38Z,2020-12-22T22:44:42Z,CLOSED,False,16,4,2,https://github.com/sloretz,Use Pybind11's CMake functions for pycapsule lib,3,[],https://github.com/ros2/rclpy/pull/651,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/651#issuecomment-749794173,"This is a small check to see if Pybind11's CMake function works on all
platforms. It works fine locally on Linux Ubuntu Focal using CMAKE_BUILD_TYPE=Debug.
@cottsay @IanTheEngineer FYI",Windows with eeb8439,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,651,2020-12-22T19:38:32Z,2020-12-22T22:44:38Z,2020-12-22T22:44:42Z,CLOSED,False,16,4,2,https://github.com/sloretz,Use Pybind11's CMake functions for pycapsule lib,3,[],https://github.com/ros2/rclpy/pull/651,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/651#issuecomment-749816269,"This is a small check to see if Pybind11's CMake function works on all
platforms. It works fine locally on Linux Ubuntu Focal using CMAKE_BUILD_TYPE=Debug.
@cottsay @IanTheEngineer FYI",Think I learned all I wanted to from this PR. Closing and following up with #652,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,652,2020-12-22T22:44:03Z,2021-02-23T19:02:16Z,2021-02-23T19:02:18Z,MERGED,True,84,151,3,https://github.com/sloretz,Update just pycapsule lib to use pybind11,3,[],https://github.com/ros2/rclpy/pull/652,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/652,"Follow up test from #651
This updates the _rclpy_pycapsule lib to use Pybind11 instead of raw CPython APIs where possible. Pybind11 would enable rclpy to not use pycapsule at all if we made some thin C++ classes, but that would take a bit of refactoring. This PR looks at translating the APIs to pybind11 without any changes. This might be a good intermediate step in moving rclpy to pybind11.
@cottsay @IanTheEngineer FYI","Follow up test from #651
This updates the _rclpy_pycapsule lib to use Pybind11 instead of raw CPython APIs where possible. Pybind11 would enable rclpy to not use pycapsule at all if we made some thin C++ classes, but that would take a bit of refactoring. This PR looks at translating the APIs to pybind11 without any changes. This might be a good intermediate step in moving rclpy to pybind11.
@cottsay @IanTheEngineer FYI",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,652,2020-12-22T22:44:03Z,2021-02-23T19:02:16Z,2021-02-23T19:02:18Z,MERGED,True,84,151,3,https://github.com/sloretz,Update just pycapsule lib to use pybind11,3,[],https://github.com/ros2/rclpy/pull/652,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/652#issuecomment-749816581,"Follow up test from #651
This updates the _rclpy_pycapsule lib to use Pybind11 instead of raw CPython APIs where possible. Pybind11 would enable rclpy to not use pycapsule at all if we made some thin C++ classes, but that would take a bit of refactoring. This PR looks at translating the APIs to pybind11 without any changes. This might be a good intermediate step in moving rclpy to pybind11.
@cottsay @IanTheEngineer FYI","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,652,2020-12-22T22:44:03Z,2021-02-23T19:02:16Z,2021-02-23T19:02:18Z,MERGED,True,84,151,3,https://github.com/sloretz,Update just pycapsule lib to use pybind11,3,[],https://github.com/ros2/rclpy/pull/652,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/652#issuecomment-749821571,"Follow up test from #651
This updates the _rclpy_pycapsule lib to use Pybind11 instead of raw CPython APIs where possible. Pybind11 would enable rclpy to not use pycapsule at all if we made some thin C++ classes, but that would take a bit of refactoring. This PR looks at translating the APIs to pybind11 without any changes. This might be a good intermediate step in moving rclpy to pybind11.
@cottsay @IanTheEngineer FYI","Code size increase
Build type Debug
The size of the pybind11 version is almost 50 times bigger than master
master
$ ls -l _rclpy_pycapsule.cpython-38-x86_64-linux-gnu.so
-rw-r--r-- 1 sloretz sloretz 36608 Dec 22 14:54 _rclpy_pycapsule.cpython-38-x86_64-linux-gnu.so
this branch
$ ls -l _rclpy_pycapsule.cpython-38-x86_64-linux-gnu.so 
-rw-r--r-- 1 sloretz sloretz 1810720 Dec 22 14:52 _rclpy_pycapsule.cpython-38-x86_64-linux-gnu.so
Build type None
The size of the pybind11 version is a little over 13 times bigger than master
master
$ ls -l _rclpy_pycapsule.cpython-38-x86_64-linux-gnu.so
-rw-r--r-- 1 sloretz sloretz 17408 Dec 22 14:58 _rclpy_pycapsule.cpython-38-x86_64-linux-gnu.so
this branch
$ ls -l _rclpy_pycapsule.cpython-38-x86_64-linux-gnu.so
-rw-r--r-- 1 sloretz sloretz 232800 Dec 22 14:59 _rclpy_pycapsule.cpython-38-x86_64-linux-gnu.so
Build type Release
The size of the pybind11 version is a little over 5 times bigger than master
master
$  ls -l _rclpy_pycapsule.cpython-38-x86_64-linux-gnu.so
-rw-r--r-- 1 sloretz sloretz 17400 Dec 22 15:02 _rclpy_pycapsule.cpython-38-x86_64-linux-gnu.so
this branch
$ ls -l _rclpy_pycapsule.cpython-38-x86_64-linux-gnu.so
-rw-r--r-- 1 sloretz sloretz 93304 Dec 22 15:01 _rclpy_pycapsule.cpython-38-x86_64-linux-gnu.so",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,652,2020-12-22T22:44:03Z,2021-02-23T19:02:16Z,2021-02-23T19:02:18Z,MERGED,True,84,151,3,https://github.com/sloretz,Update just pycapsule lib to use pybind11,3,[],https://github.com/ros2/rclpy/pull/652,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/652#issuecomment-755575114,"Follow up test from #651
This updates the _rclpy_pycapsule lib to use Pybind11 instead of raw CPython APIs where possible. Pybind11 would enable rclpy to not use pycapsule at all if we made some thin C++ classes, but that would take a bit of refactoring. This PR looks at translating the APIs to pybind11 without any changes. This might be a good intermediate step in moving rclpy to pybind11.
@cottsay @IanTheEngineer FYI",@azeey FYI,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,652,2020-12-22T22:44:03Z,2021-02-23T19:02:16Z,2021-02-23T19:02:18Z,MERGED,True,84,151,3,https://github.com/sloretz,Update just pycapsule lib to use pybind11,3,[],https://github.com/ros2/rclpy/pull/652,https://github.com/clalancette,5,https://github.com/ros2/rclpy/pull/652#issuecomment-755753654,"Follow up test from #651
This updates the _rclpy_pycapsule lib to use Pybind11 instead of raw CPython APIs where possible. Pybind11 would enable rclpy to not use pycapsule at all if we made some thin C++ classes, but that would take a bit of refactoring. This PR looks at translating the APIs to pybind11 without any changes. This might be a good intermediate step in moving rclpy to pybind11.
@cottsay @IanTheEngineer FYI","A 5 times code size increase (at best) seems like a lot for what is essentially a lateral move for this code.  If you are using the Python bindings at all, code size and performance are probably not your top concern, but it is still very large.  The question I have to ask is: given that we already have a working version of the hand-coded version of this library, does the move to pybind11 still make sense?  That is, does the move have enough benefits that we are willing to take a 5-50 times increase in compiled code size?
I don't have a good answer for that, and I'll leave it to the maintainers of rclpy to answer.  But I do think it should be considered.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,652,2020-12-22T22:44:03Z,2021-02-23T19:02:16Z,2021-02-23T19:02:18Z,MERGED,True,84,151,3,https://github.com/sloretz,Update just pycapsule lib to use pybind11,3,[],https://github.com/ros2/rclpy/pull/652,https://github.com/ivanpauno,6,https://github.com/ros2/rclpy/pull/652#issuecomment-758875512,"Follow up test from #651
This updates the _rclpy_pycapsule lib to use Pybind11 instead of raw CPython APIs where possible. Pybind11 would enable rclpy to not use pycapsule at all if we made some thin C++ classes, but that would take a bit of refactoring. This PR looks at translating the APIs to pybind11 without any changes. This might be a good intermediate step in moving rclpy to pybind11.
@cottsay @IanTheEngineer FYI","does the move to pybind11 still make sense?

IMO, one of the biggest pain points of the current implementation is object lifetimes.
RCL objects may keep a reference of other rcl objects and then you need to destroy them in order, and when creating bindings to a garbage collected language that's a nightmare.
If we move to pybind11 and don't use capsules at all, pybind11 smart pointers support might make things a lot easier.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,652,2020-12-22T22:44:03Z,2021-02-23T19:02:16Z,2021-02-23T19:02:18Z,MERGED,True,84,151,3,https://github.com/sloretz,Update just pycapsule lib to use pybind11,3,[],https://github.com/ros2/rclpy/pull/652,https://github.com/emersonknapp,7,https://github.com/ros2/rclpy/pull/652#issuecomment-758891399,"Follow up test from #651
This updates the _rclpy_pycapsule lib to use Pybind11 instead of raw CPython APIs where possible. Pybind11 would enable rclpy to not use pycapsule at all if we made some thin C++ classes, but that would take a bit of refactoring. This PR looks at translating the APIs to pybind11 without any changes. This might be a good intermediate step in moving rclpy to pybind11.
@cottsay @IanTheEngineer FYI","I'll also note that we could do a C++ implementation, and manage object lifetimes via C++ destructors - there's nothing forcing us to do a pure-c implementation as far as I can tell. If we created simple C++ wrapper objects for the CPython API objects - it would probably remove a lot of the lifetime management code. These might be easier to expose with pybind, as well.
Has it been considered to just selectively expose rclcpp to Python to implement rclpy functionality? This may have drawbacks I haven't considered.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,652,2020-12-22T22:44:03Z,2021-02-23T19:02:16Z,2021-02-23T19:02:18Z,MERGED,True,84,151,3,https://github.com/sloretz,Update just pycapsule lib to use pybind11,3,[],https://github.com/ros2/rclpy/pull/652,https://github.com/sloretz,8,https://github.com/ros2/rclpy/pull/652#issuecomment-764964500,"Follow up test from #651
This updates the _rclpy_pycapsule lib to use Pybind11 instead of raw CPython APIs where possible. Pybind11 would enable rclpy to not use pycapsule at all if we made some thin C++ classes, but that would take a bit of refactoring. This PR looks at translating the APIs to pybind11 without any changes. This might be a good intermediate step in moving rclpy to pybind11.
@cottsay @IanTheEngineer FYI","Rebased on #667

I'll also note that we could do a C++ implementation, and manage object lifetimes via C++ destructors

@emersonknapp Definitely. Converting 1-to-1 is a hopefully quick process that will uncover any spots that are sensitive to pybind11's overhead. Using C++ and RAII comes after and adds a lot of benefit. You might be interested in the doc in #665.",True,{'THUMBS_UP': ['https://github.com/emersonknapp']}
ros2/rclpy,https://github.com/ros2/rclpy,652,2020-12-22T22:44:03Z,2021-02-23T19:02:16Z,2021-02-23T19:02:18Z,MERGED,True,84,151,3,https://github.com/sloretz,Update just pycapsule lib to use pybind11,3,[],https://github.com/ros2/rclpy/pull/652,https://github.com/sloretz,9,https://github.com/ros2/rclpy/pull/652#issuecomment-784400223,"Follow up test from #651
This updates the _rclpy_pycapsule lib to use Pybind11 instead of raw CPython APIs where possible. Pybind11 would enable rclpy to not use pycapsule at all if we made some thin C++ classes, but that would take a bit of refactoring. This PR looks at translating the APIs to pybind11 without any changes. This might be a good intermediate step in moving rclpy to pybind11.
@cottsay @IanTheEngineer FYI","CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,653,2020-12-29T10:33:30Z,2020-12-30T18:29:35Z,2020-12-31T10:28:42Z,MERGED,True,21,2,2,https://github.com/goekce,include qos_profile_* constants in documentation,2,[],https://github.com/ros2/rclpy/pull/653,https://github.com/goekce,1,https://github.com/ros2/rclpy/pull/653,"This PR makes qos_profile_* constants in QoS documentation visible. Their usage is recommended on https://index.ros.org/doc/ros2/Releases/Release-Dashing-Diademata/#rclpy but hiding them in the documentation may confuse users.
The problem is that sphinx-autodoc currently does not include module-level variables, unless these variables include #: style comments. See sphinx-doc/sphinx#1063
I did not look into source files other than qos.py, because including variables using this workaround is tedious. It is better to wait for sphinx-doc/sphinx#1063
Note that this PR is only for foxy.
fixes the issue: ros2/docs.ros2.org#49","This PR makes qos_profile_* constants in QoS documentation visible. Their usage is recommended on https://index.ros.org/doc/ros2/Releases/Release-Dashing-Diademata/#rclpy but hiding them in the documentation may confuse users.
The problem is that sphinx-autodoc currently does not include module-level variables, unless these variables include #: style comments. See sphinx-doc/sphinx#1063
I did not look into source files other than qos.py, because including variables using this workaround is tedious. It is better to wait for sphinx-doc/sphinx#1063
Note that this PR is only for foxy.
fixes the issue: ros2/docs.ros2.org#49",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,653,2020-12-29T10:33:30Z,2020-12-30T18:29:35Z,2020-12-31T10:28:42Z,MERGED,True,21,2,2,https://github.com/goekce,include qos_profile_* constants in documentation,2,[],https://github.com/ros2/rclpy/pull/653,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/653#issuecomment-752197756,"This PR makes qos_profile_* constants in QoS documentation visible. Their usage is recommended on https://index.ros.org/doc/ros2/Releases/Release-Dashing-Diademata/#rclpy but hiding them in the documentation may confuse users.
The problem is that sphinx-autodoc currently does not include module-level variables, unless these variables include #: style comments. See sphinx-doc/sphinx#1063
I did not look into source files other than qos.py, because including variables using this workaround is tedious. It is better to wait for sphinx-doc/sphinx#1063
Note that this PR is only for foxy.
fixes the issue: ros2/docs.ros2.org#49","@goekce Note, we enforce that contributors ""sign"" the Developer Certificate of Origin (DCO) (hence the failing DCO check). Please take a look at our developer guide and ""sign-off"" on all of your commits when contributing to the ROS 2 project.",True,{'THUMBS_UP': ['https://github.com/goekce']}
ros2/rclpy,https://github.com/ros2/rclpy,654,2020-12-30T19:23:02Z,2021-01-04T03:34:06Z,2021-01-04T03:34:09Z,MERGED,True,21,2,2,https://github.com/jacobperron,Document qos_profile_* constants,2,['documentation'],https://github.com/ros2/rclpy/pull/654,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/654,"Forward port of #653 (from Foxy).
I plan to keep the two commits separate when merging.","Forward port of #653 (from Foxy).
I plan to keep the two commits separate when merging.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,654,2020-12-30T19:23:02Z,2021-01-04T03:34:06Z,2021-01-04T03:34:09Z,MERGED,True,21,2,2,https://github.com/jacobperron,Document qos_profile_* constants,2,['documentation'],https://github.com/ros2/rclpy/pull/654,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/654#issuecomment-752731267,"Forward port of #653 (from Foxy).
I plan to keep the two commits separate when merging.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,654,2020-12-30T19:23:02Z,2021-01-04T03:34:06Z,2021-01-04T03:34:09Z,MERGED,True,21,2,2,https://github.com/jacobperron,Document qos_profile_* constants,2,['documentation'],https://github.com/ros2/rclpy/pull/654,https://github.com/jacobperron,3,https://github.com/ros2/rclpy/pull/654#issuecomment-753732298,"Forward port of #653 (from Foxy).
I plan to keep the two commits separate when merging.","I think this repo has new PRs landing on master with backporting to older branches happening afterwards. It looks a little backwards in this case, though I don't think that will break anything.

Yeah, you're right. I was going to ask the contributor to re-target the original PR to master, but figured opening up a forward port was easy enough as the change is documentation only.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,654,2020-12-30T19:23:02Z,2021-01-04T03:34:06Z,2021-01-04T03:34:09Z,MERGED,True,21,2,2,https://github.com/jacobperron,Document qos_profile_* constants,2,['documentation'],https://github.com/ros2/rclpy/pull/654,https://github.com/jacobperron,4,https://github.com/ros2/rclpy/pull/654#issuecomment-753732485,"Forward port of #653 (from Foxy).
I plan to keep the two commits separate when merging.",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,655,2020-12-30T19:34:42Z,2021-01-04T05:13:00Z,2021-01-04T05:13:03Z,MERGED,True,1,1,1,https://github.com/jacobperron,Fix docstring indent error in create_node,1,"['bug', 'documentation']",https://github.com/ros2/rclpy/pull/655,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/655,This fixes a sphinx warning 'Definition list ends without a blank line; unexpected unindent',This fixes a sphinx warning 'Definition list ends without a blank line; unexpected unindent',True,{}
ros2/rclpy,https://github.com/ros2/rclpy,655,2020-12-30T19:34:42Z,2021-01-04T05:13:00Z,2021-01-04T05:13:03Z,MERGED,True,1,1,1,https://github.com/jacobperron,Fix docstring indent error in create_node,1,"['bug', 'documentation']",https://github.com/ros2/rclpy/pull/655,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/655#issuecomment-753739301,This fixes a sphinx warning 'Definition list ends without a blank line; unexpected unindent',@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,656,2021-01-08T01:47:25Z,2021-01-21T18:41:44Z,2021-01-21T18:41:47Z,CLOSED,False,301,393,8,https://github.com/sloretz,Use CFFI to generate _rclpy_logging,7,[],https://github.com/ros2/rclpy/pull/656,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/656,"This is a prototype using the python-cffi to generate the CPython extension instead of writing it ourselves. This pull request replaces _rclpy_logging with it. This is an alternative to pybind11 and #652.
CFFI works by giving it a definition file and a bit of extra C code with all the includes for those definitions, and asking it to generate a CPython extension. That extension is then compiled by CMake, and used in the Python code. In the case of _rclpy_logging it gets rid of all the manual CPython extension writing, and in the process moving all the logic that was in C into Python instead.
@cottsay @IanTheEngineer @azeey FYI","This is a prototype using the python-cffi to generate the CPython extension instead of writing it ourselves. This pull request replaces _rclpy_logging with it. This is an alternative to pybind11 and #652.
CFFI works by giving it a definition file and a bit of extra C code with all the includes for those definitions, and asking it to generate a CPython extension. That extension is then compiled by CMake, and used in the Python code. In the case of _rclpy_logging it gets rid of all the manual CPython extension writing, and in the process moving all the logic that was in C into Python instead.
@cottsay @IanTheEngineer @azeey FYI",True,"{'HOORAY': ['https://github.com/emersonknapp'], 'ROCKET': ['https://github.com/emersonknapp']}"
ros2/rclpy,https://github.com/ros2/rclpy,656,2021-01-08T01:47:25Z,2021-01-21T18:41:44Z,2021-01-21T18:41:47Z,CLOSED,False,301,393,8,https://github.com/sloretz,Use CFFI to generate _rclpy_logging,7,[],https://github.com/ros2/rclpy/pull/656,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/656#issuecomment-756495572,"This is a prototype using the python-cffi to generate the CPython extension instead of writing it ourselves. This pull request replaces _rclpy_logging with it. This is an alternative to pybind11 and #652.
CFFI works by giving it a definition file and a bit of extra C code with all the includes for those definitions, and asking it to generate a CPython extension. That extension is then compiled by CMake, and used in the Python code. In the case of _rclpy_logging it gets rid of all the manual CPython extension writing, and in the process moving all the logic that was in C into Python instead.
@cottsay @IanTheEngineer @azeey FYI","Code size comparison - very minimal increase, likely because this approach exposes more C functions and types to Python.
CMAKE_BUILD_TYPE=Debug master branch
-rw-r--r-- 1 sloretz sloretz 45K Jan  7 17:47 install/rclpy/lib/python3.8/site-packages/rclpy/_rclpy_logging.cpython-38-x86_64-linux-gnu.so
CMAKE_BUILD_TYPE=Debug this PR's branch
-rw-r--r-- 1 sloretz sloretz 53K Jan  7 17:37 install/rclpy/lib/python3.8/site-packages/rclpy/_rclpy_logging.cpython-38-x86_64-linux-gnu.so",True,{'HOORAY': ['https://github.com/clalancette']}
ros2/rclpy,https://github.com/ros2/rclpy,656,2021-01-08T01:47:25Z,2021-01-21T18:41:44Z,2021-01-21T18:41:47Z,CLOSED,False,301,393,8,https://github.com/sloretz,Use CFFI to generate _rclpy_logging,7,[],https://github.com/ros2/rclpy/pull/656,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/656#issuecomment-756902589,"This is a prototype using the python-cffi to generate the CPython extension instead of writing it ourselves. This pull request replaces _rclpy_logging with it. This is an alternative to pybind11 and #652.
CFFI works by giving it a definition file and a bit of extra C code with all the includes for those definitions, and asking it to generate a CPython extension. That extension is then compiled by CMake, and used in the Python code. In the case of _rclpy_logging it gets rid of all the manual CPython extension writing, and in the process moving all the logic that was in C into Python instead.
@cottsay @IanTheEngineer @azeey FYI","CI (build: --packages-above-and-dependencies rclpy test: --packages-above rclpy CI branch: add_python3_cffi)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,656,2021-01-08T01:47:25Z,2021-01-21T18:41:44Z,2021-01-21T18:41:47Z,CLOSED,False,301,393,8,https://github.com/sloretz,Use CFFI to generate _rclpy_logging,7,[],https://github.com/ros2/rclpy/pull/656,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/656#issuecomment-757044937,"This is a prototype using the python-cffi to generate the CPython extension instead of writing it ourselves. This pull request replaces _rclpy_logging with it. This is an alternative to pybind11 and #652.
CFFI works by giving it a definition file and a bit of extra C code with all the includes for those definitions, and asking it to generate a CPython extension. That extension is then compiled by CMake, and used in the Python code. In the case of _rclpy_logging it gets rid of all the manual CPython extension writing, and in the process moving all the logic that was in C into Python instead.
@cottsay @IanTheEngineer @azeey FYI","CI again with two new commits + rebased ros2/ci#531 for flak8 workaround

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,656,2021-01-08T01:47:25Z,2021-01-21T18:41:44Z,2021-01-21T18:41:47Z,CLOSED,False,301,393,8,https://github.com/sloretz,Use CFFI to generate _rclpy_logging,7,[],https://github.com/ros2/rclpy/pull/656,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/656#issuecomment-757078017,"This is a prototype using the python-cffi to generate the CPython extension instead of writing it ourselves. This pull request replaces _rclpy_logging with it. This is an alternative to pybind11 and #652.
CFFI works by giving it a definition file and a bit of extra C code with all the includes for those definitions, and asking it to generate a CPython extension. That extension is then compiled by CMake, and used in the Python code. In the case of _rclpy_logging it gets rid of all the manual CPython extension writing, and in the process moving all the logic that was in C into Python instead.
@cottsay @IanTheEngineer @azeey FYI",Windows again with debug code:,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,656,2021-01-08T01:47:25Z,2021-01-21T18:41:44Z,2021-01-21T18:41:47Z,CLOSED,False,301,393,8,https://github.com/sloretz,Use CFFI to generate _rclpy_logging,7,[],https://github.com/ros2/rclpy/pull/656,https://github.com/ivanpauno,6,https://github.com/ros2/rclpy/pull/656#issuecomment-758876781,"This is a prototype using the python-cffi to generate the CPython extension instead of writing it ourselves. This pull request replaces _rclpy_logging with it. This is an alternative to pybind11 and #652.
CFFI works by giving it a definition file and a bit of extra C code with all the includes for those definitions, and asking it to generate a CPython extension. That extension is then compiled by CMake, and used in the Python code. In the case of _rclpy_logging it gets rid of all the manual CPython extension writing, and in the process moving all the logic that was in C into Python instead.
@cottsay @IanTheEngineer @azeey FYI","Related to the comment here, I think that if we use cffi for all our bindings ensuring that objects are destroyed in the correct order will be quite complicated.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,656,2021-01-08T01:47:25Z,2021-01-21T18:41:44Z,2021-01-21T18:41:47Z,CLOSED,False,301,393,8,https://github.com/sloretz,Use CFFI to generate _rclpy_logging,7,[],https://github.com/ros2/rclpy/pull/656,https://github.com/sloretz,7,https://github.com/ros2/rclpy/pull/656#issuecomment-758881775,"This is a prototype using the python-cffi to generate the CPython extension instead of writing it ourselves. This pull request replaces _rclpy_logging with it. This is an alternative to pybind11 and #652.
CFFI works by giving it a definition file and a bit of extra C code with all the includes for those definitions, and asking it to generate a CPython extension. That extension is then compiled by CMake, and used in the Python code. In the case of _rclpy_logging it gets rid of all the manual CPython extension writing, and in the process moving all the logic that was in C into Python instead.
@cottsay @IanTheEngineer @azeey FYI","Related to the comment here, I think that if we use cffi for all our bindings ensuring that objects are destroyed in the correct order will be quite complicated.

Yeah, making sure publishers are destroyed before nodes etc is more complicated than what can be done with Pybind11. CFFI offers essentially the same capability as pycapsule destructors, so it would be about the same complexity as it is now.
Upstream thoughts on destruction order
https://foss.heptapod.net/pypy/cffi/-/issues/340",True,{'THUMBS_UP': ['https://github.com/ivanpauno']}
ros2/rclpy,https://github.com/ros2/rclpy,656,2021-01-08T01:47:25Z,2021-01-21T18:41:44Z,2021-01-21T18:41:47Z,CLOSED,False,301,393,8,https://github.com/sloretz,Use CFFI to generate _rclpy_logging,7,[],https://github.com/ros2/rclpy/pull/656,https://github.com/sloretz,8,https://github.com/ros2/rclpy/pull/656#issuecomment-764855969,"This is a prototype using the python-cffi to generate the CPython extension instead of writing it ourselves. This pull request replaces _rclpy_logging with it. This is an alternative to pybind11 and #652.
CFFI works by giving it a definition file and a bit of extra C code with all the includes for those definitions, and asking it to generate a CPython extension. That extension is then compiled by CMake, and used in the Python code. In the case of _rclpy_logging it gets rid of all the manual CPython extension writing, and in the process moving all the logic that was in C into Python instead.
@cottsay @IanTheEngineer @azeey FYI",Closing; future work in #665,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,657,2021-01-08T18:39:40Z,2021-01-11T15:10:52Z,2021-01-11T15:10:56Z,MERGED,True,52,0,5,https://github.com/ivanpauno,Add method to get the current logging directory,3,['enhancement'],https://github.com/ros2/rclpy/pull/657,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/657,Similar to ros2/rclcpp#1509.,Similar to ros2/rclcpp#1509.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,657,2021-01-08T18:39:40Z,2021-01-11T15:10:52Z,2021-01-11T15:10:56Z,MERGED,True,52,0,5,https://github.com/ivanpauno,Add method to get the current logging directory,3,['enhancement'],https://github.com/ros2/rclpy/pull/657,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/657#issuecomment-757002895,Similar to ros2/rclcpp#1509.,"CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,659,2021-01-13T17:55:58Z,2021-02-26T16:50:26Z,2021-02-26T16:50:29Z,MERGED,True,199,370,4,https://github.com/sloretz,Use Pybind11 to generate _rclpy_logging,5,[],https://github.com/ros2/rclpy/pull/659,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/659,"This is a prototype PR meant to be used for an apples-to-apples comparison with #656.
Updated to convert _rclpy_logging to use pybind11, part of #665
@azeey @IanTheEngineer @cottsay FYI","This is a prototype PR meant to be used for an apples-to-apples comparison with #656.
Updated to convert _rclpy_logging to use pybind11, part of #665
@azeey @IanTheEngineer @cottsay FYI",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,659,2021-01-13T17:55:58Z,2021-02-26T16:50:26Z,2021-02-26T16:50:29Z,MERGED,True,199,370,4,https://github.com/sloretz,Use Pybind11 to generate _rclpy_logging,5,[],https://github.com/ros2/rclpy/pull/659,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/659#issuecomment-764970410,"This is a prototype PR meant to be used for an apples-to-apples comparison with #656.
Updated to convert _rclpy_logging to use pybind11, part of #665
@azeey @IanTheEngineer @cottsay FYI",Rebased on #667,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,659,2021-01-13T17:55:58Z,2021-02-26T16:50:26Z,2021-02-26T16:50:29Z,MERGED,True,199,370,4,https://github.com/sloretz,Use Pybind11 to generate _rclpy_logging,5,[],https://github.com/ros2/rclpy/pull/659,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/659#issuecomment-786340836,"This is a prototype PR meant to be used for an apples-to-apples comparison with #656.
Updated to convert _rclpy_logging to use pybind11, part of #665
@azeey @IanTheEngineer @cottsay FYI","Rebased + two commits related to #681
CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,660,2021-01-13T21:37:19Z,2021-01-21T18:41:22Z,2021-01-21T18:41:25Z,CLOSED,False,291,369,7,https://github.com/sloretz,Use Cython to generate _rclpy_logging,1,[],https://github.com/ros2/rclpy/pull/660,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/660,"Uses Cython for the _rclpy_logging module. This is meant to be an apples-to-apples comparison with #656 and #659
@azeey @IanTheEngineer @cottsay FYI","Uses Cython for the _rclpy_logging module. This is meant to be an apples-to-apples comparison with #656 and #659
@azeey @IanTheEngineer @cottsay FYI",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,660,2021-01-13T21:37:19Z,2021-01-21T18:41:22Z,2021-01-21T18:41:25Z,CLOSED,False,291,369,7,https://github.com/sloretz,Use Cython to generate _rclpy_logging,1,[],https://github.com/ros2/rclpy/pull/660,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/660#issuecomment-764855785,"Uses Cython for the _rclpy_logging module. This is meant to be an apples-to-apples comparison with #656 and #659
@azeey @IanTheEngineer @cottsay FYI",Closing; future work in #665,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,661,2021-01-14T01:31:16Z,2021-03-23T01:14:35Z,2021-03-23T01:14:56Z,MERGED,True,47,5,2,https://github.com/fujitatomoya,Modify parameter service behavior when allow_undeclared_parameters is false and the requested parameter doesn't exist,2,[],https://github.com/ros2/rclpy/pull/661,https://github.com/fujitatomoya,1,https://github.com/ros2/rclpy/pull/661,"address #658
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com","address #658
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,661,2021-01-14T01:31:16Z,2021-03-23T01:14:35Z,2021-03-23T01:14:56Z,MERGED,True,47,5,2,https://github.com/fujitatomoya,Modify parameter service behavior when allow_undeclared_parameters is false and the requested parameter doesn't exist,2,[],https://github.com/ros2/rclpy/pull/661,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/661#issuecomment-766846920,"address #658
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,661,2021-01-14T01:31:16Z,2021-03-23T01:14:35Z,2021-03-23T01:14:56Z,MERGED,True,47,5,2,https://github.com/fujitatomoya,Modify parameter service behavior when allow_undeclared_parameters is false and the requested parameter doesn't exist,2,[],https://github.com/ros2/rclpy/pull/661,https://github.com/fujitatomoya,3,https://github.com/ros2/rclpy/pull/661#issuecomment-766849861,"address #658
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com",@clalancette friendly ping,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,661,2021-01-14T01:31:16Z,2021-03-23T01:14:35Z,2021-03-23T01:14:56Z,MERGED,True,47,5,2,https://github.com/fujitatomoya,Modify parameter service behavior when allow_undeclared_parameters is false and the requested parameter doesn't exist,2,[],https://github.com/ros2/rclpy/pull/661,https://github.com/fujitatomoya,4,https://github.com/ros2/rclpy/pull/661#issuecomment-797298730,"address #658
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com",@ivanpauno could you take a look if you got time.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,661,2021-01-14T01:31:16Z,2021-03-23T01:14:35Z,2021-03-23T01:14:56Z,MERGED,True,47,5,2,https://github.com/fujitatomoya,Modify parameter service behavior when allow_undeclared_parameters is false and the requested parameter doesn't exist,2,[],https://github.com/ros2/rclpy/pull/661,https://github.com/ivanpauno,5,https://github.com/ros2/rclpy/pull/661#issuecomment-804084923,"address #658
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com","CI testing packages above:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,661,2021-01-14T01:31:16Z,2021-03-23T01:14:35Z,2021-03-23T01:14:56Z,MERGED,True,47,5,2,https://github.com/fujitatomoya,Modify parameter service behavior when allow_undeclared_parameters is false and the requested parameter doesn't exist,2,[],https://github.com/ros2/rclpy/pull/661,https://github.com/fujitatomoya,6,https://github.com/ros2/rclpy/pull/661#issuecomment-804509981,"address #658
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com",https://ci.ros2.org/job/ci_osx/11704/testReport/junit/(root)/projectroot/test_create_while_spinning/ is unrelated.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,661,2021-01-14T01:31:16Z,2021-03-23T01:14:35Z,2021-03-23T01:14:56Z,MERGED,True,47,5,2,https://github.com/fujitatomoya,Modify parameter service behavior when allow_undeclared_parameters is false and the requested parameter doesn't exist,2,[],https://github.com/ros2/rclpy/pull/661,https://github.com/fujitatomoya,7,https://github.com/ros2/rclpy/pull/661#issuecomment-804510486,"address #658
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com",@ivanpauno thanks for review and CI.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,662,2021-01-14T19:21:18Z,2021-01-21T18:41:09Z,2021-01-21T18:41:13Z,CLOSED,False,235,365,3,https://github.com/sloretz,Use SIP to generate _rclpy_logging,1,[],https://github.com/ros2/rclpy/pull/662,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/662,"This goes along with #656, #659, and #660 to give an apples-to-apples comparison of different Python binding generators
@azeey @IanTheEngineer @cottsay FYI","This goes along with #656, #659, and #660 to give an apples-to-apples comparison of different Python binding generators
@azeey @IanTheEngineer @cottsay FYI",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,662,2021-01-14T19:21:18Z,2021-01-21T18:41:09Z,2021-01-21T18:41:13Z,CLOSED,False,235,365,3,https://github.com/sloretz,Use SIP to generate _rclpy_logging,1,[],https://github.com/ros2/rclpy/pull/662,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/662#issuecomment-764855664,"This goes along with #656, #659, and #660 to give an apples-to-apples comparison of different Python binding generators
@azeey @IanTheEngineer @cottsay FYI",Closing; future work in #665,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,663,2021-01-15T22:58:35Z,2021-04-08T23:36:11Z,2021-04-08T23:36:13Z,MERGED,True,33,0,1,https://github.com/cottsay,Add a test for destroy_node while spinning,5,['bug'],https://github.com/ros2/rclpy/pull/663,https://github.com/cottsay,1,https://github.com/ros2/rclpy/pull/663,"I'm not sure if we ever intended to support calling Node.destroy_node() while another thread is spinning or not, but if you do so, the spinner will die with a segmentation fault.
This PR doesn't actually address the issue, it just adds a test to demonstrate the problem.
With rmw_cyclonedds_cpp:

Linux 
Linux-aarch64 
macOS 
Windows 

With rmw_fastrtps_cpp:

Linux 
Linux-aarch64 
macOS 
Windows","I'm not sure if we ever intended to support calling Node.destroy_node() while another thread is spinning or not, but if you do so, the spinner will die with a segmentation fault.
This PR doesn't actually address the issue, it just adds a test to demonstrate the problem.
With rmw_cyclonedds_cpp:

Linux 
Linux-aarch64 
macOS 
Windows 

With rmw_fastrtps_cpp:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,663,2021-01-15T22:58:35Z,2021-04-08T23:36:11Z,2021-04-08T23:36:13Z,MERGED,True,33,0,1,https://github.com/cottsay,Add a test for destroy_node while spinning,5,['bug'],https://github.com/ros2/rclpy/pull/663,https://github.com/cottsay,2,https://github.com/ros2/rclpy/pull/663#issuecomment-768751314,"I'm not sure if we ever intended to support calling Node.destroy_node() while another thread is spinning or not, but if you do so, the spinner will die with a segmentation fault.
This PR doesn't actually address the issue, it just adds a test to demonstrate the problem.
With rmw_cyclonedds_cpp:

Linux 
Linux-aarch64 
macOS 
Windows 

With rmw_fastrtps_cpp:

Linux 
Linux-aarch64 
macOS 
Windows","After some digging, it appears that the exception generated by rmw_fastrtps_cpp is expected.
The segfault when using rmw_cyclonedds_cpp results from the QoS event handlers being referenced during the call to rmw_wait after it is awoken. The call to destroy_node is deallocating those event handlers prior to rmw_wait waking up, hence the segfault.
Here is an example of this occuring on a macOS build: #667 (comment)
This doesn't appear to be a problem in rmw_fastrtps_cpp because it doesn't seem reference the data associated with the event handlers after rmw_wait wakes up in the same way that rmw_cyclonedds_cpp does.
The rmw_wait event handling was added to rmw_cyclonedds_cpp in ros2/rmw_cyclonedds#88, and the site of the fault is here:
https://github.com/ros2/rmw_cyclonedds/blob/d024823043504ea40af24bf22365a21cd203df55/rmw_cyclonedds_cpp/src/rmw_node.cpp#L3291",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,663,2021-01-15T22:58:35Z,2021-04-08T23:36:11Z,2021-04-08T23:36:13Z,MERGED,True,33,0,1,https://github.com/cottsay,Add a test for destroy_node while spinning,5,['bug'],https://github.com/ros2/rclpy/pull/663,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/663#issuecomment-777831637,"I'm not sure if we ever intended to support calling Node.destroy_node() while another thread is spinning or not, but if you do so, the spinner will die with a segmentation fault.
This PR doesn't actually address the issue, it just adds a test to demonstrate the problem.
With rmw_cyclonedds_cpp:

Linux 
Linux-aarch64 
macOS 
Windows 

With rmw_fastrtps_cpp:

Linux 
Linux-aarch64 
macOS 
Windows","As we discussed, I've converted this to a draft PR and assigned it to one of the rclpy maintainers.  This is probably something that we should try to fix for Galactic, so I'm also putting it on the Galactic board.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,663,2021-01-15T22:58:35Z,2021-04-08T23:36:11Z,2021-04-08T23:36:13Z,MERGED,True,33,0,1,https://github.com/cottsay,Add a test for destroy_node while spinning,5,['bug'],https://github.com/ros2/rclpy/pull/663,https://github.com/clalancette,4,https://github.com/ros2/rclpy/pull/663#issuecomment-815966057,"I'm not sure if we ever intended to support calling Node.destroy_node() while another thread is spinning or not, but if you do so, the spinner will die with a segmentation fault.
This PR doesn't actually address the issue, it just adds a test to demonstrate the problem.
With rmw_cyclonedds_cpp:

Linux 
Linux-aarch64 
macOS 
Windows 

With rmw_fastrtps_cpp:

Linux 
Linux-aarch64 
macOS 
Windows","Now that we've merged #761, I think it is probably a good idea to rebase this one and see if it is fixed.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,663,2021-01-15T22:58:35Z,2021-04-08T23:36:11Z,2021-04-08T23:36:13Z,MERGED,True,33,0,1,https://github.com/cottsay,Add a test for destroy_node while spinning,5,['bug'],https://github.com/ros2/rclpy/pull/663,https://github.com/clalancette,5,https://github.com/ros2/rclpy/pull/663#issuecomment-816045577,"I'm not sure if we ever intended to support calling Node.destroy_node() while another thread is spinning or not, but if you do so, the spinner will die with a segmentation fault.
This PR doesn't actually address the issue, it just adds a test to demonstrate the problem.
With rmw_cyclonedds_cpp:

Linux 
Linux-aarch64 
macOS 
Windows 

With rmw_fastrtps_cpp:

Linux 
Linux-aarch64 
macOS 
Windows","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,663,2021-01-15T22:58:35Z,2021-04-08T23:36:11Z,2021-04-08T23:36:13Z,MERGED,True,33,0,1,https://github.com/cottsay,Add a test for destroy_node while spinning,5,['bug'],https://github.com/ros2/rclpy/pull/663,https://github.com/cottsay,6,https://github.com/ros2/rclpy/pull/663#issuecomment-816058265,"I'm not sure if we ever intended to support calling Node.destroy_node() while another thread is spinning or not, but if you do so, the spinner will die with a segmentation fault.
This PR doesn't actually address the issue, it just adds a test to demonstrate the problem.
With rmw_cyclonedds_cpp:

Linux 
Linux-aarch64 
macOS 
Windows 

With rmw_fastrtps_cpp:

Linux 
Linux-aarch64 
macOS 
Windows","Evidently I need to review my knowledge of the English alphabet.
After fixing the import order:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,664,2021-01-20T22:05:45Z,2021-01-21T01:48:54Z,2021-01-21T01:48:57Z,MERGED,True,3,1,2,https://github.com/clalancette,Fix two clang static analysis warnings.,1,[],https://github.com/ros2/rclpy/pull/664,https://github.com/clalancette,1,https://github.com/ros2/rclpy/pull/664,"The first one in pycapsule is truly a bug; if destructor
was ever NULL, we would have reported an error and then
immediately dereferenced the NULL pointer, leading to a
crash.
The second one is a false positive.  The documentation for
PyErr_NoMemory() says that it always returns NULL, but
clang static analysis can't tell that just from the function
declaration.  Thus, call PyErr_NoMemory() to set the error,
and return NULL ourselves.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","The first one in pycapsule is truly a bug; if destructor
was ever NULL, we would have reported an error and then
immediately dereferenced the NULL pointer, leading to a
crash.
The second one is a false positive.  The documentation for
PyErr_NoMemory() says that it always returns NULL, but
clang static analysis can't tell that just from the function
declaration.  Thus, call PyErr_NoMemory() to set the error,
and return NULL ourselves.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,664,2021-01-20T22:05:45Z,2021-01-21T01:48:54Z,2021-01-21T01:48:57Z,MERGED,True,3,1,2,https://github.com/clalancette,Fix two clang static analysis warnings.,1,[],https://github.com/ros2/rclpy/pull/664,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/664#issuecomment-763980451,"The first one in pycapsule is truly a bug; if destructor
was ever NULL, we would have reported an error and then
immediately dereferenced the NULL pointer, leading to a
crash.
The second one is a false positive.  The documentation for
PyErr_NoMemory() says that it always returns NULL, but
clang static analysis can't tell that just from the function
declaration.  Thus, call PyErr_NoMemory() to set the error,
and return NULL ourselves.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,664,2021-01-20T22:05:45Z,2021-01-21T01:48:54Z,2021-01-21T01:48:57Z,MERGED,True,3,1,2,https://github.com/clalancette,Fix two clang static analysis warnings.,1,[],https://github.com/ros2/rclpy/pull/664,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/664#issuecomment-764172864,"The first one in pycapsule is truly a bug; if destructor
was ever NULL, we would have reported an error and then
immediately dereferenced the NULL pointer, leading to a
crash.
The second one is a false positive.  The documentation for
PyErr_NoMemory() says that it always returns NULL, but
clang static analysis can't tell that just from the function
declaration.  Thus, call PyErr_NoMemory() to set the error,
and return NULL ourselves.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","Thanks for the reviews, merging.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,667,2021-01-21T18:49:21Z,2021-02-12T17:07:37Z,2021-02-13T22:29:01Z,MERGED,True,53,86,2,https://github.com/sloretz,Use Pybind11's CMake code,3,[],https://github.com/ros2/rclpy/pull/667,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/667,"Part of #665
This uses Pybind11's CMake code to build the CPython extensions. Once this is merged, every module will be able to use Pybind11.","Part of #665
This uses Pybind11's CMake code to build the CPython extensions. Once this is merged, every module will be able to use Pybind11.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,667,2021-01-21T18:49:21Z,2021-02-12T17:07:37Z,2021-02-13T22:29:01Z,MERGED,True,53,86,2,https://github.com/sloretz,Use Pybind11's CMake code,3,[],https://github.com/ros2/rclpy/pull/667,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/667#issuecomment-764966043,"Part of #665
This uses Pybind11's CMake code to build the CPython extensions. Once this is merged, every module will be able to use Pybind11.","CI (build: --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,667,2021-01-21T18:49:21Z,2021-02-12T17:07:37Z,2021-02-13T22:29:01Z,MERGED,True,53,86,2,https://github.com/sloretz,Use Pybind11's CMake code,3,[],https://github.com/ros2/rclpy/pull/667,https://github.com/cottsay,3,https://github.com/ros2/rclpy/pull/667#issuecomment-768556433,"Part of #665
This uses Pybind11's CMake code to build the CPython extensions. Once this is merged, every module will be able to use Pybind11.","Here is the full backtrace for the Segfault happening on macOS:

* thread #17, stop reason = EXC_BAD_ACCESS (code=1, address=0x0)
  * frame #0: 0x00000001066af5ac librmw_cyclonedds_cpp.dylib`::rmw_wait(rmw_subscriptions_t *, rmw_guard_conditions_t *, rmw_services_t *, rmw_clients_t *, rmw_events_t *, rmw_wait_set_t *, const rmw_time_t *) at rmw_node.cpp:3291:81 [opt]
    frame #1: 0x00000001066af575 librmw_cyclonedds_cpp.dylib`::rmw_wait(subs=<unavailable>, gcs=0x000000010557ce50, srvs=0x000000010557ce80, cls=0x000000010557ce68, evs=0x000000010557ce98, wait_set=<unavailable>, wait_timeout=0x0000000000000000) at rmw_node.cpp:3421 [opt]
    frame #2: 0x000000010569551a librcl.dylib`rcl_wait(wait_set=<unavailable>, timeout=<unavailable>) at wait.c:609:19 [opt]
    frame #3: 0x000000010564e867 _rclpy.cpython-38-darwin.so`rclpy_wait(_unused_self=<unavailable>, args=<unavailable>) at _rclpy.c:3374:9 [opt]
    frame #4: 0x00000001000e966a Python`cfunction_call_varargs + 319
    frame #5: 0x00000001000e90c5 Python`_PyObject_MakeTpCall + 274
    frame #6: 0x000000010018889f Python`call_function + 804
    frame #7: 0x00000001001823f5 Python`_PyEval_EvalFrameDefault + 13137
    frame #8: 0x00000001000f6b13 Python`gen_send_ex + 244
    frame #9: 0x000000010017d401 Python`builtin_next + 89
    frame #10: 0x00000001001178a1 Python`cfunction_vectorcall_FASTCALL + 169
    frame #11: 0x00000001001886d5 Python`call_function + 346
    frame #12: 0x000000010018249f Python`_PyEval_EvalFrameDefault + 13307
    frame #13: 0x0000000100189299 Python`_PyEval_EvalCodeWithName + 2107
    frame #14: 0x00000001000e9a65 Python`_PyFunction_Vectorcall + 217
    frame #15: 0x00000001000eb9a9 Python`method_vectorcall + 135
    frame #16: 0x00000001001886d5 Python`call_function + 346
    frame #17: 0x000000010018254f Python`_PyEval_EvalFrameDefault + 13483
    frame #18: 0x0000000100189299 Python`_PyEval_EvalCodeWithName + 2107
    frame #19: 0x00000001000e9a65 Python`_PyFunction_Vectorcall + 217
    frame #20: 0x00000001001886d5 Python`call_function + 346
    frame #21: 0x00000001001823d5 Python`_PyEval_EvalFrameDefault + 13105
    frame #22: 0x00000001000e990a Python`function_code_fastcall + 106
    frame #23: 0x00000001000eba22 Python`method_vectorcall + 256
    frame #24: 0x00000001000e9351 Python`PyVectorcall_Call + 108
    frame #25: 0x00000001001826e9 Python`_PyEval_EvalFrameDefault + 13893
    frame #26: 0x00000001000e990a Python`function_code_fastcall + 106
    frame #27: 0x00000001001886d5 Python`call_function + 346
    frame #28: 0x00000001001823d5 Python`_PyEval_EvalFrameDefault + 13105
    frame #29: 0x00000001000e990a Python`function_code_fastcall + 106
    frame #30: 0x00000001001886d5 Python`call_function + 346
    frame #31: 0x00000001001823d5 Python`_PyEval_EvalFrameDefault + 13105
    frame #32: 0x00000001000e990a Python`function_code_fastcall + 106
    frame #33: 0x00000001000eba22 Python`method_vectorcall + 256
    frame #34: 0x00000001000e9351 Python`PyVectorcall_Call + 108
    frame #35: 0x00000001001fe8ca Python`t_bootstrap + 74
    frame #36: 0x00000001001c0020 Python`pythread_wrapper + 25
    frame #37: 0x00007fff6d57b2eb libsystem_pthread.dylib`_pthread_body + 126
    frame #38: 0x00007fff6d57e249 libsystem_pthread.dylib`_pthread_start + 66
    frame #39: 0x00007fff6d57a40d libsystem_pthread.dylib`thread_start + 13


Here is the site of the fault.
The test passes when RMW_IMPLEMENTATION=rmw_fastrtps_cpp.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,667,2021-01-21T18:49:21Z,2021-02-12T17:07:37Z,2021-02-13T22:29:01Z,MERGED,True,53,86,2,https://github.com/sloretz,Use Pybind11's CMake code,3,[],https://github.com/ros2/rclpy/pull/667,https://github.com/cottsay,4,https://github.com/ros2/rclpy/pull/667#issuecomment-768576999,"Part of #665
This uses Pybind11's CMake code to build the CPython extensions. Once this is merged, every module will be able to use Pybind11.","I think that the changes presented here are only making the race more likely, and are not directly causing the fault. I even had the test complete successfully once during my local testing.
I have a hunch that resolving the issue presented by #663 will make the tests pass here.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,667,2021-01-21T18:49:21Z,2021-02-12T17:07:37Z,2021-02-13T22:29:01Z,MERGED,True,53,86,2,https://github.com/sloretz,Use Pybind11's CMake code,3,[],https://github.com/ros2/rclpy/pull/667,https://github.com/cottsay,5,https://github.com/ros2/rclpy/pull/667#issuecomment-768751626,"Part of #665
This uses Pybind11's CMake code to build the CPython extensions. Once this is merged, every module will be able to use Pybind11.","#674 should work around the problem and unblock this PR.
The problem isn't specific to macOS, we just got lucky on the other platforms.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,667,2021-01-21T18:49:21Z,2021-02-12T17:07:37Z,2021-02-13T22:29:01Z,MERGED,True,53,86,2,https://github.com/sloretz,Use Pybind11's CMake code,3,[],https://github.com/ros2/rclpy/pull/667,https://github.com/sloretz,6,https://github.com/ros2/rclpy/pull/667#issuecomment-777141324,"Part of #665
This uses Pybind11's CMake code to build the CPython extensions. Once this is merged, every module will be able to use Pybind11.","Rebased now that #674 is merged. I think green CI and an approving review is all this needs.
CI (build: --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,667,2021-01-21T18:49:21Z,2021-02-12T17:07:37Z,2021-02-13T22:29:01Z,MERGED,True,53,86,2,https://github.com/sloretz,Use Pybind11's CMake code,3,[],https://github.com/ros2/rclpy/pull/667,https://github.com/sloretz,7,https://github.com/ros2/rclpy/pull/667#issuecomment-777913130,"Part of #665
This uses Pybind11's CMake code to build the CPython extensions. Once this is merged, every module will be able to use Pybind11.","One more CI to check package.xml change
CI (build: --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,667,2021-01-21T18:49:21Z,2021-02-12T17:07:37Z,2021-02-13T22:29:01Z,MERGED,True,53,86,2,https://github.com/sloretz,Use Pybind11's CMake code,3,[],https://github.com/ros2/rclpy/pull/667,https://github.com/sloretz,8,https://github.com/ros2/rclpy/pull/667#issuecomment-778320022,"Part of #665
This uses Pybind11's CMake code to build the CPython extensions. Once this is merged, every module will be able to use Pybind11.",Ran git rebase --signoff master. Merging since that didn't change any code.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,667,2021-01-21T18:49:21Z,2021-02-12T17:07:37Z,2021-02-13T22:29:01Z,MERGED,True,53,86,2,https://github.com/sloretz,Use Pybind11's CMake code,3,[],https://github.com/ros2/rclpy/pull/667,https://github.com/clalancette,9,https://github.com/ros2/rclpy/pull/667#issuecomment-778687182,"Part of #665
This uses Pybind11's CMake code to build the CPython extensions. Once this is merged, every module will be able to use Pybind11.","I'm not sure about this, but I'm guessing this PR caused failures on Windows debug in CI: https://ci.ros2.org/view/nightly/job/nightly_win_deb/1899/console",True,{'EYES': ['https://github.com/sloretz']}
ros2/rclpy,https://github.com/ros2/rclpy,668,2021-01-21T23:01:36Z,2021-02-26T18:28:49Z,2021-02-26T18:28:52Z,MERGED,True,39,100,4,https://github.com/sloretz,Use pybind11 for _rclpy_handle,7,[],https://github.com/ros2/rclpy/pull/668,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/668,"Part of #665
Requires #667
This uses Pybind11 for the _rclpy_handle modules. It also removes a redundant API rclpy_handle_get_name() which already existed as rclpy_pycapsule_name().","Part of #665
Requires #667
This uses Pybind11 for the _rclpy_handle modules. It also removes a redundant API rclpy_handle_get_name() which already existed as rclpy_pycapsule_name().",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,668,2021-01-21T23:01:36Z,2021-02-26T18:28:49Z,2021-02-26T18:28:52Z,MERGED,True,39,100,4,https://github.com/sloretz,Use pybind11 for _rclpy_handle,7,[],https://github.com/ros2/rclpy/pull/668,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/668#issuecomment-786335335,"Part of #665
Requires #667
This uses Pybind11 for the _rclpy_handle modules. It also removes a redundant API rclpy_handle_get_name() which already existed as rclpy_pycapsule_name().","CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,668,2021-01-21T23:01:36Z,2021-02-26T18:28:49Z,2021-02-26T18:28:52Z,MERGED,True,39,100,4,https://github.com/sloretz,Use pybind11 for _rclpy_handle,7,[],https://github.com/ros2/rclpy/pull/668,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/668#issuecomment-786341900,"Part of #665
Requires #667
This uses Pybind11 for the _rclpy_handle modules. It also removes a redundant API rclpy_handle_get_name() which already existed as rclpy_pycapsule_name().","CI again with osx warning fixed:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,669,2021-01-25T13:20:59Z,2021-01-25T15:13:44Z,2021-01-25T15:13:46Z,MERGED,True,0,4,2,https://github.com/clalancette,Fix dead stores.,1,[],https://github.com/ros2/rclpy/pull/669,https://github.com/clalancette,1,https://github.com/ros2/rclpy/pull/669,"Pointed out by clang static analysis.  The comments on all of
them say ""to avoid linter warning"", but I don't see that warning
in our current code.  It may have been an older version.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","Pointed out by clang static analysis.  The comments on all of
them say ""to avoid linter warning"", but I don't see that warning
in our current code.  It may have been an older version.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,669,2021-01-25T13:20:59Z,2021-01-25T15:13:44Z,2021-01-25T15:13:46Z,MERGED,True,0,4,2,https://github.com/clalancette,Fix dead stores.,1,[],https://github.com/ros2/rclpy/pull/669,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/669#issuecomment-766811649,"Pointed out by clang static analysis.  The comments on all of
them say ""to avoid linter warning"", but I don't see that warning
in our current code.  It may have been an older version.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,670,2021-01-26T14:30:24Z,2021-01-26T19:03:57Z,2021-01-26T19:04:00Z,MERGED,True,1,1,1,https://github.com/clalancette,Use Py_XDECREF for pyresult_list.,1,[],https://github.com/ros2/rclpy/pull/670,https://github.com/clalancette,1,https://github.com/ros2/rclpy/pull/670,"As pointed out by clang static analysis, 'pyresult_list' could
be NULL during cleanup, so make sure to use Py_XDECREF to check
for that possibility.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","As pointed out by clang static analysis, 'pyresult_list' could
be NULL during cleanup, so make sure to use Py_XDECREF to check
for that possibility.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,670,2021-01-26T14:30:24Z,2021-01-26T19:03:57Z,2021-01-26T19:04:00Z,MERGED,True,1,1,1,https://github.com/clalancette,Use Py_XDECREF for pyresult_list.,1,[],https://github.com/ros2/rclpy/pull/670,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/670#issuecomment-767579469,"As pointed out by clang static analysis, 'pyresult_list' could
be NULL during cleanup, so make sure to use Py_XDECREF to check
for that possibility.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,670,2021-01-26T14:30:24Z,2021-01-26T19:03:57Z,2021-01-26T19:04:00Z,MERGED,True,1,1,1,https://github.com/clalancette,Use Py_XDECREF for pyresult_list.,1,[],https://github.com/ros2/rclpy/pull/670,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/670#issuecomment-767757227,"As pointed out by clang static analysis, 'pyresult_list' could
be NULL during cleanup, so make sure to use Py_XDECREF to check
for that possibility.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","The single failing test is also failing on all of the nightlies, so this is ready for review.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,672,2021-01-26T19:52:39Z,2021-02-03T17:03:25Z,2021-02-03T17:03:27Z,MERGED,True,8,3,2,https://github.com/clalancette,Check the rcl_action return value on cleanup.,4,[],https://github.com/ros2/rclpy/pull/672,https://github.com/clalancette,1,https://github.com/ros2/rclpy/pull/672,"And add an error message as appropriate.  clang static
analysis pointed out that this was a dead store.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","And add an error message as appropriate.  clang static
analysis pointed out that this was a dead store.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,672,2021-01-26T19:52:39Z,2021-02-03T17:03:25Z,2021-02-03T17:03:27Z,MERGED,True,8,3,2,https://github.com/clalancette,Check the rcl_action return value on cleanup.,4,[],https://github.com/ros2/rclpy/pull/672,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/672#issuecomment-767788151,"And add an error message as appropriate.  clang static
analysis pointed out that this was a dead store.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,672,2021-01-26T19:52:39Z,2021-02-03T17:03:25Z,2021-02-03T17:03:27Z,MERGED,True,8,3,2,https://github.com/clalancette,Check the rcl_action return value on cleanup.,4,[],https://github.com/ros2/rclpy/pull/672,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/672#issuecomment-772503492,"And add an error message as appropriate.  clang static
analysis pointed out that this was a dead store.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,672,2021-01-26T19:52:39Z,2021-02-03T17:03:25Z,2021-02-03T17:03:27Z,MERGED,True,8,3,2,https://github.com/clalancette,Check the rcl_action return value on cleanup.,4,[],https://github.com/ros2/rclpy/pull/672,https://github.com/clalancette,4,https://github.com/ros2/rclpy/pull/672#issuecomment-772665684,"And add an error message as appropriate.  clang static
analysis pointed out that this was a dead store.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","All of the test failures are in the nightlies and don't have to do with this PR.  Merging, thanks for the reviews.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,673,2021-01-27T18:21:00Z,2021-01-28T14:05:29Z,2021-01-28T16:26:59Z,MERGED,True,3,3,1,https://github.com/clalancette,Use Py_XDECREF for pynode_names_and_namespaces,1,[],https://github.com/ros2/rclpy/pull/673,https://github.com/clalancette,1,https://github.com/ros2/rclpy/pull/673,"As pointed out by clang static analysis, it is possible for
pynode_names_and_namespaces to be NULL during cleanup.  Thus
use Py_XDECREF everywhere to do that checking for us.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","As pointed out by clang static analysis, it is possible for
pynode_names_and_namespaces to be NULL during cleanup.  Thus
use Py_XDECREF everywhere to do that checking for us.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,673,2021-01-27T18:21:00Z,2021-01-28T14:05:29Z,2021-01-28T16:26:59Z,MERGED,True,3,3,1,https://github.com/clalancette,Use Py_XDECREF for pynode_names_and_namespaces,1,[],https://github.com/ros2/rclpy/pull/673,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/673#issuecomment-768479939,"As pointed out by clang static analysis, it is possible for
pynode_names_and_namespaces to be NULL during cleanup.  Thus
use Py_XDECREF everywhere to do that checking for us.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,673,2021-01-27T18:21:00Z,2021-01-28T14:05:29Z,2021-01-28T16:26:59Z,MERGED,True,3,3,1,https://github.com/clalancette,Use Py_XDECREF for pynode_names_and_namespaces,1,[],https://github.com/ros2/rclpy/pull/673,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/673#issuecomment-768532328,"As pointed out by clang static analysis, it is possible for
pynode_names_and_namespaces to be NULL during cleanup.  Thus
use Py_XDECREF everywhere to do that checking for us.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","Nice - is there a clang static analysis build going on on the buildfarm for this?

Not currently, no.  I've been running this locally and just fixing the bugs as I see them.  The goal is indeed to have jobs available to do this either on https://ci.ros2.org, or as part of the PR jobs.",True,{'THUMBS_UP': ['https://github.com/emersonknapp']}
ros2/rclpy,https://github.com/ros2/rclpy,673,2021-01-27T18:21:00Z,2021-01-28T14:05:29Z,2021-01-28T16:26:59Z,MERGED,True,3,3,1,https://github.com/clalancette,Use Py_XDECREF for pynode_names_and_namespaces,1,[],https://github.com/ros2/rclpy/pull/673,https://github.com/clalancette,4,https://github.com/ros2/rclpy/pull/673#issuecomment-769075616,"As pointed out by clang static analysis, it is possible for
pynode_names_and_namespaces to be NULL during cleanup.  Thus
use Py_XDECREF everywhere to do that checking for us.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org",The test failures on macOS are the same as in the nightlies: https://ci.ros2.org/view/nightly/job/nightly_osx_repeated/2233/#showFailuresLink .  So I'm going to go ahead and merge this.  Thanks for the review.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,673,2021-01-27T18:21:00Z,2021-01-28T14:05:29Z,2021-01-28T16:26:59Z,MERGED,True,3,3,1,https://github.com/clalancette,Use Py_XDECREF for pynode_names_and_namespaces,1,[],https://github.com/ros2/rclpy/pull/673,https://github.com/j-rivero,5,https://github.com/ros2/rclpy/pull/673#issuecomment-769155785,"As pointed out by clang static analysis, it is possible for
pynode_names_and_namespaces to be NULL during cleanup.  Thus
use Py_XDECREF everywhere to do that checking for us.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org",Might be related to aarch64 regressions today: https://ci.ros2.org/job/nightly_linux-aarch64_repeated/1488/testReport/junit/(root)/projectroot/test_client/ ?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,673,2021-01-27T18:21:00Z,2021-01-28T14:05:29Z,2021-01-28T16:26:59Z,MERGED,True,3,3,1,https://github.com/clalancette,Use Py_XDECREF for pynode_names_and_namespaces,1,[],https://github.com/ros2/rclpy/pull/673,https://github.com/clalancette,6,https://github.com/ros2/rclpy/pull/673#issuecomment-769175451,"As pointed out by clang static analysis, it is possible for
pynode_names_and_namespaces to be NULL during cleanup.  Thus
use Py_XDECREF everywhere to do that checking for us.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","Might be related to aarch64 regressions today: https://ci.ros2.org/job/nightly_linux-aarch64_repeated/1488/testReport/junit/(root)/projectroot/test_client/ ?

I don't think so; I just merged it this morning, so it wouldn't have been used in the nightlies.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,673,2021-01-27T18:21:00Z,2021-01-28T14:05:29Z,2021-01-28T16:26:59Z,MERGED,True,3,3,1,https://github.com/clalancette,Use Py_XDECREF for pynode_names_and_namespaces,1,[],https://github.com/ros2/rclpy/pull/673,https://github.com/j-rivero,7,https://github.com/ros2/rclpy/pull/673#issuecomment-769187019,"As pointed out by clang static analysis, it is possible for
pynode_names_and_namespaces to be NULL during cleanup.  Thus
use Py_XDECREF everywhere to do that checking for us.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","I don't think so; I just merged it this morning, so it wouldn't have been used in the nightlies.

Sorry, I meant that the problem in the nightly might have been resolved by this or do you think that the root cause is different.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,673,2021-01-27T18:21:00Z,2021-01-28T14:05:29Z,2021-01-28T16:26:59Z,MERGED,True,3,3,1,https://github.com/clalancette,Use Py_XDECREF for pynode_names_and_namespaces,1,[],https://github.com/ros2/rclpy/pull/673,https://github.com/clalancette,8,https://github.com/ros2/rclpy/pull/673#issuecomment-769204587,"As pointed out by clang static analysis, it is possible for
pynode_names_and_namespaces to be NULL during cleanup.  Thus
use Py_XDECREF everywhere to do that checking for us.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","Sorry, I meant that the problem in the nightly might have been resolved by this or do you think that the root cause is different.

I think it is probably different; this only would be a problem during unlikely error paths.  I'll suggest to open a new issue with that failure, since it is likely something different.",True,{'THUMBS_UP': ['https://github.com/j-rivero']}
ros2/rclpy,https://github.com/ros2/rclpy,674,2021-01-28T02:06:02Z,2021-02-08T22:49:59Z,2021-02-08T22:50:02Z,MERGED,True,1,1,1,https://github.com/cottsay,Don't call destroy_node while spinning,1,[],https://github.com/ros2/rclpy/pull/674,https://github.com/cottsay,1,https://github.com/ros2/rclpy/pull/674,"This causes a segfault under CycloneDDS, and I don't see an easy way to prevent it from happening. Until we get to the bottom of that, just defer the call to destroy_node until after we know the spin thread has finished.
#663 tracks the issue that this change avoids.

Linux 
Linux-aarch64 
macOS 
Windows","This causes a segfault under CycloneDDS, and I don't see an easy way to prevent it from happening. Until we get to the bottom of that, just defer the call to destroy_node until after we know the spin thread has finished.
#663 tracks the issue that this change avoids.

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,674,2021-01-28T02:06:02Z,2021-02-08T22:49:59Z,2021-02-08T22:50:02Z,MERGED,True,1,1,1,https://github.com/cottsay,Don't call destroy_node while spinning,1,[],https://github.com/ros2/rclpy/pull/674,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/674#issuecomment-769214534,"This causes a segfault under CycloneDDS, and I don't see an easy way to prevent it from happening. Until we get to the bottom of that, just defer the call to destroy_node until after we know the spin thread has finished.
#663 tracks the issue that this change avoids.

Linux 
Linux-aarch64 
macOS 
Windows",Windows CI failed to install Qt  :( - edit: which was probably fixed by ros2/ci#540,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,674,2021-01-28T02:06:02Z,2021-02-08T22:49:59Z,2021-02-08T22:50:02Z,MERGED,True,1,1,1,https://github.com/cottsay,Don't call destroy_node while spinning,1,[],https://github.com/ros2/rclpy/pull/674,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/674#issuecomment-769224170,"This causes a segfault under CycloneDDS, and I don't see an easy way to prevent it from happening. Until we get to the bottom of that, just defer the call to destroy_node until after we know the spin thread has finished.
#663 tracks the issue that this change avoids.

Linux 
Linux-aarch64 
macOS 
Windows",Windows rebuild:,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,674,2021-01-28T02:06:02Z,2021-02-08T22:49:59Z,2021-02-08T22:50:02Z,MERGED,True,1,1,1,https://github.com/cottsay,Don't call destroy_node while spinning,1,[],https://github.com/ros2/rclpy/pull/674,https://github.com/cottsay,4,https://github.com/ros2/rclpy/pull/674#issuecomment-769323298,"This causes a segfault under CycloneDDS, and I don't see an easy way to prevent it from happening. Until we get to the bottom of that, just defer the call to destroy_node until after we know the spin thread has finished.
#663 tracks the issue that this change avoids.

Linux 
Linux-aarch64 
macOS 
Windows","Thanks, @sloretz. Looks like the rebuild came back green.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,674,2021-01-28T02:06:02Z,2021-02-08T22:49:59Z,2021-02-08T22:50:02Z,MERGED,True,1,1,1,https://github.com/cottsay,Don't call destroy_node while spinning,1,[],https://github.com/ros2/rclpy/pull/674,https://github.com/clalancette,5,https://github.com/ros2/rclpy/pull/674#issuecomment-775515935,"This causes a segfault under CycloneDDS, and I don't see an easy way to prevent it from happening. Until we get to the bottom of that, just defer the call to destroy_node until after we know the spin thread has finished.
#663 tracks the issue that this change avoids.

Linux 
Linux-aarch64 
macOS 
Windows","This probably ""fixes"" #666 , though it mostly works around it.  I'm going to go ahead and merge this PR and close out #666; further fixes can be tracked by #663.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,675,2021-01-29T01:35:00Z,2021-02-26T18:28:25Z,2021-02-26T18:28:28Z,MERGED,True,900,285,9,https://github.com/sloretz,Split rclpy module for easier porting to pybind11,13,[],https://github.com/ros2/rclpy/pull/675,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/675,"@cottsay specifically, here's a way to split the giant _rclpy module in pieces that can be ported a little at a time.  This PR has split out exceptions (first commit) and rclpy_context_get_domain_id (second commit).
There are two modules: _rclpy and _rclpy_pybind11. Inside rclpy.impl.implementation_singleton the functions and exceptions on _rclpy_pybind11 gets set on _rclpy. _rclpy itself needs the exception objects to raise them in C code, so it also imports _rclpy_pybind11. To do that, I had to convert _rclpy to use Multi phase Initialization.
@azeey @IanTheEngineer @cottsay FYI
Part of #665","@cottsay specifically, here's a way to split the giant _rclpy module in pieces that can be ported a little at a time.  This PR has split out exceptions (first commit) and rclpy_context_get_domain_id (second commit).
There are two modules: _rclpy and _rclpy_pybind11. Inside rclpy.impl.implementation_singleton the functions and exceptions on _rclpy_pybind11 gets set on _rclpy. _rclpy itself needs the exception objects to raise them in C code, so it also imports _rclpy_pybind11. To do that, I had to convert _rclpy to use Multi phase Initialization.
@azeey @IanTheEngineer @cottsay FYI
Part of #665",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,675,2021-01-29T01:35:00Z,2021-02-26T18:28:25Z,2021-02-26T18:28:28Z,MERGED,True,900,285,9,https://github.com/sloretz,Split rclpy module for easier porting to pybind11,13,[],https://github.com/ros2/rclpy/pull/675,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/675#issuecomment-786328520,"@cottsay specifically, here's a way to split the giant _rclpy module in pieces that can be ported a little at a time.  This PR has split out exceptions (first commit) and rclpy_context_get_domain_id (second commit).
There are two modules: _rclpy and _rclpy_pybind11. Inside rclpy.impl.implementation_singleton the functions and exceptions on _rclpy_pybind11 gets set on _rclpy. _rclpy itself needs the exception objects to raise them in C code, so it also imports _rclpy_pybind11. To do that, I had to convert _rclpy to use Multi phase Initialization.
@azeey @IanTheEngineer @cottsay FYI
Part of #665","CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,675,2021-01-29T01:35:00Z,2021-02-26T18:28:25Z,2021-02-26T18:28:28Z,MERGED,True,900,285,9,https://github.com/sloretz,Split rclpy module for easier porting to pybind11,13,[],https://github.com/ros2/rclpy/pull/675,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/675#issuecomment-786343474,"@cottsay specifically, here's a way to split the giant _rclpy module in pieces that can be ported a little at a time.  This PR has split out exceptions (first commit) and rclpy_context_get_domain_id (second commit).
There are two modules: _rclpy and _rclpy_pybind11. Inside rclpy.impl.implementation_singleton the functions and exceptions on _rclpy_pybind11 gets set on _rclpy. _rclpy itself needs the exception objects to raise them in C code, so it also imports _rclpy_pybind11. To do that, I had to convert _rclpy to use Multi phase Initialization.
@azeey @IanTheEngineer @cottsay FYI
Part of #665","CI again after fixing warning on OSX

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,675,2021-01-29T01:35:00Z,2021-02-26T18:28:25Z,2021-02-26T18:28:28Z,MERGED,True,900,285,9,https://github.com/sloretz,Split rclpy module for easier porting to pybind11,13,[],https://github.com/ros2/rclpy/pull/675,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/675#issuecomment-786763612,"@cottsay specifically, here's a way to split the giant _rclpy module in pieces that can be ported a little at a time.  This PR has split out exceptions (first commit) and rclpy_context_get_domain_id (second commit).
There are two modules: _rclpy and _rclpy_pybind11. Inside rclpy.impl.implementation_singleton the functions and exceptions on _rclpy_pybind11 gets set on _rclpy. _rclpy itself needs the exception objects to raise them in C code, so it also imports _rclpy_pybind11. To do that, I had to convert _rclpy to use Multi phase Initialization.
@azeey @IanTheEngineer @cottsay FYI
Part of #665","CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,677,2021-01-31T14:48:40Z,2021-02-01T02:22:56Z,2021-02-01T02:22:59Z,MERGED,True,1,1,1,https://github.com/clalancette,Fix the NULL check for destroy_ros_message.,1,[],https://github.com/ros2/rclpy/pull/677,https://github.com/clalancette,1,https://github.com/ros2/rclpy/pull/677,"clang static analysis pointed out that the check for NULL here
was wrong.  We were checking the double pointer for NULL, not
the derefenced one that we just attempted to fill in.  Fix the
check to look at the dereferenced pointer.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","clang static analysis pointed out that the check for NULL here
was wrong.  We were checking the double pointer for NULL, not
the derefenced one that we just attempted to fill in.  Fix the
check to look at the dereferenced pointer.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,677,2021-01-31T14:48:40Z,2021-02-01T02:22:56Z,2021-02-01T02:22:59Z,MERGED,True,1,1,1,https://github.com/clalancette,Fix the NULL check for destroy_ros_message.,1,[],https://github.com/ros2/rclpy/pull/677,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/677#issuecomment-770393779,"clang static analysis pointed out that the check for NULL here
was wrong.  We were checking the double pointer for NULL, not
the derefenced one that we just attempted to fill in.  Fix the
check to look at the dereferenced pointer.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,678,2021-02-09T01:22:40Z,2021-02-23T19:02:25Z,2021-02-23T19:02:27Z,MERGED,True,1420,1973,3,https://github.com/sloretz,Use pybind11 for _rclpy_action,4,[],https://github.com/ros2/rclpy/pull/678,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/678,"This uses Pybind11 for the _rclpy_action module.
Requires #667
Part of #665","This uses Pybind11 for the _rclpy_action module.
Requires #667
Part of #665",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,678,2021-02-09T01:22:40Z,2021-02-23T19:02:25Z,2021-02-23T19:02:27Z,MERGED,True,1420,1973,3,https://github.com/sloretz,Use pybind11 for _rclpy_action,4,[],https://github.com/ros2/rclpy/pull/678,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/678#issuecomment-784402739,"This uses Pybind11 for the _rclpy_action module.
Requires #667
Part of #665","CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,679,2021-02-11T01:16:53Z,2021-02-19T23:45:12Z,2021-02-19T23:45:12Z,CLOSED,False,13,16,2,https://github.com/emersonknapp,Use new rmw_duration_t,1,[],https://github.com/ros2/rclpy/pull/679,https://github.com/emersonknapp,1,https://github.com/ros2/rclpy/pull/679,"Depends on ros2/rmw#298
Use new rmw_duration_t instead of rmw_time_t for QoS policies and rmw_wait","Depends on ros2/rmw#298
Use new rmw_duration_t instead of rmw_time_t for QoS policies and rmw_wait",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,681,2021-02-16T22:29:58Z,2021-02-24T23:33:44Z,2021-02-24T23:33:48Z,MERGED,True,77,2,4,https://github.com/sloretz,Copy windows debug fixes for pybind11,6,['bug'],https://github.com/ros2/rclpy/pull/681,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/681,"Hopefully fixes #680
Copies windows debug fixes from rosbag2_py for using Pybind11 on Windows
debug and RelWithDebInfo.
For more info see the original PRs
ros2/rosbag2#538
ros2/rosbag2#531
Signed-off-by: Shane Loretz sloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org","Hopefully fixes #680
Copies windows debug fixes from rosbag2_py for using Pybind11 on Windows
debug and RelWithDebInfo.
For more info see the original PRs
ros2/rosbag2#538
ros2/rosbag2#531
Signed-off-by: Shane Loretz sloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,681,2021-02-16T22:29:58Z,2021-02-24T23:33:44Z,2021-02-24T23:33:48Z,MERGED,True,77,2,4,https://github.com/sloretz,Copy windows debug fixes for pybind11,6,['bug'],https://github.com/ros2/rclpy/pull/681,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/681#issuecomment-780160648,"Hopefully fixes #680
Copies windows debug fixes from rosbag2_py for using Pybind11 on Windows
debug and RelWithDebInfo.
For more info see the original PRs
ros2/rosbag2#538
ros2/rosbag2#531
Signed-off-by: Shane Loretz sloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org","CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows 
Windows debug:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,681,2021-02-16T22:29:58Z,2021-02-24T23:33:44Z,2021-02-24T23:33:48Z,MERGED,True,77,2,4,https://github.com/sloretz,Copy windows debug fixes for pybind11,6,['bug'],https://github.com/ros2/rclpy/pull/681,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/681#issuecomment-780702732,"Hopefully fixes #680
Copies windows debug fixes from rosbag2_py for using Pybind11 on Windows
debug and RelWithDebInfo.
For more info see the original PRs
ros2/rosbag2#538
ros2/rosbag2#531
Signed-off-by: Shane Loretz sloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org","This is clearly an improvement, as Windows Debug no longer fails. However, there are still warnings present in the Windows Debug build. @sloretz any thoughts on what's causing that?

Implemented workaround to make sure Py_DEBUG on rclpy_common matches setting on the Python Modules. This workaround should not be necessary on Pybind11 2.6 and beyond, because that adds Py_DEBUG as an interface compile definition to the pybind11::pybind11 target.
Anyways, if that's correct then this build should have no warnings:
Windows Debug",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,681,2021-02-16T22:29:58Z,2021-02-24T23:33:44Z,2021-02-24T23:33:48Z,MERGED,True,77,2,4,https://github.com/sloretz,Copy windows debug fixes for pybind11,6,['bug'],https://github.com/ros2/rclpy/pull/681,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/681#issuecomment-780734960,"Hopefully fixes #680
Copies windows debug fixes from rosbag2_py for using Pybind11 on Windows
debug and RelWithDebInfo.
For more info see the original PRs
ros2/rosbag2#538
ros2/rosbag2#531
Signed-off-by: Shane Loretz sloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org","Whoops, Windows debug again:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,681,2021-02-16T22:29:58Z,2021-02-24T23:33:44Z,2021-02-24T23:33:48Z,MERGED,True,77,2,4,https://github.com/sloretz,Copy windows debug fixes for pybind11,6,['bug'],https://github.com/ros2/rclpy/pull/681,https://github.com/clalancette,5,https://github.com/ros2/rclpy/pull/681#issuecomment-780836332,"Hopefully fixes #680
Copies windows debug fixes from rosbag2_py for using Pybind11 on Windows
debug and RelWithDebInfo.
For more info see the original PRs
ros2/rosbag2#538
ros2/rosbag2#531
Signed-off-by: Shane Loretz sloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org","Heh, it got worse: 2 warnings -> 4 warnings :).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,681,2021-02-16T22:29:58Z,2021-02-24T23:33:44Z,2021-02-24T23:33:48Z,MERGED,True,77,2,4,https://github.com/sloretz,Copy windows debug fixes for pybind11,6,['bug'],https://github.com/ros2/rclpy/pull/681,https://github.com/sloretz,6,https://github.com/ros2/rclpy/pull/681#issuecomment-780884678,"Hopefully fixes #680
Copies windows debug fixes from rosbag2_py for using Pybind11 on Windows
debug and RelWithDebInfo.
For more info see the original PRs
ros2/rosbag2#538
ros2/rosbag2#531
Signed-off-by: Shane Loretz sloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org","Windows Debug again 
Made Py_DEBUG definition on rclpy_common PUBLIC so it's transitive - not sure why that would be needed.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,681,2021-02-16T22:29:58Z,2021-02-24T23:33:44Z,2021-02-24T23:33:48Z,MERGED,True,77,2,4,https://github.com/sloretz,Copy windows debug fixes for pybind11,6,['bug'],https://github.com/ros2/rclpy/pull/681,https://github.com/clalancette,7,https://github.com/ros2/rclpy/pull/681#issuecomment-781452504,"Hopefully fixes #680
Copies windows debug fixes from rosbag2_py for using Pybind11 on Windows
debug and RelWithDebInfo.
For more info see the original PRs
ros2/rosbag2#538
ros2/rosbag2#531
Signed-off-by: Shane Loretz sloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org","So looking at the compile line for one of the files showing the problem, I see this (I split the lines for clarity):
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\bin\HostX64\x64\CL.exe
 /c /IC:\dev\ros2_ws\src\ros2\rclpy\rclpy\src\rclpy_common\include
 /IC:\dev\ros2_ws\install\include /IC:\Python38\include /Zi /nologo /W3 /WX- /diagnostics:column
 /Od /Ob0 /D WIN32 /D _WINDOWS /D RCLPY_COMMON_BUILDING_DLL /D Py_DEBUG /D RCUTILS_ENABLE_FAULT_INJECTION
 /D _CRT_SECURE_NO_WARNINGS /D DEFAULT_RMW_IMPLEMENTATION=rmw_cyclonedds_cpp /D ""CMAKE_INTDIR=\""Debug\""""
 /D rclpy_common_EXPORTS /D _WINDLL /D _MBCS /Gm- /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope
 /Zc:inline /Fo""rclpy_common.dir\Debug\\"" /Fd""rclpy_common.dir\Debug\vc142.pdb"" /Gd /TC
 /errorReport:queue C:\dev\ros2_ws\src\ros2\rclpy\rclpy\src\rclpy_common\src\common.c
 C:\dev\ros2_ws\src\ros2\rclpy\rclpy\src\rclpy_common\src\handle.c

It is clear from that command-line that Py_DEBUG is being set to an empty macro.  The compile warning is this:
C:\Python38\include\pyconfig.h(321,1): warning C4005: 'Py_DEBUG': macro redefinition (compiling source file C:\dev\ros2_ws\src\ros2\rclpy\rclpy\src\rclpy_common\src\handle.c) [C:\dev\ros2_ws\build\rclpy\rclpy_common.vcxproj]
C:\dev\ros2_ws\src\ros2\rclpy\rclpy\src\rclpy_common\src\handle.c : message : see previous definition of 'Py_DEBUG' [C:\dev\ros2_ws\build\rclpy\rclpy_common.vcxproj]
C:\Python38\include\pyconfig.h(321,1): warning C4005: 'Py_DEBUG': macro redefinition (compiling source file C:\dev\ros2_ws\src\ros2\rclpy\rclpy\src\rclpy_common\src\common.c) [C:\dev\ros2_ws\build\rclpy\rclpy_common.vcxproj]
C:\dev\ros2_ws\src\ros2\rclpy\rclpy\src\rclpy_common\src\common.c : message : see previous definition of 'Py_DEBUG' [C:\dev\ros2_ws\build\rclpy\rclpy_common.vcxproj]

That warning comes from the pyconfig.h file is included, which has this bit in it:
#ifdef _DEBUG
#          define Py_DEBUG
#endif

A few questions/observations then:

Does Windows not allow redefining a macro, even if it is the same definition twice (as it appears to be in this case)?
What part of the system is setting _DEBUG on?
One way around this looks like to not define Py_DEBUG on the compile command-line.  But that would seem to have been what we had earlier in this PR (before 35dfed7).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,681,2021-02-16T22:29:58Z,2021-02-24T23:33:44Z,2021-02-24T23:33:48Z,MERGED,True,77,2,4,https://github.com/sloretz,Copy windows debug fixes for pybind11,6,['bug'],https://github.com/ros2/rclpy/pull/681,https://github.com/sloretz,8,https://github.com/ros2/rclpy/pull/681#issuecomment-781503984,"Hopefully fixes #680
Copies windows debug fixes from rosbag2_py for using Pybind11 on Windows
debug and RelWithDebInfo.
For more info see the original PRs
ros2/rosbag2#538
ros2/rosbag2#531
Signed-off-by: Shane Loretz sloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org","How'd you get the compile commands on Windows?

What part of the system is setting _DEBUG on?

It looks like the compiler sets _DEBUG because /MDd is set: https://docs.microsoft.com/en-us/cpp/c-runtime-library/debug?view=msvc-160",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,681,2021-02-16T22:29:58Z,2021-02-24T23:33:44Z,2021-02-24T23:33:48Z,MERGED,True,77,2,4,https://github.com/sloretz,Copy windows debug fixes for pybind11,6,['bug'],https://github.com/ros2/rclpy/pull/681,https://github.com/clalancette,9,https://github.com/ros2/rclpy/pull/681#issuecomment-781529880,"Hopefully fixes #680
Copies windows debug fixes from rosbag2_py for using Pybind11 on Windows
debug and RelWithDebInfo.
For more info see the original PRs
ros2/rosbag2#538
ros2/rosbag2#531
Signed-off-by: Shane Loretz sloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org","How'd you get the compile commands on Windows?

I did:
> set VERBOSE=1
> rd /Q /S build\rclpy
> python_d C:\Python38\Scripts\colcon.exe build --merge-install --cmake-args -DCMAKE_BUILD_TYPE=Debug --packages-select rclpy --event-handlers console_direct+",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,681,2021-02-16T22:29:58Z,2021-02-24T23:33:44Z,2021-02-24T23:33:48Z,MERGED,True,77,2,4,https://github.com/sloretz,Copy windows debug fixes for pybind11,6,['bug'],https://github.com/ros2/rclpy/pull/681,https://github.com/sloretz,10,https://github.com/ros2/rclpy/pull/681#issuecomment-782561270,"Hopefully fixes #680
Copies windows debug fixes from rosbag2_py for using Pybind11 on Windows
debug and RelWithDebInfo.
For more info see the original PRs
ros2/rosbag2#538
ros2/rosbag2#531
Signed-off-by: Shane Loretz sloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org","Does Windows not allow redefining a macro, even if it is the same definition twice (as it appears to be in this case)?

Yeah, can confirm with an MRE that windows complains when a compiler definition is set both on the compiler command line and in code.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,681,2021-02-16T22:29:58Z,2021-02-24T23:33:44Z,2021-02-24T23:33:48Z,MERGED,True,77,2,4,https://github.com/sloretz,Copy windows debug fixes for pybind11,6,['bug'],https://github.com/ros2/rclpy/pull/681,https://github.com/sloretz,11,https://github.com/ros2/rclpy/pull/681#issuecomment-784579212,"Hopefully fixes #680
Copies windows debug fixes from rosbag2_py for using Pybind11 on Windows
debug and RelWithDebInfo.
For more info see the original PRs
ros2/rosbag2#538
ros2/rosbag2#531
Signed-off-by: Shane Loretz sloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org","Windows debug is green 🎉 

That is, we specifically don't want to add Py_DEBUG to the command-line, since that ends up with the warning. It kind of looks to me like we need to remove this, and then see if there is something else that is also adding Py_DEBUG to the command-line.

Putting everything together, the Python interpreter has a special debug mode, and it uses the macro Py_DEBUG to enable or disable this mode. The source of the warning is pyconfig.h sets Py_DEBUG when _DEBUG is set, and pybind11_add_module sets Py_DEBUG via the command line when a debug Python interpreter is used. This definition being set in two places is why the warning comes up.
One might think, just don't let pybind11_add_module set Py_DEBUG and all would be fine, but Pybind11 has some extra logic to allow using the Python release interpreter when building in Debug mode. That logic also uses Py_DEBUG. If _DEBUG is set but Py_DEBUG is not, then it will undefine _DEBUG, include Python.h, then restore _DEBUG. If we remove Py_DEBUG then _DEBUG will get unset and CPython will link against release Python libs instead of the debug Python libs.
As long as Py_DEBUG is set and pybind11/pybind11.h was included instead of or before <Python.h>, then everything is happy. If code uses pybind11_add_module but includes Python.h, then there's the duplicate definition warning.
One way to fix this is to include pybind11/pybind11.h instead of Python.h, but that requires changing the language to C, and not everything is happy about that yet. Once all the PRs converting modules to use Pybind11 are in then this will be solved.

If it is pybind11, maybe the thing to do here is to augment clean_windows_flags to also remove that flag?

This seems like the best fix, but it needs to be undone once the modules are using Pybind11. I made it in a separate macro in 1932bee so I could apply it to only the modules that have not yet been converted.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,681,2021-02-16T22:29:58Z,2021-02-24T23:33:44Z,2021-02-24T23:33:48Z,MERGED,True,77,2,4,https://github.com/sloretz,Copy windows debug fixes for pybind11,6,['bug'],https://github.com/ros2/rclpy/pull/681,https://github.com/clalancette,12,https://github.com/ros2/rclpy/pull/681#issuecomment-785066198,"Hopefully fixes #680
Copies windows debug fixes from rosbag2_py for using Pybind11 on Windows
debug and RelWithDebInfo.
For more info see the original PRs
ros2/rosbag2#538
ros2/rosbag2#531
Signed-off-by: Shane Loretz sloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org","Woohoo!  I also tested this fix locally, and it seems to do the trick for me.  I'll do a brief review here, and then we can merge.  Thanks for the work.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,681,2021-02-16T22:29:58Z,2021-02-24T23:33:44Z,2021-02-24T23:33:48Z,MERGED,True,77,2,4,https://github.com/sloretz,Copy windows debug fixes for pybind11,6,['bug'],https://github.com/ros2/rclpy/pull/681,https://github.com/sloretz,13,https://github.com/ros2/rclpy/pull/681#issuecomment-785400718,"Hopefully fixes #680
Copies windows debug fixes from rosbag2_py for using Pybind11 on Windows
debug and RelWithDebInfo.
For more info see the original PRs
ros2/rosbag2#538
ros2/rosbag2#531
Signed-off-by: Shane Loretz sloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org","CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,681,2021-02-16T22:29:58Z,2021-02-24T23:33:44Z,2021-02-24T23:33:48Z,MERGED,True,77,2,4,https://github.com/sloretz,Copy windows debug fixes for pybind11,6,['bug'],https://github.com/ros2/rclpy/pull/681,https://github.com/sloretz,14,https://github.com/ros2/rclpy/pull/681#issuecomment-785400944,"Hopefully fixes #680
Copies windows debug fixes from rosbag2_py for using Pybind11 on Windows
debug and RelWithDebInfo.
For more info see the original PRs
ros2/rosbag2#538
ros2/rosbag2#531
Signed-off-by: Shane Loretz sloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org","One question: should we open up an issue to track reverting these changes once everything is converted to PyBind11? Or are you going to track it in #665?

I'll track it in #665. It should be removed in each PR as it's merged.",True,{'THUMBS_UP': ['https://github.com/clalancette']}
ros2/rclpy,https://github.com/ros2/rclpy,682,2021-02-18T01:50:46Z,2021-02-18T13:11:17Z,2021-02-18T13:11:19Z,MERGED,True,0,1,1,https://github.com/claireyywang,remove maintainer,1,[],https://github.com/ros2/rclpy/pull/682,https://github.com/claireyywang,1,https://github.com/ros2/rclpy/pull/682,,,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,683,2021-02-23T18:55:54Z,2021-03-02T18:53:12Z,2021-03-02T19:58:51Z,MERGED,True,202,68,4,https://github.com/ivanpauno,Enforce static parameter types when dynamic typing is not specified,8,['enhancement'],https://github.com/ros2/rclpy/pull/683,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/683,Equivalent to ros2/rclcpp#1522.,Equivalent to ros2/rclcpp#1522.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,683,2021-02-23T18:55:54Z,2021-03-02T18:53:12Z,2021-03-02T19:58:51Z,MERGED,True,202,68,4,https://github.com/ivanpauno,Enforce static parameter types when dynamic typing is not specified,8,['enhancement'],https://github.com/ros2/rclpy/pull/683,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/683#issuecomment-784434361,Equivalent to ros2/rclcpp#1522.,"CI to check if this breaks any downstream package:

Linux",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,683,2021-02-23T18:55:54Z,2021-03-02T18:53:12Z,2021-03-02T19:58:51Z,MERGED,True,202,68,4,https://github.com/ivanpauno,Enforce static parameter types when dynamic typing is not specified,8,['enhancement'],https://github.com/ros2/rclpy/pull/683,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/683#issuecomment-785205663,Equivalent to ros2/rclcpp#1522.,@jacobperron this is now ready for review,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,683,2021-02-23T18:55:54Z,2021-03-02T18:53:12Z,2021-03-02T19:58:51Z,MERGED,True,202,68,4,https://github.com/ivanpauno,Enforce static parameter types when dynamic typing is not specified,8,['enhancement'],https://github.com/ros2/rclpy/pull/683,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/683#issuecomment-787959759,Equivalent to ros2/rclcpp#1522.,@jacobperron friendly ping,True,{'EYES': ['https://github.com/jacobperron']}
ros2/rclpy,https://github.com/ros2/rclpy,683,2021-02-23T18:55:54Z,2021-03-02T18:53:12Z,2021-03-02T19:58:51Z,MERGED,True,202,68,4,https://github.com/ivanpauno,Enforce static parameter types when dynamic typing is not specified,8,['enhancement'],https://github.com/ros2/rclpy/pull/683,https://github.com/ivanpauno,5,https://github.com/ros2/rclpy/pull/683#issuecomment-788945015,Equivalent to ros2/rclcpp#1522.,"CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,683,2021-02-23T18:55:54Z,2021-03-02T18:53:12Z,2021-03-02T19:58:51Z,MERGED,True,202,68,4,https://github.com/ivanpauno,Enforce static parameter types when dynamic typing is not specified,8,['enhancement'],https://github.com/ros2/rclpy/pull/683,https://github.com/ros-discourse,6,https://github.com/ros2/rclpy/pull/683#issuecomment-789174494,Equivalent to ros2/rclcpp#1522.,"This pull request has been mentioned on ROS Discourse. There might be relevant details there:
https://discourse.ros.org/t/feedback-required-should-parameters-be-able-to-change-of-type/18319/2",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,684,2021-02-25T00:13:45Z,2021-03-10T19:07:15Z,2021-03-10T19:07:15Z,CLOSED,False,82,0,1,https://github.com/audrow,Add API for checking QoS profile compatibility,1,['enhancement'],https://github.com/ros2/rclpy/pull/684,https://github.com/audrow,1,https://github.com/ros2/rclpy/pull/684,"Depends on ros2/rmw#299

To do:

 Add Galactic release note","Depends on ros2/rmw#299

To do:

 Add Galactic release note",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,684,2021-02-25T00:13:45Z,2021-03-10T19:07:15Z,2021-03-10T19:07:15Z,CLOSED,False,82,0,1,https://github.com/audrow,Add API for checking QoS profile compatibility,1,['enhancement'],https://github.com/ros2/rclpy/pull/684,https://github.com/audrow,2,https://github.com/ros2/rclpy/pull/684#issuecomment-795925712,"Depends on ros2/rmw#299

To do:

 Add Galactic release note",Closed in favor of #708.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,685,2021-02-26T19:50:50Z,2021-03-01T17:48:21Z,2021-03-01T17:48:24Z,MERGED,True,35,104,1,https://github.com/cottsay,Clean up exceptions in _rclpy_action,1,['enhancement'],https://github.com/ros2/rclpy/pull/685,https://github.com/cottsay,1,https://github.com/ros2/rclpy/pull/685,The main change here is the use of RCLError to replace the repeated pattern of fetching the RCL error string.,The main change here is the use of RCLError to replace the repeated pattern of fetching the RCL error string.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,685,2021-02-26T19:50:50Z,2021-03-01T17:48:21Z,2021-03-01T17:48:24Z,MERGED,True,35,104,1,https://github.com/cottsay,Clean up exceptions in _rclpy_action,1,['enhancement'],https://github.com/ros2/rclpy/pull/685,https://github.com/cottsay,2,https://github.com/ros2/rclpy/pull/685#issuecomment-786971774,The main change here is the use of RCLError to replace the repeated pattern of fetching the RCL error string.,"Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,686,2021-02-26T23:01:40Z,2021-03-18T17:06:30Z,2021-03-18T17:19:45Z,CLOSED,False,4,0,2,https://github.com/jacobperron,Add history and depth to topic endpoint string,1,['enhancement'],https://github.com/ros2/rclpy/pull/686,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/686,"I'm not sure why history and depth were left out originally. Maybe @jaisontj or @mm318 can answer?
AFAICT, we seem to be able to get this info from the endpoints just fine.","I'm not sure why history and depth were left out originally. Maybe @jaisontj or @mm318 can answer?
AFAICT, we seem to be able to get this info from the endpoints just fine.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,686,2021-02-26T23:01:40Z,2021-03-18T17:06:30Z,2021-03-18T17:19:45Z,CLOSED,False,4,0,2,https://github.com/jacobperron,Add history and depth to topic endpoint string,1,['enhancement'],https://github.com/ros2/rclpy/pull/686,https://github.com/mm318,2,https://github.com/ros2/rclpy/pull/686#issuecomment-787032126,"I'm not sure why history and depth were left out originally. Maybe @jaisontj or @mm318 can answer?
AFAICT, we seem to be able to get this info from the endpoints just fine.","I think it was left out because the history and depth QoS settings didn't contribute to QoS incompatibility, and this feature was implemented with debugging QoS incompatibilities in mind.
Overall, it was an oversight. Thanks for making the enhancement!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,686,2021-02-26T23:01:40Z,2021-03-18T17:06:30Z,2021-03-18T17:19:45Z,CLOSED,False,4,0,2,https://github.com/jacobperron,Add history and depth to topic endpoint string,1,['enhancement'],https://github.com/ros2/rclpy/pull/686,https://github.com/jacobperron,3,https://github.com/ros2/rclpy/pull/686#issuecomment-787517554,"I'm not sure why history and depth were left out originally. Maybe @jaisontj or @mm318 can answer?
AFAICT, we seem to be able to get this info from the endpoints just fine.","CI with connected PR (ros2/ros2cli#605):

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,686,2021-02-26T23:01:40Z,2021-03-18T17:06:30Z,2021-03-18T17:19:45Z,CLOSED,False,4,0,2,https://github.com/jacobperron,Add history and depth to topic endpoint string,1,['enhancement'],https://github.com/ros2/rclpy/pull/686,https://github.com/jacobperron,4,https://github.com/ros2/rclpy/pull/686#issuecomment-789160762,"I'm not sure why history and depth were left out originally. Maybe @jaisontj or @mm318 can answer?
AFAICT, we seem to be able to get this info from the endpoints just fine.","So, I guess I got lucky with the default rmw. It looks like the history and depth values are only reported by rmw_cyclonedds_cpp, and not rmw_fastrtps_cpp or rmw_connext_cpp. Instead, we always get
History: UNKNOWN
Depth: 0

Knowing that this data isn't provided by 2/3 of the officially supported RMWs, I'm not sure if it makes sense to move forward with this PR. What do others think?
cc/ @ivanpauno",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,686,2021-02-26T23:01:40Z,2021-03-18T17:06:30Z,2021-03-18T17:19:45Z,CLOSED,False,4,0,2,https://github.com/jacobperron,Add history and depth to topic endpoint string,1,['enhancement'],https://github.com/ros2/rclpy/pull/686,https://github.com/ivanpauno,5,https://github.com/ros2/rclpy/pull/686#issuecomment-789164662,"I'm not sure why history and depth were left out originally. Maybe @jaisontj or @mm318 can answer?
AFAICT, we seem to be able to get this info from the endpoints just fine.","Knowing that this data isn't provided by 2/3 of the officially supported RMWs, I'm not sure if it makes sense to move forward with this PR. What do others think?

I would say no, except that it can also be corrected in the other rmw implementations.
AFAIR not all qos settings are shared through discovery in DDS, only the ones that are used for qos matching.
I'm not sure what cyclonedds is doing, I will double check.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,686,2021-02-26T23:01:40Z,2021-03-18T17:06:30Z,2021-03-18T17:19:45Z,CLOSED,False,4,0,2,https://github.com/jacobperron,Add history and depth to topic endpoint string,1,['enhancement'],https://github.com/ros2/rclpy/pull/686,https://github.com/emersonknapp,6,https://github.com/ros2/rclpy/pull/686#issuecomment-789165030,"I'm not sure why history and depth were left out originally. Maybe @jaisontj or @mm318 can answer?
AFAICT, we seem to be able to get this info from the endpoints just fine.","Knowing that this data isn't provided by 2/3 of the officially supported RMWs, I'm not sure if it makes sense to move forward with this PR. What do others think?

Ah yes, I remember this now. I think there is no requirement for the participants to report these values because they're ""participant-internal"" values. It's worth leaving a comment in this code to inform the next person to wonder about it.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,686,2021-02-26T23:01:40Z,2021-03-18T17:06:30Z,2021-03-18T17:19:45Z,CLOSED,False,4,0,2,https://github.com/jacobperron,Add history and depth to topic endpoint string,1,['enhancement'],https://github.com/ros2/rclpy/pull/686,https://github.com/ivanpauno,7,https://github.com/ros2/rclpy/pull/686#issuecomment-789205957,"I'm not sure why history and depth were left out originally. Maybe @jaisontj or @mm318 can answer?
AFAICT, we seem to be able to get this info from the endpoints just fine.","I'm not sure what cyclonedds is doing, I will double check.

I tried, when you use a cyclonedds node and then call ros2 topic info -v <topic_name> also using cyclone it works correctly.
But if you create a node with fastrtps and then ros2 topic info -v <topic_name> with cyclonedds the information is not accurate.
i.e.: cyclone is sharing more metadata than what DDS requires (or that's my guess)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,686,2021-02-26T23:01:40Z,2021-03-18T17:06:30Z,2021-03-18T17:19:45Z,CLOSED,False,4,0,2,https://github.com/jacobperron,Add history and depth to topic endpoint string,1,['enhancement'],https://github.com/ros2/rclpy/pull/686,https://github.com/jacobperron,8,https://github.com/ros2/rclpy/pull/686#issuecomment-802123069,"I'm not sure why history and depth were left out originally. Maybe @jaisontj or @mm318 can answer?
AFAICT, we seem to be able to get this info from the endpoints just fine.","Closing, since history and depth info isn't available for most RMWs.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,688,2021-02-27T00:40:34Z,2021-03-01T15:52:29Z,2021-03-01T15:52:33Z,MERGED,True,2,0,1,https://github.com/sloretz,Clean windows flags on _rclpy_pybind11 and _rclpy_action,1,['bug'],https://github.com/ros2/rclpy/pull/688,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/688,"Fixes #687
The clean_windows_flags function from #681 needs to be applied to these targets.","Fixes #687
The clean_windows_flags function from #681 needs to be applied to these targets.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,688,2021-02-27T00:40:34Z,2021-03-01T15:52:29Z,2021-03-01T15:52:33Z,MERGED,True,2,0,1,https://github.com/sloretz,Clean windows flags on _rclpy_pybind11 and _rclpy_action,1,['bug'],https://github.com/ros2/rclpy/pull/688,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/688#issuecomment-786968105,"Fixes #687
The clean_windows_flags function from #681 needs to be applied to these targets.","CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows 
ci_packaging_windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,688,2021-02-27T00:40:34Z,2021-03-01T15:52:29Z,2021-03-01T15:52:33Z,MERGED,True,2,0,1,https://github.com/sloretz,Clean windows flags on _rclpy_pybind11 and _rclpy_action,1,['bug'],https://github.com/ros2/rclpy/pull/688,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/688#issuecomment-787981251,"Fixes #687
The clean_windows_flags function from #681 needs to be applied to these targets.",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,690,2021-03-01T21:27:54Z,2021-03-02T00:26:27Z,2021-03-02T00:26:29Z,MERGED,True,3,0,1,https://github.com/sloretz,Include Pybind11 before Python.h,1,['bug'],https://github.com/ros2/rclpy/pull/690,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/690,"Fixes #689
handle.h is including Python.h. Including pybind11/pybind11.h first makes sure the Py_DEBUG macro is handled in a way that avoids a warning on Windows.","Fixes #689
handle.h is including Python.h. Including pybind11/pybind11.h first makes sure the Py_DEBUG macro is handled in a way that avoids a warning on Windows.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,690,2021-03-01T21:27:54Z,2021-03-02T00:26:27Z,2021-03-02T00:26:29Z,MERGED,True,3,0,1,https://github.com/sloretz,Include Pybind11 before Python.h,1,['bug'],https://github.com/ros2/rclpy/pull/690,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/690#issuecomment-788307605,"Fixes #689
handle.h is including Python.h. Including pybind11/pybind11.h first makes sure the Py_DEBUG macro is handled in a way that avoids a warning on Windows.","CI (build: --packages-up-to rclpy, test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,690,2021-03-01T21:27:54Z,2021-03-02T00:26:27Z,2021-03-02T00:26:29Z,MERGED,True,3,0,1,https://github.com/sloretz,Include Pybind11 before Python.h,1,['bug'],https://github.com/ros2/rclpy/pull/690,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/690#issuecomment-788309443,"Fixes #689
handle.h is including Python.h. Including pybind11/pybind11.h first makes sure the Py_DEBUG macro is handled in a way that avoids a warning on Windows.",Windows Debug:,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,691,2021-03-02T01:34:49Z,2021-03-02T16:05:50Z,2021-03-02T16:43:04Z,MERGED,True,99,100,4,https://github.com/sloretz,rclpy_ok and rclpy_create_context to pybind11,1,[],https://github.com/ros2/rclpy/pull/691,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/691,"Converts two rcl_context_t functions to pybind11, keeping the C to Python API the same.
part of #665
Make a couple functions use pybind11. These ones didn't benefit too much in the short term, but it brings rclpy a little closer to using pybind11 everywhere.","Converts two rcl_context_t functions to pybind11, keeping the C to Python API the same.
part of #665
Make a couple functions use pybind11. These ones didn't benefit too much in the short term, but it brings rclpy a little closer to using pybind11 everywhere.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,691,2021-03-02T01:34:49Z,2021-03-02T16:05:50Z,2021-03-02T16:43:04Z,MERGED,True,99,100,4,https://github.com/sloretz,rclpy_ok and rclpy_create_context to pybind11,1,[],https://github.com/ros2/rclpy/pull/691,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/691#issuecomment-788502229,"Converts two rcl_context_t functions to pybind11, keeping the C to Python API the same.
part of #665
Make a couple functions use pybind11. These ones didn't benefit too much in the short term, but it brings rclpy a little closer to using pybind11 everywhere.","CI (build: --packages-up-to rclpy test:  --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,692,2021-03-03T00:32:31Z,2021-03-06T00:59:36Z,2021-03-06T00:59:38Z,MERGED,True,175,141,5,https://github.com/sloretz,Convert guard condition functions to pybind11,1,[],https://github.com/ros2/rclpy/pull/692,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/692,"Part of #665
This converts a couple guard condition functions to pybind11.

rclpy_create_guard_condition
rclpy_trigger_guard_condition","Part of #665
This converts a couple guard condition functions to pybind11.

rclpy_create_guard_condition
rclpy_trigger_guard_condition",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,692,2021-03-03T00:32:31Z,2021-03-06T00:59:36Z,2021-03-06T00:59:38Z,MERGED,True,175,141,5,https://github.com/sloretz,Convert guard condition functions to pybind11,1,[],https://github.com/ros2/rclpy/pull/692,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/692#issuecomment-789326250,"Part of #665
This converts a couple guard condition functions to pybind11.

rclpy_create_guard_condition
rclpy_trigger_guard_condition","CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows 

Windows re-run to see if chef cookbook issue is temporary",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,692,2021-03-03T00:32:31Z,2021-03-06T00:59:36Z,2021-03-06T00:59:38Z,MERGED,True,175,141,5,https://github.com/sloretz,Convert guard condition functions to pybind11,1,[],https://github.com/ros2/rclpy/pull/692,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/692#issuecomment-791802364,"Part of #665
This converts a couple guard condition functions to pybind11.

rclpy_create_guard_condition
rclpy_trigger_guard_condition","Rebased - no changes. Running full CI since windows had an issue.
CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,692,2021-03-03T00:32:31Z,2021-03-06T00:59:36Z,2021-03-06T00:59:38Z,MERGED,True,175,141,5,https://github.com/sloretz,Convert guard condition functions to pybind11,1,[],https://github.com/ros2/rclpy/pull/692,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/692#issuecomment-791821354,"Part of #665
This converts a couple guard condition functions to pybind11.

rclpy_create_guard_condition
rclpy_trigger_guard_condition",Merging since CI is green and the rebase fixed conflicts without changing any logic.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,693,2021-03-03T19:26:44Z,2021-03-08T21:48:33Z,2021-03-08T21:48:35Z,MERGED,True,431,511,5,https://github.com/sloretz,Convert timer functions to pybind11,1,[],https://github.com/ros2/rclpy/pull/693,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/693,"part of #665
Converts:

rclpy_reset_timer
rclpy_call_timer
rclpy_change_timer_period
rclpy_is_timer_ready
rclpy_cancel_timer
rclpy_is_timer_canceled
rclpy_time_until_next_call
rclpy_time_since_last_call
rclpy_get_timer_period
rclpy_create_timer","part of #665
Converts:

rclpy_reset_timer
rclpy_call_timer
rclpy_change_timer_period
rclpy_is_timer_ready
rclpy_cancel_timer
rclpy_is_timer_canceled
rclpy_time_until_next_call
rclpy_time_since_last_call
rclpy_get_timer_period
rclpy_create_timer",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,693,2021-03-03T19:26:44Z,2021-03-08T21:48:33Z,2021-03-08T21:48:35Z,MERGED,True,431,511,5,https://github.com/sloretz,Convert timer functions to pybind11,1,[],https://github.com/ros2/rclpy/pull/693,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/693#issuecomment-789996595,"part of #665
Converts:

rclpy_reset_timer
rclpy_call_timer
rclpy_change_timer_period
rclpy_is_timer_ready
rclpy_cancel_timer
rclpy_is_timer_canceled
rclpy_time_until_next_call
rclpy_time_since_last_call
rclpy_get_timer_period
rclpy_create_timer","CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows  - I think there's currently a CI issue with Windows, so this one might fail and need to be rerun",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,693,2021-03-03T19:26:44Z,2021-03-08T21:48:33Z,2021-03-08T21:48:35Z,MERGED,True,431,511,5,https://github.com/sloretz,Convert timer functions to pybind11,1,[],https://github.com/ros2/rclpy/pull/693,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/693#issuecomment-791824384,"part of #665
Converts:

rclpy_reset_timer
rclpy_call_timer
rclpy_change_timer_period
rclpy_is_timer_ready
rclpy_cancel_timer
rclpy_is_timer_canceled
rclpy_time_until_next_call
rclpy_time_since_last_call
rclpy_get_timer_period
rclpy_create_timer","CI after rebasing to fix merge conflict (build: --packages-up-to rclpy test: --packges-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,693,2021-03-03T19:26:44Z,2021-03-08T21:48:33Z,2021-03-08T21:48:35Z,MERGED,True,431,511,5,https://github.com/sloretz,Convert timer functions to pybind11,1,[],https://github.com/ros2/rclpy/pull/693,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/693#issuecomment-793023681,"part of #665
Converts:

rclpy_reset_timer
rclpy_call_timer
rclpy_change_timer_period
rclpy_is_timer_ready
rclpy_cancel_timer
rclpy_is_timer_canceled
rclpy_time_until_next_call
rclpy_time_since_last_call
rclpy_get_timer_period
rclpy_create_timer","CI with hopefully no typo's in the args (build:  --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,694,2021-03-04T20:06:49Z,2021-03-05T21:19:27Z,2021-03-05T21:19:31Z,MERGED,True,120,78,5,https://github.com/cottsay,Convert service info functions to pybind11,2,[],https://github.com/ros2/rclpy/pull/694,https://github.com/cottsay,1,https://github.com/ros2/rclpy/pull/694,"Part of #665
Converts:

rclpy_service_info_get_sequence_number
rclpy_service_info_get_source_timestamp
rclpy_service_info_get_received_timestamp","Part of #665
Converts:

rclpy_service_info_get_sequence_number
rclpy_service_info_get_source_timestamp
rclpy_service_info_get_received_timestamp",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,694,2021-03-04T20:06:49Z,2021-03-05T21:19:27Z,2021-03-05T21:19:31Z,MERGED,True,120,78,5,https://github.com/cottsay,Convert service info functions to pybind11,2,[],https://github.com/ros2/rclpy/pull/694,https://github.com/cottsay,2,https://github.com/ros2/rclpy/pull/694#issuecomment-790903685,"Part of #665
Converts:

rclpy_service_info_get_sequence_number
rclpy_service_info_get_source_timestamp
rclpy_service_info_get_received_timestamp","CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,695,2021-03-04T21:12:59Z,2021-03-09T03:48:50Z,2021-03-09T03:48:52Z,MERGED,True,315,318,5,https://github.com/cottsay,Convert publisher functions to pybind11,9,[],https://github.com/ros2/rclpy/pull/695,https://github.com/cottsay,1,https://github.com/ros2/rclpy/pull/695,"Part of #665
Converts:

rclpy_create_publisher
rclpy_publisher_get_subscription_count
rclpy_publisher_get_topic_name
rclpy_publish
rclpy_publish_raw

CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows","Part of #665
Converts:

rclpy_create_publisher
rclpy_publisher_get_subscription_count
rclpy_publisher_get_topic_name
rclpy_publish
rclpy_publish_raw

CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,695,2021-03-04T21:12:59Z,2021-03-09T03:48:50Z,2021-03-09T03:48:52Z,MERGED,True,315,318,5,https://github.com/cottsay,Convert publisher functions to pybind11,9,[],https://github.com/ros2/rclpy/pull/695,https://github.com/cottsay,2,https://github.com/ros2/rclpy/pull/695#issuecomment-790965022,"Part of #665
Converts:

rclpy_create_publisher
rclpy_publisher_get_subscription_count
rclpy_publisher_get_topic_name
rclpy_publish
rclpy_publish_raw

CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",I completely missed rclpy_create_publisher. Hold off on reviewing this until I get that done.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,696,2021-03-04T23:59:43Z,2021-03-09T20:56:39Z,2021-03-09T20:56:42Z,MERGED,True,247,215,5,https://github.com/cottsay,Convert subscription functions to pybind11,15,[],https://github.com/ros2/rclpy/pull/696,https://github.com/cottsay,1,https://github.com/ros2/rclpy/pull/696,"Part of #665
Converts:

rclpy_get_subscription_logger_name
rclpy_get_subscription_topic_name
rclpy_create_subscription

CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows","Part of #665
Converts:

rclpy_get_subscription_logger_name
rclpy_get_subscription_topic_name
rclpy_create_subscription

CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,696,2021-03-04T23:59:43Z,2021-03-09T20:56:39Z,2021-03-09T20:56:42Z,MERGED,True,247,215,5,https://github.com/cottsay,Convert subscription functions to pybind11,15,[],https://github.com/ros2/rclpy/pull/696,https://github.com/cottsay,2,https://github.com/ros2/rclpy/pull/696#issuecomment-793282904,"Part of #665
Converts:

rclpy_get_subscription_logger_name
rclpy_get_subscription_topic_name
rclpy_create_subscription

CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,696,2021-03-04T23:59:43Z,2021-03-09T20:56:39Z,2021-03-09T20:56:42Z,MERGED,True,247,215,5,https://github.com/cottsay,Convert subscription functions to pybind11,15,[],https://github.com/ros2/rclpy/pull/696,https://github.com/cottsay,3,https://github.com/ros2/rclpy/pull/696#issuecomment-794332617,"Part of #665
Converts:

rclpy_get_subscription_logger_name
rclpy_get_subscription_topic_name
rclpy_create_subscription

CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,696,2021-03-04T23:59:43Z,2021-03-09T20:56:39Z,2021-03-09T20:56:42Z,MERGED,True,247,215,5,https://github.com/cottsay,Convert subscription functions to pybind11,15,[],https://github.com/ros2/rclpy/pull/696,https://github.com/cottsay,4,https://github.com/ros2/rclpy/pull/696#issuecomment-794443418,"Part of #665
Converts:

rclpy_get_subscription_logger_name
rclpy_get_subscription_topic_name
rclpy_create_subscription

CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows","Test failures are cppcheck timeouts. I'll look into bumping the timeout. For now, this change is good to go in.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,698,2021-03-05T22:08:13Z,2021-03-25T18:49:46Z,2021-03-25T18:49:46Z,MERGED,True,0,11,2,https://github.com/asorbini,Replace rmw_connext_cpp with rmw_connextdds,1,[],https://github.com/ros2/rclpy/pull/698,https://github.com/asorbini,1,https://github.com/ros2/rclpy/pull/698,"This PR removes all references to rmw_connext_cpp, so that it may be replaced by rmw_connextdds.
The PR re-enables two tests which were previously disabled for Connext.
See rticommunity/rmw_connextdds #9 for a list of related PRs, and an overview of all the changes required to replace ros2/rmw_connext (rmw_connext_cpp) with rticommunity/rmw_connextdds in the ROS2 source tree.","This PR removes all references to rmw_connext_cpp, so that it may be replaced by rmw_connextdds.
The PR re-enables two tests which were previously disabled for Connext.
See rticommunity/rmw_connextdds #9 for a list of related PRs, and an overview of all the changes required to replace ros2/rmw_connext (rmw_connext_cpp) with rticommunity/rmw_connextdds in the ROS2 source tree.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,698,2021-03-05T22:08:13Z,2021-03-25T18:49:46Z,2021-03-25T18:49:46Z,MERGED,True,0,11,2,https://github.com/asorbini,Replace rmw_connext_cpp with rmw_connextdds,1,[],https://github.com/ros2/rclpy/pull/698,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/698#issuecomment-792758472,"This PR removes all references to rmw_connext_cpp, so that it may be replaced by rmw_connextdds.
The PR re-enables two tests which were previously disabled for Connext.
See rticommunity/rmw_connextdds #9 for a list of related PRs, and an overview of all the changes required to replace ros2/rmw_connext (rmw_connext_cpp) with rticommunity/rmw_connextdds in the ROS2 source tree.","Anyways, we're not going to run rmw_connext_cpp tests in CI anymore, so this PR might be ok.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,698,2021-03-05T22:08:13Z,2021-03-25T18:49:46Z,2021-03-25T18:49:46Z,MERGED,True,0,11,2,https://github.com/asorbini,Replace rmw_connext_cpp with rmw_connextdds,1,[],https://github.com/ros2/rclpy/pull/698,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/698#issuecomment-805813001,"This PR removes all references to rmw_connext_cpp, so that it may be replaced by rmw_connextdds.
The PR re-enables two tests which were previously disabled for Connext.
See rticommunity/rmw_connextdds #9 for a list of related PRs, and an overview of all the changes required to replace ros2/rmw_connext (rmw_connext_cpp) with rticommunity/rmw_connextdds in the ROS2 source tree.","I'm good with this change, but we actually have to wait to merge it until we completely remove rmw_connext_cpp.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,698,2021-03-05T22:08:13Z,2021-03-25T18:49:46Z,2021-03-25T18:49:46Z,MERGED,True,0,11,2,https://github.com/asorbini,Replace rmw_connext_cpp with rmw_connextdds,1,[],https://github.com/ros2/rclpy/pull/698,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/698#issuecomment-806025409,"This PR removes all references to rmw_connext_cpp, so that it may be replaced by rmw_connextdds.
The PR re-enables two tests which were previously disabled for Connext.
See rticommunity/rmw_connextdds #9 for a list of related PRs, and an overview of all the changes required to replace ros2/rmw_connext (rmw_connext_cpp) with rticommunity/rmw_connextdds in the ROS2 source tree.","I'm good with this change, but we actually have to wait to merge it until we completely remove rmw_connext_cpp.

☝️
this should be merged after ros2/ros2#1116.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,698,2021-03-05T22:08:13Z,2021-03-25T18:49:46Z,2021-03-25T18:49:46Z,MERGED,True,0,11,2,https://github.com/asorbini,Replace rmw_connext_cpp with rmw_connextdds,1,[],https://github.com/ros2/rclpy/pull/698,https://github.com/clalancette,5,https://github.com/ros2/rclpy/pull/698#issuecomment-807274504,"This PR removes all references to rmw_connext_cpp, so that it may be replaced by rmw_connextdds.
The PR re-enables two tests which were previously disabled for Connext.
See rticommunity/rmw_connextdds #9 for a list of related PRs, and an overview of all the changes required to replace ros2/rmw_connext (rmw_connext_cpp) with rticommunity/rmw_connextdds in the ROS2 source tree.",Green CI is at ros2/rmw_connextdds#9 (comment),True,{}
ros2/rclpy,https://github.com/ros2/rclpy,699,2021-03-05T23:30:13Z,2021-03-09T03:08:50Z,2021-03-09T03:08:52Z,MERGED,True,558,628,12,https://github.com/sloretz,Convert clock and time functions to pybind11,2,['bug'],https://github.com/ros2/rclpy/pull/699,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/699,"Part of #665
Converts time_point and clock functions to pybind11. Along the way I fixed a signed/unsigned bug where python to C conversion allowed time values up to 2**64-1 to be set to be set, but the rcl_time_point_t struct only accepts up to 2**63-1 because the type is signed. I also replaced the ClockType and ClockChange enums with pybind11 ones to make the conversion between the C and python layer easier.

rclpy_create_time_point
rclpy_time_point_get_nanoseconds
rclpy_create_clock
rclpy_clock_get_now
rclpy_clock_get_ros_time_override_is_enabled
rclpy_clock_set_ros_time_override_is_enabled
rclpy_clock_set_ros_time_override
rclpy_add_clock_callback, METH_VARARGS
rclpy_remove_clock_callback, METH_VARARGS","Part of #665
Converts time_point and clock functions to pybind11. Along the way I fixed a signed/unsigned bug where python to C conversion allowed time values up to 2**64-1 to be set to be set, but the rcl_time_point_t struct only accepts up to 2**63-1 because the type is signed. I also replaced the ClockType and ClockChange enums with pybind11 ones to make the conversion between the C and python layer easier.

rclpy_create_time_point
rclpy_time_point_get_nanoseconds
rclpy_create_clock
rclpy_clock_get_now
rclpy_clock_get_ros_time_override_is_enabled
rclpy_clock_set_ros_time_override_is_enabled
rclpy_clock_set_ros_time_override
rclpy_add_clock_callback, METH_VARARGS
rclpy_remove_clock_callback, METH_VARARGS",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,699,2021-03-05T23:30:13Z,2021-03-09T03:08:50Z,2021-03-09T03:08:52Z,MERGED,True,558,628,12,https://github.com/sloretz,Convert clock and time functions to pybind11,2,['bug'],https://github.com/ros2/rclpy/pull/699,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/699#issuecomment-793238591,"Part of #665
Converts time_point and clock functions to pybind11. Along the way I fixed a signed/unsigned bug where python to C conversion allowed time values up to 2**64-1 to be set to be set, but the rcl_time_point_t struct only accepts up to 2**63-1 because the type is signed. I also replaced the ClockType and ClockChange enums with pybind11 ones to make the conversion between the C and python layer easier.

rclpy_create_time_point
rclpy_time_point_get_nanoseconds
rclpy_create_clock
rclpy_clock_get_now
rclpy_clock_get_ros_time_override_is_enabled
rclpy_clock_set_ros_time_override_is_enabled
rclpy_clock_set_ros_time_override
rclpy_add_clock_callback, METH_VARARGS
rclpy_remove_clock_callback, METH_VARARGS","CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,699,2021-03-05T23:30:13Z,2021-03-09T03:08:50Z,2021-03-09T03:08:52Z,MERGED,True,558,628,12,https://github.com/sloretz,Convert clock and time functions to pybind11,2,['bug'],https://github.com/ros2/rclpy/pull/699,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/699#issuecomment-793298522,"Part of #665
Converts time_point and clock functions to pybind11. Along the way I fixed a signed/unsigned bug where python to C conversion allowed time values up to 2**64-1 to be set to be set, but the rcl_time_point_t struct only accepts up to 2**63-1 because the type is signed. I also replaced the ClockType and ClockChange enums with pybind11 ones to make the conversion between the C and python layer easier.

rclpy_create_time_point
rclpy_time_point_get_nanoseconds
rclpy_create_clock
rclpy_clock_get_now
rclpy_clock_get_ros_time_override_is_enabled
rclpy_clock_set_ros_time_override_is_enabled
rclpy_clock_set_ros_time_override
rclpy_add_clock_callback, METH_VARARGS
rclpy_remove_clock_callback, METH_VARARGS","PR job looks like a flaky test. Merging! Edit, actually re-running to double check that it's flaky",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,699,2021-03-05T23:30:13Z,2021-03-09T03:08:50Z,2021-03-09T03:08:52Z,MERGED,True,558,628,12,https://github.com/sloretz,Convert clock and time functions to pybind11,2,['bug'],https://github.com/ros2/rclpy/pull/699,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/699#issuecomment-793298884,"Part of #665
Converts time_point and clock functions to pybind11. Along the way I fixed a signed/unsigned bug where python to C conversion allowed time values up to 2**64-1 to be set to be set, but the rcl_time_point_t struct only accepts up to 2**63-1 because the type is signed. I also replaced the ClockType and ClockChange enums with pybind11 ones to make the conversion between the C and python layer easier.

rclpy_create_time_point
rclpy_time_point_get_nanoseconds
rclpy_create_clock
rclpy_clock_get_now
rclpy_clock_get_ros_time_override_is_enabled
rclpy_clock_set_ros_time_override_is_enabled
rclpy_clock_set_ros_time_override
rclpy_add_clock_callback, METH_VARARGS
rclpy_remove_clock_callback, METH_VARARGS",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,700,2021-03-08T20:24:10Z,2021-03-08T22:59:19Z,2021-03-08T22:59:21Z,MERGED,True,12,39,2,https://github.com/cottsay,Set destructor on QoS Profile struct,2,[],https://github.com/ros2/rclpy/pull/700,https://github.com/cottsay,1,https://github.com/ros2/rclpy/pull/700,"This ""C"" variant of the QoS profile object seems to be used only when initializing other objects.
I'm not entirely sure, but I believe that this may have simply been an optimization, since we know that the object won't be touched again.
In any case, it will be easier to convert to pybind11 if we allow it to be destroyed normally.

Linux 
Linux-aarch64 
macOS 
Windows","This ""C"" variant of the QoS profile object seems to be used only when initializing other objects.
I'm not entirely sure, but I believe that this may have simply been an optimization, since we know that the object won't be touched again.
In any case, it will be easier to convert to pybind11 if we allow it to be destroyed normally.

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,701,2021-03-08T20:47:37Z,2021-03-09T20:04:56Z,2021-03-09T20:04:59Z,MERGED,True,324,308,5,https://github.com/cottsay,Convert rclpy client functions to pybind11,9,[],https://github.com/ros2/rclpy/pull/701,https://github.com/cottsay,1,https://github.com/ros2/rclpy/pull/701,"Part of #665
Converts:

rclpy_create_client
rclpy_send_request
rclpy_service_server_is_available
rclpy_take_response

CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows","Part of #665
Converts:

rclpy_create_client
rclpy_send_request
rclpy_service_server_is_available
rclpy_take_response

CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,701,2021-03-08T20:47:37Z,2021-03-09T20:04:56Z,2021-03-09T20:04:59Z,MERGED,True,324,308,5,https://github.com/cottsay,Convert rclpy client functions to pybind11,9,[],https://github.com/ros2/rclpy/pull/701,https://github.com/cottsay,2,https://github.com/ros2/rclpy/pull/701#issuecomment-793165984,"Part of #665
Converts:

rclpy_create_client
rclpy_send_request
rclpy_service_server_is_available
rclpy_take_response

CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,701,2021-03-08T20:47:37Z,2021-03-09T20:04:56Z,2021-03-09T20:04:59Z,MERGED,True,324,308,5,https://github.com/cottsay,Convert rclpy client functions to pybind11,9,[],https://github.com/ros2/rclpy/pull/701,https://github.com/cottsay,3,https://github.com/ros2/rclpy/pull/701#issuecomment-793202506,"Part of #665
Converts:

rclpy_create_client
rclpy_send_request
rclpy_service_server_is_available
rclpy_take_response

CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,701,2021-03-08T20:47:37Z,2021-03-09T20:04:56Z,2021-03-09T20:04:59Z,MERGED,True,324,308,5,https://github.com/cottsay,Convert rclpy client functions to pybind11,9,[],https://github.com/ros2/rclpy/pull/701,https://github.com/cottsay,4,https://github.com/ros2/rclpy/pull/701#issuecomment-793356187,"Part of #665
Converts:

rclpy_create_client
rclpy_send_request
rclpy_service_server_is_available
rclpy_take_response

CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,702,2021-03-08T21:34:00Z,2021-03-09T17:19:13Z,2021-03-09T17:19:16Z,MERGED,True,24,2,2,https://github.com/ivanpauno,Fix static typing when allow undeclared,2,['enhancement'],https://github.com/ros2/rclpy/pull/702,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/702,"Add tests checking that declaring an statically typed parameter when undeclared parameters are allowed works as described in #1568 (comment).
See also ros2/rclcpp#1575.
Pending: tests.","Add tests checking that declaring an statically typed parameter when undeclared parameters are allowed works as described in #1568 (comment).
See also ros2/rclcpp#1575.
Pending: tests.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,702,2021-03-08T21:34:00Z,2021-03-09T17:19:13Z,2021-03-09T17:19:16Z,MERGED,True,24,2,2,https://github.com/ivanpauno,Fix static typing when allow undeclared,2,['enhancement'],https://github.com/ros2/rclpy/pull/702,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/702#issuecomment-793965341,"Add tests checking that declaring an statically typed parameter when undeclared parameters are allowed works as described in #1568 (comment).
See also ros2/rclcpp#1575.
Pending: tests.","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,703,2021-03-09T07:12:47Z,2021-03-10T05:43:16Z,2021-03-10T05:43:18Z,MERGED,True,302,288,5,https://github.com/cottsay,Convert rclpy service functions to pybind11,6,[],https://github.com/ros2/rclpy/pull/703,https://github.com/cottsay,1,https://github.com/ros2/rclpy/pull/703,"Part of #665
Converts:

rclpy_create_service
rclpy_send_response
rclpy_take_response

CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows","Part of #665
Converts:

rclpy_create_service
rclpy_send_response
rclpy_take_response

CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,703,2021-03-09T07:12:47Z,2021-03-10T05:43:16Z,2021-03-10T05:43:18Z,MERGED,True,302,288,5,https://github.com/cottsay,Convert rclpy service functions to pybind11,6,[],https://github.com/ros2/rclpy/pull/703,https://github.com/cottsay,2,https://github.com/ros2/rclpy/pull/703#issuecomment-794294568,"Part of #665
Converts:

rclpy_create_service
rclpy_send_response
rclpy_take_response

CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,703,2021-03-09T07:12:47Z,2021-03-10T05:43:16Z,2021-03-10T05:43:18Z,MERGED,True,302,288,5,https://github.com/cottsay,Convert rclpy service functions to pybind11,6,[],https://github.com/ros2/rclpy/pull/703,https://github.com/cottsay,3,https://github.com/ros2/rclpy/pull/703#issuecomment-794354583,"Part of #665
Converts:

rclpy_create_service
rclpy_send_response
rclpy_take_response

CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows","@ros-pull-request-builder retest this please
I think the flaky tests are getting worse.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,705,2021-03-09T21:23:53Z,2021-03-09T23:07:53Z,2021-03-09T23:07:57Z,MERGED,True,5,0,1,https://github.com/cottsay,Bump the cppcheck timeout by 2 minutes,1,['bug'],https://github.com/ros2/rclpy/pull/705,https://github.com/cottsay,1,https://github.com/ros2/rclpy/pull/705,I think that all of the new files we've been adding for the Pybind11 effort are causing cppcheck to take longer.,I think that all of the new files we've been adding for the Pybind11 effort are causing cppcheck to take longer.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,706,2021-03-10T01:06:34Z,2021-03-11T18:19:02Z,2021-03-11T18:19:06Z,MERGED,True,440,480,6,https://github.com/sloretz,Convert wait_set functions to pybind11,5,[],https://github.com/ros2/rclpy/pull/706,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/706,"Part of #665
This also replaces rclpy_destroy_wait_set and rclpy.executors._WaitSet with a pycapsule destructor.","Part of #665
This also replaces rclpy_destroy_wait_set and rclpy.executors._WaitSet with a pycapsule destructor.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,706,2021-03-10T01:06:34Z,2021-03-11T18:19:02Z,2021-03-11T18:19:06Z,MERGED,True,440,480,6,https://github.com/sloretz,Convert wait_set functions to pybind11,5,[],https://github.com/ros2/rclpy/pull/706,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/706#issuecomment-794687762,"Part of #665
This also replaces rclpy_destroy_wait_set and rclpy.executors._WaitSet with a pycapsule destructor.","CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,706,2021-03-10T01:06:34Z,2021-03-11T18:19:02Z,2021-03-11T18:19:06Z,MERGED,True,440,480,6,https://github.com/sloretz,Convert wait_set functions to pybind11,5,[],https://github.com/ros2/rclpy/pull/706,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/706#issuecomment-795785991,"Part of #665
This also replaces rclpy_destroy_wait_set and rclpy.executors._WaitSet with a pycapsule destructor.","CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,706,2021-03-10T01:06:34Z,2021-03-11T18:19:02Z,2021-03-11T18:19:06Z,MERGED,True,440,480,6,https://github.com/sloretz,Convert wait_set functions to pybind11,5,[],https://github.com/ros2/rclpy/pull/706,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/706#issuecomment-796235365,"Part of #665
This also replaces rclpy_destroy_wait_set and rclpy.executors._WaitSet with a pycapsule destructor.","CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,707,2021-03-10T14:34:30Z,2021-03-10T20:54:44Z,2021-03-10T20:54:46Z,MERGED,True,1,1,1,https://github.com/clalancette,Change the time jump time type to just rcl_time_jump_t.,1,[],https://github.com/ros2/rclpy/pull/707,https://github.com/clalancette,1,https://github.com/ros2/rclpy/pull/707,"The struct is redundant.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","The struct is redundant.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,707,2021-03-10T14:34:30Z,2021-03-10T20:54:44Z,2021-03-10T20:54:46Z,MERGED,True,1,1,1,https://github.com/clalancette,Change the time jump time type to just rcl_time_jump_t.,1,[],https://github.com/ros2/rclpy/pull/707,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/707#issuecomment-795791260,"The struct is redundant.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,707,2021-03-10T14:34:30Z,2021-03-10T20:54:44Z,2021-03-10T20:54:46Z,MERGED,True,1,1,1,https://github.com/clalancette,Change the time jump time type to just rcl_time_jump_t.,1,[],https://github.com/ros2/rclpy/pull/707,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/707#issuecomment-796088927,"The struct is redundant.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","All of the test failures failed on the nightlies as well, so going ahead and merging.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,708,2021-03-10T19:06:38Z,2021-03-25T20:10:44Z,2021-04-14T17:33:36Z,MERGED,True,242,0,6,https://github.com/audrow,Add API for checking QoS profile compatibility,20,['enhancement'],https://github.com/ros2/rclpy/pull/708,https://github.com/audrow,1,https://github.com/ros2/rclpy/pull/708,"To do:

 Add Galactic release note","To do:

 Add Galactic release note",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,708,2021-03-10T19:06:38Z,2021-03-25T20:10:44Z,2021-04-14T17:33:36Z,MERGED,True,242,0,6,https://github.com/audrow,Add API for checking QoS profile compatibility,20,['enhancement'],https://github.com/ros2/rclpy/pull/708,https://github.com/audrow,2,https://github.com/ros2/rclpy/pull/708#issuecomment-806195282,"To do:

 Add Galactic release note",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,708,2021-03-10T19:06:38Z,2021-03-25T20:10:44Z,2021-04-14T17:33:36Z,MERGED,True,242,0,6,https://github.com/audrow,Add API for checking QoS profile compatibility,20,['enhancement'],https://github.com/ros2/rclpy/pull/708,https://github.com/audrow,3,https://github.com/ros2/rclpy/pull/708#issuecomment-806225845,"To do:

 Add Galactic release note","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,708,2021-03-10T19:06:38Z,2021-03-25T20:10:44Z,2021-04-14T17:33:36Z,MERGED,True,242,0,6,https://github.com/audrow,Add API for checking QoS profile compatibility,20,['enhancement'],https://github.com/ros2/rclpy/pull/708,https://github.com/audrow,4,https://github.com/ros2/rclpy/pull/708#issuecomment-806957650,"To do:

 Add Galactic release note","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,708,2021-03-10T19:06:38Z,2021-03-25T20:10:44Z,2021-04-14T17:33:36Z,MERGED,True,242,0,6,https://github.com/audrow,Add API for checking QoS profile compatibility,20,['enhancement'],https://github.com/ros2/rclpy/pull/708,https://github.com/audrow,5,https://github.com/ros2/rclpy/pull/708#issuecomment-807302653,"To do:

 Add Galactic release note","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,708,2021-03-10T19:06:38Z,2021-03-25T20:10:44Z,2021-04-14T17:33:36Z,MERGED,True,242,0,6,https://github.com/audrow,Add API for checking QoS profile compatibility,20,['enhancement'],https://github.com/ros2/rclpy/pull/708,https://github.com/audrow,6,https://github.com/ros2/rclpy/pull/708#issuecomment-807400480,"To do:

 Add Galactic release note","Thanks, @sloretz and @jacobperron for the reviews!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,709,2021-03-10T22:19:41Z,2021-03-17T18:57:19Z,2021-03-17T18:57:22Z,MERGED,True,494,576,8,https://github.com/sloretz,Use Pybind11 for name functions,10,[],https://github.com/ros2/rclpy/pull/709,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/709,"Part of #665
This uses pybind11 for name-related functions. I also added RCUtilsError since it was useful for one of the functions, and relaxed test expectations on the TypeError human readable text since the text output by pybind11 is a little bit different when an argument is the wrong type.","Part of #665
This uses pybind11 for name-related functions. I also added RCUtilsError since it was useful for one of the functions, and relaxed test expectations on the TypeError human readable text since the text output by pybind11 is a little bit different when an argument is the wrong type.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,709,2021-03-10T22:19:41Z,2021-03-17T18:57:19Z,2021-03-17T18:57:22Z,MERGED,True,494,576,8,https://github.com/sloretz,Use Pybind11 for name functions,10,[],https://github.com/ros2/rclpy/pull/709,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/709#issuecomment-796238084,"Part of #665
This uses pybind11 for name-related functions. I also added RCUtilsError since it was useful for one of the functions, and relaxed test expectations on the TypeError human readable text since the text output by pybind11 is a little bit different when an argument is the wrong type.","CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,709,2021-03-10T22:19:41Z,2021-03-17T18:57:19Z,2021-03-17T18:57:22Z,MERGED,True,494,576,8,https://github.com/sloretz,Use Pybind11 for name functions,10,[],https://github.com/ros2/rclpy/pull/709,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/709#issuecomment-796961511,"Part of #665
This uses pybind11 for name-related functions. I also added RCUtilsError since it was useful for one of the functions, and relaxed test expectations on the TypeError human readable text since the text output by pybind11 is a little bit different when an argument is the wrong type.",Rebased on master,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,709,2021-03-10T22:19:41Z,2021-03-17T18:57:19Z,2021-03-17T18:57:22Z,MERGED,True,494,576,8,https://github.com/sloretz,Use Pybind11 for name functions,10,[],https://github.com/ros2/rclpy/pull/709,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/709#issuecomment-800737109,"Part of #665
This uses pybind11 for name-related functions. I also added RCUtilsError since it was useful for one of the functions, and relaxed test expectations on the TypeError human readable text since the text output by pybind11 is a little bit different when an argument is the wrong type.","CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,709,2021-03-10T22:19:41Z,2021-03-17T18:57:19Z,2021-03-17T18:57:22Z,MERGED,True,494,576,8,https://github.com/sloretz,Use Pybind11 for name functions,10,[],https://github.com/ros2/rclpy/pull/709,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/709#issuecomment-801227074,"Part of #665
This uses pybind11 for name-related functions. I also added RCUtilsError since it was useful for one of the functions, and relaxed test expectations on the TypeError human readable text since the text output by pybind11 is a little bit different when an argument is the wrong type.","CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,710,2021-03-11T01:45:49Z,2021-03-11T03:58:25Z,2021-03-11T03:58:39Z,CLOSED,False,309,324,5,https://github.com/cottsay,"Revert ""Convert rclpy client functions to pybind11""",1,['bug'],https://github.com/ros2/rclpy/pull/710,https://github.com/cottsay,1,https://github.com/ros2/rclpy/pull/710,"This reverts PR #701.

Linux 
Linux-aarch64 
macOS 
Windows","This reverts PR #701.

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,710,2021-03-11T01:45:49Z,2021-03-11T03:58:25Z,2021-03-11T03:58:39Z,CLOSED,False,309,324,5,https://github.com/cottsay,"Revert ""Convert rclpy client functions to pybind11""",1,['bug'],https://github.com/ros2/rclpy/pull/710,https://github.com/cottsay,2,https://github.com/ros2/rclpy/pull/710#issuecomment-796392650,"This reverts PR #701.

Linux 
Linux-aarch64 
macOS 
Windows",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,711,2021-03-11T02:14:46Z,2021-03-11T03:58:25Z,2021-03-11T03:58:29Z,MERGED,True,4,2,1,https://github.com/cottsay,Explicitly populate tuple with None,1,['bug'],https://github.com/ros2/rclpy/pull/711,https://github.com/cottsay,1,https://github.com/ros2/rclpy/pull/711,"I made a false assumption that tuple members which weren't specifically populated would somehow default to 'None'. This change explicitly sets the members to py::none().
Regression caused by #701
Closes #710
Closes ros2/ros2cli#608

Linux 
Linux-aarch64 
macOS 
Windows","I made a false assumption that tuple members which weren't specifically populated would somehow default to 'None'. This change explicitly sets the members to py::none().
Regression caused by #701
Closes #710
Closes ros2/ros2cli#608

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,712,2021-03-11T18:07:59Z,2021-03-18T20:29:01Z,2021-03-18T20:29:04Z,MERGED,True,205,130,12,https://github.com/sloretz,Convert serialize/deserialize to pybind11,11,[],https://github.com/ros2/rclpy/pull/712,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/712,part of #665,part of #665,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,712,2021-03-11T18:07:59Z,2021-03-18T20:29:01Z,2021-03-18T20:29:04Z,MERGED,True,205,130,12,https://github.com/sloretz,Convert serialize/deserialize to pybind11,11,[],https://github.com/ros2/rclpy/pull/712,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/712#issuecomment-796936698,part of #665,"CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,712,2021-03-11T18:07:59Z,2021-03-18T20:29:01Z,2021-03-18T20:29:04Z,MERGED,True,205,130,12,https://github.com/sloretz,Convert serialize/deserialize to pybind11,11,[],https://github.com/ros2/rclpy/pull/712,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/712#issuecomment-796964173,part of #665,Rebased on master,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,712,2021-03-11T18:07:59Z,2021-03-18T20:29:01Z,2021-03-18T20:29:04Z,MERGED,True,205,130,12,https://github.com/sloretz,Convert serialize/deserialize to pybind11,11,[],https://github.com/ros2/rclpy/pull/712,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/712#issuecomment-801492070,part of #665,"CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,712,2021-03-11T18:07:59Z,2021-03-18T20:29:01Z,2021-03-18T20:29:04Z,MERGED,True,205,130,12,https://github.com/sloretz,Convert serialize/deserialize to pybind11,11,[],https://github.com/ros2/rclpy/pull/712,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/712#issuecomment-802098014,part of #665,"CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,713,2021-03-11T20:16:06Z,2021-03-11T23:00:55Z,2021-03-11T23:00:59Z,CLOSED,False,6,327,8,https://github.com/sloretz,Remove global logging mutex,1,[],https://github.com/ros2/rclpy/pull/713,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/713,"Reverts most of #562
ros2/rclcpp#1042 describes a crash that can occur in rclcpp when rcl
logging functions are called in different threads. This was fixed in
ros2/rclcpp#1125, and a similar fix was made for rclpy in #562.
This fix is unnecessary in rclpy because it cannot call the logging
macros from multiple threads unless the GIL is released. The only place
the GIL is released is around rcl_wait(), so the logging methods are
already protected.
Removing this code makes it a little easier to divide the remaining work
of porting _rclpy.c to pybind11 (#665). If for some reason we decide to release
the GIL around logging methods in the future, then they can be protected
in the future using pybind11::call_guard<T> with a type that locks a
global logging mutex when it is default constructed and unlocks it when
its destructed.
Signed-off-by: Shane Loretz sloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org","Reverts most of #562
ros2/rclcpp#1042 describes a crash that can occur in rclcpp when rcl
logging functions are called in different threads. This was fixed in
ros2/rclcpp#1125, and a similar fix was made for rclpy in #562.
This fix is unnecessary in rclpy because it cannot call the logging
macros from multiple threads unless the GIL is released. The only place
the GIL is released is around rcl_wait(), so the logging methods are
already protected.
Removing this code makes it a little easier to divide the remaining work
of porting _rclpy.c to pybind11 (#665). If for some reason we decide to release
the GIL around logging methods in the future, then they can be protected
in the future using pybind11::call_guard<T> with a type that locks a
global logging mutex when it is default constructed and unlocks it when
its destructed.
Signed-off-by: Shane Loretz sloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,713,2021-03-11T20:16:06Z,2021-03-11T23:00:55Z,2021-03-11T23:00:59Z,CLOSED,False,6,327,8,https://github.com/sloretz,Remove global logging mutex,1,[],https://github.com/ros2/rclpy/pull/713,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/713#issuecomment-797021021,"Reverts most of #562
ros2/rclcpp#1042 describes a crash that can occur in rclcpp when rcl
logging functions are called in different threads. This was fixed in
ros2/rclcpp#1125, and a similar fix was made for rclpy in #562.
This fix is unnecessary in rclpy because it cannot call the logging
macros from multiple threads unless the GIL is released. The only place
the GIL is released is around rcl_wait(), so the logging methods are
already protected.
Removing this code makes it a little easier to divide the remaining work
of porting _rclpy.c to pybind11 (#665). If for some reason we decide to release
the GIL around logging methods in the future, then they can be protected
in the future using pybind11::call_guard<T> with a type that locks a
global logging mutex when it is default constructed and unlocks it when
its destructed.
Signed-off-by: Shane Loretz sloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org","CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,713,2021-03-11T20:16:06Z,2021-03-11T23:00:55Z,2021-03-11T23:00:59Z,CLOSED,False,6,327,8,https://github.com/sloretz,Remove global logging mutex,1,[],https://github.com/ros2/rclpy/pull/713,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/713#issuecomment-797024329,"Reverts most of #562
ros2/rclcpp#1042 describes a crash that can occur in rclcpp when rcl
logging functions are called in different threads. This was fixed in
ros2/rclcpp#1125, and a similar fix was made for rclpy in #562.
This fix is unnecessary in rclpy because it cannot call the logging
macros from multiple threads unless the GIL is released. The only place
the GIL is released is around rcl_wait(), so the logging methods are
already protected.
Removing this code makes it a little easier to divide the remaining work
of porting _rclpy.c to pybind11 (#665). If for some reason we decide to release
the GIL around logging methods in the future, then they can be protected
in the future using pybind11::call_guard<T> with a type that locks a
global logging mutex when it is default constructed and unlocks it when
its destructed.
Signed-off-by: Shane Loretz sloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org","This fix is unnecessary in rclpy because it cannot call the logging
macros from multiple threads unless the GIL is released. The only place
the GIL is released is around rcl_wait(), so the logging methods are
already protected.

Some rmw implementations create a background thread that can call the logging macros, so IMO reverting #562 isn't safe.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,713,2021-03-11T20:16:06Z,2021-03-11T23:00:55Z,2021-03-11T23:00:59Z,CLOSED,False,6,327,8,https://github.com/sloretz,Remove global logging mutex,1,[],https://github.com/ros2/rclpy/pull/713,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/713#issuecomment-797024914,"Reverts most of #562
ros2/rclcpp#1042 describes a crash that can occur in rclcpp when rcl
logging functions are called in different threads. This was fixed in
ros2/rclcpp#1125, and a similar fix was made for rclpy in #562.
This fix is unnecessary in rclpy because it cannot call the logging
macros from multiple threads unless the GIL is released. The only place
the GIL is released is around rcl_wait(), so the logging methods are
already protected.
Removing this code makes it a little easier to divide the remaining work
of porting _rclpy.c to pybind11 (#665). If for some reason we decide to release
the GIL around logging methods in the future, then they can be protected
in the future using pybind11::call_guard<T> with a type that locks a
global logging mutex when it is default constructed and unlocks it when
its destructed.
Signed-off-by: Shane Loretz sloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org","Some rmw implementations create a background thread that can call the logging macros, so IMO reverting #562 isn't safe.

And we might even be calling logging macros from some dds listener callbacks, which are called from threads controlled by the dds library.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,713,2021-03-11T20:16:06Z,2021-03-11T23:00:55Z,2021-03-11T23:00:59Z,CLOSED,False,6,327,8,https://github.com/sloretz,Remove global logging mutex,1,[],https://github.com/ros2/rclpy/pull/713,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/713#issuecomment-797033912,"Reverts most of #562
ros2/rclcpp#1042 describes a crash that can occur in rclcpp when rcl
logging functions are called in different threads. This was fixed in
ros2/rclcpp#1125, and a similar fix was made for rclpy in #562.
This fix is unnecessary in rclpy because it cannot call the logging
macros from multiple threads unless the GIL is released. The only place
the GIL is released is around rcl_wait(), so the logging methods are
already protected.
Removing this code makes it a little easier to divide the remaining work
of porting _rclpy.c to pybind11 (#665). If for some reason we decide to release
the GIL around logging methods in the future, then they can be protected
in the future using pybind11::call_guard<T> with a type that locks a
global logging mutex when it is default constructed and unlocks it when
its destructed.
Signed-off-by: Shane Loretz sloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org","Some rmw implementations create a background thread that can call the logging macros, so IMO reverting #562 isn't safe.

I don't think #562 helps. For it to be safe, the rmw implementations would have to acquire rclpy's logging mutex.

And we might even be calling logging macros from some dds listener callbacks, which are called from threads controlled by the dds library.

Same problem - the dds listener callbacks would have to acquire rclpy's logging mutex or the rclpy logging calls could happen at the same time as the dds listener callbacks.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,713,2021-03-11T20:16:06Z,2021-03-11T23:00:55Z,2021-03-11T23:00:59Z,CLOSED,False,6,327,8,https://github.com/sloretz,Remove global logging mutex,1,[],https://github.com/ros2/rclpy/pull/713,https://github.com/ivanpauno,6,https://github.com/ros2/rclpy/pull/713#issuecomment-797042631,"Reverts most of #562
ros2/rclcpp#1042 describes a crash that can occur in rclcpp when rcl
logging functions are called in different threads. This was fixed in
ros2/rclcpp#1125, and a similar fix was made for rclpy in #562.
This fix is unnecessary in rclpy because it cannot call the logging
macros from multiple threads unless the GIL is released. The only place
the GIL is released is around rcl_wait(), so the logging methods are
already protected.
Removing this code makes it a little easier to divide the remaining work
of porting _rclpy.c to pybind11 (#665). If for some reason we decide to release
the GIL around logging methods in the future, then they can be protected
in the future using pybind11::call_guard<T> with a type that locks a
global logging mutex when it is default constructed and unlocks it when
its destructed.
Signed-off-by: Shane Loretz sloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org","For it to be safe, the rmw implementations would have to acquire rclpy's logging mutex.

would they?
#562 installs an ouptut handler that will always take the mutex, you don't have to manually take it 
  
    
      rclpy/rclpy/src/rclpy/_rclpy.c
    
    
        Lines 658 to 661
      in
      3de8f43
    
  
  
    

        
          
           rcl_ret_t ret = rcl_logging_configure_with_output_handler( 
        

        
          
             &context->global_arguments, 
        

        
          
             &allocator, 
        

        
          
             rclpy_detail_thread_safe_logging_output_handler); 
        
    
  

.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,713,2021-03-11T20:16:06Z,2021-03-11T23:00:55Z,2021-03-11T23:00:59Z,CLOSED,False,6,327,8,https://github.com/sloretz,Remove global logging mutex,1,[],https://github.com/ros2/rclpy/pull/713,https://github.com/ivanpauno,7,https://github.com/ros2/rclpy/pull/713#issuecomment-797043446,"Reverts most of #562
ros2/rclcpp#1042 describes a crash that can occur in rclcpp when rcl
logging functions are called in different threads. This was fixed in
ros2/rclcpp#1125, and a similar fix was made for rclpy in #562.
This fix is unnecessary in rclpy because it cannot call the logging
macros from multiple threads unless the GIL is released. The only place
the GIL is released is around rcl_wait(), so the logging methods are
already protected.
Removing this code makes it a little easier to divide the remaining work
of porting _rclpy.c to pybind11 (#665). If for some reason we decide to release
the GIL around logging methods in the future, then they can be protected
in the future using pybind11::call_guard<T> with a type that locks a
global logging mutex when it is default constructed and unlocks it when
its destructed.
Signed-off-by: Shane Loretz sloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org","We could also try to make sure that we're not calling the logging macros from any background thread (which sounds as a good idea anyway), but without that this doesn't seem to be safe.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,713,2021-03-11T20:16:06Z,2021-03-11T23:00:55Z,2021-03-11T23:00:59Z,CLOSED,False,6,327,8,https://github.com/sloretz,Remove global logging mutex,1,[],https://github.com/ros2/rclpy/pull/713,https://github.com/sloretz,8,https://github.com/ros2/rclpy/pull/713#issuecomment-797106994,"Reverts most of #562
ros2/rclcpp#1042 describes a crash that can occur in rclcpp when rcl
logging functions are called in different threads. This was fixed in
ros2/rclcpp#1125, and a similar fix was made for rclpy in #562.
This fix is unnecessary in rclpy because it cannot call the logging
macros from multiple threads unless the GIL is released. The only place
the GIL is released is around rcl_wait(), so the logging methods are
already protected.
Removing this code makes it a little easier to divide the remaining work
of porting _rclpy.c to pybind11 (#665). If for some reason we decide to release
the GIL around logging methods in the future, then they can be protected
in the future using pybind11::call_guard<T> with a type that locks a
global logging mutex when it is default constructed and unlocks it when
its destructed.
Signed-off-by: Shane Loretz sloretz@openrobotics.org
Signed-off-by: Shane Loretz sloretz@osrfoundation.org","#562 installs an ouptut handler that will always take the mutex, you don't have to manually take it

Ah you're right. That's how the mutex gets acquired.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,714,2021-03-12T21:54:19Z,2021-03-16T22:32:35Z,2021-03-16T22:32:37Z,MERGED,True,104,26,6,https://github.com/ivanpauno,Better checks for valid msg and srv types,8,['enhancement'],https://github.com/ros2/rclpy/pull/714,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/714,"Fixes #622.
I will check if something similar can be done for actions and implement it either as an extra commit here or in a new PR.","Fixes #622.
I will check if something similar can be done for actions and implement it either as an extra commit here or in a new PR.",True,{'THUMBS_UP': ['https://github.com/matthews-jca']}
ros2/rclpy,https://github.com/ros2/rclpy,714,2021-03-12T21:54:19Z,2021-03-16T22:32:35Z,2021-03-16T22:32:37Z,MERGED,True,104,26,6,https://github.com/ivanpauno,Better checks for valid msg and srv types,8,['enhancement'],https://github.com/ros2/rclpy/pull/714,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/714#issuecomment-797778276,"Fixes #622.
I will check if something similar can be done for actions and implement it either as an extra commit here or in a new PR.","The changes in test_node are unrelated and were committed by accident, I can revert them if needed.
Though they aren't doing any harm either, it's just a less verbose version of the previous code.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,714,2021-03-12T21:54:19Z,2021-03-16T22:32:35Z,2021-03-16T22:32:37Z,MERGED,True,104,26,6,https://github.com/ivanpauno,Better checks for valid msg and srv types,8,['enhancement'],https://github.com/ros2/rclpy/pull/714,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/714#issuecomment-800638182,"Fixes #622.
I will check if something similar can be done for actions and implement it either as an extra commit here or in a new PR.","LGTM pending green CI (one or two unit tests would be nice too)

See e2e6e55.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,714,2021-03-12T21:54:19Z,2021-03-16T22:32:35Z,2021-03-16T22:32:37Z,MERGED,True,104,26,6,https://github.com/ivanpauno,Better checks for valid msg and srv types,8,['enhancement'],https://github.com/ros2/rclpy/pull/714,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/714#issuecomment-800638713,"Fixes #622.
I will check if something similar can be done for actions and implement it either as an extra commit here or in a new PR.","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,715,2021-03-16T01:30:59Z,2021-03-22T23:37:05Z,2021-03-22T23:37:09Z,MERGED,True,224,190,9,https://github.com/sloretz,Convert init/shutdown to pybind11,13,[],https://github.com/ros2/rclpy/pull/715,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/715,Part of #665,Part of #665,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,715,2021-03-16T01:30:59Z,2021-03-22T23:37:05Z,2021-03-22T23:37:09Z,MERGED,True,224,190,9,https://github.com/sloretz,Convert init/shutdown to pybind11,13,[],https://github.com/ros2/rclpy/pull/715,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/715#issuecomment-802057222,Part of #665,"CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,715,2021-03-16T01:30:59Z,2021-03-22T23:37:05Z,2021-03-22T23:37:09Z,MERGED,True,224,190,9,https://github.com/sloretz,Convert init/shutdown to pybind11,13,[],https://github.com/ros2/rclpy/pull/715,https://github.com/hidmic,3,https://github.com/ros2/rclpy/pull/715#issuecomment-802216282,Part of #665,MacOS seems to be having issues with some tests.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,715,2021-03-16T01:30:59Z,2021-03-22T23:37:05Z,2021-03-22T23:37:09Z,MERGED,True,224,190,9,https://github.com/sloretz,Convert init/shutdown to pybind11,13,[],https://github.com/ros2/rclpy/pull/715,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/715#issuecomment-802289967,Part of #665,Testing if adding visibility macro before friend declaration satifies windows:,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,715,2021-03-16T01:30:59Z,2021-03-22T23:37:05Z,2021-03-22T23:37:09Z,MERGED,True,224,190,9,https://github.com/sloretz,Convert init/shutdown to pybind11,13,[],https://github.com/ros2/rclpy/pull/715,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/715#issuecomment-802363417,Part of #665,"CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,715,2021-03-16T01:30:59Z,2021-03-22T23:37:05Z,2021-03-22T23:37:09Z,MERGED,True,224,190,9,https://github.com/sloretz,Convert init/shutdown to pybind11,13,[],https://github.com/ros2/rclpy/pull/715,https://github.com/sloretz,6,https://github.com/ros2/rclpy/pull/715#issuecomment-804270694,Part of #665,"CI OSX to see if test failures are fixed by d224f19

CI Windows debug out of paranoia",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,715,2021-03-16T01:30:59Z,2021-03-22T23:37:05Z,2021-03-22T23:37:09Z,MERGED,True,224,190,9,https://github.com/sloretz,Convert init/shutdown to pybind11,13,[],https://github.com/ros2/rclpy/pull/715,https://github.com/sloretz,7,https://github.com/ros2/rclpy/pull/715#issuecomment-804274184,Part of #665,"Ah, I'm more confident that 021e795 will fix the OSX test failure.
CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows 
Windows Debug",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,715,2021-03-16T01:30:59Z,2021-03-22T23:37:05Z,2021-03-22T23:37:09Z,MERGED,True,224,190,9,https://github.com/sloretz,Convert init/shutdown to pybind11,13,[],https://github.com/ros2/rclpy/pull/715,https://github.com/sloretz,8,https://github.com/ros2/rclpy/pull/715#issuecomment-804325623,Part of #665,"Windows debug again with 3df8fbc

Windows Debug",True,{'THUMBS_UP': ['https://github.com/hidmic']}
ros2/rclpy,https://github.com/ros2/rclpy,715,2021-03-16T01:30:59Z,2021-03-22T23:37:05Z,2021-03-22T23:37:09Z,MERGED,True,224,190,9,https://github.com/sloretz,Convert init/shutdown to pybind11,13,[],https://github.com/ros2/rclpy/pull/715,https://github.com/sloretz,9,https://github.com/ros2/rclpy/pull/715#issuecomment-804398575,Part of #665,Windows debug warning should be fixed by #731,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,715,2021-03-16T01:30:59Z,2021-03-22T23:37:05Z,2021-03-22T23:37:09Z,MERGED,True,224,190,9,https://github.com/sloretz,Convert init/shutdown to pybind11,13,[],https://github.com/ros2/rclpy/pull/715,https://github.com/hidmic,10,https://github.com/ros2/rclpy/pull/715#issuecomment-804413377,Part of #665,"I'll get this one in. Oops, not mine.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,715,2021-03-16T01:30:59Z,2021-03-22T23:37:05Z,2021-03-22T23:37:09Z,MERGED,True,224,190,9,https://github.com/sloretz,Convert init/shutdown to pybind11,13,[],https://github.com/ros2/rclpy/pull/715,https://github.com/sloretz,11,https://github.com/ros2/rclpy/pull/715#issuecomment-804422020,Part of #665,Rebased to fix conflicts - no changes,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,715,2021-03-16T01:30:59Z,2021-03-22T23:37:05Z,2021-03-22T23:37:09Z,MERGED,True,224,190,9,https://github.com/sloretz,Convert init/shutdown to pybind11,13,[],https://github.com/ros2/rclpy/pull/715,https://github.com/sloretz,12,https://github.com/ros2/rclpy/pull/715#issuecomment-804429274,Part of #665,"One last CI run

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,716,2021-03-16T01:47:11Z,2021-03-16T18:50:32Z,2021-03-16T18:50:34Z,MERGED,True,108,78,6,https://github.com/cottsay,Convert duration to pybind11,5,[],https://github.com/ros2/rclpy/pull/716,https://github.com/cottsay,1,https://github.com/ros2/rclpy/pull/716,"Part of #665
Converts:

rclpy_create_duration
rclpy_duration_get_nanoseconds

CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows","Part of #665
Converts:

rclpy_create_duration
rclpy_duration_get_nanoseconds

CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,717,2021-03-17T15:03:46Z,2021-03-18T15:38:59Z,2021-03-19T18:32:37Z,MERGED,True,508,456,9,https://github.com/hidmic,Convert names_and_types graph APIs to pybind11,5,[],https://github.com/ros2/rclpy/pull/717,https://github.com/hidmic,1,https://github.com/ros2/rclpy/pull/717,"Precisely what the title says. Part of #665. This patch also brings rcpputils as a dependency.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows","Precisely what the title says. Part of #665. This patch also brings rcpputils as a dependency.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,717,2021-03-17T15:03:46Z,2021-03-18T15:38:59Z,2021-03-19T18:32:37Z,MERGED,True,508,456,9,https://github.com/hidmic,Convert names_and_types graph APIs to pybind11,5,[],https://github.com/ros2/rclpy/pull/717,https://github.com/hidmic,2,https://github.com/ros2/rclpy/pull/717#issuecomment-801326746,"Precisely what the title says. Part of #665. This patch also brings rcpputils as a dependency.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows","Running CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,717,2021-03-17T15:03:46Z,2021-03-18T15:38:59Z,2021-03-19T18:32:37Z,MERGED,True,508,456,9,https://github.com/hidmic,Convert names_and_types graph APIs to pybind11,5,[],https://github.com/ros2/rclpy/pull/717,https://github.com/hidmic,3,https://github.com/ros2/rclpy/pull/717#issuecomment-801335427,"Precisely what the title says. Part of #665. This patch also brings rcpputils as a dependency.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",Rebased to solve conflicts.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,717,2021-03-17T15:03:46Z,2021-03-18T15:38:59Z,2021-03-19T18:32:37Z,MERGED,True,508,456,9,https://github.com/hidmic,Convert names_and_types graph APIs to pybind11,5,[],https://github.com/ros2/rclpy/pull/717,https://github.com/hidmic,4,https://github.com/ros2/rclpy/pull/717#issuecomment-801336121,"Precisely what the title says. Part of #665. This patch also brings rcpputils as a dependency.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows","CI up to rclpy, third's the charm:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,717,2021-03-17T15:03:46Z,2021-03-18T15:38:59Z,2021-03-19T18:32:37Z,MERGED,True,508,456,9,https://github.com/hidmic,Convert names_and_types graph APIs to pybind11,5,[],https://github.com/ros2/rclpy/pull/717,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/717#issuecomment-801538106,"Precisely what the title says. Part of #665. This patch also brings rcpputils as a dependency.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows","CI with const change (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,717,2021-03-17T15:03:46Z,2021-03-18T15:38:59Z,2021-03-19T18:32:37Z,MERGED,True,508,456,9,https://github.com/hidmic,Convert names_and_types graph APIs to pybind11,5,[],https://github.com/ros2/rclpy/pull/717,https://github.com/sloretz,6,https://github.com/ros2/rclpy/pull/717#issuecomment-802029028,"Precisely what the title says. Part of #665. This patch also brings rcpputils as a dependency.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows","@hidmic, It looks like this one is ready to go! I'll merge it so it doesn't need to be rebased again if something else would have gotten merged first.",True,{'THUMBS_UP': ['https://github.com/hidmic']}
ros2/rclpy,https://github.com/ros2/rclpy,717,2021-03-17T15:03:46Z,2021-03-18T15:38:59Z,2021-03-19T18:32:37Z,MERGED,True,508,456,9,https://github.com/hidmic,Convert names_and_types graph APIs to pybind11,5,[],https://github.com/ros2/rclpy/pull/717,https://github.com/clalancette,7,https://github.com/ros2/rclpy/pull/717#issuecomment-802856792,"Precisely what the title says. Part of #665. This patch also brings rcpputils as a dependency.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows","I'm not 100% sure if it was this PR, but Windows debug build is now broken in rclpy: https://ci.ros2.org/view/nightly/job/nightly_win_deb/1931/ .  The only two PRs that were merged in rclpy yesterday were this one and #712 .  @sloretz @hidmic can you take a look?",True,{'EYES': ['https://github.com/hidmic']}
ros2/rclpy,https://github.com/ros2/rclpy,717,2021-03-17T15:03:46Z,2021-03-18T15:38:59Z,2021-03-19T18:32:37Z,MERGED,True,508,456,9,https://github.com/hidmic,Convert names_and_types graph APIs to pybind11,5,[],https://github.com/ros2/rclpy/pull/717,https://github.com/hidmic,8,https://github.com/ros2/rclpy/pull/717#issuecomment-802871393,"Precisely what the title says. Part of #665. This patch also brings rcpputils as a dependency.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows","It's trying to link to non-debug Python libraries:
LINK : fatal error LNK1104: cannot open file 'python38.lib' [C:\ci\ws\build\rclpy\rclpy_common.vcxproj]

but the CMakeLists.txt does seem to be taking care of not doing that. Has this happened to you before @sloretz ?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,717,2021-03-17T15:03:46Z,2021-03-18T15:38:59Z,2021-03-19T18:32:37Z,MERGED,True,508,456,9,https://github.com/hidmic,Convert names_and_types graph APIs to pybind11,5,[],https://github.com/ros2/rclpy/pull/717,https://github.com/sloretz,9,https://github.com/ros2/rclpy/pull/717#issuecomment-802952139,"Precisely what the title says. Part of #665. This patch also brings rcpputils as a dependency.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows","but the CMakeLists.txt does seem to be taking care of not doing that. Has this happened to you before @sloretz ?

Yeah, this seems familiar. There's some odd linker pragmas in the python.h and pybind11.h headers involving the Py_DEBUG macro. I'm guessing if we include <pybind11/pybind11.h> before <python.h> in the other compilation units in rclpy_common, then the issue would be resolved.",True,{'THUMBS_UP': ['https://github.com/hidmic']}
ros2/rclpy,https://github.com/ros2/rclpy,717,2021-03-17T15:03:46Z,2021-03-18T15:38:59Z,2021-03-19T18:32:37Z,MERGED,True,508,456,9,https://github.com/hidmic,Convert names_and_types graph APIs to pybind11,5,[],https://github.com/ros2/rclpy/pull/717,https://github.com/sloretz,10,https://github.com/ros2/rclpy/pull/717#issuecomment-802996170,"Precisely what the title says. Part of #665. This patch also brings rcpputils as a dependency.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows","I think we've been getting lucky with the order. I'm guessing the linker pragma set by the last compilation unit is the one that wins :-/
The jobs that passed, the C++ file comes last:
  Building Custom Rule C:/ci/ws/src/ros2/rclpy/rclpy/CMakeLists.txt

  common.c

  handle.c

  exceptions.cpp

     Creating library C:/ci/ws/build/rclpy/Debug/rclpy_common.lib and object C:/ci/ws/build/rclpy/Debug/rclpy_common.exp

The job that failed, a C file came last
 Building Custom Rule C:/ci/ws/src/ros2/rclpy/rclpy/CMakeLists.txt

  common.c

  common.cpp

  exceptions.cpp

  handle.c

LINK : fatal error LNK1104: cannot open file 'python38.lib' [C:\ci\ws\build\rclpy\rclpy_common.vcxproj]",True,"{'THUMBS_UP': ['https://github.com/hidmic'], 'EYES': ['https://github.com/hidmic']}"
ros2/rclpy,https://github.com/ros2/rclpy,717,2021-03-17T15:03:46Z,2021-03-18T15:38:59Z,2021-03-19T18:32:37Z,MERGED,True,508,456,9,https://github.com/hidmic,Convert names_and_types graph APIs to pybind11,5,[],https://github.com/ros2/rclpy/pull/717,https://github.com/hidmic,11,https://github.com/ros2/rclpy/pull/717#issuecomment-803031125,"Precisely what the title says. Part of #665. This patch also brings rcpputils as a dependency.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",Oh my. Will fix now.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,718,2021-03-17T19:01:24Z,2021-03-24T16:06:19Z,2021-03-24T16:06:22Z,MERGED,True,202,401,4,https://github.com/sloretz,Pybind11-ify rclpy_get_node_parameters,10,[],https://github.com/ros2/rclpy/pull/718,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/718,Part of #665,Part of #665,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,718,2021-03-17T19:01:24Z,2021-03-24T16:06:19Z,2021-03-24T16:06:22Z,MERGED,True,202,401,4,https://github.com/sloretz,Pybind11-ify rclpy_get_node_parameters,10,[],https://github.com/ros2/rclpy/pull/718,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/718#issuecomment-805060649,Part of #665,"CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,718,2021-03-17T19:01:24Z,2021-03-24T16:06:19Z,2021-03-24T16:06:22Z,MERGED,True,202,401,4,https://github.com/sloretz,Pybind11-ify rclpy_get_node_parameters,10,[],https://github.com/ros2/rclpy/pull/718,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/718#issuecomment-805286377,Part of #665,"CI with feedback addressed (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,718,2021-03-17T19:01:24Z,2021-03-24T16:06:19Z,2021-03-24T16:06:22Z,MERGED,True,202,401,4,https://github.com/sloretz,Pybind11-ify rclpy_get_node_parameters,10,[],https://github.com/ros2/rclpy/pull/718,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/718#issuecomment-805310191,Part of #665,"CI LGTM, @hidmic may I ask you to double check that the changes address your feedback?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,719,2021-03-17T22:03:26Z,2021-03-19T23:36:06Z,2021-03-19T23:36:09Z,MERGED,True,121,68,5,https://github.com/gbalke,[pybind11] Node Accessors,6,[],https://github.com/ros2/rclpy/pull/719,https://github.com/gbalke,1,https://github.com/ros2/rclpy/pull/719,Part of #665.,Part of #665.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,719,2021-03-17T22:03:26Z,2021-03-19T23:36:06Z,2021-03-19T23:36:09Z,MERGED,True,121,68,5,https://github.com/gbalke,[pybind11] Node Accessors,6,[],https://github.com/ros2/rclpy/pull/719,https://github.com/gbalke,2,https://github.com/ros2/rclpy/pull/719#issuecomment-803040349,Part of #665.,"CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,720,2021-03-18T21:08:58Z,2021-03-18T23:30:01Z,2021-03-18T23:30:04Z,MERGED,True,42,1,2,https://github.com/cottsay,1.6.0,1,[],https://github.com/ros2/rclpy/pull/720,https://github.com/cottsay,1,https://github.com/ros2/rclpy/pull/720,This change should be fast-forward merged after approval.,This change should be fast-forward merged after approval.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,721,2021-03-18T21:10:14Z,2021-03-22T21:40:44Z,2021-03-22T21:40:48Z,MERGED,True,182,175,8,https://github.com/hidmic,Convert take API to pybind11,3,[],https://github.com/ros2/rclpy/pull/721,https://github.com/hidmic,1,https://github.com/ros2/rclpy/pull/721,"Precisely what the title says. Part of #665. This patch also exposes SerializedMessage for reuse and migrates some C helper functions to C++ (hopefully helping readability).
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows","Precisely what the title says. Part of #665. This patch also exposes SerializedMessage for reuse and migrates some C helper functions to C++ (hopefully helping readability).
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,721,2021-03-18T21:10:14Z,2021-03-22T21:40:44Z,2021-03-22T21:40:48Z,MERGED,True,182,175,8,https://github.com/hidmic,Convert take API to pybind11,3,[],https://github.com/ros2/rclpy/pull/721,https://github.com/hidmic,2,https://github.com/ros2/rclpy/pull/721#issuecomment-803019594,"Precisely what the title says. Part of #665. This patch also exposes SerializedMessage for reuse and migrates some C helper functions to C++ (hopefully helping readability).
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows","CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,721,2021-03-18T21:10:14Z,2021-03-22T21:40:44Z,2021-03-22T21:40:48Z,MERGED,True,182,175,8,https://github.com/hidmic,Convert take API to pybind11,3,[],https://github.com/ros2/rclpy/pull/721,https://github.com/hidmic,3,https://github.com/ros2/rclpy/pull/721#issuecomment-804268005,"Precisely what the title says. Part of #665. This patch also exposes SerializedMessage for reuse and migrates some C helper functions to C++ (hopefully helping readability).
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows","Re-running CI up to rclpy, JIC:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows Debug",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,721,2021-03-18T21:10:14Z,2021-03-22T21:40:44Z,2021-03-22T21:40:48Z,MERGED,True,182,175,8,https://github.com/hidmic,Convert take API to pybind11,3,[],https://github.com/ros2/rclpy/pull/721,https://github.com/hidmic,4,https://github.com/ros2/rclpy/pull/721#issuecomment-804414219,"Precisely what the title says. Part of #665. This patch also exposes SerializedMessage for reuse and migrates some C helper functions to C++ (hopefully helping readability).
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows","Warning introduced by #723, fixed by #731. Going in!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,722,2021-03-19T00:56:28Z,2021-05-06T19:17:10Z,2021-05-06T19:17:10Z,MERGED,True,30,14,4,https://github.com/emersonknapp,Print 'Infinite' for infinite durations in topic endpoint info,3,[],https://github.com/ros2/rclpy/pull/722,https://github.com/emersonknapp,1,https://github.com/ros2/rclpy/pull/722,"Sample output for ros2 topic pub /chatter std_msgs/String ""data: hello"":
$ ros2 topic info -v /chatter
Type: std_msgs/msg/String

Publisher count: 1

Node name: _ros2cli_30830
Node namespace: /
Topic type: std_msgs/msg/String
Endpoint type: PUBLISHER
GID: 2d.26.10.01.fb.93.9b.48.9d.7e.d3.24.00.00.08.03.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

Subscription count: 0


Connected to ros2/ros2cli#616","Sample output for ros2 topic pub /chatter std_msgs/String ""data: hello"":
$ ros2 topic info -v /chatter
Type: std_msgs/msg/String

Publisher count: 1

Node name: _ros2cli_30830
Node namespace: /
Topic type: std_msgs/msg/String
Endpoint type: PUBLISHER
GID: 2d.26.10.01.fb.93.9b.48.9d.7e.d3.24.00.00.08.03.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

Subscription count: 0


Connected to ros2/ros2cli#616",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,722,2021-03-19T00:56:28Z,2021-05-06T19:17:10Z,2021-05-06T19:17:10Z,MERGED,True,30,14,4,https://github.com/emersonknapp,Print 'Infinite' for infinite durations in topic endpoint info,3,[],https://github.com/ros2/rclpy/pull/722,https://github.com/emersonknapp,2,https://github.com/ros2/rclpy/pull/722#issuecomment-804312522,"Sample output for ros2 topic pub /chatter std_msgs/String ""data: hello"":
$ ros2 topic info -v /chatter
Type: std_msgs/msg/String

Publisher count: 1

Node name: _ros2cli_30830
Node namespace: /
Topic type: std_msgs/msg/String
Endpoint type: PUBLISHER
GID: 2d.26.10.01.fb.93.9b.48.9d.7e.d3.24.00.00.08.03.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

Subscription count: 0


Connected to ros2/ros2cli#616",@sloretz @ivanpauno as maintainers - requesting a review when you can,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,722,2021-03-19T00:56:28Z,2021-05-06T19:17:10Z,2021-05-06T19:17:10Z,MERGED,True,30,14,4,https://github.com/emersonknapp,Print 'Infinite' for infinite durations in topic endpoint info,3,[],https://github.com/ros2/rclpy/pull/722,https://github.com/emersonknapp,3,https://github.com/ros2/rclpy/pull/722#issuecomment-810686273,"Sample output for ros2 topic pub /chatter std_msgs/String ""data: hello"":
$ ros2 topic info -v /chatter
Type: std_msgs/msg/String

Publisher count: 1

Node name: _ros2cli_30830
Node namespace: /
Topic type: std_msgs/msg/String
Endpoint type: PUBLISHER
GID: 2d.26.10.01.fb.93.9b.48.9d.7e.d3.24.00.00.08.03.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

Subscription count: 0


Connected to ros2/ros2cli#616","@ivanpauno requesting re-review now that I was able to address all the comments, given the latest state of the pybind code",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,722,2021-03-19T00:56:28Z,2021-05-06T19:17:10Z,2021-05-06T19:17:10Z,MERGED,True,30,14,4,https://github.com/emersonknapp,Print 'Infinite' for infinite durations in topic endpoint info,3,[],https://github.com/ros2/rclpy/pull/722,https://github.com/emersonknapp,4,https://github.com/ros2/rclpy/pull/722#issuecomment-810699184,"Sample output for ros2 topic pub /chatter std_msgs/String ""data: hello"":
$ ros2 topic info -v /chatter
Type: std_msgs/msg/String

Publisher count: 1

Node name: _ros2cli_30830
Node namespace: /
Topic type: std_msgs/msg/String
Endpoint type: PUBLISHER
GID: 2d.26.10.01.fb.93.9b.48.9d.7e.d3.24.00.00.08.03.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

Subscription count: 0


Connected to ros2/ros2cli#616","Gist: https://gist.githubusercontent.com/emersonknapp/8243fb1b94c37e0c9a07ec4c5edfb2a5/raw/bc58898af9aa8ad525c5d97279271f0b8c9f4734/ros2.repos
BUILD args: --packages-up-to rclpy
TEST args: --packages-select rclpy
Job: ci_launcher
ci_launcher ran: https://ci.ros2.org/job/ci_launcher/8046

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,722,2021-03-19T00:56:28Z,2021-05-06T19:17:10Z,2021-05-06T19:17:10Z,MERGED,True,30,14,4,https://github.com/emersonknapp,Print 'Infinite' for infinite durations in topic endpoint info,3,[],https://github.com/ros2/rclpy/pull/722,https://github.com/ivanpauno,5,https://github.com/ros2/rclpy/pull/722#issuecomment-811058973,"Sample output for ros2 topic pub /chatter std_msgs/String ""data: hello"":
$ ros2 topic info -v /chatter
Type: std_msgs/msg/String

Publisher count: 1

Node name: _ros2cli_30830
Node namespace: /
Topic type: std_msgs/msg/String
Endpoint type: PUBLISHER
GID: 2d.26.10.01.fb.93.9b.48.9d.7e.d3.24.00.00.08.03.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

Subscription count: 0


Connected to ros2/ros2cli#616","Running tests above rclpy, I'm afraid some ros2cli test might depend on how a duration is printed:

Linux 
Linux-aarch64 
macOS 
Windows",True,{'THUMBS_UP': ['https://github.com/emersonknapp']}
ros2/rclpy,https://github.com/ros2/rclpy,722,2021-03-19T00:56:28Z,2021-05-06T19:17:10Z,2021-05-06T19:17:10Z,MERGED,True,30,14,4,https://github.com/emersonknapp,Print 'Infinite' for infinite durations in topic endpoint info,3,[],https://github.com/ros2/rclpy/pull/722,https://github.com/emersonknapp,6,https://github.com/ros2/rclpy/pull/722#issuecomment-811458390,"Sample output for ros2 topic pub /chatter std_msgs/String ""data: hello"":
$ ros2 topic info -v /chatter
Type: std_msgs/msg/String

Publisher count: 1

Node name: _ros2cli_30830
Node namespace: /
Topic type: std_msgs/msg/String
Endpoint type: PUBLISHER
GID: 2d.26.10.01.fb.93.9b.48.9d.7e.d3.24.00.00.08.03.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

Subscription count: 0


Connected to ros2/ros2cli#616","CI with packages-above rclpy testing, including ros2/ros2cli#616

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,722,2021-03-19T00:56:28Z,2021-05-06T19:17:10Z,2021-05-06T19:17:10Z,MERGED,True,30,14,4,https://github.com/emersonknapp,Print 'Infinite' for infinite durations in topic endpoint info,3,[],https://github.com/ros2/rclpy/pull/722,https://github.com/ivanpauno,7,https://github.com/ros2/rclpy/pull/722#issuecomment-813385290,"Sample output for ros2 topic pub /chatter std_msgs/String ""data: hello"":
$ ros2 topic info -v /chatter
Type: std_msgs/msg/String

Publisher count: 1

Node name: _ros2cli_30830
Node namespace: /
Topic type: std_msgs/msg/String
Endpoint type: PUBLISHER
GID: 2d.26.10.01.fb.93.9b.48.9d.7e.d3.24.00.00.08.03.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

Subscription count: 0


Connected to ros2/ros2cli#616","CI with packages-above rclpy testing, including ros2/ros2cli#616

It doesn't seem to be including ros2/ros2cli#616, again including it:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,722,2021-03-19T00:56:28Z,2021-05-06T19:17:10Z,2021-05-06T19:17:10Z,MERGED,True,30,14,4,https://github.com/emersonknapp,Print 'Infinite' for infinite durations in topic endpoint info,3,[],https://github.com/ros2/rclpy/pull/722,https://github.com/emersonknapp,8,https://github.com/ros2/rclpy/pull/722#issuecomment-813533803,"Sample output for ros2 topic pub /chatter std_msgs/String ""data: hello"":
$ ros2 topic info -v /chatter
Type: std_msgs/msg/String

Publisher count: 1

Node name: _ros2cli_30830
Node namespace: /
Topic type: std_msgs/msg/String
Endpoint type: PUBLISHER
GID: 2d.26.10.01.fb.93.9b.48.9d.7e.d3.24.00.00.08.03.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

Subscription count: 0


Connected to ros2/ros2cli#616","I think the failures were because my branches were out of date with the fast development on rclpy right now

Linux 
Linux-aarch64 
macOS 
Windows 

^ note: rviz_ogre_vendor timed out build on Windows - should I just try it again?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,722,2021-03-19T00:56:28Z,2021-05-06T19:17:10Z,2021-05-06T19:17:10Z,MERGED,True,30,14,4,https://github.com/emersonknapp,Print 'Infinite' for infinite durations in topic endpoint info,3,[],https://github.com/ros2/rclpy/pull/722,https://github.com/ivanpauno,9,https://github.com/ros2/rclpy/pull/722#issuecomment-813613017,"Sample output for ros2 topic pub /chatter std_msgs/String ""data: hello"":
$ ros2 topic info -v /chatter
Type: std_msgs/msg/String

Publisher count: 1

Node name: _ros2cli_30830
Node namespace: /
Topic type: std_msgs/msg/String
Endpoint type: PUBLISHER
GID: 2d.26.10.01.fb.93.9b.48.9d.7e.d3.24.00.00.08.03.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

Subscription count: 0


Connected to ros2/ros2cli#616","^ note: rviz_ogre_vendor timed out build on Windows - should I just try it again?

👍

Windows",True,{'HOORAY': ['https://github.com/emersonknapp']}
ros2/rclpy,https://github.com/ros2/rclpy,722,2021-03-19T00:56:28Z,2021-05-06T19:17:10Z,2021-05-06T19:17:10Z,MERGED,True,30,14,4,https://github.com/emersonknapp,Print 'Infinite' for infinite durations in topic endpoint info,3,[],https://github.com/ros2/rclpy/pull/722,https://github.com/emersonknapp,10,https://github.com/ros2/rclpy/pull/722#issuecomment-813675100,"Sample output for ros2 topic pub /chatter std_msgs/String ""data: hello"":
$ ros2 topic info -v /chatter
Type: std_msgs/msg/String

Publisher count: 1

Node name: _ros2cli_30830
Node namespace: /
Topic type: std_msgs/msg/String
Endpoint type: PUBLISHER
GID: 2d.26.10.01.fb.93.9b.48.9d.7e.d3.24.00.00.08.03.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

Subscription count: 0


Connected to ros2/ros2cli#616","CMake warning is from eclipse-cyclonedds/cyclonedds#741
It looks like we are good to merge this and ros2/ros2cli#616",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,722,2021-03-19T00:56:28Z,2021-05-06T19:17:10Z,2021-05-06T19:17:10Z,MERGED,True,30,14,4,https://github.com/emersonknapp,Print 'Infinite' for infinite durations in topic endpoint info,3,[],https://github.com/ros2/rclpy/pull/722,https://github.com/ivanpauno,11,https://github.com/ros2/rclpy/pull/722#issuecomment-814303364,"Sample output for ros2 topic pub /chatter std_msgs/String ""data: hello"":
$ ros2 topic info -v /chatter
Type: std_msgs/msg/String

Publisher count: 1

Node name: _ros2cli_30830
Node namespace: /
Topic type: std_msgs/msg/String
Endpoint type: PUBLISHER
GID: 2d.26.10.01.fb.93.9b.48.9d.7e.d3.24.00.00.08.03.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

Subscription count: 0


Connected to ros2/ros2cli#616","Sorry, I wasn't available yesterday late (I work on UTC-3 time zone) and now we're past the API/feature freeze.
I'm not completely sure if this passes the post API/feature ""safe to merge"" criteria, I'm in favor of merging it as it makes ros2cli output more clear and I don't think this can break downstream code.
@hidmic could you do a second review?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,722,2021-03-19T00:56:28Z,2021-05-06T19:17:10Z,2021-05-06T19:17:10Z,MERGED,True,30,14,4,https://github.com/emersonknapp,Print 'Infinite' for infinite durations in topic endpoint info,3,[],https://github.com/ros2/rclpy/pull/722,https://github.com/emersonknapp,12,https://github.com/ros2/rclpy/pull/722#issuecomment-821296991,"Sample output for ros2 topic pub /chatter std_msgs/String ""data: hello"":
$ ros2 topic info -v /chatter
Type: std_msgs/msg/String

Publisher count: 1

Node name: _ros2cli_30830
Node namespace: /
Topic type: std_msgs/msg/String
Endpoint type: PUBLISHER
GID: 2d.26.10.01.fb.93.9b.48.9d.7e.d3.24.00.00.08.03.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

Subscription count: 0


Connected to ros2/ros2cli#616",Thanks @audrow ! Does this mean we're planning to get this into Galactic?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,722,2021-03-19T00:56:28Z,2021-05-06T19:17:10Z,2021-05-06T19:17:10Z,MERGED,True,30,14,4,https://github.com/emersonknapp,Print 'Infinite' for infinite durations in topic endpoint info,3,[],https://github.com/ros2/rclpy/pull/722,https://github.com/audrow,13,https://github.com/ros2/rclpy/pull/722#issuecomment-821324251,"Sample output for ros2 topic pub /chatter std_msgs/String ""data: hello"":
$ ros2 topic info -v /chatter
Type: std_msgs/msg/String

Publisher count: 1

Node name: _ros2cli_30830
Node namespace: /
Topic type: std_msgs/msg/String
Endpoint type: PUBLISHER
GID: 2d.26.10.01.fb.93.9b.48.9d.7e.d3.24.00.00.08.03.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

Subscription count: 0


Connected to ros2/ros2cli#616",I believe so. Let me just confirm with someone more senior on the team.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,722,2021-03-19T00:56:28Z,2021-05-06T19:17:10Z,2021-05-06T19:17:10Z,MERGED,True,30,14,4,https://github.com/emersonknapp,Print 'Infinite' for infinite durations in topic endpoint info,3,[],https://github.com/ros2/rclpy/pull/722,https://github.com/hidmic,14,https://github.com/ros2/rclpy/pull/722#issuecomment-821325754,"Sample output for ros2 topic pub /chatter std_msgs/String ""data: hello"":
$ ros2 topic info -v /chatter
Type: std_msgs/msg/String

Publisher count: 1

Node name: _ros2cli_30830
Node namespace: /
Topic type: std_msgs/msg/String
Endpoint type: PUBLISHER
GID: 2d.26.10.01.fb.93.9b.48.9d.7e.d3.24.00.00.08.03.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

Subscription count: 0


Connected to ros2/ros2cli#616","@hidmic could you do a second review?

Argh, I didn't see this. My apologies.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,722,2021-03-19T00:56:28Z,2021-05-06T19:17:10Z,2021-05-06T19:17:10Z,MERGED,True,30,14,4,https://github.com/emersonknapp,Print 'Infinite' for infinite durations in topic endpoint info,3,[],https://github.com/ros2/rclpy/pull/722,https://github.com/cottsay,15,https://github.com/ros2/rclpy/pull/722#issuecomment-821333457,"Sample output for ros2 topic pub /chatter std_msgs/String ""data: hello"":
$ ros2 topic info -v /chatter
Type: std_msgs/msg/String

Publisher count: 1

Node name: _ros2cli_30830
Node namespace: /
Topic type: std_msgs/msg/String
Endpoint type: PUBLISHER
GID: 2d.26.10.01.fb.93.9b.48.9d.7e.d3.24.00.00.08.03.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

Subscription count: 0


Connected to ros2/ros2cli#616","If we merge this for Galactic, we'd have to make an exception

I agree. Can we wait until we branch galactic next week to merge this into rolling? And then consider it for backport into Galactic after we release it?",True,{'THUMBS_UP': ['https://github.com/clalancette']}
ros2/rclpy,https://github.com/ros2/rclpy,722,2021-03-19T00:56:28Z,2021-05-06T19:17:10Z,2021-05-06T19:17:10Z,MERGED,True,30,14,4,https://github.com/emersonknapp,Print 'Infinite' for infinite durations in topic endpoint info,3,[],https://github.com/ros2/rclpy/pull/722,https://github.com/emersonknapp,16,https://github.com/ros2/rclpy/pull/722#issuecomment-821410689,"Sample output for ros2 topic pub /chatter std_msgs/String ""data: hello"":
$ ros2 topic info -v /chatter
Type: std_msgs/msg/String

Publisher count: 1

Node name: _ros2cli_30830
Node namespace: /
Topic type: std_msgs/msg/String
Endpoint type: PUBLISHER
GID: 2d.26.10.01.fb.93.9b.48.9d.7e.d3.24.00.00.08.03.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

Subscription count: 0


Connected to ros2/ros2cli#616",Whatever y'all want to do,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,722,2021-03-19T00:56:28Z,2021-05-06T19:17:10Z,2021-05-06T19:17:10Z,MERGED,True,30,14,4,https://github.com/emersonknapp,Print 'Infinite' for infinite durations in topic endpoint info,3,[],https://github.com/ros2/rclpy/pull/722,https://github.com/ivanpauno,17,https://github.com/ros2/rclpy/pull/722#issuecomment-833696095,"Sample output for ros2 topic pub /chatter std_msgs/String ""data: hello"":
$ ros2 topic info -v /chatter
Type: std_msgs/msg/String

Publisher count: 1

Node name: _ros2cli_30830
Node namespace: /
Topic type: std_msgs/msg/String
Endpoint type: PUBLISHER
GID: 2d.26.10.01.fb.93.9b.48.9d.7e.d3.24.00.00.08.03.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

Subscription count: 0


Connected to ros2/ros2cli#616","This can be merged now.
Running an extra round of CI, just in case:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,723,2021-03-19T18:07:59Z,2021-03-22T17:25:08Z,2021-03-22T17:25:11Z,MERGED,True,408,462,8,https://github.com/hidmic,Migrate qos event APIs to pybind11,3,[],https://github.com/ros2/rclpy/pull/723,https://github.com/hidmic,1,https://github.com/ros2/rclpy/pull/723,"Precisely what the title says. Part of #665.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows","Precisely what the title says. Part of #665.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,723,2021-03-19T18:07:59Z,2021-03-22T17:25:08Z,2021-03-22T17:25:11Z,MERGED,True,408,462,8,https://github.com/hidmic,Migrate qos event APIs to pybind11,3,[],https://github.com/ros2/rclpy/pull/723,https://github.com/hidmic,2,https://github.com/ros2/rclpy/pull/723#issuecomment-804107192,"Precisely what the title says. Part of #665.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",Rebased to solve merge conflicts. PTAL !,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,723,2021-03-19T18:07:59Z,2021-03-22T17:25:08Z,2021-03-22T17:25:11Z,MERGED,True,408,462,8,https://github.com/hidmic,Migrate qos event APIs to pybind11,3,[],https://github.com/ros2/rclpy/pull/723,https://github.com/hidmic,3,https://github.com/ros2/rclpy/pull/723#issuecomment-804107755,"Precisely what the title says. Part of #665.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows","CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,723,2021-03-19T18:07:59Z,2021-03-22T17:25:08Z,2021-03-22T17:25:11Z,MERGED,True,408,462,8,https://github.com/hidmic,Migrate qos event APIs to pybind11,3,[],https://github.com/ros2/rclpy/pull/723,https://github.com/hidmic,4,https://github.com/ros2/rclpy/pull/723#issuecomment-804250598,"Precisely what the title says. Part of #665.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",Going in!,True,"{'ROCKET': ['https://github.com/sloretz', 'https://github.com/gbalke']}"
ros2/rclpy,https://github.com/ros2/rclpy,724,2021-03-19T18:39:13Z,2021-03-19T21:40:06Z,2021-03-19T21:40:06Z,CLOSED,False,4,1,1,https://github.com/hidmic,Make sure to list all C++ sources last.,1,['bug'],https://github.com/ros2/rclpy/pull/724,https://github.com/hidmic,1,https://github.com/ros2/rclpy/pull/724,"To make sure pybind11 pragmas override CPython ones. See #717 (comment) for further reference.
Debug CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows","To make sure pybind11 pragmas override CPython ones. See #717 (comment) for further reference.
Debug CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,724,2021-03-19T18:39:13Z,2021-03-19T21:40:06Z,2021-03-19T21:40:06Z,CLOSED,False,4,1,1,https://github.com/hidmic,Make sure to list all C++ sources last.,1,['bug'],https://github.com/ros2/rclpy/pull/724,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/724#issuecomment-803042836,"To make sure pybind11 pragmas override CPython ones. See #717 (comment) for further reference.
Debug CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows","It looks like handle.c was last in the order before, so explicitly ordering here may not fix it. I was looking at another path where the C code is put into C++ files, and hopefully will open a PR after I figure out a small snag with C++ void * to function pointer casting.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,724,2021-03-19T18:39:13Z,2021-03-19T21:40:06Z,2021-03-19T21:40:06Z,CLOSED,False,4,1,1,https://github.com/hidmic,Make sure to list all C++ sources last.,1,['bug'],https://github.com/ros2/rclpy/pull/724,https://github.com/hidmic,3,https://github.com/ros2/rclpy/pull/724#issuecomment-803047356,"To make sure pybind11 pragmas override CPython ones. See #717 (comment) for further reference.
Debug CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows","It looks like handle.c was last in the order before,

That's right, but it wasn't until I introduced common.cpp that linkage to Python libraries became necessary.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,724,2021-03-19T18:39:13Z,2021-03-19T21:40:06Z,2021-03-19T21:40:06Z,CLOSED,False,4,1,1,https://github.com/hidmic,Make sure to list all C++ sources last.,1,['bug'],https://github.com/ros2/rclpy/pull/724,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/724#issuecomment-803048987,"To make sure pybind11 pragmas override CPython ones. See #717 (comment) for further reference.
Debug CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows","That's right, but it wasn't until I introduced common.cpp that linkage to Python libraries became necessary.

Oh, because exceptions.cpp doesn't use Python! I get it :)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,724,2021-03-19T18:39:13Z,2021-03-19T21:40:06Z,2021-03-19T21:40:06Z,CLOSED,False,4,1,1,https://github.com/hidmic,Make sure to list all C++ sources last.,1,['bug'],https://github.com/ros2/rclpy/pull/724,https://github.com/hidmic,5,https://github.com/ros2/rclpy/pull/724#issuecomment-803055901,"To make sure pybind11 pragmas override CPython ones. See #717 (comment) for further reference.
Debug CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows","Hmm, it's not an ordering issue :/",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,724,2021-03-19T18:39:13Z,2021-03-19T21:40:06Z,2021-03-19T21:40:06Z,CLOSED,False,4,1,1,https://github.com/hidmic,Make sure to list all C++ sources last.,1,['bug'],https://github.com/ros2/rclpy/pull/724,https://github.com/hidmic,6,https://github.com/ros2/rclpy/pull/724#issuecomment-803072056,"To make sure pybind11 pragmas override CPython ones. See #717 (comment) for further reference.
Debug CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows","The issue may be elsewhere, see #726.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,724,2021-03-19T18:39:13Z,2021-03-19T21:40:06Z,2021-03-19T21:40:06Z,CLOSED,False,4,1,1,https://github.com/hidmic,Make sure to list all C++ sources last.,1,['bug'],https://github.com/ros2/rclpy/pull/724,https://github.com/hidmic,7,https://github.com/ros2/rclpy/pull/724#issuecomment-803149338,"To make sure pybind11 pragmas override CPython ones. See #717 (comment) for further reference.
Debug CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows","Alright, this wasn't the right fix.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,725,2021-03-19T19:42:33Z,2021-03-19T22:08:10Z,2021-03-19T22:08:14Z,CLOSED,False,472,481,4,https://github.com/sloretz,Make all rclpy_common compilation units use C++,2,[],https://github.com/ros2/rclpy/pull/725,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/725,"By making all compilation units use C++, it enables including <pybind1/pybind11.h> first in all compilation units. I think this should make the linker pragmas correct when building Windows debug, regardless the order the compilation units are linked.","By making all compilation units use C++, it enables including <pybind1/pybind11.h> first in all compilation units. I think this should make the linker pragmas correct when building Windows debug, regardless the order the compilation units are linked.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,725,2021-03-19T19:42:33Z,2021-03-19T22:08:10Z,2021-03-19T22:08:14Z,CLOSED,False,472,481,4,https://github.com/sloretz,Make all rclpy_common compilation units use C++,2,[],https://github.com/ros2/rclpy/pull/725,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/725#issuecomment-803071628,"By making all compilation units use C++, it enables including <pybind1/pybind11.h> first in all compilation units. I think this should make the linker pragmas correct when building Windows debug, regardless the order the compilation units are linked.",Windows debug CI:,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,725,2021-03-19T19:42:33Z,2021-03-19T22:08:10Z,2021-03-19T22:08:14Z,CLOSED,False,472,481,4,https://github.com/sloretz,Make all rclpy_common compilation units use C++,2,[],https://github.com/ros2/rclpy/pull/725,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/725#issuecomment-803162169,"By making all compilation units use C++, it enables including <pybind1/pybind11.h> first in all compilation units. I think this should make the linker pragmas correct when building Windows debug, regardless the order the compilation units are linked.","Didn't fix the issue, closing",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,726,2021-03-19T19:43:25Z,2021-03-22T13:34:31Z,2021-03-22T13:34:34Z,MERGED,True,3,9,1,https://github.com/hidmic,Look up pybind11 package once,1,[],https://github.com/ros2/rclpy/pull/726,https://github.com/hidmic,1,https://github.com/ros2/rclpy/pull/726,"This patches fixes an unusual duplication in the CMakeListst.txt.
Debug CI up to rclpy:

Windows","This patches fixes an unusual duplication in the CMakeListst.txt.
Debug CI up to rclpy:

Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,726,2021-03-19T19:43:25Z,2021-03-22T13:34:31Z,2021-03-22T13:34:34Z,MERGED,True,3,9,1,https://github.com/hidmic,Look up pybind11 package once,1,[],https://github.com/ros2/rclpy/pull/726,https://github.com/hidmic,2,https://github.com/ros2/rclpy/pull/726#issuecomment-803136264,"This patches fixes an unusual duplication in the CMakeListst.txt.
Debug CI up to rclpy:

Windows","Hmm, something's really off.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,726,2021-03-19T19:43:25Z,2021-03-22T13:34:31Z,2021-03-22T13:34:34Z,MERGED,True,3,9,1,https://github.com/hidmic,Look up pybind11 package once,1,[],https://github.com/ros2/rclpy/pull/726,https://github.com/hidmic,3,https://github.com/ros2/rclpy/pull/726#issuecomment-803146485,"This patches fixes an unusual duplication in the CMakeListst.txt.
Debug CI up to rclpy:

Windows","Regular CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,727,2021-03-19T21:40:34Z,2021-03-22T15:44:28Z,2021-03-22T15:44:31Z,MERGED,True,6,9,4,https://github.com/sloretz,Remove pybind11 from rclpy common,3,[],https://github.com/ros2/rclpy/pull/727,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/727,Moves common.cpp/hpp to utils.cpp/hpp inside the _rclpy_pybind11 module. This is yet another attempt to fix windows debug.,Moves common.cpp/hpp to utils.cpp/hpp inside the _rclpy_pybind11 module. This is yet another attempt to fix windows debug.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,727,2021-03-19T21:40:34Z,2021-03-22T15:44:28Z,2021-03-22T15:44:31Z,MERGED,True,6,9,4,https://github.com/sloretz,Remove pybind11 from rclpy common,3,[],https://github.com/ros2/rclpy/pull/727,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/727#issuecomment-803150278,Moves common.cpp/hpp to utils.cpp/hpp inside the _rclpy_pybind11 module. This is yet another attempt to fix windows debug.,Windows debug:,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,727,2021-03-19T21:40:34Z,2021-03-22T15:44:28Z,2021-03-22T15:44:31Z,MERGED,True,6,9,4,https://github.com/sloretz,Remove pybind11 from rclpy common,3,[],https://github.com/ros2/rclpy/pull/727,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/727#issuecomment-803175964,Moves common.cpp/hpp to utils.cpp/hpp inside the _rclpy_pybind11 module. This is yet another attempt to fix windows debug.,"Full CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,728,2021-03-20T01:38:55Z,2021-08-11T23:24:53Z,2021-08-11T23:24:57Z,CLOSED,False,48,483,6,https://github.com/sloretz,Implement signal handling in Python,3,[],https://github.com/ros2/rclpy/pull/728,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/728,"Part of #665 because it removes the signal handler CPython extension
This implements signal handling in Python using the signal library rather than doing it in C. I think the benefits outweigh the drawbacks.
Benefits:

Less C code to maintain
Don't have to port the atomics usage in the sigint module to C++
One less compilation unit depending on rclpy_handle_...
Don't need to worry about signal safety in Python signal handler

Drawbacks

The signal handler isn't run exactly when the signal happens - The real signal handler is setting a flag that tells CPython to call the Python signal handlers ASAP
If pure C code takes a really really long time, the Python signal handler won't get called until the interpreter gets to run again

But C code taking a long time without releasing the GIL would already be a problem on its own


It adds an extra frame to the stack-trace

With signal handling in C
$ ros2 run examples_rclpy_minimal_publisher publisher_member_function
[INFO] [1616203329.647568651] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1616203330.133528959] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1616203330.633883396] [minimal_publisher]: Publishing: ""Hello World: 2""
^CTraceback (most recent call last):
  File ""/home/osrf/ws/ros2/install/examples_rclpy_minimal_publisher/lib/examples_rclpy_minimal_publisher/publisher_member_function"", li
ne 11, in <module>
    load_entry_point('examples-rclpy-minimal-publisher', 'console_scripts', 'publisher_member_function')()
  File ""/home/osrf/ws/ros2/build/examples_rclpy_minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py"", line
43, in main
    rclpy.spin(minimal_publisher)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 196, in spin
    executor.spin_once()
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 693, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 679, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 576, in _wait_for_ready_callbacks
    _rclpy.rclpy_wait(wait_set, timeout_nsec)
KeyboardInterrupt
With signal handling in Python, the last frame in the stack trace printed is a frame inside the Python signal handler.
 ros2 run examples_rclpy_minimal_publisher publisher_member_function
[INFO] [1616203196.522705663] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1616203197.007797048] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1616203197.507855562] [minimal_publisher]: Publishing: ""Hello World: 2""
^CTraceback (most recent call last):
  File ""/home/osrf/ws/ros2/install/examples_rclpy_minimal_publisher/lib/examples_rclpy_minimal_publisher/publisher_member_function"", li
ne 11, in <module>
    load_entry_point('examples-rclpy-minimal-publisher', 'console_scripts', 'publisher_member_function')()
  File ""/home/osrf/ws/ros2/build/examples_rclpy_minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py"", line
43, in main
    rclpy.spin(minimal_publisher)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 196, in spin
    executor.spin_once()
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 693, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 679, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 576, in _wait_for_ready_callbacks
    _rclpy.rclpy_wait(wait_set, timeout_nsec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/signals.py"", line 62, in __sigint_handler
    cls.__old_handler(signum, frame)
KeyboardInterrupt","Part of #665 because it removes the signal handler CPython extension
This implements signal handling in Python using the signal library rather than doing it in C. I think the benefits outweigh the drawbacks.
Benefits:

Less C code to maintain
Don't have to port the atomics usage in the sigint module to C++
One less compilation unit depending on rclpy_handle_...
Don't need to worry about signal safety in Python signal handler

Drawbacks

The signal handler isn't run exactly when the signal happens - The real signal handler is setting a flag that tells CPython to call the Python signal handlers ASAP
If pure C code takes a really really long time, the Python signal handler won't get called until the interpreter gets to run again

But C code taking a long time without releasing the GIL would already be a problem on its own


It adds an extra frame to the stack-trace

With signal handling in C
$ ros2 run examples_rclpy_minimal_publisher publisher_member_function
[INFO] [1616203329.647568651] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1616203330.133528959] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1616203330.633883396] [minimal_publisher]: Publishing: ""Hello World: 2""
^CTraceback (most recent call last):
  File ""/home/osrf/ws/ros2/install/examples_rclpy_minimal_publisher/lib/examples_rclpy_minimal_publisher/publisher_member_function"", li
ne 11, in <module>
    load_entry_point('examples-rclpy-minimal-publisher', 'console_scripts', 'publisher_member_function')()
  File ""/home/osrf/ws/ros2/build/examples_rclpy_minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py"", line
43, in main
    rclpy.spin(minimal_publisher)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 196, in spin
    executor.spin_once()
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 693, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 679, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 576, in _wait_for_ready_callbacks
    _rclpy.rclpy_wait(wait_set, timeout_nsec)
KeyboardInterrupt
With signal handling in Python, the last frame in the stack trace printed is a frame inside the Python signal handler.
 ros2 run examples_rclpy_minimal_publisher publisher_member_function
[INFO] [1616203196.522705663] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1616203197.007797048] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1616203197.507855562] [minimal_publisher]: Publishing: ""Hello World: 2""
^CTraceback (most recent call last):
  File ""/home/osrf/ws/ros2/install/examples_rclpy_minimal_publisher/lib/examples_rclpy_minimal_publisher/publisher_member_function"", li
ne 11, in <module>
    load_entry_point('examples-rclpy-minimal-publisher', 'console_scripts', 'publisher_member_function')()
  File ""/home/osrf/ws/ros2/build/examples_rclpy_minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py"", line
43, in main
    rclpy.spin(minimal_publisher)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 196, in spin
    executor.spin_once()
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 693, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 679, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 576, in _wait_for_ready_callbacks
    _rclpy.rclpy_wait(wait_set, timeout_nsec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/signals.py"", line 62, in __sigint_handler
    cls.__old_handler(signum, frame)
KeyboardInterrupt",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,728,2021-03-20T01:38:55Z,2021-08-11T23:24:53Z,2021-08-11T23:24:57Z,CLOSED,False,48,483,6,https://github.com/sloretz,Implement signal handling in Python,3,[],https://github.com/ros2/rclpy/pull/728,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/728#issuecomment-803219337,"Part of #665 because it removes the signal handler CPython extension
This implements signal handling in Python using the signal library rather than doing it in C. I think the benefits outweigh the drawbacks.
Benefits:

Less C code to maintain
Don't have to port the atomics usage in the sigint module to C++
One less compilation unit depending on rclpy_handle_...
Don't need to worry about signal safety in Python signal handler

Drawbacks

The signal handler isn't run exactly when the signal happens - The real signal handler is setting a flag that tells CPython to call the Python signal handlers ASAP
If pure C code takes a really really long time, the Python signal handler won't get called until the interpreter gets to run again

But C code taking a long time without releasing the GIL would already be a problem on its own


It adds an extra frame to the stack-trace

With signal handling in C
$ ros2 run examples_rclpy_minimal_publisher publisher_member_function
[INFO] [1616203329.647568651] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1616203330.133528959] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1616203330.633883396] [minimal_publisher]: Publishing: ""Hello World: 2""
^CTraceback (most recent call last):
  File ""/home/osrf/ws/ros2/install/examples_rclpy_minimal_publisher/lib/examples_rclpy_minimal_publisher/publisher_member_function"", li
ne 11, in <module>
    load_entry_point('examples-rclpy-minimal-publisher', 'console_scripts', 'publisher_member_function')()
  File ""/home/osrf/ws/ros2/build/examples_rclpy_minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py"", line
43, in main
    rclpy.spin(minimal_publisher)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 196, in spin
    executor.spin_once()
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 693, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 679, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 576, in _wait_for_ready_callbacks
    _rclpy.rclpy_wait(wait_set, timeout_nsec)
KeyboardInterrupt
With signal handling in Python, the last frame in the stack trace printed is a frame inside the Python signal handler.
 ros2 run examples_rclpy_minimal_publisher publisher_member_function
[INFO] [1616203196.522705663] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1616203197.007797048] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1616203197.507855562] [minimal_publisher]: Publishing: ""Hello World: 2""
^CTraceback (most recent call last):
  File ""/home/osrf/ws/ros2/install/examples_rclpy_minimal_publisher/lib/examples_rclpy_minimal_publisher/publisher_member_function"", li
ne 11, in <module>
    load_entry_point('examples-rclpy-minimal-publisher', 'console_scripts', 'publisher_member_function')()
  File ""/home/osrf/ws/ros2/build/examples_rclpy_minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py"", line
43, in main
    rclpy.spin(minimal_publisher)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 196, in spin
    executor.spin_once()
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 693, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 679, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 576, in _wait_for_ready_callbacks
    _rclpy.rclpy_wait(wait_set, timeout_nsec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/signals.py"", line 62, in __sigint_handler
    cls.__old_handler(signum, frame)
KeyboardInterrupt","CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,728,2021-03-20T01:38:55Z,2021-08-11T23:24:53Z,2021-08-11T23:24:57Z,CLOSED,False,48,483,6,https://github.com/sloretz,Implement signal handling in Python,3,[],https://github.com/ros2/rclpy/pull/728,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/728#issuecomment-804400478,"Part of #665 because it removes the signal handler CPython extension
This implements signal handling in Python using the signal library rather than doing it in C. I think the benefits outweigh the drawbacks.
Benefits:

Less C code to maintain
Don't have to port the atomics usage in the sigint module to C++
One less compilation unit depending on rclpy_handle_...
Don't need to worry about signal safety in Python signal handler

Drawbacks

The signal handler isn't run exactly when the signal happens - The real signal handler is setting a flag that tells CPython to call the Python signal handlers ASAP
If pure C code takes a really really long time, the Python signal handler won't get called until the interpreter gets to run again

But C code taking a long time without releasing the GIL would already be a problem on its own


It adds an extra frame to the stack-trace

With signal handling in C
$ ros2 run examples_rclpy_minimal_publisher publisher_member_function
[INFO] [1616203329.647568651] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1616203330.133528959] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1616203330.633883396] [minimal_publisher]: Publishing: ""Hello World: 2""
^CTraceback (most recent call last):
  File ""/home/osrf/ws/ros2/install/examples_rclpy_minimal_publisher/lib/examples_rclpy_minimal_publisher/publisher_member_function"", li
ne 11, in <module>
    load_entry_point('examples-rclpy-minimal-publisher', 'console_scripts', 'publisher_member_function')()
  File ""/home/osrf/ws/ros2/build/examples_rclpy_minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py"", line
43, in main
    rclpy.spin(minimal_publisher)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 196, in spin
    executor.spin_once()
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 693, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 679, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 576, in _wait_for_ready_callbacks
    _rclpy.rclpy_wait(wait_set, timeout_nsec)
KeyboardInterrupt
With signal handling in Python, the last frame in the stack trace printed is a frame inside the Python signal handler.
 ros2 run examples_rclpy_minimal_publisher publisher_member_function
[INFO] [1616203196.522705663] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1616203197.007797048] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1616203197.507855562] [minimal_publisher]: Publishing: ""Hello World: 2""
^CTraceback (most recent call last):
  File ""/home/osrf/ws/ros2/install/examples_rclpy_minimal_publisher/lib/examples_rclpy_minimal_publisher/publisher_member_function"", li
ne 11, in <module>
    load_entry_point('examples-rclpy-minimal-publisher', 'console_scripts', 'publisher_member_function')()
  File ""/home/osrf/ws/ros2/build/examples_rclpy_minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py"", line
43, in main
    rclpy.spin(minimal_publisher)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 196, in spin
    executor.spin_once()
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 693, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 679, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 576, in _wait_for_ready_callbacks
    _rclpy.rclpy_wait(wait_set, timeout_nsec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/signals.py"", line 62, in __sigint_handler
    cls.__old_handler(signum, frame)
KeyboardInterrupt","I don't have anything specific to point to, but every time we've messed with the signal handling it takes quite a while to iron all of the bugs out.
That's not to say that we shouldn't do this; but I do think we should consider waiting on this one until after Galactic, which will give us a whole year to figure out where the bugs are.

Yeah, that's fair. I can leave this PR up until Galactic. If we do that, I'll need to think of a way to be backwards compatible with the use of rclpy_handle for guard conditions in the C code as we eliminate rclpy_handle_t elsewhere.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,728,2021-03-20T01:38:55Z,2021-08-11T23:24:53Z,2021-08-11T23:24:57Z,CLOSED,False,48,483,6,https://github.com/sloretz,Implement signal handling in Python,3,[],https://github.com/ros2/rclpy/pull/728,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/728#issuecomment-816323253,"Part of #665 because it removes the signal handler CPython extension
This implements signal handling in Python using the signal library rather than doing it in C. I think the benefits outweigh the drawbacks.
Benefits:

Less C code to maintain
Don't have to port the atomics usage in the sigint module to C++
One less compilation unit depending on rclpy_handle_...
Don't need to worry about signal safety in Python signal handler

Drawbacks

The signal handler isn't run exactly when the signal happens - The real signal handler is setting a flag that tells CPython to call the Python signal handlers ASAP
If pure C code takes a really really long time, the Python signal handler won't get called until the interpreter gets to run again

But C code taking a long time without releasing the GIL would already be a problem on its own


It adds an extra frame to the stack-trace

With signal handling in C
$ ros2 run examples_rclpy_minimal_publisher publisher_member_function
[INFO] [1616203329.647568651] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1616203330.133528959] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1616203330.633883396] [minimal_publisher]: Publishing: ""Hello World: 2""
^CTraceback (most recent call last):
  File ""/home/osrf/ws/ros2/install/examples_rclpy_minimal_publisher/lib/examples_rclpy_minimal_publisher/publisher_member_function"", li
ne 11, in <module>
    load_entry_point('examples-rclpy-minimal-publisher', 'console_scripts', 'publisher_member_function')()
  File ""/home/osrf/ws/ros2/build/examples_rclpy_minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py"", line
43, in main
    rclpy.spin(minimal_publisher)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 196, in spin
    executor.spin_once()
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 693, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 679, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 576, in _wait_for_ready_callbacks
    _rclpy.rclpy_wait(wait_set, timeout_nsec)
KeyboardInterrupt
With signal handling in Python, the last frame in the stack trace printed is a frame inside the Python signal handler.
 ros2 run examples_rclpy_minimal_publisher publisher_member_function
[INFO] [1616203196.522705663] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1616203197.007797048] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1616203197.507855562] [minimal_publisher]: Publishing: ""Hello World: 2""
^CTraceback (most recent call last):
  File ""/home/osrf/ws/ros2/install/examples_rclpy_minimal_publisher/lib/examples_rclpy_minimal_publisher/publisher_member_function"", li
ne 11, in <module>
    load_entry_point('examples-rclpy-minimal-publisher', 'console_scripts', 'publisher_member_function')()
  File ""/home/osrf/ws/ros2/build/examples_rclpy_minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py"", line
43, in main
    rclpy.spin(minimal_publisher)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 196, in spin
    executor.spin_once()
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 693, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 679, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 576, in _wait_for_ready_callbacks
    _rclpy.rclpy_wait(wait_set, timeout_nsec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/signals.py"", line 62, in __sigint_handler
    cls.__old_handler(signum, frame)
KeyboardInterrupt",Re-re-targeted back to master and re-marking as draft. This should stay in rolling for a while before it's considered for backport (if at all).,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,728,2021-03-20T01:38:55Z,2021-08-11T23:24:53Z,2021-08-11T23:24:57Z,CLOSED,False,48,483,6,https://github.com/sloretz,Implement signal handling in Python,3,[],https://github.com/ros2/rclpy/pull/728,https://github.com/ahcorde,5,https://github.com/ros2/rclpy/pull/728#issuecomment-819435853,"Part of #665 because it removes the signal handler CPython extension
This implements signal handling in Python using the signal library rather than doing it in C. I think the benefits outweigh the drawbacks.
Benefits:

Less C code to maintain
Don't have to port the atomics usage in the sigint module to C++
One less compilation unit depending on rclpy_handle_...
Don't need to worry about signal safety in Python signal handler

Drawbacks

The signal handler isn't run exactly when the signal happens - The real signal handler is setting a flag that tells CPython to call the Python signal handlers ASAP
If pure C code takes a really really long time, the Python signal handler won't get called until the interpreter gets to run again

But C code taking a long time without releasing the GIL would already be a problem on its own


It adds an extra frame to the stack-trace

With signal handling in C
$ ros2 run examples_rclpy_minimal_publisher publisher_member_function
[INFO] [1616203329.647568651] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1616203330.133528959] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1616203330.633883396] [minimal_publisher]: Publishing: ""Hello World: 2""
^CTraceback (most recent call last):
  File ""/home/osrf/ws/ros2/install/examples_rclpy_minimal_publisher/lib/examples_rclpy_minimal_publisher/publisher_member_function"", li
ne 11, in <module>
    load_entry_point('examples-rclpy-minimal-publisher', 'console_scripts', 'publisher_member_function')()
  File ""/home/osrf/ws/ros2/build/examples_rclpy_minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py"", line
43, in main
    rclpy.spin(minimal_publisher)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 196, in spin
    executor.spin_once()
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 693, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 679, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 576, in _wait_for_ready_callbacks
    _rclpy.rclpy_wait(wait_set, timeout_nsec)
KeyboardInterrupt
With signal handling in Python, the last frame in the stack trace printed is a frame inside the Python signal handler.
 ros2 run examples_rclpy_minimal_publisher publisher_member_function
[INFO] [1616203196.522705663] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1616203197.007797048] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1616203197.507855562] [minimal_publisher]: Publishing: ""Hello World: 2""
^CTraceback (most recent call last):
  File ""/home/osrf/ws/ros2/install/examples_rclpy_minimal_publisher/lib/examples_rclpy_minimal_publisher/publisher_member_function"", li
ne 11, in <module>
    load_entry_point('examples-rclpy-minimal-publisher', 'console_scripts', 'publisher_member_function')()
  File ""/home/osrf/ws/ros2/build/examples_rclpy_minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py"", line
43, in main
    rclpy.spin(minimal_publisher)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 196, in spin
    executor.spin_once()
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 693, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 679, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 576, in _wait_for_ready_callbacks
    _rclpy.rclpy_wait(wait_set, timeout_nsec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/signals.py"", line 62, in __sigint_handler
    cls.__old_handler(signum, frame)
KeyboardInterrupt","@sloretz is there any way to retarget this to post_galactic_freeze  ? I converted GuardCondition to use C++ classes, but I had to cherry-pick these two commits.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,728,2021-03-20T01:38:55Z,2021-08-11T23:24:53Z,2021-08-11T23:24:57Z,CLOSED,False,48,483,6,https://github.com/sloretz,Implement signal handling in Python,3,[],https://github.com/ros2/rclpy/pull/728,https://github.com/sloretz,6,https://github.com/ros2/rclpy/pull/728#issuecomment-828786573,"Part of #665 because it removes the signal handler CPython extension
This implements signal handling in Python using the signal library rather than doing it in C. I think the benefits outweigh the drawbacks.
Benefits:

Less C code to maintain
Don't have to port the atomics usage in the sigint module to C++
One less compilation unit depending on rclpy_handle_...
Don't need to worry about signal safety in Python signal handler

Drawbacks

The signal handler isn't run exactly when the signal happens - The real signal handler is setting a flag that tells CPython to call the Python signal handlers ASAP
If pure C code takes a really really long time, the Python signal handler won't get called until the interpreter gets to run again

But C code taking a long time without releasing the GIL would already be a problem on its own


It adds an extra frame to the stack-trace

With signal handling in C
$ ros2 run examples_rclpy_minimal_publisher publisher_member_function
[INFO] [1616203329.647568651] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1616203330.133528959] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1616203330.633883396] [minimal_publisher]: Publishing: ""Hello World: 2""
^CTraceback (most recent call last):
  File ""/home/osrf/ws/ros2/install/examples_rclpy_minimal_publisher/lib/examples_rclpy_minimal_publisher/publisher_member_function"", li
ne 11, in <module>
    load_entry_point('examples-rclpy-minimal-publisher', 'console_scripts', 'publisher_member_function')()
  File ""/home/osrf/ws/ros2/build/examples_rclpy_minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py"", line
43, in main
    rclpy.spin(minimal_publisher)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 196, in spin
    executor.spin_once()
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 693, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 679, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 576, in _wait_for_ready_callbacks
    _rclpy.rclpy_wait(wait_set, timeout_nsec)
KeyboardInterrupt
With signal handling in Python, the last frame in the stack trace printed is a frame inside the Python signal handler.
 ros2 run examples_rclpy_minimal_publisher publisher_member_function
[INFO] [1616203196.522705663] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1616203197.007797048] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1616203197.507855562] [minimal_publisher]: Publishing: ""Hello World: 2""
^CTraceback (most recent call last):
  File ""/home/osrf/ws/ros2/install/examples_rclpy_minimal_publisher/lib/examples_rclpy_minimal_publisher/publisher_member_function"", li
ne 11, in <module>
    load_entry_point('examples-rclpy-minimal-publisher', 'console_scripts', 'publisher_member_function')()
  File ""/home/osrf/ws/ros2/build/examples_rclpy_minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py"", line
43, in main
    rclpy.spin(minimal_publisher)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 196, in spin
    executor.spin_once()
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 693, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 679, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 576, in _wait_for_ready_callbacks
    _rclpy.rclpy_wait(wait_set, timeout_nsec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/signals.py"", line 62, in __sigint_handler
    cls.__old_handler(signum, frame)
KeyboardInterrupt","This PR is ready for review to be merged into master/Rolling. It should not be backported.
CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,728,2021-03-20T01:38:55Z,2021-08-11T23:24:53Z,2021-08-11T23:24:57Z,CLOSED,False,48,483,6,https://github.com/sloretz,Implement signal handling in Python,3,[],https://github.com/ros2/rclpy/pull/728,https://github.com/sloretz,7,https://github.com/ros2/rclpy/pull/728#issuecomment-828786800,"Part of #665 because it removes the signal handler CPython extension
This implements signal handling in Python using the signal library rather than doing it in C. I think the benefits outweigh the drawbacks.
Benefits:

Less C code to maintain
Don't have to port the atomics usage in the sigint module to C++
One less compilation unit depending on rclpy_handle_...
Don't need to worry about signal safety in Python signal handler

Drawbacks

The signal handler isn't run exactly when the signal happens - The real signal handler is setting a flag that tells CPython to call the Python signal handlers ASAP
If pure C code takes a really really long time, the Python signal handler won't get called until the interpreter gets to run again

But C code taking a long time without releasing the GIL would already be a problem on its own


It adds an extra frame to the stack-trace

With signal handling in C
$ ros2 run examples_rclpy_minimal_publisher publisher_member_function
[INFO] [1616203329.647568651] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1616203330.133528959] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1616203330.633883396] [minimal_publisher]: Publishing: ""Hello World: 2""
^CTraceback (most recent call last):
  File ""/home/osrf/ws/ros2/install/examples_rclpy_minimal_publisher/lib/examples_rclpy_minimal_publisher/publisher_member_function"", li
ne 11, in <module>
    load_entry_point('examples-rclpy-minimal-publisher', 'console_scripts', 'publisher_member_function')()
  File ""/home/osrf/ws/ros2/build/examples_rclpy_minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py"", line
43, in main
    rclpy.spin(minimal_publisher)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 196, in spin
    executor.spin_once()
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 693, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 679, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 576, in _wait_for_ready_callbacks
    _rclpy.rclpy_wait(wait_set, timeout_nsec)
KeyboardInterrupt
With signal handling in Python, the last frame in the stack trace printed is a frame inside the Python signal handler.
 ros2 run examples_rclpy_minimal_publisher publisher_member_function
[INFO] [1616203196.522705663] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1616203197.007797048] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1616203197.507855562] [minimal_publisher]: Publishing: ""Hello World: 2""
^CTraceback (most recent call last):
  File ""/home/osrf/ws/ros2/install/examples_rclpy_minimal_publisher/lib/examples_rclpy_minimal_publisher/publisher_member_function"", li
ne 11, in <module>
    load_entry_point('examples-rclpy-minimal-publisher', 'console_scripts', 'publisher_member_function')()
  File ""/home/osrf/ws/ros2/build/examples_rclpy_minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py"", line
43, in main
    rclpy.spin(minimal_publisher)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 196, in spin
    executor.spin_once()
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 693, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 679, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 576, in _wait_for_ready_callbacks
    _rclpy.rclpy_wait(wait_set, timeout_nsec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/signals.py"", line 62, in __sigint_handler
    cls.__old_handler(signum, frame)
KeyboardInterrupt",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,728,2021-03-20T01:38:55Z,2021-08-11T23:24:53Z,2021-08-11T23:24:57Z,CLOSED,False,48,483,6,https://github.com/sloretz,Implement signal handling in Python,3,[],https://github.com/ros2/rclpy/pull/728,https://github.com/clalancette,8,https://github.com/ros2/rclpy/pull/728#issuecomment-832806471,"Part of #665 because it removes the signal handler CPython extension
This implements signal handling in Python using the signal library rather than doing it in C. I think the benefits outweigh the drawbacks.
Benefits:

Less C code to maintain
Don't have to port the atomics usage in the sigint module to C++
One less compilation unit depending on rclpy_handle_...
Don't need to worry about signal safety in Python signal handler

Drawbacks

The signal handler isn't run exactly when the signal happens - The real signal handler is setting a flag that tells CPython to call the Python signal handlers ASAP
If pure C code takes a really really long time, the Python signal handler won't get called until the interpreter gets to run again

But C code taking a long time without releasing the GIL would already be a problem on its own


It adds an extra frame to the stack-trace

With signal handling in C
$ ros2 run examples_rclpy_minimal_publisher publisher_member_function
[INFO] [1616203329.647568651] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1616203330.133528959] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1616203330.633883396] [minimal_publisher]: Publishing: ""Hello World: 2""
^CTraceback (most recent call last):
  File ""/home/osrf/ws/ros2/install/examples_rclpy_minimal_publisher/lib/examples_rclpy_minimal_publisher/publisher_member_function"", li
ne 11, in <module>
    load_entry_point('examples-rclpy-minimal-publisher', 'console_scripts', 'publisher_member_function')()
  File ""/home/osrf/ws/ros2/build/examples_rclpy_minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py"", line
43, in main
    rclpy.spin(minimal_publisher)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 196, in spin
    executor.spin_once()
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 693, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 679, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 576, in _wait_for_ready_callbacks
    _rclpy.rclpy_wait(wait_set, timeout_nsec)
KeyboardInterrupt
With signal handling in Python, the last frame in the stack trace printed is a frame inside the Python signal handler.
 ros2 run examples_rclpy_minimal_publisher publisher_member_function
[INFO] [1616203196.522705663] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1616203197.007797048] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1616203197.507855562] [minimal_publisher]: Publishing: ""Hello World: 2""
^CTraceback (most recent call last):
  File ""/home/osrf/ws/ros2/install/examples_rclpy_minimal_publisher/lib/examples_rclpy_minimal_publisher/publisher_member_function"", li
ne 11, in <module>
    load_entry_point('examples-rclpy-minimal-publisher', 'console_scripts', 'publisher_member_function')()
  File ""/home/osrf/ws/ros2/build/examples_rclpy_minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py"", line
43, in main
    rclpy.spin(minimal_publisher)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 196, in spin
    executor.spin_once()
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 693, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 679, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 576, in _wait_for_ready_callbacks
    _rclpy.rclpy_wait(wait_set, timeout_nsec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/signals.py"", line 62, in __sigint_handler
    cls.__old_handler(signum, frame)
KeyboardInterrupt",Can I suggest we do a full build+test before we merge this one?  That will at least give us an idea if any of the signals that launch files send to processes have problems.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,728,2021-03-20T01:38:55Z,2021-08-11T23:24:53Z,2021-08-11T23:24:57Z,CLOSED,False,48,483,6,https://github.com/sloretz,Implement signal handling in Python,3,[],https://github.com/ros2/rclpy/pull/728,https://github.com/sloretz,9,https://github.com/ros2/rclpy/pull/728#issuecomment-832853236,"Part of #665 because it removes the signal handler CPython extension
This implements signal handling in Python using the signal library rather than doing it in C. I think the benefits outweigh the drawbacks.
Benefits:

Less C code to maintain
Don't have to port the atomics usage in the sigint module to C++
One less compilation unit depending on rclpy_handle_...
Don't need to worry about signal safety in Python signal handler

Drawbacks

The signal handler isn't run exactly when the signal happens - The real signal handler is setting a flag that tells CPython to call the Python signal handlers ASAP
If pure C code takes a really really long time, the Python signal handler won't get called until the interpreter gets to run again

But C code taking a long time without releasing the GIL would already be a problem on its own


It adds an extra frame to the stack-trace

With signal handling in C
$ ros2 run examples_rclpy_minimal_publisher publisher_member_function
[INFO] [1616203329.647568651] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1616203330.133528959] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1616203330.633883396] [minimal_publisher]: Publishing: ""Hello World: 2""
^CTraceback (most recent call last):
  File ""/home/osrf/ws/ros2/install/examples_rclpy_minimal_publisher/lib/examples_rclpy_minimal_publisher/publisher_member_function"", li
ne 11, in <module>
    load_entry_point('examples-rclpy-minimal-publisher', 'console_scripts', 'publisher_member_function')()
  File ""/home/osrf/ws/ros2/build/examples_rclpy_minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py"", line
43, in main
    rclpy.spin(minimal_publisher)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 196, in spin
    executor.spin_once()
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 693, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 679, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 576, in _wait_for_ready_callbacks
    _rclpy.rclpy_wait(wait_set, timeout_nsec)
KeyboardInterrupt
With signal handling in Python, the last frame in the stack trace printed is a frame inside the Python signal handler.
 ros2 run examples_rclpy_minimal_publisher publisher_member_function
[INFO] [1616203196.522705663] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1616203197.007797048] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1616203197.507855562] [minimal_publisher]: Publishing: ""Hello World: 2""
^CTraceback (most recent call last):
  File ""/home/osrf/ws/ros2/install/examples_rclpy_minimal_publisher/lib/examples_rclpy_minimal_publisher/publisher_member_function"", li
ne 11, in <module>
    load_entry_point('examples-rclpy-minimal-publisher', 'console_scripts', 'publisher_member_function')()
  File ""/home/osrf/ws/ros2/build/examples_rclpy_minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py"", line
43, in main
    rclpy.spin(minimal_publisher)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 196, in spin
    executor.spin_once()
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 693, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 679, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 576, in _wait_for_ready_callbacks
    _rclpy.rclpy_wait(wait_set, timeout_nsec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/signals.py"", line 62, in __sigint_handler
    cls.__old_handler(signum, frame)
KeyboardInterrupt","All downstream packages CI (build: --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{'THUMBS_UP': ['https://github.com/clalancette']}
ros2/rclpy,https://github.com/ros2/rclpy,728,2021-03-20T01:38:55Z,2021-08-11T23:24:53Z,2021-08-11T23:24:57Z,CLOSED,False,48,483,6,https://github.com/sloretz,Implement signal handling in Python,3,[],https://github.com/ros2/rclpy/pull/728,https://github.com/sloretz,10,https://github.com/ros2/rclpy/pull/728#issuecomment-838991625,"Part of #665 because it removes the signal handler CPython extension
This implements signal handling in Python using the signal library rather than doing it in C. I think the benefits outweigh the drawbacks.
Benefits:

Less C code to maintain
Don't have to port the atomics usage in the sigint module to C++
One less compilation unit depending on rclpy_handle_...
Don't need to worry about signal safety in Python signal handler

Drawbacks

The signal handler isn't run exactly when the signal happens - The real signal handler is setting a flag that tells CPython to call the Python signal handlers ASAP
If pure C code takes a really really long time, the Python signal handler won't get called until the interpreter gets to run again

But C code taking a long time without releasing the GIL would already be a problem on its own


It adds an extra frame to the stack-trace

With signal handling in C
$ ros2 run examples_rclpy_minimal_publisher publisher_member_function
[INFO] [1616203329.647568651] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1616203330.133528959] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1616203330.633883396] [minimal_publisher]: Publishing: ""Hello World: 2""
^CTraceback (most recent call last):
  File ""/home/osrf/ws/ros2/install/examples_rclpy_minimal_publisher/lib/examples_rclpy_minimal_publisher/publisher_member_function"", li
ne 11, in <module>
    load_entry_point('examples-rclpy-minimal-publisher', 'console_scripts', 'publisher_member_function')()
  File ""/home/osrf/ws/ros2/build/examples_rclpy_minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py"", line
43, in main
    rclpy.spin(minimal_publisher)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 196, in spin
    executor.spin_once()
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 693, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 679, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 576, in _wait_for_ready_callbacks
    _rclpy.rclpy_wait(wait_set, timeout_nsec)
KeyboardInterrupt
With signal handling in Python, the last frame in the stack trace printed is a frame inside the Python signal handler.
 ros2 run examples_rclpy_minimal_publisher publisher_member_function
[INFO] [1616203196.522705663] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1616203197.007797048] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1616203197.507855562] [minimal_publisher]: Publishing: ""Hello World: 2""
^CTraceback (most recent call last):
  File ""/home/osrf/ws/ros2/install/examples_rclpy_minimal_publisher/lib/examples_rclpy_minimal_publisher/publisher_member_function"", li
ne 11, in <module>
    load_entry_point('examples-rclpy-minimal-publisher', 'console_scripts', 'publisher_member_function')()
  File ""/home/osrf/ws/ros2/build/examples_rclpy_minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py"", line
43, in main
    rclpy.spin(minimal_publisher)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 196, in spin
    executor.spin_once()
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 693, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 679, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 576, in _wait_for_ready_callbacks
    _rclpy.rclpy_wait(wait_set, timeout_nsec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/signals.py"", line 62, in __sigint_handler
    cls.__old_handler(signum, frame)
KeyboardInterrupt","I converted this back to a draft because the signal handling in Python is not as straight forward as I hoped. the signal() method can only be called from the main thread, which makes it tricky to unregister our handler when the library is shut down :-/",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,728,2021-03-20T01:38:55Z,2021-08-11T23:24:53Z,2021-08-11T23:24:57Z,CLOSED,False,48,483,6,https://github.com/sloretz,Implement signal handling in Python,3,[],https://github.com/ros2/rclpy/pull/728,https://github.com/sloretz,11,https://github.com/ros2/rclpy/pull/728#issuecomment-897226180,"Part of #665 because it removes the signal handler CPython extension
This implements signal handling in Python using the signal library rather than doing it in C. I think the benefits outweigh the drawbacks.
Benefits:

Less C code to maintain
Don't have to port the atomics usage in the sigint module to C++
One less compilation unit depending on rclpy_handle_...
Don't need to worry about signal safety in Python signal handler

Drawbacks

The signal handler isn't run exactly when the signal happens - The real signal handler is setting a flag that tells CPython to call the Python signal handlers ASAP
If pure C code takes a really really long time, the Python signal handler won't get called until the interpreter gets to run again

But C code taking a long time without releasing the GIL would already be a problem on its own


It adds an extra frame to the stack-trace

With signal handling in C
$ ros2 run examples_rclpy_minimal_publisher publisher_member_function
[INFO] [1616203329.647568651] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1616203330.133528959] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1616203330.633883396] [minimal_publisher]: Publishing: ""Hello World: 2""
^CTraceback (most recent call last):
  File ""/home/osrf/ws/ros2/install/examples_rclpy_minimal_publisher/lib/examples_rclpy_minimal_publisher/publisher_member_function"", li
ne 11, in <module>
    load_entry_point('examples-rclpy-minimal-publisher', 'console_scripts', 'publisher_member_function')()
  File ""/home/osrf/ws/ros2/build/examples_rclpy_minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py"", line
43, in main
    rclpy.spin(minimal_publisher)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 196, in spin
    executor.spin_once()
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 693, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 679, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 576, in _wait_for_ready_callbacks
    _rclpy.rclpy_wait(wait_set, timeout_nsec)
KeyboardInterrupt
With signal handling in Python, the last frame in the stack trace printed is a frame inside the Python signal handler.
 ros2 run examples_rclpy_minimal_publisher publisher_member_function
[INFO] [1616203196.522705663] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1616203197.007797048] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1616203197.507855562] [minimal_publisher]: Publishing: ""Hello World: 2""
^CTraceback (most recent call last):
  File ""/home/osrf/ws/ros2/install/examples_rclpy_minimal_publisher/lib/examples_rclpy_minimal_publisher/publisher_member_function"", li
ne 11, in <module>
    load_entry_point('examples-rclpy-minimal-publisher', 'console_scripts', 'publisher_member_function')()
  File ""/home/osrf/ws/ros2/build/examples_rclpy_minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py"", line
43, in main
    rclpy.spin(minimal_publisher)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 196, in spin
    executor.spin_once()
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 693, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 679, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 576, in _wait_for_ready_callbacks
    _rclpy.rclpy_wait(wait_set, timeout_nsec)
  File ""/home/osrf/ws/ros2/install/rclpy/lib/python3.8/site-packages/rclpy/signals.py"", line 62, in __sigint_handler
    cls.__old_handler(signum, frame)
KeyboardInterrupt","I'm going to close this in favor of #814. Using Python's built-in signal library has a lot of downsides, and being only able to register and unregister a signal handler from the same thread Python was initialized in is especially hard to work around.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,729,2021-03-21T07:20:17Z,2021-03-22T12:13:13Z,2021-03-22T12:13:13Z,MERGED,True,2,2,1,https://github.com/fujitatomoya,typo fix.,1,[],https://github.com/ros2/rclpy/pull/729,https://github.com/fujitatomoya,1,https://github.com/ros2/rclpy/pull/729,Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com,Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,729,2021-03-21T07:20:17Z,2021-03-22T12:13:13Z,2021-03-22T12:13:13Z,MERGED,True,2,2,1,https://github.com/fujitatomoya,typo fix.,1,[],https://github.com/ros2/rclpy/pull/729,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/729#issuecomment-803524824,Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com,"@clalancette just typo fix, could you help me to merge this?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,729,2021-03-21T07:20:17Z,2021-03-22T12:13:13Z,2021-03-22T12:13:13Z,MERGED,True,2,2,1,https://github.com/fujitatomoya,typo fix.,1,[],https://github.com/ros2/rclpy/pull/729,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/729#issuecomment-803573597,Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com,@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,729,2021-03-21T07:20:17Z,2021-03-22T12:13:13Z,2021-03-22T12:13:13Z,MERGED,True,2,2,1,https://github.com/fujitatomoya,typo fix.,1,[],https://github.com/ros2/rclpy/pull/729,https://github.com/fujitatomoya,4,https://github.com/ros2/rclpy/pull/729#issuecomment-803684593,Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com,@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,729,2021-03-21T07:20:17Z,2021-03-22T12:13:13Z,2021-03-22T12:13:13Z,MERGED,True,2,2,1,https://github.com/fujitatomoya,typo fix.,1,[],https://github.com/ros2/rclpy/pull/729,https://github.com/clalancette,5,https://github.com/ros2/rclpy/pull/729#issuecomment-804013055,Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com,@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,730,2021-03-22T19:21:27Z,2021-03-24T20:40:13Z,2021-03-24T20:41:02Z,MERGED,True,200,241,4,https://github.com/gbalke,Convert more node accessors to pybind11,12,[],https://github.com/ros2/rclpy/pull/730,https://github.com/gbalke,1,https://github.com/ros2/rclpy/pull/730,"Part of #665.
Handles:
rclpy_get_node_logger_name
rclpy_get_node_names_and_namespaces
rclpy_get_node_names_and_namespaces_with_enclaves
rclpy_node_get_fully_qualified_name","Part of #665.
Handles:
rclpy_get_node_logger_name
rclpy_get_node_names_and_namespaces
rclpy_get_node_names_and_namespaces_with_enclaves
rclpy_node_get_fully_qualified_name",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,730,2021-03-22T19:21:27Z,2021-03-24T20:40:13Z,2021-03-24T20:41:02Z,MERGED,True,200,241,4,https://github.com/gbalke,Convert more node accessors to pybind11,12,[],https://github.com/ros2/rclpy/pull/730,https://github.com/gbalke,2,https://github.com/ros2/rclpy/pull/730#issuecomment-804342491,"Part of #665.
Handles:
rclpy_get_node_logger_name
rclpy_get_node_names_and_namespaces
rclpy_get_node_names_and_namespaces_with_enclaves
rclpy_node_get_fully_qualified_name","CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,730,2021-03-22T19:21:27Z,2021-03-24T20:40:13Z,2021-03-24T20:41:02Z,MERGED,True,200,241,4,https://github.com/gbalke,Convert more node accessors to pybind11,12,[],https://github.com/ros2/rclpy/pull/730,https://github.com/gbalke,3,https://github.com/ros2/rclpy/pull/730#issuecomment-805249587,"Part of #665.
Handles:
rclpy_get_node_logger_name
rclpy_get_node_names_and_namespaces
rclpy_get_node_names_and_namespaces_with_enclaves
rclpy_node_get_fully_qualified_name","CI up to rclpy

Linux 
Linux-aarch64 
macOS 
Windows",True,{'ROCKET': ['https://github.com/sloretz']}
ros2/rclpy,https://github.com/ros2/rclpy,730,2021-03-22T19:21:27Z,2021-03-24T20:40:13Z,2021-03-24T20:41:02Z,MERGED,True,200,241,4,https://github.com/gbalke,Convert more node accessors to pybind11,12,[],https://github.com/ros2/rclpy/pull/730,https://github.com/gbalke,4,https://github.com/ros2/rclpy/pull/730#issuecomment-805401164,"Part of #665.
Handles:
rclpy_get_node_logger_name
rclpy_get_node_names_and_namespaces
rclpy_get_node_names_and_namespaces_with_enclaves
rclpy_node_get_fully_qualified_name",@sloretz lmk if you want to review this before I merge.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,730,2021-03-22T19:21:27Z,2021-03-24T20:40:13Z,2021-03-24T20:41:02Z,MERGED,True,200,241,4,https://github.com/gbalke,Convert more node accessors to pybind11,12,[],https://github.com/ros2/rclpy/pull/730,https://github.com/gbalke,5,https://github.com/ros2/rclpy/pull/730#issuecomment-806151258,"Part of #665.
Handles:
rclpy_get_node_logger_name
rclpy_get_node_names_and_namespaces
rclpy_get_node_names_and_namespaces_with_enclaves
rclpy_node_get_fully_qualified_name",@ros-pull-request-builder retest this please ❤️,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,730,2021-03-22T19:21:27Z,2021-03-24T20:40:13Z,2021-03-24T20:41:02Z,MERGED,True,200,241,4,https://github.com/gbalke,Convert more node accessors to pybind11,12,[],https://github.com/ros2/rclpy/pull/730,https://github.com/gbalke,6,https://github.com/ros2/rclpy/pull/730#issuecomment-806152766,"Part of #665.
Handles:
rclpy_get_node_logger_name
rclpy_get_node_names_and_namespaces
rclpy_get_node_names_and_namespaces_with_enclaves
rclpy_node_get_fully_qualified_name","Ci up to rclpy

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,730,2021-03-22T19:21:27Z,2021-03-24T20:40:13Z,2021-03-24T20:41:02Z,MERGED,True,200,241,4,https://github.com/gbalke,Convert more node accessors to pybind11,12,[],https://github.com/ros2/rclpy/pull/730,https://github.com/gbalke,7,https://github.com/ros2/rclpy/pull/730#issuecomment-806160223,"Part of #665.
Handles:
rclpy_get_node_logger_name
rclpy_get_node_names_and_namespaces
rclpy_get_node_names_and_namespaces_with_enclaves
rclpy_node_get_fully_qualified_name",@ros-pull-request-builder retest this please 💔,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,731,2021-03-22T21:09:57Z,2021-03-23T00:00:29Z,2021-03-23T00:00:31Z,MERGED,True,3,0,1,https://github.com/sloretz,Include pybind11 first to fix windows debug warning,1,[],https://github.com/ros2/rclpy/pull/731,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/731,"I think this will fix the warning on Windows Debug https://ci.ros2.org/job/ci_windows/14100/
Part of #665","I think this will fix the warning on Windows Debug https://ci.ros2.org/job/ci_windows/14100/
Part of #665",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,731,2021-03-22T21:09:57Z,2021-03-23T00:00:29Z,2021-03-23T00:00:31Z,MERGED,True,3,0,1,https://github.com/sloretz,Include pybind11 first to fix windows debug warning,1,[],https://github.com/ros2/rclpy/pull/731,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/731#issuecomment-804398261,"I think this will fix the warning on Windows Debug https://ci.ros2.org/job/ci_windows/14100/
Part of #665","CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows 
Windows Debug",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,732,2021-03-23T19:49:53Z,2021-03-24T22:22:12Z,2021-03-24T22:22:15Z,MERGED,True,69,69,4,https://github.com/ahcorde,Pybind 11: count_subscribers and count_publishers,6,[],https://github.com/ros2/rclpy/pull/732,https://github.com/ahcorde,1,https://github.com/ros2/rclpy/pull/732,"Part of #665
Handles:
rclpy_count_subscribers
rclpy_count_publishers

Signed-off-by: ahcorde ahcorde@gmail.com","Part of #665
Handles:
rclpy_count_subscribers
rclpy_count_publishers

Signed-off-by: ahcorde ahcorde@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,732,2021-03-23T19:49:53Z,2021-03-24T22:22:12Z,2021-03-24T22:22:15Z,MERGED,True,69,69,4,https://github.com/ahcorde,Pybind 11: count_subscribers and count_publishers,6,[],https://github.com/ros2/rclpy/pull/732,https://github.com/ahcorde,2,https://github.com/ros2/rclpy/pull/732#issuecomment-805190081,"Part of #665
Handles:
rclpy_count_subscribers
rclpy_count_publishers

Signed-off-by: ahcorde ahcorde@gmail.com","Building up-to rclpy and testing rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,732,2021-03-23T19:49:53Z,2021-03-24T22:22:12Z,2021-03-24T22:22:15Z,MERGED,True,69,69,4,https://github.com/ahcorde,Pybind 11: count_subscribers and count_publishers,6,[],https://github.com/ros2/rclpy/pull/732,https://github.com/hidmic,3,https://github.com/ros2/rclpy/pull/732#issuecomment-805234347,"Part of #665
Handles:
rclpy_count_subscribers
rclpy_count_publishers

Signed-off-by: ahcorde ahcorde@gmail.com",@ahcorde uncrustify doesn't seem to be happy.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,732,2021-03-23T19:49:53Z,2021-03-24T22:22:12Z,2021-03-24T22:22:15Z,MERGED,True,69,69,4,https://github.com/ahcorde,Pybind 11: count_subscribers and count_publishers,6,[],https://github.com/ros2/rclpy/pull/732,https://github.com/ahcorde,4,https://github.com/ros2/rclpy/pull/732#issuecomment-805557382,"Part of #665
Handles:
rclpy_count_subscribers
rclpy_count_publishers

Signed-off-by: ahcorde ahcorde@gmail.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,732,2021-03-23T19:49:53Z,2021-03-24T22:22:12Z,2021-03-24T22:22:15Z,MERGED,True,69,69,4,https://github.com/ahcorde,Pybind 11: count_subscribers and count_publishers,6,[],https://github.com/ros2/rclpy/pull/732,https://github.com/ahcorde,5,https://github.com/ros2/rclpy/pull/732#issuecomment-806157562,"Part of #665
Handles:
rclpy_count_subscribers
rclpy_count_publishers

Signed-off-by: ahcorde ahcorde@gmail.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,732,2021-03-23T19:49:53Z,2021-03-24T22:22:12Z,2021-03-24T22:22:15Z,MERGED,True,69,69,4,https://github.com/ahcorde,Pybind 11: count_subscribers and count_publishers,6,[],https://github.com/ros2/rclpy/pull/732,https://github.com/ahcorde,6,https://github.com/ros2/rclpy/pull/732#issuecomment-806196412,"Part of #665
Handles:
rclpy_count_subscribers
rclpy_count_publishers

Signed-off-by: ahcorde ahcorde@gmail.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,733,2021-03-23T23:48:44Z,2021-03-25T17:23:35Z,2021-03-25T17:23:39Z,MERGED,True,154,144,7,https://github.com/gbalke,Convert last of pub/sub getters to pybind11,9,[],https://github.com/ros2/rclpy/pull/733,https://github.com/gbalke,1,https://github.com/ros2/rclpy/pull/733,"Part of #665.
This handles:
rclpy_get_publisher_logger_name
rclpy_get_publishers_info_by_topic
rclpy_get_subscriptions_info_by_topic","Part of #665.
This handles:
rclpy_get_publisher_logger_name
rclpy_get_publishers_info_by_topic
rclpy_get_subscriptions_info_by_topic",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,733,2021-03-23T23:48:44Z,2021-03-25T17:23:35Z,2021-03-25T17:23:39Z,MERGED,True,154,144,7,https://github.com/gbalke,Convert last of pub/sub getters to pybind11,9,[],https://github.com/ros2/rclpy/pull/733,https://github.com/gbalke,2,https://github.com/ros2/rclpy/pull/733#issuecomment-806169404,"Part of #665.
This handles:
rclpy_get_publisher_logger_name
rclpy_get_publishers_info_by_topic
rclpy_get_subscriptions_info_by_topic",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,733,2021-03-23T23:48:44Z,2021-03-25T17:23:35Z,2021-03-25T17:23:39Z,MERGED,True,154,144,7,https://github.com/gbalke,Convert last of pub/sub getters to pybind11,9,[],https://github.com/ros2/rclpy/pull/733,https://github.com/hidmic,3,https://github.com/ros2/rclpy/pull/733#issuecomment-806186607,"Part of #665.
This handles:
rclpy_get_publisher_logger_name
rclpy_get_publishers_info_by_topic
rclpy_get_subscriptions_info_by_topic","Also, this boy needs a rebase.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,733,2021-03-23T23:48:44Z,2021-03-25T17:23:35Z,2021-03-25T17:23:39Z,MERGED,True,154,144,7,https://github.com/gbalke,Convert last of pub/sub getters to pybind11,9,[],https://github.com/ros2/rclpy/pull/733,https://github.com/gbalke,4,https://github.com/ros2/rclpy/pull/733#issuecomment-806197733,"Part of #665.
This handles:
rclpy_get_publisher_logger_name
rclpy_get_publishers_info_by_topic
rclpy_get_subscriptions_info_by_topic","Also, this boy needs a rebase.

Doesn't really matter as I'm going to squash and merge in the end?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,733,2021-03-23T23:48:44Z,2021-03-25T17:23:35Z,2021-03-25T17:23:39Z,MERGED,True,154,144,7,https://github.com/gbalke,Convert last of pub/sub getters to pybind11,9,[],https://github.com/ros2/rclpy/pull/733,https://github.com/gbalke,5,https://github.com/ros2/rclpy/pull/733#issuecomment-806239273,"Part of #665.
This handles:
rclpy_get_publisher_logger_name
rclpy_get_publishers_info_by_topic
rclpy_get_subscriptions_info_by_topic","CI up to rclpy

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,734,2021-03-24T15:37:08Z,2021-03-29T16:14:57Z,2021-03-29T16:14:59Z,MERGED,True,3,0,1,https://github.com/jacobperron,Document misuse of parameter callbacks,1,[],https://github.com/ros2/rclpy/pull/734,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/734,"Similar to ros2/rclcpp#1590
Related to ros2/rclcpp#1587","Similar to ros2/rclcpp#1590
Related to ros2/rclcpp#1587",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,735,2021-03-24T19:30:06Z,2021-03-29T20:32:11Z,2021-03-29T20:32:15Z,MERGED,True,327,685,15,https://github.com/sloretz,Convert logging mutex functions to pybind11,6,[],https://github.com/ros2/rclpy/pull/735,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/735,"Part of #665
Converts these functions to pybind11

rclpy_logging_configure
rclpy_logging_fini
rclpy_create_node","Part of #665
Converts these functions to pybind11

rclpy_logging_configure
rclpy_logging_fini
rclpy_create_node",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,735,2021-03-24T19:30:06Z,2021-03-29T20:32:11Z,2021-03-29T20:32:15Z,MERGED,True,327,685,15,https://github.com/sloretz,Convert logging mutex functions to pybind11,6,[],https://github.com/ros2/rclpy/pull/735,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/735#issuecomment-806104952,"Part of #665
Converts these functions to pybind11

rclpy_logging_configure
rclpy_logging_fini
rclpy_create_node","CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,735,2021-03-24T19:30:06Z,2021-03-29T20:32:11Z,2021-03-29T20:32:15Z,MERGED,True,327,685,15,https://github.com/sloretz,Convert logging mutex functions to pybind11,6,[],https://github.com/ros2/rclpy/pull/735,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/735#issuecomment-806224764,"Part of #665
Converts these functions to pybind11

rclpy_logging_configure
rclpy_logging_fini
rclpy_create_node","CI with feedback addressed

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,735,2021-03-24T19:30:06Z,2021-03-29T20:32:11Z,2021-03-29T20:32:15Z,MERGED,True,327,685,15,https://github.com/sloretz,Convert logging mutex functions to pybind11,6,[],https://github.com/ros2/rclpy/pull/735,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/735#issuecomment-807155577,"Part of #665
Converts these functions to pybind11

rclpy_logging_configure
rclpy_logging_fini
rclpy_create_node","Rebased, and running windows CI to hopefully get a line number number for the warning
Windows:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,735,2021-03-24T19:30:06Z,2021-03-29T20:32:11Z,2021-03-29T20:32:15Z,MERGED,True,327,685,15,https://github.com/sloretz,Convert logging mutex functions to pybind11,6,[],https://github.com/ros2/rclpy/pull/735,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/735#issuecomment-807250873,"Part of #665
Converts these functions to pybind11

rclpy_logging_configure
rclpy_logging_fini
rclpy_create_node",Windows CI with hopefully a fix for the warning:,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,735,2021-03-24T19:30:06Z,2021-03-29T20:32:11Z,2021-03-29T20:32:15Z,MERGED,True,327,685,15,https://github.com/sloretz,Convert logging mutex functions to pybind11,6,[],https://github.com/ros2/rclpy/pull/735,https://github.com/sloretz,6,https://github.com/ros2/rclpy/pull/735#issuecomment-809528676,"Part of #665
Converts these functions to pybind11

rclpy_logging_configure
rclpy_logging_fini
rclpy_create_node","Rebased, CI (build: --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,735,2021-03-24T19:30:06Z,2021-03-29T20:32:11Z,2021-03-29T20:32:15Z,MERGED,True,327,685,15,https://github.com/sloretz,Convert logging mutex functions to pybind11,6,[],https://github.com/ros2/rclpy/pull/735,https://github.com/sloretz,7,https://github.com/ros2/rclpy/pull/735#issuecomment-809692200,"Part of #665
Converts these functions to pybind11

rclpy_logging_configure
rclpy_logging_fini
rclpy_create_node","CMake warning is in cyclondedds, not this PR. Merging 🎉",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,736,2021-03-24T20:58:22Z,2021-03-26T12:56:19Z,2021-03-26T12:56:21Z,MERGED,True,182,179,4,https://github.com/hidmic,Convert QoS APIs to pybind11,2,[],https://github.com/ros2/rclpy/pull/736,https://github.com/hidmic,1,https://github.com/ros2/rclpy/pull/736,"Part of #665. It's a shallow port (i.e. didn't migrate relevant common.c functions) in hopes we can eventually bind the entire qos.py module.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows Debug","Part of #665. It's a shallow port (i.e. didn't migrate relevant common.c functions) in hopes we can eventually bind the entire qos.py module.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows Debug",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,736,2021-03-24T20:58:22Z,2021-03-26T12:56:19Z,2021-03-26T12:56:21Z,MERGED,True,182,179,4,https://github.com/hidmic,Convert QoS APIs to pybind11,2,[],https://github.com/ros2/rclpy/pull/736,https://github.com/hidmic,2,https://github.com/ros2/rclpy/pull/736#issuecomment-807137668,"Part of #665. It's a shallow port (i.e. didn't migrate relevant common.c functions) in hopes we can eventually bind the entire qos.py module.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows Debug","CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,736,2021-03-24T20:58:22Z,2021-03-26T12:56:19Z,2021-03-26T12:56:21Z,MERGED,True,182,179,4,https://github.com/hidmic,Convert QoS APIs to pybind11,2,[],https://github.com/ros2/rclpy/pull/736,https://github.com/hidmic,3,https://github.com/ros2/rclpy/pull/736#issuecomment-807647768,"Part of #665. It's a shallow port (i.e. didn't migrate relevant common.c functions) in hopes we can eventually bind the entire qos.py module.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows Debug","CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,736,2021-03-24T20:58:22Z,2021-03-26T12:56:19Z,2021-03-26T12:56:21Z,MERGED,True,182,179,4,https://github.com/hidmic,Convert QoS APIs to pybind11,2,[],https://github.com/ros2/rclpy/pull/736,https://github.com/hidmic,4,https://github.com/ros2/rclpy/pull/736#issuecomment-808193739,"Part of #665. It's a shallow port (i.e. didn't migrate relevant common.c functions) in hopes we can eventually bind the entire qos.py module.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows Debug","Alright, going in !",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,737,2021-03-24T23:37:44Z,2021-03-29T20:32:50Z,2021-03-29T20:32:52Z,MERGED,True,33,99,7,https://github.com/sloretz,Use py::class_ for rcl_time_point_t,2,[],https://github.com/ros2/rclpy/pull/737,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/737,"Part of #665
This is a PR that refactors the code using rcl_time_point_t to use a py::class_ definition. This is an example of what moving away from PyCapsules looks like for C structs that aren't being wrapped with rclpy_handle_t currently.","Part of #665
This is a PR that refactors the code using rcl_time_point_t to use a py::class_ definition. This is an example of what moving away from PyCapsules looks like for C structs that aren't being wrapped with rclpy_handle_t currently.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,737,2021-03-24T23:37:44Z,2021-03-29T20:32:50Z,2021-03-29T20:32:52Z,MERGED,True,33,99,7,https://github.com/sloretz,Use py::class_ for rcl_time_point_t,2,[],https://github.com/ros2/rclpy/pull/737,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/737#issuecomment-809533260,"Part of #665
This is a PR that refactors the code using rcl_time_point_t to use a py::class_ definition. This is an example of what moving away from PyCapsules looks like for C structs that aren't being wrapped with rclpy_handle_t currently.","CI (build: --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,737,2021-03-24T23:37:44Z,2021-03-29T20:32:50Z,2021-03-29T20:32:52Z,MERGED,True,33,99,7,https://github.com/sloretz,Use py::class_ for rcl_time_point_t,2,[],https://github.com/ros2/rclpy/pull/737,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/737#issuecomment-809692589,"Part of #665
This is a PR that refactors the code using rcl_time_point_t to use a py::class_ definition. This is an example of what moving away from PyCapsules looks like for C structs that aren't being wrapped with rclpy_handle_t currently.","CMake warning is in cyclonedds, not this PR. Merging 🎉",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,738,2021-03-25T20:09:13Z,2021-03-30T18:20:17Z,2021-03-30T18:20:21Z,MERGED,True,172,477,6,https://github.com/gbalke,Converting last of _rclpy.c to pybind11,14,[],https://github.com/ros2/rclpy/pull/738,https://github.com/gbalke,1,https://github.com/ros2/rclpy/pull/738,"Part of #665 covering:
rclpy_get_rmw_implementation_identifier
rclpy_assert_liveliness
rclpy_remove_ros_args","Part of #665 covering:
rclpy_get_rmw_implementation_identifier
rclpy_assert_liveliness
rclpy_remove_ros_args",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,738,2021-03-25T20:09:13Z,2021-03-30T18:20:17Z,2021-03-30T18:20:21Z,MERGED,True,172,477,6,https://github.com/gbalke,Converting last of _rclpy.c to pybind11,14,[],https://github.com/ros2/rclpy/pull/738,https://github.com/gbalke,2,https://github.com/ros2/rclpy/pull/738#issuecomment-807400485,"Part of #665 covering:
rclpy_get_rmw_implementation_identifier
rclpy_assert_liveliness
rclpy_remove_ros_args","CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,738,2021-03-25T20:09:13Z,2021-03-30T18:20:17Z,2021-03-30T18:20:21Z,MERGED,True,172,477,6,https://github.com/gbalke,Converting last of _rclpy.c to pybind11,14,[],https://github.com/ros2/rclpy/pull/738,https://github.com/gbalke,3,https://github.com/ros2/rclpy/pull/738#issuecomment-809649508,"Part of #665 covering:
rclpy_get_rmw_implementation_identifier
rclpy_assert_liveliness
rclpy_remove_ros_args","CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,738,2021-03-25T20:09:13Z,2021-03-30T18:20:17Z,2021-03-30T18:20:21Z,MERGED,True,172,477,6,https://github.com/gbalke,Converting last of _rclpy.c to pybind11,14,[],https://github.com/ros2/rclpy/pull/738,https://github.com/gbalke,4,https://github.com/ros2/rclpy/pull/738#issuecomment-809716585,"Part of #665 covering:
rclpy_get_rmw_implementation_identifier
rclpy_assert_liveliness
rclpy_remove_ros_args","@sloretz I merged and cleaned out _rclpy.c but am not sure exactly how to remove the plumbing that attaches to the file itself cleanly. I'll leave that for a separate PR unless you want to give me pointers 😄.
I attempted to just delete the file and remove it from CMakeLists.txt but got some test errors 😢.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,738,2021-03-25T20:09:13Z,2021-03-30T18:20:17Z,2021-03-30T18:20:21Z,MERGED,True,172,477,6,https://github.com/gbalke,Converting last of _rclpy.c to pybind11,14,[],https://github.com/ros2/rclpy/pull/738,https://github.com/gbalke,5,https://github.com/ros2/rclpy/pull/738#issuecomment-809720593,"Part of #665 covering:
rclpy_get_rmw_implementation_identifier
rclpy_assert_liveliness
rclpy_remove_ros_args","CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,738,2021-03-25T20:09:13Z,2021-03-30T18:20:17Z,2021-03-30T18:20:21Z,MERGED,True,172,477,6,https://github.com/gbalke,Converting last of _rclpy.c to pybind11,14,[],https://github.com/ros2/rclpy/pull/738,https://github.com/sloretz,6,https://github.com/ros2/rclpy/pull/738#issuecomment-809725386,"Part of #665 covering:
rclpy_get_rmw_implementation_identifier
rclpy_assert_liveliness
rclpy_remove_ros_args","I attempted to just delete the file and remove it from CMakeLists.txt but got some test errors cry.

In addition to deleting the file and removing it from the CMakeLists.txt, I think this change to rclpy/impl/implementation_singleton.py would be enough.
--- <unnamed>
+++ <unnamed>
@@ -2,26 +2,9 @@
 from rpyutils import import_c_library
 package = 'rclpy'
 
-rclpy_implementation = import_c_library('._rclpy', package)
+rclpy_implementation = import_c_library('._rclpy_pybind11', package)
 rclpy_action_implementation = import_c_library('._rclpy_action', package)
 rclpy_logging_implementation = import_c_library('._rclpy_logging', package)
 rclpy_signal_handler_implementation = import_c_library('._rclpy_signal_handler', package)
 rclpy_handle_implementation = import_c_library('._rclpy_handle', package)
 rclpy_pycapsule_implementation = import_c_library('._rclpy_pycapsule', package)
-
-
-# Temporary code for converting giant _rclpy module to pybind11
-def _combine_split_modules():
-    global rclpy_implementation
-    module = import_c_library('._rclpy_pybind11', package)
-    for attr in dir(module):
-        thing = getattr(module, attr)
-        if attr.startswith('rclpy_'):
-            # It's a wrapped C function
-            setattr(rclpy_implementation, attr, thing)
-        elif isinstance(thing, type):
-            # It's a custom type
-            setattr(rclpy_implementation, attr, thing)
-        elif '_' != attr[0] and attr.upper() == attr:
-            # It's a module constant
-            setattr(rclpy_implementation, attr, thing)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,738,2021-03-25T20:09:13Z,2021-03-30T18:20:17Z,2021-03-30T18:20:21Z,MERGED,True,172,477,6,https://github.com/gbalke,Converting last of _rclpy.c to pybind11,14,[],https://github.com/ros2/rclpy/pull/738,https://github.com/sloretz,7,https://github.com/ros2/rclpy/pull/738#issuecomment-809726191,"Part of #665 covering:
rclpy_get_rmw_implementation_identifier
rclpy_assert_liveliness
rclpy_remove_ros_args","and deleting these two as well
_combine_split_modules()
del _combine_split_modules",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,738,2021-03-25T20:09:13Z,2021-03-30T18:20:17Z,2021-03-30T18:20:21Z,MERGED,True,172,477,6,https://github.com/gbalke,Converting last of _rclpy.c to pybind11,14,[],https://github.com/ros2/rclpy/pull/738,https://github.com/gbalke,8,https://github.com/ros2/rclpy/pull/738#issuecomment-809746635,"Part of #665 covering:
rclpy_get_rmw_implementation_identifier
rclpy_assert_liveliness
rclpy_remove_ros_args","CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,738,2021-03-25T20:09:13Z,2021-03-30T18:20:17Z,2021-03-30T18:20:21Z,MERGED,True,172,477,6,https://github.com/gbalke,Converting last of _rclpy.c to pybind11,14,[],https://github.com/ros2/rclpy/pull/738,https://github.com/hidmic,9,https://github.com/ros2/rclpy/pull/738#issuecomment-809788844,"Part of #665 covering:
rclpy_get_rmw_implementation_identifier
rclpy_assert_liveliness
rclpy_remove_ros_args",Pending green CI !,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,738,2021-03-25T20:09:13Z,2021-03-30T18:20:17Z,2021-03-30T18:20:21Z,MERGED,True,172,477,6,https://github.com/gbalke,Converting last of _rclpy.c to pybind11,14,[],https://github.com/ros2/rclpy/pull/738,https://github.com/gbalke,10,https://github.com/ros2/rclpy/pull/738#issuecomment-810451670,"Part of #665 covering:
rclpy_get_rmw_implementation_identifier
rclpy_assert_liveliness
rclpy_remove_ros_args","CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,739,2021-03-26T18:12:16Z,2021-03-30T22:15:11Z,2021-03-30T22:15:14Z,MERGED,True,513,206,19,https://github.com/sloretz,Convert Client to use C++ Class,4,[],https://github.com/ros2/rclpy/pull/739,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/739,"This converts the Client functions to a C++ class. It includes a couple infrastructure things needed for the conversion
class Handle
This is an RAII wrapper around the rclpy_handle_t type. This class can be deleted as soon as all types are no longer using rclpy_handle_t. When constructed it increments the handle's reference to block destruction, and when destructed it decrements the reference. This allows the Client to keep a node alive, so a Client won't be destructed after a node.
class Destroyable
While refactoring I found while std::shared_ptr<> solves the destruction order issue, there's still a need to block destruction of an object while it's in use. This class implements that very similarly to how it's done for rclpy_handle_t types - though I did choose to make a design change.
When destruction is requested on an rclpy_handle_t, new threads are allowed to use it as long as there is another thread using it. I didn't like that it meant two very fast threads using it back and forth (with overlap in their use) could block destruction forever. I chose to make Destroyable block new use of itself after destruction is requested, so it gets destroyed as soon as the current uses of it finish.
class Client
This is the conversion to a Client class. It inherits from Destroyable and overrides destroy() to allow early destruction. It keeps a Handle instance to the node to prevent it from being destructed before the client. Once a Node class is created, that type will become std::shared_ptr<rcl_node_t> instead.
When ~Client() is called, the destruction order between rcl_node_t and rclpy_client_t is guaranteed by the std::shared_ptr<rcl_client_t> being after node_handle_ in the class definition. When Client::destroy() is called, the destruction order is guaranteed by releasing the std::shared_ptr<rcl_client_t> before releasing the std::shared_ptr<Handle> node_handle_.","This converts the Client functions to a C++ class. It includes a couple infrastructure things needed for the conversion
class Handle
This is an RAII wrapper around the rclpy_handle_t type. This class can be deleted as soon as all types are no longer using rclpy_handle_t. When constructed it increments the handle's reference to block destruction, and when destructed it decrements the reference. This allows the Client to keep a node alive, so a Client won't be destructed after a node.
class Destroyable
While refactoring I found while std::shared_ptr<> solves the destruction order issue, there's still a need to block destruction of an object while it's in use. This class implements that very similarly to how it's done for rclpy_handle_t types - though I did choose to make a design change.
When destruction is requested on an rclpy_handle_t, new threads are allowed to use it as long as there is another thread using it. I didn't like that it meant two very fast threads using it back and forth (with overlap in their use) could block destruction forever. I chose to make Destroyable block new use of itself after destruction is requested, so it gets destroyed as soon as the current uses of it finish.
class Client
This is the conversion to a Client class. It inherits from Destroyable and overrides destroy() to allow early destruction. It keeps a Handle instance to the node to prevent it from being destructed before the client. Once a Node class is created, that type will become std::shared_ptr<rcl_node_t> instead.
When ~Client() is called, the destruction order between rcl_node_t and rclpy_client_t is guaranteed by the std::shared_ptr<rcl_client_t> being after node_handle_ in the class definition. When Client::destroy() is called, the destruction order is guaranteed by releasing the std::shared_ptr<rcl_client_t> before releasing the std::shared_ptr<Handle> node_handle_.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,739,2021-03-26T18:12:16Z,2021-03-30T22:15:11Z,2021-03-30T22:15:14Z,MERGED,True,513,206,19,https://github.com/sloretz,Convert Client to use C++ Class,4,[],https://github.com/ros2/rclpy/pull/739,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/739#issuecomment-808589121,"This converts the Client functions to a C++ class. It includes a couple infrastructure things needed for the conversion
class Handle
This is an RAII wrapper around the rclpy_handle_t type. This class can be deleted as soon as all types are no longer using rclpy_handle_t. When constructed it increments the handle's reference to block destruction, and when destructed it decrements the reference. This allows the Client to keep a node alive, so a Client won't be destructed after a node.
class Destroyable
While refactoring I found while std::shared_ptr<> solves the destruction order issue, there's still a need to block destruction of an object while it's in use. This class implements that very similarly to how it's done for rclpy_handle_t types - though I did choose to make a design change.
When destruction is requested on an rclpy_handle_t, new threads are allowed to use it as long as there is another thread using it. I didn't like that it meant two very fast threads using it back and forth (with overlap in their use) could block destruction forever. I chose to make Destroyable block new use of itself after destruction is requested, so it gets destroyed as soon as the current uses of it finish.
class Client
This is the conversion to a Client class. It inherits from Destroyable and overrides destroy() to allow early destruction. It keeps a Handle instance to the node to prevent it from being destructed before the client. Once a Node class is created, that type will become std::shared_ptr<rcl_node_t> instead.
When ~Client() is called, the destruction order between rcl_node_t and rclpy_client_t is guaranteed by the std::shared_ptr<rcl_client_t> being after node_handle_ in the class definition. When Client::destroy() is called, the destruction order is guaranteed by releasing the std::shared_ptr<rcl_client_t> before releasing the std::shared_ptr<Handle> node_handle_.","CI (build: --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,739,2021-03-26T18:12:16Z,2021-03-30T22:15:11Z,2021-03-30T22:15:14Z,MERGED,True,513,206,19,https://github.com/sloretz,Convert Client to use C++ Class,4,[],https://github.com/ros2/rclpy/pull/739,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/739#issuecomment-808591545,"This converts the Client functions to a C++ class. It includes a couple infrastructure things needed for the conversion
class Handle
This is an RAII wrapper around the rclpy_handle_t type. This class can be deleted as soon as all types are no longer using rclpy_handle_t. When constructed it increments the handle's reference to block destruction, and when destructed it decrements the reference. This allows the Client to keep a node alive, so a Client won't be destructed after a node.
class Destroyable
While refactoring I found while std::shared_ptr<> solves the destruction order issue, there's still a need to block destruction of an object while it's in use. This class implements that very similarly to how it's done for rclpy_handle_t types - though I did choose to make a design change.
When destruction is requested on an rclpy_handle_t, new threads are allowed to use it as long as there is another thread using it. I didn't like that it meant two very fast threads using it back and forth (with overlap in their use) could block destruction forever. I chose to make Destroyable block new use of itself after destruction is requested, so it gets destroyed as soon as the current uses of it finish.
class Client
This is the conversion to a Client class. It inherits from Destroyable and overrides destroy() to allow early destruction. It keeps a Handle instance to the node to prevent it from being destructed before the client. Once a Node class is created, that type will become std::shared_ptr<rcl_node_t> instead.
When ~Client() is called, the destruction order between rcl_node_t and rclpy_client_t is guaranteed by the std::shared_ptr<rcl_client_t> being after node_handle_ in the class definition. When Client::destroy() is called, the destruction order is guaranteed by releasing the std::shared_ptr<rcl_client_t> before releasing the std::shared_ptr<Handle> node_handle_.","CI (build: --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,739,2021-03-26T18:12:16Z,2021-03-30T22:15:11Z,2021-03-30T22:15:14Z,MERGED,True,513,206,19,https://github.com/sloretz,Convert Client to use C++ Class,4,[],https://github.com/ros2/rclpy/pull/739,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/739#issuecomment-809544849,"This converts the Client functions to a C++ class. It includes a couple infrastructure things needed for the conversion
class Handle
This is an RAII wrapper around the rclpy_handle_t type. This class can be deleted as soon as all types are no longer using rclpy_handle_t. When constructed it increments the handle's reference to block destruction, and when destructed it decrements the reference. This allows the Client to keep a node alive, so a Client won't be destructed after a node.
class Destroyable
While refactoring I found while std::shared_ptr<> solves the destruction order issue, there's still a need to block destruction of an object while it's in use. This class implements that very similarly to how it's done for rclpy_handle_t types - though I did choose to make a design change.
When destruction is requested on an rclpy_handle_t, new threads are allowed to use it as long as there is another thread using it. I didn't like that it meant two very fast threads using it back and forth (with overlap in their use) could block destruction forever. I chose to make Destroyable block new use of itself after destruction is requested, so it gets destroyed as soon as the current uses of it finish.
class Client
This is the conversion to a Client class. It inherits from Destroyable and overrides destroy() to allow early destruction. It keeps a Handle instance to the node to prevent it from being destructed before the client. Once a Node class is created, that type will become std::shared_ptr<rcl_node_t> instead.
When ~Client() is called, the destruction order between rcl_node_t and rclpy_client_t is guaranteed by the std::shared_ptr<rcl_client_t> being after node_handle_ in the class definition. When Client::destroy() is called, the destruction order is guaranteed by releasing the std::shared_ptr<rcl_client_t> before releasing the std::shared_ptr<Handle> node_handle_.","CI (build: --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,739,2021-03-26T18:12:16Z,2021-03-30T22:15:11Z,2021-03-30T22:15:14Z,MERGED,True,513,206,19,https://github.com/sloretz,Convert Client to use C++ Class,4,[],https://github.com/ros2/rclpy/pull/739,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/739#issuecomment-810415827,"This converts the Client functions to a C++ class. It includes a couple infrastructure things needed for the conversion
class Handle
This is an RAII wrapper around the rclpy_handle_t type. This class can be deleted as soon as all types are no longer using rclpy_handle_t. When constructed it increments the handle's reference to block destruction, and when destructed it decrements the reference. This allows the Client to keep a node alive, so a Client won't be destructed after a node.
class Destroyable
While refactoring I found while std::shared_ptr<> solves the destruction order issue, there's still a need to block destruction of an object while it's in use. This class implements that very similarly to how it's done for rclpy_handle_t types - though I did choose to make a design change.
When destruction is requested on an rclpy_handle_t, new threads are allowed to use it as long as there is another thread using it. I didn't like that it meant two very fast threads using it back and forth (with overlap in their use) could block destruction forever. I chose to make Destroyable block new use of itself after destruction is requested, so it gets destroyed as soon as the current uses of it finish.
class Client
This is the conversion to a Client class. It inherits from Destroyable and overrides destroy() to allow early destruction. It keeps a Handle instance to the node to prevent it from being destructed before the client. Once a Node class is created, that type will become std::shared_ptr<rcl_node_t> instead.
When ~Client() is called, the destruction order between rcl_node_t and rclpy_client_t is guaranteed by the std::shared_ptr<rcl_client_t> being after node_handle_ in the class definition. When Client::destroy() is called, the destruction order is guaranteed by releasing the std::shared_ptr<rcl_client_t> before releasing the std::shared_ptr<Handle> node_handle_.","I'll take a second pass at the new/delete use in a follow up PR.
CI (build: --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,739,2021-03-26T18:12:16Z,2021-03-30T22:15:11Z,2021-03-30T22:15:14Z,MERGED,True,513,206,19,https://github.com/sloretz,Convert Client to use C++ Class,4,[],https://github.com/ros2/rclpy/pull/739,https://github.com/sloretz,6,https://github.com/ros2/rclpy/pull/739#issuecomment-810570859,"This converts the Client functions to a C++ class. It includes a couple infrastructure things needed for the conversion
class Handle
This is an RAII wrapper around the rclpy_handle_t type. This class can be deleted as soon as all types are no longer using rclpy_handle_t. When constructed it increments the handle's reference to block destruction, and when destructed it decrements the reference. This allows the Client to keep a node alive, so a Client won't be destructed after a node.
class Destroyable
While refactoring I found while std::shared_ptr<> solves the destruction order issue, there's still a need to block destruction of an object while it's in use. This class implements that very similarly to how it's done for rclpy_handle_t types - though I did choose to make a design change.
When destruction is requested on an rclpy_handle_t, new threads are allowed to use it as long as there is another thread using it. I didn't like that it meant two very fast threads using it back and forth (with overlap in their use) could block destruction forever. I chose to make Destroyable block new use of itself after destruction is requested, so it gets destroyed as soon as the current uses of it finish.
class Client
This is the conversion to a Client class. It inherits from Destroyable and overrides destroy() to allow early destruction. It keeps a Handle instance to the node to prevent it from being destructed before the client. Once a Node class is created, that type will become std::shared_ptr<rcl_node_t> instead.
When ~Client() is called, the destruction order between rcl_node_t and rclpy_client_t is guaranteed by the std::shared_ptr<rcl_client_t> being after node_handle_ in the class definition. When Client::destroy() is called, the destruction order is guaranteed by releasing the std::shared_ptr<rcl_client_t> before releasing the std::shared_ptr<Handle> node_handle_.","Fixed Clang warning, running CI just to rclpy since it already passed with --packages-above-and-dependencies and the change seems small enough to not need a re-run of everything downstream
(build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,739,2021-03-26T18:12:16Z,2021-03-30T22:15:11Z,2021-03-30T22:15:14Z,MERGED,True,513,206,19,https://github.com/sloretz,Convert Client to use C++ Class,4,[],https://github.com/ros2/rclpy/pull/739,https://github.com/sloretz,7,https://github.com/ros2/rclpy/pull/739#issuecomment-810599369,"This converts the Client functions to a C++ class. It includes a couple infrastructure things needed for the conversion
class Handle
This is an RAII wrapper around the rclpy_handle_t type. This class can be deleted as soon as all types are no longer using rclpy_handle_t. When constructed it increments the handle's reference to block destruction, and when destructed it decrements the reference. This allows the Client to keep a node alive, so a Client won't be destructed after a node.
class Destroyable
While refactoring I found while std::shared_ptr<> solves the destruction order issue, there's still a need to block destruction of an object while it's in use. This class implements that very similarly to how it's done for rclpy_handle_t types - though I did choose to make a design change.
When destruction is requested on an rclpy_handle_t, new threads are allowed to use it as long as there is another thread using it. I didn't like that it meant two very fast threads using it back and forth (with overlap in their use) could block destruction forever. I chose to make Destroyable block new use of itself after destruction is requested, so it gets destroyed as soon as the current uses of it finish.
class Client
This is the conversion to a Client class. It inherits from Destroyable and overrides destroy() to allow early destruction. It keeps a Handle instance to the node to prevent it from being destructed before the client. Once a Node class is created, that type will become std::shared_ptr<rcl_node_t> instead.
When ~Client() is called, the destruction order between rcl_node_t and rclpy_client_t is guaranteed by the std::shared_ptr<rcl_client_t> being after node_handle_ in the class definition. When Client::destroy() is called, the destruction order is guaranteed by releasing the std::shared_ptr<rcl_client_t> before releasing the std::shared_ptr<Handle> node_handle_.","CI LGTM, WIndows warning is in cyclonedds",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,740,2021-03-29T21:50:45Z,2021-03-29T23:19:30Z,2021-03-29T23:19:34Z,MERGED,True,13,10,2,https://github.com/hidmic,Make sure only non-empty std::vector of arguments are indexed,1,[],https://github.com/ros2/rclpy/pull/740,https://github.com/hidmic,1,https://github.com/ros2/rclpy/pull/740,"Precisely what the title says. This patch addresses a regression introduced in #715 and #735, which is causing debug assertions to fail on Windows.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows Debug 

Somehow, I managed to escape Bill's dungeon far quicker than anticipated 😅","Precisely what the title says. This patch addresses a regression introduced in #715 and #735, which is causing debug assertions to fail on Windows.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows Debug 

Somehow, I managed to escape Bill's dungeon far quicker than anticipated 😅",True,{'HOORAY': ['https://github.com/ivanpauno']}
ros2/rclpy,https://github.com/ros2/rclpy,740,2021-03-29T21:50:45Z,2021-03-29T23:19:30Z,2021-03-29T23:19:34Z,MERGED,True,13,10,2,https://github.com/hidmic,Make sure only non-empty std::vector of arguments are indexed,1,[],https://github.com/ros2/rclpy/pull/740,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/740#issuecomment-809767226,"Precisely what the title says. This patch addresses a regression introduced in #715 and #735, which is causing debug assertions to fail on Windows.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows Debug 

Somehow, I managed to escape Bill's dungeon far quicker than anticipated 😅",CI LGTM - the warning on Windows in cyclonedds and not from this PR,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,740,2021-03-29T21:50:45Z,2021-03-29T23:19:30Z,2021-03-29T23:19:34Z,MERGED,True,13,10,2,https://github.com/hidmic,Make sure only non-empty std::vector of arguments are indexed,1,[],https://github.com/ros2/rclpy/pull/740,https://github.com/hidmic,3,https://github.com/ros2/rclpy/pull/740#issuecomment-809788410,"Precisely what the title says. This patch addresses a regression introduced in #715 and #735, which is causing debug assertions to fail on Windows.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows Debug 

Somehow, I managed to escape Bill's dungeon far quicker than anticipated 😅","Alright, going in !",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,741,2021-03-30T20:23:57Z,2021-03-31T18:32:48Z,2021-03-31T18:32:51Z,MERGED,True,161,230,15,https://github.com/hidmic,Use py::class_ for rmw_qos_profile_t,2,[],https://github.com/ros2/rclpy/pull/741,https://github.com/hidmic,1,https://github.com/ros2/rclpy/pull/741,"Part of #665. Precisely what the title says. This data structure remains opaque, as it is redundant with those found in qos.py. I still feel the urge to rewrite qos.py in full, but I'll hold back.","Part of #665. Precisely what the title says. This data structure remains opaque, as it is redundant with those found in qos.py. I still feel the urge to rewrite qos.py in full, but I'll hold back.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,741,2021-03-30T20:23:57Z,2021-03-31T18:32:48Z,2021-03-31T18:32:51Z,MERGED,True,161,230,15,https://github.com/hidmic,Use py::class_ for rmw_qos_profile_t,2,[],https://github.com/ros2/rclpy/pull/741,https://github.com/hidmic,2,https://github.com/ros2/rclpy/pull/741#issuecomment-810553474,"Part of #665. Precisely what the title says. This data structure remains opaque, as it is redundant with those found in qos.py. I still feel the urge to rewrite qos.py in full, but I'll hold back.",I'll rebase once #739 goes in.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,741,2021-03-30T20:23:57Z,2021-03-31T18:32:48Z,2021-03-31T18:32:51Z,MERGED,True,161,230,15,https://github.com/hidmic,Use py::class_ for rmw_qos_profile_t,2,[],https://github.com/ros2/rclpy/pull/741,https://github.com/hidmic,3,https://github.com/ros2/rclpy/pull/741#issuecomment-811102433,"Part of #665. Precisely what the title says. This data structure remains opaque, as it is redundant with those found in qos.py. I still feel the urge to rewrite qos.py in full, but I'll hold back.","CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,741,2021-03-30T20:23:57Z,2021-03-31T18:32:48Z,2021-03-31T18:32:51Z,MERGED,True,161,230,15,https://github.com/hidmic,Use py::class_ for rmw_qos_profile_t,2,[],https://github.com/ros2/rclpy/pull/741,https://github.com/hidmic,4,https://github.com/ros2/rclpy/pull/741#issuecomment-811176215,"Part of #665. Precisely what the title says. This data structure remains opaque, as it is redundant with those found in qos.py. I still feel the urge to rewrite qos.py in full, but I'll hold back.",@ros-pull-request-builder retest this please.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,741,2021-03-30T20:23:57Z,2021-03-31T18:32:48Z,2021-03-31T18:32:51Z,MERGED,True,161,230,15,https://github.com/hidmic,Use py::class_ for rmw_qos_profile_t,2,[],https://github.com/ros2/rclpy/pull/741,https://github.com/hidmic,5,https://github.com/ros2/rclpy/pull/741#issuecomment-811275266,"Part of #665. Precisely what the title says. This data structure remains opaque, as it is redundant with those found in qos.py. I still feel the urge to rewrite qos.py in full, but I'll hold back.","CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows Debug",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,741,2021-03-30T20:23:57Z,2021-03-31T18:32:48Z,2021-03-31T18:32:51Z,MERGED,True,161,230,15,https://github.com/hidmic,Use py::class_ for rmw_qos_profile_t,2,[],https://github.com/ros2/rclpy/pull/741,https://github.com/hidmic,6,https://github.com/ros2/rclpy/pull/741#issuecomment-811275368,"Part of #665. Precisely what the title says. This data structure remains opaque, as it is redundant with those found in qos.py. I still feel the urge to rewrite qos.py in full, but I'll hold back.",@ros-pull-request-builder retest this please.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,741,2021-03-30T20:23:57Z,2021-03-31T18:32:48Z,2021-03-31T18:32:51Z,MERGED,True,161,230,15,https://github.com/hidmic,Use py::class_ for rmw_qos_profile_t,2,[],https://github.com/ros2/rclpy/pull/741,https://github.com/hidmic,7,https://github.com/ros2/rclpy/pull/741#issuecomment-811316640,"Part of #665. Precisely what the title says. This data structure remains opaque, as it is redundant with those found in qos.py. I still feel the urge to rewrite qos.py in full, but I'll hold back.",Alright CI and reviewers are happy. Going in!,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,742,2021-03-30T20:51:38Z,2021-03-31T03:31:09Z,2021-03-31T03:31:12Z,MERGED,True,1,1,1,https://github.com/azeey,Fix bug in unique_ptr type argument,1,[],https://github.com/ros2/rclpy/pull/742,https://github.com/azeey,1,https://github.com/ros2/rclpy/pull/742,I found this when running tests under valgrind.,I found this when running tests under valgrind.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,742,2021-03-30T20:51:38Z,2021-03-31T03:31:09Z,2021-03-31T03:31:12Z,MERGED,True,1,1,1,https://github.com/azeey,Fix bug in unique_ptr type argument,1,[],https://github.com/ros2/rclpy/pull/742,https://github.com/azeey,2,https://github.com/ros2/rclpy/pull/742#issuecomment-810608110,I found this when running tests under valgrind.,"CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,742,2021-03-30T20:51:38Z,2021-03-31T03:31:09Z,2021-03-31T03:31:12Z,MERGED,True,1,1,1,https://github.com/azeey,Fix bug in unique_ptr type argument,1,[],https://github.com/ros2/rclpy/pull/742,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/742#issuecomment-810685944,I found this when running tests under valgrind.,"CI LGTM, the warning on windows is in cyclonedds",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,743,2021-03-30T23:39:56Z,2021-03-31T15:38:26Z,2021-03-31T15:41:13Z,MERGED,True,237,120,18,https://github.com/sloretz,Combine pybind11 modules into one,4,[],https://github.com/ros2/rclpy/pull/743,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/743,"Part of #665
This is a step towards getting rid of the C code in rclpy_common. There was trouble on Windows debug before when trying to put code that used pybind11 into rclpy_common that led to removing it in #727. We don't need to figure that out if all the code is in the same shared library, so this PR moves all the pybind11 code into a single shared library.
This has an added benefit of reducing the code size from 4.8 MB to 2.8 MB.","Part of #665
This is a step towards getting rid of the C code in rclpy_common. There was trouble on Windows debug before when trying to put code that used pybind11 into rclpy_common that led to removing it in #727. We don't need to figure that out if all the code is in the same shared library, so this PR moves all the pybind11 code into a single shared library.
This has an added benefit of reducing the code size from 4.8 MB to 2.8 MB.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,743,2021-03-30T23:39:56Z,2021-03-31T15:38:26Z,2021-03-31T15:41:13Z,MERGED,True,237,120,18,https://github.com/sloretz,Combine pybind11 modules into one,4,[],https://github.com/ros2/rclpy/pull/743,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/743#issuecomment-810650201,"Part of #665
This is a step towards getting rid of the C code in rclpy_common. There was trouble on Windows debug before when trying to put code that used pybind11 into rclpy_common that led to removing it in #727. We don't need to figure that out if all the code is in the same shared library, so this PR moves all the pybind11 code into a single shared library.
This has an added benefit of reducing the code size from 4.8 MB to 2.8 MB.","CI (build: --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows 
Windows Debug",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,743,2021-03-30T23:39:56Z,2021-03-31T15:38:26Z,2021-03-31T15:41:13Z,MERGED,True,237,120,18,https://github.com/sloretz,Combine pybind11 modules into one,4,[],https://github.com/ros2/rclpy/pull/743,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/743#issuecomment-810683709,"Part of #665
This is a step towards getting rid of the C code in rclpy_common. There was trouble on Windows debug before when trying to put code that used pybind11 into rclpy_common that led to removing it in #727. We don't need to figure that out if all the code is in the same shared library, so this PR moves all the pybind11 code into a single shared library.
This has an added benefit of reducing the code size from 4.8 MB to 2.8 MB.","And one more CI just to rclpy to see if the warnings above are all unrelated and downstream (build:  --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows 


Windows Debug",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,743,2021-03-30T23:39:56Z,2021-03-31T15:38:26Z,2021-03-31T15:41:13Z,MERGED,True,237,120,18,https://github.com/sloretz,Combine pybind11 modules into one,4,[],https://github.com/ros2/rclpy/pull/743,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/743#issuecomment-811164225,"Part of #665
This is a step towards getting rid of the C code in rclpy_common. There was trouble on Windows debug before when trying to put code that used pybind11 into rclpy_common that led to removing it in #727. We don't need to figure that out if all the code is in the same shared library, so this PR moves all the pybind11 code into a single shared library.
This has an added benefit of reducing the code size from 4.8 MB to 2.8 MB.","CI LGTM, windows warning is in cyclonedds",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,744,2021-03-31T10:53:23Z,2021-03-31T15:37:43Z,2021-03-31T15:49:49Z,MERGED,True,24,65,6,https://github.com/ahcorde,Use py::class_ for rcl_duration_t,3,[],https://github.com/ros2/rclpy/pull/744,https://github.com/ahcorde,1,https://github.com/ros2/rclpy/pull/744,"Part of #665
This is a PR that refactors the code using rcl_duration_t to use a py::class_ definition.
Signed-off-by: ahcorde ahcorde@gmail.com","Part of #665
This is a PR that refactors the code using rcl_duration_t to use a py::class_ definition.
Signed-off-by: ahcorde ahcorde@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,744,2021-03-31T10:53:23Z,2021-03-31T15:37:43Z,2021-03-31T15:49:49Z,MERGED,True,24,65,6,https://github.com/ahcorde,Use py::class_ for rcl_duration_t,3,[],https://github.com/ros2/rclpy/pull/744,https://github.com/ahcorde,2,https://github.com/ros2/rclpy/pull/744#issuecomment-811074615,"Part of #665
This is a PR that refactors the code using rcl_duration_t to use a py::class_ definition.
Signed-off-by: ahcorde ahcorde@gmail.com","build up-to rclpy and testing rclpy

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,744,2021-03-31T10:53:23Z,2021-03-31T15:37:43Z,2021-03-31T15:49:49Z,MERGED,True,24,65,6,https://github.com/ahcorde,Use py::class_ for rcl_duration_t,3,[],https://github.com/ros2/rclpy/pull/744,https://github.com/ahcorde,3,https://github.com/ros2/rclpy/pull/744#issuecomment-811090475,"Part of #665
This is a PR that refactors the code using rcl_duration_t to use a py::class_ definition.
Signed-off-by: ahcorde ahcorde@gmail.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,744,2021-03-31T10:53:23Z,2021-03-31T15:37:43Z,2021-03-31T15:49:49Z,MERGED,True,24,65,6,https://github.com/ahcorde,Use py::class_ for rcl_duration_t,3,[],https://github.com/ros2/rclpy/pull/744,https://github.com/ahcorde,4,https://github.com/ros2/rclpy/pull/744#issuecomment-811163939,"Part of #665
This is a PR that refactors the code using rcl_duration_t to use a py::class_ definition.
Signed-off-by: ahcorde ahcorde@gmail.com",The warning on Windows is unrelated.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,745,2021-03-31T18:02:32Z,2021-04-02T14:57:01Z,2021-04-02T14:57:04Z,MERGED,True,282,336,9,https://github.com/ahcorde,Convert Timer to use a C++ Class,4,[],https://github.com/ros2/rclpy/pull/745,https://github.com/ahcorde,1,https://github.com/ros2/rclpy/pull/745,"Related to #665
This converts the Timer functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com","Related to #665
This converts the Timer functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,745,2021-03-31T18:02:32Z,2021-04-02T14:57:01Z,2021-04-02T14:57:04Z,MERGED,True,282,336,9,https://github.com/ahcorde,Convert Timer to use a C++ Class,4,[],https://github.com/ros2/rclpy/pull/745,https://github.com/ahcorde,2,https://github.com/ros2/rclpy/pull/745#issuecomment-811697354,"Related to #665
This converts the Timer functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com","CI (build: --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,745,2021-03-31T18:02:32Z,2021-04-02T14:57:01Z,2021-04-02T14:57:04Z,MERGED,True,282,336,9,https://github.com/ahcorde,Convert Timer to use a C++ Class,4,[],https://github.com/ros2/rclpy/pull/745,https://github.com/ahcorde,3,https://github.com/ros2/rclpy/pull/745#issuecomment-812432565,"Related to #665
This converts the Timer functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com","CI (build: --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,745,2021-03-31T18:02:32Z,2021-04-02T14:57:01Z,2021-04-02T14:57:04Z,MERGED,True,282,336,9,https://github.com/ahcorde,Convert Timer to use a C++ Class,4,[],https://github.com/ros2/rclpy/pull/745,https://github.com/ahcorde,4,https://github.com/ros2/rclpy/pull/745#issuecomment-812565385,"Related to #665
This converts the Timer functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com",The test failure on MacOS is unrelated and the test failure on Windows @sloretz is working on a PR,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,746,2021-03-31T18:14:21Z,2021-04-02T00:02:45Z,2021-04-02T00:02:47Z,MERGED,True,160,2,4,https://github.com/sloretz,Add PythonAllocator,2,[],https://github.com/ros2/rclpy/pull/746,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/746,"Follow up from #739 (comment)
This implements a C++ allocator that uses PyMem_Malloc() and PyMem_Free(), and uses it to replace new/delete in the Client class.","Follow up from #739 (comment)
This implements a C++ allocator that uses PyMem_Malloc() and PyMem_Free(), and uses it to replace new/delete in the Client class.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,746,2021-03-31T18:14:21Z,2021-04-02T00:02:45Z,2021-04-02T00:02:47Z,MERGED,True,160,2,4,https://github.com/sloretz,Add PythonAllocator,2,[],https://github.com/ros2/rclpy/pull/746,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/746#issuecomment-811472575,"Follow up from #739 (comment)
This implements a C++ allocator that uses PyMem_Malloc() and PyMem_Free(), and uses it to replace new/delete in the Client class.",CI Windows debug (build: --packages-up-to rlcpy test: --packages-select rclpy) to check if there are any surprises there first:,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,746,2021-03-31T18:14:21Z,2021-04-02T00:02:45Z,2021-04-02T00:02:47Z,MERGED,True,160,2,4,https://github.com/sloretz,Add PythonAllocator,2,[],https://github.com/ros2/rclpy/pull/746,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/746#issuecomment-811564801,"Follow up from #739 (comment)
This implements a C++ allocator that uses PyMem_Malloc() and PyMem_Free(), and uses it to replace new/delete in the Client class.","Typo in build args, WIndows debug again (build: --packages-up-to rclpy test: --packages-select rclpy)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,746,2021-03-31T18:14:21Z,2021-04-02T00:02:45Z,2021-04-02T00:02:47Z,MERGED,True,160,2,4,https://github.com/sloretz,Add PythonAllocator,2,[],https://github.com/ros2/rclpy/pull/746,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/746#issuecomment-812015020,"Follow up from #739 (comment)
This implements a C++ allocator that uses PyMem_Malloc() and PyMem_Free(), and uses it to replace new/delete in the Client class.","CI (build: --packages-above-and-dependencies rclpy test:  --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,746,2021-03-31T18:14:21Z,2021-04-02T00:02:45Z,2021-04-02T00:02:47Z,MERGED,True,160,2,4,https://github.com/sloretz,Add PythonAllocator,2,[],https://github.com/ros2/rclpy/pull/746,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/746#issuecomment-812239925,"Follow up from #739 (comment)
This implements a C++ allocator that uses PyMem_Malloc() and PyMem_Free(), and uses it to replace new/delete in the Client class.","CI LGTM, test failures and warnings are also in the nightly.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,747,2021-03-31T19:19:33Z,2021-04-02T20:37:31Z,2021-04-02T20:37:47Z,MERGED,True,194,189,11,https://github.com/ahcorde,Convert Service to use C++ Class,8,[],https://github.com/ros2/rclpy/pull/747,https://github.com/ahcorde,1,https://github.com/ros2/rclpy/pull/747,"Related to #665
This converts the Service functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com","Related to #665
This converts the Service functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,747,2021-03-31T19:19:33Z,2021-04-02T20:37:31Z,2021-04-02T20:37:47Z,MERGED,True,194,189,11,https://github.com/ahcorde,Convert Service to use C++ Class,8,[],https://github.com/ros2/rclpy/pull/747,https://github.com/ahcorde,2,https://github.com/ros2/rclpy/pull/747#issuecomment-811703418,"Related to #665
This converts the Service functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com","CI (build: --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,747,2021-03-31T19:19:33Z,2021-04-02T20:37:31Z,2021-04-02T20:37:47Z,MERGED,True,194,189,11,https://github.com/ahcorde,Convert Service to use C++ Class,8,[],https://github.com/ros2/rclpy/pull/747,https://github.com/ahcorde,3,https://github.com/ros2/rclpy/pull/747#issuecomment-812433842,"Related to #665
This converts the Service functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com","CI (build: --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,747,2021-03-31T19:19:33Z,2021-04-02T20:37:31Z,2021-04-02T20:37:47Z,MERGED,True,194,189,11,https://github.com/ahcorde,Convert Service to use C++ Class,8,[],https://github.com/ros2/rclpy/pull/747,https://github.com/ahcorde,4,https://github.com/ros2/rclpy/pull/747#issuecomment-812629016,"Related to #665
This converts the Service functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com","CI (build: --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,747,2021-03-31T19:19:33Z,2021-04-02T20:37:31Z,2021-04-02T20:37:47Z,MERGED,True,194,189,11,https://github.com/ahcorde,Convert Service to use C++ Class,8,[],https://github.com/ros2/rclpy/pull/747,https://github.com/ahcorde,5,https://github.com/ros2/rclpy/pull/747#issuecomment-812701802,"Related to #665
This converts the Service functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com",The Windows failure is unrelated. Merging!,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,748,2021-03-31T19:49:44Z,2021-04-02T15:14:45Z,2021-04-02T15:14:47Z,MERGED,True,51,130,10,https://github.com/azeey,Use py::class_ for rmw_service_info_t and rmw_request_id_t,1,[],https://github.com/ros2/rclpy/pull/748,https://github.com/azeey,1,https://github.com/ros2/rclpy/pull/748,"Part of #665
This refactors the code using rmw_service_info_t and rmw_request_id_t to use a py::class_ definition.","Part of #665
This refactors the code using rmw_service_info_t and rmw_request_id_t to use a py::class_ definition.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,748,2021-03-31T19:49:44Z,2021-04-02T15:14:45Z,2021-04-02T15:14:47Z,MERGED,True,51,130,10,https://github.com/azeey,Use py::class_ for rmw_service_info_t and rmw_request_id_t,1,[],https://github.com/ros2/rclpy/pull/748,https://github.com/azeey,2,https://github.com/ros2/rclpy/pull/748#issuecomment-811402577,"Part of #665
This refactors the code using rmw_service_info_t and rmw_request_id_t to use a py::class_ definition.","CI (build: --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,748,2021-03-31T19:49:44Z,2021-04-02T15:14:45Z,2021-04-02T15:14:47Z,MERGED,True,51,130,10,https://github.com/azeey,Use py::class_ for rmw_service_info_t and rmw_request_id_t,1,[],https://github.com/ros2/rclpy/pull/748,https://github.com/azeey,3,https://github.com/ros2/rclpy/pull/748#issuecomment-812181826,"Part of #665
This refactors the code using rmw_service_info_t and rmw_request_id_t to use a py::class_ definition.","There were CI failures that I believe were fixed in other repos.
CI (build: --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,748,2021-03-31T19:49:44Z,2021-04-02T15:14:45Z,2021-04-02T15:14:47Z,MERGED,True,51,130,10,https://github.com/azeey,Use py::class_ for rmw_service_info_t and rmw_request_id_t,1,[],https://github.com/ros2/rclpy/pull/748,https://github.com/azeey,4,https://github.com/ros2/rclpy/pull/748#issuecomment-812573041,"Part of #665
This refactors the code using rmw_service_info_t and rmw_request_id_t to use a py::class_ definition.",The macOS build failure and the windows warning are unrelated. Merging.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,749,2021-04-01T15:48:53Z,2021-04-02T20:56:24Z,2021-04-02T20:56:26Z,MERGED,True,207,243,10,https://github.com/ahcorde,Convert Clock to use a C++ Class,4,[],https://github.com/ros2/rclpy/pull/749,https://github.com/ahcorde,1,https://github.com/ros2/rclpy/pull/749,"This PR builds on top of this other PR #745
Related to #665
This converts the Clock functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com","This PR builds on top of this other PR #745
Related to #665
This converts the Clock functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,749,2021-04-01T15:48:53Z,2021-04-02T20:56:24Z,2021-04-02T20:56:26Z,MERGED,True,207,243,10,https://github.com/ahcorde,Convert Clock to use a C++ Class,4,[],https://github.com/ros2/rclpy/pull/749,https://github.com/ahcorde,2,https://github.com/ros2/rclpy/pull/749#issuecomment-812629664,"This PR builds on top of this other PR #745
Related to #665
This converts the Clock functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com","CI (build: --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,749,2021-04-01T15:48:53Z,2021-04-02T20:56:24Z,2021-04-02T20:56:26Z,MERGED,True,207,243,10,https://github.com/ahcorde,Convert Clock to use a C++ Class,4,[],https://github.com/ros2/rclpy/pull/749,https://github.com/ahcorde,3,https://github.com/ros2/rclpy/pull/749#issuecomment-812639884,"This PR builds on top of this other PR #745
Related to #665
This converts the Clock functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com","CI (build: --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,749,2021-04-01T15:48:53Z,2021-04-02T20:56:24Z,2021-04-02T20:56:26Z,MERGED,True,207,243,10,https://github.com/ahcorde,Convert Clock to use a C++ Class,4,[],https://github.com/ros2/rclpy/pull/749,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/749#issuecomment-812712299,"This PR builds on top of this other PR #745
Related to #665
This converts the Clock functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com","CI LGTM, both windows CMake warnings are in cyclonedds. Merging 🎉",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,750,2021-04-01T18:12:59Z,2021-04-02T21:47:23Z,2021-04-02T21:47:25Z,MERGED,True,438,540,10,https://github.com/sloretz,Use py::class_ for rcl_event_t,3,[],https://github.com/ros2/rclpy/pull/750,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/750,"Part of #665
This uses a py::class_ definition for rcl_event_t","Part of #665
This uses a py::class_ definition for rcl_event_t",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,750,2021-04-01T18:12:59Z,2021-04-02T21:47:23Z,2021-04-02T21:47:25Z,MERGED,True,438,540,10,https://github.com/sloretz,Use py::class_ for rcl_event_t,3,[],https://github.com/ros2/rclpy/pull/750,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/750#issuecomment-812083652,"Part of #665
This uses a py::class_ definition for rcl_event_t",Windows Debug CI (build: --packages-up-to rclpy test: --packages-select rclpy),True,{}
ros2/rclpy,https://github.com/ros2/rclpy,750,2021-04-01T18:12:59Z,2021-04-02T21:47:23Z,2021-04-02T21:47:25Z,MERGED,True,438,540,10,https://github.com/sloretz,Use py::class_ for rcl_event_t,3,[],https://github.com/ros2/rclpy/pull/750,https://github.com/ahcorde,3,https://github.com/ros2/rclpy/pull/750#issuecomment-812452858,"Part of #665
This uses a py::class_ definition for rcl_event_t","build: --packages-up-to rclpy test: --packages-select rclpy

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,750,2021-04-01T18:12:59Z,2021-04-02T21:47:23Z,2021-04-02T21:47:25Z,MERGED,True,438,540,10,https://github.com/sloretz,Use py::class_ for rcl_event_t,3,[],https://github.com/ros2/rclpy/pull/750,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/750#issuecomment-812631235,"Part of #665
This uses a py::class_ definition for rcl_event_t","Rebased without making any changes
CI (build: --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,750,2021-04-01T18:12:59Z,2021-04-02T21:47:23Z,2021-04-02T21:47:25Z,MERGED,True,438,540,10,https://github.com/sloretz,Use py::class_ for rcl_event_t,3,[],https://github.com/ros2/rclpy/pull/750,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/750#issuecomment-812715623,"Part of #665
This uses a py::class_ definition for rcl_event_t","Rebased without changes
CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,750,2021-04-01T18:12:59Z,2021-04-02T21:47:23Z,2021-04-02T21:47:25Z,MERGED,True,438,540,10,https://github.com/sloretz,Use py::class_ for rcl_event_t,3,[],https://github.com/ros2/rclpy/pull/750,https://github.com/sloretz,6,https://github.com/ros2/rclpy/pull/750#issuecomment-812729085,"Part of #665
This uses a py::class_ definition for rcl_event_t","Approved and CI LGTM, merging!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,751,2021-04-02T02:20:26Z,2021-04-08T19:54:57Z,2021-04-08T19:55:51Z,MERGED,True,255,144,6,https://github.com/gbalke,Use py::class_ for rcl_action_goal_handle_t,9,[],https://github.com/ros2/rclpy/pull/751,https://github.com/gbalke,1,https://github.com/ros2/rclpy/pull/751,Part of #665.,Part of #665.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,751,2021-04-02T02:20:26Z,2021-04-08T19:54:57Z,2021-04-08T19:55:51Z,MERGED,True,255,144,6,https://github.com/gbalke,Use py::class_ for rcl_action_goal_handle_t,9,[],https://github.com/ros2/rclpy/pull/751,https://github.com/gbalke,2,https://github.com/ros2/rclpy/pull/751#issuecomment-813666645,Part of #665.,"In a certain condition, the state of an allocator is in a questionable state. In this scenario, the de-allocate call inside of the fini causes a segfault. I'm still uncertain as to if this is a rcl bug or an rclpy issue.
Thread 1 ""python3"" hit Breakpoint 1, rcl_action_goal_handle_fini (goal_handle=0x1f7be10) at /rclpy_ws/src/rcl/rcl_action/src/rcl_action/goal_handle.c:79
79          goal_handle->impl->allocator.deallocate(goal_handle->impl, goal_handle->impl->allocator.state);
(gdb) p goal_handle->impl->allocator.state
$3 = (void *) 0x0
(gdb) p goal_handle->impl->allocator
$4 = {allocate = 0x555555555555, deallocate = 0x555555550000, reallocate = 0x0, zero_allocate = 0x555555550000, state = 0x0}
(gdb) n

Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault.
0x0000555555550000 in ?? ()",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,751,2021-04-02T02:20:26Z,2021-04-08T19:54:57Z,2021-04-08T19:55:51Z,MERGED,True,255,144,6,https://github.com/gbalke,Use py::class_ for rcl_action_goal_handle_t,9,[],https://github.com/ros2/rclpy/pull/751,https://github.com/gbalke,3,https://github.com/ros2/rclpy/pull/751#issuecomment-814293622,Part of #665.,@ros-pull-request-builder retest this,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,751,2021-04-02T02:20:26Z,2021-04-08T19:54:57Z,2021-04-08T19:55:51Z,MERGED,True,255,144,6,https://github.com/gbalke,Use py::class_ for rcl_action_goal_handle_t,9,[],https://github.com/ros2/rclpy/pull/751,https://github.com/gbalke,4,https://github.com/ros2/rclpy/pull/751#issuecomment-814356775,Part of #665.,"CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,751,2021-04-02T02:20:26Z,2021-04-08T19:54:57Z,2021-04-08T19:55:51Z,MERGED,True,255,144,6,https://github.com/gbalke,Use py::class_ for rcl_action_goal_handle_t,9,[],https://github.com/ros2/rclpy/pull/751,https://github.com/gbalke,5,https://github.com/ros2/rclpy/pull/751#issuecomment-815157719,Part of #665.,"CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,751,2021-04-02T02:20:26Z,2021-04-08T19:54:57Z,2021-04-08T19:55:51Z,MERGED,True,255,144,6,https://github.com/gbalke,Use py::class_ for rcl_action_goal_handle_t,9,[],https://github.com/ros2/rclpy/pull/751,https://github.com/sloretz,6,https://github.com/ros2/rclpy/pull/751#issuecomment-815306766,Part of #665.,Something seems off with the diff on github. It looks like this PR includes all of #756 - the conversion of Publisher and Subscription. Is that intended?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,751,2021-04-02T02:20:26Z,2021-04-08T19:54:57Z,2021-04-08T19:55:51Z,MERGED,True,255,144,6,https://github.com/gbalke,Use py::class_ for rcl_action_goal_handle_t,9,[],https://github.com/ros2/rclpy/pull/751,https://github.com/gbalke,7,https://github.com/ros2/rclpy/pull/751#issuecomment-815338555,Part of #665.,"Do you mind to add these changes 6939425 to your PR

@sloretz I thought that was what this was asking for?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,751,2021-04-02T02:20:26Z,2021-04-08T19:54:57Z,2021-04-08T19:55:51Z,MERGED,True,255,144,6,https://github.com/gbalke,Use py::class_ for rcl_action_goal_handle_t,9,[],https://github.com/ros2/rclpy/pull/751,https://github.com/ahcorde,8,https://github.com/ros2/rclpy/pull/751#issuecomment-815483332,Part of #665.,@greg the Publisher and Subscriber PR is in (in the post_galactic_freeze branch). I think you should remove the merge with the branch pybind11-pubsub (which is adding my commits too) and then merge your branch with post_galactic_freeze.,True,{'THUMBS_UP': ['https://github.com/gbalke']}
ros2/rclpy,https://github.com/ros2/rclpy,751,2021-04-02T02:20:26Z,2021-04-08T19:54:57Z,2021-04-08T19:55:51Z,MERGED,True,255,144,6,https://github.com/gbalke,Use py::class_ for rcl_action_goal_handle_t,9,[],https://github.com/ros2/rclpy/pull/751,https://github.com/gbalke,9,https://github.com/ros2/rclpy/pull/751#issuecomment-816005172,Part of #665.,"Did all the rebasing shenanigans.
CI up to rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,753,2021-04-02T16:47:00Z,2021-04-02T17:27:06Z,2021-04-02T17:27:09Z,MERGED,True,1,1,1,https://github.com/sloretz,Fix windows warning by using consistent types,1,['bug'],https://github.com/ros2/rclpy/pull/753,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/753,"Should fix https://ci.ros2.org/view/nightly/job/nightly_win_rel/1891/msbuild/new/
Part of #665","Should fix https://ci.ros2.org/view/nightly/job/nightly_win_rel/1891/msbuild/new/
Part of #665",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,753,2021-04-02T16:47:00Z,2021-04-02T17:27:06Z,2021-04-02T17:27:09Z,MERGED,True,1,1,1,https://github.com/sloretz,Fix windows warning by using consistent types,1,['bug'],https://github.com/ros2/rclpy/pull/753,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/753#issuecomment-812611494,"Should fix https://ci.ros2.org/view/nightly/job/nightly_win_rel/1891/msbuild/new/
Part of #665","CI ( build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,753,2021-04-02T16:47:00Z,2021-04-02T17:27:06Z,2021-04-02T17:27:09Z,MERGED,True,1,1,1,https://github.com/sloretz,Fix windows warning by using consistent types,1,['bug'],https://github.com/ros2/rclpy/pull/753,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/753#issuecomment-812629337,"Should fix https://ci.ros2.org/view/nightly/job/nightly_win_rel/1891/msbuild/new/
Part of #665",Warning is fixed 🎉,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,754,2021-04-05T19:33:13Z,2021-04-06T14:02:58Z,2021-04-06T14:03:00Z,MERGED,True,2,1,1,https://github.com/ivanpauno,Check if shutdown callback weak method is valid before calling it,1,['enhancement'],https://github.com/ros2/rclpy/pull/754,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/754,"Fixes https://ci.ros2.org/view/nightly/job/nightly_linux-aarch64_repeated/1555/testReport/junit/(root)/projectroot/test_client/.
The issue might also be related to some of the pybind11 migration changes, but checking if the weak method is valid before calling it seems reasonable to do.","Fixes https://ci.ros2.org/view/nightly/job/nightly_linux-aarch64_repeated/1555/testReport/junit/(root)/projectroot/test_client/.
The issue might also be related to some of the pybind11 migration changes, but checking if the weak method is valid before calling it seems reasonable to do.",True,{'THUMBS_UP': ['https://github.com/sloretz']}
ros2/rclpy,https://github.com/ros2/rclpy,754,2021-04-05T19:33:13Z,2021-04-06T14:02:58Z,2021-04-06T14:03:00Z,MERGED,True,2,1,1,https://github.com/ivanpauno,Check if shutdown callback weak method is valid before calling it,1,['enhancement'],https://github.com/ros2/rclpy/pull/754,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/754#issuecomment-814109280,"Fixes https://ci.ros2.org/view/nightly/job/nightly_linux-aarch64_repeated/1555/testReport/junit/(root)/projectroot/test_client/.
The issue might also be related to some of the pybind11 migration changes, but checking if the weak method is valid before calling it seems reasonable to do.","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,755,2021-04-06T00:40:27Z,2021-04-06T12:33:53Z,2021-04-06T12:33:56Z,MERGED,True,1,1,1,https://github.com/clalancette,Change index.ros.org -> docs.ros.org.,1,[],https://github.com/ros2/rclpy/pull/755,https://github.com/clalancette,1,https://github.com/ros2/rclpy/pull/755,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,756,2021-04-06T11:08:59Z,2021-04-08T06:17:55Z,2021-04-08T06:17:58Z,MERGED,True,431,496,30,https://github.com/ahcorde,Convert Publisher and Subscription to use C++ Classes,6,['enhancement'],https://github.com/ros2/rclpy/pull/756,https://github.com/ahcorde,1,https://github.com/ros2/rclpy/pull/756,"Part of #665.
This converts the Publisher and Subscription functions to a C++ classes.
I have some issue with the QoSEvent destructor in some of the tests:
Thread 29 ""python3"" received signal SIGSEGV, Segmentation fault.
[Cambiando a Thread 0x7fffa3fff700 (LWP 338069)]
0x00000000006152cf in _is_legal_capsule (invalid_capsule=0x6d7160 ""PyCapsule_GetPointer called with invalid PyCapsule object"", capsule=0x3) at ../Objects/capsule.c:84
84	../Objects/capsule.c: No existe el archivo o el directorio.
(gdb) bt
#0  0x00000000006152cf in _is_legal_capsule (invalid_capsule=0x6d7160 ""PyCapsule_GetPointer called with invalid PyCapsule object"", capsule=0x3) at ../Objects/capsule.c:84
#1  PyCapsule_GetPointer (o=<unknown at remote 0x3>, name=0x7ffff5985881 ""rcl_node_t"") at ../Objects/capsule.c:84
#2  0x00007ffff6c182fb in rclpy_handle_get_pointer_from_capsule () from /home/ahcorde/ros2_galactic/install/lib/librclpy_common.so
#3  0x00007ffff5932510 in rclpy::Handle::rcl_ptr(char const*) () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#4  0x00007ffff5918bc3 in rcl_node_t* rclpy::Handle::cast_or_warn<rcl_node_t*>(char const*) () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#5  0x00007ffff593f2c4 in rclpy::Publisher::Publisher(pybind11::capsule, pybind11::object, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, pybind11::object)::{lambda(rcl_publisher_t*)#1}::operator()(rcl_publisher_t*) const [clone .lto_priv.0] () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#6  0x00007ffff594567e in std::_Sp_counted_deleter<rcl_publisher_t*, rclpy::Publisher::Publisher(pybind11::capsule, pybind11::object, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, pybind11::object)::{lambda(rcl_publisher_t*)#1}, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose() [clone .lto_priv.0] ()
   from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#7  0x00007ffff58f464e in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#8  0x00007ffff58edfbb in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#9  0x00007ffff58ec990 in std::__shared_ptr<rcl_publisher_t, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() ()
   from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#10 0x00007ffff58ec9d8 in std::shared_ptr<rcl_publisher_t>::~shared_ptr() [clone .lto_priv.0] () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#11 0x00007ffff588c75c in rclpy::QoSEvent::~QoSEvent() [clone .lto_priv.0] () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#12 0x00007ffff5953d36 in rclpy::QoSEvent::~QoSEvent() () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#13 0x00007ffff5953d76 in std::default_delete<rclpy::QoSEvent>::operator()(rclpy::QoSEvent*) const () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#14 0x00007ffff588bc24 in std::unique_ptr<rclpy::QoSEvent, std::default_delete<rclpy::QoSEvent> >::~unique_ptr() [clone .lto_priv.0] ()
   from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#15 0x00007ffff594c117 in pybind11::class_<rclpy::QoSEvent, rclpy::Destroyable>::dealloc(pybind11::detail::value_and_holder&) ()
   from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#16 0x00007ffff589ac2f in pybind11::detail::clear_instance(_object*) () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#17 0x00007ffff589ad30 in pybind11_object_dealloc () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
Do you mind to have a look @hidmic or @sloretz ?
Signed-off-by: ahcorde ahcorde@gmail.com","Part of #665.
This converts the Publisher and Subscription functions to a C++ classes.
I have some issue with the QoSEvent destructor in some of the tests:
Thread 29 ""python3"" received signal SIGSEGV, Segmentation fault.
[Cambiando a Thread 0x7fffa3fff700 (LWP 338069)]
0x00000000006152cf in _is_legal_capsule (invalid_capsule=0x6d7160 ""PyCapsule_GetPointer called with invalid PyCapsule object"", capsule=0x3) at ../Objects/capsule.c:84
84	../Objects/capsule.c: No existe el archivo o el directorio.
(gdb) bt
#0  0x00000000006152cf in _is_legal_capsule (invalid_capsule=0x6d7160 ""PyCapsule_GetPointer called with invalid PyCapsule object"", capsule=0x3) at ../Objects/capsule.c:84
#1  PyCapsule_GetPointer (o=<unknown at remote 0x3>, name=0x7ffff5985881 ""rcl_node_t"") at ../Objects/capsule.c:84
#2  0x00007ffff6c182fb in rclpy_handle_get_pointer_from_capsule () from /home/ahcorde/ros2_galactic/install/lib/librclpy_common.so
#3  0x00007ffff5932510 in rclpy::Handle::rcl_ptr(char const*) () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#4  0x00007ffff5918bc3 in rcl_node_t* rclpy::Handle::cast_or_warn<rcl_node_t*>(char const*) () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#5  0x00007ffff593f2c4 in rclpy::Publisher::Publisher(pybind11::capsule, pybind11::object, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, pybind11::object)::{lambda(rcl_publisher_t*)#1}::operator()(rcl_publisher_t*) const [clone .lto_priv.0] () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#6  0x00007ffff594567e in std::_Sp_counted_deleter<rcl_publisher_t*, rclpy::Publisher::Publisher(pybind11::capsule, pybind11::object, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, pybind11::object)::{lambda(rcl_publisher_t*)#1}, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose() [clone .lto_priv.0] ()
   from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#7  0x00007ffff58f464e in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#8  0x00007ffff58edfbb in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#9  0x00007ffff58ec990 in std::__shared_ptr<rcl_publisher_t, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() ()
   from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#10 0x00007ffff58ec9d8 in std::shared_ptr<rcl_publisher_t>::~shared_ptr() [clone .lto_priv.0] () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#11 0x00007ffff588c75c in rclpy::QoSEvent::~QoSEvent() [clone .lto_priv.0] () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#12 0x00007ffff5953d36 in rclpy::QoSEvent::~QoSEvent() () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#13 0x00007ffff5953d76 in std::default_delete<rclpy::QoSEvent>::operator()(rclpy::QoSEvent*) const () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#14 0x00007ffff588bc24 in std::unique_ptr<rclpy::QoSEvent, std::default_delete<rclpy::QoSEvent> >::~unique_ptr() [clone .lto_priv.0] ()
   from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#15 0x00007ffff594c117 in pybind11::class_<rclpy::QoSEvent, rclpy::Destroyable>::dealloc(pybind11::detail::value_and_holder&) ()
   from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#16 0x00007ffff589ac2f in pybind11::detail::clear_instance(_object*) () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#17 0x00007ffff589ad30 in pybind11_object_dealloc () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
Do you mind to have a look @hidmic or @sloretz ?
Signed-off-by: ahcorde ahcorde@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,756,2021-04-06T11:08:59Z,2021-04-08T06:17:55Z,2021-04-08T06:17:58Z,MERGED,True,431,496,30,https://github.com/ahcorde,Convert Publisher and Subscription to use C++ Classes,6,['enhancement'],https://github.com/ros2/rclpy/pull/756,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/756#issuecomment-814246782,"Part of #665.
This converts the Publisher and Subscription functions to a C++ classes.
I have some issue with the QoSEvent destructor in some of the tests:
Thread 29 ""python3"" received signal SIGSEGV, Segmentation fault.
[Cambiando a Thread 0x7fffa3fff700 (LWP 338069)]
0x00000000006152cf in _is_legal_capsule (invalid_capsule=0x6d7160 ""PyCapsule_GetPointer called with invalid PyCapsule object"", capsule=0x3) at ../Objects/capsule.c:84
84	../Objects/capsule.c: No existe el archivo o el directorio.
(gdb) bt
#0  0x00000000006152cf in _is_legal_capsule (invalid_capsule=0x6d7160 ""PyCapsule_GetPointer called with invalid PyCapsule object"", capsule=0x3) at ../Objects/capsule.c:84
#1  PyCapsule_GetPointer (o=<unknown at remote 0x3>, name=0x7ffff5985881 ""rcl_node_t"") at ../Objects/capsule.c:84
#2  0x00007ffff6c182fb in rclpy_handle_get_pointer_from_capsule () from /home/ahcorde/ros2_galactic/install/lib/librclpy_common.so
#3  0x00007ffff5932510 in rclpy::Handle::rcl_ptr(char const*) () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#4  0x00007ffff5918bc3 in rcl_node_t* rclpy::Handle::cast_or_warn<rcl_node_t*>(char const*) () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#5  0x00007ffff593f2c4 in rclpy::Publisher::Publisher(pybind11::capsule, pybind11::object, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, pybind11::object)::{lambda(rcl_publisher_t*)#1}::operator()(rcl_publisher_t*) const [clone .lto_priv.0] () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#6  0x00007ffff594567e in std::_Sp_counted_deleter<rcl_publisher_t*, rclpy::Publisher::Publisher(pybind11::capsule, pybind11::object, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, pybind11::object)::{lambda(rcl_publisher_t*)#1}, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose() [clone .lto_priv.0] ()
   from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#7  0x00007ffff58f464e in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#8  0x00007ffff58edfbb in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#9  0x00007ffff58ec990 in std::__shared_ptr<rcl_publisher_t, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() ()
   from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#10 0x00007ffff58ec9d8 in std::shared_ptr<rcl_publisher_t>::~shared_ptr() [clone .lto_priv.0] () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#11 0x00007ffff588c75c in rclpy::QoSEvent::~QoSEvent() [clone .lto_priv.0] () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#12 0x00007ffff5953d36 in rclpy::QoSEvent::~QoSEvent() () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#13 0x00007ffff5953d76 in std::default_delete<rclpy::QoSEvent>::operator()(rclpy::QoSEvent*) const () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#14 0x00007ffff588bc24 in std::unique_ptr<rclpy::QoSEvent, std::default_delete<rclpy::QoSEvent> >::~unique_ptr() [clone .lto_priv.0] ()
   from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#15 0x00007ffff594c117 in pybind11::class_<rclpy::QoSEvent, rclpy::Destroyable>::dealloc(pybind11::detail::value_and_holder&) ()
   from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#16 0x00007ffff589ac2f in pybind11::detail::clear_instance(_object*) () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#17 0x00007ffff589ad30 in pybind11_object_dealloc () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
Do you mind to have a look @hidmic or @sloretz ?
Signed-off-by: ahcorde ahcorde@gmail.com","If I'm not mistaken, the issue is that QoSEvent no longer holds a Handle to an rcl_subscription_t, but the rcl_subscription_t itself. Destruction order w.r.t. your node handle is no longer guaranteed.
I believe the plan was to move away from Handle instances and simply use std::shared_ptr instances. Is that right @sloretz? If so, QoSEvent should keep an std::shared_ptr to its parent, which in turn keeps an std::shared_ptr to the node.

Ohhh shoot. I was thinking the QoSEvent just needed to keep an std::shared_ptr to the parent rcl type to keep that alive, but I forgot that doesn't keep it's grandparent, the Node, alive.
You're right that we'll need a shared pointer to all the ancestors. I'm not sure what that looks like to implement, but a shared pointer to the parent wrapper sounds reasonable.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,756,2021-04-06T11:08:59Z,2021-04-08T06:17:55Z,2021-04-08T06:17:58Z,MERGED,True,431,496,30,https://github.com/ahcorde,Convert Publisher and Subscription to use C++ Classes,6,['enhancement'],https://github.com/ros2/rclpy/pull/756,https://github.com/ahcorde,3,https://github.com/ros2/rclpy/pull/756#issuecomment-815131750,"Part of #665.
This converts the Publisher and Subscription functions to a C++ classes.
I have some issue with the QoSEvent destructor in some of the tests:
Thread 29 ""python3"" received signal SIGSEGV, Segmentation fault.
[Cambiando a Thread 0x7fffa3fff700 (LWP 338069)]
0x00000000006152cf in _is_legal_capsule (invalid_capsule=0x6d7160 ""PyCapsule_GetPointer called with invalid PyCapsule object"", capsule=0x3) at ../Objects/capsule.c:84
84	../Objects/capsule.c: No existe el archivo o el directorio.
(gdb) bt
#0  0x00000000006152cf in _is_legal_capsule (invalid_capsule=0x6d7160 ""PyCapsule_GetPointer called with invalid PyCapsule object"", capsule=0x3) at ../Objects/capsule.c:84
#1  PyCapsule_GetPointer (o=<unknown at remote 0x3>, name=0x7ffff5985881 ""rcl_node_t"") at ../Objects/capsule.c:84
#2  0x00007ffff6c182fb in rclpy_handle_get_pointer_from_capsule () from /home/ahcorde/ros2_galactic/install/lib/librclpy_common.so
#3  0x00007ffff5932510 in rclpy::Handle::rcl_ptr(char const*) () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#4  0x00007ffff5918bc3 in rcl_node_t* rclpy::Handle::cast_or_warn<rcl_node_t*>(char const*) () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#5  0x00007ffff593f2c4 in rclpy::Publisher::Publisher(pybind11::capsule, pybind11::object, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, pybind11::object)::{lambda(rcl_publisher_t*)#1}::operator()(rcl_publisher_t*) const [clone .lto_priv.0] () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#6  0x00007ffff594567e in std::_Sp_counted_deleter<rcl_publisher_t*, rclpy::Publisher::Publisher(pybind11::capsule, pybind11::object, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, pybind11::object)::{lambda(rcl_publisher_t*)#1}, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose() [clone .lto_priv.0] ()
   from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#7  0x00007ffff58f464e in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#8  0x00007ffff58edfbb in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#9  0x00007ffff58ec990 in std::__shared_ptr<rcl_publisher_t, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() ()
   from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#10 0x00007ffff58ec9d8 in std::shared_ptr<rcl_publisher_t>::~shared_ptr() [clone .lto_priv.0] () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#11 0x00007ffff588c75c in rclpy::QoSEvent::~QoSEvent() [clone .lto_priv.0] () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#12 0x00007ffff5953d36 in rclpy::QoSEvent::~QoSEvent() () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#13 0x00007ffff5953d76 in std::default_delete<rclpy::QoSEvent>::operator()(rclpy::QoSEvent*) const () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#14 0x00007ffff588bc24 in std::unique_ptr<rclpy::QoSEvent, std::default_delete<rclpy::QoSEvent> >::~unique_ptr() [clone .lto_priv.0] ()
   from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#15 0x00007ffff594c117 in pybind11::class_<rclpy::QoSEvent, rclpy::Destroyable>::dealloc(pybind11::detail::value_and_holder&) ()
   from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#16 0x00007ffff589ac2f in pybind11::detail::clear_instance(_object*) () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#17 0x00007ffff589ad30 in pybind11_object_dealloc () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
Do you mind to have a look @hidmic or @sloretz ?
Signed-off-by: ahcorde ahcorde@gmail.com","Building up-to rclpy and testing rclpy

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,756,2021-04-06T11:08:59Z,2021-04-08T06:17:55Z,2021-04-08T06:17:58Z,MERGED,True,431,496,30,https://github.com/ahcorde,Convert Publisher and Subscription to use C++ Classes,6,['enhancement'],https://github.com/ros2/rclpy/pull/756,https://github.com/ahcorde,4,https://github.com/ros2/rclpy/pull/756#issuecomment-815481172,"Part of #665.
This converts the Publisher and Subscription functions to a C++ classes.
I have some issue with the QoSEvent destructor in some of the tests:
Thread 29 ""python3"" received signal SIGSEGV, Segmentation fault.
[Cambiando a Thread 0x7fffa3fff700 (LWP 338069)]
0x00000000006152cf in _is_legal_capsule (invalid_capsule=0x6d7160 ""PyCapsule_GetPointer called with invalid PyCapsule object"", capsule=0x3) at ../Objects/capsule.c:84
84	../Objects/capsule.c: No existe el archivo o el directorio.
(gdb) bt
#0  0x00000000006152cf in _is_legal_capsule (invalid_capsule=0x6d7160 ""PyCapsule_GetPointer called with invalid PyCapsule object"", capsule=0x3) at ../Objects/capsule.c:84
#1  PyCapsule_GetPointer (o=<unknown at remote 0x3>, name=0x7ffff5985881 ""rcl_node_t"") at ../Objects/capsule.c:84
#2  0x00007ffff6c182fb in rclpy_handle_get_pointer_from_capsule () from /home/ahcorde/ros2_galactic/install/lib/librclpy_common.so
#3  0x00007ffff5932510 in rclpy::Handle::rcl_ptr(char const*) () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#4  0x00007ffff5918bc3 in rcl_node_t* rclpy::Handle::cast_or_warn<rcl_node_t*>(char const*) () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#5  0x00007ffff593f2c4 in rclpy::Publisher::Publisher(pybind11::capsule, pybind11::object, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, pybind11::object)::{lambda(rcl_publisher_t*)#1}::operator()(rcl_publisher_t*) const [clone .lto_priv.0] () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#6  0x00007ffff594567e in std::_Sp_counted_deleter<rcl_publisher_t*, rclpy::Publisher::Publisher(pybind11::capsule, pybind11::object, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, pybind11::object)::{lambda(rcl_publisher_t*)#1}, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose() [clone .lto_priv.0] ()
   from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#7  0x00007ffff58f464e in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#8  0x00007ffff58edfbb in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#9  0x00007ffff58ec990 in std::__shared_ptr<rcl_publisher_t, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() ()
   from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#10 0x00007ffff58ec9d8 in std::shared_ptr<rcl_publisher_t>::~shared_ptr() [clone .lto_priv.0] () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#11 0x00007ffff588c75c in rclpy::QoSEvent::~QoSEvent() [clone .lto_priv.0] () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#12 0x00007ffff5953d36 in rclpy::QoSEvent::~QoSEvent() () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#13 0x00007ffff5953d76 in std::default_delete<rclpy::QoSEvent>::operator()(rclpy::QoSEvent*) const () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#14 0x00007ffff588bc24 in std::unique_ptr<rclpy::QoSEvent, std::default_delete<rclpy::QoSEvent> >::~unique_ptr() [clone .lto_priv.0] ()
   from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#15 0x00007ffff594c117 in pybind11::class_<rclpy::QoSEvent, rclpy::Destroyable>::dealloc(pybind11::detail::value_and_holder&) ()
   from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#16 0x00007ffff589ac2f in pybind11::detail::clear_instance(_object*) () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
#17 0x00007ffff589ad30 in pybind11_object_dealloc () from /home/ahcorde/ros2_galactic/build/rclpy/test_rclpy/_rclpy_pybind11.cpython-38-x86_64-linux-gnu.so
Do you mind to have a look @hidmic or @sloretz ?
Signed-off-by: ahcorde ahcorde@gmail.com","Thank for retargeting the PR, merging!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,757,2021-04-06T18:52:49Z,2021-04-07T07:22:50Z,2021-04-07T07:22:53Z,MERGED,True,20,27,15,https://github.com/sloretz,[pub/sub 756 addition] use std::shared_ptr holder type and shared_from_this,3,[],https://github.com/ros2/rclpy/pull/757,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/757,"Opening a PR for comment on top of #756. I think this fixes #756 (review) and #756 (comment)
This changes the holder type of Destroyable subclasses use std::shared_ptr and makes the subclasses of Destroyable use enable_shared_from_this. This allows classes like QoSEvent to keep a shared_ptr to the publisher or subscription wrapper type without creating a copy of those instances.
Opening as draft because I think I should make a bug fix PR applying these changes to Timer/Clock.","Opening a PR for comment on top of #756. I think this fixes #756 (review) and #756 (comment)
This changes the holder type of Destroyable subclasses use std::shared_ptr and makes the subclasses of Destroyable use enable_shared_from_this. This allows classes like QoSEvent to keep a shared_ptr to the publisher or subscription wrapper type without creating a copy of those instances.
Opening as draft because I think I should make a bug fix PR applying these changes to Timer/Clock.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,757,2021-04-06T18:52:49Z,2021-04-07T07:22:50Z,2021-04-07T07:22:53Z,MERGED,True,20,27,15,https://github.com/sloretz,[pub/sub 756 addition] use std::shared_ptr holder type and shared_from_this,3,[],https://github.com/ros2/rclpy/pull/757,https://github.com/ahcorde,2,https://github.com/ros2/rclpy/pull/757#issuecomment-814428206,"Opening a PR for comment on top of #756. I think this fixes #756 (review) and #756 (comment)
This changes the holder type of Destroyable subclasses use std::shared_ptr and makes the subclasses of Destroyable use enable_shared_from_this. This allows classes like QoSEvent to keep a shared_ptr to the publisher or subscription wrapper type without creating a copy of those instances.
Opening as draft because I think I should make a bug fix PR applying these changes to Timer/Clock.",thank you @sloretz This PR fixes the issues with the destructors ( at least locally ). Happy to merge it on my PR,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,757,2021-04-06T18:52:49Z,2021-04-07T07:22:50Z,2021-04-07T07:22:53Z,MERGED,True,20,27,15,https://github.com/sloretz,[pub/sub 756 addition] use std::shared_ptr holder type and shared_from_this,3,[],https://github.com/ros2/rclpy/pull/757,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/757#issuecomment-814445874,"Opening a PR for comment on top of #756. I think this fixes #756 (review) and #756 (comment)
This changes the holder type of Destroyable subclasses use std::shared_ptr and makes the subclasses of Destroyable use enable_shared_from_this. This allows classes like QoSEvent to keep a shared_ptr to the publisher or subscription wrapper type without creating a copy of those instances.
Opening as draft because I think I should make a bug fix PR applying these changes to Timer/Clock.","Happy to merge it on my PR

@ahcorde awesome :) I pushed another commit to update the Timer use the clock wrapper too in 8a75498. I'd be happy to close #758 and do that fix in #756 instead.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,758,2021-04-06T19:08:03Z,2021-04-06T21:18:20Z,2021-04-06T21:18:24Z,CLOSED,False,14,21,11,https://github.com/sloretz,Use `std::shared_ptr` holder type for Destroyable subsclasses to keep grandparent wrapper instances alive,3,[],https://github.com/ros2/rclpy/pull/758,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/758,"Part of #665 - alternative to #757
This makes Destroyable subclasses use the std::shared_ptr holder type and use shared_from this. This allows classes to keep the parent wrapper instance alive so that grandparent's are kept alive too.
Since clock has no grandparent types, there isn't actually an issue in master - it's not until #756 adds Publisher and Subscription that it becomes an issue.. Maybe it's fine to leave this as is, and include this fix via #757 to #756?","Part of #665 - alternative to #757
This makes Destroyable subclasses use the std::shared_ptr holder type and use shared_from this. This allows classes to keep the parent wrapper instance alive so that grandparent's are kept alive too.
Since clock has no grandparent types, there isn't actually an issue in master - it's not until #756 adds Publisher and Subscription that it becomes an issue.. Maybe it's fine to leave this as is, and include this fix via #757 to #756?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,758,2021-04-06T19:08:03Z,2021-04-06T21:18:20Z,2021-04-06T21:18:24Z,CLOSED,False,14,21,11,https://github.com/sloretz,Use `std::shared_ptr` holder type for Destroyable subsclasses to keep grandparent wrapper instances alive,3,[],https://github.com/ros2/rclpy/pull/758,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/758#issuecomment-814446203,"Part of #665 - alternative to #757
This makes Destroyable subclasses use the std::shared_ptr holder type and use shared_from this. This allows classes to keep the parent wrapper instance alive so that grandparent's are kept alive too.
Since clock has no grandparent types, there isn't actually an issue in master - it's not until #756 adds Publisher and Subscription that it becomes an issue.. Maybe it's fine to leave this as is, and include this fix via #757 to #756?",Closing in favor of #757 which will hopefully be merged or included into #756,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,759,2021-04-07T09:29:03Z,2021-04-12T15:13:00Z,2021-04-12T15:13:04Z,MERGED,True,632,275,7,https://github.com/ahcorde,Convert ActionClient to use C++ classes,10,['enhancement'],https://github.com/ros2/rclpy/pull/759,https://github.com/ahcorde,1,https://github.com/ros2/rclpy/pull/759,"Related to #665
This converts the ActionClient functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com","Related to #665
This converts the ActionClient functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,759,2021-04-07T09:29:03Z,2021-04-12T15:13:00Z,2021-04-12T15:13:04Z,MERGED,True,632,275,7,https://github.com/ahcorde,Convert ActionClient to use C++ classes,10,['enhancement'],https://github.com/ros2/rclpy/pull/759,https://github.com/ahcorde,2,https://github.com/ros2/rclpy/pull/759#issuecomment-814790131,"Related to #665
This converts the ActionClient functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com",Tests will be green when this other PR #756 is in,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,759,2021-04-07T09:29:03Z,2021-04-12T15:13:00Z,2021-04-12T15:13:04Z,MERGED,True,632,275,7,https://github.com/ahcorde,Convert ActionClient to use C++ classes,10,['enhancement'],https://github.com/ros2/rclpy/pull/759,https://github.com/ahcorde,3,https://github.com/ros2/rclpy/pull/759#issuecomment-815508620,"Related to #665
This converts the ActionClient functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,759,2021-04-07T09:29:03Z,2021-04-12T15:13:00Z,2021-04-12T15:13:04Z,MERGED,True,632,275,7,https://github.com/ahcorde,Convert ActionClient to use C++ classes,10,['enhancement'],https://github.com/ros2/rclpy/pull/759,https://github.com/ahcorde,4,https://github.com/ros2/rclpy/pull/759#issuecomment-816458265,"Related to #665
This converts the ActionClient functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,759,2021-04-07T09:29:03Z,2021-04-12T15:13:00Z,2021-04-12T15:13:04Z,MERGED,True,632,275,7,https://github.com/ahcorde,Convert ActionClient to use C++ classes,10,['enhancement'],https://github.com/ros2/rclpy/pull/759,https://github.com/ahcorde,5,https://github.com/ros2/rclpy/pull/759#issuecomment-817580459,"Related to #665
This converts the ActionClient functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com","compiling up-to rclpyand testing rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,759,2021-04-07T09:29:03Z,2021-04-12T15:13:00Z,2021-04-12T15:13:04Z,MERGED,True,632,275,7,https://github.com/ahcorde,Convert ActionClient to use C++ classes,10,['enhancement'],https://github.com/ros2/rclpy/pull/759,https://github.com/ahcorde,6,https://github.com/ros2/rclpy/pull/759#issuecomment-817790751,"Related to #665
This converts the ActionClient functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,761,2021-04-07T22:17:44Z,2021-04-08T16:17:17Z,2021-04-08T16:17:20Z,MERGED,True,23,3,3,https://github.com/sloretz,Fix segfault by adding __enter__ and __exit__ to Waitable,1,['bug'],https://github.com/ros2/rclpy/pull/761,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/761,"Fixes #760
Also make QoS event waitable use it. This fixes a crash when another
thread is spinning on a destroyed subscription using cyclonedds.
I was never able to reproduce the crash with rqt_console, but I can confirm it fixes the crash with this MRE #760 (comment)","Fixes #760
Also make QoS event waitable use it. This fixes a crash when another
thread is spinning on a destroyed subscription using cyclonedds.
I was never able to reproduce the crash with rqt_console, but I can confirm it fixes the crash with this MRE #760 (comment)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,761,2021-04-07T22:17:44Z,2021-04-08T16:17:17Z,2021-04-08T16:17:20Z,MERGED,True,23,3,3,https://github.com/sloretz,Fix segfault by adding __enter__ and __exit__ to Waitable,1,['bug'],https://github.com/ros2/rclpy/pull/761,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/761#issuecomment-815303956,"Fixes #760
Also make QoS event waitable use it. This fixes a crash when another
thread is spinning on a destroyed subscription using cyclonedds.
I was never able to reproduce the crash with rqt_console, but I can confirm it fixes the crash with this MRE #760 (comment)","CI (build: --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,761,2021-04-07T22:17:44Z,2021-04-08T16:17:17Z,2021-04-08T16:17:20Z,MERGED,True,23,3,3,https://github.com/sloretz,Fix segfault by adding __enter__ and __exit__ to Waitable,1,['bug'],https://github.com/ros2/rclpy/pull/761,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/761#issuecomment-815306398,"Fixes #760
Also make QoS event waitable use it. This fixes a crash when another
thread is spinning on a destroyed subscription using cyclonedds.
I was never able to reproduce the crash with rqt_console, but I can confirm it fixes the crash with this MRE #760 (comment)","As an FYI, I was able to reproduce the problem with the rqt_console plugin, and this seems to solve it for me.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,761,2021-04-07T22:17:44Z,2021-04-08T16:17:17Z,2021-04-08T16:17:20Z,MERGED,True,23,3,3,https://github.com/sloretz,Fix segfault by adding __enter__ and __exit__ to Waitable,1,['bug'],https://github.com/ros2/rclpy/pull/761,https://github.com/clalancette,4,https://github.com/ros2/rclpy/pull/761#issuecomment-815310346,"Fixes #760
Also make QoS event waitable use it. This fixes a crash when another
thread is spinning on a destroyed subscription using cyclonedds.
I was never able to reproduce the crash with rqt_console, but I can confirm it fixes the crash with this MRE #760 (comment)",@sloretz Do you think this will also fix #762 ?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,761,2021-04-07T22:17:44Z,2021-04-08T16:17:17Z,2021-04-08T16:17:20Z,MERGED,True,23,3,3,https://github.com/sloretz,Fix segfault by adding __enter__ and __exit__ to Waitable,1,['bug'],https://github.com/ros2/rclpy/pull/761,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/761#issuecomment-815314161,"Fixes #760
Also make QoS event waitable use it. This fixes a crash when another
thread is spinning on a destroyed subscription using cyclonedds.
I was never able to reproduce the crash with rqt_console, but I can confirm it fixes the crash with this MRE #760 (comment)","@sloretz Do you think this will also fix #762 ?

It seems likely based on the investigation done on it.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,761,2021-04-07T22:17:44Z,2021-04-08T16:17:17Z,2021-04-08T16:17:20Z,MERGED,True,23,3,3,https://github.com/sloretz,Fix segfault by adding __enter__ and __exit__ to Waitable,1,['bug'],https://github.com/ros2/rclpy/pull/761,https://github.com/sloretz,6,https://github.com/ros2/rclpy/pull/761#issuecomment-815957913,"Fixes #760
Also make QoS event waitable use it. This fixes a crash when another
thread is spinning on a destroyed subscription using cyclonedds.
I was never able to reproduce the crash with rqt_console, but I can confirm it fixes the crash with this MRE #760 (comment)","2 approvals and green CI, merging 🎉",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,764,2021-04-09T06:57:41Z,2021-04-09T14:33:12Z,2021-04-09T14:33:12Z,MERGED,True,1,1,1,https://github.com/asorbini,Use correct type when creating test publisher,1,[],https://github.com/ros2/rclpy/pull/764,https://github.com/asorbini,1,https://github.com/ros2/rclpy/pull/764,This PR fixes test_serialized_publish from test_messages.py. The test creates a publisher for type BasicTypes but then tries to publish a message of type Strings.,This PR fixes test_serialized_publish from test_messages.py. The test creates a publisher for type BasicTypes but then tries to publish a message of type Strings.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,764,2021-04-09T06:57:41Z,2021-04-09T14:33:12Z,2021-04-09T14:33:12Z,MERGED,True,1,1,1,https://github.com/asorbini,Use correct type when creating test publisher,1,[],https://github.com/ros2/rclpy/pull/764,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/764#issuecomment-816638516,This PR fixes test_serialized_publish from test_messages.py. The test creates a publisher for type BasicTypes but then tries to publish a message of type Strings.,"CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,764,2021-04-09T06:57:41Z,2021-04-09T14:33:12Z,2021-04-09T14:33:12Z,MERGED,True,1,1,1,https://github.com/asorbini,Use correct type when creating test publisher,1,[],https://github.com/ros2/rclpy/pull/764,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/764#issuecomment-816672635,This PR fixes test_serialized_publish from test_messages.py. The test creates a publisher for type BasicTypes but then tries to publish a message of type Strings.,The compiler warnings are unrelated to this PR.  This just needs one more review and then we can merge it.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,765,2021-04-09T07:28:57Z,2021-04-09T20:13:24Z,2021-04-09T20:13:24Z,MERGED,True,10,0,2,https://github.com/asorbini,Restore exceptions for Connext and message timestamps on Windows,2,[],https://github.com/ros2/rclpy/pull/765,https://github.com/asorbini,1,https://github.com/ros2/rclpy/pull/765,"This PR restores some test exceptions in test_client.py and test_node.py to skip tests which check message timestamps on Windows.
These exceptions were removed in the process of replacing rmw_connext_cpp with rmw_connextdds, but they should have been kept for Windows, since timestamps are currently not supported on this platform.","This PR restores some test exceptions in test_client.py and test_node.py to skip tests which check message timestamps on Windows.
These exceptions were removed in the process of replacing rmw_connext_cpp with rmw_connextdds, but they should have been kept for Windows, since timestamps are currently not supported on this platform.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,765,2021-04-09T07:28:57Z,2021-04-09T20:13:24Z,2021-04-09T20:13:24Z,MERGED,True,10,0,2,https://github.com/asorbini,Restore exceptions for Connext and message timestamps on Windows,2,[],https://github.com/ros2/rclpy/pull/765,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/765#issuecomment-816675813,"This PR restores some test exceptions in test_client.py and test_node.py to skip tests which check message timestamps on Windows.
These exceptions were removed in the process of replacing rmw_connext_cpp with rmw_connextdds, but they should have been kept for Windows, since timestamps are currently not supported on this platform.","How are these tests passing in CI right now?  For instance, https://ci.ros2.org/view/nightly/job/nightly_win_rel/1898/ only shows a failure in rcl, but no failures in rclpy.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,765,2021-04-09T07:28:57Z,2021-04-09T20:13:24Z,2021-04-09T20:13:24Z,MERGED,True,10,0,2,https://github.com/asorbini,Restore exceptions for Connext and message timestamps on Windows,2,[],https://github.com/ros2/rclpy/pull/765,https://github.com/asorbini,3,https://github.com/ros2/rclpy/pull/765#issuecomment-816778777,"This PR restores some test exceptions in test_client.py and test_node.py to skip tests which check message timestamps on Windows.
These exceptions were removed in the process of replacing rmw_connext_cpp with rmw_connextdds, but they should have been kept for Windows, since timestamps are currently not supported on this platform.","Similarly to rclcpp#1625, these tests also run only with the default RMW implementation.",True,{'THUMBS_UP': ['https://github.com/clalancette']}
ros2/rclpy,https://github.com/ros2/rclpy,765,2021-04-09T07:28:57Z,2021-04-09T20:13:24Z,2021-04-09T20:13:24Z,MERGED,True,10,0,2,https://github.com/asorbini,Restore exceptions for Connext and message timestamps on Windows,2,[],https://github.com/ros2/rclpy/pull/765,https://github.com/asorbini,4,https://github.com/ros2/rclpy/pull/765#issuecomment-816798901,"This PR restores some test exceptions in test_client.py and test_node.py to skip tests which check message timestamps on Windows.
These exceptions were removed in the process of replacing rmw_connext_cpp with rmw_connextdds, but they should have been kept for Windows, since timestamps are currently not supported on this platform.",See this comment for CI results including this PR,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,765,2021-04-09T07:28:57Z,2021-04-09T20:13:24Z,2021-04-09T20:13:24Z,MERGED,True,10,0,2,https://github.com/asorbini,Restore exceptions for Connext and message timestamps on Windows,2,[],https://github.com/ros2/rclpy/pull/765,https://github.com/asorbini,5,https://github.com/ros2/rclpy/pull/765#issuecomment-816898966,"This PR restores some test exceptions in test_client.py and test_node.py to skip tests which check message timestamps on Windows.
These exceptions were removed in the process of replacing rmw_connext_cpp with rmw_connextdds, but they should have been kept for Windows, since timestamps are currently not supported on this platform.",Looks like I have to move the import platform around (https://ci.ros2.org/job/ci_linux/14324/testReport/rclpy/flake8/I100____test_test_client_py_17_1_/). I'll push that change in a sec,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,765,2021-04-09T07:28:57Z,2021-04-09T20:13:24Z,2021-04-09T20:13:24Z,MERGED,True,10,0,2,https://github.com/asorbini,Restore exceptions for Connext and message timestamps on Windows,2,[],https://github.com/ros2/rclpy/pull/765,https://github.com/ivanpauno,6,https://github.com/ros2/rclpy/pull/765#issuecomment-816901583,"This PR restores some test exceptions in test_client.py and test_node.py to skip tests which check message timestamps on Windows.
These exceptions were removed in the process of replacing rmw_connext_cpp with rmw_connextdds, but they should have been kept for Windows, since timestamps are currently not supported on this platform.","Looks like I have to move the import platform around (https://ci.ros2.org/job/ci_linux/14324/testReport/rclpy/flake8/I100____test_test_client_py_17_1_/). I'll push that change in a sec

Yes, imports go in alpha order.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,765,2021-04-09T07:28:57Z,2021-04-09T20:13:24Z,2021-04-09T20:13:24Z,MERGED,True,10,0,2,https://github.com/asorbini,Restore exceptions for Connext and message timestamps on Windows,2,[],https://github.com/ros2/rclpy/pull/765,https://github.com/asorbini,7,https://github.com/ros2/rclpy/pull/765#issuecomment-816918814,"This PR restores some test exceptions in test_client.py and test_node.py to skip tests which check message timestamps on Windows.
These exceptions were removed in the process of replacing rmw_connext_cpp with rmw_connextdds, but they should have been kept for Windows, since timestamps are currently not supported on this platform.","Should be fixed now (759bf90). Strange that it wasn't caught by Rpr__rclpy__ubuntu_focal_amd64:
00:33:54 45: -- run_test.py: verify result file '/tmp/ws/test_results/rclpy/flake8.xunit.xml'
00:33:54 45/49 Test #45: flake8 ............................   Passed    1.82 sec",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,765,2021-04-09T07:28:57Z,2021-04-09T20:13:24Z,2021-04-09T20:13:24Z,MERGED,True,10,0,2,https://github.com/asorbini,Restore exceptions for Connext and message timestamps on Windows,2,[],https://github.com/ros2/rclpy/pull/765,https://github.com/ivanpauno,8,https://github.com/ros2/rclpy/pull/765#issuecomment-816928930,"This PR restores some test exceptions in test_client.py and test_node.py to skip tests which check message timestamps on Windows.
These exceptions were removed in the process of replacing rmw_connext_cpp with rmw_connextdds, but they should have been kept for Windows, since timestamps are currently not supported on this platform.","Should be fixed now (759bf90). Strange that it wasn't caught by Rpr__rclpy__ubuntu_focal_amd64:

Yes, I really don't know why.
Just in case, another CI run with the last commit in (only testing rclpy):

ci_linux:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,766,2021-04-09T09:31:24Z,2021-04-14T15:22:33Z,2021-04-19T16:47:38Z,MERGED,True,711,857,7,https://github.com/ahcorde,Convert ActionServer to use C++ Classes,5,['enhancement'],https://github.com/ros2/rclpy/pull/766,https://github.com/ahcorde,1,https://github.com/ros2/rclpy/pull/766,"Related to #665
This converts the Action Server functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com","Related to #665
This converts the Action Server functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,766,2021-04-09T09:31:24Z,2021-04-14T15:22:33Z,2021-04-19T16:47:38Z,MERGED,True,711,857,7,https://github.com/ahcorde,Convert ActionServer to use C++ Classes,5,['enhancement'],https://github.com/ros2/rclpy/pull/766,https://github.com/ahcorde,2,https://github.com/ros2/rclpy/pull/766#issuecomment-816556187,"Related to #665
This converts the Action Server functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com","I created this as a Draft PR because I have some issues.

 This method ActionServer::publish_feedback is creating an empty feedback message which makes the test to fail
 test_action_client test is blocked",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,766,2021-04-09T09:31:24Z,2021-04-14T15:22:33Z,2021-04-19T16:47:38Z,MERGED,True,711,857,7,https://github.com/ahcorde,Convert ActionServer to use C++ Classes,5,['enhancement'],https://github.com/ros2/rclpy/pull/766,https://github.com/ahcorde,3,https://github.com/ros2/rclpy/pull/766#issuecomment-816690991,"Related to #665
This converts the Action Server functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com","ActionServer tests are fixed, but I still have the issue with test_action_client",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,766,2021-04-09T09:31:24Z,2021-04-14T15:22:33Z,2021-04-19T16:47:38Z,MERGED,True,711,857,7,https://github.com/ahcorde,Convert ActionServer to use C++ Classes,5,['enhancement'],https://github.com/ros2/rclpy/pull/766,https://github.com/ahcorde,4,https://github.com/ros2/rclpy/pull/766#issuecomment-817998256,"Related to #665
This converts the Action Server functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com",@hidmic This is ready for review,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,766,2021-04-09T09:31:24Z,2021-04-14T15:22:33Z,2021-04-19T16:47:38Z,MERGED,True,711,857,7,https://github.com/ahcorde,Convert ActionServer to use C++ Classes,5,['enhancement'],https://github.com/ros2/rclpy/pull/766,https://github.com/ahcorde,5,https://github.com/ros2/rclpy/pull/766#issuecomment-819310999,"Related to #665
This converts the Action Server functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,767,2021-04-09T17:01:38Z,2021-04-16T16:39:55Z,2021-04-16T16:39:58Z,MERGED,True,15,12,1,https://github.com/sloretz,Pybind11 action goal handle nitpicks,4,[],https://github.com/ros2/rclpy/pull/767,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/767,"Part of #665
This fixes some review comments I posted after #751 got merged

Add back GoalEvent as an attribute on action/server.py
self._goal -> self._goal_handle
Remove unused API rclpy_action_accept_new_goal","Part of #665
This fixes some review comments I posted after #751 got merged

Add back GoalEvent as an attribute on action/server.py
self._goal -> self._goal_handle
Remove unused API rclpy_action_accept_new_goal",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,767,2021-04-09T17:01:38Z,2021-04-16T16:39:55Z,2021-04-16T16:39:58Z,MERGED,True,15,12,1,https://github.com/sloretz,Pybind11 action goal handle nitpicks,4,[],https://github.com/ros2/rclpy/pull/767,https://github.com/ahcorde,2,https://github.com/ros2/rclpy/pull/767#issuecomment-817576571,"Part of #665
This fixes some review comments I posted after #751 got merged

Add back GoalEvent as an attribute on action/server.py
self._goal -> self._goal_handle
Remove unused API rclpy_action_accept_new_goal","compilint up-to rclpy and testing rclpy

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,767,2021-04-09T17:01:38Z,2021-04-16T16:39:55Z,2021-04-16T16:39:58Z,MERGED,True,15,12,1,https://github.com/sloretz,Pybind11 action goal handle nitpicks,4,[],https://github.com/ros2/rclpy/pull/767,https://github.com/ahcorde,3,https://github.com/ros2/rclpy/pull/767#issuecomment-820311071,"Part of #665
This fixes some review comments I posted after #751 got merged

Add back GoalEvent as an attribute on action/server.py
self._goal -> self._goal_handle
Remove unused API rclpy_action_accept_new_goal","building up-to rclpy and testing rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,768,2021-04-11T05:11:49Z,2021-04-12T13:21:11Z,2021-04-12T13:21:32Z,MERGED,True,1,1,1,https://github.com/fujitatomoya,typo fix.,1,[],https://github.com/ros2/rclpy/pull/768,https://github.com/fujitatomoya,1,https://github.com/ros2/rclpy/pull/768,Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com,Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,768,2021-04-11T05:11:49Z,2021-04-12T13:21:11Z,2021-04-12T13:21:32Z,MERGED,True,1,1,1,https://github.com/fujitatomoya,typo fix.,1,[],https://github.com/ros2/rclpy/pull/768,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/768#issuecomment-817249279,Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com,"@audrow just a typo fix, could you help to merge this?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,768,2021-04-11T05:11:49Z,2021-04-12T13:21:11Z,2021-04-12T13:21:32Z,MERGED,True,1,1,1,https://github.com/fujitatomoya,typo fix.,1,[],https://github.com/ros2/rclpy/pull/768,https://github.com/ahcorde,3,https://github.com/ros2/rclpy/pull/768#issuecomment-817574953,Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com,"compiling up-to rclpy and testing rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,768,2021-04-11T05:11:49Z,2021-04-12T13:21:11Z,2021-04-12T13:21:32Z,MERGED,True,1,1,1,https://github.com/fujitatomoya,typo fix.,1,[],https://github.com/ros2/rclpy/pull/768,https://github.com/fujitatomoya,4,https://github.com/ros2/rclpy/pull/768#issuecomment-817806662,Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com,@ahcorde thanks for the review and CI 👍,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,769,2021-04-14T15:40:28Z,2021-04-14T18:44:42Z,2021-04-14T18:44:45Z,MERGED,True,340,379,11,https://github.com/ahcorde,Convert WaitSet to use C++ Classes,2,['enhancement'],https://github.com/ros2/rclpy/pull/769,https://github.com/ahcorde,1,https://github.com/ros2/rclpy/pull/769,"Related to #665
This converts the WaitSet functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com","Related to #665
This converts the WaitSet functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,769,2021-04-14T15:40:28Z,2021-04-14T18:44:42Z,2021-04-14T18:44:45Z,MERGED,True,340,379,11,https://github.com/ahcorde,Convert WaitSet to use C++ Classes,2,['enhancement'],https://github.com/ros2/rclpy/pull/769,https://github.com/ahcorde,2,https://github.com/ros2/rclpy/pull/769#issuecomment-819720116,"Related to #665
This converts the WaitSet functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com","compiling up-to rclpy and testing rclpy

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,770,2021-04-15T09:38:14Z,2021-04-15T14:58:26Z,2021-04-15T14:58:29Z,MERGED,True,0,18,1,https://github.com/ahcorde,Removed unused structs,1,['enhancement'],https://github.com/ros2/rclpy/pull/770,https://github.com/ahcorde,1,https://github.com/ros2/rclpy/pull/770,"Removed unused structs. These structs were replaced by C++ Classes
Signed-off-by: ahcorde ahcorde@gmail.com","Removed unused structs. These structs were replaced by C++ Classes
Signed-off-by: ahcorde ahcorde@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,770,2021-04-15T09:38:14Z,2021-04-15T14:58:26Z,2021-04-15T14:58:29Z,MERGED,True,0,18,1,https://github.com/ahcorde,Removed unused structs,1,['enhancement'],https://github.com/ros2/rclpy/pull/770,https://github.com/ahcorde,2,https://github.com/ros2/rclpy/pull/770#issuecomment-820284316,"Removed unused structs. These structs were replaced by C++ Classes
Signed-off-by: ahcorde ahcorde@gmail.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,771,2021-04-15T16:36:48Z,2021-04-28T15:41:35Z,2021-04-28T15:41:38Z,MERGED,True,944,1404,57,https://github.com/ahcorde,Convert Node and Context to use C++ Classes,12,['enhancement'],https://github.com/ros2/rclpy/pull/771,https://github.com/ahcorde,1,https://github.com/ros2/rclpy/pull/771,"Related to #665
This converts the Node and Context functions to a C++ class.
This PR depends on this other PR #728 and include the changes of this branch about GuardCondition to use C++ classes.
There is one test which is failing:

test_declare_qos_parameters_with_unhappy_callback

I will create this as a draft, we need to decide if we are going to backport the signal PR or find a workaround.","Related to #665
This converts the Node and Context functions to a C++ class.
This PR depends on this other PR #728 and include the changes of this branch about GuardCondition to use C++ classes.
There is one test which is failing:

test_declare_qos_parameters_with_unhappy_callback

I will create this as a draft, we need to decide if we are going to backport the signal PR or find a workaround.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,771,2021-04-15T16:36:48Z,2021-04-28T15:41:35Z,2021-04-28T15:41:38Z,MERGED,True,944,1404,57,https://github.com/ahcorde,Convert Node and Context to use C++ Classes,12,['enhancement'],https://github.com/ros2/rclpy/pull/771,https://github.com/ahcorde,2,https://github.com/ros2/rclpy/pull/771#issuecomment-821307450,"Related to #665
This converts the Node and Context functions to a C++ class.
This PR depends on this other PR #728 and include the changes of this branch about GuardCondition to use C++ classes.
There is one test which is failing:

test_declare_qos_parameters_with_unhappy_callback

I will create this as a draft, we need to decide if we are going to backport the signal PR or find a workaround.","The GuardCondition PR is in, I open this PR for review.
The test test_declare_qos_parameters_with_unhappy_callback is still failing:, do you mind to have a look @hidmic ?",True,{'THUMBS_UP': ['https://github.com/hidmic']}
ros2/rclpy,https://github.com/ros2/rclpy,771,2021-04-15T16:36:48Z,2021-04-28T15:41:35Z,2021-04-28T15:41:38Z,MERGED,True,944,1404,57,https://github.com/ahcorde,Convert Node and Context to use C++ Classes,12,['enhancement'],https://github.com/ros2/rclpy/pull/771,https://github.com/ahcorde,3,https://github.com/ros2/rclpy/pull/771#issuecomment-825572110,"Related to #665
This converts the Node and Context functions to a C++ class.
This PR depends on this other PR #728 and include the changes of this branch about GuardCondition to use C++ classes.
There is one test which is failing:

test_declare_qos_parameters_with_unhappy_callback

I will create this as a draft, we need to decide if we are going to backport the signal PR or find a workaround.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,771,2021-04-15T16:36:48Z,2021-04-28T15:41:35Z,2021-04-28T15:41:38Z,MERGED,True,944,1404,57,https://github.com/ahcorde,Convert Node and Context to use C++ Classes,12,['enhancement'],https://github.com/ros2/rclpy/pull/771,https://github.com/ahcorde,4,https://github.com/ros2/rclpy/pull/771#issuecomment-825584084,"Related to #665
This converts the Node and Context functions to a C++ class.
This PR depends on this other PR #728 and include the changes of this branch about GuardCondition to use C++ classes.
There is one test which is failing:

test_declare_qos_parameters_with_unhappy_callback

I will create this as a draft, we need to decide if we are going to backport the signal PR or find a workaround.","@sloretz, what about the other functions in rclpy that also take a node as the first argument? for example in names.hpp or graph.cpp. Should I move them to the Node class?

This comment is still pending, what do you think @sloretz ?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,771,2021-04-15T16:36:48Z,2021-04-28T15:41:35Z,2021-04-28T15:41:38Z,MERGED,True,944,1404,57,https://github.com/ahcorde,Convert Node and Context to use C++ Classes,12,['enhancement'],https://github.com/ros2/rclpy/pull/771,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/771#issuecomment-825780476,"Related to #665
This converts the Node and Context functions to a C++ class.
This PR depends on this other PR #728 and include the changes of this branch about GuardCondition to use C++ classes.
There is one test which is failing:

test_declare_qos_parameters_with_unhappy_callback

I will create this as a draft, we need to decide if we are going to backport the signal PR or find a workaround.","@sloretz, what about the other functions in rclpy that also take a node as the first argument? for example in names.hpp or graph.cpp. Should I move them to the Node class?

I think those are fine actually. I would like to get rid of the _rcl_action.cpp file, but I think I was wrong to say everything should be a method on the Node. Maybe some of the action functions could be moved to names.hpp or graph.hpp themselves?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,771,2021-04-15T16:36:48Z,2021-04-28T15:41:35Z,2021-04-28T15:41:38Z,MERGED,True,944,1404,57,https://github.com/ahcorde,Convert Node and Context to use C++ Classes,12,['enhancement'],https://github.com/ros2/rclpy/pull/771,https://github.com/ahcorde,6,https://github.com/ros2/rclpy/pull/771#issuecomment-826586788,"Related to #665
This converts the Node and Context functions to a C++ class.
This PR depends on this other PR #728 and include the changes of this branch about GuardCondition to use C++ classes.
There is one test which is failing:

test_declare_qos_parameters_with_unhappy_callback

I will create this as a draft, we need to decide if we are going to backport the signal PR or find a workaround.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,771,2021-04-15T16:36:48Z,2021-04-28T15:41:35Z,2021-04-28T15:41:38Z,MERGED,True,944,1404,57,https://github.com/ahcorde,Convert Node and Context to use C++ Classes,12,['enhancement'],https://github.com/ros2/rclpy/pull/771,https://github.com/ahcorde,7,https://github.com/ros2/rclpy/pull/771#issuecomment-827457712,"Related to #665
This converts the Node and Context functions to a C++ class.
This PR depends on this other PR #728 and include the changes of this branch about GuardCondition to use C++ classes.
There is one test which is failing:

test_declare_qos_parameters_with_unhappy_callback

I will create this as a draft, we need to decide if we are going to backport the signal PR or find a workaround.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,771,2021-04-15T16:36:48Z,2021-04-28T15:41:35Z,2021-04-28T15:41:38Z,MERGED,True,944,1404,57,https://github.com/ahcorde,Convert Node and Context to use C++ Classes,12,['enhancement'],https://github.com/ros2/rclpy/pull/771,https://github.com/ahcorde,8,https://github.com/ros2/rclpy/pull/771#issuecomment-828220382,"Related to #665
This converts the Node and Context functions to a C++ class.
This PR depends on this other PR #728 and include the changes of this branch about GuardCondition to use C++ classes.
There is one test which is failing:

test_declare_qos_parameters_with_unhappy_callback

I will create this as a draft, we need to decide if we are going to backport the signal PR or find a workaround.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,772,2021-04-15T20:18:26Z,2021-04-16T16:29:32Z,2021-04-16T16:29:34Z,MERGED,True,151,110,9,https://github.com/ahcorde,Convert Guardcondition to use C++ classes,2,['enhancement'],https://github.com/ros2/rclpy/pull/772,https://github.com/ahcorde,1,https://github.com/ros2/rclpy/pull/772,"Related to #665
This converts the GuardCondition functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com","Related to #665
This converts the GuardCondition functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,772,2021-04-15T20:18:26Z,2021-04-16T16:29:32Z,2021-04-16T16:29:34Z,MERGED,True,151,110,9,https://github.com/ahcorde,Convert Guardcondition to use C++ classes,2,['enhancement'],https://github.com/ros2/rclpy/pull/772,https://github.com/ahcorde,2,https://github.com/ros2/rclpy/pull/772#issuecomment-820980933,"Related to #665
This converts the GuardCondition functions to a C++ class.
Signed-off-by: ahcorde ahcorde@gmail.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,773,2021-04-22T22:24:50Z,2021-04-23T10:40:28Z,2021-04-23T10:40:31Z,MERGED,True,157,250,29,https://github.com/sloretz,Intentionally copy rclpy:: objects instead of having RclPtrs structs,3,[],https://github.com/ros2/rclpy/pull/773,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/773,"This is an alternative to https://github.com/ros2/rclpy/compare/ahcorde/pybind11-node...ahcorde/pybind11-node_option2?expand=1
It implementions option2 from this comment: #771 (comment)
part of #665 via part of #771
This PR intentionally copies the rclpy::Node, rclpy::Context, etc ... classes instead of copying a shared_ptr to an rclpy::*::RclPtrs struct.
The interesting things in this PR are:

Lamdas passed as deleters for shared_ptr<rcl_*_t> types must not capture this, because that will always be the pointer to the original instance, but the struct might finally be deleted by a copy instead. Capturing the variables they need (node in all cases) by value solved this in all cases.
test_qos_event circumvents the node API to create the events it's testing, meaning the Python Publisher instance doesn't have a record of the events existing, so it can't destroy it when the Python Publisher is destroyed. Now that the QoSEvent properly keeps the publisher and therefore the node alive it was possible for data to leak between tests. calling gc.collect() in TearDown is a quick fix for this.
The parent entity must always be higher in the class than the child entity (see guard_condition.hpp where context_ was moved above the rcl_guard_condition_t member).
rcl_*_t pointers need to be shared_ptr instead of unique_ptr so they can be shared with and kept alive by copies in their children.
I used std::variant<Publisher, Subscription> in QoSEvent ... for fun
rclpy::WaitSet doesn't need a default constructor
action_goal_handle should keep the action_server alive
a couple typo fixes in comments","This is an alternative to https://github.com/ros2/rclpy/compare/ahcorde/pybind11-node...ahcorde/pybind11-node_option2?expand=1
It implementions option2 from this comment: #771 (comment)
part of #665 via part of #771
This PR intentionally copies the rclpy::Node, rclpy::Context, etc ... classes instead of copying a shared_ptr to an rclpy::*::RclPtrs struct.
The interesting things in this PR are:

Lamdas passed as deleters for shared_ptr<rcl_*_t> types must not capture this, because that will always be the pointer to the original instance, but the struct might finally be deleted by a copy instead. Capturing the variables they need (node in all cases) by value solved this in all cases.
test_qos_event circumvents the node API to create the events it's testing, meaning the Python Publisher instance doesn't have a record of the events existing, so it can't destroy it when the Python Publisher is destroyed. Now that the QoSEvent properly keeps the publisher and therefore the node alive it was possible for data to leak between tests. calling gc.collect() in TearDown is a quick fix for this.
The parent entity must always be higher in the class than the child entity (see guard_condition.hpp where context_ was moved above the rcl_guard_condition_t member).
rcl_*_t pointers need to be shared_ptr instead of unique_ptr so they can be shared with and kept alive by copies in their children.
I used std::variant<Publisher, Subscription> in QoSEvent ... for fun
rclpy::WaitSet doesn't need a default constructor
action_goal_handle should keep the action_server alive
a couple typo fixes in comments",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,774,2021-04-23T11:08:17Z,2021-04-26T06:40:49Z,2021-04-26T06:40:52Z,MERGED,True,25,42,12,https://github.com/ahcorde,Pybind11 actionserver nitpicks and docblock improvements,1,[],https://github.com/ros2/rclpy/pull/774,https://github.com/ahcorde,1,https://github.com/ros2/rclpy/pull/774,"related with the post-merge comments in this PR #766

use of append_rcl_error
improved documentation

Signed-off-by: ahcorde ahcorde@gmail.com","related with the post-merge comments in this PR #766

use of append_rcl_error
improved documentation

Signed-off-by: ahcorde ahcorde@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,774,2021-04-23T11:08:17Z,2021-04-26T06:40:49Z,2021-04-26T06:40:52Z,MERGED,True,25,42,12,https://github.com/ahcorde,Pybind11 actionserver nitpicks and docblock improvements,1,[],https://github.com/ros2/rclpy/pull/774,https://github.com/ahcorde,2,https://github.com/ros2/rclpy/pull/774#issuecomment-825941173,"related with the post-merge comments in this PR #766

use of append_rcl_error
improved documentation

Signed-off-by: ahcorde ahcorde@gmail.com","up-to rclpy and testing rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,776,2021-04-28T15:05:45Z,2021-04-28T21:38:36Z,2021-04-28T23:07:18Z,MERGED,True,4,4,1,https://github.com/ksuszka,Break log function execution ASAP if configured severity is too high,2,[],https://github.com/ros2/rclpy/pull/776,https://github.com/ksuszka,1,https://github.com/ros2/rclpy/pull/776,An attempt to solve #775.,An attempt to solve #775.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,776,2021-04-28T15:05:45Z,2021-04-28T21:38:36Z,2021-04-28T23:07:18Z,MERGED,True,4,4,1,https://github.com/ksuszka,Break log function execution ASAP if configured severity is too high,2,[],https://github.com/ros2/rclpy/pull/776,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/776#issuecomment-828760606,An attempt to solve #775.,"CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,776,2021-04-28T15:05:45Z,2021-04-28T21:38:36Z,2021-04-28T23:07:18Z,MERGED,True,4,4,1,https://github.com/ksuszka,Break log function execution ASAP if configured severity is too high,2,[],https://github.com/ros2/rclpy/pull/776,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/776#issuecomment-828797105,An attempt to solve #775.,Thanks for the PR!,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,776,2021-04-28T15:05:45Z,2021-04-28T21:38:36Z,2021-04-28T23:07:18Z,MERGED,True,4,4,1,https://github.com/ksuszka,Break log function execution ASAP if configured severity is too high,2,[],https://github.com/ros2/rclpy/pull/776,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/776#issuecomment-828836853,An attempt to solve #775.,@Mergifyio backport galactic foxy,True,{'THUMBS_UP': ['https://github.com/mergify%5Bbot%5D']}
ros2/rclpy,https://github.com/ros2/rclpy,776,2021-04-28T15:05:45Z,2021-04-28T21:38:36Z,2021-04-28T23:07:18Z,MERGED,True,4,4,1,https://github.com/ksuszka,Break log function execution ASAP if configured severity is too high,2,[],https://github.com/ros2/rclpy/pull/776,https://github.com/apps/mergify,5,https://github.com/ros2/rclpy/pull/776#issuecomment-828837138,An attempt to solve #775.,"Command backport galactic foxy: success

Backports have been created

#783 Break log function execution ASAP if configured severity is too high (backport #776) has been created for branch galactic
#784 Break log function execution ASAP if configured severity is too high (backport #776) has been created for branch foxy",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,777,2021-04-28T15:45:13Z,2021-04-28T20:18:53Z,2021-04-28T20:30:23Z,MERGED,True,3239,3472,64,https://github.com/sloretz,Merge Post galactic freeze into Rolling,12,[],https://github.com/ros2/rclpy/pull/777,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/777,"Part of #665 - This includes all the pybind11 changes that we want to merge in Galactic patch 1. Before that, we've got to update rolling. All code here has already has been reviewed and approved.
I think rebase and merge would be good as that preserves the history of a bunch of different squash/merged PRs.","Part of #665 - This includes all the pybind11 changes that we want to merge in Galactic patch 1. Before that, we've got to update rolling. All code here has already has been reviewed and approved.
I think rebase and merge would be good as that preserves the history of a bunch of different squash/merged PRs.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,777,2021-04-28T15:45:13Z,2021-04-28T20:18:53Z,2021-04-28T20:30:23Z,MERGED,True,3239,3472,64,https://github.com/sloretz,Merge Post galactic freeze into Rolling,12,[],https://github.com/ros2/rclpy/pull/777,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/777#issuecomment-828564970,"Part of #665 - This includes all the pybind11 changes that we want to merge in Galactic patch 1. Before that, we've got to update rolling. All code here has already has been reviewed and approved.
I think rebase and merge would be good as that preserves the history of a bunch of different squash/merged PRs.","DCO bot is unhappy, not sure why. All of these commits are squash/merges - maybe github doesn't signoff them? It seems reasonable to set the DCO bot to pass since individually these PRs all passed.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,777,2021-04-28T15:45:13Z,2021-04-28T20:18:53Z,2021-04-28T20:30:23Z,MERGED,True,3239,3472,64,https://github.com/sloretz,Merge Post galactic freeze into Rolling,12,[],https://github.com/ros2/rclpy/pull/777,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/777#issuecomment-828569642,"Part of #665 - This includes all the pybind11 changes that we want to merge in Galactic patch 1. Before that, we've got to update rolling. All code here has already has been reviewed and approved.
I think rebase and merge would be good as that preserves the history of a bunch of different squash/merged PRs.","DCO bot is unhappy, not sure why. All of these commits are squash/merges - maybe github doesn't signoff them? It seems reasonable to set the DCO bot to pass since individually these PRs all passed.

Yeah, that seems reasonable to me.
On another note, I'll suggest we do a full build-n-test with these changes in place (including Windows Debug).  I know we've done that for the individual PRs, but this is a big enough change that a full CI is warranted.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,777,2021-04-28T15:45:13Z,2021-04-28T20:18:53Z,2021-04-28T20:30:23Z,MERGED,True,3239,3472,64,https://github.com/sloretz,Merge Post galactic freeze into Rolling,12,[],https://github.com/ros2/rclpy/pull/777,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/777#issuecomment-828590050,"Part of #665 - This includes all the pybind11 changes that we want to merge in Galactic patch 1. Before that, we've got to update rolling. All code here has already has been reviewed and approved.
I think rebase and merge would be good as that preserves the history of a bunch of different squash/merged PRs.","I'll suggest we do a full build-n-test with these changes in place (including Windows Debug)

Seems like a reasonable way to double check everything, especially Windows debug since this hasn't had the nightlies run on it.
CI (build: --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows 
Windows Debug",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,777,2021-04-28T15:45:13Z,2021-04-28T20:18:53Z,2021-04-28T20:30:23Z,MERGED,True,3239,3472,64,https://github.com/sloretz,Merge Post galactic freeze into Rolling,12,[],https://github.com/ros2/rclpy/pull/777,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/777#issuecomment-828750329,"Part of #665 - This includes all the pybind11 changes that we want to merge in Galactic patch 1. Before that, we've got to update rolling. All code here has already has been reviewed and approved.
I think rebase and merge would be good as that preserves the history of a bunch of different squash/merged PRs.",CI green ✔️ and approved 🎉 Rebase and mergeing!,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,778,2021-04-28T20:19:55Z,2021-04-28T20:20:21Z,2021-04-28T20:20:25Z,CLOSED,False,3472,3239,64,https://github.com/sloretz,"Revert ""Merge Post galactic freeze into Rolling""",1,[],https://github.com/ros2/rclpy/pull/778,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/778,"Reverts #777
I hit the wrong merge button :-/","Reverts #777
I hit the wrong merge button :-/",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,778,2021-04-28T20:19:55Z,2021-04-28T20:20:21Z,2021-04-28T20:20:25Z,CLOSED,False,3472,3239,64,https://github.com/sloretz,"Revert ""Merge Post galactic freeze into Rolling""",1,[],https://github.com/ros2/rclpy/pull/778,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/778#issuecomment-828751175,"Reverts #777
I hit the wrong merge button :-/","Gah, auto revert PR doesn't signoff :-/",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,779,2021-04-28T20:25:34Z,2021-04-28T20:30:07Z,2021-04-28T20:30:10Z,MERGED,True,3472,3239,64,https://github.com/sloretz,"Revert ""Merge Post galactic freeze into Rolling (#777)""",1,[],https://github.com/ros2/rclpy/pull/779,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/779,"This reverts commit 1b335d3.
Signed-off-by: Shane Loretz sloretz@osrfoundation.org
Reverting 777 because I hit the wrong merge button","This reverts commit 1b335d3.
Signed-off-by: Shane Loretz sloretz@osrfoundation.org
Reverting 777 because I hit the wrong merge button",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,779,2021-04-28T20:25:34Z,2021-04-28T20:30:07Z,2021-04-28T20:30:10Z,MERGED,True,3472,3239,64,https://github.com/sloretz,"Revert ""Merge Post galactic freeze into Rolling (#777)""",1,[],https://github.com/ros2/rclpy/pull/779,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/779#issuecomment-828755629,"This reverts commit 1b335d3.
Signed-off-by: Shane Loretz sloretz@osrfoundation.org
Reverting 777 because I hit the wrong merge button",This should be immediately followed by #780,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,780,2021-04-28T20:26:28Z,2021-04-28T20:30:21Z,2021-04-28T20:30:23Z,MERGED,True,3239,3472,64,https://github.com/sloretz,Post galactic freeze redo #777,12,[],https://github.com/ros2/rclpy/pull/780,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/780,"Same exact PR as #777, which pased CI, but this time I intend to actually hit ""Rebase and merge""","Same exact PR as #777, which pased CI, but this time I intend to actually hit ""Rebase and merge""",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,781,2021-04-28T21:41:33Z,2021-04-28T23:09:48Z,2021-04-28T23:09:51Z,CLOSED,False,4,4,1,https://github.com/sloretz,[galactic backport] Break log function execution ASAP if configured severity is too high …,1,[],https://github.com/ros2/rclpy/pull/781,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/781,Cherry-pick backport of #776 to Galactic,Cherry-pick backport of #776 to Galactic,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,781,2021-04-28T21:41:33Z,2021-04-28T23:09:48Z,2021-04-28T23:09:51Z,CLOSED,False,4,4,1,https://github.com/sloretz,[galactic backport] Break log function execution ASAP if configured severity is too high …,1,[],https://github.com/ros2/rclpy/pull/781,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/781#issuecomment-828838035,Cherry-pick backport of #776 to Galactic,Closing in favor of the bot pr #783,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,782,2021-04-28T21:43:18Z,2021-04-28T23:09:29Z,2021-04-28T23:09:32Z,CLOSED,False,4,4,1,https://github.com/sloretz,[foxy backport] Break log function execution ASAP if configured severity is too high …,1,[],https://github.com/ros2/rclpy/pull/782,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/782,Cherry-pick #776 backport to Foxy,Cherry-pick #776 backport to Foxy,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,782,2021-04-28T21:43:18Z,2021-04-28T23:09:29Z,2021-04-28T23:09:32Z,CLOSED,False,4,4,1,https://github.com/sloretz,[foxy backport] Break log function execution ASAP if configured severity is too high …,1,[],https://github.com/ros2/rclpy/pull/782,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/782#issuecomment-828837922,Cherry-pick #776 backport to Foxy,Closing in favor of the bot PR #784,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,783,2021-04-28T23:07:09Z,2021-05-06T19:07:54Z,2021-05-06T19:07:57Z,MERGED,True,4,4,1,https://github.com/apps/mergify,Break log function execution ASAP if configured severity is too high (backport #776),1,[],https://github.com/ros2/rclpy/pull/783,https://github.com/apps/mergify,1,https://github.com/ros2/rclpy/pull/783,"This is an automatic backport of pull request #776 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/","This is an automatic backport of pull request #776 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,783,2021-04-28T23:07:09Z,2021-05-06T19:07:54Z,2021-05-06T19:07:57Z,MERGED,True,4,4,1,https://github.com/apps/mergify,Break log function execution ASAP if configured severity is too high (backport #776),1,[],https://github.com/ros2/rclpy/pull/783,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/783#issuecomment-832131593,"This is an automatic backport of pull request #776 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/","CI (Galactic build: --packages-up-to rclpy test: --packages-select rclpy)
Edit: wrong CI args",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,783,2021-04-28T23:07:09Z,2021-05-06T19:07:54Z,2021-05-06T19:07:57Z,MERGED,True,4,4,1,https://github.com/apps/mergify,Break log function execution ASAP if configured severity is too high (backport #776),1,[],https://github.com/ros2/rclpy/pull/783,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/783#issuecomment-832204637,"This is an automatic backport of pull request #776 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/","CI with correct repos file

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,784,2021-04-28T23:07:16Z,2021-05-11T18:55:50Z,2021-05-11T18:55:54Z,MERGED,True,4,4,1,https://github.com/apps/mergify,Break log function execution ASAP if configured severity is too high (backport #776),1,[],https://github.com/ros2/rclpy/pull/784,https://github.com/apps/mergify,1,https://github.com/ros2/rclpy/pull/784,"This is an automatic backport of pull request #776 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/","This is an automatic backport of pull request #776 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,784,2021-04-28T23:07:16Z,2021-05-11T18:55:50Z,2021-05-11T18:55:54Z,MERGED,True,4,4,1,https://github.com/apps/mergify,Break log function execution ASAP if configured severity is too high (backport #776),1,[],https://github.com/ros2/rclpy/pull/784,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/784#issuecomment-832132341,"This is an automatic backport of pull request #776 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/","CI (Foxy build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,784,2021-04-28T23:07:16Z,2021-05-11T18:55:50Z,2021-05-11T18:55:54Z,MERGED,True,4,4,1,https://github.com/apps/mergify,Break log function execution ASAP if configured severity is too high (backport #776),1,[],https://github.com/ros2/rclpy/pull/784,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/784#issuecomment-832204987,"This is an automatic backport of pull request #776 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/","CI with correct repos file

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,784,2021-04-28T23:07:16Z,2021-05-11T18:55:50Z,2021-05-11T18:55:54Z,MERGED,True,4,4,1,https://github.com/apps/mergify,Break log function execution ASAP if configured severity is too high (backport #776),1,[],https://github.com/ros2/rclpy/pull/784,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/784#issuecomment-839000147,"This is an automatic backport of pull request #776 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/","CI LGTM, the CMake warnings on Windows are in Cyclone and Fastcdr",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,785,2021-04-29T10:13:28Z,2021-08-13T17:09:52Z,2021-08-13T17:09:53Z,MERGED,True,35,25,3,https://github.com/ksuszka,Lift LoggingSeverity enum as common dependency to logging and rcutils_logger modules,2,[],https://github.com/ros2/rclpy/pull/785,https://github.com/ksuszka,1,https://github.com/ros2/rclpy/pull/785,"This is a follow up to discussion in #776.
LoggingSeverity enum is moved to its own module and it is imported both from logging and rcutils_logger modules.
This change should save a tiny bit of time in doing import for every call inside log method.","This is a follow up to discussion in #776.
LoggingSeverity enum is moved to its own module and it is imported both from logging and rcutils_logger modules.
This change should save a tiny bit of time in doing import for every call inside log method.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,785,2021-04-29T10:13:28Z,2021-08-13T17:09:52Z,2021-08-13T17:09:53Z,MERGED,True,35,25,3,https://github.com/ksuszka,Lift LoggingSeverity enum as common dependency to logging and rcutils_logger modules,2,[],https://github.com/ros2/rclpy/pull/785,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/785#issuecomment-897834506,"This is a follow up to discussion in #776.
LoggingSeverity enum is moved to its own module and it is imported both from logging and rcutils_logger modules.
This change should save a tiny bit of time in doing import for every call inside log method.",FYI @ksuszka I merged master into your branch for the purpose of running CI,True,{'THUMBS_UP': ['https://github.com/ksuszka']}
ros2/rclpy,https://github.com/ros2/rclpy,785,2021-04-29T10:13:28Z,2021-08-13T17:09:52Z,2021-08-13T17:09:53Z,MERGED,True,35,25,3,https://github.com/ksuszka,Lift LoggingSeverity enum as common dependency to logging and rcutils_logger modules,2,[],https://github.com/ros2/rclpy/pull/785,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/785#issuecomment-897835418,"This is a follow up to discussion in #776.
LoggingSeverity enum is moved to its own module and it is imported both from logging and rcutils_logger modules.
This change should save a tiny bit of time in doing import for every call inside log method.","CI (repos: https://gist.githubusercontent.com/sloretz/066f1aac2524131549f6f985a5e59b8d/raw/12141f1a0059d4c87c78fd9c4bf7fc4090e4c01b/ros2.repos build: --packages-up-to rclpy test:  --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows  - known issue fixed by ros2/rosidl_typesupport#118 and related, rerunning:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,785,2021-04-29T10:13:28Z,2021-08-13T17:09:52Z,2021-08-13T17:09:53Z,MERGED,True,35,25,3,https://github.com/ksuszka,Lift LoggingSeverity enum as common dependency to logging and rcutils_logger modules,2,[],https://github.com/ros2/rclpy/pull/785,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/785#issuecomment-898603479,"This is a follow up to discussion in #776.
LoggingSeverity enum is moved to its own module and it is imported both from logging and rcutils_logger modules.
This change should save a tiny bit of time in doing import for every call inside log method.",CI LGTM! Thanks for the PR,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,786,2021-05-05T16:44:44Z,2021-05-11T19:03:27Z,2021-08-11T22:52:20Z,MERGED,True,10,342,16,https://github.com/ahcorde,Deleted handle as it should no longer be used,3,['enhancement'],https://github.com/ros2/rclpy/pull/786,https://github.com/ahcorde,1,https://github.com/ros2/rclpy/pull/786,"Removed handle.cpp/handle.hpp and handle.py as they should no longer be used.
This PR could be backported to Galactic","Removed handle.cpp/handle.hpp and handle.py as they should no longer be used.
This PR could be backported to Galactic",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,786,2021-05-05T16:44:44Z,2021-05-11T19:03:27Z,2021-08-11T22:52:20Z,MERGED,True,10,342,16,https://github.com/ahcorde,Deleted handle as it should no longer be used,3,['enhancement'],https://github.com/ros2/rclpy/pull/786,https://github.com/ahcorde,2,https://github.com/ros2/rclpy/pull/786#issuecomment-832883655,"Removed handle.cpp/handle.hpp and handle.py as they should no longer be used.
This PR could be backported to Galactic","Building up-to rclpy and testing rclpy

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,786,2021-05-05T16:44:44Z,2021-05-11T19:03:27Z,2021-08-11T22:52:20Z,MERGED,True,10,342,16,https://github.com/ahcorde,Deleted handle as it should no longer be used,3,['enhancement'],https://github.com/ros2/rclpy/pull/786,https://github.com/ahcorde,3,https://github.com/ros2/rclpy/pull/786#issuecomment-838002473,"Removed handle.cpp/handle.hpp and handle.py as they should no longer be used.
This PR could be backported to Galactic","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,786,2021-05-05T16:44:44Z,2021-05-11T19:03:27Z,2021-08-11T22:52:20Z,MERGED,True,10,342,16,https://github.com/ahcorde,Deleted handle as it should no longer be used,3,['enhancement'],https://github.com/ros2/rclpy/pull/786,https://github.com/ahcorde,4,https://github.com/ros2/rclpy/pull/786#issuecomment-838427955,"Removed handle.cpp/handle.hpp and handle.py as they should no longer be used.
This PR could be backported to Galactic",friendly ping @sloretz,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,786,2021-05-05T16:44:44Z,2021-05-11T19:03:27Z,2021-08-11T22:52:20Z,MERGED,True,10,342,16,https://github.com/ahcorde,Deleted handle as it should no longer be used,3,['enhancement'],https://github.com/ros2/rclpy/pull/786,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/786#issuecomment-897212211,"Removed handle.cpp/handle.hpp and handle.py as they should no longer be used.
This PR could be backported to Galactic",@Mergifyio backport galactic please,True,{'THUMBS_UP': ['https://github.com/mergify%5Bbot%5D']}
ros2/rclpy,https://github.com/ros2/rclpy,786,2021-05-05T16:44:44Z,2021-05-11T19:03:27Z,2021-08-11T22:52:20Z,MERGED,True,10,342,16,https://github.com/ahcorde,Deleted handle as it should no longer be used,3,['enhancement'],https://github.com/ros2/rclpy/pull/786,https://github.com/apps/mergify,6,https://github.com/ros2/rclpy/pull/786#issuecomment-897212333,"Removed handle.cpp/handle.hpp and handle.py as they should no longer be used.
This PR could be backported to Galactic","Command backport galactic please: failure

No backport have been created

#813 Deleted handle as it should no longer be used (backport #786) has been created for branch galactic
Backport to branch please failed: Branch not found",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,787,2021-05-05T18:27:49Z,2021-05-11T07:25:35Z,2021-05-11T07:25:37Z,MERGED,True,44,195,12,https://github.com/ahcorde,Removed some functions in common.c and replaced them in utils.cpp,1,['enhancement'],https://github.com/ros2/rclpy/pull/787,https://github.com/ahcorde,1,https://github.com/ros2/rclpy/pull/787,"Removed some functions in common.c and created an analog method in utils.cpp if doesn't exist:

rclpy_convert_from_py
rclpy_convert_to_py
rclpy_create_from_py
get_capsule_pointer
rclpy_common_get_type_support

This PR could be backported to galactic
Signed-off-by: ahcorde ahcorde@gmail.com","Removed some functions in common.c and created an analog method in utils.cpp if doesn't exist:

rclpy_convert_from_py
rclpy_convert_to_py
rclpy_create_from_py
get_capsule_pointer
rclpy_common_get_type_support

This PR could be backported to galactic
Signed-off-by: ahcorde ahcorde@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,787,2021-05-05T18:27:49Z,2021-05-11T07:25:35Z,2021-05-11T07:25:37Z,MERGED,True,44,195,12,https://github.com/ahcorde,Removed some functions in common.c and replaced them in utils.cpp,1,['enhancement'],https://github.com/ros2/rclpy/pull/787,https://github.com/ahcorde,2,https://github.com/ros2/rclpy/pull/787#issuecomment-832915242,"Removed some functions in common.c and created an analog method in utils.cpp if doesn't exist:

rclpy_convert_from_py
rclpy_convert_to_py
rclpy_create_from_py
get_capsule_pointer
rclpy_common_get_type_support

This PR could be backported to galactic
Signed-off-by: ahcorde ahcorde@gmail.com","Building up-to rclpy and testing rclpy

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,788,2021-05-05T19:50:34Z,2021-05-11T07:23:34Z,2021-05-11T07:23:37Z,MERGED,True,32,54,29,https://github.com/ahcorde,Moved exception.cpp/hpp to the _rclpy_pybind11 module,2,['enhancement'],https://github.com/ros2/rclpy/pull/788,https://github.com/ahcorde,1,https://github.com/ros2/rclpy/pull/788,"Moved exception.cpp/hpp to the _rclpy_pybind11 module.
Signed-off-by: ahcorde ahcorde@gmail.com","Moved exception.cpp/hpp to the _rclpy_pybind11 module.
Signed-off-by: ahcorde ahcorde@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,788,2021-05-05T19:50:34Z,2021-05-11T07:23:34Z,2021-05-11T07:23:37Z,MERGED,True,32,54,29,https://github.com/ahcorde,Moved exception.cpp/hpp to the _rclpy_pybind11 module,2,['enhancement'],https://github.com/ros2/rclpy/pull/788,https://github.com/ahcorde,2,https://github.com/ros2/rclpy/pull/788#issuecomment-832963961,"Moved exception.cpp/hpp to the _rclpy_pybind11 module.
Signed-off-by: ahcorde ahcorde@gmail.com","Building up-to rclpy and testing rclpy

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,788,2021-05-05T19:50:34Z,2021-05-11T07:23:34Z,2021-05-11T07:23:37Z,MERGED,True,32,54,29,https://github.com/ahcorde,Moved exception.cpp/hpp to the _rclpy_pybind11 module,2,['enhancement'],https://github.com/ros2/rclpy/pull/788,https://github.com/ahcorde,3,https://github.com/ros2/rclpy/pull/788#issuecomment-836735876,"Moved exception.cpp/hpp to the _rclpy_pybind11 module.
Signed-off-by: ahcorde ahcorde@gmail.com",Windows,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,788,2021-05-05T19:50:34Z,2021-05-11T07:23:34Z,2021-05-11T07:23:37Z,MERGED,True,32,54,29,https://github.com/ahcorde,Moved exception.cpp/hpp to the _rclpy_pybind11 module,2,['enhancement'],https://github.com/ros2/rclpy/pull/788,https://github.com/ahcorde,4,https://github.com/ros2/rclpy/pull/788#issuecomment-836865449,"Moved exception.cpp/hpp to the _rclpy_pybind11 module.
Signed-off-by: ahcorde ahcorde@gmail.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,789,2021-05-06T17:29:44Z,2021-05-28T08:28:14Z,2021-05-28T08:28:17Z,MERGED,True,99,435,27,https://github.com/ahcorde,Removed common.c/h,4,['enhancement'],https://github.com/ros2/rclpy/pull/789,https://github.com/ahcorde,1,https://github.com/ros2/rclpy/pull/789,"This PR builds on top of this other PR #787
Removed completely common.c and common.h. The functions are moved to utils.cpp/hpp using the pybind11 API.
Signed-off-by: ahcorde ahcorde@gmail.com","This PR builds on top of this other PR #787
Removed completely common.c and common.h. The functions are moved to utils.cpp/hpp using the pybind11 API.
Signed-off-by: ahcorde ahcorde@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,789,2021-05-06T17:29:44Z,2021-05-28T08:28:14Z,2021-05-28T08:28:17Z,MERGED,True,99,435,27,https://github.com/ahcorde,Removed common.c/h,4,['enhancement'],https://github.com/ros2/rclpy/pull/789,https://github.com/ahcorde,2,https://github.com/ros2/rclpy/pull/789#issuecomment-841519163,"This PR builds on top of this other PR #787
Removed completely common.c and common.h. The functions are moved to utils.cpp/hpp using the pybind11 API.
Signed-off-by: ahcorde ahcorde@gmail.com",friendly ping @sloretz,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,789,2021-05-06T17:29:44Z,2021-05-28T08:28:14Z,2021-05-28T08:28:17Z,MERGED,True,99,435,27,https://github.com/ahcorde,Removed common.c/h,4,['enhancement'],https://github.com/ros2/rclpy/pull/789,https://github.com/ahcorde,3,https://github.com/ros2/rclpy/pull/789#issuecomment-843057106,"This PR builds on top of this other PR #787
Removed completely common.c and common.h. The functions are moved to utils.cpp/hpp using the pybind11 API.
Signed-off-by: ahcorde ahcorde@gmail.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,789,2021-05-06T17:29:44Z,2021-05-28T08:28:14Z,2021-05-28T08:28:17Z,MERGED,True,99,435,27,https://github.com/ahcorde,Removed common.c/h,4,['enhancement'],https://github.com/ros2/rclpy/pull/789,https://github.com/ahcorde,4,https://github.com/ros2/rclpy/pull/789#issuecomment-843843609,"This PR builds on top of this other PR #787
Removed completely common.c and common.h. The functions are moved to utils.cpp/hpp using the pybind11 API.
Signed-off-by: ahcorde ahcorde@gmail.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,789,2021-05-06T17:29:44Z,2021-05-28T08:28:14Z,2021-05-28T08:28:17Z,MERGED,True,99,435,27,https://github.com/ahcorde,Removed common.c/h,4,['enhancement'],https://github.com/ros2/rclpy/pull/789,https://github.com/ahcorde,5,https://github.com/ros2/rclpy/pull/789#issuecomment-844462888,"This PR builds on top of this other PR #787
Removed completely common.c and common.h. The functions are moved to utils.cpp/hpp using the pybind11 API.
Signed-off-by: ahcorde ahcorde@gmail.com",friendly ping @sloretz,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,789,2021-05-06T17:29:44Z,2021-05-28T08:28:14Z,2021-05-28T08:28:17Z,MERGED,True,99,435,27,https://github.com/ahcorde,Removed common.c/h,4,['enhancement'],https://github.com/ros2/rclpy/pull/789,https://github.com/ahcorde,6,https://github.com/ros2/rclpy/pull/789#issuecomment-850209101,"This PR builds on top of this other PR #787
Removed completely common.c and common.h. The functions are moved to utils.cpp/hpp using the pybind11 API.
Signed-off-by: ahcorde ahcorde@gmail.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,791,2021-05-09T12:23:15Z,2021-05-12T01:38:01Z,2021-05-12T17:53:06Z,MERGED,True,12,1,1,https://github.com/fujitatomoya,reject cancel request if failed to transit to CANCEL_GOAL state.,3,[],https://github.com/ros2/rclpy/pull/791,https://github.com/fujitatomoya,1,https://github.com/ros2/rclpy/pull/791,"address #790
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","address #790
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,791,2021-05-09T12:23:15Z,2021-05-12T01:38:01Z,2021-05-12T17:53:06Z,MERGED,True,12,1,1,https://github.com/fujitatomoya,reject cancel request if failed to transit to CANCEL_GOAL state.,3,[],https://github.com/ros2/rclpy/pull/791,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/791#issuecomment-835798630,"address #790
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","Unit Test Verification

No exception happens on action server.
Client can receive response against cancel request.

root@134f29e8f25f:~/ros2_ws/colcon_ws# ros2 run action_tutorials_py fibonacci_action_server
[INFO] [1620562800.641881176] [fibonacci_action_server]: Received goal request with order 10
[INFO] [1620562800.643009067] [fibonacci_action_server]: Start executing...
[INFO] [1620562800.646871647] [fibonacci_action_server]: Executing goal...
[INFO] [1620562800.647266381] [fibonacci_action_server]: Feedback: array('i', [0, 1, 1])
[INFO] [1620562801.649306078] [fibonacci_action_server]: Feedback: array('i', [0, 1, 1, 2])
[INFO] [1620562802.651528398] [fibonacci_action_server]: Feedback: array('i', [0, 1, 1, 2, 3])
[INFO] [1620562803.653780705] [fibonacci_action_server]: Feedback: array('i', [0, 1, 1, 2, 3, 5])
[INFO] [1620562804.656007533] [fibonacci_action_server]: Feedback: array('i', [0, 1, 1, 2, 3, 5, 8])
[INFO] [1620562805.063849575] [fibonacci_action_server]: Received request to cancel goal
[INFO] [1620562805.064584863] [fibonacci_action_server]: Process cancelation...
[INFO] [1620562805.658260387] [fibonacci_action_server]: Feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13])
[INFO] [1620562806.066927213] [fibonacci_action_server]: Process cancelation...
[INFO] [1620562806.660485890] [fibonacci_action_server]: Feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21])
[INFO] [1620562807.069366035] [fibonacci_action_server]: Process cancelation...
[INFO] [1620562807.662697071] [fibonacci_action_server]: Feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21, 34])
[INFO] [1620562808.071765962] [fibonacci_action_server]: Process cancelation...
[INFO] [1620562808.664946812] [fibonacci_action_server]: Feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55])
[INFO] [1620562809.074244478] [fibonacci_action_server]: Process cancelation...
[INFO] [1620562809.667310732] [fibonacci_action_server]: Goal succeeded
[INFO] [1620562810.076658064] [fibonacci_action_server]: Process cancelation...
[INFO] [1620562811.079015672] [fibonacci_action_server]: Process cancelation...
[INFO] [1620562812.081431060] [fibonacci_action_server]: Process cancelation...
[INFO] [1620562813.083824939] [fibonacci_action_server]: Process cancelation...
[INFO] [1620562814.085804895] [fibonacci_action_server]: Process cancelation...
[ERROR] [1620562815.088458091] [fibonacci_action_server]: Failed to cancel goal in cancel callback: Failed to update goal state: goal_handle attempted invalid transition from state SUCCEEDED with event CANCEL_GOAL, at /root/ros2_ws/colcon_ws/src/ros2/rcl/rcl_action/src/rcl_action/goal_handle.c:95

root@134f29e8f25f:~/ros2_ws/colcon_ws# ros2 action send_goal /fibonacci action_tutorials_interfaces/action/Fibonacci ""{order: 10}""
Waiting for an action server to become available...
Sending goal:
     order: 10

Goal accepted with ID: 4742cfd44173448aa4730462b1212c01

^CCanceling goal...
Failed to cancel goal",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,791,2021-05-09T12:23:15Z,2021-05-12T01:38:01Z,2021-05-12T17:53:06Z,MERGED,True,12,1,1,https://github.com/fujitatomoya,reject cancel request if failed to transit to CANCEL_GOAL state.,3,[],https://github.com/ros2/rclpy/pull/791,https://github.com/fujitatomoya,3,https://github.com/ros2/rclpy/pull/791#issuecomment-838042162,"address #790
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,791,2021-05-09T12:23:15Z,2021-05-12T01:38:01Z,2021-05-12T17:53:06Z,MERGED,True,12,1,1,https://github.com/fujitatomoya,reject cancel request if failed to transit to CANCEL_GOAL state.,3,[],https://github.com/ros2/rclpy/pull/791,https://github.com/jacobperron,4,https://github.com/ros2/rclpy/pull/791#issuecomment-839978808,"address #790
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com",I've opened backport PRs for Galactic and Foxy.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,793,2021-05-10T06:50:09Z,2021-09-13T16:29:15Z,2021-09-15T23:12:22Z,MERGED,True,81,1,4,https://github.com/Barry-Xu-2018,Add wait_for_all_acked support,8,['enhancement'],https://github.com/ros2/rclpy/pull/793,https://github.com/Barry-Xu-2018,1,https://github.com/ros2/rclpy/pull/793,Related to ros2/rmw#295,Related to ros2/rmw#295,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,793,2021-05-10T06:50:09Z,2021-09-13T16:29:15Z,2021-09-15T23:12:22Z,MERGED,True,81,1,4,https://github.com/Barry-Xu-2018,Add wait_for_all_acked support,8,['enhancement'],https://github.com/ros2/rclpy/pull/793,https://github.com/Barry-Xu-2018,2,https://github.com/ros2/rclpy/pull/793#issuecomment-842182376,Related to ros2/rmw#295,Friendly ping @fujitatomoya.  Please look at my comments and I supplement tests.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,793,2021-05-10T06:50:09Z,2021-09-13T16:29:15Z,2021-09-15T23:12:22Z,MERGED,True,81,1,4,https://github.com/Barry-Xu-2018,Add wait_for_all_acked support,8,['enhancement'],https://github.com/ros2/rclpy/pull/793,https://github.com/fujitatomoya,3,https://github.com/ros2/rclpy/pull/793#issuecomment-843116462,Related to ros2/rmw#295,CC: @ivanpauno @wjwwood friendly ping.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,793,2021-05-10T06:50:09Z,2021-09-13T16:29:15Z,2021-09-15T23:12:22Z,MERGED,True,81,1,4,https://github.com/Barry-Xu-2018,Add wait_for_all_acked support,8,['enhancement'],https://github.com/ros2/rclpy/pull/793,https://github.com/Barry-Xu-2018,4,https://github.com/ros2/rclpy/pull/793#issuecomment-911267432,Related to ros2/rmw#295,Do rebase.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,793,2021-05-10T06:50:09Z,2021-09-13T16:29:15Z,2021-09-15T23:12:22Z,MERGED,True,81,1,4,https://github.com/Barry-Xu-2018,Add wait_for_all_acked support,8,['enhancement'],https://github.com/ros2/rclpy/pull/793,https://github.com/Barry-Xu-2018,5,https://github.com/ros2/rclpy/pull/793#issuecomment-911273659,Related to ros2/rmw#295,"rcl package isn't updated (ros2/rcl#913 isn't included). So CI failed.
14:41:44 /tmp/ws/src/rclpy/rclpy/src/rclpy/publisher.cpp: In member function ‘bool rclpy::Publisher::wait_for_all_acked(rcl_duration_t)’:
14:41:44 /tmp/ws/src/rclpy/rclpy/src/rclpy/publisher.cpp:149:19: error: ‘rcl_publisher_wait_for_all_acked’ was not declared in this scope
14:41:44   149 |   rcl_ret_t ret = rcl_publisher_wait_for_all_acked(rcl_publisher_.get(), pytimeout.nanoseconds);
14:41:44       |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
14:41:44 make[2]: *** [CMakeFiles/_rclpy_pybind11.dir/build.make:297: CMakeFiles/_rclpy_pybind11.dir/src/rclpy/publisher.cpp.o] Error 1
14:41:44 make[1]: *** [CMakeFiles/Makefile2:193: CMakeFiles/_rclpy_pybind11.dir/all] Error 2
14:41:44 make: *** [Makefile:141: all] Error 2",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,793,2021-05-10T06:50:09Z,2021-09-13T16:29:15Z,2021-09-15T23:12:22Z,MERGED,True,81,1,4,https://github.com/Barry-Xu-2018,Add wait_for_all_acked support,8,['enhancement'],https://github.com/ros2/rclpy/pull/793,https://github.com/ivanpauno,6,https://github.com/ros2/rclpy/pull/793#issuecomment-911663188,Related to ros2/rmw#295,"Released rcl (ros/rosdistro#30681), the Rpr checker should start passing in some hours.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,793,2021-05-10T06:50:09Z,2021-09-13T16:29:15Z,2021-09-15T23:12:22Z,MERGED,True,81,1,4,https://github.com/Barry-Xu-2018,Add wait_for_all_acked support,8,['enhancement'],https://github.com/ros2/rclpy/pull/793,https://github.com/Barry-Xu-2018,7,https://github.com/ros2/rclpy/pull/793#issuecomment-914088904,Related to ros2/rmw#295,@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,793,2021-05-10T06:50:09Z,2021-09-13T16:29:15Z,2021-09-15T23:12:22Z,MERGED,True,81,1,4,https://github.com/Barry-Xu-2018,Add wait_for_all_acked support,8,['enhancement'],https://github.com/ros2/rclpy/pull/793,https://github.com/ivanpauno,8,https://github.com/ros2/rclpy/pull/793#issuecomment-918257270,Related to ros2/rmw#295,"@Barry-Xu-2018 @fujitatomoya  can you run ci?
This is ready to go",True,{'THUMBS_UP': ['https://github.com/fujitatomoya']}
ros2/rclpy,https://github.com/ros2/rclpy,793,2021-05-10T06:50:09Z,2021-09-13T16:29:15Z,2021-09-15T23:12:22Z,MERGED,True,81,1,4,https://github.com/Barry-Xu-2018,Add wait_for_all_acked support,8,['enhancement'],https://github.com/ros2/rclpy/pull/793,https://github.com/fujitatomoya,9,https://github.com/ros2/rclpy/pull/793#issuecomment-918320472,Related to ros2/rmw#295,"CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,795,2021-05-12T17:50:56Z,2021-05-13T20:32:49Z,2021-05-13T20:32:52Z,MERGED,True,12,1,1,https://github.com/jacobperron,[galactic] reject cancel request if failed to transit to CANCEL_GOAL state. (#791),1,[],https://github.com/ros2/rclpy/pull/795,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/795,Backport #791 to Galactic.,Backport #791 to Galactic.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,795,2021-05-12T17:50:56Z,2021-05-13T20:32:49Z,2021-05-13T20:32:52Z,MERGED,True,12,1,1,https://github.com/jacobperron,[galactic] reject cancel request if failed to transit to CANCEL_GOAL state. (#791),1,[],https://github.com/ros2/rclpy/pull/795,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/795#issuecomment-840131414,Backport #791 to Galactic.,"Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,795,2021-05-12T17:50:56Z,2021-05-13T20:32:49Z,2021-05-13T20:32:52Z,MERGED,True,12,1,1,https://github.com/jacobperron,[galactic] reject cancel request if failed to transit to CANCEL_GOAL state. (#791),1,[],https://github.com/ros2/rclpy/pull/795,https://github.com/fujitatomoya,3,https://github.com/ros2/rclpy/pull/795#issuecomment-840244083,Backport #791 to Galactic.,"https://ci.ros2.org/job/ci_linux-aarch64/9375/testReport/junit/ros2param.ros2param.test/test_verb_list/test_verb_list/ is known issue, just flaky not related to this fix. i will retry CI again just in case.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,795,2021-05-12T17:50:56Z,2021-05-13T20:32:49Z,2021-05-13T20:32:52Z,MERGED,True,12,1,1,https://github.com/jacobperron,[galactic] reject cancel request if failed to transit to CANCEL_GOAL state. (#791),1,[],https://github.com/ros2/rclpy/pull/795,https://github.com/fujitatomoya,4,https://github.com/ros2/rclpy/pull/795#issuecomment-840244834,Backport #791 to Galactic.,"CI(retry):

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,795,2021-05-12T17:50:56Z,2021-05-13T20:32:49Z,2021-05-13T20:32:52Z,MERGED,True,12,1,1,https://github.com/jacobperron,[galactic] reject cancel request if failed to transit to CANCEL_GOAL state. (#791),1,[],https://github.com/ros2/rclpy/pull/795,https://github.com/jacobperron,5,https://github.com/ros2/rclpy/pull/795#issuecomment-840694320,Backport #791 to Galactic.,@fujitatomoya That's okay if it's a known flake; we don't need to rerun it. I'd like to see Windows go green(ish) once infrastructure cooperates.,True,{'THUMBS_UP': ['https://github.com/fujitatomoya']}
ros2/rclpy,https://github.com/ros2/rclpy,795,2021-05-12T17:50:56Z,2021-05-13T20:32:49Z,2021-05-13T20:32:52Z,MERGED,True,12,1,1,https://github.com/jacobperron,[galactic] reject cancel request if failed to transit to CANCEL_GOAL state. (#791),1,[],https://github.com/ros2/rclpy/pull/795,https://github.com/jacobperron,6,https://github.com/ros2/rclpy/pull/795#issuecomment-840707262,Backport #791 to Galactic.,Windows:,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,796,2021-05-12T17:52:48Z,2021-05-15T00:30:17Z,2021-05-15T00:30:20Z,MERGED,True,9,1,1,https://github.com/jacobperron,[foxy] reject cancel request if failed to transit to CANCEL_GOAL state. (#791),2,[],https://github.com/ros2/rclpy/pull/796,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/796,Backport #791 to Foxy.,Backport #791 to Foxy.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,796,2021-05-12T17:52:48Z,2021-05-15T00:30:17Z,2021-05-15T00:30:20Z,MERGED,True,9,1,1,https://github.com/jacobperron,[foxy] reject cancel request if failed to transit to CANCEL_GOAL state. (#791),2,[],https://github.com/ros2/rclpy/pull/796,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/796#issuecomment-840130566,Backport #791 to Foxy.,I think backport cannot be straight forward to foxy since of Pybind11 modification. I will adjust the code and make sure about that.,True,{'THUMBS_UP': ['https://github.com/jacobperron']}
ros2/rclpy,https://github.com/ros2/rclpy,796,2021-05-12T17:52:48Z,2021-05-15T00:30:17Z,2021-05-15T00:30:20Z,MERGED,True,9,1,1,https://github.com/jacobperron,[foxy] reject cancel request if failed to transit to CANCEL_GOAL state. (#791),2,[],https://github.com/ros2/rclpy/pull/796,https://github.com/jacobperron,3,https://github.com/ros2/rclpy/pull/796#issuecomment-840724848,Backport #791 to Foxy.,"@fujitatomoya Thanks, I've applied your suggestions.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,796,2021-05-12T17:52:48Z,2021-05-15T00:30:17Z,2021-05-15T00:30:20Z,MERGED,True,9,1,1,https://github.com/jacobperron,[foxy] reject cancel request if failed to transit to CANCEL_GOAL state. (#791),2,[],https://github.com/ros2/rclpy/pull/796,https://github.com/jacobperron,4,https://github.com/ros2/rclpy/pull/796#issuecomment-840752160,Backport #791 to Foxy.,"Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,796,2021-05-12T17:52:48Z,2021-05-15T00:30:17Z,2021-05-15T00:30:20Z,MERGED,True,9,1,1,https://github.com/jacobperron,[foxy] reject cancel request if failed to transit to CANCEL_GOAL state. (#791),2,[],https://github.com/ros2/rclpy/pull/796,https://github.com/fujitatomoya,5,https://github.com/ros2/rclpy/pull/796#issuecomment-840901222,Backport #791 to Foxy.,"These seem to be unrelated failures such as ros2 security generate_policy failure, retry CI.
CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,796,2021-05-12T17:52:48Z,2021-05-15T00:30:17Z,2021-05-15T00:30:20Z,MERGED,True,9,1,1,https://github.com/jacobperron,[foxy] reject cancel request if failed to transit to CANCEL_GOAL state. (#791),2,[],https://github.com/ros2/rclpy/pull/796,https://github.com/jacobperron,6,https://github.com/ros2/rclpy/pull/796#issuecomment-841570839,Backport #791 to Foxy.,"These seem to be unrelated failures such as ros2 security generate_policy failure

This has been failing for Foxy for a while. I'm fairly sure it is not related to this PR.
I think the Windows failures are all pre-existing too.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,797,2021-05-18T19:46:45Z,2021-06-23T22:04:37Z,2021-06-23T22:04:37Z,CLOSED,False,59,8,1,https://github.com/nuclearsandwich,[Dashing] MultiThreadedExecutor spin_until_future complete should not continue waiting when the future is done.,1,[],https://github.com/ros2/rclpy/pull/797,https://github.com/nuclearsandwich,1,https://github.com/ros2/rclpy/pull/797,Backports #605,Backports #605,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,797,2021-05-18T19:46:45Z,2021-06-23T22:04:37Z,2021-06-23T22:04:37Z,CLOSED,False,59,8,1,https://github.com/nuclearsandwich,[Dashing] MultiThreadedExecutor spin_until_future complete should not continue waiting when the future is done.,1,[],https://github.com/ros2/rclpy/pull/797,https://github.com/nuclearsandwich,2,https://github.com/ros2/rclpy/pull/797#issuecomment-844270791,Backports #605,@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,797,2021-05-18T19:46:45Z,2021-06-23T22:04:37Z,2021-06-23T22:04:37Z,CLOSED,False,59,8,1,https://github.com/nuclearsandwich,[Dashing] MultiThreadedExecutor spin_until_future complete should not continue waiting when the future is done.,1,[],https://github.com/ros2/rclpy/pull/797,https://github.com/nuclearsandwich,3,https://github.com/ros2/rclpy/pull/797#issuecomment-844271832,Backports #605,"Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,797,2021-05-18T19:46:45Z,2021-06-23T22:04:37Z,2021-06-23T22:04:37Z,CLOSED,False,59,8,1,https://github.com/nuclearsandwich,[Dashing] MultiThreadedExecutor spin_until_future complete should not continue waiting when the future is done.,1,[],https://github.com/ros2/rclpy/pull/797,https://github.com/nuclearsandwich,4,https://github.com/ros2/rclpy/pull/797#issuecomment-844287604,Backports #605,Hmm this change is causing the executor test to time out on the build farm and I just checked that this doesn't happen on a clean build of rclpy in Dashing,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,797,2021-05-18T19:46:45Z,2021-06-23T22:04:37Z,2021-06-23T22:04:37Z,CLOSED,False,59,8,1,https://github.com/nuclearsandwich,[Dashing] MultiThreadedExecutor spin_until_future complete should not continue waiting when the future is done.,1,[],https://github.com/ros2/rclpy/pull/797,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/797#issuecomment-867191023,Backports #605,Since Dashing is EOL I'll assume it's ok to close this.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,798,2021-05-18T21:10:25Z,2021-05-19T19:29:18Z,2021-05-19T19:29:21Z,MERGED,True,79,16,3,https://github.com/jacobperron,Allow declaring uninitialized parameters,7,[],https://github.com/ros2/rclpy/pull/798,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/798,"Parameters can now be declared without a default value and without an override.
Attempting to access a statically typed parameter that does not have value will raise an exception.
Getting dynamically typed parameters will return an unset parameter value.
This change is equivalent to that made in rclcpp: ros2/rclcpp#1673","Parameters can now be declared without a default value and without an override.
Attempting to access a statically typed parameter that does not have value will raise an exception.
Getting dynamically typed parameters will return an unset parameter value.
This change is equivalent to that made in rclcpp: ros2/rclcpp#1673",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,798,2021-05-18T21:10:25Z,2021-05-19T19:29:18Z,2021-05-19T19:29:21Z,MERGED,True,79,16,3,https://github.com/jacobperron,Allow declaring uninitialized parameters,7,[],https://github.com/ros2/rclpy/pull/798,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/798#issuecomment-843664653,"Parameters can now be declared without a default value and without an override.
Attempting to access a statically typed parameter that does not have value will raise an exception.
Getting dynamically typed parameters will return an unset parameter value.
This change is equivalent to that made in rclcpp: ros2/rclcpp#1673",Thanks for the reviews. I think I've addressed everything. PTAL.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,798,2021-05-18T21:10:25Z,2021-05-19T19:29:18Z,2021-05-19T19:29:21Z,MERGED,True,79,16,3,https://github.com/jacobperron,Allow declaring uninitialized parameters,7,[],https://github.com/ros2/rclpy/pull/798,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/798#issuecomment-844133645,"Parameters can now be declared without a default value and without an override.
Attempting to access a statically typed parameter that does not have value will raise an exception.
Getting dynamically typed parameters will return an unset parameter value.
This change is equivalent to that made in rclcpp: ros2/rclcpp#1673","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,798,2021-05-18T21:10:25Z,2021-05-19T19:29:18Z,2021-05-19T19:29:21Z,MERGED,True,79,16,3,https://github.com/jacobperron,Allow declaring uninitialized parameters,7,[],https://github.com/ros2/rclpy/pull/798,https://github.com/jacobperron,4,https://github.com/ros2/rclpy/pull/798#issuecomment-844274186,"Parameters can now be declared without a default value and without an override.
Attempting to access a statically typed parameter that does not have value will raise an exception.
Getting dynamically typed parameters will return an unset parameter value.
This change is equivalent to that made in rclcpp: ros2/rclcpp#1673","Thanks for triggering CI!
I thought the PR job would catch that flake8 error 🤷‍♂️",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,798,2021-05-18T21:10:25Z,2021-05-19T19:29:18Z,2021-05-19T19:29:21Z,MERGED,True,79,16,3,https://github.com/jacobperron,Allow declaring uninitialized parameters,7,[],https://github.com/ros2/rclpy/pull/798,https://github.com/jacobperron,5,https://github.com/ros2/rclpy/pull/798#issuecomment-844276221,"Parameters can now be declared without a default value and without an override.
Attempting to access a statically typed parameter that does not have value will raise an exception.
Getting dynamically typed parameters will return an unset parameter value.
This change is equivalent to that made in rclcpp: ros2/rclcpp#1673",Just retriggering Linux to confirm the linter is happy now:,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,799,2021-05-19T22:06:43Z,2021-05-20T21:11:55Z,2021-05-20T21:11:57Z,MERGED,True,79,16,3,https://github.com/jacobperron,[galactic] Allow declaring uninitialized parameters (#798),1,[],https://github.com/ros2/rclpy/pull/799,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/799,Backport #798 to Galactic.,Backport #798 to Galactic.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,799,2021-05-19T22:06:43Z,2021-05-20T21:11:55Z,2021-05-20T21:11:57Z,MERGED,True,79,16,3,https://github.com/jacobperron,[galactic] Allow declaring uninitialized parameters (#798),1,[],https://github.com/ros2/rclpy/pull/799,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/799#issuecomment-845290626,Backport #798 to Galactic.,"Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,799,2021-05-19T22:06:43Z,2021-05-20T21:11:55Z,2021-05-20T21:11:57Z,MERGED,True,79,16,3,https://github.com/jacobperron,[galactic] Allow declaring uninitialized parameters (#798),1,[],https://github.com/ros2/rclpy/pull/799,https://github.com/jacobperron,3,https://github.com/ros2/rclpy/pull/799#issuecomment-845480024,Backport #798 to Galactic.,macOS warnings are unrelated.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,800,2021-05-28T21:08:19Z,2021-08-18T14:06:27Z,2021-08-18T14:06:29Z,MERGED,True,20,21,1,https://github.com/ivanpauno,Call Context._logging_fini() in Context.try_shutdown(),4,['bug'],https://github.com/ros2/rclpy/pull/800,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/800,Fixes #518 (comment),Fixes #518 (comment),True,{}
ros2/rclpy,https://github.com/ros2/rclpy,800,2021-05-28T21:08:19Z,2021-08-18T14:06:27Z,2021-08-18T14:06:29Z,MERGED,True,20,21,1,https://github.com/ivanpauno,Call Context._logging_fini() in Context.try_shutdown(),4,['bug'],https://github.com/ros2/rclpy/pull/800,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/800#issuecomment-900637511,Fixes #518 (comment),"CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,803,2021-06-23T23:26:18Z,2021-08-11T22:51:25Z,2021-08-13T20:48:32Z,MERGED,True,3239,3472,64,https://github.com/sloretz,[Galactic] Backport pybind11 changes,10,[],https://github.com/ros2/rclpy/pull/803,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/803,This backports the Pybind11 changes that were intended for Galactic but couldn't be merged due to the Galactic freeze. #777,This backports the Pybind11 changes that were intended for Galactic but couldn't be merged due to the Galactic freeze. #777,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,803,2021-06-23T23:26:18Z,2021-08-11T22:51:25Z,2021-08-13T20:48:32Z,MERGED,True,3239,3472,64,https://github.com/sloretz,[Galactic] Backport pybind11 changes,10,[],https://github.com/ros2/rclpy/pull/803,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/803#issuecomment-867223031,This backports the Pybind11 changes that were intended for Galactic but couldn't be merged due to the Galactic freeze. #777,"Full CI (repos URL: https://raw.githubusercontent.com/ros2/ros2/galactic/ros2.repos)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,803,2021-06-23T23:26:18Z,2021-08-11T22:51:25Z,2021-08-13T20:48:32Z,MERGED,True,3239,3472,64,https://github.com/sloretz,[Galactic] Backport pybind11 changes,10,[],https://github.com/ros2/rclpy/pull/803,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/803#issuecomment-867818958,This backports the Pybind11 changes that were intended for Galactic but couldn't be merged due to the Galactic freeze. #777,CI LGTM! ros2param.ros2param.test.test_verb_list.test_verb_list and ros2param.ros2param.test.test_verb_load.test_verb_load  are known flaky tests - Here's a Galactic nigthly where they failed https://build.ros2.org/view/Gci/job/Gci__nightly-release_ubuntu_focal_amd64/8/,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,803,2021-06-23T23:26:18Z,2021-08-11T22:51:25Z,2021-08-13T20:48:32Z,MERGED,True,3239,3472,64,https://github.com/sloretz,[Galactic] Backport pybind11 changes,10,[],https://github.com/ros2/rclpy/pull/803,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/803#issuecomment-885818661,This backports the Pybind11 changes that were intended for Galactic but couldn't be merged due to the Galactic freeze. #777,@ivanpauno May I ask you to double check this PR before I merge it?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,803,2021-06-23T23:26:18Z,2021-08-11T22:51:25Z,2021-08-13T20:48:32Z,MERGED,True,3239,3472,64,https://github.com/sloretz,[Galactic] Backport pybind11 changes,10,[],https://github.com/ros2/rclpy/pull/803,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/803#issuecomment-897036046,This backports the Pybind11 changes that were intended for Galactic but couldn't be merged due to the Galactic freeze. #777,"I do have to ask though: are we absolutely sure we want to backport over ~3000 lines of code into an stable distribution?

That's a great question to ask. I think it's important in this case since it enables more backports, and makes the destruction handling of entities consistent.",True,{'THUMBS_UP': ['https://github.com/hidmic']}
ros2/rclpy,https://github.com/ros2/rclpy,803,2021-06-23T23:26:18Z,2021-08-11T22:51:25Z,2021-08-13T20:48:32Z,MERGED,True,3239,3472,64,https://github.com/sloretz,[Galactic] Backport pybind11 changes,10,[],https://github.com/ros2/rclpy/pull/803,https://github.com/sloretz,6,https://github.com/ros2/rclpy/pull/803#issuecomment-897069654,This backports the Pybind11 changes that were intended for Galactic but couldn't be merged due to the Galactic freeze. #777,"CI (galactic repos file + this branch, build: --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,803,2021-06-23T23:26:18Z,2021-08-11T22:51:25Z,2021-08-13T20:48:32Z,MERGED,True,3239,3472,64,https://github.com/sloretz,[Galactic] Backport pybind11 changes,10,[],https://github.com/ros2/rclpy/pull/803,https://github.com/sloretz,7,https://github.com/ros2/rclpy/pull/803#issuecomment-897211866,This backports the Pybind11 changes that were intended for Galactic but couldn't be merged due to the Galactic freeze. #777,"CI LGTM, merging 🎉",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,806,2021-07-20T22:27:20Z,,2021-08-19T12:45:55Z,OPEN,False,8,1,1,https://github.com/Tobias-Fischer,Fix Python linking on OSX,2,[],https://github.com/ros2/rclpy/pull/806,https://github.com/Tobias-Fischer,1,https://github.com/ros2/rclpy/pull/806,"See e.g. ros-perception/vision_opencv#331 for reasoning
Fixes #805","See e.g. ros-perception/vision_opencv#331 for reasoning
Fixes #805",True,{'THUMBS_UP': ['https://github.com/raghavauppuluri13']}
ros2/rclpy,https://github.com/ros2/rclpy,806,2021-07-20T22:27:20Z,,2021-08-19T12:45:55Z,OPEN,False,8,1,1,https://github.com/Tobias-Fischer,Fix Python linking on OSX,2,[],https://github.com/ros2/rclpy/pull/806,https://github.com/Tobias-Fischer,2,https://github.com/ros2/rclpy/pull/806#issuecomment-883747546,"See e.g. ros-perception/vision_opencv#331 for reasoning
Fixes #805",/cc @raghavauppuluri13 @wolfv,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,806,2021-07-20T22:27:20Z,,2021-08-19T12:45:55Z,OPEN,False,8,1,1,https://github.com/Tobias-Fischer,Fix Python linking on OSX,2,[],https://github.com/ros2/rclpy/pull/806,https://github.com/raghavauppuluri13,3,https://github.com/ros2/rclpy/pull/806#issuecomment-883758593,"See e.g. ros-perception/vision_opencv#331 for reasoning
Fixes #805","I added the missing flags, but didn't know about removing the python linking. Nice!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,806,2021-07-20T22:27:20Z,,2021-08-19T12:45:55Z,OPEN,False,8,1,1,https://github.com/Tobias-Fischer,Fix Python linking on OSX,2,[],https://github.com/ros2/rclpy/pull/806,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/806#issuecomment-884561938,"See e.g. ros-perception/vision_opencv#331 for reasoning
Fixes #805","CI (repos: https://gist.githubusercontent.com/sloretz/5a5bb6c456cbbe4a1a13c9c48df25939/raw/9a8fe89ca80e3062354ee6f87211dfac8edd8dd4/ros2.repos build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,806,2021-07-20T22:27:20Z,,2021-08-19T12:45:55Z,OPEN,False,8,1,1,https://github.com/Tobias-Fischer,Fix Python linking on OSX,2,[],https://github.com/ros2/rclpy/pull/806,https://github.com/Tobias-Fischer,5,https://github.com/ros2/rclpy/pull/806#issuecomment-884562918,"See e.g. ros-perception/vision_opencv#331 for reasoning
Fixes #805",Note that we still face issues in ros2 doctor. Do you have any idea where else PYTHON_LIBRARIES are linked directly @sloretz by any chance?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,806,2021-07-20T22:27:20Z,,2021-08-19T12:45:55Z,OPEN,False,8,1,1,https://github.com/Tobias-Fischer,Fix Python linking on OSX,2,[],https://github.com/ros2/rclpy/pull/806,https://github.com/sloretz,6,https://github.com/ros2/rclpy/pull/806#issuecomment-884563679,"See e.g. ros-perception/vision_opencv#331 for reasoning
Fixes #805","Do you have any idea where else PYTHON_LIBRARIES are linked directly @sloretz by any chance?

maybe here? https://github.com/ros2/rosidl_python/blob/17de859d09fdddc611f003757a9df1acab865cdf/rosidl_generator_py/cmake/rosidl_generator_py_generate_interfaces.cmake#L174",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,806,2021-07-20T22:27:20Z,,2021-08-19T12:45:55Z,OPEN,False,8,1,1,https://github.com/Tobias-Fischer,Fix Python linking on OSX,2,[],https://github.com/ros2/rclpy/pull/806,https://github.com/sloretz,7,https://github.com/ros2/rclpy/pull/806#issuecomment-885817916,"See e.g. ros-perception/vision_opencv#331 for reasoning
Fixes #805","@Tobias-Fischer Any idea why OSX CI for this PR had a segfault in one of the rclpy tests? I don't see the same issue on the nightly OSX job.
projectroot.test_c_handle
-- run_test.py: invoking following command in '/Users/osrf/jenkins-agent/workspace/ci_osx/ws/build/rclpy':
 - /Users/osrf/jenkins-agent/workspace/ci_osx/ws/build/rclpy/test_c_handle --gtest_output=xml:/Users/osrf/jenkins-agent/workspace/ci_osx/ws/build/rclpy/test_results/rclpy/test_c_handle.gtest.xml
dyld: Symbol not found: _PyExc_MemoryError
  Referenced from: /Users/osrf/jenkins-agent/workspace/ci_osx/ws/install/rclpy/lib/librclpy_common.dylib
  Expected in: flat namespace
 in /Users/osrf/jenkins-agent/workspace/ci_osx/ws/install/rclpy/lib/librclpy_common.dylib
-- run_test.py: return code -6",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,806,2021-07-20T22:27:20Z,,2021-08-19T12:45:55Z,OPEN,False,8,1,1,https://github.com/Tobias-Fischer,Fix Python linking on OSX,2,[],https://github.com/ros2/rclpy/pull/806,https://github.com/Tobias-Fischer,8,https://github.com/ros2/rclpy/pull/806#issuecomment-886142010,"See e.g. ros-perception/vision_opencv#331 for reasoning
Fixes #805","Unfortunately I have no idea re this exception.
Any clues @traversaro @wolfv?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,806,2021-07-20T22:27:20Z,,2021-08-19T12:45:55Z,OPEN,False,8,1,1,https://github.com/Tobias-Fischer,Fix Python linking on OSX,2,[],https://github.com/ros2/rclpy/pull/806,https://github.com/traversaro,9,https://github.com/ros2/rclpy/pull/806#issuecomment-886160784,"See e.g. ros-perception/vision_opencv#331 for reasoning
Fixes #805",It may be worth to check if the Python executable used for the tests is the same Python whose libraries (and headers) have been used to compile the extension.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,806,2021-07-20T22:27:20Z,,2021-08-19T12:45:55Z,OPEN,False,8,1,1,https://github.com/Tobias-Fischer,Fix Python linking on OSX,2,[],https://github.com/ros2/rclpy/pull/806,https://github.com/traversaro,10,https://github.com/ros2/rclpy/pull/806#issuecomment-886161680,"See e.g. ros-perception/vision_opencv#331 for reasoning
Fixes #805","It may be worth to check if the Python executable used for the tests is the same Python whose libraries (and headers) have been used to compile the extension.

The headers are particularly tricky, as even if CMake appears to have found the correct Python, the incorrect Python headers could be accidentally be used by compilation unit if the directory of the wrong Python is in the include path as it is installed in the prefix of some other dependency. This is however is just an hypothesis.
By inspecting the CI log, it seems that both Python 3.8 (the one that is then used to pip install dependencies and to create a venv) and Python 3.7 (that instead should be never used) are installed:
python 3.7.7
python@3.8 3.8.2

I am not sure if this is playing a role, perhaps it could make sense to try to uninstall the Python 3.7 if possible?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,806,2021-07-20T22:27:20Z,,2021-08-19T12:45:55Z,OPEN,False,8,1,1,https://github.com/Tobias-Fischer,Fix Python linking on OSX,2,[],https://github.com/ros2/rclpy/pull/806,https://github.com/traversaro,11,https://github.com/ros2/rclpy/pull/806#issuecomment-886162224,"See e.g. ros-perception/vision_opencv#331 for reasoning
Fixes #805","However, I quickly checked and _PyExc_MemoryError  is defined in any Python > 3.6 (see https://github.com/python/cpython/blob/3.6/Objects/exceptions.c#L2332), so it may be also worth to print the symbols exported (https://stackoverflow.com/questions/4506121/how-to-print-a-list-of-symbols-exported-from-a-dynamic-library) by the used Python library to understand if  _PyExc_MemoryError is indeed provided or not.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,806,2021-07-20T22:27:20Z,,2021-08-19T12:45:55Z,OPEN,False,8,1,1,https://github.com/Tobias-Fischer,Fix Python linking on OSX,2,[],https://github.com/ros2/rclpy/pull/806,https://github.com/wolfv,12,https://github.com/ros2/rclpy/pull/806#issuecomment-886170248,"See e.g. ros-perception/vision_opencv#331 for reasoning
Fixes #805","Maybe the difference is that we remove the ""DYLD_LIBRARY_PATH"" and in ""vanilla ROS"" it's set to some value? Just guessing",True,"{'THUMBS_UP': ['https://github.com/traversaro', 'https://github.com/Tobias-Fischer']}"
ros2/rclpy,https://github.com/ros2/rclpy,809,2021-08-04T18:58:03Z,2021-08-04T21:34:19Z,2021-08-04T21:35:09Z,MERGED,True,0,10,1,https://github.com/sloretz,Remove unused function make_mock_subscription,1,[],https://github.com/ros2/rclpy/pull/809,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/809,Signed-off-by: Shane Loretz sloretz@openrobotics.org,Signed-off-by: Shane Loretz sloretz@openrobotics.org,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,809,2021-08-04T18:58:03Z,2021-08-04T21:34:19Z,2021-08-04T21:35:09Z,MERGED,True,0,10,1,https://github.com/sloretz,Remove unused function make_mock_subscription,1,[],https://github.com/ros2/rclpy/pull/809,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/809#issuecomment-892897112,Signed-off-by: Shane Loretz sloretz@openrobotics.org,"CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,809,2021-08-04T18:58:03Z,2021-08-04T21:34:19Z,2021-08-04T21:35:09Z,MERGED,True,0,10,1,https://github.com/sloretz,Remove unused function make_mock_subscription,1,[],https://github.com/ros2/rclpy/pull/809,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/809#issuecomment-892990417,Signed-off-by: Shane Loretz sloretz@openrobotics.org,@Mergifyio backport galactic,True,{'THUMBS_UP': ['https://github.com/mergify%5Bbot%5D']}
ros2/rclpy,https://github.com/ros2/rclpy,809,2021-08-04T18:58:03Z,2021-08-04T21:34:19Z,2021-08-04T21:35:09Z,MERGED,True,0,10,1,https://github.com/sloretz,Remove unused function make_mock_subscription,1,[],https://github.com/ros2/rclpy/pull/809,https://github.com/apps/mergify,4,https://github.com/ros2/rclpy/pull/809#issuecomment-892990660,Signed-off-by: Shane Loretz sloretz@openrobotics.org,"Command backport galactic: success

Backports have been created

#810 Remove unused function make_mock_subscription (backport #809) has been created for branch galactic",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,810,2021-08-04T21:35:07Z,2021-08-12T17:30:53Z,2021-08-12T17:30:56Z,MERGED,True,0,10,1,https://github.com/apps/mergify,Remove unused function make_mock_subscription (backport #809),1,[],https://github.com/ros2/rclpy/pull/810,https://github.com/apps/mergify,1,https://github.com/ros2/rclpy/pull/810,"This is an automatic backport of pull request #809 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/","This is an automatic backport of pull request #809 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,810,2021-08-04T21:35:07Z,2021-08-12T17:30:53Z,2021-08-12T17:30:56Z,MERGED,True,0,10,1,https://github.com/apps/mergify,Remove unused function make_mock_subscription (backport #809),1,[],https://github.com/ros2/rclpy/pull/810,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/810#issuecomment-892991095,"This is an automatic backport of pull request #809 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/",This depends on #803 and should only be merged after that one.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,810,2021-08-04T21:35:07Z,2021-08-12T17:30:53Z,2021-08-12T17:30:56Z,MERGED,True,0,10,1,https://github.com/apps/mergify,Remove unused function make_mock_subscription (backport #809),1,[],https://github.com/ros2/rclpy/pull/810,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/810#issuecomment-897788671,"This is an automatic backport of pull request #809 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,810,2021-08-04T21:35:07Z,2021-08-12T17:30:53Z,2021-08-12T17:30:56Z,MERGED,True,0,10,1,https://github.com/apps/mergify,Remove unused function make_mock_subscription (backport #809),1,[],https://github.com/ros2/rclpy/pull/810,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/810#issuecomment-897826979,"This is an automatic backport of pull request #809 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/",Since this only removes unused code in a test it seems sufficiently tested by the passing PR job. Merging.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,812,2021-08-11T18:22:03Z,2021-08-12T16:32:33Z,2021-08-12T16:32:37Z,MERGED,True,24,20,1,https://github.com/sloretz,Set Context.__context to None in __init__,1,[],https://github.com/ros2/rclpy/pull/812,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/812,"Follow up to #803 (comment)
marking as Draft because I didn't test this locally edit: ready for review - testing rclpy on CI:","Follow up to #803 (comment)
marking as Draft because I didn't test this locally edit: ready for review - testing rclpy on CI:",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,812,2021-08-11T18:22:03Z,2021-08-12T16:32:33Z,2021-08-12T16:32:37Z,MERGED,True,24,20,1,https://github.com/sloretz,Set Context.__context to None in __init__,1,[],https://github.com/ros2/rclpy/pull/812,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/812#issuecomment-897130522,"Follow up to #803 (comment)
marking as Draft because I didn't test this locally edit: ready for review - testing rclpy on CI:","CI (build:  --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,812,2021-08-11T18:22:03Z,2021-08-12T16:32:33Z,2021-08-12T16:32:37Z,MERGED,True,24,20,1,https://github.com/sloretz,Set Context.__context to None in __init__,1,[],https://github.com/ros2/rclpy/pull/812,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/812#issuecomment-897788220,"Follow up to #803 (comment)
marking as Draft because I didn't test this locally edit: ready for review - testing rclpy on CI:",Thanks for the review!,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,813,2021-08-11T22:52:16Z,2021-08-11T22:53:24Z,2021-08-11T22:53:31Z,CLOSED,False,14,341,16,https://github.com/apps/mergify,Deleted handle as it should no longer be used (backport #786),1,['conflicts'],https://github.com/ros2/rclpy/pull/813,https://github.com/apps/mergify,1,https://github.com/ros2/rclpy/pull/813,"This is an automatic backport of pull request #786 done by Mergify.
Cherry-pick of 5898ef2 has failed:
On branch mergify/bp/galactic/pr-786
Your branch is up to date with 'origin/galactic'.

You are currently cherry-picking commit 5898ef2.
  (fix conflicts and run ""git cherry-pick --continue"")
  (use ""git cherry-pick --skip"" to skip this patch)
  (use ""git cherry-pick --abort"" to cancel the cherry-pick operation)

Changes to be committed:
	modified:   rclpy/CMakeLists.txt
	modified:   rclpy/rclpy/exceptions.py
	modified:   rclpy/rclpy/executors.py
	deleted:    rclpy/rclpy/handle.py
	modified:   rclpy/rclpy/node.py
	modified:   rclpy/rclpy/signals.py
	modified:   rclpy/rclpy/timer.py
	modified:   rclpy/src/rclpy/action_goal_handle.hpp
	deleted:    rclpy/src/rclpy/handle.cpp
	deleted:    rclpy/src/rclpy/handle.hpp
	modified:   rclpy/src/rclpy/qos_event.hpp
	modified:   rclpy/src/rclpy/service.hpp
	modified:   rclpy/src/rclpy/timer.hpp
	modified:   rclpy/test/test_destruction.py
	deleted:    rclpy/test/test_handle.py

Unmerged paths:
  (use ""git add <file>..."" to mark resolution)
	both modified:   rclpy/src/rclpy/clock.hpp


To fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/","This is an automatic backport of pull request #786 done by Mergify.
Cherry-pick of 5898ef2 has failed:
On branch mergify/bp/galactic/pr-786
Your branch is up to date with 'origin/galactic'.

You are currently cherry-picking commit 5898ef2.
  (fix conflicts and run ""git cherry-pick --continue"")
  (use ""git cherry-pick --skip"" to skip this patch)
  (use ""git cherry-pick --abort"" to cancel the cherry-pick operation)

Changes to be committed:
	modified:   rclpy/CMakeLists.txt
	modified:   rclpy/rclpy/exceptions.py
	modified:   rclpy/rclpy/executors.py
	deleted:    rclpy/rclpy/handle.py
	modified:   rclpy/rclpy/node.py
	modified:   rclpy/rclpy/signals.py
	modified:   rclpy/rclpy/timer.py
	modified:   rclpy/src/rclpy/action_goal_handle.hpp
	deleted:    rclpy/src/rclpy/handle.cpp
	deleted:    rclpy/src/rclpy/handle.hpp
	modified:   rclpy/src/rclpy/qos_event.hpp
	modified:   rclpy/src/rclpy/service.hpp
	modified:   rclpy/src/rclpy/timer.hpp
	modified:   rclpy/test/test_destruction.py
	deleted:    rclpy/test/test_handle.py

Unmerged paths:
  (use ""git add <file>..."" to mark resolution)
	both modified:   rclpy/src/rclpy/clock.hpp


To fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,813,2021-08-11T22:52:16Z,2021-08-11T22:53:24Z,2021-08-11T22:53:31Z,CLOSED,False,14,341,16,https://github.com/apps/mergify,Deleted handle as it should no longer be used (backport #786),1,['conflicts'],https://github.com/ros2/rclpy/pull/813,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/813#issuecomment-897212710,"This is an automatic backport of pull request #786 done by Mergify.
Cherry-pick of 5898ef2 has failed:
On branch mergify/bp/galactic/pr-786
Your branch is up to date with 'origin/galactic'.

You are currently cherry-picking commit 5898ef2.
  (fix conflicts and run ""git cherry-pick --continue"")
  (use ""git cherry-pick --skip"" to skip this patch)
  (use ""git cherry-pick --abort"" to cancel the cherry-pick operation)

Changes to be committed:
	modified:   rclpy/CMakeLists.txt
	modified:   rclpy/rclpy/exceptions.py
	modified:   rclpy/rclpy/executors.py
	deleted:    rclpy/rclpy/handle.py
	modified:   rclpy/rclpy/node.py
	modified:   rclpy/rclpy/signals.py
	modified:   rclpy/rclpy/timer.py
	modified:   rclpy/src/rclpy/action_goal_handle.hpp
	deleted:    rclpy/src/rclpy/handle.cpp
	deleted:    rclpy/src/rclpy/handle.hpp
	modified:   rclpy/src/rclpy/qos_event.hpp
	modified:   rclpy/src/rclpy/service.hpp
	modified:   rclpy/src/rclpy/timer.hpp
	modified:   rclpy/test/test_destruction.py
	deleted:    rclpy/test/test_handle.py

Unmerged paths:
  (use ""git add <file>..."" to mark resolution)
	both modified:   rclpy/src/rclpy/clock.hpp


To fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/","cherry-pick failed and this just deletes code, it doesn't fix a bug or add a feature. I'll close this rather than look into fixing it.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,814,2021-08-11T23:18:53Z,2021-10-01T17:20:36Z,2021-10-08T21:30:17Z,MERGED,True,71,835,16,https://github.com/sloretz,"Use pybind11 for signal handling, and delete now unused rclpy_common, pycapsule, and handle code",4,[],https://github.com/ros2/rclpy/pull/814,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/814,"This uses pybind11 for the signal handler APIs. It replaces rcutils atomics with with std::atomic because C and C++ atomics headers can't be mixed (until C++23?). Finally this deletes the now unused code for handle, pycapsule, and rclpy_common.
Replaces #728
Closes #665 (finally 🎉)","This uses pybind11 for the signal handler APIs. It replaces rcutils atomics with with std::atomic because C and C++ atomics headers can't be mixed (until C++23?). Finally this deletes the now unused code for handle, pycapsule, and rclpy_common.
Replaces #728
Closes #665 (finally 🎉)",True,{'HOORAY': ['https://github.com/IanTheEngineer']}
ros2/rclpy,https://github.com/ros2/rclpy,814,2021-08-11T23:18:53Z,2021-10-01T17:20:36Z,2021-10-08T21:30:17Z,MERGED,True,71,835,16,https://github.com/sloretz,"Use pybind11 for signal handling, and delete now unused rclpy_common, pycapsule, and handle code",4,[],https://github.com/ros2/rclpy/pull/814,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/814#issuecomment-897225226,"This uses pybind11 for the signal handler APIs. It replaces rcutils atomics with with std::atomic because C and C++ atomics headers can't be mixed (until C++23?). Finally this deletes the now unused code for handle, pycapsule, and rclpy_common.
Replaces #728
Closes #665 (finally 🎉)","CI (build: --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,814,2021-08-11T23:18:53Z,2021-10-01T17:20:36Z,2021-10-08T21:30:17Z,MERGED,True,71,835,16,https://github.com/sloretz,"Use pybind11 for signal handling, and delete now unused rclpy_common, pycapsule, and handle code",4,[],https://github.com/ros2/rclpy/pull/814,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/814#issuecomment-926969510,"This uses pybind11 for the signal handler APIs. It replaces rcutils atomics with with std::atomic because C and C++ atomics headers can't be mixed (until C++23?). Finally this deletes the now unused code for handle, pycapsule, and rclpy_common.
Replaces #728
Closes #665 (finally 🎉)","@ivanpauno may I ask for a review of this one, especially since changes to handle sigterm like sigint are probably coming?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,814,2021-08-11T23:18:53Z,2021-10-01T17:20:36Z,2021-10-08T21:30:17Z,MERGED,True,71,835,16,https://github.com/sloretz,"Use pybind11 for signal handling, and delete now unused rclpy_common, pycapsule, and handle code",4,[],https://github.com/ros2/rclpy/pull/814,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/814#issuecomment-931397989,"This uses pybind11 for the signal handler APIs. It replaces rcutils atomics with with std::atomic because C and C++ atomics headers can't be mixed (until C++23?). Finally this deletes the now unused code for handle, pycapsule, and rclpy_common.
Replaces #728
Closes #665 (finally 🎉)",@sloretz friendly ping,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,814,2021-08-11T23:18:53Z,2021-10-01T17:20:36Z,2021-10-08T21:30:17Z,MERGED,True,71,835,16,https://github.com/sloretz,"Use pybind11 for signal handling, and delete now unused rclpy_common, pycapsule, and handle code",4,[],https://github.com/ros2/rclpy/pull/814,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/814#issuecomment-931531058,"This uses pybind11 for the signal handler APIs. It replaces rcutils atomics with with std::atomic because C and C++ atomics headers can't be mixed (until C++23?). Finally this deletes the now unused code for handle, pycapsule, and rclpy_common.
Replaces #728
Closes #665 (finally 🎉)","CI (build:  --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,814,2021-08-11T23:18:53Z,2021-10-01T17:20:36Z,2021-10-08T21:30:17Z,MERGED,True,71,835,16,https://github.com/sloretz,"Use pybind11 for signal handling, and delete now unused rclpy_common, pycapsule, and handle code",4,[],https://github.com/ros2/rclpy/pull/814,https://github.com/sloretz,6,https://github.com/ros2/rclpy/pull/814#issuecomment-931793887,"This uses pybind11 for the signal handler APIs. It replaces rcutils atomics with with std::atomic because C and C++ atomics headers can't be mixed (until C++23?). Finally this deletes the now unused code for handle, pycapsule, and rclpy_common.
Replaces #728
Closes #665 (finally 🎉)","Windows failures re not in the most recent nightly Windows repeated job, so investigating these.
    launch_testing_ros.test.examples.set_param_launch_test.set_param_launch_test
    launch_testing_ros.test.examples.talker_listener_launch_test.talker_listener_launch_test

OSX Failures are also all in the most recent nightlty OSX repeated job, so it's unlikely they're caused by this PR: https://ci.ros2.org/view/nightly/job/nightly_osx_repeated/2493/#showFailuresLink
    projectroot.test_kdl
    projectroot.test_tf2_geometry_msgs
    projectroot.tf2_eigen_test
    projectroot.test_tf2_bullet
    projectroot.test_tf2_sensor_msgs_cpp",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,814,2021-08-11T23:18:53Z,2021-10-01T17:20:36Z,2021-10-08T21:30:17Z,MERGED,True,71,835,16,https://github.com/sloretz,"Use pybind11 for signal handling, and delete now unused rclpy_common, pycapsule, and handle code",4,[],https://github.com/ros2/rclpy/pull/814,https://github.com/sloretz,7,https://github.com/ros2/rclpy/pull/814#issuecomment-931808805,"This uses pybind11 for the signal handler APIs. It replaces rcutils atomics with with std::atomic because C and C++ atomics headers can't be mixed (until C++23?). Finally this deletes the now unused code for handle, pycapsule, and rclpy_common.
Replaces #728
Closes #665 (finally 🎉)","Windows CI failure is definitely not due to this PR. It's due to a client not getting a service response. I don't know why that is, but I opened ros2/launch_ros#273 to improve how the test responds to that case.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,814,2021-08-11T23:18:53Z,2021-10-01T17:20:36Z,2021-10-08T21:30:17Z,MERGED,True,71,835,16,https://github.com/sloretz,"Use pybind11 for signal handling, and delete now unused rclpy_common, pycapsule, and handle code",4,[],https://github.com/ros2/rclpy/pull/814,https://github.com/sloretz,8,https://github.com/ros2/rclpy/pull/814#issuecomment-931809044,"This uses pybind11 for the signal handler APIs. It replaces rcutils atomics with with std::atomic because C and C++ atomics headers can't be mixed (until C++23?). Finally this deletes the now unused code for handle, pycapsule, and rclpy_common.
Replaces #728
Closes #665 (finally 🎉)","@ivanpauno if this still looks good to you after the new commit, I think CI is good enough to merge.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,814,2021-08-11T23:18:53Z,2021-10-01T17:20:36Z,2021-10-08T21:30:17Z,MERGED,True,71,835,16,https://github.com/sloretz,"Use pybind11 for signal handling, and delete now unused rclpy_common, pycapsule, and handle code",4,[],https://github.com/ros2/rclpy/pull/814,https://github.com/Blast545,9,https://github.com/ros2/rclpy/pull/814#issuecomment-939125178,"This uses pybind11 for the signal handler APIs. It replaces rcutils atomics with with std::atomic because C and C++ atomics headers can't be mixed (until C++23?). Finally this deletes the now unused code for handle, pycapsule, and rclpy_common.
Replaces #728
Closes #665 (finally 🎉)","🕵️‍♂️ I think is causing test lots of test regressions in windows CI.
https://ci.ros2.org/view/nightly/job/nightly_win_deb/2134/

Traceback (most recent call last):

  File ""C:\Python38\lib\runpy.py"", line 194, in _run_module_as_main

    return _run_code(code, main_globals, None,

  File ""C:\Python38\lib\runpy.py"", line 87, in _run_code

    exec(code, run_globals)

  File ""C:\Python38\lib\site-packages\pytest\__main__.py"", line 5, in <module>

    raise SystemExit(pytest.console_main())

  File ""C:\Python38\lib\site-packages\_pytest\config\__init__.py"", line 185, in console_main

    code = main()

  File ""C:\Python38\lib\site-packages\_pytest\config\__init__.py"", line 143, in main

    config = _prepareconfig(args, plugins)

  File ""C:\Python38\lib\site-packages\_pytest\config\__init__.py"", line 318, in _prepareconfig

    config = pluginmanager.hook.pytest_cmdline_parse(

  File ""C:\Python38\lib\site-packages\pluggy\_hooks.py"", line 265, in __call__

    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)

  File ""C:\Python38\lib\site-packages\pluggy\_manager.py"", line 80, in _hookexec

    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)

  File ""C:\Python38\lib\site-packages\pluggy\_callers.py"", line 55, in _multicall

    gen.send(outcome)

  File ""C:\Python38\lib\site-packages\_pytest\helpconfig.py"", line 100, in pytest_cmdline_parse

    config: Config = outcome.get_result()

  File ""C:\Python38\lib\site-packages\pluggy\_result.py"", line 60, in get_result

    raise ex[1].with_traceback(ex[2])

  File ""C:\Python38\lib\site-packages\pluggy\_callers.py"", line 39, in _multicall

    res = hook_impl.function(*args)

  File ""C:\Python38\lib\site-packages\_pytest\config\__init__.py"", line 1003, in pytest_cmdline_parse

    self.parse(args)

  File ""C:\Python38\lib\site-packages\_pytest\config\__init__.py"", line 1283, in parse

    self._preparse(args, addopts=addopts)

  File ""C:\Python38\lib\site-packages\_pytest\config\__init__.py"", line 1172, in _preparse

    self.pluginmanager.load_setuptools_entrypoints(""pytest11"")

  File ""C:\Python38\lib\site-packages\pluggy\_manager.py"", line 287, in load_setuptools_entrypoints

    plugin = ep.load()

  File ""C:\Python38\lib\importlib\metadata.py"", line 77, in load

    module = import_module(match.group('module'))

  File ""C:\Python38\lib\importlib\__init__.py"", line 127, in import_module

    return _bootstrap._gcd_import(name[level:], package, level)

  File ""<frozen importlib._bootstrap>"", line 1014, in _gcd_import

  File ""<frozen importlib._bootstrap>"", line 991, in _find_and_load

  File ""<frozen importlib._bootstrap>"", line 961, in _find_and_load_unlocked

  File ""<frozen importlib._bootstrap>"", line 219, in _call_with_frames_removed

  File ""<frozen importlib._bootstrap>"", line 1014, in _gcd_import

  File ""<frozen importlib._bootstrap>"", line 991, in _find_and_load

  File ""<frozen importlib._bootstrap>"", line 961, in _find_and_load_unlocked

  File ""<frozen importlib._bootstrap>"", line 219, in _call_with_frames_removed

  File ""<frozen importlib._bootstrap>"", line 1014, in _gcd_import

  File ""<frozen importlib._bootstrap>"", line 991, in _find_and_load

  File ""<frozen importlib._bootstrap>"", line 975, in _find_and_load_unlocked

  File ""<frozen importlib._bootstrap>"", line 671, in _load_unlocked

  File ""C:\Python38\lib\site-packages\_pytest\assertion\rewrite.py"", line 170, in exec_module

    exec(co, module.__dict__)

  File ""C:\ci\ws\install\Lib\site-packages\launch_testing_ros\__init__.py"", line 20, in <module>

    from . wait_for_topics import WaitForTopics

  File ""C:\Python38\lib\site-packages\_pytest\assertion\rewrite.py"", line 170, in exec_module

    exec(co, module.__dict__)

  File ""C:\ci\ws\install\Lib\site-packages\launch_testing_ros\wait_for_topics.py"", line 21, in <module>

    from rclpy.executors import SingleThreadedExecutor

  File ""C:\ci\ws\install\Lib\site-packages\rclpy\executors.py"", line 36, in <module>

    from rclpy.client import Client

  File ""C:\ci\ws\install\Lib\site-packages\rclpy\client.py"", line 22, in <module>

    from rclpy.impl.implementation_singleton import rclpy_implementation as _rclpy

  File ""C:\ci\ws\install\Lib\site-packages\rclpy\impl\implementation_singleton.py"", line 32, in <module>

    rclpy_implementation = import_c_library('._rclpy_pybind11', package)

  File ""C:\ci\ws\install\Lib\site-packages\rpyutils\import_c_library.py"", line 39, in import_c_library

    return importlib.import_module(name, package=package)

  File ""C:\Python38\lib\importlib\__init__.py"", line 127, in import_module

    return _bootstrap._gcd_import(name[level:], package, level)

ImportError: DLL load failed while importing _rclpy_pybind11: The specified module could not be found.

The C extension 'C:\ci\ws\install\Lib\site-packages\rclpy\_rclpy_pybind11.cp38-win_amd64.pyd' failed to be imported while being present on the system. Please refer to 'https://docs.ros.org/en/{distro}/Guides/Installation-Troubleshooting.html#import-failing-even-with-library-present-on-the-system' for possible solutions

---
Finished <<< ament_package [1.11s]	[ with test failures ]


It seems that Windows can't find the correct path to _rclpy_pybind11 for the tests added with ros2/launch_ros#274.
Can I ask you to take a quick look? @sloretz You may have more context about what's going on.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,816,2021-08-17T00:04:52Z,2021-08-31T21:56:12Z,2021-09-01T13:41:11Z,MERGED,True,3,1,1,https://github.com/sloretz,Only add one done callback to a future,2,[],https://github.com/ros2/rclpy/pull/816,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/816,"This seems to fix an issue in #605
The issue is reproducible with the snippet below. It is using a MultiThreadedExecutor and sending sequential client requests to a server on a different node in the same executor. By the 3rd or 4th request, the observed behavior is the server stops responding. I observed with print statements in MultiThreadedExecutor.spin_once_until_future_complete() that the number of calls to it seems to grow very rapidly with each new client request.
I suspect that the previous future's done callbacks are being executed while the next future waits. The first future's done callbacks wake the executor, and that causes MultiThreadedExecutor.spin_once_until_future_complete() to be called again on the next future, which adds another done callback to the next future. That compounds and causes the next future to add even more done callbacks to the one after that. I'm not sure I understand the problem completely, but this change seems to resolve the issue.
This PR fixes the issue by only adding a single done callback in spin_until_future_complete().
Reproducing code
import rclpy

from example_interfaces.srv import AddTwoInts


rclpy.init()

def server_callback(cb_req, cb_rsp):
    print(f'Server callback request {cb_req.a} + {cb_req.b}')
    cb_rsp.sum = cb_req.a + cb_req.b
    return cb_rsp


# setup
server_node = rclpy.create_node(""test_server"")
server = server_node.create_service(AddTwoInts, ""/test_server"", server_callback)
client_node = rclpy.create_node(f""test_client"")
client = client_node.create_client(AddTwoInts, ""/test_server"")

executor = rclpy.executors.MultiThreadedExecutor()
executor.add_node(server_node)
executor.add_node(client_node)

for ii in range(10):
    print(f'Begin iteration {ii}')

    # Send a request
    req = AddTwoInts.Request()
    req.a = ii
    req.b = 0
    call_future = client.call_async(req)

    # Wait for a response
    executor.spin_until_future_complete(call_future, timeout_sec=10.0)
    print(f'Call future done? {call_future.done()}')
    if call_future.done():
        print(f'Response {call_future.result()}')

    print(f'End iteration {ii}')


# Cleanup
client_node.destroy_client(client)

server_node.destroy_service(server)
server_node.destroy_node()
client_node.destroy_node()

rclpy.shutdown()","This seems to fix an issue in #605
The issue is reproducible with the snippet below. It is using a MultiThreadedExecutor and sending sequential client requests to a server on a different node in the same executor. By the 3rd or 4th request, the observed behavior is the server stops responding. I observed with print statements in MultiThreadedExecutor.spin_once_until_future_complete() that the number of calls to it seems to grow very rapidly with each new client request.
I suspect that the previous future's done callbacks are being executed while the next future waits. The first future's done callbacks wake the executor, and that causes MultiThreadedExecutor.spin_once_until_future_complete() to be called again on the next future, which adds another done callback to the next future. That compounds and causes the next future to add even more done callbacks to the one after that. I'm not sure I understand the problem completely, but this change seems to resolve the issue.
This PR fixes the issue by only adding a single done callback in spin_until_future_complete().
Reproducing code
import rclpy

from example_interfaces.srv import AddTwoInts


rclpy.init()

def server_callback(cb_req, cb_rsp):
    print(f'Server callback request {cb_req.a} + {cb_req.b}')
    cb_rsp.sum = cb_req.a + cb_req.b
    return cb_rsp


# setup
server_node = rclpy.create_node(""test_server"")
server = server_node.create_service(AddTwoInts, ""/test_server"", server_callback)
client_node = rclpy.create_node(f""test_client"")
client = client_node.create_client(AddTwoInts, ""/test_server"")

executor = rclpy.executors.MultiThreadedExecutor()
executor.add_node(server_node)
executor.add_node(client_node)

for ii in range(10):
    print(f'Begin iteration {ii}')

    # Send a request
    req = AddTwoInts.Request()
    req.a = ii
    req.b = 0
    call_future = client.call_async(req)

    # Wait for a response
    executor.spin_until_future_complete(call_future, timeout_sec=10.0)
    print(f'Call future done? {call_future.done()}')
    if call_future.done():
        print(f'Response {call_future.result()}')

    print(f'End iteration {ii}')


# Cleanup
client_node.destroy_client(client)

server_node.destroy_service(server)
server_node.destroy_node()
client_node.destroy_node()

rclpy.shutdown()",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,816,2021-08-17T00:04:52Z,2021-08-31T21:56:12Z,2021-09-01T13:41:11Z,MERGED,True,3,1,1,https://github.com/sloretz,Only add one done callback to a future,2,[],https://github.com/ros2/rclpy/pull/816,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/816#issuecomment-900536342,"This seems to fix an issue in #605
The issue is reproducible with the snippet below. It is using a MultiThreadedExecutor and sending sequential client requests to a server on a different node in the same executor. By the 3rd or 4th request, the observed behavior is the server stops responding. I observed with print statements in MultiThreadedExecutor.spin_once_until_future_complete() that the number of calls to it seems to grow very rapidly with each new client request.
I suspect that the previous future's done callbacks are being executed while the next future waits. The first future's done callbacks wake the executor, and that causes MultiThreadedExecutor.spin_once_until_future_complete() to be called again on the next future, which adds another done callback to the next future. That compounds and causes the next future to add even more done callbacks to the one after that. I'm not sure I understand the problem completely, but this change seems to resolve the issue.
This PR fixes the issue by only adding a single done callback in spin_until_future_complete().
Reproducing code
import rclpy

from example_interfaces.srv import AddTwoInts


rclpy.init()

def server_callback(cb_req, cb_rsp):
    print(f'Server callback request {cb_req.a} + {cb_req.b}')
    cb_rsp.sum = cb_req.a + cb_req.b
    return cb_rsp


# setup
server_node = rclpy.create_node(""test_server"")
server = server_node.create_service(AddTwoInts, ""/test_server"", server_callback)
client_node = rclpy.create_node(f""test_client"")
client = client_node.create_client(AddTwoInts, ""/test_server"")

executor = rclpy.executors.MultiThreadedExecutor()
executor.add_node(server_node)
executor.add_node(client_node)

for ii in range(10):
    print(f'Begin iteration {ii}')

    # Send a request
    req = AddTwoInts.Request()
    req.a = ii
    req.b = 0
    call_future = client.call_async(req)

    # Wait for a response
    executor.spin_until_future_complete(call_future, timeout_sec=10.0)
    print(f'Call future done? {call_future.done()}')
    if call_future.done():
        print(f'Response {call_future.result()}')

    print(f'End iteration {ii}')


# Cleanup
client_node.destroy_client(client)

server_node.destroy_service(server)
server_node.destroy_node()
client_node.destroy_node()

rclpy.shutdown()","The first future's done callbacks wake the executor, and that causes MultiThreadedExecutor.spin_once_until_future_complete() to be called again on the next future, which adds another done callback to the next future. That compounds and causes the next future to add even more done callbacks to the one after that

that's a good one 🤦‍♂️",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,816,2021-08-17T00:04:52Z,2021-08-31T21:56:12Z,2021-09-01T13:41:11Z,MERGED,True,3,1,1,https://github.com/sloretz,Only add one done callback to a future,2,[],https://github.com/ros2/rclpy/pull/816,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/816#issuecomment-909635823,"This seems to fix an issue in #605
The issue is reproducible with the snippet below. It is using a MultiThreadedExecutor and sending sequential client requests to a server on a different node in the same executor. By the 3rd or 4th request, the observed behavior is the server stops responding. I observed with print statements in MultiThreadedExecutor.spin_once_until_future_complete() that the number of calls to it seems to grow very rapidly with each new client request.
I suspect that the previous future's done callbacks are being executed while the next future waits. The first future's done callbacks wake the executor, and that causes MultiThreadedExecutor.spin_once_until_future_complete() to be called again on the next future, which adds another done callback to the next future. That compounds and causes the next future to add even more done callbacks to the one after that. I'm not sure I understand the problem completely, but this change seems to resolve the issue.
This PR fixes the issue by only adding a single done callback in spin_until_future_complete().
Reproducing code
import rclpy

from example_interfaces.srv import AddTwoInts


rclpy.init()

def server_callback(cb_req, cb_rsp):
    print(f'Server callback request {cb_req.a} + {cb_req.b}')
    cb_rsp.sum = cb_req.a + cb_req.b
    return cb_rsp


# setup
server_node = rclpy.create_node(""test_server"")
server = server_node.create_service(AddTwoInts, ""/test_server"", server_callback)
client_node = rclpy.create_node(f""test_client"")
client = client_node.create_client(AddTwoInts, ""/test_server"")

executor = rclpy.executors.MultiThreadedExecutor()
executor.add_node(server_node)
executor.add_node(client_node)

for ii in range(10):
    print(f'Begin iteration {ii}')

    # Send a request
    req = AddTwoInts.Request()
    req.a = ii
    req.b = 0
    call_future = client.call_async(req)

    # Wait for a response
    executor.spin_until_future_complete(call_future, timeout_sec=10.0)
    print(f'Call future done? {call_future.done()}')
    if call_future.done():
        print(f'Response {call_future.result()}')

    print(f'End iteration {ii}')


# Cleanup
client_node.destroy_client(client)

server_node.destroy_service(server)
server_node.destroy_node()
client_node.destroy_node()

rclpy.shutdown()","CI (build: --packages-up-to rclpy test:  --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,816,2021-08-17T00:04:52Z,2021-08-31T21:56:12Z,2021-09-01T13:41:11Z,MERGED,True,3,1,1,https://github.com/sloretz,Only add one done callback to a future,2,[],https://github.com/ros2/rclpy/pull/816,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/816#issuecomment-910296387,"This seems to fix an issue in #605
The issue is reproducible with the snippet below. It is using a MultiThreadedExecutor and sending sequential client requests to a server on a different node in the same executor. By the 3rd or 4th request, the observed behavior is the server stops responding. I observed with print statements in MultiThreadedExecutor.spin_once_until_future_complete() that the number of calls to it seems to grow very rapidly with each new client request.
I suspect that the previous future's done callbacks are being executed while the next future waits. The first future's done callbacks wake the executor, and that causes MultiThreadedExecutor.spin_once_until_future_complete() to be called again on the next future, which adds another done callback to the next future. That compounds and causes the next future to add even more done callbacks to the one after that. I'm not sure I understand the problem completely, but this change seems to resolve the issue.
This PR fixes the issue by only adding a single done callback in spin_until_future_complete().
Reproducing code
import rclpy

from example_interfaces.srv import AddTwoInts


rclpy.init()

def server_callback(cb_req, cb_rsp):
    print(f'Server callback request {cb_req.a} + {cb_req.b}')
    cb_rsp.sum = cb_req.a + cb_req.b
    return cb_rsp


# setup
server_node = rclpy.create_node(""test_server"")
server = server_node.create_service(AddTwoInts, ""/test_server"", server_callback)
client_node = rclpy.create_node(f""test_client"")
client = client_node.create_client(AddTwoInts, ""/test_server"")

executor = rclpy.executors.MultiThreadedExecutor()
executor.add_node(server_node)
executor.add_node(client_node)

for ii in range(10):
    print(f'Begin iteration {ii}')

    # Send a request
    req = AddTwoInts.Request()
    req.a = ii
    req.b = 0
    call_future = client.call_async(req)

    # Wait for a response
    executor.spin_until_future_complete(call_future, timeout_sec=10.0)
    print(f'Call future done? {call_future.done()}')
    if call_future.done():
        print(f'Response {call_future.result()}')

    print(f'End iteration {ii}')


# Cleanup
client_node.destroy_client(client)

server_node.destroy_service(server)
server_node.destroy_node()
client_node.destroy_node()

rclpy.shutdown()",@Mergifyio backport foxy galactic,True,{'THUMBS_UP': ['https://github.com/mergify%5Bbot%5D']}
ros2/rclpy,https://github.com/ros2/rclpy,816,2021-08-17T00:04:52Z,2021-08-31T21:56:12Z,2021-09-01T13:41:11Z,MERGED,True,3,1,1,https://github.com/sloretz,Only add one done callback to a future,2,[],https://github.com/ros2/rclpy/pull/816,https://github.com/apps/mergify,5,https://github.com/ros2/rclpy/pull/816#issuecomment-910297036,"This seems to fix an issue in #605
The issue is reproducible with the snippet below. It is using a MultiThreadedExecutor and sending sequential client requests to a server on a different node in the same executor. By the 3rd or 4th request, the observed behavior is the server stops responding. I observed with print statements in MultiThreadedExecutor.spin_once_until_future_complete() that the number of calls to it seems to grow very rapidly with each new client request.
I suspect that the previous future's done callbacks are being executed while the next future waits. The first future's done callbacks wake the executor, and that causes MultiThreadedExecutor.spin_once_until_future_complete() to be called again on the next future, which adds another done callback to the next future. That compounds and causes the next future to add even more done callbacks to the one after that. I'm not sure I understand the problem completely, but this change seems to resolve the issue.
This PR fixes the issue by only adding a single done callback in spin_until_future_complete().
Reproducing code
import rclpy

from example_interfaces.srv import AddTwoInts


rclpy.init()

def server_callback(cb_req, cb_rsp):
    print(f'Server callback request {cb_req.a} + {cb_req.b}')
    cb_rsp.sum = cb_req.a + cb_req.b
    return cb_rsp


# setup
server_node = rclpy.create_node(""test_server"")
server = server_node.create_service(AddTwoInts, ""/test_server"", server_callback)
client_node = rclpy.create_node(f""test_client"")
client = client_node.create_client(AddTwoInts, ""/test_server"")

executor = rclpy.executors.MultiThreadedExecutor()
executor.add_node(server_node)
executor.add_node(client_node)

for ii in range(10):
    print(f'Begin iteration {ii}')

    # Send a request
    req = AddTwoInts.Request()
    req.a = ii
    req.b = 0
    call_future = client.call_async(req)

    # Wait for a response
    executor.spin_until_future_complete(call_future, timeout_sec=10.0)
    print(f'Call future done? {call_future.done()}')
    if call_future.done():
        print(f'Response {call_future.result()}')

    print(f'End iteration {ii}')


# Cleanup
client_node.destroy_client(client)

server_node.destroy_service(server)
server_node.destroy_node()
client_node.destroy_node()

rclpy.shutdown()","Command backport foxy galactic: success

Backports have been created

#820 Only add one done callback to a future (backport #816) has been created for branch foxy
#821 Only add one done callback to a future (backport #816) has been created for branch galactic",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,817,2021-08-20T21:00:15Z,,2022-02-28T21:00:17Z,OPEN,False,9,4,1,https://github.com/squizz617,make _on_parameter_event return result correctly,2,[],https://github.com/ros2/rclpy/pull/817,https://github.com/squizz617,1,https://github.com/ros2/rclpy/pull/817,"Previously, _on_parameter_event always returned successful=True to the
caller (e.g., ros2param set) regardless of whether setting use_sim_time
parameter actually succeeded or not.

PoC:

# terminal 1
$ ros2 run examples_rclpy_minimal_publisher publisher_member_function

[INFO] [1629490410.452032755] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1629490410.918999697] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1629490411.419087028] [minimal_publisher]: Publishing: ""Hello World: 2""
[INFO] [1629490411.919343319] [minimal_publisher]: Publishing: ""Hello World: 3""
[INFO] [1629490412.419345165] [minimal_publisher]: Publishing: ""Hello World: 4""
[INFO] [1629490412.919260702] [minimal_publisher]: Publishing: ""Hello World: 5""
[ERROR] [1629490413.030775970] [minimal_publisher]: use_sim_time parameter set to something besides a bool
[INFO] [1629490413.419389164] [minimal_publisher]: Publishing: ""Hello World: 6""
[INFO] [1629490413.919106545] [minimal_publisher]: Publishing: ""Hello World: 7""
# terminal 2
$ ros2 param set /minimal_publisher use_sim_time Trueeeee

Set parameter successful
As demonstrated above, when trying to set use_sim_time param to an invalid
type, the minimal_publisher node complains it cannot. However, ros2 param
prints ""Set parameter successful"". This commit fixes this issue.","Previously, _on_parameter_event always returned successful=True to the
caller (e.g., ros2param set) regardless of whether setting use_sim_time
parameter actually succeeded or not.

PoC:

# terminal 1
$ ros2 run examples_rclpy_minimal_publisher publisher_member_function

[INFO] [1629490410.452032755] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1629490410.918999697] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1629490411.419087028] [minimal_publisher]: Publishing: ""Hello World: 2""
[INFO] [1629490411.919343319] [minimal_publisher]: Publishing: ""Hello World: 3""
[INFO] [1629490412.419345165] [minimal_publisher]: Publishing: ""Hello World: 4""
[INFO] [1629490412.919260702] [minimal_publisher]: Publishing: ""Hello World: 5""
[ERROR] [1629490413.030775970] [minimal_publisher]: use_sim_time parameter set to something besides a bool
[INFO] [1629490413.419389164] [minimal_publisher]: Publishing: ""Hello World: 6""
[INFO] [1629490413.919106545] [minimal_publisher]: Publishing: ""Hello World: 7""
# terminal 2
$ ros2 param set /minimal_publisher use_sim_time Trueeeee

Set parameter successful
As demonstrated above, when trying to set use_sim_time param to an invalid
type, the minimal_publisher node complains it cannot. However, ros2 param
prints ""Set parameter successful"". This commit fixes this issue.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,817,2021-08-20T21:00:15Z,,2022-02-28T21:00:17Z,OPEN,False,9,4,1,https://github.com/squizz617,make _on_parameter_event return result correctly,2,[],https://github.com/ros2/rclpy/pull/817,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/817#issuecomment-903442906,"Previously, _on_parameter_event always returned successful=True to the
caller (e.g., ros2param set) regardless of whether setting use_sim_time
parameter actually succeeded or not.

PoC:

# terminal 1
$ ros2 run examples_rclpy_minimal_publisher publisher_member_function

[INFO] [1629490410.452032755] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1629490410.918999697] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1629490411.419087028] [minimal_publisher]: Publishing: ""Hello World: 2""
[INFO] [1629490411.919343319] [minimal_publisher]: Publishing: ""Hello World: 3""
[INFO] [1629490412.419345165] [minimal_publisher]: Publishing: ""Hello World: 4""
[INFO] [1629490412.919260702] [minimal_publisher]: Publishing: ""Hello World: 5""
[ERROR] [1629490413.030775970] [minimal_publisher]: use_sim_time parameter set to something besides a bool
[INFO] [1629490413.419389164] [minimal_publisher]: Publishing: ""Hello World: 6""
[INFO] [1629490413.919106545] [minimal_publisher]: Publishing: ""Hello World: 7""
# terminal 2
$ ros2 param set /minimal_publisher use_sim_time Trueeeee

Set parameter successful
As demonstrated above, when trying to set use_sim_time param to an invalid
type, the minimal_publisher node complains it cannot. However, ros2 param
prints ""Set parameter successful"". This commit fixes this issue.","Just FYI, the following is the current behavior.
root@12956542b338:~/ros2_ws/colcon_ws# ros2 run examples_rclpy_minimal_publisher publisher_member_function
[INFO] [1629693600.867826272] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1629693601.359118866] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1629693601.859174180] [minimal_publisher]: Publishing: ""Hello World: 2""
[INFO] [1629693602.359177531] [minimal_publisher]: Publishing: ""Hello World: 3""
...<snip>

root@12956542b338:~/ros2_ws/colcon_ws# ros2 param set /minimal_publisher use_sim_time Trueeeee
Setting parameter failed: Wrong parameter type, parameter {use_sim_time} is of type {bool}, setting it to {string} is not allowed.

type mismatch can be detected before _parameters_callbacks is called.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,817,2021-08-20T21:00:15Z,,2022-02-28T21:00:17Z,OPEN,False,9,4,1,https://github.com/squizz617,make _on_parameter_event return result correctly,2,[],https://github.com/ros2/rclpy/pull/817,https://github.com/fujitatomoya,3,https://github.com/ros2/rclpy/pull/817#issuecomment-903445740,"Previously, _on_parameter_event always returned successful=True to the
caller (e.g., ros2param set) regardless of whether setting use_sim_time
parameter actually succeeded or not.

PoC:

# terminal 1
$ ros2 run examples_rclpy_minimal_publisher publisher_member_function

[INFO] [1629490410.452032755] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1629490410.918999697] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1629490411.419087028] [minimal_publisher]: Publishing: ""Hello World: 2""
[INFO] [1629490411.919343319] [minimal_publisher]: Publishing: ""Hello World: 3""
[INFO] [1629490412.419345165] [minimal_publisher]: Publishing: ""Hello World: 4""
[INFO] [1629490412.919260702] [minimal_publisher]: Publishing: ""Hello World: 5""
[ERROR] [1629490413.030775970] [minimal_publisher]: use_sim_time parameter set to something besides a bool
[INFO] [1629490413.419389164] [minimal_publisher]: Publishing: ""Hello World: 6""
[INFO] [1629490413.919106545] [minimal_publisher]: Publishing: ""Hello World: 7""
# terminal 2
$ ros2 param set /minimal_publisher use_sim_time Trueeeee

Set parameter successful
As demonstrated above, when trying to set use_sim_time param to an invalid
type, the minimal_publisher node complains it cannot. However, ros2 param
prints ""Set parameter successful"". This commit fixes this issue.","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,817,2021-08-20T21:00:15Z,,2022-02-28T21:00:17Z,OPEN,False,9,4,1,https://github.com/squizz617,make _on_parameter_event return result correctly,2,[],https://github.com/ros2/rclpy/pull/817,https://github.com/fujitatomoya,4,https://github.com/ros2/rclpy/pull/817#issuecomment-1029416188,"Previously, _on_parameter_event always returned successful=True to the
caller (e.g., ros2param set) regardless of whether setting use_sim_time
parameter actually succeeded or not.

PoC:

# terminal 1
$ ros2 run examples_rclpy_minimal_publisher publisher_member_function

[INFO] [1629490410.452032755] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1629490410.918999697] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1629490411.419087028] [minimal_publisher]: Publishing: ""Hello World: 2""
[INFO] [1629490411.919343319] [minimal_publisher]: Publishing: ""Hello World: 3""
[INFO] [1629490412.419345165] [minimal_publisher]: Publishing: ""Hello World: 4""
[INFO] [1629490412.919260702] [minimal_publisher]: Publishing: ""Hello World: 5""
[ERROR] [1629490413.030775970] [minimal_publisher]: use_sim_time parameter set to something besides a bool
[INFO] [1629490413.419389164] [minimal_publisher]: Publishing: ""Hello World: 6""
[INFO] [1629490413.919106545] [minimal_publisher]: Publishing: ""Hello World: 7""
# terminal 2
$ ros2 param set /minimal_publisher use_sim_time Trueeeee

Set parameter successful
As demonstrated above, when trying to set use_sim_time param to an invalid
type, the minimal_publisher node complains it cannot. However, ros2 param
prints ""Set parameter successful"". This commit fixes this issue.","as mentioned in #817 (comment), currently with master, it will check the parameter type via _apply_descriptor before calling on_set_parameters_callback. So it actually cannot reach the code which this PR tries to fix.
But i think this PR makes sense.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,817,2021-08-20T21:00:15Z,,2022-02-28T21:00:17Z,OPEN,False,9,4,1,https://github.com/squizz617,make _on_parameter_event return result correctly,2,[],https://github.com/ros2/rclpy/pull/817,https://github.com/fujitatomoya,5,https://github.com/ros2/rclpy/pull/817#issuecomment-1029416912,"Previously, _on_parameter_event always returned successful=True to the
caller (e.g., ros2param set) regardless of whether setting use_sim_time
parameter actually succeeded or not.

PoC:

# terminal 1
$ ros2 run examples_rclpy_minimal_publisher publisher_member_function

[INFO] [1629490410.452032755] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1629490410.918999697] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1629490411.419087028] [minimal_publisher]: Publishing: ""Hello World: 2""
[INFO] [1629490411.919343319] [minimal_publisher]: Publishing: ""Hello World: 3""
[INFO] [1629490412.419345165] [minimal_publisher]: Publishing: ""Hello World: 4""
[INFO] [1629490412.919260702] [minimal_publisher]: Publishing: ""Hello World: 5""
[ERROR] [1629490413.030775970] [minimal_publisher]: use_sim_time parameter set to something besides a bool
[INFO] [1629490413.419389164] [minimal_publisher]: Publishing: ""Hello World: 6""
[INFO] [1629490413.919106545] [minimal_publisher]: Publishing: ""Hello World: 7""
# terminal 2
$ ros2 param set /minimal_publisher use_sim_time Trueeeee

Set parameter successful
As demonstrated above, when trying to set use_sim_time param to an invalid
type, the minimal_publisher node complains it cannot. However, ros2 param
prints ""Set parameter successful"". This commit fixes this issue.",@squizz617 could you address flake8 errors?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,817,2021-08-20T21:00:15Z,,2022-02-28T21:00:17Z,OPEN,False,9,4,1,https://github.com/squizz617,make _on_parameter_event return result correctly,2,[],https://github.com/ros2/rclpy/pull/817,https://github.com/squizz617,6,https://github.com/ros2/rclpy/pull/817#issuecomment-1030137041,"Previously, _on_parameter_event always returned successful=True to the
caller (e.g., ros2param set) regardless of whether setting use_sim_time
parameter actually succeeded or not.

PoC:

# terminal 1
$ ros2 run examples_rclpy_minimal_publisher publisher_member_function

[INFO] [1629490410.452032755] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1629490410.918999697] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1629490411.419087028] [minimal_publisher]: Publishing: ""Hello World: 2""
[INFO] [1629490411.919343319] [minimal_publisher]: Publishing: ""Hello World: 3""
[INFO] [1629490412.419345165] [minimal_publisher]: Publishing: ""Hello World: 4""
[INFO] [1629490412.919260702] [minimal_publisher]: Publishing: ""Hello World: 5""
[ERROR] [1629490413.030775970] [minimal_publisher]: use_sim_time parameter set to something besides a bool
[INFO] [1629490413.419389164] [minimal_publisher]: Publishing: ""Hello World: 6""
[INFO] [1629490413.919106545] [minimal_publisher]: Publishing: ""Hello World: 7""
# terminal 2
$ ros2 param set /minimal_publisher use_sim_time Trueeeee

Set parameter successful
As demonstrated above, when trying to set use_sim_time param to an invalid
type, the minimal_publisher node complains it cannot. However, ros2 param
prints ""Set parameter successful"". This commit fixes this issue.","Fixed the flake8 error. Seems ready to be merged.
And the param type check in the master branch does make sense. Thanks!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,817,2021-08-20T21:00:15Z,,2022-02-28T21:00:17Z,OPEN,False,9,4,1,https://github.com/squizz617,make _on_parameter_event return result correctly,2,[],https://github.com/ros2/rclpy/pull/817,https://github.com/fujitatomoya,7,https://github.com/ros2/rclpy/pull/817#issuecomment-1030152556,"Previously, _on_parameter_event always returned successful=True to the
caller (e.g., ros2param set) regardless of whether setting use_sim_time
parameter actually succeeded or not.

PoC:

# terminal 1
$ ros2 run examples_rclpy_minimal_publisher publisher_member_function

[INFO] [1629490410.452032755] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1629490410.918999697] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1629490411.419087028] [minimal_publisher]: Publishing: ""Hello World: 2""
[INFO] [1629490411.919343319] [minimal_publisher]: Publishing: ""Hello World: 3""
[INFO] [1629490412.419345165] [minimal_publisher]: Publishing: ""Hello World: 4""
[INFO] [1629490412.919260702] [minimal_publisher]: Publishing: ""Hello World: 5""
[ERROR] [1629490413.030775970] [minimal_publisher]: use_sim_time parameter set to something besides a bool
[INFO] [1629490413.419389164] [minimal_publisher]: Publishing: ""Hello World: 6""
[INFO] [1629490413.919106545] [minimal_publisher]: Publishing: ""Hello World: 7""
# terminal 2
$ ros2 param set /minimal_publisher use_sim_time Trueeeee

Set parameter successful
As demonstrated above, when trying to set use_sim_time param to an invalid
type, the minimal_publisher node complains it cannot. However, ros2 param
prints ""Set parameter successful"". This commit fixes this issue.","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,817,2021-08-20T21:00:15Z,,2022-02-28T21:00:17Z,OPEN,False,9,4,1,https://github.com/squizz617,make _on_parameter_event return result correctly,2,[],https://github.com/ros2/rclpy/pull/817,https://github.com/fujitatomoya,8,https://github.com/ros2/rclpy/pull/817#issuecomment-1030153059,"Previously, _on_parameter_event always returned successful=True to the
caller (e.g., ros2param set) regardless of whether setting use_sim_time
parameter actually succeeded or not.

PoC:

# terminal 1
$ ros2 run examples_rclpy_minimal_publisher publisher_member_function

[INFO] [1629490410.452032755] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1629490410.918999697] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1629490411.419087028] [minimal_publisher]: Publishing: ""Hello World: 2""
[INFO] [1629490411.919343319] [minimal_publisher]: Publishing: ""Hello World: 3""
[INFO] [1629490412.419345165] [minimal_publisher]: Publishing: ""Hello World: 4""
[INFO] [1629490412.919260702] [minimal_publisher]: Publishing: ""Hello World: 5""
[ERROR] [1629490413.030775970] [minimal_publisher]: use_sim_time parameter set to something besides a bool
[INFO] [1629490413.419389164] [minimal_publisher]: Publishing: ""Hello World: 6""
[INFO] [1629490413.919106545] [minimal_publisher]: Publishing: ""Hello World: 7""
# terminal 2
$ ros2 param set /minimal_publisher use_sim_time Trueeeee

Set parameter successful
As demonstrated above, when trying to set use_sim_time param to an invalid
type, the minimal_publisher node complains it cannot. However, ros2 param
prints ""Set parameter successful"". This commit fixes this issue.",@ivanpauno could you review on this just in case before merge.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,817,2021-08-20T21:00:15Z,,2022-02-28T21:00:17Z,OPEN,False,9,4,1,https://github.com/squizz617,make _on_parameter_event return result correctly,2,[],https://github.com/ros2/rclpy/pull/817,https://github.com/fujitatomoya,9,https://github.com/ros2/rclpy/pull/817#issuecomment-1035548297,"Previously, _on_parameter_event always returned successful=True to the
caller (e.g., ros2param set) regardless of whether setting use_sim_time
parameter actually succeeded or not.

PoC:

# terminal 1
$ ros2 run examples_rclpy_minimal_publisher publisher_member_function

[INFO] [1629490410.452032755] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1629490410.918999697] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1629490411.419087028] [minimal_publisher]: Publishing: ""Hello World: 2""
[INFO] [1629490411.919343319] [minimal_publisher]: Publishing: ""Hello World: 3""
[INFO] [1629490412.419345165] [minimal_publisher]: Publishing: ""Hello World: 4""
[INFO] [1629490412.919260702] [minimal_publisher]: Publishing: ""Hello World: 5""
[ERROR] [1629490413.030775970] [minimal_publisher]: use_sim_time parameter set to something besides a bool
[INFO] [1629490413.419389164] [minimal_publisher]: Publishing: ""Hello World: 6""
[INFO] [1629490413.919106545] [minimal_publisher]: Publishing: ""Hello World: 7""
# terminal 2
$ ros2 param set /minimal_publisher use_sim_time Trueeeee

Set parameter successful
As demonstrated above, when trying to set use_sim_time param to an invalid
type, the minimal_publisher node complains it cannot. However, ros2 param
prints ""Set parameter successful"". This commit fixes this issue.","CI is failing because of https://ci.ros2.org/job/ci_linux/16070/console, we need to use https://github.com/ros2/ros2/blob/4a36f319afcc208deae3c373493ef6d9feda1324/ros2.repos#L45.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,817,2021-08-20T21:00:15Z,,2022-02-28T21:00:17Z,OPEN,False,9,4,1,https://github.com/squizz617,make _on_parameter_event return result correctly,2,[],https://github.com/ros2/rclpy/pull/817,https://github.com/fujitatomoya,10,https://github.com/ros2/rclpy/pull/817#issuecomment-1035550639,"Previously, _on_parameter_event always returned successful=True to the
caller (e.g., ros2param set) regardless of whether setting use_sim_time
parameter actually succeeded or not.

PoC:

# terminal 1
$ ros2 run examples_rclpy_minimal_publisher publisher_member_function

[INFO] [1629490410.452032755] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1629490410.918999697] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1629490411.419087028] [minimal_publisher]: Publishing: ""Hello World: 2""
[INFO] [1629490411.919343319] [minimal_publisher]: Publishing: ""Hello World: 3""
[INFO] [1629490412.419345165] [minimal_publisher]: Publishing: ""Hello World: 4""
[INFO] [1629490412.919260702] [minimal_publisher]: Publishing: ""Hello World: 5""
[ERROR] [1629490413.030775970] [minimal_publisher]: use_sim_time parameter set to something besides a bool
[INFO] [1629490413.419389164] [minimal_publisher]: Publishing: ""Hello World: 6""
[INFO] [1629490413.919106545] [minimal_publisher]: Publishing: ""Hello World: 7""
# terminal 2
$ ros2 param set /minimal_publisher use_sim_time Trueeeee

Set parameter successful
As demonstrated above, when trying to set use_sim_time param to an invalid
type, the minimal_publisher node complains it cannot. However, ros2 param
prints ""Set parameter successful"". This commit fixes this issue.","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,817,2021-08-20T21:00:15Z,,2022-02-28T21:00:17Z,OPEN,False,9,4,1,https://github.com/squizz617,make _on_parameter_event return result correctly,2,[],https://github.com/ros2/rclpy/pull/817,https://github.com/ivanpauno,11,https://github.com/ros2/rclpy/pull/817#issuecomment-1054656245,"Previously, _on_parameter_event always returned successful=True to the
caller (e.g., ros2param set) regardless of whether setting use_sim_time
parameter actually succeeded or not.

PoC:

# terminal 1
$ ros2 run examples_rclpy_minimal_publisher publisher_member_function

[INFO] [1629490410.452032755] [minimal_publisher]: Publishing: ""Hello World: 0""
[INFO] [1629490410.918999697] [minimal_publisher]: Publishing: ""Hello World: 1""
[INFO] [1629490411.419087028] [minimal_publisher]: Publishing: ""Hello World: 2""
[INFO] [1629490411.919343319] [minimal_publisher]: Publishing: ""Hello World: 3""
[INFO] [1629490412.419345165] [minimal_publisher]: Publishing: ""Hello World: 4""
[INFO] [1629490412.919260702] [minimal_publisher]: Publishing: ""Hello World: 5""
[ERROR] [1629490413.030775970] [minimal_publisher]: use_sim_time parameter set to something besides a bool
[INFO] [1629490413.419389164] [minimal_publisher]: Publishing: ""Hello World: 6""
[INFO] [1629490413.919106545] [minimal_publisher]: Publishing: ""Hello World: 7""
# terminal 2
$ ros2 param set /minimal_publisher use_sim_time Trueeeee

Set parameter successful
As demonstrated above, when trying to set use_sim_time param to an invalid
type, the minimal_publisher node complains it cannot. However, ros2 param
prints ""Set parameter successful"". This commit fixes this issue.","@fujitatomoya friendly ping, what's the state of this?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,818,2021-08-26T22:39:38Z,2021-08-30T17:01:27Z,2021-09-03T18:40:26Z,MERGED,True,1,0,1,https://github.com/chapulina,👩‍🌾 Check that header is not none before accessing it in test,1,"['tests', 'Linux']",https://github.com/ros2/rclpy/pull/818,https://github.com/chapulina,1,https://github.com/ros2/rclpy/pull/818,"test_service_timestamps has started failing lately with:
>                   self.assertNotEqual(0, header.source_timestamp)
E                   AttributeError: 'NoneType' object has no attribute 'source_timestamp'

See the test history here:
https://build.ros2.org/job/Rci__nightly-connext_ubuntu_focal_amd64/429/testReport/rclpy.rclpy.test.test_client/TestClient/test_service_timestamps/history/
I'm not sure what's the underlying issue that causes the header to be none, but catching that before trying to use the variable should allow the test to fail gracefully instead of throwing an error.

osrf/buildfarmer#224","test_service_timestamps has started failing lately with:
>                   self.assertNotEqual(0, header.source_timestamp)
E                   AttributeError: 'NoneType' object has no attribute 'source_timestamp'

See the test history here:
https://build.ros2.org/job/Rci__nightly-connext_ubuntu_focal_amd64/429/testReport/rclpy.rclpy.test.test_client/TestClient/test_service_timestamps/history/
I'm not sure what's the underlying issue that causes the header to be none, but catching that before trying to use the variable should allow the test to fail gracefully instead of throwing an error.

osrf/buildfarmer#224",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,818,2021-08-26T22:39:38Z,2021-08-30T17:01:27Z,2021-09-03T18:40:26Z,MERGED,True,1,0,1,https://github.com/chapulina,👩‍🌾 Check that header is not none before accessing it in test,1,"['tests', 'Linux']",https://github.com/ros2/rclpy/pull/818,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/818#issuecomment-908386444,"test_service_timestamps has started failing lately with:
>                   self.assertNotEqual(0, header.source_timestamp)
E                   AttributeError: 'NoneType' object has no attribute 'source_timestamp'

See the test history here:
https://build.ros2.org/job/Rci__nightly-connext_ubuntu_focal_amd64/429/testReport/rclpy.rclpy.test.test_client/TestClient/test_service_timestamps/history/
I'm not sure what's the underlying issue that causes the header to be none, but catching that before trying to use the variable should allow the test to fail gracefully instead of throwing an error.

osrf/buildfarmer#224","I'm not sure what's the underlying issue that causes the header to be none

Looking at 
  
    
      rclpy/rclpy/src/rclpy/service.cpp
    
    
         Line 104
      in
      ad22613
    
  
  
    

        
          
           Service::service_take_request(py::object pyrequest_type) 
        
    
  

 , it looks like that can only happen if the underlying call to rcl_take_request_with_info returned RCL_RET_SERVICE_TAKE_FAILED.  Whether that gets returned is up to the individual RMW, which is rmw_connextdds in this case.  Still not sure why that is happening; @asorbini could you look into it?

but catching that before trying to use the variable should allow the test to fail gracefully instead of throwing an error.

But yeah, I agree with this.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,818,2021-08-26T22:39:38Z,2021-08-30T17:01:27Z,2021-09-03T18:40:26Z,MERGED,True,1,0,1,https://github.com/chapulina,👩‍🌾 Check that header is not none before accessing it in test,1,"['tests', 'Linux']",https://github.com/ros2/rclpy/pull/818,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/818#issuecomment-908387553,"test_service_timestamps has started failing lately with:
>                   self.assertNotEqual(0, header.source_timestamp)
E                   AttributeError: 'NoneType' object has no attribute 'source_timestamp'

See the test history here:
https://build.ros2.org/job/Rci__nightly-connext_ubuntu_focal_amd64/429/testReport/rclpy.rclpy.test.test_client/TestClient/test_service_timestamps/history/
I'm not sure what's the underlying issue that causes the header to be none, but catching that before trying to use the variable should allow the test to fail gracefully instead of throwing an error.

osrf/buildfarmer#224","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,818,2021-08-26T22:39:38Z,2021-08-30T17:01:27Z,2021-09-03T18:40:26Z,MERGED,True,1,0,1,https://github.com/chapulina,👩‍🌾 Check that header is not none before accessing it in test,1,"['tests', 'Linux']",https://github.com/ros2/rclpy/pull/818,https://github.com/j-rivero,4,https://github.com/ros2/rclpy/pull/818#issuecomment-912734057,"test_service_timestamps has started failing lately with:
>                   self.assertNotEqual(0, header.source_timestamp)
E                   AttributeError: 'NoneType' object has no attribute 'source_timestamp'

See the test history here:
https://build.ros2.org/job/Rci__nightly-connext_ubuntu_focal_amd64/429/testReport/rclpy.rclpy.test.test_client/TestClient/test_service_timestamps/history/
I'm not sure what's the underlying issue that causes the header to be none, but catching that before trying to use the variable should allow the test to fail gracefully instead of throwing an error.

osrf/buildfarmer#224",Problem appeared again in today's CI https://build.ros2.org/job/Rci__nightly-fastrtps-dynamic_ubuntu_focal_amd64/432/testReport/rclpy.rclpy.test.test_client/TestClient/test_service_timestamps/,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,818,2021-08-26T22:39:38Z,2021-08-30T17:01:27Z,2021-09-03T18:40:26Z,MERGED,True,1,0,1,https://github.com/chapulina,👩‍🌾 Check that header is not none before accessing it in test,1,"['tests', 'Linux']",https://github.com/ros2/rclpy/pull/818,https://github.com/chapulina,5,https://github.com/ros2/rclpy/pull/818#issuecomment-912735945,"test_service_timestamps has started failing lately with:
>                   self.assertNotEqual(0, header.source_timestamp)
E                   AttributeError: 'NoneType' object has no attribute 'source_timestamp'

See the test history here:
https://build.ros2.org/job/Rci__nightly-connext_ubuntu_focal_amd64/429/testReport/rclpy.rclpy.test.test_client/TestClient/test_service_timestamps/history/
I'm not sure what's the underlying issue that causes the header to be none, but catching that before trying to use the variable should allow the test to fail gracefully instead of throwing an error.

osrf/buildfarmer#224","Problem appeared again in today's CI

Yay! The assertion works! 🙃",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,819,2021-08-30T20:23:33Z,2021-08-31T01:50:12Z,2021-08-31T01:50:15Z,MERGED,True,88,0,2,https://github.com/jacobperron,Add convert function from ParameterValue to Python builtin,2,['enhancement'],https://github.com/ros2/rclpy/pull/819,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/819,"This function is particular useful when processing a GetParameters service request.
Tools like ros2param implement this function locally, but it would be nice to have a common implementation to avoid duplication.
This function was adapted from the implementation in ros2param: https://github.com/ros2/ros2cli/blob/1f4a3aaf7b930830b3fa04773715bf93ea65693e/ros2param/ros2param/api/__init__.py#L31","This function is particular useful when processing a GetParameters service request.
Tools like ros2param implement this function locally, but it would be nice to have a common implementation to avoid duplication.
This function was adapted from the implementation in ros2param: https://github.com/ros2/ros2cli/blob/1f4a3aaf7b930830b3fa04773715bf93ea65693e/ros2param/ros2param/api/__init__.py#L31",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,819,2021-08-30T20:23:33Z,2021-08-31T01:50:12Z,2021-08-31T01:50:15Z,MERGED,True,88,0,2,https://github.com/jacobperron,Add convert function from ParameterValue to Python builtin,2,['enhancement'],https://github.com/ros2/rclpy/pull/819,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/819#issuecomment-908680780,"This function is particular useful when processing a GetParameters service request.
Tools like ros2param implement this function locally, but it would be nice to have a common implementation to avoid duplication.
This function was adapted from the implementation in ros2param: https://github.com/ros2/ros2cli/blob/1f4a3aaf7b930830b3fa04773715bf93ea65693e/ros2param/ros2param/api/__init__.py#L31","Testing rclpy:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,820,2021-09-01T13:40:59Z,2021-09-20T20:27:59Z,2021-09-20T20:28:02Z,MERGED,True,3,1,1,https://github.com/apps/mergify,[foxy] Only add one done callback to a future (backport #816),1,[],https://github.com/ros2/rclpy/pull/820,https://github.com/apps/mergify,1,https://github.com/ros2/rclpy/pull/820,"This is an automatic backport of pull request #816 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/","This is an automatic backport of pull request #816 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,820,2021-09-01T13:40:59Z,2021-09-20T20:27:59Z,2021-09-20T20:28:02Z,MERGED,True,3,1,1,https://github.com/apps/mergify,[foxy] Only add one done callback to a future (backport #816),1,[],https://github.com/ros2/rclpy/pull/820,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/820#issuecomment-921093531,"This is an automatic backport of pull request #816 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,821,2021-09-01T13:41:09Z,2021-09-01T14:09:05Z,2021-09-01T14:09:08Z,MERGED,True,3,1,1,https://github.com/apps/mergify,Only add one done callback to a future (backport #816),1,[],https://github.com/ros2/rclpy/pull/821,https://github.com/apps/mergify,1,https://github.com/ros2/rclpy/pull/821,"This is an automatic backport of pull request #816 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/","This is an automatic backport of pull request #816 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,825,2021-09-16T02:34:57Z,2021-09-16T19:24:26Z,2021-09-16T19:24:26Z,MERGED,True,1,1,1,https://github.com/Barry-Xu-2018,Increase the timeout in test_publisher.test_wait_for_all_acked,1,[],https://github.com/ros2/rclpy/pull/825,https://github.com/Barry-Xu-2018,1,https://github.com/ros2/rclpy/pull/825,"Address #824
For connextdds, current timeout seting is too small in test_wait_for_all_acked","Address #824
For connextdds, current timeout seting is too small in test_wait_for_all_acked",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,825,2021-09-16T02:34:57Z,2021-09-16T19:24:26Z,2021-09-16T19:24:26Z,MERGED,True,1,1,1,https://github.com/Barry-Xu-2018,Increase the timeout in test_publisher.test_wait_for_all_acked,1,[],https://github.com/ros2/rclpy/pull/825,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/825#issuecomment-921041484,"Address #824
For connextdds, current timeout seting is too small in test_wait_for_all_acked","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,825,2021-09-16T02:34:57Z,2021-09-16T19:24:26Z,2021-09-16T19:24:26Z,MERGED,True,1,1,1,https://github.com/Barry-Xu-2018,Increase the timeout in test_publisher.test_wait_for_all_acked,1,[],https://github.com/ros2/rclpy/pull/825,https://github.com/fujitatomoya,3,https://github.com/ros2/rclpy/pull/825#issuecomment-921041829,"Address #824
For connextdds, current timeout seting is too small in test_wait_for_all_acked",@ivanpauno requesting another review when you got time. thanks!,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,825,2021-09-16T02:34:57Z,2021-09-16T19:24:26Z,2021-09-16T19:24:26Z,MERGED,True,1,1,1,https://github.com/Barry-Xu-2018,Increase the timeout in test_publisher.test_wait_for_all_acked,1,[],https://github.com/ros2/rclpy/pull/825,https://github.com/jacobperron,4,https://github.com/ros2/rclpy/pull/825#issuecomment-921043551,"Address #824
For connextdds, current timeout seting is too small in test_wait_for_all_acked",@fujitatomoya Can you run another CI job with Connext only? This way we can confirm if the timeout is enough.,True,{'THUMBS_UP': ['https://github.com/fujitatomoya']}
ros2/rclpy,https://github.com/ros2/rclpy,825,2021-09-16T02:34:57Z,2021-09-16T19:24:26Z,2021-09-16T19:24:26Z,MERGED,True,1,1,1,https://github.com/Barry-Xu-2018,Increase the timeout in test_publisher.test_wait_for_all_acked,1,[],https://github.com/ros2/rclpy/pull/825,https://github.com/fujitatomoya,5,https://github.com/ros2/rclpy/pull/825#issuecomment-921054532,"Address #824
For connextdds, current timeout seting is too small in test_wait_for_all_acked","CI (only connextdds):

Linux 
Linux-aarch64 
macOS 
Windows",True,{'THUMBS_UP': ['https://github.com/jacobperron']}
ros2/rclpy,https://github.com/ros2/rclpy,825,2021-09-16T02:34:57Z,2021-09-16T19:24:26Z,2021-09-16T19:24:26Z,MERGED,True,1,1,1,https://github.com/Barry-Xu-2018,Increase the timeout in test_publisher.test_wait_for_all_acked,1,[],https://github.com/ros2/rclpy/pull/825,https://github.com/jacobperron,6,https://github.com/ros2/rclpy/pull/825#issuecomment-921094736,"Address #824
For connextdds, current timeout seting is too small in test_wait_for_all_acked","Linux-aarch64 is expected to fail, since Connext is not available on that platform.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,828,2021-09-28T02:49:28Z,2021-09-30T15:37:17Z,2021-10-25T16:13:18Z,MERGED,True,0,3,2,https://github.com/llapx,Fix memory leak.,2,[],https://github.com/ros2/rclpy/pull/828,https://github.com/llapx,1,https://github.com/ros2/rclpy/pull/828,Signed-off-by: Lei Liu Lei.Liu.AP@sony.com,Signed-off-by: Lei Liu Lei.Liu.AP@sony.com,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,828,2021-09-28T02:49:28Z,2021-09-30T15:37:17Z,2021-10-25T16:13:18Z,MERGED,True,0,3,2,https://github.com/llapx,Fix memory leak.,2,[],https://github.com/ros2/rclpy/pull/828,https://github.com/llapx,2,https://github.com/ros2/rclpy/pull/828#issuecomment-928713057,Signed-off-by: Lei Liu Lei.Liu.AP@sony.com,"In my option, it's a memory leak bug which may affect many test cases. It's nessary to write test cases for memory leak, but it's may be a big topic.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,828,2021-09-28T02:49:28Z,2021-09-30T15:37:17Z,2021-10-25T16:13:18Z,MERGED,True,0,3,2,https://github.com/llapx,Fix memory leak.,2,[],https://github.com/ros2/rclpy/pull/828,https://github.com/aprotyas,3,https://github.com/ros2/rclpy/pull/828#issuecomment-928802956,Signed-off-by: Lei Liu Lei.Liu.AP@sony.com,"For reviewers, just reproducing the memory usage charts from #822 (comment)


The same observations should hold for services using rclpy.
As such, I think this closes #822.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,828,2021-09-28T02:49:28Z,2021-09-30T15:37:17Z,2021-10-25T16:13:18Z,MERGED,True,0,3,2,https://github.com/llapx,Fix memory leak.,2,[],https://github.com/ros2/rclpy/pull/828,https://github.com/fujitatomoya,4,https://github.com/ros2/rclpy/pull/828#issuecomment-929836136,Signed-off-by: Lei Liu Lei.Liu.AP@sony.com,@aprotyas it seems that memory usage doe not change on the graph chart between before and after? it still increases the memory usage constantly on client side? just checking.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,828,2021-09-28T02:49:28Z,2021-09-30T15:37:17Z,2021-10-25T16:13:18Z,MERGED,True,0,3,2,https://github.com/llapx,Fix memory leak.,2,[],https://github.com/ros2/rclpy/pull/828,https://github.com/fujitatomoya,5,https://github.com/ros2/rclpy/pull/828#issuecomment-929837427,Signed-off-by: Lei Liu Lei.Liu.AP@sony.com,"CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,828,2021-09-28T02:49:28Z,2021-09-30T15:37:17Z,2021-10-25T16:13:18Z,MERGED,True,0,3,2,https://github.com/llapx,Fix memory leak.,2,[],https://github.com/ros2/rclpy/pull/828,https://github.com/aprotyas,6,https://github.com/ros2/rclpy/pull/828#issuecomment-929837910,Signed-off-by: Lei Liu Lei.Liu.AP@sony.com,"@aprotyas it seems that memory usage doe not change on the graph chart between before and after? it still increases the memory usage constantly on client side? just checking.

No no, the first image is from before, and the second image is from after this PR.
In the second image, you see that the memory usage does not continuously increase (stays consistent around 60 MB). So I believe the PR fixes the memory leak.",True,{'THUMBS_UP': ['https://github.com/fujitatomoya']}
ros2/rclpy,https://github.com/ros2/rclpy,828,2021-09-28T02:49:28Z,2021-09-30T15:37:17Z,2021-10-25T16:13:18Z,MERGED,True,0,3,2,https://github.com/llapx,Fix memory leak.,2,[],https://github.com/ros2/rclpy/pull/828,https://github.com/fujitatomoya,7,https://github.com/ros2/rclpy/pull/828#issuecomment-929838519,Signed-off-by: Lei Liu Lei.Liu.AP@sony.com,"@aprotyas Ah, i see it. thanks!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,828,2021-09-28T02:49:28Z,2021-09-30T15:37:17Z,2021-10-25T16:13:18Z,MERGED,True,0,3,2,https://github.com/llapx,Fix memory leak.,2,[],https://github.com/ros2/rclpy/pull/828,https://github.com/aprotyas,8,https://github.com/ros2/rclpy/pull/828#issuecomment-950615355,Signed-off-by: Lei Liu Lei.Liu.AP@sony.com,Should this be backported?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,828,2021-09-28T02:49:28Z,2021-09-30T15:37:17Z,2021-10-25T16:13:18Z,MERGED,True,0,3,2,https://github.com/llapx,Fix memory leak.,2,[],https://github.com/ros2/rclpy/pull/828,https://github.com/fujitatomoya,9,https://github.com/ros2/rclpy/pull/828#issuecomment-951083122,Signed-off-by: Lei Liu Lei.Liu.AP@sony.com,@Mergifyio backport galactic,True,{'THUMBS_UP': ['https://github.com/mergify%5Bbot%5D']}
ros2/rclpy,https://github.com/ros2/rclpy,828,2021-09-28T02:49:28Z,2021-09-30T15:37:17Z,2021-10-25T16:13:18Z,MERGED,True,0,3,2,https://github.com/llapx,Fix memory leak.,2,[],https://github.com/ros2/rclpy/pull/828,https://github.com/apps/mergify,10,https://github.com/ros2/rclpy/pull/828#issuecomment-951084028,Signed-off-by: Lei Liu Lei.Liu.AP@sony.com,"backport galactic

✅ Backports have been created


#840 Fix memory leak. (backport #828) has been created for branch galactic",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,830,2021-09-30T14:54:54Z,2021-10-21T20:37:18Z,2021-11-03T12:40:54Z,MERGED,True,394,12,7,https://github.com/ivanpauno,Handle sigterm,22,['enhancement'],https://github.com/ros2/rclpy/pull/830,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/830,"Depends on #814.
Equivalent to ros2/rclcpp#1771.","Depends on #814.
Equivalent to ros2/rclcpp#1771.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,830,2021-09-30T14:54:54Z,2021-10-21T20:37:18Z,2021-11-03T12:40:54Z,MERGED,True,394,12,7,https://github.com/ivanpauno,Handle sigterm,22,['enhancement'],https://github.com/ros2/rclpy/pull/830,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/830#issuecomment-941146941,"Depends on #814.
Equivalent to ros2/rclcpp#1771.","Something odd is this makes rclpy nodes not exit on receiving SIGTERM. Before, sending SIGTERM will cause the process to exit like this:

Thanks for noticing that, I didn't think about that issue.

Maybe SIGTERM could additionally trigger a shutdown call on all of the Context instances?

Yes, that's an option.
The other one I'm thinking of is to raise an exception from the signal handler, that's possible using the python signal module: https://docs.python.org/3/library/signal.html#example.
We could maybe have ShutdownError exception in rclpy, if that doesn't exist already.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,830,2021-09-30T14:54:54Z,2021-10-21T20:37:18Z,2021-11-03T12:40:54Z,MERGED,True,394,12,7,https://github.com/ivanpauno,Handle sigterm,22,['enhancement'],https://github.com/ros2/rclpy/pull/830,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/830#issuecomment-943469517,"Depends on #814.
Equivalent to ros2/rclcpp#1771.","Now when running the demo_nodes_py listener demo and sending sigterm the following exception is thrown:
  File ""/home/ivanpauno/ros2_ws/install/demo_nodes_py/lib/demo_nodes_py/listener"", line 11, in <module>
    load_entry_point('demo-nodes-py', 'console_scripts', 'listener')()
  File ""/home/ivanpauno/ros2_ws/build/demo_nodes_py/demo_nodes_py/topics/listener.py"", line 36, in main
    rclpy.spin(node)
  File ""/home/ivanpauno/ros2_ws/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 213, in spin
    executor.spin_once()
  File ""/home/ivanpauno/ros2_ws/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 704, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/ivanpauno/ros2_ws/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 690, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/ivanpauno/ros2_ws/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 592, in _wait_for_ready_callbacks
    raise ExternalShutdownException()

which seems like a reasonable error.

I tried to use the python signal module for all signal handlers, but it didn't work as I expected.
The issue is that waitset is still waiting for an event, with the GIL locked, and the python signal handler is not going to be run until that returns.
Maybe, we should be using an approach similar to rclcpp: having an extra thread waiting on a semaphore, trigger it in a signal safe fashion, and from that thread trigger guard conditions and shutdown contexts.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,830,2021-09-30T14:54:54Z,2021-10-21T20:37:18Z,2021-11-03T12:40:54Z,MERGED,True,394,12,7,https://github.com/ivanpauno,Handle sigterm,22,['enhancement'],https://github.com/ros2/rclpy/pull/830,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/830#issuecomment-943723324,"Depends on #814.
Equivalent to ros2/rclcpp#1771.","The issue is that waitset is still waiting for an event, with the GIL locked, and the python signal handler is not going to be run until that returns.

That's interesting - the intended behavior is to release the GIL while the waitset is waiting. Is there another spot blocking?

  
    
      rclpy/rclpy/src/rclpy/wait_set.cpp
    
    
         Line 246
      in
      6f4e42c
    
  
  
    

        
          
           py::gil_scoped_release gil_release; 
        
    
  


Another downside is the Pure python signal handler can only be unregistered from the same thread that registered it (#728 (comment)). Maybe that's less of a problem with this PR registering and unregistering it in rclpy.init/shutdown.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,830,2021-09-30T14:54:54Z,2021-10-21T20:37:18Z,2021-11-03T12:40:54Z,MERGED,True,394,12,7,https://github.com/ivanpauno,Handle sigterm,22,['enhancement'],https://github.com/ros2/rclpy/pull/830,https://github.com/ivanpauno,5,https://github.com/ros2/rclpy/pull/830#issuecomment-943730356,"Depends on #814.
Equivalent to ros2/rclcpp#1771.","That's interesting - the intended behavior is to release the GIL while the waitset is waiting. Is there another spot blocking?

Sorry, the GIL is not blocked.
But the waitset is blocked waiting on a condition variable.
The python signal module is not ""completely asynchronous"", a flag will be set from the C signal handler and the python signal handler will be executed the next time the interpreter can check that flag, which is not possible while a cpython extension function is being executed.
In this case, it seems we really need a C signal handler to at least trigger a condition variable.
The issue is that triggering a condition variable is not signal safe, what we are doing in rclcpp is to do that from a thread only used for signal handling, and use a signal safe synchronization mechanism to wake that thread.
That's a preexistent issue though.
I've used a python sigterm handler only for shutting down contexts, which is safer than doing that from C, though it adds more complexity.
In rclcpp, we're doing that from the same thread that trigger the guard conditions, so maybe we could do that here as well.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,830,2021-09-30T14:54:54Z,2021-10-21T20:37:18Z,2021-11-03T12:40:54Z,MERGED,True,394,12,7,https://github.com/ivanpauno,Handle sigterm,22,['enhancement'],https://github.com/ros2/rclpy/pull/830,https://github.com/ivanpauno,6,https://github.com/ros2/rclpy/pull/830#issuecomment-944729642,"Depends on #814.
Equivalent to ros2/rclcpp#1771.","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,830,2021-09-30T14:54:54Z,2021-10-21T20:37:18Z,2021-11-03T12:40:54Z,MERGED,True,394,12,7,https://github.com/ivanpauno,Handle sigterm,22,['enhancement'],https://github.com/ros2/rclpy/pull/830,https://github.com/ivanpauno,7,https://github.com/ros2/rclpy/pull/830#issuecomment-945737077,"Depends on #814.
Equivalent to ros2/rclcpp#1771.","demo_nodes_py talker segfaults when receiving SIGTERM. Is that a sign of an issue here?

Yes, I will test that.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,830,2021-09-30T14:54:54Z,2021-10-21T20:37:18Z,2021-11-03T12:40:54Z,MERGED,True,394,12,7,https://github.com/ivanpauno,Handle sigterm,22,['enhancement'],https://github.com/ros2/rclpy/pull/830,https://github.com/ivanpauno,8,https://github.com/ros2/rclpy/pull/830#issuecomment-945901880,"Depends on #814.
Equivalent to ros2/rclcpp#1771.","demo_nodes_py talker segfaults when receiving SIGTERM. Is that a sign of an issue here?

It seems that when I tested on Friday I was sending the signal to the ros2cli process launching the node instead that to the node itself.
c032473 should've fixed the issue.
A failure after sigterm is send now looks like:
Traceback (most recent call last):
  File ""install/demo_nodes_py/lib/demo_nodes_py/listener"", line 11, in <module>
    load_entry_point('demo-nodes-py', 'console_scripts', 'listener')()
  File ""/home/ivanpauno/ros2_ws/build/demo_nodes_py/demo_nodes_py/topics/listener.py"", line 36, in main
    rclpy.spin(node)
  File ""/home/ivanpauno/ros2_ws/install/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 224, in spin
    executor.spin_once()
  File ""/home/ivanpauno/ros2_ws/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 704, in spin_once
    handler, entity, node = self.wait_for_ready_callbacks(timeout_sec=timeout_sec)
  File ""/home/ivanpauno/ros2_ws/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 690, in wait_for_ready_callbacks
    return next(self._cb_iter)
  File ""/home/ivanpauno/ros2_ws/install/rclpy/lib/python3.8/site-packages/rclpy/executors.py"", line 592, in _wait_for_ready_callbacks
    raise ExternalShutdownException()
rclpy.executors.ExternalShutdownException",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,830,2021-09-30T14:54:54Z,2021-10-21T20:37:18Z,2021-11-03T12:40:54Z,MERGED,True,394,12,7,https://github.com/ivanpauno,Handle sigterm,22,['enhancement'],https://github.com/ros2/rclpy/pull/830,https://github.com/ivanpauno,9,https://github.com/ros2/rclpy/pull/830#issuecomment-945980197,"Depends on #814.
Equivalent to ros2/rclcpp#1771.",Force-pushed to fix DCO,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,830,2021-09-30T14:54:54Z,2021-10-21T20:37:18Z,2021-11-03T12:40:54Z,MERGED,True,394,12,7,https://github.com/ivanpauno,Handle sigterm,22,['enhancement'],https://github.com/ros2/rclpy/pull/830,https://github.com/ivanpauno,10,https://github.com/ros2/rclpy/pull/830#issuecomment-947821575,"Depends on #814.
Equivalent to ros2/rclcpp#1771.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,830,2021-09-30T14:54:54Z,2021-10-21T20:37:18Z,2021-11-03T12:40:54Z,MERGED,True,394,12,7,https://github.com/ivanpauno,Handle sigterm,22,['enhancement'],https://github.com/ros2/rclpy/pull/830,https://github.com/ivanpauno,11,https://github.com/ros2/rclpy/pull/830#issuecomment-948662804,"Depends on #814.
Equivalent to ros2/rclcpp#1771.","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,830,2021-09-30T14:54:54Z,2021-10-21T20:37:18Z,2021-11-03T12:40:54Z,MERGED,True,394,12,7,https://github.com/ivanpauno,Handle sigterm,22,['enhancement'],https://github.com/ros2/rclpy/pull/830,https://github.com/emersonknapp,12,https://github.com/ros2/rclpy/pull/830#issuecomment-957018110,"Depends on #814.
Equivalent to ros2/rclcpp#1771.","As you hit on in the conversation above, I have one concern with the behavior of this PR, and it's that you can't handle SIGINT and SIGTERM the same within your Python application. If I make a test as follows:
import rclpy
from demo_nodes_py.topics.talker import Talker

def main():
    rclpy.init()
    node = Talker()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        print('Got SIGINT')
    except rclpy.executors.ExternalShutdownException:
        print('Got SIGTERM')
    print('Destroying')
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()

If I run this program, and send a SIGINT to the process, then the following happens:
[INFO] [1635816254.444592338] [talker]: Publishing: ""Hello World: 0""
Got SIGINT
Destroying

However if you send a SIGTERM, then the following unclean shutdown happens:
[INFO] [1635815908.502049088] [talker]: Publishing: ""Hello World: 0""
Got SIGTERM
Destroying
Traceback (most recent call last):
  File ""./src/emersonknapp/ektest/src/ekpy"", line 42, in <module>
    main()
  File ""./src/emersonknapp/ektest/src/ekpy"", line 38, in main
    rclpy.shutdown()
  File ""/ws/install/gcc/rclpy/lib/python3.8/site-packages/rclpy/__init__.py"", line 123, in shutdown
    _shutdown(context=context)
  File ""/ws/install/gcc/rclpy/lib/python3.8/site-packages/rclpy/utilities.py"", line 58, in shutdown
    return context.shutdown()
  File ""/ws/install/gcc/rclpy/lib/python3.8/site-packages/rclpy/context.py"", line 101, in shutdown
    self.__context.shutdown()
rclpy._rclpy_pybind11.RCLError: failed to shutdown: rcl_shutdown already called on the given context, at /ws/src/ros2/rcl/rcl/src/rcl/init.c:241

I don't think it makes sense to require different shutdown logic between these signals - did you come to a resolution for which one of the behaviors it should be?",True,{'EYES': ['https://github.com/j-rivero']}
ros2/rclpy,https://github.com/ros2/rclpy,830,2021-09-30T14:54:54Z,2021-10-21T20:37:18Z,2021-11-03T12:40:54Z,MERGED,True,394,12,7,https://github.com/ivanpauno,Handle sigterm,22,['enhancement'],https://github.com/ros2/rclpy/pull/830,https://github.com/ivanpauno,13,https://github.com/ros2/rclpy/pull/830#issuecomment-957681557,"Depends on #814.
Equivalent to ros2/rclcpp#1771.","I don't think it makes sense to require different shutdown logic between these signals - did you come to a resolution for which one of the behaviors it should be?

I'm honestly not sure.
Python raises a KeyboardInterrupt from the sigint handler, the signal handler added by ros2 tried to respect that logic.
That seems reasonable, as it's familiar to python users.
We could also raise a KeyboardInterrupt from sigterm. But IMO that would confuse python users, who expect KeyboardInterrupt to only be raised when sigint happens.
Maybe we could raise a different exception when sigterm happens, which would be pretty similar to the sigint case (e.g. rclpy.executors.ExternalShutdownException, without actually shutting down contexts).
It's a bit problematic though, as for that we need the signal module, and signal.signal() can only be called from the main thread, which adds a limitation to rclpy.init() that currently doesn't exist.

The following code should work cleanly in both cases:
import rclpy
from demo_nodes_py.topics.talker import Talker

def main():
    rclpy.init()
    node = Talker()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        print('Got SIGINT')
        rclpy.shutdown()
    except rclpy.executors.ExternalShutdownException:
        print('Got SIGTERM')
    print('Destroying')
    node.destroy_node()


if __name__ == '__main__':
    main()",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,830,2021-09-30T14:54:54Z,2021-10-21T20:37:18Z,2021-11-03T12:40:54Z,MERGED,True,394,12,7,https://github.com/ivanpauno,Handle sigterm,22,['enhancement'],https://github.com/ros2/rclpy/pull/830,https://github.com/ivanpauno,14,https://github.com/ros2/rclpy/pull/830#issuecomment-957686984,"Depends on #814.
Equivalent to ros2/rclcpp#1771.","I think that the other alternative is to also shutdown asynchronously when sigint happens, so you don't really need to call rclpy.shutdown() in either case.
That would be a breaking change, though I think it's probably a good idea.
IIRC @hidmic preferred this alternative.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,830,2021-09-30T14:54:54Z,2021-10-21T20:37:18Z,2021-11-03T12:40:54Z,MERGED,True,394,12,7,https://github.com/ivanpauno,Handle sigterm,22,['enhancement'],https://github.com/ros2/rclpy/pull/830,https://github.com/hidmic,15,https://github.com/ros2/rclpy/pull/830#issuecomment-957830178,"Depends on #814.
Equivalent to ros2/rclcpp#1771.",I think it makes sense for the signals that were configured as a shutdown event upon rclpy initialization to effectively shutdown. That's not mutually exclusive (or shouldn't be IMO) with the default signal handler behavior e.g. raise KeyboardInterrupt on SIGINT.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,830,2021-09-30T14:54:54Z,2021-10-21T20:37:18Z,2021-11-03T12:40:54Z,MERGED,True,394,12,7,https://github.com/ivanpauno,Handle sigterm,22,['enhancement'],https://github.com/ros2/rclpy/pull/830,https://github.com/emersonknapp,16,https://github.com/ros2/rclpy/pull/830#issuecomment-957918665,"Depends on #814.
Equivalent to ros2/rclcpp#1771.","I think that the other alternative is to also shutdown asynchronously when sigint happens, so you don't really need to call rclpy.shutdown() in either case.
I think it makes sense for the signals that were configured as a shutdown event upon rclpy initialization to effectively shutdown.

Yeah, this also makes sense to me. Then, in practice would we say a ROS 2 Python __main__ should look like:
try:
    rclpy.init()
    my_program()
except (KeyboardInterrupt, rclpy.executors.ExternalShutdownException):
    print('Got clean shutdown signal exception.')
else:
    rclpy.shutdown()
finally:
    my_specific_cleanup()",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,830,2021-09-30T14:54:54Z,2021-10-21T20:37:18Z,2021-11-03T12:40:54Z,MERGED,True,394,12,7,https://github.com/ivanpauno,Handle sigterm,22,['enhancement'],https://github.com/ros2/rclpy/pull/830,https://github.com/ivanpauno,17,https://github.com/ros2/rclpy/pull/830#issuecomment-958994682,"Depends on #814.
Equivalent to ros2/rclcpp#1771.","Yeah, this also makes sense to me. Then, in practice would we say a ROS 2 Python main should look like:

Exactly.
I will open a PR trying that, I guess I will have to open some PRs in other repos fixing regressions.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,832,2021-10-11T14:30:20Z,2021-10-11T15:23:19Z,2021-10-11T15:23:22Z,MERGED,True,1,1,1,https://github.com/clalancette,Remove an unnecessary list comprehension in a test.,1,[],https://github.com/ros2/rclpy/pull/832,https://github.com/clalancette,1,https://github.com/ros2/rclpy/pull/832,"This was pointed out by a newer version of flake8 and
flake8-comprehension.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
I believe that this should fix the new warnings we are getting on the buildfarm, like https://ci.ros2.org/view/nightly/job/nightly_linux_release/2065/testReport/junit/rclpy/flake8/C407____test_test_parameter_py_207_24_/","This was pointed out by a newer version of flake8 and
flake8-comprehension.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
I believe that this should fix the new warnings we are getting on the buildfarm, like https://ci.ros2.org/view/nightly/job/nightly_linux_release/2065/testReport/junit/rclpy/flake8/C407____test_test_parameter_py_207_24_/",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,832,2021-10-11T14:30:20Z,2021-10-11T15:23:19Z,2021-10-11T15:23:22Z,MERGED,True,1,1,1,https://github.com/clalancette,Remove an unnecessary list comprehension in a test.,1,[],https://github.com/ros2/rclpy/pull/832,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/832#issuecomment-940085351,"This was pointed out by a newer version of flake8 and
flake8-comprehension.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
I believe that this should fix the new warnings we are getting on the buildfarm, like https://ci.ros2.org/view/nightly/job/nightly_linux_release/2065/testReport/junit/rclpy/flake8/C407____test_test_parameter_py_207_24_/","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,835,2021-10-13T14:48:48Z,2021-10-14T12:24:27Z,2022-01-31T20:20:25Z,CLOSED,False,1,1,1,https://github.com/ivanpauno,`InvalidHandle` shouldn't inherit from `Exception`,1,['bug'],https://github.com/ros2/rclpy/pull/835,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/835,See #623 (comment).,See #623 (comment).,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,835,2021-10-13T14:48:48Z,2021-10-14T12:24:27Z,2022-01-31T20:20:25Z,CLOSED,False,1,1,1,https://github.com/ivanpauno,`InvalidHandle` shouldn't inherit from `Exception`,1,['bug'],https://github.com/ros2/rclpy/pull/835,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/835#issuecomment-942667531,See #623 (comment).,"Just to confirm, should this target the default branch or is it only relevant for foxy?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,835,2021-10-13T14:48:48Z,2021-10-14T12:24:27Z,2022-01-31T20:20:25Z,CLOSED,False,1,1,1,https://github.com/ivanpauno,`InvalidHandle` shouldn't inherit from `Exception`,1,['bug'],https://github.com/ros2/rclpy/pull/835,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/835#issuecomment-943306181,See #623 (comment).,"This only applies to foxy, and might apply to galactic with changes.
But after reading python docs again, I find that inhereting from Exception is actually valid.
So the error reported in #623
[control_node-1]   File ""/opt/ros/foxy/lib/python3.8/site-packages/rclpy/signals.py"", line 30, in __del__
[control_node-1] TypeError: catching classes that do not inherit from BaseException is not allowed

doesn't seem to be caused by this.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,838,2021-10-21T19:20:21Z,2021-10-25T12:34:48Z,2021-10-25T12:34:51Z,MERGED,True,5,1,1,https://github.com/ivanpauno,Avoid race condition in client.call(),1,['bug'],https://github.com/ros2/rclpy/pull/838,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/838,Fix the first of the two issues mentioned in #564.,Fix the first of the two issues mentioned in #564.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,838,2021-10-21T19:20:21Z,2021-10-25T12:34:48Z,2021-10-25T12:34:51Z,MERGED,True,5,1,1,https://github.com/ivanpauno,Avoid race condition in client.call(),1,['bug'],https://github.com/ros2/rclpy/pull/838,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/838#issuecomment-948933653,Fix the first of the two issues mentioned in #564.,@jacobperron did this solve the issue for the case you mentioned here?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,838,2021-10-21T19:20:21Z,2021-10-25T12:34:48Z,2021-10-25T12:34:51Z,MERGED,True,5,1,1,https://github.com/ivanpauno,Avoid race condition in client.call(),1,['bug'],https://github.com/ros2/rclpy/pull/838,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/838#issuecomment-949959072,Fix the first of the two issues mentioned in #564.,"CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,839,2021-10-21T19:28:06Z,2021-10-25T17:11:18Z,2021-10-25T17:11:22Z,MERGED,True,5,5,1,https://github.com/ivanpauno,Add entities to callback group before making them available to the executor to avoid a race condition,1,['bug'],https://github.com/ros2/rclpy/pull/839,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/839,"Fixes the second issue mentioned in #564.
Together with #838, fixes #564.","Fixes the second issue mentioned in #564.
Together with #838, fixes #564.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,839,2021-10-21T19:28:06Z,2021-10-25T17:11:18Z,2021-10-25T17:11:22Z,MERGED,True,5,5,1,https://github.com/ivanpauno,Add entities to callback group before making them available to the executor to avoid a race condition,1,['bug'],https://github.com/ros2/rclpy/pull/839,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/839#issuecomment-950881211,"Fixes the second issue mentioned in #564.
Together with #838, fixes #564.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,840,2021-10-25T16:13:17Z,2022-01-04T19:13:31Z,2022-03-19T15:32:27Z,MERGED,True,0,3,2,https://github.com/apps/mergify,Fix memory leak. (backport #828),1,[],https://github.com/ros2/rclpy/pull/840,https://github.com/apps/mergify,1,https://github.com/ros2/rclpy/pull/840,"This is an automatic backport of pull request #828 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/","This is an automatic backport of pull request #828 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,840,2021-10-25T16:13:17Z,2022-01-04T19:13:31Z,2022-03-19T15:32:27Z,MERGED,True,0,3,2,https://github.com/apps/mergify,Fix memory leak. (backport #828),1,[],https://github.com/ros2/rclpy/pull/840,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/840#issuecomment-951091493,"This is an automatic backport of pull request #828 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/",CC: @aprotyas,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,840,2021-10-25T16:13:17Z,2022-01-04T19:13:31Z,2022-03-19T15:32:27Z,MERGED,True,0,3,2,https://github.com/apps/mergify,Fix memory leak. (backport #828),1,[],https://github.com/ros2/rclpy/pull/840,https://github.com/aprotyas,3,https://github.com/ros2/rclpy/pull/840#issuecomment-951325185,"This is an automatic backport of pull request #828 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/","CI (build/test: --packages-above-and-dependencies rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,840,2021-10-25T16:13:17Z,2022-01-04T19:13:31Z,2022-03-19T15:32:27Z,MERGED,True,0,3,2,https://github.com/apps/mergify,Fix memory leak. (backport #828),1,[],https://github.com/ros2/rclpy/pull/840,https://github.com/aprotyas,4,https://github.com/ros2/rclpy/pull/840#issuecomment-951349382,"This is an automatic backport of pull request #828 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/","Apologies for the botched CI, I ran it on Rolling and not Galactic. 🤦
CI (build: --packages-above-and-dependencies rclpy, test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,840,2021-10-25T16:13:17Z,2022-01-04T19:13:31Z,2022-03-19T15:32:27Z,MERGED,True,0,3,2,https://github.com/apps/mergify,Fix memory leak. (backport #828),1,[],https://github.com/ros2/rclpy/pull/840,https://github.com/clalancette,5,https://github.com/ros2/rclpy/pull/840#issuecomment-966341694,"This is an automatic backport of pull request #828 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/","I think we are just waiting on the Galactic sync to go out, then we can merge this.  Assigning to @cottsay to merge once Galactic sync is done.",True,{'THUMBS_UP': ['https://github.com/fujitatomoya']}
ros2/rclpy,https://github.com/ros2/rclpy,840,2021-10-25T16:13:17Z,2022-01-04T19:13:31Z,2022-03-19T15:32:27Z,MERGED,True,0,3,2,https://github.com/apps/mergify,Fix memory leak. (backport #828),1,[],https://github.com/ros2/rclpy/pull/840,https://github.com/aditya2592,6,https://github.com/ros2/rclpy/pull/840#issuecomment-1005037840,"This is an automatic backport of pull request #828 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/","Hi, just checking if this can be merged? We have a ROS service that needs to run at a high Hz and the memory fills up pretty fast on the client process. I wanted to check if this fixes it",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,840,2021-10-25T16:13:17Z,2022-01-04T19:13:31Z,2022-03-19T15:32:27Z,MERGED,True,0,3,2,https://github.com/apps/mergify,Fix memory leak. (backport #828),1,[],https://github.com/ros2/rclpy/pull/840,https://github.com/aditya2592,7,https://github.com/ros2/rclpy/pull/840#issuecomment-1005295809,"This is an automatic backport of pull request #828 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/","After building from source with this PR merged, the memory leak still exists on Galactic. Its not present on a build from Master. Are there are any other PRs that need to be merged for this to work?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,840,2021-10-25T16:13:17Z,2022-01-04T19:13:31Z,2022-03-19T15:32:27Z,MERGED,True,0,3,2,https://github.com/apps/mergify,Fix memory leak. (backport #828),1,[],https://github.com/ros2/rclpy/pull/840,https://github.com/fujitatomoya,8,https://github.com/ros2/rclpy/pull/840#issuecomment-1005451619,"This is an automatic backport of pull request #828 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/","@aditya2592

the memory leak still exists on Galactic.

do you mean that we still have the memory leak with using https://github.com/ros2/ros2/tree/galactic source build?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,840,2021-10-25T16:13:17Z,2022-01-04T19:13:31Z,2022-03-19T15:32:27Z,MERGED,True,0,3,2,https://github.com/apps/mergify,Fix memory leak. (backport #828),1,[],https://github.com/ros2/rclpy/pull/840,https://github.com/aprotyas,9,https://github.com/ros2/rclpy/pull/840#issuecomment-1005654155,"This is an automatic backport of pull request #828 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/","After building from source with this PR merged, the memory leak still exists on Galactic. Its not present on a build from Master. Are there are any other PRs that need to be merged for this to work?

@aditya2592 can you share a small example to check this?
I recorded a simple client's memory usage with this demo against rclpy built from source (galactic branch) in the latest ros:galactic Docker image and the trace in blue isn't indicative of a memory leak. Thoughts? For reference, here's a visual of the memory leak diagnosed in #822.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,840,2021-10-25T16:13:17Z,2022-01-04T19:13:31Z,2022-03-19T15:32:27Z,MERGED,True,0,3,2,https://github.com/apps/mergify,Fix memory leak. (backport #828),1,[],https://github.com/ros2/rclpy/pull/840,https://github.com/aditya2592,10,https://github.com/ros2/rclpy/pull/840#issuecomment-1069773315,"This is an automatic backport of pull request #828 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/","@aprotyas I am trying to recreate what I am seeing as an example, but basically the leak happens now when multiple clients are requesting the same service and the depth in QOS is > 1. The memory leak is not there when the depth in client is 1. So this makes me think that its related to multiple clients requesting a given service and not necessarily the issue that was fixed in this PR",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,840,2021-10-25T16:13:17Z,2022-01-04T19:13:31Z,2022-03-19T15:32:27Z,MERGED,True,0,3,2,https://github.com/apps/mergify,Fix memory leak. (backport #828),1,[],https://github.com/ros2/rclpy/pull/840,https://github.com/aprotyas,11,https://github.com/ros2/rclpy/pull/840#issuecomment-1073030273,"This is an automatic backport of pull request #828 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.io/","@aprotyas I am trying to recreate what I am seeing as an example, but basically the leak happens now when multiple clients are requesting the same service and the depth in QOS is > 1. The memory leak is not there when the depth in client is 1. So this makes me think that its related to multiple clients requesting a given service and not necessarily the issue that was fixed in this PR

Do you mind sharing a simple example to reproduce?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,844,2021-11-04T19:43:01Z,2021-11-10T16:13:26Z,2021-11-10T16:13:28Z,MERGED,True,1,5,1,https://github.com/ivanpauno,Shutdown asynchronously when sigint is received,1,['enhancement'],https://github.com/ros2/rclpy/pull/844,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/844,"Addresses #830 (comment).

Linux 
Linux-aarch64 
macOS 
Windows","Addresses #830 (comment).

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,844,2021-11-04T19:43:01Z,2021-11-10T16:13:26Z,2021-11-10T16:13:28Z,MERGED,True,1,5,1,https://github.com/ivanpauno,Shutdown asynchronously when sigint is received,1,['enhancement'],https://github.com/ros2/rclpy/pull/844,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/844#issuecomment-962063057,"Addresses #830 (comment).

Linux 
Linux-aarch64 
macOS 
Windows","This PR will require some changes in other repos (as shown by the CI jobs), but it seems like a reasonable thing to do, it will make signal handling more consistent (see discussion here).
Waiting for feedback before opening the remaining PRs.
FYI @emersonknapp",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,844,2021-11-04T19:43:01Z,2021-11-10T16:13:26Z,2021-11-10T16:13:28Z,MERGED,True,1,5,1,https://github.com/ivanpauno,Shutdown asynchronously when sigint is received,1,['enhancement'],https://github.com/ros2/rclpy/pull/844,https://github.com/emersonknapp,3,https://github.com/ros2/rclpy/pull/844#issuecomment-962070453,"Addresses #830 (comment).

Linux 
Linux-aarch64 
macOS 
Windows",This looks good to me!,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,844,2021-11-04T19:43:01Z,2021-11-10T16:13:26Z,2021-11-10T16:13:28Z,MERGED,True,1,5,1,https://github.com/ivanpauno,Shutdown asynchronously when sigint is received,1,['enhancement'],https://github.com/ros2/rclpy/pull/844,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/844#issuecomment-964436852,"Addresses #830 (comment).

Linux 
Linux-aarch64 
macOS 
Windows","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,845,2021-11-05T18:27:13Z,2021-11-05T20:44:41Z,2021-11-05T20:44:43Z,MERGED,True,3,1,1,https://github.com/jacobperron,Update maintainers,1,[],https://github.com/ros2/rclpy/pull/845,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/845,"Add Jacob and Aditya, remove Ivan.","Add Jacob and Aditya, remove Ivan.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,845,2021-11-05T18:27:13Z,2021-11-05T20:44:41Z,2021-11-05T20:44:43Z,MERGED,True,3,1,1,https://github.com/jacobperron,Update maintainers,1,[],https://github.com/ros2/rclpy/pull/845,https://github.com/jacobperron,2,https://github.com/ros2/rclpy/pull/845#issuecomment-962206136,"Add Jacob and Aditya, remove Ivan.",I've created a ticket for the test failure (which I presume is unrelated to this package.xml change): #846,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,845,2021-11-05T18:27:13Z,2021-11-05T20:44:41Z,2021-11-05T20:44:43Z,MERGED,True,3,1,1,https://github.com/jacobperron,Update maintainers,1,[],https://github.com/ros2/rclpy/pull/845,https://github.com/jacobperron,3,https://github.com/ros2/rclpy/pull/845#issuecomment-962206326,"Add Jacob and Aditya, remove Ivan.",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,847,2021-11-05T21:13:11Z,,2022-05-12T17:07:40Z,OPEN,False,1,2,1,https://github.com/jtbandes,Change default callback group to a ReentrantCallbackGroup,1,['enhancement'],https://github.com/ros2/rclpy/pull/847,https://github.com/jtbandes,1,https://github.com/ros2/rclpy/pull/847,"Per discussion in #834, making the default callback group re-entrant makes adopting coroutines easier.
cc @sloretz @ivanpauno","Per discussion in #834, making the default callback group re-entrant makes adopting coroutines easier.
cc @sloretz @ivanpauno",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,847,2021-11-05T21:13:11Z,,2022-05-12T17:07:40Z,OPEN,False,1,2,1,https://github.com/jtbandes,Change default callback group to a ReentrantCallbackGroup,1,['enhancement'],https://github.com/ros2/rclpy/pull/847,https://github.com/jtbandes,2,https://github.com/ros2/rclpy/pull/847#issuecomment-1109005196,"Per discussion in #834, making the default callback group re-entrant makes adopting coroutines easier.
cc @sloretz @ivanpauno",Any interest in reviewing or accepting this change? cc @sloretz,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,847,2021-11-05T21:13:11Z,,2022-05-12T17:07:40Z,OPEN,False,1,2,1,https://github.com/jtbandes,Change default callback group to a ReentrantCallbackGroup,1,['enhancement'],https://github.com/ros2/rclpy/pull/847,https://github.com/jtbandes,3,https://github.com/ros2/rclpy/pull/847#issuecomment-1109160571,"Per discussion in #834, making the default callback group re-entrant makes adopting coroutines easier.
cc @sloretz @ivanpauno",Specific comment from prior discussion for reference: #834 (comment),True,{}
ros2/rclpy,https://github.com/ros2/rclpy,849,2021-11-13T20:02:58Z,2021-12-22T17:52:00Z,2022-01-04T17:18:59Z,MERGED,True,9,1,2,https://github.com/fujitatomoya,print history and depth via topic info -v,2,['help wanted'],https://github.com/ros2/rclpy/pull/849,https://github.com/fujitatomoya,1,https://github.com/ros2/rclpy/pull/849,"address ros2/ros2cli#667
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com","address ros2/ros2cli#667
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,849,2021-11-13T20:02:58Z,2021-12-22T17:52:00Z,2022-01-04T17:18:59Z,MERGED,True,9,1,2,https://github.com/fujitatomoya,print history and depth via topic info -v,2,['help wanted'],https://github.com/ros2/rclpy/pull/849,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/849#issuecomment-968128713,"address ros2/ros2cli#667
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com","How it displays.
root@a6cfc30c581b:~/docker_ws/ros2_colcon# ros2 run demo_nodes_cpp talker
[INFO] [1636831476.771070892] [talker]: Publishing: 'Hello World: 1'

root@a6cfc30c581b:~/docker_ws/ros2_colcon# ros2 topic info -v /chatter
Type: std_msgs/msg/String

Publisher count: 1

Node name: talker
Node namespace: /
Topic type: std_msgs/msg/String
Endpoint type: PUBLISHER
GID: 01.10.5a.ea.44.3c.29.8e.ee.fa.4b.9a.00.00.15.03.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  History (Depth): KEEP_LAST (7)  !!! HERE !!!
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

Subscription count: 0

root@a6cfc30c581b:~/docker_ws/ros2_colcon# ros2 run demo_nodes_cpp listener
^C[INFO] [1636831516.595457482] [rclcpp]: signal_handler(signum=2)

root@a6cfc30c581b:~/docker_ws/ros2_colcon# ros2 topic info -v /chatter
Type: std_msgs/msg/String

Publisher count: 0

Subscription count: 1

Node name: listener
Node namespace: /
Topic type: std_msgs/msg/String
Endpoint type: SUBSCRIPTION
GID: 01.10.d3.2b.f9.d3.d8.b5.32.38.05.68.00.00.15.04.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  History (Depth): KEEP_LAST (10) !!! HERE !!!
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,849,2021-11-13T20:02:58Z,2021-12-22T17:52:00Z,2022-01-04T17:18:59Z,MERGED,True,9,1,2,https://github.com/fujitatomoya,print history and depth via topic info -v,2,['help wanted'],https://github.com/ros2/rclpy/pull/849,https://github.com/fujitatomoya,3,https://github.com/ros2/rclpy/pull/849#issuecomment-968128966,"address ros2/ros2cli#667
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com",@clalancette @ivanpauno minor extension to print topic info verbose. could you help review when you got time?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,849,2021-11-13T20:02:58Z,2021-12-22T17:52:00Z,2022-01-04T17:18:59Z,MERGED,True,9,1,2,https://github.com/fujitatomoya,print history and depth via topic info -v,2,['help wanted'],https://github.com/ros2/rclpy/pull/849,https://github.com/fujitatomoya,4,https://github.com/ros2/rclpy/pull/849#issuecomment-970912206,"address ros2/ros2cli#667
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com","I did not know #849 (comment), and it is clearly described that in rmw interface,
https://github.com/ros2/rmw/blob/35fc6ab8fad4db90eb55db9d1ecf50dc1aa3638d/rmw/include/rmw/get_topic_endpoint_info.h#L39-L40
 * From the current QoS settings available, the only ones not shared by DDS based
 * implementations are `history` and `history_depth`.

thinking about using different rmw implementation, i am not inclined to print history and history_depth at this moment to avoid the confusion...
i'd like to close this PR if there is no denial or suggestions.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,849,2021-11-13T20:02:58Z,2021-12-22T17:52:00Z,2022-01-04T17:18:59Z,MERGED,True,9,1,2,https://github.com/fujitatomoya,print history and depth via topic info -v,2,['help wanted'],https://github.com/ros2/rclpy/pull/849,https://github.com/ivanpauno,5,https://github.com/ros2/rclpy/pull/849#issuecomment-971582616,"address ros2/ros2cli#667
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com","i'd like to close this PR if there is no denial or suggestions.

My suggestion is to fix rmw implementations so they return history = UNKNOWN when they cannot provide that information, instead of returning sth that's wrong. rmw API docs actually require this.
With that solved, history and history depth could be printed conditionally (if history != UNKNOWN: ...).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,849,2021-11-13T20:02:58Z,2021-12-22T17:52:00Z,2022-01-04T17:18:59Z,MERGED,True,9,1,2,https://github.com/fujitatomoya,print history and depth via topic info -v,2,['help wanted'],https://github.com/ros2/rclpy/pull/849,https://github.com/matthews-jca,6,https://github.com/ros2/rclpy/pull/849#issuecomment-971584967,"address ros2/ros2cli#667
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com","My suggestion is to fix rmw implementations so they return history = UNKNOWN when they cannot provide that information, instead of returning sth that's wrong. rmw API docs actually require this.
With that solved, history and history depth could be printed conditionally (if history != UNKNOWN: ...).

This makes sense to me. Development of large systems with cyclone has been a real pain without being able to inspect the current state of the system. Our original drive from FastDDS to Cyclone under foxy was actually just to get diagnostic output when we had QOS mismatches",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,849,2021-11-13T20:02:58Z,2021-12-22T17:52:00Z,2022-01-04T17:18:59Z,MERGED,True,9,1,2,https://github.com/fujitatomoya,print history and depth via topic info -v,2,['help wanted'],https://github.com/ros2/rclpy/pull/849,https://github.com/ivanpauno,7,https://github.com/ros2/rclpy/pull/849#issuecomment-985478538,"address ros2/ros2cli#667
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com","@fujitatomoya @matthews-jca are you planning to contribute the missing pieces in the rmw implementations (see above comment) to make this PR possible?
If there's no plan to do that in a near future, we can close this PR and reopen it when the underlying issue is solved.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,849,2021-11-13T20:02:58Z,2021-12-22T17:52:00Z,2022-01-04T17:18:59Z,MERGED,True,9,1,2,https://github.com/fujitatomoya,print history and depth via topic info -v,2,['help wanted'],https://github.com/ros2/rclpy/pull/849,https://github.com/fujitatomoya,8,https://github.com/ros2/rclpy/pull/849#issuecomment-985620111,"address ros2/ros2cli#667
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com",@ivanpauno i will try to address in next week! thanks for the ping 👍,True,{'THUMBS_UP': ['https://github.com/ivanpauno']}
ros2/rclpy,https://github.com/ros2/rclpy,849,2021-11-13T20:02:58Z,2021-12-22T17:52:00Z,2022-01-04T17:18:59Z,MERGED,True,9,1,2,https://github.com/fujitatomoya,print history and depth via topic info -v,2,['help wanted'],https://github.com/ros2/rclpy/pull/849,https://github.com/fujitatomoya,9,https://github.com/ros2/rclpy/pull/849#issuecomment-988548722,"address ros2/ros2cli#667
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com","Verification note,

Cyclonedds

rmw_cyclonedds_cpp sets history and depth accordingly if available.
https://github.com/ros2/rmw_cyclonedds/blob/287e781937f42570d4c7a14ed24e201c528c20af/rmw_cyclonedds_cpp/src/rmw_node.cpp#L626-L636
# RMW_IMPLEMENTATION=rmw_cyclonedds_cpp ros2 run demo_nodes_cpp talker
...

# RMW_IMPLEMENTATION=rmw_cyclonedds_cpp ros2 topic info -v /chatter --no-daemon
Type: std_msgs/msg/String

Publisher count: 1

Node name: talker
Node namespace: /
Topic type: std_msgs/msg/String
Endpoint type: PUBLISHER
GID: 01.10.2c.a6.c6.2e.e4.6e.be.dc.75.d6.00.00.15.03.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  History (Depth): KEEP_LAST (7)
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

Subscription count: 0


Fast-DDS Publisher

it does not set QoS history nor depth during endpoint discovery.
rmw_qos_profile_unknown is used for initialization so it will be QoSHistoryPolicy.UNKNOWN.
https://github.com/ros2/rmw_fastrtps/blob/c455bc3498d587b973a5bd64c11d3c78cde2ec67/rmw_fastrtps_shared_cpp/include/rmw_fastrtps_shared_cpp/custom_participant_info.hpp#L149-L162
# RMW_IMPLEMENTATION=rmw_fastrtps_cpp ros2 run demo_nodes_cpp talker
...

# RMW_IMPLEMENTATION=rmw_fastrtps_cpp ros2 topic info -v /chatter --no-daemon
Type: std_msgs/msg/String

Publisher count: 1

Node name: talker
Node namespace: /
Topic type: std_msgs/msg/String
Endpoint type: PUBLISHER
GID: 01.0f.64.e2.c3.73.a8.65.01.00.00.00.00.00.12.03.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  History (Depth): UNKNOWN
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

Subscription count: 0


RTI Connextdds

it tries to set history nor depth if available, but it seems that history is unavailable.
https://github.com/ros2/rmw_connextdds/blob/2e328403e27a81532e74a8f3ec73e1e71c0b00c8/rmw_connextdds_common/src/common/rmw_graph.cpp#L745-L760
# RMW_IMPLEMENTATION=rmw_connextdds ros2 run demo_nodes_cpp talker
...

# RMW_IMPLEMENTATION=rmw_connextdds ros2 topic info -v /chatter --no-daemon
RTI Data Distribution Service Non-commercial license is for academic, research, evaluation and personal use only. USE FOR COMMERCIAL PURPOSES IS PROHIBITED. See RTI_LICENSE.TXT for terms. Download free tools at rti.com/ncl. License issued to Non-Commercial User license@rti.com For non-production use only.
Expires on 00-jan-00 See www.rti.com for more information.
Type: std_msgs/msg/String

Publisher count: 1

Node name: talker
Node namespace: /
Topic type: std_msgs/msg/String
Endpoint type: PUBLISHER
GID: 01.01.9e.b8.ec.96.a9.9f.5f.a3.c2.8b.80.01.29.03.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  History (Depth): UNKNOWN
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

Subscription count: 0",True,{'HEART': ['https://github.com/matthews-jca']}
ros2/rclpy,https://github.com/ros2/rclpy,849,2021-11-13T20:02:58Z,2021-12-22T17:52:00Z,2022-01-04T17:18:59Z,MERGED,True,9,1,2,https://github.com/fujitatomoya,print history and depth via topic info -v,2,['help wanted'],https://github.com/ros2/rclpy/pull/849,https://github.com/fujitatomoya,10,https://github.com/ros2/rclpy/pull/849#issuecomment-988564341,"address ros2/ros2cli#667
Signed-off-by: Tomoya.Fujita Tomoya.Fujita@sony.com","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,851,2021-11-18T19:49:29Z,,2021-12-09T15:37:22Z,OPEN,False,10,0,1,https://github.com/squizz617,check if publisher's rmw handle is NULL,2,[],https://github.com/ros2/rclpy/pull/851,https://github.com/squizz617,1,https://github.com/ros2/rclpy/pull/851,"Add a NULL check for the rmw handle of the created publisher in rclpy_create_publisher.
This pr fixes issue #826 : rclpy now aborts if the rmw handle becomes NULL before returning from rclpy_create_publisher:
$ ros2 run demo_nodes_py talker
Traceback (most recent call last):                                    
  File ""/home/seulbae/workspace/ros2_foxy/install/demo_nodes_py/lib/demo_nodes_py/talker"", line 11, in <module>
    load_entry_point('demo-nodes-py', 'console_scripts', 'talker')()                                                                         
  File ""/home/seulbae/workspace/ros2_foxy/build/demo_nodes_py/demo_nodes_py/topics/talker.py"", line 41, in main                              
    node = Talker()                                                   
  File ""/home/seulbae/workspace/ros2_foxy/build/demo_nodes_py/demo_nodes_py/topics/talker.py"", line 26, in __init__                          
    self.pub = self.create_publisher(String, 'chatter', 10)                                                                                  
  File ""/home/seulbae/workspace/ros2_foxy/install/rclpy/lib/python3.8/site-packages/rclpy/node.py"", line 1144, in create_publisher
    publisher_capsule = _rclpy.rclpy_create_publisher(                                                                                       
_rclpy.RCLError: Failed to get publisher rmw handle: publisher's rmw handle is invalid, at /home/seulbae/workspace/ros2_foxy/src/ros2/rcl/rcl/src/rcl/publisher.c:442

Signed-off-by: Seulbae Kim squizz617@gmail.com","Add a NULL check for the rmw handle of the created publisher in rclpy_create_publisher.
This pr fixes issue #826 : rclpy now aborts if the rmw handle becomes NULL before returning from rclpy_create_publisher:
$ ros2 run demo_nodes_py talker
Traceback (most recent call last):                                    
  File ""/home/seulbae/workspace/ros2_foxy/install/demo_nodes_py/lib/demo_nodes_py/talker"", line 11, in <module>
    load_entry_point('demo-nodes-py', 'console_scripts', 'talker')()                                                                         
  File ""/home/seulbae/workspace/ros2_foxy/build/demo_nodes_py/demo_nodes_py/topics/talker.py"", line 41, in main                              
    node = Talker()                                                   
  File ""/home/seulbae/workspace/ros2_foxy/build/demo_nodes_py/demo_nodes_py/topics/talker.py"", line 26, in __init__                          
    self.pub = self.create_publisher(String, 'chatter', 10)                                                                                  
  File ""/home/seulbae/workspace/ros2_foxy/install/rclpy/lib/python3.8/site-packages/rclpy/node.py"", line 1144, in create_publisher
    publisher_capsule = _rclpy.rclpy_create_publisher(                                                                                       
_rclpy.RCLError: Failed to get publisher rmw handle: publisher's rmw handle is invalid, at /home/seulbae/workspace/ros2_foxy/src/ros2/rcl/rcl/src/rcl/publisher.c:442

Signed-off-by: Seulbae Kim squizz617@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,852,2021-11-18T20:49:25Z,2021-11-18T20:54:21Z,2021-11-18T22:11:37Z,CLOSED,False,2,2,1,https://github.com/audrow,Update maintainers,1,[],https://github.com/ros2/rclpy/pull/852,https://github.com/audrow,1,https://github.com/ros2/rclpy/pull/852,"Update maintainers to Aditya Pande (@adityapande-1995), Jacob Perron (@jacobperron), and Shane Loretz (@sloretz).","Update maintainers to Aditya Pande (@adityapande-1995), Jacob Perron (@jacobperron), and Shane Loretz (@sloretz).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,852,2021-11-18T20:49:25Z,2021-11-18T20:54:21Z,2021-11-18T22:11:37Z,CLOSED,False,2,2,1,https://github.com/audrow,Update maintainers,1,[],https://github.com/ros2/rclpy/pull/852,https://github.com/audrow,2,https://github.com/ros2/rclpy/pull/852#issuecomment-973262575,"Update maintainers to Aditya Pande (@adityapande-1995), Jacob Perron (@jacobperron), and Shane Loretz (@sloretz).",Closing since this only shifts around the entries.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,853,2021-11-24T14:48:10Z,2021-11-29T18:53:25Z,2021-11-29T18:54:58Z,MERGED,True,14,6,2,https://github.com/ivanpauno,Fix automatically declared parameters descriptor type,2,['bug'],https://github.com/ros2/rclpy/pull/853,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/853,"Fixes ros2/ros2#1173.
Fixes #829.","Fixes ros2/ros2#1173.
Fixes #829.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,853,2021-11-24T14:48:10Z,2021-11-29T18:53:25Z,2021-11-29T18:54:58Z,MERGED,True,14,6,2,https://github.com/ivanpauno,Fix automatically declared parameters descriptor type,2,['bug'],https://github.com/ros2/rclpy/pull/853,https://github.com/adityapande-1995,2,https://github.com/ros2/rclpy/pull/853#issuecomment-978096649,"Fixes ros2/ros2#1173.
Fixes #829.","Tested with rolling, resolves the issue. Need to backport this to galactic (which the issue references) as well. Maybe the mergify bot can help ?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,853,2021-11-24T14:48:10Z,2021-11-29T18:53:25Z,2021-11-29T18:54:58Z,MERGED,True,14,6,2,https://github.com/ivanpauno,Fix automatically declared parameters descriptor type,2,['bug'],https://github.com/ros2/rclpy/pull/853,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/853#issuecomment-978119318,"Fixes ros2/ros2#1173.
Fixes #829.","Tested with rolling, resolves the issue. Need to backport this to galactic (which the issue references) as well. Maybe the mergify bot can help ?

Yes, we should use the mergify bot after merging this PR to master.",True,{'THUMBS_UP': ['https://github.com/adityapande-1995']}
ros2/rclpy,https://github.com/ros2/rclpy,853,2021-11-24T14:48:10Z,2021-11-29T18:53:25Z,2021-11-29T18:54:58Z,MERGED,True,14,6,2,https://github.com/ivanpauno,Fix automatically declared parameters descriptor type,2,['bug'],https://github.com/ros2/rclpy/pull/853,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/853#issuecomment-978133123,"Fixes ros2/ros2#1173.
Fixes #829.","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,853,2021-11-24T14:48:10Z,2021-11-29T18:53:25Z,2021-11-29T18:54:58Z,MERGED,True,14,6,2,https://github.com/ivanpauno,Fix automatically declared parameters descriptor type,2,['bug'],https://github.com/ros2/rclpy/pull/853,https://github.com/ivanpauno,5,https://github.com/ros2/rclpy/pull/853#issuecomment-981608397,"Fixes ros2/ros2#1173.
Fixes #829.",Windows,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,853,2021-11-24T14:48:10Z,2021-11-29T18:53:25Z,2021-11-29T18:54:58Z,MERGED,True,14,6,2,https://github.com/ivanpauno,Fix automatically declared parameters descriptor type,2,['bug'],https://github.com/ros2/rclpy/pull/853,https://github.com/ivanpauno,6,https://github.com/ros2/rclpy/pull/853#issuecomment-981918658,"Fixes ros2/ros2#1173.
Fixes #829.","Same failures can be seen in windows repeated nightly jobs (e.g. this one).
Going in!",True,{'THUMBS_UP': ['https://github.com/adityapande-1995']}
ros2/rclpy,https://github.com/ros2/rclpy,853,2021-11-24T14:48:10Z,2021-11-29T18:53:25Z,2021-11-29T18:54:58Z,MERGED,True,14,6,2,https://github.com/ivanpauno,Fix automatically declared parameters descriptor type,2,['bug'],https://github.com/ros2/rclpy/pull/853,https://github.com/ivanpauno,7,https://github.com/ros2/rclpy/pull/853#issuecomment-981919443,"Fixes ros2/ros2#1173.
Fixes #829.",@Mergifyio backport galactic,True,{'THUMBS_UP': ['https://github.com/mergify%5Bbot%5D']}
ros2/rclpy,https://github.com/ros2/rclpy,853,2021-11-24T14:48:10Z,2021-11-29T18:53:25Z,2021-11-29T18:54:58Z,MERGED,True,14,6,2,https://github.com/ivanpauno,Fix automatically declared parameters descriptor type,2,['bug'],https://github.com/ros2/rclpy/pull/853,https://github.com/apps/mergify,8,https://github.com/ros2/rclpy/pull/853#issuecomment-981919971,"Fixes ros2/ros2#1173.
Fixes #829.","backport galactic

✅ Backports have been created


#854 Fix automatically declared parameters descriptor type (backport #853) has been created for branch galactic",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,854,2021-11-29T18:54:56Z,2021-11-30T19:22:36Z,2021-11-30T19:22:39Z,MERGED,True,14,6,2,https://github.com/apps/mergify,Fix automatically declared parameters descriptor type (backport #853),1,['bug'],https://github.com/ros2/rclpy/pull/854,https://github.com/apps/mergify,1,https://github.com/ros2/rclpy/pull/854,"This is an automatic backport of pull request #853 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","This is an automatic backport of pull request #853 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,854,2021-11-29T18:54:56Z,2021-11-30T19:22:36Z,2021-11-30T19:22:39Z,MERGED,True,14,6,2,https://github.com/apps/mergify,Fix automatically declared parameters descriptor type (backport #853),1,['bug'],https://github.com/ros2/rclpy/pull/854,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/854#issuecomment-982187278,"This is an automatic backport of pull request #853 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,854,2021-11-29T18:54:56Z,2021-11-30T19:22:36Z,2021-11-30T19:22:39Z,MERGED,True,14,6,2,https://github.com/apps/mergify,Fix automatically declared parameters descriptor type (backport #853),1,['bug'],https://github.com/ros2/rclpy/pull/854,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/854#issuecomment-982597405,"This is an automatic backport of pull request #853 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","Linux 
Linux-aarch64 
macOS 
Windows  (unrelated failure, see e.g. this nightly job)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,855,2021-12-01T14:55:26Z,2021-12-22T18:56:34Z,2021-12-22T18:56:34Z,MERGED,True,1,0,1,https://github.com/lowellausen-karelics,Adding _wake_executor to create_subscription on foxy,1,[],https://github.com/ros2/rclpy/pull/855,https://github.com/lowellausen-karelics,1,https://github.com/ros2/rclpy/pull/855,"In short, same as PR #647 but on foxy branch.
I was facing a problem where, when creating a subscriber (create_subscription) for a node that is already spinning the callback would never run (when it should run). It would only run after calling another random node method, for example creating a timer.
After searching we found out that the problem is that create_subscription wasn't calling _wake_executor so the node wasn't really aware of the new callback, until some other method called _wake_executor.
This problem has been fixed already but only in the master branch  (on PR #647) , so I thought it could be important to bring this fix to the foxy branch as well.
Signed-off-by: Leonardo Oliveira Wellausen leonardo.wellausen@karelics.fi","In short, same as PR #647 but on foxy branch.
I was facing a problem where, when creating a subscriber (create_subscription) for a node that is already spinning the callback would never run (when it should run). It would only run after calling another random node method, for example creating a timer.
After searching we found out that the problem is that create_subscription wasn't calling _wake_executor so the node wasn't really aware of the new callback, until some other method called _wake_executor.
This problem has been fixed already but only in the master branch  (on PR #647) , so I thought it could be important to bring this fix to the foxy branch as well.
Signed-off-by: Leonardo Oliveira Wellausen leonardo.wellausen@karelics.fi",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,855,2021-12-01T14:55:26Z,2021-12-22T18:56:34Z,2021-12-22T18:56:34Z,MERGED,True,1,0,1,https://github.com/lowellausen-karelics,Adding _wake_executor to create_subscription on foxy,1,[],https://github.com/ros2/rclpy/pull/855,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/855#issuecomment-995363786,"In short, same as PR #647 but on foxy branch.
I was facing a problem where, when creating a subscriber (create_subscription) for a node that is already spinning the callback would never run (when it should run). It would only run after calling another random node method, for example creating a timer.
After searching we found out that the problem is that create_subscription wasn't calling _wake_executor so the node wasn't really aware of the new callback, until some other method called _wake_executor.
This problem has been fixed already but only in the master branch  (on PR #647) , so I thought it could be important to bring this fix to the foxy branch as well.
Signed-off-by: Leonardo Oliveira Wellausen leonardo.wellausen@karelics.fi","CI

Repos file: https://gist.githubusercontent.com/sloretz/167aff2ec60675548b1983ae3c04f1be/raw/049cb86ae399291271b308de326cac064a63c83d/ros2.repos
build: --packages-up-to rclpy
test: --packages-select rclpy

Jobs

Linux 
Linux-aarch64 
macOS 
Windows",True,{'THUMBS_UP': ['https://github.com/lowellausen-karelics']}
ros2/rclpy,https://github.com/ros2/rclpy,855,2021-12-01T14:55:26Z,2021-12-22T18:56:34Z,2021-12-22T18:56:34Z,MERGED,True,1,0,1,https://github.com/lowellausen-karelics,Adding _wake_executor to create_subscription on foxy,1,[],https://github.com/ros2/rclpy/pull/855,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/855#issuecomment-999795268,"In short, same as PR #647 but on foxy branch.
I was facing a problem where, when creating a subscriber (create_subscription) for a node that is already spinning the callback would never run (when it should run). It would only run after calling another random node method, for example creating a timer.
After searching we found out that the problem is that create_subscription wasn't calling _wake_executor so the node wasn't really aware of the new callback, until some other method called _wake_executor.
This problem has been fixed already but only in the master branch  (on PR #647) , so I thought it could be important to bring this fix to the foxy branch as well.
Signed-off-by: Leonardo Oliveira Wellausen leonardo.wellausen@karelics.fi",CMake warnings appear unrelated. Thanks for the backport PR!,True,{'THUMBS_UP': ['https://github.com/lowellausen-karelics']}
ros2/rclpy,https://github.com/ros2/rclpy,858,2021-12-09T01:30:07Z,2021-12-15T21:00:44Z,2021-12-15T21:00:49Z,MERGED,True,409,0,6,https://github.com/sloretz,Add Clock.sleep_until,19,[],https://github.com/ros2/rclpy/pull/858,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/858,"Fixes #617
This works, and adds a method Clock.sleep_until() to sleep until a particular time on a clock is reached, respecting ROS time.
I chose to implement the time jump callbacks in Python because it's easier and reuses code, but it does mean the internal API Event::wait_until_ros() requires the caller to setup the required time jump callback or it will wait forever. Since this is an internal API, I think it's fine to document it and leave it as is. I couldn't think of a cleaner solution and user's won't be affected one way or the other.
Related to ros2/rclcpp#1730","Fixes #617
This works, and adds a method Clock.sleep_until() to sleep until a particular time on a clock is reached, respecting ROS time.
I chose to implement the time jump callbacks in Python because it's easier and reuses code, but it does mean the internal API Event::wait_until_ros() requires the caller to setup the required time jump callback or it will wait forever. Since this is an internal API, I think it's fine to document it and leave it as is. I couldn't think of a cleaner solution and user's won't be affected one way or the other.
Related to ros2/rclcpp#1730",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,858,2021-12-09T01:30:07Z,2021-12-15T21:00:44Z,2021-12-15T21:00:49Z,MERGED,True,409,0,6,https://github.com/sloretz,Add Clock.sleep_until,19,[],https://github.com/ros2/rclpy/pull/858,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/858#issuecomment-990120310,"Fixes #617
This works, and adds a method Clock.sleep_until() to sleep until a particular time on a clock is reached, respecting ROS time.
I chose to implement the time jump callbacks in Python because it's easier and reuses code, but it does mean the internal API Event::wait_until_ros() requires the caller to setup the required time jump callback or it will wait forever. Since this is an internal API, I think it's fine to document it and leave it as is. I couldn't think of a cleaner solution and user's won't be affected one way or the other.
Related to ros2/rclcpp#1730",PR job requires ros2/rcl#955 released to pass,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,858,2021-12-09T01:30:07Z,2021-12-15T21:00:44Z,2021-12-15T21:00:49Z,MERGED,True,409,0,6,https://github.com/sloretz,Add Clock.sleep_until,19,[],https://github.com/ros2/rclpy/pull/858,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/858#issuecomment-992846699,"Fixes #617
This works, and adds a method Clock.sleep_until() to sleep until a particular time on a clock is reached, respecting ROS time.
I chose to implement the time jump callbacks in Python because it's easier and reuses code, but it does mean the internal API Event::wait_until_ros() requires the caller to setup the required time jump callback or it will wait forever. Since this is an internal API, I think it's fine to document it and leave it as is. I couldn't think of a cleaner solution and user's won't be affected one way or the other.
Related to ros2/rclcpp#1730","CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,858,2021-12-09T01:30:07Z,2021-12-15T21:00:44Z,2021-12-15T21:00:49Z,MERGED,True,409,0,6,https://github.com/sloretz,Add Clock.sleep_until,19,[],https://github.com/ros2/rclpy/pull/858,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/858#issuecomment-992951136,"Fixes #617
This works, and adds a method Clock.sleep_until() to sleep until a particular time on a clock is reached, respecting ROS time.
I chose to implement the time jump callbacks in Python because it's easier and reuses code, but it does mean the internal API Event::wait_until_ros() requires the caller to setup the required time jump callback or it will wait forever. Since this is an internal API, I think it's fine to document it and leave it as is. I couldn't think of a cleaner solution and user's won't be affected one way or the other.
Related to ros2/rclcpp#1730","CI (Re-run)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,858,2021-12-09T01:30:07Z,2021-12-15T21:00:44Z,2021-12-15T21:00:49Z,MERGED,True,409,0,6,https://github.com/sloretz,Add Clock.sleep_until,19,[],https://github.com/ros2/rclpy/pull/858,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/858#issuecomment-992979898,"Fixes #617
This works, and adds a method Clock.sleep_until() to sleep until a particular time on a clock is reached, respecting ROS time.
I chose to implement the time jump callbacks in Python because it's easier and reuses code, but it does mean the internal API Event::wait_until_ros() requires the caller to setup the required time jump callback or it will wait forever. Since this is an internal API, I think it's fine to document it and leave it as is. I couldn't think of a cleaner solution and user's won't be affected one way or the other.
Related to ros2/rclcpp#1730","CI Re-run

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,858,2021-12-09T01:30:07Z,2021-12-15T21:00:44Z,2021-12-15T21:00:49Z,MERGED,True,409,0,6,https://github.com/sloretz,Add Clock.sleep_until,19,[],https://github.com/ros2/rclpy/pull/858,https://github.com/clalancette,6,https://github.com/ros2/rclpy/pull/858#issuecomment-993876338,"Fixes #617
This works, and adds a method Clock.sleep_until() to sleep until a particular time on a clock is reached, respecting ROS time.
I chose to implement the time jump callbacks in Python because it's easier and reuses code, but it does mean the internal API Event::wait_until_ros() requires the caller to setup the required time jump callback or it will wait forever. Since this is an internal API, I think it's fine to document it and leave it as is. I couldn't think of a cleaner solution and user's won't be affected one way or the other.
Related to ros2/rclcpp#1730","PR job requires ros2/rcl#955 released to pass

I've merged ros/rosdistro#31477, which should allow the Rpr job to pass (once the downstream packages are done compiling. which will take a while).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,858,2021-12-09T01:30:07Z,2021-12-15T21:00:44Z,2021-12-15T21:00:49Z,MERGED,True,409,0,6,https://github.com/sloretz,Add Clock.sleep_until,19,[],https://github.com/ros2/rclpy/pull/858,https://github.com/sloretz,7,https://github.com/ros2/rclpy/pull/858#issuecomment-993915975,"Fixes #617
This works, and adds a method Clock.sleep_until() to sleep until a particular time on a clock is reached, respecting ROS time.
I chose to implement the time jump callbacks in Python because it's easier and reuses code, but it does mean the internal API Event::wait_until_ros() requires the caller to setup the required time jump callback or it will wait forever. Since this is an internal API, I think it's fine to document it and leave it as is. I couldn't think of a cleaner solution and user's won't be affected one way or the other.
Related to ros2/rclcpp#1730","I chose to implement the time jump callbacks in Python because it's easier and reuses code

Just as a question: what is the alternative? To implement it on the C++ side?

Yeah, the alternative would be to implement it in C++ by calling rcl_clock_add_jump_callback() directly. The advantage is the internal rclpy::Event::wait_until_ros() API would encapsulate all the ROS time stuff; the disadvantage is Python is easier to write. Since it's an internal API I went with the easier option.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,858,2021-12-09T01:30:07Z,2021-12-15T21:00:44Z,2021-12-15T21:00:49Z,MERGED,True,409,0,6,https://github.com/sloretz,Add Clock.sleep_until,19,[],https://github.com/ros2/rclpy/pull/858,https://github.com/clalancette,8,https://github.com/ros2/rclpy/pull/858#issuecomment-994089629,"Fixes #617
This works, and adds a method Clock.sleep_until() to sleep until a particular time on a clock is reached, respecting ROS time.
I chose to implement the time jump callbacks in Python because it's easier and reuses code, but it does mean the internal API Event::wait_until_ros() requires the caller to setup the required time jump callback or it will wait forever. Since this is an internal API, I think it's fine to document it and leave it as is. I couldn't think of a cleaner solution and user's won't be affected one way or the other.
Related to ros2/rclcpp#1730","Yeah, the alternative would be to implement it in C++ by calling rcl_clock_add_jump_callback() directly. The advantage is the internal rclpy::Event::wait_until_ros() API would encapsulate all the ROS time stuff; the disadvantage is Python is easier to write. Since it's an internal API I went with the easier option.

Sounds reasonable to me.  I think the solution you've chosen is fine.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,858,2021-12-09T01:30:07Z,2021-12-15T21:00:44Z,2021-12-15T21:00:49Z,MERGED,True,409,0,6,https://github.com/sloretz,Add Clock.sleep_until,19,[],https://github.com/ros2/rclpy/pull/858,https://github.com/clalancette,9,https://github.com/ros2/rclpy/pull/858#issuecomment-994841338,"Fixes #617
This works, and adds a method Clock.sleep_until() to sleep until a particular time on a clock is reached, respecting ROS time.
I chose to implement the time jump callbacks in Python because it's easier and reuses code, but it does mean the internal API Event::wait_until_ros() requires the caller to setup the required time jump callback or it will wait forever. Since this is an internal API, I think it's fine to document it and leave it as is. I couldn't think of a cleaner solution and user's won't be affected one way or the other.
Related to ros2/rclcpp#1730",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,858,2021-12-09T01:30:07Z,2021-12-15T21:00:44Z,2021-12-15T21:00:49Z,MERGED,True,409,0,6,https://github.com/sloretz,Add Clock.sleep_until,19,[],https://github.com/ros2/rclpy/pull/858,https://github.com/sloretz,10,https://github.com/ros2/rclpy/pull/858#issuecomment-995095166,"Fixes #617
This works, and adds a method Clock.sleep_until() to sleep until a particular time on a clock is reached, respecting ROS time.
I chose to implement the time jump callbacks in Python because it's easier and reuses code, but it does mean the internal API Event::wait_until_ros() requires the caller to setup the required time jump callback or it will wait forever. Since this is an internal API, I think it's fine to document it and leave it as is. I couldn't think of a cleaner solution and user's won't be affected one way or the other.
Related to ros2/rclcpp#1730","CI (build: --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,859,2021-12-09T18:32:15Z,2021-12-10T00:04:50Z,2021-12-10T00:04:52Z,MERGED,True,58,1,3,https://github.com/sloretz,Make context.on_shutdown allow free functions as shutdown callbacks,1,[],https://github.com/ros2/rclpy/pull/859,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/859,"Split from #858
WeakMethod throws an exception if the callable is not a bound method, which prevented using free functions as a shutdown callback. This allows free functions by storing them with weakref.ref.
Example exception before this PR
9: >           raise TypeError(""argument should be a bound method, not {}""
9:                             .format(type(meth))) from None
9: E           TypeError: argument should be a bound method, not <class 'function'>","Split from #858
WeakMethod throws an exception if the callable is not a bound method, which prevented using free functions as a shutdown callback. This allows free functions by storing them with weakref.ref.
Example exception before this PR
9: >           raise TypeError(""argument should be a bound method, not {}""
9:                             .format(type(meth))) from None
9: E           TypeError: argument should be a bound method, not <class 'function'>",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,859,2021-12-09T18:32:15Z,2021-12-10T00:04:50Z,2021-12-10T00:04:52Z,MERGED,True,58,1,3,https://github.com/sloretz,Make context.on_shutdown allow free functions as shutdown callbacks,1,[],https://github.com/ros2/rclpy/pull/859,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/859#issuecomment-990178348,"Split from #858
WeakMethod throws an exception if the callable is not a bound method, which prevented using free functions as a shutdown callback. This allows free functions by storing them with weakref.ref.
Example exception before this PR
9: >           raise TypeError(""argument should be a bound method, not {}""
9:                             .format(type(meth))) from None
9: E           TypeError: argument should be a bound method, not <class 'function'>","CI (build:  --packages-above-and-dependencies rclpy test: --packages-above rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,860,2021-12-09T19:42:25Z,2021-12-10T00:05:03Z,2021-12-10T00:05:05Z,MERGED,True,9,8,2,https://github.com/sloretz,Fix time.py and clock.py circular import,1,[],https://github.com/ros2/rclpy/pull/860,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/860,"Split from #858
This fixes a circular import between time.py and clock.py. Both need the ClockType type, which comes from _rclpy_pybind11, but time.py was importing it from clock.py. That forced clock.py to import Time inside functions that used it.
I also added type annotations where I touched code.","Split from #858
This fixes a circular import between time.py and clock.py. Both need the ClockType type, which comes from _rclpy_pybind11, but time.py was importing it from clock.py. That forced clock.py to import Time inside functions that used it.
I also added type annotations where I touched code.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,860,2021-12-09T19:42:25Z,2021-12-10T00:05:03Z,2021-12-10T00:05:05Z,MERGED,True,9,8,2,https://github.com/sloretz,Fix time.py and clock.py circular import,1,[],https://github.com/ros2/rclpy/pull/860,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/860#issuecomment-990300132,"Split from #858
This fixes a circular import between time.py and clock.py. Both need the ClockType type, which comes from _rclpy_pybind11, but time.py was importing it from clock.py. That forced clock.py to import Time inside functions that used it.
I also added type annotations where I touched code.","CI (build:  --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,861,2021-12-09T20:11:12Z,2021-12-10T01:25:47Z,2021-12-10T01:25:51Z,MERGED,True,43,1,2,https://github.com/sloretz,Improve JumpThreshold documentation and forbid zero durations,2,[],https://github.com/ros2/rclpy/pull/861,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/861,"Split from #858
This documents JumpThreshold, and forbids passing zero Durations.
JumpThreshold min_forward and min_backward are disabled in rclpy when None is passed. In rcl the thresholds are disabled when set to 0. I chose to make JumpThreshold forbid zero Durations so that there's only one way to disable them. Otherwise, it's easy to pass a zero duration and think it's requesting the smallest possible time jump.","Split from #858
This documents JumpThreshold, and forbids passing zero Durations.
JumpThreshold min_forward and min_backward are disabled in rclpy when None is passed. In rcl the thresholds are disabled when set to 0. I chose to make JumpThreshold forbid zero Durations so that there's only one way to disable them. Otherwise, it's easy to pass a zero duration and think it's requesting the smallest possible time jump.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,861,2021-12-09T20:11:12Z,2021-12-10T01:25:47Z,2021-12-10T01:25:51Z,MERGED,True,43,1,2,https://github.com/sloretz,Improve JumpThreshold documentation and forbid zero durations,2,[],https://github.com/ros2/rclpy/pull/861,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/861#issuecomment-990428106,"Split from #858
This documents JumpThreshold, and forbids passing zero Durations.
JumpThreshold min_forward and min_backward are disabled in rclpy when None is passed. In rcl the thresholds are disabled when set to 0. I chose to make JumpThreshold forbid zero Durations so that there's only one way to disable them. Otherwise, it's easy to pass a zero duration and think it's requesting the smallest possible time jump.","CI (build: --packages-up-to rclpy test:  --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,861,2021-12-09T20:11:12Z,2021-12-10T01:25:47Z,2021-12-10T01:25:51Z,MERGED,True,43,1,2,https://github.com/sloretz,Improve JumpThreshold documentation and forbid zero durations,2,[],https://github.com/ros2/rclpy/pull/861,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/861#issuecomment-990448611,"Split from #858
This documents JumpThreshold, and forbids passing zero Durations.
JumpThreshold min_forward and min_backward are disabled in rclpy when None is passed. In rcl the thresholds are disabled when set to 0. I chose to make JumpThreshold forbid zero Durations so that there's only one way to disable them. Otherwise, it's easy to pass a zero duration and think it's requesting the smallest possible time jump.","Rerun of CI with linter fix

Linux 
Linux-aarch64 
macOS 

CI infrastructure issue, rerun: 


Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,861,2021-12-09T20:11:12Z,2021-12-10T01:25:47Z,2021-12-10T01:25:51Z,MERGED,True,43,1,2,https://github.com/sloretz,Improve JumpThreshold documentation and forbid zero durations,2,[],https://github.com/ros2/rclpy/pull/861,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/861#issuecomment-990493720,"Split from #858
This documents JumpThreshold, and forbids passing zero Durations.
JumpThreshold min_forward and min_backward are disabled in rclpy when None is passed. In rcl the thresholds are disabled when set to 0. I chose to make JumpThreshold forbid zero Durations so that there's only one way to disable them. Otherwise, it's easy to pass a zero duration and think it's requesting the smallest possible time jump.","Since the commit a04bee4 is only adding a newline in a docstring to satisfy the linter, I'll assume @j-rivero 's approval still applies.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,862,2021-12-10T01:23:47Z,2021-12-10T17:16:12Z,2021-12-10T17:16:14Z,MERGED,True,24,0,2,https://github.com/sloretz,Add __enter__ and __exit__ to JumpHandle,1,[],https://github.com/ros2/rclpy/pull/862,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/862,"Split from #858
This allows JumpHandle to be used with Python's with keyword, guaranteeing the time jump callback is unregestered even if an exception is thrown.","Split from #858
This allows JumpHandle to be used with Python's with keyword, guaranteeing the time jump callback is unregestered even if an exception is thrown.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,862,2021-12-10T01:23:47Z,2021-12-10T17:16:12Z,2021-12-10T17:16:14Z,MERGED,True,24,0,2,https://github.com/sloretz,Add __enter__ and __exit__ to JumpHandle,1,[],https://github.com/ros2/rclpy/pull/862,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/862#issuecomment-991087327,"Split from #858
This allows JumpHandle to be used with Python's with keyword, guaranteeing the time jump callback is unregestered even if an exception is thrown.","CI (build:  --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,863,2021-12-10T13:48:14Z,2021-12-10T16:31:05Z,2021-12-10T16:31:09Z,MERGED,True,0,2,1,https://github.com/ivanpauno,Don't override `rclpy._rclpy_pybind11` docs,1,['bug'],https://github.com/ros2/rclpy/pull/863,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/863,"There's no rclpy._rclpy_logging_pybind11 module, the deleted line was just overriding the original docs.","There's no rclpy._rclpy_logging_pybind11 module, the deleted line was just overriding the original docs.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,864,2021-12-13T22:55:50Z,2021-12-17T23:03:27Z,2021-12-17T23:03:29Z,MERGED,True,142,0,2,https://github.com/sloretz,Add Clock.sleep_for using sleep_until,4,['enhancement'],https://github.com/ros2/rclpy/pull/864,https://github.com/sloretz,1,https://github.com/ros2/rclpy/pull/864,"Resolves #617
Requires #858","Resolves #617
Requires #858",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,864,2021-12-13T22:55:50Z,2021-12-17T23:03:27Z,2021-12-17T23:03:29Z,MERGED,True,142,0,2,https://github.com/sloretz,Add Clock.sleep_for using sleep_until,4,['enhancement'],https://github.com/ros2/rclpy/pull/864,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/864#issuecomment-995252944,"Resolves #617
Requires #858",Rebased and incorporated feedback in tests from #858 that also apply here,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,864,2021-12-13T22:55:50Z,2021-12-17T23:03:27Z,2021-12-17T23:03:29Z,MERGED,True,142,0,2,https://github.com/sloretz,Add Clock.sleep_for using sleep_until,4,['enhancement'],https://github.com/ros2/rclpy/pull/864,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/864#issuecomment-995255430,"Resolves #617
Requires #858","CI (build:  --packages-up-to rclpy test: --packages-select rclpy)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,864,2021-12-13T22:55:50Z,2021-12-17T23:03:27Z,2021-12-17T23:03:29Z,MERGED,True,142,0,2,https://github.com/sloretz,Add Clock.sleep_for using sleep_until,4,['enhancement'],https://github.com/ros2/rclpy/pull/864,https://github.com/sloretz,4,https://github.com/ros2/rclpy/pull/864#issuecomment-996899945,"Resolves #617
Requires #858","There is value in the comments about how to make the test more robust and I would like not to lose them after merging. Not sure if adding the URLs as comments in the code or opening an issue would help in the future to reach these comments if the test goes flaky at some point. I leave up to you @sloretz.

They're valid comments about the test being potentially flaky. I think the right thing to do is to watch the repeated jobs for failures, especially Windows where IIUC the OS scheduler waits a while between context switches. I looked through the last 3 repeated jobs and I don't see any sleep_until failures, so it's looking good that these won't be flaky either. I linked the very latest if you'd like to click back through them too.

Linux x86: https://ci.ros2.org/view/nightly/job/nightly_linux_repeated/2505/#showFailuresLink
Linux ARM: https://ci.ros2.org/view/nightly/job/nightly_linux-aarch64_repeated/1811/#showFailuresLink
OSX: https://ci.ros2.org/view/nightly/job/nightly_osx_repeated/2574/#showFailuresLink
Windows: https://ci.ros2.org/view/nightly/job/nightly_win_rep/2464/#showFailuresLink

If they become flaky in the future, links to the discussion are always available by doing git blame, looking at the PR number in the title of the commit (github adds it during Squash and merge), and then opening it. An issue doesn't seem to be necessary because the tests aren't showing flaky behavior on CI. I think this is fine as is.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,864,2021-12-13T22:55:50Z,2021-12-17T23:03:27Z,2021-12-17T23:03:29Z,MERGED,True,142,0,2,https://github.com/sloretz,Add Clock.sleep_for using sleep_until,4,['enhancement'],https://github.com/ros2/rclpy/pull/864,https://github.com/sloretz,5,https://github.com/ros2/rclpy/pull/864#issuecomment-997080438,"Resolves #617
Requires #858",Resolved PR comments with Jose out-of-band,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,865,2021-12-15T22:18:35Z,2021-12-23T16:47:20Z,2021-12-23T16:47:22Z,MERGED,True,1291,46,13,https://github.com/ivanpauno,Implement managed nodes,34,['enhancement'],https://github.com/ros2/rclpy/pull/865,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/865,"Fixes #604.
I took into account the feedback provided here ros2/rclcpp#1846, so you don't need to manually call on_activate/on_deactivate for managed entities like LifecyclePublisher.
I'm open to revert that bit, though I think it's a good idea.
I have only manually tested that the lifecycle node services work correctly.
I have not tested the lifecycle publisher at all.
This PR has tests now.
I could write some automated tests for the lifecycle builtin services though.
Done as well.
This is not ready to be merged, though early feedback is appreciated anyway.
This is ready now.
I'm working to add a demo equivalent to demos/lifecycle, but that shouldn't block this from being reviewed.
PR with demo ready: ros2/demos#547.","Fixes #604.
I took into account the feedback provided here ros2/rclcpp#1846, so you don't need to manually call on_activate/on_deactivate for managed entities like LifecyclePublisher.
I'm open to revert that bit, though I think it's a good idea.
I have only manually tested that the lifecycle node services work correctly.
I have not tested the lifecycle publisher at all.
This PR has tests now.
I could write some automated tests for the lifecycle builtin services though.
Done as well.
This is not ready to be merged, though early feedback is appreciated anyway.
This is ready now.
I'm working to add a demo equivalent to demos/lifecycle, but that shouldn't block this from being reviewed.
PR with demo ready: ros2/demos#547.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,865,2021-12-15T22:18:35Z,2021-12-23T16:47:20Z,2021-12-23T16:47:22Z,MERGED,True,1291,46,13,https://github.com/ivanpauno,Implement managed nodes,34,['enhancement'],https://github.com/ros2/rclpy/pull/865,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/865#issuecomment-1000329266,"Fixes #604.
I took into account the feedback provided here ros2/rclcpp#1846, so you don't need to manually call on_activate/on_deactivate for managed entities like LifecyclePublisher.
I'm open to revert that bit, though I think it's a good idea.
I have only manually tested that the lifecycle node services work correctly.
I have not tested the lifecycle publisher at all.
This PR has tests now.
I could write some automated tests for the lifecycle builtin services though.
Done as well.
This is not ready to be merged, though early feedback is appreciated anyway.
This is ready now.
I'm working to add a demo equivalent to demos/lifecycle, but that shouldn't block this from being reviewed.
PR with demo ready: ros2/demos#547.","CI:

Linux 
Linux-aarch64 
macOS  (unrelated failure)
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,865,2021-12-15T22:18:35Z,2021-12-23T16:47:20Z,2021-12-23T16:47:22Z,MERGED,True,1291,46,13,https://github.com/ivanpauno,Implement managed nodes,34,['enhancement'],https://github.com/ros2/rclpy/pull/865,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/865#issuecomment-1000335999,"Fixes #604.
I took into account the feedback provided here ros2/rclcpp#1846, so you don't need to manually call on_activate/on_deactivate for managed entities like LifecyclePublisher.
I'm open to revert that bit, though I think it's a good idea.
I have only manually tested that the lifecycle node services work correctly.
I have not tested the lifecycle publisher at all.
This PR has tests now.
I could write some automated tests for the lifecycle builtin services though.
Done as well.
This is not ready to be merged, though early feedback is appreciated anyway.
This is ready now.
I'm working to add a demo equivalent to demos/lifecycle, but that shouldn't block this from being reviewed.
PR with demo ready: ros2/demos#547.","Looks good to me with green CI.

I will request more feedback about the API, particularly considering it doesn't match exactly the rclcpp one (following the suggestion in ros2/rclcpp#1846).
I won't block this PR on that though, we still have time to make API changes until the Humble release.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,865,2021-12-15T22:18:35Z,2021-12-23T16:47:20Z,2021-12-23T16:47:22Z,MERGED,True,1291,46,13,https://github.com/ivanpauno,Implement managed nodes,34,['enhancement'],https://github.com/ros2/rclpy/pull/865,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/865#issuecomment-1000415813,"Fixes #604.
I took into account the feedback provided here ros2/rclcpp#1846, so you don't need to manually call on_activate/on_deactivate for managed entities like LifecyclePublisher.
I'm open to revert that bit, though I think it's a good idea.
I have only manually tested that the lifecycle node services work correctly.
I have not tested the lifecycle publisher at all.
This PR has tests now.
I could write some automated tests for the lifecycle builtin services though.
Done as well.
This is not ready to be merged, though early feedback is appreciated anyway.
This is ready now.
I'm working to add a demo equivalent to demos/lifecycle, but that shouldn't block this from being reviewed.
PR with demo ready: ros2/demos#547.","Going in, thanks for the review @audrow !!",True,"{'HOORAY': ['https://github.com/Yadunund', 'https://github.com/Doom4535']}"
ros2/rclpy,https://github.com/ros2/rclpy,866,2021-12-16T01:40:49Z,2021-12-16T01:47:28Z,2021-12-16T01:47:33Z,CLOSED,False,0,0,0,https://github.com/apps/mergify,added wake executor to Node.create_subscription to fix issue 628 (backport #647),1,['conflicts'],https://github.com/ros2/rclpy/pull/866,https://github.com/apps/mergify,1,https://github.com/ros2/rclpy/pull/866,"This is an automatic backport of pull request #647 done by Mergify.
Cherry-pick of 1b4e188 has failed:
On branch mergify/bp/galactic/pr-647
Your branch is up to date with 'origin/galactic'.

You are currently cherry-picking commit 1b4e188.
  (all conflicts fixed: run ""git cherry-pick --continue"")
  (use ""git cherry-pick --skip"" to skip this patch)
  (use ""git cherry-pick --abort"" to cancel the cherry-pick operation)

nothing to commit, working tree clean

To fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","This is an automatic backport of pull request #647 done by Mergify.
Cherry-pick of 1b4e188 has failed:
On branch mergify/bp/galactic/pr-647
Your branch is up to date with 'origin/galactic'.

You are currently cherry-picking commit 1b4e188.
  (all conflicts fixed: run ""git cherry-pick --continue"")
  (use ""git cherry-pick --skip"" to skip this patch)
  (use ""git cherry-pick --abort"" to cancel the cherry-pick operation)

nothing to commit, working tree clean

To fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,866,2021-12-16T01:40:49Z,2021-12-16T01:47:28Z,2021-12-16T01:47:33Z,CLOSED,False,0,0,0,https://github.com/apps/mergify,added wake executor to Node.create_subscription to fix issue 628 (backport #647),1,['conflicts'],https://github.com/ros2/rclpy/pull/866,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/866#issuecomment-995365072,"This is an automatic backport of pull request #647 done by Mergify.
Cherry-pick of 1b4e188 has failed:
On branch mergify/bp/galactic/pr-647
Your branch is up to date with 'origin/galactic'.

You are currently cherry-picking commit 1b4e188.
  (all conflicts fixed: run ""git cherry-pick --continue"")
  (use ""git cherry-pick --skip"" to skip this patch)
  (use ""git cherry-pick --abort"" to cancel the cherry-pick operation)

nothing to commit, working tree clean

To fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","Ah, already exists in ROS Galactic. Closing.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,868,2021-12-22T15:44:58Z,2021-12-22T21:02:55Z,2021-12-22T21:02:57Z,MERGED,True,20,7,3,https://github.com/ivanpauno,Make rclpy.try_shutdown() behavior to follow rclpy.shutdown() more closely,3,['enhancement'],https://github.com/ros2/rclpy/pull/868,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/868,"Needed by ros2/ros2cli#683.
I'm not sure if this is the ideal approach, maybe init()/shutdown() are doing too much (?).
I'm open to alternatives.","Needed by ros2/ros2cli#683.
I'm not sure if this is the ideal approach, maybe init()/shutdown() are doing too much (?).
I'm open to alternatives.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,868,2021-12-22T15:44:58Z,2021-12-22T21:02:55Z,2021-12-22T21:02:57Z,MERGED,True,20,7,3,https://github.com/ivanpauno,Make rclpy.try_shutdown() behavior to follow rclpy.shutdown() more closely,3,['enhancement'],https://github.com/ros2/rclpy/pull/868,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/868#issuecomment-999797594,"Needed by ros2/ros2cli#683.
I'm not sure if this is the ideal approach, maybe init()/shutdown() are doing too much (?).
I'm open to alternatives.","I had one extra issue related to #868 (comment) after doing some further testing.
The reset_executor() closure I was passing to on_shutdown() doesn't have any owner.
As Context only retains weak ownership of the callbacks being passed, it was sometimes not being called.
d65b487 fixes that.
After that change, Context retains week ownership of methods and shared ownership of free functions or closures.
I think that's intuitive.
I could also see the case of always retaining shared ownership and the user explictily passing a weak object when they need that, but that would be an unexpected change (particularly for methods).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,868,2021-12-22T15:44:58Z,2021-12-22T21:02:55Z,2021-12-22T21:02:57Z,MERGED,True,20,7,3,https://github.com/ivanpauno,Make rclpy.try_shutdown() behavior to follow rclpy.shutdown() more closely,3,['enhancement'],https://github.com/ros2/rclpy/pull/868,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/868#issuecomment-999813942,"Needed by ros2/ros2cli#683.
I'm not sure if this is the ideal approach, maybe init()/shutdown() are doing too much (?).
I'm open to alternatives.","CI for this PR alone (I will rerun PR for ros2/ros2cli#683 after merging this one):

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,869,2021-12-27T23:28:43Z,2022-01-04T17:19:40Z,2022-01-04T17:19:41Z,MERGED,True,2,4,1,https://github.com/fujitatomoya,QoS history depth is only available with KEEP_LAST.,1,[],https://github.com/ros2/rclpy/pull/869,https://github.com/fujitatomoya,1,https://github.com/ros2/rclpy/pull/869,"follow-up for #849 (see comment #849 (comment))
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","follow-up for #849 (see comment #849 (comment))
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,869,2021-12-27T23:28:43Z,2022-01-04T17:19:40Z,2022-01-04T17:19:41Z,MERGED,True,2,4,1,https://github.com/fujitatomoya,QoS history depth is only available with KEEP_LAST.,1,[],https://github.com/ros2/rclpy/pull/869,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/869#issuecomment-1001798776,"follow-up for #849 (see comment #849 (comment))
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com",@ivanpauno requesting review on this.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,869,2021-12-27T23:28:43Z,2022-01-04T17:19:40Z,2022-01-04T17:19:41Z,MERGED,True,2,4,1,https://github.com/fujitatomoya,QoS history depth is only available with KEEP_LAST.,1,[],https://github.com/ros2/rclpy/pull/869,https://github.com/fujitatomoya,3,https://github.com/ros2/rclpy/pull/869#issuecomment-1001799346,"follow-up for #849 (see comment #849 (comment))
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,869,2021-12-27T23:28:43Z,2022-01-04T17:19:40Z,2022-01-04T17:19:41Z,MERGED,True,2,4,1,https://github.com/fujitatomoya,QoS history depth is only available with KEEP_LAST.,1,[],https://github.com/ros2/rclpy/pull/869,https://github.com/fujitatomoya,4,https://github.com/ros2/rclpy/pull/869#issuecomment-1003465420,"follow-up for #849 (see comment #849 (comment))
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","CI(repo URL is fixed)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,871,2022-01-04T21:10:37Z,2022-01-14T03:59:51Z,2022-01-14T03:59:51Z,MERGED,True,36,24,2,https://github.com/augustelalande,Fix multi-threaded race condition in client.call_async,5,[],https://github.com/ros2/rclpy/pull/871,https://github.com/augustelalande,1,https://github.com/ros2/rclpy/pull/871,Proposal to fix multi-threaded race condition in client.call_async as described in #870,Proposal to fix multi-threaded race condition in client.call_async as described in #870,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,871,2022-01-04T21:10:37Z,2022-01-14T03:59:51Z,2022-01-14T03:59:51Z,MERGED,True,36,24,2,https://github.com/augustelalande,Fix multi-threaded race condition in client.call_async,5,[],https://github.com/ros2/rclpy/pull/871,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/871#issuecomment-1009491745,Proposal to fix multi-threaded race condition in client.call_async as described in #870,@ivanpauno @jacobperron could you take a look at this when you have time?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,871,2022-01-04T21:10:37Z,2022-01-14T03:59:51Z,2022-01-14T03:59:51Z,MERGED,True,36,24,2,https://github.com/augustelalande,Fix multi-threaded race condition in client.call_async,5,[],https://github.com/ros2/rclpy/pull/871,https://github.com/fujitatomoya,3,https://github.com/ros2/rclpy/pull/871#issuecomment-1009495094,Proposal to fix multi-threaded race condition in client.call_async as described in #870,"CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,871,2022-01-04T21:10:37Z,2022-01-14T03:59:51Z,2022-01-14T03:59:51Z,MERGED,True,36,24,2,https://github.com/augustelalande,Fix multi-threaded race condition in client.call_async,5,[],https://github.com/ros2/rclpy/pull/871,https://github.com/jacobperron,4,https://github.com/ros2/rclpy/pull/871#issuecomment-1010322339,Proposal to fix multi-threaded race condition in client.call_async as described in #870,"Tricky..
I suppose there are similar threading issues with the action client, wherever we are making service requests, for instance

  
    
      rclpy/rclpy/rclpy/action/client.py
    
    
         Line 435
      in
      289d7d3
    
  
  
    

        
          
           self._pending_goal_requests[sequence_number] = future 
        
    
  


has a race with

  
    
      rclpy/rclpy/rclpy/executors.py
    
    
         Line 383
      in
      7a906af
    
  
  
    

        
          
           for future in waitable._futures: 
        
    
  


It's possible the executor tries to process a request before the future is available in the list.
It's too bad we have to introduce a lock at the scope of sending the request, but I can't think of another way. Hopefully it won't have a significant impact to performance.
@sloretz Thoughts?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,871,2022-01-04T21:10:37Z,2022-01-14T03:59:51Z,2022-01-14T03:59:51Z,MERGED,True,36,24,2,https://github.com/augustelalande,Fix multi-threaded race condition in client.call_async,5,[],https://github.com/ros2/rclpy/pull/871,https://github.com/augustelalande,5,https://github.com/ros2/rclpy/pull/871#issuecomment-1011328155,Proposal to fix multi-threaded race condition in client.call_async as described in #870,"Tricky..
I suppose there are similar threading issues with the action client, wherever we are making service requests, for instance

  
    
      rclpy/rclpy/rclpy/action/client.py
    
    
         Line 435
      in
      289d7d3
    
  
  
    

        
          
           self._pending_goal_requests[sequence_number] = future 
        
    
  


has a race with

  
    
      rclpy/rclpy/rclpy/executors.py
    
    
         Line 383
      in
      7a906af
    
  
  
    

        
          
           for future in waitable._futures: 
        
    
  


It's possible the executor tries to process a request before the future is available in the list.
It's too bad we have to introduce a lock at the scope of sending the request, but I can't think of another way. Hopefully it won't have a significant impact to performance.
@sloretz Thoughts?

Yes this race condition definitely exists in the ActionClient. Actually, even #564 still exists there. The question is why is the Client functionality being reimplemented in ActionClient? Why not reuse the existing Client functionality by creating sub-clients to handle goal requests, cancel requests etc.?
I guess this should be a new issue.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,871,2022-01-04T21:10:37Z,2022-01-14T03:59:51Z,2022-01-14T03:59:51Z,MERGED,True,36,24,2,https://github.com/augustelalande,Fix multi-threaded race condition in client.call_async,5,[],https://github.com/ros2/rclpy/pull/871,https://github.com/ivanpauno,6,https://github.com/ros2/rclpy/pull/871#issuecomment-1011371395,Proposal to fix multi-threaded race condition in client.call_async as described in #870,"Yes this race condition definitely exists in the ActionClient. Actually, even #564 still exists there. The question is why is the Client functionality being reimplemented in ActionClient? Why not reuse the existing Client functionality by creating sub-clients to handle goal requests, cancel requests etc.?

👍, I'm not sure how easy is to do that but I think it would be good to reuse the existing client code.

I guess this should be a new issue.

Yes, I don't think we need to address that here.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,871,2022-01-04T21:10:37Z,2022-01-14T03:59:51Z,2022-01-14T03:59:51Z,MERGED,True,36,24,2,https://github.com/augustelalande,Fix multi-threaded race condition in client.call_async,5,[],https://github.com/ros2/rclpy/pull/871,https://github.com/fujitatomoya,7,https://github.com/ros2/rclpy/pull/871#issuecomment-1011505035,Proposal to fix multi-threaded race condition in client.call_async as described in #870,"CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,871,2022-01-04T21:10:37Z,2022-01-14T03:59:51Z,2022-01-14T03:59:51Z,MERGED,True,36,24,2,https://github.com/augustelalande,Fix multi-threaded race condition in client.call_async,5,[],https://github.com/ros2/rclpy/pull/871,https://github.com/jacobperron,8,https://github.com/ros2/rclpy/pull/871#issuecomment-1011526467,Proposal to fix multi-threaded race condition in client.call_async as described in #870,I think the Action Client doesn't share the same logic as the Client because it is using the rcl_action C-API under the hood. Perhaps it's possible to refactor the code in rclpy such that they share the same high-level logic; I don't recall if this was considered when actions were implemented.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,871,2022-01-04T21:10:37Z,2022-01-14T03:59:51Z,2022-01-14T03:59:51Z,MERGED,True,36,24,2,https://github.com/augustelalande,Fix multi-threaded race condition in client.call_async,5,[],https://github.com/ros2/rclpy/pull/871,https://github.com/jacobperron,9,https://github.com/ros2/rclpy/pull/871#issuecomment-1012515116,Proposal to fix multi-threaded race condition in client.call_async as described in #870,"Testing rclpy and packages above:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,871,2022-01-04T21:10:37Z,2022-01-14T03:59:51Z,2022-01-14T03:59:51Z,MERGED,True,36,24,2,https://github.com/augustelalande,Fix multi-threaded race condition in client.call_async,5,[],https://github.com/ros2/rclpy/pull/871,https://github.com/jacobperron,10,https://github.com/ros2/rclpy/pull/871#issuecomment-1012550310,Proposal to fix multi-threaded race condition in client.call_async as described in #870,"I've rebased on master to get  recent changes related to pybind11, hopefully this resolves CI failures:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,873,2022-01-06T07:37:09Z,,2022-02-04T14:42:46Z,OPEN,False,4,3,1,https://github.com/MuhongGuo,Add optional timeout to client.call(),1,['backlog'],https://github.com/ros2/rclpy/pull/873,https://github.com/MuhongGuo,1,https://github.com/ros2/rclpy/pull/873,Adding a small feature to support timeout setting for rclpy.Client.call(). Hope it would be also useful for other users :),Adding a small feature to support timeout setting for rclpy.Client.call(). Hope it would be also useful for other users :),True,{}
ros2/rclpy,https://github.com/ros2/rclpy,873,2022-01-06T07:37:09Z,,2022-02-04T14:42:46Z,OPEN,False,4,3,1,https://github.com/MuhongGuo,Add optional timeout to client.call(),1,['backlog'],https://github.com/ros2/rclpy/pull/873,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/873#issuecomment-1007612901,Adding a small feature to support timeout setting for rclpy.Client.call(). Hope it would be also useful for other users :),"although this makes sense to me, i would reconsider this synchronous method is really needed. probably we can just delete and supports only async method? so that application can avoid possible deadlock and can have all management in the application? (rclcpp does not have sync method for service client though.)

Yeah, preferably we would deprecate and remove call from rclpy; it is dangerous to use unless you are absolutely, positively sure that it won't be called from within a single threaded executor.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,873,2022-01-06T07:37:09Z,,2022-02-04T14:42:46Z,OPEN,False,4,3,1,https://github.com/MuhongGuo,Add optional timeout to client.call(),1,['backlog'],https://github.com/ros2/rclpy/pull/873,https://github.com/MuhongGuo,3,https://github.com/ros2/rclpy/pull/873#issuecomment-1007989388,Adding a small feature to support timeout setting for rclpy.Client.call(). Hope it would be also useful for other users :),"although this makes sense to me, i would reconsider this synchronous method is really needed. probably we can just delete and supports only async method? so that application can avoid possible deadlock and can have all management in the application? (rclcpp does not have sync method for service client though.)

Yeah, preferably we would deprecate and remove call from rclpy; it is dangerous to use unless you are absolutely, positively sure that it won't be called from within a single threaded executor.

@fujitatomoya @clalancette I believe most of the users are actually calling the services in a sync manner, blocking until the future is done. They will love the client.call() function due to less coding lines if we can extend it's use scope. Why don't we consider to resolve the deadlock issue instead?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,873,2022-01-06T07:37:09Z,,2022-02-04T14:42:46Z,OPEN,False,4,3,1,https://github.com/MuhongGuo,Add optional timeout to client.call(),1,['backlog'],https://github.com/ros2/rclpy/pull/873,https://github.com/fujitatomoya,4,https://github.com/ros2/rclpy/pull/873#issuecomment-1008082009,Adding a small feature to support timeout setting for rclpy.Client.call(). Hope it would be also useful for other users :),"I believe most of the users are actually calling the services in a sync manner

i do not have any data that shows how many user application use sync manner...it just depends on use case and application.
just saying that async can support sync in user application, and the application can be more flexible.

Why don't we consider to resolve the deadlock issue instead?

sounds good to me, although i do not have concrete idea to fix it right away...
anyway, i think having timeout with current sync API makes sense for now.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,873,2022-01-06T07:37:09Z,,2022-02-04T14:42:46Z,OPEN,False,4,3,1,https://github.com/MuhongGuo,Add optional timeout to client.call(),1,['backlog'],https://github.com/ros2/rclpy/pull/873,https://github.com/clalancette,5,https://github.com/ros2/rclpy/pull/873#issuecomment-1010403459,Adding a small feature to support timeout setting for rclpy.Client.call(). Hope it would be also useful for other users :),"@fujitatomoya @clalancette I believe most of the users are actually calling the services in a sync manner, blocking until the future is done.

Unfortunately, in the default case (using a single threaded executor and the default callback group) this causes a deadlock.  Even if you use separate callback groups and a multi-threaded executor, this is a bad idea; it is holding up the executor during the callback.  That means that any subsequent callbacks in the callback group will be held up until the callback completes.  In general, callbacks in ROS 2 should be as short as possible so as to minimize latency for all callbacks.

They will love the client.call() function due to less coding lines if we can extend it's use scope. Why don't we consider to resolve the deadlock issue instead?

The deadlock is called by the fact that subscription callbacks occur on a thread, but service calls need to use that very same executor to get the response.  Using the multi-threaded executor doesn't help either, because by default all callbacks are in the default callback group, and it is non-reentrant (which means only one of the members of the callback group can be running at a time).  Because of the design if this, we haven't found a way to make this work better (though if you have ideas, we are certainly willing to consider them).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,874,2022-01-06T14:14:41Z,2022-01-07T21:31:15Z,2022-01-07T21:31:17Z,MERGED,True,10,44,1,https://github.com/clalancette,Update to pybind11 2.7.1,3,[],https://github.com/ros2/rclpy/pull/874,https://github.com/clalancette,1,https://github.com/ros2/rclpy/pull/874,"We can remove most of the hacks we were carrying around, but we also need to add in one more overload of the Python executable so pybind11 properly detects things on Windows Debug.
Depends on ros2/pybind11_vendor#10 (CI is over in that PR)","We can remove most of the hacks we were carrying around, but we also need to add in one more overload of the Python executable so pybind11 properly detects things on Windows Debug.
Depends on ros2/pybind11_vendor#10 (CI is over in that PR)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,876,2022-01-07T18:22:32Z,2022-01-10T18:27:53Z,2022-03-24T03:13:42Z,MERGED,True,21,3,1,https://github.com/suurjaak,Bugfix/duration to msg precision,6,[],https://github.com/ros2/rclpy/pull/876,https://github.com/suurjaak,1,https://github.com/ros2/rclpy/pull/876,Fixes #875.,Fixes #875.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,876,2022-01-07T18:22:32Z,2022-01-10T18:27:53Z,2022-03-24T03:13:42Z,MERGED,True,21,3,1,https://github.com/suurjaak,Bugfix/duration to msg precision,6,[],https://github.com/ros2/rclpy/pull/876,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/876#issuecomment-1008853059,Fixes #875.,"CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,876,2022-01-07T18:22:32Z,2022-01-10T18:27:53Z,2022-03-24T03:13:42Z,MERGED,True,21,3,1,https://github.com/suurjaak,Bugfix/duration to msg precision,6,[],https://github.com/ros2/rclpy/pull/876,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/876#issuecomment-1008897508,Fixes #875.,"FYI, I rebased and force-pushed this onto the latest so that I can get CI to run.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,876,2022-01-07T18:22:32Z,2022-01-10T18:27:53Z,2022-03-24T03:13:42Z,MERGED,True,21,3,1,https://github.com/suurjaak,Bugfix/duration to msg precision,6,[],https://github.com/ros2/rclpy/pull/876,https://github.com/clalancette,4,https://github.com/ros2/rclpy/pull/876#issuecomment-1008898087,Fixes #875.,"CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,876,2022-01-07T18:22:32Z,2022-01-10T18:27:53Z,2022-03-24T03:13:42Z,MERGED,True,21,3,1,https://github.com/suurjaak,Bugfix/duration to msg precision,6,[],https://github.com/ros2/rclpy/pull/876,https://github.com/fujitatomoya,5,https://github.com/ros2/rclpy/pull/876#issuecomment-1077023777,Fixes #875.,@Mergifyio backport galactic,True,{'THUMBS_UP': ['https://github.com/mergify%5Bbot%5D']}
ros2/rclpy,https://github.com/ros2/rclpy,876,2022-01-07T18:22:32Z,2022-01-10T18:27:53Z,2022-03-24T03:13:42Z,MERGED,True,21,3,1,https://github.com/suurjaak,Bugfix/duration to msg precision,6,[],https://github.com/ros2/rclpy/pull/876,https://github.com/fujitatomoya,6,https://github.com/ros2/rclpy/pull/876#issuecomment-1077023865,Fixes #875.,@Mergifyio backport foxy,True,{'THUMBS_UP': ['https://github.com/mergify%5Bbot%5D']}
ros2/rclpy,https://github.com/ros2/rclpy,876,2022-01-07T18:22:32Z,2022-01-10T18:27:53Z,2022-03-24T03:13:42Z,MERGED,True,21,3,1,https://github.com/suurjaak,Bugfix/duration to msg precision,6,[],https://github.com/ros2/rclpy/pull/876,https://github.com/apps/mergify,7,https://github.com/ros2/rclpy/pull/876#issuecomment-1077024041,Fixes #875.,"backport galactic

✅ Backports have been created


#916 Bugfix/duration to msg precision (backport #876) has been created for branch galactic",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,876,2022-01-07T18:22:32Z,2022-01-10T18:27:53Z,2022-03-24T03:13:42Z,MERGED,True,21,3,1,https://github.com/suurjaak,Bugfix/duration to msg precision,6,[],https://github.com/ros2/rclpy/pull/876,https://github.com/apps/mergify,8,https://github.com/ros2/rclpy/pull/876#issuecomment-1077024093,Fixes #875.,"backport foxy

✅ Backports have been created


#917 Bugfix/duration to msg precision (backport #876) has been created for branch foxy",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,877,2022-01-07T23:21:54Z,2022-01-12T22:24:57Z,2022-01-12T22:24:59Z,MERGED,True,32,31,5,https://github.com/jacobperron,Fix include order for cpplint,1,[],https://github.com/ros2/rclpy/pull/877,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/877,Relates to ament/ament_lint#324,Relates to ament/ament_lint#324,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,880,2022-01-14T11:40:51Z,2022-02-10T13:48:10Z,2022-02-10T13:48:11Z,CLOSED,False,28,7,2,https://github.com/NikolasE,Check in declare_parameters if deduced type of given value fits to optionally declared type in ParameterDescriptor,1,[],https://github.com/ros2/rclpy/pull/880,https://github.com/NikolasE,1,https://github.com/ros2/rclpy/pull/880,"Solving #879

additional test to show new behaviour
fixed test case that had a value/type mismatch","Solving #879

additional test to show new behaviour
fixed test case that had a value/type mismatch",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,880,2022-01-14T11:40:51Z,2022-02-10T13:48:10Z,2022-02-10T13:48:11Z,CLOSED,False,28,7,2,https://github.com/NikolasE,Check in declare_parameters if deduced type of given value fits to optionally declared type in ParameterDescriptor,1,[],https://github.com/ros2/rclpy/pull/880,https://github.com/NikolasE,2,https://github.com/ros2/rclpy/pull/880#issuecomment-1020461878,"Solving #879

additional test to show new behaviour
fixed test case that had a value/type mismatch",PR for master: #887,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,880,2022-01-14T11:40:51Z,2022-02-10T13:48:10Z,2022-02-10T13:48:11Z,CLOSED,False,28,7,2,https://github.com/NikolasE,Check in declare_parameters if deduced type of given value fits to optionally declared type in ParameterDescriptor,1,[],https://github.com/ros2/rclpy/pull/880,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/880#issuecomment-1034942393,"Solving #879

additional test to show new behaviour
fixed test case that had a value/type mismatch","Closing this one in favor of #887.  Once that is in, we can do our normal backport process.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,883,2022-01-18T18:38:52Z,,2022-02-03T17:14:58Z,OPEN,False,13,12,1,https://github.com/augustelalande,Address deadlock issue in client.call,1,[],https://github.com/ros2/rclpy/pull/883,https://github.com/augustelalande,1,https://github.com/ros2/rclpy/pull/883,"Proposal to address the deadlock issue when calling client.call from within another callback.
I realise people may have different points of view on whether client.call should exist, and whether this proposal makes sense. But based on #873 (comment) ideas are welcome, so I thought I would at least propose it.","Proposal to address the deadlock issue when calling client.call from within another callback.
I realise people may have different points of view on whether client.call should exist, and whether this proposal makes sense. But based on #873 (comment) ideas are welcome, so I thought I would at least propose it.",True,{'EYES': ['https://github.com/fujitatomoya']}
ros2/rclpy,https://github.com/ros2/rclpy,884,2022-01-18T20:37:51Z,2022-01-25T00:24:54Z,2022-01-25T00:24:57Z,MERGED,True,1,1,1,https://github.com/jacobperron,Document that Future.result() may return None,1,['documentation'],https://github.com/ros2/rclpy/pull/884,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/884,"I noticed this can happen when a service client does not receive a response from a server and the client times out.
Loosely related to #367.","I noticed this can happen when a service client does not receive a response from a server and the client times out.
Loosely related to #367.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,885,2022-01-19T11:53:52Z,2022-01-19T13:05:02Z,2022-01-19T13:05:02Z,MERGED,True,2,2,1,https://github.com/augustelalande,Update documentation version number,1,[],https://github.com/ros2/rclpy/pull/885,https://github.com/augustelalande,1,https://github.com/ros2/rclpy/pull/885,"The docs version number has not been updated since it was created.
Maybe it would be a good idea to read the version directly from package.xml?","The docs version number has not been updated since it was created.
Maybe it would be a good idea to read the version directly from package.xml?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,887,2022-01-24T19:22:35Z,,2022-05-13T17:15:45Z,OPEN,False,41,7,2,https://github.com/NikolasE,Check in declare_parameters if deduced type of given value fits to op…,5,['more-information-needed'],https://github.com/ros2/rclpy/pull/887,https://github.com/NikolasE,1,https://github.com/ros2/rclpy/pull/887,"…tionally declared type in ParameterDescriptor
Signed-off-by: Nikolas Engelhard nikolas.engelhard@motius.de
PR for master from #880
Closes #879","…tionally declared type in ParameterDescriptor
Signed-off-by: Nikolas Engelhard nikolas.engelhard@motius.de
PR for master from #880
Closes #879",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,887,2022-01-24T19:22:35Z,,2022-05-13T17:15:45Z,OPEN,False,41,7,2,https://github.com/NikolasE,Check in declare_parameters if deduced type of given value fits to op…,5,['more-information-needed'],https://github.com/ros2/rclpy/pull/887,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/887#issuecomment-1020558740,"…tionally declared type in ParameterDescriptor
Signed-off-by: Nikolas Engelhard nikolas.engelhard@motius.de
PR for master from #880
Closes #879","@ivanpauno i think this makes sense to me, could you take a look to share your thought?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,887,2022-01-24T19:22:35Z,,2022-05-13T17:15:45Z,OPEN,False,41,7,2,https://github.com/NikolasE,Check in declare_parameters if deduced type of given value fits to op…,5,['more-information-needed'],https://github.com/ros2/rclpy/pull/887,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/887#issuecomment-1126120255,"…tionally declared type in ParameterDescriptor
Signed-off-by: Nikolas Engelhard nikolas.engelhard@motius.de
PR for master from #880
Closes #879","To summarize, ParameterDescriptor() name and type field were never meant to be set by the user, but rather internally updated by the node managing the parameters.
The rest of the fields are the ones that the user can set to configure the parameter descriptor.
I know this is a bit confusing, but changing it will just break everything.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,890,2022-01-28T19:41:58Z,2022-01-31T03:14:07Z,2022-01-31T03:14:08Z,MERGED,True,1,1,1,https://github.com/CourchesneA,fix typo,1,[],https://github.com/ros2/rclpy/pull/890,https://github.com/CourchesneA,1,https://github.com/ros2/rclpy/pull/890,,,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,890,2022-01-28T19:41:58Z,2022-01-31T03:14:07Z,2022-01-31T03:14:08Z,MERGED,True,1,1,1,https://github.com/CourchesneA,fix typo,1,[],https://github.com/ros2/rclpy/pull/890,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/890#issuecomment-1024588852,,@CourchesneA Can you please sign your commit with Signed-off-by so it can pass the DCO bot?  Thanks.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,890,2022-01-28T19:41:58Z,2022-01-31T03:14:07Z,2022-01-31T03:14:08Z,MERGED,True,1,1,1,https://github.com/CourchesneA,fix typo,1,[],https://github.com/ros2/rclpy/pull/890,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/890#issuecomment-1024651986,,"CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,890,2022-01-28T19:41:58Z,2022-01-31T03:14:07Z,2022-01-31T03:14:08Z,MERGED,True,1,1,1,https://github.com/CourchesneA,fix typo,1,[],https://github.com/ros2/rclpy/pull/890,https://github.com/clalancette,4,https://github.com/ros2/rclpy/pull/890#issuecomment-1025338237,,"Windows has one failing test here, but I really can't see how it could be related to this PR.  I'm just going to go ahead and assume it was a flake and merge this anyway.  Thanks for the contribution!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,891,2022-02-02T23:41:15Z,2022-02-17T13:11:52Z,2022-02-17T13:11:52Z,MERGED,True,1,1,1,https://github.com/saratrajput,Remove -> bool annotation for destroy_node #886,1,[],https://github.com/ros2/rclpy/pull/891,https://github.com/saratrajput,1,https://github.com/ros2/rclpy/pull/891,Remove -> bool annotation for destroy_node as mentioned in issue #886.,Remove -> bool annotation for destroy_node as mentioned in issue #886.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,891,2022-02-02T23:41:15Z,2022-02-17T13:11:52Z,2022-02-17T13:11:52Z,MERGED,True,1,1,1,https://github.com/saratrajput,Remove -> bool annotation for destroy_node #886,1,[],https://github.com/ros2/rclpy/pull/891,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/891#issuecomment-1028505167,Remove -> bool annotation for destroy_node as mentioned in issue #886.,"CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,895,2022-02-15T09:16:14Z,2022-02-22T13:49:54Z,2022-02-22T13:49:54Z,MERGED,True,56,85,1,https://github.com/MiguelCompany,Remove fastrtps customization on tests,2,[],https://github.com/ros2/rclpy/pull/895,https://github.com/MiguelCompany,1,https://github.com/ros2/rclpy/pull/895,"This PR removes the custom code paths that were checking rmw_get_implementation_identifier() on events-related tests.
Connected to ros2/rmw_fastrtps#583","This PR removes the custom code paths that were checking rmw_get_implementation_identifier() on events-related tests.
Connected to ros2/rmw_fastrtps#583",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,895,2022-02-15T09:16:14Z,2022-02-22T13:49:54Z,2022-02-22T13:49:54Z,MERGED,True,56,85,1,https://github.com/MiguelCompany,Remove fastrtps customization on tests,2,[],https://github.com/ros2/rclpy/pull/895,https://github.com/MiguelCompany,2,https://github.com/ros2/rclpy/pull/895#issuecomment-1041148012,"This PR removes the custom code paths that were checking rmw_get_implementation_identifier() on events-related tests.
Connected to ros2/rmw_fastrtps#583",@clalancette Fixed flake8 errors,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,895,2022-02-15T09:16:14Z,2022-02-22T13:49:54Z,2022-02-22T13:49:54Z,MERGED,True,56,85,1,https://github.com/MiguelCompany,Remove fastrtps customization on tests,2,[],https://github.com/ros2/rclpy/pull/895,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/895#issuecomment-1047815894,"This PR removes the custom code paths that were checking rmw_get_implementation_identifier() on events-related tests.
Connected to ros2/rmw_fastrtps#583",CI for this is in ros2/rmw_fastrtps#583 (comment).,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,896,2022-02-16T11:01:14Z,2022-03-17T17:45:04Z,2022-03-17T17:46:00Z,MERGED,True,17,4,2,https://github.com/shumov-ag,Avoid exception in Node constructor when use override for 'use_sim_time',2,[],https://github.com/ros2/rclpy/pull/896,https://github.com/shumov-ag,1,https://github.com/ros2/rclpy/pull/896,"Allow to create a Node with 'use_sim_time' parameter in parameter overrides.
Avoid exception rclpy.exceptions.ParameterAlreadyDeclaredException: ('Parameter(s) already declared', ['use_sim_time'])","Allow to create a Node with 'use_sim_time' parameter in parameter overrides.
Avoid exception rclpy.exceptions.ParameterAlreadyDeclaredException: ('Parameter(s) already declared', ['use_sim_time'])",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,896,2022-02-16T11:01:14Z,2022-03-17T17:45:04Z,2022-03-17T17:46:00Z,MERGED,True,17,4,2,https://github.com/shumov-ag,Avoid exception in Node constructor when use override for 'use_sim_time',2,[],https://github.com/ros2/rclpy/pull/896,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/896#issuecomment-1055662552,"Allow to create a Node with 'use_sim_time' parameter in parameter overrides.
Avoid exception rclpy.exceptions.ParameterAlreadyDeclaredException: ('Parameter(s) already declared', ['use_sim_time'])","@shumov-ag could you share a way to reproduce the current issue?
Could you also add an unit test that fails before this change and starts passing after?
Thanks!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,896,2022-02-16T11:01:14Z,2022-03-17T17:45:04Z,2022-03-17T17:46:00Z,MERGED,True,17,4,2,https://github.com/shumov-ag,Avoid exception in Node constructor when use override for 'use_sim_time',2,[],https://github.com/ros2/rclpy/pull/896,https://github.com/shumov-ag,3,https://github.com/ros2/rclpy/pull/896#issuecomment-1055708534,"Allow to create a Node with 'use_sim_time' parameter in parameter overrides.
Avoid exception rclpy.exceptions.ParameterAlreadyDeclaredException: ('Parameter(s) already declared', ['use_sim_time'])","Yes, @ivanpauno. I had already added the test test_create_node_with_parameter_overrides",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,896,2022-02-16T11:01:14Z,2022-03-17T17:45:04Z,2022-03-17T17:46:00Z,MERGED,True,17,4,2,https://github.com/shumov-ag,Avoid exception in Node constructor when use override for 'use_sim_time',2,[],https://github.com/ros2/rclpy/pull/896,https://github.com/ivanpauno,4,https://github.com/ros2/rclpy/pull/896#issuecomment-1055825735,"Allow to create a Node with 'use_sim_time' parameter in parameter overrides.
Avoid exception rclpy.exceptions.ParameterAlreadyDeclaredException: ('Parameter(s) already declared', ['use_sim_time'])","Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,896,2022-02-16T11:01:14Z,2022-03-17T17:45:04Z,2022-03-17T17:46:00Z,MERGED,True,17,4,2,https://github.com/shumov-ag,Avoid exception in Node constructor when use override for 'use_sim_time',2,[],https://github.com/ros2/rclpy/pull/896,https://github.com/ivanpauno,5,https://github.com/ros2/rclpy/pull/896#issuecomment-1071141752,"Allow to create a Node with 'use_sim_time' parameter in parameter overrides.
Avoid exception rclpy.exceptions.ParameterAlreadyDeclaredException: ('Parameter(s) already declared', ['use_sim_time'])",@Mergifyio backport galactic,True,{'THUMBS_UP': ['https://github.com/mergify%5Bbot%5D']}
ros2/rclpy,https://github.com/ros2/rclpy,896,2022-02-16T11:01:14Z,2022-03-17T17:45:04Z,2022-03-17T17:46:00Z,MERGED,True,17,4,2,https://github.com/shumov-ag,Avoid exception in Node constructor when use override for 'use_sim_time',2,[],https://github.com/ros2/rclpy/pull/896,https://github.com/apps/mergify,6,https://github.com/ros2/rclpy/pull/896#issuecomment-1071141906,"Allow to create a Node with 'use_sim_time' parameter in parameter overrides.
Avoid exception rclpy.exceptions.ParameterAlreadyDeclaredException: ('Parameter(s) already declared', ['use_sim_time'])","backport galactic

✅ Backports have been created


#913 Avoid exception in Node constructor when use override for 'use_sim_time' (backport #896) has been created for branch galactic",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,898,2022-02-18T06:19:26Z,2022-03-11T03:05:43Z,2022-03-11T03:05:44Z,MERGED,True,19,8,1,https://github.com/iuhilnehc-ynos,[Foxy] fix memory leak for serialization,2,[],https://github.com/ros2/rclpy/pull/898,https://github.com/iuhilnehc-ynos,1,https://github.com/ros2/rclpy/pull/898,"to fix #897
Signed-off-by: Chen Lihui lihui.chen@sony.com","to fix #897
Signed-off-by: Chen Lihui lihui.chen@sony.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,898,2022-02-18T06:19:26Z,2022-03-11T03:05:43Z,2022-03-11T03:05:44Z,MERGED,True,19,8,1,https://github.com/iuhilnehc-ynos,[Foxy] fix memory leak for serialization,2,[],https://github.com/ros2/rclpy/pull/898,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/898#issuecomment-1044802596,"to fix #897
Signed-off-by: Chen Lihui lihui.chen@sony.com","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,898,2022-02-18T06:19:26Z,2022-03-11T03:05:43Z,2022-03-11T03:05:44Z,MERGED,True,19,8,1,https://github.com/iuhilnehc-ynos,[Foxy] fix memory leak for serialization,2,[],https://github.com/ros2/rclpy/pull/898,https://github.com/fujitatomoya,3,https://github.com/ros2/rclpy/pull/898#issuecomment-1044806552,"to fix #897
Signed-off-by: Chen Lihui lihui.chen@sony.com","@clalancette window fails right away, https://ci.ros2.org/job/ci_windows/16540/console i am not even sure what is going on here. do you know anything?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,898,2022-02-18T06:19:26Z,2022-03-11T03:05:43Z,2022-03-11T03:05:44Z,MERGED,True,19,8,1,https://github.com/iuhilnehc-ynos,[Foxy] fix memory leak for serialization,2,[],https://github.com/ros2/rclpy/pull/898,https://github.com/clalancette,4,https://github.com/ros2/rclpy/pull/898#issuecomment-1044816833,"to fix #897
Signed-off-by: Chen Lihui lihui.chen@sony.com","@clalancette window fails right away, https://ci.ros2.org/job/ci_windows/16540/console i am not even sure what is going on here. do you know anything?

I think one of our Windows workers is having trouble.  I got the job to start running on a different worker; it's going now.",True,{'THUMBS_UP': ['https://github.com/fujitatomoya']}
ros2/rclpy,https://github.com/ros2/rclpy,898,2022-02-18T06:19:26Z,2022-03-11T03:05:43Z,2022-03-11T03:05:44Z,MERGED,True,19,8,1,https://github.com/iuhilnehc-ynos,[Foxy] fix memory leak for serialization,2,[],https://github.com/ros2/rclpy/pull/898,https://github.com/fujitatomoya,5,https://github.com/ros2/rclpy/pull/898#issuecomment-1051089636,"to fix #897
Signed-off-by: Chen Lihui lihui.chen@sony.com","CI: (retry)

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,898,2022-02-18T06:19:26Z,2022-03-11T03:05:43Z,2022-03-11T03:05:44Z,MERGED,True,19,8,1,https://github.com/iuhilnehc-ynos,[Foxy] fix memory leak for serialization,2,[],https://github.com/ros2/rclpy/pull/898,https://github.com/fujitatomoya,6,https://github.com/ros2/rclpy/pull/898#issuecomment-1064401581,"to fix #897
Signed-off-by: Chen Lihui lihui.chen@sony.com",Windows,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,898,2022-02-18T06:19:26Z,2022-03-11T03:05:43Z,2022-03-11T03:05:44Z,MERGED,True,19,8,1,https://github.com/iuhilnehc-ynos,[Foxy] fix memory leak for serialization,2,[],https://github.com/ros2/rclpy/pull/898,https://github.com/fujitatomoya,7,https://github.com/ros2/rclpy/pull/898#issuecomment-1064646658,"to fix #897
Signed-off-by: Chen Lihui lihui.chen@sony.com","@iuhilnehc-ynos @clalancette
windows unstable, i do not think there errors are related to this fix. any thoughts?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,898,2022-02-18T06:19:26Z,2022-03-11T03:05:43Z,2022-03-11T03:05:44Z,MERGED,True,19,8,1,https://github.com/iuhilnehc-ynos,[Foxy] fix memory leak for serialization,2,[],https://github.com/ros2/rclpy/pull/898,https://github.com/iuhilnehc-ynos,8,https://github.com/ros2/rclpy/pull/898#issuecomment-1064663228,"to fix #897
Signed-off-by: Chen Lihui lihui.chen@sony.com","Yes, it's unrelated to rclpy. The deprecated warning is from pytest-7.0.1.
pytest-dev/pytest#9616 (comment) might need to be added in the ci builder for windows.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,899,2022-02-19T00:49:03Z,,2022-03-25T22:43:02Z,OPEN,False,33,1,2,https://github.com/apockill,Add ability to wait for MultiThreadedExecutor threads to join when shutting down,25,[],https://github.com/ros2/rclpy/pull/899,https://github.com/apockill,1,https://github.com/ros2/rclpy/pull/899,"Add a wait_for_threads parameter to MultiThreadedExecutor.shutdown(...) which will tell the underlying executor to shut down, and also wait for the threads to join.
Resolves #893
I'd like some feedback on whether wait_for_threads should default to True or False.","Add a wait_for_threads parameter to MultiThreadedExecutor.shutdown(...) which will tell the underlying executor to shut down, and also wait for the threads to join.
Resolves #893
I'd like some feedback on whether wait_for_threads should default to True or False.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,899,2022-02-19T00:49:03Z,,2022-03-25T22:43:02Z,OPEN,False,33,1,2,https://github.com/apockill,Add ability to wait for MultiThreadedExecutor threads to join when shutting down,25,[],https://github.com/ros2/rclpy/pull/899,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/899#issuecomment-1048388668,"Add a wait_for_threads parameter to MultiThreadedExecutor.shutdown(...) which will tell the underlying executor to shut down, and also wait for the threads to join.
Resolves #893
I'd like some feedback on whether wait_for_threads should default to True or False.",@apockill could you address DCO issue? i will review this tomorrow.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,899,2022-02-19T00:49:03Z,,2022-03-25T22:43:02Z,OPEN,False,33,1,2,https://github.com/apockill,Add ability to wait for MultiThreadedExecutor threads to join when shutting down,25,[],https://github.com/ros2/rclpy/pull/899,https://github.com/fujitatomoya,3,https://github.com/ros2/rclpy/pull/899#issuecomment-1049227184,"Add a wait_for_threads parameter to MultiThreadedExecutor.shutdown(...) which will tell the underlying executor to shut down, and also wait for the threads to join.
Resolves #893
I'd like some feedback on whether wait_for_threads should default to True or False.","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,899,2022-02-19T00:49:03Z,,2022-03-25T22:43:02Z,OPEN,False,33,1,2,https://github.com/apockill,Add ability to wait for MultiThreadedExecutor threads to join when shutting down,25,[],https://github.com/ros2/rclpy/pull/899,https://github.com/fujitatomoya,4,https://github.com/ros2/rclpy/pull/899#issuecomment-1049227989,"Add a wait_for_threads parameter to MultiThreadedExecutor.shutdown(...) which will tell the underlying executor to shut down, and also wait for the threads to join.
Resolves #893
I'd like some feedback on whether wait_for_threads should default to True or False.",@apockill could you check on https://github.com/ros2/rclpy/pull/899/checks?check_run_id=5307997326 ?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,899,2022-02-19T00:49:03Z,,2022-03-25T22:43:02Z,OPEN,False,33,1,2,https://github.com/apockill,Add ability to wait for MultiThreadedExecutor threads to join when shutting down,25,[],https://github.com/ros2/rclpy/pull/899,https://github.com/apockill,5,https://github.com/ros2/rclpy/pull/899#issuecomment-1049234189,"Add a wait_for_threads parameter to MultiThreadedExecutor.shutdown(...) which will tell the underlying executor to shut down, and also wait for the threads to join.
Resolves #893
I'd like some feedback on whether wait_for_threads should default to True or False.",@fujitatomoya  Should be good to go. Thank you!,True,{'THUMBS_UP': ['https://github.com/fujitatomoya']}
ros2/rclpy,https://github.com/ros2/rclpy,899,2022-02-19T00:49:03Z,,2022-03-25T22:43:02Z,OPEN,False,33,1,2,https://github.com/apockill,Add ability to wait for MultiThreadedExecutor threads to join when shutting down,25,[],https://github.com/ros2/rclpy/pull/899,https://github.com/fujitatomoya,6,https://github.com/ros2/rclpy/pull/899#issuecomment-1064403030,"Add a wait_for_threads parameter to MultiThreadedExecutor.shutdown(...) which will tell the underlying executor to shut down, and also wait for the threads to join.
Resolves #893
I'd like some feedback on whether wait_for_threads should default to True or False.","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,899,2022-02-19T00:49:03Z,,2022-03-25T22:43:02Z,OPEN,False,33,1,2,https://github.com/apockill,Add ability to wait for MultiThreadedExecutor threads to join when shutting down,25,[],https://github.com/ros2/rclpy/pull/899,https://github.com/fujitatomoya,7,https://github.com/ros2/rclpy/pull/899#issuecomment-1064771535,"Add a wait_for_threads parameter to MultiThreadedExecutor.shutdown(...) which will tell the underlying executor to shut down, and also wait for the threads to join.
Resolves #893
I'd like some feedback on whether wait_for_threads should default to True or False.","@apockill can you rebase this fix? i believe a couple of CI failure is related to 8c4892b.
I want to be sure on this, so after rebase I will restart the CI again.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,899,2022-02-19T00:49:03Z,,2022-03-25T22:43:02Z,OPEN,False,33,1,2,https://github.com/apockill,Add ability to wait for MultiThreadedExecutor threads to join when shutting down,25,[],https://github.com/ros2/rclpy/pull/899,https://github.com/apockill,8,https://github.com/ros2/rclpy/pull/899#issuecomment-1069635678,"Add a wait_for_threads parameter to MultiThreadedExecutor.shutdown(...) which will tell the underlying executor to shut down, and also wait for the threads to join.
Resolves #893
I'd like some feedback on whether wait_for_threads should default to True or False.",Okay- the PR has been rebased.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,899,2022-02-19T00:49:03Z,,2022-03-25T22:43:02Z,OPEN,False,33,1,2,https://github.com/apockill,Add ability to wait for MultiThreadedExecutor threads to join when shutting down,25,[],https://github.com/ros2/rclpy/pull/899,https://github.com/fujitatomoya,9,https://github.com/ros2/rclpy/pull/899#issuecomment-1069658013,"Add a wait_for_threads parameter to MultiThreadedExecutor.shutdown(...) which will tell the underlying executor to shut down, and also wait for the threads to join.
Resolves #893
I'd like some feedback on whether wait_for_threads should default to True or False.","@apockill we are having DCO error https://github.com/ros2/rclpy/pull/899/checks?check_run_id=5576899504, can you check?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,899,2022-02-19T00:49:03Z,,2022-03-25T22:43:02Z,OPEN,False,33,1,2,https://github.com/apockill,Add ability to wait for MultiThreadedExecutor threads to join when shutting down,25,[],https://github.com/ros2/rclpy/pull/899,https://github.com/fujitatomoya,10,https://github.com/ros2/rclpy/pull/899#issuecomment-1069658621,"Add a wait_for_threads parameter to MultiThreadedExecutor.shutdown(...) which will tell the underlying executor to shut down, and also wait for the threads to join.
Resolves #893
I'd like some feedback on whether wait_for_threads should default to True or False.",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,899,2022-02-19T00:49:03Z,,2022-03-25T22:43:02Z,OPEN,False,33,1,2,https://github.com/apockill,Add ability to wait for MultiThreadedExecutor threads to join when shutting down,25,[],https://github.com/ros2/rclpy/pull/899,https://github.com/apockill,11,https://github.com/ros2/rclpy/pull/899#issuecomment-1074547331,"Add a wait_for_threads parameter to MultiThreadedExecutor.shutdown(...) which will tell the underlying executor to shut down, and also wait for the threads to join.
Resolves #893
I'd like some feedback on whether wait_for_threads should default to True or False.","It seems the DCO failures were due to my work email not being associated with github, but being signed in the git commits. I've added the email now to be associated with my github username, do you think that would fix the issue?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,899,2022-02-19T00:49:03Z,,2022-03-25T22:43:02Z,OPEN,False,33,1,2,https://github.com/apockill,Add ability to wait for MultiThreadedExecutor threads to join when shutting down,25,[],https://github.com/ros2/rclpy/pull/899,https://github.com/sloretz,12,https://github.com/ros2/rclpy/pull/899#issuecomment-1078521545,"Add a wait_for_threads parameter to MultiThreadedExecutor.shutdown(...) which will tell the underlying executor to shut down, and also wait for the threads to join.
Resolves #893
I'd like some feedback on whether wait_for_threads should default to True or False.","It seems the DCO failures were due to my work email not being associated with github, but being signed in the git commits. I've added the email now to be associated with my github username, do you think that would fix the issue?

I reran the check, and it still didn't pass.
Commit sha: [392416d](https://github.com/ros2/rclpy/pull/899/commits/392416d60edea5b20aebadb069010b674a99a5a8), Author: Alex Thiel, Committer: Alex Thiel; Expected ""Alex Thiel [apocthiel@gmail.com](mailto:apocthiel@gmail.com)"", but got ""Alex Thiel [alex@urbanmachine.build](mailto:alex@urbanmachine.build)"".

Is the author email on the commit different from the signed off line? I'd recommend git rebase -i master and for each commit change either the author or the signed off line to match each other.",True,{'THUMBS_UP': ['https://github.com/fujitatomoya']}
ros2/rclpy,https://github.com/ros2/rclpy,899,2022-02-19T00:49:03Z,,2022-03-25T22:43:02Z,OPEN,False,33,1,2,https://github.com/apockill,Add ability to wait for MultiThreadedExecutor threads to join when shutting down,25,[],https://github.com/ros2/rclpy/pull/899,https://github.com/fujitatomoya,13,https://github.com/ros2/rclpy/pull/899#issuecomment-1079145720,"Add a wait_for_threads parameter to MultiThreadedExecutor.shutdown(...) which will tell the underlying executor to shut down, and also wait for the threads to join.
Resolves #893
I'd like some feedback on whether wait_for_threads should default to True or False.",@apockill friendly ping.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,899,2022-02-19T00:49:03Z,,2022-03-25T22:43:02Z,OPEN,False,33,1,2,https://github.com/apockill,Add ability to wait for MultiThreadedExecutor threads to join when shutting down,25,[],https://github.com/ros2/rclpy/pull/899,https://github.com/fujitatomoya,14,https://github.com/ros2/rclpy/pull/899#issuecomment-1079218405,"Add a wait_for_threads parameter to MultiThreadedExecutor.shutdown(...) which will tell the underlying executor to shut down, and also wait for the threads to join.
Resolves #893
I'd like some feedback on whether wait_for_threads should default to True or False.",@apockill unfortunately we are still having issue mentioned on #899 (comment),True,{}
ros2/rclpy,https://github.com/ros2/rclpy,899,2022-02-19T00:49:03Z,,2022-03-25T22:43:02Z,OPEN,False,33,1,2,https://github.com/apockill,Add ability to wait for MultiThreadedExecutor threads to join when shutting down,25,[],https://github.com/ros2/rclpy/pull/899,https://github.com/fujitatomoya,15,https://github.com/ros2/rclpy/pull/899#issuecomment-1079218604,"Add a wait_for_threads parameter to MultiThreadedExecutor.shutdown(...) which will tell the underlying executor to shut down, and also wait for the threads to join.
Resolves #893
I'd like some feedback on whether wait_for_threads should default to True or False.","after DCO is fixed, i will retest with CI.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,899,2022-02-19T00:49:03Z,,2022-03-25T22:43:02Z,OPEN,False,33,1,2,https://github.com/apockill,Add ability to wait for MultiThreadedExecutor threads to join when shutting down,25,[],https://github.com/ros2/rclpy/pull/899,https://github.com/apockill,16,https://github.com/ros2/rclpy/pull/899#issuecomment-1079223334,"Add a wait_for_threads parameter to MultiThreadedExecutor.shutdown(...) which will tell the underlying executor to shut down, and also wait for the threads to join.
Resolves #893
I'd like some feedback on whether wait_for_threads should default to True or False.","I'm sorry- I'm still trying to learn how to use git to fix these issues. I haven't dealt with commit rewording before 😅
I'll get back to you soon",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,899,2022-02-19T00:49:03Z,,2022-03-25T22:43:02Z,OPEN,False,33,1,2,https://github.com/apockill,Add ability to wait for MultiThreadedExecutor threads to join when shutting down,25,[],https://github.com/ros2/rclpy/pull/899,https://github.com/apockill,17,https://github.com/ros2/rclpy/pull/899#issuecomment-1079238911,"Add a wait_for_threads parameter to MultiThreadedExecutor.shutdown(...) which will tell the underlying executor to shut down, and also wait for the threads to join.
Resolves #893
I'd like some feedback on whether wait_for_threads should default to True or False.",I'm really stuck on this issue- is there any detailed documentation on how to do this process? I'm definitely running into the edge of my understanding of git.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,899,2022-02-19T00:49:03Z,,2022-03-25T22:43:02Z,OPEN,False,33,1,2,https://github.com/apockill,Add ability to wait for MultiThreadedExecutor threads to join when shutting down,25,[],https://github.com/ros2/rclpy/pull/899,https://github.com/fujitatomoya,18,https://github.com/ros2/rclpy/pull/899#issuecomment-1079495291,"Add a wait_for_threads parameter to MultiThreadedExecutor.shutdown(...) which will tell the underlying executor to shut down, and also wait for the threads to join.
Resolves #893
I'd like some feedback on whether wait_for_threads should default to True or False.",DCO error tells that 392416d has been committed by Alex Thiel alex@urbanmachine.build but Alex Thiel apocthiel@gmail.com. so changing this commit with Alex Thiel apocthiel@gmail.com singed-off-by should fix the problem.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,901,2022-02-22T18:43:16Z,2022-02-23T13:25:47Z,2022-02-23T14:48:42Z,MERGED,True,5,4,2,https://github.com/suurjaak,Bugfix to Node.destroy_rate() result,6,[],https://github.com/ros2/rclpy/pull/901,https://github.com/suurjaak,1,https://github.com/ros2/rclpy/pull/901,Fixes #900.,Fixes #900.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,901,2022-02-22T18:43:16Z,2022-02-23T13:25:47Z,2022-02-23T14:48:42Z,MERGED,True,5,4,2,https://github.com/suurjaak,Bugfix to Node.destroy_rate() result,6,[],https://github.com/ros2/rclpy/pull/901,https://github.com/suurjaak,2,https://github.com/ros2/rclpy/pull/901#issuecomment-1048110419,Fixes #900.,"The same rationale would then apply to destroy_timer() as well, because destroy_rate() depends on it.
However, destroy_timer() quite explicitly handles failure and returns False.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,901,2022-02-22T18:43:16Z,2022-02-23T13:25:47Z,2022-02-23T14:48:42Z,MERGED,True,5,4,2,https://github.com/suurjaak,Bugfix to Node.destroy_rate() result,6,[],https://github.com/ros2/rclpy/pull/901,https://github.com/suurjaak,3,https://github.com/ros2/rclpy/pull/901#issuecomment-1048123071,Fixes #900.,"Also, these are not just internal methods used by destroy_node(). These are public methods that framework users invoke. If destroying a timer can fail, so can destroying a rate, and it would be wrong to swallow the failure.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,901,2022-02-22T18:43:16Z,2022-02-23T13:25:47Z,2022-02-23T14:48:42Z,MERGED,True,5,4,2,https://github.com/suurjaak,Bugfix to Node.destroy_rate() result,6,[],https://github.com/ros2/rclpy/pull/901,https://github.com/clalancette,4,https://github.com/ros2/rclpy/pull/901#issuecomment-1048126863,Fixes #900.,"Also, these are not just internal methods used by destroy_node(). These are public methods that framework users invoke. If destroying a timer can fail, so can destroying a rate, and it would be wrong to swallow the failure.

I guess I generally don't like return values on cleanup operations.  If it fails, it is not at all clear what the user can or should do about it.  I would actually be in favor of not returning errors for any of these destroy_ operations, except for the obvious fact that they are used by destroy_node.
I guess from that perspective, it might be better to be consistent and return a boolean from destroy_rate, even though I don't like the final API.  But I guess I'll wait to hear from Shane to get his perspective.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,901,2022-02-22T18:43:16Z,2022-02-23T13:25:47Z,2022-02-23T14:48:42Z,MERGED,True,5,4,2,https://github.com/suurjaak,Bugfix to Node.destroy_rate() result,6,[],https://github.com/ros2/rclpy/pull/901,https://github.com/fujitatomoya,5,https://github.com/ros2/rclpy/pull/901#issuecomment-1048383683,Fixes #900.,"CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,902,2022-02-22T19:55:12Z,2022-02-23T20:11:32Z,2022-02-24T18:49:24Z,MERGED,True,13,0,1,https://github.com/clalancette,Make sure to free the goal_status_array when done using it.,1,[],https://github.com/ros2/rclpy/pull/902,https://github.com/clalancette,1,https://github.com/ros2/rclpy/pull/902,"Otherwise this leaks memory every time a status is published.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
Discovered while using valgrind to track down an unrelated problem.","Otherwise this leaks memory every time a status is published.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
Discovered while using valgrind to track down an unrelated problem.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,902,2022-02-22T19:55:12Z,2022-02-23T20:11:32Z,2022-02-24T18:49:24Z,MERGED,True,13,0,1,https://github.com/clalancette,Make sure to free the goal_status_array when done using it.,1,[],https://github.com/ros2/rclpy/pull/902,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/902#issuecomment-1048183394,"Otherwise this leaks memory every time a status is published.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
Discovered while using valgrind to track down an unrelated problem.","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,902,2022-02-22T19:55:12Z,2022-02-23T20:11:32Z,2022-02-24T18:49:24Z,MERGED,True,13,0,1,https://github.com/clalancette,Make sure to free the goal_status_array when done using it.,1,[],https://github.com/ros2/rclpy/pull/902,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/902#issuecomment-1048218562,"Otherwise this leaks memory every time a status is published.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
Discovered while using valgrind to track down an unrelated problem.","Thanks for the approval!  I'm actually going to run a bit more CI (--packages-above rclpy) just because this changes a public API:

Linux 
Linux-aarch64 
Windows",True,{'THUMBS_UP': ['https://github.com/fujitatomoya']}
ros2/rclpy,https://github.com/ros2/rclpy,902,2022-02-22T19:55:12Z,2022-02-23T20:11:32Z,2022-02-24T18:49:24Z,MERGED,True,13,0,1,https://github.com/clalancette,Make sure to free the goal_status_array when done using it.,1,[],https://github.com/ros2/rclpy/pull/902,https://github.com/Blast545,4,https://github.com/ros2/rclpy/pull/902#issuecomment-1050156086,"Otherwise this leaks memory every time a status is published.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
Discovered while using valgrind to track down an unrelated problem.","👨‍🌾 I think this PR is causing regressions in some windows packages: https://ci.ros2.org/view/nightly/job/nightly_win_deb/2278/
Some of the errors in that job make reference to objects that can't be destroyed because a destruction was requested. I'll keep track to see if this appears again on the buildfarm tomorrow to discard a possible windows jammy flakiness.
: ----------------------------------------------------------------------^M
1: Ran 1 test in 4.993s^M
1: ^M
1: FAILED (errors=1)^M
1: Traceback (most recent call last):^M
1:   File ""C:\ci\ws\install\Lib\site-packages\launch\launch_service.py"", line 334, in run_async^M
1:     raise completed_tasks_exceptions[0]^M
1:   File ""C:\Python38\lib\concurrent\futures\thread.py"", line 57, in run^M
1:     result = self.fn(*self.args, **self.kwargs)^M
1:   File ""C:\ci\ws\install\Lib\site-packages\launch_ros\actions\lifecycle_node.py"", line 91, in _call_change_state^M
1:     while not self.__rclpy_change_state_client.wait_for_service(timeout_sec=1.0):^M
1:   File ""C:\ci\ws\install\Lib\site-packages\rclpy\client.py"", line 180, in wait_for_service^M
1:     return self.service_is_ready()^M
1:   File ""C:\ci\ws\install\Lib\site-packages\rclpy\client.py"", line 159, in service_is_ready^M
1:     with self.handle:^M
1: rclpy._rclpy_pybind11.InvalidHandle: cannot use Destroyable because destruction was requested^M
1: ^M
1: During handling of the above exception, another exception occurred:^M",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,903,2022-02-24T11:17:50Z,2022-03-07T20:01:31Z,2022-03-08T17:30:11Z,MERGED,True,22,18,1,https://github.com/suurjaak,Fix crash on spinning raw subscription when publishes closes (#827).,4,[],https://github.com/ros2/rclpy/pull/903,https://github.com/suurjaak,1,https://github.com/ros2/rclpy/pull/903,"Affects middlewares like Cyclone DDS that fire events not supported by ROS2.
Signed-off-by: Erki Suurjaak erki@lap.ee","Affects middlewares like Cyclone DDS that fire events not supported by ROS2.
Signed-off-by: Erki Suurjaak erki@lap.ee",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,903,2022-02-24T11:17:50Z,2022-03-07T20:01:31Z,2022-03-08T17:30:11Z,MERGED,True,22,18,1,https://github.com/suurjaak,Fix crash on spinning raw subscription when publishes closes (#827).,4,[],https://github.com/ros2/rclpy/pull/903,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/903#issuecomment-1051102498,"Affects middlewares like Cyclone DDS that fire events not supported by ROS2.
Signed-off-by: Erki Suurjaak erki@lap.ee",address #827,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,903,2022-02-24T11:17:50Z,2022-03-07T20:01:31Z,2022-03-08T17:30:11Z,MERGED,True,22,18,1,https://github.com/suurjaak,Fix crash on spinning raw subscription when publishes closes (#827).,4,[],https://github.com/ros2/rclpy/pull/903,https://github.com/fujitatomoya,3,https://github.com/ros2/rclpy/pull/903#issuecomment-1051122559,"Affects middlewares like Cyclone DDS that fire events not supported by ROS2.
Signed-off-by: Erki Suurjaak erki@lap.ee",@iuhilnehc-ynos could you review this?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,903,2022-02-24T11:17:50Z,2022-03-07T20:01:31Z,2022-03-08T17:30:11Z,MERGED,True,22,18,1,https://github.com/suurjaak,Fix crash on spinning raw subscription when publishes closes (#827).,4,[],https://github.com/ros2/rclpy/pull/903,https://github.com/suurjaak,4,https://github.com/ros2/rclpy/pull/903#issuecomment-1051249776,"Affects middlewares like Cyclone DDS that fire events not supported by ROS2.
Signed-off-by: Erki Suurjaak erki@lap.ee","it would be nice to refactor for rmw_serialized_message_fini cleanup process as #827 (comment)

Made a change (47a27a3), is this what you had in mind?",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,903,2022-02-24T11:17:50Z,2022-03-07T20:01:31Z,2022-03-08T17:30:11Z,MERGED,True,22,18,1,https://github.com/suurjaak,Fix crash on spinning raw subscription when publishes closes (#827).,4,[],https://github.com/ros2/rclpy/pull/903,https://github.com/fujitatomoya,5,https://github.com/ros2/rclpy/pull/903#issuecomment-1053906297,"Affects middlewares like Cyclone DDS that fire events not supported by ROS2.
Signed-off-by: Erki Suurjaak erki@lap.ee","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,903,2022-02-24T11:17:50Z,2022-03-07T20:01:31Z,2022-03-08T17:30:11Z,MERGED,True,22,18,1,https://github.com/suurjaak,Fix crash on spinning raw subscription when publishes closes (#827).,4,[],https://github.com/ros2/rclpy/pull/903,https://github.com/suurjaak,6,https://github.com/ros2/rclpy/pull/903#issuecomment-1061074253,"Affects middlewares like Cyclone DDS that fire events not supported by ROS2.
Signed-off-by: Erki Suurjaak erki@lap.ee",@fujitatomoya When do you think this will get merged?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,903,2022-02-24T11:17:50Z,2022-03-07T20:01:31Z,2022-03-08T17:30:11Z,MERGED,True,22,18,1,https://github.com/suurjaak,Fix crash on spinning raw subscription when publishes closes (#827).,4,[],https://github.com/ros2/rclpy/pull/903,https://github.com/fujitatomoya,7,https://github.com/ros2/rclpy/pull/903#issuecomment-1061079147,"Affects middlewares like Cyclone DDS that fire events not supported by ROS2.
Signed-off-by: Erki Suurjaak erki@lap.ee",i think that windows is unstable and not related to this PR.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,904,2022-02-24T20:44:51Z,2022-02-26T13:22:57Z,2022-02-26T13:23:00Z,MERGED,True,26,0,2,https://github.com/clalancette,"Make sure to take out contexts on Action{Client,Server}.",1,[],https://github.com/ros2/rclpy/pull/904,https://github.com/clalancette,1,https://github.com/ros2/rclpy/pull/904,"This ensures that the underlying object won't be freed when
e.g. a WaitSet is still using it.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
This should solve ros2/geometry2#503 .  Still in draft because @sloretz and I are still working out some of the details.","This ensures that the underlying object won't be freed when
e.g. a WaitSet is still using it.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
This should solve ros2/geometry2#503 .  Still in draft because @sloretz and I are still working out some of the details.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,904,2022-02-24T20:44:51Z,2022-02-26T13:22:57Z,2022-02-26T13:23:00Z,MERGED,True,26,0,2,https://github.com/clalancette,"Make sure to take out contexts on Action{Client,Server}.",1,[],https://github.com/ros2/rclpy/pull/904,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/904#issuecomment-1050882953,"This ensures that the underlying object won't be freed when
e.g. a WaitSet is still using it.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
This should solve ros2/geometry2#503 .  Still in draft because @sloretz and I are still working out some of the details.","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,904,2022-02-24T20:44:51Z,2022-02-26T13:22:57Z,2022-02-26T13:23:00Z,MERGED,True,26,0,2,https://github.com/clalancette,"Make sure to take out contexts on Action{Client,Server}.",1,[],https://github.com/ros2/rclpy/pull/904,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/904#issuecomment-1052123469,"This ensures that the underlying object won't be freed when
e.g. a WaitSet is still using it.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
This should solve ros2/geometry2#503 .  Still in draft because @sloretz and I are still working out some of the details.","CI was green (except for aarch64, which is a known problem with Eigen).  Going ahead and merging this one, we can follow up with a better solution later on if need be.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,905,2022-02-26T13:37:49Z,2022-03-01T18:21:10Z,2022-05-09T13:19:09Z,MERGED,True,2,30,2,https://github.com/clalancette,Properly implement action server/client handle cleanup.,2,[],https://github.com/ros2/rclpy/pull/905,https://github.com/clalancette,1,https://github.com/ros2/rclpy/pull/905,"In particular, it should never really be the case that the
underlying handle that we are using is None.  That only seemed
to be happening because we were double destroying; once in
the explicit call to destroy(), and once in del.  But
we don't actually need del; during garbage collection, we'll
drop the reference to the handle and then the underlying object
will get freed anyway.  Just remove all of that extraneous
infrastructure here.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
Besides being a lot cleaner, this is also likely responsible for warnings during tests on the buildfarm like:
04:24:41.497 144: [test_action_client-3] Exception ignored in: <function ActionClient.__del__ at 0x00000245450633A0>
04:24:41.497 144: [test_action_client-3] Traceback (most recent call last):
04:24:41.497 144: [test_action_client-3]   File ""C:\ci\ws\install\Lib\site-packages\rclpy\action\client.py"", line 588, in __del__
04:24:41.498 144: [test_action_client-3]   File ""C:\ci\ws\install\Lib\site-packages\rclpy\action\client.py"", line 581, in destroy
04:24:41.498 144: [test_action_client-3] rclpy._rclpy_pybind11.InvalidHandle: cannot use Destroyable because destruction was requested

(we'll carefully check the results of CI to make sure that this is gone with this fix)","In particular, it should never really be the case that the
underlying handle that we are using is None.  That only seemed
to be happening because we were double destroying; once in
the explicit call to destroy(), and once in del.  But
we don't actually need del; during garbage collection, we'll
drop the reference to the handle and then the underlying object
will get freed anyway.  Just remove all of that extraneous
infrastructure here.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
Besides being a lot cleaner, this is also likely responsible for warnings during tests on the buildfarm like:
04:24:41.497 144: [test_action_client-3] Exception ignored in: <function ActionClient.__del__ at 0x00000245450633A0>
04:24:41.497 144: [test_action_client-3] Traceback (most recent call last):
04:24:41.497 144: [test_action_client-3]   File ""C:\ci\ws\install\Lib\site-packages\rclpy\action\client.py"", line 588, in __del__
04:24:41.498 144: [test_action_client-3]   File ""C:\ci\ws\install\Lib\site-packages\rclpy\action\client.py"", line 581, in destroy
04:24:41.498 144: [test_action_client-3] rclpy._rclpy_pybind11.InvalidHandle: cannot use Destroyable because destruction was requested

(we'll carefully check the results of CI to make sure that this is gone with this fix)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,905,2022-02-26T13:37:49Z,2022-03-01T18:21:10Z,2022-05-09T13:19:09Z,MERGED,True,2,30,2,https://github.com/clalancette,Properly implement action server/client handle cleanup.,2,[],https://github.com/ros2/rclpy/pull/905,https://github.com/clalancette,2,https://github.com/ros2/rclpy/pull/905#issuecomment-1052127334,"In particular, it should never really be the case that the
underlying handle that we are using is None.  That only seemed
to be happening because we were double destroying; once in
the explicit call to destroy(), and once in del.  But
we don't actually need del; during garbage collection, we'll
drop the reference to the handle and then the underlying object
will get freed anyway.  Just remove all of that extraneous
infrastructure here.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
Besides being a lot cleaner, this is also likely responsible for warnings during tests on the buildfarm like:
04:24:41.497 144: [test_action_client-3] Exception ignored in: <function ActionClient.__del__ at 0x00000245450633A0>
04:24:41.497 144: [test_action_client-3] Traceback (most recent call last):
04:24:41.497 144: [test_action_client-3]   File ""C:\ci\ws\install\Lib\site-packages\rclpy\action\client.py"", line 588, in __del__
04:24:41.498 144: [test_action_client-3]   File ""C:\ci\ws\install\Lib\site-packages\rclpy\action\client.py"", line 581, in destroy
04:24:41.498 144: [test_action_client-3] rclpy._rclpy_pybind11.InvalidHandle: cannot use Destroyable because destruction was requested

(we'll carefully check the results of CI to make sure that this is gone with this fix)","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,905,2022-02-26T13:37:49Z,2022-03-01T18:21:10Z,2022-05-09T13:19:09Z,MERGED,True,2,30,2,https://github.com/clalancette,Properly implement action server/client handle cleanup.,2,[],https://github.com/ros2/rclpy/pull/905,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/905#issuecomment-1054550098,"In particular, it should never really be the case that the
underlying handle that we are using is None.  That only seemed
to be happening because we were double destroying; once in
the explicit call to destroy(), and once in del.  But
we don't actually need del; during garbage collection, we'll
drop the reference to the handle and then the underlying object
will get freed anyway.  Just remove all of that extraneous
infrastructure here.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
Besides being a lot cleaner, this is also likely responsible for warnings during tests on the buildfarm like:
04:24:41.497 144: [test_action_client-3] Exception ignored in: <function ActionClient.__del__ at 0x00000245450633A0>
04:24:41.497 144: [test_action_client-3] Traceback (most recent call last):
04:24:41.497 144: [test_action_client-3]   File ""C:\ci\ws\install\Lib\site-packages\rclpy\action\client.py"", line 588, in __del__
04:24:41.498 144: [test_action_client-3]   File ""C:\ci\ws\install\Lib\site-packages\rclpy\action\client.py"", line 581, in destroy
04:24:41.498 144: [test_action_client-3] rclpy._rclpy_pybind11.InvalidHandle: cannot use Destroyable because destruction was requested

(we'll carefully check the results of CI to make sure that this is gone with this fix)","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,905,2022-02-26T13:37:49Z,2022-03-01T18:21:10Z,2022-05-09T13:19:09Z,MERGED,True,2,30,2,https://github.com/clalancette,Properly implement action server/client handle cleanup.,2,[],https://github.com/ros2/rclpy/pull/905,https://github.com/clalancette,4,https://github.com/ros2/rclpy/pull/905#issuecomment-1055727014,"In particular, it should never really be the case that the
underlying handle that we are using is None.  That only seemed
to be happening because we were double destroying; once in
the explicit call to destroy(), and once in del.  But
we don't actually need del; during garbage collection, we'll
drop the reference to the handle and then the underlying object
will get freed anyway.  Just remove all of that extraneous
infrastructure here.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
Besides being a lot cleaner, this is also likely responsible for warnings during tests on the buildfarm like:
04:24:41.497 144: [test_action_client-3] Exception ignored in: <function ActionClient.__del__ at 0x00000245450633A0>
04:24:41.497 144: [test_action_client-3] Traceback (most recent call last):
04:24:41.497 144: [test_action_client-3]   File ""C:\ci\ws\install\Lib\site-packages\rclpy\action\client.py"", line 588, in __del__
04:24:41.498 144: [test_action_client-3]   File ""C:\ci\ws\install\Lib\site-packages\rclpy\action\client.py"", line 581, in destroy
04:24:41.498 144: [test_action_client-3] rclpy._rclpy_pybind11.InvalidHandle: cannot use Destroyable because destruction was requested

(we'll carefully check the results of CI to make sure that this is gone with this fix)","Warnings on aarch64 are known, so going ahead and merging this one.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,905,2022-02-26T13:37:49Z,2022-03-01T18:21:10Z,2022-05-09T13:19:09Z,MERGED,True,2,30,2,https://github.com/clalancette,Properly implement action server/client handle cleanup.,2,[],https://github.com/ros2/rclpy/pull/905,https://github.com/ThomasTimmRiACT,5,https://github.com/ros2/rclpy/pull/905#issuecomment-1121092388,"In particular, it should never really be the case that the
underlying handle that we are using is None.  That only seemed
to be happening because we were double destroying; once in
the explicit call to destroy(), and once in del.  But
we don't actually need del; during garbage collection, we'll
drop the reference to the handle and then the underlying object
will get freed anyway.  Just remove all of that extraneous
infrastructure here.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
Besides being a lot cleaner, this is also likely responsible for warnings during tests on the buildfarm like:
04:24:41.497 144: [test_action_client-3] Exception ignored in: <function ActionClient.__del__ at 0x00000245450633A0>
04:24:41.497 144: [test_action_client-3] Traceback (most recent call last):
04:24:41.497 144: [test_action_client-3]   File ""C:\ci\ws\install\Lib\site-packages\rclpy\action\client.py"", line 588, in __del__
04:24:41.498 144: [test_action_client-3]   File ""C:\ci\ws\install\Lib\site-packages\rclpy\action\client.py"", line 581, in destroy
04:24:41.498 144: [test_action_client-3] rclpy._rclpy_pybind11.InvalidHandle: cannot use Destroyable because destruction was requested

(we'll carefully check the results of CI to make sure that this is gone with this fix)",Any chance this will make it into Foxy (and/or Galactic)?,True,{'EYES': ['https://github.com/apockill']}
ros2/rclpy,https://github.com/ros2/rclpy,906,2022-02-28T15:16:19Z,2022-04-07T17:53:35Z,2022-04-07T17:53:37Z,MERGED,True,217,163,49,https://github.com/clalancette,Make rclpy dependencies explicit,3,[],https://github.com/ros2/rclpy/pull/906,https://github.com/clalancette,1,https://github.com/ros2/rclpy/pull/906,"While working on some other things in rclpy, I noticed that rclpy didn't properly declare all of its dependencies.  In particular, it depends on rosidl_runtime_c and rmw, but neither of these were explicitly called out in the package.xml or CMakeLists.txt.
To fix this, there are 3 patches in this series:

Does a pass for include-what-you-use everywhere in the rclpy code.
Adds the new dependencies.
Fixes up documentation problems noticed while doing the above.

All 3 patches are completely independent, and could all be taken separately.  But given that I noticed them all together, I figured I would open one big PR for it.  Let me know if you'd like me to split it up.","While working on some other things in rclpy, I noticed that rclpy didn't properly declare all of its dependencies.  In particular, it depends on rosidl_runtime_c and rmw, but neither of these were explicitly called out in the package.xml or CMakeLists.txt.
To fix this, there are 3 patches in this series:

Does a pass for include-what-you-use everywhere in the rclpy code.
Adds the new dependencies.
Fixes up documentation problems noticed while doing the above.

All 3 patches are completely independent, and could all be taken separately.  But given that I noticed them all together, I figured I would open one big PR for it.  Let me know if you'd like me to split it up.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,906,2022-02-28T15:16:19Z,2022-04-07T17:53:35Z,2022-04-07T17:53:37Z,MERGED,True,217,163,49,https://github.com/clalancette,Make rclpy dependencies explicit,3,[],https://github.com/ros2/rclpy/pull/906,https://github.com/sloretz,2,https://github.com/ros2/rclpy/pull/906#issuecomment-1078549707,"While working on some other things in rclpy, I noticed that rclpy didn't properly declare all of its dependencies.  In particular, it depends on rosidl_runtime_c and rmw, but neither of these were explicitly called out in the package.xml or CMakeLists.txt.
To fix this, there are 3 patches in this series:

Does a pass for include-what-you-use everywhere in the rclpy code.
Adds the new dependencies.
Fixes up documentation problems noticed while doing the above.

All 3 patches are completely independent, and could all be taken separately.  But given that I noticed them all together, I figured I would open one big PR for it.  Let me know if you'd like me to split it up.","Changes to fully-qualified object names within the pybind11 code, just to make it clear where things are coming from.

It looks like these changes are inside code in a namespace rclpy {...} block. I feel like that's enough context to have a pretty good intuition for where they come from.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,906,2022-02-28T15:16:19Z,2022-04-07T17:53:35Z,2022-04-07T17:53:37Z,MERGED,True,217,163,49,https://github.com/clalancette,Make rclpy dependencies explicit,3,[],https://github.com/ros2/rclpy/pull/906,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/906#issuecomment-1081891235,"While working on some other things in rclpy, I noticed that rclpy didn't properly declare all of its dependencies.  In particular, it depends on rosidl_runtime_c and rmw, but neither of these were explicitly called out in the package.xml or CMakeLists.txt.
To fix this, there are 3 patches in this series:

Does a pass for include-what-you-use everywhere in the rclpy code.
Adds the new dependencies.
Fixes up documentation problems noticed while doing the above.

All 3 patches are completely independent, and could all be taken separately.  But given that I noticed them all together, I figured I would open one big PR for it.  Let me know if you'd like me to split it up.","It looks like these changes are inside code in a namespace rclpy {...} block. I feel like that's enough context to have a pretty good intuition for where they come from.

That's fair.  I waffled on this anyway.  I'll remove all of that change from this PR (which should simplify it quite a bit as well).",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,906,2022-02-28T15:16:19Z,2022-04-07T17:53:35Z,2022-04-07T17:53:37Z,MERGED,True,217,163,49,https://github.com/clalancette,Make rclpy dependencies explicit,3,[],https://github.com/ros2/rclpy/pull/906,https://github.com/clalancette,4,https://github.com/ros2/rclpy/pull/906#issuecomment-1081945387,"While working on some other things in rclpy, I noticed that rclpy didn't properly declare all of its dependencies.  In particular, it depends on rosidl_runtime_c and rmw, but neither of these were explicitly called out in the package.xml or CMakeLists.txt.
To fix this, there are 3 patches in this series:

Does a pass for include-what-you-use everywhere in the rclpy code.
Adds the new dependencies.
Fixes up documentation problems noticed while doing the above.

All 3 patches are completely independent, and could all be taken separately.  But given that I noticed them all together, I figured I would open one big PR for it.  Let me know if you'd like me to split it up.",I've now removed that last patch.  I'm going to run CI on the lot here to see what happens.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,906,2022-02-28T15:16:19Z,2022-04-07T17:53:35Z,2022-04-07T17:53:37Z,MERGED,True,217,163,49,https://github.com/clalancette,Make rclpy dependencies explicit,3,[],https://github.com/ros2/rclpy/pull/906,https://github.com/clalancette,5,https://github.com/ros2/rclpy/pull/906#issuecomment-1081946881,"While working on some other things in rclpy, I noticed that rclpy didn't properly declare all of its dependencies.  In particular, it depends on rosidl_runtime_c and rmw, but neither of these were explicitly called out in the package.xml or CMakeLists.txt.
To fix this, there are 3 patches in this series:

Does a pass for include-what-you-use everywhere in the rclpy code.
Adds the new dependencies.
Fixes up documentation problems noticed while doing the above.

All 3 patches are completely independent, and could all be taken separately.  But given that I noticed them all together, I figured I would open one big PR for it.  Let me know if you'd like me to split it up.","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,906,2022-02-28T15:16:19Z,2022-04-07T17:53:35Z,2022-04-07T17:53:37Z,MERGED,True,217,163,49,https://github.com/clalancette,Make rclpy dependencies explicit,3,[],https://github.com/ros2/rclpy/pull/906,https://github.com/clalancette,6,https://github.com/ros2/rclpy/pull/906#issuecomment-1092009174,"While working on some other things in rclpy, I noticed that rclpy didn't properly declare all of its dependencies.  In particular, it depends on rosidl_runtime_c and rmw, but neither of these were explicitly called out in the package.xml or CMakeLists.txt.
To fix this, there are 3 patches in this series:

Does a pass for include-what-you-use everywhere in the rclpy code.
Adds the new dependencies.
Fixes up documentation problems noticed while doing the above.

All 3 patches are completely independent, and could all be taken separately.  But given that I noticed them all together, I figured I would open one big PR for it.  Let me know if you'd like me to split it up.",@ros-pull-request-builder retest this please,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,906,2022-02-28T15:16:19Z,2022-04-07T17:53:35Z,2022-04-07T17:53:37Z,MERGED,True,217,163,49,https://github.com/clalancette,Make rclpy dependencies explicit,3,[],https://github.com/ros2/rclpy/pull/906,https://github.com/clalancette,7,https://github.com/ros2/rclpy/pull/906#issuecomment-1092030054,"While working on some other things in rclpy, I noticed that rclpy didn't properly declare all of its dependencies.  In particular, it depends on rosidl_runtime_c and rmw, but neither of these were explicitly called out in the package.xml or CMakeLists.txt.
To fix this, there are 3 patches in this series:

Does a pass for include-what-you-use everywhere in the rclpy code.
Adds the new dependencies.
Fixes up documentation problems noticed while doing the above.

All 3 patches are completely independent, and could all be taken separately.  But given that I noticed them all together, I figured I would open one big PR for it.  Let me know if you'd like me to split it up.","CI is all green, and approved, so I'm going to go ahead and merge this in as a fix.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,907,2022-03-02T11:47:19Z,2022-03-11T10:25:43Z,2022-03-11T10:26:34Z,CLOSED,False,6,1,2,https://github.com/mauropasse,time_until_next_call returns max if timer is canceled,1,[],https://github.com/ros2/rclpy/pull/907,https://github.com/mauropasse,1,https://github.com/ros2/rclpy/pull/907,"The PR ros2/rcl#963 changes rcl_timer_get_time_until_next_call to return RCL_RET_TIMER_CANCELED  if timer was canceled.
Here in rclpy we'll return std::numeric_limits<int64_t>::max() on time_until_next_call if timer was canceled.
Signed-off-by: Mauro Passerino mpasserino@irobot.com","The PR ros2/rcl#963 changes rcl_timer_get_time_until_next_call to return RCL_RET_TIMER_CANCELED  if timer was canceled.
Here in rclpy we'll return std::numeric_limits<int64_t>::max() on time_until_next_call if timer was canceled.
Signed-off-by: Mauro Passerino mpasserino@irobot.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,907,2022-03-02T11:47:19Z,2022-03-11T10:25:43Z,2022-03-11T10:26:34Z,CLOSED,False,6,1,2,https://github.com/mauropasse,time_until_next_call returns max if timer is canceled,1,[],https://github.com/ros2/rclpy/pull/907,https://github.com/mauropasse,2,https://github.com/ros2/rclpy/pull/907#issuecomment-1064979907,"The PR ros2/rcl#963 changes rcl_timer_get_time_until_next_call to return RCL_RET_TIMER_CANCELED  if timer was canceled.
Here in rclpy we'll return std::numeric_limits<int64_t>::max() on time_until_next_call if timer was canceled.
Signed-off-by: Mauro Passerino mpasserino@irobot.com","#910 did the job, thanks @fujitatomoya !",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,909,2022-03-04T04:06:15Z,,2022-03-04T04:06:15Z,OPEN,False,89,1,3,https://github.com/Flova,Move /clock callback processing to seperate thread.,6,[],https://github.com/ros2/rclpy/pull/909,https://github.com/Flova,1,https://github.com/ros2/rclpy/pull/909,"This PR moves the spinning of the Executor for the /clock subscriber to a seperate thread. (#792)
As described in the issue this needs support for spinning a callback group in its own Executor. Support for this exists in rclcpp and was sugested for rclpy in #850. The current implementation is a bit hacky imo., so suggestions regarding a different way of implementing this are welcome.
Fixes #792 and partially #850","This PR moves the spinning of the Executor for the /clock subscriber to a seperate thread. (#792)
As described in the issue this needs support for spinning a callback group in its own Executor. Support for this exists in rclcpp and was sugested for rclpy in #850. The current implementation is a bit hacky imo., so suggestions regarding a different way of implementing this are welcome.
Fixes #792 and partially #850",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,910,2022-03-08T22:51:50Z,2022-03-11T04:35:42Z,2022-03-11T04:35:43Z,MERGED,True,43,7,3,https://github.com/fujitatomoya,time_until_next_call returns max if timer is canceled.,2,[],https://github.com/ros2/rclpy/pull/910,https://github.com/fujitatomoya,1,https://github.com/ros2/rclpy/pull/910,"aligned with ros2/rcl#963 and ros2/rclcpp#1893
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","aligned with ros2/rcl#963 and ros2/rclcpp#1893
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,910,2022-03-08T22:51:50Z,2022-03-11T04:35:42Z,2022-03-11T04:35:43Z,MERGED,True,43,7,3,https://github.com/fujitatomoya,time_until_next_call returns max if timer is canceled.,2,[],https://github.com/ros2/rclpy/pull/910,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/910#issuecomment-1062315365,"aligned with ros2/rcl#963 and ros2/rclcpp#1893
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","@ivanpauno @sloretz  could you take a look?
CC: @mauropasse",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,910,2022-03-08T22:51:50Z,2022-03-11T04:35:42Z,2022-03-11T04:35:43Z,MERGED,True,43,7,3,https://github.com/fujitatomoya,time_until_next_call returns max if timer is canceled.,2,[],https://github.com/ros2/rclpy/pull/910,https://github.com/fujitatomoya,3,https://github.com/ros2/rclpy/pull/910#issuecomment-1062324954,"aligned with ros2/rcl#963 and ros2/rclcpp#1893
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,910,2022-03-08T22:51:50Z,2022-03-11T04:35:42Z,2022-03-11T04:35:43Z,MERGED,True,43,7,3,https://github.com/fujitatomoya,time_until_next_call returns max if timer is canceled.,2,[],https://github.com/ros2/rclpy/pull/910,https://github.com/fujitatomoya,4,https://github.com/ros2/rclpy/pull/910#issuecomment-1064434304,"aligned with ros2/rcl#963 and ros2/rclcpp#1893
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,910,2022-03-08T22:51:50Z,2022-03-11T04:35:42Z,2022-03-11T04:35:43Z,MERGED,True,43,7,3,https://github.com/fujitatomoya,time_until_next_call returns max if timer is canceled.,2,[],https://github.com/ros2/rclpy/pull/910,https://github.com/fujitatomoya,5,https://github.com/ros2/rclpy/pull/910#issuecomment-1064435231,"aligned with ros2/rcl#963 and ros2/rclcpp#1893
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com",@sloretz @ivanpauno friendly ping.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,910,2022-03-08T22:51:50Z,2022-03-11T04:35:42Z,2022-03-11T04:35:43Z,MERGED,True,43,7,3,https://github.com/fujitatomoya,time_until_next_call returns max if timer is canceled.,2,[],https://github.com/ros2/rclpy/pull/910,https://github.com/fujitatomoya,6,https://github.com/ros2/rclpy/pull/910#issuecomment-1064543922,"aligned with ros2/rcl#963 and ros2/rclcpp#1893
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","i do not see failure https://ci.ros2.org/job/ci_linux/16309/console on my local environment, but i think header is missing in hpp file.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,910,2022-03-08T22:51:50Z,2022-03-11T04:35:42Z,2022-03-11T04:35:43Z,MERGED,True,43,7,3,https://github.com/fujitatomoya,time_until_next_call returns max if timer is canceled.,2,[],https://github.com/ros2/rclpy/pull/910,https://github.com/fujitatomoya,7,https://github.com/ros2/rclpy/pull/910#issuecomment-1064556064,"aligned with ros2/rcl#963 and ros2/rclcpp#1893
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,910,2022-03-08T22:51:50Z,2022-03-11T04:35:42Z,2022-03-11T04:35:43Z,MERGED,True,43,7,3,https://github.com/fujitatomoya,time_until_next_call returns max if timer is canceled.,2,[],https://github.com/ros2/rclpy/pull/910,https://github.com/fujitatomoya,8,https://github.com/ros2/rclpy/pull/910#issuecomment-1064763321,"aligned with ros2/rcl#963 and ros2/rclcpp#1893
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com",windows failure is unrelated to this fix.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,913,2022-03-17T17:45:58Z,2022-06-02T13:39:27Z,2022-06-02T13:39:30Z,MERGED,True,17,4,2,https://github.com/apps/mergify,Avoid exception in Node constructor when use override for 'use_sim_time' (backport #896),1,[],https://github.com/ros2/rclpy/pull/913,https://github.com/apps/mergify,1,https://github.com/ros2/rclpy/pull/913,"This is an automatic backport of pull request #896 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","This is an automatic backport of pull request #896 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,913,2022-03-17T17:45:58Z,2022-06-02T13:39:27Z,2022-06-02T13:39:30Z,MERGED,True,17,4,2,https://github.com/apps/mergify,Avoid exception in Node constructor when use override for 'use_sim_time' (backport #896),1,[],https://github.com/ros2/rclpy/pull/913,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/913#issuecomment-1125319091,"This is an automatic backport of pull request #896 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,913,2022-03-17T17:45:58Z,2022-06-02T13:39:27Z,2022-06-02T13:39:30Z,MERGED,True,17,4,2,https://github.com/apps/mergify,Avoid exception in Node constructor when use override for 'use_sim_time' (backport #896),1,[],https://github.com/ros2/rclpy/pull/913,https://github.com/omerts,3,https://github.com/ros2/rclpy/pull/913#issuecomment-1130185105,"This is an automatic backport of pull request #896 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com",Please merge this,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,913,2022-03-17T17:45:58Z,2022-06-02T13:39:27Z,2022-06-02T13:39:30Z,MERGED,True,17,4,2,https://github.com/apps/mergify,Avoid exception in Node constructor when use override for 'use_sim_time' (backport #896),1,[],https://github.com/ros2/rclpy/pull/913,https://github.com/fujitatomoya,4,https://github.com/ros2/rclpy/pull/913#issuecomment-1131914163,"This is an automatic backport of pull request #896 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","DCO addressed, windows unstable, retry CI.

Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,913,2022-03-17T17:45:58Z,2022-06-02T13:39:27Z,2022-06-02T13:39:30Z,MERGED,True,17,4,2,https://github.com/apps/mergify,Avoid exception in Node constructor when use override for 'use_sim_time' (backport #896),1,[],https://github.com/ros2/rclpy/pull/913,https://github.com/clalancette,5,https://github.com/ros2/rclpy/pull/913#issuecomment-1144878699,"This is an automatic backport of pull request #896 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","The failing windows tests don't have to do with this, so I'm going to go ahead and merge this one.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,916,2022-03-24T03:13:37Z,,2022-04-22T13:37:49Z,OPEN,False,21,3,1,https://github.com/apps/mergify,Bugfix/duration to msg precision (backport #876),1,[],https://github.com/ros2/rclpy/pull/916,https://github.com/apps/mergify,1,https://github.com/ros2/rclpy/pull/916,"This is an automatic backport of pull request #876 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","This is an automatic backport of pull request #876 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,916,2022-03-24T03:13:37Z,,2022-04-22T13:37:49Z,OPEN,False,21,3,1,https://github.com/apps/mergify,Bugfix/duration to msg precision (backport #876),1,[],https://github.com/ros2/rclpy/pull/916,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/916#issuecomment-1077029966,"This is an automatic backport of pull request #876 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,916,2022-03-24T03:13:37Z,,2022-04-22T13:37:49Z,OPEN,False,21,3,1,https://github.com/apps/mergify,Bugfix/duration to msg precision (backport #876),1,[],https://github.com/ros2/rclpy/pull/916,https://github.com/sloretz,3,https://github.com/ros2/rclpy/pull/916#issuecomment-1078516661,"This is an automatic backport of pull request #876 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com",Re-run windows since it looks like an infrastructure failure:,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,917,2022-03-24T03:13:41Z,,2022-04-22T13:37:37Z,OPEN,False,21,3,1,https://github.com/apps/mergify,Bugfix/duration to msg precision (backport #876),1,[],https://github.com/ros2/rclpy/pull/917,https://github.com/apps/mergify,1,https://github.com/ros2/rclpy/pull/917,"This is an automatic backport of pull request #876 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","This is an automatic backport of pull request #876 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,917,2022-03-24T03:13:41Z,,2022-04-22T13:37:37Z,OPEN,False,21,3,1,https://github.com/apps/mergify,Bugfix/duration to msg precision (backport #876),1,[],https://github.com/ros2/rclpy/pull/917,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/917#issuecomment-1077027820,"This is an automatic backport of pull request #876 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,918,2022-03-28T18:23:21Z,,2022-04-22T13:35:57Z,OPEN,False,8,9,3,https://github.com/fujitatomoya,use uint64_t for timer period.,1,[],https://github.com/ros2/rclpy/pull/918,https://github.com/fujitatomoya,1,https://github.com/ros2/rclpy/pull/918,"address ros2/rcl#967
depends on ros2/rcl#974
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","address ros2/rcl#967
depends on ros2/rcl#974
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,918,2022-03-28T18:23:21Z,,2022-04-22T13:35:57Z,OPEN,False,8,9,3,https://github.com/fujitatomoya,use uint64_t for timer period.,1,[],https://github.com/ros2/rclpy/pull/918,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/918#issuecomment-1080993346,"address ros2/rcl#967
depends on ros2/rcl#974
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com",@sloretz can you take a look if you have time?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,918,2022-03-28T18:23:21Z,,2022-04-22T13:35:57Z,OPEN,False,8,9,3,https://github.com/fujitatomoya,use uint64_t for timer period.,1,[],https://github.com/ros2/rclpy/pull/918,https://github.com/fujitatomoya,3,https://github.com/ros2/rclpy/pull/918#issuecomment-1081000103,"address ros2/rcl#967
depends on ros2/rcl#974
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,919,2022-03-30T13:36:27Z,,2022-06-03T13:06:31Z,OPEN,False,248,77,8,https://github.com/hliberacki,Update spin_until_complete,3,[],https://github.com/ros2/rclpy/pull/919,https://github.com/hliberacki,1,https://github.com/ros2/rclpy/pull/919,"Due to changes in rclcpp replace spin_until_future_complete with spin_until_complete, add spin.

Deprecate spin_until_future_complete
Add spin_until_complete
Add spin_for method
Udpdate unit tests

Signed-off-by: Hubert Liberacki hliberacki@gmail.com","Due to changes in rclcpp replace spin_until_future_complete with spin_until_complete, add spin.

Deprecate spin_until_future_complete
Add spin_until_complete
Add spin_for method
Udpdate unit tests

Signed-off-by: Hubert Liberacki hliberacki@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,919,2022-03-30T13:36:27Z,,2022-06-03T13:06:31Z,OPEN,False,248,77,8,https://github.com/hliberacki,Update spin_until_complete,3,[],https://github.com/ros2/rclpy/pull/919,https://github.com/hliberacki,2,https://github.com/ros2/rclpy/pull/919#issuecomment-1083151574,"Due to changes in rclcpp replace spin_until_future_complete with spin_until_complete, add spin.

Deprecate spin_until_future_complete
Add spin_until_complete
Add spin_for method
Udpdate unit tests

Signed-off-by: Hubert Liberacki hliberacki@gmail.com","Due to changes in rclcpp I've pushed a PR updating pythong side as well.
PR in rclcpp - ros2/rclcpp#1874",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,919,2022-03-30T13:36:27Z,,2022-06-03T13:06:31Z,OPEN,False,248,77,8,https://github.com/hliberacki,Update spin_until_complete,3,[],https://github.com/ros2/rclpy/pull/919,https://github.com/hliberacki,3,https://github.com/ros2/rclpy/pull/919#issuecomment-1087531619,"Due to changes in rclcpp replace spin_until_future_complete with spin_until_complete, add spin.

Deprecate spin_until_future_complete
Add spin_until_complete
Add spin_for method
Udpdate unit tests

Signed-off-by: Hubert Liberacki hliberacki@gmail.com",ros2/rclcpp#1874 (comment) Passing CI with all related PRs linked and build together.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,922,2022-04-08T21:03:45Z,2022-04-26T19:04:47Z,2022-04-26T19:04:50Z,MERGED,True,79,13,4,https://github.com/ivanpauno,Allow to create a subscription with a callback that also receives the message info,6,['enhancement'],https://github.com/ros2/rclpy/pull/922,https://github.com/ivanpauno,1,https://github.com/ros2/rclpy/pull/922,"The cpp Subscription.take_message() was also updated to include reception_sequence_number/publication_sequence_number in the message info.
This should be merged AFTER the API freeze ends.","The cpp Subscription.take_message() was also updated to include reception_sequence_number/publication_sequence_number in the message info.
This should be merged AFTER the API freeze ends.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,922,2022-04-08T21:03:45Z,2022-04-26T19:04:47Z,2022-04-26T19:04:50Z,MERGED,True,79,13,4,https://github.com/ivanpauno,Allow to create a subscription with a callback that also receives the message info,6,['enhancement'],https://github.com/ros2/rclpy/pull/922,https://github.com/ivanpauno,2,https://github.com/ros2/rclpy/pull/922#issuecomment-1101791535,"The cpp Subscription.take_message() was also updated to include reception_sequence_number/publication_sequence_number in the message info.
This should be merged AFTER the API freeze ends.","Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,922,2022-04-08T21:03:45Z,2022-04-26T19:04:47Z,2022-04-26T19:04:50Z,MERGED,True,79,13,4,https://github.com/ivanpauno,Allow to create a subscription with a callback that also receives the message info,6,['enhancement'],https://github.com/ros2/rclpy/pull/922,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/922#issuecomment-1110148956,"The cpp Subscription.take_message() was also updated to include reception_sequence_number/publication_sequence_number in the message info.
This should be merged AFTER the API freeze ends.","Humble was already branched off, so merging!",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,924,2022-04-13T11:00:15Z,2022-04-13T11:03:12Z,2022-04-13T11:03:12Z,CLOSED,False,3,0,1,https://github.com/roeyperfetto,Update MultiThreadExecutor to catch exceptions,1,[],https://github.com/ros2/rclpy/pull/924,https://github.com/roeyperfetto,1,https://github.com/ros2/rclpy/pull/924,Currently if one uses MultiThreadExecutor the exceptions raised when spinning are not caught by the executor and thus errors are not properly raised,Currently if one uses MultiThreadExecutor the exceptions raised when spinning are not caught by the executor and thus errors are not properly raised,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,925,2022-04-13T11:07:08Z,2022-04-13T11:08:31Z,2022-04-13T11:08:31Z,CLOSED,False,2,0,1,https://github.com/roeyperfetto,Update MultiThreadExecutor to catch exceptions,1,[],https://github.com/ros2/rclpy/pull/925,https://github.com/roeyperfetto,1,https://github.com/ros2/rclpy/pull/925,"Currently if one uses MultiThreadExecutor the exceptions raised when spinning are not caught by the executor and thus errors are not properly raised
Signed-off-by: Roey Perfetto roey.w.perfetto@gmail.com","Currently if one uses MultiThreadExecutor the exceptions raised when spinning are not caught by the executor and thus errors are not properly raised
Signed-off-by: Roey Perfetto roey.w.perfetto@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,926,2022-04-13T11:12:59Z,2022-04-13T11:20:29Z,2022-04-13T11:20:29Z,CLOSED,False,2,0,1,https://github.com/roeyperfetto,Update MultiThreadExecutor to catch exceptions,1,[],https://github.com/ros2/rclpy/pull/926,https://github.com/roeyperfetto,1,https://github.com/ros2/rclpy/pull/926,"Currently if one uses MultiThreadExecutor the exceptions raised when spinning are not caught by the executor and thus errors are not properly raised
Signed-off-by: Roey Perfetto roey.w.perfetto@gmail.com","Currently if one uses MultiThreadExecutor the exceptions raised when spinning are not caught by the executor and thus errors are not properly raised
Signed-off-by: Roey Perfetto roey.w.perfetto@gmail.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,927,2022-04-15T06:02:23Z,2022-04-28T16:10:30Z,2022-04-28T16:17:50Z,MERGED,True,42,7,2,https://github.com/fujitatomoya,remove feedback callback when the goal has been completed.,4,[],https://github.com/ros2/rclpy/pull/927,https://github.com/fujitatomoya,1,https://github.com/ros2/rclpy/pull/927,"address #921
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","address #921
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,927,2022-04-15T06:02:23Z,2022-04-28T16:10:30Z,2022-04-28T16:17:50Z,MERGED,True,42,7,2,https://github.com/fujitatomoya,remove feedback callback when the goal has been completed.,4,[],https://github.com/ros2/rclpy/pull/927,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/927#issuecomment-1099880139,"address #921
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com",@sloretz @ivanpauno any thoughts?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,927,2022-04-15T06:02:23Z,2022-04-28T16:10:30Z,2022-04-28T16:17:50Z,MERGED,True,42,7,2,https://github.com/fujitatomoya,remove feedback callback when the goal has been completed.,4,[],https://github.com/ros2/rclpy/pull/927,https://github.com/jacobperron,3,https://github.com/ros2/rclpy/pull/927#issuecomment-1108801919,"address #921
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","Maybe we should prune any callbacks in this case instead:

  
    
      rclpy/rclpy/rclpy/action/client.py
    
    
        Lines 340 to 344
      in
      f1f40d6
    
  
  
    

        
          
           # Remove ""done"" goals from the list 
        

        
          
           if (GoalStatus.STATUS_SUCCEEDED == status or 
        

        
          
                   GoalStatus.STATUS_CANCELED == status or 
        

        
          
                   GoalStatus.STATUS_ABORTED == status): 
        

        
          
               del self._goal_handles[goal_uuid]",True,{'THUMBS_UP': ['https://github.com/ivanpauno']}
ros2/rclpy,https://github.com/ros2/rclpy,927,2022-04-15T06:02:23Z,2022-04-28T16:10:30Z,2022-04-28T16:17:50Z,MERGED,True,42,7,2,https://github.com/fujitatomoya,remove feedback callback when the goal has been completed.,4,[],https://github.com/ros2/rclpy/pull/927,https://github.com/jacobperron,4,https://github.com/ros2/rclpy/pull/927#issuecomment-1109021420,"address #921
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","I think the proposed changes are okay, but I guess the _feedback_callbacks list can still grow indefinitely if the user doesn't request the result.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,927,2022-04-15T06:02:23Z,2022-04-28T16:10:30Z,2022-04-28T16:17:50Z,MERGED,True,42,7,2,https://github.com/fujitatomoya,remove feedback callback when the goal has been completed.,4,[],https://github.com/ros2/rclpy/pull/927,https://github.com/fujitatomoya,5,https://github.com/ros2/rclpy/pull/927#issuecomment-1109071328,"address #921
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","I think the proposed changes are okay, but I guess the _feedback_callbacks list can still grow indefinitely if the user doesn't request the result.

true, but i tried to align this with rclcpp behavior. #927 (comment) makes sense to me but this is a bit different from rclcpp behavior commented on #927 (comment)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,927,2022-04-15T06:02:23Z,2022-04-28T16:10:30Z,2022-04-28T16:17:50Z,MERGED,True,42,7,2,https://github.com/fujitatomoya,remove feedback callback when the goal has been completed.,4,[],https://github.com/ros2/rclpy/pull/927,https://github.com/fujitatomoya,6,https://github.com/ros2/rclpy/pull/927#issuecomment-1110320096,"address #921
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,927,2022-04-15T06:02:23Z,2022-04-28T16:10:30Z,2022-04-28T16:17:50Z,MERGED,True,42,7,2,https://github.com/fujitatomoya,remove feedback callback when the goal has been completed.,4,[],https://github.com/ros2/rclpy/pull/927,https://github.com/fujitatomoya,7,https://github.com/ros2/rclpy/pull/927#issuecomment-1111303880,"address #921
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","windows meet many errors which are unrelated to action.
CI: (retry)

Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,927,2022-04-15T06:02:23Z,2022-04-28T16:10:30Z,2022-04-28T16:17:50Z,MERGED,True,42,7,2,https://github.com/fujitatomoya,remove feedback callback when the goal has been completed.,4,[],https://github.com/ros2/rclpy/pull/927,https://github.com/fujitatomoya,8,https://github.com/ros2/rclpy/pull/927#issuecomment-1112401495,"address #921
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com",@Mergifyio backport humble galactic foxy,True,{'THUMBS_UP': ['https://github.com/mergify%5Bbot%5D']}
ros2/rclpy,https://github.com/ros2/rclpy,927,2022-04-15T06:02:23Z,2022-04-28T16:10:30Z,2022-04-28T16:17:50Z,MERGED,True,42,7,2,https://github.com/fujitatomoya,remove feedback callback when the goal has been completed.,4,[],https://github.com/ros2/rclpy/pull/927,https://github.com/apps/mergify,9,https://github.com/ros2/rclpy/pull/927#issuecomment-1112402687,"address #921
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","backport humble galactic foxy

✅ Backports have been created


#931 remove feedback callback when the goal has been completed. (backport #927) has been created for branch humble
#932 remove feedback callback when the goal has been completed. (backport #927) has been created for branch galactic
#933 remove feedback callback when the goal has been completed. (backport #927) has been created for branch foxy",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,928,2022-04-19T22:36:05Z,2022-05-03T17:35:26Z,2022-05-03T17:35:28Z,MERGED,True,31,0,3,https://github.com/jacobperron,Expose 'best available' QoS policies,3,[],https://github.com/ros2/rclpy/pull/928,https://github.com/jacobperron,1,https://github.com/ros2/rclpy/pull/928,"If users set certain a QoS policy to 'best available', then the middleware will query the graph
for endpoint info before creating a subscription or publisher.
A QoS policy will be selected such that is matches the majority of endpoints while maintaining
the highest level of service possible.
Connects to ros2/rmw#320","If users set certain a QoS policy to 'best available', then the middleware will query the graph
for endpoint info before creating a subscription or publisher.
A QoS policy will be selected such that is matches the majority of endpoints while maintaining
the highest level of service possible.
Connects to ros2/rmw#320",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,930,2022-04-27T19:42:03Z,,2022-06-01T20:36:10Z,OPEN,False,39,14,3,https://github.com/gonzodepedro,Adds wait_for_node,3,[],https://github.com/ros2/rclpy/pull/930,https://github.com/gonzodepedro,1,https://github.com/ros2/rclpy/pull/930,"Related #823
Signed-off-by: Gonzalo de Pedro gonzalo@depedro.com.ar","Related #823
Signed-off-by: Gonzalo de Pedro gonzalo@depedro.com.ar",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,931,2022-04-28T16:17:38Z,2022-04-29T22:28:49Z,2022-04-29T22:28:51Z,MERGED,True,42,7,2,https://github.com/apps/mergify,remove feedback callback when the goal has been completed. (backport #927),1,[],https://github.com/ros2/rclpy/pull/931,https://github.com/apps/mergify,1,https://github.com/ros2/rclpy/pull/931,"This is an automatic backport of pull request #927 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","This is an automatic backport of pull request #927 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,931,2022-04-28T16:17:38Z,2022-04-29T22:28:49Z,2022-04-29T22:28:51Z,MERGED,True,42,7,2,https://github.com/apps/mergify,remove feedback callback when the goal has been completed. (backport #927),1,[],https://github.com/ros2/rclpy/pull/931,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/931#issuecomment-1112430166,"This is an automatic backport of pull request #927 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,931,2022-04-28T16:17:38Z,2022-04-29T22:28:49Z,2022-04-29T22:28:51Z,MERGED,True,42,7,2,https://github.com/apps/mergify,remove feedback callback when the goal has been completed. (backport #927),1,[],https://github.com/ros2/rclpy/pull/931,https://github.com/ivanpauno,3,https://github.com/ros2/rclpy/pull/931#issuecomment-1112603642,"This is an automatic backport of pull request #927 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com",@fujitatomoya could you check CI failures?,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,931,2022-04-28T16:17:38Z,2022-04-29T22:28:49Z,2022-04-29T22:28:51Z,MERGED,True,42,7,2,https://github.com/apps/mergify,remove feedback callback when the goal has been completed. (backport #927),1,[],https://github.com/ros2/rclpy/pull/931,https://github.com/fujitatomoya,4,https://github.com/ros2/rclpy/pull/931#issuecomment-1112673672,"This is an automatic backport of pull request #927 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","I am not sure what heppened, rqt_gui failed to build.
--- stderr: rqt_gui
09:50:13 CMake Error at CMakeLists.txt:4 (find_package):
09:50:13   By not providing ""Findcatkin.cmake"" in CMAKE_MODULE_PATH this project has
09:50:13   asked CMake to find a package configuration file provided by ""catkin"", but
09:50:13   CMake did not find one.
09:50:13 
09:50:13   Could not find a package configuration file provided by ""catkin"" with any
09:50:13   of the following names:
09:50:13 
09:50:13     catkinConfig.cmake
09:50:13     catkin-config.cmake
09:50:13 
09:50:13   Add the installation prefix of ""catkin"" to CMAKE_PREFIX_PATH or set
09:50:13   ""catkin_DIR"" to a directory containing one of the above files.  If ""catkin""
09:50:13   provides a separate development package or SDK, be sure it has been
09:50:13   installed.
09:50:13 
09:50:13 
09:50:13 ---",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,931,2022-04-28T16:17:38Z,2022-04-29T22:28:49Z,2022-04-29T22:28:51Z,MERGED,True,42,7,2,https://github.com/apps/mergify,remove feedback callback when the goal has been completed. (backport #927),1,[],https://github.com/ros2/rclpy/pull/931,https://github.com/fujitatomoya,5,https://github.com/ros2/rclpy/pull/931#issuecomment-1112675809,"This is an automatic backport of pull request #927 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","CI(retry):

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,931,2022-04-28T16:17:38Z,2022-04-29T22:28:49Z,2022-04-29T22:28:51Z,MERGED,True,42,7,2,https://github.com/apps/mergify,remove feedback callback when the goal has been completed. (backport #927),1,[],https://github.com/ros2/rclpy/pull/931,https://github.com/ivanpauno,6,https://github.com/ros2/rclpy/pull/931#issuecomment-1113281343,"This is an automatic backport of pull request #927 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","The humble branch of the rqt repo is based on kinetic-devel, I guess that was an accident.
There's also a humble-devel branch in that repo, same problem.
I will double check what happened.
For the moment, I think you can either use the ros2 branch of that repo or skip testing rqt completely.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,931,2022-04-28T16:17:38Z,2022-04-29T22:28:49Z,2022-04-29T22:28:51Z,MERGED,True,42,7,2,https://github.com/apps/mergify,remove feedback callback when the goal has been completed. (backport #927),1,[],https://github.com/ros2/rclpy/pull/931,https://github.com/clalancette,7,https://github.com/ros2/rclpy/pull/931#issuecomment-1113328607,"This is an automatic backport of pull request #927 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","For the moment, I think you can either use the ros2 branch of that repo or skip testing rqt completely.

Yeah, sorry about that.  I've now deleted and recreated the humble branch of that repository from the correct place.  It should work fine now.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,931,2022-04-28T16:17:38Z,2022-04-29T22:28:49Z,2022-04-29T22:28:51Z,MERGED,True,42,7,2,https://github.com/apps/mergify,remove feedback callback when the goal has been completed. (backport #927),1,[],https://github.com/ros2/rclpy/pull/931,https://github.com/ivanpauno,8,https://github.com/ros2/rclpy/pull/931#issuecomment-1113541581,"This is an automatic backport of pull request #927 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,932,2022-04-28T16:17:44Z,,2022-05-19T14:59:50Z,OPEN,False,42,7,2,https://github.com/apps/mergify,remove feedback callback when the goal has been completed. (backport #927),1,[],https://github.com/ros2/rclpy/pull/932,https://github.com/apps/mergify,1,https://github.com/ros2/rclpy/pull/932,"This is an automatic backport of pull request #927 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","This is an automatic backport of pull request #927 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,932,2022-04-28T16:17:44Z,,2022-05-19T14:59:50Z,OPEN,False,42,7,2,https://github.com/apps/mergify,remove feedback callback when the goal has been completed. (backport #927),1,[],https://github.com/ros2/rclpy/pull/932,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/932#issuecomment-1112427838,"This is an automatic backport of pull request #927 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,932,2022-04-28T16:17:44Z,,2022-05-19T14:59:50Z,OPEN,False,42,7,2,https://github.com/apps/mergify,remove feedback callback when the goal has been completed. (backport #927),1,[],https://github.com/ros2/rclpy/pull/932,https://github.com/fujitatomoya,3,https://github.com/ros2/rclpy/pull/932#issuecomment-1113710523,"This is an automatic backport of pull request #927 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","windows failure seems unrelated, retry.

Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,932,2022-04-28T16:17:44Z,,2022-05-19T14:59:50Z,OPEN,False,42,7,2,https://github.com/apps/mergify,remove feedback callback when the goal has been completed. (backport #927),1,[],https://github.com/ros2/rclpy/pull/932,https://github.com/fujitatomoya,4,https://github.com/ros2/rclpy/pull/932#issuecomment-1131838688,"This is an automatic backport of pull request #927 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","windows build unstable, retry.

Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,933,2022-04-28T16:17:49Z,,2022-05-19T15:02:57Z,OPEN,False,42,7,2,https://github.com/apps/mergify,remove feedback callback when the goal has been completed. (backport #927),1,[],https://github.com/ros2/rclpy/pull/933,https://github.com/apps/mergify,1,https://github.com/ros2/rclpy/pull/933,"This is an automatic backport of pull request #927 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","This is an automatic backport of pull request #927 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,933,2022-04-28T16:17:49Z,,2022-05-19T15:02:57Z,OPEN,False,42,7,2,https://github.com/apps/mergify,remove feedback callback when the goal has been completed. (backport #927),1,[],https://github.com/ros2/rclpy/pull/933,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/933#issuecomment-1112423096,"This is an automatic backport of pull request #927 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,933,2022-04-28T16:17:49Z,,2022-05-19T15:02:57Z,OPEN,False,42,7,2,https://github.com/apps/mergify,remove feedback callback when the goal has been completed. (backport #927),1,[],https://github.com/ros2/rclpy/pull/933,https://github.com/fujitatomoya,3,https://github.com/ros2/rclpy/pull/933#issuecomment-1113711184,"This is an automatic backport of pull request #927 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","windows failure seems unrelated, retry.

Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,933,2022-04-28T16:17:49Z,,2022-05-19T15:02:57Z,OPEN,False,42,7,2,https://github.com/apps/mergify,remove feedback callback when the goal has been completed. (backport #927),1,[],https://github.com/ros2/rclpy/pull/933,https://github.com/fujitatomoya,4,https://github.com/ros2/rclpy/pull/933#issuecomment-1131842202,"This is an automatic backport of pull request #927 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","windows unstable, there are many unrelated warnings and errors.

Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,935,2022-05-02T15:01:33Z,2022-05-03T19:19:01Z,2022-05-03T19:19:05Z,MERGED,True,4,6,2,https://github.com/IshitaTakeshi,Avoid causing infinite loop when message is empty,4,"['bug', 'tests']",https://github.com/ros2/rclpy/pull/935,https://github.com/IshitaTakeshi,1,https://github.com/ros2/rclpy/pull/935,Fix #934,Fix #934,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,935,2022-05-02T15:01:33Z,2022-05-03T19:19:01Z,2022-05-03T19:19:05Z,MERGED,True,4,6,2,https://github.com/IshitaTakeshi,Avoid causing infinite loop when message is empty,4,"['bug', 'tests']",https://github.com/ros2/rclpy/pull/935,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/935#issuecomment-1116145944,Fix #934,@IshitaTakeshi could you also fix #935 (review)? this causes the same infinite loop.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,935,2022-05-02T15:01:33Z,2022-05-03T19:19:01Z,2022-05-03T19:19:05Z,MERGED,True,4,6,2,https://github.com/IshitaTakeshi,Avoid causing infinite loop when message is empty,4,"['bug', 'tests']",https://github.com/ros2/rclpy/pull/935,https://github.com/fujitatomoya,3,https://github.com/ros2/rclpy/pull/935#issuecomment-1116242452,Fix #934,"CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,935,2022-05-02T15:01:33Z,2022-05-03T19:19:01Z,2022-05-03T19:19:05Z,MERGED,True,4,6,2,https://github.com/IshitaTakeshi,Avoid causing infinite loop when message is empty,4,"['bug', 'tests']",https://github.com/ros2/rclpy/pull/935,https://github.com/jacobperron,4,https://github.com/ros2/rclpy/pull/935#issuecomment-1116472006,Fix #934,Thanks for the fix!,True,{'THUMBS_UP': ['https://github.com/IshitaTakeshi']}
ros2/rclpy,https://github.com/ros2/rclpy,939,2022-05-05T17:00:53Z,2022-05-13T18:34:55Z,2022-05-13T18:37:02Z,MERGED,True,8,3,1,https://github.com/fujitatomoya,check if the context is already shutdown.,3,[],https://github.com/ros2/rclpy/pull/939,https://github.com/fujitatomoya,1,https://github.com/ros2/rclpy/pull/939,"address #937
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","address #937
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,939,2022-05-05T17:00:53Z,2022-05-13T18:34:55Z,2022-05-13T18:37:02Z,MERGED,True,8,3,1,https://github.com/fujitatomoya,check if the context is already shutdown.,3,[],https://github.com/ros2/rclpy/pull/939,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/939#issuecomment-1119044291,"address #937
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","yeah, i am open to ideas, that would be appreciated! (btw, this fix is aligned with rclcpp, which checks the context is still valid via is_valid method right before shutdown.)",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,939,2022-05-05T17:00:53Z,2022-05-13T18:34:55Z,2022-05-13T18:37:02Z,MERGED,True,8,3,1,https://github.com/fujitatomoya,check if the context is already shutdown.,3,[],https://github.com/ros2/rclpy/pull/939,https://github.com/fujitatomoya,3,https://github.com/ros2/rclpy/pull/939#issuecomment-1120086667,"address #937
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,939,2022-05-05T17:00:53Z,2022-05-13T18:34:55Z,2022-05-13T18:37:02Z,MERGED,True,8,3,1,https://github.com/fujitatomoya,check if the context is already shutdown.,3,[],https://github.com/ros2/rclpy/pull/939,https://github.com/fujitatomoya,4,https://github.com/ros2/rclpy/pull/939#issuecomment-1124401783,"address #937
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com",@sloretz friendly ping.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,939,2022-05-05T17:00:53Z,2022-05-13T18:34:55Z,2022-05-13T18:37:02Z,MERGED,True,8,3,1,https://github.com/fujitatomoya,check if the context is already shutdown.,3,[],https://github.com/ros2/rclpy/pull/939,https://github.com/fujitatomoya,5,https://github.com/ros2/rclpy/pull/939#issuecomment-1125464221,"address #937
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,939,2022-05-05T17:00:53Z,2022-05-13T18:34:55Z,2022-05-13T18:37:02Z,MERGED,True,8,3,1,https://github.com/fujitatomoya,check if the context is already shutdown.,3,[],https://github.com/ros2/rclpy/pull/939,https://github.com/fujitatomoya,6,https://github.com/ros2/rclpy/pull/939#issuecomment-1125464359,"address #937
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com",@sloretz requesting review again.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,939,2022-05-05T17:00:53Z,2022-05-13T18:34:55Z,2022-05-13T18:37:02Z,MERGED,True,8,3,1,https://github.com/fujitatomoya,check if the context is already shutdown.,3,[],https://github.com/ros2/rclpy/pull/939,https://github.com/fujitatomoya,7,https://github.com/ros2/rclpy/pull/939#issuecomment-1126275292,"address #937
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,939,2022-05-05T17:00:53Z,2022-05-13T18:34:55Z,2022-05-13T18:37:02Z,MERGED,True,8,3,1,https://github.com/fujitatomoya,check if the context is already shutdown.,3,[],https://github.com/ros2/rclpy/pull/939,https://github.com/fujitatomoya,8,https://github.com/ros2/rclpy/pull/939#issuecomment-1126275655,"address #937
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","@sloretz thanks for the review, i have addressed your comments.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,939,2022-05-05T17:00:53Z,2022-05-13T18:34:55Z,2022-05-13T18:37:02Z,MERGED,True,8,3,1,https://github.com/fujitatomoya,check if the context is already shutdown.,3,[],https://github.com/ros2/rclpy/pull/939,https://github.com/fujitatomoya,9,https://github.com/ros2/rclpy/pull/939#issuecomment-1126339575,"address #937
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com",@Mergifyio backport humble,True,{'THUMBS_UP': ['https://github.com/mergify%5Bbot%5D']}
ros2/rclpy,https://github.com/ros2/rclpy,939,2022-05-05T17:00:53Z,2022-05-13T18:34:55Z,2022-05-13T18:37:02Z,MERGED,True,8,3,1,https://github.com/fujitatomoya,check if the context is already shutdown.,3,[],https://github.com/ros2/rclpy/pull/939,https://github.com/apps/mergify,10,https://github.com/ros2/rclpy/pull/939#issuecomment-1126339995,"address #937
Signed-off-by: Tomoya Fujita Tomoya.Fujita@sony.com","backport humble

✅ Backports have been created


#943 check if the context is already shutdown. (backport #939) has been created for branch humble",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,943,2022-05-13T18:37:00Z,2022-05-14T19:53:29Z,2022-05-14T19:53:31Z,MERGED,True,8,3,1,https://github.com/apps/mergify,check if the context is already shutdown. (backport #939),1,[],https://github.com/ros2/rclpy/pull/943,https://github.com/apps/mergify,1,https://github.com/ros2/rclpy/pull/943,"This is an automatic backport of pull request #939 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","This is an automatic backport of pull request #939 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,943,2022-05-13T18:37:00Z,2022-05-14T19:53:29Z,2022-05-14T19:53:31Z,MERGED,True,8,3,1,https://github.com/apps/mergify,check if the context is already shutdown. (backport #939),1,[],https://github.com/ros2/rclpy/pull/943,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/943#issuecomment-1126343122,"This is an automatic backport of pull request #939 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,943,2022-05-13T18:37:00Z,2022-05-14T19:53:29Z,2022-05-14T19:53:31Z,MERGED,True,8,3,1,https://github.com/apps/mergify,check if the context is already shutdown. (backport #939),1,[],https://github.com/ros2/rclpy/pull/943,https://github.com/fujitatomoya,3,https://github.com/ros2/rclpy/pull/943#issuecomment-1126418524,"This is an automatic backport of pull request #939 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","CI Linux-aarch64 is unstable, retry.

Linux-aarch64",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,943,2022-05-13T18:37:00Z,2022-05-14T19:53:29Z,2022-05-14T19:53:31Z,MERGED,True,8,3,1,https://github.com/apps/mergify,check if the context is already shutdown. (backport #939),1,[],https://github.com/ros2/rclpy/pull/943,https://github.com/fujitatomoya,4,https://github.com/ros2/rclpy/pull/943#issuecomment-1126453811,"This is an automatic backport of pull request #939 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com",@clalancette we've been having unstable issue for CI Linux-aarch64? it seems that docker build fails.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,943,2022-05-13T18:37:00Z,2022-05-14T19:53:29Z,2022-05-14T19:53:31Z,MERGED,True,8,3,1,https://github.com/apps/mergify,check if the context is already shutdown. (backport #939),1,[],https://github.com/ros2/rclpy/pull/943,https://github.com/clalancette,5,https://github.com/ros2/rclpy/pull/943#issuecomment-1126459251,"This is an automatic backport of pull request #939 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","@clalancette we've been having unstable issue for CI Linux-aarch64? it seems that docker build fails.

Hm, no, that is new.  Will take a look.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,943,2022-05-13T18:37:00Z,2022-05-14T19:53:29Z,2022-05-14T19:53:31Z,MERGED,True,8,3,1,https://github.com/apps/mergify,check if the context is already shutdown. (backport #939),1,[],https://github.com/ros2/rclpy/pull/943,https://github.com/clalancette,6,https://github.com/ros2/rclpy/pull/943#issuecomment-1126714152,"This is an automatic backport of pull request #939 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","Hm, no, that is new. Will take a look.

And this should be fixed now, thanks for the report.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,943,2022-05-13T18:37:00Z,2022-05-14T19:53:29Z,2022-05-14T19:53:31Z,MERGED,True,8,3,1,https://github.com/apps/mergify,check if the context is already shutdown. (backport #939),1,[],https://github.com/ros2/rclpy/pull/943,https://github.com/fujitatomoya,7,https://github.com/ros2/rclpy/pull/943#issuecomment-1126772148,"This is an automatic backport of pull request #939 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com",@clalancette thanks! i will retry the aarch64 CI.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,943,2022-05-13T18:37:00Z,2022-05-14T19:53:29Z,2022-05-14T19:53:31Z,MERGED,True,8,3,1,https://github.com/apps/mergify,check if the context is already shutdown. (backport #939),1,[],https://github.com/ros2/rclpy/pull/943,https://github.com/fujitatomoya,8,https://github.com/ros2/rclpy/pull/943#issuecomment-1126772221,"This is an automatic backport of pull request #939 done by Mergify.


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com","CI:

Linux-aarch64",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,945,2022-05-25T00:18:39Z,,2022-06-03T23:33:59Z,OPEN,False,609,3,6,https://github.com/ihasdapie,implement parameter_client,20,[],https://github.com/ros2/rclpy/pull/945,https://github.com/ihasdapie,1,https://github.com/ros2/rclpy/pull/945,"This PR ports the rclcpp parameter_client to rclpy and also moves some functionality out of ros2param into rclpy. Related changes in ros2param can be found in ros2/ros2cli#716
I'd like some review on the proposed architecture & implementation before I clean things up and write tests etc.","This PR ports the rclcpp parameter_client to rclpy and also moves some functionality out of ros2param into rclpy. Related changes in ros2param can be found in ros2/ros2cli#716
I'd like some review on the proposed architecture & implementation before I clean things up and write tests etc.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,945,2022-05-25T00:18:39Z,,2022-06-03T23:33:59Z,OPEN,False,609,3,6,https://github.com/ihasdapie,implement parameter_client,20,[],https://github.com/ros2/rclpy/pull/945,https://github.com/ihasdapie,2,https://github.com/ros2/rclpy/pull/945#issuecomment-1136559252,"This PR ports the rclcpp parameter_client to rclpy and also moves some functionality out of ros2param into rclpy. Related changes in ros2param can be found in ros2/ros2cli#716
I'd like some review on the proposed architecture & implementation before I clean things up and write tests etc.","Just a sanity check:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,945,2022-05-25T00:18:39Z,,2022-06-03T23:33:59Z,OPEN,False,609,3,6,https://github.com/ihasdapie,implement parameter_client,20,[],https://github.com/ros2/rclpy/pull/945,https://github.com/ihasdapie,3,https://github.com/ros2/rclpy/pull/945#issuecomment-1144231099,"This PR ports the rclcpp parameter_client to rclpy and also moves some functionality out of ros2param into rclpy. Related changes in ros2param can be found in ros2/ros2cli#716
I'd like some review on the proposed architecture & implementation before I clean things up and write tests etc.","ci jobs for this PR and related PR ros2/ros2cli#716

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,945,2022-05-25T00:18:39Z,,2022-06-03T23:33:59Z,OPEN,False,609,3,6,https://github.com/ihasdapie,implement parameter_client,20,[],https://github.com/ros2/rclpy/pull/945,https://github.com/ihasdapie,4,https://github.com/ros2/rclpy/pull/945#issuecomment-1146422102,"This PR ports the rclcpp parameter_client to rclpy and also moves some functionality out of ros2param into rclpy. Related changes in ros2param can be found in ros2/ros2cli#716
I'd like some review on the proposed architecture & implementation before I clean things up and write tests etc.",Yup I'll submit something to the demos package as well,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,945,2022-05-25T00:18:39Z,,2022-06-03T23:33:59Z,OPEN,False,609,3,6,https://github.com/ihasdapie,implement parameter_client,20,[],https://github.com/ros2/rclpy/pull/945,https://github.com/ihasdapie,5,https://github.com/ros2/rclpy/pull/945#issuecomment-1146424998,"This PR ports the rclcpp parameter_client to rclpy and also moves some functionality out of ros2param into rclpy. Related changes in ros2param can be found in ros2/ros2cli#716
I'd like some review on the proposed architecture & implementation before I clean things up and write tests etc.","Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,946,2022-05-26T17:45:04Z,2022-05-31T15:06:36Z,2022-06-02T15:53:45Z,MERGED,True,0,0,1,https://github.com/bonprosoft,Add py.typed to package,1,[],https://github.com/ros2/rclpy/pull/946,https://github.com/bonprosoft,1,https://github.com/ros2/rclpy/pull/946,"I added py.typed file to mark the package PEP561-compatible.
This would be helpful for static type checkers.
Closes #936
cc: @adityapande-1995
Signed-off-by: Yuki Igarashi me@bonprosoft.com","I added py.typed file to mark the package PEP561-compatible.
This would be helpful for static type checkers.
Closes #936
cc: @adityapande-1995
Signed-off-by: Yuki Igarashi me@bonprosoft.com",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,946,2022-05-26T17:45:04Z,2022-05-31T15:06:36Z,2022-06-02T15:53:45Z,MERGED,True,0,0,1,https://github.com/bonprosoft,Add py.typed to package,1,[],https://github.com/ros2/rclpy/pull/946,https://github.com/bonprosoft,2,https://github.com/ros2/rclpy/pull/946#issuecomment-1140186552,"I added py.typed file to mark the package PEP561-compatible.
This would be helpful for static type checkers.
Closes #936
cc: @adityapande-1995
Signed-off-by: Yuki Igarashi me@bonprosoft.com","Is there a way we could add a test for this using our CI?

I'm not sure.
Because py.typed is copied into the package dir by ament_cmake_python, I don't think it is reasonable to check if the file is located in the package directory by pytest, which is for testing python modules.
If such test is highly necessary, let me think about the approach 😃",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,946,2022-05-26T17:45:04Z,2022-05-31T15:06:36Z,2022-06-02T15:53:45Z,MERGED,True,0,0,1,https://github.com/bonprosoft,Add py.typed to package,1,[],https://github.com/ros2/rclpy/pull/946,https://github.com/aprotyas,3,https://github.com/ros2/rclpy/pull/946#issuecomment-1140188019,"I added py.typed file to mark the package PEP561-compatible.
This would be helpful for static type checkers.
Closes #936
cc: @adityapande-1995
Signed-off-by: Yuki Igarashi me@bonprosoft.com","Yes, I agree that PEP561 compatibility shouldn't/can't really be tested like the rest of rclpy's test suite.
Regardless, running CI for this change.
Repos file: https://gist.github.com/aprotyas/af5130e8d82be0011957df611898ca7e
Build args: --packages-above-and-dependencies rclpy
Test args: --packages-above rclpy
Job: https://ci.ros2.org/job/ci_launcher/10341/

Linux 
Linux-aarch64 
Windows 

Edit: warnings look unrelated to this patch.",True,"{'HEART': ['https://github.com/bonprosoft'], 'THUMBS_UP': ['https://github.com/adityapande-1995']}"
ros2/rclpy,https://github.com/ros2/rclpy,947,2022-05-27T00:25:34Z,,2022-06-03T23:03:22Z,OPEN,False,32,7,2,https://github.com/ihasdapie,fix rclpy.shutdown() from hanging when triggered from callback,6,[],https://github.com/ros2/rclpy/pull/947,https://github.com/ihasdapie,1,https://github.com/ros2/rclpy/pull/947,"This PR closes #944 by allowing for a executor.shutdown call to happen in a callback.
A caveat of the proposed approach is that this does raise an InvalidHandle but it appears to be harmless and we just catch it. This is what is currently used in rclpy.  Alternatively we could track whether or not if a GuardCondition has been destroyed","This PR closes #944 by allowing for a executor.shutdown call to happen in a callback.
A caveat of the proposed approach is that this does raise an InvalidHandle but it appears to be harmless and we just catch it. This is what is currently used in rclpy.  Alternatively we could track whether or not if a GuardCondition has been destroyed",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,947,2022-05-27T00:25:34Z,,2022-06-03T23:03:22Z,OPEN,False,32,7,2,https://github.com/ihasdapie,fix rclpy.shutdown() from hanging when triggered from callback,6,[],https://github.com/ros2/rclpy/pull/947,https://github.com/ihasdapie,2,https://github.com/ros2/rclpy/pull/947#issuecomment-1139999696,"This PR closes #944 by allowing for a executor.shutdown call to happen in a callback.
A caveat of the proposed approach is that this does raise an InvalidHandle but it appears to be harmless and we just catch it. This is what is currently used in rclpy.  Alternatively we could track whether or not if a GuardCondition has been destroyed",I agree that it would be best to keep the implementation consistent between client libraries. The rclpy Executor.shutdown takes a timeout_sec which defaults to waiting forever. Perhaps we can change the default behavior to immediately shutting down instead? Or just deprecate the option to wait at all -- it'd be good to hear from @sloretz if there's any reason why that would be a bad idea.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,947,2022-05-27T00:25:34Z,,2022-06-03T23:03:22Z,OPEN,False,32,7,2,https://github.com/ihasdapie,fix rclpy.shutdown() from hanging when triggered from callback,6,[],https://github.com/ros2/rclpy/pull/947,https://github.com/wjwwood,3,https://github.com/ros2/rclpy/pull/947#issuecomment-1140130064,"This PR closes #944 by allowing for a executor.shutdown call to happen in a callback.
A caveat of the proposed approach is that this does raise an InvalidHandle but it appears to be harmless and we just catch it. This is what is currently used in rclpy.  Alternatively we could track whether or not if a GuardCondition has been destroyed","My initial thought was the same, keep the option to block, but change the default to non-blocking, but again I don't know the context for why it was made like that to begin with. I know there are some race-conditions with executor ""cancelling"" vs ""shutdown"" that came up, but I don't remember the details either.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,947,2022-05-27T00:25:34Z,,2022-06-03T23:03:22Z,OPEN,False,32,7,2,https://github.com/ihasdapie,fix rclpy.shutdown() from hanging when triggered from callback,6,[],https://github.com/ros2/rclpy/pull/947,https://github.com/ihasdapie,4,https://github.com/ros2/rclpy/pull/947#issuecomment-1146377602,"This PR closes #944 by allowing for a executor.shutdown call to happen in a callback.
A caveat of the proposed approach is that this does raise an InvalidHandle but it appears to be harmless and we just catch it. This is what is currently used in rclpy.  Alternatively we could track whether or not if a GuardCondition has been destroyed",I've changed the default to not wait and to not even call the hanging function in the first place.,True,{}
ros2/rclpy,https://github.com/ros2/rclpy,947,2022-05-27T00:25:34Z,,2022-06-03T23:03:22Z,OPEN,False,32,7,2,https://github.com/ihasdapie,fix rclpy.shutdown() from hanging when triggered from callback,6,[],https://github.com/ros2/rclpy/pull/947,https://github.com/ihasdapie,5,https://github.com/ros2/rclpy/pull/947#issuecomment-1146438818,"This PR closes #944 by allowing for a executor.shutdown call to happen in a callback.
A caveat of the proposed approach is that this does raise an InvalidHandle but it appears to be harmless and we just catch it. This is what is currently used in rclpy.  Alternatively we could track whether or not if a GuardCondition has been destroyed","Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,949,2022-06-03T17:21:48Z,2022-06-06T15:18:32Z,2022-06-06T15:18:32Z,MERGED,True,1,1,1,https://github.com/joncppl,[foxy] fix inverted error code check for action client take,1,['bug'],https://github.com/ros2/rclpy/pull/949,https://github.com/joncppl,1,https://github.com/ros2/rclpy/pull/949,"Based on the comment following the patched line, it appears that the error condition is  inverted.
This avoids the thrown exception as explained in #801, and similar scenarios where action servers leave/disappear/restart while rmw_cyclonedds_cpp is the rmw implementation","Based on the comment following the patched line, it appears that the error condition is  inverted.
This avoids the thrown exception as explained in #801, and similar scenarios where action servers leave/disappear/restart while rmw_cyclonedds_cpp is the rmw implementation",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,949,2022-06-03T17:21:48Z,2022-06-06T15:18:32Z,2022-06-06T15:18:32Z,MERGED,True,1,1,1,https://github.com/joncppl,[foxy] fix inverted error code check for action client take,1,['bug'],https://github.com/ros2/rclpy/pull/949,https://github.com/fujitatomoya,2,https://github.com/ros2/rclpy/pull/949#issuecomment-1146244666,"Based on the comment following the patched line, it appears that the error condition is  inverted.
This avoids the thrown exception as explained in #801, and similar scenarios where action servers leave/disappear/restart while rmw_cyclonedds_cpp is the rmw implementation","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,949,2022-06-03T17:21:48Z,2022-06-06T15:18:32Z,2022-06-06T15:18:32Z,MERGED,True,1,1,1,https://github.com/joncppl,[foxy] fix inverted error code check for action client take,1,['bug'],https://github.com/ros2/rclpy/pull/949,https://github.com/clalancette,3,https://github.com/ros2/rclpy/pull/949#issuecomment-1147565850,"Based on the comment following the patched line, it appears that the error condition is  inverted.
This avoids the thrown exception as explained in #801, and similar scenarios where action servers leave/disappear/restart while rmw_cyclonedds_cpp is the rmw implementation","CI is green, and two approvals, so merging.",True,{}
ros2/rclpy,https://github.com/ros2/rclpy,950,2022-06-04T05:42:21Z,,2022-06-04T05:42:21Z,OPEN,False,4,1,2,https://github.com/ihasdapie,Change sphinx theme to readthedocs,1,[],https://github.com/ros2/rclpy/pull/950,https://github.com/ihasdapie,1,https://github.com/ros2/rclpy/pull/950,ROS2's sphinx-generated documentation is overwhelmingly in the Read the Docs theme. This PR moves rclpy from the current built-in alabaster theme to read the docs. RTD is also (at least in my experience) nicer to use.,ROS2's sphinx-generated documentation is overwhelmingly in the Read the Docs theme. This PR moves rclpy from the current built-in alabaster theme to read the docs. RTD is also (at least in my experience) nicer to use.,True,{}
