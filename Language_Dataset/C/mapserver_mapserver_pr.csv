mapserver/mapserver,https://github.com/mapserver/mapserver,5262,2016-03-08T14:21:30Z,2016-03-09T08:59:54Z,2016-03-09T08:59:54Z,MERGED,True,6,6,1,https://github.com/geographika,Update to new ODBC types SQLLEN and SQLULEN to fix issue #5172,1,[],https://github.com/mapserver/mapserver/pull/5262,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5262,"See notes at https://msdn.microsoft.com/en-us/library/ms716287(v=vs.85).aspx
I'm not sure how this would affect MapServer on pre Windows 2003 builds. Hopefully someone can review the implications.","See notes at https://msdn.microsoft.com/en-us/library/ms716287(v=vs.85).aspx
I'm not sure how this would affect MapServer on pre Windows 2003 builds. Hopefully someone can review the implications.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5264,2016-03-23T16:24:40Z,2016-09-20T16:32:22Z,2016-09-20T17:15:54Z,MERGED,True,2,3,1,https://github.com/tbonfort,SVG symbol gets clipped when rotated,1,[],https://github.com/mapserver/mapserver/pull/5264,https://github.com/tbonfort,1,https://github.com/MapServer/MapServer/pull/5264,"Non-square SVG symbols are clipped when they are rotated.
Here is an example where a small box of 40x20 pixel is rotated by 45 and 90 degrees:

Here is the Mapfile and SVG symbol:
https://gist.github.com/olt/2a345fe22653cd021c29
Tested this with current master, 7.0.1 and 6.4.3 (shp2img -m clipped-symbol.map -o out.png).","Non-square SVG symbols are clipped when they are rotated.
Here is an example where a small box of 40x20 pixel is rotated by 45 and 90 degrees:

Here is the Mapfile and SVG symbol:
https://gist.github.com/olt/2a345fe22653cd021c29
Tested this with current master, 7.0.1 and 6.4.3 (shp2img -m clipped-symbol.map -o out.png).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5264,2016-03-23T16:24:40Z,2016-09-20T16:32:22Z,2016-09-20T17:15:54Z,MERGED,True,2,3,1,https://github.com/tbonfort,SVG symbol gets clipped when rotated,1,[],https://github.com/mapserver/mapserver/pull/5264,https://github.com/olt,2,https://github.com/MapServer/MapServer/pull/5264#issuecomment-200416320,"Non-square SVG symbols are clipped when they are rotated.
Here is an example where a small box of 40x20 pixel is rotated by 45 and 90 degrees:

Here is the Mapfile and SVG symbol:
https://gist.github.com/olt/2a345fe22653cd021c29
Tested this with current master, 7.0.1 and 6.4.3 (shp2img -m clipped-symbol.map -o out.png).","Found the issue. The surface size in msRenderRasterizedSVGSymbol is too small. There is a compensation for 45 degree rotations, but it fails for larger rotations.
Here is a short fix:
olt@3b9364e",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5264,2016-03-23T16:24:40Z,2016-09-20T16:32:22Z,2016-09-20T17:15:54Z,MERGED,True,2,3,1,https://github.com/tbonfort,SVG symbol gets clipped when rotated,1,[],https://github.com/mapserver/mapserver/pull/5264,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/5264#issuecomment-248355986,"Non-square SVG symbols are clipped when they are rotated.
Here is an example where a small box of 40x20 pixel is rotated by 45 and 90 degrees:

Here is the Mapfile and SVG symbol:
https://gist.github.com/olt/2a345fe22653cd021c29
Tested this with current master, 7.0.1 and 6.4.3 (shp2img -m clipped-symbol.map -o out.png).",I've tested this fix on Ubuntu through librsvg with branch-7.0 + this change.  Is this ok to merge?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5264,2016-03-23T16:24:40Z,2016-09-20T16:32:22Z,2016-09-20T17:15:54Z,MERGED,True,2,3,1,https://github.com/tbonfort,SVG symbol gets clipped when rotated,1,[],https://github.com/mapserver/mapserver/pull/5264,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/5264#issuecomment-248356671,"Non-square SVG symbols are clipped when they are rotated.
Here is an example where a small box of 40x20 pixel is rotated by 45 and 90 degrees:

Here is the Mapfile and SVG symbol:
https://gist.github.com/olt/2a345fe22653cd021c29
Tested this with current master, 7.0.1 and 6.4.3 (shp2img -m clipped-symbol.map -o out.png).",thanks @olt !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5264,2016-03-23T16:24:40Z,2016-09-20T16:32:22Z,2016-09-20T17:15:54Z,MERGED,True,2,3,1,https://github.com/tbonfort,SVG symbol gets clipped when rotated,1,[],https://github.com/mapserver/mapserver/pull/5264,https://github.com/tbonfort,5,https://github.com/MapServer/MapServer/pull/5264#issuecomment-248365943,"Non-square SVG symbols are clipped when they are rotated.
Here is an example where a small box of 40x20 pixel is rotated by 45 and 90 degrees:

Here is the Mapfile and SVG symbol:
https://gist.github.com/olt/2a345fe22653cd021c29
Tested this with current master, 7.0.1 and 6.4.3 (shp2img -m clipped-symbol.map -o out.png).","A PR which breaks tests isn't ready for inclusion, please wait for confirmation before merging PRs you are not affiliated with. Fix added in 45b3917",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5264,2016-03-23T16:24:40Z,2016-09-20T16:32:22Z,2016-09-20T17:15:54Z,MERGED,True,2,3,1,https://github.com/tbonfort,SVG symbol gets clipped when rotated,1,[],https://github.com/mapserver/mapserver/pull/5264,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/5264#issuecomment-248368488,"Non-square SVG symbols are clipped when they are rotated.
Here is an example where a small box of 40x20 pixel is rotated by 45 and 90 degrees:

Here is the Mapfile and SVG symbol:
https://gist.github.com/olt/2a345fe22653cd021c29
Tested this with current master, 7.0.1 and 6.4.3 (shp2img -m clipped-symbol.map -o out.png).",for the record i had begun looking at the 2 errors reported by msautotest.  thanks for the fix.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5266,2016-03-25T17:21:28Z,2016-06-17T16:33:51Z,2016-10-19T06:08:08Z,MERGED,True,1,0,1,https://github.com/edigiacomo,Fix filter of MS_TOKEN_LITERAL_TIME in PostGIS (#5265),1,[],https://github.com/mapserver/mapserver/pull/5266,https://github.com/edigiacomo,1,https://github.com/MapServer/MapServer/pull/5266,"In PostGIS filter, a MS_TOKEN_COMPARISON_EQ followed by a MS_TOKEN_LITERAL_TIME is ignored, because the operator if set with the MS_TOKEN_LITERAL_TIME.
Fix #5265","In PostGIS filter, a MS_TOKEN_COMPARISON_EQ followed by a MS_TOKEN_LITERAL_TIME is ignored, because the operator if set with the MS_TOKEN_LITERAL_TIME.
Fix #5265",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5266,2016-03-25T17:21:28Z,2016-06-17T16:33:51Z,2016-10-19T06:08:08Z,MERGED,True,1,0,1,https://github.com/edigiacomo,Fix filter of MS_TOKEN_LITERAL_TIME in PostGIS (#5265),1,[],https://github.com/mapserver/mapserver/pull/5266,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5266#issuecomment-202980291,"In PostGIS filter, a MS_TOKEN_COMPARISON_EQ followed by a MS_TOKEN_LITERAL_TIME is ignored, because the operator if set with the MS_TOKEN_LITERAL_TIME.
Fix #5265",I think this looks ok...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5266,2016-03-25T17:21:28Z,2016-06-17T16:33:51Z,2016-10-19T06:08:08Z,MERGED,True,1,0,1,https://github.com/edigiacomo,Fix filter of MS_TOKEN_LITERAL_TIME in PostGIS (#5265),1,[],https://github.com/mapserver/mapserver/pull/5266,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/5266#issuecomment-226822493,"In PostGIS filter, a MS_TOKEN_COMPARISON_EQ followed by a MS_TOKEN_LITERAL_TIME is ignored, because the operator if set with the MS_TOKEN_LITERAL_TIME.
Fix #5265",Merged into master as well.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5269,2016-03-31T23:21:51Z,2016-08-29T22:15:18Z,2016-08-29T22:15:18Z,CLOSED,False,15,15,1,https://github.com/geographika,Heap errors with msEvalTextExpressionJSonEscape in maputfgrid.cpp,2,[],https://github.com/mapserver/mapserver/pull/5269,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5269,"When debugging I get invalid heap errors at the following line:
msFree(r->data->table[i].datavalues);
This is caused by the following line, which assigns a string on the stack rather than heap - hence the error when calling free()
r->data->table[r->data->counter].datavalues = msEvalTextExpressionJSonEscape(&r->utflayer->utfdata, p);
This pull request stops the error, but may not be the cleanest solution.
Pull request also includes comment updates.","When debugging I get invalid heap errors at the following line:
msFree(r->data->table[i].datavalues);
This is caused by the following line, which assigns a string on the stack rather than heap - hence the error when calling free()
r->data->table[r->data->counter].datavalues = msEvalTextExpressionJSonEscape(&r->utflayer->utfdata, p);
This pull request stops the error, but may not be the cleanest solution.
Pull request also includes comment updates.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5269,2016-03-31T23:21:51Z,2016-08-29T22:15:18Z,2016-08-29T22:15:18Z,CLOSED,False,15,15,1,https://github.com/geographika,Heap errors with msEvalTextExpressionJSonEscape in maputfgrid.cpp,2,[],https://github.com/mapserver/mapserver/pull/5269,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5269#issuecomment-228621684,"When debugging I get invalid heap errors at the following line:
msFree(r->data->table[i].datavalues);
This is caused by the following line, which assigns a string on the stack rather than heap - hence the error when calling free()
r->data->table[r->data->counter].datavalues = msEvalTextExpressionJSonEscape(&r->utflayer->utfdata, p);
This pull request stops the error, but may not be the cleanest solution.
Pull request also includes comment updates.","Could you give a way of reproducing the issue you see and/or a Valgrind log ? As far as I can see msEvalTextExpressionJSonEscape() already returns something that is allocated by msStrdup(), so it looks like your proposed patch would cause a memory leak. Perhaps that's covering an issue elsewhere",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5269,2016-03-31T23:21:51Z,2016-08-29T22:15:18Z,2016-08-29T22:15:18Z,CLOSED,False,15,15,1,https://github.com/geographika,Heap errors with msEvalTextExpressionJSonEscape in maputfgrid.cpp,2,[],https://github.com/mapserver/mapserver/pull/5269,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5269#issuecomment-243271668,"When debugging I get invalid heap errors at the following line:
msFree(r->data->table[i].datavalues);
This is caused by the following line, which assigns a string on the stack rather than heap - hence the error when calling free()
r->data->table[r->data->counter].datavalues = msEvalTextExpressionJSonEscape(&r->utflayer->utfdata, p);
This pull request stops the error, but may not be the cleanest solution.
Pull request also includes comment updates.","@rouault - I think the errors in the above were caused by the issue outlined in #5277 - as with the updated pull request these errors no longer occur.
The reallocation commit can therefore be ignored.
The updated comments however could still be applied?
PS Congratulations on the OSGeo award!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5269,2016-03-31T23:21:51Z,2016-08-29T22:15:18Z,2016-08-29T22:15:18Z,CLOSED,False,15,15,1,https://github.com/geographika,Heap errors with msEvalTextExpressionJSonEscape in maputfgrid.cpp,2,[],https://github.com/mapserver/mapserver/pull/5269,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/5269#issuecomment-243274477,"When debugging I get invalid heap errors at the following line:
msFree(r->data->table[i].datavalues);
This is caused by the following line, which assigns a string on the stack rather than heap - hence the error when calling free()
r->data->table[r->data->counter].datavalues = msEvalTextExpressionJSonEscape(&r->utflayer->utfdata, p);
This pull request stops the error, but may not be the cleanest solution.
Pull request also includes comment updates.",Commit 4e0d69b cherry-picked as 2f547e1,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5272,2016-04-12T13:25:04Z,2016-04-13T16:00:04Z,2016-04-13T16:00:04Z,MERGED,True,51,49,1,https://github.com/jmckenna,"add encoding property to PHP mapscript source (mapserver/mapserver#4758, mapserver/docs#147)",1,[],https://github.com/mapserver/mapserver/pull/5272,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/5272,This allows PHPmapscript to set the mapfile LAYER encoding property.  I have tested this on Windows successfully.,This allows PHPmapscript to set the mapfile LAYER encoding property.  I have tested this on Windows successfully.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5279,2016-05-13T21:53:33Z,2016-05-13T22:23:55Z,2016-05-13T22:23:55Z,MERGED,True,55,2,1,https://github.com/szekerest,Fix Cluster Layers Filter Translation (#5205),1,[],https://github.com/mapserver/mapserver/pull/5279,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5279,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5282,2016-05-19T15:19:33Z,2016-05-19T17:40:37Z,2016-05-19T17:41:07Z,MERGED,True,8,5,3,https://github.com/szekerest,Fix crash in drawQuery for layers with labelitem (#5281),1,[],https://github.com/mapserver/mapserver/pull/5282,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5282,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5284,2016-05-19T20:25:53Z,2016-05-19T21:05:11Z,2016-05-19T21:05:11Z,MERGED,True,106,0,2,https://github.com/szekerest,Fix layer compositer issues (#5283),1,[],https://github.com/mapserver/mapserver/pull/5284,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5284,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5285,2016-05-20T18:42:56Z,2016-05-20T20:45:59Z,2016-05-20T20:46:04Z,MERGED,True,24,4,3,https://github.com/szekerest,Add fixes,3,[],https://github.com/mapserver/mapserver/pull/5285,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5285,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5288,2016-05-29T14:30:05Z,2016-05-31T08:48:39Z,2016-05-31T08:48:44Z,MERGED,True,8,1,1,https://github.com/szekerest,Recalculate scale factor in drawLegendIcon from mapscript (#5287),1,[],https://github.com/mapserver/mapserver/pull/5288,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5288,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5290,2016-06-04T04:27:01Z,2018-03-20T13:56:24Z,2018-03-20T13:56:24Z,CLOSED,False,8,25,4,https://github.com/klassenjs,Add MapScript support for Python 3.x,1,[],https://github.com/mapserver/mapserver/pull/5290,https://github.com/klassenjs,1,https://github.com/MapServer/MapServer/pull/5290,"I haven't had time to test this much, but this allows MapScript to
build and run against Python 3.4. The changes appear to continue to
work with Python 2.7.  I kind of accidentally figured this out while playing
around so it may be incomplete, but I figured I'd share it as it is at least a
good start.
If there are multiple Python versions installed on your machine,
the Python version that is selected is whatever CMake finds first
or the path set with -DPYTHON_EXECUTABLE=
Changes include:

print """"                     ---> print("""")
raise E, ""text""              ---> raise E(""text"")
PyString_FromStringAndSize() ---> PyBytes_FromStringAndSize()
Remove references to PyFile*","I haven't had time to test this much, but this allows MapScript to
build and run against Python 3.4. The changes appear to continue to
work with Python 2.7.  I kind of accidentally figured this out while playing
around so it may be incomplete, but I figured I'd share it as it is at least a
good start.
If there are multiple Python versions installed on your machine,
the Python version that is selected is whatever CMake finds first
or the path set with -DPYTHON_EXECUTABLE=
Changes include:

print """"                     ---> print("""")
raise E, ""text""              ---> raise E(""text"")
PyString_FromStringAndSize() ---> PyBytes_FromStringAndSize()
Remove references to PyFile*",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5290,2016-06-04T04:27:01Z,2018-03-20T13:56:24Z,2018-03-20T13:56:24Z,CLOSED,False,8,25,4,https://github.com/klassenjs,Add MapScript support for Python 3.x,1,[],https://github.com/mapserver/mapserver/pull/5290,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5290#issuecomment-224360874,"I haven't had time to test this much, but this allows MapScript to
build and run against Python 3.4. The changes appear to continue to
work with Python 2.7.  I kind of accidentally figured this out while playing
around so it may be incomplete, but I figured I'd share it as it is at least a
good start.
If there are multiple Python versions installed on your machine,
the Python version that is selected is whatever CMake finds first
or the path set with -DPYTHON_EXECUTABLE=
Changes include:

print """"                     ---> print("""")
raise E, ""text""              ---> raise E(""text"")
PyString_FromStringAndSize() ---> PyBytes_FromStringAndSize()
Remove references to PyFile*",There is also an open ticket for Python3 support: ticket #4748,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5290,2016-06-04T04:27:01Z,2018-03-20T13:56:24Z,2018-03-20T13:56:24Z,CLOSED,False,8,25,4,https://github.com/klassenjs,Add MapScript support for Python 3.x,1,[],https://github.com/mapserver/mapserver/pull/5290,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/5290#issuecomment-224385799,"I haven't had time to test this much, but this allows MapScript to
build and run against Python 3.4. The changes appear to continue to
work with Python 2.7.  I kind of accidentally figured this out while playing
around so it may be incomplete, but I figured I'd share it as it is at least a
good start.
If there are multiple Python versions installed on your machine,
the Python version that is selected is whatever CMake finds first
or the path set with -DPYTHON_EXECUTABLE=
Changes include:

print """"                     ---> print("""")
raise E, ""text""              ---> raise E(""text"")
PyString_FromStringAndSize() ---> PyBytes_FromStringAndSize()
Remove references to PyFile*","I tried this, but I also needed the other setup.py changes made in #4748 (dict, readme)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5290,2016-06-04T04:27:01Z,2018-03-20T13:56:24Z,2018-03-20T13:56:24Z,CLOSED,False,8,25,4,https://github.com/klassenjs,Add MapScript support for Python 3.x,1,[],https://github.com/mapserver/mapserver/pull/5290,https://github.com/solebox,4,https://github.com/MapServer/MapServer/pull/5290#issuecomment-253591627,"I haven't had time to test this much, but this allows MapScript to
build and run against Python 3.4. The changes appear to continue to
work with Python 2.7.  I kind of accidentally figured this out while playing
around so it may be incomplete, but I figured I'd share it as it is at least a
good start.
If there are multiple Python versions installed on your machine,
the Python version that is selected is whatever CMake finds first
or the path set with -DPYTHON_EXECUTABLE=
Changes include:

print """"                     ---> print("""")
raise E, ""text""              ---> raise E(""text"")
PyString_FromStringAndSize() ---> PyBytes_FromStringAndSize()
Remove references to PyFile*","when i try it out with python3 i get the usual
ImportError: dynamic module does not define init function (PyInit__mapscript)
... even tried to manually edit all the hex_version>= 0x03000 conditions to always be true in mapscriptPYTHON_wrap.c
(linux) ImportError: dynamic module does not define init function (PyInit__mapscript)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5290,2016-06-04T04:27:01Z,2018-03-20T13:56:24Z,2018-03-20T13:56:24Z,CLOSED,False,8,25,4,https://github.com/klassenjs,Add MapScript support for Python 3.x,1,[],https://github.com/mapserver/mapserver/pull/5290,https://github.com/sdlime,5,https://github.com/MapServer/MapServer/pull/5290#issuecomment-324349455,"I haven't had time to test this much, but this allows MapScript to
build and run against Python 3.4. The changes appear to continue to
work with Python 2.7.  I kind of accidentally figured this out while playing
around so it may be incomplete, but I figured I'd share it as it is at least a
good start.
If there are multiple Python versions installed on your machine,
the Python version that is selected is whatever CMake finds first
or the path set with -DPYTHON_EXECUTABLE=
Changes include:

print """"                     ---> print("""")
raise E, ""text""              ---> raise E(""text"")
PyString_FromStringAndSize() ---> PyBytes_FromStringAndSize()
Remove references to PyFile*",So where are we at with this pull request? It's a little dated and should be based against master and not the 7.0 branch. --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5290,2016-06-04T04:27:01Z,2018-03-20T13:56:24Z,2018-03-20T13:56:24Z,CLOSED,False,8,25,4,https://github.com/klassenjs,Add MapScript support for Python 3.x,1,[],https://github.com/mapserver/mapserver/pull/5290,https://github.com/claudep,6,https://github.com/MapServer/MapServer/pull/5290#issuecomment-373451309,"I haven't had time to test this much, but this allows MapScript to
build and run against Python 3.4. The changes appear to continue to
work with Python 2.7.  I kind of accidentally figured this out while playing
around so it may be incomplete, but I figured I'd share it as it is at least a
good start.
If there are multiple Python versions installed on your machine,
the Python version that is selected is whatever CMake finds first
or the path set with -DPYTHON_EXECUTABLE=
Changes include:

print """"                     ---> print("""")
raise E, ""text""              ---> raise E(""text"")
PyString_FromStringAndSize() ---> PyBytes_FromStringAndSize()
Remove references to PyFile*","I recreated this pull request against master in #5561, also including some setup.py changes from #4748.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5290,2016-06-04T04:27:01Z,2018-03-20T13:56:24Z,2018-03-20T13:56:24Z,CLOSED,False,8,25,4,https://github.com/klassenjs,Add MapScript support for Python 3.x,1,[],https://github.com/mapserver/mapserver/pull/5290,https://github.com/sdlime,7,https://github.com/MapServer/MapServer/pull/5290#issuecomment-373557384,"I haven't had time to test this much, but this allows MapScript to
build and run against Python 3.4. The changes appear to continue to
work with Python 2.7.  I kind of accidentally figured this out while playing
around so it may be incomplete, but I figured I'd share it as it is at least a
good start.
If there are multiple Python versions installed on your machine,
the Python version that is selected is whatever CMake finds first
or the path set with -DPYTHON_EXECUTABLE=
Changes include:

print """"                     ---> print("""")
raise E, ""text""              ---> raise E(""text"")
PyString_FromStringAndSize() ---> PyBytes_FromStringAndSize()
Remove references to PyFile*",Beautiful - anyone else want to comment or test? Otherwise I say we merge it and deal with issues as part of the release process. --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5290,2016-06-04T04:27:01Z,2018-03-20T13:56:24Z,2018-03-20T13:56:24Z,CLOSED,False,8,25,4,https://github.com/klassenjs,Add MapScript support for Python 3.x,1,[],https://github.com/mapserver/mapserver/pull/5290,https://github.com/klassenjs,8,https://github.com/MapServer/MapServer/pull/5290#issuecomment-374334963,"I haven't had time to test this much, but this allows MapScript to
build and run against Python 3.4. The changes appear to continue to
work with Python 2.7.  I kind of accidentally figured this out while playing
around so it may be incomplete, but I figured I'd share it as it is at least a
good start.
If there are multiple Python versions installed on your machine,
the Python version that is selected is whatever CMake finds first
or the path set with -DPYTHON_EXECUTABLE=
Changes include:

print """"                     ---> print("""")
raise E, ""text""              ---> raise E(""text"")
PyString_FromStringAndSize() ---> PyBytes_FromStringAndSize()
Remove references to PyFile*","I didn't actually end up using this, so I don't have any specific comments/test cases.  Glad to see @claudep pick it up.
(This PR was fallout of experimenting with options for moving beyond MapScript/PHP 5 for GeoMoose 3, but the final decision was to use a combination of standard WFS calls and client side processing rather than MapScript.)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5290,2016-06-04T04:27:01Z,2018-03-20T13:56:24Z,2018-03-20T13:56:24Z,CLOSED,False,8,25,4,https://github.com/klassenjs,Add MapScript support for Python 3.x,1,[],https://github.com/mapserver/mapserver/pull/5290,https://github.com/sdlime,9,https://github.com/MapServer/MapServer/pull/5290#issuecomment-374606631,"I haven't had time to test this much, but this allows MapScript to
build and run against Python 3.4. The changes appear to continue to
work with Python 2.7.  I kind of accidentally figured this out while playing
around so it may be incomplete, but I figured I'd share it as it is at least a
good start.
If there are multiple Python versions installed on your machine,
the Python version that is selected is whatever CMake finds first
or the path set with -DPYTHON_EXECUTABLE=
Changes include:

print """"                     ---> print("""")
raise E, ""text""              ---> raise E(""text"")
PyString_FromStringAndSize() ---> PyBytes_FromStringAndSize()
Remove references to PyFile*",I'm going to close with with the newer pull request in play. --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5294,2016-06-10T20:06:12Z,2016-06-10T20:20:08Z,2016-06-10T20:20:15Z,MERGED,True,236,3,5,https://github.com/szekerest,Add support to get raw image data in csharp (#5293),1,[],https://github.com/mapserver/mapserver/pull/5294,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5294,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5296,2016-06-26T19:27:39Z,2016-07-07T20:07:20Z,2016-07-07T20:07:20Z,MERGED,True,300,1,73,https://github.com/rouault,Output format: add a AGG/MIXED pseudo driver.,4,[],https://github.com/mapserver/mapserver/pull/5296,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5296,"Implementing https://lists.osgeo.org/pipermail/mapserver-dev/2016-June/thread.html#14878
This driver redirects to a concrete driver when the image
has non-opaque pixels, and to another one when the image
is fully opaque.
Requires to define TRANSPARENT_FORMAT and OPAQUE_FORMAT
FORMAT_OPTION on OUTPUTFORMATs that instanciate that
driver. Those underlying formats can be AGG/PNG, AGG/JPEG
or a GDAL/ one (anyone that uses AGG/ for rendering)
Two predefined formats image/jpeg-png and image/jpeg-png8
are added.
Example of custom mixed formats:
OUTPUTFORMAT
  NAME jpeg_low
  MIMETYPE ""image/jpeg; quality=50""
  DRIVER AGG/JPEG
  IMAGEMODE RGB
  FORMATOPTION ""QUALITY=50""
END

OUTPUTFORMAT
  NAME jpeg_low_png
  MIMETYPE ""image/jpeg_low-png""
  DRIVER AGG/MIXED
  FORMATOPTION ""TRANSPARENT_FORMAT=png""
  FORMATOPTION ""OPAQUE_FORMAT=jpeg_low""
END

OUTPUTFORMAT
  NAME jpeg_high
  MIMETYPE ""image/jpeg; quality=99""
  DRIVER AGG/JPEG
  IMAGEMODE RGB
  FORMATOPTION ""QUALITY=99""
END

OUTPUTFORMAT
  NAME jpeg_high_png8
  MIMETYPE ""image/jpeg_high-png8""
  DRIVER AGG/MIXED
  FORMATOPTION ""TRANSPARENT_FORMAT=png8""
  FORMATOPTION ""OPAQUE_FORMAT=jpeg_high""
END","Implementing https://lists.osgeo.org/pipermail/mapserver-dev/2016-June/thread.html#14878
This driver redirects to a concrete driver when the image
has non-opaque pixels, and to another one when the image
is fully opaque.
Requires to define TRANSPARENT_FORMAT and OPAQUE_FORMAT
FORMAT_OPTION on OUTPUTFORMATs that instanciate that
driver. Those underlying formats can be AGG/PNG, AGG/JPEG
or a GDAL/ one (anyone that uses AGG/ for rendering)
Two predefined formats image/jpeg-png and image/jpeg-png8
are added.
Example of custom mixed formats:
OUTPUTFORMAT
  NAME jpeg_low
  MIMETYPE ""image/jpeg; quality=50""
  DRIVER AGG/JPEG
  IMAGEMODE RGB
  FORMATOPTION ""QUALITY=50""
END

OUTPUTFORMAT
  NAME jpeg_low_png
  MIMETYPE ""image/jpeg_low-png""
  DRIVER AGG/MIXED
  FORMATOPTION ""TRANSPARENT_FORMAT=png""
  FORMATOPTION ""OPAQUE_FORMAT=jpeg_low""
END

OUTPUTFORMAT
  NAME jpeg_high
  MIMETYPE ""image/jpeg; quality=99""
  DRIVER AGG/JPEG
  IMAGEMODE RGB
  FORMATOPTION ""QUALITY=99""
END

OUTPUTFORMAT
  NAME jpeg_high_png8
  MIMETYPE ""image/jpeg_high-png8""
  DRIVER AGG/MIXED
  FORMATOPTION ""TRANSPARENT_FORMAT=png8""
  FORMATOPTION ""OPAQUE_FORMAT=jpeg_high""
END",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5296,2016-06-26T19:27:39Z,2016-07-07T20:07:20Z,2016-07-07T20:07:20Z,MERGED,True,300,1,73,https://github.com/rouault,Output format: add a AGG/MIXED pseudo driver.,4,[],https://github.com/mapserver/mapserver/pull/5296,https://github.com/tbonfort,2,https://github.com/MapServer/MapServer/pull/5296#issuecomment-229287187,"Implementing https://lists.osgeo.org/pipermail/mapserver-dev/2016-June/thread.html#14878
This driver redirects to a concrete driver when the image
has non-opaque pixels, and to another one when the image
is fully opaque.
Requires to define TRANSPARENT_FORMAT and OPAQUE_FORMAT
FORMAT_OPTION on OUTPUTFORMATs that instanciate that
driver. Those underlying formats can be AGG/PNG, AGG/JPEG
or a GDAL/ one (anyone that uses AGG/ for rendering)
Two predefined formats image/jpeg-png and image/jpeg-png8
are added.
Example of custom mixed formats:
OUTPUTFORMAT
  NAME jpeg_low
  MIMETYPE ""image/jpeg; quality=50""
  DRIVER AGG/JPEG
  IMAGEMODE RGB
  FORMATOPTION ""QUALITY=50""
END

OUTPUTFORMAT
  NAME jpeg_low_png
  MIMETYPE ""image/jpeg_low-png""
  DRIVER AGG/MIXED
  FORMATOPTION ""TRANSPARENT_FORMAT=png""
  FORMATOPTION ""OPAQUE_FORMAT=jpeg_low""
END

OUTPUTFORMAT
  NAME jpeg_high
  MIMETYPE ""image/jpeg; quality=99""
  DRIVER AGG/JPEG
  IMAGEMODE RGB
  FORMATOPTION ""QUALITY=99""
END

OUTPUTFORMAT
  NAME jpeg_high_png8
  MIMETYPE ""image/jpeg_high-png8""
  DRIVER AGG/MIXED
  FORMATOPTION ""TRANSPARENT_FORMAT=png8""
  FORMATOPTION ""OPAQUE_FORMAT=jpeg_high""
END","LGTM
👍 once the tests are updated to reference the new default mimetypes",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5296,2016-06-26T19:27:39Z,2016-07-07T20:07:20Z,2016-07-07T20:07:20Z,MERGED,True,300,1,73,https://github.com/rouault,Output format: add a AGG/MIXED pseudo driver.,4,[],https://github.com/mapserver/mapserver/pull/5296,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/5296#issuecomment-229288425,"Implementing https://lists.osgeo.org/pipermail/mapserver-dev/2016-June/thread.html#14878
This driver redirects to a concrete driver when the image
has non-opaque pixels, and to another one when the image
is fully opaque.
Requires to define TRANSPARENT_FORMAT and OPAQUE_FORMAT
FORMAT_OPTION on OUTPUTFORMATs that instanciate that
driver. Those underlying formats can be AGG/PNG, AGG/JPEG
or a GDAL/ one (anyone that uses AGG/ for rendering)
Two predefined formats image/jpeg-png and image/jpeg-png8
are added.
Example of custom mixed formats:
OUTPUTFORMAT
  NAME jpeg_low
  MIMETYPE ""image/jpeg; quality=50""
  DRIVER AGG/JPEG
  IMAGEMODE RGB
  FORMATOPTION ""QUALITY=50""
END

OUTPUTFORMAT
  NAME jpeg_low_png
  MIMETYPE ""image/jpeg_low-png""
  DRIVER AGG/MIXED
  FORMATOPTION ""TRANSPARENT_FORMAT=png""
  FORMATOPTION ""OPAQUE_FORMAT=jpeg_low""
END

OUTPUTFORMAT
  NAME jpeg_high
  MIMETYPE ""image/jpeg; quality=99""
  DRIVER AGG/JPEG
  IMAGEMODE RGB
  FORMATOPTION ""QUALITY=99""
END

OUTPUTFORMAT
  NAME jpeg_high_png8
  MIMETYPE ""image/jpeg_high-png8""
  DRIVER AGG/MIXED
  FORMATOPTION ""TRANSPARENT_FORMAT=png8""
  FORMATOPTION ""OPAQUE_FORMAT=jpeg_high""
END","Oh, another thing is the naming ""AGG/MIXED"" which doesn't reflect that GDAL drivers can actually be used as TRANSPARENT_FORMAT or OPAQUE_FORMAT. But perhaps this can be adressed by a note in the documentation.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5297,2016-06-27T14:33:55Z,2016-06-27T16:49:45Z,2016-06-27T16:49:45Z,MERGED,True,9,0,1,https://github.com/blazek,"Fix WMS blank for classified raster with NaN, ",1,[],https://github.com/mapserver/mapserver/pull/5297,https://github.com/blazek,1,https://github.com/MapServer/MapServer/pull/5297,Fixes #5289.,Fixes #5289.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5303,2016-07-26T14:42:49Z,2016-07-26T15:05:30Z,2021-04-26T02:32:00Z,MERGED,True,6,1,1,https://github.com/sdlime,Added option to item take to escape strings for JSON output. #4324,1,[],https://github.com/mapserver/mapserver/pull/5303,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/5303,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5306,2016-07-30T15:05:24Z,2016-07-30T15:14:17Z,2016-11-03T23:13:03Z,MERGED,True,81,2,1,https://github.com/szekerest,Add support for DescribeFeatureType with gml_types=auto for the MSSQL…,1,[],https://github.com/mapserver/mapserver/pull/5306,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5306,… driver (#5305),… driver (#5305),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5306,2016-07-30T15:05:24Z,2016-07-30T15:14:17Z,2016-11-03T23:13:03Z,MERGED,True,81,2,1,https://github.com/szekerest,Add support for DescribeFeatureType with gml_types=auto for the MSSQL…,1,[],https://github.com/mapserver/mapserver/pull/5306,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5306#issuecomment-258301756,… driver (#5305),"@szekerest - this is great work! I can get rid of 15Kb from my map files and it fixes a bug I had with MapInfo where NULL values caused problemts with WFS layers (the nillable property fixes this).
Thanks!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5277,2016-08-27T10:44:24Z,2016-09-20T16:37:26Z,2016-09-20T16:37:26Z,CLOSED,False,2622,2664,86,https://github.com/tbonfort,strdup() is deprecated under Windows,1,[],https://github.com/mapserver/mapserver/pull/5277,https://github.com/tbonfort,1,https://github.com/MapServer/MapServer/pull/5277,"While stepping through the MapServer source code in a Visual Studio debugger, every call to msStrdup caused the debugger to crash with heap errors.
I saw in the code comments that msStrdup was originally copied from GDAL. Looking at the current GDAL source and issues I found that CPLStrdup() had been updated for the same issue I am having with memory errors in Windows.
See - OSGeo/gdal#51 for details and discussions.
Could the MapServer source also be changed to match GDAL and allow debugging on Windows? I've not noticed any issues in production, but the VS debugger is much stricter with memory leaks.
I think only msStrdup need be changed as strdup is always wrapped in msStrdup, although free is used in several places, and should perhaps be msFree?","While stepping through the MapServer source code in a Visual Studio debugger, every call to msStrdup caused the debugger to crash with heap errors.
I saw in the code comments that msStrdup was originally copied from GDAL. Looking at the current GDAL source and issues I found that CPLStrdup() had been updated for the same issue I am having with memory errors in Windows.
See - OSGeo/gdal#51 for details and discussions.
Could the MapServer source also be changed to match GDAL and allow debugging on Windows? I've not noticed any issues in production, but the VS debugger is much stricter with memory leaks.
I think only msStrdup need be changed as strdup is always wrapped in msStrdup, although free is used in several places, and should perhaps be msFree?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5277,2016-08-27T10:44:24Z,2016-09-20T16:37:26Z,2016-09-20T16:37:26Z,CLOSED,False,2622,2664,86,https://github.com/tbonfort,strdup() is deprecated under Windows,1,[],https://github.com/mapserver/mapserver/pull/5277,https://github.com/tbonfort,2,https://github.com/MapServer/MapServer/pull/5277#issuecomment-242910101,"While stepping through the MapServer source code in a Visual Studio debugger, every call to msStrdup caused the debugger to crash with heap errors.
I saw in the code comments that msStrdup was originally copied from GDAL. Looking at the current GDAL source and issues I found that CPLStrdup() had been updated for the same issue I am having with memory errors in Windows.
See - OSGeo/gdal#51 for details and discussions.
Could the MapServer source also be changed to match GDAL and allow debugging on Windows? I've not noticed any issues in production, but the VS debugger is much stricter with memory leaks.
I think only msStrdup need be changed as strdup is always wrapped in msStrdup, although free is used in several places, and should perhaps be msFree?",@geographika please test this PR and comment,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5277,2016-08-27T10:44:24Z,2016-09-20T16:37:26Z,2016-09-20T16:37:26Z,CLOSED,False,2622,2664,86,https://github.com/tbonfort,strdup() is deprecated under Windows,1,[],https://github.com/mapserver/mapserver/pull/5277,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5277#issuecomment-243004442,"While stepping through the MapServer source code in a Visual Studio debugger, every call to msStrdup caused the debugger to crash with heap errors.
I saw in the code comments that msStrdup was originally copied from GDAL. Looking at the current GDAL source and issues I found that CPLStrdup() had been updated for the same issue I am having with memory errors in Windows.
See - OSGeo/gdal#51 for details and discussions.
Could the MapServer source also be changed to match GDAL and allow debugging on Windows? I've not noticed any issues in production, but the VS debugger is much stricter with memory leaks.
I think only msStrdup need be changed as strdup is always wrapped in msStrdup, although free is used in several places, and should perhaps be msFree?","@tbonfort - many thanks for looking into this.
I got the branch-7-0 MapServer branch and ran the following command to get your changes:
git pull git://github.com/tbonfort/mapserver.git issues/5277-free
I then rebuilt (in debug mode with no optimizations). The debugger got stuck in a loop, after checking some of the changes I noticed there was a self-calling function in mapfile.c included as part of the pull request:
#ifdef USE_MSFREE
void msFree(void *p)
{
  if(p) msFree(p);
}
#endif

I changed it to  if(p) free(p); rebuilt and was able to step through the entire process of creating a WFS response from start to end, so it appears the issues will be resolved with this patch.
It will be a huge help to try and debug any other issues on Windows - so thanks again for looking at this.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5277,2016-08-27T10:44:24Z,2016-09-20T16:37:26Z,2016-09-20T16:37:26Z,CLOSED,False,2622,2664,86,https://github.com/tbonfort,strdup() is deprecated under Windows,1,[],https://github.com/mapserver/mapserver/pull/5277,https://github.com/geographika,4,https://github.com/MapServer/MapServer/pull/5277#issuecomment-243269851,"While stepping through the MapServer source code in a Visual Studio debugger, every call to msStrdup caused the debugger to crash with heap errors.
I saw in the code comments that msStrdup was originally copied from GDAL. Looking at the current GDAL source and issues I found that CPLStrdup() had been updated for the same issue I am having with memory errors in Windows.
See - OSGeo/gdal#51 for details and discussions.
Could the MapServer source also be changed to match GDAL and allow debugging on Windows? I've not noticed any issues in production, but the VS debugger is much stricter with memory leaks.
I think only msStrdup need be changed as strdup is always wrapped in msStrdup, although free is used in several places, and should perhaps be msFree?","I have run through a few more code paths, which have triggered the same exceptions as I found originally. I was incorrect in my first post that all strdup calls were wrapped in msStrdup - there are several cases where strdup is used on its own e.g.
https://github.com/mapserver/mapserver/blob/branch-7-0/maputil.c#L1508
https://github.com/mapserver/mapserver/blob/branch-7-0/maputil.c#L1481
Would there be any side effects in replacing all these with msStrdup throughout the codebase?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5277,2016-08-27T10:44:24Z,2016-09-20T16:37:26Z,2016-09-20T16:37:26Z,CLOSED,False,2622,2664,86,https://github.com/tbonfort,strdup() is deprecated under Windows,1,[],https://github.com/mapserver/mapserver/pull/5277,https://github.com/tbonfort,5,https://github.com/MapServer/MapServer/pull/5277#issuecomment-243347402,"While stepping through the MapServer source code in a Visual Studio debugger, every call to msStrdup caused the debugger to crash with heap errors.
I saw in the code comments that msStrdup was originally copied from GDAL. Looking at the current GDAL source and issues I found that CPLStrdup() had been updated for the same issue I am having with memory errors in Windows.
See - OSGeo/gdal#51 for details and discussions.
Could the MapServer source also be changed to match GDAL and allow debugging on Windows? I've not noticed any issues in production, but the VS debugger is much stricter with memory leaks.
I think only msStrdup need be changed as strdup is always wrapped in msStrdup, although free is used in several places, and should perhaps be msFree?","Seth, you can open a pr with the changes. There should be no side effect.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5277,2016-08-27T10:44:24Z,2016-09-20T16:37:26Z,2016-09-20T16:37:26Z,CLOSED,False,2622,2664,86,https://github.com/tbonfort,strdup() is deprecated under Windows,1,[],https://github.com/mapserver/mapserver/pull/5277,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/5277#issuecomment-248099061,"While stepping through the MapServer source code in a Visual Studio debugger, every call to msStrdup caused the debugger to crash with heap errors.
I saw in the code comments that msStrdup was originally copied from GDAL. Looking at the current GDAL source and issues I found that CPLStrdup() had been updated for the same issue I am having with memory errors in Windows.
See - OSGeo/gdal#51 for details and discussions.
Could the MapServer source also be changed to match GDAL and allow debugging on Windows? I've not noticed any issues in production, but the VS debugger is much stricter with memory leaks.
I think only msStrdup need be changed as strdup is always wrapped in msStrdup, although free is used in several places, and should perhaps be msFree?","I've stepped through branch-7-0 with Visual Studio 2015 with the Debugger, with no issues.  Thanks @geographika !",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5268,2016-08-27T11:28:12Z,2016-09-21T07:29:43Z,2016-09-21T07:29:44Z,CLOSED,False,2,2,1,https://github.com/tbonfort,Legend MapServer 7.0.1 Label SIZE is ignored when using SIZEUNITS meters,1,[],https://github.com/mapserver/mapserver/pull/5268,https://github.com/tbonfort,1,https://github.com/MapServer/MapServer/pull/5268,"When you use SIZEUNITS meters instead of pixel in your LAYER the SIZE of your LEGEND is very small as long as you define only size. When you define MINSIZE and MAXSIZE the size is ok.
LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
    END 
END


example using SIZE 10

Example using SIZE 100 (legend comes back with a big white extra area at the left and bottom)

when you add MINSIZE and MAXSIZE the Legend SIZE is ok

LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
                MINSIZE 10
                MAXSIZE 10
        COLOR 119 179 0
    END 
END","When you use SIZEUNITS meters instead of pixel in your LAYER the SIZE of your LEGEND is very small as long as you define only size. When you define MINSIZE and MAXSIZE the size is ok.
LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
    END 
END


example using SIZE 10

Example using SIZE 100 (legend comes back with a big white extra area at the left and bottom)

when you add MINSIZE and MAXSIZE the Legend SIZE is ok

LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
                MINSIZE 10
                MAXSIZE 10
        COLOR 119 179 0
    END 
END",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5268,2016-08-27T11:28:12Z,2016-09-21T07:29:43Z,2016-09-21T07:29:44Z,CLOSED,False,2,2,1,https://github.com/tbonfort,Legend MapServer 7.0.1 Label SIZE is ignored when using SIZEUNITS meters,1,[],https://github.com/mapserver/mapserver/pull/5268,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5268#issuecomment-247432465,"When you use SIZEUNITS meters instead of pixel in your LAYER the SIZE of your LEGEND is very small as long as you define only size. When you define MINSIZE and MAXSIZE the size is ok.
LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
    END 
END


example using SIZE 10

Example using SIZE 100 (legend comes back with a big white extra area at the left and bottom)

when you add MINSIZE and MAXSIZE the Legend SIZE is ok

LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
                MINSIZE 10
                MAXSIZE 10
        COLOR 119 179 0
    END 
END","@astroidex can you confirm that thomas' fix posted here, works in your case?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5268,2016-08-27T11:28:12Z,2016-09-21T07:29:43Z,2016-09-21T07:29:44Z,CLOSED,False,2,2,1,https://github.com/tbonfort,Legend MapServer 7.0.1 Label SIZE is ignored when using SIZEUNITS meters,1,[],https://github.com/mapserver/mapserver/pull/5268,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/5268#issuecomment-248100358,"When you use SIZEUNITS meters instead of pixel in your LAYER the SIZE of your LEGEND is very small as long as you define only size. When you define MINSIZE and MAXSIZE the size is ok.
LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
    END 
END


example using SIZE 10

Example using SIZE 100 (legend comes back with a big white extra area at the left and bottom)

when you add MINSIZE and MAXSIZE the Legend SIZE is ok

LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
                MINSIZE 10
                MAXSIZE 10
        COLOR 119 179 0
    END 
END","@astroidex can you confirm that thomas' fix posted here, works in your case? Or, can you post the sample mapfile + data, so I can test?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5268,2016-08-27T11:28:12Z,2016-09-21T07:29:43Z,2016-09-21T07:29:44Z,CLOSED,False,2,2,1,https://github.com/tbonfort,Legend MapServer 7.0.1 Label SIZE is ignored when using SIZEUNITS meters,1,[],https://github.com/mapserver/mapserver/pull/5268,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/5268#issuecomment-248384982,"When you use SIZEUNITS meters instead of pixel in your LAYER the SIZE of your LEGEND is very small as long as you define only size. When you define MINSIZE and MAXSIZE the size is ok.
LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
    END 
END


example using SIZE 10

Example using SIZE 100 (legend comes back with a big white extra area at the left and bottom)

when you add MINSIZE and MAXSIZE the Legend SIZE is ok

LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
                MINSIZE 10
                MAXSIZE 10
        COLOR 119 179 0
    END 
END","@astroidex can you confirm that thomas' fix posted here, works in your case? Or, can you post the sample mapfile + data, so I can test?  (I'd like to get this included in the MapServer 7.0.2 release this week)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5268,2016-08-27T11:28:12Z,2016-09-21T07:29:43Z,2016-09-21T07:29:44Z,CLOSED,False,2,2,1,https://github.com/tbonfort,Legend MapServer 7.0.1 Label SIZE is ignored when using SIZEUNITS meters,1,[],https://github.com/mapserver/mapserver/pull/5268,https://github.com/tbonfort,5,https://github.com/MapServer/MapServer/pull/5268#issuecomment-248533134,"When you use SIZEUNITS meters instead of pixel in your LAYER the SIZE of your LEGEND is very small as long as you define only size. When you define MINSIZE and MAXSIZE the size is ok.
LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
    END 
END


example using SIZE 10

Example using SIZE 100 (legend comes back with a big white extra area at the left and bottom)

when you add MINSIZE and MAXSIZE the Legend SIZE is ok

LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
                MINSIZE 10
                MAXSIZE 10
        COLOR 119 179 0
    END 
END",applied to branch-7-0,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5267,2016-08-27T11:43:22Z,2016-09-21T07:23:02Z,2018-11-30T16:39:59Z,CLOSED,False,5,3,1,https://github.com/tbonfort,Legend MapServer 7.0.1 Label OFFSET is not supported anymore,1,[],https://github.com/mapserver/mapserver/pull/5267,https://github.com/tbonfort,1,https://github.com/MapServer/MapServer/pull/5267,"After MapServer update from version 6.4 to version 7.0 or 7.01 OFFSET in LEGEND Block does not work anymore.
MapServer 6.4
In my mapfile, the LABEL of my LEGEND is adjusted by specifying an OFFSET in the LABEL-block.
LEGEND-block in the Mapfile (Mapserver 6.4.1):

The OFFSET of 0 -10 centers the LABEL of the LEGEND: legend_mapserv_6_offset.png

Without the OFFSET in the LABEL-Block it looks like this (label is a not in the center, but at the bottom:  legend_mapserv_6_without_offset.png


LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
        OFFSET 0 -10
    END 
END 

MapServer 7.0.1

After the update to version 7 the OFFSET in the LEGEND is ignored and the label no longer appears in the center: legend_mapserv_7_offset.png


LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
        OFFSET 0 -10
    END 
END  


I tested this with the MapServer 7.0.1 on the new OSGeo-Live.","After MapServer update from version 6.4 to version 7.0 or 7.01 OFFSET in LEGEND Block does not work anymore.
MapServer 6.4
In my mapfile, the LABEL of my LEGEND is adjusted by specifying an OFFSET in the LABEL-block.
LEGEND-block in the Mapfile (Mapserver 6.4.1):

The OFFSET of 0 -10 centers the LABEL of the LEGEND: legend_mapserv_6_offset.png

Without the OFFSET in the LABEL-Block it looks like this (label is a not in the center, but at the bottom:  legend_mapserv_6_without_offset.png


LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
        OFFSET 0 -10
    END 
END 

MapServer 7.0.1

After the update to version 7 the OFFSET in the LEGEND is ignored and the label no longer appears in the center: legend_mapserv_7_offset.png


LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
        OFFSET 0 -10
    END 
END  


I tested this with the MapServer 7.0.1 on the new OSGeo-Live.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5267,2016-08-27T11:43:22Z,2016-09-21T07:23:02Z,2018-11-30T16:39:59Z,CLOSED,False,5,3,1,https://github.com/tbonfort,Legend MapServer 7.0.1 Label OFFSET is not supported anymore,1,[],https://github.com/mapserver/mapserver/pull/5267,https://github.com/tbonfort,2,https://github.com/MapServer/MapServer/pull/5267#issuecomment-242912523,"After MapServer update from version 6.4 to version 7.0 or 7.01 OFFSET in LEGEND Block does not work anymore.
MapServer 6.4
In my mapfile, the LABEL of my LEGEND is adjusted by specifying an OFFSET in the LABEL-block.
LEGEND-block in the Mapfile (Mapserver 6.4.1):

The OFFSET of 0 -10 centers the LABEL of the LEGEND: legend_mapserv_6_offset.png

Without the OFFSET in the LABEL-Block it looks like this (label is a not in the center, but at the bottom:  legend_mapserv_6_without_offset.png


LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
        OFFSET 0 -10
    END 
END 

MapServer 7.0.1

After the update to version 7 the OFFSET in the LEGEND is ignored and the label no longer appears in the center: legend_mapserv_7_offset.png


LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
        OFFSET 0 -10
    END 
END  


I tested this with the MapServer 7.0.1 on the new OSGeo-Live.","I've added a tentative fix to the current PR, please check it out",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5267,2016-08-27T11:43:22Z,2016-09-21T07:23:02Z,2018-11-30T16:39:59Z,CLOSED,False,5,3,1,https://github.com/tbonfort,Legend MapServer 7.0.1 Label OFFSET is not supported anymore,1,[],https://github.com/mapserver/mapserver/pull/5267,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/5267#issuecomment-247432559,"After MapServer update from version 6.4 to version 7.0 or 7.01 OFFSET in LEGEND Block does not work anymore.
MapServer 6.4
In my mapfile, the LABEL of my LEGEND is adjusted by specifying an OFFSET in the LABEL-block.
LEGEND-block in the Mapfile (Mapserver 6.4.1):

The OFFSET of 0 -10 centers the LABEL of the LEGEND: legend_mapserv_6_offset.png

Without the OFFSET in the LABEL-Block it looks like this (label is a not in the center, but at the bottom:  legend_mapserv_6_without_offset.png


LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
        OFFSET 0 -10
    END 
END 

MapServer 7.0.1

After the update to version 7 the OFFSET in the LEGEND is ignored and the label no longer appears in the center: legend_mapserv_7_offset.png


LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
        OFFSET 0 -10
    END 
END  


I tested this with the MapServer 7.0.1 on the new OSGeo-Live.","@astroidex can you confirm that thomas' fix posted here, works in your case?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5267,2016-08-27T11:43:22Z,2016-09-21T07:23:02Z,2018-11-30T16:39:59Z,CLOSED,False,5,3,1,https://github.com/tbonfort,Legend MapServer 7.0.1 Label OFFSET is not supported anymore,1,[],https://github.com/mapserver/mapserver/pull/5267,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/5267#issuecomment-248100141,"After MapServer update from version 6.4 to version 7.0 or 7.01 OFFSET in LEGEND Block does not work anymore.
MapServer 6.4
In my mapfile, the LABEL of my LEGEND is adjusted by specifying an OFFSET in the LABEL-block.
LEGEND-block in the Mapfile (Mapserver 6.4.1):

The OFFSET of 0 -10 centers the LABEL of the LEGEND: legend_mapserv_6_offset.png

Without the OFFSET in the LABEL-Block it looks like this (label is a not in the center, but at the bottom:  legend_mapserv_6_without_offset.png


LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
        OFFSET 0 -10
    END 
END 

MapServer 7.0.1

After the update to version 7 the OFFSET in the LEGEND is ignored and the label no longer appears in the center: legend_mapserv_7_offset.png


LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
        OFFSET 0 -10
    END 
END  


I tested this with the MapServer 7.0.1 on the new OSGeo-Live.","@astroidex can you confirm that thomas' fix posted here, works in your case?  Or, can you post the sample mapfile + data, so I can test?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5267,2016-08-27T11:43:22Z,2016-09-21T07:23:02Z,2018-11-30T16:39:59Z,CLOSED,False,5,3,1,https://github.com/tbonfort,Legend MapServer 7.0.1 Label OFFSET is not supported anymore,1,[],https://github.com/mapserver/mapserver/pull/5267,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/5267#issuecomment-248384842,"After MapServer update from version 6.4 to version 7.0 or 7.01 OFFSET in LEGEND Block does not work anymore.
MapServer 6.4
In my mapfile, the LABEL of my LEGEND is adjusted by specifying an OFFSET in the LABEL-block.
LEGEND-block in the Mapfile (Mapserver 6.4.1):

The OFFSET of 0 -10 centers the LABEL of the LEGEND: legend_mapserv_6_offset.png

Without the OFFSET in the LABEL-Block it looks like this (label is a not in the center, but at the bottom:  legend_mapserv_6_without_offset.png


LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
        OFFSET 0 -10
    END 
END 

MapServer 7.0.1

After the update to version 7 the OFFSET in the LEGEND is ignored and the label no longer appears in the center: legend_mapserv_7_offset.png


LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
        OFFSET 0 -10
    END 
END  


I tested this with the MapServer 7.0.1 on the new OSGeo-Live.","@astroidex can you confirm that thomas' fix posted here, works in your case? Or, can you post the sample mapfile + data, so I can test?  (I'd like to get this included in the MapServer 7.0.2 release this week)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5267,2016-08-27T11:43:22Z,2016-09-21T07:23:02Z,2018-11-30T16:39:59Z,CLOSED,False,5,3,1,https://github.com/tbonfort,Legend MapServer 7.0.1 Label OFFSET is not supported anymore,1,[],https://github.com/mapserver/mapserver/pull/5267,https://github.com/astroidex,6,https://github.com/MapServer/MapServer/pull/5267#issuecomment-248520441,"After MapServer update from version 6.4 to version 7.0 or 7.01 OFFSET in LEGEND Block does not work anymore.
MapServer 6.4
In my mapfile, the LABEL of my LEGEND is adjusted by specifying an OFFSET in the LABEL-block.
LEGEND-block in the Mapfile (Mapserver 6.4.1):

The OFFSET of 0 -10 centers the LABEL of the LEGEND: legend_mapserv_6_offset.png

Without the OFFSET in the LABEL-Block it looks like this (label is a not in the center, but at the bottom:  legend_mapserv_6_without_offset.png


LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
        OFFSET 0 -10
    END 
END 

MapServer 7.0.1

After the update to version 7 the OFFSET in the LEGEND is ignored and the label no longer appears in the center: legend_mapserv_7_offset.png


LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
        OFFSET 0 -10
    END 
END  


I tested this with the MapServer 7.0.1 on the new OSGeo-Live.","@jmkenna I added the mapfiles here (coy of your demo mapfile) #5332
Thanks for pushing it. Have to find time to compile & test...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5267,2016-08-27T11:43:22Z,2016-09-21T07:23:02Z,2018-11-30T16:39:59Z,CLOSED,False,5,3,1,https://github.com/tbonfort,Legend MapServer 7.0.1 Label OFFSET is not supported anymore,1,[],https://github.com/mapserver/mapserver/pull/5267,https://github.com/tbonfort,7,https://github.com/MapServer/MapServer/pull/5267#issuecomment-248531898,"After MapServer update from version 6.4 to version 7.0 or 7.01 OFFSET in LEGEND Block does not work anymore.
MapServer 6.4
In my mapfile, the LABEL of my LEGEND is adjusted by specifying an OFFSET in the LABEL-block.
LEGEND-block in the Mapfile (Mapserver 6.4.1):

The OFFSET of 0 -10 centers the LABEL of the LEGEND: legend_mapserv_6_offset.png

Without the OFFSET in the LABEL-Block it looks like this (label is a not in the center, but at the bottom:  legend_mapserv_6_without_offset.png


LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
        OFFSET 0 -10
    END 
END 

MapServer 7.0.1

After the update to version 7 the OFFSET in the LEGEND is ignored and the label no longer appears in the center: legend_mapserv_7_offset.png


LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
        OFFSET 0 -10
    END 
END  


I tested this with the MapServer 7.0.1 on the new OSGeo-Live.","applied to branch-7-0, alongside test",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5267,2016-08-27T11:43:22Z,2016-09-21T07:23:02Z,2018-11-30T16:39:59Z,CLOSED,False,5,3,1,https://github.com/tbonfort,Legend MapServer 7.0.1 Label OFFSET is not supported anymore,1,[],https://github.com/mapserver/mapserver/pull/5267,https://github.com/astroidex,8,https://github.com/MapServer/MapServer/pull/5267#issuecomment-252182193,"After MapServer update from version 6.4 to version 7.0 or 7.01 OFFSET in LEGEND Block does not work anymore.
MapServer 6.4
In my mapfile, the LABEL of my LEGEND is adjusted by specifying an OFFSET in the LABEL-block.
LEGEND-block in the Mapfile (Mapserver 6.4.1):

The OFFSET of 0 -10 centers the LABEL of the LEGEND: legend_mapserv_6_offset.png

Without the OFFSET in the LABEL-Block it looks like this (label is a not in the center, but at the bottom:  legend_mapserv_6_without_offset.png


LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
        OFFSET 0 -10
    END 
END 

MapServer 7.0.1

After the update to version 7 the OFFSET in the LEGEND is ignored and the label no longer appears in the center: legend_mapserv_7_offset.png


LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
        OFFSET 0 -10
    END 
END  


I tested this with the MapServer 7.0.1 on the new OSGeo-Live.","OFFSET works now, but it does not position the text regularly. The distance between the texte rows is sometimes different.
See images

sgk_ms6 4 3 - how it is displayed in MapServer 6.4.3



sgk_ms7 0 2 - how it is displayed in MapServer 7.0.2",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5267,2016-08-27T11:43:22Z,2016-09-21T07:23:02Z,2018-11-30T16:39:59Z,CLOSED,False,5,3,1,https://github.com/tbonfort,Legend MapServer 7.0.1 Label OFFSET is not supported anymore,1,[],https://github.com/mapserver/mapserver/pull/5267,https://github.com/honoref,9,https://github.com/MapServer/MapServer/pull/5267#issuecomment-443262524,"After MapServer update from version 6.4 to version 7.0 or 7.01 OFFSET in LEGEND Block does not work anymore.
MapServer 6.4
In my mapfile, the LABEL of my LEGEND is adjusted by specifying an OFFSET in the LABEL-block.
LEGEND-block in the Mapfile (Mapserver 6.4.1):

The OFFSET of 0 -10 centers the LABEL of the LEGEND: legend_mapserv_6_offset.png

Without the OFFSET in the LABEL-Block it looks like this (label is a not in the center, but at the bottom:  legend_mapserv_6_without_offset.png


LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
        OFFSET 0 -10
    END 
END 

MapServer 7.0.1

After the update to version 7 the OFFSET in the LEGEND is ignored and the label no longer appears in the center: legend_mapserv_7_offset.png


LEGEND
    STATUS ON
    KEYSIZE 30 30
    KEYSPACING 5 3  
    LABEL
        TYPE TRUETYPE
        FONT 'arial' 
        SIZE 10
        COLOR 119 179 0
        OFFSET 0 -10
    END 
END  


I tested this with the MapServer 7.0.1 on the new OSGeo-Live.","I have the same vertical offset between icons and text. It's because height of texts are calculate the more short arround the text, and with differents texts, high are differents.
character g is heigher than character o. And even if the character 8 as the same height than g, they are not align o8g. Mapserver align each text on the top.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5312,2016-08-27T12:20:49Z,2016-08-29T11:06:01Z,2016-08-29T11:06:08Z,CLOSED,False,5,4,1,https://github.com/tbonfort,Fix travis builds,11,[],https://github.com/mapserver/mapserver/pull/5312,https://github.com/tbonfort,1,https://github.com/MapServer/MapServer/pull/5312,shamelessly taken from gdal,shamelessly taken from gdal,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5312,2016-08-27T12:20:49Z,2016-08-29T11:06:01Z,2016-08-29T11:06:08Z,CLOSED,False,5,4,1,https://github.com/tbonfort,Fix travis builds,11,[],https://github.com/mapserver/mapserver/pull/5312,https://github.com/tbonfort,2,https://github.com/MapServer/MapServer/pull/5312#issuecomment-243095285,shamelessly taken from gdal,applied to branch-7-0 in 5ef69c9,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5313,2016-08-30T22:37:25Z,2016-09-03T23:18:13Z,2016-09-03T23:18:13Z,CLOSED,False,20,20,9,https://github.com/geographika,Change all instances of strdup to msStrdup,3,[],https://github.com/mapserver/mapserver/pull/5313,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5313,"See issue #5277 - fixes Windows memory issues in conjunction with using msFree
I left the following in mapstring.c alone. I presume this shouldn't be called anyway if only msStrdup is used?
#ifndef HAVE_STRDUP
char  *strdup(char *s)
{
  char  *s1;
  ...","See issue #5277 - fixes Windows memory issues in conjunction with using msFree
I left the following in mapstring.c alone. I presume this shouldn't be called anyway if only msStrdup is used?
#ifndef HAVE_STRDUP
char  *strdup(char *s)
{
  char  *s1;
  ...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5313,2016-08-30T22:37:25Z,2016-09-03T23:18:13Z,2016-09-03T23:18:13Z,CLOSED,False,20,20,9,https://github.com/geographika,Change all instances of strdup to msStrdup,3,[],https://github.com/mapserver/mapserver/pull/5313,https://github.com/tbonfort,2,https://github.com/MapServer/MapServer/pull/5313#issuecomment-243698082,"See issue #5277 - fixes Windows memory issues in conjunction with using msFree
I left the following in mapstring.c alone. I presume this shouldn't be called anyway if only msStrdup is used?
#ifndef HAVE_STRDUP
char  *strdup(char *s)
{
  char  *s1;
  ...","There's still a call to strdup in mapcopy.h
The calls to strdup in mapscript should also probably be changed
As you noted, you can remove the mapserver provided strdup() function and the HAVE_STRDUP cmake check",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5313,2016-08-30T22:37:25Z,2016-09-03T23:18:13Z,2016-09-03T23:18:13Z,CLOSED,False,20,20,9,https://github.com/geographika,Change all instances of strdup to msStrdup,3,[],https://github.com/mapserver/mapserver/pull/5313,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5313#issuecomment-244575180,"See issue #5277 - fixes Windows memory issues in conjunction with using msFree
I left the following in mapstring.c alone. I presume this shouldn't be called anyway if only msStrdup is used?
#ifndef HAVE_STRDUP
char  *strdup(char *s)
{
  char  *s1;
  ...",Superseded by #5321,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5318,2016-09-02T15:22:48Z,2016-12-05T12:05:20Z,2017-11-13T17:01:20Z,CLOSED,False,12,1,2,https://github.com/tbonfort,php mapscript build error with php 5.6.25,2,[],https://github.com/mapserver/mapserver/pull/5318,https://github.com/tbonfort,1,https://github.com/MapServer/MapServer/pull/5318,"5.6.23 builds fine, 5.6.25 fails with:
/usr/obj/ports/mapserver-7.0.1/mapserver-7.0.1/mapscript/php/error.c:71: error: called object 'zend_error' is not a function

pointing at https://github.com/mapserver/mapserver/blob/branch-7-0/mapscript/php/error.c#L71
this seems caused by this upstream change: http://git.php.net/?p=php-src.git;a=commitdiff;h=791a98eb1c66d2340b4e897ab60e4a6700435b5b
When unrolling the IF_GET_STRING macro, something blows.. tried with gcc 4.2.1 and clang 3.8.1, using libestdc++ 4.2.1 in both cases.","5.6.23 builds fine, 5.6.25 fails with:
/usr/obj/ports/mapserver-7.0.1/mapserver-7.0.1/mapscript/php/error.c:71: error: called object 'zend_error' is not a function

pointing at https://github.com/mapserver/mapserver/blob/branch-7-0/mapscript/php/error.c#L71
this seems caused by this upstream change: http://git.php.net/?p=php-src.git;a=commitdiff;h=791a98eb1c66d2340b4e897ab60e4a6700435b5b
When unrolling the IF_GET_STRING macro, something blows.. tried with gcc 4.2.1 and clang 3.8.1, using libestdc++ 4.2.1 in both cases.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5318,2016-09-02T15:22:48Z,2016-12-05T12:05:20Z,2017-11-13T17:01:20Z,CLOSED,False,12,1,2,https://github.com/tbonfort,php mapscript build error with php 5.6.25,2,[],https://github.com/mapserver/mapserver/pull/5318,https://github.com/landryb,2,https://github.com/MapServer/MapServer/pull/5318#issuecomment-244404679,"5.6.23 builds fine, 5.6.25 fails with:
/usr/obj/ports/mapserver-7.0.1/mapserver-7.0.1/mapscript/php/error.c:71: error: called object 'zend_error' is not a function

pointing at https://github.com/mapserver/mapserver/blob/branch-7-0/mapscript/php/error.c#L71
this seems caused by this upstream change: http://git.php.net/?p=php-src.git;a=commitdiff;h=791a98eb1c66d2340b4e897ab60e4a6700435b5b
When unrolling the IF_GET_STRING macro, something blows.. tried with gcc 4.2.1 and clang 3.8.1, using libestdc++ 4.2.1 in both cases.","Adding
 #undef ZVAL_STRING
 #define ZVAL_STRING(z, s, duplicate) do {       \
                 const char *__s=(s);                            \
                 zval *__z = (z);                                        \
                 Z_STRLEN_P(__z) = strlen(__s);          \
                 Z_STRVAL_P(__z) = (duplicate?estrndup(__s, Z_STRLEN_P(__z)):(char*)__s);\
                 Z_TYPE_P(__z) = IS_STRING;                      \
         } while (0)


to the top of error.c after the #include work arounds the issue - the defined is copied from zend_API.h",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5318,2016-09-02T15:22:48Z,2016-12-05T12:05:20Z,2017-11-13T17:01:20Z,CLOSED,False,12,1,2,https://github.com/tbonfort,php mapscript build error with php 5.6.25,2,[],https://github.com/mapserver/mapserver/pull/5318,https://github.com/landryb,3,https://github.com/MapServer/MapServer/pull/5318#issuecomment-244408034,"5.6.23 builds fine, 5.6.25 fails with:
/usr/obj/ports/mapserver-7.0.1/mapserver-7.0.1/mapscript/php/error.c:71: error: called object 'zend_error' is not a function

pointing at https://github.com/mapserver/mapserver/blob/branch-7-0/mapscript/php/error.c#L71
this seems caused by this upstream change: http://git.php.net/?p=php-src.git;a=commitdiff;h=791a98eb1c66d2340b4e897ab60e4a6700435b5b
When unrolling the IF_GET_STRING macro, something blows.. tried with gcc 4.2.1 and clang 3.8.1, using libestdc++ 4.2.1 in both cases.",Im not sure that's a correct fix but this macro maze is beyond every horror i saw so far.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5318,2016-09-02T15:22:48Z,2016-12-05T12:05:20Z,2017-11-13T17:01:20Z,CLOSED,False,12,1,2,https://github.com/tbonfort,php mapscript build error with php 5.6.25,2,[],https://github.com/mapserver/mapserver/pull/5318,https://github.com/tbonfort,4,https://github.com/MapServer/MapServer/pull/5318#issuecomment-244408805,"5.6.23 builds fine, 5.6.25 fails with:
/usr/obj/ports/mapserver-7.0.1/mapserver-7.0.1/mapscript/php/error.c:71: error: called object 'zend_error' is not a function

pointing at https://github.com/mapserver/mapserver/blob/branch-7-0/mapscript/php/error.c#L71
this seems caused by this upstream change: http://git.php.net/?p=php-src.git;a=commitdiff;h=791a98eb1c66d2340b4e897ab60e4a6700435b5b
When unrolling the IF_GET_STRING macro, something blows.. tried with gcc 4.2.1 and clang 3.8.1, using libestdc++ 4.2.1 in both cases.","@landryb it fixes the broken tests we were having with 5.6.25 on travis CI, thanks!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5318,2016-09-02T15:22:48Z,2016-12-05T12:05:20Z,2017-11-13T17:01:20Z,CLOSED,False,12,1,2,https://github.com/tbonfort,php mapscript build error with php 5.6.25,2,[],https://github.com/mapserver/mapserver/pull/5318,https://github.com/tbonfort,5,https://github.com/MapServer/MapServer/pull/5318#issuecomment-246755864,"5.6.23 builds fine, 5.6.25 fails with:
/usr/obj/ports/mapserver-7.0.1/mapserver-7.0.1/mapscript/php/error.c:71: error: called object 'zend_error' is not a function

pointing at https://github.com/mapserver/mapserver/blob/branch-7-0/mapscript/php/error.c#L71
this seems caused by this upstream change: http://git.php.net/?p=php-src.git;a=commitdiff;h=791a98eb1c66d2340b4e897ab60e4a6700435b5b
When unrolling the IF_GET_STRING macro, something blows.. tried with gcc 4.2.1 and clang 3.8.1, using libestdc++ 4.2.1 in both cases.",This PR needs to be checked against php <=5.6.24 before merge,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5318,2016-09-02T15:22:48Z,2016-12-05T12:05:20Z,2017-11-13T17:01:20Z,CLOSED,False,12,1,2,https://github.com/tbonfort,php mapscript build error with php 5.6.25,2,[],https://github.com/mapserver/mapserver/pull/5318,https://github.com/tbonfort,6,https://github.com/MapServer/MapServer/pull/5318#issuecomment-264838027,"5.6.23 builds fine, 5.6.25 fails with:
/usr/obj/ports/mapserver-7.0.1/mapserver-7.0.1/mapscript/php/error.c:71: error: called object 'zend_error' is not a function

pointing at https://github.com/mapserver/mapserver/blob/branch-7-0/mapscript/php/error.c#L71
this seems caused by this upstream change: http://git.php.net/?p=php-src.git;a=commitdiff;h=791a98eb1c66d2340b4e897ab60e4a6700435b5b
When unrolling the IF_GET_STRING macro, something blows.. tried with gcc 4.2.1 and clang 3.8.1, using libestdc++ 4.2.1 in both cases.",applied to branch-7-0 in d5cc584,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5318,2016-09-02T15:22:48Z,2016-12-05T12:05:20Z,2017-11-13T17:01:20Z,CLOSED,False,12,1,2,https://github.com/tbonfort,php mapscript build error with php 5.6.25,2,[],https://github.com/mapserver/mapserver/pull/5318,https://github.com/sdlime,7,https://github.com/MapServer/MapServer/pull/5318#issuecomment-343985577,"5.6.23 builds fine, 5.6.25 fails with:
/usr/obj/ports/mapserver-7.0.1/mapserver-7.0.1/mapscript/php/error.c:71: error: called object 'zend_error' is not a function

pointing at https://github.com/mapserver/mapserver/blob/branch-7-0/mapscript/php/error.c#L71
this seems caused by this upstream change: http://git.php.net/?p=php-src.git;a=commitdiff;h=791a98eb1c66d2340b4e897ab60e4a6700435b5b
When unrolling the IF_GET_STRING macro, something blows.. tried with gcc 4.2.1 and clang 3.8.1, using libestdc++ 4.2.1 in both cases.","@jmckenna, should this be back ported to the 6.4 branch? --Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5321,2016-09-03T23:17:12Z,2016-09-19T19:29:37Z,2016-09-19T20:30:08Z,MERGED,True,67,88,32,https://github.com/geographika,Change strdup to use MsStrdup throughout codebase,3,[],https://github.com/mapserver/mapserver/pull/5321,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5321,"See issue #5277 - fixes Windows memory issues in conjunction with using msFree
The new pull request hopefully addresses the comments from @tbonfort in a previous pull request:
#5313 (comment)


There's still a call to strdup in mapcopy.h
The calls to strdup in mapscript should also probably be changed
As you noted, you can remove the mapserver provided strdup() function and the HAVE_STRDUP cmake check


The removal of the replacement strdup function  in mapstring.c may mean if any new code doesn't use msStrdup then it will crash on Windows (or at least in debugger mode - strdup still exists even if it is deprecated).","See issue #5277 - fixes Windows memory issues in conjunction with using msFree
The new pull request hopefully addresses the comments from @tbonfort in a previous pull request:
#5313 (comment)


There's still a call to strdup in mapcopy.h
The calls to strdup in mapscript should also probably be changed
As you noted, you can remove the mapserver provided strdup() function and the HAVE_STRDUP cmake check


The removal of the replacement strdup function  in mapstring.c may mean if any new code doesn't use msStrdup then it will crash on Windows (or at least in debugger mode - strdup still exists even if it is deprecated).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5321,2016-09-03T23:17:12Z,2016-09-19T19:29:37Z,2016-09-19T20:30:08Z,MERGED,True,67,88,32,https://github.com/geographika,Change strdup to use MsStrdup throughout codebase,3,[],https://github.com/mapserver/mapserver/pull/5321,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5321#issuecomment-248098536,"See issue #5277 - fixes Windows memory issues in conjunction with using msFree
The new pull request hopefully addresses the comments from @tbonfort in a previous pull request:
#5313 (comment)


There's still a call to strdup in mapcopy.h
The calls to strdup in mapscript should also probably be changed
As you noted, you can remove the mapserver provided strdup() function and the HAVE_STRDUP cmake check


The removal of the replacement strdup function  in mapstring.c may mean if any new code doesn't use msStrdup then it will crash on Windows (or at least in debugger mode - strdup still exists even if it is deprecated).",@geographika can you also create a pull request for this to branch-7-0 ?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5324,2016-09-13T17:44:50Z,2016-09-13T17:54:07Z,2016-09-13T18:10:04Z,MERGED,True,3,3,2,https://github.com/sebastic,"Fix ""didnt"" typo, replace with ""didn't"".",1,[],https://github.com/mapserver/mapserver/pull/5324,https://github.com/sebastic,1,https://github.com/MapServer/MapServer/pull/5324,"Triggered by Jeff's 7.0.2 maintenance release announcement, it's high time to forward this patch upstream.
The spelling error was reported by the lintian QA tool for the Debian package build.","Triggered by Jeff's 7.0.2 maintenance release announcement, it's high time to forward this patch upstream.
The spelling error was reported by the lintian QA tool for the Debian package build.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5324,2016-09-13T17:44:50Z,2016-09-13T17:54:07Z,2016-09-13T18:10:04Z,MERGED,True,3,3,2,https://github.com/sebastic,"Fix ""didnt"" typo, replace with ""didn't"".",1,[],https://github.com/mapserver/mapserver/pull/5324,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5324#issuecomment-246766413,"Triggered by Jeff's 7.0.2 maintenance release announcement, it's high time to forward this patch upstream.
The spelling error was reported by the lintian QA tool for the Debian package build.",thanks @sebastic,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5327,2016-09-15T17:59:47Z,2016-09-16T08:46:39Z,2016-09-21T00:18:28Z,CLOSED,False,11,0,1,https://github.com/gogglesguy,Fix forgotten cleanup of searchpoly,1,[],https://github.com/mapserver/mapserver/pull/5327,https://github.com/gogglesguy,1,https://github.com/MapServer/MapServer/pull/5327,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5327,2016-09-15T17:59:47Z,2016-09-16T08:46:39Z,2016-09-21T00:18:28Z,CLOSED,False,11,0,1,https://github.com/gogglesguy,Fix forgotten cleanup of searchpoly,1,[],https://github.com/mapserver/mapserver/pull/5327,https://github.com/tbonfort,2,https://github.com/MapServer/MapServer/pull/5327#issuecomment-247549651,,applied in 5aa2548,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5328,2016-09-15T22:41:30Z,2016-09-16T08:51:01Z,2016-09-21T00:17:14Z,CLOSED,False,59,5,3,https://github.com/gogglesguy,Fix misc memory cleanups,4,[],https://github.com/mapserver/mapserver/pull/5328,https://github.com/gogglesguy,1,https://github.com/MapServer/MapServer/pull/5328,Fixes various memory leaks.,Fixes various memory leaks.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5328,2016-09-15T22:41:30Z,2016-09-16T08:51:01Z,2016-09-21T00:17:14Z,CLOSED,False,59,5,3,https://github.com/gogglesguy,Fix misc memory cleanups,4,[],https://github.com/mapserver/mapserver/pull/5328,https://github.com/tbonfort,2,https://github.com/MapServer/MapServer/pull/5328#issuecomment-247550380,Fixes various memory leaks.,applied/rebased to branch-7-0,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5329,2016-09-19T20:58:28Z,2016-09-20T13:17:48Z,2016-09-21T00:15:57Z,MERGED,True,18,0,3,https://github.com/gogglesguy,Fix more misc. leaks,3,[],https://github.com/mapserver/mapserver/pull/5329,https://github.com/gogglesguy,1,https://github.com/MapServer/MapServer/pull/5329,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5329,2016-09-19T20:58:28Z,2016-09-20T13:17:48Z,2016-09-21T00:15:57Z,MERGED,True,18,0,3,https://github.com/gogglesguy,Fix more misc. leaks,3,[],https://github.com/mapserver/mapserver/pull/5329,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5329#issuecomment-248298414,,thanks @gogglesguy,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5326,2016-09-20T10:05:45Z,2016-09-20T10:50:13Z,2016-09-20T13:47:05Z,CLOSED,False,8,8,1,https://github.com/tbonfort,Label frame offset with leader line,3,[],https://github.com/mapserver/mapserver/pull/5326,https://github.com/tbonfort,1,https://github.com/MapServer/MapServer/pull/5326,"When using the LEADER for point labels, the GEOMTRANSFORM 'labelpoly' frame around the label gets an offset both vertically and horizontally. See the image below where the bottom-left label has a leader, but the green frame is moved a few pixels down and to the right. The label which rendered without a LEADER has the correct frame around it.

Here is a section of my mapfile for the relevant layer:
LABEL 
    WRAP ""!""
    ALIGN center
    TEXT ('[name]' + ""!D116.7 "" + '[ident]')
    MAXSCALEDENOM 2600064
    POSITION auto
    PARTIALS false
    SIZE 8 
    COLOR 100 150 100
    TYPE truetype 
    FONT vera
    FORCE false 
    STYLE
            GEOMTRANSFORM 'labelpoly'
            OFFSET 2 2
            COLOR 150 200 150
            OUTLINECOLOR 150 200 150
            WIDTH 1
            OPACITY 100
    END
    STYLE
            GEOMTRANSFORM 'labelpoly'
            COLOR 255 255 255
            OUTLINECOLOR 150 200 150
            WIDTH 1
            OPACITY 95
    END
END
LEADER
    GRIDSTEP 40
    MAXDISTANCE 1000
    STYLE
            COLOR 150 200 150
            WIDTH 2
    END
END

Thanks,
Stephen","When using the LEADER for point labels, the GEOMTRANSFORM 'labelpoly' frame around the label gets an offset both vertically and horizontally. See the image below where the bottom-left label has a leader, but the green frame is moved a few pixels down and to the right. The label which rendered without a LEADER has the correct frame around it.

Here is a section of my mapfile for the relevant layer:
LABEL 
    WRAP ""!""
    ALIGN center
    TEXT ('[name]' + ""!D116.7 "" + '[ident]')
    MAXSCALEDENOM 2600064
    POSITION auto
    PARTIALS false
    SIZE 8 
    COLOR 100 150 100
    TYPE truetype 
    FONT vera
    FORCE false 
    STYLE
            GEOMTRANSFORM 'labelpoly'
            OFFSET 2 2
            COLOR 150 200 150
            OUTLINECOLOR 150 200 150
            WIDTH 1
            OPACITY 100
    END
    STYLE
            GEOMTRANSFORM 'labelpoly'
            COLOR 255 255 255
            OUTLINECOLOR 150 200 150
            WIDTH 1
            OPACITY 95
    END
END
LEADER
    GRIDSTEP 40
    MAXDISTANCE 1000
    STYLE
            COLOR 150 200 150
            WIDTH 2
    END
END

Thanks,
Stephen",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5326,2016-09-20T10:05:45Z,2016-09-20T10:50:13Z,2016-09-20T13:47:05Z,CLOSED,False,8,8,1,https://github.com/tbonfort,Label frame offset with leader line,3,[],https://github.com/mapserver/mapserver/pull/5326,https://github.com/tbonfort,2,https://github.com/MapServer/MapServer/pull/5326#issuecomment-247923871,"When using the LEADER for point labels, the GEOMTRANSFORM 'labelpoly' frame around the label gets an offset both vertically and horizontally. See the image below where the bottom-left label has a leader, but the green frame is moved a few pixels down and to the right. The label which rendered without a LEADER has the correct frame around it.

Here is a section of my mapfile for the relevant layer:
LABEL 
    WRAP ""!""
    ALIGN center
    TEXT ('[name]' + ""!D116.7 "" + '[ident]')
    MAXSCALEDENOM 2600064
    POSITION auto
    PARTIALS false
    SIZE 8 
    COLOR 100 150 100
    TYPE truetype 
    FONT vera
    FORCE false 
    STYLE
            GEOMTRANSFORM 'labelpoly'
            OFFSET 2 2
            COLOR 150 200 150
            OUTLINECOLOR 150 200 150
            WIDTH 1
            OPACITY 100
    END
    STYLE
            GEOMTRANSFORM 'labelpoly'
            COLOR 255 255 255
            OUTLINECOLOR 150 200 150
            WIDTH 1
            OPACITY 95
    END
END
LEADER
    GRIDSTEP 40
    MAXDISTANCE 1000
    STYLE
            COLOR 150 200 150
            WIDTH 2
    END
END

Thanks,
Stephen",Please provide a complete testcase (mapfile+data+request) that reproduces this.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5326,2016-09-20T10:05:45Z,2016-09-20T10:50:13Z,2016-09-20T13:47:05Z,CLOSED,False,8,8,1,https://github.com/tbonfort,Label frame offset with leader line,3,[],https://github.com/mapserver/mapserver/pull/5326,https://github.com/stephendoc,3,https://github.com/MapServer/MapServer/pull/5326#issuecomment-248151072,"When using the LEADER for point labels, the GEOMTRANSFORM 'labelpoly' frame around the label gets an offset both vertically and horizontally. See the image below where the bottom-left label has a leader, but the green frame is moved a few pixels down and to the right. The label which rendered without a LEADER has the correct frame around it.

Here is a section of my mapfile for the relevant layer:
LABEL 
    WRAP ""!""
    ALIGN center
    TEXT ('[name]' + ""!D116.7 "" + '[ident]')
    MAXSCALEDENOM 2600064
    POSITION auto
    PARTIALS false
    SIZE 8 
    COLOR 100 150 100
    TYPE truetype 
    FONT vera
    FORCE false 
    STYLE
            GEOMTRANSFORM 'labelpoly'
            OFFSET 2 2
            COLOR 150 200 150
            OUTLINECOLOR 150 200 150
            WIDTH 1
            OPACITY 100
    END
    STYLE
            GEOMTRANSFORM 'labelpoly'
            COLOR 255 255 255
            OUTLINECOLOR 150 200 150
            WIDTH 1
            OPACITY 95
    END
END
LEADER
    GRIDSTEP 40
    MAXDISTANCE 1000
    STYLE
            COLOR 150 200 150
            WIDTH 2
    END
END

Thanks,
Stephen","Hi Thomas,
Here it is, data and mapfile:
ticket.zip
I call it with:
mapserv.fcgi?MAP=/path/to/newtest.map&SERVICE=WMS&VERSION=1.3.0&WIDTH=800&HEIGHT=800&FORMAT=image/png&REQUEST=GetMap&LAYERS=cities&STYLES=&CRS=EPSG:3857&BBOX=-179,-79,179.122902,79
It produces an image like below, see Brussels, Denver and Oslo for example:

I have noticed a workaround, and that is to not use ""POSITION auto"" for the LABEL. If I instead use ""POSITION lc"", the result is:

And that looks correct with respect to the label frame. Now, I just need to find a way to make the leader and label look connected, without using ""POSITION cc"", since that won't really look good for labels without leader as they would hide the feature. :)
Regards,
Stephen",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5326,2016-09-20T10:05:45Z,2016-09-20T10:50:13Z,2016-09-20T13:47:05Z,CLOSED,False,8,8,1,https://github.com/tbonfort,Label frame offset with leader line,3,[],https://github.com/mapserver/mapserver/pull/5326,https://github.com/tbonfort,4,https://github.com/MapServer/MapServer/pull/5326#issuecomment-248261958,"When using the LEADER for point labels, the GEOMTRANSFORM 'labelpoly' frame around the label gets an offset both vertically and horizontally. See the image below where the bottom-left label has a leader, but the green frame is moved a few pixels down and to the right. The label which rendered without a LEADER has the correct frame around it.

Here is a section of my mapfile for the relevant layer:
LABEL 
    WRAP ""!""
    ALIGN center
    TEXT ('[name]' + ""!D116.7 "" + '[ident]')
    MAXSCALEDENOM 2600064
    POSITION auto
    PARTIALS false
    SIZE 8 
    COLOR 100 150 100
    TYPE truetype 
    FONT vera
    FORCE false 
    STYLE
            GEOMTRANSFORM 'labelpoly'
            OFFSET 2 2
            COLOR 150 200 150
            OUTLINECOLOR 150 200 150
            WIDTH 1
            OPACITY 100
    END
    STYLE
            GEOMTRANSFORM 'labelpoly'
            COLOR 255 255 255
            OUTLINECOLOR 150 200 150
            WIDTH 1
            OPACITY 95
    END
END
LEADER
    GRIDSTEP 40
    MAXDISTANCE 1000
    STYLE
            COLOR 150 200 150
            WIDTH 2
    END
END

Thanks,
Stephen","I've attached a fix for this. There was also a bug on the offseted label computations, as in your example the red symbol should also be offseted instead of remaining on the original position.
If you don't need a symbol attached to that label you should be OK.
Support for offsetting only part of a label (i.e. in your example the text but not the red dot) is not implemented, you can contact me if that is something you want to fund. The use case implemented is to offset a whole complex symbol, e.g. a meteo forecast icon.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5326,2016-09-20T10:05:45Z,2016-09-20T10:50:13Z,2016-09-20T13:47:05Z,CLOSED,False,8,8,1,https://github.com/tbonfort,Label frame offset with leader line,3,[],https://github.com/mapserver/mapserver/pull/5326,https://github.com/tbonfort,5,https://github.com/MapServer/MapServer/pull/5326#issuecomment-248267584,"When using the LEADER for point labels, the GEOMTRANSFORM 'labelpoly' frame around the label gets an offset both vertically and horizontally. See the image below where the bottom-left label has a leader, but the green frame is moved a few pixels down and to the right. The label which rendered without a LEADER has the correct frame around it.

Here is a section of my mapfile for the relevant layer:
LABEL 
    WRAP ""!""
    ALIGN center
    TEXT ('[name]' + ""!D116.7 "" + '[ident]')
    MAXSCALEDENOM 2600064
    POSITION auto
    PARTIALS false
    SIZE 8 
    COLOR 100 150 100
    TYPE truetype 
    FONT vera
    FORCE false 
    STYLE
            GEOMTRANSFORM 'labelpoly'
            OFFSET 2 2
            COLOR 150 200 150
            OUTLINECOLOR 150 200 150
            WIDTH 1
            OPACITY 100
    END
    STYLE
            GEOMTRANSFORM 'labelpoly'
            COLOR 255 255 255
            OUTLINECOLOR 150 200 150
            WIDTH 1
            OPACITY 95
    END
END
LEADER
    GRIDSTEP 40
    MAXDISTANCE 1000
    STYLE
            COLOR 150 200 150
            WIDTH 2
    END
END

Thanks,
Stephen",applied to branch-7-0,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5326,2016-09-20T10:05:45Z,2016-09-20T10:50:13Z,2016-09-20T13:47:05Z,CLOSED,False,8,8,1,https://github.com/tbonfort,Label frame offset with leader line,3,[],https://github.com/mapserver/mapserver/pull/5326,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/5326#issuecomment-248303643,"When using the LEADER for point labels, the GEOMTRANSFORM 'labelpoly' frame around the label gets an offset both vertically and horizontally. See the image below where the bottom-left label has a leader, but the green frame is moved a few pixels down and to the right. The label which rendered without a LEADER has the correct frame around it.

Here is a section of my mapfile for the relevant layer:
LABEL 
    WRAP ""!""
    ALIGN center
    TEXT ('[name]' + ""!D116.7 "" + '[ident]')
    MAXSCALEDENOM 2600064
    POSITION auto
    PARTIALS false
    SIZE 8 
    COLOR 100 150 100
    TYPE truetype 
    FONT vera
    FORCE false 
    STYLE
            GEOMTRANSFORM 'labelpoly'
            OFFSET 2 2
            COLOR 150 200 150
            OUTLINECOLOR 150 200 150
            WIDTH 1
            OPACITY 100
    END
    STYLE
            GEOMTRANSFORM 'labelpoly'
            COLOR 255 255 255
            OUTLINECOLOR 150 200 150
            WIDTH 1
            OPACITY 95
    END
END
LEADER
    GRIDSTEP 40
    MAXDISTANCE 1000
    STYLE
            COLOR 150 200 150
            WIDTH 2
    END
END

Thanks,
Stephen","Tested with branch-7-0.  Here are the results, using that sample mapfile (which I see was initially written by me, ha, small world):
MapServer 7.01:

MapServer-branch-7-0",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5326,2016-09-20T10:05:45Z,2016-09-20T10:50:13Z,2016-09-20T13:47:05Z,CLOSED,False,8,8,1,https://github.com/tbonfort,Label frame offset with leader line,3,[],https://github.com/mapserver/mapserver/pull/5326,https://github.com/jmckenna,7,https://github.com/MapServer/MapServer/pull/5326#issuecomment-248304110,"When using the LEADER for point labels, the GEOMTRANSFORM 'labelpoly' frame around the label gets an offset both vertically and horizontally. See the image below where the bottom-left label has a leader, but the green frame is moved a few pixels down and to the right. The label which rendered without a LEADER has the correct frame around it.

Here is a section of my mapfile for the relevant layer:
LABEL 
    WRAP ""!""
    ALIGN center
    TEXT ('[name]' + ""!D116.7 "" + '[ident]')
    MAXSCALEDENOM 2600064
    POSITION auto
    PARTIALS false
    SIZE 8 
    COLOR 100 150 100
    TYPE truetype 
    FONT vera
    FORCE false 
    STYLE
            GEOMTRANSFORM 'labelpoly'
            OFFSET 2 2
            COLOR 150 200 150
            OUTLINECOLOR 150 200 150
            WIDTH 1
            OPACITY 100
    END
    STYLE
            GEOMTRANSFORM 'labelpoly'
            COLOR 255 255 255
            OUTLINECOLOR 150 200 150
            WIDTH 1
            OPACITY 95
    END
END
LEADER
    GRIDSTEP 40
    MAXDISTANCE 1000
    STYLE
            COLOR 150 200 150
            WIDTH 2
    END
END

Thanks,
Stephen","Yikes, I prefer the old MapServer 7.0.1 results.  I find the branch-7-0 resulting map image confusing in terms of leader lines.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5326,2016-09-20T10:05:45Z,2016-09-20T10:50:13Z,2016-09-20T13:47:05Z,CLOSED,False,8,8,1,https://github.com/tbonfort,Label frame offset with leader line,3,[],https://github.com/mapserver/mapserver/pull/5326,https://github.com/jmckenna,8,https://github.com/MapServer/MapServer/pull/5326#issuecomment-248305649,"When using the LEADER for point labels, the GEOMTRANSFORM 'labelpoly' frame around the label gets an offset both vertically and horizontally. See the image below where the bottom-left label has a leader, but the green frame is moved a few pixels down and to the right. The label which rendered without a LEADER has the correct frame around it.

Here is a section of my mapfile for the relevant layer:
LABEL 
    WRAP ""!""
    ALIGN center
    TEXT ('[name]' + ""!D116.7 "" + '[ident]')
    MAXSCALEDENOM 2600064
    POSITION auto
    PARTIALS false
    SIZE 8 
    COLOR 100 150 100
    TYPE truetype 
    FONT vera
    FORCE false 
    STYLE
            GEOMTRANSFORM 'labelpoly'
            OFFSET 2 2
            COLOR 150 200 150
            OUTLINECOLOR 150 200 150
            WIDTH 1
            OPACITY 100
    END
    STYLE
            GEOMTRANSFORM 'labelpoly'
            COLOR 255 255 255
            OUTLINECOLOR 150 200 150
            WIDTH 1
            OPACITY 95
    END
END
LEADER
    GRIDSTEP 40
    MAXDISTANCE 1000
    STYLE
            COLOR 150 200 150
            WIDTH 2
    END
END

Thanks,
Stephen","Ah ok it is the labelframe, which does display properly in the branch-7-0 image.  sorry for the noise.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5331,2016-09-21T00:14:59Z,2016-09-21T08:05:56Z,2016-09-21T08:05:56Z,CLOSED,False,25,9,1,https://github.com/gogglesguy,Fix issue #5330,1,[],https://github.com/mapserver/mapserver/pull/5331,https://github.com/gogglesguy,1,https://github.com/MapServer/MapServer/pull/5331,"Always close GDAL handle for MS_KERNELDENSITY
Add missing msAcquireLock/msReleaseLock to MS_KERNELDENSITY path since remaining code call msReleaseLock.","Always close GDAL handle for MS_KERNELDENSITY
Add missing msAcquireLock/msReleaseLock to MS_KERNELDENSITY path since remaining code call msReleaseLock.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5331,2016-09-21T00:14:59Z,2016-09-21T08:05:56Z,2016-09-21T08:05:56Z,CLOSED,False,25,9,1,https://github.com/gogglesguy,Fix issue #5330,1,[],https://github.com/mapserver/mapserver/pull/5331,https://github.com/tbonfort,2,https://github.com/MapServer/MapServer/pull/5331#issuecomment-248540607,"Always close GDAL handle for MS_KERNELDENSITY
Add missing msAcquireLock/msReleaseLock to MS_KERNELDENSITY path since remaining code call msReleaseLock.",applied in branch-7-0 in 3493927,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5332,2016-09-21T06:07:19Z,2016-09-21T07:21:49Z,2016-09-21T13:11:44Z,CLOSED,False,494,0,2,https://github.com/astroidex,mapfiles for ticket 5267 and 5268,1,[],https://github.com/mapserver/mapserver/pull/5332,https://github.com/astroidex,1,https://github.com/MapServer/MapServer/pull/5332,"Mapfiles for tickes. See tickets for screenshots

5267 Legend with LABEL OFFSET #5267
5268 Legend Size with SIZEUNITS meters #5268

They were before in mapserver/msautotest_DEPRECATED. See conversation here
MapServer/msautotest_DEPRECATED#33","Mapfiles for tickes. See tickets for screenshots

5267 Legend with LABEL OFFSET #5267
5268 Legend Size with SIZEUNITS meters #5268

They were before in mapserver/msautotest_DEPRECATED. See conversation here
MapServer/msautotest_DEPRECATED#33",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5332,2016-09-21T06:07:19Z,2016-09-21T07:21:49Z,2016-09-21T13:11:44Z,CLOSED,False,494,0,2,https://github.com/astroidex,mapfiles for ticket 5267 and 5268,1,[],https://github.com/mapserver/mapserver/pull/5332,https://github.com/tbonfort,2,https://github.com/MapServer/MapServer/pull/5332#issuecomment-248531686,"Mapfiles for tickes. See tickets for screenshots

5267 Legend with LABEL OFFSET #5267
5268 Legend Size with SIZEUNITS meters #5268

They were before in mapserver/msautotest_DEPRECATED. See conversation here
MapServer/msautotest_DEPRECATED#33","tests added to relevant PRs, thanks @astroidex",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5332,2016-09-21T06:07:19Z,2016-09-21T07:21:49Z,2016-09-21T13:11:44Z,CLOSED,False,494,0,2,https://github.com/astroidex,mapfiles for ticket 5267 and 5268,1,[],https://github.com/mapserver/mapserver/pull/5332,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/5332#issuecomment-248605285,"Mapfiles for tickes. See tickets for screenshots

5267 Legend with LABEL OFFSET #5267
5268 Legend Size with SIZEUNITS meters #5268

They were before in mapserver/msautotest_DEPRECATED. See conversation here
MapServer/msautotest_DEPRECATED#33",@tbonfort I don't see the file msautotest/renderers/legend_label_offset.map  in the repository.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5332,2016-09-21T06:07:19Z,2016-09-21T07:21:49Z,2016-09-21T13:11:44Z,CLOSED,False,494,0,2,https://github.com/astroidex,mapfiles for ticket 5267 and 5268,1,[],https://github.com/mapserver/mapserver/pull/5332,https://github.com/tbonfort,4,https://github.com/MapServer/MapServer/pull/5332#issuecomment-248607732,"Mapfiles for tickes. See tickets for screenshots

5267 Legend with LABEL OFFSET #5267
5268 Legend Size with SIZEUNITS meters #5268

They were before in mapserver/msautotest_DEPRECATED. See conversation here
MapServer/msautotest_DEPRECATED#33","thanks @jmckenna , fixed",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5335,2016-10-12T13:31:46Z,2016-12-05T12:11:58Z,2016-12-05T12:12:01Z,CLOSED,False,1211,1178,2,https://github.com/tbonfort,Unable to pass FEATURE ITEMS from URL,1,[],https://github.com/mapserver/mapserver/pull/5335,https://github.com/tbonfort,1,https://github.com/MapServer/MapServer/pull/5335,"We tried to pass a FEATURE via a URL parameter. This works perfectly for attributes WKT and TEXT of the FEATURE.
It doesn't seem to work for attribute ITEMS.
Example:
Layer definition in Mapfile:
LAYER
    NAME testLayer
    TYPE polygon
    STATUS on
    METADATA
       WMS_TITLE ""TestLayer""
       WMS_SRS ""EPSG:31468""
    END
    PROCESSING ""ITEMS=zaehljahr""
    CLASSITEM ""zaehljahr""
    CLASS
      EXPRESSION '0'
      NAME ""0""
      STYLE
        OPACITY 60
    COLOR 0 255 0
    ANTIALIAS FALSE
      END
      TEXT ""[zaehljahr]""
      LABEL
        TYPE truetype
        COLOR 255 255 255
        FONT arial
        SIZE 12
        ANTIALIAS false
        POSITION lc
        PARTIALS false
        BUFFER 0
      END
    END
    CLASS
      EXPRESSION '1'
      NAME ""1""
      STYLE
        OPACITY 60
    COLOR 0 221 0
    ANTIALIAS FALSE
      END
      TEXT ""[zaehljahr]""
      LABEL
        TYPE truetype
        COLOR 255 255 255
        FONT arial
        SIZE 12
        ANTIALIAS false
        POSITION lc
        PARTIALS false
        BUFFER 0
      END
    END
END
Request-URL:
http://localhost/cgi-bin/mapserv.fcgi?map=test.map&VERSION=1.1.1&LAYERS=testLayer&BBOX=4548756.4916980425,5451024.760221503,4548993.064391087,5451261.332914547&WIDTH=300&HEIGHT=300&SRS=EPSG:31468&FORMAT=image/png&STYLES=&TRANSPARENT=FALSE&SERVICE=WMS&REQUEST=GetMap&map.layer[testLayer]=FEATURE WKT ""MULTIPOLYGON (((4548889.74 5451201.12, 4548897.895232 5451196.8590681, 4548903.707732 5451211.3590681, 4548925.645232 5451208.3590681, 4548919.020232 5451190.1715681, 4548932.21 5451186.42, 4548903.68 5451193.28, 4548889.74 5451201.12)))"" ITEMS ""1"" END
Error-Message:
loadfeature(): Unknown identifier. Parsing error near (ITEMS):(line 1)
Thanks for looking into this.","We tried to pass a FEATURE via a URL parameter. This works perfectly for attributes WKT and TEXT of the FEATURE.
It doesn't seem to work for attribute ITEMS.
Example:
Layer definition in Mapfile:
LAYER
    NAME testLayer
    TYPE polygon
    STATUS on
    METADATA
       WMS_TITLE ""TestLayer""
       WMS_SRS ""EPSG:31468""
    END
    PROCESSING ""ITEMS=zaehljahr""
    CLASSITEM ""zaehljahr""
    CLASS
      EXPRESSION '0'
      NAME ""0""
      STYLE
        OPACITY 60
    COLOR 0 255 0
    ANTIALIAS FALSE
      END
      TEXT ""[zaehljahr]""
      LABEL
        TYPE truetype
        COLOR 255 255 255
        FONT arial
        SIZE 12
        ANTIALIAS false
        POSITION lc
        PARTIALS false
        BUFFER 0
      END
    END
    CLASS
      EXPRESSION '1'
      NAME ""1""
      STYLE
        OPACITY 60
    COLOR 0 221 0
    ANTIALIAS FALSE
      END
      TEXT ""[zaehljahr]""
      LABEL
        TYPE truetype
        COLOR 255 255 255
        FONT arial
        SIZE 12
        ANTIALIAS false
        POSITION lc
        PARTIALS false
        BUFFER 0
      END
    END
END
Request-URL:
http://localhost/cgi-bin/mapserv.fcgi?map=test.map&VERSION=1.1.1&LAYERS=testLayer&BBOX=4548756.4916980425,5451024.760221503,4548993.064391087,5451261.332914547&WIDTH=300&HEIGHT=300&SRS=EPSG:31468&FORMAT=image/png&STYLES=&TRANSPARENT=FALSE&SERVICE=WMS&REQUEST=GetMap&map.layer[testLayer]=FEATURE WKT ""MULTIPOLYGON (((4548889.74 5451201.12, 4548897.895232 5451196.8590681, 4548903.707732 5451211.3590681, 4548925.645232 5451208.3590681, 4548919.020232 5451190.1715681, 4548932.21 5451186.42, 4548903.68 5451193.28, 4548889.74 5451201.12)))"" ITEMS ""1"" END
Error-Message:
loadfeature(): Unknown identifier. Parsing error near (ITEMS):(line 1)
Thanks for looking into this.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5335,2016-10-12T13:31:46Z,2016-12-05T12:11:58Z,2016-12-05T12:12:01Z,CLOSED,False,1211,1178,2,https://github.com/tbonfort,Unable to pass FEATURE ITEMS from URL,1,[],https://github.com/mapserver/mapserver/pull/5335,https://github.com/tbonfort,2,https://github.com/MapServer/MapServer/pull/5335#issuecomment-253208680,"We tried to pass a FEATURE via a URL parameter. This works perfectly for attributes WKT and TEXT of the FEATURE.
It doesn't seem to work for attribute ITEMS.
Example:
Layer definition in Mapfile:
LAYER
    NAME testLayer
    TYPE polygon
    STATUS on
    METADATA
       WMS_TITLE ""TestLayer""
       WMS_SRS ""EPSG:31468""
    END
    PROCESSING ""ITEMS=zaehljahr""
    CLASSITEM ""zaehljahr""
    CLASS
      EXPRESSION '0'
      NAME ""0""
      STYLE
        OPACITY 60
    COLOR 0 255 0
    ANTIALIAS FALSE
      END
      TEXT ""[zaehljahr]""
      LABEL
        TYPE truetype
        COLOR 255 255 255
        FONT arial
        SIZE 12
        ANTIALIAS false
        POSITION lc
        PARTIALS false
        BUFFER 0
      END
    END
    CLASS
      EXPRESSION '1'
      NAME ""1""
      STYLE
        OPACITY 60
    COLOR 0 221 0
    ANTIALIAS FALSE
      END
      TEXT ""[zaehljahr]""
      LABEL
        TYPE truetype
        COLOR 255 255 255
        FONT arial
        SIZE 12
        ANTIALIAS false
        POSITION lc
        PARTIALS false
        BUFFER 0
      END
    END
END
Request-URL:
http://localhost/cgi-bin/mapserv.fcgi?map=test.map&VERSION=1.1.1&LAYERS=testLayer&BBOX=4548756.4916980425,5451024.760221503,4548993.064391087,5451261.332914547&WIDTH=300&HEIGHT=300&SRS=EPSG:31468&FORMAT=image/png&STYLES=&TRANSPARENT=FALSE&SERVICE=WMS&REQUEST=GetMap&map.layer[testLayer]=FEATURE WKT ""MULTIPOLYGON (((4548889.74 5451201.12, 4548897.895232 5451196.8590681, 4548903.707732 5451211.3590681, 4548925.645232 5451208.3590681, 4548919.020232 5451190.1715681, 4548932.21 5451186.42, 4548903.68 5451193.28, 4548889.74 5451201.12)))"" ITEMS ""1"" END
Error-Message:
loadfeature(): Unknown identifier. Parsing error near (ITEMS):(line 1)
Thanks for looking into this.",what mapserver version?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5335,2016-10-12T13:31:46Z,2016-12-05T12:11:58Z,2016-12-05T12:12:01Z,CLOSED,False,1211,1178,2,https://github.com/tbonfort,Unable to pass FEATURE ITEMS from URL,1,[],https://github.com/mapserver/mapserver/pull/5335,https://github.com/itt-de,3,https://github.com/MapServer/MapServer/pull/5335#issuecomment-253212097,"We tried to pass a FEATURE via a URL parameter. This works perfectly for attributes WKT and TEXT of the FEATURE.
It doesn't seem to work for attribute ITEMS.
Example:
Layer definition in Mapfile:
LAYER
    NAME testLayer
    TYPE polygon
    STATUS on
    METADATA
       WMS_TITLE ""TestLayer""
       WMS_SRS ""EPSG:31468""
    END
    PROCESSING ""ITEMS=zaehljahr""
    CLASSITEM ""zaehljahr""
    CLASS
      EXPRESSION '0'
      NAME ""0""
      STYLE
        OPACITY 60
    COLOR 0 255 0
    ANTIALIAS FALSE
      END
      TEXT ""[zaehljahr]""
      LABEL
        TYPE truetype
        COLOR 255 255 255
        FONT arial
        SIZE 12
        ANTIALIAS false
        POSITION lc
        PARTIALS false
        BUFFER 0
      END
    END
    CLASS
      EXPRESSION '1'
      NAME ""1""
      STYLE
        OPACITY 60
    COLOR 0 221 0
    ANTIALIAS FALSE
      END
      TEXT ""[zaehljahr]""
      LABEL
        TYPE truetype
        COLOR 255 255 255
        FONT arial
        SIZE 12
        ANTIALIAS false
        POSITION lc
        PARTIALS false
        BUFFER 0
      END
    END
END
Request-URL:
http://localhost/cgi-bin/mapserv.fcgi?map=test.map&VERSION=1.1.1&LAYERS=testLayer&BBOX=4548756.4916980425,5451024.760221503,4548993.064391087,5451261.332914547&WIDTH=300&HEIGHT=300&SRS=EPSG:31468&FORMAT=image/png&STYLES=&TRANSPARENT=FALSE&SERVICE=WMS&REQUEST=GetMap&map.layer[testLayer]=FEATURE WKT ""MULTIPOLYGON (((4548889.74 5451201.12, 4548897.895232 5451196.8590681, 4548903.707732 5451211.3590681, 4548925.645232 5451208.3590681, 4548919.020232 5451190.1715681, 4548932.21 5451186.42, 4548903.68 5451193.28, 4548889.74 5451201.12)))"" ITEMS ""1"" END
Error-Message:
loadfeature(): Unknown identifier. Parsing error near (ITEMS):(line 1)
Thanks for looking into this.",We tried version 7.0.1 and 6.4.1 with the same result.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5335,2016-10-12T13:31:46Z,2016-12-05T12:11:58Z,2016-12-05T12:12:01Z,CLOSED,False,1211,1178,2,https://github.com/tbonfort,Unable to pass FEATURE ITEMS from URL,1,[],https://github.com/mapserver/mapserver/pull/5335,https://github.com/tbonfort,4,https://github.com/MapServer/MapServer/pull/5335#issuecomment-253214108,"We tried to pass a FEATURE via a URL parameter. This works perfectly for attributes WKT and TEXT of the FEATURE.
It doesn't seem to work for attribute ITEMS.
Example:
Layer definition in Mapfile:
LAYER
    NAME testLayer
    TYPE polygon
    STATUS on
    METADATA
       WMS_TITLE ""TestLayer""
       WMS_SRS ""EPSG:31468""
    END
    PROCESSING ""ITEMS=zaehljahr""
    CLASSITEM ""zaehljahr""
    CLASS
      EXPRESSION '0'
      NAME ""0""
      STYLE
        OPACITY 60
    COLOR 0 255 0
    ANTIALIAS FALSE
      END
      TEXT ""[zaehljahr]""
      LABEL
        TYPE truetype
        COLOR 255 255 255
        FONT arial
        SIZE 12
        ANTIALIAS false
        POSITION lc
        PARTIALS false
        BUFFER 0
      END
    END
    CLASS
      EXPRESSION '1'
      NAME ""1""
      STYLE
        OPACITY 60
    COLOR 0 221 0
    ANTIALIAS FALSE
      END
      TEXT ""[zaehljahr]""
      LABEL
        TYPE truetype
        COLOR 255 255 255
        FONT arial
        SIZE 12
        ANTIALIAS false
        POSITION lc
        PARTIALS false
        BUFFER 0
      END
    END
END
Request-URL:
http://localhost/cgi-bin/mapserv.fcgi?map=test.map&VERSION=1.1.1&LAYERS=testLayer&BBOX=4548756.4916980425,5451024.760221503,4548993.064391087,5451261.332914547&WIDTH=300&HEIGHT=300&SRS=EPSG:31468&FORMAT=image/png&STYLES=&TRANSPARENT=FALSE&SERVICE=WMS&REQUEST=GetMap&map.layer[testLayer]=FEATURE WKT ""MULTIPOLYGON (((4548889.74 5451201.12, 4548897.895232 5451196.8590681, 4548903.707732 5451211.3590681, 4548925.645232 5451208.3590681, 4548919.020232 5451190.1715681, 4548932.21 5451186.42, 4548903.68 5451193.28, 4548889.74 5451201.12)))"" ITEMS ""1"" END
Error-Message:
loadfeature(): Unknown identifier. Parsing error near (ITEMS):(line 1)
Thanks for looking into this.",Attached patch should resolve the issue. Please confirm.,True,{'HOORAY': ['https://github.com/itt-de']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5335,2016-10-12T13:31:46Z,2016-12-05T12:11:58Z,2016-12-05T12:12:01Z,CLOSED,False,1211,1178,2,https://github.com/tbonfort,Unable to pass FEATURE ITEMS from URL,1,[],https://github.com/mapserver/mapserver/pull/5335,https://github.com/sdlime,5,https://github.com/MapServer/MapServer/pull/5335#issuecomment-253227641,"We tried to pass a FEATURE via a URL parameter. This works perfectly for attributes WKT and TEXT of the FEATURE.
It doesn't seem to work for attribute ITEMS.
Example:
Layer definition in Mapfile:
LAYER
    NAME testLayer
    TYPE polygon
    STATUS on
    METADATA
       WMS_TITLE ""TestLayer""
       WMS_SRS ""EPSG:31468""
    END
    PROCESSING ""ITEMS=zaehljahr""
    CLASSITEM ""zaehljahr""
    CLASS
      EXPRESSION '0'
      NAME ""0""
      STYLE
        OPACITY 60
    COLOR 0 255 0
    ANTIALIAS FALSE
      END
      TEXT ""[zaehljahr]""
      LABEL
        TYPE truetype
        COLOR 255 255 255
        FONT arial
        SIZE 12
        ANTIALIAS false
        POSITION lc
        PARTIALS false
        BUFFER 0
      END
    END
    CLASS
      EXPRESSION '1'
      NAME ""1""
      STYLE
        OPACITY 60
    COLOR 0 221 0
    ANTIALIAS FALSE
      END
      TEXT ""[zaehljahr]""
      LABEL
        TYPE truetype
        COLOR 255 255 255
        FONT arial
        SIZE 12
        ANTIALIAS false
        POSITION lc
        PARTIALS false
        BUFFER 0
      END
    END
END
Request-URL:
http://localhost/cgi-bin/mapserv.fcgi?map=test.map&VERSION=1.1.1&LAYERS=testLayer&BBOX=4548756.4916980425,5451024.760221503,4548993.064391087,5451261.332914547&WIDTH=300&HEIGHT=300&SRS=EPSG:31468&FORMAT=image/png&STYLES=&TRANSPARENT=FALSE&SERVICE=WMS&REQUEST=GetMap&map.layer[testLayer]=FEATURE WKT ""MULTIPOLYGON (((4548889.74 5451201.12, 4548897.895232 5451196.8590681, 4548903.707732 5451211.3590681, 4548925.645232 5451208.3590681, 4548919.020232 5451190.1715681, 4548932.21 5451186.42, 4548903.68 5451193.28, 4548889.74 5451201.12)))"" ITEMS ""1"" END
Error-Message:
loadfeature(): Unknown identifier. Parsing error near (ITEMS):(line 1)
Thanks for looking into this.",Since this input is so arbitrary I think we need to also update mapfile.c around line 950 to require a validation entry so it's not enabled by default. --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5335,2016-10-12T13:31:46Z,2016-12-05T12:11:58Z,2016-12-05T12:12:01Z,CLOSED,False,1211,1178,2,https://github.com/tbonfort,Unable to pass FEATURE ITEMS from URL,1,[],https://github.com/mapserver/mapserver/pull/5335,https://github.com/tbonfort,6,https://github.com/MapServer/MapServer/pull/5335#issuecomment-253238401,"We tried to pass a FEATURE via a URL parameter. This works perfectly for attributes WKT and TEXT of the FEATURE.
It doesn't seem to work for attribute ITEMS.
Example:
Layer definition in Mapfile:
LAYER
    NAME testLayer
    TYPE polygon
    STATUS on
    METADATA
       WMS_TITLE ""TestLayer""
       WMS_SRS ""EPSG:31468""
    END
    PROCESSING ""ITEMS=zaehljahr""
    CLASSITEM ""zaehljahr""
    CLASS
      EXPRESSION '0'
      NAME ""0""
      STYLE
        OPACITY 60
    COLOR 0 255 0
    ANTIALIAS FALSE
      END
      TEXT ""[zaehljahr]""
      LABEL
        TYPE truetype
        COLOR 255 255 255
        FONT arial
        SIZE 12
        ANTIALIAS false
        POSITION lc
        PARTIALS false
        BUFFER 0
      END
    END
    CLASS
      EXPRESSION '1'
      NAME ""1""
      STYLE
        OPACITY 60
    COLOR 0 221 0
    ANTIALIAS FALSE
      END
      TEXT ""[zaehljahr]""
      LABEL
        TYPE truetype
        COLOR 255 255 255
        FONT arial
        SIZE 12
        ANTIALIAS false
        POSITION lc
        PARTIALS false
        BUFFER 0
      END
    END
END
Request-URL:
http://localhost/cgi-bin/mapserv.fcgi?map=test.map&VERSION=1.1.1&LAYERS=testLayer&BBOX=4548756.4916980425,5451024.760221503,4548993.064391087,5451261.332914547&WIDTH=300&HEIGHT=300&SRS=EPSG:31468&FORMAT=image/png&STYLES=&TRANSPARENT=FALSE&SERVICE=WMS&REQUEST=GetMap&map.layer[testLayer]=FEATURE WKT ""MULTIPOLYGON (((4548889.74 5451201.12, 4548897.895232 5451196.8590681, 4548903.707732 5451211.3590681, 4548925.645232 5451208.3590681, 4548919.020232 5451190.1715681, 4548932.21 5451186.42, 4548903.68 5451193.28, 4548889.74 5451201.12)))"" ITEMS ""1"" END
Error-Message:
loadfeature(): Unknown identifier. Parsing error near (ITEMS):(line 1)
Thanks for looking into this.","@sdlime validation should be for whole FEATURE, not just ITEMS? (I mean, changing/setting the geometry is just as dangerous as changing just the items)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5335,2016-10-12T13:31:46Z,2016-12-05T12:11:58Z,2016-12-05T12:12:01Z,CLOSED,False,1211,1178,2,https://github.com/tbonfort,Unable to pass FEATURE ITEMS from URL,1,[],https://github.com/mapserver/mapserver/pull/5335,https://github.com/sdlime,7,https://github.com/MapServer/MapServer/pull/5335#issuecomment-253328574,"We tried to pass a FEATURE via a URL parameter. This works perfectly for attributes WKT and TEXT of the FEATURE.
It doesn't seem to work for attribute ITEMS.
Example:
Layer definition in Mapfile:
LAYER
    NAME testLayer
    TYPE polygon
    STATUS on
    METADATA
       WMS_TITLE ""TestLayer""
       WMS_SRS ""EPSG:31468""
    END
    PROCESSING ""ITEMS=zaehljahr""
    CLASSITEM ""zaehljahr""
    CLASS
      EXPRESSION '0'
      NAME ""0""
      STYLE
        OPACITY 60
    COLOR 0 255 0
    ANTIALIAS FALSE
      END
      TEXT ""[zaehljahr]""
      LABEL
        TYPE truetype
        COLOR 255 255 255
        FONT arial
        SIZE 12
        ANTIALIAS false
        POSITION lc
        PARTIALS false
        BUFFER 0
      END
    END
    CLASS
      EXPRESSION '1'
      NAME ""1""
      STYLE
        OPACITY 60
    COLOR 0 221 0
    ANTIALIAS FALSE
      END
      TEXT ""[zaehljahr]""
      LABEL
        TYPE truetype
        COLOR 255 255 255
        FONT arial
        SIZE 12
        ANTIALIAS false
        POSITION lc
        PARTIALS false
        BUFFER 0
      END
    END
END
Request-URL:
http://localhost/cgi-bin/mapserv.fcgi?map=test.map&VERSION=1.1.1&LAYERS=testLayer&BBOX=4548756.4916980425,5451024.760221503,4548993.064391087,5451261.332914547&WIDTH=300&HEIGHT=300&SRS=EPSG:31468&FORMAT=image/png&STYLES=&TRANSPARENT=FALSE&SERVICE=WMS&REQUEST=GetMap&map.layer[testLayer]=FEATURE WKT ""MULTIPOLYGON (((4548889.74 5451201.12, 4548897.895232 5451196.8590681, 4548903.707732 5451211.3590681, 4548925.645232 5451208.3590681, 4548919.020232 5451190.1715681, 4548932.21 5451186.42, 4548903.68 5451193.28, 4548889.74 5451201.12)))"" ITEMS ""1"" END
Error-Message:
loadfeature(): Unknown identifier. Parsing error near (ITEMS):(line 1)
Thanks for looking into this.","You can't change anything about a feature and can only add them. Anyway, the the parser for the geometry portion of a feature already does specific validation (e.g. is a value a number or valid WKT), I'd think that's sufficient.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5335,2016-10-12T13:31:46Z,2016-12-05T12:11:58Z,2016-12-05T12:12:01Z,CLOSED,False,1211,1178,2,https://github.com/tbonfort,Unable to pass FEATURE ITEMS from URL,1,[],https://github.com/mapserver/mapserver/pull/5335,https://github.com/itt-de,8,https://github.com/MapServer/MapServer/pull/5335#issuecomment-253435305,"We tried to pass a FEATURE via a URL parameter. This works perfectly for attributes WKT and TEXT of the FEATURE.
It doesn't seem to work for attribute ITEMS.
Example:
Layer definition in Mapfile:
LAYER
    NAME testLayer
    TYPE polygon
    STATUS on
    METADATA
       WMS_TITLE ""TestLayer""
       WMS_SRS ""EPSG:31468""
    END
    PROCESSING ""ITEMS=zaehljahr""
    CLASSITEM ""zaehljahr""
    CLASS
      EXPRESSION '0'
      NAME ""0""
      STYLE
        OPACITY 60
    COLOR 0 255 0
    ANTIALIAS FALSE
      END
      TEXT ""[zaehljahr]""
      LABEL
        TYPE truetype
        COLOR 255 255 255
        FONT arial
        SIZE 12
        ANTIALIAS false
        POSITION lc
        PARTIALS false
        BUFFER 0
      END
    END
    CLASS
      EXPRESSION '1'
      NAME ""1""
      STYLE
        OPACITY 60
    COLOR 0 221 0
    ANTIALIAS FALSE
      END
      TEXT ""[zaehljahr]""
      LABEL
        TYPE truetype
        COLOR 255 255 255
        FONT arial
        SIZE 12
        ANTIALIAS false
        POSITION lc
        PARTIALS false
        BUFFER 0
      END
    END
END
Request-URL:
http://localhost/cgi-bin/mapserv.fcgi?map=test.map&VERSION=1.1.1&LAYERS=testLayer&BBOX=4548756.4916980425,5451024.760221503,4548993.064391087,5451261.332914547&WIDTH=300&HEIGHT=300&SRS=EPSG:31468&FORMAT=image/png&STYLES=&TRANSPARENT=FALSE&SERVICE=WMS&REQUEST=GetMap&map.layer[testLayer]=FEATURE WKT ""MULTIPOLYGON (((4548889.74 5451201.12, 4548897.895232 5451196.8590681, 4548903.707732 5451211.3590681, 4548925.645232 5451208.3590681, 4548919.020232 5451190.1715681, 4548932.21 5451186.42, 4548903.68 5451193.28, 4548889.74 5451201.12)))"" ITEMS ""1"" END
Error-Message:
loadfeature(): Unknown identifier. Parsing error near (ITEMS):(line 1)
Thanks for looking into this.","Many thanks for the fast fix. Unfortunately I don't have any build-infrastructure, so I cant't confirm until the next official release. We will certainly make good use of this in future.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5335,2016-10-12T13:31:46Z,2016-12-05T12:11:58Z,2016-12-05T12:12:01Z,CLOSED,False,1211,1178,2,https://github.com/tbonfort,Unable to pass FEATURE ITEMS from URL,1,[],https://github.com/mapserver/mapserver/pull/5335,https://github.com/tbonfort,9,https://github.com/MapServer/MapServer/pull/5335#issuecomment-264839205,"We tried to pass a FEATURE via a URL parameter. This works perfectly for attributes WKT and TEXT of the FEATURE.
It doesn't seem to work for attribute ITEMS.
Example:
Layer definition in Mapfile:
LAYER
    NAME testLayer
    TYPE polygon
    STATUS on
    METADATA
       WMS_TITLE ""TestLayer""
       WMS_SRS ""EPSG:31468""
    END
    PROCESSING ""ITEMS=zaehljahr""
    CLASSITEM ""zaehljahr""
    CLASS
      EXPRESSION '0'
      NAME ""0""
      STYLE
        OPACITY 60
    COLOR 0 255 0
    ANTIALIAS FALSE
      END
      TEXT ""[zaehljahr]""
      LABEL
        TYPE truetype
        COLOR 255 255 255
        FONT arial
        SIZE 12
        ANTIALIAS false
        POSITION lc
        PARTIALS false
        BUFFER 0
      END
    END
    CLASS
      EXPRESSION '1'
      NAME ""1""
      STYLE
        OPACITY 60
    COLOR 0 221 0
    ANTIALIAS FALSE
      END
      TEXT ""[zaehljahr]""
      LABEL
        TYPE truetype
        COLOR 255 255 255
        FONT arial
        SIZE 12
        ANTIALIAS false
        POSITION lc
        PARTIALS false
        BUFFER 0
      END
    END
END
Request-URL:
http://localhost/cgi-bin/mapserv.fcgi?map=test.map&VERSION=1.1.1&LAYERS=testLayer&BBOX=4548756.4916980425,5451024.760221503,4548993.064391087,5451261.332914547&WIDTH=300&HEIGHT=300&SRS=EPSG:31468&FORMAT=image/png&STYLES=&TRANSPARENT=FALSE&SERVICE=WMS&REQUEST=GetMap&map.layer[testLayer]=FEATURE WKT ""MULTIPOLYGON (((4548889.74 5451201.12, 4548897.895232 5451196.8590681, 4548903.707732 5451211.3590681, 4548925.645232 5451208.3590681, 4548919.020232 5451190.1715681, 4548932.21 5451186.42, 4548903.68 5451193.28, 4548889.74 5451201.12)))"" ITEMS ""1"" END
Error-Message:
loadfeature(): Unknown identifier. Parsing error near (ITEMS):(line 1)
Thanks for looking into this.",applied to branch-7-0 in 93cc1ed,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5338,2016-10-19T14:33:14Z,2016-12-05T12:08:39Z,2016-12-05T12:08:52Z,CLOSED,False,6,0,1,https://github.com/tbonfort,"Wrong rotation of characters if label is first rendered with cairo and then by agg (fastcgi, fontcache, cairo)",1,[],https://github.com/mapserver/mapserver/pull/5338,https://github.com/tbonfort,1,https://github.com/MapServer/MapServer/pull/5338,"Issue: Characters in labels are rotated incorrecly
Environment: Mapserver: 7.x built from source in FastCGI-mode
How to reproduce:

Start a fresh mapserver process
Request a map with labels and where labels are using the ""ANGLE""-keyword with driver CARIO/PDF
Request the same map from the same fastcgi-process using the driver AGG/PNG

Example:

Create the following mapfile. Update FONT/FONTSET to a valid truetype font

MAP
  NAME ""WMS""
  EXTENT 0 0 200 200 

  OUTPUTFORMAT
    NAME pdf
    DRIVER ""CAIRO/PDF""
    MIMETYPE ""application/x-pdf""
    IMAGEMODE RGB
    EXTENSION ""pdf""
    FORMATOPTION ""GEO_ENCODING=ISO32000""
  END

  OUTPUTFORMAT
    NAME png
    DRIVER ""AGG/PNG""
    MIMETYPE ""image/png""
    IMAGEMODE RGBA
    EXTENSION ""png"" 
  END

  RESOLUTION 300
  FONTSET ""fonts/fonts.list""
  PROJECTION
    ""init=epsg:3006""
  END
  WEB
    METADATA  
      ""wms_enable_request"" ""*""
      ""wms_srs"" ""epsg:3006""
    END
  END

LAYER
  NAME ""lname""
  EXTENT 0 0 200 200 
  TYPE POINT
        FEATURE
                POINTS
                        100 100
                END
                TEXT ""Gavle""
        END
  STATUS ON
  SIZEUNITS pixels

  CLASS
    NAME ""name""
    LABEL
      FONT ""arial""
      TYPE truetype
      SIZE 12
      ANGLE 60  
        POSITION ul
    END
  END
END
END


Restart apache (to get a clean mapserver fastcgi process)
Request WMS map using caiiro:

GET /mapserv?map=../maps/simple.map&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&BBOX=0,0,200,200&SRS=EPSG:3006&WIDTH=400&HEIGHT=400&LAYERS=lname&FORMAT=application/x-pdf



Request WMS map using agg

GET /mapserv?map=../maps/simple.map&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&BBOX=0,0,200,200&SRS=EPSG:3006&WIDTH=400&HEIGHT=400&LAYERS=lname&FORMAT=image/png


Notice the rotated characters.
The opposite, by first using agg-driver followed by cario does not seem to have any issues.","Issue: Characters in labels are rotated incorrecly
Environment: Mapserver: 7.x built from source in FastCGI-mode
How to reproduce:

Start a fresh mapserver process
Request a map with labels and where labels are using the ""ANGLE""-keyword with driver CARIO/PDF
Request the same map from the same fastcgi-process using the driver AGG/PNG

Example:

Create the following mapfile. Update FONT/FONTSET to a valid truetype font

MAP
  NAME ""WMS""
  EXTENT 0 0 200 200 

  OUTPUTFORMAT
    NAME pdf
    DRIVER ""CAIRO/PDF""
    MIMETYPE ""application/x-pdf""
    IMAGEMODE RGB
    EXTENSION ""pdf""
    FORMATOPTION ""GEO_ENCODING=ISO32000""
  END

  OUTPUTFORMAT
    NAME png
    DRIVER ""AGG/PNG""
    MIMETYPE ""image/png""
    IMAGEMODE RGBA
    EXTENSION ""png"" 
  END

  RESOLUTION 300
  FONTSET ""fonts/fonts.list""
  PROJECTION
    ""init=epsg:3006""
  END
  WEB
    METADATA  
      ""wms_enable_request"" ""*""
      ""wms_srs"" ""epsg:3006""
    END
  END

LAYER
  NAME ""lname""
  EXTENT 0 0 200 200 
  TYPE POINT
        FEATURE
                POINTS
                        100 100
                END
                TEXT ""Gavle""
        END
  STATUS ON
  SIZEUNITS pixels

  CLASS
    NAME ""name""
    LABEL
      FONT ""arial""
      TYPE truetype
      SIZE 12
      ANGLE 60  
        POSITION ul
    END
  END
END
END


Restart apache (to get a clean mapserver fastcgi process)
Request WMS map using caiiro:

GET /mapserv?map=../maps/simple.map&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&BBOX=0,0,200,200&SRS=EPSG:3006&WIDTH=400&HEIGHT=400&LAYERS=lname&FORMAT=application/x-pdf



Request WMS map using agg

GET /mapserv?map=../maps/simple.map&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&BBOX=0,0,200,200&SRS=EPSG:3006&WIDTH=400&HEIGHT=400&LAYERS=lname&FORMAT=image/png


Notice the rotated characters.
The opposite, by first using agg-driver followed by cario does not seem to have any issues.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5338,2016-10-19T14:33:14Z,2016-12-05T12:08:39Z,2016-12-05T12:08:52Z,CLOSED,False,6,0,1,https://github.com/tbonfort,"Wrong rotation of characters if label is first rendered with cairo and then by agg (fastcgi, fontcache, cairo)",1,[],https://github.com/mapserver/mapserver/pull/5338,https://github.com/tbonfort,2,https://github.com/MapServer/MapServer/pull/5338#issuecomment-254835201,"Issue: Characters in labels are rotated incorrecly
Environment: Mapserver: 7.x built from source in FastCGI-mode
How to reproduce:

Start a fresh mapserver process
Request a map with labels and where labels are using the ""ANGLE""-keyword with driver CARIO/PDF
Request the same map from the same fastcgi-process using the driver AGG/PNG

Example:

Create the following mapfile. Update FONT/FONTSET to a valid truetype font

MAP
  NAME ""WMS""
  EXTENT 0 0 200 200 

  OUTPUTFORMAT
    NAME pdf
    DRIVER ""CAIRO/PDF""
    MIMETYPE ""application/x-pdf""
    IMAGEMODE RGB
    EXTENSION ""pdf""
    FORMATOPTION ""GEO_ENCODING=ISO32000""
  END

  OUTPUTFORMAT
    NAME png
    DRIVER ""AGG/PNG""
    MIMETYPE ""image/png""
    IMAGEMODE RGBA
    EXTENSION ""png"" 
  END

  RESOLUTION 300
  FONTSET ""fonts/fonts.list""
  PROJECTION
    ""init=epsg:3006""
  END
  WEB
    METADATA  
      ""wms_enable_request"" ""*""
      ""wms_srs"" ""epsg:3006""
    END
  END

LAYER
  NAME ""lname""
  EXTENT 0 0 200 200 
  TYPE POINT
        FEATURE
                POINTS
                        100 100
                END
                TEXT ""Gavle""
        END
  STATUS ON
  SIZEUNITS pixels

  CLASS
    NAME ""name""
    LABEL
      FONT ""arial""
      TYPE truetype
      SIZE 12
      ANGLE 60  
        POSITION ul
    END
  END
END
END


Restart apache (to get a clean mapserver fastcgi process)
Request WMS map using caiiro:

GET /mapserv?map=../maps/simple.map&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&BBOX=0,0,200,200&SRS=EPSG:3006&WIDTH=400&HEIGHT=400&LAYERS=lname&FORMAT=application/x-pdf



Request WMS map using agg

GET /mapserv?map=../maps/simple.map&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&BBOX=0,0,200,200&SRS=EPSG:3006&WIDTH=400&HEIGHT=400&LAYERS=lname&FORMAT=image/png


Notice the rotated characters.
The opposite, by first using agg-driver followed by cario does not seem to have any issues.","The attached patch fixes the issue, apparently without major side-effects as that part of the code is pretty-well tested by travis.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5338,2016-10-19T14:33:14Z,2016-12-05T12:08:39Z,2016-12-05T12:08:52Z,CLOSED,False,6,0,1,https://github.com/tbonfort,"Wrong rotation of characters if label is first rendered with cairo and then by agg (fastcgi, fontcache, cairo)",1,[],https://github.com/mapserver/mapserver/pull/5338,https://github.com/tbonfort,3,https://github.com/MapServer/MapServer/pull/5338#issuecomment-254835990,"Issue: Characters in labels are rotated incorrecly
Environment: Mapserver: 7.x built from source in FastCGI-mode
How to reproduce:

Start a fresh mapserver process
Request a map with labels and where labels are using the ""ANGLE""-keyword with driver CARIO/PDF
Request the same map from the same fastcgi-process using the driver AGG/PNG

Example:

Create the following mapfile. Update FONT/FONTSET to a valid truetype font

MAP
  NAME ""WMS""
  EXTENT 0 0 200 200 

  OUTPUTFORMAT
    NAME pdf
    DRIVER ""CAIRO/PDF""
    MIMETYPE ""application/x-pdf""
    IMAGEMODE RGB
    EXTENSION ""pdf""
    FORMATOPTION ""GEO_ENCODING=ISO32000""
  END

  OUTPUTFORMAT
    NAME png
    DRIVER ""AGG/PNG""
    MIMETYPE ""image/png""
    IMAGEMODE RGBA
    EXTENSION ""png"" 
  END

  RESOLUTION 300
  FONTSET ""fonts/fonts.list""
  PROJECTION
    ""init=epsg:3006""
  END
  WEB
    METADATA  
      ""wms_enable_request"" ""*""
      ""wms_srs"" ""epsg:3006""
    END
  END

LAYER
  NAME ""lname""
  EXTENT 0 0 200 200 
  TYPE POINT
        FEATURE
                POINTS
                        100 100
                END
                TEXT ""Gavle""
        END
  STATUS ON
  SIZEUNITS pixels

  CLASS
    NAME ""name""
    LABEL
      FONT ""arial""
      TYPE truetype
      SIZE 12
      ANGLE 60  
        POSITION ul
    END
  END
END
END


Restart apache (to get a clean mapserver fastcgi process)
Request WMS map using caiiro:

GET /mapserv?map=../maps/simple.map&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&BBOX=0,0,200,200&SRS=EPSG:3006&WIDTH=400&HEIGHT=400&LAYERS=lname&FORMAT=application/x-pdf



Request WMS map using agg

GET /mapserv?map=../maps/simple.map&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&BBOX=0,0,200,200&SRS=EPSG:3006&WIDTH=400&HEIGHT=400&LAYERS=lname&FORMAT=image/png


Notice the rotated characters.
The opposite, by first using agg-driver followed by cario does not seem to have any issues.","Might be related to https://lists.freedesktop.org/archives/cairo/2016-January/027175.html . I'm not sure if this a bug in cairo, or if we (mapserver) were incorrectly loading the freetype glyphs.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5338,2016-10-19T14:33:14Z,2016-12-05T12:08:39Z,2016-12-05T12:08:52Z,CLOSED,False,6,0,1,https://github.com/tbonfort,"Wrong rotation of characters if label is first rendered with cairo and then by agg (fastcgi, fontcache, cairo)",1,[],https://github.com/mapserver/mapserver/pull/5338,https://github.com/foggel,4,https://github.com/MapServer/MapServer/pull/5338#issuecomment-255023185,"Issue: Characters in labels are rotated incorrecly
Environment: Mapserver: 7.x built from source in FastCGI-mode
How to reproduce:

Start a fresh mapserver process
Request a map with labels and where labels are using the ""ANGLE""-keyword with driver CARIO/PDF
Request the same map from the same fastcgi-process using the driver AGG/PNG

Example:

Create the following mapfile. Update FONT/FONTSET to a valid truetype font

MAP
  NAME ""WMS""
  EXTENT 0 0 200 200 

  OUTPUTFORMAT
    NAME pdf
    DRIVER ""CAIRO/PDF""
    MIMETYPE ""application/x-pdf""
    IMAGEMODE RGB
    EXTENSION ""pdf""
    FORMATOPTION ""GEO_ENCODING=ISO32000""
  END

  OUTPUTFORMAT
    NAME png
    DRIVER ""AGG/PNG""
    MIMETYPE ""image/png""
    IMAGEMODE RGBA
    EXTENSION ""png"" 
  END

  RESOLUTION 300
  FONTSET ""fonts/fonts.list""
  PROJECTION
    ""init=epsg:3006""
  END
  WEB
    METADATA  
      ""wms_enable_request"" ""*""
      ""wms_srs"" ""epsg:3006""
    END
  END

LAYER
  NAME ""lname""
  EXTENT 0 0 200 200 
  TYPE POINT
        FEATURE
                POINTS
                        100 100
                END
                TEXT ""Gavle""
        END
  STATUS ON
  SIZEUNITS pixels

  CLASS
    NAME ""name""
    LABEL
      FONT ""arial""
      TYPE truetype
      SIZE 12
      ANGLE 60  
        POSITION ul
    END
  END
END
END


Restart apache (to get a clean mapserver fastcgi process)
Request WMS map using caiiro:

GET /mapserv?map=../maps/simple.map&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&BBOX=0,0,200,200&SRS=EPSG:3006&WIDTH=400&HEIGHT=400&LAYERS=lname&FORMAT=application/x-pdf



Request WMS map using agg

GET /mapserv?map=../maps/simple.map&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&BBOX=0,0,200,200&SRS=EPSG:3006&WIDTH=400&HEIGHT=400&LAYERS=lname&FORMAT=image/png


Notice the rotated characters.
The opposite, by first using agg-driver followed by cario does not seem to have any issues.","The patch resolves both the simplified case given in the bug report and the original problem we had with our basemap WMS.
The quick response from mapserve-dev is impressive! Thanks.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5338,2016-10-19T14:33:14Z,2016-12-05T12:08:39Z,2016-12-05T12:08:52Z,CLOSED,False,6,0,1,https://github.com/tbonfort,"Wrong rotation of characters if label is first rendered with cairo and then by agg (fastcgi, fontcache, cairo)",1,[],https://github.com/mapserver/mapserver/pull/5338,https://github.com/tbonfort,5,https://github.com/MapServer/MapServer/pull/5338#issuecomment-264838616,"Issue: Characters in labels are rotated incorrecly
Environment: Mapserver: 7.x built from source in FastCGI-mode
How to reproduce:

Start a fresh mapserver process
Request a map with labels and where labels are using the ""ANGLE""-keyword with driver CARIO/PDF
Request the same map from the same fastcgi-process using the driver AGG/PNG

Example:

Create the following mapfile. Update FONT/FONTSET to a valid truetype font

MAP
  NAME ""WMS""
  EXTENT 0 0 200 200 

  OUTPUTFORMAT
    NAME pdf
    DRIVER ""CAIRO/PDF""
    MIMETYPE ""application/x-pdf""
    IMAGEMODE RGB
    EXTENSION ""pdf""
    FORMATOPTION ""GEO_ENCODING=ISO32000""
  END

  OUTPUTFORMAT
    NAME png
    DRIVER ""AGG/PNG""
    MIMETYPE ""image/png""
    IMAGEMODE RGBA
    EXTENSION ""png"" 
  END

  RESOLUTION 300
  FONTSET ""fonts/fonts.list""
  PROJECTION
    ""init=epsg:3006""
  END
  WEB
    METADATA  
      ""wms_enable_request"" ""*""
      ""wms_srs"" ""epsg:3006""
    END
  END

LAYER
  NAME ""lname""
  EXTENT 0 0 200 200 
  TYPE POINT
        FEATURE
                POINTS
                        100 100
                END
                TEXT ""Gavle""
        END
  STATUS ON
  SIZEUNITS pixels

  CLASS
    NAME ""name""
    LABEL
      FONT ""arial""
      TYPE truetype
      SIZE 12
      ANGLE 60  
        POSITION ul
    END
  END
END
END


Restart apache (to get a clean mapserver fastcgi process)
Request WMS map using caiiro:

GET /mapserv?map=../maps/simple.map&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&BBOX=0,0,200,200&SRS=EPSG:3006&WIDTH=400&HEIGHT=400&LAYERS=lname&FORMAT=application/x-pdf



Request WMS map using agg

GET /mapserv?map=../maps/simple.map&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&BBOX=0,0,200,200&SRS=EPSG:3006&WIDTH=400&HEIGHT=400&LAYERS=lname&FORMAT=image/png


Notice the rotated characters.
The opposite, by first using agg-driver followed by cario does not seem to have any issues.",applied to branch-7-0 in 82ec23b,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5342,2016-10-30T20:28:37Z,2016-12-05T12:39:17Z,2016-12-05T12:39:17Z,CLOSED,False,7,1,1,https://github.com/geographika,Change text encoding in UTFGrid driver to work with Windows,3,[],https://github.com/mapserver/mapserver/pull/5342,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5342,"The use of the ICONV encoding ""UCS-4LE"" in the maputfgrid.cpp encoding causes junk output on Windows.
utf8 = msConvertWideStringToUTF8 (string, ""UCS-4LE"");
Changing this to ""UCS-2LE"" produces the correct output on Windows. I'm not sure if this also works
without issues on Linux. Hopefully there can be one encoding that works on both.
The only other place the encoding is specified is in the Windows-only MS SQL driver which uses ""UCS-2LE""
https://github.com/mapserver/mapserver/blob/branch-7-0/mapmssql2008.c#L1741
I'm not sure of the exact difference between the two encodings. The most detailed descriptions I could find were:
""UCS2LE is a direct byte encoding of the first plane in which the low byte comes first""
http://interscript.sourceforge.net/interscript/doc/en_iscr_0279.html
""UCS4LE is a four byte direct encodings of of ISO-10646. UCS4LE puts the low byte first. ""
http://interscript.sourceforge.net/interscript/doc/en_iscr_0281.html","The use of the ICONV encoding ""UCS-4LE"" in the maputfgrid.cpp encoding causes junk output on Windows.
utf8 = msConvertWideStringToUTF8 (string, ""UCS-4LE"");
Changing this to ""UCS-2LE"" produces the correct output on Windows. I'm not sure if this also works
without issues on Linux. Hopefully there can be one encoding that works on both.
The only other place the encoding is specified is in the Windows-only MS SQL driver which uses ""UCS-2LE""
https://github.com/mapserver/mapserver/blob/branch-7-0/mapmssql2008.c#L1741
I'm not sure of the exact difference between the two encodings. The most detailed descriptions I could find were:
""UCS2LE is a direct byte encoding of the first plane in which the low byte comes first""
http://interscript.sourceforge.net/interscript/doc/en_iscr_0279.html
""UCS4LE is a four byte direct encodings of of ISO-10646. UCS4LE puts the low byte first. ""
http://interscript.sourceforge.net/interscript/doc/en_iscr_0281.html",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5342,2016-10-30T20:28:37Z,2016-12-05T12:39:17Z,2016-12-05T12:39:17Z,CLOSED,False,7,1,1,https://github.com/geographika,Change text encoding in UTFGrid driver to work with Windows,3,[],https://github.com/mapserver/mapserver/pull/5342,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5342#issuecomment-257177956,"The use of the ICONV encoding ""UCS-4LE"" in the maputfgrid.cpp encoding causes junk output on Windows.
utf8 = msConvertWideStringToUTF8 (string, ""UCS-4LE"");
Changing this to ""UCS-2LE"" produces the correct output on Windows. I'm not sure if this also works
without issues on Linux. Hopefully there can be one encoding that works on both.
The only other place the encoding is specified is in the Windows-only MS SQL driver which uses ""UCS-2LE""
https://github.com/mapserver/mapserver/blob/branch-7-0/mapmssql2008.c#L1741
I'm not sure of the exact difference between the two encodings. The most detailed descriptions I could find were:
""UCS2LE is a direct byte encoding of the first plane in which the low byte comes first""
http://interscript.sourceforge.net/interscript/doc/en_iscr_0279.html
""UCS4LE is a four byte direct encodings of of ISO-10646. UCS4LE puts the low byte first. ""
http://interscript.sourceforge.net/interscript/doc/en_iscr_0281.html","Looking at https://www.gnu.org/software/libc/manual/html_node/iconv-Examples.html, I'd suggest trying ""WCHAR_T"" although I'm not sure. I found elsewhere that wchar_t on Windows was only 2 bytes wide, whereas it is 4 bytes on Unix systems, hence ""UCS-4LE"" is indeed inappropriate for Windows and wchar_t.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5342,2016-10-30T20:28:37Z,2016-12-05T12:39:17Z,2016-12-05T12:39:17Z,CLOSED,False,7,1,1,https://github.com/geographika,Change text encoding in UTFGrid driver to work with Windows,3,[],https://github.com/mapserver/mapserver/pull/5342,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5342#issuecomment-257997606,"The use of the ICONV encoding ""UCS-4LE"" in the maputfgrid.cpp encoding causes junk output on Windows.
utf8 = msConvertWideStringToUTF8 (string, ""UCS-4LE"");
Changing this to ""UCS-2LE"" produces the correct output on Windows. I'm not sure if this also works
without issues on Linux. Hopefully there can be one encoding that works on both.
The only other place the encoding is specified is in the Windows-only MS SQL driver which uses ""UCS-2LE""
https://github.com/mapserver/mapserver/blob/branch-7-0/mapmssql2008.c#L1741
I'm not sure of the exact difference between the two encodings. The most detailed descriptions I could find were:
""UCS2LE is a direct byte encoding of the first plane in which the low byte comes first""
http://interscript.sourceforge.net/interscript/doc/en_iscr_0279.html
""UCS4LE is a four byte direct encodings of of ISO-10646. UCS4LE puts the low byte first. ""
http://interscript.sourceforge.net/interscript/doc/en_iscr_0281.html","@rouault thanks for the comment. I have tried the ""WCHAR_T"" encoding, as UCS-2LE broke the Linux tests on Travis.
A couple more links I found that might be relevant: http://stackoverflow.com/a/40150716/179520

UTF-32LE = UCS-4LE : UCS-4 in little endian flavour, without BOM

This link says WCHAR_T doesn't work correctly on OSX, and the best approach is to use macros.
http://www.firstobject.com/wchar_t-string-on-linux-osx-windows.htm",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5342,2016-10-30T20:28:37Z,2016-12-05T12:39:17Z,2016-12-05T12:39:17Z,CLOSED,False,7,1,1,https://github.com/geographika,Change text encoding in UTFGrid driver to work with Windows,3,[],https://github.com/mapserver/mapserver/pull/5342,https://github.com/geographika,4,https://github.com/MapServer/MapServer/pull/5342#issuecomment-259312614,"The use of the ICONV encoding ""UCS-4LE"" in the maputfgrid.cpp encoding causes junk output on Windows.
utf8 = msConvertWideStringToUTF8 (string, ""UCS-4LE"");
Changing this to ""UCS-2LE"" produces the correct output on Windows. I'm not sure if this also works
without issues on Linux. Hopefully there can be one encoding that works on both.
The only other place the encoding is specified is in the Windows-only MS SQL driver which uses ""UCS-2LE""
https://github.com/mapserver/mapserver/blob/branch-7-0/mapmssql2008.c#L1741
I'm not sure of the exact difference between the two encodings. The most detailed descriptions I could find were:
""UCS2LE is a direct byte encoding of the first plane in which the low byte comes first""
http://interscript.sourceforge.net/interscript/doc/en_iscr_0279.html
""UCS4LE is a four byte direct encodings of of ISO-10646. UCS4LE puts the low byte first. ""
http://interscript.sourceforge.net/interscript/doc/en_iscr_0281.html","I found several examples in the MapServer codebase where different code paths are used between Windows and Linux. The final commit works fine on Windows. Apologies for multiple commits, in one pull request - trying to resolve this now.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5342,2016-10-30T20:28:37Z,2016-12-05T12:39:17Z,2016-12-05T12:39:17Z,CLOSED,False,7,1,1,https://github.com/geographika,Change text encoding in UTFGrid driver to work with Windows,3,[],https://github.com/mapserver/mapserver/pull/5342,https://github.com/tbonfort,5,https://github.com/MapServer/MapServer/pull/5342#issuecomment-264844085,"The use of the ICONV encoding ""UCS-4LE"" in the maputfgrid.cpp encoding causes junk output on Windows.
utf8 = msConvertWideStringToUTF8 (string, ""UCS-4LE"");
Changing this to ""UCS-2LE"" produces the correct output on Windows. I'm not sure if this also works
without issues on Linux. Hopefully there can be one encoding that works on both.
The only other place the encoding is specified is in the Windows-only MS SQL driver which uses ""UCS-2LE""
https://github.com/mapserver/mapserver/blob/branch-7-0/mapmssql2008.c#L1741
I'm not sure of the exact difference between the two encodings. The most detailed descriptions I could find were:
""UCS2LE is a direct byte encoding of the first plane in which the low byte comes first""
http://interscript.sourceforge.net/interscript/doc/en_iscr_0279.html
""UCS4LE is a four byte direct encodings of of ISO-10646. UCS4LE puts the low byte first. ""
http://interscript.sourceforge.net/interscript/doc/en_iscr_0281.html",backported and applied to branch-7-0 in 2ab0dc0,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5346,2016-11-09T00:00:54Z,2016-12-05T12:38:10Z,2016-12-07T19:32:47Z,CLOSED,False,42,17,7,https://github.com/AlexanderGabriel,Fix PHP MapScript build on Windows with CMake and Visual Studio 2012 Express,5,[],https://github.com/mapserver/mapserver/pull/5346,https://github.com/AlexanderGabriel,1,https://github.com/MapServer/MapServer/pull/5346,"Hi,
i compiled php mapscript on Windows with Visual Studio 2012 Express and PHP-5.6.27. I used CMake, not the stuff from the documentation (i think, this is really outdated).
I'm not new to Mapserver and MapScript but new to github and not really experienced in this Windows-compiling stuff. I'm not quite sure if i'm doing this right but i'm looking forward to get feedback ;)
I had some Problems but  i think i found good solutions for it. It compiles now on Windows with PHP-5.6.26-ts-x86-vc11. I'd like to provide some patches to improve the build-process for other Windows users in the future.
There is already a pull-request for the patch from tbonfort but it is not merged yet. i included it, because building will not work without.
I tested on linux. phpinfo() shows the extension so it seams i didn't break anything in the build system. maybe there are better tests to do before merging.
Thank you.
Kind regards,
Alex","Hi,
i compiled php mapscript on Windows with Visual Studio 2012 Express and PHP-5.6.27. I used CMake, not the stuff from the documentation (i think, this is really outdated).
I'm not new to Mapserver and MapScript but new to github and not really experienced in this Windows-compiling stuff. I'm not quite sure if i'm doing this right but i'm looking forward to get feedback ;)
I had some Problems but  i think i found good solutions for it. It compiles now on Windows with PHP-5.6.26-ts-x86-vc11. I'd like to provide some patches to improve the build-process for other Windows users in the future.
There is already a pull-request for the patch from tbonfort but it is not merged yet. i included it, because building will not work without.
I tested on linux. phpinfo() shows the extension so it seams i didn't break anything in the build system. maybe there are better tests to do before merging.
Thank you.
Kind regards,
Alex",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5346,2016-11-09T00:00:54Z,2016-12-05T12:38:10Z,2016-12-07T19:32:47Z,CLOSED,False,42,17,7,https://github.com/AlexanderGabriel,Fix PHP MapScript build on Windows with CMake and Visual Studio 2012 Express,5,[],https://github.com/mapserver/mapserver/pull/5346,https://github.com/tbonfort,2,https://github.com/MapServer/MapServer/pull/5346#issuecomment-262304019,"Hi,
i compiled php mapscript on Windows with Visual Studio 2012 Express and PHP-5.6.27. I used CMake, not the stuff from the documentation (i think, this is really outdated).
I'm not new to Mapserver and MapScript but new to github and not really experienced in this Windows-compiling stuff. I'm not quite sure if i'm doing this right but i'm looking forward to get feedback ;)
I had some Problems but  i think i found good solutions for it. It compiles now on Windows with PHP-5.6.26-ts-x86-vc11. I'd like to provide some patches to improve the build-process for other Windows users in the future.
There is already a pull-request for the patch from tbonfort but it is not merged yet. i included it, because building will not work without.
I tested on linux. phpinfo() shows the extension so it seams i didn't break anything in the build system. maybe there are better tests to do before merging.
Thank you.
Kind regards,
Alex","Looks good to me, thanks @AlexanderGabriel. It would be really cool if you could create a wiki page here on github explaining the detailed steps you undertook to compile mapserver from source under windows, that we could send windows users to if/when they need to test a fix/patch on their own.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5346,2016-11-09T00:00:54Z,2016-12-05T12:38:10Z,2016-12-07T19:32:47Z,CLOSED,False,42,17,7,https://github.com/AlexanderGabriel,Fix PHP MapScript build on Windows with CMake and Visual Studio 2012 Express,5,[],https://github.com/mapserver/mapserver/pull/5346,https://github.com/AlexanderGabriel,3,https://github.com/MapServer/MapServer/pull/5346#issuecomment-263081672,"Hi,
i compiled php mapscript on Windows with Visual Studio 2012 Express and PHP-5.6.27. I used CMake, not the stuff from the documentation (i think, this is really outdated).
I'm not new to Mapserver and MapScript but new to github and not really experienced in this Windows-compiling stuff. I'm not quite sure if i'm doing this right but i'm looking forward to get feedback ;)
I had some Problems but  i think i found good solutions for it. It compiles now on Windows with PHP-5.6.26-ts-x86-vc11. I'd like to provide some patches to improve the build-process for other Windows users in the future.
There is already a pull-request for the patch from tbonfort but it is not merged yet. i included it, because building will not work without.
I tested on linux. phpinfo() shows the extension so it seams i didn't break anything in the build system. maybe there are better tests to do before merging.
Thank you.
Kind regards,
Alex","That is a good Idea. I can do that. But wouldn't it be better to first merge this pull-request? Or should i point to my rep and the commits in the wiki-page until this got merged?
I've updated ""README.WIN32"" in / and at /mapscript/php (branch-7-0-UpdateWin32BuildInstructions in my rep) a few minutes ago. The content of the new readmes can be used for the wiki-page.
Should I open a new pull request for just updating docs or make a new pull-request for both, docs and patches to build on windows and we throw away this pull-request?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5346,2016-11-09T00:00:54Z,2016-12-05T12:38:10Z,2016-12-07T19:32:47Z,CLOSED,False,42,17,7,https://github.com/AlexanderGabriel,Fix PHP MapScript build on Windows with CMake and Visual Studio 2012 Express,5,[],https://github.com/mapserver/mapserver/pull/5346,https://github.com/tbonfort,4,https://github.com/MapServer/MapServer/pull/5346#issuecomment-264843869,"Hi,
i compiled php mapscript on Windows with Visual Studio 2012 Express and PHP-5.6.27. I used CMake, not the stuff from the documentation (i think, this is really outdated).
I'm not new to Mapserver and MapScript but new to github and not really experienced in this Windows-compiling stuff. I'm not quite sure if i'm doing this right but i'm looking forward to get feedback ;)
I had some Problems but  i think i found good solutions for it. It compiles now on Windows with PHP-5.6.26-ts-x86-vc11. I'd like to provide some patches to improve the build-process for other Windows users in the future.
There is already a pull-request for the patch from tbonfort but it is not merged yet. i included it, because building will not work without.
I tested on linux. phpinfo() shows the extension so it seams i didn't break anything in the build system. maybe there are better tests to do before merging.
Thank you.
Kind regards,
Alex","Fixes applied to branch-7-0, thanks @AlexanderGabriel. Documentation updates can go in a new PR",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5353,2016-11-25T22:04:02Z,2016-11-25T22:12:33Z,2016-11-25T22:12:44Z,MERGED,True,72,23,3,https://github.com/rouault,Filters: add whitespace between and and next part (relates to #5352),1,[],https://github.com/mapserver/mapserver/pull/5353,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5353,"A .... results in
a ( ..... ANDintersects(....)) mapserver expression. The expression lexer seems
to make sense of it though, but this is ugly.","A .... results in
a ( ..... ANDintersects(....)) mapserver expression. The expression lexer seems
to make sense of it though, but this is ugly.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5354,2016-11-26T15:32:41Z,2016-11-28T00:04:38Z,2016-11-28T00:04:39Z,MERGED,True,254,2,13,https://github.com/rouault,Fix segfault on WFS filters with empty literals (PostGIS + Spatialite). Implement PropertyIsNull for those layers (#5347),1,[],https://github.com/mapserver/mapserver/pull/5354,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5354,"The PropertyIsNull is handled through a hack that consists in emulating it as a
PropertyIsEqualTo ""MAPSERVER_NULL"" comparison. This is only done for PostGIS and
Spatialite layers.
CREDITS: Funded by:
Regione Toscana - Settore Sistema Informativo Territoriale ed
Ambientale (CIG: 644544015A)","The PropertyIsNull is handled through a hack that consists in emulating it as a
PropertyIsEqualTo ""MAPSERVER_NULL"" comparison. This is only done for PostGIS and
Spatialite layers.
CREDITS: Funded by:
Regione Toscana - Settore Sistema Informativo Territoriale ed
Ambientale (CIG: 644544015A)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5355,2016-11-27T20:36:41Z,2016-11-27T20:46:33Z,2016-11-27T20:46:38Z,MERGED,True,109,22,1,https://github.com/szekerest,Reorder spatial operator arguments for mssql (#5352),1,[],https://github.com/mapserver/mapserver/pull/5355,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5355,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5356,2016-11-29T11:22:03Z,2016-11-29T11:32:52Z,2016-11-29T11:32:52Z,MERGED,True,21,16,1,https://github.com/tbonfort,OGR error messages too verbose,1,[],https://github.com/mapserver/mapserver/pull/5356,https://github.com/tbonfort,1,https://github.com/MapServer/MapServer/pull/5356,"Error messages created by the OGR driver may leak too much information. See http://gis.stackexchange.com/questions/219426/mapserver-hide-ogr-exception
Same issue as #4928 but for OGR","Error messages created by the OGR driver may leak too much information. See http://gis.stackexchange.com/questions/219426/mapserver-hide-ogr-exception
Same issue as #4928 but for OGR",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5357,2016-12-06T22:29:28Z,2016-12-07T10:02:50Z,2016-12-07T19:32:05Z,MERGED,True,119,104,2,https://github.com/AlexanderGabriel,Updated README.WIN32 for Mapserver and PHP/MapScript,5,[],https://github.com/mapserver/mapserver/pull/5357,https://github.com/AlexanderGabriel,1,https://github.com/MapServer/MapServer/pull/5357,"Hi,
as promised... I updated README.WIN32 in / and /mapscript/php to describe building Mapserver and PHP/MapScript with CMake and Visual Studio 2012 Express on Windows.
Kind regards,
Alex","Hi,
as promised... I updated README.WIN32 in / and /mapscript/php to describe building Mapserver and PHP/MapScript with CMake and Visual Studio 2012 Express on Windows.
Kind regards,
Alex",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5357,2016-12-06T22:29:28Z,2016-12-07T10:02:50Z,2016-12-07T19:32:05Z,MERGED,True,119,104,2,https://github.com/AlexanderGabriel,Updated README.WIN32 for Mapserver and PHP/MapScript,5,[],https://github.com/mapserver/mapserver/pull/5357,https://github.com/tbonfort,2,https://github.com/MapServer/MapServer/pull/5357#issuecomment-265406203,"Hi,
as promised... I updated README.WIN32 in / and /mapscript/php to describe building Mapserver and PHP/MapScript with CMake and Visual Studio 2012 Express on Windows.
Kind regards,
Alex","Thanks @AlexanderGabriel , much appreciated !",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5360,2016-12-13T14:40:08Z,2017-11-13T21:33:26Z,2017-11-14T16:52:49Z,MERGED,True,35,2,1,https://github.com/dshorthouse,Repeat transformation if extent is extreme,1,[],https://github.com/mapserver/mapserver/pull/5360,https://github.com/dshorthouse,1,https://github.com/MapServer/MapServer/pull/5360,"Repeat transformation for a rectangle interior to the output requested region. If the latter results in a more extreme y extent, then extend extents in source layer projection to southern/northing bounds and entire x extent. This fix resolves issue #4864.","Repeat transformation for a rectangle interior to the output requested region. If the latter results in a more extreme y extent, then extend extents in source layer projection to southern/northing bounds and entire x extent. This fix resolves issue #4864.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5360,2016-12-13T14:40:08Z,2017-11-13T21:33:26Z,2017-11-14T16:52:49Z,MERGED,True,35,2,1,https://github.com/dshorthouse,Repeat transformation if extent is extreme,1,[],https://github.com/mapserver/mapserver/pull/5360,https://github.com/dshorthouse,2,https://github.com/MapServer/MapServer/pull/5360#issuecomment-275114793,"Repeat transformation for a rectangle interior to the output requested region. If the latter results in a more extreme y extent, then extend extents in source layer projection to southern/northing bounds and entire x extent. This fix resolves issue #4864.",This issue is still present in 7.0.4 and the PR continues to solve the issue.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5360,2016-12-13T14:40:08Z,2017-11-13T21:33:26Z,2017-11-14T16:52:49Z,MERGED,True,35,2,1,https://github.com/dshorthouse,Repeat transformation if extent is extreme,1,[],https://github.com/mapserver/mapserver/pull/5360,https://github.com/tbonfort,3,https://github.com/MapServer/MapServer/pull/5360#issuecomment-275120353,"Repeat transformation for a rectangle interior to the output requested region. If the latter results in a more extreme y extent, then extend extents in source layer projection to southern/northing bounds and entire x extent. This fix resolves issue #4864.",does this also solve #5348 ?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5360,2016-12-13T14:40:08Z,2017-11-13T21:33:26Z,2017-11-14T16:52:49Z,MERGED,True,35,2,1,https://github.com/dshorthouse,Repeat transformation if extent is extreme,1,[],https://github.com/mapserver/mapserver/pull/5360,https://github.com/dshorthouse,4,https://github.com/MapServer/MapServer/pull/5360#issuecomment-275122161,"Repeat transformation for a rectangle interior to the output requested region. If the latter results in a more extreme y extent, then extend extents in source layer projection to southern/northing bounds and entire x extent. This fix resolves issue #4864.","No, it solves #4864.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5360,2016-12-13T14:40:08Z,2017-11-13T21:33:26Z,2017-11-14T16:52:49Z,MERGED,True,35,2,1,https://github.com/dshorthouse,Repeat transformation if extent is extreme,1,[],https://github.com/mapserver/mapserver/pull/5360,https://github.com/sdlime,5,https://github.com/MapServer/MapServer/pull/5360#issuecomment-324352236,"Repeat transformation for a rectangle interior to the output requested region. If the latter results in a more extreme y extent, then extend extents in source layer projection to southern/northing bounds and entire x extent. This fix resolves issue #4864.",Any objection to applying this? Looks to be relatively isolated and all tests pass. --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5360,2016-12-13T14:40:08Z,2017-11-13T21:33:26Z,2017-11-14T16:52:49Z,MERGED,True,35,2,1,https://github.com/dshorthouse,Repeat transformation if extent is extreme,1,[],https://github.com/mapserver/mapserver/pull/5360,https://github.com/dshorthouse,6,https://github.com/MapServer/MapServer/pull/5360#issuecomment-324361690,"Repeat transformation for a rectangle interior to the output requested region. If the latter results in a more extreme y extent, then extend extents in source layer projection to southern/northing bounds and entire x extent. This fix resolves issue #4864.",@sdlime I'd expect all tests to pass because it's a rather specific case (raster with polar projection) in a conditional that would not be called very often. I have not written any new tests that specifically target what this patch is doing and what might be the consequences to performance.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5360,2016-12-13T14:40:08Z,2017-11-13T21:33:26Z,2017-11-14T16:52:49Z,MERGED,True,35,2,1,https://github.com/dshorthouse,Repeat transformation if extent is extreme,1,[],https://github.com/mapserver/mapserver/pull/5360,https://github.com/jmckenna,7,https://github.com/MapServer/MapServer/pull/5360#issuecomment-344066329,"Repeat transformation for a rectangle interior to the output requested region. If the latter results in a more extreme y extent, then extend extents in source layer projection to southern/northing bounds and entire x extent. This fix resolves issue #4864.","@dshorthouse thanks for this patch, nice work on #4864 (a long time coming ha).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5362,2016-12-22T03:07:35Z,2017-01-19T14:05:34Z,2021-04-26T02:42:13Z,MERGED,True,2525,2493,2,https://github.com/sdlime,Added C-style multi-line comment support to the lexer.,4,[],https://github.com/mapserver/mapserver/pull/5362,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/5362,Initial crack at supporting C-style comments. Both single line (e.g. /* foo /) and multi-line comments work. Only casualty is that a regex of the form /.../ can't be used since those would be recognized as the start of a comment. See ticket #4097.,Initial crack at supporting C-style comments. Both single line (e.g. /* foo /) and multi-line comments work. Only casualty is that a regex of the form /.../ can't be used since those would be recognized as the start of a comment. See ticket #4097.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5362,2016-12-22T03:07:35Z,2017-01-19T14:05:34Z,2021-04-26T02:42:13Z,MERGED,True,2525,2493,2,https://github.com/sdlime,Added C-style multi-line comment support to the lexer.,4,[],https://github.com/mapserver/mapserver/pull/5362,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5362#issuecomment-270185939,Initial crack at supporting C-style comments. Both single line (e.g. /* foo /) and multi-line comments work. Only casualty is that a regex of the form /.../ can't be used since those would be recognized as the start of a comment. See ticket #4097.,This can be merged.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5362,2016-12-22T03:07:35Z,2017-01-19T14:05:34Z,2021-04-26T02:42:13Z,MERGED,True,2525,2493,2,https://github.com/sdlime,Added C-style multi-line comment support to the lexer.,4,[],https://github.com/mapserver/mapserver/pull/5362,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/5362#issuecomment-273647751,Initial crack at supporting C-style comments. Both single line (e.g. /* foo /) and multi-line comments work. Only casualty is that a regex of the form /.../ can't be used since those would be recognized as the start of a comment. See ticket #4097.,"Jeff, I added support for C-style single line comments too. So we have Perl-style and C-style. Give it a shot... --Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5362,2016-12-22T03:07:35Z,2017-01-19T14:05:34Z,2021-04-26T02:42:13Z,MERGED,True,2525,2493,2,https://github.com/sdlime,Added C-style multi-line comment support to the lexer.,4,[],https://github.com/mapserver/mapserver/pull/5362,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/5362#issuecomment-273783286,Initial crack at supporting C-style comments. Both single line (e.g. /* foo /) and multi-line comments work. Only casualty is that a regex of the form /.../ can't be used since those would be recognized as the start of a comment. See ticket #4097.,Steve it works great!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5370,2017-01-16T21:42:49Z,2017-01-16T21:55:45Z,2017-01-16T22:03:55Z,MERGED,True,4,0,1,https://github.com/sebastic,Use include paths from php-config when include path not found.,1,[],https://github.com/mapserver/mapserver/pull/5370,https://github.com/sebastic,1,https://github.com/MapServer/MapServer/pull/5370,"Fixes build failure with PHP 5 PPA packages, introduced by the changes in 54d645c.
OSGeo-Live uses the PHP 5 PPA packages to support PHP MapScript on Ubuntu xenial, but was unable to update the mapserver package due to this build failure.","Fixes build failure with PHP 5 PPA packages, introduced by the changes in 54d645c.
OSGeo-Live uses the PHP 5 PPA packages to support PHP MapScript on Ubuntu xenial, but was unable to update the mapserver package due to this build failure.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5370,2017-01-16T21:42:49Z,2017-01-16T21:55:45Z,2017-01-16T22:03:55Z,MERGED,True,4,0,1,https://github.com/sebastic,Use include paths from php-config when include path not found.,1,[],https://github.com/mapserver/mapserver/pull/5370,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5370#issuecomment-272971149,"Fixes build failure with PHP 5 PPA packages, introduced by the changes in 54d645c.
OSGeo-Live uses the PHP 5 PPA packages to support PHP MapScript on Ubuntu xenial, but was unable to update the mapserver package due to this build failure.",Thanks @sebastic,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5371,2017-01-17T08:37:17Z,2017-12-20T13:52:18Z,2017-12-20T13:52:18Z,CLOSED,False,260,0,9,https://github.com/tbonfort,make wms layer groups requestable,3,[],https://github.com/mapserver/mapserver/pull/5371,https://github.com/tbonfort,1,https://github.com/MapServer/MapServer/pull/5371,"In the current layer grouping implementation, a layer with wms_layer_group=/g will only let its group ""g"" appear as requestable (i.e. with a <name>g</name> in capabilities) if there is also a LAYER in the mapfile with NAME=g.
I'd argue that this is unintuitive as when you are creating a hierarchy of layers you end up being obliged to define dummy/empty layers in order to get that hierarchy to be actually useful. e.g. see https://github.com/mapserver/mapserver/blob/rel-7-0-4/msautotest/wxs/wms_inspire.map#L257
The WMS spec (wms 1.1 - 7.1.5.4) does provision for the case where a group of layers appears but cannot be called if it has only a <title> defined but not a <name>. This is what we are implementing currently in the capabilities, but we are not respecting it in GetMap requests (we happily render the group even if it has no <name> defined).
In order to be coherent with the concept of layer grouping, be coherent with our actual behavior, and simplify writing grouped mapfiles, I propose we modify the current behavior and always add a <name> tag to group layers.

 patch to add <name> tag to group layers
 capabilities test
 request test
 documentation update
 HISTORY.TXT update
 migration guide update","In the current layer grouping implementation, a layer with wms_layer_group=/g will only let its group ""g"" appear as requestable (i.e. with a <name>g</name> in capabilities) if there is also a LAYER in the mapfile with NAME=g.
I'd argue that this is unintuitive as when you are creating a hierarchy of layers you end up being obliged to define dummy/empty layers in order to get that hierarchy to be actually useful. e.g. see https://github.com/mapserver/mapserver/blob/rel-7-0-4/msautotest/wxs/wms_inspire.map#L257
The WMS spec (wms 1.1 - 7.1.5.4) does provision for the case where a group of layers appears but cannot be called if it has only a <title> defined but not a <name>. This is what we are implementing currently in the capabilities, but we are not respecting it in GetMap requests (we happily render the group even if it has no <name> defined).
In order to be coherent with the concept of layer grouping, be coherent with our actual behavior, and simplify writing grouped mapfiles, I propose we modify the current behavior and always add a <name> tag to group layers.

 patch to add <name> tag to group layers
 capabilities test
 request test
 documentation update
 HISTORY.TXT update
 migration guide update",True,"{'THUMBS_UP': ['https://github.com/yjacolin', 'https://github.com/tom48484848']}"
mapserver/mapserver,https://github.com/mapserver/mapserver,5371,2017-01-17T08:37:17Z,2017-12-20T13:52:18Z,2017-12-20T13:52:18Z,CLOSED,False,260,0,9,https://github.com/tbonfort,make wms layer groups requestable,3,[],https://github.com/mapserver/mapserver/pull/5371,https://github.com/tbonfort,2,https://github.com/MapServer/MapServer/pull/5371#issuecomment-273053549,"In the current layer grouping implementation, a layer with wms_layer_group=/g will only let its group ""g"" appear as requestable (i.e. with a <name>g</name> in capabilities) if there is also a LAYER in the mapfile with NAME=g.
I'd argue that this is unintuitive as when you are creating a hierarchy of layers you end up being obliged to define dummy/empty layers in order to get that hierarchy to be actually useful. e.g. see https://github.com/mapserver/mapserver/blob/rel-7-0-4/msautotest/wxs/wms_inspire.map#L257
The WMS spec (wms 1.1 - 7.1.5.4) does provision for the case where a group of layers appears but cannot be called if it has only a <title> defined but not a <name>. This is what we are implementing currently in the capabilities, but we are not respecting it in GetMap requests (we happily render the group even if it has no <name> defined).
In order to be coherent with the concept of layer grouping, be coherent with our actual behavior, and simplify writing grouped mapfiles, I propose we modify the current behavior and always add a <name> tag to group layers.

 patch to add <name> tag to group layers
 capabilities test
 request test
 documentation update
 HISTORY.TXT update
 migration guide update",cc @yjacolin,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5371,2017-01-17T08:37:17Z,2017-12-20T13:52:18Z,2017-12-20T13:52:18Z,CLOSED,False,260,0,9,https://github.com/tbonfort,make wms layer groups requestable,3,[],https://github.com/mapserver/mapserver/pull/5371,https://github.com/tbonfort,3,https://github.com/MapServer/MapServer/pull/5371#issuecomment-273054667,"In the current layer grouping implementation, a layer with wms_layer_group=/g will only let its group ""g"" appear as requestable (i.e. with a <name>g</name> in capabilities) if there is also a LAYER in the mapfile with NAME=g.
I'd argue that this is unintuitive as when you are creating a hierarchy of layers you end up being obliged to define dummy/empty layers in order to get that hierarchy to be actually useful. e.g. see https://github.com/mapserver/mapserver/blob/rel-7-0-4/msautotest/wxs/wms_inspire.map#L257
The WMS spec (wms 1.1 - 7.1.5.4) does provision for the case where a group of layers appears but cannot be called if it has only a <title> defined but not a <name>. This is what we are implementing currently in the capabilities, but we are not respecting it in GetMap requests (we happily render the group even if it has no <name> defined).
In order to be coherent with the concept of layer grouping, be coherent with our actual behavior, and simplify writing grouped mapfiles, I propose we modify the current behavior and always add a <name> tag to group layers.

 patch to add <name> tag to group layers
 capabilities test
 request test
 documentation update
 HISTORY.TXT update
 migration guide update",see also #5220,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5371,2017-01-17T08:37:17Z,2017-12-20T13:52:18Z,2017-12-20T13:52:18Z,CLOSED,False,260,0,9,https://github.com/tbonfort,make wms layer groups requestable,3,[],https://github.com/mapserver/mapserver/pull/5371,https://github.com/yjacolin,4,https://github.com/MapServer/MapServer/pull/5371#issuecomment-276894837,"In the current layer grouping implementation, a layer with wms_layer_group=/g will only let its group ""g"" appear as requestable (i.e. with a <name>g</name> in capabilities) if there is also a LAYER in the mapfile with NAME=g.
I'd argue that this is unintuitive as when you are creating a hierarchy of layers you end up being obliged to define dummy/empty layers in order to get that hierarchy to be actually useful. e.g. see https://github.com/mapserver/mapserver/blob/rel-7-0-4/msautotest/wxs/wms_inspire.map#L257
The WMS spec (wms 1.1 - 7.1.5.4) does provision for the case where a group of layers appears but cannot be called if it has only a <title> defined but not a <name>. This is what we are implementing currently in the capabilities, but we are not respecting it in GetMap requests (we happily render the group even if it has no <name> defined).
In order to be coherent with the concept of layer grouping, be coherent with our actual behavior, and simplify writing grouped mapfiles, I propose we modify the current behavior and always add a <name> tag to group layers.

 patch to add <name> tag to group layers
 capabilities test
 request test
 documentation update
 HISTORY.TXT update
 migration guide update",@tbonfort do you need a feedback from me?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5371,2017-01-17T08:37:17Z,2017-12-20T13:52:18Z,2017-12-20T13:52:18Z,CLOSED,False,260,0,9,https://github.com/tbonfort,make wms layer groups requestable,3,[],https://github.com/mapserver/mapserver/pull/5371,https://github.com/sdlime,5,https://github.com/MapServer/MapServer/pull/5371#issuecomment-324347080,"In the current layer grouping implementation, a layer with wms_layer_group=/g will only let its group ""g"" appear as requestable (i.e. with a <name>g</name> in capabilities) if there is also a LAYER in the mapfile with NAME=g.
I'd argue that this is unintuitive as when you are creating a hierarchy of layers you end up being obliged to define dummy/empty layers in order to get that hierarchy to be actually useful. e.g. see https://github.com/mapserver/mapserver/blob/rel-7-0-4/msautotest/wxs/wms_inspire.map#L257
The WMS spec (wms 1.1 - 7.1.5.4) does provision for the case where a group of layers appears but cannot be called if it has only a <title> defined but not a <name>. This is what we are implementing currently in the capabilities, but we are not respecting it in GetMap requests (we happily render the group even if it has no <name> defined).
In order to be coherent with the concept of layer grouping, be coherent with our actual behavior, and simplify writing grouped mapfiles, I propose we modify the current behavior and always add a <name> tag to group layers.

 patch to add <name> tag to group layers
 capabilities test
 request test
 documentation update
 HISTORY.TXT update
 migration guide update",Is this one ready to merge?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5371,2017-01-17T08:37:17Z,2017-12-20T13:52:18Z,2017-12-20T13:52:18Z,CLOSED,False,260,0,9,https://github.com/tbonfort,make wms layer groups requestable,3,[],https://github.com/mapserver/mapserver/pull/5371,https://github.com/yjacolin,6,https://github.com/MapServer/MapServer/pull/5371#issuecomment-324350695,"In the current layer grouping implementation, a layer with wms_layer_group=/g will only let its group ""g"" appear as requestable (i.e. with a <name>g</name> in capabilities) if there is also a LAYER in the mapfile with NAME=g.
I'd argue that this is unintuitive as when you are creating a hierarchy of layers you end up being obliged to define dummy/empty layers in order to get that hierarchy to be actually useful. e.g. see https://github.com/mapserver/mapserver/blob/rel-7-0-4/msautotest/wxs/wms_inspire.map#L257
The WMS spec (wms 1.1 - 7.1.5.4) does provision for the case where a group of layers appears but cannot be called if it has only a <title> defined but not a <name>. This is what we are implementing currently in the capabilities, but we are not respecting it in GetMap requests (we happily render the group even if it has no <name> defined).
In order to be coherent with the concept of layer grouping, be coherent with our actual behavior, and simplify writing grouped mapfiles, I propose we modify the current behavior and always add a <name> tag to group layers.

 patch to add <name> tag to group layers
 capabilities test
 request test
 documentation update
 HISTORY.TXT update
 migration guide update","If we can help in any way, let's us know.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5371,2017-01-17T08:37:17Z,2017-12-20T13:52:18Z,2017-12-20T13:52:18Z,CLOSED,False,260,0,9,https://github.com/tbonfort,make wms layer groups requestable,3,[],https://github.com/mapserver/mapserver/pull/5371,https://github.com/ebelo,7,https://github.com/MapServer/MapServer/pull/5371#issuecomment-351044053,"In the current layer grouping implementation, a layer with wms_layer_group=/g will only let its group ""g"" appear as requestable (i.e. with a <name>g</name> in capabilities) if there is also a LAYER in the mapfile with NAME=g.
I'd argue that this is unintuitive as when you are creating a hierarchy of layers you end up being obliged to define dummy/empty layers in order to get that hierarchy to be actually useful. e.g. see https://github.com/mapserver/mapserver/blob/rel-7-0-4/msautotest/wxs/wms_inspire.map#L257
The WMS spec (wms 1.1 - 7.1.5.4) does provision for the case where a group of layers appears but cannot be called if it has only a <title> defined but not a <name>. This is what we are implementing currently in the capabilities, but we are not respecting it in GetMap requests (we happily render the group even if it has no <name> defined).
In order to be coherent with the concept of layer grouping, be coherent with our actual behavior, and simplify writing grouped mapfiles, I propose we modify the current behavior and always add a <name> tag to group layers.

 patch to add <name> tag to group layers
 capabilities test
 request test
 documentation update
 HISTORY.TXT update
 migration guide update","Hi, is this ready to merge? Can we do something so that it gets into master?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5371,2017-01-17T08:37:17Z,2017-12-20T13:52:18Z,2017-12-20T13:52:18Z,CLOSED,False,260,0,9,https://github.com/tbonfort,make wms layer groups requestable,3,[],https://github.com/mapserver/mapserver/pull/5371,https://github.com/yjacolin,8,https://github.com/MapServer/MapServer/pull/5371#issuecomment-352815947,"In the current layer grouping implementation, a layer with wms_layer_group=/g will only let its group ""g"" appear as requestable (i.e. with a <name>g</name> in capabilities) if there is also a LAYER in the mapfile with NAME=g.
I'd argue that this is unintuitive as when you are creating a hierarchy of layers you end up being obliged to define dummy/empty layers in order to get that hierarchy to be actually useful. e.g. see https://github.com/mapserver/mapserver/blob/rel-7-0-4/msautotest/wxs/wms_inspire.map#L257
The WMS spec (wms 1.1 - 7.1.5.4) does provision for the case where a group of layers appears but cannot be called if it has only a <title> defined but not a <name>. This is what we are implementing currently in the capabilities, but we are not respecting it in GetMap requests (we happily render the group even if it has no <name> defined).
In order to be coherent with the concept of layer grouping, be coherent with our actual behavior, and simplify writing grouped mapfiles, I propose we modify the current behavior and always add a <name> tag to group layers.

 patch to add <name> tag to group layers
 capabilities test
 request test
 documentation update
 HISTORY.TXT update
 migration guide update","@tbonfort I am working on the doc parts of this feature. I created a new branch up-to-date with master and cherry-pick your 3 commits, added an item in HISTORY.TXT. Are you ok to close this PR and I will open a new one with a link to the doc. Thank for you answer.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5371,2017-01-17T08:37:17Z,2017-12-20T13:52:18Z,2017-12-20T13:52:18Z,CLOSED,False,260,0,9,https://github.com/tbonfort,make wms layer groups requestable,3,[],https://github.com/mapserver/mapserver/pull/5371,https://github.com/yjacolin,9,https://github.com/MapServer/MapServer/pull/5371#issuecomment-353004388,"In the current layer grouping implementation, a layer with wms_layer_group=/g will only let its group ""g"" appear as requestable (i.e. with a <name>g</name> in capabilities) if there is also a LAYER in the mapfile with NAME=g.
I'd argue that this is unintuitive as when you are creating a hierarchy of layers you end up being obliged to define dummy/empty layers in order to get that hierarchy to be actually useful. e.g. see https://github.com/mapserver/mapserver/blob/rel-7-0-4/msautotest/wxs/wms_inspire.map#L257
The WMS spec (wms 1.1 - 7.1.5.4) does provision for the case where a group of layers appears but cannot be called if it has only a <title> defined but not a <name>. This is what we are implementing currently in the capabilities, but we are not respecting it in GetMap requests (we happily render the group even if it has no <name> defined).
In order to be coherent with the concept of layer grouping, be coherent with our actual behavior, and simplify writing grouped mapfiles, I propose we modify the current behavior and always add a <name> tag to group layers.

 patch to add <name> tag to group layers
 capabilities test
 request test
 documentation update
 HISTORY.TXT update
 migration guide update",MIGRATION_GUIDE.txt doesn't need to be updated.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5371,2017-01-17T08:37:17Z,2017-12-20T13:52:18Z,2017-12-20T13:52:18Z,CLOSED,False,260,0,9,https://github.com/tbonfort,make wms layer groups requestable,3,[],https://github.com/mapserver/mapserver/pull/5371,https://github.com/yjacolin,10,https://github.com/MapServer/MapServer/pull/5371#issuecomment-353067826,"In the current layer grouping implementation, a layer with wms_layer_group=/g will only let its group ""g"" appear as requestable (i.e. with a <name>g</name> in capabilities) if there is also a LAYER in the mapfile with NAME=g.
I'd argue that this is unintuitive as when you are creating a hierarchy of layers you end up being obliged to define dummy/empty layers in order to get that hierarchy to be actually useful. e.g. see https://github.com/mapserver/mapserver/blob/rel-7-0-4/msautotest/wxs/wms_inspire.map#L257
The WMS spec (wms 1.1 - 7.1.5.4) does provision for the case where a group of layers appears but cannot be called if it has only a <title> defined but not a <name>. This is what we are implementing currently in the capabilities, but we are not respecting it in GetMap requests (we happily render the group even if it has no <name> defined).
In order to be coherent with the concept of layer grouping, be coherent with our actual behavior, and simplify writing grouped mapfiles, I propose we modify the current behavior and always add a <name> tag to group layers.

 patch to add <name> tag to group layers
 capabilities test
 request test
 documentation update
 HISTORY.TXT update
 migration guide update","following discussion in Mapserver-dev list, a new PR superseed this one: #5533",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5372,2017-01-17T09:45:43Z,2017-01-17T10:26:46Z,2018-05-15T12:58:16Z,MERGED,True,2,0,1,https://github.com/pmauduit,oracle - fixing memory handling error,1,[],https://github.com/mapserver/mapserver/pull/5372,https://github.com/pmauduit,1,https://github.com/MapServer/MapServer/pull/5372,"If the memory area pointed by table_name is too small, it is resized multiplying its size by 2. But if this occurs, the tgt variable used in the ""for"" loop continues to point on a memory area which might have become invalid (because the realloc could have moved the memory somewhere else, depending on how the OS manages the memory).
To fix this, in my understanding, the tgt pointer should be readjusted after the realloc call to the new location pointed by table_name.
Running valgrind without my patch (sources based on the 7.0.1 version, but the maporaclespatial.c is identical to master):
==1908== Invalid write of size 1
==1908==    at 0x4E81FEF: msSplitData (in /usr/lib/x86_64-linux-gnu/libmapserver.so.7.0.1)

Running in gdb gives the following error:
*** Error in `/usr/lib/cgi-bin/mapserv': realloc(): invalid next size: 0x0000000000786c90 ***

Tests: runtime tested in a docker composition, after patching, I don't have the error in gdb anymore.
Note: valgrinds continues to indicate some errors related to this msSplitData() method:
==1945== 32,000 bytes in 1 blocks are definitely lost in loss record 264
of 268
==1945==    at 0x4C2AF2E: realloc (vg_replace_malloc.c:692)
==1945==    by 0x4EBDF4B: msSplitData (maporaclespatial.c:404)
==1945==    by 0x4EC90E0: msOracleSpatialLayerTranslateFilter (maporaclespatial.c:3499)

I wonder if in the context of msOracleSpatialLayerTranslateFilter(), the pointers are still valid when they are actually freed at the end of the method.","If the memory area pointed by table_name is too small, it is resized multiplying its size by 2. But if this occurs, the tgt variable used in the ""for"" loop continues to point on a memory area which might have become invalid (because the realloc could have moved the memory somewhere else, depending on how the OS manages the memory).
To fix this, in my understanding, the tgt pointer should be readjusted after the realloc call to the new location pointed by table_name.
Running valgrind without my patch (sources based on the 7.0.1 version, but the maporaclespatial.c is identical to master):
==1908== Invalid write of size 1
==1908==    at 0x4E81FEF: msSplitData (in /usr/lib/x86_64-linux-gnu/libmapserver.so.7.0.1)

Running in gdb gives the following error:
*** Error in `/usr/lib/cgi-bin/mapserv': realloc(): invalid next size: 0x0000000000786c90 ***

Tests: runtime tested in a docker composition, after patching, I don't have the error in gdb anymore.
Note: valgrinds continues to indicate some errors related to this msSplitData() method:
==1945== 32,000 bytes in 1 blocks are definitely lost in loss record 264
of 268
==1945==    at 0x4C2AF2E: realloc (vg_replace_malloc.c:692)
==1945==    by 0x4EBDF4B: msSplitData (maporaclespatial.c:404)
==1945==    by 0x4EC90E0: msOracleSpatialLayerTranslateFilter (maporaclespatial.c:3499)

I wonder if in the context of msOracleSpatialLayerTranslateFilter(), the pointers are still valid when they are actually freed at the end of the method.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5372,2017-01-17T09:45:43Z,2017-01-17T10:26:46Z,2018-05-15T12:58:16Z,MERGED,True,2,0,1,https://github.com/pmauduit,oracle - fixing memory handling error,1,[],https://github.com/mapserver/mapserver/pull/5372,https://github.com/tbonfort,2,https://github.com/MapServer/MapServer/pull/5372#issuecomment-273075353,"If the memory area pointed by table_name is too small, it is resized multiplying its size by 2. But if this occurs, the tgt variable used in the ""for"" loop continues to point on a memory area which might have become invalid (because the realloc could have moved the memory somewhere else, depending on how the OS manages the memory).
To fix this, in my understanding, the tgt pointer should be readjusted after the realloc call to the new location pointed by table_name.
Running valgrind without my patch (sources based on the 7.0.1 version, but the maporaclespatial.c is identical to master):
==1908== Invalid write of size 1
==1908==    at 0x4E81FEF: msSplitData (in /usr/lib/x86_64-linux-gnu/libmapserver.so.7.0.1)

Running in gdb gives the following error:
*** Error in `/usr/lib/cgi-bin/mapserv': realloc(): invalid next size: 0x0000000000786c90 ***

Tests: runtime tested in a docker composition, after patching, I don't have the error in gdb anymore.
Note: valgrinds continues to indicate some errors related to this msSplitData() method:
==1945== 32,000 bytes in 1 blocks are definitely lost in loss record 264
of 268
==1945==    at 0x4C2AF2E: realloc (vg_replace_malloc.c:692)
==1945==    by 0x4EBDF4B: msSplitData (maporaclespatial.c:404)
==1945==    by 0x4EC90E0: msOracleSpatialLayerTranslateFilter (maporaclespatial.c:3499)

I wonder if in the context of msOracleSpatialLayerTranslateFilter(), the pointers are still valid when they are actually freed at the end of the method.",LGTM can you base this on branch-7-0 please,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5372,2017-01-17T09:45:43Z,2017-01-17T10:26:46Z,2018-05-15T12:58:16Z,MERGED,True,2,0,1,https://github.com/pmauduit,oracle - fixing memory handling error,1,[],https://github.com/mapserver/mapserver/pull/5372,https://github.com/pmauduit,3,https://github.com/MapServer/MapServer/pull/5372#issuecomment-273078530,"If the memory area pointed by table_name is too small, it is resized multiplying its size by 2. But if this occurs, the tgt variable used in the ""for"" loop continues to point on a memory area which might have become invalid (because the realloc could have moved the memory somewhere else, depending on how the OS manages the memory).
To fix this, in my understanding, the tgt pointer should be readjusted after the realloc call to the new location pointed by table_name.
Running valgrind without my patch (sources based on the 7.0.1 version, but the maporaclespatial.c is identical to master):
==1908== Invalid write of size 1
==1908==    at 0x4E81FEF: msSplitData (in /usr/lib/x86_64-linux-gnu/libmapserver.so.7.0.1)

Running in gdb gives the following error:
*** Error in `/usr/lib/cgi-bin/mapserv': realloc(): invalid next size: 0x0000000000786c90 ***

Tests: runtime tested in a docker composition, after patching, I don't have the error in gdb anymore.
Note: valgrinds continues to indicate some errors related to this msSplitData() method:
==1945== 32,000 bytes in 1 blocks are definitely lost in loss record 264
of 268
==1945==    at 0x4C2AF2E: realloc (vg_replace_malloc.c:692)
==1945==    by 0x4EBDF4B: msSplitData (maporaclespatial.c:404)
==1945==    by 0x4EC90E0: msOracleSpatialLayerTranslateFilter (maporaclespatial.c:3499)

I wonder if in the context of msOracleSpatialLayerTranslateFilter(), the pointers are still valid when they are actually freed at the end of the method.",done,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5372,2017-01-17T09:45:43Z,2017-01-17T10:26:46Z,2018-05-15T12:58:16Z,MERGED,True,2,0,1,https://github.com/pmauduit,oracle - fixing memory handling error,1,[],https://github.com/mapserver/mapserver/pull/5372,https://github.com/tbonfort,4,https://github.com/MapServer/MapServer/pull/5372#issuecomment-273094335,"If the memory area pointed by table_name is too small, it is resized multiplying its size by 2. But if this occurs, the tgt variable used in the ""for"" loop continues to point on a memory area which might have become invalid (because the realloc could have moved the memory somewhere else, depending on how the OS manages the memory).
To fix this, in my understanding, the tgt pointer should be readjusted after the realloc call to the new location pointed by table_name.
Running valgrind without my patch (sources based on the 7.0.1 version, but the maporaclespatial.c is identical to master):
==1908== Invalid write of size 1
==1908==    at 0x4E81FEF: msSplitData (in /usr/lib/x86_64-linux-gnu/libmapserver.so.7.0.1)

Running in gdb gives the following error:
*** Error in `/usr/lib/cgi-bin/mapserv': realloc(): invalid next size: 0x0000000000786c90 ***

Tests: runtime tested in a docker composition, after patching, I don't have the error in gdb anymore.
Note: valgrinds continues to indicate some errors related to this msSplitData() method:
==1945== 32,000 bytes in 1 blocks are definitely lost in loss record 264
of 268
==1945==    at 0x4C2AF2E: realloc (vg_replace_malloc.c:692)
==1945==    by 0x4EBDF4B: msSplitData (maporaclespatial.c:404)
==1945==    by 0x4EC90E0: msOracleSpatialLayerTranslateFilter (maporaclespatial.c:3499)

I wonder if in the context of msOracleSpatialLayerTranslateFilter(), the pointers are still valid when they are actually freed at the end of the method.","thanks @pmauduit. Concerning the leak, there seems to be no cleanup in the translateFilter function, it needs to be added. You can open another PR for that.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5373,2017-01-20T20:37:54Z,2017-01-26T10:12:01Z,2017-01-26T10:40:39Z,CLOSED,False,1,0,1,https://github.com/micking,Bug fix: Included mapows.h to have correct prototype for msOWSLookupMetadata,1,[],https://github.com/mapserver/mapserver/pull/5373,https://github.com/micking,1,https://github.com/MapServer/MapServer/pull/5373,"mapserver crashed on windows with an Oracle layer (using Oracle plugin)
and ""gml_types"" ""auto""
This was caused by using msOWSLookupMetadata without a prototype
Missing prototype gave following warning during a windows build:
Warning 13 warning C4013: 'msOWSLookupMetadata' undefined; assuming
extern returning int
C:\dev\mapserver-bentley\mapserver\maporaclespatial.c 2949 1
msplugin_oracle","mapserver crashed on windows with an Oracle layer (using Oracle plugin)
and ""gml_types"" ""auto""
This was caused by using msOWSLookupMetadata without a prototype
Missing prototype gave following warning during a windows build:
Warning 13 warning C4013: 'msOWSLookupMetadata' undefined; assuming
extern returning int
C:\dev\mapserver-bentley\mapserver\maporaclespatial.c 2949 1
msplugin_oracle",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5373,2017-01-20T20:37:54Z,2017-01-26T10:12:01Z,2017-01-26T10:40:39Z,CLOSED,False,1,0,1,https://github.com/micking,Bug fix: Included mapows.h to have correct prototype for msOWSLookupMetadata,1,[],https://github.com/mapserver/mapserver/pull/5373,https://github.com/tbonfort,2,https://github.com/MapServer/MapServer/pull/5373#issuecomment-275352356,"mapserver crashed on windows with an Oracle layer (using Oracle plugin)
and ""gml_types"" ""auto""
This was caused by using msOWSLookupMetadata without a prototype
Missing prototype gave following warning during a windows build:
Warning 13 warning C4013: 'msOWSLookupMetadata' undefined; assuming
extern returning int
C:\dev\mapserver-bentley\mapserver\maporaclespatial.c 2949 1
msplugin_oracle",applied in 027f421,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5375,2017-01-23T22:08:57Z,2017-01-23T22:19:20Z,2017-01-23T22:19:30Z,MERGED,True,2,1,1,https://github.com/szekerest,Fix Character type handling in WMS dimension filters (#5374),1,[],https://github.com/mapserver/mapserver/pull/5375,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5375,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5376,2017-01-24T04:44:23Z,2018-03-27T20:36:40Z,2018-04-06T06:41:23Z,MERGED,True,2903,1802,51,https://github.com/sdlime,Vector Tile Support,37,"['Enhancement', 'C Library', 'WMS Server']",https://github.com/mapserver/mapserver/pull/5376,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/5376,"Based on Thomas' vector-tiles branch. Fixed an alignment issue, added integration with mode=tile and updated to version 2.1 or the spec - basically switched out the .proto file. Tested against a couple of the Leaflet mvt plugins. --Steve
TODO:

 Fix buffering issues in tile mode
 Add autotests
 Create documentation page
 Create RFC","Based on Thomas' vector-tiles branch. Fixed an alignment issue, added integration with mode=tile and updated to version 2.1 or the spec - basically switched out the .proto file. Tested against a couple of the Leaflet mvt plugins. --Steve
TODO:

 Fix buffering issues in tile mode
 Add autotests
 Create documentation page
 Create RFC",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5376,2017-01-24T04:44:23Z,2018-03-27T20:36:40Z,2018-04-06T06:41:23Z,MERGED,True,2903,1802,51,https://github.com/sdlime,Vector Tile Support,37,"['Enhancement', 'C Library', 'WMS Server']",https://github.com/mapserver/mapserver/pull/5376,https://github.com/sid-kap,2,https://github.com/MapServer/MapServer/pull/5376#issuecomment-354898833,"Based on Thomas' vector-tiles branch. Fixed an alignment issue, added integration with mode=tile and updated to version 2.1 or the spec - basically switched out the .proto file. Tested against a couple of the Leaflet mvt plugins. --Steve
TODO:

 Fix buffering issues in tile mode
 Add autotests
 Create documentation page
 Create RFC","Hi! I was looking into MapServer and might be interested in using this feature. Is this still being developed, or has the PR been abandoned?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5376,2017-01-24T04:44:23Z,2018-03-27T20:36:40Z,2018-04-06T06:41:23Z,MERGED,True,2903,1802,51,https://github.com/sdlime,Vector Tile Support,37,"['Enhancement', 'C Library', 'WMS Server']",https://github.com/mapserver/mapserver/pull/5376,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/5376#issuecomment-361077996,"Based on Thomas' vector-tiles branch. Fixed an alignment issue, added integration with mode=tile and updated to version 2.1 or the spec - basically switched out the .proto file. Tested against a couple of the Leaflet mvt plugins. --Steve
TODO:

 Fix buffering issues in tile mode
 Add autotests
 Create documentation page
 Create RFC",Hi @sid-kap... The pull-request has not been abandoned. Just trying to get it merged. --Steve,True,{'THUMBS_UP': ['https://github.com/sid-kap']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5376,2017-01-24T04:44:23Z,2018-03-27T20:36:40Z,2018-04-06T06:41:23Z,MERGED,True,2903,1802,51,https://github.com/sdlime,Vector Tile Support,37,"['Enhancement', 'C Library', 'WMS Server']",https://github.com/mapserver/mapserver/pull/5376,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/5376#issuecomment-361092352,"Based on Thomas' vector-tiles branch. Fixed an alignment issue, added integration with mode=tile and updated to version 2.1 or the spec - basically switched out the .proto file. Tested against a couple of the Leaflet mvt plugins. --Steve
TODO:

 Fix buffering issues in tile mode
 Add autotests
 Create documentation page
 Create RFC","@rouault, @tbonfort, @jmckenna: the tests are failing because the protobuf output format is now appearing in a bunch of get capabilities output as a supported format (e.g. application/x-protobuf�). I can just fix all those results -- or should would make that an optional format?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5376,2017-01-24T04:44:23Z,2018-03-27T20:36:40Z,2018-04-06T06:41:23Z,MERGED,True,2903,1802,51,https://github.com/sdlime,Vector Tile Support,37,"['Enhancement', 'C Library', 'WMS Server']",https://github.com/mapserver/mapserver/pull/5376,https://github.com/rouault,5,https://github.com/MapServer/MapServer/pull/5376#issuecomment-361093238,"Based on Thomas' vector-tiles branch. Fixed an alignment issue, added integration with mode=tile and updated to version 2.1 or the spec - basically switched out the .proto file. Tested against a couple of the Leaflet mvt plugins. --Steve
TODO:

 Fix buffering issues in tile mode
 Add autotests
 Create documentation page
 Create RFC",I don't think there are more reasons to make it optional than the other formats,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5376,2017-01-24T04:44:23Z,2018-03-27T20:36:40Z,2018-04-06T06:41:23Z,MERGED,True,2903,1802,51,https://github.com/sdlime,Vector Tile Support,37,"['Enhancement', 'C Library', 'WMS Server']",https://github.com/mapserver/mapserver/pull/5376,https://github.com/itbeyond,6,https://github.com/MapServer/MapServer/pull/5376#issuecomment-365794490,"Based on Thomas' vector-tiles branch. Fixed an alignment issue, added integration with mode=tile and updated to version 2.1 or the spec - basically switched out the .proto file. Tested against a couple of the Leaflet mvt plugins. --Steve
TODO:

 Fix buffering issues in tile mode
 Add autotests
 Create documentation page
 Create RFC",I am really keen to get this running as soon as possible and have a project just waiting for this functionality. I am not sure if I can help but if there is something I can do to help get this functionality running I am happy to put in some time/effort.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5376,2017-01-24T04:44:23Z,2018-03-27T20:36:40Z,2018-04-06T06:41:23Z,MERGED,True,2903,1802,51,https://github.com/sdlime,Vector Tile Support,37,"['Enhancement', 'C Library', 'WMS Server']",https://github.com/mapserver/mapserver/pull/5376,https://github.com/sdlime,7,https://github.com/MapServer/MapServer/pull/5376#issuecomment-367458551,"Based on Thomas' vector-tiles branch. Fixed an alignment issue, added integration with mode=tile and updated to version 2.1 or the spec - basically switched out the .proto file. Tested against a couple of the Leaflet mvt plugins. --Steve
TODO:

 Fix buffering issues in tile mode
 Add autotests
 Create documentation page
 Create RFC","@rouault where the integration tests are crapping out doesn't look to be failing because my pull request (it's generating a PNG), is there a way to examine the Travis or AppVeyor output files? --Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5376,2017-01-24T04:44:23Z,2018-03-27T20:36:40Z,2018-04-06T06:41:23Z,MERGED,True,2903,1802,51,https://github.com/sdlime,Vector Tile Support,37,"['Enhancement', 'C Library', 'WMS Server']",https://github.com/mapserver/mapserver/pull/5376,https://github.com/rouault,8,https://github.com/MapServer/MapServer/pull/5376#issuecomment-367459917,"Based on Thomas' vector-tiles branch. Fixed an alignment issue, added integration with mode=tile and updated to version 2.1 or the spec - basically switched out the .proto file. Tested against a couple of the Leaflet mvt plugins. --Steve
TODO:

 Fix buffering issues in tile mode
 Add autotests
 Create documentation page
 Create RFC","@sdlime I'm not aware of a way of extracting the files from Travis/AppVeyor. I'd just suggest that you run msautotest from Vagrant, which uses the same library version as Travis. That's what I do usually",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5376,2017-01-24T04:44:23Z,2018-03-27T20:36:40Z,2018-04-06T06:41:23Z,MERGED,True,2903,1802,51,https://github.com/sdlime,Vector Tile Support,37,"['Enhancement', 'C Library', 'WMS Server']",https://github.com/mapserver/mapserver/pull/5376,https://github.com/sdlime,9,https://github.com/MapServer/MapServer/pull/5376#issuecomment-367462501,"Based on Thomas' vector-tiles branch. Fixed an alignment issue, added integration with mode=tile and updated to version 2.1 or the spec - basically switched out the .proto file. Tested against a couple of the Leaflet mvt plugins. --Steve
TODO:

 Fix buffering issues in tile mode
 Add autotests
 Create documentation page
 Create RFC",@rouault what version of vagrant and virtual box are you using? Stefan's docs reference versions that are a tad old.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5376,2017-01-24T04:44:23Z,2018-03-27T20:36:40Z,2018-04-06T06:41:23Z,MERGED,True,2903,1802,51,https://github.com/sdlime,Vector Tile Support,37,"['Enhancement', 'C Library', 'WMS Server']",https://github.com/mapserver/mapserver/pull/5376,https://github.com/rouault,10,https://github.com/MapServer/MapServer/pull/5376#issuecomment-367464609,"Based on Thomas' vector-tiles branch. Fixed an alignment issue, added integration with mode=tile and updated to version 2.1 or the spec - basically switched out the .proto file. Tested against a couple of the Leaflet mvt plugins. --Steve
TODO:

 Fix buffering issues in tile mode
 Add autotests
 Create documentation page
 Create RFC",The ones of Ubuntu 16.04: vagrant 1.8.1 + virtualbox 5.0.40. But the versions of ubuntu 14.04 also worked,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5376,2017-01-24T04:44:23Z,2018-03-27T20:36:40Z,2018-04-06T06:41:23Z,MERGED,True,2903,1802,51,https://github.com/sdlime,Vector Tile Support,37,"['Enhancement', 'C Library', 'WMS Server']",https://github.com/mapserver/mapserver/pull/5376,https://github.com/sdlime,11,https://github.com/MapServer/MapServer/pull/5376#issuecomment-367468212,"Based on Thomas' vector-tiles branch. Fixed an alignment issue, added integration with mode=tile and updated to version 2.1 or the spec - basically switched out the .proto file. Tested against a couple of the Leaflet mvt plugins. --Steve
TODO:

 Fix buffering issues in tile mode
 Add autotests
 Create documentation page
 Create RFC","@rouault, a local vagrant up dies since it can't find protobufc yet Travis seems to have that installed. Do you know where to affect that? --Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5376,2017-01-24T04:44:23Z,2018-03-27T20:36:40Z,2018-04-06T06:41:23Z,MERGED,True,2903,1802,51,https://github.com/sdlime,Vector Tile Support,37,"['Enhancement', 'C Library', 'WMS Server']",https://github.com/mapserver/mapserver/pull/5376,https://github.com/rouault,12,https://github.com/MapServer/MapServer/pull/5376#issuecomment-367468557,"Based on Thomas' vector-tiles branch. Fixed an alignment issue, added integration with mode=tile and updated to version 2.1 or the spec - basically switched out the .proto file. Tested against a couple of the Leaflet mvt plugins. --Steve
TODO:

 Fix buffering issues in tile mode
 Add autotests
 Create documentation page
 Create RFC","@sdlime In scripts/vagrant/packages.sh, add libprotobuf-dev or whatever the package is named to the apt-get install final line",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5376,2017-01-24T04:44:23Z,2018-03-27T20:36:40Z,2018-04-06T06:41:23Z,MERGED,True,2903,1802,51,https://github.com/sdlime,Vector Tile Support,37,"['Enhancement', 'C Library', 'WMS Server']",https://github.com/mapserver/mapserver/pull/5376,https://github.com/itbeyond,13,https://github.com/MapServer/MapServer/pull/5376#issuecomment-377094329,"Based on Thomas' vector-tiles branch. Fixed an alignment issue, added integration with mode=tile and updated to version 2.1 or the spec - basically switched out the .proto file. Tested against a couple of the Leaflet mvt plugins. --Steve
TODO:

 Fix buffering issues in tile mode
 Add autotests
 Create documentation page
 Create RFC","Compiled on Windows X64 platform and can confirm it is all working - there are some issues around Windows support for protobuf-c however I found a precompiled Windows binary that seems to work (See details here: protobuf-c/protobuf-c#168 - download provided at the end of the comments).
I have tested it with the mvt-demo published by @sdlime and will now start working on my data and looking at mapscript operation. Thanks guys great work and perfect timing for getting this running.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5381,2017-02-02T04:04:10Z,2017-02-09T18:35:06Z,2017-02-09T18:35:20Z,MERGED,True,4,4,1,https://github.com/NathanW2,Fix generated C# module,1,[],https://github.com/mapserver/mapserver/pull/5381,https://github.com/NathanW2,1,https://github.com/MapServer/MapServer/pull/5381,"Fixes the name of the C# module.  Should be mapscript.dll however the generated code currently looks for csharpmapscript.dll so will throw an error when loaded.
Seems it's only the cmake file that has this result.
@szekerest thoughts?","Fixes the name of the C# module.  Should be mapscript.dll however the generated code currently looks for csharpmapscript.dll so will throw an error when loaded.
Seems it's only the cmake file that has this result.
@szekerest thoughts?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5381,2017-02-02T04:04:10Z,2017-02-09T18:35:06Z,2017-02-09T18:35:20Z,MERGED,True,4,4,1,https://github.com/NathanW2,Fix generated C# module,1,[],https://github.com/mapserver/mapserver/pull/5381,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5381#issuecomment-278731621,"Fixes the name of the C# module.  Should be mapscript.dll however the generated code currently looks for csharpmapscript.dll so will throw an error when loaded.
Seems it's only the cmake file that has this result.
@szekerest thoughts?",makes sense to me.  Thanks @NathanW2 !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5384,2017-02-08T15:56:47Z,2017-02-09T18:32:01Z,2017-02-09T18:32:01Z,MERGED,True,469,77,3,https://github.com/msmitherdc,"Update dockerfiles, add oracle and mapcache options",1,[],https://github.com/mapserver/mapserver/pull/5384,https://github.com/msmitherdc,1,https://github.com/MapServer/MapServer/pull/5384,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5385,2017-02-08T17:00:16Z,2017-02-09T18:33:38Z,2017-02-09T18:33:38Z,MERGED,True,57,54,1,https://github.com/ianturton,updates to schema,1,[],https://github.com/mapserver/mapserver/pull/5385,https://github.com/ianturton,1,https://github.com/MapServer/MapServer/pull/5385,"moved min/maxScaleDenomentator from Layer to Style
made outlinewidth into a double
made align optional with a default of Center
fixed major whitespace issues","moved min/maxScaleDenomentator from Layer to Style
made outlinewidth into a double
made align optional with a default of Center
fixed major whitespace issues",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5388,2017-02-14T09:45:03Z,2017-02-14T10:15:35Z,2017-02-14T10:15:35Z,MERGED,True,1,1,1,https://github.com/landryb,Declare nLayerOrder where it's used. (#5387),1,[],https://github.com/mapserver/mapserver/pull/5388,https://github.com/landryb,1,https://github.com/MapServer/MapServer/pull/5388,"If LAYERS is specified multiple times in the query string, nLayerOrder isnt
reset to 0, and this leads to memory corruption/double-free's upon exit.","If LAYERS is specified multiple times in the query string, nLayerOrder isnt
reset to 0, and this leads to memory corruption/double-free's upon exit.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5392,2017-02-20T21:34:04Z,2017-02-20T21:43:27Z,2017-02-20T21:43:33Z,MERGED,True,1,0,1,https://github.com/szekerest,Legend icon for label layers should not rotate (#5391),1,[],https://github.com/mapserver/mapserver/pull/5392,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5392,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5401,2017-03-02T02:45:49Z,2017-03-22T17:18:07Z,2021-04-26T02:42:50Z,MERGED,True,5,2,1,https://github.com/sdlime,Allow paging in msQueryByFilter().,1,[],https://github.com/mapserver/mapserver/pull/5401,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/5401,"The msQueryByFilter() function disabled paging (and also max features) by default which could cause serious performance issues when you only want a feature or two from a large result set.
Steve","The msQueryByFilter() function disabled paging (and also max features) by default which could cause serious performance issues when you only want a feature or two from a large result set.
Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5405,2017-03-08T02:28:04Z,2017-03-18T11:31:18Z,2017-03-18T11:31:21Z,MERGED,True,466,2,5,https://github.com/tomkralidis,add metadata to optionally not emit root layer name in WMS Capabilities,1,[],https://github.com/mapserver/mapserver/pull/5405,https://github.com/tomkralidis,1,https://github.com/MapServer/MapServer/pull/5405,As per #5404.  Pending consensus.,As per #5404.  Pending consensus.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5405,2017-03-08T02:28:04Z,2017-03-18T11:31:18Z,2017-03-18T11:31:21Z,MERGED,True,466,2,5,https://github.com/tomkralidis,add metadata to optionally not emit root layer name in WMS Capabilities,1,[],https://github.com/mapserver/mapserver/pull/5405,https://github.com/jratike80,2,https://github.com/MapServer/MapServer/pull/5405#issuecomment-284973170,As per #5404.  Pending consensus.,"I think that also the WMS documentation http://mapserver.org/ogc/wms_server.html should be updated from this place:

Map Name and wms_title:
WMS Capabilities requires a Name and a Title tag for every layer. The Map’s NAME and wms_title metadata will be used to set the root layer’s name and title in the GetCapabilities XML output. The root layer in the WMS context corresponds to the whole mapfile.

Did you consider an alternative to add an explicit new metadata item ""wms_name"" that would override the name of the mapfile? The same effect than by setting
""wms_rootlayer_name_enabled"" ""yes""
would be obtained then by setting an empty wms_name
""wms_name"" """" 
That might be more user friendly because at the moment and with this change also in the future the WMS title is set in metadata but WMS name in a different and sort of non-logical place.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5405,2017-03-08T02:28:04Z,2017-03-18T11:31:18Z,2017-03-18T11:31:21Z,MERGED,True,466,2,5,https://github.com/tomkralidis,add metadata to optionally not emit root layer name in WMS Capabilities,1,[],https://github.com/mapserver/mapserver/pull/5405,https://github.com/dmorissette,3,https://github.com/MapServer/MapServer/pull/5405#issuecomment-285189893,As per #5404.  Pending consensus.,"I agree with @jratike80's comment and suggestion of setting ""wms_name"" """" instead of creating a new ""wms_rootlayer_name_enabled"" metadata.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5409,2017-03-15T06:56:46Z,2017-03-15T13:44:01Z,2017-03-17T16:46:04Z,MERGED,True,63,0,2,https://github.com/NathanW2,Add dll version stamp in Windows,1,[],https://github.com/mapserver/mapserver/pull/5409,https://github.com/NathanW2,1,https://github.com/MapServer/MapServer/pull/5409,This commits adds a version stamp to the mapserver.dll on Windows like the following: Just a nice touch more than anything else.,This commits adds a version stamp to the mapserver.dll on Windows like the following: Just a nice touch more than anything else.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5409,2017-03-15T06:56:46Z,2017-03-15T13:44:01Z,2017-03-17T16:46:04Z,MERGED,True,63,0,2,https://github.com/NathanW2,Add dll version stamp in Windows,1,[],https://github.com/mapserver/mapserver/pull/5409,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5409#issuecomment-286744949,This commits adds a version stamp to the mapserver.dll on Windows like the following: Just a nice touch more than anything else.,Nice addition @NathanW2 !  Thanks!   (I already do something like this for the MS4W community),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5409,2017-03-15T06:56:46Z,2017-03-15T13:44:01Z,2017-03-17T16:46:04Z,MERGED,True,63,0,2,https://github.com/NathanW2,Add dll version stamp in Windows,1,[],https://github.com/mapserver/mapserver/pull/5409,https://github.com/NathanW2,3,https://github.com/MapServer/MapServer/pull/5409#issuecomment-286746017,This commits adds a version stamp to the mapserver.dll on Windows like the following: Just a nice touch more than anything else.,@jmckenna thanks for the merge.  I'm going to improve it so it can also include the git sha as well hopefully because I have found that handy with my other projects when doing dev builds for testing.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5409,2017-03-15T06:56:46Z,2017-03-15T13:44:01Z,2017-03-17T16:46:04Z,MERGED,True,63,0,2,https://github.com/NathanW2,Add dll version stamp in Windows,1,[],https://github.com/mapserver/mapserver/pull/5409,https://github.com/NathanW2,4,https://github.com/MapServer/MapServer/pull/5409#issuecomment-286746250,This commits adds a version stamp to the mapserver.dll on Windows like the following: Just a nice touch more than anything else.,@jmckenna do you want me to make a commit on the 7 branch as well?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5409,2017-03-15T06:56:46Z,2017-03-15T13:44:01Z,2017-03-17T16:46:04Z,MERGED,True,63,0,2,https://github.com/NathanW2,Add dll version stamp in Windows,1,[],https://github.com/mapserver/mapserver/pull/5409,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/5409#issuecomment-287408080,This commits adds a version stamp to the mapserver.dll on Windows like the following: Just a nice touch more than anything else.,"@NathanW2 yes to branch-7-0 also would be good, might as well",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5410,2017-03-26T08:28:18Z,2017-03-29T17:28:47Z,2017-03-29T17:28:47Z,CLOSED,False,26,33,6,https://github.com/sergmorev,Fixed crash of mapserv due to memory corruption at large values of double variables,3,[],https://github.com/mapserver/mapserver/pull/5410,https://github.com/sergmorev,1,https://github.com/MapServer/MapServer/pull/5410,"I'll explain the reason for editing with mappostgis.c, starting at line 3640.
In this case, for values node->tokenval.dblval> = 123456789012 (such values are real in the field),
strlen(snippet)> = 19, and the memory is requested in the program only for 19 bytes. The unsolicited
memory is overwritten.
It was possible without a check to request 318 bytes, this is enough to store number, when converting
to char [] having the longest string, - numeric_limits  :: max (),  but it is a pity to spend
memory when it is likely that most of the values are less of this number.
Other edits are associated with preventing similar errors. Only there memory is sometimes requested
in other quantities.
Developers should pay attention to other pieces of software, where it is used sprintf( ..., ""%lf"",...).","I'll explain the reason for editing with mappostgis.c, starting at line 3640.
In this case, for values node->tokenval.dblval> = 123456789012 (such values are real in the field),
strlen(snippet)> = 19, and the memory is requested in the program only for 19 bytes. The unsolicited
memory is overwritten.
It was possible without a check to request 318 bytes, this is enough to store number, when converting
to char [] having the longest string, - numeric_limits  :: max (),  but it is a pity to spend
memory when it is likely that most of the values are less of this number.
Other edits are associated with preventing similar errors. Only there memory is sometimes requested
in other quantities.
Developers should pay attention to other pieces of software, where it is used sprintf( ..., ""%lf"",...).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5411,2017-03-26T10:17:07Z,2017-03-26T11:07:36Z,2017-03-26T11:07:36Z,MERGED,True,3,3,1,https://github.com/sergmorev,Forming the tag <OnlineResource> in the sld-file from the SYMBOL type MS_SYMBOL_SVG,1,[],https://github.com/mapserver/mapserver/pull/5411,https://github.com/sergmorev,1,https://github.com/MapServer/MapServer/pull/5411,"Previously, the subtree of the  tag from the SYMBOL type MS_SYMBOL_SVG was not generated in the sld-file.
Fixed formatting error in snprintf.","Previously, the subtree of the  tag from the SYMBOL type MS_SYMBOL_SVG was not generated in the sld-file.
Fixed formatting error in snprintf.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5412,2017-03-26T22:46:12Z,2017-04-02T15:21:38Z,2017-04-04T11:57:48Z,MERGED,True,3384,22,79,https://github.com/tomkralidis,RFC 82: Support for Enhanced Layer Metadata Management,1,[],https://github.com/mapserver/mapserver/pull/5412,https://github.com/tomkralidis,1,https://github.com/MapServer/MapServer/pull/5412,Per http://mapserver.org/development/rfc/ms-rfc-82.html,Per http://mapserver.org/development/rfc/ms-rfc-82.html,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5412,2017-03-26T22:46:12Z,2017-04-02T15:21:38Z,2017-04-04T11:57:48Z,MERGED,True,3384,22,79,https://github.com/tomkralidis,RFC 82: Support for Enhanced Layer Metadata Management,1,[],https://github.com/mapserver/mapserver/pull/5412,https://github.com/tomkralidis,2,https://github.com/MapServer/MapServer/pull/5412#issuecomment-290276513,Per http://mapserver.org/development/rfc/ms-rfc-82.html,"FYI this PR is ready for review.  Notes:

implements layer level metadata. Service level metadata not implemented as part of first pass
Travis errors are either unrelated or I'm not able to reproduce them locally
there are no backward compatibility issues, however the implementation results in WMS/WFS/WCS Capabilities always providing MetadataURL type elements",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5412,2017-03-26T22:46:12Z,2017-04-02T15:21:38Z,2017-04-04T11:57:48Z,MERGED,True,3384,22,79,https://github.com/tomkralidis,RFC 82: Support for Enhanced Layer Metadata Management,1,[],https://github.com/mapserver/mapserver/pull/5412,https://github.com/tbonfort,3,https://github.com/MapServer/MapServer/pull/5412#issuecomment-290338657,Per http://mapserver.org/development/rfc/ms-rfc-82.html,"TRavis errors are due to a &amp;amp; appearing in generated capabilities, needs fixing",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5412,2017-03-26T22:46:12Z,2017-04-02T15:21:38Z,2017-04-04T11:57:48Z,MERGED,True,3384,22,79,https://github.com/tomkralidis,RFC 82: Support for Enhanced Layer Metadata Management,1,[],https://github.com/mapserver/mapserver/pull/5412,https://github.com/tomkralidis,4,https://github.com/MapServer/MapServer/pull/5412#issuecomment-290393772,Per http://mapserver.org/development/rfc/ms-rfc-82.html,@tbonfort thanks fixed. Travis working now.  Commits squashed.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5412,2017-03-26T22:46:12Z,2017-04-02T15:21:38Z,2017-04-04T11:57:48Z,MERGED,True,3384,22,79,https://github.com/tomkralidis,RFC 82: Support for Enhanced Layer Metadata Management,1,[],https://github.com/mapserver/mapserver/pull/5412,https://github.com/tomkralidis,5,https://github.com/MapServer/MapServer/pull/5412#issuecomment-290994700,Per http://mapserver.org/development/rfc/ms-rfc-82.html,Will update docs this week.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5412,2017-03-26T22:46:12Z,2017-04-02T15:21:38Z,2017-04-04T11:57:48Z,MERGED,True,3384,22,79,https://github.com/tomkralidis,RFC 82: Support for Enhanced Layer Metadata Management,1,[],https://github.com/mapserver/mapserver/pull/5412,https://github.com/tomkralidis,6,https://github.com/MapServer/MapServer/pull/5412#issuecomment-291346110,Per http://mapserver.org/development/rfc/ms-rfc-82.html,"@jmckenna given this is new functionality targeted for 7.2, should docs PR be written against master?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5412,2017-03-26T22:46:12Z,2017-04-02T15:21:38Z,2017-04-04T11:57:48Z,MERGED,True,3384,22,79,https://github.com/tomkralidis,RFC 82: Support for Enhanced Layer Metadata Management,1,[],https://github.com/mapserver/mapserver/pull/5412,https://github.com/jmckenna,7,https://github.com/MapServer/MapServer/pull/5412#issuecomment-291478019,Per http://mapserver.org/development/rfc/ms-rfc-82.html,"@tomkralidis yes agreed, sorry for the confusion.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5413,2017-03-27T12:48:59Z,2017-03-27T13:51:52Z,2017-03-28T11:16:36Z,CLOSED,False,1,0,1,https://github.com/bjoernboldt,Add ms_ioGetAndStripStdoutBufferMimeHeaders(),1,[],https://github.com/mapserver/mapserver/pull/5413,https://github.com/bjoernboldt,1,https://github.com/MapServer/MapServer/pull/5413,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5414,2017-03-27T17:48:14Z,2017-03-27T18:09:57Z,2017-03-27T18:09:57Z,MERGED,True,7,3,1,https://github.com/rouault,[PostGIS] Format literal number in filter as integer when possible toavoid performance issues,1,[],https://github.com/mapserver/mapserver/pull/5414,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5414,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5416,2017-03-29T17:43:17Z,2021-02-04T14:40:29Z,2021-02-04T14:40:30Z,CLOSED,False,27,33,6,https://github.com/sergmorev,Memory overwrite ( Calling msDoubleToString () for memory requests ),4,[],https://github.com/mapserver/mapserver/pull/5416,https://github.com/sergmorev,1,https://github.com/MapServer/MapServer/pull/5416,"Calling msDoubleToString () for memory requests to the string of sprintf (...,""% lf"",doubleValue).
This is the answer to the proposal rouault make a function char* msPrintLf(double).","Calling msDoubleToString () for memory requests to the string of sprintf (...,""% lf"",doubleValue).
This is the answer to the proposal rouault make a function char* msPrintLf(double).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5416,2017-03-29T17:43:17Z,2021-02-04T14:40:29Z,2021-02-04T14:40:30Z,CLOSED,False,27,33,6,https://github.com/sergmorev,Memory overwrite ( Calling msDoubleToString () for memory requests ),4,[],https://github.com/mapserver/mapserver/pull/5416,https://github.com/sergmorev,2,https://github.com/MapServer/MapServer/pull/5416#issuecomment-290897784,"Calling msDoubleToString () for memory requests to the string of sprintf (...,""% lf"",doubleValue).
This is the answer to the proposal rouault make a function char* msPrintLf(double).","The test gives errors of type:


           <gml:pos>-75.000000 45.000000</gml:pos>





           <gml:pos>-75 45</gml:pos>



I'm not strong in gml, however in my gml both varinata are allowed. In any case, by reference
http://www.gdal.org/drv_gml.html in  gml:pos integers are used, not fractional numbers.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5416,2017-03-29T17:43:17Z,2021-02-04T14:40:29Z,2021-02-04T14:40:30Z,CLOSED,False,27,33,6,https://github.com/sergmorev,Memory overwrite ( Calling msDoubleToString () for memory requests ),4,[],https://github.com/mapserver/mapserver/pull/5416,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/5416#issuecomment-324354198,"Calling msDoubleToString () for memory requests to the string of sprintf (...,""% lf"",doubleValue).
This is the answer to the proposal rouault make a function char* msPrintLf(double).",Reviewers? Any feedback? The two failing tests are related to PHP.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5416,2017-03-29T17:43:17Z,2021-02-04T14:40:29Z,2021-02-04T14:40:30Z,CLOSED,False,27,33,6,https://github.com/sergmorev,Memory overwrite ( Calling msDoubleToString () for memory requests ),4,[],https://github.com/mapserver/mapserver/pull/5416,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/5416#issuecomment-676572313,"Calling msDoubleToString () for memory requests to the string of sprintf (...,""% lf"",doubleValue).
This is the answer to the proposal rouault make a function char* msPrintLf(double).",@sergmorev can your rebase this against master (instead of branch-7-0) ?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5416,2017-03-29T17:43:17Z,2021-02-04T14:40:29Z,2021-02-04T14:40:30Z,CLOSED,False,27,33,6,https://github.com/sergmorev,Memory overwrite ( Calling msDoubleToString () for memory requests ),4,[],https://github.com/mapserver/mapserver/pull/5416,https://github.com/rouault,5,https://github.com/MapServer/MapServer/pull/5416#issuecomment-773359418,"Calling msDoubleToString () for memory requests to the string of sprintf (...,""% lf"",doubleValue).
This is the answer to the proposal rouault make a function char* msPrintLf(double).",Superseded with #6226,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5417,2017-03-30T17:12:54Z,2017-03-30T18:22:07Z,2017-03-30T18:22:07Z,MERGED,True,464,76,16,https://github.com/rouault,Shape and OGR providers: allow TILESRS keyword to support tileindex with tiles of different SRS,1,[],https://github.com/mapserver/mapserver/pull/5417,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5417,"This is the extension of previous work to support raster tile index.
Such vector tileindex with mixed SRS can be generated with GDAL 2.2 ogrtindex utility
with the -t_srs and -src_srs_name options.","This is the extension of previous work to support raster tile index.
Such vector tileindex with mixed SRS can be generated with GDAL 2.2 ogrtindex utility
with the -t_srs and -src_srs_name options.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5419,2017-04-09T07:35:28Z,2021-03-09T16:16:59Z,2021-03-09T16:16:59Z,CLOSED,False,138,71,1,https://github.com/HuidaeCho,Fix SCALE=AUTO (#4927); No data in GRASS (#4918),1,[],https://github.com/mapserver/mapserver/pull/5419,https://github.com/HuidaeCho,1,https://github.com/MapServer/MapServer/pull/5419,This pull request fixes #4927 & #4918.,This pull request fixes #4927 & #4918.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5419,2017-04-09T07:35:28Z,2021-03-09T16:16:59Z,2021-03-09T16:16:59Z,CLOSED,False,138,71,1,https://github.com/HuidaeCho,Fix SCALE=AUTO (#4927); No data in GRASS (#4918),1,[],https://github.com/mapserver/mapserver/pull/5419,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5419#issuecomment-676571931,This pull request fixes #4927 & #4918.,@HuidaeCho can you rebase this against master (instead of branch-7-0) ?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5419,2017-04-09T07:35:28Z,2021-03-09T16:16:59Z,2021-03-09T16:16:59Z,CLOSED,False,138,71,1,https://github.com/HuidaeCho,Fix SCALE=AUTO (#4927); No data in GRASS (#4918),1,[],https://github.com/mapserver/mapserver/pull/5419,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/5419#issuecomment-794108603,This pull request fixes #4927 & #4918.,Superseded per #6251,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5429,2017-05-11T22:30:40Z,2017-05-11T22:38:37Z,2017-05-11T22:38:41Z,MERGED,True,84,4,1,https://github.com/szekerest,Add mssql support for PropertyIsLike (#5428),1,[],https://github.com/mapserver/mapserver/pull/5429,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5429,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5430,2017-05-14T19:39:43Z,2017-05-15T19:57:36Z,2017-05-15T20:02:40Z,MERGED,True,4,1,1,https://github.com/juliensam,Add two tests to cover the out-of-extent intersects filter,1,[],https://github.com/mapserver/mapserver/pull/5430,https://github.com/juliensam,1,https://github.com/MapServer/MapServer/pull/5430,#5202 : WFS Intersects filters are limited by the extent defined in the mapfile. I added 2 tests that play with the extent of the map to return no results and 2 results.,#5202 : WFS Intersects filters are limited by the extent defined in the mapfile. I added 2 tests that play with the extent of the map to return no results and 2 results.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5430,2017-05-14T19:39:43Z,2017-05-15T19:57:36Z,2017-05-15T20:02:40Z,MERGED,True,4,1,1,https://github.com/juliensam,Add two tests to cover the out-of-extent intersects filter,1,[],https://github.com/mapserver/mapserver/pull/5430,https://github.com/dmorissette,2,https://github.com/MapServer/MapServer/pull/5430#issuecomment-301588349,#5202 : WFS Intersects filters are limited by the extent defined in the mapfile. I added 2 tests that play with the extent of the map to return no results and 2 results.,"For the record, the MapServer WFS interface only returns data that overlaps with the MAP EXTENT by default. So in a case where the MAP EXTENT does not overlap with the INTERSECTS FILTER then it is normal to return no results. This is what those new test cases are checking.
This came up as we were trying (without success) to reproduce the issue reported in #5202.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5439,2017-05-30T09:24:21Z,2017-05-30T09:39:23Z,2017-05-30T10:33:27Z,MERGED,True,35,1,2,https://github.com/szekerest,Fix rendering label shadow (#5438),1,[],https://github.com/mapserver/mapserver/pull/5439,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5439,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5443,2017-05-31T10:24:40Z,2017-05-31T10:33:15Z,2017-05-31T10:33:18Z,MERGED,True,2,0,1,https://github.com/szekerest,Suppress geos error in offsetcurve and fall back to the original beha…,1,[],https://github.com/mapserver/mapserver/pull/5443,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5443,…vior (#5442),…vior (#5442),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5447,2017-06-14T10:48:21Z,2017-06-14T10:55:58Z,2017-06-14T10:55:58Z,MERGED,True,6,1,1,https://github.com/rouault,"msResampleGDALToMap(): restrict fix done for #1715, to avoid regressions like #5445",1,[],https://github.com/mapserver/mapserver/pull/5447,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5447,"026847b
introduced a post correction of the source geotransform so that it matches the
sSrcExtent exactly. However the condition for this to make sense is that the
initial geotransform has square pixels.","026847b
introduced a post correction of the source geotransform so that it matches the
sSrcExtent exactly. However the condition for this to make sense is that the
initial geotransform has square pixels.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5449,2017-06-20T15:49:47Z,2021-03-09T16:28:53Z,2021-04-26T02:33:59Z,CLOSED,False,17,15,2,https://github.com/sdlime,Cutting things too close when offsetting a label from a marker. Apply…,1,[],https://github.com/mapserver/mapserver/pull/5449,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/5449,"… MARKER_SLOP to UL, UR, LR, LL positions too. (#5436)","… MARKER_SLOP to UL, UR, LR, LL positions too. (#5436)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5449,2017-06-20T15:49:47Z,2021-03-09T16:28:53Z,2021-04-26T02:33:59Z,CLOSED,False,17,15,2,https://github.com/sdlime,Cutting things too close when offsetting a label from a marker. Apply…,1,[],https://github.com/mapserver/mapserver/pull/5449,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5449#issuecomment-309831772,"… MARKER_SLOP to UL, UR, LR, LL positions too. (#5436)",Note the end affect is a nudging of labels in the UL/UR/LL/LR positions away from the label point. Doesn't surprise me that some tests failed. Will check on them... --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5449,2017-06-20T15:49:47Z,2021-03-09T16:28:53Z,2021-04-26T02:33:59Z,CLOSED,False,17,15,2,https://github.com/sdlime,Cutting things too close when offsetting a label from a marker. Apply…,1,[],https://github.com/mapserver/mapserver/pull/5449,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/5449#issuecomment-310069142,"… MARKER_SLOP to UL, UR, LR, LL positions too. (#5436)",@sdlime did you mean to push this to the branch-7-0 ?    (should this delay the 7.0.6 release?),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5449,2017-06-20T15:49:47Z,2021-03-09T16:28:53Z,2021-04-26T02:33:59Z,CLOSED,False,17,15,2,https://github.com/sdlime,Cutting things too close when offsetting a label from a marker. Apply…,1,[],https://github.com/mapserver/mapserver/pull/5449,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/5449#issuecomment-310150753,"… MARKER_SLOP to UL, UR, LR, LL positions too. (#5436)",tagging 7.0.6 now....,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5449,2017-06-20T15:49:47Z,2021-03-09T16:28:53Z,2021-04-26T02:33:59Z,CLOSED,False,17,15,2,https://github.com/sdlime,Cutting things too close when offsetting a label from a marker. Apply…,1,[],https://github.com/mapserver/mapserver/pull/5449,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/5449#issuecomment-344064282,"… MARKER_SLOP to UL, UR, LR, LL positions too. (#5436)",@sdlime did you mean to push this to the branch-7-0 ?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5449,2017-06-20T15:49:47Z,2021-03-09T16:28:53Z,2021-04-26T02:33:59Z,CLOSED,False,17,15,2,https://github.com/sdlime,Cutting things too close when offsetting a label from a marker. Apply…,1,[],https://github.com/mapserver/mapserver/pull/5449,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/5449#issuecomment-676571403,"… MARKER_SLOP to UL, UR, LR, LL positions too. (#5436)",@sdlime can you take a look at this and rebase it against master if possible (instead of branch-6-4) ?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5449,2017-06-20T15:49:47Z,2021-03-09T16:28:53Z,2021-04-26T02:33:59Z,CLOSED,False,17,15,2,https://github.com/sdlime,Cutting things too close when offsetting a label from a marker. Apply…,1,[],https://github.com/mapserver/mapserver/pull/5449,https://github.com/rouault,7,https://github.com/MapServer/MapServer/pull/5449#issuecomment-794123769,"… MARKER_SLOP to UL, UR, LR, LL positions too. (#5436)",That patch had been applied to master in d069dbd,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5450,2017-06-21T09:53:32Z,2017-06-21T12:41:27Z,2017-06-21T12:41:49Z,CLOSED,False,1,1,1,None,"Fix linux cmake build (""/bin/sh: 1: copy: not found"")",2,[],https://github.com/mapserver/mapserver/pull/5450,None,1,https://github.com/MapServer/MapServer/pull/5450,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5451,2017-06-28T19:33:13Z,2017-08-23T14:13:01Z,2017-11-16T00:04:54Z,MERGED,True,1,1,1,https://github.com/micking,Allow using double quoted aliases for Oracle column aliases,1,[],https://github.com/mapserver/mapserver/pull/5451,https://github.com/micking,1,https://github.com/MapServer/MapServer/pull/5451,"Adding double quotes to the columns of the mapserver generated outer
query safely allows using double quoted column aliases in the data
statement
By that we can have mixed capital column names","Adding double quotes to the columns of the mapserver generated outer
query safely allows using double quoted column aliases in the data
statement
By that we can have mixed capital column names",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5451,2017-06-28T19:33:13Z,2017-08-23T14:13:01Z,2017-11-16T00:04:54Z,MERGED,True,1,1,1,https://github.com/micking,Allow using double quoted aliases for Oracle column aliases,1,[],https://github.com/mapserver/mapserver/pull/5451,https://github.com/msmitherdc,2,https://github.com/MapServer/MapServer/pull/5451#issuecomment-323532108,"Adding double quotes to the columns of the mapserver generated outer
query safely allows using double quoted column aliases in the data
statement
By that we can have mixed capital column names",@sdlime This can be merged in,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5452,2017-06-28T19:37:55Z,2017-08-19T16:06:47Z,2017-08-19T18:42:37Z,MERGED,True,4,2,1,https://github.com/micking,Fix enable out of source build path with spaces,2,[],https://github.com/mapserver/mapserver/pull/5452,https://github.com/micking,1,https://github.com/MapServer/MapServer/pull/5452,"this fix allows to have an out-of-source build on any location - previously it was assumed that the mapscript csharp sources had a fixed path relative to the build
In addition we can now have build path names with spaces","this fix allows to have an out-of-source build on any location - previously it was assumed that the mapscript csharp sources had a fixed path relative to the build
In addition we can now have build path names with spaces",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5452,2017-06-28T19:37:55Z,2017-08-19T16:06:47Z,2017-08-19T18:42:37Z,MERGED,True,4,2,1,https://github.com/micking,Fix enable out of source build path with spaces,2,[],https://github.com/mapserver/mapserver/pull/5452,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5452#issuecomment-323531973,"this fix allows to have an out-of-source build on any location - previously it was assumed that the mapscript csharp sources had a fixed path relative to the build
In addition we can now have build path names with spaces",thanks @micking,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5453,2017-06-28T19:42:47Z,2017-08-23T14:12:14Z,2017-11-16T00:06:05Z,MERGED,True,1,1,1,https://github.com/micking,Fix bug in Oracle TranslateFilter method ,1,[],https://github.com/mapserver/mapserver/pull/5453,https://github.com/micking,1,https://github.com/MapServer/MapServer/pull/5453,"Removed bug that caused MapServer only to use the Oracle TranslateFilter method at the first call e.g. in an FCGI environment
unlike all other vtable assignments the msOracleSpatialLayerTranslateFilter was set to layer->vtable and not to vtable
The effect was that e.g a WFS filter was only translated to the SQL statement in the first call, in all subsequent calls the original SQL statement was used and the filtering was done by MapServer after the fetch - for large datasets that caused significant overhead","Removed bug that caused MapServer only to use the Oracle TranslateFilter method at the first call e.g. in an FCGI environment
unlike all other vtable assignments the msOracleSpatialLayerTranslateFilter was set to layer->vtable and not to vtable
The effect was that e.g a WFS filter was only translated to the SQL statement in the first call, in all subsequent calls the original SQL statement was used and the filtering was done by MapServer after the fetch - for large datasets that caused significant overhead",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5453,2017-06-28T19:42:47Z,2017-08-23T14:12:14Z,2017-11-16T00:06:05Z,MERGED,True,1,1,1,https://github.com/micking,Fix bug in Oracle TranslateFilter method ,1,[],https://github.com/mapserver/mapserver/pull/5453,https://github.com/msmitherdc,2,https://github.com/MapServer/MapServer/pull/5453#issuecomment-323531468,"Removed bug that caused MapServer only to use the Oracle TranslateFilter method at the first call e.g. in an FCGI environment
unlike all other vtable assignments the msOracleSpatialLayerTranslateFilter was set to layer->vtable and not to vtable
The effect was that e.g a WFS filter was only translated to the SQL statement in the first call, in all subsequent calls the original SQL statement was used and the filtering was done by MapServer after the fetch - for large datasets that caused significant overhead",@sdlime this is ready to merge,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5454,2017-06-28T19:45:47Z,2017-08-23T14:09:10Z,2017-11-10T15:22:54Z,MERGED,True,13,2,1,https://github.com/micking,Enabled WFS sortby for Oracle plugin,2,[],https://github.com/mapserver/mapserver/pull/5454,https://github.com/micking,1,https://github.com/MapServer/MapServer/pull/5454,"Enabled WFS sortby for Oracle plugin, Previously that was only available if Oracle support was statically linked to mapserver.
additionally we now support a quoted sortby parameter to enable sorting by non-capitalized column names","Enabled WFS sortby for Oracle plugin, Previously that was only available if Oracle support was statically linked to mapserver.
additionally we now support a quoted sortby parameter to enable sorting by non-capitalized column names",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5454,2017-06-28T19:45:47Z,2017-08-23T14:09:10Z,2017-11-10T15:22:54Z,MERGED,True,13,2,1,https://github.com/micking,Enabled WFS sortby for Oracle plugin,2,[],https://github.com/mapserver/mapserver/pull/5454,https://github.com/msmitherdc,2,https://github.com/MapServer/MapServer/pull/5454#issuecomment-323531336,"Enabled WFS sortby for Oracle plugin, Previously that was only available if Oracle support was statically linked to mapserver.
additionally we now support a quoted sortby parameter to enable sorting by non-capitalized column names",@sdlime i think this is ready to merge in.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5454,2017-06-28T19:45:47Z,2017-08-23T14:09:10Z,2017-11-10T15:22:54Z,MERGED,True,13,2,1,https://github.com/micking,Enabled WFS sortby for Oracle plugin,2,[],https://github.com/mapserver/mapserver/pull/5454,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/5454#issuecomment-324344842,"Enabled WFS sortby for Oracle plugin, Previously that was only available if Oracle support was statically linked to mapserver.
additionally we now support a quoted sortby parameter to enable sorting by non-capitalized column names",Thanks everyone! --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5454,2017-06-28T19:45:47Z,2017-08-23T14:09:10Z,2017-11-10T15:22:54Z,MERGED,True,13,2,1,https://github.com/micking,Enabled WFS sortby for Oracle plugin,2,[],https://github.com/mapserver/mapserver/pull/5454,https://github.com/micking,4,https://github.com/MapServer/MapServer/pull/5454#issuecomment-343499827,"Enabled WFS sortby for Oracle plugin, Previously that was only available if Oracle support was statically linked to mapserver.
additionally we now support a quoted sortby parameter to enable sorting by non-capitalized column names","I just noticed that this pull request had been merged before I had modified my changes to be in sync with Even's suggestion to remove msOracleSpatialEscapePropertyName and undo my additional code to escape the properties.
I've modified my original branch to reflect this - can this pull request be re-opened and merged again?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5454,2017-06-28T19:45:47Z,2017-08-23T14:09:10Z,2017-11-10T15:22:54Z,MERGED,True,13,2,1,https://github.com/micking,Enabled WFS sortby for Oracle plugin,2,[],https://github.com/mapserver/mapserver/pull/5454,https://github.com/rouault,5,https://github.com/MapServer/MapServer/pull/5454#issuecomment-343500830,"Enabled WFS sortby for Oracle plugin, Previously that was only available if Oracle support was statically linked to mapserver.
additionally we now support a quoted sortby parameter to enable sorting by non-capitalized column names","can this pull request be re-opened and merged again?

I'd suggest rather to create a new branch from the latest state of branch-7-0, apply your changes and issue a new pull request",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5454,2017-06-28T19:45:47Z,2017-08-23T14:09:10Z,2017-11-10T15:22:54Z,MERGED,True,13,2,1,https://github.com/micking,Enabled WFS sortby for Oracle plugin,2,[],https://github.com/mapserver/mapserver/pull/5454,https://github.com/micking,6,https://github.com/MapServer/MapServer/pull/5454#issuecomment-343501642,"Enabled WFS sortby for Oracle plugin, Previously that was only available if Oracle support was statically linked to mapserver.
additionally we now support a quoted sortby parameter to enable sorting by non-capitalized column names","tx, I'll do",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5456,2017-07-05T06:28:12Z,2020-02-27T22:22:23Z,2020-02-27T22:22:24Z,CLOSED,False,3,3,1,https://github.com/DDanielH,USE_POINT_Z_M default on,2,[],https://github.com/mapserver/mapserver/pull/5456,https://github.com/DDanielH,1,https://github.com/MapServer/MapServer/pull/5456,Performance difference between on and off is minimal,Performance difference between on and off is minimal,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5456,2017-07-05T06:28:12Z,2020-02-27T22:22:23Z,2020-02-27T22:22:24Z,CLOSED,False,3,3,1,https://github.com/DDanielH,USE_POINT_Z_M default on,2,[],https://github.com/mapserver/mapserver/pull/5456,https://github.com/bjoernboldt,2,https://github.com/MapServer/MapServer/pull/5456#issuecomment-313936124,Performance difference between on and off is minimal,"If you change the code to ""on"" as default, you should change the comment too.
From # It's OFF by default. to # It's ON by default.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5456,2017-07-05T06:28:12Z,2020-02-27T22:22:23Z,2020-02-27T22:22:24Z,CLOSED,False,3,3,1,https://github.com/DDanielH,USE_POINT_Z_M default on,2,[],https://github.com/mapserver/mapserver/pull/5456,https://github.com/DDanielH,3,https://github.com/MapServer/MapServer/pull/5456#issuecomment-314665577,Performance difference between on and off is minimal,"Sorry, i forgot",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5456,2017-07-05T06:28:12Z,2020-02-27T22:22:23Z,2020-02-27T22:22:24Z,CLOSED,False,3,3,1,https://github.com/DDanielH,USE_POINT_Z_M default on,2,[],https://github.com/mapserver/mapserver/pull/5456,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/5456#issuecomment-344063888,Performance difference between on and off is minimal,"@DDanielH could you create this pull request to mapserver:master instead of branch-7-0 ?   (because this changes the functionality of MapServer, it will have to be applied to the 7.2 release)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5456,2017-07-05T06:28:12Z,2020-02-27T22:22:23Z,2020-02-27T22:22:24Z,CLOSED,False,3,3,1,https://github.com/DDanielH,USE_POINT_Z_M default on,2,[],https://github.com/mapserver/mapserver/pull/5456,https://github.com/geographika,5,https://github.com/MapServer/MapServer/pull/5456#issuecomment-428970157,Performance difference between on and off is minimal,"Can anyone provide any information on why in CMakeLists there is the following comment?
option(WITH_POINT_Z_M ""include Z and M coordinates in point structure (advanced, not recommended)"" OFF)
Is this recommendation now out of date? What were the issues in using it?
The comment was added during the migration from autotools to cmake 6 years ago.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5456,2017-07-05T06:28:12Z,2020-02-27T22:22:23Z,2020-02-27T22:22:24Z,CLOSED,False,3,3,1,https://github.com/DDanielH,USE_POINT_Z_M default on,2,[],https://github.com/mapserver/mapserver/pull/5456,https://github.com/sdlime,6,https://github.com/MapServer/MapServer/pull/5456#issuecomment-428986494,Performance difference between on and off is minimal,"Assuming the cmake config was put together from the old configure build system it’s likely it’s out-of-date. There is at least one spot I know of that could leverage Z/M but doesn’t – that’s the templating code (shpxy tag). There’s a separate ticket for that to introduce an extended shpxy tag or more like add new ones. It’s possible other output drivers (e.g. GML, KML) aren’t complete in this area but if I remember correctly that’s why support was added in the first place, at least for GML. Another place that could be deficient is expression handling. We’d have to check…

I’m curious if the binary distros are built with this option or not.
…
-Steve


From: Seth G [mailto:notifications@github.com]
Sent: Thursday, October 11, 2018 9:28 AM
To: mapserver/mapserver <mapserver@noreply.github.com>
Cc: Subscribed <subscribed@noreply.github.com>
Subject: Re: [mapserver/mapserver] USE_POINT_Z_M default on (#5456)


Can anyone provide any information on why in CMakeLists there is the following comment<https://github.com/mapserver/mapserver/blob/d5c22cd3113ba85f5b1f1c406fe4055f75d04ce3/CMakeLists.txt#L149>?

option(WITH_POINT_Z_M ""include Z and M coordinates in point structure (advanced, not recommended)"" OFF)

Is this recommendation now out of date? What were the issues in using it?
The comment was added during the migration from autotools to cmake 6 years ago.

—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub<#5456 (comment)>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ABhm-64ARWN-KZrIh-p1ixjOxc30Veohks5uj1VUgaJpZM4ON5_e>.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5456,2017-07-05T06:28:12Z,2020-02-27T22:22:23Z,2020-02-27T22:22:24Z,CLOSED,False,3,3,1,https://github.com/DDanielH,USE_POINT_Z_M default on,2,[],https://github.com/mapserver/mapserver/pull/5456,https://github.com/msmitherdc,7,https://github.com/MapServer/MapServer/pull/5456#issuecomment-428993949,Performance difference between on and off is minimal,"The output formats do support Z output but there are requirements on setting options on the output formats. See https://mapserver.org/output/ogr_output.html, specifically ows/wfs_geomtype.



Mike



From: Steve Lime <notifications@github.com>
Reply-To: mapserver/mapserver <reply@reply.github.com>
Date: Thursday, October 11, 2018 at 11:03 AM
To: mapserver/mapserver <mapserver@noreply.github.com>
Cc: Subscribed <subscribed@noreply.github.com>
Subject: Re: [mapserver/mapserver] USE_POINT_Z_M default on (#5456)



Assuming the cmake config was put together from the old configure build system it’s likely it’s out-of-date. There is at least one spot I know of that could leverage Z/M but doesn’t – that’s the templating code (shpxy tag). There’s a separate ticket for that to introduce an extended shpxy tag or more like add new ones. It’s possible other output drivers (e.g. GML, KML) aren’t complete in this area but if I remember correctly that’s why support was added in the first place, at least for GML. Another place that could be deficient is expression handling. We’d have to check…

I’m curious if the binary distros are built with this option or not.
…
-Steve 


From: Seth G [mailto:notifications@github.com]
Sent: Thursday, October 11, 2018 9:28 AM
To: mapserver/mapserver <mapserver@noreply.github.com>
Cc: Subscribed <subscribed@noreply.github.com>
Subject: Re: [mapserver/mapserver] USE_POINT_Z_M default on (#5456)


Can anyone provide any information on why in CMakeLists there is the following comment<https://github.com/mapserver/mapserver/blob/d5c22cd3113ba85f5b1f1c406fe4055f75d04ce3/CMakeLists.txt#L149>?

option(WITH_POINT_Z_M ""include Z and M coordinates in point structure (advanced, not recommended)"" OFF)

Is this recommendation now out of date? What were the issues in using it?
The comment was added during the migration from autotools to cmake 6 years ago.

—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub<#5456 (comment)>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ABhm-64ARWN-KZrIh-p1ixjOxc30Veohks5uj1VUgaJpZM4ON5_e>.


—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5456,2017-07-05T06:28:12Z,2020-02-27T22:22:23Z,2020-02-27T22:22:24Z,CLOSED,False,3,3,1,https://github.com/DDanielH,USE_POINT_Z_M default on,2,[],https://github.com/mapserver/mapserver/pull/5456,https://github.com/geographika,8,https://github.com/MapServer/MapServer/pull/5456#issuecomment-428996310,Performance difference between on and off is minimal,@sdlime - The Windows builds at GIS Internals don't have this option set - which then throws errors in various tests when using Python MapScript built with USE_POINT_Z_M ON (which is why it would be good to set this to ON by default if it is stable).,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5456,2017-07-05T06:28:12Z,2020-02-27T22:22:23Z,2020-02-27T22:22:24Z,CLOSED,False,3,3,1,https://github.com/DDanielH,USE_POINT_Z_M default on,2,[],https://github.com/mapserver/mapserver/pull/5456,https://github.com/juliensam,9,https://github.com/MapServer/MapServer/pull/5456#issuecomment-429001851,Performance difference between on and off is minimal,"Note that this switch was added a long time ago because having a point structure of 2 int instead of 4 int meant it was better handled in memory and made a ""significant"" performance improvement. See details here: https://trac.osgeo.org/mapserver/ticket/1244
It was a time of custom build and it was assumed that people were compiling a lot. This is not the case anymore and it is really possible that the performance ""improvement"" is not even true anymore. We could set this switch to ON by default or even remove the switch altogether if that is the case.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5456,2017-07-05T06:28:12Z,2020-02-27T22:22:23Z,2020-02-27T22:22:24Z,CLOSED,False,3,3,1,https://github.com/DDanielH,USE_POINT_Z_M default on,2,[],https://github.com/mapserver/mapserver/pull/5456,https://github.com/geographika,10,https://github.com/MapServer/MapServer/pull/5456#issuecomment-429098574,Performance difference between on and off is minimal,"@juliensam - thanks for the info. It sounds like at least the CMake warning can be removed, and then possibly set it to ON by default?
This pull request however modifies nmake.opt - which as I understand it is redundant, and so a new pull request should be made and this one closed?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5456,2017-07-05T06:28:12Z,2020-02-27T22:22:23Z,2020-02-27T22:22:24Z,CLOSED,False,3,3,1,https://github.com/DDanielH,USE_POINT_Z_M default on,2,[],https://github.com/mapserver/mapserver/pull/5456,https://github.com/geographika,11,https://github.com/MapServer/MapServer/pull/5456#issuecomment-592204160,Performance difference between on and off is minimal,"I think this can be closed - nmake is no longer used since the switch to CMake.
Perhaps the nmake.opt file should be removed completely to avoid confusion?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5456,2017-07-05T06:28:12Z,2020-02-27T22:22:23Z,2020-02-27T22:22:24Z,CLOSED,False,3,3,1,https://github.com/DDanielH,USE_POINT_Z_M default on,2,[],https://github.com/mapserver/mapserver/pull/5456,https://github.com/rouault,12,https://github.com/MapServer/MapServer/pull/5456#issuecomment-592208095,Performance difference between on and off is minimal,"Perhaps the nmake.opt file should be removed completely to avoid confusion?

yes, feel free to submit a PR removing it. I'm supportive",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5457,2017-07-07T00:27:30Z,2017-07-10T18:57:38Z,2017-07-10T18:57:38Z,MERGED,True,12,12,1,https://github.com/geographika,Change to double quotes for Window's command line parameters,1,[],https://github.com/mapserver/mapserver/pull/5457,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5457,"Otherwise all these tests fail on Windows as the command isn't split properly and results in errors such as:
'name1' is not recognized as an internal or external command,operable program or batch file.
The change to double quotes shouldn't affect Linux as I understand it.","Otherwise all these tests fail on Windows as the command isn't split properly and results in errors such as:
'name1' is not recognized as an internal or external command,operable program or batch file.
The change to double quotes shouldn't affect Linux as I understand it.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5459,2017-07-07T08:44:47Z,2017-07-07T17:25:21Z,2017-07-07T17:25:55Z,MERGED,True,1,1,1,https://github.com/micking,Fix error to support Oracle compound elements for GTYPE 2007,1,[],https://github.com/mapserver/mapserver/pull/5459,https://github.com/micking,1,https://github.com/MapServer/MapServer/pull/5459,Fix error to support Oracle compound elements for GTYPE 2007 (multipolygon) and not only for GTYPE 2003 (polygon),Fix error to support Oracle compound elements for GTYPE 2007 (multipolygon) and not only for GTYPE 2003 (polygon),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5459,2017-07-07T08:44:47Z,2017-07-07T17:25:21Z,2017-07-07T17:25:55Z,MERGED,True,1,1,1,https://github.com/micking,Fix error to support Oracle compound elements for GTYPE 2007,1,[],https://github.com/mapserver/mapserver/pull/5459,https://github.com/msmitherdc,2,https://github.com/MapServer/MapServer/pull/5459#issuecomment-313742230,Fix error to support Oracle compound elements for GTYPE 2007 (multipolygon) and not only for GTYPE 2003 (polygon),this is good to merge.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5459,2017-07-07T08:44:47Z,2017-07-07T17:25:21Z,2017-07-07T17:25:55Z,MERGED,True,1,1,1,https://github.com/micking,Fix error to support Oracle compound elements for GTYPE 2007,1,[],https://github.com/mapserver/mapserver/pull/5459,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/5459#issuecomment-313743619,Fix error to support Oracle compound elements for GTYPE 2007 (multipolygon) and not only for GTYPE 2003 (polygon),thanks @micking !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5460,2017-07-09T07:27:34Z,2017-09-19T15:33:38Z,2017-09-19T15:33:38Z,CLOSED,False,11303,3524,267,https://github.com/geographika,Update test Mapfile encoding to utf-8,184,[],https://github.com/mapserver/mapserver/pull/5460,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5460,"These files were in iso-8859-1 (for the German accents in Straßenfläche). All Mapfiles should be in utf-8 according to the docs.
Sample Python code used to convert below for reference (all line breaks etc. preserved).
def change_encoding():
    sourceEncoding = ""iso-8859-1""
    targetEncoding = ""utf-8""
    files = [""wms_inspire_scenario2_cap130_ger.xml"",""wms_inspire_scenario2_cap111_ger.xml"",""wms_inspire_scenario1_cap130_ger.xml""]

    for f in files:
        source = open(os.path.join(r""D:\GitHub\mapserver\msautotest\wxs\expected"", f))
        target = open(os.path.join(r""D:\GitHub\mapserver\msautotest\wxs\expected"", f + "".utf.xml""), ""wb"")
        target.write(unicode(source.read(), sourceEncoding).encode(targetEncoding))","These files were in iso-8859-1 (for the German accents in Straßenfläche). All Mapfiles should be in utf-8 according to the docs.
Sample Python code used to convert below for reference (all line breaks etc. preserved).
def change_encoding():
    sourceEncoding = ""iso-8859-1""
    targetEncoding = ""utf-8""
    files = [""wms_inspire_scenario2_cap130_ger.xml"",""wms_inspire_scenario2_cap111_ger.xml"",""wms_inspire_scenario1_cap130_ger.xml""]

    for f in files:
        source = open(os.path.join(r""D:\GitHub\mapserver\msautotest\wxs\expected"", f))
        target = open(os.path.join(r""D:\GitHub\mapserver\msautotest\wxs\expected"", f + "".utf.xml""), ""wb"")
        target.write(unicode(source.read(), sourceEncoding).encode(targetEncoding))",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5460,2017-07-09T07:27:34Z,2017-09-19T15:33:38Z,2017-09-19T15:33:38Z,CLOSED,False,11303,3524,267,https://github.com/geographika,Update test Mapfile encoding to utf-8,184,[],https://github.com/mapserver/mapserver/pull/5460,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5460#issuecomment-324354812,"These files were in iso-8859-1 (for the German accents in Straßenfläche). All Mapfiles should be in utf-8 according to the docs.
Sample Python code used to convert below for reference (all line breaks etc. preserved).
def change_encoding():
    sourceEncoding = ""iso-8859-1""
    targetEncoding = ""utf-8""
    files = [""wms_inspire_scenario2_cap130_ger.xml"",""wms_inspire_scenario2_cap111_ger.xml"",""wms_inspire_scenario1_cap130_ger.xml""]

    for f in files:
        source = open(os.path.join(r""D:\GitHub\mapserver\msautotest\wxs\expected"", f))
        target = open(os.path.join(r""D:\GitHub\mapserver\msautotest\wxs\expected"", f + "".utf.xml""), ""wb"")
        target.write(unicode(source.read(), sourceEncoding).encode(targetEncoding))","Reviewers, any objections to this request? Seems reasonable to me.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5460,2017-07-09T07:27:34Z,2017-09-19T15:33:38Z,2017-09-19T15:33:38Z,CLOSED,False,11303,3524,267,https://github.com/geographika,Update test Mapfile encoding to utf-8,184,[],https://github.com/mapserver/mapserver/pull/5460,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5460#issuecomment-330578649,"These files were in iso-8859-1 (for the German accents in Straßenfläche). All Mapfiles should be in utf-8 according to the docs.
Sample Python code used to convert below for reference (all line breaks etc. preserved).
def change_encoding():
    sourceEncoding = ""iso-8859-1""
    targetEncoding = ""utf-8""
    files = [""wms_inspire_scenario2_cap130_ger.xml"",""wms_inspire_scenario2_cap111_ger.xml"",""wms_inspire_scenario1_cap130_ger.xml""]

    for f in files:
        source = open(os.path.join(r""D:\GitHub\mapserver\msautotest\wxs\expected"", f))
        target = open(os.path.join(r""D:\GitHub\mapserver\msautotest\wxs\expected"", f + "".utf.xml""), ""wb"")
        target.write(unicode(source.read(), sourceEncoding).encode(targetEncoding))",Didn't mean to create this in main branch. Opened a new pull request and closing this one.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5461,2017-07-10T09:20:24Z,2018-11-19T13:49:12Z,2018-11-19T13:49:12Z,CLOSED,False,3264,792,35,https://github.com/bjoernboldt,Add PHP7.x support,5,[],https://github.com/mapserver/mapserver/pull/5461,https://github.com/bjoernboldt,1,https://github.com/MapServer/MapServer/pull/5461,I added some macros and made some changes to the structs in php_mapcript.h for PHP7. So the code is now compatible with PHP5.x and PHP7.x.,I added some macros and made some changes to the structs in php_mapcript.h for PHP7. So the code is now compatible with PHP5.x and PHP7.x.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5461,2017-07-10T09:20:24Z,2018-11-19T13:49:12Z,2018-11-19T13:49:12Z,CLOSED,False,3264,792,35,https://github.com/bjoernboldt,Add PHP7.x support,5,[],https://github.com/mapserver/mapserver/pull/5461,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5461#issuecomment-314202870,I added some macros and made some changes to the structs in php_mapcript.h for PHP7. So the code is now compatible with PHP5.x and PHP7.x.,So this gives us PHP7 support 2 ways - via php_mapscript and Swig? --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5461,2017-07-10T09:20:24Z,2018-11-19T13:49:12Z,2018-11-19T13:49:12Z,CLOSED,False,3264,792,35,https://github.com/bjoernboldt,Add PHP7.x support,5,[],https://github.com/mapserver/mapserver/pull/5461,https://github.com/nboisteault,3,https://github.com/MapServer/MapServer/pull/5461#issuecomment-320968017,I added some macros and made some changes to the structs in php_mapcript.h for PHP7. So the code is now compatible with PHP5.x and PHP7.x.,Thank you very much! Will it land in mapserver 7.0 soon?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5461,2017-07-10T09:20:24Z,2018-11-19T13:49:12Z,2018-11-19T13:49:12Z,CLOSED,False,3264,792,35,https://github.com/bjoernboldt,Add PHP7.x support,5,[],https://github.com/mapserver/mapserver/pull/5461,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/5461#issuecomment-320969152,I added some macros and made some changes to the structs in php_mapcript.h for PHP7. So the code is now compatible with PHP5.x and PHP7.x.,I don't know quite yet. Assuming it works - I'm not a PHP user and so not in a position to test - I don't know why not. This probably needs to be taken to the mapserver-dev list for discussion. Might be good if you brought it up? There is also SWIG-based PHP 7.0 effort... --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5461,2017-07-10T09:20:24Z,2018-11-19T13:49:12Z,2018-11-19T13:49:12Z,CLOSED,False,3264,792,35,https://github.com/bjoernboldt,Add PHP7.x support,5,[],https://github.com/mapserver/mapserver/pull/5461,https://github.com/stoecker,5,https://github.com/MapServer/MapServer/pull/5461#issuecomment-395449050,I added some macros and made some changes to the structs in php_mapcript.h for PHP7. So the code is now compatible with PHP5.x and PHP7.x.,"CMake says ""-- Found PHP5-Version 7.2.5 (using /usr/bin/php-config)"". Text should be adapted ;-)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5461,2017-07-10T09:20:24Z,2018-11-19T13:49:12Z,2018-11-19T13:49:12Z,CLOSED,False,3264,792,35,https://github.com/bjoernboldt,Add PHP7.x support,5,[],https://github.com/mapserver/mapserver/pull/5461,https://github.com/geographika,6,https://github.com/MapServer/MapServer/pull/5461#issuecomment-439898536,I added some macros and made some changes to the structs in php_mapcript.h for PHP7. So the code is now compatible with PHP5.x and PHP7.x.,PHP-NG support added with #5675,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5464,2017-07-20T14:39:04Z,2017-09-19T15:47:31Z,2017-10-05T13:00:58Z,MERGED,True,446,41,8,https://github.com/olt,Fix label MINDISTANCE calculation,1,[],https://github.com/mapserver/mapserver/pull/5464,https://github.com/olt,1,https://github.com/MapServer/MapServer/pull/5464,"Please refer to #5369  for more information about the implementation.

 Remove #define NEWMINDIST code switch
 Replace msCheckLabelMinDistance function with code from temporary msCheckLabelMinDistanceBox
 Check performance
 Add comments
 Add/update tests
 Rebase
 Update documentation (to mapserver/docs when this is merged)","Please refer to #5369  for more information about the implementation.

 Remove #define NEWMINDIST code switch
 Replace msCheckLabelMinDistance function with code from temporary msCheckLabelMinDistanceBox
 Check performance
 Add comments
 Add/update tests
 Rebase
 Update documentation (to mapserver/docs when this is merged)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5464,2017-07-20T14:39:04Z,2017-09-19T15:47:31Z,2017-10-05T13:00:58Z,MERGED,True,446,41,8,https://github.com/olt,Fix label MINDISTANCE calculation,1,[],https://github.com/mapserver/mapserver/pull/5464,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5464#issuecomment-330583222,"Please refer to #5369  for more information about the implementation.

 Remove #define NEWMINDIST code switch
 Replace msCheckLabelMinDistance function with code from temporary msCheckLabelMinDistanceBox
 Check performance
 Add comments
 Add/update tests
 Rebase
 Update documentation (to mapserver/docs when this is merged)",Need to get the docs pull request merged too... --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5464,2017-07-20T14:39:04Z,2017-09-19T15:47:31Z,2017-10-05T13:00:58Z,MERGED,True,446,41,8,https://github.com/olt,Fix label MINDISTANCE calculation,1,[],https://github.com/mapserver/mapserver/pull/5464,https://github.com/olt,3,https://github.com/MapServer/MapServer/pull/5464#issuecomment-334457533,"Please refer to #5369  for more information about the implementation.

 Remove #define NEWMINDIST code switch
 Replace msCheckLabelMinDistance function with code from temporary msCheckLabelMinDistanceBox
 Check performance
 Add comments
 Add/update tests
 Rebase
 Update documentation (to mapserver/docs when this is merged)",Thanks. Updated docs: MapServer/MapServer-documentation#199,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5467,2017-07-27T08:23:35Z,2020-02-26T09:24:13Z,2020-02-26T09:24:13Z,CLOSED,False,5,1,1,https://github.com/lepirlouit,compile the Ms sql plugin,2,[],https://github.com/mapserver/mapserver/pull/5467,https://github.com/lepirlouit,1,https://github.com/MapServer/MapServer/pull/5467,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5467,2017-07-27T08:23:35Z,2020-02-26T09:24:13Z,2020-02-26T09:24:13Z,CLOSED,False,5,1,1,https://github.com/lepirlouit,compile the Ms sql plugin,2,[],https://github.com/mapserver/mapserver/pull/5467,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5467#issuecomment-344061048,,@lepirlouit I have never faced this issue (using MSVC 2012).  What compiler are you using?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5467,2017-07-27T08:23:35Z,2020-02-26T09:24:13Z,2020-02-26T09:24:13Z,CLOSED,False,5,1,1,https://github.com/lepirlouit,compile the Ms sql plugin,2,[],https://github.com/mapserver/mapserver/pull/5467,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5467#issuecomment-344415253,,Is the windows.h file there to make it clear the plugin can only be compiled on Windows?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5467,2017-07-27T08:23:35Z,2020-02-26T09:24:13Z,2020-02-26T09:24:13Z,CLOSED,False,5,1,1,https://github.com/lepirlouit,compile the Ms sql plugin,2,[],https://github.com/mapserver/mapserver/pull/5467,https://github.com/lepirlouit,4,https://github.com/MapServer/MapServer/pull/5467#issuecomment-503497547,,why can the plugin not be compiled on linux ?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5467,2017-07-27T08:23:35Z,2020-02-26T09:24:13Z,2020-02-26T09:24:13Z,CLOSED,False,5,1,1,https://github.com/lepirlouit,compile the Ms sql plugin,2,[],https://github.com/mapserver/mapserver/pull/5467,https://github.com/geographika,5,https://github.com/MapServer/MapServer/pull/5467#issuecomment-591325551,,"@lepirlouit - this has been fixed with #5996, and the MSSQL driver is now built on Travis/Linux as part of the MapServer CI tests. Thanks for raising this.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5468,2017-08-03T22:09:10Z,2017-08-03T22:36:47Z,2017-08-03T22:36:47Z,MERGED,True,0,2,1,https://github.com/geographika,Remove erroneous END from map,1,[],https://github.com/mapserver/mapserver/pull/5468,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5468,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5472,2017-08-14T20:48:14Z,2017-08-14T21:14:04Z,2017-08-14T21:14:08Z,MERGED,True,10,0,1,https://github.com/szekerest,Quick and dirty fix for issue #5470,1,[],https://github.com/mapserver/mapserver/pull/5472,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5472,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5478,2017-09-18T13:12:28Z,2017-09-19T15:45:51Z,2017-09-19T17:13:07Z,MERGED,True,32,0,1,https://github.com/geographika,Create CONTRIBUTING.md,2,[],https://github.com/mapserver/mapserver/pull/5478,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5478,"To let users know about the mailing list, and bug submission policy. A link to the file should show up when creating an issue: https://help.github.com/articles/setting-guidelines-for-repository-contributors/
This may prevent some of the recent issues that would have been better added to the mailing lists. For example:
#5477
#5475
#5437","To let users know about the mailing list, and bug submission policy. A link to the file should show up when creating an issue: https://help.github.com/articles/setting-guidelines-for-repository-contributors/
This may prevent some of the recent issues that would have been better added to the mailing lists. For example:
#5477
#5475
#5437",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5478,2017-09-18T13:12:28Z,2017-09-19T15:45:51Z,2017-09-19T17:13:07Z,MERGED,True,32,0,1,https://github.com/geographika,Create CONTRIBUTING.md,2,[],https://github.com/mapserver/mapserver/pull/5478,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5478#issuecomment-330582499,"To let users know about the mailing list, and bug submission policy. A link to the file should show up when creating an issue: https://help.github.com/articles/setting-guidelines-for-repository-contributors/
This may prevent some of the recent issues that would have been better added to the mailing lists. For example:
#5477
#5475
#5437",Thanks!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5478,2017-09-18T13:12:28Z,2017-09-19T15:45:51Z,2017-09-19T17:13:07Z,MERGED,True,32,0,1,https://github.com/geographika,Create CONTRIBUTING.md,2,[],https://github.com/mapserver/mapserver/pull/5478,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5478#issuecomment-330608553,"To let users know about the mailing list, and bug submission policy. A link to the file should show up when creating an issue: https://help.github.com/articles/setting-guidelines-for-repository-contributors/
This may prevent some of the recent issues that would have been better added to the mailing lists. For example:
#5477
#5475
#5437","@sdlime - thanks for adding it!
For info it looks like the new issue message will only be shown when CONTRIBUTING is in the active branch (currently 7-0 by default for MapServer, whereas CONTRIBUTING.md is in master).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5479,2017-09-19T15:33:04Z,2017-09-28T09:38:53Z,2017-09-28T13:06:54Z,CLOSED,False,12,10,7,https://github.com/geographika,Update test Mapfile encoding to utf-8,12,[],https://github.com/mapserver/mapserver/pull/5479,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5479,"This replaces #5460 as it was not created in a feature branch..apologies.
These files were in iso-8859-1 (for the German accents in Straßenfläche). All Mapfiles should be in utf-8 according to the docs.
Sample Python code used to convert below for reference (all line breaks etc. preserved).
def change_encoding():
    sourceEncoding = ""iso-8859-1""
    targetEncoding = ""utf-8""
    files = [""wms_inspire_scenario2_cap130_ger.xml"",""wms_inspire_scenario2_cap111_ger.xml"",""wms_inspire_scenario1_cap130_ger.xml""]

    for f in files:
        source = open(os.path.join(r""D:\GitHub\mapserver\msautotest\wxs\expected"", f))
        target = open(os.path.join(r""D:\GitHub\mapserver\msautotest\wxs\expected"", f + "".utf.xml""), ""wb"")
        target.write(unicode(source.read(), sourceEncoding).encode(targetEncoding))","This replaces #5460 as it was not created in a feature branch..apologies.
These files were in iso-8859-1 (for the German accents in Straßenfläche). All Mapfiles should be in utf-8 according to the docs.
Sample Python code used to convert below for reference (all line breaks etc. preserved).
def change_encoding():
    sourceEncoding = ""iso-8859-1""
    targetEncoding = ""utf-8""
    files = [""wms_inspire_scenario2_cap130_ger.xml"",""wms_inspire_scenario2_cap111_ger.xml"",""wms_inspire_scenario1_cap130_ger.xml""]

    for f in files:
        source = open(os.path.join(r""D:\GitHub\mapserver\msautotest\wxs\expected"", f))
        target = open(os.path.join(r""D:\GitHub\mapserver\msautotest\wxs\expected"", f + "".utf.xml""), ""wb"")
        target.write(unicode(source.read(), sourceEncoding).encode(targetEncoding))",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5479,2017-09-19T15:33:04Z,2017-09-28T09:38:53Z,2017-09-28T13:06:54Z,CLOSED,False,12,10,7,https://github.com/geographika,Update test Mapfile encoding to utf-8,12,[],https://github.com/mapserver/mapserver/pull/5479,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5479#issuecomment-332191918,"This replaces #5460 as it was not created in a feature branch..apologies.
These files were in iso-8859-1 (for the German accents in Straßenfläche). All Mapfiles should be in utf-8 according to the docs.
Sample Python code used to convert below for reference (all line breaks etc. preserved).
def change_encoding():
    sourceEncoding = ""iso-8859-1""
    targetEncoding = ""utf-8""
    files = [""wms_inspire_scenario2_cap130_ger.xml"",""wms_inspire_scenario2_cap111_ger.xml"",""wms_inspire_scenario1_cap130_ger.xml""]

    for f in files:
        source = open(os.path.join(r""D:\GitHub\mapserver\msautotest\wxs\expected"", f))
        target = open(os.path.join(r""D:\GitHub\mapserver\msautotest\wxs\expected"", f + "".utf.xml""), ""wb"")
        target.write(unicode(source.read(), sourceEncoding).encode(targetEncoding))",Just to note the test failed as there were issues with Travis when it was run.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5479,2017-09-19T15:33:04Z,2017-09-28T09:38:53Z,2017-09-28T13:06:54Z,CLOSED,False,12,10,7,https://github.com/geographika,Update test Mapfile encoding to utf-8,12,[],https://github.com/mapserver/mapserver/pull/5479,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/5479#issuecomment-332639401,"This replaces #5460 as it was not created in a feature branch..apologies.
These files were in iso-8859-1 (for the German accents in Straßenfläche). All Mapfiles should be in utf-8 according to the docs.
Sample Python code used to convert below for reference (all line breaks etc. preserved).
def change_encoding():
    sourceEncoding = ""iso-8859-1""
    targetEncoding = ""utf-8""
    files = [""wms_inspire_scenario2_cap130_ger.xml"",""wms_inspire_scenario2_cap111_ger.xml"",""wms_inspire_scenario1_cap130_ger.xml""]

    for f in files:
        source = open(os.path.join(r""D:\GitHub\mapserver\msautotest\wxs\expected"", f))
        target = open(os.path.join(r""D:\GitHub\mapserver\msautotest\wxs\expected"", f + "".utf.xml""), ""wb"")
        target.write(unicode(source.read(), sourceEncoding).encode(targetEncoding))",@geographika Can you rebase on freshly updated branch-7-0 now that it passes test ?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5479,2017-09-19T15:33:04Z,2017-09-28T09:38:53Z,2017-09-28T13:06:54Z,CLOSED,False,12,10,7,https://github.com/geographika,Update test Mapfile encoding to utf-8,12,[],https://github.com/mapserver/mapserver/pull/5479,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/5479#issuecomment-332782192,"This replaces #5460 as it was not created in a feature branch..apologies.
These files were in iso-8859-1 (for the German accents in Straßenfläche). All Mapfiles should be in utf-8 according to the docs.
Sample Python code used to convert below for reference (all line breaks etc. preserved).
def change_encoding():
    sourceEncoding = ""iso-8859-1""
    targetEncoding = ""utf-8""
    files = [""wms_inspire_scenario2_cap130_ger.xml"",""wms_inspire_scenario2_cap111_ger.xml"",""wms_inspire_scenario1_cap130_ger.xml""]

    for f in files:
        source = open(os.path.join(r""D:\GitHub\mapserver\msautotest\wxs\expected"", f))
        target = open(os.path.join(r""D:\GitHub\mapserver\msautotest\wxs\expected"", f + "".utf.xml""), ""wb"")
        target.write(unicode(source.read(), sourceEncoding).encode(targetEncoding))","Ah, you merged instead of rebasing. The history is somewhat messed-up now. OK I'm going to pull your branch and fix that",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5479,2017-09-19T15:33:04Z,2017-09-28T09:38:53Z,2017-09-28T13:06:54Z,CLOSED,False,12,10,7,https://github.com/geographika,Update test Mapfile encoding to utf-8,12,[],https://github.com/mapserver/mapserver/pull/5479,https://github.com/rouault,5,https://github.com/MapServer/MapServer/pull/5479#issuecomment-332784017,"This replaces #5460 as it was not created in a feature branch..apologies.
These files were in iso-8859-1 (for the German accents in Straßenfläche). All Mapfiles should be in utf-8 according to the docs.
Sample Python code used to convert below for reference (all line breaks etc. preserved).
def change_encoding():
    sourceEncoding = ""iso-8859-1""
    targetEncoding = ""utf-8""
    files = [""wms_inspire_scenario2_cap130_ger.xml"",""wms_inspire_scenario2_cap111_ger.xml"",""wms_inspire_scenario1_cap130_ger.xml""]

    for f in files:
        source = open(os.path.join(r""D:\GitHub\mapserver\msautotest\wxs\expected"", f))
        target = open(os.path.join(r""D:\GitHub\mapserver\msautotest\wxs\expected"", f + "".utf.xml""), ""wb"")
        target.write(unicode(source.read(), sourceEncoding).encode(targetEncoding))",Fixed and committed per a3a481a,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5479,2017-09-19T15:33:04Z,2017-09-28T09:38:53Z,2017-09-28T13:06:54Z,CLOSED,False,12,10,7,https://github.com/geographika,Update test Mapfile encoding to utf-8,12,[],https://github.com/mapserver/mapserver/pull/5479,https://github.com/geographika,6,https://github.com/MapServer/MapServer/pull/5479#issuecomment-332830440,"This replaces #5460 as it was not created in a feature branch..apologies.
These files were in iso-8859-1 (for the German accents in Straßenfläche). All Mapfiles should be in utf-8 according to the docs.
Sample Python code used to convert below for reference (all line breaks etc. preserved).
def change_encoding():
    sourceEncoding = ""iso-8859-1""
    targetEncoding = ""utf-8""
    files = [""wms_inspire_scenario2_cap130_ger.xml"",""wms_inspire_scenario2_cap111_ger.xml"",""wms_inspire_scenario1_cap130_ger.xml""]

    for f in files:
        source = open(os.path.join(r""D:\GitHub\mapserver\msautotest\wxs\expected"", f))
        target = open(os.path.join(r""D:\GitHub\mapserver\msautotest\wxs\expected"", f + "".utf.xml""), ""wb"")
        target.write(unicode(source.read(), sourceEncoding).encode(targetEncoding))",@rouault - thanks! Sorry got in a real mess with that branch and was going to come back to it later..,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5480,2017-09-20T19:53:31Z,2017-09-20T21:45:27Z,2017-09-20T21:45:27Z,MERGED,True,427,75,10,https://github.com/dmorissette,MS RFC 118: Support Vendor-Specific OGC FILTER parameter in WMS requests,2,[],https://github.com/mapserver/mapserver/pull/5480,https://github.com/dmorissette,1,https://github.com/MapServer/MapServer/pull/5480,"This pull request implements RFC 118, Support for Vendor-Specific OGC FILTER parameter in WMS requests.
See the RFC doc for the full details:
http://mapserver.org/development/rfc/ms-rfc-118.html","This pull request implements RFC 118, Support for Vendor-Specific OGC FILTER parameter in WMS requests.
See the RFC doc for the full details:
http://mapserver.org/development/rfc/ms-rfc-118.html",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5482,2017-09-26T13:05:42Z,2017-11-13T21:13:34Z,2017-11-13T21:14:09Z,MERGED,True,4,4,1,https://github.com/geographika,MINSCALE and MAXSCALE are both deprecated,1,[],https://github.com/mapserver/mapserver/pull/5482,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5482,Update to MAXSCALEDENOM in test case,Update to MAXSCALEDENOM in test case,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5482,2017-09-26T13:05:42Z,2017-11-13T21:13:34Z,2017-11-13T21:14:09Z,MERGED,True,4,4,1,https://github.com/geographika,MINSCALE and MAXSCALE are both deprecated,1,[],https://github.com/mapserver/mapserver/pull/5482,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5482#issuecomment-332639035,Update to MAXSCALEDENOM in test case,"I'm wondering if it doesn't make sense to still have them tested ? They are deprecated, but are still supposed to work, so better make sure they still work with the test (although I don't think anyone really madesure that deprecated keywords are still tested...)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5482,2017-09-26T13:05:42Z,2017-11-13T21:13:34Z,2017-11-13T21:14:09Z,MERGED,True,4,4,1,https://github.com/geographika,MINSCALE and MAXSCALE are both deprecated,1,[],https://github.com/mapserver/mapserver/pull/5482,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5482#issuecomment-332831389,Update to MAXSCALEDENOM in test case,"@rouault - there are plenty of deprecated keywords around still, the reason I added this particular case was because MINSCALE and MAXSCALE are no longer listed in the CLASS docs page - http://mapserver.org/mapfile/class.html
The pull request can be closed until further discussion on the dev lists if that is appropriate?
I'm not too far off allowing deprecated keywords to be highlighted in a mapfile with Python, so will post this to the dev list when it's ready.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5482,2017-09-26T13:05:42Z,2017-11-13T21:13:34Z,2017-11-13T21:14:09Z,MERGED,True,4,4,1,https://github.com/geographika,MINSCALE and MAXSCALE are both deprecated,1,[],https://github.com/mapserver/mapserver/pull/5482,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/5482#issuecomment-332837701,Update to MAXSCALEDENOM in test case,"Actually I see there are a lot of remaining MAXSCALE uses: https://github.com/mapserver/mapserver/search?utf8=%E2%9C%93&q=%22MAXSCALE%22&type=
@sdlime Any opinion if we should remove all uses of deprecated keywords in msautotest, or keep some on purpose to check that we still work with those ? I raised this point, but I'm not at all strong about that. I don't maintain old mapfiles ;-)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5482,2017-09-26T13:05:42Z,2017-11-13T21:13:34Z,2017-11-13T21:14:09Z,MERGED,True,4,4,1,https://github.com/geographika,MINSCALE and MAXSCALE are both deprecated,1,[],https://github.com/mapserver/mapserver/pull/5482,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/5482#issuecomment-344060056,Update to MAXSCALEDENOM in test case,"thanks @geographika Merging as you recommended, and further discussion can happen on -dev as you suggested.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5485,2017-09-27T19:56:08Z,2017-09-27T21:15:19Z,2017-09-28T05:02:12Z,MERGED,True,1,0,1,https://github.com/BernardBielecki,#5483 - add copy autoangle in msCopyStyle,1,[],https://github.com/mapserver/mapserver/pull/5485,https://github.com/BernardBielecki,1,https://github.com/MapServer/MapServer/pull/5485,Issue #5483,Issue #5483,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5488,2017-10-01T11:12:51Z,2017-11-13T21:11:15Z,2017-11-14T14:59:58Z,MERGED,True,4,4,1,https://github.com/geographika,DEBUG 10 is an invalid value,2,[],https://github.com/mapserver/mapserver/pull/5488,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5488,Unless DEBUG 10 is an undocumented setting?,Unless DEBUG 10 is an undocumented setting?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5488,2017-10-01T11:12:51Z,2017-11-13T21:11:15Z,2017-11-14T14:59:58Z,MERGED,True,4,4,1,https://github.com/geographika,DEBUG 10 is an invalid value,2,[],https://github.com/mapserver/mapserver/pull/5488,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5488#issuecomment-344059262,Unless DEBUG 10 is an undocumented setting?,thanks @geographika good catch.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5489,2017-10-04T16:41:06Z,2017-11-13T20:58:46Z,2017-12-28T00:37:48Z,MERGED,True,62,12,6,https://github.com/theduckylittle,Add an offset to the scalebar,2,[],https://github.com/mapserver/mapserver/pull/5489,https://github.com/theduckylittle,1,https://github.com/MapServer/MapServer/pull/5489,"The scalebar is ""stuck"" to the edges of the map. This can make the
scalebar difficult to read when it is embedded in some mapping applications.
This PR adds the ""OFFSET"" key word to the scalebar object. The OFFSET X and Y
moves the scalebar away from the map a set number of pixels.
See: geomoose/gm3#161 for an example of the rendering gone astray.","The scalebar is ""stuck"" to the edges of the map. This can make the
scalebar difficult to read when it is embedded in some mapping applications.
This PR adds the ""OFFSET"" key word to the scalebar object. The OFFSET X and Y
moves the scalebar away from the map a set number of pixels.
See: geomoose/gm3#161 for an example of the rendering gone astray.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5489,2017-10-04T16:41:06Z,2017-11-13T20:58:46Z,2017-12-28T00:37:48Z,MERGED,True,62,12,6,https://github.com/theduckylittle,Add an offset to the scalebar,2,[],https://github.com/mapserver/mapserver/pull/5489,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5489#issuecomment-334239665,"The scalebar is ""stuck"" to the edges of the map. This can make the
scalebar difficult to read when it is embedded in some mapping applications.
This PR adds the ""OFFSET"" key word to the scalebar object. The OFFSET X and Y
moves the scalebar away from the map a set number of pixels.
See: geomoose/gm3#161 for an example of the rendering gone astray.",I thought there was an easier way to fine-tune placement already available (beyond POSITION) but I don't recall exactly what it was - I'll have to check before proceeding...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5489,2017-10-04T16:41:06Z,2017-11-13T20:58:46Z,2017-12-28T00:37:48Z,MERGED,True,62,12,6,https://github.com/theduckylittle,Add an offset to the scalebar,2,[],https://github.com/mapserver/mapserver/pull/5489,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/5489#issuecomment-334828666,"The scalebar is ""stuck"" to the edges of the map. This can make the
scalebar difficult to read when it is embedded in some mapping applications.
This PR adds the ""OFFSET"" key word to the scalebar object. The OFFSET X and Y
moves the scalebar away from the map a set number of pixels.
See: geomoose/gm3#161 for an example of the rendering gone astray.",How does the offset behave when combined with position? I mean are the values absolute so the same values wouldn't work for LL vs UR?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5489,2017-10-04T16:41:06Z,2017-11-13T20:58:46Z,2017-12-28T00:37:48Z,MERGED,True,62,12,6,https://github.com/theduckylittle,Add an offset to the scalebar,2,[],https://github.com/mapserver/mapserver/pull/5489,https://github.com/theduckylittle,4,https://github.com/MapServer/MapServer/pull/5489#issuecomment-334870054,"The scalebar is ""stuck"" to the edges of the map. This can make the
scalebar difficult to read when it is embedded in some mapping applications.
This PR adds the ""OFFSET"" key word to the scalebar object. The OFFSET X and Y
moves the scalebar away from the map a set number of pixels.
See: geomoose/gm3#161 for an example of the rendering gone astray.",It's an offset of the position as defined by position.  So if the POSITION is LL then the OFFSET is the number of pixels away from the LL corner.  If the POSITION is UR then it's the number of pixels is the distance from the upper-right corner.  For the positions which specify a center then it's the number of pixels to be offset from the calculated left-hand position of the placement.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5489,2017-10-04T16:41:06Z,2017-11-13T20:58:46Z,2017-12-28T00:37:48Z,MERGED,True,62,12,6,https://github.com/theduckylittle,Add an offset to the scalebar,2,[],https://github.com/mapserver/mapserver/pull/5489,https://github.com/sdlime,5,https://github.com/MapServer/MapServer/pull/5489#issuecomment-335582760,"The scalebar is ""stuck"" to the edges of the map. This can make the
scalebar difficult to read when it is embedded in some mapping applications.
This PR adds the ""OFFSET"" key word to the scalebar object. The OFFSET X and Y
moves the scalebar away from the map a set number of pixels.
See: geomoose/gm3#161 for an example of the rendering gone astray.",Any idea why the CI test is failing? I wonder if it's a pixel-level difference based on the platform the image was generated on. Unfortunately I don't know how to look at the output on Travis. Probably should figure that out.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5489,2017-10-04T16:41:06Z,2017-11-13T20:58:46Z,2017-12-28T00:37:48Z,MERGED,True,62,12,6,https://github.com/theduckylittle,Add an offset to the scalebar,2,[],https://github.com/mapserver/mapserver/pull/5489,https://github.com/theduckylittle,6,https://github.com/MapServer/MapServer/pull/5489#issuecomment-335635254,"The scalebar is ""stuck"" to the edges of the map. This can make the
scalebar difficult to read when it is embedded in some mapping applications.
This PR adds the ""OFFSET"" key word to the scalebar object. The OFFSET X and Y
moves the scalebar away from the map a set number of pixels.
See: geomoose/gm3#161 for an example of the rendering gone astray.","I think it's an issue with different versions of cairo, all my local cairo tests are failing.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5489,2017-10-04T16:41:06Z,2017-11-13T20:58:46Z,2017-12-28T00:37:48Z,MERGED,True,62,12,6,https://github.com/theduckylittle,Add an offset to the scalebar,2,[],https://github.com/mapserver/mapserver/pull/5489,https://github.com/theduckylittle,7,https://github.com/MapServer/MapServer/pull/5489#issuecomment-335635354,"The scalebar is ""stuck"" to the edges of the map. This can make the
scalebar difficult to read when it is embedded in some mapping applications.
This PR adds the ""OFFSET"" key word to the scalebar object. The OFFSET X and Y
moves the scalebar away from the map a set number of pixels.
See: geomoose/gm3#161 for an example of the rendering gone astray.","The test image I included was rendered locally with my version of Cairo, and therefore passes, but with the one in travis, it is failing.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5489,2017-10-04T16:41:06Z,2017-11-13T20:58:46Z,2017-12-28T00:37:48Z,MERGED,True,62,12,6,https://github.com/theduckylittle,Add an offset to the scalebar,2,[],https://github.com/mapserver/mapserver/pull/5489,https://github.com/theduckylittle,8,https://github.com/MapServer/MapServer/pull/5489#issuecomment-335790374,"The scalebar is ""stuck"" to the edges of the map. This can make the
scalebar difficult to read when it is embedded in some mapping applications.
This PR adds the ""OFFSET"" key word to the scalebar object. The OFFSET X and Y
moves the scalebar away from the map a set number of pixels.
See: geomoose/gm3#161 for an example of the rendering gone astray.","I did find there were substantial Cairo version difference between what I'm running locally (Xenial, cairo @ 1.16.1) and what's running on Travis/Vagrant (Precise, cairo @ 1.10.2).  I've updated the image to one that I generated inside of the vagrant environment.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5489,2017-10-04T16:41:06Z,2017-11-13T20:58:46Z,2017-12-28T00:37:48Z,MERGED,True,62,12,6,https://github.com/theduckylittle,Add an offset to the scalebar,2,[],https://github.com/mapserver/mapserver/pull/5489,https://github.com/theduckylittle,9,https://github.com/MapServer/MapServer/pull/5489#issuecomment-335791860,"The scalebar is ""stuck"" to the edges of the map. This can make the
scalebar difficult to read when it is embedded in some mapping applications.
This PR adds the ""OFFSET"" key word to the scalebar object. The OFFSET X and Y
moves the scalebar away from the map a set number of pixels.
See: geomoose/gm3#161 for an example of the rendering gone astray.",Travis now passes with the fixed PNG.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5489,2017-10-04T16:41:06Z,2017-11-13T20:58:46Z,2017-12-28T00:37:48Z,MERGED,True,62,12,6,https://github.com/theduckylittle,Add an offset to the scalebar,2,[],https://github.com/mapserver/mapserver/pull/5489,https://github.com/geographika,10,https://github.com/MapServer/MapServer/pull/5489#issuecomment-353227395,"The scalebar is ""stuck"" to the edges of the map. This can make the
scalebar difficult to read when it is embedded in some mapping applications.
This PR adds the ""OFFSET"" key word to the scalebar object. The OFFSET X and Y
moves the scalebar away from the map a set number of pixels.
See: geomoose/gm3#161 for an example of the rendering gone astray.","Is there any chance of making this a simple attribute rather than a OFFSET...END block?
OFFSET is already an attribute of STYLE and LABEL and used as a simple:
OFFSET 5 5
rather than
OFFSET 5 5 END
In the interests of consistency and introducing new ambiguities into the Mapfile syntax it would be preferable to have the former - although a switch could introduce more confusion.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5489,2017-10-04T16:41:06Z,2017-11-13T20:58:46Z,2017-12-28T00:37:48Z,MERGED,True,62,12,6,https://github.com/theduckylittle,Add an offset to the scalebar,2,[],https://github.com/mapserver/mapserver/pull/5489,https://github.com/theduckylittle,11,https://github.com/MapServer/MapServer/pull/5489#issuecomment-353990365,"The scalebar is ""stuck"" to the edges of the map. This can make the
scalebar difficult to read when it is embedded in some mapping applications.
This PR adds the ""OFFSET"" key word to the scalebar object. The OFFSET X and Y
moves the scalebar away from the map a set number of pixels.
See: geomoose/gm3#161 for an example of the rendering gone astray.","The actual code is a copy-and-paste of the label code. I believe END is actually just being ignored.
From loadLabel:
      case(OFFSET):
        if(getInteger(&(label->offsetx)) == -1) return(-1);
        if(getInteger(&(label->offsety)) == -1) return(-1);
        break;

From loadScalebar:
      case(OFFSET):
        if(getInteger(&(scalebar->offsetx)) == -1) return(-1);
        if(getInteger(&(scalebar->offsety)) == -1) return(-1);
        break;

I believe in this case both syntaxes are valid.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5489,2017-10-04T16:41:06Z,2017-11-13T20:58:46Z,2017-12-28T00:37:48Z,MERGED,True,62,12,6,https://github.com/theduckylittle,Add an offset to the scalebar,2,[],https://github.com/mapserver/mapserver/pull/5489,https://github.com/geographika,12,https://github.com/MapServer/MapServer/pull/5489#issuecomment-354128594,"The scalebar is ""stuck"" to the edges of the map. This can make the
scalebar difficult to read when it is embedded in some mapping applications.
This PR adds the ""OFFSET"" key word to the scalebar object. The OFFSET X and Y
moves the scalebar away from the map a set number of pixels.
See: geomoose/gm3#161 for an example of the rendering gone astray.","@theduckylittle - is it ok to change the test to match the non-END syntax (see pull request)?
The docs actually don't mention END in the example, so this should be the only modification.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5489,2017-10-04T16:41:06Z,2017-11-13T20:58:46Z,2017-12-28T00:37:48Z,MERGED,True,62,12,6,https://github.com/theduckylittle,Add an offset to the scalebar,2,[],https://github.com/mapserver/mapserver/pull/5489,https://github.com/theduckylittle,13,https://github.com/MapServer/MapServer/pull/5489#issuecomment-354204576,"The scalebar is ""stuck"" to the edges of the map. This can make the
scalebar difficult to read when it is embedded in some mapping applications.
This PR adds the ""OFFSET"" key word to the scalebar object. The OFFSET X and Y
moves the scalebar away from the map a set number of pixels.
See: geomoose/gm3#161 for an example of the rendering gone astray.",Doesn't bother me. :-),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5498,2017-10-23T18:36:04Z,2017-10-23T19:22:15Z,2017-10-23T19:22:15Z,MERGED,True,9,3,2,https://github.com/szekerest,Fix kerneldensity layer not to loose connection type on reopen (#5497),1,[],https://github.com/mapserver/mapserver/pull/5498,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5498,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5512,2017-11-07T15:48:32Z,2020-01-17T22:46:39Z,2020-01-29T17:26:13Z,CLOSED,False,1,2,2,https://github.com/pmauduit,"postgis - implements the ""ilike"" / IEQ operator",1,[],https://github.com/mapserver/mapserver/pull/5512,https://github.com/pmauduit,1,https://github.com/MapServer/MapServer/pull/5512,"This PR is a fix proposal for issue #5499 ; when a OGC filter is posted with a case-insensitive search, the postgis code is unable to translate the filter into a query, raising the following error:
msPostGISLayerTranslateFilter(): General error message. Translation to native SQL failed.

The fix was simply implemented by removing the MS_TOKEN_COMPARISON_IEQ from the ""unsupported operator"" list in mappostgis.c then adding a ""ilike"" expression instead of an empty string in the method responsible of transforming the token to SQL.
Tests: directly by faking onto our dev server the libmaserver.so with a custom LD_LIBRARY_PATH, ensuring the previous postgis function was actually able to generated a SQL query (which can be then retrieved in our postgresql logs with no error).
Concerns / critics: relying on the postgresql doc, it actually seems that the ILIKE operator is not in the SQL standard but a postgresql extension, and maplayer.c seems to be db-agnostic.","This PR is a fix proposal for issue #5499 ; when a OGC filter is posted with a case-insensitive search, the postgis code is unable to translate the filter into a query, raising the following error:
msPostGISLayerTranslateFilter(): General error message. Translation to native SQL failed.

The fix was simply implemented by removing the MS_TOKEN_COMPARISON_IEQ from the ""unsupported operator"" list in mappostgis.c then adding a ""ilike"" expression instead of an empty string in the method responsible of transforming the token to SQL.
Tests: directly by faking onto our dev server the libmaserver.so with a custom LD_LIBRARY_PATH, ensuring the previous postgis function was actually able to generated a SQL query (which can be then retrieved in our postgresql logs with no error).
Concerns / critics: relying on the postgresql doc, it actually seems that the ILIKE operator is not in the SQL standard but a postgresql extension, and maplayer.c seems to be db-agnostic.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5512,2017-11-07T15:48:32Z,2020-01-17T22:46:39Z,2020-01-29T17:26:13Z,CLOSED,False,1,2,2,https://github.com/pmauduit,"postgis - implements the ""ilike"" / IEQ operator",1,[],https://github.com/mapserver/mapserver/pull/5512,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5512#issuecomment-342736854,"This PR is a fix proposal for issue #5499 ; when a OGC filter is posted with a case-insensitive search, the postgis code is unable to translate the filter into a query, raising the following error:
msPostGISLayerTranslateFilter(): General error message. Translation to native SQL failed.

The fix was simply implemented by removing the MS_TOKEN_COMPARISON_IEQ from the ""unsupported operator"" list in mappostgis.c then adding a ""ilike"" expression instead of an empty string in the method responsible of transforming the token to SQL.
Tests: directly by faking onto our dev server the libmaserver.so with a custom LD_LIBRARY_PATH, ensuring the previous postgis function was actually able to generated a SQL query (which can be then retrieved in our postgresql logs with no error).
Concerns / critics: relying on the postgresql doc, it actually seems that the ILIKE operator is not in the SQL standard but a postgresql extension, and maplayer.c seems to be db-agnostic.","ILIKE in PostgreSQL takes a pattern as its right operand, where _ and % have special meanings, so if the literal searched has those character, this will not behave properly.
Potential workaround: do proper escaping in mspostgis
But ILIKE is inefficient and will always result in sequential scan. An alternative mentionned in https://stackoverflow.com/questions/4482206/postgresql-case-insensitive-string-comparison?answertab=active#tab-top would be to use lower(column_name) = lower('literal') , since you can create an index on lower(column_name).
Adding new test case in msautotest/wxs/wfs_filter_postgis.map would be appreciated",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5512,2017-11-07T15:48:32Z,2020-01-17T22:46:39Z,2020-01-29T17:26:13Z,CLOSED,False,1,2,2,https://github.com/pmauduit,"postgis - implements the ""ilike"" / IEQ operator",1,[],https://github.com/mapserver/mapserver/pull/5512,https://github.com/pmauduit,3,https://github.com/MapServer/MapServer/pull/5512#issuecomment-342764112,"This PR is a fix proposal for issue #5499 ; when a OGC filter is posted with a case-insensitive search, the postgis code is unable to translate the filter into a query, raising the following error:
msPostGISLayerTranslateFilter(): General error message. Translation to native SQL failed.

The fix was simply implemented by removing the MS_TOKEN_COMPARISON_IEQ from the ""unsupported operator"" list in mappostgis.c then adding a ""ilike"" expression instead of an empty string in the method responsible of transforming the token to SQL.
Tests: directly by faking onto our dev server the libmaserver.so with a custom LD_LIBRARY_PATH, ensuring the previous postgis function was actually able to generated a SQL query (which can be then retrieved in our postgresql logs with no error).
Concerns / critics: relying on the postgresql doc, it actually seems that the ILIKE operator is not in the SQL standard but a postgresql extension, and maplayer.c seems to be db-agnostic.","Thanks @rouault ; I was aware of the possibility to user lower(...) = lower(...) as a clause, my understanding of the code is that it cannot be done in msExpressionTokenToString(), so I guess everything should be done into mappostgis.c. This PR will need a rework though.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5512,2017-11-07T15:48:32Z,2020-01-17T22:46:39Z,2020-01-29T17:26:13Z,CLOSED,False,1,2,2,https://github.com/pmauduit,"postgis - implements the ""ilike"" / IEQ operator",1,[],https://github.com/mapserver/mapserver/pull/5512,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/5512#issuecomment-342784595,"This PR is a fix proposal for issue #5499 ; when a OGC filter is posted with a case-insensitive search, the postgis code is unable to translate the filter into a query, raising the following error:
msPostGISLayerTranslateFilter(): General error message. Translation to native SQL failed.

The fix was simply implemented by removing the MS_TOKEN_COMPARISON_IEQ from the ""unsupported operator"" list in mappostgis.c then adding a ""ilike"" expression instead of an empty string in the method responsible of transforming the token to SQL.
Tests: directly by faking onto our dev server the libmaserver.so with a custom LD_LIBRARY_PATH, ensuring the previous postgis function was actually able to generated a SQL query (which can be then retrieved in our postgresql logs with no error).
Concerns / critics: relying on the postgresql doc, it actually seems that the ILIKE operator is not in the SQL standard but a postgresql extension, and maplayer.c seems to be db-agnostic.","Yes that's a bit painful to do given the list structure instead of an abstract syntax tree which would be very helpful there. This is still doable by looking ahead for the next token. Typically you would do that in the MS_TOKEN_BINDING_STRING case.  (just for an exemple to give some idea, but you cannot immediately adapt this, you can look at https://github.com/mapserver/mapserver/blob/branch-7-0/mapogr.cpp#L1863 that consumes the next token at https://github.com/mapserver/mapserver/blob/branch-7-0/mapogr.cpp#L1883)",True,"{'THUMBS_UP': ['https://github.com/DennisRutjes', 'https://github.com/rahmabPublic']}"
mapserver/mapserver,https://github.com/mapserver/mapserver,5512,2017-11-07T15:48:32Z,2020-01-17T22:46:39Z,2020-01-29T17:26:13Z,CLOSED,False,1,2,2,https://github.com/pmauduit,"postgis - implements the ""ilike"" / IEQ operator",1,[],https://github.com/mapserver/mapserver/pull/5512,https://github.com/rahmabPublic,5,https://github.com/MapServer/MapServer/pull/5512#issuecomment-477202750,"This PR is a fix proposal for issue #5499 ; when a OGC filter is posted with a case-insensitive search, the postgis code is unable to translate the filter into a query, raising the following error:
msPostGISLayerTranslateFilter(): General error message. Translation to native SQL failed.

The fix was simply implemented by removing the MS_TOKEN_COMPARISON_IEQ from the ""unsupported operator"" list in mappostgis.c then adding a ""ilike"" expression instead of an empty string in the method responsible of transforming the token to SQL.
Tests: directly by faking onto our dev server the libmaserver.so with a custom LD_LIBRARY_PATH, ensuring the previous postgis function was actually able to generated a SQL query (which can be then retrieved in our postgresql logs with no error).
Concerns / critics: relying on the postgresql doc, it actually seems that the ILIKE operator is not in the SQL standard but a postgresql extension, and maplayer.c seems to be db-agnostic.","what is the status of this issue?
I'm facing the same above described probblem.
I thought that the fix of @rouault  has been merged, but that is not the case.
Thanks any way",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5512,2017-11-07T15:48:32Z,2020-01-17T22:46:39Z,2020-01-29T17:26:13Z,CLOSED,False,1,2,2,https://github.com/pmauduit,"postgis - implements the ""ilike"" / IEQ operator",1,[],https://github.com/mapserver/mapserver/pull/5512,https://github.com/sdlime,6,https://github.com/MapServer/MapServer/pull/5512#issuecomment-477787096,"This PR is a fix proposal for issue #5499 ; when a OGC filter is posted with a case-insensitive search, the postgis code is unable to translate the filter into a query, raising the following error:
msPostGISLayerTranslateFilter(): General error message. Translation to native SQL failed.

The fix was simply implemented by removing the MS_TOKEN_COMPARISON_IEQ from the ""unsupported operator"" list in mappostgis.c then adding a ""ilike"" expression instead of an empty string in the method responsible of transforming the token to SQL.
Tests: directly by faking onto our dev server the libmaserver.so with a custom LD_LIBRARY_PATH, ensuring the previous postgis function was actually able to generated a SQL query (which can be then retrieved in our postgresql logs with no error).
Concerns / critics: relying on the postgresql doc, it actually seems that the ILIKE operator is not in the SQL standard but a postgresql extension, and maplayer.c seems to be db-agnostic.",I don't believe the original pull request was reworked... @pmauduit or @rouault?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5512,2017-11-07T15:48:32Z,2020-01-17T22:46:39Z,2020-01-29T17:26:13Z,CLOSED,False,1,2,2,https://github.com/pmauduit,"postgis - implements the ""ilike"" / IEQ operator",1,[],https://github.com/mapserver/mapserver/pull/5512,https://github.com/rouault,7,https://github.com/MapServer/MapServer/pull/5512#issuecomment-477792994,"This PR is a fix proposal for issue #5499 ; when a OGC filter is posted with a case-insensitive search, the postgis code is unable to translate the filter into a query, raising the following error:
msPostGISLayerTranslateFilter(): General error message. Translation to native SQL failed.

The fix was simply implemented by removing the MS_TOKEN_COMPARISON_IEQ from the ""unsupported operator"" list in mappostgis.c then adding a ""ilike"" expression instead of an empty string in the method responsible of transforming the token to SQL.
Tests: directly by faking onto our dev server the libmaserver.so with a custom LD_LIBRARY_PATH, ensuring the previous postgis function was actually able to generated a SQL query (which can be then retrieved in our postgresql logs with no error).
Concerns / critics: relying on the postgresql doc, it actually seems that the ILIKE operator is not in the SQL standard but a postgresql extension, and maplayer.c seems to be db-agnostic.","I don't believe the original pull request was reworked... @pmauduit or @rouault?

It wasn't. I might have the opportunity to work on that in the following weeks",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5512,2017-11-07T15:48:32Z,2020-01-17T22:46:39Z,2020-01-29T17:26:13Z,CLOSED,False,1,2,2,https://github.com/pmauduit,"postgis - implements the ""ilike"" / IEQ operator",1,[],https://github.com/mapserver/mapserver/pull/5512,https://github.com/rouault,8,https://github.com/MapServer/MapServer/pull/5512#issuecomment-575824329,"This PR is a fix proposal for issue #5499 ; when a OGC filter is posted with a case-insensitive search, the postgis code is unable to translate the filter into a query, raising the following error:
msPostGISLayerTranslateFilter(): General error message. Translation to native SQL failed.

The fix was simply implemented by removing the MS_TOKEN_COMPARISON_IEQ from the ""unsupported operator"" list in mappostgis.c then adding a ""ilike"" expression instead of an empty string in the method responsible of transforming the token to SQL.
Tests: directly by faking onto our dev server the libmaserver.so with a custom LD_LIBRARY_PATH, ensuring the previous postgis function was actually able to generated a SQL query (which can be then retrieved in our postgresql logs with no error).
Concerns / critics: relying on the postgresql doc, it actually seems that the ILIKE operator is not in the SQL standard but a postgresql extension, and maplayer.c seems to be db-agnostic.",This has been fixed in 7.4.3 per #5950,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5513,2017-11-09T17:14:01Z,2017-11-10T11:30:12Z,2017-11-10T11:30:12Z,MERGED,True,4,12,8,https://github.com/rouault,WCS 2.0 RectifiedGrid: use 'lon lat' and 'x y' labels even with CRS with 'inverted axis' order,1,[],https://github.com/mapserver/mapserver/pull/5513,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5513,"My understanding of the thread at https://lists.osgeo.org/pipermail/gdal-dev/2017-November/047650.html is that the RectifiedGrid.axisLabels element should reflect the way the grid axis are ordered (and not the axis order of the CRS as mandated by EPSG). As our offsetVector s are ordered in the GIS friendly order, the labels should reflect that as well
Note that according to Peter Baumann per https://lists.osgeo.org/pipermail/gdal-dev/2017-November/047668.html the content could be pretty much anything.","My understanding of the thread at https://lists.osgeo.org/pipermail/gdal-dev/2017-November/047650.html is that the RectifiedGrid.axisLabels element should reflect the way the grid axis are ordered (and not the axis order of the CRS as mandated by EPSG). As our offsetVector s are ordered in the GIS friendly order, the labels should reflect that as well
Note that according to Peter Baumann per https://lists.osgeo.org/pipermail/gdal-dev/2017-November/047668.html the content could be pretty much anything.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5513,2017-11-09T17:14:01Z,2017-11-10T11:30:12Z,2017-11-10T11:30:12Z,MERGED,True,4,12,8,https://github.com/rouault,WCS 2.0 RectifiedGrid: use 'lon lat' and 'x y' labels even with CRS with 'inverted axis' order,1,[],https://github.com/mapserver/mapserver/pull/5513,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5513#issuecomment-343225146,"My understanding of the thread at https://lists.osgeo.org/pipermail/gdal-dev/2017-November/047650.html is that the RectifiedGrid.axisLabels element should reflect the way the grid axis are ordered (and not the axis order of the CRS as mandated by EPSG). As our offsetVector s are ordered in the GIS friendly order, the labels should reflect that as well
Note that according to Peter Baumann per https://lists.osgeo.org/pipermail/gdal-dev/2017-November/047668.html the content could be pretty much anything.",@ajolma @Schpidi opinions ?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5513,2017-11-09T17:14:01Z,2017-11-10T11:30:12Z,2017-11-10T11:30:12Z,MERGED,True,4,12,8,https://github.com/rouault,WCS 2.0 RectifiedGrid: use 'lon lat' and 'x y' labels even with CRS with 'inverted axis' order,1,[],https://github.com/mapserver/mapserver/pull/5513,https://github.com/ajolma,3,https://github.com/MapServer/MapServer/pull/5513#issuecomment-343226131,"My understanding of the thread at https://lists.osgeo.org/pipermail/gdal-dev/2017-November/047650.html is that the RectifiedGrid.axisLabels element should reflect the way the grid axis are ordered (and not the axis order of the CRS as mandated by EPSG). As our offsetVector s are ordered in the GIS friendly order, the labels should reflect that as well
Note that according to Peter Baumann per https://lists.osgeo.org/pipermail/gdal-dev/2017-November/047668.html the content could be pretty much anything.",I agree. The order is important but the names can be different from coverage axes' names.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5513,2017-11-09T17:14:01Z,2017-11-10T11:30:12Z,2017-11-10T11:30:12Z,MERGED,True,4,12,8,https://github.com/rouault,WCS 2.0 RectifiedGrid: use 'lon lat' and 'x y' labels even with CRS with 'inverted axis' order,1,[],https://github.com/mapserver/mapserver/pull/5513,https://github.com/Schpidi,4,https://github.com/MapServer/MapServer/pull/5513#issuecomment-343445346,"My understanding of the thread at https://lists.osgeo.org/pipermail/gdal-dev/2017-November/047650.html is that the RectifiedGrid.axisLabels element should reflect the way the grid axis are ordered (and not the axis order of the CRS as mandated by EPSG). As our offsetVector s are ordered in the GIS friendly order, the labels should reflect that as well
Note that according to Peter Baumann per https://lists.osgeo.org/pipermail/gdal-dev/2017-November/047668.html the content could be pretty much anything.",Reading over the mail thread your proposal here seems to be a good proper way forward. Many thanks again for taking care @rouault!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5514,2017-11-09T20:08:15Z,2021-02-03T13:58:45Z,2021-02-03T13:58:45Z,CLOSED,False,95,30,7,https://github.com/erik-h11,Issue #5508 - Revived ANTIALIAS keyword in STYLE section ,2,[],https://github.com/mapserver/mapserver/pull/5514,https://github.com/erik-h11,1,https://github.com/MapServer/MapServer/pull/5514,"Revived ANTIALIAS keyword in STYLE section (only for line rendering).
The parser in the current code still recognizes this keyword, but the loadStyle() method simply ignores it. I'm now setting a flag in styleObj if the symbol is MS_FALSE, then copy that flag to strokeStyleObj, and in agg2RenderLine (mapagg.cpp) I pick renderer_scanline_bin_solid if the flag is MS_FALSE.","Revived ANTIALIAS keyword in STYLE section (only for line rendering).
The parser in the current code still recognizes this keyword, but the loadStyle() method simply ignores it. I'm now setting a flag in styleObj if the symbol is MS_FALSE, then copy that flag to strokeStyleObj, and in agg2RenderLine (mapagg.cpp) I pick renderer_scanline_bin_solid if the flag is MS_FALSE.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5514,2017-11-09T20:08:15Z,2021-02-03T13:58:45Z,2021-02-03T13:58:45Z,CLOSED,False,95,30,7,https://github.com/erik-h11,Issue #5508 - Revived ANTIALIAS keyword in STYLE section ,2,[],https://github.com/mapserver/mapserver/pull/5514,https://github.com/erik-h11,2,https://github.com/MapServer/MapServer/pull/5514#issuecomment-343554990,"Revived ANTIALIAS keyword in STYLE section (only for line rendering).
The parser in the current code still recognizes this keyword, but the loadStyle() method simply ignores it. I'm now setting a flag in styleObj if the symbol is MS_FALSE, then copy that flag to strokeStyleObj, and in agg2RenderLine (mapagg.cpp) I pick renderer_scanline_bin_solid if the flag is MS_FALSE.","Yes, this change affects lines with width > 1.
I added two test files; not sure how to insert them into msautotest framework.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5514,2017-11-09T20:08:15Z,2021-02-03T13:58:45Z,2021-02-03T13:58:45Z,CLOSED,False,95,30,7,https://github.com/erik-h11,Issue #5508 - Revived ANTIALIAS keyword in STYLE section ,2,[],https://github.com/mapserver/mapserver/pull/5514,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/5514#issuecomment-772530418,"Revived ANTIALIAS keyword in STYLE section (only for line rendering).
The parser in the current code still recognizes this keyword, but the loadStyle() method simply ignores it. I'm now setting a flag in styleObj if the symbol is MS_FALSE, then copy that flag to strokeStyleObj, and in agg2RenderLine (mapagg.cpp) I pick renderer_scanline_bin_solid if the flag is MS_FALSE.",Superesed per #6225,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5516,2017-11-10T14:09:48Z,2017-11-13T21:04:47Z,2017-11-16T00:02:42Z,MERGED,True,20,0,1,https://github.com/micking,enable default value for variable substitution in map's WEB section,1,[],https://github.com/mapserver/mapserver/pull/5516,https://github.com/micking,1,https://github.com/MapServer/MapServer/pull/5516,"Added the option to set a default value for variable substitution in the map's WEB section. To do that there is a new method applyHashTableDefaultSubstitutions that is being called in msApplyDefaultSubstitutions with the map's WEB section as the hash table to work on
Prior to this a 'default_' was ignored in the map's WEB section","Added the option to set a default value for variable substitution in the map's WEB section. To do that there is a new method applyHashTableDefaultSubstitutions that is being called in msApplyDefaultSubstitutions with the map's WEB section as the hash table to work on
Prior to this a 'default_' was ignored in the map's WEB section",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5516,2017-11-10T14:09:48Z,2017-11-13T21:04:47Z,2017-11-16T00:02:42Z,MERGED,True,20,0,1,https://github.com/micking,enable default value for variable substitution in map's WEB section,1,[],https://github.com/mapserver/mapserver/pull/5516,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5516#issuecomment-344058110,"Added the option to set a default value for variable substitution in the map's WEB section. To do that there is a new method applyHashTableDefaultSubstitutions that is being called in msApplyDefaultSubstitutions with the map's WEB section as the hash table to work on
Prior to this a 'default_' was ignored in the map's WEB section","@micking thanks for this.  Do you think a note about this change should be added to the docs?  If so, would you be willing to create a pull request for that?  (to https://github.com/mapserver/docs)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5516,2017-11-10T14:09:48Z,2017-11-13T21:04:47Z,2017-11-16T00:02:42Z,MERGED,True,20,0,1,https://github.com/micking,enable default value for variable substitution in map's WEB section,1,[],https://github.com/mapserver/mapserver/pull/5516,https://github.com/micking,3,https://github.com/MapServer/MapServer/pull/5516#issuecomment-344061405,"Added the option to set a default value for variable substitution in the map's WEB section. To do that there is a new method applyHashTableDefaultSubstitutions that is being called in msApplyDefaultSubstitutions with the map's WEB section as the hash table to work on
Prior to this a 'default_' was ignored in the map's WEB section","Hi Jeff,
Good suggestion, I'll create a note in the docs
Tx
Martin
…
Sent from my mobile device



Von: Jeff McKenna
Gesendet: Montag, 13. November, 22:07
Betreff: Re: [mapserver/mapserver] enable default value for variable substitution in map's WEB section (#5516)
An: mapserver/mapserver
Cc: Martin Icking, Mention


@micking<https://github.com/micking> thanks for this. Do you think a note about this change should be added to the docs? If so, would you be willing to create a pull request for that? (to https<https://github.com/mapserver/docs>://<https://github.com/mapserver/docs>github.com<https://github.com/mapserver/docs>/<https://github.com/mapserver/docs>mapserver<https://github.com/mapserver/docs>/<https://github.com/mapserver/docs>docs<https://github.com/mapserver/docs>)
—
You are receiving this because you were mentioned.
Reply to this email directly, view<#5516 (comment)> it <#5516 (comment)> on<#5516 (comment)> <#5516 (comment)> GitHub<#5516 (comment)>, or mute <https://github.com/notifications/unsubscribe-auth/AFPaxOQokwaY8chDas8808v_3TD41ypPks5s2K-EgaJpZM4QZmyo> the<https://github.com/notifications/unsubscribe-auth/AFPaxOQokwaY8chDas8808v_3TD41ypPks5s2K-EgaJpZM4QZmyo> <https://github.com/notifications/unsubscribe-auth/AFPaxOQokwaY8chDas8808v_3TD41ypPks5s2K-EgaJpZM4QZmyo> thread<https://github.com/notifications/unsubscribe-auth/AFPaxOQokwaY8chDas8808v_3TD41ypPks5s2K-EgaJpZM4QZmyo>.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5517,2017-11-10T16:28:39Z,2017-11-13T21:01:46Z,2017-11-16T00:04:07Z,MERGED,True,3,14,2,https://github.com/micking,Proper escaping of Oracle sortby parameters - Enhancement for pull request #5454,1,[],https://github.com/mapserver/mapserver/pull/5517,https://github.com/micking,1,https://github.com/MapServer/MapServer/pull/5517,"This is to clean up some stuff from pull request #5454 - see newest comments there
commented out vtable entries for msOracleSpatialEscapePropertyName.
By that we don't need the additional logic described below anymore
Revert ""Enclose the sortby property in double quotes by putting the result of  msLayerEscapePropertyName into double quotes""
This reverts commit d5f89a3.","This is to clean up some stuff from pull request #5454 - see newest comments there
commented out vtable entries for msOracleSpatialEscapePropertyName.
By that we don't need the additional logic described below anymore
Revert ""Enclose the sortby property in double quotes by putting the result of  msLayerEscapePropertyName into double quotes""
This reverts commit d5f89a3.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5520,2017-11-14T11:48:08Z,2021-01-20T22:52:36Z,2021-01-20T22:52:36Z,CLOSED,False,5,5,1,https://github.com/bjoernboldt,Fix bug in msQueryByFilter,1,[],https://github.com/mapserver/mapserver/pull/5520,https://github.com/bjoernboldt,1,https://github.com/MapServer/MapServer/pull/5520,"Mapserver crashes when an error occurs in msQueryByFilter (e.g. value of filteritem is not a column name in a shape file).
We need to restore filter and filteritem at exit if we changed them and only then. In v6.4 mapserver crashes if the layer can not be opened (line 739).","Mapserver crashes when an error occurs in msQueryByFilter (e.g. value of filteritem is not a column name in a shape file).
We need to restore filter and filteritem at exit if we changed them and only then. In v6.4 mapserver crashes if the layer can not be opened (line 739).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5520,2017-11-14T11:48:08Z,2021-01-20T22:52:36Z,2021-01-20T22:52:36Z,CLOSED,False,5,5,1,https://github.com/bjoernboldt,Fix bug in msQueryByFilter,1,[],https://github.com/mapserver/mapserver/pull/5520,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5520#issuecomment-344237545,"Mapserver crashes when an error occurs in msQueryByFilter (e.g. value of filteritem is not a column name in a shape file).
We need to restore filter and filteritem at exit if we changed them and only then. In v6.4 mapserver crashes if the layer can not be opened (line 739).",Wondering if https://github.com/bjoernboldt/mapserver/blob/58342ff2041f4d21f10fdb02736226ecd4ac9753/mapquery.c#L851 will not result in double-free,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5520,2017-11-14T11:48:08Z,2021-01-20T22:52:36Z,2021-01-20T22:52:36Z,CLOSED,False,5,5,1,https://github.com/bjoernboldt,Fix bug in msQueryByFilter,1,[],https://github.com/mapserver/mapserver/pull/5520,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/5520#issuecomment-344648771,"Mapserver crashes when an error occurs in msQueryByFilter (e.g. value of filteritem is not a column name in a shape file).
We need to restore filter and filteritem at exit if we changed them and only then. In v6.4 mapserver crashes if the layer can not be opened (line 739).","Need more advice to proceed with this merge, as I am planning on tagging the 7.0.7 release momentarily...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5520,2017-11-14T11:48:08Z,2021-01-20T22:52:36Z,2021-01-20T22:52:36Z,CLOSED,False,5,5,1,https://github.com/bjoernboldt,Fix bug in msQueryByFilter,1,[],https://github.com/mapserver/mapserver/pull/5520,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/5520#issuecomment-344650846,"Mapserver crashes when an error occurs in msQueryByFilter (e.g. value of filteritem is not a column name in a shape file).
We need to restore filter and filteritem at exit if we changed them and only then. In v6.4 mapserver crashes if the layer can not be opened (line 739).","Need more advice to proceed with this merge

I'd suggest not to merge it in the current state. Needs some refinement.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5520,2017-11-14T11:48:08Z,2021-01-20T22:52:36Z,2021-01-20T22:52:36Z,CLOSED,False,5,5,1,https://github.com/bjoernboldt,Fix bug in msQueryByFilter,1,[],https://github.com/mapserver/mapserver/pull/5520,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/5520#issuecomment-344657793,"Mapserver crashes when an error occurs in msQueryByFilter (e.g. value of filteritem is not a column name in a shape file).
We need to restore filter and filteritem at exit if we changed them and only then. In v6.4 mapserver crashes if the layer can not be opened (line 739).","ok thanks @bjoernboldt for this, and feedback from @rouault ..merging now..",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5520,2017-11-14T11:48:08Z,2021-01-20T22:52:36Z,2021-01-20T22:52:36Z,CLOSED,False,5,5,1,https://github.com/bjoernboldt,Fix bug in msQueryByFilter,1,[],https://github.com/mapserver/mapserver/pull/5520,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/5520#issuecomment-344657905,"Mapserver crashes when an error occurs in msQueryByFilter (e.g. value of filteritem is not a column name in a shape file).
We need to restore filter and filteritem at exit if we changed them and only then. In v6.4 mapserver crashes if the layer can not be opened (line 739).",oh i misread!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5520,2017-11-14T11:48:08Z,2021-01-20T22:52:36Z,2021-01-20T22:52:36Z,CLOSED,False,5,5,1,https://github.com/bjoernboldt,Fix bug in msQueryByFilter,1,[],https://github.com/mapserver/mapserver/pull/5520,https://github.com/jmckenna,7,https://github.com/MapServer/MapServer/pull/5520#issuecomment-344657954,"Mapserver crashes when an error occurs in msQueryByFilter (e.g. value of filteritem is not a column name in a shape file).
We need to restore filter and filteritem at exit if we changed them and only then. In v6.4 mapserver crashes if the layer can not be opened (line 739).",will hold off for now..,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5520,2017-11-14T11:48:08Z,2021-01-20T22:52:36Z,2021-01-20T22:52:36Z,CLOSED,False,5,5,1,https://github.com/bjoernboldt,Fix bug in msQueryByFilter,1,[],https://github.com/mapserver/mapserver/pull/5520,https://github.com/bjoernboldt,8,https://github.com/MapServer/MapServer/pull/5520#issuecomment-345449609,"Mapserver crashes when an error occurs in msQueryByFilter (e.g. value of filteritem is not a column name in a shape file).
We need to restore filter and filteritem at exit if we changed them and only then. In v6.4 mapserver crashes if the layer can not be opened (line 739).","@rouault is right, so what now? Who can fix this?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5520,2017-11-14T11:48:08Z,2021-01-20T22:52:36Z,2021-01-20T22:52:36Z,CLOSED,False,5,5,1,https://github.com/bjoernboldt,Fix bug in msQueryByFilter,1,[],https://github.com/mapserver/mapserver/pull/5520,https://github.com/rouault,9,https://github.com/MapServer/MapServer/pull/5520#issuecomment-345452014,"Mapserver crashes when an error occurs in msQueryByFilter (e.g. value of filteritem is not a column name in a shape file).
We need to restore filter and filteritem at exit if we changed them and only then. In v6.4 mapserver crashes if the layer can not be opened (line 739).","@rouault is right, so what now? Who can fix this?

You ;-) You can push an additional commit in your branch (or better git commit -a --amend your previous commit with that fix, and git push --force)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5520,2017-11-14T11:48:08Z,2021-01-20T22:52:36Z,2021-01-20T22:52:36Z,CLOSED,False,5,5,1,https://github.com/bjoernboldt,Fix bug in msQueryByFilter,1,[],https://github.com/mapserver/mapserver/pull/5520,https://github.com/sdlime,10,https://github.com/MapServer/MapServer/pull/5520#issuecomment-374608594,"Mapserver crashes when an error occurs in msQueryByFilter (e.g. value of filteritem is not a column name in a shape file).
We need to restore filter and filteritem at exit if we changed them and only then. In v6.4 mapserver crashes if the layer can not be opened (line 739).","@bjoernboldt, @jmckenna, @rouault - is this ready? --Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5520,2017-11-14T11:48:08Z,2021-01-20T22:52:36Z,2021-01-20T22:52:36Z,CLOSED,False,5,5,1,https://github.com/bjoernboldt,Fix bug in msQueryByFilter,1,[],https://github.com/mapserver/mapserver/pull/5520,https://github.com/jmckenna,11,https://github.com/MapServer/MapServer/pull/5520#issuecomment-587147414,"Mapserver crashes when an error occurs in msQueryByFilter (e.g. value of filteritem is not a column name in a shape file).
We need to restore filter and filteritem at exit if we changed them and only then. In v6.4 mapserver crashes if the layer can not be opened (line 739).",@bjoernboldt  can you re-do this pull request against master?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5520,2017-11-14T11:48:08Z,2021-01-20T22:52:36Z,2021-01-20T22:52:36Z,CLOSED,False,5,5,1,https://github.com/bjoernboldt,Fix bug in msQueryByFilter,1,[],https://github.com/mapserver/mapserver/pull/5520,https://github.com/jmckenna,12,https://github.com/MapServer/MapServer/pull/5520#issuecomment-676570043,"Mapserver crashes when an error occurs in msQueryByFilter (e.g. value of filteritem is not a column name in a shape file).
We need to restore filter and filteritem at exit if we changed them and only then. In v6.4 mapserver crashes if the layer can not be opened (line 739).",@bjoernboldt can you rebase this against master (instead of mapserver:branch-7-0) ?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5520,2017-11-14T11:48:08Z,2021-01-20T22:52:36Z,2021-01-20T22:52:36Z,CLOSED,False,5,5,1,https://github.com/bjoernboldt,Fix bug in msQueryByFilter,1,[],https://github.com/mapserver/mapserver/pull/5520,https://github.com/rouault,13,https://github.com/MapServer/MapServer/pull/5520#issuecomment-764005525,"Mapserver crashes when an error occurs in msQueryByFilter (e.g. value of filteritem is not a column name in a shape file).
We need to restore filter and filteritem at exit if we changed them and only then. In v6.4 mapserver crashes if the layer can not be opened (line 739).",Superseded per #6212,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5523,2017-11-21T14:01:30Z,2017-11-30T16:35:02Z,2017-11-30T16:35:02Z,MERGED,True,55,19,17,https://github.com/rouault,WCS 2.0: special processing for wcs_rangeset_axes=bands,2,[],https://github.com/mapserver/mapserver/pull/5523,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5523,"WCS 2.0 has a special compatibility mode where it can use WCS 1.1 metadata
items. Unfortunately, it does a wrong assumption on how wcs_rangeset_axes works
in WCS 1.0/1.1. The implementation of it is probably not completely right in
WCS 1.0/1.1, but at least a special case that works is when 'bands' is assigned
to wcs_rangeset_axes. So make WCS 2.0 code handle wcs_rangeset_axes=bands
as the special case handled by msWCSSetDefaultBandsRangeSetInfo()
in https://github.com/mapserver/mapserver/blob/branch-7-0/mapwcs.c#L281
Modify wcs_multi.map to use wcs_rangeset_axes=bands. This will also make the
wcs_10_getcov_bands_name_new request to properly return 3 bands. So band
subsetting works in both in WCS 1.0 and 2.0 with the same mapfile.
The ""New band related metadata entries"" paragraph of
http://mapserver.org/ogc/wcs_server.html
should probably be revised to remove reference to the WCS 1.1 compatibility
mode.","WCS 2.0 has a special compatibility mode where it can use WCS 1.1 metadata
items. Unfortunately, it does a wrong assumption on how wcs_rangeset_axes works
in WCS 1.0/1.1. The implementation of it is probably not completely right in
WCS 1.0/1.1, but at least a special case that works is when 'bands' is assigned
to wcs_rangeset_axes. So make WCS 2.0 code handle wcs_rangeset_axes=bands
as the special case handled by msWCSSetDefaultBandsRangeSetInfo()
in https://github.com/mapserver/mapserver/blob/branch-7-0/mapwcs.c#L281
Modify wcs_multi.map to use wcs_rangeset_axes=bands. This will also make the
wcs_10_getcov_bands_name_new request to properly return 3 bands. So band
subsetting works in both in WCS 1.0 and 2.0 with the same mapfile.
The ""New band related metadata entries"" paragraph of
http://mapserver.org/ogc/wcs_server.html
should probably be revised to remove reference to the WCS 1.1 compatibility
mode.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5527,2017-11-30T13:37:27Z,2017-11-30T13:48:48Z,2017-11-30T13:48:56Z,MERGED,True,6,6,2,https://github.com/gberaudo,Fix typos,4,[],https://github.com/mapserver/mapserver/pull/5527,https://github.com/gberaudo,1,https://github.com/MapServer/MapServer/pull/5527,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5527,2017-11-30T13:37:27Z,2017-11-30T13:48:48Z,2017-11-30T13:48:56Z,MERGED,True,6,6,2,https://github.com/gberaudo,Fix typos,4,[],https://github.com/mapserver/mapserver/pull/5527,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5527#issuecomment-348192766,,thank you @gberaudo,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5528,2017-11-30T13:41:58Z,2018-10-19T15:39:58Z,2018-10-19T15:39:58Z,CLOSED,False,5,2,1,https://github.com/gberaudo,Fix \ handling in WMS propIsLike filter,1,[],https://github.com/mapserver/mapserver/pull/5528,https://github.com/gberaudo,1,https://github.com/MapServer/MapServer/pull/5528,"It looks like the code was missing escaping of \.
Here is an untested fix.","It looks like the code was missing escaping of \.
Here is an untested fix.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5528,2017-11-30T13:41:58Z,2018-10-19T15:39:58Z,2018-10-19T15:39:58Z,CLOSED,False,5,2,1,https://github.com/gberaudo,Fix \ handling in WMS propIsLike filter,1,[],https://github.com/mapserver/mapserver/pull/5528,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5528#issuecomment-348195664,"It looks like the code was missing escaping of \.
Here is an untested fix.","I would prefer that you test it...
And if possible add a test around https://github.com/mapserver/mapserver/blob/branch-7-0/msautotest/wxs/wfs_filter.map#L53",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5528,2017-11-30T13:41:58Z,2018-10-19T15:39:58Z,2018-10-19T15:39:58Z,CLOSED,False,5,2,1,https://github.com/gberaudo,Fix \ handling in WMS propIsLike filter,1,[],https://github.com/mapserver/mapserver/pull/5528,https://github.com/gberaudo,3,https://github.com/MapServer/MapServer/pull/5528#issuecomment-348218374,"It looks like the code was missing escaping of \.
Here is an untested fix.","Thanks @rouault for the quick reply and the pointer to the test file.
I checked the msautotest/wxs/data/popplace.dbf db file for an entry containing the \ character but could not find any. How am I supposed to add a test?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5528,2017-11-30T13:41:58Z,2018-10-19T15:39:58Z,2018-10-19T15:39:58Z,CLOSED,False,5,2,1,https://github.com/gberaudo,Fix \ handling in WMS propIsLike filter,1,[],https://github.com/mapserver/mapserver/pull/5528,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/5528#issuecomment-348222377,"It looks like the code was missing escaping of \.
Here is an untested fix.","I checked the msautotest/wxs/data/popplace.dbf db file for an entry containing the \ character but could not find any. How am I supposed to add a test?

I somewhat suspected that. You could modify an existing value of popplace.dbf to add a \ character in it (and likely have to change a number of existing test results to accommodate for that change). Or you create a new mapfile with a new data file. CSV files can be convenient for that with a syntax like
somecolum,anothercolumn,WKT
somevalue,anothervalue,""POINT(2 49)""",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5528,2017-11-30T13:41:58Z,2018-10-19T15:39:58Z,2018-10-19T15:39:58Z,CLOSED,False,5,2,1,https://github.com/gberaudo,Fix \ handling in WMS propIsLike filter,1,[],https://github.com/mapserver/mapserver/pull/5528,https://github.com/gberaudo,5,https://github.com/MapServer/MapServer/pull/5528#issuecomment-348230985,"It looks like the code was missing escaping of \.
Here is an untested fix.","Thanks for the tips.
I actually was able to binarily edit the dbf file using hexcurse and it still looked valid. !!
However I have not yet built mapserver and it does not look straightforward: tried on a redhat machine, immediately got errors like
/usr/bin/cc  --coverage -DCHECK_FUNCTION_EXISTS=strlcpy    CMakeFiles/cmTryCompileExec3625615537.dir/CheckFunctionExists.c.o  -o cmTryCompileExec3625615537 -rdynamic -lm 
CMakeFiles/cmTryCompileExec3625615537.dir/CheckFunctionExists.c.o: dans la fonction « main »:
CheckFunctionExists.c:(.text+0x27): référence indéfinie vers « strlcpy »
collect2: erreur: ld a retourné 1 code d'état d'exécution

I doubt I will be able to invest more time on this at the moment.
Please consider this PR as a well documented issue.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5530,2017-12-04T18:31:33Z,2017-12-05T09:21:39Z,2017-12-05T09:21:40Z,MERGED,True,392,6,11,https://github.com/rouault,WCS: support providing creation options that are layer specific,1,[],https://github.com/mapserver/mapserver/pull/5530,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5530,"If a Mapfile defines a GEOTIFF outputformat that is enabled in a WCS
layer, then it is possible to define a per-layer value for a creation option,
with a syntax like:
""wcs_outputformat_GEOTIFF_creationoption_COMPRESS"" ""LZW""

to say that for 'GEOTIFF' output format, then COMPRESS=LZW should be passed to
the GDAL GTiff driver.
For GDAL 2.3.0 and the GRIB driver that supports band-specific creation options,
it is possible to define such band-specific creation options with for example
   ""wcs_outputformat_GRIB_creationoption_BAND_1_IDS"" ""CENTER=54(Montreal) SUBCENTER=0 MASTER_TABLE=4 LOCAL_TABLE=0 SIGNF_REF_TIME=1(Start_of_Forecast) REF_TIME=2017-01-05T00:00:00Z PROD_STATUS=0(Operational) TYPE=2(Analysis_and_forecast)""

In case of band selection, the code will automatically renumber the band number.","If a Mapfile defines a GEOTIFF outputformat that is enabled in a WCS
layer, then it is possible to define a per-layer value for a creation option,
with a syntax like:
""wcs_outputformat_GEOTIFF_creationoption_COMPRESS"" ""LZW""

to say that for 'GEOTIFF' output format, then COMPRESS=LZW should be passed to
the GDAL GTiff driver.
For GDAL 2.3.0 and the GRIB driver that supports band-specific creation options,
it is possible to define such band-specific creation options with for example
   ""wcs_outputformat_GRIB_creationoption_BAND_1_IDS"" ""CENTER=54(Montreal) SUBCENTER=0 MASTER_TABLE=4 LOCAL_TABLE=0 SIGNF_REF_TIME=1(Start_of_Forecast) REF_TIME=2017-01-05T00:00:00Z PROD_STATUS=0(Operational) TYPE=2(Analysis_and_forecast)""

In case of band selection, the code will automatically renumber the band number.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5530,2017-12-04T18:31:33Z,2017-12-05T09:21:39Z,2017-12-05T09:21:40Z,MERGED,True,392,6,11,https://github.com/rouault,WCS: support providing creation options that are layer specific,1,[],https://github.com/mapserver/mapserver/pull/5530,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5530#issuecomment-349063829,"If a Mapfile defines a GEOTIFF outputformat that is enabled in a WCS
layer, then it is possible to define a per-layer value for a creation option,
with a syntax like:
""wcs_outputformat_GEOTIFF_creationoption_COMPRESS"" ""LZW""

to say that for 'GEOTIFF' output format, then COMPRESS=LZW should be passed to
the GDAL GTiff driver.
For GDAL 2.3.0 and the GRIB driver that supports band-specific creation options,
it is possible to define such band-specific creation options with for example
   ""wcs_outputformat_GRIB_creationoption_BAND_1_IDS"" ""CENTER=54(Montreal) SUBCENTER=0 MASTER_TABLE=4 LOCAL_TABLE=0 SIGNF_REF_TIME=1(Start_of_Forecast) REF_TIME=2017-01-05T00:00:00Z PROD_STATUS=0(Operational) TYPE=2(Analysis_and_forecast)""

In case of band selection, the code will automatically renumber the band number.",@tomkralidis  This will probably interest you. Relevant extract from tests: 6b5ed6e#diff-8039fc179b561eb19af1e40dfa5f1f87R103,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5530,2017-12-04T18:31:33Z,2017-12-05T09:21:39Z,2017-12-05T09:21:40Z,MERGED,True,392,6,11,https://github.com/rouault,WCS: support providing creation options that are layer specific,1,[],https://github.com/mapserver/mapserver/pull/5530,https://github.com/jratike80,3,https://github.com/MapServer/MapServer/pull/5530#issuecomment-349101435,"If a Mapfile defines a GEOTIFF outputformat that is enabled in a WCS
layer, then it is possible to define a per-layer value for a creation option,
with a syntax like:
""wcs_outputformat_GEOTIFF_creationoption_COMPRESS"" ""LZW""

to say that for 'GEOTIFF' output format, then COMPRESS=LZW should be passed to
the GDAL GTiff driver.
For GDAL 2.3.0 and the GRIB driver that supports band-specific creation options,
it is possible to define such band-specific creation options with for example
   ""wcs_outputformat_GRIB_creationoption_BAND_1_IDS"" ""CENTER=54(Montreal) SUBCENTER=0 MASTER_TABLE=4 LOCAL_TABLE=0 SIGNF_REF_TIME=1(Start_of_Forecast) REF_TIME=2017-01-05T00:00:00Z PROD_STATUS=0(Operational) TYPE=2(Analysis_and_forecast)""

In case of band selection, the code will automatically renumber the band number.","Are those creation options documented somewhere? I know that for GeoTIFF the options which come with GeoTIFF Coverage Encoding Profile are documented in http://www.mapserver.org/ogc/wcs_server.html but I haven't seen ""wcs_outputformat_GEOTIFF_creationoption_COMPRESS"" ""LZW"" before.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5530,2017-12-04T18:31:33Z,2017-12-05T09:21:39Z,2017-12-05T09:21:40Z,MERGED,True,392,6,11,https://github.com/rouault,WCS: support providing creation options that are layer specific,1,[],https://github.com/mapserver/mapserver/pull/5530,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/5530#issuecomment-349108780,"If a Mapfile defines a GEOTIFF outputformat that is enabled in a WCS
layer, then it is possible to define a per-layer value for a creation option,
with a syntax like:
""wcs_outputformat_GEOTIFF_creationoption_COMPRESS"" ""LZW""

to say that for 'GEOTIFF' output format, then COMPRESS=LZW should be passed to
the GDAL GTiff driver.
For GDAL 2.3.0 and the GRIB driver that supports band-specific creation options,
it is possible to define such band-specific creation options with for example
   ""wcs_outputformat_GRIB_creationoption_BAND_1_IDS"" ""CENTER=54(Montreal) SUBCENTER=0 MASTER_TABLE=4 LOCAL_TABLE=0 SIGNF_REF_TIME=1(Start_of_Forecast) REF_TIME=2017-01-05T00:00:00Z PROD_STATUS=0(Operational) TYPE=2(Analysis_and_forecast)""

In case of band selection, the code will automatically renumber the band number.","Are those creation options documented somewhere?

Documentation is my next task. Those creation options are for the MapServer service administrator only (contrary to the GeoTIFF Coverage Encoding Profile). This is an extension of the OUTPUTFORMAT.FORMATOPTION, but at the layer level (so as to be able to provide appropriate values for the various metadata needed by the GRIB driver)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5533,2017-12-20T13:49:08Z,2017-12-21T22:47:39Z,2017-12-22T12:33:42Z,MERGED,True,280,0,12,https://github.com/yjacolin,Enable WMS Layers group with GetMap request,6,[],https://github.com/mapserver/mapserver/pull/5533,https://github.com/yjacolin,1,https://github.com/MapServer/MapServer/pull/5533,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5533,2017-12-20T13:49:08Z,2017-12-21T22:47:39Z,2017-12-22T12:33:42Z,MERGED,True,280,0,12,https://github.com/yjacolin,Enable WMS Layers group with GetMap request,6,[],https://github.com/mapserver/mapserver/pull/5533,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5533#issuecomment-353071616,,"Tests are failing: https://travis-ci.org/mapserver/mapserver/jobs/319179614 . Expected results should likely be updated, but I'm somewhat concerned about expected/ows_wms_rootlayer_name_empty_capabilities.xml and expected/ows_wms_rootlayer_name_capabilities.xml having now a  element, which seems to go a bit against the purpose of  478e475 (#5404). This doesn't really revert #5404 since the root layer name has no , but this will make more layers queriable, what #5404 tried to limit. @tomkralidis opinion welcome",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5533,2017-12-20T13:49:08Z,2017-12-21T22:47:39Z,2017-12-22T12:33:42Z,MERGED,True,280,0,12,https://github.com/yjacolin,Enable WMS Layers group with GetMap request,6,[],https://github.com/mapserver/mapserver/pull/5533,https://github.com/jratike80,3,https://github.com/MapServer/MapServer/pull/5533#issuecomment-353074840,,"I am not sure if I read the output right, but isn't the layer group still unqueryable? Because layer-road2 is queryable then also layer-roadgroup should be queryable and look like
  <Layer queryable=""1"">
      <Name>roadgroup</Name>


By looking at the output from the failing test it seems that just Name has been added.
 wxs => ows_wms_rootlayer_name_capabilities.xml
######################################
--- ../expected/ows_wms_rootlayer_name_capabilities.xml	2017-12-20 13:50:19.049361998 +0000
+++ ows_wms_rootlayer_name_capabilities.xml	2017-12-20 13:54:35.021361998 +0000
@@ -74,6 +74,7 @@
     <BoundingBox CRS=""EPSG:4326""
                 minx=""-1"" miny=""-1"" maxx=""-1"" maxy=""-1"" />
     <Layer>
+      <Name>roadgroup</Name>
       <Title>roadgroup</Title>
       <Layer queryable=""1"" opaque=""0"" cascaded=""0"">
         <Name>road2</Name>",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5533,2017-12-20T13:49:08Z,2017-12-21T22:47:39Z,2017-12-22T12:33:42Z,MERGED,True,280,0,12,https://github.com/yjacolin,Enable WMS Layers group with GetMap request,6,[],https://github.com/mapserver/mapserver/pull/5533,https://github.com/yjacolin,4,https://github.com/MapServer/MapServer/pull/5533#issuecomment-353075428,,ah I just see your comment and already pushed some changes.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5533,2017-12-20T13:49:08Z,2017-12-21T22:47:39Z,2017-12-22T12:33:42Z,MERGED,True,280,0,12,https://github.com/yjacolin,Enable WMS Layers group with GetMap request,6,[],https://github.com/mapserver/mapserver/pull/5533,https://github.com/yjacolin,5,https://github.com/MapServer/MapServer/pull/5533#issuecomment-353075971,,Does #5404 is about root element? if so this is still the case: https://github.com/yjacolin/mapserver/blob/508c4eb0289b27dbcb9fdcfbd3e681df22b93044/msautotest/wxs/expected/ows_wms_rootlayer_name_empty_capabilities.xml#L62-L77,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5533,2017-12-20T13:49:08Z,2017-12-21T22:47:39Z,2017-12-22T12:33:42Z,MERGED,True,280,0,12,https://github.com/yjacolin,Enable WMS Layers group with GetMap request,6,[],https://github.com/mapserver/mapserver/pull/5533,https://github.com/jratike80,6,https://github.com/MapServer/MapServer/pull/5533#issuecomment-353079029,,"Seems good to me, root layer has title but no name which means that it is just a category title. From WMS 1.1.1 standard:

If, and only if, a layer has a Name, then it is a map layer that can be requested by using
that Name in the LAYERS parameter of a GetMap request. If the layer has a Title but no
Name, then that layer is only a category title for all the layers nested within. A Map
Server that advertises a Layer containing a Name element shall be able to accept that
Name as the value of LAYERS argument in a GetMap request and return the
corresponding map. A Client shall not attempt to request a layer that has a Title but no
Name.
A server shall throw an exception (code=""LayerNotDefined"") if an invalid layer is
requested.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5533,2017-12-20T13:49:08Z,2017-12-21T22:47:39Z,2017-12-22T12:33:42Z,MERGED,True,280,0,12,https://github.com/yjacolin,Enable WMS Layers group with GetMap request,6,[],https://github.com/mapserver/mapserver/pull/5533,https://github.com/yjacolin,7,https://github.com/MapServer/MapServer/pull/5533#issuecomment-353085305,,yes! Test passed!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5533,2017-12-20T13:49:08Z,2017-12-21T22:47:39Z,2017-12-22T12:33:42Z,MERGED,True,280,0,12,https://github.com/yjacolin,Enable WMS Layers group with GetMap request,6,[],https://github.com/mapserver/mapserver/pull/5533,https://github.com/jratike80,8,https://github.com/MapServer/MapServer/pull/5533#issuecomment-353087916,,"Fine that the tests passed. Can you confirm that the group layer now has the queryable=""1"" attribute? Or are we perhaps speaking about different things, you about making the group requestable for GetMap and I about making it queryable for GetFeatureInfo?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5533,2017-12-20T13:49:08Z,2017-12-21T22:47:39Z,2017-12-22T12:33:42Z,MERGED,True,280,0,12,https://github.com/yjacolin,Enable WMS Layers group with GetMap request,6,[],https://github.com/mapserver/mapserver/pull/5533,https://github.com/yjacolin,9,https://github.com/MapServer/MapServer/pull/5533#issuecomment-353088939,,"yes, this is two different things. We wanted a way to send a GetMap request for a group of layers with more than 1 level (more than 1 subdirectory).
I will see if we can do more but I don't think so.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5533,2017-12-20T13:49:08Z,2017-12-21T22:47:39Z,2017-12-22T12:33:42Z,MERGED,True,280,0,12,https://github.com/yjacolin,Enable WMS Layers group with GetMap request,6,[],https://github.com/mapserver/mapserver/pull/5533,https://github.com/jratike80,10,https://github.com/MapServer/MapServer/pull/5533#issuecomment-353095261,,"The name of the ticket really made be think that ""queryable"" is dealing with GetFeatureInfo.
I have thought that there is an open ticket about group layers which appear always non-queryable in GetCapabilities but I could not find such. QGIS for example does not activate the query tool for any group layers now.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5533,2017-12-20T13:49:08Z,2017-12-21T22:47:39Z,2017-12-22T12:33:42Z,MERGED,True,280,0,12,https://github.com/yjacolin,Enable WMS Layers group with GetMap request,6,[],https://github.com/mapserver/mapserver/pull/5533,https://github.com/rouault,11,https://github.com/MapServer/MapServer/pull/5533#issuecomment-353096103,,"I have thought that there is an open ticket about group layers which appear always non-queryable in GetCapabilities but I could not find such

Must be #5220",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5534,2017-12-20T15:26:04Z,2020-05-04T18:48:35Z,2020-05-04T18:48:35Z,CLOSED,False,24,4,1,https://github.com/umeier,Throw exception if wms layer is essential,2,[],https://github.com/mapserver/mapserver/pull/5534,https://github.com/umeier,1,https://github.com/MapServer/MapServer/pull/5534,"Normally, when a layer request to another WMS server fails, this layer is skipped and the map is rendered without this layer. This behaviour is absolutely OK in most cases, but sometimes it could be necessary that the complete map fails if the requested layer is essential for this map.
This patch looks whether ""wms_essential"" is set. If not, MapServer behaves like before, otherwise an exception is thrown.","Normally, when a layer request to another WMS server fails, this layer is skipped and the map is rendered without this layer. This behaviour is absolutely OK in most cases, but sometimes it could be necessary that the complete map fails if the requested layer is essential for this map.
This patch looks whether ""wms_essential"" is set. If not, MapServer behaves like before, otherwise an exception is thrown.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5534,2017-12-20T15:26:04Z,2020-05-04T18:48:35Z,2020-05-04T18:48:35Z,CLOSED,False,24,4,1,https://github.com/umeier,Throw exception if wms layer is essential,2,[],https://github.com/mapserver/mapserver/pull/5534,https://github.com/yjacolin,2,https://github.com/MapServer/MapServer/pull/5534#issuecomment-353095029,"Normally, when a layer request to another WMS server fails, this layer is skipped and the map is rendered without this layer. This behaviour is absolutely OK in most cases, but sometimes it could be necessary that the complete map fails if the requested layer is essential for this map.
This patch looks whether ""wms_essential"" is set. If not, MapServer behaves like before, otherwise an exception is thrown.",did you plan to document this? :),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5534,2017-12-20T15:26:04Z,2020-05-04T18:48:35Z,2020-05-04T18:48:35Z,CLOSED,False,24,4,1,https://github.com/umeier,Throw exception if wms layer is essential,2,[],https://github.com/mapserver/mapserver/pull/5534,https://github.com/umeier,3,https://github.com/MapServer/MapServer/pull/5534#issuecomment-353095779,"Normally, when a layer request to another WMS server fails, this layer is skipped and the map is rendered without this layer. This behaviour is absolutely OK in most cases, but sometimes it could be necessary that the complete map fails if the requested layer is essential for this map.
This patch looks whether ""wms_essential"" is set. If not, MapServer behaves like before, otherwise an exception is thrown.","Yes, I should document this. Therefore I need to clone the documentation project, right?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5534,2017-12-20T15:26:04Z,2020-05-04T18:48:35Z,2020-05-04T18:48:35Z,CLOSED,False,24,4,1,https://github.com/umeier,Throw exception if wms layer is essential,2,[],https://github.com/mapserver/mapserver/pull/5534,https://github.com/yjacolin,4,https://github.com/MapServer/MapServer/pull/5534#issuecomment-353097895,"Normally, when a layer request to another WMS server fails, this layer is skipped and the map is rendered without this layer. This behaviour is absolutely OK in most cases, but sometimes it could be necessary that the complete map fails if the requested layer is essential for this map.
This patch looks whether ""wms_essential"" is set. If not, MapServer behaves like before, otherwise an exception is thrown.","yes, exaclty the same as mapserver code source :)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5534,2017-12-20T15:26:04Z,2020-05-04T18:48:35Z,2020-05-04T18:48:35Z,CLOSED,False,24,4,1,https://github.com/umeier,Throw exception if wms layer is essential,2,[],https://github.com/mapserver/mapserver/pull/5534,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/5534#issuecomment-407544740,"Normally, when a layer request to another WMS server fails, this layer is skipped and the map is rendered without this layer. This behaviour is absolutely OK in most cases, but sometimes it could be necessary that the complete map fails if the requested layer is essential for this map.
This patch looks whether ""wms_essential"" is set. If not, MapServer behaves like before, otherwise an exception is thrown.",I think this PR should be made against master (not branch-7-0),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5534,2017-12-20T15:26:04Z,2020-05-04T18:48:35Z,2020-05-04T18:48:35Z,CLOSED,False,24,4,1,https://github.com/umeier,Throw exception if wms layer is essential,2,[],https://github.com/mapserver/mapserver/pull/5534,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/5534#issuecomment-408445296,"Normally, when a layer request to another WMS server fails, this layer is skipped and the map is rendered without this layer. This behaviour is absolutely OK in most cases, but sometimes it could be necessary that the complete map fails if the requested layer is essential for this map.
This patch looks whether ""wms_essential"" is set. If not, MapServer behaves like before, otherwise an exception is thrown.",The default / working branch is now branch-7-2,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5534,2017-12-20T15:26:04Z,2020-05-04T18:48:35Z,2020-05-04T18:48:35Z,CLOSED,False,24,4,1,https://github.com/umeier,Throw exception if wms layer is essential,2,[],https://github.com/mapserver/mapserver/pull/5534,https://github.com/jmckenna,7,https://github.com/MapServer/MapServer/pull/5534#issuecomment-562213839,"Normally, when a layer request to another WMS server fails, this layer is skipped and the map is rendered without this layer. This behaviour is absolutely OK in most cases, but sometimes it could be necessary that the complete map fails if the requested layer is essential for this map.
This patch looks whether ""wms_essential"" is set. If not, MapServer behaves like before, otherwise an exception is thrown.",@umeier can you re-do this pull request against master?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5534,2017-12-20T15:26:04Z,2020-05-04T18:48:35Z,2020-05-04T18:48:35Z,CLOSED,False,24,4,1,https://github.com/umeier,Throw exception if wms layer is essential,2,[],https://github.com/mapserver/mapserver/pull/5534,https://github.com/jmckenna,8,https://github.com/MapServer/MapServer/pull/5534#issuecomment-565008439,"Normally, when a layer request to another WMS server fails, this layer is skipped and the map is rendered without this layer. This behaviour is absolutely OK in most cases, but sometimes it could be necessary that the complete map fails if the requested layer is essential for this map.
This patch looks whether ""wms_essential"" is set. If not, MapServer behaves like before, otherwise an exception is thrown.",@umeier bump,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5534,2017-12-20T15:26:04Z,2020-05-04T18:48:35Z,2020-05-04T18:48:35Z,CLOSED,False,24,4,1,https://github.com/umeier,Throw exception if wms layer is essential,2,[],https://github.com/mapserver/mapserver/pull/5534,https://github.com/jmckenna,9,https://github.com/MapServer/MapServer/pull/5534#issuecomment-587146875,"Normally, when a layer request to another WMS server fails, this layer is skipped and the map is rendered without this layer. This behaviour is absolutely OK in most cases, but sometimes it could be necessary that the complete map fails if the requested layer is essential for this map.
This patch looks whether ""wms_essential"" is set. If not, MapServer behaves like before, otherwise an exception is thrown.",@umeier can you re-do this pull request against master?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5534,2017-12-20T15:26:04Z,2020-05-04T18:48:35Z,2020-05-04T18:48:35Z,CLOSED,False,24,4,1,https://github.com/umeier,Throw exception if wms layer is essential,2,[],https://github.com/mapserver/mapserver/pull/5534,https://github.com/jmckenna,10,https://github.com/MapServer/MapServer/pull/5534#issuecomment-623639538,"Normally, when a layer request to another WMS server fails, this layer is skipped and the map is rendered without this layer. This behaviour is absolutely OK in most cases, but sometimes it could be necessary that the complete map fails if the requested layer is essential for this map.
This patch looks whether ""wms_essential"" is set. If not, MapServer behaves like before, otherwise an exception is thrown.",handled through #6061,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5535,2017-12-20T16:55:38Z,2021-03-05T17:35:14Z,2021-03-05T17:35:14Z,CLOSED,False,7,1,1,https://github.com/qwef,log2vis check if multi-line,1,[],https://github.com/mapserver/mapserver/pull/5535,https://github.com/qwef,1,https://github.com/MapServer/MapServer/pull/5535,"It seems that log2vis is deprecated because it doesn't support multi-line paragraphs. See: https://lists.freedesktop.org/archives/fribidi/2008-January/000515.html
I added a if statement that would throw an error given a multi-line paragraph.","It seems that log2vis is deprecated because it doesn't support multi-line paragraphs. See: https://lists.freedesktop.org/archives/fribidi/2008-January/000515.html
I added a if statement that would throw an error given a multi-line paragraph.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5535,2017-12-20T16:55:38Z,2021-03-05T17:35:14Z,2021-03-05T17:35:14Z,CLOSED,False,7,1,1,https://github.com/qwef,log2vis check if multi-line,1,[],https://github.com/mapserver/mapserver/pull/5535,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5535#issuecomment-587146740,"It seems that log2vis is deprecated because it doesn't support multi-line paragraphs. See: https://lists.freedesktop.org/archives/fribidi/2008-January/000515.html
I added a if statement that would throw an error given a multi-line paragraph.",@qwef can your change this PR to master instead?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5535,2017-12-20T16:55:38Z,2021-03-05T17:35:14Z,2021-03-05T17:35:14Z,CLOSED,False,7,1,1,https://github.com/qwef,log2vis check if multi-line,1,[],https://github.com/mapserver/mapserver/pull/5535,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/5535#issuecomment-676569750,"It seems that log2vis is deprecated because it doesn't support multi-line paragraphs. See: https://lists.freedesktop.org/archives/fribidi/2008-January/000515.html
I added a if statement that would throw an error given a multi-line paragraph.",@qwef can you rebase this against master (instead of mapserver:branch-7-0) ?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5535,2017-12-20T16:55:38Z,2021-03-05T17:35:14Z,2021-03-05T17:35:14Z,CLOSED,False,7,1,1,https://github.com/qwef,log2vis check if multi-line,1,[],https://github.com/mapserver/mapserver/pull/5535,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/5535#issuecomment-791571883,"It seems that log2vis is deprecated because it doesn't support multi-line paragraphs. See: https://lists.freedesktop.org/archives/fribidi/2008-January/000515.html
I added a if statement that would throw an error given a multi-line paragraph.",Superseded per #6246,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5536,2017-12-27T15:18:53Z,2018-01-02T13:38:40Z,2018-01-02T13:38:40Z,MERGED,True,1,4,1,https://github.com/geographika,Remove OFFSET END keyword,1,[],https://github.com/mapserver/mapserver/pull/5536,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5536,Remove END keyword to match documentation - see comments in #5489,Remove END keyword to match documentation - see comments in #5489,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5538,2018-01-07T12:22:03Z,2018-01-07T12:42:15Z,2018-01-07T12:42:26Z,MERGED,True,50,2,2,https://github.com/szekerest," Allow to configure max file handles on Windows,  option to set up a global font cache",2,[],https://github.com/mapserver/mapserver/pull/5538,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5538,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5544,2018-02-08T09:19:40Z,2018-02-08T12:26:11Z,2018-02-08T12:26:11Z,MERGED,True,1,1,1,https://github.com/olt,Fix segfault with polyline labels for empty (multi)linestrings,1,[],https://github.com/mapserver/mapserver/pull/5544,https://github.com/olt,1,https://github.com/MapServer/MapServer/pull/5544,"longest_line_index can point outside pll->ll if shape only contains
lines with <2 points.
This can segfault here: https://github.com/mapserver/mapserver/blob/c6abf4224e6a1429869b9ee7c7a72dd791f74eb3/mapprimitive.c#L1821-L1822
I'm unable to create a minimal mapfile as WKT and POINT features do not support broken MultiLineStrings.
However, msPolylineComputeLineSegments does already expect lines with <2 points.
https://github.com/mapserver/mapserver/blob/c6abf4224e6a1429869b9ee7c7a72dd791f74eb3/mapprimitive.c#L1584","longest_line_index can point outside pll->ll if shape only contains
lines with <2 points.
This can segfault here: https://github.com/mapserver/mapserver/blob/c6abf4224e6a1429869b9ee7c7a72dd791f74eb3/mapprimitive.c#L1821-L1822
I'm unable to create a minimal mapfile as WKT and POINT features do not support broken MultiLineStrings.
However, msPolylineComputeLineSegments does already expect lines with <2 points.
https://github.com/mapserver/mapserver/blob/c6abf4224e6a1429869b9ee7c7a72dd791f74eb3/mapprimitive.c#L1584",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5544,2018-02-08T09:19:40Z,2018-02-08T12:26:11Z,2018-02-08T12:26:11Z,MERGED,True,1,1,1,https://github.com/olt,Fix segfault with polyline labels for empty (multi)linestrings,1,[],https://github.com/mapserver/mapserver/pull/5544,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5544#issuecomment-364056597,"longest_line_index can point outside pll->ll if shape only contains
lines with <2 points.
This can segfault here: https://github.com/mapserver/mapserver/blob/c6abf4224e6a1429869b9ee7c7a72dd791f74eb3/mapprimitive.c#L1821-L1822
I'm unable to create a minimal mapfile as WKT and POINT features do not support broken MultiLineStrings.
However, msPolylineComputeLineSegments does already expect lines with <2 points.
https://github.com/mapserver/mapserver/blob/c6abf4224e6a1429869b9ee7c7a72dd791f74eb3/mapprimitive.c#L1584","I guess this applies to 7.0 branch as well ?  If so, could you base your PR on that branch ? Thanks",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5544,2018-02-08T09:19:40Z,2018-02-08T12:26:11Z,2018-02-08T12:26:11Z,MERGED,True,1,1,1,https://github.com/olt,Fix segfault with polyline labels for empty (multi)linestrings,1,[],https://github.com/mapserver/mapserver/pull/5544,https://github.com/olt,3,https://github.com/MapServer/MapServer/pull/5544#issuecomment-364062388,"longest_line_index can point outside pll->ll if shape only contains
lines with <2 points.
This can segfault here: https://github.com/mapserver/mapserver/blob/c6abf4224e6a1429869b9ee7c7a72dd791f74eb3/mapprimitive.c#L1821-L1822
I'm unable to create a minimal mapfile as WKT and POINT features do not support broken MultiLineStrings.
However, msPolylineComputeLineSegments does already expect lines with <2 points.
https://github.com/mapserver/mapserver/blob/c6abf4224e6a1429869b9ee7c7a72dd791f74eb3/mapprimitive.c#L1584","Ok, had to change the base as well. PR is now based on branch-7-0",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5545,2018-02-09T12:38:47Z,2018-02-27T20:32:34Z,2018-02-28T21:48:51Z,MERGED,True,1,1,1,https://github.com/sebastic,Exclude .java files from jar.,1,[],https://github.com/mapserver/mapserver/pull/5545,https://github.com/sebastic,1,https://github.com/MapServer/MapServer/pull/5545,"The lintian QA tool reported that the mapscript.jar contains source (in addition to the compiled .class) files.
The java files should not be included along with the .class files.","The lintian QA tool reported that the mapscript.jar contains source (in addition to the compiled .class) files.
The java files should not be included along with the .class files.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5547,2018-02-14T16:11:04Z,2018-03-23T10:51:20Z,2018-03-23T10:51:20Z,MERGED,True,392,49,13,https://github.com/ejn,Wms 1.3.0 client,2,['Enhancement'],https://github.com/mapserver/mapserver/pull/5547,https://github.com/ejn,1,https://github.com/MapServer/MapServer/pull/5547,"#3039 has been open for a good few years now, and there's starting to be some WMS services no longer supporting 1.1.*, so here's my stab at extending the WMS Client support to WMS 1.3.0 whilst making minimal changes.
Apart from some changed parameter names (SRS -> CRS), the main difference is the strict axis order in 1.3.0. This patch respects that and should automagically flip axes as appropriate for the EPSG code - if necessary the axis order can be fixed using metadata wms_strict_axis_order (1/true/0/false),
The autotests use the Mapserver demo WMS and (i) check that support for previous versions (1.1.1) is not broken and (ii) the support for 1.3.0 works as expected, including axis swapping.
Still TODO would be documentation changes. There are also possibly one or two edge cases where a slightly poor configuration would likely result in unexpected behaviour or bad requests, but I think that this patch should support almost all sensible use cases.
Although I have submitted this PR against master, I think this should be a candidate for 7.2 - if necessary I can rebase/repush.","#3039 has been open for a good few years now, and there's starting to be some WMS services no longer supporting 1.1.*, so here's my stab at extending the WMS Client support to WMS 1.3.0 whilst making minimal changes.
Apart from some changed parameter names (SRS -> CRS), the main difference is the strict axis order in 1.3.0. This patch respects that and should automagically flip axes as appropriate for the EPSG code - if necessary the axis order can be fixed using metadata wms_strict_axis_order (1/true/0/false),
The autotests use the Mapserver demo WMS and (i) check that support for previous versions (1.1.1) is not broken and (ii) the support for 1.3.0 works as expected, including axis swapping.
Still TODO would be documentation changes. There are also possibly one or two edge cases where a slightly poor configuration would likely result in unexpected behaviour or bad requests, but I think that this patch should support almost all sensible use cases.
Although I have submitted this PR against master, I think this should be a candidate for 7.2 - if necessary I can rebase/repush.",True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5547,2018-02-14T16:11:04Z,2018-03-23T10:51:20Z,2018-03-23T10:51:20Z,MERGED,True,392,49,13,https://github.com/ejn,Wms 1.3.0 client,2,['Enhancement'],https://github.com/mapserver/mapserver/pull/5547,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5547#issuecomment-368990586,"#3039 has been open for a good few years now, and there's starting to be some WMS services no longer supporting 1.1.*, so here's my stab at extending the WMS Client support to WMS 1.3.0 whilst making minimal changes.
Apart from some changed parameter names (SRS -> CRS), the main difference is the strict axis order in 1.3.0. This patch respects that and should automagically flip axes as appropriate for the EPSG code - if necessary the axis order can be fixed using metadata wms_strict_axis_order (1/true/0/false),
The autotests use the Mapserver demo WMS and (i) check that support for previous versions (1.1.1) is not broken and (ii) the support for 1.3.0 works as expected, including axis swapping.
Still TODO would be documentation changes. There are also possibly one or two edge cases where a slightly poor configuration would likely result in unexpected behaviour or bad requests, but I think that this patch should support almost all sensible use cases.
Although I have submitted this PR against master, I think this should be a candidate for 7.2 - if necessary I can rebase/repush.","@dmorissette, @jmckenna, @rouault - could use some review help with this pull request. Looks like a great addition and very complete. Thanks @ejn!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5547,2018-02-14T16:11:04Z,2018-03-23T10:51:20Z,2018-03-23T10:51:20Z,MERGED,True,392,49,13,https://github.com/ejn,Wms 1.3.0 client,2,['Enhancement'],https://github.com/mapserver/mapserver/pull/5547,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/5547#issuecomment-369014960,"#3039 has been open for a good few years now, and there's starting to be some WMS services no longer supporting 1.1.*, so here's my stab at extending the WMS Client support to WMS 1.3.0 whilst making minimal changes.
Apart from some changed parameter names (SRS -> CRS), the main difference is the strict axis order in 1.3.0. This patch respects that and should automagically flip axes as appropriate for the EPSG code - if necessary the axis order can be fixed using metadata wms_strict_axis_order (1/true/0/false),
The autotests use the Mapserver demo WMS and (i) check that support for previous versions (1.1.1) is not broken and (ii) the support for 1.3.0 works as expected, including axis swapping.
Still TODO would be documentation changes. There are also possibly one or two edge cases where a slightly poor configuration would likely result in unexpected behaviour or bad requests, but I think that this patch should support almost all sensible use cases.
Although I have submitted this PR against master, I think this should be a candidate for 7.2 - if necessary I can rebase/repush.",+1 from my review. Well done @ejn,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5547,2018-02-14T16:11:04Z,2018-03-23T10:51:20Z,2018-03-23T10:51:20Z,MERGED,True,392,49,13,https://github.com/ejn,Wms 1.3.0 client,2,['Enhancement'],https://github.com/mapserver/mapserver/pull/5547,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/5547#issuecomment-374604558,"#3039 has been open for a good few years now, and there's starting to be some WMS services no longer supporting 1.1.*, so here's my stab at extending the WMS Client support to WMS 1.3.0 whilst making minimal changes.
Apart from some changed parameter names (SRS -> CRS), the main difference is the strict axis order in 1.3.0. This patch respects that and should automagically flip axes as appropriate for the EPSG code - if necessary the axis order can be fixed using metadata wms_strict_axis_order (1/true/0/false),
The autotests use the Mapserver demo WMS and (i) check that support for previous versions (1.1.1) is not broken and (ii) the support for 1.3.0 works as expected, including axis swapping.
Still TODO would be documentation changes. There are also possibly one or two edge cases where a slightly poor configuration would likely result in unexpected behaviour or bad requests, but I think that this patch should support almost all sensible use cases.
Although I have submitted this PR against master, I think this should be a candidate for 7.2 - if necessary I can rebase/repush.",Maybe a few folks can review at the sprint and we can commit at the end of the event. --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5548,2018-02-21T18:33:15Z,2018-03-01T18:03:24Z,2018-03-01T18:03:24Z,CLOSED,False,14018,3987,311,https://github.com/tlaczy,White-space handling fix on msPostGISParseData function  --  OBSOLOTED,225,[],https://github.com/mapserver/mapserver/pull/5548,https://github.com/tlaczy,1,https://github.com/MapServer/MapServer/pull/5548,"patch_mappostgis.txt
I want to use MapServer to display some geometry data stored in PostgreSQL database over PostGIS connection, but cought an error. My DATA field (very simply subtraction):
DATA ""szakasz from
( select v.azon as vid, szakasz
from keret ) as sq
using unique vid using srid=23700""
This generates an invalid SQL query as found in the MapServer log:
[Tue Feb 20 01:05:12 2018].855573 msPostGISLayerOpen called: szakasz from
( select v.azon as vid, szakasz
from keret ) as sq
using unique vid using srid=23700
[Tue Feb 20 01:05:12 2018].876036 msPostGISParseData: unique_column=vid, srid=23700, geom_column_name=szakasz from
( select v.azon as vid, szakasz
, table_name=keret ) as sq
[Tue Feb 20 01:05:12 2018].876091 msPostGISLayerWhichShapes query: select encode(ST_AsBinary(ST_Force2D(""szakasz from
( select v.azon as vid, szakasz
""),'NDR'),'hex') as geom,""vid"" from keret ) as sq
where szakasz from
( select v.azon as vid, szakasz
&& ST_GeomFromText('POLYGON((225375 -117125,225375 557125,1124625 557125,1124625 -117125,225375 -117125))',23700)
I found the module code as appear at:
https://github.com/DMS-Aus/MapServer/blob/master/mappostgis.c
and I read it carefully. Found some white-space handling mistake.
I wrote a patch and test the resulted code in a synthetic environment. Work properly.","patch_mappostgis.txt
I want to use MapServer to display some geometry data stored in PostgreSQL database over PostGIS connection, but cought an error. My DATA field (very simply subtraction):
DATA ""szakasz from
( select v.azon as vid, szakasz
from keret ) as sq
using unique vid using srid=23700""
This generates an invalid SQL query as found in the MapServer log:
[Tue Feb 20 01:05:12 2018].855573 msPostGISLayerOpen called: szakasz from
( select v.azon as vid, szakasz
from keret ) as sq
using unique vid using srid=23700
[Tue Feb 20 01:05:12 2018].876036 msPostGISParseData: unique_column=vid, srid=23700, geom_column_name=szakasz from
( select v.azon as vid, szakasz
, table_name=keret ) as sq
[Tue Feb 20 01:05:12 2018].876091 msPostGISLayerWhichShapes query: select encode(ST_AsBinary(ST_Force2D(""szakasz from
( select v.azon as vid, szakasz
""),'NDR'),'hex') as geom,""vid"" from keret ) as sq
where szakasz from
( select v.azon as vid, szakasz
&& ST_GeomFromText('POLYGON((225375 -117125,225375 557125,1124625 557125,1124625 -117125,225375 -117125))',23700)
I found the module code as appear at:
https://github.com/DMS-Aus/MapServer/blob/master/mappostgis.c
and I read it carefully. Found some white-space handling mistake.
I wrote a patch and test the resulted code in a synthetic environment. Work properly.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5548,2018-02-21T18:33:15Z,2018-03-01T18:03:24Z,2018-03-01T18:03:24Z,CLOSED,False,14018,3987,311,https://github.com/tlaczy,White-space handling fix on msPostGISParseData function  --  OBSOLOTED,225,[],https://github.com/mapserver/mapserver/pull/5548,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5548#issuecomment-369017265,"patch_mappostgis.txt
I want to use MapServer to display some geometry data stored in PostgreSQL database over PostGIS connection, but cought an error. My DATA field (very simply subtraction):
DATA ""szakasz from
( select v.azon as vid, szakasz
from keret ) as sq
using unique vid using srid=23700""
This generates an invalid SQL query as found in the MapServer log:
[Tue Feb 20 01:05:12 2018].855573 msPostGISLayerOpen called: szakasz from
( select v.azon as vid, szakasz
from keret ) as sq
using unique vid using srid=23700
[Tue Feb 20 01:05:12 2018].876036 msPostGISParseData: unique_column=vid, srid=23700, geom_column_name=szakasz from
( select v.azon as vid, szakasz
, table_name=keret ) as sq
[Tue Feb 20 01:05:12 2018].876091 msPostGISLayerWhichShapes query: select encode(ST_AsBinary(ST_Force2D(""szakasz from
( select v.azon as vid, szakasz
""),'NDR'),'hex') as geom,""vid"" from keret ) as sq
where szakasz from
( select v.azon as vid, szakasz
&& ST_GeomFromText('POLYGON((225375 -117125,225375 557125,1124625 557125,1124625 -117125,225375 -117125))',23700)
I found the module code as appear at:
https://github.com/DMS-Aus/MapServer/blob/master/mappostgis.c
and I read it carefully. Found some white-space handling mistake.
I wrote a patch and test the resulted code in a synthetic environment. Work properly.","Ouch, it looks like there was some big merge. Could you rebase your changes ontop of lastest branch-7-0 (if it is the applicable branch) ?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5549,2018-02-22T13:06:08Z,2018-02-22T16:34:27Z,2018-02-22T16:34:27Z,MERGED,True,5,0,1,https://github.com/eric-peiffer,Fix MSSql query generator when using filters with multiple parameters,1,[],https://github.com/mapserver/mapserver/pull/5549,https://github.com/eric-peiffer,1,https://github.com/MapServer/MapServer/pull/5549,"This WFS filter
<Filter> <AND> <PropertyIsEqualTo><PropertyName>Status</PropertyName><Literal>Open</Literal></PropertyIsEqualTo> <BBOX><Box srsName='EPSG:3857'><coordinates>...</coordinates></Box></BBOX> </AND> </Filter>
generates this TSQL query :
WHERE ((Geography.STIntersects(geography::STGeomFromText('POLYGON ((...))', 4326)) = 1.000000 AND ([Status] = 'Open'))) and Geography.STIntersects(geography::STGeomFromText('POLYGON((...))',4326)) = 1 
The 1.000000 seems harmless but causes a big performance issue. In my case, the SQL spatial index is not used.
This PR generates the following TSQL query and solves the issue.
WHERE ((Geography.STIntersects(geography::STGeomFromText('POLYGON ((...))', 4326)) = 1 AND ([Status] = 'Open'))) and Geography.STIntersects(geography::STGeomFromText('POLYGON((...))',4326)) = 1","This WFS filter
<Filter> <AND> <PropertyIsEqualTo><PropertyName>Status</PropertyName><Literal>Open</Literal></PropertyIsEqualTo> <BBOX><Box srsName='EPSG:3857'><coordinates>...</coordinates></Box></BBOX> </AND> </Filter>
generates this TSQL query :
WHERE ((Geography.STIntersects(geography::STGeomFromText('POLYGON ((...))', 4326)) = 1.000000 AND ([Status] = 'Open'))) and Geography.STIntersects(geography::STGeomFromText('POLYGON((...))',4326)) = 1 
The 1.000000 seems harmless but causes a big performance issue. In my case, the SQL spatial index is not used.
This PR generates the following TSQL query and solves the issue.
WHERE ((Geography.STIntersects(geography::STGeomFromText('POLYGON ((...))', 4326)) = 1 AND ([Status] = 'Open'))) and Geography.STIntersects(geography::STGeomFromText('POLYGON((...))',4326)) = 1",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5552,2018-03-01T00:32:49Z,2018-03-01T00:40:26Z,2018-03-02T01:33:16Z,CLOSED,False,73,18,1,https://github.com/tlaczy,Fix white-space handling on mappostgis.c,1,[],https://github.com/mapserver/mapserver/pull/5552,https://github.com/tlaczy,1,https://github.com/MapServer/MapServer/pull/5552,"Fix white-space handling on function msPostGISParseData.
The DATA field contains "" from\n"" or similar generate invalid SQL, because '\n' don't handled as white-space","Fix white-space handling on function msPostGISParseData.
The DATA field contains "" from\n"" or similar generate invalid SQL, because '\n' don't handled as white-space",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5553,2018-03-01T00:47:34Z,2020-02-27T22:38:26Z,2020-02-27T22:38:27Z,CLOSED,False,89,21,1,https://github.com/tlaczy,Fix white-space handling on mappostgis.c,30,[],https://github.com/mapserver/mapserver/pull/5553,https://github.com/tlaczy,1,https://github.com/MapServer/MapServer/pull/5553,"Fix white-space handling on function msPostGISParseData.
The DATA field contains "" from\n"" generate invalid SQL, because '\n' don't handled as white-space.","Fix white-space handling on function msPostGISParseData.
The DATA field contains "" from\n"" generate invalid SQL, because '\n' don't handled as white-space.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5553,2018-03-01T00:47:34Z,2020-02-27T22:38:26Z,2020-02-27T22:38:27Z,CLOSED,False,89,21,1,https://github.com/tlaczy,Fix white-space handling on mappostgis.c,30,[],https://github.com/mapserver/mapserver/pull/5553,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5553#issuecomment-374609391,"Fix white-space handling on function msPostGISParseData.
The DATA field contains "" from\n"" generate invalid SQL, because '\n' don't handled as white-space.",@tlaczy - what's the difference between pull requests #5553 and #5554? --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5553,2018-03-01T00:47:34Z,2020-02-27T22:38:26Z,2020-02-27T22:38:27Z,CLOSED,False,89,21,1,https://github.com/tlaczy,Fix white-space handling on mappostgis.c,30,[],https://github.com/mapserver/mapserver/pull/5553,https://github.com/tlaczy,3,https://github.com/MapServer/MapServer/pull/5553#issuecomment-374619227,"Fix white-space handling on function msPostGISParseData.
The DATA field contains "" from\n"" generate invalid SQL, because '\n' don't handled as white-space.","Hi!

The base branch the difference.
#5553 based on 7.0 branch
#5554 based on master branch

Becouse two branch not same, the patch also different.
The contenct same, but the referenced lines not.

Regards
TLaczy

2018.03.20. 15:04 keltezéssel, Steve Lime írta:
…

 @tlaczy <https://github.com/tlaczy> - what's the difference between
 pull requests #5553 <#5553>
 and #5554 <#5554>? --Steve

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#5553 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AjAlPaDdmUMxnRp6XwEQ3TKsXELmYXb2ks5tgQxmgaJpZM4SXlq5>.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5553,2018-03-01T00:47:34Z,2020-02-27T22:38:26Z,2020-02-27T22:38:27Z,CLOSED,False,89,21,1,https://github.com/tlaczy,Fix white-space handling on mappostgis.c,30,[],https://github.com/mapserver/mapserver/pull/5553,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/5553#issuecomment-592213994,"Fix white-space handling on function msPostGISParseData.
The DATA field contains "" from\n"" generate invalid SQL, because '\n' don't handled as white-space.",#5554 has been merged. This one is against a no longer supported branch. Closing,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5554,2018-03-01T13:26:49Z,2020-02-17T20:21:55Z,2020-03-04T13:14:30Z,MERGED,True,89,21,1,https://github.com/tlaczy,Fix white-space handling on mappostgis.c,2,[],https://github.com/mapserver/mapserver/pull/5554,https://github.com/tlaczy,1,https://github.com/MapServer/MapServer/pull/5554,"Fix white-space handling on function msPostGISParseData.
The DATA field contains "" from\n"" or similar generate invalid SQL, because '\n' don't handled as white-space","Fix white-space handling on function msPostGISParseData.
The DATA field contains "" from\n"" or similar generate invalid SQL, because '\n' don't handled as white-space",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5554,2018-03-01T13:26:49Z,2020-02-17T20:21:55Z,2020-03-04T13:14:30Z,MERGED,True,89,21,1,https://github.com/tlaczy,Fix white-space handling on mappostgis.c,2,[],https://github.com/mapserver/mapserver/pull/5554,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5554#issuecomment-587145718,"Fix white-space handling on function msPostGISParseData.
The DATA field contains "" from\n"" or similar generate invalid SQL, because '\n' don't handled as white-space",thanks @tlaczy nice change for PostGIS users!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5554,2018-03-01T13:26:49Z,2020-02-17T20:21:55Z,2020-03-04T13:14:30Z,MERGED,True,89,21,1,https://github.com/tlaczy,Fix white-space handling on mappostgis.c,2,[],https://github.com/mapserver/mapserver/pull/5554,https://github.com/sbrunner,3,https://github.com/MapServer/MapServer/pull/5554#issuecomment-589554349,"Fix white-space handling on function msPostGISParseData.
The DATA field contains "" from\n"" or similar generate invalid SQL, because '\n' don't handled as white-space","I suspect that from the merge I get the error
<?xml version=""1.0"" encoding=""UTF-8""?>
<ows:ExceptionReport xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:ows=""http://www.opengis.net/ows/1.1"" version=""2.0.0"" xml:lang=""en-US"" xsi:schemaLocation=""http://www.opengis.net/ows/1.1 http://schemas.opengis.net/ows/1.1.0/owsExceptionReport.xsd"">
  <ows:Exception exceptionCode=""NoApplicableCode"" locator=""mapserv"">
    <ows:ExceptionText>msPostGISParseData(): Query error. Error parsing PostGIS DATA variable.  You must specify 'using unique' when supplying a subselect in the data definition.</ows:ExceptionText>
  </ows:Exception>
</ows:ExceptionReport>

For the DATA:
DATA ""geom FROM (SELECT * FROM polygons) AS foo USING UNIQUE name USING srid=4326""

:-/",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5554,2018-03-01T13:26:49Z,2020-02-17T20:21:55Z,2020-03-04T13:14:30Z,MERGED,True,89,21,1,https://github.com/tlaczy,Fix white-space handling on mappostgis.c,2,[],https://github.com/mapserver/mapserver/pull/5554,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/5554#issuecomment-589780692,"Fix white-space handling on function msPostGISParseData.
The DATA field contains "" from\n"" or similar generate invalid SQL, because '\n' don't handled as white-space",Does anyone have a small test case handy?  (I have PostGIS 3 and PG 12.1 locally to test)  @tlaczy @sbrunner ?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5554,2018-03-01T13:26:49Z,2020-02-17T20:21:55Z,2020-03-04T13:14:30Z,MERGED,True,89,21,1,https://github.com/tlaczy,Fix white-space handling on mappostgis.c,2,[],https://github.com/mapserver/mapserver/pull/5554,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/5554#issuecomment-589781191,"Fix white-space handling on function msPostGISParseData.
The DATA field contains "" from\n"" or similar generate invalid SQL, because '\n' don't handled as white-space",I'll try using @sbrunner 's connection above.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5554,2018-03-01T13:26:49Z,2020-02-17T20:21:55Z,2020-03-04T13:14:30Z,MERGED,True,89,21,1,https://github.com/tlaczy,Fix white-space handling on mappostgis.c,2,[],https://github.com/mapserver/mapserver/pull/5554,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/5554#issuecomment-590073575,"Fix white-space handling on function msPostGISParseData.
The DATA field contains "" from\n"" or similar generate invalid SQL, because '\n' don't handled as white-space","@sbrunner I cannot reproduce your issue locally (PostgreSQL 12.2, PostGIS 3.0.1, MapServer git-master).  Can you please create a small test case and attach it here, to reproduce?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5554,2018-03-01T13:26:49Z,2020-02-17T20:21:55Z,2020-03-04T13:14:30Z,MERGED,True,89,21,1,https://github.com/tlaczy,Fix white-space handling on mappostgis.c,2,[],https://github.com/mapserver/mapserver/pull/5554,https://github.com/tlaczy,7,https://github.com/MapServer/MapServer/pull/5554#issuecomment-591147007,"Fix white-space handling on function msPostGISParseData.
The DATA field contains "" from\n"" or similar generate invalid SQL, because '\n' don't handled as white-space","Greetings to everyone!
I checked my changes again. I didn't find a bug in it.
I did not test it directly because I do not have an executable binary for the current, patched state of 'mapserver' master brand.
Can I download the executable code somewhere? Like Travis, for example?
Thanks",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5554,2018-03-01T13:26:49Z,2020-02-17T20:21:55Z,2020-03-04T13:14:30Z,MERGED,True,89,21,1,https://github.com/tlaczy,Fix white-space handling on mappostgis.c,2,[],https://github.com/mapserver/mapserver/pull/5554,https://github.com/sbrunner,8,https://github.com/MapServer/MapServer/pull/5554#issuecomment-593278069,"Fix white-space handling on function msPostGISParseData.
The DATA field contains "" from\n"" or similar generate invalid SQL, because '\n' don't handled as white-space","Sorry, for long time to responds, I was on holiday :-)
I just get the Capabilities with this file: https://github.com/camptocamp/docker-mapserver/blob/master/acceptance_tests/config/mapserver/mapserver.map.tmpl",True,{'THUMBS_UP': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5554,2018-03-01T13:26:49Z,2020-02-17T20:21:55Z,2020-03-04T13:14:30Z,MERGED,True,89,21,1,https://github.com/tlaczy,Fix white-space handling on mappostgis.c,2,[],https://github.com/mapserver/mapserver/pull/5554,https://github.com/jmckenna,9,https://github.com/MapServer/MapServer/pull/5554#issuecomment-593555801,"Fix white-space handling on function msPostGISParseData.
The DATA field contains "" from\n"" or similar generate invalid SQL, because '\n' don't handled as white-space","Thanks for pointing to that @sbrunner
I have tested your mapfile with today's master build (with PostgreSQL 12.2, PostGIS 3.0.1).  The only change that I had to make to your mapfile was to set an image SIZE parameter. Here was my command:
shp2img -m mapserver.map -o ttt.png -all_debug 5

And the result is valid, with no errors:
msLoadMap(): 0.008s
msDrawMap(): rendering using outputformat named jpeg (AGG/JPEG).
msDrawMap(): WMS/WFS set-up and query, 0.000s
msPostGISLayerOpen called: geom FROM (SELECT * FROM polygons) AS foo USING UNIQUE name USING srid=4326
msPostGISLayerOpen: No connection in pool, creating a fresh one.
msConnPoolRegister(polygons,user=postgres password=postgres dbname=camptocamptest host=localhost port=5436,00EF29B0)
msPostGISLayerOpen: Got PostGIS version 30000.
msPostGISLayerOpen: Forcing 2D geometries: no.
msPostGISLayerFreeItemInfo called.
msPostGISLayerWhichShapes called.
msPostGISParseData called.
msPostGISParseData: unique_column=name, srid=4326, geom_column_name=geom, table_name=(SELECT * FROM polygons) AS foo
msPostGISBuildSQL called.
msPostGISBuildSQLItems called.
msPostGISBuildSQLItems: 0 items requested.
msPostGISBuildSQLFrom called.
msPostGISBuildSQLWhere called.
msPostGISBuildSQLSRID called.
msPostGISBuildSQLSRID: SRID provided (4326)
msPostGISBuildSQLBox called.
msPostGISLayerWhichShapes query: select ST_AsBinary((""geom""),'NDR') as geom,""name""::text from (SELECT * FROM polygons) AS foo where ""geom"" && ST_GeomFromText('POLYGON((-180 -119.899833055092,-180 119.899833055092,180 119.899833055092,180 -119.899833055092,-180 -119.899833055092))',4326)
msPostGISLayerWhichShapes query status: PGRES_TUPLES_OK (2)
msPostGISLayerWhichShapes got 1 records in result.
msPostGISLayerNextShape called.
msPostGISReadShape called.
msPostGISReadShape: Setting shape->index = 0
msPostGISReadShape: Setting shape->resultindex = 0
msPostGISReadShape: [index] 0
msPostGISReadShape: [shape] POLYGON ((-50.0000000000000000 -50.0000000000000000, 50.0000000000000000 -50.0000000000000000, 50.0000000000000000 50.0000000000000000, -50.0000000000000000 -50.0000000000000000))
msPostGISLayerNextShape called.
msPostGISLayerFreeItemInfo called.
msPostGISLayerClose called: geom FROM (SELECT * FROM polygons) AS foo USING UNIQUE name USING srid=4326
msConnPoolRelease(polygons,user=postgres password=postgres dbname=camptocamptest host=localhost port=5436,00EF29B0)
msDrawMap(): Layer 0 (polygons), 0.301s
msDrawMap(): Drawing Label Cache, 0.000s
msDrawMap() total time: 0.333s
msSaveImage(ttt.png) total time: 0.075s
msFreeMap(): freeing map at 00E58EB0.
freeLayer(): freeing layer at 00EC04F0.
msPostGISLayerIsOpen called.
shp2img total time: 0.425s
msConnPoolClose(user=postgres password=postgres dbname=camptocamptest host=localhost port=5436,00EF29B0)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5554,2018-03-01T13:26:49Z,2020-02-17T20:21:55Z,2020-03-04T13:14:30Z,MERGED,True,89,21,1,https://github.com/tlaczy,Fix white-space handling on mappostgis.c,2,[],https://github.com/mapserver/mapserver/pull/5554,https://github.com/sbrunner,10,https://github.com/MapServer/MapServer/pull/5554#issuecomment-594514503,"Fix white-space handling on function msPostGISParseData.
The DATA field contains "" from\n"" or similar generate invalid SQL, because '\n' don't handled as white-space","It seems that's your tight :-/, many thanks :-)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5555,2018-03-01T23:15:26Z,2018-03-02T02:22:11Z,2018-03-02T02:22:15Z,CLOSED,False,4,0,1,https://github.com/OmegaCar,Update mappostgis.c,1,[],https://github.com/mapserver/mapserver/pull/5555,https://github.com/OmegaCar,1,https://github.com/MapServer/MapServer/pull/5555,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5561,2018-03-15T17:04:41Z,2018-03-23T11:23:37Z,2018-03-23T13:18:47Z,MERGED,True,13,29,4,https://github.com/claudep,Add MapScript support for Python 3.x,1,[],https://github.com/mapserver/mapserver/pull/5561,https://github.com/claudep,1,https://github.com/MapServer/MapServer/pull/5561,"Allows MapScript to build and run against Python 3.4.
The changes appear to continue to work with Python 2.7.
If there are multiple Python versions installed on your machine,
the Python version that is selected is whatever CMake finds first
or the path set with -DPYTHON_EXECUTABLE=
Changes include:

print """"                     ---> print("""")
raise E, ""text""              ---> raise E(""text"")
PyString_FromStringAndSize() ---> PyBytes_FromStringAndSize()
Remove references to PyFile*","Allows MapScript to build and run against Python 3.4.
The changes appear to continue to work with Python 2.7.
If there are multiple Python versions installed on your machine,
the Python version that is selected is whatever CMake finds first
or the path set with -DPYTHON_EXECUTABLE=
Changes include:

print """"                     ---> print("""")
raise E, ""text""              ---> raise E(""text"")
PyString_FromStringAndSize() ---> PyBytes_FromStringAndSize()
Remove references to PyFile*",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5561,2018-03-15T17:04:41Z,2018-03-23T11:23:37Z,2018-03-23T13:18:47Z,MERGED,True,13,29,4,https://github.com/claudep,Add MapScript support for Python 3.x,1,[],https://github.com/mapserver/mapserver/pull/5561,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5561#issuecomment-375593219,"Allows MapScript to build and run against Python 3.4.
The changes appear to continue to work with Python 2.7.
If there are multiple Python versions installed on your machine,
the Python version that is selected is whatever CMake finds first
or the path set with -DPYTHON_EXECUTABLE=
Changes include:

print """"                     ---> print("""")
raise E, ""text""              ---> raise E(""text"")
PyString_FromStringAndSize() ---> PyBytes_FromStringAndSize()
Remove references to PyFile*","I've tried this pull request on a Windows machine with Python3. The build is fine when using SWIG 3.0.12.
Thanks @claudep !
There a few unit test fixes for Python3 syntax, but after making these all but 2 of the tests that pass in Python2 pass in Python3. These are both in the imagetest.py file and relate to writing an image to file. The majority of the tests from this test file also fail in Python3 so the writing of images to file probably needs to be reviewed in depth.
Summary - pull request looks good to me - Python MapScript works as well on Python3 as Python2, and there are large parts of the MapScript API to review as several tests and the docs are no longer up-to-date.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5561,2018-03-15T17:04:41Z,2018-03-23T11:23:37Z,2018-03-23T13:18:47Z,MERGED,True,13,29,4,https://github.com/claudep,Add MapScript support for Python 3.x,1,[],https://github.com/mapserver/mapserver/pull/5561,https://github.com/claudep,3,https://github.com/MapServer/MapServer/pull/5561#issuecomment-375594932,"Allows MapScript to build and run against Python 3.4.
The changes appear to continue to work with Python 2.7.
If there are multiple Python versions installed on your machine,
the Python version that is selected is whatever CMake finds first
or the path set with -DPYTHON_EXECUTABLE=
Changes include:

print """"                     ---> print("""")
raise E, ""text""              ---> raise E(""text"")
PyString_FromStringAndSize() ---> PyBytes_FromStringAndSize()
Remove references to PyFile*","There a few unit test fixes for Python3 syntax, but after making these

Feel free to make a PR against my branch.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5561,2018-03-15T17:04:41Z,2018-03-23T11:23:37Z,2018-03-23T13:18:47Z,MERGED,True,13,29,4,https://github.com/claudep,Add MapScript support for Python 3.x,1,[],https://github.com/mapserver/mapserver/pull/5561,https://github.com/Schpidi,4,https://github.com/MapServer/MapServer/pull/5561#issuecomment-375628733,"Allows MapScript to build and run against Python 3.4.
The changes appear to continue to work with Python 2.7.
If there are multiple Python versions installed on your machine,
the Python version that is selected is whatever CMake finds first
or the path set with -DPYTHON_EXECUTABLE=
Changes include:

print """"                     ---> print("""")
raise E, ""text""              ---> raise E(""text"")
PyString_FromStringAndSize() ---> PyBytes_FromStringAndSize()
Remove references to PyFile*",We tested this here at the code sprint in Bonn and agreed that it is fine to merge. It might break Python 2.6 but this is out of maintenance since 2013 anyways. Many thanks for the contribution!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5561,2018-03-15T17:04:41Z,2018-03-23T11:23:37Z,2018-03-23T13:18:47Z,MERGED,True,13,29,4,https://github.com/claudep,Add MapScript support for Python 3.x,1,[],https://github.com/mapserver/mapserver/pull/5561,https://github.com/claudep,5,https://github.com/MapServer/MapServer/pull/5561#issuecomment-375662100,"Allows MapScript to build and run against Python 3.4.
The changes appear to continue to work with Python 2.7.
If there are multiple Python versions installed on your machine,
the Python version that is selected is whatever CMake finds first
or the path set with -DPYTHON_EXECUTABLE=
Changes include:

print """"                     ---> print("""")
raise E, ""text""              ---> raise E(""text"")
PyString_FromStringAndSize() ---> PyBytes_FromStringAndSize()
Remove references to PyFile*",Thanks for merging. I proposed a follow-up with a bunch of test syntax issues in #5572.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5566,2018-03-18T10:33:16Z,2018-03-22T14:43:47Z,2018-03-22T15:07:31Z,MERGED,True,262,190,4,https://github.com/constantinius,Fixing wcs issues,9,[],https://github.com/mapserver/mapserver/pull/5566,https://github.com/constantinius,1,https://github.com/MapServer/MapServer/pull/5566,"Fixing issues: #5562, #5563, #5564, #5565","Fixing issues: #5562, #5563, #5564, #5565",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5566,2018-03-18T10:33:16Z,2018-03-22T14:43:47Z,2018-03-22T15:07:31Z,MERGED,True,262,190,4,https://github.com/constantinius,Fixing wcs issues,9,[],https://github.com/mapserver/mapserver/pull/5566,https://github.com/Schpidi,2,https://github.com/MapServer/MapServer/pull/5566#issuecomment-375330161,"Fixing issues: #5562, #5563, #5564, #5565",@rouault thx for the review. ok to merge now?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5568,2018-03-19T14:34:35Z,2018-03-21T16:34:29Z,2018-03-21T16:34:29Z,CLOSED,False,2173,10,16,https://github.com/constantinius,Implementation of RFC 120: INSPIRE download service for WCS 2.0,6,[],https://github.com/mapserver/mapserver/pull/5568,https://github.com/constantinius,1,https://github.com/MapServer/MapServer/pull/5568,See the RFC for details,See the RFC for details,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5568,2018-03-19T14:34:35Z,2018-03-21T16:34:29Z,2018-03-21T16:34:29Z,CLOSED,False,2173,10,16,https://github.com/constantinius,Implementation of RFC 120: INSPIRE download service for WCS 2.0,6,[],https://github.com/mapserver/mapserver/pull/5568,https://github.com/Schpidi,2,https://github.com/MapServer/MapServer/pull/5568#issuecomment-375008320,See the RFC for details,closing in favor of #5571,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5569,2018-03-20T11:04:29Z,2018-03-23T10:00:13Z,2018-03-23T10:00:14Z,MERGED,True,111,89,20,https://github.com/geographika,Fixing MapScript unit tests for Python2,48,[],https://github.com/mapserver/mapserver/pull/5569,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5569,"To help check the usability of the Python3 MapScript bindings (see #5561, #5290)  it will be useful to run the MapScript test suite to see which tests fail.
The Python2 unit tests have not been maintained for a number of years. This pull request aims to fix the tests in Python2 before running on Python3.
Some tests can be fixed by simply updating the API, such as adding A values to RGBA related-tests. Other failing tests are more complicated - comments have been added to individual commits.
Several failing tests relate to creating new image objects - marked with comments in the code noting ""imageObj() is severely broken and should not be used"". It may be time to clean up this code and remove the section of code marked #ifdef FORCE_BROKEN_GD_CODE
Several errors also relate to testing the getFeature/getResultsShape methods. These no longer exist, see:

Implemented RFC 65 which improves and simplifies one-pass query support. This causes
a few MapScript regressions with getShape/getFeature/getResultsShape. (#3647)

These tests have been commented out for the moment, and may be deleted if no longer relevant.","To help check the usability of the Python3 MapScript bindings (see #5561, #5290)  it will be useful to run the MapScript test suite to see which tests fail.
The Python2 unit tests have not been maintained for a number of years. This pull request aims to fix the tests in Python2 before running on Python3.
Some tests can be fixed by simply updating the API, such as adding A values to RGBA related-tests. Other failing tests are more complicated - comments have been added to individual commits.
Several failing tests relate to creating new image objects - marked with comments in the code noting ""imageObj() is severely broken and should not be used"". It may be time to clean up this code and remove the section of code marked #ifdef FORCE_BROKEN_GD_CODE
Several errors also relate to testing the getFeature/getResultsShape methods. These no longer exist, see:

Implemented RFC 65 which improves and simplifies one-pass query support. This causes
a few MapScript regressions with getShape/getFeature/getResultsShape. (#3647)

These tests have been commented out for the moment, and may be deleted if no longer relevant.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5569,2018-03-20T11:04:29Z,2018-03-23T10:00:13Z,2018-03-23T10:00:14Z,MERGED,True,111,89,20,https://github.com/geographika,Fixing MapScript unit tests for Python2,48,[],https://github.com/mapserver/mapserver/pull/5569,https://github.com/Schpidi,2,https://github.com/MapServer/MapServer/pull/5569#issuecomment-375601078,"To help check the usability of the Python3 MapScript bindings (see #5561, #5290)  it will be useful to run the MapScript test suite to see which tests fail.
The Python2 unit tests have not been maintained for a number of years. This pull request aims to fix the tests in Python2 before running on Python3.
Some tests can be fixed by simply updating the API, such as adding A values to RGBA related-tests. Other failing tests are more complicated - comments have been added to individual commits.
Several failing tests relate to creating new image objects - marked with comments in the code noting ""imageObj() is severely broken and should not be used"". It may be time to clean up this code and remove the section of code marked #ifdef FORCE_BROKEN_GD_CODE
Several errors also relate to testing the getFeature/getResultsShape methods. These no longer exist, see:

Implemented RFC 65 which improves and simplifies one-pass query support. This causes
a few MapScript regressions with getShape/getFeature/getResultsShape. (#3647)

These tests have been commented out for the moment, and may be deleted if no longer relevant.","Impressive, I'm just going to merge this to unblock further good work. Thanks a lot!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5571,2018-03-21T16:20:19Z,2018-03-21T16:47:03Z,2018-03-21T16:47:03Z,MERGED,True,2193,10,16,https://github.com/constantinius,RFC 120 implementation,7,[],https://github.com/mapserver/mapserver/pull/5571,https://github.com/constantinius,1,https://github.com/MapServer/MapServer/pull/5571,Implementation of RFC 120,Implementation of RFC 120,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5572,2018-03-23T13:17:41Z,2018-04-23T11:58:54Z,2018-04-23T12:23:11Z,MERGED,True,170,205,42,https://github.com/claudep,Fix Python3 syntax issues in Python tests,2,[],https://github.com/mapserver/mapserver/pull/5572,https://github.com/claudep,1,https://github.com/MapServer/MapServer/pull/5572,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5572,2018-03-23T13:17:41Z,2018-04-23T11:58:54Z,2018-04-23T12:23:11Z,MERGED,True,170,205,42,https://github.com/claudep,Fix Python3 syntax issues in Python tests,2,[],https://github.com/mapserver/mapserver/pull/5572,https://github.com/Schpidi,2,https://github.com/MapServer/MapServer/pull/5572#issuecomment-375673126,,@geographika you should get notifications for this...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5572,2018-03-23T13:17:41Z,2018-04-23T11:58:54Z,2018-04-23T12:23:11Z,MERGED,True,170,205,42,https://github.com/claudep,Fix Python3 syntax issues in Python tests,2,[],https://github.com/mapserver/mapserver/pull/5572,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5572#issuecomment-377031130,,"@claudep - thanks for these. I'm working on updating Appveyor to run both p2 and py3 tests.
Could you exclude testConstructorBytesIO  (by renaming xtestConstructorBytesIO) so the current Appveyor tests pass?
Even better would be if you can work out why the test is failing, and fix it.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5572,2018-03-23T13:17:41Z,2018-04-23T11:58:54Z,2018-04-23T12:23:11Z,MERGED,True,170,205,42,https://github.com/claudep,Fix Python3 syntax issues in Python tests,2,[],https://github.com/mapserver/mapserver/pull/5572,https://github.com/claudep,4,https://github.com/MapServer/MapServer/pull/5572#issuecomment-377352644,,"I found a bunch of other things to update. However, I'm struggling to follow instructions to properly build python mapscript. Instructions are scattered through several files. What instructions should I follow?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5572,2018-03-23T13:17:41Z,2018-04-23T11:58:54Z,2018-04-23T12:23:11Z,MERGED,True,170,205,42,https://github.com/claudep,Fix Python3 syntax issues in Python tests,2,[],https://github.com/mapserver/mapserver/pull/5572,https://github.com/claudep,5,https://github.com/MapServer/MapServer/pull/5572#issuecomment-377373825,,"Ha! now some tests run which did not run before, so we have new errors.
""POINT (5 7)"" vs ""POINT (5.0000000000000000 7.0000000000000000)""
I remember GEOS has a trim option for WKT output (http://geos.osgeo.org/doxygen/classgeos_1_1io_1_1WKTWriter.html#a53f742121d0757cd4ca83795ffab1c3f). Don't know if mapserver can use this API or not, or if we should simply account for this possible difference in the tests.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5572,2018-03-23T13:17:41Z,2018-04-23T11:58:54Z,2018-04-23T12:23:11Z,MERGED,True,170,205,42,https://github.com/claudep,Fix Python3 syntax issues in Python tests,2,[],https://github.com/mapserver/mapserver/pull/5572,https://github.com/geographika,6,https://github.com/MapServer/MapServer/pull/5572#issuecomment-377522332,,"There should be rounding applied to the tests from here - https://github.com/mapserver/mapserver/blob/branch-7-0/mapscript/python/tests/cases/testing.py#L118
Are you running on Linux or Windows when building MapScript? The .travis.yaml and AppVeyor.yaml files show working builds for each OS.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5572,2018-03-23T13:17:41Z,2018-04-23T11:58:54Z,2018-04-23T12:23:11Z,MERGED,True,170,205,42,https://github.com/claudep,Fix Python3 syntax issues in Python tests,2,[],https://github.com/mapserver/mapserver/pull/5572,https://github.com/claudep,7,https://github.com/MapServer/MapServer/pull/5572#issuecomment-377558439,,Linux-only here 😄,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5572,2018-03-23T13:17:41Z,2018-04-23T11:58:54Z,2018-04-23T12:23:11Z,MERGED,True,170,205,42,https://github.com/claudep,Fix Python3 syntax issues in Python tests,2,[],https://github.com/mapserver/mapserver/pull/5572,https://github.com/claudep,8,https://github.com/MapServer/MapServer/pull/5572#issuecomment-377586848,,"The test utilities you suggested are in the mapscript python tests, while the errors are in the mapserver/msautotest tests. Should we copy the same sort of utilities in msautotest?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5572,2018-03-23T13:17:41Z,2018-04-23T11:58:54Z,2018-04-23T12:23:11Z,MERGED,True,170,205,42,https://github.com/claudep,Fix Python3 syntax issues in Python tests,2,[],https://github.com/mapserver/mapserver/pull/5572,https://github.com/claudep,9,https://github.com/MapServer/MapServer/pull/5572#issuecomment-377680081,,"I'm still getting errors when running Python mapscript tests, even if they are not visible on Travis. Specifically, hash table tests are failing, because since 10fe3d7, hashTableObj in Python is a dict instead of a swig proxy of hashTableObj (@rouault should know why this was done). However, this should also affect Python 2 and has nothing to do with this patch.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5572,2018-03-23T13:17:41Z,2018-04-23T11:58:54Z,2018-04-23T12:23:11Z,MERGED,True,170,205,42,https://github.com/claudep,Fix Python3 syntax issues in Python tests,2,[],https://github.com/mapserver/mapserver/pull/5572,https://github.com/geographika,10,https://github.com/MapServer/MapServer/pull/5572#issuecomment-378741056,,"@claudep - the conversion of the hashTableObj to a Python dict creates a much nicer Python API.
I believe the issue is in the pymodule.i file, and even when compiling with Python3 the Python2 dictionary creation is used:
#if PY_VERSION_HEX >= 0x03000000
        PyObject *py_key = PyUnicode_FromString(key);
        PyObject *py_val = PyUnicode_FromString(val);
#else
        PyObject *py_key = PyString_FromString(key);
        PyObject *py_val = PyString_FromString(val);
#endif

According to this link the above syntax is incorrect as ""the macro PY_VERSION_HEX is only defined when compiling the code (and including the python header), but not when SWIG parses the code.""
Could you try building with the following?
%#if PY_VERSION_HEX >= 0x03000000
        PyObject *py_key = PyUnicode_FromString(key);
        PyObject *py_val = PyUnicode_FromString(val);
%#else
        PyObject *py_key = PyString_FromString(key);
        PyObject *py_val = PyString_FromString(val);
%#endif

This is the approach/syntax used by @rouault in the GDAL bindings as can be seen here.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5572,2018-03-23T13:17:41Z,2018-04-23T11:58:54Z,2018-04-23T12:23:11Z,MERGED,True,170,205,42,https://github.com/claudep,Fix Python3 syntax issues in Python tests,2,[],https://github.com/mapserver/mapserver/pull/5572,https://github.com/claudep,11,https://github.com/MapServer/MapServer/pull/5572#issuecomment-378837874,,"Thanks for these findings. I'm not sure I'll be able to work on this before the start of next week.

the conversion of the hashTableObj to a Python dict creates a much nicer Python API.

Yes I admit, but it is backwards incompatible as it contradicts the API documentation stating that keys are case-insensitive and several API disappeared (clear, nextkey, remove, set). The docs should explain that at least.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5572,2018-03-23T13:17:41Z,2018-04-23T11:58:54Z,2018-04-23T12:23:11Z,MERGED,True,170,205,42,https://github.com/claudep,Fix Python3 syntax issues in Python tests,2,[],https://github.com/mapserver/mapserver/pull/5572,https://github.com/claudep,12,https://github.com/MapServer/MapServer/pull/5572#issuecomment-380139173,,Just pushed with the suggested modifications.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5572,2018-03-23T13:17:41Z,2018-04-23T11:58:54Z,2018-04-23T12:23:11Z,MERGED,True,170,205,42,https://github.com/claudep,Fix Python3 syntax issues in Python tests,2,[],https://github.com/mapserver/mapserver/pull/5572,https://github.com/geographika,13,https://github.com/MapServer/MapServer/pull/5572#issuecomment-380183150,,"@claudep - excellent work, and an big step forward in getting the test suite matching the current API and ready for Python3.
Not sure if you are on the MapServer dev mailing lists, but I started a discussion on other major changes relating to Python MapScript - http://lists.osgeo.org/pipermail/mapserver-dev/2018-April/thread.html#15384 - would be great to have a few devs on this.
@Schpidi - I've reviewed the above changes. They all relate to Python MapScript files, and all enabled tests are passing, so I'd be for merging to master.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5572,2018-03-23T13:17:41Z,2018-04-23T11:58:54Z,2018-04-23T12:23:11Z,MERGED,True,170,205,42,https://github.com/claudep,Fix Python3 syntax issues in Python tests,2,[],https://github.com/mapserver/mapserver/pull/5572,https://github.com/Schpidi,14,https://github.com/MapServer/MapServer/pull/5572#issuecomment-383549998,,"Sorry, that slipped through. Thanks for taking care!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5574,2018-03-27T21:51:06Z,2018-03-27T22:06:20Z,2018-03-28T10:13:25Z,MERGED,True,203,220,2,https://github.com/rouault,"Restore CMakeList.txt to its state before #5376 merge, and remerge select protobuf bits",1,[],https://github.com/mapserver/mapserver/pull/5574,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5574,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5574,2018-03-27T21:51:06Z,2018-03-27T22:06:20Z,2018-03-28T10:13:25Z,MERGED,True,203,220,2,https://github.com/rouault,"Restore CMakeList.txt to its state before #5376 merge, and remerge select protobuf bits",1,[],https://github.com/mapserver/mapserver/pull/5574,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5574#issuecomment-376694232,,Thanks Even!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5580,2018-04-10T14:57:08Z,2018-05-14T18:44:39Z,2018-05-14T21:07:35Z,MERGED,True,1,1,1,https://github.com/cladisch,msPostGISBuildSQLWhere: quote the geo column name,1,[],https://github.com/mapserver/mapserver/pull/5580,https://github.com/cladisch,1,https://github.com/MapServer/MapServer/pull/5580,fixes #5579,fixes #5579,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5580,2018-04-10T14:57:08Z,2018-05-14T18:44:39Z,2018-05-14T21:07:35Z,MERGED,True,1,1,1,https://github.com/cladisch,msPostGISBuildSQLWhere: quote the geo column name,1,[],https://github.com/mapserver/mapserver/pull/5580,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5580#issuecomment-388921733,fixes #5579,Will backport to 7.2... --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5581,2018-04-10T19:13:16Z,2018-04-13T09:34:33Z,2018-04-13T09:34:33Z,MERGED,True,2,247,5,https://github.com/geographika,Remove pygdioctx related files and references,1,[],https://github.com/mapserver/mapserver/pull/5581,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5581,Since the removal of the GD renderer in MapServer 7.0 the pygdioctx code is redundant.,Since the removal of the GD renderer in MapServer 7.0 the pygdioctx code is redundant.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5583,2018-04-14T21:17:28Z,2018-10-11T20:45:05Z,2018-10-11T20:45:13Z,MERGED,True,111,100,3,https://github.com/geographika,Update C# bindings to work with SWIG 3.x,8,[],https://github.com/mapserver/mapserver/pull/5583,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5583,"See #5575
This initial pull request brings the number of errors when building with SWIG 3.0.12 from 1592 Error(s) to8 Error(s).
The remaining errors are:
[00:02:38]   mapscript.cs(25,58): error CS0234: The type or namespace name 'EntryPoint' does not exist in the namespace 'System.Runtime.InteropServices' (are you missing an assembly reference?) [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscript.cs(25,4): error CS1729: 'DllImportAttribute' does not contain a constructor that takes 2 arguments [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(191,10): error CS0111: Type 'mapscriptPINVOKE' already defines a member called '.cctor' with the same parameter types [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(313,3): error CS0246: The type or namespace name 'ThreadStaticAttribute' could not be found (are you missing a using directive or an assembly reference?) [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(313,3): error CS0246: The type or namespace name 'ThreadStatic' could not be found (are you missing a using directive or an assembly reference?) [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(298,58): error CS0234: The type or namespace name 'EntryPoint' does not exist in the namespace 'System.Runtime.InteropServices' (are you missing an assembly reference?) [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(298,4): error CS1729: 'DllImportAttribute' does not contain a constructor that takes 2 arguments [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]","See #5575
This initial pull request brings the number of errors when building with SWIG 3.0.12 from 1592 Error(s) to8 Error(s).
The remaining errors are:
[00:02:38]   mapscript.cs(25,58): error CS0234: The type or namespace name 'EntryPoint' does not exist in the namespace 'System.Runtime.InteropServices' (are you missing an assembly reference?) [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscript.cs(25,4): error CS1729: 'DllImportAttribute' does not contain a constructor that takes 2 arguments [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(191,10): error CS0111: Type 'mapscriptPINVOKE' already defines a member called '.cctor' with the same parameter types [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(313,3): error CS0246: The type or namespace name 'ThreadStaticAttribute' could not be found (are you missing a using directive or an assembly reference?) [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(313,3): error CS0246: The type or namespace name 'ThreadStatic' could not be found (are you missing a using directive or an assembly reference?) [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(298,58): error CS0234: The type or namespace name 'EntryPoint' does not exist in the namespace 'System.Runtime.InteropServices' (are you missing an assembly reference?) [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(298,4): error CS1729: 'DllImportAttribute' does not contain a constructor that takes 2 arguments [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5583,2018-04-14T21:17:28Z,2018-10-11T20:45:05Z,2018-10-11T20:45:13Z,MERGED,True,111,100,3,https://github.com/geographika,Update C# bindings to work with SWIG 3.x,8,[],https://github.com/mapserver/mapserver/pull/5583,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5583#issuecomment-395136565,"See #5575
This initial pull request brings the number of errors when building with SWIG 3.0.12 from 1592 Error(s) to8 Error(s).
The remaining errors are:
[00:02:38]   mapscript.cs(25,58): error CS0234: The type or namespace name 'EntryPoint' does not exist in the namespace 'System.Runtime.InteropServices' (are you missing an assembly reference?) [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscript.cs(25,4): error CS1729: 'DllImportAttribute' does not contain a constructor that takes 2 arguments [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(191,10): error CS0111: Type 'mapscriptPINVOKE' already defines a member called '.cctor' with the same parameter types [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(313,3): error CS0246: The type or namespace name 'ThreadStaticAttribute' could not be found (are you missing a using directive or an assembly reference?) [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(313,3): error CS0246: The type or namespace name 'ThreadStatic' could not be found (are you missing a using directive or an assembly reference?) [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(298,58): error CS0234: The type or namespace name 'EntryPoint' does not exist in the namespace 'System.Runtime.InteropServices' (are you missing an assembly reference?) [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(298,4): error CS1729: 'DllImportAttribute' does not contain a constructor that takes 2 arguments [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]",@geographika - have you had chance to investigate the AppVeyor issues? I assume that's more relevant to this particular issue. --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5583,2018-04-14T21:17:28Z,2018-10-11T20:45:05Z,2018-10-11T20:45:13Z,MERGED,True,111,100,3,https://github.com/geographika,Update C# bindings to work with SWIG 3.x,8,[],https://github.com/mapserver/mapserver/pull/5583,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5583#issuecomment-396529111,"See #5575
This initial pull request brings the number of errors when building with SWIG 3.0.12 from 1592 Error(s) to8 Error(s).
The remaining errors are:
[00:02:38]   mapscript.cs(25,58): error CS0234: The type or namespace name 'EntryPoint' does not exist in the namespace 'System.Runtime.InteropServices' (are you missing an assembly reference?) [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscript.cs(25,4): error CS1729: 'DllImportAttribute' does not contain a constructor that takes 2 arguments [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(191,10): error CS0111: Type 'mapscriptPINVOKE' already defines a member called '.cctor' with the same parameter types [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(313,3): error CS0246: The type or namespace name 'ThreadStaticAttribute' could not be found (are you missing a using directive or an assembly reference?) [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(313,3): error CS0246: The type or namespace name 'ThreadStatic' could not be found (are you missing a using directive or an assembly reference?) [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(298,58): error CS0234: The type or namespace name 'EntryPoint' does not exist in the namespace 'System.Runtime.InteropServices' (are you missing an assembly reference?) [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(298,4): error CS1729: 'DllImportAttribute' does not contain a constructor that takes 2 arguments [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]","@sdlime - the issues relate to using the newer version of SWIG rather than Appveyor, so the C# interface files need changes. I've not yet been able to fix the remaining 8 issues but will have another look.
Travis is passing as the C# bindings aren't built on Linux.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5583,2018-04-14T21:17:28Z,2018-10-11T20:45:05Z,2018-10-11T20:45:13Z,MERGED,True,111,100,3,https://github.com/geographika,Update C# bindings to work with SWIG 3.x,8,[],https://github.com/mapserver/mapserver/pull/5583,https://github.com/geographika,4,https://github.com/MapServer/MapServer/pull/5583#issuecomment-418988506,"See #5575
This initial pull request brings the number of errors when building with SWIG 3.0.12 from 1592 Error(s) to8 Error(s).
The remaining errors are:
[00:02:38]   mapscript.cs(25,58): error CS0234: The type or namespace name 'EntryPoint' does not exist in the namespace 'System.Runtime.InteropServices' (are you missing an assembly reference?) [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscript.cs(25,4): error CS1729: 'DllImportAttribute' does not contain a constructor that takes 2 arguments [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(191,10): error CS0111: Type 'mapscriptPINVOKE' already defines a member called '.cctor' with the same parameter types [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(313,3): error CS0246: The type or namespace name 'ThreadStaticAttribute' could not be found (are you missing a using directive or an assembly reference?) [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(313,3): error CS0246: The type or namespace name 'ThreadStatic' could not be found (are you missing a using directive or an assembly reference?) [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(298,58): error CS0234: The type or namespace name 'EntryPoint' does not exist in the namespace 'System.Runtime.InteropServices' (are you missing an assembly reference?) [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(298,4): error CS1729: 'DllImportAttribute' does not contain a constructor that takes 2 arguments [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]",Related pull request in GDAL: OSGeo/gdal#824,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5583,2018-04-14T21:17:28Z,2018-10-11T20:45:05Z,2018-10-11T20:45:13Z,MERGED,True,111,100,3,https://github.com/geographika,Update C# bindings to work with SWIG 3.x,8,[],https://github.com/mapserver/mapserver/pull/5583,https://github.com/geographika,5,https://github.com/MapServer/MapServer/pull/5583#issuecomment-425753323,"See #5575
This initial pull request brings the number of errors when building with SWIG 3.0.12 from 1592 Error(s) to8 Error(s).
The remaining errors are:
[00:02:38]   mapscript.cs(25,58): error CS0234: The type or namespace name 'EntryPoint' does not exist in the namespace 'System.Runtime.InteropServices' (are you missing an assembly reference?) [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscript.cs(25,4): error CS1729: 'DllImportAttribute' does not contain a constructor that takes 2 arguments [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(191,10): error CS0111: Type 'mapscriptPINVOKE' already defines a member called '.cctor' with the same parameter types [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(313,3): error CS0246: The type or namespace name 'ThreadStaticAttribute' could not be found (are you missing a using directive or an assembly reference?) [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(313,3): error CS0246: The type or namespace name 'ThreadStatic' could not be found (are you missing a using directive or an assembly reference?) [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(298,58): error CS0234: The type or namespace name 'EntryPoint' does not exist in the namespace 'System.Runtime.InteropServices' (are you missing an assembly reference?) [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]
[00:02:38]   mapscriptPINVOKE.cs(298,4): error CS1729: 'DllImportAttribute' does not contain a constructor that takes 2 arguments [C:\projects\mapserver\build\mapscript\csharp\mapscript.vcxproj]","This pull request is now complete. It does the following:

Replaces SWIG 1.3.39 used in the GISInternals Buildkit in Appveyor with the latest version of SWIG 3.0.12
This is then used to build the .NET MapScript and Python MapScript

SWIG 1.3.39 was released in 2009 and has issues with generating Python3 MapScript (and possibly PHP).
Nearly all changes to the CSharp MapScript interface files are to fully qualify .NET types. This is due to the following:

SWIG 3 fully qualifies the use of all .NET types. Furthermore, SWIG 3 avoids using directives in generated code. This breaks backwards compatibility with typemaps, pragmas,
etc written for use with SWIG 2 that assume the presence of using System; or using System.Runtime.InteropServices

http://www.swig.org/Doc3.0/CSharp.html#CSharp_introduction_swig2_compatibility
Only after completing the majority of these changes did I discover there is a flag to ignore these and maintain backwards compatibility:
If SWIG2_CSHARP is defined, SWIG 3 generates using directives in the intermediate class, module class, and proxy class code similar to those generated by SWIG 2. 
By this stage it was as easy to complete the changes, which may make the code more future proof. .NET MapScript still compiles with SWIG 1.3.39 even with the changes in this pull request.
One further issue was the following needed to be commented out:

%pragma(csharp) imclasscode=%{
  static $imclassname() {	  //static $imclassname() {
  }	  //}


Otherwise the following build error occurred:
 mapscriptPINVOKE.cs(191,10): error CS0111: Type 'mapscriptPINVOKE' already defines a member called '.cctor' with the same parameter types [C:\Installation\release-1911-x64-dev\build\mapscript\csharp\mapscript.vcxproj]",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5585,2018-04-15T17:33:41Z,2018-04-28T10:52:33Z,2018-04-28T10:52:40Z,MERGED,True,37,1,1,https://github.com/szekerest,PostGIS getExtent should consider layer filter (#5584),1,[],https://github.com/mapserver/mapserver/pull/5585,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5585,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5587,2018-04-16T17:33:11Z,2018-04-27T23:36:03Z,2018-04-27T23:36:04Z,MERGED,True,245,86,32,https://github.com/rouault,WMS: tag a layer as queryable in GetCapabilities response if queryable or sublayers are queryable (fixes #5570),1,[],https://github.com/mapserver/mapserver/pull/5587,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5587,"Also fix GetFeatureInfo request on the root layer to work when some
sublayers are not queryable.","Also fix GetFeatureInfo request on the root layer to work when some
sublayers are not queryable.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5587,2018-04-16T17:33:11Z,2018-04-27T23:36:03Z,2018-04-27T23:36:04Z,MERGED,True,245,86,32,https://github.com/rouault,WMS: tag a layer as queryable in GetCapabilities response if queryable or sublayers are queryable (fixes #5570),1,[],https://github.com/mapserver/mapserver/pull/5587,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5587#issuecomment-381686913,"Also fix GetFeatureInfo request on the root layer to work when some
sublayers are not queryable.","@sgrellet If you want to try this
git clone https://github.com/rouault/mapserver
git checkout wms_fix_queryable_caps",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5591,2018-04-30T19:53:42Z,2018-05-01T21:28:12Z,2018-05-01T21:28:12Z,MERGED,True,296,12,4,https://github.com/szekerest,Implement getNumFeatures for some drivers (#5586),1,[],https://github.com/mapserver/mapserver/pull/5591,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5591,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5597,2018-05-26T07:24:35Z,2018-10-11T13:08:12Z,2018-10-11T13:19:30Z,CLOSED,False,8,3,1,https://github.com/ravhed,Added error message when WMS filter parameter is empty,1,['WMS Server'],https://github.com/mapserver/mapserver/pull/5597,https://github.com/ravhed,1,https://github.com/MapServer/MapServer/pull/5597,"If the WMS filter parameter is empty (e.g. FILTER=) you will get a 500 error which doesn't make it clear what caused the request to fail.
This pull request will make sure a error message is returned. It also modifies two other error messages which seemed to be copied from WFS filtering.","If the WMS filter parameter is empty (e.g. FILTER=) you will get a 500 error which doesn't make it clear what caused the request to fail.
This pull request will make sure a error message is returned. It also modifies two other error messages which seemed to be copied from WFS filtering.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5597,2018-05-26T07:24:35Z,2018-10-11T13:08:12Z,2018-10-11T13:19:30Z,CLOSED,False,8,3,1,https://github.com/ravhed,Added error message when WMS filter parameter is empty,1,['WMS Server'],https://github.com/mapserver/mapserver/pull/5597,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5597#issuecomment-392850931,"If the WMS filter parameter is empty (e.g. FILTER=) you will get a 500 error which doesn't make it clear what caused the request to fail.
This pull request will make sure a error message is returned. It also modifies two other error messages which seemed to be copied from WFS filtering.","Out of curiosity, is an empty filter allowable as per the WMS specs? Also wondering if this should be a pull request against 7.0 instead... --Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5597,2018-05-26T07:24:35Z,2018-10-11T13:08:12Z,2018-10-11T13:19:30Z,CLOSED,False,8,3,1,https://github.com/ravhed,Added error message when WMS filter parameter is empty,1,['WMS Server'],https://github.com/mapserver/mapserver/pull/5597,https://github.com/ravhed,3,https://github.com/MapServer/MapServer/pull/5597#issuecomment-393040925,"If the WMS filter parameter is empty (e.g. FILTER=) you will get a 500 error which doesn't make it clear what caused the request to fail.
This pull request will make sure a error message is returned. It also modifies two other error messages which seemed to be copied from WFS filtering.","The filter parameter is vendor specific for WMS and is not part of the OGC WMS standard (at least I have never found anything regarding filter for WMS).
I'm not sure what would be the ideal solution when you receive an empty filter. Either you could just continue with the request as normal (applying no filter) or do what is currently happening - return an error. I see pros and cons with both alternatives.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5597,2018-05-26T07:24:35Z,2018-10-11T13:08:12Z,2018-10-11T13:19:30Z,CLOSED,False,8,3,1,https://github.com/ravhed,Added error message when WMS filter parameter is empty,1,['WMS Server'],https://github.com/mapserver/mapserver/pull/5597,https://github.com/pelord,4,https://github.com/MapServer/MapServer/pull/5597#issuecomment-397430397,"If the WMS filter parameter is empty (e.g. FILTER=) you will get a 500 error which doesn't make it clear what caused the request to fail.
This pull request will make sure a error message is returned. It also modifies two other error messages which seemed to be copied from WFS filtering.",+1  to process request as normal (applying no filter),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5597,2018-05-26T07:24:35Z,2018-10-11T13:08:12Z,2018-10-11T13:19:30Z,CLOSED,False,8,3,1,https://github.com/ravhed,Added error message when WMS filter parameter is empty,1,['WMS Server'],https://github.com/mapserver/mapserver/pull/5597,https://github.com/sdlime,5,https://github.com/MapServer/MapServer/pull/5597#issuecomment-414450457,"If the WMS filter parameter is empty (e.g. FILTER=) you will get a 500 error which doesn't make it clear what caused the request to fail.
This pull request will make sure a error message is returned. It also modifies two other error messages which seemed to be copied from WFS filtering.","Should take this one to mapserver-dev. We have 2 options:

throw an exception
ignore the empty filter

I don't suppose the WMS specification provides any clarity does it?
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5597,2018-05-26T07:24:35Z,2018-10-11T13:08:12Z,2018-10-11T13:19:30Z,CLOSED,False,8,3,1,https://github.com/ravhed,Added error message when WMS filter parameter is empty,1,['WMS Server'],https://github.com/mapserver/mapserver/pull/5597,https://github.com/dmorissette,6,https://github.com/MapServer/MapServer/pull/5597#issuecomment-414458142,"If the WMS filter parameter is empty (e.g. FILTER=) you will get a 500 error which doesn't make it clear what caused the request to fail.
This pull request will make sure a error message is returned. It also modifies two other error messages which seemed to be copied from WFS filtering.","I'd tend to go with silently ignoring an empty filter.
This would be consistent with the behavior when you have multiple layers and you are allowed to pass empty filters for some of the layers, e.g.
FILTER=()(<Filter><PropertyIsEqualTo><PropertyName>NAME</PropertyName><Literal>Digby</Literal></PropertyIsEqualTo></Filter>)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5597,2018-05-26T07:24:35Z,2018-10-11T13:08:12Z,2018-10-11T13:19:30Z,CLOSED,False,8,3,1,https://github.com/ravhed,Added error message when WMS filter parameter is empty,1,['WMS Server'],https://github.com/mapserver/mapserver/pull/5597,https://github.com/sdlime,7,https://github.com/MapServer/MapServer/pull/5597#issuecomment-414466677,"If the WMS filter parameter is empty (e.g. FILTER=) you will get a 500 error which doesn't make it clear what caused the request to fail.
This pull request will make sure a error message is returned. It also modifies two other error messages which seemed to be copied from WFS filtering.","Is there an easy way to determine if a filter is indeed empty?

From: Daniel Morissette [mailto:notifications@github.com]
Sent: Monday, August 20, 2018 3:49 PM
To: mapserver/mapserver <mapserver@noreply.github.com>
Cc: Lime, Steve D (MNIT) <steve.lime@state.mn.us>; Comment <comment@noreply.github.com>
Subject: Re: [mapserver/mapserver] Added error message when WMS filter parameter is empty (#5597)


I'd tend to go with silently ignoring an empty filter.

This would be consistent with the behavior when you have multiple layers and you are allowed to pass empty filters for some of the layers, e.g.

FILTER=()(<Filter><PropertyIsEqualTo><PropertyName>NAME</PropertyName><Literal>Digby</Literal></PropertyIsEqualTo></Filter>)

—
You are receiving this because you commented.
Reply to this email directly, view it on GitHub<#5597 (comment)>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ABhm-yboWZVXwvfhcw281DxgVi9uuN23ks5uSyC0gaJpZM4UO0Ob>.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5597,2018-05-26T07:24:35Z,2018-10-11T13:08:12Z,2018-10-11T13:19:30Z,CLOSED,False,8,3,1,https://github.com/ravhed,Added error message when WMS filter parameter is empty,1,['WMS Server'],https://github.com/mapserver/mapserver/pull/5597,https://github.com/dmorissette,8,https://github.com/MapServer/MapServer/pull/5597#issuecomment-414468657,"If the WMS filter parameter is empty (e.g. FILTER=) you will get a 500 error which doesn't make it clear what caused the request to fail.
This pull request will make sure a error message is returned. It also modifies two other error messages which seemed to be copied from WFS filtering.","Not sure if I understand the question. By ""empty filter"" I meant the ""FILTER="" param was provided in the QUERY_STRING, but its value is empty.
This is already tested in the proposed patch using an if (!filter || strlen(filter) == 0)  to produce an error ... that would have to be changed to silently ignore the FILTER param.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5597,2018-05-26T07:24:35Z,2018-10-11T13:08:12Z,2018-10-11T13:19:30Z,CLOSED,False,8,3,1,https://github.com/ravhed,Added error message when WMS filter parameter is empty,1,['WMS Server'],https://github.com/mapserver/mapserver/pull/5597,https://github.com/ravhed,9,https://github.com/MapServer/MapServer/pull/5597#issuecomment-428948339,"If the WMS filter parameter is empty (e.g. FILTER=) you will get a 500 error which doesn't make it clear what caused the request to fail.
This pull request will make sure a error message is returned. It also modifies two other error messages which seemed to be copied from WFS filtering.",Closing this pull request to create a new one targeting branch-7-2,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5599,2018-05-30T12:58:48Z,2018-06-06T21:37:02Z,2018-06-06T21:37:03Z,MERGED,True,13,11,11,https://github.com/constantinius,Fixing WCS 2.0 inspire download service schema location.,2,[],https://github.com/mapserver/mapserver/pull/5599,https://github.com/constantinius,1,https://github.com/MapServer/MapServer/pull/5599,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5601,2018-06-01T18:38:57Z,2018-06-01T20:55:16Z,2018-06-01T20:55:23Z,CLOSED,False,9,8,1,https://github.com/3x0dv5,simpler way of generating a list of unique elements,1,[],https://github.com/mapserver/mapserver/pull/5601,https://github.com/3x0dv5,1,https://github.com/MapServer/MapServer/pull/5601,"as an example
def unique(_list):
""""""
Function needed to make unique lists.
:param list _list: a list of items
:rtype: list
:return: a list with unique elements.
""""""
return list(set(_list))

a = [1,2,3,3,4,4]
print(unique(a))
[1, 2, 3, 4]","as an example
def unique(_list):
""""""
Function needed to make unique lists.
:param list _list: a list of items
:rtype: list
:return: a list with unique elements.
""""""
return list(set(_list))

a = [1,2,3,3,4,4]
print(unique(a))
[1, 2, 3, 4]",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5603,2018-06-02T18:55:20Z,2018-06-02T19:04:34Z,2018-06-04T21:42:33Z,MERGED,True,164,138,1,https://github.com/szekerest,Fix mssql filter string limitation (#5602),1,[],https://github.com/mapserver/mapserver/pull/5603,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5603,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5603,2018-06-02T18:55:20Z,2018-06-02T19:04:34Z,2018-06-04T21:42:33Z,MERGED,True,164,138,1,https://github.com/szekerest,Fix mssql filter string limitation (#5602),1,[],https://github.com/mapserver/mapserver/pull/5603,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5603#issuecomment-394506816,,Should this be back ported? Certainly could be part of 7.2 IMHO.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5603,2018-06-02T18:55:20Z,2018-06-02T19:04:34Z,2018-06-04T21:42:33Z,MERGED,True,164,138,1,https://github.com/szekerest,Fix mssql filter string limitation (#5602),1,[],https://github.com/mapserver/mapserver/pull/5603,https://github.com/szekerest,3,https://github.com/MapServer/MapServer/pull/5603#issuecomment-394509309,,"Yes,definitely. I’ll do that tomorrow",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5605,2018-06-11T10:33:30Z,2018-06-11T11:00:51Z,2018-06-11T11:00:51Z,CLOSED,False,189,6,3,https://github.com/rouault,"Apply map rotation to symbols, similarly to the rule of labels (fixes #5271)",1,[],https://github.com/mapserver/mapserver/pull/5605,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5605,"If the symbol angle is unspecified or 0, then the map rotation is ignored.
Otherwise, the map rotation is applied.","If the symbol angle is unspecified or 0, then the map rotation is ignored.
Otherwise, the map rotation is applied.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5605,2018-06-11T10:33:30Z,2018-06-11T11:00:51Z,2018-06-11T11:00:51Z,CLOSED,False,189,6,3,https://github.com/rouault,"Apply map rotation to symbols, similarly to the rule of labels (fixes #5271)",1,[],https://github.com/mapserver/mapserver/pull/5605,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5605#issuecomment-396204946,"If the symbol angle is unspecified or 0, then the map rotation is ignored.
Otherwise, the map rotation is applied.",Closing that one for #5606 that is against branch-7-2,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5606,2018-06-11T11:00:24Z,2018-06-11T11:08:05Z,2018-06-11T11:08:05Z,MERGED,True,189,6,3,https://github.com/rouault,"Apply map rotation to symbols, similarly to the rule of labels (fixes #5271)",1,[],https://github.com/mapserver/mapserver/pull/5606,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5606,"If the symbol angle is unspecified or 0, then the map rotation is ignored.
Otherwise, the map rotation is applied.","If the symbol angle is unspecified or 0, then the map rotation is ignored.
Otherwise, the map rotation is applied.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5606,2018-06-11T11:00:24Z,2018-06-11T11:08:05Z,2018-06-11T11:08:05Z,MERGED,True,189,6,3,https://github.com/rouault,"Apply map rotation to symbols, similarly to the rule of labels (fixes #5271)",1,[],https://github.com/mapserver/mapserver/pull/5606,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5606#issuecomment-396206554,"If the symbol angle is unspecified or 0, then the map rotation is ignored.
Otherwise, the map rotation is applied.","The appveyor build issue
  LINK : fatal error LNK1181: cannot open input file '..\sdk\release-1911-x64\lib\freetype2411.lib' [C:\projects\mapserver\build\mapserver.vcxproj]

is unrelated and due to the upgrade of freetype to 2.9.1 in gisinternals ( gisinternals/buildsystem@252a46e ) . Working on that separately (#5607)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5607,2018-06-11T11:02:57Z,2018-06-11T11:15:42Z,2018-06-11T11:15:42Z,MERGED,True,1,1,1,https://github.com/rouault,appveyor.yml: reflect change of name to freetype.lib in gisinternals SDK,1,[],https://github.com/mapserver/mapserver/pull/5607,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5607,See gisinternals/buildsystem@252a46e,See gisinternals/buildsystem@252a46e,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5608,2018-06-14T07:06:18Z,2018-06-14T17:18:07Z,2018-06-14T17:18:07Z,CLOSED,False,5,3,1,https://github.com/geographika,Use strcpy rather than strdup,1,[],https://github.com/mapserver/mapserver/pull/5608,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5608,"I guess I must have missed this in the original pull request. This was a fix supplied by @tbonfort and relates to this - #5277
This pull request includes the code from https://github.com/tbonfort/mapserver/commit/bacf44f24a2dab8eff47d98788a302b7e0b0bb49
If strdup is used on Windows/MSVC then char variables don't get set correctly (at least when using the debugger).
I'm not sure if this should committed to master or the soon to be released 7.2 branch (which would be ideal).","I guess I must have missed this in the original pull request. This was a fix supplied by @tbonfort and relates to this - #5277
This pull request includes the code from https://github.com/tbonfort/mapserver/commit/bacf44f24a2dab8eff47d98788a302b7e0b0bb49
If strdup is used on Windows/MSVC then char variables don't get set correctly (at least when using the debugger).
I'm not sure if this should committed to master or the soon to be released 7.2 branch (which would be ideal).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5608,2018-06-14T07:06:18Z,2018-06-14T17:18:07Z,2018-06-14T17:18:07Z,CLOSED,False,5,3,1,https://github.com/geographika,Use strcpy rather than strdup,1,[],https://github.com/mapserver/mapserver/pull/5608,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5608#issuecomment-397372198,"I guess I must have missed this in the original pull request. This was a fix supplied by @tbonfort and relates to this - #5277
This pull request includes the code from https://github.com/tbonfort/mapserver/commit/bacf44f24a2dab8eff47d98788a302b7e0b0bb49
If strdup is used on Windows/MSVC then char variables don't get set correctly (at least when using the debugger).
I'm not sure if this should committed to master or the soon to be released 7.2 branch (which would be ideal).","Looking at the release steps at https://github.com/mapserver/mapserver/wiki/MapServer-7.2-Release-Plan then I guess this should be added to the 7.2 branch if it can be included in the next release.
Replaced with #5610",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5610,2018-06-14T17:17:36Z,2018-06-15T09:58:16Z,2018-06-15T09:58:16Z,MERGED,True,15,11,1,https://github.com/geographika,Use strcpy rather than strdup,4,[],https://github.com/mapserver/mapserver/pull/5610,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5610,"I guess I must have missed this in the original pull request. This was a fix supplied by @tbonfort and relates to this - #5277
This pull request includes the code from https://github.com/tbonfort/mapserver/commit/bacf44f24a2dab8eff47d98788a302b7e0b0bb49
If strdup is used on Windows/MSVC then char variables don't get set correctly (at least when using the debugger).","I guess I must have missed this in the original pull request. This was a fix supplied by @tbonfort and relates to this - #5277
This pull request includes the code from https://github.com/tbonfort/mapserver/commit/bacf44f24a2dab8eff47d98788a302b7e0b0bb49
If strdup is used on Windows/MSVC then char variables don't get set correctly (at least when using the debugger).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5610,2018-06-14T17:17:36Z,2018-06-15T09:58:16Z,2018-06-15T09:58:16Z,MERGED,True,15,11,1,https://github.com/geographika,Use strcpy rather than strdup,4,[],https://github.com/mapserver/mapserver/pull/5610,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5610#issuecomment-397430604,"I guess I must have missed this in the original pull request. This was a fix supplied by @tbonfort and relates to this - #5277
This pull request includes the code from https://github.com/tbonfort/mapserver/commit/bacf44f24a2dab8eff47d98788a302b7e0b0bb49
If strdup is used on Windows/MSVC then char variables don't get set correctly (at least when using the debugger).",@rouault - thanks for the review. msStrdup is used throughout the codebase so I don't want to add any overhead. Could any string lengths be greater than an unsigned int used for nStringLength?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5610,2018-06-14T17:17:36Z,2018-06-15T09:58:16Z,2018-06-15T09:58:16Z,MERGED,True,15,11,1,https://github.com/geographika,Use strcpy rather than strdup,4,[],https://github.com/mapserver/mapserver/pull/5610,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5610#issuecomment-397546687,"I guess I must have missed this in the original pull request. This was a fix supplied by @tbonfort and relates to this - #5277
This pull request includes the code from https://github.com/tbonfort/mapserver/commit/bacf44f24a2dab8eff47d98788a302b7e0b0bb49
If strdup is used on Windows/MSVC then char variables don't get set correctly (at least when using the debugger).",@rouault - thanks for your patience! Variables now set after the NULL check.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5611,2018-06-14T22:41:42Z,2018-06-18T20:07:31Z,2018-06-18T21:46:22Z,CLOSED,False,170,9,12,https://github.com/AlexanderGabriel,Branch 7.2 php mapscript ng,7,[],https://github.com/mapserver/mapserver/pull/5611,https://github.com/AlexanderGabriel,1,https://github.com/MapServer/MapServer/pull/5611,"Hi,
so this is my current state of work on PHP mapscript extension using SWIG.
I renamed the extension to mapscriptng because of windows. phpng_mapscript would cause the extension files to be named php_phpng_mapscript.
There is still work:

There is a warning when generating the wrapper for a method called ""empty"". It is renamed to c_empty. You'll see this when compiling. How do ""we"" handle this?
On Windows, there is a Problem with swig. It will not be possible to compile thread-safe extensions with swig 3.0.12 but if you build current swig from git build you can generate code that compiles. NTS-Extension work.
Build Instruction need to be updated. Especially for Windows. I have some batch files here that will do everything. I can update the windows readmes.

Linux users should have no problems building it. I tested on Debian Testing a few weeks ago. Functionality should be there but i did really only do some basic tests...
Have Fun :)
Kind Regards,
Alex","Hi,
so this is my current state of work on PHP mapscript extension using SWIG.
I renamed the extension to mapscriptng because of windows. phpng_mapscript would cause the extension files to be named php_phpng_mapscript.
There is still work:

There is a warning when generating the wrapper for a method called ""empty"". It is renamed to c_empty. You'll see this when compiling. How do ""we"" handle this?
On Windows, there is a Problem with swig. It will not be possible to compile thread-safe extensions with swig 3.0.12 but if you build current swig from git build you can generate code that compiles. NTS-Extension work.
Build Instruction need to be updated. Especially for Windows. I have some batch files here that will do everything. I can update the windows readmes.

Linux users should have no problems building it. I tested on Debian Testing a few weeks ago. Functionality should be there but i did really only do some basic tests...
Have Fun :)
Kind Regards,
Alex",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5611,2018-06-14T22:41:42Z,2018-06-18T20:07:31Z,2018-06-18T21:46:22Z,CLOSED,False,170,9,12,https://github.com/AlexanderGabriel,Branch 7.2 php mapscript ng,7,[],https://github.com/mapserver/mapserver/pull/5611,https://github.com/AlexanderGabriel,2,https://github.com/MapServer/MapServer/pull/5611#issuecomment-398178859,"Hi,
so this is my current state of work on PHP mapscript extension using SWIG.
I renamed the extension to mapscriptng because of windows. phpng_mapscript would cause the extension files to be named php_phpng_mapscript.
There is still work:

There is a warning when generating the wrapper for a method called ""empty"". It is renamed to c_empty. You'll see this when compiling. How do ""we"" handle this?
On Windows, there is a Problem with swig. It will not be possible to compile thread-safe extensions with swig 3.0.12 but if you build current swig from git build you can generate code that compiles. NTS-Extension work.
Build Instruction need to be updated. Especially for Windows. I have some batch files here that will do everything. I can update the windows readmes.

Linux users should have no problems building it. I tested on Debian Testing a few weeks ago. Functionality should be there but i did really only do some basic tests...
Have Fun :)
Kind Regards,
Alex","Hi,
please don't merge this. I will put everything into one commit and open another pull-request. Will look more professional ;)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5611,2018-06-14T22:41:42Z,2018-06-18T20:07:31Z,2018-06-18T21:46:22Z,CLOSED,False,170,9,12,https://github.com/AlexanderGabriel,Branch 7.2 php mapscript ng,7,[],https://github.com/mapserver/mapserver/pull/5611,https://github.com/AlexanderGabriel,3,https://github.com/MapServer/MapServer/pull/5611#issuecomment-398206041,"Hi,
so this is my current state of work on PHP mapscript extension using SWIG.
I renamed the extension to mapscriptng because of windows. phpng_mapscript would cause the extension files to be named php_phpng_mapscript.
There is still work:

There is a warning when generating the wrapper for a method called ""empty"". It is renamed to c_empty. You'll see this when compiling. How do ""we"" handle this?
On Windows, there is a Problem with swig. It will not be possible to compile thread-safe extensions with swig 3.0.12 but if you build current swig from git build you can generate code that compiles. NTS-Extension work.
Build Instruction need to be updated. Especially for Windows. I have some batch files here that will do everything. I can update the windows readmes.

Linux users should have no problems building it. I tested on Debian Testing a few weeks ago. Functionality should be there but i did really only do some basic tests...
Have Fun :)
Kind Regards,
Alex",My new Request: #5616,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5614,2018-06-15T23:31:32Z,2018-06-20T06:27:33Z,2018-06-20T06:27:33Z,CLOSED,False,201,338,219,https://github.com/geographika,Add Python methods to hashtable so it can be used like a dict,13,[],https://github.com/mapserver/mapserver/pull/5614,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5614,"Add various Python methods so that a hashtable can be used like a dict. See #5582 for background.
API is now as follows:
import mapscript
ht = mapscript.hashTableObj()

ht[""key1""] = ""value1""
ht[""key2""] = ""value2""
ht[""key3""] = ""value3""
ht[""key4""] = ""value4""

del ht[""key1""]
print(ht.keys)
print(len(ht))
print(""k1"" in ht)
print(len(ht))
Or for a more concrete example:
print(map.web.metadata.keys()) # ['wms_srs', 'ows_enable_request', 'ows_http_max_age']
print(map.web.metadata[""wms_srs""]) # EPSG:4326
map.web.metadata[""wms_srs""] = ""EPSG:2157""
print(map.web.metadata[""wms_srs""])  # EPSG:2157

Travis builds currently failing for unrelated reasons.","Add various Python methods so that a hashtable can be used like a dict. See #5582 for background.
API is now as follows:
import mapscript
ht = mapscript.hashTableObj()

ht[""key1""] = ""value1""
ht[""key2""] = ""value2""
ht[""key3""] = ""value3""
ht[""key4""] = ""value4""

del ht[""key1""]
print(ht.keys)
print(len(ht))
print(""k1"" in ht)
print(len(ht))
Or for a more concrete example:
print(map.web.metadata.keys()) # ['wms_srs', 'ows_enable_request', 'ows_http_max_age']
print(map.web.metadata[""wms_srs""]) # EPSG:4326
map.web.metadata[""wms_srs""] = ""EPSG:2157""
print(map.web.metadata[""wms_srs""])  # EPSG:2157

Travis builds currently failing for unrelated reasons.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5615,2018-06-18T14:53:19Z,2018-06-19T09:34:29Z,2018-06-19T09:34:29Z,MERGED,True,146,293,216,https://github.com/rouault,.travis.yml and Vagrant: update to Trusty,1,[],https://github.com/mapserver/mapserver/pull/5615,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5615,"Due to UbuntuGIS PPA having removed support for Ubuntu Precise, we need to upgrade to Trusty. This causes a lot of expected results to be refreshed due to changes in library versions (GDAL in particular). There are a few strange changes though that could/should be later investigated, like msautotest/wxs/expected/wfs_ogr_native_sql_37.xml , msautotest/wxs/expected/wfs_ogr_native_sql_37.xml msautotest/wxs/expected/wfs_ogr_native_sql_40.xml , and msautotest/wxs/wfs_query_cache.map wfs_query_cache_2.xml that I had to disable due to inconsistant result between Vagrant and Travis","Due to UbuntuGIS PPA having removed support for Ubuntu Precise, we need to upgrade to Trusty. This causes a lot of expected results to be refreshed due to changes in library versions (GDAL in particular). There are a few strange changes though that could/should be later investigated, like msautotest/wxs/expected/wfs_ogr_native_sql_37.xml , msautotest/wxs/expected/wfs_ogr_native_sql_37.xml msautotest/wxs/expected/wfs_ogr_native_sql_40.xml , and msautotest/wxs/wfs_query_cache.map wfs_query_cache_2.xml that I had to disable due to inconsistant result between Vagrant and Travis",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5615,2018-06-18T14:53:19Z,2018-06-19T09:34:29Z,2018-06-19T09:34:29Z,MERGED,True,146,293,216,https://github.com/rouault,.travis.yml and Vagrant: update to Trusty,1,[],https://github.com/mapserver/mapserver/pull/5615,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5615#issuecomment-398216288,"Due to UbuntuGIS PPA having removed support for Ubuntu Precise, we need to upgrade to Trusty. This causes a lot of expected results to be refreshed due to changes in library versions (GDAL in particular). There are a few strange changes though that could/should be later investigated, like msautotest/wxs/expected/wfs_ogr_native_sql_37.xml , msautotest/wxs/expected/wfs_ogr_native_sql_37.xml msautotest/wxs/expected/wfs_ogr_native_sql_40.xml , and msautotest/wxs/wfs_query_cache.map wfs_query_cache_2.xml that I had to disable due to inconsistant result between Vagrant and Travis",+1 - we can look into those tests later as you suggest.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5616,2018-06-18T21:46:01Z,2018-06-21T18:16:33Z,2018-06-21T18:16:33Z,CLOSED,False,316,301,227,https://github.com/AlexanderGabriel,Add Support for PHP-NG MapScript (via SWIG),7,[],https://github.com/mapserver/mapserver/pull/5616,https://github.com/AlexanderGabriel,1,https://github.com/MapServer/MapServer/pull/5616,"Hi again,
this will add support for PHP-MapScript via SWIG.
There is still work:

There is a warning when generating the wrapper for a method called ""empty"". It is renamed to c_empty. You'll see this when compiling. How do ""we"" handle this?
On Windows, there is a Problem with swig. It will not be possible to compile thread-safe extensions with swig 3.0.12 but if you build current swig from git build you can generate code that compiles. NTS-Extension work.
Build Instruction need to be updated. Especially for Windows. I have some batch files here that will do everything. I can update the windows readmes.

Linux users should have no problems building it. I tested on Debian Testing a few weeks ago. Functionality should be there but i did really only do some basic tests...
Kind Regards,
Alex","Hi again,
this will add support for PHP-MapScript via SWIG.
There is still work:

There is a warning when generating the wrapper for a method called ""empty"". It is renamed to c_empty. You'll see this when compiling. How do ""we"" handle this?
On Windows, there is a Problem with swig. It will not be possible to compile thread-safe extensions with swig 3.0.12 but if you build current swig from git build you can generate code that compiles. NTS-Extension work.
Build Instruction need to be updated. Especially for Windows. I have some batch files here that will do everything. I can update the windows readmes.

Linux users should have no problems building it. I tested on Debian Testing a few weeks ago. Functionality should be there but i did really only do some basic tests...
Kind Regards,
Alex",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5616,2018-06-18T21:46:01Z,2018-06-21T18:16:33Z,2018-06-21T18:16:33Z,CLOSED,False,316,301,227,https://github.com/AlexanderGabriel,Add Support for PHP-NG MapScript (via SWIG),7,[],https://github.com/mapserver/mapserver/pull/5616,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5616#issuecomment-398490324,"Hi again,
this will add support for PHP-MapScript via SWIG.
There is still work:

There is a warning when generating the wrapper for a method called ""empty"". It is renamed to c_empty. You'll see this when compiling. How do ""we"" handle this?
On Windows, there is a Problem with swig. It will not be possible to compile thread-safe extensions with swig 3.0.12 but if you build current swig from git build you can generate code that compiles. NTS-Extension work.
Build Instruction need to be updated. Especially for Windows. I have some batch files here that will do everything. I can update the windows readmes.

Linux users should have no problems building it. I tested on Debian Testing a few weeks ago. Functionality should be there but i did really only do some basic tests...
Kind Regards,
Alex",Any idea what's up with the ci fails? You may need to re-sync with the 7.2 branch (there were some changes to the travis setup that just were committed this morning).,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5616,2018-06-18T21:46:01Z,2018-06-21T18:16:33Z,2018-06-21T18:16:33Z,CLOSED,False,316,301,227,https://github.com/AlexanderGabriel,Add Support for PHP-NG MapScript (via SWIG),7,[],https://github.com/mapserver/mapserver/pull/5616,https://github.com/AlexanderGabriel,3,https://github.com/MapServer/MapServer/pull/5616#issuecomment-398520365,"Hi again,
this will add support for PHP-MapScript via SWIG.
There is still work:

There is a warning when generating the wrapper for a method called ""empty"". It is renamed to c_empty. You'll see this when compiling. How do ""we"" handle this?
On Windows, there is a Problem with swig. It will not be possible to compile thread-safe extensions with swig 3.0.12 but if you build current swig from git build you can generate code that compiles. NTS-Extension work.
Build Instruction need to be updated. Especially for Windows. I have some batch files here that will do everything. I can update the windows readmes.

Linux users should have no problems building it. I tested on Debian Testing a few weeks ago. Functionality should be there but i did really only do some basic tests...
Kind Regards,
Alex","Not sure about the appveyor error. Building the extension requires php-sdk to be ""installed"" and ""startet"" because it proviedes an environment variable PHP_SDK_VC that helps to find the correct php sources.
Can you define env-vars for the builds? If not i can try to add some more ifs to determine used Visual Studio Verasion and find the path.
The travis-build i think failes because the versions of postgis changed.
In debian testing they are:
postgresql-10-postgis-2.4 - Geographic objects support for PostgreSQL 10
postgresql-10-postgis-2.4-scripts - Geographic objects support for PostgreSQL 10 -- SQL scripts
But before we do anything that is eventually already fixed: Is there a smart way to sync or do i have to make a new request?
Branch 7.2 was merged to 7.0 today. Should i use 7.0 or 7.2 as base-branch?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5616,2018-06-18T21:46:01Z,2018-06-21T18:16:33Z,2018-06-21T18:16:33Z,CLOSED,False,316,301,227,https://github.com/AlexanderGabriel,Add Support for PHP-NG MapScript (via SWIG),7,[],https://github.com/mapserver/mapserver/pull/5616,https://github.com/AlexanderGabriel,4,https://github.com/MapServer/MapServer/pull/5616#issuecomment-399196655,"Hi again,
this will add support for PHP-MapScript via SWIG.
There is still work:

There is a warning when generating the wrapper for a method called ""empty"". It is renamed to c_empty. You'll see this when compiling. How do ""we"" handle this?
On Windows, there is a Problem with swig. It will not be possible to compile thread-safe extensions with swig 3.0.12 but if you build current swig from git build you can generate code that compiles. NTS-Extension work.
Build Instruction need to be updated. Especially for Windows. I have some batch files here that will do everything. I can update the windows readmes.

Linux users should have no problems building it. I tested on Debian Testing a few weeks ago. Functionality should be there but i did really only do some basic tests...
Kind Regards,
Alex",Next try here: #5619,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5619,2018-06-19T20:59:09Z,2018-06-24T00:18:08Z,2018-06-24T00:18:08Z,CLOSED,False,231,22,17,https://github.com/AlexanderGabriel,Add Support for PHP-NG MapScript (via SWIG),9,[],https://github.com/mapserver/mapserver/pull/5619,https://github.com/AlexanderGabriel,1,https://github.com/MapServer/MapServer/pull/5619,"Next try.
This will add support for PHP-MapScript via SWIG.
There is still work:

There is a warning when generating the wrapper for a method called ""empty"". It is renamed to c_empty. You'll see this when compiling. How do ""we"" handle this?
On Windows, there is a Problem with swig. It will not be possible to compile thread-safe extensions with swig 3.0.12 but if you build current swig from git build you can generate code that compiles. NTS-Extension work.
Build Instruction need to be updated. Especially for Windows. I have some batch files here that will do everything. I can update the windows readmes.

Linux users should have no problems building it. I tested on Debian Testing a few weeks ago. Functionality should be there but i did really only do some basic tests...
Kind Regards,
Alex","Next try.
This will add support for PHP-MapScript via SWIG.
There is still work:

There is a warning when generating the wrapper for a method called ""empty"". It is renamed to c_empty. You'll see this when compiling. How do ""we"" handle this?
On Windows, there is a Problem with swig. It will not be possible to compile thread-safe extensions with swig 3.0.12 but if you build current swig from git build you can generate code that compiles. NTS-Extension work.
Build Instruction need to be updated. Especially for Windows. I have some batch files here that will do everything. I can update the windows readmes.

Linux users should have no problems building it. I tested on Debian Testing a few weeks ago. Functionality should be there but i did really only do some basic tests...
Kind Regards,
Alex",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5619,2018-06-19T20:59:09Z,2018-06-24T00:18:08Z,2018-06-24T00:18:08Z,CLOSED,False,231,22,17,https://github.com/AlexanderGabriel,Add Support for PHP-NG MapScript (via SWIG),9,[],https://github.com/mapserver/mapserver/pull/5619,https://github.com/AlexanderGabriel,2,https://github.com/MapServer/MapServer/pull/5619#issuecomment-398562667,"Next try.
This will add support for PHP-MapScript via SWIG.
There is still work:

There is a warning when generating the wrapper for a method called ""empty"". It is renamed to c_empty. You'll see this when compiling. How do ""we"" handle this?
On Windows, there is a Problem with swig. It will not be possible to compile thread-safe extensions with swig 3.0.12 but if you build current swig from git build you can generate code that compiles. NTS-Extension work.
Build Instruction need to be updated. Especially for Windows. I have some batch files here that will do everything. I can update the windows readmes.

Linux users should have no problems building it. I tested on Debian Testing a few weeks ago. Functionality should be there but i did really only do some basic tests...
Kind Regards,
Alex","Don't know how to fix this but i can provide you with information about my steps to build. maybe, you can adapt this to appveyor and make that work. i can give you write access to my repo if you want.

First install git and VS 2017 Community
Create Directory C:\dev\work
Open Native Tools Command Prompt
First we build PHP (Some Commands are to clean up old runs)
cd C:\dev\work && rmdir /s /q C:\dev\work\php-sdk
git clone https://github.com/Microsoft/php-sdk-binary-tools.git php-sdk
cd c:\dev\work\php-sdk
set VS_VERSION=%VSCMD_VER:~0,2%
phpsdk-vc%VS_VERSION%-%VSCMD_ARG_TGT_ARCH%.bat
phpsdk_buildtree phpmaster
cd C:\dev\work\php-sdk\phpmaster%PHP_SDK_VC%%VSCMD_ARG_TGT_ARCH% && rmdir /s /q C:\dev\work\php-sdk\phpmaster%PHP_SDK_VC%%VSCMD_ARG_TGT_ARCH%\php-src
git clone https://github.com/php/php-src.git
cd C:\dev\work\php-sdk\phpmaster%PHP_SDK_VC%%VSCMD_ARG_TGT_ARCH%\php-src
phpsdk_deps --update --branch master
buildconf
configure --enable-snapshot-build
nmake snap

Get gnulib:

cd C:\dev\work && rmdir /s /q C:\dev\work\gnulib
git clone git://git.savannah.gnu.org/gnulib.git

Now get GISInternals Dependencies (stay in PHP-SDK-Shell to have wget and unzip available):

cd C:\dev\work
if not exist C:\dev\packages mkdir C:\dev\packages
if not exist C:\dev\packages\gisinternals%VSCMD_ARG_TGT_ARCH%\ mkdir C:\dev\packages\gisinternals%VSCMD_ARG_TGT_ARCH%\
rmdir /s /q C:\dev\work\gisinternals%VSCMD_ARG_TGT_ARCH%
mkdir C:\dev\work\gisinternals%VSCMD_ARG_TGT_ARCH%
if not exist C:\dev\packages\gisinternals%VSCMD_ARG_TGT_ARCH% mkdir C:\dev\packages\gisinternals%VSCMD_ARG_TGT_ARCH%
set GISInternalsArchitecture=-
if %VSCMD_ARG_TGT_ARCH% == x64 set GISInternalsArchitecture=-%VSCMD_ARG_TGT_ARCH%-
if not exist C:\dev\packages\gisinternals%VSCMD_ARG_TGT_ARCH%\release-1911%GISInternalsArchitecture%dev.zip wget -O C:\dev\packages\gisinternals%VSCMD_ARG_TGT_ARCH%\release-1911%GISInternalsArchitecture%dev.zip http://download.gisinternals.com/sdk/downloads/release-1911%GISInternalsArchitecture%dev.zip
unzip -q -o C:\dev\packages\gisinternals%VSCMD_ARG_TGT_ARCH%\release-1911%GISInternalsArchitecture%dev.zip -d C:\dev\work\gisinternals%VSCMD_ARG_TGT_ARCH%
if not exist C:\dev\packages\gisinternals%VSCMD_ARG_TGT_ARCH%\release-1911%GISInternalsArchitecture%gdal-mapserver-src.zip wget -O C:\dev\packages\gisinternals%VSCMD_ARG_TGT_ARCH%\release-1911%GISInternalsArchitecture%gdal-mapserver-src.zip http://download.gisinternals.com/sdk/downloads/release-1911%GISInternalsArchitecture%gdal-mapserver-src.zip
unzip -q -o C:\dev\packages\gisinternals%VSCMD_ARG_TGT_ARCH%\release-1911%GISInternalsArchitecture%gdal-mapserver-src.zip -d C:\dev\work\gisinternals%VSCMD_ARG_TGT_ARCH%
if not exist C:\dev\packages\gisinternals%VSCMD_ARG_TGT_ARCH%\release-1911%GISInternalsArchitecture%gdal-mapserver-libs.zip wget -O C:\dev\packages\gisinternals%VSCMD_ARG_TGT_ARCH%\release-1911%GISInternalsArchitecture%gdal-mapserver-libs.zip http://download.gisinternals.com/sdk/downloads/release-1911%GISInternalsArchitecture%gdal-mapserver-libs.zip
unzip -q -o C:\dev\packages\gisinternals%VSCMD_ARG_TGT_ARCH%\release-1911%GISInternalsArchitecture%gdal-mapserver-libs.zip -d C:\dev\work\gisinternals%VSCMD_ARG_TGT_ARCH%
if not exist C:\dev\packages\gisinternals%VSCMD_ARG_TGT_ARCH%\release-1911%GISInternalsArchitecture%gdal-mapserver.zip wget -O C:\dev\packages\gisinternals%VSCMD_ARG_TGT_ARCH%\release-1911%GISInternalsArchitecture%gdal-mapserver.zip http://download.gisinternals.com/sdk/downloads/release-1911%GISInternalsArchitecture%gdal-mapserver.zip
unzip -q -o C:\dev\packages\gisinternals%VSCMD_ARG_TGT_ARCH%\release-1911%GISInternalsArchitecture%gdal-mapserver.zip -d C:\dev\work\gisinternals%VSCMD_ARG_TGT_ARCH%

Now Build Mapserver

cd C:\dev\work && rmdir /s /q C:\dev\work\mapserver
git clone https://github.com/AlexanderGabriel/mapserver
cd C:\dev\work\mapserver && rmdir /s /q C:\dev\work\mapserver\build
git fetch origin
git checkout -b master-PHP-Mapscript-NG origin/master-PHP-Mapscript-NG
mkdir C:\dev\work\mapserver\build
cd C:\dev\work\mapserver\build
cmake C:\dev\work\mapserver -G ""NMake Makefiles"" -DCMAKE_BUILD_TYPE=Release -Wno-dev -DCMAKE_INSTALL_PREFIX=C:\dev\builds\mapserver -DCMAKE_PREFIX_PATH=C:\dev\work\gisinternals%VSCMD_ARG_TGT_ARCH%;C:\dev\work\gnulib\lib;C:\dev\work\gnulib\include;C:\dev\work\gisinternals%VSCMD_ARG_TGT_ARCH%\lib;C:\dev\work\gisinternals%VSCMD_ARG_TGT_ARCH%\include -DREGEX_DIR=C:\dev\work\regex-0.12
cmake C:\dev\work\mapserver -DWITH_POSTGIS=0 -DWITH_PROTOBUFC=0 -DWITH_THREAD_SAFETY=1
cmake C:\dev\work\mapserver -DWITH_PHPNG=1 -DSWIG_EXECUTABLE=C:\dev\work\swig-cygwin\build\swig.exe -DSWIG_DIR=C:\dev\work\swig-cygwin\build
cmake --build C:\dev\work\mapserver\build

And not to forget: You need a build of current developement version of SWIG in C:\dev\work\swig-cygwin\build... But i have a CMake makefile for SWIG here. I can push this to my fork of SWIG so we can use it from there to build it during the test. Alternatively disable ZTS when building PHP and change -DWITH_THREAD_SAFETY=1 to -DWITH_THREAD_SAFETY=0.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5619,2018-06-19T20:59:09Z,2018-06-24T00:18:08Z,2018-06-24T00:18:08Z,CLOSED,False,231,22,17,https://github.com/AlexanderGabriel,Add Support for PHP-NG MapScript (via SWIG),9,[],https://github.com/mapserver/mapserver/pull/5619,https://github.com/AlexanderGabriel,3,https://github.com/MapServer/MapServer/pull/5619#issuecomment-399206172,"Next try.
This will add support for PHP-MapScript via SWIG.
There is still work:

There is a warning when generating the wrapper for a method called ""empty"". It is renamed to c_empty. You'll see this when compiling. How do ""we"" handle this?
On Windows, there is a Problem with swig. It will not be possible to compile thread-safe extensions with swig 3.0.12 but if you build current swig from git build you can generate code that compiles. NTS-Extension work.
Build Instruction need to be updated. Especially for Windows. I have some batch files here that will do everything. I can update the windows readmes.

Linux users should have no problems building it. I tested on Debian Testing a few weeks ago. Functionality should be there but i did really only do some basic tests...
Kind Regards,
Alex",Forgot gnulib and activated AppVeyor for my rep right now. Let me try to fix this. I'll be back ;),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5619,2018-06-19T20:59:09Z,2018-06-24T00:18:08Z,2018-06-24T00:18:08Z,CLOSED,False,231,22,17,https://github.com/AlexanderGabriel,Add Support for PHP-NG MapScript (via SWIG),9,[],https://github.com/mapserver/mapserver/pull/5619,https://github.com/AlexanderGabriel,4,https://github.com/MapServer/MapServer/pull/5619#issuecomment-399219205,"Next try.
This will add support for PHP-MapScript via SWIG.
There is still work:

There is a warning when generating the wrapper for a method called ""empty"". It is renamed to c_empty. You'll see this when compiling. How do ""we"" handle this?
On Windows, there is a Problem with swig. It will not be possible to compile thread-safe extensions with swig 3.0.12 but if you build current swig from git build you can generate code that compiles. NTS-Extension work.
Build Instruction need to be updated. Especially for Windows. I have some batch files here that will do everything. I can update the windows readmes.

Linux users should have no problems building it. I tested on Debian Testing a few weeks ago. Functionality should be there but i did really only do some basic tests...
Kind Regards,
Alex","I don't think, this errors are from me, because it doesn't even try to compile with phpng-support.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5619,2018-06-19T20:59:09Z,2018-06-24T00:18:08Z,2018-06-24T00:18:08Z,CLOSED,False,231,22,17,https://github.com/AlexanderGabriel,Add Support for PHP-NG MapScript (via SWIG),9,[],https://github.com/mapserver/mapserver/pull/5619,https://github.com/geomunion,5,https://github.com/MapServer/MapServer/pull/5619#issuecomment-399561722,"Next try.
This will add support for PHP-MapScript via SWIG.
There is still work:

There is a warning when generating the wrapper for a method called ""empty"". It is renamed to c_empty. You'll see this when compiling. How do ""we"" handle this?
On Windows, there is a Problem with swig. It will not be possible to compile thread-safe extensions with swig 3.0.12 but if you build current swig from git build you can generate code that compiles. NTS-Extension work.
Build Instruction need to be updated. Especially for Windows. I have some batch files here that will do everything. I can update the windows readmes.

Linux users should have no problems building it. I tested on Debian Testing a few weeks ago. Functionality should be there but i did really only do some basic tests...
Kind Regards,
Alex","Hmmm,
@AlexanderGabriel , could you verify the output of C:/projects/mapserver/build/swig.exe -swiglib? It seems to be empty. ...
Maybe adding swig.exe -swiglib to appveyor.yml - right after cmake --build . gives some useful informations.
... I think this causes the CMake Error at mapscript/python/CMakeLists.txt:2 (INCLUDE): (because ${SWIG_USE_FILE} is unset).
And so swig_add_library is undefined, because of the failed include.
(on my Debian testing swig -swiglib returns /usr/share/swig3.0)
P.S.: I don't know how to build on Windows, but i'm missing something like make install after building. Maybe for copying files into the right place ...
-- Tobias",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5619,2018-06-19T20:59:09Z,2018-06-24T00:18:08Z,2018-06-24T00:18:08Z,CLOSED,False,231,22,17,https://github.com/AlexanderGabriel,Add Support for PHP-NG MapScript (via SWIG),9,[],https://github.com/mapserver/mapserver/pull/5619,https://github.com/AlexanderGabriel,6,https://github.com/MapServer/MapServer/pull/5619#issuecomment-399571520,"Next try.
This will add support for PHP-MapScript via SWIG.
There is still work:

There is a warning when generating the wrapper for a method called ""empty"". It is renamed to c_empty. You'll see this when compiling. How do ""we"" handle this?
On Windows, there is a Problem with swig. It will not be possible to compile thread-safe extensions with swig 3.0.12 but if you build current swig from git build you can generate code that compiles. NTS-Extension work.
Build Instruction need to be updated. Especially for Windows. I have some batch files here that will do everything. I can update the windows readmes.

Linux users should have no problems building it. I tested on Debian Testing a few weeks ago. Functionality should be there but i did really only do some basic tests...
Kind Regards,
Alex","Good hint, Tobias. Thank you. I had a wrong path to swig.exe and path to swig lib was wrong because i used cygwin to configure it and built it with cmake on windows native.
this error is gone but now theres new ones...
https://ci.appveyor.com/project/AlexanderGabriel/mapserver
Actually i'm not that good in building software on windows aswell. just wanted to have a current mapserver on windows 2 years ago and so i came here. now i want it to work with php7 so i'm trying to get this running but cmake is awesome makes everything much easier.
I don't know if there is a need for make install after building. Don't think, there are default paths. i always copy the stuff where i need it to be. i think this is a good question for a discussion on developer mailing list.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5619,2018-06-19T20:59:09Z,2018-06-24T00:18:08Z,2018-06-24T00:18:08Z,CLOSED,False,231,22,17,https://github.com/AlexanderGabriel,Add Support for PHP-NG MapScript (via SWIG),9,[],https://github.com/mapserver/mapserver/pull/5619,https://github.com/AlexanderGabriel,7,https://github.com/MapServer/MapServer/pull/5619#issuecomment-399603824,"Next try.
This will add support for PHP-MapScript via SWIG.
There is still work:

There is a warning when generating the wrapper for a method called ""empty"". It is renamed to c_empty. You'll see this when compiling. How do ""we"" handle this?
On Windows, there is a Problem with swig. It will not be possible to compile thread-safe extensions with swig 3.0.12 but if you build current swig from git build you can generate code that compiles. NTS-Extension work.
Build Instruction need to be updated. Especially for Windows. I have some batch files here that will do everything. I can update the windows readmes.

Linux users should have no problems building it. I tested on Debian Testing a few weeks ago. Functionality should be there but i did really only do some basic tests...
Kind Regards,
Alex","csharp works local if I run cmake --build twice
if I disable csharp building and python testing it works but that doesnt help much, right? ;)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5619,2018-06-19T20:59:09Z,2018-06-24T00:18:08Z,2018-06-24T00:18:08Z,CLOSED,False,231,22,17,https://github.com/AlexanderGabriel,Add Support for PHP-NG MapScript (via SWIG),9,[],https://github.com/mapserver/mapserver/pull/5619,https://github.com/geographika,8,https://github.com/MapServer/MapServer/pull/5619#issuecomment-399607935,"Next try.
This will add support for PHP-MapScript via SWIG.
There is still work:

There is a warning when generating the wrapper for a method called ""empty"". It is renamed to c_empty. You'll see this when compiling. How do ""we"" handle this?
On Windows, there is a Problem with swig. It will not be possible to compile thread-safe extensions with swig 3.0.12 but if you build current swig from git build you can generate code that compiles. NTS-Extension work.
Build Instruction need to be updated. Especially for Windows. I have some batch files here that will do everything. I can update the windows readmes.

Linux users should have no problems building it. I tested on Debian Testing a few weeks ago. Functionality should be there but i did really only do some basic tests...
Kind Regards,
Alex","@AlexanderGabriel - Python3 fails if you use the version of SWIG included in the SDK (SWIG-1.3.39) - however this is not yet being tested in Appveyor so wouldn't cause the build to fail. C# fails if you use a newer version of SWIG (see #5575).
Not sure if that is any help - I can look into any Python tests that are failing if you have a link to an Appveyor log.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5619,2018-06-19T20:59:09Z,2018-06-24T00:18:08Z,2018-06-24T00:18:08Z,CLOSED,False,231,22,17,https://github.com/AlexanderGabriel,Add Support for PHP-NG MapScript (via SWIG),9,[],https://github.com/mapserver/mapserver/pull/5619,https://github.com/AlexanderGabriel,9,https://github.com/MapServer/MapServer/pull/5619#issuecomment-399610298,"Next try.
This will add support for PHP-MapScript via SWIG.
There is still work:

There is a warning when generating the wrapper for a method called ""empty"". It is renamed to c_empty. You'll see this when compiling. How do ""we"" handle this?
On Windows, there is a Problem with swig. It will not be possible to compile thread-safe extensions with swig 3.0.12 but if you build current swig from git build you can generate code that compiles. NTS-Extension work.
Build Instruction need to be updated. Especially for Windows. I have some batch files here that will do everything. I can update the windows readmes.

Linux users should have no problems building it. I tested on Debian Testing a few weeks ago. Functionality should be there but i did really only do some basic tests...
Kind Regards,
Alex","@geographika - Python 2 builds.
My version at https://github.com/AlexanderGabriel/mapserver/tree/appveyor-fixing builds and SWIG 4.0.0
I don't have the error from #5575.
""mine"" looks like that:

Scanning dependencies of target mapscript
[ 99%] Building C object mapscript/csharp/CMakeFiles/mapscript.dir/mapscriptCSHARP_wrap.c.obj
mapscriptCSHARP_wrap.c
c:\dev\work\mapserver\build\mapscript\csharp\mapscriptcsharp_wrap.c(1715) : warning C4715: 'mapObj_draw': not all control paths return a value
[100%] Linking C shared module mapscript.dll
Creating library mapscript.lib and object mapscript.exp
Compiling c# source files
%MAPSCRIPT_SNK:/=*
Die Syntax für den Dateinamen, Verzeichnisnamen oder die Datenträgerbezeichnung ist falsch.
0 Datei(en) kopiert.
NMAKE : fatal error U1077: 'copy' : return code '0x1'
Stop.
NMAKE : fatal error U1077: '""C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.13.26128\bin\HostX64\x64\nmake.exe""' : return code '0x2'
Stop.
NMAKE : fatal error U1077: '""C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.13.26128\bin\HostX64\x64\nmake.exe""' : return code '0x2'
Stop.
if i just repeat the build command, it works...
Here is the failed build with the failing python tests: https://ci.appveyor.com/project/AlexanderGabriel/mapserver/build/1.0.21/job/hewueod67w0j823h",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5619,2018-06-19T20:59:09Z,2018-06-24T00:18:08Z,2018-06-24T00:18:08Z,CLOSED,False,231,22,17,https://github.com/AlexanderGabriel,Add Support for PHP-NG MapScript (via SWIG),9,[],https://github.com/mapserver/mapserver/pull/5619,https://github.com/geographika,10,https://github.com/MapServer/MapServer/pull/5619#issuecomment-399648114,"Next try.
This will add support for PHP-MapScript via SWIG.
There is still work:

There is a warning when generating the wrapper for a method called ""empty"". It is renamed to c_empty. You'll see this when compiling. How do ""we"" handle this?
On Windows, there is a Problem with swig. It will not be possible to compile thread-safe extensions with swig 3.0.12 but if you build current swig from git build you can generate code that compiles. NTS-Extension work.
Build Instruction need to be updated. Especially for Windows. I have some batch files here that will do everything. I can update the windows readmes.

Linux users should have no problems building it. I tested on Debian Testing a few weeks ago. Functionality should be there but i did really only do some basic tests...
Kind Regards,
Alex","@AlexanderGabriel - I was looking at the Python CMakeLists yesterday, and there is likely an issue with getting the path to the _mapscript.pyd file, hence the tests are all failing as it is not on the PYTHONPATH. I'll be looking at it again this weekend (should be a case of switching to a $<TARGET_FILE> expression as outlined at https://cmake.org/cmake/help/v3.0/policy/CMP0026.html
For the .NET bindings - I couldn't get them to work with SWIG 3.0 so unlikely they will work with 4.0.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5619,2018-06-19T20:59:09Z,2018-06-24T00:18:08Z,2018-06-24T00:18:08Z,CLOSED,False,231,22,17,https://github.com/AlexanderGabriel,Add Support for PHP-NG MapScript (via SWIG),9,[],https://github.com/mapserver/mapserver/pull/5619,https://github.com/geomunion,11,https://github.com/MapServer/MapServer/pull/5619#issuecomment-399676567,"Next try.
This will add support for PHP-MapScript via SWIG.
There is still work:

There is a warning when generating the wrapper for a method called ""empty"". It is renamed to c_empty. You'll see this when compiling. How do ""we"" handle this?
On Windows, there is a Problem with swig. It will not be possible to compile thread-safe extensions with swig 3.0.12 but if you build current swig from git build you can generate code that compiles. NTS-Extension work.
Build Instruction need to be updated. Especially for Windows. I have some batch files here that will do everything. I can update the windows readmes.

Linux users should have no problems building it. I tested on Debian Testing a few weeks ago. Functionality should be there but i did really only do some basic tests...
Kind Regards,
Alex","Hi @AlexanderGabriel ,
if i revert your changes of mapscript/mapscript.i` (2a49615#diff-bed01f9bad2034b8438522c5abd14a15) building with csharp passes.
see: (based on your first pull request)

https://github.com/geomunion/mapserver/commits/feature-php7_experimental
https://ci.appveyor.com/project/geomunion/mapserver/build/1.0.6",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5619,2018-06-19T20:59:09Z,2018-06-24T00:18:08Z,2018-06-24T00:18:08Z,CLOSED,False,231,22,17,https://github.com/AlexanderGabriel,Add Support for PHP-NG MapScript (via SWIG),9,[],https://github.com/mapserver/mapserver/pull/5619,https://github.com/AlexanderGabriel,12,https://github.com/MapServer/MapServer/pull/5619#issuecomment-399683906,"Next try.
This will add support for PHP-MapScript via SWIG.
There is still work:

There is a warning when generating the wrapper for a method called ""empty"". It is renamed to c_empty. You'll see this when compiling. How do ""we"" handle this?
On Windows, there is a Problem with swig. It will not be possible to compile thread-safe extensions with swig 3.0.12 but if you build current swig from git build you can generate code that compiles. NTS-Extension work.
Build Instruction need to be updated. Especially for Windows. I have some batch files here that will do everything. I can update the windows readmes.

Linux users should have no problems building it. I tested on Debian Testing a few weeks ago. Functionality should be there but i did really only do some basic tests...
Kind Regards,
Alex","HI @geomunion ,
this is for sure a typo from me. there should be something else (swigphp/7?) but for sure not swigsharp.
I'll have a look at this later.
Thank you.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5619,2018-06-19T20:59:09Z,2018-06-24T00:18:08Z,2018-06-24T00:18:08Z,CLOSED,False,231,22,17,https://github.com/AlexanderGabriel,Add Support for PHP-NG MapScript (via SWIG),9,[],https://github.com/mapserver/mapserver/pull/5619,https://github.com/geomunion,13,https://github.com/MapServer/MapServer/pull/5619#issuecomment-399692484,"Next try.
This will add support for PHP-MapScript via SWIG.
There is still work:

There is a warning when generating the wrapper for a method called ""empty"". It is renamed to c_empty. You'll see this when compiling. How do ""we"" handle this?
On Windows, there is a Problem with swig. It will not be possible to compile thread-safe extensions with swig 3.0.12 but if you build current swig from git build you can generate code that compiles. NTS-Extension work.
Build Instruction need to be updated. Especially for Windows. I have some batch files here that will do everything. I can update the windows readmes.

Linux users should have no problems building it. I tested on Debian Testing a few weeks ago. Functionality should be there but i did really only do some basic tests...
Kind Regards,
Alex","Hi @AlexanderGabriel ,
SWIGPHP works for PHP5 and PHP7, SWIGPHP7 only for PHP7 and SWIGPHP5 only for PHP5.
I used SWIGPHP7 for injecting module infos to phpinfo() - see: geomunion@9e3674e
But renaming the module this way may have other side effects.(?) Maybe
set_target_properties(${SWIG_MODULE_mapscript_REAL_NAME} PROPERTIES PREFIX """") at mapscript/phpng/CMakeLists.txt  needs to reflect the new name...  I don't know ...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5619,2018-06-19T20:59:09Z,2018-06-24T00:18:08Z,2018-06-24T00:18:08Z,CLOSED,False,231,22,17,https://github.com/AlexanderGabriel,Add Support for PHP-NG MapScript (via SWIG),9,[],https://github.com/mapserver/mapserver/pull/5619,https://github.com/AlexanderGabriel,14,https://github.com/MapServer/MapServer/pull/5619#issuecomment-399714519,"Next try.
This will add support for PHP-MapScript via SWIG.
There is still work:

There is a warning when generating the wrapper for a method called ""empty"". It is renamed to c_empty. You'll see this when compiling. How do ""we"" handle this?
On Windows, there is a Problem with swig. It will not be possible to compile thread-safe extensions with swig 3.0.12 but if you build current swig from git build you can generate code that compiles. NTS-Extension work.
Build Instruction need to be updated. Especially for Windows. I have some batch files here that will do everything. I can update the windows readmes.

Linux users should have no problems building it. I tested on Debian Testing a few weeks ago. Functionality should be there but i did really only do some basic tests...
Kind Regards,
Alex","Hi @geomunion ,
i don't know which property to use with set_target_properties to rename the module and the generated mapscript.php to mapscriptng.php. i'd like to have this consistent.
If i rename it in mapscript.i  - SWIGPHP not SWIGSHARP ;) - everything is as i want. maybe there is another way. i'd be grateful for every help.
@bjoernboldt is working on an update of the native php-mapscript (#5461) which will be named mapscript. If we name the swig based mapscript the same, you can never load both at the same time so i thing, it is better to name it mapscriptng...
to name the module as written in http://mapserver.org/development/rfc/ms-rfc-117.html (The module will be named phpng_mapscript.so or phpng_mapscript.dll) is not really possible because the module files on windows NEED to have prefix php_ which is not used when loading the module. this will result in php_phpng_mapscript... :( so i thought it would be better idea to call it php_mapscriptng.dll.
thank you for helping and adding module version information. was looking for that but did not find how to do this.
so i'll prepare a new pull request now which will not break the appveyor build ;)
Kind regards,
Alex",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5619,2018-06-19T20:59:09Z,2018-06-24T00:18:08Z,2018-06-24T00:18:08Z,CLOSED,False,231,22,17,https://github.com/AlexanderGabriel,Add Support for PHP-NG MapScript (via SWIG),9,[],https://github.com/mapserver/mapserver/pull/5619,https://github.com/AlexanderGabriel,15,https://github.com/MapServer/MapServer/pull/5619#issuecomment-399719227,"Next try.
This will add support for PHP-MapScript via SWIG.
There is still work:

There is a warning when generating the wrapper for a method called ""empty"". It is renamed to c_empty. You'll see this when compiling. How do ""we"" handle this?
On Windows, there is a Problem with swig. It will not be possible to compile thread-safe extensions with swig 3.0.12 but if you build current swig from git build you can generate code that compiles. NTS-Extension work.
Build Instruction need to be updated. Especially for Windows. I have some batch files here that will do everything. I can update the windows readmes.

Linux users should have no problems building it. I tested on Debian Testing a few weeks ago. Functionality should be there but i did really only do some basic tests...
Kind Regards,
Alex","Opened new Pull-Request: #5623
Closing this.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5620,2018-06-20T06:27:24Z,2018-08-16T20:36:47Z,2018-08-17T08:16:21Z,MERGED,True,54,45,2,https://github.com/geographika,Add Python methods to hashtable so it can be used like a dict,3,[],https://github.com/mapserver/mapserver/pull/5620,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5620,"Supersedes #5614
Add various Python methods so that a hashtable can be used like a dict. See #5582 for background.
API is now as follows:
import mapscript
ht = mapscript.hashTableObj()

ht[""key1""] = ""value1""
ht[""key2""] = ""value2""
ht[""key3""] = ""value3""
ht[""key4""] = ""value4""

del ht[""key1""]
print(ht.keys)
print(len(ht))
print(""k1"" in ht)
print(len(ht))
Or for a more concrete example:
print(map.web.metadata.keys()) # ['wms_srs', 'ows_enable_request', 'ows_http_max_age']
print(map.web.metadata[""wms_srs""]) # EPSG:4326
map.web.metadata[""wms_srs""] = ""EPSG:2157""
print(map.web.metadata[""wms_srs""])  # EPSG:2157","Supersedes #5614
Add various Python methods so that a hashtable can be used like a dict. See #5582 for background.
API is now as follows:
import mapscript
ht = mapscript.hashTableObj()

ht[""key1""] = ""value1""
ht[""key2""] = ""value2""
ht[""key3""] = ""value3""
ht[""key4""] = ""value4""

del ht[""key1""]
print(ht.keys)
print(len(ht))
print(""k1"" in ht)
print(len(ht))
Or for a more concrete example:
print(map.web.metadata.keys()) # ['wms_srs', 'ows_enable_request', 'ows_http_max_age']
print(map.web.metadata[""wms_srs""]) # EPSG:4326
map.web.metadata[""wms_srs""] = ""EPSG:2157""
print(map.web.metadata[""wms_srs""])  # EPSG:2157",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5620,2018-06-20T06:27:24Z,2018-08-16T20:36:47Z,2018-08-17T08:16:21Z,MERGED,True,54,45,2,https://github.com/geographika,Add Python methods to hashtable so it can be used like a dict,3,[],https://github.com/mapserver/mapserver/pull/5620,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5620#issuecomment-400205712,"Supersedes #5614
Add various Python methods so that a hashtable can be used like a dict. See #5582 for background.
API is now as follows:
import mapscript
ht = mapscript.hashTableObj()

ht[""key1""] = ""value1""
ht[""key2""] = ""value2""
ht[""key3""] = ""value3""
ht[""key4""] = ""value4""

del ht[""key1""]
print(ht.keys)
print(len(ht))
print(""k1"" in ht)
print(len(ht))
Or for a more concrete example:
print(map.web.metadata.keys()) # ['wms_srs', 'ows_enable_request', 'ows_http_max_age']
print(map.web.metadata[""wms_srs""]) # EPSG:4326
map.web.metadata[""wms_srs""] = ""EPSG:2157""
print(map.web.metadata[""wms_srs""])  # EPSG:2157","Is this likely to make the 7.2 cut? If not I can recreate the pull request against master.
The functionality is tested by both mapscript/python/tests/cases/hashtest.py and msautotest/mspython/test_mapio.py
Currently the hashtable implementation in Python Mapscript doesn't match the docs, or allow setting of values.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5620,2018-06-20T06:27:24Z,2018-08-16T20:36:47Z,2018-08-17T08:16:21Z,MERGED,True,54,45,2,https://github.com/geographika,Add Python methods to hashtable so it can be used like a dict,3,[],https://github.com/mapserver/mapserver/pull/5620,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/5620#issuecomment-400290755,"Supersedes #5614
Add various Python methods so that a hashtable can be used like a dict. See #5582 for background.
API is now as follows:
import mapscript
ht = mapscript.hashTableObj()

ht[""key1""] = ""value1""
ht[""key2""] = ""value2""
ht[""key3""] = ""value3""
ht[""key4""] = ""value4""

del ht[""key1""]
print(ht.keys)
print(len(ht))
print(""k1"" in ht)
print(len(ht))
Or for a more concrete example:
print(map.web.metadata.keys()) # ['wms_srs', 'ows_enable_request', 'ows_http_max_age']
print(map.web.metadata[""wms_srs""]) # EPSG:4326
map.web.metadata[""wms_srs""] = ""EPSG:2157""
print(map.web.metadata[""wms_srs""])  # EPSG:2157","Yes, I think this can be merged. Can you do it?
…
________________________________
From: Seth G <notifications@github.com>
Sent: Tuesday, June 26, 2018 2:19:02 AM
To: mapserver/mapserver
Cc: Subscribed
Subject: Re: [mapserver/mapserver] Add Python methods to hashtable so it can be used like a dict (#5620)


Is this likely to make the 7.2 cut? If not I can recreate the pull request against master.

The functionality is tested by both mapscript/python/tests/cases/hashtest.py and msautotest/mspython/test_mapio.py

Currently the hashtable implementation in Python Mapscript doesn't match the docs, or allow setting of values.

—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub<#5620 (comment)>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ABhm-9bHLTioIbB5nRWvc-xWWN6n0KZaks5uAeBmgaJpZM4Uurcl>.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5620,2018-06-20T06:27:24Z,2018-08-16T20:36:47Z,2018-08-17T08:16:21Z,MERGED,True,54,45,2,https://github.com/geographika,Add Python methods to hashtable so it can be used like a dict,3,[],https://github.com/mapserver/mapserver/pull/5620,https://github.com/geographika,4,https://github.com/MapServer/MapServer/pull/5620#issuecomment-400297244,"Supersedes #5614
Add various Python methods so that a hashtable can be used like a dict. See #5582 for background.
API is now as follows:
import mapscript
ht = mapscript.hashTableObj()

ht[""key1""] = ""value1""
ht[""key2""] = ""value2""
ht[""key3""] = ""value3""
ht[""key4""] = ""value4""

del ht[""key1""]
print(ht.keys)
print(len(ht))
print(""k1"" in ht)
print(len(ht))
Or for a more concrete example:
print(map.web.metadata.keys()) # ['wms_srs', 'ows_enable_request', 'ows_http_max_age']
print(map.web.metadata[""wms_srs""]) # EPSG:4326
map.web.metadata[""wms_srs""] = ""EPSG:2157""
print(map.web.metadata[""wms_srs""])  # EPSG:2157","@sdlime - I don't have commit rights so can't help there sorry!
@rouault wrote the original SWIG typemap so could have reservations, although the new approach has the same API  as the test_mapio.py that was written to test they typemap so should be ok.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5620,2018-06-20T06:27:24Z,2018-08-16T20:36:47Z,2018-08-17T08:16:21Z,MERGED,True,54,45,2,https://github.com/geographika,Add Python methods to hashtable so it can be used like a dict,3,[],https://github.com/mapserver/mapserver/pull/5620,https://github.com/sdlime,5,https://github.com/MapServer/MapServer/pull/5620#issuecomment-400340166,"Supersedes #5614
Add various Python methods so that a hashtable can be used like a dict. See #5582 for background.
API is now as follows:
import mapscript
ht = mapscript.hashTableObj()

ht[""key1""] = ""value1""
ht[""key2""] = ""value2""
ht[""key3""] = ""value3""
ht[""key4""] = ""value4""

del ht[""key1""]
print(ht.keys)
print(len(ht))
print(""k1"" in ht)
print(len(ht))
Or for a more concrete example:
print(map.web.metadata.keys()) # ['wms_srs', 'ows_enable_request', 'ows_http_max_age']
print(map.web.metadata[""wms_srs""]) # EPSG:4326
map.web.metadata[""wms_srs""] = ""EPSG:2157""
print(map.web.metadata[""wms_srs""])  # EPSG:2157",Probably should wait on a blessing from @rouault before pulling the trigger then.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5620,2018-06-20T06:27:24Z,2018-08-16T20:36:47Z,2018-08-17T08:16:21Z,MERGED,True,54,45,2,https://github.com/geographika,Add Python methods to hashtable so it can be used like a dict,3,[],https://github.com/mapserver/mapserver/pull/5620,https://github.com/rouault,6,https://github.com/MapServer/MapServer/pull/5620#issuecomment-413676848,"Supersedes #5614
Add various Python methods so that a hashtable can be used like a dict. See #5582 for background.
API is now as follows:
import mapscript
ht = mapscript.hashTableObj()

ht[""key1""] = ""value1""
ht[""key2""] = ""value2""
ht[""key3""] = ""value3""
ht[""key4""] = ""value4""

del ht[""key1""]
print(ht.keys)
print(len(ht))
print(""k1"" in ht)
print(len(ht))
Or for a more concrete example:
print(map.web.metadata.keys()) # ['wms_srs', 'ows_enable_request', 'ows_http_max_age']
print(map.web.metadata[""wms_srs""]) # EPSG:4326
map.web.metadata[""wms_srs""] = ""EPSG:2157""
print(map.web.metadata[""wms_srs""])  # EPSG:2157","@geographika @sdlime Sorry, I missed your previous pings. Too many notifications from too many repositories.. Squashed and merged",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5620,2018-06-20T06:27:24Z,2018-08-16T20:36:47Z,2018-08-17T08:16:21Z,MERGED,True,54,45,2,https://github.com/geographika,Add Python methods to hashtable so it can be used like a dict,3,[],https://github.com/mapserver/mapserver/pull/5620,https://github.com/geographika,7,https://github.com/MapServer/MapServer/pull/5620#issuecomment-413792871,"Supersedes #5614
Add various Python methods so that a hashtable can be used like a dict. See #5582 for background.
API is now as follows:
import mapscript
ht = mapscript.hashTableObj()

ht[""key1""] = ""value1""
ht[""key2""] = ""value2""
ht[""key3""] = ""value3""
ht[""key4""] = ""value4""

del ht[""key1""]
print(ht.keys)
print(len(ht))
print(""k1"" in ht)
print(len(ht))
Or for a more concrete example:
print(map.web.metadata.keys()) # ['wms_srs', 'ows_enable_request', 'ows_http_max_age']
print(map.web.metadata[""wms_srs""]) # EPSG:4326
map.web.metadata[""wms_srs""] = ""EPSG:2157""
print(map.web.metadata[""wms_srs""])  # EPSG:2157",@rouault - thanks for merging!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5622,2018-06-22T22:52:29Z,2018-06-23T08:25:56Z,2018-06-23T08:25:56Z,MERGED,True,18,22,1,https://github.com/geographika,Fix Appveyor path errors,3,[],https://github.com/mapserver/mapserver/pull/5622,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5622,"This pull request replaces all backslashes in paths with forward slashes to stop current CMake errors in Appveyor such as:
CMake Warning (dev) at CMakeLists.txt:61 (target_link_libraries):
  Syntax error in cmake code at
    C:/projects/mapserver/CMakeLists.txt:61
  when parsing string
    C:\projects\mapserver\sdk\release-1911-x64\lib\libxml2.lib
  Invalid escape sequence \p

For example see a previous build log at https://ci.appveyor.com/project/MapServer/mapserver/build/1.0.767/job/0y3wh6bbf2we3g4d?fullLog=true which contains 4 of these errors.
This may also be the reason for the issue with the libpng issue which required copy libpng.lib libpng.lib.lib - as \l is a special character. This additional step has been removed and the build is still successful.","This pull request replaces all backslashes in paths with forward slashes to stop current CMake errors in Appveyor such as:
CMake Warning (dev) at CMakeLists.txt:61 (target_link_libraries):
  Syntax error in cmake code at
    C:/projects/mapserver/CMakeLists.txt:61
  when parsing string
    C:\projects\mapserver\sdk\release-1911-x64\lib\libxml2.lib
  Invalid escape sequence \p

For example see a previous build log at https://ci.appveyor.com/project/MapServer/mapserver/build/1.0.767/job/0y3wh6bbf2we3g4d?fullLog=true which contains 4 of these errors.
This may also be the reason for the issue with the libpng issue which required copy libpng.lib libpng.lib.lib - as \l is a special character. This additional step has been removed and the build is still successful.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5623,2018-06-24T00:07:41Z,2018-08-14T20:32:15Z,2018-08-14T20:34:18Z,CLOSED,False,334,10,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,17,[],https://github.com/mapserver/mapserver/pull/5623,https://github.com/AlexanderGabriel,1,https://github.com/MapServer/MapServer/pull/5623,"Hi again,
this will add PHP-Mapscript via SWIG (and will not brake any CI-builds).
I added a readme.win32 to phpng-directory which explains how to build on windows with current swig from source to be able to compile thread-safe extension.
Kind regards,
Alex","Hi again,
this will add PHP-Mapscript via SWIG (and will not brake any CI-builds).
I added a readme.win32 to phpng-directory which explains how to build on windows with current swig from source to be able to compile thread-safe extension.
Kind regards,
Alex",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5623,2018-06-24T00:07:41Z,2018-08-14T20:32:15Z,2018-08-14T20:34:18Z,CLOSED,False,334,10,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,17,[],https://github.com/mapserver/mapserver/pull/5623,https://github.com/AlexanderGabriel,2,https://github.com/MapServer/MapServer/pull/5623#issuecomment-409024076,"Hi again,
this will add PHP-Mapscript via SWIG (and will not brake any CI-builds).
I added a readme.win32 to phpng-directory which explains how to build on windows with current swig from source to be able to compile thread-safe extension.
Kind regards,
Alex","i spent a few hours and now it builds an appveyor and travis again.
it does not look nice but it works...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5623,2018-06-24T00:07:41Z,2018-08-14T20:32:15Z,2018-08-14T20:34:18Z,CLOSED,False,334,10,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,17,[],https://github.com/mapserver/mapserver/pull/5623,https://github.com/AlexanderGabriel,3,https://github.com/MapServer/MapServer/pull/5623#issuecomment-413006098,"Hi again,
this will add PHP-Mapscript via SWIG (and will not brake any CI-builds).
I added a readme.win32 to phpng-directory which explains how to build on windows with current swig from source to be able to compile thread-safe extension.
Kind regards,
Alex",Will open a new PR in a few seconds with much less commits...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5623,2018-06-24T00:07:41Z,2018-08-14T20:32:15Z,2018-08-14T20:34:18Z,CLOSED,False,334,10,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,17,[],https://github.com/mapserver/mapserver/pull/5623,https://github.com/AlexanderGabriel,4,https://github.com/MapServer/MapServer/pull/5623#issuecomment-413006720,"Hi again,
this will add PHP-Mapscript via SWIG (and will not brake any CI-builds).
I added a readme.win32 to phpng-directory which explains how to build on windows with current swig from source to be able to compile thread-safe extension.
Kind regards,
Alex",New PR here: #5642,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5630,2018-07-21T15:56:24Z,2018-07-23T18:49:22Z,2018-07-23T20:04:32Z,MERGED,True,12,5,1,https://github.com/geographika,Use RST for ReadMe,1,[],https://github.com/mapserver/mapserver/pull/5630,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5630,"In preparation for the 7.2 release, would it be worthwhile changing the README to an RST file so it is nicely formatted on GitHub? You can see a preview at https://github.com/geographika/mapserver/tree/7-2-readme
As the default branch in GitHub will be 7.2 until the next major release I created the pull request against the 7.2 branch. I can make it against master if preferable.
I added in the status button of the master build from Travis.
I can also add in Appveyor, but it seems like you need to be an admin to see the URL for the badge. @sdlime - if you get a chance maybe you could add me as an admin to the Appveyor MapServer project, similar to MapCache?","In preparation for the 7.2 release, would it be worthwhile changing the README to an RST file so it is nicely formatted on GitHub? You can see a preview at https://github.com/geographika/mapserver/tree/7-2-readme
As the default branch in GitHub will be 7.2 until the next major release I created the pull request against the 7.2 branch. I can make it against master if preferable.
I added in the status button of the master build from Travis.
I can also add in Appveyor, but it seems like you need to be an admin to see the URL for the badge. @sdlime - if you get a chance maybe you could add me as an admin to the Appveyor MapServer project, similar to MapCache?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5630,2018-07-21T15:56:24Z,2018-07-23T18:49:22Z,2018-07-23T20:04:32Z,MERGED,True,12,5,1,https://github.com/geographika,Use RST for ReadMe,1,[],https://github.com/mapserver/mapserver/pull/5630,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5630#issuecomment-407152463,"In preparation for the 7.2 release, would it be worthwhile changing the README to an RST file so it is nicely formatted on GitHub? You can see a preview at https://github.com/geographika/mapserver/tree/7-2-readme
As the default branch in GitHub will be 7.2 until the next major release I created the pull request against the 7.2 branch. I can make it against master if preferable.
I added in the status button of the master build from Travis.
I can also add in Appveyor, but it seems like you need to be an admin to see the URL for the badge. @sdlime - if you get a chance maybe you could add me as an admin to the Appveyor MapServer project, similar to MapCache?","Crap, I just cut the release file before I saw this. However, we should be able to add it to whatever our default branch is though (currently 7.0). I'll merge once Jeff gets the website updated.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5630,2018-07-21T15:56:24Z,2018-07-23T18:49:22Z,2018-07-23T20:04:32Z,MERGED,True,12,5,1,https://github.com/geographika,Use RST for ReadMe,1,[],https://github.com/mapserver/mapserver/pull/5630,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/5630#issuecomment-407183389,"In preparation for the 7.2 release, would it be worthwhile changing the README to an RST file so it is nicely formatted on GitHub? You can see a preview at https://github.com/geographika/mapserver/tree/7-2-readme
As the default branch in GitHub will be 7.2 until the next major release I created the pull request against the 7.2 branch. I can make it against master if preferable.
I added in the status button of the master build from Travis.
I can also add in Appveyor, but it seems like you need to be an admin to see the URL for the badge. @sdlime - if you get a chance maybe you could add me as an admin to the Appveyor MapServer project, similar to MapCache?",@geographika - you should have admin rights to both the MapServer and MapCache projects.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5631,2018-07-21T17:20:23Z,2018-07-21T17:39:34Z,2018-07-21T17:39:34Z,MERGED,True,127,21,5,https://github.com/rouault,WFS 2.0: make sure only WFS parameters are included in next / previous links (fixes #5269),1,[],https://github.com/mapserver/mapserver/pull/5631,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5631,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5632,2018-07-24T08:07:38Z,2018-07-24T14:34:03Z,2018-07-24T14:34:03Z,MERGED,True,3,3,1,https://github.com/geographika,Add Appveyor build status badge,2,[],https://github.com/mapserver/mapserver/pull/5632,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5632,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5633,2018-07-24T12:08:10Z,2018-07-24T14:41:20Z,2018-07-24T18:03:53Z,CLOSED,False,1,1,1,https://github.com/sebastic,Remove -beta2 version suffix.,1,[],https://github.com/mapserver/mapserver/pull/5633,https://github.com/sebastic,1,https://github.com/MapServer/MapServer/pull/5633,The -beta2 suffix is still present in the MapServer 7.2.0 release.,The -beta2 suffix is still present in the MapServer 7.2.0 release.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5633,2018-07-24T12:08:10Z,2018-07-24T14:41:20Z,2018-07-24T18:03:53Z,CLOSED,False,1,1,1,https://github.com/sebastic,Remove -beta2 version suffix.,1,[],https://github.com/mapserver/mapserver/pull/5633,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5633#issuecomment-407393725,The -beta2 suffix is still present in the MapServer 7.2.0 release.,"Crap, I edited that file by hand, how didn’t it stick. Thanks for catching. Will have to recreate the tarball.
…
________________________________
From: Bas Couwenberg <notifications@github.com>
Sent: Tuesday, July 24, 2018 7:08:12 AM
To: mapserver/mapserver
Cc: Subscribed
Subject: [mapserver/mapserver] Remove -beta2 version suffix. (#5633)


The -beta2 suffix is still present in the MapServer 7.2.0 release.
________________________________
You can view, comment on, or merge this pull request online at:

  #5633

Commit Summary

  *   Remove -beta2 version suffix.

File Changes

  *   M CMakeLists.txt<https://github.com/mapserver/mapserver/pull/5633/files#diff-0> (2)

Patch Links:

  *   https://github.com/mapserver/mapserver/pull/5633.patch
  *   https://github.com/mapserver/mapserver/pull/5633.diff

—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub<#5633>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ABhm-_f8OZQEBLcqgy-N5EfL19CTYpPcks5uJw4sgaJpZM4Vcnfl>.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5633,2018-07-24T12:08:10Z,2018-07-24T14:41:20Z,2018-07-24T18:03:53Z,CLOSED,False,1,1,1,https://github.com/sebastic,Remove -beta2 version suffix.,1,[],https://github.com/mapserver/mapserver/pull/5633,https://github.com/sebastic,3,https://github.com/MapServer/MapServer/pull/5633#issuecomment-407397020,The -beta2 suffix is still present in the MapServer 7.2.0 release.,"Ideally the 7.2.0 tarball is not modified, it has already been used by users who monitor the download directory closely.
The Debian packaging tools don't accept a tarball with the same name but different content for example.
For this reason an RC1 release would have been good which would already have had all changes for the final release, whose tarballs would only need to be renamed for the final release. See the GDAL release process for example.
If you do choose to recreate the 7.2.0 tarballs, and they will have more changes than this commit, I'll need to know about to be able to incorporate those changes in the Debian package, as we already have 7.2.0 release packaged without those changes.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5633,2018-07-24T12:08:10Z,2018-07-24T14:41:20Z,2018-07-24T18:03:53Z,CLOSED,False,1,1,1,https://github.com/sebastic,Remove -beta2 version suffix.,1,[],https://github.com/mapserver/mapserver/pull/5633,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/5633#issuecomment-407431478,The -beta2 suffix is still present in the MapServer 7.2.0 release.,The 7.2.0 tarball does have more changes than this commit. I had made the appropriate changes to HISTORY.TXT and the CMakeLists.txt but neglected to push them argh. So HISTORY.TXT wasn't reflecting the 7.2.0 release either so its worth fixing. The README.rst was also updated. Sorry for the hassle. Point well taken on an RC... --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5634,2018-07-31T06:22:07Z,2018-08-30T19:38:26Z,2019-01-24T08:06:57Z,MERGED,True,111,20,3,https://github.com/olt,Fix label wrap (#5612) and wrap at ZERO WIDTH SPACE (#5613),2,[],https://github.com/mapserver/mapserver/pull/5634,https://github.com/olt,1,https://github.com/MapServer/MapServer/pull/5634,"This fixes #5612 and implements #5613.
Here are two images from the added test case.
This is the output with current master. Lines starting with W should wrap, lines with NW should not wrap. Note how the dash is removed in the first lines and how the second line is wrapped even if there is no wrap character. (#5612)

This is the output with my fix. The first two lines are wrapped correctly. The lower lines show how it is possible to wrap at arbitrary positions by inserting ZERO WIDTH SPACE characters.

Questions:

I've added a test. How do I generate the expected image? Most ""result images perceptually match, though files differ"" on my system.
The patch is against master but I can rebase it. Where? branch-7-2? branch-7-3?

I'll update to the documentation.","This fixes #5612 and implements #5613.
Here are two images from the added test case.
This is the output with current master. Lines starting with W should wrap, lines with NW should not wrap. Note how the dash is removed in the first lines and how the second line is wrapped even if there is no wrap character. (#5612)

This is the output with my fix. The first two lines are wrapped correctly. The lower lines show how it is possible to wrap at arbitrary positions by inserting ZERO WIDTH SPACE characters.

Questions:

I've added a test. How do I generate the expected image? Most ""result images perceptually match, though files differ"" on my system.
The patch is against master but I can rebase it. Where? branch-7-2? branch-7-3?

I'll update to the documentation.",True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5634,2018-07-31T06:22:07Z,2018-08-30T19:38:26Z,2019-01-24T08:06:57Z,MERGED,True,111,20,3,https://github.com/olt,Fix label wrap (#5612) and wrap at ZERO WIDTH SPACE (#5613),2,[],https://github.com/mapserver/mapserver/pull/5634,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5634#issuecomment-411076507,"This fixes #5612 and implements #5613.
Here are two images from the added test case.
This is the output with current master. Lines starting with W should wrap, lines with NW should not wrap. Note how the dash is removed in the first lines and how the second line is wrapped even if there is no wrap character. (#5612)

This is the output with my fix. The first two lines are wrapped correctly. The lower lines show how it is possible to wrap at arbitrary positions by inserting ZERO WIDTH SPACE characters.

Questions:

I've added a test. How do I generate the expected image? Most ""result images perceptually match, though files differ"" on my system.
The patch is against master but I can rebase it. Where? branch-7-2? branch-7-3?

I'll update to the documentation.",Should we take this one to mapserver-dev for a vote?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5634,2018-07-31T06:22:07Z,2018-08-30T19:38:26Z,2019-01-24T08:06:57Z,MERGED,True,111,20,3,https://github.com/olt,Fix label wrap (#5612) and wrap at ZERO WIDTH SPACE (#5613),2,[],https://github.com/mapserver/mapserver/pull/5634,https://github.com/olt,3,https://github.com/MapServer/MapServer/pull/5634#issuecomment-411307465,"This fixes #5612 and implements #5613.
Here are two images from the added test case.
This is the output with current master. Lines starting with W should wrap, lines with NW should not wrap. Note how the dash is removed in the first lines and how the second line is wrapped even if there is no wrap character. (#5612)

This is the output with my fix. The first two lines are wrapped correctly. The lower lines show how it is possible to wrap at arbitrary positions by inserting ZERO WIDTH SPACE characters.

Questions:

I've added a test. How do I generate the expected image? Most ""result images perceptually match, though files differ"" on my system.
The patch is against master but I can rebase it. Where? branch-7-2? branch-7-3?

I'll update to the documentation.","I wrote on mapserver-dev already, but I didn't ask for a vote: https://lists.osgeo.org/pipermail/mapserver-dev/2018-August/015464.html",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5634,2018-07-31T06:22:07Z,2018-08-30T19:38:26Z,2019-01-24T08:06:57Z,MERGED,True,111,20,3,https://github.com/olt,Fix label wrap (#5612) and wrap at ZERO WIDTH SPACE (#5613),2,[],https://github.com/mapserver/mapserver/pull/5634,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/5634#issuecomment-411387959,"This fixes #5612 and implements #5613.
Here are two images from the added test case.
This is the output with current master. Lines starting with W should wrap, lines with NW should not wrap. Note how the dash is removed in the first lines and how the second line is wrapped even if there is no wrap character. (#5612)

This is the output with my fix. The first two lines are wrapped correctly. The lower lines show how it is possible to wrap at arbitrary positions by inserting ZERO WIDTH SPACE characters.

Questions:

I've added a test. How do I generate the expected image? Most ""result images perceptually match, though files differ"" on my system.
The patch is against master but I can rebase it. Where? branch-7-2? branch-7-3?

I'll update to the documentation.","I saw that after my comment here. Let me reply to your note to try and solicit a little more review. If nothing then we’ll just move forward with the commit.
…
________________________________
From: Oliver Tonnhofer <notifications@github.com>
Sent: Wednesday, August 8, 2018 2:02:43 AM
To: mapserver/mapserver
Cc: Lime, Steve D (MNIT); Comment
Subject: Re: [mapserver/mapserver] Fix label wrap (#5612) and wrap at ZERO WIDTH SPACE (#5613) (#5634)


I wrote on mapserver-dev already, but I didn't ask for a vote: https://lists.osgeo.org/pipermail/mapserver-dev/2018-August/015464.html

—
You are receiving this because you commented.
Reply to this email directly, view it on GitHub<#5634 (comment)>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ABhm-3VgiZzGSgQrTtl8KU6_-FvVWNwyks5uOo0TgaJpZM4Vnqf3>.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5634,2018-07-31T06:22:07Z,2018-08-30T19:38:26Z,2019-01-24T08:06:57Z,MERGED,True,111,20,3,https://github.com/olt,Fix label wrap (#5612) and wrap at ZERO WIDTH SPACE (#5613),2,[],https://github.com/mapserver/mapserver/pull/5634,https://github.com/sdlime,5,https://github.com/MapServer/MapServer/pull/5634#issuecomment-414406642,"This fixes #5612 and implements #5613.
Here are two images from the added test case.
This is the output with current master. Lines starting with W should wrap, lines with NW should not wrap. Note how the dash is removed in the first lines and how the second line is wrapped even if there is no wrap character. (#5612)

This is the output with my fix. The first two lines are wrapped correctly. The lower lines show how it is possible to wrap at arbitrary positions by inserting ZERO WIDTH SPACE characters.

Questions:

I've added a test. How do I generate the expected image? Most ""result images perceptually match, though files differ"" on my system.
The patch is against master but I can rebase it. Where? branch-7-2? branch-7-3?

I'll update to the documentation.","@olt - to confirm. No breaking changes on this one, correct? Seems appropriate for 7.0 or at worst 7.2 don't you think? --Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5634,2018-07-31T06:22:07Z,2018-08-30T19:38:26Z,2019-01-24T08:06:57Z,MERGED,True,111,20,3,https://github.com/olt,Fix label wrap (#5612) and wrap at ZERO WIDTH SPACE (#5613),2,[],https://github.com/mapserver/mapserver/pull/5634,https://github.com/olt,6,https://github.com/MapServer/MapServer/pull/5634#issuecomment-414564811,"This fixes #5612 and implements #5613.
Here are two images from the added test case.
This is the output with current master. Lines starting with W should wrap, lines with NW should not wrap. Note how the dash is removed in the first lines and how the second line is wrapped even if there is no wrap character. (#5612)

This is the output with my fix. The first two lines are wrapped correctly. The lower lines show how it is possible to wrap at arbitrary positions by inserting ZERO WIDTH SPACE characters.

Questions:

I've added a test. How do I generate the expected image? Most ""result images perceptually match, though files differ"" on my system.
The patch is against master but I can rebase it. Where? branch-7-2? branch-7-3?

I'll update to the documentation.","No, unless fixing a regression is a breaking change ;-)
I'm not that familiar with the release schedule and versioning, to know if 7.0 or 7.2 is appropriate. Please let me know on which branch I should rebase this.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5634,2018-07-31T06:22:07Z,2018-08-30T19:38:26Z,2019-01-24T08:06:57Z,MERGED,True,111,20,3,https://github.com/olt,Fix label wrap (#5612) and wrap at ZERO WIDTH SPACE (#5613),2,[],https://github.com/mapserver/mapserver/pull/5634,https://github.com/sdlime,7,https://github.com/MapServer/MapServer/pull/5634#issuecomment-414661115,"This fixes #5612 and implements #5613.
Here are two images from the added test case.
This is the output with current master. Lines starting with W should wrap, lines with NW should not wrap. Note how the dash is removed in the first lines and how the second line is wrapped even if there is no wrap character. (#5612)

This is the output with my fix. The first two lines are wrapped correctly. The lower lines show how it is possible to wrap at arbitrary positions by inserting ZERO WIDTH SPACE characters.

Questions:

I've added a test. How do I generate the expected image? Most ""result images perceptually match, though files differ"" on my system.
The patch is against master but I can rebase it. Where? branch-7-2? branch-7-3?

I'll update to the documentation.","Let’s go with 7.2.
…
________________________________
From: Oliver Tonnhofer <notifications@github.com>
Sent: Tuesday, August 21, 2018 1:32:14 AM
To: mapserver/mapserver
Cc: Lime, Steve D (MNIT); Comment
Subject: Re: [mapserver/mapserver] Fix label wrap (#5612) and wrap at ZERO WIDTH SPACE (#5613) (#5634)


No, unless fixing a regression is a breaking change ;-)
I'm not that familiar with the release schedule and versioning, to know if 7.0 or 7.2 is appropriate. Please let me know on which branch I should rebase this.

—
You are receiving this because you commented.
Reply to this email directly, view it on GitHub<#5634 (comment)>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ABhm-wRefoux6WOfobjjeEQPoBQN4f-kks5uS6lugaJpZM4Vnqf3>.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5634,2018-07-31T06:22:07Z,2018-08-30T19:38:26Z,2019-01-24T08:06:57Z,MERGED,True,111,20,3,https://github.com/olt,Fix label wrap (#5612) and wrap at ZERO WIDTH SPACE (#5613),2,[],https://github.com/mapserver/mapserver/pull/5634,https://github.com/olt,8,https://github.com/MapServer/MapServer/pull/5634#issuecomment-414947139,"This fixes #5612 and implements #5613.
Here are two images from the added test case.
This is the output with current master. Lines starting with W should wrap, lines with NW should not wrap. Note how the dash is removed in the first lines and how the second line is wrapped even if there is no wrap character. (#5612)

This is the output with my fix. The first two lines are wrapped correctly. The lower lines show how it is possible to wrap at arbitrary positions by inserting ZERO WIDTH SPACE characters.

Questions:

I've added a test. How do I generate the expected image? Most ""result images perceptually match, though files differ"" on my system.
The patch is against master but I can rebase it. Where? branch-7-2? branch-7-3?

I'll update to the documentation.",Added the missing expected image and rebased on branch-7-2. Update to docs in MapServer/MapServer-documentation#251,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5634,2018-07-31T06:22:07Z,2018-08-30T19:38:26Z,2019-01-24T08:06:57Z,MERGED,True,111,20,3,https://github.com/olt,Fix label wrap (#5612) and wrap at ZERO WIDTH SPACE (#5613),2,[],https://github.com/mapserver/mapserver/pull/5634,https://github.com/sdlime,9,https://github.com/MapServer/MapServer/pull/5634#issuecomment-417442234,"This fixes #5612 and implements #5613.
Here are two images from the added test case.
This is the output with current master. Lines starting with W should wrap, lines with NW should not wrap. Note how the dash is removed in the first lines and how the second line is wrapped even if there is no wrap character. (#5612)

This is the output with my fix. The first two lines are wrapped correctly. The lower lines show how it is possible to wrap at arbitrary positions by inserting ZERO WIDTH SPACE characters.

Questions:

I've added a test. How do I generate the expected image? Most ""result images perceptually match, though files differ"" on my system.
The patch is against master but I can rebase it. Where? branch-7-2? branch-7-3?

I'll update to the documentation.",Thanks Oliver!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5640,2018-08-12T12:56:05Z,2018-08-13T15:28:05Z,2018-08-13T15:28:13Z,MERGED,True,72,58,3,https://github.com/msmitherdc,bring dockerfiles up to date,2,[],https://github.com/mapserver/mapserver/pull/5640,https://github.com/msmitherdc,1,https://github.com/MapServer/MapServer/pull/5640,"add protocol buf support, update gdal config, add openjpeg, use c++11 (gcc 4.9)","add protocol buf support, update gdal config, add openjpeg, use c++11 (gcc 4.9)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5640,2018-08-12T12:56:05Z,2018-08-13T15:28:05Z,2018-08-13T15:28:13Z,MERGED,True,72,58,3,https://github.com/msmitherdc,bring dockerfiles up to date,2,[],https://github.com/mapserver/mapserver/pull/5640,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5640#issuecomment-412558734,"add protocol buf support, update gdal config, add openjpeg, use c++11 (gcc 4.9)",Thanks Mike! I re-ran the travis integration test and all is well. --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5641,2018-08-14T15:04:13Z,2018-08-14T15:19:57Z,2021-04-26T02:38:29Z,MERGED,True,1718,1693,2,https://github.com/sdlime,Made the lexer regex for regular expression EXPRESSIONs more specific…,1,[],https://github.com/mapserver/mapserver/pull/5641,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/5641,… (see #5636).,… (see #5636).,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5641,2018-08-14T15:04:13Z,2018-08-14T15:19:57Z,2021-04-26T02:38:29Z,MERGED,True,1718,1693,2,https://github.com/sdlime,Made the lexer regex for regular expression EXPRESSIONs more specific…,1,[],https://github.com/mapserver/mapserver/pull/5641,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5641#issuecomment-412904981,… (see #5636).,"The regex was too general and didn't allow for *'s anywhere in an expression. Now the * is not allowed as the first character after the leading / to avoid interpretation as a C-style comment.
--Steve
Note: there is a work-around if someone needed a regex starting with a * (this would be /* in the mapfile) - use logical expressions like EXPRESSION ('[column]' ~ '*...').",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5642,2018-08-14T20:33:47Z,2018-10-05T23:46:55Z,2018-10-05T23:46:55Z,CLOSED,False,354,32,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,4,[],https://github.com/mapserver/mapserver/pull/5642,https://github.com/AlexanderGabriel,1,https://github.com/MapServer/MapServer/pull/5642,"Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex","Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex",True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5642,2018-08-14T20:33:47Z,2018-10-05T23:46:55Z,2018-10-05T23:46:55Z,CLOSED,False,354,32,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,4,[],https://github.com/mapserver/mapserver/pull/5642,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5642#issuecomment-413360050,"Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex","I see you need to build SWIG from source to get this to work on Windows. Any idea when a SWIG release is planned that will produce the PHP MapScript?
It may also be worth moving the PHP build commands to a separate script file in appveyor.yaml in the future (I'll try to do the same with Python) to keep it easier to read (similar to the Travis script).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5642,2018-08-14T20:33:47Z,2018-10-05T23:46:55Z,2018-10-05T23:46:55Z,CLOSED,False,354,32,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,4,[],https://github.com/mapserver/mapserver/pull/5642,https://github.com/AlexanderGabriel,3,https://github.com/MapServer/MapServer/pull/5642#issuecomment-413492943,"Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex","It' even worse. I build a developement state of swig (didnt update for a while) for PHP but we still need swig from gisinternals sdk for csharp... it is not possible to use the built swig for csharp because of any other bug.
this is of course only a workaround. when a version of swig will be released that does not have any problems with php and csharp i don't know.
building php would be unnessesary aswell if it was in the sdk or the needed files were available as download somewhere.
I really tried a lot of things. look at the commit history of the other PR i already closed and this is only the stuff i pushed to github.
I didn't want to upload php or swig compiled to my homepage and create another unrelyable dependency.
This was the way/workaround I was able to get this working and i think, this is a good point to start and improve this.
If you seperate the python commands, I can look how that works and do this with php, too but I'm really a beginner with appveyor ;)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5642,2018-08-14T20:33:47Z,2018-10-05T23:46:55Z,2018-10-05T23:46:55Z,CLOSED,False,354,32,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,4,[],https://github.com/mapserver/mapserver/pull/5642,https://github.com/geographika,4,https://github.com/MapServer/MapServer/pull/5642#issuecomment-413526731,"Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex","I tried to get the csharp bindings working with a later version of SWIG (as the Python bindings should really be built with Swig > 3.0) - see #5583
I'm not a csharp developer, but will take another look at this soon.
In case you are wondering why all the slashes are reversed in the appveyor.yaml paths - CMake throws errors on paths with \t and other command characters.
We could maybe use Chocolatey for installation of various dependencies (SWIG, PHP etc), see
https://chocolatey.org/packages/php
The existing pull request looks good to me though and can be refined in the future.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5642,2018-08-14T20:33:47Z,2018-10-05T23:46:55Z,2018-10-05T23:46:55Z,CLOSED,False,354,32,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,4,[],https://github.com/mapserver/mapserver/pull/5642,https://github.com/AlexanderGabriel,5,https://github.com/MapServer/MapServer/pull/5642#issuecomment-413529340,"Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex","I tried chocolatey and installed php but it does not contain dvelopement files
A few years ago, php offered all that to download but they do not any more.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5642,2018-08-14T20:33:47Z,2018-10-05T23:46:55Z,2018-10-05T23:46:55Z,CLOSED,False,354,32,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,4,[],https://github.com/mapserver/mapserver/pull/5642,https://github.com/AlexanderGabriel,6,https://github.com/MapServer/MapServer/pull/5642#issuecomment-414080309,"Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex",Would it be better if i opened the pullrequest against master or can you switch this when merging?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5642,2018-08-14T20:33:47Z,2018-10-05T23:46:55Z,2018-10-05T23:46:55Z,CLOSED,False,354,32,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,4,[],https://github.com/mapserver/mapserver/pull/5642,https://github.com/geographika,7,https://github.com/MapServer/MapServer/pull/5642#issuecomment-425368620,"Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex","@AlexanderGabriel - would you be able to open against the master branch?
Also rather than building SWIG from source how about downloading form http://prdownloads.sourceforge.net/swig/swigwin-3.0.12.zip - this can then be cached in Appveyor which will speed up build times.
Are all PHP versions required for Travis? The build time is up to 51 minutes (see https://travis-ci.org/mapserver/mapserver/builds/416091387). Perhaps one of the 5.x versions could be dropped.
I'll then test locally and see if we can get this merged.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5642,2018-08-14T20:33:47Z,2018-10-05T23:46:55Z,2018-10-05T23:46:55Z,CLOSED,False,354,32,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,4,[],https://github.com/mapserver/mapserver/pull/5642,https://github.com/AlexanderGabriel,8,https://github.com/MapServer/MapServer/pull/5642#issuecomment-425730075,"Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex","Of course. Working on it right now. I dropped building with PHP 5.5. It isn's supported any more so we don't have to test with it.
I need SWIG from git because it fixes a problem when building thread-safe on Windows but PHP and SWIG could be cached. This would save time.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5642,2018-08-14T20:33:47Z,2018-10-05T23:46:55Z,2018-10-05T23:46:55Z,CLOSED,False,354,32,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,4,[],https://github.com/mapserver/mapserver/pull/5642,https://github.com/geographika,9,https://github.com/MapServer/MapServer/pull/5642#issuecomment-425753518,"Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex","@AlexanderGabriel - excellent!
I have finally got the .NET MapScript bindings working with SWIG 3.0.12 - see #5583
This includes a few more Appveyor changes but it should be easy enough to merge later.
Does SWIG 3.0.12 resolve the thread-safe issue? It means that PHP and .NET bindings could be combined in a single build step. I also plan on adding Python3 to Appveyor - this could be combined with one of the PHP versions to speed up build time.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5642,2018-08-14T20:33:47Z,2018-10-05T23:46:55Z,2018-10-05T23:46:55Z,CLOSED,False,354,32,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,4,[],https://github.com/mapserver/mapserver/pull/5642,https://github.com/AlexanderGabriel,10,https://github.com/MapServer/MapServer/pull/5642#issuecomment-425992975,"Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex","@geographika SWIG 3.0.12 does not solve this problem. it is from january and the fix is from december last year: swig/swig@224bb9e
In addition, there is no build system provided for windows. i created cmake files to be able to build it. not really a good solution but i didn't find any other way to get this running.
building php while building mapserver is not optimal at all but i couldnt find the needed files on php homepage to download... i could stage the stuff on my website. this would speed up everything but would only add more unnessesary dependencies to external ressources.
I'll prepare a pull request now against master branch and then we can try to improve this over time.
I'll be back ;)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5642,2018-08-14T20:33:47Z,2018-10-05T23:46:55Z,2018-10-05T23:46:55Z,CLOSED,False,354,32,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,4,[],https://github.com/mapserver/mapserver/pull/5642,https://github.com/geographika,11,https://github.com/MapServer/MapServer/pull/5642#issuecomment-426072989,"Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex",@AlexanderGabriel - it is possible in Appveyor to leave files/folders between builds which could be done for both SWIG and PHP. Personally I wouldn't be against hosting the compiled files/libs externally and downloading them similar to the SDK. Ideally the PHP libs could be added to the SDK at GISInternals. This would retain the focus of Appveyor on the MapServer build and CI. Maybe it is something to take to the mailing list?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5642,2018-08-14T20:33:47Z,2018-10-05T23:46:55Z,2018-10-05T23:46:55Z,CLOSED,False,354,32,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,4,[],https://github.com/mapserver/mapserver/pull/5642,https://github.com/AlexanderGabriel,12,https://github.com/MapServer/MapServer/pull/5642#issuecomment-426077857,"Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex","@geographika I already cache the sdk in my working branch (https://github.com/AlexanderGabriel/mapserver/tree/TryToFixAppVeyorAndSpeedup), now working on php. it costs me so much time to wait every time so i think, it's worth it.
the sdk would really be a good place to keep php and swig (in two versions until new swig version gets released). in the readme under mapscript/phpng is everything that is needed to build php and swig.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5642,2018-08-14T20:33:47Z,2018-10-05T23:46:55Z,2018-10-05T23:46:55Z,CLOSED,False,354,32,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,4,[],https://github.com/mapserver/mapserver/pull/5642,https://github.com/geographika,13,https://github.com/MapServer/MapServer/pull/5642#issuecomment-427075460,"Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex","I've had a quick attempt to run things locally. A couple of questions.
SWIG compiled fine. I presume the patch required for PHP will be in the future SWIG 4.0 release?
I guess this could happen in the near future: swig/swig#1299
With regards to the compiling PHP, is it possible to use the binaries at https://windows.php.net/download#php-7.2-ts-VC15-x64 ? Or does this output differ from the Appveyor steps?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5642,2018-08-14T20:33:47Z,2018-10-05T23:46:55Z,2018-10-05T23:46:55Z,CLOSED,False,354,32,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,4,[],https://github.com/mapserver/mapserver/pull/5642,https://github.com/AlexanderGabriel,14,https://github.com/MapServer/MapServer/pull/5642#issuecomment-427084985,"Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex","Hi Seth,
i thought about this today, too. I need current swig ""only"" for thread-safe php&mapscript on windows. Non-thread-safe mapscript for windows is really unuseful (can't load php it into apache as module for example) but we will for sure not be happy if mapserver relies on unstable software-dependencies.
In addition, appveyor changed cmake to 3.12 last week and now the building fails because swig cannot find swig.swg but only if i use my build so there is something broken aswell or this is a bug in cmake on windows. did you have any problems with SWIG in AppVeyor since 28th of Sept?
so i thought it would be best to go one step back, build php-mapscript non-thread-safe but based on stable releases like swig 3.0.12 (which works) and list thread-safety-support as known issue until swig-4.0.0 is released. this will be much less work for all of us.
for the cache: php is too big (>1GB) but i hat the idea to delete dependencies after compiling, zipping everything and download it from my server or cache it. depends on what is faster. even don't do a snapshot build saves time.
So what i will do now is:

Build everything for Non-Thread-Safe PHP
Use stable SWIG 3.0.12
Make it work with CMake 3.12.x

Would that be ok?
And after SWIG-4.0 gets released, we solve the thread-safe-problem on windows. I think, theres more people waiting for php-mapscript-support on linux than on windows ;)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5642,2018-08-14T20:33:47Z,2018-10-05T23:46:55Z,2018-10-05T23:46:55Z,CLOSED,False,354,32,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,4,[],https://github.com/mapserver/mapserver/pull/5642,https://github.com/AlexanderGabriel,15,https://github.com/MapServer/MapServer/pull/5642#issuecomment-427092660,"Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex","With regards to the compiling PHP, is it possible to use the binaries at https://windows.php.net/download#php-7.2-ts-VC15-x64 ? Or does this output differ from the Appveyor steps?

No. This does not contain development header... I tried this in the beginning. A few years ago, php offered headers to download...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5642,2018-08-14T20:33:47Z,2018-10-05T23:46:55Z,2018-10-05T23:46:55Z,CLOSED,False,354,32,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,4,[],https://github.com/mapserver/mapserver/pull/5642,https://github.com/AlexanderGabriel,16,https://github.com/MapServer/MapServer/pull/5642#issuecomment-427134342,"Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex","this can last a few days more. not sure, what the problem is. i opened an issue at cmake. can't build phpng-mapscript with cmake 3.12.3 but 3.11.4 works: https://gitlab.kitware.com/cmake/cmake/issues/18421",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5642,2018-08-14T20:33:47Z,2018-10-05T23:46:55Z,2018-10-05T23:46:55Z,CLOSED,False,354,32,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,4,[],https://github.com/mapserver/mapserver/pull/5642,https://github.com/geographika,17,https://github.com/MapServer/MapServer/pull/5642#issuecomment-427177555,"Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex","@AlexanderGabriel - I've sent a mail to the dev list to see if hosting the PHP SDK and downloading to Appveyor is ok. See https://lists.osgeo.org/pipermail/mapserver-dev/2018-October/015511.html
Is it ok with the hosting costs on your side?
Agree - let's go with SWIG 3.0.12 - I have this setup and ready to add in #5583 - and will merge to master this weekend if there are no objections.
Do we need to test all PHP v7 versions on Travis including nightly? Would sticking to just 7.2 be enough, and document this is the ""supported/tested"" version?
I've read through the details in #5557 and the RFC on the approach taken, and have a couple of questions.
Is there any easy test test that can be added to verify the build (even just outputting the MapServer version number through PHPNG MapScript)? The php7module.i doesn't contain any custom code - is this because it is unnecessary, or is this something to be added to in the future?
We'll get this merged soon!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5642,2018-08-14T20:33:47Z,2018-10-05T23:46:55Z,2018-10-05T23:46:55Z,CLOSED,False,354,32,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,4,[],https://github.com/mapserver/mapserver/pull/5642,https://github.com/AlexanderGabriel,18,https://github.com/MapServer/MapServer/pull/5642#issuecomment-427186069,"Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex","Agree - let's go with SWIG 3.0.12 - I have this setup and ready to add in #5583 - and will merge to master this weekend if there are no objections.

Already saw this. Will wait for the merge.
I was able to strip down PHP-SDK to 168MB after building and mapserver still builds. Disabling different modules saves time, aswell. We'll see if it is necessary to buffer this somewhere or build it every time. Hosting it on my server is ok.

Do we need to test all PHP v7 versions on Travis including nightly? Would sticking to just 7.2 be enough, and document this is the ""supported/tested"" version?

We can drop this. Travis is new to me so i was playing around with it. Thought it would be cool to build against nightly builds ;)

I've read through the details in #5557 and the RFC on the approach taken, and have a couple of questions.

Not sure if i understand this. You have questions to me? Shall we meet in the irc?

Is there any easy test test that can be added to verify the build (even just outputting the MapServer version number through PHPNG MapScript)?

Sure. phpinfo() or something and analyze the output. Didn't try something like this yet.

The php7module.i doesn't contain any custom code - is this because it is unnecessary, or is this something to be added to in the future?

Not sure, why there should be custom code. The interface is defined in mapscript.i. If everything is fine, there must not be any code here? This file exists because @geomunion added some information to phpinfo().
There is one message when runnig swig:
CustomBuild:
Swig source
C:\projects\mapserver\mapscript\v8....\mapserver.h(932): warning 314: 'empty' is a PHP keyword, renaming to 'c_empty' [C:\projects\mapserver\build\mapscript\phpng\php_mapscriptng.vcxproj]
I think, this can be masked in php7module.i but there is nothing more i plan to put there but hey - we are at the beginning ;)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5642,2018-08-14T20:33:47Z,2018-10-05T23:46:55Z,2018-10-05T23:46:55Z,CLOSED,False,354,32,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,4,[],https://github.com/mapserver/mapserver/pull/5642,https://github.com/AlexanderGabriel,19,https://github.com/MapServer/MapServer/pull/5642#issuecomment-427209609,"Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex","@geographika
i tried this in CMakeLists.txt of phpng-mapscript on my machine and it works fine:
file(DOWNLOAD ""https://files.digital-infinity.de/php-sdk-$ENV{VSCMD_ARG_TGT_ARCH}-nts.tar.gz"" ""${PROJECT_SOURCE_DIR}/../php-sdk.tar.gz"")
execute_process(COMMAND ${CMAKE_COMMAND} -E tar xzf ""${PROJECT_SOURCE_DIR}/../php-sdk.tar.gz"" WORKING_DIRECTORY ""${PROJECT_SOURCE_DIR}/.."")
Letting CMake download all that stuff would not only clean up the appveyor.yml. It would work even for users when building mapserver. they will not have any work with downloading dependencies... everything is downloaded just in time. even swig-3.0.12 in you csharp module.
tar is built in but you can call 7z aswell but users have to install it. repacking mapserver-sdk to tar.gz would solve this.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5642,2018-08-14T20:33:47Z,2018-10-05T23:46:55Z,2018-10-05T23:46:55Z,CLOSED,False,354,32,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,4,[],https://github.com/mapserver/mapserver/pull/5642,https://github.com/AlexanderGabriel,20,https://github.com/MapServer/MapServer/pull/5642#issuecomment-427209657,"Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex",sorry. wrong button...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5642,2018-08-14T20:33:47Z,2018-10-05T23:46:55Z,2018-10-05T23:46:55Z,CLOSED,False,354,32,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,4,[],https://github.com/mapserver/mapserver/pull/5642,https://github.com/geomunion,21,https://github.com/MapServer/MapServer/pull/5642#issuecomment-427295779,"Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex","The php7module.i is used to generate php-module specific code to display MapScript version etc. via
<?php
phpinfo();
see:

http://www.swig.org/Doc3.0/Php.html#Php_nn2_7
http://php.net/manual/en/function.phpinfo.php",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5642,2018-08-14T20:33:47Z,2018-10-05T23:46:55Z,2018-10-05T23:46:55Z,CLOSED,False,354,32,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,4,[],https://github.com/mapserver/mapserver/pull/5642,https://github.com/geographika,22,https://github.com/MapServer/MapServer/pull/5642#issuecomment-427358733,"Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex","@AlexanderGabriel - you answered my questions in your above comment - thanks!
Is it possible to download https://files.digital-infinity.de/php-sdk-$ENV{VSCMD_ARG_TGT_ARCH}-nts.tar.gz as part of the Appveyor script and simply unzip and point paths to the SDK?
It might be better in the long term to keep CMake focused on MapServer and let the CI take care of gathering dependencies - this would also mean users can build with the own dependencies if needed.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5642,2018-08-14T20:33:47Z,2018-10-05T23:46:55Z,2018-10-05T23:46:55Z,CLOSED,False,354,32,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,4,[],https://github.com/mapserver/mapserver/pull/5642,https://github.com/AlexanderGabriel,23,https://github.com/MapServer/MapServer/pull/5642#issuecomment-427439451,"Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex","I think, we can forget php-mapscriptng on windows for now. At least building it with AppVeyor will fail if we don't change CMake during the build.
The current development state of CMake can build the extension again but this is the same problem as with SWIG: It is not stable.
https://gitlab.kitware.com/cmake/cmake/merge_requests/2448#note_466298
CMake 3.13 will be soon so i think, we have to wait.
I can prepare CMakeLists.txt so CMake will throw errors on Windows until the right versions of SWIG and CMake are used. This will at least enable users to compile it if they get the latest development states of SWIG and CMake.
Until that, we will also not need PHP-SDK somewhere. Hosting it on osgeo.org as suggested by Steve is good. We can change the urls as soon as we got the final urls for the sdk.
Should i prepare the sdk with a specific version of php like latest release of 7.2? (7.2.10)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5642,2018-08-14T20:33:47Z,2018-10-05T23:46:55Z,2018-10-05T23:46:55Z,CLOSED,False,354,32,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,4,[],https://github.com/mapserver/mapserver/pull/5642,https://github.com/AlexanderGabriel,24,https://github.com/MapServer/MapServer/pull/5642#issuecomment-427517115,"Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex","Is there any easy test test that can be added to verify the build (even just outputting the MapServer version number through PHPNG MapScript)?

AppVeyor has chocolatey installed. i can install php with cocholatey and it should be easy to install mapscript-module after building and produce some test-output.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5642,2018-08-14T20:33:47Z,2018-10-05T23:46:55Z,2018-10-05T23:46:55Z,CLOSED,False,354,32,14,https://github.com/AlexanderGabriel,Add PHP Mapscript via SWIG,4,[],https://github.com/mapserver/mapserver/pull/5642,https://github.com/AlexanderGabriel,25,https://github.com/MapServer/MapServer/pull/5642#issuecomment-427527044,"Hi,
another try.
This will add support for PHP Mapscript via SWIG and it builds with travis and appveyor.
Kind Regards,
Alex",New PR here: #5675,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5645,2018-08-18T08:42:31Z,2018-08-31T21:39:27Z,2018-08-31T21:39:27Z,MERGED,True,333,431,16,https://github.com/geographika,Updated Python MapScript Build Process,27,[],https://github.com/mapserver/mapserver/pull/5645,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5645,"This pull request contains the updates to the Python CMakeLists including:

handling Python2 and Python3
allow newer CMake SWIG features when available
use a template setup.py.in file
builds a Python Wheels as output, rather than simply the mapscript.py and mapscript.pyd files
adds a new CMake target - cmake --build . --target pythonmapscript-wheel --config Release - this is used to build the Wheels at https://pypi.org/project/mapscript/
the previous process CMake process builds Python MapScript exactly as before, so should be fully backwards compatible

Along with the above the pull request:

removes the old setup.py and setup.cfg which were no longer used (even prior to this pull request as CMake was building mapscript)
updates a couple of the Python MapScript tests
adds a new ReadMe.rst for Python MapScript, which is also added to the package and uploaded to PyPI

See the wiki page at https://github.com/mapserver/mapserver/wiki/Python-MapScript-Updates-2018 for ongoing updates to the Python MapScript bindings","This pull request contains the updates to the Python CMakeLists including:

handling Python2 and Python3
allow newer CMake SWIG features when available
use a template setup.py.in file
builds a Python Wheels as output, rather than simply the mapscript.py and mapscript.pyd files
adds a new CMake target - cmake --build . --target pythonmapscript-wheel --config Release - this is used to build the Wheels at https://pypi.org/project/mapscript/
the previous process CMake process builds Python MapScript exactly as before, so should be fully backwards compatible

Along with the above the pull request:

removes the old setup.py and setup.cfg which were no longer used (even prior to this pull request as CMake was building mapscript)
updates a couple of the Python MapScript tests
adds a new ReadMe.rst for Python MapScript, which is also added to the package and uploaded to PyPI

See the wiki page at https://github.com/mapserver/mapserver/wiki/Python-MapScript-Updates-2018 for ongoing updates to the Python MapScript bindings",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5645,2018-08-18T08:42:31Z,2018-08-31T21:39:27Z,2018-08-31T21:39:27Z,MERGED,True,333,431,16,https://github.com/geographika,Updated Python MapScript Build Process,27,[],https://github.com/mapserver/mapserver/pull/5645,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5645#issuecomment-414078900,"This pull request contains the updates to the Python CMakeLists including:

handling Python2 and Python3
allow newer CMake SWIG features when available
use a template setup.py.in file
builds a Python Wheels as output, rather than simply the mapscript.py and mapscript.pyd files
adds a new CMake target - cmake --build . --target pythonmapscript-wheel --config Release - this is used to build the Wheels at https://pypi.org/project/mapscript/
the previous process CMake process builds Python MapScript exactly as before, so should be fully backwards compatible

Along with the above the pull request:

removes the old setup.py and setup.cfg which were no longer used (even prior to this pull request as CMake was building mapscript)
updates a couple of the Python MapScript tests
adds a new ReadMe.rst for Python MapScript, which is also added to the package and uploaded to PyPI

See the wiki page at https://github.com/mapserver/mapserver/wiki/Python-MapScript-Updates-2018 for ongoing updates to the Python MapScript bindings",Would it be possible to add in Travis-CI testing of the wheel building target ?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5645,2018-08-18T08:42:31Z,2018-08-31T21:39:27Z,2018-08-31T21:39:27Z,MERGED,True,333,431,16,https://github.com/geographika,Updated Python MapScript Build Process,27,[],https://github.com/mapserver/mapserver/pull/5645,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5645#issuecomment-414079578,"This pull request contains the updates to the Python CMakeLists including:

handling Python2 and Python3
allow newer CMake SWIG features when available
use a template setup.py.in file
builds a Python Wheels as output, rather than simply the mapscript.py and mapscript.pyd files
adds a new CMake target - cmake --build . --target pythonmapscript-wheel --config Release - this is used to build the Wheels at https://pypi.org/project/mapscript/
the previous process CMake process builds Python MapScript exactly as before, so should be fully backwards compatible

Along with the above the pull request:

removes the old setup.py and setup.cfg which were no longer used (even prior to this pull request as CMake was building mapscript)
updates a couple of the Python MapScript tests
adds a new ReadMe.rst for Python MapScript, which is also added to the package and uploaded to PyPI

See the wiki page at https://github.com/mapserver/mapserver/wiki/Python-MapScript-Updates-2018 for ongoing updates to the Python MapScript bindings",@rouault - yes this is on the todo list. I'll hopefully get a look at it this week and will add to this pull request. Currently none of the Python tests are run on Travis so it will be good to get these added back in.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5645,2018-08-18T08:42:31Z,2018-08-31T21:39:27Z,2018-08-31T21:39:27Z,MERGED,True,333,431,16,https://github.com/geographika,Updated Python MapScript Build Process,27,[],https://github.com/mapserver/mapserver/pull/5645,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/5645#issuecomment-414079836,"This pull request contains the updates to the Python CMakeLists including:

handling Python2 and Python3
allow newer CMake SWIG features when available
use a template setup.py.in file
builds a Python Wheels as output, rather than simply the mapscript.py and mapscript.pyd files
adds a new CMake target - cmake --build . --target pythonmapscript-wheel --config Release - this is used to build the Wheels at https://pypi.org/project/mapscript/
the previous process CMake process builds Python MapScript exactly as before, so should be fully backwards compatible

Along with the above the pull request:

removes the old setup.py and setup.cfg which were no longer used (even prior to this pull request as CMake was building mapscript)
updates a couple of the Python MapScript tests
adds a new ReadMe.rst for Python MapScript, which is also added to the package and uploaded to PyPI

See the wiki page at https://github.com/mapserver/mapserver/wiki/Python-MapScript-Updates-2018 for ongoing updates to the Python MapScript bindings","What does the wheel exactly contain ? The mapscript.py and  the corresponding .dll/.so right ? Not libmapserver.so/dll, and all its dependencies ? This could probably be clarified in the ""Wheels and PyPI"" section of mapscript/python/README.rst so people have a clear understanding that they also need to install the native mapserver binaries alongside the wheel (I'm saying that since for example some rasterio wheels provide the full GDAL stack with them)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5645,2018-08-18T08:42:31Z,2018-08-31T21:39:27Z,2018-08-31T21:39:27Z,MERGED,True,333,431,16,https://github.com/geographika,Updated Python MapScript Build Process,27,[],https://github.com/mapserver/mapserver/pull/5645,https://github.com/geographika,5,https://github.com/MapServer/MapServer/pull/5645#issuecomment-414772231,"This pull request contains the updates to the Python CMakeLists including:

handling Python2 and Python3
allow newer CMake SWIG features when available
use a template setup.py.in file
builds a Python Wheels as output, rather than simply the mapscript.py and mapscript.pyd files
adds a new CMake target - cmake --build . --target pythonmapscript-wheel --config Release - this is used to build the Wheels at https://pypi.org/project/mapscript/
the previous process CMake process builds Python MapScript exactly as before, so should be fully backwards compatible

Along with the above the pull request:

removes the old setup.py and setup.cfg which were no longer used (even prior to this pull request as CMake was building mapscript)
updates a couple of the Python MapScript tests
adds a new ReadMe.rst for Python MapScript, which is also added to the package and uploaded to PyPI

See the wiki page at https://github.com/mapserver/mapserver/wiki/Python-MapScript-Updates-2018 for ongoing updates to the Python MapScript bindings","@rouault - I've made a few changes that hopefully address these. The wheel only contains the mapscript.py and .so, plus the examples folder (which is very outdated but I hope to sort out for a next release). They are all in a separate folder now which helps keep Python environments cleaner, and can be easily pip uninstalled.

the wheel is now built, installed, and the Python test suite run on Travis (and Appveyor). Unfortunately there is no stdout output written to the logs. This may be hidden by Travis? Also I was not sure where to best place the wheel command. I added a new target in the Makefile and call this separately in .travis.yml
I have updated the README to make it clearer the binaries need installing.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5645,2018-08-18T08:42:31Z,2018-08-31T21:39:27Z,2018-08-31T21:39:27Z,MERGED,True,333,431,16,https://github.com/geographika,Updated Python MapScript Build Process,27,[],https://github.com/mapserver/mapserver/pull/5645,https://github.com/geographika,6,https://github.com/MapServer/MapServer/pull/5645#issuecomment-415954790,"This pull request contains the updates to the Python CMakeLists including:

handling Python2 and Python3
allow newer CMake SWIG features when available
use a template setup.py.in file
builds a Python Wheels as output, rather than simply the mapscript.py and mapscript.pyd files
adds a new CMake target - cmake --build . --target pythonmapscript-wheel --config Release - this is used to build the Wheels at https://pypi.org/project/mapscript/
the previous process CMake process builds Python MapScript exactly as before, so should be fully backwards compatible

Along with the above the pull request:

removes the old setup.py and setup.cfg which were no longer used (even prior to this pull request as CMake was building mapscript)
updates a couple of the Python MapScript tests
adds a new ReadMe.rst for Python MapScript, which is also added to the package and uploaded to PyPI

See the wiki page at https://github.com/mapserver/mapserver/wiki/Python-MapScript-Updates-2018 for ongoing updates to the Python MapScript bindings","If there are no further comments I'll go ahead and merge this later today, to then focus on updating the Python MapScript examples distributed in the Wheel package.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5647,2018-08-20T15:52:39Z,2018-08-20T16:27:33Z,2018-08-20T16:27:33Z,MERGED,True,8,25,1,https://github.com/gogglesguy,Simplify msDBFWriteAttribute to get rid of compiler warnings,2,[],https://github.com/mapserver/mapserver/pull/5647,https://github.com/gogglesguy,1,https://github.com/MapServer/MapServer/pull/5647,"Latest GCC shows these warnings when compiling release build:
warning: ‘strncpy’ specified bound depends on the length of the source argument [-Wstringop-overflow=]
warning: ‘strncpy’ output may be truncated copying between 0 and 39 bytes from a string of length 39 [-Wstringop-truncation]
warning: ‘strncpy’ output truncated before terminating nul copying as many bytes from a string as its length [-Wstringop-truncation]
In msDBFWriteAttribute we can replace strncpy with memcpy since we already check for the string length and we don't want the strncpy capability of writing extra \0 characters.
Also replace the 2 snprintf calls (one for the specific format, and one for the value) with a single one.
As snprintf can handle 0 precision numbers just fine, we don't need a separate branch for that either.
NOTE, this does change the rounding for doubles whose field precision is set to 0.
Before 90.9 would be converted to 90, with the new code it would become 91.","Latest GCC shows these warnings when compiling release build:
warning: ‘strncpy’ specified bound depends on the length of the source argument [-Wstringop-overflow=]
warning: ‘strncpy’ output may be truncated copying between 0 and 39 bytes from a string of length 39 [-Wstringop-truncation]
warning: ‘strncpy’ output truncated before terminating nul copying as many bytes from a string as its length [-Wstringop-truncation]
In msDBFWriteAttribute we can replace strncpy with memcpy since we already check for the string length and we don't want the strncpy capability of writing extra \0 characters.
Also replace the 2 snprintf calls (one for the specific format, and one for the value) with a single one.
As snprintf can handle 0 precision numbers just fine, we don't need a separate branch for that either.
NOTE, this does change the rounding for doubles whose field precision is set to 0.
Before 90.9 would be converted to 90, with the new code it would become 91.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5648,2018-08-20T16:08:48Z,2018-08-20T16:28:01Z,2018-08-20T16:28:01Z,MERGED,True,1,1,1,https://github.com/gogglesguy,mappostgis: fix forgotten pointer dereference,1,[],https://github.com/mapserver/mapserver/pull/5648,https://github.com/gogglesguy,1,https://github.com/MapServer/MapServer/pull/5648,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5649,2018-08-20T16:35:16Z,2018-08-20T16:52:23Z,2018-08-20T16:52:23Z,MERGED,True,2,1,1,https://github.com/gogglesguy,mapwms: fix forgotten if braces,1,[],https://github.com/mapserver/mapserver/pull/5649,https://github.com/gogglesguy,1,https://github.com/MapServer/MapServer/pull/5649,Compiler warned about misleading indent for commit c8190e5,Compiler warned about misleading indent for commit c8190e5,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5650,2018-08-20T18:39:45Z,2018-08-20T19:48:50Z,2018-08-20T19:49:07Z,MERGED,True,1,1,1,https://github.com/gogglesguy,mapogcsld: fix potential overflow when writing hexcolor ,1,[],https://github.com/mapserver/mapserver/pull/5650,https://github.com/gogglesguy,1,https://github.com/MapServer/MapServer/pull/5650,Fix potential overflow when writing hexcolor in the unlikely case color components are bigger than 255. Just keeping the compiler happy.,Fix potential overflow when writing hexcolor in the unlikely case color components are bigger than 255. Just keeping the compiler happy.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5650,2018-08-20T18:39:45Z,2018-08-20T19:48:50Z,2018-08-20T19:49:07Z,MERGED,True,1,1,1,https://github.com/gogglesguy,mapogcsld: fix potential overflow when writing hexcolor ,1,[],https://github.com/mapserver/mapserver/pull/5650,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5650#issuecomment-414440563,Fix potential overflow when writing hexcolor in the unlikely case color components are bigger than 255. Just keeping the compiler happy.,Thanks for all of these!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5651,2018-08-20T18:43:08Z,2018-08-31T14:03:36Z,2018-08-31T14:03:37Z,MERGED,True,8,4,2,https://github.com/gogglesguy,mapwcs: fixes to uninitialized memory / snprintf,2,[],https://github.com/mapserver/mapserver/pull/5651,https://github.com/gogglesguy,1,https://github.com/MapServer/MapServer/pull/5651,Mostly to keep the compiler happy and stop complaining.,Mostly to keep the compiler happy and stop complaining.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5651,2018-08-20T18:43:08Z,2018-08-31T14:03:36Z,2018-08-31T14:03:37Z,MERGED,True,8,4,2,https://github.com/gogglesguy,mapwcs: fixes to uninitialized memory / snprintf,2,[],https://github.com/mapserver/mapserver/pull/5651,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5651#issuecomment-417362504,Mostly to keep the compiler happy and stop complaining.,@Schpidi - can you take a quick peek since WCS is your area of expertise? Changes seem innocuous enough. --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5651,2018-08-20T18:43:08Z,2018-08-31T14:03:36Z,2018-08-31T14:03:37Z,MERGED,True,8,4,2,https://github.com/gogglesguy,mapwcs: fixes to uninitialized memory / snprintf,2,[],https://github.com/mapserver/mapserver/pull/5651,https://github.com/Schpidi,3,https://github.com/MapServer/MapServer/pull/5651#issuecomment-417662527,Mostly to keep the compiler happy and stop complaining.,"Sorry, this slipped through. I agree, the changes seem reasonable and since travis and appveyor are happy I'm 👍 for merging",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5651,2018-08-20T18:43:08Z,2018-08-31T14:03:36Z,2018-08-31T14:03:37Z,MERGED,True,8,4,2,https://github.com/gogglesguy,mapwcs: fixes to uninitialized memory / snprintf,2,[],https://github.com/mapserver/mapserver/pull/5651,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/5651#issuecomment-417674274,Mostly to keep the compiler happy and stop complaining.,Thanks Stephan!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5654,2018-08-28T20:36:56Z,2018-08-28T21:51:04Z,2018-08-28T21:51:09Z,MERGED,True,1,1,1,https://github.com/geographika,Fix incorrect CMake comment,1,[],https://github.com/mapserver/mapserver/pull/5654,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5654,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5655,2018-08-29T19:38:24Z,2018-08-29T19:50:55Z,2022-03-22T00:31:25Z,MERGED,True,1,1,1,https://github.com/sdlime,Fixed clipping error for point layers (#5652).,1,[],https://github.com/mapserver/mapserver/pull/5655,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/5655,Stupid error meant no single point features escaped clipping. --Steve,Stupid error meant no single point features escaped clipping. --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5655,2018-08-29T19:38:24Z,2018-08-29T19:50:55Z,2022-03-22T00:31:25Z,MERGED,True,1,1,1,https://github.com/sdlime,Fixed clipping error for point layers (#5652).,1,[],https://github.com/mapserver/mapserver/pull/5655,https://github.com/jratike80,2,https://github.com/MapServer/MapServer/pull/5655#issuecomment-417095530,Stupid error meant no single point features escaped clipping. --Steve,"I am very bad in reading the code but I do not understang how this new line makes things better if numlines=1 and layer type is point, because the bounding box is just a point and xmin=xmax and ymin=ymax.
if(shape->numlines > 0 && (layer_type == MS_LAYER_POINT || (shape->bounds.minx != shape->bounds.maxx || shape->bounds.miny != shape->bounds.maxy)))",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5656,2018-09-01T00:10:30Z,2018-09-04T18:45:26Z,2018-09-04T18:45:26Z,CLOSED,False,22,11,1,https://github.com/geographika,Python CMakeLists updates,4,[],https://github.com/mapserver/mapserver/pull/5656,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5656,"Fix version check, add some status messages, and remove redundant endif syntax, attempt to hide linker warnings","Fix version check, add some status messages, and remove redundant endif syntax, attempt to hide linker warnings",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5656,2018-09-01T00:10:30Z,2018-09-04T18:45:26Z,2018-09-04T18:45:26Z,CLOSED,False,22,11,1,https://github.com/geographika,Python CMakeLists updates,4,[],https://github.com/mapserver/mapserver/pull/5656,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5656#issuecomment-418476293,"Fix version check, add some status messages, and remove redundant endif syntax, attempt to hide linker warnings",Superseded by #5657,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5657,2018-09-04T18:27:49Z,2018-09-08T14:36:35Z,2018-09-08T16:51:57Z,MERGED,True,102,59,28,https://github.com/geographika,Add test suite to Python Wheel Builds,14,[],https://github.com/mapserver/mapserver/pull/5657,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5657,"This pull request does the following:

Adds the Python MapScript test suite and associated test data to the Python Wheel. This make it easy to run the tests following the installation of MapScript and check all parts of MapScript and MapServer are working correctly
Simplified the test running process so it can be run with a single command using pytest (and renamed test files to match the standard naming convention)
Updated the CMake wheel target to create a virtual environment, install the newly created wheel, and run the test suite on both Travis and Appveyor
Updated README.rst that will be displayed in PyPI and on GitHub detailing the testing and modified build process

Note the existing Python MapScript build process is unaffected. The wheels are only built when running a specific CMake target:
 cmake --build . --target pythonmapscript-wheel","This pull request does the following:

Adds the Python MapScript test suite and associated test data to the Python Wheel. This make it easy to run the tests following the installation of MapScript and check all parts of MapScript and MapServer are working correctly
Simplified the test running process so it can be run with a single command using pytest (and renamed test files to match the standard naming convention)
Updated the CMake wheel target to create a virtual environment, install the newly created wheel, and run the test suite on both Travis and Appveyor
Updated README.rst that will be displayed in PyPI and on GitHub detailing the testing and modified build process

Note the existing Python MapScript build process is unaffected. The wheels are only built when running a specific CMake target:
 cmake --build . --target pythonmapscript-wheel",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5657,2018-09-04T18:27:49Z,2018-09-08T14:36:35Z,2018-09-08T16:51:57Z,MERGED,True,102,59,28,https://github.com/geographika,Add test suite to Python Wheel Builds,14,[],https://github.com/mapserver/mapserver/pull/5657,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5657#issuecomment-419111040,"This pull request does the following:

Adds the Python MapScript test suite and associated test data to the Python Wheel. This make it easy to run the tests following the installation of MapScript and check all parts of MapScript and MapServer are working correctly
Simplified the test running process so it can be run with a single command using pytest (and renamed test files to match the standard naming convention)
Updated the CMake wheel target to create a virtual environment, install the newly created wheel, and run the test suite on both Travis and Appveyor
Updated README.rst that will be displayed in PyPI and on GitHub detailing the testing and modified build process

Note the existing Python MapScript build process is unaffected. The wheels are only built when running a specific CMake target:
 cmake --build . --target pythonmapscript-wheel","OK, LGTM as far as I'm concerned",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5657,2018-09-04T18:27:49Z,2018-09-08T14:36:35Z,2018-09-08T16:51:57Z,MERGED,True,102,59,28,https://github.com/geographika,Add test suite to Python Wheel Builds,14,[],https://github.com/mapserver/mapserver/pull/5657,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5657#issuecomment-419646515,"This pull request does the following:

Adds the Python MapScript test suite and associated test data to the Python Wheel. This make it easy to run the tests following the installation of MapScript and check all parts of MapScript and MapServer are working correctly
Simplified the test running process so it can be run with a single command using pytest (and renamed test files to match the standard naming convention)
Updated the CMake wheel target to create a virtual environment, install the newly created wheel, and run the test suite on both Travis and Appveyor
Updated README.rst that will be displayed in PyPI and on GitHub detailing the testing and modified build process

Note the existing Python MapScript build process is unaffected. The wheels are only built when running a specific CMake target:
 cmake --build . --target pythonmapscript-wheel",Fixed conflicts and merged. Will address code clean up and pylinting in a separate request.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5659,2018-09-06T13:11:44Z,2018-09-07T13:01:32Z,2018-09-07T15:38:35Z,MERGED,True,0,533,2,https://github.com/rouault,Remove FLTGetMapserverExpression() and subroutines that are not used …,1,[],https://github.com/mapserver/mapserver/pull/5659,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5659,…in code base. FLTGetCommonExpression() does the same,…in code base. FLTGetCommonExpression() does the same,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5659,2018-09-06T13:11:44Z,2018-09-07T13:01:32Z,2018-09-07T15:38:35Z,MERGED,True,0,533,2,https://github.com/rouault,Remove FLTGetMapserverExpression() and subroutines that are not used …,1,[],https://github.com/mapserver/mapserver/pull/5659,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5659#issuecomment-419102198,…in code base. FLTGetCommonExpression() does the same,@rouault  - the breaking Appveyor build should be addressed in master branch. Would it make sense to pull these changes into 7.2? Apologies for this.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5659,2018-09-06T13:11:44Z,2018-09-07T13:01:32Z,2018-09-07T15:38:35Z,MERGED,True,0,533,2,https://github.com/rouault,Remove FLTGetMapserverExpression() and subroutines that are not used …,1,[],https://github.com/mapserver/mapserver/pull/5659,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/5659#issuecomment-419105178,…in code base. FLTGetCommonExpression() does the same,"the breaking Appveyor build should be addressed in master branch

What do you mean ? I can't see a recent fix in master that would unbreak the Appveyor build and the breakage doesn't seem related to my change

Would it make sense to pull these changes into 7.2?

I was wondering about that. Theoretically someone could already use those symbols as they are exported (quite unlikely I believe), hence I decided to avoid any risk. And this isn't a fix per se, just cleanup",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5659,2018-09-06T13:11:44Z,2018-09-07T13:01:32Z,2018-09-07T15:38:35Z,MERGED,True,0,533,2,https://github.com/rouault,Remove FLTGetMapserverExpression() and subroutines that are not used …,1,[],https://github.com/mapserver/mapserver/pull/5659,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/5659#issuecomment-419431924,…in code base. FLTGetCommonExpression() does the same,"@geographika I've done fixes in d50430b to unbreak master on Travis and AppVeyor related to the python wheel. I realized afterwards that your PR #5657 also touches it, likely in better way, so feel free to revert those changes.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5659,2018-09-06T13:11:44Z,2018-09-07T13:01:32Z,2018-09-07T15:38:35Z,MERGED,True,0,533,2,https://github.com/rouault,Remove FLTGetMapserverExpression() and subroutines that are not used …,1,[],https://github.com/mapserver/mapserver/pull/5659,https://github.com/geographika,5,https://github.com/MapServer/MapServer/pull/5659#issuecomment-419479358,…in code base. FLTGetCommonExpression() does the same,@rouault - I was trying to say that in the earlier comment (not very clearly!). I'll merge my pull request in the coming days.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5660,2018-09-07T10:23:14Z,2018-09-07T12:56:15Z,2018-09-07T12:56:15Z,MERGED,True,90,6,7,https://github.com/rouault,SLD / Filter encoding: fix escaping of REGEX special characters (fixes #5658),1,[],https://github.com/mapserver/mapserver/pull/5660,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5660,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5661,2018-09-07T11:08:06Z,2018-09-07T11:33:27Z,2018-09-07T11:33:27Z,MERGED,True,27,23,2,https://github.com/rouault,appveyor.yml: backport master changes related to backslashes,2,[],https://github.com/mapserver/mapserver/pull/5661,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5661,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5664,2018-09-24T09:03:12Z,2018-09-24T09:16:15Z,2018-09-24T09:29:49Z,MERGED,True,3,3,2,https://github.com/fredj,Fix spelling in README.rst and CONTRIBUTING.md,1,[],https://github.com/mapserver/mapserver/pull/5664,https://github.com/fredj,1,https://github.com/MapServer/MapServer/pull/5664,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5670,2018-09-27T21:56:44Z,2018-09-28T14:11:46Z,2018-09-28T14:11:46Z,MERGED,True,454,1463,30,https://github.com/geographika,Add Flake8 checks for Python test code,4,[],https://github.com/mapserver/mapserver/pull/5670,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5670,"This pull request contains the following:

update the Python test suite to have a consistent Python code style
enforce this by adding flake8 to the Python virtual environment and running it as part of the Python Wheel build process
allow caching in Appveyor of Python packages installed via pip to speed up build times","This pull request contains the following:

update the Python test suite to have a consistent Python code style
enforce this by adding flake8 to the Python virtual environment and running it as part of the Python Wheel build process
allow caching in Appveyor of Python packages installed via pip to speed up build times",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5672,2018-10-02T00:28:05Z,2018-10-06T12:34:40Z,2018-10-06T12:34:40Z,CLOSED,False,0,1,1,https://github.com/AlexanderGabriel,Make Travis stop building with php 5.5,1,[],https://github.com/mapserver/mapserver/pull/5672,https://github.com/AlexanderGabriel,1,https://github.com/MapServer/MapServer/pull/5672,Make Travis stop building with PHP-5.5 (not supported any more. see http://php.net/supported-versions.php),Make Travis stop building with PHP-5.5 (not supported any more. see http://php.net/supported-versions.php),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5672,2018-10-02T00:28:05Z,2018-10-06T12:34:40Z,2018-10-06T12:34:40Z,CLOSED,False,0,1,1,https://github.com/AlexanderGabriel,Make Travis stop building with php 5.5,1,[],https://github.com/mapserver/mapserver/pull/5672,https://github.com/AlexanderGabriel,2,https://github.com/MapServer/MapServer/pull/5672#issuecomment-427570253,Make Travis stop building with PHP-5.5 (not supported any more. see http://php.net/supported-versions.php),Is included in #5675 (comment),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5673,2018-10-02T00:28:41Z,2018-10-04T16:38:21Z,2018-10-04T16:38:21Z,CLOSED,False,13,12,1,https://github.com/AlexanderGabriel,Make AppVeyor cache the SDK,4,[],https://github.com/mapserver/mapserver/pull/5673,https://github.com/AlexanderGabriel,1,https://github.com/MapServer/MapServer/pull/5673,Make AppVeyor cache the SDK,Make AppVeyor cache the SDK,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5673,2018-10-02T00:28:41Z,2018-10-04T16:38:21Z,2018-10-04T16:38:21Z,CLOSED,False,13,12,1,https://github.com/AlexanderGabriel,Make AppVeyor cache the SDK,4,[],https://github.com/mapserver/mapserver/pull/5673,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5673#issuecomment-427068220,Make AppVeyor cache the SDK,"@AlexanderGabriel - a few notes on this!
Apparently Appveyor doesn't use the cache by default on pull requests, as the pull request could put malicious files in the cache - see https://www.appveyor.com/docs/build-cache/ (so I guess the cache would only be used when tagging new releases?).
I enabled the option in the project settings to see what kind of speed-up we'd get, and it actually made things slower!
See: https://ci.appveyor.com/project/MapServer/mapserver/build/1.0.874 (no cache)
Compared to: https://ci.appveyor.com/project/MapServer/mapserver/build/1.0.875 (with cache)
Appveyor zips up the folder to be cached, then downloads and unzips it for the new build. This appears to be slower than simply downloading and unzipping directly from GISInternals - adding almost a minute to the build times. I guess the benefit would be to stop hitting the GISInternals servers.
So probably leave this pull request for now? Although building SWIG and PHP libs once and caching the built output I believe be beneficial (although it seems even quicker to simply download a zip from elsewhere).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5673,2018-10-02T00:28:41Z,2018-10-04T16:38:21Z,2018-10-04T16:38:21Z,CLOSED,False,13,12,1,https://github.com/AlexanderGabriel,Make AppVeyor cache the SDK,4,[],https://github.com/mapserver/mapserver/pull/5673,https://github.com/AlexanderGabriel,3,https://github.com/MapServer/MapServer/pull/5673#issuecomment-427087092,Make AppVeyor cache the SDK,"@geographika
Yes. If it doesn't help, we leave it.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5674,2018-10-04T22:29:32Z,2018-10-12T07:04:14Z,2018-10-12T07:04:19Z,MERGED,True,46,36,4,https://github.com/geographika,Use generator expressions in MapScript CMakeLists,9,[],https://github.com/mapserver/mapserver/pull/5674,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5674,"See #5646
Also standardise commands in lower-case","See #5646
Also standardise commands in lower-case",True,{'THUMBS_UP': ['https://github.com/ravhed']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5674,2018-10-04T22:29:32Z,2018-10-12T07:04:14Z,2018-10-12T07:04:19Z,MERGED,True,46,36,4,https://github.com/geographika,Use generator expressions in MapScript CMakeLists,9,[],https://github.com/mapserver/mapserver/pull/5674,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5674#issuecomment-427270375,"See #5646
Also standardise commands in lower-case","Apologies, I updated the CMakeLists files in the online GitHub editor while testing locally, and so a new branch was created in mapserver/mapserver. I'll delete this following a merge.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5675,2018-10-05T23:46:38Z,2018-10-11T20:38:31Z,2019-04-20T00:08:34Z,MERGED,True,272,10,13,https://github.com/AlexanderGabriel,Phpng mapscript master,9,[],https://github.com/mapserver/mapserver/pull/5675,https://github.com/AlexanderGabriel,1,https://github.com/MapServer/MapServer/pull/5675,"So now another Pull-Request for adding PHP-MapscriptNG-Support to the master-branch.
This PR does not build PHP-MapscriptNG in AppVeyor for this reason:

CMake 3.12.4 which is used in AppVeyor right now is buggy and prevents building PHP-Extensions on Windows with SWIG
When Appveyor updates CMake the next time, it will be possible to build this extension there.
Users which want to build it can do it. CMakeLists.txt checks for right Version of CMake.

And because there where a log of PRs from me with a lot of information. Here a small summary:

It is not possible to build MapscriptNG Thread-Safe (for example use it an apache with PHP as Module) ON WINDOWS because of a bug in SWIG < 4.0. Users which are interessted can build SWIG themselves and get this running. CMakeLists.txt checks for SWIG 4.0.0 if Thread-Safety is enables when building mapserver. With SWIG > 3.0.11 it will be possible to build this extension on Windows for non-thread-safe PHP
When building this extension on Windows. Users will need to build php on their own because the windows-downloads do not contain the required developement headers and downloaded sources are not configured. Same with chocolatey-package. But this process is not that difficulty and frustrating as a few years ago. In README.WIN32 under mapscript/phpng is how to build PHP and SWIG and Mapserver for interested users but PHP-MapscriptNG on Windows should not be advertised as supported right now.
Maybe experimental?

Alex","So now another Pull-Request for adding PHP-MapscriptNG-Support to the master-branch.
This PR does not build PHP-MapscriptNG in AppVeyor for this reason:

CMake 3.12.4 which is used in AppVeyor right now is buggy and prevents building PHP-Extensions on Windows with SWIG
When Appveyor updates CMake the next time, it will be possible to build this extension there.
Users which want to build it can do it. CMakeLists.txt checks for right Version of CMake.

And because there where a log of PRs from me with a lot of information. Here a small summary:

It is not possible to build MapscriptNG Thread-Safe (for example use it an apache with PHP as Module) ON WINDOWS because of a bug in SWIG < 4.0. Users which are interessted can build SWIG themselves and get this running. CMakeLists.txt checks for SWIG 4.0.0 if Thread-Safety is enables when building mapserver. With SWIG > 3.0.11 it will be possible to build this extension on Windows for non-thread-safe PHP
When building this extension on Windows. Users will need to build php on their own because the windows-downloads do not contain the required developement headers and downloaded sources are not configured. Same with chocolatey-package. But this process is not that difficulty and frustrating as a few years ago. In README.WIN32 under mapscript/phpng is how to build PHP and SWIG and Mapserver for interested users but PHP-MapscriptNG on Windows should not be advertised as supported right now.
Maybe experimental?

Alex",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5675,2018-10-05T23:46:38Z,2018-10-11T20:38:31Z,2019-04-20T00:08:34Z,MERGED,True,272,10,13,https://github.com/AlexanderGabriel,Phpng mapscript master,9,[],https://github.com/mapserver/mapserver/pull/5675,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5675#issuecomment-427554698,"So now another Pull-Request for adding PHP-MapscriptNG-Support to the master-branch.
This PR does not build PHP-MapscriptNG in AppVeyor for this reason:

CMake 3.12.4 which is used in AppVeyor right now is buggy and prevents building PHP-Extensions on Windows with SWIG
When Appveyor updates CMake the next time, it will be possible to build this extension there.
Users which want to build it can do it. CMakeLists.txt checks for right Version of CMake.

And because there where a log of PRs from me with a lot of information. Here a small summary:

It is not possible to build MapscriptNG Thread-Safe (for example use it an apache with PHP as Module) ON WINDOWS because of a bug in SWIG < 4.0. Users which are interessted can build SWIG themselves and get this running. CMakeLists.txt checks for SWIG 4.0.0 if Thread-Safety is enables when building mapserver. With SWIG > 3.0.11 it will be possible to build this extension on Windows for non-thread-safe PHP
When building this extension on Windows. Users will need to build php on their own because the windows-downloads do not contain the required developement headers and downloaded sources are not configured. Same with chocolatey-package. But this process is not that difficulty and frustrating as a few years ago. In README.WIN32 under mapscript/phpng is how to build PHP and SWIG and Mapserver for interested users but PHP-MapscriptNG on Windows should not be advertised as supported right now.
Maybe experimental?

Alex","Looks good to me. When the new versions of SWIG and CMake are released we can add to Appveyor.
I guess #5672 can be closed as included above?
Maybe post to the mapserver-dev list for any final thoughts/feedback and if there are no suggested changes I'll merge in a few days?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5675,2018-10-05T23:46:38Z,2018-10-11T20:38:31Z,2019-04-20T00:08:34Z,MERGED,True,272,10,13,https://github.com/AlexanderGabriel,Phpng mapscript master,9,[],https://github.com/mapserver/mapserver/pull/5675,https://github.com/AlexanderGabriel,3,https://github.com/MapServer/MapServer/pull/5675#issuecomment-428239763,"So now another Pull-Request for adding PHP-MapscriptNG-Support to the master-branch.
This PR does not build PHP-MapscriptNG in AppVeyor for this reason:

CMake 3.12.4 which is used in AppVeyor right now is buggy and prevents building PHP-Extensions on Windows with SWIG
When Appveyor updates CMake the next time, it will be possible to build this extension there.
Users which want to build it can do it. CMakeLists.txt checks for right Version of CMake.

And because there where a log of PRs from me with a lot of information. Here a small summary:

It is not possible to build MapscriptNG Thread-Safe (for example use it an apache with PHP as Module) ON WINDOWS because of a bug in SWIG < 4.0. Users which are interessted can build SWIG themselves and get this running. CMakeLists.txt checks for SWIG 4.0.0 if Thread-Safety is enables when building mapserver. With SWIG > 3.0.11 it will be possible to build this extension on Windows for non-thread-safe PHP
When building this extension on Windows. Users will need to build php on their own because the windows-downloads do not contain the required developement headers and downloaded sources are not configured. Same with chocolatey-package. But this process is not that difficulty and frustrating as a few years ago. In README.WIN32 under mapscript/phpng is how to build PHP and SWIG and Mapserver for interested users but PHP-MapscriptNG on Windows should not be advertised as supported right now.
Maybe experimental?

Alex","Just for informatoin:
I found another thing, that can be improved in the future:
SWIG renames webObj->empty to webObj->c_empty which is wrong. empty is listed as keyword (http://php.net/manual/en/reserved.keywords.php) but not as ""empty"" but as ""empty()"".
This allows ""empty"" to be a variable or property of an object but no a function or method.
And if that was wrong, accessing ""empty"" property of webObj the last 15 years via PHP-Mapscript wouldnt have worked, too (https://mapserver.org/mapscript/php/phpmapscript.html#webobj).
I already tested to patch SWIG locally and it works. I'll try to make a PR to SWIG to get this into SWIG 4.0.0 so it's only a short time, linux-users need to use $webObj->c_empty.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5675,2018-10-05T23:46:38Z,2018-10-11T20:38:31Z,2019-04-20T00:08:34Z,MERGED,True,272,10,13,https://github.com/AlexanderGabriel,Phpng mapscript master,9,[],https://github.com/mapserver/mapserver/pull/5675,https://github.com/geographika,4,https://github.com/MapServer/MapServer/pull/5675#issuecomment-480494572,"So now another Pull-Request for adding PHP-MapscriptNG-Support to the master-branch.
This PR does not build PHP-MapscriptNG in AppVeyor for this reason:

CMake 3.12.4 which is used in AppVeyor right now is buggy and prevents building PHP-Extensions on Windows with SWIG
When Appveyor updates CMake the next time, it will be possible to build this extension there.
Users which want to build it can do it. CMakeLists.txt checks for right Version of CMake.

And because there where a log of PRs from me with a lot of information. Here a small summary:

It is not possible to build MapscriptNG Thread-Safe (for example use it an apache with PHP as Module) ON WINDOWS because of a bug in SWIG < 4.0. Users which are interessted can build SWIG themselves and get this running. CMakeLists.txt checks for SWIG 4.0.0 if Thread-Safety is enables when building mapserver. With SWIG > 3.0.11 it will be possible to build this extension on Windows for non-thread-safe PHP
When building this extension on Windows. Users will need to build php on their own because the windows-downloads do not contain the required developement headers and downloaded sources are not configured. Same with chocolatey-package. But this process is not that difficulty and frustrating as a few years ago. In README.WIN32 under mapscript/phpng is how to build PHP and SWIG and Mapserver for interested users but PHP-MapscriptNG on Windows should not be advertised as supported right now.
Maybe experimental?

Alex","@AlexanderGabriel - I know we can't get the Appveyor builds for the new MapScript bindings, but is it possible to build on Travis? I've updated the SWIG version as a first step, but get failures when trying to build e.g. https://travis-ci.org/geographika/mapserver/builds/515453216",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5675,2018-10-05T23:46:38Z,2018-10-11T20:38:31Z,2019-04-20T00:08:34Z,MERGED,True,272,10,13,https://github.com/AlexanderGabriel,Phpng mapscript master,9,[],https://github.com/mapserver/mapserver/pull/5675,https://github.com/AlexanderGabriel,5,https://github.com/MapServer/MapServer/pull/5675#issuecomment-480625672,"So now another Pull-Request for adding PHP-MapscriptNG-Support to the master-branch.
This PR does not build PHP-MapscriptNG in AppVeyor for this reason:

CMake 3.12.4 which is used in AppVeyor right now is buggy and prevents building PHP-Extensions on Windows with SWIG
When Appveyor updates CMake the next time, it will be possible to build this extension there.
Users which want to build it can do it. CMakeLists.txt checks for right Version of CMake.

And because there where a log of PRs from me with a lot of information. Here a small summary:

It is not possible to build MapscriptNG Thread-Safe (for example use it an apache with PHP as Module) ON WINDOWS because of a bug in SWIG < 4.0. Users which are interessted can build SWIG themselves and get this running. CMakeLists.txt checks for SWIG 4.0.0 if Thread-Safety is enables when building mapserver. With SWIG > 3.0.11 it will be possible to build this extension on Windows for non-thread-safe PHP
When building this extension on Windows. Users will need to build php on their own because the windows-downloads do not contain the required developement headers and downloaded sources are not configured. Same with chocolatey-package. But this process is not that difficulty and frustrating as a few years ago. In README.WIN32 under mapscript/phpng is how to build PHP and SWIG and Mapserver for interested users but PHP-MapscriptNG on Windows should not be advertised as supported right now.
Maybe experimental?

Alex",i'll have a look.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5675,2018-10-05T23:46:38Z,2018-10-11T20:38:31Z,2019-04-20T00:08:34Z,MERGED,True,272,10,13,https://github.com/AlexanderGabriel,Phpng mapscript master,9,[],https://github.com/mapserver/mapserver/pull/5675,https://github.com/AlexanderGabriel,6,https://github.com/MapServer/MapServer/pull/5675#issuecomment-485041771,"So now another Pull-Request for adding PHP-MapscriptNG-Support to the master-branch.
This PR does not build PHP-MapscriptNG in AppVeyor for this reason:

CMake 3.12.4 which is used in AppVeyor right now is buggy and prevents building PHP-Extensions on Windows with SWIG
When Appveyor updates CMake the next time, it will be possible to build this extension there.
Users which want to build it can do it. CMakeLists.txt checks for right Version of CMake.

And because there where a log of PRs from me with a lot of information. Here a small summary:

It is not possible to build MapscriptNG Thread-Safe (for example use it an apache with PHP as Module) ON WINDOWS because of a bug in SWIG < 4.0. Users which are interessted can build SWIG themselves and get this running. CMakeLists.txt checks for SWIG 4.0.0 if Thread-Safety is enables when building mapserver. With SWIG > 3.0.11 it will be possible to build this extension on Windows for non-thread-safe PHP
When building this extension on Windows. Users will need to build php on their own because the windows-downloads do not contain the required developement headers and downloaded sources are not configured. Same with chocolatey-package. But this process is not that difficulty and frustrating as a few years ago. In README.WIN32 under mapscript/phpng is how to build PHP and SWIG and Mapserver for interested users but PHP-MapscriptNG on Windows should not be advertised as supported right now.
Maybe experimental?

Alex","i'm sorry but i can't get it running. locally, everything is fine but it does not work with travis.
btw: there is a swig 4.0.0-beta1 downloadable and i'm sorry but i really have no time currently.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5676,2018-10-11T13:13:21Z,2018-10-12T21:14:51Z,2018-10-13T07:34:35Z,MERGED,True,7,3,1,https://github.com/ravhed,Silently ignore WMS filter if the provided value is empty,2,[],https://github.com/mapserver/mapserver/pull/5676,https://github.com/ravhed,1,https://github.com/MapServer/MapServer/pull/5676,"New pull request targeting branch-7-2 instead of master.
If the WMS filter parameter is empty (e.g. FILTER=) you will get a 500 error. This pull request changes this behavior so that it will instead ignore empty filters.
See discussion in #5597 for more details.","New pull request targeting branch-7-2 instead of master.
If the WMS filter parameter is empty (e.g. FILTER=) you will get a 500 error. This pull request changes this behavior so that it will instead ignore empty filters.
See discussion in #5597 for more details.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5676,2018-10-11T13:13:21Z,2018-10-12T21:14:51Z,2018-10-13T07:34:35Z,MERGED,True,7,3,1,https://github.com/ravhed,Silently ignore WMS filter if the provided value is empty,2,[],https://github.com/mapserver/mapserver/pull/5676,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5676#issuecomment-429108962,"New pull request targeting branch-7-2 instead of master.
If the WMS filter parameter is empty (e.g. FILTER=) you will get a 500 error. This pull request changes this behavior so that it will instead ignore empty filters.
See discussion in #5597 for more details.",Looks good to me. Anyone any objections with merging?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5676,2018-10-11T13:13:21Z,2018-10-12T21:14:51Z,2018-10-13T07:34:35Z,MERGED,True,7,3,1,https://github.com/ravhed,Silently ignore WMS filter if the provided value is empty,2,[],https://github.com/mapserver/mapserver/pull/5676,https://github.com/dmorissette,3,https://github.com/MapServer/MapServer/pull/5676#issuecomment-429116811,"New pull request targeting branch-7-2 instead of master.
If the WMS filter parameter is empty (e.g. FILTER=) you will get a 500 error. This pull request changes this behavior so that it will instead ignore empty filters.
See discussion in #5597 for more details.","I didn't test the patch, but it looks okay to me.  +1 to merge.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5676,2018-10-11T13:13:21Z,2018-10-12T21:14:51Z,2018-10-13T07:34:35Z,MERGED,True,7,3,1,https://github.com/ravhed,Silently ignore WMS filter if the provided value is empty,2,[],https://github.com/mapserver/mapserver/pull/5676,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/5676#issuecomment-429126670,"New pull request targeting branch-7-2 instead of master.
If the WMS filter parameter is empty (e.g. FILTER=) you will get a 500 error. This pull request changes this behavior so that it will instead ignore empty filters.
See discussion in #5597 for more details.","+1

From: Seth G [mailto:notifications@github.com]
Sent: Thursday, October 11, 2018 3:35 PM
To: mapserver/mapserver <mapserver@noreply.github.com>
Cc: Subscribed <subscribed@noreply.github.com>
Subject: Re: [mapserver/mapserver] Silently ignore WMS filter if the provided value is empty (#5676)


Looks good to me. Anyone any objections with merging?

—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub<#5676 (comment)>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ABhm-9KV2_NZBoZ-0Jb9fZAibrG68VCdks5uj6t4gaJpZM4XXg8M>.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5676,2018-10-11T13:13:21Z,2018-10-12T21:14:51Z,2018-10-13T07:34:35Z,MERGED,True,7,3,1,https://github.com/ravhed,Silently ignore WMS filter if the provided value is empty,2,[],https://github.com/mapserver/mapserver/pull/5676,https://github.com/geographika,5,https://github.com/MapServer/MapServer/pull/5676#issuecomment-429464378,"New pull request targeting branch-7-2 instead of master.
If the WMS filter parameter is empty (e.g. FILTER=) you will get a 500 error. This pull request changes this behavior so that it will instead ignore empty filters.
See discussion in #5597 for more details.",@ravhed - thanks!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5677,2018-10-11T20:57:32Z,2018-10-13T21:39:10Z,2018-10-13T21:39:10Z,MERGED,True,875,323,19,https://github.com/geographika,Update Python MapScript test suite for Python3,23,[],https://github.com/mapserver/mapserver/pull/5677,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5677,"This pull request has changes to several files. The overall purpose is to get the entire MapScript Python test suite passing again, for both Python 2 and 3. There are now 293 tests, covering most of the MapScript API - up from 195 tests prior to this pull request.
Changes can be summarised as follows:

Appveyor CI has been updated to build Python wheels and run the tests for both Python 2 and 3
Fixing deprecation warnings for regex expressions in Python3
Removing broken GD related imageObj creation code in Python MapScript and reverting to the generic functions to allow image creation
Add a py2/3 fix for writing images, as several tests were failing due to writing unicode strings rather than bytes to files
Moved the new dict hashTableObj to the pyextend.i file (where it should belong)
Reintroduced previously failing test cases, and linted all Python test code (including MapScript thread and reference tests)
Fixed various failing tests where old MapScript APIs were used (particularly with querying features)
Fixed some whitespace issues in SWIG interface files causing warnings","This pull request has changes to several files. The overall purpose is to get the entire MapScript Python test suite passing again, for both Python 2 and 3. There are now 293 tests, covering most of the MapScript API - up from 195 tests prior to this pull request.
Changes can be summarised as follows:

Appveyor CI has been updated to build Python wheels and run the tests for both Python 2 and 3
Fixing deprecation warnings for regex expressions in Python3
Removing broken GD related imageObj creation code in Python MapScript and reverting to the generic functions to allow image creation
Add a py2/3 fix for writing images, as several tests were failing due to writing unicode strings rather than bytes to files
Moved the new dict hashTableObj to the pyextend.i file (where it should belong)
Reintroduced previously failing test cases, and linted all Python test code (including MapScript thread and reference tests)
Fixed various failing tests where old MapScript APIs were used (particularly with querying features)
Fixed some whitespace issues in SWIG interface files causing warnings",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5679,2018-10-12T15:46:45Z,2018-10-12T21:17:18Z,2018-10-12T21:25:03Z,MERGED,True,1,1,1,https://github.com/AlexanderGabriel,Change URL to OpenLayers to be protocol relative,1,[],https://github.com/mapserver/mapserver/pull/5679,https://github.com/AlexanderGabriel,1,https://github.com/MapServer/MapServer/pull/5679,"There is a built-in OpenLayers viewer in Mapserver which uses http://www.mapserver.org/lib/OpenLayers-ms60.js as URL to OpenLayer.
I was able to use this over https only if i tell my browser to allow mixed-content.
This patch changes the url to be a protocol relative URL. This causes Firefox to use https even if i call the viewer via http.
I tested and it works a little bit better now, because there are still http://-urls to the images in OpenLayers-ms60.js:

 (in german, sorry)
If you merge this and anyone changes OpenLayers-ms60.js on your homepage to do the same, users can use the built-in OpenLayers viewer over https out-of-the box.
Thank you.
Alex","There is a built-in OpenLayers viewer in Mapserver which uses http://www.mapserver.org/lib/OpenLayers-ms60.js as URL to OpenLayer.
I was able to use this over https only if i tell my browser to allow mixed-content.
This patch changes the url to be a protocol relative URL. This causes Firefox to use https even if i call the viewer via http.
I tested and it works a little bit better now, because there are still http://-urls to the images in OpenLayers-ms60.js:

 (in german, sorry)
If you merge this and anyone changes OpenLayers-ms60.js on your homepage to do the same, users can use the built-in OpenLayers viewer over https out-of-the box.
Thank you.
Alex",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5679,2018-10-12T15:46:45Z,2018-10-12T21:17:18Z,2018-10-12T21:25:03Z,MERGED,True,1,1,1,https://github.com/AlexanderGabriel,Change URL to OpenLayers to be protocol relative,1,[],https://github.com/mapserver/mapserver/pull/5679,https://github.com/AlexanderGabriel,2,https://github.com/MapServer/MapServer/pull/5679#issuecomment-429376872,"There is a built-in OpenLayers viewer in Mapserver which uses http://www.mapserver.org/lib/OpenLayers-ms60.js as URL to OpenLayer.
I was able to use this over https only if i tell my browser to allow mixed-content.
This patch changes the url to be a protocol relative URL. This causes Firefox to use https even if i call the viewer via http.
I tested and it works a little bit better now, because there are still http://-urls to the images in OpenLayers-ms60.js:

 (in german, sorry)
If you merge this and anyone changes OpenLayers-ms60.js on your homepage to do the same, users can use the built-in OpenLayers viewer over https out-of-the box.
Thank you.
Alex","Forget my comment about to correct OpenLayer.js. This is already relative. So merging this will solve this problem. Nothing more to do.
Alex",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5679,2018-10-12T15:46:45Z,2018-10-12T21:17:18Z,2018-10-12T21:25:03Z,MERGED,True,1,1,1,https://github.com/AlexanderGabriel,Change URL to OpenLayers to be protocol relative,1,[],https://github.com/mapserver/mapserver/pull/5679,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5679#issuecomment-429464909,"There is a built-in OpenLayers viewer in Mapserver which uses http://www.mapserver.org/lib/OpenLayers-ms60.js as URL to OpenLayer.
I was able to use this over https only if i tell my browser to allow mixed-content.
This patch changes the url to be a protocol relative URL. This causes Firefox to use https even if i call the viewer via http.
I tested and it works a little bit better now, because there are still http://-urls to the images in OpenLayers-ms60.js:

 (in german, sorry)
If you merge this and anyone changes OpenLayers-ms60.js on your homepage to do the same, users can use the built-in OpenLayers viewer over https out-of-the box.
Thank you.
Alex","@AlexanderGabriel - thanks.
Just to summarise this patch allows the inbuilt OpenLayers viewer to be requested over either http or https, depending on the parent page.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5679,2018-10-12T15:46:45Z,2018-10-12T21:17:18Z,2018-10-12T21:25:03Z,MERGED,True,1,1,1,https://github.com/AlexanderGabriel,Change URL to OpenLayers to be protocol relative,1,[],https://github.com/mapserver/mapserver/pull/5679,https://github.com/AlexanderGabriel,4,https://github.com/MapServer/MapServer/pull/5679#issuecomment-429466875,"There is a built-in OpenLayers viewer in Mapserver which uses http://www.mapserver.org/lib/OpenLayers-ms60.js as URL to OpenLayer.
I was able to use this over https only if i tell my browser to allow mixed-content.
This patch changes the url to be a protocol relative URL. This causes Firefox to use https even if i call the viewer via http.
I tested and it works a little bit better now, because there are still http://-urls to the images in OpenLayers-ms60.js:

 (in german, sorry)
If you merge this and anyone changes OpenLayers-ms60.js on your homepage to do the same, users can use the built-in OpenLayers viewer over https out-of-the box.
Thank you.
Alex","@AlexanderGabriel - thanks.
Just to summarise this patch allows the inbuilt OpenLayers viewer to be requested over either http or https, depending on the parent page.

Correct",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5682,2018-10-18T22:33:34Z,2018-10-22T20:55:57Z,2019-01-25T10:23:50Z,CLOSED,False,3411,1056,40,https://github.com/AlexanderGabriel,PHP Mapscript native for PHP7,8,[],https://github.com/mapserver/mapserver/pull/5682,https://github.com/AlexanderGabriel,1,https://github.com/MapServer/MapServer/pull/5682,"Merging this will bring back support for ""native"" PHP/Mapscript on both, Windows and Linux for thread-safe and non-thread-safe environments.
My patches base on the work of @bjoernboldt who enabled support for non-thread-safe environments.
Because there are no module global variables there is no need to mention about thread-safety. I removed code that checks for ZTS-switch.
There is still code that should be unneeded (TSRMLS_*) but removing this will break building for PHP5 so we need to keep this for backwards-compatibility.
The WITH_THREAD_SAFETY-switch is still needed to make PHP-headers work correct while compile-time.
In addition, i merged FindPHP5.cmake and FindPHP7.cmake into FindPHP.cmake to reduce some redundant code.","Merging this will bring back support for ""native"" PHP/Mapscript on both, Windows and Linux for thread-safe and non-thread-safe environments.
My patches base on the work of @bjoernboldt who enabled support for non-thread-safe environments.
Because there are no module global variables there is no need to mention about thread-safety. I removed code that checks for ZTS-switch.
There is still code that should be unneeded (TSRMLS_*) but removing this will break building for PHP5 so we need to keep this for backwards-compatibility.
The WITH_THREAD_SAFETY-switch is still needed to make PHP-headers work correct while compile-time.
In addition, i merged FindPHP5.cmake and FindPHP7.cmake into FindPHP.cmake to reduce some redundant code.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5682,2018-10-18T22:33:34Z,2018-10-22T20:55:57Z,2019-01-25T10:23:50Z,CLOSED,False,3411,1056,40,https://github.com/AlexanderGabriel,PHP Mapscript native for PHP7,8,[],https://github.com/mapserver/mapserver/pull/5682,https://github.com/ejn,2,https://github.com/MapServer/MapServer/pull/5682#issuecomment-431292544,"Merging this will bring back support for ""native"" PHP/Mapscript on both, Windows and Linux for thread-safe and non-thread-safe environments.
My patches base on the work of @bjoernboldt who enabled support for non-thread-safe environments.
Because there are no module global variables there is no need to mention about thread-safety. I removed code that checks for ZTS-switch.
There is still code that should be unneeded (TSRMLS_*) but removing this will break building for PHP5 so we need to keep this for backwards-compatibility.
The WITH_THREAD_SAFETY-switch is still needed to make PHP-headers work correct while compile-time.
In addition, i merged FindPHP5.cmake and FindPHP7.cmake into FindPHP.cmake to reduce some redundant code.","Do f54ce3a and a5049b7 belong in this PR? Neither of them appear to have anything to do with PHP7 but rather appear to correct some problems in msQueryByFilter() and so should maybe form a separate PR?
Maybe @bjoernboldt can comment?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5682,2018-10-18T22:33:34Z,2018-10-22T20:55:57Z,2019-01-25T10:23:50Z,CLOSED,False,3411,1056,40,https://github.com/AlexanderGabriel,PHP Mapscript native for PHP7,8,[],https://github.com/mapserver/mapserver/pull/5682,https://github.com/AlexanderGabriel,3,https://github.com/MapServer/MapServer/pull/5682#issuecomment-431358226,"Merging this will bring back support for ""native"" PHP/Mapscript on both, Windows and Linux for thread-safe and non-thread-safe environments.
My patches base on the work of @bjoernboldt who enabled support for non-thread-safe environments.
Because there are no module global variables there is no need to mention about thread-safety. I removed code that checks for ZTS-switch.
There is still code that should be unneeded (TSRMLS_*) but removing this will break building for PHP5 so we need to keep this for backwards-compatibility.
The WITH_THREAD_SAFETY-switch is still needed to make PHP-headers work correct while compile-time.
In addition, i merged FindPHP5.cmake and FindPHP7.cmake into FindPHP.cmake to reduce some redundant code.","seems they are not really realted to php mapscript. only 9dbfe1b is related. sorry. i updatet his branch and then started to work. i will open a new PR so you can decide, which will be merged.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5682,2018-10-18T22:33:34Z,2018-10-22T20:55:57Z,2019-01-25T10:23:50Z,CLOSED,False,3411,1056,40,https://github.com/AlexanderGabriel,PHP Mapscript native for PHP7,8,[],https://github.com/mapserver/mapserver/pull/5682,https://github.com/AlexanderGabriel,4,https://github.com/MapServer/MapServer/pull/5682#issuecomment-431982318,"Merging this will bring back support for ""native"" PHP/Mapscript on both, Windows and Linux for thread-safe and non-thread-safe environments.
My patches base on the work of @bjoernboldt who enabled support for non-thread-safe environments.
Because there are no module global variables there is no need to mention about thread-safety. I removed code that checks for ZTS-switch.
There is still code that should be unneeded (TSRMLS_*) but removing this will break building for PHP5 so we need to keep this for backwards-compatibility.
The WITH_THREAD_SAFETY-switch is still needed to make PHP-headers work correct while compile-time.
In addition, i merged FindPHP5.cmake and FindPHP7.cmake into FindPHP.cmake to reduce some redundant code.",New PR here: #5687,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5682,2018-10-18T22:33:34Z,2018-10-22T20:55:57Z,2019-01-25T10:23:50Z,CLOSED,False,3411,1056,40,https://github.com/AlexanderGabriel,PHP Mapscript native for PHP7,8,[],https://github.com/mapserver/mapserver/pull/5682,https://github.com/chseip,5,https://github.com/MapServer/MapServer/pull/5682#issuecomment-457526843,"Merging this will bring back support for ""native"" PHP/Mapscript on both, Windows and Linux for thread-safe and non-thread-safe environments.
My patches base on the work of @bjoernboldt who enabled support for non-thread-safe environments.
Because there are no module global variables there is no need to mention about thread-safety. I removed code that checks for ZTS-switch.
There is still code that should be unneeded (TSRMLS_*) but removing this will break building for PHP5 so we need to keep this for backwards-compatibility.
The WITH_THREAD_SAFETY-switch is still needed to make PHP-headers work correct while compile-time.
In addition, i merged FindPHP5.cmake and FindPHP7.cmake into FindPHP.cmake to reduce some redundant code.","May I direct your attention here: https://gis.stackexchange.com/questions/308999/how-to-compile-install-php-mapscript-with-php7
I'm lost :-(",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5684,2018-10-19T15:03:27Z,2018-10-19T15:37:23Z,2018-10-19T17:03:12Z,MERGED,True,105,105,52,https://github.com/tomkralidis,fix MetadataURL type for Capabilities responses (#5680),1,[],https://github.com/mapserver/mapserver/pull/5684,https://github.com/tomkralidis,1,https://github.com/MapServer/MapServer/pull/5684,Fixes #5680,Fixes #5680,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5684,2018-10-19T15:03:27Z,2018-10-19T15:37:23Z,2018-10-19T17:03:12Z,MERGED,True,105,105,52,https://github.com/tomkralidis,fix MetadataURL type for Capabilities responses (#5680),1,[],https://github.com/mapserver/mapserver/pull/5684,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5684#issuecomment-431405235,Fixes #5680,thanks for tackling so fast @tomkralidis !!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5684,2018-10-19T15:03:27Z,2018-10-19T15:37:23Z,2018-10-19T17:03:12Z,MERGED,True,105,105,52,https://github.com/tomkralidis,fix MetadataURL type for Capabilities responses (#5680),1,[],https://github.com/mapserver/mapserver/pull/5684,https://github.com/tomkralidis,3,https://github.com/MapServer/MapServer/pull/5684#issuecomment-431428277,Fixes #5680,Will this get auto-ported to master or should I submit there too?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5684,2018-10-19T15:03:27Z,2018-10-19T15:37:23Z,2018-10-19T17:03:12Z,MERGED,True,105,105,52,https://github.com/tomkralidis,fix MetadataURL type for Capabilities responses (#5680),1,[],https://github.com/mapserver/mapserver/pull/5684,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/5684#issuecomment-431430953,Fixes #5680,Personally I think it is fine to just submit to branch-7-2,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5685,2018-10-20T11:23:58Z,2018-10-22T13:02:04Z,2018-10-22T15:01:35Z,MERGED,True,0,34,3,https://github.com/tomkralidis,emit only required formats for WMS links in ISO metadata (#5667),1,[],https://github.com/mapserver/mapserver/pull/5685,https://github.com/tomkralidis,1,https://github.com/MapServer/MapServer/pull/5685,Fixes #5667,Fixes #5667,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5685,2018-10-20T11:23:58Z,2018-10-22T13:02:04Z,2018-10-22T15:01:35Z,MERGED,True,0,34,3,https://github.com/tomkralidis,emit only required formats for WMS links in ISO metadata (#5667),1,[],https://github.com/mapserver/mapserver/pull/5685,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5685#issuecomment-431829002,Fixes #5667,thanks @tomkralidis,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5686,2018-10-22T17:02:48Z,2018-10-22T17:08:22Z,2018-10-30T13:30:15Z,MERGED,True,2,3,1,https://github.com/tomkralidis,fix ISO metadata link validity (#5668),1,[],https://github.com/mapserver/mapserver/pull/5686,https://github.com/tomkralidis,1,https://github.com/MapServer/MapServer/pull/5686,Fixes #5668,Fixes #5668,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5686,2018-10-22T17:02:48Z,2018-10-22T17:08:22Z,2018-10-30T13:30:15Z,MERGED,True,2,3,1,https://github.com/tomkralidis,fix ISO metadata link validity (#5668),1,[],https://github.com/mapserver/mapserver/pull/5686,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5686#issuecomment-431900549,Fixes #5668,thanks @tomkralidis !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5686,2018-10-22T17:02:48Z,2018-10-22T17:08:22Z,2018-10-30T13:30:15Z,MERGED,True,2,3,1,https://github.com/tomkralidis,fix ISO metadata link validity (#5668),1,[],https://github.com/mapserver/mapserver/pull/5686,https://github.com/hege-li,3,https://github.com/MapServer/MapServer/pull/5686#issuecomment-434282066,Fixes #5668,"@tomkralidis  @jmckenna
Umm isn't that patch missing if block brackets { }  ?  if (value) { .... }",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5686,2018-10-22T17:02:48Z,2018-10-22T17:08:22Z,2018-10-30T13:30:15Z,MERGED,True,2,3,1,https://github.com/tomkralidis,fix ISO metadata link validity (#5668),1,[],https://github.com/mapserver/mapserver/pull/5686,https://github.com/tomkralidis,4,https://github.com/MapServer/MapServer/pull/5686#issuecomment-434301024,Fixes #5668,"Nice catch, fixed in #5692",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5687,2018-10-22T20:55:36Z,2018-11-09T12:08:07Z,2018-11-09T12:08:07Z,MERGED,True,3406,1051,39,https://github.com/AlexanderGabriel,PHP/Mapscript native for PHP7,5,[],https://github.com/mapserver/mapserver/pull/5687,https://github.com/AlexanderGabriel,1,https://github.com/MapServer/MapServer/pull/5687,"This PR only contains Commits related to PHP/Mapscript.
Now it will be possible to build on Windows and Linux in Thread-Safe and Non-Thread-Safe Environment.
I also merged FindPHP7.cmake and FindPHP5.cmake into one file for both.","This PR only contains Commits related to PHP/Mapscript.
Now it will be possible to build on Windows and Linux in Thread-Safe and Non-Thread-Safe Environment.
I also merged FindPHP7.cmake and FindPHP5.cmake into one file for both.",True,{'THUMBS_UP': ['https://github.com/nboisteault']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5687,2018-10-22T20:55:36Z,2018-11-09T12:08:07Z,2018-11-09T12:08:07Z,MERGED,True,3406,1051,39,https://github.com/AlexanderGabriel,PHP/Mapscript native for PHP7,5,[],https://github.com/mapserver/mapserver/pull/5687,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5687#issuecomment-437169052,"This PR only contains Commits related to PHP/Mapscript.
Now it will be possible to build on Windows and Linux in Thread-Safe and Non-Thread-Safe Environment.
I also merged FindPHP7.cmake and FindPHP5.cmake into one file for both.","@AlexanderGabriel - looks good to me, and there has been no objections to these changes which have been up here for awhile. If no objections from anyone I think this can be merged tomorrow.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5688,2018-10-24T12:31:28Z,2018-10-24T13:00:01Z,2018-10-24T13:00:11Z,MERGED,True,9,5,3,https://github.com/tomkralidis,fix protocol depending on service type in ISO metadata (#5669),2,[],https://github.com/mapserver/mapserver/pull/5688,https://github.com/tomkralidis,1,https://github.com/MapServer/MapServer/pull/5688,Fixes #5669,Fixes #5669,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5690,2018-10-27T17:23:44Z,2018-10-27T17:33:16Z,2018-10-27T17:33:20Z,MERGED,True,20,8,1,https://github.com/szekerest,Fix MSSQL driver when parsing geometries with ZM values (#5689),1,[],https://github.com/mapserver/mapserver/pull/5690,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5690,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5691,2018-10-29T15:30:52Z,2018-11-08T21:48:29Z,2018-11-08T21:48:32Z,MERGED,True,2,99,1,https://github.com/SunveerSingh,No need of msWrapText according to issue #5609,2,[],https://github.com/mapserver/mapserver/pull/5691,https://github.com/SunveerSingh,1,https://github.com/MapServer/MapServer/pull/5691,"After going through the code and following the issue #5609 I found that the function msWrapText is not used anywhere, so please let me know if it is correct!","After going through the code and following the issue #5609 I found that the function msWrapText is not used anywhere, so please let me know if it is correct!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5691,2018-10-29T15:30:52Z,2018-11-08T21:48:29Z,2018-11-08T21:48:32Z,MERGED,True,2,99,1,https://github.com/SunveerSingh,No need of msWrapText according to issue #5609,2,[],https://github.com/mapserver/mapserver/pull/5691,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5691#issuecomment-434023725,"After going through the code and following the issue #5609 I found that the function msWrapText is not used anywhere, so please let me know if it is correct!",@SunveerSingh - you will probably want to make this pull request against the master branch rather than mapserver:branch-7-0. This explains why Travis and Appveyor are both currently failing.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5691,2018-10-29T15:30:52Z,2018-11-08T21:48:29Z,2018-11-08T21:48:32Z,MERGED,True,2,99,1,https://github.com/SunveerSingh,No need of msWrapText according to issue #5609,2,[],https://github.com/mapserver/mapserver/pull/5691,https://github.com/SunveerSingh,3,https://github.com/MapServer/MapServer/pull/5691#issuecomment-434147023,"After going through the code and following the issue #5609 I found that the function msWrapText is not used anywhere, so please let me know if it is correct!",I have changed the branch to master.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5691,2018-10-29T15:30:52Z,2018-11-08T21:48:29Z,2018-11-08T21:48:32Z,MERGED,True,2,99,1,https://github.com/SunveerSingh,No need of msWrapText according to issue #5609,2,[],https://github.com/mapserver/mapserver/pull/5691,https://github.com/geographika,4,https://github.com/MapServer/MapServer/pull/5691#issuecomment-434979956,"After going through the code and following the issue #5609 I found that the function msWrapText is not used anywhere, so please let me know if it is correct!",@SunveerSingh - to trigger the Travis and Appveyor builds again could you try closing and reopening the pull request to see if all the checks pass?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5691,2018-10-29T15:30:52Z,2018-11-08T21:48:29Z,2018-11-08T21:48:32Z,MERGED,True,2,99,1,https://github.com/SunveerSingh,No need of msWrapText according to issue #5609,2,[],https://github.com/mapserver/mapserver/pull/5691,https://github.com/SunveerSingh,5,https://github.com/MapServer/MapServer/pull/5691#issuecomment-434997857,"After going through the code and following the issue #5609 I found that the function msWrapText is not used anywhere, so please let me know if it is correct!",will do,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5691,2018-10-29T15:30:52Z,2018-11-08T21:48:29Z,2018-11-08T21:48:32Z,MERGED,True,2,99,1,https://github.com/SunveerSingh,No need of msWrapText according to issue #5609,2,[],https://github.com/mapserver/mapserver/pull/5691,https://github.com/SunveerSingh,6,https://github.com/MapServer/MapServer/pull/5691#issuecomment-436647271,"After going through the code and following the issue #5609 I found that the function msWrapText is not used anywhere, so please let me know if it is correct!","@geographika this time travis is failing, what should I do to fix it?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5691,2018-10-29T15:30:52Z,2018-11-08T21:48:29Z,2018-11-08T21:48:32Z,MERGED,True,2,99,1,https://github.com/SunveerSingh,No need of msWrapText according to issue #5609,2,[],https://github.com/mapserver/mapserver/pull/5691,https://github.com/geographika,7,https://github.com/MapServer/MapServer/pull/5691#issuecomment-436713164,"After going through the code and following the issue #5609 I found that the function msWrapText is not used anywhere, so please let me know if it is correct!",@SunveerSingh - I retriggered the Travis build. It looked like there was a network problem previously unrelated to the pull request. Both CI tests are now passing.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5691,2018-10-29T15:30:52Z,2018-11-08T21:48:29Z,2018-11-08T21:48:32Z,MERGED,True,2,99,1,https://github.com/SunveerSingh,No need of msWrapText according to issue #5609,2,[],https://github.com/mapserver/mapserver/pull/5691,https://github.com/SunveerSingh,8,https://github.com/MapServer/MapServer/pull/5691#issuecomment-436865576,"After going through the code and following the issue #5609 I found that the function msWrapText is not used anywhere, so please let me know if it is correct!","@geographika Thank You, can you merge it now?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5691,2018-10-29T15:30:52Z,2018-11-08T21:48:29Z,2018-11-08T21:48:32Z,MERGED,True,2,99,1,https://github.com/SunveerSingh,No need of msWrapText according to issue #5609,2,[],https://github.com/mapserver/mapserver/pull/5691,https://github.com/geographika,9,https://github.com/MapServer/MapServer/pull/5691#issuecomment-437048968,"After going through the code and following the issue #5609 I found that the function msWrapText is not used anywhere, so please let me know if it is correct!","@SunveerSingh - I've looked through the codebase and there are indeed no longer and other references to this function.
One thing to fix before merging is to also delete the associated comment, as this is also now redundant:
/**
 * replace wrap characters with \n , respecting maximal line length.
 *
 * returns a pointer to the newly allocated text. memory is controlled
 * inside this function, so the caller MUST use the pointer returned by
 * the function:
 * text = msWrapText(label,text);
 *
 * TODO/FIXME: function will produce erroneous/crashing? results
 * if the wrap character is encoded with multiple bytes
 *
 * see http://mapserver.org/development/rfc/ms-rfc-40.html
 * for a summary of how wrap/maxlength interact on the result
 * of the text transformation
 */",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5691,2018-10-29T15:30:52Z,2018-11-08T21:48:29Z,2018-11-08T21:48:32Z,MERGED,True,2,99,1,https://github.com/SunveerSingh,No need of msWrapText according to issue #5609,2,[],https://github.com/mapserver/mapserver/pull/5691,https://github.com/SunveerSingh,10,https://github.com/MapServer/MapServer/pull/5691#issuecomment-437053222,"After going through the code and following the issue #5609 I found that the function msWrapText is not used anywhere, so please let me know if it is correct!",@geographika Done,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5691,2018-10-29T15:30:52Z,2018-11-08T21:48:29Z,2018-11-08T21:48:32Z,MERGED,True,2,99,1,https://github.com/SunveerSingh,No need of msWrapText according to issue #5609,2,[],https://github.com/mapserver/mapserver/pull/5691,https://github.com/SunveerSingh,11,https://github.com/MapServer/MapServer/pull/5691#issuecomment-437067624,"After going through the code and following the issue #5609 I found that the function msWrapText is not used anywhere, so please let me know if it is correct!",@geographika tests passed can we merge it?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5691,2018-10-29T15:30:52Z,2018-11-08T21:48:29Z,2018-11-08T21:48:32Z,MERGED,True,2,99,1,https://github.com/SunveerSingh,No need of msWrapText according to issue #5609,2,[],https://github.com/mapserver/mapserver/pull/5691,https://github.com/geographika,12,https://github.com/MapServer/MapServer/pull/5691#issuecomment-437168206,"After going through the code and following the issue #5609 I found that the function msWrapText is not used anywhere, so please let me know if it is correct!",Thanks @SunveerSingh !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5692,2018-10-30T13:15:36Z,2018-10-30T13:30:12Z,2018-10-30T13:31:03Z,MERGED,True,2,1,1,https://github.com/tomkralidis,fix brackets,1,[],https://github.com/mapserver/mapserver/pull/5692,https://github.com/tomkralidis,1,https://github.com/MapServer/MapServer/pull/5692,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5696,2018-11-06T13:47:45Z,2018-11-07T19:48:08Z,2021-04-26T02:27:06Z,CLOSED,False,249,143,16,https://github.com/sdlime,Initial fix for issue #5490 (for PostGIS only).,3,[],https://github.com/mapserver/mapserver/pull/5696,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/5696,"This adds IN operator support to the PostGIS filter translation function. It also enables IN support in other drivers (e.g. Oracle, OGR, SQLServer) because they were expecting one token for that operator (MS_TOKEN_COMPARISON_IN) but the lexer was returning IN - the parser token for that operator. This patch fixes that too... --Steve","This adds IN operator support to the PostGIS filter translation function. It also enables IN support in other drivers (e.g. Oracle, OGR, SQLServer) because they were expecting one token for that operator (MS_TOKEN_COMPARISON_IN) but the lexer was returning IN - the parser token for that operator. This patch fixes that too... --Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5696,2018-11-06T13:47:45Z,2018-11-07T19:48:08Z,2021-04-26T02:27:06Z,CLOSED,False,249,143,16,https://github.com/sdlime,Initial fix for issue #5490 (for PostGIS only).,3,[],https://github.com/mapserver/mapserver/pull/5696,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5696#issuecomment-436258946,"This adds IN operator support to the PostGIS filter translation function. It also enables IN support in other drivers (e.g. Oracle, OGR, SQLServer) because they were expecting one token for that operator (MS_TOKEN_COMPARISON_IN) but the lexer was returning IN - the parser token for that operator. This patch fixes that too... --Steve","Added review requests from driver maintainers... Crap, I see tests are failing though.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5696,2018-11-06T13:47:45Z,2018-11-07T19:48:08Z,2021-04-26T02:27:06Z,CLOSED,False,249,143,16,https://github.com/sdlime,Initial fix for issue #5490 (for PostGIS only).,3,[],https://github.com/mapserver/mapserver/pull/5696,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5696#issuecomment-436279076,"This adds IN operator support to the PostGIS filter translation function. It also enables IN support in other drivers (e.g. Oracle, OGR, SQLServer) because they were expecting one token for that operator (MS_TOKEN_COMPARISON_IN) but the lexer was returning IN - the parser token for that operator. This patch fixes that too... --Steve",@sdlime - I think both the CI scripts on the 7-0 branch are broken - they've been updated in the 7-2 branch and master.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5696,2018-11-06T13:47:45Z,2018-11-07T19:48:08Z,2021-04-26T02:27:06Z,CLOSED,False,249,143,16,https://github.com/sdlime,Initial fix for issue #5490 (for PostGIS only).,3,[],https://github.com/mapserver/mapserver/pull/5696,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/5696#issuecomment-436281895,"This adds IN operator support to the PostGIS filter translation function. It also enables IN support in other drivers (e.g. Oracle, OGR, SQLServer) because they were expecting one token for that operator (MS_TOKEN_COMPARISON_IN) but the lexer was returning IN - the parser token for that operator. This patch fixes that too... --Steve","@geographika, looks that way... This particular issue was introduced at 7.0 so I started with that branch. I'm curious if folks think we should bother with a fix there or if I should redo the pull for 7.2 only?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5698,2018-11-07T19:46:16Z,2018-11-08T20:12:07Z,2021-04-26T02:27:21Z,MERGED,True,498,606,16,https://github.com/sdlime,Initial fix for issue #5490,4,[],https://github.com/mapserver/mapserver/pull/5698,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/5698,"This adds IN operator support to the PostGIS filter translation function. It also enables IN support in other drivers (e.g. Oracle, OGR, SQLServer) because they were expecting one token for that operator (MS_TOKEN_COMPARISON_IN) but the lexer was returning IN - the parser token for that operator. This patch fixes that too... --Steve","This adds IN operator support to the PostGIS filter translation function. It also enables IN support in other drivers (e.g. Oracle, OGR, SQLServer) because they were expecting one token for that operator (MS_TOKEN_COMPARISON_IN) but the lexer was returning IN - the parser token for that operator. This patch fixes that too... --Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5701,2018-11-08T22:12:57Z,2018-11-23T08:09:32Z,2018-11-23T08:09:32Z,MERGED,True,1,0,1,https://github.com/geographika,Hide MSVC compiler warnings,1,[],https://github.com/mapserver/mapserver/pull/5701,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5701,"See #5700 - this hides the most frequent lower level warnings, so more significant issues can be addressed.
It brings the warnings down from ~830 to ~50.","See #5700 - this hides the most frequent lower level warnings, so more significant issues can be addressed.
It brings the warnings down from ~830 to ~50.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5707,2018-11-21T16:23:23Z,2019-06-10T16:44:02Z,2021-03-19T21:25:54Z,MERGED,True,15,5,1,https://github.com/computerchemist,Reduce log clutter from non-errors,2,[],https://github.com/mapserver/mapserver/pull/5707,https://github.com/computerchemist,1,https://github.com/MapServer/MapServer/pull/5707,"Prevent ""No matching records"" from filling up logfile in terse mode.
#5706","Prevent ""No matching records"" from filling up logfile in terse mode.
#5706",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5707,2018-11-21T16:23:23Z,2019-06-10T16:44:02Z,2021-03-19T21:25:54Z,MERGED,True,15,5,1,https://github.com/computerchemist,Reduce log clutter from non-errors,2,[],https://github.com/mapserver/mapserver/pull/5707,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5707#issuecomment-440832647,"Prevent ""No matching records"" from filling up logfile in terse mode.
#5706",@computerchemist - Travis is failing due to a separate issue. I have changed the pull request to be on the master branch where Travis should be working. If you add in the braces Travis should restart automatically.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5707,2018-11-21T16:23:23Z,2019-06-10T16:44:02Z,2021-03-19T21:25:54Z,MERGED,True,15,5,1,https://github.com/computerchemist,Reduce log clutter from non-errors,2,[],https://github.com/mapserver/mapserver/pull/5707,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5707#issuecomment-440842221,"Prevent ""No matching records"" from filling up logfile in terse mode.
#5706","@computerchemist - thanks for the pull request!
I may have been mistaken about why Travis was failing. It looks like some tests may be relying on that text e.g. https://github.com/mapserver/mapserver/blob/master/msautotest/wxs/expected/wfs_200_exception_getfeaturebyid_nofeature.xml
Hopefully others will provide input on if this should be expected or not.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5707,2018-11-21T16:23:23Z,2019-06-10T16:44:02Z,2021-03-19T21:25:54Z,MERGED,True,15,5,1,https://github.com/computerchemist,Reduce log clutter from non-errors,2,[],https://github.com/mapserver/mapserver/pull/5707,https://github.com/computerchemist,4,https://github.com/MapServer/MapServer/pull/5707#issuecomment-440987922,"Prevent ""No matching records"" from filling up logfile in terse mode.
#5706","@geographika I had a quick look, doesn't the context of the test just needs changing so the test is performed in verbose debug mode? The returned WMS makes it clear in any case there are no features to return - that should be really more the focus of the test -  the log item itself was IMO pretty useless as it was just telling me ""something"" had no features. But NOT seeing it repeated literally tens of thousands of times in a production log was the aim of the patch!
I also double checked talking of context to ensure ""lp"" was there in each function; just something that alarmed me from Travis; warning: ‘lp’ may be used uninitialized in this function. It is - it's initialised via GET_LAYER from the mapObj ""map"".
I suspect I might be better off using ""map->debug"", becuase ""map"" as a mapobj seems to be passed to each function (and DEBUG I think is a global function anyway - is it even able to be turned on for selected layers?). Does that sound like a better idea in any case?
I simply used ""lp->debug"" as existing error messages were using it. It made ME do a review too and on that basis I think I only got away with it as it's in the layerobj structure, although it all seems to be passed from the mapobj using GET_LAYER, so maybe I'm just confusing travis more than myself.
I'm hoping others can weigh in too at this point who are more knowledgeable with the codebase - all I want is nice clean manageable error logs with only real errors in them!
Thanks for the help again Seth.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5707,2018-11-21T16:23:23Z,2019-06-10T16:44:02Z,2021-03-19T21:25:54Z,MERGED,True,15,5,1,https://github.com/computerchemist,Reduce log clutter from non-errors,2,[],https://github.com/mapserver/mapserver/pull/5707,https://github.com/computerchemist,5,https://github.com/MapServer/MapServer/pull/5707#issuecomment-441015589,"Prevent ""No matching records"" from filling up logfile in terse mode.
#5706","OK, having delved in deeper I concur this patch does indeed partially suppress the returned message from WMS as well as suppressing the log - in that no ""service exception"" reason text is given. It doesn't break the spec - indeed it still outputs the correct formatted response as a service exception enough that openlayers sees it as a valid ""nothing to do"".
The problem seems to stem from the fact that msSetError not only writes the string to the logfile, but also pushes that string via msInsertErrorObj to the exception report in WMS that is thrown after this line by returning MS_FAILURE (which we still need).
As such, I suspect it's probably easier to quietly drop the whole thing, and I'll carry on making my five amendments each time a new mapserver comes out?
The dilemma as I still see it, is this isn't a real ""error"" - but a ""reason"" for not outputting something, so it really shouldn't be polluting the error logs on a production server. Here's how the patched version looks when querying via mouse click from openlayers:
<?xml version='1.0' encoding=""UTF-8"" standalone=""no"" ?>
<ServiceExceptionReport version=""1.3.0"" xmlns=""http://www.opengis.net/ogc"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://www.opengis.net/ogc http://schemas.opengis.net/wms/1.3.0/exceptions_1_3_0.xsd"">
<ServiceException>
</ServiceException>
</ServiceExceptionReport>",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5707,2018-11-21T16:23:23Z,2019-06-10T16:44:02Z,2021-03-19T21:25:54Z,MERGED,True,15,5,1,https://github.com/computerchemist,Reduce log clutter from non-errors,2,[],https://github.com/mapserver/mapserver/pull/5707,https://github.com/geographika,6,https://github.com/MapServer/MapServer/pull/5707#issuecomment-441117237,"Prevent ""No matching records"" from filling up logfile in terse mode.
#5706","@computerchemist - a good summary of the situation, it looked a nice easy update at the beginning! I agree with your logic that it should be possible to log only errors in a production system.
I put in link in the mailing lists as there was an ongoing discussion about DEBUG levels which seemed relevant - https://lists.osgeo.org/pipermail/mapserver-users/2018-November/080870.html
The pull request should be left open to let others add opinions.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5707,2018-11-21T16:23:23Z,2019-06-10T16:44:02Z,2021-03-19T21:25:54Z,MERGED,True,15,5,1,https://github.com/computerchemist,Reduce log clutter from non-errors,2,[],https://github.com/mapserver/mapserver/pull/5707,https://github.com/jmckenna,7,https://github.com/MapServer/MapServer/pull/5707#issuecomment-500488871,"Prevent ""No matching records"" from filling up logfile in terse mode.
#5706","I believe we should merge this pull request, as it is indeed very useful.   (just for reference: those log messages will then require at least debug level 3, ""verbose"").",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5707,2018-11-21T16:23:23Z,2019-06-10T16:44:02Z,2021-03-19T21:25:54Z,MERGED,True,15,5,1,https://github.com/computerchemist,Reduce log clutter from non-errors,2,[],https://github.com/mapserver/mapserver/pull/5707,https://github.com/jmckenna,8,https://github.com/MapServer/MapServer/pull/5707#issuecomment-500489130,"Prevent ""No matching records"" from filling up logfile in terse mode.
#5706",thank you @computerchemist !!  A nice improvement.,True,{'HOORAY': ['https://github.com/pedros007']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5707,2018-11-21T16:23:23Z,2019-06-10T16:44:02Z,2021-03-19T21:25:54Z,MERGED,True,15,5,1,https://github.com/computerchemist,Reduce log clutter from non-errors,2,[],https://github.com/mapserver/mapserver/pull/5707,https://github.com/ravhed,9,https://github.com/MapServer/MapServer/pull/5707#issuecomment-501581372,"Prevent ""No matching records"" from filling up logfile in terse mode.
#5706",I think it was a mistake to merge this pull request into master in its current state as the tests are failing because of this pull request (they currently depend on this error message). It seems to me that there was no decision on how to handle this change so maybe we should revert it and decide on how to properly handle this? I think @geographika's email (https://lists.osgeo.org/pipermail/mapserver-users/2018-November/080870.html) summarizes the issue nicely.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5707,2018-11-21T16:23:23Z,2019-06-10T16:44:02Z,2021-03-19T21:25:54Z,MERGED,True,15,5,1,https://github.com/computerchemist,Reduce log clutter from non-errors,2,[],https://github.com/mapserver/mapserver/pull/5707,https://github.com/sdlime,10,https://github.com/MapServer/MapServer/pull/5707#issuecomment-501804686,"Prevent ""No matching records"" from filling up logfile in terse mode.
#5706","@jmckenna, @geographika - what do you think? Could just fix the tests. I don't know which or how many tests are failing now but is it simply a matter of adding the appropriate debug level to those tests which depend on that messaging?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5707,2018-11-21T16:23:23Z,2019-06-10T16:44:02Z,2021-03-19T21:25:54Z,MERGED,True,15,5,1,https://github.com/computerchemist,Reduce log clutter from non-errors,2,[],https://github.com/mapserver/mapserver/pull/5707,https://github.com/geographika,11,https://github.com/MapServer/MapServer/pull/5707#issuecomment-501826389,"Prevent ""No matching records"" from filling up logfile in terse mode.
#5706","The tests need to be updated - we don't want to get into a situation of allowing a few tests to fail.
The ServiceExceptionReport could be improved by including a simple text in the XML string of:

No matching records",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5707,2018-11-21T16:23:23Z,2019-06-10T16:44:02Z,2021-03-19T21:25:54Z,MERGED,True,15,5,1,https://github.com/computerchemist,Reduce log clutter from non-errors,2,[],https://github.com/mapserver/mapserver/pull/5707,https://github.com/jmckenna,12,https://github.com/MapServer/MapServer/pull/5707#issuecomment-502085281,"Prevent ""No matching records"" from filling up logfile in terse mode.
#5706","No problem, will revert now....",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5707,2018-11-21T16:23:23Z,2019-06-10T16:44:02Z,2021-03-19T21:25:54Z,MERGED,True,15,5,1,https://github.com/computerchemist,Reduce log clutter from non-errors,2,[],https://github.com/mapserver/mapserver/pull/5707,https://github.com/jbo-ads,13,https://github.com/MapServer/MapServer/pull/5707#issuecomment-502128656,"Prevent ""No matching records"" from filling up logfile in terse mode.
#5706","I am working on an update of failing msautotests with respect to this PR. It consists in adding a DEBUG 3 line in all impacted layers so that output remains the same.
See #5823.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5707,2018-11-21T16:23:23Z,2019-06-10T16:44:02Z,2021-03-19T21:25:54Z,MERGED,True,15,5,1,https://github.com/computerchemist,Reduce log clutter from non-errors,2,[],https://github.com/mapserver/mapserver/pull/5707,https://github.com/jmckenna,14,https://github.com/MapServer/MapServer/pull/5707#issuecomment-502177338,"Prevent ""No matching records"" from filling up logfile in terse mode.
#5706","thanks @jbo-ads i was going to tackle that this afternoon, you beat me to it :)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5707,2018-11-21T16:23:23Z,2019-06-10T16:44:02Z,2021-03-19T21:25:54Z,MERGED,True,15,5,1,https://github.com/computerchemist,Reduce log clutter from non-errors,2,[],https://github.com/mapserver/mapserver/pull/5707,https://github.com/geographika,15,https://github.com/MapServer/MapServer/pull/5707#issuecomment-803142810,"Prevent ""No matching records"" from filling up logfile in terse mode.
#5706",I think with the update from @jbo-ads this pull request can be reopened and merged?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5709,2018-11-24T22:16:07Z,2018-12-22T00:06:29Z,2018-12-22T00:06:29Z,MERGED,True,120,33,5,https://github.com/geographika,Python MapScript install,9,[],https://github.com/mapserver/mapserver/pull/5709,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5709,"This pull request modifies how the make install command install the Python MapScript bindings. Currently CMake simply copies the _mapscript.so and mapscript.py files to /usr/local/lib/python2.7/dist-packages/
This update uses CMake to run python setup.py install if make install is run. This creates installation metadata and copies it to /usr/local/lib/python2.7/dist-packages/mapscript-7.3.0-py2.7-linux-x86_64.egg/
This should allow other applications that rely on MapScript to check if the dependency is already installed, and to allow MapScript to be listed and uninstalled using pip. It hopefully also helps with packaging Python MapScript in the future and addresses #5140.
The new MapScript installation also includes the tests and examples within the MapScript module - the same as provided in the Python Wheels.
An additional change is made to avoid make install rebuilding the Python MapScript module (see #5708), although it still needs to be reviewed to see if this causes issues with the PHPNG MapScript module.","This pull request modifies how the make install command install the Python MapScript bindings. Currently CMake simply copies the _mapscript.so and mapscript.py files to /usr/local/lib/python2.7/dist-packages/
This update uses CMake to run python setup.py install if make install is run. This creates installation metadata and copies it to /usr/local/lib/python2.7/dist-packages/mapscript-7.3.0-py2.7-linux-x86_64.egg/
This should allow other applications that rely on MapScript to check if the dependency is already installed, and to allow MapScript to be listed and uninstalled using pip. It hopefully also helps with packaging Python MapScript in the future and addresses #5140.
The new MapScript installation also includes the tests and examples within the MapScript module - the same as provided in the Python Wheels.
An additional change is made to avoid make install rebuilding the Python MapScript module (see #5708), although it still needs to be reviewed to see if this causes issues with the PHPNG MapScript module.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5710,2018-11-26T11:32:45Z,2018-11-27T01:08:14Z,2018-11-27T01:17:18Z,CLOSED,False,5256,5256,1,https://github.com/thisIsShubhamSharma,Styles' OFFSET values are saved as ints though they are doubles [issu…,1,[],https://github.com/mapserver/mapserver/pull/5710,https://github.com/thisIsShubhamSharma,1,https://github.com/MapServer/MapServer/pull/5710,"…e #5310]
fixes #5310 and done some refactoring","…e #5310]
fixes #5310 and done some refactoring",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5710,2018-11-26T11:32:45Z,2018-11-27T01:08:14Z,2018-11-27T01:17:18Z,CLOSED,False,5256,5256,1,https://github.com/thisIsShubhamSharma,Styles' OFFSET values are saved as ints though they are doubles [issu…,1,[],https://github.com/mapserver/mapserver/pull/5710,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5710#issuecomment-441841003,"…e #5310]
fixes #5310 and done some refactoring",@thisIsShubhamSharma - you probably want to try the pull request again - there are too many changes to the file to review (https://github.com/mapserver/mapserver/pull/5710/files). If you auto-formatted the code you'll want to revert this and just add the minimal changes required for the fix with no refactoring.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5710,2018-11-26T11:32:45Z,2018-11-27T01:08:14Z,2018-11-27T01:17:18Z,CLOSED,False,5256,5256,1,https://github.com/thisIsShubhamSharma,Styles' OFFSET values are saved as ints though they are doubles [issu…,1,[],https://github.com/mapserver/mapserver/pull/5710,https://github.com/thisIsShubhamSharma,3,https://github.com/MapServer/MapServer/pull/5710#issuecomment-441859248,"…e #5310]
fixes #5310 and done some refactoring",Sure,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5711,2018-11-27T01:13:26Z,2018-11-27T01:13:50Z,2018-11-27T01:17:21Z,CLOSED,False,1,1,1,https://github.com/thisIsShubhamSharma,Styles' OFFSET values are saved as ints though they are doubles[issue…,1,[],https://github.com/mapserver/mapserver/pull/5711,https://github.com/thisIsShubhamSharma,1,https://github.com/MapServer/MapServer/pull/5711,"…  #5310]
fixes #5310","…  #5310]
fixes #5310",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5712,2018-11-27T01:16:13Z,2019-01-23T22:03:25Z,2019-01-23T22:03:25Z,CLOSED,False,1,1,1,https://github.com/thisIsShubhamSharma, Styles' OFFSET values are saved as ints though they are doubles[issu…,1,[],https://github.com/mapserver/mapserver/pull/5712,https://github.com/thisIsShubhamSharma,1,https://github.com/MapServer/MapServer/pull/5712,"…e #5310]
fixes #5310","…e #5310]
fixes #5310",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5712,2018-11-27T01:16:13Z,2019-01-23T22:03:25Z,2019-01-23T22:03:25Z,CLOSED,False,1,1,1,https://github.com/thisIsShubhamSharma, Styles' OFFSET values are saved as ints though they are doubles[issu…,1,[],https://github.com/mapserver/mapserver/pull/5712,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5712#issuecomment-444536395,"…e #5310]
fixes #5310","Hmmm... I don't think this enough. Just changing the function signature isn't enough since the calls to msIO_fprintf are still using the integer pattern (%d). This should probably follow the same approach as writeNumber and use %.15g as the pattern for msIO_fprintf. This should also be against the 7.2 branch...
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5712,2018-11-27T01:16:13Z,2019-01-23T22:03:25Z,2019-01-23T22:03:25Z,CLOSED,False,1,1,1,https://github.com/thisIsShubhamSharma, Styles' OFFSET values are saved as ints though they are doubles[issu…,1,[],https://github.com/mapserver/mapserver/pull/5712,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/5712#issuecomment-456984162,"…e #5310]
fixes #5310",Handled via a separate pull request... closing. --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5713,2018-11-27T23:48:27Z,2018-11-30T15:34:15Z,2018-11-30T15:34:15Z,MERGED,True,3,3,1,https://github.com/geographika,Fix Python MapScript Rebuilding,1,[],https://github.com/mapserver/mapserver/pull/5713,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5713,Prevent Python mapscript from rebuilding every time due to possible CMake/SWIG bug. See #5708,Prevent Python mapscript from rebuilding every time due to possible CMake/SWIG bug. See #5708,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5715,2018-11-30T16:53:45Z,2020-02-27T23:28:54Z,2020-02-27T23:36:18Z,MERGED,True,28,0,1,https://github.com/geographika,Add a Python test for checking the OFFSET is output correctly,5,[],https://github.com/mapserver/mapserver/pull/5715,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5715,"@thisIsShubhamSharma - I added a Python test to create a style with doubles as OFFSET values, convert it to a string, load it back and check the doubles are still there. The test however appears to be failing. Can you convert to string and see that double OFFSET values are preserved?
          output_string = new_style.convertToString()
          new_style2 = mapscript.fromstring(output_string)
      
          # ensure attributes are output as doubles
          assert new_style.size == 7.25
  >       assert new_style2.offsetx == 10.5
  E       AssertionError: assert 0.0 == 10.5
  E        +  where 0.0 = <mapscript.mapscript.styleObj; proxy of <Swig Object of type 'styleObj *' at 0x03ED0A10> >.offsetx","@thisIsShubhamSharma - I added a Python test to create a style with doubles as OFFSET values, convert it to a string, load it back and check the doubles are still there. The test however appears to be failing. Can you convert to string and see that double OFFSET values are preserved?
          output_string = new_style.convertToString()
          new_style2 = mapscript.fromstring(output_string)
      
          # ensure attributes are output as doubles
          assert new_style.size == 7.25
  >       assert new_style2.offsetx == 10.5
  E       AssertionError: assert 0.0 == 10.5
  E        +  where 0.0 = <mapscript.mapscript.styleObj; proxy of <Swig Object of type 'styleObj *' at 0x03ED0A10> >.offsetx",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5715,2018-11-30T16:53:45Z,2020-02-27T23:28:54Z,2020-02-27T23:36:18Z,MERGED,True,28,0,1,https://github.com/geographika,Add a Python test for checking the OFFSET is output correctly,5,[],https://github.com/mapserver/mapserver/pull/5715,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5715#issuecomment-592232273,"@thisIsShubhamSharma - I added a Python test to create a style with doubles as OFFSET values, convert it to a string, load it back and check the doubles are still there. The test however appears to be failing. Can you convert to string and see that double OFFSET values are preserved?
          output_string = new_style.convertToString()
          new_style2 = mapscript.fromstring(output_string)
      
          # ensure attributes are output as doubles
          assert new_style.size == 7.25
  >       assert new_style2.offsetx == 10.5
  E       AssertionError: assert 0.0 == 10.5
  E        +  where 0.0 = <mapscript.mapscript.styleObj; proxy of <Swig Object of type 'styleObj *' at 0x03ED0A10> >.offsetx",For reference issue was #5310 and fix was by @sdlime with #5738,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5717,2018-12-08T11:45:05Z,2018-12-22T00:08:17Z,2018-12-22T00:08:17Z,MERGED,True,55,283,4,https://github.com/geographika,Update the MapScript folder README,5,[],https://github.com/mapserver/mapserver/pull/5717,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5717,"Updates the text README in the mapscript folder with the latest details and links, and removes the redundant docs folder.
The RST rendered output can be seen at https://github.com/geographika/mapserver/tree/mapscript-readme/mapscript","Updates the text README in the mapscript folder with the latest details and links, and removes the redundant docs folder.
The RST rendered output can be seen at https://github.com/geographika/mapserver/tree/mapscript-readme/mapscript",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5727,2019-01-13T13:58:32Z,2019-01-13T15:17:23Z,2019-01-13T15:17:37Z,CLOSED,False,6,2,1,https://github.com/3x0dv5,Update CMakeLists.txt,1,[],https://github.com/mapserver/mapserver/pull/5727,https://github.com/3x0dv5,1,https://github.com/MapServer/MapServer/pull/5727,"A couple of changes that I had to do in order to be able to create the make file with csharp_mapscript support using cmake 3.10.2.4 on Linux Mint 19
Also the most recent versions of mono recommend the use of mcs.
Please take a look and see if this if I made some mistake or maybe there is already a known workaround.","A couple of changes that I had to do in order to be able to create the make file with csharp_mapscript support using cmake 3.10.2.4 on Linux Mint 19
Also the most recent versions of mono recommend the use of mcs.
Please take a look and see if this if I made some mistake or maybe there is already a known workaround.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5729,2019-01-14T21:08:18Z,2019-01-14T21:57:04Z,2021-04-26T02:28:18Z,MERGED,True,2,1,2,https://github.com/sdlime,Identified difference between WMS and mode=tile sourced MVT output. W…,2,[],https://github.com/mapserver/mapserver/pull/5729,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/5729,…MS doesn't set a cellsize so the half-pixel offset computation is off by a pixel (#5596).,…MS doesn't set a cellsize so the half-pixel offset computation is off by a pixel (#5596).,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5730,2019-01-14T21:19:35Z,2019-01-15T20:05:24Z,2019-01-15T20:05:45Z,CLOSED,False,148,123,3,https://github.com/3x0dv5,mapscript_csharp on Linux.,1,[],https://github.com/mapserver/mapserver/pull/5730,https://github.com/3x0dv5,1,https://github.com/MapServer/MapServer/pull/5730,"In reference to
http://osgeo-org.1560.x6.nabble.com/csharp-mapscript-dotnet-core-on-Linux-td5391329.html
and
#5728
##sample usage:
$ mkdir build
$ cd build
$ cmake -DCMAKE_INSTALL_PREFIX=/opt 
-DCMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu:/usr/share/postgresql/10:/usr/local:/opt 
-DWITH_CLIENT_WFS=ON 
-DWITH_CLIENT_WMS=ON 
-DWITH_CURL=ON 
-DWITH_SOS=ON 
-DWITH_PHP=OFF 
-DWITH_PERL=OFF 
-DWITH_RUBY=OFF 
-DWITH_JAVA=OFF 
-DWITH_CSHARP=ON 
-DWITH_PYTHON=OFF 
-DWITH_SVGCAIRO=OFF 
-DWITH_ORACLESPATIAL=OFF 
-DWITH_MSSQL2008=OFF 
../ >../configure.out.txt
$ make mapscript","In reference to
http://osgeo-org.1560.x6.nabble.com/csharp-mapscript-dotnet-core-on-Linux-td5391329.html
and
#5728
##sample usage:
$ mkdir build
$ cd build
$ cmake -DCMAKE_INSTALL_PREFIX=/opt 
-DCMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu:/usr/share/postgresql/10:/usr/local:/opt 
-DWITH_CLIENT_WFS=ON 
-DWITH_CLIENT_WMS=ON 
-DWITH_CURL=ON 
-DWITH_SOS=ON 
-DWITH_PHP=OFF 
-DWITH_PERL=OFF 
-DWITH_RUBY=OFF 
-DWITH_JAVA=OFF 
-DWITH_CSHARP=ON 
-DWITH_PYTHON=OFF 
-DWITH_SVGCAIRO=OFF 
-DWITH_ORACLESPATIAL=OFF 
-DWITH_MSSQL2008=OFF 
../ >../configure.out.txt
$ make mapscript",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5730,2019-01-14T21:19:35Z,2019-01-15T20:05:24Z,2019-01-15T20:05:45Z,CLOSED,False,148,123,3,https://github.com/3x0dv5,mapscript_csharp on Linux.,1,[],https://github.com/mapserver/mapserver/pull/5730,https://github.com/3x0dv5,2,https://github.com/MapServer/MapServer/pull/5730#issuecomment-454166160,"In reference to
http://osgeo-org.1560.x6.nabble.com/csharp-mapscript-dotnet-core-on-Linux-td5391329.html
and
#5728
##sample usage:
$ mkdir build
$ cd build
$ cmake -DCMAKE_INSTALL_PREFIX=/opt 
-DCMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu:/usr/share/postgresql/10:/usr/local:/opt 
-DWITH_CLIENT_WFS=ON 
-DWITH_CLIENT_WMS=ON 
-DWITH_CURL=ON 
-DWITH_SOS=ON 
-DWITH_PHP=OFF 
-DWITH_PERL=OFF 
-DWITH_RUBY=OFF 
-DWITH_JAVA=OFF 
-DWITH_CSHARP=ON 
-DWITH_PYTHON=OFF 
-DWITH_SVGCAIRO=OFF 
-DWITH_ORACLESPATIAL=OFF 
-DWITH_MSSQL2008=OFF 
../ >../configure.out.txt
$ make mapscript","Sorry I raised it against 7.2, didn't see 7.3, feel free to decline, change and use the code as part of any other PR.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5730,2019-01-14T21:19:35Z,2019-01-15T20:05:24Z,2019-01-15T20:05:45Z,CLOSED,False,148,123,3,https://github.com/3x0dv5,mapscript_csharp on Linux.,1,[],https://github.com/mapserver/mapserver/pull/5730,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5730#issuecomment-454425994,"In reference to
http://osgeo-org.1560.x6.nabble.com/csharp-mapscript-dotnet-core-on-Linux-td5391329.html
and
#5728
##sample usage:
$ mkdir build
$ cd build
$ cmake -DCMAKE_INSTALL_PREFIX=/opt 
-DCMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu:/usr/share/postgresql/10:/usr/local:/opt 
-DWITH_CLIENT_WFS=ON 
-DWITH_CLIENT_WMS=ON 
-DWITH_CURL=ON 
-DWITH_SOS=ON 
-DWITH_PHP=OFF 
-DWITH_PERL=OFF 
-DWITH_RUBY=OFF 
-DWITH_JAVA=OFF 
-DWITH_CSHARP=ON 
-DWITH_PYTHON=OFF 
-DWITH_SVGCAIRO=OFF 
-DWITH_ORACLESPATIAL=OFF 
-DWITH_MSSQL2008=OFF 
../ >../configure.out.txt
$ make mapscript",@3x0dv5 - would you be able to redo the request against the master branch which had a few of these fixes already implemented? I can then take a look at the Travis build if needed and add to this pull request.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5730,2019-01-14T21:19:35Z,2019-01-15T20:05:24Z,2019-01-15T20:05:45Z,CLOSED,False,148,123,3,https://github.com/3x0dv5,mapscript_csharp on Linux.,1,[],https://github.com/mapserver/mapserver/pull/5730,https://github.com/3x0dv5,4,https://github.com/MapServer/MapServer/pull/5730#issuecomment-454532074,"In reference to
http://osgeo-org.1560.x6.nabble.com/csharp-mapscript-dotnet-core-on-Linux-td5391329.html
and
#5728
##sample usage:
$ mkdir build
$ cd build
$ cmake -DCMAKE_INSTALL_PREFIX=/opt 
-DCMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu:/usr/share/postgresql/10:/usr/local:/opt 
-DWITH_CLIENT_WFS=ON 
-DWITH_CLIENT_WMS=ON 
-DWITH_CURL=ON 
-DWITH_SOS=ON 
-DWITH_PHP=OFF 
-DWITH_PERL=OFF 
-DWITH_RUBY=OFF 
-DWITH_JAVA=OFF 
-DWITH_CSHARP=ON 
-DWITH_PYTHON=OFF 
-DWITH_SVGCAIRO=OFF 
-DWITH_ORACLESPATIAL=OFF 
-DWITH_MSSQL2008=OFF 
../ >../configure.out.txt
$ make mapscript","added this one: #5733
Let me know if you need anything else",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5732,2019-01-15T19:56:38Z,2019-01-15T19:59:54Z,2019-01-15T19:59:55Z,CLOSED,False,54,21,3,https://github.com/3x0dv5,mapscript_csharp compilable on linux,1,[],https://github.com/mapserver/mapserver/pull/5732,https://github.com/3x0dv5,1,https://github.com/MapServer/MapServer/pull/5732,"In reference to
http://osgeo-org.1560.x6.nabble.com/csharp-mapscript-dotnet-core-on-Linux-td5391329.html
and
#5728
##sample usage:
$ mkdir build
$ cd build
$ cmake -DCMAKE_INSTALL_PREFIX=/opt
-DCMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu:/usr/share/postgresql/10:/usr/local:/opt
-DWITH_CLIENT_WFS=ON
-DWITH_CLIENT_WMS=ON
-DWITH_CURL=ON
-DWITH_SOS=ON
-DWITH_PHP=OFF
-DWITH_PERL=OFF
-DWITH_RUBY=OFF
-DWITH_JAVA=OFF
-DWITH_CSHARP=ON
-DWITH_PYTHON=OFF
-DWITH_SVGCAIRO=OFF
-DWITH_ORACLESPATIAL=OFF
-DWITH_MSSQL2008=OFF
../ >../configure.out.txt
$ make mapscript","In reference to
http://osgeo-org.1560.x6.nabble.com/csharp-mapscript-dotnet-core-on-Linux-td5391329.html
and
#5728
##sample usage:
$ mkdir build
$ cd build
$ cmake -DCMAKE_INSTALL_PREFIX=/opt
-DCMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu:/usr/share/postgresql/10:/usr/local:/opt
-DWITH_CLIENT_WFS=ON
-DWITH_CLIENT_WMS=ON
-DWITH_CURL=ON
-DWITH_SOS=ON
-DWITH_PHP=OFF
-DWITH_PERL=OFF
-DWITH_RUBY=OFF
-DWITH_JAVA=OFF
-DWITH_CSHARP=ON
-DWITH_PYTHON=OFF
-DWITH_SVGCAIRO=OFF
-DWITH_ORACLESPATIAL=OFF
-DWITH_MSSQL2008=OFF
../ >../configure.out.txt
$ make mapscript",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5732,2019-01-15T19:56:38Z,2019-01-15T19:59:54Z,2019-01-15T19:59:55Z,CLOSED,False,54,21,3,https://github.com/3x0dv5,mapscript_csharp compilable on linux,1,[],https://github.com/mapserver/mapserver/pull/5732,https://github.com/3x0dv5,2,https://github.com/MapServer/MapServer/pull/5732#issuecomment-454530250,"In reference to
http://osgeo-org.1560.x6.nabble.com/csharp-mapscript-dotnet-core-on-Linux-td5391329.html
and
#5728
##sample usage:
$ mkdir build
$ cd build
$ cmake -DCMAKE_INSTALL_PREFIX=/opt
-DCMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu:/usr/share/postgresql/10:/usr/local:/opt
-DWITH_CLIENT_WFS=ON
-DWITH_CLIENT_WMS=ON
-DWITH_CURL=ON
-DWITH_SOS=ON
-DWITH_PHP=OFF
-DWITH_PERL=OFF
-DWITH_RUBY=OFF
-DWITH_JAVA=OFF
-DWITH_CSHARP=ON
-DWITH_PYTHON=OFF
-DWITH_SVGCAIRO=OFF
-DWITH_ORACLESPATIAL=OFF
-DWITH_MSSQL2008=OFF
../ >../configure.out.txt
$ make mapscript",c! wrong code. brb,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5733,2019-01-15T20:05:13Z,2019-03-13T11:05:40Z,2019-03-13T11:05:40Z,MERGED,True,93,43,7,https://github.com/3x0dv5,mapscript_csharp compilable on Linux,4,[],https://github.com/mapserver/mapserver/pull/5733,https://github.com/3x0dv5,1,https://github.com/MapServer/MapServer/pull/5733,"In reference to
http://osgeo-org.1560.x6.nabble.com/csharp-mapscript-dotnet-core-on-Linux-td5391329.html
and
#5728
##sample usage:
$ mkdir build
$ cd build
$ cmake -DCMAKE_INSTALL_PREFIX=/opt
-DCMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu:/usr/share/postgresql/10:/usr/local:/opt
-DWITH_CLIENT_WFS=ON
-DWITH_CLIENT_WMS=ON
-DWITH_CURL=ON
-DWITH_SOS=ON
-DWITH_PHP=OFF
-DWITH_PERL=OFF
-DWITH_RUBY=OFF
-DWITH_JAVA=OFF
-DWITH_CSHARP=ON
-DWITH_PYTHON=OFF
-DWITH_SVGCAIRO=OFF
-DWITH_ORACLESPATIAL=OFF
-DWITH_MSSQL2008=OFF
../ >../configure.out.txt
$ make mapscript","In reference to
http://osgeo-org.1560.x6.nabble.com/csharp-mapscript-dotnet-core-on-Linux-td5391329.html
and
#5728
##sample usage:
$ mkdir build
$ cd build
$ cmake -DCMAKE_INSTALL_PREFIX=/opt
-DCMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu:/usr/share/postgresql/10:/usr/local:/opt
-DWITH_CLIENT_WFS=ON
-DWITH_CLIENT_WMS=ON
-DWITH_CURL=ON
-DWITH_SOS=ON
-DWITH_PHP=OFF
-DWITH_PERL=OFF
-DWITH_RUBY=OFF
-DWITH_JAVA=OFF
-DWITH_CSHARP=ON
-DWITH_PYTHON=OFF
-DWITH_SVGCAIRO=OFF
-DWITH_ORACLESPATIAL=OFF
-DWITH_MSSQL2008=OFF
../ >../configure.out.txt
$ make mapscript",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5733,2019-01-15T20:05:13Z,2019-03-13T11:05:40Z,2019-03-13T11:05:40Z,MERGED,True,93,43,7,https://github.com/3x0dv5,mapscript_csharp compilable on Linux,4,[],https://github.com/mapserver/mapserver/pull/5733,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5733#issuecomment-454565560,"In reference to
http://osgeo-org.1560.x6.nabble.com/csharp-mapscript-dotnet-core-on-Linux-td5391329.html
and
#5728
##sample usage:
$ mkdir build
$ cd build
$ cmake -DCMAKE_INSTALL_PREFIX=/opt
-DCMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu:/usr/share/postgresql/10:/usr/local:/opt
-DWITH_CLIENT_WFS=ON
-DWITH_CLIENT_WMS=ON
-DWITH_CURL=ON
-DWITH_SOS=ON
-DWITH_PHP=OFF
-DWITH_PERL=OFF
-DWITH_RUBY=OFF
-DWITH_JAVA=OFF
-DWITH_CSHARP=ON
-DWITH_PYTHON=OFF
-DWITH_SVGCAIRO=OFF
-DWITH_ORACLESPATIAL=OFF
-DWITH_MSSQL2008=OFF
../ >../configure.out.txt
$ make mapscript","@3x0dv5 - excellent!
In order to confirm the C# MapScript builds on Linux (and continues to build for future releases), could you add it to the Travis CI build?
This may/could be as simple as adding the CMAKE flag -DWITH_CSHARP=1 to the Makefile here:
https://github.com/mapserver/mapserver/blob/418e15cda5109e3a47c6691567e3e3e62e964187/Makefile#L12
In summary Travis is configured with the YAML file at https://github.com/mapserver/mapserver/blob/master/.travis.yml - this in turn calls the Makefile in the script section:
script:
  - make cmakebuild
  - make mspython-wheel  
  - make -j4 test

Appveyor (the Windows CI build) is still completing successfully so that is good news.
Ideally in the future both Appveyor and Travis would run the sample .NET MapScript applications following the build, but that is outside the scope of this. Thanks for the contribution.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5733,2019-01-15T20:05:13Z,2019-03-13T11:05:40Z,2019-03-13T11:05:40Z,MERGED,True,93,43,7,https://github.com/3x0dv5,mapscript_csharp compilable on Linux,4,[],https://github.com/mapserver/mapserver/pull/5733,https://github.com/3x0dv5,3,https://github.com/MapServer/MapServer/pull/5733#issuecomment-454767254,"In reference to
http://osgeo-org.1560.x6.nabble.com/csharp-mapscript-dotnet-core-on-Linux-td5391329.html
and
#5728
##sample usage:
$ mkdir build
$ cd build
$ cmake -DCMAKE_INSTALL_PREFIX=/opt
-DCMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu:/usr/share/postgresql/10:/usr/local:/opt
-DWITH_CLIENT_WFS=ON
-DWITH_CLIENT_WMS=ON
-DWITH_CURL=ON
-DWITH_SOS=ON
-DWITH_PHP=OFF
-DWITH_PERL=OFF
-DWITH_RUBY=OFF
-DWITH_JAVA=OFF
-DWITH_CSHARP=ON
-DWITH_PYTHON=OFF
-DWITH_SVGCAIRO=OFF
-DWITH_ORACLESPATIAL=OFF
-DWITH_MSSQL2008=OFF
../ >../configure.out.txt
$ make mapscript","I'll take a look, probably a couple of apt installs will also be required.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5733,2019-01-15T20:05:13Z,2019-03-13T11:05:40Z,2019-03-13T11:05:40Z,MERGED,True,93,43,7,https://github.com/3x0dv5,mapscript_csharp compilable on Linux,4,[],https://github.com/mapserver/mapserver/pull/5733,https://github.com/3x0dv5,4,https://github.com/MapServer/MapServer/pull/5733#issuecomment-454970833,"In reference to
http://osgeo-org.1560.x6.nabble.com/csharp-mapscript-dotnet-core-on-Linux-td5391329.html
and
#5728
##sample usage:
$ mkdir build
$ cd build
$ cmake -DCMAKE_INSTALL_PREFIX=/opt
-DCMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu:/usr/share/postgresql/10:/usr/local:/opt
-DWITH_CLIENT_WFS=ON
-DWITH_CLIENT_WMS=ON
-DWITH_CURL=ON
-DWITH_SOS=ON
-DWITH_PHP=OFF
-DWITH_PERL=OFF
-DWITH_RUBY=OFF
-DWITH_JAVA=OFF
-DWITH_CSHARP=ON
-DWITH_PYTHON=OFF
-DWITH_SVGCAIRO=OFF
-DWITH_ORACLESPATIAL=OFF
-DWITH_MSSQL2008=OFF
../ >../configure.out.txt
$ make mapscript","@geographika what do you think, is this working as expected?
There's that situation that this all run under PHP, but the whole travis.yml would need a bit of refactoring.
These are the changes I would be adding to the already existing PR:
https://github.com/3x0dv5/mapserver/pull/1/files  (this is just the travis build stuff)
Travis result and execution of example applications
https://travis-ci.com/3x0dv5/mapserver/jobs/170971330
export RBENV_ROOT=""/home/travis/.phpenv""
exec ""/home/travis/.phpenv/libexec/rbenv"" exec ""$program"" ""$@""
make[1]: Leaving directory `/home/travis/build/3x0dv5/mapserver'
make[1]: Entering directory `/home/travis/build/3x0dv5/mapserver'
test -d ""build/mapscript/csharp"" && (export CSHARP_MAPSCRIPT_SO=""../../build/mapscript/csharp"" && cd mapscript/csharp && ./run_test.sh)
+cd ../../build/mapscript/csharp
+echo .: Testing shpdump.exe :.
.: Testing shpdump.exe :.
+mono shpdump.exe ../../../tests/point.shp
Shape 0 has 1 part(s)
bounds (0, 51.477222) (0, 51.477222)
Part 0 has 1 points.
0: 0, 51.477222
+echo .: Testing drawmap.exe :.
.: Testing drawmap.exe :.
+mono drawmap.exe ../../../tests/test.map ./map.png
# Map layers 7; Map name = Testing
Layer [0] name: RASTER
Layer [1] name: POLYGON
Layer [2] name: LINE
Layer [3] name: POINT
Layer [4] name: INLINE
Layer [5] name: INLINE-PIXMAP-RGBA
Layer [6] name: INLINE-PIXMAP-PCT
Image URL = ; Image path = 
Image height = 200; width = 200
+echo .: Testing shapeinfo.exe :.
.: Testing shapeinfo.exe :.
+mono shapeinfo.exe ../../../tests/point.shp
ShapeType = point
Num shapes = 1
(xmin, ymin) = (0,51.477222) (xmax, ymax) = (0,51.477222)
+echo .: Testing getbytes.exe :.
.: Testing getbytes.exe :.
+mono getbytes.exe ../../../tests/test.map test_csharp2.png
Drawing map: 'Testing' using imageObj.getBytes
Drawing map: 'Testing' using imageObj.write
+echo .: Testing RFC24.exe :.
.: Testing RFC24.exe :.
+mono RFC24.exe ../../../tests/test.map
Running RFC24
	- testLayerObj PASSED
	- testLayerObj refcount PASSED
	- testLayerObjDestroy precondition PASSED
	- testLayerObjDestroy PASSED
	- testClassObj PASSED
	- testClassObj refcount PASSED
	- testClassObjDestroy precondition PASSED
	- testClassObjDestroy PASSED
	- testInsertLayerObj PASSED
	- testInsertLayerObj refcount PASSED
	- testInsertLayerObjDestroy precondition PASSED
	- testInsertLayerObjDestroy PASSED
	- testRemoveLayerObj PASSED
	- testInsertClassObj precondition PASSED
	- testInsertClassObj PASSED
	- testInsertClassObj refcount PASSED
	- testInsertClassObjDestroy precondition PASSED
	- testInsertClassObjDestroy PASSED
	- testRemoveClassObj PASSED
	- testGetLayerObj PASSED
	- testGetLayerObj refcount PASSED
	- testGetLayerObjDestroy precondition PASSED
	- testGetLayerObjDestroy FAILED
	- testGetLayerObjByName PASSED
	- testGetLayerObjByName refcount PASSED
	- testGetLayerObjByNameDestroy precondition PASSED
	- testGetLayerObjByNameDestroy FAILED
	- testGetClassObj PASSED
	- testGetClassObj refcount PASSED
	- testGetClassObjDestroy precondition PASSED
	- testGetClassObjDestroy FAILED
	- testStyleObj PASSED
	- testStyleObjDestroy PASSED
	- testStyleObjDestroy PASSED
	- testInsertStyleObj precondition PASSED
	- testInsertStyleObj PASSED
	- testInsertStyleObjDestroy precondition PASSED
	- testInsertStyleObjDestroy PASSED
	- testRemoveStyleObj PASSED
	- testGetStyleObj PASSED
	- testGetStyleObjDestroy precondition PASSED
	- testGetStyleObjDestroy FAILED
	- testlegendObj PASSED
	- testreferenceMapObj PASSED
	- testwebObj PASSED
	- testqueryMapObj PASSED
	- testmapObjHashTable PASSED
	- testsymbolSetObj PASSED
	- testimageObj PASSED
     4 tests were FAILED!!!
Finished RFC24
make[1]: Leaving directory `/home/travis/build/3x0dv5/mapserver'
The command ""make -j4 test"" exited with 0.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5733,2019-01-15T20:05:13Z,2019-03-13T11:05:40Z,2019-03-13T11:05:40Z,MERGED,True,93,43,7,https://github.com/3x0dv5,mapscript_csharp compilable on Linux,4,[],https://github.com/mapserver/mapserver/pull/5733,https://github.com/geographika,5,https://github.com/MapServer/MapServer/pull/5733#issuecomment-455272460,"In reference to
http://osgeo-org.1560.x6.nabble.com/csharp-mapscript-dotnet-core-on-Linux-td5391329.html
and
#5728
##sample usage:
$ mkdir build
$ cd build
$ cmake -DCMAKE_INSTALL_PREFIX=/opt
-DCMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu:/usr/share/postgresql/10:/usr/local:/opt
-DWITH_CLIENT_WFS=ON
-DWITH_CLIENT_WMS=ON
-DWITH_CURL=ON
-DWITH_SOS=ON
-DWITH_PHP=OFF
-DWITH_PERL=OFF
-DWITH_RUBY=OFF
-DWITH_JAVA=OFF
-DWITH_CSHARP=ON
-DWITH_PYTHON=OFF
-DWITH_SVGCAIRO=OFF
-DWITH_ORACLESPATIAL=OFF
-DWITH_MSSQL2008=OFF
../ >../configure.out.txt
$ make mapscript","@3x0dv5 - yes the Travis build could do with some refactoring. I had a brief look when adding builds/tests for Python2 and Python3 but couldn't see an easy way round running for each PHP config. For now this is fine - and great to see the sample apps and tests running. Please add to the current pull request.
Do you have a Windows machine setup to see if the same tests are failing on Windows or if it is a mono issue? They all seem to relate to destroying objects.
I can look at adding a similar test/batch file to Appveyor to run on Windows.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5733,2019-01-15T20:05:13Z,2019-03-13T11:05:40Z,2019-03-13T11:05:40Z,MERGED,True,93,43,7,https://github.com/3x0dv5,mapscript_csharp compilable on Linux,4,[],https://github.com/mapserver/mapserver/pull/5733,https://github.com/3x0dv5,6,https://github.com/MapServer/MapServer/pull/5733#issuecomment-455777805,"In reference to
http://osgeo-org.1560.x6.nabble.com/csharp-mapscript-dotnet-core-on-Linux-td5391329.html
and
#5728
##sample usage:
$ mkdir build
$ cd build
$ cmake -DCMAKE_INSTALL_PREFIX=/opt
-DCMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu:/usr/share/postgresql/10:/usr/local:/opt
-DWITH_CLIENT_WFS=ON
-DWITH_CLIENT_WMS=ON
-DWITH_CURL=ON
-DWITH_SOS=ON
-DWITH_PHP=OFF
-DWITH_PERL=OFF
-DWITH_RUBY=OFF
-DWITH_JAVA=OFF
-DWITH_CSHARP=ON
-DWITH_PYTHON=OFF
-DWITH_SVGCAIRO=OFF
-DWITH_ORACLESPATIAL=OFF
-DWITH_MSSQL2008=OFF
../ >../configure.out.txt
$ make mapscript","A build from the mapscript_csharp's ""master man"" :) also shows fails in the rfc24. I dont have a windows build machine setup.
http://build2.gisinternals.com/sdk/build-output/vc15x64-20181229-23-47-48-24-vc15x64-stable-2.4-7-2.txt",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5733,2019-01-15T20:05:13Z,2019-03-13T11:05:40Z,2019-03-13T11:05:40Z,MERGED,True,93,43,7,https://github.com/3x0dv5,mapscript_csharp compilable on Linux,4,[],https://github.com/mapserver/mapserver/pull/5733,https://github.com/3x0dv5,7,https://github.com/MapServer/MapServer/pull/5733#issuecomment-455803633,"In reference to
http://osgeo-org.1560.x6.nabble.com/csharp-mapscript-dotnet-core-on-Linux-td5391329.html
and
#5728
##sample usage:
$ mkdir build
$ cd build
$ cmake -DCMAKE_INSTALL_PREFIX=/opt
-DCMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu:/usr/share/postgresql/10:/usr/local:/opt
-DWITH_CLIENT_WFS=ON
-DWITH_CLIENT_WMS=ON
-DWITH_CURL=ON
-DWITH_SOS=ON
-DWITH_PHP=OFF
-DWITH_PERL=OFF
-DWITH_RUBY=OFF
-DWITH_JAVA=OFF
-DWITH_CSHARP=ON
-DWITH_PYTHON=OFF
-DWITH_SVGCAIRO=OFF
-DWITH_ORACLESPATIAL=OFF
-DWITH_MSSQL2008=OFF
../ >../configure.out.txt
$ make mapscript",@geographika I updated the PR with the build config.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5733,2019-01-15T20:05:13Z,2019-03-13T11:05:40Z,2019-03-13T11:05:40Z,MERGED,True,93,43,7,https://github.com/3x0dv5,mapscript_csharp compilable on Linux,4,[],https://github.com/mapserver/mapserver/pull/5733,https://github.com/geographika,8,https://github.com/MapServer/MapServer/pull/5733#issuecomment-470743400,"In reference to
http://osgeo-org.1560.x6.nabble.com/csharp-mapscript-dotnet-core-on-Linux-td5391329.html
and
#5728
##sample usage:
$ mkdir build
$ cd build
$ cmake -DCMAKE_INSTALL_PREFIX=/opt
-DCMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu:/usr/share/postgresql/10:/usr/local:/opt
-DWITH_CLIENT_WFS=ON
-DWITH_CLIENT_WMS=ON
-DWITH_CURL=ON
-DWITH_SOS=ON
-DWITH_PHP=OFF
-DWITH_PERL=OFF
-DWITH_RUBY=OFF
-DWITH_JAVA=OFF
-DWITH_CSHARP=ON
-DWITH_PYTHON=OFF
-DWITH_SVGCAIRO=OFF
-DWITH_ORACLESPATIAL=OFF
-DWITH_MSSQL2008=OFF
../ >../configure.out.txt
$ make mapscript","@3x0dv5 - if you are happy with the pull request, I think this can be merged in the next couple of days unless there are any more comments.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5733,2019-01-15T20:05:13Z,2019-03-13T11:05:40Z,2019-03-13T11:05:40Z,MERGED,True,93,43,7,https://github.com/3x0dv5,mapscript_csharp compilable on Linux,4,[],https://github.com/mapserver/mapserver/pull/5733,https://github.com/3x0dv5,9,https://github.com/MapServer/MapServer/pull/5733#issuecomment-472170879,"In reference to
http://osgeo-org.1560.x6.nabble.com/csharp-mapscript-dotnet-core-on-Linux-td5391329.html
and
#5728
##sample usage:
$ mkdir build
$ cd build
$ cmake -DCMAKE_INSTALL_PREFIX=/opt
-DCMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu:/usr/share/postgresql/10:/usr/local:/opt
-DWITH_CLIENT_WFS=ON
-DWITH_CLIENT_WMS=ON
-DWITH_CURL=ON
-DWITH_SOS=ON
-DWITH_PHP=OFF
-DWITH_PERL=OFF
-DWITH_RUBY=OFF
-DWITH_JAVA=OFF
-DWITH_CSHARP=ON
-DWITH_PYTHON=OFF
-DWITH_SVGCAIRO=OFF
-DWITH_ORACLESPATIAL=OFF
-DWITH_MSSQL2008=OFF
../ >../configure.out.txt
$ make mapscript","I am OK with this, let's see if anyone else has anything to add",True,{'THUMBS_UP': ['https://github.com/BernardBielecki']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5734,2019-01-20T23:13:35Z,2019-02-02T12:40:27Z,2019-02-02T12:40:27Z,MERGED,True,4,2,1,https://github.com/geographika,Check for MSVC rather than WIN32 when setting compiler flags,1,[],https://github.com/mapserver/mapserver/pull/5734,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5734,"Compiler flags are MSVC specific rather than just Windows, so check for this.","Compiler flags are MSVC specific rather than just Windows, so check for this.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5736,2019-01-21T21:53:56Z,2019-01-21T22:04:31Z,2021-04-26T02:26:39Z,MERGED,True,20,0,1,https://github.com/sdlime,Filter out triangular rings with height (opposite longest base) less …,1,[],https://github.com/mapserver/mapserver/pull/5736,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/5736,…than 1 (#5731).,…than 1 (#5731).,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5737,2019-01-23T17:57:05Z,2019-01-23T18:41:11Z,2019-01-23T18:41:18Z,MERGED,True,1,1,1,https://github.com/sdlime,Make sure computed triangle height is always positive. (#5731),1,[],https://github.com/mapserver/mapserver/pull/5737,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/5737,Fine tuning the fix for #5731 by adding MS_ABS... --Steve,Fine tuning the fix for #5731 by adding MS_ABS... --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5738,2019-01-23T20:01:08Z,2019-01-23T22:02:25Z,2021-04-26T02:26:10Z,MERGED,True,3,3,1,https://github.com/sdlime,Updated writeDimension() to take doubles instead of ints (#5310) as i…,1,[],https://github.com/mapserver/mapserver/pull/5738,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/5738,…nput. Output pattern follows writeNumber().,…nput. Output pattern follows writeNumber().,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5739,2019-01-30T15:10:26Z,2019-01-30T15:33:12Z,2019-01-30T15:33:12Z,MERGED,True,54,26,5,https://github.com/rouault, SLD / Filter encoding: fix again escaping of REGEX special characters (fixes #5658),1,[],https://github.com/mapserver/mapserver/pull/5739,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5739,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5740,2019-01-30T15:12:17Z,2019-03-22T19:54:11Z,2019-03-22T19:54:11Z,MERGED,True,16,16,1,https://github.com/rouault,WMS: apply FILTER (RFC 118) vendor parameter after the CRS parameter is taken into account to avoid extent inconsistencies (found during refs #5658 investigation),1,[],https://github.com/mapserver/mapserver/pull/5740,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5740,"@dmorissette If you want to have a look at f8ed7b2 that modifies a bit RFC118 related functionality. I observed that when the WMS request involves reprojection, msWMSApplyFilter() resulted in incorrect bounding box in the call chain because the map->projection wasn't yet set, but the overall request still worked, because the querymap rendering re-evaluated the request due to the resultcache being empty","@dmorissette If you want to have a look at f8ed7b2 that modifies a bit RFC118 related functionality. I observed that when the WMS request involves reprojection, msWMSApplyFilter() resulted in incorrect bounding box in the call chain because the map->projection wasn't yet set, but the overall request still worked, because the querymap rendering re-evaluated the request due to the resultcache being empty",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5740,2019-01-30T15:12:17Z,2019-03-22T19:54:11Z,2019-03-22T19:54:11Z,MERGED,True,16,16,1,https://github.com/rouault,WMS: apply FILTER (RFC 118) vendor parameter after the CRS parameter is taken into account to avoid extent inconsistencies (found during refs #5658 investigation),1,[],https://github.com/mapserver/mapserver/pull/5740,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5740#issuecomment-475745806,"@dmorissette If you want to have a look at f8ed7b2 that modifies a bit RFC118 related functionality. I observed that when the WMS request involves reprojection, msWMSApplyFilter() resulted in incorrect bounding box in the call chain because the map->projection wasn't yet set, but the overall request still worked, because the querymap rendering re-evaluated the request due to the resultcache being empty","@rouault and @dmorissette, should this be merged? --Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5740,2019-01-30T15:12:17Z,2019-03-22T19:54:11Z,2019-03-22T19:54:11Z,MERGED,True,16,16,1,https://github.com/rouault,WMS: apply FILTER (RFC 118) vendor parameter after the CRS parameter is taken into account to avoid extent inconsistencies (found during refs #5658 investigation),1,[],https://github.com/mapserver/mapserver/pull/5740,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/5740#issuecomment-475747545,"@dmorissette If you want to have a look at f8ed7b2 that modifies a bit RFC118 related functionality. I observed that when the WMS request involves reprojection, msWMSApplyFilter() resulted in incorrect bounding box in the call chain because the map->projection wasn't yet set, but the overall request still worked, because the querymap rendering re-evaluated the request due to the resultcache being empty",+1 from me,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5745,2019-02-19T08:23:18Z,2019-02-19T15:47:38Z,2019-02-19T15:48:08Z,MERGED,True,221,18,1,https://github.com/szekerest,MSSQL: Add support for curve geometries (#5743),3,[],https://github.com/mapserver/mapserver/pull/5745,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5745,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5745,2019-02-19T08:23:18Z,2019-02-19T15:47:38Z,2019-02-19T15:48:08Z,MERGED,True,221,18,1,https://github.com/szekerest,MSSQL: Add support for curve geometries (#5743),3,[],https://github.com/mapserver/mapserver/pull/5745,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5745#issuecomment-465186366,,"@szekerest I merged now, to make it into Steve's 7.2.2 release.  thanks for this!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5747,2019-02-21T21:21:53Z,2019-02-21T21:37:15Z,2021-04-26T02:30:07Z,MERGED,True,4,1,1,https://github.com/sdlime,Added explicit conversion for long attributes for MVT generation.,1,[],https://github.com/mapserver/mapserver/pull/5747,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/5747,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5747,2019-02-21T21:21:53Z,2019-02-21T21:37:15Z,2021-04-26T02:30:07Z,MERGED,True,4,1,1,https://github.com/sdlime,Added explicit conversion for long attributes for MVT generation.,1,[],https://github.com/mapserver/mapserver/pull/5747,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5747#issuecomment-466176904,,Addresses #5726... --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5749,2019-02-22T22:24:22Z,2019-03-12T20:34:04Z,2019-03-12T20:34:04Z,CLOSED,False,3,2,1,https://github.com/3x0dv5,write ScaleDenom to the mapfile,1,[],https://github.com/mapserver/mapserver/pull/5749,https://github.com/3x0dv5,1,https://github.com/MapServer/MapServer/pull/5749,"Hi, do you guys know if there is a reason why the SCALEDENOM is not written?
Also are those two ""deprecated"" correct?
They are shown in the documentation as being still used.","Hi, do you guys know if there is a reason why the SCALEDENOM is not written?
Also are those two ""deprecated"" correct?
They are shown in the documentation as being still used.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5749,2019-02-22T22:24:22Z,2019-03-12T20:34:04Z,2019-03-12T20:34:04Z,CLOSED,False,3,2,1,https://github.com/3x0dv5,write ScaleDenom to the mapfile,1,[],https://github.com/mapserver/mapserver/pull/5749,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5749#issuecomment-470745465,"Hi, do you guys know if there is a reason why the SCALEDENOM is not written?
Also are those two ""deprecated"" correct?
They are shown in the documentation as being still used.","DATAPATTERN and TEMPLATEPATTERN are both now possible within a VALIDATION block. Hopefully there will be a cleanup of the Mapfile syntax for a version 8 release.
In the absence of a SCALEDENOM a default of -1 will be applied?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5749,2019-02-22T22:24:22Z,2019-03-12T20:34:04Z,2019-03-12T20:34:04Z,CLOSED,False,3,2,1,https://github.com/3x0dv5,write ScaleDenom to the mapfile,1,[],https://github.com/mapserver/mapserver/pull/5749,None,3,https://github.com/MapServer/MapServer/pull/5749#issuecomment-470833195,"Hi, do you guys know if there is a reason why the SCALEDENOM is not written?
Also are those two ""deprecated"" correct?
They are shown in the documentation as being still used.","Hi

I note with interest that there may be a cleanup of the Mapfile Syntax in Version8, which prompts a few questions.

1. Currently I am in the process of developing a Map editor, which is based on the xml definitions (sadly a bit out of date), will this file be brought up to date as part of the Version 8 release?
2. Will Version 8 still support xml base map files?
3. Will the syntax for Version 8 alter radically from the
THING
stuff
END
structure?
4. When do you expect Version 8 to be release.

Thanks
…
 On 8 Mar 2019, at 00:16, Seth G ***@***.***> wrote:

 DATAPATTERN and TEMPLATEPATTERN are both now possible within a VALIDATION block. Hopefully there will be a cleanup of the Mapfile syntax for a version 8 release.
 In the absence of a SCALEDENOM a default of -1 will be applied?

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub <#5749 (comment)>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AL7fpCXggtuK2KrH9Dz9uYCe5iJ9mYuHks5vUaLpgaJpZM4bLbFE>.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5749,2019-02-22T22:24:22Z,2019-03-12T20:34:04Z,2019-03-12T20:34:04Z,CLOSED,False,3,2,1,https://github.com/3x0dv5,write ScaleDenom to the mapfile,1,[],https://github.com/mapserver/mapserver/pull/5749,https://github.com/geographika,4,https://github.com/MapServer/MapServer/pull/5749#issuecomment-470840491,"Hi, do you guys know if there is a reason why the SCALEDENOM is not written?
Also are those two ""deprecated"" correct?
They are shown in the documentation as being still used.","@aimdev - the cleanup will involve a RFC which will need to be voted on. However it won't be anything radical - just suggestions to remove some of the keywords which have been deprecated for many releases (some as far back as v4).
If you are looking for a recent description of the Mapfile syntax please take a look at https://github.com/geographika/mappyfile/tree/master/mappyfile/schemas (and a slightly older merged version of these - https://github.com/geographika/mappyfile/blob/master/docs/schemas/mapfile.json ).
The JSON schema can be used for validation or to get keywords, so could form the basis of an editor. There is a possibility to export to XSD so it might be possible to update the XSD schema from this.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5749,2019-02-22T22:24:22Z,2019-03-12T20:34:04Z,2019-03-12T20:34:04Z,CLOSED,False,3,2,1,https://github.com/3x0dv5,write ScaleDenom to the mapfile,1,[],https://github.com/mapserver/mapserver/pull/5749,None,5,https://github.com/MapServer/MapServer/pull/5749#issuecomment-470848420,"Hi, do you guys know if there is a reason why the SCALEDENOM is not written?
Also are those two ""deprecated"" correct?
They are shown in the documentation as being still used.","Hi

Thanks for the pointers.
Will the json files referred to be the maintained versions in the future?, as I have been working to the xml in the mapserver repository.
I will need to convert them any way to xml for to create the java classes required for the generator. (or find a way to directly convert, either way not a big problem)

Thanks
…
 On 8 Mar 2019, at 08:01, Seth G ***@***.***> wrote:

 https://github.com/geographika/mappyfile/tree/master/mappyfile/schemas <https://github.com/geographika/mappyfile/tree/master/mappyfile/schemas>",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5749,2019-02-22T22:24:22Z,2019-03-12T20:34:04Z,2019-03-12T20:34:04Z,CLOSED,False,3,2,1,https://github.com/3x0dv5,write ScaleDenom to the mapfile,1,[],https://github.com/mapserver/mapserver/pull/5749,https://github.com/3x0dv5,6,https://github.com/MapServer/MapServer/pull/5749#issuecomment-472169830,"Hi, do you guys know if there is a reason why the SCALEDENOM is not written?
Also are those two ""deprecated"" correct?
They are shown in the documentation as being still used.","hey. I am going to pull the PR out, looked at it a second time now after a while and actually doesn't make much sense especially the ScaleDenom to -1 won't work well.
looking at https://github.com/mapserver/mapserver/blob/d4875f9be5e18c3c25055f9898d0caef590bf112/mapfile.c#L6568
I realize that setting the scaledenom to -1 is just plain and simple bad.
if(getDouble(&(map->scaledenom)) == -1) return MS_FAILURE;",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5753,2019-02-27T15:27:35Z,2021-01-20T23:00:19Z,2021-01-20T23:00:20Z,CLOSED,False,42268,24055,1040,https://github.com/szekerest,Fix label point calculation (#5752),876,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/5753,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5753,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5753,2019-02-27T15:27:35Z,2021-01-20T23:00:19Z,2021-01-20T23:00:20Z,CLOSED,False,42268,24055,1040,https://github.com/szekerest,Fix label point calculation (#5752),876,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/5753,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5753#issuecomment-467925513,,What is/was the visual impact of this change?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5753,2019-02-27T15:27:35Z,2021-01-20T23:00:19Z,2021-01-20T23:00:20Z,CLOSED,False,42268,24055,1040,https://github.com/szekerest,Fix label point calculation (#5752),876,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/5753,https://github.com/szekerest,3,https://github.com/MapServer/MapServer/pull/5753#issuecomment-467957788,,"@sdlime If we add multiple newlines to the end of the text, it is misaligned vertically when ANGLE=0
For example:
LABEL
        FONT ""arial""
        SIZE 16
        OFFSET 0 0
        POSITION CC
        SHADOWSIZE 1 1
        TEXT ""[PropID_0]*[PropID_1]*[PropID_2]*[PropID_3]*[PropID_4]*[PropID_5]*[PropID_6]*[PropID_7]*[PropID_8]""
        WRAP '*'
      END # LABEL

Where the actual values of the properties (ie. PropID_3...PropID_7) are missing. It works properly when ANGLE != 0",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5753,2019-02-27T15:27:35Z,2021-01-20T23:00:19Z,2021-01-20T23:00:20Z,CLOSED,False,42268,24055,1040,https://github.com/szekerest,Fix label point calculation (#5752),876,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/5753,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/5753#issuecomment-468013656,,+1 then once travis-ci passes... --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5753,2019-02-27T15:27:35Z,2021-01-20T23:00:19Z,2021-01-20T23:00:20Z,CLOSED,False,42268,24055,1040,https://github.com/szekerest,Fix label point calculation (#5752),876,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/5753,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/5753#issuecomment-676569193,,"@szekerest can you rebase this against master, instead of branch-7-2 ?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5753,2019-02-27T15:27:35Z,2021-01-20T23:00:19Z,2021-01-20T23:00:20Z,CLOSED,False,42268,24055,1040,https://github.com/szekerest,Fix label point calculation (#5752),876,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/5753,https://github.com/rouault,6,https://github.com/MapServer/MapServer/pull/5753#issuecomment-764009105,,Superseded per #6213,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5754,2019-02-27T23:47:46Z,2020-02-17T20:13:50Z,2020-02-17T20:18:21Z,MERGED,True,1,1,1,https://github.com/geographika,Change DWITH_POINT_Z_M to be ON by default,1,[],https://github.com/mapserver/mapserver/pull/5754,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5754,See #5456,See #5456,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5754,2019-02-27T23:47:46Z,2020-02-17T20:13:50Z,2020-02-17T20:18:21Z,MERGED,True,1,1,1,https://github.com/geographika,Change DWITH_POINT_Z_M to be ON by default,1,[],https://github.com/mapserver/mapserver/pull/5754,https://github.com/szekerest,2,https://github.com/MapServer/MapServer/pull/5754#issuecomment-468268495,See #5456,"@geographika I'd prefer to get rid of WITH_POINT_ZM from the code entirely, especially from mapprimitive.h, because if we leave this optional, then we should make sure the SWIG interface files were also generated with this setting enabled, otherwise the interface will not be aligned with the core mapserver. I think neither of the languages take this into account (at least for the cmake build) which I think may lead to memory corruption issues when WITH_POINT_ZM is enabled.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5754,2019-02-27T23:47:46Z,2020-02-17T20:13:50Z,2020-02-17T20:18:21Z,MERGED,True,1,1,1,https://github.com/geographika,Change DWITH_POINT_Z_M to be ON by default,1,[],https://github.com/mapserver/mapserver/pull/5754,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5754#issuecomment-468284294,See #5456,"@szekerest - sounds good. It came up as an issue for me when testing the Python MapScript bindings against the builds at http://gisinternals.com/ - by default WITH_POINT_ZM is OFF, but tests could pass and fail depending on what this setting was.
Looking at the discussions at #5456 it seems it shuold be ok to switch to using POINT_Z_M throughout the codebase. There are ~28 files affected though - https://github.com/mapserver/mapserver/search?q=USE_POINT_Z_M so would be a signficiant change. One for a vote on the mailing list?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5754,2019-02-27T23:47:46Z,2020-02-17T20:13:50Z,2020-02-17T20:18:21Z,MERGED,True,1,1,1,https://github.com/geographika,Change DWITH_POINT_Z_M to be ON by default,1,[],https://github.com/mapserver/mapserver/pull/5754,https://github.com/szekerest,4,https://github.com/MapServer/MapServer/pull/5754#issuecomment-468285111,See #5456,yes it would be reasonable to make a motion on the list,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5754,2019-02-27T23:47:46Z,2020-02-17T20:13:50Z,2020-02-17T20:18:21Z,MERGED,True,1,1,1,https://github.com/geographika,Change DWITH_POINT_Z_M to be ON by default,1,[],https://github.com/mapserver/mapserver/pull/5754,https://github.com/geographika,5,https://github.com/MapServer/MapServer/pull/5754#issuecomment-468606979,See #5456,Link to mailing list post for reference: https://lists.osgeo.org/pipermail/mapserver-dev/2019-February/015610.html,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5754,2019-02-27T23:47:46Z,2020-02-17T20:13:50Z,2020-02-17T20:18:21Z,MERGED,True,1,1,1,https://github.com/geographika,Change DWITH_POINT_Z_M to be ON by default,1,[],https://github.com/mapserver/mapserver/pull/5754,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/5754#issuecomment-587143328,See #5456,"Merging this, as there were no objections when this was discussed back in 2018, and also in 2019.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5754,2019-02-27T23:47:46Z,2020-02-17T20:13:50Z,2020-02-17T20:18:21Z,MERGED,True,1,1,1,https://github.com/geographika,Change DWITH_POINT_Z_M to be ON by default,1,[],https://github.com/mapserver/mapserver/pull/5754,https://github.com/jmckenna,7,https://github.com/MapServer/MapServer/pull/5754#issuecomment-587144607,See #5456,"thanks for pushing this @geographika !
(I enabled this for MS4W users by default back in 2018)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5756,2019-03-03T14:52:03Z,2019-03-04T11:08:52Z,2019-03-04T14:05:50Z,MERGED,True,2,2,1,https://github.com/szekerest,Add layer name to the error message of the missing fields in msOGRLay…,1,[],https://github.com/mapserver/mapserver/pull/5756,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5756,…erInitItemInfo (#5755),…erInitItemInfo (#5755),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5756,2019-03-03T14:52:03Z,2019-03-04T11:08:52Z,2019-03-04T14:05:50Z,MERGED,True,2,2,1,https://github.com/szekerest,Add layer name to the error message of the missing fields in msOGRLay…,1,[],https://github.com/mapserver/mapserver/pull/5756,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5756#issuecomment-469213999,…erInitItemInfo (#5755),nice change @szekerest    thanks!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5757,2019-03-04T16:09:52Z,2019-03-13T11:04:48Z,2019-03-13T11:04:48Z,MERGED,True,27,20,4,https://github.com/ejn,Fix PHP7 build problems with 7.3,2,[],https://github.com/mapserver/mapserver/pull/5757,https://github.com/ejn,1,https://github.com/MapServer/MapServer/pull/5757,Fixes some problems encountered building (old-school) PHP-Mapscript with PHP 7.3,Fixes some problems encountered building (old-school) PHP-Mapscript with PHP 7.3,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5757,2019-03-04T16:09:52Z,2019-03-13T11:04:48Z,2019-03-13T11:04:48Z,MERGED,True,27,20,4,https://github.com/ejn,Fix PHP7 build problems with 7.3,2,[],https://github.com/mapserver/mapserver/pull/5757,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5757#issuecomment-470742788,Fixes some problems encountered building (old-school) PHP-Mapscript with PHP 7.3,"@ejn - above request looks good to me as far as I can tell. I'll merge in a couple of days in case anyone wants to add anything.
Do you have experience with both the ""old"" and ""new"" (SWIG) PHP MapScripts? Are there any features missing in one but not the other? Any details you may have would be good to decide on a future roadmap.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5757,2019-03-04T16:09:52Z,2019-03-13T11:04:48Z,2019-03-13T11:04:48Z,MERGED,True,27,20,4,https://github.com/ejn,Fix PHP7 build problems with 7.3,2,[],https://github.com/mapserver/mapserver/pull/5757,https://github.com/ejn,3,https://github.com/MapServer/MapServer/pull/5757#issuecomment-470819403,Fixes some problems encountered building (old-school) PHP-Mapscript with PHP 7.3,"@geographika sorry, I've not looked at the PHP-NG MapScript yet at all. Medium-term we'll be looking at moving across to it on the assumption that it is probably (i) more complete and consistent and (ii) likely to be better-maintained in future, but short-term we're moving to PHP7 with the old MapScript rather than try taking two steps at once.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5764,2019-03-09T21:32:01Z,2019-03-11T14:36:45Z,2019-03-11T14:36:54Z,MERGED,True,10,4,4,https://github.com/szekerest,Fix crash on corrupt qix files (#2362),3,[],https://github.com/mapserver/mapserver/pull/5764,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5764,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5764,2019-03-09T21:32:01Z,2019-03-11T14:36:45Z,2019-03-11T14:36:54Z,MERGED,True,10,4,4,https://github.com/szekerest,Fix crash on corrupt qix files (#2362),3,[],https://github.com/mapserver/mapserver/pull/5764,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5764#issuecomment-471293950,,Looks good to me,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5764,2019-03-09T21:32:01Z,2019-03-11T14:36:45Z,2019-03-11T14:36:54Z,MERGED,True,10,4,4,https://github.com/szekerest,Fix crash on corrupt qix files (#2362),3,[],https://github.com/mapserver/mapserver/pull/5764,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/5764#issuecomment-471316966,,looks good here also,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5764,2019-03-09T21:32:01Z,2019-03-11T14:36:45Z,2019-03-11T14:36:54Z,MERGED,True,10,4,4,https://github.com/szekerest,Fix crash on corrupt qix files (#2362),3,[],https://github.com/mapserver/mapserver/pull/5764,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/5764#issuecomment-471530569,,+1,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5765,2019-03-13T00:06:22Z,2019-03-25T21:19:14Z,2019-03-25T21:19:14Z,MERGED,True,362,65,8,https://github.com/geographika,Add GeoInterface to Python MapScript Classes,12,[],https://github.com/mapserver/mapserver/pull/5765,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5765,"This pull request adds a __geo_interface__ property for PointObj, LineObj, and ShapeObj.
See https://gist.github.com/sgillies/2217756 for details about the geo_interface.
It allows a GeoJSON-like interface for MapScript objects to help with interoperability with other geospatial Python libraries.
        res = layer.getResult(0)
        s = layer.getShape(res)
        s.itemdefinitions = l.getItemDefinitions()
        print(s.__geo_interface__)
Results in:
          {
            'geometry': {
                'type': 'Polygon',
                'coordinates': [[(-0.25, 51.227222), (-0.25, 51.727222), (0.25, 51.727222),
                                 (0.25, 51.227222), (-0.25, 51.227222)]]
            },
            'type': 'Feature',
            'bbox': (-0.25, 51.227222, 0.25, 51.727222),
            'properties': {'FNAME': 'A Polygon', 'FID': 1}
         }

A new MapScript method getItemDefinitions has been added to the layerObj.
Returns the requested item's field type.
A layer must be open to retrieve the item definition. 

Pass in the attribute index to retrieve the type. The 
layer's numitems property contains the number of items 
available, and the first item is index zero.

This allows the type of an item (field) to be returned as a string e.g. Character, Integer, Real (these are all GML data types as listed at https://mapserver.org/ogc/wfs_server.html).
Types are set on fields in a layer through gml_[item name]_type METADATA settings, or using ""gml_types""   ""auto""
These types can then be set as a property on a shapeObj as shown in the example above so that item values are returned in the GeoJSON output as ints, floats, or strings.
A review of the C code in mapscript/swiginc/layer.i would be very much appreciated.","This pull request adds a __geo_interface__ property for PointObj, LineObj, and ShapeObj.
See https://gist.github.com/sgillies/2217756 for details about the geo_interface.
It allows a GeoJSON-like interface for MapScript objects to help with interoperability with other geospatial Python libraries.
        res = layer.getResult(0)
        s = layer.getShape(res)
        s.itemdefinitions = l.getItemDefinitions()
        print(s.__geo_interface__)
Results in:
          {
            'geometry': {
                'type': 'Polygon',
                'coordinates': [[(-0.25, 51.227222), (-0.25, 51.727222), (0.25, 51.727222),
                                 (0.25, 51.227222), (-0.25, 51.227222)]]
            },
            'type': 'Feature',
            'bbox': (-0.25, 51.227222, 0.25, 51.727222),
            'properties': {'FNAME': 'A Polygon', 'FID': 1}
         }

A new MapScript method getItemDefinitions has been added to the layerObj.
Returns the requested item's field type.
A layer must be open to retrieve the item definition. 

Pass in the attribute index to retrieve the type. The 
layer's numitems property contains the number of items 
available, and the first item is index zero.

This allows the type of an item (field) to be returned as a string e.g. Character, Integer, Real (these are all GML data types as listed at https://mapserver.org/ogc/wfs_server.html).
Types are set on fields in a layer through gml_[item name]_type METADATA settings, or using ""gml_types""   ""auto""
These types can then be set as a property on a shapeObj as shown in the example above so that item values are returned in the GeoJSON output as ints, floats, or strings.
A review of the C code in mapscript/swiginc/layer.i would be very much appreciated.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5765,2019-03-13T00:06:22Z,2019-03-25T21:19:14Z,2019-03-25T21:19:14Z,MERGED,True,362,65,8,https://github.com/geographika,Add GeoInterface to Python MapScript Classes,12,[],https://github.com/mapserver/mapserver/pull/5765,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5765#issuecomment-475340545,"This pull request adds a __geo_interface__ property for PointObj, LineObj, and ShapeObj.
See https://gist.github.com/sgillies/2217756 for details about the geo_interface.
It allows a GeoJSON-like interface for MapScript objects to help with interoperability with other geospatial Python libraries.
        res = layer.getResult(0)
        s = layer.getShape(res)
        s.itemdefinitions = l.getItemDefinitions()
        print(s.__geo_interface__)
Results in:
          {
            'geometry': {
                'type': 'Polygon',
                'coordinates': [[(-0.25, 51.227222), (-0.25, 51.727222), (0.25, 51.727222),
                                 (0.25, 51.227222), (-0.25, 51.227222)]]
            },
            'type': 'Feature',
            'bbox': (-0.25, 51.227222, 0.25, 51.727222),
            'properties': {'FNAME': 'A Polygon', 'FID': 1}
         }

A new MapScript method getItemDefinitions has been added to the layerObj.
Returns the requested item's field type.
A layer must be open to retrieve the item definition. 

Pass in the attribute index to retrieve the type. The 
layer's numitems property contains the number of items 
available, and the first item is index zero.

This allows the type of an item (field) to be returned as a string e.g. Character, Integer, Real (these are all GML data types as listed at https://mapserver.org/ogc/wfs_server.html).
Types are set on fields in a layer through gml_[item name]_type METADATA settings, or using ""gml_types""   ""auto""
These types can then be set as a property on a shapeObj as shown in the example above so that item values are returned in the GeoJSON output as ints, floats, or strings.
A review of the C code in mapscript/swiginc/layer.i would be very much appreciated.",I'll review today...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5765,2019-03-13T00:06:22Z,2019-03-25T21:19:14Z,2019-03-25T21:19:14Z,MERGED,True,362,65,8,https://github.com/geographika,Add GeoInterface to Python MapScript Classes,12,[],https://github.com/mapserver/mapserver/pull/5765,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5765#issuecomment-475687108,"This pull request adds a __geo_interface__ property for PointObj, LineObj, and ShapeObj.
See https://gist.github.com/sgillies/2217756 for details about the geo_interface.
It allows a GeoJSON-like interface for MapScript objects to help with interoperability with other geospatial Python libraries.
        res = layer.getResult(0)
        s = layer.getShape(res)
        s.itemdefinitions = l.getItemDefinitions()
        print(s.__geo_interface__)
Results in:
          {
            'geometry': {
                'type': 'Polygon',
                'coordinates': [[(-0.25, 51.227222), (-0.25, 51.727222), (0.25, 51.727222),
                                 (0.25, 51.227222), (-0.25, 51.227222)]]
            },
            'type': 'Feature',
            'bbox': (-0.25, 51.227222, 0.25, 51.727222),
            'properties': {'FNAME': 'A Polygon', 'FID': 1}
         }

A new MapScript method getItemDefinitions has been added to the layerObj.
Returns the requested item's field type.
A layer must be open to retrieve the item definition. 

Pass in the attribute index to retrieve the type. The 
layer's numitems property contains the number of items 
available, and the first item is index zero.

This allows the type of an item (field) to be returned as a string e.g. Character, Integer, Real (these are all GML data types as listed at https://mapserver.org/ogc/wfs_server.html).
Types are set on fields in a layer through gml_[item name]_type METADATA settings, or using ""gml_types""   ""auto""
These types can then be set as a property on a shapeObj as shown in the example above so that item values are returned in the GeoJSON output as ints, floats, or strings.
A review of the C code in mapscript/swiginc/layer.i would be very much appreciated.",@sdlime - it is mainly the C function at https://github.com/mapserver/mapserver/pull/5765/files#diff-deee1b0c6f077b32fa05657f1799802c that it would be good to review. The Python extension code and tests should be fine. I changed the approach from returning a gmlItemDefinition which involved adding SWIG guards everywhere in the mapows.h and simply return the data type name as a copied string.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5765,2019-03-13T00:06:22Z,2019-03-25T21:19:14Z,2019-03-25T21:19:14Z,MERGED,True,362,65,8,https://github.com/geographika,Add GeoInterface to Python MapScript Classes,12,[],https://github.com/mapserver/mapserver/pull/5765,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/5765#issuecomment-475691129,"This pull request adds a __geo_interface__ property for PointObj, LineObj, and ShapeObj.
See https://gist.github.com/sgillies/2217756 for details about the geo_interface.
It allows a GeoJSON-like interface for MapScript objects to help with interoperability with other geospatial Python libraries.
        res = layer.getResult(0)
        s = layer.getShape(res)
        s.itemdefinitions = l.getItemDefinitions()
        print(s.__geo_interface__)
Results in:
          {
            'geometry': {
                'type': 'Polygon',
                'coordinates': [[(-0.25, 51.227222), (-0.25, 51.727222), (0.25, 51.727222),
                                 (0.25, 51.227222), (-0.25, 51.227222)]]
            },
            'type': 'Feature',
            'bbox': (-0.25, 51.227222, 0.25, 51.727222),
            'properties': {'FNAME': 'A Polygon', 'FID': 1}
         }

A new MapScript method getItemDefinitions has been added to the layerObj.
Returns the requested item's field type.
A layer must be open to retrieve the item definition. 

Pass in the attribute index to retrieve the type. The 
layer's numitems property contains the number of items 
available, and the first item is index zero.

This allows the type of an item (field) to be returned as a string e.g. Character, Integer, Real (these are all GML data types as listed at https://mapserver.org/ogc/wfs_server.html).
Types are set on fields in a layer through gml_[item name]_type METADATA settings, or using ""gml_types""   ""auto""
These types can then be set as a property on a shapeObj as shown in the example above so that item values are returned in the GeoJSON output as ints, floats, or strings.
A review of the C code in mapscript/swiginc/layer.i would be very much appreciated.","@sdlime - it is mainly the C function at https://github.com/mapserver/mapserver/pull/5765/files#diff-deee1b0c6f077b32fa05657f1799802c that it would be good to review. The Python extension code and tests should be fine. I changed the approach from returning a gmlItemDefinition which involved adding SWIG guards everywhere in the mapows.h and simply return the data type name as a copied string.

@geographika Sorry, sorry... Should check item_list is not NULL before accessing it since msGMLItems() can return if it has issues allocating memory.  I think it's fine otherwise.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5765,2019-03-13T00:06:22Z,2019-03-25T21:19:14Z,2019-03-25T21:19:14Z,MERGED,True,362,65,8,https://github.com/geographika,Add GeoInterface to Python MapScript Classes,12,[],https://github.com/mapserver/mapserver/pull/5765,https://github.com/geographika,5,https://github.com/MapServer/MapServer/pull/5765#issuecomment-475903917,"This pull request adds a __geo_interface__ property for PointObj, LineObj, and ShapeObj.
See https://gist.github.com/sgillies/2217756 for details about the geo_interface.
It allows a GeoJSON-like interface for MapScript objects to help with interoperability with other geospatial Python libraries.
        res = layer.getResult(0)
        s = layer.getShape(res)
        s.itemdefinitions = l.getItemDefinitions()
        print(s.__geo_interface__)
Results in:
          {
            'geometry': {
                'type': 'Polygon',
                'coordinates': [[(-0.25, 51.227222), (-0.25, 51.727222), (0.25, 51.727222),
                                 (0.25, 51.227222), (-0.25, 51.227222)]]
            },
            'type': 'Feature',
            'bbox': (-0.25, 51.227222, 0.25, 51.727222),
            'properties': {'FNAME': 'A Polygon', 'FID': 1}
         }

A new MapScript method getItemDefinitions has been added to the layerObj.
Returns the requested item's field type.
A layer must be open to retrieve the item definition. 

Pass in the attribute index to retrieve the type. The 
layer's numitems property contains the number of items 
available, and the first item is index zero.

This allows the type of an item (field) to be returned as a string e.g. Character, Integer, Real (these are all GML data types as listed at https://mapserver.org/ogc/wfs_server.html).
Types are set on fields in a layer through gml_[item name]_type METADATA settings, or using ""gml_types""   ""auto""
These types can then be set as a property on a shapeObj as shown in the example above so that item values are returned in the GeoJSON output as ints, floats, or strings.
A review of the C code in mapscript/swiginc/layer.i would be very much appreciated.","@sdlime - thanks for the review. I've added in the check. I presume if item_list is NULL then there is no need to call msGMLFreeItems(item_list); and that line can stay in the If block?
If you're happy I can merge so it is included in the 7.4 release.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5765,2019-03-13T00:06:22Z,2019-03-25T21:19:14Z,2019-03-25T21:19:14Z,MERGED,True,362,65,8,https://github.com/geographika,Add GeoInterface to Python MapScript Classes,12,[],https://github.com/mapserver/mapserver/pull/5765,https://github.com/sdlime,6,https://github.com/MapServer/MapServer/pull/5765#issuecomment-476329426,"This pull request adds a __geo_interface__ property for PointObj, LineObj, and ShapeObj.
See https://gist.github.com/sgillies/2217756 for details about the geo_interface.
It allows a GeoJSON-like interface for MapScript objects to help with interoperability with other geospatial Python libraries.
        res = layer.getResult(0)
        s = layer.getShape(res)
        s.itemdefinitions = l.getItemDefinitions()
        print(s.__geo_interface__)
Results in:
          {
            'geometry': {
                'type': 'Polygon',
                'coordinates': [[(-0.25, 51.227222), (-0.25, 51.727222), (0.25, 51.727222),
                                 (0.25, 51.227222), (-0.25, 51.227222)]]
            },
            'type': 'Feature',
            'bbox': (-0.25, 51.227222, 0.25, 51.727222),
            'properties': {'FNAME': 'A Polygon', 'FID': 1}
         }

A new MapScript method getItemDefinitions has been added to the layerObj.
Returns the requested item's field type.
A layer must be open to retrieve the item definition. 

Pass in the attribute index to retrieve the type. The 
layer's numitems property contains the number of items 
available, and the first item is index zero.

This allows the type of an item (field) to be returned as a string e.g. Character, Integer, Real (these are all GML data types as listed at https://mapserver.org/ogc/wfs_server.html).
Types are set on fields in a layer through gml_[item name]_type METADATA settings, or using ""gml_types""   ""auto""
These types can then be set as a property on a shapeObj as shown in the example above so that item values are returned in the GeoJSON output as ints, floats, or strings.
A review of the C code in mapscript/swiginc/layer.i would be very much appreciated.","@sdlime - thanks for the review. I've added in the check. I presume if item_list is NULL then there is no need to call msGMLFreeItems(item_list); and that line can stay in the If block?
If you're happy I can merge so it is included in the 7.4 release.

Looks good to me - merge on!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5769,2019-03-27T22:48:04Z,2019-03-28T23:02:15Z,2019-03-28T23:02:15Z,MERGED,True,360,332,8,https://github.com/geographika,Update Python MapScript examples,7,[],https://github.com/mapserver/mapserver/pull/5769,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5769,"This pull request updates the existing Python MapScript examples, makes them py2 and py3 compatible, lints all code, and includes them in the examples module of the Python MapScript library.
The examples are now run as part of the CMake wheel building process, to ensure they continue to work in the future (there are exectuted on each Travis and Appveyor build).
The geocode_addresses.py example was removed for 2 reasons:

it relies on an external library dbfpy http://pypi.python.org/pypi/dbfpy/2.2.1
it requires access to http://www.geocoder.ca/ - this may cause intermittent test failures

wxs.py - was moved into the examples folder, I'm unsure why it was in a different folder.
Each of the example can now be easily run as a script from the command line as follows:
python -m mapscript.examples.wxs test.map
python -m mapscript.examples.shpdump polygon.shp
python -m mapscript.examples.shpinfo polygon.shp
python -m mapscript.examples.project_csv cities.csv 2 1 EPSG:4326 EPSG:3857","This pull request updates the existing Python MapScript examples, makes them py2 and py3 compatible, lints all code, and includes them in the examples module of the Python MapScript library.
The examples are now run as part of the CMake wheel building process, to ensure they continue to work in the future (there are exectuted on each Travis and Appveyor build).
The geocode_addresses.py example was removed for 2 reasons:

it relies on an external library dbfpy http://pypi.python.org/pypi/dbfpy/2.2.1
it requires access to http://www.geocoder.ca/ - this may cause intermittent test failures

wxs.py - was moved into the examples folder, I'm unsure why it was in a different folder.
Each of the example can now be easily run as a script from the command line as follows:
python -m mapscript.examples.wxs test.map
python -m mapscript.examples.shpdump polygon.shp
python -m mapscript.examples.shpinfo polygon.shp
python -m mapscript.examples.project_csv cities.csv 2 1 EPSG:4326 EPSG:3857",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5771,2019-03-30T07:50:39Z,2019-03-30T20:14:11Z,2019-03-30T20:20:41Z,MERGED,True,1,1,1,https://github.com/sebastic,Install PHP MapScript.,1,[],https://github.com/mapserver/mapserver/pull/5771,https://github.com/sebastic,1,https://github.com/MapServer/MapServer/pull/5771,Fixes #5770,Fixes #5770,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5772,2019-03-30T07:55:40Z,2019-03-30T12:26:33Z,2019-03-30T12:51:03Z,MERGED,True,1,1,1,https://github.com/sebastic,Fix spelling errors,1,[],https://github.com/mapserver/mapserver/pull/5772,https://github.com/sebastic,1,https://github.com/MapServer/MapServer/pull/5772,"The lintian QA tool reported a spelling error for MapServer 7.4.0-beta1:

sould -> should","The lintian QA tool reported a spelling error for MapServer 7.4.0-beta1:

sould -> should",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5774,2019-03-30T08:12:27Z,2019-03-30T12:20:06Z,2019-03-30T12:50:27Z,MERGED,True,8,0,4,https://github.com/sebastic,Add shebang to Python MapScript example scripts.,1,[],https://github.com/mapserver/mapserver/pull/5774,https://github.com/sebastic,1,https://github.com/MapServer/MapServer/pull/5774,Fixes #5773,Fixes #5773,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5774,2019-03-30T08:12:27Z,2019-03-30T12:20:06Z,2019-03-30T12:50:27Z,MERGED,True,8,0,4,https://github.com/sebastic,Add shebang to Python MapScript example scripts.,1,[],https://github.com/mapserver/mapserver/pull/5774,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5774#issuecomment-478240746,Fixes #5773,Thanks @sebastic,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5776,2019-03-30T09:58:58Z,2019-03-30T20:14:35Z,2019-03-30T20:21:20Z,MERGED,True,6,6,1,https://github.com/sebastic,Fix variables set by find_package(PHP).,1,[],https://github.com/mapserver/mapserver/pull/5776,https://github.com/sebastic,1,https://github.com/MapServer/MapServer/pull/5776,Enabling PHPNG causes the configure target to fail because the PHP_FOUND_INCLUDE_PATH is used instead of PHP_INCLUDE_PATH as set by find_package(PHP).,Enabling PHPNG causes the configure target to fail because the PHP_FOUND_INCLUDE_PATH is used instead of PHP_INCLUDE_PATH as set by find_package(PHP).,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5778,2019-04-04T02:47:04Z,2019-04-16T20:44:02Z,2019-04-21T17:32:05Z,MERGED,True,178,49,10,https://github.com/AndyColson,add perl to travis,6,[],https://github.com/mapserver/mapserver/pull/5778,https://github.com/AndyColson,1,https://github.com/MapServer/MapServer/pull/5778,"A start just to see if it'll build and test.  Only one test and one example so far.  If this goes ok, then I'll add more.","A start just to see if it'll build and test.  Only one test and one example so far.  If this goes ok, then I'll add more.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5778,2019-04-04T02:47:04Z,2019-04-16T20:44:02Z,2019-04-21T17:32:05Z,MERGED,True,178,49,10,https://github.com/AndyColson,add perl to travis,6,[],https://github.com/mapserver/mapserver/pull/5778,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5778#issuecomment-479875795,"A start just to see if it'll build and test.  Only one test and one example so far.  If this goes ok, then I'll add more.",@AndyColson - looks great so far. You can see build and test output at https://travis-ci.org/mapserver/mapserver/jobs/515505933,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5778,2019-04-04T02:47:04Z,2019-04-16T20:44:02Z,2019-04-21T17:32:05Z,MERGED,True,178,49,10,https://github.com/AndyColson,add perl to travis,6,[],https://github.com/mapserver/mapserver/pull/5778,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/5778#issuecomment-481445531,"A start just to see if it'll build and test.  Only one test and one example so far.  If this goes ok, then I'll add more.",Great addition... Should this be completed and merged as part of beta2?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5778,2019-04-04T02:47:04Z,2019-04-16T20:44:02Z,2019-04-21T17:32:05Z,MERGED,True,178,49,10,https://github.com/AndyColson,add perl to travis,6,[],https://github.com/mapserver/mapserver/pull/5778,https://github.com/AndyColson,4,https://github.com/MapServer/MapServer/pull/5778#issuecomment-483030499,"A start just to see if it'll build and test.  Only one test and one example so far.  If this goes ok, then I'll add more.","I have two small swig changes I'd like to make:

enable msIO_getAndStripStdoutBufferMimeHeaders for everything. (why is it python only?)
clean up compiler warning in image.i (and also return null on error, rather than broken object)

Would that be ok to check in?  If I check it in, and you don't like it, I dunno how to un-check-out.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5778,2019-04-04T02:47:04Z,2019-04-16T20:44:02Z,2019-04-21T17:32:05Z,MERGED,True,178,49,10,https://github.com/AndyColson,add perl to travis,6,[],https://github.com/mapserver/mapserver/pull/5778,https://github.com/AndyColson,5,https://github.com/MapServer/MapServer/pull/5778#issuecomment-483036717,"A start just to see if it'll build and test.  Only one test and one example so far.  If this goes ok, then I'll add more.","Ahh, bummer, my merge seems to have picked up the version change in CMakeLists.txt.  How do I undo that?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5778,2019-04-04T02:47:04Z,2019-04-16T20:44:02Z,2019-04-21T17:32:05Z,MERGED,True,178,49,10,https://github.com/AndyColson,add perl to travis,6,[],https://github.com/mapserver/mapserver/pull/5778,https://github.com/geographika,6,https://github.com/MapServer/MapServer/pull/5778#issuecomment-483829771,"A start just to see if it'll build and test.  Only one test and one example so far.  If this goes ok, then I'll add more.",@AndyColson - is this pull request ready to merge to a new 7.4-beta release?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5778,2019-04-04T02:47:04Z,2019-04-16T20:44:02Z,2019-04-21T17:32:05Z,MERGED,True,178,49,10,https://github.com/AndyColson,add perl to travis,6,[],https://github.com/mapserver/mapserver/pull/5778,https://github.com/AndyColson,7,https://github.com/MapServer/MapServer/pull/5778#issuecomment-483830931,"A start just to see if it'll build and test.  Only one test and one example so far.  If this goes ok, then I'll add more.",Yes.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5778,2019-04-04T02:47:04Z,2019-04-16T20:44:02Z,2019-04-21T17:32:05Z,MERGED,True,178,49,10,https://github.com/AndyColson,add perl to travis,6,[],https://github.com/mapserver/mapserver/pull/5778,https://github.com/geographika,8,https://github.com/MapServer/MapServer/pull/5778#issuecomment-483835859,"A start just to see if it'll build and test.  Only one test and one example so far.  If this goes ok, then I'll add more.",@AndyColson - thanks very much for setting this up,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5780,2019-04-06T10:15:19Z,2019-04-06T10:53:06Z,2019-04-06T10:53:06Z,MERGED,True,7,1,1,https://github.com/geographika,Update SWIG to 3.0.12,1,[],https://github.com/mapserver/mapserver/pull/5780,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5780,See #5779 - compile a new version of SWIG on Travis until the build server is updated.,See #5779 - compile a new version of SWIG on Travis until the build server is updated.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5782,2019-04-07T20:29:09Z,2019-04-12T10:30:38Z,2019-04-12T10:30:38Z,CLOSED,False,160,26,1,https://github.com/szekerest,Improve the layer extent calculation of the MSSQL driver (#5781),2,[],https://github.com/mapserver/mapserver/pull/5782,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5782,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5782,2019-04-07T20:29:09Z,2019-04-12T10:30:38Z,2019-04-12T10:30:38Z,CLOSED,False,160,26,1,https://github.com/szekerest,Improve the layer extent calculation of the MSSQL driver (#5781),2,[],https://github.com/mapserver/mapserver/pull/5782,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5782#issuecomment-481409982,,Do you want this in 7.4 instead?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5782,2019-04-07T20:29:09Z,2019-04-12T10:30:38Z,2019-04-12T10:30:38Z,CLOSED,False,160,26,1,https://github.com/szekerest,Improve the layer extent calculation of the MSSQL driver (#5781),2,[],https://github.com/mapserver/mapserver/pull/5782,https://github.com/szekerest,3,https://github.com/MapServer/MapServer/pull/5782#issuecomment-481427021,,"@sdlime Yes, but I'm going to apply a small fix in that.
Not sure if the other drivers work that way, but if the layer extent is set (ie from mapscript or in the mapfile) the driver should not turn to the database to calculate the layer extent.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5785,2019-04-10T09:13:44Z,2019-04-16T14:24:42Z,2019-04-17T13:57:43Z,MERGED,True,18,5,1,https://github.com/ravhed,Add sampling along diagonal for rectangle as polygon reprojection,2,[],https://github.com/mapserver/mapserver/pull/5785,https://github.com/ravhed,1,https://github.com/MapServer/MapServer/pull/5785,"This pull request will solve reprojection issues in certain edge cases.
Issue
Not all geometries of the shapefile I was rendering appeared in the final image even though the extent cover all geometries. When I found the issue I had the following setup:

Shapefile with data in EPSG:32633 projection
WMS request with bounding box specified in EPSG:4326 projection

The following query string was used to debug the issue:
QUERY_STRING=map=fylker.map&FORMAT=image%2Fpng&LAYERS=Fylker_Norge_flate&TRANSPARENT=TRUE&VERSION=1.3.0&EXCEPTIONS=INIMAGE&SERVICE=WMS&REQUEST=GetMap&STYLES=&CRS=EPSG%3A4326&BBOX=-90,-180,112.92325084041,22.92325084041&WIDTH=512&HEIGHT=512



When the bounding box is reprojected (-90,-180,112.92325084041,22.92325084041) to EPSG:32633 the reprojected bounding box will not be correct, even with the current implementation which takes samples along the edges of the bounding box. To give an example, in the case described above the bottom left corner will have the following coordinates:
500000.00       -9997964.94
Using a sample in e.g. center of the bottom line of the rectangle will still give the same X value (500000.00) due to the Y value.
Proposed fix
The solution I propose is to sample the diagonal line in addition to the rectangle edges. In my case e.g. center point of the original bounding box would give a lower minimum X values than any of the samples along the edges.
This is how the resulting image looks before the fix:

This is after the fix:

In my case I had an issue with the min x value being too high of the reprojected bounding box even though it clearly shouldn't as I specify -180 deg in the request bounding box (which is in EPSG:4326).","This pull request will solve reprojection issues in certain edge cases.
Issue
Not all geometries of the shapefile I was rendering appeared in the final image even though the extent cover all geometries. When I found the issue I had the following setup:

Shapefile with data in EPSG:32633 projection
WMS request with bounding box specified in EPSG:4326 projection

The following query string was used to debug the issue:
QUERY_STRING=map=fylker.map&FORMAT=image%2Fpng&LAYERS=Fylker_Norge_flate&TRANSPARENT=TRUE&VERSION=1.3.0&EXCEPTIONS=INIMAGE&SERVICE=WMS&REQUEST=GetMap&STYLES=&CRS=EPSG%3A4326&BBOX=-90,-180,112.92325084041,22.92325084041&WIDTH=512&HEIGHT=512



When the bounding box is reprojected (-90,-180,112.92325084041,22.92325084041) to EPSG:32633 the reprojected bounding box will not be correct, even with the current implementation which takes samples along the edges of the bounding box. To give an example, in the case described above the bottom left corner will have the following coordinates:
500000.00       -9997964.94
Using a sample in e.g. center of the bottom line of the rectangle will still give the same X value (500000.00) due to the Y value.
Proposed fix
The solution I propose is to sample the diagonal line in addition to the rectangle edges. In my case e.g. center point of the original bounding box would give a lower minimum X values than any of the samples along the edges.
This is how the resulting image looks before the fix:

This is after the fix:

In my case I had an issue with the min x value being too high of the reprojected bounding box even though it clearly shouldn't as I specify -180 deg in the request bounding box (which is in EPSG:4326).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5785,2019-04-10T09:13:44Z,2019-04-16T14:24:42Z,2019-04-17T13:57:43Z,MERGED,True,18,5,1,https://github.com/ravhed,Add sampling along diagonal for rectangle as polygon reprojection,2,[],https://github.com/mapserver/mapserver/pull/5785,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5785#issuecomment-482669009,"This pull request will solve reprojection issues in certain edge cases.
Issue
Not all geometries of the shapefile I was rendering appeared in the final image even though the extent cover all geometries. When I found the issue I had the following setup:

Shapefile with data in EPSG:32633 projection
WMS request with bounding box specified in EPSG:4326 projection

The following query string was used to debug the issue:
QUERY_STRING=map=fylker.map&FORMAT=image%2Fpng&LAYERS=Fylker_Norge_flate&TRANSPARENT=TRUE&VERSION=1.3.0&EXCEPTIONS=INIMAGE&SERVICE=WMS&REQUEST=GetMap&STYLES=&CRS=EPSG%3A4326&BBOX=-90,-180,112.92325084041,22.92325084041&WIDTH=512&HEIGHT=512



When the bounding box is reprojected (-90,-180,112.92325084041,22.92325084041) to EPSG:32633 the reprojected bounding box will not be correct, even with the current implementation which takes samples along the edges of the bounding box. To give an example, in the case described above the bottom left corner will have the following coordinates:
500000.00       -9997964.94
Using a sample in e.g. center of the bottom line of the rectangle will still give the same X value (500000.00) due to the Y value.
Proposed fix
The solution I propose is to sample the diagonal line in addition to the rectangle edges. In my case e.g. center point of the original bounding box would give a lower minimum X values than any of the samples along the edges.
This is how the resulting image looks before the fix:

This is after the fix:

In my case I had an issue with the min x value being too high of the reprojected bounding box even though it clearly shouldn't as I specify -180 deg in the request bounding box (which is in EPSG:4326).",This looks like a nice (and simple) addition. I'd like someone with more projection experience to quickly review... --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5786,2019-04-12T05:23:10Z,2019-04-15T16:40:33Z,2019-04-17T13:10:17Z,MERGED,True,2,2,2,https://github.com/ravhed,Feature names with dots are now supported for feature id filtering,1,[],https://github.com/mapserver/mapserver/pull/5786,https://github.com/ravhed,1,https://github.com/MapServer/MapServer/pull/5786,This pull request will fix issue #5741.,This pull request will fix issue #5741.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5787,2019-04-12T10:30:46Z,2019-04-12T11:16:37Z,2019-04-12T11:16:42Z,MERGED,True,160,26,1,https://github.com/szekerest,Improve the layer extent calculation of the MSSQL driver (#5781),2,[],https://github.com/mapserver/mapserver/pull/5787,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5787,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5790,2019-04-12T20:09:40Z,2019-04-15T17:11:12Z,2019-04-15T17:11:12Z,CLOSED,False,6,6,3,https://github.com/akrherz,allow NDEBUG to work for both set/unset cases,1,[],https://github.com/mapserver/mapserver/pull/5790,https://github.com/akrherz,1,https://github.com/MapServer/MapServer/pull/5790,"When -DNDEBUG is set, the opposite happens with the code checks of ifndef.  This change should allow NDEBUG to properly function when it is both set and unset.","When -DNDEBUG is set, the opposite happens with the code checks of ifndef.  This change should allow NDEBUG to properly function when it is both set and unset.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5790,2019-04-12T20:09:40Z,2019-04-15T17:11:12Z,2019-04-15T17:11:12Z,CLOSED,False,6,6,3,https://github.com/akrherz,allow NDEBUG to work for both set/unset cases,1,[],https://github.com/mapserver/mapserver/pull/5790,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5790#issuecomment-483311786,"When -DNDEBUG is set, the opposite happens with the code checks of ifndef.  This change should allow NDEBUG to properly function when it is both set and unset.",Looks ok to me...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5790,2019-04-12T20:09:40Z,2019-04-15T17:11:12Z,2019-04-15T17:11:12Z,CLOSED,False,6,6,3,https://github.com/akrherz,allow NDEBUG to work for both set/unset cases,1,[],https://github.com/mapserver/mapserver/pull/5790,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/5790#issuecomment-483329760,"When -DNDEBUG is set, the opposite happens with the code checks of ifndef.  This change should allow NDEBUG to properly function when it is both set and unset.","This commit doesn't make sense to me. #ifndef FOO and #if !defined(FOO) are strictly equivalent, or I'm missing something...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5790,2019-04-12T20:09:40Z,2019-04-15T17:11:12Z,2019-04-15T17:11:12Z,CLOSED,False,6,6,3,https://github.com/akrherz,allow NDEBUG to work for both set/unset cases,1,[],https://github.com/mapserver/mapserver/pull/5790,https://github.com/akrherz,4,https://github.com/MapServer/MapServer/pull/5790#issuecomment-483332208,"When -DNDEBUG is set, the opposite happens with the code checks of ifndef.  This change should allow NDEBUG to properly function when it is both set and unset.","Hi @rouault , I can't imagine the day that I am able to explain code to you (!!), but lets try this table



compile flag
desired impact
ifndef NDEBUG evals to
!defined(NDEBUG) evals to




-DNDEBUG
I don't want DEBUG statements
true false
false


(nothing set)
I want DEBUG, maybe
true
true



Edit: Oye, my head is spinning again attempting to explain this.  I am just confused.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5790,2019-04-12T20:09:40Z,2019-04-15T17:11:12Z,2019-04-15T17:11:12Z,CLOSED,False,6,6,3,https://github.com/akrherz,allow NDEBUG to work for both set/unset cases,1,[],https://github.com/mapserver/mapserver/pull/5790,https://github.com/rouault,5,https://github.com/MapServer/MapServer/pull/5790#issuecomment-483335449,"When -DNDEBUG is set, the opposite happens with the code checks of ifndef.  This change should allow NDEBUG to properly function when it is both set and unset.","Your table is wrong, at least with gcc and hopefully with all sane compilers. -DNDEBUG defines NDEBUG, so #ifndef NDEBUG evaluates to false.
Below an example demonstrating my above statement ( and stack overflow discussion : https://stackoverflow.com/questions/8617712/difference-between-ifndef-and-if-defined-in-c)
$ cat ndef.c
#if !defined(FOO)
#error ""case 1""
#endif
#ifndef FOO
#error ""case2""
#endif

$ gcc -c ndef.c 
ndef.c:2:2: error: #error ""case 1""
 #error ""case 1""
  ^
ndef.c:5:2: error: #error ""case2""
 #error ""case2""
  ^

$ gcc -c ndef.c -DFOO
[no output]",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5790,2019-04-12T20:09:40Z,2019-04-15T17:11:12Z,2019-04-15T17:11:12Z,CLOSED,False,6,6,3,https://github.com/akrherz,allow NDEBUG to work for both set/unset cases,1,[],https://github.com/mapserver/mapserver/pull/5790,https://github.com/akrherz,6,https://github.com/MapServer/MapServer/pull/5790#issuecomment-483338738,"When -DNDEBUG is set, the opposite happens with the code checks of ifndef.  This change should allow NDEBUG to properly function when it is both set and unset.",sorry for wasting everyone's time again. Ufff,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5792,2019-04-15T17:46:18Z,2019-04-15T19:04:07Z,2019-04-15T19:04:07Z,MERGED,True,0,676,1,https://github.com/rouault,Remove php_proj.c,1,[],https://github.com/mapserver/mapserver/pull/5792,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5792,See #5766 (comment),See #5766 (comment),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5792,2019-04-15T17:46:18Z,2019-04-15T19:04:07Z,2019-04-15T19:04:07Z,MERGED,True,0,676,1,https://github.com/rouault,Remove php_proj.c,1,[],https://github.com/mapserver/mapserver/pull/5792,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5792#issuecomment-483370450,See #5766 (comment),+1 from me. There's been a rash of lack of attention on my part recently. Thanks for the triage...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5793,2019-04-18T05:30:59Z,2019-04-18T15:21:56Z,2019-04-18T15:22:23Z,MERGED,True,81,1,3,https://github.com/ravhed,GML:Name is now encoded in WMS GetFeatureInfo (fixes #5361),1,[],https://github.com/mapserver/mapserver/pull/5793,https://github.com/ravhed,1,https://github.com/MapServer/MapServer/pull/5793,This will fix #5361.,This will fix #5361.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5793,2019-04-18T05:30:59Z,2019-04-18T15:21:56Z,2019-04-18T15:22:23Z,MERGED,True,81,1,3,https://github.com/ravhed,GML:Name is now encoded in WMS GetFeatureInfo (fixes #5361),1,[],https://github.com/mapserver/mapserver/pull/5793,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5793#issuecomment-484559455,This will fix #5361.,Thanks @ravhed!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5797,2019-04-25T22:27:47Z,2019-04-29T16:25:17Z,2019-04-29T16:25:17Z,MERGED,True,38,26,1,https://github.com/geographika,Updates to PHP SWIG MapScript CMakeLists,1,[],https://github.com/mapserver/mapserver/pull/5797,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5797,"This pull request contains the following changes to CMakeLists.txt:

indentation for clarity for If statements
allow it to run with older versions of CMake (or get errors such as CMakeLists.txt:44 (SWIG_ADD_LIBRARY):  Unknown CMake command ""SWIG_ADD_LIBRARY"".
include the CMAKE_CURRENT_BINARY_DIR to make sure mapscriptPHP7_wrap.c is found
add the compiler flag -Wno-unused-label to avoid hundreds of ""defined but not used"" warnings","This pull request contains the following changes to CMakeLists.txt:

indentation for clarity for If statements
allow it to run with older versions of CMake (or get errors such as CMakeLists.txt:44 (SWIG_ADD_LIBRARY):  Unknown CMake command ""SWIG_ADD_LIBRARY"".
include the CMAKE_CURRENT_BINARY_DIR to make sure mapscriptPHP7_wrap.c is found
add the compiler flag -Wno-unused-label to avoid hundreds of ""defined but not used"" warnings",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5799,2019-05-01T20:16:38Z,2019-05-01T20:31:38Z,2019-05-01T20:31:53Z,MERGED,True,2,2,1,https://github.com/dbaston,Fix reference to TEMPPATH in SLD error message,1,[],https://github.com/mapserver/mapserver/pull/5799,https://github.com/dbaston,1,https://github.com/MapServer/MapServer/pull/5799,"This PR fixes an error message that requests TMPPATH be set in the mapfile, when the correct parameter name is TEMPPATH.","This PR fixes an error message that requests TMPPATH be set in the mapfile, when the correct parameter name is TEMPPATH.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5799,2019-05-01T20:16:38Z,2019-05-01T20:31:38Z,2019-05-01T20:31:53Z,MERGED,True,2,2,1,https://github.com/dbaston,Fix reference to TEMPPATH in SLD error message,1,[],https://github.com/mapserver/mapserver/pull/5799,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5799#issuecomment-488410535,"This PR fixes an error message that requests TMPPATH be set in the mapfile, when the correct parameter name is TEMPPATH.",thanks @dbaston !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5800,2019-05-06T04:55:52Z,2019-05-10T07:07:30Z,2019-05-10T10:47:57Z,MERGED,True,4,4,4,https://github.com/ravhed,Fix build issue introduced by #5799,1,[],https://github.com/mapserver/mapserver/pull/5800,https://github.com/ravhed,1,https://github.com/MapServer/MapServer/pull/5800,This pull request will fix testing errors introduced by #5799. Since the error message was changed the tests which produces this error needs to be updated,This pull request will fix testing errors introduced by #5799. Since the error message was changed the tests which produces this error needs to be updated,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5800,2019-05-06T04:55:52Z,2019-05-10T07:07:30Z,2019-05-10T10:47:57Z,MERGED,True,4,4,4,https://github.com/ravhed,Fix build issue introduced by #5799,1,[],https://github.com/mapserver/mapserver/pull/5800,https://github.com/ravhed,2,https://github.com/MapServer/MapServer/pull/5800#issuecomment-489502602,This pull request will fix testing errors introduced by #5799. Since the error message was changed the tests which produces this error needs to be updated,"I believe the tests are running as they should now. The Appveyor issue is not related to what I changed from what I can see and seems to be a temporary error:
https://ci.appveyor.com/project/MapServer/mapserver/builds/24325849/job/rgoqyot8l97p653k
Error uploading artifact the storage: The remote name could not be resolved: 'appveyorcidatav2.blob.core.windows.net'",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5800,2019-05-06T04:55:52Z,2019-05-10T07:07:30Z,2019-05-10T10:47:57Z,MERGED,True,4,4,4,https://github.com/ravhed,Fix build issue introduced by #5799,1,[],https://github.com/mapserver/mapserver/pull/5800,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5800#issuecomment-491181837,This pull request will fix testing errors introduced by #5799. Since the error message was changed the tests which produces this error needs to be updated,"@ravhed - I restarted the CI and it completed the checks successfully this time.
Thanks for the update.",True,{'THUMBS_UP': ['https://github.com/ravhed']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5802,2019-05-14T15:59:04Z,2019-05-15T19:29:54Z,2019-05-19T14:42:32Z,MERGED,True,2,0,1,https://github.com/rgreenwood,add SWIG test to PHPNG cmake,1,[],https://github.com/mapserver/mapserver/pull/5802,https://github.com/rgreenwood,1,https://github.com/MapServer/MapServer/pull/5802,Address issue 5801 (hopefully),Address issue 5801 (hopefully),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5802,2019-05-14T15:59:04Z,2019-05-15T19:29:54Z,2019-05-19T14:42:32Z,MERGED,True,2,0,1,https://github.com/rgreenwood,add SWIG test to PHPNG cmake,1,[],https://github.com/mapserver/mapserver/pull/5802,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5802#issuecomment-492310712,Address issue 5801 (hopefully),"@rgreenwood - thanks for investigating this and getting a fix. That would explain why it worked when also building Python (as discussed in the mailing lists).
For future reference (as it is hard to find details on the CMake/SWIG commands), INCLUDE(${SWIG_USE_FILE})  is set here.
set(SWIG_USE_FILE ${CMAKE_CURRENT_LIST_DIR}/UseSWIG.cmake)
http://www.swig.org/Doc1.3/Introduction.html#Introduction_build_system recommends including these two lines. They are in all the other MapScripts (Python, Perl, Java, Ruby, C#).
It was also discussed in #5619 - and that pull request had them present - it looks like they got swallowed in if(WIN32) and then removed in the final merge.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5802,2019-05-14T15:59:04Z,2019-05-15T19:29:54Z,2019-05-19T14:42:32Z,MERGED,True,2,0,1,https://github.com/rgreenwood,add SWIG test to PHPNG cmake,1,[],https://github.com/mapserver/mapserver/pull/5802,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5802#issuecomment-492814039,Address issue 5801 (hopefully),@sdlime - sorry to be clearer - the Windows comment was that the lines were in the original pull request but due to issues with building on Windows they accidently got moved within a WIN32 IF block so were no longer called on Linux.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5804,2019-05-16T13:33:50Z,2019-05-16T20:18:12Z,2019-05-16T20:18:12Z,CLOSED,False,12,8,5,https://github.com/sdlime,Fix vagrant/Travis builds.,8,[],https://github.com/mapserver/mapserver/pull/5804,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/5804,"Dealing with changes to UbuntuGIS packaging. If ok, then we should probably should backport to 7.4, 7.2, 7.0 and 6.4 branches... --Steve","Dealing with changes to UbuntuGIS packaging. If ok, then we should probably should backport to 7.4, 7.2, 7.0 and 6.4 branches... --Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5804,2019-05-16T13:33:50Z,2019-05-16T20:18:12Z,2019-05-16T20:18:12Z,CLOSED,False,12,8,5,https://github.com/sdlime,Fix vagrant/Travis builds.,8,[],https://github.com/mapserver/mapserver/pull/5804,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5804#issuecomment-493078524,"Dealing with changes to UbuntuGIS packaging. If ok, then we should probably should backport to 7.4, 7.2, 7.0 and 6.4 branches... --Steve","@sdlime  To fix Travis-CI builds, a similar change must be done in the .travis.yml file",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5805,2019-05-16T20:38:56Z,2019-05-16T20:56:30Z,2019-05-16T20:56:30Z,MERGED,True,4,2,2,https://github.com/sdlime,Fixing Vagrant and Travis-CI builds.,1,[],https://github.com/mapserver/mapserver/pull/5805,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/5805,Addressing UbuntuGIS package location changes.,Addressing UbuntuGIS package location changes.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5810,2019-05-17T20:33:36Z,2019-05-17T22:43:57Z,2019-05-17T22:43:57Z,MERGED,True,3,0,1,https://github.com/jmckenna,set required syntax statement for protobuf 3 (#5376),2,[],https://github.com/mapserver/mapserver/pull/5810,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/5810,"This removes the warning thrown with protobuf 3, when compiling MapServer:
[libprotobuf WARNING D:\protobuf-3.6.1\src\google\protobuf\compiler\parser.cc:562] No syntax specified for the proto file: vector_tile.proto. Please use 'syntax = ""proto2"";' or 'syntax = ""proto3"";' to specify a syntax version. (Defaulted to proto2 syntax.)","This removes the warning thrown with protobuf 3, when compiling MapServer:
[libprotobuf WARNING D:\protobuf-3.6.1\src\google\protobuf\compiler\parser.cc:562] No syntax specified for the proto file: vector_tile.proto. Please use 'syntax = ""proto2"";' or 'syntax = ""proto3"";' to specify a syntax version. (Defaulted to proto2 syntax.)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5816,2019-06-04T21:46:17Z,2019-06-05T07:59:08Z,2019-06-05T07:59:08Z,MERGED,True,10,10,2,https://github.com/geographika,Update Python README.rst with latest version,2,[],https://github.com/mapserver/mapserver/pull/5816,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5816,Will be backported to 7-4 branch for release,Will be backported to 7-4 branch for release,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5818,2019-06-05T12:23:14Z,2019-06-06T09:05:43Z,2019-07-02T07:55:02Z,MERGED,True,13,7,1,https://github.com/geographika,Update Projection WKT string,3,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5818,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5818,"To fix #5817

the WKT string is invalid. It lacks a GEOGCS node. Previous versions of GDAL were too lax regarding this. You could instead use the following for example","To fix #5817

the WKT string is invalid. It lacks a GEOGCS node. Previous versions of GDAL were too lax regarding this. You could instead use the following for example",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5818,2019-06-05T12:23:14Z,2019-06-06T09:05:43Z,2019-07-02T07:55:02Z,MERGED,True,13,7,1,https://github.com/geographika,Update Projection WKT string,3,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5818,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5818#issuecomment-499375450,"To fix #5817

the WKT string is invalid. It lacks a GEOGCS node. Previous versions of GDAL were too lax regarding this. You could instead use the following for example",@sdlime / @rouault - should this update be merged to master and then manually added to the 7.4 branch? There was discussions about a bot opening automatic pull requests but I didn't see this happen for #5816,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5818,2019-06-05T12:23:14Z,2019-06-06T09:05:43Z,2019-07-02T07:55:02Z,MERGED,True,13,7,1,https://github.com/geographika,Update Projection WKT string,3,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5818,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/5818#issuecomment-499400840,"To fix #5817

the WKT string is invalid. It lacks a GEOGCS node. Previous versions of GDAL were too lax regarding this. You could instead use the following for example","but I didn't see this happen for #5816

You need to set the label ""backport branch-7-4"" on the pull request. Then once it is merged, a new PR against branch-7-4 will be created. For #5816, you'll need to manually cherry-pick and/or recreate an explicit PR against branch-7-4.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5818,2019-06-05T12:23:14Z,2019-06-06T09:05:43Z,2019-07-02T07:55:02Z,MERGED,True,13,7,1,https://github.com/geographika,Update Projection WKT string,3,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5818,https://github.com/apps/backporting,4,https://github.com/MapServer/MapServer/pull/5818#issuecomment-499412958,"To fix #5817

the WKT string is invalid. It lacks a GEOGCS node. Previous versions of GDAL were too lax regarding this. You could instead use the following for example","The backport to branch-7-4 failed:
Commits [""63eadf33ef5996f84f84de49bce4305bf605192f"",""ace397019368a84629440d81ee18e78ff44af50e"",""04a9711f1e50a17352e8db0eb8b7887c92a332ca""] could not be cherry-picked on top of branch-7-4

To backport manually, run these commands in your terminal:
# Fetch latest updates from GitHub.
git fetch
# Create new working tree.
git worktree add .worktrees/backport branch-7-4
# Navigate to the new directory.
cd .worktrees/backport
# Cherry-pick all the commits of this pull request and resolve the likely conflicts.
git cherry-pick 63eadf33ef5996f84f84de49bce4305bf605192f ace397019368a84629440d81ee18e78ff44af50e 04a9711f1e50a17352e8db0eb8b7887c92a332ca
# Create a new branch with these backported commits.
git checkout -b backport-5818-to-branch-7-4
# Push it to GitHub.
git push --set-upstream origin backport-5818-to-branch-7-4
# Go back to the original working tree.
cd ../..
# Delete the working tree.
git worktree remove .worktrees/backport
Then, create a pull request where the base branch is branch-7-4 and the compare/head branch is backport-5818-to-branch-7-4.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5818,2019-06-05T12:23:14Z,2019-06-06T09:05:43Z,2019-07-02T07:55:02Z,MERGED,True,13,7,1,https://github.com/geographika,Update Projection WKT string,3,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5818,https://github.com/geographika,5,https://github.com/MapServer/MapServer/pull/5818#issuecomment-499455786,"To fix #5817

the WKT string is invalid. It lacks a GEOGCS node. Previous versions of GDAL were too lax regarding this. You could instead use the following for example","@rouault - thanks the info. In this case I had already made a commit to the 7-4 branch to disable the test which caused a conflict. I've manually updated the 7-4 branch, and will get it right next time!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5819,2019-06-06T08:53:00Z,2019-06-06T11:23:33Z,2019-07-02T07:54:47Z,MERGED,True,22,16,2,https://github.com/geographika,Update Python MapScript README version numbers and date,2,[],https://github.com/mapserver/mapserver/pull/5819,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5819,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5820,2019-06-12T14:29:45Z,2019-06-12T14:43:33Z,2019-06-12T17:47:07Z,MERGED,True,1,1,1,https://github.com/bmulcahy,Issue #5796 - Latest OCI library files not found,1,[],https://github.com/mapserver/mapserver/pull/5820,https://github.com/bmulcahy,1,https://github.com/MapServer/MapServer/pull/5820,Added version specific libnnz name to the ORACLE_NNZ_NAMES list,Added version specific libnnz name to the ORACLE_NNZ_NAMES list,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5820,2019-06-12T14:29:45Z,2019-06-12T14:43:33Z,2019-06-12T17:47:07Z,MERGED,True,1,1,1,https://github.com/bmulcahy,Issue #5796 - Latest OCI library files not found,1,[],https://github.com/mapserver/mapserver/pull/5820,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5820#issuecomment-501305939,Added version specific libnnz name to the ORACLE_NNZ_NAMES list,thanks @bmulcahy !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5820,2019-06-12T14:29:45Z,2019-06-12T14:43:33Z,2019-06-12T17:47:07Z,MERGED,True,1,1,1,https://github.com/bmulcahy,Issue #5796 - Latest OCI library files not found,1,[],https://github.com/mapserver/mapserver/pull/5820,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/5820#issuecomment-501319673,Added version specific libnnz name to the ORACLE_NNZ_NAMES list,Should this have been against master instead with a 7.4 backport?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5820,2019-06-12T14:29:45Z,2019-06-12T14:43:33Z,2019-06-12T17:47:07Z,MERGED,True,1,1,1,https://github.com/bmulcahy,Issue #5796 - Latest OCI library files not found,1,[],https://github.com/mapserver/mapserver/pull/5820,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/5820#issuecomment-501323212,Added version specific libnnz name to the ORACLE_NNZ_NAMES list,"yes likely, i noticed that also.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5820,2019-06-12T14:29:45Z,2019-06-12T14:43:33Z,2019-06-12T17:47:07Z,MERGED,True,1,1,1,https://github.com/bmulcahy,Issue #5796 - Latest OCI library files not found,1,[],https://github.com/mapserver/mapserver/pull/5820,https://github.com/bmulcahy,5,https://github.com/MapServer/MapServer/pull/5820#issuecomment-501326327,Added version specific libnnz name to the ORACLE_NNZ_NAMES list,Would you like me to create a new pull request?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5820,2019-06-12T14:29:45Z,2019-06-12T14:43:33Z,2019-06-12T17:47:07Z,MERGED,True,1,1,1,https://github.com/bmulcahy,Issue #5796 - Latest OCI library files not found,1,[],https://github.com/mapserver/mapserver/pull/5820,https://github.com/sdlime,6,https://github.com/MapServer/MapServer/pull/5820#issuecomment-501347634,Added version specific libnnz name to the ORACLE_NNZ_NAMES list,Nah... We'll just need to merge the 7.4 branch with master. My comment was more for future reference since we recently changed our typical target branch to master. No worries!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5820,2019-06-12T14:29:45Z,2019-06-12T14:43:33Z,2019-06-12T17:47:07Z,MERGED,True,1,1,1,https://github.com/bmulcahy,Issue #5796 - Latest OCI library files not found,1,[],https://github.com/mapserver/mapserver/pull/5820,https://github.com/jmckenna,7,https://github.com/MapServer/MapServer/pull/5820#issuecomment-501383261,Added version specific libnnz name to the ORACLE_NNZ_NAMES list,Merged into master.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5821,2019-06-13T18:54:58Z,2020-02-17T20:09:25Z,2020-02-17T20:09:36Z,MERGED,True,6,6,6,https://github.com/ravhed,WMS Client - Crash when WMS client request is one pixel in width or height,1,[],https://github.com/mapserver/mapserver/pull/5821,https://github.com/ravhed,1,https://github.com/MapServer/MapServer/pull/5821,See #5815 for details.,See #5815 for details.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5821,2019-06-13T18:54:58Z,2020-02-17T20:09:25Z,2020-02-17T20:09:36Z,MERGED,True,6,6,6,https://github.com/ravhed,WMS Client - Crash when WMS client request is one pixel in width or height,1,[],https://github.com/mapserver/mapserver/pull/5821,https://github.com/ravhed,2,https://github.com/MapServer/MapServer/pull/5821#issuecomment-501847326,See #5815 for details.,It seems like this change didn't pass one of the WMS client tests. This pull request should not be merged until I've pushed a fix for it.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5821,2019-06-13T18:54:58Z,2020-02-17T20:09:25Z,2020-02-17T20:09:36Z,MERGED,True,6,6,6,https://github.com/ravhed,WMS Client - Crash when WMS client request is one pixel in width or height,1,[],https://github.com/mapserver/mapserver/pull/5821,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/5821#issuecomment-501940671,See #5815 for details.,I suppose we need to fix the regression created by #5707 first...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5821,2019-06-13T18:54:58Z,2020-02-17T20:09:25Z,2020-02-17T20:09:36Z,MERGED,True,6,6,6,https://github.com/ravhed,WMS Client - Crash when WMS client request is one pixel in width or height,1,[],https://github.com/mapserver/mapserver/pull/5821,https://github.com/ravhed,4,https://github.com/MapServer/MapServer/pull/5821#issuecomment-529859934,See #5815 for details.,I've updated the remaining tests now. I believe the appveyor build failure is not related to my changes.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5821,2019-06-13T18:54:58Z,2020-02-17T20:09:25Z,2020-02-17T20:09:36Z,MERGED,True,6,6,6,https://github.com/ravhed,WMS Client - Crash when WMS client request is one pixel in width or height,1,[],https://github.com/mapserver/mapserver/pull/5821,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/5821#issuecomment-587142109,See #5815 for details.,thanks @ravhed !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5822,2019-06-14T12:12:34Z,2019-06-14T12:13:10Z,2021-03-19T21:31:33Z,MERGED,True,5,15,1,https://github.com/jmckenna,"Revert ""Reduce log clutter from non-errors""",1,[],https://github.com/mapserver/mapserver/pull/5822,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/5822,Reverts #5707,Reverts #5707,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5823,2019-06-14T14:42:04Z,2019-06-14T16:37:20Z,2019-06-14T16:37:21Z,MERGED,True,24,0,17,https://github.com/jbo-ads,Add 'DEBUG 3' on failing msautotests,1,[],https://github.com/mapserver/mapserver/pull/5823,https://github.com/jbo-ads,1,https://github.com/MapServer/MapServer/pull/5823,"Following #5707, some msautotests failed. These tests expected error messages that were filtered out by said PR. The proposed update increases the debug level to 3 on impacted layers in msautotests, so that expected error messages are produced.","Following #5707, some msautotests failed. These tests expected error messages that were filtered out by said PR. The proposed update increases the debug level to 3 on impacted layers in msautotests, so that expected error messages are produced.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5824,2019-06-17T14:29:39Z,2019-06-18T11:54:32Z,2019-09-16T19:59:50Z,MERGED,True,15,5,1,https://github.com/jmckenna,"Re-apply ""Reduce log clutter from non-errors""""",1,[],https://github.com/mapserver/mapserver/pull/5824,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/5824,Reverts #5822,Reverts #5822,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5824,2019-06-17T14:29:39Z,2019-06-18T11:54:32Z,2019-09-16T19:59:50Z,MERGED,True,15,5,1,https://github.com/jmckenna,"Re-apply ""Reduce log clutter from non-errors""""",1,[],https://github.com/mapserver/mapserver/pull/5824,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5824#issuecomment-502707603,Reverts #5822,I want to check out just fixing the tests first... hang on.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5824,2019-06-17T14:29:39Z,2019-06-18T11:54:32Z,2019-09-16T19:59:50Z,MERGED,True,15,5,1,https://github.com/jmckenna,"Re-apply ""Reduce log clutter from non-errors""""",1,[],https://github.com/mapserver/mapserver/pull/5824,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/5824#issuecomment-502974422,Reverts #5822,"Sorry Jeff, was out Friday and now see the tests were updated. So you must have reverted previously and this re-applies, correct? If so then carry on...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5824,2019-06-17T14:29:39Z,2019-06-18T11:54:32Z,2019-09-16T19:59:50Z,MERGED,True,15,5,1,https://github.com/jmckenna,"Re-apply ""Reduce log clutter from non-errors""""",1,[],https://github.com/mapserver/mapserver/pull/5824,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/5824#issuecomment-503071422,Reverts #5822,"Correct.  thanks, re-applying..",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5826,2019-06-21T16:09:52Z,2019-06-24T08:20:59Z,2019-06-24T08:20:59Z,MERGED,True,151,4,8,https://github.com/rouault,FLTGetIsLikeComparisonCommonExpression(): add terminating '$' at end of regular expression (fixes #5825),1,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5826,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5826,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5827,2019-06-21T16:20:55Z,2019-06-21T20:16:46Z,2019-06-21T20:16:46Z,MERGED,True,15,7,1,https://github.com/rouault,.travis.yml: add ccache to speed up builds,1,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5827,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5827,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5827,2019-06-21T16:20:55Z,2019-06-21T20:16:46Z,2019-06-21T20:16:46Z,MERGED,True,15,7,1,https://github.com/rouault,.travis.yml: add ccache to speed up builds,1,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5827,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5827#issuecomment-504493161,,"Timings of master:
PHP 5.6: 8min46
PHP 7: 9min9
PHP 7.1: 9min29
PHP 7.2: 8min27
PHP 7.3: 8min47
Timings of first build with this PR (empty cache, but with -j2):
PHP 5.6: 7min39
PHP 7: 7min29
PHP 7.1: 7min40
PHP 7.2: 7min48
PHP 7.3: 7min32
Timings of second build with this PR  (using cache, with -j2):
PHP 5.6: 6min58
PHP 7: 7min15
PHP 7.1: 7min13
PHP 7.2: 7min15
PHP 7.3: 7min34",True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5828,2019-06-21T20:16:57Z,2019-06-21T20:44:32Z,2019-06-21T20:44:36Z,MERGED,True,15,7,1,https://github.com/apps/backporting,[Backport branch-7-4] .travis.yml: add ccache to speed up builds,1,[],https://github.com/mapserver/mapserver/pull/5828,https://github.com/apps/backporting,1,https://github.com/MapServer/MapServer/pull/5828,Backport #5827.,Backport #5827.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5829,2019-06-24T08:21:09Z,2019-06-24T09:01:12Z,2019-09-16T19:58:49Z,MERGED,True,151,4,8,https://github.com/apps/backporting,[Backport branch-7-4] FLTGetIsLikeComparisonCommonExpression(): add terminating '$' at end of regular expression (fixes #5825),1,[],https://github.com/mapserver/mapserver/pull/5829,https://github.com/apps/backporting,1,https://github.com/MapServer/MapServer/pull/5829,Backport #5826.,Backport #5826.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5831,2019-07-01T15:24:31Z,2019-09-04T16:07:44Z,2019-09-04T16:07:53Z,MERGED,True,2546,201,92,https://github.com/jbo-ads,SLD: Add support to arithmetic expressions,38,[],https://github.com/mapserver/mapserver/pull/5831,https://github.com/jbo-ads,1,https://github.com/MapServer/MapServer/pull/5831,This pull request aims at adding support to arithmetic expressions in SLD documents read by MapServer. It implements the first section of MS RFC 124: Improving SLD Support in MapServer.,This pull request aims at adding support to arithmetic expressions in SLD documents read by MapServer. It implements the first section of MS RFC 124: Improving SLD Support in MapServer.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5831,2019-07-01T15:24:31Z,2019-09-04T16:07:44Z,2019-09-04T16:07:53Z,MERGED,True,2546,201,92,https://github.com/jbo-ads,SLD: Add support to arithmetic expressions,38,[],https://github.com/mapserver/mapserver/pull/5831,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5831#issuecomment-508784960,This pull request aims at adding support to arithmetic expressions in SLD documents read by MapServer. It implements the first section of MS RFC 124: Improving SLD Support in MapServer.,At first glance this looks good. I kinda wish we could just extend the binding object to be more general to handle both a straight item and an expression but this work doesn't preclude that from happening at a later date. --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5831,2019-07-01T15:24:31Z,2019-09-04T16:07:44Z,2019-09-04T16:07:53Z,MERGED,True,2546,201,92,https://github.com/jbo-ads,SLD: Add support to arithmetic expressions,38,[],https://github.com/mapserver/mapserver/pull/5831,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/5831#issuecomment-508787593,This pull request aims at adding support to arithmetic expressions in SLD documents read by MapServer. It implements the first section of MS RFC 124: Improving SLD Support in MapServer.,Do you have a feeling about how easy it would be to add this functionality in a more general sense? I think that should be done even if not part of your work. There are also at least one label property where this would be a nice addition (SIZE).  --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5831,2019-07-01T15:24:31Z,2019-09-04T16:07:44Z,2019-09-04T16:07:53Z,MERGED,True,2546,201,92,https://github.com/jbo-ads,SLD: Add support to arithmetic expressions,38,[],https://github.com/mapserver/mapserver/pull/5831,https://github.com/jbo-ads,4,https://github.com/MapServer/MapServer/pull/5831#issuecomment-508792192,This pull request aims at adding support to arithmetic expressions in SLD documents read by MapServer. It implements the first section of MS RFC 124: Improving SLD Support in MapServer.,"Do you mean extending the binding object instead of having both bindings and exprBindings? I think the changes would affect mainly the MapFile parsing step. As a side effect, expressions would be allowed in MapFile in places where currently only attributes and literals are.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5831,2019-07-01T15:24:31Z,2019-09-04T16:07:44Z,2019-09-04T16:07:53Z,MERGED,True,2546,201,92,https://github.com/jbo-ads,SLD: Add support to arithmetic expressions,38,[],https://github.com/mapserver/mapserver/pull/5831,https://github.com/sdlime,5,https://github.com/MapServer/MapServer/pull/5831#issuecomment-509308704,This pull request aims at adding support to arithmetic expressions in SLD documents read by MapServer. It implements the first section of MS RFC 124: Improving SLD Support in MapServer.,That's what I was thinking but it's probably not worth the effort and you're right that expressions for things like colors don't make sense. Although enabling an expression binding would still need to be done in the mapfile parsing code (my second comment). I can take that piece on...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5831,2019-07-01T15:24:31Z,2019-09-04T16:07:44Z,2019-09-04T16:07:53Z,MERGED,True,2546,201,92,https://github.com/jbo-ads,SLD: Add support to arithmetic expressions,38,[],https://github.com/mapserver/mapserver/pull/5831,https://github.com/jbo-ads,6,https://github.com/MapServer/MapServer/pull/5831#issuecomment-509547214,This pull request aims at adding support to arithmetic expressions in SLD documents read by MapServer. It implements the first section of MS RFC 124: Improving SLD Support in MapServer.,@sdlime As an exercise I am currently investigating how easy it would be to add expressions on label size. It has been a long time since I last played with lex and yacc :),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5831,2019-07-01T15:24:31Z,2019-09-04T16:07:44Z,2019-09-04T16:07:53Z,MERGED,True,2546,201,92,https://github.com/jbo-ads,SLD: Add support to arithmetic expressions,38,[],https://github.com/mapserver/mapserver/pull/5831,https://github.com/jbo-ads,7,https://github.com/MapServer/MapServer/pull/5831#issuecomment-511393804,This pull request aims at adding support to arithmetic expressions in SLD documents read by MapServer. It implements the first section of MS RFC 124: Improving SLD Support in MapServer.,@sdlime I just added expression handling on Label Size. It only involves changes in mapfile.c. It should not be difficult to propagate these changes on other properties. Tell me if you want that I include this commit in this pull request.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5831,2019-07-01T15:24:31Z,2019-09-04T16:07:44Z,2019-09-04T16:07:53Z,MERGED,True,2546,201,92,https://github.com/jbo-ads,SLD: Add support to arithmetic expressions,38,[],https://github.com/mapserver/mapserver/pull/5831,https://github.com/sdlime,8,https://github.com/MapServer/MapServer/pull/5831#issuecomment-511933262,This pull request aims at adding support to arithmetic expressions in SLD documents read by MapServer. It implements the first section of MS RFC 124: Improving SLD Support in MapServer.,"@sdlime I just added expression handling on Label Size. It only involves changes in mapfile.c. It should not be difficult to propagate these changes on other properties. Tell me if you want that I include this commit in this pull request.

I think we should add this capability across the board - I can help too. I think folks would be bummed if this nice addition was SLD-only. That should be a broader goal. I would include that commit in the pull request.
Which got me wondering - how do things behave if an object already has an expression binding and then SLD defines another one? I would guess it would just free the old one and install the new one (essentially overwrite). Or this use case, there's an existing attribute binding and then SLD defines an expression binding? This might be a reason to have a single binding object?
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5831,2019-07-01T15:24:31Z,2019-09-04T16:07:44Z,2019-09-04T16:07:53Z,MERGED,True,2546,201,92,https://github.com/jbo-ads,SLD: Add support to arithmetic expressions,38,[],https://github.com/mapserver/mapserver/pull/5831,https://github.com/jbo-ads,9,https://github.com/MapServer/MapServer/pull/5831#issuecomment-512336468,This pull request aims at adding support to arithmetic expressions in SLD documents read by MapServer. It implements the first section of MS RFC 124: Improving SLD Support in MapServer.,"Commit is included in this pull request.
I didn't check these specific use cases. They are worth a test in msautotest. An expression binding from SLD overwrites the one in MapFile and takes precedence over a simple binding from Mapfile.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5831,2019-07-01T15:24:31Z,2019-09-04T16:07:44Z,2019-09-04T16:07:53Z,MERGED,True,2546,201,92,https://github.com/jbo-ads,SLD: Add support to arithmetic expressions,38,[],https://github.com/mapserver/mapserver/pull/5831,https://github.com/sdlime,10,https://github.com/MapServer/MapServer/pull/5831#issuecomment-513385666,This pull request aims at adding support to arithmetic expressions in SLD documents read by MapServer. It implements the first section of MS RFC 124: Improving SLD Support in MapServer.,"Thinking about it more doesn't SLD just create a bunch of new classes in a layer? (I'm not an SLD user) I mean, if classes are already defined then I'd guess they are removed and new ones created.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5831,2019-07-01T15:24:31Z,2019-09-04T16:07:44Z,2019-09-04T16:07:53Z,MERGED,True,2546,201,92,https://github.com/jbo-ads,SLD: Add support to arithmetic expressions,38,[],https://github.com/mapserver/mapserver/pull/5831,https://github.com/jbo-ads,11,https://github.com/MapServer/MapServer/pull/5831#issuecomment-514258971,This pull request aims at adding support to arithmetic expressions in SLD documents read by MapServer. It implements the first section of MS RFC 124: Improving SLD Support in MapServer.,"I just checked the code: if a layer is defined both in MapFile and SLD, all classes from MapFile inside that layer are just removed and replaced by classes from SLD.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5831,2019-07-01T15:24:31Z,2019-09-04T16:07:44Z,2019-09-04T16:07:53Z,MERGED,True,2546,201,92,https://github.com/jbo-ads,SLD: Add support to arithmetic expressions,38,[],https://github.com/mapserver/mapserver/pull/5831,https://github.com/sdlime,12,https://github.com/MapServer/MapServer/pull/5831#issuecomment-514264221,This pull request aims at adding support to arithmetic expressions in SLD documents read by MapServer. It implements the first section of MS RFC 124: Improving SLD Support in MapServer.,I think we should go ahead and merge this code. Then we can work on a separate pull request that exposes the expression binding to more general mapfile processing (using your work in labels as a pattern).  --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5831,2019-07-01T15:24:31Z,2019-09-04T16:07:44Z,2019-09-04T16:07:53Z,MERGED,True,2546,201,92,https://github.com/jbo-ads,SLD: Add support to arithmetic expressions,38,[],https://github.com/mapserver/mapserver/pull/5831,https://github.com/geographika,13,https://github.com/MapServer/MapServer/pull/5831#issuecomment-519221648,This pull request aims at adding support to arithmetic expressions in SLD documents read by MapServer. It implements the first section of MS RFC 124: Improving SLD Support in MapServer.,"@sdlime I just added expression handling on Label Size. It only involves changes in mapfile.c. It should not be difficult to propagate these changes on other properties. Tell me if you want that I include this commit in this pull request.

@jbo-ads - some excellent new features within this pull request.
One property that would really benefit from being set by expressions is STYLE>SIZE. There are many cases where symbol size depends on an attribute, but the attribute itself has no relation to a MapServer style size.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5831,2019-07-01T15:24:31Z,2019-09-04T16:07:44Z,2019-09-04T16:07:53Z,MERGED,True,2546,201,92,https://github.com/jbo-ads,SLD: Add support to arithmetic expressions,38,[],https://github.com/mapserver/mapserver/pull/5831,https://github.com/jbo-ads,14,https://github.com/MapServer/MapServer/pull/5831#issuecomment-519575212,This pull request aims at adding support to arithmetic expressions in SLD documents read by MapServer. It implements the first section of MS RFC 124: Improving SLD Support in MapServer.,"@geographika - If you don't mind waiting until september, I can add expression handling on STYLE->SIZE just like on LABEL->SIZE.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5831,2019-07-01T15:24:31Z,2019-09-04T16:07:44Z,2019-09-04T16:07:53Z,MERGED,True,2546,201,92,https://github.com/jbo-ads,SLD: Add support to arithmetic expressions,38,[],https://github.com/mapserver/mapserver/pull/5831,https://github.com/sdlime,15,https://github.com/MapServer/MapServer/pull/5831#issuecomment-519595438,This pull request aims at adding support to arithmetic expressions in SLD documents read by MapServer. It implements the first section of MS RFC 124: Improving SLD Support in MapServer.,Could merge now and add style->size as another pull request...,True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5831,2019-07-01T15:24:31Z,2019-09-04T16:07:44Z,2019-09-04T16:07:53Z,MERGED,True,2546,201,92,https://github.com/jbo-ads,SLD: Add support to arithmetic expressions,38,[],https://github.com/mapserver/mapserver/pull/5831,https://github.com/geographika,16,https://github.com/MapServer/MapServer/pull/5831#issuecomment-519799205,This pull request aims at adding support to arithmetic expressions in SLD documents read by MapServer. It implements the first section of MS RFC 124: Improving SLD Support in MapServer.,"@geographika - If you don't mind waiting until september, I can add expression handling on STYLE->SIZE just like on LABEL->SIZE.

@jbo-ads - whenever you get a chance works for me! As @sdlime says don't let it hold up merging this work.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5831,2019-07-01T15:24:31Z,2019-09-04T16:07:44Z,2019-09-04T16:07:53Z,MERGED,True,2546,201,92,https://github.com/jbo-ads,SLD: Add support to arithmetic expressions,38,[],https://github.com/mapserver/mapserver/pull/5831,https://github.com/rouault,17,https://github.com/MapServer/MapServer/pull/5831#issuecomment-520729370,This pull request aims at adding support to arithmetic expressions in SLD documents read by MapServer. It implements the first section of MS RFC 124: Improving SLD Support in MapServer.,"Unless someone objects, I'm considering pressing the 'Merge' button by tomorrow",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5831,2019-07-01T15:24:31Z,2019-09-04T16:07:44Z,2019-09-04T16:07:53Z,MERGED,True,2546,201,92,https://github.com/jbo-ads,SLD: Add support to arithmetic expressions,38,[],https://github.com/mapserver/mapserver/pull/5831,https://github.com/sdlime,18,https://github.com/MapServer/MapServer/pull/5831#issuecomment-520833656,This pull request aims at adding support to arithmetic expressions in SLD documents read by MapServer. It implements the first section of MS RFC 124: Improving SLD Support in MapServer.,"+1 on merging...
…
________________________________
From: Even Rouault <notifications@github.com>
Sent: Tuesday, August 13, 2019 2:52:47 AM
To: mapserver/mapserver <mapserver@noreply.github.com>
Cc: Lime, Steve D (MNIT) <steve.lime@state.mn.us>; Mention <mention@noreply.github.com>
Subject: Re: [mapserver/mapserver] SLD: Add support to arithmetic expressions (#5831)


This message may be from an external email source.
Do not select links or open attachments unless verified. Report all suspicious emails to Minnesota IT Services Security Operations Center.



Unless someone objects, I'm considering pressing the 'Merge' button by tomorrow

—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub<https://gcc01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fmapserver%2Fmapserver%2Fpull%2F5831%3Femail_source%3Dnotifications%26email_token%3DAAMGN65FVYZWEIYUYUT7O4DQEJR47A5CNFSM4H4TQNI2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD4E3GGQ%23issuecomment-520729370&data=02%7C01%7Csteve.lime%40state.mn.us%7C20831df814e04163734708d71fc33c31%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637012795697274392&sdata=SynF%2FkEiKlgCbsha6LC1MQQiovi%2BfTIBwGVOdpXEv3I%3D&reserved=0>, or mute the thread<https://gcc01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAAMGN63NVXCYFTFWSY5ANZTQEJR47ANCNFSM4H4TQNIQ&data=02%7C01%7Csteve.lime%40state.mn.us%7C20831df814e04163734708d71fc33c31%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637012795697274392&sdata=o4CNc5ZcpxhVBbwIxwLJrRApJJnFWqq%2BwWv6S4WCO58%3D&reserved=0>.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5831,2019-07-01T15:24:31Z,2019-09-04T16:07:44Z,2019-09-04T16:07:53Z,MERGED,True,2546,201,92,https://github.com/jbo-ads,SLD: Add support to arithmetic expressions,38,[],https://github.com/mapserver/mapserver/pull/5831,https://github.com/rouault,19,https://github.com/MapServer/MapServer/pull/5831#issuecomment-527947452,This pull request aims at adding support to arithmetic expressions in SLD documents read by MapServer. It implements the first section of MS RFC 124: Improving SLD Support in MapServer.,I guess we should squash the commits into a single one as the commit history in the PR is a bit messy ?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5831,2019-07-01T15:24:31Z,2019-09-04T16:07:44Z,2019-09-04T16:07:53Z,MERGED,True,2546,201,92,https://github.com/jbo-ads,SLD: Add support to arithmetic expressions,38,[],https://github.com/mapserver/mapserver/pull/5831,https://github.com/jbo-ads,20,https://github.com/MapServer/MapServer/pull/5831#issuecomment-527967521,This pull request aims at adding support to arithmetic expressions in SLD documents read by MapServer. It implements the first section of MS RFC 124: Improving SLD Support in MapServer.,It makes sense. Commit history was useful only for me while implementing the feature.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5831,2019-07-01T15:24:31Z,2019-09-04T16:07:44Z,2019-09-04T16:07:53Z,MERGED,True,2546,201,92,https://github.com/jbo-ads,SLD: Add support to arithmetic expressions,38,[],https://github.com/mapserver/mapserver/pull/5831,https://github.com/rouault,21,https://github.com/MapServer/MapServer/pull/5831#issuecomment-527971389,This pull request aims at adding support to arithmetic expressions in SLD documents read by MapServer. It implements the first section of MS RFC 124: Improving SLD Support in MapServer.,Squashed and merged !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5832,2019-07-01T15:55:26Z,2020-04-01T13:36:45Z,2020-04-01T13:37:17Z,MERGED,True,1929,489,21,https://github.com/jbo-ads,SLD: Improve WMS GetStyles request,6,['SLD'],https://github.com/mapserver/mapserver/pull/5832,https://github.com/jbo-ads,1,https://github.com/MapServer/MapServer/pull/5832,"This pull request aims at improving WMS GetStyles request, especially when a SLD or SLD_BODY parameter is present. It implements the second section of MS RFC 124: Improving SLD Support in MapServer.","This pull request aims at improving WMS GetStyles request, especially when a SLD or SLD_BODY parameter is present. It implements the second section of MS RFC 124: Improving SLD Support in MapServer.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5832,2019-07-01T15:55:26Z,2020-04-01T13:36:45Z,2020-04-01T13:37:17Z,MERGED,True,1929,489,21,https://github.com/jbo-ads,SLD: Improve WMS GetStyles request,6,['SLD'],https://github.com/mapserver/mapserver/pull/5832,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5832#issuecomment-519224326,"This pull request aims at improving WMS GetStyles request, especially when a SLD or SLD_BODY parameter is present. It implements the second section of MS RFC 124: Improving SLD Support in MapServer.","I don't have any objections here. This is really limited to WMS/SLD and doesn't result in anything that we might want to expose more broadly (unlike the other 2 pull requests). Could anything sensitive be divulged through the XML generation? I can't think of anything beyond attribute bindings or expressions already defined in the mapfile. I mean, what if style SIZE is already referencing an expression (based on the other pull request).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5832,2019-07-01T15:55:26Z,2020-04-01T13:36:45Z,2020-04-01T13:37:17Z,MERGED,True,1929,489,21,https://github.com/jbo-ads,SLD: Improve WMS GetStyles request,6,['SLD'],https://github.com/mapserver/mapserver/pull/5832,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/5832#issuecomment-587141836,"This pull request aims at improving WMS GetStyles request, especially when a SLD or SLD_BODY parameter is present. It implements the second section of MS RFC 124: Improving SLD Support in MapServer.",@jbo-ads what is the status of this change?  It seems you mentioned that you will 'rework' this.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5832,2019-07-01T15:55:26Z,2020-04-01T13:36:45Z,2020-04-01T13:37:17Z,MERGED,True,1929,489,21,https://github.com/jbo-ads,SLD: Improve WMS GetStyles request,6,['SLD'],https://github.com/mapserver/mapserver/pull/5832,https://github.com/jbo-ads,4,https://github.com/MapServer/MapServer/pull/5832#issuecomment-587539515,"This pull request aims at improving WMS GetStyles request, especially when a SLD or SLD_BODY parameter is present. It implements the second section of MS RFC 124: Improving SLD Support in MapServer.","Actually I am currently on it. I already solved merge conflicts on my local repo. Moreover, comments from @rouault are trickier than they look like... I need to update mapparser.y in order to properly convert from Mapfile to SLD expressions.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5832,2019-07-01T15:55:26Z,2020-04-01T13:36:45Z,2020-04-01T13:37:17Z,MERGED,True,1929,489,21,https://github.com/jbo-ads,SLD: Improve WMS GetStyles request,6,['SLD'],https://github.com/mapserver/mapserver/pull/5832,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/5832#issuecomment-587540815,"This pull request aims at improving WMS GetStyles request, especially when a SLD or SLD_BODY parameter is present. It implements the second section of MS RFC 124: Improving SLD Support in MapServer.","@jbo-ads ok thanks for the update.  Do you want me to wait for your changes, before beginning the 7.6.0 release process?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5832,2019-07-01T15:55:26Z,2020-04-01T13:36:45Z,2020-04-01T13:37:17Z,MERGED,True,1929,489,21,https://github.com/jbo-ads,SLD: Improve WMS GetStyles request,6,['SLD'],https://github.com/mapserver/mapserver/pull/5832,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/5832#issuecomment-587541450,"This pull request aims at improving WMS GetStyles request, especially when a SLD or SLD_BODY parameter is present. It implements the second section of MS RFC 124: Improving SLD Support in MapServer.","meaning: ok I will wait for your changes, before proceeding (unless you advise otherwise here).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5832,2019-07-01T15:55:26Z,2020-04-01T13:36:45Z,2020-04-01T13:37:17Z,MERGED,True,1929,489,21,https://github.com/jbo-ads,SLD: Improve WMS GetStyles request,6,['SLD'],https://github.com/mapserver/mapserver/pull/5832,https://github.com/jbo-ads,7,https://github.com/MapServer/MapServer/pull/5832#issuecomment-587543084,"This pull request aims at improving WMS GetStyles request, especially when a SLD or SLD_BODY parameter is present. It implements the second section of MS RFC 124: Improving SLD Support in MapServer.","Thank you, but I can wait for mid-year's 8.0 release for my changes to be integrated. I think that many people are waiting for a 7.6.",True,{'THUMBS_UP': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5832,2019-07-01T15:55:26Z,2020-04-01T13:36:45Z,2020-04-01T13:37:17Z,MERGED,True,1929,489,21,https://github.com/jbo-ads,SLD: Improve WMS GetStyles request,6,['SLD'],https://github.com/mapserver/mapserver/pull/5832,https://github.com/jbo-ads,8,https://github.com/MapServer/MapServer/pull/5832#issuecomment-589015152,"This pull request aims at improving WMS GetStyles request, especially when a SLD or SLD_BODY parameter is present. It implements the second section of MS RFC 124: Improving SLD Support in MapServer.","@rouault : I updated the code to handle labels of both types MS_STRING and MS_EXPRESSION. I didn't include handling of Mapfile functions though. I don't know what to do with them:

Should a SLD document returned by a GetStyles request be as close as possible to original Mapfile despite not being fully compliant to standard?
or for instance, should tostring() function be converted to numberFormat() with tricky conversions from ""%f""-like formats to ""##.##""-like formats?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5832,2019-07-01T15:55:26Z,2020-04-01T13:36:45Z,2020-04-01T13:37:17Z,MERGED,True,1929,489,21,https://github.com/jbo-ads,SLD: Improve WMS GetStyles request,6,['SLD'],https://github.com/mapserver/mapserver/pull/5832,https://github.com/rouault,9,https://github.com/MapServer/MapServer/pull/5832#issuecomment-607254273,"This pull request aims at improving WMS GetStyles request, especially when a SLD or SLD_BODY parameter is present. It implements the second section of MS RFC 124: Improving SLD Support in MapServer.",@jbo-ads I let you issue a backport PR against branch 7.6 if you wish,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5833,2019-07-02T07:57:43Z,2019-07-03T11:21:17Z,2019-07-03T11:21:17Z,MERGED,True,15,2,2,https://github.com/geographika,Allow sorting in MSSQL with WFS,2,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5833,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5833,"This pull request adds sorting for the MSSQL driver.
Other drivers have this functionality as part of https://mapserver.org/development/rfc/ms-rfc-105.html#sorting
With thanks to @rouault for the patch.
Associated doc changes at MapServer/MapServer-documentation#278","This pull request adds sorting for the MSSQL driver.
Other drivers have this functionality as part of https://mapserver.org/development/rfc/ms-rfc-105.html#sorting
With thanks to @rouault for the patch.
Associated doc changes at MapServer/MapServer-documentation#278",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5834,2019-07-02T22:11:13Z,2020-02-21T17:50:35Z,2022-03-22T00:29:08Z,MERGED,True,64,1,3,https://github.com/sdlime,Adding processing option to classify 16bit rasters using scaled values instead of raw values.,13,[],https://github.com/mapserver/mapserver/pull/5834,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/5834,"Initial attempt at addressing issue #5830. Use would be something like:
    PROCESSING ""SCALE=10,50""
    PROCESSING ""SCALE_BUCKETS=256""
    PROCESSING ""CLASSIFY_SCALED=TRUE""

Only supported with 16bit rasters.
--Steve","Initial attempt at addressing issue #5830. Use would be something like:
    PROCESSING ""SCALE=10,50""
    PROCESSING ""SCALE_BUCKETS=256""
    PROCESSING ""CLASSIFY_SCALED=TRUE""

Only supported with 16bit rasters.
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5834,2019-07-02T22:11:13Z,2020-02-21T17:50:35Z,2022-03-22T00:29:08Z,MERGED,True,64,1,3,https://github.com/sdlime,Adding processing option to classify 16bit rasters using scaled values instead of raw values.,13,[],https://github.com/mapserver/mapserver/pull/5834,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5834#issuecomment-587141337,"Initial attempt at addressing issue #5830. Use would be something like:
    PROCESSING ""SCALE=10,50""
    PROCESSING ""SCALE_BUCKETS=256""
    PROCESSING ""CLASSIFY_SCALED=TRUE""

Only supported with 16bit rasters.
--Steve","This looks ready to merge, any objections?  (to include in 7.6.0)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5834,2019-07-02T22:11:13Z,2020-02-21T17:50:35Z,2022-03-22T00:29:08Z,MERGED,True,64,1,3,https://github.com/sdlime,Adding processing option to classify 16bit rasters using scaled values instead of raw values.,13,[],https://github.com/mapserver/mapserver/pull/5834,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/5834#issuecomment-588483269,"Initial attempt at addressing issue #5830. Use would be something like:
    PROCESSING ""SCALE=10,50""
    PROCESSING ""SCALE_BUCKETS=256""
    PROCESSING ""CLASSIFY_SCALED=TRUE""

Only supported with 16bit rasters.
--Steve",Looks like I need to resolve @rouault comments. Will do so this evening.,True,{'THUMBS_UP': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5834,2019-07-02T22:11:13Z,2020-02-21T17:50:35Z,2022-03-22T00:29:08Z,MERGED,True,64,1,3,https://github.com/sdlime,Adding processing option to classify 16bit rasters using scaled values instead of raw values.,13,[],https://github.com/mapserver/mapserver/pull/5834,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/5834#issuecomment-589745722,"Initial attempt at addressing issue #5830. Use would be something like:
    PROCESSING ""SCALE=10,50""
    PROCESSING ""SCALE_BUCKETS=256""
    PROCESSING ""CLASSIFY_SCALED=TRUE""

Only supported with 16bit rasters.
--Steve",If things pass definitely will want to squash then merge...,True,{'THUMBS_UP': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5834,2019-07-02T22:11:13Z,2020-02-21T17:50:35Z,2022-03-22T00:29:08Z,MERGED,True,64,1,3,https://github.com/sdlime,Adding processing option to classify 16bit rasters using scaled values instead of raw values.,13,[],https://github.com/mapserver/mapserver/pull/5834,https://github.com/sdlime,5,https://github.com/MapServer/MapServer/pull/5834#issuecomment-589761794,"Initial attempt at addressing issue #5830. Use would be something like:
    PROCESSING ""SCALE=10,50""
    PROCESSING ""SCALE_BUCKETS=256""
    PROCESSING ""CLASSIFY_SCALED=TRUE""

Only supported with 16bit rasters.
--Steve",@jmckenna - this was merged.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5834,2019-07-02T22:11:13Z,2020-02-21T17:50:35Z,2022-03-22T00:29:08Z,MERGED,True,64,1,3,https://github.com/sdlime,Adding processing option to classify 16bit rasters using scaled values instead of raw values.,13,[],https://github.com/mapserver/mapserver/pull/5834,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/5834#issuecomment-589767636,"Initial attempt at addressing issue #5830. Use would be something like:
    PROCESSING ""SCALE=10,50""
    PROCESSING ""SCALE_BUCKETS=256""
    PROCESSING ""CLASSIFY_SCALED=TRUE""

Only supported with 16bit rasters.
--Steve",thank you @sdlime !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5835,2019-07-03T11:21:32Z,2019-07-03T12:53:55Z,2019-07-03T12:54:02Z,MERGED,True,15,2,2,https://github.com/apps/backporting,[Backport branch-7-4] Allow sorting in MSSQL with WFS,2,[],https://github.com/mapserver/mapserver/pull/5835,https://github.com/apps/backporting,1,https://github.com/MapServer/MapServer/pull/5835,Backport #5833.,Backport #5833.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5836,2019-07-05T14:23:57Z,2019-07-11T19:09:43Z,2019-07-11T19:09:43Z,MERGED,True,105,3,5,https://github.com/rouault,GeoJSON output: automatically add a numberMatched property for WFS 2.0 GetFeature responses when wfs_compute_number_matched=true,1,[],https://github.com/mapserver/mapserver/pull/5836,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5836,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5839,2019-07-24T13:40:36Z,2020-03-20T18:26:36Z,2020-03-20T18:26:57Z,MERGED,True,253,29,16,https://github.com/jbo-ads,"SLD: Implement SLD ""Painters Model"" Style Layering",7,['Enhancement'],https://github.com/mapserver/mapserver/pull/5839,https://github.com/jbo-ads,1,https://github.com/MapServer/MapServer/pull/5839,"This pull request proposes an implementation of SLD ""Painters Model"" style layering, where all applicable classes are used for rendering a feature instead of only the first one in original MapServer policy. This is described in third section of MS RFC 124: Improving SLD Support in MapServer.","This pull request proposes an implementation of SLD ""Painters Model"" style layering, where all applicable classes are used for rendering a feature instead of only the first one in original MapServer policy. This is described in third section of MS RFC 124: Improving SLD Support in MapServer.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5839,2019-07-24T13:40:36Z,2020-03-20T18:26:36Z,2020-03-20T18:26:57Z,MERGED,True,253,29,16,https://github.com/jbo-ads,"SLD: Implement SLD ""Painters Model"" Style Layering",7,['Enhancement'],https://github.com/mapserver/mapserver/pull/5839,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5839#issuecomment-519206145,"This pull request proposes an implementation of SLD ""Painters Model"" style layering, where all applicable classes are used for rendering a feature instead of only the first one in original MapServer policy. This is described in third section of MS RFC 124: Improving SLD Support in MapServer.","The alternative here to achieve similar visual effects would be use multiple layers, correct? I could see this being more broadly popular so we really should expose this functionality via the mapfile/mapscript as well. I think that means exposing the layer RENDERMODE property and then the associated values. I guess that would mean on supporting something like:
RENDERMODE FIRSTCLASS|ANYCLASS
@geographika might have some opinion in terms of syntax. ANYCLASS is probably more descriptive than painter mode.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5839,2019-07-24T13:40:36Z,2020-03-20T18:26:36Z,2020-03-20T18:26:57Z,MERGED,True,253,29,16,https://github.com/jbo-ads,"SLD: Implement SLD ""Painters Model"" Style Layering",7,['Enhancement'],https://github.com/mapserver/mapserver/pull/5839,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5839#issuecomment-519218909,"This pull request proposes an implementation of SLD ""Painters Model"" style layering, where all applicable classes are used for rendering a feature instead of only the first one in original MapServer policy. This is described in third section of MS RFC 124: Improving SLD Support in MapServer.","Would a possible option be to have it as a PROCESSING directive? E.g.
PROCESSING ""RENDERMODE=FIRSTCLASS|ANYCLASS""
I think this would then already be supported by MapScript looking at this test, without need for modifications.
A couple of other options for the option naming (agree MS_PAINTERS_MODEL may be too technical:
FIRSTCLASSMATCH|ALLCLASSMATCH
Or slightly more literal but longer:
FIRSTMATCHINGCLASS|ALLMATCHINGCLASSES",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5839,2019-07-24T13:40:36Z,2020-03-20T18:26:36Z,2020-03-20T18:26:57Z,MERGED,True,253,29,16,https://github.com/jbo-ads,"SLD: Implement SLD ""Painters Model"" Style Layering",7,['Enhancement'],https://github.com/mapserver/mapserver/pull/5839,https://github.com/geographika,4,https://github.com/MapServer/MapServer/pull/5839#issuecomment-519219710,"This pull request proposes an implementation of SLD ""Painters Model"" style layering, where all applicable classes are used for rendering a feature instead of only the first one in original MapServer policy. This is described in third section of MS RFC 124: Improving SLD Support in MapServer.","With regards to using multiple classes from the same layer for a single feature, it is possible using GROUP in the class and then (at least with WMS) passing in style=group1,group2.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5839,2019-07-24T13:40:36Z,2020-03-20T18:26:36Z,2020-03-20T18:26:57Z,MERGED,True,253,29,16,https://github.com/jbo-ads,"SLD: Implement SLD ""Painters Model"" Style Layering",7,['Enhancement'],https://github.com/mapserver/mapserver/pull/5839,https://github.com/sdlime,5,https://github.com/MapServer/MapServer/pull/5839#issuecomment-519221743,"This pull request proposes an implementation of SLD ""Painters Model"" style layering, where all applicable classes are used for rendering a feature instead of only the first one in original MapServer policy. This is described in third section of MS RFC 124: Improving SLD Support in MapServer.",We don't have a good definition on when to add a full-on attribute vs using a processing directive. I agree that this feels more like a the latter...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5839,2019-07-24T13:40:36Z,2020-03-20T18:26:36Z,2020-03-20T18:26:57Z,MERGED,True,253,29,16,https://github.com/jbo-ads,"SLD: Implement SLD ""Painters Model"" Style Layering",7,['Enhancement'],https://github.com/mapserver/mapserver/pull/5839,https://github.com/jbo-ads,6,https://github.com/MapServer/MapServer/pull/5839#issuecomment-519577990,"This pull request proposes an implementation of SLD ""Painters Model"" style layering, where all applicable classes are used for rendering a feature instead of only the first one in original MapServer policy. This is described in third section of MS RFC 124: Improving SLD Support in MapServer.",You read my mind! Exposing layer RENDERMODE property was something I thought of when developing the feature for SLD. I will be more available on september for implementing this. I let you choose the syntax details that best fit existing usage.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5839,2019-07-24T13:40:36Z,2020-03-20T18:26:36Z,2020-03-20T18:26:57Z,MERGED,True,253,29,16,https://github.com/jbo-ads,"SLD: Implement SLD ""Painters Model"" Style Layering",7,['Enhancement'],https://github.com/mapserver/mapserver/pull/5839,https://github.com/jratike80,7,https://github.com/MapServer/MapServer/pull/5839#issuecomment-519847581,"This pull request proposes an implementation of SLD ""Painters Model"" style layering, where all applicable classes are used for rendering a feature instead of only the first one in original MapServer policy. This is described in third section of MS RFC 124: Improving SLD Support in MapServer.",I wonder what will happen if CLASSes have STYLEs with OPACITY. What is the result when RGBA 200 0 0 128 is rendered over RGBA 0 200 0 128?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5839,2019-07-24T13:40:36Z,2020-03-20T18:26:36Z,2020-03-20T18:26:57Z,MERGED,True,253,29,16,https://github.com/jbo-ads,"SLD: Implement SLD ""Painters Model"" Style Layering",7,['Enhancement'],https://github.com/mapserver/mapserver/pull/5839,https://github.com/jbo-ads,8,https://github.com/MapServer/MapServer/pull/5839#issuecomment-590919375,"This pull request proposes an implementation of SLD ""Painters Model"" style layering, where all applicable classes are used for rendering a feature instead of only the first one in original MapServer policy. This is described in third section of MS RFC 124: Improving SLD Support in MapServer.","@geographika, @sdlime: As suggested, I have added a processing directive:
PROCESSING ""RENDERMODE=FIRST_MATCHING_CLASS|ALL_MATCHING_CLASSES""",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5839,2019-07-24T13:40:36Z,2020-03-20T18:26:36Z,2020-03-20T18:26:57Z,MERGED,True,253,29,16,https://github.com/jbo-ads,"SLD: Implement SLD ""Painters Model"" Style Layering",7,['Enhancement'],https://github.com/mapserver/mapserver/pull/5839,https://github.com/jmckenna,9,https://github.com/MapServer/MapServer/pull/5839#issuecomment-601848946,"This pull request proposes an implementation of SLD ""Painters Model"" style layering, where all applicable classes are used for rendering a feature instead of only the first one in original MapServer policy. This is described in third section of MS RFC 124: Improving SLD Support in MapServer.","@jbo-ads cool feature, thanks!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5841,2019-07-26T17:08:16Z,2019-07-30T20:44:52Z,2019-07-30T20:44:52Z,MERGED,True,2,0,1,https://github.com/rouault,MSSQL2008: deal with termination '$' at end of regular expression. Follow-up of eea166a5157d4742b617cd7561c62cd2df5c8f5c (refs #5825),1,[],https://github.com/mapserver/mapserver/pull/5841,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5841,"@geographika I believe this should do it, but couldn't test. I'd appreciate if you could report if it solves your issue
We should probably add mssql tests in msautotest. Relevant snippets from GDAL autotest suite: https://github.com/OSGeo/gdal/blob/master/gdal/ci/travis/ubuntu_1604/before_install.sh#L10 and https://github.com/OSGeo/gdal/blob/master/gdal/ci/travis/ubuntu_1604/before_install.sh#L46","@geographika I believe this should do it, but couldn't test. I'd appreciate if you could report if it solves your issue
We should probably add mssql tests in msautotest. Relevant snippets from GDAL autotest suite: https://github.com/OSGeo/gdal/blob/master/gdal/ci/travis/ubuntu_1604/before_install.sh#L10 and https://github.com/OSGeo/gdal/blob/master/gdal/ci/travis/ubuntu_1604/before_install.sh#L46",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5841,2019-07-26T17:08:16Z,2019-07-30T20:44:52Z,2019-07-30T20:44:52Z,MERGED,True,2,0,1,https://github.com/rouault,MSSQL2008: deal with termination '$' at end of regular expression. Follow-up of eea166a5157d4742b617cd7561c62cd2df5c8f5c (refs #5825),1,[],https://github.com/mapserver/mapserver/pull/5841,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5841#issuecomment-515587526,"@geographika I believe this should do it, but couldn't test. I'd appreciate if you could report if it solves your issue
We should probably add mssql tests in msautotest. Relevant snippets from GDAL autotest suite: https://github.com/OSGeo/gdal/blob/master/gdal/ci/travis/ubuntu_1604/before_install.sh#L10 and https://github.com/OSGeo/gdal/blob/master/gdal/ci/travis/ubuntu_1604/before_install.sh#L46","@rouault - many thanks, that removed the $ and the LIKE queries are working again. I didn't realise it was an issue with the MSSQL driver only.
Yes the MSSQL driver could do with some tests / testdb. I forgot we could also test on Linux now as well. I'll try and get something running in the next couple of months.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5843,2019-08-01T14:38:39Z,2019-09-08T21:00:19Z,2019-09-08T21:00:19Z,MERGED,True,8,2,2,https://github.com/geographika,Add vector tiles output to Appveyor build,11,[],https://github.com/mapserver/mapserver/pull/5843,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5843,"protobuf files are all available in the SDK from https://www.gisinternals.com/
Currently failing at:
  Generating renderers/mvt/vector_tile.pb-c.c, renderers/mvt/vector_tile.pb-c.h
  The system cannot find the path specified.

This is run in CMakeLists.txt with:
   FILE(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/renderers/mvt)
    # Create custom command for protoc-c
    ADD_CUSTOM_COMMAND(
       COMMAND ${PROTOBUFC_COMPILER}
       ARGS --c_out=${PROJECT_BINARY_DIR}/renderers/mvt --proto_path=${PROJECT_SOURCE_DIR}/renderers/mvt ${PROJECT_SOURCE_DIR}/renderers/mvt/vector_tile.proto
       OUTPUT ${PROJECT_BINARY_DIR}/renderers/mvt/vector_tile.pb-c.c ${PROJECT_BINARY_DIR}/renderers/mvt/vector_tile.pb-c.h
    )

PROJECT_BINARY_DIR is set to C:/projects/mapserver/build which looks correct.","protobuf files are all available in the SDK from https://www.gisinternals.com/
Currently failing at:
  Generating renderers/mvt/vector_tile.pb-c.c, renderers/mvt/vector_tile.pb-c.h
  The system cannot find the path specified.

This is run in CMakeLists.txt with:
   FILE(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/renderers/mvt)
    # Create custom command for protoc-c
    ADD_CUSTOM_COMMAND(
       COMMAND ${PROTOBUFC_COMPILER}
       ARGS --c_out=${PROJECT_BINARY_DIR}/renderers/mvt --proto_path=${PROJECT_SOURCE_DIR}/renderers/mvt ${PROJECT_SOURCE_DIR}/renderers/mvt/vector_tile.proto
       OUTPUT ${PROJECT_BINARY_DIR}/renderers/mvt/vector_tile.pb-c.c ${PROJECT_BINARY_DIR}/renderers/mvt/vector_tile.pb-c.h
    )

PROJECT_BINARY_DIR is set to C:/projects/mapserver/build which looks correct.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5845,2019-08-16T13:37:30Z,2019-08-23T14:16:59Z,2019-08-23T14:16:59Z,MERGED,True,14,0,1,https://github.com/offroad-bis,Fix Undefined symbols compile error on macOS.,1,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5845,https://github.com/offroad-bis,1,https://github.com/MapServer/MapServer/pull/5845,Added block of code defining -undefined dynamic_lookup for a LINK_FLAG to fix Undefined symbols for architecture x86_64: error when compiling.  Code block was taken directly from the CMakeLists.txt file located in the mapscript/php directory.,Added block of code defining -undefined dynamic_lookup for a LINK_FLAG to fix Undefined symbols for architecture x86_64: error when compiling.  Code block was taken directly from the CMakeLists.txt file located in the mapscript/php directory.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5845,2019-08-16T13:37:30Z,2019-08-23T14:16:59Z,2019-08-23T14:16:59Z,MERGED,True,14,0,1,https://github.com/offroad-bis,Fix Undefined symbols compile error on macOS.,1,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5845,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5845#issuecomment-523818874,Added block of code defining -undefined dynamic_lookup for a LINK_FLAG to fix Undefined symbols for architecture x86_64: error when compiling.  Code block was taken directly from the CMakeLists.txt file located in the mapscript/php directory.,"I'm wondering if a better fix wouldn't be to have SWIG_LINK_LIBRARIES(php_mapscriptng ${PHP_LIBRARY}) to be used on all platforms instead of jut on WIN32 (see line 62 of
mapscript/phpng/CMakeLists.txt)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5845,2019-08-16T13:37:30Z,2019-08-23T14:16:59Z,2019-08-23T14:16:59Z,MERGED,True,14,0,1,https://github.com/offroad-bis,Fix Undefined symbols compile error on macOS.,1,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5845,https://github.com/offroad-bis,3,https://github.com/MapServer/MapServer/pull/5845#issuecomment-523967537,Added block of code defining -undefined dynamic_lookup for a LINK_FLAG to fix Undefined symbols for architecture x86_64: error when compiling.  Code block was taken directly from the CMakeLists.txt file located in the mapscript/php directory.,"Unfortunately, I don't know much about linking and compiling. I am just starting to learn so I can hopefully help contribute.  The information I found while researching the errors that I was getting when compiling was all related to setting a link flag of -undefined dynamic_lookup for macOS.  When I found how that had been done for APPLE in php_mapscript CMakeLists.txt file, I tried it in the phpng CMakeLists.txt file and the compile worked.  Here are the errors I was getting.
[100%] Linking C shared module php_mapscriptng.so cd /tmp/mapserver-20190822-2120-1mn73yf/mapserver-7.4.1/build/mapscript/phpng && /usr/local/Cellar/cmake/3.15.2/bin/cmake -E cmake_link_script CMakeFiles/php_mapscriptng.dir/link.txt --verbose=1 /usr/local/Homebrew/Library/Homebrew/shims/mac/super/clang  -DACCEPT_USE_OF_DEPRECATED_PROJ_API_H -DNDEBUG -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk -bundle -Wl,-headerpad_max_install_names  -o php_mapscriptng.so CMakeFiles/php_mapscriptng.dir/CMakeFiles/php_mapscriptng.dir/mapscriptPHP7_wrap.c.o ../../libmapserver.7.4.1.dylib /usr/local/lib/libpng.dylib /usr/lib/libz.dylib /usr/local/lib/libjpeg.dylib /usr/local/lib/libfreetype.dylib /usr/local/lib/libproj.dylib /usr/local/lib/libprotobuf-c.dylib /usr/lib/libiconv.dylib /usr/local/lib/libcairo.dylib /usr/local/lib/libgeos_c.dylib /usr/local/opt/libpq/lib/libpq.dylib /usr/local/lib/libgdal.dylib /usr/local/opt/curl-openssl/lib/libcurl.dylib /usr/local/opt/libxml2/lib/libxml2.dylib /usr/local/lib/libgif.dylib -lm  Undefined symbols for architecture x86_64: ""__convert_to_string"", referenced from: __wrap_CompositingFilter_filter_set in mapscriptPHP7_wrap.c.o __wrap_clusterObj_region_set in mapscriptPHP7_wrap.c.o __wrap_clusterObj_updateFromString in mapscriptPHP7_wrap.c.o __wrap_clusterObj_setGroup in mapscriptPHP7_wrap.c.o __wrap_clusterObj_setFilter in mapscriptPHP7_wrap.c.o __wrap_outputFormatObj_name_set in mapscriptPHP7_wrap.c.o __wrap_outputFormatObj_mimetype_set in mapscriptPHP7_wrap.c.o ... ""__efree"", referenced from: _SWIG_SetPointerZval in mapscriptPHP7_wrap.c.o __wrap_destroy_p_scaleTokenEntryObj in mapscriptPHP7_wrap.c.o __swig_default_rsrc_destroy in mapscriptPHP7_wrap.c.o __wrap_destroy_p_markerCacheMemberObj in mapscriptPHP7_wrap.c.o __wrap_destroy_p_labelCacheMemberObj in mapscriptPHP7_wrap.c.o __wrap_destroy_p__LayerCompositer in mapscriptPHP7_wrap.c.o __wrap_destroy_p_lineObj in mapscriptPHP7_wrap.c.o ... ""__emalloc"", referenced from: _SWIG_SetPointerZval in mapscriptPHP7_wrap.c.o __wrap_CompositingFilter_filter_get in mapscriptPHP7_wrap.c.o __wrap_fontSetObj_filename_get in mapscriptPHP7_wrap.c.o __wrap_clusterObj_region_get in mapscriptPHP7_wrap.c.o __wrap_clusterObj_convertToString in mapscriptPHP7_wrap.c.o __wrap_clusterObj_getGroupString in mapscriptPHP7_wrap.c.o __wrap_clusterObj_getFilterString in mapscriptPHP7_wrap.c.o ... ""__emalloc_16"", referenced from: _SWIG_SetPointerZval in mapscriptPHP7_wrap.c.o __wrap_imageObj_getBytes in mapscriptPHP7_wrap.c.o __wrap_msIO_getStdoutBufferBytes in mapscriptPHP7_wrap.c.o ""__emalloc_56"", referenced from: _SWIG_SetPointerZval in mapscriptPHP7_wrap.c.o __wrap_layerObj_utfdata_get in mapscriptPHP7_wrap.c.o ""__zend_get_parameters_array_ex"", referenced from: __wrap_swig_mapscript_alter_newobject in mapscriptPHP7_wrap.c.o __wrap_swig_mapscript_get_newobject in mapscriptPHP7_wrap.c.o __wrap_new_intarray in mapscriptPHP7_wrap.c.o __wrap_intarray_getitem in mapscriptPHP7_wrap.c.o __wrap_intarray_setitem in mapscriptPHP7_wrap.c.o __wrap_intarray_cast in mapscriptPHP7_wrap.c.o __wrap_intarray_frompointer in mapscriptPHP7_wrap.c.o ...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5845,2019-08-16T13:37:30Z,2019-08-23T14:16:59Z,2019-08-23T14:16:59Z,MERGED,True,14,0,1,https://github.com/offroad-bis,Fix Undefined symbols compile error on macOS.,1,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5845,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/5845#issuecomment-523970744,Added block of code defining -undefined dynamic_lookup for a LINK_FLAG to fix Undefined symbols for architecture x86_64: error when compiling.  Code block was taken directly from the CMakeLists.txt file located in the mapscript/php directory.,"Here are the errors I was getting.

yes, those are symbols from the PHP library, hence my suggestion to link against it. The trick used in mapscript/php feels more like a hack than a proper fix
So basically, I'm suggestiong (untested !)
$ git diff ../mapscript/phpng/CMakeLists.txt
diff --git a/mapscript/phpng/CMakeLists.txt b/mapscript/phpng/CMakeLists.txt
index 75593e9..2e78a6b 100644
--- a/mapscript/phpng/CMakeLists.txt
+++ b/mapscript/phpng/CMakeLists.txt
@@ -59,9 +59,10 @@ if(WIN32)
   if(WITH_THREAD_SAFETY)
     target_compile_options(php_mapscriptng PRIVATE /DZTS=1)
   endif(WITH_THREAD_SAFETY)
-  SWIG_LINK_LIBRARIES(php_mapscriptng ${PHP_LIBRARY})
 endif(WIN32)
 
+SWIG_LINK_LIBRARIES(php_mapscriptng ${PHP_LIBRARY})
+
 # hide ""defined but not used"" warnings
 target_compile_options(php_mapscriptng PRIVATE -Wno-unused-label)
 

Can you test this ?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5845,2019-08-16T13:37:30Z,2019-08-23T14:16:59Z,2019-08-23T14:16:59Z,MERGED,True,14,0,1,https://github.com/offroad-bis,Fix Undefined symbols compile error on macOS.,1,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5845,https://github.com/offroad-bis,5,https://github.com/MapServer/MapServer/pull/5845#issuecomment-523974891,Added block of code defining -undefined dynamic_lookup for a LINK_FLAG to fix Undefined symbols for architecture x86_64: error when compiling.  Code block was taken directly from the CMakeLists.txt file located in the mapscript/php directory.,"I got the following errors when running cmake after making the changes.

bash-3.2$ cmake ..
-- /usr/local/Cellar/php/7.3.8/include/php/main
-- Found PHP-Version 7.3.8 (using /usr/local/bin/php-config)
-- PHP Include Path: /usr/include/php;/usr/local/include/php;/usr/include/php;/usr/local/include/php;/usr/local/apache/php;/usr/local/include/php/Zend;/usr/local/include/php/main;/usr/local/include/php/TSRM;INTERNAL;PHP include paths
-- * Summary of configured options for this build
--  * Mandatory components
--   * png: /usr/local/lib/libpng.dylib
--   * jpeg: /usr/local/lib/libjpeg.dylib
--   * freetype: /usr/local/lib/libfreetype.dylib
--  * Optional components
--   * GDAL: /usr/local/lib/libgdal.dylib
--   * OGR: /usr/local/lib/libgdal.dylib
--   * GIF: /usr/local/lib/libgif.dylib
--   * MYSQL: disabled
--   * FRIBIDI: disabled
--   * HARFBUZZ: disabled
--   * GIF: /usr/local/lib/libgif.dylib
--   * CAIRO: /usr/local/lib/libcairo.dylib
--   * SVGCAIRO: disabled
--   * RSVG: disabled
--   * CURL: /usr/local/opt/curl-openssl/lib/libcurl.dylib
--   * PROJ: /usr/local/lib/libproj.dylib
--   * PIXMAN: disabled
--   * LIBXML2: /usr/local/opt/libxml2/lib/libxml2.dylib
--   * POSTGIS: /usr/local/opt/libpq/lib/libpq.dylib
--   * GEOS: /usr/local/lib/libgeos_c.dylib
--   * FastCGI: /usr/local/lib/libfcgi.dylib
--   * PROTOBUFC: /usr/local/lib/libprotobuf-c.dylib
--   * Oracle Spatial: disabled
--   * Exempi XMP: disabled
--  * Optional features
--   * WMS SERVER: ENABLED
--   * WFS SERVER: ENABLED
--   * WCS SERVER: ENABLED
--   * SOS SERVER: ENABLED
--   * WMS CLIENT: ENABLED
--   * WFS CLIENT: ENABLED
--   * ICONV: ENABLED
--   * Thread-safety support: disabled
--   * KML output: ENABLED
--   * Z+M point coordinate support: disabled
--   * XML Mapfile support: disabled
--  * Mapscripts
--   * Python: disabled
--   * PHP: disabled
--   * PHPNG: ENABLED
--   * PERL: disabled
--   * RUBY: disabled
--   * JAVA: disabled
--   * C#: disabled
--   * V8 Javascript: disabled
--   * Apache Module (Experimental): disabled
-- 
-- Will install files to /usr/local/Cellar/mapserver/7.4.1_1
-- Will install libraries to /usr/local/Cellar/mapserver/7.4.1_1/lib
CMake Error: The following variables are used in this project, but they are set to NOTFOUND.
Please set them or make sure they are set and tested correctly in the CMake files:
PHP_LIBRARY
    linked by target ""php_mapscriptng"" in directory /tmp/mapserver-20190822-2120-1mn73yf/mapserver-7.4.1/mapscript/phpng
…
-- Configuring incomplete, errors occurred!
See also ""/tmp/mapserver-20190822-2120-1mn73yf/mapserver-7.4.1/build/CMakeFiles/CMakeOutput.log"".
See also ""/tmp/mapserver-20190822-2120-1mn73yf/mapserver-7.4.1/build/CMakeFiles/CMakeError.log"".





On Aug 22, 2019, at 11:06 AM, Even Rouault <notifications@github.com> wrote:

Here are the errors I was getting.

yes, those are symbols from the PHP library, hence my suggestion to link against it. The trick used in mapscript/php feels more like a hack than a proper fix

So basically, I'm suggestiong (untested !)

$ git diff ../mapscript/phpng/CMakeLists.txt
diff --git a/mapscript/phpng/CMakeLists.txt b/mapscript/phpng/CMakeLists.txt
index 75593e9..2e78a6b 100644
--- a/mapscript/phpng/CMakeLists.txt
+++ b/mapscript/phpng/CMakeLists.txt
@@ -59,9 +59,10 @@ if(WIN32)
   if(WITH_THREAD_SAFETY)
     target_compile_options(php_mapscriptng PRIVATE /DZTS=1)
   endif(WITH_THREAD_SAFETY)
-  SWIG_LINK_LIBRARIES(php_mapscriptng ${PHP_LIBRARY})
 endif(WIN32)

+SWIG_LINK_LIBRARIES(php_mapscriptng ${PHP_LIBRARY})
+
 # hide ""defined but not used"" warnings
 target_compile_options(php_mapscriptng PRIVATE -Wno-unused-label)

Can you test this ?

—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub <#5845>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ALCQT6GEYUUOLMXONDP45WDQF22Q5ANCNFSM4IMHSCFA>.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5845,2019-08-16T13:37:30Z,2019-08-23T14:16:59Z,2019-08-23T14:16:59Z,MERGED,True,14,0,1,https://github.com/offroad-bis,Fix Undefined symbols compile error on macOS.,1,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5845,https://github.com/rouault,6,https://github.com/MapServer/MapServer/pull/5845#issuecomment-524312477,Added block of code defining -undefined dynamic_lookup for a LINK_FLAG to fix Undefined symbols for architecture x86_64: error when compiling.  Code block was taken directly from the CMakeLists.txt file located in the mapscript/php directory.,"OK, then it means that the find_library() in cmake/FindPHP.cmake doesn't manage to find the PHP library on your environment",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5845,2019-08-16T13:37:30Z,2019-08-23T14:16:59Z,2019-08-23T14:16:59Z,MERGED,True,14,0,1,https://github.com/offroad-bis,Fix Undefined symbols compile error on macOS.,1,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5845,https://github.com/offroad-bis,7,https://github.com/MapServer/MapServer/pull/5845#issuecomment-524328341,Added block of code defining -undefined dynamic_lookup for a LINK_FLAG to fix Undefined symbols for architecture x86_64: error when compiling.  Code block was taken directly from the CMakeLists.txt file located in the mapscript/php directory.,"Thank you for your time on this.
I agree FindPHP.cmake is not finding the php library.  I tried to get the FindPHP.cmake to find the php library, but I am not sure what it is looking for or if Homebrew's build of php actually created the library.  I found a libphp7.so file in /usr/local/Cellar/php/7.3.8/lib/httpd/modules/ so I tried adding that path to the cmake/FindPHP.cmake file.
find_library(PHP_LIBRARY NAMES php5ts php5 php7ts php7 PATHS /sw /opt/local /usr/local/Cellar/php/7.3.8/lib/httpd/modules/)
And I got the following error.
ld: can't link with bundle (MH_BUNDLE) only dylibs (MH_DYLIB) file '/usr/local/Cellar/php/7.3.8/lib/httpd/modules/libphp7.so' for architecture x86_64
What file is the php library file name?  Could this be a problem with Homebrew's php not installing a shared library?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5845,2019-08-16T13:37:30Z,2019-08-23T14:16:59Z,2019-08-23T14:16:59Z,MERGED,True,14,0,1,https://github.com/offroad-bis,Fix Undefined symbols compile error on macOS.,1,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5845,https://github.com/rouault,8,https://github.com/MapServer/MapServer/pull/5845#issuecomment-524332332,Added block of code defining -undefined dynamic_lookup for a LINK_FLAG to fix Undefined symbols for architecture x86_64: error when compiling.  Code block was taken directly from the CMakeLists.txt file located in the mapscript/php directory.,"Hum, ok, I'm neither good at CMake or PHP, so I'll merge your patch as it. Thanks",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5848,2019-08-22T14:49:30Z,2019-08-23T13:20:45Z,2019-08-23T13:20:45Z,MERGED,True,402,149,3,https://github.com/rouault,Update mapaxisorder.h/.csv to EPSG 9.7.0 database,1,[],https://github.com/mapserver/mapserver/pull/5848,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5848,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5849,2019-08-23T14:17:11Z,2019-08-23T15:36:21Z,2019-09-16T19:58:46Z,MERGED,True,14,0,1,https://github.com/apps/backporting,[Backport branch-7-4] Fix Undefined symbols compile error on macOS.,1,[],https://github.com/mapserver/mapserver/pull/5849,https://github.com/apps/backporting,1,https://github.com/MapServer/MapServer/pull/5849,Backport #5845.,Backport #5845.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5851,2019-09-04T17:13:50Z,2019-09-05T12:01:26Z,2019-09-05T12:01:26Z,MERGED,True,140,134,27,https://github.com/rouault,"Assorted set of compiler warning fixes, and remove need for DEBUG 3",1,[],https://github.com/mapserver/mapserver/pull/5851,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5851,"Mostly boring compiler warning fixes, but there were interesting issues
in mapquery.c function where the emission of msSetError(MS_NOTFOUND, )
depended on lp->debug >= MS_DEBUGLEVEL_V, which seems inappropriate,
as a few mapfiles actually needed to have DEBUG 3 in their LAYER definition.
Just always emit the error.","Mostly boring compiler warning fixes, but there were interesting issues
in mapquery.c function where the emission of msSetError(MS_NOTFOUND, )
depended on lp->debug >= MS_DEBUGLEVEL_V, which seems inappropriate,
as a few mapfiles actually needed to have DEBUG 3 in their LAYER definition.
Just always emit the error.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5853,2019-09-05T13:01:37Z,2019-09-05T14:04:24Z,2019-09-05T14:04:24Z,MERGED,True,22,15,2,https://github.com/rouault,Fix memory leaks found when running msautotest/sld tests,1,[],https://github.com/mapserver/mapserver/pull/5853,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5853,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/5854,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5854#issuecomment-528485842,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","Nuts, looks like GEOSVoronoiDiagram_r was introduced in GEOS 3.5 and AppVeyor must be referencing something older. Regardless I'll need to update the pull request with a version check...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/5854#issuecomment-676537149,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve",This would be a good one to tackle/finish for the 8.0 release.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/5854#issuecomment-772635568,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","@sdlime Is there some pending work ? Otherwise I could do final review, polishing, rebase to latest master and add tests",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,5,https://github.com/MapServer/MapServer/pull/5854#issuecomment-773014108,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","Hi @rouault and @jmckenna... I'm not quite sure what to do with this one - it's still sort of a WIP (I edited the pull request name to reflect that). I think it could be a cool new feature but I'm concerned about performance and that my method of computing the medial axis approximation from the Voronoi diagram is sub-optimal (mostly based on trial and error, literature is sketchy). The goal was skeletonization to facilitate labeling. I suppose if we got it in shape versus main we could solicit feedback in the near term and then make a call relative to 8.0. Any help in making that happen would be most welcome...
--Steve
https://stackoverflow.com/questions/29921826/how-do-i-calculate-the-medial-axis-for-a-2d-vector-shape",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/jratike80,6,https://github.com/MapServer/MapServer/pull/5854#issuecomment-773095769,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","You might be interested in having a look at the OpenJUMP skeletonizer plugin as a reference. The zip file contains also Java source code and documentation. The theory and some considerations about exceptional cases are in the Technical Summary part.
https://sourceforge.net/projects/jump-pilot/files/OpenJUMP_plugins/More%20Plugins/JUMP%20Skeletonizer%20Plugin/",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,7,https://github.com/MapServer/MapServer/pull/5854#issuecomment-774137018,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","You might be interested in having a look at the OpenJUMP skeletonizer plugin as a reference. The zip file contains also Java source code and documentation. The theory and some considerations about exceptional cases are in the Technical Summary part.
https://sourceforge.net/projects/jump-pilot/files/OpenJUMP_plugins/More%20Plugins/JUMP%20Skeletonizer%20Plugin/

Will have a look. I'm curious how the existing code works for folks though. I need to rebase against main and update the pull request. Anyone interesting in trying it out?
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/jmckenna,8,https://github.com/MapServer/MapServer/pull/5854#issuecomment-774145363,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","@sdlime I'm very interested, I had a response written here last night but didn't press the green button ha, asking for your working test .map file + data ;)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/jmckenna,9,https://github.com/MapServer/MapServer/pull/5854#issuecomment-774145905,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","but will test here now, and make a test mapfile + data....",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/jmckenna,10,https://github.com/MapServer/MapServer/pull/5854#issuecomment-774230504,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","@sdlime I have built your branch, but I think it would be good to update to latest 'main' (as I notice that your branch requires 'mapprojhack.c' and is missing 'mapiconv.c').  I was able to build it on Windows, but mapserv seems to fail silently and a map image is not generated when I enable: GEOMTRANSFORM (medialaxis([shape], -15))",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,11,https://github.com/MapServer/MapServer/pull/5854#issuecomment-776314955,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","@sdlime I have built your branch, but I think it would be good to update to latest 'main' (as I notice that your branch requires 'mapprojhack.c' and is missing 'mapiconv.c'). I was able to build it on Windows, but mapserv seems to fail silently and a map image is not generated when I enable: GEOMTRANSFORM (medialaxis([shape], -15))

I think I rebased correctly (I hope). Can you give it another try?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/jmckenna,12,https://github.com/MapServer/MapServer/pull/5854#issuecomment-776814277,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","@sdlime I tried with your latest branch, same result (mapserv fails silently and no image is created).  But maybe it's my test case.  Here is what I'm using: https://gatewaygeomatics.com/dl/ticket-5854-medial-axis.zip",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,13,https://github.com/MapServer/MapServer/pull/5854#issuecomment-776849559,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","@sdlime I tried with your latest branch, same result (mapserv fails silently and no image is created). But maybe it's my test case. Here is what I'm using: https://gatewaygeomatics.com/dl/ticket-5854-medial-axis.zip

I'll have a look. What version of GEOS do you have (requires 3.5+)?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/jmckenna,14,https://github.com/MapServer/MapServer/pull/5854#issuecomment-776864182,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve",GEOS 3.9.0,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/jmckenna,15,https://github.com/MapServer/MapServer/pull/5854#issuecomment-777005837,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve",(related: GEOS 3.9.1 has just been released today),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,16,https://github.com/MapServer/MapServer/pull/5854#issuecomment-777026356,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","(related: GEOS 3.9.1 has just been released today)

It's generating a segfault so I can replicate...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/jmckenna,17,https://github.com/MapServer/MapServer/pull/5854#issuecomment-777028292,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","ah, glad, thanks.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,18,https://github.com/MapServer/MapServer/pull/5854#issuecomment-777495289,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","ah, glad, thanks.

Fixed the issue. The functions that operate on the resulting network can go too far and result in a NULL geometry... Your test case runs now.
Started a wiki page on the algorithm(s) being used (https://github.com/MapServer/MapServer/wiki/Medial-Axis-Approximation), no sense cluttering up the pull request.
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/jmckenna,19,https://github.com/MapServer/MapServer/pull/5854#issuecomment-777775774,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","Thanks Steve.  I want to give you the results of my local testing (sorry if some of it is known to you, but I have to explain for the other curious quiet readers here), as I try to get to your similar nice label of ""Lower Prior"" location in the middle of my main polygon. as this trial-error workflow would be the exact steps a regular user would do, as they try to get a magical angled label in the middle of their big polygon...
Raw Polygon

GEOMTRANSFORM (medialaxis([shape], 1))
mapserv hangs forever, have to cancel shp2img request, no image generated  (actually any tolerance value above zero hangs mapserv)
GEOMTRANSFORM (medialaxis([shape], 0))

GEOMTRANSFORM (medialaxis([shape], -15))

GEOMTRANSFORM (medialaxis([shape], -30))

It's about this time that I realize my Nova Scotia main polygon isn't the best test for this algorithm, so I must settle with..

GEOMTRANSFORM (medialaxis([shape], 0))
a small size 5 label (any larger value will not display the label)
MINFEATURESIZE 50
disabled the line style
so that I get at least one angled label inside the main polygon, however not where I want it to be (which is really the ""Lower Prior""  location in Steve's examples).


Let me know if I'm understanding this properly.  I think my examples though will be the exact trial/error of a normal user trying to get an angled label inside their main polygon.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/jmckenna,20,https://github.com/MapServer/MapServer/pull/5854#issuecomment-777791947,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","More feedback: regarding speed, there is a hit but not too bad (3X), such as:

0.038s (polygon label)

0.131s (medialaxis)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,21,https://github.com/MapServer/MapServer/pull/5854#issuecomment-777806213,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","If you go look at the wiki animation I think you're seeing the limitations of the algorithm described in step 5 and the notes section. That will be key. With your polygon, one more trip through the dangling line removal algorithm would be just the ticket. That's the bit that needs attention... You can edit mapgeos.c and edit the segmentRatioThreshold value. It's 0.10 now and you could try dropping to 0.05 or whatever, recompile and try your demo.

Regarding your specific instance observations:

  *   GEOMTRANSFORM (medialaxis([shape], 1)) - Well that's densifying the geometry with a vertex every meter so that's going to take forever, plus that results in a massive Thiessen Polygon computation and subsequent processing. You kinda need this option with very sparse polygons (see my second example in the ticket) but you can hose yourself - so don't do that. We could take the option away and require the user to call generalize or densify functions independently - e.g. GEOMTRANSFORM (medialaxis( generalize([shape], 100) )
  *   I don't exactly understand the differences between 0, -15 and -30. What I think is happening is that your data is way less dense and those values might not be having the affect we hope for. I'll need to do more investigating. You could add another layer that uses the simplify (or generalize?) function independently to see what's going on. I'll do the same.
  *
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,22,https://github.com/MapServer/MapServer/pull/5854#issuecomment-778255261,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","Jeff: So, if I change my algorithm to remove spurs until I can't anymore, you end up with something like the images below. Not a medial access transformation, more of a polygon label line generator. This uses MAXFEATURESIZE AUTO to avoid labeling the small stuff. Certainly not perfect but much better.
There are possible issues with features with islands where the rings around the islands persist (think of a balloon with a string) and if the ring is long enough relative to the string, the label will get placed around the island. Perhaps an option to ignore inner rings would be useful since often you don't care if a label crosses those - in a lake for example. I think that's the easiest solution.
Also the resulting line geometry can be pretty complex for labeling, I think the main Nova Scotia label is an example - it would be better if it was a simpler shape. You can run a simplification function (10000m) on the resulting geometry (second image). I could see adding a smoothing function as a another option.
So I'm now thinking:

Renaming this function since it's not a medial axis transformation.
Removing the tolerance argument and instead opting to let a user transform the input to the function as they see fit.
Adding an ignore inner rings argument. Actually adding/exposing a remove rings function to the parser would be more generally useful - especially for rendering (both inner and outer).
Adding/exposing a smooth function to the expression parser, not sure if GEOS has something or not.
Adding/exposing a densify function to the expression parser, not sure if GEOS has something or not. What's in the code now, either I wrote or it was pilfered from the projection code in MapServer.



--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/jmckenna,23,https://github.com/MapServer/MapServer/pull/5854#issuecomment-778306556,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","Nice Steve, I modified mapgeos.c as you said and changed to segmentRatioThreshold = 0.01 and it gives your first result

Then as you, I want to simplify or smooth the line (it took me a few tries to figure out the correct syntax in the LAYER to chain a simplify with a medialaxis call:
GEOMTRANSFORM (simplify((medialaxis([shape], 0)), 10000))
which gives your latest result:

Now I'm also wondering if GEOS has a smooth function.
Wow this is so very useful to MapServer users.  You're right the proper use-case is lake polygons, and less verticies.
I also wonder if there is a way, for your new renamed function, to not require users to first chain it with simplify or smooth, and trigger that in the parameters of this new function instead (as I bet soon users will be coming to this ticket and reading how to combine these here, even though it is actually deep in the docs).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/jmckenna,24,https://github.com/MapServer/MapServer/pull/5854#issuecomment-778308225,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","Also, how will the user set this segmentRatioThreshold ?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/jmckenna,25,https://github.com/MapServer/MapServer/pull/5854#issuecomment-778310663,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","Maybe my comment about combining these chained requests into the new function is odd, and could be ignored.  Anyway that did pop into my head, but now that I think on it more, users should become used to running the resulting shape through multiple of these functions.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,26,https://github.com/MapServer/MapServer/pull/5854#issuecomment-778328705,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","Also, how will the user set this segmentRatioThreshold ?

This goes away. We de-dangle until:

the resulting geometry is NULL and we revert to the previous version, basically there's just a single resulting line OR
the process doesn't further reduced the number of lines in the resulting shape (no improvement) - this prevents infinite looping in a case the second image from the top (a rectangle w/two islands)

--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/jmckenna,27,https://github.com/MapServer/MapServer/pull/5854#issuecomment-778331189,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve",Steve I tried to pull from upstream the latest changes from main into your branch.  Please check that I didn't mangle your changes in mapgeos.c as there were some other recent changes there.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/jmckenna,28,https://github.com/MapServer/MapServer/pull/5854#issuecomment-778332286,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","This goes away. We de-dangle until:
* the resulting geometry is NULL and we revert to the previous version, basically there's just a single resulting line OR

* the process doesn't further reduced the number of lines in the resulting shape (no improvement) - this prevents infinite looping in a case the second image from the top (a rectangle w/two islands)


Thanks, makes sense.  Very interesting (your wiki images helped me understand the de-dangle process).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,29,https://github.com/MapServer/MapServer/pull/5854#issuecomment-778335906,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","Thanks, makes sense. Very interesting (your wiki images helped me understand the de-dangle process).

Pruning is a better term. Really looking for something closer to a Scale Axis Transformation (which is derived from the MAT). Here's a good diagram... https://ars.els-cdn.com/content/image/1-s2.0-S0097849312000684-fx1.jpg",True,{'THUMBS_UP': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,30,https://github.com/MapServer/MapServer/pull/5854#issuecomment-779926069,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","Ok, I refactored things a bit:

Since this isn't really a medial axis transformation I generalized the function name to ""skeletonize"".
The skeletonize function takes 1 optional argument - pruning depth. The default is -1 (for AUTO), 0 does no pruning and positive integers set the maximum number of pruning iterations being done.
I exposed ""densify"" as a new expression function that takes a tolerance argument (similar to simplify). This function can be useful for simple geometries.
I added to new functions ""inner"" and ""outer"" that return the corresponding rings from an input polygon as a new shapeObj. The outer function is particularly useful in this context where, for example, you might want ignore islands when labeling a lake.

So, a common use case now looks like:
LAYER
    NAME ""lakes""
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (skeletonize(outer([shape])))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/jmckenna,31,https://github.com/MapServer/MapServer/pull/5854#issuecomment-780157388,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","Thanks Steve.  For the record, with skeletonize I have to set a depth of 3 to get my previous results, such as: GEOMTRANSFORM (simplify((skeletonize([shape], 3)), 10000))
I also played with this locally with a simple great lakes polygon file (I am hesitant to mention this here, as we could be debugging forever each test dataset ha).  But I was able to get from the raw labels:

to better labels using skeletonize with depth 1 (to be honest it seems I need a value between 0 and 1, which I realize isn't possible) and some simplifying (and FORCE TRUE labels) through: GEOMTRANSFORM (simplify((skeletonize([shape], 1)), 0.7))",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/jmckenna,32,https://github.com/MapServer/MapServer/pull/5854#issuecomment-780168671,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","I'm +1 for this now.  (and then can start the related doc updates, once this is merged)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,33,https://github.com/MapServer/MapServer/pull/5854#issuecomment-780179837,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","Can you share that file?

From: Jeff McKenna <notifications@github.com>
Sent: Tuesday, February 16, 2021 4:26 PM
To: MapServer/MapServer <MapServer@noreply.github.com>
Cc: Lime, Steve D (MNIT) <steve.lime@state.mn.us>; Mention <mention@noreply.github.com>
Subject: Re: [MapServer/MapServer] WIP: Medial Axis Approximation GEOMTRANSFORM (#5854)

This message may be from an external email source.
Do not select links or open attachments unless verified. Report all suspicious emails to Minnesota IT Services Security Operations Center.
…
________________________________

Thanks Steve. For the record, with skeletonize I have to set a depth of 3 to get my previous results, such as: GEOMTRANSFORM (simplify((skeletonize([shape], 3)), 10000))

I also played with this locally with a simple great lakes polygon file (I am hesitant to mention this here, as we could be debugging forever each test dataset ha). But I was able to get from the raw labels:
[ttt-lakes]<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fuser-images.githubusercontent.com%2F1611709%2F108128958-e4684f00-7083-11eb-928f-47e23acd085f.png&data=04%7C01%7Csteve.lime%40state.mn.us%7Cdf5741a5fe0a43b1b3b608d8d2c9d8ca%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637491111656294944%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=kdXGMHSVnse7zHigSImyhEs6e8KnWnUGti6%2F85hX2lQ%3D&reserved=0>

to better labels using skeletonize with depth 1 (to be honest it seems I need a value between 0 and 1, which I realize isn't possible) and some simplifying (and FORCE TRUE labels) through: GEOMTRANSFORM (simplify((skeletonize([shape], 1)), 0.7))
[ttt-lakes-skeletonize1]<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fuser-images.githubusercontent.com%2F1611709%2F108129231-44f78c00-7084-11eb-8a65-5cfeb23e2395.png&data=04%7C01%7Csteve.lime%40state.mn.us%7Cdf5741a5fe0a43b1b3b608d8d2c9d8ca%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637491111656304902%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=aCFAlqkYD03wK2FhRPmk51KRuQp%2BTi%2FGBAvtHDwUaEQ%3D&reserved=0>

-
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FMapServer%2FMapServer%2Fpull%2F5854%23issuecomment-780157388&data=04%7C01%7Csteve.lime%40state.mn.us%7Cdf5741a5fe0a43b1b3b608d8d2c9d8ca%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637491111656304902%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=z4V%2BX%2BHbtsZ1zyFYhenJRg52UDrd7gm%2BP6OiO3cMSwM%3D&reserved=0>, or unsubscribe<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAAMGN6ZKRO2TF3VQQZZ32LDS7LWHXANCNFSM4IT6TC6A&data=04%7C01%7Csteve.lime%40state.mn.us%7Cdf5741a5fe0a43b1b3b608d8d2c9d8ca%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637491111656314848%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=cctwrB2G0v36UtyoHPXQi8yxDD3kiWwV4nGVbWlSOTM%3D&reserved=0>.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/jmckenna,34,https://github.com/MapServer/MapServer/pull/5854#issuecomment-780189098,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve",updated test files: https://gatewaygeomatics.com/dl/ticket-5854-skeletonize.zip,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,35,https://github.com/MapServer/MapServer/pull/5854#issuecomment-780233683,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","updated test files: https://gatewaygeomatics.com/dl/ticket-5854-skeletonize.zip

It's actually a good test case - one that I would expect to handle better. You actually do get a better initial skeleton if you densify first but it's clear the pruning algorithm needs work. It's not good enough ""as is"" IMHO. Rats...",True,{'THUMBS_UP': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/LarsSchy,36,https://github.com/MapServer/MapServer/pull/5854#issuecomment-781586730,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","I have started to run experiments with this. Will report when I have a couple of examples ready.  I also found a recent research paper about this:  https://arxiv.org/abs/2001.02938
It is interesting since they focus on speed and they seem to have an idea about how to do the pruning fast.   I have to read it a couple of more times to try and understand all the details.  I dont like the idea to maximize the label size.  Thomas, one of the authors have almost the same content in one chapter in his dissertation from last year. https://www.semanticscholar.org/paper/Improved-algorithms-for-map-rendering-and-route-Mendel/a1f34a58239ff22609897c383640ce765b03a562",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,37,https://github.com/MapServer/MapServer/pull/5854#issuecomment-781596888,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","Thanks Lars. Definitely needs more work - thanks for taking the time. That's not an article I've run into. The scholarly papers on MAT and SAT I've read are indeed a handful (e.g. https://web.archive.org/web/20110916083816/http://www.balintmiklos.com/scale-axis/scale_axis_transform_socg_2009.pdf<https://web.archive.org/web/20110916083816/http:/www.balintmiklos.com/scale-axis/scale_axis_transform_socg_2009.pdf>). There's a nice discussion on Stack Overflow here: https://stackoverflow.com/questions/29921826/how-do-i-calculate-the-medial-axis-for-a-2d-vector-shape, which references an online SVG demo (http://mat-demo.appspot.com/#!/test-mat). I've been trying to work backwards from the type script to understand how they go from MAT to SAT... --Steve

From: Lars Schylberg <notifications@github.com>
Sent: Thursday, February 18, 2021 1:37 PM
To: MapServer/MapServer <MapServer@noreply.github.com>
Cc: Lime, Steve D (MNIT) <steve.lime@state.mn.us>; Mention <mention@noreply.github.com>
Subject: Re: [MapServer/MapServer] WIP: Medial Axis Approximation GEOMTRANSFORM (#5854)

This message may be from an external email source.
Do not select links or open attachments unless verified. Report all suspicious emails to Minnesota IT Services Security Operations Center.
…
________________________________

I have started to run experiments with this. Will report when I have a couple of examples ready. I also found a recent research paper about this: https://arxiv.org/abs/2001.02938<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Farxiv.org%2Fabs%2F2001.02938&data=04%7C01%7Csteve.lime%40state.mn.us%7C3345ad02055a470d085508d8d4449c85%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637492738431619623%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=qdh%2Ba%2BhHTPXtHIiBw79Rn09df938Ov4O%2BhHfbip57wE%3D&reserved=0>
It is interesting since they focus on speed and they seem to have an idea about how to do the pruning fast. I have to read it a couple of more times to try and understand all the details. I dont like the idea to maximize the label size. Thomas, one of the authors have almost the same content in one chapter in his dissertation from last year. https://www.semanticscholar.org/paper/Improved-algorithms-for-map-rendering-and-route-Mendel/a1f34a58239ff22609897c383640ce765b03a562<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwww.semanticscholar.org%2Fpaper%2FImproved-algorithms-for-map-rendering-and-route-Mendel%2Fa1f34a58239ff22609897c383640ce765b03a562&data=04%7C01%7Csteve.lime%40state.mn.us%7C3345ad02055a470d085508d8d4449c85%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637492738431619623%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=3bEy4dRWFHKpV4qB6uShsxG9rtkYYh6bOQ3ubS1Pta0%3D&reserved=0>

-
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FMapServer%2FMapServer%2Fpull%2F5854%23issuecomment-781586730&data=04%7C01%7Csteve.lime%40state.mn.us%7C3345ad02055a470d085508d8d4449c85%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637492738431629581%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=%2BhZzj8FKJsiIG6zn%2FaX92swAFAyuk9lIwmyU%2BI61txs%3D&reserved=0>, or unsubscribe<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAAMGN62IQZHH6KTQZZZXQQTS7VT7DANCNFSM4IT6TC6A&data=04%7C01%7Csteve.lime%40state.mn.us%7C3345ad02055a470d085508d8d4449c85%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637492738431629581%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=%2FY8eVjr5dx4yLmbxfn%2FFdttIaJqFIBq5WnHogMHpmoc%3D&reserved=0>.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/LarsSchy,38,https://github.com/MapServer/MapServer/pull/5854#issuecomment-784316238,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","I have created some test data and run some experiments.  I find it very useful for one use case that I have with Norwegian data.
The Swedish data is a little more challenging but the results are quite good.
All my experiments can be found in my GIST:  https://gist.github.com/LarsSchy/0bec238d5cb6dabd75e6ebc792c1de91
I have used the example code from Jeff and expanded it.  Thanks Jeff for the template. You have to run the tests yourself to see all the results.
Some of the findings are in file: https://gist.github.com/LarsSchy/0bec238d5cb6dabd75e6ebc792c1de91#file-gistfile1-txt
The data and code are in file: https://gist.github.com/LarsSchy/0bec238d5cb6dabd75e6ebc792c1de91#file-ticket-5854-skeletonize-lars-zip",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/dmorissette,39,https://github.com/MapServer/MapServer/pull/5854#issuecomment-784356508,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","Looking at:
https://gist.githubusercontent.com/LarsSchy/0bec238d5cb6dabd75e6ebc792c1de91/raw/102c9f9e6902d4d00545d6f974601048ce22227d/test_250K_s3.png
a possible enhancement to get better results would be to filter out (or ignore) the inside rings (lakes) that are smaller than the target label font size before running the algorithm... this should result in longer and smoother label lines in this specific example. Just an idea.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,40,https://github.com/MapServer/MapServer/pull/5854#issuecomment-784378995,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","Looking at:
https://gist.githubusercontent.com/LarsSchy/0bec238d5cb6dabd75e6ebc792c1de91/raw/102c9f9e6902d4d00545d6f974601048ce22227d/test_250K_s3.png
a possible enhancement to get better results would be to filter out (or ignore) the inside rings (lakes) that are smaller than the target label font size before running the algorithm... this should result in longer and smoother label lines in this specific example. Just an idea.

Actually I added ""inner"" and ""outer"" functions that can be used in a geotransform in concert with skeletonize so you can do skeletonize(outer([shape])). Those functions just return all features from a polygon - so all islands or all outer rings. They don't take minimum size arguments but they could.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/LarsSchy,41,https://github.com/MapServer/MapServer/pull/5854#issuecomment-784424424,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","Yes, that would be good with arguments on inner.  I just did tests with outer.  My first thought was to make a smart DATA sql remove all inside rings smaller then a certain size.  But it is even better if it is possible in the c-code within the function.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/LarsSchy,42,https://github.com/MapServer/MapServer/pull/5854#issuecomment-784437985,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve",It seems like the zip file was truncated in the GIST.  It should be OK now. I did another pull and push.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,43,https://github.com/MapServer/MapServer/pull/5854#issuecomment-784440411,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","Yes, that would be good with arguments on inner. I just did tests with outer. My first thought was to make a smart DATA sql remove all inside rings smaller then a certain size. But it is even better if it is possible in the c-code within the function.

Would be an argument to outer actually, so you get the outer rings + inner rings that meet a size threshold. The more I think about it we might be consider a single function to do all this ring manipulation. Something like rings that would take 2 minimum size values, one for outer rings and one for inner rings. Use could look like:

All outer rings: rings([shape], -1, 0)
All inner rings: rings([shape], 0, -1)
All outer rings with small inner rings removed: rings([shape], -1, 500)

There may be some cool rendering things that could be done with this apart from skeletonization.
--Steve",True,{'THUMBS_UP': ['https://github.com/LarsSchy']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/dmorissette,44,https://github.com/MapServer/MapServer/pull/5854#issuecomment-784505115,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","In which units would the argument to rings([shape], -1, 500) be?
It probably needs to be in pixels in this case since you want to filter out rings that are small relative to the labels at the current map scale (the size of the ring vs the label depends on map scale so it cannot be in ground units).
However it may be useful to have the same function in ground units in some cases for other purposes, so we probably need to support both.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,45,https://github.com/MapServer/MapServer/pull/5854#issuecomment-784528351,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","Depends on the context of the GEOMTRANSFORM, so at the layer level it would be layer units and in the context of a style it would be pixels.

From: Daniel Morissette <notifications@github.com>
Sent: Tuesday, February 23, 2021 2:55 PM
To: MapServer/MapServer <MapServer@noreply.github.com>
Cc: Lime, Steve D (MNIT) <steve.lime@state.mn.us>; Mention <mention@noreply.github.com>
Subject: Re: [MapServer/MapServer] WIP: Medial Axis Approximation GEOMTRANSFORM (#5854)

This message may be from an external email source.
Do not select links or open attachments unless verified. Report all suspicious emails to Minnesota IT Services Security Operations Center.
…
________________________________

In which units would the argument to rings([shape], -1, 500) be?

It probably needs to be in pixels in this case since you want to filter out rings that are small relative to the labels at the current map scale (the size of the ring vs the label depends on map scale so it cannot be in ground units).

However it may be useful to have the same function in ground units in some cases for other purposes, so we probably need to support both.

-
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FMapServer%2FMapServer%2Fpull%2F5854%23issuecomment-784505115&data=04%7C01%7Csteve.lime%40state.mn.us%7C1037738d98aa4e74379a08d8d83d39a0%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637497104768955530%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=4yyZiV1rDJ6S3HlQpQjNevNvcaldU32JSWHSQ6Xy33I%3D&reserved=0>, or unsubscribe<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAAMGN6Z3XE6PWIAW2CC533DTAQIYVANCNFSM4IT6TC6A&data=04%7C01%7Csteve.lime%40state.mn.us%7C1037738d98aa4e74379a08d8d83d39a0%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637497104768965481%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=DedziX86T6JTE%2BUxnaOYbIz5khXNQdmbwGr2LVvLUok%3D&reserved=0>.",True,{'THUMBS_UP': ['https://github.com/dmorissette']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/jmckenna,46,https://github.com/MapServer/MapServer/pull/5854#issuecomment-920225972,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","Today I saw a QGIS-related thread on Voronoi diagrams for labelled polygons, and it reminded me of this MapServer pull request here, which will be a useful improvement.  (the thread pointed to https://bl.ocks.org/veltman/13a7234c4ea073bd7caaa11abb1f7b5d)   My comment here needs no response, I just like the link to our work here.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,47,https://github.com/MapServer/MapServer/pull/5854#issuecomment-920331633,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","Today I saw a QGIS-related thread on Voronoi diagrams for labelled polygons, and it reminded me of this MapServer pull request here, which will be a useful improvement. (the thread pointed to https://bl.ocks.org/veltman/13a7234c4ea073bd7caaa11abb1f7b5d) My comment here needs no response, I just like the link to our work here.

Thanks for this. There may be some hints at a finishing up the implementation here. I've not been able to arrive at a suitable approach/implementation to post-process the clipped Voronoi diagram. The findCenterline() bit is probably the key.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/rouault,48,https://github.com/MapServer/MapServer/pull/5854#issuecomment-927575242,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","From https://blog.ianturton.com/osgeo/2021/09/26/Opensource.html by Ian Turton: ""The latest project is looking at adding a label line along the centre of a polygon. In asking for more help on this problem I’ve found that MapServer is trying to add this functionality too (so now it’s a race). In the time this blog post has been languishing part written I’ve managed to finish this up (the answer is to use Dijkstra to find the longest shortest path between nodes of index 1).""",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,49,https://github.com/MapServer/MapServer/pull/5854#issuecomment-929219099,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","From https://blog.ianturton.com/osgeo/2021/09/26/Opensource.html by Ian Turton: ""The latest project is looking at adding a label line along the centre of a polygon. In asking for more help on this problem I’ve found that MapServer is trying to add this functionality too (so now it’s a race). In the time this blog post has been languishing part written I’ve managed to finish this up (the answer is to use Dijkstra to find the longest shortest path between nodes of index 1).""

Wonder if there is code to leverage... ;-)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/ianturton,50,https://github.com/MapServer/MapServer/pull/5854#issuecomment-929277719,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","From https://blog.ianturton.com/osgeo/2021/09/26/Opensource.html by Ian Turton: ""The latest project is looking at adding a label line along the centre of a polygon. In asking for more help on this problem I’ve found that MapServer is trying to add this functionality too (so now it’s a race). In the time this blog post has been languishing part written I’ve managed to finish this up (the answer is to use Dijkstra to find the longest shortest path between nodes of index 1).""

Wonder if there is code to leverage... ;-)

Have a look at https://blog.ianturton.com/geotools/geoserver/2021/09/26/Centrelines-part2.html and for the full PR see geotools/geotools#3644
Not sure as it will help you much as I off loaded all the hard work to our graph module.",True,{'THUMBS_UP': ['https://github.com/LarsSchy']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,51,https://github.com/MapServer/MapServer/pull/5854#issuecomment-929280126,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","I know what I'll be doing this weekend... Thanks for the tips and the blogpost Ian.

From: Ian Turton ***@***.***>
Sent: Tuesday, September 28, 2021 9:21 AM
To: MapServer/MapServer ***@***.***>
Cc: Lime, Steve D (MNIT) ***@***.***>; Mention ***@***.***>
Subject: Re: [MapServer/MapServer] WIP: Medial Axis Approximation GEOMTRANSFORM (#5854)

This message may be from an external email source.
Do not select links or open attachments unless verified. Report all suspicious emails to Minnesota IT Services Security Operations Center.
…
________________________________

From https://blog.ianturton.com/osgeo/2021/09/26/Opensource.html<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fblog.ianturton.com%2Fosgeo%2F2021%2F09%2F26%2FOpensource.html&data=04%7C01%7Csteve.lime%40state.mn.us%7C271af2cf880b4cb0c53c08d9828b26ed%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637684356430351373%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=Veya4SfbHnl7iIT6JcJJV%2BEoPKy9X1kKsR0vFx3uD4A%3D&reserved=0> by Ian Turton: ""The latest project is looking at adding a label line along the centre of a polygon. In asking for more help on this problem I've found that MapServer is trying to add this functionality too (so now it's a race). In the time this blog post has been languishing part written I've managed to finish this up (the answer is to use Dijkstra to find the longest shortest path between nodes of index 1).""

Wonder if there is code to leverage... ;-)

Have a look at https://blog.ianturton.com/geotools/geoserver/2021/09/26/Centrelines-part2.html<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fblog.ianturton.com%2Fgeotools%2Fgeoserver%2F2021%2F09%2F26%2FCentrelines-part2.html&data=04%7C01%7Csteve.lime%40state.mn.us%7C271af2cf880b4cb0c53c08d9828b26ed%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637684356430361331%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=0VOmTtet%2BapHnQKLgaBDx7pYBnRTdUygZyHg4ixx9Xk%3D&reserved=0> and for the full PR see geotools/geotools#3644<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fgeotools%2Fgeotools%2Fpull%2F3644&data=04%7C01%7Csteve.lime%40state.mn.us%7C271af2cf880b4cb0c53c08d9828b26ed%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637684356430361331%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=xd6a1GYuNgOwcVtYbbUUddwiQR2CkR8HulZkRsmE1a8%3D&reserved=0>

Not sure as it will help you much as I off loaded all the hard work to our graph module.

-
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FMapServer%2FMapServer%2Fpull%2F5854%23issuecomment-929277719&data=04%7C01%7Csteve.lime%40state.mn.us%7C271af2cf880b4cb0c53c08d9828b26ed%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637684356430371287%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=hieRe7TerKsWeDsR7vrZ1wOdLdumb5YUGosxrRwEF2I%3D&reserved=0>, or unsubscribe<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAAMGN625UL7TW3F3FJFHX5LUEHFLRANCNFSM4IT6TC6A&data=04%7C01%7Csteve.lime%40state.mn.us%7C271af2cf880b4cb0c53c08d9828b26ed%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637684356430381234%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=gDQBuTGB547fyb4LWX9GXBJqWz8pw9kRXeIjr4jf%2BK4%3D&reserved=0>.
Triage notifications on the go with GitHub Mobile for iOS<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fapps.apple.com%2Fapp%2Fapple-store%2Fid1477376905%3Fct%3Dnotification-email%26mt%3D8%26pt%3D524675&data=04%7C01%7Csteve.lime%40state.mn.us%7C271af2cf880b4cb0c53c08d9828b26ed%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637684356430391188%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=%2FOp5GNey3BH7Dtob36Sqa5DIcIO1tBb6OCSntKI7JT4%3D&reserved=0> or Android<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fplay.google.com%2Fstore%2Fapps%2Fdetails%3Fid%3Dcom.github.android%26referrer%3Dutm_campaign%253Dnotification-email%2526utm_medium%253Demail%2526utm_source%253Dgithub&data=04%7C01%7Csteve.lime%40state.mn.us%7C271af2cf880b4cb0c53c08d9828b26ed%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637684356430401158%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=xv2a8L%2B2djO2VRnhvG1e8fvh7SaQLVmUor3YvmY6Wtg%3D&reserved=0>.",True,{'THUMBS_UP': ['https://github.com/LarsSchy']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,52,https://github.com/MapServer/MapServer/pull/5854#issuecomment-930227256,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","Note that I have picked this up again and have added some simple graph support that works. Just going through the shortest path part... --Steve
Update - here's an output image using Dijkstra's algorithm to generate the longest, shortest path between edge nodes. We densify the shape (value is in map coordinates) first in this case but you wouldn't have to, in fact you may need to generalize for performance reasons. Skeletonize takes no parameters beyond a polygon shape. Anyway, promising...
GEOMTRANSFORM (skeletonize(densify([shape], 0.1)))",True,"{'HEART': ['https://github.com/jmckenna'], 'THUMBS_UP': ['https://github.com/LarsSchy']}"
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,53,https://github.com/MapServer/MapServer/pull/5854#issuecomment-931823767,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","Another sample image using the state of california boundary. It's a dense polygon so the layer-level GEOMTRANSFORM looks like so:
GEOMTRANSFORM (simplify(skeletonize(simplify([shape],500)),50000))

So, simplify the geometry before running the skeletonization and then simplify the resulting line. As an aside, I cannot get the SmoothSIA transform to work at all. No error, the geometry just doesn't render. Anyone had luck with that? It would probably be the preferred method to post-process the skeleton.
The code that generated these images is now part of the pull request so now would be a great time to test and provide some feedback.
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,54,https://github.com/MapServer/MapServer/pull/5854#issuecomment-932270039,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","One last note, probably should change skeletonize to centerline - it's a better description of the functionality. Since this work is quite dated I think I'll create a new branch and re-integrate... Still, please test it out! --Steve",True,"{'THUMBS_UP': ['https://github.com/jratike80', 'https://github.com/sdlime']}"
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/jmckenna,55,https://github.com/MapServer/MapServer/pull/5854#issuecomment-932311423,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","Very nice results now Steve!  Here is my results locally, with:
  GEOMTRANSFORM (skeletonize(densify([shape], 0.1)))


(also, after having to explain 'skeletonize' at the MapServer workshop this week, and this morning at MapServer-Status report at FOSS4G-Asia, I'm much happier with 'centerline', ha, a strong +1)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/LarsSchy,56,https://github.com/MapServer/MapServer/pull/5854#issuecomment-932940008,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","I am also very pleased now.  This is one of my first tests with:
(simplify((skeletonize([shape])),100))

I think that the unlabeled lake is to small. I will continue to test.",True,{'THUMBS_UP': ['https://github.com/LarsSchy']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/LarsSchy,57,https://github.com/MapServer/MapServer/pull/5854#issuecomment-933011357,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","Now I have a result with all lakes labeled:
(simplify((skeletonize([shape])),50))
Very happy with the result!

Now I have started to play a little with REPEATDISTANCE for the labels.  I wish I could skip the first and last label, because I don't want labels in the bays.  But maybe this is wishing for 2.0 already. :-)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,58,https://github.com/MapServer/MapServer/pull/5854#issuecomment-933515042,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve",Can someone test with smoothsia? I've had no luck with that but want to make sure it's not just me. --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/LarsSchy,59,https://github.com/MapServer/MapServer/pull/5854#issuecomment-933744996,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","I have tried these cases now:
(smoothsia(skeletonize([shape])))
(smoothsia(skeletonize([shape]), 3, 1, 'angle'))
(smoothsia(skeletonize([shape]), 3, 1, 'all'))
The parsing goes OK and uses some time, but no line or text is drawn.
The same happens with both the 250K data set and the 1M data set.
/Lars",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,60,https://github.com/MapServer/MapServer/pull/5854#issuecomment-933793445,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","I have tried these cases now: (smoothsia(skeletonize([shape]))) (smoothsia(skeletonize([shape]), 3, 1, 'angle')) (smoothsia(skeletonize([shape]), 3, 1, 'all'))
The parsing goes OK and uses some time, but no line or text is drawn. The same happens with both the 250K data set and the 1M data set. /Lars

Same experience. Didn't work for me outside the context of skeletonize either...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/jmckenna,61,https://github.com/MapServer/MapServer/pull/5854#issuecomment-933807133,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve",So far I can't get a line drawn with smoothsia with medial-axis or branch-7-6,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/jmckenna,62,https://github.com/MapServer/MapServer/pull/5854#issuecomment-933811069,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve","ah, yikes, I finally got smoothsia to work with branch-7-6, by setting ""all"" instead of ""angle"" :
GEOMTRANSFORM (smoothsia([shape], 3, 1, 'all'))

results look good.
Yikes, the same test with medial-axis branch has no line drawn.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,63,https://github.com/MapServer/MapServer/pull/5854#issuecomment-933837498,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve",medial-axis branch is dated and needs to be re-based. I'll do that tonight.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5854,2019-09-05T14:32:26Z,2021-10-05T02:50:48Z,2021-10-14T18:04:05Z,CLOSED,False,3332,2417,12,https://github.com/sdlime,WIP: Medial Axis Approximation GEOMTRANSFORM,19,['Work in progress'],https://github.com/mapserver/mapserver/pull/5854,https://github.com/sdlime,64,https://github.com/MapServer/MapServer/pull/5854#issuecomment-934014075,"This pull request adds an initial implementation of a medial axis approximation that can be used to generate path-following labels within polygons - so the goal is nice looking labels not a perfect approximation. It uses a Voronoi diagram generated by GEOS and then additional simplification to further isolate a multi-linestring suitable for labeling. The transformation can be referenced in a GEOMTRANSFORM like so:
LAYER
    TYPE LINE # source shapes must be polygons
    ...
    GEOMTRANSFORM (medialaxis([shape], -15))
    CLASS
      LABEL
        ...
        ANGLE FOLLOW
      END
    END
END

The first argument is a shapeObj and the second (optional, default=0) argument is a tolerance value. A tolerance greater than zero will densify the input shape in order to get a better approximation and would be useful for geometries with sparse vertices. A tolerance less than zero will simplify the input shape. In LAYER context the tolerance is given in layer units while in STYLE context tolerance is given in pixels as the shape has already been transformed. I think in most instances this transformation makes most sense at the LAYER level. A couple of example output images are included below. The first takes a complex lake polygon with a simplification argument. The second is an example of polygons with sparse vertices that need to be densified.
Again, this is an initial implementation and hasn't been tested extensively with a wide variety of polygon inputs. Initial tests are encouraging though. I'll add an animation that shows the transformation steps when I get a little more time.


--Steve",Closing - see #6417 instead.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5855,2019-09-06T13:03:04Z,2019-09-12T10:34:32Z,2019-09-12T10:34:32Z,MERGED,True,1810,1646,35,https://github.com/rouault,Fix memory leaks and run a Travis-CI build under address sanitizer,7,[],https://github.com/mapserver/mapserver/pull/5855,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5855,"This PR fixes all memory leaks found when running msautotest (at least the parts that involve spawning the mapserv and shp2img binaries. mapscript testing isn't done currently) under address sanitizer (-fsanitize=address), which is somewhat equivalent to Valgrind (detects invalid uses of dynamic memory and memory leaks) but runs much faster.
This also modifies the php 7.2 target to run under address sanitizer, and fail if a memory error is found, so that new memory errors aren't added.","This PR fixes all memory leaks found when running msautotest (at least the parts that involve spawning the mapserv and shp2img binaries. mapscript testing isn't done currently) under address sanitizer (-fsanitize=address), which is somewhat equivalent to Valgrind (detects invalid uses of dynamic memory and memory leaks) but runs much faster.
This also modifies the php 7.2 target to run under address sanitizer, and fail if a memory error is found, so that new memory errors aren't added.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5855,2019-09-06T13:03:04Z,2019-09-12T10:34:32Z,2019-09-12T10:34:32Z,MERGED,True,1810,1646,35,https://github.com/rouault,Fix memory leaks and run a Travis-CI build under address sanitizer,7,[],https://github.com/mapserver/mapserver/pull/5855,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5855#issuecomment-529582321,"This PR fixes all memory leaks found when running msautotest (at least the parts that involve spawning the mapserv and shp2img binaries. mapscript testing isn't done currently) under address sanitizer (-fsanitize=address), which is somewhat equivalent to Valgrind (detects invalid uses of dynamic memory and memory leaks) but runs much faster.
This also modifies the php 7.2 target to run under address sanitizer, and fail if a memory error is found, so that new memory errors aren't added.",Possibly related/fixed by this? #5558,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5855,2019-09-06T13:03:04Z,2019-09-12T10:34:32Z,2019-09-12T10:34:32Z,MERGED,True,1810,1646,35,https://github.com/rouault,Fix memory leaks and run a Travis-CI build under address sanitizer,7,[],https://github.com/mapserver/mapserver/pull/5855,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/5855#issuecomment-529995840,"This PR fixes all memory leaks found when running msautotest (at least the parts that involve spawning the mapserv and shp2img binaries. mapscript testing isn't done currently) under address sanitizer (-fsanitize=address), which is somewhat equivalent to Valgrind (detects invalid uses of dynamic memory and memory leaks) but runs much faster.
This also modifies the php 7.2 target to run under address sanitizer, and fail if a memory error is found, so that new memory errors aren't added.","Unless someone needs more time to review this, I'll merge this in the following days",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5855,2019-09-06T13:03:04Z,2019-09-12T10:34:32Z,2019-09-12T10:34:32Z,MERGED,True,1810,1646,35,https://github.com/rouault,Fix memory leaks and run a Travis-CI build under address sanitizer,7,[],https://github.com/mapserver/mapserver/pull/5855,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/5855#issuecomment-530381235,"This PR fixes all memory leaks found when running msautotest (at least the parts that involve spawning the mapserv and shp2img binaries. mapscript testing isn't done currently) under address sanitizer (-fsanitize=address), which is somewhat equivalent to Valgrind (detects invalid uses of dynamic memory and memory leaks) but runs much faster.
This also modifies the php 7.2 target to run under address sanitizer, and fail if a memory error is found, so that new memory errors aren't added.","Wow, that was a lot of work! Looks good... (first change in mapoutput.c is just adding spaces but isn’t worth removing)  +1
…
________________________________
From: Even Rouault <notifications@github.com>
Sent: Tuesday, September 10, 2019 10:39:13 AM
To: mapserver/mapserver <mapserver@noreply.github.com>
Cc: Subscribed <subscribed@noreply.github.com>
Subject: Re: [mapserver/mapserver] Fix memory leaks and run a Travis-CI build under address sanitizer (#5855)


This message may be from an external email source.
Do not select links or open attachments unless verified. Report all suspicious emails to Minnesota IT Services Security Operations Center.



Unless someone needs more time to review this, I'll merge this in the following days

—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub<https://gcc01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fmapserver%2Fmapserver%2Fpull%2F5855%3Femail_source%3Dnotifications%26email_token%3DAAMGN6Z3CTWXB5EXZKR6FW3QI65SDA5CNFSM4IUIYUR2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD6LRQQA%23issuecomment-529995840&data=02%7C01%7Csteve.lime%40state.mn.us%7C79fce21e52a647b1c89708d73605089b%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637037267550812125&sdata=nX3mqs7u5qnL9Uu8k6VjeOdA7yek9IiIxA8p9RZc06s%3D&reserved=0>, or mute the thread<https://gcc01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAAMGN632ZYEE36AZKVK2LT3QI65SDANCNFSM4IUIYURQ&data=02%7C01%7Csteve.lime%40state.mn.us%7C79fce21e52a647b1c89708d73605089b%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637037267550822117&sdata=SL1YWO31Y3DrwFDhijZB0Um29s0RmJR5HzhNjxGCxOo%3D&reserved=0>.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5855,2019-09-06T13:03:04Z,2019-09-12T10:34:32Z,2019-09-12T10:34:32Z,MERGED,True,1810,1646,35,https://github.com/rouault,Fix memory leaks and run a Travis-CI build under address sanitizer,7,[],https://github.com/mapserver/mapserver/pull/5855,https://github.com/rouault,5,https://github.com/MapServer/MapServer/pull/5855#issuecomment-530395614,"This PR fixes all memory leaks found when running msautotest (at least the parts that involve spawning the mapserv and shp2img binaries. mapscript testing isn't done currently) under address sanitizer (-fsanitize=address), which is somewhat equivalent to Valgrind (detects invalid uses of dynamic memory and memory leaks) but runs much faster.
This also modifies the php 7.2 target to run under address sanitizer, and fail if a memory error is found, so that new memory errors aren't added.","first change in mapoutput.c is just adding spaces but isn’t worth removing

Good catch. I could say this was voluntarily done to test reviewer eyes, but actually was accidental. Just removed it :-)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5855,2019-09-06T13:03:04Z,2019-09-12T10:34:32Z,2019-09-12T10:34:32Z,MERGED,True,1810,1646,35,https://github.com/rouault,Fix memory leaks and run a Travis-CI build under address sanitizer,7,[],https://github.com/mapserver/mapserver/pull/5855,https://github.com/sdlime,6,https://github.com/MapServer/MapServer/pull/5855#issuecomment-530410624,"This PR fixes all memory leaks found when running msautotest (at least the parts that involve spawning the mapserv and shp2img binaries. mapscript testing isn't done currently) under address sanitizer (-fsanitize=address), which is somewhat equivalent to Valgrind (detects invalid uses of dynamic memory and memory leaks) but runs much faster.
This also modifies the php 7.2 target to run under address sanitizer, and fail if a memory error is found, so that new memory errors aren't added.","It’s a good strategy – I only brought it up as evidence I actually looked at the changes… ;-)

From: Even Rouault [mailto:notifications@github.com]
Sent: Wednesday, September 11, 2019 9:04 AM
To: mapserver/mapserver <mapserver@noreply.github.com>
Cc: Lime, Steve D (MNIT) <steve.lime@state.mn.us>; Comment <comment@noreply.github.com>
Subject: Re: [mapserver/mapserver] Fix memory leaks and run a Travis-CI build under address sanitizer (#5855)

This message may be from an external email source.
Do not select links or open attachments unless verified. Report all suspicious emails to Minnesota IT Services Security Operations Center.
…
________________________________

first change in mapoutput.c is just adding spaces but isn’t worth removing

Good catch. I could say this was voluntarily done to test reviewer eyes, but actually was accidental. Just removed it :-)

—
You are receiving this because you commented.
Reply to this email directly, view it on GitHub<https://gcc01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fmapserver%2Fmapserver%2Fpull%2F5855%3Femail_source%3Dnotifications%26email_token%3DAAMGN653DT3E25DURGQLBCDQJD3GDA5CNFSM4IUIYUR2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD6OTDXQ%23issuecomment-530395614&data=02%7C01%7Csteve.lime%40state.mn.us%7C1f144684d2094afcf52208d736c0ef9d%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637038074587611028&sdata=BzQGMUmsz3ObcMInWpLZVFX2sQVXuKqKIM7WugCJ%2FUk%3D&reserved=0>, or mute the thread<https://gcc01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAAMGN6Y7FXKTOATVZJCAX73QJD3GDANCNFSM4IUIYURQ&data=02%7C01%7Csteve.lime%40state.mn.us%7C1f144684d2094afcf52208d736c0ef9d%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637038074587611028&sdata=uynsfAaeM1RzVlBNy%2BEbPtNUG6ZvCZ6n%2BywDIO2bam4%3D&reserved=0>.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5856,2019-09-08T21:03:56Z,2019-09-09T12:02:16Z,2019-09-09T12:02:16Z,MERGED,True,3,3,1,https://github.com/geographika,Remove MakeValid() from MSSQL Driver,1,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5856,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5856,"These calls as disable spatial indexes causing a performance hit.
See post in mailing list.","These calls as disable spatial indexes causing a performance hit.
See post in mailing list.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5856,2019-09-08T21:03:56Z,2019-09-09T12:02:16Z,2019-09-09T12:02:16Z,MERGED,True,3,3,1,https://github.com/geographika,Remove MakeValid() from MSSQL Driver,1,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5856,https://github.com/szekerest,2,https://github.com/MapServer/MapServer/pull/5856#issuecomment-529372285,"These calls as disable spatial indexes causing a performance hit.
See post in mailing list.",We may also backport this to the 7-4 branch.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5857,2019-09-08T22:33:19Z,2019-09-22T08:41:19Z,2019-09-22T08:41:19Z,MERGED,True,116,1,4,https://github.com/geographika,Add runsub MapScript functions,3,[],https://github.com/mapserver/mapserver/pull/5857,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5857,"This pull request adds a applyDefaultSubstitutions function to all SWIG MapScripts, and an applySubstitutions function to Python MapScript along with an appropriate typemap.
Usage is as follows - applyDefaultSubstitutions can be called directly on a mabObj:
        s = """"""
MAP
    WEB
        VALIDATION
            'key1' '.*'
            'default_key1' 'Test Title'
        END
        METADATA
            ""wms_title"" ""%key1%""
        END
    END
END
        """"""
        map = mapscript.fromstring(s)
        map.applyDefaultSubstitutions()
applySubstitutions can be used in Python by supplying a dict of keys and values (both need to be strings) to replace any variables in a Mapfile.
        s = """"""
MAP
    WEB
        VALIDATION
            'key1' '.*'
            'default_key1' 'Test Title'
        END
        METADATA
            ""wms_title"" ""%key1%""
        END
    END
    LAYER
        TYPE POINT
        FILTER ([size]<%my_filter%)
        VALIDATION
            'my_filter' '^[0-9]$'
        END
    END
END
        """"""
        map = mapscript.fromstring(s)

        d = {""key1"": ""New Title"", ""my_filter"": ""3""}
        map.applySubstitutions(d)","This pull request adds a applyDefaultSubstitutions function to all SWIG MapScripts, and an applySubstitutions function to Python MapScript along with an appropriate typemap.
Usage is as follows - applyDefaultSubstitutions can be called directly on a mabObj:
        s = """"""
MAP
    WEB
        VALIDATION
            'key1' '.*'
            'default_key1' 'Test Title'
        END
        METADATA
            ""wms_title"" ""%key1%""
        END
    END
END
        """"""
        map = mapscript.fromstring(s)
        map.applyDefaultSubstitutions()
applySubstitutions can be used in Python by supplying a dict of keys and values (both need to be strings) to replace any variables in a Mapfile.
        s = """"""
MAP
    WEB
        VALIDATION
            'key1' '.*'
            'default_key1' 'Test Title'
        END
        METADATA
            ""wms_title"" ""%key1%""
        END
    END
    LAYER
        TYPE POINT
        FILTER ([size]<%my_filter%)
        VALIDATION
            'my_filter' '^[0-9]$'
        END
    END
END
        """"""
        map = mapscript.fromstring(s)

        d = {""key1"": ""New Title"", ""my_filter"": ""3""}
        map.applySubstitutions(d)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5859,2019-09-09T12:02:27Z,2019-09-09T12:58:46Z,2019-09-16T19:58:43Z,MERGED,True,3,3,1,https://github.com/apps/backporting,[Backport branch-7-4] Remove MakeValid() from MSSQL Driver,1,[],https://github.com/mapserver/mapserver/pull/5859,https://github.com/apps/backporting,1,https://github.com/MapServer/MapServer/pull/5859,Backport #5856.,Backport #5856.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5860,2019-09-09T13:43:25Z,2019-09-09T16:00:44Z,2019-09-09T16:00:44Z,MERGED,True,99,1,4,https://github.com/rouault,OGR GPKG: fix potential SELECT ambiguity for 'id' column (fixes #5858),1,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5860,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5860,"When using a GeoPackage table that has a 'id' column, in some circumstances,
MapServer composes internally a SELECT statement, but fails to prefix the
id column with the table name, which causes an ambiguity when joining with
the spatial index RTree table that has also a id column.","When using a GeoPackage table that has a 'id' column, in some circumstances,
MapServer composes internally a SELECT statement, but fails to prefix the
id column with the table name, which causes an ambiguity when joining with
the spatial index RTree table that has also a id column.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5861,2019-09-09T16:00:55Z,2019-09-09T16:32:12Z,2019-09-16T19:58:40Z,MERGED,True,99,1,4,https://github.com/apps/backporting,[Backport branch-7-4] OGR GPKG: fix potential SELECT ambiguity for 'id' column (fixes #5858),1,[],https://github.com/mapserver/mapserver/pull/5861,https://github.com/apps/backporting,1,https://github.com/MapServer/MapServer/pull/5861,Backport #5860.,Backport #5860.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5863,2019-09-09T17:59:36Z,2019-09-10T09:36:03Z,2019-09-10T09:36:03Z,MERGED,True,514,455,6,https://github.com/rouault,Fix memory leak in msINLINELayerNextShape() and null pointer dereference in maplexer when rerunning it after msCleanup() (fixes #5558),1,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5863,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5863,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5863,2019-09-09T17:59:36Z,2019-09-10T09:36:03Z,2019-09-10T09:36:03Z,MERGED,True,514,455,6,https://github.com/rouault,Fix memory leak in msINLINELayerNextShape() and null pointer dereference in maplexer when rerunning it after msCleanup() (fixes #5558),1,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5863,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5863#issuecomment-529688971,,Looks good at first glance... Back port to 7.4 as well I assume? --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5864,2019-09-10T09:36:14Z,2019-09-10T10:30:56Z,2019-09-16T19:58:37Z,MERGED,True,514,455,6,https://github.com/apps/backporting,[Backport branch-7-4] Fix memory leak in msINLINELayerNextShape() and null pointer dereference in maplexer when rerunning it after msCleanup() (fixes #5558),1,[],https://github.com/mapserver/mapserver/pull/5864,https://github.com/apps/backporting,1,https://github.com/MapServer/MapServer/pull/5864,Backport #5863.,Backport #5863.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5864,2019-09-10T09:36:14Z,2019-09-10T10:30:56Z,2019-09-16T19:58:37Z,MERGED,True,514,455,6,https://github.com/apps/backporting,[Backport branch-7-4] Fix memory leak in msINLINELayerNextShape() and null pointer dereference in maplexer when rerunning it after msCleanup() (fixes #5558),1,[],https://github.com/mapserver/mapserver/pull/5864,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5864#issuecomment-529875217,Backport #5863.,Note: Windows builds are very likely broken by an issue on gisinternals where todays builds are broken: gisinternals/buildsystem#143 and the SDK downloaded lacks libgdalXX.dll,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5865,2019-09-10T11:43:18Z,2019-09-10T12:49:52Z,2019-09-10T12:49:52Z,MERGED,True,364,365,2,https://github.com/rouault,maplexer.l: avoid warning about isatty() on Windows,1,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5865,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5865,"The latest regeneration of maplexer.c with a more recent version of flex
caused isatty() to be called, which caused a warning when building on Windows.
Parsing from an interactive terminal is not a use case for mapserver, so
add %option never-interactive.","The latest regeneration of maplexer.c with a more recent version of flex
caused isatty() to be called, which caused a warning when building on Windows.
Parsing from an interactive terminal is not a use case for mapserver, so
add %option never-interactive.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5867,2019-09-10T12:50:03Z,2019-09-10T13:27:19Z,2019-09-16T19:58:33Z,MERGED,True,364,365,2,https://github.com/apps/backporting,[Backport branch-7-4] maplexer.l: avoid warning about isatty() on Windows,1,[],https://github.com/mapserver/mapserver/pull/5867,https://github.com/apps/backporting,1,https://github.com/MapServer/MapServer/pull/5867,Backport #5865.,Backport #5865.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5868,2019-09-12T22:14:25Z,2019-09-13T15:16:28Z,2019-09-13T15:34:52Z,MERGED,True,1814,1641,35,https://github.com/rouault,Backport of memory leak fixes,8,[],https://github.com/mapserver/mapserver/pull/5868,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5868,"@sdlime This PR is a backport of my recent memory leak fixes from master to 7.4. I cannot completely exclude the risk of new double-free in code paths not tested, but as far as msautotest is concerned, it is leak-free and ""double-free""-free... Do you think we should merge this in 7.4 ?","@sdlime This PR is a backport of my recent memory leak fixes from master to 7.4. I cannot completely exclude the risk of new double-free in code paths not tested, but as far as msautotest is concerned, it is leak-free and ""double-free""-free... Do you think we should merge this in 7.4 ?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5868,2019-09-12T22:14:25Z,2019-09-13T15:16:28Z,2019-09-13T15:34:52Z,MERGED,True,1814,1641,35,https://github.com/rouault,Backport of memory leak fixes,8,[],https://github.com/mapserver/mapserver/pull/5868,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5868#issuecomment-531266278,"@sdlime This PR is a backport of my recent memory leak fixes from master to 7.4. I cannot completely exclude the risk of new double-free in code paths not tested, but as far as msautotest is concerned, it is leak-free and ""double-free""-free... Do you think we should merge this in 7.4 ?","I guess I'd say yes. I already cut the 7.4.2 release, I wonder how easy it is to redo that to get these changes in - do we just remove the release tag? Is the AppVeyor issue unrelated?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5868,2019-09-12T22:14:25Z,2019-09-13T15:16:28Z,2019-09-13T15:34:52Z,MERGED,True,1814,1641,35,https://github.com/rouault,Backport of memory leak fixes,8,[],https://github.com/mapserver/mapserver/pull/5868,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/5868#issuecomment-531278604,"@sdlime This PR is a backport of my recent memory leak fixes from master to 7.4. I cannot completely exclude the risk of new double-free in code paths not tested, but as far as msautotest is concerned, it is leak-free and ""double-free""-free... Do you think we should merge this in 7.4 ?","I guess I'd say yes

ok, pushing the 'merge' button then

do we just remove the release tag?

yes, ""git tag -d rel-7-4-2"" for local tag, and ""git push origin :rel-7-4-2"" for the remote tag, and then retag.

Is the AppVeyor issue unrelated?

yes, this is a gisinternals issue: gisinternals/buildsystem#143",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5868,2019-09-12T22:14:25Z,2019-09-13T15:16:28Z,2019-09-13T15:34:52Z,MERGED,True,1814,1641,35,https://github.com/rouault,Backport of memory leak fixes,8,[],https://github.com/mapserver/mapserver/pull/5868,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/5868#issuecomment-531285623,"@sdlime This PR is a backport of my recent memory leak fixes from master to 7.4. I cannot completely exclude the risk of new double-free in code paths not tested, but as far as msautotest is concerned, it is leak-free and ""double-free""-free... Do you think we should merge this in 7.4 ?","I figure we're not going to be ""more sure"" at any point so why not now. I re-cut the release (thanks for the commands) so this is included. Thanks! --Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5869,2019-09-13T11:09:04Z,2019-09-13T11:20:43Z,2019-09-13T11:20:43Z,MERGED,True,5,2,1,https://github.com/rouault,Makefile: test msautotest/sld,1,[],https://github.com/mapserver/mapserver/pull/5869,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5869,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5870,2019-09-13T16:01:51Z,2019-11-24T21:16:23Z,2019-11-24T21:16:23Z,CLOSED,False,6409,3286,190,https://github.com/geographika,[WIP] Generated Mapscript API Documentation,96,[],https://github.com/mapserver/mapserver/pull/5870,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5870,"I've made a start on generating new MapScript API docs using SWIG and Sphinx. I've completed documenting CLASS. I have some sample output at: http://www.geographika.net/mapserver-mapscript/mapscript/classes/class.html
All SWIG generated languages should be able to follow the new API docs, with individual language extensions to be documented separately.
The mapscript module can be installed as part of the docs requirements.txt file. It does not need MapServer installed to generate the docs - mocks are used to avoid import errors, and Sphinx just needs to access the docstrings in the mapscript Python module.
New Features

All mapscript functions will be automatically listed even if a docstring has not been added (generating the docs shows what is not documented as they get a giant mock object docstring)
Links to relevant Mapfile documentation for properties e.g. classObj.title links to the TITLE section on the CLASS Mapfile doc page
Function parameters automatically documented
Can create links to API keywords using tags such as :attr:classObj.metadata (see Domains page
Can link to other classes using :py:class:labelLeaderObj
Linking to the relevant Mapfile keyword avoids duplication of documentation (although the links have to use a slight hack as index entries have auto-generated URLs - see this question)

To get everything working involved a few hacks to get round missing functionality in SWIG and Sphinx and its extensions. I've tried to keep the approach as clean as possible, and posted a few questions to the SWIG user groups to check I'm not missing something.
Some notes:

I made numlabels and leader immutable in mapserver.h - confirmation this is ok would be appreciated
Class attributes need to be manually listed to get output in Sphinx. Module constants will also likely need to be manually added.
Docstrings have to be added to mapserv.h near the struct declarations (rather than in .i SWIG files) to make sure attribute doc strings are inserted first in the output SWIG class, otherwise it is not possible to document them with autodoc. To keep clutter out of mapserver.h I've defined macros.
A few other workarounds are needed to avoid long parameter names such as mapscript.mapscript.layerObj appearing everywhere
Whilst going through the classObj it was apparent several attributes were missing from the CLASS Mapfile page. I've added these to the main docs.
As expected the classObj SWIG docs had a number of missing methods and attributes which have been added (along with an updated Python test).

If the above approach is ok and not too disruptive I will continue with documenting more MapScript classes.","I've made a start on generating new MapScript API docs using SWIG and Sphinx. I've completed documenting CLASS. I have some sample output at: http://www.geographika.net/mapserver-mapscript/mapscript/classes/class.html
All SWIG generated languages should be able to follow the new API docs, with individual language extensions to be documented separately.
The mapscript module can be installed as part of the docs requirements.txt file. It does not need MapServer installed to generate the docs - mocks are used to avoid import errors, and Sphinx just needs to access the docstrings in the mapscript Python module.
New Features

All mapscript functions will be automatically listed even if a docstring has not been added (generating the docs shows what is not documented as they get a giant mock object docstring)
Links to relevant Mapfile documentation for properties e.g. classObj.title links to the TITLE section on the CLASS Mapfile doc page
Function parameters automatically documented
Can create links to API keywords using tags such as :attr:classObj.metadata (see Domains page
Can link to other classes using :py:class:labelLeaderObj
Linking to the relevant Mapfile keyword avoids duplication of documentation (although the links have to use a slight hack as index entries have auto-generated URLs - see this question)

To get everything working involved a few hacks to get round missing functionality in SWIG and Sphinx and its extensions. I've tried to keep the approach as clean as possible, and posted a few questions to the SWIG user groups to check I'm not missing something.
Some notes:

I made numlabels and leader immutable in mapserver.h - confirmation this is ok would be appreciated
Class attributes need to be manually listed to get output in Sphinx. Module constants will also likely need to be manually added.
Docstrings have to be added to mapserv.h near the struct declarations (rather than in .i SWIG files) to make sure attribute doc strings are inserted first in the output SWIG class, otherwise it is not possible to document them with autodoc. To keep clutter out of mapserver.h I've defined macros.
A few other workarounds are needed to avoid long parameter names such as mapscript.mapscript.layerObj appearing everywhere
Whilst going through the classObj it was apparent several attributes were missing from the CLASS Mapfile page. I've added these to the main docs.
As expected the classObj SWIG docs had a number of missing methods and attributes which have been added (along with an updated Python test).

If the above approach is ok and not too disruptive I will continue with documenting more MapScript classes.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5870,2019-09-13T16:01:51Z,2019-11-24T21:16:23Z,2019-11-24T21:16:23Z,CLOSED,False,6409,3286,190,https://github.com/geographika,[WIP] Generated Mapscript API Documentation,96,[],https://github.com/mapserver/mapserver/pull/5870,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5870#issuecomment-531785730,"I've made a start on generating new MapScript API docs using SWIG and Sphinx. I've completed documenting CLASS. I have some sample output at: http://www.geographika.net/mapserver-mapscript/mapscript/classes/class.html
All SWIG generated languages should be able to follow the new API docs, with individual language extensions to be documented separately.
The mapscript module can be installed as part of the docs requirements.txt file. It does not need MapServer installed to generate the docs - mocks are used to avoid import errors, and Sphinx just needs to access the docstrings in the mapscript Python module.
New Features

All mapscript functions will be automatically listed even if a docstring has not been added (generating the docs shows what is not documented as they get a giant mock object docstring)
Links to relevant Mapfile documentation for properties e.g. classObj.title links to the TITLE section on the CLASS Mapfile doc page
Function parameters automatically documented
Can create links to API keywords using tags such as :attr:classObj.metadata (see Domains page
Can link to other classes using :py:class:labelLeaderObj
Linking to the relevant Mapfile keyword avoids duplication of documentation (although the links have to use a slight hack as index entries have auto-generated URLs - see this question)

To get everything working involved a few hacks to get round missing functionality in SWIG and Sphinx and its extensions. I've tried to keep the approach as clean as possible, and posted a few questions to the SWIG user groups to check I'm not missing something.
Some notes:

I made numlabels and leader immutable in mapserver.h - confirmation this is ok would be appreciated
Class attributes need to be manually listed to get output in Sphinx. Module constants will also likely need to be manually added.
Docstrings have to be added to mapserv.h near the struct declarations (rather than in .i SWIG files) to make sure attribute doc strings are inserted first in the output SWIG class, otherwise it is not possible to document them with autodoc. To keep clutter out of mapserver.h I've defined macros.
A few other workarounds are needed to avoid long parameter names such as mapscript.mapscript.layerObj appearing everywhere
Whilst going through the classObj it was apparent several attributes were missing from the CLASS Mapfile page. I've added these to the main docs.
As expected the classObj SWIG docs had a number of missing methods and attributes which have been added (along with an updated Python test).

If the above approach is ok and not too disruptive I will continue with documenting more MapScript classes.","This looks really nice. Regarding the properties you made immutable:

Numlabels  - or any similar counters - should be immutable. So following that logic numstyles should also be immutable.
Leader  - no so sure about that one. Looks like styles and labels aren't even exposed to MapScript and users must work through the helper methods. Makes sense since they are arrays. There's only one leader though so how would a user modify it?

--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5870,2019-09-13T16:01:51Z,2019-11-24T21:16:23Z,2019-11-24T21:16:23Z,CLOSED,False,6409,3286,190,https://github.com/geographika,[WIP] Generated Mapscript API Documentation,96,[],https://github.com/mapserver/mapserver/pull/5870,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5870#issuecomment-533269584,"I've made a start on generating new MapScript API docs using SWIG and Sphinx. I've completed documenting CLASS. I have some sample output at: http://www.geographika.net/mapserver-mapscript/mapscript/classes/class.html
All SWIG generated languages should be able to follow the new API docs, with individual language extensions to be documented separately.
The mapscript module can be installed as part of the docs requirements.txt file. It does not need MapServer installed to generate the docs - mocks are used to avoid import errors, and Sphinx just needs to access the docstrings in the mapscript Python module.
New Features

All mapscript functions will be automatically listed even if a docstring has not been added (generating the docs shows what is not documented as they get a giant mock object docstring)
Links to relevant Mapfile documentation for properties e.g. classObj.title links to the TITLE section on the CLASS Mapfile doc page
Function parameters automatically documented
Can create links to API keywords using tags such as :attr:classObj.metadata (see Domains page
Can link to other classes using :py:class:labelLeaderObj
Linking to the relevant Mapfile keyword avoids duplication of documentation (although the links have to use a slight hack as index entries have auto-generated URLs - see this question)

To get everything working involved a few hacks to get round missing functionality in SWIG and Sphinx and its extensions. I've tried to keep the approach as clean as possible, and posted a few questions to the SWIG user groups to check I'm not missing something.
Some notes:

I made numlabels and leader immutable in mapserver.h - confirmation this is ok would be appreciated
Class attributes need to be manually listed to get output in Sphinx. Module constants will also likely need to be manually added.
Docstrings have to be added to mapserv.h near the struct declarations (rather than in .i SWIG files) to make sure attribute doc strings are inserted first in the output SWIG class, otherwise it is not possible to document them with autodoc. To keep clutter out of mapserver.h I've defined macros.
A few other workarounds are needed to avoid long parameter names such as mapscript.mapscript.layerObj appearing everywhere
Whilst going through the classObj it was apparent several attributes were missing from the CLASS Mapfile page. I've added these to the main docs.
As expected the classObj SWIG docs had a number of missing methods and attributes which have been added (along with an updated Python test).

If the above approach is ok and not too disruptive I will continue with documenting more MapScript classes.","@sdlime - thanks for the feedback.
Yes numlabels was an easy fix - it had a TODO make immutable comment next to it in the header file.
Currently there is no leaderObj in MapScript. I think it is best to add an issue for this and come back to it later or the docs of the current state of MapScript will never be completed.
I've finished the colorObj now and will add to the pull request.
Do you think it is best to squash and merge these now, or have a single (giant) merge with all autodoc changes? I'm in favour of the former as it should be easier to review / comment on changes.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5870,2019-09-13T16:01:51Z,2019-11-24T21:16:23Z,2019-11-24T21:16:23Z,CLOSED,False,6409,3286,190,https://github.com/geographika,[WIP] Generated Mapscript API Documentation,96,[],https://github.com/mapserver/mapserver/pull/5870,https://github.com/geographika,4,https://github.com/MapServer/MapServer/pull/5870#issuecomment-557928842,"I've made a start on generating new MapScript API docs using SWIG and Sphinx. I've completed documenting CLASS. I have some sample output at: http://www.geographika.net/mapserver-mapscript/mapscript/classes/class.html
All SWIG generated languages should be able to follow the new API docs, with individual language extensions to be documented separately.
The mapscript module can be installed as part of the docs requirements.txt file. It does not need MapServer installed to generate the docs - mocks are used to avoid import errors, and Sphinx just needs to access the docstrings in the mapscript Python module.
New Features

All mapscript functions will be automatically listed even if a docstring has not been added (generating the docs shows what is not documented as they get a giant mock object docstring)
Links to relevant Mapfile documentation for properties e.g. classObj.title links to the TITLE section on the CLASS Mapfile doc page
Function parameters automatically documented
Can create links to API keywords using tags such as :attr:classObj.metadata (see Domains page
Can link to other classes using :py:class:labelLeaderObj
Linking to the relevant Mapfile keyword avoids duplication of documentation (although the links have to use a slight hack as index entries have auto-generated URLs - see this question)

To get everything working involved a few hacks to get round missing functionality in SWIG and Sphinx and its extensions. I've tried to keep the approach as clean as possible, and posted a few questions to the SWIG user groups to check I'm not missing something.
Some notes:

I made numlabels and leader immutable in mapserver.h - confirmation this is ok would be appreciated
Class attributes need to be manually listed to get output in Sphinx. Module constants will also likely need to be manually added.
Docstrings have to be added to mapserv.h near the struct declarations (rather than in .i SWIG files) to make sure attribute doc strings are inserted first in the output SWIG class, otherwise it is not possible to document them with autodoc. To keep clutter out of mapserver.h I've defined macros.
A few other workarounds are needed to avoid long parameter names such as mapscript.mapscript.layerObj appearing everywhere
Whilst going through the classObj it was apparent several attributes were missing from the CLASS Mapfile page. I've added these to the main docs.
As expected the classObj SWIG docs had a number of missing methods and attributes which have been added (along with an updated Python test).

If the above approach is ok and not too disruptive I will continue with documenting more MapScript classes.",Closing in favour of smaller more specific commits,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5873,2019-09-13T22:44:00Z,2019-09-14T16:32:56Z,2019-09-14T16:32:56Z,MERGED,True,26,9,8,https://github.com/rouault,Fix MSVC compiler warnings,1,[],https://github.com/mapserver/mapserver/pull/5873,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5873,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5873,2019-09-13T22:44:00Z,2019-09-14T16:32:56Z,2019-09-14T16:32:56Z,MERGED,True,26,9,8,https://github.com/rouault,Fix MSVC compiler warnings,1,[],https://github.com/mapserver/mapserver/pull/5873,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5873#issuecomment-531415294,,Doesn't compile due to missing cairo-win32.h header. See gisinternals/buildsystem#144,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5873,2019-09-13T22:44:00Z,2019-09-14T16:32:56Z,2019-09-14T16:32:56Z,MERGED,True,26,9,8,https://github.com/rouault,Fix MSVC compiler warnings,1,[],https://github.com/mapserver/mapserver/pull/5873,https://github.com/szekerest,3,https://github.com/MapServer/MapServer/pull/5873#issuecomment-531485140,,@rouault The build kit is now fixed,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5875,2019-09-16T19:53:22Z,2019-09-17T07:12:45Z,2019-09-17T07:12:59Z,CLOSED,False,4,3,1,https://github.com/geographika,Cache SWIG 3.0.12,3,[],https://github.com/mapserver/mapserver/pull/5875,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5875,Currently getting lots of timeouts from sourceforge.net,Currently getting lots of timeouts from sourceforge.net,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5875,2019-09-16T19:53:22Z,2019-09-17T07:12:45Z,2019-09-17T07:12:59Z,CLOSED,False,4,3,1,https://github.com/geographika,Cache SWIG 3.0.12,3,[],https://github.com/mapserver/mapserver/pull/5875,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5875#issuecomment-531933515,Currently getting lots of timeouts from sourceforge.net,LGTM (you should avoid pushing your dev branches to this repository however. you can remove it with git push whatever_remove_name_you_have_for_this_repo :appveyo-swig-cache),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5875,2019-09-16T19:53:22Z,2019-09-17T07:12:45Z,2019-09-17T07:12:59Z,CLOSED,False,4,3,1,https://github.com/geographika,Cache SWIG 3.0.12,3,[],https://github.com/mapserver/mapserver/pull/5875,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5875#issuecomment-532092683,Currently getting lots of timeouts from sourceforge.net,@rouault - whoops. That will teach me not to try and edit through the GitHub UI. Closing and will reopen from a dev branch.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5876,2019-09-17T07:17:20Z,2019-09-18T18:26:01Z,2019-09-18T18:26:01Z,MERGED,True,5,4,1,https://github.com/geographika,Cache SWIG 3.0.12,7,[],https://github.com/mapserver/mapserver/pull/5876,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5876,Currently getting lots of timeouts from sourceforge.net,Currently getting lots of timeouts from sourceforge.net,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5879,2019-09-24T06:14:39Z,2019-09-30T20:58:44Z,2019-09-30T20:58:44Z,MERGED,True,3,3,1,https://github.com/ejn,mapscript/php: Fix segfault in ms_newprojectionobj in PHP7.3,1,"['Bug', 'MapScript-PHP', 'backport branch-7-4']",https://github.com/mapserver/mapserver/pull/5879,https://github.com/ejn,1,https://github.com/MapServer/MapServer/pull/5879,Fixes #5878,Fixes #5878,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5880,2019-09-24T07:30:35Z,2019-09-30T21:00:25Z,2019-09-30T21:00:25Z,MERGED,True,6,0,1,https://github.com/geographika,Don't set Python debug lib on Windows,1,[],https://github.com/mapserver/mapserver/pull/5880,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5880,"Currently when compiling with MSVC on Windows using -DWITH_PYTHON=1 and in DEBUG the following error occurs:
LINK : fatal error LNK1104: cannot open file 'python27_d.lib
To resolve this would require compiling Python from scratch. Ideally we want to be able to create a DEBUG release of MapServer with Python, but don't require Python itself to be in DEBUG mode.
SWIG has an option to avoid this as documented here
See also https://stackoverflow.com/a/32631330/179520","Currently when compiling with MSVC on Windows using -DWITH_PYTHON=1 and in DEBUG the following error occurs:
LINK : fatal error LNK1104: cannot open file 'python27_d.lib
To resolve this would require compiling Python from scratch. Ideally we want to be able to create a DEBUG release of MapServer with Python, but don't require Python itself to be in DEBUG mode.
SWIG has an option to avoid this as documented here
See also https://stackoverflow.com/a/32631330/179520",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5883,2019-09-30T14:01:16Z,2019-10-10T10:41:02Z,2019-10-10T10:41:03Z,MERGED,True,1712,1429,18,https://github.com/rouault,Add LAYER.CONNECTIONOPTIONS keyword to specify open options to GDAL and OGR drivers,1,[],https://github.com/mapserver/mapserver/pull/5883,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5883,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5884,2019-09-30T20:25:58Z,2019-09-30T20:56:14Z,2019-09-30T20:56:15Z,MERGED,True,9,8,3,https://github.com/rouault,CleanVSIDir: make it actually work (memory usage and perf fix),1,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5884,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5884,"The function didn't remove the temporary files, mostly when
saving an image through GDAL in /vsimem/msout
This would result in memory usage and execution time for repeated
requests in the same process to grow linearly with the number of
requests, instead of remaining constant.","The function didn't remove the temporary files, mostly when
saving an image through GDAL in /vsimem/msout
This would result in memory usage and execution time for repeated
requests in the same process to grow linearly with the number of
requests, instead of remaining constant.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5885,2019-09-30T20:56:25Z,2019-10-01T10:31:13Z,2019-10-01T10:31:13Z,MERGED,True,9,8,3,https://github.com/apps/backporting,[Backport branch-7-4] CleanVSIDir: make it actually work (memory usage and perf fix),1,[],https://github.com/mapserver/mapserver/pull/5885,https://github.com/apps/backporting,1,https://github.com/MapServer/MapServer/pull/5885,Backport #5884.,Backport #5884.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5886,2019-09-30T20:58:55Z,2019-10-01T10:31:21Z,2019-10-01T10:31:21Z,MERGED,True,3,3,1,https://github.com/apps/backporting,[Backport branch-7-4] mapscript/php: Fix segfault in ms_newprojectionobj in PHP7.3,1,[],https://github.com/mapserver/mapserver/pull/5886,https://github.com/apps/backporting,1,https://github.com/MapServer/MapServer/pull/5886,Backport #5879.,Backport #5879.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5887,2019-10-01T14:13:17Z,2019-11-03T13:06:27Z,2019-11-03T13:06:27Z,CLOSED,False,1,1,1,https://github.com/gerdos82,Wrong OFFSET in query for CONNECTIONTYPE OGR,1,[],https://github.com/mapserver/mapserver/pull/5887,https://github.com/gerdos82,1,https://github.com/MapServer/MapServer/pull/5887,There is an issue in the OGR driver regarding the OFFSET used in the query. It is based on the startindex parameter in the WFS request. In this code the startindex is increased with one. In the postgis driver this is being compensated by doing a -1 on the startindex before using it as the OFFSET in the query. For the OGR driver this is omitted.,There is an issue in the OGR driver regarding the OFFSET used in the query. It is based on the startindex parameter in the WFS request. In this code the startindex is increased with one. In the postgis driver this is being compensated by doing a -1 on the startindex before using it as the OFFSET in the query. For the OGR driver this is omitted.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5887,2019-10-01T14:13:17Z,2019-11-03T13:06:27Z,2019-11-03T13:06:27Z,CLOSED,False,1,1,1,https://github.com/gerdos82,Wrong OFFSET in query for CONNECTIONTYPE OGR,1,[],https://github.com/mapserver/mapserver/pull/5887,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5887#issuecomment-537106113,There is an issue in the OGR driver regarding the OFFSET used in the query. It is based on the startindex parameter in the WFS request. In this code the startindex is increased with one. In the postgis driver this is being compensated by doing a -1 on the startindex before using it as the OFFSET in the query. For the OGR driver this is omitted.,It would be great if we could have a msautotest test case showing the effect of this fix,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5887,2019-10-01T14:13:17Z,2019-11-03T13:06:27Z,2019-11-03T13:06:27Z,CLOSED,False,1,1,1,https://github.com/gerdos82,Wrong OFFSET in query for CONNECTIONTYPE OGR,1,[],https://github.com/mapserver/mapserver/pull/5887,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/5887#issuecomment-549134941,There is an issue in the OGR driver regarding the OFFSET used in the query. It is based on the startindex parameter in the WFS request. In this code the startindex is increased with one. In the postgis driver this is being compensated by doing a -1 on the startindex before using it as the OFFSET in the query. For the OGR driver this is omitted.,Superseded by #5913 that adds a test case,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5888,2019-10-01T17:46:57Z,2019-10-10T10:41:46Z,2019-11-20T17:53:00Z,MERGED,True,2302,907,90,https://github.com/rouault,Port to PROJ 6 API,18,[],https://github.com/mapserver/mapserver/pull/5888,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5888,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5888,2019-10-01T17:46:57Z,2019-10-10T10:41:46Z,2019-11-20T17:53:00Z,MERGED,True,2302,907,90,https://github.com/rouault,Port to PROJ 6 API,18,[],https://github.com/mapserver/mapserver/pull/5888,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5888#issuecomment-556092683,,"Hi @rouault - I see there are some FastCGI related changes as part of this.
I made a new build from master and I'm getting HTTP 500 errors on IIS. The only information I can get from the failed request tracing is The system cannot open the file.  (0x4).
The error happens even with an empty request (no Mapfile or data involved) - it should return No query information to decode. QUERY_STRING is set, but empty.
I've checked a few things with process explorer but there are no obvious errors.
If I test with a Mapfile it successfully queries a database but won't return any data via IIS.
From the command line, and also when using the CgiModule rather than FastCgiModule in IIS everything works fine.
I also downloaded a master build from https://www.gisinternals.com/development.php and it has the same issue when running under FastCGI.
Any ideas on what may be the cause? I can take to the mailing list if more appropriate.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5888,2019-10-01T17:46:57Z,2019-10-10T10:41:46Z,2019-11-20T17:53:00Z,MERGED,True,2302,907,90,https://github.com/rouault,Port to PROJ 6 API,18,[],https://github.com/mapserver/mapserver/pull/5888,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/5888#issuecomment-556112135,,"I see there are some FastCGI related changes as part of this.

In the code you mean ? In theory no. mapserv.c which is where FCGI specific code is hasn't been touched. Commit f595e91 is indeed supposed to help for FCGI code or Python WSGI + MapServer. That said, I'm not sure I tested FCGI after my changes",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5888,2019-10-01T17:46:57Z,2019-10-10T10:41:46Z,2019-11-20T17:53:00Z,MERGED,True,2302,907,90,https://github.com/rouault,Port to PROJ 6 API,18,[],https://github.com/mapserver/mapserver/pull/5888,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/5888#issuecomment-556139910,,"OK, I've just test mapserver master against a PROJ 5 and PROJ 6 builds, with Apache and FastCGI under Linux, and it works fine...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5888,2019-10-01T17:46:57Z,2019-10-10T10:41:46Z,2019-11-20T17:53:00Z,MERGED,True,2302,907,90,https://github.com/rouault,Port to PROJ 6 API,18,[],https://github.com/mapserver/mapserver/pull/5888,https://github.com/geographika,5,https://github.com/MapServer/MapServer/pull/5888#issuecomment-556167673,,"@rouault - thanks for the update. I've looked through some other recent commits and nothing stands out. Simply switching from FastCgi to Cgi and everything works, so it doesn't appear to be a dependency issue. I'll try compiling with USE_PROJ set to false to see if that works.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5888,2019-10-01T17:46:57Z,2019-10-10T10:41:46Z,2019-11-20T17:53:00Z,MERGED,True,2302,907,90,https://github.com/rouault,Port to PROJ 6 API,18,[],https://github.com/mapserver/mapserver/pull/5888,https://github.com/rouault,6,https://github.com/MapServer/MapServer/pull/5888#issuecomment-556170404,,you could also try git bisect to find the offending commit,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5890,2019-10-04T15:14:01Z,2019-10-09T18:44:39Z,2019-10-09T18:44:39Z,MERGED,True,30,1,4,https://github.com/geographika,Add a new padding template format option,7,[],https://github.com/mapserver/mapserver/pull/5890,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5890,"See #5889 - adds a new ""padding"" format option for fixed length strings in a template.
Online testing in REPL at https://repl.it/repls/LeftSlimQuotient
Reviews of C code welcome, especially if variable declarations should be moved, and everything is created and freed correctly.","See #5889 - adds a new ""padding"" format option for fixed length strings in a template.
Online testing in REPL at https://repl.it/repls/LeftSlimQuotient
Reviews of C code welcome, especially if variable declarations should be moved, and everything is created and freed correctly.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5890,2019-10-04T15:14:01Z,2019-10-09T18:44:39Z,2019-10-09T18:44:39Z,MERGED,True,30,1,4,https://github.com/geographika,Add a new padding template format option,7,[],https://github.com/mapserver/mapserver/pull/5890,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5890#issuecomment-538447867,"See #5889 - adds a new ""padding"" format option for fixed length strings in a template.
Online testing in REPL at https://repl.it/repls/LeftSlimQuotient
Reviews of C code welcome, especially if variable declarations should be moved, and everything is created and freed correctly.",@rouault - many thanks for the review and explanations. I'll try and find an autotest for templates to add this to (also I'll update docs if this pull request is accepted).,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5890,2019-10-04T15:14:01Z,2019-10-09T18:44:39Z,2019-10-09T18:44:39Z,MERGED,True,30,1,4,https://github.com/geographika,Add a new padding template format option,7,[],https://github.com/mapserver/mapserver/pull/5890,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/5890#issuecomment-538501332,"See #5889 - adds a new ""padding"" format option for fixed length strings in a template.
Online testing in REPL at https://repl.it/repls/LeftSlimQuotient
Reviews of C code welcome, especially if variable declarations should be moved, and everything is created and freed correctly.","I think I’d just ignore the value. Is this for only padding on the right? What about supporting padding on the left or both? A negative number would be convenient for left padding, no idea on both. You’d almost need a second attribute, padding direction… Then again I don’t understand the use case very well.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5890,2019-10-04T15:14:01Z,2019-10-09T18:44:39Z,2019-10-09T18:44:39Z,MERGED,True,30,1,4,https://github.com/geographika,Add a new padding template format option,7,[],https://github.com/mapserver/mapserver/pull/5890,https://github.com/geographika,4,https://github.com/MapServer/MapServer/pull/5890#issuecomment-538548365,"See #5889 - adds a new ""padding"" format option for fixed length strings in a template.
Online testing in REPL at https://repl.it/repls/LeftSlimQuotient
Reviews of C code welcome, especially if variable declarations should be moved, and everything is created and freed correctly.","@sdlime - the main use case is to allow for creation of RST tables which rely on fixed width strings. I've no current use case for left padding though.
I've added docs and the RST table example to MapServer/MapServer-documentation#286
@rouault - thanks for taking the time to explain the errors. I think this is my first non-Python MapServer ""feature"" :)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5890,2019-10-04T15:14:01Z,2019-10-09T18:44:39Z,2019-10-09T18:44:39Z,MERGED,True,30,1,4,https://github.com/geographika,Add a new padding template format option,7,[],https://github.com/mapserver/mapserver/pull/5890,https://github.com/rouault,5,https://github.com/MapServer/MapServer/pull/5890#issuecomment-538551367,"See #5889 - adds a new ""padding"" format option for fixed length strings in a template.
Online testing in REPL at https://repl.it/repls/LeftSlimQuotient
Reviews of C code welcome, especially if variable declarations should be moved, and everything is created and freed correctly.","@rouault - thanks for taking the time to explain the errors. I think this is my first non-Python MapServer ""feature"" :)

Champaign !",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5891,2019-10-07T13:01:20Z,2019-11-01T14:52:22Z,2019-11-01T14:52:22Z,MERGED,True,1,3,1,https://github.com/marisn,WCS 1.0.0 server: Skip broken layers instead of a complete failure.,1,[],https://github.com/mapserver/mapserver/pull/5891,https://github.com/marisn,1,https://github.com/MapServer/MapServer/pull/5891,"When a WCS 1.0.0 GetCapabilities reply is made, a single failing layer (e.g. a wrong file name/path) will cause MapServer to truncate output of Capabilities document and list only thus far processed valid layers. This is strange choice as there is no error generated to indicate a failure and at the same time produced Capabilities document does not contain all valid layers. Thus the change causes Capabilities generator to just skip bad layer and continue with remaining layers.","When a WCS 1.0.0 GetCapabilities reply is made, a single failing layer (e.g. a wrong file name/path) will cause MapServer to truncate output of Capabilities document and list only thus far processed valid layers. This is strange choice as there is no error generated to indicate a failure and at the same time produced Capabilities document does not contain all valid layers. Thus the change causes Capabilities generator to just skip bad layer and continue with remaining layers.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5896,2019-10-13T07:58:14Z,2019-11-19T20:13:51Z,2020-01-19T20:17:15Z,MERGED,True,40,7,4,https://github.com/geographika,Make default_ in VALIDATION block case insensitive,10,[],https://github.com/mapserver/mapserver/pull/5896,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5896,"See #5895

Pull request changes strncmp to strncasecmp in the relevant checks of ""default_""
Adds a new test and results using DEFAULT_
Fixes a couple of typos in a string function comment

Can be squashed before merging.","See #5895

Pull request changes strncmp to strncasecmp in the relevant checks of ""default_""
Adds a new test and results using DEFAULT_
Fixes a couple of typos in a string function comment

Can be squashed before merging.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5896,2019-10-13T07:58:14Z,2019-11-19T20:13:51Z,2020-01-19T20:17:15Z,MERGED,True,40,7,4,https://github.com/geographika,Make default_ in VALIDATION block case insensitive,10,[],https://github.com/mapserver/mapserver/pull/5896,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5896#issuecomment-545888657,"See #5895

Pull request changes strncmp to strncasecmp in the relevant checks of ""default_""
Adds a new test and results using DEFAULT_
Fixes a couple of typos in a string function comment

Can be squashed before merging.",@sdlime I've no special opinion on this. Does that look good to you ?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5896,2019-10-13T07:58:14Z,2019-11-19T20:13:51Z,2020-01-19T20:17:15Z,MERGED,True,40,7,4,https://github.com/geographika,Make default_ in VALIDATION block case insensitive,10,[],https://github.com/mapserver/mapserver/pull/5896,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/5896#issuecomment-555633251,"See #5895

Pull request changes strncmp to strncasecmp in the relevant checks of ""default_""
Adds a new test and results using DEFAULT_
Fixes a couple of typos in a string function comment

Can be squashed before merging.",I think this looks good. Potential issue is one where folks are taking advantage of case sensitivity although I would think that would be kinda risky. Probably something to note in upgrade notes.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5896,2019-10-13T07:58:14Z,2019-11-19T20:13:51Z,2020-01-19T20:17:15Z,MERGED,True,40,7,4,https://github.com/geographika,Make default_ in VALIDATION block case insensitive,10,[],https://github.com/mapserver/mapserver/pull/5896,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/5896#issuecomment-555654248,"See #5895

Pull request changes strncmp to strncasecmp in the relevant checks of ""default_""
Adds a new test and results using DEFAULT_
Fixes a couple of typos in a string function comment

Can be squashed before merging.","@rouault or @geographika, is there an easy way to re-run the Appveyor check since this has been sitting here a month (I don't have the appveyor creditials handy)? Just in case...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5896,2019-10-13T07:58:14Z,2019-11-19T20:13:51Z,2020-01-19T20:17:15Z,MERGED,True,40,7,4,https://github.com/geographika,Make default_ in VALIDATION block case insensitive,10,[],https://github.com/mapserver/mapserver/pull/5896,https://github.com/rouault,5,https://github.com/MapServer/MapServer/pull/5896#issuecomment-555657765,"See #5895

Pull request changes strncmp to strncasecmp in the relevant checks of ""default_""
Adds a new test and results using DEFAULT_
Fixes a couple of typos in a string function comment

Can be squashed before merging.",Closing & reopening like I just did is one way :-),True,{'THUMBS_UP': ['https://github.com/sdlime']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5897,2019-10-14T07:56:02Z,2019-10-24T12:10:58Z,2020-02-27T23:19:19Z,MERGED,True,166,0,10,https://github.com/geographika,Add additional EXPRESSION msautotests,4,[],https://github.com/mapserver/mapserver/pull/5897,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5897,"This pull request adds some more complex EXPRESSION tests to the msautotest suite. Focus is on combined expressions (AND, OR etc.) using the various supported syntaxes, several of which are not covered by tests.
Test results are CSV exports so easy to review and add new tests on different OSs.","This pull request adds some more complex EXPRESSION tests to the msautotest suite. Focus is on combined expressions (AND, OR etc.) using the various supported syntaxes, several of which are not covered by tests.
Test results are CSV exports so easy to review and add new tests on different OSs.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5897,2019-10-14T07:56:02Z,2019-10-24T12:10:58Z,2020-02-27T23:19:19Z,MERGED,True,166,0,10,https://github.com/geographika,Add additional EXPRESSION msautotests,4,[],https://github.com/mapserver/mapserver/pull/5897,https://github.com/jbo-ads,2,https://github.com/MapServer/MapServer/pull/5897#issuecomment-591881359,"This pull request adds some more complex EXPRESSION tests to the msautotest suite. Focus is on combined expressions (AND, OR etc.) using the various supported syntaxes, several of which are not covered by tests.
Test results are CSV exports so easy to review and add new tests on different OSs.",It looks like msautotest/query/expected/expressions_test010.txt is missing from git repo.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5897,2019-10-14T07:56:02Z,2019-10-24T12:10:58Z,2020-02-27T23:19:19Z,MERGED,True,166,0,10,https://github.com/geographika,Add additional EXPRESSION msautotests,4,[],https://github.com/mapserver/mapserver/pull/5897,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5897#issuecomment-592227318,"This pull request adds some more complex EXPRESSION tests to the msautotest suite. Focus is on combined expressions (AND, OR etc.) using the various supported syntaxes, several of which are not covered by tests.
Test results are CSV exports so easy to review and add new tests on different OSs.",@jbo-ads - thanks for spotting this. Fixed with #6000,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5903,2019-10-23T18:41:15Z,2019-10-23T21:26:26Z,2019-10-23T21:26:26Z,CLOSED,False,25,1,1,https://github.com/charles-plante,Add support of TrueType symbols in UTFGrid,1,[],https://github.com/mapserver/mapserver/pull/5903,https://github.com/charles-plante,1,https://github.com/MapServer/MapServer/pull/5903,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5905,2019-10-23T19:38:41Z,2019-10-23T20:18:31Z,2019-10-23T20:18:31Z,MERGED,True,1,0,1,https://github.com/charles-plante,Fix uninitialized TileMode variable reported by valgrind (#5904),1,[],https://github.com/mapserver/mapserver/pull/5905,https://github.com/charles-plante,1,https://github.com/MapServer/MapServer/pull/5905,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5905,2019-10-23T19:38:41Z,2019-10-23T20:18:31Z,2019-10-23T20:18:31Z,MERGED,True,1,0,1,https://github.com/charles-plante,Fix uninitialized TileMode variable reported by valgrind (#5904),1,[],https://github.com/mapserver/mapserver/pull/5905,https://github.com/charles-plante,2,https://github.com/MapServer/MapServer/pull/5905#issuecomment-545615922,,#5904,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5906,2019-10-24T11:21:24Z,2019-10-24T11:22:05Z,2019-10-24T11:22:05Z,CLOSED,False,25,1,1,https://github.com/charles-plante,#5901 utf grid support for true type symbols,3,[],https://github.com/mapserver/mapserver/pull/5906,https://github.com/charles-plante,1,https://github.com/MapServer/MapServer/pull/5906,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5907,2019-10-24T11:27:46Z,2019-10-25T17:54:19Z,2019-10-25T17:54:20Z,CLOSED,False,25,1,1,https://github.com/charles-plante,Add support of TrueType symbols in UTFGrid,1,[],https://github.com/mapserver/mapserver/pull/5907,https://github.com/charles-plante,1,https://github.com/MapServer/MapServer/pull/5907,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5907,2019-10-24T11:27:46Z,2019-10-25T17:54:19Z,2019-10-25T17:54:20Z,CLOSED,False,25,1,1,https://github.com/charles-plante,Add support of TrueType symbols in UTFGrid,1,[],https://github.com/mapserver/mapserver/pull/5907,https://github.com/charles-plante,2,https://github.com/MapServer/MapServer/pull/5907#issuecomment-546340594,,Amended the commit to skip treatment instead of fail if symbol not found,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5907,2019-10-24T11:27:46Z,2019-10-25T17:54:19Z,2019-10-25T17:54:20Z,CLOSED,False,25,1,1,https://github.com/charles-plante,Add support of TrueType symbols in UTFGrid,1,[],https://github.com/mapserver/mapserver/pull/5907,https://github.com/dmorissette,3,https://github.com/MapServer/MapServer/pull/5907#issuecomment-546450585,,"As discussed offline, we need tests in msautotest to test utfgrid behavior vs TTF symbols and labels (via labelcache vs labels with force=true) and to confirm the fix. Closing for now.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5908,2019-10-24T12:45:09Z,2019-10-28T14:18:49Z,2019-10-28T14:18:49Z,MERGED,True,953,523,25,https://github.com/rouault,SLD: handle several UserStyle per NamedLayer,9,[],https://github.com/mapserver/mapserver/pull/5908,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5908,"This pull request has a number of preliminary refactoring steps that should have no functional changes.
The 2 interesting commits are:

SLD parsing: handle several UserStyle per NamedLayer, honour UserStyle.Name to set the CLASS.GROUP value, and honour UserStyle.IsDefault to set LAYER.CLASSGROUP
SLD generation: write UserStyle.Name from CLASS.GROUP (one UserStyle per class that share the same CLASS.GROUP) and UserStyle.IsDefault from LAYER.CLASSGROUP","This pull request has a number of preliminary refactoring steps that should have no functional changes.
The 2 interesting commits are:

SLD parsing: handle several UserStyle per NamedLayer, honour UserStyle.Name to set the CLASS.GROUP value, and honour UserStyle.IsDefault to set LAYER.CLASSGROUP
SLD generation: write UserStyle.Name from CLASS.GROUP (one UserStyle per class that share the same CLASS.GROUP) and UserStyle.IsDefault from LAYER.CLASSGROUP",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5910,2019-10-27T15:37:54Z,2019-10-30T13:20:06Z,2019-10-30T13:20:06Z,MERGED,True,329,149,25,https://github.com/rouault,"gml_[item]_type: modify Date semantics, and add Time and DateTime",1,[],https://github.com/mapserver/mapserver/pull/5910,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5910,"Currently, for vector features, we have a Date datatype that is used
indifferently for Date, Time, DateTime, which can cause approximations
in GML or other output formats (such as OGR GeoJSON), since the output
doesn't really know the exact input.
This change modifies the semantics of Date to mean date, without time,
and add Time (time, without date) and DateTime. The type autodetection
is modified in the MSSQL2008, OGR, Oracle and PostGIS backends. On the
output side, the WFS/GML and OGR output are modified to take into account
those 3 separate types.","Currently, for vector features, we have a Date datatype that is used
indifferently for Date, Time, DateTime, which can cause approximations
in GML or other output formats (such as OGR GeoJSON), since the output
doesn't really know the exact input.
This change modifies the semantics of Date to mean date, without time,
and add Time (time, without date) and DateTime. The type autodetection
is modified in the MSSQL2008, OGR, Oracle and PostGIS backends. On the
output side, the WFS/GML and OGR output are modified to take into account
those 3 separate types.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5911,2019-10-30T12:51:23Z,2019-11-03T12:02:15Z,2019-11-03T12:02:15Z,MERGED,True,1,1,1,https://github.com/DennisRutjes,Added check for Contains to force a Join on the rtree table for large…,1,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5911,https://github.com/DennisRutjes,1,https://github.com/MapServer/MapServer/pull/5911,… Spatiallite/Geopackage DB's and improves the lookup performance significantly.,… Spatiallite/Geopackage DB's and improves the lookup performance significantly.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5911,2019-10-30T12:51:23Z,2019-11-03T12:02:15Z,2019-11-03T12:02:15Z,MERGED,True,1,1,1,https://github.com/DennisRutjes,Added check for Contains to force a Join on the rtree table for large…,1,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5911,https://github.com/jratike80,2,https://github.com/MapServer/MapServer/pull/5911#issuecomment-547928882,… Spatiallite/Geopackage DB's and improves the lookup performance significantly.,Could you please give a use case when having a check for both Intersects and Contains gives significant speedup.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5911,2019-10-30T12:51:23Z,2019-11-03T12:02:15Z,2019-11-03T12:02:15Z,MERGED,True,1,1,1,https://github.com/DennisRutjes,Added check for Contains to force a Join on the rtree table for large…,1,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5911,https://github.com/DennisRutjes,3,https://github.com/MapServer/MapServer/pull/5911#issuecomment-547975682,… Spatiallite/Geopackage DB's and improves the lookup performance significantly.,"We are using a geo package of about 10 GB.
When our user performs OGC contains filtering, the spatial index is not consulted resulting in a server timeout due to a full table scan, this patch will alleviate the problem.
It is not only a check, but the Intersects also results in a rect_is_defined = true;
The  rect_is_defined = true; results for OGR/GPKG in using  the SpatialIndex,
        if (psInfo->dialect && bIsValidRect ) {

on line 2409 with the correct dialect.
It would be nice if we get also an Inventory which other functions could benefit from this like WITHIN for example.
Resulting SQL:
..... geom"" AS ""geom"" FROM ""Perceel"" JOIN ""rtree_Perceel_geom"" ms_spat_idx ON ""Perceel"".ROWID = ms_spat_idx.id AND ms_spat_idx.minx <= 223165.183833965 
...
But for good measure what was the use-case for only intersects to do a join on the spatial index?
With kind regards,
Dennis Rutjes",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5912,2019-11-03T12:02:26Z,2019-11-03T12:45:12Z,2019-11-03T12:45:15Z,MERGED,True,1,1,1,https://github.com/apps/backporting,[Backport branch-7-4] Added check for Contains to force a Join on the rtree table for large…,1,[],https://github.com/mapserver/mapserver/pull/5912,https://github.com/apps/backporting,1,https://github.com/MapServer/MapServer/pull/5912,Backport #5911.,Backport #5911.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5913,2019-11-03T13:05:57Z,2019-11-03T13:36:18Z,2019-11-03T13:36:18Z,MERGED,True,159,1,5,https://github.com/rouault,Wrong OFFSET in query for CONNECTIONTYPE OGR ,2,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5913,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5913,Continuation of #5887 with a test case,Continuation of #5887 with a test case,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5914,2019-11-03T13:36:34Z,2019-11-03T14:27:19Z,2019-11-03T14:27:22Z,MERGED,True,159,1,5,https://github.com/apps/backporting,[Backport branch-7-4] Wrong OFFSET in query for CONNECTIONTYPE OGR ,2,[],https://github.com/mapserver/mapserver/pull/5914,https://github.com/apps/backporting,1,https://github.com/MapServer/MapServer/pull/5914,Backport #5913.,Backport #5913.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5917,2019-11-11T15:16:24Z,2019-11-12T20:02:37Z,2019-11-12T20:34:59Z,MERGED,True,7,1,3,https://github.com/charles-plante,Dont fail when rendering UTFGrid with outline,1,[],https://github.com/mapserver/mapserver/pull/5917,https://github.com/charles-plante,1,https://github.com/MapServer/MapServer/pull/5917,Add support for outline with a case test,Add support for outline with a case test,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5917,2019-11-11T15:16:24Z,2019-11-12T20:02:37Z,2019-11-12T20:34:59Z,MERGED,True,7,1,3,https://github.com/charles-plante,Dont fail when rendering UTFGrid with outline,1,[],https://github.com/mapserver/mapserver/pull/5917,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5917#issuecomment-552512700,Add support for outline with a case test,Travis-CI failures seem unrelated. I've created https://trac.osgeo.org/osgeo/ticket/2381,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5917,2019-11-11T15:16:24Z,2019-11-12T20:02:37Z,2019-11-12T20:34:59Z,MERGED,True,7,1,3,https://github.com/charles-plante,Dont fail when rendering UTFGrid with outline,1,[],https://github.com/mapserver/mapserver/pull/5917,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/5917#issuecomment-552517022,Add support for outline with a case test,I have restarted the demo server.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5918,2019-11-11T15:18:41Z,2019-11-12T21:04:27Z,2019-11-12T21:04:27Z,MERGED,True,114,8,8,https://github.com/charles-plante,5901 utf grid support for true type symbols,3,[],https://github.com/mapserver/mapserver/pull/5918,https://github.com/charles-plante,1,https://github.com/MapServer/MapServer/pull/5918,Add support of glyph symbol in UTFGrid with a test,Add support of glyph symbol in UTFGrid with a test,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5918,2019-11-11T15:18:41Z,2019-11-12T21:04:27Z,2019-11-12T21:04:27Z,MERGED,True,114,8,8,https://github.com/charles-plante,5901 utf grid support for true type symbols,3,[],https://github.com/mapserver/mapserver/pull/5918,https://github.com/dmorissette,2,https://github.com/MapServer/MapServer/pull/5918#issuecomment-552924626,Add support of glyph symbol in UTFGrid with a test,Hi @rouault. When we look on Travis the tests seem to have passed but this PR does not seem to have received the update. Any idea?  Could this be related to the demo server problem from yesterday? Is there a way to force a new CI test?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5918,2019-11-11T15:18:41Z,2019-11-12T21:04:27Z,2019-11-12T21:04:27Z,MERGED,True,114,8,8,https://github.com/charles-plante,5901 utf grid support for true type symbols,3,[],https://github.com/mapserver/mapserver/pull/5918,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/5918#issuecomment-552926705,Add support of glyph symbol in UTFGrid with a test,"Any idea?

I restarted the Travis-CI jobs after @jmckenna fixed the demo server issue. I assume this is just a bug in the connection between GitHub and Travis-CI. You could potentially ""git commit --amend && git push --force"" to force a new build",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5920,2019-11-12T19:36:17Z,2019-11-19T18:00:54Z,2019-11-21T21:11:29Z,MERGED,True,67,43,2,https://github.com/sdlime,Bring msDrawQueryLayer() in line with msDrawVectorLayer() - addresses…,5,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5920,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/5920,… #5744.,… #5744.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5920,2019-11-12T19:36:17Z,2019-11-19T18:00:54Z,2019-11-21T21:11:29Z,MERGED,True,67,43,2,https://github.com/sdlime,Bring msDrawQueryLayer() in line with msDrawVectorLayer() - addresses…,5,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5920,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5920#issuecomment-555135955,… #5744.,"@geographika, can you try testing again? I pushed the WMS filter execution below style handling so  that the right class is referenced within the query code. This should address your specific issue.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5920,2019-11-12T19:36:17Z,2019-11-19T18:00:54Z,2019-11-21T21:11:29Z,MERGED,True,67,43,2,https://github.com/sdlime,Bring msDrawQueryLayer() in line with msDrawVectorLayer() - addresses…,5,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5920,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5920#issuecomment-555389670,… #5744.,@sdlime - excellent! The style is now applied along with the filtering.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5920,2019-11-12T19:36:17Z,2019-11-19T18:00:54Z,2019-11-21T21:11:29Z,MERGED,True,67,43,2,https://github.com/sdlime,Bring msDrawQueryLayer() in line with msDrawVectorLayer() - addresses…,5,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5920,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/5920#issuecomment-556071802,… #5744.,"@rouault, this is the first time I've tried using the backport function. I thought all that was needed was to set the appropriate label and then merge. Is that not true?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5923,2019-11-14T16:54:20Z,2019-11-14T19:36:29Z,2019-11-14T19:36:29Z,MERGED,True,43,0,3,https://github.com/charles-plante,#5922 - Support rotation of TrueType symbol in UTFGrid,1,[],https://github.com/mapserver/mapserver/pull/5923,https://github.com/charles-plante,1,https://github.com/MapServer/MapServer/pull/5923,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5923,2019-11-14T16:54:20Z,2019-11-14T19:36:29Z,2019-11-14T19:36:29Z,MERGED,True,43,0,3,https://github.com/charles-plante,#5922 - Support rotation of TrueType symbol in UTFGrid,1,[],https://github.com/mapserver/mapserver/pull/5923,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5923#issuecomment-553982391,,"Note: to get automatic closing of the original issue on merging, your commit message must include a reserved keyword in addition to the #NUMBER. Like ""bla (fixes #NUMBER)"". See https://help.github.com/en/github/managing-your-work-on-github/closing-issues-using-keywords#about-issue-references",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5924,2019-11-19T14:23:30Z,2020-02-17T20:04:40Z,2020-02-17T20:04:51Z,MERGED,True,25,8,6,https://github.com/ravhed,WMS Client - Fixes GetLegendGraphic in WMS 1.3.0,1,[],https://github.com/mapserver/mapserver/pull/5924,https://github.com/ravhed,1,https://github.com/MapServer/MapServer/pull/5924,"SLD_VERSION parameter is mandatory in GetLegendGraphic as specified by SLD version 1.1.0. This commit adds this parameter when requesting WMS services with version 1.3.0 or higher.
In addition to this it also fixes style parameter: in GetLegendGraphic it should be named STYLE and not STYLES.
Two new testcases has been added for the WMS client which will test GetLegendGraphic functionality for both WMS 1.1.1 and WMS 1.3.0.
Note: SLD_VERSION is hard coded to be set to version 1.1.0. According to these lines
https://github.com/mapserver/mapserver/blob/ee52c482531b0f8fa2e2fe4abe0fb2d979f93f40/mapwms.c#L4467-L4469
WMS version 1.3.0 only supports SLD_VERSION 1.1.0. I'm not entirely sure if this is correct as I've not found anything in the standards stating this.","SLD_VERSION parameter is mandatory in GetLegendGraphic as specified by SLD version 1.1.0. This commit adds this parameter when requesting WMS services with version 1.3.0 or higher.
In addition to this it also fixes style parameter: in GetLegendGraphic it should be named STYLE and not STYLES.
Two new testcases has been added for the WMS client which will test GetLegendGraphic functionality for both WMS 1.1.1 and WMS 1.3.0.
Note: SLD_VERSION is hard coded to be set to version 1.1.0. According to these lines
https://github.com/mapserver/mapserver/blob/ee52c482531b0f8fa2e2fe4abe0fb2d979f93f40/mapwms.c#L4467-L4469
WMS version 1.3.0 only supports SLD_VERSION 1.1.0. I'm not entirely sure if this is correct as I've not found anything in the standards stating this.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5924,2019-11-19T14:23:30Z,2020-02-17T20:04:40Z,2020-02-17T20:04:51Z,MERGED,True,25,8,6,https://github.com/ravhed,WMS Client - Fixes GetLegendGraphic in WMS 1.3.0,1,[],https://github.com/mapserver/mapserver/pull/5924,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5924#issuecomment-556117076,"SLD_VERSION parameter is mandatory in GetLegendGraphic as specified by SLD version 1.1.0. This commit adds this parameter when requesting WMS services with version 1.3.0 or higher.
In addition to this it also fixes style parameter: in GetLegendGraphic it should be named STYLE and not STYLES.
Two new testcases has been added for the WMS client which will test GetLegendGraphic functionality for both WMS 1.1.1 and WMS 1.3.0.
Note: SLD_VERSION is hard coded to be set to version 1.1.0. According to these lines
https://github.com/mapserver/mapserver/blob/ee52c482531b0f8fa2e2fe4abe0fb2d979f93f40/mapwms.c#L4467-L4469
WMS version 1.3.0 only supports SLD_VERSION 1.1.0. I'm not entirely sure if this is correct as I've not found anything in the standards stating this.",There are some changes to the autotest python script in the mix in addition to the WMS changes.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5924,2019-11-19T14:23:30Z,2020-02-17T20:04:40Z,2020-02-17T20:04:51Z,MERGED,True,25,8,6,https://github.com/ravhed,WMS Client - Fixes GetLegendGraphic in WMS 1.3.0,1,[],https://github.com/mapserver/mapserver/pull/5924,https://github.com/ravhed,3,https://github.com/MapServer/MapServer/pull/5924#issuecomment-556154820,"SLD_VERSION parameter is mandatory in GetLegendGraphic as specified by SLD version 1.1.0. This commit adds this parameter when requesting WMS services with version 1.3.0 or higher.
In addition to this it also fixes style parameter: in GetLegendGraphic it should be named STYLE and not STYLES.
Two new testcases has been added for the WMS client which will test GetLegendGraphic functionality for both WMS 1.1.1 and WMS 1.3.0.
Note: SLD_VERSION is hard coded to be set to version 1.1.0. According to these lines
https://github.com/mapserver/mapserver/blob/ee52c482531b0f8fa2e2fe4abe0fb2d979f93f40/mapwms.c#L4467-L4469
WMS version 1.3.0 only supports SLD_VERSION 1.1.0. I'm not entirely sure if this is correct as I've not found anything in the standards stating this.","There are some changes to the autotest python script in the mix in addition to the WMS changes.

Yes that is correct and I should probably have mentioned that. The demime function as it was previously didn't work for the PNG generated by the WMS client GetLegendGraphic test I added (it kept the content-type header even though I set it to be demimed). With the changes I did it works for that case as well. I'm actually not sure why this PNG was different from the other ones but I assume it has something to do with the WMS client.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5924,2019-11-19T14:23:30Z,2020-02-17T20:04:40Z,2020-02-17T20:04:51Z,MERGED,True,25,8,6,https://github.com/ravhed,WMS Client - Fixes GetLegendGraphic in WMS 1.3.0,1,[],https://github.com/mapserver/mapserver/pull/5924,https://github.com/geographika,4,https://github.com/MapServer/MapServer/pull/5924#issuecomment-585115225,"SLD_VERSION parameter is mandatory in GetLegendGraphic as specified by SLD version 1.1.0. This commit adds this parameter when requesting WMS services with version 1.3.0 or higher.
In addition to this it also fixes style parameter: in GetLegendGraphic it should be named STYLE and not STYLES.
Two new testcases has been added for the WMS client which will test GetLegendGraphic functionality for both WMS 1.1.1 and WMS 1.3.0.
Note: SLD_VERSION is hard coded to be set to version 1.1.0. According to these lines
https://github.com/mapserver/mapserver/blob/ee52c482531b0f8fa2e2fe4abe0fb2d979f93f40/mapwms.c#L4467-L4469
WMS version 1.3.0 only supports SLD_VERSION 1.1.0. I'm not entirely sure if this is correct as I've not found anything in the standards stating this.","Looks good to me, and just reran tests against master. Thanks @ravhed !",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5924,2019-11-19T14:23:30Z,2020-02-17T20:04:40Z,2020-02-17T20:04:51Z,MERGED,True,25,8,6,https://github.com/ravhed,WMS Client - Fixes GetLegendGraphic in WMS 1.3.0,1,[],https://github.com/mapserver/mapserver/pull/5924,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/5924#issuecomment-587140805,"SLD_VERSION parameter is mandatory in GetLegendGraphic as specified by SLD version 1.1.0. This commit adds this parameter when requesting WMS services with version 1.3.0 or higher.
In addition to this it also fixes style parameter: in GetLegendGraphic it should be named STYLE and not STYLES.
Two new testcases has been added for the WMS client which will test GetLegendGraphic functionality for both WMS 1.1.1 and WMS 1.3.0.
Note: SLD_VERSION is hard coded to be set to version 1.1.0. According to these lines
https://github.com/mapserver/mapserver/blob/ee52c482531b0f8fa2e2fe4abe0fb2d979f93f40/mapwms.c#L4467-L4469
WMS version 1.3.0 only supports SLD_VERSION 1.1.0. I'm not entirely sure if this is correct as I've not found anything in the standards stating this.",thanks @ravhed !!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5925,2019-11-20T20:28:55Z,2019-11-20T21:07:38Z,2019-11-20T21:07:38Z,MERGED,True,1,9,1,https://github.com/rouault,msGetThreadId(): fix for Windows,1,[],https://github.com/mapserver/mapserver/pull/5925,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5925,"Revert partly ba3d172
Credits to @geographika for bisecting down to that commit.","Revert partly ba3d172
Credits to @geographika for bisecting down to that commit.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5926,2019-11-21T19:47:35Z,2019-11-21T20:26:25Z,2019-11-22T14:18:02Z,MERGED,True,1,0,1,https://github.com/sdlime,Legendicon 500 error,7,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5926,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/5926,"This fixes an error (segfault) with legendicon requests against certain layer/class configurations. In my case it was with lines using TrueType symbols placed along the line (e.g. railroad ties).
--Steve","This fixes an error (segfault) with legendicon requests against certain layer/class configurations. In my case it was with lines using TrueType symbols placed along the line (e.g. railroad ties).
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5926,2019-11-21T19:47:35Z,2019-11-21T20:26:25Z,2019-11-22T14:18:02Z,MERGED,True,1,0,1,https://github.com/sdlime,Legendicon 500 error,7,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5926,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5926#issuecomment-557245582,"This fixes an error (segfault) with legendicon requests against certain layer/class configurations. In my case it was with lines using TrueType symbols placed along the line (e.g. railroad ties).
--Steve","Should squish/squash to one commit message. @rouault, can this be done from the UI or does one have to go to the command line? The fix itself is trivial.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5926,2019-11-21T19:47:35Z,2019-11-21T20:26:25Z,2019-11-22T14:18:02Z,MERGED,True,1,0,1,https://github.com/sdlime,Legendicon 500 error,7,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5926,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/5926#issuecomment-557252112,"This fixes an error (segfault) with legendicon requests against certain layer/class configurations. In my case it was with lines using TrueType symbols placed along the line (e.g. railroad ties).
--Steve","can this be done from the UI

Sure. Just at the right of the ""Merge pull request"" button there is a small bottom-oriented arrow ti display a combobox. Click on it and select ""Squash and merge"". Then click on the updated button, and adjust the squashed commit title and message. Note: the setting will apparently remain for next visits. So be careful to check it if you want to do a regular merge rather than a squash",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5926,2019-11-21T19:47:35Z,2019-11-21T20:26:25Z,2019-11-22T14:18:02Z,MERGED,True,1,0,1,https://github.com/sdlime,Legendicon 500 error,7,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5926,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/5926#issuecomment-557258840,"This fixes an error (segfault) with legendicon requests against certain layer/class configurations. In my case it was with lines using TrueType symbols placed along the line (e.g. railroad ties).
--Steve","Woot! Thanks, never noticed that before. --Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5927,2019-11-24T16:44:22Z,2019-11-26T20:34:55Z,2019-11-26T20:34:55Z,MERGED,True,60,0,1,https://github.com/geographika,Add some basic clusterObj tests,2,[],https://github.com/mapserver/mapserver/pull/5927,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5927,"clusterObj tests for Python MapScript.
Cherrypicked from #5870 - which has become too out-of-date to rebase easily. I'll break this down into smaller more logical pull requests.","clusterObj tests for Python MapScript.
Cherrypicked from #5870 - which has become too out-of-date to rebase easily. I'll break this down into smaller more logical pull requests.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5928,2019-11-24T17:49:46Z,2019-11-26T20:33:51Z,2019-11-26T20:33:52Z,MERGED,True,41,0,1,https://github.com/geographika,Add Python mapscript getter/setter tests for classObj,1,[],https://github.com/mapserver/mapserver/pull/5928,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5928,Cherrypicked from #5870,Cherrypicked from #5870,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5929,2019-11-24T17:59:27Z,2019-11-26T20:35:13Z,2019-11-26T20:35:13Z,MERGED,True,3211,3212,1,https://github.com/geographika,Make numlabels and labelLeaderObj immutable,2,[],https://github.com/mapserver/mapserver/pull/5929,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5929,"See comments at #5870 (comment)

Numlabels - or any similar counters - should be immutable. So following that logic numstyles should also be immutable.
Leader - no so sure about that one. Looks like styles and labels aren't even exposed to MapScript and users must work through the helper methods. Makes sense since they are arrays.","See comments at #5870 (comment)

Numlabels - or any similar counters - should be immutable. So following that logic numstyles should also be immutable.
Leader - no so sure about that one. Looks like styles and labels aren't even exposed to MapScript and users must work through the helper methods. Makes sense since they are arrays.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5930,2019-11-24T21:06:46Z,2019-11-26T20:34:37Z,2019-11-26T20:34:37Z,MERGED,True,179,76,8,https://github.com/geographika,Add docstrings to SWIG objects,3,[],https://github.com/mapserver/mapserver/pull/5930,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5930,"Taken from #5870 - adds in docstrings for autodoc generation for the following classes:

cluster
color
connpool
dbfinfo
error
hashtable
image","Taken from #5870 - adds in docstrings for autodoc generation for the following classes:

cluster
color
connpool
dbfinfo
error
hashtable
image",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5931,2019-11-26T22:29:51Z,2019-11-26T22:52:57Z,2019-11-26T22:52:57Z,MERGED,True,34,0,2,https://github.com/rouault,msautotest: add a CONNECTIONTYPE CONTOUR test with an expression based on elevation,1,[],https://github.com/mapserver/mapserver/pull/5931,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5931,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5932,2019-11-26T22:43:24Z,2019-11-29T17:08:48Z,2019-11-29T17:08:48Z,CLOSED,False,3251,3212,5,https://github.com/geographika,Add setSymbolByName test,10,['MapScript-Python'],https://github.com/mapserver/mapserver/pull/5932,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5932,"See mailing list post at [1]. Setting a style symbol name has no effect. This pull request makes it immutable and adds a test for the newer setSymbolByName as added in #1835
[1] https://lists.osgeo.org/pipermail/mapserver-users/2019-November/081492.html","See mailing list post at [1]. Setting a style symbol name has no effect. This pull request makes it immutable and adds a test for the newer setSymbolByName as added in #1835
[1] https://lists.osgeo.org/pipermail/mapserver-users/2019-November/081492.html",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5933,2019-11-26T22:57:18Z,2019-11-29T15:27:34Z,2019-11-29T17:02:02Z,MERGED,True,3212,3211,1,https://github.com/geographika,Revert #5929 due to line endings,1,[],https://github.com/mapserver/mapserver/pull/5933,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5933,"Revert ""Make numlabels and labelLeaderObj immutable (#5929)"" due to line ending changes (thanks Visual Studio).
This reverts commit 5a06fc8.","Revert ""Make numlabels and labelLeaderObj immutable (#5929)"" due to line ending changes (thanks Visual Studio).
This reverts commit 5a06fc8.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5933,2019-11-26T22:57:18Z,2019-11-29T15:27:34Z,2019-11-29T17:02:02Z,MERGED,True,3212,3211,1,https://github.com/geographika,Revert #5929 due to line endings,1,[],https://github.com/mapserver/mapserver/pull/5933,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5933#issuecomment-558854191,"Revert ""Make numlabels and labelLeaderObj immutable (#5929)"" due to line ending changes (thanks Visual Studio).
This reverts commit 5a06fc8.","@rouault @sdlime - apologies I didn't notice my editor had changed the line endings from Unix to Windows on this 2 line pull request to mapserver.h
I've reverted the commit in a branch and made this new pull request - is this the best way to revert the change to restore the history on mapserver.h? Is it ok to merge?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5933,2019-11-26T22:57:18Z,2019-11-29T15:27:34Z,2019-11-29T17:02:02Z,MERGED,True,3212,3211,1,https://github.com/geographika,Revert #5929 due to line endings,1,[],https://github.com/mapserver/mapserver/pull/5933,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/5933#issuecomment-559823487,"Revert ""Make numlabels and labelLeaderObj immutable (#5929)"" due to line ending changes (thanks Visual Studio).
This reverts commit 5a06fc8.","This will not ""restore"" history: w would have to rewrite it with git rebase etc, but this is a bad practice to do in the master branch, so yes, the git revert here is the appropriate action.
We could probably also have some CI testing of line endings to reject a PR that would change them",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5934,2019-11-27T10:21:01Z,2019-11-29T15:28:56Z,2019-11-30T15:40:19Z,MERGED,True,4,0,1,https://github.com/geographika,Force LF line endings,2,[],https://github.com/mapserver/mapserver/pull/5934,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5934,"As per https://stackoverflow.com/a/42136008/179520 this should force LF endings.
Hopefully this will avoid errors such as the one I made with the #5929 and its reversion in #5933.","As per https://stackoverflow.com/a/42136008/179520 this should force LF endings.
Hopefully this will avoid errors such as the one I made with the #5929 and its reversion in #5933.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5934,2019-11-27T10:21:01Z,2019-11-29T15:28:56Z,2019-11-30T15:40:19Z,MERGED,True,4,0,1,https://github.com/geographika,Force LF line endings,2,[],https://github.com/mapserver/mapserver/pull/5934,https://github.com/dmorissette,2,https://github.com/MapServer/MapServer/pull/5934#issuecomment-559871790,"As per https://stackoverflow.com/a/42136008/179520 this should force LF endings.
Hopefully this will avoid errors such as the one I made with the #5929 and its reversion in #5933.","With this change, when we clone a new copy of the master from github, all binary files in the msautotest/expected folders end up appearing as modified due to a linefeed difference in ""git status"". Maybe something missing or your setting is a bit too agressive?
$ git clone https://github.com/mapserver/mapserver.git ms-test
Cloning into 'ms-test'...
[...]
$ cd ms-test/
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use ""git add <file>..."" to update what will be committed)
  (use ""git checkout -- <file>..."" to discard changes in working directory)

	modified:   msautotest/renderers/data/VL-Gothic-Regular.ttf
	modified:   msautotest/renderers/data/cities.shp
	modified:   msautotest/renderers/data/cities.shx
...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5934,2019-11-27T10:21:01Z,2019-11-29T15:28:56Z,2019-11-30T15:40:19Z,MERGED,True,4,0,1,https://github.com/geographika,Force LF line endings,2,[],https://github.com/mapserver/mapserver/pull/5934,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/5934#issuecomment-559873834,"As per https://stackoverflow.com/a/42136008/179520 this should force LF endings.
Hopefully this will avoid errors such as the one I made with the #5929 and its reversion in #5933.",I had an odd feeling this might have unwanted side effects. Reverting,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5934,2019-11-27T10:21:01Z,2019-11-29T15:28:56Z,2019-11-30T15:40:19Z,MERGED,True,4,0,1,https://github.com/geographika,Force LF line endings,2,[],https://github.com/mapserver/mapserver/pull/5934,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/5934#issuecomment-559873979,"As per https://stackoverflow.com/a/42136008/179520 this should force LF endings.
Hopefully this will avoid errors such as the one I made with the #5929 and its reversion in #5933.",Reverted per #5936,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5934,2019-11-27T10:21:01Z,2019-11-29T15:28:56Z,2019-11-30T15:40:19Z,MERGED,True,4,0,1,https://github.com/geographika,Force LF line endings,2,[],https://github.com/mapserver/mapserver/pull/5934,https://github.com/alexbrault,5,https://github.com/MapServer/MapServer/pull/5934#issuecomment-559876846,"As per https://stackoverflow.com/a/42136008/179520 this should force LF endings.
Hopefully this will avoid errors such as the one I made with the #5929 and its reversion in #5933.","Looking into this further (as I don't encounter the same problem as @dmorissette on my local machine), it seems to be a bug in git that was fixed with git 2.10.0 (released in September 2016)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5934,2019-11-27T10:21:01Z,2019-11-29T15:28:56Z,2019-11-30T15:40:19Z,MERGED,True,4,0,1,https://github.com/geographika,Force LF line endings,2,[],https://github.com/mapserver/mapserver/pull/5934,https://github.com/geographika,6,https://github.com/MapServer/MapServer/pull/5934#issuecomment-559982826,"As per https://stackoverflow.com/a/42136008/179520 this should force LF endings.
Hopefully this will avoid errors such as the one I made with the #5929 and its reversion in #5933.","Ok looks like that made things worse!
Looks like GDAL had a similar issue - https://github.com/OSGeo/gdal/blob/master/.gitattributes
Note git issue fix noted here.
The suggestiong by @rouault for some CI checks for line endings on pull requests seems a better way to go (compared to JS/Python C seems to lack a nice linting tool from my initial searches).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5934,2019-11-27T10:21:01Z,2019-11-29T15:28:56Z,2019-11-30T15:40:19Z,MERGED,True,4,0,1,https://github.com/geographika,Force LF line endings,2,[],https://github.com/mapserver/mapserver/pull/5934,https://github.com/rouault,7,https://github.com/MapServer/MapServer/pull/5934#issuecomment-559984803,"As per https://stackoverflow.com/a/42136008/179520 this should force LF endings.
Hopefully this will avoid errors such as the one I made with the #5929 and its reversion in #5933.","C seems to lack a nice linting tool from my initial searches

There are tools like clang-format (used by PROJ) or astyle (used by QGIS, openjpeg) that can be used to check that code is formatted according to a standard defined by the project. Not sure they check for line endings by the way and requires to do a global reformat of the code to comply with the formatting choices.
GDAL has a pretty ad-hoc approach with a few scripts like https://github.com/OSGeo/gdal/blob/master/gdal/scripts/detect_tabulations.sh , but we do not actually check line endings",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5935,2019-11-29T14:37:52Z,2019-12-11T20:20:07Z,2019-12-11T20:20:07Z,MERGED,True,117,1296,54,https://github.com/rouault,"Assert our addiction to GDAL and PROJ, and make them required dependencies",1,[],https://github.com/mapserver/mapserver/pull/5935,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5935,"Because:

this was already the case. branch-7-4 does not even compile without them.
the sheer number of places where they were needed is an evidence that MapServer
is not MapServer without them
it makes the code easier to comprehend.","Because:

this was already the case. branch-7-4 does not even compile without them.
the sheer number of places where they were needed is an evidence that MapServer
is not MapServer without them
it makes the code easier to comprehend.",True,{'THUMBS_UP': ['https://github.com/ravhed']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5935,2019-11-29T14:37:52Z,2019-12-11T20:20:07Z,2019-12-11T20:20:07Z,MERGED,True,117,1296,54,https://github.com/rouault,"Assert our addiction to GDAL and PROJ, and make them required dependencies",1,[],https://github.com/mapserver/mapserver/pull/5935,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5935#issuecomment-562175451,"Because:

this was already the case. branch-7-4 does not even compile without them.
the sheer number of places where they were needed is an evidence that MapServer
is not MapServer without them
it makes the code easier to comprehend.",related ticket in docs: MapServer/MapServer-documentation#236,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5936,2019-11-29T20:07:16Z,2019-11-29T20:07:38Z,2019-11-29T20:07:38Z,MERGED,True,0,4,1,https://github.com/rouault,"Revert ""Force LF line endings""",1,[],https://github.com/mapserver/mapserver/pull/5936,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5936,"Reverts #5934
Causes binary files to see their line endings changed","Reverts #5934
Causes binary files to see their line endings changed",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5937,2019-11-30T23:44:57Z,2019-12-02T20:08:28Z,2019-12-02T20:08:28Z,MERGED,True,2,3,2,https://github.com/geographika,Add setSymbolByName test,3,[],https://github.com/mapserver/mapserver/pull/5937,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5937,"See mailing list post at [1]. Setting a style symbol name has no effect. This pull request makes it immutable and adds a test for the newer setSymbolByName as added in #1835
[1] https://lists.osgeo.org/pipermail/mapserver-users/2019-November/081492.html","See mailing list post at [1]. Setting a style symbol name has no effect. This pull request makes it immutable and adds a test for the newer setSymbolByName as added in #1835
[1] https://lists.osgeo.org/pipermail/mapserver-users/2019-November/081492.html",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5937,2019-11-30T23:44:57Z,2019-12-02T20:08:28Z,2019-12-02T20:08:28Z,MERGED,True,2,3,2,https://github.com/geographika,Add setSymbolByName test,3,[],https://github.com/mapserver/mapserver/pull/5937,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5937#issuecomment-560519748,"See mailing list post at [1]. Setting a style symbol name has no effect. This pull request makes it immutable and adds a test for the newer setSymbolByName as added in #1835
[1] https://lists.osgeo.org/pipermail/mapserver-users/2019-November/081492.html",Looks good to me.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5938,2019-11-30T23:49:36Z,2019-12-02T20:07:03Z,2019-12-02T20:07:03Z,MERGED,True,3,4,1,https://github.com/geographika,Make numlabels and labelLeaderObj immutable,1,[],https://github.com/mapserver/mapserver/pull/5938,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5938,"See comments at #5870 (comment)

Numlabels - or any similar counters - should be immutable. So following that logic numstyles should also be immutable.
Leader - no so sure about that one. Looks like styles and labels aren't even exposed to MapScript and users must work through the helper methods. Makes sense since they are arrays.","See comments at #5870 (comment)

Numlabels - or any similar counters - should be immutable. So following that logic numstyles should also be immutable.
Leader - no so sure about that one. Looks like styles and labels aren't even exposed to MapScript and users must work through the helper methods. Makes sense since they are arrays.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5939,2019-12-02T11:25:51Z,2019-12-11T20:58:21Z,2020-03-23T15:50:49Z,MERGED,True,119,151,3,https://github.com/rouault,Require C++11 and C99; bump CMake min version to 3.0,3,[],https://github.com/mapserver/mapserver/pull/5939,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5939,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5939,2019-12-02T11:25:51Z,2019-12-11T20:58:21Z,2020-03-23T15:50:49Z,MERGED,True,119,151,3,https://github.com/rouault,Require C++11 and C99; bump CMake min version to 3.0,3,[],https://github.com/mapserver/mapserver/pull/5939,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5939#issuecomment-602687944,,these changes seem to have affected PHPNG (issue #6015),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5943,2019-12-05T11:21:14Z,2019-12-06T14:22:08Z,2019-12-06T14:22:08Z,MERGED,True,8,0,1,https://github.com/bragef,Add PHP typemap for gdBuffer. ,1,[],https://github.com/mapserver/mapserver/pull/5943,https://github.com/bragef,1,https://github.com/MapServer/MapServer/pull/5943,"This patch adds a SWIG typemap to return gdBuffer as a string in PHP, similar to the Python Mapscript behaviour (ref. RFC-16).  This fixes the bug reported in #5798, where PHP Mapscript msIO_getStdoutBufferBytes() returns a resource handle instead of the actual buffer.","This patch adds a SWIG typemap to return gdBuffer as a string in PHP, similar to the Python Mapscript behaviour (ref. RFC-16).  This fixes the bug reported in #5798, where PHP Mapscript msIO_getStdoutBufferBytes() returns a resource handle instead of the actual buffer.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5943,2019-12-05T11:21:14Z,2019-12-06T14:22:08Z,2019-12-06T14:22:08Z,MERGED,True,8,0,1,https://github.com/bragef,Add PHP typemap for gdBuffer. ,1,[],https://github.com/mapserver/mapserver/pull/5943,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5943#issuecomment-562260852,"This patch adds a SWIG typemap to return gdBuffer as a string in PHP, similar to the Python Mapscript behaviour (ref. RFC-16).  This fixes the bug reported in #5798, where PHP Mapscript msIO_getStdoutBufferBytes() returns a resource handle instead of the actual buffer.","So far I cannot get this to work, on Windows (msIO_getStdoutBufferBytes returns nothing).  Will do more tests with your pull request though, maybe it is my test steps here.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5943,2019-12-05T11:21:14Z,2019-12-06T14:22:08Z,2019-12-06T14:22:08Z,MERGED,True,8,0,1,https://github.com/bragef,Add PHP typemap for gdBuffer. ,1,[],https://github.com/mapserver/mapserver/pull/5943,https://github.com/bragef,3,https://github.com/MapServer/MapServer/pull/5943#issuecomment-562516193,"This patch adds a SWIG typemap to return gdBuffer as a string in PHP, similar to the Python Mapscript behaviour (ref. RFC-16).  This fixes the bug reported in #5798, where PHP Mapscript msIO_getStdoutBufferBytes() returns a resource handle instead of the actual buffer.","I have no Windows system to test mapserver on (only Linux or MacOS), so I have no opportunity to test this on Windows.
Using the example natural earth mapfile on https://live.osgeo.org/en/quickstart/mapserver_quickstart.html, this example should draw a map of Europe with the patch, and return an empty png without the patch.
require_once('mapscript.php');

$params = ['LAYERS' =>  'Countries','FORMAT' => 'image/png',
           'SERVICE'=> 'WMS','CRS' => 'EPSG:4326',
           'VERSION'=> '1.3.0','REQUEST'=> 'GetMap',
           'BBOX' => '33,-15,72,42','WIDTH' => 500,
           'HEIGHT'=> 500];

$map = new mapObj($mapfile);

$request = new OWSRequest();
foreach($params as $k=>$v) {
    $request->setParameter($k,$v);
}
msIO_installStdoutToBuffer();
$map->owsDispatch($request);
$contenttype = msIO_stripStdoutBufferContentType();
header('Content-type: '.$contenttype);
echo msIO_getStdoutBufferBytes();
msIO_resetHandlers();",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5943,2019-12-05T11:21:14Z,2019-12-06T14:22:08Z,2019-12-06T14:22:08Z,MERGED,True,8,0,1,https://github.com/bragef,Add PHP typemap for gdBuffer. ,1,[],https://github.com/mapserver/mapserver/pull/5943,https://github.com/bragef,4,https://github.com/MapServer/MapServer/pull/5943#issuecomment-562539347,"This patch adds a SWIG typemap to return gdBuffer as a string in PHP, similar to the Python Mapscript behaviour (ref. RFC-16).  This fixes the bug reported in #5798, where PHP Mapscript msIO_getStdoutBufferBytes() returns a resource handle instead of the actual buffer.","The typemap also fixes getBytes(), and makes it possible to write the image buffer directly to stdout without creating a temporary file (ref. #5840).
$map = new mapObj($mapfile);
$image = $map->draw();
header('Content-type: image/png');
echo $image->getBytes();",True,{'THUMBS_UP': ['https://github.com/richie21']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5943,2019-12-05T11:21:14Z,2019-12-06T14:22:08Z,2019-12-06T14:22:08Z,MERGED,True,8,0,1,https://github.com/bragef,Add PHP typemap for gdBuffer. ,1,[],https://github.com/mapserver/mapserver/pull/5943,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/5943#issuecomment-562589794,"This patch adds a SWIG typemap to return gdBuffer as a string in PHP, similar to the Python Mapscript behaviour (ref. RFC-16).  This fixes the bug reported in #5798, where PHP Mapscript msIO_getStdoutBufferBytes() returns a resource handle instead of the actual buffer.",@bragef I have both tests working on Windows with your changes.  Thank you so much!  This fix was much needed.  Kudos to you!,True,{'THUMBS_UP': ['https://github.com/bragef']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5944,2019-12-05T19:18:49Z,2020-01-02T16:42:17Z,2020-01-02T16:42:17Z,MERGED,True,51,1,5,https://github.com/alexbrault,Support nested SYMBOLSETs without leaking (Fix #5941),2,[],https://github.com/mapserver/mapserver/pull/5944,https://github.com/alexbrault,1,https://github.com/MapServer/MapServer/pull/5944,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5945,2019-12-06T22:22:10Z,2019-12-20T18:19:17Z,2019-12-20T18:19:17Z,MERGED,True,79,40,10,https://github.com/charles-plante,#5919 - Add support of group layer with filter in WMS query,2,[],https://github.com/mapserver/mapserver/pull/5945,https://github.com/charles-plante,1,https://github.com/MapServer/MapServer/pull/5945,"We can now apply a filter to a group of layers without having to match the numbers of filter.
The layer params should contains the same numbers of params as the filter","We can now apply a filter to a group of layers without having to match the numbers of filter.
The layer params should contains the same numbers of params as the filter",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5945,2019-12-06T22:22:10Z,2019-12-20T18:19:17Z,2019-12-20T18:19:17Z,MERGED,True,79,40,10,https://github.com/charles-plante,#5919 - Add support of group layer with filter in WMS query,2,[],https://github.com/mapserver/mapserver/pull/5945,https://github.com/charles-plante,2,https://github.com/MapServer/MapServer/pull/5945#issuecomment-565163261,"We can now apply a filter to a group of layers without having to match the numbers of filter.
The layer params should contains the same numbers of params as the filter",@rouault One of the AppVeyor tests fail but all the Travis ones are okay. Do you have an idea why ?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5945,2019-12-06T22:22:10Z,2019-12-20T18:19:17Z,2019-12-20T18:19:17Z,MERGED,True,79,40,10,https://github.com/charles-plante,#5919 - Add support of group layer with filter in WMS query,2,[],https://github.com/mapserver/mapserver/pull/5945,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/5945#issuecomment-566180343,"We can now apply a filter to a group of layers without having to match the numbers of filter.
The layer params should contains the same numbers of params as the filter",I'm not super familiar with that part of the code. Anyway there's still an issue you have to fix. The Windows CI consistently crash on ows_test.py. Perhaps try running that test under Valgrind,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5945,2019-12-06T22:22:10Z,2019-12-20T18:19:17Z,2019-12-20T18:19:17Z,MERGED,True,79,40,10,https://github.com/charles-plante,#5919 - Add support of group layer with filter in WMS query,2,[],https://github.com/mapserver/mapserver/pull/5945,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/5945#issuecomment-566187877,"We can now apply a filter to a group of layers without having to match the numbers of filter.
The layer params should contains the same numbers of params as the filter","I'll try and review too, hopefully @dmorissette can as well.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5945,2019-12-06T22:22:10Z,2019-12-20T18:19:17Z,2019-12-20T18:19:17Z,MERGED,True,79,40,10,https://github.com/charles-plante,#5919 - Add support of group layer with filter in WMS query,2,[],https://github.com/mapserver/mapserver/pull/5945,https://github.com/dmorissette,5,https://github.com/MapServer/MapServer/pull/5945#issuecomment-566364039,"We can now apply a filter to a group of layers without having to match the numbers of filter.
The layer params should contains the same numbers of params as the filter","Thanks a lot for your review. Yes, I'll be working with Charles to finalize this PR.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5946,2019-12-11T11:11:24Z,2019-12-12T19:54:18Z,2019-12-12T19:54:28Z,MERGED,True,18,1,2,https://github.com/bragef,Include mserror.i and call msSetup() for PHP7 Swig mapscript,2,[],https://github.com/mapserver/mapserver/pull/5946,https://github.com/bragef,1,https://github.com/MapServer/MapServer/pull/5946,The default exception handling routines in mserror.i is missing if the only mapscript module defined is SWIGPHP7. This causes all mapscript errors to throw an uncathable 'E_ERROR' and quit php instead of throwing an exception.,The default exception handling routines in mserror.i is missing if the only mapscript module defined is SWIGPHP7. This causes all mapscript errors to throw an uncathable 'E_ERROR' and quit php instead of throwing an exception.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5946,2019-12-11T11:11:24Z,2019-12-12T19:54:18Z,2019-12-12T19:54:28Z,MERGED,True,18,1,2,https://github.com/bragef,Include mserror.i and call msSetup() for PHP7 Swig mapscript,2,[],https://github.com/mapserver/mapserver/pull/5946,https://github.com/bragef,2,https://github.com/MapServer/MapServer/pull/5946#issuecomment-564507803,The default exception handling routines in mserror.i is missing if the only mapscript module defined is SWIGPHP7. This causes all mapscript errors to throw an uncathable 'E_ERROR' and quit php instead of throwing an exception.,Please ignore this for now; will do some more testing here.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5946,2019-12-11T11:11:24Z,2019-12-12T19:54:18Z,2019-12-12T19:54:28Z,MERGED,True,18,1,2,https://github.com/bragef,Include mserror.i and call msSetup() for PHP7 Swig mapscript,2,[],https://github.com/mapserver/mapserver/pull/5946,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/5946#issuecomment-564519030,The default exception handling routines in mserror.i is missing if the only mapscript module defined is SWIGPHP7. This causes all mapscript errors to throw an uncathable 'E_ERROR' and quit php instead of throwing an exception.,"roger, thanks @bragef",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5946,2019-12-11T11:11:24Z,2019-12-12T19:54:18Z,2019-12-12T19:54:28Z,MERGED,True,18,1,2,https://github.com/bragef,Include mserror.i and call msSetup() for PHP7 Swig mapscript,2,[],https://github.com/mapserver/mapserver/pull/5946,https://github.com/bragef,4,https://github.com/MapServer/MapServer/pull/5946#issuecomment-565138596,The default exception handling routines in mserror.i is missing if the only mapscript module defined is SWIGPHP7. This causes all mapscript errors to throw an uncathable 'E_ERROR' and quit php instead of throwing an exception.,"I think this should be safe to commit. I was a bit hesitant because I got a some exceptions  which did not make sense after enabling the exeption handlers, e.g.  the getMetaData  methods trown an exception for a non-existent key. However, looking at the code this was more of a mis-feature than a bug. At any rate, it can be avoided by using acessing the hashObj instead. I also got a couple of exceptions because of a font initialisation bug (see below)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5946,2019-12-11T11:11:24Z,2019-12-12T19:54:18Z,2019-12-12T19:54:28Z,MERGED,True,18,1,2,https://github.com/bragef,Include mserror.i and call msSetup() for PHP7 Swig mapscript,2,[],https://github.com/mapserver/mapserver/pull/5946,https://github.com/bragef,5,https://github.com/MapServer/MapServer/pull/5946#issuecomment-565151722,The default exception handling routines in mserror.i is missing if the only mapscript module defined is SWIGPHP7. This causes all mapscript errors to throw an uncathable 'E_ERROR' and quit php instead of throwing an exception.,"The PHP Swig mapscript was missing a call to msSetup(), so that the font cache was not properly initialized.
This causes labels to not appear on maps, or appear erratically. Without exceptions, I got a lot of errors of the type

[Wed Dec 11 13:59:21 2019].450696 msGetFontFace(): General error message. Freetype was unable to load font file ""arial.ttf"" for key ""arial""

and with exceptions enabled mapscript threw an exeption when drawLabelCache() were called.
This is the same issue as is described in this thread:
http://osgeo-org.1560.x6.nabble.com/PHP-Mapscript-swig-issue-on-macOS-td5414228.html",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5946,2019-12-11T11:11:24Z,2019-12-12T19:54:18Z,2019-12-12T19:54:28Z,MERGED,True,18,1,2,https://github.com/bragef,Include mserror.i and call msSetup() for PHP7 Swig mapscript,2,[],https://github.com/mapserver/mapserver/pull/5946,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/5946#issuecomment-565160063,The default exception handling routines in mserror.i is missing if the only mapscript module defined is SWIGPHP7. This causes all mapscript errors to throw an uncathable 'E_ERROR' and quit php instead of throwing an exception.,"I cannot reproduce the initial font errors reported, and still cannot.  However your changes look valid.  Merging...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5946,2019-12-11T11:11:24Z,2019-12-12T19:54:18Z,2019-12-12T19:54:28Z,MERGED,True,18,1,2,https://github.com/bragef,Include mserror.i and call msSetup() for PHP7 Swig mapscript,2,[],https://github.com/mapserver/mapserver/pull/5946,https://github.com/jmckenna,7,https://github.com/MapServer/MapServer/pull/5946#issuecomment-565160218,The default exception handling routines in mserror.i is missing if the only mapscript module defined is SWIGPHP7. This causes all mapscript errors to throw an uncathable 'E_ERROR' and quit php instead of throwing an exception.,thanks again @bragef !!,True,{'THUMBS_UP': ['https://github.com/bragef']}
mapserver/mapserver,https://github.com/mapserver/mapserver,5948,2019-12-12T22:13:15Z,2019-12-13T12:09:57Z,2019-12-13T12:10:13Z,MERGED,True,1,0,1,https://github.com/sdlime,Backport pull request #5926 from master.,1,[],https://github.com/mapserver/mapserver/pull/5948,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/5948,"This fixes a segfault issue with mode=legendicon and certain conditions where the opaque pointer back to the parent mapObj is used, for instance when dealing with truetype symbols along a line.","This fixes a segfault issue with mode=legendicon and certain conditions where the opaque pointer back to the parent mapObj is used, for instance when dealing with truetype symbols along a line.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5948,2019-12-12T22:13:15Z,2019-12-13T12:09:57Z,2019-12-13T12:10:13Z,MERGED,True,1,0,1,https://github.com/sdlime,Backport pull request #5926 from master.,1,[],https://github.com/mapserver/mapserver/pull/5948,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5948#issuecomment-565419350,"This fixes a segfault issue with mode=legendicon and certain conditions where the opaque pointer back to the parent mapObj is used, for instance when dealing with truetype symbols along a line.",mercy buckets steve!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5949,2019-12-13T14:28:34Z,2019-12-13T14:58:12Z,2019-12-13T14:58:13Z,MERGED,True,26,4,1,https://github.com/rouault,PostGIS backend: translate insensitive equality comparison as PostgreSQL lower(foo::text) = lower('bar').,1,[],https://github.com/mapserver/mapserver/pull/5949,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5949,"Fixes a performance issue dating from 7.0
The wfs_filter_postgis.map wfs_filter_postgis_property_is_equal_case_insensitive
test case exercices this code path.","Fixes a performance issue dating from 7.0
The wfs_filter_postgis.map wfs_filter_postgis_property_is_equal_case_insensitive
test case exercices this code path.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5950,2019-12-13T14:36:09Z,2019-12-13T15:07:12Z,2019-12-13T15:07:12Z,MERGED,True,26,4,1,https://github.com/rouault,[Backport 7.4] PostGIS backend: translate insensitive equality comparison as PostgreSQL lower(foo::text) = lower('bar').,1,[],https://github.com/mapserver/mapserver/pull/5950,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5950,"Backport of #5949
Fixes a performance issue dating from 7.0
The wfs_filter_postgis.map wfs_filter_postgis_property_is_equal_case_insensitive
test case exercices this code path.","Backport of #5949
Fixes a performance issue dating from 7.0
The wfs_filter_postgis.map wfs_filter_postgis_property_is_equal_case_insensitive
test case exercices this code path.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5951,2019-12-16T14:57:31Z,2019-12-16T16:19:09Z,2019-12-16T16:19:20Z,MERGED,True,67,43,2,https://github.com/sdlime,Backport pull-request #5920 from master to branch-7-4.,3,[],https://github.com/mapserver/mapserver/pull/5951,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/5951,Fixes a couple of issues related to query maps.,Fixes a couple of issues related to query maps.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5953,2019-12-19T12:33:26Z,2020-01-08T13:13:35Z,2020-01-08T13:13:36Z,MERGED,True,13,6,1,https://github.com/bragef,Add sanity checks to avoid segfaults in Mapscript pointObj::draw(),2,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5953,https://github.com/bragef,1,https://github.com/MapServer/MapServer/pull/5953,Issue #5952,Issue #5952,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5953,2019-12-19T12:33:26Z,2020-01-08T13:13:35Z,2020-01-08T13:13:36Z,MERGED,True,13,6,1,https://github.com/bragef,Add sanity checks to avoid segfaults in Mapscript pointObj::draw(),2,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5953,https://github.com/bragef,2,https://github.com/MapServer/MapServer/pull/5953#issuecomment-567670150,Issue #5952,"The only question I'd have is whether we should return an error when labeltext is supplied but there is no label definition or if we should just skip label drawing. Does that specific case cause a segfault? --Steve

It did – but that can be avoided by checking if the label definition is present. I have updated the patch to only throw error on invalid classindex.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5953,2019-12-19T12:33:26Z,2020-01-08T13:13:35Z,2020-01-08T13:13:36Z,MERGED,True,13,6,1,https://github.com/bragef,Add sanity checks to avoid segfaults in Mapscript pointObj::draw(),2,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5953,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/5953#issuecomment-568043960,Issue #5952,Closed/re-opened to trigger CI checks.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5953,2019-12-19T12:33:26Z,2020-01-08T13:13:35Z,2020-01-08T13:13:36Z,MERGED,True,13,6,1,https://github.com/bragef,Add sanity checks to avoid segfaults in Mapscript pointObj::draw(),2,['backport branch-7-4'],https://github.com/mapserver/mapserver/pull/5953,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/5953#issuecomment-569436548,Issue #5952,Looks ok to me... Requested another set of eyes (@geographika) and then we can then merge.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5955,2019-12-28T17:30:41Z,2019-12-28T17:31:30Z,2019-12-28T17:31:30Z,CLOSED,False,0,0,0,https://github.com/sdlime,Syncing with parent,6,[],https://github.com/mapserver/mapserver/pull/5955,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/5955,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5956,2019-12-28T17:53:11Z,2019-12-30T15:21:37Z,2021-04-26T02:29:38Z,CLOSED,False,26,11,1,https://github.com/sdlime,Issue 5724 - Skip Failures Processing Option for OGR Driver,9,[],https://github.com/mapserver/mapserver/pull/5956,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/5956,See #5724 for more information.,See #5724 for more information.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5956,2019-12-28T17:53:11Z,2019-12-30T15:21:37Z,2021-04-26T02:29:38Z,CLOSED,False,26,11,1,https://github.com/sdlime,Issue 5724 - Skip Failures Processing Option for OGR Driver,9,[],https://github.com/mapserver/mapserver/pull/5956,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/5956#issuecomment-569438285,See #5724 for more information.,Reminder: need to squash before merging...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5956,2019-12-28T17:53:11Z,2019-12-30T15:21:37Z,2021-04-26T02:29:38Z,CLOSED,False,26,11,1,https://github.com/sdlime,Issue 5724 - Skip Failures Processing Option for OGR Driver,9,[],https://github.com/mapserver/mapserver/pull/5956,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/5956#issuecomment-569439220,See #5724 for more information.,That's reasonable. But a simpler patch would be to not call at all CPLGetLastErrorType(). Most GDAL code that iterates over features just rely on GetNextFeature() == NULL to stop iterations.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5956,2019-12-28T17:53:11Z,2019-12-30T15:21:37Z,2021-04-26T02:29:38Z,CLOSED,False,26,11,1,https://github.com/sdlime,Issue 5724 - Skip Failures Processing Option for OGR Driver,9,[],https://github.com/mapserver/mapserver/pull/5956,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/5956#issuecomment-569517871,See #5724 for more information.,"That's reasonable. But a simpler patch would be to not call at all CPLGetLastErrorType(). Most GDAL code that iterates over features just rely on GetNextFeature() == NULL to stop iterations.

Do think it would be easier to start over or edit the patch?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5956,2019-12-28T17:53:11Z,2019-12-30T15:21:37Z,2021-04-26T02:29:38Z,CLOSED,False,26,11,1,https://github.com/sdlime,Issue 5724 - Skip Failures Processing Option for OGR Driver,9,[],https://github.com/mapserver/mapserver/pull/5956,https://github.com/rouault,5,https://github.com/MapServer/MapServer/pull/5956#issuecomment-569524679,See #5724 for more information.,"Do think it would be easier to start over or edit the patch?

perhaps start over",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5956,2019-12-28T17:53:11Z,2019-12-30T15:21:37Z,2021-04-26T02:29:38Z,CLOSED,False,26,11,1,https://github.com/sdlime,Issue 5724 - Skip Failures Processing Option for OGR Driver,9,[],https://github.com/mapserver/mapserver/pull/5956,https://github.com/sdlime,6,https://github.com/MapServer/MapServer/pull/5956#issuecomment-569708215,See #5724 for more information.,Closing. Will update #5724 with notes... --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5960,2020-01-03T13:32:19Z,2020-01-08T14:11:10Z,2020-01-08T14:11:10Z,MERGED,True,70,7,5,https://github.com/rouault,msTransformMapToSource(): extra fixes to handle lon_wrap=180 and source dataset whose longitude range is larger than 360 deg,1,[],https://github.com/mapserver/mapserver/pull/5960,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5960,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5961,2020-01-03T14:14:24Z,2020-01-08T14:11:22Z,2020-01-08T14:11:22Z,MERGED,True,70,7,5,https://github.com/rouault,[7.4 backport] msTransformMapToSource(): extra fixes to handle lon_wrap=180 and souce dataset whose longitude range is larger than 360 deg,1,[],https://github.com/mapserver/mapserver/pull/5961,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5961,Backport of #5960,Backport of #5960,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5962,2020-01-06T17:32:39Z,2020-01-15T13:15:11Z,2020-01-15T13:15:11Z,MERGED,True,165,94,5,https://github.com/rouault,UVRaster: add support for query mode / WMS GetFeatureInfo,1,[],https://github.com/mapserver/mapserver/pull/5962,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5962,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5964,2020-01-08T13:41:08Z,2020-01-16T06:55:19Z,2020-01-16T06:55:19Z,MERGED,True,57,11,3,https://github.com/geographika,Add test for MapScript point.draw method,4,[],https://github.com/mapserver/mapserver/pull/5964,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5964,See #5952,See #5952,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5964,2020-01-08T13:41:08Z,2020-01-16T06:55:19Z,2020-01-16T06:55:19Z,MERGED,True,57,11,3,https://github.com/geographika,Add test for MapScript point.draw method,4,[],https://github.com/mapserver/mapserver/pull/5964,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5964#issuecomment-573890061,See #5952,@rouault - I've added the suggested review changes - any objections to merging?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5964,2020-01-08T13:41:08Z,2020-01-16T06:55:19Z,2020-01-16T06:55:19Z,MERGED,True,57,11,3,https://github.com/geographika,Add test for MapScript point.draw method,4,[],https://github.com/mapserver/mapserver/pull/5964,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/5964#issuecomment-573891707,See #5952,"there are still a few useless assert True remaining, but there were already there. So no objection in merging",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5966,2020-01-08T14:16:02Z,2020-01-15T13:15:23Z,2020-01-15T13:15:23Z,MERGED,True,72,6,4,https://github.com/rouault,Contour layer: add GetFeatureInfo support,1,[],https://github.com/mapserver/mapserver/pull/5966,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5966,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5967,2020-01-08T14:17:54Z,2020-01-14T18:24:15Z,2020-01-14T18:24:15Z,MERGED,True,17,30,2,https://github.com/rouault,"WFS: fix WFS 2.0 numberMatched computation, by opening temporary new connection(s)",1,[],https://github.com/mapserver/mapserver/pull/5967,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5967,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5967,2020-01-08T14:17:54Z,2020-01-14T18:24:15Z,2020-01-14T18:24:15Z,MERGED,True,17,30,2,https://github.com/rouault,"WFS: fix WFS 2.0 numberMatched computation, by opening temporary new connection(s)",1,[],https://github.com/mapserver/mapserver/pull/5967,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5967#issuecomment-574257354,,@rouault - I've been testing this along with an implementation of paging in the MSSQL driver by @szekerest - it prevents lots of individual queries being run via WFS giving a huge performance boost. Is this ready to merge? I've not tested with other database drivers.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5969,2020-01-11T11:12:35Z,2020-01-15T13:15:39Z,2020-01-15T13:15:39Z,MERGED,True,118,3,4,https://github.com/rouault, GetFeatureInfo: fix for layers using a lon_wrap PROJECTION and requested in the wrapped part of the raster,2,[],https://github.com/mapserver/mapserver/pull/5969,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5969,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5970,2020-01-11T11:16:55Z,2020-01-15T13:15:50Z,2020-01-15T13:15:50Z,MERGED,True,108,0,4,https://github.com/rouault,[7.4 backport] GetFeatureInfo: fix for layers using a lon_wrap PROJECTION and requested in the wrapped part of the raster,1,[],https://github.com/mapserver/mapserver/pull/5970,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5970,Backport of #5969,Backport of #5969,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5971,2020-01-14T18:28:26Z,2020-01-17T21:16:57Z,2020-01-17T21:17:03Z,MERGED,True,286,53,4,https://github.com/szekerest,MSSQL: Implement server side paging support (#5842),8,[],https://github.com/mapserver/mapserver/pull/5971,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/5971,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5972,2020-01-14T22:07:18Z,2020-01-16T20:21:34Z,2020-01-16T20:44:45Z,CLOSED,False,16,11,3,https://github.com/dbaston,Fix Equal Earth rendering for wide images,2,[],https://github.com/mapserver/mapserver/pull/5972,https://github.com/dbaston,1,https://github.com/MapServer/MapServer/pull/5972,"This PR resolves #5958 , at least for my test case. Along the lines of @rouault 's suggested fix, the interpolation test point is taken to be just after the midpoint of the scanline. (I think this is more conservative than taking the point before the middle.) Since msApproxTransformer bails early for scanlines with <= 5 points, the middle+1 point will always be available.","This PR resolves #5958 , at least for my test case. Along the lines of @rouault 's suggested fix, the interpolation test point is taken to be just after the midpoint of the scanline. (I think this is more conservative than taking the point before the middle.) Since msApproxTransformer bails early for scanlines with <= 5 points, the middle+1 point will always be available.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5972,2020-01-14T22:07:18Z,2020-01-16T20:21:34Z,2020-01-16T20:44:45Z,CLOSED,False,16,11,3,https://github.com/dbaston,Fix Equal Earth rendering for wide images,2,[],https://github.com/mapserver/mapserver/pull/5972,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5972#issuecomment-575332483,"This PR resolves #5958 , at least for my test case. Along the lines of @rouault 's suggested fix, the interpolation test point is taken to be just after the midpoint of the scanline. (I think this is more conservative than taking the point before the middle.) Since msApproxTransformer bails early for scanlines with <= 5 points, the middle+1 point will always be available.",Why closing ?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5972,2020-01-14T22:07:18Z,2020-01-16T20:21:34Z,2020-01-16T20:44:45Z,CLOSED,False,16,11,3,https://github.com/dbaston,Fix Equal Earth rendering for wide images,2,[],https://github.com/mapserver/mapserver/pull/5972,https://github.com/dbaston,3,https://github.com/MapServer/MapServer/pull/5972#issuecomment-575336322,"This PR resolves #5958 , at least for my test case. Along the lines of @rouault 's suggested fix, the interpolation test point is taken to be just after the midpoint of the scanline. (I think this is more conservative than taking the point before the middle.) Since msApproxTransformer bails early for scanlines with <= 5 points, the middle+1 point will always be available.","Looks like the fix works for a width of 2163 pixels but not 2560 😢
Also looks like it broke an existing test. And I assume it should been opened against master, not branch-7-4 (the GitHub default until recently, I think?)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5972,2020-01-14T22:07:18Z,2020-01-16T20:21:34Z,2020-01-16T20:44:45Z,CLOSED,False,16,11,3,https://github.com/dbaston,Fix Equal Earth rendering for wide images,2,[],https://github.com/mapserver/mapserver/pull/5972,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/5972#issuecomment-575338096,"This PR resolves #5958 , at least for my test case. Along the lines of @rouault 's suggested fix, the interpolation test point is taken to be just after the midpoint of the scanline. (I think this is more conservative than taking the point before the middle.) Since msApproxTransformer bails early for scanlines with <= 5 points, the middle+1 point will always be available.","Looks like the fix works for a width of 2163 pixels but not 2560

ah ok

Also looks like it broke an existing test.

Not necessarily a show stopper. Would need to check if the difference is significant or not. The current results are not necessarily an absolute truth...

assume it should been opened against master

Indeed, the policy is now to target master, and backport if needed",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5973,2020-01-14T23:23:43Z,2020-01-15T13:14:03Z,2020-01-15T13:14:04Z,MERGED,True,34,0,2,https://github.com/rouault,Test: add one with wfs_query_cache mechanism and geojson output,1,[],https://github.com/mapserver/mapserver/pull/5973,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5973,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5974,2020-01-15T09:18:16Z,2020-01-15T14:47:08Z,2020-01-15T22:11:30Z,MERGED,True,12,11,1,https://github.com/geographika,Initialize status variable for cached WFS results,2,[],https://github.com/mapserver/mapserver/pull/5974,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5974,"On Windows the following error is thrown in the debugger as the status variable was never set:
Run-Time Check Failure #3 - The variable 'status' is being used without being initialized.
This caused OGR output from a WFS cache to return:
<?xml version=""1.0"" encoding=""UTF-8""?>
<ows:ExceptionReport xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:ows=""http://www.opengis.net/ows/1.1"" version=""2.0.0"" xml:lang=""en-US"" xsi:schemaLocation=""http://www.opengis.net/ows/1.1 http://schemas.opengis.net/ows/1.1.0/owsExceptionReport.xsd"">
  <ows:Exception exceptionCode=""NoApplicableCode"" locator=""mapserv""/>
</ows:ExceptionReport>
This pull request initialises the variable at the top of the function (maybe unnecessary?), and also sets when retrieved from the cache using msCopyShape.
See email thread at https://lists.osgeo.org/pipermail/mapserver-users/2020-January/081530.html","On Windows the following error is thrown in the debugger as the status variable was never set:
Run-Time Check Failure #3 - The variable 'status' is being used without being initialized.
This caused OGR output from a WFS cache to return:
<?xml version=""1.0"" encoding=""UTF-8""?>
<ows:ExceptionReport xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:ows=""http://www.opengis.net/ows/1.1"" version=""2.0.0"" xml:lang=""en-US"" xsi:schemaLocation=""http://www.opengis.net/ows/1.1 http://schemas.opengis.net/ows/1.1.0/owsExceptionReport.xsd"">
  <ows:Exception exceptionCode=""NoApplicableCode"" locator=""mapserv""/>
</ows:ExceptionReport>
This pull request initialises the variable at the top of the function (maybe unnecessary?), and also sets when retrieved from the cache using msCopyShape.
See email thread at https://lists.osgeo.org/pipermail/mapserver-users/2020-January/081530.html",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5974,2020-01-15T09:18:16Z,2020-01-15T14:47:08Z,2020-01-15T22:11:30Z,MERGED,True,12,11,1,https://github.com/geographika,Initialize status variable for cached WFS results,2,[],https://github.com/mapserver/mapserver/pull/5974,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5974#issuecomment-574624464,"On Windows the following error is thrown in the debugger as the status variable was never set:
Run-Time Check Failure #3 - The variable 'status' is being used without being initialized.
This caused OGR output from a WFS cache to return:
<?xml version=""1.0"" encoding=""UTF-8""?>
<ows:ExceptionReport xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:ows=""http://www.opengis.net/ows/1.1"" version=""2.0.0"" xml:lang=""en-US"" xsi:schemaLocation=""http://www.opengis.net/ows/1.1 http://schemas.opengis.net/ows/1.1.0/owsExceptionReport.xsd"">
  <ows:Exception exceptionCode=""NoApplicableCode"" locator=""mapserv""/>
</ows:ExceptionReport>
This pull request initialises the variable at the top of the function (maybe unnecessary?), and also sets when retrieved from the cache using msCopyShape.
See email thread at https://lists.osgeo.org/pipermail/mapserver-users/2020-January/081530.html","Excellent catch @geographika ! For the fix to be complete, the block
if(status != MS_SUCCESS) {
            OGR_DS_Destroy( hDS );
            OGR_DS_Destroy( hDS );
            msOGRCleanupDS( datasource_name );
            msOGRCleanupDS( datasource_name );
            msGMLFreeItems(item_list);
            msGMLFreeItems(item_list);
            msFreeShape(&resultshape);
            msFreeShape(&resultshape);
            CSLDestroy(layer_options);
            CSLDestroy(layer_options);
            return status;
            return status;
        }
    }

that is currently only taken in the else case (https://github.com/mapserver/mapserver/pull/5974/files#diff-b8cb5eed516c5e213aaccd109187105eR1114), should be applied to both branches. That is move it just after the if else construct",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5974,2020-01-15T09:18:16Z,2020-01-15T14:47:08Z,2020-01-15T22:11:30Z,MERGED,True,12,11,1,https://github.com/geographika,Initialize status variable for cached WFS results,2,[],https://github.com/mapserver/mapserver/pull/5974,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5974#issuecomment-574686068,"On Windows the following error is thrown in the debugger as the status variable was never set:
Run-Time Check Failure #3 - The variable 'status' is being used without being initialized.
This caused OGR output from a WFS cache to return:
<?xml version=""1.0"" encoding=""UTF-8""?>
<ows:ExceptionReport xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:ows=""http://www.opengis.net/ows/1.1"" version=""2.0.0"" xml:lang=""en-US"" xsi:schemaLocation=""http://www.opengis.net/ows/1.1 http://schemas.opengis.net/ows/1.1.0/owsExceptionReport.xsd"">
  <ows:Exception exceptionCode=""NoApplicableCode"" locator=""mapserv""/>
</ows:ExceptionReport>
This pull request initialises the variable at the top of the function (maybe unnecessary?), and also sets when retrieved from the cache using msCopyShape.
See email thread at https://lists.osgeo.org/pipermail/mapserver-users/2020-January/081530.html","@rouault - changes included as suggested.
Is it good or bad practice to set the int status = 0; at declaration?
Are there static analysis tools for C that could find this type of error in the MapServer codebase?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5974,2020-01-15T09:18:16Z,2020-01-15T14:47:08Z,2020-01-15T22:11:30Z,MERGED,True,12,11,1,https://github.com/geographika,Initialize status variable for cached WFS results,2,[],https://github.com/mapserver/mapserver/pull/5974,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/5974#issuecomment-574691844,"On Windows the following error is thrown in the debugger as the status variable was never set:
Run-Time Check Failure #3 - The variable 'status' is being used without being initialized.
This caused OGR output from a WFS cache to return:
<?xml version=""1.0"" encoding=""UTF-8""?>
<ows:ExceptionReport xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:ows=""http://www.opengis.net/ows/1.1"" version=""2.0.0"" xml:lang=""en-US"" xsi:schemaLocation=""http://www.opengis.net/ows/1.1 http://schemas.opengis.net/ows/1.1.0/owsExceptionReport.xsd"">
  <ows:Exception exceptionCode=""NoApplicableCode"" locator=""mapserv""/>
</ows:ExceptionReport>
This pull request initialises the variable at the top of the function (maybe unnecessary?), and also sets when retrieved from the cache using msCopyShape.
See email thread at https://lists.osgeo.org/pipermail/mapserver-users/2020-January/081530.html","Is it good or bad practice to set the int status = 0; at declaration?

It is generally a good practice.

Are there static analysis tools for C that could find this type of error in the MapServer codebase?

I'm pretty sure Visual Studio could warn about that, but only if running at a more pedantic level, which would be the super pedantic /W4 . Cf https://docs.microsoft.com/en-us/cpp/build/reference/compiler-option-warning-level?view=vs-2019#see-also and https://docs.microsoft.com/en-us/cpp/error-messages/compiler-warnings/compiler-warning-level-4-c4701?view=vs-2019
PROJ appveyor.yml includes in the cmake invokation:
 -DCMAKE_C_FLAGS=""/WX"" -DCMAKE_CXX_FLAGS=""/WX""

But there would be likely a LOT of work to have a clean MapServer build with that.
A possibility would be to enable specifically C4701 at the default warning level 1, with /w14701",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5974,2020-01-15T09:18:16Z,2020-01-15T14:47:08Z,2020-01-15T22:11:30Z,MERGED,True,12,11,1,https://github.com/geographika,Initialize status variable for cached WFS results,2,[],https://github.com/mapserver/mapserver/pull/5974,https://github.com/rouault,5,https://github.com/MapServer/MapServer/pull/5974#issuecomment-574692431,"On Windows the following error is thrown in the debugger as the status variable was never set:
Run-Time Check Failure #3 - The variable 'status' is being used without being initialized.
This caused OGR output from a WFS cache to return:
<?xml version=""1.0"" encoding=""UTF-8""?>
<ows:ExceptionReport xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:ows=""http://www.opengis.net/ows/1.1"" version=""2.0.0"" xml:lang=""en-US"" xsi:schemaLocation=""http://www.opengis.net/ows/1.1 http://schemas.opengis.net/ows/1.1.0/owsExceptionReport.xsd"">
  <ows:Exception exceptionCode=""NoApplicableCode"" locator=""mapserv""/>
</ows:ExceptionReport>
This pull request initialises the variable at the top of the function (maybe unnecessary?), and also sets when retrieved from the cache using msCopyShape.
See email thread at https://lists.osgeo.org/pipermail/mapserver-users/2020-January/081530.html",Cherry-picked in branch-7-4 per 006d4ba,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5974,2020-01-15T09:18:16Z,2020-01-15T14:47:08Z,2020-01-15T22:11:30Z,MERGED,True,12,11,1,https://github.com/geographika,Initialize status variable for cached WFS results,2,[],https://github.com/mapserver/mapserver/pull/5974,https://github.com/sdlime,6,https://github.com/MapServer/MapServer/pull/5974#issuecomment-574728786,"On Windows the following error is thrown in the debugger as the status variable was never set:
Run-Time Check Failure #3 - The variable 'status' is being used without being initialized.
This caused OGR output from a WFS cache to return:
<?xml version=""1.0"" encoding=""UTF-8""?>
<ows:ExceptionReport xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:ows=""http://www.opengis.net/ows/1.1"" version=""2.0.0"" xml:lang=""en-US"" xsi:schemaLocation=""http://www.opengis.net/ows/1.1 http://schemas.opengis.net/ows/1.1.0/owsExceptionReport.xsd"">
  <ows:Exception exceptionCode=""NoApplicableCode"" locator=""mapserv""/>
</ows:ExceptionReport>
This pull request initialises the variable at the top of the function (maybe unnecessary?), and also sets when retrieved from the cache using msCopyShape.
See email thread at https://lists.osgeo.org/pipermail/mapserver-users/2020-January/081530.html","I wouldn't mind making a run at a code clean up - or at least looking at the scale. What would be the approach on a mac - adding a couple of flags to cmake, doing a make and fixing issues as identified?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5974,2020-01-15T09:18:16Z,2020-01-15T14:47:08Z,2020-01-15T22:11:30Z,MERGED,True,12,11,1,https://github.com/geographika,Initialize status variable for cached WFS results,2,[],https://github.com/mapserver/mapserver/pull/5974,https://github.com/jmckenna,7,https://github.com/MapServer/MapServer/pull/5974#issuecomment-574737954,"On Windows the following error is thrown in the debugger as the status variable was never set:
Run-Time Check Failure #3 - The variable 'status' is being used without being initialized.
This caused OGR output from a WFS cache to return:
<?xml version=""1.0"" encoding=""UTF-8""?>
<ows:ExceptionReport xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:ows=""http://www.opengis.net/ows/1.1"" version=""2.0.0"" xml:lang=""en-US"" xsi:schemaLocation=""http://www.opengis.net/ows/1.1 http://schemas.opengis.net/ows/1.1.0/owsExceptionReport.xsd"">
  <ows:Exception exceptionCode=""NoApplicableCode"" locator=""mapserv""/>
</ows:ExceptionReport>
This pull request initialises the variable at the top of the function (maybe unnecessary?), and also sets when retrieved from the cache using msCopyShape.
See email thread at https://lists.osgeo.org/pipermail/mapserver-users/2020-January/081530.html","Through the years I've had to battle this in MapCache (initialize all variables at beginning of scope/block)  C89 requirement (example changes: MapServer/mapcache@ff5e3b1) so that it builds on Windows compilers.  I feel this practice should be followed by rule, in MapServer and MapCache, so it is more friendly to more compilers.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5974,2020-01-15T09:18:16Z,2020-01-15T14:47:08Z,2020-01-15T22:11:30Z,MERGED,True,12,11,1,https://github.com/geographika,Initialize status variable for cached WFS results,2,[],https://github.com/mapserver/mapserver/pull/5974,https://github.com/rouault,8,https://github.com/MapServer/MapServer/pull/5974#issuecomment-574749159,"On Windows the following error is thrown in the debugger as the status variable was never set:
Run-Time Check Failure #3 - The variable 'status' is being used without being initialized.
This caused OGR output from a WFS cache to return:
<?xml version=""1.0"" encoding=""UTF-8""?>
<ows:ExceptionReport xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:ows=""http://www.opengis.net/ows/1.1"" version=""2.0.0"" xml:lang=""en-US"" xsi:schemaLocation=""http://www.opengis.net/ows/1.1 http://schemas.opengis.net/ows/1.1.0/owsExceptionReport.xsd"">
  <ows:Exception exceptionCode=""NoApplicableCode"" locator=""mapserv""/>
</ows:ExceptionReport>
This pull request initialises the variable at the top of the function (maybe unnecessary?), and also sets when retrieved from the cache using msCopyShape.
See email thread at https://lists.osgeo.org/pipermail/mapserver-users/2020-January/081530.html","What would be the approach on a mac - adding a couple of flags to cmake, doing a make and fixing issues as identified?

Unfortunately it seems gcc has no diagnostics for this. clang however has -Wsometimes-uninitialized that does the job, so you could likely try with cmake  -DCMAKE_C_FLAGS=""-Wsometimes-uninitialized"" -DCMAKE_CXX_FLAGS=""-Wsometimes-uninitialized""
cppcheck can also sometimes detect such situations.

I feel this practice should be followed by rule

You meant initializing variables, right, not declarating at top of scope ? With C99 allowed and encouraged in MapServer, we should avoid as much as possible putting variable declarations at the top of a block.  So instead of doing
int foo = 0;
....
foo = bar();

it is less error prone to do  int foo = bar();. Of course that doesn't apply to all situations, like the one of this ticket where the variable assignment depend on which branch is taken. Hence in that situation 0 initialization is indeed the best choice.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5974,2020-01-15T09:18:16Z,2020-01-15T14:47:08Z,2020-01-15T22:11:30Z,MERGED,True,12,11,1,https://github.com/geographika,Initialize status variable for cached WFS results,2,[],https://github.com/mapserver/mapserver/pull/5974,https://github.com/jmckenna,9,https://github.com/MapServer/MapServer/pull/5974#issuecomment-574765420,"On Windows the following error is thrown in the debugger as the status variable was never set:
Run-Time Check Failure #3 - The variable 'status' is being used without being initialized.
This caused OGR output from a WFS cache to return:
<?xml version=""1.0"" encoding=""UTF-8""?>
<ows:ExceptionReport xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:ows=""http://www.opengis.net/ows/1.1"" version=""2.0.0"" xml:lang=""en-US"" xsi:schemaLocation=""http://www.opengis.net/ows/1.1 http://schemas.opengis.net/ows/1.1.0/owsExceptionReport.xsd"">
  <ows:Exception exceptionCode=""NoApplicableCode"" locator=""mapserv""/>
</ows:ExceptionReport>
This pull request initialises the variable at the top of the function (maybe unnecessary?), and also sets when retrieved from the cache using msCopyShape.
See email thread at https://lists.osgeo.org/pipermail/mapserver-users/2020-January/081530.html",Yes you are correct (I had changed my wording from 'declare' to 'initialize' after commenting initially).  Good point.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5974,2020-01-15T09:18:16Z,2020-01-15T14:47:08Z,2020-01-15T22:11:30Z,MERGED,True,12,11,1,https://github.com/geographika,Initialize status variable for cached WFS results,2,[],https://github.com/mapserver/mapserver/pull/5974,https://github.com/geographika,10,https://github.com/MapServer/MapServer/pull/5974#issuecomment-574779875,"On Windows the following error is thrown in the debugger as the status variable was never set:
Run-Time Check Failure #3 - The variable 'status' is being used without being initialized.
This caused OGR output from a WFS cache to return:
<?xml version=""1.0"" encoding=""UTF-8""?>
<ows:ExceptionReport xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:ows=""http://www.opengis.net/ows/1.1"" version=""2.0.0"" xml:lang=""en-US"" xsi:schemaLocation=""http://www.opengis.net/ows/1.1 http://schemas.opengis.net/ows/1.1.0/owsExceptionReport.xsd"">
  <ows:Exception exceptionCode=""NoApplicableCode"" locator=""mapserv""/>
</ows:ExceptionReport>
This pull request initialises the variable at the top of the function (maybe unnecessary?), and also sets when retrieved from the cache using msCopyShape.
See email thread at https://lists.osgeo.org/pipermail/mapserver-users/2020-January/081530.html","I merged a pull request a year ago to hide some warnings, as there were over 800 and it was hard to see serious issues hidden amongst lots of ""possible conversion"" errors. See #5700 and #5701
@rouault - adding in /w14701 gives 80 warnings which could be manageable to fix as a group effort and could prevent a few hidden bugs.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5974,2020-01-15T09:18:16Z,2020-01-15T14:47:08Z,2020-01-15T22:11:30Z,MERGED,True,12,11,1,https://github.com/geographika,Initialize status variable for cached WFS results,2,[],https://github.com/mapserver/mapserver/pull/5974,https://github.com/rouault,11,https://github.com/MapServer/MapServer/pull/5974#issuecomment-574788044,"On Windows the following error is thrown in the debugger as the status variable was never set:
Run-Time Check Failure #3 - The variable 'status' is being used without being initialized.
This caused OGR output from a WFS cache to return:
<?xml version=""1.0"" encoding=""UTF-8""?>
<ows:ExceptionReport xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:ows=""http://www.opengis.net/ows/1.1"" version=""2.0.0"" xml:lang=""en-US"" xsi:schemaLocation=""http://www.opengis.net/ows/1.1 http://schemas.opengis.net/ows/1.1.0/owsExceptionReport.xsd"">
  <ows:Exception exceptionCode=""NoApplicableCode"" locator=""mapserv""/>
</ows:ExceptionReport>
This pull request initialises the variable at the top of the function (maybe unnecessary?), and also sets when retrieved from the cache using msCopyShape.
See email thread at https://lists.osgeo.org/pipermail/mapserver-users/2020-January/081530.html","adding in /w14701 gives 80 warnings which could be manageable to fix as a group effort and could prevent a few hidden bugs.

We should definitely fix them. That class of warnings is normally quite straightforward & mechanical to fix. Could be just a couple of hours.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5975,2020-01-15T13:30:14Z,2020-01-17T16:46:40Z,2020-01-17T16:46:40Z,MERGED,True,260,7,2,https://github.com/rouault, msProjectShapeLine(): take into account antimeridian when reprojecting lines from Polar Stereographic to geographic / WebMercator,2,[],https://github.com/mapserver/mapserver/pull/5975,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5975,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5976,2020-01-15T21:49:20Z,2020-01-17T22:42:51Z,2020-01-17T22:42:51Z,CLOSED,False,1,1,1,https://github.com/geographika,Add /w14701 compiler check for potentially uninitialized local variables,1,[],https://github.com/mapserver/mapserver/pull/5976,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5976,"As per discussions in #5974 add in the compiler flag to check for uninitialized variables. See C6001docs for details. Also StackOverflow.
List of warnings as follows:
  \mapserver\mapservutil.c(1901): warning C4701: potentially uninitialized local variable 'execstarttime' used 
  \mapserver\mapservutil.c(1890): warning C4701: potentially uninitialized local variable 'requeststarttime' used 
  \mapserver\mapwmslayer.c(1002): warning C4701: potentially uninitialized local variable 'bbox_height' used 
  \mapserver\mapwmslayer.c(1002): warning C4701: potentially uninitialized local variable 'bbox_width' used 
  \mapserver\mapwmslayer.c(1216): warning C4701: potentially uninitialized local variable 'bbox' used 
  \mapserver\mapwms.c(822): warning C4701: potentially uninitialized local variable 'numranges' used 
  \mapserver\mapwms.c(824): warning C4701: potentially uninitialized local variable 'numonerange' used 
  \mapserver\mapchart.c(540): warning C4701: potentially uninitialized local variable 'barMaxVal' used 
  \mapserver\mapchart.c(540): warning C4701: potentially uninitialized local variable 'barMinVal' used 
  \mapserver\mapchart.c(421): warning C4701: potentially uninitialized local variable 'diameter' used 
  \mapserver\mapchart.c(403): warning C4701: potentially uninitialized local variable 'maxvalue' used 
  \mapserver\mapchart.c(401): warning C4701: potentially uninitialized local variable 'minvalue' used 
  \mapserver\mapchart.c(404): warning C4701: potentially uninitialized local variable 'maxdiameter' used 
  \mapserver\mapimageio.c(422): warning C4701: potentially uninitialized local variable 'a' used 
  \mapserver\mapdraw.c(2350): warning C4701: potentially uninitialized local variable 'ts' used 
  \mapserver\mapdraw.c(2373): warning C4701: potentially uninitialized local variable 'lbounds' used 
  \mapserver\mapdraw.c(2395): warning C4701: potentially uninitialized local variable 'p' used 
  \mapserver\mapdraw.c(3484): warning C4701: potentially uninitialized local variable 'starttime' used 
  \mapserver\mapdraw.c(3428): warning C4701: potentially uninitialized local variable 'labelpoly_bounds' used 
  \mapserver\mapdraw.c(583): warning C4701: potentially uninitialized local variable 'mapstarttime' used 
  \mapserver\mapdraw.c(343): warning C4701: potentially uninitialized local variable 'starttime' used 
  \mapserver\mapprimitive.c(1024): warning C4701: potentially uninitialized local variable 'x0' used 
  \mapserver\mapprimitive.c(1025): warning C4701: potentially uninitialized local variable 'y0' used 
  \mapserver\mapresample.c(1497): warning C4701: potentially uninitialized local variable 'sSrcExtent' used 
  \mapserver\mapmetadata.c(365): warning C4701: potentially uninitialized local variable 'n' used 
  \mapserver\mapfile.c(6458): warning C4701: potentially uninitialized local variable 'starttime' used 
  \mapserver\mapfile.c(6580): warning C4701: potentially uninitialized local variable 'starttime' used 
  \mapserver\mapogcfilter.c(1280): warning C4701: potentially uninitialized local variable 'sBox' used 
  \mapserver\maprasterquery.c(1366): warning C4701: potentially uninitialized local variable 'nXSize' used 
  \mapserver\maprasterquery.c(1360): warning C4701: potentially uninitialized local variable 'nYSize' used 
  \mapserver\maprasterquery.c(1010): warning C4701: potentially uninitialized local variable 'previous_maxresults' used 
  \mapserver\mapuvraster.c(876): warning C4701: potentially uninitialized local variable 'nXSize' used 
  \mapserver\mapuvraster.c(870): warning C4701: potentially uninitialized local variable 'nYSize' used 
  \mapserver\mapuvraster.c(642): warning C4701: potentially uninitialized local variable 'oldLayerExtent' used 
  \mapserver\mapuvraster.c(643): warning C4701: potentially uninitialized local variable 'oldLayerProjection' used 
  \mapserver\mapdrawgdal.c(2137): warning C4701: potentially uninitialized local variable 'starttime' used 
  \mapserver\maputil.c(996): warning C4701: potentially uninitialized local variable 'starttime' used 
  \mapserver\maputil.c(2719): warning C4701: potentially uninitialized local variable 'dX0' used 
  \mapserver\maputil.c(2720): warning C4701: potentially uninitialized local variable 'dY0' used 
  \mapserver\maputil.c(1897): warning C4701: potentially uninitialized local variable 'old_pt' used 
  \mapserver\mapscale.c(283): warning C4701: potentially uninitialized local variable 'strokeStyle' used","As per discussions in #5974 add in the compiler flag to check for uninitialized variables. See C6001docs for details. Also StackOverflow.
List of warnings as follows:
  \mapserver\mapservutil.c(1901): warning C4701: potentially uninitialized local variable 'execstarttime' used 
  \mapserver\mapservutil.c(1890): warning C4701: potentially uninitialized local variable 'requeststarttime' used 
  \mapserver\mapwmslayer.c(1002): warning C4701: potentially uninitialized local variable 'bbox_height' used 
  \mapserver\mapwmslayer.c(1002): warning C4701: potentially uninitialized local variable 'bbox_width' used 
  \mapserver\mapwmslayer.c(1216): warning C4701: potentially uninitialized local variable 'bbox' used 
  \mapserver\mapwms.c(822): warning C4701: potentially uninitialized local variable 'numranges' used 
  \mapserver\mapwms.c(824): warning C4701: potentially uninitialized local variable 'numonerange' used 
  \mapserver\mapchart.c(540): warning C4701: potentially uninitialized local variable 'barMaxVal' used 
  \mapserver\mapchart.c(540): warning C4701: potentially uninitialized local variable 'barMinVal' used 
  \mapserver\mapchart.c(421): warning C4701: potentially uninitialized local variable 'diameter' used 
  \mapserver\mapchart.c(403): warning C4701: potentially uninitialized local variable 'maxvalue' used 
  \mapserver\mapchart.c(401): warning C4701: potentially uninitialized local variable 'minvalue' used 
  \mapserver\mapchart.c(404): warning C4701: potentially uninitialized local variable 'maxdiameter' used 
  \mapserver\mapimageio.c(422): warning C4701: potentially uninitialized local variable 'a' used 
  \mapserver\mapdraw.c(2350): warning C4701: potentially uninitialized local variable 'ts' used 
  \mapserver\mapdraw.c(2373): warning C4701: potentially uninitialized local variable 'lbounds' used 
  \mapserver\mapdraw.c(2395): warning C4701: potentially uninitialized local variable 'p' used 
  \mapserver\mapdraw.c(3484): warning C4701: potentially uninitialized local variable 'starttime' used 
  \mapserver\mapdraw.c(3428): warning C4701: potentially uninitialized local variable 'labelpoly_bounds' used 
  \mapserver\mapdraw.c(583): warning C4701: potentially uninitialized local variable 'mapstarttime' used 
  \mapserver\mapdraw.c(343): warning C4701: potentially uninitialized local variable 'starttime' used 
  \mapserver\mapprimitive.c(1024): warning C4701: potentially uninitialized local variable 'x0' used 
  \mapserver\mapprimitive.c(1025): warning C4701: potentially uninitialized local variable 'y0' used 
  \mapserver\mapresample.c(1497): warning C4701: potentially uninitialized local variable 'sSrcExtent' used 
  \mapserver\mapmetadata.c(365): warning C4701: potentially uninitialized local variable 'n' used 
  \mapserver\mapfile.c(6458): warning C4701: potentially uninitialized local variable 'starttime' used 
  \mapserver\mapfile.c(6580): warning C4701: potentially uninitialized local variable 'starttime' used 
  \mapserver\mapogcfilter.c(1280): warning C4701: potentially uninitialized local variable 'sBox' used 
  \mapserver\maprasterquery.c(1366): warning C4701: potentially uninitialized local variable 'nXSize' used 
  \mapserver\maprasterquery.c(1360): warning C4701: potentially uninitialized local variable 'nYSize' used 
  \mapserver\maprasterquery.c(1010): warning C4701: potentially uninitialized local variable 'previous_maxresults' used 
  \mapserver\mapuvraster.c(876): warning C4701: potentially uninitialized local variable 'nXSize' used 
  \mapserver\mapuvraster.c(870): warning C4701: potentially uninitialized local variable 'nYSize' used 
  \mapserver\mapuvraster.c(642): warning C4701: potentially uninitialized local variable 'oldLayerExtent' used 
  \mapserver\mapuvraster.c(643): warning C4701: potentially uninitialized local variable 'oldLayerProjection' used 
  \mapserver\mapdrawgdal.c(2137): warning C4701: potentially uninitialized local variable 'starttime' used 
  \mapserver\maputil.c(996): warning C4701: potentially uninitialized local variable 'starttime' used 
  \mapserver\maputil.c(2719): warning C4701: potentially uninitialized local variable 'dX0' used 
  \mapserver\maputil.c(2720): warning C4701: potentially uninitialized local variable 'dY0' used 
  \mapserver\maputil.c(1897): warning C4701: potentially uninitialized local variable 'old_pt' used 
  \mapserver\mapscale.c(283): warning C4701: potentially uninitialized local variable 'strokeStyle' used",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5976,2020-01-15T21:49:20Z,2020-01-17T22:42:51Z,2020-01-17T22:42:51Z,CLOSED,False,1,1,1,https://github.com/geographika,Add /w14701 compiler check for potentially uninitialized local variables,1,[],https://github.com/mapserver/mapserver/pull/5976,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5976#issuecomment-575823419,"As per discussions in #5974 add in the compiler flag to check for uninitialized variables. See C6001docs for details. Also StackOverflow.
List of warnings as follows:
  \mapserver\mapservutil.c(1901): warning C4701: potentially uninitialized local variable 'execstarttime' used 
  \mapserver\mapservutil.c(1890): warning C4701: potentially uninitialized local variable 'requeststarttime' used 
  \mapserver\mapwmslayer.c(1002): warning C4701: potentially uninitialized local variable 'bbox_height' used 
  \mapserver\mapwmslayer.c(1002): warning C4701: potentially uninitialized local variable 'bbox_width' used 
  \mapserver\mapwmslayer.c(1216): warning C4701: potentially uninitialized local variable 'bbox' used 
  \mapserver\mapwms.c(822): warning C4701: potentially uninitialized local variable 'numranges' used 
  \mapserver\mapwms.c(824): warning C4701: potentially uninitialized local variable 'numonerange' used 
  \mapserver\mapchart.c(540): warning C4701: potentially uninitialized local variable 'barMaxVal' used 
  \mapserver\mapchart.c(540): warning C4701: potentially uninitialized local variable 'barMinVal' used 
  \mapserver\mapchart.c(421): warning C4701: potentially uninitialized local variable 'diameter' used 
  \mapserver\mapchart.c(403): warning C4701: potentially uninitialized local variable 'maxvalue' used 
  \mapserver\mapchart.c(401): warning C4701: potentially uninitialized local variable 'minvalue' used 
  \mapserver\mapchart.c(404): warning C4701: potentially uninitialized local variable 'maxdiameter' used 
  \mapserver\mapimageio.c(422): warning C4701: potentially uninitialized local variable 'a' used 
  \mapserver\mapdraw.c(2350): warning C4701: potentially uninitialized local variable 'ts' used 
  \mapserver\mapdraw.c(2373): warning C4701: potentially uninitialized local variable 'lbounds' used 
  \mapserver\mapdraw.c(2395): warning C4701: potentially uninitialized local variable 'p' used 
  \mapserver\mapdraw.c(3484): warning C4701: potentially uninitialized local variable 'starttime' used 
  \mapserver\mapdraw.c(3428): warning C4701: potentially uninitialized local variable 'labelpoly_bounds' used 
  \mapserver\mapdraw.c(583): warning C4701: potentially uninitialized local variable 'mapstarttime' used 
  \mapserver\mapdraw.c(343): warning C4701: potentially uninitialized local variable 'starttime' used 
  \mapserver\mapprimitive.c(1024): warning C4701: potentially uninitialized local variable 'x0' used 
  \mapserver\mapprimitive.c(1025): warning C4701: potentially uninitialized local variable 'y0' used 
  \mapserver\mapresample.c(1497): warning C4701: potentially uninitialized local variable 'sSrcExtent' used 
  \mapserver\mapmetadata.c(365): warning C4701: potentially uninitialized local variable 'n' used 
  \mapserver\mapfile.c(6458): warning C4701: potentially uninitialized local variable 'starttime' used 
  \mapserver\mapfile.c(6580): warning C4701: potentially uninitialized local variable 'starttime' used 
  \mapserver\mapogcfilter.c(1280): warning C4701: potentially uninitialized local variable 'sBox' used 
  \mapserver\maprasterquery.c(1366): warning C4701: potentially uninitialized local variable 'nXSize' used 
  \mapserver\maprasterquery.c(1360): warning C4701: potentially uninitialized local variable 'nYSize' used 
  \mapserver\maprasterquery.c(1010): warning C4701: potentially uninitialized local variable 'previous_maxresults' used 
  \mapserver\mapuvraster.c(876): warning C4701: potentially uninitialized local variable 'nXSize' used 
  \mapserver\mapuvraster.c(870): warning C4701: potentially uninitialized local variable 'nYSize' used 
  \mapserver\mapuvraster.c(642): warning C4701: potentially uninitialized local variable 'oldLayerExtent' used 
  \mapserver\mapuvraster.c(643): warning C4701: potentially uninitialized local variable 'oldLayerProjection' used 
  \mapserver\mapdrawgdal.c(2137): warning C4701: potentially uninitialized local variable 'starttime' used 
  \mapserver\maputil.c(996): warning C4701: potentially uninitialized local variable 'starttime' used 
  \mapserver\maputil.c(2719): warning C4701: potentially uninitialized local variable 'dX0' used 
  \mapserver\maputil.c(2720): warning C4701: potentially uninitialized local variable 'dY0' used 
  \mapserver\maputil.c(1897): warning C4701: potentially uninitialized local variable 'old_pt' used 
  \mapserver\mapscale.c(283): warning C4701: potentially uninitialized local variable 'strokeStyle' used",Addressed per #5978 which fixes the warnings,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5977,2020-01-17T16:56:29Z,2020-01-17T17:39:56Z,2020-01-17T17:41:07Z,MERGED,True,9,4,1,https://github.com/rouault,WCS output / msSaveImageGDAL(): fix support of netCDF output (#5968),1,[],https://github.com/mapserver/mapserver/pull/5977,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5977,"Fixes #5968
Derived from suggestion by @constantinius","Fixes #5968
Derived from suggestion by @constantinius",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5977,2020-01-17T16:56:29Z,2020-01-17T17:39:56Z,2020-01-17T17:41:07Z,MERGED,True,9,4,1,https://github.com/rouault,WCS output / msSaveImageGDAL(): fix support of netCDF output (#5968),1,[],https://github.com/mapserver/mapserver/pull/5977,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5977#issuecomment-575724973,"Fixes #5968
Derived from suggestion by @constantinius",Cherry-picked to 7.4,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5978,2020-01-17T17:39:38Z,2020-01-17T22:42:17Z,2020-01-17T22:42:17Z,MERGED,True,121,137,24,https://github.com/rouault,Fix 'C4701: potentially uninitialized local variable' occurences,4,[],https://github.com/mapserver/mapserver/pull/5978,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5978,and turn this warning class as error,and turn this warning class as error,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5979,2020-01-18T14:49:24Z,2020-01-18T16:25:08Z,2020-01-18T16:25:08Z,MERGED,True,3,1,2,https://github.com/rouault,ci/travis/before_install.sh: use mainstream coveralls,1,[],https://github.com/mapserver/mapserver/pull/5979,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5979,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5980,2020-01-19T08:59:40Z,2020-01-24T13:14:20Z,2020-01-24T14:22:00Z,MERGED,True,538,72,14,https://github.com/geographika,Use Case Insensitive Filters for SLD Output,14,[],https://github.com/mapserver/mapserver/pull/5980,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5980,"See issue at #5526.
This pull request makes checks for operators case-insensitive so ""AND"", ""and"", and ""Annd"" in a Mapfile expression will all produce an SLD filter.
The functions strcasecmp, strcasestr, and toupper are used to ensure this.
A new test Mapfile has been added to ensure these filters are created in each case.
TODO - add test for brackets e.g. AND(","See issue at #5526.
This pull request makes checks for operators case-insensitive so ""AND"", ""and"", and ""Annd"" in a Mapfile expression will all produce an SLD filter.
The functions strcasecmp, strcasestr, and toupper are used to ensure this.
A new test Mapfile has been added to ensure these filters are created in each case.
TODO - add test for brackets e.g. AND(",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5980,2020-01-19T08:59:40Z,2020-01-24T13:14:20Z,2020-01-24T14:22:00Z,MERGED,True,538,72,14,https://github.com/geographika,Use Case Insensitive Filters for SLD Output,14,[],https://github.com/mapserver/mapserver/pull/5980,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5980#issuecomment-575985577,"See issue at #5526.
This pull request makes checks for operators case-insensitive so ""AND"", ""and"", and ""Annd"" in a Mapfile expression will all produce an SLD filter.
The functions strcasecmp, strcasestr, and toupper are used to ensure this.
A new test Mapfile has been added to ensure these filters are created in each case.
TODO - add test for brackets e.g. AND(","There are some memory leaks showing up in Travis. See https://travis-ci.org/mapserver/mapserver/jobs/639062323?utm_source=github_status
I'm not sure if this is due to my changes, or due to previously untested codepaths now being tested.
For example:
Direct leak of 48 byte(s) in 1 object(s) allocated from:

    #0 0x4bb533 in __interceptor_malloc /local/mnt/workspace/tmp/ubuntu_rel/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:67:3
    #1 0x2b28ecb6e84f in FLTCreateFilterEncodingNode /home/travis/build/mapserver/mapserver/mapogcfilter.c:970:25
    #2 0x2b28ecd088b0 in BuildExpressionTree /home/travis/build/mapserver/mapserver/mapogcsld.c:4835:18
    #3 0x2b28ecd0afb4 in msSLDParseLogicalExpression /home/travis/build/mapserver/mapserver/mapogcsld.c:4968:12
    #4 0x2b28ecd0df4c in msSLDGetFilter /home/travis/build/mapserver/mapserver/mapogcsld.c:5166:19
    #5 0x2b28eccfd066 in msSLDGenerateUserStyle /home/travis/build/mapserver/mapserver/mapogcsld.c:4150:21
    #6 0x2b28eccefbb1 in msSLDGenerateSLDLayer /home/travis/build/mapserver/mapserver/mapogcsld.c:4314:9
    #7 0x2b28eccee7d3 in msSLDGenerateSLD /home/travis/build/mapserver/mapserver/mapogcsld.c:3196:18",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5980,2020-01-19T08:59:40Z,2020-01-24T13:14:20Z,2020-01-24T14:22:00Z,MERGED,True,538,72,14,https://github.com/geographika,Use Case Insensitive Filters for SLD Output,14,[],https://github.com/mapserver/mapserver/pull/5980,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/5980#issuecomment-576911081,"See issue at #5526.
This pull request makes checks for operators case-insensitive so ""AND"", ""and"", and ""Annd"" in a Mapfile expression will all produce an SLD filter.
The functions strcasecmp, strcasestr, and toupper are used to ensure this.
A new test Mapfile has been added to ensure these filters are created in each case.
TODO - add test for brackets e.g. AND(","I'm not sure if this is due to my changes, or due to previously untested codepaths now being tested.

Likely the later. I believe that adding CPLDestroyXMLNode(psNode) at https://github.com/mapserver/mapserver/blob/e04350e23843cf3c7749aeac25cc7c63fe7e1180/mapogcsld.c#L5000 should fix it",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5980,2020-01-19T08:59:40Z,2020-01-24T13:14:20Z,2020-01-24T14:22:00Z,MERGED,True,538,72,14,https://github.com/geographika,Use Case Insensitive Filters for SLD Output,14,[],https://github.com/mapserver/mapserver/pull/5980,https://github.com/geographika,4,https://github.com/MapServer/MapServer/pull/5980#issuecomment-576933697,"See issue at #5526.
This pull request makes checks for operators case-insensitive so ""AND"", ""and"", and ""Annd"" in a Mapfile expression will all produce an SLD filter.
The functions strcasecmp, strcasestr, and toupper are used to ensure this.
A new test Mapfile has been added to ensure these filters are created in each case.
TODO - add test for brackets e.g. AND(","@rouault - thanks for the hint. I added in 547c5b2 but leaks still reported.
Also failing to build in Appveyor, is there some casting that needs to be done?
C:\projects\mapserver\mapogcsld.c(4999): error C2220: warning treated as error - no 'object' file generated [C:\projects\mapserver\build\mapserver.vcxproj]
C:\projects\mapserver\mapogcsld.c(4999): warning C4133: 'function': incompatible types - from 'FilterEncodingNode *' to 'CPLXMLNode *' [C:\projects\mapserver\build\mapserver.vcxproj]

I removed the erroneous free(pszTmp); I added as per your comment.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5980,2020-01-19T08:59:40Z,2020-01-24T13:14:20Z,2020-01-24T14:22:00Z,MERGED,True,538,72,14,https://github.com/geographika,Use Case Insensitive Filters for SLD Output,14,[],https://github.com/mapserver/mapserver/pull/5980,https://github.com/rouault,5,https://github.com/MapServer/MapServer/pull/5980#issuecomment-576937172,"See issue at #5526.
This pull request makes checks for operators case-insensitive so ""AND"", ""and"", and ""Annd"" in a Mapfile expression will all produce an SLD filter.
The functions strcasecmp, strcasestr, and toupper are used to ensure this.
A new test Mapfile has been added to ensure these filters are created in each case.
TODO - add test for brackets e.g. AND(","is there some casting that needs to be done?

ah my mistake...  FLTFreeFilterEncodingNode(psNode); should do it hopefully",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5980,2020-01-19T08:59:40Z,2020-01-24T13:14:20Z,2020-01-24T14:22:00Z,MERGED,True,538,72,14,https://github.com/geographika,Use Case Insensitive Filters for SLD Output,14,[],https://github.com/mapserver/mapserver/pull/5980,https://github.com/geographika,6,https://github.com/MapServer/MapServer/pull/5980#issuecomment-577090742,"See issue at #5526.
This pull request makes checks for operators case-insensitive so ""AND"", ""and"", and ""Annd"" in a Mapfile expression will all produce an SLD filter.
The functions strcasecmp, strcasestr, and toupper are used to ensure this.
A new test Mapfile has been added to ensure these filters are created in each case.
TODO - add test for brackets e.g. AND(","@rouault - thanks for that - updated. I also needed to free the left and right expression variables as at 79f66b6 and now all reported leaks are gone.
The existing parsing used in the code looks like it could have some edge cases that would cause it to fail e.g. if an expression contained NOR( it would be picked up as an OR (although this situation may not be possible). There is also an issue (present in the existing code) where attribute values aren't trimmed - I can open a separate issue about this.
This pull request fixes issues around case-sensitivity (previously no filters were created for these), adds some tests for the SLD creation functions, fixes some comment typos, and fixes a couple of memory leaks.
@jbo-ads - you have pull request #5832 which affects the same file so may want to be aware of this update. I had a quick check and there don't seem to be any merge conflicts.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5980,2020-01-19T08:59:40Z,2020-01-24T13:14:20Z,2020-01-24T14:22:00Z,MERGED,True,538,72,14,https://github.com/geographika,Use Case Insensitive Filters for SLD Output,14,[],https://github.com/mapserver/mapserver/pull/5980,https://github.com/geographika,7,https://github.com/MapServer/MapServer/pull/5980#issuecomment-578149740,"See issue at #5526.
This pull request makes checks for operators case-insensitive so ""AND"", ""and"", and ""Annd"" in a Mapfile expression will all produce an SLD filter.
The functions strcasecmp, strcasestr, and toupper are used to ensure this.
A new test Mapfile has been added to ensure these filters are created in each case.
TODO - add test for brackets e.g. AND(",@rouault - many thanks for the review and explanations,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5983,2020-01-29T10:21:21Z,2020-02-08T21:55:27Z,2020-02-08T21:55:27Z,MERGED,True,75,80,6,https://github.com/geographika,Updates to build MapScript with SWIG 4.0.1,5,[],https://github.com/mapserver/mapserver/pull/5983,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5983,"See issue #5982

Python test suite now passes when built with SWIG 4.0.1 with this pull request.
Appveyor checks Python with both SWIG 3.0.12 (in the x32 build) and SWIG 4.0.1
C# binding code commented out to successfully build, but I'm unsure if there are any unwanted side-effects
PHP and Perl are built and tested on Travis so this will need updating to check these are working","See issue #5982

Python test suite now passes when built with SWIG 4.0.1 with this pull request.
Appveyor checks Python with both SWIG 3.0.12 (in the x32 build) and SWIG 4.0.1
C# binding code commented out to successfully build, but I'm unsure if there are any unwanted side-effects
PHP and Perl are built and tested on Travis so this will need updating to check these are working",True,"{'THUMBS_UP': ['https://github.com/rouault', 'https://github.com/sebastic']}"
mapserver/mapserver,https://github.com/mapserver/mapserver,5983,2020-01-29T10:21:21Z,2020-02-08T21:55:27Z,2020-02-08T21:55:27Z,MERGED,True,75,80,6,https://github.com/geographika,Updates to build MapScript with SWIG 4.0.1,5,[],https://github.com/mapserver/mapserver/pull/5983,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5983#issuecomment-579977575,"See issue #5982

Python test suite now passes when built with SWIG 4.0.1 with this pull request.
Appveyor checks Python with both SWIG 3.0.12 (in the x32 build) and SWIG 4.0.1
C# binding code commented out to successfully build, but I'm unsure if there are any unwanted side-effects
PHP and Perl are built and tested on Travis so this will need updating to check these are working","@szekerest - I've added a conditional statement to only remove the existing C# typemaps which cause SWIG 4 to fail when building with < SWIG 4. You may know better if these can be removed completely.
@jmckenna reported on the mailing list that the PHP MapScript has been building successfully on SWIG 4 for sometime as part of ms4w. @tigerfoot @sebastic if you get a chance to review please let me know if these changes could cause any openSUSE / Ubuntu build problems.
The Travis build currently uses SWIG 3.0.12 and all tests are passing so these updates at least are SWIG 3 compatible.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5983,2020-01-29T10:21:21Z,2020-02-08T21:55:27Z,2020-02-08T21:55:27Z,MERGED,True,75,80,6,https://github.com/geographika,Updates to build MapScript with SWIG 4.0.1,5,[],https://github.com/mapserver/mapserver/pull/5983,https://github.com/tigerfoot,3,https://github.com/MapServer/MapServer/pull/5983#issuecomment-580149533,"See issue #5982

Python test suite now passes when built with SWIG 4.0.1 with this pull request.
Appveyor checks Python with both SWIG 3.0.12 (in the x32 build) and SWIG 4.0.1
C# binding code commented out to successfully build, but I'm unsure if there are any unwanted side-effects
PHP and Perl are built and tested on Travis so this will need updating to check these are working","@geographika I've made a backport to 7.4.3 for python, and the build work nicely now so +1 on my side
( Can't test C# ) but java,perl,php,python mapscript modules are all build (with 7.4.3 + patches version)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5983,2020-01-29T10:21:21Z,2020-02-08T21:55:27Z,2020-02-08T21:55:27Z,MERGED,True,75,80,6,https://github.com/geographika,Updates to build MapScript with SWIG 4.0.1,5,[],https://github.com/mapserver/mapserver/pull/5983,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/5983#issuecomment-583750458,"See issue #5982

Python test suite now passes when built with SWIG 4.0.1 with this pull request.
Appveyor checks Python with both SWIG 3.0.12 (in the x32 build) and SWIG 4.0.1
C# binding code commented out to successfully build, but I'm unsure if there are any unwanted side-effects
PHP and Perl are built and tested on Travis so this will need updating to check these are working",This needs to be rebased on latest master due to a conflict in bug_check.py,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5983,2020-01-29T10:21:21Z,2020-02-08T21:55:27Z,2020-02-08T21:55:27Z,MERGED,True,75,80,6,https://github.com/geographika,Updates to build MapScript with SWIG 4.0.1,5,[],https://github.com/mapserver/mapserver/pull/5983,https://github.com/geographika,5,https://github.com/MapServer/MapServer/pull/5983#issuecomment-583778633,"See issue #5982

Python test suite now passes when built with SWIG 4.0.1 with this pull request.
Appveyor checks Python with both SWIG 3.0.12 (in the x32 build) and SWIG 4.0.1
C# binding code commented out to successfully build, but I'm unsure if there are any unwanted side-effects
PHP and Perl are built and tested on Travis so this will need updating to check these are working","@rouault - I've updated to the latest master (a rebase via TortoiseGit, not sure why the commits are showing up twice, but this pull request can be squashed).
The test_pattern is a Python MapScript related test so I've moved to the MapScript test suite rather than part of msautotest.
If you are happy with this I can merge?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5983,2020-01-29T10:21:21Z,2020-02-08T21:55:27Z,2020-02-08T21:55:27Z,MERGED,True,75,80,6,https://github.com/geographika,Updates to build MapScript with SWIG 4.0.1,5,[],https://github.com/mapserver/mapserver/pull/5983,https://github.com/rouault,6,https://github.com/MapServer/MapServer/pull/5983#issuecomment-583780622,"See issue #5982

Python test suite now passes when built with SWIG 4.0.1 with this pull request.
Appveyor checks Python with both SWIG 3.0.12 (in the x32 build) and SWIG 4.0.1
C# binding code commented out to successfully build, but I'm unsure if there are any unwanted side-effects
PHP and Perl are built and tested on Travis so this will need updating to check these are working",Looks good to me,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5984,2020-01-29T17:57:46Z,2020-02-05T19:39:22Z,2020-02-05T19:39:22Z,MERGED,True,742,1335,31,https://github.com/rouault,msautotest: use Pytest,5,[],https://github.com/mapserver/mapserver/pull/5984,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5984,Related to RFC-129,Related to RFC-129,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5987,2020-02-08T16:09:13Z,2020-02-08T17:47:10Z,2020-02-08T17:47:11Z,MERGED,True,48,54,8,https://github.com/rouault,msautotest: fix pyflakes issues and run it in Travis,1,[],https://github.com/mapserver/mapserver/pull/5987,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5987,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5988,2020-02-08T21:22:05Z,2020-02-11T14:58:09Z,2020-02-11T14:58:09Z,MERGED,True,372,63,2,https://github.com/rouault,PostGIS: add missing bind value substitutions and add testing,2,[],https://github.com/mapserver/mapserver/pull/5988,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5988,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5989,2020-02-10T17:24:37Z,2020-02-10T21:36:57Z,2020-02-10T21:36:57Z,MERGED,True,7,4,2,https://github.com/geographika,Python3 typemap fix,3,[],https://github.com/mapserver/mapserver/pull/5989,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5989,Fix custom typemap for py3 and ensure py3 is tested in Appveyor,Fix custom typemap for py3 and ensure py3 is tested in Appveyor,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5990,2020-02-11T14:03:41Z,2020-02-13T10:00:46Z,2020-02-13T10:00:46Z,MERGED,True,247,55,19,https://github.com/geographika,Build and run tests for the MSSQL Driver on Appveyor,4,[],https://github.com/mapserver/mapserver/pull/5990,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5990,"This pull request adds msautotests for the MSSQL MapServer driver, and runs them as part of the Windows Appveyor build.
Appveyor has a MSSQL 2017 database service added. A test database is created with a couple of shapefiles imported using ogr2ogr. Appveyor shallow_clone was disabled as the msautotest suite is not available by the GitHub HTTP download (it is in the .gitignore list). The -DWITH_MSSQL2008=1 setting was added to the CMake command.
The line include_directories(${ODBC_INCLUDE_DIR}) was removed from CMakeLists.txt as it caused build errors. See https://ci.appveyor.com/project/SethG/mapserver/build/job/o3ch02bfevwwcrkc for an example where errors such as those below are listed. I believe this is due to WINAPI being redefined/undefined when including all the files in ODBC_INCLUDE_DIR (which is C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\ on Appveyor):
C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\fileapifromapp.h(32): error C2054: expected '(' to follow 'WINSTORAGEAPI' [C:\projects\mapserver\build\mapserver.vcxproj]
C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\fileapifromapp.h(37): error C2085: 'CopyFileFromAppW': not in formal parameter list [C:\projects\mapserver\build\mapserver.vcxproj]
C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\fileapifromapp.h(40): error C2061: syntax error: identifier 'WINSTORAGEAPI' [C:\projects\mapserver\build\mapserver.vcxproj]

A first test MAP file was created based on the existing filters_postgis.map file to test MSSQL driver functionality. Several FILTER options don't work with the MSQL driver so these are currently ignored (a separate issue can be created for these).
Code warnings have been suppressed for mapmssql2008.c as my attempts to fix them caused memory issues, and not suppressing them cause the build test to fail. A few code issues are listed below.
  d:\github\mapserver\mapmssql2008.c(909): warning C4477: 'sprintf' : format string '%d' requires an argument of type 'int', but variadic argument 1 has type 'SQLULEN' [D:\MapServer\release-1911-x64-dev\build\msplugin_mssql2008.vcxproj]
  d:\github\mapserver\mapmssql2008.c(2291): warning C4244: '=': conversion from 'SQLLEN' to 'int', possible loss of data [D:\MapServer\release-1911-x64-dev\build\msplugin_mssql2008.vcxproj]
  d:\github\mapserver\mapmssql2008.c(2561): warning C4267: 'function': conversion from 'size_t' to 'int', possible loss of data [D:\MapServer\release-1911-x64-dev\build\msplugin_mssql2008.vcxproj]
  d:\github\mapserver\mapmssql2008.c(2721): warning C4267: 'function': conversion from 'size_t' to 'int', possible loss of data [D:\MapServer\release-1911-x64-dev\build\msplugin_mssql2008.vcxproj]

Finally the msautotest/mspython tests recently updated by @rouault in #5984 are also now run on Appveyor/Windows. There were a couple of minor path changes to get all of these to pass. There was one failing test I couldn't resolve so this is skipped on Windows with the following line:
@pytest.mark.skipif(sys.platform == 'win32', reason=""Fails on Windows"")","This pull request adds msautotests for the MSSQL MapServer driver, and runs them as part of the Windows Appveyor build.
Appveyor has a MSSQL 2017 database service added. A test database is created with a couple of shapefiles imported using ogr2ogr. Appveyor shallow_clone was disabled as the msautotest suite is not available by the GitHub HTTP download (it is in the .gitignore list). The -DWITH_MSSQL2008=1 setting was added to the CMake command.
The line include_directories(${ODBC_INCLUDE_DIR}) was removed from CMakeLists.txt as it caused build errors. See https://ci.appveyor.com/project/SethG/mapserver/build/job/o3ch02bfevwwcrkc for an example where errors such as those below are listed. I believe this is due to WINAPI being redefined/undefined when including all the files in ODBC_INCLUDE_DIR (which is C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\ on Appveyor):
C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\fileapifromapp.h(32): error C2054: expected '(' to follow 'WINSTORAGEAPI' [C:\projects\mapserver\build\mapserver.vcxproj]
C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\fileapifromapp.h(37): error C2085: 'CopyFileFromAppW': not in formal parameter list [C:\projects\mapserver\build\mapserver.vcxproj]
C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\fileapifromapp.h(40): error C2061: syntax error: identifier 'WINSTORAGEAPI' [C:\projects\mapserver\build\mapserver.vcxproj]

A first test MAP file was created based on the existing filters_postgis.map file to test MSSQL driver functionality. Several FILTER options don't work with the MSQL driver so these are currently ignored (a separate issue can be created for these).
Code warnings have been suppressed for mapmssql2008.c as my attempts to fix them caused memory issues, and not suppressing them cause the build test to fail. A few code issues are listed below.
  d:\github\mapserver\mapmssql2008.c(909): warning C4477: 'sprintf' : format string '%d' requires an argument of type 'int', but variadic argument 1 has type 'SQLULEN' [D:\MapServer\release-1911-x64-dev\build\msplugin_mssql2008.vcxproj]
  d:\github\mapserver\mapmssql2008.c(2291): warning C4244: '=': conversion from 'SQLLEN' to 'int', possible loss of data [D:\MapServer\release-1911-x64-dev\build\msplugin_mssql2008.vcxproj]
  d:\github\mapserver\mapmssql2008.c(2561): warning C4267: 'function': conversion from 'size_t' to 'int', possible loss of data [D:\MapServer\release-1911-x64-dev\build\msplugin_mssql2008.vcxproj]
  d:\github\mapserver\mapmssql2008.c(2721): warning C4267: 'function': conversion from 'size_t' to 'int', possible loss of data [D:\MapServer\release-1911-x64-dev\build\msplugin_mssql2008.vcxproj]

Finally the msautotest/mspython tests recently updated by @rouault in #5984 are also now run on Appveyor/Windows. There were a couple of minor path changes to get all of these to pass. There was one failing test I couldn't resolve so this is skipped on Windows with the following line:
@pytest.mark.skipif(sys.platform == 'win32', reason=""Fails on Windows"")",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5990,2020-02-11T14:03:41Z,2020-02-13T10:00:46Z,2020-02-13T10:00:46Z,MERGED,True,247,55,19,https://github.com/geographika,Build and run tests for the MSSQL Driver on Appveyor,4,[],https://github.com/mapserver/mapserver/pull/5990,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/5990#issuecomment-584678929,"This pull request adds msautotests for the MSSQL MapServer driver, and runs them as part of the Windows Appveyor build.
Appveyor has a MSSQL 2017 database service added. A test database is created with a couple of shapefiles imported using ogr2ogr. Appveyor shallow_clone was disabled as the msautotest suite is not available by the GitHub HTTP download (it is in the .gitignore list). The -DWITH_MSSQL2008=1 setting was added to the CMake command.
The line include_directories(${ODBC_INCLUDE_DIR}) was removed from CMakeLists.txt as it caused build errors. See https://ci.appveyor.com/project/SethG/mapserver/build/job/o3ch02bfevwwcrkc for an example where errors such as those below are listed. I believe this is due to WINAPI being redefined/undefined when including all the files in ODBC_INCLUDE_DIR (which is C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\ on Appveyor):
C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\fileapifromapp.h(32): error C2054: expected '(' to follow 'WINSTORAGEAPI' [C:\projects\mapserver\build\mapserver.vcxproj]
C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\fileapifromapp.h(37): error C2085: 'CopyFileFromAppW': not in formal parameter list [C:\projects\mapserver\build\mapserver.vcxproj]
C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\fileapifromapp.h(40): error C2061: syntax error: identifier 'WINSTORAGEAPI' [C:\projects\mapserver\build\mapserver.vcxproj]

A first test MAP file was created based on the existing filters_postgis.map file to test MSSQL driver functionality. Several FILTER options don't work with the MSQL driver so these are currently ignored (a separate issue can be created for these).
Code warnings have been suppressed for mapmssql2008.c as my attempts to fix them caused memory issues, and not suppressing them cause the build test to fail. A few code issues are listed below.
  d:\github\mapserver\mapmssql2008.c(909): warning C4477: 'sprintf' : format string '%d' requires an argument of type 'int', but variadic argument 1 has type 'SQLULEN' [D:\MapServer\release-1911-x64-dev\build\msplugin_mssql2008.vcxproj]
  d:\github\mapserver\mapmssql2008.c(2291): warning C4244: '=': conversion from 'SQLLEN' to 'int', possible loss of data [D:\MapServer\release-1911-x64-dev\build\msplugin_mssql2008.vcxproj]
  d:\github\mapserver\mapmssql2008.c(2561): warning C4267: 'function': conversion from 'size_t' to 'int', possible loss of data [D:\MapServer\release-1911-x64-dev\build\msplugin_mssql2008.vcxproj]
  d:\github\mapserver\mapmssql2008.c(2721): warning C4267: 'function': conversion from 'size_t' to 'int', possible loss of data [D:\MapServer\release-1911-x64-dev\build\msplugin_mssql2008.vcxproj]

Finally the msautotest/mspython tests recently updated by @rouault in #5984 are also now run on Appveyor/Windows. There were a couple of minor path changes to get all of these to pass. There was one failing test I couldn't resolve so this is skipped on Windows with the following line:
@pytest.mark.skipif(sys.platform == 'win32', reason=""Fails on Windows"")","as my attempts to fix them caused memory issues

Really ? Can you show them ? Simple casts should hopefully fix the warnings.  For mapmssql2008.c(909), the right fix is probably using %u instead of %d",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5990,2020-02-11T14:03:41Z,2020-02-13T10:00:46Z,2020-02-13T10:00:46Z,MERGED,True,247,55,19,https://github.com/geographika,Build and run tests for the MSSQL Driver on Appveyor,4,[],https://github.com/mapserver/mapserver/pull/5990,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5990#issuecomment-584689552,"This pull request adds msautotests for the MSSQL MapServer driver, and runs them as part of the Windows Appveyor build.
Appveyor has a MSSQL 2017 database service added. A test database is created with a couple of shapefiles imported using ogr2ogr. Appveyor shallow_clone was disabled as the msautotest suite is not available by the GitHub HTTP download (it is in the .gitignore list). The -DWITH_MSSQL2008=1 setting was added to the CMake command.
The line include_directories(${ODBC_INCLUDE_DIR}) was removed from CMakeLists.txt as it caused build errors. See https://ci.appveyor.com/project/SethG/mapserver/build/job/o3ch02bfevwwcrkc for an example where errors such as those below are listed. I believe this is due to WINAPI being redefined/undefined when including all the files in ODBC_INCLUDE_DIR (which is C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\ on Appveyor):
C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\fileapifromapp.h(32): error C2054: expected '(' to follow 'WINSTORAGEAPI' [C:\projects\mapserver\build\mapserver.vcxproj]
C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\fileapifromapp.h(37): error C2085: 'CopyFileFromAppW': not in formal parameter list [C:\projects\mapserver\build\mapserver.vcxproj]
C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\fileapifromapp.h(40): error C2061: syntax error: identifier 'WINSTORAGEAPI' [C:\projects\mapserver\build\mapserver.vcxproj]

A first test MAP file was created based on the existing filters_postgis.map file to test MSSQL driver functionality. Several FILTER options don't work with the MSQL driver so these are currently ignored (a separate issue can be created for these).
Code warnings have been suppressed for mapmssql2008.c as my attempts to fix them caused memory issues, and not suppressing them cause the build test to fail. A few code issues are listed below.
  d:\github\mapserver\mapmssql2008.c(909): warning C4477: 'sprintf' : format string '%d' requires an argument of type 'int', but variadic argument 1 has type 'SQLULEN' [D:\MapServer\release-1911-x64-dev\build\msplugin_mssql2008.vcxproj]
  d:\github\mapserver\mapmssql2008.c(2291): warning C4244: '=': conversion from 'SQLLEN' to 'int', possible loss of data [D:\MapServer\release-1911-x64-dev\build\msplugin_mssql2008.vcxproj]
  d:\github\mapserver\mapmssql2008.c(2561): warning C4267: 'function': conversion from 'size_t' to 'int', possible loss of data [D:\MapServer\release-1911-x64-dev\build\msplugin_mssql2008.vcxproj]
  d:\github\mapserver\mapmssql2008.c(2721): warning C4267: 'function': conversion from 'size_t' to 'int', possible loss of data [D:\MapServer\release-1911-x64-dev\build\msplugin_mssql2008.vcxproj]

Finally the msautotest/mspython tests recently updated by @rouault in #5984 are also now run on Appveyor/Windows. There were a couple of minor path changes to get all of these to pass. There was one failing test I couldn't resolve so this is skipped on Windows with the following line:
@pytest.mark.skipif(sys.platform == 'win32', reason=""Fails on Windows"")","Really ? Can you show them ? Simple casts should hopefully fix the warnings. For mapmssql2008.c(909), the right fix is probably using %u instead of %d

I added a few changes using size_t instead but these caused issues in the x32 build e.g. msSmallMalloc(): Out of memory allocating -18 bytes. at https://ci.appveyor.com/project/SethG/mapserver/builds/30706851/job/e3dbxr5mvm5fgqu1#L686
The attempt to fix them was in this commit - but I soon realised I was doing more harm than good.
I looked at #5873 for some hints but didn't see examples of int/size_t fixes. I'll attempt the suggested approach of casts for some of the other errors.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5990,2020-02-11T14:03:41Z,2020-02-13T10:00:46Z,2020-02-13T10:00:46Z,MERGED,True,247,55,19,https://github.com/geographika,Build and run tests for the MSSQL Driver on Appveyor,4,[],https://github.com/mapserver/mapserver/pull/5990,https://github.com/geographika,4,https://github.com/MapServer/MapServer/pull/5990#issuecomment-584745842,"This pull request adds msautotests for the MSSQL MapServer driver, and runs them as part of the Windows Appveyor build.
Appveyor has a MSSQL 2017 database service added. A test database is created with a couple of shapefiles imported using ogr2ogr. Appveyor shallow_clone was disabled as the msautotest suite is not available by the GitHub HTTP download (it is in the .gitignore list). The -DWITH_MSSQL2008=1 setting was added to the CMake command.
The line include_directories(${ODBC_INCLUDE_DIR}) was removed from CMakeLists.txt as it caused build errors. See https://ci.appveyor.com/project/SethG/mapserver/build/job/o3ch02bfevwwcrkc for an example where errors such as those below are listed. I believe this is due to WINAPI being redefined/undefined when including all the files in ODBC_INCLUDE_DIR (which is C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\ on Appveyor):
C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\fileapifromapp.h(32): error C2054: expected '(' to follow 'WINSTORAGEAPI' [C:\projects\mapserver\build\mapserver.vcxproj]
C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\fileapifromapp.h(37): error C2085: 'CopyFileFromAppW': not in formal parameter list [C:\projects\mapserver\build\mapserver.vcxproj]
C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\fileapifromapp.h(40): error C2061: syntax error: identifier 'WINSTORAGEAPI' [C:\projects\mapserver\build\mapserver.vcxproj]

A first test MAP file was created based on the existing filters_postgis.map file to test MSSQL driver functionality. Several FILTER options don't work with the MSQL driver so these are currently ignored (a separate issue can be created for these).
Code warnings have been suppressed for mapmssql2008.c as my attempts to fix them caused memory issues, and not suppressing them cause the build test to fail. A few code issues are listed below.
  d:\github\mapserver\mapmssql2008.c(909): warning C4477: 'sprintf' : format string '%d' requires an argument of type 'int', but variadic argument 1 has type 'SQLULEN' [D:\MapServer\release-1911-x64-dev\build\msplugin_mssql2008.vcxproj]
  d:\github\mapserver\mapmssql2008.c(2291): warning C4244: '=': conversion from 'SQLLEN' to 'int', possible loss of data [D:\MapServer\release-1911-x64-dev\build\msplugin_mssql2008.vcxproj]
  d:\github\mapserver\mapmssql2008.c(2561): warning C4267: 'function': conversion from 'size_t' to 'int', possible loss of data [D:\MapServer\release-1911-x64-dev\build\msplugin_mssql2008.vcxproj]
  d:\github\mapserver\mapmssql2008.c(2721): warning C4267: 'function': conversion from 'size_t' to 'int', possible loss of data [D:\MapServer\release-1911-x64-dev\build\msplugin_mssql2008.vcxproj]

Finally the msautotest/mspython tests recently updated by @rouault in #5984 are also now run on Appveyor/Windows. There were a couple of minor path changes to get all of these to pass. There was one failing test I couldn't resolve so this is skipped on Windows with the following line:
@pytest.mark.skipif(sys.platform == 'win32', reason=""Fails on Windows"")","@rouault - I've re-enabled the complier warnings and used casts and changed types to fix these. See this commit for changes. The found = -1 is slightly clunky but I couldn't find a way to store size_t calculations and have a -1 flag in the same variable.
Initial warnings prior to commit were as follows:
mapmssql2008.c(652): warning C4133: 'function': incompatible types - from 'SQLLEN *' to 'SQLINTEGER *' 
mapmssql2008.c(668): warning C4267: '=': conversion from 'size_t' to 'int', possible loss of data 
mapmssql2008.c(698): warning C4267: '=': conversion from 'size_t' to 'int', possible loss of data 
mapmssql2008.c(699): warning C4267: '=': conversion from 'size_t' to 'int', possible loss of data 
mapmssql2008.c(717): warning C4244: '=': conversion from '__int64' to 'int', possible loss of data 
mapmssql2008.c(787): warning C4090: 'function': different 'const' qualifiers 
mapmssql2008.c(909): warning C4477: 'sprintf' : format string '%d' requires an argument of type 'int', but variadic argument 1 has type 'SQLULEN' 
mapmssql2008.c(1355): warning C4101: 'extent': unreferenced local variable 
mapmssql2008.c(2292): warning C4244: '=': conversion from 'SQLLEN' to 'int', possible loss of data 
mapmssql2008.c(2562): warning C4267: 'function': conversion from 'size_t' to 'int', possible loss of data 
mapmssql2008.c(2689): warning C4267: '=': conversion from 'size_t' to 'int', possible loss of data 
mapmssql2008.c(2860): warning C4267: '=': conversion from 'size_t' to 'int', possible loss of data 
mapmssql2008.c(2968): warning C4267: 'initializing': conversion from 'size_t' to 'int', possible loss of data",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5991,2020-02-13T09:51:09Z,2020-02-13T10:09:57Z,2020-02-13T10:33:47Z,MERGED,True,151,900,18,https://github.com/jbo-ads,Cleanup SLD msautotests ,2,[],https://github.com/mapserver/mapserver/pull/5991,https://github.com/jbo-ads,1,https://github.com/MapServer/MapServer/pull/5991,"This pull request addresses issue #5871 :

File base.map is deleted
Other Mapfiles use INCLUDE mechanism on common content","This pull request addresses issue #5871 :

File base.map is deleted
Other Mapfiles use INCLUDE mechanism on common content",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5992,2020-02-13T20:55:39Z,2020-02-17T20:03:36Z,2020-02-17T20:03:53Z,MERGED,True,5,0,1,https://github.com/rouault,FindProj.cmake: ban PROJ 6.3.0,1,[],https://github.com/mapserver/mapserver/pull/5992,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5992,It has been found to causes crashes when running msautotest,It has been found to causes crashes when running msautotest,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5992,2020-02-13T20:55:39Z,2020-02-17T20:03:36Z,2020-02-17T20:03:53Z,MERGED,True,5,0,1,https://github.com/rouault,FindProj.cmake: ban PROJ 6.3.0,1,[],https://github.com/mapserver/mapserver/pull/5992,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5992#issuecomment-587140509,It has been found to causes crashes when running msautotest,thanks @rouault,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5993,2020-02-19T19:41:13Z,2020-02-21T18:28:41Z,2020-02-21T18:28:41Z,MERGED,True,123,6,9,https://github.com/geographika,Add basic WFS tests for the MSSQL driver,13,[],https://github.com/mapserver/mapserver/pull/5993,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5993,"Basic tests for WFS 2.0 GetFeature queries.
Adding the tests also highlighted an issue where multiple ORDER BY statements were added to the SQL query causing a syntax error. This is corrected in the driver, and tested for.
The tests cities.shp data also requires a .cpg file to correctly load the UTF-8 attributes into SQL Server.","Basic tests for WFS 2.0 GetFeature queries.
Adding the tests also highlighted an issue where multiple ORDER BY statements were added to the SQL query causing a syntax error. This is corrected in the driver, and tested for.
The tests cities.shp data also requires a .cpg file to correctly load the UTF-8 attributes into SQL Server.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5993,2020-02-19T19:41:13Z,2020-02-21T18:28:41Z,2020-02-21T18:28:41Z,MERGED,True,123,6,9,https://github.com/geographika,Add basic WFS tests for the MSSQL driver,13,[],https://github.com/mapserver/mapserver/pull/5993,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5993#issuecomment-589649488,"Basic tests for WFS 2.0 GetFeature queries.
Adding the tests also highlighted an issue where multiple ORDER BY statements were added to the SQL query causing a syntax error. This is corrected in the driver, and tested for.
The tests cities.shp data also requires a .cpg file to correctly load the UTF-8 attributes into SQL Server.","@geographika ok to merge this, to include in 7.6.0 release?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5993,2020-02-19T19:41:13Z,2020-02-21T18:28:41Z,2020-02-21T18:28:41Z,MERGED,True,123,6,9,https://github.com/geographika,Add basic WFS tests for the MSSQL driver,13,[],https://github.com/mapserver/mapserver/pull/5993,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/5993#issuecomment-589663068,"Basic tests for WFS 2.0 GetFeature queries.
Adding the tests also highlighted an issue where multiple ORDER BY statements were added to the SQL query causing a syntax error. This is corrected in the driver, and tested for.
The tests cities.shp data also requires a .cpg file to correctly load the UTF-8 attributes into SQL Server.","@jmckenna - I would appreciate if anyone could have a quick review of just the C filein this pull request - https://github.com/mapserver/mapserver/pull/5993/files#diff-d4fe27d706e5a7dcb9fc808d413f8f60
Currently ORDER BY is duplicated if in the DATA clause if an additional sort is passed in. This change fixes that.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5993,2020-02-19T19:41:13Z,2020-02-21T18:28:41Z,2020-02-21T18:28:41Z,MERGED,True,123,6,9,https://github.com/geographika,Add basic WFS tests for the MSSQL driver,13,[],https://github.com/mapserver/mapserver/pull/5993,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/5993#issuecomment-589759287,"Basic tests for WFS 2.0 GetFeature queries.
Adding the tests also highlighted an issue where multiple ORDER BY statements were added to the SQL query causing a syntax error. This is corrected in the driver, and tested for.
The tests cities.shp data also requires a .cpg file to correctly load the UTF-8 attributes into SQL Server.",Looks fine to me but @szekerest would be better for this review.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5993,2020-02-19T19:41:13Z,2020-02-21T18:28:41Z,2020-02-21T18:28:41Z,MERGED,True,123,6,9,https://github.com/geographika,Add basic WFS tests for the MSSQL driver,13,[],https://github.com/mapserver/mapserver/pull/5993,https://github.com/geographika,5,https://github.com/MapServer/MapServer/pull/5993#issuecomment-589769757,"Basic tests for WFS 2.0 GetFeature queries.
Adding the tests also highlighted an issue where multiple ORDER BY statements were added to the SQL query causing a syntax error. This is corrected in the driver, and tested for.
The tests cities.shp data also requires a .cpg file to correctly load the UTF-8 attributes into SQL Server.","@jmckenna - if you want to merge for the 7.6 release without a further review I'd be happy enough - the current code throws an error, and the new code and test passes.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5993,2020-02-19T19:41:13Z,2020-02-21T18:28:41Z,2020-02-21T18:28:41Z,MERGED,True,123,6,9,https://github.com/geographika,Add basic WFS tests for the MSSQL driver,13,[],https://github.com/mapserver/mapserver/pull/5993,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/5993#issuecomment-589776862,"Basic tests for WFS 2.0 GetFeature queries.
Adding the tests also highlighted an issue where multiple ORDER BY statements were added to the SQL query causing a syntax error. This is corrected in the driver, and tested for.
The tests cities.shp data also requires a .cpg file to correctly load the UTF-8 attributes into SQL Server.",ok let's merge.  Great work and thank you @geographika !!!!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5996,2020-02-23T18:07:49Z,2020-02-23T18:50:32Z,2020-02-23T18:50:32Z,MERGED,True,23,48,2,https://github.com/rouault,mapmssql2008.c: fix warnings when building for Linux and build it in Travis-CI,2,[],https://github.com/mapserver/mapserver/pull/5996,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5996,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5997,2020-02-24T11:48:11Z,2020-08-18T17:22:34Z,2020-08-18T17:22:34Z,CLOSED,False,28,4,3,https://github.com/geographika,[WIP] Limit SQL Select to required fields,6,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/5997,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/5997,"A WFS LAYER can be configured with ""gml_include_items"" ""all"" to allow maximum flexibility for the client. A WFS request allows a propertyName parameter to be passed via the query string to only return data for the requested fields e.g. &propertyName=ogr_fid,name will return features with only these 2 attributes. This greatly reduces the amount of data transferred to the client.
However the database query itself still selects data for all fields for the layer (confirmed in both the MSSQL and PostGIS drivers).
Selecting only the propertyName fields in the query can have a huge effect on the database query time, especially for layers which have 10s of fields, but where each request may only require 5-6 fields at any one time. In my test case 13,000 records with 50 fields takes 12 seconds compared to running instantly for 5 fields.
This is a proposed draft approach to limiting the number of fields used in a database select statement. As it currently is it has a number of issues (as reflected in the failing tests):

The case-sensitivity of fields is affected
The order fields are returned is affected
Older style query templates miss data as they do not use the ""gml_include_items"" metadata value

Further discussions are in the dev mailing list thread.
I also found this related RFC: https://mapserver.org/id/development/rfc/ms-rfc-33.html","A WFS LAYER can be configured with ""gml_include_items"" ""all"" to allow maximum flexibility for the client. A WFS request allows a propertyName parameter to be passed via the query string to only return data for the requested fields e.g. &propertyName=ogr_fid,name will return features with only these 2 attributes. This greatly reduces the amount of data transferred to the client.
However the database query itself still selects data for all fields for the layer (confirmed in both the MSSQL and PostGIS drivers).
Selecting only the propertyName fields in the query can have a huge effect on the database query time, especially for layers which have 10s of fields, but where each request may only require 5-6 fields at any one time. In my test case 13,000 records with 50 fields takes 12 seconds compared to running instantly for 5 fields.
This is a proposed draft approach to limiting the number of fields used in a database select statement. As it currently is it has a number of issues (as reflected in the failing tests):

The case-sensitivity of fields is affected
The order fields are returned is affected
Older style query templates miss data as they do not use the ""gml_include_items"" metadata value

Further discussions are in the dev mailing list thread.
I also found this related RFC: https://mapserver.org/id/development/rfc/ms-rfc-33.html",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5997,2020-02-24T11:48:11Z,2020-08-18T17:22:34Z,2020-08-18T17:22:34Z,CLOSED,False,28,4,3,https://github.com/geographika,[WIP] Limit SQL Select to required fields,6,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/5997,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/5997#issuecomment-592194913,"A WFS LAYER can be configured with ""gml_include_items"" ""all"" to allow maximum flexibility for the client. A WFS request allows a propertyName parameter to be passed via the query string to only return data for the requested fields e.g. &propertyName=ogr_fid,name will return features with only these 2 attributes. This greatly reduces the amount of data transferred to the client.
However the database query itself still selects data for all fields for the layer (confirmed in both the MSSQL and PostGIS drivers).
Selecting only the propertyName fields in the query can have a huge effect on the database query time, especially for layers which have 10s of fields, but where each request may only require 5-6 fields at any one time. In my test case 13,000 records with 50 fields takes 12 seconds compared to running instantly for 5 fields.
This is a proposed draft approach to limiting the number of fields used in a database select statement. As it currently is it has a number of issues (as reflected in the failing tests):

The case-sensitivity of fields is affected
The order fields are returned is affected
Older style query templates miss data as they do not use the ""gml_include_items"" metadata value

Further discussions are in the dev mailing list thread.
I also found this related RFC: https://mapserver.org/id/development/rfc/ms-rfc-33.html","Cut back the scope of this change to try and limit selection only in the WFS case where propertyName is passed in from the querystring.
2 issues currently outstanding:

propertyName fields can be wrapped in brackets e.g. (name) so they are not picked up
msGeometry is passed to propertyName in several tests, but is not a named field

Will continue looking into this.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5997,2020-02-24T11:48:11Z,2020-08-18T17:22:34Z,2020-08-18T17:22:34Z,CLOSED,False,28,4,3,https://github.com/geographika,[WIP] Limit SQL Select to required fields,6,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/5997,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/5997#issuecomment-675609471,"A WFS LAYER can be configured with ""gml_include_items"" ""all"" to allow maximum flexibility for the client. A WFS request allows a propertyName parameter to be passed via the query string to only return data for the requested fields e.g. &propertyName=ogr_fid,name will return features with only these 2 attributes. This greatly reduces the amount of data transferred to the client.
However the database query itself still selects data for all fields for the layer (confirmed in both the MSSQL and PostGIS drivers).
Selecting only the propertyName fields in the query can have a huge effect on the database query time, especially for layers which have 10s of fields, but where each request may only require 5-6 fields at any one time. In my test case 13,000 records with 50 fields takes 12 seconds compared to running instantly for 5 fields.
This is a proposed draft approach to limiting the number of fields used in a database select statement. As it currently is it has a number of issues (as reflected in the failing tests):

The case-sensitivity of fields is affected
The order fields are returned is affected
Older style query templates miss data as they do not use the ""gml_include_items"" metadata value

Further discussions are in the dev mailing list thread.
I also found this related RFC: https://mapserver.org/id/development/rfc/ms-rfc-33.html",Superseded by #6131,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5998,2020-02-24T17:05:51Z,2020-02-26T09:12:27Z,2020-02-26T09:12:27Z,MERGED,True,84,36,7,https://github.com/rouault,"mapmssql2008.c: honour ""wfs_use_default_extent_for_getfeature"" ""false"" LAYER.METADATA (fixes #5994)",4,[],https://github.com/mapserver/mapserver/pull/5998,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/5998,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5999,2020-02-26T16:22:08Z,2020-02-27T21:39:33Z,2020-02-27T21:39:33Z,MERGED,True,136,3,7,https://github.com/jbo-ads,Add rendering of <Mark> and <ExternalGraphic> in <LineSymbolizer>,1,['Enhancement'],https://github.com/mapserver/mapserver/pull/5999,https://github.com/jbo-ads,1,https://github.com/MapServer/MapServer/pull/5999,This pull request improves support of <Mark> and <ExternalGraphic> tags in <LineSymbolizer> section of a SLD style sheet. This is described in fourth section of MS RFC 124: Improving SLD Support in MapServer,This pull request improves support of <Mark> and <ExternalGraphic> tags in <LineSymbolizer> section of a SLD style sheet. This is described in fourth section of MS RFC 124: Improving SLD Support in MapServer,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,5999,2020-02-26T16:22:08Z,2020-02-27T21:39:33Z,2020-02-27T21:39:33Z,MERGED,True,136,3,7,https://github.com/jbo-ads,Add rendering of <Mark> and <ExternalGraphic> in <LineSymbolizer>,1,['Enhancement'],https://github.com/mapserver/mapserver/pull/5999,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/5999#issuecomment-591671435,This pull request improves support of <Mark> and <ExternalGraphic> tags in <LineSymbolizer> section of a SLD style sheet. This is described in fourth section of MS RFC 124: Improving SLD Support in MapServer,looks good here @jbo-ads and thanks for also creating an msautotest mapfile!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6000,2020-02-27T20:59:46Z,2020-02-27T21:36:22Z,2020-02-27T21:36:22Z,MERGED,True,2,0,1,https://github.com/geographika,Add missing expression test,2,[],https://github.com/mapserver/mapserver/pull/6000,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6000,As per comment at #5897 (comment) - the expected result was missing (although shouldn't this have thrown an error?).,As per comment at #5897 (comment) - the expected result was missing (although shouldn't this have thrown an error?).,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6000,2020-02-27T20:59:46Z,2020-02-27T21:36:22Z,2020-02-27T21:36:22Z,MERGED,True,2,0,1,https://github.com/geographika,Add missing expression test,2,[],https://github.com/mapserver/mapserver/pull/6000,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6000#issuecomment-592180767,As per comment at #5897 (comment) - the expected result was missing (although shouldn't this have thrown an error?).,"(although shouldn't this have thrown an error?).

Yes, that would be welcome. #6001 should detect this",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6000,2020-02-27T20:59:46Z,2020-02-27T21:36:22Z,2020-02-27T21:36:22Z,MERGED,True,2,0,1,https://github.com/geographika,Add missing expression test,2,[],https://github.com/mapserver/mapserver/pull/6000,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/6000#issuecomment-592188538,As per comment at #5897 (comment) - the expected result was missing (although shouldn't this have thrown an error?).,"#6001 should detect this

yes, this missing file is now detected per https://travis-ci.org/mapserver/mapserver/jobs/655978020?utm_medium=notification&utm_source=github_status",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6001,2020-02-27T21:16:07Z,2020-02-27T21:36:47Z,2020-02-27T21:44:01Z,MERGED,True,4,1,2,https://github.com/rouault,"msautotest: in --strict mode, as run by the CI, make absence of expected file an error",2,[],https://github.com/mapserver/mapserver/pull/6001,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6001,Should address remark of #6000 (comment),Should address remark of #6000 (comment),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6001,2020-02-27T21:16:07Z,2020-02-27T21:36:47Z,2020-02-27T21:44:01Z,MERGED,True,4,1,2,https://github.com/rouault,"msautotest: in --strict mode, as run by the CI, make absence of expected file an error",2,[],https://github.com/mapserver/mapserver/pull/6001,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/6001#issuecomment-592191987,Should address remark of #6000 (comment),Thanks @rouault - looks like my test was the only one missing a result then!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6002,2020-02-27T22:51:02Z,2020-03-03T23:30:08Z,2020-03-03T23:30:08Z,MERGED,True,0,1113,2,https://github.com/geographika,Remove files related to old Windows build process,1,[],https://github.com/mapserver/mapserver/pull/6002,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6002,"As per comments at #5456 (comment) I believe both these files are now unused, and CMake is the only supported MapServer build method. If this is not the case please comment and this pull request can be closed.
To avoid confusion I propose we remove these (they will of course still be available when switching to older versions of MapServer in the git repository).
There are further files such as mapscript/java/makefile.vc, mapscript/php/makefile.vc, mapscript/php/nmake.opt, and mapscript/csharp/makefile.vc that may or may not still be required.","As per comments at #5456 (comment) I believe both these files are now unused, and CMake is the only supported MapServer build method. If this is not the case please comment and this pull request can be closed.
To avoid confusion I propose we remove these (they will of course still be available when switching to older versions of MapServer in the git repository).
There are further files such as mapscript/java/makefile.vc, mapscript/php/makefile.vc, mapscript/php/nmake.opt, and mapscript/csharp/makefile.vc that may or may not still be required.",True,{'THUMBS_UP': ['https://github.com/rouault']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6003,2020-02-28T12:28:23Z,2020-02-28T14:28:44Z,2020-02-29T11:32:51Z,MERGED,True,92,18,5,https://github.com/jbo-ads,Allow both <LineSymbolizer> and <PolygonSymbolizer> in same <Rule>,1,[],https://github.com/mapserver/mapserver/pull/6003,https://github.com/jbo-ads,1,https://github.com/MapServer/MapServer/pull/6003,This pull request adds support of a combination of <LineSymbolizer> and <PolygonSymbolizer> tags in same <Rule> section of a SLD style sheet. This is described in fifth section of MS RFC 124: Improving SLD Support in MapServer.,This pull request adds support of a combination of <LineSymbolizer> and <PolygonSymbolizer> tags in same <Rule> section of a SLD style sheet. This is described in fifth section of MS RFC 124: Improving SLD Support in MapServer.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6003,2020-02-28T12:28:23Z,2020-02-28T14:28:44Z,2020-02-29T11:32:51Z,MERGED,True,92,18,5,https://github.com/jbo-ads,Allow both <LineSymbolizer> and <PolygonSymbolizer> in same <Rule>,1,[],https://github.com/mapserver/mapserver/pull/6003,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6003#issuecomment-592537042,This pull request adds support of a combination of <LineSymbolizer> and <PolygonSymbolizer> tags in same <Rule> section of a SLD style sheet. This is described in fifth section of MS RFC 124: Improving SLD Support in MapServer.,thanks @jbo-ads !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6010,2020-03-03T13:46:33Z,2020-03-03T14:10:10Z,2020-03-03T14:10:11Z,MERGED,True,3,3,7,https://github.com/jbo-ads,Update msautotests to changes on https://demo.mapserver.org/,1,[],https://github.com/mapserver/mapserver/pull/6010,https://github.com/jbo-ads,1,https://github.com/MapServer/MapServer/pull/6010,Recent changes on demo.mapserver.org (see MapServer Docs issue #311) need that msautotests no longer request image/gif from the service.,Recent changes on demo.mapserver.org (see MapServer Docs issue #311) need that msautotests no longer request image/gif from the service.,True,{'EYES': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6011,2020-03-03T23:28:50Z,2020-03-20T18:27:43Z,2020-06-19T18:19:03Z,MERGED,True,47,29,2,https://github.com/geographika,Automated PyPI Wheels for Windows on a new release,3,[],https://github.com/mapserver/mapserver/pull/6011,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6011,"This pull request automatically uploads Python MapScript Wheels for Windows to https://pypi.org/project/mapscript/ on each new MapServer release.
A release is defined by a new tag on the master branch e.g. rel-7-4-3, and will be created for each MapServer Release
Currently Appveyor builds for the following Python versions, so each of these will have a Wheel created:

Python 2.7 x32
Python 2.7 x64
Python 3.6 x64

It may be time to also add in a Python 3.7 environment.
I've tested the process on my branch, with tags on master, and uploading to https://test.pypi.org/manage/project/mapscript/release/7.6.0/
In addition a ""source distribution"" is created that can be used to automatically generate MapScript API documentation (updates still ongoing).","This pull request automatically uploads Python MapScript Wheels for Windows to https://pypi.org/project/mapscript/ on each new MapServer release.
A release is defined by a new tag on the master branch e.g. rel-7-4-3, and will be created for each MapServer Release
Currently Appveyor builds for the following Python versions, so each of these will have a Wheel created:

Python 2.7 x32
Python 2.7 x64
Python 3.6 x64

It may be time to also add in a Python 3.7 environment.
I've tested the process on my branch, with tags on master, and uploading to https://test.pypi.org/manage/project/mapscript/release/7.6.0/
In addition a ""source distribution"" is created that can be used to automatically generate MapScript API documentation (updates still ongoing).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6011,2020-03-03T23:28:50Z,2020-03-20T18:27:43Z,2020-06-19T18:19:03Z,MERGED,True,47,29,2,https://github.com/geographika,Automated PyPI Wheels for Windows on a new release,3,[],https://github.com/mapserver/mapserver/pull/6011,https://github.com/tomkralidis,2,https://github.com/MapServer/MapServer/pull/6011#issuecomment-594670688,"This pull request automatically uploads Python MapScript Wheels for Windows to https://pypi.org/project/mapscript/ on each new MapServer release.
A release is defined by a new tag on the master branch e.g. rel-7-4-3, and will be created for each MapServer Release
Currently Appveyor builds for the following Python versions, so each of these will have a Wheel created:

Python 2.7 x32
Python 2.7 x64
Python 3.6 x64

It may be time to also add in a Python 3.7 environment.
I've tested the process on my branch, with tags on master, and uploading to https://test.pypi.org/manage/project/mapscript/release/7.6.0/
In addition a ""source distribution"" is created that can be used to automatically generate MapScript API documentation (updates still ongoing).",@geographika looks like I don't have the ability to manage rights either.  @kiorky: are you able to either 1./ provide manage rights to us per this ticket 2./ Add the mapserver user to the PyPI mapscript maintainers?  Option 1 preferred for longer term sustainability (and less noise to yourself).,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6011,2020-03-03T23:28:50Z,2020-03-20T18:27:43Z,2020-06-19T18:19:03Z,MERGED,True,47,29,2,https://github.com/geographika,Automated PyPI Wheels for Windows on a new release,3,[],https://github.com/mapserver/mapserver/pull/6011,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/6011#issuecomment-594850894,"This pull request automatically uploads Python MapScript Wheels for Windows to https://pypi.org/project/mapscript/ on each new MapServer release.
A release is defined by a new tag on the master branch e.g. rel-7-4-3, and will be created for each MapServer Release
Currently Appveyor builds for the following Python versions, so each of these will have a Wheel created:

Python 2.7 x32
Python 2.7 x64
Python 3.6 x64

It may be time to also add in a Python 3.7 environment.
I've tested the process on my branch, with tags on master, and uploading to https://test.pypi.org/manage/project/mapscript/release/7.6.0/
In addition a ""source distribution"" is created that can be used to automatically generate MapScript API documentation (updates still ongoing).","@geographika looks like I don't have the ability to manage rights either. @kiorky: are you able to either 1./ provide manage rights to us per this ticket 2./ Add the mapserver user to the PyPI mapscript maintainers? Option 1 preferred for longer term sustainability (and less noise to yourself).

We will need to create a new PyPI user mapserver at https://pypi.org/account/register/
@sdlime - is there a communal mapserver email account we could use to register this user?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6011,2020-03-03T23:28:50Z,2020-03-20T18:27:43Z,2020-06-19T18:19:03Z,MERGED,True,47,29,2,https://github.com/geographika,Automated PyPI Wheels for Windows on a new release,3,[],https://github.com/mapserver/mapserver/pull/6011,https://github.com/kiorky,4,https://github.com/MapServer/MapServer/pull/6011#issuecomment-595690055,"This pull request automatically uploads Python MapScript Wheels for Windows to https://pypi.org/project/mapscript/ on each new MapServer release.
A release is defined by a new tag on the master branch e.g. rel-7-4-3, and will be created for each MapServer Release
Currently Appveyor builds for the following Python versions, so each of these will have a Wheel created:

Python 2.7 x32
Python 2.7 x64
Python 3.6 x64

It may be time to also add in a Python 3.7 environment.
I've tested the process on my branch, with tags on master, and uploading to https://test.pypi.org/manage/project/mapscript/release/7.6.0/
In addition a ""source distribution"" is created that can be used to automatically generate MapScript API documentation (updates still ongoing).","No problem, but please create that mapserver user :).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6011,2020-03-03T23:28:50Z,2020-03-20T18:27:43Z,2020-06-19T18:19:03Z,MERGED,True,47,29,2,https://github.com/geographika,Automated PyPI Wheels for Windows on a new release,3,[],https://github.com/mapserver/mapserver/pull/6011,https://github.com/geographika,5,https://github.com/MapServer/MapServer/pull/6011#issuecomment-595844900,"This pull request automatically uploads Python MapScript Wheels for Windows to https://pypi.org/project/mapscript/ on each new MapServer release.
A release is defined by a new tag on the master branch e.g. rel-7-4-3, and will be created for each MapServer Release
Currently Appveyor builds for the following Python versions, so each of these will have a Wheel created:

Python 2.7 x32
Python 2.7 x64
Python 3.6 x64

It may be time to also add in a Python 3.7 environment.
I've tested the process on my branch, with tags on master, and uploading to https://test.pypi.org/manage/project/mapscript/release/7.6.0/
In addition a ""source distribution"" is created that can be used to automatically generate MapScript API documentation (updates still ongoing).",Thanks @kiorky - mapserver user created at https://pypi.org/user/mapserver/,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6011,2020-03-03T23:28:50Z,2020-03-20T18:27:43Z,2020-06-19T18:19:03Z,MERGED,True,47,29,2,https://github.com/geographika,Automated PyPI Wheels for Windows on a new release,3,[],https://github.com/mapserver/mapserver/pull/6011,https://github.com/kiorky,6,https://github.com/MapServer/MapServer/pull/6011#issuecomment-596133152,"This pull request automatically uploads Python MapScript Wheels for Windows to https://pypi.org/project/mapscript/ on each new MapServer release.
A release is defined by a new tag on the master branch e.g. rel-7-4-3, and will be created for each MapServer Release
Currently Appveyor builds for the following Python versions, so each of these will have a Wheel created:

Python 2.7 x32
Python 2.7 x64
Python 3.6 x64

It may be time to also add in a Python 3.7 environment.
I've tested the process on my branch, with tags on master, and uploading to https://test.pypi.org/manage/project/mapscript/release/7.6.0/
In addition a ""source distribution"" is created that can be used to automatically generate MapScript API documentation (updates still ongoing).",done,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6011,2020-03-03T23:28:50Z,2020-03-20T18:27:43Z,2020-06-19T18:19:03Z,MERGED,True,47,29,2,https://github.com/geographika,Automated PyPI Wheels for Windows on a new release,3,[],https://github.com/mapserver/mapserver/pull/6011,https://github.com/geographika,7,https://github.com/MapServer/MapServer/pull/6011#issuecomment-596194741,"This pull request automatically uploads Python MapScript Wheels for Windows to https://pypi.org/project/mapscript/ on each new MapServer release.
A release is defined by a new tag on the master branch e.g. rel-7-4-3, and will be created for each MapServer Release
Currently Appveyor builds for the following Python versions, so each of these will have a Wheel created:

Python 2.7 x32
Python 2.7 x64
Python 3.6 x64

It may be time to also add in a Python 3.7 environment.
I've tested the process on my branch, with tags on master, and uploading to https://test.pypi.org/manage/project/mapscript/release/7.6.0/
In addition a ""source distribution"" is created that can be used to automatically generate MapScript API documentation (updates still ongoing).","done

Thanks @kiorky !",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6011,2020-03-03T23:28:50Z,2020-03-20T18:27:43Z,2020-06-19T18:19:03Z,MERGED,True,47,29,2,https://github.com/geographika,Automated PyPI Wheels for Windows on a new release,3,[],https://github.com/mapserver/mapserver/pull/6011,https://github.com/geographika,8,https://github.com/MapServer/MapServer/pull/6011#issuecomment-601287158,"This pull request automatically uploads Python MapScript Wheels for Windows to https://pypi.org/project/mapscript/ on each new MapServer release.
A release is defined by a new tag on the master branch e.g. rel-7-4-3, and will be created for each MapServer Release
Currently Appveyor builds for the following Python versions, so each of these will have a Wheel created:

Python 2.7 x32
Python 2.7 x64
Python 3.6 x64

It may be time to also add in a Python 3.7 environment.
I've tested the process on my branch, with tags on master, and uploading to https://test.pypi.org/manage/project/mapscript/release/7.6.0/
In addition a ""source distribution"" is created that can be used to automatically generate MapScript API documentation (updates still ongoing).","The Python package will now be created using the new mapserver user.
@jmckenna  - unless there are any objections I'd like to merge this ready for the 7.6 beta releases.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6011,2020-03-03T23:28:50Z,2020-03-20T18:27:43Z,2020-06-19T18:19:03Z,MERGED,True,47,29,2,https://github.com/geographika,Automated PyPI Wheels for Windows on a new release,3,[],https://github.com/mapserver/mapserver/pull/6011,https://github.com/jmckenna,9,https://github.com/MapServer/MapServer/pull/6011#issuecomment-601292086,"This pull request automatically uploads Python MapScript Wheels for Windows to https://pypi.org/project/mapscript/ on each new MapServer release.
A release is defined by a new tag on the master branch e.g. rel-7-4-3, and will be created for each MapServer Release
Currently Appveyor builds for the following Python versions, so each of these will have a Wheel created:

Python 2.7 x32
Python 2.7 x64
Python 3.6 x64

It may be time to also add in a Python 3.7 environment.
I've tested the process on my branch, with tags on master, and uploading to https://test.pypi.org/manage/project/mapscript/release/7.6.0/
In addition a ""source distribution"" is created that can be used to automatically generate MapScript API documentation (updates still ongoing).",no objections here.  marking as 7.6.0...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6011,2020-03-03T23:28:50Z,2020-03-20T18:27:43Z,2020-06-19T18:19:03Z,MERGED,True,47,29,2,https://github.com/geographika,Automated PyPI Wheels for Windows on a new release,3,[],https://github.com/mapserver/mapserver/pull/6011,https://github.com/jmckenna,10,https://github.com/MapServer/MapServer/pull/6011#issuecomment-601849335,"This pull request automatically uploads Python MapScript Wheels for Windows to https://pypi.org/project/mapscript/ on each new MapServer release.
A release is defined by a new tag on the master branch e.g. rel-7-4-3, and will be created for each MapServer Release
Currently Appveyor builds for the following Python versions, so each of these will have a Wheel created:

Python 2.7 x32
Python 2.7 x64
Python 3.6 x64

It may be time to also add in a Python 3.7 environment.
I've tested the process on my branch, with tags on master, and uploading to https://test.pypi.org/manage/project/mapscript/release/7.6.0/
In addition a ""source distribution"" is created that can be used to automatically generate MapScript API documentation (updates still ongoing).",@geographika thanks for this!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6011,2020-03-03T23:28:50Z,2020-03-20T18:27:43Z,2020-06-19T18:19:03Z,MERGED,True,47,29,2,https://github.com/geographika,Automated PyPI Wheels for Windows on a new release,3,[],https://github.com/mapserver/mapserver/pull/6011,https://github.com/geographika,11,https://github.com/MapServer/MapServer/pull/6011#issuecomment-645696028,"This pull request automatically uploads Python MapScript Wheels for Windows to https://pypi.org/project/mapscript/ on each new MapServer release.
A release is defined by a new tag on the master branch e.g. rel-7-4-3, and will be created for each MapServer Release
Currently Appveyor builds for the following Python versions, so each of these will have a Wheel created:

Python 2.7 x32
Python 2.7 x64
Python 3.6 x64

It may be time to also add in a Python 3.7 environment.
I've tested the process on my branch, with tags on master, and uploading to https://test.pypi.org/manage/project/mapscript/release/7.6.0/
In addition a ""source distribution"" is created that can be used to automatically generate MapScript API documentation (updates still ongoing).","@kiorky - is it possible to make the mapserver user an owner of the mapscript package?
A development version of mapscript accidentally got deployed to PyPI and it would be good to delete it - https://pypi.org/project/mapscript/7.7.0/",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6011,2020-03-03T23:28:50Z,2020-03-20T18:27:43Z,2020-06-19T18:19:03Z,MERGED,True,47,29,2,https://github.com/geographika,Automated PyPI Wheels for Windows on a new release,3,[],https://github.com/mapserver/mapserver/pull/6011,https://github.com/kiorky,12,https://github.com/MapServer/MapServer/pull/6011#issuecomment-646683362,"This pull request automatically uploads Python MapScript Wheels for Windows to https://pypi.org/project/mapscript/ on each new MapServer release.
A release is defined by a new tag on the master branch e.g. rel-7-4-3, and will be created for each MapServer Release
Currently Appveyor builds for the following Python versions, so each of these will have a Wheel created:

Python 2.7 x32
Python 2.7 x64
Python 3.6 x64

It may be time to also add in a Python 3.7 environment.
I've tested the process on my branch, with tags on master, and uploading to https://test.pypi.org/manage/project/mapscript/release/7.6.0/
In addition a ""source distribution"" is created that can be used to automatically generate MapScript API documentation (updates still ongoing).","dist is deleted, remember that you cant reupload a 7.7.0 , next version will be 7.8.0",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6011,2020-03-03T23:28:50Z,2020-03-20T18:27:43Z,2020-06-19T18:19:03Z,MERGED,True,47,29,2,https://github.com/geographika,Automated PyPI Wheels for Windows on a new release,3,[],https://github.com/mapserver/mapserver/pull/6011,https://github.com/geographika,13,https://github.com/MapServer/MapServer/pull/6011#issuecomment-646803137,"This pull request automatically uploads Python MapScript Wheels for Windows to https://pypi.org/project/mapscript/ on each new MapServer release.
A release is defined by a new tag on the master branch e.g. rel-7-4-3, and will be created for each MapServer Release
Currently Appveyor builds for the following Python versions, so each of these will have a Wheel created:

Python 2.7 x32
Python 2.7 x64
Python 3.6 x64

It may be time to also add in a Python 3.7 environment.
I've tested the process on my branch, with tags on master, and uploading to https://test.pypi.org/manage/project/mapscript/release/7.6.0/
In addition a ""source distribution"" is created that can be used to automatically generate MapScript API documentation (updates still ongoing).",@kiorky - thanks! Yes the next release should be 7.6.1 or 8.0.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6017,2020-03-23T16:54:23Z,2020-04-02T10:36:14Z,2020-04-02T10:36:15Z,MERGED,True,421,264,13,https://github.com/jbo-ads,SLD Improve <Label> conformance with OGC standard,14,['SLD'],https://github.com/mapserver/mapserver/pull/6017,https://github.com/jbo-ads,1,https://github.com/MapServer/MapServer/pull/6017,"This pull request addresses issue #6016.
Proposed changes are:

Raw text in <Label> is interpreted as implicit <Literal> instead of implicit <PropertyName>. This breaks previous MapServer behaviour.
<Literal>, <PropertyName> and <Function> tags are handled as well as any mixture of them.
Regarding <Function> tag, all MapServer functions are available, although only the ones returning a number are expected to be functional. Moreover, a SLD-compliant round(x) function, with a single argument, has been added; it is equivalent to MapServer's round(x,1).
Note that arithmetic operations (<Add>, <Sub>, <Mul>, <Div>) are not taken into account, except inside a <Function> tag.

Associated documentation is submitted in Docs pull request #318.","This pull request addresses issue #6016.
Proposed changes are:

Raw text in <Label> is interpreted as implicit <Literal> instead of implicit <PropertyName>. This breaks previous MapServer behaviour.
<Literal>, <PropertyName> and <Function> tags are handled as well as any mixture of them.
Regarding <Function> tag, all MapServer functions are available, although only the ones returning a number are expected to be functional. Moreover, a SLD-compliant round(x) function, with a single argument, has been added; it is equivalent to MapServer's round(x,1).
Note that arithmetic operations (<Add>, <Sub>, <Mul>, <Div>) are not taken into account, except inside a <Function> tag.

Associated documentation is submitted in Docs pull request #318.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6017,2020-03-23T16:54:23Z,2020-04-02T10:36:14Z,2020-04-02T10:36:15Z,MERGED,True,421,264,13,https://github.com/jbo-ads,SLD Improve <Label> conformance with OGC standard,14,['SLD'],https://github.com/mapserver/mapserver/pull/6017,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6017#issuecomment-607254717,"This pull request addresses issue #6016.
Proposed changes are:

Raw text in <Label> is interpreted as implicit <Literal> instead of implicit <PropertyName>. This breaks previous MapServer behaviour.
<Literal>, <PropertyName> and <Function> tags are handled as well as any mixture of them.
Regarding <Function> tag, all MapServer functions are available, although only the ones returning a number are expected to be functional. Moreover, a SLD-compliant round(x) function, with a single argument, has been added; it is equivalent to MapServer's round(x,1).
Note that arithmetic operations (<Add>, <Sub>, <Mul>, <Div>) are not taken into account, except inside a <Function> tag.

Associated documentation is submitted in Docs pull request #318.",@jbo-ads This needs to be rebased on top of current master due to a conflict in mapparser.c,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6018,2020-03-23T17:19:50Z,2020-03-24T14:07:48Z,2020-03-24T14:07:48Z,MERGED,True,2,0,1,https://github.com/jmckenna,handle gnu_source definition for SWIG mapscript (issue #6015),1,[],https://github.com/mapserver/mapserver/pull/6018,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6018,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6020,2020-03-24T18:30:36Z,2020-04-01T13:39:06Z,2020-04-01T13:39:06Z,MERGED,True,94,13,4,https://github.com/jbo-ads,SLD: Fix <PointSymbolizer> rendering on polygon,4,['SLD'],https://github.com/mapserver/mapserver/pull/6020,https://github.com/jbo-ads,1,https://github.com/MapServer/MapServer/pull/6020,"This pull request addresses issue #6019.
When parsing a <PointSymbolizer> of a <Rule> containing line, polygon or raster symbolizers, _geomtransformis internally set to ""centroid"".","This pull request addresses issue #6019.
When parsing a <PointSymbolizer> of a <Rule> containing line, polygon or raster symbolizers, _geomtransformis internally set to ""centroid"".",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6022,2020-03-26T08:52:23Z,2020-03-27T20:09:32Z,2020-03-27T20:09:48Z,MERGED,True,60,76,6,https://github.com/jbo-ads,Fix rendering bug with both RENDERMODE and GEOMTRANSFORM options,2,[],https://github.com/mapserver/mapserver/pull/6022,https://github.com/jbo-ads,1,https://github.com/MapServer/MapServer/pull/6022,This pull request addresses issue #6021.,This pull request addresses issue #6021.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6022,2020-03-26T08:52:23Z,2020-03-27T20:09:32Z,2020-03-27T20:09:48Z,MERGED,True,60,76,6,https://github.com/jbo-ads,Fix rendering bug with both RENDERMODE and GEOMTRANSFORM options,2,[],https://github.com/mapserver/mapserver/pull/6022,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6022#issuecomment-605293792,This pull request addresses issue #6021.,thank you for this fix @jbo-ads !!!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6023,2020-03-26T15:26:22Z,2020-04-01T13:40:26Z,2020-04-05T15:15:06Z,MERGED,True,36,1,23,https://github.com/ravhed,Styling - Fixes alpha value for hex colors,3,"['SLD', 'backport branch-7-6']",https://github.com/mapserver/mapserver/pull/6023,https://github.com/ravhed,1,https://github.com/MapServer/MapServer/pull/6023,"Fixes issue #5882. The issue was introduced by the following commit:
4fbd7ae
This commit changes back to the old behavior so that opacity is only
applied if the style have any bindings. A test case to test this
has also been added.","Fixes issue #5882. The issue was introduced by the following commit:
4fbd7ae
This commit changes back to the old behavior so that opacity is only
applied if the style have any bindings. A test case to test this
has also been added.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6023,2020-03-26T15:26:22Z,2020-04-01T13:40:26Z,2020-04-05T15:15:06Z,MERGED,True,36,1,23,https://github.com/ravhed,Styling - Fixes alpha value for hex colors,3,"['SLD', 'backport branch-7-6']",https://github.com/mapserver/mapserver/pull/6023,https://github.com/ravhed,2,https://github.com/MapServer/MapServer/pull/6023#issuecomment-604662061,"Fixes issue #5882. The issue was introduced by the following commit:
4fbd7ae
This commit changes back to the old behavior so that opacity is only
applied if the style have any bindings. A test case to test this
has also been added.",It seems like some SLD tests fail. I will have to investigate those.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6023,2020-03-26T15:26:22Z,2020-04-01T13:40:26Z,2020-04-05T15:15:06Z,MERGED,True,36,1,23,https://github.com/ravhed,Styling - Fixes alpha value for hex colors,3,"['SLD', 'backport branch-7-6']",https://github.com/mapserver/mapserver/pull/6023,https://github.com/jbo-ads,3,https://github.com/MapServer/MapServer/pull/6023#issuecomment-605806634,"Fixes issue #5882. The issue was introduced by the following commit:
4fbd7ae
This commit changes back to the old behavior so that opacity is only
applied if the style have any bindings. A test case to test this
has also been added.",Looks like I am the one who introduced that regression. I'll take a look at SLD tests.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6023,2020-03-26T15:26:22Z,2020-04-01T13:40:26Z,2020-04-05T15:15:06Z,MERGED,True,36,1,23,https://github.com/ravhed,Styling - Fixes alpha value for hex colors,3,"['SLD', 'backport branch-7-6']",https://github.com/mapserver/mapserver/pull/6023,https://github.com/jbo-ads,4,https://github.com/MapServer/MapServer/pull/6023#issuecomment-606104074,"Fixes issue #5882. The issue was introduced by the following commit:
4fbd7ae
This commit changes back to the old behavior so that opacity is only
applied if the style have any bindings. A test case to test this
has also been added.","I just submitted changes in SLD tests to ravhed:hex-opacity branch, see ravhed#1.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6023,2020-03-26T15:26:22Z,2020-04-01T13:40:26Z,2020-04-05T15:15:06Z,MERGED,True,36,1,23,https://github.com/ravhed,Styling - Fixes alpha value for hex colors,3,"['SLD', 'backport branch-7-6']",https://github.com/mapserver/mapserver/pull/6023,https://github.com/ravhed,5,https://github.com/MapServer/MapServer/pull/6023#issuecomment-606106380,"Fixes issue #5882. The issue was introduced by the following commit:
4fbd7ae
This commit changes back to the old behavior so that opacity is only
applied if the style have any bindings. A test case to test this
has also been added.","I just submitted changes in SLD tests to ravhed:hex-opacity branch, see ravhed#1.

Thanks a lot for your help! I haven't had time to look at the tests myself.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6023,2020-03-26T15:26:22Z,2020-04-01T13:40:26Z,2020-04-05T15:15:06Z,MERGED,True,36,1,23,https://github.com/ravhed,Styling - Fixes alpha value for hex colors,3,"['SLD', 'backport branch-7-6']",https://github.com/mapserver/mapserver/pull/6023,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/6023#issuecomment-606107342,"Fixes issue #5882. The issue was introduced by the following commit:
4fbd7ae
This commit changes back to the old behavior so that opacity is only
applied if the style have any bindings. A test case to test this
has also been added.",@jbo-ads would this bug also affect branch-7-6 code?  Just wondering the impact.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6023,2020-03-26T15:26:22Z,2020-04-01T13:40:26Z,2020-04-05T15:15:06Z,MERGED,True,36,1,23,https://github.com/ravhed,Styling - Fixes alpha value for hex colors,3,"['SLD', 'backport branch-7-6']",https://github.com/mapserver/mapserver/pull/6023,https://github.com/jbo-ads,7,https://github.com/MapServer/MapServer/pull/6023#issuecomment-606109172,"Fixes issue #5882. The issue was introduced by the following commit:
4fbd7ae
This commit changes back to the old behavior so that opacity is only
applied if the style have any bindings. A test case to test this
has also been added.","@jmckenna Yes, the bug was present since my first SLD changes.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6023,2020-03-26T15:26:22Z,2020-04-01T13:40:26Z,2020-04-05T15:15:06Z,MERGED,True,36,1,23,https://github.com/ravhed,Styling - Fixes alpha value for hex colors,3,"['SLD', 'backport branch-7-6']",https://github.com/mapserver/mapserver/pull/6023,https://github.com/jmckenna,8,https://github.com/MapServer/MapServer/pull/6023#issuecomment-606109394,"Fixes issue #5882. The issue was introduced by the following commit:
4fbd7ae
This commit changes back to the old behavior so that opacity is only
applied if the style have any bindings. A test case to test this
has also been added.",ok thanks @jbo-ads,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6023,2020-03-26T15:26:22Z,2020-04-01T13:40:26Z,2020-04-05T15:15:06Z,MERGED,True,36,1,23,https://github.com/ravhed,Styling - Fixes alpha value for hex colors,3,"['SLD', 'backport branch-7-6']",https://github.com/mapserver/mapserver/pull/6023,https://github.com/rouault,9,https://github.com/MapServer/MapServer/pull/6023#issuecomment-607256246,"Fixes issue #5882. The issue was introduced by the following commit:
4fbd7ae
This commit changes back to the old behavior so that opacity is only
applied if the style have any bindings. A test case to test this
has also been added.",@jbo-abs I let you issue a backport PR to 7.6 branch,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6023,2020-03-26T15:26:22Z,2020-04-01T13:40:26Z,2020-04-05T15:15:06Z,MERGED,True,36,1,23,https://github.com/ravhed,Styling - Fixes alpha value for hex colors,3,"['SLD', 'backport branch-7-6']",https://github.com/mapserver/mapserver/pull/6023,https://github.com/jmckenna,10,https://github.com/MapServer/MapServer/pull/6023#issuecomment-609432542,"Fixes issue #5882. The issue was introduced by the following commit:
4fbd7ae
This commit changes back to the old behavior so that opacity is only
applied if the style have any bindings. A test case to test this
has also been added.",cherry-picked into branch-7-6,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6027,2020-03-31T09:53:43Z,2020-03-31T13:26:19Z,2020-03-31T13:26:19Z,MERGED,True,231,28,8,https://github.com/jbo-ads,"SLD: proposal for supporting ""uom"" attribute at <Symbolizer> level",6,[],https://github.com/mapserver/mapserver/pull/6027,https://github.com/jbo-ads,1,https://github.com/MapServer/MapServer/pull/6027,This pull request addresses issue #6026.,This pull request addresses issue #6026.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6028,2020-04-01T13:33:19Z,2020-04-01T19:20:49Z,2020-04-01T19:20:50Z,MERGED,True,189,160,19,https://github.com/rouault,"Minimal C++ification of mapwms.c, mapwcs.c, mapwcs11.c, mapwcs20.c, mapwfs.c and mapwfs11.c",1,[],https://github.com/mapserver/mapserver/pull/6028,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6028,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6028,2020-04-01T13:33:19Z,2020-04-01T19:20:49Z,2020-04-01T19:20:50Z,MERGED,True,189,160,19,https://github.com/rouault,"Minimal C++ification of mapwms.c, mapwcs.c, mapwcs11.c, mapwcs20.c, mapwfs.c and mapwfs11.c",1,[],https://github.com/mapserver/mapserver/pull/6028,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6028#issuecomment-607261596,,Changing to 8.0 as I think this is a more reasonable target,True,{'THUMBS_UP': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6028,2020-04-01T13:33:19Z,2020-04-01T19:20:49Z,2020-04-01T19:20:50Z,MERGED,True,189,160,19,https://github.com/rouault,"Minimal C++ification of mapwms.c, mapwcs.c, mapwcs11.c, mapwcs20.c, mapwfs.c and mapwfs11.c",1,[],https://github.com/mapserver/mapserver/pull/6028,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6028#issuecomment-607262512,,"7.6.1 target date is 31 May, but I'm fine with 8.0 target.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6030,2020-04-01T16:53:12Z,2020-04-01T18:09:08Z,2020-04-01T18:09:08Z,MERGED,True,3,1,1,https://github.com/jbo-ads,Fix reference.map so that sld_reference.png doesn't break anymore,1,[],https://github.com/mapserver/mapserver/pull/6030,https://github.com/jbo-ads,1,https://github.com/MapServer/MapServer/pull/6030,This pull request addresses issue #6029.,This pull request addresses issue #6029.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6031,2020-04-01T20:02:46Z,2020-04-01T21:58:23Z,2020-04-01T22:00:40Z,MERGED,True,1789,114,17,https://github.com/rouault,WMS/WFS/WCS: support multiple metadataurl/metadatalink in GetCapabilities output,1,[],https://github.com/mapserver/mapserver/pull/6031,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6031,"Implements https://lists.osgeo.org/pipermail/mapserver-dev/2020-March/016159.html
For WMS, use wms_metadataurl_list as the master that references other metadata
items:
   wms_metadataurl_list ""xml html""

   wms_metadataurl_xml_format ""text/xml""
   wms_metadataurl_xml_type ""TC211""
   wms_metadataurl_xml_href ""http://example.com/testXML""

   wms_metadataurl_html_format ""text/html""
   wms_metadataurl_html_type ""TC211""
   wms_metadataurl_html_href ""http://example.com/testHTML""

FOR WFS, this is with wfs_metadataurl_list
For WCS, this is with wcs_metadatalink_list","Implements https://lists.osgeo.org/pipermail/mapserver-dev/2020-March/016159.html
For WMS, use wms_metadataurl_list as the master that references other metadata
items:
   wms_metadataurl_list ""xml html""

   wms_metadataurl_xml_format ""text/xml""
   wms_metadataurl_xml_type ""TC211""
   wms_metadataurl_xml_href ""http://example.com/testXML""

   wms_metadataurl_html_format ""text/html""
   wms_metadataurl_html_type ""TC211""
   wms_metadataurl_html_href ""http://example.com/testHTML""

FOR WFS, this is with wfs_metadataurl_list
For WCS, this is with wcs_metadatalink_list",True,{'THUMBS_UP': ['https://github.com/fxprunayre']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6031,2020-04-01T20:02:46Z,2020-04-01T21:58:23Z,2020-04-01T22:00:40Z,MERGED,True,1789,114,17,https://github.com/rouault,WMS/WFS/WCS: support multiple metadataurl/metadatalink in GetCapabilities output,1,[],https://github.com/mapserver/mapserver/pull/6031,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6031#issuecomment-607465150,"Implements https://lists.osgeo.org/pipermail/mapserver-dev/2020-March/016159.html
For WMS, use wms_metadataurl_list as the master that references other metadata
items:
   wms_metadataurl_list ""xml html""

   wms_metadataurl_xml_format ""text/xml""
   wms_metadataurl_xml_type ""TC211""
   wms_metadataurl_xml_href ""http://example.com/testXML""

   wms_metadataurl_html_format ""text/html""
   wms_metadataurl_html_type ""TC211""
   wms_metadataurl_html_href ""http://example.com/testHTML""

FOR WFS, this is with wfs_metadataurl_list
For WCS, this is with wcs_metadatalink_list",Nice work!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6031,2020-04-01T20:02:46Z,2020-04-01T21:58:23Z,2020-04-01T22:00:40Z,MERGED,True,1789,114,17,https://github.com/rouault,WMS/WFS/WCS: support multiple metadataurl/metadatalink in GetCapabilities output,1,[],https://github.com/mapserver/mapserver/pull/6031,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6031#issuecomment-607466548,"Implements https://lists.osgeo.org/pipermail/mapserver-dev/2020-March/016159.html
For WMS, use wms_metadataurl_list as the master that references other metadata
items:
   wms_metadataurl_list ""xml html""

   wms_metadataurl_xml_format ""text/xml""
   wms_metadataurl_xml_type ""TC211""
   wms_metadataurl_xml_href ""http://example.com/testXML""

   wms_metadataurl_html_format ""text/html""
   wms_metadataurl_html_type ""TC211""
   wms_metadataurl_html_href ""http://example.com/testHTML""

FOR WFS, this is with wfs_metadataurl_list
For WCS, this is with wcs_metadatalink_list",added to the 8.0 Release Plan at https://github.com/mapserver/mapserver/wiki/MapServer-8.0-Release-Plan,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6031,2020-04-01T20:02:46Z,2020-04-01T21:58:23Z,2020-04-01T22:00:40Z,MERGED,True,1789,114,17,https://github.com/rouault,WMS/WFS/WCS: support multiple metadataurl/metadatalink in GetCapabilities output,1,[],https://github.com/mapserver/mapserver/pull/6031,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/6031#issuecomment-607510654,"Implements https://lists.osgeo.org/pipermail/mapserver-dev/2020-March/016159.html
For WMS, use wms_metadataurl_list as the master that references other metadata
items:
   wms_metadataurl_list ""xml html""

   wms_metadataurl_xml_format ""text/xml""
   wms_metadataurl_xml_type ""TC211""
   wms_metadataurl_xml_href ""http://example.com/testXML""

   wms_metadataurl_html_format ""text/html""
   wms_metadataurl_html_type ""TC211""
   wms_metadataurl_html_href ""http://example.com/testHTML""

FOR WFS, this is with wfs_metadataurl_list
For WCS, this is with wcs_metadatalink_list",thank you for your thoroughness!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6031,2020-04-01T20:02:46Z,2020-04-01T21:58:23Z,2020-04-01T22:00:40Z,MERGED,True,1789,114,17,https://github.com/rouault,WMS/WFS/WCS: support multiple metadataurl/metadatalink in GetCapabilities output,1,[],https://github.com/mapserver/mapserver/pull/6031,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/6031#issuecomment-607511394,"Implements https://lists.osgeo.org/pipermail/mapserver-dev/2020-March/016159.html
For WMS, use wms_metadataurl_list as the master that references other metadata
items:
   wms_metadataurl_list ""xml html""

   wms_metadataurl_xml_format ""text/xml""
   wms_metadataurl_xml_type ""TC211""
   wms_metadataurl_xml_href ""http://example.com/testXML""

   wms_metadataurl_html_format ""text/html""
   wms_metadataurl_html_type ""TC211""
   wms_metadataurl_html_href ""http://example.com/testHTML""

FOR WFS, this is with wfs_metadataurl_list
For WCS, this is with wcs_metadatalink_list","I approved this one by accident sorry, I thought it was the docs one.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6032,2020-04-01T22:56:17Z,2020-04-02T08:10:24Z,2020-04-02T08:10:25Z,MERGED,True,9,8,6,https://github.com/rouault,Travis CI: enforce -Werror,3,[],https://github.com/mapserver/mapserver/pull/6032,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6032,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6033,2020-04-03T10:38:25Z,2020-04-04T13:50:50Z,2020-04-04T13:50:50Z,MERGED,True,575,611,8,https://github.com/rouault,mapwms: C++ify a bit,1,[],https://github.com/mapserver/mapserver/pull/6033,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6033,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6034,2020-04-04T15:12:51Z,2020-04-05T15:10:52Z,2020-04-05T15:10:52Z,MERGED,True,754,1302,3,https://github.com/rouault,c++'ify mappostgis,1,[],https://github.com/mapserver/mapserver/pull/6034,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6034,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6035,2020-04-04T15:57:24Z,2020-04-04T16:13:41Z,2020-04-04T16:36:19Z,MERGED,True,2,2,1,https://github.com/jmckenna,update README.rst urls,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6035,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6035,"mostly a test of the new backport tool:

create PR to master
then add one of the new ""backport..."" labels such as ""backport branch-7-6"" to the PR
when merged the bot will automagically create another PR to that branch","mostly a test of the new backport tool:

create PR to master
then add one of the new ""backport..."" labels such as ""backport branch-7-6"" to the PR
when merged the bot will automagically create another PR to that branch",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6036,2020-04-04T16:14:05Z,2020-04-04T16:44:25Z,2020-04-04T16:44:25Z,MERGED,True,2,2,1,https://github.com/MapServer-backport-bot,[Backport branch-7-6] update README.rst urls,1,[],https://github.com/mapserver/mapserver/pull/6036,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6036,Backport 03f6ab8 from #6035,Backport 03f6ab8 from #6035,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6037,2020-04-04T16:25:54Z,2020-04-05T15:12:25Z,2020-04-05T15:42:18Z,MERGED,True,127,130,8,https://github.com/rouault,Use GDAL large file API (UTF-8) compatible in a number of places,1,[],https://github.com/mapserver/mapserver/pull/6037,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6037,"There are still uses of ANSI FILE* API, but this should hopefully
fix #5995, but untested
Likely not appropriate for backport","There are still uses of ANSI FILE* API, but this should hopefully
fix #5995, but untested
Likely not appropriate for backport",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6037,2020-04-04T16:25:54Z,2020-04-05T15:12:25Z,2020-04-05T15:42:18Z,MERGED,True,127,130,8,https://github.com/rouault,Use GDAL large file API (UTF-8) compatible in a number of places,1,[],https://github.com/mapserver/mapserver/pull/6037,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6037#issuecomment-609436627,"There are still uses of ANSI FILE* API, but this should hopefully
fix #5995, but untested
Likely not appropriate for backport","my initial umlaut tests through #5995 on Windows succeed, after this change.  Thank you @rouault !!  wow great work.  Will report in other ticket (where likely more testing can occur).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6038,2020-04-05T15:35:07Z,2020-04-06T14:29:10Z,2020-04-06T14:29:10Z,MERGED,True,475,664,4,https://github.com/rouault,mapwms: more C++ification,1,[],https://github.com/mapserver/mapserver/pull/6038,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6038,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6039,2020-04-06T14:46:58Z,2020-04-06T22:28:18Z,2020-04-06T22:29:06Z,MERGED,True,100,30,29,https://github.com/rouault,WMS GetMap/GetFeatureInfo: make STYLES parameter mandatory as per WMS spec (fixes #6012),1,[],https://github.com/mapserver/mapserver/pull/6039,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6039,"Only for baseline requests: if SLD specific parameters SLD & SLD_BODY are
specified, then do not make STYLES mandatory
If the STYLES parameter is missing and needed, the error message emitted
suggests to define the ""wms_allow_getmap_without_styles"" ""true"" MAP.WEB.METADATA
item to get backward compatible behaviour.","Only for baseline requests: if SLD specific parameters SLD & SLD_BODY are
specified, then do not make STYLES mandatory
If the STYLES parameter is missing and needed, the error message emitted
suggests to define the ""wms_allow_getmap_without_styles"" ""true"" MAP.WEB.METADATA
item to get backward compatible behaviour.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6039,2020-04-06T14:46:58Z,2020-04-06T22:28:18Z,2020-04-06T22:29:06Z,MERGED,True,100,30,29,https://github.com/rouault,WMS GetMap/GetFeatureInfo: make STYLES parameter mandatory as per WMS spec (fixes #6012),1,[],https://github.com/mapserver/mapserver/pull/6039,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6039#issuecomment-610070251,"Only for baseline requests: if SLD specific parameters SLD & SLD_BODY are
specified, then do not make STYLES mandatory
If the STYLES parameter is missing and needed, the error message emitted
suggests to define the ""wms_allow_getmap_without_styles"" ""true"" MAP.WEB.METADATA
item to get backward compatible behaviour.",thanks for this @rouault,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6040,2020-04-06T16:15:34Z,2020-04-06T22:26:51Z,2020-04-06T22:26:51Z,MERGED,True,160,229,6,https://github.com/rouault,More C++ification of mapogcfiltercommon,1,[],https://github.com/mapserver/mapserver/pull/6040,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6040,,,True,{'HEART': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6040,2020-04-06T16:15:34Z,2020-04-06T22:26:51Z,2020-04-06T22:26:51Z,MERGED,True,160,229,6,https://github.com/rouault,More C++ification of mapogcfiltercommon,1,[],https://github.com/mapserver/mapserver/pull/6040,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6040#issuecomment-609898843,,Man are you prolific... What's driving the work? Just wondering.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6040,2020-04-06T16:15:34Z,2020-04-06T22:26:51Z,2020-04-06T22:26:51Z,MERGED,True,160,229,6,https://github.com/rouault,More C++ification of mapogcfiltercommon,1,[],https://github.com/mapserver/mapserver/pull/6040,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/6040#issuecomment-609899321,,"What's driving the work?

""free time"" :-)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6040,2020-04-06T16:15:34Z,2020-04-06T22:26:51Z,2020-04-06T22:26:51Z,MERGED,True,160,229,6,https://github.com/rouault,More C++ification of mapogcfiltercommon,1,[],https://github.com/mapserver/mapserver/pull/6040,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/6040#issuecomment-609900010,,Quarantined?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6040,2020-04-06T16:15:34Z,2020-04-06T22:26:51Z,2020-04-06T22:26:51Z,MERGED,True,160,229,6,https://github.com/rouault,More C++ification of mapogcfiltercommon,1,[],https://github.com/mapserver/mapserver/pull/6040,https://github.com/rouault,5,https://github.com/MapServer/MapServer/pull/6040#issuecomment-609900688,,"Quarantined?

Yes, but that's not really different from my usual lifestyle :-)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6042,2020-04-09T18:01:36Z,2020-04-09T21:14:57Z,2020-04-09T21:15:12Z,MERGED,True,2,1,1,https://github.com/szekerest,Fix memory corruption in msGEOSGetCentroid (#6041),1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6042,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/6042,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6042,2020-04-09T18:01:36Z,2020-04-09T21:14:57Z,2020-04-09T21:15:12Z,MERGED,True,2,1,1,https://github.com/szekerest,Fix memory corruption in msGEOSGetCentroid (#6041),1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6042,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6042#issuecomment-611672892,,Looks good.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6042,2020-04-09T18:01:36Z,2020-04-09T21:14:57Z,2020-04-09T21:15:12Z,MERGED,True,2,1,1,https://github.com/szekerest,Fix memory corruption in msGEOSGetCentroid (#6041),1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6042,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6042#issuecomment-611756049,,thanks @szekerest !!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6043,2020-04-09T21:15:24Z,2020-04-09T21:57:17Z,2020-04-09T21:57:18Z,MERGED,True,2,1,1,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Fix memory corruption in msGEOSGetCentroid (#6041),1,[],https://github.com/mapserver/mapserver/pull/6043,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6043,Backport d05565c from #6042,Backport d05565c from #6042,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6047,2020-04-14T16:02:56Z,2020-04-15T14:00:55Z,2020-04-15T14:00:55Z,MERGED,True,10,0,1,https://github.com/szekerest,zoomScale and zoomPoint doesn't consider map rotation (#6046),2,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6047,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/6047,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6049,2020-04-15T14:02:23Z,2020-04-15T15:12:01Z,2020-04-15T15:12:01Z,MERGED,True,10,0,1,https://github.com/MapServer-backport-bot,[Backport branch-7-6] zoomScale and zoomPoint doesn't consider map rotation (#6046),1,[],https://github.com/mapserver/mapserver/pull/6049,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6049,Backport c976d2a from #6047,Backport c976d2a from #6047,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6050,2020-04-15T16:01:03Z,2020-07-21T13:02:45Z,2021-04-26T02:31:17Z,MERGED,True,53,47,3,https://github.com/sdlime,Addresses open file handles when parse errors occur in include files  (Issue #5942),11,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6050,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/6050,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6050,2020-04-15T16:01:03Z,2020-07-21T13:02:45Z,2021-04-26T02:31:17Z,MERGED,True,53,47,3,https://github.com/sdlime,Addresses open file handles when parse errors occur in include files  (Issue #5942),11,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6050,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6050#issuecomment-614135987,,An addition in msautotest might be useful,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6050,2020-04-15T16:01:03Z,2020-07-21T13:02:45Z,2021-04-26T02:31:17Z,MERGED,True,53,47,3,https://github.com/sdlime,Addresses open file handles when parse errors occur in include files  (Issue #5942),11,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6050,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/6050#issuecomment-614913862,,A specific test would need to take the form of something that would show the number of open file handles after a process closed. I'm not sure how that would be done or how it could be included in the test suite.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6050,2020-04-15T16:01:03Z,2020-07-21T13:02:45Z,2021-04-26T02:31:17Z,MERGED,True,53,47,3,https://github.com/sdlime,Addresses open file handles when parse errors occur in include files  (Issue #5942),11,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6050,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/6050#issuecomment-614921955,,"A specific test would need to take the form of something that would show the number of open file handles after a process closed

I had presumed that the CI config that runs with Address Sanitizer enabled (PHP_7.2_WITH_ASAN) would warn about unclosed files as a memory leak, but on a small test case, I see this isn't the case unfortunately. Valgrind can see this with --leak-check=full --show-leak-kinds=all however
==27735== 552 bytes in 1 blocks are still reachable in loss record 1 of 1
==27735==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==27735==    by 0x4EA7CDC: __fopen_internal (iofopen.c:69)
==27735==    by 0x40053C: main (leak.c:4)

However I think there's still a merit in having such a test case: at least this makes sure that the error code paths are hit and don't cause crash (I'm sure they don't now :-), but it might if someone later touches it)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6050,2020-04-15T16:01:03Z,2020-07-21T13:02:45Z,2021-04-26T02:31:17Z,MERGED,True,53,47,3,https://github.com/sdlime,Addresses open file handles when parse errors occur in include files  (Issue #5942),11,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6050,https://github.com/sdlime,5,https://github.com/MapServer/MapServer/pull/6050#issuecomment-614924236,,"I can certainly create a couple of scenarios that generate parse errors 0, 1 and 2 includes deep.

From: Even Rouault [mailto:notifications@github.com]
Sent: Thursday, April 16, 2020 5:08 PM
To: mapserver/mapserver <mapserver@noreply.github.com>
Cc: Lime, Steve D (MNIT) <steve.lime@state.mn.us>; Author <author@noreply.github.com>
Subject: Re: [mapserver/mapserver] Addresses open file handles when parse errors occur in include files (Issue #5942) (#6050)

This message may be from an external email source.
Do not select links or open attachments unless verified. Report all suspicious emails to Minnesota IT Services Security Operations Center.
…
________________________________

A specific test would need to take the form of something that would show the number of open file handles after a process closed

I had presumed that the CI config that runs with Address Sanitizer enabled (PHP_7.2_WITH_ASAN) would warn about unclosed files as a memory leak, but on a small test case, I see this isn't the case unfortunately. Valgrind can see this with --leak-check=full --show-leak-kinds=all however

==27735== 552 bytes in 1 blocks are still reachable in loss record 1 of 1

==27735==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)

==27735==    by 0x4EA7CDC: __fopen_internal (iofopen.c:69)

==27735==    by 0x40053C: main (leak.c:4)

However I think there's still a merit in having such a test case: at least this makes sure that the error code paths are hit and don't cause crash (I'm sure they don't now :-), but it might if someone later touches it)

—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub<https://gcc01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fmapserver%2Fmapserver%2Fpull%2F6050%23issuecomment-614921955&data=02%7C01%7Csteve.lime%40state.mn.us%7Cfddfb8034e4e47c3805908d7e252a88b%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637226716950720578&sdata=ua24rqmVXcs7bJ5nj95wCnDAnnNvk6cLRBOd%2FhQujqY%3D&reserved=0>, or unsubscribe<https://gcc01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAAMGN63UBATFNSRRINBLQXLRM56UZANCNFSM4MIWJZSA&data=02%7C01%7Csteve.lime%40state.mn.us%7Cfddfb8034e4e47c3805908d7e252a88b%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637226716950720578&sdata=Bxlf7BlseykPVhO3o9jXHHZyabf5rcluTWj8OcPZNZs%3D&reserved=0>.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6050,2020-04-15T16:01:03Z,2020-07-21T13:02:45Z,2021-04-26T02:31:17Z,MERGED,True,53,47,3,https://github.com/sdlime,Addresses open file handles when parse errors occur in include files  (Issue #5942),11,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6050,https://github.com/sdlime,6,https://github.com/MapServer/MapServer/pull/6050#issuecomment-626719753,,"Bump, @dmorissette or @alexbrault, do you have time to test this fix? --Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6050,2020-04-15T16:01:03Z,2020-07-21T13:02:45Z,2021-04-26T02:31:17Z,MERGED,True,53,47,3,https://github.com/sdlime,Addresses open file handles when parse errors occur in include files  (Issue #5942),11,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6050,https://github.com/jmckenna,7,https://github.com/MapServer/MapServer/pull/6050#issuecomment-661847200,,"No response on testing, but am merging this now...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6051,2020-04-15T16:27:23Z,2020-04-17T14:31:22Z,2020-04-17T14:31:35Z,MERGED,True,11,0,1,https://github.com/szekerest,getRotation should be exposed to mapscript (#6048),1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6051,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/6051,Also exposed pixelToGeoref,Also exposed pixelToGeoref,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6051,2020-04-15T16:27:23Z,2020-04-17T14:31:22Z,2020-04-17T14:31:35Z,MERGED,True,11,0,1,https://github.com/szekerest,getRotation should be exposed to mapscript (#6048),1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6051,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6051#issuecomment-615277717,Also exposed pixelToGeoref,thanks @szekerest,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/danduk82,1,https://github.com/MapServer/MapServer/pull/6052,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.","This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.",True,"{'THUMBS_UP': ['https://github.com/jratike80', 'https://github.com/jbo-ads']}"
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/6052#issuecomment-615234060,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.","@danduk82 looks a nice addition thanks!
Would you be able to add msautotests for the ALIGN and OFFSET bindings?
There are a few label tests already that you could base them on.
The build errors look unrelated (MapScript/Python) - I'll look at fixing those this wekeend.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/danduk82,3,https://github.com/MapServer/MapServer/pull/6052#issuecomment-615238669,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.","@geographika ,
OK, I will add a couple of test this afternoon.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/danduk82,4,https://github.com/MapServer/MapServer/pull/6052#issuecomment-615245457,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.","@geographika , I am writing the PR for the documentation in docs repository, but I don't understand if I have to fill the en/development/changelog/changelog-7-6.txt or if it is auto-generated. Shall I point this PR in it or not?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/6052#issuecomment-615253433,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.",@danduk82 I update the changelog each release.  Please file your documentation PR in the 'docs' repository in 'branch-7-6'.  We can discuss the doc changes needed there in that docs PR.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/6052#issuecomment-615280614,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.","@danduk82 can you take a look at the CI build errors from this build, as well?  It seems 7 tests fail in msautotest:
######################################
# sld => sld_text_propertyname_fontsize.png
######################################
compare.im6: improper image header `sld_text_propertyname_fontsize.png' @ error/png.c/ReadPNGImage/3677.

######################################
# sld => sld_text_propertyname_halofill.png
######################################
compare.im6: improper image header `sld_text_propertyname_halofill.png' @ error/png.c/ReadPNGImage/3677.

######################################
# sld => sld_label_function.png
######################################
compare.im6: improper image header `sld_label_function.png' @ error/png.c/ReadPNGImage/3677.

######################################
# sld => sld_text_expression_fontsize.png
######################################
compare.im6: improper image header `sld_text_expression_fontsize.png' @ error/png.c/ReadPNGImage/3677.

######################################
# sld => sld_text_expression_rotation.png
######################################
compare.im6: improper image header `sld_text_expression_rotation.png' @ error/png.c/ReadPNGImage/3677.

######################################
# sld => sld_text_propertyname_rotation.png
######################################
compare.im6: improper image header `sld_text_propertyname_rotation.png' @ error/png.c/ReadPNGImage/3677.

######################################
# sld => sld_text_propertyname_fill.png
######################################
compare.im6: improper image header `sld_text_propertyname_fill.png' @ error/png.c/ReadPNGImage/3677.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/jmckenna,7,https://github.com/MapServer/MapServer/pull/6052#issuecomment-615285255,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.","@danduk82 will wait for you to fix the build errors, and then release the next RC on Monday (otherwise these changes will have to wait until the next release/release candidate).  thank you again for this contribution!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/danduk82,8,https://github.com/MapServer/MapServer/pull/6052#issuecomment-615321321,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.","@jmckenna ,
when I execute the tests locally I have a lot of them failing.
Results (30.06s):
     231 passed
     184 failed

But when I look at the results I don't see a noticeable difference. I suppose it is some minor binary differences. I am working on Ubuntu 18.04 64bits. Might this be an issue?
I will now check in detail the 6 that you have pointed out to see if I can visually see some problems.
Moreover, I have just added 2 tests for both features, but I don't know if because of the previous statement, now they might be failing as well on your CI?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/danduk82,9,https://github.com/MapServer/MapServer/pull/6052#issuecomment-615323752,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.","@jmckenna  no there are indeed some other problems with the 6 tests that you have mentionned, the image is not generated at all",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/danduk82,10,https://github.com/MapServer/MapServer/pull/6052#issuecomment-615424500,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.","@jmckenna ,
well this is kind of nasty. With my PR, I change the value of MS_LABEL_BINDING_LENGTH from 9 to 12 because I have added 3 items in the enum MS_LABEL_BINDING_ENUM in mapserver.h. With this change, the SLD style parses makes a segfault while reading the style expression in msSLDParseOgcExpression (see stacktrace below).
The tests that do not pass are related to SLD layers, and interestingly enough, if I set MS_LABEL_BINDING_LENGTH=11, it still works (i.e. the tests are passing).  I have tried to go back to master and change only that, and again, if I put MS_LABEL_BINDING_LENGTH=11 (even without changing the contents of the enum MS_LABEL_BINDING_ENUM it still work, but with 12 it crashes.
labelObj->exprBindings, which is set to have a dimension of MS_LABEL_BINDING_LENGTH (in mapserver.h), seems to mess with the macro LOOP_ON_CHILD_ELEMENT defined in mapogcsld.c:495.
What is strange, is when I use a dimension of  MS_LABEL_BINDING_LENGTH=12, the element for which  msSLDParseOgcExpression crashes comes with an objtype of MS_OBJ_LABEL (see code extract below) but I think it should have been MS_OBJ_STYLE like almost all the predecessors. I checked one after the other, there are 2 of them that come as MS_OBJ_LABEL, and the second is a pointer to an arbitrary memory section, and this is what make the code segfault.
I noticed that 12 is also the length of MS_STYLE_BINDING_LENGTH but I still don't know if this is related.
I struggle a little to understand the complete logic of the code, and I wonder if there is someone that could give me a couple of clarifications here.
I think that I touched some dormant bug by changing MS_LABEL_BINDING_LENGTH.
@jmckenna what do you think? If you want to reproduce the bug, I used the mapfiles of the tests, and you can find the QUERY_STRING that is used directly at the bottom of this message.
Kind regards,
Andrea
// from msSLDParseOgcExpression in mapogcsld.c:1327
  switch (objtype)
  {
    case MS_OBJ_STYLE:
      lbinding = binding + MS_STYLE_BASE;
      exprBindings = psStyle->exprBindings;
      nexprbindings = &psStyle->nexprbindings;
      break;
    case MS_OBJ_LABEL:
      lbinding = binding + MS_LABEL_BASE;
      exprBindings = psLabel->exprBindings; // this points to something invalid
      nexprbindings = &psLabel->nexprbindings;
      break;
    default:
      return MS_FAILURE;
      break;
  }
I run mapserv -nh QUERY_STRING='map=./msautotest/sld/arithmetic_text.map&SERVICE=WMS&VERSION=1.3&REQUEST=GetMap&CRS=EPSG:4326&BBOX=42,-5,52,9&FORMAT=image/png&WIDTH=200&HEIGHT=200&LAYERS=lline,lpolygon,lpoint&SLD_BODY=<StyledLayerDescriptor version=%221.1.0%22><NamedLayer><Name>lpoint</Name><UserStyle><FeatureTypeStyle><Rule><PointSymbolizer><Graphic><Mark><WellKnownName>star</WellKnownName><Stroke><SvgParameter name=%22stroke%22>#FF0000</SvgParameter><SvgParameter name=%22stroke-opacity%22>1</SvgParameter><SvgParameter name=%22stroke-width%22>1</SvgParameter></Stroke><Fill><SvgParameter name=%22fill%22>#0000FF</SvgParameter><SvgParameter name=%22fill-opacity%22>0.1</SvgParameter></Fill></Mark><Size>20</Size><Rotation>180</Rotation><Displacement><DisplacementX>2</DisplacementX><DisplacementY>2</DisplacementY></Displacement><Opacity>0.5</Opacity></Graphic></PointSymbolizer><TextSymbolizer><Label><PropertyName>name</PropertyName></Label><Font><SvgParameter name=%22font-family%22>vera</SvgParameter><SvgParameter name=%22font-weight%22>bold</SvgParameter><SvgParameter name=%22font-size%22><PropertyName>s12</PropertyName></SvgParameter></Font><Fill><SvgParameter name=%22fill%22>#FFFFFF</SvgParameter></Fill><LabelPlacement><PointPlacement><Displacement><DisplacementX>2</DisplacementX><DisplacementY>20</DisplacementY></Displacement><AnchorPoint><AnchorPointX>0.5</AnchorPointX><AnchorPointY>0.5</AnchorPointY></AnchorPoint><Rotation>15</Rotation></PointPlacement></LabelPlacement><Halo><Radius>2</Radius><Fill><SvgParameter name=%22fill%22>#00FF00</SvgParameter></Fill></Halo></TextSymbolizer></Rule></FeatureTypeStyle></UserStyle></NamedLayer></StyledLayerDescriptor>'
Program received signal SIGSEGV, Segmentation fault.
> backtrace
#0  0x00007ffff728c98d in __GI___libc_free (mem=0x7d2) at malloc.c:3103
#1  0x00007ffff79d1e9f in msFreeExpression (exp=0x5555557b6370) at /home/aborghi/code/mapserver_stuff/mapserver/mapfile.c:1991
#2  0x00007ffff7a02ee2 in msSLDParseOgcExpression (psRoot=0x5555557b3780, psObj=0x5555557b6120, binding=1, objtype=MS_OBJ_LABEL) at /home/aborghi/code/mapserver_stuff/mapserver/mapogcsld.c:1353
#3  0x00007ffff7a0913b in ParseTextPointPlacement (psRoot=0x5555557b3540, psClass=0x5555557b4ae0) at /home/aborghi/code/mapserver_stuff/mapserver/mapogcsld.c:3270
#4  0x00007ffff7a08696 in msSLDParseTextParams (psRoot=0x5555557b30c0, psLayer=0x5555557b3930, psClass=0x5555557b4ae0) at /home/aborghi/code/mapserver_stuff/mapserver/mapogcsld.c:3080
#5  0x00007ffff7a06895 in msSLDParseTextSymbolizer (psRoot=0x5555557b30c0, psLayer=0x5555557b3930, bOtherSymboliser=1, pszUserStyleName=0x0) at /home/aborghi/code/mapserver_stuff/mapserver/mapogcsld.c:2544
#6  0x00007ffff7a02203 in msSLDParseRule (psRoot=0x5555557b2970, psLayer=0x5555557b3930, pszUserStyleName=0x0) at /home/aborghi/code/mapserver_stuff/mapserver/mapogcsld.c:1043
#7  0x00007ffff7a01830 in msSLDParseUserStyle (psUserStyle=0x5555557b2910, psLayer=0x5555557b3930) at /home/aborghi/code/mapserver_stuff/mapserver/mapogcsld.c:790
#8  0x00007ffff7a01add in msSLDParseNamedLayer (psRoot=0x5555557b2880, psLayer=0x5555557b3930) at /home/aborghi/code/mapserver_stuff/mapserver/mapogcsld.c:861
#9  0x00007ffff7a00e2f in msSLDParseSLD (map=0x5555557a7db0, psSLDXML=0x5555557a4f90 ""<StyledLayerDescriptor version=\""1.1.0\""><NamedLayer><Name>lpoint</Name><UserStyle><FeatureTypeStyle><Rule><PointSymbolizer><Graphic><Mark><WellKnownName>star</WellKnownName><Stroke><SvgParameter name=\""stroke\"">#FF0000</SvgParameter><SvgParameter name=\""stroke-opacity\"">1</SvgParameter><SvgParameter name=\""stroke-width\"">1</SvgParameter></Stroke><Fill><SvgParameter name=\""fill\"">#0000FF</SvgParameter><SvgParameter name=\""fill-opacity\"">0.1</SvgParameter></Fill></Mark><Size>20</Size><Rotation>180</Rotation><Displacement><DisplacementX>2</DisplacementX><DisplacementY>2</DisplacementY></Displacement><Opacity>0.5</Opacity></Graphic></PointSymbolizer><TextSymbolizer><Label><PropertyName>name</PropertyName></Label><Font><SvgParameter name=\""font-family\"">vera</SvgParameter><SvgParameter name=\""font-weight\"">bold</SvgParameter><SvgParameter name=\""font-size\""><PropertyName>s12</PropertyName></SvgParameter></Font><Fill><SvgParameter name=\""fill\"">#FFFFFF</SvgParameter></Fill><LabelPlacement><PointPlacement><Displacement><DisplacementX>2</DisplacementX><DisplacementY>20</DisplacementY></Displacement><AnchorPoint><AnchorPointX>0.5</AnchorPointX><AnchorPointY>0.5</AnchorPointY></AnchorPoint><Rotation>15</Rotation></PointPlacement></LabelPlacement><Halo><Radius>2</Radius><Fill><SvgParameter name=\""fill\"">#00FF00</SvgParameter></Fill></Halo></TextSymbolizer></Rule></FeatureTypeStyle></UserStyle></NamedLayer></StyledLayerDescriptor>"", pnLayers=0x7fffffffd458) at /home/aborghi/code/mapserver_stuff/mapserver/mapogcsld.c:567
#10 0x00007ffff79ff9ee in msSLDApplySLD (map=0x5555557a7db0, psSLDXML=0x5555557a4f90 ""<StyledLayerDescriptor version=\""1.1.0\""><NamedLayer><Name>lpoint</Name><UserStyle><FeatureTypeStyle><Rule><PointSymbolizer><Graphic><Mark><WellKnownName>star</WellKnownName><Stroke><SvgParameter name=\""stroke\"">#FF0000</SvgParameter><SvgParameter name=\""stroke-opacity\"">1</SvgParameter><SvgParameter name=\""stroke-width\"">1</SvgParameter></Stroke><Fill><SvgParameter name=\""fill\"">#0000FF</SvgParameter><SvgParameter name=\""fill-opacity\"">0.1</SvgParameter></Fill></Mark><Size>20</Size><Rotation>180</Rotation><Displacement><DisplacementX>2</DisplacementX><DisplacementY>2</DisplacementY></Displacement><Opacity>0.5</Opacity></Graphic></PointSymbolizer><TextSymbolizer><Label><PropertyName>name</PropertyName></Label><Font><SvgParameter name=\""font-family\"">vera</SvgParameter><SvgParameter name=\""font-weight\"">bold</SvgParameter><SvgParameter name=\""font-size\""><PropertyName>s12</PropertyName></SvgParameter></Font><Fill><SvgParameter name=\""fill\"">#FFFFFF</SvgParameter></Fill><LabelPlacement><PointPlacement><Displacement><DisplacementX>2</DisplacementX><DisplacementY>20</DisplacementY></Displacement><AnchorPoint><AnchorPointX>0.5</AnchorPointX><AnchorPointY>0.5</AnchorPointY></AnchorPoint><Rotation>15</Rotation></PointPlacement></LabelPlacement><Halo><Radius>2</Radius><Fill><SvgParameter name=\""fill\"">#00FF00</SvgParameter></Fill></Halo></TextSymbolizer></Rule></FeatureTypeStyle></UserStyle></NamedLayer></StyledLayerDescriptor>"", iLayer=-1, pszStyleLayerName=0x0, ppszLayerNames=0x7fffffffd7d8) at /home/aborghi/code/mapserver_stuff/mapserver/mapogcsld.c:183
#11 0x00007ffff78a366a in msWMSLoadGetMapParams(mapObj*, int, char**, char**, int, char const*, char const*, owsRequestObj*) (map=0x5555557a7db0, nVersion=66304, names=0x5555557a0460, values=0x5555557a0790, numentries=11, wms_exception_format=0x0, wms_request=0x5555557a24d0 ""GetMap"", ows_request=0x7fffffffdc60) at /home/aborghi/code/mapserver_stuff/mapserver/mapwms.cpp:1495
#12 0x00007ffff78b39fb in msWMSDispatch(mapObj*, cgiRequestObj*, owsRequestObj*, int) (map=0x5555557a7db0, req=0x5555557a0420, ows_request=0x7fffffffdc60, force_wms_mode=0) at /home/aborghi/code/mapserver_stuff/mapserver/mapwms.cpp:5019
#13 0x00007ffff78cf7ce in msOWSDispatch (map=0x5555557a7db0, request=0x5555557a0420, ows_mode=-1) at /home/aborghi/code/mapserver_stuff/mapserver/mapows.c:287
#14 0x00007ffff78ddd86 in msCGIDispatchRequest (mapserv=0x5555557a01b0) at /home/aborghi/code/mapserver_stuff/mapserver/mapservutil.c:1708
#15 0x0000555555555717 in main (argc=3, argv=0x7fffffffde58) at /home/aborghi/code/mapserver_stuff/mapserver/mapserv.c:283",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/geographika,11,https://github.com/MapServer/MapServer/pull/6052#issuecomment-615448330,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.","For info the Windows/Appveyor build is failing due to an unrelated missing GDAL dependency - see #6054. The Travis build is not affected by this issue.
msautotests are not currently run on Appveyor.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/jmckenna,12,https://github.com/MapServer/MapServer/pull/6052#issuecomment-616778217,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.",@jbo-ads can you take a look at the above comment from @danduk82 specifically the question of MS_LABEL_BINDING_LENGTH ?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/jbo-ads,13,https://github.com/MapServer/MapServer/pull/6052#issuecomment-616976393,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.","@jmckenna, @danduk82: yes I'll work on this. Thank you for the notification.",True,{'THUMBS_UP': ['https://github.com/danduk82']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/jbo-ads,14,https://github.com/MapServer/MapServer/pull/6052#issuecomment-617407118,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.","I found the error cause, a stupid oversight while improving SLD on labels. I filed an issue (#6057). I'll push a fix within minutes.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/jbo-ads,15,https://github.com/MapServer/MapServer/pull/6052#issuecomment-617416661,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.","I found the error cause, a stupid oversight while improving SLD on labels. I filed an issue (#6057). I'll push a fix within minutes.

Done: This is PR danduk82#2",True,"{'HEART': ['https://github.com/yjacolin'], 'THUMBS_UP': ['https://github.com/danduk82']}"
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/jmckenna,16,https://github.com/MapServer/MapServer/pull/6052#issuecomment-617422112,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.",thanks @jbo-ads,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/danduk82,17,https://github.com/MapServer/MapServer/pull/6052#issuecomment-617597177,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.",@jbo-ads  thanks!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/danduk82,18,https://github.com/MapServer/MapServer/pull/6052#issuecomment-617681161,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.","@jmckenna  Can you confirm that msautotest is working correctly?
I still have a lot of binary differences between images on my laptop, but the ones that I have checked seem visually ok.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/jbo-ads,19,https://github.com/MapServer/MapServer/pull/6052#issuecomment-617694860,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.","@danduk82 As far as I know, Travis and Appveyor checks include msautotests and both are successful. Binary differences on your side may come from slightly different environments. Do you use Vagrant to run msautotests locally?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/danduk82,20,https://github.com/MapServer/MapServer/pull/6052#issuecomment-617740085,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.",@jbo-ads I am running the tests locally. So this might be the issue.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/danduk82,21,https://github.com/MapServer/MapServer/pull/6052#issuecomment-618442900,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.","@jmckenna , I was wondering if you think that this PR is now in a green state for merging? Or shall I do something more?",True,{'THUMBS_UP': ['https://github.com/asaunier']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/jmckenna,22,https://github.com/MapServer/MapServer/pull/6052#issuecomment-618468398,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.","@danduk82 thanks, this was on my list today, merging now...  Thank you again for all of this effort!",True,"{'HOORAY': ['https://github.com/asaunier', 'https://github.com/geographika']}"
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/danduk82,23,https://github.com/MapServer/MapServer/pull/6052#issuecomment-618892500,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.","@jmckenna  thanks a lot. It was very interesting to dive into mapserver, and I hope I will have more occasions to contribute in the future.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/jmckenna,24,https://github.com/MapServer/MapServer/pull/6052#issuecomment-619042523,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.",@danduk82 the automatic creation of a PR for branch-7-6 for these changes failed for some reason; can you please generate one today for these changes?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/danduk82,25,https://github.com/MapServer/MapServer/pull/6052#issuecomment-619077045,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.","@jmckenna , if I try to rebase my branch on 7.6 I get a lot of things that want to pass into:
pick 87c1b611 Prepare classObj styleObj & labelObj to finer grain SIZEUNITS settings
pick 96c3429a Add preparation step for styleObj in labelObj
pick ede4953c Implement SIZEUNITS inheritance: layer->class->style/label
pick 44a431e6 Add SLD UoM on Polygon, Line and Point Symbolizers with tests on Polygon and Line
pick 9a1a48ca Add SLD UoM test on PointSymbolizer
pick c505ea22 SLD: Improve WMS GetStyles request (#5832)
pick e38ec98d SLD: Fix <PointSymbolizer> rendering on polygon (#6020)
pick 280fcc89 mapogcsld.c: fix compiler warning
pick 62efb0e4 Disable sld_reference.png test as it currently breaks (see https://travis-ci.org/github/mapserver/mapserver/builds/669707944)
pick b1052213 Fix reference.map so that sld_reference.png doesn't break anymore
pick fabeff48 Minimal C++ification of mapwms.c, mapwcs.c, mapwcs11.c, mapwcs20.c, mapwfs.c and mapwfs11.c
pick 83f1d5d0 mapwcs20.cpp: fix compiler warnings
pick 5b0942e7 WMS/WFS/WCS: support multiple metadataurl/metadatalink in GetCapabilities output
pick 5a50cc6e Fix redefined strncasecmp() signature
pick f1c28417 mapwcs20.cpp: remove unused variable
pick f463e926 Travis CI: use -Werror
pick bec3033e SLD Improve <Label> conformance with OGC standard (#6017)
pick 098eb92f mapwms: C++ify a bit
pick b122a4bd initial backport config
pick 48c8c7f0 cpp'ify mappostigs
pick a99907fb Use GDAL large file API (UTF-8) compatible in a number of places
pick 19a96e92 mapwms: more C++ification
pick 6db0a3e3 More C++ification of mapogcfiltercommon
pick 39ba27d6 WMS GetMap/GetFeatureInfo: make STYLES parameter mandatory as per WMS spec (fixes #6012)
pick b9396354 add attribute support for ALIGN and OFFSET in LABEL
pick 4bbc38fe add msautotests for [attribute] in offset and align
pick 3d4452fa Fix Segfault

I will create a new branch based on 7.6 which includes only the 3 last commits and see how it behaves.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/danduk82,26,https://github.com/MapServer/MapServer/pull/6052#issuecomment-619083379,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.","and from what I see, there is a conflict in the SLD module because of the fix of the segfault.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6052,2020-04-17T12:41:42Z,2020-04-23T15:34:44Z,2020-04-24T15:47:40Z,MERGED,True,166,55,11,https://github.com/danduk82,add attribute support for ALIGN and OFFSET in LABEL,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6052,https://github.com/danduk82,27,https://github.com/MapServer/MapServer/pull/6052#issuecomment-619091670,"This PR adds support of an attribute for the LABEL OFFSET and ALIGN properties, similarly to what is already done for POSITION.
This means that the following is now possible:
ALIGN [attribute]
OFFSET [attr_x] [attr_y]

I append an archive file example.tar.gz  which contains an example SHP file and corresponding mapfile for testing.
For ALIGN, the column in the date must be of type STRING and use one of the following : ""center"" | ""left"" | ""right"" as the usual parameters.
For OFFSET, it should be INTEGERS (will be cast to (int) anyway).
One can also use OFFSET 32 [attr] of course (but I don't see the interest in doing so...)
with the example provided, it is possible to generate something like this:

NB: my IDE has removed a lot of trailing whitespaces from the files that I have edited (mapserver.h, mapfile.c, maputil.c). If this is a problem I can rework my PR to leave these trailing whitespaces.",@jmckenna  I suggest that we keep further discussion in the new PR: #6059,True,{'THUMBS_UP': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6053,2020-04-17T14:31:55Z,2020-04-20T19:17:40Z,2020-04-20T19:17:40Z,MERGED,True,11,0,1,https://github.com/MapServer-backport-bot,[Backport branch-7-6] getRotation should be exposed to mapscript (#6048),1,[],https://github.com/mapserver/mapserver/pull/6053,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6053,Backport e738ac0 from #6051,Backport e738ac0 from #6051,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6055,2020-04-17T20:23:20Z,2020-04-18T10:28:40Z,2020-04-18T10:28:41Z,MERGED,True,2,0,1,https://github.com/geographika,Run mapserv.exe in Appveyor,5,[],https://github.com/mapserver/mapserver/pull/6055,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6055,This pull request runs the mapserv.exe to check it has been built successfully - otherwise the CI confusingly reports issues with Python MapScript (see #6054).,This pull request runs the mapserv.exe to check it has been built successfully - otherwise the CI confusingly reports issues with Python MapScript (see #6054).,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6059,2020-04-24T15:41:43Z,2020-04-24T17:48:54Z,2020-04-27T08:56:51Z,MERGED,True,166,55,11,https://github.com/danduk82,Add attr align offset on 7 6,3,[],https://github.com/mapserver/mapserver/pull/6059,https://github.com/danduk82,1,https://github.com/MapServer/MapServer/pull/6059,"this PR adds the support of ALIGN and OFFSET attributes in backport branch 7.6.
As requested in #6052","this PR adds the support of ALIGN and OFFSET attributes in backport branch 7.6.
As requested in #6052",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6059,2020-04-24T15:41:43Z,2020-04-24T17:48:54Z,2020-04-27T08:56:51Z,MERGED,True,166,55,11,https://github.com/danduk82,Add attr align offset on 7 6,3,[],https://github.com/mapserver/mapserver/pull/6059,https://github.com/danduk82,2,https://github.com/MapServer/MapServer/pull/6059#issuecomment-619089825,"this PR adds the support of ALIGN and OFFSET attributes in backport branch 7.6.
As requested in #6052","@jmckenna  and @jbo-ads , as the other branch was impossible to merge, and that there are a lot of changes in mapocgsld.c between master and 7.6, I had to create a dedicated commit for the segfault again, based on the status on 7.6.
The other 2 commits are cherry-picked.
Please check that the status of SLD is what it is supposed to be in 7.6.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6059,2020-04-24T15:41:43Z,2020-04-24T17:48:54Z,2020-04-27T08:56:51Z,MERGED,True,166,55,11,https://github.com/danduk82,Add attr align offset on 7 6,3,[],https://github.com/mapserver/mapserver/pull/6059,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6059#issuecomment-619157527,"this PR adds the support of ALIGN and OFFSET attributes in backport branch 7.6.
As requested in #6052",thanks @jbo-ads and @danduk82,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6061,2020-04-29T15:29:30Z,2020-05-04T18:46:57Z,2020-05-07T13:31:44Z,MERGED,True,24,4,1,https://github.com/umeier,Wms essential,2,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6061,https://github.com/umeier,1,https://github.com/MapServer/MapServer/pull/6061,Pull-request re-done to master as requested by @jmckenna,Pull-request re-done to master as requested by @jmckenna,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6061,2020-04-29T15:29:30Z,2020-05-04T18:46:57Z,2020-05-07T13:31:44Z,MERGED,True,24,4,1,https://github.com/umeier,Wms essential,2,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6061,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6061#issuecomment-623638915,Pull-request re-done to master as requested by @jmckenna,thanks @umeier !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6061,2020-04-29T15:29:30Z,2020-05-04T18:46:57Z,2020-05-07T13:31:44Z,MERGED,True,24,4,1,https://github.com/umeier,Wms essential,2,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6061,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6061#issuecomment-623737264,Pull-request re-done to master as requested by @jmckenna,"@umeier I'm testing this with the following mapfile, which makes a call to a WMS service that will fail, but the map is still drawn and no error is thrown at the commandline.  Here is the test mapfile (if you change the wms_format to ""image/png"" it will work:
MAP
  NAME ""essential-test""
  STATUS ON
  SIZE 400 300
  EXTENT -180 -90 180 90
  UNITS DD
  IMAGECOLOR 255 255 255

  LAYER
   NAME ""country_bounds""
    TYPE RASTER
    STATUS ON
    CONNECTION ""https://demo.mapserver.org/cgi-bin/wms?""
    CONNECTIONTYPE WMS
    METADATA
      ""wms_srs""             ""EPSG:4326""
      ""wms_name""            ""country_bounds""
      ""wms_server_version""  ""1.1.1""
      ""wms_format""          ""image/gif""
      ""wms_essential""       ""1""
    END
  END

END

Here is my command:
shp2img -m wms-client-essential.map -o ttt.png -map_debug 3

and here is the response:
msDrawMap(): rendering using outputformat named png (AGG/PNG).
msDrawMap(): WMS/WFS set-up and query, 0.704s
msDrawRasterLayerLow(country_bounds): entering.
msDrawMap(): Layer 0 (country_bounds), 0.022s
msDrawMap(): Drawing Label Cache, 0.000s
msDrawMap() total time: 0.727s
msSaveImage(ttt.png) total time: 0.015s",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6061,2020-04-29T15:29:30Z,2020-05-04T18:46:57Z,2020-05-07T13:31:44Z,MERGED,True,24,4,1,https://github.com/umeier,Wms essential,2,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6061,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/6061#issuecomment-623743037,Pull-request re-done to master as requested by @jmckenna,"Ok, so it seems ""wms_essential"" could be a little misleading, as if you pass incorrect layer name (""ttt"") or image format (""image/gif"") no error is thrown, but if you pass a broken connection url it will properly return an error.  I will add this as a note to the docs.
for example, this incorrect url properly fails with wms_essential:
CONNECTION ""https://demo.mapserver.org/cgi-bin/wms2?""",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6061,2020-04-29T15:29:30Z,2020-05-04T18:46:57Z,2020-05-07T13:31:44Z,MERGED,True,24,4,1,https://github.com/umeier,Wms essential,2,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6061,https://github.com/rouault,5,https://github.com/MapServer/MapServer/pull/6061#issuecomment-623750685,Pull-request re-done to master as requested by @jmckenna,"as if you pass incorrect layer name (""ttt"") or image format (""image/gif"") no error is thrown

Running with -all_debug 5 shows the following request:
HTTP request: id=0, https://demo.mapserver.org/cgi-bin/wms?LAYERS=country_bounds&REQUEST=GetMap&SERVICE=WMS&FORMAT=image/gif&STYLES=&HEIGHT=300&VERSION=1.1.1&SRS=EPSG:4326&WIDTH=400&BBOX=-180.451127819549,-135.338345864662,180.451127819549,135.338345864662&TRANSPARENT=TRUE&EXCEPTIONS=application/vnd.ogc.se_inimage

The important thing is the EXCEPTIONS=application/vnd.ogc.se_inimage . I guess that in ""essential"" mode this shouldn't be added. Manually adding ""wms_exceptions_format"" ""application/vnd.ogc.se_xml"" fixes the issue, but should probably be the default in essential mode (or do not emit EXCEPTIONS at all since XML is the default)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6061,2020-04-29T15:29:30Z,2020-05-04T18:46:57Z,2020-05-07T13:31:44Z,MERGED,True,24,4,1,https://github.com/umeier,Wms essential,2,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6061,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/6061#issuecomment-625246244,Pull-request re-done to master as requested by @jmckenna,"The important thing is the EXCEPTIONS=application/vnd.ogc.se_inimage . I guess that in ""essential"" mode this shouldn't be added.

A working response that returns a valid map image will also include EXCEPTIONS=application/vnd.ogc.se_inimage, for example here is the same mapfile with the correct CONNECTION and ""wms_format"" which returns the proper map image yet does contain the EXCEPTIONS string :
HTTP request: id=0, https://demo.mapserver.org/cgi-bin/wms?LAYERS=country_bounds&REQUEST=GetMap&SERVICE=WMS&FORMAT=image/png&STYLES=&HEIGHT=300&VERSION=1.1.1&SRS=EPSG:4326&WIDTH=400&BBOX=-180.451127819549,-135.338345864662,180.451127819549,135.338345864662&TRANSPARENT=TRUE&EXCEPTIONS=application/vnd.ogc.se_inimage",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6061,2020-04-29T15:29:30Z,2020-05-04T18:46:57Z,2020-05-07T13:31:44Z,MERGED,True,24,4,1,https://github.com/umeier,Wms essential,2,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6061,https://github.com/jmckenna,7,https://github.com/MapServer/MapServer/pull/6061#issuecomment-625249186,Pull-request re-done to master as requested by @jmckenna,Ok I misunderstood @rouault sorry about that.  I see what you mean.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6062,2020-04-29T16:18:46Z,2020-04-29T17:04:29Z,2020-04-29T17:04:29Z,MERGED,True,5,4,2,https://github.com/rouault,mappostgis: restore case insensitive comparisons for 'using unique' in DATA,2,[],https://github.com/mapserver/mapserver/pull/6062,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6062,Fixes #6060,Fixes #6060,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6063,2020-04-29T16:23:06Z,2020-04-29T17:04:38Z,2020-04-29T17:04:38Z,MERGED,True,5,4,2,https://github.com/rouault,[Backport 7.6] mappostgis: restore case insensitive comparisons for 'using unique' in DATA,2,[],https://github.com/mapserver/mapserver/pull/6063,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6063,"Fixes #6060
Backport of #6062","Fixes #6060
Backport of #6062",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6064,2020-05-04T18:47:25Z,2020-05-04T19:32:24Z,2020-05-04T19:32:24Z,MERGED,True,24,4,1,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Wms essential,1,[],https://github.com/mapserver/mapserver/pull/6064,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6064,Backport abbd44c from #6061,Backport abbd44c from #6061,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6065,2020-05-07T16:11:27Z,2020-05-08T11:31:33Z,2020-05-08T11:31:33Z,MERGED,True,38,10,1,https://github.com/jmckenna,for essential WMS layers set EXCEPTIONS to XML by default,3,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6065,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6065,"related to #6061
sets EXCEPTIONS to XML for essential WMS layers, specifically for the GetMap request","related to #6061
sets EXCEPTIONS to XML for essential WMS layers, specifically for the GetMap request",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6066,2020-05-08T11:32:00Z,2020-05-08T12:09:45Z,2020-05-08T12:09:45Z,MERGED,True,38,10,1,https://github.com/MapServer-backport-bot,[Backport branch-7-6] for essential WMS layers set EXCEPTIONS to XML by default,1,[],https://github.com/mapserver/mapserver/pull/6066,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6066,Backport 012dc40 from #6065,Backport 012dc40 from #6065,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6069,2020-05-16T22:08:27Z,2020-05-17T10:46:17Z,2020-05-17T10:46:17Z,MERGED,True,12,1,1,https://github.com/geographika,Remove submodule name from mapscript package,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6069,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6069,"This pull request removes the submodule name from the class names.
Currently all classes are imported into the package root namespace in __init__.py.
However the class module names are still set to the subpackage. This change will make them appear in the root, based on the answer at https://stackoverflow.com/questions/1808522/masquerading-real-module-of-a-class/
Before:
>>> import mapscript
>>> mapscript.classObj.__module__
'mapscript.mapscript'
After:
>>> mapscript.classObj.__module__
'mapscript'
For Python MapScript users nothing will change. The main benefit is for the ongoing autodoc work with Sphinx.","This pull request removes the submodule name from the class names.
Currently all classes are imported into the package root namespace in __init__.py.
However the class module names are still set to the subpackage. This change will make them appear in the root, based on the answer at https://stackoverflow.com/questions/1808522/masquerading-real-module-of-a-class/
Before:
>>> import mapscript
>>> mapscript.classObj.__module__
'mapscript.mapscript'
After:
>>> mapscript.classObj.__module__
'mapscript'
For Python MapScript users nothing will change. The main benefit is for the ongoing autodoc work with Sphinx.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6069,2020-05-16T22:08:27Z,2020-05-17T10:46:17Z,2020-05-17T10:46:17Z,MERGED,True,12,1,1,https://github.com/geographika,Remove submodule name from mapscript package,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6069,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6069#issuecomment-629777431,"This pull request removes the submodule name from the class names.
Currently all classes are imported into the package root namespace in __init__.py.
However the class module names are still set to the subpackage. This change will make them appear in the root, based on the answer at https://stackoverflow.com/questions/1808522/masquerading-real-module-of-a-class/
Before:
>>> import mapscript
>>> mapscript.classObj.__module__
'mapscript.mapscript'
After:
>>> mapscript.classObj.__module__
'mapscript'
For Python MapScript users nothing will change. The main benefit is for the ongoing autodoc work with Sphinx.",thanks @geographika !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6070,2020-05-17T10:46:42Z,2020-05-17T11:26:10Z,2020-05-17T11:26:10Z,MERGED,True,12,1,1,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Remove submodule name from mapscript package,1,[],https://github.com/mapserver/mapserver/pull/6070,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6070,Backport 1e6ba99 from #6069,Backport 1e6ba99 from #6069,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6071,2020-05-19T21:57:46Z,2020-05-22T10:56:24Z,2020-05-24T20:57:33Z,MERGED,True,53,58,3,https://github.com/geographika,Add classObj property strings and update MapScript docstrings,6,[],https://github.com/mapserver/mapserver/pull/6071,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6071,"This pull request builds on MapServer/MapServer-documentation#327 and allows direct links from the planned generated MapScript docs to Mapfile keyword syntax.
It also adds property docstrings to the classObj in mapserver.h
Initially I added these as Python only docstrings here, but using the SWIG feature and adding to where classObj is defined allows types to be automatically generated for each property.
Keeping the docstrings and property declarations together also has more chance of them being maintained.","This pull request builds on MapServer/MapServer-documentation#327 and allows direct links from the planned generated MapScript docs to Mapfile keyword syntax.
It also adds property docstrings to the classObj in mapserver.h
Initially I added these as Python only docstrings here, but using the SWIG feature and adding to where classObj is defined allows types to be automatically generated for each property.
Keeping the docstrings and property declarations together also has more chance of them being maintained.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6071,2020-05-19T21:57:46Z,2020-05-22T10:56:24Z,2020-05-24T20:57:33Z,MERGED,True,53,58,3,https://github.com/geographika,Add classObj property strings and update MapScript docstrings,6,[],https://github.com/mapserver/mapserver/pull/6071,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6071#issuecomment-632631125,"This pull request builds on MapServer/MapServer-documentation#327 and allows direct links from the planned generated MapScript docs to Mapfile keyword syntax.
It also adds property docstrings to the classObj in mapserver.h
Initially I added these as Python only docstrings here, but using the SWIG feature and adding to where classObj is defined allows types to be automatically generated for each property.
Keeping the docstrings and property declarations together also has more chance of them being maintained.",thanks @geographika ! Hope it was ok to merge now :)       Enjoy your weekend!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6072,2020-05-22T10:56:48Z,2020-05-22T14:09:15Z,2020-05-22T14:09:15Z,CLOSED,False,60,31,3,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Add classObj property strings and update MapScript docstrings,1,[],https://github.com/mapserver/mapserver/pull/6072,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6072,Backport deaacf4 from #6071,Backport deaacf4 from #6071,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6072,2020-05-22T10:56:48Z,2020-05-22T14:09:15Z,2020-05-22T14:09:15Z,CLOSED,False,60,31,3,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Add classObj property strings and update MapScript docstrings,1,[],https://github.com/mapserver/mapserver/pull/6072,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6072#issuecomment-632647553,Backport deaacf4 from #6071,@geographika am I correct that these changes cannot be applied to the branch-7-6 branch?  If yes I will close this.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6072,2020-05-22T10:56:48Z,2020-05-22T14:09:15Z,2020-05-22T14:09:15Z,CLOSED,False,60,31,3,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Add classObj property strings and update MapScript docstrings,1,[],https://github.com/mapserver/mapserver/pull/6072,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/6072#issuecomment-632706420,Backport deaacf4 from #6071,@jmckenna - yes best not to backport as there are edits to mapserver.h which would cause conflicts. Hopefully MapScript API docs will be ready for v8 of MapServer..!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6072,2020-05-22T10:56:48Z,2020-05-22T14:09:15Z,2020-05-22T14:09:15Z,CLOSED,False,60,31,3,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Add classObj property strings and update MapScript docstrings,1,[],https://github.com/mapserver/mapserver/pull/6072,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/6072#issuecomment-632712527,Backport deaacf4 from #6071,"roger, thanks @geographika",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6073,2020-05-23T07:53:44Z,2020-05-23T22:29:39Z,2020-05-24T09:35:03Z,MERGED,True,3,2,1,https://github.com/geographika,Deploy MapScript to PyPI for any release tag,2,[],https://github.com/mapserver/mapserver/pull/6073,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6073,"This automates deploying to PyPI for any release tag (previously the PS script had assumed this would be on a master branch, and would have deployed to the test PyPI site).
Release tags are assumed to be in the format ""rel-7-6-0"" which should exclude any release candidates and betas from being deployed.
(""rel-7-6-0"" -cSplit ""-"").Count -eq 4
(""rel-7-6-0-rc4"" -cSplit ""-"").Count -eq 5","This automates deploying to PyPI for any release tag (previously the PS script had assumed this would be on a master branch, and would have deployed to the test PyPI site).
Release tags are assumed to be in the format ""rel-7-6-0"" which should exclude any release candidates and betas from being deployed.
(""rel-7-6-0"" -cSplit ""-"").Count -eq 4
(""rel-7-6-0-rc4"" -cSplit ""-"").Count -eq 5",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6073,2020-05-23T07:53:44Z,2020-05-23T22:29:39Z,2020-05-24T09:35:03Z,MERGED,True,3,2,1,https://github.com/geographika,Deploy MapScript to PyPI for any release tag,2,[],https://github.com/mapserver/mapserver/pull/6073,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6073#issuecomment-633148818,"This automates deploying to PyPI for any release tag (previously the PS script had assumed this would be on a master branch, and would have deployed to the test PyPI site).
Release tags are assumed to be in the format ""rel-7-6-0"" which should exclude any release candidates and betas from being deployed.
(""rel-7-6-0"" -cSplit ""-"").Count -eq 4
(""rel-7-6-0-rc4"" -cSplit ""-"").Count -eq 5",thanks @geographika,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6074,2020-05-23T21:26:13Z,2020-05-23T22:30:05Z,2020-05-24T09:47:24Z,MERGED,True,17,5,2,https://github.com/geographika,SWIG Documentation for clusterObj,1,[],https://github.com/mapserver/mapserver/pull/6074,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6074,Minor fixes to classObj docs and add clusterObj,Minor fixes to classObj docs and add clusterObj,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6074,2020-05-23T21:26:13Z,2020-05-23T22:30:05Z,2020-05-24T09:47:24Z,MERGED,True,17,5,2,https://github.com/geographika,SWIG Documentation for clusterObj,1,[],https://github.com/mapserver/mapserver/pull/6074,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6074#issuecomment-633148847,Minor fixes to classObj docs and add clusterObj,thanks @geographika,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6075,2020-05-24T20:24:55Z,2020-05-24T20:53:03Z,2020-05-24T20:53:10Z,MERGED,True,18,12,3,https://github.com/geographika,SWIG Documentation for colorObj,1,[],https://github.com/mapserver/mapserver/pull/6075,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6075,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6075,2020-05-24T20:24:55Z,2020-05-24T20:53:03Z,2020-05-24T20:53:10Z,MERGED,True,18,12,3,https://github.com/geographika,SWIG Documentation for colorObj,1,[],https://github.com/mapserver/mapserver/pull/6075,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6075#issuecomment-633297777,,thanks @geographika,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6078,2020-05-27T16:49:05Z,2020-05-28T10:35:07Z,2020-05-29T13:58:45Z,MERGED,True,33,38,1,https://github.com/szekerest,msMSSQL2008LayerGetExtent doesn't consider NATIVE_FILTER or translated filter (#6076),1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6078,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/6078,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6078,2020-05-27T16:49:05Z,2020-05-28T10:35:07Z,2020-05-29T13:58:45Z,MERGED,True,33,38,1,https://github.com/szekerest,msMSSQL2008LayerGetExtent doesn't consider NATIVE_FILTER or translated filter (#6076),1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6078,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6078#issuecomment-635259947,,thanks @szekerest !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6080,2020-05-28T08:35:03Z,2020-05-28T10:34:18Z,2020-05-28T10:34:18Z,MERGED,True,1,1,1,https://github.com/jbo-ads,Fix wrong result on  '404 Not Found' symbol URL,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6080,https://github.com/jbo-ads,1,https://github.com/MapServer/MapServer/pull/6080,This PR proposes a fix to issue #6079.,This PR proposes a fix to issue #6079.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6080,2020-05-28T08:35:03Z,2020-05-28T10:34:18Z,2020-05-28T10:34:18Z,MERGED,True,1,1,1,https://github.com/jbo-ads,Fix wrong result on  '404 Not Found' symbol URL,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6080,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6080#issuecomment-635259252,This PR proposes a fix to issue #6079.,Very useful change!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6081,2020-05-28T10:34:47Z,2020-05-28T12:06:32Z,2020-05-28T12:06:32Z,MERGED,True,1,1,1,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Fix wrong result on  '404 Not Found' symbol URL,1,[],https://github.com/mapserver/mapserver/pull/6081,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6081,Backport 61bc345 from #6080,Backport 61bc345 from #6080,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6082,2020-05-28T10:35:31Z,2020-05-28T13:13:03Z,2020-05-28T13:13:03Z,MERGED,True,33,38,1,https://github.com/MapServer-backport-bot,[Backport branch-7-6] msMSSQL2008LayerGetExtent doesn't consider NATIVE_FILTER or translated filter (#6076),1,[],https://github.com/mapserver/mapserver/pull/6082,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6082,Backport a7d4ec3 from #6078,Backport a7d4ec3 from #6078,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6084,2020-06-02T11:17:29Z,2020-06-04T14:59:12Z,2020-06-04T14:59:13Z,MERGED,True,115,3,7,https://github.com/jbo-ads,Enable relative URL on SLD ExternalGraphic,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6084,https://github.com/jbo-ads,1,https://github.com/MapServer/MapServer/pull/6084,"This pull request addresses issue #6083.
Three cases are handled:

Symbol URL is absolute: http://example.com/path/to/assets/foo.svg.
Symbol URL is relative to SLD URL: http://example.com/path/to/sld.xml + assets/foo.svg
Symbol URL is relative to root of SLD server: http://example.com/path/to/sld.xml + /path/to/assets/foo.svg

When SLD is passed as SLD_BODY inline document, symbol URL is considered absolute.","This pull request addresses issue #6083.
Three cases are handled:

Symbol URL is absolute: http://example.com/path/to/assets/foo.svg.
Symbol URL is relative to SLD URL: http://example.com/path/to/sld.xml + assets/foo.svg
Symbol URL is relative to root of SLD server: http://example.com/path/to/sld.xml + /path/to/assets/foo.svg

When SLD is passed as SLD_BODY inline document, symbol URL is considered absolute.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6084,2020-06-02T11:17:29Z,2020-06-04T14:59:12Z,2020-06-04T14:59:13Z,MERGED,True,115,3,7,https://github.com/jbo-ads,Enable relative URL on SLD ExternalGraphic,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6084,https://github.com/jratike80,2,https://github.com/MapServer/MapServer/pull/6084#issuecomment-637476536,"This pull request addresses issue #6083.
Three cases are handled:

Symbol URL is absolute: http://example.com/path/to/assets/foo.svg.
Symbol URL is relative to SLD URL: http://example.com/path/to/sld.xml + assets/foo.svg
Symbol URL is relative to root of SLD server: http://example.com/path/to/sld.xml + /path/to/assets/foo.svg

When SLD is passed as SLD_BODY inline document, symbol URL is considered absolute.",Are there any limits in the relative path or is it possible to follow the path to root and anywhere?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6084,2020-06-02T11:17:29Z,2020-06-04T14:59:12Z,2020-06-04T14:59:13Z,MERGED,True,115,3,7,https://github.com/jbo-ads,Enable relative URL on SLD ExternalGraphic,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6084,https://github.com/jbo-ads,3,https://github.com/MapServer/MapServer/pull/6084#issuecomment-637497674,"This pull request addresses issue #6083.
Three cases are handled:

Symbol URL is absolute: http://example.com/path/to/assets/foo.svg.
Symbol URL is relative to SLD URL: http://example.com/path/to/sld.xml + assets/foo.svg
Symbol URL is relative to root of SLD server: http://example.com/path/to/sld.xml + /path/to/assets/foo.svg

When SLD is passed as SLD_BODY inline document, symbol URL is considered absolute.","@jratike80 The only constraint is the one already existing about sld_external_graphic validation, see Migration guide from 6.4 to 7.0.
The validation of symbol URL against sld_external_graphic entry is done on the resulting URL.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6085,2020-06-04T08:44:41Z,2020-07-21T13:39:09Z,2020-07-21T13:39:09Z,CLOSED,False,222,69,6,https://github.com/botulf2000,Development,14,['Review required'],https://github.com/mapserver/mapserver/pull/6085,https://github.com/botulf2000,1,https://github.com/MapServer/MapServer/pull/6085,A collection of fixes done at Sokigo-GLS,A collection of fixes done at Sokigo-GLS,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6085,2020-06-04T08:44:41Z,2020-07-21T13:39:09Z,2020-07-21T13:39:09Z,CLOSED,False,222,69,6,https://github.com/botulf2000,Development,14,['Review required'],https://github.com/mapserver/mapserver/pull/6085,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6085#issuecomment-655801269,A collection of fixes done at Sokigo-GLS,This would need to be split in several pull requests for each topic,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6085,2020-06-04T08:44:41Z,2020-07-21T13:39:09Z,2020-07-21T13:39:09Z,CLOSED,False,222,69,6,https://github.com/botulf2000,Development,14,['Review required'],https://github.com/mapserver/mapserver/pull/6085,https://github.com/szekerest,3,https://github.com/MapServer/MapServer/pull/6085#issuecomment-656816119,A collection of fixes done at Sokigo-GLS,Also an assigned issue for each pull rq would be required with a brief description what we would like to achieve with the changes.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6085,2020-06-04T08:44:41Z,2020-07-21T13:39:09Z,2020-07-21T13:39:09Z,CLOSED,False,222,69,6,https://github.com/botulf2000,Development,14,['Review required'],https://github.com/mapserver/mapserver/pull/6085,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/6085#issuecomment-661867401,A collection of fixes done at Sokigo-GLS,"Closing, as these have or will be handled by separate pull requests.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6086,2020-06-04T11:03:14Z,2020-06-04T11:59:58Z,2020-06-04T12:00:47Z,MERGED,True,16,1,1,https://github.com/jbo-ads,Fix issue #5529 about GEOS error with offset on MULTILINESTRING,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6086,https://github.com/jbo-ads,1,https://github.com/MapServer/MapServer/pull/6086,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6086,2020-06-04T11:03:14Z,2020-06-04T11:59:58Z,2020-06-04T12:00:47Z,MERGED,True,16,1,1,https://github.com/jbo-ads,Fix issue #5529 about GEOS error with offset on MULTILINESTRING,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6086,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6086#issuecomment-638803891,,"@jbo-ads I also have the zip test here, will test on Windows now and report in ticket....",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6087,2020-06-04T12:00:28Z,2020-06-04T13:24:23Z,2020-06-04T13:24:23Z,MERGED,True,16,1,1,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Fix issue #5529 about GEOS error with offset on MULTILINESTRING,1,[],https://github.com/mapserver/mapserver/pull/6087,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6087,Backport 7115363 from #6086,Backport 7115363 from #6086,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6088,2020-06-04T13:38:41Z,2020-07-21T13:00:57Z,2020-07-21T13:01:18Z,MERGED,True,26,5,1,https://github.com/botulf2000,Don't use CIRCULARSTRING when fetching geography data from SQL Server.,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6088,https://github.com/botulf2000,1,https://github.com/MapServer/MapServer/pull/6088,Use CURVEPOLYGON(()) instead of CURVEPOLYGON(CIRCULARSTRING()) when fetching geography data from SQL Server. This will increase the performance.,Use CURVEPOLYGON(()) instead of CURVEPOLYGON(CIRCULARSTRING()) when fetching geography data from SQL Server. This will increase the performance.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6088,2020-06-04T13:38:41Z,2020-07-21T13:00:57Z,2020-07-21T13:01:18Z,MERGED,True,26,5,1,https://github.com/botulf2000,Don't use CIRCULARSTRING when fetching geography data from SQL Server.,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6088,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6088#issuecomment-661846626,Use CURVEPOLYGON(()) instead of CURVEPOLYGON(CIRCULARSTRING()) when fetching geography data from SQL Server. This will increase the performance.,thanks @botulf2000,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6089,2020-06-04T13:47:06Z,2021-03-09T16:39:46Z,2021-03-09T16:39:46Z,CLOSED,False,2,2,1,https://github.com/botulf2000,Fixed rounding error in WMS client,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6089,https://github.com/botulf2000,1,https://github.com/MapServer/MapServer/pull/6089,When using a tile size of 256 in Web Mercator the cascaded WMS request could be computed to a height or width of 257.,When using a tile size of 256 in Web Mercator the cascaded WMS request could be computed to a height or width of 257.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6089,2020-06-04T13:47:06Z,2021-03-09T16:39:46Z,2021-03-09T16:39:46Z,CLOSED,False,2,2,1,https://github.com/botulf2000,Fixed rounding error in WMS client,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6089,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6089#issuecomment-794138073,When using a tile size of 256 in Web Mercator the cascaded WMS request could be computed to a height or width of 257.,Rebased on top of latest main in #6252 . @wicksell @botulf2000 Anything you had in mind to put that pull request as Draft ?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6090,2020-06-04T14:59:45Z,2020-06-04T20:30:46Z,2020-06-04T20:30:46Z,MERGED,True,115,3,7,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Enable relative URL on SLD ExternalGraphic,1,[],https://github.com/mapserver/mapserver/pull/6090,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6090,Backport 963edab from #6084,Backport 963edab from #6084,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6091,2020-06-05T14:36:02Z,2020-06-05T15:02:16Z,2020-06-05T15:02:26Z,MERGED,True,57,0,3,https://github.com/rouault,WFS server: add support for <gml:Envelope> in <fes:Intersects>,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6091,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6091,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6091,2020-06-05T14:36:02Z,2020-06-05T15:02:16Z,2020-06-05T15:02:26Z,MERGED,True,57,0,3,https://github.com/rouault,WFS server: add support for <gml:Envelope> in <fes:Intersects>,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6091,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6091#issuecomment-639550777,,thanks @rouault !!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6092,2020-06-05T15:02:54Z,2020-06-05T16:41:55Z,2020-06-05T16:41:55Z,MERGED,True,57,0,3,https://github.com/MapServer-backport-bot,[Backport branch-7-6] WFS server: add support for <gml:Envelope> in <fes:Intersects>,1,[],https://github.com/mapserver/mapserver/pull/6092,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6092,Backport 611ab86 from #6091,Backport 611ab86 from #6091,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6094,2020-06-12T16:48:17Z,2020-06-12T17:58:11Z,2020-06-12T17:59:13Z,MERGED,True,336,336,4,https://github.com/tigerfoot,Fix eol of mapscript python examples to LF instead of CRLF,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6094,https://github.com/tigerfoot,1,https://github.com/MapServer/MapServer/pull/6094,"Signed-off-by: Bruno Friedmann bruno@ioda-net.ch
During packaging on openSUSE rpmlint warn about wrong eol used making script unusable under Linux. Simple fix done with sed -i 's,\r,,g' *.py
Perhaps a test where wc -l shoud be always 0 can be installed to avoid this in the future ?
/usr/bin/find mapscript//examples/ -iname "".*"" -exec /usr/bin/file {} ; | /usr/bin/grep ""CRLF"" | wc -l","Signed-off-by: Bruno Friedmann bruno@ioda-net.ch
During packaging on openSUSE rpmlint warn about wrong eol used making script unusable under Linux. Simple fix done with sed -i 's,\r,,g' *.py
Perhaps a test where wc -l shoud be always 0 can be installed to avoid this in the future ?
/usr/bin/find mapscript//examples/ -iname "".*"" -exec /usr/bin/file {} ; | /usr/bin/grep ""CRLF"" | wc -l",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6094,2020-06-12T16:48:17Z,2020-06-12T17:58:11Z,2020-06-12T17:59:13Z,MERGED,True,336,336,4,https://github.com/tigerfoot,Fix eol of mapscript python examples to LF instead of CRLF,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6094,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6094#issuecomment-643410902,"Signed-off-by: Bruno Friedmann bruno@ioda-net.ch
During packaging on openSUSE rpmlint warn about wrong eol used making script unusable under Linux. Simple fix done with sed -i 's,\r,,g' *.py
Perhaps a test where wc -l shoud be always 0 can be installed to avoid this in the future ?
/usr/bin/find mapscript//examples/ -iname "".*"" -exec /usr/bin/file {} ; | /usr/bin/grep ""CRLF"" | wc -l",thanks @tigerfoot !! (and @geographika for review!),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6095,2020-06-12T17:58:35Z,2020-06-12T19:22:15Z,2020-06-12T19:22:16Z,MERGED,True,336,336,4,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Fix eol of mapscript python examples to LF instead of CRLF,1,[],https://github.com/mapserver/mapserver/pull/6095,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6095,Backport 34c2660 from #6094,Backport 34c2660 from #6094,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6097,2020-06-17T13:21:57Z,2020-06-17T18:46:28Z,2020-06-17T18:46:28Z,MERGED,True,9,8,1,https://github.com/geographika,Fix deploy build logic and hide Python deprecation warnings,1,[],https://github.com/mapserver/mapserver/pull/6097,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6097,Fixes current issue with Appveyor builds and fixes logic on when to deploy Python Wheels to PyPI,Fixes current issue with Appveyor builds and fixes logic on when to deploy Python Wheels to PyPI,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6098,2020-06-17T20:22:36Z,2020-06-17T20:50:29Z,2021-03-18T19:31:49Z,CLOSED,False,1,1,1,https://github.com/geographika,Add const to input parameters,1,[],https://github.com/mapserver/mapserver/pull/6098,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6098,"To fix warnings - mapscriptpython_wrap.c(37348): warning C4090: '=': different 'const' qualifiers
This is causing issues when trying to build with py38 in Appveyor.","To fix warnings - mapscriptpython_wrap.c(37348): warning C4090: '=': different 'const' qualifiers
This is causing issues when trying to build with py38 in Appveyor.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6100,2020-06-22T19:05:20Z,2020-07-07T11:09:00Z,2020-07-07T11:09:00Z,MERGED,True,19,5,3,https://github.com/geographika,Add py37 MapScript build and testing,2,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6100,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6100,"This pull request builds and test Python MapScript on Python 3.7
This requires a small fix due to a chnage in the Python C-API:

The result of PyUnicode_AsUTF8AndSize() and PyUnicode_AsUTF8() is now of type const char * rather of char *. (Contributed by Serhiy Storchaka in bpo-28769.)

https://docs.python.org/3/whatsnew/3.7.html#c-api-changes
In addition, the following changes have been made to the Appveyor build:

Only two Python versions are fully built - py27-32 and py37-64. There is little reason to do a full MapServer compile for every single version of Python (with py 3.8 out and 3.9 on the way). Other Python versions will only build on a release so that bindings are automatically pushed to PyPI
pytest is run using the -m switch to ensure it is the version used in the virtual environment","This pull request builds and test Python MapScript on Python 3.7
This requires a small fix due to a chnage in the Python C-API:

The result of PyUnicode_AsUTF8AndSize() and PyUnicode_AsUTF8() is now of type const char * rather of char *. (Contributed by Serhiy Storchaka in bpo-28769.)

https://docs.python.org/3/whatsnew/3.7.html#c-api-changes
In addition, the following changes have been made to the Appveyor build:

Only two Python versions are fully built - py27-32 and py37-64. There is little reason to do a full MapServer compile for every single version of Python (with py 3.8 out and 3.9 on the way). Other Python versions will only build on a release so that bindings are automatically pushed to PyPI
pytest is run using the -m switch to ensure it is the version used in the virtual environment",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6103,2020-06-23T20:14:25Z,2020-07-09T14:27:52Z,2020-07-09T14:27:53Z,MERGED,True,7,1,1,https://github.com/geographika,Hide some SWIG Java warnings,5,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6103,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6103,"Currently the Travis build with optimisations has a 15,000 line log file: https://travis-ci.org/github/mapserver/mapserver/jobs/699304461 = lines 15357
Many of these are warnings related to the Java MapScript bindings e.g.:
/home/travis/build/mapserver/mapserver/build/mapscript/java/edu/umn/gis/mapscript/mapscriptJAVA_wrap.c:12271:19: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
This is caused by the optimisation flag:
make cmakebuild MFLAGS=""-j2"" CMAKE_C_FLAGS=""-O2...
See https://github.com/mapserver/mapserver/blob/master/ci/travis/script.sh#L30
A similar issue arose at microsoft/LightGBM#1556
See SWIG notes at http://www.swig.org/Doc4.0/Java.html#Java_compiling_dynamic

Important
If you are going to use optimisations turned on with gcc (for example -O2), ensure you also compile with -fno-strict-aliasing. The GCC optimisations have become more aggressive from gcc-4.0 onwards and will result in code that fails with strict aliasing optimisations turned on. See the C/C++ to Java typemaps section for more details.

Hiding these warnings takes 5,000 lines off the log which makes it easier to see other errors. E.g. https://travis-ci.org/github/geographika/mapserver/jobs/701402353","Currently the Travis build with optimisations has a 15,000 line log file: https://travis-ci.org/github/mapserver/mapserver/jobs/699304461 = lines 15357
Many of these are warnings related to the Java MapScript bindings e.g.:
/home/travis/build/mapserver/mapserver/build/mapscript/java/edu/umn/gis/mapscript/mapscriptJAVA_wrap.c:12271:19: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
This is caused by the optimisation flag:
make cmakebuild MFLAGS=""-j2"" CMAKE_C_FLAGS=""-O2...
See https://github.com/mapserver/mapserver/blob/master/ci/travis/script.sh#L30
A similar issue arose at microsoft/LightGBM#1556
See SWIG notes at http://www.swig.org/Doc4.0/Java.html#Java_compiling_dynamic

Important
If you are going to use optimisations turned on with gcc (for example -O2), ensure you also compile with -fno-strict-aliasing. The GCC optimisations have become more aggressive from gcc-4.0 onwards and will result in code that fails with strict aliasing optimisations turned on. See the C/C++ to Java typemaps section for more details.

Hiding these warnings takes 5,000 lines off the log which makes it easier to see other errors. E.g. https://travis-ci.org/github/geographika/mapserver/jobs/701402353",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6104,2020-06-27T13:21:34Z,2020-06-28T11:48:03Z,2020-06-28T11:48:03Z,MERGED,True,4,0,2,https://github.com/jmckenna,install PHPNG required file 'mapscript.php',4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6104,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6104,"fixes reports of Debian-GIS not including the required file 'mapscript.php' (https://bugs.launchpad.net/ubuntu/+source/mapserver/+bug/1884854)


will install the file into the PHP_EXTENSTION_DIR, such as:
-- Installing: /usr/lib/php/20170718/mapscript.php","fixes reports of Debian-GIS not including the required file 'mapscript.php' (https://bugs.launchpad.net/ubuntu/+source/mapserver/+bug/1884854)


will install the file into the PHP_EXTENSTION_DIR, such as:
-- Installing: /usr/lib/php/20170718/mapscript.php",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6104,2020-06-27T13:21:34Z,2020-06-28T11:48:03Z,2020-06-28T11:48:03Z,MERGED,True,4,0,2,https://github.com/jmckenna,install PHPNG required file 'mapscript.php',4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6104,https://github.com/sebastic,2,https://github.com/MapServer/MapServer/pull/6104#issuecomment-650567024,"fixes reports of Debian-GIS not including the required file 'mapscript.php' (https://bugs.launchpad.net/ubuntu/+source/mapserver/+bug/1884854)


will install the file into the PHP_EXTENSTION_DIR, such as:
-- Installing: /usr/lib/php/20170718/mapscript.php","The file content is wrong:
// Try to load our extension if it's not already loaded.
if (!extension_loaded('mapscript')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_mapscript.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('mapscript.so')) return;
    } else {
      if (!dl('mapscript.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}

It should load php_mapscriptng.so.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6104,2020-06-27T13:21:34Z,2020-06-28T11:48:03Z,2020-06-28T11:48:03Z,MERGED,True,4,0,2,https://github.com/jmckenna,install PHPNG required file 'mapscript.php',4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6104,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6104#issuecomment-650578040,"fixes reports of Debian-GIS not including the required file 'mapscript.php' (https://bugs.launchpad.net/ubuntu/+source/mapserver/+bug/1884854)


will install the file into the PHP_EXTENSTION_DIR, such as:
-- Installing: /usr/lib/php/20170718/mapscript.php","@sebastic I can't find the location of the code/file that you mention, it seems to be a test .php file, but I can't find the location of it.  Can you point me to it?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6104,2020-06-27T13:21:34Z,2020-06-28T11:48:03Z,2020-06-28T11:48:03Z,MERGED,True,4,0,2,https://github.com/jmckenna,install PHPNG required file 'mapscript.php',4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6104,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/6104#issuecomment-650578564,"fixes reports of Debian-GIS not including the required file 'mapscript.php' (https://bugs.launchpad.net/ubuntu/+source/mapserver/+bug/1884854)


will install the file into the PHP_EXTENSTION_DIR, such as:
-- Installing: /usr/lib/php/20170718/mapscript.php",ah you must mean that the contents of 'mapscript.php' is wrong....checking...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6104,2020-06-27T13:21:34Z,2020-06-28T11:48:03Z,2020-06-28T11:48:03Z,MERGED,True,4,0,2,https://github.com/jmckenna,install PHPNG required file 'mapscript.php',4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6104,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/6104#issuecomment-650578757,"fixes reports of Debian-GIS not including the required file 'mapscript.php' (https://bugs.launchpad.net/ubuntu/+source/mapserver/+bug/1884854)


will install the file into the PHP_EXTENSTION_DIR, such as:
-- Installing: /usr/lib/php/20170718/mapscript.php","ok sorry for that, I see what you mean.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6104,2020-06-27T13:21:34Z,2020-06-28T11:48:03Z,2020-06-28T11:48:03Z,MERGED,True,4,0,2,https://github.com/jmckenna,install PHPNG required file 'mapscript.php',4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6104,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/6104#issuecomment-650586207,"fixes reports of Debian-GIS not including the required file 'mapscript.php' (https://bugs.launchpad.net/ubuntu/+source/mapserver/+bug/1884854)


will install the file into the PHP_EXTENSTION_DIR, such as:
-- Installing: /usr/lib/php/20170718/mapscript.php","This seems to be related to issue #5708 .
I can't seem to get SWIG to change the name of the module inside the generated 'mapscript.php' file.
But there is no error when using that file however (and has been leveraged on my systems for 2 years like this), so worst case, the changes in this PR do install the file, and make it visible to packagers.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6104,2020-06-27T13:21:34Z,2020-06-28T11:48:03Z,2020-06-28T11:48:03Z,MERGED,True,4,0,2,https://github.com/jmckenna,install PHPNG required file 'mapscript.php',4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6104,https://github.com/jmckenna,7,https://github.com/MapServer/MapServer/pull/6104#issuecomment-650588656,"fixes reports of Debian-GIS not including the required file 'mapscript.php' (https://bugs.launchpad.net/ubuntu/+source/mapserver/+bug/1884854)


will install the file into the PHP_EXTENSTION_DIR, such as:
-- Installing: /usr/lib/php/20170718/mapscript.php","@sebastic there is no error on any of the Linux systems I test on, when using the 'mapscript.php' file.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6104,2020-06-27T13:21:34Z,2020-06-28T11:48:03Z,2020-06-28T11:48:03Z,MERGED,True,4,0,2,https://github.com/jmckenna,install PHPNG required file 'mapscript.php',4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6104,https://github.com/sebastic,8,https://github.com/MapServer/MapServer/pull/6104#issuecomment-650589014,"fixes reports of Debian-GIS not including the required file 'mapscript.php' (https://bugs.launchpad.net/ubuntu/+source/mapserver/+bug/1884854)


will install the file into the PHP_EXTENSTION_DIR, such as:
-- Installing: /usr/lib/php/20170718/mapscript.php","No errors are expected because return is executed if loading the extension fails.
Are the classes actually defined when mapscript.php is included?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6104,2020-06-27T13:21:34Z,2020-06-28T11:48:03Z,2020-06-28T11:48:03Z,MERGED,True,4,0,2,https://github.com/jmckenna,install PHPNG required file 'mapscript.php',4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6104,https://github.com/jmckenna,9,https://github.com/MapServer/MapServer/pull/6104#issuecomment-650594759,"fixes reports of Debian-GIS not including the required file 'mapscript.php' (https://bugs.launchpad.net/ubuntu/+source/mapserver/+bug/1884854)


will install the file into the PHP_EXTENSTION_DIR, such as:
-- Installing: /usr/lib/php/20170718/mapscript.php",Correct.  When I say 'works for me' here I meant actually using the mapscript constants and functions defined in that file - I get no errors in my testing on Linux systems.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6104,2020-06-27T13:21:34Z,2020-06-28T11:48:03Z,2020-06-28T11:48:03Z,MERGED,True,4,0,2,https://github.com/jmckenna,install PHPNG required file 'mapscript.php',4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6104,https://github.com/jmckenna,10,https://github.com/MapServer/MapServer/pull/6104#issuecomment-650598998,"fixes reports of Debian-GIS not including the required file 'mapscript.php' (https://bugs.launchpad.net/ubuntu/+source/mapserver/+bug/1884854)


will install the file into the PHP_EXTENSTION_DIR, such as:
-- Installing: /usr/lib/php/20170718/mapscript.php","Small PHP script to test (if successful no errors returned):
<?php

  // required SWIG include (contains constants for PHP7)
  include(""/usr/lib/php/20170718/mapscript.php"");

  // open map
  $oMap = new mapObj();

  $oMap = null;
  unset($oMap);
?>
execute:
php php-mapscriptng-test.php",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6105,2020-06-28T11:48:25Z,2020-06-28T12:23:42Z,2020-06-28T12:23:43Z,MERGED,True,4,0,2,https://github.com/MapServer-backport-bot,[Backport branch-7-6] install PHPNG required file 'mapscript.php',1,[],https://github.com/mapserver/mapserver/pull/6105,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6105,Backport 008877f from #6104,Backport 008877f from #6104,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6107,2020-07-07T11:09:35Z,2020-07-07T13:52:01Z,2020-07-07T13:52:01Z,MERGED,True,19,5,3,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Add py37 MapScript build and testing,1,[],https://github.com/mapserver/mapserver/pull/6107,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6107,Backport b38c7eb from #6100,Backport b38c7eb from #6100,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6109,2020-07-08T16:45:33Z,2020-07-08T17:07:08Z,2020-07-08T17:07:08Z,MERGED,True,11,10,2,https://github.com/rouault,Fix 2 warnings raised by gcc 7.5,2,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6109,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6109,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6110,2020-07-08T17:07:36Z,2020-07-08T17:43:58Z,2020-07-08T17:43:59Z,MERGED,True,11,10,2,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Fix 2 warnings raised by gcc 7.5,1,[],https://github.com/mapserver/mapserver/pull/6110,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6110,Backport 8dab421 from #6109,Backport 8dab421 from #6109,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6111,2020-07-08T22:53:30Z,2020-07-14T20:52:32Z,2020-07-14T20:52:32Z,MERGED,True,6570,171,313,https://github.com/rouault,Vagrant and Travis-CI: update to Ubuntu Bionic,3,[],https://github.com/mapserver/mapserver/pull/6111,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6111,"Fixes #5775
By using ubuntugis-unstable, this also upgrades to GDAL 3 & PROJ 7
PHP 5.6 and 7.0 Travis-CI configs are no longer tested as not supported on Bionic
Number of expected results have been regenerated due to changes in libraries (with the build in /vagrant/build_vagrant)
Like previously, the PHP 7.1 and 7.2 configs still use PROJ with the legacy proj_api.h, while PHP 7.3 uses PROJ >= 6 proj.h API.
For that later config, a number of .alternative expected results have been created due to subtle differences in coordinate reprojections between PROJ legacy and modern API (with the build in /vagrant/build_vagrant_proj7)","Fixes #5775
By using ubuntugis-unstable, this also upgrades to GDAL 3 & PROJ 7
PHP 5.6 and 7.0 Travis-CI configs are no longer tested as not supported on Bionic
Number of expected results have been regenerated due to changes in libraries (with the build in /vagrant/build_vagrant)
Like previously, the PHP 7.1 and 7.2 configs still use PROJ with the legacy proj_api.h, while PHP 7.3 uses PROJ >= 6 proj.h API.
For that later config, a number of .alternative expected results have been created due to subtle differences in coordinate reprojections between PROJ legacy and modern API (with the build in /vagrant/build_vagrant_proj7)",True,{'HEART': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6111,2020-07-08T22:53:30Z,2020-07-14T20:52:32Z,2020-07-14T20:52:32Z,MERGED,True,6570,171,313,https://github.com/rouault,Vagrant and Travis-CI: update to Ubuntu Bionic,3,[],https://github.com/mapserver/mapserver/pull/6111,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6111#issuecomment-656095268,"Fixes #5775
By using ubuntugis-unstable, this also upgrades to GDAL 3 & PROJ 7
PHP 5.6 and 7.0 Travis-CI configs are no longer tested as not supported on Bionic
Number of expected results have been regenerated due to changes in libraries (with the build in /vagrant/build_vagrant)
Like previously, the PHP 7.1 and 7.2 configs still use PROJ with the legacy proj_api.h, while PHP 7.3 uses PROJ >= 6 proj.h API.
For that later config, a number of .alternative expected results have been created due to subtle differences in coordinate reprojections between PROJ legacy and modern API (with the build in /vagrant/build_vagrant_proj7)","CC @dmorissette This may impact your updates for your mapml works. If you haven't started refreshing expected result, I presume merging this PR first would make sense",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6111,2020-07-08T22:53:30Z,2020-07-14T20:52:32Z,2020-07-14T20:52:32Z,MERGED,True,6570,171,313,https://github.com/rouault,Vagrant and Travis-CI: update to Ubuntu Bionic,3,[],https://github.com/mapserver/mapserver/pull/6111,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/6111#issuecomment-656115685,"Fixes #5775
By using ubuntugis-unstable, this also upgrades to GDAL 3 & PROJ 7
PHP 5.6 and 7.0 Travis-CI configs are no longer tested as not supported on Bionic
Number of expected results have been regenerated due to changes in libraries (with the build in /vagrant/build_vagrant)
Like previously, the PHP 7.1 and 7.2 configs still use PROJ with the legacy proj_api.h, while PHP 7.3 uses PROJ >= 6 proj.h API.
For that later config, a number of .alternative expected results have been created due to subtle differences in coordinate reprojections between PROJ legacy and modern API (with the build in /vagrant/build_vagrant_proj7)",@rouault - wondering how do you get msautotest to use the .alternative results?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6111,2020-07-08T22:53:30Z,2020-07-14T20:52:32Z,2020-07-14T20:52:32Z,MERGED,True,6570,171,313,https://github.com/rouault,Vagrant and Travis-CI: update to Ubuntu Bionic,3,[],https://github.com/mapserver/mapserver/pull/6111,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/6111#issuecomment-656118156,"Fixes #5775
By using ubuntugis-unstable, this also upgrades to GDAL 3 & PROJ 7
PHP 5.6 and 7.0 Travis-CI configs are no longer tested as not supported on Bionic
Number of expected results have been regenerated due to changes in libraries (with the build in /vagrant/build_vagrant)
Like previously, the PHP 7.1 and 7.2 configs still use PROJ with the legacy proj_api.h, while PHP 7.3 uses PROJ >= 6 proj.h API.
For that later config, a number of .alternative expected results have been created due to subtle differences in coordinate reprojections between PROJ legacy and modern API (with the build in /vagrant/build_vagrant_proj7)","wondering how do you get msautotest to use the .alternative results?

due to https://github.com/mapserver/mapserver/blob/3568fa6f5dbc655afa5e94aea742a2c8d44a441f/msautotest/pymod/testlib.py#L88",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6111,2020-07-08T22:53:30Z,2020-07-14T20:52:32Z,2020-07-14T20:52:32Z,MERGED,True,6570,171,313,https://github.com/rouault,Vagrant and Travis-CI: update to Ubuntu Bionic,3,[],https://github.com/mapserver/mapserver/pull/6111,https://github.com/geographika,5,https://github.com/MapServer/MapServer/pull/6111#issuecomment-656128615,"Fixes #5775
By using ubuntugis-unstable, this also upgrades to GDAL 3 & PROJ 7
PHP 5.6 and 7.0 Travis-CI configs are no longer tested as not supported on Bionic
Number of expected results have been regenerated due to changes in libraries (with the build in /vagrant/build_vagrant)
Like previously, the PHP 7.1 and 7.2 configs still use PROJ with the legacy proj_api.h, while PHP 7.3 uses PROJ >= 6 proj.h API.
For that later config, a number of .alternative expected results have been created due to subtle differences in coordinate reprojections between PROJ legacy and modern API (with the build in /vagrant/build_vagrant_proj7)","due to
https://github.com/mapserver/mapserver/blob/3568fa6f5dbc655afa5e94aea742a2c8d44a441f/msautotest/pymod/testlib.py#L88

Thanks.  I didn't realise that was already in place. I might look at a similar approach to getting msautotest to run on Appveyor.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6111,2020-07-08T22:53:30Z,2020-07-14T20:52:32Z,2020-07-14T20:52:32Z,MERGED,True,6570,171,313,https://github.com/rouault,Vagrant and Travis-CI: update to Ubuntu Bionic,3,[],https://github.com/mapserver/mapserver/pull/6111,https://github.com/rouault,6,https://github.com/MapServer/MapServer/pull/6111#issuecomment-656134106,"Fixes #5775
By using ubuntugis-unstable, this also upgrades to GDAL 3 & PROJ 7
PHP 5.6 and 7.0 Travis-CI configs are no longer tested as not supported on Bionic
Number of expected results have been regenerated due to changes in libraries (with the build in /vagrant/build_vagrant)
Like previously, the PHP 7.1 and 7.2 configs still use PROJ with the legacy proj_api.h, while PHP 7.3 uses PROJ >= 6 proj.h API.
For that later config, a number of .alternative expected results have been created due to subtle differences in coordinate reprojections between PROJ legacy and modern API (with the build in /vagrant/build_vagrant_proj7)","at a similar approach to getting msautotest to run on Appveyor.

Hum, I'd be afraid this would result in having a lot of variants, and the issue with AppVeyor/Windows is that it is less easy to update. You actually need to access to the Windows environment to be able to refresh the tests, which would be highly inconvenient from my perspective. At least with Vagrant, I believe anybody is in position to update them.
I was a bit hesitant about introducing this .alternative mechanism to start with. My idea is that at some point we use only the PROJ >= 6 code path, and no longer have a need for alternative expected results",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6112,2020-07-09T14:28:17Z,2020-07-09T15:01:39Z,2020-07-09T15:01:39Z,MERGED,True,7,1,1,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Hide some SWIG Java warnings,1,[],https://github.com/mapserver/mapserver/pull/6112,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6112,Backport 23cb8be from #6103,Backport 23cb8be from #6103,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6115,2020-07-10T18:10:49Z,2020-07-10T20:03:50Z,2020-07-10T20:35:42Z,MERGED,True,11,0,2,https://github.com/szekerest,Fix memory corruption when GEOMTRANSFORM and SHADOWCOLOR is used in label simultaneously #6114,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6115,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/6115,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6115,2020-07-10T18:10:49Z,2020-07-10T20:03:50Z,2020-07-10T20:35:42Z,MERGED,True,11,0,2,https://github.com/szekerest,Fix memory corruption when GEOMTRANSFORM and SHADOWCOLOR is used in label simultaneously #6114,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6115,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6115#issuecomment-656865930,,thanks @szekerest,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6116,2020-07-10T20:04:14Z,2020-07-10T22:45:50Z,2020-07-10T22:45:50Z,MERGED,True,11,0,2,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Fix memory corruption when GEOMTRANSFORM and SHADOWCOLOR is used in label simultaneously #6114,1,[],https://github.com/mapserver/mapserver/pull/6116,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6116,Backport 06a076e from #6115,Backport 06a076e from #6115,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6118,2020-07-14T20:03:04Z,2020-08-25T19:42:41Z,2020-08-25T19:42:41Z,MERGED,True,1370,775,34,https://github.com/geographika,Add docstrings to all MapScript classes and methods,9,[],https://github.com/mapserver/mapserver/pull/6118,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6118,"This pull request adds Doxygen-style docstrings to all MapScript classes and methods. This is part of MS RFC 132: Update MapScript API Docs. Changes in this pull request are limited to the SWIG *.i interface files.
Documentation has been taken from https://mapserver.org/mapscript/mapscript.html where available.
Other changes include:

standardising header includes into mapscript.i (some were duplicated)
tab/space formatting
typos
add missing method documentation where possible

I've not had enough time to investigate every undocumented function or TODO from the docs, but hopefully these will build up over time along with expanding the Python MapScript test suite.
There remain the following tasks which will be added in separate pull requests:

%feature(""shadow"")  in Python not yet added (docstrings currently being ignored for these)
class properties to be documented in the mapserver.h file
Sphinx doc updates to use the new autodoc approach","This pull request adds Doxygen-style docstrings to all MapScript classes and methods. This is part of MS RFC 132: Update MapScript API Docs. Changes in this pull request are limited to the SWIG *.i interface files.
Documentation has been taken from https://mapserver.org/mapscript/mapscript.html where available.
Other changes include:

standardising header includes into mapscript.i (some were duplicated)
tab/space formatting
typos
add missing method documentation where possible

I've not had enough time to investigate every undocumented function or TODO from the docs, but hopefully these will build up over time along with expanding the Python MapScript test suite.
There remain the following tasks which will be added in separate pull requests:

%feature(""shadow"")  in Python not yet added (docstrings currently being ignored for these)
class properties to be documented in the mapserver.h file
Sphinx doc updates to use the new autodoc approach",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6118,2020-07-14T20:03:04Z,2020-08-25T19:42:41Z,2020-08-25T19:42:41Z,MERGED,True,1370,775,34,https://github.com/geographika,Add docstrings to all MapScript classes and methods,9,[],https://github.com/mapserver/mapserver/pull/6118,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6118#issuecomment-658974314,"This pull request adds Doxygen-style docstrings to all MapScript classes and methods. This is part of MS RFC 132: Update MapScript API Docs. Changes in this pull request are limited to the SWIG *.i interface files.
Documentation has been taken from https://mapserver.org/mapscript/mapscript.html where available.
Other changes include:

standardising header includes into mapscript.i (some were duplicated)
tab/space formatting
typos
add missing method documentation where possible

I've not had enough time to investigate every undocumented function or TODO from the docs, but hopefully these will build up over time along with expanding the Python MapScript test suite.
There remain the following tasks which will be added in separate pull requests:

%feature(""shadow"")  in Python not yet added (docstrings currently being ignored for these)
class properties to be documented in the mapserver.h file
Sphinx doc updates to use the new autodoc approach",This approach does look cleaner - less clutter in the files.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6118,2020-07-14T20:03:04Z,2020-08-25T19:42:41Z,2020-08-25T19:42:41Z,MERGED,True,1370,775,34,https://github.com/geographika,Add docstrings to all MapScript classes and methods,9,[],https://github.com/mapserver/mapserver/pull/6118,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/6118#issuecomment-659045770,"This pull request adds Doxygen-style docstrings to all MapScript classes and methods. This is part of MS RFC 132: Update MapScript API Docs. Changes in this pull request are limited to the SWIG *.i interface files.
Documentation has been taken from https://mapserver.org/mapscript/mapscript.html where available.
Other changes include:

standardising header includes into mapscript.i (some were duplicated)
tab/space formatting
typos
add missing method documentation where possible

I've not had enough time to investigate every undocumented function or TODO from the docs, but hopefully these will build up over time along with expanding the Python MapScript test suite.
There remain the following tasks which will be added in separate pull requests:

%feature(""shadow"")  in Python not yet added (docstrings currently being ignored for these)
class properties to be documented in the mapserver.h file
Sphinx doc updates to use the new autodoc approach","@sdlime - is it ok to merge this, and then update the header files with comments for all MapScript accessible properties (using standard C comments) in a separate pull request?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6118,2020-07-14T20:03:04Z,2020-08-25T19:42:41Z,2020-08-25T19:42:41Z,MERGED,True,1370,775,34,https://github.com/geographika,Add docstrings to all MapScript classes and methods,9,[],https://github.com/mapserver/mapserver/pull/6118,https://github.com/geographika,4,https://github.com/MapServer/MapServer/pull/6118#issuecomment-679812041,"This pull request adds Doxygen-style docstrings to all MapScript classes and methods. This is part of MS RFC 132: Update MapScript API Docs. Changes in this pull request are limited to the SWIG *.i interface files.
Documentation has been taken from https://mapserver.org/mapscript/mapscript.html where available.
Other changes include:

standardising header includes into mapscript.i (some were duplicated)
tab/space formatting
typos
add missing method documentation where possible

I've not had enough time to investigate every undocumented function or TODO from the docs, but hopefully these will build up over time along with expanding the Python MapScript test suite.
There remain the following tasks which will be added in separate pull requests:

%feature(""shadow"")  in Python not yet added (docstrings currently being ignored for these)
class properties to be documented in the mapserver.h file
Sphinx doc updates to use the new autodoc approach",If there are no objections I'll merge this in the next couple of days.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6118,2020-07-14T20:03:04Z,2020-08-25T19:42:41Z,2020-08-25T19:42:41Z,MERGED,True,1370,775,34,https://github.com/geographika,Add docstrings to all MapScript classes and methods,9,[],https://github.com/mapserver/mapserver/pull/6118,https://github.com/sdlime,5,https://github.com/MapServer/MapServer/pull/6118#issuecomment-680112787,"This pull request adds Doxygen-style docstrings to all MapScript classes and methods. This is part of MS RFC 132: Update MapScript API Docs. Changes in this pull request are limited to the SWIG *.i interface files.
Documentation has been taken from https://mapserver.org/mapscript/mapscript.html where available.
Other changes include:

standardising header includes into mapscript.i (some were duplicated)
tab/space formatting
typos
add missing method documentation where possible

I've not had enough time to investigate every undocumented function or TODO from the docs, but hopefully these will build up over time along with expanding the Python MapScript test suite.
There remain the following tasks which will be added in separate pull requests:

%feature(""shadow"")  in Python not yet added (docstrings currently being ignored for these)
class properties to be documented in the mapserver.h file
Sphinx doc updates to use the new autodoc approach",No objections from me. Merge away!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6120,2020-07-16T20:22:05Z,2020-07-17T11:34:58Z,2020-07-17T11:35:09Z,MERGED,True,8,3,4,https://github.com/szekerest,"Build error if USE_LIBXML2, USE_WMS_SVR, USE_WFS_SVR not defined (#6119)",1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6120,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/6120,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6120,2020-07-16T20:22:05Z,2020-07-17T11:34:58Z,2020-07-17T11:35:09Z,MERGED,True,8,3,4,https://github.com/szekerest,"Build error if USE_LIBXML2, USE_WMS_SVR, USE_WFS_SVR not defined (#6119)",1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6120,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6120#issuecomment-660058495,,thank you @szekerest,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6121,2020-07-17T11:35:26Z,2020-07-17T12:05:50Z,2020-07-17T12:05:50Z,MERGED,True,8,3,4,https://github.com/MapServer-backport-bot,"[Backport branch-7-6] Build error if USE_LIBXML2, USE_WMS_SVR, USE_WFS_SVR not defined (#6119)",1,[],https://github.com/mapserver/mapserver/pull/6121,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6121,Backport e0f3ae2 from #6120,Backport e0f3ae2 from #6120,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6122,2020-07-21T13:01:27Z,2020-07-21T13:33:37Z,2020-07-21T13:33:37Z,MERGED,True,26,5,1,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Don't use CIRCULARSTRING when fetching geography data from SQL Server.,1,[],https://github.com/mapserver/mapserver/pull/6122,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6122,Backport ec34787 from #6088,Backport ec34787 from #6088,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6123,2020-07-21T13:03:10Z,2020-07-21T15:28:39Z,2020-07-21T15:28:39Z,CLOSED,False,86,22,3,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Addresses open file handles when parse errors occur in include files  (Issue #5942),1,[],https://github.com/mapserver/mapserver/pull/6123,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6123,Backport dbac24d from #6050,Backport dbac24d from #6050,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6123,2020-07-21T13:03:10Z,2020-07-21T15:28:39Z,2020-07-21T15:28:39Z,CLOSED,False,86,22,3,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Addresses open file handles when parse errors occur in include files  (Issue #5942),1,[],https://github.com/mapserver/mapserver/pull/6123,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6123#issuecomment-661930726,Backport dbac24d from #6050,closing as it appears to not be applicable to branch-7-6,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6124,2020-07-23T10:26:59Z,2020-07-31T12:57:27Z,2020-08-05T10:48:00Z,MERGED,True,5,1,1,https://github.com/copierrj,Add a bounding box filter to requests passed down to OGR whenever possible,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6124,https://github.com/copierrj,1,https://github.com/MapServer/MapServer/pull/6124,"We observed that our WFS (MapServer + GeoPackage utilizing the OGR backend) is a lot slower when specific spatial operators are used in a filter condition. Although the spatial index in the GeoPackage could be used to accelerate those specific operators it was not.
By adding a bounding box filter to the request passed down to OGR whenever possible (= depending on which operator is used) the spatial index in GeoPackage is utilized for those requests resulting a very significant performance improvement.","We observed that our WFS (MapServer + GeoPackage utilizing the OGR backend) is a lot slower when specific spatial operators are used in a filter condition. Although the spatial index in the GeoPackage could be used to accelerate those specific operators it was not.
By adding a bounding box filter to the request passed down to OGR whenever possible (= depending on which operator is used) the spatial index in GeoPackage is utilized for those requests resulting a very significant performance improvement.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6124,2020-07-23T10:26:59Z,2020-07-31T12:57:27Z,2020-08-05T10:48:00Z,MERGED,True,5,1,1,https://github.com/copierrj,Add a bounding box filter to requests passed down to OGR whenever possible,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6124,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6124#issuecomment-667106122,"We observed that our WFS (MapServer + GeoPackage utilizing the OGR backend) is a lot slower when specific spatial operators are used in a filter condition. Although the spatial index in the GeoPackage could be used to accelerate those specific operators it was not.
By adding a bounding box filter to the request passed down to OGR whenever possible (= depending on which operator is used) the spatial index in GeoPackage is utilized for those requests resulting a very significant performance improvement.",Changes make sense to me.  Thanks @copierrj !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6125,2020-07-31T14:59:21Z,2020-07-31T16:13:56Z,2020-07-31T16:13:56Z,MERGED,True,5,1,1,https://github.com/jmckenna,manually apply changes through PR #6124,1,[],https://github.com/mapserver/mapserver/pull/6125,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6125,backport bot seemed to fail for #6124 so trying to apply the changes manually to branch-7-6,backport bot seemed to fail for #6124 so trying to apply the changes manually to branch-7-6,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6126,2020-08-07T13:24:48Z,2020-08-07T13:51:37Z,2020-08-07T13:51:37Z,MERGED,True,1,0,1,https://github.com/jmckenna,add content encoding to OL template,2,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6126,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6126,"recent browsers throw error of ""The character encoding of the HTML document was not declared."" when using template=openlayers
this adds the content encoding type to the meta tag in the OpenLayers template","recent browsers throw error of ""The character encoding of the HTML document was not declared."" when using template=openlayers
this adds the content encoding type to the meta tag in the OpenLayers template",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6127,2020-08-07T13:52:04Z,2020-08-07T14:22:33Z,2020-08-07T14:22:33Z,MERGED,True,1,0,1,https://github.com/MapServer-backport-bot,[Backport branch-7-6] add content encoding to OL template,1,[],https://github.com/mapserver/mapserver/pull/6127,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6127,Backport 6e24529 from #6126,Backport 6e24529 from #6126,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6128,2020-08-07T16:31:53Z,2020-08-07T17:04:26Z,2020-08-07T17:04:26Z,MERGED,True,1,0,1,https://github.com/jmckenna,add favicon to OL template,3,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6128,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6128,"should be able to use the existing site's favicon, let's try..","should be able to use the existing site's favicon, let's try..",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6129,2020-08-07T17:04:51Z,2020-08-07T17:35:18Z,2020-08-07T17:35:18Z,MERGED,True,1,0,1,https://github.com/MapServer-backport-bot,[Backport branch-7-6] add favicon to OL template,1,[],https://github.com/mapserver/mapserver/pull/6129,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6129,Backport 3fcec14 from #6128,Backport 3fcec14 from #6128,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6131,2020-08-18T17:21:46Z,2020-08-19T12:25:02Z,2020-08-19T12:25:18Z,MERGED,True,212,87,3,https://github.com/rouault,WFS: limit SQL Select to required fields for faster data retrieval,1,[],https://github.com/mapserver/mapserver/pull/6131,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6131,Co-authored-by: Seth G sethg@geographika.co.uk,Co-authored-by: Seth G sethg@geographika.co.uk,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6131,2020-08-18T17:21:46Z,2020-08-19T12:25:02Z,2020-08-19T12:25:18Z,MERGED,True,212,87,3,https://github.com/rouault,WFS: limit SQL Select to required fields for faster data retrieval,1,[],https://github.com/mapserver/mapserver/pull/6131,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6131#issuecomment-675609322,Co-authored-by: Seth G sethg@geographika.co.uk,"Supersedes #5997
CC @geographika",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6131,2020-08-18T17:21:46Z,2020-08-19T12:25:02Z,2020-08-19T12:25:18Z,MERGED,True,212,87,3,https://github.com/rouault,WFS: limit SQL Select to required fields for faster data retrieval,1,[],https://github.com/mapserver/mapserver/pull/6131,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/6131#issuecomment-675750118,Co-authored-by: Seth G sethg@geographika.co.uk,"Thanks @rouault !
Built and tested locally, and all working fine.
This update greatly improves WFS performance when requesting a subset of layer fields.
One question/confirmation - any fields referenced in a CLASS are selected at the database level even if never used for a WFS request (this was also the case in my previous pull request) - I presume there is no way to get round this due to buildLayerItemList also handling fields referenced in FILTER, CLUSTER etc. ?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6131,2020-08-18T17:21:46Z,2020-08-19T12:25:02Z,2020-08-19T12:25:18Z,MERGED,True,212,87,3,https://github.com/rouault,WFS: limit SQL Select to required fields for faster data retrieval,1,[],https://github.com/mapserver/mapserver/pull/6131,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/6131#issuecomment-675754034,Co-authored-by: Seth G sethg@geographika.co.uk,"any fields referenced in a CLASS are selected at the database level even if never used for a WFS request (this was also the case in my previous pull request) - I presume there is no way to get round this due to buildLayerItemList also handling fields referenced in FILTER, CLUSTER etc. ?

yes, msLayerWhichItems() doesn't know the calling context, so there might be things that are irrelevant to WFS. It would require to know which items are needed for which context.",True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6131,2020-08-18T17:21:46Z,2020-08-19T12:25:02Z,2020-08-19T12:25:18Z,MERGED,True,212,87,3,https://github.com/rouault,WFS: limit SQL Select to required fields for faster data retrieval,1,[],https://github.com/mapserver/mapserver/pull/6131,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/6131#issuecomment-676265872,Co-authored-by: Seth G sethg@geographika.co.uk,thanks @rouault & @geographika !!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6132,2020-08-20T07:56:13Z,2021-01-20T21:40:15Z,2021-01-20T21:40:15Z,CLOSED,False,46,3,6,https://github.com/ejn,Enable offset for polygons,5,[],https://github.com/mapserver/mapserver/pull/6132,https://github.com/ejn,1,https://github.com/MapServer/MapServer/pull/6132,Rebased #5088 against current master and added autotest case,Rebased #5088 against current master and added autotest case,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6132,2020-08-20T07:56:13Z,2021-01-20T21:40:15Z,2021-01-20T21:40:15Z,CLOSED,False,46,3,6,https://github.com/ejn,Enable offset for polygons,5,[],https://github.com/mapserver/mapserver/pull/6132,https://github.com/ejn,2,https://github.com/MapServer/MapServer/pull/6132#issuecomment-677441353,Rebased #5088 against current master and added autotest case,Note that the msGEOSError(): GEOS library error. errors reported by @tbonfort against #5088 seem to have also disappeared in the meantime,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6132,2020-08-20T07:56:13Z,2021-01-20T21:40:15Z,2021-01-20T21:40:15Z,CLOSED,False,46,3,6,https://github.com/ejn,Enable offset for polygons,5,[],https://github.com/mapserver/mapserver/pull/6132,https://github.com/ejn,3,https://github.com/MapServer/MapServer/pull/6132#issuecomment-677449135,Rebased #5088 against current master and added autotest case,"No idea why the AppVeyor build is failing - looks like some kind of problem with the system.
The Travis build is failing on the PDF output for the test I modified. Is it possible to get the result file from the Travis build in order to compare with the expected result I pushed? I guess it's just a result of systems rather than a problem with the content.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6132,2020-08-20T07:56:13Z,2021-01-20T21:40:15Z,2021-01-20T21:40:15Z,CLOSED,False,46,3,6,https://github.com/ejn,Enable offset for polygons,5,[],https://github.com/mapserver/mapserver/pull/6132,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/6132#issuecomment-763966426,Rebased #5088 against current master and added autotest case,Superseded by #6211,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6133,2020-09-04T07:21:15Z,2020-09-04T07:47:10Z,2020-09-04T07:47:11Z,MERGED,True,63,10,4,https://github.com/rouault,WCS 1.1 and 2.0: fix support of netCDF output (complementary fix to refs #5968),1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6133,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6133,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6134,2020-09-04T07:32:23Z,2020-09-04T10:31:02Z,2020-09-04T10:31:03Z,MERGED,True,72,13,11,https://github.com/rouault,WCS 1.1 and 2.0: fix support of netCDF output (complementary fix to refs #5968),2,[],https://github.com/mapserver/mapserver/pull/6134,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6134,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6135,2020-09-04T07:47:37Z,2020-09-04T08:35:27Z,2020-09-04T08:35:28Z,MERGED,True,63,10,4,https://github.com/MapServer-backport-bot,[Backport branch-7-6] WCS 1.1 and 2.0: fix support of netCDF output (complementary fix to refs #5968),1,[],https://github.com/mapserver/mapserver/pull/6135,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6135,Backport 4f193d3 from #6133,Backport 4f193d3 from #6133,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6136,2020-09-13T13:45:51Z,2020-09-22T21:37:08Z,2020-09-22T21:37:08Z,MERGED,True,70,95,7,https://github.com/geographika,Test py3 MapScript Builds on Travis,14,[],https://github.com/mapserver/mapserver/pull/6136,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6136,"This pull request adds Python3 building and testing to the Travis Linux CI, using an updated Python MapScript build process.
Python MapScript is tested on Python 2.7 and Python 3.7. msautotest is tested on Python 2.7, 3.6, and 3.7.
Appveyor and the CMake build process now use the Python_ROOT_DIR variable rather than PYTHON_EXECUTABLE to force a Python version. PYTHON_EXECUTABLE did not work correctly with Travis in picking up Python directories in initial attempts. In addition Python_ROOT_DIR is one of the standard HINTs for the FindPython module.
From the issue at https://gitlab.kitware.com/cmake/cmake/-/issues/19492:

Overriding Python_EXECUTABLE is not possible to avoid any inconsistency between various components which can be searched for.

With the update of the Travis image to Bionic we now have CMake 3.12.
The FindPython CMake module seems to work fine, so there is no longer a need for the previous hacks to work with older versions of CMake. Users wishing to build Python modules can use their default Python or set the Python_ROOT_DIR variable to point to a non-default Python installation.
Unfortunately the Python_ROOT_DIR approach did not work correctly on Travis (FindPython never found the hinted version). I eventually found out it is due to Travis using pyevn to handle the various Python environments. There is a useful introduction to pyenv at Real Python.
All msautotest test code now runs under both py2 and py3. One test case was modified to work under py3 (a byte/string issue), and the inbuilt Python server differs between py2 and py3. The remaining code had already been made Python3 compatible thanks to the work by @rouault on updating to pytest.
In summary each of the Travis CI builds now runs the following:

BUILD_NAME=PHP_7.1 - builds and tests Python MapScript for Python 2.7, and msautotest using Python 2.7
BUILD_NAME=PHP_7.2_WITH_ASAN - no Python MapScript is tested in this build, msautotest run using Python 3.6
BUILD_NAME=PHP_7.3_WITH_PROJ7 - tests Python MapScript for Python 3.7, and msautotest using Python 3.7

Please add any issues, comments, suggestions to this pull request.
@tomkralidis - MapScript for Python 3.7 seems fine on Linux and Windows. It may be worth getting this latest CMake approach, and setting Python_ROOT_DIR to point to your Conda install to see if it makes a difference.","This pull request adds Python3 building and testing to the Travis Linux CI, using an updated Python MapScript build process.
Python MapScript is tested on Python 2.7 and Python 3.7. msautotest is tested on Python 2.7, 3.6, and 3.7.
Appveyor and the CMake build process now use the Python_ROOT_DIR variable rather than PYTHON_EXECUTABLE to force a Python version. PYTHON_EXECUTABLE did not work correctly with Travis in picking up Python directories in initial attempts. In addition Python_ROOT_DIR is one of the standard HINTs for the FindPython module.
From the issue at https://gitlab.kitware.com/cmake/cmake/-/issues/19492:

Overriding Python_EXECUTABLE is not possible to avoid any inconsistency between various components which can be searched for.

With the update of the Travis image to Bionic we now have CMake 3.12.
The FindPython CMake module seems to work fine, so there is no longer a need for the previous hacks to work with older versions of CMake. Users wishing to build Python modules can use their default Python or set the Python_ROOT_DIR variable to point to a non-default Python installation.
Unfortunately the Python_ROOT_DIR approach did not work correctly on Travis (FindPython never found the hinted version). I eventually found out it is due to Travis using pyevn to handle the various Python environments. There is a useful introduction to pyenv at Real Python.
All msautotest test code now runs under both py2 and py3. One test case was modified to work under py3 (a byte/string issue), and the inbuilt Python server differs between py2 and py3. The remaining code had already been made Python3 compatible thanks to the work by @rouault on updating to pytest.
In summary each of the Travis CI builds now runs the following:

BUILD_NAME=PHP_7.1 - builds and tests Python MapScript for Python 2.7, and msautotest using Python 2.7
BUILD_NAME=PHP_7.2_WITH_ASAN - no Python MapScript is tested in this build, msautotest run using Python 3.6
BUILD_NAME=PHP_7.3_WITH_PROJ7 - tests Python MapScript for Python 3.7, and msautotest using Python 3.7

Please add any issues, comments, suggestions to this pull request.
@tomkralidis - MapScript for Python 3.7 seems fine on Linux and Windows. It may be worth getting this latest CMake approach, and setting Python_ROOT_DIR to point to your Conda install to see if it makes a difference.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6136,2020-09-13T13:45:51Z,2020-09-22T21:37:08Z,2020-09-22T21:37:08Z,MERGED,True,70,95,7,https://github.com/geographika,Test py3 MapScript Builds on Travis,14,[],https://github.com/mapserver/mapserver/pull/6136,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/6136#issuecomment-693685549,"This pull request adds Python3 building and testing to the Travis Linux CI, using an updated Python MapScript build process.
Python MapScript is tested on Python 2.7 and Python 3.7. msautotest is tested on Python 2.7, 3.6, and 3.7.
Appveyor and the CMake build process now use the Python_ROOT_DIR variable rather than PYTHON_EXECUTABLE to force a Python version. PYTHON_EXECUTABLE did not work correctly with Travis in picking up Python directories in initial attempts. In addition Python_ROOT_DIR is one of the standard HINTs for the FindPython module.
From the issue at https://gitlab.kitware.com/cmake/cmake/-/issues/19492:

Overriding Python_EXECUTABLE is not possible to avoid any inconsistency between various components which can be searched for.

With the update of the Travis image to Bionic we now have CMake 3.12.
The FindPython CMake module seems to work fine, so there is no longer a need for the previous hacks to work with older versions of CMake. Users wishing to build Python modules can use their default Python or set the Python_ROOT_DIR variable to point to a non-default Python installation.
Unfortunately the Python_ROOT_DIR approach did not work correctly on Travis (FindPython never found the hinted version). I eventually found out it is due to Travis using pyevn to handle the various Python environments. There is a useful introduction to pyenv at Real Python.
All msautotest test code now runs under both py2 and py3. One test case was modified to work under py3 (a byte/string issue), and the inbuilt Python server differs between py2 and py3. The remaining code had already been made Python3 compatible thanks to the work by @rouault on updating to pytest.
In summary each of the Travis CI builds now runs the following:

BUILD_NAME=PHP_7.1 - builds and tests Python MapScript for Python 2.7, and msautotest using Python 2.7
BUILD_NAME=PHP_7.2_WITH_ASAN - no Python MapScript is tested in this build, msautotest run using Python 3.6
BUILD_NAME=PHP_7.3_WITH_PROJ7 - tests Python MapScript for Python 3.7, and msautotest using Python 3.7

Please add any issues, comments, suggestions to this pull request.
@tomkralidis - MapScript for Python 3.7 seems fine on Linux and Windows. It may be worth getting this latest CMake approach, and setting Python_ROOT_DIR to point to your Conda install to see if it makes a difference.","Does anyone have objections to merging this, or any reservations?
I'll take a look at adding py3,8 support for MapServer 8.0 separately (see #6101). I see there are now PHP 7.4 and 8.0 releases we could add builds for.
@rouault - would it make sense to add the Python dependencies cpp-coveralls pyflakes lxml to msautotest/requirements.txt?
lxml is used for msautotest but not the others, so we could keep them separate.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6137,2020-09-13T21:36:44Z,2020-09-15T10:03:07Z,2020-09-15T10:19:31Z,MERGED,True,120,74,10,https://github.com/geographika,"Allow custom override for gml_types ""auto""",6,[],https://github.com/mapserver/mapserver/pull/6137,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6137,"This pull request allows GML types to be set automatically for the MSSQL driver, but still allow individual fields to be overwritten manually if required. See #5408 and #5418
I believe this was the original intention of the code, but from debugging and testing I don't believe this has ever been the case.
The code currently checks the ""gml"" namespace for ""type"", ""width"", and ""precision"" using msOWSLookupMetadata. However, these properties only ever exist with a property name e.g.
gml_[item name]_type
gml_[item name]_precision
gml_[item name]_width

Therefore, the searches always return 0, and the auto values are always used.
It looks like the code has been copied from driver to driver.
As in the test case included in the pull request:
    METADATA
        ""gml_include_items"" ""all""
        ""gml_types"" ""auto""
        ""gml_ogr_fid_type"" ""long"" # override the default gml type of integer
    END

Returns:
    <element name=""ogr_fid"" minOccurs=""0"" type=""long""/>
    <element name=""name"" minOccurs=""0"" nillable=""true"" type=""string""/>
    <element name=""name_ar"" minOccurs=""0"" nillable=""true"" type=""string""/>
Please let me know if I am missing something.
I've also added the update for the following drivers:

Oracle
Shapefile
PostGIS
OGR

Looks like the original code is from 2010 as part of #3570 implementing https://mapserver.org/development/rfc/ms-rfc-62.html#gml-types-auto","This pull request allows GML types to be set automatically for the MSSQL driver, but still allow individual fields to be overwritten manually if required. See #5408 and #5418
I believe this was the original intention of the code, but from debugging and testing I don't believe this has ever been the case.
The code currently checks the ""gml"" namespace for ""type"", ""width"", and ""precision"" using msOWSLookupMetadata. However, these properties only ever exist with a property name e.g.
gml_[item name]_type
gml_[item name]_precision
gml_[item name]_width

Therefore, the searches always return 0, and the auto values are always used.
It looks like the code has been copied from driver to driver.
As in the test case included in the pull request:
    METADATA
        ""gml_include_items"" ""all""
        ""gml_types"" ""auto""
        ""gml_ogr_fid_type"" ""long"" # override the default gml type of integer
    END

Returns:
    <element name=""ogr_fid"" minOccurs=""0"" type=""long""/>
    <element name=""name"" minOccurs=""0"" nillable=""true"" type=""string""/>
    <element name=""name_ar"" minOccurs=""0"" nillable=""true"" type=""string""/>
Please let me know if I am missing something.
I've also added the update for the following drivers:

Oracle
Shapefile
PostGIS
OGR

Looks like the original code is from 2010 as part of #3570 implementing https://mapserver.org/development/rfc/ms-rfc-62.html#gml-types-auto",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6137,2020-09-13T21:36:44Z,2020-09-15T10:03:07Z,2020-09-15T10:19:31Z,MERGED,True,120,74,10,https://github.com/geographika,"Allow custom override for gml_types ""auto""",6,[],https://github.com/mapserver/mapserver/pull/6137,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6137#issuecomment-691886499,"This pull request allows GML types to be set automatically for the MSSQL driver, but still allow individual fields to be overwritten manually if required. See #5408 and #5418
I believe this was the original intention of the code, but from debugging and testing I don't believe this has ever been the case.
The code currently checks the ""gml"" namespace for ""type"", ""width"", and ""precision"" using msOWSLookupMetadata. However, these properties only ever exist with a property name e.g.
gml_[item name]_type
gml_[item name]_precision
gml_[item name]_width

Therefore, the searches always return 0, and the auto values are always used.
It looks like the code has been copied from driver to driver.
As in the test case included in the pull request:
    METADATA
        ""gml_include_items"" ""all""
        ""gml_types"" ""auto""
        ""gml_ogr_fid_type"" ""long"" # override the default gml type of integer
    END

Returns:
    <element name=""ogr_fid"" minOccurs=""0"" type=""long""/>
    <element name=""name"" minOccurs=""0"" nillable=""true"" type=""string""/>
    <element name=""name_ar"" minOccurs=""0"" nillable=""true"" type=""string""/>
Please let me know if I am missing something.
I've also added the update for the following drivers:

Oracle
Shapefile
PostGIS
OGR

Looks like the original code is from 2010 as part of #3570 implementing https://mapserver.org/development/rfc/ms-rfc-62.html#gml-types-auto",Would be good to move this copied&pasted logic in a function :-),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6137,2020-09-13T21:36:44Z,2020-09-15T10:03:07Z,2020-09-15T10:19:31Z,MERGED,True,120,74,10,https://github.com/geographika,"Allow custom override for gml_types ""auto""",6,[],https://github.com/mapserver/mapserver/pull/6137,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/6137#issuecomment-692025379,"This pull request allows GML types to be set automatically for the MSSQL driver, but still allow individual fields to be overwritten manually if required. See #5408 and #5418
I believe this was the original intention of the code, but from debugging and testing I don't believe this has ever been the case.
The code currently checks the ""gml"" namespace for ""type"", ""width"", and ""precision"" using msOWSLookupMetadata. However, these properties only ever exist with a property name e.g.
gml_[item name]_type
gml_[item name]_precision
gml_[item name]_width

Therefore, the searches always return 0, and the auto values are always used.
It looks like the code has been copied from driver to driver.
As in the test case included in the pull request:
    METADATA
        ""gml_include_items"" ""all""
        ""gml_types"" ""auto""
        ""gml_ogr_fid_type"" ""long"" # override the default gml type of integer
    END

Returns:
    <element name=""ogr_fid"" minOccurs=""0"" type=""long""/>
    <element name=""name"" minOccurs=""0"" nillable=""true"" type=""string""/>
    <element name=""name_ar"" minOccurs=""0"" nillable=""true"" type=""string""/>
Please let me know if I am missing something.
I've also added the update for the following drivers:

Oracle
Shapefile
PostGIS
OGR

Looks like the original code is from 2010 as part of #3570 implementing https://mapserver.org/development/rfc/ms-rfc-62.html#gml-types-auto","@rouault - ok I gave it a try!
Unsure about the following:

should I return a TRUE value from the function (not used) or simply make it void?
md_item_name[256] was smalled [64] mapshape but this should have no impact
unsure if function is located in best place
I think i updated the associated .h file correctly

Nullable is only currently used in MSSQL driver, but it having it in the function should make it easier for other drivers to implement if required.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6137,2020-09-13T21:36:44Z,2020-09-15T10:03:07Z,2020-09-15T10:19:31Z,MERGED,True,120,74,10,https://github.com/geographika,"Allow custom override for gml_types ""auto""",6,[],https://github.com/mapserver/mapserver/pull/6137,https://github.com/geographika,4,https://github.com/MapServer/MapServer/pull/6137#issuecomment-692621667,"This pull request allows GML types to be set automatically for the MSSQL driver, but still allow individual fields to be overwritten manually if required. See #5408 and #5418
I believe this was the original intention of the code, but from debugging and testing I don't believe this has ever been the case.
The code currently checks the ""gml"" namespace for ""type"", ""width"", and ""precision"" using msOWSLookupMetadata. However, these properties only ever exist with a property name e.g.
gml_[item name]_type
gml_[item name]_precision
gml_[item name]_width

Therefore, the searches always return 0, and the auto values are always used.
It looks like the code has been copied from driver to driver.
As in the test case included in the pull request:
    METADATA
        ""gml_include_items"" ""all""
        ""gml_types"" ""auto""
        ""gml_ogr_fid_type"" ""long"" # override the default gml type of integer
    END

Returns:
    <element name=""ogr_fid"" minOccurs=""0"" type=""long""/>
    <element name=""name"" minOccurs=""0"" nillable=""true"" type=""string""/>
    <element name=""name_ar"" minOccurs=""0"" nillable=""true"" type=""string""/>
Please let me know if I am missing something.
I've also added the update for the following drivers:

Oracle
Shapefile
PostGIS
OGR

Looks like the original code is from 2010 as part of #3570 implementing https://mapserver.org/development/rfc/ms-rfc-62.html#gml-types-auto",@rouault - thanks for the review and feedback.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6138,2020-09-16T06:32:32Z,2020-09-22T21:36:36Z,2020-09-22T21:36:36Z,MERGED,True,305,32,20,https://github.com/geographika,Allow null features in OGR output,6,[],https://github.com/mapserver/mapserver/pull/6138,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6138,"This pull request removes the checks for numlines < 1 allowing null features to be output to an OGR format, for example GeoJSON which would return these features as mygeom: null. Pull request related to #5192 (although the issue from @jratike80 is a slightly different case). A full set of tests has been added for the MSSQL Driver (attempts to add WKT tests via CONNECTION OGR were unsuccessful as empty geometries were converted to normal geometries).
To retrieve these features requires ""wfs_use_default_extent_for_getfeature"" ""false"" to be set on the layer or the null features would be filtered out with an extent query.
Several drivers have checks for NULLs, for example the MSSQL driver at https://github.com/mapserver/mapserver/blob/ec347870be17fdaa0bb4a2d68e80c677a3c55d31/mapmssql2008.c#L2400L
Supplying an empty geometry rather than NULL gets around these checks:
geometry::STGeomFromText('POINT EMPTY', 3857) mygeom
The use case is to return all features as part of a WFS in GeoJSON even if they have no geometry. The feature attributes can still be very useful (and null features are still included in counts which can be confusing if they are never returned).
A current workaround involve setting fake geometries, but then functions such as zooming to features are incorrect, as are summary lengths and areas etc.
As this function is used for all OGR outputs I'm not certain of possible side effects when outputting to all other formats.
Currently, MapServer would log an error and the feature would not be written to the output.
With this pull request hGeom remains NULL and is passed to OGR_F_SetGeometryDirectly( hFeat, hGeom )
There is a check further on to see if writing the feature failed, so I believe any errors with empty geometries for a particular driver would be handled here:
https://github.com/mapserver/mapserver/blob/9bb624f155b8fafbe680de218571f582b1e28347/mapogroutput.cpp#L523
When testing with CSV the output using this pull request is:
WKT,fid
,""1""","This pull request removes the checks for numlines < 1 allowing null features to be output to an OGR format, for example GeoJSON which would return these features as mygeom: null. Pull request related to #5192 (although the issue from @jratike80 is a slightly different case). A full set of tests has been added for the MSSQL Driver (attempts to add WKT tests via CONNECTION OGR were unsuccessful as empty geometries were converted to normal geometries).
To retrieve these features requires ""wfs_use_default_extent_for_getfeature"" ""false"" to be set on the layer or the null features would be filtered out with an extent query.
Several drivers have checks for NULLs, for example the MSSQL driver at https://github.com/mapserver/mapserver/blob/ec347870be17fdaa0bb4a2d68e80c677a3c55d31/mapmssql2008.c#L2400L
Supplying an empty geometry rather than NULL gets around these checks:
geometry::STGeomFromText('POINT EMPTY', 3857) mygeom
The use case is to return all features as part of a WFS in GeoJSON even if they have no geometry. The feature attributes can still be very useful (and null features are still included in counts which can be confusing if they are never returned).
A current workaround involve setting fake geometries, but then functions such as zooming to features are incorrect, as are summary lengths and areas etc.
As this function is used for all OGR outputs I'm not certain of possible side effects when outputting to all other formats.
Currently, MapServer would log an error and the feature would not be written to the output.
With this pull request hGeom remains NULL and is passed to OGR_F_SetGeometryDirectly( hFeat, hGeom )
There is a check further on to see if writing the feature failed, so I believe any errors with empty geometries for a particular driver would be handled here:
https://github.com/mapserver/mapserver/blob/9bb624f155b8fafbe680de218571f582b1e28347/mapogroutput.cpp#L523
When testing with CSV the output using this pull request is:
WKT,fid
,""1""",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6138,2020-09-16T06:32:32Z,2020-09-22T21:36:36Z,2020-09-22T21:36:36Z,MERGED,True,305,32,20,https://github.com/geographika,Allow null features in OGR output,6,[],https://github.com/mapserver/mapserver/pull/6138,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/6138#issuecomment-693371963,"This pull request removes the checks for numlines < 1 allowing null features to be output to an OGR format, for example GeoJSON which would return these features as mygeom: null. Pull request related to #5192 (although the issue from @jratike80 is a slightly different case). A full set of tests has been added for the MSSQL Driver (attempts to add WKT tests via CONNECTION OGR were unsuccessful as empty geometries were converted to normal geometries).
To retrieve these features requires ""wfs_use_default_extent_for_getfeature"" ""false"" to be set on the layer or the null features would be filtered out with an extent query.
Several drivers have checks for NULLs, for example the MSSQL driver at https://github.com/mapserver/mapserver/blob/ec347870be17fdaa0bb4a2d68e80c677a3c55d31/mapmssql2008.c#L2400L
Supplying an empty geometry rather than NULL gets around these checks:
geometry::STGeomFromText('POINT EMPTY', 3857) mygeom
The use case is to return all features as part of a WFS in GeoJSON even if they have no geometry. The feature attributes can still be very useful (and null features are still included in counts which can be confusing if they are never returned).
A current workaround involve setting fake geometries, but then functions such as zooming to features are incorrect, as are summary lengths and areas etc.
As this function is used for all OGR outputs I'm not certain of possible side effects when outputting to all other formats.
Currently, MapServer would log an error and the feature would not be written to the output.
With this pull request hGeom remains NULL and is passed to OGR_F_SetGeometryDirectly( hFeat, hGeom )
There is a check further on to see if writing the feature failed, so I believe any errors with empty geometries for a particular driver would be handled here:
https://github.com/mapserver/mapserver/blob/9bb624f155b8fafbe680de218571f582b1e28347/mapogroutput.cpp#L523
When testing with CSV the output using this pull request is:
WKT,fid
,""1""","Issues to address are as follows:

null polygons are currently output as follows, rather than geometry: null (same for NULL multipolygons):

https://github.com/mapserver/mapserver/blob/06c0b8782369b43df9f3f3167a3cfe809d74b5ac/msautotest/mssql/expected/null_polygon.json#L6
From https://tools.ietf.org/html/rfc7946:

A GeoJSON Geometry object of any type other than
""GeometryCollection"" has a member with the name ""coordinates"".
The value of the ""coordinates"" member is an array.  The structure
of the elements in this array is determined by the type of
geometry.  GeoJSON processors MAY interpret Geometry objects with
empty ""coordinates"" arrays as null objects.
A Feature object has a member with the name ""geometry"".  The value
of the geometry member SHALL be either a Geometry object as
defined above or, in the case that the Feature is unlocated, a
JSON null value.

There is a discussion at mapnik about empty coords or nulls. Nulls was the preferred option. Use of null would make MapServer consistent across all geometry types.
Update - this has now been addressed in the pull request.

multipolygons are always flattened to polygons:

https://github.com/mapserver/mapserver/blob/06c0b8782369b43df9f3f3167a3cfe809d74b5ac/msautotest/mssql/expected/multipolygon.json#L6
Update - this was due to not having set ""ows_geomtype"" ""Geometry"" in the layer metadata, rather than any issue with the code.
See ows/wfs_geomtype.
Note I used MSSQL for the tests as empty geometries from WKT using CONNECTION OGR always got converted to geometries, e.g. an empty point would become POINT (0, 0), I believe due to the following line:
https://github.com/mapserver/mapserver/blob/1ca57ae8f9bca01e80dbe61185d919996a8886b0/mapogr.cpp#L227",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6139,2020-09-17T21:39:15Z,2020-09-22T21:35:55Z,2020-09-23T12:25:59Z,MERGED,True,38,9,4,https://github.com/geographika,Allow Repeated LAYERs in WMS Filters,4,[],https://github.com/mapserver/mapserver/pull/6139,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6139,"This pull request allows separate filters to be applied to the same LAYER using the WMS protocol. Fixes #5981.
Previously LAYERS=layer1,layer1&FILTER=(filter1),(filter2) caused a corrupt memory crash.
Duplicated names in a WMS request are handled by creating a new LAYER copy in the MAP. The code now applies the first filter found to the first instance of the layer name, and then applies any subsequent filters based on the index in the LAYER list when creating the layer copies. This approach works as the LAYER and FILTER parameters must have the same number of items, and are listed in the same order, so the layer at index x has a corresponding filter at index x.
2 new msautotests have been added to check for this use case.
Pull request also fixes a few comment typos around the update code.
This is a possible candidate for a backport as the current code will currently crash for this use case.","This pull request allows separate filters to be applied to the same LAYER using the WMS protocol. Fixes #5981.
Previously LAYERS=layer1,layer1&FILTER=(filter1),(filter2) caused a corrupt memory crash.
Duplicated names in a WMS request are handled by creating a new LAYER copy in the MAP. The code now applies the first filter found to the first instance of the layer name, and then applies any subsequent filters based on the index in the LAYER list when creating the layer copies. This approach works as the LAYER and FILTER parameters must have the same number of items, and are listed in the same order, so the layer at index x has a corresponding filter at index x.
2 new msautotests have been added to check for this use case.
Pull request also fixes a few comment typos around the update code.
This is a possible candidate for a backport as the current code will currently crash for this use case.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6140,2020-09-19T23:29:57Z,2020-09-22T21:37:28Z,2021-03-18T19:31:52Z,MERGED,True,24,53,2,https://github.com/geographika,Add property docstrings to classObj,1,[],https://github.com/mapserver/mapserver/pull/6140,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6140,"This pull request adds docstrings to the classObj that will be available to the MapScript API docs as part of RFC 132.
The SWIG  %feature(""docstring""... approach has been switched to using Doxygen-style strings, which are less intrusive, and better match standard C code comments.
A few rules are required to ensure these comments are carried to the Sphinx documentation:

///< is used to apply a comment to the preceding code (see Doxygen docs)
the new MapScript API docs will make use of the Sphinx autosummary module to display class properties. Note this only takes text up to the first period in a docstring - see for example this issue, so all docstrings avoid the . character.
asterisks required for RST bold text, e.g. **immutable** needs to be escaped to get past the Doxygen parser into the Python property docstrings

If there are any reservations on adding the docstrings to mapserver.h for other classes please let me know now before updating further classes.
Output of these comments will appear in the proposed MapScript API docs similar to image below:","This pull request adds docstrings to the classObj that will be available to the MapScript API docs as part of RFC 132.
The SWIG  %feature(""docstring""... approach has been switched to using Doxygen-style strings, which are less intrusive, and better match standard C code comments.
A few rules are required to ensure these comments are carried to the Sphinx documentation:

///< is used to apply a comment to the preceding code (see Doxygen docs)
the new MapScript API docs will make use of the Sphinx autosummary module to display class properties. Note this only takes text up to the first period in a docstring - see for example this issue, so all docstrings avoid the . character.
asterisks required for RST bold text, e.g. **immutable** needs to be escaped to get past the Doxygen parser into the Python property docstrings

If there are any reservations on adding the docstrings to mapserver.h for other classes please let me know now before updating further classes.
Output of these comments will appear in the proposed MapScript API docs similar to image below:",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6141,2020-09-21T19:43:29Z,2020-09-21T20:02:41Z,2020-09-21T20:02:42Z,CLOSED,False,4521,4506,18,https://github.com/jmckenna,add check-crlf action,2,[],https://github.com/mapserver/mapserver/pull/6141,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6141,enables check-crlf Github action to verify that all files have a LF linefeed,enables check-crlf Github action to verify that all files have a LF linefeed,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6141,2020-09-21T19:43:29Z,2020-09-21T20:02:41Z,2020-09-21T20:02:42Z,CLOSED,False,4521,4506,18,https://github.com/jmckenna,add check-crlf action,2,[],https://github.com/mapserver/mapserver/pull/6141,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6141#issuecomment-696341471,enables check-crlf Github action to verify that all files have a LF linefeed,"For this to work with our source we need to exclude directories or filetypes (there is a PR in check-crlf for this, will monitor there).  For now closing this PR.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6142,2020-09-22T21:36:23Z,2020-09-22T21:54:30Z,2020-09-22T21:54:31Z,CLOSED,False,61,6,4,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Allow Repeated LAYERs in WMS Filters,1,[],https://github.com/mapserver/mapserver/pull/6142,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6142,Backport 63f9d77 from #6139,Backport 63f9d77 from #6139,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6142,2020-09-22T21:36:23Z,2020-09-22T21:54:30Z,2020-09-22T21:54:31Z,CLOSED,False,61,6,4,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Allow Repeated LAYERs in WMS Filters,1,[],https://github.com/mapserver/mapserver/pull/6142,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/6142#issuecomment-697002842,Backport 63f9d77 from #6139,There are merge conflicts when attempting to backport. Going to add this to master/8.0 release only.,True,{'THUMBS_UP': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6143,2020-09-22T22:06:20Z,2020-09-22T22:34:25Z,2020-09-22T22:34:32Z,MERGED,True,170,170,9,https://github.com/geographika,EOL conversion from CRLF to LF,2,[],https://github.com/mapserver/mapserver/pull/6143,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6143,"Change CRLF to LF for end-of-line style for MapScript and MSSQL files. No other changes in this pull request.
See https://github.com/MapServer/MapServer/runs/1145934364 for full list.","Change CRLF to LF for end-of-line style for MapScript and MSSQL files. No other changes in this pull request.
See https://github.com/MapServer/MapServer/runs/1145934364 for full list.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6143,2020-09-22T22:06:20Z,2020-09-22T22:34:25Z,2020-09-22T22:34:32Z,MERGED,True,170,170,9,https://github.com/geographika,EOL conversion from CRLF to LF,2,[],https://github.com/mapserver/mapserver/pull/6143,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6143#issuecomment-697009296,"Change CRLF to LF for end-of-line style for MapScript and MSSQL files. No other changes in this pull request.
See https://github.com/MapServer/MapServer/runs/1145934364 for full list.","yes I have the changes locally also, as part of that PR that I closed, but was waiting until the check-crlf maintainer approves the PR.  But good to get moving on it! :)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6143,2020-09-22T22:06:20Z,2020-09-22T22:34:25Z,2020-09-22T22:34:32Z,MERGED,True,170,170,9,https://github.com/geographika,EOL conversion from CRLF to LF,2,[],https://github.com/mapserver/mapserver/pull/6143,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/6143#issuecomment-697010627,"Change CRLF to LF for end-of-line style for MapScript and MSSQL files. No other changes in this pull request.
See https://github.com/MapServer/MapServer/runs/1145934364 for full list.",Thought I'd fix the ones I probably introduced CRLF into.. - feel free to close this one if easier.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6143,2020-09-22T22:06:20Z,2020-09-22T22:34:25Z,2020-09-22T22:34:32Z,MERGED,True,170,170,9,https://github.com/geographika,EOL conversion from CRLF to LF,2,[],https://github.com/mapserver/mapserver/pull/6143,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/6143#issuecomment-697017904,"Change CRLF to LF for end-of-line style for MapScript and MSSQL files. No other changes in this pull request.
See https://github.com/MapServer/MapServer/runs/1145934364 for full list.",thanks @geographika !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6144,2020-09-23T14:01:23Z,2020-09-23T14:05:14Z,2020-09-23T14:15:24Z,CLOSED,False,4407,4392,13,https://github.com/jmckenna,change to LF,16,[],https://github.com/mapserver/mapserver/pull/6144,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6144,"change more files from CRLF to LF
in preparation to implement the check-crlf Github action in the future

once check-crlf is enhanced to exclude directories or filetypes (such as our msautotest .pdf or .tab files)","change more files from CRLF to LF
in preparation to implement the check-crlf Github action in the future

once check-crlf is enhanced to exclude directories or filetypes (such as our msautotest .pdf or .tab files)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6144,2020-09-23T14:01:23Z,2020-09-23T14:05:14Z,2020-09-23T14:15:24Z,CLOSED,False,4407,4392,13,https://github.com/jmckenna,change to LF,16,[],https://github.com/mapserver/mapserver/pull/6144,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6144#issuecomment-697409178,"change more files from CRLF to LF
in preparation to implement the check-crlf Github action in the future

once check-crlf is enhanced to exclude directories or filetypes (such as our msautotest .pdf or .tab files)","oops more issues, sorry for noise...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6145,2020-09-23T14:46:56Z,2020-09-23T15:02:52Z,2020-09-23T15:02:52Z,MERGED,True,4392,4392,12,https://github.com/jmckenna,change remaining source files to LF linefeeds from CRLF,2,[],https://github.com/mapserver/mapserver/pull/6145,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6145,"this is in preparation for the future implementation of the check-crlf Github action

check-crlf is being enhanced to exclude directories and filetypes (such as our msautotest *.pdf and *.tab)","this is in preparation for the future implementation of the check-crlf Github action

check-crlf is being enhanced to exclude directories and filetypes (such as our msautotest *.pdf and *.tab)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6146,2020-09-24T10:24:06Z,2020-09-24T11:04:08Z,2020-09-24T11:04:08Z,MERGED,True,1,1,1,https://github.com/rouault,FindOracle.cmake: add support for OCI 19,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6146,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6146,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6147,2020-09-24T11:04:34Z,2020-09-24T11:54:43Z,2020-09-24T11:54:43Z,MERGED,True,1,1,1,https://github.com/MapServer-backport-bot,[Backport branch-7-6] FindOracle.cmake: add support for OCI 19,1,[],https://github.com/mapserver/mapserver/pull/6147,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6147,Backport 39adc75 from #6146,Backport 39adc75 from #6146,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6148,2020-09-25T05:18:02Z,2020-10-03T22:38:53Z,2020-10-03T22:38:54Z,MERGED,True,2,3,1,https://github.com/wicksell,Don't remove all temporary memory files for WMS layers before creating a new,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6148,https://github.com/wicksell,1,https://github.com/MapServer/MapServer/pull/6148,"When WMS layers use memory files as temporary storage we can't delete all existing memory files before creating a new. This will generate a lot of ""Unable to access file..."" errors in a multi-threded application that uses MapScript.
However, we can always remove the temporary memory files even if the layer has debug enabled.","When WMS layers use memory files as temporary storage we can't delete all existing memory files before creating a new. This will generate a lot of ""Unable to access file..."" errors in a multi-threded application that uses MapScript.
However, we can always remove the temporary memory files even if the layer has debug enabled.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6149,2020-09-25T10:04:00Z,2020-10-03T22:26:09Z,2020-10-03T22:26:09Z,MERGED,True,20,0,1,https://github.com/wicksell,Add more locking to global font cache,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6149,https://github.com/wicksell,1,https://github.com/MapServer/MapServer/pull/6149,"We had a lot of errors like msGetGlyphByIndex(): General error message. unable to load glyph 36d for
font ""arial"" when using MapServer via MapScript in a multithreaded application. We solved this by adding locks to msGetGlyphIndex() and msGetGlyphByIndex() similar to those used in msGetGlyphOutline().","We had a lot of errors like msGetGlyphByIndex(): General error message. unable to load glyph 36d for
font ""arial"" when using MapServer via MapScript in a multithreaded application. We solved this by adding locks to msGetGlyphIndex() and msGetGlyphByIndex() similar to those used in msGetGlyphOutline().",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6150,2020-09-25T11:13:41Z,2020-09-29T07:49:09Z,2020-09-29T12:07:11Z,MERGED,True,148,21,3,https://github.com/wicksell,"Fixes for using none ascii characters in Sql Server connection strings, queries and results",3,[],https://github.com/mapserver/mapserver/pull/6150,https://github.com/wicksell,1,https://github.com/MapServer/MapServer/pull/6150,"There has been an encoding problem in the SQL Server plugin. Queries used SQLExecDirect instead of SQLExecDirectW making the plugin dependent on that the systems locale matched the encoding of the map-file. For Swedish characters on Swedish Windows the map file needed to be in ISO-8859-1 but other connections such as PostGIS reguire the map-file to be in UTF-8. So combining different type of connections was a problem. The plugin was also using a bad pattern when reading attributes from SQL Server, see https://docs.microsoft.com/en-us/sql/relational-databases/native-client/features/odbc-driver-behavior-change-when-handling-character-conversions?view=sql-server-ver15","There has been an encoding problem in the SQL Server plugin. Queries used SQLExecDirect instead of SQLExecDirectW making the plugin dependent on that the systems locale matched the encoding of the map-file. For Swedish characters on Swedish Windows the map file needed to be in ISO-8859-1 but other connections such as PostGIS reguire the map-file to be in UTF-8. So combining different type of connections was a problem. The plugin was also using a bad pattern when reading attributes from SQL Server, see https://docs.microsoft.com/en-us/sql/relational-databases/native-client/features/odbc-driver-behavior-change-when-handling-character-conversions?view=sql-server-ver15",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6150,2020-09-25T11:13:41Z,2020-09-29T07:49:09Z,2020-09-29T12:07:11Z,MERGED,True,148,21,3,https://github.com/wicksell,"Fixes for using none ascii characters in Sql Server connection strings, queries and results",3,[],https://github.com/mapserver/mapserver/pull/6150,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6150#issuecomment-700658109,"There has been an encoding problem in the SQL Server plugin. Queries used SQLExecDirect instead of SQLExecDirectW making the plugin dependent on that the systems locale matched the encoding of the map-file. For Swedish characters on Swedish Windows the map file needed to be in ISO-8859-1 but other connections such as PostGIS reguire the map-file to be in UTF-8. So combining different type of connections was a problem. The plugin was also using a bad pattern when reading attributes from SQL Server, see https://docs.microsoft.com/en-us/sql/relational-databases/native-client/features/odbc-driver-behavior-change-when-handling-character-conversions?view=sql-server-ver15",thanks @wicksell !!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6151,2020-09-25T11:15:16Z,2020-09-25T19:52:06Z,2020-09-25T20:34:03Z,MERGED,True,2,2,1,https://github.com/wicksell,Make it possible to send scale_independent to drawLegend via MapScript,1,[],https://github.com/mapserver/mapserver/pull/6151,https://github.com/wicksell,1,https://github.com/MapServer/MapServer/pull/6151,This make it possible to create a legend for all layers even if they are not within scale range.,This make it possible to create a legend for all layers even if they are not within scale range.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6151,2020-09-25T11:15:16Z,2020-09-25T19:52:06Z,2020-09-25T20:34:03Z,MERGED,True,2,2,1,https://github.com/wicksell,Make it possible to send scale_independent to drawLegend via MapScript,1,[],https://github.com/mapserver/mapserver/pull/6151,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/6151#issuecomment-699141966,This make it possible to create a legend for all layers even if they are not within scale range.,Thanks @wicksell !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6152,2020-09-25T20:28:29Z,2020-09-27T09:35:50Z,2020-09-27T09:35:50Z,MERGED,True,51,39,4,https://github.com/geographika,Document the DBFInfo and shapefileObj with Doxygen comments,3,[],https://github.com/mapserver/mapserver/pull/6152,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6152,"A few other minor Doxygen comment fixes included.
Undocumented struct properties hidden from SWIG for DBFInfo and shapefileObj.
Relates to https://www.mapserver.org/fr/development/rfc/ms-rfc-132.html","A few other minor Doxygen comment fixes included.
Undocumented struct properties hidden from SWIG for DBFInfo and shapefileObj.
Relates to https://www.mapserver.org/fr/development/rfc/ms-rfc-132.html",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6156,2020-10-03T21:44:32Z,2020-10-03T21:55:27Z,2020-10-03T21:55:27Z,MERGED,True,10,0,1,https://github.com/geographika,Apply CONFIG PROJ_LIB to GDAL/OGR PROJ settings,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6156,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6156,"Patch provided by @rouault.
See discussions from #6155
This ensures MapServer and GDAL are using the same PROJ_LIB variable when set in a Mapfile using:
CONFIG ""PROJ_LIB"" ""C:\MapServer\bin\proj\SHARE""","Patch provided by @rouault.
See discussions from #6155
This ensures MapServer and GDAL are using the same PROJ_LIB variable when set in a Mapfile using:
CONFIG ""PROJ_LIB"" ""C:\MapServer\bin\proj\SHARE""",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6157,2020-10-03T21:55:52Z,2020-10-03T22:23:07Z,2020-10-03T22:23:08Z,MERGED,True,10,0,1,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Apply CONFIG PROJ_LIB to GDAL/OGR PROJ settings,1,[],https://github.com/mapserver/mapserver/pull/6157,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6157,Backport 8ff4d27 from #6156,Backport 8ff4d27 from #6156,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6158,2020-10-04T11:19:09Z,2020-10-04T12:27:18Z,2020-10-04T12:27:40Z,MERGED,True,1,1,1,https://github.com/szekerest,Remove reference to the missing nmake.opt,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6158,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/6158,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6158,2020-10-04T11:19:09Z,2020-10-04T12:27:18Z,2020-10-04T12:27:40Z,MERGED,True,1,1,1,https://github.com/szekerest,Remove reference to the missing nmake.opt,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6158,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6158#issuecomment-703248377,,thanks @szekerest,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6159,2020-10-04T11:34:25Z,2020-10-04T11:46:21Z,2020-10-04T11:46:22Z,MERGED,True,20,0,1,https://github.com/jmckenna,Enable check-crlf github action,11,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6159,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6159,now also excludes directories (as our msautotest contains a few TAB and PDF files with CRLF),now also excludes directories (as our msautotest contains a few TAB and PDF files with CRLF),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6160,2020-10-04T11:46:49Z,2020-10-04T12:26:03Z,2020-10-04T12:26:03Z,MERGED,True,20,0,1,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Enable check-crlf github action,1,[],https://github.com/mapserver/mapserver/pull/6160,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6160,Backport 71e5576 from #6159,Backport 71e5576 from #6159,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6161,2020-10-04T12:27:40Z,2020-10-04T13:12:55Z,2020-10-04T13:12:55Z,MERGED,True,1,1,1,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Remove reference to the missing nmake.opt,1,[],https://github.com/mapserver/mapserver/pull/6161,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6161,Backport 738c8f0 from #6158,Backport 738c8f0 from #6158,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6162,2020-10-04T13:16:32Z,2020-10-04T13:46:40Z,2020-10-04T13:46:40Z,MERGED,True,304,301,6,https://github.com/rouault,Fix build with WITH_SOS/WFS/WCS/WMS/CLIENT_WMS/CLIENT_WFS=OFF,1,[],https://github.com/mapserver/mapserver/pull/6162,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6162,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6163,2020-10-04T14:00:25Z,2020-10-05T09:27:37Z,2020-10-05T09:27:37Z,MERGED,True,34,19,1,https://github.com/rouault,mapmssql2008.c: fix warnings when building on Linux,1,[],https://github.com/mapserver/mapserver/pull/6163,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6163,"wchar_t is a 4-byte int whereas SQLWCHAR is a 2-byte int...
@geographika / @szekerest  any of you want to test this on Windows  (with WITH_ICONV=ON) ?","wchar_t is a 4-byte int whereas SQLWCHAR is a 2-byte int...
@geographika / @szekerest  any of you want to test this on Windows  (with WITH_ICONV=ON) ?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6163,2020-10-04T14:00:25Z,2020-10-05T09:27:37Z,2020-10-05T09:27:37Z,MERGED,True,34,19,1,https://github.com/rouault,mapmssql2008.c: fix warnings when building on Linux,1,[],https://github.com/mapserver/mapserver/pull/6163,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/6163#issuecomment-703442181,"wchar_t is a 4-byte int whereas SQLWCHAR is a 2-byte int...
@geographika / @szekerest  any of you want to test this on Windows  (with WITH_ICONV=ON) ?","@rouault - built and tested the branch locally on Windows and all appears fine.
For info the MSSQL driver is also tested on Appveyor now using the suite of tests in https://github.com/MapServer/MapServer/tree/master/msautotest/mssql",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6164,2020-10-05T11:26:22Z,2020-10-05T11:41:44Z,2020-10-05T12:45:18Z,MERGED,True,7,0,1,https://github.com/jbo-ads,Add Kitware's APT repository to get recent CMake in Vagrant build,1,[],https://github.com/mapserver/mapserver/pull/6164,https://github.com/jbo-ads,1,https://github.com/MapServer/MapServer/pull/6164,This fixes issue #6154 about failure on Vagrant build.,This fixes issue #6154 about failure on Vagrant build.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6164,2020-10-05T11:26:22Z,2020-10-05T11:41:44Z,2020-10-05T12:45:18Z,MERGED,True,7,0,1,https://github.com/jbo-ads,Add Kitware's APT repository to get recent CMake in Vagrant build,1,[],https://github.com/mapserver/mapserver/pull/6164,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/6164#issuecomment-703591017,This fixes issue #6154 about failure on Vagrant build.,"Thanks @jbo-ads.
It seems the Travis Bionic build has CMake 3.12 (released in 2018) by default. I was wondering why the Bionic VM used an older version.
Hopefully this addition can be removed in the future when 3.12 becomes available on standard channels.
@szekerest - probably same issue for GISInternals builds. Appveyor has a minimum version of 3.12.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6164,2020-10-05T11:26:22Z,2020-10-05T11:41:44Z,2020-10-05T12:45:18Z,MERGED,True,7,0,1,https://github.com/jbo-ads,Add Kitware's APT repository to get recent CMake in Vagrant build,1,[],https://github.com/mapserver/mapserver/pull/6164,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6164#issuecomment-703598349,This fixes issue #6154 about failure on Vagrant build.,@jbo-ads is this related to the failing msautotest for this build? (it is failing on /msautotest/wxs/wms_client_111.map on Travis) Can you take a look?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6164,2020-10-05T11:26:22Z,2020-10-05T11:41:44Z,2020-10-05T12:45:18Z,MERGED,True,7,0,1,https://github.com/jbo-ads,Add Kitware's APT repository to get recent CMake in Vagrant build,1,[],https://github.com/mapserver/mapserver/pull/6164,https://github.com/jbo-ads,4,https://github.com/MapServer/MapServer/pull/6164#issuecomment-703602150,This fixes issue #6154 about failure on Vagrant build.,I can't imagine a way they are related: My fix concerns Vagrant and as far as I know it is not triggered by Travis build.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6164,2020-10-05T11:26:22Z,2020-10-05T11:41:44Z,2020-10-05T12:45:18Z,MERGED,True,7,0,1,https://github.com/jbo-ads,Add Kitware's APT repository to get recent CMake in Vagrant build,1,[],https://github.com/mapserver/mapserver/pull/6164,https://github.com/rouault,5,https://github.com/MapServer/MapServer/pull/6164#issuecomment-703602682,This fixes issue #6154 about failure on Vagrant build.,"(it is failing on /msautotest/wxs/wms_client_111.map on Travis) Can you take a look?

absolutely not related. It is an issue with a request to http://demo.mapserver.org/cgi-bin/wms? that failed randomly",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6164,2020-10-05T11:26:22Z,2020-10-05T11:41:44Z,2020-10-05T12:45:18Z,MERGED,True,7,0,1,https://github.com/jbo-ads,Add Kitware's APT repository to get recent CMake in Vagrant build,1,[],https://github.com/mapserver/mapserver/pull/6164,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/6164#issuecomment-703602840,This fixes issue #6154 about failure on Vagrant build.,I thought so too.  I didn't merge this because of that issue though.  I'll try to re-trigger the build now...thanks @jbo-ads,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6164,2020-10-05T11:26:22Z,2020-10-05T11:41:44Z,2020-10-05T12:45:18Z,MERGED,True,7,0,1,https://github.com/jbo-ads,Add Kitware's APT repository to get recent CMake in Vagrant build,1,[],https://github.com/mapserver/mapserver/pull/6164,https://github.com/jmckenna,7,https://github.com/MapServer/MapServer/pull/6164#issuecomment-703604088,This fixes issue #6154 about failure on Vagrant build.,build has been re-triggered.  thanks @jbo-ads and @rouault,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6164,2020-10-05T11:26:22Z,2020-10-05T11:41:44Z,2020-10-05T12:45:18Z,MERGED,True,7,0,1,https://github.com/jbo-ads,Add Kitware's APT repository to get recent CMake in Vagrant build,1,[],https://github.com/mapserver/mapserver/pull/6164,https://github.com/jmckenna,8,https://github.com/MapServer/MapServer/pull/6164#issuecomment-703607682,This fixes issue #6154 about failure on Vagrant build.,It seems to be a problem with Travis connectivity.   Sorry for the noise.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6165,2020-10-06T09:20:47Z,2020-10-12T19:46:27Z,2020-10-12T19:46:27Z,MERGED,True,5,1,5,https://github.com/rouault,"Raster drawing: use the GDAL mask band when available, even if PROCESSING BANDS=xxx is used (unless PROCESSING USE_MASK_BAND=NO is set)",1,[],https://github.com/mapserver/mapserver/pull/6165,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6165,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6168,2020-10-11T20:55:41Z,2020-12-30T21:05:19Z,2020-12-30T21:05:26Z,MERGED,True,33,21,4,https://github.com/geographika,Document imageObj and hashTableObj,1,[],https://github.com/mapserver/mapserver/pull/6168,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6168,Addition of comments as part of https://mapserver.org/development/rfc/ms-rfc-132.html,Addition of comments as part of https://mapserver.org/development/rfc/ms-rfc-132.html,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6169,2020-10-12T21:12:10Z,2020-10-13T12:17:25Z,2020-10-13T12:21:04Z,MERGED,True,18,51,6,https://github.com/tomkralidis,Metadata: use attribution_title if available (#6166),2,['Metadata'],https://github.com/mapserver/mapserver/pull/6169,https://github.com/tomkralidis,1,https://github.com/MapServer/MapServer/pull/6169,"Implements #6166
In addition, removes erroneous default date output.","Implements #6166
In addition, removes erroneous default date output.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6169,2020-10-12T21:12:10Z,2020-10-13T12:17:25Z,2020-10-13T12:21:04Z,MERGED,True,18,51,6,https://github.com/tomkralidis,Metadata: use attribution_title if available (#6166),2,['Metadata'],https://github.com/mapserver/mapserver/pull/6169,https://github.com/tomkralidis,2,https://github.com/MapServer/MapServer/pull/6169#issuecomment-707395229,"Implements #6166
In addition, removes erroneous default date output.",Thanks for the feedback.  Split into two commits with updated test.,True,{'THUMBS_UP': ['https://github.com/rouault']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6169,2020-10-12T21:12:10Z,2020-10-13T12:17:25Z,2020-10-13T12:21:04Z,MERGED,True,18,51,6,https://github.com/tomkralidis,Metadata: use attribution_title if available (#6166),2,['Metadata'],https://github.com/mapserver/mapserver/pull/6169,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6169#issuecomment-707699195,"Implements #6166
In addition, removes erroneous default date output.","thanks @tomkralidis Again, although it is only case, maybe rename your local repository from 'mapserver' to 'MapServer', just in case it makes the other Github tools like backport-bot choke down the road (although this PR will not be backported).   thanks again!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6169,2020-10-12T21:12:10Z,2020-10-13T12:17:25Z,2020-10-13T12:21:04Z,MERGED,True,18,51,6,https://github.com/tomkralidis,Metadata: use attribution_title if available (#6166),2,['Metadata'],https://github.com/mapserver/mapserver/pull/6169,https://github.com/tomkralidis,4,https://github.com/MapServer/MapServer/pull/6169#issuecomment-707701182,"Implements #6166
In addition, removes erroneous default date output.","Thanks again @jmckenna, done: https://github.com/tomkralidis/MapServer",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6171,2020-10-13T14:24:55Z,2020-10-13T20:12:09Z,2020-10-13T20:12:09Z,MERGED,True,0,1,1,https://github.com/rouault,WFS 1.1/2.0: do not write empty ows:WGS84BoundingBox element when layer extent is unknown,1,[],https://github.com/mapserver/mapserver/pull/6171,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6171,… which is non-conformant with WFS XML schema (fix #6170),… which is non-conformant with WFS XML schema (fix #6170),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6179,2020-11-18T23:12:24Z,2020-12-02T18:45:21Z,2020-12-02T18:45:21Z,CLOSED,False,0,0,0,https://github.com/jmckenna,remove USE_PROJ check for mode=tile,0,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6179,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6179,"this removes the USE_PROJ check in maptile.h, so that mode=tile can be enabled
also adds a dedicated test in msautotest for mode=tile
tested on Ubuntu, Windows for master and branch-7-6 (both the MODE=tile normally, and also through msautotest)
fixes /issues/6178","this removes the USE_PROJ check in maptile.h, so that mode=tile can be enabled
also adds a dedicated test in msautotest for mode=tile
tested on Ubuntu, Windows for master and branch-7-6 (both the MODE=tile normally, and also through msautotest)
fixes /issues/6178",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6180,2020-11-19T18:54:29Z,2021-07-02T13:19:04Z,2021-07-20T20:59:53Z,MERGED,True,32787,109,73,https://github.com/sdlime,OGC API Proof-of-Concept,128,['Work in progress'],https://github.com/mapserver/mapserver/pull/6180,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/6180,"Initial work for OGC API support via the MapServer API following the implementation notes described in https://github.com/mapserver/mapserver/wiki/OGC-API-implementation.
--Steve","Initial work for OGC API support via the MapServer API following the implementation notes described in https://github.com/mapserver/mapserver/wiki/OGC-API-implementation.
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6180,2020-11-19T18:54:29Z,2021-07-02T13:19:04Z,2021-07-20T20:59:53Z,MERGED,True,32787,109,73,https://github.com/sdlime,OGC API Proof-of-Concept,128,['Work in progress'],https://github.com/mapserver/mapserver/pull/6180,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6180#issuecomment-739023166,"Initial work for OGC API support via the MapServer API following the implementation notes described in https://github.com/mapserver/mapserver/wiki/OGC-API-implementation.
--Steve",For draft RFC discussion see: https://github.com/mapserver/mapserver/wiki/OGC-API-RFC-Draft,True,{'THUMBS_UP': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6180,2020-11-19T18:54:29Z,2021-07-02T13:19:04Z,2021-07-20T20:59:53Z,MERGED,True,32787,109,73,https://github.com/sdlime,OGC API Proof-of-Concept,128,['Work in progress'],https://github.com/mapserver/mapserver/pull/6180,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6180#issuecomment-839816559,"Initial work for OGC API support via the MapServer API following the implementation notes described in https://github.com/mapserver/mapserver/wiki/OGC-API-implementation.
--Steve","An early view of the (features/WFS equivalent) collection, as most readers will not have seen this yet...",True,{'HOORAY': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6180,2020-11-19T18:54:29Z,2021-07-02T13:19:04Z,2021-07-20T20:59:53Z,MERGED,True,32787,109,73,https://github.com/sdlime,OGC API Proof-of-Concept,128,['Work in progress'],https://github.com/mapserver/mapserver/pull/6180,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/6180#issuecomment-839907687,"Initial work for OGC API support via the MapServer API following the implementation notes described in https://github.com/mapserver/mapserver/wiki/OGC-API-implementation.
--Steve","@sdlime I can't seem to get collections/ocean/items?f=json return anything but an error, even though I set gml_featureid, testing with various formats I get the same error (SpatiaLite, GeoJSON, shp) :
{""code"":""ServerError"",""description"":""Error getting feature. Missing required featureid metadata.""}

I'm wondering if this is my local issue (or if this should be working at all, yet).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6180,2020-11-19T18:54:29Z,2021-07-02T13:19:04Z,2021-07-20T20:59:53Z,MERGED,True,32787,109,73,https://github.com/sdlime,OGC API Proof-of-Concept,128,['Work in progress'],https://github.com/mapserver/mapserver/pull/6180,https://github.com/sdlime,5,https://github.com/MapServer/MapServer/pull/6180#issuecomment-839926863,"Initial work for OGC API support via the MapServer API following the implementation notes described in https://github.com/mapserver/mapserver/wiki/OGC-API-implementation.
--Steve","I'm wondering if this is my local issue (or if this should be working at all, yet).

It should be working but I neglected to check the gml namespace - just oga, ows and wfs. If you use any of those it should work. I also just pushed a fix.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6180,2020-11-19T18:54:29Z,2021-07-02T13:19:04Z,2021-07-20T20:59:53Z,MERGED,True,32787,109,73,https://github.com/sdlime,OGC API Proof-of-Concept,128,['Work in progress'],https://github.com/mapserver/mapserver/pull/6180,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/6180#issuecomment-839946714,"Initial work for OGC API support via the MapServer API following the implementation notes described in https://github.com/mapserver/mapserver/wiki/OGC-API-implementation.
--Steve","Confirmed the fixes, thanks!  A similar problem still exists for collections/ocean/items?f=html :
{""code"":""ConfigError"",""description"":""Template rendering error. [inja.exception.render_error] (at 30:110) variable 'feature.id' not found (collection-items.html).""}",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6180,2020-11-19T18:54:29Z,2021-07-02T13:19:04Z,2021-07-20T20:59:53Z,MERGED,True,32787,109,73,https://github.com/sdlime,OGC API Proof-of-Concept,128,['Work in progress'],https://github.com/mapserver/mapserver/pull/6180,https://github.com/sdlime,7,https://github.com/MapServer/MapServer/pull/6180#issuecomment-839978660,"Initial work for OGC API support via the MapServer API following the implementation notes described in https://github.com/mapserver/mapserver/wiki/OGC-API-implementation.
--Steve","Confirmed the fixes, thanks! A similar problem still exists for collections/ocean/items?f=html :
{""code"":""ConfigError"",""description"":""Template rendering error. [inja.exception.render_error] (at 30:110) variable 'feature.id' not found (collection-items.html).""}


I believe that means the item you reference in gml_featureid doesn't exist in the data. Should be an explicit error but that's how I was able to trigger the exact error message. Will add that as a todo...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6180,2020-11-19T18:54:29Z,2021-07-02T13:19:04Z,2021-07-20T20:59:53Z,MERGED,True,32787,109,73,https://github.com/sdlime,OGC API Proof-of-Concept,128,['Work in progress'],https://github.com/mapserver/mapserver/pull/6180,https://github.com/jmckenna,8,https://github.com/MapServer/MapServer/pull/6180#issuecomment-840025701,"Initial work for OGC API support via the MapServer API following the implementation notes described in https://github.com/mapserver/mapserver/wiki/OGC-API-implementation.
--Steve","I believe that means the item you reference in gml_featureid doesn't exist in the data. Should be an explicit error but that's how I was able to trigger the exact error message. Will add that as a todo...

Your last change now at least gives me the same error for JSON and HTML (""Error getting feature. Feature id not found.""}  This same metadata works for WMS/GetFeatureInfo, for a long time, but I will do more testing here now with WFS and then with OGCAPI, with this metadata.  Thanks!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6180,2020-11-19T18:54:29Z,2021-07-02T13:19:04Z,2021-07-20T20:59:53Z,MERGED,True,32787,109,73,https://github.com/sdlime,OGC API Proof-of-Concept,128,['Work in progress'],https://github.com/mapserver/mapserver/pull/6180,https://github.com/sdlime,9,https://github.com/MapServer/MapServer/pull/6180#issuecomment-840031515,"Initial work for OGC API support via the MapServer API following the implementation notes described in https://github.com/mapserver/mapserver/wiki/OGC-API-implementation.
--Steve","I believe that means the item you reference in gml_featureid doesn't exist in the data. Should be an explicit error but that's how I was able to trigger the exact error message. Will add that as a todo...

Your last change now at least gives me the same error for JSON and HTML (""Error getting feature. Feature id not found.""} This same metadata works for WMS/GetFeatureInfo, for a long time, but I will do more testing here now with WFS and then with OGCAPI, with this metadata. Thanks!

There certainly could be differences between the API and WFS. The check I added simply looks to see if the value referenced by gml_featureid is in the list of items associated with the layer (case-insensitive comparison). If not, then the error you see is generated. The query associated with /collections/{collection}/items is a bbox filter so the error isn't trapped until the first feature is processed (as things sit now).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6180,2020-11-19T18:54:29Z,2021-07-02T13:19:04Z,2021-07-20T20:59:53Z,MERGED,True,32787,109,73,https://github.com/sdlime,OGC API Proof-of-Concept,128,['Work in progress'],https://github.com/mapserver/mapserver/pull/6180,https://github.com/jmckenna,10,https://github.com/MapServer/MapServer/pull/6180#issuecomment-840064164,"Initial work for OGC API support via the MapServer API following the implementation notes described in https://github.com/mapserver/mapserver/wiki/OGC-API-implementation.
--Steve","There certainly could be differences between the API and WFS. The check I added simply looks to see if the value referenced by gml_featureid is in the list of items associated with the layer (case-insensitive comparison). If not, then the error you see is generated. The query associated with /collections/{collection}/items is a bbox filter so the error isn't trapped until the first feature is processed (as things sit now).

You're right, it seems to be a data issue, but your changes helped.  Will try with other data before I go crazy here ha.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6180,2020-11-19T18:54:29Z,2021-07-02T13:19:04Z,2021-07-20T20:59:53Z,MERGED,True,32787,109,73,https://github.com/sdlime,OGC API Proof-of-Concept,128,['Work in progress'],https://github.com/mapserver/mapserver/pull/6180,https://github.com/jmckenna,11,https://github.com/MapServer/MapServer/pull/6180#issuecomment-840079390,"Initial work for OGC API support via the MapServer API following the implementation notes described in https://github.com/mapserver/mapserver/wiki/OGC-API-implementation.
--Steve","Thanks Steve, maybe it was a 'comedy of errors' on my side.  It works now! (this is SpatiaLite)   (also, I enjoy the 'map goes here' in the code, ha)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6180,2020-11-19T18:54:29Z,2021-07-02T13:19:04Z,2021-07-20T20:59:53Z,MERGED,True,32787,109,73,https://github.com/sdlime,OGC API Proof-of-Concept,128,['Work in progress'],https://github.com/mapserver/mapserver/pull/6180,https://github.com/sdlime,12,https://github.com/MapServer/MapServer/pull/6180#issuecomment-840112436,"Initial work for OGC API support via the MapServer API following the implementation notes described in https://github.com/mapserver/mapserver/wiki/OGC-API-implementation.
--Steve","Thanks Steve, maybe it was a 'comedy of errors' on my side. It works now! (this is SpatiaLite) (also, I enjoy the 'map goes here' in the code, ha)

Cool... There are still bits and pieces to add (or steal from @tomkralidis and pygeoapi).",True,{'THUMBS_UP': ['https://github.com/tomkralidis']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6180,2020-11-19T18:54:29Z,2021-07-02T13:19:04Z,2021-07-20T20:59:53Z,MERGED,True,32787,109,73,https://github.com/sdlime,OGC API Proof-of-Concept,128,['Work in progress'],https://github.com/mapserver/mapserver/pull/6180,https://github.com/jmckenna,13,https://github.com/MapServer/MapServer/pull/6180#issuecomment-840115882,"Initial work for OGC API support via the MapServer API following the implementation notes described in https://github.com/mapserver/mapserver/wiki/OGC-API-implementation.
--Steve","Cool... There are still bits and pieces to add (or steal from @tomkralidis and pygeoapi).

Absolutely agreed (the pygeoapi 'master' demo is my go-to), I especially like exposing the provider metadata on the landing page.",True,{'THUMBS_UP': ['https://github.com/tomkralidis']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6180,2020-11-19T18:54:29Z,2021-07-02T13:19:04Z,2021-07-20T20:59:53Z,MERGED,True,32787,109,73,https://github.com/sdlime,OGC API Proof-of-Concept,128,['Work in progress'],https://github.com/mapserver/mapserver/pull/6180,https://github.com/rouault,14,https://github.com/MapServer/MapServer/pull/6180#issuecomment-866053876,"Initial work for OGC API support via the MapServer API following the implementation notes described in https://github.com/mapserver/mapserver/wiki/OGC-API-implementation.
--Steve","@sdlime  In this pull request / your branch, I've just merged main to fix a conflict. And I've issued sdlime#2 against your branch with a number of fixes & enhancements + testing. With them, the GDAL OAPIF driver works against MapServer. With those fixes, I think we should consider merging/squashing this branch into main. The main missing point for conformance is probably the /api endpoint",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6180,2020-11-19T18:54:29Z,2021-07-02T13:19:04Z,2021-07-20T20:59:53Z,MERGED,True,32787,109,73,https://github.com/sdlime,OGC API Proof-of-Concept,128,['Work in progress'],https://github.com/mapserver/mapserver/pull/6180,https://github.com/sdlime,15,https://github.com/MapServer/MapServer/pull/6180#issuecomment-866061194,"Initial work for OGC API support via the MapServer API following the implementation notes described in https://github.com/mapserver/mapserver/wiki/OGC-API-implementation.
--Steve","@sdlime In this pull request / your branch, I've just merged main to fix a conflict. And I've issued sdlime#2 against your branch with a number of fixes & enhancements + testing. With them, the GDAL OAPIF driver works against MapServer. With those fixes, I think we should consider merging/squashing this branch into main. The main missing point for conformance is probably the /api endpoint

Thanks so much for the pull request - huge help getting over the hump. I'll review ASAP. Yes, the /api or /schema or whatever we want to call it endpoint is on my ""todo"" list. Along with:

updating the inja .hpp file, there was a bug fix that simplifies some of the templating
adding tests that stress the implementation - bad endpoints, signatures, template errors, etc...

That work can be added post-merge though.
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6180,2020-11-19T18:54:29Z,2021-07-02T13:19:04Z,2021-07-20T20:59:53Z,MERGED,True,32787,109,73,https://github.com/sdlime,OGC API Proof-of-Concept,128,['Work in progress'],https://github.com/mapserver/mapserver/pull/6180,https://github.com/rouault,16,https://github.com/MapServer/MapServer/pull/6180#issuecomment-867837205,"Initial work for OGC API support via the MapServer API following the implementation notes described in https://github.com/mapserver/mapserver/wiki/OGC-API-implementation.
--Steve",/api endpoint implementation available in sdlime#3,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6180,2020-11-19T18:54:29Z,2021-07-02T13:19:04Z,2021-07-20T20:59:53Z,MERGED,True,32787,109,73,https://github.com/sdlime,OGC API Proof-of-Concept,128,['Work in progress'],https://github.com/mapserver/mapserver/pull/6180,https://github.com/rouault,17,https://github.com/MapServer/MapServer/pull/6180#issuecomment-867997262,"Initial work for OGC API support via the MapServer API following the implementation notes described in https://github.com/mapserver/mapserver/wiki/OGC-API-implementation.
--Steve","With the latest changes in sdlime#3, CITE testing with the msautotest/api/ogcapi.map passes ! Using the Docker image mentioned at https://cite.opengeospatial.org/teamengine/about/ogcapi-features-1.0/1.0/site/",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6180,2020-11-19T18:54:29Z,2021-07-02T13:19:04Z,2021-07-20T20:59:53Z,MERGED,True,32787,109,73,https://github.com/sdlime,OGC API Proof-of-Concept,128,['Work in progress'],https://github.com/mapserver/mapserver/pull/6180,https://github.com/geographika,18,https://github.com/MapServer/MapServer/pull/6180#issuecomment-881901488,"Initial work for OGC API support via the MapServer API following the implementation notes described in https://github.com/mapserver/mapserver/wiki/OGC-API-implementation.
--Steve","@sdlime - with a couple of hacks I got results back. Many thanks for implementing this - it opens up the whole of MapServer to a new nice clean web-ready API 🥇
I've a few notes/comments that may be of use to anyone testing the new API. I'll add them here, but happy to put them into a new issue if required.

Layer extents.

http://localhost/mapserver/features/mymap/ogcapi/collections?f=html was returning:
{""code"":""ConfigError"",""description"":""Error getting collection.Unable to get collection bounding box.""}

as noted in the code: throw std::runtime_error(""Unable to get collection bounding box.""); // might be too harsh since extent is optional if any layer is missing a ""ows_extent"" then this error is thrown. Would defaulting to the MAP extent be an option?


I had some trouble with setting the template directory (I assumed it was a permissions issue). All requests were returning `{""code"":""ServerError"",""description"":""General template handling error.""}

In mapogcapi.cpp I added an extra try block:
    outputError(OGCAPI_CONFIG_ERROR, ""Template rendering error. "" + std::string(e.what()) + "" ("" + std::string(filename) + "")."");
    return;
  }
  catch (const inja::InjaError& e) {
      outputError(OGCAPI_CONFIG_ERROR, ""InjaError error. "" + std::string(e.what()) + "" ("" + std::string(filename) + "")."");
      return;
  } catch(...) {
    outputError(OGCAPI_SERVER_ERROR, ""General template handling error."");
    return;
  }
I could then get the actual error which showed it was a path issue. I'm not sure if this additional error should be added for security reasons (it is giving away the path), but it might be good to add additional MapServer logging here.
{""code"":""ConfigError"",""description"":""InjaError error. [inja.exception.file_error] failed accessing file at 'C:/MapServer/apps/html-plainlanding.html' (landing.html).""}
The issue was I had the following setting:
""oga_html_template_directory"" ""C:/MapServer/apps/html-plain""
I had to change this to the following path (note the escaped slash):
""oga_html_template_directory"" ""C:/MapServer/apps/html-plain//""

One of the hyperlinks in the HTML pages was set to http://localhost/mapserver/features/mymap/ogcapi/collections/Projects/collections/Projects?f=json rather than http://localhost/mapserver/features/mymap/ogcapi/collections/Projects?f=json
I'll try and find which template to fix and add a pull request.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6180,2020-11-19T18:54:29Z,2021-07-02T13:19:04Z,2021-07-20T20:59:53Z,MERGED,True,32787,109,73,https://github.com/sdlime,OGC API Proof-of-Concept,128,['Work in progress'],https://github.com/mapserver/mapserver/pull/6180,https://github.com/sdlime,19,https://github.com/MapServer/MapServer/pull/6180#issuecomment-883704560,"Initial work for OGC API support via the MapServer API following the implementation notes described in https://github.com/mapserver/mapserver/wiki/OGC-API-implementation.
--Steve","@geographika, thanks so much for the detailed review - you should be able to run the sdlime/config branch as well for testing.  We should probably turn 1 and 2 into tickets...

This could warrant discussion but I can see what WFS does.
I think there's a todo in the code about adding a trailing slash if it's missing. Can I assume your setting example is from a metadata block and not an environment variable?
If your want to look quickly that's fine, otherwise I can find it. I assuming the issue exists in both the bootstrap 4 and plain template sets.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6183,2020-11-22T17:35:37Z,2020-11-23T16:10:34Z,2020-11-23T16:10:34Z,MERGED,True,17,2,1,https://github.com/rouault,Contour layer: take into account nodata value from GDAL raster (fixes #6182),1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6183,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6183,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6184,2020-11-23T16:11:11Z,2020-11-23T17:45:48Z,2020-11-23T17:45:48Z,MERGED,True,17,2,1,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Contour layer: take into account nodata value from GDAL raster (fixes #6182),1,[],https://github.com/mapserver/mapserver/pull/6184,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6184,Backport 612a9d6 from #6183,Backport 612a9d6 from #6183,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6186,2020-11-25T15:01:27Z,2020-11-25T15:01:46Z,2020-11-25T16:06:06Z,CLOSED,False,46,12,6,https://github.com/jmckenna,Update CMake minimum version required in README,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6186,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6186,"updates INSTALL.CMAKE version required
updates MIGRATION_GUIDE.txt urls
updates README.rst urls","updates INSTALL.CMAKE version required
updates MIGRATION_GUIDE.txt urls
updates README.rst urls",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6187,2020-12-02T19:04:36Z,2020-12-07T17:42:21Z,2020-12-07T17:42:21Z,MERGED,True,39,2,4,https://github.com/jmckenna,remove USE_PROJ check for mode=tile,3,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6187,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6187,"this removes the USE_PROJ check in maptile.h, so that mode=tile can be enabled
also adds a dedicated test in msautotest for mode=tile
tested on Ubuntu, Windows for master and branch-7-6 (both the MODE=tile normally, and also through msautotest)
fixes /issues/6178","this removes the USE_PROJ check in maptile.h, so that mode=tile can be enabled
also adds a dedicated test in msautotest for mode=tile
tested on Ubuntu, Windows for master and branch-7-6 (both the MODE=tile normally, and also through msautotest)
fixes /issues/6178",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6187,2020-12-02T19:04:36Z,2020-12-07T17:42:21Z,2020-12-07T17:42:21Z,MERGED,True,39,2,4,https://github.com/jmckenna,remove USE_PROJ check for mode=tile,3,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6187,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6187#issuecomment-740071678,"this removes the USE_PROJ check in maptile.h, so that mode=tile can be enabled
also adds a dedicated test in msautotest for mode=tile
tested on Ubuntu, Windows for master and branch-7-6 (both the MODE=tile normally, and also through msautotest)
fixes /issues/6178",credit @sdlime for the memory link find (!).,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6188,2020-12-02T19:40:15Z,2020-12-04T15:25:48Z,2020-12-04T15:25:48Z,MERGED,True,14,14,4,https://github.com/jmckenna,Update CMake minimum version required in README,3,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6188,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6188,"updates INSTALL.CMAKE version required
updates MIGRATION_GUIDE.txt urls
updates README.rst urls","updates INSTALL.CMAKE version required
updates MIGRATION_GUIDE.txt urls
updates README.rst urls",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6191,2020-12-04T15:26:17Z,2020-12-04T17:07:31Z,2020-12-04T17:07:31Z,MERGED,True,14,14,4,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Update CMake minimum version required in README,1,[],https://github.com/mapserver/mapserver/pull/6191,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6191,Backport 59c31d2 from #6188,Backport 59c31d2 from #6188,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6192,2020-12-04T21:52:57Z,2020-12-04T23:24:36Z,2020-12-04T23:24:37Z,MERGED,True,7,7,7,https://github.com/jmckenna,[msautotest] switch to https for demo.mapserver.org,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6192,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6192,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6193,2020-12-04T23:25:03Z,2020-12-05T00:49:14Z,2020-12-05T00:49:15Z,MERGED,True,7,7,7,https://github.com/MapServer-backport-bot,[Backport branch-7-6] [msautotest] switch to https for demo.mapserver.org,1,[],https://github.com/mapserver/mapserver/pull/6193,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6193,Backport 75a550e from #6192,Backport 75a550e from #6192,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6194,2020-12-05T16:20:00Z,2020-12-07T12:52:39Z,2020-12-07T12:52:40Z,MERGED,True,27,21,2,https://github.com/jmckenna,[msautotest] update xmlvalidate.py for Python3,3,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6194,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6194,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6195,2020-12-07T12:53:09Z,2020-12-08T16:49:15Z,2020-12-08T16:49:15Z,CLOSED,False,31,21,2,https://github.com/MapServer-backport-bot,[Backport branch-7-6] [msautotest] update xmlvalidate.py for Python3,1,[],https://github.com/mapserver/mapserver/pull/6195,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6195,Backport 5e0381f from #6194,Backport 5e0381f from #6194,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6195,2020-12-07T12:53:09Z,2020-12-08T16:49:15Z,2020-12-08T16:49:15Z,CLOSED,False,31,21,2,https://github.com/MapServer-backport-bot,[Backport branch-7-6] [msautotest] update xmlvalidate.py for Python3,1,[],https://github.com/mapserver/mapserver/pull/6195,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6195#issuecomment-740755273,Backport 5e0381f from #6194,"closing, not worth the pain to handle in the branches other than master/main",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6196,2020-12-07T17:42:48Z,2020-12-07T19:47:17Z,2020-12-07T19:47:18Z,MERGED,True,39,2,4,https://github.com/MapServer-backport-bot,[Backport branch-7-6] remove USE_PROJ check for mode=tile,1,[],https://github.com/mapserver/mapserver/pull/6196,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6196,Backport 55bfcf1 from #6187,Backport 55bfcf1 from #6187,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6197,2020-12-13T17:13:45Z,2020-12-13T17:38:40Z,2020-12-13T17:38:40Z,MERGED,True,5,1,1,https://github.com/jmckenna,[msautotest] update mstestlib for Python3,1,[],https://github.com/mapserver/mapserver/pull/6197,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6197,handle encoding when opening mapfile,handle encoding when opening mapfile,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6198,2020-12-13T21:00:54Z,2020-12-14T11:37:55Z,2020-12-14T11:38:08Z,MERGED,True,2,2,1,https://github.com/timgates42,"docs: fix simple typo, renrdering -> rendering",1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6198,https://github.com/timgates42,1,https://github.com/MapServer/MapServer/pull/6198,"There is a small typo in renderers/agg/include/agg_rendering_buffer.h.
Should read rendering rather than renrdering.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md","There is a small typo in renderers/agg/include/agg_rendering_buffer.h.
Should read rendering rather than renrdering.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6198,2020-12-13T21:00:54Z,2020-12-14T11:37:55Z,2020-12-14T11:38:08Z,MERGED,True,2,2,1,https://github.com/timgates42,"docs: fix simple typo, renrdering -> rendering",1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6198,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6198#issuecomment-744382631,"There is a small typo in renderers/agg/include/agg_rendering_buffer.h.
Should read rendering rather than renrdering.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md",thanks @timgates42 !,True,{'THUMBS_UP': ['https://github.com/timgates42']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6199,2020-12-14T11:38:19Z,2020-12-14T13:20:14Z,2020-12-14T13:20:14Z,MERGED,True,2,2,1,https://github.com/MapServer-backport-bot,"[Backport branch-7-6] docs: fix simple typo, renrdering -> rendering",1,[],https://github.com/mapserver/mapserver/pull/6199,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6199,Backport 6cf513b from #6198,Backport 6cf513b from #6198,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6203,2021-01-12T19:54:24Z,2021-01-15T21:55:25Z,2021-01-15T21:55:25Z,MERGED,True,1,1,1,https://github.com/jmckenna,update license copyright year,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6203,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6203,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6204,2021-01-12T19:57:34Z,2021-01-15T23:31:40Z,2021-01-15T23:31:41Z,MERGED,True,10,0,1,https://github.com/jmckenna,update history in main branch,1,[],https://github.com/mapserver/mapserver/pull/6204,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6204,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6205,2021-01-15T21:55:51Z,2021-01-15T23:31:04Z,2021-01-15T23:31:04Z,MERGED,True,1,1,1,https://github.com/MapServer-backport-bot,[Backport branch-7-6] update license copyright year,1,[],https://github.com/mapserver/mapserver/pull/6205,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6205,Backport 35bc2f3 from #6203,Backport 35bc2f3 from #6203,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6206,2021-01-16T19:34:44Z,2021-01-16T20:36:36Z,2021-01-16T20:36:36Z,MERGED,True,8,4,3,https://github.com/jmckenna,more updates for main/master,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6206,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6206,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6207,2021-01-16T20:37:03Z,2021-01-16T22:53:01Z,2021-01-16T22:53:01Z,MERGED,True,8,4,3,https://github.com/MapServer-backport-bot,[Backport branch-7-6] more updates for main/master,1,[],https://github.com/mapserver/mapserver/pull/6207,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6207,Backport 2ac5a25 from #6206,Backport 2ac5a25 from #6206,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6209,2021-01-20T09:26:34Z,2021-01-22T14:19:09Z,2021-01-22T14:19:09Z,MERGED,True,483,52,9,https://github.com/jaspervercnocke,WFS precision for geometry,6,[],https://github.com/mapserver/mapserver/pull/6209,https://github.com/jaspervercnocke,1,https://github.com/MapServer/MapServer/pull/6209,"adding wfs_geometry_precision parameter to metdata of wfs (web and layer based).
Related issue: #6208","adding wfs_geometry_precision parameter to metdata of wfs (web and layer based).
Related issue: #6208",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6209,2021-01-20T09:26:34Z,2021-01-22T14:19:09Z,2021-01-22T14:19:09Z,MERGED,True,483,52,9,https://github.com/jaspervercnocke,WFS precision for geometry,6,[],https://github.com/mapserver/mapserver/pull/6209,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/6209#issuecomment-763954044,"adding wfs_geometry_precision parameter to metdata of wfs (web and layer based).
Related issue: #6208","Looks good to me @jaspervercnocke - thanks.
For reference (and possibly to add to the docs), as I understand it:

This update will only affect WFS requests using the built-in GML output. Any WFS requests with a different OUTPUTFORMAT (e.g. GeoJSON using OGR) will ignore the new wfs_geometry_precision setting.
Other LAYER METADATA GML geometry settings use the format gml_[geometry name]_XXXX. For an example of reading these values see 
  
    
      MapServer/mapgml.c
    
    
         Line 959
      in
      6883f02
    
  
  
    

        
          
           snprintf(tag, 64, ""%s_occurances"", names[i]); 
        
    
  


However, WEB METADATA doesn't have any gml_ settings, so there would be inconsistencies with either syntax approach.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6210,2021-01-20T12:17:57Z,2021-01-20T12:55:43Z,2021-01-20T12:55:43Z,MERGED,True,2,2,1,https://github.com/jmckenna,update coveralls.io link in README,1,[],https://github.com/mapserver/mapserver/pull/6210,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6210,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6211,2021-01-20T20:13:57Z,2021-01-20T21:42:50Z,2021-01-20T21:42:50Z,MERGED,True,46,3,6,https://github.com/rouault,Enable offset for polygons,6,[],https://github.com/mapserver/mapserver/pull/6211,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6211,Rebase of #6132,Rebase of #6132,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6211,2021-01-20T20:13:57Z,2021-01-20T21:42:50Z,2021-01-20T21:42:50Z,MERGED,True,46,3,6,https://github.com/rouault,Enable offset for polygons,6,[],https://github.com/mapserver/mapserver/pull/6211,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6211#issuecomment-763963798,Rebase of #6132,Thanks @rouault for also including the tests,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6212,2021-01-20T22:52:21Z,2021-01-20T23:21:05Z,2021-01-20T23:21:05Z,MERGED,True,82,14,3,https://github.com/rouault,Fix bug in msQueryByFilter,2,[],https://github.com/mapserver/mapserver/pull/6212,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6212,Follow-up to #5520 + extra bug fix in PostGIS backend,Follow-up to #5520 + extra bug fix in PostGIS backend,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6213,2021-01-20T22:59:50Z,2021-01-22T10:39:23Z,2021-01-22T10:39:23Z,MERGED,True,169,170,169,https://github.com/rouault,Fix label point calculation (#5752),2,[],https://github.com/mapserver/mapserver/pull/6213,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6213,#5753 rebased on top of latest master,#5753 rebased on top of latest master,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6214,2021-01-21T11:39:09Z,2021-01-21T13:28:22Z,2021-01-21T13:28:22Z,MERGED,True,1,1,1,https://github.com/rouault,pytest.ini: explicitly exclude php and myssql sub directories,1,[],https://github.com/mapserver/mapserver/pull/6214,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6214,"For some unknown reason, they are attempted to be accessed when
running 'pytest msautotest' within Vagrant, despite not being
in the white list of testpaths","For some unknown reason, they are attempted to be accessed when
running 'pytest msautotest' within Vagrant, despite not being
in the white list of testpaths",True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6215,2021-01-22T11:43:09Z,2021-01-22T12:27:02Z,2021-01-22T12:27:02Z,MERGED,True,14,2,1,https://github.com/rouault,PROJ >= 6 reprojection: fix use of freed memory when input and output projections are the same,1,[],https://github.com/mapserver/mapserver/pull/6215,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6215,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6216,2021-01-22T12:27:05Z,2021-01-22T13:45:20Z,2021-04-14T13:49:35Z,MERGED,True,14,2,1,https://github.com/rouault,[branch-7-6] PROJ >= 6 reprojection: fix use of freed memory when input and output projections are the same,1,[],https://github.com/mapserver/mapserver/pull/6216,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6216,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6217,2021-01-23T08:55:50Z,2021-01-25T20:02:37Z,2021-01-25T20:02:37Z,MERGED,True,59,57,1,https://github.com/geographika,Document labelObj properties,2,[],https://github.com/mapserver/mapserver/pull/6217,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6217,"Documentation of the labelObj properties as part of RFC 135
Items to note relating to the labelObj and changes in this pull request:

labelLeaderObj *leader; has been hidden from SWIG - to use correctly it would need to have getters and setters added to the bindings (similar to expressionObj expression;)
the following properties are documented in the current SWIG docs but have been removed: autoangle, antialias, backgroundcolor, backgroundshadowcolor, backgroundshadowsizex, backgroundshadowsizey
there is an unused MINLENGTH property that can be set via a Mapfile on a LABEL object. It is currently undocumented as was introduced as part of #2383. Removal of this property could be reviewed as part of the Mapfile syntax cleanup.","Documentation of the labelObj properties as part of RFC 135
Items to note relating to the labelObj and changes in this pull request:

labelLeaderObj *leader; has been hidden from SWIG - to use correctly it would need to have getters and setters added to the bindings (similar to expressionObj expression;)
the following properties are documented in the current SWIG docs but have been removed: autoangle, antialias, backgroundcolor, backgroundshadowcolor, backgroundshadowsizex, backgroundshadowsizey
there is an unused MINLENGTH property that can be set via a Mapfile on a LABEL object. It is currently undocumented as was introduced as part of #2383. Removal of this property could be reviewed as part of the Mapfile syntax cleanup.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6218,2021-01-25T19:58:26Z,2021-01-26T13:05:22Z,2021-01-26T13:05:22Z,MERGED,True,44,0,1,https://github.com/rouault,Add .github/ISSUE_TEMPLATE.md,3,[],https://github.com/mapserver/mapserver/pull/6218,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6218,Largely adapted from GDAL one (which was partly inspired from QGIS one),Largely adapted from GDAL one (which was partly inspired from QGIS one),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6220,2021-01-29T13:51:11Z,2021-01-29T15:49:31Z,2021-01-29T15:49:31Z,MERGED,True,1,1,1,https://github.com/jmckenna,"fix writeStyle(...) for ""GEOMTRANSFORM CENTROID""",1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6220,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6220,"changes by @ahermange
regarding #6219","changes by @ahermange
regarding #6219",True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6221,2021-01-29T15:49:56Z,2021-01-30T00:47:08Z,2021-04-14T13:49:23Z,MERGED,True,1,1,1,https://github.com/MapServer-backport-bot,"[Backport branch-7-6] fix writeStyle(...) for ""GEOMTRANSFORM CENTROID""",1,[],https://github.com/mapserver/mapserver/pull/6221,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6221,Backport 348f306 from #6220,Backport 348f306 from #6220,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6222,2021-01-30T01:04:35Z,2021-01-30T15:22:55Z,2021-01-30T16:56:48Z,MERGED,True,72,7,4,https://github.com/geographika,Add MapScript Python 3.8 Support,4,[],https://github.com/mapserver/mapserver/pull/6222,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6222,"As per #6101
This adds Windows support for Python MapScript 3.8, and testing under Appveyor.
Also tests PHP 7.4 and Python 3.8 on Ubuntu with Travis.
CI build times will increase with this pull request. Python 3.6 is EOL at the end of 2021 so perhaps this could be dropped from the CI?","As per #6101
This adds Windows support for Python MapScript 3.8, and testing under Appveyor.
Also tests PHP 7.4 and Python 3.8 on Ubuntu with Travis.
CI build times will increase with this pull request. Python 3.6 is EOL at the end of 2021 so perhaps this could be dropped from the CI?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6222,2021-01-30T01:04:35Z,2021-01-30T15:22:55Z,2021-01-30T16:56:48Z,MERGED,True,72,7,4,https://github.com/geographika,Add MapScript Python 3.8 Support,4,[],https://github.com/mapserver/mapserver/pull/6222,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6222#issuecomment-770228412,"As per #6101
This adds Windows support for Python MapScript 3.8, and testing under Appveyor.
Also tests PHP 7.4 and Python 3.8 on Ubuntu with Travis.
CI build times will increase with this pull request. Python 3.6 is EOL at the end of 2021 so perhaps this could be dropped from the CI?",thanks @geographika !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6224,2021-02-01T12:35:43Z,2021-02-01T13:43:35Z,2021-02-01T13:43:35Z,MERGED,True,47,54,3,https://github.com/geographika,Document labelCacheObj and associated objects (RFC 132),2,[],https://github.com/mapserver/mapserver/pull/6224,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6224,"This pull request documents labelCacheObj and associated objects properties, which can then be used to generate SWIG API docs as part of RFC 132
Other changes are as follows:


The current MapScript API docs don't currently reflect changes made to the labelling related objects  since the RFC98 changes. There is a 'new' (from 2013) labelCacheSlotObj which now has several of the properties previously associated with labelCacheObj: cachesize, markercachesize, numlabels, nummarkers.


A deprecated property of labelCacheMemberObj and related code has been removed as annotation layers were dropped several versions ago. There is mention of the include_deprecated anywhere else in build scripts or the codebase.


#ifdef include_deprecated
    int shapetype; /* source geometry type, can be removed once annotation layers are dropped */
#endif


labelCacheMemberObj > textSymbolObj - hidden as array would need typemaps for access","This pull request documents labelCacheObj and associated objects properties, which can then be used to generate SWIG API docs as part of RFC 132
Other changes are as follows:


The current MapScript API docs don't currently reflect changes made to the labelling related objects  since the RFC98 changes. There is a 'new' (from 2013) labelCacheSlotObj which now has several of the properties previously associated with labelCacheObj: cachesize, markercachesize, numlabels, nummarkers.


A deprecated property of labelCacheMemberObj and related code has been removed as annotation layers were dropped several versions ago. There is mention of the include_deprecated anywhere else in build scripts or the codebase.


#ifdef include_deprecated
    int shapetype; /* source geometry type, can be removed once annotation layers are dropped */
#endif


labelCacheMemberObj > textSymbolObj - hidden as array would need typemaps for access",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6224,2021-02-01T12:35:43Z,2021-02-01T13:43:35Z,2021-02-01T13:43:35Z,MERGED,True,47,54,3,https://github.com/geographika,Document labelCacheObj and associated objects (RFC 132),2,[],https://github.com/mapserver/mapserver/pull/6224,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6224#issuecomment-770866435,"This pull request documents labelCacheObj and associated objects properties, which can then be used to generate SWIG API docs as part of RFC 132
Other changes are as follows:


The current MapScript API docs don't currently reflect changes made to the labelling related objects  since the RFC98 changes. There is a 'new' (from 2013) labelCacheSlotObj which now has several of the properties previously associated with labelCacheObj: cachesize, markercachesize, numlabels, nummarkers.


A deprecated property of labelCacheMemberObj and related code has been removed as annotation layers were dropped several versions ago. There is mention of the include_deprecated anywhere else in build scripts or the codebase.


#ifdef include_deprecated
    int shapetype; /* source geometry type, can be removed once annotation layers are dropped */
#endif


labelCacheMemberObj > textSymbolObj - hidden as array would need typemaps for access",thanks @geographika !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6225,2021-02-03T13:58:27Z,2021-02-03T15:29:04Z,2021-02-03T16:23:08Z,MERGED,True,98,30,9,https://github.com/rouault,Issue #5508 - Revived ANTIALIAS keyword in STYLE section,3,[],https://github.com/mapserver/mapserver/pull/6225,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6225,#5514 rebased on top of latest master with tab fixes and addition of expected results,#5514 rebased on top of latest master with tab fixes and addition of expected results,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6225,2021-02-03T13:58:27Z,2021-02-03T15:29:04Z,2021-02-03T16:23:08Z,MERGED,True,98,30,9,https://github.com/rouault,Issue #5508 - Revived ANTIALIAS keyword in STYLE section,3,[],https://github.com/mapserver/mapserver/pull/6225,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6225#issuecomment-772538553,#5514 rebased on top of latest master with tab fixes and addition of expected results,thanks @rouault for also including the new tests,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6225,2021-02-03T13:58:27Z,2021-02-03T15:29:04Z,2021-02-03T16:23:08Z,MERGED,True,98,30,9,https://github.com/rouault,Issue #5508 - Revived ANTIALIAS keyword in STYLE section,3,[],https://github.com/mapserver/mapserver/pull/6225,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/6225#issuecomment-772554964,#5514 rebased on top of latest master with tab fixes and addition of expected results,"I had this listed for removal in https://mapserver.org/development/rfc/ms-rfc-133.html - I guess this should not be the case.
Docs currently talk about the GD renderer:
Should TrueType fonts be antialiased. Only useful for GD (gif) rendering. Default is false. Has no effect for the other renderers (where anti-aliasing can not be turned off).
Would the following be correct?
Should antialiasing be applied to the style? For line rendering only",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6225,2021-02-03T13:58:27Z,2021-02-03T15:29:04Z,2021-02-03T16:23:08Z,MERGED,True,98,30,9,https://github.com/rouault,Issue #5508 - Revived ANTIALIAS keyword in STYLE section,3,[],https://github.com/mapserver/mapserver/pull/6225,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/6225#issuecomment-772555700,#5514 rebased on top of latest master with tab fixes and addition of expected results,"Would the following be correct?
Should antialiasing be applied to the style? For line rendering only

looks good to me",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6225,2021-02-03T13:58:27Z,2021-02-03T15:29:04Z,2021-02-03T16:23:08Z,MERGED,True,98,30,9,https://github.com/rouault,Issue #5508 - Revived ANTIALIAS keyword in STYLE section,3,[],https://github.com/mapserver/mapserver/pull/6225,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/6225#issuecomment-772594600,#5514 rebased on top of latest master with tab fixes and addition of expected results,thanks @rouault and @erik-h11 !!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6225,2021-02-03T13:58:27Z,2021-02-03T15:29:04Z,2021-02-03T16:23:08Z,MERGED,True,98,30,9,https://github.com/rouault,Issue #5508 - Revived ANTIALIAS keyword in STYLE section,3,[],https://github.com/mapserver/mapserver/pull/6225,https://github.com/rouault,6,https://github.com/MapServer/MapServer/pull/6225#issuecomment-772634806,#5514 rebased on top of latest master with tab fixes and addition of expected results,"thanks @rouault and @erik-h11 !!

I would have used the ""squash & merge"" button to have a cleaner commit history",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6226,2021-02-04T14:39:43Z,2021-02-04T17:32:09Z,2021-02-04T17:32:09Z,MERGED,True,30,33,4,https://github.com/rouault,Oracle/MSSQL/OGR/PostGIS backends: avoid potential buffer overflows …,1,[],https://github.com/mapserver/mapserver/pull/6226,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6226,"…on large values of type double in expression translation
Based on initial work by @sergmorev done in #5416","…on large values of type double in expression translation
Based on initial work by @sergmorev done in #5416",True,{'HEART': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6226,2021-02-04T14:39:43Z,2021-02-04T17:32:09Z,2021-02-04T17:32:09Z,MERGED,True,30,33,4,https://github.com/rouault,Oracle/MSSQL/OGR/PostGIS backends: avoid potential buffer overflows …,1,[],https://github.com/mapserver/mapserver/pull/6226,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6226#issuecomment-773480370,"…on large values of type double in expression translation
Based on initial work by @sergmorev done in #5416",thanks @rouault & @sergmorev !!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6227,2021-02-05T15:19:01Z,2021-02-09T12:51:01Z,2021-02-09T12:51:02Z,MERGED,True,3234,2743,11,https://github.com/rouault,Add a CONNECTIONTYPE IDW (Inverse Distance Weighted) interpolation method,1,[],https://github.com/mapserver/mapserver/pull/6227,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6227,"Ported from #4989
Co-authored-by: hlherrera.cuba@gmail.com","Ported from #4989
Co-authored-by: hlherrera.cuba@gmail.com",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6227,2021-02-05T15:19:01Z,2021-02-09T12:51:01Z,2021-02-09T12:51:02Z,MERGED,True,3234,2743,11,https://github.com/rouault,Add a CONNECTIONTYPE IDW (Inverse Distance Weighted) interpolation method,1,[],https://github.com/mapserver/mapserver/pull/6227,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6227#issuecomment-775913341,"Ported from #4989
Co-authored-by: hlherrera.cuba@gmail.com",thanks @rouault & @hlherrera !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6229,2021-02-08T12:43:21Z,2021-02-11T14:19:55Z,2021-02-11T23:19:14Z,MERGED,True,71,21,3,https://github.com/wicksell,When using OFFSET -1 -99 the shifted geometry can be a multiline containing multilines,3,[],https://github.com/mapserver/mapserver/pull/6229,https://github.com/wicksell,1,https://github.com/MapServer/MapServer/pull/6229,"While generating tiles for a line layer having a style containing ""OFFSET -1 -99"" we often get the following error.
msGEOSError(): GEOS library error. Geometry must be a Point or LineString
After some investigation we found that this is because the shifted GEOS geometry can be a multiline containing multilines which is not taken into account when converting it into a shape.
The issue can be reproduced with the following command and MAP-file.
shp2img -m test.map -o test.png -all_debug 5
msLoadMap(): 0.000s
msDrawMap(): rendering using outputformat named png24 (AGG/PNG).
msDrawMap(): WMS/WFS set-up and query, 0.000s
msGEOSError(): GEOS library error. Geometry must be a Point or LineString

MAP
    NAME ""Test""
    EXTENT 387200 6540064 399488 6552352
    SIZE 1536 1536
    IMAGETYPE ""png24""
    STATUS ON
    DEFRESOLUTION 96
    RESOLUTION 96
    UNITS METERS
  
    OUTPUTFORMAT
        NAME ""png24""
        MIMETYPE ""image/png""
        DRIVER ""AGG/PNG""
        EXTENSION ""png""
        IMAGEMODE RGBA
        TRANSPARENT TRUE
    END # OUTPUTFORMAT

    PROJECTION
        ""proj=utm""
        ""zone=33""
        ""ellps=GRS80""
        ""towgs84=0,0,0,0,0,0,0""
        ""units=m""
        ""no_defs""
    END # PROJECTION
  
    LAYER
        NAME ""Test""
        PROJECTION
            ""proj=utm""
            ""zone=33""
            ""ellps=GRS80""
            ""towgs84=0,0,0,0,0,0,0""
            ""units=m""
            ""no_defs""
        END # PROJECTION
        STATUS ON
        TYPE LINE
        FEATURE
            POINTS
                387184.7628 6544765.9766500005
                387189.844 6544759.04235
                387215.864 6544756.3572
                387212.7508 6544765.81515
                387183.058 6544782.9486
                387186.706 6544811.9778
            END # POINTS
        END # FEATURE
  
        CLASS
            STYLE
                COLOR 255 0 0
                OFFSET -1 -99
            END # STYLE
        END # CLASS
    END # LAYER
END # MAP","While generating tiles for a line layer having a style containing ""OFFSET -1 -99"" we often get the following error.
msGEOSError(): GEOS library error. Geometry must be a Point or LineString
After some investigation we found that this is because the shifted GEOS geometry can be a multiline containing multilines which is not taken into account when converting it into a shape.
The issue can be reproduced with the following command and MAP-file.
shp2img -m test.map -o test.png -all_debug 5
msLoadMap(): 0.000s
msDrawMap(): rendering using outputformat named png24 (AGG/PNG).
msDrawMap(): WMS/WFS set-up and query, 0.000s
msGEOSError(): GEOS library error. Geometry must be a Point or LineString

MAP
    NAME ""Test""
    EXTENT 387200 6540064 399488 6552352
    SIZE 1536 1536
    IMAGETYPE ""png24""
    STATUS ON
    DEFRESOLUTION 96
    RESOLUTION 96
    UNITS METERS
  
    OUTPUTFORMAT
        NAME ""png24""
        MIMETYPE ""image/png""
        DRIVER ""AGG/PNG""
        EXTENSION ""png""
        IMAGEMODE RGBA
        TRANSPARENT TRUE
    END # OUTPUTFORMAT

    PROJECTION
        ""proj=utm""
        ""zone=33""
        ""ellps=GRS80""
        ""towgs84=0,0,0,0,0,0,0""
        ""units=m""
        ""no_defs""
    END # PROJECTION
  
    LAYER
        NAME ""Test""
        PROJECTION
            ""proj=utm""
            ""zone=33""
            ""ellps=GRS80""
            ""towgs84=0,0,0,0,0,0,0""
            ""units=m""
            ""no_defs""
        END # PROJECTION
        STATUS ON
        TYPE LINE
        FEATURE
            POINTS
                387184.7628 6544765.9766500005
                387189.844 6544759.04235
                387215.864 6544756.3572
                387212.7508 6544765.81515
                387183.058 6544782.9486
                387186.706 6544811.9778
            END # POINTS
        END # FEATURE
  
        CLASS
            STYLE
                COLOR 255 0 0
                OFFSET -1 -99
            END # STYLE
        END # CLASS
    END # LAYER
END # MAP",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6229,2021-02-08T12:43:21Z,2021-02-11T14:19:55Z,2021-02-11T23:19:14Z,MERGED,True,71,21,3,https://github.com/wicksell,When using OFFSET -1 -99 the shifted geometry can be a multiline containing multilines,3,[],https://github.com/mapserver/mapserver/pull/6229,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6229#issuecomment-775196560,"While generating tiles for a line layer having a style containing ""OFFSET -1 -99"" we often get the following error.
msGEOSError(): GEOS library error. Geometry must be a Point or LineString
After some investigation we found that this is because the shifted GEOS geometry can be a multiline containing multilines which is not taken into account when converting it into a shape.
The issue can be reproduced with the following command and MAP-file.
shp2img -m test.map -o test.png -all_debug 5
msLoadMap(): 0.000s
msDrawMap(): rendering using outputformat named png24 (AGG/PNG).
msDrawMap(): WMS/WFS set-up and query, 0.000s
msGEOSError(): GEOS library error. Geometry must be a Point or LineString

MAP
    NAME ""Test""
    EXTENT 387200 6540064 399488 6552352
    SIZE 1536 1536
    IMAGETYPE ""png24""
    STATUS ON
    DEFRESOLUTION 96
    RESOLUTION 96
    UNITS METERS
  
    OUTPUTFORMAT
        NAME ""png24""
        MIMETYPE ""image/png""
        DRIVER ""AGG/PNG""
        EXTENSION ""png""
        IMAGEMODE RGBA
        TRANSPARENT TRUE
    END # OUTPUTFORMAT

    PROJECTION
        ""proj=utm""
        ""zone=33""
        ""ellps=GRS80""
        ""towgs84=0,0,0,0,0,0,0""
        ""units=m""
        ""no_defs""
    END # PROJECTION
  
    LAYER
        NAME ""Test""
        PROJECTION
            ""proj=utm""
            ""zone=33""
            ""ellps=GRS80""
            ""towgs84=0,0,0,0,0,0,0""
            ""units=m""
            ""no_defs""
        END # PROJECTION
        STATUS ON
        TYPE LINE
        FEATURE
            POINTS
                387184.7628 6544765.9766500005
                387189.844 6544759.04235
                387215.864 6544756.3572
                387212.7508 6544765.81515
                387183.058 6544782.9486
                387186.706 6544811.9778
            END # POINTS
        END # FEATURE
  
        CLASS
            STYLE
                COLOR 255 0 0
                OFFSET -1 -99
            END # STYLE
        END # CLASS
    END # LAYER
END # MAP","thanks @wicksell   Please also add a new test into msautotest to handle this case (follow steps at https://mapserver.org/development/tests/autotest.html) as part of your pull request.
(thanks for using inline features for the test case, great!)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6229,2021-02-08T12:43:21Z,2021-02-11T14:19:55Z,2021-02-11T23:19:14Z,MERGED,True,71,21,3,https://github.com/wicksell,When using OFFSET -1 -99 the shifted geometry can be a multiline containing multilines,3,[],https://github.com/mapserver/mapserver/pull/6229,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6229#issuecomment-777860167,"While generating tiles for a line layer having a style containing ""OFFSET -1 -99"" we often get the following error.
msGEOSError(): GEOS library error. Geometry must be a Point or LineString
After some investigation we found that this is because the shifted GEOS geometry can be a multiline containing multilines which is not taken into account when converting it into a shape.
The issue can be reproduced with the following command and MAP-file.
shp2img -m test.map -o test.png -all_debug 5
msLoadMap(): 0.000s
msDrawMap(): rendering using outputformat named png24 (AGG/PNG).
msDrawMap(): WMS/WFS set-up and query, 0.000s
msGEOSError(): GEOS library error. Geometry must be a Point or LineString

MAP
    NAME ""Test""
    EXTENT 387200 6540064 399488 6552352
    SIZE 1536 1536
    IMAGETYPE ""png24""
    STATUS ON
    DEFRESOLUTION 96
    RESOLUTION 96
    UNITS METERS
  
    OUTPUTFORMAT
        NAME ""png24""
        MIMETYPE ""image/png""
        DRIVER ""AGG/PNG""
        EXTENSION ""png""
        IMAGEMODE RGBA
        TRANSPARENT TRUE
    END # OUTPUTFORMAT

    PROJECTION
        ""proj=utm""
        ""zone=33""
        ""ellps=GRS80""
        ""towgs84=0,0,0,0,0,0,0""
        ""units=m""
        ""no_defs""
    END # PROJECTION
  
    LAYER
        NAME ""Test""
        PROJECTION
            ""proj=utm""
            ""zone=33""
            ""ellps=GRS80""
            ""towgs84=0,0,0,0,0,0,0""
            ""units=m""
            ""no_defs""
        END # PROJECTION
        STATUS ON
        TYPE LINE
        FEATURE
            POINTS
                387184.7628 6544765.9766500005
                387189.844 6544759.04235
                387215.864 6544756.3572
                387212.7508 6544765.81515
                387183.058 6544782.9486
                387186.706 6544811.9778
            END # POINTS
        END # FEATURE
  
        CLASS
            STYLE
                COLOR 255 0 0
                OFFSET -1 -99
            END # STYLE
        END # CLASS
    END # LAYER
END # MAP",Thanks @wicksell for including the test.  This will be available as part of the upcoming 8.0 release    Thanks for contributing.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6231,2021-02-11T13:48:15Z,2021-02-11T14:19:34Z,2021-02-11T14:19:34Z,MERGED,True,29,27,2,https://github.com/rouault,WMS: do no require WIDTH/HEIGHT parameters for request=DescribeLayer …,1,[],https://github.com/mapserver/mapserver/pull/6231,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6231,…(fixes #6177),…(fixes #6177),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6232,2021-02-11T14:19:25Z,2021-02-11T15:13:26Z,2021-02-11T15:13:26Z,MERGED,True,1,0,1,https://github.com/rouault,.travis.yml: fix issue with Python 3.6 target,1,[],https://github.com/mapserver/mapserver/pull/6232,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6232,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6232,2021-02-11T14:19:25Z,2021-02-11T15:13:26Z,2021-02-11T15:13:26Z,MERGED,True,1,0,1,https://github.com/rouault,.travis.yml: fix issue with Python 3.6 target,1,[],https://github.com/mapserver/mapserver/pull/6232,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6232#issuecomment-777524113,,thanks @rouault,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6233,2021-02-12T14:51:35Z,2021-02-12T15:29:27Z,2021-02-12T15:29:48Z,MERGED,True,169,0,4,https://github.com/rouault,Added support for the use of tile_map_edge_buffer when using WMS with…,1,[],https://github.com/mapserver/mapserver/pull/6233,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6233,"… tiled=true vendor specific parameter (WMS-C)
This is a rebase of #5199
on top of latest main, with the addition of a test.
Comments of #5199 (comment)
have been only adressed by adding appropriate TODOs in the code.
Co-authored-by: deduikertjes deduikertjes@xs4all.nl","… tiled=true vendor specific parameter (WMS-C)
This is a rebase of #5199
on top of latest main, with the addition of a test.
Comments of #5199 (comment)
have been only adressed by adding appropriate TODOs in the code.
Co-authored-by: deduikertjes deduikertjes@xs4all.nl",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6233,2021-02-12T14:51:35Z,2021-02-12T15:29:27Z,2021-02-12T15:29:48Z,MERGED,True,169,0,4,https://github.com/rouault,Added support for the use of tile_map_edge_buffer when using WMS with…,1,[],https://github.com/mapserver/mapserver/pull/6233,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6233#issuecomment-778263105,"… tiled=true vendor specific parameter (WMS-C)
This is a rebase of #5199
on top of latest main, with the addition of a test.
Comments of #5199 (comment)
have been only adressed by adding appropriate TODOs in the code.
Co-authored-by: deduikertjes deduikertjes@xs4all.nl",thanks @rouault & @deduikertjes  !!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6234,2021-02-15T14:26:04Z,2021-02-17T13:21:06Z,2021-02-17T13:21:15Z,MERGED,True,39,15,2,https://github.com/geographika,Filter out any invalid PATHs when loading Python MapScript,2,[],https://github.com/mapserver/mapserver/pull/6234,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6234,"This avoids import errors on invalid or empty MAPSERVER_DLL_PATH settings.
Also add a Troubleshooting section to the ReadMe that will be displayed at https://pypi.org/project/mapscript/","This avoids import errors on invalid or empty MAPSERVER_DLL_PATH settings.
Also add a Troubleshooting section to the ReadMe that will be displayed at https://pypi.org/project/mapscript/",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6234,2021-02-15T14:26:04Z,2021-02-17T13:21:06Z,2021-02-17T13:21:15Z,MERGED,True,39,15,2,https://github.com/geographika,Filter out any invalid PATHs when loading Python MapScript,2,[],https://github.com/mapserver/mapserver/pull/6234,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6234#issuecomment-780551517,"This avoids import errors on invalid or empty MAPSERVER_DLL_PATH settings.
Also add a Troubleshooting section to the ReadMe that will be displayed at https://pypi.org/project/mapscript/",thanks @geographika !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6237,2021-02-21T23:25:40Z,2021-02-22T13:30:51Z,2021-02-22T13:30:51Z,MERGED,True,119,161,1,https://github.com/geographika,Add labelObj and layerObj comments to mapserver.h,4,[],https://github.com/mapserver/mapserver/pull/6237,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6237,"This pull request adds comments to the layerObj as part of https://mapserver.org/development/rfc/ms-rfc-132.html
Struct variables have been reordered based on SWIG or not SWIG and immutable/mutable. This reduces the many #ifdef scattered throughout the declaration (any issues with this please let me know).
The following have been made immutable as they are custom types that would require getters/setters to be added to work correctly:
expressionObj utfdata;
LayerCompositer *compositer;
hashTableObj connectionoptions;

If connectiontype  is not set using the SWIG function setConnectionType the vtable is not initialized properly - however it is left as mutable as it can be used for INLINE layers and there are tests around this.
Additional changes in the pull request:

Remove the **immutable** flags from the comments - this information can be retrieved automatically when generating the Sphinx API docs
add a header comment for labelCacheSlotObj","This pull request adds comments to the layerObj as part of https://mapserver.org/development/rfc/ms-rfc-132.html
Struct variables have been reordered based on SWIG or not SWIG and immutable/mutable. This reduces the many #ifdef scattered throughout the declaration (any issues with this please let me know).
The following have been made immutable as they are custom types that would require getters/setters to be added to work correctly:
expressionObj utfdata;
LayerCompositer *compositer;
hashTableObj connectionoptions;

If connectiontype  is not set using the SWIG function setConnectionType the vtable is not initialized properly - however it is left as mutable as it can be used for INLINE layers and there are tests around this.
Additional changes in the pull request:

Remove the **immutable** flags from the comments - this information can be retrieved automatically when generating the Sphinx API docs
add a header comment for labelCacheSlotObj",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6237,2021-02-21T23:25:40Z,2021-02-22T13:30:51Z,2021-02-22T13:30:51Z,MERGED,True,119,161,1,https://github.com/geographika,Add labelObj and layerObj comments to mapserver.h,4,[],https://github.com/mapserver/mapserver/pull/6237,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6237#issuecomment-783375174,"This pull request adds comments to the layerObj as part of https://mapserver.org/development/rfc/ms-rfc-132.html
Struct variables have been reordered based on SWIG or not SWIG and immutable/mutable. This reduces the many #ifdef scattered throughout the declaration (any issues with this please let me know).
The following have been made immutable as they are custom types that would require getters/setters to be added to work correctly:
expressionObj utfdata;
LayerCompositer *compositer;
hashTableObj connectionoptions;

If connectiontype  is not set using the SWIG function setConnectionType the vtable is not initialized properly - however it is left as mutable as it can be used for INLINE layers and there are tests around this.
Additional changes in the pull request:

Remove the **immutable** flags from the comments - this information can be retrieved automatically when generating the Sphinx API docs
add a header comment for labelCacheSlotObj",looks good here.  A lot cleaner for sure.  Thanks @geographika !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6238,2021-02-23T22:29:59Z,2021-02-23T23:11:52Z,2021-02-23T23:11:52Z,MERGED,True,27,22,2,https://github.com/geographika,Document legendObj and lineObj,2,[],https://github.com/mapserver/mapserver/pull/6238,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6238,"Documents the legendObj and lineObj structs to make available for autogenerated SWIG docs as part of https://mapserver.org/development/rfc/ms-rfc-132.html
No hidden surprises or changes, although legendObj has a couple of properties not available to SWIG that can be removed when deprecated).","Documents the legendObj and lineObj structs to make available for autogenerated SWIG docs as part of https://mapserver.org/development/rfc/ms-rfc-132.html
No hidden surprises or changes, although legendObj has a couple of properties not available to SWIG that can be removed when deprecated).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6238,2021-02-23T22:29:59Z,2021-02-23T23:11:52Z,2021-02-23T23:11:52Z,MERGED,True,27,22,2,https://github.com/geographika,Document legendObj and lineObj,2,[],https://github.com/mapserver/mapserver/pull/6238,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6238#issuecomment-784579303,"Documents the legendObj and lineObj structs to make available for autogenerated SWIG docs as part of https://mapserver.org/development/rfc/ms-rfc-132.html
No hidden surprises or changes, although legendObj has a couple of properties not available to SWIG that can be removed when deprecated).",thanks @geographika !!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6240,2021-02-24T22:09:26Z,2021-03-01T13:25:03Z,2021-03-01T13:25:03Z,MERGED,True,0,5,1,https://github.com/jmckenna,drop PHP 7.1 + Python 2.7 from TravisCI builds,1,[],https://github.com/mapserver/mapserver/pull/6240,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6240,"PHP 7.1 was end-of-life in 2018, and ended security fixes at end of 2019
Python 2.7 ended security releases at end of 2019

Remaining tests are:

PHP 7.4, 7.3, 7.2
Python 3.8, 3.7, 3.6","PHP 7.1 was end-of-life in 2018, and ended security fixes at end of 2019
Python 2.7 ended security releases at end of 2019

Remaining tests are:

PHP 7.4, 7.3, 7.2
Python 3.8, 3.7, 3.6",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6240,2021-02-24T22:09:26Z,2021-03-01T13:25:03Z,2021-03-01T13:25:03Z,MERGED,True,0,5,1,https://github.com/jmckenna,drop PHP 7.1 + Python 2.7 from TravisCI builds,1,[],https://github.com/mapserver/mapserver/pull/6240,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/6240#issuecomment-785783574,"PHP 7.1 was end-of-life in 2018, and ended security fixes at end of 2019
Python 2.7 ended security releases at end of 2019

Remaining tests are:

PHP 7.4, 7.3, 7.2
Python 3.8, 3.7, 3.6","@jmckenna - is this to speed up the Travis builds or part of dropping Python 2.7 support?
I think we can support Python 2.7 as long as SWIG does.
Note Python 2.7 will still be tested on Appveyor, so maybe that is enough.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6240,2021-02-24T22:09:26Z,2021-03-01T13:25:03Z,2021-03-01T13:25:03Z,MERGED,True,0,5,1,https://github.com/jmckenna,drop PHP 7.1 + Python 2.7 from TravisCI builds,1,[],https://github.com/mapserver/mapserver/pull/6240,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6240#issuecomment-785829558,"PHP 7.1 was end-of-life in 2018, and ended security fixes at end of 2019
Python 2.7 ended security releases at end of 2019

Remaining tests are:

PHP 7.4, 7.3, 7.2
Python 3.8, 3.7, 3.6","@geographika my goal here was to remove long end-of-life versions from the list of tests on TravisCI.  A nice benefit is that it cleans up the total number of tests, and takes a little shorter to complete as you mentioned.  My goal was not to 'officially' remove support for any versions.",True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6242,2021-02-28T23:04:09Z,2021-03-01T13:24:50Z,2021-03-01T13:24:51Z,MERGED,True,86,100,4,https://github.com/geographika,Update mapObj comments and docstring fixes,1,[],https://github.com/mapserver/mapserver/pull/6242,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6242,"Documents the mapObj struct to make available for autogenerated SWIG docs as part of https://mapserver.org/development/rfc/ms-rfc-132.html
Reorders properties to reduce the #ifdef SWIG occurrences.
Also fixes a few of the method docstrings in the .i SWIG files.
No changes to immutable etc. as part of this pull request, although a few properties should be investigated further:

height and width can be set by SWIG. However the Python bindings have custom methods added to set these by the size property: 
  
    
      MapServer/mapscript/python/pyextend.i
    
    
         Line 276
      in
      e0372c3
    
  
  
    

        
          
           def get_height(self): 
        
    
  


int *layerorder; can be set via SWIG but I think should be at least immutable and propbably accessed via methods - again this is the case for the Python bindings: 
  
    
      MapServer/mapscript/python/pyextend.i
    
    
         Line 256
      in
      e0372c3
    
  
  
    

        
          
           int setLayerOrder(PyObject *order) {","Documents the mapObj struct to make available for autogenerated SWIG docs as part of https://mapserver.org/development/rfc/ms-rfc-132.html
Reorders properties to reduce the #ifdef SWIG occurrences.
Also fixes a few of the method docstrings in the .i SWIG files.
No changes to immutable etc. as part of this pull request, although a few properties should be investigated further:

height and width can be set by SWIG. However the Python bindings have custom methods added to set these by the size property: 
  
    
      MapServer/mapscript/python/pyextend.i
    
    
         Line 276
      in
      e0372c3
    
  
  
    

        
          
           def get_height(self): 
        
    
  


int *layerorder; can be set via SWIG but I think should be at least immutable and propbably accessed via methods - again this is the case for the Python bindings: 
  
    
      MapServer/mapscript/python/pyextend.i
    
    
         Line 256
      in
      e0372c3
    
  
  
    

        
          
           int setLayerOrder(PyObject *order) {",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6242,2021-02-28T23:04:09Z,2021-03-01T13:24:50Z,2021-03-01T13:24:51Z,MERGED,True,86,100,4,https://github.com/geographika,Update mapObj comments and docstring fixes,1,[],https://github.com/mapserver/mapserver/pull/6242,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6242#issuecomment-787946358,"Documents the mapObj struct to make available for autogenerated SWIG docs as part of https://mapserver.org/development/rfc/ms-rfc-132.html
Reorders properties to reduce the #ifdef SWIG occurrences.
Also fixes a few of the method docstrings in the .i SWIG files.
No changes to immutable etc. as part of this pull request, although a few properties should be investigated further:

height and width can be set by SWIG. However the Python bindings have custom methods added to set these by the size property: 
  
    
      MapServer/mapscript/python/pyextend.i
    
    
         Line 276
      in
      e0372c3
    
  
  
    

        
          
           def get_height(self): 
        
    
  


int *layerorder; can be set via SWIG but I think should be at least immutable and propbably accessed via methods - again this is the case for the Python bindings: 
  
    
      MapServer/mapscript/python/pyextend.i
    
    
         Line 256
      in
      e0372c3
    
  
  
    

        
          
           int setLayerOrder(PyObject *order) {",thanks @geographika !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6244,2021-03-02T21:55:31Z,2021-03-03T13:04:57Z,2021-03-03T13:04:57Z,MERGED,True,78,53,3,https://github.com/geographika,"Document outputFormatObj, projectionObj and map primitives",3,[],https://github.com/mapserver/mapserver/pull/6244,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6244,"Documents properties for outputFormatObj,projectionObj, and the map primitives rectObj, lineObj, pointObj and shapeObj as part of https://mapserver.org/development/rfc/ms-rfc-132.html","Documents properties for outputFormatObj,projectionObj, and the map primitives rectObj, lineObj, pointObj and shapeObj as part of https://mapserver.org/development/rfc/ms-rfc-132.html",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6244,2021-03-02T21:55:31Z,2021-03-03T13:04:57Z,2021-03-03T13:04:57Z,MERGED,True,78,53,3,https://github.com/geographika,"Document outputFormatObj, projectionObj and map primitives",3,[],https://github.com/mapserver/mapserver/pull/6244,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6244#issuecomment-789700060,"Documents properties for outputFormatObj,projectionObj, and the map primitives rectObj, lineObj, pointObj and shapeObj as part of https://mapserver.org/development/rfc/ms-rfc-132.html",thanks @geographika !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6245,2021-03-04T22:07:19Z,2021-03-05T13:00:21Z,2021-03-05T13:00:21Z,MERGED,True,130,103,1,https://github.com/geographika,"Document webObj, styleObj and referenceMapObj",3,[],https://github.com/mapserver/mapserver/pull/6245,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6245,"Document webObj, styleObj and referenceMapObj as part of https://mapserver.org/development/rfc/ms-rfc-132.html
Going through these led to noticing a couple of missing Mapfile keywords in the docs:

MapServer/MapServer-documentation#463
MapServer/MapServer-documentation#462
MapServer/MapServer-documentation#461","Document webObj, styleObj and referenceMapObj as part of https://mapserver.org/development/rfc/ms-rfc-132.html
Going through these led to noticing a couple of missing Mapfile keywords in the docs:

MapServer/MapServer-documentation#463
MapServer/MapServer-documentation#462
MapServer/MapServer-documentation#461",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6245,2021-03-04T22:07:19Z,2021-03-05T13:00:21Z,2021-03-05T13:00:21Z,MERGED,True,130,103,1,https://github.com/geographika,"Document webObj, styleObj and referenceMapObj",3,[],https://github.com/mapserver/mapserver/pull/6245,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6245#issuecomment-791404021,"Document webObj, styleObj and referenceMapObj as part of https://mapserver.org/development/rfc/ms-rfc-132.html
Going through these led to noticing a couple of missing Mapfile keywords in the docs:

MapServer/MapServer-documentation#463
MapServer/MapServer-documentation#462
MapServer/MapServer-documentation#461",thanks @geographika !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6246,2021-03-05T17:34:59Z,2021-03-05T18:04:42Z,2021-03-05T18:04:43Z,MERGED,True,17,3,1,https://github.com/rouault,msGetFriBidiEncodedString(): error out on multi-line paragraph,1,[],https://github.com/mapserver/mapserver/pull/6246,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6246,Refresh of #5535 on top of current main,Refresh of #5535 on top of current main,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6246,2021-03-05T17:34:59Z,2021-03-05T18:04:42Z,2021-03-05T18:04:43Z,MERGED,True,17,3,1,https://github.com/rouault,msGetFriBidiEncodedString(): error out on multi-line paragraph,1,[],https://github.com/mapserver/mapserver/pull/6246,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6246#issuecomment-791588203,Refresh of #5535 on top of current main,thanks @rouault and @qwef !!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6247,2021-03-05T21:23:56Z,2021-03-05T21:49:46Z,2021-03-05T21:49:46Z,MERGED,True,60,7,4,https://github.com/rouault,Fix various warnings raised on Ubuntu 20.04,6,[],https://github.com/mapserver/mapserver/pull/6247,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6247,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6248,2021-03-07T00:15:59Z,2021-03-07T12:25:26Z,2021-03-07T12:25:26Z,MERGED,True,122,98,4,https://github.com/geographika,Document various MapServer structs,7,[],https://github.com/mapserver/mapserver/pull/6248,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6248,"Document the following structs as part of https://mapserver.org/development/rfc/ms-rfc-132.html

scalebarObj
resultCacheObj
symbolSetObj
labelLeaderObj
errorObj
symbolObj","Document the following structs as part of https://mapserver.org/development/rfc/ms-rfc-132.html

scalebarObj
resultCacheObj
symbolSetObj
labelLeaderObj
errorObj
symbolObj",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6248,2021-03-07T00:15:59Z,2021-03-07T12:25:26Z,2021-03-07T12:25:26Z,MERGED,True,122,98,4,https://github.com/geographika,Document various MapServer structs,7,[],https://github.com/mapserver/mapserver/pull/6248,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6248#issuecomment-792270544,"Document the following structs as part of https://mapserver.org/development/rfc/ms-rfc-132.html

scalebarObj
resultCacheObj
symbolSetObj
labelLeaderObj
errorObj
symbolObj",thanks @geographika !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6250,2021-03-08T14:20:20Z,2021-03-08T15:06:34Z,2021-03-08T15:06:34Z,MERGED,True,1,1,1,https://github.com/rouault,FindProj.cmake: allow finding PROJ 8 that has no longer proj_api.h (fixes #6249),1,[],https://github.com/mapserver/mapserver/pull/6250,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6250,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6251,2021-03-09T16:12:50Z,2021-03-09T16:40:13Z,2021-03-09T16:40:13Z,MERGED,True,143,85,3,https://github.com/rouault,"Fix scaling with color tables (fixes #4927), and fix handling of NaN nodata value (fixes #4918)",1,[],https://github.com/mapserver/mapserver/pull/6251,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6251,Rebase of #5419 with little improvements from its code review,Rebase of #5419 with little improvements from its code review,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6252,2021-03-09T16:39:06Z,2021-03-10T12:52:37Z,2021-03-10T12:52:37Z,MERGED,True,2,2,2,https://github.com/rouault,Fixed rounding error in WMS client,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6252,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6252,When using a tile size of 256 in Web Mercator the cascaded WMS request could be computed to a height or width of 257.,When using a tile size of 256 in Web Mercator the cascaded WMS request could be computed to a height or width of 257.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6252,2021-03-09T16:39:06Z,2021-03-10T12:52:37Z,2021-03-10T12:52:37Z,MERGED,True,2,2,2,https://github.com/rouault,Fixed rounding error in WMS client,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6252,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6252#issuecomment-795371051,When using a tile size of 256 in Web Mercator the cascaded WMS request could be computed to a height or width of 257.,"thanks again @wicksell and @botulf2000 for this fix, and thanks @rouault for re-tackling this.  Thanks all!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6253,2021-03-09T16:48:59Z,2021-03-09T19:45:53Z,2021-03-09T19:45:54Z,MERGED,True,9,2,3,https://github.com/rouault,Fix development warnings with recent CMake version,1,[],https://github.com/mapserver/mapserver/pull/6253,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6253,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6254,2021-03-09T18:01:19Z,2021-03-09T21:19:02Z,2021-03-09T21:19:19Z,MERGED,True,22,13,1,https://github.com/rouault,"OGR output: do not force MultiPolygon to Polygon for a TYPE POLYGON layer, ",1,[],https://github.com/mapserver/mapserver/pull/6254,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6254,…unless wfs_geomtype is set to Polygon (fixes #6235),…unless wfs_geomtype is set to Polygon (fixes #6235),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6254,2021-03-09T18:01:19Z,2021-03-09T21:19:02Z,2021-03-09T21:19:19Z,MERGED,True,22,13,1,https://github.com/rouault,"OGR output: do not force MultiPolygon to Polygon for a TYPE POLYGON layer, ",1,[],https://github.com/mapserver/mapserver/pull/6254,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6254#issuecomment-794468239,…unless wfs_geomtype is set to Polygon (fixes #6235),"great enhancement, thanks @rouault !",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6255,2021-03-09T18:27:42Z,2021-03-09T21:04:21Z,2021-03-09T21:04:21Z,MERGED,True,20,19,7,https://github.com/rouault,"msautotest: replace OGR/BNA with OGR/CSV, as OGR/BNA will be removed in GDAL 3.3",1,[],https://github.com/mapserver/mapserver/pull/6255,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6255,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6256,2021-03-10T12:53:05Z,2021-03-12T14:30:01Z,2021-04-14T13:48:25Z,MERGED,True,2,2,2,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Fixed rounding error in WMS client,1,[],https://github.com/mapserver/mapserver/pull/6256,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6256,Backport 7ada8d5 from #6252,Backport 7ada8d5 from #6252,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6257,2021-03-10T20:54:24Z,2021-03-12T10:49:41Z,2021-03-12T16:38:46Z,MERGED,True,388,0,2,https://github.com/rouault,Add a scripts/cppcheck.sh scripts and corresponding github action,1,[],https://github.com/mapserver/mapserver/pull/6257,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6257,"For now, the CI job always succeeds since we haven't cleared the backlog of issues...","For now, the CI job always succeeds since we haven't cleared the backlog of issues...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6257,2021-03-10T20:54:24Z,2021-03-12T10:49:41Z,2021-03-12T16:38:46Z,MERGED,True,388,0,2,https://github.com/rouault,Add a scripts/cppcheck.sh scripts and corresponding github action,1,[],https://github.com/mapserver/mapserver/pull/6257,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6257#issuecomment-796101471,"For now, the CI job always succeeds since we haven't cleared the backlog of issues...",This is awesome!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6259,2021-03-12T10:41:24Z,2021-03-31T14:38:49Z,2021-03-31T16:27:17Z,MERGED,True,14,4,2,https://github.com/geographika,Improve WMS Filter performance,2,[],https://github.com/mapserver/mapserver/pull/6259,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6259,"Fix for #6258
All works fine in my setup and all tests are passing in CI, but I'd appreciate any reviews prior to merging, in case there are unforeseen implications of the update.

It does add a new #include ""mapows.h"" to maplayer.c.
gml_wmsfilter_flag was the best I could come up with for this temporary metadata item. It is added and then removed once the query has run.

Note the metadata is only updated in the msWMSApplyFilter which is only used when filters are run on WMS so other code paths should be unaffected.","Fix for #6258
All works fine in my setup and all tests are passing in CI, but I'd appreciate any reviews prior to merging, in case there are unforeseen implications of the update.

It does add a new #include ""mapows.h"" to maplayer.c.
gml_wmsfilter_flag was the best I could come up with for this temporary metadata item. It is added and then removed once the query has run.

Note the metadata is only updated in the msWMSApplyFilter which is only used when filters are run on WMS so other code paths should be unaffected.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6259,2021-03-12T10:41:24Z,2021-03-31T14:38:49Z,2021-03-31T16:27:17Z,MERGED,True,14,4,2,https://github.com/geographika,Improve WMS Filter performance,2,[],https://github.com/mapserver/mapserver/pull/6259,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6259#issuecomment-811120198,"Fix for #6258
All works fine in my setup and all tests are passing in CI, but I'd appreciate any reviews prior to merging, in case there are unforeseen implications of the update.

It does add a new #include ""mapows.h"" to maplayer.c.
gml_wmsfilter_flag was the best I could come up with for this temporary metadata item. It is added and then removed once the query has run.

Note the metadata is only updated in the msWMSApplyFilter which is only used when filters are run on WMS so other code paths should be unaffected.",thanks @geographika !!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6259,2021-03-12T10:41:24Z,2021-03-31T14:38:49Z,2021-03-31T16:27:17Z,MERGED,True,14,4,2,https://github.com/geographika,Improve WMS Filter performance,2,[],https://github.com/mapserver/mapserver/pull/6259,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/6259#issuecomment-811131995,"Fix for #6258
All works fine in my setup and all tests are passing in CI, but I'd appreciate any reviews prior to merging, in case there are unforeseen implications of the update.

It does add a new #include ""mapows.h"" to maplayer.c.
gml_wmsfilter_flag was the best I could come up with for this temporary metadata item. It is added and then removed once the query has run.

Note the metadata is only updated in the msWMSApplyFilter which is only used when filters are run on WMS so other code paths should be unaffected.",I should have commented before: has it been verified this doesn't affect GetFeatureInfo requests ?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6259,2021-03-12T10:41:24Z,2021-03-31T14:38:49Z,2021-03-31T16:27:17Z,MERGED,True,14,4,2,https://github.com/geographika,Improve WMS Filter performance,2,[],https://github.com/mapserver/mapserver/pull/6259,https://github.com/geographika,4,https://github.com/MapServer/MapServer/pull/6259#issuecomment-811147269,"Fix for #6258
All works fine in my setup and all tests are passing in CI, but I'd appreciate any reviews prior to merging, in case there are unforeseen implications of the update.

It does add a new #include ""mapows.h"" to maplayer.c.
gml_wmsfilter_flag was the best I could come up with for this temporary metadata item. It is added and then removed once the query has run.

Note the metadata is only updated in the msWMSApplyFilter which is only used when filters are run on WMS so other code paths should be unaffected.","I should have commented before: has it been verified this doesn't affect GetFeatureInfo requests ?

I can confirm GetFeatureInfo requests are unaffected by this change.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6259,2021-03-12T10:41:24Z,2021-03-31T14:38:49Z,2021-03-31T16:27:17Z,MERGED,True,14,4,2,https://github.com/geographika,Improve WMS Filter performance,2,[],https://github.com/mapserver/mapserver/pull/6259,https://github.com/rouault,5,https://github.com/MapServer/MapServer/pull/6259#issuecomment-811151267,"Fix for #6258
All works fine in my setup and all tests are passing in CI, but I'd appreciate any reviews prior to merging, in case there are unforeseen implications of the update.

It does add a new #include ""mapows.h"" to maplayer.c.
gml_wmsfilter_flag was the best I could come up with for this temporary metadata item. It is added and then removed once the query has run.

Note the metadata is only updated in the msWMSApplyFilter which is only used when filters are run on WMS so other code paths should be unaffected.","I can confirm GetFeatureInfo requests are unaffected by this change.

ok, I meant the comination of GetFeatureInfo + WMS filter. I see msautotest/wxs/wms_filter.map only tests GetMap",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6259,2021-03-12T10:41:24Z,2021-03-31T14:38:49Z,2021-03-31T16:27:17Z,MERGED,True,14,4,2,https://github.com/geographika,Improve WMS Filter performance,2,[],https://github.com/mapserver/mapserver/pull/6259,https://github.com/geographika,6,https://github.com/MapServer/MapServer/pull/6259#issuecomment-811152223,"Fix for #6258
All works fine in my setup and all tests are passing in CI, but I'd appreciate any reviews prior to merging, in case there are unforeseen implications of the update.

It does add a new #include ""mapows.h"" to maplayer.c.
gml_wmsfilter_flag was the best I could come up with for this temporary metadata item. It is added and then removed once the query has run.

Note the metadata is only updated in the msWMSApplyFilter which is only used when filters are run on WMS so other code paths should be unaffected.","ok, I meant the comination of GetFeatureInfo + WMS filter. I see msautotest/wxs/wms_filter.map only tests GetMap

To expand further - if a WMS is filtered then a feature that is filtered out will not be returned by GetFeatureInfo (which is the existing and unchanged behaviour). If a WMS feature on a filtered layer is selected via GetFeatureInfo then all fields in the layer are returned as currently.
I'll look at adding a test for the combination of GetFeatureInfo + WMS filter.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6259,2021-03-12T10:41:24Z,2021-03-31T14:38:49Z,2021-03-31T16:27:17Z,MERGED,True,14,4,2,https://github.com/geographika,Improve WMS Filter performance,2,[],https://github.com/mapserver/mapserver/pull/6259,https://github.com/rouault,7,https://github.com/MapServer/MapServer/pull/6259#issuecomment-811209720,"Fix for #6258
All works fine in my setup and all tests are passing in CI, but I'd appreciate any reviews prior to merging, in case there are unforeseen implications of the update.

It does add a new #include ""mapows.h"" to maplayer.c.
gml_wmsfilter_flag was the best I could come up with for this temporary metadata item. It is added and then removed once the query has run.

Note the metadata is only updated in the msWMSApplyFilter which is only used when filters are run on WMS so other code paths should be unaffected.","If a WMS feature on a filtered layer is selected via GetFeatureInfo then all fields in the layer are returned as currently.

yes, that was the part I was unsure about your patch.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6260,2021-03-12T14:04:57Z,2021-03-19T19:58:16Z,2021-03-19T20:52:29Z,MERGED,True,6,2,1,https://github.com/geographika,WFS: Only display cache debug messages for MS_DEBUGLEVEL_V,1,[],https://github.com/mapserver/mapserver/pull/6260,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6260,"Currently, they are displayed even when the Mapfile has DEBUG 0.
With this update they are displayed for DEBUG 3 and higher to avoid cluttering logs when reporting errors only.","Currently, they are displayed even when the Mapfile has DEBUG 0.
With this update they are displayed for DEBUG 3 and higher to avoid cluttering logs when reporting errors only.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6260,2021-03-12T14:04:57Z,2021-03-19T19:58:16Z,2021-03-19T20:52:29Z,MERGED,True,6,2,1,https://github.com/geographika,WFS: Only display cache debug messages for MS_DEBUGLEVEL_V,1,[],https://github.com/mapserver/mapserver/pull/6260,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6260#issuecomment-803083159,"Currently, they are displayed even when the Mapfile has DEBUG 0.
With this update they are displayed for DEBUG 3 and higher to avoid cluttering logs when reporting errors only.",thanks @geographika !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6263,2021-03-16T13:45:39Z,2021-03-16T15:05:02Z,2021-03-16T15:05:03Z,MERGED,True,29,320,36,https://github.com/geographika,Use PointZM throughout MapServer,4,[],https://github.com/mapserver/mapserver/pull/6263,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6263,"This pull request removes the build option WITH_POINT_Z_M and all code paths using USE_POINT_Z_M so that PointZMs are used throughout MapServer. All CI and build scripts updated to remove this flag.
See previous mailing list discussion here, here  and the related issue #5456
Advantages:

Simpler code paths, and easier to test (WITH_POINT_Z_M was used for all CI testing so use of non-PointZM was untested)
Fixes issues with MapScript bindings and testing where the output is not guaranteed due to the compile options and could lead to memory corruption issues (from @szekerest)

Disadvantages:

Up to ~2% decrease in performance compared to non-PointZM as noted on this 2017 post from @rouault. Note most builds have been using WITH_POINT_Z_M ON for some time so there will be no performance implications for any applications using these.

This pull request also fixes a previously undiscovered bug in MapScript (Z and M values for points added to lines were not being set).","This pull request removes the build option WITH_POINT_Z_M and all code paths using USE_POINT_Z_M so that PointZMs are used throughout MapServer. All CI and build scripts updated to remove this flag.
See previous mailing list discussion here, here  and the related issue #5456
Advantages:

Simpler code paths, and easier to test (WITH_POINT_Z_M was used for all CI testing so use of non-PointZM was untested)
Fixes issues with MapScript bindings and testing where the output is not guaranteed due to the compile options and could lead to memory corruption issues (from @szekerest)

Disadvantages:

Up to ~2% decrease in performance compared to non-PointZM as noted on this 2017 post from @rouault. Note most builds have been using WITH_POINT_Z_M ON for some time so there will be no performance implications for any applications using these.

This pull request also fixes a previously undiscovered bug in MapScript (Z and M values for points added to lines were not being set).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6263,2021-03-16T13:45:39Z,2021-03-16T15:05:02Z,2021-03-16T15:05:03Z,MERGED,True,29,320,36,https://github.com/geographika,Use PointZM throughout MapServer,4,[],https://github.com/mapserver/mapserver/pull/6263,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6263#issuecomment-800286898,"This pull request removes the build option WITH_POINT_Z_M and all code paths using USE_POINT_Z_M so that PointZMs are used throughout MapServer. All CI and build scripts updated to remove this flag.
See previous mailing list discussion here, here  and the related issue #5456
Advantages:

Simpler code paths, and easier to test (WITH_POINT_Z_M was used for all CI testing so use of non-PointZM was untested)
Fixes issues with MapScript bindings and testing where the output is not guaranteed due to the compile options and could lead to memory corruption issues (from @szekerest)

Disadvantages:

Up to ~2% decrease in performance compared to non-PointZM as noted on this 2017 post from @rouault. Note most builds have been using WITH_POINT_Z_M ON for some time so there will be no performance implications for any applications using these.

This pull request also fixes a previously undiscovered bug in MapScript (Z and M values for points added to lines were not being set).","MS4W builds have set this on by default for many years, because of so many requests by users.  Thanks for the detailed examination @geographika",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6264,2021-03-16T22:53:28Z,2021-04-02T11:55:44Z,2021-04-02T11:55:44Z,MERGED,True,2105,2343,105,https://github.com/geographika,Remove DUMP keyword from LAYER - RFC133,10,[],https://github.com/mapserver/mapserver/pull/6264,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6264,"First pull request related to https://mapserver.org/development/rfc/ms-rfc-133.html
This removes the DUMP keyword from LAYER.
This was deprecated in version 6.0 and  LAYER METADATA is used instead, so DUMP has no currently has no effect, and can be removed for clarity.
If merged a pull request will be added to the docs.","First pull request related to https://mapserver.org/development/rfc/ms-rfc-133.html
This removes the DUMP keyword from LAYER.
This was deprecated in version 6.0 and  LAYER METADATA is used instead, so DUMP has no currently has no effect, and can be removed for clarity.
If merged a pull request will be added to the docs.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6264,2021-03-16T22:53:28Z,2021-04-02T11:55:44Z,2021-04-02T11:55:44Z,MERGED,True,2105,2343,105,https://github.com/geographika,Remove DUMP keyword from LAYER - RFC133,10,[],https://github.com/mapserver/mapserver/pull/6264,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6264#issuecomment-811127150,"First pull request related to https://mapserver.org/development/rfc/ms-rfc-133.html
This removes the DUMP keyword from LAYER.
This was deprecated in version 6.0 and  LAYER METADATA is used instead, so DUMP has no currently has no effect, and can be removed for clarity.
If merged a pull request will be added to the docs.","@geographika let's give this one until end-of-day tomorrow, which will be 2 full business days from your PSC reminder.  thanks again and have a great long weekend!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6264,2021-03-16T22:53:28Z,2021-04-02T11:55:44Z,2021-04-02T11:55:44Z,MERGED,True,2105,2343,105,https://github.com/geographika,Remove DUMP keyword from LAYER - RFC133,10,[],https://github.com/mapserver/mapserver/pull/6264,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6264#issuecomment-812498773,"First pull request related to https://mapserver.org/development/rfc/ms-rfc-133.html
This removes the DUMP keyword from LAYER.
This was deprecated in version 6.0 and  LAYER METADATA is used instead, so DUMP has no currently has no effect, and can be removed for clarity.
If merged a pull request will be added to the docs.",thanks @geographika !  Let's proceed...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6265,2021-03-19T22:02:29Z,2021-03-20T21:33:50Z,2021-03-20T21:33:50Z,CLOSED,False,34,6,20,https://github.com/geographika,WIP: Reduce log clutter from non-errors,5,['Work in progress'],https://github.com/mapserver/mapserver/pull/6265,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6265,Add back #5707 now tests are fixed.,Add back #5707 now tests are fixed.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6265,2021-03-19T22:02:29Z,2021-03-20T21:33:50Z,2021-03-20T21:33:50Z,CLOSED,False,34,6,20,https://github.com/geographika,WIP: Reduce log clutter from non-errors,5,['Work in progress'],https://github.com/mapserver/mapserver/pull/6265,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/6265#issuecomment-803168903,Add back #5707 now tests are fixed.,"Ok it is a little more complicated. The original pull request checks the LAYER>DEBUG level, but there can be multiple layers and they are closed in the previous loop. Updated so the messages are reported based on the MAP>DEBUG level.
Willl also update Mapfiles so msautotest passes.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6265,2021-03-19T22:02:29Z,2021-03-20T21:33:50Z,2021-03-20T21:33:50Z,CLOSED,False,34,6,20,https://github.com/geographika,WIP: Reduce log clutter from non-errors,5,['Work in progress'],https://github.com/mapserver/mapserver/pull/6265,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/6265#issuecomment-803175351,Add back #5707 now tests are fixed.,"@rouault - just looking through changes to msautotests and came across 58bbb51 - I'm guessing the LAYER DEBUG 3 settings were removed as they were only added for the reverted commit?
The no result ""error"" messages only seem to be useful for the tests. On a live server any WMS GetFeatureInfo which misses a feature generates a record in the logs even with DEBUG OFF at the moment.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6265,2021-03-19T22:02:29Z,2021-03-20T21:33:50Z,2021-03-20T21:33:50Z,CLOSED,False,34,6,20,https://github.com/geographika,WIP: Reduce log clutter from non-errors,5,['Work in progress'],https://github.com/mapserver/mapserver/pull/6265,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/6265#issuecomment-803400935,Add back #5707 now tests are fixed.,"@geographika  Upon reflection, removing those if( lp->debug >= MS_DEBUGLEVEL_V ) was wrong. I think they should be indeed re-added back, and the results of the few failed tests where they are found adjusted. A grep shows that they are just wxs/expected/wfs_200_exception_getfeaturebyid_nofeature.xml and wxs/expected/wfs_200_exception_getfeature_resourceid_inexisting.xml.
But we probably don't need to re-add DEBUG statements in map files.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6265,2021-03-19T22:02:29Z,2021-03-20T21:33:50Z,2021-03-20T21:33:50Z,CLOSED,False,34,6,20,https://github.com/geographika,WIP: Reduce log clutter from non-errors,5,['Work in progress'],https://github.com/mapserver/mapserver/pull/6265,https://github.com/geographika,5,https://github.com/MapServer/MapServer/pull/6265#issuecomment-803466598,Add back #5707 now tests are fixed.,Replaced with #6268 - using a log level to set errors seems to be the wrong approach. Queries that return 0 results should be seen as valid queries IMO.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6266,2021-03-19T22:40:33Z,2021-03-20T01:10:53Z,2021-03-20T01:10:53Z,MERGED,True,6,4,1,https://github.com/jmckenna,revert backport workflow,1,[],https://github.com/mapserver/mapserver/pull/6266,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6266,"go back to our working workflow for backports (as it has been working for 13 months smoothly)
will continue to monitor m-kuhn/backport and its comparisons to Gaurav0/backport (following both for activity)","go back to our working workflow for backports (as it has been working for 13 months smoothly)
will continue to monitor m-kuhn/backport and its comparisons to Gaurav0/backport (following both for activity)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6266,2021-03-19T22:40:33Z,2021-03-20T01:10:53Z,2021-03-20T01:10:53Z,MERGED,True,6,4,1,https://github.com/jmckenna,revert backport workflow,1,[],https://github.com/mapserver/mapserver/pull/6266,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6266#issuecomment-803180350,"go back to our working workflow for backports (as it has been working for 13 months smoothly)
will continue to monitor m-kuhn/backport and its comparisons to Gaurav0/backport (following both for activity)","a ""git revert"" would be the nominal command to do the revert. I can do that if you wish",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6266,2021-03-19T22:40:33Z,2021-03-20T01:10:53Z,2021-03-20T01:10:53Z,MERGED,True,6,4,1,https://github.com/jmckenna,revert backport workflow,1,[],https://github.com/mapserver/mapserver/pull/6266,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6266#issuecomment-803180682,"go back to our working workflow for backports (as it has been working for 13 months smoothly)
will continue to monitor m-kuhn/backport and its comparisons to Gaurav0/backport (following both for activity)",I expected this comment coming fast from you :)  Sure whichever you wish.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6266,2021-03-19T22:40:33Z,2021-03-20T01:10:53Z,2021-03-20T01:10:53Z,MERGED,True,6,4,1,https://github.com/jmckenna,revert backport workflow,1,[],https://github.com/mapserver/mapserver/pull/6266,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/6266#issuecomment-803181147,"go back to our working workflow for backports (as it has been working for 13 months smoothly)
will continue to monitor m-kuhn/backport and its comparisons to Gaurav0/backport (following both for activity)","Good thing about this method is it gives a chance for discussion.  Anyway, please do that manually instead yes.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6266,2021-03-19T22:40:33Z,2021-03-20T01:10:53Z,2021-03-20T01:10:53Z,MERGED,True,6,4,1,https://github.com/jmckenna,revert backport workflow,1,[],https://github.com/mapserver/mapserver/pull/6266,https://github.com/rouault,5,https://github.com/MapServer/MapServer/pull/6266#issuecomment-803183288,"go back to our working workflow for backports (as it has been working for 13 months smoothly)
will continue to monitor m-kuhn/backport and its comparisons to Gaurav0/backport (following both for activity)","Anyway, please do that manually instead yes.

done. Force-pushed on your current branch / this PR.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6266,2021-03-19T22:40:33Z,2021-03-20T01:10:53Z,2021-03-20T01:10:53Z,MERGED,True,6,4,1,https://github.com/jmckenna,revert backport workflow,1,[],https://github.com/mapserver/mapserver/pull/6266,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/6266#issuecomment-803184739,"go back to our working workflow for backports (as it has been working for 13 months smoothly)
will continue to monitor m-kuhn/backport and its comparisons to Gaurav0/backport (following both for activity)",thanks!  fast.  Appreciate it.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6266,2021-03-19T22:40:33Z,2021-03-20T01:10:53Z,2021-03-20T01:10:53Z,MERGED,True,6,4,1,https://github.com/jmckenna,revert backport workflow,1,[],https://github.com/mapserver/mapserver/pull/6266,https://github.com/jmckenna,7,https://github.com/MapServer/MapServer/pull/6266#issuecomment-803184959,"go back to our working workflow for backports (as it has been working for 13 months smoothly)
will continue to monitor m-kuhn/backport and its comparisons to Gaurav0/backport (following both for activity)","oh darn, must be friday night.....",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6267,2021-03-20T15:27:42Z,2021-03-20T18:34:51Z,2021-03-20T18:34:51Z,MERGED,True,162,156,23,https://github.com/rouault,Compilation warning fixes,3,[],https://github.com/mapserver/mapserver/pull/6267,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6267,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6267,2021-03-20T15:27:42Z,2021-03-20T18:34:51Z,2021-03-20T18:34:51Z,MERGED,True,162,156,23,https://github.com/rouault,Compilation warning fixes,3,[],https://github.com/mapserver/mapserver/pull/6267,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6267#issuecomment-803440865,,thanks for this effort @rouault !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6268,2021-03-20T21:32:31Z,2021-03-21T12:09:19Z,2021-03-21T19:04:20Z,MERGED,True,39,25,6,https://github.com/geographika,Return MS_SUCCESS rather than MS_FAILURE for queries with 0 results,1,[],https://github.com/mapserver/mapserver/pull/6268,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6268,"An update/alternative to #6265. This changes a response to a query which returns no results from MS_FAILURE to MS_SUCCESS but with 0 results. I'm unsure what the WxS specs say, but returning server errors for a query with no results causes issues in client applications, and currently fills up MapServer logs with ""errors"" which could be caused simply by a user filtering a dataset.
Logging added for capturing these ""no results"" if required. Tests have been updated to reflect the changes.
For wfs_200_exception_getfeaturebyid_nofeature the issue at #4852 and commit referenced in the issue about changing the response to a 404 and Not Found error rather than OperationProcessingFailed make a lot of sense to me.","An update/alternative to #6265. This changes a response to a query which returns no results from MS_FAILURE to MS_SUCCESS but with 0 results. I'm unsure what the WxS specs say, but returning server errors for a query with no results causes issues in client applications, and currently fills up MapServer logs with ""errors"" which could be caused simply by a user filtering a dataset.
Logging added for capturing these ""no results"" if required. Tests have been updated to reflect the changes.
For wfs_200_exception_getfeaturebyid_nofeature the issue at #4852 and commit referenced in the issue about changing the response to a 404 and Not Found error rather than OperationProcessingFailed make a lot of sense to me.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6268,2021-03-20T21:32:31Z,2021-03-21T12:09:19Z,2021-03-21T19:04:20Z,MERGED,True,39,25,6,https://github.com/geographika,Return MS_SUCCESS rather than MS_FAILURE for queries with 0 results,1,[],https://github.com/mapserver/mapserver/pull/6268,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6268#issuecomment-803469871,"An update/alternative to #6265. This changes a response to a query which returns no results from MS_FAILURE to MS_SUCCESS but with 0 results. I'm unsure what the WxS specs say, but returning server errors for a query with no results causes issues in client applications, and currently fills up MapServer logs with ""errors"" which could be caused simply by a user filtering a dataset.
Logging added for capturing these ""no results"" if required. Tests have been updated to reflect the changes.
For wfs_200_exception_getfeaturebyid_nofeature the issue at #4852 and commit referenced in the issue about changing the response to a 404 and Not Found error rather than OperationProcessingFailed make a lot of sense to me.",Looks good to me,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6268,2021-03-20T21:32:31Z,2021-03-21T12:09:19Z,2021-03-21T19:04:20Z,MERGED,True,39,25,6,https://github.com/geographika,Return MS_SUCCESS rather than MS_FAILURE for queries with 0 results,1,[],https://github.com/mapserver/mapserver/pull/6268,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/6268#issuecomment-803470215,"An update/alternative to #6265. This changes a response to a query which returns no results from MS_FAILURE to MS_SUCCESS but with 0 results. I'm unsure what the WxS specs say, but returning server errors for a query with no results causes issues in client applications, and currently fills up MapServer logs with ""errors"" which could be caused simply by a user filtering a dataset.
Logging added for capturing these ""no results"" if required. Tests have been updated to reflect the changes.
For wfs_200_exception_getfeaturebyid_nofeature the issue at #4852 and commit referenced in the issue about changing the response to a 404 and Not Found error rather than OperationProcessingFailed make a lot of sense to me.","Thanks @rouault for the review.
Is there any reason why rouault@89919a7 wasn't merged? It seems a good approach - I can rebase/check tests if it makes sense to add it.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6268,2021-03-20T21:32:31Z,2021-03-21T12:09:19Z,2021-03-21T19:04:20Z,MERGED,True,39,25,6,https://github.com/geographika,Return MS_SUCCESS rather than MS_FAILURE for queries with 0 results,1,[],https://github.com/mapserver/mapserver/pull/6268,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/6268#issuecomment-803470555,"An update/alternative to #6265. This changes a response to a query which returns no results from MS_FAILURE to MS_SUCCESS but with 0 results. I'm unsure what the WxS specs say, but returning server errors for a query with no results causes issues in client applications, and currently fills up MapServer logs with ""errors"" which could be caused simply by a user filtering a dataset.
Logging added for capturing these ""no results"" if required. Tests have been updated to reflect the changes.
For wfs_200_exception_getfeaturebyid_nofeature the issue at #4852 and commit referenced in the issue about changing the response to a 404 and Not Found error rather than OperationProcessingFailed make a lot of sense to me.","My memories rarely go beyond 7 hours, so 7 years ago... :-) From the ticket, it seemed I was waiting from feedback from the WFS SWG. I guess I never got. The commit makes sense AFAICS",True,{'LAUGH': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6268,2021-03-20T21:32:31Z,2021-03-21T12:09:19Z,2021-03-21T19:04:20Z,MERGED,True,39,25,6,https://github.com/geographika,Return MS_SUCCESS rather than MS_FAILURE for queries with 0 results,1,[],https://github.com/mapserver/mapserver/pull/6268,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/6268#issuecomment-803566231,"An update/alternative to #6265. This changes a response to a query which returns no results from MS_FAILURE to MS_SUCCESS but with 0 results. I'm unsure what the WxS specs say, but returning server errors for a query with no results causes issues in client applications, and currently fills up MapServer logs with ""errors"" which could be caused simply by a user filtering a dataset.
Logging added for capturing these ""no results"" if required. Tests have been updated to reflect the changes.
For wfs_200_exception_getfeaturebyid_nofeature the issue at #4852 and commit referenced in the issue about changing the response to a 404 and Not Found error rather than OperationProcessingFailed make a lot of sense to me.",Makes sense to me also.  Thanks @geographika !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6269,2021-03-21T01:12:29Z,2021-03-21T12:05:11Z,2021-03-21T12:05:11Z,MERGED,True,36,27,1,https://github.com/offroad-bis,"Issue #6239. If pg_config is found, cmake searches paths specified by pg_config.",1,[],https://github.com/mapserver/mapserver/pull/6269,https://github.com/offroad-bis,1,https://github.com/MapServer/MapServer/pull/6269,"Issue #6239. This changes the IF block for PG_CONFIG.  When pg_config is found, cmake searches only the libraries and include paths output by pg_config.  If pg_config is not found, then it searches the defaults and other listed paths in the find_path and find_library commands.","Issue #6239. This changes the IF block for PG_CONFIG.  When pg_config is found, cmake searches only the libraries and include paths output by pg_config.  If pg_config is not found, then it searches the defaults and other listed paths in the find_path and find_library commands.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6269,2021-03-21T01:12:29Z,2021-03-21T12:05:11Z,2021-03-21T12:05:11Z,MERGED,True,36,27,1,https://github.com/offroad-bis,"Issue #6239. If pg_config is found, cmake searches paths specified by pg_config.",1,[],https://github.com/mapserver/mapserver/pull/6269,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6269#issuecomment-803565559,"Issue #6239. This changes the IF block for PG_CONFIG.  When pg_config is found, cmake searches only the libraries and include paths output by pg_config.  If pg_config is not found, then it searches the defaults and other listed paths in the find_path and find_library commands.",Thanks for this effort @offroad-bis ! It will be included in the upcoming 8.0 release.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6270,2021-03-21T11:54:55Z,2021-03-21T12:26:06Z,2021-03-21T12:26:06Z,MERGED,True,57,0,8,https://github.com/rouault,msautotest: add test for UNION layer,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6270,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6270,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6270,2021-03-21T11:54:55Z,2021-03-21T12:26:06Z,2021-03-21T12:26:06Z,MERGED,True,57,0,8,https://github.com/rouault,msautotest: add test for UNION layer,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6270,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6270#issuecomment-803569056,,Great catch @rouault !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6271,2021-03-21T12:26:32Z,2021-03-21T15:07:08Z,2021-04-14T13:48:16Z,MERGED,True,57,0,8,https://github.com/MapServer-backport-bot,[Backport branch-7-6] msautotest: add test for UNION layer,1,[],https://github.com/mapserver/mapserver/pull/6271,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6271,Backport 2d0f8d5 from #6270,Backport 2d0f8d5 from #6270,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6272,2021-03-21T16:53:51Z,2021-03-22T11:36:13Z,2021-03-22T11:36:13Z,MERGED,True,1602,1593,120,https://github.com/rouault,Fixes/annotates ALL warnings reported by cppcheck,37,[],https://github.com/mapserver/mapserver/pull/6272,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6272,"and consequently make Github action cppcheck.ym to fail when scripts/cppcheck.sh fails
Also enable -Wextra and fix related warnings","and consequently make Github action cppcheck.ym to fail when scripts/cppcheck.sh fails
Also enable -Wextra and fix related warnings",True,"{'HEART': ['https://github.com/geographika', 'https://github.com/sdlime']}"
mapserver/mapserver,https://github.com/mapserver/mapserver,6272,2021-03-21T16:53:51Z,2021-03-22T11:36:13Z,2021-03-22T11:36:13Z,MERGED,True,1602,1593,120,https://github.com/rouault,Fixes/annotates ALL warnings reported by cppcheck,37,[],https://github.com/mapserver/mapserver/pull/6272,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/6272#issuecomment-803663712,"and consequently make Github action cppcheck.ym to fail when scripts/cppcheck.sh fails
Also enable -Wextra and fix related warnings","Wow - impressive work @rouault!
I see there were some memory leak fixes as well in 78ba833",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6272,2021-03-21T16:53:51Z,2021-03-22T11:36:13Z,2021-03-22T11:36:13Z,MERGED,True,1602,1593,120,https://github.com/rouault,Fixes/annotates ALL warnings reported by cppcheck,37,[],https://github.com/mapserver/mapserver/pull/6272,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/6272#issuecomment-803664381,"and consequently make Github action cppcheck.ym to fail when scripts/cppcheck.sh fails
Also enable -Wextra and fix related warnings","I see there were some memory leak fixes as well in 78ba833

in error code paths. Nothing critical.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6272,2021-03-21T16:53:51Z,2021-03-22T11:36:13Z,2021-03-22T11:36:13Z,MERGED,True,1602,1593,120,https://github.com/rouault,Fixes/annotates ALL warnings reported by cppcheck,37,[],https://github.com/mapserver/mapserver/pull/6272,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/6272#issuecomment-803994970,"and consequently make Github action cppcheck.ym to fail when scripts/cppcheck.sh fails
Also enable -Wextra and fix related warnings","Wonderful effort @rouault, thanks!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6273,2021-03-21T21:19:40Z,2021-03-22T11:32:22Z,2021-03-22T11:39:02Z,MERGED,True,13,7,5,https://github.com/geographika,WFS GetFeaureById return HTTP 404 when not found and not HTTP 403,2,[],https://github.com/mapserver/mapserver/pull/6273,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6273,"Pull request to add in the changes from rouault@89919a7 as discussed in #4852
Currently for WFS requests by FID if no feature is found a HTTP 403 error is returned with a OperationProcessingFailed.
This pull request chnages it to HTTP 404 and a NotFound exception code.
Also discussed / related to #6268.","Pull request to add in the changes from rouault@89919a7 as discussed in #4852
Currently for WFS requests by FID if no feature is found a HTTP 403 error is returned with a OperationProcessingFailed.
This pull request chnages it to HTTP 404 and a NotFound exception code.
Also discussed / related to #6268.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6275,2021-03-21T22:00:18Z,2021-03-26T23:37:08Z,2021-03-26T23:37:09Z,MERGED,True,8,0,1,https://github.com/geographika,Ensure DEFRESOLUTION > 0,1,[],https://github.com/mapserver/mapserver/pull/6275,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6275,"Possible fix for #6274
I'm unsure how much validation is/should be done on Mapfile parameters - I think this is the correct to place it though if deemed useful.","Possible fix for #6274
I'm unsure how much validation is/should be done on Mapfile parameters - I think this is the correct to place it though if deemed useful.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6275,2021-03-21T22:00:18Z,2021-03-26T23:37:08Z,2021-03-26T23:37:09Z,MERGED,True,8,0,1,https://github.com/geographika,Ensure DEFRESOLUTION > 0,1,[],https://github.com/mapserver/mapserver/pull/6275,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6275#issuecomment-806268163,"Possible fix for #6274
I'm unsure how much validation is/should be done on Mapfile parameters - I think this is the correct to place it though if deemed useful.",Seems ok to me - pretty straight forward check that follows an existing pattern. Note: at some point we should really have getDouble() and getInteger() return MS_SUCCESS|MS_FAILURE for consistency - not part of this change. Good catch Seth!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6275,2021-03-21T22:00:18Z,2021-03-26T23:37:08Z,2021-03-26T23:37:09Z,MERGED,True,8,0,1,https://github.com/geographika,Ensure DEFRESOLUTION > 0,1,[],https://github.com/mapserver/mapserver/pull/6275,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/6275#issuecomment-808589265,"Possible fix for #6274
I'm unsure how much validation is/should be done on Mapfile parameters - I think this is the correct to place it though if deemed useful.",Thanks for the review @sdlime,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6276,2021-03-26T23:45:23Z,2021-03-27T00:27:37Z,2021-03-27T00:27:37Z,MERGED,True,9,6,2,https://github.com/rouault,msLoadFontSet(): fix regression of 03a9670 ,2,[],https://github.com/mapserver/mapserver/pull/6276,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6276,"Fix issue raised in 03a9670#r48767849
master only","Fix issue raised in 03a9670#r48767849
master only",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6278,2021-03-27T17:14:48Z,2021-03-27T17:42:50Z,2021-03-27T18:35:13Z,MERGED,True,251,0,4,https://github.com/geographika,Add Cluster Layer GetMetadata fix with test,1,[],https://github.com/mapserver/mapserver/pull/6278,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6278,"Fix for GetMetadata calls on a database layer with no EXTENT. See #6277.
Adds in a test used to recreate the error (with an additional cluster image test) for a MSSQL layer.
The fix simply removes any clustering in msMetadataGetLayerMetadata. As clustering won't have an effect on the source metadata, and the function is only called by a GetMetadata this should have no side-effects.
Attempting to modify msClusterLayerOpen to try and copy across connection objects etc. would be an alternative, and more complicated solution, but I'm unaware of any similar issues with other service calls and cluster layers.","Fix for GetMetadata calls on a database layer with no EXTENT. See #6277.
Adds in a test used to recreate the error (with an additional cluster image test) for a MSSQL layer.
The fix simply removes any clustering in msMetadataGetLayerMetadata. As clustering won't have an effect on the source metadata, and the function is only called by a GetMetadata this should have no side-effects.
Attempting to modify msClusterLayerOpen to try and copy across connection objects etc. would be an alternative, and more complicated solution, but I'm unaware of any similar issues with other service calls and cluster layers.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6278,2021-03-27T17:14:48Z,2021-03-27T17:42:50Z,2021-03-27T18:35:13Z,MERGED,True,251,0,4,https://github.com/geographika,Add Cluster Layer GetMetadata fix with test,1,[],https://github.com/mapserver/mapserver/pull/6278,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6278#issuecomment-808768035,"Fix for GetMetadata calls on a database layer with no EXTENT. See #6277.
Adds in a test used to recreate the error (with an additional cluster image test) for a MSSQL layer.
The fix simply removes any clustering in msMetadataGetLayerMetadata. As clustering won't have an effect on the source metadata, and the function is only called by a GetMetadata this should have no side-effects.
Attempting to modify msClusterLayerOpen to try and copy across connection objects etc. would be an alternative, and more complicated solution, but I'm unaware of any similar issues with other service calls and cluster layers.",thanks @geographika !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6279,2021-03-27T17:31:16Z,2021-03-31T14:46:18Z,2021-03-31T14:46:18Z,MERGED,True,4,0,1,https://github.com/geographika,Cache Calculated Layer Extents,1,[],https://github.com/mapserver/mapserver/pull/6279,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6279,"When debugging the GetMetadata request I noticed msLayerGetExtent was called 3 times when generating the layer metadata. If an extent is not set for the layer then (with the MSSQL driver - and probably the other database drivers) a SQL request is made to find the extent of the layer based on the data.
As noted in the comments for msLayerGetExtent:

** If layer->extent is set then this value is used, otherwise the
** driver-specific implementation is called (this can be expensive).
**
** If layer is not already opened then it is opened and closed (so this
** function can be called on both opened or closed layers).

This pull request caches the extent on the layer object on the first call, so all subsequent calls return this value instantly.
It speeds up the GetMetadata in this use case by 3.
All msautotest tests are passing, but I'm unsure if I'm missing any unforeseen side-effects.","When debugging the GetMetadata request I noticed msLayerGetExtent was called 3 times when generating the layer metadata. If an extent is not set for the layer then (with the MSSQL driver - and probably the other database drivers) a SQL request is made to find the extent of the layer based on the data.
As noted in the comments for msLayerGetExtent:

** If layer->extent is set then this value is used, otherwise the
** driver-specific implementation is called (this can be expensive).
**
** If layer is not already opened then it is opened and closed (so this
** function can be called on both opened or closed layers).

This pull request caches the extent on the layer object on the first call, so all subsequent calls return this value instantly.
It speeds up the GetMetadata in this use case by 3.
All msautotest tests are passing, but I'm unsure if I'm missing any unforeseen side-effects.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6279,2021-03-27T17:31:16Z,2021-03-31T14:46:18Z,2021-03-31T14:46:18Z,MERGED,True,4,0,1,https://github.com/geographika,Cache Calculated Layer Extents,1,[],https://github.com/mapserver/mapserver/pull/6279,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6279#issuecomment-811124979,"When debugging the GetMetadata request I noticed msLayerGetExtent was called 3 times when generating the layer metadata. If an extent is not set for the layer then (with the MSSQL driver - and probably the other database drivers) a SQL request is made to find the extent of the layer based on the data.
As noted in the comments for msLayerGetExtent:

** If layer->extent is set then this value is used, otherwise the
** driver-specific implementation is called (this can be expensive).
**
** If layer is not already opened then it is opened and closed (so this
** function can be called on both opened or closed layers).

This pull request caches the extent on the layer object on the first call, so all subsequent calls return this value instantly.
It speeds up the GetMetadata in this use case by 3.
All msautotest tests are passing, but I'm unsure if I'm missing any unforeseen side-effects.","This also makes sense to me (setting the EXTENT at the layer-level for db sources is pretty-much required for OWS services, as MapServer will return a warning without, in GetCapabilities), so this improvement is worth the try.  +1    !!   I think we should merge today also (usually if we/i/you make a mistake here, the quiet ones watching will point out fast, and, after almost a week the quiet close watchers said nothing, this, in FOSS, means we didn't make a mistake and can proceed ha /the unwritten language of FOSS).  thanks again @geographika !",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6282,2021-04-06T14:02:46Z,2021-04-14T10:19:00Z,2021-04-14T12:17:49Z,MERGED,True,556,199,8,https://github.com/pmauduit,maporacle - using dynamically-allocated buffers for constructing SQL queries,7,['Review required'],https://github.com/mapserver/mapserver/pull/6282,https://github.com/pmauduit,1,https://github.com/MapServer/MapServer/pull/6282,"Since the beginning of this driver, we seem to use stack-allocated memory slots to build the SQL queries. One of our customer regularly asks us to build oracle-activated versions of Mapserver, and depending on his usage, asks us to increase the buffers sizes used in the different arrays.
At a given point, e.g. using queries built on top of an SLD parameter, the generated SQL queries were in the need of more and more memory (last one fit in a 294KB text file), so increasing the array size were not an option, and we tried the following work as to rewrite it with dynamically allocated buffers.
I tried to stay close to the Mapserver's code and use functions provided in the msstring.cpp file (msStringConcatenate and so on) ; after some rapid tests against our customer's infrastructure, I haven't detected memleaks at runtime using valgrind, and the current code does not seem to crash.
During the test phase, we also discover 5 allocated pointers which were not freed before returning (see specific commit).
I added a msautotests/msoracle directory but I haven't actually used it. Oracle provides a virtualbox VM with some of these advertised tools, including an Oracle DB with Oracle Spatial, and I was only able to connect onto the oracle spatial installed in the VM - then getting an error ""table does not exist"", and I haven't been further, as in the meantime I got access to my customer's one.
Note: it was previously written against the 7.6 branch, I cherry-picked the different commits to realign with main, recompile / retest to make sure it was still functionning as expected, but I might have missed something.","Since the beginning of this driver, we seem to use stack-allocated memory slots to build the SQL queries. One of our customer regularly asks us to build oracle-activated versions of Mapserver, and depending on his usage, asks us to increase the buffers sizes used in the different arrays.
At a given point, e.g. using queries built on top of an SLD parameter, the generated SQL queries were in the need of more and more memory (last one fit in a 294KB text file), so increasing the array size were not an option, and we tried the following work as to rewrite it with dynamically allocated buffers.
I tried to stay close to the Mapserver's code and use functions provided in the msstring.cpp file (msStringConcatenate and so on) ; after some rapid tests against our customer's infrastructure, I haven't detected memleaks at runtime using valgrind, and the current code does not seem to crash.
During the test phase, we also discover 5 allocated pointers which were not freed before returning (see specific commit).
I added a msautotests/msoracle directory but I haven't actually used it. Oracle provides a virtualbox VM with some of these advertised tools, including an Oracle DB with Oracle Spatial, and I was only able to connect onto the oracle spatial installed in the VM - then getting an error ""table does not exist"", and I haven't been further, as in the meantime I got access to my customer's one.
Note: it was previously written against the 7.6 branch, I cherry-picked the different commits to realign with main, recompile / retest to make sure it was still functionning as expected, but I might have missed something.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6282,2021-04-06T14:02:46Z,2021-04-14T10:19:00Z,2021-04-14T12:17:49Z,MERGED,True,556,199,8,https://github.com/pmauduit,maporacle - using dynamically-allocated buffers for constructing SQL queries,7,['Review required'],https://github.com/mapserver/mapserver/pull/6282,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6282#issuecomment-814162732,"Since the beginning of this driver, we seem to use stack-allocated memory slots to build the SQL queries. One of our customer regularly asks us to build oracle-activated versions of Mapserver, and depending on his usage, asks us to increase the buffers sizes used in the different arrays.
At a given point, e.g. using queries built on top of an SLD parameter, the generated SQL queries were in the need of more and more memory (last one fit in a 294KB text file), so increasing the array size were not an option, and we tried the following work as to rewrite it with dynamically allocated buffers.
I tried to stay close to the Mapserver's code and use functions provided in the msstring.cpp file (msStringConcatenate and so on) ; after some rapid tests against our customer's infrastructure, I haven't detected memleaks at runtime using valgrind, and the current code does not seem to crash.
During the test phase, we also discover 5 allocated pointers which were not freed before returning (see specific commit).
I added a msautotests/msoracle directory but I haven't actually used it. Oracle provides a virtualbox VM with some of these advertised tools, including an Oracle DB with Oracle Spatial, and I was only able to connect onto the oracle spatial installed in the VM - then getting an error ""table does not exist"", and I haven't been further, as in the meantime I got access to my customer's one.
Note: it was previously written against the 7.6 branch, I cherry-picked the different commits to realign with main, recompile / retest to make sure it was still functionning as expected, but I might have missed something.","Thanks @pmauduit these look like great updates for the Oracle driver.  And thanks for including an Oracle test in msautotest, let's see how it runs here....",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6282,2021-04-06T14:02:46Z,2021-04-14T10:19:00Z,2021-04-14T12:17:49Z,MERGED,True,556,199,8,https://github.com/pmauduit,maporacle - using dynamically-allocated buffers for constructing SQL queries,7,['Review required'],https://github.com/mapserver/mapserver/pull/6282,https://github.com/pmauduit,3,https://github.com/MapServer/MapServer/pull/6282#issuecomment-814175655,"Since the beginning of this driver, we seem to use stack-allocated memory slots to build the SQL queries. One of our customer regularly asks us to build oracle-activated versions of Mapserver, and depending on his usage, asks us to increase the buffers sizes used in the different arrays.
At a given point, e.g. using queries built on top of an SLD parameter, the generated SQL queries were in the need of more and more memory (last one fit in a 294KB text file), so increasing the array size were not an option, and we tried the following work as to rewrite it with dynamically allocated buffers.
I tried to stay close to the Mapserver's code and use functions provided in the msstring.cpp file (msStringConcatenate and so on) ; after some rapid tests against our customer's infrastructure, I haven't detected memleaks at runtime using valgrind, and the current code does not seem to crash.
During the test phase, we also discover 5 allocated pointers which were not freed before returning (see specific commit).
I added a msautotests/msoracle directory but I haven't actually used it. Oracle provides a virtualbox VM with some of these advertised tools, including an Oracle DB with Oracle Spatial, and I was only able to connect onto the oracle spatial installed in the VM - then getting an error ""table does not exist"", and I haven't been further, as in the meantime I got access to my customer's one.
Note: it was previously written against the 7.6 branch, I cherry-picked the different commits to realign with main, recompile / retest to make sure it was still functionning as expected, but I might have missed something.","Thanks @pmauduit these look like great updates for the Oracle driver. And thanks for including an Oracle test in msautotest, let's see how it runs here....

That is the complicated thing here: having an Oracle DB with Oracle Spatial is not an easy task ; I tried using the following VM:
https://www.oracle.com/database/technologies/bigdatalite-v411.html
but it's pretty huge to download, and I was not able to load geographical datas into it, before having access to my customer's one, so I left it in this current state. I kept it only for documentation purposes (we need this TNS_ADMIN env variable pointing to a directory containing this tnsnames.ora file to be able to connect onto an Oracle db).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6282,2021-04-06T14:02:46Z,2021-04-14T10:19:00Z,2021-04-14T12:17:49Z,MERGED,True,556,199,8,https://github.com/pmauduit,maporacle - using dynamically-allocated buffers for constructing SQL queries,7,['Review required'],https://github.com/mapserver/mapserver/pull/6282,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/6282#issuecomment-814183827,"Since the beginning of this driver, we seem to use stack-allocated memory slots to build the SQL queries. One of our customer regularly asks us to build oracle-activated versions of Mapserver, and depending on his usage, asks us to increase the buffers sizes used in the different arrays.
At a given point, e.g. using queries built on top of an SLD parameter, the generated SQL queries were in the need of more and more memory (last one fit in a 294KB text file), so increasing the array size were not an option, and we tried the following work as to rewrite it with dynamically allocated buffers.
I tried to stay close to the Mapserver's code and use functions provided in the msstring.cpp file (msStringConcatenate and so on) ; after some rapid tests against our customer's infrastructure, I haven't detected memleaks at runtime using valgrind, and the current code does not seem to crash.
During the test phase, we also discover 5 allocated pointers which were not freed before returning (see specific commit).
I added a msautotests/msoracle directory but I haven't actually used it. Oracle provides a virtualbox VM with some of these advertised tools, including an Oracle DB with Oracle Spatial, and I was only able to connect onto the oracle spatial installed in the VM - then getting an error ""table does not exist"", and I haven't been further, as in the meantime I got access to my customer's one.
Note: it was previously written against the 7.6 branch, I cherry-picked the different commits to realign with main, recompile / retest to make sure it was still functionning as expected, but I might have missed something.","QGIS has some CI testing for Oracle ( https://github.com/qgis/QGIS/blob/master/.docker/docker-compose-testing-oracle.yml ) . I guess part of it could be reused. A first step would be to have a CI build against the OCI library, which we don't have currently,  before performing the tests themselves. Not making that a requirement for this PR though.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6282,2021-04-06T14:02:46Z,2021-04-14T10:19:00Z,2021-04-14T12:17:49Z,MERGED,True,556,199,8,https://github.com/pmauduit,maporacle - using dynamically-allocated buffers for constructing SQL queries,7,['Review required'],https://github.com/mapserver/mapserver/pull/6282,https://github.com/pmauduit,5,https://github.com/MapServer/MapServer/pull/6282#issuecomment-814664646,"Since the beginning of this driver, we seem to use stack-allocated memory slots to build the SQL queries. One of our customer regularly asks us to build oracle-activated versions of Mapserver, and depending on his usage, asks us to increase the buffers sizes used in the different arrays.
At a given point, e.g. using queries built on top of an SLD parameter, the generated SQL queries were in the need of more and more memory (last one fit in a 294KB text file), so increasing the array size were not an option, and we tried the following work as to rewrite it with dynamically allocated buffers.
I tried to stay close to the Mapserver's code and use functions provided in the msstring.cpp file (msStringConcatenate and so on) ; after some rapid tests against our customer's infrastructure, I haven't detected memleaks at runtime using valgrind, and the current code does not seem to crash.
During the test phase, we also discover 5 allocated pointers which were not freed before returning (see specific commit).
I added a msautotests/msoracle directory but I haven't actually used it. Oracle provides a virtualbox VM with some of these advertised tools, including an Oracle DB with Oracle Spatial, and I was only able to connect onto the oracle spatial installed in the VM - then getting an error ""table does not exist"", and I haven't been further, as in the meantime I got access to my customer's one.
Note: it was previously written against the 7.6 branch, I cherry-picked the different commits to realign with main, recompile / retest to make sure it was still functionning as expected, but I might have missed something.","QGIS has some CI testing for Oracle ( https://github.com/qgis/QGIS/blob/master/.docker/docker-compose-testing-oracle.yml ) . I guess part of it could be reused.

I had a look, the docker image is quite huge (3.5GB) but still far less than the VM I mentioned previously. I am also a bit concerned about the licensing issues, but might it be fair use ? And if Qgis is already making use of it, maybe it is also ok to reuse it here as well.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6282,2021-04-06T14:02:46Z,2021-04-14T10:19:00Z,2021-04-14T12:17:49Z,MERGED,True,556,199,8,https://github.com/pmauduit,maporacle - using dynamically-allocated buffers for constructing SQL queries,7,['Review required'],https://github.com/mapserver/mapserver/pull/6282,https://github.com/rouault,6,https://github.com/MapServer/MapServer/pull/6282#issuecomment-819000188,"Since the beginning of this driver, we seem to use stack-allocated memory slots to build the SQL queries. One of our customer regularly asks us to build oracle-activated versions of Mapserver, and depending on his usage, asks us to increase the buffers sizes used in the different arrays.
At a given point, e.g. using queries built on top of an SLD parameter, the generated SQL queries were in the need of more and more memory (last one fit in a 294KB text file), so increasing the array size were not an option, and we tried the following work as to rewrite it with dynamically allocated buffers.
I tried to stay close to the Mapserver's code and use functions provided in the msstring.cpp file (msStringConcatenate and so on) ; after some rapid tests against our customer's infrastructure, I haven't detected memleaks at runtime using valgrind, and the current code does not seem to crash.
During the test phase, we also discover 5 allocated pointers which were not freed before returning (see specific commit).
I added a msautotests/msoracle directory but I haven't actually used it. Oracle provides a virtualbox VM with some of these advertised tools, including an Oracle DB with Oracle Spatial, and I was only able to connect onto the oracle spatial installed in the VM - then getting an error ""table does not exist"", and I haven't been further, as in the meantime I got access to my customer's one.
Note: it was previously written against the 7.6 branch, I cherry-picked the different commits to realign with main, recompile / retest to make sure it was still functionning as expected, but I might have missed something.","Could you address the following compiler warnings ?
/home/even/mapserver/mapserver/maporaclespatial.c: In function ‘osGeodeticData’:
/home/even/mapserver/mapserver/maporaclespatial.c:720:48: warning: unused parameter ‘version’ [-Wunused-parameter]
  720 | static char * osGeodeticData(int function, int version, char *query_str, char *geom_column_name, char *index_column_name, char *srid, rectObj rect)
      |                                            ~~~~^~~~~~~
/home/even/mapserver/mapserver/maporaclespatial.c:720:129: warning: unused parameter ‘srid’ [-Wunused-parameter]
  720 | static char * osGeodeticData(int function, int version, char *query_str, char *geom_column_name, char *index_column_name, char *srid, rectObj rect)
      |                                                                                                                           ~~~~~~^~~~
/home/even/mapserver/mapserver/maporaclespatial.c:720:143: warning: unused parameter ‘rect’ [-Wunused-parameter]
  720 | static char * osGeodeticData(int function, int version, char *query_str, char *geom_column_name, char *index_column_name, char *srid, rectObj rect)
      |                                                                                                                                       ~~~~~~~~^~~~
/home/even/mapserver/mapserver/maporaclespatial.c: In function ‘osNoGeodeticData’:
/home/even/mapserver/mapserver/maporaclespatial.c:777:131: warning: unused parameter ‘srid’ [-Wunused-parameter]
  777 | static char * osNoGeodeticData(int function, int version, char *query_str, char *geom_column_name, char *index_column_name, char *srid, rectObj rect)
      |                                                                                                                             ~~~~~~^~~~
/home/even/mapserver/mapserver/maporaclespatial.c:777:145: warning: unused parameter ‘rect’ [-Wunused-parameter]
  777 | static char * osNoGeodeticData(int function, int version, char *query_str, char *geom_column_name, char *index_column_name, char *srid, rectObj rect)
      |                                                                                                                                         ~~~~~~~~^~~~
/home/even/mapserver/mapserver/maporaclespatial.c: In function ‘osFilteritem’:
/home/even/mapserver/mapserver/maporaclespatial.c:1049:29: warning: initialization discards ‘const’ qualifier from pointer target type [-Wdiscarded-qualifiers]
 1049 |      char * native_filter = msLayerGetProcessingKey(layer, ""NATIVE_FILTER"");
      |                             ^~~~~~~~~~~~~~~~~~~~~~~",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6282,2021-04-06T14:02:46Z,2021-04-14T10:19:00Z,2021-04-14T12:17:49Z,MERGED,True,556,199,8,https://github.com/pmauduit,maporacle - using dynamically-allocated buffers for constructing SQL queries,7,['Review required'],https://github.com/mapserver/mapserver/pull/6282,https://github.com/pmauduit,7,https://github.com/MapServer/MapServer/pull/6282#issuecomment-819302321,"Since the beginning of this driver, we seem to use stack-allocated memory slots to build the SQL queries. One of our customer regularly asks us to build oracle-activated versions of Mapserver, and depending on his usage, asks us to increase the buffers sizes used in the different arrays.
At a given point, e.g. using queries built on top of an SLD parameter, the generated SQL queries were in the need of more and more memory (last one fit in a 294KB text file), so increasing the array size were not an option, and we tried the following work as to rewrite it with dynamically allocated buffers.
I tried to stay close to the Mapserver's code and use functions provided in the msstring.cpp file (msStringConcatenate and so on) ; after some rapid tests against our customer's infrastructure, I haven't detected memleaks at runtime using valgrind, and the current code does not seem to crash.
During the test phase, we also discover 5 allocated pointers which were not freed before returning (see specific commit).
I added a msautotests/msoracle directory but I haven't actually used it. Oracle provides a virtualbox VM with some of these advertised tools, including an Oracle DB with Oracle Spatial, and I was only able to connect onto the oracle spatial installed in the VM - then getting an error ""table does not exist"", and I haven't been further, as in the meantime I got access to my customer's one.
Note: it was previously written against the 7.6 branch, I cherry-picked the different commits to realign with main, recompile / retest to make sure it was still functionning as expected, but I might have missed something.","Ok done ; for the unused parameters, it was already been done in the main branch, but I reintroduced them when targeting main for this PR.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6282,2021-04-06T14:02:46Z,2021-04-14T10:19:00Z,2021-04-14T12:17:49Z,MERGED,True,556,199,8,https://github.com/pmauduit,maporacle - using dynamically-allocated buffers for constructing SQL queries,7,['Review required'],https://github.com/mapserver/mapserver/pull/6282,https://github.com/jmckenna,8,https://github.com/MapServer/MapServer/pull/6282#issuecomment-819445554,"Since the beginning of this driver, we seem to use stack-allocated memory slots to build the SQL queries. One of our customer regularly asks us to build oracle-activated versions of Mapserver, and depending on his usage, asks us to increase the buffers sizes used in the different arrays.
At a given point, e.g. using queries built on top of an SLD parameter, the generated SQL queries were in the need of more and more memory (last one fit in a 294KB text file), so increasing the array size were not an option, and we tried the following work as to rewrite it with dynamically allocated buffers.
I tried to stay close to the Mapserver's code and use functions provided in the msstring.cpp file (msStringConcatenate and so on) ; after some rapid tests against our customer's infrastructure, I haven't detected memleaks at runtime using valgrind, and the current code does not seem to crash.
During the test phase, we also discover 5 allocated pointers which were not freed before returning (see specific commit).
I added a msautotests/msoracle directory but I haven't actually used it. Oracle provides a virtualbox VM with some of these advertised tools, including an Oracle DB with Oracle Spatial, and I was only able to connect onto the oracle spatial installed in the VM - then getting an error ""table does not exist"", and I haven't been further, as in the meantime I got access to my customer's one.
Note: it was previously written against the 7.6 branch, I cherry-picked the different commits to realign with main, recompile / retest to make sure it was still functionning as expected, but I might have missed something.","@pmauduit to confirm, you solved the Oracle msautotest issue, correct?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6282,2021-04-06T14:02:46Z,2021-04-14T10:19:00Z,2021-04-14T12:17:49Z,MERGED,True,556,199,8,https://github.com/pmauduit,maporacle - using dynamically-allocated buffers for constructing SQL queries,7,['Review required'],https://github.com/mapserver/mapserver/pull/6282,https://github.com/pmauduit,9,https://github.com/MapServer/MapServer/pull/6282#issuecomment-819473269,"Since the beginning of this driver, we seem to use stack-allocated memory slots to build the SQL queries. One of our customer regularly asks us to build oracle-activated versions of Mapserver, and depending on his usage, asks us to increase the buffers sizes used in the different arrays.
At a given point, e.g. using queries built on top of an SLD parameter, the generated SQL queries were in the need of more and more memory (last one fit in a 294KB text file), so increasing the array size were not an option, and we tried the following work as to rewrite it with dynamically allocated buffers.
I tried to stay close to the Mapserver's code and use functions provided in the msstring.cpp file (msStringConcatenate and so on) ; after some rapid tests against our customer's infrastructure, I haven't detected memleaks at runtime using valgrind, and the current code does not seem to crash.
During the test phase, we also discover 5 allocated pointers which were not freed before returning (see specific commit).
I added a msautotests/msoracle directory but I haven't actually used it. Oracle provides a virtualbox VM with some of these advertised tools, including an Oracle DB with Oracle Spatial, and I was only able to connect onto the oracle spatial installed in the VM - then getting an error ""table does not exist"", and I haven't been further, as in the meantime I got access to my customer's one.
Note: it was previously written against the 7.6 branch, I cherry-picked the different commits to realign with main, recompile / retest to make sure it was still functionning as expected, but I might have missed something.","@pmauduit to confirm, you solved the Oracle msautotest issue, correct?

It depends of what you mean with the msautotest issues: I reused the docker image from Oslandia, and I was able to load some sample datas taking inspiration of what they did on QGis. I documented the process here:
https://github.com/MapServer/MapServer/blob/main/msautotest/msoracle/README.md
This allows to have an Oracle Spatial where I can launch the added msautotest against. The expected/oracle.png is compliant with the mapfile oracle.map provided.
But if you have a CI in mind, there is still some work to be done, basically:

compile Mapserver against the oracle client libraries (libOCI), which are not easily obtainable (need an Oracle account)
launch the docker-composition in the msoracle sub-directory: https://github.com/MapServer/MapServer/blob/main/msautotest/msoracle/docker-compose.yaml
python run_tests.py",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6283,2021-04-07T14:57:03Z,2021-04-07T14:58:08Z,2021-04-07T15:38:25Z,CLOSED,False,5375,4865,84,https://github.com/sdlime,WIP: Require limiting mapfile access.,72,[],https://github.com/mapserver/mapserver/pull/6283,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/6283,This change requires the use of environment variables that limit where the MapServer CGI can access mapfiles - MS_MAP_NO_PATH and MS_MAP_PATTERN.,This change requires the use of environment variables that limit where the MapServer CGI can access mapfiles - MS_MAP_NO_PATH and MS_MAP_PATTERN.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6284,2021-04-07T16:49:45Z,2021-04-14T12:48:27Z,2021-04-26T02:39:41Z,CLOSED,False,22,5,1,https://github.com/sdlime,WIP: Require MS_MAP_NO_PATH or MS_MAP_PATTERN to be set.,8,['Work in progress'],https://github.com/mapserver/mapserver/pull/6284,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/6284,Patch to improve default CGI security posture by requiring the environment variables MS_MAP_NO_PATH or MS_MAP_PATTERN to be set.,Patch to improve default CGI security posture by requiring the environment variables MS_MAP_NO_PATH or MS_MAP_PATTERN to be set.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6284,2021-04-07T16:49:45Z,2021-04-14T12:48:27Z,2021-04-26T02:39:41Z,CLOSED,False,22,5,1,https://github.com/sdlime,WIP: Require MS_MAP_NO_PATH or MS_MAP_PATTERN to be set.,8,['Work in progress'],https://github.com/mapserver/mapserver/pull/6284,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6284#issuecomment-815073006,Patch to improve default CGI security posture by requiring the environment variables MS_MAP_NO_PATH or MS_MAP_PATTERN to be set.,"@geographika, @rouault - this will break the CI testing since those environment variables are not set. What do you think the best way to address will be? Could be as simple as setting MS_MAP_PATTERN to ""."" although it would be better to be more explicit.
It also would make sense to add tests with those environment vars unset or set to various values and then just do a series of ""mapserv ""QUERY_STRING=map=[value]"" tests. Don't actually need a mapfile for those - the error messages are good enough output.
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6284,2021-04-07T16:49:45Z,2021-04-14T12:48:27Z,2021-04-26T02:39:41Z,CLOSED,False,22,5,1,https://github.com/sdlime,WIP: Require MS_MAP_NO_PATH or MS_MAP_PATTERN to be set.,8,['Work in progress'],https://github.com/mapserver/mapserver/pull/6284,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/6284#issuecomment-815082408,Patch to improve default CGI security posture by requiring the environment variables MS_MAP_NO_PATH or MS_MAP_PATTERN to be set.,"in msautotest/pytest.ini, you could add in the [pytest] section a new line
env =
    MS_MAP_PATTERN=.

But I'm wondering if there's not a way to detect that the mapserv binary is called from the command line (in which case we might want to skip the new checks) vs in a CGI environment. In CGI environment, https://tools.ietf.org/html/rfc3875 requires that SERVER_NAME is set.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6284,2021-04-07T16:49:45Z,2021-04-14T12:48:27Z,2021-04-26T02:39:41Z,CLOSED,False,22,5,1,https://github.com/sdlime,WIP: Require MS_MAP_NO_PATH or MS_MAP_PATTERN to be set.,8,['Work in progress'],https://github.com/mapserver/mapserver/pull/6284,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/6284#issuecomment-815849450,Patch to improve default CGI security posture by requiring the environment variables MS_MAP_NO_PATH or MS_MAP_PATTERN to be set.,"Good point. Although, then we'd have to do something special then (e.g. set SERVER_NAME) to test this functionality from the command line. I suppose that's the rarer case though and would be less inconvenient for users. I updated the RFC draft I had started with your idea - there's a choice to be made.
I can update the pull request. If nobody weighs in then we can make an executive decision.
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6284,2021-04-07T16:49:45Z,2021-04-14T12:48:27Z,2021-04-26T02:39:41Z,CLOSED,False,22,5,1,https://github.com/sdlime,WIP: Require MS_MAP_NO_PATH or MS_MAP_PATTERN to be set.,8,['Work in progress'],https://github.com/mapserver/mapserver/pull/6284,https://github.com/rouault,5,https://github.com/MapServer/MapServer/pull/6284#issuecomment-815899045,Patch to improve default CGI security posture by requiring the environment variables MS_MAP_NO_PATH or MS_MAP_PATTERN to be set.,"what I've not verified is that the popular CGI implementation s(apache, nginx, iis) do set SERVER_NAME. They SHOULD according to RFC3875.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6284,2021-04-07T16:49:45Z,2021-04-14T12:48:27Z,2021-04-26T02:39:41Z,CLOSED,False,22,5,1,https://github.com/sdlime,WIP: Require MS_MAP_NO_PATH or MS_MAP_PATTERN to be set.,8,['Work in progress'],https://github.com/mapserver/mapserver/pull/6284,https://github.com/geographika,6,https://github.com/MapServer/MapServer/pull/6284#issuecomment-816565458,Patch to improve default CGI security posture by requiring the environment variables MS_MAP_NO_PATH or MS_MAP_PATTERN to be set.,"I've been testing again with environment variables and IIS/FastCGI, and have the same issues as described on the mailing list in 2015: http://osgeo-org.1560.x6.nabble.com/MapServer-Environment-Variables-and-IIS-td5186363.html
I think I've now resolved the mystery..! From the MS docs

getenv operates only on the data structures accessible to the run-time library and not on the environment ""segment"" created for the process by the operating system.

I have getenv working in MapCache. Checking the code the getenv is in the CGI application itself rather than in the DLL:
https://github.com/MapServer/mapcache/blob/447c0c6848fd101c11e6d54e451037e571117ef1/cgi/mapcache.c#L253
If I add the getenv to mapserv.c - the source used to create mapserv.exe then the FastCGI environment variable is picked up correctly - see 3beeff9
When the same code is used in maphttp.c (which is used for mapserver.dll) getenv returns NULL.

  
    
      MapServer/maphttp.c
    
    
         Line 474
      in
      cde0920
    
  
  
    

        
          
           pszCurlCABundle = getenv(""CURL_CA_BUNDLE""); 
        
    
  


In summary getenv outside of mapserver.c can't be used with IIS and FastCGI.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6284,2021-04-07T16:49:45Z,2021-04-14T12:48:27Z,2021-04-26T02:39:41Z,CLOSED,False,22,5,1,https://github.com/sdlime,WIP: Require MS_MAP_NO_PATH or MS_MAP_PATTERN to be set.,8,['Work in progress'],https://github.com/mapserver/mapserver/pull/6284,https://github.com/rouault,7,https://github.com/MapServer/MapServer/pull/6284#issuecomment-816593583,Patch to improve default CGI security posture by requiring the environment variables MS_MAP_NO_PATH or MS_MAP_PATTERN to be set.,"Checking the code the getenv is in the CGI application itself rather than in the DLL:

Excellent finding @geographika  . Windows is such a hostile territory ! I guess a potential workaround would be to statically link libmapserver inside mapserv binary.
However your findings have still myteries. For example loadParams() is in the cgiutil.c, which is in libmapserver and not mapserv binary, and loadParams() is invoked by main() with a getenv2==NULL, which means that getenv2=&msGetEnv is used, which finally uses getenv(). So REQUEST_METHOD retrieving should fail according to the above theory. Unless there's a difference in how the non-FastCGI env variable CURL_CA_BUNDLE is set and how the FastCGI one REQUEST_METHOD is.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6284,2021-04-07T16:49:45Z,2021-04-14T12:48:27Z,2021-04-26T02:39:41Z,CLOSED,False,22,5,1,https://github.com/sdlime,WIP: Require MS_MAP_NO_PATH or MS_MAP_PATTERN to be set.,8,['Work in progress'],https://github.com/mapserver/mapserver/pull/6284,https://github.com/geographika,8,https://github.com/MapServer/MapServer/pull/6284#issuecomment-816614647,Patch to improve default CGI security posture by requiring the environment variables MS_MAP_NO_PATH or MS_MAP_PATTERN to be set.,"It only took me 6 years to understand what was happening :)
@rouault - I think all the server variables would be ok (including SERVER_NAME and REQUEST_METHOD).
FastCGI environment variables are declared in C:\Windows\System32\inetsrv\config\applicationHost.config, and these are the ones ignored by getenv:
        <fastCgi>
            <application fullPath=""C:\MapServer\bin\mapserv.exe"" arguments="""" monitorChangesTo="""" stderrMode=""ReturnStdErrIn500"" maxInstances=""4"" idleTimeout=""300"" activityTimeout=""30"" requestTimeout=""90"" instanceMaxRequests=""200"" signalBeforeTerminateSeconds=""0"" protocol=""NamedPipe"" queueLength=""1000"" flushNamedPipe=""false"" rapidFailsPerMinute=""10"">
                <environmentVariables>
                    <environmentVariable name=""GDAL_DATA"" value=""C:\MapServer\bin\gdal-data"" />
                    <environmentVariable name=""CURL_CA_BUNDLE"" value=""C:\Mapserver\bin\curl\curl-ca-bundle.crt"" />                    
                </environmentVariables>
            </application>
I ended up hard-coding CURL_CA_BUNDLE in a DLL which needed a custom cert and HTTPS access to a WMS as a workaround in the past.
@sdlime - sorry for hijacking the thread.. I think your proposal at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File - loading all variables in mapserv.c via a config file or environ variables would resolve this.
Without the config file approach however I'm not sure it would be possible to override the MS_MAP_NO_PATH variable on IIS/FastCGI.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6284,2021-04-07T16:49:45Z,2021-04-14T12:48:27Z,2021-04-26T02:39:41Z,CLOSED,False,22,5,1,https://github.com/sdlime,WIP: Require MS_MAP_NO_PATH or MS_MAP_PATTERN to be set.,8,['Work in progress'],https://github.com/mapserver/mapserver/pull/6284,https://github.com/sdlime,9,https://github.com/MapServer/MapServer/pull/6284#issuecomment-817229415,Patch to improve default CGI security posture by requiring the environment variables MS_MAP_NO_PATH or MS_MAP_PATTERN to be set.,"Wondering if this should be pulled as a stand-alone pull request and just be bundled as part of the config file RFC.
My worry after reading this is that a certain segment of users can't set MS_MAP_NO_PATH or MS_MAP_PATTERN. There has to be a way to address that for current versions or not?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6284,2021-04-07T16:49:45Z,2021-04-14T12:48:27Z,2021-04-26T02:39:41Z,CLOSED,False,22,5,1,https://github.com/sdlime,WIP: Require MS_MAP_NO_PATH or MS_MAP_PATTERN to be set.,8,['Work in progress'],https://github.com/mapserver/mapserver/pull/6284,https://github.com/sdlime,10,https://github.com/MapServer/MapServer/pull/6284#issuecomment-819491429,Patch to improve default CGI security posture by requiring the environment variables MS_MAP_NO_PATH or MS_MAP_PATTERN to be set.,"Closing, any changes in this area will be part of larger transition to a config file. --Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6285,2021-04-07T21:18:31Z,2021-04-07T21:25:22Z,2021-04-07T21:36:57Z,MERGED,True,1,1,1,https://github.com/dmorissette,Fix Vagrant config to fetch get-pip.py for Python 2.7 since Python 2 support was dropped in pip 21.0,1,[],https://github.com/mapserver/mapserver/pull/6285,https://github.com/dmorissette,1,https://github.com/MapServer/MapServer/pull/6285,"Launching a brand new Vagrant VM fails with the following error:

default: ERROR: This script does not work on Python 2.7 The minimum supported Python version is 3.6. Please use https://bootstrap.pypa.io/pip/2.7/get-pip.py instead.

We get this because the default version of get-pip.py at https://bootstrap.pypa.io/get-pip.py no longer supports Python 2, so we either have to fetch the version for Python 2.7 (what this PR does), or call get-pip.py with python3.  However the latter probably won't work out of the box anyway since the bionic Vagrant VM contains Python 3.4 and the message above says that the new script requires 3.6+.
I defer to those of you who know our Vagrant config better than me to tell me if this PR is the right fix, or if instead we should switch the Vagrant setup to use Python3 by default, and how to proceed.
Note that I already committed this change to the main branch by accident (doh!), so if this is not the right fix we will have to revert my change in main as well.","Launching a brand new Vagrant VM fails with the following error:

default: ERROR: This script does not work on Python 2.7 The minimum supported Python version is 3.6. Please use https://bootstrap.pypa.io/pip/2.7/get-pip.py instead.

We get this because the default version of get-pip.py at https://bootstrap.pypa.io/get-pip.py no longer supports Python 2, so we either have to fetch the version for Python 2.7 (what this PR does), or call get-pip.py with python3.  However the latter probably won't work out of the box anyway since the bionic Vagrant VM contains Python 3.4 and the message above says that the new script requires 3.6+.
I defer to those of you who know our Vagrant config better than me to tell me if this PR is the right fix, or if instead we should switch the Vagrant setup to use Python3 by default, and how to proceed.
Note that I already committed this change to the main branch by accident (doh!), so if this is not the right fix we will have to revert my change in main as well.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6285,2021-04-07T21:18:31Z,2021-04-07T21:25:22Z,2021-04-07T21:36:57Z,MERGED,True,1,1,1,https://github.com/dmorissette,Fix Vagrant config to fetch get-pip.py for Python 2.7 since Python 2 support was dropped in pip 21.0,1,[],https://github.com/mapserver/mapserver/pull/6285,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6285#issuecomment-815275058,"Launching a brand new Vagrant VM fails with the following error:

default: ERROR: This script does not work on Python 2.7 The minimum supported Python version is 3.6. Please use https://bootstrap.pypa.io/pip/2.7/get-pip.py instead.

We get this because the default version of get-pip.py at https://bootstrap.pypa.io/get-pip.py no longer supports Python 2, so we either have to fetch the version for Python 2.7 (what this PR does), or call get-pip.py with python3.  However the latter probably won't work out of the box anyway since the bionic Vagrant VM contains Python 3.4 and the message above says that the new script requires 3.6+.
I defer to those of you who know our Vagrant config better than me to tell me if this PR is the right fix, or if instead we should switch the Vagrant setup to use Python3 by default, and how to proceed.
Note that I already committed this change to the main branch by accident (doh!), so if this is not the right fix we will have to revert my change in main as well.","Looks good to me. At some point, we should switch the Vagrant and Travis (or actually move from Travis to github action) to use ubuntu 20.04 as the base image, and refresh the expected results of msautotest accordingly. But as a stop gap measure, you're patch is good.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6285,2021-04-07T21:18:31Z,2021-04-07T21:25:22Z,2021-04-07T21:36:57Z,MERGED,True,1,1,1,https://github.com/dmorissette,Fix Vagrant config to fetch get-pip.py for Python 2.7 since Python 2 support was dropped in pip 21.0,1,[],https://github.com/mapserver/mapserver/pull/6285,https://github.com/dmorissette,3,https://github.com/MapServer/MapServer/pull/6285#issuecomment-815278484,"Launching a brand new Vagrant VM fails with the following error:

default: ERROR: This script does not work on Python 2.7 The minimum supported Python version is 3.6. Please use https://bootstrap.pypa.io/pip/2.7/get-pip.py instead.

We get this because the default version of get-pip.py at https://bootstrap.pypa.io/get-pip.py no longer supports Python 2, so we either have to fetch the version for Python 2.7 (what this PR does), or call get-pip.py with python3.  However the latter probably won't work out of the box anyway since the bionic Vagrant VM contains Python 3.4 and the message above says that the new script requires 3.6+.
I defer to those of you who know our Vagrant config better than me to tell me if this PR is the right fix, or if instead we should switch the Vagrant setup to use Python3 by default, and how to proceed.
Note that I already committed this change to the main branch by accident (doh!), so if this is not the right fix we will have to revert my change in main as well.","Thank you Even.  I noticed that the travis builds in main start with an export PYTHON_VERSION=3.x, so that got me wondering if the VagrantFile is still in sync or not with the travis stuff.  Hopefully that does not impact the test results in the msautotests and using Vagrant to update msautotests is still the recommended method?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6285,2021-04-07T21:18:31Z,2021-04-07T21:25:22Z,2021-04-07T21:36:57Z,MERGED,True,1,1,1,https://github.com/dmorissette,Fix Vagrant config to fetch get-pip.py for Python 2.7 since Python 2 support was dropped in pip 21.0,1,[],https://github.com/mapserver/mapserver/pull/6285,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/6285#issuecomment-815280973,"Launching a brand new Vagrant VM fails with the following error:

default: ERROR: This script does not work on Python 2.7 The minimum supported Python version is 3.6. Please use https://bootstrap.pypa.io/pip/2.7/get-pip.py instead.

We get this because the default version of get-pip.py at https://bootstrap.pypa.io/get-pip.py no longer supports Python 2, so we either have to fetch the version for Python 2.7 (what this PR does), or call get-pip.py with python3.  However the latter probably won't work out of the box anyway since the bionic Vagrant VM contains Python 3.4 and the message above says that the new script requires 3.6+.
I defer to those of you who know our Vagrant config better than me to tell me if this PR is the right fix, or if instead we should switch the Vagrant setup to use Python3 by default, and how to proceed.
Note that I already committed this change to the main branch by accident (doh!), so if this is not the right fix we will have to revert my change in main as well.","Hopefully that does not impact the test results in the msautotests

The python version is unlikely to have impacts. But at some point python 2.7 support will just be broken due to people no longer be able to test it easily . It would be reasonable to mention that for Mapserver 8, only 3.x will be supported.

and using Vagrant to update msautotests is still the recommended method?

Yes, it is.",True,{'THUMBS_UP': ['https://github.com/dmorissette']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6286,2021-04-07T22:24:34Z,2021-04-08T15:06:11Z,2021-04-08T15:06:23Z,CLOSED,False,4,0,1,https://github.com/rouault,[7.6 branch] .travis: update to latest pip version supported by py2.7 to hopefully…,1,[],https://github.com/mapserver/mapserver/pull/6286,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6286,… solve later pip install issues,… solve later pip install issues,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6286,2021-04-07T22:24:34Z,2021-04-08T15:06:11Z,2021-04-08T15:06:23Z,CLOSED,False,4,0,1,https://github.com/rouault,[7.6 branch] .travis: update to latest pip version supported by py2.7 to hopefully…,1,[],https://github.com/mapserver/mapserver/pull/6286,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6286#issuecomment-815899992,… solve later pip install issues,Droping this. I'm afraid we have to live with a half broken CI for the 7.6 branch due to using Trusty and deprecated python2.7. What is strange is that some of the CI config work and others don't. Must be related to some pip caching difference,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6288,2021-04-10T15:07:57Z,2021-04-15T12:52:12Z,2021-04-15T12:52:12Z,MERGED,True,11,11,2,https://github.com/geographika,Only select requested fields for all WFS query types,5,"['WFS Server', 'Performance']",https://github.com/mapserver/mapserver/pull/6288,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6288,"This pull request builds on the work in #6131 to improve WFS GetFeature performance.
It provides a significant performance boost for any WFS layers that are based on large database views, by only selecting the fields required by the client, set using the propertyName parameter. This prevents the database from running joins and returning data which is then later discarded (also similar to #6259).
So for example previously a WFS GetFeature request with a FILTER would select all fields in the database layer - now it only selects a subset. In my test case a query for the top 20 records in a view with 51 fields went from 13.09 seconds to 0.798 seconds, with the number of fields selected dropping from 51 fields down to 17.
#6131 only applied the performance boost for msQueryByRect. This update applies the speedup for all query types - msQueryByIndex, msQueryByFilter, msQueryByRect, msQueryByFeatures, msQueryByPoint, and msQueryByShape.
msLayerWhichItems now checks for fields listed in propertyName which populates a metadata item gml_select_items.
If this is populated and no other explicit fields are requested (in the metadata parameter, which is also used by WCS queries), then only the required fields are requested from the data source.
This will apply to all datasources, but the database drivers (Postgres, MSSQL, Oracle) will get the most benefit from this update.","This pull request builds on the work in #6131 to improve WFS GetFeature performance.
It provides a significant performance boost for any WFS layers that are based on large database views, by only selecting the fields required by the client, set using the propertyName parameter. This prevents the database from running joins and returning data which is then later discarded (also similar to #6259).
So for example previously a WFS GetFeature request with a FILTER would select all fields in the database layer - now it only selects a subset. In my test case a query for the top 20 records in a view with 51 fields went from 13.09 seconds to 0.798 seconds, with the number of fields selected dropping from 51 fields down to 17.
#6131 only applied the performance boost for msQueryByRect. This update applies the speedup for all query types - msQueryByIndex, msQueryByFilter, msQueryByRect, msQueryByFeatures, msQueryByPoint, and msQueryByShape.
msLayerWhichItems now checks for fields listed in propertyName which populates a metadata item gml_select_items.
If this is populated and no other explicit fields are requested (in the metadata parameter, which is also used by WCS queries), then only the required fields are requested from the data source.
This will apply to all datasources, but the database drivers (Postgres, MSSQL, Oracle) will get the most benefit from this update.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6288,2021-04-10T15:07:57Z,2021-04-15T12:52:12Z,2021-04-15T12:52:12Z,MERGED,True,11,11,2,https://github.com/geographika,Only select requested fields for all WFS query types,5,"['WFS Server', 'Performance']",https://github.com/mapserver/mapserver/pull/6288,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6288#issuecomment-817894936,"This pull request builds on the work in #6131 to improve WFS GetFeature performance.
It provides a significant performance boost for any WFS layers that are based on large database views, by only selecting the fields required by the client, set using the propertyName parameter. This prevents the database from running joins and returning data which is then later discarded (also similar to #6259).
So for example previously a WFS GetFeature request with a FILTER would select all fields in the database layer - now it only selects a subset. In my test case a query for the top 20 records in a view with 51 fields went from 13.09 seconds to 0.798 seconds, with the number of fields selected dropping from 51 fields down to 17.
#6131 only applied the performance boost for msQueryByRect. This update applies the speedup for all query types - msQueryByIndex, msQueryByFilter, msQueryByRect, msQueryByFeatures, msQueryByPoint, and msQueryByShape.
msLayerWhichItems now checks for fields listed in propertyName which populates a metadata item gml_select_items.
If this is populated and no other explicit fields are requested (in the metadata parameter, which is also used by WCS queries), then only the required fields are requested from the data source.
This will apply to all datasources, but the database drivers (Postgres, MSSQL, Oracle) will get the most benefit from this update.",So moving code out of msQueryByRect() to a more general location in msLayerWhichItems() - makes sense to me. --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6288,2021-04-10T15:07:57Z,2021-04-15T12:52:12Z,2021-04-15T12:52:12Z,MERGED,True,11,11,2,https://github.com/geographika,Only select requested fields for all WFS query types,5,"['WFS Server', 'Performance']",https://github.com/mapserver/mapserver/pull/6288,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/6288#issuecomment-818530860,"This pull request builds on the work in #6131 to improve WFS GetFeature performance.
It provides a significant performance boost for any WFS layers that are based on large database views, by only selecting the fields required by the client, set using the propertyName parameter. This prevents the database from running joins and returning data which is then later discarded (also similar to #6259).
So for example previously a WFS GetFeature request with a FILTER would select all fields in the database layer - now it only selects a subset. In my test case a query for the top 20 records in a view with 51 fields went from 13.09 seconds to 0.798 seconds, with the number of fields selected dropping from 51 fields down to 17.
#6131 only applied the performance boost for msQueryByRect. This update applies the speedup for all query types - msQueryByIndex, msQueryByFilter, msQueryByRect, msQueryByFeatures, msQueryByPoint, and msQueryByShape.
msLayerWhichItems now checks for fields listed in propertyName which populates a metadata item gml_select_items.
If this is populated and no other explicit fields are requested (in the metadata parameter, which is also used by WCS queries), then only the required fields are requested from the data source.
This will apply to all datasources, but the database drivers (Postgres, MSSQL, Oracle) will get the most benefit from this update.","Yes, I think originally only msQueryByRect was updated to have the minimum impact on the codebase. However msLayerWhichItems will only be affected when it is a WFS request with propertyName passed in to the querystring.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6288,2021-04-10T15:07:57Z,2021-04-15T12:52:12Z,2021-04-15T12:52:12Z,MERGED,True,11,11,2,https://github.com/geographika,Only select requested fields for all WFS query types,5,"['WFS Server', 'Performance']",https://github.com/mapserver/mapserver/pull/6288,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/6288#issuecomment-818860312,"This pull request builds on the work in #6131 to improve WFS GetFeature performance.
It provides a significant performance boost for any WFS layers that are based on large database views, by only selecting the fields required by the client, set using the propertyName parameter. This prevents the database from running joins and returning data which is then later discarded (also similar to #6259).
So for example previously a WFS GetFeature request with a FILTER would select all fields in the database layer - now it only selects a subset. In my test case a query for the top 20 records in a view with 51 fields went from 13.09 seconds to 0.798 seconds, with the number of fields selected dropping from 51 fields down to 17.
#6131 only applied the performance boost for msQueryByRect. This update applies the speedup for all query types - msQueryByIndex, msQueryByFilter, msQueryByRect, msQueryByFeatures, msQueryByPoint, and msQueryByShape.
msLayerWhichItems now checks for fields listed in propertyName which populates a metadata item gml_select_items.
If this is populated and no other explicit fields are requested (in the metadata parameter, which is also used by WCS queries), then only the required fields are requested from the data source.
This will apply to all datasources, but the database drivers (Postgres, MSSQL, Oracle) will get the most benefit from this update.",It seems to me that the wmsfilter_flag and select_items metadata items serve the same purpose. Can't they be unified in a single setting ?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6288,2021-04-10T15:07:57Z,2021-04-15T12:52:12Z,2021-04-15T12:52:12Z,MERGED,True,11,11,2,https://github.com/geographika,Only select requested fields for all WFS query types,5,"['WFS Server', 'Performance']",https://github.com/mapserver/mapserver/pull/6288,https://github.com/geographika,5,https://github.com/MapServer/MapServer/pull/6288#issuecomment-819753544,"This pull request builds on the work in #6131 to improve WFS GetFeature performance.
It provides a significant performance boost for any WFS layers that are based on large database views, by only selecting the fields required by the client, set using the propertyName parameter. This prevents the database from running joins and returning data which is then later discarded (also similar to #6259).
So for example previously a WFS GetFeature request with a FILTER would select all fields in the database layer - now it only selects a subset. In my test case a query for the top 20 records in a view with 51 fields went from 13.09 seconds to 0.798 seconds, with the number of fields selected dropping from 51 fields down to 17.
#6131 only applied the performance boost for msQueryByRect. This update applies the speedup for all query types - msQueryByIndex, msQueryByFilter, msQueryByRect, msQueryByFeatures, msQueryByPoint, and msQueryByShape.
msLayerWhichItems now checks for fields listed in propertyName which populates a metadata item gml_select_items.
If this is populated and no other explicit fields are requested (in the metadata parameter, which is also used by WCS queries), then only the required fields are requested from the data source.
This will apply to all datasources, but the database drivers (Postgres, MSSQL, Oracle) will get the most benefit from this update.","It seems to me that the wmsfilter_flag and select_items metadata items serve the same purpose. Can't they be unified in a single setting ?

Yes they effectively do the same thing from 2 different code paths so I'll use the same setting.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6288,2021-04-10T15:07:57Z,2021-04-15T12:52:12Z,2021-04-15T12:52:12Z,MERGED,True,11,11,2,https://github.com/geographika,Only select requested fields for all WFS query types,5,"['WFS Server', 'Performance']",https://github.com/mapserver/mapserver/pull/6288,https://github.com/geographika,6,https://github.com/MapServer/MapServer/pull/6288#issuecomment-819847113,"This pull request builds on the work in #6131 to improve WFS GetFeature performance.
It provides a significant performance boost for any WFS layers that are based on large database views, by only selecting the fields required by the client, set using the propertyName parameter. This prevents the database from running joins and returning data which is then later discarded (also similar to #6259).
So for example previously a WFS GetFeature request with a FILTER would select all fields in the database layer - now it only selects a subset. In my test case a query for the top 20 records in a view with 51 fields went from 13.09 seconds to 0.798 seconds, with the number of fields selected dropping from 51 fields down to 17.
#6131 only applied the performance boost for msQueryByRect. This update applies the speedup for all query types - msQueryByIndex, msQueryByFilter, msQueryByRect, msQueryByFeatures, msQueryByPoint, and msQueryByShape.
msLayerWhichItems now checks for fields listed in propertyName which populates a metadata item gml_select_items.
If this is populated and no other explicit fields are requested (in the metadata parameter, which is also used by WCS queries), then only the required fields are requested from the data source.
This will apply to all datasources, but the database drivers (Postgres, MSSQL, Oracle) will get the most benefit from this update.","Actually there are differences between the WMS filter and the WFS filter approaches.
The WFS filter sets ""gml_select_items"" with a list of required fields that is then used for the metadata.
The WMS filter (which sets ""gml_wmsfilter_flag"") simply has to ensure that get_all is set to MS_FALSE to avoid selecting all fields.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6288,2021-04-10T15:07:57Z,2021-04-15T12:52:12Z,2021-04-15T12:52:12Z,MERGED,True,11,11,2,https://github.com/geographika,Only select requested fields for all WFS query types,5,"['WFS Server', 'Performance']",https://github.com/mapserver/mapserver/pull/6288,https://github.com/rouault,7,https://github.com/MapServer/MapServer/pull/6288#issuecomment-819862086,"This pull request builds on the work in #6131 to improve WFS GetFeature performance.
It provides a significant performance boost for any WFS layers that are based on large database views, by only selecting the fields required by the client, set using the propertyName parameter. This prevents the database from running joins and returning data which is then later discarded (also similar to #6259).
So for example previously a WFS GetFeature request with a FILTER would select all fields in the database layer - now it only selects a subset. In my test case a query for the top 20 records in a view with 51 fields went from 13.09 seconds to 0.798 seconds, with the number of fields selected dropping from 51 fields down to 17.
#6131 only applied the performance boost for msQueryByRect. This update applies the speedup for all query types - msQueryByIndex, msQueryByFilter, msQueryByRect, msQueryByFeatures, msQueryByPoint, and msQueryByShape.
msLayerWhichItems now checks for fields listed in propertyName which populates a metadata item gml_select_items.
If this is populated and no other explicit fields are requested (in the metadata parameter, which is also used by WCS queries), then only the required fields are requested from the data source.
This will apply to all datasources, but the database drivers (Postgres, MSSQL, Oracle) will get the most benefit from this update.","couldn't the gml_wmsfilter_flag be replaced by setting gml_select_items to the empty string then ? Although I'm not super familiar with that part of the code, all that looks like hacks. I'd really prefer we minimize their number...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6288,2021-04-10T15:07:57Z,2021-04-15T12:52:12Z,2021-04-15T12:52:12Z,MERGED,True,11,11,2,https://github.com/geographika,Only select requested fields for all WFS query types,5,"['WFS Server', 'Performance']",https://github.com/mapserver/mapserver/pull/6288,https://github.com/geographika,8,https://github.com/MapServer/MapServer/pull/6288#issuecomment-819883037,"This pull request builds on the work in #6131 to improve WFS GetFeature performance.
It provides a significant performance boost for any WFS layers that are based on large database views, by only selecting the fields required by the client, set using the propertyName parameter. This prevents the database from running joins and returning data which is then later discarded (also similar to #6259).
So for example previously a WFS GetFeature request with a FILTER would select all fields in the database layer - now it only selects a subset. In my test case a query for the top 20 records in a view with 51 fields went from 13.09 seconds to 0.798 seconds, with the number of fields selected dropping from 51 fields down to 17.
#6131 only applied the performance boost for msQueryByRect. This update applies the speedup for all query types - msQueryByIndex, msQueryByFilter, msQueryByRect, msQueryByFeatures, msQueryByPoint, and msQueryByShape.
msLayerWhichItems now checks for fields listed in propertyName which populates a metadata item gml_select_items.
If this is populated and no other explicit fields are requested (in the metadata parameter, which is also used by WCS queries), then only the required fields are requested from the data source.
This will apply to all datasources, but the database drivers (Postgres, MSSQL, Oracle) will get the most benefit from this update.","When set via WFS, metadata gets set to a list of fields:
metadata = msOWSLookupMetadata(&(layer->metadata), ""G"", ""select_items"");
If gml_select_items is set to an empty string for a WMS with a filter then metadata will be set to """" and will be true for the condition below, and end up getting all fields from the layer:

  
    
      MapServer/maplayer.c
    
    
         Line 1014
      in
      7e7464e
    
  
  
    

        
          
           if(metadata) { 
        
    
  


In essence WFS needs a list of fields whereas WMS just needs to know not to get all fields for the layer.
Maybe the metadata keys could have clearer names, but I can't come up with any.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6288,2021-04-10T15:07:57Z,2021-04-15T12:52:12Z,2021-04-15T12:52:12Z,MERGED,True,11,11,2,https://github.com/geographika,Only select requested fields for all WFS query types,5,"['WFS Server', 'Performance']",https://github.com/mapserver/mapserver/pull/6288,https://github.com/rouault,9,https://github.com/MapServer/MapServer/pull/6288#issuecomment-820397807,"This pull request builds on the work in #6131 to improve WFS GetFeature performance.
It provides a significant performance boost for any WFS layers that are based on large database views, by only selecting the fields required by the client, set using the propertyName parameter. This prevents the database from running joins and returning data which is then later discarded (also similar to #6259).
So for example previously a WFS GetFeature request with a FILTER would select all fields in the database layer - now it only selects a subset. In my test case a query for the top 20 records in a view with 51 fields went from 13.09 seconds to 0.798 seconds, with the number of fields selected dropping from 51 fields down to 17.
#6131 only applied the performance boost for msQueryByRect. This update applies the speedup for all query types - msQueryByIndex, msQueryByFilter, msQueryByRect, msQueryByFeatures, msQueryByPoint, and msQueryByShape.
msLayerWhichItems now checks for fields listed in propertyName which populates a metadata item gml_select_items.
If this is populated and no other explicit fields are requested (in the metadata parameter, which is also used by WCS queries), then only the required fields are requested from the data source.
This will apply to all datasources, but the database drivers (Postgres, MSSQL, Oracle) will get the most benefit from this update.","ok, let's go with that then.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6290,2021-04-11T21:17:53Z,2021-04-14T18:57:08Z,2021-04-15T01:04:19Z,CLOSED,False,22,1,1,https://github.com/geographika,WIP: Copy environ variable to FastCGI environ,5,[],https://github.com/mapserver/mapserver/pull/6290,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6290,"More of a proof-of-concept than a pull request.
This gets the CURL_CA_BUNDLE value from the environment prior to FCGI_Accept, and then puts it into the FastCGI environment so it can be accessed later:

  
    
      MapServer/maphttp.c
    
    
         Line 474
      in
      cde0920
    
  
  
    

        
          
           pszCurlCABundle = getenv(""CURL_CA_BUNDLE""); 
        
    
  


This works ok, but there are lots of MapServer environment variables. Some list/loop could be used?
Alternatively maybe adding the variables to the mapserv->map object would make more sense (and perhaps the same approach could be reused as part of https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File).","More of a proof-of-concept than a pull request.
This gets the CURL_CA_BUNDLE value from the environment prior to FCGI_Accept, and then puts it into the FastCGI environment so it can be accessed later:

  
    
      MapServer/maphttp.c
    
    
         Line 474
      in
      cde0920
    
  
  
    

        
          
           pszCurlCABundle = getenv(""CURL_CA_BUNDLE""); 
        
    
  


This works ok, but there are lots of MapServer environment variables. Some list/loop could be used?
Alternatively maybe adding the variables to the mapserv->map object would make more sense (and perhaps the same approach could be reused as part of https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6290,2021-04-11T21:17:53Z,2021-04-14T18:57:08Z,2021-04-15T01:04:19Z,CLOSED,False,22,1,1,https://github.com/geographika,WIP: Copy environ variable to FastCGI environ,5,[],https://github.com/mapserver/mapserver/pull/6290,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6290#issuecomment-817375258,"More of a proof-of-concept than a pull request.
This gets the CURL_CA_BUNDLE value from the environment prior to FCGI_Accept, and then puts it into the FastCGI environment so it can be accessed later:

  
    
      MapServer/maphttp.c
    
    
         Line 474
      in
      cde0920
    
  
  
    

        
          
           pszCurlCABundle = getenv(""CURL_CA_BUNDLE""); 
        
    
  


This works ok, but there are lots of MapServer environment variables. Some list/loop could be used?
Alternatively maybe adding the variables to the mapserv->map object would make more sense (and perhaps the same approach could be reused as part of https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File).","Some list/loop could be used?

yep, declare ""extern char **environ;"" close to headers, iterate over it to make a copy of it, and then putenv in the fastcgi loop. But I would have expected the fastcgi code to do that for you...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6290,2021-04-11T21:17:53Z,2021-04-14T18:57:08Z,2021-04-15T01:04:19Z,CLOSED,False,22,1,1,https://github.com/geographika,WIP: Copy environ variable to FastCGI environ,5,[],https://github.com/mapserver/mapserver/pull/6290,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/6290#issuecomment-817957933,"More of a proof-of-concept than a pull request.
This gets the CURL_CA_BUNDLE value from the environment prior to FCGI_Accept, and then puts it into the FastCGI environment so it can be accessed later:

  
    
      MapServer/maphttp.c
    
    
         Line 474
      in
      cde0920
    
  
  
    

        
          
           pszCurlCABundle = getenv(""CURL_CA_BUNDLE""); 
        
    
  


This works ok, but there are lots of MapServer environment variables. Some list/loop could be used?
Alternatively maybe adding the variables to the mapserv->map object would make more sense (and perhaps the same approach could be reused as part of https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File).","Thanks @rouault for the code review! I've added in the suggestions. I'm fairly sure some variables/memory needs to be freed at some stage but not sure where..
I'm still not sure if it is a good idea to go with this approach. Looking at the FastCGI docs, as I understand it, getenv shouldn't work on other web servers once in that loop. The FastCGI code uses fcgi - 2.4.2 from GISInternals, which is the latest version. Do Linux builds use the same?
Overwriting the env with all variables seems dangerous, but to check every key to see if it exists seems laborious. Messing with PATH etc. could cause further issues.
Creating a config object outside the FastCGI loop may be better?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6290,2021-04-11T21:17:53Z,2021-04-14T18:57:08Z,2021-04-15T01:04:19Z,CLOSED,False,22,1,1,https://github.com/geographika,WIP: Copy environ variable to FastCGI environ,5,[],https://github.com/mapserver/mapserver/pull/6290,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/6290#issuecomment-818061824,"More of a proof-of-concept than a pull request.
This gets the CURL_CA_BUNDLE value from the environment prior to FCGI_Accept, and then puts it into the FastCGI environment so it can be accessed later:

  
    
      MapServer/maphttp.c
    
    
         Line 474
      in
      cde0920
    
  
  
    

        
          
           pszCurlCABundle = getenv(""CURL_CA_BUNDLE""); 
        
    
  


This works ok, but there are lots of MapServer environment variables. Some list/loop could be used?
Alternatively maybe adding the variables to the mapserv->map object would make more sense (and perhaps the same approach could be reused as part of https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File).","It looks like the approach of modifying the environment in combination with FastCGI is a dead-end
The doc of FCGI_Accept() mentions:
 * Side effects:
 *      If the application was invoked as a FastCGI server,
 *      and this is not the first call to this procedure,
 *      FCGI_Accept first performs the equivalent of FCGI_Finish.
 *
 *      On every call, FCGI_Accept accepts the new request and
 *      reads the FCGI_PARAMS stream into an environment array,
 *      i.e. a NULL-terminated array of strings of the form
 *      ``name=value''.  It assigns a pointer to this array
 *      to the global variable environ, used by the standard
 *      library function getenv.  It creates new FCGI_FILE *s
 *      representing input from the HTTP server, output to the HTTP
 *      server, and error output to the HTTP server, and assigns these
 *      new files to stdin, stdout, and stderr respectively.
 *
 *      DO NOT mutate or retain pointers to environ or any values
 *      contained in it (e.g. to the result of calling getenv(3)),
 *      since these are freed by the next call to FCGI_Finish or
 *      FCGI_Accept.  In particular do not use setenv(3) or putenv(3)
 *      in conjunction with FCGI_Accept.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6290,2021-04-11T21:17:53Z,2021-04-14T18:57:08Z,2021-04-15T01:04:19Z,CLOSED,False,22,1,1,https://github.com/geographika,WIP: Copy environ variable to FastCGI environ,5,[],https://github.com/mapserver/mapserver/pull/6290,https://github.com/geographika,5,https://github.com/MapServer/MapServer/pull/6290#issuecomment-818072600,"More of a proof-of-concept than a pull request.
This gets the CURL_CA_BUNDLE value from the environment prior to FCGI_Accept, and then puts it into the FastCGI environment so it can be accessed later:

  
    
      MapServer/maphttp.c
    
    
         Line 474
      in
      cde0920
    
  
  
    

        
          
           pszCurlCABundle = getenv(""CURL_CA_BUNDLE""); 
        
    
  


This works ok, but there are lots of MapServer environment variables. Some list/loop could be used?
Alternatively maybe adding the variables to the mapserv->map object would make more sense (and perhaps the same approach could be reused as part of https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File).",@rouault - you added some good information in #6167 (comment) as part of #6167 - maybe getenv does cause issues in other environs/web servers?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6290,2021-04-11T21:17:53Z,2021-04-14T18:57:08Z,2021-04-15T01:04:19Z,CLOSED,False,22,1,1,https://github.com/geographika,WIP: Copy environ variable to FastCGI environ,5,[],https://github.com/mapserver/mapserver/pull/6290,https://github.com/rouault,6,https://github.com/MapServer/MapServer/pull/6290#issuecomment-818626240,"More of a proof-of-concept than a pull request.
This gets the CURL_CA_BUNDLE value from the environment prior to FCGI_Accept, and then puts it into the FastCGI environment so it can be accessed later:

  
    
      MapServer/maphttp.c
    
    
         Line 474
      in
      cde0920
    
  
  
    

        
          
           pszCurlCABundle = getenv(""CURL_CA_BUNDLE""); 
        
    
  


This works ok, but there are lots of MapServer environment variables. Some list/loop could be used?
Alternatively maybe adding the variables to the mapserv->map object would make more sense (and perhaps the same approach could be reused as part of https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File).","ok, so for Apache / FCGI, after experimentations, I have now a good idea of what happens:

if you add in your apache conf SetEnv FOO my_value (or PassEnv FOO and FOO is for example set in /etc/apache2/envvars), then getenv(""FOO"") only works after FCGI_Accept, and is added after the per-request CGI environment variables
if you add FcgidInitialEnv FOO my_value, then getenv(""FOO"") only works before FCGI_Accept. This is what you'd typically need for MS_DEBUGLEVEL which is read before the fcgi loop. In addition to what you explicitly pass that way, apache also seems to propagate automatically PATH and LD_LIBRARY_PATH",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6290,2021-04-11T21:17:53Z,2021-04-14T18:57:08Z,2021-04-15T01:04:19Z,CLOSED,False,22,1,1,https://github.com/geographika,WIP: Copy environ variable to FastCGI environ,5,[],https://github.com/mapserver/mapserver/pull/6290,https://github.com/sdlime,7,https://github.com/MapServer/MapServer/pull/6290#issuecomment-818849099,"More of a proof-of-concept than a pull request.
This gets the CURL_CA_BUNDLE value from the environment prior to FCGI_Accept, and then puts it into the FastCGI environment so it can be accessed later:

  
    
      MapServer/maphttp.c
    
    
         Line 474
      in
      cde0920
    
  
  
    

        
          
           pszCurlCABundle = getenv(""CURL_CA_BUNDLE""); 
        
    
  


This works ok, but there are lots of MapServer environment variables. Some list/loop could be used?
Alternatively maybe adding the variables to the mapserv->map object would make more sense (and perhaps the same approach could be reused as part of https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File).","ok, so for Apache / FCGI, after experimentations, I have now a good idea of what happens:

if you add in your apache conf SetEnv FOO my_value (or PassEnv FOO and FOO is for example set in /etc/apache2/envvars), then getenv(""FOO"") only works after FCGI_Accept, and is added after the per-request CGI environment variables
if you add FcgidInitialEnv FOO my_value, then getenv(""FOO"") only works before FCGI_Accept. This is what you'd typically need for MS_DEBUGLEVEL which is read before the fcgi loop. In addition to what you explicitly pass that way, apache also seems to propagate automatically PATH and LD_LIBRARY_PATH


So I interpret this as Apache CGI and FastCGI can access the environment vars as intended, correct?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6290,2021-04-11T21:17:53Z,2021-04-14T18:57:08Z,2021-04-15T01:04:19Z,CLOSED,False,22,1,1,https://github.com/geographika,WIP: Copy environ variable to FastCGI environ,5,[],https://github.com/mapserver/mapserver/pull/6290,https://github.com/rouault,8,https://github.com/MapServer/MapServer/pull/6290#issuecomment-818853098,"More of a proof-of-concept than a pull request.
This gets the CURL_CA_BUNDLE value from the environment prior to FCGI_Accept, and then puts it into the FastCGI environment so it can be accessed later:

  
    
      MapServer/maphttp.c
    
    
         Line 474
      in
      cde0920
    
  
  
    

        
          
           pszCurlCABundle = getenv(""CURL_CA_BUNDLE""); 
        
    
  


This works ok, but there are lots of MapServer environment variables. Some list/loop could be used?
Alternatively maybe adding the variables to the mapserv->map object would make more sense (and perhaps the same approach could be reused as part of https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File).","So I interpret this as Apache CGI and FastCGI can access the environment vars as intended, correct?

yes, but you have to be careful and rather knowledgeable of mapserver internals to know if you need to define a per-request var or an initial setting one.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6290,2021-04-11T21:17:53Z,2021-04-14T18:57:08Z,2021-04-15T01:04:19Z,CLOSED,False,22,1,1,https://github.com/geographika,WIP: Copy environ variable to FastCGI environ,5,[],https://github.com/mapserver/mapserver/pull/6290,https://github.com/geographika,9,https://github.com/MapServer/MapServer/pull/6290#issuecomment-819756940,"More of a proof-of-concept than a pull request.
This gets the CURL_CA_BUNDLE value from the environment prior to FCGI_Accept, and then puts it into the FastCGI environment so it can be accessed later:

  
    
      MapServer/maphttp.c
    
    
         Line 474
      in
      cde0920
    
  
  
    

        
          
           pszCurlCABundle = getenv(""CURL_CA_BUNDLE""); 
        
    
  


This works ok, but there are lots of MapServer environment variables. Some list/loop could be used?
Alternatively maybe adding the variables to the mapserv->map object would make more sense (and perhaps the same approach could be reused as part of https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File).","ok, so for Apache / FCGI, after experimentations, I have now a good idea of what happens:
* if you add in your apache conf `SetEnv FOO my_value` (or `PassEnv FOO` and FOO is for example set in /etc/apache2/envvars), then getenv(""FOO"") only works _after_ FCGI_Accept, and is added after the per-request CGI environment variables

* if you add `FcgidInitialEnv FOO my_value`, then getenv(""FOO"") only works _before_ FCGI_Accept. This is what you'd typically need for MS_DEBUGLEVEL which is read before the fcgi loop. In addition to what you explicitly pass that way, apache also seems to propagate automatically PATH and LD_LIBRARY_PATH


Thanks for that clarification. It looks like IIS FastCGI only supports the equivalent of FcgidInitialEnv FOO my_value with no possibility I can find for setting anything after FCGI_Accept.
I think this approach is a dead-end in terms of trying to fix IIS and a config approach will be the cleaner/more robust option for setting global MapServer parameters, so closing. Thanks for the code suggestions though @rouault - my C has improved, as has my appreciation for how much easier things are in Python..",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6290,2021-04-11T21:17:53Z,2021-04-14T18:57:08Z,2021-04-15T01:04:19Z,CLOSED,False,22,1,1,https://github.com/geographika,WIP: Copy environ variable to FastCGI environ,5,[],https://github.com/mapserver/mapserver/pull/6290,https://github.com/rouault,10,https://github.com/MapServer/MapServer/pull/6290#issuecomment-819765821,"More of a proof-of-concept than a pull request.
This gets the CURL_CA_BUNDLE value from the environment prior to FCGI_Accept, and then puts it into the FastCGI environment so it can be accessed later:

  
    
      MapServer/maphttp.c
    
    
         Line 474
      in
      cde0920
    
  
  
    

        
          
           pszCurlCABundle = getenv(""CURL_CA_BUNDLE""); 
        
    
  


This works ok, but there are lots of MapServer environment variables. Some list/loop could be used?
Alternatively maybe adding the variables to the mapserv->map object would make more sense (and perhaps the same approach could be reused as part of https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File).","with no possibility I can find for setting anything after FCGI_Accept.

so MS_MAP_PATTERN and the like can't be used with IIS in FastCGI, right ?

my C has improved

that's what I'm slowly converting what I can to C++. std::vector<std::string> is less unfriendly than raw char** :-)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6290,2021-04-11T21:17:53Z,2021-04-14T18:57:08Z,2021-04-15T01:04:19Z,CLOSED,False,22,1,1,https://github.com/geographika,WIP: Copy environ variable to FastCGI environ,5,[],https://github.com/mapserver/mapserver/pull/6290,https://github.com/geographika,11,https://github.com/MapServer/MapServer/pull/6290#issuecomment-819770372,"More of a proof-of-concept than a pull request.
This gets the CURL_CA_BUNDLE value from the environment prior to FCGI_Accept, and then puts it into the FastCGI environment so it can be accessed later:

  
    
      MapServer/maphttp.c
    
    
         Line 474
      in
      cde0920
    
  
  
    

        
          
           pszCurlCABundle = getenv(""CURL_CA_BUNDLE""); 
        
    
  


This works ok, but there are lots of MapServer environment variables. Some list/loop could be used?
Alternatively maybe adding the variables to the mapserv->map object would make more sense (and perhaps the same approach could be reused as part of https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File).","so MS_MAP_PATTERN and the like can't be used with IIS in FastCGI, right ?

I've not been able to, and I've gone through pretty much any IIS/FastCGI doc I've been able to find.
It is however pretty trivial to filter querystring parameters to have the same result.
The one environ setting that doesn't have a workaround is CURL_CA_BUNDLE.
Is it worth adding this as a CONFIG option to a Mapfile and checking with msGetConfigOption as well as the environ, or waiting til 8.0?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6290,2021-04-11T21:17:53Z,2021-04-14T18:57:08Z,2021-04-15T01:04:19Z,CLOSED,False,22,1,1,https://github.com/geographika,WIP: Copy environ variable to FastCGI environ,5,[],https://github.com/mapserver/mapserver/pull/6290,https://github.com/sdlime,12,https://github.com/MapServer/MapServer/pull/6290#issuecomment-819890508,"More of a proof-of-concept than a pull request.
This gets the CURL_CA_BUNDLE value from the environment prior to FCGI_Accept, and then puts it into the FastCGI environment so it can be accessed later:

  
    
      MapServer/maphttp.c
    
    
         Line 474
      in
      cde0920
    
  
  
    

        
          
           pszCurlCABundle = getenv(""CURL_CA_BUNDLE""); 
        
    
  


This works ok, but there are lots of MapServer environment variables. Some list/loop could be used?
Alternatively maybe adding the variables to the mapserv->map object would make more sense (and perhaps the same approach could be reused as part of https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File).","Could we store MS_MAP_PATTERN, etc... using CPLSetConfigOption() before FCGI_accept() and use that as a simple store in the meantime? Then use CPLGetConfigOption() in place of (or in addition to) getenv(). So no putenv() in the mix.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6290,2021-04-11T21:17:53Z,2021-04-14T18:57:08Z,2021-04-15T01:04:19Z,CLOSED,False,22,1,1,https://github.com/geographika,WIP: Copy environ variable to FastCGI environ,5,[],https://github.com/mapserver/mapserver/pull/6290,https://github.com/rouault,13,https://github.com/MapServer/MapServer/pull/6290#issuecomment-819893939,"More of a proof-of-concept than a pull request.
This gets the CURL_CA_BUNDLE value from the environment prior to FCGI_Accept, and then puts it into the FastCGI environment so it can be accessed later:

  
    
      MapServer/maphttp.c
    
    
         Line 474
      in
      cde0920
    
  
  
    

        
          
           pszCurlCABundle = getenv(""CURL_CA_BUNDLE""); 
        
    
  


This works ok, but there are lots of MapServer environment variables. Some list/loop could be used?
Alternatively maybe adding the variables to the mapserv->map object would make more sense (and perhaps the same approach could be reused as part of https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File).","Could we store MS_MAP_PATTERN, etc... using CPLSetConfigOption() before FCGI_accept() and use that as a simple store in the meantime? Then use CPLGetConfigOption() in place of (or in addition to) getenv(). So no putenv() in the mix.

That should work. At least for anything under MapServer and GDAL codebases (but not for PROJ's own env variables typically)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6290,2021-04-11T21:17:53Z,2021-04-14T18:57:08Z,2021-04-15T01:04:19Z,CLOSED,False,22,1,1,https://github.com/geographika,WIP: Copy environ variable to FastCGI environ,5,[],https://github.com/mapserver/mapserver/pull/6290,https://github.com/sdlime,14,https://github.com/MapServer/MapServer/pull/6290#issuecomment-819895068,"More of a proof-of-concept than a pull request.
This gets the CURL_CA_BUNDLE value from the environment prior to FCGI_Accept, and then puts it into the FastCGI environment so it can be accessed later:

  
    
      MapServer/maphttp.c
    
    
         Line 474
      in
      cde0920
    
  
  
    

        
          
           pszCurlCABundle = getenv(""CURL_CA_BUNDLE""); 
        
    
  


This works ok, but there are lots of MapServer environment variables. Some list/loop could be used?
Alternatively maybe adding the variables to the mapserv->map object would make more sense (and perhaps the same approach could be reused as part of https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File).","What GDAL versions so CPLSetConfigOption()/CPLGetConfigOption() apply to, has it been around awhile?

From: Even Rouault ***@***.***>
Sent: Wednesday, April 14, 2021 5:37 PM
To: MapServer/MapServer ***@***.***>
Cc: Lime, Steve D (MNIT) ***@***.***>; Comment ***@***.***>
Subject: Re: [MapServer/MapServer] WIP: Copy environ variable to FastCGI environ (#6290)

This message may be from an external email source.
Do not select links or open attachments unless verified. Report all suspicious emails to Minnesota IT Services Security Operations Center.
…
________________________________

Could we store MS_MAP_PATTERN, etc... using CPLSetConfigOption() before FCGI_accept() and use that as a simple store in the meantime? Then use CPLGetConfigOption() in place of (or in addition to) getenv(). So no putenv() in the mix.

That should work. At least for anything under MapServer and GDAL codebases (but not for PROJ's own env variables typically)

-
You are receiving this because you commented.
Reply to this email directly, view it on GitHub<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FMapServer%2FMapServer%2Fpull%2F6290%23issuecomment-819893939&data=04%7C01%7Csteve.lime%40state.mn.us%7C4180561c90e540f8c54108d8ff95d2a6%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637540366250927386%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=cK1%2Bl5%2B%2FJ5h0E59oss8qUdvYR4g2Jezx7R2XDLpFjJA%3D&reserved=0>, or unsubscribe<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAAMGN66GFMLW4JFYR3ERYWLTIYKI3ANCNFSM42YCPLAQ&data=04%7C01%7Csteve.lime%40state.mn.us%7C4180561c90e540f8c54108d8ff95d2a6%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637540366250937345%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=TdJqpkVLLRKvmxofrA53j%2BxTa%2BPLe4tib0sJ124oSYM%3D&reserved=0>.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6290,2021-04-11T21:17:53Z,2021-04-14T18:57:08Z,2021-04-15T01:04:19Z,CLOSED,False,22,1,1,https://github.com/geographika,WIP: Copy environ variable to FastCGI environ,5,[],https://github.com/mapserver/mapserver/pull/6290,https://github.com/rouault,15,https://github.com/MapServer/MapServer/pull/6290#issuecomment-819898872,"More of a proof-of-concept than a pull request.
This gets the CURL_CA_BUNDLE value from the environment prior to FCGI_Accept, and then puts it into the FastCGI environment so it can be accessed later:

  
    
      MapServer/maphttp.c
    
    
         Line 474
      in
      cde0920
    
  
  
    

        
          
           pszCurlCABundle = getenv(""CURL_CA_BUNDLE""); 
        
    
  


This works ok, but there are lots of MapServer environment variables. Some list/loop could be used?
Alternatively maybe adding the variables to the mapserv->map object would make more sense (and perhaps the same approach could be reused as part of https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File).","What GDAL versions so CPLSetConfigOption()/CPLGetConfigOption() apply to, has it been around awhile?

Not sure I was born yet when it was there :-) Anyway Mapserver already uses them : https://github.com/MapServer/MapServer/search?q=CPLSetConfigOption",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6290,2021-04-11T21:17:53Z,2021-04-14T18:57:08Z,2021-04-15T01:04:19Z,CLOSED,False,22,1,1,https://github.com/geographika,WIP: Copy environ variable to FastCGI environ,5,[],https://github.com/mapserver/mapserver/pull/6290,https://github.com/sdlime,16,https://github.com/MapServer/MapServer/pull/6290#issuecomment-819901158,"More of a proof-of-concept than a pull request.
This gets the CURL_CA_BUNDLE value from the environment prior to FCGI_Accept, and then puts it into the FastCGI environment so it can be accessed later:

  
    
      MapServer/maphttp.c
    
    
         Line 474
      in
      cde0920
    
  
  
    

        
          
           pszCurlCABundle = getenv(""CURL_CA_BUNDLE""); 
        
    
  


This works ok, but there are lots of MapServer environment variables. Some list/loop could be used?
Alternatively maybe adding the variables to the mapserv->map object would make more sense (and perhaps the same approach could be reused as part of https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File).",Logical to take advantage then.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6290,2021-04-11T21:17:53Z,2021-04-14T18:57:08Z,2021-04-15T01:04:19Z,CLOSED,False,22,1,1,https://github.com/geographika,WIP: Copy environ variable to FastCGI environ,5,[],https://github.com/mapserver/mapserver/pull/6290,https://github.com/sdlime,17,https://github.com/MapServer/MapServer/pull/6290#issuecomment-819911949,"More of a proof-of-concept than a pull request.
This gets the CURL_CA_BUNDLE value from the environment prior to FCGI_Accept, and then puts it into the FastCGI environment so it can be accessed later:

  
    
      MapServer/maphttp.c
    
    
         Line 474
      in
      cde0920
    
  
  
    

        
          
           pszCurlCABundle = getenv(""CURL_CA_BUNDLE""); 
        
    
  


This works ok, but there are lots of MapServer environment variables. Some list/loop could be used?
Alternatively maybe adding the variables to the mapserv->map object would make more sense (and perhaps the same approach could be reused as part of https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File).","Perhaps search for getenv() and use that as a guide for what to grab - the MS_* stuff and things like SERVER_NAME, SERVER_PORT, etc... Then switch to CPLGetConfigOption() as much as possible. I'm assuming the calls in cgiutil.c would remain as would some other areas. Might be ok for both CGI and FCGI.
Actually that's probably too much... just sticking to the MS_* vars might be reasonable though,",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6291,2021-04-12T13:54:07Z,2021-04-13T15:47:56Z,2021-04-13T15:48:17Z,MERGED,True,64,0,1,https://github.com/sdlime,Add action to run Coverity static scan.,8,[],https://github.com/mapserver/mapserver/pull/6291,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/6291,Initial version - we're allowed 2 scans per day at most so at the moment this needs to be triggered by hand. Eventually (post-8.0 release) this can be scheduled action. Requires a project token set as a secret. --Steve,Initial version - we're allowed 2 scans per day at most so at the moment this needs to be triggered by hand. Eventually (post-8.0 release) this can be scheduled action. Requires a project token set as a secret. --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6291,2021-04-12T13:54:07Z,2021-04-13T15:47:56Z,2021-04-13T15:48:17Z,MERGED,True,64,0,1,https://github.com/sdlime,Add action to run Coverity static scan.,8,[],https://github.com/mapserver/mapserver/pull/6291,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6291#issuecomment-817872661,Initial version - we're allowed 2 scans per day at most so at the moment this needs to be triggered by hand. Eventually (post-8.0 release) this can be scheduled action. Requires a project token set as a secret. --Steve,"we're allowed 2 scans per day at most so at the moment this needs to be triggered by hand. Eventually (post-8.0 release) this can be scheduled action

why wait 8.0 ?
You can add the secret at https://github.com/MapServer/MapServer/settings/secrets/actions/new",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6291,2021-04-12T13:54:07Z,2021-04-13T15:47:56Z,2021-04-13T15:48:17Z,MERGED,True,64,0,1,https://github.com/sdlime,Add action to run Coverity static scan.,8,[],https://github.com/mapserver/mapserver/pull/6291,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/6291#issuecomment-817892210,Initial version - we're allowed 2 scans per day at most so at the moment this needs to be triggered by hand. Eventually (post-8.0 release) this can be scheduled action. Requires a project token set as a secret. --Steve,"we're allowed 2 scans per day at most so at the moment this needs to be triggered by hand. Eventually (post-8.0 release) this can be scheduled action

why wait 8.0 ?
You can add the secret at https://github.com/MapServer/MapServer/settings/secrets/actions/new

I was thinking the initial pass through defects would be part of 8.0 work and would like to save those runs for adhoc use.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6291,2021-04-12T13:54:07Z,2021-04-13T15:47:56Z,2021-04-13T15:48:17Z,MERGED,True,64,0,1,https://github.com/sdlime,Add action to run Coverity static scan.,8,[],https://github.com/mapserver/mapserver/pull/6291,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/6291#issuecomment-817897204,Initial version - we're allowed 2 scans per day at most so at the moment this needs to be triggered by hand. Eventually (post-8.0 release) this can be scheduled action. Requires a project token set as a secret. --Steve,"I was thinking the initial pass through defects would be part of 8.0 work and would like to save those runs for adhoc use.

ok, then perhaps schedule once a week on sundays for now ?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6291,2021-04-12T13:54:07Z,2021-04-13T15:47:56Z,2021-04-13T15:48:17Z,MERGED,True,64,0,1,https://github.com/sdlime,Add action to run Coverity static scan.,8,[],https://github.com/mapserver/mapserver/pull/6291,https://github.com/sdlime,5,https://github.com/MapServer/MapServer/pull/6291#issuecomment-818346129,Initial version - we're allowed 2 scans per day at most so at the moment this needs to be triggered by hand. Eventually (post-8.0 release) this can be scheduled action. Requires a project token set as a secret. --Steve,"I was thinking the initial pass through defects would be part of 8.0 work and would like to save those runs for adhoc use.

ok, then perhaps schedule once a week on sundays for now ?

That would be fine w/me. We'd want to make sure the schedule would only apply to MapServer/MapServer an not clones. Guessing we can add:
if: github.repository == 'MapServer/MapServer' 
before the on: section. I'll update with those changes... Thanks for the review!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6291,2021-04-12T13:54:07Z,2021-04-13T15:47:56Z,2021-04-13T15:48:17Z,MERGED,True,64,0,1,https://github.com/sdlime,Add action to run Coverity static scan.,8,[],https://github.com/mapserver/mapserver/pull/6291,https://github.com/sdlime,6,https://github.com/MapServer/MapServer/pull/6291#issuecomment-818355437,Initial version - we're allowed 2 scans per day at most so at the moment this needs to be triggered by hand. Eventually (post-8.0 release) this can be scheduled action. Requires a project token set as a secret. --Steve,"Seems like specific secrets can't be used in conditionals: actions/runner#520 - Although I see that's where the workaround to use an env variable is mentioned.
However, I don't think you can use conditionals in the on event.
So, perhaps the best course of action would be limit to MapServer/MapServer as you suggested and then forks could update a local copy of the action in their feature branch if necessary. Would be rare I think...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6291,2021-04-12T13:54:07Z,2021-04-13T15:47:56Z,2021-04-13T15:48:17Z,MERGED,True,64,0,1,https://github.com/sdlime,Add action to run Coverity static scan.,8,[],https://github.com/mapserver/mapserver/pull/6291,https://github.com/rouault,7,https://github.com/MapServer/MapServer/pull/6291#issuecomment-818834661,Initial version - we're allowed 2 scans per day at most so at the moment this needs to be triggered by hand. Eventually (post-8.0 release) this can be scheduled action. Requires a project token set as a secret. --Steve,Looks good to merge to me,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6291,2021-04-12T13:54:07Z,2021-04-13T15:47:56Z,2021-04-13T15:48:17Z,MERGED,True,64,0,1,https://github.com/sdlime,Add action to run Coverity static scan.,8,[],https://github.com/mapserver/mapserver/pull/6291,https://github.com/sdlime,8,https://github.com/MapServer/MapServer/pull/6291#issuecomment-818842376,Initial version - we're allowed 2 scans per day at most so at the moment this needs to be triggered by hand. Eventually (post-8.0 release) this can be scheduled action. Requires a project token set as a secret. --Steve,Thanks @rouault!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6293,2021-04-13T15:49:42Z,2021-04-14T10:17:12Z,2021-04-14T10:17:12Z,MERGED,True,111,50,22,https://github.com/rouault,Add a github action to perform the build and tests,3,[],https://github.com/mapserver/mapserver/pull/6293,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6293,"It strongly leverages the ci/travis script, and install packages that are already installed in Travis VM in a start.sh script
I've also done some ""fixes"" in msautotest/php. I suspect those tests aren't run on Travis for a unknown reason, but in the Docker image used by the github action they are run.","It strongly leverages the ci/travis script, and install packages that are already installed in Travis VM in a start.sh script
I've also done some ""fixes"" in msautotest/php. I suspect those tests aren't run on Travis for a unknown reason, but in the Docker image used by the github action they are run.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6294,2021-04-14T11:55:17Z,2021-04-14T13:34:51Z,2021-04-14T13:34:51Z,MERGED,True,67,4,2,https://github.com/rouault,CI: test mapserv as a CGI and FastCGI binary,1,[],https://github.com/mapserver/mapserver/pull/6294,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6294,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6294,2021-04-14T11:55:17Z,2021-04-14T13:34:51Z,2021-04-14T13:34:51Z,MERGED,True,67,4,2,https://github.com/rouault,CI: test mapserv as a CGI and FastCGI binary,1,[],https://github.com/mapserver/mapserver/pull/6294,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6294#issuecomment-819515981,,Excellent addition...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6294,2021-04-14T11:55:17Z,2021-04-14T13:34:51Z,2021-04-14T13:34:51Z,MERGED,True,67,4,2,https://github.com/rouault,CI: test mapserv as a CGI and FastCGI binary,1,[],https://github.com/mapserver/mapserver/pull/6294,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/6294#issuecomment-819522577,,"yeah, was a bit of a shame that for a server oriented software we didn't had yet testing of the whole client -> webserver -> cgi binary :-)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6295,2021-04-14T12:43:28Z,2021-04-14T13:37:40Z,2021-04-14T13:37:57Z,MERGED,True,79,54,15,https://github.com/sdlime,Fix resource leak and pointObj initialization errors.,14,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6295,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/6295,Identified by Coverity scanning... --Steve,Identified by Coverity scanning... --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6295,2021-04-14T12:43:28Z,2021-04-14T13:37:40Z,2021-04-14T13:37:57Z,MERGED,True,79,54,15,https://github.com/sdlime,Fix resource leak and pointObj initialization errors.,14,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6295,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6295#issuecomment-819492178,Identified by Coverity scanning... --Steve,wow great work!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6295,2021-04-14T12:43:28Z,2021-04-14T13:37:40Z,2021-04-14T13:37:57Z,MERGED,True,79,54,15,https://github.com/sdlime,Fix resource leak and pointObj initialization errors.,14,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6295,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6295#issuecomment-819492783,Identified by Coverity scanning... --Steve,"@sdlime can we try to backport these to branch-7-6 ?  (will add the label, until you say nay)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6295,2021-04-14T12:43:28Z,2021-04-14T13:37:40Z,2021-04-14T13:37:57Z,MERGED,True,79,54,15,https://github.com/sdlime,Fix resource leak and pointObj initialization errors.,14,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6295,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/6295#issuecomment-819494920,Identified by Coverity scanning... --Steve,"@sdlime can we try to backport these to branch-7-6 ? (will add the label, until you say nay)

I think I'd hang on for some review first. These were pretty trivial (more testing a process than anything) but better to be safe.",True,{'THUMBS_UP': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6296,2021-04-14T13:38:09Z,2021-04-14T18:51:09Z,2021-04-14T19:15:34Z,MERGED,True,77,51,15,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Fix resource leak and pointObj initialization errors.,2,[],https://github.com/mapserver/mapserver/pull/6296,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6296,Backport 7e7464e from #6295,Backport 7e7464e from #6295,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6296,2021-04-14T13:38:09Z,2021-04-14T18:51:09Z,2021-04-14T19:15:34Z,MERGED,True,77,51,15,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Fix resource leak and pointObj initialization errors.,2,[],https://github.com/mapserver/mapserver/pull/6296,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6296#issuecomment-819528135,Backport 7e7464e from #6295,Bad automated backport. There are conflicts to solve at hand,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6296,2021-04-14T13:38:09Z,2021-04-14T18:51:09Z,2021-04-14T19:15:34Z,MERGED,True,77,51,15,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Fix resource leak and pointObj initialization errors.,2,[],https://github.com/mapserver/mapserver/pull/6296,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/6296#issuecomment-819529735,Backport 7e7464e from #6295,Looking at fixing them,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6296,2021-04-14T13:38:09Z,2021-04-14T18:51:09Z,2021-04-14T19:15:34Z,MERGED,True,77,51,15,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Fix resource leak and pointObj initialization errors.,2,[],https://github.com/mapserver/mapserver/pull/6296,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/6296#issuecomment-819752497,Backport 7e7464e from #6295,Travis is broken in that branch (independently of the changes in that PR). msautotest running fine locally in my Vagrant VM,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6296,2021-04-14T13:38:09Z,2021-04-14T18:51:09Z,2021-04-14T19:15:34Z,MERGED,True,77,51,15,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Fix resource leak and pointObj initialization errors.,2,[],https://github.com/mapserver/mapserver/pull/6296,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/6296#issuecomment-819767834,Backport 7e7464e from #6295,thanks @rouault will monitor this...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6297,2021-04-15T15:02:07Z,2021-04-15T18:29:03Z,2021-04-16T00:51:31Z,MERGED,True,9,14,3,https://github.com/sdlime,Fixes for a couple of things I ran into when doing an upgrade on app,13,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6297,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/6297,Would be ok to backport to 7.6 IMHO.,Would be ok to backport to 7.6 IMHO.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6298,2021-04-15T18:29:31Z,2021-04-15T22:38:46Z,2021-04-15T22:38:46Z,MERGED,True,10,14,3,https://github.com/MapServer-backport-bot,"[Backport branch-7-6] Improved initial check on generating reference maps, avoid crash with label styles (symbol errors), removed dead code.",2,[],https://github.com/mapserver/mapserver/pull/6298,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6298,Backport 00e5b98 from #6297,Backport 00e5b98 from #6297,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6298,2021-04-15T18:29:31Z,2021-04-15T22:38:46Z,2021-04-15T22:38:46Z,MERGED,True,10,14,3,https://github.com/MapServer-backport-bot,"[Backport branch-7-6] Improved initial check on generating reference maps, avoid crash with label styles (symbol errors), removed dead code.",2,[],https://github.com/mapserver/mapserver/pull/6298,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6298#issuecomment-820672295,Backport 00e5b98 from #6297,"@sdlime sorry to sound annoying, but do you mind editing the title of this pull request (because when I generate the changelog for the release later, the summary for this change will only say ""fix a couple of things""...and usually when this happens in the changelog i have to manually go find the ticket and update the changelog html with better description, for the readers).  thanks!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6298,2021-04-15T18:29:31Z,2021-04-15T22:38:46Z,2021-04-15T22:38:46Z,MERGED,True,10,14,3,https://github.com/MapServer-backport-bot,"[Backport branch-7-6] Improved initial check on generating reference maps, avoid crash with label styles (symbol errors), removed dead code.",2,[],https://github.com/mapserver/mapserver/pull/6298,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/6298#issuecomment-820674157,Backport 00e5b98 from #6297,"@sdlime sorry to sound annoying, but do you mind editing the title of this pull request (because when I generate the changelog for the release later, the summary for this change will only say ""fix a couple of things""...and usually when this happens in the changelog i have to manually go find the ticket and update the changelog html with better description, for the readers). thanks!

Sorry, no problem. Main has the old description though - can that be changed?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6298,2021-04-15T18:29:31Z,2021-04-15T22:38:46Z,2021-04-15T22:38:46Z,MERGED,True,10,14,3,https://github.com/MapServer-backport-bot,"[Backport branch-7-6] Improved initial check on generating reference maps, avoid crash with label styles (symbol errors), removed dead code.",2,[],https://github.com/mapserver/mapserver/pull/6298,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/6298#issuecomment-820675782,Backport 00e5b98 from #6297,TravisCI died for a reason other than my changes - which were pretty benign.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6298,2021-04-15T18:29:31Z,2021-04-15T22:38:46Z,2021-04-15T22:38:46Z,MERGED,True,10,14,3,https://github.com/MapServer-backport-bot,"[Backport branch-7-6] Improved initial check on generating reference maps, avoid crash with label styles (symbol errors), removed dead code.",2,[],https://github.com/mapserver/mapserver/pull/6298,https://github.com/rouault,5,https://github.com/MapServer/MapServer/pull/6298#issuecomment-820681485,Backport 00e5b98 from #6297,"TravisCI died for a reason other than my changes

TravisCI for the 7.6 branch is defunct. Proably due to Trusty being too old or python 2.7 choking with pip.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6298,2021-04-15T18:29:31Z,2021-04-15T22:38:46Z,2021-04-15T22:38:46Z,MERGED,True,10,14,3,https://github.com/MapServer-backport-bot,"[Backport branch-7-6] Improved initial check on generating reference maps, avoid crash with label styles (symbol errors), removed dead code.",2,[],https://github.com/mapserver/mapserver/pull/6298,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/6298#issuecomment-820684174,Backport 00e5b98 from #6297,All has been well in branch-7-6 until a change a few days ago....will investigate now....,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6298,2021-04-15T18:29:31Z,2021-04-15T22:38:46Z,2021-04-15T22:38:46Z,MERGED,True,10,14,3,https://github.com/MapServer-backport-bot,"[Backport branch-7-6] Improved initial check on generating reference maps, avoid crash with label styles (symbol errors), removed dead code.",2,[],https://github.com/mapserver/mapserver/pull/6298,https://github.com/jmckenna,7,https://github.com/MapServer/MapServer/pull/6298#issuecomment-820685488,Backport 00e5b98 from #6297,"regarding Python 2.7 and PIP, we should not rely on such an old release (I think this was a change recently, for pip to run with a dev's older Python 2.7).  But obviously that is not sustainable (good word), so let's put that back to run on Python3......looking now...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6298,2021-04-15T18:29:31Z,2021-04-15T22:38:46Z,2021-04-15T22:38:46Z,MERGED,True,10,14,3,https://github.com/MapServer-backport-bot,"[Backport branch-7-6] Improved initial check on generating reference maps, avoid crash with label styles (symbol errors), removed dead code.",2,[],https://github.com/mapserver/mapserver/pull/6298,https://github.com/dmorissette,8,https://github.com/MapServer/MapServer/pull/6298#issuecomment-820707501,Backport 00e5b98 from #6297,"@jmckenna if you are alluding to PR #6285, then for the record the ""dev's old python 2.7"" you are alluding to is actually our official Vagrant config (and not my or anyone's old python 2.7). This Vagrant config is required to update/upgrade msautotest results. Full story in the PR.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6298,2021-04-15T18:29:31Z,2021-04-15T22:38:46Z,2021-04-15T22:38:46Z,MERGED,True,10,14,3,https://github.com/MapServer-backport-bot,"[Backport branch-7-6] Improved initial check on generating reference maps, avoid crash with label styles (symbol errors), removed dead code.",2,[],https://github.com/mapserver/mapserver/pull/6298,https://github.com/jmckenna,9,https://github.com/MapServer/MapServer/pull/6298#issuecomment-820716962,Backport 00e5b98 from #6297,"ah thanks @dmorissette, I was assuming our vagrant config was changed for Python 2.7, sorry my mistake.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6298,2021-04-15T18:29:31Z,2021-04-15T22:38:46Z,2021-04-15T22:38:46Z,MERGED,True,10,14,3,https://github.com/MapServer-backport-bot,"[Backport branch-7-6] Improved initial check on generating reference maps, avoid crash with label styles (symbol errors), removed dead code.",2,[],https://github.com/mapserver/mapserver/pull/6298,https://github.com/jmckenna,10,https://github.com/MapServer/MapServer/pull/6298#issuecomment-820717231,Backport 00e5b98 from #6297,"By the way, great to see so many watching so closely!  This is a good problem to have :)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6298,2021-04-15T18:29:31Z,2021-04-15T22:38:46Z,2021-04-15T22:38:46Z,MERGED,True,10,14,3,https://github.com/MapServer-backport-bot,"[Backport branch-7-6] Improved initial check on generating reference maps, avoid crash with label styles (symbol errors), removed dead code.",2,[],https://github.com/mapserver/mapserver/pull/6298,https://github.com/jmckenna,11,https://github.com/MapServer/MapServer/pull/6298#issuecomment-820718400,Backport 00e5b98 from #6297,"Gotta love open source, only way to get people to speak-up is to make a mistake :)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6300,2021-04-16T02:40:39Z,2021-04-16T03:17:23Z,2021-04-16T18:42:35Z,MERGED,True,8,18,1,https://github.com/sdlime,Require url-based symbol values to be pre-defined.,12,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6300,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/6300,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6300,2021-04-16T02:40:39Z,2021-04-16T03:17:23Z,2021-04-16T18:42:35Z,MERGED,True,8,18,1,https://github.com/sdlime,Require url-based symbol values to be pre-defined.,12,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6300,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6300#issuecomment-820877750,,I think this should be back ported...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6301,2021-04-16T14:16:27Z,2021-04-16T14:28:20Z,2021-04-16T14:41:45Z,MERGED,True,8,18,1,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Require url-based symbol values to be pre-defined.,1,[],https://github.com/mapserver/mapserver/pull/6301,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6301,Backport 25331c2 from #6300,Backport 25331c2 from #6300,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6301,2021-04-16T14:16:27Z,2021-04-16T14:28:20Z,2021-04-16T14:41:45Z,MERGED,True,8,18,1,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Require url-based symbol values to be pre-defined.,1,[],https://github.com/mapserver/mapserver/pull/6301,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6301#issuecomment-821226262,Backport 25331c2 from #6300,thanks Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6302,2021-04-16T19:24:54Z,2021-11-10T19:42:30Z,2021-11-10T19:42:31Z,MERGED,True,46,0,1,https://github.com/jmckenna,add IRC build notifications,4,['Work in progress'],https://github.com/mapserver/mapserver/pull/6302,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6302,"adds build notifications as a GitHub action/workflow, to the IRC channel #mapserver
credit to @klassenjs / GeoMoose team for this
let's try this here for MapServer....","adds build notifications as a GitHub action/workflow, to the IRC channel #mapserver
credit to @klassenjs / GeoMoose team for this
let's try this here for MapServer....",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/6303,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6303#issuecomment-822001254,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"@rouault, @geographika - for this pull request I need to update the test suite to have it's own config file for mapserv-based tests. I added that file to the repo but need to reference it properly using an environment variable called MAPSERVER_CONFIG. What's the right way to do that in the context of the test configuration? Value would be something like {MSAUTOTEST DIRECTORY}/etc/mapserv.conf. --Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/6303#issuecomment-822007796,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"What's the right way to do that in the context of the test configuration?

in msautotest/pytest.ini, you can add environment variables like in https://github.com/MobileDynasty/pytest-env#usage . However as we change the current working directory in each subdirectory, I don't think this can be used, or maybe counter-intutively, by setting MAPSERVER_CONFIG to ""../etc/mapserv.conf"" .  If that doesn't work, probably hacking into msautotest/conftest.py",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/6303#issuecomment-823479536,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"Looks like all of the ows POST-based tests are failing for Travis, weird. AppVeyor is puking on lexer globals in a .cpp, not sure how to fix that one.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/rouault,5,https://github.com/MapServer/MapServer/pull/6303#issuecomment-823505459,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"AppVeyor is puking on lexer globals in a .cpp, not sure how to fix that one.

Maybe put their declaration inside a extern ""C"" { } block",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,6,https://github.com/MapServer/MapServer/pull/6303#issuecomment-823530176,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"AppVeyor is puking on lexer globals in a .cpp, not sure how to fix that one.

Maybe put their declaration inside a extern ""C"" { } block

That was the ticket, thanks. Will take a look at the build action...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,7,https://github.com/MapServer/MapServer/pull/6303#issuecomment-823560054,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"@rouault, one of the Travis builds failed with memory leaks detected related to gdal. Does additional cleanup need to be done when using CPLSetConfigOption()? I thought perhaps not since it was already being used in the codebase.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/rouault,8,https://github.com/MapServer/MapServer/pull/6303#issuecomment-823577370,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"Does additional cleanup need to be done when using CPLSetConfigOption()?

hum, normally not. Not sure what is going on there",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/geographika,9,https://github.com/MapServer/MapServer/pull/6303#issuecomment-877761248,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"@sdlime - would it be an option to allow a config filename to be passed via the command line for testing?
Looking at the mapserv.c code there are warnings about security issues linking to #3485 - would this also apply to adding a new config filename switch?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,10,https://github.com/MapServer/MapServer/pull/6303#issuecomment-878303875,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"@sdlime - would it be an option to allow a config filename to be passed via the command line for testing?
Looking at the mapserv.c code there are warnings about security issues linking to #3485 - would this also apply to adding a new config filename switch?

I don't remember the details of that issue but presumably we'd still want to avoid any additional command arguments. I only added ""PATH_INFO=..."" as part of OGCAPI support since it parallels the ""QUERY_STRING=..."" hook. @dmorissette might have some other ideas. Seems safest to add a mechanism to set/override environment vars to the regression test suite.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,11,https://github.com/MapServer/MapServer/pull/6303#issuecomment-885660016,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"@rouault, what do you think the best way to add a config file to the build workflow is?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/rouault,12,https://github.com/MapServer/MapServer/pull/6303#issuecomment-885677803,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"what do you think the best way to add a config file to the build workflow is?

You mean something that doesn't involve the msautotest/pytest.ini way ?
There's still the possibility to add manual steps towards the end of .github/workflows/start.sh",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,13,https://github.com/MapServer/MapServer/pull/6303#issuecomment-885711178,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"I figure there must be a way to reference the mapserver.conf config file we have as part of msautotest. We could add MAPSERVER_CONFIG_FILE environment variable declaration to the snippet of apache configuration in start.sh. I'm not sure what the path would be though.

From: Even Rouault ***@***.***>
Sent: Friday, July 23, 2021 9:27 AM
To: MapServer/MapServer ***@***.***>
Cc: Lime, Steve D (MNIT) ***@***.***>; Mention ***@***.***>
Subject: Re: [MapServer/MapServer] WIP: Support for a mapserv config file. (#6303)

This message may be from an external email source.
Do not select links or open attachments unless verified. Report all suspicious emails to Minnesota IT Services Security Operations Center.
…
________________________________

what do you think the best way to add a config file to the build workflow is?

You mean something that doesn't involve the msautotest/pytest.ini way ?
There's still the possibility to add manual steps towards the end of .github/workflows/start.sh

-
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FMapServer%2FMapServer%2Fpull%2F6303%23issuecomment-885677803&data=04%7C01%7Csteve.lime%40state.mn.us%7C48c7e7225a7b47aa28b808d94de5e530%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637626472048719031%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=FuPzOV3ljSQRa2W6M%2FAv6Yo1szI8hBPK746gWE6OtWY%3D&reserved=0>, or unsubscribe<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAAMGN6ZGQ4YQMDBXSOENT33TZF32FANCNFSM43CUD2BA&data=04%7C01%7Csteve.lime%40state.mn.us%7C48c7e7225a7b47aa28b808d94de5e530%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637626472048728744%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=WFIcRsJ36C44M8fz37qZRxRDppLtdaVpCBBt%2BElqrKw%3D&reserved=0>.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,14,https://github.com/MapServer/MapServer/pull/6303#issuecomment-887886517,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"The Build task gets further now and a config file is recognized. CGI query runs but FastCGI crashes.  @rouault, do you know of a way to use a debugger with fastcgi? Doesn't seem possible.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,15,https://github.com/MapServer/MapServer/pull/6303#issuecomment-888445381,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"I'm running into a couple of issues with fcgi. I'm testing this using vagrant and a setup similar to what @rouault developed as part of the Build task. I'm testing with bare calls to mapserv.cgi and mapserv.fcgi. They should load the config file and return the standard ""... QUERY_STRING is set, but empty."" error.

When run as a fcgi the MAPSERVER_CONFIG_FILE environment variable isn't being picked up for some reason - always null. Works as expected with cgi.
As a result, when msLoadConfig() runs it fails but the error message doesn't get returned to the client and instead ends up in the main apache error log and a 500 error is thrown. Must be an IO issue. I tried moving the msIO_installFastCGIRedirect() function ahead of the configuration loading but then the error message gets completely lost and I still end up with a 500 error.

Any ideas welcome...
Update: item 1 is a config issue (RTFM), need to use FcgidInitialEnv and not just simply SetEnv to set the environment variable. The latter persists but isn't a deal killer at this point.
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/rouault,16,https://github.com/MapServer/MapServer/pull/6303#issuecomment-896809531,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,This PR would need to be rebased on top of latest master or have master merged into it to have the github action tests run (they have been added after the branch was created),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,17,https://github.com/MapServer/MapServer/pull/6303#issuecomment-896862140,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"Yup, last merge with main was fairly recent . Working on fixing the build workflow now - need to create a config file to test against.

From: Even Rouault ***@***.***>
Sent: Wednesday, August 11, 2021 8:05 AM
To: MapServer/MapServer ***@***.***>
Cc: Lime, Steve D (MNIT) ***@***.***>; Mention ***@***.***>
Subject: Re: [MapServer/MapServer] WIP: Support for a mapserv config file. (#6303)

This message may be from an external email source.
Do not select links or open attachments unless verified. Report all suspicious emails to Minnesota IT Services Security Operations Center.
…
________________________________

This PR would need to be rebased on top of latest master or have master merged into it to have the github action tests run (they have been added after the branch was created)

-
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FMapServer%2FMapServer%2Fpull%2F6303%23issuecomment-896809531&data=04%7C01%7Csteve.lime%40state.mn.us%7C53cd7de7abc24776b6dd08d95cc8abd8%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637642839207820379%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=3WywVlyw9gNmIOpbTSIXxr04w3p1KY8TGs%2Bw6tA4igs%3D&reserved=0>, or unsubscribe<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAAMGN65DDN7O2P5C4QSP6RDT4JYQ7ANCNFSM43CUD2BA&data=04%7C01%7Csteve.lime%40state.mn.us%7C53cd7de7abc24776b6dd08d95cc8abd8%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637642839207820379%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=xigr4%2FnBvZp20Lsb2IbglEq91aLjzTQfrViSEPATISk%3D&reserved=0>.
Triage notifications on the go with GitHub Mobile for iOS<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fapps.apple.com%2Fapp%2Fapple-store%2Fid1477376905%3Fct%3Dnotification-email%26mt%3D8%26pt%3D524675&data=04%7C01%7Csteve.lime%40state.mn.us%7C53cd7de7abc24776b6dd08d95cc8abd8%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637642839207830336%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=M3ORWoM1wpgMEmCQ63BmrwKBnA%2FAxTJs0bHqsUWM1W8%3D&reserved=0> or Android<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fplay.google.com%2Fstore%2Fapps%2Fdetails%3Fid%3Dcom.github.android%26utm_campaign%3Dnotification-email&data=04%7C01%7Csteve.lime%40state.mn.us%7C53cd7de7abc24776b6dd08d95cc8abd8%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637642839207830336%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=Kk5zLKSJCPouS0Oc5N%2B8fc0Q%2BWXz0QJAdNnlrB6rkmI%3D&reserved=0>.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,18,https://github.com/MapServer/MapServer/pull/6303#issuecomment-897916056,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,Anyone have an idea about the Travis/PHP 7.2 failure? Doesn't seem related to the pull request but I see other pull requests are passing.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/rouault,19,https://github.com/MapServer/MapServer/pull/6303#issuecomment-897922866,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"Anyone have an idea about the Travis/PHP 7.2 failure? Doesn't seem related to the pull request but I see other pull requests are passing.

it could be caused by a call to CPLGetConfigOption() after GDAL cleanup (based on the ""CPLGetTLSList(): pthread_setspecific() failed!"" message), which causes new allocations",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,20,https://github.com/MapServer/MapServer/pull/6303#issuecomment-898726332,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"it could be caused by a call to CPLGetConfigOption() after GDAL cleanup (based on the ""CPLGetTLSList(): pthread_setspecific() failed!"" message), which causes new allocations


I don't see where but I'll keep looking - CPLGetTLSList() isn't present in the source.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/rouault,21,https://github.com/MapServer/MapServer/pull/6303#issuecomment-898727582,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"CPLGetTLSList() isn't present in the source.

Sure, but it is indirectly called by CPLGetConfigOption()",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,22,https://github.com/MapServer/MapServer/pull/6303#issuecomment-898899059,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"@rouault, how should PROJ_LIB be handled in the context of a config file? We could handle it like a plugin I guess. That is, if a config obj is present then it can only be set that way.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/rouault,23,https://github.com/MapServer/MapServer/pull/6303#issuecomment-898900376,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"how should PROJ_LIB be handled in the context of a config file?

I see msSetPROJ_LIB() has subtelties where the PROJ_LIB path can be relative to the mapfile",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/rouault,24,https://github.com/MapServer/MapServer/pull/6303#issuecomment-902726801,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,It seems most of the tests are skipped,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,25,https://github.com/MapServer/MapServer/pull/6303#issuecomment-902922007,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"It seems most of the tests are skipped

So weird, all sorts of missing some or required components, skip messages.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/rouault,26,https://github.com/MapServer/MapServer/pull/6303#issuecomment-902955844,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"So weird, all sorts of missing some or required components, skip messages.

probably that shp2img no longer outputs the requirements of the tests",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,27,https://github.com/MapServer/MapServer/pull/6303#issuecomment-902962917,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"It's the only thing to have changed but the skipped tests aren't all shp2img-based. For example, query/query.map is skipped and it's all mapserv-based. All those tests need is INPUT=SHAPEFILE.

From: Even Rouault ***@***.***>
Sent: Friday, August 20, 2021 4:03 PM
To: MapServer/MapServer ***@***.***>
Cc: Lime, Steve D (MNIT) ***@***.***>; Mention ***@***.***>
Subject: Re: [MapServer/MapServer] WIP: Support for a mapserv config file. (#6303)

This message may be from an external email source.
Do not select links or open attachments unless verified. Report all suspicious emails to Minnesota IT Services Security Operations Center.
…
________________________________

So weird, all sorts of missing some or required components, skip messages.

probably that shp2img no longer outputs the requirements of the tests

-
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FMapServer%2FMapServer%2Fpull%2F6303%23issuecomment-902955844&data=04%7C01%7Csteve.lime%40state.mn.us%7Ccc66c2cbdc5749c5949f08d9641df601%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637650902103953184%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=VpXipjNai7VEHCt8FTFea%2BWkKEKNpaWQ4%2F%2BTDbIRJBY%3D&reserved=0>, or unsubscribe<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAAMGN6665E2GZBLZIGRDCW3T527KBANCNFSM43CUD2BA&data=04%7C01%7Csteve.lime%40state.mn.us%7Ccc66c2cbdc5749c5949f08d9641df601%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637650902103963143%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=FHI9q08syf9eq1H7tmn5qCxGawjdRjZ%2FImOO2F9vB2s%3D&reserved=0>.
Triage notifications on the go with GitHub Mobile for iOS<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fapps.apple.com%2Fapp%2Fapple-store%2Fid1477376905%3Fct%3Dnotification-email%26mt%3D8%26pt%3D524675&data=04%7C01%7Csteve.lime%40state.mn.us%7Ccc66c2cbdc5749c5949f08d9641df601%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637650902103963143%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=owuZpDWJHeJoWF8KhBkHYePx1L0sCb6%2BC0ZYasS1IMk%3D&reserved=0> or Android<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fplay.google.com%2Fstore%2Fapps%2Fdetails%3Fid%3Dcom.github.android%26utm_campaign%3Dnotification-email&data=04%7C01%7Csteve.lime%40state.mn.us%7Ccc66c2cbdc5749c5949f08d9641df601%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637650902103973100%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=C5NU9%2F2CnlVZP7LMhuF43UktR1IlyVjrkNjFruRllZ4%3D&reserved=0>.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/jmckenna,28,https://github.com/MapServer/MapServer/pull/6303#issuecomment-908647184,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"@sdlime the RFC draft currently states ""At present, a single environment variable (MS_CONFIG_FILE) is referenced to determine what config file to load""   but that does not work (the filename specified at compile-time always is searched no matter what I specify through MS_CONFIG_FILE).  I solved this by instead using the environment variable MAPSERVER_CONFIG_FILE in Apache etc which then overrides the filename that was hardcoded at compile time.  Will update draft now.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,29,https://github.com/MapServer/MapServer/pull/6303#issuecomment-908672044,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"Good catch - the latter is correct (mirrors mapcache from a naming convention).

From: Jeff McKenna ***@***.***>
Sent: Monday, August 30, 2021 3:00 PM
To: MapServer/MapServer ***@***.***>
Cc: Lime, Steve D (MNIT) ***@***.***>; Mention ***@***.***>
Subject: Re: [MapServer/MapServer] WIP: Support for a mapserv config file. (#6303)

This message may be from an external email source.
Do not select links or open attachments unless verified. Report all suspicious emails to Minnesota IT Services Security Operations Center.
…
________________________________

@sdlime<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fsdlime&data=04%7C01%7Csteve.lime%40state.mn.us%7C83eff7da4a0e4e95e2e008d96bf0bebc%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637659504003880379%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=VYl%2BQlcPxK7jz%2FfjIEeuIlmiT47UCW3xX%2F8hj80SN%2FM%3D&reserved=0> the RFC draft currently states ""At present, a single environment variable (MS_CONFIG_FILE) is referenced to determine what config file to load"" but that does not work (the filename specified at compile-time always is searched no matter what I specify through MS_CONFIG_FILE). I solved this by instead using the environment variable MAPSERVER_CONFIG_FILE in Apache etc which then overrides the filename that was hardcoded at compile time. Will update draft now.

-
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FMapServer%2FMapServer%2Fpull%2F6303%23issuecomment-908647184&data=04%7C01%7Csteve.lime%40state.mn.us%7C83eff7da4a0e4e95e2e008d96bf0bebc%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637659504003880379%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=gs02N%2BY4aDB5LidYI64CoMYj6B5y3vjrTNnRdkQx%2FJg%3D&reserved=0>, or unsubscribe<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAAMGN6ZHCD4QPWF45LD2BBLT7PPL3ANCNFSM43CUD2BA&data=04%7C01%7Csteve.lime%40state.mn.us%7C83eff7da4a0e4e95e2e008d96bf0bebc%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637659504003890340%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=BjIXdMCQvizRsoz2UIrjH35hehqvYN4BS0o5iO9Gy%2B4%3D&reserved=0>.
Triage notifications on the go with GitHub Mobile for iOS<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fapps.apple.com%2Fapp%2Fapple-store%2Fid1477376905%3Fct%3Dnotification-email%26mt%3D8%26pt%3D524675&data=04%7C01%7Csteve.lime%40state.mn.us%7C83eff7da4a0e4e95e2e008d96bf0bebc%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637659504003890340%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=ScW7jzOs8ANTfk2Njf05vBuBLBJAyy58KUuN2Js%2Froc%3D&reserved=0> or Android<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fplay.google.com%2Fstore%2Fapps%2Fdetails%3Fid%3Dcom.github.android%26referrer%3Dutm_campaign%253Dnotification-email%2526utm_medium%253Demail%2526utm_source%253Dgithub&data=04%7C01%7Csteve.lime%40state.mn.us%7C83eff7da4a0e4e95e2e008d96bf0bebc%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637659504003900298%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=7teiBmeo9O42PKt6ApKmx6Z7JzQBfmgR99AtXYC1i50%3D&reserved=0>.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/geographika,30,https://github.com/MapServer/MapServer/pull/6303#issuecomment-919537712,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"@sdlime - some feedback from testing the branch on a Windows machine.

No problems compiling the branch 👍
When running mapserv -v from the command line an error message is included in the output. This could be confusing/of concern to new users? Not sure of a better message - or maybe surpress it if the -v flag is used?

C:\MapServer>mapserv -v
Content-Type: text/html

<HTML>
<HEAD><TITLE>MapServer Message</TITLE></HEAD>
<!-- MapServer version 7.7-dev OUTPUT=PNG OUTPUT=JPEG OUTPUT=KML SUPPORTS=PROJ SUPPORTS=AGG SUPPORTS=FREETYPE SUPPORTS=CAIRO SUPPORTS=SVG_SYMBOLS SUPPORTS=SVGCAIRO SUPPORTS=ICONV SUPPORTS=FRIBIDI SUPPORTS=WMS_SERVER SUPPORTS=WMS_CLIENT SUPPORTS=WFS_SERVER SUPPORTS=WFS_CLIENT SUPPORTS=WCS_SERVER SUPPORTS=SOS_SERVER SUPPORTS=OGCAPI_SERVER SUPPORTS=FASTCGI SUPPORTS=THREADS SUPPORTS=GEOS SUPPORTS=PBF INPUT=JPEG INPUT=OGR INPUT=GDAL INPUT=SHAPEFILE -->
<BODY BGCOLOR=""#FFFFFF"">
msLoadConfig(): Unable to access file. (/mapserver.conf)
</BODY></HTML>

The error can be removed by setting an environment variable pointing to a valid config file: SET MAPSERVER_CONFIG_FILE=C:\MapServer\bin\mapserver.conf

When running through IIS and no environment variable is set then HTTP 500 errors are returned with no indication of what is wrong. No IIS logs are generated, or MapServer logs. I'm not sure if this is just the case with IIS? An HTTP 200 response with the same details (and msLoadConfig(): Unable to access file. (/mapserver.conf) message) would be very helpful for users trying to setup MapServer.
When setting the environment variable all works fine in my setup.


Questions

Will the following minimal conf file always allow MapServer users with no security requirements (e.g. setting up on a local machine for testing) always work?

CONFIG
  ENV
    MS_MAP_PATTERN "".""
  END
END


(Just a suggestion that can be ignored!) If no config file is found, could the above config be hardcoded so MapServer would run out-of-the-box with no config file/environment variable setting? This might go completely against the rationale of the RFC, but I can imagine lots of new users struggling with setting environment variables on web servers, and if it is just to point to the above config then it may overcomplicate things.
The RFC mentions the PLUGINS section - I don't believe this is yet implemented as part of the pull request. Is this still planned for the v8 release?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/jmckenna,31,https://github.com/MapServer/MapServer/pull/6303#issuecomment-919569789,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"For the record, from my earlier testing on Windows (to generate the RFC and document it), the response from mapserv -v and its error message returned was critical for me as a user, to see that the ms4w.conf file was not found - hiding that message would likely prevent myself and other users noticing that the file was not found by MapServer.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,32,https://github.com/MapServer/MapServer/pull/6303#issuecomment-919578962,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"@sdlime - some feedback from testing the branch on a Windows machine.



When running mapserv -v from the command line an error message is included in the output. This could be confusing/of concern to new users? Not sure of a better message - or maybe surpress it if the -v flag is used?


Agreed... I'll add a new comment with a task list. Although I see @jmckenna has other thoughts. IMHO -v should just return the version and exit. Running a bare ""mapserv"" or ""mapserv.exe"" should note no config file is set. Note that @rouault added support for a default location (${INSTALL_DIR}/etc/mapserver.conf) at compile time.


When running through IIS and no environment variable is set then HTTP 500 errors are returned with no indication of what is wrong. No IIS logs are generated, or MapServer logs. I'm not sure if this is just the case with IIS? An HTTP 200 response with the same details (and msLoadConfig(): Unable to access file. (/mapserver.conf) message) would be very helpful for users trying to setup MapServer.


I'll test on MacOS as well. I don't recall offhand.

Questions

Will the following minimal conf file always allow MapServer users with no security requirements (e.g. setting up on a local machine for testing) always work?

CONFIG
  ENV
    MS_MAP_PATTERN "".""
  END
END


Yes. That's what's used as part of msautotest.


(Just a suggestion that can be ignored!) If no config file is found, could the above config be hardcoded so MapServer would run out-of-the-box with no config file/environment variable setting? This might go completely against the rationale of the RFC, but I can imagine lots of new users struggling with setting environment variables on web servers, and if it is just to point to the above config then it may overcomplicate things.


Personally I think we should be forcing proper configuration and would be -1 on a default.


The RFC mentions the PLUGINS section - I don't believe this is yet implemented as part of the pull request. Is this still planned for the v8 release?


Still needed. I'm unable to test though so if I could find a guinea pig to assist... (wink, wink)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/jmckenna,33,https://github.com/MapServer/MapServer/pull/6303#issuecomment-919582473,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"Most users only execute a 'mapserv -v' to check installation.  It is a critical command, and it is nice that MapServer now also reports it here when the config file is not found.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/jmckenna,34,https://github.com/MapServer/MapServer/pull/6303#issuecomment-919583664,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"Maybe it is all of the html text returned that is scarey, at commandline?  Sure, I can see that, some formatting improvements, but for me (as a user trying this, likely the first ha) that error message from 'mapserv -v' of '....conf not found' was exactly what I needed to see.      Put another way: users do not issue 'mapserv' at commandline without the ""-v"" (I mean users, not power users).  So this is why the config file should be searched for and error displayed for 'mapserv -v'.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/jratike80,35,https://github.com/MapServer/MapServer/pull/6303#issuecomment-919707529,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"For being even more useful could the message be enhanced then
""MS_CONFIG_FILE: [path to file, or the default location] : Found/Not found""",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/geographika,36,https://github.com/MapServer/MapServer/pull/6303#issuecomment-919797074,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"@sdlime - happy to test the plugins config (it would be on Windows with the MSSQL driver). Would probably also need someone to test on Linux with the Oracle driver?
With regards to running mapserv -v at the command line, even if MAPSERVER_CONFIG_FILE is set as a Windows environment variable, the value would be ignored when running under the web server - at least on IIS/FastCGI. The -v would then always return the error or users would need to set the same variable twice.
When the MAPSERVER_CONFIG_FILE is not found (e.g. the path is wrong) the web server simply exits with a generic HTTP 500 error, with no logs or further details. I tried adding various things to the code block below (fflush, goto end_request;, changing the error message to a simple string) but no luck. Is this the same on other servers? Maybe under FastCGI the exit needs to be handled in the FAST_CGI loop?
  config = msLoadConfig(NULL); // is the right spot to do this?
  if(config == NULL) {
    msCGIWriteError(mapserv);
    exit(0);
  }",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/geographika,37,https://github.com/MapServer/MapServer/pull/6303#issuecomment-921271722,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"@sdlime - do you think this branch is ready to merge with master, and address any remaining issues and plugin functionality later? It would make it easier to test the OGC Features once the config file is available for setting map environment variables.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,38,https://github.com/MapServer/MapServer/pull/6303#issuecomment-921407853,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"@sdlime - do you think this branch is ready to merge with master, and address any remaining issues and plugin functionality later? It would make it easier to test the OGC Features once the config file is available for setting map environment variables.

Pretty close, really do need the plugin bit. You can use my branch that the pull request is based on for testing since it is up-to-date with main and does have the OGC feature support integrated.",True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,39,https://github.com/MapServer/MapServer/pull/6303#issuecomment-923025181,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"Regarding the -v command-line option. Personally I think we need to move handling that option ahead of running msLoadConfig() and msSetup(). So 'mapserv -v' would always kick out the version number and the supported components and would be consistent across binaries (e.g. mapserv, shp2img/map2img, etc...). A bare 'mapserv' is where you'd see error messages of various types start to manifest themselves. The -h argument also needs to be handled this way.
Any objections?
As an aside do we need continue to support the MS_ENABLE_CGI_CL_DEBUG_ARGS. There's no reference to it in CMakeLists.txt nor in the documentation so can't imagine they are being used much - if at all. Seems like we could safely remove and would simply the command-line handling code. I'd vote +1 to remove that logic.
--Steve",True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,40,https://github.com/MapServer/MapServer/pull/6303#issuecomment-926676822,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"@sdlime - happy to test the plugins config (it would be on Windows with the MSSQL driver). Would probably also need someone to test on Linux with the Oracle driver?

@geographika, I just added code to treat the value with
LAYER
  ...
  PLUGIN ""value""
  ...
END

as a key to the config->plugins hash. If the config file is set (it has to be with any CGI/FCGI request) then the value must resolve or a parsing error is thrown. I tested generically and it behaves as expected. I'm not setup to configure a real plugin layer though.
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/geographika,41,https://github.com/MapServer/MapServer/pull/6303#issuecomment-926682192,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"@sdlime - I'll give this a test with the MSSQL plugin, and update Appveyor builds to use a config file. Can we rebase this branch back onto main?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/geographika,42,https://github.com/MapServer/MapServer/pull/6303#issuecomment-927134275,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"@sdlime - good news is that the PLUGINS works fine with Mapfiles and MapServer.
A few notes for future docs:

the error below is shown if the config is missing (might be worth adding the key name to this?):

loadCustomLayerDLL: General error message. Failed to load dynamic Layer LIB: (null)
msGetSymbol(): General error message. Can&#39;t load requested dynamic library: (null)
loadLayer(): General error message. Plugin value not found in config file.


they error will occur for any layer without a plugin (even if they layer is not requested) as the plugins are checked when loading the Mapfile

The bad news (unless I'm missing something) - msLoadConfig is only called in mapserv.exe. Some of the msautotests are using shp2img - these never load the config and so can never load the plugin. This is also true for anyone wanting to use shp2img to test a Mapfile. Should msLoadConfig be added to shp2img along with a new command line parameter?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/geographika,43,https://github.com/MapServer/MapServer/pull/6303#issuecomment-927257157,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,@sdlime - see sdlime#9 for suggested fix for tests and loading config in shp2img.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,44,https://github.com/MapServer/MapServer/pull/6303#issuecomment-929216767,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"the error below is shown if the config is missing (might be worth adding the key name to this?):

loadCustomLayerDLL: General error message. Failed to load dynamic Layer LIB: (null)
msGetSymbol(): General error message. Can&#39;t load requested dynamic library: (null)
loadLayer(): General error message. Plugin value not found in config file.


If the PLUGIN line is before CONNECTIONTYPE and CONNECTION you only get the loadLayer() error. I'm not quite sure how the execution path even gets to loadCustomLayerDLL to be honest. I can't remember, is the last error in the list the last one encountered?


they error will occur for any layer without a plugin (even if they layer is not requested) as the plugins are checked when loading the Mapfile


I only see the loadCustomLayerDLL error when a layer has CONNECTIONTYPE PLUGIN.

The bad news (unless I'm missing something) - msLoadConfig is only called in mapserv.exe. Some of the msautotests are using shp2img - these never load the config and so can never load the plugin. This is also true for anyone wanting to use shp2img to test a Mapfile. Should msLoadConfig be added to shp2img along with a new command line parameter?

You're correct, good catch. I think your pull request is probably sufficient for the moment. Either a user will need to set an environment variable before running shp2img or they'll be relying on the value set at compile-time. We may need to add an argument.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,45,https://github.com/MapServer/MapServer/pull/6303#issuecomment-932285367,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"@geographika, I did some testing related to the error messages and output is last in, first out. So the sequence:
loadCustomLayerDLL: General error message. Failed to load dynamic Layer LIB: (null)
msGetSymbol(): General error message. Can&#39;t load requested dynamic library: (null)
loadLayer(): General error message. Plugin value not found in config file.

indicates that some code related to plugins is being executed after the plugin value not found error. Note that I only see this sequence or errors with a layer definition like:
CONNECTIONTYPE PLUGIN
CONNECTION ""...""
PLUGIN ""myplugin""

If I move the PLUGIN statement before the CONNECTIONTYPE or change CONNECTIONTYPE to something other than PLUGIN then you don't see the loadCustomLayerDLL() error. There's still some intervention necessary.
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/geographika,46,https://github.com/MapServer/MapServer/pull/6303#issuecomment-932738479,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"@sdlime - on debugging the issue is the following function appears to return NULL

  
    
      MapServer/mappluginlayer.c
    
    
        Lines 74 to 75
      in
      1c14821
    
  
  
    

        
          
           static VTFactoryItemObj * 
        

        
          
           lookupVTFItem(VTFactoryObj *VTFactory, 
        
    
  


But it actually returns an ""empty"" VTFactoryItemObj (as the function is static?) so the following check is true:

  
    
      MapServer/mappluginlayer.c
    
    
         Line 192
      in
      1c14821
    
  
  
    

        
          
           if ( ! pVTFI) { 
        
    
  


I added in a simple NULL check to the function - see sdlime#10
Is this good enough?
Any idea why the Travis build is failing with memory errors?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/geographika,47,https://github.com/MapServer/MapServer/pull/6303#issuecomment-934683569,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,@sdlime - rebasing onto main with #6420 should hopefully fix (all?) the Travis errors.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,48,https://github.com/MapServer/MapServer/pull/6303#issuecomment-935372591,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"@sdlime - rebasing onto main with #6420 should hopefully fix (all?) the Travis errors.

Looks like we need to do more to clean up the config in shp2img, still detecting leaks.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/geographika,49,https://github.com/MapServer/MapServer/pull/6303#issuecomment-935814088,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"Looks like we need to do more to clean up the config in shp2img, still detecting leaks.

Should be fixed with sdlime#11",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/jratike80,50,https://github.com/MapServer/MapServer/pull/6303#issuecomment-941220090,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"About this part of the RFC text:
""Other sections could include METADATA and VALIDATION, which are places general purpose configuration information is held.""
Is the current status that they may be implemented later, or are they usable already? What if the same thing is validated in config and in the mapfile, which one is the winner?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,51,https://github.com/MapServer/MapServer/pull/6303#issuecomment-941239797,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"About this part of the RFC text: ""Other sections could include METADATA and VALIDATION, which are places general purpose configuration information is held."" Is the current status that they may be implemented later, or are they usable already? What if the same thing is validated in config and in the mapfile, which one is the winner?

Currently those sections have not been added. Details such as who wins would have to be discussed as part of those implementations. I could see where you'd want the convenience of defining certain things centrally but then having the ability to override values and still other situations where the config is authoritative.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/geographika,52,https://github.com/MapServer/MapServer/pull/6303#issuecomment-946752225,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"@sdlime - excellent addition to MapServer!
One question - you mentioned (although I can't find the email/comment) implementing the part of the RFC that ""all mapfiles could be defined as immutable, so no runtime changes would be allowed site-wide"" should be done for 8.0 as it was a breaking change. Is this still the case? I can't see why it couldn't be added in a future version.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,53,https://github.com/MapServer/MapServer/pull/6303#issuecomment-946769343,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"@sdlime - excellent addition to MapServer! One question - you mentioned (although I can't find the email/comment) implementing the part of the RFC that ""all mapfiles could be defined as immutable, so no runtime changes would be allowed site-wide"" should be done for 8.0 as it was a breaking change. Is this still the case? I can't see why it couldn't be added in a future version.

https://github.com/sdlime/mapserver/tree/urlupdate kinda makes it mute but you're right, it could be added as a future site-wide setting. It's not a breaking change at the site level since that's new functionality. I hope to have a pull request ready late tonight for my urlupdate branch.",True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,54,https://github.com/MapServer/MapServer/pull/6303#issuecomment-951036945,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,Any objection to a merge?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/jmckenna,55,https://github.com/MapServer/MapServer/pull/6303#issuecomment-951064211,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,+1      I am ready to test locally in MS4W now...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,56,https://github.com/MapServer/MapServer/pull/6303#issuecomment-951342845,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"+1 I am ready to test locally in MS4W now...

Knock yourself out!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/jmckenna,57,https://github.com/MapServer/MapServer/pull/6303#issuecomment-952288128,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"Knock yourself out!

Testing again inside MS4W on Windows.
Definitely knocking my head here.
sigh
As I reported earlier, getting this configured (with the initial pull request) was very easy, as the errors of missing config file etc were not hidden, and were available at the commandline etc.   Now, no errors are reported in mapserv -v, map2img, error log, Apache log, nothing, and the only error is displayed on the HTML mode=map page (which, to be honest, in today's applications this would be a JavaScript page and a pink tile and that error would be not shown).   Please tell me that this is not desired?  (my comments about this were somewhere in a past thread and ignored).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,58,https://github.com/MapServer/MapServer/pull/6303#issuecomment-952293464,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"Probably should take this to the -dev list for discussion, people won't see it in a closed merge request.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/jmckenna,59,https://github.com/MapServer/MapServer/pull/6303#issuecomment-952296057,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,It's ok.  /end rant ha.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/rouault,60,https://github.com/MapServer/MapServer/pull/6303#issuecomment-952313155,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"no errors are reported in mapserv -v

Doesn't sound like a real issue to me, since to display the version you don't need the config file.
However, plain mapserv or mapserv QUERY_STRING= invokations will report the error about the missing config file as expected

map2img

indeed. There are situations where the mapfile won't need the config file, but we should probably at least emit a warning. And possibly offer a -conf file_name option. Which could also be used as an argument for the mapserv binary in command line mode (mostly for Windows users that can't use MAPSERVER_CONFIG_FILE=xxxxx ./mapserv ...)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/jmckenna,61,https://github.com/MapServer/MapServer/pull/6303#issuecomment-952321184,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"I'll workaround all of this in MS4W for the users.  I think it's unfortunate that all of the useful messages are now hidden, but hey, that's life sometimes.  I agree that this is a non-issue for developers and power-users.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6303,2021-04-17T04:02:19Z,2021-10-25T21:22:13Z,2021-10-26T21:04:26Z,MERGED,True,3234,2620,36,https://github.com/sdlime,WIP: Support for a mapserv config file.,85,[],https://github.com/mapserver/mapserver/pull/6303,https://github.com/sdlime,62,https://github.com/MapServer/MapServer/pull/6303#issuecomment-952324181,Work in progress to support (and require) a MapServer config file for use by the CGI. Draft RFC is underway at https://github.com/sdlime/mapserver/wiki/MapServer-8.0-Config-File.,"Nobody is saying what's there is set in stone. That's why the discussion list exists... ;-) It's just hard to track things in a 78 comment pull request. FWIW I thought Even's points were good.

From: Jeff McKenna ***@***.***>
Sent: Tuesday, October 26, 2021 4:00 PM
To: MapServer/MapServer ***@***.***>
Cc: Lime, Steve D (MNIT) ***@***.***>; State change ***@***.***>
Subject: Re: [MapServer/MapServer] WIP: Support for a mapserv config file. (#6303)

This message may be from an external email source.
Do not select links or open attachments unless verified. Report all suspicious emails to Minnesota IT Services Security Operations Center.
…
________________________________

I'll workaround all of this in MS4W for the users. I think it's unfortunate that all of the useful messages are now hidden, but hey, that's life sometimes. I agree that this is a non-issue for developers and power-users.

-
You are receiving this because you modified the open/close state.
Reply to this email directly, view it on GitHub<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FMapServer%2FMapServer%2Fpull%2F6303%23issuecomment-952321184&data=04%7C01%7Csteve.lime%40state.mn.us%7Cfce8d6124cea4613284708d998c395f6%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637708788083706676%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=kbqnWd6sJPKNBbMUMB2tefUFVqcgAlX46nv0TkiGF5s%3D&reserved=0>, or unsubscribe<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAAMGN62VHU5A6GJJDUBRYETUI4JFJANCNFSM43CUD2BA&data=04%7C01%7Csteve.lime%40state.mn.us%7Cfce8d6124cea4613284708d998c395f6%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637708788083716634%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=gYwXich9JzsTWcwAZpSEghyeDgEskFsP0pvvz5rM2gA%3D&reserved=0>.
Triage notifications on the go with GitHub Mobile for iOS<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fapps.apple.com%2Fapp%2Fapple-store%2Fid1477376905%3Fct%3Dnotification-email%26mt%3D8%26pt%3D524675&data=04%7C01%7Csteve.lime%40state.mn.us%7Cfce8d6124cea4613284708d998c395f6%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637708788083716634%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=CplN83WwWLwUMPPBHwUHRUqWvidQJ0QXg%2BNJ3fY7Vkg%3D&reserved=0> or Android<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fplay.google.com%2Fstore%2Fapps%2Fdetails%3Fid%3Dcom.github.android%26referrer%3Dutm_campaign%253Dnotification-email%2526utm_medium%253Demail%2526utm_source%253Dgithub&data=04%7C01%7Csteve.lime%40state.mn.us%7Cfce8d6124cea4613284708d998c395f6%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637708788083726589%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=XJaKoOmJZXR6hNLhOtZ9orBVuqhMhOsBflUxxcwPSE8%3D&reserved=0>.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6304,2021-04-18T17:12:15Z,2021-04-23T08:21:01Z,2021-04-26T12:39:05Z,MERGED,True,23,6,4,https://github.com/sdlime,WIP: Use CPLSetConfigOption/CPLGetConfigOption for some CGI/FastCGI-related env vars.,2,[],https://github.com/mapserver/mapserver/pull/6304,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/6304,"Potential solution for IIS/FastCGI where we push some high-value environment variables into the CPL environment (using CPLSetConfigOption) and then reference them there (CPLGetConfigOption). This is against branch-7-6 rather than main since the config file work would replace this.
Should be ok for non-IIS/FastCGI as well.
--Steve","Potential solution for IIS/FastCGI where we push some high-value environment variables into the CPL environment (using CPLSetConfigOption) and then reference them there (CPLGetConfigOption). This is against branch-7-6 rather than main since the config file work would replace this.
Should be ok for non-IIS/FastCGI as well.
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6304,2021-04-18T17:12:15Z,2021-04-23T08:21:01Z,2021-04-26T12:39:05Z,MERGED,True,23,6,4,https://github.com/sdlime,WIP: Use CPLSetConfigOption/CPLGetConfigOption for some CGI/FastCGI-related env vars.,2,[],https://github.com/mapserver/mapserver/pull/6304,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6304#issuecomment-822036968,"Potential solution for IIS/FastCGI where we push some high-value environment variables into the CPL environment (using CPLSetConfigOption) and then reference them there (CPLGetConfigOption). This is against branch-7-6 rather than main since the config file work would replace this.
Should be ok for non-IIS/FastCGI as well.
--Steve","This will be a great help Steve, as MS4W has had to do workarounds for this issue for several years, so that users never had to deal with this problem (also affects MapCache at /mapcache/lib/http.c ...will file that ticket now for MapCache).  PS> this issue is not just for IIS.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6304,2021-04-18T17:12:15Z,2021-04-23T08:21:01Z,2021-04-26T12:39:05Z,MERGED,True,23,6,4,https://github.com/sdlime,WIP: Use CPLSetConfigOption/CPLGetConfigOption for some CGI/FastCGI-related env vars.,2,[],https://github.com/mapserver/mapserver/pull/6304,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/6304#issuecomment-822553736,"Potential solution for IIS/FastCGI where we push some high-value environment variables into the CPL environment (using CPLSetConfigOption) and then reference them there (CPLGetConfigOption). This is against branch-7-6 rather than main since the config file work would replace this.
Should be ok for non-IIS/FastCGI as well.
--Steve",Will wait on merging until folks actually confirm it helps in various environments - mostly Windows CGI and FastCGI.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6304,2021-04-18T17:12:15Z,2021-04-23T08:21:01Z,2021-04-26T12:39:05Z,MERGED,True,23,6,4,https://github.com/sdlime,WIP: Use CPLSetConfigOption/CPLGetConfigOption for some CGI/FastCGI-related env vars.,2,[],https://github.com/mapserver/mapserver/pull/6304,https://github.com/geographika,4,https://github.com/MapServer/MapServer/pull/6304#issuecomment-825113654,"Potential solution for IIS/FastCGI where we push some high-value environment variables into the CPL environment (using CPLSetConfigOption) and then reference them there (CPLGetConfigOption). This is against branch-7-6 rather than main since the config file work would replace this.
Should be ok for non-IIS/FastCGI as well.
--Steve","@sdlime - many thanks for this! I've built and tested on a fresh Windows 10/ IIS 10 install. All environ variables are now read correctly, with cascading WMS over HTTP now possible thanks to being able to use the CURL_CA_BUNDLE variable.
I've updated the IIS docs in preparation for this being merged: MapServer/MapServer-documentation#517",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6304,2021-04-18T17:12:15Z,2021-04-23T08:21:01Z,2021-04-26T12:39:05Z,MERGED,True,23,6,4,https://github.com/sdlime,WIP: Use CPLSetConfigOption/CPLGetConfigOption for some CGI/FastCGI-related env vars.,2,[],https://github.com/mapserver/mapserver/pull/6304,https://github.com/sdlime,5,https://github.com/MapServer/MapServer/pull/6304#issuecomment-825130465,"Potential solution for IIS/FastCGI where we push some high-value environment variables into the CPL environment (using CPLSetConfigOption) and then reference them there (CPLGetConfigOption). This is against branch-7-6 rather than main since the config file work would replace this.
Should be ok for non-IIS/FastCGI as well.
--Steve",Should I redo this against main? Seems like it and then we'd backport to wherever. I've not done a rebase before though...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6304,2021-04-18T17:12:15Z,2021-04-23T08:21:01Z,2021-04-26T12:39:05Z,MERGED,True,23,6,4,https://github.com/sdlime,WIP: Use CPLSetConfigOption/CPLGetConfigOption for some CGI/FastCGI-related env vars.,2,[],https://github.com/mapserver/mapserver/pull/6304,https://github.com/geographika,6,https://github.com/MapServer/MapServer/pull/6304#issuecomment-825487095,"Potential solution for IIS/FastCGI where we push some high-value environment variables into the CPL environment (using CPLSetConfigOption) and then reference them there (CPLGetConfigOption). This is against branch-7-6 rather than main since the config file work would replace this.
Should be ok for non-IIS/FastCGI as well.
--Steve","Should I redo this against main? Seems like it and then we'd backport to wherever. I've not done a rebase before though...

@sdlime - I cherry-picked these onto main in #6305 if that helps?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6305,2021-04-23T06:59:45Z,2021-04-23T08:20:23Z,2021-04-23T08:20:23Z,MERGED,True,23,6,4,https://github.com/geographika,Use CPLSetConfigOption/CPLGetConfigOption for some CGI/FastCGI-related env vars,2,[],https://github.com/mapserver/mapserver/pull/6305,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6305,"Cherry-picked commits from #6304 onto main branch,","Cherry-picked commits from #6304 onto main branch,",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6306,2021-04-23T10:29:48Z,2021-04-23T12:48:33Z,2021-04-23T13:06:12Z,MERGED,True,28,14,8,https://github.com/rouault,Fix most of remaining Coverity scan warnings with high priority,8,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6306,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6306,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6306,2021-04-23T10:29:48Z,2021-04-23T12:48:33Z,2021-04-23T13:06:12Z,MERGED,True,28,14,8,https://github.com/rouault,Fix most of remaining Coverity scan warnings with high priority,8,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6306,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6306#issuecomment-825633472,,+1 - Thanks @rouault!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6306,2021-04-23T10:29:48Z,2021-04-23T12:48:33Z,2021-04-23T13:06:12Z,MERGED,True,28,14,8,https://github.com/rouault,Fix most of remaining Coverity scan warnings with high priority,8,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6306,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6306#issuecomment-825634839,,Great work @rouault !!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6306,2021-04-23T10:29:48Z,2021-04-23T12:48:33Z,2021-04-23T13:06:12Z,MERGED,True,28,14,8,https://github.com/rouault,Fix most of remaining Coverity scan warnings with high priority,8,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6306,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/6306#issuecomment-825639148,,Should these (and other recent commits related to scanning) be pushed to older branches as well?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6306,2021-04-23T10:29:48Z,2021-04-23T12:48:33Z,2021-04-23T13:06:12Z,MERGED,True,28,14,8,https://github.com/rouault,Fix most of remaining Coverity scan warnings with high priority,8,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6306,https://github.com/rouault,5,https://github.com/MapServer/MapServer/pull/6306#issuecomment-825644244,,"Should these (and other recent commits related to scanning) be pushed to older branches as well?

I'm afraid we can't realisticly pretend to be able to maintain secure more than one release branch at a time..",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6306,2021-04-23T10:29:48Z,2021-04-23T12:48:33Z,2021-04-23T13:06:12Z,MERGED,True,28,14,8,https://github.com/rouault,Fix most of remaining Coverity scan warnings with high priority,8,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6306,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/6306#issuecomment-825645409,,"My personal opinion (I wrote this in some response, but I can't remember if it was public): I'd like to see our efforts (which are unfunded of course, and limited) to sticking with supporting the most recent release branch (branch-7-6), I'm not for supporting older unmaintained branches (such as branch-7-4 etc).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6307,2021-04-23T12:49:00Z,2021-04-24T08:49:26Z,2021-04-24T08:49:26Z,MERGED,True,31,18,8,https://github.com/MapServer-backport-bot,[Backport branch-7-6] Fix most of remaining Coverity scan warnings with high priority,2,[],https://github.com/mapserver/mapserver/pull/6307,https://github.com/MapServer-backport-bot,1,https://github.com/MapServer/MapServer/pull/6307,Backport 3795609 from #6306,Backport 3795609 from #6306,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6310,2021-04-24T15:23:52Z,2021-04-24T15:40:45Z,2021-04-24T15:40:46Z,MERGED,True,2,2,1,https://github.com/jmckenna,secure bot tokens,2,[],https://github.com/mapserver/mapserver/pull/6310,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6310,related to #6309,related to #6309,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6311,2021-04-24T18:35:37Z,2021-04-26T15:24:09Z,2021-04-26T15:24:09Z,MERGED,True,71,42,12,https://github.com/rouault,Another batch of coverity scan fixes,13,[],https://github.com/mapserver/mapserver/pull/6311,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6311,"Should hopefully fix the false positive about the last remaining one in 'high' category and a few 'medium' ones. Most of them are false positives or without any real consequence (dead code, useless check etc), except the ""agg_font_freetype.cpp: fix incorrect use of memcpy() (CID 1503528)"" commit","Should hopefully fix the false positive about the last remaining one in 'high' category and a few 'medium' ones. Most of them are false positives or without any real consequence (dead code, useless check etc), except the ""agg_font_freetype.cpp: fix incorrect use of memcpy() (CID 1503528)"" commit",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6311,2021-04-24T18:35:37Z,2021-04-26T15:24:09Z,2021-04-26T15:24:09Z,MERGED,True,71,42,12,https://github.com/rouault,Another batch of coverity scan fixes,13,[],https://github.com/mapserver/mapserver/pull/6311,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6311#issuecomment-826927549,"Should hopefully fix the false positive about the last remaining one in 'high' category and a few 'medium' ones. Most of them are false positives or without any real consequence (dead code, useless check etc), except the ""agg_font_freetype.cpp: fix incorrect use of memcpy() (CID 1503528)"" commit","Thanks Even, ok with me to apply... --Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6311,2021-04-24T18:35:37Z,2021-04-26T15:24:09Z,2021-04-26T15:24:09Z,MERGED,True,71,42,12,https://github.com/rouault,Another batch of coverity scan fixes,13,[],https://github.com/mapserver/mapserver/pull/6311,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6311#issuecomment-826927851,"Should hopefully fix the false positive about the last remaining one in 'high' category and a few 'medium' ones. Most of them are false positives or without any real consequence (dead code, useless check etc), except the ""agg_font_freetype.cpp: fix incorrect use of memcpy() (CID 1503528)"" commit",thanks again @rouault !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6312,2021-04-28T14:48:31Z,2021-06-09T16:01:17Z,2021-06-09T16:01:17Z,CLOSED,False,1,1,1,https://github.com/sdlime,WIP: Selectively trim blanks when populating shape items in PostGIS (#6292),13,['Work in progress'],https://github.com/mapserver/mapserver/pull/6312,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/6312,"It doesn't look like that call is necessary and it can remove legitimate trailing blanks in the data. However, if there are data types that are padded w/blanks then this likely isn't the right solution. Will need some review/discussion.
--Steve","It doesn't look like that call is necessary and it can remove legitimate trailing blanks in the data. However, if there are data types that are padded w/blanks then this likely isn't the right solution. Will need some review/discussion.
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6312,2021-04-28T14:48:31Z,2021-06-09T16:01:17Z,2021-06-09T16:01:17Z,CLOSED,False,1,1,1,https://github.com/sdlime,WIP: Selectively trim blanks when populating shape items in PostGIS (#6292),13,['Work in progress'],https://github.com/mapserver/mapserver/pull/6312,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6312#issuecomment-828524515,"It doesn't look like that call is necessary and it can remove legitimate trailing blanks in the data. However, if there are data types that are padded w/blanks then this likely isn't the right solution. Will need some review/discussion.
--Steve",I don't think this is going to be the right fix since PostgreSQL can have blank-padded data fields (https://www.postgresql.org/docs/9.0/datatype-character.html)...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6312,2021-04-28T14:48:31Z,2021-06-09T16:01:17Z,2021-06-09T16:01:17Z,CLOSED,False,1,1,1,https://github.com/sdlime,WIP: Selectively trim blanks when populating shape items in PostGIS (#6292),13,['Work in progress'],https://github.com/mapserver/mapserver/pull/6312,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/6312#issuecomment-857830635,"It doesn't look like that call is necessary and it can remove legitimate trailing blanks in the data. However, if there are data types that are padded w/blanks then this likely isn't the right solution. Will need some review/discussion.
--Steve",Superseded per #6349,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6314,2021-04-30T19:08:50Z,2021-04-30T20:04:07Z,2021-04-30T20:04:32Z,MERGED,True,75,16,4,https://github.com/sdlime,Address flaw in CGI mapfile loading that makes it possible to bypass security controls (#6313),14,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6314,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/6314,This pull request addresses a critical flaw identified in issue #6313. The fix forces the mapfile value through validation if it's pulled from an environment variable or given as a path. --Steve,This pull request addresses a critical flaw identified in issue #6313. The fix forces the mapfile value through validation if it's pulled from an environment variable or given as a path. --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6314,2021-04-30T19:08:50Z,2021-04-30T20:04:07Z,2021-04-30T20:04:32Z,MERGED,True,75,16,4,https://github.com/sdlime,Address flaw in CGI mapfile loading that makes it possible to bypass security controls (#6313),14,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6314,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6314#issuecomment-830328359,This pull request addresses a critical flaw identified in issue #6313. The fix forces the mapfile value through validation if it's pulled from an environment variable or given as a path. --Steve,"The pull request does a few other things:

adds validation to exclude standard CGI environment variables as map values
adds ability to add additional user-defined filtering against environment variable values (MS_MAP_ENV_PATTERN)
simplifies MS_MAP_PATTERN writing by excluding problematic character sets (e.g. ..) from map values by default.

What does this mean for users? This represents a critical flaw and all users should upgrade ASAP.
If you've not used MS_MAP_PATTERN or MS_MAP_NO_PATH as part of securing your installation then this doesn't have much impact. That said, you should upgrade and make use of those controls to limit where mapfiles can be accessed.
If you've relied on MS_MAP_PATTERN exclusively, you should upgrade and should be in good shape. However, it's a great time to review and test MS_MAP_PATTERN.
If you've relied on MS_MAP_NO_PATH primarily (like me), you should upgrade and set a value for MS_MAP_PATTERN. You might consider also setting a value for MS_MAP_ENV_PATTERN if you have a standard way of naming environment variables that reference mapfiles (for example, mine all end in _MAPFILE).
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6314,2021-04-30T19:08:50Z,2021-04-30T20:04:07Z,2021-04-30T20:04:32Z,MERGED,True,75,16,4,https://github.com/sdlime,Address flaw in CGI mapfile loading that makes it possible to bypass security controls (#6313),14,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6314,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/6314#issuecomment-830331966,This pull request addresses a critical flaw identified in issue #6313. The fix forces the mapfile value through validation if it's pulled from an environment variable or given as a path. --Steve,"I've just added 4d631fc to fix a memory leak which was very likely what the ASAN config of Travis-CI didn't like. Hopefully that will make it happy

Thanks @rouault! Once the tests pass then I can merge and the backport to 7.6 can happen. Hopefully can do a couple of cherry-picks for 7.0 to 7.4 branches.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6315,2021-04-30T20:13:32Z,2021-04-30T20:30:45Z,2021-04-30T20:30:45Z,MERGED,True,75,16,4,https://github.com/rouault,[Backport 7.6] Address flaw in CGI mapfile loading that makes it possible to bypass security controls (#6313) (#6314),1,[],https://github.com/mapserver/mapserver/pull/6315,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6315,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6316,2021-04-30T22:41:46Z,2021-05-03T14:19:42Z,2021-05-03T14:19:42Z,MERGED,True,33,3,1,https://github.com/rouault,"CI: add tests for MS_MAP_NO_PATH, MS_MAP_PATTERN and MS_MAPFILE",1,[],https://github.com/mapserver/mapserver/pull/6316,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6316,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6316,2021-04-30T22:41:46Z,2021-05-03T14:19:42Z,2021-05-03T14:19:42Z,MERGED,True,33,3,1,https://github.com/rouault,"CI: add tests for MS_MAP_NO_PATH, MS_MAP_PATTERN and MS_MAPFILE",1,[],https://github.com/mapserver/mapserver/pull/6316,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6316#issuecomment-830442814,,"Looks like a good start, thanks for setting up.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6316,2021-04-30T22:41:46Z,2021-05-03T14:19:42Z,2021-05-03T14:19:42Z,MERGED,True,33,3,1,https://github.com/rouault,"CI: add tests for MS_MAP_NO_PATH, MS_MAP_PATTERN and MS_MAPFILE",1,[],https://github.com/mapserver/mapserver/pull/6316,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6316#issuecomment-831290707,,thanks @rouault !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6317,2021-05-03T07:21:22Z,2021-05-14T19:01:39Z,2021-05-26T20:01:09Z,MERGED,True,3147,2897,108,https://github.com/geographika,Removal of styling keywords from a Mapfile CLASS,6,[],https://github.com/mapserver/mapserver/pull/6317,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6317,"This pull request removes deprecated keywords from a Mapfile CLASS as part of MS RFC 133: Mapfile Syntax Cleanup.
The removed keywords provided a shortcut of placing style keywords directly on a CLASS.
The following:
 CLASS COLOR 0 0 255 END

Must now be rewritten:
 CLASS STYLE COLOR 0 0 255 END END

The pull request removes the code to map these to styles, and also updates the many msautotest Mapfiles using this approach.
Note no changes have been made to the lexer as part of this pull request.
The aims of this update are:

Removes ambiguity on which approach to take
Avoid supporting deprecated Mapfile keywords indefinitely
Allows a simpler syntax to be supported by various Mapfile generators
May make it easier to move to named styles in the future","This pull request removes deprecated keywords from a Mapfile CLASS as part of MS RFC 133: Mapfile Syntax Cleanup.
The removed keywords provided a shortcut of placing style keywords directly on a CLASS.
The following:
 CLASS COLOR 0 0 255 END

Must now be rewritten:
 CLASS STYLE COLOR 0 0 255 END END

The pull request removes the code to map these to styles, and also updates the many msautotest Mapfiles using this approach.
Note no changes have been made to the lexer as part of this pull request.
The aims of this update are:

Removes ambiguity on which approach to take
Avoid supporting deprecated Mapfile keywords indefinitely
Allows a simpler syntax to be supported by various Mapfile generators
May make it easier to move to named styles in the future",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6317,2021-05-03T07:21:22Z,2021-05-14T19:01:39Z,2021-05-26T20:01:09Z,MERGED,True,3147,2897,108,https://github.com/geographika,Removal of styling keywords from a Mapfile CLASS,6,[],https://github.com/mapserver/mapserver/pull/6317,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6317#issuecomment-831360639,"This pull request removes deprecated keywords from a Mapfile CLASS as part of MS RFC 133: Mapfile Syntax Cleanup.
The removed keywords provided a shortcut of placing style keywords directly on a CLASS.
The following:
 CLASS COLOR 0 0 255 END

Must now be rewritten:
 CLASS STYLE COLOR 0 0 255 END END

The pull request removes the code to map these to styles, and also updates the many msautotest Mapfiles using this approach.
Note no changes have been made to the lexer as part of this pull request.
The aims of this update are:

Removes ambiguity on which approach to take
Avoid supporting deprecated Mapfile keywords indefinitely
Allows a simpler syntax to be supported by various Mapfile generators
May make it easier to move to named styles in the future","Aren't there a bunch of keywords (e.g. OVERLAYBACKGROUNDCOLOR) that can be removed from the lexer and mapfile.h, From the latter...
#define OVERLAYBACKGROUNDCOLOR 1106
#define OVERLAYCOLOR 1107
#define OVERLAYMAXSIZE 1108
#define OVERLAYMINSIZE 1109
#define OVERLAYOUTLINECOLOR 1110
#define OVERLAYSIZE 1111
#define OVERLAYSYMBOL 1112

Although you probably know that... ;-)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6317,2021-05-03T07:21:22Z,2021-05-14T19:01:39Z,2021-05-26T20:01:09Z,MERGED,True,3147,2897,108,https://github.com/geographika,Removal of styling keywords from a Mapfile CLASS,6,[],https://github.com/mapserver/mapserver/pull/6317,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/6317#issuecomment-835867397,"This pull request removes deprecated keywords from a Mapfile CLASS as part of MS RFC 133: Mapfile Syntax Cleanup.
The removed keywords provided a shortcut of placing style keywords directly on a CLASS.
The following:
 CLASS COLOR 0 0 255 END

Must now be rewritten:
 CLASS STYLE COLOR 0 0 255 END END

The pull request removes the code to map these to styles, and also updates the many msautotest Mapfiles using this approach.
Note no changes have been made to the lexer as part of this pull request.
The aims of this update are:

Removes ambiguity on which approach to take
Avoid supporting deprecated Mapfile keywords indefinitely
Allows a simpler syntax to be supported by various Mapfile generators
May make it easier to move to named styles in the future","@sdlime - I was aware, but have so far managed to avoid the lexer/parser side of MapServer development..
As I understand it (and there is a good 2003 post by yourself which gives a good overview):
maplexer.l is edited manually, and then the flex tool is run on the command line to generate maplexer.c which is then checked in.
This all seems to be scripted in the vagrant build script - so I presume this is the easiest way to regenerate maplexer.c?
I'm going through the MapServer vagrant docs at the moment to try and get this setup locally.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6317,2021-05-03T07:21:22Z,2021-05-14T19:01:39Z,2021-05-26T20:01:09Z,MERGED,True,3147,2897,108,https://github.com/geographika,Removal of styling keywords from a Mapfile CLASS,6,[],https://github.com/mapserver/mapserver/pull/6317,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/6317#issuecomment-836680324,"This pull request removes deprecated keywords from a Mapfile CLASS as part of MS RFC 133: Mapfile Syntax Cleanup.
The removed keywords provided a shortcut of placing style keywords directly on a CLASS.
The following:
 CLASS COLOR 0 0 255 END

Must now be rewritten:
 CLASS STYLE COLOR 0 0 255 END END

The pull request removes the code to map these to styles, and also updates the many msautotest Mapfiles using this approach.
Note no changes have been made to the lexer as part of this pull request.
The aims of this update are:

Removes ambiguity on which approach to take
Avoid supporting deprecated Mapfile keywords indefinitely
Allows a simpler syntax to be supported by various Mapfile generators
May make it easier to move to named styles in the future","This all seems to be scripted in the vagrant build script - so I presume this is the easiest way to regenerate maplexer.c?

Yup, that's what I end up doing to get a version to commit.
BTW There are a couple of other keywords to remove as part of RFC 133 - TEMPLATEPATTERN and DATAPATTERN. Both are deprecated and were replaced by more general validation. The FILEPATTERN symbol (mapfile.h) can also be recovered.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6317,2021-05-03T07:21:22Z,2021-05-14T19:01:39Z,2021-05-26T20:01:09Z,MERGED,True,3147,2897,108,https://github.com/geographika,Removal of styling keywords from a Mapfile CLASS,6,[],https://github.com/mapserver/mapserver/pull/6317,https://github.com/geographika,5,https://github.com/MapServer/MapServer/pull/6317#issuecomment-836718104,"This pull request removes deprecated keywords from a Mapfile CLASS as part of MS RFC 133: Mapfile Syntax Cleanup.
The removed keywords provided a shortcut of placing style keywords directly on a CLASS.
The following:
 CLASS COLOR 0 0 255 END

Must now be rewritten:
 CLASS STYLE COLOR 0 0 255 END END

The pull request removes the code to map these to styles, and also updates the many msautotest Mapfiles using this approach.
Note no changes have been made to the lexer as part of this pull request.
The aims of this update are:

Removes ambiguity on which approach to take
Avoid supporting deprecated Mapfile keywords indefinitely
Allows a simpler syntax to be supported by various Mapfile generators
May make it easier to move to named styles in the future","I used the vagrant setup to regenerate maplexer.c from an updated maplexer.l and added to this pull request. If I understand correctly the keywords aren't tied to particular classes in the lexer, so the other removed CLASS keywords, which can also be found in a STYLE object e.g. COLOR) should be left alone.
I think the pull request is ready for a final review.
With regards to TEMPLATEPATTERN and DATAPATTERN - there is no mention of deprecation on the MAP docs page. Do they need to be deprecated prior to removal? Or are they already redundant for the 8.0 release?
I can look at these in a separate pull request.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6317,2021-05-03T07:21:22Z,2021-05-14T19:01:39Z,2021-05-26T20:01:09Z,MERGED,True,3147,2897,108,https://github.com/geographika,Removal of styling keywords from a Mapfile CLASS,6,[],https://github.com/mapserver/mapserver/pull/6317,https://github.com/sdlime,6,https://github.com/MapServer/MapServer/pull/6317#issuecomment-836738379,"This pull request removes deprecated keywords from a Mapfile CLASS as part of MS RFC 133: Mapfile Syntax Cleanup.
The removed keywords provided a shortcut of placing style keywords directly on a CLASS.
The following:
 CLASS COLOR 0 0 255 END

Must now be rewritten:
 CLASS STYLE COLOR 0 0 255 END END

The pull request removes the code to map these to styles, and also updates the many msautotest Mapfiles using this approach.
Note no changes have been made to the lexer as part of this pull request.
The aims of this update are:

Removes ambiguity on which approach to take
Avoid supporting deprecated Mapfile keywords indefinitely
Allows a simpler syntax to be supported by various Mapfile generators
May make it easier to move to named styles in the future","I can't imagine they are used much, if at all. They've been redundant for years and can be removed IMHO w/documentation.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6317,2021-05-03T07:21:22Z,2021-05-14T19:01:39Z,2021-05-26T20:01:09Z,MERGED,True,3147,2897,108,https://github.com/geographika,Removal of styling keywords from a Mapfile CLASS,6,[],https://github.com/mapserver/mapserver/pull/6317,https://github.com/geographika,7,https://github.com/MapServer/MapServer/pull/6317#issuecomment-840015070,"This pull request removes deprecated keywords from a Mapfile CLASS as part of MS RFC 133: Mapfile Syntax Cleanup.
The removed keywords provided a shortcut of placing style keywords directly on a CLASS.
The following:
 CLASS COLOR 0 0 255 END

Must now be rewritten:
 CLASS STYLE COLOR 0 0 255 END END

The pull request removes the code to map these to styles, and also updates the many msautotest Mapfiles using this approach.
Note no changes have been made to the lexer as part of this pull request.
The aims of this update are:

Removes ambiguity on which approach to take
Avoid supporting deprecated Mapfile keywords indefinitely
Allows a simpler syntax to be supported by various Mapfile generators
May make it easier to move to named styles in the future",Unless there are any objections I'll merge in the next couple of days to move onto some other keywords (there are lots of msautotest changes so I want to avoid lots of merge conflicts).,True,{'THUMBS_UP': ['https://github.com/sdlime']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6318,2021-05-03T09:23:21Z,2021-05-03T12:24:09Z,2021-05-04T20:32:14Z,MERGED,True,2,2,1,https://github.com/szekerest,Fix querymap failure for polygon layers with labels only (no styles) (#6262),1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6318,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/6318,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6318,2021-05-03T09:23:21Z,2021-05-03T12:24:09Z,2021-05-04T20:32:14Z,MERGED,True,2,2,1,https://github.com/szekerest,Fix querymap failure for polygon layers with labels only (no styles) (#6262),1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6318,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6318#issuecomment-831225158,,thanks @szekerest !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6318,2021-05-03T09:23:21Z,2021-05-03T12:24:09Z,2021-05-04T20:32:14Z,MERGED,True,2,2,1,https://github.com/szekerest,Fix querymap failure for polygon layers with labels only (no styles) (#6262),1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6318,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6318#issuecomment-832224554,,backported to branch-7-6 through 782ee8b,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6319,2021-05-04T15:18:46Z,2021-05-04T19:57:51Z,2021-10-05T10:23:25Z,MERGED,True,18,1,2,https://github.com/MaxKellermann,Fixes for several security vulnerabilities found with libFuzzer,4,"['Security', 'backport branch-7-6']",https://github.com/mapserver/mapserver/pull/6319,https://github.com/MaxKellermann,1,https://github.com/MapServer/MapServer/pull/6319,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6319,2021-05-04T15:18:46Z,2021-05-04T19:57:51Z,2021-10-05T10:23:25Z,MERGED,True,18,1,2,https://github.com/MaxKellermann,Fixes for several security vulnerabilities found with libFuzzer,4,"['Security', 'backport branch-7-6']",https://github.com/mapserver/mapserver/pull/6319,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6319#issuecomment-832028943,,"Please redo your pull request against the master branch.
Which setup (scripts, etc.) did you use to find this ?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6319,2021-05-04T15:18:46Z,2021-05-04T19:57:51Z,2021-10-05T10:23:25Z,MERGED,True,18,1,2,https://github.com/MaxKellermann,Fixes for several security vulnerabilities found with libFuzzer,4,"['Security', 'backport branch-7-6']",https://github.com/mapserver/mapserver/pull/6319,https://github.com/MaxKellermann,3,https://github.com/MapServer/MapServer/pull/6319#issuecomment-832033840,,"Changed to branch ""main"".
I started writing various fuzzers for a https://github.com/XCSoar/XCSoar/ which is a navigation app for pilots. It uses part of the MapServer code to load shape files. (Patched to be able to load it from ZIP files.)
This is the fuzzer: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp ... which however talks to XCSoar's C++ code, which deep inside calls into MapServer's C code. So this fuzzer may not be useful for you.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6319,2021-05-04T15:18:46Z,2021-05-04T19:57:51Z,2021-10-05T10:23:25Z,MERGED,True,18,1,2,https://github.com/MaxKellermann,Fixes for several security vulnerabilities found with libFuzzer,4,"['Security', 'backport branch-7-6']",https://github.com/mapserver/mapserver/pull/6319,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/6319#issuecomment-832207233,,thanks for this effort @MaxKellermann !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6319,2021-05-04T15:18:46Z,2021-05-04T19:57:51Z,2021-10-05T10:23:25Z,MERGED,True,18,1,2,https://github.com/MaxKellermann,Fixes for several security vulnerabilities found with libFuzzer,4,"['Security', 'backport branch-7-6']",https://github.com/mapserver/mapserver/pull/6319,https://github.com/rouault,5,https://github.com/MapServer/MapServer/pull/6319#issuecomment-832209474,,"@jmckenna Do you want me to create an issue about the backport bot no longer working ?
I'll do a manual backport of this PR",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6319,2021-05-04T15:18:46Z,2021-05-04T19:57:51Z,2021-10-05T10:23:25Z,MERGED,True,18,1,2,https://github.com/MaxKellermann,Fixes for several security vulnerabilities found with libFuzzer,4,"['Security', 'backport branch-7-6']",https://github.com/mapserver/mapserver/pull/6319,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/6319#issuecomment-832210364,,"@rouault I was just working on it, fix coming...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6320,2021-05-04T20:09:00Z,2021-05-04T20:43:03Z,2021-05-04T20:43:04Z,MERGED,True,18,1,2,https://github.com/rouault,[Backport 7.6]  Fixes for several security vulnerabilities found with libFuzzer,4,[],https://github.com/mapserver/mapserver/pull/6320,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6320,Backport of #6319,Backport of #6319,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6321,2021-05-04T20:22:15Z,2021-05-04T20:26:51Z,2021-05-04T20:26:51Z,MERGED,True,1,1,1,https://github.com/jmckenna,use pull_request_target to access secrets,1,[],https://github.com/mapserver/mapserver/pull/6321,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6321,allow the backport bot to access repository 'secrets',allow the backport bot to access repository 'secrets',True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6324,2021-05-12T13:11:10Z,2021-05-25T15:59:14Z,2021-05-25T15:59:14Z,MERGED,True,42,5,4,https://github.com/wicksell,Try to fallback to using a question mark if a glyph is missing in a font,3,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6324,https://github.com/wicksell,1,https://github.com/MapServer/MapServer/pull/6324,"As it is now MapServer will fail to render if a layer is using characters that's not available in the font. This resolves this by trying to fallback to using a question mark in these situations.
I don't know if this will work as a general solution but it is very annoying that rendering will fail when the content contain characters not supported by the font.","As it is now MapServer will fail to render if a layer is using characters that's not available in the font. This resolves this by trying to fallback to using a question mark in these situations.
I don't know if this will work as a general solution but it is very annoying that rendering will fail when the content contain characters not supported by the font.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6324,2021-05-12T13:11:10Z,2021-05-25T15:59:14Z,2021-05-25T15:59:14Z,MERGED,True,42,5,4,https://github.com/wicksell,Try to fallback to using a question mark if a glyph is missing in a font,3,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6324,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/6324#issuecomment-839795942,"As it is now MapServer will fail to render if a layer is using characters that's not available in the font. This resolves this by trying to fallback to using a question mark in these situations.
I don't know if this will work as a general solution but it is very annoying that rendering will fail when the content contain characters not supported by the font.","Looks a nice addition -thanks @wicksell
Would you be able to create a test for this? https://github.com/MapServer/MapServer/blob/main/msautotest/renderers/font-fail.map could be used as the basis for this.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6324,2021-05-12T13:11:10Z,2021-05-25T15:59:14Z,2021-05-25T15:59:14Z,MERGED,True,42,5,4,https://github.com/wicksell,Try to fallback to using a question mark if a glyph is missing in a font,3,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6324,https://github.com/wicksell,3,https://github.com/MapServer/MapServer/pull/6324#issuecomment-841622227,"As it is now MapServer will fail to render if a layer is using characters that's not available in the font. This resolves this by trying to fallback to using a question mark in these situations.
I don't know if this will work as a general solution but it is very annoying that rendering will fail when the content contain characters not supported by the font.","Sorry, but I will not have time to create a test for this in the near future.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6324,2021-05-12T13:11:10Z,2021-05-25T15:59:14Z,2021-05-25T15:59:14Z,MERGED,True,42,5,4,https://github.com/wicksell,Try to fallback to using a question mark if a glyph is missing in a font,3,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6324,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/6324#issuecomment-846560204,"As it is now MapServer will fail to render if a layer is using characters that's not available in the font. This resolves this by trying to fallback to using a question mark in these situations.
I don't know if this will work as a general solution but it is very annoying that rendering will fail when the content contain characters not supported by the font.","@wicksell I tried your patch but it had no effect on the test case I tried (included in the follow-up commit I've added). This commit patches check_single_font() instead, which works for me.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6326,2021-05-12T15:32:03Z,2021-05-12T19:05:04Z,2021-05-12T19:05:05Z,MERGED,True,77,4,4,https://github.com/rouault,WFS: fix paging with GPKG/Spatialite datasources and non-point geometries (fixes #6325),2,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6326,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6326,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6327,2021-05-12T19:06:27Z,2021-05-12T19:57:15Z,2021-05-12T19:57:15Z,MERGED,True,77,4,4,https://github.com/apps/github-actions,[Backport branch-7-6] WFS: fix paging with GPKG/Spatialite datasources and non-point geometries (fixes #6325),2,[],https://github.com/mapserver/mapserver/pull/6327,https://github.com/apps/github-actions,1,https://github.com/MapServer/MapServer/pull/6327,"Backport #6326
Authored by: @rouault","Backport #6326
Authored by: @rouault",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6329,2021-05-14T22:58:03Z,2021-05-24T17:48:03Z,2021-05-24T17:48:03Z,MERGED,True,96,80,35,https://github.com/geographika,Remove MAP TRANSPARENT keyword,4,[],https://github.com/mapserver/mapserver/pull/6329,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6329,"This pull request removes TRANSPARENT property of a MAP which has been deprecated since version 4.6 as part of  MS RFC 133: Mapfile Syntax Cleanup.
Transparency should now always be set in the OUTPUTFORMAT. So the following:
MAP
    IMAGETYPE png
    TRANSPARENT ON
...

Becomes:
MAP
    IMAGETYPE png
    OUTPUTFORMAT
      NAME ""png""
      DRIVER AGG/PNG
      MIMETYPE ""image/png""
      IMAGEMODE RGB
      EXTENSION ""png""
      FORMATOPTION ""GAMMA=0.75""
      TRANSPARENT ON
  END
...

The default OUTPUTFORMAT settings are shown at https://mapserver.org/mapfile/outputformat.html
None of these have TRANSPARENT ON by default, so a full OUTPUTFORMAT needs to be configured.
If a MAP has TRANSPARENT OFF set, then this can simply be removed.","This pull request removes TRANSPARENT property of a MAP which has been deprecated since version 4.6 as part of  MS RFC 133: Mapfile Syntax Cleanup.
Transparency should now always be set in the OUTPUTFORMAT. So the following:
MAP
    IMAGETYPE png
    TRANSPARENT ON
...

Becomes:
MAP
    IMAGETYPE png
    OUTPUTFORMAT
      NAME ""png""
      DRIVER AGG/PNG
      MIMETYPE ""image/png""
      IMAGEMODE RGB
      EXTENSION ""png""
      FORMATOPTION ""GAMMA=0.75""
      TRANSPARENT ON
  END
...

The default OUTPUTFORMAT settings are shown at https://mapserver.org/mapfile/outputformat.html
None of these have TRANSPARENT ON by default, so a full OUTPUTFORMAT needs to be configured.
If a MAP has TRANSPARENT OFF set, then this can simply be removed.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6329,2021-05-14T22:58:03Z,2021-05-24T17:48:03Z,2021-05-24T17:48:03Z,MERGED,True,96,80,35,https://github.com/geographika,Remove MAP TRANSPARENT keyword,4,[],https://github.com/mapserver/mapserver/pull/6329,https://github.com/jratike80,2,https://github.com/MapServer/MapServer/pull/6329#issuecomment-841632939,"This pull request removes TRANSPARENT property of a MAP which has been deprecated since version 4.6 as part of  MS RFC 133: Mapfile Syntax Cleanup.
Transparency should now always be set in the OUTPUTFORMAT. So the following:
MAP
    IMAGETYPE png
    TRANSPARENT ON
...

Becomes:
MAP
    IMAGETYPE png
    OUTPUTFORMAT
      NAME ""png""
      DRIVER AGG/PNG
      MIMETYPE ""image/png""
      IMAGEMODE RGB
      EXTENSION ""png""
      FORMATOPTION ""GAMMA=0.75""
      TRANSPARENT ON
  END
...

The default OUTPUTFORMAT settings are shown at https://mapserver.org/mapfile/outputformat.html
None of these have TRANSPARENT ON by default, so a full OUTPUTFORMAT needs to be configured.
If a MAP has TRANSPARENT OFF set, then this can simply be removed.","In WMS the optional parameter TRANSPARENT=TRUE|FALSE has FALSE as default. So in a compliant WMS server configuration the outputformat must not have TRANSPARENT ON by default,  and &TRANSPARENT=TRUE in GetMap should be honored if the server and the format support transparency.
There is nothing about TRANSPARENT in https://www.mapserver.org/ogc/wms_server.html. Do we support it at all?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6329,2021-05-14T22:58:03Z,2021-05-24T17:48:03Z,2021-05-24T17:48:03Z,MERGED,True,96,80,35,https://github.com/geographika,Remove MAP TRANSPARENT keyword,4,[],https://github.com/mapserver/mapserver/pull/6329,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/6329#issuecomment-841635135,"This pull request removes TRANSPARENT property of a MAP which has been deprecated since version 4.6 as part of  MS RFC 133: Mapfile Syntax Cleanup.
Transparency should now always be set in the OUTPUTFORMAT. So the following:
MAP
    IMAGETYPE png
    TRANSPARENT ON
...

Becomes:
MAP
    IMAGETYPE png
    OUTPUTFORMAT
      NAME ""png""
      DRIVER AGG/PNG
      MIMETYPE ""image/png""
      IMAGEMODE RGB
      EXTENSION ""png""
      FORMATOPTION ""GAMMA=0.75""
      TRANSPARENT ON
  END
...

The default OUTPUTFORMAT settings are shown at https://mapserver.org/mapfile/outputformat.html
None of these have TRANSPARENT ON by default, so a full OUTPUTFORMAT needs to be configured.
If a MAP has TRANSPARENT OFF set, then this can simply be removed.","@jratike80 - it looks like this is supported.
Read from parameters:

  
    
      MapServer/mapwms.cpp
    
    
         Line 1160
      in
      9d086ca
    
  
  
    

        
          
           } else if (strcasecmp(names[i], ""TRANSPARENT"") == 0) { 
        
    
  


Then applied to the format:

  
    
      MapServer/mapwms.cpp
    
    
         Line 1365
      in
      9d086ca
    
  
  
    

        
          
             ** Apply the selected output format (if one was selected), and override 
        
    
  


Docs might just need updating to mention this?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6329,2021-05-14T22:58:03Z,2021-05-24T17:48:03Z,2021-05-24T17:48:03Z,MERGED,True,96,80,35,https://github.com/geographika,Remove MAP TRANSPARENT keyword,4,[],https://github.com/mapserver/mapserver/pull/6329,https://github.com/geographika,4,https://github.com/MapServer/MapServer/pull/6329#issuecomment-841643621,"This pull request removes TRANSPARENT property of a MAP which has been deprecated since version 4.6 as part of  MS RFC 133: Mapfile Syntax Cleanup.
Transparency should now always be set in the OUTPUTFORMAT. So the following:
MAP
    IMAGETYPE png
    TRANSPARENT ON
...

Becomes:
MAP
    IMAGETYPE png
    OUTPUTFORMAT
      NAME ""png""
      DRIVER AGG/PNG
      MIMETYPE ""image/png""
      IMAGEMODE RGB
      EXTENSION ""png""
      FORMATOPTION ""GAMMA=0.75""
      TRANSPARENT ON
  END
...

The default OUTPUTFORMAT settings are shown at https://mapserver.org/mapfile/outputformat.html
None of these have TRANSPARENT ON by default, so a full OUTPUTFORMAT needs to be configured.
If a MAP has TRANSPARENT OFF set, then this can simply be removed.","After testing further with the OUTPUTFORMAT blocks and default settings, there is no need for users to copy in the large chunks of default settings.
For example to set transparency for the cairopng driver setting the DRIVER and TRANSPARENT option is sufficient:
OUTPUTFORMAT
  DRIVER CAIRO/PNG
  TRANSPARENT ON
END

However PNG doesn't quite fit into this approach. If the following block is called with shp2img and the -i png option it will fail.
OUTPUTFORMAT
  DRIVER AGG/PNG
  TRANSPARENT ON
END

The default driver name is set to png24 for DRIVER AGG/PNG:

  
    
      MapServer/mapoutput.c
    
    
         Line 186
      in
      9d086ca
    
  
  
    

        
          
           if(!name) name=""png24""; 
        
    
  


The default name however is png:

  
    
      MapServer/mapoutput.c
    
    
         Line 106
      in
      9d086ca
    
  
  
    

        
          
           {""png"",""AGG/PNG"",""image/png""}, 
        
    
  


For tests to pass shp2img must pass -i png24 to pick up the transparency, or the name must be added to the OUTPUTFORMAT:
OUTPUTFORMAT
  NAME ""png""
  DRIVER AGG/PNG
  TRANSPARENT ON
END

Is there a reason for setting the default name to png24? Looking at the code changes I think png wasn't used as this was used by the (long since removed) GD driver.
I think it would make more sense to set the default name to png.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6329,2021-05-14T22:58:03Z,2021-05-24T17:48:03Z,2021-05-24T17:48:03Z,MERGED,True,96,80,35,https://github.com/geographika,Remove MAP TRANSPARENT keyword,4,[],https://github.com/mapserver/mapserver/pull/6329,https://github.com/jratike80,5,https://github.com/MapServer/MapServer/pull/6329#issuecomment-841687898,"This pull request removes TRANSPARENT property of a MAP which has been deprecated since version 4.6 as part of  MS RFC 133: Mapfile Syntax Cleanup.
Transparency should now always be set in the OUTPUTFORMAT. So the following:
MAP
    IMAGETYPE png
    TRANSPARENT ON
...

Becomes:
MAP
    IMAGETYPE png
    OUTPUTFORMAT
      NAME ""png""
      DRIVER AGG/PNG
      MIMETYPE ""image/png""
      IMAGEMODE RGB
      EXTENSION ""png""
      FORMATOPTION ""GAMMA=0.75""
      TRANSPARENT ON
  END
...

The default OUTPUTFORMAT settings are shown at https://mapserver.org/mapfile/outputformat.html
None of these have TRANSPARENT ON by default, so a full OUTPUTFORMAT needs to be configured.
If a MAP has TRANSPARENT OFF set, then this can simply be removed.",It is common to use 8 bit paletted png in WMS because for visual use 24 bit is mostly wasting bandwidth. Perhaps that is somehow related?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6329,2021-05-14T22:58:03Z,2021-05-24T17:48:03Z,2021-05-24T17:48:03Z,MERGED,True,96,80,35,https://github.com/geographika,Remove MAP TRANSPARENT keyword,4,[],https://github.com/mapserver/mapserver/pull/6329,https://github.com/geographika,6,https://github.com/MapServer/MapServer/pull/6329#issuecomment-841709219,"This pull request removes TRANSPARENT property of a MAP which has been deprecated since version 4.6 as part of  MS RFC 133: Mapfile Syntax Cleanup.
Transparency should now always be set in the OUTPUTFORMAT. So the following:
MAP
    IMAGETYPE png
    TRANSPARENT ON
...

Becomes:
MAP
    IMAGETYPE png
    OUTPUTFORMAT
      NAME ""png""
      DRIVER AGG/PNG
      MIMETYPE ""image/png""
      IMAGEMODE RGB
      EXTENSION ""png""
      FORMATOPTION ""GAMMA=0.75""
      TRANSPARENT ON
  END
...

The default OUTPUTFORMAT settings are shown at https://mapserver.org/mapfile/outputformat.html
None of these have TRANSPARENT ON by default, so a full OUTPUTFORMAT needs to be configured.
If a MAP has TRANSPARENT OFF set, then this can simply be removed.","It is common to use 8 bit paletted png in WMS because for visual use 24 bit is mostly wasting bandwidth. Perhaps that is somehow related?

I think the WMS request would need to specify the format as png8. It looks like png == png24 by default on the AGG specifics page and in the code.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6330,2021-05-15T21:04:44Z,2021-05-16T11:17:42Z,2021-05-16T11:17:42Z,MERGED,True,116,114,23,https://github.com/rouault,Another batch of Coverity scan fixes,30,[],https://github.com/mapserver/mapserver/pull/6330,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6330,Nothing that really deserves backporting. Mostly false positive and cleanups,Nothing that really deserves backporting. Mostly false positive and cleanups,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6330,2021-05-15T21:04:44Z,2021-05-16T11:17:42Z,2021-05-16T11:17:42Z,MERGED,True,116,114,23,https://github.com/rouault,Another batch of Coverity scan fixes,30,[],https://github.com/mapserver/mapserver/pull/6330,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6330#issuecomment-841803154,Nothing that really deserves backporting. Mostly false positive and cleanups,thanks @rouault !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6331,2021-05-19T09:08:49Z,2021-05-20T19:46:19Z,2021-05-21T18:13:30Z,MERGED,True,62,19,48,https://github.com/ravhed,MVT: Sets correct media type of Mapbox vector tiles output,4,[],https://github.com/mapserver/mapserver/pull/6331,https://github.com/ravhed,1,https://github.com/MapServer/MapServer/pull/6331,"The correct media type is defined as ""vnd.mapbox-vector-tile"" (see http://www.iana.org/assignments/media-types/media-types.xhtml)
There was some discussion regarding this in the following mail conversation: https://lists.osgeo.org/pipermail/mapserver-dev/2017-July/015172.html
GeoWebCache (and GeoServer) uses the vnd.mapbox-vector-tile media type. This causes some issues when wanting to use vector tiles generated by Mapserver as it doesn't return the media type that GeoWebCache expects.
Worth to note is that this change might potentially break some existing installations which rely on the application/x-protobuf media type.","The correct media type is defined as ""vnd.mapbox-vector-tile"" (see http://www.iana.org/assignments/media-types/media-types.xhtml)
There was some discussion regarding this in the following mail conversation: https://lists.osgeo.org/pipermail/mapserver-dev/2017-July/015172.html
GeoWebCache (and GeoServer) uses the vnd.mapbox-vector-tile media type. This causes some issues when wanting to use vector tiles generated by Mapserver as it doesn't return the media type that GeoWebCache expects.
Worth to note is that this change might potentially break some existing installations which rely on the application/x-protobuf media type.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6331,2021-05-19T09:08:49Z,2021-05-20T19:46:19Z,2021-05-21T18:13:30Z,MERGED,True,62,19,48,https://github.com/ravhed,MVT: Sets correct media type of Mapbox vector tiles output,4,[],https://github.com/mapserver/mapserver/pull/6331,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6331#issuecomment-844039102,"The correct media type is defined as ""vnd.mapbox-vector-tile"" (see http://www.iana.org/assignments/media-types/media-types.xhtml)
There was some discussion regarding this in the following mail conversation: https://lists.osgeo.org/pipermail/mapserver-dev/2017-July/015172.html
GeoWebCache (and GeoServer) uses the vnd.mapbox-vector-tile media type. This causes some issues when wanting to use vector tiles generated by Mapserver as it doesn't return the media type that GeoWebCache expects.
Worth to note is that this change might potentially break some existing installations which rely on the application/x-protobuf media type.","Thanks @ravhed I agree that this is an important change.  I also agree with @rouault's feedback about handling both media types, if possible.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6332,2021-05-19T21:48:37Z,2021-05-22T10:44:51Z,2021-05-22T10:45:53Z,MERGED,True,20,287,13,https://github.com/geographika,Mapscript legacy functions cleanup,4,[],https://github.com/mapserver/mapserver/pull/6332,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6332,"This pull request removes various deprecated and legacy functions from the SWIG MapScript API.
MapScript API docs (currently in development) will reflect these changes and are generated from the code as part of RFC 133.
Changes for 8.0 release / migration guide:


getMetaData function removed from mapObj, classObj, and layerObj - metadata can now be accessed as a hashObj property on all these classes, and then modified using hashObj methods.
Example:
map = mapscript.mapObj(map_file)
map.setMetaData(""ows_onlineresource"", ""http://dummy.org/"")
Should be rewritten:
map = mapscript.mapObj(map_file)
map.web.metadata.set(""ows_onlineresource"", ""http://dummy.org/"")


setProcessing removed from the layerObj - use addProcessing instead


saveToString() removed from imageObj - use the write() method instead to write to a file handle. Example in Python:
msimg = self.map.draw()
data = msimg.saveToString()
filename = 'map.png'
fh = open(filename, 'wb')
fh.write(data)
fh.close()
Should be rewritten:
msimg = self.map.draw()
filename = 'map.png'
fh = open(filename, 'wb')
msimg.write(fh)
fh.close()","This pull request removes various deprecated and legacy functions from the SWIG MapScript API.
MapScript API docs (currently in development) will reflect these changes and are generated from the code as part of RFC 133.
Changes for 8.0 release / migration guide:


getMetaData function removed from mapObj, classObj, and layerObj - metadata can now be accessed as a hashObj property on all these classes, and then modified using hashObj methods.
Example:
map = mapscript.mapObj(map_file)
map.setMetaData(""ows_onlineresource"", ""http://dummy.org/"")
Should be rewritten:
map = mapscript.mapObj(map_file)
map.web.metadata.set(""ows_onlineresource"", ""http://dummy.org/"")


setProcessing removed from the layerObj - use addProcessing instead


saveToString() removed from imageObj - use the write() method instead to write to a file handle. Example in Python:
msimg = self.map.draw()
data = msimg.saveToString()
filename = 'map.png'
fh = open(filename, 'wb')
fh.write(data)
fh.close()
Should be rewritten:
msimg = self.map.draw()
filename = 'map.png'
fh = open(filename, 'wb')
msimg.write(fh)
fh.close()",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6333,2021-05-19T23:36:38Z,2021-05-24T17:48:34Z,2021-05-24T17:48:36Z,MERGED,True,1921,2025,22,https://github.com/geographika,"Remove LOG, EXTENT, MAXSCALE, and MINSCALE keywords from WEB object",7,[],https://github.com/mapserver/mapserver/pull/6333,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6333,"Removes LOG as part of RFC 133.
LOG is only used by msCGIWriteLog: 
  
    
      MapServer/mapservutil.c
    
    
         Line 48
      in
      c862b04
    
  
  
    

        
          
           int msCGIWriteLog(mapservObj *mapserv, int show_error) 
        
    
  


This function is only called if the WEB LOG has been set and logs details of the request extent, mode, and layers.
There was a brief mention in RFC 28 about dropping this in 2007.
There are no tests around this code.
Removes MINSCALE and MAXSCALE which were mapped directly to MINSCALEDENOM and MAXSCALEDENOM. msautotests were updated for these.
Removes the EXTENT property from the webObj - this is unused and undocumented.","Removes LOG as part of RFC 133.
LOG is only used by msCGIWriteLog: 
  
    
      MapServer/mapservutil.c
    
    
         Line 48
      in
      c862b04
    
  
  
    

        
          
           int msCGIWriteLog(mapservObj *mapserv, int show_error) 
        
    
  


This function is only called if the WEB LOG has been set and logs details of the request extent, mode, and layers.
There was a brief mention in RFC 28 about dropping this in 2007.
There are no tests around this code.
Removes MINSCALE and MAXSCALE which were mapped directly to MINSCALEDENOM and MAXSCALEDENOM. msautotests were updated for these.
Removes the EXTENT property from the webObj - this is unused and undocumented.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6335,2021-05-21T13:56:14Z,2021-05-21T14:25:54Z,2021-05-21T14:25:54Z,MERGED,True,1,1,1,https://github.com/jmckenna,correct LABEL->PARTIALS default value description,1,[],https://github.com/mapserver/mapserver/pull/6335,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6335,"caught through #6334
credit @mrclBIE & @jratike80","caught through #6334
credit @mrclBIE & @jratike80",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6336,2021-05-22T17:47:24Z,2021-05-23T10:56:49Z,2021-05-23T10:56:50Z,MERGED,True,272,247,47,https://github.com/rouault,Another batch of Coverity scan fixes,61,[],https://github.com/mapserver/mapserver/pull/6336,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6336,"We should be close to the end, as normally all remaining warnings should be adressed... (I'd expect a few ones requiring other follow up fixes though)","We should be close to the end, as normally all remaining warnings should be adressed... (I'd expect a few ones requiring other follow up fixes though)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6336,2021-05-22T17:47:24Z,2021-05-23T10:56:49Z,2021-05-23T10:56:50Z,MERGED,True,272,247,47,https://github.com/rouault,Another batch of Coverity scan fixes,61,[],https://github.com/mapserver/mapserver/pull/6336,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6336#issuecomment-846543468,"We should be close to the end, as normally all remaining warnings should be adressed... (I'd expect a few ones requiring other follow up fixes though)",thanks @rouault !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6337,2021-05-23T11:36:08Z,2021-05-24T17:50:37Z,2021-05-24T17:50:37Z,MERGED,True,131,53,12,https://github.com/geographika,Update doxygen docstrings,6,[],https://github.com/mapserver/mapserver/pull/6337,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6337,"This pull request updates various MapServer functions, classes, and properties visible to SWIG generated bindings as part of RFC 132.","This pull request updates various MapServer functions, classes, and properties visible to SWIG generated bindings as part of RFC 132.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6338,2021-05-23T12:34:20Z,2021-05-24T17:50:54Z,2021-05-24T17:50:54Z,MERGED,True,75,92,3,https://github.com/geographika,Remove unused and undocumented style->position,1,[],https://github.com/mapserver/mapserver/pull/6338,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6338,"Looks like this was added in along with other SYMBOL properties, but is not required. Replaced by OFFSET?","Looks like this was added in along with other SYMBOL properties, but is not required. Replaced by OFFSET?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6339,2021-05-23T21:45:14Z,2021-05-23T22:11:30Z,2021-05-23T22:11:31Z,MERGED,True,31,11,6,https://github.com/rouault,Coverity scan fixes,7,[],https://github.com/mapserver/mapserver/pull/6339,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6339,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6340,2021-05-25T15:59:42Z,2021-05-25T16:37:32Z,2021-05-25T16:37:33Z,MERGED,True,42,5,4,https://github.com/apps/github-actions,[Backport branch-7-6] Try to fallback to using a question mark if a glyph is missing in a font,3,[],https://github.com/mapserver/mapserver/pull/6340,https://github.com/apps/github-actions,1,https://github.com/MapServer/MapServer/pull/6340,"Backport #6324
Authored by: @wicksell","Backport #6324
Authored by: @wicksell",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6341,2021-05-26T08:37:55Z,2021-05-26T11:50:49Z,2021-05-26T12:02:55Z,MERGED,True,3,3,2,https://github.com/PatrikSylve,Set locator and exception code so CITE WFS2 test will pass,3,[],https://github.com/mapserver/mapserver/pull/6341,https://github.com/PatrikSylve,1,https://github.com/MapServer/MapServer/pull/6341,"Sets the locator to ""resourceid"" and exception code to InvalidParameterValue when requested featureid is inconsistent with feature in TYPENAMES.
From the CITE WFS2.0 test description:

If a feature instance identified by the RESOURCEID parameter is not of the type specified by the TYPENAMES parameter, the server shall raise an InvalidParameterValue exception where the ""locator"" attribute value shall be set to ""RESOURCEID"".

http://opengeospatial.github.io/ets-wfs20/apidocs/org/opengis/cite/iso19142/basic/filter/ResourceIdFilterTests.html#inconsistentFeatureIdentifierAndType-javax.xml.namespace.QName-","Sets the locator to ""resourceid"" and exception code to InvalidParameterValue when requested featureid is inconsistent with feature in TYPENAMES.
From the CITE WFS2.0 test description:

If a feature instance identified by the RESOURCEID parameter is not of the type specified by the TYPENAMES parameter, the server shall raise an InvalidParameterValue exception where the ""locator"" attribute value shall be set to ""RESOURCEID"".

http://opengeospatial.github.io/ets-wfs20/apidocs/org/opengis/cite/iso19142/basic/filter/ResourceIdFilterTests.html#inconsistentFeatureIdentifierAndType-javax.xml.namespace.QName-",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6341,2021-05-26T08:37:55Z,2021-05-26T11:50:49Z,2021-05-26T12:02:55Z,MERGED,True,3,3,2,https://github.com/PatrikSylve,Set locator and exception code so CITE WFS2 test will pass,3,[],https://github.com/mapserver/mapserver/pull/6341,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6341#issuecomment-848711491,"Sets the locator to ""resourceid"" and exception code to InvalidParameterValue when requested featureid is inconsistent with feature in TYPENAMES.
From the CITE WFS2.0 test description:

If a feature instance identified by the RESOURCEID parameter is not of the type specified by the TYPENAMES parameter, the server shall raise an InvalidParameterValue exception where the ""locator"" attribute value shall be set to ""RESOURCEID"".

http://opengeospatial.github.io/ets-wfs20/apidocs/org/opengis/cite/iso19142/basic/filter/ResourceIdFilterTests.html#inconsistentFeatureIdentifierAndType-javax.xml.namespace.QName-",thanks for this contribution @PatrikSylve !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6342,2021-05-26T18:27:09Z,2021-06-06T10:19:43Z,2021-06-06T10:19:43Z,MERGED,True,1616,1734,19,https://github.com/geographika,"Remove INTERLACE, IMAGEQUALITY, OPACITY keywords from SCALEBAR, LEGEND and MAP classes",3,[],https://github.com/mapserver/mapserver/pull/6342,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6342,"Removes the following keywords as part of RFC 133
SCALEBAR>INTERLACE
LEGEND>INTERLACE
MAP>INTERLACE
MAP>IMAGEQUALITY
MAP>OPACITY
As a result of this the msApplyOutputFormat function and its calls could be simplified throughout the codebase.
msautotests tests have also been updated.
Initially SCALEBAR>TRANSPARENT and LEGEND>TRANSPARENT were also going to be removed as they have been deprecated since 4.6. However if they are removed it is no longer possible to have a transparent scalebar or legend embedded within a non-transparent map - the OUTPUTFORMAT TRANSPARENT setting is applied to both. I think they should be kept and the deprecated status removed.
The change most likely to impact users is that the following:
TRANSPARENCY 33

or
OPACITY 33

Needs to be rewritten:
  COMPOSITE
    OPACITY 33
  END

We could keep one of the shortcuts if people think it would be more user friendly.
OPACITY leave as a shortcut?","Removes the following keywords as part of RFC 133
SCALEBAR>INTERLACE
LEGEND>INTERLACE
MAP>INTERLACE
MAP>IMAGEQUALITY
MAP>OPACITY
As a result of this the msApplyOutputFormat function and its calls could be simplified throughout the codebase.
msautotests tests have also been updated.
Initially SCALEBAR>TRANSPARENT and LEGEND>TRANSPARENT were also going to be removed as they have been deprecated since 4.6. However if they are removed it is no longer possible to have a transparent scalebar or legend embedded within a non-transparent map - the OUTPUTFORMAT TRANSPARENT setting is applied to both. I think they should be kept and the deprecated status removed.
The change most likely to impact users is that the following:
TRANSPARENCY 33

or
OPACITY 33

Needs to be rewritten:
  COMPOSITE
    OPACITY 33
  END

We could keep one of the shortcuts if people think it would be more user friendly.
OPACITY leave as a shortcut?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6342,2021-05-26T18:27:09Z,2021-06-06T10:19:43Z,2021-06-06T10:19:43Z,MERGED,True,1616,1734,19,https://github.com/geographika,"Remove INTERLACE, IMAGEQUALITY, OPACITY keywords from SCALEBAR, LEGEND and MAP classes",3,[],https://github.com/mapserver/mapserver/pull/6342,https://github.com/dmorissette,2,https://github.com/MapServer/MapServer/pull/6342#issuecomment-849894750,"Removes the following keywords as part of RFC 133
SCALEBAR>INTERLACE
LEGEND>INTERLACE
MAP>INTERLACE
MAP>IMAGEQUALITY
MAP>OPACITY
As a result of this the msApplyOutputFormat function and its calls could be simplified throughout the codebase.
msautotests tests have also been updated.
Initially SCALEBAR>TRANSPARENT and LEGEND>TRANSPARENT were also going to be removed as they have been deprecated since 4.6. However if they are removed it is no longer possible to have a transparent scalebar or legend embedded within a non-transparent map - the OUTPUTFORMAT TRANSPARENT setting is applied to both. I think they should be kept and the deprecated status removed.
The change most likely to impact users is that the following:
TRANSPARENCY 33

or
OPACITY 33

Needs to be rewritten:
  COMPOSITE
    OPACITY 33
  END

We could keep one of the shortcuts if people think it would be more user friendly.
OPACITY leave as a shortcut?",FWIW I agree with keeping  SCALEBAR>TRANSPARENT and LEGEND>TRANSPARENT  since there are no alternatives at the moment and those settings are useful in real life.,True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6342,2021-05-26T18:27:09Z,2021-06-06T10:19:43Z,2021-06-06T10:19:43Z,MERGED,True,1616,1734,19,https://github.com/geographika,"Remove INTERLACE, IMAGEQUALITY, OPACITY keywords from SCALEBAR, LEGEND and MAP classes",3,[],https://github.com/mapserver/mapserver/pull/6342,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/6342#issuecomment-855374482,"Removes the following keywords as part of RFC 133
SCALEBAR>INTERLACE
LEGEND>INTERLACE
MAP>INTERLACE
MAP>IMAGEQUALITY
MAP>OPACITY
As a result of this the msApplyOutputFormat function and its calls could be simplified throughout the codebase.
msautotests tests have also been updated.
Initially SCALEBAR>TRANSPARENT and LEGEND>TRANSPARENT were also going to be removed as they have been deprecated since 4.6. However if they are removed it is no longer possible to have a transparent scalebar or legend embedded within a non-transparent map - the OUTPUTFORMAT TRANSPARENT setting is applied to both. I think they should be kept and the deprecated status removed.
The change most likely to impact users is that the following:
TRANSPARENCY 33

or
OPACITY 33

Needs to be rewritten:
  COMPOSITE
    OPACITY 33
  END

We could keep one of the shortcuts if people think it would be more user friendly.
OPACITY leave as a shortcut?",Merging as-is. OPACITY can be added back as a shortcut easily enough if this becomes an issue during 8.0 beta-testing.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6343,2021-05-28T16:53:34Z,2021-06-06T10:20:26Z,2021-06-06T10:20:30Z,MERGED,True,52,48,10,https://github.com/geographika,Remove BACKGROUNDCOLOR from STYLE object,4,[],https://github.com/mapserver/mapserver/pull/6343,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6343,"Removes STYLE>BACKGROUNDCOLOR as part of RFC 133
Remaining usage of BACKGROUNDCOLOR was in the autogeneration of styles from OGR in mapogr.cpp. This required reworking the function to produce 2 style objects, and keep the current ordering logic for PenBrush styles. msautotests all passing with same results as previously.","Removes STYLE>BACKGROUNDCOLOR as part of RFC 133
Remaining usage of BACKGROUNDCOLOR was in the autogeneration of styles from OGR in mapogr.cpp. This required reworking the function to produce 2 style objects, and keep the current ordering logic for PenBrush styles. msautotests all passing with same results as previously.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6344,2021-06-02T06:19:42Z,2021-06-07T07:03:15Z,2021-06-07T07:03:16Z,CLOSED,False,6,0,1,https://github.com/JelmerBaas,Added loadParamsFromPost to owsrequest,1,[],https://github.com/mapserver/mapserver/pull/6344,https://github.com/JelmerBaas,1,https://github.com/MapServer/MapServer/pull/6344,"As discussed with Seth Girvin, I need a way to add the (XML) POST to MapScript. Not too sure this is the right way, to be honest.","As discussed with Seth Girvin, I need a way to add the (XML) POST to MapScript. Not too sure this is the right way, to be honest.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6344,2021-06-02T06:19:42Z,2021-06-07T07:03:15Z,2021-06-07T07:03:16Z,CLOSED,False,6,0,1,https://github.com/JelmerBaas,Added loadParamsFromPost to owsrequest,1,[],https://github.com/mapserver/mapserver/pull/6344,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/6344#issuecomment-853413369,"As discussed with Seth Girvin, I need a way to add the (XML) POST to MapScript. Not too sure this is the right way, to be honest.","@JelmerBaas - do you have an example of how you are setting up the request and calling it?
I've tried the above in Python MapScript but only get back:
Content-Type: text/html

No query information to decode. QUERY_STRING not set.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6344,2021-06-02T06:19:42Z,2021-06-07T07:03:15Z,2021-06-07T07:03:16Z,CLOSED,False,6,0,1,https://github.com/JelmerBaas,Added loadParamsFromPost to owsrequest,1,[],https://github.com/mapserver/mapserver/pull/6344,https://github.com/JelmerBaas,3,https://github.com/MapServer/MapServer/pull/6344#issuecomment-853838940,"As discussed with Seth Girvin, I need a way to add the (XML) POST to MapScript. Not too sure this is the right way, to be honest.","@geographika I'm afraid I really don't have enough knowledge about MapScript to properly fix this, I was hoping this was a kickoff to get the ball rolling, so to speak. I'm not able to run this in development environment, so this fix was theoretical.
My intention was to be able to call the above function with a piece of XML like:
<GetFeature xmlns=""http://www.opengis.net/wfs/2.0"" service=""WFS"" version=""2.0.0"" outputFormat=""application/json"" xsi:schemaLocation=""http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""><Query typeNames=""ms:TESTLAYER"" srsName=""EPSG:28992""><Filter xmlns=""http://www.opengis.net/fes/2.0""><BBOX><ValueReference>msGeometry</ValueReference><Envelope xmlns=""http://www.opengis.net/gml/3.2"" srsName=""EPSG:28992""><lowerCorner>167016.28014822732 434916.731241878</lowerCorner><upperCorner>178823.06489140834 442183.4781657243</upperCorner></Envelope></BBOX></Filter></Query></GetFeature>
But I guess there's a check I didn't see. The chance itself should be fairly straight-forward, but help would be greatly appreciated.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6344,2021-06-02T06:19:42Z,2021-06-07T07:03:15Z,2021-06-07T07:03:16Z,CLOSED,False,6,0,1,https://github.com/JelmerBaas,Added loadParamsFromPost to owsrequest,1,[],https://github.com/mapserver/mapserver/pull/6344,https://github.com/geographika,4,https://github.com/MapServer/MapServer/pull/6344#issuecomment-855651398,"As discussed with Seth Girvin, I need a way to add the (XML) POST to MapScript. Not too sure this is the right way, to be honest.","@JelmerBaas - #6345 builds on this, and includes a working Python test. The same approach should be available in C# on that branch.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6345,2021-06-06T10:14:21Z,2021-06-07T09:35:04Z,2021-06-07T09:35:04Z,MERGED,True,83,10,4,https://github.com/geographika,Allow POST requests from MapsScript,7,[],https://github.com/mapserver/mapserver/pull/6345,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6345,"The following adds in POST request functionality from within MapScript via a new loadParamsFromPost method. Related to #6344.
Note - this will allow POST data to be passed as a string via MapScript, but does not support reading from a buffer.
The only change to existing CGI functionality is allowing request->contenttype to be set directly on a request object rather than always reading from the CGI environment.
Associated Python test added to the test suite, which can also serve as an example.","The following adds in POST request functionality from within MapScript via a new loadParamsFromPost method. Related to #6344.
Note - this will allow POST data to be passed as a string via MapScript, but does not support reading from a buffer.
The only change to existing CGI functionality is allowing request->contenttype to be set directly on a request object rather than always reading from the CGI environment.
Associated Python test added to the test suite, which can also serve as an example.",True,{'THUMBS_UP': ['https://github.com/JelmerBaas']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6345,2021-06-06T10:14:21Z,2021-06-07T09:35:04Z,2021-06-07T09:35:04Z,MERGED,True,83,10,4,https://github.com/geographika,Allow POST requests from MapsScript,7,[],https://github.com/mapserver/mapserver/pull/6345,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/6345#issuecomment-855451205,"The following adds in POST request functionality from within MapScript via a new loadParamsFromPost method. Related to #6344.
Note - this will allow POST data to be passed as a string via MapScript, but does not support reading from a buffer.
The only change to existing CGI functionality is allowing request->contenttype to be set directly on a request object rather than always reading from the CGI environment.
Associated Python test added to the test suite, which can also serve as an example.","The ASan (Address Sanitizer) is failing in Travis for most of the OWS msautotests with this pull request, although pass successfully without ASan.
What is the best way to go about debugging these? memory leaks are mentioned in the logs, but not many further details (it says ASan logs are not empty but I don't know how these could be accessed). I'm guessing it is to do with the change to ows_request->service but I've tried a few approaches without any luck.
Is it possible to add ASan to the vagrant builds?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6345,2021-06-06T10:14:21Z,2021-06-07T09:35:04Z,2021-06-07T09:35:04Z,MERGED,True,83,10,4,https://github.com/geographika,Allow POST requests from MapsScript,7,[],https://github.com/mapserver/mapserver/pull/6345,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/6345#issuecomment-855456572,"The following adds in POST request functionality from within MapScript via a new loadParamsFromPost method. Related to #6344.
Note - this will allow POST data to be passed as a string via MapScript, but does not support reading from a buffer.
The only change to existing CGI functionality is allowing request->contenttype to be set directly on a request object rather than always reading from the CGI environment.
Associated Python test added to the test suite, which can also serve as an example.","Is it possible to add ASan to the vagrant builds?

we could, but you will get better diagnostics by running the process under Valgrind",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6345,2021-06-06T10:14:21Z,2021-06-07T09:35:04Z,2021-06-07T09:35:04Z,MERGED,True,83,10,4,https://github.com/geographika,Allow POST requests from MapsScript,7,[],https://github.com/mapserver/mapserver/pull/6345,https://github.com/geographika,4,https://github.com/MapServer/MapServer/pull/6345#issuecomment-855644683,"The following adds in POST request functionality from within MapScript via a new loadParamsFromPost method. Related to #6344.
Note - this will allow POST data to be passed as a string via MapScript, but does not support reading from a buffer.
The only change to existing CGI functionality is allowing request->contenttype to be set directly on a request object rather than always reading from the CGI environment.
Associated Python test added to the test suite, which can also serve as an example.","Thanks @rouault. I installed valgrind to the vagrant VM (sudo apt-get install valgrind), and then ran the msautotests with pytest --valgrind.
Results did point to the modified msOWSPreParseRequest function:
mapserver\msautotest\wxs\result\wcs_20_cap_inspire_embed.xml.vgrind.txt.txt:
==29045== 4 bytes in 1 blocks are definitely lost in loss record 2 of 240
==29045==    at 0x4C31B0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==29045==    by 0x8E0C0BC: xmlStrdup (in /usr/lib/x86_64-linux-gnu/libxml2.so.2.9.4)
==29045==    by 0x4EAEC82: msOWSPreParseRequest (mapows.c:179)
==29045==    by 0x4EAEC82: msOWSDispatch (mapows.c:258)
==29045==    by 0x4EB7BAC: msCGIDispatchRequest (mapservutil.c:1682)
==29045==    by 0x109052: main (mapserv.c:296)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6346,2021-06-08T14:30:15Z,2021-06-09T11:40:31Z,2021-06-09T11:40:31Z,MERGED,True,33,17,5,https://github.com/rouault,Raster classification: better take into account DATARANGE (fixes #6287),1,[],https://github.com/mapserver/mapserver/pull/6346,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6346,"In 8 bit mode, when there was a single STYLE with DATARANGE/COLORRANGE,
it was used even for values outside of DATARANGE, which seems
inappropriate
In 16 bit mode, there was no check on the DATARANGE. So if several
STYLE were defined in the CLASS, only the first one was taken into
account.","In 8 bit mode, when there was a single STYLE with DATARANGE/COLORRANGE,
it was used even for values outside of DATARANGE, which seems
inappropriate
In 16 bit mode, there was no check on the DATARANGE. So if several
STYLE were defined in the CLASS, only the first one was taken into
account.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6346,2021-06-08T14:30:15Z,2021-06-09T11:40:31Z,2021-06-09T11:40:31Z,MERGED,True,33,17,5,https://github.com/rouault,Raster classification: better take into account DATARANGE (fixes #6287),1,[],https://github.com/mapserver/mapserver/pull/6346,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6346#issuecomment-856827007,"In 8 bit mode, when there was a single STYLE with DATARANGE/COLORRANGE,
it was used even for values outside of DATARANGE, which seems
inappropriate
In 16 bit mode, there was no check on the DATARANGE. So if several
STYLE were defined in the CLASS, only the first one was taken into
account.",Thanks for this change @rouault Do you think we should also include a test for this case?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6346,2021-06-08T14:30:15Z,2021-06-09T11:40:31Z,2021-06-09T11:40:31Z,MERGED,True,33,17,5,https://github.com/rouault,Raster classification: better take into account DATARANGE (fixes #6287),1,[],https://github.com/mapserver/mapserver/pull/6346,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/6346#issuecomment-856836133,"In 8 bit mode, when there was a single STYLE with DATARANGE/COLORRANGE,
it was used even for values outside of DATARANGE, which seems
inappropriate
In 16 bit mode, there was no check on the DATARANGE. So if several
STYLE were defined in the CLASS, only the first one was taken into
account.","Do you think we should also include a test for this case?

I'll adjust existing test(s)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6346,2021-06-08T14:30:15Z,2021-06-09T11:40:31Z,2021-06-09T11:40:31Z,MERGED,True,33,17,5,https://github.com/rouault,Raster classification: better take into account DATARANGE (fixes #6287),1,[],https://github.com/mapserver/mapserver/pull/6346,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/6346#issuecomment-856841312,"In 8 bit mode, when there was a single STYLE with DATARANGE/COLORRANGE,
it was used even for values outside of DATARANGE, which seems
inappropriate
In 16 bit mode, there was no check on the DATARANGE. So if several
STYLE were defined in the CLASS, only the first one was taken into
account.","I'll adjust existing test(s)

commit amended with updated tests demonstrating the fixed behaviour",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6346,2021-06-08T14:30:15Z,2021-06-09T11:40:31Z,2021-06-09T11:40:31Z,MERGED,True,33,17,5,https://github.com/rouault,Raster classification: better take into account DATARANGE (fixes #6287),1,[],https://github.com/mapserver/mapserver/pull/6346,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/6346#issuecomment-856845352,"In 8 bit mode, when there was a single STYLE with DATARANGE/COLORRANGE,
it was used even for values outside of DATARANGE, which seems
inappropriate
In 16 bit mode, there was no check on the DATARANGE. So if several
STYLE were defined in the CLASS, only the first one was taken into
account.",thanks @rouault !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6347,2021-06-08T15:47:49Z,2021-06-09T11:41:06Z,2021-06-28T22:22:21Z,MERGED,True,162,7,6,https://github.com/rouault,"PostGIS: use ST_Intersects instead of && for bounding box (fixes #6181, fixes #6230)",2,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6347,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6347,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6347,2021-06-08T15:47:49Z,2021-06-09T11:41:06Z,2021-06-28T22:22:21Z,MERGED,True,162,7,6,https://github.com/rouault,"PostGIS: use ST_Intersects instead of && for bounding box (fixes #6181, fixes #6230)",2,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6347,https://github.com/apps/github-actions,2,https://github.com/MapServer/MapServer/pull/6347#issuecomment-857623382,,"The backport to branch-7-6 failed:
The process '/usr/bin/git' failed with exit code 1

To backport manually, run these commands in your terminal:
# Fetch latest updates from GitHub
git fetch
# Create a new working tree
git worktree add .worktrees/backport-branch-7-6 branch-7-6
# Navigate to the new working tree
cd .worktrees/backport-branch-7-6
# Create a new branch
git switch --create backport-6347-to-branch-7-6
# Cherry-pick the merged commit of this pull request and resolve the conflicts
git cherry-pick 40f310f5d6591e06c3997ace8648c0a8a1f74229,bd6b73a71567c1272d5e758265e1e921f5d7dce6
# Push it to GitHub
git push --set-upstream origin backport-6347-to-branch-7-6
# Go back to the original working tree
cd ../..
# Delete the working tree
git worktree remove .worktrees/backport-branch-7-6
Then, create a pull request where the base branch is branch-7-6 and the compare/head branch is backport-6347-to-branch-7-6.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6347,2021-06-08T15:47:49Z,2021-06-09T11:41:06Z,2021-06-28T22:22:21Z,MERGED,True,162,7,6,https://github.com/rouault,"PostGIS: use ST_Intersects instead of && for bounding box (fixes #6181, fixes #6230)",2,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6347,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/6347#issuecomment-866258986,,"I'm not positive on this but I was trying branch-7-6 in production and ran into some weirdness with mode=nquery and PostGIS layers. I was doing point queries on polygon layers and experiencing inconsistent results across multiple layers - some features would return as a result and some wouldn't. Reverting to the 7.6.3 release fixed things. This looks to be the only addition that could affect those operations but it's not obvious to me why. I'll have to try and narrow it down. Is there anything that might be specific to PostGIS version with this change?
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6347,2021-06-08T15:47:49Z,2021-06-09T11:41:06Z,2021-06-28T22:22:21Z,MERGED,True,162,7,6,https://github.com/rouault,"PostGIS: use ST_Intersects instead of && for bounding box (fixes #6181, fixes #6230)",2,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6347,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/6347#issuecomment-866327478,,"I'm not aware of PostGIS version making a difference for ST_Intersection(), but one thing I noticed is that ST_Intersection() was more picky about SRID than &&. I had to do https://github.com/MapServer/MapServer/blob/main/mappostgis.cpp#L1824 because of that",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6347,2021-06-08T15:47:49Z,2021-06-09T11:41:06Z,2021-06-28T22:22:21Z,MERGED,True,162,7,6,https://github.com/rouault,"PostGIS: use ST_Intersects instead of && for bounding box (fixes #6181, fixes #6230)",2,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6347,https://github.com/sdlime,5,https://github.com/MapServer/MapServer/pull/6347#issuecomment-866330394,,"I'll try and put together a simple test case. I do have a repeatable example where with 7.6.3 things work as expected but fail with the current 7.6 branch. I need to simplify it...

From: Even Rouault ***@***.***>
Sent: Tuesday, June 22, 2021 3:56 PM
To: MapServer/MapServer ***@***.***>
Cc: Lime, Steve D (MNIT) ***@***.***>; Comment ***@***.***>
Subject: Re: [MapServer/MapServer] PostGIS: use ST_Intersects instead of && for bounding box (fixes #6181, fixes #6230) (#6347)

This message may be from an external email source.
Do not select links or open attachments unless verified. Report all suspicious emails to Minnesota IT Services Security Operations Center.
…
________________________________

I'm not aware of PostGIS version making a difference for ST_Intersection(), but one thing I noticed is that ST_Intersection() was more picky about SRID than &&. I had to do https://github.com/MapServer/MapServer/blob/main/mappostgis.cpp#L1824<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FMapServer%2FMapServer%2Fblob%2Fmain%2Fmappostgis.cpp%23L1824&data=04%7C01%7Csteve.lime%40state.mn.us%7C7a097a686fa84b468e4c08d935c0312a%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637599921851156422%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=KHhwBWXQxx1xr3xrgriKPY2xsrphZHArTyqLUotN8Ik%3D&reserved=0> because of that

-
You are receiving this because you commented.
Reply to this email directly, view it on GitHub<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FMapServer%2FMapServer%2Fpull%2F6347%23issuecomment-866327478&data=04%7C01%7Csteve.lime%40state.mn.us%7C7a097a686fa84b468e4c08d935c0312a%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637599921851156422%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=E3GwXDJbR8rGo6PjaJ19gzYiqHv%2BbTg5psUG2U7xOL4%3D&reserved=0>, or unsubscribe<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAAMGN64EM7MZPA6UR67FBALTUD2HLANCNFSM46KHRRPA&data=04%7C01%7Csteve.lime%40state.mn.us%7C7a097a686fa84b468e4c08d935c0312a%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637599921851166377%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=WSMCoP5W5SZjK0b3wya9wVjZ0PwjvHWMyIVjsWBKRV4%3D&reserved=0>.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6347,2021-06-08T15:47:49Z,2021-06-09T11:41:06Z,2021-06-28T22:22:21Z,MERGED,True,162,7,6,https://github.com/rouault,"PostGIS: use ST_Intersects instead of && for bounding box (fixes #6181, fixes #6230)",2,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6347,https://github.com/sdlime,6,https://github.com/MapServer/MapServer/pull/6347#issuecomment-870002856,,"Hi Even: Back at this and with debugging on with point queries the SQL that gets generated looks something like:
select ""objectid""::text,""dowlknum""::text,""lake_name""::text,""lakefinder""::text,ST_AsBinary((""shape""),'NDR') as geom,""objectid""::text from (SELECT shape, objectid, dowlknum, map_label AS lake_name, in_lakefinder AS lakefinder FROM gdrs.dnr_hydro
_features_compass WHERE map_display='Y' AND map_label != '') as foo where ST_Intersects(""shape"", ST_GeomFromText('POLYGON((440050.852933846 5129741.71595332,440050.852933846 5129741.71595332,440050.852933846 5129741.71595332,440050.852933846 5129741.71595332,440050.852933846 5129741.71595332))',26915))

The bounding box is actually just a point in these cases (xmin=xmax, ymin=ymax) which never caused problems. In this case the  resulting POLYGON has the same issue where all points in the geometry are the same. The ST_Intersects() function seems to be indeterminate in this case - sometimes it works, sometimes it doesn't.
If I edit the SQL and turn the POLYGON into a POINT, so:
select ""objectid""::text,""dowlknum""::text,""lake_name""::text,""lakefinder""::text,ST_AsBinary((""shape""),'NDR') as geom,""objectid""::text from 
(SELECT shape, objectid, dowlknum, map_label AS lake_name, in_lakefinder AS lakefinder FROM gdrs.dnr_hydro_features_compass WHERE map_display='Y' AND map_label != '') as foo 
where ST_Intersects(""shape"", ST_GeomFromText('POINT(440050.852933846 5129741.71595332)',26915))

then the correct feature is found.
--Steve
BTW the MapServer call looks like:
mapserv ""QUERY_STRING=map=test.map&mode=nquery&mapxy=440050.852933846+5129741.71595332&layers=state%20lake""",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6347,2021-06-08T15:47:49Z,2021-06-09T11:41:06Z,2021-06-28T22:22:21Z,MERGED,True,162,7,6,https://github.com/rouault,"PostGIS: use ST_Intersects instead of && for bounding box (fixes #6181, fixes #6230)",2,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6347,https://github.com/rouault,7,https://github.com/MapServer/MapServer/pull/6347#issuecomment-870085645,,"Hi Even: Back at this and with debugging on with point queries the SQL that gets generated looks something like:

should be fixed per #6354",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6348,2021-06-09T11:58:43Z,2021-06-10T18:03:54Z,2021-06-10T18:03:54Z,MERGED,True,161,7,6,https://github.com/rouault,"[Backport 7.6] PostGIS: use ST_Intersects instead of && for bounding box (fixes #6181, fixes #6230) ",2,[],https://github.com/mapserver/mapserver/pull/6348,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6348,Backport of #6347,Backport of #6347,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6349,2021-06-09T16:01:06Z,2021-06-09T18:59:09Z,2021-06-09T18:59:09Z,MERGED,True,84,38,3,https://github.com/rouault,[PostGIS]: only trim trailing blanks from CHAR(n) fields (fixes #6292),1,[],https://github.com/mapserver/mapserver/pull/6349,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6349,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6349,2021-06-09T16:01:06Z,2021-06-09T18:59:09Z,2021-06-09T18:59:09Z,MERGED,True,84,38,3,https://github.com/rouault,[PostGIS]: only trim trailing blanks from CHAR(n) fields (fixes #6292),1,[],https://github.com/mapserver/mapserver/pull/6349,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6349#issuecomment-857984227,,Nice... +1,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6350,2021-06-09T16:49:45Z,2021-06-10T18:04:02Z,2021-06-10T18:04:02Z,MERGED,True,21,1,3,https://github.com/rouault,FLTGetSpatialComparisonCommonExpression(): avoid nullptr deref on invalid geometry (relates to #6176),1,[],https://github.com/mapserver/mapserver/pull/6350,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6350,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6351,2021-06-16T23:00:12Z,2021-06-17T14:36:00Z,2021-06-17T14:36:00Z,MERGED,True,1,1,1,https://github.com/jmckenna,update IRC channel for build notifications,1,[],https://github.com/mapserver/mapserver/pull/6351,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6351,"most communities have moved to irc.libera.chat
recently Freenode servers & channels were reset. Future there is unknown.","most communities have moved to irc.libera.chat
recently Freenode servers & channels were reset. Future there is unknown.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6352,2021-06-22T17:33:49Z,2021-06-23T12:43:23Z,2021-06-23T12:43:23Z,MERGED,True,110,1,3,https://github.com/rouault,WMS: make attribute color binding work with FILTER vendor parameter (fixes #6200),1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6352,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6352,"@sdlime The root cause of the issue was due to the !MS_DRAW_QUERY(drawmode)) test in 
  
    
      MapServer/maputil.c
    
    
         Line 157
      in
      18d3a67
    
  
  
    

        
          
           if(style->bindings[MS_STYLE_BINDING_COLOR].index != -1 && !MS_DRAW_QUERY(drawmode)) { 
        
    
  

 that prevented the attribute binding to be resolved, since WMS FILTER relies on querymap rendering. I'm not completely sure why this test was there, but I suspect it only applies to the STYLE hilite mode describe in https://mapserver.org/mapfile/querymap.html . Hence my proposed fix which adds the MS_DRAWMODE_QUERY flag only in hilite mode, and not in the selected mode used by WMS FILTER.","@sdlime The root cause of the issue was due to the !MS_DRAW_QUERY(drawmode)) test in 
  
    
      MapServer/maputil.c
    
    
         Line 157
      in
      18d3a67
    
  
  
    

        
          
           if(style->bindings[MS_STYLE_BINDING_COLOR].index != -1 && !MS_DRAW_QUERY(drawmode)) { 
        
    
  

 that prevented the attribute binding to be resolved, since WMS FILTER relies on querymap rendering. I'm not completely sure why this test was there, but I suspect it only applies to the STYLE hilite mode describe in https://mapserver.org/mapfile/querymap.html . Hence my proposed fix which adds the MS_DRAWMODE_QUERY flag only in hilite mode, and not in the selected mode used by WMS FILTER.",True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6352,2021-06-22T17:33:49Z,2021-06-23T12:43:23Z,2021-06-23T12:43:23Z,MERGED,True,110,1,3,https://github.com/rouault,WMS: make attribute color binding work with FILTER vendor parameter (fixes #6200),1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6352,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6352#issuecomment-866802493,"@sdlime The root cause of the issue was due to the !MS_DRAW_QUERY(drawmode)) test in 
  
    
      MapServer/maputil.c
    
    
         Line 157
      in
      18d3a67
    
  
  
    

        
          
           if(style->bindings[MS_STYLE_BINDING_COLOR].index != -1 && !MS_DRAW_QUERY(drawmode)) { 
        
    
  

 that prevented the attribute binding to be resolved, since WMS FILTER relies on querymap rendering. I'm not completely sure why this test was there, but I suspect it only applies to the STYLE hilite mode describe in https://mapserver.org/mapfile/querymap.html . Hence my proposed fix which adds the MS_DRAWMODE_QUERY flag only in hilite mode, and not in the selected mode used by WMS FILTER.","Thanks @rouault !
I believe this fix can be backported.  Let's see...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6353,2021-06-23T12:43:46Z,2021-06-24T17:51:54Z,2021-06-24T17:51:54Z,MERGED,True,110,1,3,https://github.com/apps/github-actions,[Backport branch-7-6] WMS: make attribute color binding work with FILTER vendor parameter (fixes #6200),1,[],https://github.com/mapserver/mapserver/pull/6353,https://github.com/apps/github-actions,1,https://github.com/MapServer/MapServer/pull/6353,"Backport #6352
Authored by: @rouault","Backport #6352
Authored by: @rouault",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6354,2021-06-28T22:21:58Z,2021-06-29T09:16:08Z,2021-07-13T20:27:21Z,MERGED,True,12,4,1,https://github.com/rouault,PostGIS: fix ST_Intersects() with bounding box that is a point...,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6354,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6354,"(follow-up of fixes #6181, fixes #6230) (fixes #6347 (comment))
The code path is exercised at least by tests in msautotest/query/query_postgis.map","(follow-up of fixes #6181, fixes #6230) (fixes #6347 (comment))
The code path is exercised at least by tests in msautotest/query/query_postgis.map",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6354,2021-06-28T22:21:58Z,2021-06-29T09:16:08Z,2021-07-13T20:27:21Z,MERGED,True,12,4,1,https://github.com/rouault,PostGIS: fix ST_Intersects() with bounding box that is a point...,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6354,https://github.com/apps/github-actions,2,https://github.com/MapServer/MapServer/pull/6354#issuecomment-870426283,"(follow-up of fixes #6181, fixes #6230) (fixes #6347 (comment))
The code path is exercised at least by tests in msautotest/query/query_postgis.map","The backport to branch-7-6 failed:
The process '/usr/bin/git' failed with exit code 1

To backport manually, run these commands in your terminal:
# Fetch latest updates from GitHub
git fetch
# Create a new working tree
git worktree add .worktrees/backport-branch-7-6 branch-7-6
# Navigate to the new working tree
cd .worktrees/backport-branch-7-6
# Create a new branch
git switch --create backport-6354-to-branch-7-6
# Cherry-pick the merged commit of this pull request and resolve the conflicts
git cherry-pick 393d28bca1470ac24e55e3358061ad3b6aa530b2
# Push it to GitHub
git push --set-upstream origin backport-6354-to-branch-7-6
# Go back to the original working tree
cd ../..
# Delete the working tree
git worktree remove .worktrees/backport-branch-7-6
Then, create a pull request where the base branch is branch-7-6 and the compare/head branch is backport-6354-to-branch-7-6.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6354,2021-06-28T22:21:58Z,2021-06-29T09:16:08Z,2021-07-13T20:27:21Z,MERGED,True,12,4,1,https://github.com/rouault,PostGIS: fix ST_Intersects() with bounding box that is a point...,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6354,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/6354#issuecomment-870633207,"(follow-up of fixes #6181, fixes #6230) (fixes #6347 (comment))
The code path is exercised at least by tests in msautotest/query/query_postgis.map",I can confirm the changed fixed the issue I was seeing on my end. --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6355,2021-06-29T09:28:06Z,2021-06-29T09:55:03Z,2021-07-09T19:18:26Z,MERGED,True,13,6,1,https://github.com/rouault,[Backport 7.6] PostGIS: fix ST_Intersects() with bounding box that is a point ,1,[],https://github.com/mapserver/mapserver/pull/6355,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6355,"(follow-up of fixes #6181, fixes #6230) (fixes #6347 (comment))
Backport of PR #6354","(follow-up of fixes #6181, fixes #6230) (fixes #6347 (comment))
Backport of PR #6354",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6355,2021-06-29T09:28:06Z,2021-06-29T09:55:03Z,2021-07-09T19:18:26Z,MERGED,True,13,6,1,https://github.com/rouault,[Backport 7.6] PostGIS: fix ST_Intersects() with bounding box that is a point ,1,[],https://github.com/mapserver/mapserver/pull/6355,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6355#issuecomment-877290417,"(follow-up of fixes #6181, fixes #6230) (fixes #6347 (comment))
Backport of PR #6354","Just a FYI. Ran into another regression that seems like it might be related. Will create a ticket when I can isolate the problem more...
Ok, a little more. In my case the ""shape"" that ultimately gets intersected with the bounding box is created using ST_Collect(), so there's a ""GROUP BY"" and then an aggregation using ST_Collect().
The new bounding box check ST_Intersects(""shape"", ST_GeomFromText('POLYGON((125000 4785000,125000 5489000,789000 5489000,789000 4785000,125000 4785000))',26915)) fails against that geometry with an error like:
ERROR:  Relate Operation called with a LWGEOMCOLLECTION type.  This is unsupported.
HINT:  Change argument 1: 'GEOMETRYCOLLECTION(MULTILINESTRING((515124.6335 5277837.6223,515130.0913 5277...'
SQL state: XX000

The old bounding box check ""shape"" && ST_GeomFromText('POLYGON((125000 4785000,125000 5489000,789000 5489000,789000 4785000,125000 4785000))',26915) works as expected.
This might not be something that can be addressed in the code but I suspect that other users might be using aggregation functions that might break as a result of the change.
--Steve",True,{'THUMBS_UP': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6355,2021-06-29T09:28:06Z,2021-06-29T09:55:03Z,2021-07-09T19:18:26Z,MERGED,True,13,6,1,https://github.com/rouault,[Backport 7.6] PostGIS: fix ST_Intersects() with bounding box that is a point ,1,[],https://github.com/mapserver/mapserver/pull/6355,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/6355#issuecomment-877329332,"(follow-up of fixes #6181, fixes #6230) (fixes #6347 (comment))
Backport of PR #6354",Note that if I switch ST_Collect() to ST_Union() the error goes away - but at a performance cost.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6355,2021-06-29T09:28:06Z,2021-06-29T09:55:03Z,2021-07-09T19:18:26Z,MERGED,True,13,6,1,https://github.com/rouault,[Backport 7.6] PostGIS: fix ST_Intersects() with bounding box that is a point ,1,[],https://github.com/mapserver/mapserver/pull/6355,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/6355#issuecomment-877330801,"(follow-up of fixes #6181, fixes #6230) (fixes #6347 (comment))
Backport of PR #6354","Should we wait to release 7.6.4, for this fix?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6355,2021-06-29T09:28:06Z,2021-06-29T09:55:03Z,2021-07-09T19:18:26Z,MERGED,True,13,6,1,https://github.com/rouault,[Backport 7.6] PostGIS: fix ST_Intersects() with bounding box that is a point ,1,[],https://github.com/mapserver/mapserver/pull/6355,https://github.com/sdlime,5,https://github.com/MapServer/MapServer/pull/6355#issuecomment-877341431,"(follow-up of fixes #6181, fixes #6230) (fixes #6347 (comment))
Backport of PR #6354","Should we wait to release 7.6.4, for this fix?

I don't know, but it is a regression. The issue, more generally, is that a GeometryCollection fails. In my case I'm just doing a query to generate a light JSON response so I don't use the resulting geometry for anything (e.g. drawing or outputting geometries) so the actual type (GeometryCollection vs MultiLinestring) doesn't matter. We're using PostGIS 2.4 and it looks like this is no longer an issue in version 2.5.
Perhaps a note to -dev to see what folks think.
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6355,2021-06-29T09:28:06Z,2021-06-29T09:55:03Z,2021-07-09T19:18:26Z,MERGED,True,13,6,1,https://github.com/rouault,[Backport 7.6] PostGIS: fix ST_Intersects() with bounding box that is a point ,1,[],https://github.com/mapserver/mapserver/pull/6355,https://github.com/rouault,6,https://github.com/MapServer/MapServer/pull/6355#issuecomment-877344475,"(follow-up of fixes #6181, fixes #6230) (fixes #6347 (comment))
Backport of PR #6354","@sdlime Does the following fix your issue ? (it is likely not sufficient if the geometry collection contains heterogenous single geometry types)
diff --git a/mappostgis.cpp b/mappostgis.cpp
index 0ce749a04..342bcfd4e 100644
--- a/mappostgis.cpp
+++ b/mappostgis.cpp
@@ -1902,9 +1902,9 @@ static std::string msPostGISBuildSQLWhere(layerObj *layer, const rectObj *rect,
         // otherwise if find_srid() would return 0, ST_Intersects() would not
         // work at all, which breaks the msautotest/query/query_postgis.map
         // tests, releated to bdry_counpy2 layer that has no SRID
-        strRect = ""ST_Intersects(\"""";
+        strRect = ""ST_Intersects(ST_CollectionHomogenize(\"""";
         strRect += layerinfo->geomcolumn;
-        strRect += ""\"", "";
+        strRect += ""\""), "";
         strRect += strBox;
         strRect += ')';
     }",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6355,2021-06-29T09:28:06Z,2021-06-29T09:55:03Z,2021-07-09T19:18:26Z,MERGED,True,13,6,1,https://github.com/rouault,[Backport 7.6] PostGIS: fix ST_Intersects() with bounding box that is a point ,1,[],https://github.com/mapserver/mapserver/pull/6355,https://github.com/rouault,7,https://github.com/MapServer/MapServer/pull/6355#issuecomment-877348681,"(follow-up of fixes #6181, fixes #6230) (fixes #6347 (comment))
Backport of PR #6354","That said I'm concerned it might prevent PostGIS from using its spatial index... We should probably check if the geometry column is a true geometry column, and if so use ST_Intersects(), and if not probably add a && filter in addition",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6355,2021-06-29T09:28:06Z,2021-06-29T09:55:03Z,2021-07-09T19:18:26Z,MERGED,True,13,6,1,https://github.com/rouault,[Backport 7.6] PostGIS: fix ST_Intersects() with bounding box that is a point ,1,[],https://github.com/mapserver/mapserver/pull/6355,https://github.com/rouault,8,https://github.com/MapServer/MapServer/pull/6355#issuecomment-877350524,"(follow-up of fixes #6181, fixes #6230) (fixes #6347 (comment))
Backport of PR #6354","Could @pramsey potentially advise what would be a robust & efficient strategy for calling ST_Intersects( some_geometry_that_might_be_a_column_or_the_result_of_a_query, ST_GeomFromText(...)) as a spatial filter, if such strategy exists :-) ?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6355,2021-06-29T09:28:06Z,2021-06-29T09:55:03Z,2021-07-09T19:18:26Z,MERGED,True,13,6,1,https://github.com/rouault,[Backport 7.6] PostGIS: fix ST_Intersects() with bounding box that is a point ,1,[],https://github.com/mapserver/mapserver/pull/6355,https://github.com/pramsey,9,https://github.com/MapServer/MapServer/pull/6355#issuecomment-877355007,"(follow-up of fixes #6181, fixes #6230) (fixes #6347 (comment))
Backport of PR #6354","Your intuition that wrapping the column in any ST_Function() is going to invalidate the index is correct, so don't do that.
The lack of support of geometrycollection in ST_Intersects in some versions is the key issue, and it might be the simplest thing is to just go with && instead of ST_Intersects. You'll get an over-determined result set, however, and that might be another regression.
This has other knock-on performance impacts, but ST_DWithin(a, b, 0) is logically equivalent to ST_Interects(a, b) and doesn't have the GEOS-related ""no collections"" limitation, and also is index assisted. Even better might be a && b AND ST_Distance(a, b) = 0 as that results in a simpler plan than what happens under the covers of ST_DWithin()",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6355,2021-06-29T09:28:06Z,2021-06-29T09:55:03Z,2021-07-09T19:18:26Z,MERGED,True,13,6,1,https://github.com/rouault,[Backport 7.6] PostGIS: fix ST_Intersects() with bounding box that is a point ,1,[],https://github.com/mapserver/mapserver/pull/6355,https://github.com/sdlime,10,https://github.com/MapServer/MapServer/pull/6355#issuecomment-877379096,"(follow-up of fixes #6181, fixes #6230) (fixes #6347 (comment))
Backport of PR #6354",What about && if < 2.5 and ST_Intersects if >= 2.5?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6355,2021-06-29T09:28:06Z,2021-06-29T09:55:03Z,2021-07-09T19:18:26Z,MERGED,True,13,6,1,https://github.com/rouault,[Backport 7.6] PostGIS: fix ST_Intersects() with bounding box that is a point ,1,[],https://github.com/mapserver/mapserver/pull/6355,https://github.com/pramsey,11,https://github.com/MapServer/MapServer/pull/6355#issuecomment-877385287,"(follow-up of fixes #6181, fixes #6230) (fixes #6347 (comment))
Backport of PR #6354","Then I'd have to be definitive about what version the behavior changed in :) maybe people with older things running can quickly crowdsource if this runs
select st_intersects('POINT(1 1)', 'GEOMETRYCOLLECTION(LINESTRING(2 2, 3 3), POINT(1 1))');",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6355,2021-06-29T09:28:06Z,2021-06-29T09:55:03Z,2021-07-09T19:18:26Z,MERGED,True,13,6,1,https://github.com/rouault,[Backport 7.6] PostGIS: fix ST_Intersects() with bounding box that is a point ,1,[],https://github.com/mapserver/mapserver/pull/6355,https://github.com/pramsey,12,https://github.com/MapServer/MapServer/pull/6355#issuecomment-877404588,"(follow-up of fixes #6181, fixes #6230) (fixes #6347 (comment))
Backport of PR #6354",Crowd confirms that collections work >= 2.5.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6356,2021-07-02T12:20:12Z,2021-07-06T08:30:53Z,2021-12-16T21:56:06Z,CLOSED,False,46,20,1,https://github.com/WouterVisscher,moved GPKG rtree from select -> filter,1,[],https://github.com/mapserver/mapserver/pull/6356,https://github.com/WouterVisscher,1,https://github.com/MapServer/MapServer/pull/6356,"Description
Hi, we are running a multitute of MapServer+GPKG stacks and we recently upgraded our MapServers to 7.6.3 (+ cherrypicked #6325). With this new stack we noticed significant performance degradation, request that took +/-300ms now took up to 3.3sec.
After some investigation we looked at the SQL that is being generated for the GeoPackage and noticed that the query used with JOIN on the rtree tables incombination with the Intersects() and the ORDER BY causes the long running queries. Removing one of those 3 makes the queries run ""fast"" again but with of couse degradation in the quality of the resultset. Futher investigation on the result of the QUERY PLAN for the sql revealed the use of ""USE TEMP B-TREE FOR ORDER BY"" (note this was also already the case with the pre 7.6.3 queries, but those didn't have the Intersect() in their query). Using a TEMP B-TREE FOR ORDER BY can lead to performance issue (at least that is how we interpret the google/stackoverflow searches 😄 ), how this can be solved is by ""rewriting"" the SQL. Instead of making a JOIN but using a SUBQUERY the performance is uplifted to the ""old"" situation, while maintaining the Intersect() and ORDER BY.
So the JOIN that was build in the 'select' is moved to the 'filter'.
Notes
Like stated we are running multiple MapServer+GPKG stackes where the GPKG vary in size from quite small (couple of megabytes)) to large (multple gigabytes). We noticed this with GPKG of around 300 megabytes.
old sql
SELECT ""pb_multipolygon"".""identificatie"" AS ""identificatie"", ""pb_multipolygon"".""domein"" AS ""domein"", ""pb_multipolygon"".""grondslag_code"" AS ""grondslag_code"", ""pb_multipolygon"".""grondslag_omschrijving"" AS ""grondslag_omschrijving"", ""pb_multipolygon"".""type_beperkingsgebied"" AS ""type_beperkingsgebied"", ""pb_multipolygon"".""datum_in_werking"" AS ""datum_in_werking"", ""pb_multipolygon"".""datum_beeindiging"" AS ""datum_beeindiging"", ""pb_multipolygon"".""datum_aanbieden_bestuursorgaan"" AS ""datum_aanbieden_bestuursorgaan"",""pb_multipolygon"".""tijdstip_inschrijven_kadaster"" AS ""tijdstip_inschrijven_kadaster"", ""pb_multipolygon"".""gebaseerd_op_stuk"" AS ""gebaseerd_op_stuk"", ""pb_multipolygon"".""datum_kenbaarheid"" AS ""datum_kenbaarheid"", ""pb_multipolygon"".""meerdere_brondocumenten_ingeschreven"" AS ""meerdere_brondocumenten_ingeschreven"", ""pb_multipolygon"".""statutaire_naam_bestuursorgaan"" AS ""statutaire_naam_bestuursorgaan"", ""pb_multipolygon"".""organisatie_informatie_nummer_oin"" AS ""organisatie_informatie_nummer_oin"", ""pb_multipolygon"".""puuid"" AS ""puuid"", ""pb_multipolygon"".""fuuid"" AS ""fuuid"", ""pb_multipolygon"".""geom"" AS ""geom""
  FROM ""pb_multipolygon"" JOIN ""rtree_pb_multipolygon_geom"" ms_spat_idx ON ""pb_multipolygon"".ROWID = ms_spat_idx.id AND ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 
 WHERE Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))
 ORDER BY ""pb_multipolygon"".ROWID 
 LIMIT 2 OFFSET 0 
new sql
SELECT ""pb_multipolygon"".""identificatie"" AS ""identificatie"", ""pb_multipolygon"".""domein"" AS ""domein"", ""pb_multipolygon"".""grondslag_code"" AS ""grondslag_code"", ""pb_multipolygon"".""grondslag_omschrijving"" AS ""grondslag_omschrijving"", ""pb_multipolygon"".""type_beperkingsgebied"" AS ""type_beperkingsgebied"", ""pb_multipolygon"".""datum_in_werking"" AS ""datum_in_werking"", ""pb_multipolygon"".""datum_beeindiging"" AS ""datum_beeindiging"", ""pb_multipolygon"".""datum_aanbieden_bestuursorgaan"" AS ""datum_aanbieden_bestuursorgaan"",""pb_multipolygon"".""tijdstip_inschrijven_kadaster"" AS ""tijdstip_inschrijven_kadaster"", ""pb_multipolygon"".""gebaseerd_op_stuk"" AS ""gebaseerd_op_stuk"", ""pb_multipolygon"".""datum_kenbaarheid"" AS ""datum_kenbaarheid"", ""pb_multipolygon"".""meerdere_brondocumenten_ingeschreven"" AS ""meerdere_brondocumenten_ingeschreven"", ""pb_multipolygon"".""statutaire_naam_bestuursorgaan"" AS ""statutaire_naam_bestuursorgaan"", ""pb_multipolygon"".""organisatie_informatie_nummer_oin"" AS ""organisatie_informatie_nummer_oin"", ""pb_multipolygon"".""puuid"" AS ""puuid"", ""pb_multipolygon"".""fuuid"" AS ""fuuid"", ""pb_multipolygon"".""geom"" AS ""geom"" 
  FROM ""pb_multipolygon""
 WHERE ""pb_multipolygon"".ROWID IN (SELECT ms_spat_idx.id 
                                     FROM ""rtree_pb_multipolygon_geom"" ms_spat_idx 
                                    WHERE ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 )
   AND Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))  
 ORDER BY ""pb_multipolygon"".ROWID 
 LIMIT 2 OFFSET 0
QUERY PLAN
The EXPLAIN QUERY PLAN now looks like this.
old plan



id
parent
notused
detail




8
0
0
SCAN TABLE rtree_pb_multipolygon_geom AS ms_spat_idx VIRTUAL TABLE INDEX 2:B0D1B2D3


16
0
0
SEARCH TABLE pb_multipolygon USING INTEGER PRIMARY KEY (rowid=?)


55
0
0
USE TEMP B-TREE FOR ORDER BY



new plan



id
parent
notused
detail




7
0
0
SEARCH TABLE pb_multipolygon USING INTEGER PRIMARY KEY (rowid=?)


11
0
0
LIST SUBQUERY 1


13
11
0
SCAN TABLE rtree_pb_multipolygon_geom AS ms_spat_idx VIRTUAL TABLE INDEX 2:B0D1B2D3



This pull request
Like stated we replaced the JOIN with a SUBQUERY, when a GeoPackage is used, by moving the rtree in the 'select' to the 'filter'. Because this seems to be a specific SQLite issue this probably applies also to Spatialite datasources. To be honest the code in this pull release in now probably nothing more than a ""proof of concept"" that this kind of QUERY improves the performance with GeoPackages.
The code changes have been made against the branch-7-6 to isolate it from other changes on the main and against the 7.6.3 release. If this is a issue we will alter/change this.","Description
Hi, we are running a multitute of MapServer+GPKG stacks and we recently upgraded our MapServers to 7.6.3 (+ cherrypicked #6325). With this new stack we noticed significant performance degradation, request that took +/-300ms now took up to 3.3sec.
After some investigation we looked at the SQL that is being generated for the GeoPackage and noticed that the query used with JOIN on the rtree tables incombination with the Intersects() and the ORDER BY causes the long running queries. Removing one of those 3 makes the queries run ""fast"" again but with of couse degradation in the quality of the resultset. Futher investigation on the result of the QUERY PLAN for the sql revealed the use of ""USE TEMP B-TREE FOR ORDER BY"" (note this was also already the case with the pre 7.6.3 queries, but those didn't have the Intersect() in their query). Using a TEMP B-TREE FOR ORDER BY can lead to performance issue (at least that is how we interpret the google/stackoverflow searches 😄 ), how this can be solved is by ""rewriting"" the SQL. Instead of making a JOIN but using a SUBQUERY the performance is uplifted to the ""old"" situation, while maintaining the Intersect() and ORDER BY.
So the JOIN that was build in the 'select' is moved to the 'filter'.
Notes
Like stated we are running multiple MapServer+GPKG stackes where the GPKG vary in size from quite small (couple of megabytes)) to large (multple gigabytes). We noticed this with GPKG of around 300 megabytes.
old sql
SELECT ""pb_multipolygon"".""identificatie"" AS ""identificatie"", ""pb_multipolygon"".""domein"" AS ""domein"", ""pb_multipolygon"".""grondslag_code"" AS ""grondslag_code"", ""pb_multipolygon"".""grondslag_omschrijving"" AS ""grondslag_omschrijving"", ""pb_multipolygon"".""type_beperkingsgebied"" AS ""type_beperkingsgebied"", ""pb_multipolygon"".""datum_in_werking"" AS ""datum_in_werking"", ""pb_multipolygon"".""datum_beeindiging"" AS ""datum_beeindiging"", ""pb_multipolygon"".""datum_aanbieden_bestuursorgaan"" AS ""datum_aanbieden_bestuursorgaan"",""pb_multipolygon"".""tijdstip_inschrijven_kadaster"" AS ""tijdstip_inschrijven_kadaster"", ""pb_multipolygon"".""gebaseerd_op_stuk"" AS ""gebaseerd_op_stuk"", ""pb_multipolygon"".""datum_kenbaarheid"" AS ""datum_kenbaarheid"", ""pb_multipolygon"".""meerdere_brondocumenten_ingeschreven"" AS ""meerdere_brondocumenten_ingeschreven"", ""pb_multipolygon"".""statutaire_naam_bestuursorgaan"" AS ""statutaire_naam_bestuursorgaan"", ""pb_multipolygon"".""organisatie_informatie_nummer_oin"" AS ""organisatie_informatie_nummer_oin"", ""pb_multipolygon"".""puuid"" AS ""puuid"", ""pb_multipolygon"".""fuuid"" AS ""fuuid"", ""pb_multipolygon"".""geom"" AS ""geom""
  FROM ""pb_multipolygon"" JOIN ""rtree_pb_multipolygon_geom"" ms_spat_idx ON ""pb_multipolygon"".ROWID = ms_spat_idx.id AND ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 
 WHERE Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))
 ORDER BY ""pb_multipolygon"".ROWID 
 LIMIT 2 OFFSET 0 
new sql
SELECT ""pb_multipolygon"".""identificatie"" AS ""identificatie"", ""pb_multipolygon"".""domein"" AS ""domein"", ""pb_multipolygon"".""grondslag_code"" AS ""grondslag_code"", ""pb_multipolygon"".""grondslag_omschrijving"" AS ""grondslag_omschrijving"", ""pb_multipolygon"".""type_beperkingsgebied"" AS ""type_beperkingsgebied"", ""pb_multipolygon"".""datum_in_werking"" AS ""datum_in_werking"", ""pb_multipolygon"".""datum_beeindiging"" AS ""datum_beeindiging"", ""pb_multipolygon"".""datum_aanbieden_bestuursorgaan"" AS ""datum_aanbieden_bestuursorgaan"",""pb_multipolygon"".""tijdstip_inschrijven_kadaster"" AS ""tijdstip_inschrijven_kadaster"", ""pb_multipolygon"".""gebaseerd_op_stuk"" AS ""gebaseerd_op_stuk"", ""pb_multipolygon"".""datum_kenbaarheid"" AS ""datum_kenbaarheid"", ""pb_multipolygon"".""meerdere_brondocumenten_ingeschreven"" AS ""meerdere_brondocumenten_ingeschreven"", ""pb_multipolygon"".""statutaire_naam_bestuursorgaan"" AS ""statutaire_naam_bestuursorgaan"", ""pb_multipolygon"".""organisatie_informatie_nummer_oin"" AS ""organisatie_informatie_nummer_oin"", ""pb_multipolygon"".""puuid"" AS ""puuid"", ""pb_multipolygon"".""fuuid"" AS ""fuuid"", ""pb_multipolygon"".""geom"" AS ""geom"" 
  FROM ""pb_multipolygon""
 WHERE ""pb_multipolygon"".ROWID IN (SELECT ms_spat_idx.id 
                                     FROM ""rtree_pb_multipolygon_geom"" ms_spat_idx 
                                    WHERE ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 )
   AND Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))  
 ORDER BY ""pb_multipolygon"".ROWID 
 LIMIT 2 OFFSET 0
QUERY PLAN
The EXPLAIN QUERY PLAN now looks like this.
old plan



id
parent
notused
detail




8
0
0
SCAN TABLE rtree_pb_multipolygon_geom AS ms_spat_idx VIRTUAL TABLE INDEX 2:B0D1B2D3


16
0
0
SEARCH TABLE pb_multipolygon USING INTEGER PRIMARY KEY (rowid=?)


55
0
0
USE TEMP B-TREE FOR ORDER BY



new plan



id
parent
notused
detail




7
0
0
SEARCH TABLE pb_multipolygon USING INTEGER PRIMARY KEY (rowid=?)


11
0
0
LIST SUBQUERY 1


13
11
0
SCAN TABLE rtree_pb_multipolygon_geom AS ms_spat_idx VIRTUAL TABLE INDEX 2:B0D1B2D3



This pull request
Like stated we replaced the JOIN with a SUBQUERY, when a GeoPackage is used, by moving the rtree in the 'select' to the 'filter'. Because this seems to be a specific SQLite issue this probably applies also to Spatialite datasources. To be honest the code in this pull release in now probably nothing more than a ""proof of concept"" that this kind of QUERY improves the performance with GeoPackages.
The code changes have been made against the branch-7-6 to isolate it from other changes on the main and against the 7.6.3 release. If this is a issue we will alter/change this.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6356,2021-07-02T12:20:12Z,2021-07-06T08:30:53Z,2021-12-16T21:56:06Z,CLOSED,False,46,20,1,https://github.com/WouterVisscher,moved GPKG rtree from select -> filter,1,[],https://github.com/mapserver/mapserver/pull/6356,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6356#issuecomment-873237110,"Description
Hi, we are running a multitute of MapServer+GPKG stacks and we recently upgraded our MapServers to 7.6.3 (+ cherrypicked #6325). With this new stack we noticed significant performance degradation, request that took +/-300ms now took up to 3.3sec.
After some investigation we looked at the SQL that is being generated for the GeoPackage and noticed that the query used with JOIN on the rtree tables incombination with the Intersects() and the ORDER BY causes the long running queries. Removing one of those 3 makes the queries run ""fast"" again but with of couse degradation in the quality of the resultset. Futher investigation on the result of the QUERY PLAN for the sql revealed the use of ""USE TEMP B-TREE FOR ORDER BY"" (note this was also already the case with the pre 7.6.3 queries, but those didn't have the Intersect() in their query). Using a TEMP B-TREE FOR ORDER BY can lead to performance issue (at least that is how we interpret the google/stackoverflow searches 😄 ), how this can be solved is by ""rewriting"" the SQL. Instead of making a JOIN but using a SUBQUERY the performance is uplifted to the ""old"" situation, while maintaining the Intersect() and ORDER BY.
So the JOIN that was build in the 'select' is moved to the 'filter'.
Notes
Like stated we are running multiple MapServer+GPKG stackes where the GPKG vary in size from quite small (couple of megabytes)) to large (multple gigabytes). We noticed this with GPKG of around 300 megabytes.
old sql
SELECT ""pb_multipolygon"".""identificatie"" AS ""identificatie"", ""pb_multipolygon"".""domein"" AS ""domein"", ""pb_multipolygon"".""grondslag_code"" AS ""grondslag_code"", ""pb_multipolygon"".""grondslag_omschrijving"" AS ""grondslag_omschrijving"", ""pb_multipolygon"".""type_beperkingsgebied"" AS ""type_beperkingsgebied"", ""pb_multipolygon"".""datum_in_werking"" AS ""datum_in_werking"", ""pb_multipolygon"".""datum_beeindiging"" AS ""datum_beeindiging"", ""pb_multipolygon"".""datum_aanbieden_bestuursorgaan"" AS ""datum_aanbieden_bestuursorgaan"",""pb_multipolygon"".""tijdstip_inschrijven_kadaster"" AS ""tijdstip_inschrijven_kadaster"", ""pb_multipolygon"".""gebaseerd_op_stuk"" AS ""gebaseerd_op_stuk"", ""pb_multipolygon"".""datum_kenbaarheid"" AS ""datum_kenbaarheid"", ""pb_multipolygon"".""meerdere_brondocumenten_ingeschreven"" AS ""meerdere_brondocumenten_ingeschreven"", ""pb_multipolygon"".""statutaire_naam_bestuursorgaan"" AS ""statutaire_naam_bestuursorgaan"", ""pb_multipolygon"".""organisatie_informatie_nummer_oin"" AS ""organisatie_informatie_nummer_oin"", ""pb_multipolygon"".""puuid"" AS ""puuid"", ""pb_multipolygon"".""fuuid"" AS ""fuuid"", ""pb_multipolygon"".""geom"" AS ""geom""
  FROM ""pb_multipolygon"" JOIN ""rtree_pb_multipolygon_geom"" ms_spat_idx ON ""pb_multipolygon"".ROWID = ms_spat_idx.id AND ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 
 WHERE Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))
 ORDER BY ""pb_multipolygon"".ROWID 
 LIMIT 2 OFFSET 0 
new sql
SELECT ""pb_multipolygon"".""identificatie"" AS ""identificatie"", ""pb_multipolygon"".""domein"" AS ""domein"", ""pb_multipolygon"".""grondslag_code"" AS ""grondslag_code"", ""pb_multipolygon"".""grondslag_omschrijving"" AS ""grondslag_omschrijving"", ""pb_multipolygon"".""type_beperkingsgebied"" AS ""type_beperkingsgebied"", ""pb_multipolygon"".""datum_in_werking"" AS ""datum_in_werking"", ""pb_multipolygon"".""datum_beeindiging"" AS ""datum_beeindiging"", ""pb_multipolygon"".""datum_aanbieden_bestuursorgaan"" AS ""datum_aanbieden_bestuursorgaan"",""pb_multipolygon"".""tijdstip_inschrijven_kadaster"" AS ""tijdstip_inschrijven_kadaster"", ""pb_multipolygon"".""gebaseerd_op_stuk"" AS ""gebaseerd_op_stuk"", ""pb_multipolygon"".""datum_kenbaarheid"" AS ""datum_kenbaarheid"", ""pb_multipolygon"".""meerdere_brondocumenten_ingeschreven"" AS ""meerdere_brondocumenten_ingeschreven"", ""pb_multipolygon"".""statutaire_naam_bestuursorgaan"" AS ""statutaire_naam_bestuursorgaan"", ""pb_multipolygon"".""organisatie_informatie_nummer_oin"" AS ""organisatie_informatie_nummer_oin"", ""pb_multipolygon"".""puuid"" AS ""puuid"", ""pb_multipolygon"".""fuuid"" AS ""fuuid"", ""pb_multipolygon"".""geom"" AS ""geom"" 
  FROM ""pb_multipolygon""
 WHERE ""pb_multipolygon"".ROWID IN (SELECT ms_spat_idx.id 
                                     FROM ""rtree_pb_multipolygon_geom"" ms_spat_idx 
                                    WHERE ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 )
   AND Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))  
 ORDER BY ""pb_multipolygon"".ROWID 
 LIMIT 2 OFFSET 0
QUERY PLAN
The EXPLAIN QUERY PLAN now looks like this.
old plan



id
parent
notused
detail




8
0
0
SCAN TABLE rtree_pb_multipolygon_geom AS ms_spat_idx VIRTUAL TABLE INDEX 2:B0D1B2D3


16
0
0
SEARCH TABLE pb_multipolygon USING INTEGER PRIMARY KEY (rowid=?)


55
0
0
USE TEMP B-TREE FOR ORDER BY



new plan



id
parent
notused
detail




7
0
0
SEARCH TABLE pb_multipolygon USING INTEGER PRIMARY KEY (rowid=?)


11
0
0
LIST SUBQUERY 1


13
11
0
SCAN TABLE rtree_pb_multipolygon_geom AS ms_spat_idx VIRTUAL TABLE INDEX 2:B0D1B2D3



This pull request
Like stated we replaced the JOIN with a SUBQUERY, when a GeoPackage is used, by moving the rtree in the 'select' to the 'filter'. Because this seems to be a specific SQLite issue this probably applies also to Spatialite datasources. To be honest the code in this pull release in now probably nothing more than a ""proof of concept"" that this kind of QUERY improves the performance with GeoPackages.
The code changes have been made against the branch-7-6 to isolate it from other changes on the main and against the 7.6.3 release. If this is a issue we will alter/change this.",@WouterVisscher I'm worried of merging this and then later having to port into main branch.  Could you rebase this to main branch instead? (if the issue exists in the main branch),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6356,2021-07-02T12:20:12Z,2021-07-06T08:30:53Z,2021-12-16T21:56:06Z,CLOSED,False,46,20,1,https://github.com/WouterVisscher,moved GPKG rtree from select -> filter,1,[],https://github.com/mapserver/mapserver/pull/6356,https://github.com/WouterVisscher,3,https://github.com/MapServer/MapServer/pull/6356#issuecomment-873435461,"Description
Hi, we are running a multitute of MapServer+GPKG stacks and we recently upgraded our MapServers to 7.6.3 (+ cherrypicked #6325). With this new stack we noticed significant performance degradation, request that took +/-300ms now took up to 3.3sec.
After some investigation we looked at the SQL that is being generated for the GeoPackage and noticed that the query used with JOIN on the rtree tables incombination with the Intersects() and the ORDER BY causes the long running queries. Removing one of those 3 makes the queries run ""fast"" again but with of couse degradation in the quality of the resultset. Futher investigation on the result of the QUERY PLAN for the sql revealed the use of ""USE TEMP B-TREE FOR ORDER BY"" (note this was also already the case with the pre 7.6.3 queries, but those didn't have the Intersect() in their query). Using a TEMP B-TREE FOR ORDER BY can lead to performance issue (at least that is how we interpret the google/stackoverflow searches 😄 ), how this can be solved is by ""rewriting"" the SQL. Instead of making a JOIN but using a SUBQUERY the performance is uplifted to the ""old"" situation, while maintaining the Intersect() and ORDER BY.
So the JOIN that was build in the 'select' is moved to the 'filter'.
Notes
Like stated we are running multiple MapServer+GPKG stackes where the GPKG vary in size from quite small (couple of megabytes)) to large (multple gigabytes). We noticed this with GPKG of around 300 megabytes.
old sql
SELECT ""pb_multipolygon"".""identificatie"" AS ""identificatie"", ""pb_multipolygon"".""domein"" AS ""domein"", ""pb_multipolygon"".""grondslag_code"" AS ""grondslag_code"", ""pb_multipolygon"".""grondslag_omschrijving"" AS ""grondslag_omschrijving"", ""pb_multipolygon"".""type_beperkingsgebied"" AS ""type_beperkingsgebied"", ""pb_multipolygon"".""datum_in_werking"" AS ""datum_in_werking"", ""pb_multipolygon"".""datum_beeindiging"" AS ""datum_beeindiging"", ""pb_multipolygon"".""datum_aanbieden_bestuursorgaan"" AS ""datum_aanbieden_bestuursorgaan"",""pb_multipolygon"".""tijdstip_inschrijven_kadaster"" AS ""tijdstip_inschrijven_kadaster"", ""pb_multipolygon"".""gebaseerd_op_stuk"" AS ""gebaseerd_op_stuk"", ""pb_multipolygon"".""datum_kenbaarheid"" AS ""datum_kenbaarheid"", ""pb_multipolygon"".""meerdere_brondocumenten_ingeschreven"" AS ""meerdere_brondocumenten_ingeschreven"", ""pb_multipolygon"".""statutaire_naam_bestuursorgaan"" AS ""statutaire_naam_bestuursorgaan"", ""pb_multipolygon"".""organisatie_informatie_nummer_oin"" AS ""organisatie_informatie_nummer_oin"", ""pb_multipolygon"".""puuid"" AS ""puuid"", ""pb_multipolygon"".""fuuid"" AS ""fuuid"", ""pb_multipolygon"".""geom"" AS ""geom""
  FROM ""pb_multipolygon"" JOIN ""rtree_pb_multipolygon_geom"" ms_spat_idx ON ""pb_multipolygon"".ROWID = ms_spat_idx.id AND ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 
 WHERE Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))
 ORDER BY ""pb_multipolygon"".ROWID 
 LIMIT 2 OFFSET 0 
new sql
SELECT ""pb_multipolygon"".""identificatie"" AS ""identificatie"", ""pb_multipolygon"".""domein"" AS ""domein"", ""pb_multipolygon"".""grondslag_code"" AS ""grondslag_code"", ""pb_multipolygon"".""grondslag_omschrijving"" AS ""grondslag_omschrijving"", ""pb_multipolygon"".""type_beperkingsgebied"" AS ""type_beperkingsgebied"", ""pb_multipolygon"".""datum_in_werking"" AS ""datum_in_werking"", ""pb_multipolygon"".""datum_beeindiging"" AS ""datum_beeindiging"", ""pb_multipolygon"".""datum_aanbieden_bestuursorgaan"" AS ""datum_aanbieden_bestuursorgaan"",""pb_multipolygon"".""tijdstip_inschrijven_kadaster"" AS ""tijdstip_inschrijven_kadaster"", ""pb_multipolygon"".""gebaseerd_op_stuk"" AS ""gebaseerd_op_stuk"", ""pb_multipolygon"".""datum_kenbaarheid"" AS ""datum_kenbaarheid"", ""pb_multipolygon"".""meerdere_brondocumenten_ingeschreven"" AS ""meerdere_brondocumenten_ingeschreven"", ""pb_multipolygon"".""statutaire_naam_bestuursorgaan"" AS ""statutaire_naam_bestuursorgaan"", ""pb_multipolygon"".""organisatie_informatie_nummer_oin"" AS ""organisatie_informatie_nummer_oin"", ""pb_multipolygon"".""puuid"" AS ""puuid"", ""pb_multipolygon"".""fuuid"" AS ""fuuid"", ""pb_multipolygon"".""geom"" AS ""geom"" 
  FROM ""pb_multipolygon""
 WHERE ""pb_multipolygon"".ROWID IN (SELECT ms_spat_idx.id 
                                     FROM ""rtree_pb_multipolygon_geom"" ms_spat_idx 
                                    WHERE ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 )
   AND Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))  
 ORDER BY ""pb_multipolygon"".ROWID 
 LIMIT 2 OFFSET 0
QUERY PLAN
The EXPLAIN QUERY PLAN now looks like this.
old plan



id
parent
notused
detail




8
0
0
SCAN TABLE rtree_pb_multipolygon_geom AS ms_spat_idx VIRTUAL TABLE INDEX 2:B0D1B2D3


16
0
0
SEARCH TABLE pb_multipolygon USING INTEGER PRIMARY KEY (rowid=?)


55
0
0
USE TEMP B-TREE FOR ORDER BY



new plan



id
parent
notused
detail




7
0
0
SEARCH TABLE pb_multipolygon USING INTEGER PRIMARY KEY (rowid=?)


11
0
0
LIST SUBQUERY 1


13
11
0
SCAN TABLE rtree_pb_multipolygon_geom AS ms_spat_idx VIRTUAL TABLE INDEX 2:B0D1B2D3



This pull request
Like stated we replaced the JOIN with a SUBQUERY, when a GeoPackage is used, by moving the rtree in the 'select' to the 'filter'. Because this seems to be a specific SQLite issue this probably applies also to Spatialite datasources. To be honest the code in this pull release in now probably nothing more than a ""proof of concept"" that this kind of QUERY improves the performance with GeoPackages.
The code changes have been made against the branch-7-6 to isolate it from other changes on the main and against the 7.6.3 release. If this is a issue we will alter/change this.","@jmckenna I looked at the main branch and the issue also appears there. I also tested it with Spatialite and the issue manifest it self also there. Both GPKG and Spatialite are SQLite and have a similar query so no real surprise, but this does mean that the changes I made in this pull request for (only) GPKG need to include the Spatialite. I will rework the changes so both GPKG and Spatialite are included in the solution.
Because of the ""scope creep"" (regarding Spatialite) I would prefer making a new branch(+new pull request against main). I would like to ""copy"" the comment/description of this pull request (+ the new finding regarding Spatialite) to the new one, I presume that wouldn't be a real issue for you?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6356,2021-07-02T12:20:12Z,2021-07-06T08:30:53Z,2021-12-16T21:56:06Z,CLOSED,False,46,20,1,https://github.com/WouterVisscher,moved GPKG rtree from select -> filter,1,[],https://github.com/mapserver/mapserver/pull/6356,https://github.com/WouterVisscher,4,https://github.com/MapServer/MapServer/pull/6356#issuecomment-874568533,"Description
Hi, we are running a multitute of MapServer+GPKG stacks and we recently upgraded our MapServers to 7.6.3 (+ cherrypicked #6325). With this new stack we noticed significant performance degradation, request that took +/-300ms now took up to 3.3sec.
After some investigation we looked at the SQL that is being generated for the GeoPackage and noticed that the query used with JOIN on the rtree tables incombination with the Intersects() and the ORDER BY causes the long running queries. Removing one of those 3 makes the queries run ""fast"" again but with of couse degradation in the quality of the resultset. Futher investigation on the result of the QUERY PLAN for the sql revealed the use of ""USE TEMP B-TREE FOR ORDER BY"" (note this was also already the case with the pre 7.6.3 queries, but those didn't have the Intersect() in their query). Using a TEMP B-TREE FOR ORDER BY can lead to performance issue (at least that is how we interpret the google/stackoverflow searches 😄 ), how this can be solved is by ""rewriting"" the SQL. Instead of making a JOIN but using a SUBQUERY the performance is uplifted to the ""old"" situation, while maintaining the Intersect() and ORDER BY.
So the JOIN that was build in the 'select' is moved to the 'filter'.
Notes
Like stated we are running multiple MapServer+GPKG stackes where the GPKG vary in size from quite small (couple of megabytes)) to large (multple gigabytes). We noticed this with GPKG of around 300 megabytes.
old sql
SELECT ""pb_multipolygon"".""identificatie"" AS ""identificatie"", ""pb_multipolygon"".""domein"" AS ""domein"", ""pb_multipolygon"".""grondslag_code"" AS ""grondslag_code"", ""pb_multipolygon"".""grondslag_omschrijving"" AS ""grondslag_omschrijving"", ""pb_multipolygon"".""type_beperkingsgebied"" AS ""type_beperkingsgebied"", ""pb_multipolygon"".""datum_in_werking"" AS ""datum_in_werking"", ""pb_multipolygon"".""datum_beeindiging"" AS ""datum_beeindiging"", ""pb_multipolygon"".""datum_aanbieden_bestuursorgaan"" AS ""datum_aanbieden_bestuursorgaan"",""pb_multipolygon"".""tijdstip_inschrijven_kadaster"" AS ""tijdstip_inschrijven_kadaster"", ""pb_multipolygon"".""gebaseerd_op_stuk"" AS ""gebaseerd_op_stuk"", ""pb_multipolygon"".""datum_kenbaarheid"" AS ""datum_kenbaarheid"", ""pb_multipolygon"".""meerdere_brondocumenten_ingeschreven"" AS ""meerdere_brondocumenten_ingeschreven"", ""pb_multipolygon"".""statutaire_naam_bestuursorgaan"" AS ""statutaire_naam_bestuursorgaan"", ""pb_multipolygon"".""organisatie_informatie_nummer_oin"" AS ""organisatie_informatie_nummer_oin"", ""pb_multipolygon"".""puuid"" AS ""puuid"", ""pb_multipolygon"".""fuuid"" AS ""fuuid"", ""pb_multipolygon"".""geom"" AS ""geom""
  FROM ""pb_multipolygon"" JOIN ""rtree_pb_multipolygon_geom"" ms_spat_idx ON ""pb_multipolygon"".ROWID = ms_spat_idx.id AND ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 
 WHERE Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))
 ORDER BY ""pb_multipolygon"".ROWID 
 LIMIT 2 OFFSET 0 
new sql
SELECT ""pb_multipolygon"".""identificatie"" AS ""identificatie"", ""pb_multipolygon"".""domein"" AS ""domein"", ""pb_multipolygon"".""grondslag_code"" AS ""grondslag_code"", ""pb_multipolygon"".""grondslag_omschrijving"" AS ""grondslag_omschrijving"", ""pb_multipolygon"".""type_beperkingsgebied"" AS ""type_beperkingsgebied"", ""pb_multipolygon"".""datum_in_werking"" AS ""datum_in_werking"", ""pb_multipolygon"".""datum_beeindiging"" AS ""datum_beeindiging"", ""pb_multipolygon"".""datum_aanbieden_bestuursorgaan"" AS ""datum_aanbieden_bestuursorgaan"",""pb_multipolygon"".""tijdstip_inschrijven_kadaster"" AS ""tijdstip_inschrijven_kadaster"", ""pb_multipolygon"".""gebaseerd_op_stuk"" AS ""gebaseerd_op_stuk"", ""pb_multipolygon"".""datum_kenbaarheid"" AS ""datum_kenbaarheid"", ""pb_multipolygon"".""meerdere_brondocumenten_ingeschreven"" AS ""meerdere_brondocumenten_ingeschreven"", ""pb_multipolygon"".""statutaire_naam_bestuursorgaan"" AS ""statutaire_naam_bestuursorgaan"", ""pb_multipolygon"".""organisatie_informatie_nummer_oin"" AS ""organisatie_informatie_nummer_oin"", ""pb_multipolygon"".""puuid"" AS ""puuid"", ""pb_multipolygon"".""fuuid"" AS ""fuuid"", ""pb_multipolygon"".""geom"" AS ""geom"" 
  FROM ""pb_multipolygon""
 WHERE ""pb_multipolygon"".ROWID IN (SELECT ms_spat_idx.id 
                                     FROM ""rtree_pb_multipolygon_geom"" ms_spat_idx 
                                    WHERE ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 )
   AND Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))  
 ORDER BY ""pb_multipolygon"".ROWID 
 LIMIT 2 OFFSET 0
QUERY PLAN
The EXPLAIN QUERY PLAN now looks like this.
old plan



id
parent
notused
detail




8
0
0
SCAN TABLE rtree_pb_multipolygon_geom AS ms_spat_idx VIRTUAL TABLE INDEX 2:B0D1B2D3


16
0
0
SEARCH TABLE pb_multipolygon USING INTEGER PRIMARY KEY (rowid=?)


55
0
0
USE TEMP B-TREE FOR ORDER BY



new plan



id
parent
notused
detail




7
0
0
SEARCH TABLE pb_multipolygon USING INTEGER PRIMARY KEY (rowid=?)


11
0
0
LIST SUBQUERY 1


13
11
0
SCAN TABLE rtree_pb_multipolygon_geom AS ms_spat_idx VIRTUAL TABLE INDEX 2:B0D1B2D3



This pull request
Like stated we replaced the JOIN with a SUBQUERY, when a GeoPackage is used, by moving the rtree in the 'select' to the 'filter'. Because this seems to be a specific SQLite issue this probably applies also to Spatialite datasources. To be honest the code in this pull release in now probably nothing more than a ""proof of concept"" that this kind of QUERY improves the performance with GeoPackages.
The code changes have been made against the branch-7-6 to isolate it from other changes on the main and against the 7.6.3 release. If this is a issue we will alter/change this.","update code changes against main + Spatialite sources are now included, see new pull request: #6361",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6356,2021-07-02T12:20:12Z,2021-07-06T08:30:53Z,2021-12-16T21:56:06Z,CLOSED,False,46,20,1,https://github.com/WouterVisscher,moved GPKG rtree from select -> filter,1,[],https://github.com/mapserver/mapserver/pull/6356,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/6356#issuecomment-875025420,"Description
Hi, we are running a multitute of MapServer+GPKG stacks and we recently upgraded our MapServers to 7.6.3 (+ cherrypicked #6325). With this new stack we noticed significant performance degradation, request that took +/-300ms now took up to 3.3sec.
After some investigation we looked at the SQL that is being generated for the GeoPackage and noticed that the query used with JOIN on the rtree tables incombination with the Intersects() and the ORDER BY causes the long running queries. Removing one of those 3 makes the queries run ""fast"" again but with of couse degradation in the quality of the resultset. Futher investigation on the result of the QUERY PLAN for the sql revealed the use of ""USE TEMP B-TREE FOR ORDER BY"" (note this was also already the case with the pre 7.6.3 queries, but those didn't have the Intersect() in their query). Using a TEMP B-TREE FOR ORDER BY can lead to performance issue (at least that is how we interpret the google/stackoverflow searches 😄 ), how this can be solved is by ""rewriting"" the SQL. Instead of making a JOIN but using a SUBQUERY the performance is uplifted to the ""old"" situation, while maintaining the Intersect() and ORDER BY.
So the JOIN that was build in the 'select' is moved to the 'filter'.
Notes
Like stated we are running multiple MapServer+GPKG stackes where the GPKG vary in size from quite small (couple of megabytes)) to large (multple gigabytes). We noticed this with GPKG of around 300 megabytes.
old sql
SELECT ""pb_multipolygon"".""identificatie"" AS ""identificatie"", ""pb_multipolygon"".""domein"" AS ""domein"", ""pb_multipolygon"".""grondslag_code"" AS ""grondslag_code"", ""pb_multipolygon"".""grondslag_omschrijving"" AS ""grondslag_omschrijving"", ""pb_multipolygon"".""type_beperkingsgebied"" AS ""type_beperkingsgebied"", ""pb_multipolygon"".""datum_in_werking"" AS ""datum_in_werking"", ""pb_multipolygon"".""datum_beeindiging"" AS ""datum_beeindiging"", ""pb_multipolygon"".""datum_aanbieden_bestuursorgaan"" AS ""datum_aanbieden_bestuursorgaan"",""pb_multipolygon"".""tijdstip_inschrijven_kadaster"" AS ""tijdstip_inschrijven_kadaster"", ""pb_multipolygon"".""gebaseerd_op_stuk"" AS ""gebaseerd_op_stuk"", ""pb_multipolygon"".""datum_kenbaarheid"" AS ""datum_kenbaarheid"", ""pb_multipolygon"".""meerdere_brondocumenten_ingeschreven"" AS ""meerdere_brondocumenten_ingeschreven"", ""pb_multipolygon"".""statutaire_naam_bestuursorgaan"" AS ""statutaire_naam_bestuursorgaan"", ""pb_multipolygon"".""organisatie_informatie_nummer_oin"" AS ""organisatie_informatie_nummer_oin"", ""pb_multipolygon"".""puuid"" AS ""puuid"", ""pb_multipolygon"".""fuuid"" AS ""fuuid"", ""pb_multipolygon"".""geom"" AS ""geom""
  FROM ""pb_multipolygon"" JOIN ""rtree_pb_multipolygon_geom"" ms_spat_idx ON ""pb_multipolygon"".ROWID = ms_spat_idx.id AND ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 
 WHERE Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))
 ORDER BY ""pb_multipolygon"".ROWID 
 LIMIT 2 OFFSET 0 
new sql
SELECT ""pb_multipolygon"".""identificatie"" AS ""identificatie"", ""pb_multipolygon"".""domein"" AS ""domein"", ""pb_multipolygon"".""grondslag_code"" AS ""grondslag_code"", ""pb_multipolygon"".""grondslag_omschrijving"" AS ""grondslag_omschrijving"", ""pb_multipolygon"".""type_beperkingsgebied"" AS ""type_beperkingsgebied"", ""pb_multipolygon"".""datum_in_werking"" AS ""datum_in_werking"", ""pb_multipolygon"".""datum_beeindiging"" AS ""datum_beeindiging"", ""pb_multipolygon"".""datum_aanbieden_bestuursorgaan"" AS ""datum_aanbieden_bestuursorgaan"",""pb_multipolygon"".""tijdstip_inschrijven_kadaster"" AS ""tijdstip_inschrijven_kadaster"", ""pb_multipolygon"".""gebaseerd_op_stuk"" AS ""gebaseerd_op_stuk"", ""pb_multipolygon"".""datum_kenbaarheid"" AS ""datum_kenbaarheid"", ""pb_multipolygon"".""meerdere_brondocumenten_ingeschreven"" AS ""meerdere_brondocumenten_ingeschreven"", ""pb_multipolygon"".""statutaire_naam_bestuursorgaan"" AS ""statutaire_naam_bestuursorgaan"", ""pb_multipolygon"".""organisatie_informatie_nummer_oin"" AS ""organisatie_informatie_nummer_oin"", ""pb_multipolygon"".""puuid"" AS ""puuid"", ""pb_multipolygon"".""fuuid"" AS ""fuuid"", ""pb_multipolygon"".""geom"" AS ""geom"" 
  FROM ""pb_multipolygon""
 WHERE ""pb_multipolygon"".ROWID IN (SELECT ms_spat_idx.id 
                                     FROM ""rtree_pb_multipolygon_geom"" ms_spat_idx 
                                    WHERE ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 )
   AND Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))  
 ORDER BY ""pb_multipolygon"".ROWID 
 LIMIT 2 OFFSET 0
QUERY PLAN
The EXPLAIN QUERY PLAN now looks like this.
old plan



id
parent
notused
detail




8
0
0
SCAN TABLE rtree_pb_multipolygon_geom AS ms_spat_idx VIRTUAL TABLE INDEX 2:B0D1B2D3


16
0
0
SEARCH TABLE pb_multipolygon USING INTEGER PRIMARY KEY (rowid=?)


55
0
0
USE TEMP B-TREE FOR ORDER BY



new plan



id
parent
notused
detail




7
0
0
SEARCH TABLE pb_multipolygon USING INTEGER PRIMARY KEY (rowid=?)


11
0
0
LIST SUBQUERY 1


13
11
0
SCAN TABLE rtree_pb_multipolygon_geom AS ms_spat_idx VIRTUAL TABLE INDEX 2:B0D1B2D3



This pull request
Like stated we replaced the JOIN with a SUBQUERY, when a GeoPackage is used, by moving the rtree in the 'select' to the 'filter'. Because this seems to be a specific SQLite issue this probably applies also to Spatialite datasources. To be honest the code in this pull release in now probably nothing more than a ""proof of concept"" that this kind of QUERY improves the performance with GeoPackages.
The code changes have been made against the branch-7-6 to isolate it from other changes on the main and against the 7.6.3 release. If this is a issue we will alter/change this.","thanks @WouterVisscher (I was quiet to let others comment, however I personally think your plan is good.  thanks again!)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6357,2021-07-02T15:59:17Z,2021-07-02T16:29:17Z,2021-10-20T14:53:41Z,MERGED,True,1,1,1,https://github.com/sdlime,Make sure requested class with mode=legendicon is not negative.,16,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6357,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/6357,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6357,2021-07-02T15:59:17Z,2021-07-02T16:29:17Z,2021-10-20T14:53:41Z,MERGED,True,1,1,1,https://github.com/sdlime,Make sure requested class with mode=legendicon is not negative.,16,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6357,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6357#issuecomment-873108634,,"Thanks Steve, I think we can also backport this to 7-6....(adding label now)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6357,2021-07-02T15:59:17Z,2021-07-02T16:29:17Z,2021-10-20T14:53:41Z,MERGED,True,1,1,1,https://github.com/sdlime,Make sure requested class with mode=legendicon is not negative.,16,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6357,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/6357#issuecomment-873110787,,"Thanks Steve, I think we can also backport this to 7-6....(adding label now)

Definitely, can go back further too if those backport labels work.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6357,2021-07-02T15:59:17Z,2021-07-02T16:29:17Z,2021-10-20T14:53:41Z,MERGED,True,1,1,1,https://github.com/sdlime,Make sure requested class with mode=legendicon is not negative.,16,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6357,https://github.com/apps/github-actions,4,https://github.com/MapServer/MapServer/pull/6357#issuecomment-873119205,,"The backport to branch-7-6 failed:
The process '/usr/bin/git' failed with exit code 128

To backport manually, run these commands in your terminal:
# Fetch latest updates from GitHub
git fetch
# Create a new working tree
git worktree add .worktrees/backport-branch-7-6 branch-7-6
# Navigate to the new working tree
cd .worktrees/backport-branch-7-6
# Create a new branch
git switch --create backport-6357-to-branch-7-6
# Cherry-pick the merged commit of this pull request and resolve the conflicts
git cherry-pick acb708a4dbeb77645dd085f0564d4a62b8836612,365120ac896bc23c4644e39ea7aac9a98c3cbfb7,e0d1d432181fbcb2e62093053a33096e913ebec1,7d261af86140a491df170ba7054aa9d1aa9f3ad7,7cc1f00a1b920b70467c3015c2dd2bbf4663029d,e59d3cb001b06217f3640a67a5c8835bf8fad5a1,ebb3cd34a85a7b5fe76ccad35bf7443c9b048ac6,a4e68585d9bd912dd3fe0c3e3ac92dd1d32a7a1d,dac5cdc9085c60ca634de508beb2e7d7f8309d92,3111bef631b1a699a52131f9a03c3b3514cb3f02,2fc8d75432bf43c38fe0b3df1d06507f34b4ebca,db9eb79bbc1d2beb0ad8fe3a9d058280372c820a,239aa94cd9ead9e46b062a59ea8764baf58ad794,ffca10987e2be18e834fcb0739338d8bc9f63550,b99e3eaca7079bee45af70a7faa9d3ad86f1ef91,bbe742ffc06ed6dd8550cb9e674d73fc2015b47a
# Push it to GitHub
git push --set-upstream origin backport-6357-to-branch-7-6
# Go back to the original working tree
cd ../..
# Delete the working tree
git worktree remove .worktrees/backport-branch-7-6
Then, create a pull request where the base branch is branch-7-6 and the compare/head branch is backport-6357-to-branch-7-6.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6357,2021-07-02T15:59:17Z,2021-07-02T16:29:17Z,2021-10-20T14:53:41Z,MERGED,True,1,1,1,https://github.com/sdlime,Make sure requested class with mode=legendicon is not negative.,16,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6357,https://github.com/sdlime,5,https://github.com/MapServer/MapServer/pull/6357#issuecomment-874981866,,"Thanks Steve, I think we can also backport this to 7-6....(adding label now)

@jmckenna , the backport failed. Do you know if it's an action issue or something else? The change was minor and should have backported cleanly.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6357,2021-07-02T15:59:17Z,2021-07-02T16:29:17Z,2021-10-20T14:53:41Z,MERGED,True,1,1,1,https://github.com/sdlime,Make sure requested class with mode=legendicon is not negative.,16,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6357,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/6357#issuecomment-874985118,,@sdlime I'll take a look...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6357,2021-07-02T15:59:17Z,2021-07-02T16:29:17Z,2021-10-20T14:53:41Z,MERGED,True,1,1,1,https://github.com/sdlime,Make sure requested class with mode=legendicon is not negative.,16,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6357,https://github.com/jmckenna,7,https://github.com/MapServer/MapServer/pull/6357#issuecomment-875003488,,cherry-picked manually to the 7-6 branch (0901b57),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6357,2021-07-02T15:59:17Z,2021-07-02T16:29:17Z,2021-10-20T14:53:41Z,MERGED,True,1,1,1,https://github.com/sdlime,Make sure requested class with mode=legendicon is not negative.,16,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6357,https://github.com/jmckenna,8,https://github.com/MapServer/MapServer/pull/6357#issuecomment-875004203,,"(I'm not aware of a problem with the GitHub action, it has been working great...anyway one manual cherry-pick is ok)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6358,2021-07-05T08:11:20Z,2021-07-11T10:23:01Z,2021-07-11T10:23:01Z,MERGED,True,42,22,22,https://github.com/geographika,Update Appveyor builds to Visual Studio 2019,1,[],https://github.com/mapserver/mapserver/pull/6358,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6358,"Updates the Appveyor Windows CI to use Visual Studio 2019, and the new MSVC 2019 release-1928-x64-dev buildkit from https://www.gisinternals.com/sdk.php

update to MSSQL 2019
updated to use PROJ7
test JSON results now all updated to include ""crs"": { ""type"": ""name"", ""properties"": { ""name"": ""urn:ogc:def:crs:EPSG::3857"" } }, - likey due to updates to the GDAL dependencies in the buildkit

One strange issue is that for JSON responses, there is now an additional \r in the break between the header output and the rest of the JSON response body. This broke the Python code to DEMIME a response in mapserver\msautotest\pymod\mstestlib.py
A fix was added to the Python code to get this working again, but an upstream fix would be better.","Updates the Appveyor Windows CI to use Visual Studio 2019, and the new MSVC 2019 release-1928-x64-dev buildkit from https://www.gisinternals.com/sdk.php

update to MSSQL 2019
updated to use PROJ7
test JSON results now all updated to include ""crs"": { ""type"": ""name"", ""properties"": { ""name"": ""urn:ogc:def:crs:EPSG::3857"" } }, - likey due to updates to the GDAL dependencies in the buildkit

One strange issue is that for JSON responses, there is now an additional \r in the break between the header output and the rest of the JSON response body. This broke the Python code to DEMIME a response in mapserver\msautotest\pymod\mstestlib.py
A fix was added to the Python code to get this working again, but an upstream fix would be better.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6358,2021-07-05T08:11:20Z,2021-07-11T10:23:01Z,2021-07-11T10:23:01Z,MERGED,True,42,22,22,https://github.com/geographika,Update Appveyor builds to Visual Studio 2019,1,[],https://github.com/mapserver/mapserver/pull/6358,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/6358#issuecomment-874964792,"Updates the Appveyor Windows CI to use Visual Studio 2019, and the new MSVC 2019 release-1928-x64-dev buildkit from https://www.gisinternals.com/sdk.php

update to MSSQL 2019
updated to use PROJ7
test JSON results now all updated to include ""crs"": { ""type"": ""name"", ""properties"": { ""name"": ""urn:ogc:def:crs:EPSG::3857"" } }, - likey due to updates to the GDAL dependencies in the buildkit

One strange issue is that for JSON responses, there is now an additional \r in the break between the header output and the rest of the JSON response body. This broke the Python code to DEMIME a response in mapserver\msautotest\pymod\mstestlib.py
A fix was added to the Python code to get this working again, but an upstream fix would be better.",I think the extra CR seem to be due to an update to the cURL dependency rather than any changes in the MapServer codebase.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6358,2021-07-05T08:11:20Z,2021-07-11T10:23:01Z,2021-07-11T10:23:01Z,MERGED,True,42,22,22,https://github.com/geographika,Update Appveyor builds to Visual Studio 2019,1,[],https://github.com/mapserver/mapserver/pull/6358,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/6358#issuecomment-875766093,"Updates the Appveyor Windows CI to use Visual Studio 2019, and the new MSVC 2019 release-1928-x64-dev buildkit from https://www.gisinternals.com/sdk.php

update to MSSQL 2019
updated to use PROJ7
test JSON results now all updated to include ""crs"": { ""type"": ""name"", ""properties"": { ""name"": ""urn:ogc:def:crs:EPSG::3857"" } }, - likey due to updates to the GDAL dependencies in the buildkit

One strange issue is that for JSON responses, there is now an additional \r in the break between the header output and the rest of the JSON response body. This broke the Python code to DEMIME a response in mapserver\msautotest\pymod\mstestlib.py
A fix was added to the Python code to get this working again, but an upstream fix would be better.",Unless @szekerest has any comments/objections I'll merge this in the next few days.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6358,2021-07-05T08:11:20Z,2021-07-11T10:23:01Z,2021-07-11T10:23:01Z,MERGED,True,42,22,22,https://github.com/geographika,Update Appveyor builds to Visual Studio 2019,1,[],https://github.com/mapserver/mapserver/pull/6358,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/6358#issuecomment-876460781,"Updates the Appveyor Windows CI to use Visual Studio 2019, and the new MSVC 2019 release-1928-x64-dev buildkit from https://www.gisinternals.com/sdk.php

update to MSSQL 2019
updated to use PROJ7
test JSON results now all updated to include ""crs"": { ""type"": ""name"", ""properties"": { ""name"": ""urn:ogc:def:crs:EPSG::3857"" } }, - likey due to updates to the GDAL dependencies in the buildkit

One strange issue is that for JSON responses, there is now an additional \r in the break between the header output and the rest of the JSON response body. This broke the Python code to DEMIME a response in mapserver\msautotest\pymod\mstestlib.py
A fix was added to the Python code to get this working again, but an upstream fix would be better.","I think the extra CR seem to be due to an update to the cURL dependency rather than any changes in the MapServer codebase.

That's weird. I don't see where curl is triggered by those tests.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6358,2021-07-05T08:11:20Z,2021-07-11T10:23:01Z,2021-07-11T10:23:01Z,MERGED,True,42,22,22,https://github.com/geographika,Update Appveyor builds to Visual Studio 2019,1,[],https://github.com/mapserver/mapserver/pull/6358,https://github.com/geographika,5,https://github.com/MapServer/MapServer/pull/6358#issuecomment-876482396,"Updates the Appveyor Windows CI to use Visual Studio 2019, and the new MSVC 2019 release-1928-x64-dev buildkit from https://www.gisinternals.com/sdk.php

update to MSSQL 2019
updated to use PROJ7
test JSON results now all updated to include ""crs"": { ""type"": ""name"", ""properties"": { ""name"": ""urn:ogc:def:crs:EPSG::3857"" } }, - likey due to updates to the GDAL dependencies in the buildkit

One strange issue is that for JSON responses, there is now an additional \r in the break between the header output and the rest of the JSON response body. This broke the Python code to DEMIME a response in mapserver\msautotest\pymod\mstestlib.py
A fix was added to the Python code to get this working again, but an upstream fix would be better.","I think the extra CR seem to be due to an update to the cURL dependency rather than any changes in the MapServer codebase.

That's weird. I don't see where curl is triggered by those tests.

On further thought probably nothing to do with cURL. There were no MapServer code changes as part of this pull request,  the ""only"" changes were  to the Appveyor image and the dependencies, so it could be one of:

Visual Studio 2017 > 2019
Windows Server 2016 > Windows Server 2019
Updates to a GDAL or Proj function used in MapServer?

Updating to the same SDK, VS2019, and MapServer codebase and running locally:",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6359,2021-07-05T11:23:02Z,2021-07-12T12:13:22Z,2021-07-13T20:26:53Z,MERGED,True,12,6,5,https://github.com/PatrikSylve,Change legend symbol scale factor when SIZEUNITS is set to METERS,6,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6359,https://github.com/PatrikSylve,1,https://github.com/MapServer/MapServer/pull/6359,"When SIZEUNITS METERS is set in LAYER, the symbol won't show in the legend. This is due to that the scale factor will get the value INFINTY.
Related issue:
#5096","When SIZEUNITS METERS is set in LAYER, the symbol won't show in the legend. This is due to that the scale factor will get the value INFINTY.
Related issue:
#5096",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6359,2021-07-05T11:23:02Z,2021-07-12T12:13:22Z,2021-07-13T20:26:53Z,MERGED,True,12,6,5,https://github.com/PatrikSylve,Change legend symbol scale factor when SIZEUNITS is set to METERS,6,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6359,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6359#issuecomment-875031168,"When SIZEUNITS METERS is set in LAYER, the symbol won't show in the legend. This is due to that the scale factor will get the value INFINTY.
Related issue:
#5096",Would a better test be when layer size units is not given in pixels?,True,{'THUMBS_UP': ['https://github.com/PatrikSylve']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6359,2021-07-05T11:23:02Z,2021-07-12T12:13:22Z,2021-07-13T20:26:53Z,MERGED,True,12,6,5,https://github.com/PatrikSylve,Change legend symbol scale factor when SIZEUNITS is set to METERS,6,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6359,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6359#issuecomment-877128491,"When SIZEUNITS METERS is set in LAYER, the symbol won't show in the legend. This is due to that the scale factor will get the value INFINTY.
Related issue:
#5096",@PatrikSylve if these tests pass we can include this in today's 7.6.4 release.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6359,2021-07-05T11:23:02Z,2021-07-12T12:13:22Z,2021-07-13T20:26:53Z,MERGED,True,12,6,5,https://github.com/PatrikSylve,Change legend symbol scale factor when SIZEUNITS is set to METERS,6,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6359,https://github.com/PatrikSylve,4,https://github.com/MapServer/MapServer/pull/6359#issuecomment-877135596,"When SIZEUNITS METERS is set in LAYER, the symbol won't show in the legend. This is due to that the scale factor will get the value INFINTY.
Related issue:
#5096","@PatrikSylve if these tests pass we can include this in today's 7.6.4 release.

Seems like the PDF image is still not passing the test here.
I had some issues with running the tests on my machine so I used the following command to generate the expected images:

./mapserv -nh ""QUERY_STRING=map=/home/patriksylve/code/MapServer/msautotest/renderers/legend_sizeunits_meters.map&mode=legend&map.imagetype=pdf"" >> img/legend_sizeunits_meters.pdf

The results look fine to me. Could it maybe be caused by differing dependency versions or something like that?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6359,2021-07-05T11:23:02Z,2021-07-12T12:13:22Z,2021-07-13T20:26:53Z,MERGED,True,12,6,5,https://github.com/PatrikSylve,Change legend symbol scale factor when SIZEUNITS is set to METERS,6,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6359,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/6359#issuecomment-877651072,"When SIZEUNITS METERS is set in LAYER, the symbol won't show in the legend. This is due to that the scale factor will get the value INFINTY.
Related issue:
#5096","@PatrikSylve I understand your frustration - I've now setup your branch locally on Windows here and 3 tests (out of 4) fail here for legend_sizeunits_meters.map (the non-cairo PNG, and the PDF & SVG.  (I can see one-digit precision differences in the SVG numbers)  Hmmmmmmm.....",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6359,2021-07-05T11:23:02Z,2021-07-12T12:13:22Z,2021-07-13T20:26:53Z,MERGED,True,12,6,5,https://github.com/PatrikSylve,Change legend symbol scale factor when SIZEUNITS is set to METERS,6,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6359,https://github.com/PatrikSylve,6,https://github.com/MapServer/MapServer/pull/6359#issuecomment-877822461,"When SIZEUNITS METERS is set in LAYER, the symbol won't show in the legend. This is due to that the scale factor will get the value INFINTY.
Related issue:
#5096","@jmckenna Hm ok. That is strange.
I managed to get the tests running on my linux now, and it now says that all 4 tests passed. I tried compiling mapserver on another linux as well and got the same result.
However, when i run local tests on legend.map the PDF-format fails, but the resulting legend.pdf has the same hash as the legend_sizeunits_meters.pdf. So I will try to commit the legend.pdf but renamed as legend_sixeuntis_meters.map. Hopefully the test will pass now.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6359,2021-07-05T11:23:02Z,2021-07-12T12:13:22Z,2021-07-13T20:26:53Z,MERGED,True,12,6,5,https://github.com/PatrikSylve,Change legend symbol scale factor when SIZEUNITS is set to METERS,6,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6359,https://github.com/PatrikSylve,7,https://github.com/MapServer/MapServer/pull/6359#issuecomment-877824505,"When SIZEUNITS METERS is set in LAYER, the symbol won't show in the legend. This is due to that the scale factor will get the value INFINTY.
Related issue:
#5096",Seems like it was different versions of cairo that caused the problem:,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6359,2021-07-05T11:23:02Z,2021-07-12T12:13:22Z,2021-07-13T20:26:53Z,MERGED,True,12,6,5,https://github.com/PatrikSylve,Change legend symbol scale factor when SIZEUNITS is set to METERS,6,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6359,https://github.com/jmckenna,8,https://github.com/MapServer/MapServer/pull/6359#issuecomment-878228670,"When SIZEUNITS METERS is set in LAYER, the symbol won't show in the legend. This is due to that the scale factor will get the value INFINTY.
Related issue:
#5096","Thanks for all of this effort @PatrikSylve !  (you're likely right, caused by Cairo version differences)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6359,2021-07-05T11:23:02Z,2021-07-12T12:13:22Z,2021-07-13T20:26:53Z,MERGED,True,12,6,5,https://github.com/PatrikSylve,Change legend symbol scale factor when SIZEUNITS is set to METERS,6,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6359,https://github.com/apps/github-actions,9,https://github.com/MapServer/MapServer/pull/6359#issuecomment-878229062,"When SIZEUNITS METERS is set in LAYER, the symbol won't show in the legend. This is due to that the scale factor will get the value INFINTY.
Related issue:
#5096","The backport to branch-7-6 failed:
The process '/usr/bin/git' failed with exit code 1

To backport manually, run these commands in your terminal:
# Fetch latest updates from GitHub
git fetch
# Create a new working tree
git worktree add .worktrees/backport-branch-7-6 branch-7-6
# Navigate to the new working tree
cd .worktrees/backport-branch-7-6
# Create a new branch
git switch --create backport-6359-to-branch-7-6
# Cherry-pick the merged commit of this pull request and resolve the conflicts
git cherry-pick b0b129bfaef3af82e0c8b5c6748a28de70b75b6c,3a49bab2da26fef4e7d28fffb2b754897abfbf6c,a90f9084381bb2c6a8e386021ddf0a1694b0c361,b4967bf8dba379cd03e4e2526da27bccf69d7ca9,9fe252bd0920570d2f67d830c9c97c0bce90945c,c429a062829c7ac672c9953226e31d049f8e609d
# Push it to GitHub
git push --set-upstream origin backport-6359-to-branch-7-6
# Go back to the original working tree
cd ../..
# Delete the working tree
git worktree remove .worktrees/backport-branch-7-6
Then, create a pull request where the base branch is branch-7-6 and the compare/head branch is backport-6359-to-branch-7-6.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6359,2021-07-05T11:23:02Z,2021-07-12T12:13:22Z,2021-07-13T20:26:53Z,MERGED,True,12,6,5,https://github.com/PatrikSylve,Change legend symbol scale factor when SIZEUNITS is set to METERS,6,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6359,https://github.com/jmckenna,10,https://github.com/MapServer/MapServer/pull/6359#issuecomment-878345172,"When SIZEUNITS METERS is set in LAYER, the symbol won't show in the legend. This is due to that the scale factor will get the value INFINTY.
Related issue:
#5096",This has been backported to branch-7-6 manually,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6360,2021-07-05T14:17:22Z,2021-07-06T18:40:39Z,2021-07-06T18:40:39Z,MERGED,True,15,10,1,https://github.com/jmckenna,minor updates to Contributing.md,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6360,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6360,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6361,2021-07-06T08:29:15Z,2021-07-08T14:01:56Z,2021-07-13T20:26:37Z,MERGED,True,70,60,1,https://github.com/WouterVisscher,spatialindex for sqlite sources in filter,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6361,https://github.com/WouterVisscher,1,https://github.com/MapServer/MapServer/pull/6361,"Description
(Like described in pull request #6356, but now the code is also updated to include Spatialite.)
Hi, we are running a multitute of MapServer+GPKG stacks and we recently upgraded our MapServers to 7.6.3 (+ cherrypicked #6325). With this new stack we noticed significant performance degradation, request that took +/-300ms now took up to 3.3sec with SQLite datasources.
After some investigation we looked at the SQL that is being generated for the GeoPackage & Spatialite and noticed that the query used with JOIN on the rtree tables incombination with the Intersects() and the ORDER BY causes the long running queries. Removing one of those 3 makes the queries run ""fast"" again but with of couse degradation in the quality of the resultset. Futher investigation on the result of the QUERY PLAN for the sql revealed the use of ""USE TEMP B-TREE FOR ORDER BY"" (note this was also already the case with the pre 7.6.3 queries, but those didn't have the Intersect() in their query). Using a TEMP B-TREE FOR ORDER BY can lead to performance issue (at least that is how we interpret the google/stackoverflow searches 😄 ), how this can be solved is by ""rewriting"" the SQL. Instead of making a JOIN but using a SUBQUERY the performance is uplifted to the ""old"" situation, while maintaining the Intersect() and ORDER BY.
So the JOIN that was build in the 'select' is moved to the 'filter' for Geopackage and Spatialite.
Notes
Like stated we are running multiple MapServer+GPKG stackes where the GPKG vary in size from quite small (couple of megabytes)) to large (multple gigabytes). We noticed this with GPKG of around 100 megabytes.
Query
old sql
SELECT ""pb_multipolygon"".""identificatie"" AS ""identificatie"", ""pb_multipolygon"".""domein"" AS ""domein"", ""pb_multipolygon"".""grondslag_code"" AS ""grondslag_code"", ""pb_multipolygon"".""grondslag_omschrijving"" AS ""grondslag_omschrijving"", ""pb_multipolygon"".""type_beperkingsgebied"" AS ""type_beperkingsgebied"", ""pb_multipolygon"".""datum_in_werking"" AS ""datum_in_werking"", ""pb_multipolygon"".""datum_beeindiging"" AS ""datum_beeindiging"", ""pb_multipolygon"".""datum_aanbieden_bestuursorgaan"" AS ""datum_aanbieden_bestuursorgaan"",""pb_multipolygon"".""tijdstip_inschrijven_kadaster"" AS ""tijdstip_inschrijven_kadaster"", ""pb_multipolygon"".""gebaseerd_op_stuk"" AS ""gebaseerd_op_stuk"", ""pb_multipolygon"".""datum_kenbaarheid"" AS ""datum_kenbaarheid"", ""pb_multipolygon"".""meerdere_brondocumenten_ingeschreven"" AS ""meerdere_brondocumenten_ingeschreven"", ""pb_multipolygon"".""statutaire_naam_bestuursorgaan"" AS ""statutaire_naam_bestuursorgaan"", ""pb_multipolygon"".""organisatie_informatie_nummer_oin"" AS ""organisatie_informatie_nummer_oin"", ""pb_multipolygon"".""puuid"" AS ""puuid"", ""pb_multipolygon"".""fuuid"" AS ""fuuid"", ""pb_multipolygon"".""geom"" AS ""geom""
  FROM ""pb_multipolygon"" JOIN ""rtree_pb_multipolygon_geom"" ms_spat_idx ON ""pb_multipolygon"".ROWID = ms_spat_idx.id AND ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 
 WHERE Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))
 ORDER BY ""pb_multipolygon"".ROWID 
 LIMIT 2 OFFSET 0 
new sql
SELECT ""pb_multipolygon"".""identificatie"" AS ""identificatie"", ""pb_multipolygon"".""domein"" AS ""domein"", ""pb_multipolygon"".""grondslag_code"" AS ""grondslag_code"", ""pb_multipolygon"".""grondslag_omschrijving"" AS ""grondslag_omschrijving"", ""pb_multipolygon"".""type_beperkingsgebied"" AS ""type_beperkingsgebied"", ""pb_multipolygon"".""datum_in_werking"" AS ""datum_in_werking"", ""pb_multipolygon"".""datum_beeindiging"" AS ""datum_beeindiging"", ""pb_multipolygon"".""datum_aanbieden_bestuursorgaan"" AS ""datum_aanbieden_bestuursorgaan"",""pb_multipolygon"".""tijdstip_inschrijven_kadaster"" AS ""tijdstip_inschrijven_kadaster"", ""pb_multipolygon"".""gebaseerd_op_stuk"" AS ""gebaseerd_op_stuk"", ""pb_multipolygon"".""datum_kenbaarheid"" AS ""datum_kenbaarheid"", ""pb_multipolygon"".""meerdere_brondocumenten_ingeschreven"" AS ""meerdere_brondocumenten_ingeschreven"", ""pb_multipolygon"".""statutaire_naam_bestuursorgaan"" AS ""statutaire_naam_bestuursorgaan"", ""pb_multipolygon"".""organisatie_informatie_nummer_oin"" AS ""organisatie_informatie_nummer_oin"", ""pb_multipolygon"".""puuid"" AS ""puuid"", ""pb_multipolygon"".""fuuid"" AS ""fuuid"", ""pb_multipolygon"".""geom"" AS ""geom"" 
  FROM ""pb_multipolygon""
 WHERE ""pb_multipolygon"".ROWID IN (SELECT ms_spat_idx.id 
                                     FROM ""rtree_pb_multipolygon_geom"" ms_spat_idx 
                                    WHERE ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 )
   AND Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))  
 ORDER BY ""pb_multipolygon"".ROWID 
 LIMIT 2 OFFSET 0
QUERY PLAN
The EXPLAIN QUERY PLAN now looks like this.
old plan



id
parent
notused
detail




8
0
0
SCAN TABLE rtree_pb_multipolygon_geom AS ms_spat_idx VIRTUAL TABLE INDEX 2:B0D1B2D3


16
0
0
SEARCH TABLE pb_multipolygon USING INTEGER PRIMARY KEY (rowid=?)


55
0
0
USE TEMP B-TREE FOR ORDER BY



new plan



id
parent
notused
detail




7
0
0
SEARCH TABLE pb_multipolygon USING INTEGER PRIMARY KEY (rowid=?)


11
0
0
LIST SUBQUERY 1


13
11
0
SCAN TABLE rtree_pb_multipolygon_geom AS ms_spat_idx VIRTUAL TABLE INDEX 2:B0D1B2D3



Tests
Some quick test regarding the old en new QUERY performance
Geopackage old
time ogrinfo wkpb-multipolygon.gpkg -sql ""SELECT COUNT(*) FROM ""pb_multipolygon"" JOIN ""rtree_pb_multipolygon_geom"" ms_spat_idx ON ""pb_multipolygon"".ROWID = ms_spat_idx.id AND ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999   WHERE Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))  ORDER BY ""pb_multipolygon"".ROWID LIMIT 2 OFFSET 0""
real    0m1.152s
user    0m0.971s
sys     0m0.181s
Geopackage new
time ogrinfo wkpb.gpkg -sql ""SELECT COUNT(*) FROM ""pb_multipolygon""  WHERE ""pb_multipolygon"".ROWID IN (SELECT ms_spat_idx.id  FROM ""rtree_pb_multipolygon_geom"" ms_spat_idx  WHERE ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 ) AND Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))    ORDER BY ""pb_multipolygon"".ROWID LIMIT 2 OFFSET 0""
real    0m0.571s
user    0m0.550s
sys     0m0.020s
Spatialite old
time ogrinfo wkpb-multipolygon.sqlite -sql ""SELECT COUNT(*) FROM ""pb_multipolygon"" JOIN ""idx_pb_multipolygon_geom"" ms_spat_idx ON ""pb_multipolygon"".ROWID = ms_spat_idx.pkid AND ms_spat_idx.xmin <= 280000.00001 AND ms_spat_idx.xmax >= -25000.00001 AND ms_spat_idx.ymin <= 860000.00001 AND ms_spat_idx.ymax >= 249999.99999 WHERE  Intersects(""geom"", BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010)) ORDER BY ""pb_multipolygon"".ROWID LIMIT 2 OFFSET 0""
real    0m0.896s
user    0m0.716s
sys     0m0.180s
Spatialite new
time ogrinfo wkpb-multipolygon.sqlite -sql ""SELECT COUNT(*) FROM ""pb_multipolygon"" WHERE ""pb_multipolygon"".ROWID IN (SELECT ms_spat_idx.pkid FROM ""idx_pb_multipolygon_geom"" ms_spat_idx WHERE ms_spat_idx.xmin <= 280000.00001 AND ms_spat_idx.xmax >= -25000.00001 AND ms_spat_idx.ymin <= 860000.00001 AND ms_spat_idx.ymax >= 249999.99999) AND Intersects(""geom"", BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010)) ORDER BY ""pb_multipolygon"".ROWID LIMIT 2 OFFSET 0""
real    0m0.417s
user    0m0.388s
sys     0m0.030s
This pull request
Like stated we replaced the JOIN with a SUBQUERY, when a GeoPackage or Spatialite is used, by moving the rtree part in the code from the 'select' to the 'filter'.
Resources
Used resources for the tests:

https://s3.delivery.pdok.nl/test/wkpb/wkpb-sqlite.map
https://s3.delivery.pdok.nl/test/wkpb/wkpb-multipolygon.gpkg
https://s3.delivery.pdok.nl/test/wkpb/wkpb-multipolygon.sqlite","Description
(Like described in pull request #6356, but now the code is also updated to include Spatialite.)
Hi, we are running a multitute of MapServer+GPKG stacks and we recently upgraded our MapServers to 7.6.3 (+ cherrypicked #6325). With this new stack we noticed significant performance degradation, request that took +/-300ms now took up to 3.3sec with SQLite datasources.
After some investigation we looked at the SQL that is being generated for the GeoPackage & Spatialite and noticed that the query used with JOIN on the rtree tables incombination with the Intersects() and the ORDER BY causes the long running queries. Removing one of those 3 makes the queries run ""fast"" again but with of couse degradation in the quality of the resultset. Futher investigation on the result of the QUERY PLAN for the sql revealed the use of ""USE TEMP B-TREE FOR ORDER BY"" (note this was also already the case with the pre 7.6.3 queries, but those didn't have the Intersect() in their query). Using a TEMP B-TREE FOR ORDER BY can lead to performance issue (at least that is how we interpret the google/stackoverflow searches 😄 ), how this can be solved is by ""rewriting"" the SQL. Instead of making a JOIN but using a SUBQUERY the performance is uplifted to the ""old"" situation, while maintaining the Intersect() and ORDER BY.
So the JOIN that was build in the 'select' is moved to the 'filter' for Geopackage and Spatialite.
Notes
Like stated we are running multiple MapServer+GPKG stackes where the GPKG vary in size from quite small (couple of megabytes)) to large (multple gigabytes). We noticed this with GPKG of around 100 megabytes.
Query
old sql
SELECT ""pb_multipolygon"".""identificatie"" AS ""identificatie"", ""pb_multipolygon"".""domein"" AS ""domein"", ""pb_multipolygon"".""grondslag_code"" AS ""grondslag_code"", ""pb_multipolygon"".""grondslag_omschrijving"" AS ""grondslag_omschrijving"", ""pb_multipolygon"".""type_beperkingsgebied"" AS ""type_beperkingsgebied"", ""pb_multipolygon"".""datum_in_werking"" AS ""datum_in_werking"", ""pb_multipolygon"".""datum_beeindiging"" AS ""datum_beeindiging"", ""pb_multipolygon"".""datum_aanbieden_bestuursorgaan"" AS ""datum_aanbieden_bestuursorgaan"",""pb_multipolygon"".""tijdstip_inschrijven_kadaster"" AS ""tijdstip_inschrijven_kadaster"", ""pb_multipolygon"".""gebaseerd_op_stuk"" AS ""gebaseerd_op_stuk"", ""pb_multipolygon"".""datum_kenbaarheid"" AS ""datum_kenbaarheid"", ""pb_multipolygon"".""meerdere_brondocumenten_ingeschreven"" AS ""meerdere_brondocumenten_ingeschreven"", ""pb_multipolygon"".""statutaire_naam_bestuursorgaan"" AS ""statutaire_naam_bestuursorgaan"", ""pb_multipolygon"".""organisatie_informatie_nummer_oin"" AS ""organisatie_informatie_nummer_oin"", ""pb_multipolygon"".""puuid"" AS ""puuid"", ""pb_multipolygon"".""fuuid"" AS ""fuuid"", ""pb_multipolygon"".""geom"" AS ""geom""
  FROM ""pb_multipolygon"" JOIN ""rtree_pb_multipolygon_geom"" ms_spat_idx ON ""pb_multipolygon"".ROWID = ms_spat_idx.id AND ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 
 WHERE Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))
 ORDER BY ""pb_multipolygon"".ROWID 
 LIMIT 2 OFFSET 0 
new sql
SELECT ""pb_multipolygon"".""identificatie"" AS ""identificatie"", ""pb_multipolygon"".""domein"" AS ""domein"", ""pb_multipolygon"".""grondslag_code"" AS ""grondslag_code"", ""pb_multipolygon"".""grondslag_omschrijving"" AS ""grondslag_omschrijving"", ""pb_multipolygon"".""type_beperkingsgebied"" AS ""type_beperkingsgebied"", ""pb_multipolygon"".""datum_in_werking"" AS ""datum_in_werking"", ""pb_multipolygon"".""datum_beeindiging"" AS ""datum_beeindiging"", ""pb_multipolygon"".""datum_aanbieden_bestuursorgaan"" AS ""datum_aanbieden_bestuursorgaan"",""pb_multipolygon"".""tijdstip_inschrijven_kadaster"" AS ""tijdstip_inschrijven_kadaster"", ""pb_multipolygon"".""gebaseerd_op_stuk"" AS ""gebaseerd_op_stuk"", ""pb_multipolygon"".""datum_kenbaarheid"" AS ""datum_kenbaarheid"", ""pb_multipolygon"".""meerdere_brondocumenten_ingeschreven"" AS ""meerdere_brondocumenten_ingeschreven"", ""pb_multipolygon"".""statutaire_naam_bestuursorgaan"" AS ""statutaire_naam_bestuursorgaan"", ""pb_multipolygon"".""organisatie_informatie_nummer_oin"" AS ""organisatie_informatie_nummer_oin"", ""pb_multipolygon"".""puuid"" AS ""puuid"", ""pb_multipolygon"".""fuuid"" AS ""fuuid"", ""pb_multipolygon"".""geom"" AS ""geom"" 
  FROM ""pb_multipolygon""
 WHERE ""pb_multipolygon"".ROWID IN (SELECT ms_spat_idx.id 
                                     FROM ""rtree_pb_multipolygon_geom"" ms_spat_idx 
                                    WHERE ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 )
   AND Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))  
 ORDER BY ""pb_multipolygon"".ROWID 
 LIMIT 2 OFFSET 0
QUERY PLAN
The EXPLAIN QUERY PLAN now looks like this.
old plan



id
parent
notused
detail




8
0
0
SCAN TABLE rtree_pb_multipolygon_geom AS ms_spat_idx VIRTUAL TABLE INDEX 2:B0D1B2D3


16
0
0
SEARCH TABLE pb_multipolygon USING INTEGER PRIMARY KEY (rowid=?)


55
0
0
USE TEMP B-TREE FOR ORDER BY



new plan



id
parent
notused
detail




7
0
0
SEARCH TABLE pb_multipolygon USING INTEGER PRIMARY KEY (rowid=?)


11
0
0
LIST SUBQUERY 1


13
11
0
SCAN TABLE rtree_pb_multipolygon_geom AS ms_spat_idx VIRTUAL TABLE INDEX 2:B0D1B2D3



Tests
Some quick test regarding the old en new QUERY performance
Geopackage old
time ogrinfo wkpb-multipolygon.gpkg -sql ""SELECT COUNT(*) FROM ""pb_multipolygon"" JOIN ""rtree_pb_multipolygon_geom"" ms_spat_idx ON ""pb_multipolygon"".ROWID = ms_spat_idx.id AND ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999   WHERE Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))  ORDER BY ""pb_multipolygon"".ROWID LIMIT 2 OFFSET 0""
real    0m1.152s
user    0m0.971s
sys     0m0.181s
Geopackage new
time ogrinfo wkpb.gpkg -sql ""SELECT COUNT(*) FROM ""pb_multipolygon""  WHERE ""pb_multipolygon"".ROWID IN (SELECT ms_spat_idx.id  FROM ""rtree_pb_multipolygon_geom"" ms_spat_idx  WHERE ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 ) AND Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))    ORDER BY ""pb_multipolygon"".ROWID LIMIT 2 OFFSET 0""
real    0m0.571s
user    0m0.550s
sys     0m0.020s
Spatialite old
time ogrinfo wkpb-multipolygon.sqlite -sql ""SELECT COUNT(*) FROM ""pb_multipolygon"" JOIN ""idx_pb_multipolygon_geom"" ms_spat_idx ON ""pb_multipolygon"".ROWID = ms_spat_idx.pkid AND ms_spat_idx.xmin <= 280000.00001 AND ms_spat_idx.xmax >= -25000.00001 AND ms_spat_idx.ymin <= 860000.00001 AND ms_spat_idx.ymax >= 249999.99999 WHERE  Intersects(""geom"", BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010)) ORDER BY ""pb_multipolygon"".ROWID LIMIT 2 OFFSET 0""
real    0m0.896s
user    0m0.716s
sys     0m0.180s
Spatialite new
time ogrinfo wkpb-multipolygon.sqlite -sql ""SELECT COUNT(*) FROM ""pb_multipolygon"" WHERE ""pb_multipolygon"".ROWID IN (SELECT ms_spat_idx.pkid FROM ""idx_pb_multipolygon_geom"" ms_spat_idx WHERE ms_spat_idx.xmin <= 280000.00001 AND ms_spat_idx.xmax >= -25000.00001 AND ms_spat_idx.ymin <= 860000.00001 AND ms_spat_idx.ymax >= 249999.99999) AND Intersects(""geom"", BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010)) ORDER BY ""pb_multipolygon"".ROWID LIMIT 2 OFFSET 0""
real    0m0.417s
user    0m0.388s
sys     0m0.030s
This pull request
Like stated we replaced the JOIN with a SUBQUERY, when a GeoPackage or Spatialite is used, by moving the rtree part in the code from the 'select' to the 'filter'.
Resources
Used resources for the tests:

https://s3.delivery.pdok.nl/test/wkpb/wkpb-sqlite.map
https://s3.delivery.pdok.nl/test/wkpb/wkpb-multipolygon.gpkg
https://s3.delivery.pdok.nl/test/wkpb/wkpb-multipolygon.sqlite",True,{'THUMBS_UP': ['https://github.com/boazhuisman']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6361,2021-07-06T08:29:15Z,2021-07-08T14:01:56Z,2021-07-13T20:26:37Z,MERGED,True,70,60,1,https://github.com/WouterVisscher,spatialindex for sqlite sources in filter,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6361,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6361#issuecomment-875031211,"Description
(Like described in pull request #6356, but now the code is also updated to include Spatialite.)
Hi, we are running a multitute of MapServer+GPKG stacks and we recently upgraded our MapServers to 7.6.3 (+ cherrypicked #6325). With this new stack we noticed significant performance degradation, request that took +/-300ms now took up to 3.3sec with SQLite datasources.
After some investigation we looked at the SQL that is being generated for the GeoPackage & Spatialite and noticed that the query used with JOIN on the rtree tables incombination with the Intersects() and the ORDER BY causes the long running queries. Removing one of those 3 makes the queries run ""fast"" again but with of couse degradation in the quality of the resultset. Futher investigation on the result of the QUERY PLAN for the sql revealed the use of ""USE TEMP B-TREE FOR ORDER BY"" (note this was also already the case with the pre 7.6.3 queries, but those didn't have the Intersect() in their query). Using a TEMP B-TREE FOR ORDER BY can lead to performance issue (at least that is how we interpret the google/stackoverflow searches 😄 ), how this can be solved is by ""rewriting"" the SQL. Instead of making a JOIN but using a SUBQUERY the performance is uplifted to the ""old"" situation, while maintaining the Intersect() and ORDER BY.
So the JOIN that was build in the 'select' is moved to the 'filter' for Geopackage and Spatialite.
Notes
Like stated we are running multiple MapServer+GPKG stackes where the GPKG vary in size from quite small (couple of megabytes)) to large (multple gigabytes). We noticed this with GPKG of around 100 megabytes.
Query
old sql
SELECT ""pb_multipolygon"".""identificatie"" AS ""identificatie"", ""pb_multipolygon"".""domein"" AS ""domein"", ""pb_multipolygon"".""grondslag_code"" AS ""grondslag_code"", ""pb_multipolygon"".""grondslag_omschrijving"" AS ""grondslag_omschrijving"", ""pb_multipolygon"".""type_beperkingsgebied"" AS ""type_beperkingsgebied"", ""pb_multipolygon"".""datum_in_werking"" AS ""datum_in_werking"", ""pb_multipolygon"".""datum_beeindiging"" AS ""datum_beeindiging"", ""pb_multipolygon"".""datum_aanbieden_bestuursorgaan"" AS ""datum_aanbieden_bestuursorgaan"",""pb_multipolygon"".""tijdstip_inschrijven_kadaster"" AS ""tijdstip_inschrijven_kadaster"", ""pb_multipolygon"".""gebaseerd_op_stuk"" AS ""gebaseerd_op_stuk"", ""pb_multipolygon"".""datum_kenbaarheid"" AS ""datum_kenbaarheid"", ""pb_multipolygon"".""meerdere_brondocumenten_ingeschreven"" AS ""meerdere_brondocumenten_ingeschreven"", ""pb_multipolygon"".""statutaire_naam_bestuursorgaan"" AS ""statutaire_naam_bestuursorgaan"", ""pb_multipolygon"".""organisatie_informatie_nummer_oin"" AS ""organisatie_informatie_nummer_oin"", ""pb_multipolygon"".""puuid"" AS ""puuid"", ""pb_multipolygon"".""fuuid"" AS ""fuuid"", ""pb_multipolygon"".""geom"" AS ""geom""
  FROM ""pb_multipolygon"" JOIN ""rtree_pb_multipolygon_geom"" ms_spat_idx ON ""pb_multipolygon"".ROWID = ms_spat_idx.id AND ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 
 WHERE Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))
 ORDER BY ""pb_multipolygon"".ROWID 
 LIMIT 2 OFFSET 0 
new sql
SELECT ""pb_multipolygon"".""identificatie"" AS ""identificatie"", ""pb_multipolygon"".""domein"" AS ""domein"", ""pb_multipolygon"".""grondslag_code"" AS ""grondslag_code"", ""pb_multipolygon"".""grondslag_omschrijving"" AS ""grondslag_omschrijving"", ""pb_multipolygon"".""type_beperkingsgebied"" AS ""type_beperkingsgebied"", ""pb_multipolygon"".""datum_in_werking"" AS ""datum_in_werking"", ""pb_multipolygon"".""datum_beeindiging"" AS ""datum_beeindiging"", ""pb_multipolygon"".""datum_aanbieden_bestuursorgaan"" AS ""datum_aanbieden_bestuursorgaan"",""pb_multipolygon"".""tijdstip_inschrijven_kadaster"" AS ""tijdstip_inschrijven_kadaster"", ""pb_multipolygon"".""gebaseerd_op_stuk"" AS ""gebaseerd_op_stuk"", ""pb_multipolygon"".""datum_kenbaarheid"" AS ""datum_kenbaarheid"", ""pb_multipolygon"".""meerdere_brondocumenten_ingeschreven"" AS ""meerdere_brondocumenten_ingeschreven"", ""pb_multipolygon"".""statutaire_naam_bestuursorgaan"" AS ""statutaire_naam_bestuursorgaan"", ""pb_multipolygon"".""organisatie_informatie_nummer_oin"" AS ""organisatie_informatie_nummer_oin"", ""pb_multipolygon"".""puuid"" AS ""puuid"", ""pb_multipolygon"".""fuuid"" AS ""fuuid"", ""pb_multipolygon"".""geom"" AS ""geom"" 
  FROM ""pb_multipolygon""
 WHERE ""pb_multipolygon"".ROWID IN (SELECT ms_spat_idx.id 
                                     FROM ""rtree_pb_multipolygon_geom"" ms_spat_idx 
                                    WHERE ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 )
   AND Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))  
 ORDER BY ""pb_multipolygon"".ROWID 
 LIMIT 2 OFFSET 0
QUERY PLAN
The EXPLAIN QUERY PLAN now looks like this.
old plan



id
parent
notused
detail




8
0
0
SCAN TABLE rtree_pb_multipolygon_geom AS ms_spat_idx VIRTUAL TABLE INDEX 2:B0D1B2D3


16
0
0
SEARCH TABLE pb_multipolygon USING INTEGER PRIMARY KEY (rowid=?)


55
0
0
USE TEMP B-TREE FOR ORDER BY



new plan



id
parent
notused
detail




7
0
0
SEARCH TABLE pb_multipolygon USING INTEGER PRIMARY KEY (rowid=?)


11
0
0
LIST SUBQUERY 1


13
11
0
SCAN TABLE rtree_pb_multipolygon_geom AS ms_spat_idx VIRTUAL TABLE INDEX 2:B0D1B2D3



Tests
Some quick test regarding the old en new QUERY performance
Geopackage old
time ogrinfo wkpb-multipolygon.gpkg -sql ""SELECT COUNT(*) FROM ""pb_multipolygon"" JOIN ""rtree_pb_multipolygon_geom"" ms_spat_idx ON ""pb_multipolygon"".ROWID = ms_spat_idx.id AND ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999   WHERE Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))  ORDER BY ""pb_multipolygon"".ROWID LIMIT 2 OFFSET 0""
real    0m1.152s
user    0m0.971s
sys     0m0.181s
Geopackage new
time ogrinfo wkpb.gpkg -sql ""SELECT COUNT(*) FROM ""pb_multipolygon""  WHERE ""pb_multipolygon"".ROWID IN (SELECT ms_spat_idx.id  FROM ""rtree_pb_multipolygon_geom"" ms_spat_idx  WHERE ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 ) AND Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))    ORDER BY ""pb_multipolygon"".ROWID LIMIT 2 OFFSET 0""
real    0m0.571s
user    0m0.550s
sys     0m0.020s
Spatialite old
time ogrinfo wkpb-multipolygon.sqlite -sql ""SELECT COUNT(*) FROM ""pb_multipolygon"" JOIN ""idx_pb_multipolygon_geom"" ms_spat_idx ON ""pb_multipolygon"".ROWID = ms_spat_idx.pkid AND ms_spat_idx.xmin <= 280000.00001 AND ms_spat_idx.xmax >= -25000.00001 AND ms_spat_idx.ymin <= 860000.00001 AND ms_spat_idx.ymax >= 249999.99999 WHERE  Intersects(""geom"", BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010)) ORDER BY ""pb_multipolygon"".ROWID LIMIT 2 OFFSET 0""
real    0m0.896s
user    0m0.716s
sys     0m0.180s
Spatialite new
time ogrinfo wkpb-multipolygon.sqlite -sql ""SELECT COUNT(*) FROM ""pb_multipolygon"" WHERE ""pb_multipolygon"".ROWID IN (SELECT ms_spat_idx.pkid FROM ""idx_pb_multipolygon_geom"" ms_spat_idx WHERE ms_spat_idx.xmin <= 280000.00001 AND ms_spat_idx.xmax >= -25000.00001 AND ms_spat_idx.ymin <= 860000.00001 AND ms_spat_idx.ymax >= 249999.99999) AND Intersects(""geom"", BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010)) ORDER BY ""pb_multipolygon"".ROWID LIMIT 2 OFFSET 0""
real    0m0.417s
user    0m0.388s
sys     0m0.030s
This pull request
Like stated we replaced the JOIN with a SUBQUERY, when a GeoPackage or Spatialite is used, by moving the rtree part in the code from the 'select' to the 'filter'.
Resources
Used resources for the tests:

https://s3.delivery.pdok.nl/test/wkpb/wkpb-sqlite.map
https://s3.delivery.pdok.nl/test/wkpb/wkpb-multipolygon.gpkg
https://s3.delivery.pdok.nl/test/wkpb/wkpb-multipolygon.sqlite","@WouterVisscher I believe your changes are failing in msautotest, in /MapServer/msautotest/wxs/wfs_ogr_native_sql.map (that contains a SQLite file) Can you take a look and test that locally?  (see how to run msautotest locally at https://mapserver.org/development/tests/autotest.html)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6361,2021-07-06T08:29:15Z,2021-07-08T14:01:56Z,2021-07-13T20:26:37Z,MERGED,True,70,60,1,https://github.com/WouterVisscher,spatialindex for sqlite sources in filter,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6361,https://github.com/WouterVisscher,3,https://github.com/MapServer/MapServer/pull/6361#issuecomment-875096422,"Description
(Like described in pull request #6356, but now the code is also updated to include Spatialite.)
Hi, we are running a multitute of MapServer+GPKG stacks and we recently upgraded our MapServers to 7.6.3 (+ cherrypicked #6325). With this new stack we noticed significant performance degradation, request that took +/-300ms now took up to 3.3sec with SQLite datasources.
After some investigation we looked at the SQL that is being generated for the GeoPackage & Spatialite and noticed that the query used with JOIN on the rtree tables incombination with the Intersects() and the ORDER BY causes the long running queries. Removing one of those 3 makes the queries run ""fast"" again but with of couse degradation in the quality of the resultset. Futher investigation on the result of the QUERY PLAN for the sql revealed the use of ""USE TEMP B-TREE FOR ORDER BY"" (note this was also already the case with the pre 7.6.3 queries, but those didn't have the Intersect() in their query). Using a TEMP B-TREE FOR ORDER BY can lead to performance issue (at least that is how we interpret the google/stackoverflow searches 😄 ), how this can be solved is by ""rewriting"" the SQL. Instead of making a JOIN but using a SUBQUERY the performance is uplifted to the ""old"" situation, while maintaining the Intersect() and ORDER BY.
So the JOIN that was build in the 'select' is moved to the 'filter' for Geopackage and Spatialite.
Notes
Like stated we are running multiple MapServer+GPKG stackes where the GPKG vary in size from quite small (couple of megabytes)) to large (multple gigabytes). We noticed this with GPKG of around 100 megabytes.
Query
old sql
SELECT ""pb_multipolygon"".""identificatie"" AS ""identificatie"", ""pb_multipolygon"".""domein"" AS ""domein"", ""pb_multipolygon"".""grondslag_code"" AS ""grondslag_code"", ""pb_multipolygon"".""grondslag_omschrijving"" AS ""grondslag_omschrijving"", ""pb_multipolygon"".""type_beperkingsgebied"" AS ""type_beperkingsgebied"", ""pb_multipolygon"".""datum_in_werking"" AS ""datum_in_werking"", ""pb_multipolygon"".""datum_beeindiging"" AS ""datum_beeindiging"", ""pb_multipolygon"".""datum_aanbieden_bestuursorgaan"" AS ""datum_aanbieden_bestuursorgaan"",""pb_multipolygon"".""tijdstip_inschrijven_kadaster"" AS ""tijdstip_inschrijven_kadaster"", ""pb_multipolygon"".""gebaseerd_op_stuk"" AS ""gebaseerd_op_stuk"", ""pb_multipolygon"".""datum_kenbaarheid"" AS ""datum_kenbaarheid"", ""pb_multipolygon"".""meerdere_brondocumenten_ingeschreven"" AS ""meerdere_brondocumenten_ingeschreven"", ""pb_multipolygon"".""statutaire_naam_bestuursorgaan"" AS ""statutaire_naam_bestuursorgaan"", ""pb_multipolygon"".""organisatie_informatie_nummer_oin"" AS ""organisatie_informatie_nummer_oin"", ""pb_multipolygon"".""puuid"" AS ""puuid"", ""pb_multipolygon"".""fuuid"" AS ""fuuid"", ""pb_multipolygon"".""geom"" AS ""geom""
  FROM ""pb_multipolygon"" JOIN ""rtree_pb_multipolygon_geom"" ms_spat_idx ON ""pb_multipolygon"".ROWID = ms_spat_idx.id AND ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 
 WHERE Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))
 ORDER BY ""pb_multipolygon"".ROWID 
 LIMIT 2 OFFSET 0 
new sql
SELECT ""pb_multipolygon"".""identificatie"" AS ""identificatie"", ""pb_multipolygon"".""domein"" AS ""domein"", ""pb_multipolygon"".""grondslag_code"" AS ""grondslag_code"", ""pb_multipolygon"".""grondslag_omschrijving"" AS ""grondslag_omschrijving"", ""pb_multipolygon"".""type_beperkingsgebied"" AS ""type_beperkingsgebied"", ""pb_multipolygon"".""datum_in_werking"" AS ""datum_in_werking"", ""pb_multipolygon"".""datum_beeindiging"" AS ""datum_beeindiging"", ""pb_multipolygon"".""datum_aanbieden_bestuursorgaan"" AS ""datum_aanbieden_bestuursorgaan"",""pb_multipolygon"".""tijdstip_inschrijven_kadaster"" AS ""tijdstip_inschrijven_kadaster"", ""pb_multipolygon"".""gebaseerd_op_stuk"" AS ""gebaseerd_op_stuk"", ""pb_multipolygon"".""datum_kenbaarheid"" AS ""datum_kenbaarheid"", ""pb_multipolygon"".""meerdere_brondocumenten_ingeschreven"" AS ""meerdere_brondocumenten_ingeschreven"", ""pb_multipolygon"".""statutaire_naam_bestuursorgaan"" AS ""statutaire_naam_bestuursorgaan"", ""pb_multipolygon"".""organisatie_informatie_nummer_oin"" AS ""organisatie_informatie_nummer_oin"", ""pb_multipolygon"".""puuid"" AS ""puuid"", ""pb_multipolygon"".""fuuid"" AS ""fuuid"", ""pb_multipolygon"".""geom"" AS ""geom"" 
  FROM ""pb_multipolygon""
 WHERE ""pb_multipolygon"".ROWID IN (SELECT ms_spat_idx.id 
                                     FROM ""rtree_pb_multipolygon_geom"" ms_spat_idx 
                                    WHERE ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 )
   AND Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))  
 ORDER BY ""pb_multipolygon"".ROWID 
 LIMIT 2 OFFSET 0
QUERY PLAN
The EXPLAIN QUERY PLAN now looks like this.
old plan



id
parent
notused
detail




8
0
0
SCAN TABLE rtree_pb_multipolygon_geom AS ms_spat_idx VIRTUAL TABLE INDEX 2:B0D1B2D3


16
0
0
SEARCH TABLE pb_multipolygon USING INTEGER PRIMARY KEY (rowid=?)


55
0
0
USE TEMP B-TREE FOR ORDER BY



new plan



id
parent
notused
detail




7
0
0
SEARCH TABLE pb_multipolygon USING INTEGER PRIMARY KEY (rowid=?)


11
0
0
LIST SUBQUERY 1


13
11
0
SCAN TABLE rtree_pb_multipolygon_geom AS ms_spat_idx VIRTUAL TABLE INDEX 2:B0D1B2D3



Tests
Some quick test regarding the old en new QUERY performance
Geopackage old
time ogrinfo wkpb-multipolygon.gpkg -sql ""SELECT COUNT(*) FROM ""pb_multipolygon"" JOIN ""rtree_pb_multipolygon_geom"" ms_spat_idx ON ""pb_multipolygon"".ROWID = ms_spat_idx.id AND ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999   WHERE Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))  ORDER BY ""pb_multipolygon"".ROWID LIMIT 2 OFFSET 0""
real    0m1.152s
user    0m0.971s
sys     0m0.181s
Geopackage new
time ogrinfo wkpb.gpkg -sql ""SELECT COUNT(*) FROM ""pb_multipolygon""  WHERE ""pb_multipolygon"".ROWID IN (SELECT ms_spat_idx.id  FROM ""rtree_pb_multipolygon_geom"" ms_spat_idx  WHERE ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 ) AND Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))    ORDER BY ""pb_multipolygon"".ROWID LIMIT 2 OFFSET 0""
real    0m0.571s
user    0m0.550s
sys     0m0.020s
Spatialite old
time ogrinfo wkpb-multipolygon.sqlite -sql ""SELECT COUNT(*) FROM ""pb_multipolygon"" JOIN ""idx_pb_multipolygon_geom"" ms_spat_idx ON ""pb_multipolygon"".ROWID = ms_spat_idx.pkid AND ms_spat_idx.xmin <= 280000.00001 AND ms_spat_idx.xmax >= -25000.00001 AND ms_spat_idx.ymin <= 860000.00001 AND ms_spat_idx.ymax >= 249999.99999 WHERE  Intersects(""geom"", BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010)) ORDER BY ""pb_multipolygon"".ROWID LIMIT 2 OFFSET 0""
real    0m0.896s
user    0m0.716s
sys     0m0.180s
Spatialite new
time ogrinfo wkpb-multipolygon.sqlite -sql ""SELECT COUNT(*) FROM ""pb_multipolygon"" WHERE ""pb_multipolygon"".ROWID IN (SELECT ms_spat_idx.pkid FROM ""idx_pb_multipolygon_geom"" ms_spat_idx WHERE ms_spat_idx.xmin <= 280000.00001 AND ms_spat_idx.xmax >= -25000.00001 AND ms_spat_idx.ymin <= 860000.00001 AND ms_spat_idx.ymax >= 249999.99999) AND Intersects(""geom"", BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010)) ORDER BY ""pb_multipolygon"".ROWID LIMIT 2 OFFSET 0""
real    0m0.417s
user    0m0.388s
sys     0m0.030s
This pull request
Like stated we replaced the JOIN with a SUBQUERY, when a GeoPackage or Spatialite is used, by moving the rtree part in the code from the 'select' to the 'filter'.
Resources
Used resources for the tests:

https://s3.delivery.pdok.nl/test/wkpb/wkpb-sqlite.map
https://s3.delivery.pdok.nl/test/wkpb/wkpb-multipolygon.gpkg
https://s3.delivery.pdok.nl/test/wkpb/wkpb-multipolygon.sqlite","@jmckenna build is failing because the query wants a ROWID on a view. (that's not possible, because those are NULL)
I ""removed"" to much of the old code with the move from the 'select -> 'filter'.
Need to add the if( psInfo->pszRowId ) clause and that will solve these last 2 issues",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6361,2021-07-06T08:29:15Z,2021-07-08T14:01:56Z,2021-07-13T20:26:37Z,MERGED,True,70,60,1,https://github.com/WouterVisscher,spatialindex for sqlite sources in filter,4,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6361,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/6361#issuecomment-876469403,"Description
(Like described in pull request #6356, but now the code is also updated to include Spatialite.)
Hi, we are running a multitute of MapServer+GPKG stacks and we recently upgraded our MapServers to 7.6.3 (+ cherrypicked #6325). With this new stack we noticed significant performance degradation, request that took +/-300ms now took up to 3.3sec with SQLite datasources.
After some investigation we looked at the SQL that is being generated for the GeoPackage & Spatialite and noticed that the query used with JOIN on the rtree tables incombination with the Intersects() and the ORDER BY causes the long running queries. Removing one of those 3 makes the queries run ""fast"" again but with of couse degradation in the quality of the resultset. Futher investigation on the result of the QUERY PLAN for the sql revealed the use of ""USE TEMP B-TREE FOR ORDER BY"" (note this was also already the case with the pre 7.6.3 queries, but those didn't have the Intersect() in their query). Using a TEMP B-TREE FOR ORDER BY can lead to performance issue (at least that is how we interpret the google/stackoverflow searches 😄 ), how this can be solved is by ""rewriting"" the SQL. Instead of making a JOIN but using a SUBQUERY the performance is uplifted to the ""old"" situation, while maintaining the Intersect() and ORDER BY.
So the JOIN that was build in the 'select' is moved to the 'filter' for Geopackage and Spatialite.
Notes
Like stated we are running multiple MapServer+GPKG stackes where the GPKG vary in size from quite small (couple of megabytes)) to large (multple gigabytes). We noticed this with GPKG of around 100 megabytes.
Query
old sql
SELECT ""pb_multipolygon"".""identificatie"" AS ""identificatie"", ""pb_multipolygon"".""domein"" AS ""domein"", ""pb_multipolygon"".""grondslag_code"" AS ""grondslag_code"", ""pb_multipolygon"".""grondslag_omschrijving"" AS ""grondslag_omschrijving"", ""pb_multipolygon"".""type_beperkingsgebied"" AS ""type_beperkingsgebied"", ""pb_multipolygon"".""datum_in_werking"" AS ""datum_in_werking"", ""pb_multipolygon"".""datum_beeindiging"" AS ""datum_beeindiging"", ""pb_multipolygon"".""datum_aanbieden_bestuursorgaan"" AS ""datum_aanbieden_bestuursorgaan"",""pb_multipolygon"".""tijdstip_inschrijven_kadaster"" AS ""tijdstip_inschrijven_kadaster"", ""pb_multipolygon"".""gebaseerd_op_stuk"" AS ""gebaseerd_op_stuk"", ""pb_multipolygon"".""datum_kenbaarheid"" AS ""datum_kenbaarheid"", ""pb_multipolygon"".""meerdere_brondocumenten_ingeschreven"" AS ""meerdere_brondocumenten_ingeschreven"", ""pb_multipolygon"".""statutaire_naam_bestuursorgaan"" AS ""statutaire_naam_bestuursorgaan"", ""pb_multipolygon"".""organisatie_informatie_nummer_oin"" AS ""organisatie_informatie_nummer_oin"", ""pb_multipolygon"".""puuid"" AS ""puuid"", ""pb_multipolygon"".""fuuid"" AS ""fuuid"", ""pb_multipolygon"".""geom"" AS ""geom""
  FROM ""pb_multipolygon"" JOIN ""rtree_pb_multipolygon_geom"" ms_spat_idx ON ""pb_multipolygon"".ROWID = ms_spat_idx.id AND ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 
 WHERE Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))
 ORDER BY ""pb_multipolygon"".ROWID 
 LIMIT 2 OFFSET 0 
new sql
SELECT ""pb_multipolygon"".""identificatie"" AS ""identificatie"", ""pb_multipolygon"".""domein"" AS ""domein"", ""pb_multipolygon"".""grondslag_code"" AS ""grondslag_code"", ""pb_multipolygon"".""grondslag_omschrijving"" AS ""grondslag_omschrijving"", ""pb_multipolygon"".""type_beperkingsgebied"" AS ""type_beperkingsgebied"", ""pb_multipolygon"".""datum_in_werking"" AS ""datum_in_werking"", ""pb_multipolygon"".""datum_beeindiging"" AS ""datum_beeindiging"", ""pb_multipolygon"".""datum_aanbieden_bestuursorgaan"" AS ""datum_aanbieden_bestuursorgaan"",""pb_multipolygon"".""tijdstip_inschrijven_kadaster"" AS ""tijdstip_inschrijven_kadaster"", ""pb_multipolygon"".""gebaseerd_op_stuk"" AS ""gebaseerd_op_stuk"", ""pb_multipolygon"".""datum_kenbaarheid"" AS ""datum_kenbaarheid"", ""pb_multipolygon"".""meerdere_brondocumenten_ingeschreven"" AS ""meerdere_brondocumenten_ingeschreven"", ""pb_multipolygon"".""statutaire_naam_bestuursorgaan"" AS ""statutaire_naam_bestuursorgaan"", ""pb_multipolygon"".""organisatie_informatie_nummer_oin"" AS ""organisatie_informatie_nummer_oin"", ""pb_multipolygon"".""puuid"" AS ""puuid"", ""pb_multipolygon"".""fuuid"" AS ""fuuid"", ""pb_multipolygon"".""geom"" AS ""geom"" 
  FROM ""pb_multipolygon""
 WHERE ""pb_multipolygon"".ROWID IN (SELECT ms_spat_idx.id 
                                     FROM ""rtree_pb_multipolygon_geom"" ms_spat_idx 
                                    WHERE ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 )
   AND Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))  
 ORDER BY ""pb_multipolygon"".ROWID 
 LIMIT 2 OFFSET 0
QUERY PLAN
The EXPLAIN QUERY PLAN now looks like this.
old plan



id
parent
notused
detail




8
0
0
SCAN TABLE rtree_pb_multipolygon_geom AS ms_spat_idx VIRTUAL TABLE INDEX 2:B0D1B2D3


16
0
0
SEARCH TABLE pb_multipolygon USING INTEGER PRIMARY KEY (rowid=?)


55
0
0
USE TEMP B-TREE FOR ORDER BY



new plan



id
parent
notused
detail




7
0
0
SEARCH TABLE pb_multipolygon USING INTEGER PRIMARY KEY (rowid=?)


11
0
0
LIST SUBQUERY 1


13
11
0
SCAN TABLE rtree_pb_multipolygon_geom AS ms_spat_idx VIRTUAL TABLE INDEX 2:B0D1B2D3



Tests
Some quick test regarding the old en new QUERY performance
Geopackage old
time ogrinfo wkpb-multipolygon.gpkg -sql ""SELECT COUNT(*) FROM ""pb_multipolygon"" JOIN ""rtree_pb_multipolygon_geom"" ms_spat_idx ON ""pb_multipolygon"".ROWID = ms_spat_idx.id AND ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999   WHERE Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))  ORDER BY ""pb_multipolygon"".ROWID LIMIT 2 OFFSET 0""
real    0m1.152s
user    0m0.971s
sys     0m0.181s
Geopackage new
time ogrinfo wkpb.gpkg -sql ""SELECT COUNT(*) FROM ""pb_multipolygon""  WHERE ""pb_multipolygon"".ROWID IN (SELECT ms_spat_idx.id  FROM ""rtree_pb_multipolygon_geom"" ms_spat_idx  WHERE ms_spat_idx.minx <= 280000.00001 AND ms_spat_idx.maxx >= -25000.00001 AND ms_spat_idx.miny <= 860000.00001 AND ms_spat_idx.maxy >= 249999.99999 ) AND Intersects(GeomFromGPB(""geom""), BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010))    ORDER BY ""pb_multipolygon"".ROWID LIMIT 2 OFFSET 0""
real    0m0.571s
user    0m0.550s
sys     0m0.020s
Spatialite old
time ogrinfo wkpb-multipolygon.sqlite -sql ""SELECT COUNT(*) FROM ""pb_multipolygon"" JOIN ""idx_pb_multipolygon_geom"" ms_spat_idx ON ""pb_multipolygon"".ROWID = ms_spat_idx.pkid AND ms_spat_idx.xmin <= 280000.00001 AND ms_spat_idx.xmax >= -25000.00001 AND ms_spat_idx.ymin <= 860000.00001 AND ms_spat_idx.ymax >= 249999.99999 WHERE  Intersects(""geom"", BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010)) ORDER BY ""pb_multipolygon"".ROWID LIMIT 2 OFFSET 0""
real    0m0.896s
user    0m0.716s
sys     0m0.180s
Spatialite new
time ogrinfo wkpb-multipolygon.sqlite -sql ""SELECT COUNT(*) FROM ""pb_multipolygon"" WHERE ""pb_multipolygon"".ROWID IN (SELECT ms_spat_idx.pkid FROM ""idx_pb_multipolygon_geom"" ms_spat_idx WHERE ms_spat_idx.xmin <= 280000.00001 AND ms_spat_idx.xmax >= -25000.00001 AND ms_spat_idx.ymin <= 860000.00001 AND ms_spat_idx.ymax >= 249999.99999) AND Intersects(""geom"", BuildMbr(-25000.000010,249999.999990,280000.000010,860000.000010)) ORDER BY ""pb_multipolygon"".ROWID LIMIT 2 OFFSET 0""
real    0m0.417s
user    0m0.388s
sys     0m0.030s
This pull request
Like stated we replaced the JOIN with a SUBQUERY, when a GeoPackage or Spatialite is used, by moving the rtree part in the code from the 'select' to the 'filter'.
Resources
Used resources for the tests:

https://s3.delivery.pdok.nl/test/wkpb/wkpb-sqlite.map
https://s3.delivery.pdok.nl/test/wkpb/wkpb-multipolygon.gpkg
https://s3.delivery.pdok.nl/test/wkpb/wkpb-multipolygon.sqlite",thanks again @WouterVisscher !,True,"{'THUMBS_UP': ['https://github.com/WouterVisscher', 'https://github.com/arbakker']}"
mapserver/mapserver,https://github.com/mapserver/mapserver,6362,2021-07-06T18:41:08Z,2021-07-06T19:26:28Z,2021-07-06T19:26:28Z,MERGED,True,15,10,1,https://github.com/apps/github-actions,[Backport branch-7-6] minor updates to Contributing.md,1,[],https://github.com/mapserver/mapserver/pull/6362,https://github.com/apps/github-actions,1,https://github.com/MapServer/MapServer/pull/6362,"Backport #6360
Authored by: @jmckenna","Backport #6360
Authored by: @jmckenna",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6363,2021-07-06T19:00:16Z,2021-07-06T20:13:07Z,2021-07-06T20:13:15Z,MERGED,True,1,1,1,https://github.com/jmckenna,upgrade Backport github action,1,[],https://github.com/mapserver/mapserver/pull/6363,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6363,"upgrade to recent release of m-kuhn/backport
in case old version is causing problems","upgrade to recent release of m-kuhn/backport
in case old version is causing problems",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6364,2021-07-08T12:27:20Z,2021-07-08T14:02:18Z,2021-07-13T20:26:12Z,MERGED,True,15,6,3,https://github.com/rouault,Coverity scan fixes,3,[],https://github.com/mapserver/mapserver/pull/6364,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6364,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6365,2021-07-08T14:02:25Z,2021-07-09T11:13:22Z,2021-07-09T12:49:48Z,MERGED,True,70,60,1,https://github.com/apps/github-actions,[Backport branch-7-6] spatialindex for sqlite sources in filter,4,[],https://github.com/mapserver/mapserver/pull/6365,https://github.com/apps/github-actions,1,https://github.com/MapServer/MapServer/pull/6365,"Backport #6361
Authored by: @WouterVisscher","Backport #6361
Authored by: @WouterVisscher",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6365,2021-07-08T14:02:25Z,2021-07-09T11:13:22Z,2021-07-09T12:49:48Z,MERGED,True,70,60,1,https://github.com/apps/github-actions,[Backport branch-7-6] spatialindex for sqlite sources in filter,4,[],https://github.com/mapserver/mapserver/pull/6365,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6365#issuecomment-876479578,"Backport #6361
Authored by: @WouterVisscher","@WouterVisscher I was going to write you earlier today, but here it goes now....  Would you mind testing this pull request locally today (I mean this branch-7-6 one)?  I'd like to include this/your changes in tomorrow's 7.6.4 release (well it was supposed to be last Friday, but I delayed so we can include your fixes here).  Is this a fair plan?  (asking this, is not a normal request, but, I can tell that you are also interested in having this included in 7.6.4, and I am too ha)    thanks.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6365,2021-07-08T14:02:25Z,2021-07-09T11:13:22Z,2021-07-09T12:49:48Z,MERGED,True,70,60,1,https://github.com/apps/github-actions,[Backport branch-7-6] spatialindex for sqlite sources in filter,4,[],https://github.com/mapserver/mapserver/pull/6365,https://github.com/WouterVisscher,3,https://github.com/MapServer/MapServer/pull/6365#issuecomment-876487079,"Backport #6361
Authored by: @WouterVisscher","@jmckenna I was already testing it 😄 (but I will focus on this branch)
And you are right regarding that I would like to see this in the 7.6.4 release 👍🏻
Between now and friday I'm probably only able to cover our on NSDI use cases... (but running it in production against heavy load is maybe ""a bridge too far"")",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6365,2021-07-08T14:02:25Z,2021-07-09T11:13:22Z,2021-07-09T12:49:48Z,MERGED,True,70,60,1,https://github.com/apps/github-actions,[Backport branch-7-6] spatialindex for sqlite sources in filter,4,[],https://github.com/mapserver/mapserver/pull/6365,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/6365#issuecomment-876492476,"Backport #6361
Authored by: @WouterVisscher","thanks @WouterVisscher and thanks for your understanding.  (I know this was a roundabout way, but you noticed that we got feedback in the main branch first, and now we can tackle the branch-7-6)  Please keep me posted here on your testing - true, there is no time for heavy-load testing.   thanks!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6365,2021-07-08T14:02:25Z,2021-07-09T11:13:22Z,2021-07-09T12:49:48Z,MERGED,True,70,60,1,https://github.com/apps/github-actions,[Backport branch-7-6] spatialindex for sqlite sources in filter,4,[],https://github.com/mapserver/mapserver/pull/6365,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/6365#issuecomment-877109354,"Backport #6361
Authored by: @WouterVisscher",@WouterVisscher merging this now....   (thanks again!),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6365,2021-07-08T14:02:25Z,2021-07-09T11:13:22Z,2021-07-09T12:49:48Z,MERGED,True,70,60,1,https://github.com/apps/github-actions,[Backport branch-7-6] spatialindex for sqlite sources in filter,4,[],https://github.com/mapserver/mapserver/pull/6365,https://github.com/WouterVisscher,6,https://github.com/MapServer/MapServer/pull/6365#issuecomment-877146846,"Backport #6361
Authored by: @WouterVisscher","@jmckenna regarding the (performance) testing I haven't been able to find anything, looks all good on our end.
I tested with GPKG's up to 5+ Gb (our National Cadastral Parcel dataset) and that worked very nicely, even the deep paging requests (in combination with FILTERS) performed like expected. 👍🏻",True,{'HEART': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6365,2021-07-08T14:02:25Z,2021-07-09T11:13:22Z,2021-07-09T12:49:48Z,MERGED,True,70,60,1,https://github.com/apps/github-actions,[Backport branch-7-6] spatialindex for sqlite sources in filter,4,[],https://github.com/mapserver/mapserver/pull/6365,https://github.com/jmckenna,7,https://github.com/MapServer/MapServer/pull/6365#issuecomment-877162844,"Backport #6361
Authored by: @WouterVisscher",Thanks @WouterVisscher (and on good-sized GPKG's!).  Excellent.  Thanks to you for all of these speed improvements.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6366,2021-07-09T10:27:44Z,2021-07-09T11:09:52Z,2021-07-13T20:25:59Z,MERGED,True,1,2,1,https://github.com/rouault,WFS: avoid accidental modification of element type in DescribeFeature…,1,[],https://github.com/mapserver/mapserver/pull/6366,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6366,"…Type response,
when using gml_types=auto with a layer that has a field 'layer' (fixes #5902)
Restrict the layer_type item to the wfs namespace (added
initially per c094341)
Analysis and suggested fix by:
Co-authored-by: Seth G sethg@geographika.co.uk","…Type response,
when using gml_types=auto with a layer that has a field 'layer' (fixes #5902)
Restrict the layer_type item to the wfs namespace (added
initially per c094341)
Analysis and suggested fix by:
Co-authored-by: Seth G sethg@geographika.co.uk",True,{'HOORAY': ['https://github.com/sbrunner']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6366,2021-07-09T10:27:44Z,2021-07-09T11:09:52Z,2021-07-13T20:25:59Z,MERGED,True,1,2,1,https://github.com/rouault,WFS: avoid accidental modification of element type in DescribeFeature…,1,[],https://github.com/mapserver/mapserver/pull/6366,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6366#issuecomment-877107636,"…Type response,
when using gml_types=auto with a layer that has a field 'layer' (fixes #5902)
Restrict the layer_type item to the wfs namespace (added
initially per c094341)
Analysis and suggested fix by:
Co-authored-by: Seth G sethg@geographika.co.uk",thanks @rouault and @geographika !!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6368,2021-07-09T13:20:01Z,2021-07-09T14:28:14Z,2021-07-09T14:28:14Z,MERGED,True,72,3,1,https://github.com/rouault,PostGIS backend: do not try fetching OID with PostgreSQL >= 12,1,[],https://github.com/mapserver/mapserver/pull/6368,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6368,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6368,2021-07-09T13:20:01Z,2021-07-09T14:28:14Z,2021-07-09T14:28:14Z,MERGED,True,72,3,1,https://github.com/rouault,PostGIS backend: do not try fetching OID with PostgreSQL >= 12,1,[],https://github.com/mapserver/mapserver/pull/6368,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6368#issuecomment-877229952,,thanks so much @rouault great work!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6369,2021-07-09T22:13:22Z,2021-07-12T14:50:46Z,2021-07-13T20:25:33Z,MERGED,True,22,5,1,https://github.com/rouault,PostGIS: fix ST_Intersects() with collections with PostGIS < 2.5.,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6369,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6369,"Fixes #6355 (comment)
CC @sdlime","Fixes #6355 (comment)
CC @sdlime",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6369,2021-07-09T22:13:22Z,2021-07-12T14:50:46Z,2021-07-13T20:25:33Z,MERGED,True,22,5,1,https://github.com/rouault,PostGIS: fix ST_Intersects() with collections with PostGIS < 2.5.,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6369,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6369#issuecomment-877525441,"Fixes #6355 (comment)
CC @sdlime",Thanks @rouault.  @sdlime could you test this?  (will include in 7.6.4),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6369,2021-07-09T22:13:22Z,2021-07-12T14:50:46Z,2021-07-13T20:25:33Z,MERGED,True,22,5,1,https://github.com/rouault,PostGIS: fix ST_Intersects() with collections with PostGIS < 2.5.,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6369,https://github.com/apps/github-actions,3,https://github.com/MapServer/MapServer/pull/6369#issuecomment-878344075,"Fixes #6355 (comment)
CC @sdlime","The backport to branch-7-6 failed:
The process '/usr/bin/git' failed with exit code 1

To backport manually, run these commands in your terminal:
# Fetch latest updates from GitHub
git fetch
# Create a new working tree
git worktree add .worktrees/backport-branch-7-6 branch-7-6
# Navigate to the new working tree
cd .worktrees/backport-branch-7-6
# Create a new branch
git switch --create backport-6369-to-branch-7-6
# Cherry-pick the merged commit of this pull request and resolve the conflicts
git cherry-pick 9e074ef78d00b7128879c90b6f7c500d389f6641
# Push it to GitHub
git push --set-upstream origin backport-6369-to-branch-7-6
# Go back to the original working tree
cd ../..
# Delete the working tree
git worktree remove .worktrees/backport-branch-7-6
Then, create a pull request where the base branch is branch-7-6 and the compare/head branch is backport-6369-to-branch-7-6.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6369,2021-07-09T22:13:22Z,2021-07-12T14:50:46Z,2021-07-13T20:25:33Z,MERGED,True,22,5,1,https://github.com/rouault,PostGIS: fix ST_Intersects() with collections with PostGIS < 2.5.,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6369,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/6369#issuecomment-878346725,"Fixes #6355 (comment)
CC @sdlime",I'm taking care of the backport,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6369,2021-07-09T22:13:22Z,2021-07-12T14:50:46Z,2021-07-13T20:25:33Z,MERGED,True,22,5,1,https://github.com/rouault,PostGIS: fix ST_Intersects() with collections with PostGIS < 2.5.,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6369,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/6369#issuecomment-878349189,"Fixes #6355 (comment)
CC @sdlime","@rouault thanks, I was looking at the code, thanks for tackling.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6369,2021-07-09T22:13:22Z,2021-07-12T14:50:46Z,2021-07-13T20:25:33Z,MERGED,True,22,5,1,https://github.com/rouault,PostGIS: fix ST_Intersects() with collections with PostGIS < 2.5.,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6369,https://github.com/sdlime,6,https://github.com/MapServer/MapServer/pull/6369#issuecomment-878402566,"Fixes #6355 (comment)
CC @sdlime","I can test when this hits branch-7-6...

From: Jeff McKenna ***@***.***>
Sent: Friday, July 9, 2021 7:48 PM
To: MapServer/MapServer ***@***.***>
Cc: Lime, Steve D (MNIT) ***@***.***>; Mention ***@***.***>
Subject: Re: [MapServer/MapServer] PostGIS: fix ST_Intersects() with collections with PostGIS < 2.5. (#6369)

This message may be from an external email source.
Do not select links or open attachments unless verified. Report all suspicious emails to Minnesota IT Services Security Operations Center.
…
________________________________

Thanks @rouault<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Frouault&data=04%7C01%7Csteve.lime%40state.mn.us%7C9d5772b1a4ae40fd3e4908d9433c622c%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637614748904203212%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=1sYsVNgvwfOyOdig3185tGWDddUJNS6qNRyteqHHxZY%3D&reserved=0>. @sdlime<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fsdlime&data=04%7C01%7Csteve.lime%40state.mn.us%7C9d5772b1a4ae40fd3e4908d9433c622c%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637614748904213168%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=4kSqa0bpyELXbP5d1Z2TVZGMrsRV82muIcy11a6%2FGzo%3D&reserved=0> could you test this? (will include in 7.6.4)

-
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FMapServer%2FMapServer%2Fpull%2F6369%23issuecomment-877525441&data=04%7C01%7Csteve.lime%40state.mn.us%7C9d5772b1a4ae40fd3e4908d9433c622c%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637614748904213168%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=wtztmLOM38tyhX%2F9n1iKlcNx2zwi2Mj8N1LgyIDMJeM%3D&reserved=0>, or unsubscribe<https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAAMGN6YBIXAOO7BYJYRABHTTW6KENANCNFSM5ADQTTOQ&data=04%7C01%7Csteve.lime%40state.mn.us%7C9d5772b1a4ae40fd3e4908d9433c622c%7Ceb14b04624c445198f26b89c2159828c%7C0%7C0%7C637614748904223153%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=XASlbHqf4ujk3EDLRxW0TuUYp7Xsp2sc13ms5xXL1PI%3D&reserved=0>.",True,{'THUMBS_UP': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6370,2021-07-10T20:15:24Z,2021-07-11T10:23:44Z,2021-07-13T20:25:12Z,MERGED,True,1,1,1,https://github.com/landryb,Fix python module installation with alternative root/prefix,1,[],https://github.com/mapserver/mapserver/pull/6370,https://github.com/landryb,1,https://github.com/MapServer/MapServer/pull/6370,"Trying to package/build mapserver head before 8.0, it failed for me during install/fake, as it tried writing to the system dirs in usr/local while CMAKE_INSTALL_PREFIX and DESTDIR were properly defined - and ignored.
i think this was an oversight in the large commit done in dd310d2. Not 100% confident about all cases, but this fixes the 'install to alternate dir' problem for me. Cmake expert feedback welcome :)","Trying to package/build mapserver head before 8.0, it failed for me during install/fake, as it tried writing to the system dirs in usr/local while CMAKE_INSTALL_PREFIX and DESTDIR were properly defined - and ignored.
i think this was an oversight in the large commit done in dd310d2. Not 100% confident about all cases, but this fixes the 'install to alternate dir' problem for me. Cmake expert feedback welcome :)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6370,2021-07-10T20:15:24Z,2021-07-11T10:23:44Z,2021-07-13T20:25:12Z,MERGED,True,1,1,1,https://github.com/landryb,Fix python module installation with alternative root/prefix,1,[],https://github.com/mapserver/mapserver/pull/6370,https://github.com/landryb,2,https://github.com/MapServer/MapServer/pull/6370#issuecomment-877698941,"Trying to package/build mapserver head before 8.0, it failed for me during install/fake, as it tried writing to the system dirs in usr/local while CMAKE_INSTALL_PREFIX and DESTDIR were properly defined - and ignored.
i think this was an oversight in the large commit done in dd310d2. Not 100% confident about all cases, but this fixes the 'install to alternate dir' problem for me. Cmake expert feedback welcome :)",the other fix would be to set Python_ROOT and Python_PREFIX in the lines above instead of setting their uppercase variants.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6370,2021-07-10T20:15:24Z,2021-07-11T10:23:44Z,2021-07-13T20:25:12Z,MERGED,True,1,1,1,https://github.com/landryb,Fix python module installation with alternative root/prefix,1,[],https://github.com/mapserver/mapserver/pull/6370,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/6370#issuecomment-877708835,"Trying to package/build mapserver head before 8.0, it failed for me during install/fake, as it tried writing to the system dirs in usr/local while CMAKE_INSTALL_PREFIX and DESTDIR were properly defined - and ignored.
i think this was an oversight in the large commit done in dd310d2. Not 100% confident about all cases, but this fixes the 'install to alternate dir' problem for me. Cmake expert feedback welcome :)","Looks good to me. The CMake Python variables are all named similar to Python_ROOT_DIR, whereas PYTHON_ROOT and PYTHON_PREFIX are custom variables that are set in the script and are case-sensitive.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6371,2021-07-12T15:05:20Z,2021-07-12T16:35:18Z,2021-07-12T16:46:35Z,MERGED,True,14,3,1,https://github.com/rouault,[Backport 7.6] PostGIS: fix ST_Intersects() with collections with PostGIS < 2.5,1,[],https://github.com/mapserver/mapserver/pull/6371,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6371,"Fixes #6355 (comment)
Backport of #6369","Fixes #6355 (comment)
Backport of #6369",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6371,2021-07-12T15:05:20Z,2021-07-12T16:35:18Z,2021-07-12T16:46:35Z,MERGED,True,14,3,1,https://github.com/rouault,[Backport 7.6] PostGIS: fix ST_Intersects() with collections with PostGIS < 2.5,1,[],https://github.com/mapserver/mapserver/pull/6371,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6371#issuecomment-878431900,"Fixes #6355 (comment)
Backport of #6369",I can confirm this change worked with my setup here. Thanks! --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6372,2021-07-12T20:44:04Z,2021-07-13T07:09:07Z,2021-07-13T07:09:08Z,MERGED,True,3,3,1,https://github.com/geographika,Fix broken mapfile doc references,1,[],https://github.com/mapserver/mapserver/pull/6372,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6372,"These ref links are used when generating the MapScript API documentation.
Highlighted by the nitpick Sphinx option - see MapServer/MapServer-documentation#582","These ref links are used when generating the MapScript API documentation.
Highlighted by the nitpick Sphinx option - see MapServer/MapServer-documentation#582",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6373,2021-07-13T11:42:37Z,2021-07-13T12:25:46Z,2021-07-13T12:25:46Z,MERGED,True,25,3,1,https://github.com/jmckenna,update history in main branch,1,[],https://github.com/mapserver/mapserver/pull/6373,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6373,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6375,2021-07-20T09:37:11Z,2021-07-20T16:03:47Z,2021-07-20T16:03:47Z,MERGED,True,0,1,1,https://github.com/gisspace,#6374 Opening and ending tag mismatch: template line 798 and apply-te…,1,[],https://github.com/mapserver/mapserver/pull/6375,https://github.com/gisspace,1,https://github.com/MapServer/MapServer/pull/6375,…mplates,…mplates,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6375,2021-07-20T09:37:11Z,2021-07-20T16:03:47Z,2021-07-20T16:03:47Z,MERGED,True,0,1,1,https://github.com/gisspace,#6374 Opening and ending tag mismatch: template line 798 and apply-te…,1,[],https://github.com/mapserver/mapserver/pull/6375,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6375#issuecomment-883511651,…mplates,thanks @gisspace !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6377,2021-07-28T12:14:09Z,2021-07-28T12:48:34Z,2021-07-28T12:48:34Z,MERGED,True,28,0,2,https://github.com/gisspace,"The ""composite"" is not described in the mapfile.xsl",1,[],https://github.com/mapserver/mapserver/pull/6377,https://github.com/gisspace,1,https://github.com/MapServer/MapServer/pull/6377,"#6376 fix The ""composite"" is not described in the mapfile.xsl","#6376 fix The ""composite"" is not described in the mapfile.xsl",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6377,2021-07-28T12:14:09Z,2021-07-28T12:48:34Z,2021-07-28T12:48:34Z,MERGED,True,28,0,2,https://github.com/gisspace,"The ""composite"" is not described in the mapfile.xsl",1,[],https://github.com/mapserver/mapserver/pull/6377,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6377#issuecomment-888280872,"#6376 fix The ""composite"" is not described in the mapfile.xsl",thanks @gisspace !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6380,2021-08-05T02:51:54Z,2021-08-05T14:46:10Z,2021-08-05T14:46:10Z,MERGED,True,0,2,1,https://github.com/gisspace,fix Label attribute duplicate error #6379,1,[],https://github.com/mapserver/mapserver/pull/6380,https://github.com/gisspace,1,https://github.com/MapServer/MapServer/pull/6380,update,update,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6380,2021-08-05T02:51:54Z,2021-08-05T14:46:10Z,2021-08-05T14:46:10Z,MERGED,True,0,2,1,https://github.com/gisspace,fix Label attribute duplicate error #6379,1,[],https://github.com/mapserver/mapserver/pull/6380,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6380#issuecomment-893518661,update,thanks @gisspace !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6382,2021-08-09T03:44:20Z,2021-08-09T05:47:46Z,2021-08-09T05:47:46Z,CLOSED,False,6,0,1,https://github.com/gisspace,add colorrange and datarange to mapfile.xsd #6381,2,[],https://github.com/mapserver/mapserver/pull/6382,https://github.com/gisspace,1,https://github.com/MapServer/MapServer/pull/6382,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6383,2021-08-09T06:35:51Z,2021-08-09T12:47:01Z,2021-08-09T12:47:01Z,MERGED,True,11,0,1,https://github.com/gisspace,add colorrange and datarange #6381,5,[],https://github.com/mapserver/mapserver/pull/6383,https://github.com/gisspace,1,https://github.com/MapServer/MapServer/pull/6383,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6383,2021-08-09T06:35:51Z,2021-08-09T12:47:01Z,2021-08-09T12:47:01Z,MERGED,True,11,0,1,https://github.com/gisspace,add colorrange and datarange #6381,5,[],https://github.com/mapserver/mapserver/pull/6383,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6383#issuecomment-895191085,,thanks @gisspace !!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6384,2021-08-11T15:22:18Z,2021-08-13T12:07:55Z,2021-08-13T12:07:55Z,MERGED,True,339,20,10,https://github.com/rouault,"Modify renderGlyphs() virtual method to pass the full textSymbolObj, …",1,[],https://github.com/mapserver/mapserver/pull/6384,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6384,"…and adapt KML renderer to it (fixes #6174)
Not appropriate for backport","…and adapt KML renderer to it (fixes #6174)
Not appropriate for backport",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6385,2021-08-11T16:12:14Z,2021-09-10T19:12:29Z,2021-09-14T17:26:11Z,MERGED,True,9,23,1,https://github.com/rouault,FastCGI signal handling: no longer do heavy work in the signal handler (fixes #6167),1,[],https://github.com/mapserver/mapserver/pull/6385,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6385,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6385,2021-08-11T16:12:14Z,2021-09-10T19:12:29Z,2021-09-14T17:26:11Z,MERGED,True,9,23,1,https://github.com/rouault,FastCGI signal handling: no longer do heavy work in the signal handler (fixes #6167),1,[],https://github.com/mapserver/mapserver/pull/6385,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6385#issuecomment-901227565,,Might this be related to the leak reported as part of the config file pull request?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6385,2021-08-11T16:12:14Z,2021-09-10T19:12:29Z,2021-09-14T17:26:11Z,MERGED,True,9,23,1,https://github.com/rouault,FastCGI signal handling: no longer do heavy work in the signal handler (fixes #6167),1,[],https://github.com/mapserver/mapserver/pull/6385,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/6385#issuecomment-901229506,,"Might this be related to the leak reported as part of the config file pull request?

that would be surprising. The leak in the config file pull request is in a pure CGI bin context. Here's this is FastCGI specific behavior",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6385,2021-08-11T16:12:14Z,2021-09-10T19:12:29Z,2021-09-14T17:26:11Z,MERGED,True,9,23,1,https://github.com/rouault,FastCGI signal handling: no longer do heavy work in the signal handler (fixes #6167),1,[],https://github.com/mapserver/mapserver/pull/6385,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/6385#issuecomment-902151381,,"Might this be related to the leak reported as part of the config file pull request?

that would be surprising. The leak in the config file pull request is in a pure CGI bin context. Here's this is FastCGI specific behavior

Actually it's a shp2img call using the -c argument so the map is drawn multiple times.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6385,2021-08-11T16:12:14Z,2021-09-10T19:12:29Z,2021-09-14T17:26:11Z,MERGED,True,9,23,1,https://github.com/rouault,FastCGI signal handling: no longer do heavy work in the signal handler (fixes #6167),1,[],https://github.com/mapserver/mapserver/pull/6385,https://github.com/sdlime,5,https://github.com/MapServer/MapServer/pull/6385#issuecomment-917118824,,Any reason not to merge this? --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6385,2021-08-11T16:12:14Z,2021-09-10T19:12:29Z,2021-09-14T17:26:11Z,MERGED,True,9,23,1,https://github.com/rouault,FastCGI signal handling: no longer do heavy work in the signal handler (fixes #6167),1,[],https://github.com/mapserver/mapserver/pull/6385,https://github.com/rouault,6,https://github.com/MapServer/MapServer/pull/6385#issuecomment-917147129,,"I was awaiting for feedback from the reporter of #6167 and his initial one wasn't so encouraging, but I don't think it was related. So yes, I'm merging this, and let's see how it flies.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6388,2021-08-20T22:48:33Z,2021-08-25T18:48:57Z,2021-08-25T18:49:18Z,MERGED,True,4460,10207,276,https://github.com/rouault,WMS capabilities output: increase precision of long/lat in bounding boxes to 6 decimal places (fixes #6387),5,[],https://github.com/mapserver/mapserver/pull/6388,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6388,,,True,"{'ROCKET': ['https://github.com/pedros007'], 'HOORAY': ['https://github.com/pedros007']}"
mapserver/mapserver,https://github.com/mapserver/mapserver,6388,2021-08-20T22:48:33Z,2021-08-25T18:48:57Z,2021-08-25T18:49:18Z,MERGED,True,4460,10207,276,https://github.com/rouault,WMS capabilities output: increase precision of long/lat in bounding boxes to 6 decimal places (fixes #6387),5,[],https://github.com/mapserver/mapserver/pull/6388,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6388#issuecomment-904934687,,@pedros007 can you confirm that this pull request fixes #6387 ?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6388,2021-08-20T22:48:33Z,2021-08-25T18:48:57Z,2021-08-25T18:49:18Z,MERGED,True,4460,10207,276,https://github.com/rouault,WMS capabilities output: increase precision of long/lat in bounding boxes to 6 decimal places (fixes #6387),5,[],https://github.com/mapserver/mapserver/pull/6388,https://github.com/pedros007,3,https://github.com/MapServer/MapServer/pull/6388#issuecomment-904947998,,"Yes, will do. Judging by the diff it looks good, but we'll load things into QGIS just to be sure. I'll write back when we have confirmed.",True,{'THUMBS_UP': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6388,2021-08-20T22:48:33Z,2021-08-25T18:48:57Z,2021-08-25T18:49:18Z,MERGED,True,4460,10207,276,https://github.com/rouault,WMS capabilities output: increase precision of long/lat in bounding boxes to 6 decimal places (fixes #6387),5,[],https://github.com/mapserver/mapserver/pull/6388,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/6388#issuecomment-904953366,,Last commit fixes the mystery of why the msautotest results had only 5 decimal figures instead of the expected 6 !,True,{'THUMBS_UP': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6388,2021-08-20T22:48:33Z,2021-08-25T18:48:57Z,2021-08-25T18:49:18Z,MERGED,True,4460,10207,276,https://github.com/rouault,WMS capabilities output: increase precision of long/lat in bounding boxes to 6 decimal places (fixes #6387),5,[],https://github.com/mapserver/mapserver/pull/6388,https://github.com/pedros007,5,https://github.com/MapServer/MapServer/pull/6388#issuecomment-905783531,,"Yes, this has fixed our issue.  Thanks!",True,{'THUMBS_UP': ['https://github.com/KarsenDL8']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6388,2021-08-20T22:48:33Z,2021-08-25T18:48:57Z,2021-08-25T18:49:18Z,MERGED,True,4460,10207,276,https://github.com/rouault,WMS capabilities output: increase precision of long/lat in bounding boxes to 6 decimal places (fixes #6387),5,[],https://github.com/mapserver/mapserver/pull/6388,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/6388#issuecomment-905786795,,thanks @pedros007 & @rouault !!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6389,2021-08-25T09:43:13Z,2021-08-25T10:25:57Z,2021-08-25T10:25:57Z,MERGED,True,1,1,1,https://github.com/rouault,MVT generation: fix writing of point/multipoint geometries,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6389,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6389,"The number associated with the MOVETO command should be the number of
coordinate pairs. We wrote twice that number. This caused for
example the OGR MVT driver to reject such geometries.","The number associated with the MOVETO command should be the number of
coordinate pairs. We wrote twice that number. This caused for
example the OGR MVT driver to reject such geometries.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6390,2021-08-25T10:26:21Z,2021-08-25T12:31:47Z,2021-08-25T12:31:47Z,MERGED,True,1,1,1,https://github.com/apps/github-actions,[Backport branch-7-6] MVT generation: fix writing of point/multipoint geometries,1,[],https://github.com/mapserver/mapserver/pull/6390,https://github.com/apps/github-actions,1,https://github.com/MapServer/MapServer/pull/6390,"Backport #6389
Authored by: @rouault","Backport #6389
Authored by: @rouault",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6391,2021-08-27T20:20:12Z,2021-08-30T12:49:32Z,2021-08-30T12:49:32Z,MERGED,True,1,1,1,https://github.com/jmckenna,bump check-CRLF action,1,[],https://github.com/mapserver/mapserver/pull/6391,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6391,"updates to latest release for the GitHub action, for checking line-endings","updates to latest release for the GitHub action, for checking line-endings",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6392,2021-08-27T20:38:35Z,2021-08-30T12:49:49Z,2021-08-30T16:19:55Z,MERGED,True,10,5,1,https://github.com/jmckenna,update SECURITY.md for supported versions,2,[],https://github.com/mapserver/mapserver/pull/6392,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6392,"according to the mapserver-dev thread (https://lists.osgeo.org/pipermail/mapserver-dev/2021-July/016572.html) and the recent discussion in the PSC meeting on 2021-08-26 (https://github.com/MapServer/MapServer/wiki/PSC-Meeting-2021-08-26)
this was the suggestion by Daniel, Even, Jeff (all with the same idea, yet different wording).
the wording that seems to be the most clear was provided by Daniel, and is used in this pull request","according to the mapserver-dev thread (https://lists.osgeo.org/pipermail/mapserver-dev/2021-July/016572.html) and the recent discussion in the PSC meeting on 2021-08-26 (https://github.com/MapServer/MapServer/wiki/PSC-Meeting-2021-08-26)
this was the suggestion by Daniel, Even, Jeff (all with the same idea, yet different wording).
the wording that seems to be the most clear was provided by Daniel, and is used in this pull request",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6392,2021-08-27T20:38:35Z,2021-08-30T12:49:49Z,2021-08-30T16:19:55Z,MERGED,True,10,5,1,https://github.com/jmckenna,update SECURITY.md for supported versions,2,[],https://github.com/mapserver/mapserver/pull/6392,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6392#issuecomment-907467425,"according to the mapserver-dev thread (https://lists.osgeo.org/pipermail/mapserver-dev/2021-July/016572.html) and the recent discussion in the PSC meeting on 2021-08-26 (https://github.com/MapServer/MapServer/wiki/PSC-Meeting-2021-08-26)
this was the suggestion by Daniel, Even, Jeff (all with the same idea, yet different wording).
the wording that seems to be the most clear was provided by Daniel, and is used in this pull request","I believe Daniel meant at the current time where 7.x is the active release both 7.6 and 6.4 (the latest branches in each series) would also be supported (not that I'm a big fan of this, but I understand his rationale)
When 8.0 is released, we would switch to 8.x and 7.6",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6392,2021-08-27T20:38:35Z,2021-08-30T12:49:49Z,2021-08-30T16:19:55Z,MERGED,True,10,5,1,https://github.com/jmckenna,update SECURITY.md for supported versions,2,[],https://github.com/mapserver/mapserver/pull/6392,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6392#issuecomment-907468721,"according to the mapserver-dev thread (https://lists.osgeo.org/pipermail/mapserver-dev/2021-July/016572.html) and the recent discussion in the PSC meeting on 2021-08-26 (https://github.com/MapServer/MapServer/wiki/PSC-Meeting-2021-08-26)
this was the suggestion by Daniel, Even, Jeff (all with the same idea, yet different wording).
the wording that seems to be the most clear was provided by Daniel, and is used in this pull request","Ah true, thanks, will update.  The rationale makes sense.   (I'm not the biggest fan either, but I agree with the rationale) updating now...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6392,2021-08-27T20:38:35Z,2021-08-30T12:49:49Z,2021-08-30T16:19:55Z,MERGED,True,10,5,1,https://github.com/jmckenna,update SECURITY.md for supported versions,2,[],https://github.com/mapserver/mapserver/pull/6392,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/6392#issuecomment-908427817,"according to the mapserver-dev thread (https://lists.osgeo.org/pipermail/mapserver-dev/2021-July/016572.html) and the recent discussion in the PSC meeting on 2021-08-26 (https://github.com/MapServer/MapServer/wiki/PSC-Meeting-2021-08-26)
this was the suggestion by Daniel, Even, Jeff (all with the same idea, yet different wording).
the wording that seems to be the most clear was provided by Daniel, and is used in this pull request","We did not patch latest 6.x with the last security release because of age - part of my rationale for setting some sort of a time limit. So, do we need to go back and patch that version or are we essentially considering it unsupported at this point and the SECURITY.md is forward thinking. I don't consider 6.x supported at this point.
We should also have backport workflows for the previous 2 branches - so a backport 7 and a backport 8 here soon.
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6392,2021-08-27T20:38:35Z,2021-08-30T12:49:49Z,2021-08-30T16:19:55Z,MERGED,True,10,5,1,https://github.com/jmckenna,update SECURITY.md for supported versions,2,[],https://github.com/mapserver/mapserver/pull/6392,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/6392#issuecomment-908434857,"according to the mapserver-dev thread (https://lists.osgeo.org/pipermail/mapserver-dev/2021-July/016572.html) and the recent discussion in the PSC meeting on 2021-08-26 (https://github.com/MapServer/MapServer/wiki/PSC-Meeting-2021-08-26)
this was the suggestion by Daniel, Even, Jeff (all with the same idea, yet different wording).
the wording that seems to be the most clear was provided by Daniel, and is used in this pull request","Will setup backport workflows for 8 and 7, during release day./",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6392,2021-08-27T20:38:35Z,2021-08-30T12:49:49Z,2021-08-30T16:19:55Z,MERGED,True,10,5,1,https://github.com/jmckenna,update SECURITY.md for supported versions,2,[],https://github.com/mapserver/mapserver/pull/6392,https://github.com/dmorissette,6,https://github.com/MapServer/MapServer/pull/6392#issuecomment-908454689,"according to the mapserver-dev thread (https://lists.osgeo.org/pipermail/mapserver-dev/2021-July/016572.html) and the recent discussion in the PSC meeting on 2021-08-26 (https://github.com/MapServer/MapServer/wiki/PSC-Meeting-2021-08-26)
this was the suggestion by Daniel, Even, Jeff (all with the same idea, yet different wording).
the wording that seems to be the most clear was provided by Daniel, and is used in this pull request","I found that a 1 year time limit was a bit short, but when I wrote my suggestion I didn't realize that 6.4.0 was released in 2013 - 8 years ago - which is definitely quite a stretch.  How about a 3 or 5 years time limit on patching the older release?
(The rationale for 3 to 5 years is to try to follow what distros such as Ubuntu do even if it's not a direct match. In the case of Ubuntu 20.04, it uses MapServer 7.4 and is supported until 2025)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6392,2021-08-27T20:38:35Z,2021-08-30T12:49:49Z,2021-08-30T16:19:55Z,MERGED,True,10,5,1,https://github.com/jmckenna,update SECURITY.md for supported versions,2,[],https://github.com/mapserver/mapserver/pull/6392,https://github.com/jmckenna,7,https://github.com/MapServer/MapServer/pull/6392#issuecomment-908467172,"according to the mapserver-dev thread (https://lists.osgeo.org/pipermail/mapserver-dev/2021-July/016572.html) and the recent discussion in the PSC meeting on 2021-08-26 (https://github.com/MapServer/MapServer/wiki/PSC-Meeting-2021-08-26)
this was the suggestion by Daniel, Even, Jeff (all with the same idea, yet different wording).
the wording that seems to be the most clear was provided by Daniel, and is used in this pull request","I personally think we don't have the funding to focus on years and math each time - since we are all volunteers here (and only a few care to take the time to make these patch releases), and this just adds confusion for the users, who never know what year a release was made. I again suggest to only support the previous 2 release branches (so when 8.0 is released, we support 8.0 and 7.6 branch, and when 8.2 is released we only support the 8.2 and 8.0 branches).  This means at the current status we would only support the 7.6 and 7.4 branches.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6392,2021-08-27T20:38:35Z,2021-08-30T12:49:49Z,2021-08-30T16:19:55Z,MERGED,True,10,5,1,https://github.com/jmckenna,update SECURITY.md for supported versions,2,[],https://github.com/mapserver/mapserver/pull/6392,https://github.com/sdlime,8,https://github.com/MapServer/MapServer/pull/6392#issuecomment-908478383,"according to the mapserver-dev thread (https://lists.osgeo.org/pipermail/mapserver-dev/2021-July/016572.html) and the recent discussion in the PSC meeting on 2021-08-26 (https://github.com/MapServer/MapServer/wiki/PSC-Meeting-2021-08-26)
this was the suggestion by Daniel, Even, Jeff (all with the same idea, yet different wording).
the wording that seems to be the most clear was provided by Daniel, and is used in this pull request","I'd opt for as short as folks feel is reasonable - I guess 3 would be ok but that's a long time. Note under this policy 7.4 will not get patches, only the latest in the 7.x release. How do we get the packagers on board - perhaps just stating things in a policy is good enough?

BTW 7.0 was released on 2015-07-24 so the support clock on latest in 6.x would start ticking on that date.

From: Daniel Morissette ***@***.***>
Sent: Monday, August 30, 2021 10:48 AM
To: MapServer/MapServer ***@***.***>
Cc: Lime, Steve D (MNIT) ***@***.***>; Comment ***@***.***>
Subject: Re: [MapServer/MapServer] update SECURITY.md for supported versions (#6392)
…
________________________________

I found that a 1 year time limit was a bit short, but when I wrote my suggestion I didn't realize that 6.4.0 was released in 2013 - 8 years ago - which is definitely quite a stretch. How about a 3 or 5 years time limit on patching the older release?

(The rationale for 3 to 5 years is to try to follow what distros such as Ubuntu do even if it's not a direct match. In the case of Ubuntu 20.04, it uses MapServer 7.4 and is supported until 2025)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6392,2021-08-27T20:38:35Z,2021-08-30T12:49:49Z,2021-08-30T16:19:55Z,MERGED,True,10,5,1,https://github.com/jmckenna,update SECURITY.md for supported versions,2,[],https://github.com/mapserver/mapserver/pull/6392,https://github.com/sdlime,9,https://github.com/MapServer/MapServer/pull/6392#issuecomment-908481073,"according to the mapserver-dev thread (https://lists.osgeo.org/pipermail/mapserver-dev/2021-July/016572.html) and the recent discussion in the PSC meeting on 2021-08-26 (https://github.com/MapServer/MapServer/wiki/PSC-Meeting-2021-08-26)
this was the suggestion by Daniel, Even, Jeff (all with the same idea, yet different wording).
the wording that seems to be the most clear was provided by Daniel, and is used in this pull request","I personally think we don't have the funding to focus on years and math each time - since we are all volunteers here (and only a few care to take the time to make these patch releases), and this just adds confusion for the users, who never know what year a release was made. I again suggest to only support the previous 2 release branches (so when 8.0 is released, we support 8.0 and 7.6 branch, and when 8.2 is released we only support the 8.2 and 8.0 branches). This means at the current status we would only support the 7.6 and 7.4 branches.

Actually we'd only support latest branch in the 7.x series - so 7.6.x.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/6400,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6400#issuecomment-912614340,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,"@jmckenna, @tomkralidis, @rouault  or anyone else - feedback is welcome. The main items addressed here thus far are:

fixing the API page rendering via Swagger (minor issue with openapi document)
getting paging controls working for collection/items
integrating Leaflet maps into collection/items and collection/items/{id}

One thing that probably needs to happen is figuring out how to integrate the value for oga_max_limit into the UI. There no point giving users a control that sets a limit to 10000 when it's configured for a max of 25.
Not sure what else needs addressing - perhaps we could add a task list to this pull request?

 Expose oga_max_limit for templating. Perhaps just reference the openapi document (JSON) in the collection-items.html template via AJAX since the necessary data is there. No need to bloat the template response object.
 Add favicon (.ico) using base64 encoding
 Add MapServer logo using base64 encoding
 Update Inja and look into callback to limit where included templates can live (see pantor/inja#167).

--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6400#issuecomment-921371448,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,"@sdlime sorry for the delay in feedback (better late than never, ha).  Looks great!  Below is some testing feedback on MS4W, using the old task list I had created earlier in another document (which tried to collect the ideas/wishlist from everyone at the time) :
View of (new) API Documentation
(for those who haven't seen it yet...)

Original issues (and updated status)

issue: cleaning the onlineresource of ""?"" or ""/"" ending characters, as it causes problems in HTML landing pages (double-slashes in links, or the ""?"" will actually break all links)

status: problem still exists ❌


issue: compile fails without enabling -DUSE_WFS_SVR (as well as the obvious -DUSE_OGCAPI_SVR)

status: I cannot reproduce this, maybe someone else reported ❓


task: add ows_contact* information to the landing page (from the associated values set in the mapfile)

status: it was added onto the API documentation/Swagger page, but not the landing page ❓


wishlist: besides the ""/ogcapi"" API signature (for features, maps..support), also allow ""/features"" (to allow developers to only request vector collections), for example:
 http://127.0.0.1/cgi-bin/mapserv.exe/demo-ogcapi/features

(Note that is how the GeoServer implementation works)
wishlist: include MapServer logo on landing page ✔️
wishlist: set MapServer favicon for all HTML pages ✔️
wishlist: allow other link types for collection item (set through mimetype/outputformats in mapfile?)
wishlist: instead of text links, use a dropdown for types (JSON, HTML, KML, etc.)
wishlist: for the single layer map, include a dropdown to set the default number of features displayed in the map:
  10 [default]
  100
  1000 


wishlist: for the single layer map, display the current MapServer scale value below the map (as user zooms in, update the scale with the CGI [scale] value)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/geographika,4,https://github.com/MapServer/MapServer/pull/6400#issuecomment-921771946,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,"@sdlime - some further feedback from testing.

There seem to be issues (at least on IIS) when trying to calculate the root API in getApiRootUrl:


  
    
      MapServer/mapogcapi.cpp
    
    
         Line 282
      in
      17d8fa9
    
  
  
    

        
          
           return ""http://"" + std::string(getenv(""SERVER_NAME"")) + "":"" + std::string(getenv(""SERVER_PORT"")) + std::string(getenv(""SCRIPT_NAME"")) + std::string(getenv(""PATH_INFO"")); 
        
    
  


A URL such as http://localhost/mapserver/mymap/ogcapi/collections/MyDataSet/items?f=html returns the following server variables in IIS:

SERVER_NAME: localhost
SERVER_PORT: 80
SCRIPT_NAME: /mapserver
PATH_INFO: /mymap/ogcapi/collections/MyDataSet/items

Then when constructing URLs such as here:

  
    
      MapServer/mapogcapi.cpp
    
    
         Line 1194
      in
      17d8fa9
    
  
  
    

        
          
           { ""href"", api_root + ""/collections/"" + std::string(id_encoded) + ""?f=json"" } 
        
    
  


The URL created for the template is http://localhost/mapserver/mymap/ogcapi/collections/MyDataSet/items/collections?f=html
collections is added twice and the result link then returns {""code"":""NotFound"",""description"":""Collection items id query failed.""}
The good new is that setting the WEB METADATA option fixes all these links:
""oga_onlineresource"" ""http://localhost/mapserver/mymap/ogcapi""

Again when using IIS (could be the same on other servers?), any cookie values sent to the server are seen as parameters. The following code then throws an error when a cookie is included in the request:


  
    
      MapServer/mapogcapi.cpp
    
    
        Lines 990 to 992
      in
      17d8fa9
    
  
  
    

        
          
           outputError(OGCAPI_PARAM_ERROR, 
        

        
          
               (std::string(""Unknown query parameter: "") + paramName).c_str()); 
        

        
          
           return MS_SUCCESS; 
        
    
  


{""code"":""InvalidParamterValue"",""description"":""Unknown query parameter: ASP.NET_SessionId""}
Could the check simply be removed?
Deleting the cookie allows the site to run, but if the URL is shared with another application then this will cause issues.

As mentioned in the previous comment every layer in the mapfile requires ""ows_extent"" to be set.
However navigating to http://localhost/mapserver/mymap/ogcapi/api throws HTTP 500 errors if any layers are missing the following: ""ows_title"" or missing one of ""oga_description"" or ""ows_abstract"" - the strings are then NULL which crashes the JSON templating. Relevant lines:


  
    
      MapServer/mapogcapi.cpp
    
    
         Line 1443
      in
      17d8fa9
    
  
  
    

        
          
           { ""summary"", std::string(""Get "") + getCollectionTitle(layer) + "" items"" }, 
        
    
  



  
    
      MapServer/mapogcapi.cpp
    
    
         Line 1444
      in
      17d8fa9
    
  
  
    

        
          
           { ""description"", getCollectionDescription(layer) }, 
        
    
  


After updating the Mapfile (with 90+ layers) everything worked perfectly - this is such an amazingly powerful addition to MapServer - many thanks!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/sdlime,5,https://github.com/MapServer/MapServer/pull/6400#issuecomment-922000212,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,"@sdlime - some further feedback from testing.

Thanks so much for the testing! I figured we might have an IIS'ism or two to deal with.


There seem to be issues (at least on IIS) when trying to calculate the root API in getApiRootUrl:


Trying to compute is a last resort - it's the same approach taken with the WxS services I believe.  So setting ""oga_onlineresource"" is definitely going to be recommended and apparently required for IIS. I think this is a documentation issue...


Again when using IIS (could be the same on other servers?), any cookie values sent to the server are seen as parameters. The following code then throws an error when a cookie is included in the request:


Oh, good catch. This would apply to all servers/platforms. @rouault had added that check when he was fixing up my code. I believe that check is only done with a collection/items request. That behavior is consistent with pygeoapi so I wonder if that is part of the OGC specification, @tomkralidis? I suppose there are 2 fixes:

Remove the check and simply ignore any extra parameters.
Remove treating cookies as parameters. It's a big hammer but I wonder if it's really necessary functionality. It's definitely very old and I don't believe it was driven by anything other than convenience.



As mentioned in the previous comment every layer in the mapfile requires ""ows_extent"" to be set.
However navigating to http://localhost/mapserver/mymap/ogcapi/api throws HTTP 500 errors if any layers are missing the following: ""ows_title"" or missing one of ""oga_description"" or ""ows_abstract"" - the strings are then NULL which crashes the JSON templating.


Definitely a bug...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/tomkralidis,6,https://github.com/MapServer/MapServer/pull/6400#issuecomment-922006325,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,"Again when using IIS (could be the same on other servers?), any cookie values sent to the server are seen as parameters. The following code then throws an error when a cookie is included in the request:

Oh, good catch. This would apply to all servers/platforms. @rouault had added that check when he was fixing up my code. I believe that check is only done with a collection/items request. That behavior is consistent with pygeoapi so I wonder if that is part of the OGC specification, @tomkralidis?

See ATS 21 from OAFeat.  It's expected to throw a 400 when encountering a query parameter that is not part of the API definition.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/sdlime,7,https://github.com/MapServer/MapServer/pull/6400#issuecomment-922010627,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,"Again when using IIS (could be the same on other servers?), any cookie values sent to the server are seen as parameters. The following code then throws an error when a cookie is included in the request:

Oh, good catch. This would apply to all servers/platforms. @rouault had added that check when he was fixing up my code. I believe that check is only done with a collection/items request. That behavior is consistent with pygeoapi so I wonder if that is part of the OGC specification, @tomkralidis?

See ATS 21 from OAFeat. It's expected to throw a 400 when encountering a query parameter that is not part of the API definition.

Hmmmm... Pygeoapi does error on collection/items but not elsewhere. For example, https://demo.pygeoapi.io/master/collections?f=html&foo=bar resolves correctly. I guess it depends on if  a query parameter refers to filtering the data or anything in the QUERY_STRING. I see this also being a limitation when using these services with AJAX clients. For example, jquery tags on a parameter like ""_=1631904651203"" to make a call unique and that generates an error with pygeoapi and MapServer collection/items requests (JSON or HTML).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/tomkralidis,8,https://github.com/MapServer/MapServer/pull/6400#issuecomment-922024838,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,Perhaps then the OAFeat CITE tests need to updated if ATS 21 interpreted differently?  Have we tried running a demo against CITE?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/rouault,9,https://github.com/MapServer/MapServer/pull/6400#issuecomment-922077273,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,"Have we tried running a demo against CITE?

If my memories don't lie, I did when I submitted several fixes, and they ended up green. But CITE tests don't necessarily fully and perfectly test a spec",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/sdlime,10,https://github.com/MapServer/MapServer/pull/6400#issuecomment-923378405,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,"As mentioned in the previous comment every layer in the mapfile requires ""ows_extent"" to be set.


@geographika, I don't believe ows_extent is required. None of my test mapfiles have that set so it's being computed.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/geographika,11,https://github.com/MapServer/MapServer/pull/6400#issuecomment-923415937,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,"@geographika, I don't believe ows_extent is required. None of my test mapfiles have that set so it's being computed.

Looking at the code it should end up calling msLayerGetExtent if no metadata or LAYER EXTENT is found. I'll check my layers again - there could be a non-spatial layer somewhere in there causing this. So looks like a local issue to my setup.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/geographika,12,https://github.com/MapServer/MapServer/pull/6400#issuecomment-924455055,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,"@sdlime - ignore the extent issue - this seems to only occur on layers without geometries (attributes only). It does however cause the whole catalog page to load.
I've been testing out the OGC Features API setup on the Itasca demo - see https://github.com/MapServer/MapServer-demo/pull/7/files
One issue I ran into was if I don't specify a projection block on a layer then the GeoJSON coordinates are returned in 'init=epsg:26915'  coords and don't display properly in the preview maps.
If I add a projection block to the layer then they are returned in epsg:4326 as per the spec and all is fine:
Following works:
  LAYER
    NAME airports
    TYPE POINT
    DATA airports
    PROJECTION
        'init=epsg:26915' 
    END

According to https://mapserver.org/mapfile/projection.html#important-notes

If all of your data in the mapfile is in the same projection, you DO NOT have to specify any projection objects. MapServer will assume that all of the data is in the same projection.

Is this an error with the docs or should the OGC Features API be reprojecting these features without each LAYER requiring its PROJECTION block?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/geographika,13,https://github.com/MapServer/MapServer/pull/6400#issuecomment-924866135,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,"@sdlime - also another item, maybe just something to document. If a layer doesn't have a template, and is therefore not queryable:

  
    
      MapServer/mapquery.c
    
    
         Line 140
      in
      f9a2df8
    
  
  
    

        
          
           int msIsLayerQueryable(layerObj *lp) 
        
    
  


Then the error {""code"":""NotFound"",""description"":""Collection items query failed.""} is returned when accessing and ot the items API points e.g. ogcapi/collections/mcd90py2_anno/items:

  
    
      MapServer/mapogcapi.cpp
    
    
         Line 1009
      in
      f9a2df8
    
  
  
    

        
          
           outputError(OGCAPI_NOT_FOUND_ERROR, ""Collection items query failed.""); 
        
    
  


Is the whole mechanism of requiring LAYER TEMPLATE being set still valid within MapServer? Adding LAYER TEMPLATE ""ttt"" seems to be almost required now to do most things in MapServer even if no templates are ever used.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/jratike80,14,https://github.com/MapServer/MapServer/pull/6400#issuecomment-924877201,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,"OAPIF feels the same as WFS and WFS does not require templates, enabling the service with ""wfs_enable_request"" is enough.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/geographika,15,https://github.com/MapServer/MapServer/pull/6400#issuecomment-924888079,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,"One issue I ran into was if I don't specify a projection block on a layer then the GeoJSON coordinates are returned in 'init=epsg:26915'  coords and don't display properly in the preview maps.

It looks like it was an issue with CMAKE not picking up PROJ_VERSION_MAJOR correctly, and therefore not copying the projection from the map to layer on initialisation.
Even when fixed this still seems to occur. I thought the following line set the LAYER PROJECTION to MAP PROJECTION if none was set, but msProjectionInheritContextFrom does not seem to do what I thought it did.

  
    
      MapServer/mapfile.c
    
    
         Line 3510
      in
      f9a2df8
    
  
  
    

        
          
           msProjectionInheritContextFrom(&(layer->projection), &(map->projection));",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/geographika,16,https://github.com/MapServer/MapServer/pull/6400#issuecomment-924889233,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,"OAPIF feels the same as WFS and WFS does not require templates, enabling the service with ""wfs_enable_request"" is enough.

Does this work currently? I can't see how this is set in the code (maybe a fake template added automatically?) msIsLayerQueryable (which checks for a layer or class template) seems to be called for any MS query.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/jratike80,17,https://github.com/MapServer/MapServer/pull/6400#issuecomment-924929768,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,"Does this work currently? I can't see how this is set in the code (maybe a fake template added automatically?) msIsLayerQueryable (which checks for a layer or class template) seems to be called for any MS query.

I don't have Mapserver 8 for testing. In my old mapfiles I have also ""gml_include_items"" ""all"" if that matters.
But I would think that ""wfs_enable_request"" overrides the existence of template anyway. If value ""*"" or ""GetFeature"" is not found the layer should not be queryable for WFS. Queryable for WMS GetFeatureInfo is another thing.
There seems to be a check for this for example in https://github.com/MapServer/MapServer/blob/main/mapwfs.cpp:
msOWSRequestIsEnabled",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/sdlime,18,https://github.com/MapServer/MapServer/pull/6400#issuecomment-925040330,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,"@sdlime - also another item, maybe just something to document. If a layer doesn't have a template, and is therefore not queryable:

  
    
      MapServer/mapquery.c
    
    
         Line 140
      in
      f9a2df8
    
  
  
    

        
          
           int msIsLayerQueryable(layerObj *lp) 
        
    
  


Then the error {""code"":""NotFound"",""description"":""Collection items query failed.""} is returned when accessing and ot the items API points e.g. ogcapi/collections/mcd90py2_anno/items:

  
    
      MapServer/mapogcapi.cpp
    
    
         Line 1009
      in
      f9a2df8
    
  
  
    

        
          
           outputError(OGCAPI_NOT_FOUND_ERROR, ""Collection items query failed.""); 
        
    
  


Is the whole mechanism of requiring LAYER TEMPLATE being set still valid within MapServer? Adding LAYER TEMPLATE ""ttt"" seems to be almost required now to do most things in MapServer even if no templates are ever used.

Seems  to me like the layer shouldn't even be in the list of collections in the first place if it's not queryable. Note that that's different then the WFS code which doesn't seem to leverage msIsLayerQueryable(), not sure why not. I can add that as a check in the getCollection() function.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/geographika,19,https://github.com/MapServer/MapServer/pull/6400#issuecomment-925356919,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,"@sdlime - I've been debugging the issue around layers without a projection block not projecting to WGS84 when returning results (although this may be a feature as much as an issue - I'm unsure if the OGC Features Spec allows for other CRSs?).
I've updated the Itasca demo to be accessible all layers via the OGC Features API (at MapServer/MapServer-demo#7 - there are a few values that need to be changed, and I'll switch them to Linux/OSGeo paths before merging). Just wondering if any of the layers without a projection block show in EPSG:26915 for you (e.g. mcd90py2_anno)?
MapServer/MapServer-demo#7
msProjectionsDiffer always returns false for me here:

  
    
      MapServer/mapogcapi.cpp
    
    
        Lines 1104 to 1106
      in
      1ed91b8
    
  
  
    

        
          
           reprojectionObj *reprojector = NULL; 
        

        
          
           if(msProjectionsDiffer(&(layer->projection), &(map->latlon))) { 
        

        
          
             reprojector = msProjectCreateReprojector(&(layer->projection), &(map->latlon)); 
        
    
  


As the LAYER PROJECTION is an unitialized object it has numargs count of 0 and so is shown as not differing here:

  
    
      MapServer/mapproject.c
    
    
        Lines 2151 to 2156
      in
      1ed91b8
    
  
  
    

        
          
           static int msProjectionsDifferInternal( projectionObj *proj1, projectionObj *proj2 ) 
        

        
          
            
        

        
          
           { 
        

        
          
             int   i; 
        

        
          
            
        

        
          
             if( proj1->numargs == 0 || proj2->numargs == 0 )",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/sdlime,20,https://github.com/MapServer/MapServer/pull/6400#issuecomment-926207957,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,"@sdlime - I've been debugging the issue around layers without a projection block not projecting to WGS84 when returning results (although this may be a feature as much as an issue - I'm unsure if the OGC Features Spec allows for other CRSs?).

There is a CRS standard (https://docs.ogc.org/is/18-058/18-058.html) but we've not done any implementation around that so this is just the Features Core (http://docs.ogc.org/is/17-069r3/17-069r3.html) implementation.
Regarding this issue it looks to me like the code is incomplete in that area. If you look at the code starting at:

  
    
      MapServer/mapogcapi.cpp
    
    
        Lines 1104 to 1106
      in
      1c14821
    
  
  
    

        
          
           reprojectionObj *reprojector = NULL; 
        

        
          
           if(msProjectionsDiffer(&(layer->projection), &(map->latlon))) { 
        

        
          
             reprojector = msProjectCreateReprojector(&(layer->projection), &(map->latlon)); 
        
    
  


it only looks at the layer projection relative to WGS84. I think the logic should be:

if layer has projection and that projection isn't WGS84, set the reprojector
else if the map has a projection and that projection isn't WGS84, set the reprojector
else throw a configuration exception

Cases 2 and 3 aren't handled. Does that make sense to you?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/sdlime,21,https://github.com/MapServer/MapServer/pull/6400#issuecomment-926216264,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,"@geographika, I just updated things to consider both the layer and map projections when transforming the layer bbox and geometries (items). Right now it throws an exception if both the layer and map projections are not defined. It works if the layer does not have a projection defined - defaults to the map projection. Please give it a try. --Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/geographika,22,https://github.com/MapServer/MapServer/pull/6400#issuecomment-926683941,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,"@geographika, I just updated things to consider both the layer and map projections when transforming the layer bbox and geometries (items).

Tested and works perfectly with the Itasca demo. The exception makes sense, I'd assumed that the MAP PROJECTION was already copied to the LAYER PROJECTION as part of loading a Mapfile if none was explicitally set on a LAYER, but I guess each service (WMS, WFS etc) must be implementing this logic on its own code path?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/geographika,23,https://github.com/MapServer/MapServer/pull/6400#issuecomment-927093583,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,"@sdlime - from my testing I think there are only 2 issues left to handle

Dealing with parameters set in cookies (just seen your mail now). I tried a very hacky fix by adding the following to mapserv.c but it didn't work as expected:

  // ignore any cookie values which will be treated as parameters when using the ogcapi
  if (request->path_info != NULL) {
      if (strstr(""/ogcapi/"", request->path_info) != NULL) {
          putenv(""HTTP_COOKIE"", NULL);
      }
  }


(nice to have as the slash is required on Windows) adding a slash if missing to the end of OGCAPI_HTML_TEMPLATE_DIRECTORY. See comment at 
  
    
      MapServer/mapogcapi.cpp
    
    
         Line 241
      in
      1c14821
    
  
  
    

        
          
           // TODO: if directory is provided then perhaps we need to check for a trailing slash 
        
    
  



I tried to implement this, but thought there might already be a function somewhere in MapServer that could be reused.
If not there is a C implementation in the Git codebase https://github.com/git/git/blob/e5a14ddd2d93da4d951fd63d4f78fe2410debe68/builtin/mv.c#L63
I also tried a hybrid C/C++ approach, but it throws memory errors:
  if (directory != NULL) {
      std::string s = directory;
      if (*s.rbegin() != '/'){
          // add a trailing slash if missing
          s += ""/"";
          return  s.c_str();
      }
  }",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/rouault,24,https://github.com/MapServer/MapServer/pull/6400#issuecomment-927094508,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,"if (*s.rbegin() != '/'){
slightly less convoluted:
if( !s.empty() && s.back() != '/' )


return  s.c_str();
That's the memory error. std::string s is a temporary object. a c_str() on it is invalidated as soon as the std::string is destroyed, that is when the scope where it is declared is quitted

A fix would be to change getTemplateDirectory() to return a std::string (be careful of changing the return NULL to return std::string()), and adapt its callers",True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/sdlime,25,https://github.com/MapServer/MapServer/pull/6400#issuecomment-934473418,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,Should we merge this and deal with additional tweaks in subsequent pull requests? --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/jmckenna,26,https://github.com/MapServer/MapServer/pull/6400#issuecomment-934475533,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,"Should we merge this and deal with additional tweaks in subsequent pull requests? --Steve

yes I think we should merge.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/geographika,27,https://github.com/MapServer/MapServer/pull/6400#issuecomment-934677355,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,"Should we merge this and deal with additional tweaks in subsequent pull requests? --Steve

+1 on merging, it will make it easier to test with the other new features on the main branch.
@sdlime - any thoughts on handling the backslash - C++ approach (as in the approach suggested at #6400 (comment) or a new C function)?
I think the cookie issue will need to be addressed before a 8.0 RC. Thread for reference: https://lists.osgeo.org/pipermail/mapserver-dev/2021-September/016620.html",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/tomkralidis,28,https://github.com/MapServer/MapServer/pull/6400#issuecomment-934679197,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,+1 to merge.  Great work here all.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6400,2021-09-01T13:22:40Z,2021-10-07T02:57:24Z,2021-10-07T02:59:59Z,MERGED,True,1098,920,8,https://github.com/sdlime,OGCAPI Tweaks/Fixes,39,[],https://github.com/mapserver/mapserver/pull/6400,https://github.com/sdlime,29,https://github.com/MapServer/MapServer/pull/6400#issuecomment-936458600,Series of small changes/fixes/tweaks necessary to complete initial OGC API features support.,"Should we merge this and deal with additional tweaks in subsequent pull requests? --Steve

+1 on merging, it will make it easier to test with the other new features on the main branch. @sdlime - any thoughts on handling the backslash - C++ approach (as in the approach suggested at #6400 (comment) or a new C function)?

I guess I'd opt for local changes to getTemplateDirectory() as @rouault suggests. I'm not sure how/if we'd need to support Window's paths that can use either forward or back slashes. That was part of the reason I thought it might just be easier to stick with an exception.

I think the cookie issue will need to be addressed before a 8.0 RC. Thread for reference: https://lists.osgeo.org/pipermail/mapserver-dev/2021-September/016620.html

I think the issue is bigger than just cookies since arbitrary query parameters are quite common when using services. I guess I don't understand the requirement from the OGC perspective and it seems impractical to implement to me. Plus, we're only enforcing it with the one API path which doesn't make sense to me. pygeoapi behaves the same way. For example:
https://demo.pygeoapi.io/master/collections?f=json&foo=bar
doesn't throw an error on the foo parameter. Looking back at the thread and the responses it seems like the cookies functionality is used so removing it isn't an option, not that that really fixes anything. I do think it would be helpful to track the source of parameter values. Perhaps we should create a request parameters object where the members would be name, value and source. That would be easier to share and source values could be get, post or cookie.
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6401,2021-09-02T12:08:32Z,2021-09-02T19:05:11Z,2021-09-02T19:05:11Z,MERGED,True,6,2,1,https://github.com/geographika,Add note on GEOS and Python MapScript,1,[],https://github.com/mapserver/mapserver/pull/6401,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6401,Add another cause of the dreaded ImportError: DLL load failed: The specified procedure could not be found. error to the Python MapScript Readme.,Add another cause of the dreaded ImportError: DLL load failed: The specified procedure could not be found. error to the Python MapScript Readme.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6402,2021-09-04T15:03:14Z,2021-09-04T16:11:43Z,2021-09-04T16:11:43Z,MERGED,True,5,8,2,https://github.com/rouault,Remove always true conditions,1,[],https://github.com/mapserver/mapserver/pull/6402,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6402,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6408,2021-09-08T05:52:30Z,2021-10-21T10:18:31Z,2021-10-21T10:32:12Z,MERGED,True,296,11,15,https://github.com/ashleysommer,TimeFilter: Allow time filter to append to an existing layer filter,3,[],https://github.com/mapserver/mapserver/pull/6408,https://github.com/ashleysommer,1,https://github.com/MapServer/MapServer/pull/6408,"TimeFilter: Allow time filter to append to an existing filter if the filter is an expression
WCS: Don't remove existing TileIndexLayer filter when applying time filter.
Fixes #6406
Fixes #6407","TimeFilter: Allow time filter to append to an existing filter if the filter is an expression
WCS: Don't remove existing TileIndexLayer filter when applying time filter.
Fixes #6406
Fixes #6407",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6408,2021-09-08T05:52:30Z,2021-10-21T10:18:31Z,2021-10-21T10:32:12Z,MERGED,True,296,11,15,https://github.com/ashleysommer,TimeFilter: Allow time filter to append to an existing layer filter,3,[],https://github.com/mapserver/mapserver/pull/6408,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6408#issuecomment-919496257,"TimeFilter: Allow time filter to append to an existing filter if the filter is an expression
WCS: Don't remove existing TileIndexLayer filter when applying time filter.
Fixes #6406
Fixes #6407","@ashleysommer is it possible for you to add a test for this in msautotest, as part of this pull request?  (https://mapserver.org/development/tests/autotest.html)  See example WCS tests in /msautotest/wxs",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6408,2021-09-08T05:52:30Z,2021-10-21T10:18:31Z,2021-10-21T10:32:12Z,MERGED,True,296,11,15,https://github.com/ashleysommer,TimeFilter: Allow time filter to append to an existing layer filter,3,[],https://github.com/mapserver/mapserver/pull/6408,https://github.com/ashleysommer,3,https://github.com/MapServer/MapServer/pull/6408#issuecomment-919519487,"TimeFilter: Allow time filter to append to an existing filter if the filter is an expression
WCS: Don't remove existing TileIndexLayer filter when applying time filter.
Fixes #6406
Fixes #6407","Yep, I thought that might be a requirement, so I'm looking into the examples to see how I would integrate a test for this.",True,{'THUMBS_UP': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6408,2021-09-08T05:52:30Z,2021-10-21T10:18:31Z,2021-10-21T10:32:12Z,MERGED,True,296,11,15,https://github.com/ashleysommer,TimeFilter: Allow time filter to append to an existing layer filter,3,[],https://github.com/mapserver/mapserver/pull/6408,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/6408#issuecomment-937751807,"TimeFilter: Allow time filter to append to an existing filter if the filter is an expression
WCS: Don't remove existing TileIndexLayer filter when applying time filter.
Fixes #6406
Fixes #6407","@ashleysommer polite nudge for the test, as this would be nice to include in the 8.0 release.  thanks!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6408,2021-09-08T05:52:30Z,2021-10-21T10:18:31Z,2021-10-21T10:32:12Z,MERGED,True,296,11,15,https://github.com/ashleysommer,TimeFilter: Allow time filter to append to an existing layer filter,3,[],https://github.com/mapserver/mapserver/pull/6408,https://github.com/ashleysommer,5,https://github.com/MapServer/MapServer/pull/6408#issuecomment-937755360,"TimeFilter: Allow time filter to append to an existing filter if the filter is an expression
WCS: Don't remove existing TileIndexLayer filter when applying time filter.
Fixes #6406
Fixes #6407","Thanks for the reminder! I've been using this feature in production, built from my branch, I forgot it hasn't made its way into the upstream codebase yet.",True,{'THUMBS_UP': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6408,2021-09-08T05:52:30Z,2021-10-21T10:18:31Z,2021-10-21T10:32:12Z,MERGED,True,296,11,15,https://github.com/ashleysommer,TimeFilter: Allow time filter to append to an existing layer filter,3,[],https://github.com/mapserver/mapserver/pull/6408,https://github.com/ashleysommer,6,https://github.com/MapServer/MapServer/pull/6408#issuecomment-945244294,"TimeFilter: Allow time filter to append to an existing filter if the filter is an expression
WCS: Don't remove existing TileIndexLayer filter when applying time filter.
Fixes #6406
Fixes #6407","Note, I'm still working on tests for this. I hope to have the tests merged by end of the day today.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6408,2021-09-08T05:52:30Z,2021-10-21T10:18:31Z,2021-10-21T10:32:12Z,MERGED,True,296,11,15,https://github.com/ashleysommer,TimeFilter: Allow time filter to append to an existing layer filter,3,[],https://github.com/mapserver/mapserver/pull/6408,https://github.com/jmckenna,7,https://github.com/MapServer/MapServer/pull/6408#issuecomment-945638890,"TimeFilter: Allow time filter to append to an existing filter if the filter is an expression
WCS: Don't remove existing TileIndexLayer filter when applying time filter.
Fixes #6406
Fixes #6407",thanks @ashleysommer,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6408,2021-09-08T05:52:30Z,2021-10-21T10:18:31Z,2021-10-21T10:32:12Z,MERGED,True,296,11,15,https://github.com/ashleysommer,TimeFilter: Allow time filter to append to an existing layer filter,3,[],https://github.com/mapserver/mapserver/pull/6408,https://github.com/ashleysommer,8,https://github.com/MapServer/MapServer/pull/6408#issuecomment-948272799,"TimeFilter: Allow time filter to append to an existing filter if the filter is an expression
WCS: Don't remove existing TileIndexLayer filter when applying time filter.
Fixes #6406
Fixes #6407","Ok, test added. Hopefully it passes!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6408,2021-09-08T05:52:30Z,2021-10-21T10:18:31Z,2021-10-21T10:32:12Z,MERGED,True,296,11,15,https://github.com/ashleysommer,TimeFilter: Allow time filter to append to an existing layer filter,3,[],https://github.com/mapserver/mapserver/pull/6408,https://github.com/jmckenna,9,https://github.com/MapServer/MapServer/pull/6408#issuecomment-948476648,"TimeFilter: Allow time filter to append to an existing filter if the filter is an expression
WCS: Don't remove existing TileIndexLayer filter when applying time filter.
Fixes #6406
Fixes #6407",thanks @ashleysommer !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6409,2021-09-14T20:06:00Z,2021-10-07T12:35:40Z,2021-10-07T12:35:40Z,MERGED,True,492,492,138,https://github.com/jmckenna,rename shp2img to map2img,6,['Work in progress'],https://github.com/mapserver/mapserver/pull/6409,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6409,"renames shp2img.c to map2img.c
also tackles the msautotest calls to the utility
documentation changes will be a separate PR","renames shp2img.c to map2img.c
also tackles the msautotest calls to the utility
documentation changes will be a separate PR",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6410,2021-09-17T08:57:27Z,2021-09-20T12:52:59Z,2021-09-20T12:52:59Z,MERGED,True,8,3,1,https://github.com/gerdos82,Define rect for a dwithin filter condition,1,['Feedback requested'],https://github.com/mapserver/mapserver/pull/6410,https://github.com/gerdos82,1,https://github.com/MapServer/MapServer/pull/6410,"We observed that our WFS (MapServer + GeoPackage utilizing the OGR backend) is a lot slower when the DWithin spatial operator is used in a filter condition. Although the spatial index in the GeoPackage could be used to accelerate this specific operator it was not.
This PR adds a bounding box to the request passed down to OGR when the DWithin spatial operator is used. For the bounding box we use the envelope of the geometry with the distance used as the buffer. Below is an example of the filter:
<fes:Filter> <fes:DWithin><fes:ValueReference>begrenzingPerceel</fes:ValueReference> <gml:Point gml:id=""geo.1"" srsName=""EPSG:28992""><gml:pos dimension=""2"">257050.19722083333 470137.85737916664</gml:pos></gml:Point><fes:Distance units=""m"">12.287004477416515</fes:Distance></fes:DWithin> </fes:Filter>","We observed that our WFS (MapServer + GeoPackage utilizing the OGR backend) is a lot slower when the DWithin spatial operator is used in a filter condition. Although the spatial index in the GeoPackage could be used to accelerate this specific operator it was not.
This PR adds a bounding box to the request passed down to OGR when the DWithin spatial operator is used. For the bounding box we use the envelope of the geometry with the distance used as the buffer. Below is an example of the filter:
<fes:Filter> <fes:DWithin><fes:ValueReference>begrenzingPerceel</fes:ValueReference> <gml:Point gml:id=""geo.1"" srsName=""EPSG:28992""><gml:pos dimension=""2"">257050.19722083333 470137.85737916664</gml:pos></gml:Point><fes:Distance units=""m"">12.287004477416515</fes:Distance></fes:DWithin> </fes:Filter>",True,"{'THUMBS_UP': ['https://github.com/Shalucik', 'https://github.com/boazhuisman']}"
mapserver/mapserver,https://github.com/mapserver/mapserver,6410,2021-09-17T08:57:27Z,2021-09-20T12:52:59Z,2021-09-20T12:52:59Z,MERGED,True,8,3,1,https://github.com/gerdos82,Define rect for a dwithin filter condition,1,['Feedback requested'],https://github.com/mapserver/mapserver/pull/6410,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6410#issuecomment-922098540,"We observed that our WFS (MapServer + GeoPackage utilizing the OGR backend) is a lot slower when the DWithin spatial operator is used in a filter condition. Although the spatial index in the GeoPackage could be used to accelerate this specific operator it was not.
This PR adds a bounding box to the request passed down to OGR when the DWithin spatial operator is used. For the bounding box we use the envelope of the geometry with the distance used as the buffer. Below is an example of the filter:
<fes:Filter> <fes:DWithin><fes:ValueReference>begrenzingPerceel</fes:ValueReference> <gml:Point gml:id=""geo.1"" srsName=""EPSG:28992""><gml:pos dimension=""2"">257050.19722083333 470137.85737916664</gml:pos></gml:Point><fes:Distance units=""m"">12.287004477416515</fes:Distance></fes:DWithin> </fes:Filter>",Looks good to me. A new test case in msautotest/wxs/wfs_ogr.map  would be ideal,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6410,2021-09-17T08:57:27Z,2021-09-20T12:52:59Z,2021-09-20T12:52:59Z,MERGED,True,8,3,1,https://github.com/gerdos82,Define rect for a dwithin filter condition,1,['Feedback requested'],https://github.com/mapserver/mapserver/pull/6410,https://github.com/gerdos82,3,https://github.com/MapServer/MapServer/pull/6410#issuecomment-922851853,"We observed that our WFS (MapServer + GeoPackage utilizing the OGR backend) is a lot slower when the DWithin spatial operator is used in a filter condition. Although the spatial index in the GeoPackage could be used to accelerate this specific operator it was not.
This PR adds a bounding box to the request passed down to OGR when the DWithin spatial operator is used. For the bounding box we use the envelope of the geometry with the distance used as the buffer. Below is an example of the filter:
<fes:Filter> <fes:DWithin><fes:ValueReference>begrenzingPerceel</fes:ValueReference> <gml:Point gml:id=""geo.1"" srsName=""EPSG:28992""><gml:pos dimension=""2"">257050.19722083333 470137.85737916664</gml:pos></gml:Point><fes:Distance units=""m"">12.287004477416515</fes:Distance></fes:DWithin> </fes:Filter>","A new test case in msautotest/wxs/wfs_ogr.map would be ideal

I'm going to try to add a test case.",True,{'THUMBS_UP': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6410,2021-09-17T08:57:27Z,2021-09-20T12:52:59Z,2021-09-20T12:52:59Z,MERGED,True,8,3,1,https://github.com/gerdos82,Define rect for a dwithin filter condition,1,['Feedback requested'],https://github.com/mapserver/mapserver/pull/6410,https://github.com/gerdos82,4,https://github.com/MapServer/MapServer/pull/6410#issuecomment-922896463,"We observed that our WFS (MapServer + GeoPackage utilizing the OGR backend) is a lot slower when the DWithin spatial operator is used in a filter condition. Although the spatial index in the GeoPackage could be used to accelerate this specific operator it was not.
This PR adds a bounding box to the request passed down to OGR when the DWithin spatial operator is used. For the bounding box we use the envelope of the geometry with the distance used as the buffer. Below is an example of the filter:
<fes:Filter> <fes:DWithin><fes:ValueReference>begrenzingPerceel</fes:ValueReference> <gml:Point gml:id=""geo.1"" srsName=""EPSG:28992""><gml:pos dimension=""2"">257050.19722083333 470137.85737916664</gml:pos></gml:Point><fes:Distance units=""m"">12.287004477416515</fes:Distance></fes:DWithin> </fes:Filter>","A new test case in msautotest/wxs/wfs_ogr.map would be ideal

I see there already is a test case which covers the DWITHIN filter for ogr. It's located in msautotest/wxs/wfs_filter_ogr.map. Sinds this PR is only a performance fix with no impact on functionality, is it still necessary to add a test case?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6410,2021-09-17T08:57:27Z,2021-09-20T12:52:59Z,2021-09-20T12:52:59Z,MERGED,True,8,3,1,https://github.com/gerdos82,Define rect for a dwithin filter condition,1,['Feedback requested'],https://github.com/mapserver/mapserver/pull/6410,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/6410#issuecomment-922899250,"We observed that our WFS (MapServer + GeoPackage utilizing the OGR backend) is a lot slower when the DWithin spatial operator is used in a filter condition. Although the spatial index in the GeoPackage could be used to accelerate this specific operator it was not.
This PR adds a bounding box to the request passed down to OGR when the DWithin spatial operator is used. For the bounding box we use the envelope of the geometry with the distance used as the buffer. Below is an example of the filter:
<fes:Filter> <fes:DWithin><fes:ValueReference>begrenzingPerceel</fes:ValueReference> <gml:Point gml:id=""geo.1"" srsName=""EPSG:28992""><gml:pos dimension=""2"">257050.19722083333 470137.85737916664</gml:pos></gml:Point><fes:Distance units=""m"">12.287004477416515</fes:Distance></fes:DWithin> </fes:Filter>","@gerdos82 great point, thanks for examining.  You're right.  thanks again for this improvement!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6413,2021-09-20T07:36:17Z,2021-09-22T14:01:32Z,2021-09-22T14:01:32Z,MERGED,True,24,10,3,https://github.com/geographika,Use custom SWIG build to add property annotations,11,[],https://github.com/mapserver/mapserver/pull/6413,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6413,"As part of RFC133 this uses a custom version of SWIG with the addition of swig/swig#1951, to allow documentation to be auto-generated for MapScript class properties in the Python bindings.
This feature is off by default and only used in the Appveyor CI builds (using a new WITH_MAPSCRIPT_PROPERTYANNOTATIONS flag)  to push a version of Python MapScript to PyPI where it can be used by the doc builds.","As part of RFC133 this uses a custom version of SWIG with the addition of swig/swig#1951, to allow documentation to be auto-generated for MapScript class properties in the Python bindings.
This feature is off by default and only used in the Appveyor CI builds (using a new WITH_MAPSCRIPT_PROPERTYANNOTATIONS flag)  to push a version of Python MapScript to PyPI where it can be used by the doc builds.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6414,2021-09-22T12:54:14Z,2021-09-22T22:16:52Z,2021-09-22T22:16:56Z,MERGED,True,1,1,1,https://github.com/geographika,Ensure Appveyor builds use proj7,2,[],https://github.com/mapserver/mapserver/pull/6414,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6414,"Sets -DPROJ_INCLUDE_DIR=%SDK_PREFIX%/%SDK%/include/proj7 - currently builds are using PROJ 4.x
Old: https://ci.appveyor.com/project/MapServer/mapserver/builds/40833546/job/ws4lqpw4tgwb5i1u#L127
-- Found Proj 4.x
New: https://ci.appveyor.com/project/MapServer/mapserver/build/job/cj9ink5q8jtd6rsp#L128
-- Found Proj 7.2","Sets -DPROJ_INCLUDE_DIR=%SDK_PREFIX%/%SDK%/include/proj7 - currently builds are using PROJ 4.x
Old: https://ci.appveyor.com/project/MapServer/mapserver/builds/40833546/job/ws4lqpw4tgwb5i1u#L127
-- Found Proj 4.x
New: https://ci.appveyor.com/project/MapServer/mapserver/build/job/cj9ink5q8jtd6rsp#L128
-- Found Proj 7.2",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6416,2021-09-23T09:51:46Z,2021-09-23T10:38:57Z,2021-09-23T10:38:57Z,MERGED,True,45,2,3,https://github.com/gerdos82,Invalid geometry from buildmbr when a point is used a base for the rect,2,[],https://github.com/mapserver/mapserver/pull/6416,https://github.com/gerdos82,1,https://github.com/MapServer/MapServer/pull/6416,"When wfs_use_default_extent_for_getfeature is set to off on a layer, the geometry in an intersect filter is used to calculate the rect. This rect is the input for the BuildMbr spatialite function. When the geometry in the intersect filter is a POINT, the POLYGON resulting from BuildMbr is invalid, because all vertices in the POLYGON are the same. This POLYGON is used in the Intersect spatialite function. It seems to depend on the version of spatialite whether or not this is an issue. Some versions of spatialite seem to handle an intersect with an invalid POLYGON fine and some never result in a match. This PR tries to make this more robust and checks if the rect is a POINT and in this case uses a POINT as the input for the intersect, in all other cases the BuildMbr is used to create a POLYGON.","When wfs_use_default_extent_for_getfeature is set to off on a layer, the geometry in an intersect filter is used to calculate the rect. This rect is the input for the BuildMbr spatialite function. When the geometry in the intersect filter is a POINT, the POLYGON resulting from BuildMbr is invalid, because all vertices in the POLYGON are the same. This POLYGON is used in the Intersect spatialite function. It seems to depend on the version of spatialite whether or not this is an issue. Some versions of spatialite seem to handle an intersect with an invalid POLYGON fine and some never result in a match. This PR tries to make this more robust and checks if the rect is a POINT and in this case uses a POINT as the input for the intersect, in all other cases the BuildMbr is used to create a POLYGON.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/6417,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/LarsSchy,2,https://github.com/MapServer/MapServer/pull/6417#issuecomment-934364437,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,I am missing mapgraph.c and mapgraph.h when I tried to build.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/LarsSchy,3,https://github.com/MapServer/MapServer/pull/6417#issuecomment-934458636,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,"I am very happy with the results now!
(smoothsia(centerline([shape]), 3, 1, 'angle'))",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/jratike80,4,https://github.com/MapServer/MapServer/pull/6417#issuecomment-934468003,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,"The repeated labels next. Not drawing the first label at the bottom of a bay is a good idea, but what if the requested image bbox cuts the lake at the middle? How could you define that the first label on the centerline would be OK then?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/LarsSchy,5,https://github.com/MapServer/MapServer/pull/6417#issuecomment-934510616,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,"I did some tests with REPEATDISTANCE during the weekend.  If the line is long enough for at least two or more labels, then I would like to avoid to first 20 % of the line and the last 20% of the line for labeling to avoid having labels in the bays.   I will do more experiments with different extents and cutting the lakes.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/6417#issuecomment-934641219,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,Centerline well here on Windows.  (I only briefly got caught during compile because this branch requires USE_OGCAPI_SVR ),True,{'THUMBS_UP': ['https://github.com/LarsSchy']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/sdlime,7,https://github.com/MapServer/MapServer/pull/6417#issuecomment-935283615,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,"I'm working on adding some test cases and am seeing some weird behavior on a clipped polygon. The computed centerline is identical regardless of the viewport because the raw, untransformed shape is used as input.  However, drawing the centerline when the whole polygon isn't visible results in an artifact. A couple of images below illustrate the problem. I'm curious if anyone else is seeing this behavior.
The resulting centerline is of the correct shape type and there is no segment connecting the first and last points. I can't believe this is a geometry clipping issue or we'd have seen it ages ago.
Zoomed in, note the straight line running from the UR corner of the large, clipped polygon back to the starting point.

All features completely visible.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/sdlime,8,https://github.com/MapServer/MapServer/pull/6417#issuecomment-935310196,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,"Ugh, never mind. Found the issue about 10 minutes after that last post. Existing GEOMTRANSFORM functions preserved the shape type while the centerline transformation goes from polygon to line. Now I get output like so:

Note this is from the msautotest/renderers/world_testpoly.shp shapefile.",True,{'THUMBS_UP': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/sdlime,9,https://github.com/MapServer/MapServer/pull/6417#issuecomment-936244572,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,"Still needs work to clean up memory leaks. Working on it... Update: 0 bytes to go, woot! On to smoothsia() - it really should be working.
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/sdlime,10,https://github.com/MapServer/MapServer/pull/6417#issuecomment-937803694,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,"Could use some ideas for other tests. So far the misc/centerline.map tests:

the new inner and outer GEOMTRANSFORMs
centerline + densify
centerline on super simple shapes where it fails (errors w/try densifying message)
centerline on non-polygon shapes (errors w/bad shape type message)

I have a centerline + densify + smoothsia test but I can't get smoothsia to work even on it's own. I wouldn't think this pull request would affect that.
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/sdlime,11,https://github.com/MapServer/MapServer/pull/6417#issuecomment-938693156,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,"mapgraph.cpp could benefit for more C++ification, but that's an implementation detail that can be changed later

Agree'd on the C++ification. Does ""add suggestion to batch"" essentially build a single pull request? I've not noticed that option before.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/rouault,12,https://github.com/MapServer/MapServer/pull/6417#issuecomment-938700456,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,"Does ""add suggestion to batch"" essentially build a single pull request?

a single commit added at the end of that PR. That's the preferred solution to avoid stressing too much the CI",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/sdlime,13,https://github.com/MapServer/MapServer/pull/6417#issuecomment-942395775,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,Any objections to merging? I think it's in pretty good shape... --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/jmckenna,14,https://github.com/MapServer/MapServer/pull/6417#issuecomment-942447489,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,Working great here.  +1,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/LarsSchy,15,https://github.com/MapServer/MapServer/pull/6417#issuecomment-942575567,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,"It a fantastic new feature! I just love it.  To bad that the chaining (smoothsia(centerline([shape]))) doesn't work.  It worked up until 8 days ago. It is strange since other chaining like (simplifypt(centerline([shape]... is working. I have even tried to look at the source code, but that parsing is a little too complicated for me.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/jmckenna,16,https://github.com/MapServer/MapServer/pull/6417#issuecomment-942633788,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,"@LarsSchy, true, smoothsia no longer works for me either (alone, not even chained).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/sdlime,17,https://github.com/MapServer/MapServer/pull/6417#issuecomment-942666845,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,That's so weird and I experience the same thing. I imagine it's very fixable given a little time.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/geographika,18,https://github.com/MapServer/MapServer/pull/6417#issuecomment-942752636,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,"Good news is everything compiles fine and an image is generated.
If I add a label to the the following layer definition then I can get an image back:
    LAYER
        TYPE LINE
        STATUS DEFAULT
        NAME ""lakes_label""
        GEOMTRANSFORM (densify([shape], 5))
        CONNECTIONTYPE OGR
        CONNECTION ""/data/natural_earth_vector.gpkg/packages/natural_earth_vector.gpkg""
        DATA ""ne_10m_lakes""
        CLASS
          LABEL
            TEXT ""hello""
            ANGLE FOLLOW
            SIZE 12
          END
        END
    END


However if I change to the following:
GEOMTRANSFORM (centerline(densify([shape], 100)))
Then I always get back the following error no matter what parameter I set for densify:
msGEOSCenterline(): GEOS library error. Centerline generation failed, try densifying the shapes. <br>
Am I configuring the layer incorrectly?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/sdlime,19,https://github.com/MapServer/MapServer/pull/6417#issuecomment-942771802,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,"Am I configuring the layer incorrectly?

Configuration looks ok at first glance. That error message occurs when there are no edges added to the directed graph computed from the Voronoi diagram. I've only seen that happen in cases with super simple geometries like a square or triangle with vertices only at the corners. The algorithm removes Densifying solves that problem. What do you get if you just do?
GEOMTRANSFORM (centerline([shape]))

Any chance you could share your test case?
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/geographika,20,https://github.com/MapServer/MapServer/pull/6417#issuecomment-943083729,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,"@sdlime - same error with that change (plus an additional parsing error which seems to be thrown after the first error):
msDrawMap(): Image handling error. Failed to draw layer named 'lakes_label'. <br>
msGeomTransformShape(): Expression parser error. Failed to process shape expression: centerline([shape]) <br>
yyparse(): Expression parser error. Executing centerline failed. <br>
msGEOSCenterline(): GEOS library error. Centerline generation failed, try densifying the shapes. <br>

I used the following data for the test case:
http://naciscdn.org/naturalearth/packages/natural_earth_vector.gpkg.zip
Command:
shp2img -m lakes.map -o /temp/test.png
Map file:
MAP
    SIZE 400 400
    EXTENT -68.7202 53.0750 -67.7202 54.0750

    LAYER
        TYPE LINE
        STATUS DEFAULT
        NAME ""lakes_label""
        GEOMTRANSFORM (centerline([shape]))
        CONNECTIONTYPE OGR
        CONNECTION ""natural_earth_vector.gpkg/packages/natural_earth_vector.gpkg""
        DATA ""ne_10m_lakes""
        CLASS
          LABEL
            TEXT ""hello"" # ""[name]""
            ANGLE FOLLOW
            SIZE 12
          END
        END
    END

    LAYER
        TYPE LINE
        GEOMTRANSFORM (outer([shape]))
        STATUS DEFAULT
        NAME ""lakes""
        CONNECTIONTYPE OGR
        CONNECTION ""natural_earth_vector.gpkg/packages/natural_earth_vector.gpkg""
        DATA ""ne_10m_lakes""
        CLASS
          STYLE
            COLOR 0 0 255
            WIDTH 2
          END
        END
    END
END",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/LarsSchy,21,https://github.com/MapServer/MapServer/pull/6417#issuecomment-943429140,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,"My experiments are working fine now with: (smoothsia(centerline([shape]))) !
I looked at the natural earth data from Seth.   When I looked at the clipped data in QGIS, I can see several very small triangles.  Some are in the data set from the beginning and some are due to the clipping.
ogr2ogr natural_earth_vector_lakes10m_clip.gpkg -clipsrc -68.7202 53.075 -67.7202 54.075 natural_earth_vector.gpkg ne_10m_lakes",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/geographika,22,https://github.com/MapServer/MapServer/pull/6417#issuecomment-943507679,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,"I looked at the natural earth data from Seth. When I looked at the clipped data in QGIS, I can see several very small triangles. Some are in the data set from the beginning and some are due to the clipping.

Thanks @LarsSchy for the investigations. That corresponds with Steve's comment about simple features.
Maybe these errors should be logged and ignored so that centerlines can still be generated for other features in the layer?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/sdlime,23,https://github.com/MapServer/MapServer/pull/6417#issuecomment-943508717,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,"My experiments are working fine now with: (smoothsia(centerline([shape]))) !
I looked at the natural earth data from Seth. When I looked at the clipped data in QGIS, I can see several very small triangles. Some are in the data set from the beginning and some are due to the clipping.
ogr2ogr natural_earth_vector_lakes10m_clip.gpkg -clipsrc -68.7202 53.075 -67.7202 54.075 natural_earth_vector.gpkg ne_10m_lakes

The problem with that natural earth data is the super small polygons, there's one in that viewport that has an area of .000001 the error message @geographika was seeing was related to that geometry. The error message is relevant, a solution is to densify, but you have to use such a small value that it becomes counter productive. I needed a value of .001 in the densify function to get things to complete. A better solution will be to filter out those small geometries ahead of time, so for example if I do:
FILTER (area([shape]) > 0.005)
GEOMTRANSFORM (centerline([shape]))

to the lakes_label layer then things work fine. Making sure that only shapes that are candidates for labeling are going to be processed is probably going to be a common step - it also is more performant. So I don't see a blocker here. There may be some opportunities for some optimization with simple geometries - perhaps an alternative way to generate a centerline without going through a Voronoi diagram-based process.
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/sdlime,24,https://github.com/MapServer/MapServer/pull/6417#issuecomment-943521867,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,"Maybe these errors should be logged and ignored so that centerlines can still be generated for other features in the layer?

I think that's going to be difficult based on the way the parser works since there may be downstream processing (e.g. SmoothSIA) so there's no way to bail mid-expression evaluation with a ""never mind"" response. I don't know if that's possible or not.",True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/geographika,25,https://github.com/MapServer/MapServer/pull/6417#issuecomment-943563151,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,"Thanks Steve for the explanation. I guess I chose the wrong dataset to test with!
A note in the docs seems fine at this stage. Maybe a hard-coded pre-filter could be used to skip these features in future based on area or vertices.
Is it correct that the new keywords from this feature to add to https://mapserver.org/mapfile/geomtransform.html are centerline, densify, outer, and inner ?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6417,2021-10-05T02:50:10Z,2021-10-14T17:47:09Z,2021-10-14T17:47:24Z,MERGED,True,3928,2453,18,https://github.com/sdlime,Centerline GEOMTRANSFORM Support,43,[],https://github.com/mapserver/mapserver/pull/6417,https://github.com/sdlime,26,https://github.com/MapServer/MapServer/pull/6417#issuecomment-943580066,Rework of the original  #5854 pull request. Cleaned up a few pieces of the implementation and renamed skeletonize to centerline - it's a much more accurate name.,"Thanks Steve for the explanation. I guess I chose the wrong dataset to test with! A note in the docs seems fine at this stage. Maybe a hard-coded pre-filter could be used to skip these features in future based on area or vertices.

If you didn't hit a case like that then someone else would have! I think there will be further enhancements necessary in this area as the feature gets used.

Is it correct that the new keywords from this feature to add to https://mapserver.org/mapfile/geomtransform.html are centerline, densify, outer, and inner ?

Yup, those are the new GEOMTRANSFORM functions. The first 3 are probably relevant for drawing labels and would typically be applied at the LAYER level because of the way the path following labels work. Outer and inner may also be useful at the STYLE level for rendering effects.",True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6418,2021-10-05T10:20:25Z,2021-10-07T12:40:27Z,2021-10-15T10:51:24Z,MERGED,True,84,69,19,https://github.com/MaxKellermann,"Fix various security vulnerabilites found by libFuzzer, part 2",11,['Security'],https://github.com/mapserver/mapserver/pull/6418,https://github.com/MaxKellermann,1,https://github.com/MapServer/MapServer/pull/6418,"This PR starts with a few build breakage fixes which occur when almost all optional features are disabled at compile time.
The last 3 commits fix security vulnerabilities I found with libFuzzer, one of which qualifies for remote code execution, the worst kind of vulnerability.
A crash report from Google Play of an open source app using a copy of MapServer code (https://github.com/XCSoar/XCSoar/) contained a crash due to one of these vulnerabilities, so I investigated and turned on libFuzzer again, which quickly found more vulnerabilities.
I used this program (specific to my app's internal APIs wrapping our my copy of the MapServer code) to run libFuzzer: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
This is similar to my previous PR earlier this year: #6319
Back then, @rouault asked me to change the PR to the ""main"" branch; do you want me to do the same here? (My way of managing my open source apps is that I always merge bug fixes to the ""stable"" branch first, and then merge all ""stable"" bug fixes into the ""main"" branch.)","This PR starts with a few build breakage fixes which occur when almost all optional features are disabled at compile time.
The last 3 commits fix security vulnerabilities I found with libFuzzer, one of which qualifies for remote code execution, the worst kind of vulnerability.
A crash report from Google Play of an open source app using a copy of MapServer code (https://github.com/XCSoar/XCSoar/) contained a crash due to one of these vulnerabilities, so I investigated and turned on libFuzzer again, which quickly found more vulnerabilities.
I used this program (specific to my app's internal APIs wrapping our my copy of the MapServer code) to run libFuzzer: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
This is similar to my previous PR earlier this year: #6319
Back then, @rouault asked me to change the PR to the ""main"" branch; do you want me to do the same here? (My way of managing my open source apps is that I always merge bug fixes to the ""stable"" branch first, and then merge all ""stable"" bug fixes into the ""main"" branch.)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6418,2021-10-05T10:20:25Z,2021-10-07T12:40:27Z,2021-10-15T10:51:24Z,MERGED,True,84,69,19,https://github.com/MaxKellermann,"Fix various security vulnerabilites found by libFuzzer, part 2",11,['Security'],https://github.com/mapserver/mapserver/pull/6418,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6418#issuecomment-934280471,"This PR starts with a few build breakage fixes which occur when almost all optional features are disabled at compile time.
The last 3 commits fix security vulnerabilities I found with libFuzzer, one of which qualifies for remote code execution, the worst kind of vulnerability.
A crash report from Google Play of an open source app using a copy of MapServer code (https://github.com/XCSoar/XCSoar/) contained a crash due to one of these vulnerabilities, so I investigated and turned on libFuzzer again, which quickly found more vulnerabilities.
I used this program (specific to my app's internal APIs wrapping our my copy of the MapServer code) to run libFuzzer: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
This is similar to my previous PR earlier this year: #6319
Back then, @rouault asked me to change the PR to the ""main"" branch; do you want me to do the same here? (My way of managing my open source apps is that I always merge bug fixes to the ""stable"" branch first, and then merge all ""stable"" bug fixes into the ""main"" branch.)","do you want me to do the same here?

at least, issue also a corresponding PR against master. Note also that 7.6 branch will receive little maintenance at that point",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6418,2021-10-05T10:20:25Z,2021-10-07T12:40:27Z,2021-10-15T10:51:24Z,MERGED,True,84,69,19,https://github.com/MaxKellermann,"Fix various security vulnerabilites found by libFuzzer, part 2",11,['Security'],https://github.com/mapserver/mapserver/pull/6418,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6418#issuecomment-934356843,"This PR starts with a few build breakage fixes which occur when almost all optional features are disabled at compile time.
The last 3 commits fix security vulnerabilities I found with libFuzzer, one of which qualifies for remote code execution, the worst kind of vulnerability.
A crash report from Google Play of an open source app using a copy of MapServer code (https://github.com/XCSoar/XCSoar/) contained a crash due to one of these vulnerabilities, so I investigated and turned on libFuzzer again, which quickly found more vulnerabilities.
I used this program (specific to my app's internal APIs wrapping our my copy of the MapServer code) to run libFuzzer: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
This is similar to my previous PR earlier this year: #6319
Back then, @rouault asked me to change the PR to the ""main"" branch; do you want me to do the same here? (My way of managing my open source apps is that I always merge bug fixes to the ""stable"" branch first, and then merge all ""stable"" bug fixes into the ""main"" branch.)",wow thanks @MaxKellermann.  This will spawn us to have another 7.6..x release with this security fix.  Great find.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6418,2021-10-05T10:20:25Z,2021-10-07T12:40:27Z,2021-10-15T10:51:24Z,MERGED,True,84,69,19,https://github.com/MaxKellermann,"Fix various security vulnerabilites found by libFuzzer, part 2",11,['Security'],https://github.com/mapserver/mapserver/pull/6418,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/6418#issuecomment-934371674,"This PR starts with a few build breakage fixes which occur when almost all optional features are disabled at compile time.
The last 3 commits fix security vulnerabilities I found with libFuzzer, one of which qualifies for remote code execution, the worst kind of vulnerability.
A crash report from Google Play of an open source app using a copy of MapServer code (https://github.com/XCSoar/XCSoar/) contained a crash due to one of these vulnerabilities, so I investigated and turned on libFuzzer again, which quickly found more vulnerabilities.
I used this program (specific to my app's internal APIs wrapping our my copy of the MapServer code) to run libFuzzer: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
This is similar to my previous PR earlier this year: #6319
Back then, @rouault asked me to change the PR to the ""main"" branch; do you want me to do the same here? (My way of managing my open source apps is that I always merge bug fixes to the ""stable"" branch first, and then merge all ""stable"" bug fixes into the ""main"" branch.)","This will spawn us to have another 7.6..x release with this security fix. Great find.

as far as I can tell, the vulnerability is if you read from corrupted / hostile shapefiles. It isn't something that is triggered by remote requests, so the severity is much less important",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6418,2021-10-05T10:20:25Z,2021-10-07T12:40:27Z,2021-10-15T10:51:24Z,MERGED,True,84,69,19,https://github.com/MaxKellermann,"Fix various security vulnerabilites found by libFuzzer, part 2",11,['Security'],https://github.com/mapserver/mapserver/pull/6418,https://github.com/MaxKellermann,5,https://github.com/MapServer/MapServer/pull/6418#issuecomment-934373778,"This PR starts with a few build breakage fixes which occur when almost all optional features are disabled at compile time.
The last 3 commits fix security vulnerabilities I found with libFuzzer, one of which qualifies for remote code execution, the worst kind of vulnerability.
A crash report from Google Play of an open source app using a copy of MapServer code (https://github.com/XCSoar/XCSoar/) contained a crash due to one of these vulnerabilities, so I investigated and turned on libFuzzer again, which quickly found more vulnerabilities.
I used this program (specific to my app's internal APIs wrapping our my copy of the MapServer code) to run libFuzzer: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
This is similar to my previous PR earlier this year: #6319
Back then, @rouault asked me to change the PR to the ""main"" branch; do you want me to do the same here? (My way of managing my open source apps is that I always merge bug fixes to the ""stable"" branch first, and then merge all ""stable"" bug fixes into the ""main"" branch.)","as far as I can tell, the vulnerability is if you read from corrupted / hostile shapefiles.

Correct.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6418,2021-10-05T10:20:25Z,2021-10-07T12:40:27Z,2021-10-15T10:51:24Z,MERGED,True,84,69,19,https://github.com/MaxKellermann,"Fix various security vulnerabilites found by libFuzzer, part 2",11,['Security'],https://github.com/mapserver/mapserver/pull/6418,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/6418#issuecomment-934387760,"This PR starts with a few build breakage fixes which occur when almost all optional features are disabled at compile time.
The last 3 commits fix security vulnerabilities I found with libFuzzer, one of which qualifies for remote code execution, the worst kind of vulnerability.
A crash report from Google Play of an open source app using a copy of MapServer code (https://github.com/XCSoar/XCSoar/) contained a crash due to one of these vulnerabilities, so I investigated and turned on libFuzzer again, which quickly found more vulnerabilities.
I used this program (specific to my app's internal APIs wrapping our my copy of the MapServer code) to run libFuzzer: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
This is similar to my previous PR earlier this year: #6319
Back then, @rouault asked me to change the PR to the ""main"" branch; do you want me to do the same here? (My way of managing my open source apps is that I always merge bug fixes to the ""stable"" branch first, and then merge all ""stable"" bug fixes into the ""main"" branch.)","Unfortunately shapefiles are still widely used by MapServer users, it's still an important fix and I think should warrant a security release.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6418,2021-10-05T10:20:25Z,2021-10-07T12:40:27Z,2021-10-15T10:51:24Z,MERGED,True,84,69,19,https://github.com/MaxKellermann,"Fix various security vulnerabilites found by libFuzzer, part 2",11,['Security'],https://github.com/mapserver/mapserver/pull/6418,https://github.com/MaxKellermann,7,https://github.com/MapServer/MapServer/pull/6418#issuecomment-934420445,"This PR starts with a few build breakage fixes which occur when almost all optional features are disabled at compile time.
The last 3 commits fix security vulnerabilities I found with libFuzzer, one of which qualifies for remote code execution, the worst kind of vulnerability.
A crash report from Google Play of an open source app using a copy of MapServer code (https://github.com/XCSoar/XCSoar/) contained a crash due to one of these vulnerabilities, so I investigated and turned on libFuzzer again, which quickly found more vulnerabilities.
I used this program (specific to my app's internal APIs wrapping our my copy of the MapServer code) to run libFuzzer: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
This is similar to my previous PR earlier this year: #6319
Back then, @rouault asked me to change the PR to the ""main"" branch; do you want me to do the same here? (My way of managing my open source apps is that I always merge bug fixes to the ""stable"" branch first, and then merge all ""stable"" bug fixes into the ""main"" branch.)","it's still an important fix and I think should warrant a security release.

Agree. These are severe vulnerabilities.
They may not be directly exploitable through the MapServer API, but once you find a way to convince a MapServer to open your shapefile, you own the server.
Just because we can't currently imagine a way to exploit a server remotely doesn't mean that somebody with more creativity can't find a way. Better be too careful than sorry.
The coding style in this project is very fragile towards such vulnerabilities. For example, the code checking buffer sizes looks fragile and obscure; stuff like:

  
    
      MapServer/mapshape.c
    
    
        Lines 770 to 773
      in
      1c14821
    
  
  
    

        
          
           for( i = 0; i < shape->numlines; i++ ) { 
        

        
          
             for( j = 0; j < shape->line[i].numpoints; j++ ) { 
        

        
          
               ByteCopy( &(shape->line[i].point[j].x), pabyRec + 44 + 4*t_nParts + 8 + k * 16, 8 ); 
        

        
          
               ByteCopy( &(shape->line[i].point[j].y), pabyRec + 44 + 4*t_nParts + 8 + k * 16 + 8, 8 ); 
        
    
  


So many magic numbers! Where do they come from? Near that code fragment, I don't see any buffer size verification. Maybe there is verification somewhere else, but it is not obvious at all that this code is correct; quite contrary, you made it extremely difficult for a human to verify this piece of code.
Much of the code deals with 32 bit signed integers for sizes. That's why you always need an additional <0 check. Just use unsigned integers! And watch out for integer truncation when you cast size_t to int.
What about integer overflows?

  
    
      MapServer/mapshape.c
    
    
        Lines 617 to 620
      in
      1c14821
    
  
  
    

        
          
           psSHP->nMaxRecords = (int) (psSHP->nMaxRecords * 1.3 + 100); 
        

        
          
            
        

        
          
           psSHP->panRecOffset = (int *) SfRealloc(psSHP->panRecOffset,sizeof(int) * psSHP->nMaxRecords ); 
        

        
          
           psSHP->panRecSize = (int *) SfRealloc(psSHP->panRecSize,sizeof(int) * psSHP->nMaxRecords ); 
        
    
  


This will easily overflow, leading to a SfRealloc() call with a negative integer. Oh yes, SfRealloc() takes a signed integer, WTF. What happens with this negative integer when it's casted back to size_t for realloc()?
Maybe you could argue that this and that limit in the code prevents this integer overflow. Maybe, maybe somebody finds a way around this. My point is: the MapServer code is horribly fragile, it's the anti-style for making secure code. Everywhere I look, I see potential for vulnerabilities.
Of course, it's plain C, and getting error code paths right in plain C is utterly difficult. Just look at the many memory leaks, or worse, the double-free bugs I found (leaks are just DoS, but double-free often leads to remote code execution). C is simply the wrong tool for the job. You could easily improve the code quality by switching all sources to a C++ compiler and use RAII to manage allocations. (Some argue that C++ isn't safe enough and everybody should be using Rust, but I'm a C++ fanboy, and C++ is certainly a great improvement over plain C, and switching is mostly trivial.)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6418,2021-10-05T10:20:25Z,2021-10-07T12:40:27Z,2021-10-15T10:51:24Z,MERGED,True,84,69,19,https://github.com/MaxKellermann,"Fix various security vulnerabilites found by libFuzzer, part 2",11,['Security'],https://github.com/mapserver/mapserver/pull/6418,https://github.com/sdlime,8,https://github.com/MapServer/MapServer/pull/6418#issuecomment-934465790,"This PR starts with a few build breakage fixes which occur when almost all optional features are disabled at compile time.
The last 3 commits fix security vulnerabilities I found with libFuzzer, one of which qualifies for remote code execution, the worst kind of vulnerability.
A crash report from Google Play of an open source app using a copy of MapServer code (https://github.com/XCSoar/XCSoar/) contained a crash due to one of these vulnerabilities, so I investigated and turned on libFuzzer again, which quickly found more vulnerabilities.
I used this program (specific to my app's internal APIs wrapping our my copy of the MapServer code) to run libFuzzer: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
This is similar to my previous PR earlier this year: #6319
Back then, @rouault asked me to change the PR to the ""main"" branch; do you want me to do the same here? (My way of managing my open source apps is that I always merge bug fixes to the ""stable"" branch first, and then merge all ""stable"" bug fixes into the ""main"" branch.)","@MaxKellermann, your candor is appreciated. Can you elaborate on ""mostly trivial""?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6418,2021-10-05T10:20:25Z,2021-10-07T12:40:27Z,2021-10-15T10:51:24Z,MERGED,True,84,69,19,https://github.com/MaxKellermann,"Fix various security vulnerabilites found by libFuzzer, part 2",11,['Security'],https://github.com/mapserver/mapserver/pull/6418,https://github.com/MaxKellermann,9,https://github.com/MapServer/MapServer/pull/6418#issuecomment-934482149,"This PR starts with a few build breakage fixes which occur when almost all optional features are disabled at compile time.
The last 3 commits fix security vulnerabilities I found with libFuzzer, one of which qualifies for remote code execution, the worst kind of vulnerability.
A crash report from Google Play of an open source app using a copy of MapServer code (https://github.com/XCSoar/XCSoar/) contained a crash due to one of these vulnerabilities, so I investigated and turned on libFuzzer again, which quickly found more vulnerabilities.
I used this program (specific to my app's internal APIs wrapping our my copy of the MapServer code) to run libFuzzer: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
This is similar to my previous PR earlier this year: #6319
Back then, @rouault asked me to change the PR to the ""main"" branch; do you want me to do the same here? (My way of managing my open source apps is that I always merge bug fixes to the ""stable"" branch first, and then merge all ""stable"" bug fixes into the ""main"" branch.)","@MaxKellermann, your candor is appreciated. Can you elaborate on ""mostly trivial""?

More like commit 098eb92 (by @rouault). That is: rename *.c to *.cpp, which just switches from the C compiler to the C++ compiler. This usually needs a few adjustments; C++ is mostly a superset of C, but there are small differences.
The whole int -> bool transition was good, but has nothing to do with the C++ switch (bool has been a plain C feature for 22 years already, and using int as boolean has been obsolete ever since); this just makes the transition look more complicated than it needs to be. Most of the other changes in 098eb92 were unnecessary, too. I would really just touch the few things that are really different in C/C++ in the very first step.
Second step (optional): small syntactic stuff like NULL -> nullptr.
Third step (the interesting part): switch to safe C++ data structures, use RAII to free resources automatically, wrap legacy code / thirdparty C libraries in safe C++ wrappers. This eliminates all of the ugly cleanup code like:

  
    
      MapServer/mapshape.c
    
    
        Lines 1354 to 1364
      in
      1c14821
    
  
  
    

        
          
           if (shape->line[i].numpoints <= 0 || shape->line[i].numpoints > nPoints) { 
        

        
          
             msSetError(MS_SHPERR, ""Corrupted .shp file : shape %d, shape->line[%d].numpoints=%d"", ""msSHPReadShape()"", 
        

        
          
                        hEntity, i, shape->line[i].numpoints); 
        

        
          
             while(--i >= 0) 
        

        
          
               free(shape->line[i].point); 
        

        
          
             free(shape->line); 
        

        
          
             shape->line = NULL; 
        

        
          
             shape->numlines = 0; 
        

        
          
             shape->type = MS_SHAPE_NULL; 
        

        
          
             return; 
        

        
          
           } 
        
    
  


... which is very fragile, because it's easy to forget something, and if you add a new struct field, you have to adjust all error code paths.
Fourth step: migrate the error handling to C++ exceptions.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6418,2021-10-05T10:20:25Z,2021-10-07T12:40:27Z,2021-10-15T10:51:24Z,MERGED,True,84,69,19,https://github.com/MaxKellermann,"Fix various security vulnerabilites found by libFuzzer, part 2",11,['Security'],https://github.com/mapserver/mapserver/pull/6418,https://github.com/MaxKellermann,10,https://github.com/MapServer/MapServer/pull/6418#issuecomment-934535563,"This PR starts with a few build breakage fixes which occur when almost all optional features are disabled at compile time.
The last 3 commits fix security vulnerabilities I found with libFuzzer, one of which qualifies for remote code execution, the worst kind of vulnerability.
A crash report from Google Play of an open source app using a copy of MapServer code (https://github.com/XCSoar/XCSoar/) contained a crash due to one of these vulnerabilities, so I investigated and turned on libFuzzer again, which quickly found more vulnerabilities.
I used this program (specific to my app's internal APIs wrapping our my copy of the MapServer code) to run libFuzzer: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
This is similar to my previous PR earlier this year: #6319
Back then, @rouault asked me to change the PR to the ""main"" branch; do you want me to do the same here? (My way of managing my open source apps is that I always merge bug fixes to the ""stable"" branch first, and then merge all ""stable"" bug fixes into the ""main"" branch.)",Added a backport of 8dc4104 and a fix for #6421 (comment),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6419,2021-10-05T10:52:01Z,2021-10-07T12:40:56Z,2021-10-15T10:50:59Z,MERGED,True,55,46,17,https://github.com/MaxKellermann,"Fix various security vulnerabilites found by libFuzzer, part 2b",8,['Security'],https://github.com/mapserver/mapserver/pull/6419,https://github.com/MaxKellermann,1,https://github.com/MapServer/MapServer/pull/6419,"This is #6418 but for the ""main"" branch.
The buffer overflow fix 86b3645 was meanwhile mitigated a bit by fcf13d8, but that commit still left a hole open.
(@rouault)","This is #6418 but for the ""main"" branch.
The buffer overflow fix 86b3645 was meanwhile mitigated a bit by fcf13d8, but that commit still left a hole open.
(@rouault)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6419,2021-10-05T10:52:01Z,2021-10-07T12:40:56Z,2021-10-15T10:50:59Z,MERGED,True,55,46,17,https://github.com/MaxKellermann,"Fix various security vulnerabilites found by libFuzzer, part 2b",8,['Security'],https://github.com/mapserver/mapserver/pull/6419,https://github.com/MaxKellermann,2,https://github.com/MapServer/MapServer/pull/6419#issuecomment-934317791,"This is #6418 but for the ""main"" branch.
The buffer overflow fix 86b3645 was meanwhile mitigated a bit by fcf13d8, but that commit still left a hole open.
(@rouault)","The Travis failure is not related to this PR:

error: can't find Rust compiler",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6419,2021-10-05T10:52:01Z,2021-10-07T12:40:56Z,2021-10-15T10:50:59Z,MERGED,True,55,46,17,https://github.com/MaxKellermann,"Fix various security vulnerabilites found by libFuzzer, part 2b",8,['Security'],https://github.com/mapserver/mapserver/pull/6419,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/6419#issuecomment-934345143,"This is #6418 but for the ""main"" branch.
The buffer overflow fix 86b3645 was meanwhile mitigated a bit by fcf13d8, but that commit still left a hole open.
(@rouault)",Thanks @MaxKellermann! I've hopefully added a fix for the (unrelated) rust/cryptography error.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6419,2021-10-05T10:52:01Z,2021-10-07T12:40:56Z,2021-10-15T10:50:59Z,MERGED,True,55,46,17,https://github.com/MaxKellermann,"Fix various security vulnerabilites found by libFuzzer, part 2b",8,['Security'],https://github.com/mapserver/mapserver/pull/6419,https://github.com/MaxKellermann,4,https://github.com/MapServer/MapServer/pull/6419#issuecomment-934371555,"This is #6418 but for the ""main"" branch.
The buffer overflow fix 86b3645 was meanwhile mitigated a bit by fcf13d8, but that commit still left a hole open.
(@rouault)","Fixed the two merge mistakes, thanks @rouault",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6419,2021-10-05T10:52:01Z,2021-10-07T12:40:56Z,2021-10-15T10:50:59Z,MERGED,True,55,46,17,https://github.com/MaxKellermann,"Fix various security vulnerabilites found by libFuzzer, part 2b",8,['Security'],https://github.com/mapserver/mapserver/pull/6419,https://github.com/MaxKellermann,5,https://github.com/MapServer/MapServer/pull/6419#issuecomment-934527864,"This is #6418 but for the ""main"" branch.
The buffer overflow fix 86b3645 was meanwhile mitigated a bit by fcf13d8, but that commit still left a hole open.
(@rouault)",Added a fix for this bug: #6421 (comment),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6420,2021-10-05T12:01:47Z,2021-10-05T16:23:35Z,2021-10-05T16:23:35Z,MERGED,True,2,1,1,https://github.com/geographika,Pin cryptography version,3,[],https://github.com/mapserver/mapserver/pull/6420,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6420,"The previous fix ENV CRYPTOGRAPHY_DONT_BUILD_RUST=1 only works up to 3.4 so pin the version to avoid error: can't find Rust compiler (e.g. here
See https://stackoverflow.com/questions/66118337/how-to-get-rid-of-cryptography-build-error and also pyca/cryptography#5771","The previous fix ENV CRYPTOGRAPHY_DONT_BUILD_RUST=1 only works up to 3.4 so pin the version to avoid error: can't find Rust compiler (e.g. here
See https://stackoverflow.com/questions/66118337/how-to-get-rid-of-cryptography-build-error and also pyca/cryptography#5771",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6420,2021-10-05T12:01:47Z,2021-10-05T16:23:35Z,2021-10-05T16:23:35Z,MERGED,True,2,1,1,https://github.com/geographika,Pin cryptography version,3,[],https://github.com/mapserver/mapserver/pull/6420,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/6420#issuecomment-934374574,"The previous fix ENV CRYPTOGRAPHY_DONT_BUILD_RUST=1 only works up to 3.4 so pin the version to avoid error: can't find Rust compiler (e.g. here
See https://stackoverflow.com/questions/66118337/how-to-get-rid-of-cryptography-build-error and also pyca/cryptography#5771","I believe this fixes the rust issue, but the WMS client tests are still flakey (see #6415).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6420,2021-10-05T12:01:47Z,2021-10-05T16:23:35Z,2021-10-05T16:23:35Z,MERGED,True,2,1,1,https://github.com/geographika,Pin cryptography version,3,[],https://github.com/mapserver/mapserver/pull/6420,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/6420#issuecomment-934467031,"The previous fix ENV CRYPTOGRAPHY_DONT_BUILD_RUST=1 only works up to 3.4 so pin the version to avoid error: can't find Rust compiler (e.g. here
See https://stackoverflow.com/questions/66118337/how-to-get-rid-of-cryptography-build-error and also pyca/cryptography#5771","but the WMS client tests are still flakey (see #6415).

what's weird is that it doesn't fail on the Build github action workflow based config. could you try to add the ""ca-certificates"" package at the end of line 12 of ci/travis/before_install.sh . I've had an issue recently with GDAL on Travis-CI when hitting OSGeo based servers due to an outdated ca-certifcates package (there have been changes related to Let's encrypt recently in OSGeo infrastructure)",True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6420,2021-10-05T12:01:47Z,2021-10-05T16:23:35Z,2021-10-05T16:23:35Z,MERGED,True,2,1,1,https://github.com/geographika,Pin cryptography version,3,[],https://github.com/mapserver/mapserver/pull/6420,https://github.com/geographika,4,https://github.com/MapServer/MapServer/pull/6420#issuecomment-934563029,"The previous fix ENV CRYPTOGRAPHY_DONT_BUILD_RUST=1 only works up to 3.4 so pin the version to avoid error: can't find Rust compiler (e.g. here
See https://stackoverflow.com/questions/66118337/how-to-get-rid-of-cryptography-build-error and also pyca/cryptography#5771","Thanks @rouault for the suggestion. That seems to have fixed it (although I thought I'd seen Travis pass since I opened #6415).
Merging this now so the CI passes again.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6421,2021-10-05T15:30:03Z,2021-10-28T13:39:12Z,2021-10-28T13:39:12Z,MERGED,True,299,148,6,https://github.com/MaxKellermann,Shapefile fuzzer,2,['Review required'],https://github.com/mapserver/mapserver/pull/6421,https://github.com/MaxKellermann,1,https://github.com/MapServer/MapServer/pull/6421,"This is a plain C port of my MapServer Shapefile fuzzer described in #6418 found here: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
The first commit prepares the library by allowing to pass VSILFILE* instead of filenames; since it duplicates some code, it might need to be reworked. This change is useful to allow using the buffer passed by libFuzzer directly, via VSIFileFromMemBuffer().
The second commit implements the fuzzer.
It took the fuzzer a few seconds to find this unpatched DoS bug:
==458699== ERROR: libFuzzer: out-of-memory (used: 2947Mb; limit: 2048Mb)
   To change the out-of-memory limit use -rss_limit_mb=<N>

Live Heap Allocations: 26561402 bytes in 1941 chunks; quarantined: 1530563688 bytes in 5 chunks; 7295 other chunks; total chunks: 9241; showing top 95% (at most 8 unique contexts)
25693704 byte(s) (96%) in 11 allocation(s)
    #0 0x5243ad in malloc (/home/max/git/mapserver/build/fuzzer/fuzzer+0x5243ad)
    #1 0x437497 in operator new(unsigned long) (/home/max/git/mapserver/build/fuzzer/fuzzer+0x437497)
    #2 0x476932 in main (/home/max/git/mapserver/build/fuzzer/fuzzer+0x476932)
    #3 0x7f66bd473d09 in __libc_start_main csu/../csu/libc-start.c:308:16

Maybe this fuzzer could be added to oss-fuzz? https://github.com/google/oss-fuzz","This is a plain C port of my MapServer Shapefile fuzzer described in #6418 found here: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
The first commit prepares the library by allowing to pass VSILFILE* instead of filenames; since it duplicates some code, it might need to be reworked. This change is useful to allow using the buffer passed by libFuzzer directly, via VSIFileFromMemBuffer().
The second commit implements the fuzzer.
It took the fuzzer a few seconds to find this unpatched DoS bug:
==458699== ERROR: libFuzzer: out-of-memory (used: 2947Mb; limit: 2048Mb)
   To change the out-of-memory limit use -rss_limit_mb=<N>

Live Heap Allocations: 26561402 bytes in 1941 chunks; quarantined: 1530563688 bytes in 5 chunks; 7295 other chunks; total chunks: 9241; showing top 95% (at most 8 unique contexts)
25693704 byte(s) (96%) in 11 allocation(s)
    #0 0x5243ad in malloc (/home/max/git/mapserver/build/fuzzer/fuzzer+0x5243ad)
    #1 0x437497 in operator new(unsigned long) (/home/max/git/mapserver/build/fuzzer/fuzzer+0x437497)
    #2 0x476932 in main (/home/max/git/mapserver/build/fuzzer/fuzzer+0x476932)
    #3 0x7f66bd473d09 in __libc_start_main csu/../csu/libc-start.c:308:16

Maybe this fuzzer could be added to oss-fuzz? https://github.com/google/oss-fuzz",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6421,2021-10-05T15:30:03Z,2021-10-28T13:39:12Z,2021-10-28T13:39:12Z,MERGED,True,299,148,6,https://github.com/MaxKellermann,Shapefile fuzzer,2,['Review required'],https://github.com/mapserver/mapserver/pull/6421,https://github.com/MaxKellermann,2,https://github.com/MapServer/MapServer/pull/6421#issuecomment-934520235,"This is a plain C port of my MapServer Shapefile fuzzer described in #6418 found here: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
The first commit prepares the library by allowing to pass VSILFILE* instead of filenames; since it duplicates some code, it might need to be reworked. This change is useful to allow using the buffer passed by libFuzzer directly, via VSIFileFromMemBuffer().
The second commit implements the fuzzer.
It took the fuzzer a few seconds to find this unpatched DoS bug:
==458699== ERROR: libFuzzer: out-of-memory (used: 2947Mb; limit: 2048Mb)
   To change the out-of-memory limit use -rss_limit_mb=<N>

Live Heap Allocations: 26561402 bytes in 1941 chunks; quarantined: 1530563688 bytes in 5 chunks; 7295 other chunks; total chunks: 9241; showing top 95% (at most 8 unique contexts)
25693704 byte(s) (96%) in 11 allocation(s)
    #0 0x5243ad in malloc (/home/max/git/mapserver/build/fuzzer/fuzzer+0x5243ad)
    #1 0x437497 in operator new(unsigned long) (/home/max/git/mapserver/build/fuzzer/fuzzer+0x437497)
    #2 0x476932 in main (/home/max/git/mapserver/build/fuzzer/fuzzer+0x476932)
    #3 0x7f66bd473d09 in __libc_start_main csu/../csu/libc-start.c:308:16

Maybe this fuzzer could be added to oss-fuzz? https://github.com/google/oss-fuzz","After a minute, it found one of the bugs which were already fixed by my other PR, plus another buffer overflow bug:
==462271==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x616000000bf8 at pc 0x0000004c0d43 bp 0x7fff10fd65f0 sp 0x7fff10fd5db0
WRITE of size 18197 at 0x616000000bf8 thread T0
    #0 0x4c0d42 in memcpy (/home/max/git/mapserver/build/fuzzer/fuzzer+0x4c0d42)
    #1 0x7fb0d64a3a1b  (/usr/lib/libgdal.so.28+0x108aa1b)
    #2 0x7fb0d775973e in msSHPReadShape /home/max/git/mapserver/build/fuzzer/../../mapshape.c:1257:12
    #3 0x5543c0 in LLVMFuzzerTestOneInput /home/max/git/mapserver/build/fuzzer/../../fuzzer.c:50:7
    #4 0x45d6f1 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/home/max/git/mapserver/build/fuzzer/fuzzer+0x45d6f1)
    #5 0x448e02 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) (/home/max/git/mapserver/build/fuzzer/fuzzer+0x448e02)
    #6 0x44ee6e in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/home/max/git/mapserver/build/fuzzer/fuzzer+0x44ee6e)
    #7 0x476932 in main (/home/max/git/mapserver/build/fuzzer/fuzzer+0x476932)
    #8 0x7fb0d4f39d09 in __libc_start_main csu/../csu/libc-start.c:308:16
    #9 0x423509 in _start (/home/max/git/mapserver/build/fuzzer/fuzzer+0x423509)

0x616000000bf8 is located 0 bytes to the right of 632-byte region [0x616000000980,0x616000000bf8)
allocated by thread T0 here:
    #0 0x5246c9 in realloc (/home/max/git/mapserver/build/fuzzer/fuzzer+0x5246c9)
    #1 0x7fb0d774f501 in SfRealloc /home/max/git/mapserver/build/fuzzer/../../mapshape.c:82:10
    #2 0x7fb0d77582fd in msSHPReadAllocateBuffer /home/max/git/mapserver/build/fuzzer/../../mapshape.c:1012:32
    #3 0x7fb0d77594ce in msSHPReadShape /home/max/git/mapserver/build/fuzzer/../../mapshape.c:1244:7
    #4 0x5543c0 in LLVMFuzzerTestOneInput /home/max/git/mapserver/build/fuzzer/../../fuzzer.c:50:7
    #5 0x45d6f1 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/home/max/git/mapserver/build/fuzzer/fuzzer+0x45d6f1)
    #6 0x448e02 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) (/home/max/git/mapserver/build/fuzzer/fuzzer+0x448e02)
    #7 0x44ee6e in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/home/max/git/mapserver/build/fuzzer/fuzzer+0x44ee6e)
    #8 0x476932 in main (/home/max/git/mapserver/build/fuzzer/fuzzer+0x476932)
    #9 0x7fb0d4f39d09 in __libc_start_main csu/../csu/libc-start.c:308:16

.. which is this bug:

  
    
      MapServer/mapshape.c
    
    
        Lines 995 to 996
      in
      1c14821
    
  
  
    

        
          
           int nEntitySize = msSHXReadSize(psSHP, hEntity); 
        

        
          
           if( nEntitySize > INT_MAX - 8 ) { 
        
    
  


This is once again a bad use of a signed integer. The size is negative, but the code doesn't check for negative integers. Seriously ...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6421,2021-10-05T15:30:03Z,2021-10-28T13:39:12Z,2021-10-28T13:39:12Z,MERGED,True,299,148,6,https://github.com/MaxKellermann,Shapefile fuzzer,2,['Review required'],https://github.com/mapserver/mapserver/pull/6421,https://github.com/MaxKellermann,3,https://github.com/MapServer/MapServer/pull/6421#issuecomment-938165689,"This is a plain C port of my MapServer Shapefile fuzzer described in #6418 found here: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
The first commit prepares the library by allowing to pass VSILFILE* instead of filenames; since it duplicates some code, it might need to be reworked. This change is useful to allow using the buffer passed by libFuzzer directly, via VSIFileFromMemBuffer().
The second commit implements the fuzzer.
It took the fuzzer a few seconds to find this unpatched DoS bug:
==458699== ERROR: libFuzzer: out-of-memory (used: 2947Mb; limit: 2048Mb)
   To change the out-of-memory limit use -rss_limit_mb=<N>

Live Heap Allocations: 26561402 bytes in 1941 chunks; quarantined: 1530563688 bytes in 5 chunks; 7295 other chunks; total chunks: 9241; showing top 95% (at most 8 unique contexts)
25693704 byte(s) (96%) in 11 allocation(s)
    #0 0x5243ad in malloc (/home/max/git/mapserver/build/fuzzer/fuzzer+0x5243ad)
    #1 0x437497 in operator new(unsigned long) (/home/max/git/mapserver/build/fuzzer/fuzzer+0x437497)
    #2 0x476932 in main (/home/max/git/mapserver/build/fuzzer/fuzzer+0x476932)
    #3 0x7f66bd473d09 in __libc_start_main csu/../csu/libc-start.c:308:16

Maybe this fuzzer could be added to oss-fuzz? https://github.com/google/oss-fuzz","Rebased on current main, added msResetErrorList() call to avoid memory leak and added some conditional code to allocate new buffers on every iteration.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6421,2021-10-05T15:30:03Z,2021-10-28T13:39:12Z,2021-10-28T13:39:12Z,MERGED,True,299,148,6,https://github.com/MaxKellermann,Shapefile fuzzer,2,['Review required'],https://github.com/mapserver/mapserver/pull/6421,https://github.com/MaxKellermann,4,https://github.com/MapServer/MapServer/pull/6421#issuecomment-942133404,"This is a plain C port of my MapServer Shapefile fuzzer described in #6418 found here: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
The first commit prepares the library by allowing to pass VSILFILE* instead of filenames; since it duplicates some code, it might need to be reworked. This change is useful to allow using the buffer passed by libFuzzer directly, via VSIFileFromMemBuffer().
The second commit implements the fuzzer.
It took the fuzzer a few seconds to find this unpatched DoS bug:
==458699== ERROR: libFuzzer: out-of-memory (used: 2947Mb; limit: 2048Mb)
   To change the out-of-memory limit use -rss_limit_mb=<N>

Live Heap Allocations: 26561402 bytes in 1941 chunks; quarantined: 1530563688 bytes in 5 chunks; 7295 other chunks; total chunks: 9241; showing top 95% (at most 8 unique contexts)
25693704 byte(s) (96%) in 11 allocation(s)
    #0 0x5243ad in malloc (/home/max/git/mapserver/build/fuzzer/fuzzer+0x5243ad)
    #1 0x437497 in operator new(unsigned long) (/home/max/git/mapserver/build/fuzzer/fuzzer+0x437497)
    #2 0x476932 in main (/home/max/git/mapserver/build/fuzzer/fuzzer+0x476932)
    #3 0x7f66bd473d09 in __libc_start_main csu/../csu/libc-start.c:308:16

Maybe this fuzzer could be added to oss-fuzz? https://github.com/google/oss-fuzz","I added the /vsimem/ prefixes.
What about the first commit - this is somewhat rough, I can try to eliminate the code duplication if you think this PR is worthwile and should be merged.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6421,2021-10-05T15:30:03Z,2021-10-28T13:39:12Z,2021-10-28T13:39:12Z,MERGED,True,299,148,6,https://github.com/MaxKellermann,Shapefile fuzzer,2,['Review required'],https://github.com/mapserver/mapserver/pull/6421,https://github.com/rouault,5,https://github.com/MapServer/MapServer/pull/6421#issuecomment-942141501,"This is a plain C port of my MapServer Shapefile fuzzer described in #6418 found here: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
The first commit prepares the library by allowing to pass VSILFILE* instead of filenames; since it duplicates some code, it might need to be reworked. This change is useful to allow using the buffer passed by libFuzzer directly, via VSIFileFromMemBuffer().
The second commit implements the fuzzer.
It took the fuzzer a few seconds to find this unpatched DoS bug:
==458699== ERROR: libFuzzer: out-of-memory (used: 2947Mb; limit: 2048Mb)
   To change the out-of-memory limit use -rss_limit_mb=<N>

Live Heap Allocations: 26561402 bytes in 1941 chunks; quarantined: 1530563688 bytes in 5 chunks; 7295 other chunks; total chunks: 9241; showing top 95% (at most 8 unique contexts)
25693704 byte(s) (96%) in 11 allocation(s)
    #0 0x5243ad in malloc (/home/max/git/mapserver/build/fuzzer/fuzzer+0x5243ad)
    #1 0x437497 in operator new(unsigned long) (/home/max/git/mapserver/build/fuzzer/fuzzer+0x437497)
    #2 0x476932 in main (/home/max/git/mapserver/build/fuzzer/fuzzer+0x476932)
    #3 0x7f66bd473d09 in __libc_start_main csu/../csu/libc-start.c:308:16

Maybe this fuzzer could be added to oss-fuzz? https://github.com/google/oss-fuzz","I can try to eliminate the code duplication if you think this PR is worthwile and should be merged.

which code duplication are you referring to ?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6421,2021-10-05T15:30:03Z,2021-10-28T13:39:12Z,2021-10-28T13:39:12Z,MERGED,True,299,148,6,https://github.com/MaxKellermann,Shapefile fuzzer,2,['Review required'],https://github.com/mapserver/mapserver/pull/6421,https://github.com/MaxKellermann,6,https://github.com/MapServer/MapServer/pull/6421#issuecomment-942144144,"This is a plain C port of my MapServer Shapefile fuzzer described in #6418 found here: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
The first commit prepares the library by allowing to pass VSILFILE* instead of filenames; since it duplicates some code, it might need to be reworked. This change is useful to allow using the buffer passed by libFuzzer directly, via VSIFileFromMemBuffer().
The second commit implements the fuzzer.
It took the fuzzer a few seconds to find this unpatched DoS bug:
==458699== ERROR: libFuzzer: out-of-memory (used: 2947Mb; limit: 2048Mb)
   To change the out-of-memory limit use -rss_limit_mb=<N>

Live Heap Allocations: 26561402 bytes in 1941 chunks; quarantined: 1530563688 bytes in 5 chunks; 7295 other chunks; total chunks: 9241; showing top 95% (at most 8 unique contexts)
25693704 byte(s) (96%) in 11 allocation(s)
    #0 0x5243ad in malloc (/home/max/git/mapserver/build/fuzzer/fuzzer+0x5243ad)
    #1 0x437497 in operator new(unsigned long) (/home/max/git/mapserver/build/fuzzer/fuzzer+0x437497)
    #2 0x476932 in main (/home/max/git/mapserver/build/fuzzer/fuzzer+0x476932)
    #3 0x7f66bd473d09 in __libc_start_main csu/../csu/libc-start.c:308:16

Maybe this fuzzer could be added to oss-fuzz? https://github.com/google/oss-fuzz","which code duplication are you referring to ?

The one caused by the first commit in this PR. It copies code from msShapefileOpen() to msShapefileOpen2() (also, badly named). I was not sure if you want to merge this fuzzer, so this is only a q'n'd demo.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6421,2021-10-05T15:30:03Z,2021-10-28T13:39:12Z,2021-10-28T13:39:12Z,MERGED,True,299,148,6,https://github.com/MaxKellermann,Shapefile fuzzer,2,['Review required'],https://github.com/mapserver/mapserver/pull/6421,https://github.com/rouault,7,https://github.com/MapServer/MapServer/pull/6421#issuecomment-942149489,"This is a plain C port of my MapServer Shapefile fuzzer described in #6418 found here: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
The first commit prepares the library by allowing to pass VSILFILE* instead of filenames; since it duplicates some code, it might need to be reworked. This change is useful to allow using the buffer passed by libFuzzer directly, via VSIFileFromMemBuffer().
The second commit implements the fuzzer.
It took the fuzzer a few seconds to find this unpatched DoS bug:
==458699== ERROR: libFuzzer: out-of-memory (used: 2947Mb; limit: 2048Mb)
   To change the out-of-memory limit use -rss_limit_mb=<N>

Live Heap Allocations: 26561402 bytes in 1941 chunks; quarantined: 1530563688 bytes in 5 chunks; 7295 other chunks; total chunks: 9241; showing top 95% (at most 8 unique contexts)
25693704 byte(s) (96%) in 11 allocation(s)
    #0 0x5243ad in malloc (/home/max/git/mapserver/build/fuzzer/fuzzer+0x5243ad)
    #1 0x437497 in operator new(unsigned long) (/home/max/git/mapserver/build/fuzzer/fuzzer+0x437497)
    #2 0x476932 in main (/home/max/git/mapserver/build/fuzzer/fuzzer+0x476932)
    #3 0x7f66bd473d09 in __libc_start_main csu/../csu/libc-start.c:308:16

Maybe this fuzzer could be added to oss-fuzz? https://github.com/google/oss-fuzz","@sdlime Do we want to merge this ? This is somewhat related to discussions regarding ossfuzz integration.  This is a fuzzer that can be locally run. This is something that could also potentially be used in a ossfuzz integration.
@MaxKellermann We would want to rename the fuzzer to shapefuzzer if we add others. And perhaps put it in a fuzzers/ subdirectory.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6421,2021-10-05T15:30:03Z,2021-10-28T13:39:12Z,2021-10-28T13:39:12Z,MERGED,True,299,148,6,https://github.com/MaxKellermann,Shapefile fuzzer,2,['Review required'],https://github.com/mapserver/mapserver/pull/6421,https://github.com/MaxKellermann,8,https://github.com/MapServer/MapServer/pull/6421#issuecomment-942167308,"This is a plain C port of my MapServer Shapefile fuzzer described in #6418 found here: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
The first commit prepares the library by allowing to pass VSILFILE* instead of filenames; since it duplicates some code, it might need to be reworked. This change is useful to allow using the buffer passed by libFuzzer directly, via VSIFileFromMemBuffer().
The second commit implements the fuzzer.
It took the fuzzer a few seconds to find this unpatched DoS bug:
==458699== ERROR: libFuzzer: out-of-memory (used: 2947Mb; limit: 2048Mb)
   To change the out-of-memory limit use -rss_limit_mb=<N>

Live Heap Allocations: 26561402 bytes in 1941 chunks; quarantined: 1530563688 bytes in 5 chunks; 7295 other chunks; total chunks: 9241; showing top 95% (at most 8 unique contexts)
25693704 byte(s) (96%) in 11 allocation(s)
    #0 0x5243ad in malloc (/home/max/git/mapserver/build/fuzzer/fuzzer+0x5243ad)
    #1 0x437497 in operator new(unsigned long) (/home/max/git/mapserver/build/fuzzer/fuzzer+0x437497)
    #2 0x476932 in main (/home/max/git/mapserver/build/fuzzer/fuzzer+0x476932)
    #3 0x7f66bd473d09 in __libc_start_main csu/../csu/libc-start.c:308:16

Maybe this fuzzer could be added to oss-fuzz? https://github.com/google/oss-fuzz","@MaxKellermann We would want to rename the fuzzer to shapefuzzer if we add others. And perhaps put it in a fuzzers/ subdirectory.

I just tried, but that's more complicated due to quirks in your build system:
FAILED: fuzzers/CMakeFiles/shapefuzzer.dir/shapefuzzer.c.o 
ccache /usr/bin/clang  -I. -I../../renderers/agg/include -I../../mapscript/v8 -Wall -Werror=format-security -fsanitize=fuzzer,address -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -g -Wall -Wextra -Werror=format-security -std=c99 -MD -MT fuzzers/CMakeFiles/shapefuzzer.dir/shapefuzzer.c.o -MF fuzzers/CMakeFiles/shapefuzzer.dir/shapefuzzer.c.o.d -o fuzzers/CMakeFiles/shapefuzzer.dir/shapefuzzer.c.o -c ../../fuzzers/shapefuzzer.c
In file included from ../../fuzzers/shapefuzzer.c:1:
In file included from ../../fuzzers/../mapserver.h:126:
In file included from ../../fuzzers/../mapshape.h:35:
In file included from ../../fuzzers/../mapproject.h:46:
/usr/include/proj_api.h:37:2: error: 'To use the proj_api.h you must define the macro ACCEPT_USE_OF_DEPRECATED_PROJ_API_H'
#error 'To use the proj_api.h you must define the macro ACCEPT_USE_OF_DEPRECATED_PROJ_API_H'
 ^
In file included from ../../fuzzers/shapefuzzer.c:1:
In file included from ../../fuzzers/../mapserver.h:126:
../../fuzzers/../mapshape.h:37:10: fatal error: 'cpl_vsi.h' file not found
#include ""cpl_vsi.h""
         ^~~~~~~~~~~
2 errors generated.

This is because you're using ADD_DEFINITIONS which only affects the current build directory, but not subdirectories:

  
    
      MapServer/cmake/FindProj.cmake
    
    
         Line 35
      in
      cc714db
    
  
  
    

        
          
           ADD_DEFINITIONS(-DPROJ_VERSION_MAJOR=${PROJ_VERSION_MAJOR}) 
        
    
  


This way of doing it is fragile, and this is the result of it.
The simplest way to fix the libproj problem is to drop support for proj versions older than 5, and just always include <proj.h>.
We could also untangle all those headers, and use forward-declarations, which would also reduce compile times - right now, everybody seems to include all internal MapServer headers.
Or move the PROJ_VERSION_MAJOR definition to the generated mapserver-config.h header.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6421,2021-10-05T15:30:03Z,2021-10-28T13:39:12Z,2021-10-28T13:39:12Z,MERGED,True,299,148,6,https://github.com/MaxKellermann,Shapefile fuzzer,2,['Review required'],https://github.com/mapserver/mapserver/pull/6421,https://github.com/rouault,9,https://github.com/MapServer/MapServer/pull/6421#issuecomment-942209161,"This is a plain C port of my MapServer Shapefile fuzzer described in #6418 found here: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
The first commit prepares the library by allowing to pass VSILFILE* instead of filenames; since it duplicates some code, it might need to be reworked. This change is useful to allow using the buffer passed by libFuzzer directly, via VSIFileFromMemBuffer().
The second commit implements the fuzzer.
It took the fuzzer a few seconds to find this unpatched DoS bug:
==458699== ERROR: libFuzzer: out-of-memory (used: 2947Mb; limit: 2048Mb)
   To change the out-of-memory limit use -rss_limit_mb=<N>

Live Heap Allocations: 26561402 bytes in 1941 chunks; quarantined: 1530563688 bytes in 5 chunks; 7295 other chunks; total chunks: 9241; showing top 95% (at most 8 unique contexts)
25693704 byte(s) (96%) in 11 allocation(s)
    #0 0x5243ad in malloc (/home/max/git/mapserver/build/fuzzer/fuzzer+0x5243ad)
    #1 0x437497 in operator new(unsigned long) (/home/max/git/mapserver/build/fuzzer/fuzzer+0x437497)
    #2 0x476932 in main (/home/max/git/mapserver/build/fuzzer/fuzzer+0x476932)
    #3 0x7f66bd473d09 in __libc_start_main csu/../csu/libc-start.c:308:16

Maybe this fuzzer could be added to oss-fuzz? https://github.com/google/oss-fuzz","Or move the PROJ_VERSION_MAJOR definition to the generated mapserver-config.h header.

would perhaps be the most simple change ?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6421,2021-10-05T15:30:03Z,2021-10-28T13:39:12Z,2021-10-28T13:39:12Z,MERGED,True,299,148,6,https://github.com/MaxKellermann,Shapefile fuzzer,2,['Review required'],https://github.com/mapserver/mapserver/pull/6421,https://github.com/MaxKellermann,10,https://github.com/MapServer/MapServer/pull/6421#issuecomment-942239066,"This is a plain C port of my MapServer Shapefile fuzzer described in #6418 found here: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
The first commit prepares the library by allowing to pass VSILFILE* instead of filenames; since it duplicates some code, it might need to be reworked. This change is useful to allow using the buffer passed by libFuzzer directly, via VSIFileFromMemBuffer().
The second commit implements the fuzzer.
It took the fuzzer a few seconds to find this unpatched DoS bug:
==458699== ERROR: libFuzzer: out-of-memory (used: 2947Mb; limit: 2048Mb)
   To change the out-of-memory limit use -rss_limit_mb=<N>

Live Heap Allocations: 26561402 bytes in 1941 chunks; quarantined: 1530563688 bytes in 5 chunks; 7295 other chunks; total chunks: 9241; showing top 95% (at most 8 unique contexts)
25693704 byte(s) (96%) in 11 allocation(s)
    #0 0x5243ad in malloc (/home/max/git/mapserver/build/fuzzer/fuzzer+0x5243ad)
    #1 0x437497 in operator new(unsigned long) (/home/max/git/mapserver/build/fuzzer/fuzzer+0x437497)
    #2 0x476932 in main (/home/max/git/mapserver/build/fuzzer/fuzzer+0x476932)
    #3 0x7f66bd473d09 in __libc_start_main csu/../csu/libc-start.c:308:16

Maybe this fuzzer could be added to oss-fuzz? https://github.com/google/oss-fuzz","This is because you're using ADD_DEFINITIONS which only affects the current build directory, but not subdirectories:

I was wrong here. These do get used by subdirectories, but only if they are added after the ADD_DEFINITIONS call. My add_subdirectory call was too early.
Pushed with rename and in subdirectory!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6421,2021-10-05T15:30:03Z,2021-10-28T13:39:12Z,2021-10-28T13:39:12Z,MERGED,True,299,148,6,https://github.com/MaxKellermann,Shapefile fuzzer,2,['Review required'],https://github.com/mapserver/mapserver/pull/6421,https://github.com/MaxKellermann,11,https://github.com/MapServer/MapServer/pull/6421#issuecomment-942459985,"This is a plain C port of my MapServer Shapefile fuzzer described in #6418 found here: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
The first commit prepares the library by allowing to pass VSILFILE* instead of filenames; since it duplicates some code, it might need to be reworked. This change is useful to allow using the buffer passed by libFuzzer directly, via VSIFileFromMemBuffer().
The second commit implements the fuzzer.
It took the fuzzer a few seconds to find this unpatched DoS bug:
==458699== ERROR: libFuzzer: out-of-memory (used: 2947Mb; limit: 2048Mb)
   To change the out-of-memory limit use -rss_limit_mb=<N>

Live Heap Allocations: 26561402 bytes in 1941 chunks; quarantined: 1530563688 bytes in 5 chunks; 7295 other chunks; total chunks: 9241; showing top 95% (at most 8 unique contexts)
25693704 byte(s) (96%) in 11 allocation(s)
    #0 0x5243ad in malloc (/home/max/git/mapserver/build/fuzzer/fuzzer+0x5243ad)
    #1 0x437497 in operator new(unsigned long) (/home/max/git/mapserver/build/fuzzer/fuzzer+0x437497)
    #2 0x476932 in main (/home/max/git/mapserver/build/fuzzer/fuzzer+0x476932)
    #3 0x7f66bd473d09 in __libc_start_main csu/../csu/libc-start.c:308:16

Maybe this fuzzer could be added to oss-fuzz? https://github.com/google/oss-fuzz",Code duplication in the first commit eliminated by splitting the functions further. The function names are ugly - does anybody have a suggestion?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6421,2021-10-05T15:30:03Z,2021-10-28T13:39:12Z,2021-10-28T13:39:12Z,MERGED,True,299,148,6,https://github.com/MaxKellermann,Shapefile fuzzer,2,['Review required'],https://github.com/mapserver/mapserver/pull/6421,https://github.com/geographika,12,https://github.com/MapServer/MapServer/pull/6421#issuecomment-942552774,"This is a plain C port of my MapServer Shapefile fuzzer described in #6418 found here: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
The first commit prepares the library by allowing to pass VSILFILE* instead of filenames; since it duplicates some code, it might need to be reworked. This change is useful to allow using the buffer passed by libFuzzer directly, via VSIFileFromMemBuffer().
The second commit implements the fuzzer.
It took the fuzzer a few seconds to find this unpatched DoS bug:
==458699== ERROR: libFuzzer: out-of-memory (used: 2947Mb; limit: 2048Mb)
   To change the out-of-memory limit use -rss_limit_mb=<N>

Live Heap Allocations: 26561402 bytes in 1941 chunks; quarantined: 1530563688 bytes in 5 chunks; 7295 other chunks; total chunks: 9241; showing top 95% (at most 8 unique contexts)
25693704 byte(s) (96%) in 11 allocation(s)
    #0 0x5243ad in malloc (/home/max/git/mapserver/build/fuzzer/fuzzer+0x5243ad)
    #1 0x437497 in operator new(unsigned long) (/home/max/git/mapserver/build/fuzzer/fuzzer+0x437497)
    #2 0x476932 in main (/home/max/git/mapserver/build/fuzzer/fuzzer+0x476932)
    #3 0x7f66bd473d09 in __libc_start_main csu/../csu/libc-start.c:308:16

Maybe this fuzzer could be added to oss-fuzz? https://github.com/google/oss-fuzz","Code duplication in the first commit eliminated by splitting the functions further. The function names are ugly - does anybody have a suggestion?

What are the differences - is it opening a virtual file or a file on disk?
If so then msDBFOpen2 > msDBFOpenVirtualFile etc. are more descriptive IMO.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6421,2021-10-05T15:30:03Z,2021-10-28T13:39:12Z,2021-10-28T13:39:12Z,MERGED,True,299,148,6,https://github.com/MaxKellermann,Shapefile fuzzer,2,['Review required'],https://github.com/mapserver/mapserver/pull/6421,https://github.com/rouault,13,https://github.com/MapServer/MapServer/pull/6421#issuecomment-942556302,"This is a plain C port of my MapServer Shapefile fuzzer described in #6418 found here: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
The first commit prepares the library by allowing to pass VSILFILE* instead of filenames; since it duplicates some code, it might need to be reworked. This change is useful to allow using the buffer passed by libFuzzer directly, via VSIFileFromMemBuffer().
The second commit implements the fuzzer.
It took the fuzzer a few seconds to find this unpatched DoS bug:
==458699== ERROR: libFuzzer: out-of-memory (used: 2947Mb; limit: 2048Mb)
   To change the out-of-memory limit use -rss_limit_mb=<N>

Live Heap Allocations: 26561402 bytes in 1941 chunks; quarantined: 1530563688 bytes in 5 chunks; 7295 other chunks; total chunks: 9241; showing top 95% (at most 8 unique contexts)
25693704 byte(s) (96%) in 11 allocation(s)
    #0 0x5243ad in malloc (/home/max/git/mapserver/build/fuzzer/fuzzer+0x5243ad)
    #1 0x437497 in operator new(unsigned long) (/home/max/git/mapserver/build/fuzzer/fuzzer+0x437497)
    #2 0x476932 in main (/home/max/git/mapserver/build/fuzzer/fuzzer+0x476932)
    #3 0x7f66bd473d09 in __libc_start_main csu/../csu/libc-start.c:308:16

Maybe this fuzzer could be added to oss-fuzz? https://github.com/google/oss-fuzz","is it opening a virtual file or a file on disk?

a VSILFILE* / virtual file in GDAL parlance can be a ""real"" file, a network file, a memory file, etc.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6421,2021-10-05T15:30:03Z,2021-10-28T13:39:12Z,2021-10-28T13:39:12Z,MERGED,True,299,148,6,https://github.com/MaxKellermann,Shapefile fuzzer,2,['Review required'],https://github.com/mapserver/mapserver/pull/6421,https://github.com/geographika,14,https://github.com/MapServer/MapServer/pull/6421#issuecomment-942648208,"This is a plain C port of my MapServer Shapefile fuzzer described in #6418 found here: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
The first commit prepares the library by allowing to pass VSILFILE* instead of filenames; since it duplicates some code, it might need to be reworked. This change is useful to allow using the buffer passed by libFuzzer directly, via VSIFileFromMemBuffer().
The second commit implements the fuzzer.
It took the fuzzer a few seconds to find this unpatched DoS bug:
==458699== ERROR: libFuzzer: out-of-memory (used: 2947Mb; limit: 2048Mb)
   To change the out-of-memory limit use -rss_limit_mb=<N>

Live Heap Allocations: 26561402 bytes in 1941 chunks; quarantined: 1530563688 bytes in 5 chunks; 7295 other chunks; total chunks: 9241; showing top 95% (at most 8 unique contexts)
25693704 byte(s) (96%) in 11 allocation(s)
    #0 0x5243ad in malloc (/home/max/git/mapserver/build/fuzzer/fuzzer+0x5243ad)
    #1 0x437497 in operator new(unsigned long) (/home/max/git/mapserver/build/fuzzer/fuzzer+0x437497)
    #2 0x476932 in main (/home/max/git/mapserver/build/fuzzer/fuzzer+0x476932)
    #3 0x7f66bd473d09 in __libc_start_main csu/../csu/libc-start.c:308:16

Maybe this fuzzer could be added to oss-fuzz? https://github.com/google/oss-fuzz","a VSILFILE* / virtual file in GDAL parlance can be a ""real"" file, a network file, a memory file, etc.

Maybe msDBFOpenVSIL to match the GDAL terminology?
Is VSIL an acronym? I can't seem to find the origins of it on https://gdal.org/user/virtual_file_systems.html",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6421,2021-10-05T15:30:03Z,2021-10-28T13:39:12Z,2021-10-28T13:39:12Z,MERGED,True,299,148,6,https://github.com/MaxKellermann,Shapefile fuzzer,2,['Review required'],https://github.com/mapserver/mapserver/pull/6421,https://github.com/rouault,15,https://github.com/MapServer/MapServer/pull/6421#issuecomment-942654957,"This is a plain C port of my MapServer Shapefile fuzzer described in #6418 found here: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
The first commit prepares the library by allowing to pass VSILFILE* instead of filenames; since it duplicates some code, it might need to be reworked. This change is useful to allow using the buffer passed by libFuzzer directly, via VSIFileFromMemBuffer().
The second commit implements the fuzzer.
It took the fuzzer a few seconds to find this unpatched DoS bug:
==458699== ERROR: libFuzzer: out-of-memory (used: 2947Mb; limit: 2048Mb)
   To change the out-of-memory limit use -rss_limit_mb=<N>

Live Heap Allocations: 26561402 bytes in 1941 chunks; quarantined: 1530563688 bytes in 5 chunks; 7295 other chunks; total chunks: 9241; showing top 95% (at most 8 unique contexts)
25693704 byte(s) (96%) in 11 allocation(s)
    #0 0x5243ad in malloc (/home/max/git/mapserver/build/fuzzer/fuzzer+0x5243ad)
    #1 0x437497 in operator new(unsigned long) (/home/max/git/mapserver/build/fuzzer/fuzzer+0x437497)
    #2 0x476932 in main (/home/max/git/mapserver/build/fuzzer/fuzzer+0x476932)
    #3 0x7f66bd473d09 in __libc_start_main csu/../csu/libc-start.c:308:16

Maybe this fuzzer could be added to oss-fuzz? https://github.com/google/oss-fuzz","Is VSIL an acronym?

Presumably, but I'm not sure. Perhaps VSI = Virtual Standardized Interface (https://github.com/OSGeo/gdal/blob/master/gdal/port/cpl_vsi.h#L43) . and the L is for Large (there was a VSIFILE* without L that was an alias to C FILE*, but it has been removed a few years ago), since it was designed to deal with > 4 GB files whose support in C is not super standardized (at least in 1998 where it was designed)",True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6421,2021-10-05T15:30:03Z,2021-10-28T13:39:12Z,2021-10-28T13:39:12Z,MERGED,True,299,148,6,https://github.com/MaxKellermann,Shapefile fuzzer,2,['Review required'],https://github.com/mapserver/mapserver/pull/6421,https://github.com/MaxKellermann,16,https://github.com/MapServer/MapServer/pull/6421#issuecomment-943231298,"This is a plain C port of my MapServer Shapefile fuzzer described in #6418 found here: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
The first commit prepares the library by allowing to pass VSILFILE* instead of filenames; since it duplicates some code, it might need to be reworked. This change is useful to allow using the buffer passed by libFuzzer directly, via VSIFileFromMemBuffer().
The second commit implements the fuzzer.
It took the fuzzer a few seconds to find this unpatched DoS bug:
==458699== ERROR: libFuzzer: out-of-memory (used: 2947Mb; limit: 2048Mb)
   To change the out-of-memory limit use -rss_limit_mb=<N>

Live Heap Allocations: 26561402 bytes in 1941 chunks; quarantined: 1530563688 bytes in 5 chunks; 7295 other chunks; total chunks: 9241; showing top 95% (at most 8 unique contexts)
25693704 byte(s) (96%) in 11 allocation(s)
    #0 0x5243ad in malloc (/home/max/git/mapserver/build/fuzzer/fuzzer+0x5243ad)
    #1 0x437497 in operator new(unsigned long) (/home/max/git/mapserver/build/fuzzer/fuzzer+0x437497)
    #2 0x476932 in main (/home/max/git/mapserver/build/fuzzer/fuzzer+0x476932)
    #3 0x7f66bd473d09 in __libc_start_main csu/../csu/libc-start.c:308:16

Maybe this fuzzer could be added to oss-fuzz? https://github.com/google/oss-fuzz",Renamed as @geographika suggested,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6421,2021-10-05T15:30:03Z,2021-10-28T13:39:12Z,2021-10-28T13:39:12Z,MERGED,True,299,148,6,https://github.com/MaxKellermann,Shapefile fuzzer,2,['Review required'],https://github.com/mapserver/mapserver/pull/6421,https://github.com/MaxKellermann,17,https://github.com/MapServer/MapServer/pull/6421#issuecomment-944190012,"This is a plain C port of my MapServer Shapefile fuzzer described in #6418 found here: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
The first commit prepares the library by allowing to pass VSILFILE* instead of filenames; since it duplicates some code, it might need to be reworked. This change is useful to allow using the buffer passed by libFuzzer directly, via VSIFileFromMemBuffer().
The second commit implements the fuzzer.
It took the fuzzer a few seconds to find this unpatched DoS bug:
==458699== ERROR: libFuzzer: out-of-memory (used: 2947Mb; limit: 2048Mb)
   To change the out-of-memory limit use -rss_limit_mb=<N>

Live Heap Allocations: 26561402 bytes in 1941 chunks; quarantined: 1530563688 bytes in 5 chunks; 7295 other chunks; total chunks: 9241; showing top 95% (at most 8 unique contexts)
25693704 byte(s) (96%) in 11 allocation(s)
    #0 0x5243ad in malloc (/home/max/git/mapserver/build/fuzzer/fuzzer+0x5243ad)
    #1 0x437497 in operator new(unsigned long) (/home/max/git/mapserver/build/fuzzer/fuzzer+0x437497)
    #2 0x476932 in main (/home/max/git/mapserver/build/fuzzer/fuzzer+0x476932)
    #3 0x7f66bd473d09 in __libc_start_main csu/../csu/libc-start.c:308:16

Maybe this fuzzer could be added to oss-fuzz? https://github.com/google/oss-fuzz",@rouault both comments implemented,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6421,2021-10-05T15:30:03Z,2021-10-28T13:39:12Z,2021-10-28T13:39:12Z,MERGED,True,299,148,6,https://github.com/MaxKellermann,Shapefile fuzzer,2,['Review required'],https://github.com/mapserver/mapserver/pull/6421,https://github.com/rouault,18,https://github.com/MapServer/MapServer/pull/6421#issuecomment-953854853,"This is a plain C port of my MapServer Shapefile fuzzer described in #6418 found here: https://github.com/XCSoar/XCSoar/blob/master/fuzzer/src/FuzzTopographyFile.cpp
The first commit prepares the library by allowing to pass VSILFILE* instead of filenames; since it duplicates some code, it might need to be reworked. This change is useful to allow using the buffer passed by libFuzzer directly, via VSIFileFromMemBuffer().
The second commit implements the fuzzer.
It took the fuzzer a few seconds to find this unpatched DoS bug:
==458699== ERROR: libFuzzer: out-of-memory (used: 2947Mb; limit: 2048Mb)
   To change the out-of-memory limit use -rss_limit_mb=<N>

Live Heap Allocations: 26561402 bytes in 1941 chunks; quarantined: 1530563688 bytes in 5 chunks; 7295 other chunks; total chunks: 9241; showing top 95% (at most 8 unique contexts)
25693704 byte(s) (96%) in 11 allocation(s)
    #0 0x5243ad in malloc (/home/max/git/mapserver/build/fuzzer/fuzzer+0x5243ad)
    #1 0x437497 in operator new(unsigned long) (/home/max/git/mapserver/build/fuzzer/fuzzer+0x437497)
    #2 0x476932 in main (/home/max/git/mapserver/build/fuzzer/fuzzer+0x476932)
    #3 0x7f66bd473d09 in __libc_start_main csu/../csu/libc-start.c:308:16

Maybe this fuzzer could be added to oss-fuzz? https://github.com/google/oss-fuzz",@sdlime agreed during today's PSC meeting to merge this. Merging,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6423,2021-10-07T13:18:14Z,2021-10-08T13:20:57Z,2021-10-15T10:51:25Z,MERGED,True,112,128,14,https://github.com/MaxKellermann,Some code cleanup and micro-optimizations,9,[],https://github.com/mapserver/mapserver/pull/6423,https://github.com/MaxKellermann,1,https://github.com/MapServer/MapServer/pull/6423,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6423,2021-10-07T13:18:14Z,2021-10-08T13:20:57Z,2021-10-15T10:51:25Z,MERGED,True,112,128,14,https://github.com/MaxKellermann,Some code cleanup and micro-optimizations,9,[],https://github.com/mapserver/mapserver/pull/6423,https://github.com/jratike80,2,https://github.com/MapServer/MapServer/pull/6423#issuecomment-937825343,,"Because I do not program I do not really understand what you are doing, but I have a feeling that it is a great input for the project. Thank you!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6423,2021-10-07T13:18:14Z,2021-10-08T13:20:57Z,2021-10-15T10:51:25Z,MERGED,True,112,128,14,https://github.com/MaxKellermann,Some code cleanup and micro-optimizations,9,[],https://github.com/mapserver/mapserver/pull/6423,https://github.com/MaxKellermann,3,https://github.com/MapServer/MapServer/pull/6423#issuecomment-937902993,,"@rouault, with #ifdef USE_OGCAPI_SVR, I get build failures - exactly the kind of build failure my commit was supposed to fix. It doesn't work.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6423,2021-10-07T13:18:14Z,2021-10-08T13:20:57Z,2021-10-15T10:51:25Z,MERGED,True,112,128,14,https://github.com/MaxKellermann,Some code cleanup and micro-optimizations,9,[],https://github.com/mapserver/mapserver/pull/6423,https://github.com/MaxKellermann,4,https://github.com/MapServer/MapServer/pull/6423#issuecomment-938064913,,"I dropped the guard patch for now, until we have sorted that one out.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6424,2021-10-15T01:53:20Z,2021-10-18T16:09:43Z,2021-10-18T16:09:50Z,MERGED,True,45,8,3,https://github.com/sdlime,Make sure densify tolerance is greater than zero.,26,[],https://github.com/mapserver/mapserver/pull/6424,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/6424,Make sure densify tolerance is greater than zero and a few misc improvements to functions supporting the inner and outer GEOMTRANSFORMs. Mostly checking input values are valid...,Make sure densify tolerance is greater than zero and a few misc improvements to functions supporting the inner and outer GEOMTRANSFORMs. Mostly checking input values are valid...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6424,2021-10-15T01:53:20Z,2021-10-18T16:09:43Z,2021-10-18T16:09:50Z,MERGED,True,45,8,3,https://github.com/sdlime,Make sure densify tolerance is greater than zero.,26,[],https://github.com/mapserver/mapserver/pull/6424,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6424#issuecomment-943920233,Make sure densify tolerance is greater than zero and a few misc improvements to functions supporting the inner and outer GEOMTRANSFORMs. Mostly checking input values are valid...,Should be a quick review. I just wanted to make sure the densify tolerance was > 0. I touched a couple of other functions related to inner/outer rings to check args and make sure they were reasonable. Many of the functions in mapprimitive.c don't check args - think it's worth going through and hardening?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6424,2021-10-15T01:53:20Z,2021-10-18T16:09:43Z,2021-10-18T16:09:50Z,MERGED,True,45,8,3,https://github.com/sdlime,Make sure densify tolerance is greater than zero.,26,[],https://github.com/mapserver/mapserver/pull/6424,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/6424#issuecomment-944153956,Make sure densify tolerance is greater than zero and a few misc improvements to functions supporting the inner and outer GEOMTRANSFORMs. Mostly checking input values are valid...,"Many of the functions in mapprimitive.c don't check args - think it's worth going through and hardening?

It really depends on situations, and whether they are in time critical paths, and the cost of the checks versus the cost of what the function does. For example for a simple getter that might be called in a loop, doing argument verification can become expensive. In the C or C++ standard libraries, there are (documented) assumptions on the arguments, that aren't enforced by them. For example strlen(NULL) is documented as unspecified behavior, or v[idx] on a std::vector if you pass an invalid index.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6424,2021-10-15T01:53:20Z,2021-10-18T16:09:43Z,2021-10-18T16:09:50Z,MERGED,True,45,8,3,https://github.com/sdlime,Make sure densify tolerance is greater than zero.,26,[],https://github.com/mapserver/mapserver/pull/6424,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/6424#issuecomment-944322343,Make sure densify tolerance is greater than zero and a few misc improvements to functions supporting the inner and outer GEOMTRANSFORMs. Mostly checking input values are valid...,"Many of the functions in mapprimitive.c don't check args - think it's worth going through and hardening?

It really depends on situations, and whether they are in time critical paths, and the cost of the checks versus the cost of what the function does. For example for a simple getter that might be called in a loop, doing argument verification can become expensive. In the C or C++ standard libraries, there are (documented) assumptions on the arguments, that aren't enforced by them. For example strlen(NULL) is documented as unspecified behavior, or v[idx] on a std::vector if you pass an invalid index.

There are a few functions like that, for example, msAddPoint(), msAddLine(), msAddLineDirectly() that would be called many times in loops as geometries are manipulated. Still others like geometry clipping or area computation are used relatively infrequently and do a lot of work so simply checking to make sure the input shape isn't NULL seems insignificant.
When you mention performance I wonder if there are approaches to regression tests that could catch changes that significantly affect certain performance benchmarks. I suppose there's probably too much variation in the environments where tests are executed for that to be possible.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6426,2021-10-21T14:12:59Z,2022-02-07T19:04:58Z,2022-03-22T00:30:13Z,CLOSED,False,1823,1781,5,https://github.com/sdlime,WIP: Require users to opt-in for URL-based update of select properties,26,[],https://github.com/mapserver/mapserver/pull/6426,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/6426,"This limits URL-based update of select properties by adding a new ""urlupdate"" property to objects that support that sort of thing currently. Users will have to opt-in and have fine-grained control of which properties to allow update. This support has been added to the scalebar object to serve as a pattern for review.

 objects to update: map, layer, class, style, label, legend, query map, reference map, scalebar and web.
 remove support for properties that support runtime substitutions. Those properties require a regex which can be tough to write for complex strings so using substitutions is much easier (and safer) for users.
 consider removing properties that can be set via other mechanisms (e.g. map size or map extent).
 remove DATAPATTERN and TEMPLATEPATTERN properties from the web object.

--Steve","This limits URL-based update of select properties by adding a new ""urlupdate"" property to objects that support that sort of thing currently. Users will have to opt-in and have fine-grained control of which properties to allow update. This support has been added to the scalebar object to serve as a pattern for review.

 objects to update: map, layer, class, style, label, legend, query map, reference map, scalebar and web.
 remove support for properties that support runtime substitutions. Those properties require a regex which can be tough to write for complex strings so using substitutions is much easier (and safer) for users.
 consider removing properties that can be set via other mechanisms (e.g. map size or map extent).
 remove DATAPATTERN and TEMPLATEPATTERN properties from the web object.

--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6426,2021-10-21T14:12:59Z,2022-02-07T19:04:58Z,2022-03-22T00:30:13Z,CLOSED,False,1823,1781,5,https://github.com/sdlime,WIP: Require users to opt-in for URL-based update of select properties,26,[],https://github.com/mapserver/mapserver/pull/6426,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6426#issuecomment-1011489215,"This limits URL-based update of select properties by adding a new ""urlupdate"" property to objects that support that sort of thing currently. Users will have to opt-in and have fine-grained control of which properties to allow update. This support has been added to the scalebar object to serve as a pattern for review.

 objects to update: map, layer, class, style, label, legend, query map, reference map, scalebar and web.
 remove support for properties that support runtime substitutions. Those properties require a regex which can be tough to write for complex strings so using substitutions is much easier (and safer) for users.
 consider removing properties that can be set via other mechanisms (e.g. map size or map extent).
 remove DATAPATTERN and TEMPLATEPATTERN properties from the web object.

--Steve","The more time I spend with this topic the more I think we should consider a different path. For example, I don't think a new parameter hung off a bunch of objects with a cryptic syntax helps anyone. I mean, why go through all this just to change units on a freaking scalebar - just create a second mapfile if that's what is really needed and be done with it.
When @tbonfort added default value support for runtime substitutions I think it rendered the need for inline mapfile snippets largely mute. I think we'd be much better off simplifying things by removing this support completely and dealing with specific use cases in other ways moving forward. For example, for a couple of high-value parameters like image format or resolution could be added separately without all the overhead of the current approach and we could expand runsubs to a few other parameters such as layer masks. It would simplify mapfile processing, it would simplify the lexer and would improve security overall.
--Steve",True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6426,2021-10-21T14:12:59Z,2022-02-07T19:04:58Z,2022-03-22T00:30:13Z,CLOSED,False,1823,1781,5,https://github.com/sdlime,WIP: Require users to opt-in for URL-based update of select properties,26,[],https://github.com/mapserver/mapserver/pull/6426,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/6426#issuecomment-1011887452,"This limits URL-based update of select properties by adding a new ""urlupdate"" property to objects that support that sort of thing currently. Users will have to opt-in and have fine-grained control of which properties to allow update. This support has been added to the scalebar object to serve as a pattern for review.

 objects to update: map, layer, class, style, label, legend, query map, reference map, scalebar and web.
 remove support for properties that support runtime substitutions. Those properties require a regex which can be tough to write for complex strings so using substitutions is much easier (and safer) for users.
 consider removing properties that can be set via other mechanisms (e.g. map size or map extent).
 remove DATAPATTERN and TEMPLATEPATTERN properties from the web object.

--Steve","Dev mailing list discussion for reference: https://lists.osgeo.org/pipermail/mapserver-dev/2021-October/016647.html
@sdlime - so would the plan be to drop support for https://mapserver.org/cgi/controls.html#changing-map-file-parameters-via-a-form-or-a-url in the v8.0 release?
I think I've used this syntax once, and then decided it was easier to generate multiple mapfiles as you described. Might be worth a post to the user list to see if it is still widely used?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6426,2021-10-21T14:12:59Z,2022-02-07T19:04:58Z,2022-03-22T00:30:13Z,CLOSED,False,1823,1781,5,https://github.com/sdlime,WIP: Require users to opt-in for URL-based update of select properties,26,[],https://github.com/mapserver/mapserver/pull/6426,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/6426#issuecomment-1013276364,"This limits URL-based update of select properties by adding a new ""urlupdate"" property to objects that support that sort of thing currently. Users will have to opt-in and have fine-grained control of which properties to allow update. This support has been added to the scalebar object to serve as a pattern for review.

 objects to update: map, layer, class, style, label, legend, query map, reference map, scalebar and web.
 remove support for properties that support runtime substitutions. Those properties require a regex which can be tough to write for complex strings so using substitutions is much easier (and safer) for users.
 consider removing properties that can be set via other mechanisms (e.g. map size or map extent).
 remove DATAPATTERN and TEMPLATEPATTERN properties from the web object.

--Steve","@geographika, yes on completely dropping for 8.0 - kinda now or never IMHO. I can send a quick email to mapserver-users on the topic.
Update: as of 1/18, four replies and nobody making much/any use.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6426,2021-10-21T14:12:59Z,2022-02-07T19:04:58Z,2022-03-22T00:30:13Z,CLOSED,False,1823,1781,5,https://github.com/sdlime,WIP: Require users to opt-in for URL-based update of select properties,26,[],https://github.com/mapserver/mapserver/pull/6426,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/6426#issuecomment-1023328628,"This limits URL-based update of select properties by adding a new ""urlupdate"" property to objects that support that sort of thing currently. Users will have to opt-in and have fine-grained control of which properties to allow update. This support has been added to the scalebar object to serve as a pattern for review.

 objects to update: map, layer, class, style, label, legend, query map, reference map, scalebar and web.
 remove support for properties that support runtime substitutions. Those properties require a regex which can be tough to write for complex strings so using substitutions is much easier (and safer) for users.
 consider removing properties that can be set via other mechanisms (e.g. map size or map extent).
 remove DATAPATTERN and TEMPLATEPATTERN properties from the web object.

--Steve",I've add this (removing ability to change mapfile params through url) to the 8.0 release plan: https://github.com/MapServer/MapServer/wiki/MapServer-8.0-Release-Plan,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6426,2021-10-21T14:12:59Z,2022-02-07T19:04:58Z,2022-03-22T00:30:13Z,CLOSED,False,1823,1781,5,https://github.com/sdlime,WIP: Require users to opt-in for URL-based update of select properties,26,[],https://github.com/mapserver/mapserver/pull/6426,https://github.com/sdlime,6,https://github.com/MapServer/MapServer/pull/6426#issuecomment-1031814153,"This limits URL-based update of select properties by adding a new ""urlupdate"" property to objects that support that sort of thing currently. Users will have to opt-in and have fine-grained control of which properties to allow update. This support has been added to the scalebar object to serve as a pattern for review.

 objects to update: map, layer, class, style, label, legend, query map, reference map, scalebar and web.
 remove support for properties that support runtime substitutions. Those properties require a regex which can be tough to write for complex strings so using substitutions is much easier (and safer) for users.
 consider removing properties that can be set via other mechanisms (e.g. map size or map extent).
 remove DATAPATTERN and TEMPLATEPATTERN properties from the web object.

--Steve","Going a different direction, closing... --Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6428,2021-10-26T14:45:43Z,2021-10-26T16:49:14Z,2021-10-26T16:49:14Z,MERGED,True,33,3,1,https://github.com/sdlime,Update SECURITY.md,4,[],https://github.com/mapserver/mapserver/pull/6428,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/6428,"Added time limit constraint (three years) relative to the current release series (currently 7). Since 7 is six years-old that means it's the only supported series so I adjusted the supported version table accordingly. We might also want to add a description of version numbering meaning, so for x.y.z we'd have:
x
Major release series number. Major releases indicate substantial changes to the software and backwards compatibility is not guaranteed across series. Current release series is 7.
y
Minor release series number. Minor releases indicate smaller, functional additions or improvements to the software and should be generally backwards compatible within a major release series. Users should be able to confidently upgrade from one minor release to another within the same release series, so from 7.4.x to 7.6.x.
z
Point release series number. Point releases indicate maintenance releases - usually a combination of bug and security fixes and perhaps small feature additions. Backwards compatibility should be preserved and users should be able to confidently upgrade between point releases within the same release series, so from 7.6.4 to 7.6.5.
--Steve","Added time limit constraint (three years) relative to the current release series (currently 7). Since 7 is six years-old that means it's the only supported series so I adjusted the supported version table accordingly. We might also want to add a description of version numbering meaning, so for x.y.z we'd have:
x
Major release series number. Major releases indicate substantial changes to the software and backwards compatibility is not guaranteed across series. Current release series is 7.
y
Minor release series number. Minor releases indicate smaller, functional additions or improvements to the software and should be generally backwards compatible within a major release series. Users should be able to confidently upgrade from one minor release to another within the same release series, so from 7.4.x to 7.6.x.
z
Point release series number. Point releases indicate maintenance releases - usually a combination of bug and security fixes and perhaps small feature additions. Backwards compatibility should be preserved and users should be able to confidently upgrade between point releases within the same release series, so from 7.6.4 to 7.6.5.
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6429,2021-10-26T21:25:54Z,2021-10-28T13:26:49Z,2021-10-28T13:26:49Z,MERGED,True,87,45,4,https://github.com/rouault,Config file reports improvements,5,[],https://github.com/mapserver/mapserver/pull/6429,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6429,"map2img: initialize error file before msLoadConfig() so that -map_debug / -layer_debug warn about missing config file
map2img: add a -conf filename option to set configuration file
mapserv: add a -conf filename option to set configuration file
msLoadConfig(): display path to config file, as debug message, when it cannot be opened","map2img: initialize error file before msLoadConfig() so that -map_debug / -layer_debug warn about missing config file
map2img: add a -conf filename option to set configuration file
mapserv: add a -conf filename option to set configuration file
msLoadConfig(): display path to config file, as debug message, when it cannot be opened",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6429,2021-10-26T21:25:54Z,2021-10-28T13:26:49Z,2021-10-28T13:26:49Z,MERGED,True,87,45,4,https://github.com/rouault,Config file reports improvements,5,[],https://github.com/mapserver/mapserver/pull/6429,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6429#issuecomment-952349668,"map2img: initialize error file before msLoadConfig() so that -map_debug / -layer_debug warn about missing config file
map2img: add a -conf filename option to set configuration file
mapserv: add a -conf filename option to set configuration file
msLoadConfig(): display path to config file, as debug message, when it cannot be opened","Couple of comments...
Is the -conf argument for mapserv safe? I recall a ticket long ago citing security issues with CGI and command line arguments. I added PATH_INFO for ogcapi support since it was basically the same as QUERY_STRING and could be set remotely regardless. This comment is in mapserv.c in branch-7-6:
   / * Keep only ""-v"", ""-nh"" and ""QUERY_STRING=..."" enabled by default.
     * The others will require an explicit -DMS_ENABLE_CGI_CL_DEBUG_ARGS
     * at compile time. Do *NOT* enable them since they can cause security
     * problems : https://github.com/mapserver/mapserver/issues/3485
     */

I removed the comment and old debug args as part of the config file pull request since MS_ENABLE_CGI_CL_DEBUG_ARGS didn't seem to be relevant any more and not supported via cmake. Perhaps I should have left the comment in place. I don't recall details on the ticket, perhaps @dmorissette does.
I'm not sure about outputting the config filename in an error message. Granted that should only be an issue when someone is configuring a site but perhaps outputting using msDebug() would be safer.
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6429,2021-10-26T21:25:54Z,2021-10-28T13:26:49Z,2021-10-28T13:26:49Z,MERGED,True,87,45,4,https://github.com/rouault,Config file reports improvements,5,[],https://github.com/mapserver/mapserver/pull/6429,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/6429#issuecomment-952359688,"map2img: initialize error file before msLoadConfig() so that -map_debug / -layer_debug warn about missing config file
map2img: add a -conf filename option to set configuration file
mapserv: add a -conf filename option to set configuration file
msLoadConfig(): display path to config file, as debug message, when it cannot be opened","I'd be curious to know what the vulnerability is... That's where security by obfuscation sucks :-)
I found https://bugzilla.redhat.com/show_bug.cgi?id=818607 that dates back to 2012 about php-cgi  and command line arguments, but I'm not clear why that would apply to mapserv CGI...

but perhaps outputting using msDebug() would be safer.

I've updated the commit to do that",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6429,2021-10-26T21:25:54Z,2021-10-28T13:26:49Z,2021-10-28T13:26:49Z,MERGED,True,87,45,4,https://github.com/rouault,Config file reports improvements,5,[],https://github.com/mapserver/mapserver/pull/6429,https://github.com/dmorissette,4,https://github.com/MapServer/MapServer/pull/6429#issuecomment-952533589,"map2img: initialize error file before msLoadConfig() so that -map_debug / -layer_debug warn about missing config file
map2img: add a -conf filename option to set configuration file
mapserv: add a -conf filename option to set configuration file
msLoadConfig(): display path to config file, as debug message, when it cannot be opened","Hi Guys, I had obviously forgotten the reasons behind this fix but was able to find the details in my email archives from 2010 (I will forward you a copy of that email directly)... and since it the vulnerability was fixed in MapServer 5.6.4 over 10 years ago, it is probably safe to share the details here today...
My understanding is that in the CGI spec, if the QUERY_STRING part of the URL does not contain any ""name=value"" pairs (more specifically it checks for unencoded ""="" chars) then the QUERY_STRING is also passed as arguments on the command-line to the CGI binary. I have verified that this still works today with a recent Apache/CGI config: the URL http://hostname/cgi-bin/mapserv?-v results in a ""500 internal server error"", and if you look in the error.log file you see that the output of mapserv -v caused malformed header error, e.g.
[Wed Oct 27 00:31:02.648900 2021] [cgid:error] ... malformed header from script 'mapserv': Bad header: MapServer version 7.2.2 OUTPUT

A quick Google search pointed to this page that illustrates the command-line arg behaviour:
https://flylib.com/books/en/2.819.1.41/1/
and the CGI specs mentions it here:
https://datatracker.ietf.org/doc/html/rfc3875#section-4.4",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6429,2021-10-26T21:25:54Z,2021-10-28T13:26:49Z,2021-10-28T13:26:49Z,MERGED,True,87,45,4,https://github.com/rouault,Config file reports improvements,5,[],https://github.com/mapserver/mapserver/pull/6429,https://github.com/dmorissette,5,https://github.com/MapServer/MapServer/pull/6429#issuecomment-952537338,"map2img: initialize error file before msLoadConfig() so that -map_debug / -layer_debug warn about missing config file
map2img: add a -conf filename option to set configuration file
mapserv: add a -conf filename option to set configuration file
msLoadConfig(): display path to config file, as debug message, when it cannot be opened",I'd add that it would probably be a good idea to keep a comment in the CGI code warning future devs about the risk of command-line args in a CGI context.  This old comment reminded us of the risk today and perhaps prevented us from introducing a potential vulnerability with -conf or other/new command-line args... so the warning has served its purpose and deserves to stay in the code in one form or another.  :-),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6429,2021-10-26T21:25:54Z,2021-10-28T13:26:49Z,2021-10-28T13:26:49Z,MERGED,True,87,45,4,https://github.com/rouault,Config file reports improvements,5,[],https://github.com/mapserver/mapserver/pull/6429,https://github.com/rouault,6,https://github.com/MapServer/MapServer/pull/6429#issuecomment-952763278,"map2img: initialize error file before msLoadConfig() so that -map_debug / -layer_debug warn about missing config file
map2img: add a -conf filename option to set configuration file
mapserv: add a -conf filename option to set configuration file
msLoadConfig(): display path to config file, as debug message, when it cannot be opened","Thanks @dmorissette for the context! It seems to me that it is very easy to mitigate the security issue. As the vulnerability comes from the QUERY_STRING environment variable, it is sufficient to test its presence when parsing a ""-foo bar"" switch, and error out if QUERY_STRING is defined as environment variable.
Thus mapserv -conf myfile QUERY_STRING=""bla"" is safe, but ""QUERY_STRING=""-conf+bar"" mapserv -conf myfile`` is not. I've added checks in the regression test suite for that.
I've amended my commit to implement that, and add a warning note about the issue.
 curl http://127.0.0.1:80/cgi-bin/mapserv.cgi?-conf+bar
<HTML>
<HEAD><TITLE>MapServer Message</TITLE></HEAD>
<!-- MapServer version 7.7-dev OUTPUT=PNG OUTPUT=JPEG OUTPUT=KML SUPPORTS=PROJ SUPPORTS=AGG SUPPORTS=FREETYPE SUPPORTS=CAIRO SUPPORTS=SVG_SYMBOLS SUPPORTS=RSVG SUPPORTS=ICONV SUPPORTS=XMP SUPPORTS=FRIBIDI SUPPORTS=WMS_SERVER SUPPORTS=WMS_CLIENT SUPPORTS=WFS_SERVER SUPPORTS=WFS_CLIENT SUPPORTS=WCS_SERVER SUPPORTS=SOS_SERVER SUPPORTS=OGCAPI_SERVER SUPPORTS=FASTCGI SUPPORTS=THREADS SUPPORTS=GEOS SUPPORTS=PBF INPUT=JPEG INPUT=POSTGIS INPUT=ORACLESPATIAL INPUT=OGR INPUT=GDAL INPUT=SHAPEFILE -->
<BODY BGCOLOR=""#FFFFFF"">
main(): Query error. -conf switch cannot be used when QUERY_STRING environment variable is set. Use QUERY_STRING= as a command line argument.
</BODY></HTML>

vs
$ ./mapserv -conf ../msautotest/etc/mapserv.conf QUERY_STRING=foo
Content-Type: text/html

<HTML>
<HEAD><TITLE>MapServer Message</TITLE></HEAD>
<!-- MapServer version 7.7-dev OUTPUT=PNG OUTPUT=JPEG OUTPUT=KML SUPPORTS=PROJ SUPPORTS=AGG SUPPORTS=FREETYPE SUPPORTS=CAIRO SUPPORTS=SVG_SYMBOLS SUPPORTS=RSVG SUPPORTS=ICONV SUPPORTS=XMP SUPPORTS=FRIBIDI SUPPORTS=WMS_SERVER SUPPORTS=WMS_CLIENT SUPPORTS=WFS_SERVER SUPPORTS=WFS_CLIENT SUPPORTS=WCS_SERVER SUPPORTS=SOS_SERVER SUPPORTS=OGCAPI_SERVER SUPPORTS=FASTCGI SUPPORTS=THREADS SUPPORTS=GEOS SUPPORTS=PBF INPUT=JPEG INPUT=POSTGIS INPUT=ORACLESPATIAL INPUT=OGR INPUT=GDAL INPUT=SHAPEFILE -->
<BODY BGCOLOR=""#FFFFFF"">
msCGILoadMap(): Web application error. CGI variable &quot;map&quot; is not set.
</BODY></HTML>",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6429,2021-10-26T21:25:54Z,2021-10-28T13:26:49Z,2021-10-28T13:26:49Z,MERGED,True,87,45,4,https://github.com/rouault,Config file reports improvements,5,[],https://github.com/mapserver/mapserver/pull/6429,https://github.com/sdlime,7,https://github.com/MapServer/MapServer/pull/6429#issuecomment-952979551,"map2img: initialize error file before msLoadConfig() so that -map_debug / -layer_debug warn about missing config file
map2img: add a -conf filename option to set configuration file
mapserv: add a -conf filename option to set configuration file
msLoadConfig(): display path to config file, as debug message, when it cannot be opened",Same issue with PATH_INFO command line variable as well?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6429,2021-10-26T21:25:54Z,2021-10-28T13:26:49Z,2021-10-28T13:26:49Z,MERGED,True,87,45,4,https://github.com/rouault,Config file reports improvements,5,[],https://github.com/mapserver/mapserver/pull/6429,https://github.com/rouault,8,https://github.com/MapServer/MapServer/pull/6429#issuecomment-953027799,"map2img: initialize error file before msLoadConfig() so that -map_debug / -layer_debug warn about missing config file
map2img: add a -conf filename option to set configuration file
mapserv: add a -conf filename option to set configuration file
msLoadConfig(): display path to config file, as debug message, when it cannot be opened","Same issue with PATH_INFO command line variable as well?

What do you mean ? That someone could inject PATH_INFO through a query string ? I don't think so since that would involve an equal sign, and when there's one, then CGI doesn't generate command line arguments. And even if it did, what would be the exposure ? The user can already provide a random path through a normal request",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6429,2021-10-26T21:25:54Z,2021-10-28T13:26:49Z,2021-10-28T13:26:49Z,MERGED,True,87,45,4,https://github.com/rouault,Config file reports improvements,5,[],https://github.com/mapserver/mapserver/pull/6429,https://github.com/sdlime,9,https://github.com/MapServer/MapServer/pull/6429#issuecomment-953129838,"map2img: initialize error file before msLoadConfig() so that -map_debug / -layer_debug warn about missing config file
map2img: add a -conf filename option to set configuration file
mapserv: add a -conf filename option to set configuration file
msLoadConfig(): display path to config file, as debug message, when it cannot be opened","Same issue with PATH_INFO command line variable as well?

What do you mean ? That someone could inject PATH_INFO through a query string ? I don't think so since that would involve an equal sign, and when there's one, then CGI doesn't generate command line arguments. And even if it did, what would be the exposure ? The user can already provide a random path through a normal request

I was thinking more that you can call mapserv without a QUERY_STRING but with a PATH_INFO that causes MapServer to do things (e.g. /cgi-bin/mapserv/MAPFILE/ogcapi/collections) - so no equal sign.  Could you set the config file like that?
Basically should command line options also be disabled if PATH_INFO is set.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6429,2021-10-26T21:25:54Z,2021-10-28T13:26:49Z,2021-10-28T13:26:49Z,MERGED,True,87,45,4,https://github.com/rouault,Config file reports improvements,5,[],https://github.com/mapserver/mapserver/pull/6429,https://github.com/rouault,10,https://github.com/MapServer/MapServer/pull/6429#issuecomment-953167324,"map2img: initialize error file before msLoadConfig() so that -map_debug / -layer_debug warn about missing config file
map2img: add a -conf filename option to set configuration file
mapserv: add a -conf filename option to set configuration file
msLoadConfig(): display path to config file, as debug message, when it cannot be opened","Could you set the config file like that?

I can't imagine how...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6429,2021-10-26T21:25:54Z,2021-10-28T13:26:49Z,2021-10-28T13:26:49Z,MERGED,True,87,45,4,https://github.com/rouault,Config file reports improvements,5,[],https://github.com/mapserver/mapserver/pull/6429,https://github.com/sdlime,11,https://github.com/MapServer/MapServer/pull/6429#issuecomment-953245488,"map2img: initialize error file before msLoadConfig() so that -map_debug / -layer_debug warn about missing config file
map2img: add a -conf filename option to set configuration file
mapserv: add a -conf filename option to set configuration file
msLoadConfig(): display path to config file, as debug message, when it cannot be opened","Sorry, just trying to get my head around this. So -conf isn't allowed when the QUERY_STRING environment variable is set. So this assumes that QUERY_STRING is always set to something according to CGI specs - even if it's an empty string  - correct? Are we sure that's always the case? Is FCGI any different?
Could that check also be applied to -v and -nh so the benign, but ugly, issue Dan mentioned doesn't occur? Seems like the whole arg processing loop could be wrapped in a getenv(""QUERY_STRING"") != NULL check.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6429,2021-10-26T21:25:54Z,2021-10-28T13:26:49Z,2021-10-28T13:26:49Z,MERGED,True,87,45,4,https://github.com/rouault,Config file reports improvements,5,[],https://github.com/mapserver/mapserver/pull/6429,https://github.com/rouault,12,https://github.com/MapServer/MapServer/pull/6429#issuecomment-953260086,"map2img: initialize error file before msLoadConfig() so that -map_debug / -layer_debug warn about missing config file
map2img: add a -conf filename option to set configuration file
mapserv: add a -conf filename option to set configuration file
msLoadConfig(): display path to config file, as debug message, when it cannot be opened","So this assumes that QUERY_STRING is always set to something according to CGI specs - even if it's an empty string - correct?

Yes, it should be set in the CGI case according to https://datatracker.ietf.org/doc/html/rfc3875#section-4.1.7
And if it is not set, then there would be no harm, unless a odd server decides to craft command line options through other means...

Is FCGI any different?

Before the FCGI loop, I wouldn't expect QUERY_STRING to be set. Or that other means would add arbitrary command line options.

Seems like the whole arg processing loop could be wrapped in a getenv(""QUERY_STRING"") != NULL check.

I've just done that",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6429,2021-10-26T21:25:54Z,2021-10-28T13:26:49Z,2021-10-28T13:26:49Z,MERGED,True,87,45,4,https://github.com/rouault,Config file reports improvements,5,[],https://github.com/mapserver/mapserver/pull/6429,https://github.com/sdlime,13,https://github.com/MapServer/MapServer/pull/6429#issuecomment-953823988,"map2img: initialize error file before msLoadConfig() so that -map_debug / -layer_debug warn about missing config file
map2img: add a -conf filename option to set configuration file
mapserv: add a -conf filename option to set configuration file
msLoadConfig(): display path to config file, as debug message, when it cannot be opened",+1 from me then...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6430,2021-10-28T12:34:57Z,,2022-06-02T15:42:59Z,OPEN,False,747,25323,205,https://github.com/jmckenna,WIP: remove PHP-native MapScript code for 8.0 release,94,['Work in progress'],https://github.com/mapserver/mapserver/pull/6430,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6430,"part of the MapServer 8.0 release plan (https://github.com/MapServer/MapServer/wiki/MapServer-8.0-Release-Plan)
as PHP-native MapScript is unmaintained and now causing constant security concerns & efforts
as PHP 7 & 8 are now well supported by SWIG

see issue #6201 for PHP 8.0 progress with SWIG MapScript


this pull request:

removes old native PHP MapScript
updates TravisCI and GitHub build action to use Ubuntu Focal
builds PHPNG MapScript for PHP 7.4.6, 8.0.19, 8.1.6
builds Python MapScript for Python 3.7.7, 3.8.3, 3.9.0
updates many msautotest tests","part of the MapServer 8.0 release plan (https://github.com/MapServer/MapServer/wiki/MapServer-8.0-Release-Plan)
as PHP-native MapScript is unmaintained and now causing constant security concerns & efforts
as PHP 7 & 8 are now well supported by SWIG

see issue #6201 for PHP 8.0 progress with SWIG MapScript


this pull request:

removes old native PHP MapScript
updates TravisCI and GitHub build action to use Ubuntu Focal
builds PHPNG MapScript for PHP 7.4.6, 8.0.19, 8.1.6
builds Python MapScript for Python 3.7.7, 3.8.3, 3.9.0
updates many msautotest tests",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6430,2021-10-28T12:34:57Z,,2022-06-02T15:42:59Z,OPEN,False,747,25323,205,https://github.com/jmckenna,WIP: remove PHP-native MapScript code for 8.0 release,94,['Work in progress'],https://github.com/mapserver/mapserver/pull/6430,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6430#issuecomment-953843679,"part of the MapServer 8.0 release plan (https://github.com/MapServer/MapServer/wiki/MapServer-8.0-Release-Plan)
as PHP-native MapScript is unmaintained and now causing constant security concerns & efforts
as PHP 7 & 8 are now well supported by SWIG

see issue #6201 for PHP 8.0 progress with SWIG MapScript


this pull request:

removes old native PHP MapScript
updates TravisCI and GitHub build action to use Ubuntu Focal
builds PHPNG MapScript for PHP 7.4.6, 8.0.19, 8.1.6
builds Python MapScript for Python 3.7.7, 3.8.3, 3.9.0
updates many msautotest tests",the test failures are due to php references in top Makefile,True,{'THUMBS_UP': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6430,2021-10-28T12:34:57Z,,2022-06-02T15:42:59Z,OPEN,False,747,25323,205,https://github.com/jmckenna,WIP: remove PHP-native MapScript code for 8.0 release,94,['Work in progress'],https://github.com/mapserver/mapserver/pull/6430,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/6430#issuecomment-1145009459,"part of the MapServer 8.0 release plan (https://github.com/MapServer/MapServer/wiki/MapServer-8.0-Release-Plan)
as PHP-native MapScript is unmaintained and now causing constant security concerns & efforts
as PHP 7 & 8 are now well supported by SWIG

see issue #6201 for PHP 8.0 progress with SWIG MapScript


this pull request:

removes old native PHP MapScript
updates TravisCI and GitHub build action to use Ubuntu Focal
builds PHPNG MapScript for PHP 7.4.6, 8.0.19, 8.1.6
builds Python MapScript for Python 3.7.7, 3.8.3, 3.9.0
updates many msautotest tests","Just letting a note that I was considering updating the Vagrant scripts to be consistent with the new ubuntu:20.04 baseline which should help updating the latest expected results, in case someone had already started looking at that",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6430,2021-10-28T12:34:57Z,,2022-06-02T15:42:59Z,OPEN,False,747,25323,205,https://github.com/jmckenna,WIP: remove PHP-native MapScript code for 8.0 release,94,['Work in progress'],https://github.com/mapserver/mapserver/pull/6430,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/6430#issuecomment-1145012912,"part of the MapServer 8.0 release plan (https://github.com/MapServer/MapServer/wiki/MapServer-8.0-Release-Plan)
as PHP-native MapScript is unmaintained and now causing constant security concerns & efforts
as PHP 7 & 8 are now well supported by SWIG

see issue #6201 for PHP 8.0 progress with SWIG MapScript


this pull request:

removes old native PHP MapScript
updates TravisCI and GitHub build action to use Ubuntu Focal
builds PHPNG MapScript for PHP 7.4.6, 8.0.19, 8.1.6
builds Python MapScript for Python 3.7.7, 3.8.3, 3.9.0
updates many msautotest tests",thanks @rouault I have not looked at the vagrant scripts.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6431,2021-11-07T22:28:58Z,2021-11-09T15:59:55Z,2021-11-09T22:07:47Z,MERGED,True,3,1,1,https://github.com/richie21,msBuildWFSLayerGetURL: added WFS 1.1.0 in error message,1,[],https://github.com/mapserver/mapserver/pull/6431,https://github.com/richie21,1,https://github.com/MapServer/MapServer/pull/6431,Added version WFS 1.1.0 supported by MapServer as a client (in the error message).,Added version WFS 1.1.0 supported by MapServer as a client (in the error message).,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6431,2021-11-07T22:28:58Z,2021-11-09T15:59:55Z,2021-11-09T22:07:47Z,MERGED,True,3,1,1,https://github.com/richie21,msBuildWFSLayerGetURL: added WFS 1.1.0 in error message,1,[],https://github.com/mapserver/mapserver/pull/6431,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6431#issuecomment-964289017,Added version WFS 1.1.0 supported by MapServer as a client (in the error message).,unrelated test failures,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6431,2021-11-07T22:28:58Z,2021-11-09T15:59:55Z,2021-11-09T22:07:47Z,MERGED,True,3,1,1,https://github.com/richie21,msBuildWFSLayerGetURL: added WFS 1.1.0 in error message,1,[],https://github.com/mapserver/mapserver/pull/6431,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6431#issuecomment-964340162,Added version WFS 1.1.0 supported by MapServer as a client (in the error message).,thanks @richie21 great catch.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6431,2021-11-07T22:28:58Z,2021-11-09T15:59:55Z,2021-11-09T22:07:47Z,MERGED,True,3,1,1,https://github.com/richie21,msBuildWFSLayerGetURL: added WFS 1.1.0 in error message,1,[],https://github.com/mapserver/mapserver/pull/6431,https://github.com/geographika,4,https://github.com/MapServer/MapServer/pull/6431#issuecomment-964588039,Added version WFS 1.1.0 supported by MapServer as a client (in the error message).,"Doesn't strncmp(pszVersion, ""1.1"", 3) != 0) mean 1.1.X would work as well as 1.1.0. Were there other versions of WFS 1.1?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6431,2021-11-07T22:28:58Z,2021-11-09T15:59:55Z,2021-11-09T22:07:47Z,MERGED,True,3,1,1,https://github.com/richie21,msBuildWFSLayerGetURL: added WFS 1.1.0 in error message,1,[],https://github.com/mapserver/mapserver/pull/6431,https://github.com/rouault,5,https://github.com/MapServer/MapServer/pull/6431#issuecomment-964590185,Added version WFS 1.1.0 supported by MapServer as a client (in the error message).,"Were there other versions of WFS 1.1?

the corrigendum http://docs.opengeospatial.org/is/04-094r1/04-094r1.html is advertized as 1.1.3, and this can be used in requests",True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6432,2021-11-07T22:51:30Z,2021-11-09T15:58:31Z,2021-11-09T16:52:07Z,MERGED,True,1,1,1,https://github.com/richie21,FindOracle.cmake: add support for OCI 21,1,[],https://github.com/mapserver/mapserver/pull/6432,https://github.com/richie21,1,https://github.com/MapServer/MapServer/pull/6432,Added nnz21 libnnz21 to the ORACLE_NNZ_NAMES list.,Added nnz21 libnnz21 to the ORACLE_NNZ_NAMES list.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6432,2021-11-07T22:51:30Z,2021-11-09T15:58:31Z,2021-11-09T16:52:07Z,MERGED,True,1,1,1,https://github.com/richie21,FindOracle.cmake: add support for OCI 21,1,[],https://github.com/mapserver/mapserver/pull/6432,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6432#issuecomment-964287732,Added nnz21 libnnz21 to the ORACLE_NNZ_NAMES list.,unrelated test failures,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6432,2021-11-07T22:51:30Z,2021-11-09T15:58:31Z,2021-11-09T16:52:07Z,MERGED,True,1,1,1,https://github.com/richie21,FindOracle.cmake: add support for OCI 21,1,[],https://github.com/mapserver/mapserver/pull/6432,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6432#issuecomment-964339593,Added nnz21 libnnz21 to the ORACLE_NNZ_NAMES list.,thanks @richie21 !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6434,2021-11-12T13:49:07Z,2021-12-16T16:22:14Z,2021-12-16T20:53:23Z,MERGED,True,154,17,8,https://github.com/copierrj,Properly handle datetime fields,4,[],https://github.com/mapserver/mapserver/pull/6434,https://github.com/copierrj,1,https://github.com/MapServer/MapServer/pull/6434,"We encountered incorrect date/time values in WFS GetFeature responses of our (GeoPackage backed) MapServer instances. Only the year was rendered correctly. All other parts where zeroed out.
While investigating the issue it was discovered that the code that handles date/time values (msParseTime in maptime.c, called by msGMLWriteItem in mapgml.c) expects the provided date/time strings to be formatted in ISO 8601. Unfortunately the OGR backend (mapogr.cpp) provides date/time strings in a different format (yyyy/mm/dd hh:mm:ss) and msParseTime only succeeds in parsing the year part of the date/time string and silently ignores the rest. Resulting in malformed GML output.
It was discovered that the msOGRGetValues function treats every field as a string field, leaving it up to OGR how to convert any non-string field into a string. After changing the code to use OGR_F_GetFieldAsDateTime for date/time fields and properly format it as an ISO date/time string the problem was resolved.
I don't know if this is actually the right approach to fix this issue. But if I understand the OGR API documentation correctly, OGR_F_GetFieldAsString is only supposed to be called for real, integer and string fields.","We encountered incorrect date/time values in WFS GetFeature responses of our (GeoPackage backed) MapServer instances. Only the year was rendered correctly. All other parts where zeroed out.
While investigating the issue it was discovered that the code that handles date/time values (msParseTime in maptime.c, called by msGMLWriteItem in mapgml.c) expects the provided date/time strings to be formatted in ISO 8601. Unfortunately the OGR backend (mapogr.cpp) provides date/time strings in a different format (yyyy/mm/dd hh:mm:ss) and msParseTime only succeeds in parsing the year part of the date/time string and silently ignores the rest. Resulting in malformed GML output.
It was discovered that the msOGRGetValues function treats every field as a string field, leaving it up to OGR how to convert any non-string field into a string. After changing the code to use OGR_F_GetFieldAsDateTime for date/time fields and properly format it as an ISO date/time string the problem was resolved.
I don't know if this is actually the right approach to fix this issue. But if I understand the OGR API documentation correctly, OGR_F_GetFieldAsString is only supposed to be called for real, integer and string fields.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6434,2021-11-12T13:49:07Z,2021-12-16T16:22:14Z,2021-12-16T20:53:23Z,MERGED,True,154,17,8,https://github.com/copierrj,Properly handle datetime fields,4,[],https://github.com/mapserver/mapserver/pull/6434,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6434#issuecomment-974113103,"We encountered incorrect date/time values in WFS GetFeature responses of our (GeoPackage backed) MapServer instances. Only the year was rendered correctly. All other parts where zeroed out.
While investigating the issue it was discovered that the code that handles date/time values (msParseTime in maptime.c, called by msGMLWriteItem in mapgml.c) expects the provided date/time strings to be formatted in ISO 8601. Unfortunately the OGR backend (mapogr.cpp) provides date/time strings in a different format (yyyy/mm/dd hh:mm:ss) and msParseTime only succeeds in parsing the year part of the date/time string and silently ignores the rest. Resulting in malformed GML output.
It was discovered that the msOGRGetValues function treats every field as a string field, leaving it up to OGR how to convert any non-string field into a string. After changing the code to use OGR_F_GetFieldAsDateTime for date/time fields and properly format it as an ISO date/time string the problem was resolved.
I don't know if this is actually the right approach to fix this issue. But if I understand the OGR API documentation correctly, OGR_F_GetFieldAsString is only supposed to be called for real, integer and string fields.","@copierrj can you also:

update this pull request to latest main
add a test for your case, into msautotest (see https://mapserver.org/development/tests/autotest.html)

there is an OGR-GPKG-GetFeature test in /msautotest/wxs/wfs_ogr_gpkg.map that might be useful",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6434,2021-11-12T13:49:07Z,2021-12-16T16:22:14Z,2021-12-16T20:53:23Z,MERGED,True,154,17,8,https://github.com/copierrj,Properly handle datetime fields,4,[],https://github.com/mapserver/mapserver/pull/6434,https://github.com/copierrj,3,https://github.com/MapServer/MapServer/pull/6434#issuecomment-979221479,"We encountered incorrect date/time values in WFS GetFeature responses of our (GeoPackage backed) MapServer instances. Only the year was rendered correctly. All other parts where zeroed out.
While investigating the issue it was discovered that the code that handles date/time values (msParseTime in maptime.c, called by msGMLWriteItem in mapgml.c) expects the provided date/time strings to be formatted in ISO 8601. Unfortunately the OGR backend (mapogr.cpp) provides date/time strings in a different format (yyyy/mm/dd hh:mm:ss) and msParseTime only succeeds in parsing the year part of the date/time string and silently ignores the rest. Resulting in malformed GML output.
It was discovered that the msOGRGetValues function treats every field as a string field, leaving it up to OGR how to convert any non-string field into a string. After changing the code to use OGR_F_GetFieldAsDateTime for date/time fields and properly format it as an ISO date/time string the problem was resolved.
I don't know if this is actually the right approach to fix this issue. But if I understand the OGR API documentation correctly, OGR_F_GetFieldAsString is only supposed to be called for real, integer and string fields.",@jmckenna I'll put it on my TODO list,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6434,2021-11-12T13:49:07Z,2021-12-16T16:22:14Z,2021-12-16T20:53:23Z,MERGED,True,154,17,8,https://github.com/copierrj,Properly handle datetime fields,4,[],https://github.com/mapserver/mapserver/pull/6434,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/6434#issuecomment-979222642,"We encountered incorrect date/time values in WFS GetFeature responses of our (GeoPackage backed) MapServer instances. Only the year was rendered correctly. All other parts where zeroed out.
While investigating the issue it was discovered that the code that handles date/time values (msParseTime in maptime.c, called by msGMLWriteItem in mapgml.c) expects the provided date/time strings to be formatted in ISO 8601. Unfortunately the OGR backend (mapogr.cpp) provides date/time strings in a different format (yyyy/mm/dd hh:mm:ss) and msParseTime only succeeds in parsing the year part of the date/time string and silently ignores the rest. Resulting in malformed GML output.
It was discovered that the msOGRGetValues function treats every field as a string field, leaving it up to OGR how to convert any non-string field into a string. After changing the code to use OGR_F_GetFieldAsDateTime for date/time fields and properly format it as an ISO date/time string the problem was resolved.
I don't know if this is actually the right approach to fix this issue. But if I understand the OGR API documentation correctly, OGR_F_GetFieldAsString is only supposed to be called for real, integer and string fields.",@copierrj thanks,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6434,2021-11-12T13:49:07Z,2021-12-16T16:22:14Z,2021-12-16T20:53:23Z,MERGED,True,154,17,8,https://github.com/copierrj,Properly handle datetime fields,4,[],https://github.com/mapserver/mapserver/pull/6434,https://github.com/rouault,5,https://github.com/MapServer/MapServer/pull/6434#issuecomment-994783510,"We encountered incorrect date/time values in WFS GetFeature responses of our (GeoPackage backed) MapServer instances. Only the year was rendered correctly. All other parts where zeroed out.
While investigating the issue it was discovered that the code that handles date/time values (msParseTime in maptime.c, called by msGMLWriteItem in mapgml.c) expects the provided date/time strings to be formatted in ISO 8601. Unfortunately the OGR backend (mapogr.cpp) provides date/time strings in a different format (yyyy/mm/dd hh:mm:ss) and msParseTime only succeeds in parsing the year part of the date/time string and silently ignores the rest. Resulting in malformed GML output.
It was discovered that the msOGRGetValues function treats every field as a string field, leaving it up to OGR how to convert any non-string field into a string. After changing the code to use OGR_F_GetFieldAsDateTime for date/time fields and properly format it as an ISO date/time string the problem was resolved.
I don't know if this is actually the right approach to fix this issue. But if I understand the OGR API documentation correctly, OGR_F_GetFieldAsString is only supposed to be called for real, integer and string fields.",@copierrj I've a followup commit that you should merge from PDOK#7,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6434,2021-11-12T13:49:07Z,2021-12-16T16:22:14Z,2021-12-16T20:53:23Z,MERGED,True,154,17,8,https://github.com/copierrj,Properly handle datetime fields,4,[],https://github.com/mapserver/mapserver/pull/6434,https://github.com/copierrj,6,https://github.com/MapServer/MapServer/pull/6434#issuecomment-995533892,"We encountered incorrect date/time values in WFS GetFeature responses of our (GeoPackage backed) MapServer instances. Only the year was rendered correctly. All other parts where zeroed out.
While investigating the issue it was discovered that the code that handles date/time values (msParseTime in maptime.c, called by msGMLWriteItem in mapgml.c) expects the provided date/time strings to be formatted in ISO 8601. Unfortunately the OGR backend (mapogr.cpp) provides date/time strings in a different format (yyyy/mm/dd hh:mm:ss) and msParseTime only succeeds in parsing the year part of the date/time string and silently ignores the rest. Resulting in malformed GML output.
It was discovered that the msOGRGetValues function treats every field as a string field, leaving it up to OGR how to convert any non-string field into a string. After changing the code to use OGR_F_GetFieldAsDateTime for date/time fields and properly format it as an ISO date/time string the problem was resolved.
I don't know if this is actually the right approach to fix this issue. But if I understand the OGR API documentation correctly, OGR_F_GetFieldAsString is only supposed to be called for real, integer and string fields.",@rouault thanks!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6434,2021-11-12T13:49:07Z,2021-12-16T16:22:14Z,2021-12-16T20:53:23Z,MERGED,True,154,17,8,https://github.com/copierrj,Properly handle datetime fields,4,[],https://github.com/mapserver/mapserver/pull/6434,https://github.com/copierrj,7,https://github.com/MapServer/MapServer/pull/6434#issuecomment-995648608,"We encountered incorrect date/time values in WFS GetFeature responses of our (GeoPackage backed) MapServer instances. Only the year was rendered correctly. All other parts where zeroed out.
While investigating the issue it was discovered that the code that handles date/time values (msParseTime in maptime.c, called by msGMLWriteItem in mapgml.c) expects the provided date/time strings to be formatted in ISO 8601. Unfortunately the OGR backend (mapogr.cpp) provides date/time strings in a different format (yyyy/mm/dd hh:mm:ss) and msParseTime only succeeds in parsing the year part of the date/time string and silently ignores the rest. Resulting in malformed GML output.
It was discovered that the msOGRGetValues function treats every field as a string field, leaving it up to OGR how to convert any non-string field into a string. After changing the code to use OGR_F_GetFieldAsDateTime for date/time fields and properly format it as an ISO date/time string the problem was resolved.
I don't know if this is actually the right approach to fix this issue. But if I understand the OGR API documentation correctly, OGR_F_GetFieldAsString is only supposed to be called for real, integer and string fields.","I've retested the changes for our particular use case and everything seems to work just fine. Too bad I overlooked the incorrect null handling first time around.
@jmckenna are these changes to the PR sufficient?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6436,2021-11-18T19:40:35Z,2021-11-18T20:53:50Z,2021-11-18T20:59:57Z,MERGED,True,3,3,8,https://github.com/jmckenna,update msautotest for new demo server,3,[],https://github.com/mapserver/mapserver/pull/6436,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6436,"WMS endpoint path on new demo server is now /mapserver/apps/ which was already configured for MS_MAP_PATTERN
related to #6435","WMS endpoint path on new demo server is now /mapserver/apps/ which was already configured for MS_MAP_PATTERN
related to #6435",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6436,2021-11-18T19:40:35Z,2021-11-18T20:53:50Z,2021-11-18T20:59:57Z,MERGED,True,3,3,8,https://github.com/jmckenna,update msautotest for new demo server,3,[],https://github.com/mapserver/mapserver/pull/6436,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6436#issuecomment-973254540,"WMS endpoint path on new demo server is now /mapserver/apps/ which was already configured for MS_MAP_PATTERN
related to #6435","@rouault my commits just clashed here, i generated the missing files",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6436,2021-11-18T19:40:35Z,2021-11-18T20:53:50Z,2021-11-18T20:59:57Z,MERGED,True,3,3,8,https://github.com/jmckenna,update msautotest for new demo server,3,[],https://github.com/mapserver/mapserver/pull/6436,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6436#issuecomment-973255982,"WMS endpoint path on new demo server is now /mapserver/apps/ which was already configured for MS_MAP_PATTERN
related to #6435","I was working on the server, to generate the 2 missing files.  Could you have waited 1 minute kindly?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6436,2021-11-18T19:40:35Z,2021-11-18T20:53:50Z,2021-11-18T20:59:57Z,MERGED,True,3,3,8,https://github.com/jmckenna,update msautotest for new demo server,3,[],https://github.com/mapserver/mapserver/pull/6436,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/6436#issuecomment-973256660,"WMS endpoint path on new demo server is now /mapserver/apps/ which was already configured for MS_MAP_PATTERN
related to #6435",Apparently not,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6436,2021-11-18T19:40:35Z,2021-11-18T20:53:50Z,2021-11-18T20:59:57Z,MERGED,True,3,3,8,https://github.com/jmckenna,update msautotest for new demo server,3,[],https://github.com/mapserver/mapserver/pull/6436,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/6436#issuecomment-973257720,"WMS endpoint path on new demo server is now /mapserver/apps/ which was already configured for MS_MAP_PATTERN
related to #6435","Anyway, I think we should not step on toes...this is even my own pull request.  it seems a waste of (unpaid) time",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6436,2021-11-18T19:40:35Z,2021-11-18T20:53:50Z,2021-11-18T20:59:57Z,MERGED,True,3,3,8,https://github.com/jmckenna,update msautotest for new demo server,3,[],https://github.com/mapserver/mapserver/pull/6436,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/6436#issuecomment-973258609,"WMS endpoint path on new demo server is now /mapserver/apps/ which was already configured for MS_MAP_PATTERN
related to #6435",And i wanted the satisfaction to solve the 'expected' image issues.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6436,2021-11-18T19:40:35Z,2021-11-18T20:53:50Z,2021-11-18T20:59:57Z,MERGED,True,3,3,8,https://github.com/jmckenna,update msautotest for new demo server,3,[],https://github.com/mapserver/mapserver/pull/6436,https://github.com/jmckenna,7,https://github.com/MapServer/MapServer/pull/6436#issuecomment-973258922,"WMS endpoint path on new demo server is now /mapserver/apps/ which was already configured for MS_MAP_PATTERN
related to #6435","Anyway, thanks for this work @rouault !!!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6436,2021-11-18T19:40:35Z,2021-11-18T20:53:50Z,2021-11-18T20:59:57Z,MERGED,True,3,3,8,https://github.com/jmckenna,update msautotest for new demo server,3,[],https://github.com/mapserver/mapserver/pull/6436,https://github.com/rouault,8,https://github.com/MapServer/MapServer/pull/6436#issuecomment-973259972,"WMS endpoint path on new demo server is now /mapserver/apps/ which was already configured for MS_MAP_PATTERN
related to #6435","Could you have waiting 1 minute kindly?

sorry, didn't know you were still working on it. Feel free to revert my modified images if you modified things on the server that affect the expected result.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6436,2021-11-18T19:40:35Z,2021-11-18T20:53:50Z,2021-11-18T20:59:57Z,MERGED,True,3,3,8,https://github.com/jmckenna,update msautotest for new demo server,3,[],https://github.com/mapserver/mapserver/pull/6436,https://github.com/jmckenna,9,https://github.com/MapServer/MapServer/pull/6436#issuecomment-973260553,"WMS endpoint path on new demo server is now /mapserver/apps/ which was already configured for MS_MAP_PATTERN
related to #6435","Is there an immediate need for this, that you couldn't wait for me to fix my pull request?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6436,2021-11-18T19:40:35Z,2021-11-18T20:53:50Z,2021-11-18T20:59:57Z,MERGED,True,3,3,8,https://github.com/jmckenna,update msautotest for new demo server,3,[],https://github.com/mapserver/mapserver/pull/6436,https://github.com/jmckenna,10,https://github.com/MapServer/MapServer/pull/6436#issuecomment-973261147,"WMS endpoint path on new demo server is now /mapserver/apps/ which was already configured for MS_MAP_PATTERN
related to #6435",wow,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6436,2021-11-18T19:40:35Z,2021-11-18T20:53:50Z,2021-11-18T20:59:57Z,MERGED,True,3,3,8,https://github.com/jmckenna,update msautotest for new demo server,3,[],https://github.com/mapserver/mapserver/pull/6436,https://github.com/jmckenna,11,https://github.com/MapServer/MapServer/pull/6436#issuecomment-973261737,"WMS endpoint path on new demo server is now /mapserver/apps/ which was already configured for MS_MAP_PATTERN
related to #6435",You must be in a rush.  No worries!  you get the glory.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6436,2021-11-18T19:40:35Z,2021-11-18T20:53:50Z,2021-11-18T20:59:57Z,MERGED,True,3,3,8,https://github.com/jmckenna,update msautotest for new demo server,3,[],https://github.com/mapserver/mapserver/pull/6436,https://github.com/jmckenna,12,https://github.com/MapServer/MapServer/pull/6436#issuecomment-973263471,"WMS endpoint path on new demo server is now /mapserver/apps/ which was already configured for MS_MAP_PATTERN
related to #6435",thanks again @rouault,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6436,2021-11-18T19:40:35Z,2021-11-18T20:53:50Z,2021-11-18T20:59:57Z,MERGED,True,3,3,8,https://github.com/jmckenna,update msautotest for new demo server,3,[],https://github.com/mapserver/mapserver/pull/6436,https://github.com/rouault,13,https://github.com/MapServer/MapServer/pull/6436#issuecomment-973266390,"WMS endpoint path on new demo server is now /mapserver/apps/ which was already configured for MS_MAP_PATTERN
related to #6435",sorry for the lack of coordination from my part with you.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6437,2021-11-19T13:08:43Z,2021-11-19T13:40:43Z,2021-11-19T13:41:05Z,MERGED,True,72,33,9,https://github.com/rouault,Bilinear resampling: fix bound checks to avoid extending source raster by 0.5 target pixel,1,[],https://github.com/mapserver/mapserver/pull/6437,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6437,Fixes https://github.com/youngpm/alphabug,Fixes https://github.com/youngpm/alphabug,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6437,2021-11-19T13:08:43Z,2021-11-19T13:40:43Z,2021-11-19T13:41:05Z,MERGED,True,72,33,9,https://github.com/rouault,Bilinear resampling: fix bound checks to avoid extending source raster by 0.5 target pixel,1,[],https://github.com/mapserver/mapserver/pull/6437,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6437#issuecomment-974063849,Fixes https://github.com/youngpm/alphabug,"(unrelated failure on AppVeyor 'Environment: platform=x64, Python_ROOT_DIR=c:/python37-x64' due to a corrupted GISInternal SDK .zip (reported to Tamas))",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6437,2021-11-19T13:08:43Z,2021-11-19T13:40:43Z,2021-11-19T13:41:05Z,MERGED,True,72,33,9,https://github.com/rouault,Bilinear resampling: fix bound checks to avoid extending source raster by 0.5 target pixel,1,[],https://github.com/mapserver/mapserver/pull/6437,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6437#issuecomment-974067218,Fixes https://github.com/youngpm/alphabug,Great catch by @youngpm and fix by @rouault !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6437,2021-11-19T13:08:43Z,2021-11-19T13:40:43Z,2021-11-19T13:41:05Z,MERGED,True,72,33,9,https://github.com/rouault,Bilinear resampling: fix bound checks to avoid extending source raster by 0.5 target pixel,1,[],https://github.com/mapserver/mapserver/pull/6437,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/6437#issuecomment-974082560,Fixes https://github.com/youngpm/alphabug,thanks @rouault and @youngpm for an important fix!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6438,2021-11-19T13:11:36Z,2021-11-19T13:14:18Z,2021-11-19T13:14:18Z,MERGED,True,0,1,1,https://github.com/jmckenna,fix IRC action,1,[],https://github.com/mapserver/mapserver/pull/6438,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6438,fix IRC notify action,fix IRC notify action,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6439,2021-11-20T14:39:32Z,2021-11-20T15:05:07Z,2021-11-20T15:05:07Z,MERGED,True,3,3,3,https://github.com/jmckenna,[msautotest] correct WMS endpoint,1,[],https://github.com/mapserver/mapserver/pull/6439,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6439,"cleaner url, and this endpoint is the one that is constantly monitored for uptime","cleaner url, and this endpoint is the one that is constantly monitored for uptime",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6440,2021-11-21T12:11:04Z,2021-11-28T15:06:16Z,2021-11-28T15:06:16Z,MERGED,True,2,2,2,https://github.com/rouault,msautotest: rename test file to wfsogr10_shapezip.zip.with_headers,1,[],https://github.com/mapserver/mapserver/pull/6440,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6440,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6440,2021-11-21T12:11:04Z,2021-11-28T15:06:16Z,2021-11-28T15:06:16Z,MERGED,True,2,2,2,https://github.com/rouault,msautotest: rename test file to wfsogr10_shapezip.zip.with_headers,1,[],https://github.com/mapserver/mapserver/pull/6440,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6440#issuecomment-981101009,,Travis ASAN job failure unrelated and addressed per #6442,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6442,2021-11-28T15:05:36Z,2021-11-28T15:49:51Z,2021-11-28T15:49:51Z,MERGED,True,3,1,1,https://github.com/rouault,OGR layers: fix memory leak with DWithin filter,1,[],https://github.com/mapserver/mapserver/pull/6442,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6442,"Fixes leak introduced recently in master per 736baa6
Fixes following failures with the Travis ASAN job:
FAILED run_test.py::test[wfs_filter_ogr_wfs_filter_dwithin_xml] - AssertionEr...
FAILED run_test.py::test[wfs_filter_ogr_wfs_filter_dwithin_units_xml] - Asser...
FAILED run_test.py::test[wfs_ogr_native_sql_wfs_ogr_native_sql_32_xml] - Asse...","Fixes leak introduced recently in master per 736baa6
Fixes following failures with the Travis ASAN job:
FAILED run_test.py::test[wfs_filter_ogr_wfs_filter_dwithin_xml] - AssertionEr...
FAILED run_test.py::test[wfs_filter_ogr_wfs_filter_dwithin_units_xml] - Asser...
FAILED run_test.py::test[wfs_ogr_native_sql_wfs_ogr_native_sql_32_xml] - Asse...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6442,2021-11-28T15:05:36Z,2021-11-28T15:49:51Z,2021-11-28T15:49:51Z,MERGED,True,3,1,1,https://github.com/rouault,OGR layers: fix memory leak with DWithin filter,1,[],https://github.com/mapserver/mapserver/pull/6442,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6442#issuecomment-981107490,"Fixes leak introduced recently in master per 736baa6
Fixes following failures with the Travis ASAN job:
FAILED run_test.py::test[wfs_filter_ogr_wfs_filter_dwithin_xml] - AssertionEr...
FAILED run_test.py::test[wfs_filter_ogr_wfs_filter_dwithin_units_xml] - Asser...
FAILED run_test.py::test[wfs_ogr_native_sql_wfs_ogr_native_sql_32_xml] - Asse...",thanks for solving that @rouault,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6443,2021-11-28T16:51:55Z,2021-11-29T12:11:09Z,2021-11-29T12:11:09Z,MERGED,True,3,1,2,https://github.com/rouault,msLoadMapContext(): fix crash when BoundingBox.SRS is invalid (fixes #6441),1,[],https://github.com/mapserver/mapserver/pull/6443,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6443,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6443,2021-11-28T16:51:55Z,2021-11-29T12:11:09Z,2021-11-29T12:11:09Z,MERGED,True,3,1,2,https://github.com/rouault,msLoadMapContext(): fix crash when BoundingBox.SRS is invalid (fixes #6441),1,[],https://github.com/mapserver/mapserver/pull/6443,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6443#issuecomment-981576374,,"thanks @rouault
Side note: great to hear that MapContext is still being used in MapServer, man I feel old sometimes ha, yikes, 2002.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6444,2021-12-01T11:46:56Z,2021-12-01T13:41:11Z,2021-12-01T13:41:12Z,MERGED,True,61,20,7,https://github.com/rouault,mode=tile: add a tilesize=width+height query parameter to select another tile size than 256,1,[],https://github.com/mapserver/mapserver/pull/6444,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6444,this will be typically tilesize=512+512 for high DPI tiles.,this will be typically tilesize=512+512 for high DPI tiles.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6444,2021-12-01T11:46:56Z,2021-12-01T13:41:11Z,2021-12-01T13:41:12Z,MERGED,True,61,20,7,https://github.com/rouault,mode=tile: add a tilesize=width+height query parameter to select another tile size than 256,1,[],https://github.com/mapserver/mapserver/pull/6444,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6444#issuecomment-983652234,this will be typically tilesize=512+512 for high DPI tiles.,thanks @rouault !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6445,2021-12-02T20:47:27Z,2021-12-15T11:14:59Z,2021-12-15T11:14:59Z,CLOSED,False,51,1,1,https://github.com/darkblue-b,6434 fix datetime,4,[],https://github.com/mapserver/mapserver/pull/6445,https://github.com/darkblue-b,1,https://github.com/MapServer/MapServer/pull/6445,"just code, per evenR from gdal/ogrutils.cpp","just code, per evenR from gdal/ogrutils.cpp",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6445,2021-12-02T20:47:27Z,2021-12-15T11:14:59Z,2021-12-15T11:14:59Z,CLOSED,False,51,1,1,https://github.com/darkblue-b,6434 fix datetime,4,[],https://github.com/mapserver/mapserver/pull/6445,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6445#issuecomment-994689521,"just code, per evenR from gdal/ogrutils.cpp",Closing that one since #6434 is in a better shape,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6446,2021-12-14T12:32:15Z,2021-12-16T21:09:12Z,2021-12-17T12:29:00Z,MERGED,True,60,4,6,https://github.com/WouterVisscher,Extending PropertyIsNull with GPKG support,7,[],https://github.com/mapserver/mapserver/pull/6446,https://github.com/WouterVisscher,1,https://github.com/MapServer/MapServer/pull/6446,"We are migrating several of our backend from PostGIS to GeoPackage (why have large DB's for serving just a couple MB's of data).
With that migration we noticed that WFS requests with a FILTER containing <PropertyIsNull> stopt working.
What I can gather from pull #5354 is that this is a ""thing"" 😄
But I also noticed that this works for not only PostGIS, but also SpatiaLite. So my think was SpatiaLite is a extention for SQLite, GeoPackage is based on SQLite so,... could it be this simple...
Well I do get working PropertyIsNull Filters with a GeoPackage backend now... so I guess it is?
If I missing something please let me know.","We are migrating several of our backend from PostGIS to GeoPackage (why have large DB's for serving just a couple MB's of data).
With that migration we noticed that WFS requests with a FILTER containing <PropertyIsNull> stopt working.
What I can gather from pull #5354 is that this is a ""thing"" 😄
But I also noticed that this works for not only PostGIS, but also SpatiaLite. So my think was SpatiaLite is a extention for SQLite, GeoPackage is based on SQLite so,... could it be this simple...
Well I do get working PropertyIsNull Filters with a GeoPackage backend now... so I guess it is?
If I missing something please let me know.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6446,2021-12-14T12:32:15Z,2021-12-16T21:09:12Z,2021-12-17T12:29:00Z,MERGED,True,60,4,6,https://github.com/WouterVisscher,Extending PropertyIsNull with GPKG support,7,[],https://github.com/mapserver/mapserver/pull/6446,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/6446#issuecomment-993503242,"We are migrating several of our backend from PostGIS to GeoPackage (why have large DB's for serving just a couple MB's of data).
With that migration we noticed that WFS requests with a FILTER containing <PropertyIsNull> stopt working.
What I can gather from pull #5354 is that this is a ""thing"" 😄
But I also noticed that this works for not only PostGIS, but also SpatiaLite. So my think was SpatiaLite is a extention for SQLite, GeoPackage is based on SQLite so,... could it be this simple...
Well I do get working PropertyIsNull Filters with a GeoPackage backend now... so I guess it is?
If I missing something please let me know.","Thanks @WouterVisscher - were you able to compile and confirm it was fixed?
It would be good to add a GPKG test similar to the SQLite one
The failing Appveyor build is due to Python 3.10 being picked up - I'll look at this, it is unrelated to your change.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6446,2021-12-14T12:32:15Z,2021-12-16T21:09:12Z,2021-12-17T12:29:00Z,MERGED,True,60,4,6,https://github.com/WouterVisscher,Extending PropertyIsNull with GPKG support,7,[],https://github.com/mapserver/mapserver/pull/6446,https://github.com/WouterVisscher,3,https://github.com/MapServer/MapServer/pull/6446#issuecomment-993506610,"We are migrating several of our backend from PostGIS to GeoPackage (why have large DB's for serving just a couple MB's of data).
With that migration we noticed that WFS requests with a FILTER containing <PropertyIsNull> stopt working.
What I can gather from pull #5354 is that this is a ""thing"" 😄
But I also noticed that this works for not only PostGIS, but also SpatiaLite. So my think was SpatiaLite is a extention for SQLite, GeoPackage is based on SQLite so,... could it be this simple...
Well I do get working PropertyIsNull Filters with a GeoPackage backend now... so I guess it is?
If I missing something please let me know.","were you able to compile and confirm it was fixed?

Yes, I've got it working like intended

add a GPKG test

Will do",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6446,2021-12-14T12:32:15Z,2021-12-16T21:09:12Z,2021-12-17T12:29:00Z,MERGED,True,60,4,6,https://github.com/WouterVisscher,Extending PropertyIsNull with GPKG support,7,[],https://github.com/mapserver/mapserver/pull/6446,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/6446#issuecomment-996686078,"We are migrating several of our backend from PostGIS to GeoPackage (why have large DB's for serving just a couple MB's of data).
With that migration we noticed that WFS requests with a FILTER containing <PropertyIsNull> stopt working.
What I can gather from pull #5354 is that this is a ""thing"" 😄
But I also noticed that this works for not only PostGIS, but also SpatiaLite. So my think was SpatiaLite is a extention for SQLite, GeoPackage is based on SQLite so,... could it be this simple...
Well I do get working PropertyIsNull Filters with a GeoPackage backend now... so I guess it is?
If I missing something please let me know.","thanks @WouterVisscher, also for adding then GPKG test.",True,{'THUMBS_UP': ['https://github.com/WouterVisscher']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6447,2021-12-14T16:01:50Z,2021-12-15T11:12:07Z,2021-12-15T11:12:07Z,MERGED,True,1,0,1,https://github.com/geographika,Fix Appveyor builds by ignoring Python 3.10,1,[],https://github.com/mapserver/mapserver/pull/6447,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6447,"Recent builds have been failing on Appveyor as even though the Python_ROOT_DIR hint is specified for Python 2.7, Python 3.10 is being found by CMake (e.g. here).
The simple workaround is to rename the Python 3.10 directory (it looks like some change may be required in MapScript to get Python working with 3.10 as some tests are failing).
I'm not sure what the correct fix here is. There is discussion on user set variables being ignored by CMake at https://gitlab.kitware.com/cmake/cmake/-/issues/19492#note_597909
As Python2 and Python3 are being built find_package (Python.. is used rather than find_package (Python2.. and find_package (Python3..
It looks like Python 3.10 is always picked up. Interestingly, this works fine with CMake 3.12 (3.22 is used by Appveyor). Maybe as 3.10 is not defined in https://github.com/Kitware/CMake/blob/master/Modules/FindPython/Support.cmake in the older version.","Recent builds have been failing on Appveyor as even though the Python_ROOT_DIR hint is specified for Python 2.7, Python 3.10 is being found by CMake (e.g. here).
The simple workaround is to rename the Python 3.10 directory (it looks like some change may be required in MapScript to get Python working with 3.10 as some tests are failing).
I'm not sure what the correct fix here is. There is discussion on user set variables being ignored by CMake at https://gitlab.kitware.com/cmake/cmake/-/issues/19492#note_597909
As Python2 and Python3 are being built find_package (Python.. is used rather than find_package (Python2.. and find_package (Python3..
It looks like Python 3.10 is always picked up. Interestingly, this works fine with CMake 3.12 (3.22 is used by Appveyor). Maybe as 3.10 is not defined in https://github.com/Kitware/CMake/blob/master/Modules/FindPython/Support.cmake in the older version.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6448,2021-12-14T22:06:34Z,2021-12-16T16:17:18Z,2021-12-16T16:17:19Z,MERGED,True,6,0,2,https://github.com/geographika,Reconfigure pyenv to fix broken Travis builds,1,[],https://github.com/mapserver/mapserver/pull/6448,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6448,"Attempt to fix errors e.g. at https://app.travis-ci.com/github/MapServer/MapServer/jobs/552166460#L1598
ERROR: Could not find a version that satisfies the requirement cryptography==3.4.6
This is turning out to be more complicated than hoped.
Details so far:

it looks like something has changed with pyenv on Travis. There were no commits to code between the last time Travis passed and when it first start failing (8th of Devember 2021) - see https://app.travis-ci.com/github/MapServer/MapServer/builds
the issue is that calling pyenv global $PYTHON_VERSION in before_install.sh no longer seems to point python and pip to the desired Python version. .travis.yml sets $PYTHON_VERSION to 3.6, 3.7 and then 3.8.
python and pip then fall back to using the system Python which is Python 2.7 (hence the ERROR: No matching distribution found for cryptography==3.4.6 error) and deprecation warnings about Python 2.7
Calling pyenv exec pip --version shows the correct version, but pip --version does not (nor does python --version)
Putting pyenv exec in fron of every call to pip or python on Travis works..
The most relevant change in pyenv looks like it could be pyenv/pyenv#1959
Setting eval ""$(pyenv init --path)"" and eval ""$(pyenv init -)"" seems to work for all python and pip calls within before_install.sh, but not later calls","Attempt to fix errors e.g. at https://app.travis-ci.com/github/MapServer/MapServer/jobs/552166460#L1598
ERROR: Could not find a version that satisfies the requirement cryptography==3.4.6
This is turning out to be more complicated than hoped.
Details so far:

it looks like something has changed with pyenv on Travis. There were no commits to code between the last time Travis passed and when it first start failing (8th of Devember 2021) - see https://app.travis-ci.com/github/MapServer/MapServer/builds
the issue is that calling pyenv global $PYTHON_VERSION in before_install.sh no longer seems to point python and pip to the desired Python version. .travis.yml sets $PYTHON_VERSION to 3.6, 3.7 and then 3.8.
python and pip then fall back to using the system Python which is Python 2.7 (hence the ERROR: No matching distribution found for cryptography==3.4.6 error) and deprecation warnings about Python 2.7
Calling pyenv exec pip --version shows the correct version, but pip --version does not (nor does python --version)
Putting pyenv exec in fron of every call to pip or python on Travis works..
The most relevant change in pyenv looks like it could be pyenv/pyenv#1959
Setting eval ""$(pyenv init --path)"" and eval ""$(pyenv init -)"" seems to work for all python and pip calls within before_install.sh, but not later calls",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6448,2021-12-14T22:06:34Z,2021-12-16T16:17:18Z,2021-12-16T16:17:19Z,MERGED,True,6,0,2,https://github.com/geographika,Reconfigure pyenv to fix broken Travis builds,1,[],https://github.com/mapserver/mapserver/pull/6448,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/6448#issuecomment-995900537,"Attempt to fix errors e.g. at https://app.travis-ci.com/github/MapServer/MapServer/jobs/552166460#L1598
ERROR: Could not find a version that satisfies the requirement cryptography==3.4.6
This is turning out to be more complicated than hoped.
Details so far:

it looks like something has changed with pyenv on Travis. There were no commits to code between the last time Travis passed and when it first start failing (8th of Devember 2021) - see https://app.travis-ci.com/github/MapServer/MapServer/builds
the issue is that calling pyenv global $PYTHON_VERSION in before_install.sh no longer seems to point python and pip to the desired Python version. .travis.yml sets $PYTHON_VERSION to 3.6, 3.7 and then 3.8.
python and pip then fall back to using the system Python which is Python 2.7 (hence the ERROR: No matching distribution found for cryptography==3.4.6 error) and deprecation warnings about Python 2.7
Calling pyenv exec pip --version shows the correct version, but pip --version does not (nor does python --version)
Putting pyenv exec in fron of every call to pip or python on Travis works..
The most relevant change in pyenv looks like it could be pyenv/pyenv#1959
Setting eval ""$(pyenv init --path)"" and eval ""$(pyenv init -)"" seems to work for all python and pip calls within before_install.sh, but not later calls","The solution (by trial and error) seems to be to add the following 2 lines, in each individual shell script run by Travis.
I'm guessing Travis updated the pre-installed pyenv which has some breaking change. There doesn't seem to be a Travis Bionic changelog anywhere to confirm this.
For reference if debugging a similar issue in the future, the following commands were useful:
pyenv versions
echo $(pyenv root)

# set the global Python version
# pyenv shell $PYTHON_VERSION
pyenv global $PYTHON_VERSION
pyenv versions

# check we are using the correct versions
pyenv which pip
pyenv which python

echo $PATH

whereis pip3
whereis pip

whereis python
whereis python3

python --version
pip --version
pyenv exec pip --version

pyenv exec pip install cryptography==3.4.6 # avoid requiring rust compiler for the cryptography dependency
pyenv exec pip install cpp-coveralls pyflakes lxml
pyenv exec pip install -r msautotest/requirements.txt",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6448,2021-12-14T22:06:34Z,2021-12-16T16:17:18Z,2021-12-16T16:17:19Z,MERGED,True,6,0,2,https://github.com/geographika,Reconfigure pyenv to fix broken Travis builds,1,[],https://github.com/mapserver/mapserver/pull/6448,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/6448#issuecomment-995966962,"Attempt to fix errors e.g. at https://app.travis-ci.com/github/MapServer/MapServer/jobs/552166460#L1598
ERROR: Could not find a version that satisfies the requirement cryptography==3.4.6
This is turning out to be more complicated than hoped.
Details so far:

it looks like something has changed with pyenv on Travis. There were no commits to code between the last time Travis passed and when it first start failing (8th of Devember 2021) - see https://app.travis-ci.com/github/MapServer/MapServer/builds
the issue is that calling pyenv global $PYTHON_VERSION in before_install.sh no longer seems to point python and pip to the desired Python version. .travis.yml sets $PYTHON_VERSION to 3.6, 3.7 and then 3.8.
python and pip then fall back to using the system Python which is Python 2.7 (hence the ERROR: No matching distribution found for cryptography==3.4.6 error) and deprecation warnings about Python 2.7
Calling pyenv exec pip --version shows the correct version, but pip --version does not (nor does python --version)
Putting pyenv exec in fron of every call to pip or python on Travis works..
The most relevant change in pyenv looks like it could be pyenv/pyenv#1959
Setting eval ""$(pyenv init --path)"" and eval ""$(pyenv init -)"" seems to work for all python and pip calls within before_install.sh, but not later calls","@geographika  Thanks for the tedious job figuring that out ! (when I see this, I've no regret to cause to the simpler approach taken in .github/workflows/build.yml where I launch a single script under a standard Docker image. This makes it so simpler to debug issues since you can replicate locally)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6451,2021-12-21T21:03:48Z,2021-12-21T21:29:13Z,2021-12-21T21:29:13Z,MERGED,True,1,1,1,https://github.com/jmckenna,upgrade Backport action,1,[],https://github.com/mapserver/mapserver/pull/6451,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6451,includes more detailed error messages,includes more detailed error messages,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6452,2021-12-28T11:11:24Z,2021-12-28T17:29:33Z,2021-12-28T17:29:33Z,MERGED,True,88,24,2,https://github.com/rouault,msProjectRect(): fix reprojecting from polar stereographic to another projected system,2,[],https://github.com/mapserver/mapserver/pull/6452,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6452,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6452,2021-12-28T11:11:24Z,2021-12-28T17:29:33Z,2021-12-28T17:29:33Z,MERGED,True,88,24,2,https://github.com/rouault,msProjectRect(): fix reprojecting from polar stereographic to another projected system,2,[],https://github.com/mapserver/mapserver/pull/6452,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6452#issuecomment-1002209578,,"Excellent change, thanks @rouault !",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6453,2022-01-04T18:18:14Z,2022-01-06T13:57:08Z,2022-01-06T13:57:08Z,MERGED,True,1,1,1,https://github.com/jmckenna,update year in README,1,[],https://github.com/mapserver/mapserver/pull/6453,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6453,update to 2022,update to 2022,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6454,2022-01-04T18:54:46Z,2022-01-04T19:32:51Z,2022-01-04T19:32:52Z,MERGED,True,1,1,1,https://github.com/jmckenna,bump Backport action,1,[],https://github.com/mapserver/mapserver/pull/6454,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6454,more improvements to backport failure case,more improvements to backport failure case,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6456,2022-01-21T11:07:51Z,2022-01-21T17:06:10Z,2022-01-21T17:06:11Z,MERGED,True,416,20,13,https://github.com/rouault,netCDF output related improvements for WCS ,5,[],https://github.com/mapserver/mapserver/pull/6456,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6456,"WCS: support providing metadata items to GDAL output
If a Mapfile defines a outputformat that is enabled in a WCS
layer, then it is possible to define a per-layer value for GDAL metadata items,
both at the dataset level with a syntax like:
""wcs_outputformat_{format_name}_mdi_{domain}_{key}"" ""value""

where:

format_name is substituted with the name of the output format
domain is substituted with the GDAL metadata domain into which to
write the item. The special value ""default"" can be used for the
default domain
key is the key of the metadata item.

For band level metadata items, the syntax is:
""wcs_outputformat_{format_name}_mdi_BAND_{band_number}_{domain}_{key}"" ""value""

where band_number is a number between 1 and the number of bands of the
dataset of the layer.
In case of band selection in WCS output, the code will automatically renumber
the band number.
netCDF output is a typical use case. For dataset level metadata, the key
must be prefix with NC_GLOBAL#
e.g.
""wcs_outputformat_netCDF_mdi_default_NC_GLOBAL#title"" ""A succinct description of what is in the dataset""
For Band metadata, e.g.
""wcs_outputformat_netCDF_mdi_BAND_1_default_NETCDF_VARNAME"" ""wind""
""wcs_outputformat_netCDF_mdi_BAND_1_default_long_name""      ""wind from direction""
""wcs_outputformat_netCDF_mdi_BAND_1_default_standard_name""  ""wind_from_direction""
""wcs_outputformat_netCDF_mdi_BAND_1_default_units""          ""degree""
NETCDF_VARNAME is a special key name recognized by the GDAL netCDF
driver to determine the variable name. All other keys are mapped to a
netCDF attribute belonging to the corresponding variable.


WCS and netCDF input/output: automatically set GDAL/netCDF output metadata itemps from netCDF  input dataset metadata (if wcs_outputformat_netCDF_mdi_ not defined)","WCS: support providing metadata items to GDAL output
If a Mapfile defines a outputformat that is enabled in a WCS
layer, then it is possible to define a per-layer value for GDAL metadata items,
both at the dataset level with a syntax like:
""wcs_outputformat_{format_name}_mdi_{domain}_{key}"" ""value""

where:

format_name is substituted with the name of the output format
domain is substituted with the GDAL metadata domain into which to
write the item. The special value ""default"" can be used for the
default domain
key is the key of the metadata item.

For band level metadata items, the syntax is:
""wcs_outputformat_{format_name}_mdi_BAND_{band_number}_{domain}_{key}"" ""value""

where band_number is a number between 1 and the number of bands of the
dataset of the layer.
In case of band selection in WCS output, the code will automatically renumber
the band number.
netCDF output is a typical use case. For dataset level metadata, the key
must be prefix with NC_GLOBAL#
e.g.
""wcs_outputformat_netCDF_mdi_default_NC_GLOBAL#title"" ""A succinct description of what is in the dataset""
For Band metadata, e.g.
""wcs_outputformat_netCDF_mdi_BAND_1_default_NETCDF_VARNAME"" ""wind""
""wcs_outputformat_netCDF_mdi_BAND_1_default_long_name""      ""wind from direction""
""wcs_outputformat_netCDF_mdi_BAND_1_default_standard_name""  ""wind_from_direction""
""wcs_outputformat_netCDF_mdi_BAND_1_default_units""          ""degree""
NETCDF_VARNAME is a special key name recognized by the GDAL netCDF
driver to determine the variable name. All other keys are mapped to a
netCDF attribute belonging to the corresponding variable.


WCS and netCDF input/output: automatically set GDAL/netCDF output metadata itemps from netCDF  input dataset metadata (if wcs_outputformat_netCDF_mdi_ not defined)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6456,2022-01-21T11:07:51Z,2022-01-21T17:06:10Z,2022-01-21T17:06:11Z,MERGED,True,416,20,13,https://github.com/rouault,netCDF output related improvements for WCS ,5,[],https://github.com/mapserver/mapserver/pull/6456,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6456#issuecomment-1018695605,"WCS: support providing metadata items to GDAL output
If a Mapfile defines a outputformat that is enabled in a WCS
layer, then it is possible to define a per-layer value for GDAL metadata items,
both at the dataset level with a syntax like:
""wcs_outputformat_{format_name}_mdi_{domain}_{key}"" ""value""

where:

format_name is substituted with the name of the output format
domain is substituted with the GDAL metadata domain into which to
write the item. The special value ""default"" can be used for the
default domain
key is the key of the metadata item.

For band level metadata items, the syntax is:
""wcs_outputformat_{format_name}_mdi_BAND_{band_number}_{domain}_{key}"" ""value""

where band_number is a number between 1 and the number of bands of the
dataset of the layer.
In case of band selection in WCS output, the code will automatically renumber
the band number.
netCDF output is a typical use case. For dataset level metadata, the key
must be prefix with NC_GLOBAL#
e.g.
""wcs_outputformat_netCDF_mdi_default_NC_GLOBAL#title"" ""A succinct description of what is in the dataset""
For Band metadata, e.g.
""wcs_outputformat_netCDF_mdi_BAND_1_default_NETCDF_VARNAME"" ""wind""
""wcs_outputformat_netCDF_mdi_BAND_1_default_long_name""      ""wind from direction""
""wcs_outputformat_netCDF_mdi_BAND_1_default_standard_name""  ""wind_from_direction""
""wcs_outputformat_netCDF_mdi_BAND_1_default_units""          ""degree""
NETCDF_VARNAME is a special key name recognized by the GDAL netCDF
driver to determine the variable name. All other keys are mapped to a
netCDF attribute belonging to the corresponding variable.


WCS and netCDF input/output: automatically set GDAL/netCDF output metadata itemps from netCDF  input dataset metadata (if wcs_outputformat_netCDF_mdi_ not defined)",thanks @rouault nice enhancement!,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6457,2022-01-21T18:19:36Z,2022-01-24T15:26:20Z,2022-01-24T15:26:20Z,MERGED,True,5,1,1,https://github.com/jmckenna,add DOI badge to README,1,[],https://github.com/mapserver/mapserver/pull/6457,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6457,"adds badge for the persistent (or 'concept') DOI, so we won't have to change the link for each release","adds badge for the persistent (or 'concept') DOI, so we won't have to change the link for each release",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6458,2022-01-24T00:17:52Z,2022-01-26T13:54:07Z,2022-01-27T18:24:47Z,MERGED,True,287,213,4,https://github.com/sdlime,Improved numerical validation.,28,[],https://github.com/mapserver/mapserver/pull/6458,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/6458,Implements a common approach to validating numerical values read from the mapfile at parse time. Meant to complement runtime validation done throughout the code. Review and additions most welcome.,Implements a common approach to validating numerical values read from the mapfile at parse time. Meant to complement runtime validation done throughout the code. Review and additions most welcome.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6458,2022-01-24T00:17:52Z,2022-01-26T13:54:07Z,2022-01-27T18:24:47Z,MERGED,True,287,213,4,https://github.com/sdlime,Improved numerical validation.,28,[],https://github.com/mapserver/mapserver/pull/6458,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/6458#issuecomment-1020116255,Implements a common approach to validating numerical values read from the mapfile at parse time. Meant to complement runtime validation done throughout the code. Review and additions most welcome.,"@sdlime - looks good to me, and any validation that can be done at the Mapfile parsing stage will save a lot of pain later on.
I ran on a couple of large Mapfiles I have here, and hit the error message loadStyle(): General error message. Invalid WIDTH, must be greater than 0.  On further investigation this was correctly thrown as I had a STYLE with a WIDTH 0 which serves no purpose.
CLASS
..
            STYLE
                COLOR 0 0 0
                WIDTH 0
            END
            STYLE
                COLOR 255 192 203
                WIDTH 4
            END
        END
END

Do you expect parsing speeds to be impacted in any way? I can try and test that here to see.
Finally I can look at making a docs pull request with the min/max values for various keywords if that helps.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6458,2022-01-24T00:17:52Z,2022-01-26T13:54:07Z,2022-01-27T18:24:47Z,MERGED,True,287,213,4,https://github.com/sdlime,Improved numerical validation.,28,[],https://github.com/mapserver/mapserver/pull/6458,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/6458#issuecomment-1021444006,Implements a common approach to validating numerical values read from the mapfile at parse time. Meant to complement runtime validation done throughout the code. Review and additions most welcome.,"@geographika, I'm not anticipating any significant impact on parsing speed. If you have the opportunity to validate then that would be great. In the big scheme of things additions like the config file will have a more significant affect - especially for straight CGI execution.
In terms of things like WIDTH 0, I wrestled with handling default values when I worked through this. I did do some testing when writing mapfiles via MapScript to make sure that default values weren't being written routinely. I mean, we wouldn't want MapServer to barf reading a mapfile that was written by MapServer. That doesn't seem to be the case here and we can recommend commenting things out rather than using a value like 0.
That said, we could conditionally allow default values in a few cases if something like WIDTH 0 is pretty commonplace - recommended in the docs or whatever.
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6458,2022-01-24T00:17:52Z,2022-01-26T13:54:07Z,2022-01-27T18:24:47Z,MERGED,True,287,213,4,https://github.com/sdlime,Improved numerical validation.,28,[],https://github.com/mapserver/mapserver/pull/6458,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/6458#issuecomment-1022211046,Implements a common approach to validating numerical values read from the mapfile at parse time. Meant to complement runtime validation done throughout the code. Review and additions most welcome.,I think I got things resolved (except for docs)... Please let me know about merging. --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6458,2022-01-24T00:17:52Z,2022-01-26T13:54:07Z,2022-01-27T18:24:47Z,MERGED,True,287,213,4,https://github.com/sdlime,Improved numerical validation.,28,[],https://github.com/mapserver/mapserver/pull/6458,https://github.com/sdlime,5,https://github.com/MapServer/MapServer/pull/6458#issuecomment-1022217606,Implements a common approach to validating numerical values read from the mapfile at parse time. Meant to complement runtime validation done throughout the code. Review and additions most welcome.,This will be a candidate for backport to 7.6 but I think we should wait until some 8.0 testing happens.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6458,2022-01-24T00:17:52Z,2022-01-26T13:54:07Z,2022-01-27T18:24:47Z,MERGED,True,287,213,4,https://github.com/sdlime,Improved numerical validation.,28,[],https://github.com/mapserver/mapserver/pull/6458,https://github.com/geographika,6,https://github.com/MapServer/MapServer/pull/6458#issuecomment-1022219680,Implements a common approach to validating numerical values read from the mapfile at parse time. Meant to complement runtime validation done throughout the code. Review and additions most welcome.,@sdlime - do you want me to update the docs? I'm also going to update mappyfile to include the min/max values so can do both at the same time.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6458,2022-01-24T00:17:52Z,2022-01-26T13:54:07Z,2022-01-27T18:24:47Z,MERGED,True,287,213,4,https://github.com/sdlime,Improved numerical validation.,28,[],https://github.com/mapserver/mapserver/pull/6458,https://github.com/sdlime,7,https://github.com/MapServer/MapServer/pull/6458#issuecomment-1022220558,Implements a common approach to validating numerical values read from the mapfile at parse time. Meant to complement runtime validation done throughout the code. Review and additions most welcome.,"@sdlime - do you want me to update the docs? I'm also going to update mappyfile to include the min/max values so can do both at the same time.

That would be great!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6458,2022-01-24T00:17:52Z,2022-01-26T13:54:07Z,2022-01-27T18:24:47Z,MERGED,True,287,213,4,https://github.com/sdlime,Improved numerical validation.,28,[],https://github.com/mapserver/mapserver/pull/6458,https://github.com/jmckenna,8,https://github.com/MapServer/MapServer/pull/6458#issuecomment-1022230330,Implements a common approach to validating numerical values read from the mapfile at parse time. Meant to complement runtime validation done throughout the code. Review and additions most welcome.,"re: backport: I'd also prefer getting feedback through main branch first (will do tests with MS4W today)
re: docs: I'd like to see us getting back to filing an associated ticket in the documentation repository, for each new feature: the benefit is that the docs team will test each new feature, while adding the docs.  This also is a way to keep track of what is missing in the docs.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6458,2022-01-24T00:17:52Z,2022-01-26T13:54:07Z,2022-01-27T18:24:47Z,MERGED,True,287,213,4,https://github.com/sdlime,Improved numerical validation.,28,[],https://github.com/mapserver/mapserver/pull/6458,https://github.com/ejn,9,https://github.com/MapServer/MapServer/pull/6458#issuecomment-1022242789,Implements a common approach to validating numerical values read from the mapfile at parse time. Meant to complement runtime validation done throughout the code. Review and additions most welcome.,"As a user I'd say that this change (much as I find it a good thing (TM)) shouldn't be backported - it's a change that could break existing installations. Yes, those are installations with ""invalid"" mapfiles, but if they weren't sufficiently invalid that they couldn't be used then it would be rude to introduce what is effectively a breaking change in a minor (or even bugfix) release.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6458,2022-01-24T00:17:52Z,2022-01-26T13:54:07Z,2022-01-27T18:24:47Z,MERGED,True,287,213,4,https://github.com/sdlime,Improved numerical validation.,28,[],https://github.com/mapserver/mapserver/pull/6458,https://github.com/jmckenna,10,https://github.com/MapServer/MapServer/pull/6458#issuecomment-1022253923,Implements a common approach to validating numerical values read from the mapfile at parse time. Meant to complement runtime validation done throughout the code. Review and additions most welcome.,I agree with you @ejn,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6458,2022-01-24T00:17:52Z,2022-01-26T13:54:07Z,2022-01-27T18:24:47Z,MERGED,True,287,213,4,https://github.com/sdlime,Improved numerical validation.,28,[],https://github.com/mapserver/mapserver/pull/6458,https://github.com/jmckenna,11,https://github.com/MapServer/MapServer/pull/6458#issuecomment-1022462832,Implements a common approach to validating numerical values read from the mapfile at parse time. Meant to complement runtime validation done throughout the code. Review and additions most welcome.,"@sdlime something bizarre is happening locally for me, sorry if this sounds like a crazy question: could the output of map2img's -map_debug switch be affected by these changes?   -all_debug 3 works fine.  -map_debug 3 generates the map image but does not output any debug messages (just a blank line).   This works with a build from a month ago.  Something is different, but I don't know what yet.  (either in my build, or a change in the code)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6458,2022-01-24T00:17:52Z,2022-01-26T13:54:07Z,2022-01-27T18:24:47Z,MERGED,True,287,213,4,https://github.com/sdlime,Improved numerical validation.,28,[],https://github.com/mapserver/mapserver/pull/6458,https://github.com/sdlime,12,https://github.com/MapServer/MapServer/pull/6458#issuecomment-1022497711,Implements a common approach to validating numerical values read from the mapfile at parse time. Meant to complement runtime validation done throughout the code. Review and additions most welcome.,"No, the various debug settings are unaffected. This is actually an oversight since if debug is given as a number then it should be checked as well but the code in mapfile.c uses getSymbol() so I missed it. I can patch that...
Anyway, map2img is setting map->debug directly, apart from what's in the mapfile so these changes have no bearing on that.  I'm happy to try on my end if you have a test case.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6458,2022-01-24T00:17:52Z,2022-01-26T13:54:07Z,2022-01-27T18:24:47Z,MERGED,True,287,213,4,https://github.com/sdlime,Improved numerical validation.,28,[],https://github.com/mapserver/mapserver/pull/6458,https://github.com/jmckenna,13,https://github.com/MapServer/MapServer/pull/6458#issuecomment-1022500337,Implements a common approach to validating numerical values read from the mapfile at parse time. Meant to complement runtime validation done throughout the code. Review and additions most welcome.,"Ok thanks, makes sense.  I'll take a deeper look and see if it was something on my end (likely) first.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6458,2022-01-24T00:17:52Z,2022-01-26T13:54:07Z,2022-01-27T18:24:47Z,MERGED,True,287,213,4,https://github.com/sdlime,Improved numerical validation.,28,[],https://github.com/mapserver/mapserver/pull/6458,https://github.com/jmckenna,14,https://github.com/MapServer/MapServer/pull/6458#issuecomment-1023228093,Implements a common approach to validating numerical values read from the mapfile at parse time. Meant to complement runtime validation done throughout the code. Review and additions most welcome.,"@sdlime solved, it was on my end.  Will continue testing this...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6458,2022-01-24T00:17:52Z,2022-01-26T13:54:07Z,2022-01-27T18:24:47Z,MERGED,True,287,213,4,https://github.com/sdlime,Improved numerical validation.,28,[],https://github.com/mapserver/mapserver/pull/6458,https://github.com/jmckenna,15,https://github.com/MapServer/MapServer/pull/6458#issuecomment-1023463781,Implements a common approach to validating numerical values read from the mapfile at parse time. Meant to complement runtime validation done throughout the code. Review and additions most welcome.,"@Steve can something be done to include a line number in the error message?  For example, a mapfile with 30 entries of WIDTH 0 returns only the following with map2img:
loadStyle(): General error message. Invalid WIDTH, must be greater than 0
loadStyle(): General error message. Invalid WIDTH, must be greater than 0 <br>

Or is this a huge can of worms, for another day?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6458,2022-01-24T00:17:52Z,2022-01-26T13:54:07Z,2022-01-27T18:24:47Z,MERGED,True,287,213,4,https://github.com/sdlime,Improved numerical validation.,28,[],https://github.com/mapserver/mapserver/pull/6458,https://github.com/sdlime,16,https://github.com/MapServer/MapServer/pull/6458#issuecomment-1023518049,Implements a common approach to validating numerical values read from the mapfile at parse time. Meant to complement runtime validation done throughout the code. Review and additions most welcome.,"@Steve can something be done to include a line number in the error message? For example, a mapfile with 30 entries of WIDTH 0 returns only the following with map2img:
loadStyle(): General error message. Invalid WIDTH, must be greater than 0
loadStyle(): General error message. Invalid WIDTH, must be greater than 0 <br>

Or is this a huge can of worms, for another day?

No, this can be addressed in the error handling. That said, we could also test for >= 0 if width=0 is a common setting (the default width is 1). @geographika has a ticket #6463 that is documenting some exceptions we'll need to address. Perhaps you could add this there so it's all in one spot.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6460,2022-01-24T09:40:08Z,2022-01-24T15:26:58Z,2022-01-27T16:28:03Z,MERGED,True,1,1,1,https://github.com/geographika,Fix compilation warning in shptreevis,1,[],https://github.com/mapserver/mapserver/pull/6460,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6460,"Use correct size to avoid the following:
 warning C4267: '=': conversion from 'size_t' to 'int', possible loss of data","Use correct size to avoid the following:
 warning C4267: '=': conversion from 'size_t' to 'int', possible loss of data",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6460,2022-01-24T09:40:08Z,2022-01-24T15:26:58Z,2022-01-27T16:28:03Z,MERGED,True,1,1,1,https://github.com/geographika,Fix compilation warning in shptreevis,1,[],https://github.com/mapserver/mapserver/pull/6460,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6460#issuecomment-1020219431,"Use correct size to avoid the following:
 warning C4267: '=': conversion from 'size_t' to 'int', possible loss of data",thanks @geographika !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6462,2022-01-26T21:25:13Z,2022-01-27T15:02:45Z,2022-01-27T16:27:40Z,MERGED,True,1529,1548,6,https://github.com/geographika,Remove unused LABEL>MINLENGTH property,3,[],https://github.com/mapserver/mapserver/pull/6462,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6462,"As mentioned in #6217 the LABEL>MINLENGTH property was added in #2383, but is unused (and undocumented).
I propose this is removed from the codebase (it can be added back in if required).","As mentioned in #6217 the LABEL>MINLENGTH property was added in #2383, but is unused (and undocumented).
I propose this is removed from the codebase (it can be added back in if required).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6462,2022-01-26T21:25:13Z,2022-01-27T15:02:45Z,2022-01-27T16:27:40Z,MERGED,True,1529,1548,6,https://github.com/geographika,Remove unused LABEL>MINLENGTH property,3,[],https://github.com/mapserver/mapserver/pull/6462,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6462#issuecomment-1022626806,"As mentioned in #6217 the LABEL>MINLENGTH property was added in #2383, but is unused (and undocumented).
I propose this is removed from the codebase (it can be added back in if required).",Will need to update maplexer.l and regenerate maplexer.c.,True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6462,2022-01-26T21:25:13Z,2022-01-27T15:02:45Z,2022-01-27T16:27:40Z,MERGED,True,1529,1548,6,https://github.com/geographika,Remove unused LABEL>MINLENGTH property,3,[],https://github.com/mapserver/mapserver/pull/6462,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/6462#issuecomment-1023301040,"As mentioned in #6217 the LABEL>MINLENGTH property was added in #2383, but is unused (and undocumented).
I propose this is removed from the codebase (it can be added back in if required).",IMHO it's ok to merge... --Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6464,2022-01-27T18:11:34Z,2022-02-01T12:26:16Z,2022-02-01T12:26:16Z,MERGED,True,441,16,7,https://github.com/rouault,WCS: add support for generating 3D netCDF files,3,[],https://github.com/mapserver/mapserver/pull/6464,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6464,"WCS output: fix handling of multiple bands when setting band-specific creation options or metada items


WCS netCDF output: allow generation of a 3D dataset from multiple bands
If the input dataset has multiple bands, it is now possible to generate
a 3D dataset with the extra dimension being typically time or Z.
This requires the following metadata item to be defined in
LAYER.METADATA:
""wcs_outputformat_{outputformat}_mdi_BAND_{bandnumber}_default_NETCDF_DIM_{dimname}"" ""{value}""

where:

{outputformat} is substituted with the OUTPUTFORMAT.NAME value (typically ""netCDF"")
{bandnumber} is substituted with the band number (between 1 and number of bands)
{dimnname} is substituted with the name of the extra dimension. e.g time.
{value} is substituted with the value taken on that extra dimension by the band. It must
be a 32 bit integer, 64 bit integer or floating-point value.

'mdi' stands for metadata item
'default' indicates that this is for the GDAL default metadata item
NETCDF_DIM_ is a specific prefix used by the GDAL netCDF driver to
distinguish metadata items that define extra dimensions.
In addition to that, netCDF attributes can be defined on the extra
dimension by setting metadata items of the form
""wcs_outputformat_{outputformat}_mdi_default_{dimname}#{attrname}"" ""{value}""

where {attrname} is substituted with the name of the attribute to set on
the extra dimension (e.g. ""standard_name"", ""units"", etc.)
Extract from an example mapfile:
   # Metadata items to apply to the ""time"" extra dimension.
   ""wcs_outputformat_netCDF_mdi_default_time#calendar"" ""standard""
   ""wcs_outputformat_netCDF_mdi_default_time#standard_name"" ""time""
   ""wcs_outputformat_netCDF_mdi_default_time#units"" ""hours since 1900-01-01 00:00:00""

   # Values of each band along the ""time"" extra dimension.
   ""wcs_outputformat_netCDF_mdi_BAND_1_default_NETCDF_DIM_time"" ""10""
   ""wcs_outputformat_netCDF_mdi_BAND_2_default_NETCDF_DIM_time"" ""20""
   ""wcs_outputformat_netCDF_mdi_BAND_3_default_NETCDF_DIM_time"" ""30""
   ""wcs_outputformat_netCDF_mdi_BAND_4_default_NETCDF_DIM_time"" ""40""
   ""wcs_outputformat_netCDF_mdi_BAND_5_default_NETCDF_DIM_time"" ""50""
   ""wcs_outputformat_netCDF_mdi_BAND_6_default_NETCDF_DIM_time"" ""60""
   ""wcs_outputformat_netCDF_mdi_BAND_7_default_NETCDF_DIM_time"" ""70""
   ""wcs_outputformat_netCDF_mdi_BAND_8_default_NETCDF_DIM_time"" ""80""
   ""wcs_outputformat_netCDF_mdi_BAND_9_default_NETCDF_DIM_time"" ""90""



WCS and netCDF input/output: automatically create a 3D netCDF file for GDAL/netCDF output metadata if the input dataset is itself a 3D netCDF file (if wcs_outputformat_netCDF_mdi_ not defined)","WCS output: fix handling of multiple bands when setting band-specific creation options or metada items


WCS netCDF output: allow generation of a 3D dataset from multiple bands
If the input dataset has multiple bands, it is now possible to generate
a 3D dataset with the extra dimension being typically time or Z.
This requires the following metadata item to be defined in
LAYER.METADATA:
""wcs_outputformat_{outputformat}_mdi_BAND_{bandnumber}_default_NETCDF_DIM_{dimname}"" ""{value}""

where:

{outputformat} is substituted with the OUTPUTFORMAT.NAME value (typically ""netCDF"")
{bandnumber} is substituted with the band number (between 1 and number of bands)
{dimnname} is substituted with the name of the extra dimension. e.g time.
{value} is substituted with the value taken on that extra dimension by the band. It must
be a 32 bit integer, 64 bit integer or floating-point value.

'mdi' stands for metadata item
'default' indicates that this is for the GDAL default metadata item
NETCDF_DIM_ is a specific prefix used by the GDAL netCDF driver to
distinguish metadata items that define extra dimensions.
In addition to that, netCDF attributes can be defined on the extra
dimension by setting metadata items of the form
""wcs_outputformat_{outputformat}_mdi_default_{dimname}#{attrname}"" ""{value}""

where {attrname} is substituted with the name of the attribute to set on
the extra dimension (e.g. ""standard_name"", ""units"", etc.)
Extract from an example mapfile:
   # Metadata items to apply to the ""time"" extra dimension.
   ""wcs_outputformat_netCDF_mdi_default_time#calendar"" ""standard""
   ""wcs_outputformat_netCDF_mdi_default_time#standard_name"" ""time""
   ""wcs_outputformat_netCDF_mdi_default_time#units"" ""hours since 1900-01-01 00:00:00""

   # Values of each band along the ""time"" extra dimension.
   ""wcs_outputformat_netCDF_mdi_BAND_1_default_NETCDF_DIM_time"" ""10""
   ""wcs_outputformat_netCDF_mdi_BAND_2_default_NETCDF_DIM_time"" ""20""
   ""wcs_outputformat_netCDF_mdi_BAND_3_default_NETCDF_DIM_time"" ""30""
   ""wcs_outputformat_netCDF_mdi_BAND_4_default_NETCDF_DIM_time"" ""40""
   ""wcs_outputformat_netCDF_mdi_BAND_5_default_NETCDF_DIM_time"" ""50""
   ""wcs_outputformat_netCDF_mdi_BAND_6_default_NETCDF_DIM_time"" ""60""
   ""wcs_outputformat_netCDF_mdi_BAND_7_default_NETCDF_DIM_time"" ""70""
   ""wcs_outputformat_netCDF_mdi_BAND_8_default_NETCDF_DIM_time"" ""80""
   ""wcs_outputformat_netCDF_mdi_BAND_9_default_NETCDF_DIM_time"" ""90""



WCS and netCDF input/output: automatically create a 3D netCDF file for GDAL/netCDF output metadata if the input dataset is itself a 3D netCDF file (if wcs_outputformat_netCDF_mdi_ not defined)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6464,2022-01-27T18:11:34Z,2022-02-01T12:26:16Z,2022-02-01T12:26:16Z,MERGED,True,441,16,7,https://github.com/rouault,WCS: add support for generating 3D netCDF files,3,[],https://github.com/mapserver/mapserver/pull/6464,https://github.com/jratike80,2,https://github.com/MapServer/MapServer/pull/6464#issuecomment-1023522994,"WCS output: fix handling of multiple bands when setting band-specific creation options or metada items


WCS netCDF output: allow generation of a 3D dataset from multiple bands
If the input dataset has multiple bands, it is now possible to generate
a 3D dataset with the extra dimension being typically time or Z.
This requires the following metadata item to be defined in
LAYER.METADATA:
""wcs_outputformat_{outputformat}_mdi_BAND_{bandnumber}_default_NETCDF_DIM_{dimname}"" ""{value}""

where:

{outputformat} is substituted with the OUTPUTFORMAT.NAME value (typically ""netCDF"")
{bandnumber} is substituted with the band number (between 1 and number of bands)
{dimnname} is substituted with the name of the extra dimension. e.g time.
{value} is substituted with the value taken on that extra dimension by the band. It must
be a 32 bit integer, 64 bit integer or floating-point value.

'mdi' stands for metadata item
'default' indicates that this is for the GDAL default metadata item
NETCDF_DIM_ is a specific prefix used by the GDAL netCDF driver to
distinguish metadata items that define extra dimensions.
In addition to that, netCDF attributes can be defined on the extra
dimension by setting metadata items of the form
""wcs_outputformat_{outputformat}_mdi_default_{dimname}#{attrname}"" ""{value}""

where {attrname} is substituted with the name of the attribute to set on
the extra dimension (e.g. ""standard_name"", ""units"", etc.)
Extract from an example mapfile:
   # Metadata items to apply to the ""time"" extra dimension.
   ""wcs_outputformat_netCDF_mdi_default_time#calendar"" ""standard""
   ""wcs_outputformat_netCDF_mdi_default_time#standard_name"" ""time""
   ""wcs_outputformat_netCDF_mdi_default_time#units"" ""hours since 1900-01-01 00:00:00""

   # Values of each band along the ""time"" extra dimension.
   ""wcs_outputformat_netCDF_mdi_BAND_1_default_NETCDF_DIM_time"" ""10""
   ""wcs_outputformat_netCDF_mdi_BAND_2_default_NETCDF_DIM_time"" ""20""
   ""wcs_outputformat_netCDF_mdi_BAND_3_default_NETCDF_DIM_time"" ""30""
   ""wcs_outputformat_netCDF_mdi_BAND_4_default_NETCDF_DIM_time"" ""40""
   ""wcs_outputformat_netCDF_mdi_BAND_5_default_NETCDF_DIM_time"" ""50""
   ""wcs_outputformat_netCDF_mdi_BAND_6_default_NETCDF_DIM_time"" ""60""
   ""wcs_outputformat_netCDF_mdi_BAND_7_default_NETCDF_DIM_time"" ""70""
   ""wcs_outputformat_netCDF_mdi_BAND_8_default_NETCDF_DIM_time"" ""80""
   ""wcs_outputformat_netCDF_mdi_BAND_9_default_NETCDF_DIM_time"" ""90""



WCS and netCDF input/output: automatically create a 3D netCDF file for GDAL/netCDF output metadata if the input dataset is itself a 3D netCDF file (if wcs_outputformat_netCDF_mdi_ not defined)",Can data be filtered by this extra dimension with WCS 2.0 by using it in SUBSET?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6464,2022-01-27T18:11:34Z,2022-02-01T12:26:16Z,2022-02-01T12:26:16Z,MERGED,True,441,16,7,https://github.com/rouault,WCS: add support for generating 3D netCDF files,3,[],https://github.com/mapserver/mapserver/pull/6464,https://github.com/rouault,3,https://github.com/MapServer/MapServer/pull/6464#issuecomment-1023537320,"WCS output: fix handling of multiple bands when setting band-specific creation options or metada items


WCS netCDF output: allow generation of a 3D dataset from multiple bands
If the input dataset has multiple bands, it is now possible to generate
a 3D dataset with the extra dimension being typically time or Z.
This requires the following metadata item to be defined in
LAYER.METADATA:
""wcs_outputformat_{outputformat}_mdi_BAND_{bandnumber}_default_NETCDF_DIM_{dimname}"" ""{value}""

where:

{outputformat} is substituted with the OUTPUTFORMAT.NAME value (typically ""netCDF"")
{bandnumber} is substituted with the band number (between 1 and number of bands)
{dimnname} is substituted with the name of the extra dimension. e.g time.
{value} is substituted with the value taken on that extra dimension by the band. It must
be a 32 bit integer, 64 bit integer or floating-point value.

'mdi' stands for metadata item
'default' indicates that this is for the GDAL default metadata item
NETCDF_DIM_ is a specific prefix used by the GDAL netCDF driver to
distinguish metadata items that define extra dimensions.
In addition to that, netCDF attributes can be defined on the extra
dimension by setting metadata items of the form
""wcs_outputformat_{outputformat}_mdi_default_{dimname}#{attrname}"" ""{value}""

where {attrname} is substituted with the name of the attribute to set on
the extra dimension (e.g. ""standard_name"", ""units"", etc.)
Extract from an example mapfile:
   # Metadata items to apply to the ""time"" extra dimension.
   ""wcs_outputformat_netCDF_mdi_default_time#calendar"" ""standard""
   ""wcs_outputformat_netCDF_mdi_default_time#standard_name"" ""time""
   ""wcs_outputformat_netCDF_mdi_default_time#units"" ""hours since 1900-01-01 00:00:00""

   # Values of each band along the ""time"" extra dimension.
   ""wcs_outputformat_netCDF_mdi_BAND_1_default_NETCDF_DIM_time"" ""10""
   ""wcs_outputformat_netCDF_mdi_BAND_2_default_NETCDF_DIM_time"" ""20""
   ""wcs_outputformat_netCDF_mdi_BAND_3_default_NETCDF_DIM_time"" ""30""
   ""wcs_outputformat_netCDF_mdi_BAND_4_default_NETCDF_DIM_time"" ""40""
   ""wcs_outputformat_netCDF_mdi_BAND_5_default_NETCDF_DIM_time"" ""50""
   ""wcs_outputformat_netCDF_mdi_BAND_6_default_NETCDF_DIM_time"" ""60""
   ""wcs_outputformat_netCDF_mdi_BAND_7_default_NETCDF_DIM_time"" ""70""
   ""wcs_outputformat_netCDF_mdi_BAND_8_default_NETCDF_DIM_time"" ""80""
   ""wcs_outputformat_netCDF_mdi_BAND_9_default_NETCDF_DIM_time"" ""90""



WCS and netCDF input/output: automatically create a 3D netCDF file for GDAL/netCDF output metadata if the input dataset is itself a 3D netCDF file (if wcs_outputformat_netCDF_mdi_ not defined)","Can data be filtered by this extra dimension with WCS 2.0 by using it in SUBSET?

no, you need to use RANGESUBSET to select bands.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6464,2022-01-27T18:11:34Z,2022-02-01T12:26:16Z,2022-02-01T12:26:16Z,MERGED,True,441,16,7,https://github.com/rouault,WCS: add support for generating 3D netCDF files,3,[],https://github.com/mapserver/mapserver/pull/6464,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/6464#issuecomment-1023540350,"WCS output: fix handling of multiple bands when setting band-specific creation options or metada items


WCS netCDF output: allow generation of a 3D dataset from multiple bands
If the input dataset has multiple bands, it is now possible to generate
a 3D dataset with the extra dimension being typically time or Z.
This requires the following metadata item to be defined in
LAYER.METADATA:
""wcs_outputformat_{outputformat}_mdi_BAND_{bandnumber}_default_NETCDF_DIM_{dimname}"" ""{value}""

where:

{outputformat} is substituted with the OUTPUTFORMAT.NAME value (typically ""netCDF"")
{bandnumber} is substituted with the band number (between 1 and number of bands)
{dimnname} is substituted with the name of the extra dimension. e.g time.
{value} is substituted with the value taken on that extra dimension by the band. It must
be a 32 bit integer, 64 bit integer or floating-point value.

'mdi' stands for metadata item
'default' indicates that this is for the GDAL default metadata item
NETCDF_DIM_ is a specific prefix used by the GDAL netCDF driver to
distinguish metadata items that define extra dimensions.
In addition to that, netCDF attributes can be defined on the extra
dimension by setting metadata items of the form
""wcs_outputformat_{outputformat}_mdi_default_{dimname}#{attrname}"" ""{value}""

where {attrname} is substituted with the name of the attribute to set on
the extra dimension (e.g. ""standard_name"", ""units"", etc.)
Extract from an example mapfile:
   # Metadata items to apply to the ""time"" extra dimension.
   ""wcs_outputformat_netCDF_mdi_default_time#calendar"" ""standard""
   ""wcs_outputformat_netCDF_mdi_default_time#standard_name"" ""time""
   ""wcs_outputformat_netCDF_mdi_default_time#units"" ""hours since 1900-01-01 00:00:00""

   # Values of each band along the ""time"" extra dimension.
   ""wcs_outputformat_netCDF_mdi_BAND_1_default_NETCDF_DIM_time"" ""10""
   ""wcs_outputformat_netCDF_mdi_BAND_2_default_NETCDF_DIM_time"" ""20""
   ""wcs_outputformat_netCDF_mdi_BAND_3_default_NETCDF_DIM_time"" ""30""
   ""wcs_outputformat_netCDF_mdi_BAND_4_default_NETCDF_DIM_time"" ""40""
   ""wcs_outputformat_netCDF_mdi_BAND_5_default_NETCDF_DIM_time"" ""50""
   ""wcs_outputformat_netCDF_mdi_BAND_6_default_NETCDF_DIM_time"" ""60""
   ""wcs_outputformat_netCDF_mdi_BAND_7_default_NETCDF_DIM_time"" ""70""
   ""wcs_outputformat_netCDF_mdi_BAND_8_default_NETCDF_DIM_time"" ""80""
   ""wcs_outputformat_netCDF_mdi_BAND_9_default_NETCDF_DIM_time"" ""90""



WCS and netCDF input/output: automatically create a 3D netCDF file for GDAL/netCDF output metadata if the input dataset is itself a 3D netCDF file (if wcs_outputformat_netCDF_mdi_ not defined)",This addresses the use case of https://lists.osgeo.org/pipermail/gdal-dev/2018-July/048866.html,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6465,2022-01-31T18:13:22Z,2022-02-01T12:49:00Z,2022-02-01T12:49:00Z,MERGED,True,1,1,1,https://github.com/jmckenna,update Backport action,1,[],https://github.com/mapserver/mapserver/pull/6465,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6465,update to 1.2.7 release,update to 1.2.7 release,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6466,2022-01-31T20:42:47Z,2022-02-01T21:02:19Z,2022-02-01T21:18:33Z,MERGED,True,98,57,3,https://github.com/sdlime,Addressed issues identified in issue #6463.,2,[],https://github.com/mapserver/mapserver/pull/6466,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/6466,Addressed issues identified by @geographika and @jmckenna. Note I left style->angle check at 0 to 360.,Addressed issues identified by @geographika and @jmckenna. Note I left style->angle check at 0 to 360.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6466,2022-01-31T20:42:47Z,2022-02-01T21:02:19Z,2022-02-01T21:18:33Z,MERGED,True,98,57,3,https://github.com/sdlime,Addressed issues identified in issue #6463.,2,[],https://github.com/mapserver/mapserver/pull/6466,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6466#issuecomment-1026966641,Addressed issues identified by @geographika and @jmckenna. Note I left style->angle check at 0 to 360.,Thanks @geographika. Will give @jmckenna a little while to test before merging...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6466,2022-01-31T20:42:47Z,2022-02-01T21:02:19Z,2022-02-01T21:18:33Z,MERGED,True,98,57,3,https://github.com/sdlime,Addressed issues identified in issue #6463.,2,[],https://github.com/mapserver/mapserver/pull/6466,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6466#issuecomment-1026999383,Addressed issues identified by @geographika and @jmckenna. Note I left style->angle check at 0 to 360.,Thanks @sdlime I am testing now...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6466,2022-01-31T20:42:47Z,2022-02-01T21:02:19Z,2022-02-01T21:18:33Z,MERGED,True,98,57,3,https://github.com/sdlime,Addressed issues identified in issue #6463.,2,[],https://github.com/mapserver/mapserver/pull/6466,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/6466#issuecomment-1027224511,Addressed issues identified by @geographika and @jmckenna. Note I left style->angle check at 0 to 360.,"@jmckenna, why should MINSCALEDENOM 0 be considered valid?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6466,2022-01-31T20:42:47Z,2022-02-01T21:02:19Z,2022-02-01T21:18:33Z,MERGED,True,98,57,3,https://github.com/sdlime,Addressed issues identified in issue #6463.,2,[],https://github.com/mapserver/mapserver/pull/6466,https://github.com/jmckenna,5,https://github.com/MapServer/MapServer/pull/6466#issuecomment-1027226657,Addressed issues identified by @geographika and @jmckenna. Note I left style->angle check at 0 to 360.,"@jmckenna, why should MINSCALEDENOM 0 be considered valid?

This is the case for all mapfiles generated by the ""Basemaps"" sub-project of MapServer (which are ~10,000 lines long), and, with a user hat on, this makes sense to me.  Also, I'm for less-breaking of existing mapfiles, especially huge ones like this that we manage under our umbrella.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6466,2022-01-31T20:42:47Z,2022-02-01T21:02:19Z,2022-02-01T21:18:33Z,MERGED,True,98,57,3,https://github.com/sdlime,Addressed issues identified in issue #6463.,2,[],https://github.com/mapserver/mapserver/pull/6466,https://github.com/sdlime,6,https://github.com/MapServer/MapServer/pull/6466#issuecomment-1027236357,Addressed issues identified by @geographika and @jmckenna. Note I left style->angle check at 0 to 360.,"@jmckenna, why should MINSCALEDENOM 0 be considered valid?

This is the case for all mapfiles generated by the ""Basemaps"" sub-project of MapServer (which are ~10,000 lines long), and, with a user hat on, this makes sense to me. Also, I'm for less-breaking of existing mapfiles, especially huge ones like this that we manage under our umbrella.

Ok, I get it. The min/maxscaledenom values are used to limit processing and aren't used in computations so allowing GTE 0 is ok. Should that be the consistent for web, layer, class, style and label objects? @geographika, what do you think? Easy change on my end and now's the time.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6466,2022-01-31T20:42:47Z,2022-02-01T21:02:19Z,2022-02-01T21:18:33Z,MERGED,True,98,57,3,https://github.com/sdlime,Addressed issues identified in issue #6463.,2,[],https://github.com/mapserver/mapserver/pull/6466,https://github.com/sdlime,7,https://github.com/MapServer/MapServer/pull/6466#issuecomment-1027237703,Addressed issues identified by @geographika and @jmckenna. Note I left style->angle check at 0 to 360.,"Re: 8. @jmckenna, can you check a QUERYMAP with SIZE -1 -1 - so written by an older version? That should be ok as well based on my testing.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6466,2022-01-31T20:42:47Z,2022-02-01T21:02:19Z,2022-02-01T21:18:33Z,MERGED,True,98,57,3,https://github.com/sdlime,Addressed issues identified in issue #6463.,2,[],https://github.com/mapserver/mapserver/pull/6466,https://github.com/jmckenna,8,https://github.com/MapServer/MapServer/pull/6466#issuecomment-1027238855,Addressed issues identified by @geographika and @jmckenna. Note I left style->angle check at 0 to 360.,"Ok, I get it. The min/maxscaledenom values are used to limit processing and aren't used in computations so allowing GTE 0 is ok. Should that be the consistent for web, layer, class, style and label objects? @geographika, what do you think? Easy change on my end and now's the time.

Yes I believe this should be consistent for the other scaledenoms in objects.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6466,2022-01-31T20:42:47Z,2022-02-01T21:02:19Z,2022-02-01T21:18:33Z,MERGED,True,98,57,3,https://github.com/sdlime,Addressed issues identified in issue #6463.,2,[],https://github.com/mapserver/mapserver/pull/6466,https://github.com/jmckenna,9,https://github.com/MapServer/MapServer/pull/6466#issuecomment-1027242473,Addressed issues identified by @geographika and @jmckenna. Note I left style->angle check at 0 to 360.,"Re: 8. @jmckenna, can you check a QUERYMAP with SIZE -1 -1 - so written by an older version? That should be ok as well based on my testing.

True, thanks, confirmed here that QUERYMAP SIZE -1 -1 is now accepted.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6466,2022-01-31T20:42:47Z,2022-02-01T21:02:19Z,2022-02-01T21:18:33Z,MERGED,True,98,57,3,https://github.com/sdlime,Addressed issues identified in issue #6463.,2,[],https://github.com/mapserver/mapserver/pull/6466,https://github.com/sdlime,10,https://github.com/MapServer/MapServer/pull/6466#issuecomment-1027244113,Addressed issues identified by @geographika and @jmckenna. Note I left style->angle check at 0 to 360.,"Ok, I get it. The min/maxscaledenom values are used to limit processing and aren't used in computations so allowing GTE 0 is ok. Should that be the consistent for web, layer, class, style and label objects? @geographika, what do you think? Easy change on my end and now's the time.

Yes I believe this should be consistent for the other scaledenoms in objects.

Changing to allow 0 or higher for all minx/maxscaledenom values then.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6466,2022-01-31T20:42:47Z,2022-02-01T21:02:19Z,2022-02-01T21:18:33Z,MERGED,True,98,57,3,https://github.com/sdlime,Addressed issues identified in issue #6463.,2,[],https://github.com/mapserver/mapserver/pull/6466,https://github.com/jmckenna,11,https://github.com/MapServer/MapServer/pull/6466#issuecomment-1027246259,Addressed issues identified by @geographika and @jmckenna. Note I left style->angle check at 0 to 360.,"Changing to allow 0 or higher for all minx/maxscaledenom values then.

Yes I believe so.   I think it makes sense to a user.  (staying away from technical debates though ha)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6466,2022-01-31T20:42:47Z,2022-02-01T21:02:19Z,2022-02-01T21:18:33Z,MERGED,True,98,57,3,https://github.com/sdlime,Addressed issues identified in issue #6463.,2,[],https://github.com/mapserver/mapserver/pull/6466,https://github.com/geographika,12,https://github.com/MapServer/MapServer/pull/6466#issuecomment-1027251185,Addressed issues identified by @geographika and @jmckenna. Note I left style->angle check at 0 to 360.,"Ok, I get it. The min/maxscaledenom values are used to limit processing and aren't used in computations so allowing GTE 0 is ok. Should that be the consistent for web, layer, class, style and label objects? @geographika, what do you think? Easy change on my end and now's the time

It looks like it is used in a few Mapfiles in ""the wild"" so seems a good idea to allow it. Consistency across the Mapfile objects sounds good.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6466,2022-01-31T20:42:47Z,2022-02-01T21:02:19Z,2022-02-01T21:18:33Z,MERGED,True,98,57,3,https://github.com/sdlime,Addressed issues identified in issue #6463.,2,[],https://github.com/mapserver/mapserver/pull/6466,https://github.com/geographika,13,https://github.com/MapServer/MapServer/pull/6466#issuecomment-1027297316,Addressed issues identified by @geographika and @jmckenna. Note I left style->angle check at 0 to 360.,@sdlime - docs updated in MapServer/MapServer-documentation#663 to reflect the changes here,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6468,2022-02-01T22:07:42Z,2022-02-02T19:55:42Z,2022-02-02T20:26:35Z,MERGED,True,151,0,1,https://github.com/geographika,Add negative ANGLE tests,1,[],https://github.com/mapserver/mapserver/pull/6468,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6468,"This msautotest file is identical to symbolrot.map but uses negative values. The images produced look identical (need to confirm there are no floating point issues that may require a new reference image).
This seems to confirm that a STYLE ANGLE can use negative values as discussed in #6463.
Tests will currently fail at the moment with the error loadStyle(): General error message. Invalid ANGLE, must be between 0 and 360 (line 77) <br>
@sdlime - should the validation for STYLE ANGLE allow the range -360 to 360 as with the other angles? Or is further testing required?","This msautotest file is identical to symbolrot.map but uses negative values. The images produced look identical (need to confirm there are no floating point issues that may require a new reference image).
This seems to confirm that a STYLE ANGLE can use negative values as discussed in #6463.
Tests will currently fail at the moment with the error loadStyle(): General error message. Invalid ANGLE, must be between 0 and 360 (line 77) <br>
@sdlime - should the validation for STYLE ANGLE allow the range -360 to 360 as with the other angles? Or is further testing required?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6468,2022-02-01T22:07:42Z,2022-02-02T19:55:42Z,2022-02-02T20:26:35Z,MERGED,True,151,0,1,https://github.com/geographika,Add negative ANGLE tests,1,[],https://github.com/mapserver/mapserver/pull/6468,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6468#issuecomment-1027354758,"This msautotest file is identical to symbolrot.map but uses negative values. The images produced look identical (need to confirm there are no floating point issues that may require a new reference image).
This seems to confirm that a STYLE ANGLE can use negative values as discussed in #6463.
Tests will currently fail at the moment with the error loadStyle(): General error message. Invalid ANGLE, must be between 0 and 360 (line 77) <br>
@sdlime - should the validation for STYLE ANGLE allow the range -360 to 360 as with the other angles? Or is further testing required?","@sdlime - should the validation for STYLE ANGLE allow the range -360 to 360 as with the other angles? Or is further testing required?

Seems safe enough and parity would be a good thing.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6468,2022-02-01T22:07:42Z,2022-02-02T19:55:42Z,2022-02-02T20:26:35Z,MERGED,True,151,0,1,https://github.com/geographika,Add negative ANGLE tests,1,[],https://github.com/mapserver/mapserver/pull/6468,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/6468#issuecomment-1028303936,"This msautotest file is identical to symbolrot.map but uses negative values. The images produced look identical (need to confirm there are no floating point issues that may require a new reference image).
This seems to confirm that a STYLE ANGLE can use negative values as discussed in #6463.
Tests will currently fail at the moment with the error loadStyle(): General error message. Invalid ANGLE, must be between 0 and 360 (line 77) <br>
@sdlime - should the validation for STYLE ANGLE allow the range -360 to 360 as with the other angles? Or is further testing required?","The first Travis test run failed for unrelated reasons. Second passed - so using 0 to 360 clockwise and 0 to -360 anticlockwise produce identical outputs for ANGLE in MAP, CLASS, and STYLE objects.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6468,2022-02-01T22:07:42Z,2022-02-02T19:55:42Z,2022-02-02T20:26:35Z,MERGED,True,151,0,1,https://github.com/geographika,Add negative ANGLE tests,1,[],https://github.com/mapserver/mapserver/pull/6468,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/6468#issuecomment-1028307486,"This msautotest file is identical to symbolrot.map but uses negative values. The images produced look identical (need to confirm there are no floating point issues that may require a new reference image).
This seems to confirm that a STYLE ANGLE can use negative values as discussed in #6463.
Tests will currently fail at the moment with the error loadStyle(): General error message. Invalid ANGLE, must be between 0 and 360 (line 77) <br>
@sdlime - should the validation for STYLE ANGLE allow the range -360 to 360 as with the other angles? Or is further testing required?",I suppose we should try negative angles by themselves for labels and styles. I know I tested labels independently but I don't think I tried a style.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6468,2022-02-01T22:07:42Z,2022-02-02T19:55:42Z,2022-02-02T20:26:35Z,MERGED,True,151,0,1,https://github.com/geographika,Add negative ANGLE tests,1,[],https://github.com/mapserver/mapserver/pull/6468,https://github.com/geographika,5,https://github.com/MapServer/MapServer/pull/6468#issuecomment-1028317750,"This msautotest file is identical to symbolrot.map but uses negative values. The images produced look identical (need to confirm there are no floating point issues that may require a new reference image).
This seems to confirm that a STYLE ANGLE can use negative values as discussed in #6463.
Tests will currently fail at the moment with the error loadStyle(): General error message. Invalid ANGLE, must be between 0 and 360 (line 77) <br>
@sdlime - should the validation for STYLE ANGLE allow the range -360 to 360 as with the other angles? Or is further testing required?","This test checks STYLE  ANGLE -315, and the labelrot.map tests LABEL ANGLE -45 so I think they're covered?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6468,2022-02-01T22:07:42Z,2022-02-02T19:55:42Z,2022-02-02T20:26:35Z,MERGED,True,151,0,1,https://github.com/geographika,Add negative ANGLE tests,1,[],https://github.com/mapserver/mapserver/pull/6468,https://github.com/sdlime,6,https://github.com/MapServer/MapServer/pull/6468#issuecomment-1028328209,"This msautotest file is identical to symbolrot.map but uses negative values. The images produced look identical (need to confirm there are no floating point issues that may require a new reference image).
This seems to confirm that a STYLE ANGLE can use negative values as discussed in #6463.
Tests will currently fail at the moment with the error loadStyle(): General error message. Invalid ANGLE, must be between 0 and 360 (line 77) <br>
@sdlime - should the validation for STYLE ANGLE allow the range -360 to 360 as with the other angles? Or is further testing required?","This test checks STYLE ANGLE -315, and the labelrot.map tests LABEL ANGLE -45 so I think they're covered?

But with an explicit MAP ANGLE. What happens if you remove the map angle?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6469,2022-02-01T22:32:42Z,2022-02-08T22:57:14Z,2022-02-08T22:57:20Z,MERGED,True,2526,3290,22,https://github.com/sdlime,Remove URL update functionality,8,[],https://github.com/mapserver/mapserver/pull/6469,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/6469,"This backs out URL update functionality. It's just not not as relevant as is may have been at one time. It also removes the DATAPATTERN and TEMPLATEPATTERN keywords since they are not required.
Note this initial implementation doesn't attempt to fill any gaps so 30 regression tests are failing at the moment. I'll post a subsequent comment that summarizes the failures and proposes a few targeted fixes.
See also the discussion at #6426","This backs out URL update functionality. It's just not not as relevant as is may have been at one time. It also removes the DATAPATTERN and TEMPLATEPATTERN keywords since they are not required.
Note this initial implementation doesn't attempt to fill any gaps so 30 regression tests are failing at the moment. I'll post a subsequent comment that summarizes the failures and proposes a few targeted fixes.
See also the discussion at #6426",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6469,2022-02-01T22:32:42Z,2022-02-08T22:57:14Z,2022-02-08T22:57:20Z,MERGED,True,2526,3290,22,https://github.com/sdlime,Remove URL update functionality,8,[],https://github.com/mapserver/mapserver/pull/6469,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6469#issuecomment-1028353729,"This backs out URL update functionality. It's just not not as relevant as is may have been at one time. It also removes the DATAPATTERN and TEMPLATEPATTERN keywords since they are not required.
Note this initial implementation doesn't attempt to fill any gaps so 30 regression tests are failing at the moment. I'll post a subsequent comment that summarizes the failures and proposes a few targeted fixes.
See also the discussion at #6426","Looking at the broken tests, the vast majority are for map.imagetype and map.resolution. So I would propose adding:

resolution/map.resolution/map_resolution as a vendor parameter, so it applies to CGI and WXS calls
imagetype/map.imagetype/map_imagetype as a CGI parameter only (WXS already as ""format"")

and immediately deprecating the map. and map_ versions so things can be cleaned up in subsequent versions.
There was one set of tests that also set legend KEYSIZE. Keeping that syntax is not reasonable but I can see at least a little utility in tweaking that setting so I would propose adding a vendor parameter called keysize.
There was one test that changes the legend FONT. I propose removing that test... If there is value in that functionality we could extend runsubs to the legend object and add a validation block but I don't think it's worth doing now.
Other gaps may need to be filled but these were the obvious ones. Thoughts?
--Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6469,2022-02-01T22:32:42Z,2022-02-08T22:57:14Z,2022-02-08T22:57:20Z,MERGED,True,2526,3290,22,https://github.com/sdlime,Remove URL update functionality,8,[],https://github.com/mapserver/mapserver/pull/6469,https://github.com/geographika,3,https://github.com/MapServer/MapServer/pull/6469#issuecomment-1028958977,"This backs out URL update functionality. It's just not not as relevant as is may have been at one time. It also removes the DATAPATTERN and TEMPLATEPATTERN keywords since they are not required.
Note this initial implementation doesn't attempt to fill any gaps so 30 regression tests are failing at the moment. I'll post a subsequent comment that summarizes the failures and proposes a few targeted fixes.
See also the discussion at #6426","@sdlime - the pull request is nearly all code removal, so looks good to me. I've never really used the functionality, so your suggestions for removing all updates via URLs and moving the others to named querystring parameters all sound fine to me.
I'm not sure why I didn't remove DATAPATTERN and TEMPLATEPATTERN as part of RFC 133. I can add them there for reference though.
DATA can be replaced by run-time substitution, but I don't see TEMPLATE listed there? Can it be changed by a parameter?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6469,2022-02-01T22:32:42Z,2022-02-08T22:57:14Z,2022-02-08T22:57:20Z,MERGED,True,2526,3290,22,https://github.com/sdlime,Remove URL update functionality,8,[],https://github.com/mapserver/mapserver/pull/6469,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/6469#issuecomment-1028991823,"This backs out URL update functionality. It's just not not as relevant as is may have been at one time. It also removes the DATAPATTERN and TEMPLATEPATTERN keywords since they are not required.
Note this initial implementation doesn't attempt to fill any gaps so 30 regression tests are failing at the moment. I'll post a subsequent comment that summarizes the failures and proposes a few targeted fixes.
See also the discussion at #6426","@sdlime - the pull request is nearly all code removal, so looks good to me. I've never really used the functionality, so your suggestions for removing all updates via URLs and moving the others to named querystring parameters all sound fine to me.
I'm not sure why I didn't remove DATAPATTERN and TEMPLATEPATTERN as part of RFC 133. I can add them there for reference though.
DATA can be replaced by run-time substitution, but I don't see TEMPLATE listed there? Can it be changed by a parameter?

We'll likely need to expand run-time substitution a little - web->template would be one, layer->mask is another (there was a user request for that one). I was planning on adding those as a commit to this pull request.",True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6469,2022-02-01T22:32:42Z,2022-02-08T22:57:14Z,2022-02-08T22:57:20Z,MERGED,True,2526,3290,22,https://github.com/sdlime,Remove URL update functionality,8,[],https://github.com/mapserver/mapserver/pull/6469,https://github.com/sdlime,5,https://github.com/MapServer/MapServer/pull/6469#issuecomment-1032131210,"This backs out URL update functionality. It's just not not as relevant as is may have been at one time. It also removes the DATAPATTERN and TEMPLATEPATTERN keywords since they are not required.
Note this initial implementation doesn't attempt to fill any gaps so 30 regression tests are failing at the moment. I'll post a subsequent comment that summarizes the failures and proposes a few targeted fixes.
See also the discussion at #6426","IMHO this is ready for review. Need a little additional test coverage:

imagetype allows an optional regex to limit or even turn off that parameter
bad values
layer mask runsub

Otherwise most of this was already covered in tests. Note that I did not enable runsub for a web template. It's more involved and I'm not sure it's worth it since that is used for mode=browse and that's not all that common anymore.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6469,2022-02-01T22:32:42Z,2022-02-08T22:57:14Z,2022-02-08T22:57:20Z,MERGED,True,2526,3290,22,https://github.com/sdlime,Remove URL update functionality,8,[],https://github.com/mapserver/mapserver/pull/6469,https://github.com/geographika,6,https://github.com/MapServer/MapServer/pull/6469#issuecomment-1032328878,"This backs out URL update functionality. It's just not not as relevant as is may have been at one time. It also removes the DATAPATTERN and TEMPLATEPATTERN keywords since they are not required.
Note this initial implementation doesn't attempt to fill any gaps so 30 regression tests are failing at the moment. I'll post a subsequent comment that summarizes the failures and proposes a few targeted fixes.
See also the discussion at #6426","@sdlime - I read through all the changes, and look good to me. Would the following be accurate?
Any querystring parameters in the commonLoadForm function can be used when both in CGI mode and when using OWS services (WMS, WFS etc.).
The following can be sent via the querystring (all values are case-insensitive):

KEYSIZE - e.g. &keysize=10 10 split by spaces (or URL-encoded spaces). Both width and height must be within the range MS_LEGEND_KEYSIZE_MIN and MS_LEGEND_KEYSIZE_MAX
CLASSGROUP - this sets the classgroup for all layers in the map - see #4207
MAP.EXTENT or MAP_EXTENT - e.g. map_extent=0 0 100 100 split by spaces (or URL-encoded spaces). These may be replaced by a Vendor parameter EXTENT in the future.
MAP.RESOLUTION or MAP_RESOLUTION (within MS_RESOLUTION_MIN MS_RESOLUTION_MAX boundaries) RESOLUTION can't be used here as it has a conflict with a WCS keyword.

What happens if these keywords are also used for runtime subsitution? Do they apply to both the Mapfile changes above and as replacements (e.g. what happens if %KEYSIZE% is used in a LAYER DATA clause?
Hopefully it applies to both cases?
msCGILoadForm allows lots of other querystring parameters to be used, but only the following modify the Mapfile:

RESOLUTION (within MS_RESOLUTION_MIN MS_RESOLUTION_MAX boundaries)
IMAGETYPE, MAP.IMAGETYPE and MAP_IMAGETYPE.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6469,2022-02-01T22:32:42Z,2022-02-08T22:57:14Z,2022-02-08T22:57:20Z,MERGED,True,2526,3290,22,https://github.com/sdlime,Remove URL update functionality,8,[],https://github.com/mapserver/mapserver/pull/6469,https://github.com/sdlime,7,https://github.com/MapServer/MapServer/pull/6469#issuecomment-1032766572,"This backs out URL update functionality. It's just not not as relevant as is may have been at one time. It also removes the DATAPATTERN and TEMPLATEPATTERN keywords since they are not required.
Note this initial implementation doesn't attempt to fill any gaps so 30 regression tests are failing at the moment. I'll post a subsequent comment that summarizes the failures and proposes a few targeted fixes.
See also the discussion at #6426","@sdlime - I read through all the changes, and look good to me. Would the following be accurate?

I think so, yes.

What happens if these keywords are also used for runtime subsitution? Do they apply to both the Mapfile changes above and as replacements (e.g. what happens if %KEYSIZE% is used in a LAYER DATA clause? Hopefully it applies to both cases?

Yes, they apply in both cases. Note that KEYSIZE as interpreted as a parameter is subject to different validation rules (e.g. min/max key size values).  When used as part of a runsub it would be subject to a regex validation rule and treated as a single string. Runsub treats all the params the same, as strings subject to a specific regex validation rule.",True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6470,2022-02-01T22:58:24Z,2022-02-02T13:45:20Z,2022-02-02T13:45:20Z,MERGED,True,2,2,1,https://github.com/geographika,Allow negative angles for STYLE,1,[],https://github.com/mapserver/mapserver/pull/6470,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6470,See #6468 - allow STLYE ANGLE to be between -360 and 360 to allow clockwise and anti-clockwise values (supported by current codebase).,See #6468 - allow STLYE ANGLE to be between -360 and 360 to allow clockwise and anti-clockwise values (supported by current codebase).,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6472,2022-02-03T14:02:31Z,2022-02-16T16:36:32Z,2022-02-16T16:36:33Z,MERGED,True,46,0,3,https://github.com/PatrikSylve,Reproject layer extent when changing layer projection,2,[],https://github.com/mapserver/mapserver/pull/6472,https://github.com/PatrikSylve,1,https://github.com/MapServer/MapServer/pull/6472,"Hi, I encountered a case when requesting a layer with CONNECTIONTYPE WMS would be ignored.
In my case, I requested the data in EPSG:3857, and the requested layer's default projection was EPSG:4326. When mapserver was building the WMS url, it would change the projection of the layer object to match the requested SRS 3857 but leave the EXTENT unchanged.  When the image response had been fetched, it was ignored in the final response as it didn't pass the extent check in  msLayerIsVisible.
This change will reproject the layer objects extent to match the layers assigned projection.","Hi, I encountered a case when requesting a layer with CONNECTIONTYPE WMS would be ignored.
In my case, I requested the data in EPSG:3857, and the requested layer's default projection was EPSG:4326. When mapserver was building the WMS url, it would change the projection of the layer object to match the requested SRS 3857 but leave the EXTENT unchanged.  When the image response had been fetched, it was ignored in the final response as it didn't pass the extent check in  msLayerIsVisible.
This change will reproject the layer objects extent to match the layers assigned projection.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6472,2022-02-03T14:02:31Z,2022-02-16T16:36:32Z,2022-02-16T16:36:33Z,MERGED,True,46,0,3,https://github.com/PatrikSylve,Reproject layer extent when changing layer projection,2,[],https://github.com/mapserver/mapserver/pull/6472,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/6472#issuecomment-1036316831,"Hi, I encountered a case when requesting a layer with CONNECTIONTYPE WMS would be ignored.
In my case, I requested the data in EPSG:3857, and the requested layer's default projection was EPSG:4326. When mapserver was building the WMS url, it would change the projection of the layer object to match the requested SRS 3857 but leave the EXTENT unchanged.  When the image response had been fetched, it was ignored in the final response as it didn't pass the extent check in  msLayerIsVisible.
This change will reproject the layer objects extent to match the layers assigned projection.","@PatrikSylve - the change seems to make sense to me. Do you have an example of the layer configuration / Mapfile and WMS request parameters that show the issue?
Ideally a test could be added to show this is failing and then fixed with the test. This test could be adapted?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6472,2022-02-03T14:02:31Z,2022-02-16T16:36:32Z,2022-02-16T16:36:33Z,MERGED,True,46,0,3,https://github.com/PatrikSylve,Reproject layer extent when changing layer projection,2,[],https://github.com/mapserver/mapserver/pull/6472,https://github.com/PatrikSylve,3,https://github.com/MapServer/MapServer/pull/6472#issuecomment-1041820327,"Hi, I encountered a case when requesting a layer with CONNECTIONTYPE WMS would be ignored.
In my case, I requested the data in EPSG:3857, and the requested layer's default projection was EPSG:4326. When mapserver was building the WMS url, it would change the projection of the layer object to match the requested SRS 3857 but leave the EXTENT unchanged.  When the image response had been fetched, it was ignored in the final response as it didn't pass the extent check in  msLayerIsVisible.
This change will reproject the layer objects extent to match the layers assigned projection.","@PatrikSylve - the change seems to make sense to me. Do you have an example of the layer configuration / Mapfile and WMS request parameters that show the issue?
Ideally a test could be added to show this is failing and then fixed with the test. This test could be adapted?

Added a test case now that will output an empty image without the fix.",True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6472,2022-02-03T14:02:31Z,2022-02-16T16:36:32Z,2022-02-16T16:36:33Z,MERGED,True,46,0,3,https://github.com/PatrikSylve,Reproject layer extent when changing layer projection,2,[],https://github.com/mapserver/mapserver/pull/6472,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/6472#issuecomment-1041828768,"Hi, I encountered a case when requesting a layer with CONNECTIONTYPE WMS would be ignored.
In my case, I requested the data in EPSG:3857, and the requested layer's default projection was EPSG:4326. When mapserver was building the WMS url, it would change the projection of the layer object to match the requested SRS 3857 but leave the EXTENT unchanged.  When the image response had been fetched, it was ignored in the final response as it didn't pass the extent check in  msLayerIsVisible.
This change will reproject the layer objects extent to match the layers assigned projection.","Added a test case now that will output an empty image without the fix.

Nice test, and glad to see demo.mapserver.org services used here.  Thanks!",True,{'THUMBS_UP': ['https://github.com/PatrikSylve']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6472,2022-02-03T14:02:31Z,2022-02-16T16:36:32Z,2022-02-16T16:36:33Z,MERGED,True,46,0,3,https://github.com/PatrikSylve,Reproject layer extent when changing layer projection,2,[],https://github.com/mapserver/mapserver/pull/6472,https://github.com/geographika,5,https://github.com/MapServer/MapServer/pull/6472#issuecomment-1041850060,"Hi, I encountered a case when requesting a layer with CONNECTIONTYPE WMS would be ignored.
In my case, I requested the data in EPSG:3857, and the requested layer's default projection was EPSG:4326. When mapserver was building the WMS url, it would change the projection of the layer object to match the requested SRS 3857 but leave the EXTENT unchanged.  When the image response had been fetched, it was ignored in the final response as it didn't pass the extent check in  msLayerIsVisible.
This change will reproject the layer objects extent to match the layers assigned projection.",+1 from me on merging.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6472,2022-02-03T14:02:31Z,2022-02-16T16:36:32Z,2022-02-16T16:36:33Z,MERGED,True,46,0,3,https://github.com/PatrikSylve,Reproject layer extent when changing layer projection,2,[],https://github.com/mapserver/mapserver/pull/6472,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/6472#issuecomment-1041856489,"Hi, I encountered a case when requesting a layer with CONNECTIONTYPE WMS would be ignored.
In my case, I requested the data in EPSG:3857, and the requested layer's default projection was EPSG:4326. When mapserver was building the WMS url, it would change the projection of the layer object to match the requested SRS 3857 but leave the EXTENT unchanged.  When the image response had been fetched, it was ignored in the final response as it didn't pass the extent check in  msLayerIsVisible.
This change will reproject the layer objects extent to match the layers assigned projection.",same here.  Let's give it a go...   Great catch @PatrikSylve !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6474,2022-02-08T19:46:37Z,2022-02-09T13:54:24Z,2022-02-09T13:54:24Z,MERGED,True,1,1,1,https://github.com/jmckenna,minor fix for writing PostgreSQL JOIN through mapscript,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6474,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6474,reported by @stephanesaurel through #6473,reported by @stephanesaurel through #6473,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6475,2022-02-09T03:21:54Z,2022-02-11T14:11:23Z,2022-02-11T14:11:31Z,MERGED,True,61,12,9,https://github.com/sdlime,Additional fixes and tests for OGC API support.,5,[],https://github.com/mapserver/mapserver/pull/6475,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/6475,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6475,2022-02-09T03:21:54Z,2022-02-11T14:11:23Z,2022-02-11T14:11:31Z,MERGED,True,61,12,9,https://github.com/sdlime,Additional fixes and tests for OGC API support.,5,[],https://github.com/mapserver/mapserver/pull/6475,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6475#issuecomment-1035718598,,"The ogcapi_invalid_mapfile.txt uncovers a memory leak:
######################################
# api => ogcapi_invalid_mapfile.txt.asan.txt
######################################
=================================================================
==17271==ERROR: LeakSanitizer: detected memory leaks
Direct leak of 9512 byte(s) in 1 object(s) allocated from:
    #0 0x7f594d486d28 in __interceptor_calloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xded28)
    #1 0x7f594c4e434d in msLoadMap /home/travis/build/MapServer/MapServer/mapfile.c:6202
    #2 0x7f594c1cf7cf in msCGILoadMap /home/travis/build/MapServer/MapServer/mapservutil.c:215
    #3 0x55594ac7ffda in main /home/travis/build/MapServer/MapServer/mapserv.c:264
    #4 0x7f594b266bf6 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21bf6)


Found it. Also fixed a couple of spots in XML mapfile support where errors are set but there's little clean up. I'm not familiar with that support but it seems like an omission.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6476,2022-02-09T13:54:48Z,2022-02-09T19:18:42Z,2022-02-09T19:18:43Z,MERGED,True,1,1,1,https://github.com/apps/github-actions,[Backport branch-7-6] minor fix for writing PostgreSQL JOIN through mapscript,1,[],https://github.com/mapserver/mapserver/pull/6476,https://github.com/apps/github-actions,1,https://github.com/MapServer/MapServer/pull/6476,"Backport #6474
Authored by: @jmckenna","Backport #6474
Authored by: @jmckenna",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6477,2022-02-12T19:18:22Z,2022-02-13T10:37:29Z,2022-02-14T15:56:18Z,MERGED,True,30,5,4,https://github.com/rouault,EnablePaging methods: check return of Open() method to avoid assertions,1,[],https://github.com/mapserver/mapserver/pull/6477,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6477,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6477,2022-02-12T19:18:22Z,2022-02-13T10:37:29Z,2022-02-14T15:56:18Z,MERGED,True,30,5,4,https://github.com/rouault,EnablePaging methods: check return of Open() method to avoid assertions,1,[],https://github.com/mapserver/mapserver/pull/6477,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6477#issuecomment-1039158880,,"@rouault, should this be backported to 7.6?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6477,2022-02-12T19:18:22Z,2022-02-13T10:37:29Z,2022-02-14T15:56:18Z,MERGED,True,30,5,4,https://github.com/rouault,EnablePaging methods: check return of Open() method to avoid assertions,1,[],https://github.com/mapserver/mapserver/pull/6477,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6477#issuecomment-1039242744,,"@sdlime we may need a 7.6.5 release, if my hunch is correct of major PROJ >=6 issues being recently discovered, so I think we should backport.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6477,2022-02-12T19:18:22Z,2022-02-13T10:37:29Z,2022-02-14T15:56:18Z,MERGED,True,30,5,4,https://github.com/rouault,EnablePaging methods: check return of Open() method to avoid assertions,1,[],https://github.com/mapserver/mapserver/pull/6477,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/6477#issuecomment-1039253017,,"should this be backported to 7.6?

I've just done it (6076739)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6479,2022-02-14T20:20:57Z,2022-02-16T18:40:01Z,2022-02-16T18:40:27Z,MERGED,True,92,6,2,https://github.com/rouault,msProjectRect(): fix PROJ >= 6 when datum shift is involved (fixes #6478),3,"['backport branch-7-6', 'failed backport']",https://github.com/mapserver/mapserver/pull/6479,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6479,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6479,2022-02-14T20:20:57Z,2022-02-16T18:40:01Z,2022-02-16T18:40:27Z,MERGED,True,92,6,2,https://github.com/rouault,msProjectRect(): fix PROJ >= 6 when datum shift is involved (fixes #6478),3,"['backport branch-7-6', 'failed backport']",https://github.com/mapserver/mapserver/pull/6479,https://github.com/apps/github-actions,2,https://github.com/MapServer/MapServer/pull/6479#issuecomment-1042009644,,"The backport to branch-7-6 failed:
The process '/usr/bin/git' failed with exit code 1


stderr
error: could not apply 713fbd1e1... msautotest: add test for #6478
hint: After resolving the conflicts, mark them with
hint: ""git add/rm <pathspec>"", then run
hint: ""git cherry-pick --continue"".
hint: You can instead skip this commit with ""git cherry-pick --skip"".
hint: To abort and get back to the state before ""git cherry-pick"",
hint: run ""git cherry-pick --abort"".




stdout
Auto-merging mapproject.c
[backport-6479-to-branch-7-6 419320c1d] msProjectRect(): fix to deal with +over added, assuming https://github.com/OSGeo/PROJ/pull/3055 applied (PROJ 9) (fixes #6478)
 Author: Even Rouault <even.rouault@spatialys.com>
 Date: Mon Feb 14 20:41:59 2022 +0100
 1 file changed, 50 insertions(+), 4 deletions(-)
Auto-merging mapproject.c
[backport-6479-to-branch-7-6 3c15dac8b] msProjectRect(): workaround for issue of #6478 for PROJ >= 6 and < 9 (fixes #6478)
 Author: Even Rouault <even.rouault@spatialys.com>
 Date: Mon Feb 14 21:05:34 2022 +0100
 1 file changed, 21 insertions(+), 2 deletions(-)
Auto-merging msautotest/mspython/test_bug_check.py
CONFLICT (content): Merge conflict in msautotest/mspython/test_bug_check.py



To backport manually, run these commands in your terminal:
# Fetch latest updates from GitHub
git fetch
# Create a new working tree
git worktree add .worktrees/backport-branch-7-6 branch-7-6
# Navigate to the new working tree
cd .worktrees/backport-branch-7-6
# Create a new branch
git switch --create backport-6479-to-branch-7-6
# Cherry-pick the merged commit of this pull request and resolve the conflicts
git cherry-pick 73fd033625cfb747e1349da8c67389d6c4aa3fc1,5055d407865c8b0a7136c443d2ace4a922c4774d,713fbd1e1c3cc91a0f4ca1dba77f066258389b55
# Push it to GitHub
git push --set-upstream origin backport-6479-to-branch-7-6
# Go back to the original working tree
cd ../..
# Delete the working tree
git worktree remove .worktrees/backport-branch-7-6
Then, create a pull request where the base branch is branch-7-6 and the compare/head branch is backport-6479-to-branch-7-6.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6480,2022-02-16T01:09:51Z,2022-02-25T16:52:06Z,2022-03-03T21:29:50Z,MERGED,True,243,11,38,https://github.com/sdlime,Added series of configuration file tests...,9,[],https://github.com/mapserver/mapserver/pull/6480,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/6480,Much easier once @rouault added the -conf option. Fixed one issue uncovered by the tests.,Much easier once @rouault added the -conf option. Fixed one issue uncovered by the tests.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6480,2022-02-16T01:09:51Z,2022-02-25T16:52:06Z,2022-03-03T21:29:50Z,MERGED,True,243,11,38,https://github.com/sdlime,Added series of configuration file tests...,9,[],https://github.com/mapserver/mapserver/pull/6480,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6480#issuecomment-1041747398,Much easier once @rouault added the -conf option. Fixed one issue uncovered by the tests.,"I agree, having a specific error message for MS_MAP_PATTERN is needed.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6480,2022-02-16T01:09:51Z,2022-02-25T16:52:06Z,2022-03-03T21:29:50Z,MERGED,True,243,11,38,https://github.com/sdlime,Added series of configuration file tests...,9,[],https://github.com/mapserver/mapserver/pull/6480,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/6480#issuecomment-1041842153,Much easier once @rouault added the -conf option. Fixed one issue uncovered by the tests.,"""config"" should be added to the testpaths variable of msautotest/pytest.ini There should be also a ""config-testcase"" target similar to existing ""XXXX-testcase"" targets in top Makefile

Duh, forgot that bit. I think I have things right but am running to the error below. I did copy the api directory to start building the tests but don't see any references to those tests in the config directory. I did follow the cleanup HINT but no luck.
vagrant@mapserver-vagrant:/vagrant/msautotest$ pytest
Test session starts (platform: linux2, Python 2.7.17, pytest 4.6.11, pytest-sugar 0.9.4)
rootdir: /vagrant/msautotest, inifile: pytest.ini, testpaths: config, api, misc, gdal, query, renderers, wxs, sld, mspython
plugins: env-0.6.2, sugar-0.9.4
collecting ... 
―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― ERROR collecting api/run_test.py ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
import file mismatch:
imported module 'run_test' has this __file__ attribute:
  /vagrant/msautotest/config/run_test.py
which is not the same as the test file we want to collect:
  /vagrant/msautotest/api/run_test.py
HINT: remove __pycache__ / .pyc files and/or use a unique basename for your test file modules

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 errors during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Results (50.06s):",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6480,2022-02-16T01:09:51Z,2022-02-25T16:52:06Z,2022-03-03T21:29:50Z,MERGED,True,243,11,38,https://github.com/sdlime,Added series of configuration file tests...,9,[],https://github.com/mapserver/mapserver/pull/6480,https://github.com/rouault,4,https://github.com/MapServer/MapServer/pull/6480#issuecomment-1041851333,Much easier once @rouault added the -conf option. Fixed one issue uncovered by the tests.,"I think I have things right but am running to the error below.

yes, I 've hit that too and it was related to vagrant using python2. I see have python3 installed and running it. try ""apt install python3-dev; pip3 install pytest""",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6480,2022-02-16T01:09:51Z,2022-02-25T16:52:06Z,2022-03-03T21:29:50Z,MERGED,True,243,11,38,https://github.com/sdlime,Added series of configuration file tests...,9,[],https://github.com/mapserver/mapserver/pull/6480,https://github.com/sdlime,5,https://github.com/MapServer/MapServer/pull/6480#issuecomment-1042009128,Much easier once @rouault added the -conf option. Fixed one issue uncovered by the tests.,"apt install python3-dev; pip3 install pytest

No go... same error and some new warnings.
vagrant@mapserver-vagrant:/vagrant/msautotest$ pytest
===================================================================== test session starts =====================================================================
platform linux -- Python 3.6.9, pytest-7.0.1, pluggy-1.0.0
rootdir: /vagrant/msautotest, configfile: pytest.ini, testpaths: config, api, misc, gdal, query, renderers, wxs, sld, mspython
collected 2422 items / 1 error / 2421 selected                                                                                                                

=========================================================================== ERRORS ============================================================================
______________________________________________________________ ERROR collecting api/run_test.py _______________________________________________________________
import file mismatch:
imported module 'run_test' has this __file__ attribute:
  /vagrant/msautotest/config/run_test.py
which is not the same as the test file we want to collect:
  /vagrant/msautotest/api/run_test.py
HINT: remove __pycache__ / .pyc files and/or use a unique basename for your test file modules
====================================================================== warnings summary =======================================================================
../../usr/local/lib/python3.6/dist-packages/_pytest/config/__init__.py:1249
  /usr/local/lib/python3.6/dist-packages/_pytest/config/__init__.py:1249: PytestConfigWarning: Unknown config option: env
  
    self._warn_or_fail_if_strict(f""Unknown config option: {key}\n"")

../../usr/local/lib/python3.6/dist-packages/_pytest/assertion/rewrite.py:171
  /usr/local/lib/python3.6/dist-packages/_pytest/assertion/rewrite.py:171: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
    exec(co, module.__dict__)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=================================================================== short test summary info ===================================================================
ERROR api/run_test.py
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
================================================================ 2 warnings, 1 error in 23.92s ================================================================",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6480,2022-02-16T01:09:51Z,2022-02-25T16:52:06Z,2022-03-03T21:29:50Z,MERGED,True,243,11,38,https://github.com/sdlime,Added series of configuration file tests...,9,[],https://github.com/mapserver/mapserver/pull/6480,https://github.com/rouault,6,https://github.com/MapServer/MapServer/pull/6480#issuecomment-1042014717,Much easier once @rouault added the -conf option. Fixed one issue uncovered by the tests.,are you really sure you have removed all __pycache__ directories ?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6480,2022-02-16T01:09:51Z,2022-02-25T16:52:06Z,2022-03-03T21:29:50Z,MERGED,True,243,11,38,https://github.com/sdlime,Added series of configuration file tests...,9,[],https://github.com/mapserver/mapserver/pull/6480,https://github.com/sdlime,7,https://github.com/MapServer/MapServer/pull/6480#issuecomment-1042098471,Much easier once @rouault added the -conf option. Fixed one issue uncovered by the tests.,"are you really sure you have removed all __pycache__ directories ?

A very reasonable question but yes. ;-) With python3 and pytest 7.0.1 most of the tests now fail because config file env variable setting isn't working. Looks like I need to undo some of this.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6480,2022-02-16T01:09:51Z,2022-02-25T16:52:06Z,2022-03-03T21:29:50Z,MERGED,True,243,11,38,https://github.com/sdlime,Added series of configuration file tests...,9,[],https://github.com/mapserver/mapserver/pull/6480,https://github.com/sdlime,8,https://github.com/MapServer/MapServer/pull/6480#issuecomment-1042406511,Much easier once @rouault added the -conf option. Fixed one issue uncovered by the tests.,"are you really sure you have removed all __pycache__ directories ?

A very reasonable question but yes. ;-) With python3 and pytest 7.0.1 most of the tests now fail because config file env variable setting isn't working. Looks like I need to undo some of this.

Created a new vagrant machine and still run into the same issue locally. Not sure how to fix... At least the tests pass though.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6480,2022-02-16T01:09:51Z,2022-02-25T16:52:06Z,2022-03-03T21:29:50Z,MERGED,True,243,11,38,https://github.com/sdlime,Added series of configuration file tests...,9,[],https://github.com/mapserver/mapserver/pull/6480,https://github.com/geographika,9,https://github.com/MapServer/MapServer/pull/6480#issuecomment-1046271172,Much easier once @rouault added the -conf option. Fixed one issue uncovered by the tests.,"@sdlime - to avoid the imported module 'run_test' has this __file__ attribute errors add an empty __init__.py file to the new config and api directories, similar to the one in the gdal folder: https://github.com/MapServer/MapServer/blob/main/msautotest/gdal/__init__.py
For info on Windows (and for both main and this branch) I'm getting Segmentation fault or other serious error errors for most of the tests (2227 failed and 210 passed). These were passing previously on Windows/vagrant (within the last year). It could be a local issue so will investigate further.
@rouault  - would it make sense to update the Vagrantfile to install and use Python3?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6480,2022-02-16T01:09:51Z,2022-02-25T16:52:06Z,2022-03-03T21:29:50Z,MERGED,True,243,11,38,https://github.com/sdlime,Added series of configuration file tests...,9,[],https://github.com/mapserver/mapserver/pull/6480,https://github.com/rouault,10,https://github.com/MapServer/MapServer/pull/6480#issuecomment-1046300829,Much easier once @rouault added the -conf option. Fixed one issue uncovered by the tests.,"would it make sense to update the Vagrantfile to install and use Python3?

would be a good idea",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6480,2022-02-16T01:09:51Z,2022-02-25T16:52:06Z,2022-03-03T21:29:50Z,MERGED,True,243,11,38,https://github.com/sdlime,Added series of configuration file tests...,9,[],https://github.com/mapserver/mapserver/pull/6480,https://github.com/geographika,11,https://github.com/MapServer/MapServer/pull/6480#issuecomment-1046319415,Much easier once @rouault added the -conf option. Fixed one issue uncovered by the tests.,Defaulting vagrant to Python3 is added in #6483,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6480,2022-02-16T01:09:51Z,2022-02-25T16:52:06Z,2022-03-03T21:29:50Z,MERGED,True,243,11,38,https://github.com/sdlime,Added series of configuration file tests...,9,[],https://github.com/mapserver/mapserver/pull/6480,https://github.com/geographika,12,https://github.com/MapServer/MapServer/pull/6480#issuecomment-1046320450,Much easier once @rouault added the -conf option. Fixed one issue uncovered by the tests.,"For info on Windows (and for both main and this branch) I'm getting Segmentation fault or other serious error errors for most of the tests (2227 failed and 210 passed). These were passing previously on Windows/vagrant (within the last year). It could be a local issue so will investigate further.

Most of these were resolved by ensuring all sourcecode and tests were using LF. There were still the following that caused the Segmentation fault or other serious error errors:
         - renderers/run_test.py:39 test[point_pixmap_point_pixmap_png]
         - renderers/run_test.py:39 test[point_pixmap_point_pixmap_pdf]
         - renderers/run_test.py:39 test[point_pixmap_point_pixmap_svg]
         - renderers/run_test.py:39 test[point_pixmap_point_pixmap_json]
         - renderers/run_test.py:39 test[point_pixmap_point_pixmap_cairo_png]",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6480,2022-02-16T01:09:51Z,2022-02-25T16:52:06Z,2022-03-03T21:29:50Z,MERGED,True,243,11,38,https://github.com/sdlime,Added series of configuration file tests...,9,[],https://github.com/mapserver/mapserver/pull/6480,https://github.com/sdlime,13,https://github.com/MapServer/MapServer/pull/6480#issuecomment-1047857828,Much easier once @rouault added the -conf option. Fixed one issue uncovered by the tests.,"For info on Windows (and for both main and this branch) I'm getting Segmentation fault or other serious error errors for most of the tests (2227 failed and 210 passed). These were passing previously on Windows/vagrant (within the last year). It could be a local issue so will investigate further.

That was also my experience when updating to Python3 locally in vagrant.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6480,2022-02-16T01:09:51Z,2022-02-25T16:52:06Z,2022-03-03T21:29:50Z,MERGED,True,243,11,38,https://github.com/sdlime,Added series of configuration file tests...,9,[],https://github.com/mapserver/mapserver/pull/6480,https://github.com/geographika,14,https://github.com/MapServer/MapServer/pull/6480#issuecomment-1048067840,Much easier once @rouault added the -conf option. Fixed one issue uncovered by the tests.,"That was also my experience when updating to Python3 locally in vagrant.

Oh..I was hoping it was just me and/or Vagrant on Windows.
Would adding the Vagrant to a CI build make any sense? It could be useful to ensure it is still working. I presume there must be an issue with a dependency, so maybe the scripts used on Travis could also be used to provision Vagrant?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6480,2022-02-16T01:09:51Z,2022-02-25T16:52:06Z,2022-03-03T21:29:50Z,MERGED,True,243,11,38,https://github.com/sdlime,Added series of configuration file tests...,9,[],https://github.com/mapserver/mapserver/pull/6480,https://github.com/jmckenna,15,https://github.com/MapServer/MapServer/pull/6480#issuecomment-1048173871,Much easier once @rouault added the -conf option. Fixed one issue uncovered by the tests.,@sdlime give me until tomorrow to test this (I was busy upgrading my environment for the next round of tests here).,True,{'THUMBS_UP': ['https://github.com/sdlime']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6480,2022-02-16T01:09:51Z,2022-02-25T16:52:06Z,2022-03-03T21:29:50Z,MERGED,True,243,11,38,https://github.com/sdlime,Added series of configuration file tests...,9,[],https://github.com/mapserver/mapserver/pull/6480,https://github.com/sdlime,16,https://github.com/MapServer/MapServer/pull/6480#issuecomment-1049876596,Much easier once @rouault added the -conf option. Fixed one issue uncovered by the tests.,"@jmckenna, @rouault, @geographika - ok to merge?",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6480,2022-02-16T01:09:51Z,2022-02-25T16:52:06Z,2022-03-03T21:29:50Z,MERGED,True,243,11,38,https://github.com/sdlime,Added series of configuration file tests...,9,[],https://github.com/mapserver/mapserver/pull/6480,https://github.com/jmckenna,17,https://github.com/MapServer/MapServer/pull/6480#issuecomment-1049880155,Much easier once @rouault added the -conf option. Fixed one issue uncovered by the tests.,"no not yet, last night ran into problems, again likely my environment....tackling again this morning...",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6480,2022-02-16T01:09:51Z,2022-02-25T16:52:06Z,2022-03-03T21:29:50Z,MERGED,True,243,11,38,https://github.com/sdlime,Added series of configuration file tests...,9,[],https://github.com/mapserver/mapserver/pull/6480,https://github.com/sdlime,18,https://github.com/MapServer/MapServer/pull/6480#issuecomment-1050995277,Much easier once @rouault added the -conf option. Fixed one issue uncovered by the tests.,"So you're comments are more general than the tests specifically but that's ok. I think we're good to merge though...

Feedback on Windows tests:
mapserv -v

does not return any error when no config file is set, or if an invalid config is set (I believe this should cause an error here, otherwise the user will be very confused later to see error messages through the web server)  It is especially important to throw the error here, as the old trick mapserv -nh QUERY_STRING= is so often used to debug issues, well the first thing to debug is going to be always ""do you have the proper config set"" (in MapServer 8+)


We talked about this previously. I think it's working as it should. I mean just checking the version shouldn't generate an error. Note that @rouault added a -conf option to mapserv and map2img that makes debugging much easier and actually facilitated these tests.

map2img (no config set)

does return the error, but also still generates the map image:
   Cannot open configuration file ms4w.conf.
   msLoadConfig(): Unable to access file. See mapserver.org/config_file.html for more information.
   msDrawMap(): rendering using outputformat named png (AGG/PNG).
   msDrawMap(): WMS/WFS set-up and query, 0.000s
   msDrawMap(): Layer 0 (ocean), 0.035s
   msDrawMap(): Layer 1 (countries), 0.019s
   msDrawMap(): Layer 2 (lakes), 0.010s
   msDrawMap(): Layer 3 (ocean-labels), 0.011s
   msDrawMap(): Drawing Label Cache, 0.002s
   msDrawMap() total time: 0.079s
   msSaveImage(ttt.png) total time: 0.009s




A config file is only required for CGI requests. I don't see that error message. So you must have an environment variable set that is referencing ms4w.conf.

map2img (invalid config set)

does return the error, but also still generates the map image:
   Cannot open configuration file ms4w.conf.
   msLoadConfig(): Unknown identifier. Parsing error near (INVALID):(line 59)
   msDrawMap(): rendering using outputformat named png (AGG/PNG).
   msDrawMap(): WMS/WFS set-up and query, 0.000s
   msDrawMap(): Layer 0 (ocean), 0.035s
   msDrawMap(): Layer 1 (countries), 0.019s
   msDrawMap(): Layer 2 (lakes), 0.010s
   msDrawMap(): Layer 3 (ocean-labels), 0.011s
   msDrawMap(): Drawing Label Cache, 0.002s
   msDrawMap() total time: 0.079s
   msSaveImage(ttt.png) total time: 0.009s




Same as above.

MS_MAP_PATTERN not set

it is confusing here what should happen if I only set the MS_MAP_BAD_PATTERN environment variable.  I would have thought that only one of MS_MAP_BAD_PATTERN or MS_MAP_PATTERN is required.  Am I correct?


No, you need both. They work together...

MS_MAP_BAD_PATTERN ""false""
This worked with the main branch (around Christmas time), and was a savior (to avoid the pattern utter chaos, and keep my sanity). This no longer works with this branch. Previously, the map was displayed in the web browser. Now: Required configuration value MS_MAP_PATTERN not set

MS_MAP_PATTERN is required and now you're properly seeing that error. I fixed a logic issue via this pull request. You can still essentially disable MS_MAP_BAD_PATTERN this way but then it's on the user to write a more complete MS_MAP_PATTERN.

MS_MAP_PATTERN set

oh my, was this so confusing. I was only setting MS_MAP_PATTERN, and no matter what I did (invalid expressions, etc etc setting the env variables in the conf file versus through web browser etc etc) I only saw this message CGI variable ""map"" fails to validate. (there was no Regular expression error. Failed to compile expression.., I felt like I must be going crazy, and wasted several days of effort on this).  In fact, if you only set MS_MAP_PATTERN, no matter how good your regex expression skills are, or how many online test sites you use for validating your expression, or how many days you spend on this, you will only see in your browser the plain message  CGI variable ""map"" fails to validate. and you will bang your head for days.  In bold I write now, you must set both environment variables MS_MAP_PATTERN and MS_MAP_BAD_PATTERN for all of this logic to work (end of bold)   Oh my.   Onwards.


It's not that bad... MS_MAP_BAD_PATTERN makes it possible to write simple MS_MAP_PATTERN expressions. Since it disallows back references you can just write something simple like MS_MAP_PATTERN ""^/opt/mapserver"". @szekerest talked about perhaps using OS-specific bad patterns, which might make sense...

MS_NO_VERSION ""1""

has no effect on mapserv -v
works well in web browser (mapserv version info is not displayed through a WMS GetCapabilities request in browser)


Yup, it's working as expected then - thanks for verifying.

MS_MAP_NO_PATH ""1""

the error message in the web browser mostly makes sense (well I did set map=, so the first part of message is incorrect, but the second part of message is correct) : CGI variable ""map"" not found in configuration and this server is not configured for full paths


IMHO this should be the preferred method of specifying a map - you avoid all the regex issues.

MS_NO_POST ""1""

I can't seem to trigger this (with curl)


There is a test to demonstrate it works. You can also add that option to msautotest/etc/mapserver.conf and run the test suite - you'll see all the POST tests fail.

PS. my brain hurts

Sorry.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6480,2022-02-16T01:09:51Z,2022-02-25T16:52:06Z,2022-03-03T21:29:50Z,MERGED,True,243,11,38,https://github.com/sdlime,Added series of configuration file tests...,9,[],https://github.com/mapserver/mapserver/pull/6480,https://github.com/jmckenna,19,https://github.com/MapServer/MapServer/pull/6480#issuecomment-1051001708,Much easier once @rouault added the -conf option. Fixed one issue uncovered by the tests.,"MS_MAP_PATTERN set

oh my, was this so confusing. I was only setting MS_MAP_PATTERN, and no matter what I did (invalid expressions, etc etc setting the env variables in the conf file versus through web browser etc etc) I only saw this message CGI variable ""map"" fails to validate. (there was no Regular expression error. Failed to compile expression.., I felt like I must be going crazy, and wasted several days of effort on this).  In fact, if you only set MS_MAP_PATTERN, no matter how good your regex expression skills are, or how many online test sites you use for validating your expression, or how many days you spend on this, you will only see in your browser the plain message  CGI variable ""map"" fails to validate. and you will bang your head for days.  In bold I write now, you must set both environment variables MS_MAP_PATTERN and MS_MAP_BAD_PATTERN for all of this logic to work (end of bold)   Oh my.   Onwards.


It's not that bad... MS_MAP_BAD_PATTERN makes it possible to write simple MS_MAP_PATTERN expressions. Since it disallows back references you can just write something simple like MS_MAP_PATTERN ""^/opt/mapserver"". @szekerest talked about perhaps using OS-specific bad patterns, which might make sense...

In my opinion, this is the one part of my long testing, that needs a change before merging.  I tried to explain here that the new code does not run (all the helpful regex failed messages etc) when a user only specifies MS_MAP_PATTERN.  Shouldn't we check that both env vars are specified, and if both were not set, output an error message such as ""CGI variable 'map' fails to validate, please make sure to set at least both MS_MAP_BAD_PATTERN and MS_MAP_PATTERN""",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6480,2022-02-16T01:09:51Z,2022-02-25T16:52:06Z,2022-03-03T21:29:50Z,MERGED,True,243,11,38,https://github.com/sdlime,Added series of configuration file tests...,9,[],https://github.com/mapserver/mapserver/pull/6480,https://github.com/sdlime,20,https://github.com/MapServer/MapServer/pull/6480#issuecomment-1051013561,Much easier once @rouault added the -conf option. Fixed one issue uncovered by the tests.,I disagree - it works as intended now. MS_MAP_BAD_PATTERN has a default value but MS_MAP_PATTERN does not and is required. If changes to default values for MS_MAP_BAD_PATTERN are desired then that can be happen as a separate pull request.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6480,2022-02-16T01:09:51Z,2022-02-25T16:52:06Z,2022-03-03T21:29:50Z,MERGED,True,243,11,38,https://github.com/sdlime,Added series of configuration file tests...,9,[],https://github.com/mapserver/mapserver/pull/6480,https://github.com/jmckenna,21,https://github.com/MapServer/MapServer/pull/6480#issuecomment-1051020699,Much easier once @rouault added the -conf option. Fixed one issue uncovered by the tests.,oops did i edit the wrong comment lol ? Start Steve -- Apparently yes! -- End Steve,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6480,2022-02-16T01:09:51Z,2022-02-25T16:52:06Z,2022-03-03T21:29:50Z,MERGED,True,243,11,38,https://github.com/sdlime,Added series of configuration file tests...,9,[],https://github.com/mapserver/mapserver/pull/6480,https://github.com/jmckenna,22,https://github.com/MapServer/MapServer/pull/6480#issuecomment-1051021292,Much easier once @rouault added the -conf option. Fixed one issue uncovered by the tests.,"it seems i overwrote steve's comment by accident.   Anyway, that's enough from me on this :) +1 to merge.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6480,2022-02-16T01:09:51Z,2022-02-25T16:52:06Z,2022-03-03T21:29:50Z,MERGED,True,243,11,38,https://github.com/sdlime,Added series of configuration file tests...,9,[],https://github.com/mapserver/mapserver/pull/6480,https://github.com/jmckenna,23,https://github.com/MapServer/MapServer/pull/6480#issuecomment-1051023630,Much easier once @rouault added the -conf option. Fixed one issue uncovered by the tests.,"I fixed steve's last comment (I had no idea that you can edit someone else's comment)  Yikes.  Sorry for all this noise, i'm just trying to help the user.  Darn.  Onwards ha.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6480,2022-02-16T01:09:51Z,2022-02-25T16:52:06Z,2022-03-03T21:29:50Z,MERGED,True,243,11,38,https://github.com/sdlime,Added series of configuration file tests...,9,[],https://github.com/mapserver/mapserver/pull/6480,https://github.com/sdlime,24,https://github.com/MapServer/MapServer/pull/6480#issuecomment-1051039891,Much easier once @rouault added the -conf option. Fixed one issue uncovered by the tests.,"it seems i overwrote steve's comment by accident. Anyway, that's enough from me on this :) +1 to merge.

No worries - I thought I had written a response yesterday! Now I know what happened... ;-)",True,{'LAUGH': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6481,2022-02-16T18:48:39Z,2022-02-18T16:59:03Z,2022-02-18T16:59:03Z,MERGED,True,93,6,2,https://github.com/rouault,[Backport 7.6] msProjectRect(): fix PROJ >= 6 when datum shift is involved (fixes #6478),3,[],https://github.com/mapserver/mapserver/pull/6481,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6481,Backport of #6479,Backport of #6479,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6483,2022-02-20T20:54:10Z,2022-02-25T20:47:38Z,2022-02-25T20:47:38Z,MERGED,True,6,4,1,https://github.com/geographika,Update Vagrant to use Python3,2,[],https://github.com/mapserver/mapserver/pull/6483,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6483,Updates vagrant up to install Python3 and configure python and pip to default to Python 3.6,Updates vagrant up to install Python3 and configure python and pip to default to Python 3.6,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6484,2022-02-25T20:41:20Z,2022-02-28T20:11:07Z,2022-02-28T20:11:07Z,MERGED,True,50,18,3,https://github.com/rouault,Accept ESRI:XXX (or other autorities) as value for PROJECTION blocks and wxs_srs metadata,3,[],https://github.com/mapserver/mapserver/pull/6484,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6484,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6484,2022-02-25T20:41:20Z,2022-02-28T20:11:07Z,2022-02-28T20:11:07Z,MERGED,True,50,18,3,https://github.com/rouault,Accept ESRI:XXX (or other autorities) as value for PROJECTION blocks and wxs_srs metadata,3,[],https://github.com/mapserver/mapserver/pull/6484,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6484#issuecomment-1054620960,,thanks @rouault !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6485,2022-02-28T19:38:31Z,2022-03-04T12:18:47Z,2022-03-04T12:18:47Z,MERGED,True,4,0,1,https://github.com/jmckenna,handle PROJ6 invalid coordinates error in MapServer log,3,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6485,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6485,"Background

since the PROJ 6.0.0 release, PROJ is more strict and rejects invalid coordinates (see https://github.com/OSGeo/PROJ/blob/master/src/fwd.cpp#L56 )
since the PROJ 8.0.0 release, PROJ changed the default log level to be PJ_LOG_ERROR (from PJ_LOG_NONE) (see https://github.com/OSGeo/PROJ/blob/master/src/ctx.cpp#L90 )

Problem

I'm one of the unlucky ones it seems, because all (yes all) of my mapfiles cause hundreds or thousands of PROJ error messages filling up my MapServer log, for each map draw
imagine your MapServer log is something like:
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
*repeated in thousands*


PROJ is not wrong here, the issue is that MapServer (main) is not catching this error and handling it through one of the MapServer Debug Levels

Sample mapfile and data

small mapfile and data (one parcels layer, in UTM Zone 15 displayed in EPSG:4326 at global extents), taken from the GeoMoose demo data (I discussed this with the GeoMoose PSC as well, and they were able to reproduce the issue on Ubuntu with PROJ8): https://gatewaygeomatics.com/dl/ticket-proj6-error-debug-level.zip

Proposed Solution

this pull request handles the issue by only reporting the error when the user sets the MapServer debug level to be ""very verbose""","Background

since the PROJ 6.0.0 release, PROJ is more strict and rejects invalid coordinates (see https://github.com/OSGeo/PROJ/blob/master/src/fwd.cpp#L56 )
since the PROJ 8.0.0 release, PROJ changed the default log level to be PJ_LOG_ERROR (from PJ_LOG_NONE) (see https://github.com/OSGeo/PROJ/blob/master/src/ctx.cpp#L90 )

Problem

I'm one of the unlucky ones it seems, because all (yes all) of my mapfiles cause hundreds or thousands of PROJ error messages filling up my MapServer log, for each map draw
imagine your MapServer log is something like:
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
 PROJ: Error: utm: Invalid latitude
*repeated in thousands*


PROJ is not wrong here, the issue is that MapServer (main) is not catching this error and handling it through one of the MapServer Debug Levels

Sample mapfile and data

small mapfile and data (one parcels layer, in UTM Zone 15 displayed in EPSG:4326 at global extents), taken from the GeoMoose demo data (I discussed this with the GeoMoose PSC as well, and they were able to reproduce the issue on Ubuntu with PROJ8): https://gatewaygeomatics.com/dl/ticket-proj6-error-debug-level.zip

Proposed Solution

this pull request handles the issue by only reporting the error when the user sets the MapServer debug level to be ""very verbose""",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6486,2022-03-01T02:21:40Z,2022-03-01T12:23:58Z,2022-03-04T14:49:53Z,MERGED,True,3025,6467,1,https://github.com/sdlime,Update nlohmann/json.hpp,1,[],https://github.com/mapserver/mapserver/pull/6486,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/6486,Updating third-party library for json handling (OGC API) to version 3.10.5.,Updating third-party library for json handling (OGC API) to version 3.10.5.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6487,2022-03-04T12:19:11Z,2022-03-04T13:00:08Z,2022-03-04T13:00:08Z,MERGED,True,4,0,1,https://github.com/apps/github-actions,[Backport branch-7-6] handle PROJ6 invalid coordinates error in MapServer log,3,[],https://github.com/mapserver/mapserver/pull/6487,https://github.com/apps/github-actions,1,https://github.com/MapServer/MapServer/pull/6487,"Backport #6485
Authored by: @jmckenna","Backport #6485
Authored by: @jmckenna",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6488,2022-03-10T12:13:33Z,2022-03-12T14:15:55Z,2022-03-12T14:15:55Z,MERGED,True,35,0,2,https://github.com/gfenoy,Add the msSaveConfig function to the MapServer C-API,9,[],https://github.com/mapserver/mapserver/pull/6488,https://github.com/gfenoy,1,https://github.com/MapServer/MapServer/pull/6488,"During the 2022 Joint OGC – OSGeo – ASF Code Sprint, we tried to use the current main branch of the MapSever repo from the ZOO-Kernel to publish results as OGC API - Features.
By doing so, we realized that it may be useful to get access to a msSaveConfig function that is prototyped here from the MapServer C-API. This function would simply permit to save the config file.
From our understanding, with the current main branch, when you publish a new OGC API - Features you should have a new item in the maps hashTable to get the URL http://SERVER/MYMAP/ogcapi/ to work properly.
The function currently provided does not take into account saving the plugins, it should be added.
As we did not know what to pass for abs_path for msBuildPath, we decided to use the root dir, which is probably a wrong choice.
In case there is another way already available for saving the config file then, please let us know and forgive us for this PR.","During the 2022 Joint OGC – OSGeo – ASF Code Sprint, we tried to use the current main branch of the MapSever repo from the ZOO-Kernel to publish results as OGC API - Features.
By doing so, we realized that it may be useful to get access to a msSaveConfig function that is prototyped here from the MapServer C-API. This function would simply permit to save the config file.
From our understanding, with the current main branch, when you publish a new OGC API - Features you should have a new item in the maps hashTable to get the URL http://SERVER/MYMAP/ogcapi/ to work properly.
The function currently provided does not take into account saving the plugins, it should be added.
As we did not know what to pass for abs_path for msBuildPath, we decided to use the root dir, which is probably a wrong choice.
In case there is another way already available for saving the config file then, please let us know and forgive us for this PR.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6488,2022-03-10T12:13:33Z,2022-03-12T14:15:55Z,2022-03-12T14:15:55Z,MERGED,True,35,0,2,https://github.com/gfenoy,Add the msSaveConfig function to the MapServer C-API,9,[],https://github.com/mapserver/mapserver/pull/6488,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6488#issuecomment-1065890932,"During the 2022 Joint OGC – OSGeo – ASF Code Sprint, we tried to use the current main branch of the MapSever repo from the ZOO-Kernel to publish results as OGC API - Features.
By doing so, we realized that it may be useful to get access to a msSaveConfig function that is prototyped here from the MapServer C-API. This function would simply permit to save the config file.
From our understanding, with the current main branch, when you publish a new OGC API - Features you should have a new item in the maps hashTable to get the URL http://SERVER/MYMAP/ogcapi/ to work properly.
The function currently provided does not take into account saving the plugins, it should be added.
As we did not know what to pass for abs_path for msBuildPath, we decided to use the root dir, which is probably a wrong choice.
In case there is another way already available for saving the config file then, please let us know and forgive us for this PR.",Makes sense to me.  Thanks @gfenoy !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6489,2022-03-12T14:14:10Z,2022-03-14T11:29:30Z,2022-03-14T11:29:30Z,MERGED,True,4,2,1,https://github.com/jmckenna,check SWIG version for PHPNG,2,[],https://github.com/mapserver/mapserver/pull/6489,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6489,"check if SWIG version <= 4.0.2

if yes, install the required .php constants file","check if SWIG version <= 4.0.2

if yes, install the required .php constants file",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6490,2022-03-12T15:38:42Z,2022-03-14T11:29:59Z,2022-03-14T11:29:59Z,MERGED,True,2,1,1,https://github.com/jmckenna,add MS_MAP_BAD_PATTERN to sample conf,1,[],https://github.com/mapserver/mapserver/pull/6490,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6490,"add to mapserver-sample.conf :

MS_MAP_BAD_PATTERN
default PROJ_LIB value","add to mapserver-sample.conf :

MS_MAP_BAD_PATTERN
default PROJ_LIB value",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6491,2022-03-14T10:59:59Z,2022-03-14T11:50:22Z,2022-03-14T11:50:23Z,MERGED,True,9,7,2,https://github.com/geographika,Python MapScript updates to work with Python 3.10,4,[],https://github.com/mapserver/mapserver/pull/6491,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6491,"This update fixes issues when building MapScript for Python 3,10 with (as yet unreleased) SWIG 4.1.0.

Calls to PyObject_CallMethod (used by MapScript for writing images) need to use Py_ssize_t rather than int for specifying size (to allow output > 2GB). See https://bugs.python.org/issue40943
SWIG methods all now have __SWIG appended to them which broke intarray___setitem__(order, i, self->layerorder[i]); - I'm unsure why the method name rather than array access was used in the first place.","This update fixes issues when building MapScript for Python 3,10 with (as yet unreleased) SWIG 4.1.0.

Calls to PyObject_CallMethod (used by MapScript for writing images) need to use Py_ssize_t rather than int for specifying size (to allow output > 2GB). See https://bugs.python.org/issue40943
SWIG methods all now have __SWIG appended to them which broke intarray___setitem__(order, i, self->layerorder[i]); - I'm unsure why the method name rather than array access was used in the first place.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6491,2022-03-14T10:59:59Z,2022-03-14T11:50:22Z,2022-03-14T11:50:23Z,MERGED,True,9,7,2,https://github.com/geographika,Python MapScript updates to work with Python 3.10,4,[],https://github.com/mapserver/mapserver/pull/6491,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6491#issuecomment-1066691386,"This update fixes issues when building MapScript for Python 3,10 with (as yet unreleased) SWIG 4.1.0.

Calls to PyObject_CallMethod (used by MapScript for writing images) need to use Py_ssize_t rather than int for specifying size (to allow output > 2GB). See https://bugs.python.org/issue40943
SWIG methods all now have __SWIG appended to them which broke intarray___setitem__(order, i, self->layerorder[i]); - I'm unsure why the method name rather than array access was used in the first place.",thanks @geographika !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6494,2022-03-14T19:14:50Z,2022-03-15T13:51:09Z,2022-03-15T13:51:14Z,MERGED,True,2,2,1,https://github.com/szekerest,Labeling lines with zero lengths may cause the application to crash (#6493),1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6494,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/6494,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6494,2022-03-14T19:14:50Z,2022-03-15T13:51:09Z,2022-03-15T13:51:14Z,MERGED,True,2,2,1,https://github.com/szekerest,Labeling lines with zero lengths may cause the application to crash (#6493),1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6494,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6494#issuecomment-1067287697,,It's not clear to me what these changes prevent downstream. What am I missing?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6494,2022-03-14T19:14:50Z,2022-03-15T13:51:09Z,2022-03-15T13:51:14Z,MERGED,True,2,2,1,https://github.com/szekerest,Labeling lines with zero lengths may cause the application to crash (#6493),1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6494,https://github.com/szekerest,3,https://github.com/MapServer/MapServer/pull/6494#issuecomment-1067369869,,"@sdlime These changes cause to initialize the values (longest_segment_index, longest_segment_line_index, longest_segment_point_index, longest_line_index) even if the line length is zero.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6494,2022-03-14T19:14:50Z,2022-03-15T13:51:09Z,2022-03-15T13:51:14Z,MERGED,True,2,2,1,https://github.com/szekerest,Labeling lines with zero lengths may cause the application to crash (#6493),1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6494,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/6494#issuecomment-1067376330,,I saw that but I couldn't tell why that fixes anything.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6494,2022-03-14T19:14:50Z,2022-03-15T13:51:09Z,2022-03-15T13:51:14Z,MERGED,True,2,2,1,https://github.com/szekerest,Labeling lines with zero lengths may cause the application to crash (#6493),1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6494,https://github.com/szekerest,5,https://github.com/MapServer/MapServer/pull/6494#issuecomment-1067919754,,"Because, the following code in (msLineLabelPoint) will use uninitialized longest_segment_index as soon as the line length is zero.
        j = ll->longest_segment_index;
        lar->label_points[lar->num_label_points].x = (p->point[j-1].x + p->point[j].x)/2.0;
        lar->label_points[lar->num_label_points].y = (p->point[j-1].y + p->point[j].y)/2.0;",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6494,2022-03-14T19:14:50Z,2022-03-15T13:51:09Z,2022-03-15T13:51:14Z,MERGED,True,2,2,1,https://github.com/szekerest,Labeling lines with zero lengths may cause the application to crash (#6493),1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6494,https://github.com/sdlime,6,https://github.com/MapServer/MapServer/pull/6494#issuecomment-1067997321,,"Because, the following code in (msLineLabelPoint) will use uninitialized longest_segment_index as soon as the line length is zero.
        j = ll->longest_segment_index;
        lar->label_points[lar->num_label_points].x = (p->point[j-1].x + p->point[j].x)/2.0;
        lar->label_points[lar->num_label_points].y = (p->point[j-1].y + p->point[j].y)/2.0;


Ok, so I think what the changes do. Ok with me to move forward... --Steve",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6495,2022-03-15T13:51:40Z,2022-03-16T18:32:30Z,2022-03-16T18:32:39Z,MERGED,True,2,2,1,https://github.com/apps/github-actions,[Backport branch-7-6] Labeling lines with zero lengths may cause the application to crash (#6493),1,[],https://github.com/mapserver/mapserver/pull/6495,https://github.com/apps/github-actions,1,https://github.com/MapServer/MapServer/pull/6495,"Backport #6494
Authored by: @szekerest","Backport #6494
Authored by: @szekerest",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6496,2022-03-15T17:19:24Z,2022-03-15T18:45:10Z,2022-03-15T18:45:10Z,MERGED,True,13,22,3,https://github.com/geographika,Add Python MapScript annotations using SWIG 4.1,2,[],https://github.com/mapserver/mapserver/pull/6496,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6496,"This pull request allows functions and properties in the Python MapScript bindings to automatically include type annotations. These are useful for when generating the MapScript API docs (see MapServer/MapServer-documentation#544 and RFC 132).
This is made possible by recent changes in SWIG - see swig/swig#1951 (comment)
and is merged into the SWIG master branch, so will be a part of the 4.1 release. The Appveyor script makes use of a SWIG version compiled against this branch.
Annotations are off by default and can be set using WITH_PYMAPSCRIPT_ANNOTATIONS=1 in CMake.
The WITH_MAPSCRIPT_PROPERTYANNOTATIONS has been renamed WITH_PYMAPSCRIPT_ANNOTATIONS for clarity.
Python 3.5 and earlier do not support property annotations, so if enabled only methods will be annotated.
Python 2.7 does not support annotations at all, so enabling annotations is ignored.
Note the SWIG command switch is -features python:annotations=c. Types are currently C types, but there are plans in SWIG to switch these to Python types in the future.","This pull request allows functions and properties in the Python MapScript bindings to automatically include type annotations. These are useful for when generating the MapScript API docs (see MapServer/MapServer-documentation#544 and RFC 132).
This is made possible by recent changes in SWIG - see swig/swig#1951 (comment)
and is merged into the SWIG master branch, so will be a part of the 4.1 release. The Appveyor script makes use of a SWIG version compiled against this branch.
Annotations are off by default and can be set using WITH_PYMAPSCRIPT_ANNOTATIONS=1 in CMake.
The WITH_MAPSCRIPT_PROPERTYANNOTATIONS has been renamed WITH_PYMAPSCRIPT_ANNOTATIONS for clarity.
Python 3.5 and earlier do not support property annotations, so if enabled only methods will be annotated.
Python 2.7 does not support annotations at all, so enabling annotations is ignored.
Note the SWIG command switch is -features python:annotations=c. Types are currently C types, but there are plans in SWIG to switch these to Python types in the future.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6496,2022-03-15T17:19:24Z,2022-03-15T18:45:10Z,2022-03-15T18:45:10Z,MERGED,True,13,22,3,https://github.com/geographika,Add Python MapScript annotations using SWIG 4.1,2,[],https://github.com/mapserver/mapserver/pull/6496,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6496#issuecomment-1068337868,"This pull request allows functions and properties in the Python MapScript bindings to automatically include type annotations. These are useful for when generating the MapScript API docs (see MapServer/MapServer-documentation#544 and RFC 132).
This is made possible by recent changes in SWIG - see swig/swig#1951 (comment)
and is merged into the SWIG master branch, so will be a part of the 4.1 release. The Appveyor script makes use of a SWIG version compiled against this branch.
Annotations are off by default and can be set using WITH_PYMAPSCRIPT_ANNOTATIONS=1 in CMake.
The WITH_MAPSCRIPT_PROPERTYANNOTATIONS has been renamed WITH_PYMAPSCRIPT_ANNOTATIONS for clarity.
Python 3.5 and earlier do not support property annotations, so if enabled only methods will be annotated.
Python 2.7 does not support annotations at all, so enabling annotations is ignored.
Note the SWIG command switch is -features python:annotations=c. Types are currently C types, but there are plans in SWIG to switch these to Python types in the future.","Thanks @geographika !
(for the records, the MapServer TravisCI builds were recently also updated to pull SWIG-master, through #6430 )",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6497,2022-03-21T20:27:24Z,2022-03-22T12:28:05Z,2022-03-23T19:00:47Z,MERGED,True,5,5,5,https://github.com/geographika,Fix CMake package name warnings,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6497,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6497,"This fixes several of the following types of CMake warnings (in version 3.22) in the build outputs, e.g.
  The package name passed to `find_package_handle_standard_args` (PkgConfig)
  does not match the name of the calling package (HarfBuzz).  This can lead
  to problems in calling code that expects `find_package` result variables
  (e.g., `_FOUND`) to follow a certain pattern.

One of these still remains where it is searching for SVG in a FindSVGCairo package. I'm unsure how to resolve this one.

  
    
      MapServer/cmake/FindSVGCairo.cmake
    
    
         Line 47
      in
      a43a21d
    
  
  
    

        
          
           find_package_handle_standard_args(SVG DEFAULT_MSG SVG_LIBRARY SVG_INCLUDE_DIR)","This fixes several of the following types of CMake warnings (in version 3.22) in the build outputs, e.g.
  The package name passed to `find_package_handle_standard_args` (PkgConfig)
  does not match the name of the calling package (HarfBuzz).  This can lead
  to problems in calling code that expects `find_package` result variables
  (e.g., `_FOUND`) to follow a certain pattern.

One of these still remains where it is searching for SVG in a FindSVGCairo package. I'm unsure how to resolve this one.

  
    
      MapServer/cmake/FindSVGCairo.cmake
    
    
         Line 47
      in
      a43a21d
    
  
  
    

        
          
           find_package_handle_standard_args(SVG DEFAULT_MSG SVG_LIBRARY SVG_INCLUDE_DIR)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6497,2022-03-21T20:27:24Z,2022-03-22T12:28:05Z,2022-03-23T19:00:47Z,MERGED,True,5,5,5,https://github.com/geographika,Fix CMake package name warnings,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6497,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/6497#issuecomment-1074856858,"This fixes several of the following types of CMake warnings (in version 3.22) in the build outputs, e.g.
  The package name passed to `find_package_handle_standard_args` (PkgConfig)
  does not match the name of the calling package (HarfBuzz).  This can lead
  to problems in calling code that expects `find_package` result variables
  (e.g., `_FOUND`) to follow a certain pattern.

One of these still remains where it is searching for SVG in a FindSVGCairo package. I'm unsure how to resolve this one.

  
    
      MapServer/cmake/FindSVGCairo.cmake
    
    
         Line 47
      in
      a43a21d
    
  
  
    

        
          
           find_package_handle_standard_args(SVG DEFAULT_MSG SVG_LIBRARY SVG_INCLUDE_DIR)","No issues with these changes on the older CMakes used by the CI, or on newer CMakes (where I'm getting the warnings), so hopefully good to merge.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6497,2022-03-21T20:27:24Z,2022-03-22T12:28:05Z,2022-03-23T19:00:47Z,MERGED,True,5,5,5,https://github.com/geographika,Fix CMake package name warnings,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6497,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6497#issuecomment-1075112506,"This fixes several of the following types of CMake warnings (in version 3.22) in the build outputs, e.g.
  The package name passed to `find_package_handle_standard_args` (PkgConfig)
  does not match the name of the calling package (HarfBuzz).  This can lead
  to problems in calling code that expects `find_package` result variables
  (e.g., `_FOUND`) to follow a certain pattern.

One of these still remains where it is searching for SVG in a FindSVGCairo package. I'm unsure how to resolve this one.

  
    
      MapServer/cmake/FindSVGCairo.cmake
    
    
         Line 47
      in
      a43a21d
    
  
  
    

        
          
           find_package_handle_standard_args(SVG DEFAULT_MSG SVG_LIBRARY SVG_INCLUDE_DIR)",thanks @geographika !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6497,2022-03-21T20:27:24Z,2022-03-22T12:28:05Z,2022-03-23T19:00:47Z,MERGED,True,5,5,5,https://github.com/geographika,Fix CMake package name warnings,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6497,https://github.com/sdlime,4,https://github.com/MapServer/MapServer/pull/6497#issuecomment-1076710608,"This fixes several of the following types of CMake warnings (in version 3.22) in the build outputs, e.g.
  The package name passed to `find_package_handle_standard_args` (PkgConfig)
  does not match the name of the calling package (HarfBuzz).  This can lead
  to problems in calling code that expects `find_package` result variables
  (e.g., `_FOUND`) to follow a certain pattern.

One of these still remains where it is searching for SVG in a FindSVGCairo package. I'm unsure how to resolve this one.

  
    
      MapServer/cmake/FindSVGCairo.cmake
    
    
         Line 47
      in
      a43a21d
    
  
  
    

        
          
           find_package_handle_standard_args(SVG DEFAULT_MSG SVG_LIBRARY SVG_INCLUDE_DIR)","Interestingly I'm still seeing a couple of these with  Perl and PostgreSQL
CMake Warning (dev) at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:272 (message):
  The package name passed to `find_package_handle_standard_args` (POSTGRESQL)
  does not match the name of the calling package (PostgreSQL).  This can lead
  to problems in calling code that expects `find_package` result variables
  (e.g., `_FOUND`) to follow a certain pattern.
Call Stack (most recent call first):
  cmake/FindPostgreSQL.cmake:63 (find_package_handle_standard_args)
  CMakeLists.txt:601 (find_package)
This warning is for project developers.  Use -Wno-dev to suppress it.


CMake Warning (dev) at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:272 (message):
  The package name passed to `find_package_handle_standard_args` (Perl) does
  not match the name of the calling package (PerlLibs).  This can lead to
  problems in calling code that expects `find_package` result variables
  (e.g., `_FOUND`) to follow a certain pattern.
Call Stack (most recent call first):
  /usr/share/cmake/Modules/FindPerl.cmake:76 (FIND_PACKAGE_HANDLE_STANDARD_ARGS)
  cmake/FindPerlLibs.cmake:41 (include)
  mapscript/perl/CMakeLists.txt:4 (find_package)
This warning is for project developers.  Use -Wno-dev to suppress it.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6498,2022-03-22T12:28:30Z,2022-03-23T12:02:43Z,2022-03-23T12:02:44Z,MERGED,True,5,5,5,https://github.com/apps/github-actions,[Backport branch-7-6] Fix CMake package name warnings,1,[],https://github.com/mapserver/mapserver/pull/6498,https://github.com/apps/github-actions,1,https://github.com/MapServer/MapServer/pull/6498,"Backport #6497
Authored by: @geographika","Backport #6497
Authored by: @geographika",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6500,2022-03-23T19:15:44Z,2022-03-25T09:30:50Z,2022-03-25T09:30:50Z,MERGED,True,2,2,2,https://github.com/geographika,More CMake package name warning fixes,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6500,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6500,"Following on from #6497 a couple more fixes.
I'm not 100% sure about the change from include(FindPerl) to find_package(Perl) - will see what happens with the CI.
@sdlime - I've not been building with Perl and Postgres so these got missed in the first pull request.","Following on from #6497 a couple more fixes.
I'm not 100% sure about the change from include(FindPerl) to find_package(Perl) - will see what happens with the CI.
@sdlime - I've not been building with Perl and Postgres so these got missed in the first pull request.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6500,2022-03-23T19:15:44Z,2022-03-25T09:30:50Z,2022-03-25T09:30:50Z,MERGED,True,2,2,2,https://github.com/geographika,More CMake package name warning fixes,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6500,https://github.com/geographika,2,https://github.com/MapServer/MapServer/pull/6500#issuecomment-1076759343,"Following on from #6497 a couple more fixes.
I'm not 100% sure about the change from include(FindPerl) to find_package(Perl) - will see what happens with the CI.
@sdlime - I've not been building with Perl and Postgres so these got missed in the first pull request.","Travis is passing which tests both WITH_PERL=1 and WITH_POSTGIS=1. @sdlime if you get a chance to confirm locally that the warnings are gone for you, then I'll mark this as ready for review.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6500,2022-03-23T19:15:44Z,2022-03-25T09:30:50Z,2022-03-25T09:30:50Z,MERGED,True,2,2,2,https://github.com/geographika,More CMake package name warning fixes,1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6500,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/6500#issuecomment-1077632459,"Following on from #6497 a couple more fixes.
I'm not 100% sure about the change from include(FindPerl) to find_package(Perl) - will see what happens with the CI.
@sdlime - I've not been building with Perl and Postgres so these got missed in the first pull request.","Yup, warnings are gone locally.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6501,2022-03-25T09:41:54Z,2022-03-31T11:24:50Z,2022-03-31T11:24:50Z,MERGED,True,11,11,2,https://github.com/geographika,Ensure all layer debug statements are output,1,[],https://github.com/mapserver/mapserver/pull/6501,https://github.com/geographika,1,https://github.com/MapServer/MapServer/pull/6501,"There are a few instances of if(layer->debug == MS_TRUE) statements. Layers that use the following syntax don't get these debug statements:
LAYER
    DEBUG 5 # any value apart from 1/ON/TRUE are ignored by the above statements

Also includes a couple of updates changing the hardcoded 5 to use MS_DEBUGLEVEL_VVV as used throughout the rest of the codebase.","There are a few instances of if(layer->debug == MS_TRUE) statements. Layers that use the following syntax don't get these debug statements:
LAYER
    DEBUG 5 # any value apart from 1/ON/TRUE are ignored by the above statements

Also includes a couple of updates changing the hardcoded 5 to use MS_DEBUGLEVEL_VVV as used throughout the rest of the codebase.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6505,2022-04-01T01:14:23Z,2022-04-05T17:37:36Z,2022-04-05T17:37:43Z,MERGED,True,323,64,3,https://github.com/sdlime,Default to use CMake FindPostgreSQL module ,1,[],https://github.com/mapserver/mapserver/pull/6505,https://github.com/sdlime,1,https://github.com/MapServer/MapServer/pull/6505,Included a copy to use with CMake version < 3.20. Based on the GDAL approach recommended by @rouault. Addresses issue #6504.,Included a copy to use with CMake version < 3.20. Based on the GDAL approach recommended by @rouault. Addresses issue #6504.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6505,2022-04-01T01:14:23Z,2022-04-05T17:37:36Z,2022-04-05T17:37:43Z,MERGED,True,323,64,3,https://github.com/sdlime,Default to use CMake FindPostgreSQL module ,1,[],https://github.com/mapserver/mapserver/pull/6505,https://github.com/sdlime,2,https://github.com/MapServer/MapServer/pull/6505#issuecomment-1085292782,Included a copy to use with CMake version < 3.20. Based on the GDAL approach recommended by @rouault. Addresses issue #6504.,Initial crack at the approach suggest by Even. It works for my SuSE install...,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6505,2022-04-01T01:14:23Z,2022-04-05T17:37:36Z,2022-04-05T17:37:43Z,MERGED,True,323,64,3,https://github.com/sdlime,Default to use CMake FindPostgreSQL module ,1,[],https://github.com/mapserver/mapserver/pull/6505,https://github.com/sdlime,3,https://github.com/MapServer/MapServer/pull/6505#issuecomment-1089048074,Included a copy to use with CMake version < 3.20. Based on the GDAL approach recommended by @rouault. Addresses issue #6504.,No comments? I guess if I don't hear anything I'll go ahead and merge... --Steve,True,{'THUMBS_UP': ['https://github.com/geographika']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6505,2022-04-01T01:14:23Z,2022-04-05T17:37:36Z,2022-04-05T17:37:43Z,MERGED,True,323,64,3,https://github.com/sdlime,Default to use CMake FindPostgreSQL module ,1,[],https://github.com/mapserver/mapserver/pull/6505,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/6505#issuecomment-1089065079,Included a copy to use with CMake version < 3.20. Based on the GDAL approach recommended by @rouault. Addresses issue #6504.,I think it should be merged.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6509,2022-04-09T15:38:58Z,2022-04-09T17:00:16Z,2022-04-09T17:00:16Z,MERGED,True,1,1,1,https://github.com/jmckenna,find PG 14 through CMake,1,[],https://github.com/mapserver/mapserver/pull/6509,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6509,modifies the embedded FindPostgreSQL.cmake for older CMake versions,modifies the embedded FindPostgreSQL.cmake for older CMake versions,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6509,2022-04-09T15:38:58Z,2022-04-09T17:00:16Z,2022-04-09T17:00:16Z,MERGED,True,1,1,1,https://github.com/jmckenna,find PG 14 through CMake,1,[],https://github.com/mapserver/mapserver/pull/6509,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6509#issuecomment-1094085311,modifies the embedded FindPostgreSQL.cmake for older CMake versions,Actually even the latest CMake didn't include PG 14. I've just submitted that to upstream per https://gitlab.kitware.com/cmake/cmake/-/merge_requests/7158,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6514,2022-04-15T17:54:42Z,2022-04-18T13:49:36Z,2022-04-18T13:49:36Z,MERGED,True,2,0,1,https://github.com/jmckenna,handle CMake RSVG package name warnings,4,[],https://github.com/mapserver/mapserver/pull/6514,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6514,"handle mismatched package name warning by CMake:

  The package name passed to `find_package_handle_standard_args` (GOBJECT)
  does not match the name of the calling package (RSVG).  This can lead to
  problems in calling code that expects `find_package` result variables
  (e.g., `_FOUND`) to follow a certain pattern.","handle mismatched package name warning by CMake:

  The package name passed to `find_package_handle_standard_args` (GOBJECT)
  does not match the name of the calling package (RSVG).  This can lead to
  problems in calling code that expects `find_package` result variables
  (e.g., `_FOUND`) to follow a certain pattern.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6515,2022-04-15T19:12:53Z,2022-04-18T13:48:06Z,2022-04-18T13:48:06Z,CLOSED,False,3,0,1,https://github.com/jmckenna,handle CMake warning for include of dlfcn.h / CMAKE_REQUIRED_LIBRARIES,2,[],https://github.com/mapserver/mapserver/pull/6515,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6515,"handle CMake warning during include of dlfcn.h

-- Looking for dlfcn.h
CMake Warning (dev) at /usr/local/share/cmake-3.23/Modules/CheckIncludeFile.cmake:82 (message):
  Policy CMP0075 is not set: Include file check macros honor
  CMAKE_REQUIRED_LIBRARIES.  Run ""cmake --help-policy CMP0075"" for policy
  details.  Use the cmake_policy command to set the policy and suppress this
  warning.

  CMAKE_REQUIRED_LIBRARIES is set to:

    m

  For compatibility with CMake 3.11 and below this check is ignoring it.
Call Stack (most recent call first):
  CMakeLists.txt:133 (check_include_file)
This warning is for project developers.  Use -Wno-dev to suppress it.

-- Looking for dlfcn.h - found","handle CMake warning during include of dlfcn.h

-- Looking for dlfcn.h
CMake Warning (dev) at /usr/local/share/cmake-3.23/Modules/CheckIncludeFile.cmake:82 (message):
  Policy CMP0075 is not set: Include file check macros honor
  CMAKE_REQUIRED_LIBRARIES.  Run ""cmake --help-policy CMP0075"" for policy
  details.  Use the cmake_policy command to set the policy and suppress this
  warning.

  CMAKE_REQUIRED_LIBRARIES is set to:

    m

  For compatibility with CMake 3.11 and below this check is ignoring it.
Call Stack (most recent call first):
  CMakeLists.txt:133 (check_include_file)
This warning is for project developers.  Use -Wno-dev to suppress it.

-- Looking for dlfcn.h - found",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6516,2022-04-16T13:29:26Z,2022-04-18T13:47:39Z,2022-04-18T13:47:39Z,CLOSED,False,2,2,1,https://github.com/jmckenna,WIP: handle CMake UseSWIG warnings,2,['Work in progress'],https://github.com/mapserver/mapserver/pull/6516,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6516,"handles 2 CMake warnings:

CMake Deprecation Warning at CMakeLists.txt:6 (cmake_policy):
  The OLD behavior for policy CMP0078 will be removed from a future version
  of CMake.

  The cmake-policies(7) manual explains that the OLD behaviors of all
  policies are deprecated and that a policy should be set to OLD only under
  specific short-term circumstances.  Projects should be ported to the NEW
  behavior and not rely on setting a policy to OLD.

and
CMake Deprecation Warning at CMakeLists.txt:9 (cmake_policy):
  The OLD behavior for policy CMP0086 will be removed from a future version
  of CMake.

  The cmake-policies(7) manual explains that the OLD behaviors of all
  policies are deprecated and that a policy should be set to OLD only under
  specific short-term circumstances.  Projects should be ported to the NEW
  behavior and not rely on setting a policy to OLD.","handles 2 CMake warnings:

CMake Deprecation Warning at CMakeLists.txt:6 (cmake_policy):
  The OLD behavior for policy CMP0078 will be removed from a future version
  of CMake.

  The cmake-policies(7) manual explains that the OLD behaviors of all
  policies are deprecated and that a policy should be set to OLD only under
  specific short-term circumstances.  Projects should be ported to the NEW
  behavior and not rely on setting a policy to OLD.

and
CMake Deprecation Warning at CMakeLists.txt:9 (cmake_policy):
  The OLD behavior for policy CMP0086 will be removed from a future version
  of CMake.

  The cmake-policies(7) manual explains that the OLD behaviors of all
  policies are deprecated and that a policy should be set to OLD only under
  specific short-term circumstances.  Projects should be ported to the NEW
  behavior and not rely on setting a policy to OLD.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6516,2022-04-16T13:29:26Z,2022-04-18T13:47:39Z,2022-04-18T13:47:39Z,CLOSED,False,2,2,1,https://github.com/jmckenna,WIP: handle CMake UseSWIG warnings,2,['Work in progress'],https://github.com/mapserver/mapserver/pull/6516,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6516#issuecomment-1100665734,"handles 2 CMake warnings:

CMake Deprecation Warning at CMakeLists.txt:6 (cmake_policy):
  The OLD behavior for policy CMP0078 will be removed from a future version
  of CMake.

  The cmake-policies(7) manual explains that the OLD behaviors of all
  policies are deprecated and that a policy should be set to OLD only under
  specific short-term circumstances.  Projects should be ported to the NEW
  behavior and not rely on setting a policy to OLD.

and
CMake Deprecation Warning at CMakeLists.txt:9 (cmake_policy):
  The OLD behavior for policy CMP0086 will be removed from a future version
  of CMake.

  The cmake-policies(7) manual explains that the OLD behaviors of all
  policies are deprecated and that a policy should be set to OLD only under
  specific short-term circumstances.  Projects should be ported to the NEW
  behavior and not rely on setting a policy to OLD.","@jmckenna  An elegant solution to use all NEW policies for versions up to CMake 3.23 is to change the first line of CMakeLists.txt to
cmake_minimum_required(VERSION 3.0...3.23)

and remove all explicit ""cmake_policy(SET ..."")
This is what is done in GDAL",True,{'THUMBS_UP': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6516,2022-04-16T13:29:26Z,2022-04-18T13:47:39Z,2022-04-18T13:47:39Z,CLOSED,False,2,2,1,https://github.com/jmckenna,WIP: handle CMake UseSWIG warnings,2,['Work in progress'],https://github.com/mapserver/mapserver/pull/6516,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6516#issuecomment-1100666209,"handles 2 CMake warnings:

CMake Deprecation Warning at CMakeLists.txt:6 (cmake_policy):
  The OLD behavior for policy CMP0078 will be removed from a future version
  of CMake.

  The cmake-policies(7) manual explains that the OLD behaviors of all
  policies are deprecated and that a policy should be set to OLD only under
  specific short-term circumstances.  Projects should be ported to the NEW
  behavior and not rely on setting a policy to OLD.

and
CMake Deprecation Warning at CMakeLists.txt:9 (cmake_policy):
  The OLD behavior for policy CMP0086 will be removed from a future version
  of CMake.

  The cmake-policies(7) manual explains that the OLD behaviors of all
  policies are deprecated and that a policy should be set to OLD only under
  specific short-term circumstances.  Projects should be ported to the NEW
  behavior and not rely on setting a policy to OLD.","@rouault I like that.  (I did notice that from GDAL's, however I stuck with this method because it was set by others here like this), will modify, thanks.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6517,2022-04-18T14:05:11Z,2022-05-11T18:44:45Z,2022-05-11T18:44:45Z,MERGED,True,17,16,6,https://github.com/jmckenna,handle various CMake policy warnings,8,[],https://github.com/mapserver/mapserver/pull/6517,https://github.com/jmckenna,1,https://github.com/MapServer/MapServer/pull/6517,"elegantly handle the various cmake_policy warnings

credit to @rouault for the proper solution


handle SVGCairo CMake warning
handle Exempi CMake warning","elegantly handle the various cmake_policy warnings

credit to @rouault for the proper solution


handle SVGCairo CMake warning
handle Exempi CMake warning",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6517,2022-04-18T14:05:11Z,2022-05-11T18:44:45Z,2022-05-11T18:44:45Z,MERGED,True,17,16,6,https://github.com/jmckenna,handle various CMake policy warnings,8,[],https://github.com/mapserver/mapserver/pull/6517,https://github.com/rouault,2,https://github.com/MapServer/MapServer/pull/6517#issuecomment-1124083008,"elegantly handle the various cmake_policy warnings

credit to @rouault for the proper solution


handle SVGCairo CMake warning
handle Exempi CMake warning",@jmckenna  I've issued a pull request against your fork hopefully fixing the remaining issues: jmckenna#1,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6517,2022-04-18T14:05:11Z,2022-05-11T18:44:45Z,2022-05-11T18:44:45Z,MERGED,True,17,16,6,https://github.com/jmckenna,handle various CMake policy warnings,8,[],https://github.com/mapserver/mapserver/pull/6517,https://github.com/jmckenna,3,https://github.com/MapServer/MapServer/pull/6517#issuecomment-1124084564,"elegantly handle the various cmake_policy warnings

credit to @rouault for the proper solution


handle SVGCairo CMake warning
handle Exempi CMake warning",thanks for this fix @rouault (!) Appreciate it.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6517,2022-04-18T14:05:11Z,2022-05-11T18:44:45Z,2022-05-11T18:44:45Z,MERGED,True,17,16,6,https://github.com/jmckenna,handle various CMake policy warnings,8,[],https://github.com/mapserver/mapserver/pull/6517,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/6517#issuecomment-1124087440,"elegantly handle the various cmake_policy warnings

credit to @rouault for the proper solution


handle SVGCairo CMake warning
handle Exempi CMake warning",Wow it looks like I was darn close.  Thanks for this change.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6518,2022-04-20T21:36:47Z,,2022-04-22T14:06:40Z,OPEN,False,339,0,3,https://github.com/pramsey,"coshp utility to support ""cloud optimized shape file""",3,[],https://github.com/mapserver/mapserver/pull/6518,https://github.com/pramsey,1,https://github.com/MapServer/MapServer/pull/6518,"To enable fast bounding box access of shapes over HTTP-offset reads, we need to sort the contents of shape files so that they appear in the same order in the shp file as they do in the qix spatial index. (Also the contents of the dbf need similar sorting.
In the spirit of sortshp the coshp utility takes in an unsorted shape file, and writes out a sorted shape file (shp, shx, dbf, qix).
> coshp                                   
Syntax: coshp [infile] [outfile]

> coshp va_2013_carto va_2013_carto_sorted
Wrote 9349 spatially sorted shapes into 'shapefile va_2013_carto_sorted'","To enable fast bounding box access of shapes over HTTP-offset reads, we need to sort the contents of shape files so that they appear in the same order in the shp file as they do in the qix spatial index. (Also the contents of the dbf need similar sorting.
In the spirit of sortshp the coshp utility takes in an unsorted shape file, and writes out a sorted shape file (shp, shx, dbf, qix).
> coshp                                   
Syntax: coshp [infile] [outfile]

> coshp va_2013_carto va_2013_carto_sorted
Wrote 9349 spatially sorted shapes into 'shapefile va_2013_carto_sorted'",True,"{'EYES': ['https://github.com/Saijin-Naib', 'https://github.com/lubojr'], 'THUMBS_UP': ['https://github.com/geographika'], 'ROCKET': ['https://github.com/kannes']}"
mapserver/mapserver,https://github.com/mapserver/mapserver,6518,2022-04-20T21:36:47Z,,2022-04-22T14:06:40Z,OPEN,False,339,0,3,https://github.com/pramsey,"coshp utility to support ""cloud optimized shape file""",3,[],https://github.com/mapserver/mapserver/pull/6518,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6518#issuecomment-1104506729,"To enable fast bounding box access of shapes over HTTP-offset reads, we need to sort the contents of shape files so that they appear in the same order in the shp file as they do in the qix spatial index. (Also the contents of the dbf need similar sorting.
In the spirit of sortshp the coshp utility takes in an unsorted shape file, and writes out a sorted shape file (shp, shx, dbf, qix).
> coshp                                   
Syntax: coshp [infile] [outfile]

> coshp va_2013_carto va_2013_carto_sorted
Wrote 9349 spatially sorted shapes into 'shapefile va_2013_carto_sorted'",Thanks @pramsey .  Is it possible for you to also include an msautotest/test as part of this PR for this utility?   (see https://mapserver.org/development/tests/autotest.html ),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6518,2022-04-20T21:36:47Z,,2022-04-22T14:06:40Z,OPEN,False,339,0,3,https://github.com/pramsey,"coshp utility to support ""cloud optimized shape file""",3,[],https://github.com/mapserver/mapserver/pull/6518,https://github.com/pramsey,3,https://github.com/MapServer/MapServer/pull/6518#issuecomment-1105620640,"To enable fast bounding box access of shapes over HTTP-offset reads, we need to sort the contents of shape files so that they appear in the same order in the shp file as they do in the qix spatial index. (Also the contents of the dbf need similar sorting.
In the spirit of sortshp the coshp utility takes in an unsorted shape file, and writes out a sorted shape file (shp, shx, dbf, qix).
> coshp                                   
Syntax: coshp [infile] [outfile]

> coshp va_2013_carto va_2013_carto_sorted
Wrote 9349 spatially sorted shapes into 'shapefile va_2013_carto_sorted'",This doesn't seem to be standard practice for the utility programs? I cannot find any tests running for shptree or sortshp.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6518,2022-04-20T21:36:47Z,,2022-04-22T14:06:40Z,OPEN,False,339,0,3,https://github.com/pramsey,"coshp utility to support ""cloud optimized shape file""",3,[],https://github.com/mapserver/mapserver/pull/6518,https://github.com/jmckenna,4,https://github.com/MapServer/MapServer/pull/6518#issuecomment-1105628049,"To enable fast bounding box access of shapes over HTTP-offset reads, we need to sort the contents of shape files so that they appear in the same order in the shp file as they do in the qix spatial index. (Also the contents of the dbf need similar sorting.
In the spirit of sortshp the coshp utility takes in an unsorted shape file, and writes out a sorted shape file (shp, shx, dbf, qix).
> coshp                                   
Syntax: coshp [infile] [outfile]

> coshp va_2013_carto va_2013_carto_sorted
Wrote 9349 spatially sorted shapes into 'shapefile va_2013_carto_sorted'","I'm not sure about 'standard practice', but I think for a new utility as part of the MapServer 8.0 release the new utility should be tested as part of msautotest.
Hope that answers your question.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6518,2022-04-20T21:36:47Z,,2022-04-22T14:06:40Z,OPEN,False,339,0,3,https://github.com/pramsey,"coshp utility to support ""cloud optimized shape file""",3,[],https://github.com/mapserver/mapserver/pull/6518,https://github.com/rouault,5,https://github.com/MapServer/MapServer/pull/6518#issuecomment-1105674544,"To enable fast bounding box access of shapes over HTTP-offset reads, we need to sort the contents of shape files so that they appear in the same order in the shp file as they do in the qix spatial index. (Also the contents of the dbf need similar sorting.
In the spirit of sortshp the coshp utility takes in an unsorted shape file, and writes out a sorted shape file (shp, shx, dbf, qix).
> coshp                                   
Syntax: coshp [infile] [outfile]

> coshp va_2013_carto va_2013_carto_sorted
Wrote 9349 spatially sorted shapes into 'shapefile va_2013_carto_sorted'","I cannot find any tests running for shptree or sortshp.

true, we are lacking on that side.
Potential way forward:

add a msautotest/utils directory with a 0-byte __init__.py file
referencing that new directory in testpaths of msautotest/pytest.ini
add a msautotest/utils/test_coshp.py file importing pytest, having one or several test functions (prefixed by ""test_"") and using os.system() to run coshp and doing some after checks
add a utils-testcase target in top Makefile that just cd msautotest/utils and run pytest in it",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6518,2022-04-20T21:36:47Z,,2022-04-22T14:06:40Z,OPEN,False,339,0,3,https://github.com/pramsey,"coshp utility to support ""cloud optimized shape file""",3,[],https://github.com/mapserver/mapserver/pull/6518,https://github.com/sdlime,6,https://github.com/MapServer/MapServer/pull/6518#issuecomment-1106552290,"To enable fast bounding box access of shapes over HTTP-offset reads, we need to sort the contents of shape files so that they appear in the same order in the shp file as they do in the qix spatial index. (Also the contents of the dbf need similar sorting.
In the spirit of sortshp the coshp utility takes in an unsorted shape file, and writes out a sorted shape file (shp, shx, dbf, qix).
> coshp                                   
Syntax: coshp [infile] [outfile]

> coshp va_2013_carto va_2013_carto_sorted
Wrote 9349 spatially sorted shapes into 'shapefile va_2013_carto_sorted'","I cannot find any tests running for shptree or sortshp.

true, we are lacking on that side. Potential way forward:

add a msautotest/utils directory with a 0-byte __init__.py file
referencing that new directory in testpaths of msautotest/pytest.ini
add a msautotest/utils/test_coshp.py file importing pytest, having one or several test functions (prefixed by ""test_"") and using os.system() to run coshp and doing some after checks
add a utils-testcase target in top Makefile that just cd msautotest/utils and run pytest in it


Seems like reasonable tests would be:
For sortshp and coshp:

compare a source and output shapefile properties e.g. feature count, extent.
compare maps rendered from source and output shapefiles.

For shptree:

compare maps rendered from a source shapefile with and without an index.

I'd can take a shot at @rouault suggestion for sortshp I guess.",True,{'THUMBS_UP': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6520,2022-04-28T17:48:08Z,,2022-05-21T12:41:59Z,OPEN,False,16241,1511,61,https://github.com/bjornharrtell,Native FlatGeobuf read support,2,['Work in progress'],https://github.com/mapserver/mapserver/pull/6520,https://github.com/bjornharrtell,1,https://github.com/MapServer/MapServer/pull/6520,"Add new connection type to enum and lexer
 Implement skeleton to handle the connection type
 Implement basic reader logic
 Handle multipolygons
 Handle attributes
 Include msautotest
 Fix shared lib build
 Handle SHAPEPATH use
 Mitigate risk of symbol clashes with GDAL (see https://lists.osgeo.org/pipermail/mapserver-dev/2022-May/016795.html)
 Create & submit RFC to the PSC : https://mapserver.org/development/rfc/ms-rfc-137.html
 Update documentation (through MapServer/MapServer-documentation#701 )

The main entry point implementation is mapflatgeobuf.c which is similar to mapshape but more simple as it mostly calls out to C API wrapper for flatgeobuf which is based on the PostGIS C API wrapper which in turn a thin wrapper for the reference FlatGeobuf C++ code. All flatgeobuf specific code except mapflatgeobuf.c is contained in subdir flatgeobuf and much of that is generated flatbuffers code and official flatbuffers C++ implementation.","Add new connection type to enum and lexer
 Implement skeleton to handle the connection type
 Implement basic reader logic
 Handle multipolygons
 Handle attributes
 Include msautotest
 Fix shared lib build
 Handle SHAPEPATH use
 Mitigate risk of symbol clashes with GDAL (see https://lists.osgeo.org/pipermail/mapserver-dev/2022-May/016795.html)
 Create & submit RFC to the PSC : https://mapserver.org/development/rfc/ms-rfc-137.html
 Update documentation (through MapServer/MapServer-documentation#701 )

The main entry point implementation is mapflatgeobuf.c which is similar to mapshape but more simple as it mostly calls out to C API wrapper for flatgeobuf which is based on the PostGIS C API wrapper which in turn a thin wrapper for the reference FlatGeobuf C++ code. All flatgeobuf specific code except mapflatgeobuf.c is contained in subdir flatgeobuf and much of that is generated flatbuffers code and official flatbuffers C++ implementation.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6520,2022-04-28T17:48:08Z,,2022-05-21T12:41:59Z,OPEN,False,16241,1511,61,https://github.com/bjornharrtell,Native FlatGeobuf read support,2,['Work in progress'],https://github.com/mapserver/mapserver/pull/6520,https://github.com/bjornharrtell,2,https://github.com/MapServer/MapServer/pull/6520#issuecomment-1113952894,"Add new connection type to enum and lexer
 Implement skeleton to handle the connection type
 Implement basic reader logic
 Handle multipolygons
 Handle attributes
 Include msautotest
 Fix shared lib build
 Handle SHAPEPATH use
 Mitigate risk of symbol clashes with GDAL (see https://lists.osgeo.org/pipermail/mapserver-dev/2022-May/016795.html)
 Create & submit RFC to the PSC : https://mapserver.org/development/rfc/ms-rfc-137.html
 Update documentation (through MapServer/MapServer-documentation#701 )

The main entry point implementation is mapflatgeobuf.c which is similar to mapshape but more simple as it mostly calls out to C API wrapper for flatgeobuf which is based on the PostGIS C API wrapper which in turn a thin wrapper for the reference FlatGeobuf C++ code. All flatgeobuf specific code except mapflatgeobuf.c is contained in subdir flatgeobuf and much of that is generated flatbuffers code and official flatbuffers C++ implementation.",b712309 helped to get the subdir compiled into a library it is not found when linking.. must be something more needed for the root CMakeLists.txt.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6520,2022-04-28T17:48:08Z,,2022-05-21T12:41:59Z,OPEN,False,16241,1511,61,https://github.com/bjornharrtell,Native FlatGeobuf read support,2,['Work in progress'],https://github.com/mapserver/mapserver/pull/6520,https://github.com/bjornharrtell,3,https://github.com/MapServer/MapServer/pull/6520#issuecomment-1115364890,"Add new connection type to enum and lexer
 Implement skeleton to handle the connection type
 Implement basic reader logic
 Handle multipolygons
 Handle attributes
 Include msautotest
 Fix shared lib build
 Handle SHAPEPATH use
 Mitigate risk of symbol clashes with GDAL (see https://lists.osgeo.org/pipermail/mapserver-dev/2022-May/016795.html)
 Create & submit RFC to the PSC : https://mapserver.org/development/rfc/ms-rfc-137.html
 Update documentation (through MapServer/MapServer-documentation#701 )

The main entry point implementation is mapflatgeobuf.c which is similar to mapshape but more simple as it mostly calls out to C API wrapper for flatgeobuf which is based on the PostGIS C API wrapper which in turn a thin wrapper for the reference FlatGeobuf C++ code. All flatgeobuf specific code except mapflatgeobuf.c is contained in subdir flatgeobuf and much of that is generated flatbuffers code and official flatbuffers C++ implementation.",This builds and works for me locally when configured to create a static linked build. @jratike80 do you know what is needed to make it work for a dynamic linked build?,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6520,2022-04-28T17:48:08Z,,2022-05-21T12:41:59Z,OPEN,False,16241,1511,61,https://github.com/bjornharrtell,Native FlatGeobuf read support,2,['Work in progress'],https://github.com/mapserver/mapserver/pull/6520,https://github.com/jratike80,4,https://github.com/MapServer/MapServer/pull/6520#issuecomment-1115374743,"Add new connection type to enum and lexer
 Implement skeleton to handle the connection type
 Implement basic reader logic
 Handle multipolygons
 Handle attributes
 Include msautotest
 Fix shared lib build
 Handle SHAPEPATH use
 Mitigate risk of symbol clashes with GDAL (see https://lists.osgeo.org/pipermail/mapserver-dev/2022-May/016795.html)
 Create & submit RFC to the PSC : https://mapserver.org/development/rfc/ms-rfc-137.html
 Update documentation (through MapServer/MapServer-documentation#701 )

The main entry point implementation is mapflatgeobuf.c which is similar to mapshape but more simple as it mostly calls out to C API wrapper for flatgeobuf which is based on the PostGIS C API wrapper which in turn a thin wrapper for the reference FlatGeobuf C++ code. All flatgeobuf specific code except mapflatgeobuf.c is contained in subdir flatgeobuf and much of that is generated flatbuffers code and official flatbuffers C++ implementation.","For sure I can't help with builds, I do not program at all, I am just a somewhat experienced GIS user.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6520,2022-04-28T17:48:08Z,,2022-05-21T12:41:59Z,OPEN,False,16241,1511,61,https://github.com/bjornharrtell,Native FlatGeobuf read support,2,['Work in progress'],https://github.com/mapserver/mapserver/pull/6520,https://github.com/bjornharrtell,5,https://github.com/MapServer/MapServer/pull/6520#issuecomment-1116029891,"Add new connection type to enum and lexer
 Implement skeleton to handle the connection type
 Implement basic reader logic
 Handle multipolygons
 Handle attributes
 Include msautotest
 Fix shared lib build
 Handle SHAPEPATH use
 Mitigate risk of symbol clashes with GDAL (see https://lists.osgeo.org/pipermail/mapserver-dev/2022-May/016795.html)
 Create & submit RFC to the PSC : https://mapserver.org/development/rfc/ms-rfc-137.html
 Update documentation (through MapServer/MapServer-documentation#701 )

The main entry point implementation is mapflatgeobuf.c which is similar to mapshape but more simple as it mostly calls out to C API wrapper for flatgeobuf which is based on the PostGIS C API wrapper which in turn a thin wrapper for the reference FlatGeobuf C++ code. All flatgeobuf specific code except mapflatgeobuf.c is contained in subdir flatgeobuf and much of that is generated flatbuffers code and official flatbuffers C++ implementation.","@jratike80 I see, I thought otherwise because you noted the wrong args thing. :)",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6520,2022-04-28T17:48:08Z,,2022-05-21T12:41:59Z,OPEN,False,16241,1511,61,https://github.com/bjornharrtell,Native FlatGeobuf read support,2,['Work in progress'],https://github.com/mapserver/mapserver/pull/6520,https://github.com/jmckenna,6,https://github.com/MapServer/MapServer/pull/6520#issuecomment-1117856063,"Add new connection type to enum and lexer
 Implement skeleton to handle the connection type
 Implement basic reader logic
 Handle multipolygons
 Handle attributes
 Include msautotest
 Fix shared lib build
 Handle SHAPEPATH use
 Mitigate risk of symbol clashes with GDAL (see https://lists.osgeo.org/pipermail/mapserver-dev/2022-May/016795.html)
 Create & submit RFC to the PSC : https://mapserver.org/development/rfc/ms-rfc-137.html
 Update documentation (through MapServer/MapServer-documentation#701 )

The main entry point implementation is mapflatgeobuf.c which is similar to mapshape but more simple as it mostly calls out to C API wrapper for flatgeobuf which is based on the PostGIS C API wrapper which in turn a thin wrapper for the reference FlatGeobuf C++ code. All flatgeobuf specific code except mapflatgeobuf.c is contained in subdir flatgeobuf and much of that is generated flatbuffers code and official flatbuffers C++ implementation.","@bjornharrtell here are 3 build errors that need your attention :)
/home/runner/work/MapServer/MapServer/mapflatgeobuf.c: In function ‘msFlatGeobufLayerWhichShapes’:
/home/runner/work/MapServer/MapServer/mapflatgeobuf.c:200:69: error: unused parameter ‘isQuery’ [-Werror=unused-parameter]
 int msFlatGeobufLayerWhichShapes(layerObj *layer, rectObj rect, int isQuery)
                                                                     ^~~~~~~
/home/runner/work/MapServer/MapServer/mapflatgeobuf.c: In function ‘msFlatGeobufLayerGetShape’:
/home/runner/work/MapServer/MapServer/mapflatgeobuf.c:249:58: error: unused parameter ‘shape’ [-Werror=unused-parameter]
 int msFlatGeobufLayerGetShape(layerObj *layer, shapeObj *shape, resultObj *record)
                                                          ^~~~~
/home/runner/work/MapServer/MapServer/mapflatgeobuf.c:249:76: error: unused parameter ‘record’ [-Werror=unused-parameter]
 int msFlatGeobufLayerGetShape(layerObj *layer, shapeObj *shape, resultObj *record)
                                                                            ^~~~~~
cc1: all warnings being treated as errors
CMakeFiles/mapserver.dir/build.make:1524: recipe for target 'CMakeFiles/mapserver.dir/mapflatgeobuf.c.o' failed
make[3]: *** [CMakeFiles/mapserver.dir/mapflatgeobuf.c.o] Error 1",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6520,2022-04-28T17:48:08Z,,2022-05-21T12:41:59Z,OPEN,False,16241,1511,61,https://github.com/bjornharrtell,Native FlatGeobuf read support,2,['Work in progress'],https://github.com/mapserver/mapserver/pull/6520,https://github.com/jmckenna,7,https://github.com/MapServer/MapServer/pull/6520#issuecomment-1119005394,"Add new connection type to enum and lexer
 Implement skeleton to handle the connection type
 Implement basic reader logic
 Handle multipolygons
 Handle attributes
 Include msautotest
 Fix shared lib build
 Handle SHAPEPATH use
 Mitigate risk of symbol clashes with GDAL (see https://lists.osgeo.org/pipermail/mapserver-dev/2022-May/016795.html)
 Create & submit RFC to the PSC : https://mapserver.org/development/rfc/ms-rfc-137.html
 Update documentation (through MapServer/MapServer-documentation#701 )

The main entry point implementation is mapflatgeobuf.c which is similar to mapshape but more simple as it mostly calls out to C API wrapper for flatgeobuf which is based on the PostGIS C API wrapper which in turn a thin wrapper for the reference FlatGeobuf C++ code. All flatgeobuf specific code except mapflatgeobuf.c is contained in subdir flatgeobuf and much of that is generated flatbuffers code and official flatbuffers C++ implementation.","@bjornharrtell can you try to run locally the mapfile msautotest/misc/flatgeobuf.map ?  Bizarre, if I change that to CONNECTIONTYPE OGR it works fine, but I can't seem to get MapServer to access that africa.fgb natively.     (I tried on Ubuntu and Windows)     Sorry, thanks.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6520,2022-04-28T17:48:08Z,,2022-05-21T12:41:59Z,OPEN,False,16241,1511,61,https://github.com/bjornharrtell,Native FlatGeobuf read support,2,['Work in progress'],https://github.com/mapserver/mapserver/pull/6520,https://github.com/jmckenna,8,https://github.com/MapServer/MapServer/pull/6520#issuecomment-1125162597,"Add new connection type to enum and lexer
 Implement skeleton to handle the connection type
 Implement basic reader logic
 Handle multipolygons
 Handle attributes
 Include msautotest
 Fix shared lib build
 Handle SHAPEPATH use
 Mitigate risk of symbol clashes with GDAL (see https://lists.osgeo.org/pipermail/mapserver-dev/2022-May/016795.html)
 Create & submit RFC to the PSC : https://mapserver.org/development/rfc/ms-rfc-137.html
 Update documentation (through MapServer/MapServer-documentation#701 )

The main entry point implementation is mapflatgeobuf.c which is similar to mapshape but more simple as it mostly calls out to C API wrapper for flatgeobuf which is based on the PostGIS C API wrapper which in turn a thin wrapper for the reference FlatGeobuf C++ code. All flatgeobuf specific code except mapflatgeobuf.c is contained in subdir flatgeobuf and much of that is generated flatbuffers code and official flatbuffers C++ implementation.","@bjornharrtell local testing feedback on Windows (and on Ubuntu-focal) with latest changes:

flatgeobuf.map now works (generates a valid map image), but only if you remove the ""CONNECTIONTYPE flatgeobuf"" line.  With that line the usual error is returned:

Image handling error. Failed to draw layer named 'africa-continent'.


using that working way, a map image is generated but a warning is returned:

msSearchDiskTree(): Search returned no results. Unable to open spatial index for C:\ms4w\apps\ticket-flatgeobuf/.\./data/countries.fgb.qix. In most cases you can safely ignore this message, otherwise check file names and permissions.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6520,2022-04-28T17:48:08Z,,2022-05-21T12:41:59Z,OPEN,False,16241,1511,61,https://github.com/bjornharrtell,Native FlatGeobuf read support,2,['Work in progress'],https://github.com/mapserver/mapserver/pull/6520,https://github.com/jmckenna,9,https://github.com/MapServer/MapServer/pull/6520#issuecomment-1125240440,"Add new connection type to enum and lexer
 Implement skeleton to handle the connection type
 Implement basic reader logic
 Handle multipolygons
 Handle attributes
 Include msautotest
 Fix shared lib build
 Handle SHAPEPATH use
 Mitigate risk of symbol clashes with GDAL (see https://lists.osgeo.org/pipermail/mapserver-dev/2022-May/016795.html)
 Create & submit RFC to the PSC : https://mapserver.org/development/rfc/ms-rfc-137.html
 Update documentation (through MapServer/MapServer-documentation#701 )

The main entry point implementation is mapflatgeobuf.c which is similar to mapshape but more simple as it mostly calls out to C API wrapper for flatgeobuf which is based on the PostGIS C API wrapper which in turn a thin wrapper for the reference FlatGeobuf C++ code. All flatgeobuf specific code except mapflatgeobuf.c is contained in subdir flatgeobuf and much of that is generated flatbuffers code and official flatbuffers C++ implementation.","@bjornharrtell ah, it seems to be related to SHAPEPATH (note to self: for MapServer 9.0 we should really rename this parameter).  If I specify SHAPEPATH I get the above problem Image handling error (SHAPEPATH is the path to the data folder usually, which then removes the requirement to specify that folder in the DATA statement).  I removed SHAPEPATH from my tests and CONNECTIONTYPE FLATGEOBUF 'works' for the continents layer.  'Works"" because a memory leak is thrown:
=================================================================
==415440==ERROR: LeakSanitizer: detected memory leaks

Direct leak of 4096 byte(s) in 1 object(s) allocated from:
    #0 0x7feede1e8330 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.5+0xe9330)
    #1 0x7feeddeac907 in flatgeobuf_ensure_buf /mapserver/src/MapServer-git-bjornharrtell/flatgeobuf/flatgeobuf_c.cpp:64
    #2 0x7feeddeac969 in flatgeobuf_ensure_buf /mapserver/src/MapServer-git-bjornharrtell/flatgeobuf/flatgeobuf_c.cpp:70
    #3 0x7feeddeacdb8 in flatgeobuf_decode_header /mapserver/src/MapServer-git-bjornharrtell/flatgeobuf/flatgeobuf_c.cpp:152
    #4 0x7feedde77523 in msFlatGeobufLayerOpen /mapserver/src/MapServer-git-bjornharrtell/mapflatgeobuf.c:138
    #5 0x7feeddc50bb4 in msLayerOpen /mapserver/src/MapServer-git-bjornharrtell/maplayer.c:248
    #6 0x7feeddcb3369 in msDrawVectorLayer /mapserver/src/MapServer-git-bjornharrtell/mapdraw.c:1006
    #7 0x7feeddcb1efd in msDrawLayer /mapserver/src/MapServer-git-bjornharrtell/mapdraw.c:876
    #8 0x7feeddcae4ed in msDrawMap /mapserver/src/MapServer-git-bjornharrtell/mapdraw.c:444
    #9 0x562d91e2dbfa in main /mapserver/src/MapServer-git-bjornharrtell/map2img.c:319
    #10 0x7feedaefb09a in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2409a)

SUMMARY: AddressSanitizer: 4096 byte(s) leaked in 1 allocation(s).

That solution doesn't solve the classes layer (maybe because you are working on the attributes part still).  No map image is generated, here is that error:
msDrawMap(): Image handling error. Failed to draw layer named 'africa-classes'. <br>

=================================================================
==415458==ERROR: LeakSanitizer: detected memory leaks

Direct leak of 4096 byte(s) in 1 object(s) allocated from:
    #0 0x7efd3c336330 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.5+0xe9330)
    #1 0x7efd3bffa907 in flatgeobuf_ensure_buf /mapserver/src/MapServer-git-bjornharrtell/flatgeobuf/flatgeobuf_c.cpp:64
    #2 0x7efd3bffa969 in flatgeobuf_ensure_buf /mapserver/src/MapServer-git-bjornharrtell/flatgeobuf/flatgeobuf_c.cpp:70
    #3 0x7efd3bffadb8 in flatgeobuf_decode_header /mapserver/src/MapServer-git-bjornharrtell/flatgeobuf/flatgeobuf_c.cpp:152
    #4 0x7efd3bfc5523 in msFlatGeobufLayerOpen /mapserver/src/MapServer-git-bjornharrtell/mapflatgeobuf.c:138
    #5 0x7efd3bd9ebb4 in msLayerOpen /mapserver/src/MapServer-git-bjornharrtell/maplayer.c:248
    #6 0x7efd3be01369 in msDrawVectorLayer /mapserver/src/MapServer-git-bjornharrtell/mapdraw.c:1006
    #7 0x7efd3bdffefd in msDrawLayer /mapserver/src/MapServer-git-bjornharrtell/mapdraw.c:876
    #8 0x7efd3bdfc4ed in msDrawMap /mapserver/src/MapServer-git-bjornharrtell/mapdraw.c:444
    #9 0x56065a283bfa in main /mapserver/src/MapServer-git-bjornharrtell/map2img.c:319
    #10 0x7efd3904909a in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2409a)

SUMMARY: AddressSanitizer: 4096 byte(s) leaked in 1 allocation(s).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6520,2022-04-28T17:48:08Z,,2022-05-21T12:41:59Z,OPEN,False,16241,1511,61,https://github.com/bjornharrtell,Native FlatGeobuf read support,2,['Work in progress'],https://github.com/mapserver/mapserver/pull/6520,https://github.com/bjornharrtell,10,https://github.com/MapServer/MapServer/pull/6520#issuecomment-1125281712,"Add new connection type to enum and lexer
 Implement skeleton to handle the connection type
 Implement basic reader logic
 Handle multipolygons
 Handle attributes
 Include msautotest
 Fix shared lib build
 Handle SHAPEPATH use
 Mitigate risk of symbol clashes with GDAL (see https://lists.osgeo.org/pipermail/mapserver-dev/2022-May/016795.html)
 Create & submit RFC to the PSC : https://mapserver.org/development/rfc/ms-rfc-137.html
 Update documentation (through MapServer/MapServer-documentation#701 )

The main entry point implementation is mapflatgeobuf.c which is similar to mapshape but more simple as it mostly calls out to C API wrapper for flatgeobuf which is based on the PostGIS C API wrapper which in turn a thin wrapper for the reference FlatGeobuf C++ code. All flatgeobuf specific code except mapflatgeobuf.c is contained in subdir flatgeobuf and much of that is generated flatbuffers code and official flatbuffers C++ implementation.","Ok yeah I'm not sure SHAPEPATH is used for my logic at all so that could explain that, and attributes is still not implemented at all so that explains the other.
I have an idea what causes the memory leaks, I should be able to work that out if I can reproduce locally.",True,{'THUMBS_UP': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6520,2022-04-28T17:48:08Z,,2022-05-21T12:41:59Z,OPEN,False,16241,1511,61,https://github.com/bjornharrtell,Native FlatGeobuf read support,2,['Work in progress'],https://github.com/mapserver/mapserver/pull/6520,https://github.com/jmckenna,11,https://github.com/MapServer/MapServer/pull/6520#issuecomment-1126743457,"Add new connection type to enum and lexer
 Implement skeleton to handle the connection type
 Implement basic reader logic
 Handle multipolygons
 Handle attributes
 Include msautotest
 Fix shared lib build
 Handle SHAPEPATH use
 Mitigate risk of symbol clashes with GDAL (see https://lists.osgeo.org/pipermail/mapserver-dev/2022-May/016795.html)
 Create & submit RFC to the PSC : https://mapserver.org/development/rfc/ms-rfc-137.html
 Update documentation (through MapServer/MapServer-documentation#701 )

The main entry point implementation is mapflatgeobuf.c which is similar to mapshape but more simple as it mostly calls out to C API wrapper for flatgeobuf which is based on the PostGIS C API wrapper which in turn a thin wrapper for the reference FlatGeobuf C++ code. All flatgeobuf specific code except mapflatgeobuf.c is contained in subdir flatgeobuf and much of that is generated flatbuffers code and official flatbuffers C++ implementation.","@bjornharrtell the recent attribute changes cause a blank (empty) map image from msautotest for the ""africa-classes"" layer (3 polygons should be displayed).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6520,2022-04-28T17:48:08Z,,2022-05-21T12:41:59Z,OPEN,False,16241,1511,61,https://github.com/bjornharrtell,Native FlatGeobuf read support,2,['Work in progress'],https://github.com/mapserver/mapserver/pull/6520,https://github.com/bjornharrtell,12,https://github.com/MapServer/MapServer/pull/6520#issuecomment-1127578672,"Add new connection type to enum and lexer
 Implement skeleton to handle the connection type
 Implement basic reader logic
 Handle multipolygons
 Handle attributes
 Include msautotest
 Fix shared lib build
 Handle SHAPEPATH use
 Mitigate risk of symbol clashes with GDAL (see https://lists.osgeo.org/pipermail/mapserver-dev/2022-May/016795.html)
 Create & submit RFC to the PSC : https://mapserver.org/development/rfc/ms-rfc-137.html
 Update documentation (through MapServer/MapServer-documentation#701 )

The main entry point implementation is mapflatgeobuf.c which is similar to mapshape but more simple as it mostly calls out to C API wrapper for flatgeobuf which is based on the PostGIS C API wrapper which in turn a thin wrapper for the reference FlatGeobuf C++ code. All flatgeobuf specific code except mapflatgeobuf.c is contained in subdir flatgeobuf and much of that is generated flatbuffers code and official flatbuffers C++ implementation.",@jmckenna I believe this is now feature complete :),True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6520,2022-04-28T17:48:08Z,,2022-05-21T12:41:59Z,OPEN,False,16241,1511,61,https://github.com/bjornharrtell,Native FlatGeobuf read support,2,['Work in progress'],https://github.com/mapserver/mapserver/pull/6520,https://github.com/jmckenna,13,https://github.com/MapServer/MapServer/pull/6520#issuecomment-1127583123,"Add new connection type to enum and lexer
 Implement skeleton to handle the connection type
 Implement basic reader logic
 Handle multipolygons
 Handle attributes
 Include msautotest
 Fix shared lib build
 Handle SHAPEPATH use
 Mitigate risk of symbol clashes with GDAL (see https://lists.osgeo.org/pipermail/mapserver-dev/2022-May/016795.html)
 Create & submit RFC to the PSC : https://mapserver.org/development/rfc/ms-rfc-137.html
 Update documentation (through MapServer/MapServer-documentation#701 )

The main entry point implementation is mapflatgeobuf.c which is similar to mapshape but more simple as it mostly calls out to C API wrapper for flatgeobuf which is based on the PostGIS C API wrapper which in turn a thin wrapper for the reference FlatGeobuf C++ code. All flatgeobuf specific code except mapflatgeobuf.c is contained in subdir flatgeobuf and much of that is generated flatbuffers code and official flatbuffers C++ implementation.","@bjornharrtell great, will test this morning.  thanks!",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6520,2022-04-28T17:48:08Z,,2022-05-21T12:41:59Z,OPEN,False,16241,1511,61,https://github.com/bjornharrtell,Native FlatGeobuf read support,2,['Work in progress'],https://github.com/mapserver/mapserver/pull/6520,https://github.com/jmckenna,14,https://github.com/MapServer/MapServer/pull/6520#issuecomment-1127933325,"Add new connection type to enum and lexer
 Implement skeleton to handle the connection type
 Implement basic reader logic
 Handle multipolygons
 Handle attributes
 Include msautotest
 Fix shared lib build
 Handle SHAPEPATH use
 Mitigate risk of symbol clashes with GDAL (see https://lists.osgeo.org/pipermail/mapserver-dev/2022-May/016795.html)
 Create & submit RFC to the PSC : https://mapserver.org/development/rfc/ms-rfc-137.html
 Update documentation (through MapServer/MapServer-documentation#701 )

The main entry point implementation is mapflatgeobuf.c which is similar to mapshape but more simple as it mostly calls out to C API wrapper for flatgeobuf which is based on the PostGIS C API wrapper which in turn a thin wrapper for the reference FlatGeobuf C++ code. All flatgeobuf specific code except mapflatgeobuf.c is contained in subdir flatgeobuf and much of that is generated flatbuffers code and official flatbuffers C++ implementation.","@bjornharrtell thanks! Last task I believe is to handle SHAPEPATH use in the layer, I've added another test for that.",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6520,2022-04-28T17:48:08Z,,2022-05-21T12:41:59Z,OPEN,False,16241,1511,61,https://github.com/bjornharrtell,Native FlatGeobuf read support,2,['Work in progress'],https://github.com/mapserver/mapserver/pull/6520,https://github.com/jmckenna,15,https://github.com/MapServer/MapServer/pull/6520#issuecomment-1128069327,"Add new connection type to enum and lexer
 Implement skeleton to handle the connection type
 Implement basic reader logic
 Handle multipolygons
 Handle attributes
 Include msautotest
 Fix shared lib build
 Handle SHAPEPATH use
 Mitigate risk of symbol clashes with GDAL (see https://lists.osgeo.org/pipermail/mapserver-dev/2022-May/016795.html)
 Create & submit RFC to the PSC : https://mapserver.org/development/rfc/ms-rfc-137.html
 Update documentation (through MapServer/MapServer-documentation#701 )

The main entry point implementation is mapflatgeobuf.c which is similar to mapshape but more simple as it mostly calls out to C API wrapper for flatgeobuf which is based on the PostGIS C API wrapper which in turn a thin wrapper for the reference FlatGeobuf C++ code. All flatgeobuf specific code except mapflatgeobuf.c is contained in subdir flatgeobuf and much of that is generated flatbuffers code and official flatbuffers C++ implementation.","thanks @bjornharrtell, working well here.  Let's plan to submit the RFC officially tomorrow/Tuesday.",True,{'THUMBS_UP': ['https://github.com/bjornharrtell']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6520,2022-04-28T17:48:08Z,,2022-05-21T12:41:59Z,OPEN,False,16241,1511,61,https://github.com/bjornharrtell,Native FlatGeobuf read support,2,['Work in progress'],https://github.com/mapserver/mapserver/pull/6520,https://github.com/bjornharrtell,16,https://github.com/MapServer/MapServer/pull/6520#issuecomment-1131315217,"Add new connection type to enum and lexer
 Implement skeleton to handle the connection type
 Implement basic reader logic
 Handle multipolygons
 Handle attributes
 Include msautotest
 Fix shared lib build
 Handle SHAPEPATH use
 Mitigate risk of symbol clashes with GDAL (see https://lists.osgeo.org/pipermail/mapserver-dev/2022-May/016795.html)
 Create & submit RFC to the PSC : https://mapserver.org/development/rfc/ms-rfc-137.html
 Update documentation (through MapServer/MapServer-documentation#701 )

The main entry point implementation is mapflatgeobuf.c which is similar to mapshape but more simple as it mostly calls out to C API wrapper for flatgeobuf which is based on the PostGIS C API wrapper which in turn a thin wrapper for the reference FlatGeobuf C++ code. All flatgeobuf specific code except mapflatgeobuf.c is contained in subdir flatgeobuf and much of that is generated flatbuffers code and official flatbuffers C++ implementation.",Added todo item to handle the risk of symbol clash.,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6520,2022-04-28T17:48:08Z,,2022-05-21T12:41:59Z,OPEN,False,16241,1511,61,https://github.com/bjornharrtell,Native FlatGeobuf read support,2,['Work in progress'],https://github.com/mapserver/mapserver/pull/6520,https://github.com/bjornharrtell,17,https://github.com/MapServer/MapServer/pull/6520#issuecomment-1131364942,"Add new connection type to enum and lexer
 Implement skeleton to handle the connection type
 Implement basic reader logic
 Handle multipolygons
 Handle attributes
 Include msautotest
 Fix shared lib build
 Handle SHAPEPATH use
 Mitigate risk of symbol clashes with GDAL (see https://lists.osgeo.org/pipermail/mapserver-dev/2022-May/016795.html)
 Create & submit RFC to the PSC : https://mapserver.org/development/rfc/ms-rfc-137.html
 Update documentation (through MapServer/MapServer-documentation#701 )

The main entry point implementation is mapflatgeobuf.c which is similar to mapshape but more simple as it mostly calls out to C API wrapper for flatgeobuf which is based on the PostGIS C API wrapper which in turn a thin wrapper for the reference FlatGeobuf C++ code. All flatgeobuf specific code except mapflatgeobuf.c is contained in subdir flatgeobuf and much of that is generated flatbuffers code and official flatbuffers C++ implementation.","@rouault if I understand correctly, the trick used at https://github.com/OSGeo/PROJ/blob/9f89c7288e44c64ba234a299b1d5528a54d9d61e/include/proj/util.hpp#L104 would require all involved headers to be modified? That would be very unfortunate as they are directly from upstream. But I suppose there might be no other way short of making it a shared library dependency (which will not be easy short term).",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6520,2022-04-28T17:48:08Z,,2022-05-21T12:41:59Z,OPEN,False,16241,1511,61,https://github.com/bjornharrtell,Native FlatGeobuf read support,2,['Work in progress'],https://github.com/mapserver/mapserver/pull/6520,https://github.com/bjornharrtell,18,https://github.com/MapServer/MapServer/pull/6520#issuecomment-1133627829,"Add new connection type to enum and lexer
 Implement skeleton to handle the connection type
 Implement basic reader logic
 Handle multipolygons
 Handle attributes
 Include msautotest
 Fix shared lib build
 Handle SHAPEPATH use
 Mitigate risk of symbol clashes with GDAL (see https://lists.osgeo.org/pipermail/mapserver-dev/2022-May/016795.html)
 Create & submit RFC to the PSC : https://mapserver.org/development/rfc/ms-rfc-137.html
 Update documentation (through MapServer/MapServer-documentation#701 )

The main entry point implementation is mapflatgeobuf.c which is similar to mapshape but more simple as it mostly calls out to C API wrapper for flatgeobuf which is based on the PostGIS C API wrapper which in turn a thin wrapper for the reference FlatGeobuf C++ code. All flatgeobuf specific code except mapflatgeobuf.c is contained in subdir flatgeobuf and much of that is generated flatbuffers code and official flatbuffers C++ implementation.","I've made the adjustments to avoid the risk of symbol clash, so this is now ready AFAIK.",True,{'THUMBS_UP': ['https://github.com/jmckenna']}
mapserver/mapserver,https://github.com/mapserver/mapserver,6522,2022-05-02T20:05:00Z,2022-05-02T20:36:24Z,2022-05-02T20:36:24Z,MERGED,True,5,1,1,https://github.com/szekerest,Handle null shapes in msShapefileWhichShapes (#6521),1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6522,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/6522,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6522,2022-05-02T20:05:00Z,2022-05-02T20:36:24Z,2022-05-02T20:36:24Z,MERGED,True,5,1,1,https://github.com/szekerest,Handle null shapes in msShapefileWhichShapes (#6521),1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6522,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6522#issuecomment-1115341354,,great catch @szekerest,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6523,2022-05-02T20:36:47Z,2022-05-03T12:22:43Z,2022-05-03T12:22:44Z,MERGED,True,5,1,1,https://github.com/apps/github-actions,[Backport branch-7-6] Handle null shapes in msShapefileWhichShapes (#6521),1,[],https://github.com/mapserver/mapserver/pull/6523,https://github.com/apps/github-actions,1,https://github.com/MapServer/MapServer/pull/6523,"Backport #6522
Authored by: @szekerest","Backport #6522
Authored by: @szekerest",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6525,2022-05-04T17:58:07Z,2022-05-05T13:43:04Z,2022-05-05T13:43:04Z,MERGED,True,5,0,1,https://github.com/szekerest,Fix shapefile driver crash in msSHPLayerNextShape (#6524),1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6525,https://github.com/szekerest,1,https://github.com/MapServer/MapServer/pull/6525,,,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6525,2022-05-04T17:58:07Z,2022-05-05T13:43:04Z,2022-05-05T13:43:04Z,MERGED,True,5,0,1,https://github.com/szekerest,Fix shapefile driver crash in msSHPLayerNextShape (#6524),1,['backport branch-7-6'],https://github.com/mapserver/mapserver/pull/6525,https://github.com/jmckenna,2,https://github.com/MapServer/MapServer/pull/6525#issuecomment-1118570600,,thanks @szekerest !,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6526,2022-05-05T13:43:31Z,2022-05-05T14:28:04Z,2022-05-05T14:28:05Z,MERGED,True,5,0,1,https://github.com/apps/github-actions,[Backport branch-7-6] Fix shapefile driver crash in msSHPLayerNextShape (#6524),1,[],https://github.com/mapserver/mapserver/pull/6526,https://github.com/apps/github-actions,1,https://github.com/MapServer/MapServer/pull/6526,"Backport #6525
Authored by: @szekerest","Backport #6525
Authored by: @szekerest",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6527,2022-05-14T15:24:05Z,2022-05-16T17:21:54Z,2022-05-17T18:39:22Z,MERGED,True,2,8,1,https://github.com/rouault,CMake: fix recent issue with mapscript python,1,[],https://github.com/mapserver/mapserver/pull/6527,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6527,"where 'make' no longer copied files needed to run 'python setup.py bdist'
follow-up of 2f52ef4
CC @szekerest","where 'make' no longer copied files needed to run 'python setup.py bdist'
follow-up of 2f52ef4
CC @szekerest",True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6527,2022-05-14T15:24:05Z,2022-05-16T17:21:54Z,2022-05-17T18:39:22Z,MERGED,True,2,8,1,https://github.com/rouault,CMake: fix recent issue with mapscript python,1,[],https://github.com/mapserver/mapserver/pull/6527,https://github.com/szekerest,2,https://github.com/MapServer/MapServer/pull/6527#issuecomment-1129196796,"where 'make' no longer copied files needed to run 'python setup.py bdist'
follow-up of 2f52ef4
CC @szekerest",Thanks @rouault,True,{}
mapserver/mapserver,https://github.com/mapserver/mapserver,6531,2022-05-23T18:56:18Z,2022-05-23T19:54:50Z,2022-05-23T19:54:51Z,MERGED,True,38,31,6,https://github.com/rouault,Fix compiler warnings with gcc 9.4.0 of ubuntu 20.04 with CFLAGS='-O2 -Wall -Werror -Wextra',1,[],https://github.com/mapserver/mapserver/pull/6531,https://github.com/rouault,1,https://github.com/MapServer/MapServer/pull/6531,,,True,{}
