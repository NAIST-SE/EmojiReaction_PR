CGNS/CGNS,https://github.com/CGNS/CGNS,11,2016-01-26T15:50:36Z,2016-01-26T16:47:03Z,2016-01-26T16:48:05Z,MERGED,True,1,1,1,https://github.com/gsjaardema,Support Mac's dylib shared library suffix,1,[],https://github.com/CGNS/CGNS/pull/11,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/11,Use a predefined CMake variable to specify the shared library suffix (.so vs .dylib) to facilitate building on MacOSX,Use a predefined CMake variable to specify the shared library suffix (.so vs .dylib) to facilitate building on MacOSX,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,11,2016-01-26T15:50:36Z,2016-01-26T16:47:03Z,2016-01-26T16:48:05Z,MERGED,True,1,1,1,https://github.com/gsjaardema,Support Mac's dylib shared library suffix,1,[],https://github.com/CGNS/CGNS/pull/11,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/11#issuecomment-175109839,Use a predefined CMake variable to specify the shared library suffix (.so vs .dylib) to facilitate building on MacOSX,"Thanks, I've added the enable build shared option for daily testing.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,12,2016-03-11T08:24:02Z,2016-03-11T20:07:29Z,2016-03-11T20:07:29Z,MERGED,True,10,0,2,https://github.com/mennodeij,Fixes for CGNS-83: Large files fail on 64-bit windows,1,[],https://github.com/CGNS/CGNS/pull/12,https://github.com/mennodeij,1,https://github.com/CGNS/CGNS/pull/12,"The problem is that the incorrect stat implementation was used; instead of _stat32i64 it defaults to _stat64i32 (VS2010/x64). By re-defining stat to _stat32i64 in cgnstypes.h (that is, in the CMake .in file and in the configure.bat file), this problem is solved and files larger than 2^32-1 bytes can be opened.","The problem is that the incorrect stat implementation was used; instead of _stat32i64 it defaults to _stat64i32 (VS2010/x64). By re-defining stat to _stat32i64 in cgnstypes.h (that is, in the CMake .in file and in the configure.bat file), this problem is solved and files larger than 2^32-1 bytes can be opened.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,13,2016-08-15T18:30:07Z,2016-08-22T16:18:37Z,2016-08-22T16:18:37Z,MERGED,True,1,1,1,https://github.com/gsjaardema,Remove incorrect semicolon,1,[],https://github.com/CGNS/CGNS/pull/13,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/13,Removed semicolon which was rendering if statement to be ineffective.,Removed semicolon which was rendering if statement to be ineffective.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,14,2016-08-15T18:32:47Z,2020-03-11T14:45:57Z,2020-03-11T14:45:57Z,CLOSED,False,1,1,1,https://github.com/gsjaardema,Add missing include path,1,[],https://github.com/CGNS/CGNS/pull/14,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/14,"CMake-based build of tkogl was missing include path for opengl headers.  Not sure this is the correct fix, but it eliminates this and several other errors about not being able to find GL/gl.h","CMake-based build of tkogl was missing include path for opengl headers.  Not sure this is the correct fix, but it eliminates this and several other errors about not being able to find GL/gl.h",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,14,2016-08-15T18:32:47Z,2020-03-11T14:45:57Z,2020-03-11T14:45:57Z,CLOSED,False,1,1,1,https://github.com/gsjaardema,Add missing include path,1,[],https://github.com/CGNS/CGNS/pull/14,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/14#issuecomment-245608935,"CMake-based build of tkogl was missing include path for opengl headers.  Not sure this is the correct fix, but it eliminates this and several other errors about not being able to find GL/gl.h","I'm wondering if should redo the include, from stackoverflow:
http://stackoverflow.com/questions/16192775/cmake-opengl-include-dirs-are-named-differently-on-different-platforms
You have a couple of choices here. The simplest is to add ${OPENGL_INCLUDE_DIR}/GL or ${OPENGL_INCLUDE_DIR}/OpenGL to your include search paths and use
#include ""gl.h""
in your source code.
The case of filenames is disregarded on Windows, so you don't need to use /gl and /GL - simply /GL will do.
To achieve this, in your CMakeLists.txt do:
if(APPLE)
include_directories(${OPENGL_INCLUDE_DIR}/OpenGL)
else()
include_directories(${OPENGL_INCLUDE_DIR}/GL)
endif()
To make this a bit more robust, you can have CMake find the path to ""gl.h"" and include that:
find_path(OpenglIncludeSubdir
NAMES gl.h
PATHS ${OPENGL_INCLUDE_DIR}
PATH_SUFFIXES GL OpenGL
NO_DEFAULT_PATH)
include_directories(${OpenglIncludeSubdir})
Again, in your source you'd use:
#include ""gl.h""
Possibly the most robust (i.e. avoiding further include paths beyond ${OPENGL_INCLUDE_DIR}) would be to find the path to ""gl.h"" and then use configure_file to apply the correct #include term. You would use an input file which contained something like:
#include ""@OpenglSubdir@/gl.h""
and then running configure_file would replace @OpenglSubdir@ with its value and write the contents to an output file. This output file would then be included in your target and would have
#include ""GL/gl.h""
or
#include ""OpenGL/gl.h""
as appropriate.
To achieve this, you'd do something like:
find_file(OpenglSubdir
NAMES GL OpenGL
PATHS ${OPENGL_INCLUDE_DIR}
NO_DEFAULT_PATH)
get_filename_component(OpenglSubdir ${OpenglSubdir} NAME)
configure_file(${CMAKE_SOURCE_DIR}/my_config.h.in ${CMAKE_SOURCE_DIR}/my_config.h)",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,14,2016-08-15T18:32:47Z,2020-03-11T14:45:57Z,2020-03-11T14:45:57Z,CLOSED,False,1,1,1,https://github.com/gsjaardema,Add missing include path,1,[],https://github.com/CGNS/CGNS/pull/14,https://github.com/gsjaardema,3,https://github.com/CGNS/CGNS/pull/14#issuecomment-245610672,"CMake-based build of tkogl was missing include path for opengl headers.  Not sure this is the correct fix, but it eliminates this and several other errors about not being able to find GL/gl.h","Yes, something like that would probably work better than my change.  I like the ""... a bit more robust..."" solution near the middle, but any of the options look like they would work.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,14,2016-08-15T18:32:47Z,2020-03-11T14:45:57Z,2020-03-11T14:45:57Z,CLOSED,False,1,1,1,https://github.com/gsjaardema,Add missing include path,1,[],https://github.com/CGNS/CGNS/pull/14,https://github.com/brtnfld,4,https://github.com/CGNS/CGNS/pull/14#issuecomment-245615211,"CMake-based build of tkogl was missing include path for opengl headers.  Not sure this is the correct fix, but it eliminates this and several other errors about not being able to find GL/gl.h","Added task to redo the include
https://cgnsorg.atlassian.net/browse/CGNS-106",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,14,2016-08-15T18:32:47Z,2020-03-11T14:45:57Z,2020-03-11T14:45:57Z,CLOSED,False,1,1,1,https://github.com/gsjaardema,Add missing include path,1,[],https://github.com/CGNS/CGNS/pull/14,https://github.com/gsjaardema,5,https://github.com/CGNS/CGNS/pull/14#issuecomment-411953915,"CMake-based build of tkogl was missing include path for opengl headers.  Not sure this is the correct fix, but it eliminates this and several other errors about not being able to find GL/gl.h",Any update on this?  I still need to manually make this change whenver I want to build the tools on my Mac...,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,14,2016-08-15T18:32:47Z,2020-03-11T14:45:57Z,2020-03-11T14:45:57Z,CLOSED,False,1,1,1,https://github.com/gsjaardema,Add missing include path,1,[],https://github.com/CGNS/CGNS/pull/14,https://github.com/brtnfld,6,https://github.com/CGNS/CGNS/pull/14#issuecomment-412145708,"CMake-based build of tkogl was missing include path for opengl headers.  Not sure this is the correct fix, but it eliminates this and several other errors about not being able to find GL/gl.h","Sorry, this dropped off my radar, I'll try to look into it next week.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,14,2016-08-15T18:32:47Z,2020-03-11T14:45:57Z,2020-03-11T14:45:57Z,CLOSED,False,1,1,1,https://github.com/gsjaardema,Add missing include path,1,[],https://github.com/CGNS/CGNS/pull/14,https://github.com/brtnfld,7,https://github.com/CGNS/CGNS/pull/14#issuecomment-597676536,"CMake-based build of tkogl was missing include path for opengl headers.  Not sure this is the correct fix, but it eliminates this and several other errors about not being able to find GL/gl.h",We are addressing this in PR #181,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,15,2016-08-15T18:35:26Z,2016-08-22T16:22:04Z,2016-08-22T16:28:08Z,MERGED,True,1,1,1,https://github.com/gsjaardema,Add missing close paren.,1,[],https://github.com/CGNS/CGNS/pull/15,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/15,Added missing closing paren for printf statement.,Added missing closing paren for printf statement.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,16,2016-08-15T20:37:18Z,2016-08-22T16:23:04Z,2016-08-22T16:27:47Z,MERGED,True,1,0,1,https://github.com/gsjaardema,Add missing dependency in cgns_to_plot3d (cmake build),1,[],https://github.com/CGNS/CGNS/pull/16,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/16,binaryio.c is needed to resolve bf_machname symbol referenced from OPENF in p3dfout.c,binaryio.c is needed to resolve bf_machname symbol referenced from OPENF in p3dfout.c,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,17,2016-08-16T13:58:52Z,2016-08-22T16:24:50Z,2016-08-22T16:27:07Z,MERGED,True,1,1,1,https://github.com/gsjaardema,Fix incorrect structured field array access -- cut paste error,1,[],https://github.com/CGNS/CGNS/pull/17,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/17,The conversion from double to real was accessing an incorrect array -- dataconv instead of exponent.  This was also causing invalid memory accesses.  Looks like cut/paste error using code from line 1731 and not updating the structure field being accessed.,The conversion from double to real was accessing an incorrect array -- dataconv instead of exponent.  This was also causing invalid memory accesses.  Looks like cut/paste error using code from line 1731 and not updating the structure field being accessed.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,18,2016-08-16T15:28:34Z,2016-09-08T14:22:03Z,2016-09-08T14:22:03Z,MERGED,True,4,5,1,https://github.com/gsjaardema,"Add missing include path, fix hdf5",2,[],https://github.com/CGNS/CGNS/pull/18,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/18,"Added missing opengl_include_dir path to include_directories.
With the current hdf5 find_package, it doesn't seem like HDF5_LIBRARY is defined and the link dependency is specified earlier on the CGNS library itself, so removed HDF5_LIBRARY from the test and the link library.
With these changes (and other pull requests), this builds in both shared and static mode on a Mac.","Added missing opengl_include_dir path to include_directories.
With the current hdf5 find_package, it doesn't seem like HDF5_LIBRARY is defined and the link dependency is specified earlier on the CGNS library itself, so removed HDF5_LIBRARY from the test and the link library.
With these changes (and other pull requests), this builds in both shared and static mode on a Mac.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,18,2016-08-16T15:28:34Z,2016-09-08T14:22:03Z,2016-09-08T14:22:03Z,MERGED,True,4,5,1,https://github.com/gsjaardema,"Add missing include path, fix hdf5",2,[],https://github.com/CGNS/CGNS/pull/18,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/18#issuecomment-245613534,"Added missing opengl_include_dir path to include_directories.
With the current hdf5 find_package, it doesn't seem like HDF5_LIBRARY is defined and the link dependency is specified earlier on the CGNS library itself, so removed HDF5_LIBRARY from the test and the link library.
With these changes (and other pull requests), this builds in both shared and static mode on a Mac.",May need to 'fix' the OPENGL_INCLUDE_DIR option to be more robust.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,19,2016-08-31T21:08:33Z,2016-09-08T14:15:22Z,2016-09-08T14:15:22Z,MERGED,True,1,1,1,https://github.com/gsjaardema,Fix c_double_eq function,1,[],https://github.com/CGNS/CGNS/pull/19,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/19,"The c_double_eq function needs an absolute value of the difference.  The current test of ""a-b < eps"" will return true whenever a is less than b.  For example, c_double_eq(1,10) will return true since 1-10 == -9 which is less than eps.
Function could also be shortened to ""return (fabs(a-b) < eps);""","The c_double_eq function needs an absolute value of the difference.  The current test of ""a-b < eps"" will return true whenever a is less than b.  For example, c_double_eq(1,10) will return true since 1-10 == -9 which is less than eps.
Function could also be shortened to ""return (fabs(a-b) < eps);""",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,20,2016-08-31T22:18:52Z,2016-09-02T21:41:08Z,2016-09-02T21:41:08Z,MERGED,True,3,3,1,https://github.com/gsjaardema,Fix a few missing CGNS_ENUMV uses,1,[],https://github.com/CGNS/CGNS/pull/20,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/20,"This file was mostly correct in CGNS_ENUMV uses, but was missing a few.  Added those and it now works correctly with CGNS_SCOPE_ENUMS defined","This file was mostly correct in CGNS_ENUMV uses, but was missing a few.  Added those and it now works correctly with CGNS_SCOPE_ENUMS defined",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,21,2016-09-07T15:39:34Z,2016-09-08T14:22:58Z,2016-09-08T14:22:58Z,MERGED,True,14,10,1,https://github.com/gsjaardema,Fix to avoid hang due to collective requirement,1,[],https://github.com/CGNS/CGNS/pull/21,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/21,"If this zone has no elements on this processor, then it must still call cgp_elements_read_data or cgp_elements_write_data in order for the collectives down in the HDF5 library to work correctly (calls an MPI_Allreduce and possibly other collectives). Therefore, only check for valid data range if the 'elements' pointer is non-null.
This is similar to what is done in cgp_coord_write_data and cgp_coord_read_data at lines 369 and 320.","If this zone has no elements on this processor, then it must still call cgp_elements_read_data or cgp_elements_write_data in order for the collectives down in the HDF5 library to work correctly (calls an MPI_Allreduce and possibly other collectives). Therefore, only check for valid data range if the 'elements' pointer is non-null.
This is similar to what is done in cgp_coord_write_data and cgp_coord_read_data at lines 369 and 320.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,22,2016-09-07T18:55:28Z,2016-09-08T14:23:17Z,2016-09-08T14:23:17Z,MERGED,True,1,1,1,https://github.com/gsjaardema,Copy-paste error,1,[],https://github.com/CGNS/CGNS/pull/22,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/22,"Looks like code in section above was copy/pasted, but not all z's updated to dz's
(found by coverity)","Looks like code in section above was copy/pasted, but not all z's updated to dz's
(found by coverity)",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,23,2016-09-07T19:33:42Z,2016-09-08T13:59:56Z,2016-09-08T13:59:56Z,MERGED,True,1,1,1,https://github.com/gsjaardema,Freeing incorrect pointer,1,[],https://github.com/CGNS/CGNS/pull/23,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/23,Should free link_file instead of link_name.  Other frees are correct.,Should free link_file instead of link_name.  Other frees are correct.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,24,2016-09-08T14:29:55Z,2016-09-08T14:30:03Z,2016-09-08T14:37:34Z,MERGED,True,1,1,1,https://github.com/brtnfld,"Revert ""Fix c_double_eq function""",1,[],https://github.com/CGNS/CGNS/pull/24,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/24,Reverts #19,Reverts #19,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,24,2016-09-08T14:29:55Z,2016-09-08T14:30:03Z,2016-09-08T14:37:34Z,MERGED,True,1,1,1,https://github.com/brtnfld,"Revert ""Fix c_double_eq function""",1,[],https://github.com/CGNS/CGNS/pull/24,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/24#issuecomment-245616609,Reverts #19,"needs to be off the develop branch, not master.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,24,2016-09-08T14:29:55Z,2016-09-08T14:30:03Z,2016-09-08T14:37:34Z,MERGED,True,1,1,1,https://github.com/brtnfld,"Revert ""Fix c_double_eq function""",1,[],https://github.com/CGNS/CGNS/pull/24,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/24#issuecomment-245618833,Reverts #19,made changes to develop,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,25,2016-09-08T15:09:05Z,2016-09-09T14:53:53Z,2016-09-09T14:53:53Z,MERGED,True,2,1,1,https://github.com/gsjaardema,"Initialize err, add missing return",1,[],https://github.com/CGNS/CGNS/pull/25,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/25,"err is possibly used unintialized in test ""if(err == set_error(CGIO_ERR_NONE)) return err;"" around line 618.
At line 582, fp is checked and if it is NULL, then error codes are set.  However, execution then falls out of the if NULL test and then fp is used in the fread function at line 589.  It looks like there should maybe be a ""return err"" at the end of the NULL test.
(Both of these found by coverity)","err is possibly used unintialized in test ""if(err == set_error(CGIO_ERR_NONE)) return err;"" around line 618.
At line 582, fp is checked and if it is NULL, then error codes are set.  However, execution then falls out of the if NULL test and then fp is used in the fread function at line 589.  It looks like there should maybe be a ""return err"" at the end of the NULL test.
(Both of these found by coverity)",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,26,2016-09-13T14:43:59Z,2016-09-21T18:34:05Z,2016-09-21T18:34:06Z,MERGED,True,5,0,1,https://github.com/gsjaardema,Handle case where wbuf or rbuf is NULL,1,[],https://github.com/CGNS/CGNS/pull/26,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/26,"If wbuf or rbuf are NULL, then H5Screate_simple is still called, but dims was not being initialized.","If wbuf or rbuf are NULL, then H5Screate_simple is still called, but dims was not being initialized.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,27,2016-09-15T21:35:46Z,2016-09-21T18:12:58Z,2016-09-21T18:12:58Z,MERGED,True,1,1,1,https://github.com/gsjaardema,Fix spelling error in help message,1,[],https://github.com/CGNS/CGNS/pull/27,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/27,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,28,2016-12-12T19:03:52Z,2016-12-12T20:27:26Z,2016-12-12T20:27:26Z,MERGED,True,1,0,1,https://github.com/gsjaardema,Error code was not set correctly.,1,[],https://github.com/CGNS/CGNS/pull/28,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/28,"ADFH_Configure did not set error code if option was ADFH_CONFIG_MPI_COMM.
Note that I set it to NO_ERROR to follow guidance of the ADFH_CONFIG_COMPRESS branch, but NO_ERROR seems to be different from CG_OK.  Should successful return be CG_OK or NO_ERROR?
The return value of ADFH_Configure is returned unchanged from cgp_mpi_comm, so cgp_mpi_comm is returning a -1 instead of CG_OK.","ADFH_Configure did not set error code if option was ADFH_CONFIG_MPI_COMM.
Note that I set it to NO_ERROR to follow guidance of the ADFH_CONFIG_COMPRESS branch, but NO_ERROR seems to be different from CG_OK.  Should successful return be CG_OK or NO_ERROR?
The return value of ADFH_Configure is returned unchanged from cgp_mpi_comm, so cgp_mpi_comm is returning a -1 instead of CG_OK.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,29,2016-12-21T17:54:39Z,2017-02-14T02:27:14Z,2017-02-14T02:27:14Z,MERGED,True,6,3,2,https://github.com/jm-cc,"CGNS-85 fix,",1,[],https://github.com/CGNS/CGNS/pull/29,https://github.com/jm-cc,1,https://github.com/CGNS/CGNS/pull/29,"cgp_open now uses current communicator, defined by cgp_mpi_comm.
Hi, I ran into CGNS-85 also in the case of a MPMD program where rank 0 in MPI_COMM_WORLD was not involved in opening the file.
Here is the fix I propose, similar to the one described in the CGNS-85 issue.
Basically, the communicator used when calling cgp_mpi_comm is saved and reused for cgp_open and cgio_check_file.","cgp_open now uses current communicator, defined by cgp_mpi_comm.
Hi, I ran into CGNS-85 also in the case of a MPMD program where rank 0 in MPI_COMM_WORLD was not involved in opening the file.
Here is the fix I propose, similar to the one described in the CGNS-85 issue.
Basically, the communicator used when calling cgp_mpi_comm is saved and reused for cgp_open and cgio_check_file.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,29,2016-12-21T17:54:39Z,2017-02-14T02:27:14Z,2017-02-14T02:27:14Z,MERGED,True,6,3,2,https://github.com/jm-cc,"CGNS-85 fix,",1,[],https://github.com/CGNS/CGNS/pull/29,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/29#issuecomment-278969267,"cgp_open now uses current communicator, defined by cgp_mpi_comm.
Hi, I ran into CGNS-85 also in the case of a MPMD program where rank 0 in MPI_COMM_WORLD was not involved in opening the file.
Here is the fix I propose, similar to the one described in the CGNS-85 issue.
Basically, the communicator used when calling cgp_mpi_comm is saved and reused for cgp_open and cgio_check_file.",I'll work on a test for the patch this weekend if you already don't have one.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,29,2016-12-21T17:54:39Z,2017-02-14T02:27:14Z,2017-02-14T02:27:14Z,MERGED,True,6,3,2,https://github.com/jm-cc,"CGNS-85 fix,",1,[],https://github.com/CGNS/CGNS/pull/29,https://github.com/jm-cc,3,https://github.com/CGNS/CGNS/pull/29#issuecomment-279473029,"cgp_open now uses current communicator, defined by cgp_mpi_comm.
Hi, I ran into CGNS-85 also in the case of a MPMD program where rank 0 in MPI_COMM_WORLD was not involved in opening the file.
Here is the fix I propose, similar to the one described in the CGNS-85 issue.
Basically, the communicator used when calling cgp_mpi_comm is saved and reused for cgp_open and cgio_check_file.","Hi, I've got a very basic test that deadlocks without the fix. I am not sure it is good enough to be included, I just did it to mimic my app behaviour.
First it creates a file with every processes. Then it creates a communicator that does not contain Process 0 of MPI_COMM_WORLD and try to access the file.
#include <stdio.h>
#include <string.h>
#include ""pcgnslib.h""
#include <mpi.h>

int main(int argc, char** argv)
{
  MPI_Comm dummy;
  char test[20];
  int index_file;
  int rank; //rank in MPI_COMM_WORLD
    
  snprintf(test, 20, ""test.cgns"");

  MPI_Init(&argc, &argv);

  cgp_open(test, CG_MODE_MODIFY, &index_file);
  cgp_close(index_file);


  MPI_Comm_rank(MPI_COMM_WORLD, &rank);
  if (rank==0) 
    MPI_Comm_split(MPI_COMM_WORLD, 0, 0, &dummy);
  else
    MPI_Comm_split(MPI_COMM_WORLD, 1, rank, &dummy);

  if (rank>0) //If member of the dummy communicator
  {
    printf(""%d\n"",rank);
    cgp_mpi_comm(dummy);
    cgp_open(test, CG_MODE_MODIFY, &index_file);
    cgp_close(index_file);
  }
  MPI_Finalize();
}",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,30,2017-01-06T13:46:01Z,2017-01-06T17:25:08Z,2017-01-06T17:25:08Z,MERGED,True,2,2,2,https://github.com/akilan27,Spelling error in function name,1,[],https://github.com/CGNS/CGNS/pull/30,https://github.com/akilan27,1,https://github.com/CGNS/CGNS/pull/30,"This corrects spelling mistake in HashStats() function in two different files. I discovered this while trying to use the function but got linker errors.
PS: This same file is present in two different directories. Code should be modified to use one of those & delete the other file. This will help code maintenance. I can send another pull request for that change if that change is desired.","This corrects spelling mistake in HashStats() function in two different files. I discovered this while trying to use the function but got linker errors.
PS: This same file is present in two different directories. Code should be modified to use one of those & delete the other file. This will help code maintenance. I can send another pull request for that change if that change is desired.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,30,2017-01-06T13:46:01Z,2017-01-06T17:25:08Z,2017-01-06T17:25:08Z,MERGED,True,2,2,2,https://github.com/akilan27,Spelling error in function name,1,[],https://github.com/CGNS/CGNS/pull/30,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/30#issuecomment-270955409,"This corrects spelling mistake in HashStats() function in two different files. I discovered this while trying to use the function but got linker errors.
PS: This same file is present in two different directories. Code should be modified to use one of those & delete the other file. This will help code maintenance. I can send another pull request for that change if that change is desired.","Changes are unrelated to travis CI failures, merging.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,31,2017-01-17T16:03:19Z,2017-01-17T16:49:13Z,2017-01-17T16:49:13Z,CLOSED,False,113,0,1,https://github.com/gsjaardema,Add prototype for cgp_parent_data_write,1,[],https://github.com/CGNS/CGNS/pull/31,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/31,"A first shot at an implementation for cgp_parent_data_write.  It works in the testing I have done on my local project, but not sure if the ""style"" is correct.  It currently uses an MPI_Allreduce call to determine the total size of the ParentElements and ParentElementsPosition nodes which are created during the function. It might be cleaner to have two functions -- one to create the nodes and one to write the data to the nodes, but this implementation follows the behavior of the serial version.
Let me know what you think and I will modify as needed.
(This also needs the pcgnslib.h changes in patch-15; sorry for the screwy pull request but the method I usually use was creating very noisy patch...)","A first shot at an implementation for cgp_parent_data_write.  It works in the testing I have done on my local project, but not sure if the ""style"" is correct.  It currently uses an MPI_Allreduce call to determine the total size of the ParentElements and ParentElementsPosition nodes which are created during the function. It might be cleaner to have two functions -- one to create the nodes and one to write the data to the nodes, but this implementation follows the behavior of the serial version.
Let me know what you think and I will modify as needed.
(This also needs the pcgnslib.h changes in patch-15; sorry for the screwy pull request but the method I usually use was creating very noisy patch...)",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,32,2017-01-17T16:04:08Z,2017-01-17T16:49:01Z,2017-01-17T16:49:01Z,CLOSED,False,2,0,1,https://github.com/gsjaardema,Add prototype for cgp_parent_data_write function,1,[],https://github.com/CGNS/CGNS/pull/32,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/32,"A first shot at an implementation for cgp_parent_data_write.  It works in the testing I have done on my local project, but not sure if the ""style"" is correct.  It currently uses an MPI_Allreduce call to determine the total size of the ParentElements and ParentElementsPosition nodes which are created during the function. It might be cleaner to have two functions -- one to create the nodes and one to write the data to the nodes, but this implementation follows the behavior of the serial version.
Let me know what you think and I will modify as needed.
(This also needs the pcgnslib.h changes in patch-16; sorry for the screwy pull request but the method I usually use was creating very noisy patch...)","A first shot at an implementation for cgp_parent_data_write.  It works in the testing I have done on my local project, but not sure if the ""style"" is correct.  It currently uses an MPI_Allreduce call to determine the total size of the ParentElements and ParentElementsPosition nodes which are created during the function. It might be cleaner to have two functions -- one to create the nodes and one to write the data to the nodes, but this implementation follows the behavior of the serial version.
Let me know what you think and I will modify as needed.
(This also needs the pcgnslib.h changes in patch-16; sorry for the screwy pull request but the method I usually use was creating very noisy patch...)",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,33,2017-01-17T16:48:42Z,2017-02-03T03:29:35Z,2017-02-03T03:29:35Z,CLOSED,False,116,0,2,https://github.com/gsjaardema,Prototype for cgp_parent_data_write,2,[],https://github.com/CGNS/CGNS/pull/33,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/33,"A first shot at an implementation for cgp_parent_data_write. It works in the testing I have done on my local project, but not sure if the ""style"" is correct. It currently uses an MPI_Allreduce call to determine the total size of the ParentElements and ParentElementsPosition nodes which are created during the function. It might be cleaner to have two functions -- one to create the nodes and one to write the data to the nodes, but this implementation follows the behavior of the serial version.
Let me know what you think and I will modify as needed.","A first shot at an implementation for cgp_parent_data_write. It works in the testing I have done on my local project, but not sure if the ""style"" is correct. It currently uses an MPI_Allreduce call to determine the total size of the ParentElements and ParentElementsPosition nodes which are created during the function. It might be cleaner to have two functions -- one to create the nodes and one to write the data to the nodes, but this implementation follows the behavior of the serial version.
Let me know what you think and I will modify as needed.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,33,2017-01-17T16:48:42Z,2017-02-03T03:29:35Z,2017-02-03T03:29:35Z,CLOSED,False,116,0,2,https://github.com/gsjaardema,Prototype for cgp_parent_data_write,2,[],https://github.com/CGNS/CGNS/pull/33,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/33#issuecomment-274829769,"A first shot at an implementation for cgp_parent_data_write. It works in the testing I have done on my local project, but not sure if the ""style"" is correct. It currently uses an MPI_Allreduce call to determine the total size of the ParentElements and ParentElementsPosition nodes which are created during the function. It might be cleaner to have two functions -- one to create the nodes and one to write the data to the nodes, but this implementation follows the behavior of the serial version.
Let me know what you think and I will modify as needed.",Can you add a test for the new API? Can you also create a JIRA issue so that we can document the work done here.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,33,2017-01-17T16:48:42Z,2017-02-03T03:29:35Z,2017-02-03T03:29:35Z,CLOSED,False,116,0,2,https://github.com/gsjaardema,Prototype for cgp_parent_data_write,2,[],https://github.com/CGNS/CGNS/pull/33,https://github.com/gsjaardema,3,https://github.com/CGNS/CGNS/pull/33#issuecomment-275201109,"A first shot at an implementation for cgp_parent_data_write. It works in the testing I have done on my local project, but not sure if the ""style"" is correct. It currently uses an MPI_Allreduce call to determine the total size of the ParentElements and ParentElementsPosition nodes which are created during the function. It might be cleaner to have two functions -- one to create the nodes and one to write the data to the nodes, but this implementation follows the behavior of the serial version.
Let me know what you think and I will modify as needed.","Yes, I will take a look and hopefully be able to add a test in the next
week or so.
..Greg
…
On Tue, Jan 24, 2017 at 8:06 AM, Scot Breitenfeld ***@***.***> wrote:
 Can you add a test for the new API?

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#33 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AA2xDtwkonkYEvJxqI2WDlLD9ZRhqPovks5rVhNzgaJpZM4Ll49X>
 .",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,33,2017-01-17T16:48:42Z,2017-02-03T03:29:35Z,2017-02-03T03:29:35Z,CLOSED,False,116,0,2,https://github.com/gsjaardema,Prototype for cgp_parent_data_write,2,[],https://github.com/CGNS/CGNS/pull/33,https://github.com/gsjaardema,4,https://github.com/CGNS/CGNS/pull/33#issuecomment-277155782,"A first shot at an implementation for cgp_parent_data_write. It works in the testing I have done on my local project, but not sure if the ""style"" is correct. It currently uses an MPI_Allreduce call to determine the total size of the ParentElements and ParentElementsPosition nodes which are created during the function. It might be cleaner to have two functions -- one to create the nodes and one to write the data to the nodes, but this implementation follows the behavior of the serial version.
Let me know what you think and I will modify as needed.",This has been moved to #36 which has both the implementation and a test.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,34,2017-02-02T02:17:26Z,2017-02-02T19:05:32Z,2017-02-02T20:14:30Z,MERGED,True,187,331,36,https://github.com/gsjaardema,Tests can run with ENUM_SCOPING enabled,2,[],https://github.com/CGNS/CGNS/pull/34,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/34,Modify testing code so it will run with CG_ENABLE_SCOPING enabled.,Modify testing code so it will run with CG_ENABLE_SCOPING enabled.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,35,2017-02-02T18:33:25Z,2017-02-02T19:31:41Z,2017-02-02T20:14:06Z,MERGED,True,15,0,1,https://github.com/gsjaardema,Check for Fortran concatenation setting in CMake,1,[],https://github.com/CGNS/CGNS/pull/35,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/35,"Determine which fortran concatenation macro to use in a CMake-based build.
Checks whether the a##b mode works; if not, then assumes that the IDENTITY(a)b mode works.
This is used in cgnstypes_f03.h","Determine which fortran concatenation macro to use in a CMake-based build.
Checks whether the a##b mode works; if not, then assumes that the IDENTITY(a)b mode works.
This is used in cgnstypes_f03.h",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,36,2017-02-03T03:29:03Z,2017-02-09T22:26:14Z,2017-02-09T22:42:11Z,MERGED,True,327,0,6,https://github.com/gsjaardema,Implementation and test for cgp_parent_data_write,3,[],https://github.com/CGNS/CGNS/pull/36,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/36,"A first shot at an implementation for cgp_parent_data_write. It works in the testing I have done on my local project, but not sure if the ""style"" is correct. It currently uses an MPI_Allreduce call to determine the total size of the ParentElements and ParentElementsPosition nodes which are created during the function. It might be cleaner to have two functions -- one to create the nodes and one to write the data to the nodes, but this implementation follows the behavior of the serial version.
There is a test that writes a 2D unstructured mesh and puts a BC on bottom and left side.
Let me know what you think and I will modify as needed.","A first shot at an implementation for cgp_parent_data_write. It works in the testing I have done on my local project, but not sure if the ""style"" is correct. It currently uses an MPI_Allreduce call to determine the total size of the ParentElements and ParentElementsPosition nodes which are created during the function. It might be cleaner to have two functions -- one to create the nodes and one to write the data to the nodes, but this implementation follows the behavior of the serial version.
There is a test that writes a 2D unstructured mesh and puts a BC on bottom and left side.
Let me know what you think and I will modify as needed.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,37,2017-02-09T21:58:53Z,2017-02-09T22:25:45Z,2017-02-09T22:42:46Z,MERGED,True,2,2,1,https://github.com/gsjaardema,Modify CHECK_FORTRAN_FEATURE macro,1,[],https://github.com/CGNS/CGNS/pull/37,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/37,"Change the extension of the file created by the CHECK_FORTRAN_FEATURE macro from .f90 (lowercase) to .F90 (uppercase) so that the fortran preprocessor will be run on the file.  This was causing a false negative on xlf compiler for the CONCAT check since the compilation was failing due to the preprocessor not being run instead of failing due to an incorrect concatenation macro.
For tests that do not need preprocessor to be run, this should still be ok and not cause any problems.","Change the extension of the file created by the CHECK_FORTRAN_FEATURE macro from .f90 (lowercase) to .F90 (uppercase) so that the fortran preprocessor will be run on the file.  This was causing a false negative on xlf compiler for the CONCAT check since the compilation was failing due to the preprocessor not being run instead of failing due to an incorrect concatenation macro.
For tests that do not need preprocessor to be run, this should still be ok and not cause any problems.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,38,2017-02-28T22:56:20Z,2020-10-02T18:48:15Z,2021-03-17T15:37:36Z,CLOSED,False,7,1,1,https://github.com/gsjaardema,"Add option to permit experimenting with HDF5 ""DISKLESS"" mode",5,[],https://github.com/CGNS/CGNS/pull/38,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/38,"We have a couple projects in which we are experimenting with using the ""DISKLESS"" hdf5 mode.  This is described at https://support.hdfgroup.org/HDF5/doc/RM/H5P/H5Pset_fapl_core.htm.  The addition of the three lines in this pull request lets us test the viability of this capability with minimal changes to the CGNS library.
An application would specify this mode by adding extern char hdf5_access[64]; to the application and then doing something like:
int old_type = cgns_filetype;
strcpy(hdf5_access,""DISKLESS"");    
int ierr = cg_set_file_type(CG_FILE_HDF5);
ierr = cg_open(get_filename().c_str(), mode, &cgnsFilePtr);
strcpy(hdf5_access,""NATIVE"");
cgns_filetype = old_type;

This mirrors somewhat the code in cgp_open()
If this looks like a capability that would be generally useful to other users of the library, then this capability could be added to a new API function, but for now the minimal change here would be all that is needed.  I understand that there may be some hesitation at putting this in; if so, then we can probably handle it by creating an external copy of the ADFH_Database_Open function, but that would be much more work...
Thanks for any consideration or feedback on this suggested change; perhaps there is a better way to accomplish what we are trying to do.","We have a couple projects in which we are experimenting with using the ""DISKLESS"" hdf5 mode.  This is described at https://support.hdfgroup.org/HDF5/doc/RM/H5P/H5Pset_fapl_core.htm.  The addition of the three lines in this pull request lets us test the viability of this capability with minimal changes to the CGNS library.
An application would specify this mode by adding extern char hdf5_access[64]; to the application and then doing something like:
int old_type = cgns_filetype;
strcpy(hdf5_access,""DISKLESS"");    
int ierr = cg_set_file_type(CG_FILE_HDF5);
ierr = cg_open(get_filename().c_str(), mode, &cgnsFilePtr);
strcpy(hdf5_access,""NATIVE"");
cgns_filetype = old_type;

This mirrors somewhat the code in cgp_open()
If this looks like a capability that would be generally useful to other users of the library, then this capability could be added to a new API function, but for now the minimal change here would be all that is needed.  I understand that there may be some hesitation at putting this in; if so, then we can probably handle it by creating an external copy of the ADFH_Database_Open function, but that would be much more work...
Thanks for any consideration or feedback on this suggested change; perhaps there is a better way to accomplish what we are trying to do.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,38,2017-02-28T22:56:20Z,2020-10-02T18:48:15Z,2021-03-17T15:37:36Z,CLOSED,False,7,1,1,https://github.com/gsjaardema,"Add option to permit experimenting with HDF5 ""DISKLESS"" mode",5,[],https://github.com/CGNS/CGNS/pull/38,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/38#issuecomment-284566890,"We have a couple projects in which we are experimenting with using the ""DISKLESS"" hdf5 mode.  This is described at https://support.hdfgroup.org/HDF5/doc/RM/H5P/H5Pset_fapl_core.htm.  The addition of the three lines in this pull request lets us test the viability of this capability with minimal changes to the CGNS library.
An application would specify this mode by adding extern char hdf5_access[64]; to the application and then doing something like:
int old_type = cgns_filetype;
strcpy(hdf5_access,""DISKLESS"");    
int ierr = cg_set_file_type(CG_FILE_HDF5);
ierr = cg_open(get_filename().c_str(), mode, &cgnsFilePtr);
strcpy(hdf5_access,""NATIVE"");
cgns_filetype = old_type;

This mirrors somewhat the code in cgp_open()
If this looks like a capability that would be generally useful to other users of the library, then this capability could be added to a new API function, but for now the minimal change here would be all that is needed.  I understand that there may be some hesitation at putting this in; if so, then we can probably handle it by creating an external copy of the ADFH_Database_Open function, but that would be much more work...
Thanks for any consideration or feedback on this suggested change; perhaps there is a better way to accomplish what we are trying to do.","gcc -g -g -O2   -I.  -DBUILD_HDF5 -Iadfh -I/home/travis/hdf5/include  -o lib/ADFH.o -c adfh/ADFH.c
adfh/ADFH.c: In function ‘ADFH_Database_Open’:
adfh/ADFH.c:2153:44: error: ‘true’ undeclared (first use in this function)
adfh/ADFH.c:2153:44: note: each undeclared identifier is reported only once for each function it appears in
make: *** [lib/ADFH.o] Error 1",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,38,2017-02-28T22:56:20Z,2020-10-02T18:48:15Z,2021-03-17T15:37:36Z,CLOSED,False,7,1,1,https://github.com/gsjaardema,"Add option to permit experimenting with HDF5 ""DISKLESS"" mode",5,[],https://github.com/CGNS/CGNS/pull/38,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/38#issuecomment-545475112,"We have a couple projects in which we are experimenting with using the ""DISKLESS"" hdf5 mode.  This is described at https://support.hdfgroup.org/HDF5/doc/RM/H5P/H5Pset_fapl_core.htm.  The addition of the three lines in this pull request lets us test the viability of this capability with minimal changes to the CGNS library.
An application would specify this mode by adding extern char hdf5_access[64]; to the application and then doing something like:
int old_type = cgns_filetype;
strcpy(hdf5_access,""DISKLESS"");    
int ierr = cg_set_file_type(CG_FILE_HDF5);
ierr = cg_open(get_filename().c_str(), mode, &cgnsFilePtr);
strcpy(hdf5_access,""NATIVE"");
cgns_filetype = old_type;

This mirrors somewhat the code in cgp_open()
If this looks like a capability that would be generally useful to other users of the library, then this capability could be added to a new API function, but for now the minimal change here would be all that is needed.  I understand that there may be some hesitation at putting this in; if so, then we can probably handle it by creating an external copy of the ADFH_Database_Open function, but that would be much more work...
Thanks for any consideration or feedback on this suggested change; perhaps there is a better way to accomplish what we are trying to do.","I like the idea of being able to choose the core file driver, and I'm wondering if we should add a new CGNS API to be able to do this for choosing different HDF5 file drivers in general, starting with the core file driver first. The HDF Group is adding more VFDs (SWMR, sub-filing) that will be extremely important to CGNS to get excellent performance at exascale. So maybe we should rework this PR to work for the general case.
If we want to use current APIs, then maybe cgp_pio_mode would work, or perhaps the mode in cgp_open.",True,{'THUMBS_UP': ['https://github.com/MicK7']}
CGNS/CGNS,https://github.com/CGNS/CGNS,38,2017-02-28T22:56:20Z,2020-10-02T18:48:15Z,2021-03-17T15:37:36Z,CLOSED,False,7,1,1,https://github.com/gsjaardema,"Add option to permit experimenting with HDF5 ""DISKLESS"" mode",5,[],https://github.com/CGNS/CGNS/pull/38,https://github.com/brtnfld,4,https://github.com/CGNS/CGNS/pull/38#issuecomment-702899506,"We have a couple projects in which we are experimenting with using the ""DISKLESS"" hdf5 mode.  This is described at https://support.hdfgroup.org/HDF5/doc/RM/H5P/H5Pset_fapl_core.htm.  The addition of the three lines in this pull request lets us test the viability of this capability with minimal changes to the CGNS library.
An application would specify this mode by adding extern char hdf5_access[64]; to the application and then doing something like:
int old_type = cgns_filetype;
strcpy(hdf5_access,""DISKLESS"");    
int ierr = cg_set_file_type(CG_FILE_HDF5);
ierr = cg_open(get_filename().c_str(), mode, &cgnsFilePtr);
strcpy(hdf5_access,""NATIVE"");
cgns_filetype = old_type;

This mirrors somewhat the code in cgp_open()
If this looks like a capability that would be generally useful to other users of the library, then this capability could be added to a new API function, but for now the minimal change here would be all that is needed.  I understand that there may be some hesitation at putting this in; if so, then we can probably handle it by creating an external copy of the ADFH_Database_Open function, but that would be much more work...
Thanks for any consideration or feedback on this suggested change; perhaps there is a better way to accomplish what we are trying to do.","I've added the DISKLESS option to CGNS-220 to investigate creating all the CGNS metadata DISKLESS, and then opening the file in parallel for the raw writes.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,38,2017-02-28T22:56:20Z,2020-10-02T18:48:15Z,2021-03-17T15:37:36Z,CLOSED,False,7,1,1,https://github.com/gsjaardema,"Add option to permit experimenting with HDF5 ""DISKLESS"" mode",5,[],https://github.com/CGNS/CGNS/pull/38,https://github.com/brtnfld,5,https://github.com/CGNS/CGNS/pull/38#issuecomment-801184190,"We have a couple projects in which we are experimenting with using the ""DISKLESS"" hdf5 mode.  This is described at https://support.hdfgroup.org/HDF5/doc/RM/H5P/H5Pset_fapl_core.htm.  The addition of the three lines in this pull request lets us test the viability of this capability with minimal changes to the CGNS library.
An application would specify this mode by adding extern char hdf5_access[64]; to the application and then doing something like:
int old_type = cgns_filetype;
strcpy(hdf5_access,""DISKLESS"");    
int ierr = cg_set_file_type(CG_FILE_HDF5);
ierr = cg_open(get_filename().c_str(), mode, &cgnsFilePtr);
strcpy(hdf5_access,""NATIVE"");
cgns_filetype = old_type;

This mirrors somewhat the code in cgp_open()
If this looks like a capability that would be generally useful to other users of the library, then this capability could be added to a new API function, but for now the minimal change here would be all that is needed.  I understand that there may be some hesitation at putting this in; if so, then we can probably handle it by creating an external copy of the ADFH_Database_Open function, but that would be much more work...
Thanks for any consideration or feedback on this suggested change; perhaps there is a better way to accomplish what we are trying to do.","Created issue to track:
CGNS-239
Add diskless option for creating a CGNS file",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,39,2017-03-01T17:15:54Z,2017-03-02T17:08:20Z,2017-03-02T18:19:53Z,MERGED,True,20,11,4,https://github.com/gsjaardema,Add cmake support for memory debugging; fix memory debug routines,1,[],https://github.com/CGNS/CGNS/pull/39,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/39,"This PR permits the control of the memory debugging capability via cmake.  To enable, define CGNS_ENABLE_MEM_DEBUG=ON.
The address storing in cg_malloc did not seem to work correctly; perhaps an issue with sequence points, so separated the *data++ = (size_t)(data + 1); into two lines: *data = (size_t)(data + 1); and data++;
Slight modification to the memory debug output:

Added ""CGNS MEM_DEBUG"" prefix to the output lines in cg_open and cg_close.
Added output of the number of alloc and free calls.","This PR permits the control of the memory debugging capability via cmake.  To enable, define CGNS_ENABLE_MEM_DEBUG=ON.
The address storing in cg_malloc did not seem to work correctly; perhaps an issue with sequence points, so separated the *data++ = (size_t)(data + 1); into two lines: *data = (size_t)(data + 1); and data++;
Slight modification to the memory debug output:

Added ""CGNS MEM_DEBUG"" prefix to the output lines in cg_open and cg_close.
Added output of the number of alloc and free calls.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,39,2017-03-01T17:15:54Z,2017-03-02T17:08:20Z,2017-03-02T18:19:53Z,MERGED,True,20,11,4,https://github.com/gsjaardema,Add cmake support for memory debugging; fix memory debug routines,1,[],https://github.com/CGNS/CGNS/pull/39,https://github.com/gsjaardema,2,https://github.com/CGNS/CGNS/pull/39#issuecomment-283735103,"This PR permits the control of the memory debugging capability via cmake.  To enable, define CGNS_ENABLE_MEM_DEBUG=ON.
The address storing in cg_malloc did not seem to work correctly; perhaps an issue with sequence points, so separated the *data++ = (size_t)(data + 1); into two lines: *data = (size_t)(data + 1); and data++;
Slight modification to the memory debug output:

Added ""CGNS MEM_DEBUG"" prefix to the output lines in cg_open and cg_close.
Added output of the number of alloc and free calls.","Thanks,",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,40,2017-06-07T20:56:49Z,2017-06-09T03:20:30Z,2017-06-09T03:20:30Z,MERGED,True,8,7,2,https://github.com/brtnfld,Windows Parallel CGNS with Fortran enabled.,3,[],https://github.com/CGNS/CGNS/pull/40,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/40,Tested with Intel MPI.,Tested with Intel MPI.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,41,2017-06-11T18:43:48Z,2017-06-23T19:49:39Z,2017-06-23T19:49:57Z,MERGED,True,12,21,10,https://github.com/jschueller,Fix Windows build,2,[],https://github.com/CGNS/CGNS/pull/41,https://github.com/jschueller,1,https://github.com/CGNS/CGNS/pull/41,"Fixes mingw build:

declspec keyword typo, xref https://msdn.microsoft.com/fr-fr/library/3y1sfaz2(v=vs.100).aspx
install dll in bin in a simpler manner ; as the dll prefix is different on mingw we should avoid hardwire the dll name","Fixes mingw build:

declspec keyword typo, xref https://msdn.microsoft.com/fr-fr/library/3y1sfaz2(v=vs.100).aspx
install dll in bin in a simpler manner ; as the dll prefix is different on mingw we should avoid hardwire the dll name",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,42,2017-06-30T21:18:58Z,2017-06-30T21:35:22Z,2017-06-30T21:35:22Z,CLOSED,False,179,45,4,https://github.com/brtnfld,Release 3.3.1,36,[],https://github.com/CGNS/CGNS/pull/42,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/42,Merged from develop for 3.3.1 release.,Merged from develop for 3.3.1 release.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,43,2017-06-30T21:39:00Z,2017-06-30T21:40:17Z,2017-06-30T21:40:17Z,MERGED,True,10086,5973,138,https://github.com/brtnfld,Version 3.3.1,202,[],https://github.com/CGNS/CGNS/pull/43,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/43,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,44,2017-07-17T15:48:31Z,2017-07-17T21:44:06Z,2017-07-17T21:44:06Z,MERGED,True,2,2,1,https://github.com/gsjaardema,Update version in cgnslib.h,1,[],https://github.com/CGNS/CGNS/pull/44,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/44,The CGNS_VERSION and CGNS_DOTVERS were not updated to the current 3.31 and 3310,The CGNS_VERSION and CGNS_DOTVERS were not updated to the current 3.31 and 3310,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,45,2017-08-25T21:32:24Z,2017-09-11T14:21:21Z,2017-09-11T14:23:16Z,MERGED,True,4,2,1,https://github.com/jschueller,_stat32i64 is msvc-specific,1,[],https://github.com/CGNS/CGNS/pull/45,https://github.com/jschueller,1,https://github.com/CGNS/CGNS/pull/45,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,45,2017-08-25T21:32:24Z,2017-09-11T14:21:21Z,2017-09-11T14:23:16Z,MERGED,True,4,2,1,https://github.com/jschueller,_stat32i64 is msvc-specific,1,[],https://github.com/CGNS/CGNS/pull/45,https://github.com/mennodeij,2,https://github.com/CGNS/CGNS/pull/45#issuecomment-325272167,,"It was already inside a #ifdef _WIN32 statement, but I guess that is too general?
I added the #define stat _stat32i64 to enable the loading of large files on Windows. Make sure to test that for your situation.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,45,2017-08-25T21:32:24Z,2017-09-11T14:21:21Z,2017-09-11T14:23:16Z,MERGED,True,4,2,1,https://github.com/jschueller,_stat32i64 is msvc-specific,1,[],https://github.com/CGNS/CGNS/pull/45,https://github.com/jschueller,3,https://github.com/CGNS/CGNS/pull/45#issuecomment-325364272,,"yeah, but that's only relevant to the msvc compiler, not for mingw",True,{'THUMBS_UP': ['https://github.com/mennodeij']}
CGNS/CGNS,https://github.com/CGNS/CGNS,45,2017-08-25T21:32:24Z,2017-09-11T14:21:21Z,2017-09-11T14:23:16Z,MERGED,True,4,2,1,https://github.com/jschueller,_stat32i64 is msvc-specific,1,[],https://github.com/CGNS/CGNS/pull/45,https://github.com/jschueller,4,https://github.com/CGNS/CGNS/pull/45#issuecomment-327402281,,is it ok to merge ? or ... ?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,45,2017-08-25T21:32:24Z,2017-09-11T14:21:21Z,2017-09-11T14:23:16Z,MERGED,True,4,2,1,https://github.com/jschueller,_stat32i64 is msvc-specific,1,[],https://github.com/CGNS/CGNS/pull/45,https://github.com/mennodeij,5,https://github.com/CGNS/CGNS/pull/45#issuecomment-327402616,,As far as I'm concerned yes.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,45,2017-08-25T21:32:24Z,2017-09-11T14:21:21Z,2017-09-11T14:23:16Z,MERGED,True,4,2,1,https://github.com/jschueller,_stat32i64 is msvc-specific,1,[],https://github.com/CGNS/CGNS/pull/45,https://github.com/jschueller,6,https://github.com/CGNS/CGNS/pull/45#issuecomment-328281713,,cc @brtnfld,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,46,2017-10-04T11:49:20Z,2017-10-16T13:46:06Z,2019-03-13T18:47:52Z,MERGED,True,2,2,1,https://github.com/jschueller,Specify STATIC when adding cgns_static lib,1,[],https://github.com/CGNS/CGNS/pull/46,https://github.com/jschueller,1,https://github.com/CGNS/CGNS/pull/46,Or else it is sensitive to BUILD_SHARED_LIBS cmake var,Or else it is sensitive to BUILD_SHARED_LIBS cmake var,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,46,2017-10-04T11:49:20Z,2017-10-16T13:46:06Z,2019-03-13T18:47:52Z,MERGED,True,2,2,1,https://github.com/jschueller,Specify STATIC when adding cgns_static lib,1,[],https://github.com/CGNS/CGNS/pull/46,https://github.com/jschueller,2,https://github.com/CGNS/CGNS/pull/46#issuecomment-336802643,Or else it is sensitive to BUILD_SHARED_LIBS cmake var,ping @brtnfld,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,47,2017-11-09T02:24:06Z,2018-01-29T16:49:43Z,2018-01-29T16:52:08Z,MERGED,True,18,1,1,https://github.com/zbhfut,"Modified by zbhfut <zhangbing_end@163.com>, 2017-11-09",1,[],https://github.com/CGNS/CGNS/pull/47,https://github.com/zbhfut,1,https://github.com/CGNS/CGNS/pull/47,"For unstructured mesh, mesh_dim = {nnode,nelem}, the multiply product
of mesh_dim may be exceed the limit of 32-bit integer. We don't need
check the product actually but the component of mesh_dim.","For unstructured mesh, mesh_dim = {nnode,nelem}, the multiply product
of mesh_dim may be exceed the limit of 32-bit integer. We don't need
check the product actually but the component of mesh_dim.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,47,2017-11-09T02:24:06Z,2018-01-29T16:49:43Z,2018-01-29T16:52:08Z,MERGED,True,18,1,1,https://github.com/zbhfut,"Modified by zbhfut <zhangbing_end@163.com>, 2017-11-09",1,[],https://github.com/CGNS/CGNS/pull/47,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/47#issuecomment-344683809,"For unstructured mesh, mesh_dim = {nnode,nelem}, the multiply product
of mesh_dim may be exceed the limit of 32-bit integer. We don't need
check the product actually but the component of mesh_dim.","Can you submit a jira issue @ https://cgnsorg.atlassian.net so we can link the pull request to an issue?
Thanks for the fix.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,47,2017-11-09T02:24:06Z,2018-01-29T16:49:43Z,2018-01-29T16:52:08Z,MERGED,True,18,1,1,https://github.com/zbhfut,"Modified by zbhfut <zhangbing_end@163.com>, 2017-11-09",1,[],https://github.com/CGNS/CGNS/pull/47,https://github.com/zbeekman,3,https://github.com/CGNS/CGNS/pull/47#issuecomment-355027472,"For unstructured mesh, mesh_dim = {nnode,nelem}, the multiply product
of mesh_dim may be exceed the limit of 32-bit integer. We don't need
check the product actually but the component of mesh_dim.",It looks like the Travis-CI build for macOS may need to be restarted; the failure looks like it has to do with network connectivity rather than an actual problem.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,47,2017-11-09T02:24:06Z,2018-01-29T16:49:43Z,2018-01-29T16:52:08Z,MERGED,True,18,1,1,https://github.com/zbhfut,"Modified by zbhfut <zhangbing_end@163.com>, 2017-11-09",1,[],https://github.com/CGNS/CGNS/pull/47,https://github.com/mathstuf,4,https://github.com/CGNS/CGNS/pull/47#issuecomment-361295154,"For unstructured mesh, mesh_dim = {nnode,nelem}, the multiply product
of mesh_dim may be exceed the limit of 32-bit integer. We don't need
check the product actually but the component of mesh_dim.",@zbeekman You can close and reopen the PR to retrigger CI checks.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,47,2017-11-09T02:24:06Z,2018-01-29T16:49:43Z,2018-01-29T16:52:08Z,MERGED,True,18,1,1,https://github.com/zbhfut,"Modified by zbhfut <zhangbing_end@163.com>, 2017-11-09",1,[],https://github.com/CGNS/CGNS/pull/47,https://github.com/zbeekman,5,https://github.com/CGNS/CGNS/pull/47#issuecomment-361296405,"For unstructured mesh, mesh_dim = {nnode,nelem}, the multiply product
of mesh_dim may be exceed the limit of 32-bit integer. We don't need
check the product actually but the component of mesh_dim.","Yes, or one can click the link to travis and restart it again. But this is not my PR or my repo, so I can do neither of those things.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,47,2017-11-09T02:24:06Z,2018-01-29T16:49:43Z,2018-01-29T16:52:08Z,MERGED,True,18,1,1,https://github.com/zbhfut,"Modified by zbhfut <zhangbing_end@163.com>, 2017-11-09",1,[],https://github.com/CGNS/CGNS/pull/47,https://github.com/mathstuf,6,https://github.com/CGNS/CGNS/pull/47#issuecomment-361297114,"For unstructured mesh, mesh_dim = {nnode,nelem}, the multiply product
of mesh_dim may be exceed the limit of 32-bit integer. We don't need
check the product actually but the component of mesh_dim.","Ah, I had looked too fast at the z usernames, sorry.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,47,2017-11-09T02:24:06Z,2018-01-29T16:49:43Z,2018-01-29T16:52:08Z,MERGED,True,18,1,1,https://github.com/zbhfut,"Modified by zbhfut <zhangbing_end@163.com>, 2017-11-09",1,[],https://github.com/CGNS/CGNS/pull/47,https://github.com/brtnfld,7,https://github.com/CGNS/CGNS/pull/47#issuecomment-361309727,"For unstructured mesh, mesh_dim = {nnode,nelem}, the multiply product
of mesh_dim may be exceed the limit of 32-bit integer. We don't need
check the product actually but the component of mesh_dim.",Created CGNS-131 for the issue.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,48,2017-12-08T21:28:20Z,2017-12-14T15:58:22Z,2017-12-14T15:58:22Z,MERGED,True,1,1,1,https://github.com/gsjaardema,Some systems need to explicitly link to libdl,1,[],https://github.com/CGNS/CGNS/pull/48,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/48,"On some systems, need to explicitly specify that libdl is needed.  An example is IBM which has the following uname output:
Linux ride6 3.10.0-514.el7.ppc64le #1 SMP Wed Oct 19 11:27:06 EDT 2016 ppc64le ppc64le ppc64le GNU/Linux

Adding CMAKE_DL_LIBS seems to be the CMake way to do this.","On some systems, need to explicitly specify that libdl is needed.  An example is IBM which has the following uname output:
Linux ride6 3.10.0-514.el7.ppc64le #1 SMP Wed Oct 19 11:27:06 EDT 2016 ppc64le ppc64le ppc64le GNU/Linux

Adding CMAKE_DL_LIBS seems to be the CMake way to do this.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,49,2017-12-27T02:31:26Z,2018-02-09T19:16:30Z,2018-02-09T22:59:01Z,MERGED,True,29,23,4,https://github.com/matmel,Shared lib (dll) can be built on windows. Fixes CGNS-129.,3,[],https://github.com/CGNS/CGNS/pull/49,https://github.com/matmel,1,https://github.com/CGNS/CGNS/pull/49,"The main change is in root CMakeList.txt. I had to change a the location of the if block that adds the HDF5 definitions -DH5_BUILT_AS_DYNAMIC_LIB and -DH5_BUILT_AS_STATIC_LIB. They are required to properly define HDF5 headers on windows, especially to export/import symbols correctly.
I found this blog post useful to understand correctly the dll symbol export mechanism.
Also, I changed the appveyor script to build the shared version of CGNSlib.
A couple of question
Question 1
In ADFH.h the line
#if defined(WIN32)

Should probably be replaced with
#if defined(_MSC_VER)

as it is done in HDF5 library (see H5api_adpt.h for instance) because the __declspec(dllexport) decorator thing is only relevant for MSVC as far as I know. gcc on windows does not have this requirement.
Question 2
Should we update the version of HDF5 (1.10.*) and AppVeyor image to use the latest visual studio?","The main change is in root CMakeList.txt. I had to change a the location of the if block that adds the HDF5 definitions -DH5_BUILT_AS_DYNAMIC_LIB and -DH5_BUILT_AS_STATIC_LIB. They are required to properly define HDF5 headers on windows, especially to export/import symbols correctly.
I found this blog post useful to understand correctly the dll symbol export mechanism.
Also, I changed the appveyor script to build the shared version of CGNSlib.
A couple of question
Question 1
In ADFH.h the line
#if defined(WIN32)

Should probably be replaced with
#if defined(_MSC_VER)

as it is done in HDF5 library (see H5api_adpt.h for instance) because the __declspec(dllexport) decorator thing is only relevant for MSVC as far as I know. gcc on windows does not have this requirement.
Question 2
Should we update the version of HDF5 (1.10.*) and AppVeyor image to use the latest visual studio?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,49,2017-12-27T02:31:26Z,2018-02-09T19:16:30Z,2018-02-09T22:59:01Z,MERGED,True,29,23,4,https://github.com/matmel,Shared lib (dll) can be built on windows. Fixes CGNS-129.,3,[],https://github.com/CGNS/CGNS/pull/49,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/49#issuecomment-355629587,"The main change is in root CMakeList.txt. I had to change a the location of the if block that adds the HDF5 definitions -DH5_BUILT_AS_DYNAMIC_LIB and -DH5_BUILT_AS_STATIC_LIB. They are required to properly define HDF5 headers on windows, especially to export/import symbols correctly.
I found this blog post useful to understand correctly the dll symbol export mechanism.
Also, I changed the appveyor script to build the shared version of CGNSlib.
A couple of question
Question 1
In ADFH.h the line
#if defined(WIN32)

Should probably be replaced with
#if defined(_MSC_VER)

as it is done in HDF5 library (see H5api_adpt.h for instance) because the __declspec(dllexport) decorator thing is only relevant for MSVC as far as I know. gcc on windows does not have this requirement.
Question 2
Should we update the version of HDF5 (1.10.*) and AppVeyor image to use the latest visual studio?","I checked your fork's fix with hdf5 develop (i.e. 1.11), which was build with both static and shared HDF5 libraries, and  CMake still fails with linking errors caused by pre-appending __imp_ in front of the HDF5 functions,
For example,
cgns.lib(ADFH.obj) : : error LNK2019: unresolved external symbol __imp_H5get_libversion referenced in function ADFH_Library_Version
This is on windows 10, with the Intel C compiler.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,49,2017-12-27T02:31:26Z,2018-02-09T19:16:30Z,2018-02-09T22:59:01Z,MERGED,True,29,23,4,https://github.com/matmel,Shared lib (dll) can be built on windows. Fixes CGNS-129.,3,[],https://github.com/CGNS/CGNS/pull/49,https://github.com/matmel,3,https://github.com/CGNS/CGNS/pull/49#issuecomment-361125228,"The main change is in root CMakeList.txt. I had to change a the location of the if block that adds the HDF5 definitions -DH5_BUILT_AS_DYNAMIC_LIB and -DH5_BUILT_AS_STATIC_LIB. They are required to properly define HDF5 headers on windows, especially to export/import symbols correctly.
I found this blog post useful to understand correctly the dll symbol export mechanism.
Also, I changed the appveyor script to build the shared version of CGNSlib.
A couple of question
Question 1
In ADFH.h the line
#if defined(WIN32)

Should probably be replaced with
#if defined(_MSC_VER)

as it is done in HDF5 library (see H5api_adpt.h for instance) because the __declspec(dllexport) decorator thing is only relevant for MSVC as far as I know. gcc on windows does not have this requirement.
Question 2
Should we update the version of HDF5 (1.10.*) and AppVeyor image to use the latest visual studio?","I installed Intel compilers and tried to compile (and install) HDF5-1.10.1 and cgnslib with them on windows 10. I had the linking errors that you mentioned with cmake -G ""Visual Studio 15 2017"" -T ""Intel C++ Compiler 18.0"" ... for HDF5 and cmake -G ""Visual Studio 15 2017 Win64"" -T ""Intel C++ Compiler 18.0"" ... (Note the Win64 in the cmake generator for cgnslib and not hdf5).
When I switched the hdf5 generator to Visual Studio 15 2017 Win64, the error disappeared.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,49,2017-12-27T02:31:26Z,2018-02-09T19:16:30Z,2018-02-09T22:59:01Z,MERGED,True,29,23,4,https://github.com/matmel,Shared lib (dll) can be built on windows. Fixes CGNS-129.,3,[],https://github.com/CGNS/CGNS/pull/49,https://github.com/mathstuf,4,https://github.com/CGNS/CGNS/pull/49#issuecomment-361294717,"The main change is in root CMakeList.txt. I had to change a the location of the if block that adds the HDF5 definitions -DH5_BUILT_AS_DYNAMIC_LIB and -DH5_BUILT_AS_STATIC_LIB. They are required to properly define HDF5 headers on windows, especially to export/import symbols correctly.
I found this blog post useful to understand correctly the dll symbol export mechanism.
Also, I changed the appveyor script to build the shared version of CGNSlib.
A couple of question
Question 1
In ADFH.h the line
#if defined(WIN32)

Should probably be replaced with
#if defined(_MSC_VER)

as it is done in HDF5 library (see H5api_adpt.h for instance) because the __declspec(dllexport) decorator thing is only relevant for MSVC as far as I know. gcc on windows does not have this requirement.
Question 2
Should we update the version of HDF5 (1.10.*) and AppVeyor image to use the latest visual studio?","Note that, yes, GCC on Windows does use __declspec. Cygwin doesn't, but Cygwin is also not Windows (it just happens to run on top of it).",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,49,2017-12-27T02:31:26Z,2018-02-09T19:16:30Z,2018-02-09T22:59:01Z,MERGED,True,29,23,4,https://github.com/matmel,Shared lib (dll) can be built on windows. Fixes CGNS-129.,3,[],https://github.com/CGNS/CGNS/pull/49,https://github.com/matmel,5,https://github.com/CGNS/CGNS/pull/49#issuecomment-361322413,"The main change is in root CMakeList.txt. I had to change a the location of the if block that adds the HDF5 definitions -DH5_BUILT_AS_DYNAMIC_LIB and -DH5_BUILT_AS_STATIC_LIB. They are required to properly define HDF5 headers on windows, especially to export/import symbols correctly.
I found this blog post useful to understand correctly the dll symbol export mechanism.
Also, I changed the appveyor script to build the shared version of CGNSlib.
A couple of question
Question 1
In ADFH.h the line
#if defined(WIN32)

Should probably be replaced with
#if defined(_MSC_VER)

as it is done in HDF5 library (see H5api_adpt.h for instance) because the __declspec(dllexport) decorator thing is only relevant for MSVC as far as I know. gcc on windows does not have this requirement.
Question 2
Should we update the version of HDF5 (1.10.*) and AppVeyor image to use the latest visual studio?","According to this page: https://cmake.org/Wiki/CMake_Checking_Platform, cygwin defines the UNIX directive (if the cygwin cmake is used) and not the WIN32 one. So with this PR, on cygwin, the __decspec decorator will not be used and AFAICT this is the right thing to do. I did not test it though, so there may be more to do to make sure cygwin does not fail.
For intel compilers, according to that page: https://software.intel.com/en-us/articles/exporting-using-_declspecdllexport-on-windows, intel C compiler follows the Visual C++ way with respect to __declspec, and as I checked yesterday, it works.
I did not test what happens if HDF5 is compiled with visual c++ and cgnslib with intel or vice versa.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,49,2017-12-27T02:31:26Z,2018-02-09T19:16:30Z,2018-02-09T22:59:01Z,MERGED,True,29,23,4,https://github.com/matmel,Shared lib (dll) can be built on windows. Fixes CGNS-129.,3,[],https://github.com/CGNS/CGNS/pull/49,https://github.com/brtnfld,6,https://github.com/CGNS/CGNS/pull/49#issuecomment-361330917,"The main change is in root CMakeList.txt. I had to change a the location of the if block that adds the HDF5 definitions -DH5_BUILT_AS_DYNAMIC_LIB and -DH5_BUILT_AS_STATIC_LIB. They are required to properly define HDF5 headers on windows, especially to export/import symbols correctly.
I found this blog post useful to understand correctly the dll symbol export mechanism.
Also, I changed the appveyor script to build the shared version of CGNSlib.
A couple of question
Question 1
In ADFH.h the line
#if defined(WIN32)

Should probably be replaced with
#if defined(_MSC_VER)

as it is done in HDF5 library (see H5api_adpt.h for instance) because the __declspec(dllexport) decorator thing is only relevant for MSVC as far as I know. gcc on windows does not have this requirement.
Question 2
Should we update the version of HDF5 (1.10.*) and AppVeyor image to use the latest visual studio?",Are you testing with cygwin? I think the issue is we are not currently testing CGNS with cygwin; not with CI or in the daily testing we run. I'm not even sure the cygwin build still works.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,49,2017-12-27T02:31:26Z,2018-02-09T19:16:30Z,2018-02-09T22:59:01Z,MERGED,True,29,23,4,https://github.com/matmel,Shared lib (dll) can be built on windows. Fixes CGNS-129.,3,[],https://github.com/CGNS/CGNS/pull/49,https://github.com/matmel,7,https://github.com/CGNS/CGNS/pull/49#issuecomment-361339425,"The main change is in root CMakeList.txt. I had to change a the location of the if block that adds the HDF5 definitions -DH5_BUILT_AS_DYNAMIC_LIB and -DH5_BUILT_AS_STATIC_LIB. They are required to properly define HDF5 headers on windows, especially to export/import symbols correctly.
I found this blog post useful to understand correctly the dll symbol export mechanism.
Also, I changed the appveyor script to build the shared version of CGNSlib.
A couple of question
Question 1
In ADFH.h the line
#if defined(WIN32)

Should probably be replaced with
#if defined(_MSC_VER)

as it is done in HDF5 library (see H5api_adpt.h for instance) because the __declspec(dllexport) decorator thing is only relevant for MSVC as far as I know. gcc on windows does not have this requirement.
Question 2
Should we update the version of HDF5 (1.10.*) and AppVeyor image to use the latest visual studio?","No I don't test with cygwin and have no particular intention to test it neither 😉
I just tested with visual c++ and intel c++ and I was not able to reproduce the linking errors with intel except when I unfortunately mixed a 32bit build of HDF5 with a 64bit build of cgnslib.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,49,2017-12-27T02:31:26Z,2018-02-09T19:16:30Z,2018-02-09T22:59:01Z,MERGED,True,29,23,4,https://github.com/matmel,Shared lib (dll) can be built on windows. Fixes CGNS-129.,3,[],https://github.com/CGNS/CGNS/pull/49,https://github.com/brtnfld,8,https://github.com/CGNS/CGNS/pull/49#issuecomment-363805019,"The main change is in root CMakeList.txt. I had to change a the location of the if block that adds the HDF5 definitions -DH5_BUILT_AS_DYNAMIC_LIB and -DH5_BUILT_AS_STATIC_LIB. They are required to properly define HDF5 headers on windows, especially to export/import symbols correctly.
I found this blog post useful to understand correctly the dll symbol export mechanism.
Also, I changed the appveyor script to build the shared version of CGNSlib.
A couple of question
Question 1
In ADFH.h the line
#if defined(WIN32)

Should probably be replaced with
#if defined(_MSC_VER)

as it is done in HDF5 library (see H5api_adpt.h for instance) because the __declspec(dllexport) decorator thing is only relevant for MSVC as far as I know. gcc on windows does not have this requirement.
Question 2
Should we update the version of HDF5 (1.10.*) and AppVeyor image to use the latest visual studio?","looks fine, but we should add multiple testing configurations to appveyor for testing both static and shared builds instead of just doing shared builds.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,49,2017-12-27T02:31:26Z,2018-02-09T19:16:30Z,2018-02-09T22:59:01Z,MERGED,True,29,23,4,https://github.com/matmel,Shared lib (dll) can be built on windows. Fixes CGNS-129.,3,[],https://github.com/CGNS/CGNS/pull/49,https://github.com/matmel,9,https://github.com/CGNS/CGNS/pull/49#issuecomment-364554954,"The main change is in root CMakeList.txt. I had to change a the location of the if block that adds the HDF5 definitions -DH5_BUILT_AS_DYNAMIC_LIB and -DH5_BUILT_AS_STATIC_LIB. They are required to properly define HDF5 headers on windows, especially to export/import symbols correctly.
I found this blog post useful to understand correctly the dll symbol export mechanism.
Also, I changed the appveyor script to build the shared version of CGNSlib.
A couple of question
Question 1
In ADFH.h the line
#if defined(WIN32)

Should probably be replaced with
#if defined(_MSC_VER)

as it is done in HDF5 library (see H5api_adpt.h for instance) because the __declspec(dllexport) decorator thing is only relevant for MSVC as far as I know. gcc on windows does not have this requirement.
Question 2
Should we update the version of HDF5 (1.10.*) and AppVeyor image to use the latest visual studio?","Thank you @brtnfld for merging this.
I realized yesterday that I actually build a shared version of the library alongside with the static version. The tests are linked with the static version only. When the dynamic version is built, the tests should link with the dynamic one.
I will open a new PR with your code review comments, the fix in the testing and a build matrix in the appveyor configuration. BTW do you want me to test two versions of the HDF5 library?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,49,2017-12-27T02:31:26Z,2018-02-09T19:16:30Z,2018-02-09T22:59:01Z,MERGED,True,29,23,4,https://github.com/matmel,Shared lib (dll) can be built on windows. Fixes CGNS-129.,3,[],https://github.com/CGNS/CGNS/pull/49,https://github.com/brtnfld,10,https://github.com/CGNS/CGNS/pull/49#issuecomment-364563151,"The main change is in root CMakeList.txt. I had to change a the location of the if block that adds the HDF5 definitions -DH5_BUILT_AS_DYNAMIC_LIB and -DH5_BUILT_AS_STATIC_LIB. They are required to properly define HDF5 headers on windows, especially to export/import symbols correctly.
I found this blog post useful to understand correctly the dll symbol export mechanism.
Also, I changed the appveyor script to build the shared version of CGNSlib.
A couple of question
Question 1
In ADFH.h the line
#if defined(WIN32)

Should probably be replaced with
#if defined(_MSC_VER)

as it is done in HDF5 library (see H5api_adpt.h for instance) because the __declspec(dllexport) decorator thing is only relevant for MSVC as far as I know. gcc on windows does not have this requirement.
Question 2
Should we update the version of HDF5 (1.10.*) and AppVeyor image to use the latest visual studio?","That would be great if you can update appveyor with a matrix build for windows, we could add testing for 1.10.1 if we had a place to download the pre-built binaries from, I don't want to build HDF5 from source.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,49,2017-12-27T02:31:26Z,2018-02-09T19:16:30Z,2018-02-09T22:59:01Z,MERGED,True,29,23,4,https://github.com/matmel,Shared lib (dll) can be built on windows. Fixes CGNS-129.,3,[],https://github.com/CGNS/CGNS/pull/49,https://github.com/brtnfld,11,https://github.com/CGNS/CGNS/pull/49#issuecomment-364593879,"The main change is in root CMakeList.txt. I had to change a the location of the if block that adds the HDF5 definitions -DH5_BUILT_AS_DYNAMIC_LIB and -DH5_BUILT_AS_STATIC_LIB. They are required to properly define HDF5 headers on windows, especially to export/import symbols correctly.
I found this blog post useful to understand correctly the dll symbol export mechanism.
Also, I changed the appveyor script to build the shared version of CGNSlib.
A couple of question
Question 1
In ADFH.h the line
#if defined(WIN32)

Should probably be replaced with
#if defined(_MSC_VER)

as it is done in HDF5 library (see H5api_adpt.h for instance) because the __declspec(dllexport) decorator thing is only relevant for MSVC as far as I know. gcc on windows does not have this requirement.
Question 2
Should we update the version of HDF5 (1.10.*) and AppVeyor image to use the latest visual studio?",The CI develop branch fails with this commit on windows.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,50,2018-01-24T18:42:55Z,2018-02-06T16:00:55Z,2018-02-06T16:00:55Z,MERGED,True,2,0,1,https://github.com/gsjaardema,"If processor has no data, set end = start = 0",1,[],https://github.com/CGNS/CGNS/pull/50,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/50,"If a processor has no data to write, then the start and end values passed in are sometimes arbitrary from calling code.  For example end > start or end == start.  Depending on the values, there can be logic errors in the following code.  To avoid this, set start = end = 0 if a processor has no data to output (section->parelem == NULL).","If a processor has no data to write, then the start and end values passed in are sometimes arbitrary from calling code.  For example end > start or end == start.  Depending on the values, there can be logic errors in the following code.  To avoid this, set start = end = 0 if a processor has no data to output (section->parelem == NULL).",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,51,2018-01-24T18:51:23Z,2018-01-24T21:47:59Z,2018-01-24T21:48:14Z,CLOSED,False,2,1,1,https://github.com/gsjaardema,Workaround OSX compiler bug,1,[],https://github.com/CGNS/CGNS/pull/51,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/51,"The changed code above is functionally equivalent to the original code, but I get HDF5 errors in H5Dwrite with the original code, but not with the changed code on OSX.  This is with clang-3.9.1 specifically, but I also saw with other compilers.  Not sure what the issue is.  I can also get correct behavior by adding a ""printf(stderr, ""%d %d\n"", start, end)"" after line 608.  Obviously something strange is happening and I am OK if the PR is rejected since it really adds no true value...
Just proposing in case others are seeing a similar problem and this can provide a solution.","The changed code above is functionally equivalent to the original code, but I get HDF5 errors in H5Dwrite with the original code, but not with the changed code on OSX.  This is with clang-3.9.1 specifically, but I also saw with other compilers.  Not sure what the issue is.  I can also get correct behavior by adding a ""printf(stderr, ""%d %d\n"", start, end)"" after line 608.  Obviously something strange is happening and I am OK if the PR is rejected since it really adds no true value...
Just proposing in case others are seeing a similar problem and this can provide a solution.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,51,2018-01-24T18:51:23Z,2018-01-24T21:47:59Z,2018-01-24T21:48:14Z,CLOSED,False,2,1,1,https://github.com/gsjaardema,Workaround OSX compiler bug,1,[],https://github.com/CGNS/CGNS/pull/51,https://github.com/gsjaardema,2,https://github.com/CGNS/CGNS/pull/51#issuecomment-360284804,"The changed code above is functionally equivalent to the original code, but I get HDF5 errors in H5Dwrite with the original code, but not with the changed code on OSX.  This is with clang-3.9.1 specifically, but I also saw with other compilers.  Not sure what the issue is.  I can also get correct behavior by adding a ""printf(stderr, ""%d %d\n"", start, end)"" after line 608.  Obviously something strange is happening and I am OK if the PR is rejected since it really adds no true value...
Just proposing in case others are seeing a similar problem and this can provide a solution.",This does not seem to be needed.  #50 seems to have fixed the issue without this PR.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,52,2018-01-25T17:30:54Z,2018-01-29T16:18:58Z,2018-01-29T16:18:58Z,MERGED,True,7,2,1,https://github.com/gsjaardema,"If check needs to link, then need library path",1,[],https://github.com/CGNS/CGNS/pull/52,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/52,"If the CHECK_HDF5_FEATURE macro needs to link in order to determine whether feature exists, then need to add the library path for the hdf5 library to the link line.   The macro was not correctly setting the collective metadata variable when it existed in the hdf5 library","If the CHECK_HDF5_FEATURE macro needs to link in order to determine whether feature exists, then need to add the library path for the hdf5 library to the link line.   The macro was not correctly setting the collective metadata variable when it existed in the hdf5 library",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,53,2018-01-29T16:06:28Z,2018-02-12T16:55:52Z,2018-02-12T16:55:52Z,MERGED,True,44,32,10,https://github.com/mathstuf,Cmake fixups,6,[],https://github.com/CGNS/CGNS/pull/53,https://github.com/mathstuf,1,https://github.com/CGNS/CGNS/pull/53,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,54,2018-01-31T17:23:01Z,2018-06-05T14:45:52Z,2018-06-05T14:45:52Z,MERGED,True,1776,465,41,https://github.com/pjle,New ngon converter,9,[],https://github.com/CGNS/CGNS/pull/54,https://github.com/pjle,1,https://github.com/CGNS/CGNS/pull/54,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,54,2018-01-31T17:23:01Z,2018-06-05T14:45:52Z,2018-06-05T14:45:52Z,MERGED,True,1776,465,41,https://github.com/pjle,New ngon converter,9,[],https://github.com/CGNS/CGNS/pull/54,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/54#issuecomment-394734643,,CGNS-121 | CPEX 0041 issues with MIXED/NFACES,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,55,2018-02-04T10:19:40Z,2018-02-15T16:41:25Z,2018-02-15T16:41:25Z,MERGED,True,0,34,4,https://github.com/manisandro,Drop obsolete matherr hack,1,[],https://github.com/CGNS/CGNS/pull/55,https://github.com/manisandro,1,https://github.com/CGNS/CGNS/pull/55,"See https://wiki.tcl.tk/3577
Also, matherr has been removed from glibc since 2.27, see http://man7.org/linux/man-pages/man3/matherr.3.html.","See https://wiki.tcl.tk/3577
Also, matherr has been removed from glibc since 2.27, see http://man7.org/linux/man-pages/man3/matherr.3.html.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,56,2018-02-09T10:09:46Z,2018-02-16T22:59:02Z,2018-02-16T22:59:02Z,MERGED,True,1,0,1,https://github.com/mfolusiak,Fix cgnsview linking to HDF5 libs.,1,[],https://github.com/CGNS/CGNS/pull/56,https://github.com/mfolusiak,1,https://github.com/CGNS/CGNS/pull/56,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,57,2018-02-12T16:59:26Z,2018-02-12T17:00:54Z,2018-02-12T17:01:05Z,MERGED,True,32,44,10,https://github.com/brtnfld,"Revert ""Cmake fixups""",1,[],https://github.com/CGNS/CGNS/pull/57,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/57,"Can you do a pull request for develop and not master?
Reverts #53","Can you do a pull request for develop and not master?
Reverts #53",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,58,2018-02-12T17:04:32Z,2018-02-12T17:27:45Z,2018-02-13T16:57:16Z,MERGED,True,44,32,10,https://github.com/mathstuf,Cmake fixups,6,[],https://github.com/CGNS/CGNS/pull/58,https://github.com/mathstuf,1,https://github.com/CGNS/CGNS/pull/58,Cc: @brtnfld,Cc: @brtnfld,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,59,2018-02-15T08:25:15Z,2018-04-19T14:52:05Z,2018-04-19T14:52:05Z,MERGED,True,4,0,1,https://github.com/mfolusiak,Add missing dll export symbols from Fortran module.,1,[],https://github.com/CGNS/CGNS/pull/59,https://github.com/mfolusiak,1,https://github.com/CGNS/CGNS/pull/59,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,59,2018-02-15T08:25:15Z,2018-04-19T14:52:05Z,2018-04-19T14:52:05Z,MERGED,True,4,0,1,https://github.com/mfolusiak,Add missing dll export symbols from Fortran module.,1,[],https://github.com/CGNS/CGNS/pull/59,https://github.com/mfolusiak,2,https://github.com/CGNS/CGNS/pull/59#issuecomment-380010281,,does it look ok?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,60,2018-04-03T06:53:02Z,2018-04-13T22:01:45Z,2018-04-14T14:27:04Z,CLOSED,False,19,13,1,https://github.com/kskinoue0612,Now compression for HDF5 files is working.,1,[],https://github.com/CGNS/CGNS/pull/60,https://github.com/kskinoue0612,1,https://github.com/CGNS/CGNS/pull/60,"Previously, cg_configure() with CG_CONFIG_HDF5_COMPRESS option did not work, and this commit will fix that.
I know this implementation about how to decide the size of chunk is not perfect, but acceptable, I hope.
Thanks for developing the CGNS library. It is quite a useful library, and I depend on this in my work.
Thanks,
Keisuke Inoue","Previously, cg_configure() with CG_CONFIG_HDF5_COMPRESS option did not work, and this commit will fix that.
I know this implementation about how to decide the size of chunk is not perfect, but acceptable, I hope.
Thanks for developing the CGNS library. It is quite a useful library, and I depend on this in my work.
Thanks,
Keisuke Inoue",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,60,2018-04-03T06:53:02Z,2018-04-13T22:01:45Z,2018-04-14T14:27:04Z,CLOSED,False,19,13,1,https://github.com/kskinoue0612,Now compression for HDF5 files is working.,1,[],https://github.com/CGNS/CGNS/pull/60,https://github.com/kskinoue0612,2,https://github.com/CGNS/CGNS/pull/60#issuecomment-378151957,"Previously, cg_configure() with CG_CONFIG_HDF5_COMPRESS option did not work, and this commit will fix that.
I know this implementation about how to decide the size of chunk is not perfect, but acceptable, I hope.
Thanks for developing the CGNS library. It is quite a useful library, and I depend on this in my work.
Thanks,
Keisuke Inoue","Hi,
I've found an issue on this pull request, so please do not merge this now. I'll fix, and contact again.
Thanks,
Keisuke Inoue",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,60,2018-04-03T06:53:02Z,2018-04-13T22:01:45Z,2018-04-14T14:27:04Z,CLOSED,False,19,13,1,https://github.com/kskinoue0612,Now compression for HDF5 files is working.,1,[],https://github.com/CGNS/CGNS/pull/60,https://github.com/kskinoue0612,3,https://github.com/CGNS/CGNS/pull/60#issuecomment-378156659,"Previously, cg_configure() with CG_CONFIG_HDF5_COMPRESS option did not work, and this commit will fix that.
I know this implementation about how to decide the size of chunk is not perfect, but acceptable, I hope.
Thanks for developing the CGNS library. It is quite a useful library, and I depend on this in my work.
Thanks,
Keisuke Inoue","Hi,
I'm sorry, it was my misunderstanding that this pull request has an issue.
I thought I tested with dimensions not multiple of 5, and it failed.
But that was not true. This pull request worked with dimensions like 111.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,60,2018-04-03T06:53:02Z,2018-04-13T22:01:45Z,2018-04-14T14:27:04Z,CLOSED,False,19,13,1,https://github.com/kskinoue0612,Now compression for HDF5 files is working.,1,[],https://github.com/CGNS/CGNS/pull/60,https://github.com/brtnfld,4,https://github.com/CGNS/CGNS/pull/60#issuecomment-381271303,"Previously, cg_configure() with CG_CONFIG_HDF5_COMPRESS option did not work, and this commit will fix that.
I know this implementation about how to decide the size of chunk is not perfect, but acceptable, I hope.
Thanks for developing the CGNS library. It is quite a useful library, and I depend on this in my work.
Thanks,
Keisuke Inoue","Unfortunately, the issue with compression is getting chunking correct, which is the main reason why it's not implemented. Picking a single chunk size is not the best solution, you can get situations that the chunks don't align with dataset bounds, so you may cause more I/O than desired. You also have to consider the size of the chunk cache. Chunk dimension sizes should align with possible hyperslab dimensions for I/O. Setting the chunk size by this method will create chunks that are most likely too large. Setting chunk size is mostly about performance, and not necessarily just about getting compression to work (which is trivial once chunking works). Is a given chunk size for an unstructured mesh good for a structured mesh?
You also need to take into account the parallel file system parameters, for example, your chunk size in relation to the stripe size on a Lustre system. Also in parallel, there is a 2GB chunk size limit.
Adding compression/chunking is probably beyond a simple pull request because a lot of different use cases have to be handled.
For this feature to be implemented, it will probably need a CGNS Proposals for Extension (CPEX) or an RFC, so that we can get feedback from other users and the committee, see http://cgns.github.io/Proposals.html
The proposal would need to address use cases, benchmarks, how to introduce custom compression filters, how does the CGNS library handle a CGNS file with unknown compression filters, how to have a user set chunk size, etc... We also need to have test code.
If you would like to further discuss this, we can invite you to a CGNS steering committee meeting, and we can decide where to go from there. It would be great to have compression enabled in CGNS, but I think it's more involved than this solution.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,60,2018-04-03T06:53:02Z,2018-04-13T22:01:45Z,2018-04-14T14:27:04Z,CLOSED,False,19,13,1,https://github.com/kskinoue0612,Now compression for HDF5 files is working.,1,[],https://github.com/CGNS/CGNS/pull/60,https://github.com/kskinoue0612,5,https://github.com/CGNS/CGNS/pull/60#issuecomment-381332880,"Previously, cg_configure() with CG_CONFIG_HDF5_COMPRESS option did not work, and this commit will fix that.
I know this implementation about how to decide the size of chunk is not perfect, but acceptable, I hope.
Thanks for developing the CGNS library. It is quite a useful library, and I depend on this in my work.
Thanks,
Keisuke Inoue","Hi Scot,
Thank you for taking your time to comment to my pull request. I've understood the technical detail, and understood that my PR was not good enough to be merged.
I actually tested my PR code with just a few test cases. In those cases my code worked fine and CGNS file size was decreased to be less than 10% of the original size. That was the reason that I made the PR.
Anyway, I understand that chunk size is important.
Currently, chunking related implementation is in ADFH_Put_Dimension_Information, and this function is called every time when an array is written into CGNS file. It will be difficult to guess the good chunk size for every calls for this function, like writing Zone_t, Unstructured Grid coordinates, Structured Grid coordinates, or Solution values. One possibility will be to use different implementation of guessing chunk size for different use cases.
I understand the importance of parallel I/O too. Recently I've worked on ADIOS (https://www.olcf.ornl.gov/center-projects/adios/). Working on this project, I've got to know that recently in HPC region, the low speed of storage is dragging down the speed of whole system. Parallel I/O will be one of the solutions for the issue.
Thanks for your comment to invite me to CGNS steering committee. It is an great honor for me. I live in Japan, and it will be hard for me to join the committee, actually. But, I'm sure I'll go on to be a heavy user of CGNS library, and if I find out something that I can contribute to make CGNS better, I'll try to contribute maybe through making a new proposal to the issue tracking system, or making a pull request in github.
Thanks again,
Keisuke Inoue",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,61,2018-04-24T19:22:57Z,2019-08-15T18:40:40Z,2019-08-15T18:40:41Z,CLOSED,False,49,5,2,https://github.com/gsjaardema,Proof-of-concept for allowing collective and independent HDF5 io,5,[],https://github.com/CGNS/CGNS/pull/61,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/61,"With the current library, if the parallel API is used, then it is not possible to use the ""independent"" API in the same execution.  We have a need to support both ""collective"" in which all mpi ranks are outputting to a single file and ""independent"" in which each mpi rank is outputting to its own file (file-per-processor).
As best I can tell, the changes in this PR allow this behavior.  It is currently more of a proof-of-concept than it is production-ready code.  The basic theory is that a mpi_initialized member is added to the cgns_io struct.
At file creation/open, the state of the global variable pcg_mpi_initialized is checked and stored in the cgns_io struct assigned to that file.  Then at each read/write call, the pcg_mpi_initialized global variable is set to the value in cgio->mpi_initialized
A klugy portion of this is that when the client calls cg_open after having previously called cgp_open, the client needs to manually set the value of pcg_mpi_initialized = 0; and also call cg_set_file_type(CG_FILE_HDF5));.  This needs to be done in a more user-friendly manner, but works OK in the proof of concept.
Comments?  Is this worth pursuing, or did I overlook something that is a deal-breaker for supporting this behavior?","With the current library, if the parallel API is used, then it is not possible to use the ""independent"" API in the same execution.  We have a need to support both ""collective"" in which all mpi ranks are outputting to a single file and ""independent"" in which each mpi rank is outputting to its own file (file-per-processor).
As best I can tell, the changes in this PR allow this behavior.  It is currently more of a proof-of-concept than it is production-ready code.  The basic theory is that a mpi_initialized member is added to the cgns_io struct.
At file creation/open, the state of the global variable pcg_mpi_initialized is checked and stored in the cgns_io struct assigned to that file.  Then at each read/write call, the pcg_mpi_initialized global variable is set to the value in cgio->mpi_initialized
A klugy portion of this is that when the client calls cg_open after having previously called cgp_open, the client needs to manually set the value of pcg_mpi_initialized = 0; and also call cg_set_file_type(CG_FILE_HDF5));.  This needs to be done in a more user-friendly manner, but works OK in the proof of concept.
Comments?  Is this worth pursuing, or did I overlook something that is a deal-breaker for supporting this behavior?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,61,2018-04-24T19:22:57Z,2019-08-15T18:40:40Z,2019-08-15T18:40:41Z,CLOSED,False,49,5,2,https://github.com/gsjaardema,Proof-of-concept for allowing collective and independent HDF5 io,5,[],https://github.com/CGNS/CGNS/pull/61,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/61#issuecomment-465195004,"With the current library, if the parallel API is used, then it is not possible to use the ""independent"" API in the same execution.  We have a need to support both ""collective"" in which all mpi ranks are outputting to a single file and ""independent"" in which each mpi rank is outputting to its own file (file-per-processor).
As best I can tell, the changes in this PR allow this behavior.  It is currently more of a proof-of-concept than it is production-ready code.  The basic theory is that a mpi_initialized member is added to the cgns_io struct.
At file creation/open, the state of the global variable pcg_mpi_initialized is checked and stored in the cgns_io struct assigned to that file.  Then at each read/write call, the pcg_mpi_initialized global variable is set to the value in cgio->mpi_initialized
A klugy portion of this is that when the client calls cg_open after having previously called cgp_open, the client needs to manually set the value of pcg_mpi_initialized = 0; and also call cg_set_file_type(CG_FILE_HDF5));.  This needs to be done in a more user-friendly manner, but works OK in the proof of concept.
Comments?  Is this worth pursuing, or did I overlook something that is a deal-breaker for supporting this behavior?",Is this POC complementary to the recent merge of #105 which allows usage of serial read/write in parallel context ?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,61,2018-04-24T19:22:57Z,2019-08-15T18:40:40Z,2019-08-15T18:40:41Z,CLOSED,False,49,5,2,https://github.com/gsjaardema,Proof-of-concept for allowing collective and independent HDF5 io,5,[],https://github.com/CGNS/CGNS/pull/61,https://github.com/gsjaardema,3,https://github.com/CGNS/CGNS/pull/61#issuecomment-465664481,"With the current library, if the parallel API is used, then it is not possible to use the ""independent"" API in the same execution.  We have a need to support both ""collective"" in which all mpi ranks are outputting to a single file and ""independent"" in which each mpi rank is outputting to its own file (file-per-processor).
As best I can tell, the changes in this PR allow this behavior.  It is currently more of a proof-of-concept than it is production-ready code.  The basic theory is that a mpi_initialized member is added to the cgns_io struct.
At file creation/open, the state of the global variable pcg_mpi_initialized is checked and stored in the cgns_io struct assigned to that file.  Then at each read/write call, the pcg_mpi_initialized global variable is set to the value in cgio->mpi_initialized
A klugy portion of this is that when the client calls cg_open after having previously called cgp_open, the client needs to manually set the value of pcg_mpi_initialized = 0; and also call cg_set_file_type(CG_FILE_HDF5));.  This needs to be done in a more user-friendly manner, but works OK in the proof of concept.
Comments?  Is this worth pursuing, or did I overlook something that is a deal-breaker for supporting this behavior?","@MicK7
I haven't looked at #105 in detail, but based on a cusory glance it may be the #105 could be the path to removing the kluge that I mention in the second to the last paragraph of my original comment.  I will take a closer look and see how my patch interacts with #105",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,61,2018-04-24T19:22:57Z,2019-08-15T18:40:40Z,2019-08-15T18:40:41Z,CLOSED,False,49,5,2,https://github.com/gsjaardema,Proof-of-concept for allowing collective and independent HDF5 io,5,[],https://github.com/CGNS/CGNS/pull/61,https://github.com/gsjaardema,4,https://github.com/CGNS/CGNS/pull/61#issuecomment-521750452,"With the current library, if the parallel API is used, then it is not possible to use the ""independent"" API in the same execution.  We have a need to support both ""collective"" in which all mpi ranks are outputting to a single file and ""independent"" in which each mpi rank is outputting to its own file (file-per-processor).
As best I can tell, the changes in this PR allow this behavior.  It is currently more of a proof-of-concept than it is production-ready code.  The basic theory is that a mpi_initialized member is added to the cgns_io struct.
At file creation/open, the state of the global variable pcg_mpi_initialized is checked and stored in the cgns_io struct assigned to that file.  Then at each read/write call, the pcg_mpi_initialized global variable is set to the value in cgio->mpi_initialized
A klugy portion of this is that when the client calls cg_open after having previously called cgp_open, the client needs to manually set the value of pcg_mpi_initialized = 0; and also call cg_set_file_type(CG_FILE_HDF5));.  This needs to be done in a more user-friendly manner, but works OK in the proof of concept.
Comments?  Is this worth pursuing, or did I overlook something that is a deal-breaker for supporting this behavior?","OK, I think I have convinced myself that this is not necessary.  Setting the communicator to MPI_COMM_SELF prior to calling cgp_open()  seems to give the correct behavior.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,62,2018-04-25T20:28:04Z,2018-05-14T17:44:36Z,2018-05-14T17:44:36Z,MERGED,True,10,6,1,https://github.com/gsjaardema,"Improve error messages, fix error check",1,[],https://github.com/CGNS/CGNS/pull/62,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/62,"Improved the error messages.  The original message for checking for valid range would output something that didn't make sense or at least wasn't helpful.  Split this into two checks and output info that helps locate problem.
Added connectname to error messages to show which connection had issues.
The transform check was testing abs(transform[i]) < 0 which isn't possible.  It should be <=0 or <1","Improved the error messages.  The original message for checking for valid range would output something that didn't make sense or at least wasn't helpful.  Split this into two checks and output info that helps locate problem.
Added connectname to error messages to show which connection had issues.
The transform check was testing abs(transform[i]) < 0 which isn't possible.  It should be <=0 or <1",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,62,2018-04-25T20:28:04Z,2018-05-14T17:44:36Z,2018-05-14T17:44:36Z,MERGED,True,10,6,1,https://github.com/gsjaardema,"Improve error messages, fix error check",1,[],https://github.com/CGNS/CGNS/pull/62,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/62#issuecomment-388902979,"Improved the error messages.  The original message for checking for valid range would output something that didn't make sense or at least wasn't helpful.  Split this into two checks and output info that helps locate problem.
Added connectname to error messages to show which connection had issues.
The transform check was testing abs(transform[i]) < 0 which isn't possible.  It should be <=0 or <1","CGNS-136: Improve error messages, fix error check #62",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,63,2018-05-22T02:30:44Z,2018-05-22T02:31:00Z,2018-05-22T02:31:22Z,MERGED,True,6,10,1,https://github.com/brtnfld,"Revert ""Improve error messages, fix error check""",1,[],https://github.com/CGNS/CGNS/pull/63,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/63,"Reverts #62
Via Mark,
Fortunately, I just spent most of April refactoring some 1-to-1 connection logic in our code (ala CGNS), and so, I was able to see that #62 breaks/violates the CGNS SIDS.
The “transform” for 1:1 connections is allowed to be 0 in null (singleton) dimensions.  Section 8.1 of the SIDS:
http://cgns.github.io/CGNS_docs_current/sids/cnct.html#GridConnectivity1to1
Says the following:
For establishing relationships between adjacent and current zone indices lying on the interface itself, one of the elements of Transform is superfluous since one component of both interface indices remains constant. It is therefore acceptable to set that element of Transform to zero.
The new check in #63 on line 5837 is not allowing abs(transform)==0, thereby violating the above statement (in red).
If you look at the logic immediately after that check, there is an “if abs(transform)>0” on line 5841 – that check is needed to allow for 0 in some transform components, and would otherwise not be needed if the transform was not allowed to have a 0.","Reverts #62
Via Mark,
Fortunately, I just spent most of April refactoring some 1-to-1 connection logic in our code (ala CGNS), and so, I was able to see that #62 breaks/violates the CGNS SIDS.
The “transform” for 1:1 connections is allowed to be 0 in null (singleton) dimensions.  Section 8.1 of the SIDS:
http://cgns.github.io/CGNS_docs_current/sids/cnct.html#GridConnectivity1to1
Says the following:
For establishing relationships between adjacent and current zone indices lying on the interface itself, one of the elements of Transform is superfluous since one component of both interface indices remains constant. It is therefore acceptable to set that element of Transform to zero.
The new check in #63 on line 5837 is not allowing abs(transform)==0, thereby violating the above statement (in red).
If you look at the logic immediately after that check, there is an “if abs(transform)>0” on line 5841 – that check is needed to allow for 0 in some transform components, and would otherwise not be needed if the transform was not allowed to have a 0.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,64,2018-06-05T15:33:00Z,2018-06-05T15:33:14Z,2018-06-05T15:33:24Z,MERGED,True,465,1776,41,https://github.com/brtnfld,"Revert ""New ngon converter""",1,[],https://github.com/CGNS/CGNS/pull/64,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/64,"Reverts #54
We need to decide how to handle API changes before merging. Also, fails in the compilation of tests/ser_benchmark_hdf5.c","Reverts #54
We need to decide how to handle API changes before merging. Also, fails in the compilation of tests/ser_benchmark_hdf5.c",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,65,2018-06-06T10:01:25Z,2018-06-13T15:15:25Z,2018-06-13T15:15:26Z,CLOSED,False,2,2,2,https://github.com/NovA80,Fix Windows build with cmake,1,[],https://github.com/CGNS/CGNS/pull/65,https://github.com/NovA80,1,https://github.com/CGNS/CGNS/pull/65,"The patch addresses the following issues on building CGNS in Windows 7 x64 using CMake-3.11.3 & Visual Studio 2017.

Zlib library path specification in cmake was failing.
open64() syscall is not available on Windows.","The patch addresses the following issues on building CGNS in Windows 7 x64 using CMake-3.11.3 & Visual Studio 2017.

Zlib library path specification in cmake was failing.
open64() syscall is not available on Windows.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,65,2018-06-06T10:01:25Z,2018-06-13T15:15:25Z,2018-06-13T15:15:26Z,CLOSED,False,2,2,2,https://github.com/NovA80,Fix Windows build with cmake,1,[],https://github.com/CGNS/CGNS/pull/65,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/65#issuecomment-396974894,"The patch addresses the following issues on building CGNS in Windows 7 x64 using CMake-3.11.3 & Visual Studio 2017.

Zlib library path specification in cmake was failing.
open64() syscall is not available on Windows.",I made minor modifications to the PR and checked it in. Thanks,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,66,2018-06-08T15:21:35Z,2018-06-14T13:54:45Z,2018-06-14T13:54:45Z,MERGED,True,11,7,1,https://github.com/gsjaardema,"Improve error messages, fix error check (fixed)",1,[],https://github.com/CGNS/CGNS/pull/66,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/66,"Improved the error messages.  The original message for checking for valid range would output something that didn't make sense or at least wasn't helpful.  Split this into two checks and output info that helps locate problem.
Added connectname to error messages to show which connection had issues.
The transform check was testing abs(transform[i]) < 0 which isn't possible so that can be removed.  Note that transform[i] can be equal to zero in the null dimension which wasn't recognized in the original pull request.
This was originally submitted as #62 which was applied and then reverted by #63.  Issues identified in #63 have been addressed in this revision.","Improved the error messages.  The original message for checking for valid range would output something that didn't make sense or at least wasn't helpful.  Split this into two checks and output info that helps locate problem.
Added connectname to error messages to show which connection had issues.
The transform check was testing abs(transform[i]) < 0 which isn't possible so that can be removed.  Note that transform[i] can be equal to zero in the null dimension which wasn't recognized in the original pull request.
This was originally submitted as #62 which was applied and then reverted by #63.  Issues identified in #63 have been addressed in this revision.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,67,2018-06-20T10:36:07Z,2018-08-09T14:42:53Z,2019-09-02T09:03:50Z,MERGED,True,2493,433,29,https://github.com/MicK7,support new ngon layout,4,[],https://github.com/CGNS/CGNS/pull/67,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/67,"keep existing functions for FIXED_SIZE elements
add functions cg_poly_* for poly elements section (NGON, NFACE, MIXED)
add a converter tool ""update_ngon"" to convert old files
change MLL version in order to dynamically load and update older files.
update tests to support new layout.","keep existing functions for FIXED_SIZE elements
add functions cg_poly_* for poly elements section (NGON, NFACE, MIXED)
add a converter tool ""update_ngon"" to convert old files
change MLL version in order to dynamically load and update older files.
update tests to support new layout.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,67,2018-06-20T10:36:07Z,2018-08-09T14:42:53Z,2019-09-02T09:03:50Z,MERGED,True,2493,433,29,https://github.com/MicK7,support new ngon layout,4,[],https://github.com/CGNS/CGNS/pull/67,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/67#issuecomment-398803547,"keep existing functions for FIXED_SIZE elements
add functions cg_poly_* for poly elements section (NGON, NFACE, MIXED)
add a converter tool ""update_ngon"" to convert old files
change MLL version in order to dynamically load and update older files.
update tests to support new layout.",Code Review is welcomed now.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,68,2018-07-10T14:13:35Z,2018-07-12T16:31:08Z,2018-07-12T16:31:08Z,MERGED,True,5,4,1,https://github.com/gsjaardema,Eliminate memory leaks in cgi_read_ziter,1,[],https://github.com/CGNS/CGNS/pull/68,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/68,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,69,2018-08-06T12:54:25Z,2018-10-25T15:13:28Z,2018-10-26T11:28:13Z,MERGED,True,1,1,1,https://github.com/mennodeij,Build parallel CGNS on Windows,4,[],https://github.com/CGNS/CGNS/pull/69,https://github.com/mennodeij,1,https://github.com/CGNS/CGNS/pull/69,"I ran into a problem where CGNS with parallel support would not build on Windows (using MS-MPI and parallel HDF5), because 'variable length arrays' are not supported in Visual C. Therefore, these have been replaced with malloc/free version to fix this problem.","I ran into a problem where CGNS with parallel support would not build on Windows (using MS-MPI and parallel HDF5), because 'variable length arrays' are not supported in Visual C. Therefore, these have been replaced with malloc/free version to fix this problem.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,69,2018-08-06T12:54:25Z,2018-10-25T15:13:28Z,2018-10-26T11:28:13Z,MERGED,True,1,1,1,https://github.com/mennodeij,Build parallel CGNS on Windows,4,[],https://github.com/CGNS/CGNS/pull/69,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/69#issuecomment-412004010,"I ran into a problem where CGNS with parallel support would not build on Windows (using MS-MPI and parallel HDF5), because 'variable length arrays' are not supported in Visual C. Therefore, these have been replaced with malloc/free version to fix this problem.","Wouldn't it be easier to just have a fixed size like this :
hsize_t start[CGIO_MAX_DIMENSIONS], dims[CGIO_MAX_DIMENSIONS];",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,69,2018-08-06T12:54:25Z,2018-10-25T15:13:28Z,2018-10-26T11:28:13Z,MERGED,True,1,1,1,https://github.com/mennodeij,Build parallel CGNS on Windows,4,[],https://github.com/CGNS/CGNS/pull/69,https://github.com/mennodeij,3,https://github.com/CGNS/CGNS/pull/69#issuecomment-412034474,"I ran into a problem where CGNS with parallel support would not build on Windows (using MS-MPI and parallel HDF5), because 'variable length arrays' are not supported in Visual C. Therefore, these have been replaced with malloc/free version to fix this problem.","Maybe, but I am not sufficiently on top of the code to see if that would make a difference. My proposed implementation is functionally identical. CGIO_MAX_DIMENSIONS is defined to be 12.
If you proposal will ""always work"" I'm happy to change it, as it is indeed much easier.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,69,2018-08-06T12:54:25Z,2018-10-25T15:13:28Z,2018-10-26T11:28:13Z,MERGED,True,1,1,1,https://github.com/mennodeij,Build parallel CGNS on Windows,4,[],https://github.com/CGNS/CGNS/pull/69,https://github.com/MicK7,4,https://github.com/CGNS/CGNS/pull/69#issuecomment-412144245,"I ran into a problem where CGNS with parallel support would not build on Windows (using MS-MPI and parallel HDF5), because 'variable length arrays' are not supported in Visual C. Therefore, these have been replaced with malloc/free version to fix this problem.","The simple version is supposed to be thread safe and faster. Since it only consumed 12 x 2 x sizeof(hsize_t), I assume it is not very big to fit in the stack. I can't think of situation where it would fail. I agree that your implementation is functionally identical.
@brtnfld @gsjaardema Is there a pratical test for this function that could help decide the good solution ?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,69,2018-08-06T12:54:25Z,2018-10-25T15:13:28Z,2018-10-26T11:28:13Z,MERGED,True,1,1,1,https://github.com/mennodeij,Build parallel CGNS on Windows,4,[],https://github.com/CGNS/CGNS/pull/69,https://github.com/brtnfld,5,https://github.com/CGNS/CGNS/pull/69#issuecomment-426677743,"I ran into a problem where CGNS with parallel support would not build on Windows (using MS-MPI and parallel HDF5), because 'variable length arrays' are not supported in Visual C. Therefore, these have been replaced with malloc/free version to fix this problem.","The current method is to use CGIO_MAX_DIMENSIONS, so I would go with that implementation.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,69,2018-08-06T12:54:25Z,2018-10-25T15:13:28Z,2018-10-26T11:28:13Z,MERGED,True,1,1,1,https://github.com/mennodeij,Build parallel CGNS on Windows,4,[],https://github.com/CGNS/CGNS/pull/69,https://github.com/mennodeij,6,https://github.com/CGNS/CGNS/pull/69#issuecomment-433004374,"I ran into a problem where CGNS with parallel support would not build on Windows (using MS-MPI and parallel HDF5), because 'variable length arrays' are not supported in Visual C. Therefore, these have been replaced with malloc/free version to fix this problem.","Apologies for the delay in getting this done, I have been out of the office for a while. The method of using CGIO_MAX_DIMENSIONS has been adopted, making the change rather trivial.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,70,2018-08-10T01:48:48Z,2018-08-10T17:05:29Z,2018-08-10T17:05:29Z,MERGED,True,1,1,1,https://github.com/gsjaardema,Fix bad if test --,1,[],https://github.com/CGNS/CGNS/pull/70,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/70,An if test is using = instead of ==,An if test is using = instead of ==,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,70,2018-08-10T01:48:48Z,2018-08-10T17:05:29Z,2018-08-10T17:05:29Z,MERGED,True,1,1,1,https://github.com/gsjaardema,Fix bad if test --,1,[],https://github.com/CGNS/CGNS/pull/70,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/70#issuecomment-411992871,An if test is using = instead of ==,"Thanks for catching this one.
Probably by dint of reading the code, I do not see the missing ""="" anymore.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,71,2018-08-25T18:05:36Z,2018-10-05T01:18:41Z,2018-10-24T21:06:56Z,MERGED,True,523,200,6,https://github.com/MicK7,Rind plane indexing,6,[],https://github.com/CGNS/CGNS/pull/71,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/71,"This pull request improves rind plane indexing for coordinates reading and writing.
pcgnslib is still a work in progress. Refactoring can be improved.","This pull request improves rind plane indexing for coordinates reading and writing.
pcgnslib is still a work in progress. Refactoring can be improved.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,71,2018-08-25T18:05:36Z,2018-10-05T01:18:41Z,2018-10-24T21:06:56Z,MERGED,True,523,200,6,https://github.com/MicK7,Rind plane indexing,6,[],https://github.com/CGNS/CGNS/pull/71,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/71#issuecomment-422430464,"This pull request improves rind plane indexing for coordinates reading and writing.
pcgnslib is still a work in progress. Refactoring can be improved.","Sorry, I'll try to look at the code this week.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,71,2018-08-25T18:05:36Z,2018-10-05T01:18:41Z,2018-10-24T21:06:56Z,MERGED,True,523,200,6,https://github.com/MicK7,Rind plane indexing,6,[],https://github.com/CGNS/CGNS/pull/71,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/71#issuecomment-423851786,"This pull request improves rind plane indexing for coordinates reading and writing.
pcgnslib is still a work in progress. Refactoring can be improved.",I don't see the documenation for the new cg*coord_general* APIs. Do you have a PR for those?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,71,2018-08-25T18:05:36Z,2018-10-05T01:18:41Z,2018-10-24T21:06:56Z,MERGED,True,523,200,6,https://github.com/MicK7,Rind plane indexing,6,[],https://github.com/CGNS/CGNS/pull/71,https://github.com/smguzik,4,https://github.com/CGNS/CGNS/pull/71#issuecomment-423890835,"This pull request improves rind plane indexing for coordinates reading and writing.
pcgnslib is still a work in progress. Refactoring can be improved.","It follows the API in CPEX 40.  I can take care of merging this request if you want.

Stephen

Stephen Guzik, Ph.D.
Assistant Professor, Department of Mechanical Engineering
Colorado State University

On 09/23/2018 03:11 PM, Scot Breitenfeld wrote:

I don't see the documenation for the new cg*coord_general* APIs. Do you have a PR for those?

—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub<#71 (comment)>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ALsgQWAjGVKlpXe0wAFof6kvWBtK8hPRks5ueAcYgaJpZM4WMev2>.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,71,2018-08-25T18:05:36Z,2018-10-05T01:18:41Z,2018-10-24T21:06:56Z,MERGED,True,523,200,6,https://github.com/MicK7,Rind plane indexing,6,[],https://github.com/CGNS/CGNS/pull/71,https://github.com/brtnfld,5,https://github.com/CGNS/CGNS/pull/71#issuecomment-424023878,"This pull request improves rind plane indexing for coordinates reading and writing.
pcgnslib is still a work in progress. Refactoring can be improved.","That would be great, thanks.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,71,2018-08-25T18:05:36Z,2018-10-05T01:18:41Z,2018-10-24T21:06:56Z,MERGED,True,523,200,6,https://github.com/MicK7,Rind plane indexing,6,[],https://github.com/CGNS/CGNS/pull/71,https://github.com/brtnfld,6,https://github.com/CGNS/CGNS/pull/71#issuecomment-427233630,"This pull request improves rind plane indexing for coordinates reading and writing.
pcgnslib is still a work in progress. Refactoring can be improved.",I thought this was going into develop?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,71,2018-08-25T18:05:36Z,2018-10-05T01:18:41Z,2018-10-24T21:06:56Z,MERGED,True,523,200,6,https://github.com/MicK7,Rind plane indexing,6,[],https://github.com/CGNS/CGNS/pull/71,https://github.com/MicK7,7,https://github.com/CGNS/CGNS/pull/71#issuecomment-427250582,"This pull request improves rind plane indexing for coordinates reading and writing.
pcgnslib is still a work in progress. Refactoring can be improved.","Before going into develop, Fortran mapping of CPEX40 functions may need to be checked or created.
We also need to be confident about test coverage.
As soon as these points are fine, we can merge into develop.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,71,2018-08-25T18:05:36Z,2018-10-05T01:18:41Z,2018-10-24T21:06:56Z,MERGED,True,523,200,6,https://github.com/MicK7,Rind plane indexing,6,[],https://github.com/CGNS/CGNS/pull/71,https://github.com/brtnfld,8,https://github.com/CGNS/CGNS/pull/71#issuecomment-427368389,"This pull request improves rind plane indexing for coordinates reading and writing.
pcgnslib is still a work in progress. Refactoring can be improved.",Are you ok with it going into the next release as we are scheduled to release 3.3.2 very soon?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,71,2018-08-25T18:05:36Z,2018-10-05T01:18:41Z,2018-10-24T21:06:56Z,MERGED,True,523,200,6,https://github.com/MicK7,Rind plane indexing,6,[],https://github.com/CGNS/CGNS/pull/71,https://github.com/rhbush,9,https://github.com/CGNS/CGNS/pull/71#issuecomment-427414717,"This pull request improves rind plane indexing for coordinates reading and writing.
pcgnslib is still a work in progress. Refactoring can be improved.","OK by me…

Bob

From: Scot Breitenfeld [mailto:notifications@github.com]
Sent: Friday, October 05, 2018 9:36 AM
To: CGNS/CGNS
Cc: Subscribed
Subject: [External] Re: [CGNS/CGNS] Rind plane indexing (#71)


Are you ok with it going into the next release as we are scheduled to release it very soon?

—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_CGNS_CGNS_pull_71-23issuecomment-2D427368389&d=DwMCaQ&c=ilBQI1lupc9Y65XwNblLtw&r=R6uYRCZ6yczCmY62VDwgVQvvd5T_AueeqZjrnTtC1iE&m=IQUvfWhLtEhSn5SQnnGMOmrEdcDQHv-6XQBsAoLidsg&s=rUJvYZy_3z8vVLKqwV7EWqEmSNPlCv-hDwtXhxUWPVI&e=>, or mute the thread<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_AKzuLuBf-2DaI6UgkphDNF139JTztF-2DEJoks5uh2BZgaJpZM4WMev2&d=DwMCaQ&c=ilBQI1lupc9Y65XwNblLtw&r=R6uYRCZ6yczCmY62VDwgVQvvd5T_AueeqZjrnTtC1iE&m=IQUvfWhLtEhSn5SQnnGMOmrEdcDQHv-6XQBsAoLidsg&s=TJ_tshjiwKbmh9dWxK1bkbt-Fw8LWU3Dgv8-ajXpaf0&e=>.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,71,2018-08-25T18:05:36Z,2018-10-05T01:18:41Z,2018-10-24T21:06:56Z,MERGED,True,523,200,6,https://github.com/MicK7,Rind plane indexing,6,[],https://github.com/CGNS/CGNS/pull/71,https://github.com/smguzik,10,https://github.com/CGNS/CGNS/pull/71#issuecomment-427433576,"This pull request improves rind plane indexing for coordinates reading and writing.
pcgnslib is still a work in progress. Refactoring can be improved.","Can I have the weekend to look it over?

Stephen Guzik, Ph.D.
Assistant Professor, Department of Mechanical Engineering
Colorado State University

On 10/05/2018 06:36 AM, Scot Breitenfeld wrote:

Are you ok with it going into the next release as we are scheduled to release it very soon?

—
You are receiving this because you commented.
Reply to this email directly, view it on GitHub<#71 (comment)>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ALsgQXdgXas2ppWFM1tWd2zYorFmhofnks5uh2BZgaJpZM4WMev2>.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,71,2018-08-25T18:05:36Z,2018-10-05T01:18:41Z,2018-10-24T21:06:56Z,MERGED,True,523,200,6,https://github.com/MicK7,Rind plane indexing,6,[],https://github.com/CGNS/CGNS/pull/71,https://github.com/brtnfld,11,https://github.com/CGNS/CGNS/pull/71#issuecomment-427435177,"This pull request improves rind plane indexing for coordinates reading and writing.
pcgnslib is still a work in progress. Refactoring can be improved.","Yes, I have a few other issues I'm trying to finish before the 3.3.2 release.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,71,2018-08-25T18:05:36Z,2018-10-05T01:18:41Z,2018-10-24T21:06:56Z,MERGED,True,523,200,6,https://github.com/MicK7,Rind plane indexing,6,[],https://github.com/CGNS/CGNS/pull/71,https://github.com/MicK7,12,https://github.com/CGNS/CGNS/pull/71#issuecomment-427547038,"This pull request improves rind plane indexing for coordinates reading and writing.
pcgnslib is still a work in progress. Refactoring can be improved.","Are you ok with it going into the next release as we are scheduled to release 3.3.2 very soon?

Would it be possible to name the next release 3.4.0 ? Indeed there are major changes and moreover the new cgns ngon layout rely on Version 3400 to do conversion on the fly (in cgns_internal.c),",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,71,2018-08-25T18:05:36Z,2018-10-05T01:18:41Z,2018-10-24T21:06:56Z,MERGED,True,523,200,6,https://github.com/MicK7,Rind plane indexing,6,[],https://github.com/CGNS/CGNS/pull/71,https://github.com/brtnfld,13,https://github.com/CGNS/CGNS/pull/71#issuecomment-427572946,"This pull request improves rind plane indexing for coordinates reading and writing.
pcgnslib is still a work in progress. Refactoring can be improved.","Sure, it will be 3.4.0.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,71,2018-08-25T18:05:36Z,2018-10-05T01:18:41Z,2018-10-24T21:06:56Z,MERGED,True,523,200,6,https://github.com/MicK7,Rind plane indexing,6,[],https://github.com/CGNS/CGNS/pull/71,https://github.com/brtnfld,14,https://github.com/CGNS/CGNS/pull/71#issuecomment-432828413,"This pull request improves rind plane indexing for coordinates reading and writing.
pcgnslib is still a work in progress. Refactoring can be improved.","Stephen,
Have you had a chance to look it over, can I go ahead and merge the PR?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,72,2018-08-31T20:19:40Z,2018-09-07T17:59:26Z,2019-09-02T09:02:50Z,MERGED,True,19,24,1,https://github.com/MicK7,patch cgnscheck,1,[],https://github.com/CGNS/CGNS/pull/72,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/72,It seems I missed to commit the change for cgnscheck due to new memory layout with NGON_n and NFACE_n. This will fix it.,It seems I missed to commit the change for cgnscheck due to new memory layout with NGON_n and NFACE_n. This will fix it.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,73,2018-09-14T21:44:06Z,2018-09-14T21:58:34Z,2018-10-03T13:48:42Z,MERGED,True,1,1,1,https://github.com/zbeekman,Test AppVeyor matrix correctly,1,[],https://github.com/CGNS/CGNS/pull/73,https://github.com/zbeekman,1,https://github.com/CGNS/CGNS/pull/73,"Reported at https://cgnsorg.atlassian.net/projects/CGNS/issues/CGNS-145
See also: 59d8814#r30513524
TL;DR: AppVeyor build matrix was not being exercised, wrong variable was being dereferenced","Reported at https://cgnsorg.atlassian.net/projects/CGNS/issues/CGNS-145
See also: 59d8814#r30513524
TL;DR: AppVeyor build matrix was not being exercised, wrong variable was being dereferenced",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,73,2018-09-14T21:44:06Z,2018-09-14T21:58:34Z,2018-10-03T13:48:42Z,MERGED,True,1,1,1,https://github.com/zbeekman,Test AppVeyor matrix correctly,1,[],https://github.com/CGNS/CGNS/pull/73,https://github.com/zbeekman,2,https://github.com/CGNS/CGNS/pull/73#issuecomment-426121410,"Reported at https://cgnsorg.atlassian.net/projects/CGNS/issues/CGNS-145
See also: 59d8814#r30513524
TL;DR: AppVeyor build matrix was not being exercised, wrong variable was being dereferenced","@brtnfld This CGNS issue is a giant show-stopper for us: https://cgnsorg.atlassian.net/browse/CGNS-146
I have followed your AppVeyor configuration for downloading and installing HDF5, and building CGNS. We configure for static builds (we want easily redistributable binaries, even if they're bigger). As long as we do NOT enable Fortran, building with MSVS 14 2015 (64 bit build) and with the default MSC completes without issue. As soon as we enable Fortran, using the latest Intel 18.x Fortran compiler, the libcgns.lib target is never actually created (or created then immediately deleted) and the build proceeds with a plethora of linker errors complaining that this library is missing.
So it seems that on Windows with MSVS, enabling Fortran has the side effect of breaking the build. Any insight, advice, or workarounds would be most welcome here.
I have tried to join the CGNStalk mailing list multiple times, but my application has never been approved. Running on windows is a requirement for a nuclear engineering project that I am working on, and CGNS is part of our software stack. We have no issues on *nix. If you could take a look, or point me to someone more appropriate, I would be EXTREMELY grateful for your help.
Many thanks,
Zaak",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,73,2018-09-14T21:44:06Z,2018-09-14T21:58:34Z,2018-10-03T13:48:42Z,MERGED,True,1,1,1,https://github.com/zbeekman,Test AppVeyor matrix correctly,1,[],https://github.com/CGNS/CGNS/pull/73,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/73#issuecomment-426303646,"Reported at https://cgnsorg.atlassian.net/projects/CGNS/issues/CGNS-145
See also: 59d8814#r30513524
TL;DR: AppVeyor build matrix was not being exercised, wrong variable was being dereferenced",Can you try it with an older version of cmake (3.8).,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,73,2018-09-14T21:44:06Z,2018-09-14T21:58:34Z,2018-10-03T13:48:42Z,MERGED,True,1,1,1,https://github.com/zbeekman,Test AppVeyor matrix correctly,1,[],https://github.com/CGNS/CGNS/pull/73,https://github.com/zbeekman,4,https://github.com/CGNS/CGNS/pull/73#issuecomment-426305622,"Reported at https://cgnsorg.atlassian.net/projects/CGNS/issues/CGNS-145
See also: 59d8814#r30513524
TL;DR: AppVeyor build matrix was not being exercised, wrong variable was being dereferenced","I'll try that right now and report back shortly.
…
On Tue, Oct 2, 2018 at 10:51 AM Scot Breitenfeld ***@***.***> wrote:
 Can you try it with an older version of cmake (3.8).

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#73 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AAREPBl_fPGgR0IhTjAQrqaSnIL7pPasks5ug31ngaJpZM4Wp_hx>
 .",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,73,2018-09-14T21:44:06Z,2018-09-14T21:58:34Z,2018-10-03T13:48:42Z,MERGED,True,1,1,1,https://github.com/zbeekman,Test AppVeyor matrix correctly,1,[],https://github.com/CGNS/CGNS/pull/73,https://github.com/brtnfld,5,https://github.com/CGNS/CGNS/pull/73#issuecomment-426334654,"Reported at https://cgnsorg.atlassian.net/projects/CGNS/issues/CGNS-145
See also: 59d8814#r30513524
TL;DR: AppVeyor build matrix was not being exercised, wrong variable was being dereferenced","An example of my bat file (this is for Intel C and Fortran)
@echo OFF
SET CC=icl
SET FC=ifort
SET CXX=icl
:: Run the cmake command
""C:\Program Files\CMake 3.8.1\bin\cmake"" -G ""NMake Makefiles"" ^
REM :: cmake -G ""NMake Makefiles""^
-D CMAKE_C_COMPILER=icl -D CMAKE_CXX_COMPILER=icl -D CMAKE_FORTRAN_COMPILER=ifort ^
-D CMAKE_C_FLAGS:STRING="" -DUPPERCASE /MD /Qstd=c99"" ^
-D CMAKE_Fortran_FLAGS:STRING=""-DUPPERCASE /MD -fpp"" ^
-D CMAKE_PREFIX_PATH:PATH=""C:\Program Files\HDF_Group\HDF5\1.11.2\cmake"" ^
-D CMAKE_BUILD_TYPE=Release ^
-D CGNS_ENABLE_FORTRAN:BOOL=ON ^
-D CGNS_BUILD_SHARED:BOOL=OFF ^
-D CGNS_ENABLE_LFS:BOOL=""ON"" ^
-D CMAKE_STATIC_LINKER_FLAGS:STRING=""/NODEFAULTLIB:library"" ^
-D CMAKE_EXE_LINKER_FLAGS:STRING=""/NODEFAULTLIB:library"" ^
-D CGNS_USE_SHARED:BOOL=OFF ^
-D CGNS_ENABLE_LEGACY=ON ^
-D CGNS_ENABLE_64BIT=BOOL=ON ^
-D CGNS_BUILD_CGNSTOOLS:BOOL=OFF ^
-D CGNS_ENABLE_TESTS:BOOL=ON ^
-D CMAKE_VERBOSE_MAKEFILE:BOOL=ON ^
-D CGNS_ENABLE_HDF5:BOOL=ON ^
-D CGNS_ENABLE_PARALLEL:BOOL=ON ^
-D HDF5_BUILD_SHARED_LIBS:BOOL=OFF ^
-D HDF5_NEED_MPI:BOOL=ON ^
-D HDF5_INCLUDE_PATH:STRING=""C:\Program Files\HDF_Group\HDF5\1.11.2\include"" ^
-D HDF5_LIBRARY:STRING=""C:\Program Files\HDF_Group\HDF5\1.11.2\lib\libhdf5.lib"" ^
-D HDF5_NEED_ZLIB:BOOL=OFF ^
-D HDF5_NEED_SZIP:BOOL=OFF ^
../CGNS
cmake --build .",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,73,2018-09-14T21:44:06Z,2018-09-14T21:58:34Z,2018-10-03T13:48:42Z,MERGED,True,1,1,1,https://github.com/zbeekman,Test AppVeyor matrix correctly,1,[],https://github.com/CGNS/CGNS/pull/73,https://github.com/brtnfld,6,https://github.com/CGNS/CGNS/pull/73#issuecomment-426334869,"Reported at https://cgnsorg.atlassian.net/projects/CGNS/issues/CGNS-145
See also: 59d8814#r30513524
TL;DR: AppVeyor build matrix was not being exercised, wrong variable was being dereferenced",I have to fix an issue with cgio_get_dimensions_f_* . If you comment out the cgiof_f03.F in the test Cmake it should compile. I have not tried with MS C instead of Intel C.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,73,2018-09-14T21:44:06Z,2018-09-14T21:58:34Z,2018-10-03T13:48:42Z,MERGED,True,1,1,1,https://github.com/zbeekman,Test AppVeyor matrix correctly,1,[],https://github.com/CGNS/CGNS/pull/73,https://github.com/brtnfld,7,https://github.com/CGNS/CGNS/pull/73#issuecomment-426644180,"Reported at https://cgnsorg.atlassian.net/projects/CGNS/issues/CGNS-145
See also: 59d8814#r30513524
TL;DR: AppVeyor build matrix was not being exercised, wrong variable was being dereferenced",Fixed the issue with cgio_get_dimensions_f_*.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,74,2018-09-29T19:08:58Z,2018-10-01T13:56:25Z,2018-10-01T13:56:25Z,MERGED,True,56,25,3,https://github.com/brtnfld,CGNS-147,1,[],https://github.com/CGNS/CGNS/pull/74,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/74,"src/configure issues with tcl, tk, and mpi
Fixed tcl and tk search path to first look in dir. with no 'unix'.
Tested: OpenSuse (gcc, gfortran, mpich).","src/configure issues with tcl, tk, and mpi
Fixed tcl and tk search path to first look in dir. with no 'unix'.
Tested: OpenSuse (gcc, gfortran, mpich).",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,75,2018-10-03T04:16:21Z,2018-10-03T04:24:25Z,2018-10-03T04:24:25Z,MERGED,True,152,110,7,https://github.com/brtnfld, CGNS-148,2,[],https://github.com/CGNS/CGNS/pull/75,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/75,Changed the cgio_s/get_dimension_f_* to call the C API directly.,Changed the cgio_s/get_dimension_f_* to call the C API directly.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,76,2018-10-08T10:04:02Z,2018-10-25T11:35:04Z,2018-10-25T11:35:10Z,CLOSED,False,1,1,1,https://github.com/MicK7,remove variable length array to be able to build pcgnslib.c with VC,3,[],https://github.com/CGNS/CGNS/pull/76,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/76,Build parallel CGNS on Windows  #69,Build parallel CGNS on Windows  #69,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,77,2018-10-24T19:02:37Z,2018-11-02T16:47:07Z,2018-11-02T16:49:11Z,CLOSED,False,2706,296,20,https://github.com/MicK7,Rind plane indexing junk,20,[],https://github.com/CGNS/CGNS/pull/77,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/77,Add tests for C and fortran to improve code coverage.,Add tests for C and fortran to improve code coverage.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,77,2018-10-24T19:02:37Z,2018-11-02T16:47:07Z,2018-11-02T16:49:11Z,CLOSED,False,2706,296,20,https://github.com/MicK7,Rind plane indexing junk,20,[],https://github.com/CGNS/CGNS/pull/77,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/77#issuecomment-432796375,Add tests for C and fortran to improve code coverage.,This merge request hopes to bring a stabilized work about Rind Plane Indexing to the develop branch.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,78,2018-11-01T13:51:04Z,2018-11-05T18:06:29Z,2019-09-02T09:02:48Z,MERGED,True,1,2,2,https://github.com/MicK7,remove some gcc warnings,1,[],https://github.com/CGNS/CGNS/pull/78,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/78,"remove a printf used for debug
specify max string length to prevent buffer overflow in sprintf","remove a printf used for debug
specify max string length to prevent buffer overflow in sprintf",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,78,2018-11-01T13:51:04Z,2018-11-05T18:06:29Z,2019-09-02T09:02:48Z,MERGED,True,1,2,2,https://github.com/MicK7,remove some gcc warnings,1,[],https://github.com/CGNS/CGNS/pull/78,https://github.com/smguzik,2,https://github.com/CGNS/CGNS/pull/78#issuecomment-435974154,"remove a printf used for debug
specify max string length to prevent buffer overflow in sprintf","It better describes intent.  %30 looks like a formatting decision whereas snprintf looks like a memory control (which it is).  Either way, can you merge that pull request?  None of us have permission.  This is indeed an overflow that should be corrected.

On 11/05/2018 08:00 AM, Scot Breitenfeld wrote:

@brtnfld commented on this pull request.
________________________________

In src/cgns_internals.c<#78 (comment)>:
 @@ -7039,7 +7039,7 @@ int cgi_write_model(double parent_id, cgns_model *model)
}

      /* xModel_t */
-    sprintf(label,""%s_t"",model->name);
+    sprintf(label,""%.30s_t"",model->name);


I don't have a preference for snprintf over sprintf, so it's up to you. CGNS only uses snprintf once and it is in the tests.

—
You are receiving this because you commented.
Reply to this email directly, view it on GitHub<#78 (comment)>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ALsgQTDY79uOhE0S3TGtlp4HuHfBQBIJks5usGCEgaJpZM4YGcUl>.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,79,2018-11-02T16:46:38Z,2018-11-03T05:24:16Z,2018-11-03T05:24:16Z,MERGED,True,923,1,7,https://github.com/MicK7,Rind plane indexing,3,[],https://github.com/CGNS/CGNS/pull/79,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/79,Add cg_array_general_read/write,Add cg_array_general_read/write,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,79,2018-11-02T16:46:38Z,2018-11-03T05:24:16Z,2018-11-03T05:24:16Z,MERGED,True,923,1,7,https://github.com/MicK7,Rind plane indexing,3,[],https://github.com/CGNS/CGNS/pull/79,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/79#issuecomment-435444704,Add cg_array_general_read/write,@smguzik is this implementation of cg_array_general_xxx what you had in mind ?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,80,2018-11-03T09:47:34Z,2018-11-03T19:32:24Z,2018-11-05T13:05:14Z,MERGED,True,19,21,5,https://github.com/MicK7,Fix broken test with Rind Plane Indexing,2,[],https://github.com/CGNS/CGNS/pull/80,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/80,"Following the removal of grid number as a  parameter for cg_coord_general_xxx, tests were failing.
As a side note, deforming meshes using multiple GridCoordinates nodes won't be readable or writable with rind planes with the new API since cg_array_general_read/write is not aware of Rind Indexing thus always falling back to a CG_CONFIG_RIND_ZERO state (as it was done before).","Following the removal of grid number as a  parameter for cg_coord_general_xxx, tests were failing.
As a side note, deforming meshes using multiple GridCoordinates nodes won't be readable or writable with rind planes with the new API since cg_array_general_read/write is not aware of Rind Indexing thus always falling back to a CG_CONFIG_RIND_ZERO state (as it was done before).",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,80,2018-11-03T09:47:34Z,2018-11-03T19:32:24Z,2018-11-05T13:05:14Z,MERGED,True,19,21,5,https://github.com/MicK7,Fix broken test with Rind Plane Indexing,2,[],https://github.com/CGNS/CGNS/pull/80,https://github.com/smguzik,2,https://github.com/CGNS/CGNS/pull/80#issuecomment-435613226,"Following the removal of grid number as a  parameter for cg_coord_general_xxx, tests were failing.
As a side note, deforming meshes using multiple GridCoordinates nodes won't be readable or writable with rind planes with the new API since cg_array_general_read/write is not aware of Rind Indexing thus always falling back to a CG_CONFIG_RIND_ZERO state (as it was done before).","The reason that I removed that was because it was not consistent with other cg_coord_write.  The interfaces: cg_coord_write, cg_coord_partial_write, cg_coord_general_write provide increasing granularity in how you can access data: 1-to-1, hyperslab-in-file, hyperslab in memory and file.
I don't know what to do about deforming meshes but I'd prefer a more consistent fix across all three levels.  For now, I don't think we are breaking anything as long as the 1-to-1 writes can be performed with rind planes and deforming meshes.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,80,2018-11-03T09:47:34Z,2018-11-03T19:32:24Z,2018-11-05T13:05:14Z,MERGED,True,19,21,5,https://github.com/MicK7,Fix broken test with Rind Plane Indexing,2,[],https://github.com/CGNS/CGNS/pull/80,https://github.com/smguzik,3,https://github.com/CGNS/CGNS/pull/80#issuecomment-435614577,"Following the removal of grid number as a  parameter for cg_coord_general_xxx, tests were failing.
As a side note, deforming meshes using multiple GridCoordinates nodes won't be readable or writable with rind planes with the new API since cg_array_general_read/write is not aware of Rind Indexing thus always falling back to a CG_CONFIG_RIND_ZERO state (as it was done before).",I'm also reverting the change in cgns_internals.c since it's not related to Rind_Plane_Indexing and I am unsure of the impact.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,80,2018-11-03T09:47:34Z,2018-11-03T19:32:24Z,2018-11-05T13:05:14Z,MERGED,True,19,21,5,https://github.com/MicK7,Fix broken test with Rind Plane Indexing,2,[],https://github.com/CGNS/CGNS/pull/80,https://github.com/smguzik,4,https://github.com/CGNS/CGNS/pull/80#issuecomment-435615160,"Following the removal of grid number as a  parameter for cg_coord_general_xxx, tests were failing.
As a side note, deforming meshes using multiple GridCoordinates nodes won't be readable or writable with rind planes with the new API since cg_array_general_read/write is not aware of Rind Indexing thus always falling back to a CG_CONFIG_RIND_ZERO state (as it was done before).","Ah, now I see.  snprintf is probably a better fix and should go into develop.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,81,2018-11-07T20:23:45Z,2018-11-08T01:23:54Z,2018-11-08T01:23:54Z,MERGED,True,3,6,3,https://github.com/MicK7,Clean final serial code,1,[],https://github.com/CGNS/CGNS/pull/81,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/81,serial code is working for me. I just removed some unused variables,serial code is working for me. I just removed some unused variables,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,82,2018-11-12T12:32:56Z,2018-11-12T17:33:59Z,2019-09-02T09:02:46Z,CLOSED,False,1,1,1,https://github.com/MicK7,Remove double condition test,1,[],https://github.com/CGNS/CGNS/pull/82,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/82,allow_dup condition is already checked on the previous line,allow_dup condition is already checked on the previous line,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,82,2018-11-12T12:32:56Z,2018-11-12T17:33:59Z,2019-09-02T09:02:46Z,CLOSED,False,1,1,1,https://github.com/MicK7,Remove double condition test,1,[],https://github.com/CGNS/CGNS/pull/82,https://github.com/smguzik,2,https://github.com/CGNS/CGNS/pull/82#issuecomment-437966297,allow_dup condition is already checked on the previous line,Those are separate if statements so the condition needs to be checked on both lines.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,83,2018-11-15T12:11:24Z,2018-11-27T23:04:09Z,2018-11-27T23:04:09Z,MERGED,True,1,1,1,https://github.com/NovA80,Fix BC type string constant `FamilySpecified_s`,1,[],https://github.com/CGNS/CGNS/pull/83,https://github.com/NovA80,1,https://github.com/CGNS/CGNS/pull/83,,,True,{'THUMBS_UP': ['https://github.com/MicK7']}
CGNS/CGNS,https://github.com/CGNS/CGNS,84,2018-11-15T18:56:43Z,2018-11-27T23:02:59Z,2018-11-27T23:02:59Z,MERGED,True,4,4,1,https://github.com/gsjaardema,Add missing argument to cgi_error call,2,[],https://github.com/CGNS/CGNS/pull/84,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/84,The data_type argument added to cgi_error call about unsupported datatype.,The data_type argument added to cgi_error call about unsupported datatype.,True,{'THUMBS_UP': ['https://github.com/MicK7']}
CGNS/CGNS,https://github.com/CGNS/CGNS,85,2018-11-15T19:58:32Z,2018-11-21T23:38:47Z,2018-11-21T23:38:47Z,CLOSED,False,61,57,3,https://github.com/MicK7,fix tests failing when compiled for 64bit,1,[],https://github.com/CGNS/CGNS/pull/85,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/85,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,85,2018-11-15T19:58:32Z,2018-11-21T23:38:47Z,2018-11-21T23:38:47Z,CLOSED,False,61,57,3,https://github.com/MicK7,fix tests failing when compiled for 64bit,1,[],https://github.com/CGNS/CGNS/pull/85,https://github.com/smguzik,2,https://github.com/CGNS/CGNS/pull/85#issuecomment-440850913,,Thanks for the suggestions.  Fixes have been added in commit 093a614 with a slightly different strategy for Fortran (32-bit arguments in contained functions and returning 64-bit).,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,86,2018-12-03T23:48:35Z,2019-01-14T09:44:58Z,2019-01-14T09:45:48Z,MERGED,True,628,9,6,https://github.com/MicK7,Fix parallel write,2,[],https://github.com/CGNS/CGNS/pull/86,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/86,In parallel writing mode NULL pointer can be used to write node without data,In parallel writing mode NULL pointer can be used to write node without data,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,86,2018-12-03T23:48:35Z,2019-01-14T09:44:58Z,2019-01-14T09:45:48Z,MERGED,True,628,9,6,https://github.com/MicK7,Fix parallel write,2,[],https://github.com/CGNS/CGNS/pull/86,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/86#issuecomment-447427707,In parallel writing mode NULL pointer can be used to write node without data,"Is this PR separate from what Stephen is working on, or is that work going to be a different PR?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,86,2018-12-03T23:48:35Z,2019-01-14T09:44:58Z,2019-01-14T09:45:48Z,MERGED,True,628,9,6,https://github.com/MicK7,Fix parallel write,2,[],https://github.com/CGNS/CGNS/pull/86,https://github.com/smguzik,3,https://github.com/CGNS/CGNS/pull/86#issuecomment-453947541,In parallel writing mode NULL pointer can be used to write node without data,Merged,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,87,2018-12-04T16:03:28Z,2018-12-18T17:39:07Z,2018-12-18T17:39:07Z,MERGED,True,14,2,1,https://github.com/zbeekman,CGNS-146 (#87),4,[],https://github.com/CGNS/CGNS/pull/87,https://github.com/zbeekman,1,https://github.com/CGNS/CGNS/pull/87,"CGNS-146 :: Can't compile using MSVC & IVF on windows (MSVS 14)

Explicitly set the CMake LINKER_LANGUAGE property on cngs_static to C.
This is a work around for a potential CMake bug, and was suggested by
@bradking. Here is the issue and merge that introduced the bug:

https://gitlab.kitware.com/cmake/cmake/issues/16738
https://gitlab.kitware.com/cmake/cmake/merge_requests/643","CGNS-146 :: Can't compile using MSVC & IVF on windows (MSVS 14)

Explicitly set the CMake LINKER_LANGUAGE property on cngs_static to C.
This is a work around for a potential CMake bug, and was suggested by
@bradking. Here is the issue and merge that introduced the bug:

https://gitlab.kitware.com/cmake/cmake/issues/16738
https://gitlab.kitware.com/cmake/cmake/merge_requests/643",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,87,2018-12-04T16:03:28Z,2018-12-18T17:39:07Z,2018-12-18T17:39:07Z,MERGED,True,14,2,1,https://github.com/zbeekman,CGNS-146 (#87),4,[],https://github.com/CGNS/CGNS/pull/87,https://github.com/zbeekman,2,https://github.com/CGNS/CGNS/pull/87#issuecomment-444154605,"CGNS-146 :: Can't compile using MSVC & IVF on windows (MSVS 14)

Explicitly set the CMake LINKER_LANGUAGE property on cngs_static to C.
This is a work around for a potential CMake bug, and was suggested by
@bradking. Here is the issue and merge that introduced the bug:

https://gitlab.kitware.com/cmake/cmake/issues/16738
https://gitlab.kitware.com/cmake/cmake/merge_requests/643","@brtnfld I think this should completely fix CGNS-146 :: Can't compile using MSVC & IVF on windows (MSVS 14)
There appears to be a CMake bug/regression that was introduced after 3.8. I'm working on testing locally now, I'll report back once I have confirmed a successful build under MSVS on Windows with Fortran enabled.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,87,2018-12-04T16:03:28Z,2018-12-18T17:39:07Z,2018-12-18T17:39:07Z,MERGED,True,14,2,1,https://github.com/zbeekman,CGNS-146 (#87),4,[],https://github.com/CGNS/CGNS/pull/87,https://github.com/zbeekman,3,https://github.com/CGNS/CGNS/pull/87#issuecomment-444157545,"CGNS-146 :: Can't compile using MSVC & IVF on windows (MSVS 14)

Explicitly set the CMake LINKER_LANGUAGE property on cngs_static to C.
This is a work around for a potential CMake bug, and was suggested by
@bradking. Here is the issue and merge that introduced the bug:

https://gitlab.kitware.com/cmake/cmake/issues/16738
https://gitlab.kitware.com/cmake/cmake/merge_requests/643","FYI, I had the wrong issue number & title so I amended the commit and force pushed it. I hope that doesn't cause problems for CI.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,87,2018-12-04T16:03:28Z,2018-12-18T17:39:07Z,2018-12-18T17:39:07Z,MERGED,True,14,2,1,https://github.com/zbeekman,CGNS-146 (#87),4,[],https://github.com/CGNS/CGNS/pull/87,https://github.com/zbeekman,4,https://github.com/CGNS/CGNS/pull/87#issuecomment-444518557,"CGNS-146 :: Can't compile using MSVC & IVF on windows (MSVS 14)

Explicitly set the CMake LINKER_LANGUAGE property on cngs_static to C.
This is a work around for a potential CMake bug, and was suggested by
@bradking. Here is the issue and merge that introduced the bug:

https://gitlab.kitware.com/cmake/cmake/issues/16738
https://gitlab.kitware.com/cmake/cmake/merge_requests/643","I can confirm that the build now succeeds on Windows under MSVS with Fortran enabled.
A corresponding issue has been opened on the CMake bug tracker: https://gitlab.kitware.com/cmake/cmake/issues/18687
A minor problem remains: The installation of the cgns .mod file fails due to the way MSVS behaves. The CMake installation is not looking under the $<CONFIG> subdirectory for the module file, and thus the installation of the .mod file is failing. I'll try to add a fix for that here as well.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,87,2018-12-04T16:03:28Z,2018-12-18T17:39:07Z,2018-12-18T17:39:07Z,MERGED,True,14,2,1,https://github.com/zbeekman,CGNS-146 (#87),4,[],https://github.com/CGNS/CGNS/pull/87,https://github.com/brtnfld,5,https://github.com/CGNS/CGNS/pull/87#issuecomment-446638342,"CGNS-146 :: Can't compile using MSVC & IVF on windows (MSVS 14)

Explicitly set the CMake LINKER_LANGUAGE property on cngs_static to C.
This is a work around for a potential CMake bug, and was suggested by
@bradking. Here is the issue and merge that introduced the bug:

https://gitlab.kitware.com/cmake/cmake/issues/16738
https://gitlab.kitware.com/cmake/cmake/merge_requests/643",Should I wait to merge this until the .mod file issue is resolved?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,87,2018-12-04T16:03:28Z,2018-12-18T17:39:07Z,2018-12-18T17:39:07Z,MERGED,True,14,2,1,https://github.com/zbeekman,CGNS-146 (#87),4,[],https://github.com/CGNS/CGNS/pull/87,https://github.com/brtnfld,6,https://github.com/CGNS/CGNS/pull/87#issuecomment-447366554,"CGNS-146 :: Can't compile using MSVC & IVF on windows (MSVS 14)

Explicitly set the CMake LINKER_LANGUAGE property on cngs_static to C.
This is a work around for a potential CMake bug, and was suggested by
@bradking. Here is the issue and merge that introduced the bug:

https://gitlab.kitware.com/cmake/cmake/issues/16738
https://gitlab.kitware.com/cmake/cmake/merge_requests/643",Shouldn't you add conditionals for Windows around these new statements? It works correctly on LInux and OSX.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,87,2018-12-04T16:03:28Z,2018-12-18T17:39:07Z,2018-12-18T17:39:07Z,MERGED,True,14,2,1,https://github.com/zbeekman,CGNS-146 (#87),4,[],https://github.com/CGNS/CGNS/pull/87,https://github.com/zbeekman,7,https://github.com/CGNS/CGNS/pull/87#issuecomment-447367830,"CGNS-146 :: Can't compile using MSVC & IVF on windows (MSVS 14)

Explicitly set the CMake LINKER_LANGUAGE property on cngs_static to C.
This is a work around for a potential CMake bug, and was suggested by
@bradking. Here is the issue and merge that introduced the bug:

https://gitlab.kitware.com/cmake/cmake/issues/16738
https://gitlab.kitware.com/cmake/cmake/merge_requests/643","I’m testing the mod file fix on Windows right now. The new property on the
object library can and should be applied unconditionally, no reason to make
it a special case for windows unless it’s somehow breaking macOS/Linux. The
property on the object library is a CMake bug work around. The value is
correct regardless of OS.

The install mod file fix should also be generator/OS agnostic but I am
still testing that.
…
On Fri, Dec 14, 2018 at 10:54 AM Scot Breitenfeld ***@***.***> wrote:
 Shouldn't you add conditionals for Windows around these new statements? It
 works correctly on LInux and OSX.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#87 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AAREPMhVhGoSzgvj9bdSvHtjp3ymAk2Yks5u48m1gaJpZM4ZA-Lk>
 .",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,87,2018-12-04T16:03:28Z,2018-12-18T17:39:07Z,2018-12-18T17:39:07Z,MERGED,True,14,2,1,https://github.com/zbeekman,CGNS-146 (#87),4,[],https://github.com/CGNS/CGNS/pull/87,https://github.com/zbeekman,8,https://github.com/CGNS/CGNS/pull/87#issuecomment-447407753,"CGNS-146 :: Can't compile using MSVC & IVF on windows (MSVS 14)

Explicitly set the CMake LINKER_LANGUAGE property on cngs_static to C.
This is a work around for a potential CMake bug, and was suggested by
@bradking. Here is the issue and merge that introduced the bug:

https://gitlab.kitware.com/cmake/cmake/issues/16738
https://gitlab.kitware.com/cmake/cmake/merge_requests/643","@brtnfld FYI, I noticed that the introspection for HAVE_FORTRAN_2008 is probably broken on most/all systems. It's possible that older CMakes passed -c during try_compile() but for me with GFortran and ifort, the compiler tries to link the code, and since the test code only defines a module, the linking done by the compiler fails with error messages about missing formain etc. Just adding a mostly empty program main ... to the bottom of the test code should resolve this.
I have an additional commit that I could push, if you like, that would take care of this.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,87,2018-12-04T16:03:28Z,2018-12-18T17:39:07Z,2018-12-18T17:39:07Z,MERGED,True,14,2,1,https://github.com/zbeekman,CGNS-146 (#87),4,[],https://github.com/CGNS/CGNS/pull/87,https://github.com/brtnfld,9,https://github.com/CGNS/CGNS/pull/87#issuecomment-447425720,"CGNS-146 :: Can't compile using MSVC & IVF on windows (MSVS 14)

Explicitly set the CMake LINKER_LANGUAGE property on cngs_static to C.
This is a work around for a potential CMake bug, and was suggested by
@bradking. Here is the issue and merge that introduced the bug:

https://gitlab.kitware.com/cmake/cmake/issues/16738
https://gitlab.kitware.com/cmake/cmake/merge_requests/643","I think we have had issues with newer cmake, mainly on windows. Though I can't find a bug report for it. I would just add a main program.",True,{'THUMBS_UP': ['https://github.com/zbeekman']}
CGNS/CGNS,https://github.com/CGNS/CGNS,87,2018-12-04T16:03:28Z,2018-12-18T17:39:07Z,2018-12-18T17:39:07Z,MERGED,True,14,2,1,https://github.com/zbeekman,CGNS-146 (#87),4,[],https://github.com/CGNS/CGNS/pull/87,https://github.com/brtnfld,10,https://github.com/CGNS/CGNS/pull/87#issuecomment-447432030,"CGNS-146 :: Can't compile using MSVC & IVF on windows (MSVS 14)

Explicitly set the CMake LINKER_LANGUAGE property on cngs_static to C.
This is a work around for a potential CMake bug, and was suggested by
@bradking. Here is the issue and merge that introduced the bug:

https://gitlab.kitware.com/cmake/cmake/issues/16738
https://gitlab.kitware.com/cmake/cmake/merge_requests/643","This also looks related to
https://cgnsorg.atlassian.net/browse/CGNS-143?filter=-5
Correct?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,87,2018-12-04T16:03:28Z,2018-12-18T17:39:07Z,2018-12-18T17:39:07Z,MERGED,True,14,2,1,https://github.com/zbeekman,CGNS-146 (#87),4,[],https://github.com/CGNS/CGNS/pull/87,https://github.com/zbeekman,11,https://github.com/CGNS/CGNS/pull/87#issuecomment-447440562,"CGNS-146 :: Can't compile using MSVC & IVF on windows (MSVS 14)

Explicitly set the CMake LINKER_LANGUAGE property on cngs_static to C.
This is a work around for a potential CMake bug, and was suggested by
@bradking. Here is the issue and merge that introduced the bug:

https://gitlab.kitware.com/cmake/cmake/issues/16738
https://gitlab.kitware.com/cmake/cmake/merge_requests/643","This also looks related to
cgnsorg.atlassian.net/browse/CGNS-143?filter=-5
Correct?

The logic behind the library naming scheme and choosing shared vs static libraries eludes me somewhat, and is very non-canonical CMake, IMO. Typically, projects either:
a) Rely on -DBUILD_SHARED_LIBS:BOOL=<ON|OFF> to target shared or static libraries, or
b) Explicitly pass STATIC or SHARED to all invocations of add_library()
Further confusing me is the fact that I think the comment in https://cgnsorg.atlassian.net/browse/CGNS-143?filter=-5 has an instance of SHARED and STATIC swapped:

However, I also had to fix the src/CMakeLists.txt, because it assumes the default library type is SHARED, and it is not when BUILD_SHARED_LIBS is ON.

Should read

However, I also had to fix the src/CMakeLists.txt, because it assumes the default library type is STATIC, and it is not when BUILD_SHARED_LIBS is ON.

if I am following the conversation correctly.
The commenter's proposed solution of setting -DBUILD_SHARED_LIBS:BOOL=ON seems out of line with the way the CGNS build system is currently structured.
TL;DR: This might be related, but it's certainly not directly related, AFAICT. Opening the log file attached to the issue shows mostly undefined references during linking. This makes me think that the additional comment may be a bit of a red herring. Maybe the API changed in HDF5 or maybe something caused the linking order to be different. At any rate, CGNS-143 is far beyond the scope of this pull request, in my opinion.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,87,2018-12-04T16:03:28Z,2018-12-18T17:39:07Z,2018-12-18T17:39:07Z,MERGED,True,14,2,1,https://github.com/zbeekman,CGNS-146 (#87),4,[],https://github.com/CGNS/CGNS/pull/87,https://github.com/zbeekman,12,https://github.com/CGNS/CGNS/pull/87#issuecomment-447462317,"CGNS-146 :: Can't compile using MSVC & IVF on windows (MSVS 14)

Explicitly set the CMake LINKER_LANGUAGE property on cngs_static to C.
This is a work around for a potential CMake bug, and was suggested by
@bradking. Here is the issue and merge that introduced the bug:

https://gitlab.kitware.com/cmake/cmake/issues/16738
https://gitlab.kitware.com/cmake/cmake/merge_requests/643","I think we have had issues with newer cmake, mainly on windows. Though I can't find a bug report for it. I would just add a main program.

Done, added a main program to the introspection code for Fortran 2008. We'll see what happens RE: two symbols defined as Cfunc...",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,88,2018-12-14T04:32:15Z,2018-12-18T03:02:23Z,2018-12-18T03:02:23Z,MERGED,True,4,0,1,https://github.com/gsjaardema,RPATH handling for MacOSX (Darwin),2,[],https://github.com/CGNS/CGNS/pull/88,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/88,"On Mac OSX, (Darwin), I think that this is needed for proper RPATH handling.  I have been manually setting this in my builds on Mac, but I think it should be handled automatically in the CGNS CMakeLists.txt...","On Mac OSX, (Darwin), I think that this is needed for proper RPATH handling.  I have been manually setting this in my builds on Mac, but I think it should be handled automatically in the CGNS CMakeLists.txt...",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,89,2019-01-12T07:27:53Z,2019-01-14T22:10:55Z,2019-01-19T12:17:59Z,MERGED,True,1,1,1,https://github.com/jiaozilong,Update cgnsutil.c,1,[],https://github.com/CGNS/CGNS/pull/89,https://github.com/jiaozilong,1,https://github.com/CGNS/CGNS/pull/89,a typo found,a typo found,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,90,2019-01-29T16:04:50Z,2019-02-03T02:28:43Z,2019-02-05T19:40:59Z,MERGED,True,6199,696,40,https://github.com/MicK7,Rind plane indexing,62,[],https://github.com/CGNS/CGNS/pull/90,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/90,Rind plane indexing implementation according to CPEX #40,Rind plane indexing implementation according to CPEX #40,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,90,2019-01-29T16:04:50Z,2019-02-03T02:28:43Z,2019-02-05T19:40:59Z,MERGED,True,6199,696,40,https://github.com/MicK7,Rind plane indexing,62,[],https://github.com/CGNS/CGNS/pull/90,https://github.com/gsjaardema,2,https://github.com/CGNS/CGNS/pull/90#issuecomment-460484159,Rind plane indexing implementation according to CPEX #40,"Just noticed that following this patch, CGNS now requires C99 mode for compilation since there are several instances of for (int n=0; n < ...; n++) added in this patch.  Not sure if that is a bad thing or not, but wanted to make sure it was an intentional change.
I think there may need to be a change to the CMake to select C99 mode...",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,90,2019-01-29T16:04:50Z,2019-02-03T02:28:43Z,2019-02-05T19:40:59Z,MERGED,True,6199,696,40,https://github.com/MicK7,Rind plane indexing,62,[],https://github.com/CGNS/CGNS/pull/90,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/90#issuecomment-460513911,Rind plane indexing implementation according to CPEX #40,"I think we can come back to C89 style since some people could want it.
We tend to usually write and read c99 or C11 code, so it may have been an unconcious change.
@smguzik what it your opinion on this issue ?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,90,2019-01-29T16:04:50Z,2019-02-03T02:28:43Z,2019-02-05T19:40:59Z,MERGED,True,6199,696,40,https://github.com/MicK7,Rind plane indexing,62,[],https://github.com/CGNS/CGNS/pull/90,https://github.com/smguzik,4,https://github.com/CGNS/CGNS/pull/90#issuecomment-460537419,Rind plane indexing implementation according to CPEX #40,"I think the C99 features can help create cleaner, more understandable code and with less errors.  I don't know what the reasons would be for keeping C89 compatibility.  I think we should conservatively advance the standard and C99 is 2 decades old.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,90,2019-01-29T16:04:50Z,2019-02-03T02:28:43Z,2019-02-05T19:40:59Z,MERGED,True,6199,696,40,https://github.com/MicK7,Rind plane indexing,62,[],https://github.com/CGNS/CGNS/pull/90,https://github.com/gsjaardema,5,https://github.com/CGNS/CGNS/pull/90#issuecomment-460723556,Rind plane indexing implementation according to CPEX #40,"Note that in the cases in this file, n is already defined, so the int n in the for loop is shadowing the outer n.  In this case, it is probably best to clean it up and remove the int n in the for loops.  I have another PR which does this #95",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,90,2019-01-29T16:04:50Z,2019-02-03T02:28:43Z,2019-02-05T19:40:59Z,MERGED,True,6199,696,40,https://github.com/MicK7,Rind plane indexing,62,[],https://github.com/CGNS/CGNS/pull/90,https://github.com/gsjaardema,6,https://github.com/CGNS/CGNS/pull/90#issuecomment-460724427,Rind plane indexing implementation according to CPEX #40,"I also agree that being able to use C99 or later would be nice and useful and more robust normally.  However, we then need to add some CMake code to select C99 compiler options and I think that requires that we require a newer version of CMake or the adding of additional CMake code.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,90,2019-01-29T16:04:50Z,2019-02-03T02:28:43Z,2019-02-05T19:40:59Z,MERGED,True,6199,696,40,https://github.com/MicK7,Rind plane indexing,62,[],https://github.com/CGNS/CGNS/pull/90,https://github.com/smguzik,7,https://github.com/CGNS/CGNS/pull/90#issuecomment-460775548,Rind plane indexing implementation according to CPEX #40,"I think we do need to add the compiler option.  A lot of the code I wrote in the rind_plane_indexing branch mixes declarations with code and uses single assignment.  Formally it is c99 but I think most c89 compilers support it as an extension.  We should either rewrite the code to strict c89 or force c99.
Rewriting the rind_plane_indexing branch to c89 would be an exercise in making the code less readable and robust.  For example, ""const int access_full_range =..."" gives assurance that the variable is initialized and will (or at least should) not change in the encompassing scope.  So I'm in favor of c99.  Also,  if I force c89, the code does not build for other reasons.  But c99 passes.
We should run this through the committee though.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,91,2019-01-30T20:34:02Z,2019-02-04T22:49:06Z,2019-02-04T22:49:06Z,MERGED,True,3,2,1,https://github.com/gsjaardema,Eliminate use of variable in two nested loops,1,[],https://github.com/CGNS/CGNS/pull/91,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/91,The variable n is used as an index in an outer and inner loop.  Use different index for inner loop.,The variable n is used as an index in an outer and inner loop.  Use different index for inner loop.,True,{'THUMBS_UP': ['https://github.com/MicK7']}
CGNS/CGNS,https://github.com/CGNS/CGNS,92,2019-01-30T20:38:50Z,2019-02-05T01:28:47Z,2019-02-05T01:28:48Z,CLOSED,False,8974,8974,1,https://github.com/gsjaardema,Move assignment to pointer after NULL check,1,[],https://github.com/CGNS/CGNS/pull/92,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/92,"The found pointer is assigned to prior to checking whether it was NULL.  Move assignment after check.
This change is large since github decided to normalize line endings...","The found pointer is assigned to prior to checking whether it was NULL.  Move assignment after check.
This change is large since github decided to normalize line endings...",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,92,2019-01-30T20:38:50Z,2019-02-05T01:28:47Z,2019-02-05T01:28:48Z,CLOSED,False,8974,8974,1,https://github.com/gsjaardema,Move assignment to pointer after NULL check,1,[],https://github.com/CGNS/CGNS/pull/92,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/92#issuecomment-460026953,"The found pointer is assigned to prior to checking whether it was NULL.  Move assignment after check.
This change is large since github decided to normalize line endings...",Looks good but the diff is not easy to see through.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,92,2019-01-30T20:38:50Z,2019-02-05T01:28:47Z,2019-02-05T01:28:48Z,CLOSED,False,8974,8974,1,https://github.com/gsjaardema,Move assignment to pointer after NULL check,1,[],https://github.com/CGNS/CGNS/pull/92,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/92#issuecomment-460449045,"The found pointer is assigned to prior to checking whether it was NULL.  Move assignment after check.
This change is large since github decided to normalize line endings...","Your file adds the carriage-return character, probably from Windows. Can you remove those characters?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,92,2019-01-30T20:38:50Z,2019-02-05T01:28:47Z,2019-02-05T01:28:48Z,CLOSED,False,8974,8974,1,https://github.com/gsjaardema,Move assignment to pointer after NULL check,1,[],https://github.com/CGNS/CGNS/pull/92,https://github.com/gsjaardema,4,https://github.com/CGNS/CGNS/pull/92#issuecomment-460462271,"The found pointer is assigned to prior to checking whether it was NULL.  Move assignment after check.
This change is large since github decided to normalize line endings...","I can’t change it.   It was added automatically by github when I edited the
file in github.   I think it had Windows endings and changed to Linux maybe?

.. greg
…
On Mon, Feb 4, 2019 at 4:04 PM Scot Breitenfeld ***@***.***> wrote:
 Your file adds the carriage-return character, probably from Windows. Can
 you remove those characters?

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#92 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AA2xDteIfPR9LImzPeRvgMJA8Pv1FRArks5vKLx-gaJpZM4abBFM>
 .",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,92,2019-01-30T20:38:50Z,2019-02-05T01:28:47Z,2019-02-05T01:28:48Z,CLOSED,False,8974,8974,1,https://github.com/gsjaardema,Move assignment to pointer after NULL check,1,[],https://github.com/CGNS/CGNS/pull/92,https://github.com/smguzik,5,https://github.com/CGNS/CGNS/pull/92#issuecomment-460464525,"The found pointer is assigned to prior to checking whether it was NULL.  Move assignment after check.
This change is large since github decided to normalize line endings...","It looks like it did have Windows endings originally.  Maybe we should run a fromdos first and commit that before a code change.
FYI, one can use
find . -name ""*.c"" -print0 | xargs -0 grep -l '^M$'
to find these files where ^M is not two separate characters.  Use ctrl+v+m to enter this character.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,92,2019-01-30T20:38:50Z,2019-02-05T01:28:47Z,2019-02-05T01:28:48Z,CLOSED,False,8974,8974,1,https://github.com/gsjaardema,Move assignment to pointer after NULL check,1,[],https://github.com/CGNS/CGNS/pull/92,https://github.com/gsjaardema,6,https://github.com/CGNS/CGNS/pull/92#issuecomment-460480325,"The found pointer is assigned to prior to checking whether it was NULL.  Move assignment after check.
This change is large since github decided to normalize line endings...","It looks like lines 1517 and 1518 had Windows line endings originally and then when editted in github, github decided to change all lines to Windows line endings:
We’ve detected the file has mixed line endings. When you commit changes we will normalize them to Windows-style (CRLF).

I will do the patch outside of github and see if can make it better.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,93,2019-01-30T20:45:33Z,2019-02-06T14:53:26Z,2019-02-06T14:53:26Z,MERGED,True,0,31,1,https://github.com/gsjaardema,Eliminate dead / unreachable code,1,[],https://github.com/CGNS/CGNS/pull/93,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/93,"The data pointer is never set to any value, so remains NULL throughout.  Remove all code inside if (data != NULL)
This removes all mentions of data, so remove its assignment also.","The data pointer is never set to any value, so remains NULL throughout.  Remove all code inside if (data != NULL)
This removes all mentions of data, so remove its assignment also.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,94,2019-02-05T01:39:10Z,2019-02-05T15:46:38Z,2019-02-05T15:46:38Z,MERGED,True,3,3,1,https://github.com/gsjaardema,Null check fix,2,[],https://github.com/CGNS/CGNS/pull/94,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/94,"A pointer was being assigned to before being checked for NULL; moved assignment to after check.
There were a couple lines in the file that had Windows-style line endings; changed to match rest of file.","A pointer was being assigned to before being checked for NULL; moved assignment to after check.
There were a couple lines in the file that had Windows-style line endings; changed to match rest of file.",True,{'THUMBS_UP': ['https://github.com/MicK7']}
CGNS/CGNS,https://github.com/CGNS/CGNS,95,2019-02-05T15:07:37Z,2019-02-05T18:02:08Z,2019-02-05T18:04:16Z,MERGED,True,12,12,1,https://github.com/gsjaardema,Eliminate C99 style for loop -- unneeded,1,[],https://github.com/CGNS/CGNS/pull/95,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/95,"Eliminate for loops of the form for (int n=.... . In this case, the only change needed is to remove the int since n is already declared in the routines and the int n is just causing a shadowing of the previously defined n.  Also eliminates need to use C99 or later standard when compiling.","Eliminate for loops of the form for (int n=.... . In this case, the only change needed is to remove the int since n is already declared in the routines and the int n is just causing a shadowing of the previously defined n.  Also eliminates need to use C99 or later standard when compiling.",True,{'THUMBS_UP': ['https://github.com/MicK7']}
CGNS/CGNS,https://github.com/CGNS/CGNS,95,2019-02-05T15:07:37Z,2019-02-05T18:02:08Z,2019-02-05T18:04:16Z,MERGED,True,12,12,1,https://github.com/gsjaardema,Eliminate C99 style for loop -- unneeded,1,[],https://github.com/CGNS/CGNS/pull/95,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/95#issuecomment-460740169,"Eliminate for loops of the form for (int n=.... . In this case, the only change needed is to remove the int since n is already declared in the routines and the int n is just causing a shadowing of the previously defined n.  Also eliminates need to use C99 or later standard when compiling.","This fixes issue on eclipse (SNL), and intel/16, openmpi-1.10",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,96,2019-02-05T20:28:56Z,2019-02-06T14:57:21Z,2019-02-06T18:49:57Z,MERGED,True,6,0,2,https://github.com/smguzik,Support for std C on linux,1,[],https://github.com/CGNS/CGNS/pull/96,https://github.com/smguzik,1,https://github.com/CGNS/CGNS/pull/96,Allows library and tests to compile using some variant of iso C.  S_IFREG and M_PI are not accessible unless _XOPEN_SOURCE >= 500.  This does not modify an existing definition of _XOPEN_SOURCE.,Allows library and tests to compile using some variant of iso C.  S_IFREG and M_PI are not accessible unless _XOPEN_SOURCE >= 500.  This does not modify an existing definition of _XOPEN_SOURCE.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,97,2019-02-07T20:43:45Z,2019-02-07T20:45:49Z,2019-02-07T20:45:49Z,CLOSED,False,316,193,6,https://github.com/brtnfld,Fix szip linking,42,[],https://github.com/CGNS/CGNS/pull/97,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/97,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,98,2019-02-08T17:09:17Z,2019-02-08T17:35:36Z,2019-02-08T17:35:36Z,MERGED,True,17,11,3,https://github.com/brtnfld,Changed ADFH_Read_Data and ADFH_Write_Data to honor the cgp_pio_mode …,1,[],https://github.com/CGNS/CGNS/pull/98,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/98,"…setting.
Added command line argument setting cgp_pio_mode in benchmark_hdf5.c","…setting.
Added command line argument setting cgp_pio_mode in benchmark_hdf5.c",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,99,2019-02-12T13:06:48Z,2019-02-15T19:11:06Z,2019-02-15T19:11:07Z,MERGED,True,8,8,1,https://github.com/sveale,Handle paths with spaces when launching cgnsview on windows,1,[],https://github.com/CGNS/CGNS/pull/99,https://github.com/sveale,1,https://github.com/CGNS/CGNS/pull/99,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,100,2019-02-12T21:30:13Z,2019-02-12T21:30:53Z,2019-02-13T16:30:32Z,MERGED,True,4,1,2,https://github.com/brtnfld, Fixed compliation error with cc: Sun C 5.12 SunOS_sparc,3,[],https://github.com/CGNS/CGNS/pull/100,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/100,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,100,2019-02-12T21:30:13Z,2019-02-12T21:30:53Z,2019-02-13T16:30:32Z,MERGED,True,4,1,2,https://github.com/brtnfld, Fixed compliation error with cc: Sun C 5.12 SunOS_sparc,3,[],https://github.com/CGNS/CGNS/pull/100,https://github.com/smguzik,2,https://github.com/CGNS/CGNS/pull/100#issuecomment-462989515,,Can we use ISO C99 with Sun compilers?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,100,2019-02-12T21:30:13Z,2019-02-12T21:30:53Z,2019-02-13T16:30:32Z,MERGED,True,4,1,2,https://github.com/brtnfld, Fixed compliation error with cc: Sun C 5.12 SunOS_sparc,3,[],https://github.com/CGNS/CGNS/pull/100,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/100#issuecomment-463267793,,"Maybe it is a compiler bug, but for the sun compiler if the  _XOPEN_SOURCE 500 is placed after the stdio.h include it works. But if it is before it, then I get the error
""cgns_io.c"", line 216: incomplete struct/union/enum stat64: st
""cgns_io.c"", line 224: improper member use: st_mode
""cgns_io.c"", line 226: improper member use: st_size
""cgns_io.c"", line 229: improper member use: st_size
""cgns_io.c"", line 230: improper member use: st_size
""cgns_io.c"", line 577: incomplete struct/union/enum stat64: st
""cgns_io.c"", line 581: warning: implicit function declaration: stat64
""cgns_io.c"", line 582: improper member use: st_mode
Line 216 is
#ifdef S_IFLNK
struct stat st;
#endif
I've reverted the change for now. The sun compiler is full C99.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,101,2019-02-13T15:54:25Z,2019-02-13T15:54:50Z,2019-02-20T23:08:21Z,MERGED,True,1,4,2,https://github.com/brtnfld,"Revert "" Fixed compliation error with cc: Sun C 5.12 SunOS_sparc""",1,[],https://github.com/CGNS/CGNS/pull/101,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/101,Reverts #100,Reverts #100,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,102,2019-02-15T12:23:07Z,2019-02-16T08:17:22Z,2019-02-20T23:09:28Z,CLOSED,False,4,0,1,https://github.com/TonyGarratt,Add modes to allow serial access for cgp_open,1,[],https://github.com/CGNS/CGNS/pull/102,https://github.com/TonyGarratt,1,https://github.com/CGNS/CGNS/pull/102,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,102,2019-02-15T12:23:07Z,2019-02-16T08:17:22Z,2019-02-20T23:09:28Z,CLOSED,False,4,0,1,https://github.com/TonyGarratt,Add modes to allow serial access for cgp_open,1,[],https://github.com/CGNS/CGNS/pull/102,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/102#issuecomment-464098269,,"What is the goal behind this proposed change ?
Is there an associated test case and documentation that can be included with the library ?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,102,2019-02-15T12:23:07Z,2019-02-16T08:17:22Z,2019-02-20T23:09:28Z,CLOSED,False,4,0,1,https://github.com/TonyGarratt,Add modes to allow serial access for cgp_open,1,[],https://github.com/CGNS/CGNS/pull/102,https://github.com/TonyGarratt,3,https://github.com/CGNS/CGNS/pull/102#issuecomment-464130718,,"I have been working with Scot on this change. Its to enable the PCGNS
library to be used in serial. I have sent Scot a test case. I do not know
how to merge these PRs - can you give me instructions on how to do so
please?

Thanks
Tony
…
On Fri, Feb 15, 2019 at 3:50 PM MicK7 ***@***.***> wrote:
 What is the goal behind this proposed change ?
 Is there an associated test case and documentation that can be included
 with the library ?

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#102 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AYyJ7KjUFL239NEBHfzLfeLEuz5JMor4ks5vNtcqgaJpZM4a9jS3>
 .


-- 
*Dr Tony Garratt*
*Lead Software Developer*
ANSYS UK Ltd.
*Tel: +44 7624 309933*
*Web: http:www.ansys.com <http://www.ansys.com/>*",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,102,2019-02-15T12:23:07Z,2019-02-16T08:17:22Z,2019-02-20T23:09:28Z,CLOSED,False,4,0,1,https://github.com/TonyGarratt,Add modes to allow serial access for cgp_open,1,[],https://github.com/CGNS/CGNS/pull/102,https://github.com/TonyGarratt,4,https://github.com/CGNS/CGNS/pull/102#issuecomment-464312454,,Has been merged into #105,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,103,2019-02-15T12:30:43Z,2019-02-16T08:17:09Z,2019-02-20T23:09:43Z,CLOSED,False,3,0,1,https://github.com/TonyGarratt,Add serial open modes for cgp_open,1,[],https://github.com/CGNS/CGNS/pull/103,https://github.com/TonyGarratt,1,https://github.com/CGNS/CGNS/pull/103,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,103,2019-02-15T12:30:43Z,2019-02-16T08:17:09Z,2019-02-20T23:09:43Z,CLOSED,False,3,0,1,https://github.com/TonyGarratt,Add serial open modes for cgp_open,1,[],https://github.com/CGNS/CGNS/pull/103,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/103#issuecomment-464099038,,Please group this merge request with #102,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,103,2019-02-15T12:30:43Z,2019-02-16T08:17:09Z,2019-02-20T23:09:43Z,CLOSED,False,3,0,1,https://github.com/TonyGarratt,Add serial open modes for cgp_open,1,[],https://github.com/CGNS/CGNS/pull/103,https://github.com/TonyGarratt,3,https://github.com/CGNS/CGNS/pull/103#issuecomment-464312420,,Has been merged into #105,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,104,2019-02-15T12:34:24Z,2019-02-16T08:16:54Z,2019-02-20T23:10:04Z,CLOSED,False,13,5,1,https://github.com/TonyGarratt,Allow serial access to file in cpg_open,2,[],https://github.com/CGNS/CGNS/pull/104,https://github.com/TonyGarratt,1,https://github.com/CGNS/CGNS/pull/104,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,104,2019-02-15T12:34:24Z,2019-02-16T08:16:54Z,2019-02-20T23:10:04Z,CLOSED,False,13,5,1,https://github.com/TonyGarratt,Allow serial access to file in cpg_open,2,[],https://github.com/CGNS/CGNS/pull/104,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/104#issuecomment-464099206,,Please group this merge request with #102,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,104,2019-02-15T12:34:24Z,2019-02-16T08:16:54Z,2019-02-20T23:10:04Z,CLOSED,False,13,5,1,https://github.com/TonyGarratt,Allow serial access to file in cpg_open,2,[],https://github.com/CGNS/CGNS/pull/104,https://github.com/TonyGarratt,3,https://github.com/CGNS/CGNS/pull/104#issuecomment-464312361,,Has been merged into #105,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,105,2019-02-15T20:56:13Z,2019-02-18T21:03:41Z,2019-02-18T21:03:41Z,MERGED,True,68,36,4,https://github.com/brtnfld,Allow serial access to file with cpg_open,3,[],https://github.com/CGNS/CGNS/pull/105,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/105,"Merged PR(102-104).

Added test.","Merged PR(102-104).

Added test.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,105,2019-02-15T20:56:13Z,2019-02-18T21:03:41Z,2019-02-18T21:03:41Z,MERGED,True,68,36,4,https://github.com/brtnfld,Allow serial access to file with cpg_open,3,[],https://github.com/CGNS/CGNS/pull/105,https://github.com/TonyGarratt,2,https://github.com/CGNS/CGNS/pull/105#issuecomment-464312240,"Merged PR(102-104).

Added test.",Has been merged into #105,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,105,2019-02-15T20:56:13Z,2019-02-18T21:03:41Z,2019-02-18T21:03:41Z,MERGED,True,68,36,4,https://github.com/brtnfld,Allow serial access to file with cpg_open,3,[],https://github.com/CGNS/CGNS/pull/105,https://github.com/TonyGarratt,3,https://github.com/CGNS/CGNS/pull/105#issuecomment-464312332,"Merged PR(102-104).

Added test.",Closed in error. Reopeining,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,106,2019-02-18T22:46:16Z,2019-02-20T15:04:40Z,2019-02-20T15:04:40Z,MERGED,True,6,2,1,https://github.com/gsjaardema,Eliminate potential integer overflow / undefined behavior,1,[],https://github.com/CGNS/CGNS/pull/106,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/106,"The check for open files was summing the g_files entry when all that was needed was a yes/no on whether there were any open files.  Depending of the value of g_files it was possible for the integer sum to overflow the range of a signed int which gives undefined behavior.  idx is an integer and g_files is an hid_t which is 64-bits on recent HDF5 versions, so overflow is definitely a possibility (and has happened in the wild)","The check for open files was summing the g_files entry when all that was needed was a yes/no on whether there were any open files.  Depending of the value of g_files it was possible for the integer sum to overflow the range of a signed int which gives undefined behavior.  idx is an integer and g_files is an hid_t which is 64-bits on recent HDF5 versions, so overflow is definitely a possibility (and has happened in the wild)",True,{'THUMBS_UP': ['https://github.com/MicK7']}
CGNS/CGNS,https://github.com/CGNS/CGNS,106,2019-02-18T22:46:16Z,2019-02-20T15:04:40Z,2019-02-20T15:04:40Z,MERGED,True,6,2,1,https://github.com/gsjaardema,Eliminate potential integer overflow / undefined behavior,1,[],https://github.com/CGNS/CGNS/pull/106,https://github.com/gsjaardema,2,https://github.com/CGNS/CGNS/pull/106#issuecomment-464910654,"The check for open files was summing the g_files entry when all that was needed was a yes/no on whether there were any open files.  Depending of the value of g_files it was possible for the integer sum to overflow the range of a signed int which gives undefined behavior.  idx is an integer and g_files is an hid_t which is 64-bits on recent HDF5 versions, so overflow is definitely a possibility (and has happened in the wild)","Note that this change has existed in #61 for awhile but splitting it into its own PR since it bit me again when I was running with a ""vanilla"" CGNS.  Hopefully if in its own PR, it will get merged.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,107,2019-02-20T15:02:44Z,2019-02-20T15:02:53Z,2019-02-20T23:07:51Z,MERGED,True,36,68,4,https://github.com/brtnfld,"Revert ""Allow serial access to file with cpg_open""",1,[],https://github.com/CGNS/CGNS/pull/107,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/107,"Reverts #105
Can achieve the same goals by splitting the MPI communicator.","Reverts #105
Can achieve the same goals by splitting the MPI communicator.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,108,2019-02-20T20:08:24Z,2019-02-21T23:30:36Z,2019-02-21T23:30:36Z,CLOSED,False,362,102,15,https://github.com/brtnfld,Automatic linking of szip and zlib (if needed by HDF5),12,[],https://github.com/CGNS/CGNS/pull/108,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/108,"CGNS-156 change configure options szip and zlib.
The use of --with-szip and --with-zlib should not be needed anymore. This information is now retrieved from the HDF5 build.","CGNS-156 change configure options szip and zlib.
The use of --with-szip and --with-zlib should not be needed anymore. This information is now retrieved from the HDF5 build.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,109,2019-02-20T21:18:58Z,2019-02-20T22:20:17Z,2019-02-20T22:20:17Z,MERGED,True,2,2,1,https://github.com/gsjaardema,Order include directives to get correct includes,1,[],https://github.com/CGNS/CGNS/pull/109,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/109,"In the current CMake build, the ${CMAKE_CURRENT_BINARY_DIR} include is the last one on the compilation line.  This directory contains the most up-to-date version of the cgnstypes.h include file.  If there is another version of cgnstypes.h existing in an install directory, perhaps the same directory containing hdf5 or some other include files, then the older cgnstypes.h will be included instead of the more current one.    Here is an example of the include specifications for the PATCHED and ORIGINAL compilation commands:
ORIGINAL:
cd /gpfs1/cgns/CGNS/build/src && mpicc 
-I/gpfs1/install_dir/include 
-I/gpfs1/cgns/CGNS/src 
-I/gpfs1/cgns/CGNS/build/src  
-I/gpfs1/install_dir/include 


PATCHED:
cd /gpfs1/cgns/CGNS/build/src && mpicc 
-I/gpfs1/cgns/CGNS/build/src 
-I/gpfs1/cgns/CGNS/src 
-I/gpfs1/install_dir/include  
-I/gpfs1/install_dir/include","In the current CMake build, the ${CMAKE_CURRENT_BINARY_DIR} include is the last one on the compilation line.  This directory contains the most up-to-date version of the cgnstypes.h include file.  If there is another version of cgnstypes.h existing in an install directory, perhaps the same directory containing hdf5 or some other include files, then the older cgnstypes.h will be included instead of the more current one.    Here is an example of the include specifications for the PATCHED and ORIGINAL compilation commands:
ORIGINAL:
cd /gpfs1/cgns/CGNS/build/src && mpicc 
-I/gpfs1/install_dir/include 
-I/gpfs1/cgns/CGNS/src 
-I/gpfs1/cgns/CGNS/build/src  
-I/gpfs1/install_dir/include 


PATCHED:
cd /gpfs1/cgns/CGNS/build/src && mpicc 
-I/gpfs1/cgns/CGNS/build/src 
-I/gpfs1/cgns/CGNS/src 
-I/gpfs1/install_dir/include  
-I/gpfs1/install_dir/include",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,110,2019-02-20T22:33:58Z,2019-02-20T22:47:32Z,2019-02-20T22:47:32Z,MERGED,True,94,87,3,https://github.com/brtnfld,Fixed ENUMVS issue in tests,6,[],https://github.com/CGNS/CGNS/pull/110,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/110,Added missing test for autotools,Added missing test for autotools,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,111,2019-02-21T15:36:19Z,2019-02-21T15:37:11Z,2019-02-21T15:37:11Z,MERGED,True,6199,696,40,https://github.com/brtnfld,Rind plane indexing,62,[],https://github.com/CGNS/CGNS/pull/111,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/111,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,112,2019-02-21T15:44:34Z,2019-02-21T15:58:26Z,2019-02-21T15:58:42Z,CLOSED,False,101,106,5,https://github.com/brtnfld,Redo of Rind Plane Indexing with no squash merge,64,[],https://github.com/CGNS/CGNS/pull/112,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/112,It's desired to preserve the commit development history of the feature.,It's desired to preserve the commit development history of the feature.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,113,2019-02-21T16:07:09Z,2019-02-21T21:06:13Z,2019-02-21T21:50:32Z,MERGED,True,0,0,0,https://github.com/brtnfld,Redo of Rind Plane Indexing with no squash merge,63,[],https://github.com/CGNS/CGNS/pull/113,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/113,It's desired to preserve the commit development history of the feature.,It's desired to preserve the commit development history of the feature.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,114,2019-02-21T16:18:33Z,2019-02-28T15:41:43Z,2019-06-27T15:40:49Z,MERGED,True,4,0,1,https://github.com/gsjaardema,Create hdf5-1.8.x compatible files from 1.10.X library,1,[],https://github.com/CGNS/CGNS/pull/114,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/114,"If CGNS is built against the new HDF5-1.10.x library versions, the files that are created are not readable by applications which are built against earlier HDF5-1.8.x library versions.  This can cause issues on many systems which are using commercial or externally maintained visualization or other applications (ParaView, Ensight, ...) .
Adding the command to use the H5F_LIBVER_V18 option makes the files readable by the older applications.
Here is some advice from the HDF5 group related to this issue:
If an application written for 1.8.* is linked with HDF5 1.10.(i.e., it doesn’t use any new features of 1.10.0), a file created by the application will be readable by HDF5 1.8. (or even earlier versions). The exception to this rule would be an application that uses H5Pset_libver_bounds with H5F_LIBVER_LATEST value for its “low” and “high” parameters.

In this case both parameters should be set to H5F_LIBVER_V18 to create 1.8 compatible file.

File control versioning became available in the HDF5 1.10.3 release. As a safeguard feature, we recommend using H5Pset_libver_bounds function to control file versioning.","If CGNS is built against the new HDF5-1.10.x library versions, the files that are created are not readable by applications which are built against earlier HDF5-1.8.x library versions.  This can cause issues on many systems which are using commercial or externally maintained visualization or other applications (ParaView, Ensight, ...) .
Adding the command to use the H5F_LIBVER_V18 option makes the files readable by the older applications.
Here is some advice from the HDF5 group related to this issue:
If an application written for 1.8.* is linked with HDF5 1.10.(i.e., it doesn’t use any new features of 1.10.0), a file created by the application will be readable by HDF5 1.8. (or even earlier versions). The exception to this rule would be an application that uses H5Pset_libver_bounds with H5F_LIBVER_LATEST value for its “low” and “high” parameters.

In this case both parameters should be set to H5F_LIBVER_V18 to create 1.8 compatible file.

File control versioning became available in the HDF5 1.10.3 release. As a safeguard feature, we recommend using H5Pset_libver_bounds function to control file versioning.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,114,2019-02-21T16:18:33Z,2019-02-28T15:41:43Z,2019-06-27T15:40:49Z,MERGED,True,4,0,1,https://github.com/gsjaardema,Create hdf5-1.8.x compatible files from 1.10.X library,1,[],https://github.com/CGNS/CGNS/pull/114,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/114#issuecomment-466069744,"If CGNS is built against the new HDF5-1.10.x library versions, the files that are created are not readable by applications which are built against earlier HDF5-1.8.x library versions.  This can cause issues on many systems which are using commercial or externally maintained visualization or other applications (ParaView, Ensight, ...) .
Adding the command to use the H5F_LIBVER_V18 option makes the files readable by the older applications.
Here is some advice from the HDF5 group related to this issue:
If an application written for 1.8.* is linked with HDF5 1.10.(i.e., it doesn’t use any new features of 1.10.0), a file created by the application will be readable by HDF5 1.8. (or even earlier versions). The exception to this rule would be an application that uses H5Pset_libver_bounds with H5F_LIBVER_LATEST value for its “low” and “high” parameters.

In this case both parameters should be set to H5F_LIBVER_V18 to create 1.8 compatible file.

File control versioning became available in the HDF5 1.10.3 release. As a safeguard feature, we recommend using H5Pset_libver_bounds function to control file versioning.",Can it be made optional at compile time with a flag KEEP_COMPATIBILITY_HDF5_V18 that would be ON but can be turned off ?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,114,2019-02-21T16:18:33Z,2019-02-28T15:41:43Z,2019-06-27T15:40:49Z,MERGED,True,4,0,1,https://github.com/gsjaardema,Create hdf5-1.8.x compatible files from 1.10.X library,1,[],https://github.com/CGNS/CGNS/pull/114,https://github.com/gsjaardema,3,https://github.com/CGNS/CGNS/pull/114#issuecomment-466095819,"If CGNS is built against the new HDF5-1.10.x library versions, the files that are created are not readable by applications which are built against earlier HDF5-1.8.x library versions.  This can cause issues on many systems which are using commercial or externally maintained visualization or other applications (ParaView, Ensight, ...) .
Adding the command to use the H5F_LIBVER_V18 option makes the files readable by the older applications.
Here is some advice from the HDF5 group related to this issue:
If an application written for 1.8.* is linked with HDF5 1.10.(i.e., it doesn’t use any new features of 1.10.0), a file created by the application will be readable by HDF5 1.8. (or even earlier versions). The exception to this rule would be an application that uses H5Pset_libver_bounds with H5F_LIBVER_LATEST value for its “low” and “high” parameters.

In this case both parameters should be set to H5F_LIBVER_V18 to create 1.8 compatible file.

File control versioning became available in the HDF5 1.10.3 release. As a safeguard feature, we recommend using H5Pset_libver_bounds function to control file versioning.","@MicK7 What benefit would that provide.  In other words, is there a benefit that using the V110 file format currently provides?
I have no problem with it being optional other than the added complexity it would cause and the need for additional build-related documentation.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,114,2019-02-21T16:18:33Z,2019-02-28T15:41:43Z,2019-06-27T15:40:49Z,MERGED,True,4,0,1,https://github.com/gsjaardema,Create hdf5-1.8.x compatible files from 1.10.X library,1,[],https://github.com/CGNS/CGNS/pull/114,https://github.com/MicK7,4,https://github.com/CGNS/CGNS/pull/114#issuecomment-466102453,"If CGNS is built against the new HDF5-1.10.x library versions, the files that are created are not readable by applications which are built against earlier HDF5-1.8.x library versions.  This can cause issues on many systems which are using commercial or externally maintained visualization or other applications (ParaView, Ensight, ...) .
Adding the command to use the H5F_LIBVER_V18 option makes the files readable by the older applications.
Here is some advice from the HDF5 group related to this issue:
If an application written for 1.8.* is linked with HDF5 1.10.(i.e., it doesn’t use any new features of 1.10.0), a file created by the application will be readable by HDF5 1.8. (or even earlier versions). The exception to this rule would be an application that uses H5Pset_libver_bounds with H5F_LIBVER_LATEST value for its “low” and “high” parameters.

In this case both parameters should be set to H5F_LIBVER_V18 to create 1.8 compatible file.

File control versioning became available in the HDF5 1.10.3 release. As a safeguard feature, we recommend using H5Pset_libver_bounds function to control file versioning.","It would be easier for people who want to work with HDF5 1.10 to experiment.
I was also thinking that it could be useful for metadata compression work or collective metadata IO, not sure though.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,114,2019-02-21T16:18:33Z,2019-02-28T15:41:43Z,2019-06-27T15:40:49Z,MERGED,True,4,0,1,https://github.com/gsjaardema,Create hdf5-1.8.x compatible files from 1.10.X library,1,[],https://github.com/CGNS/CGNS/pull/114,https://github.com/gsjaardema,5,https://github.com/CGNS/CGNS/pull/114#issuecomment-466103596,"If CGNS is built against the new HDF5-1.10.x library versions, the files that are created are not readable by applications which are built against earlier HDF5-1.8.x library versions.  This can cause issues on many systems which are using commercial or externally maintained visualization or other applications (ParaView, Ensight, ...) .
Adding the command to use the H5F_LIBVER_V18 option makes the files readable by the older applications.
Here is some advice from the HDF5 group related to this issue:
If an application written for 1.8.* is linked with HDF5 1.10.(i.e., it doesn’t use any new features of 1.10.0), a file created by the application will be readable by HDF5 1.8. (or even earlier versions). The exception to this rule would be an application that uses H5Pset_libver_bounds with H5F_LIBVER_LATEST value for its “low” and “high” parameters.

In this case both parameters should be set to H5F_LIBVER_V18 to create 1.8 compatible file.

File control versioning became available in the HDF5 1.10.3 release. As a safeguard feature, we recommend using H5Pset_libver_bounds function to control file versioning.",Fair enough.  I think that the collective metadata still works on the hdf5-1.8.X format is using the hdf5-1.10.x library.  I'm not sure whether the upcoming PROC0 and other scalability-related changes would be usable.  Do you know @brtnfld  ?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,114,2019-02-21T16:18:33Z,2019-02-28T15:41:43Z,2019-06-27T15:40:49Z,MERGED,True,4,0,1,https://github.com/gsjaardema,Create hdf5-1.8.x compatible files from 1.10.X library,1,[],https://github.com/CGNS/CGNS/pull/114,https://github.com/brtnfld,6,https://github.com/CGNS/CGNS/pull/114#issuecomment-466107106,"If CGNS is built against the new HDF5-1.10.x library versions, the files that are created are not readable by applications which are built against earlier HDF5-1.8.x library versions.  This can cause issues on many systems which are using commercial or externally maintained visualization or other applications (ParaView, Ensight, ...) .
Adding the command to use the H5F_LIBVER_V18 option makes the files readable by the older applications.
Here is some advice from the HDF5 group related to this issue:
If an application written for 1.8.* is linked with HDF5 1.10.(i.e., it doesn’t use any new features of 1.10.0), a file created by the application will be readable by HDF5 1.8. (or even earlier versions). The exception to this rule would be an application that uses H5Pset_libver_bounds with H5F_LIBVER_LATEST value for its “low” and “high” parameters.

In this case both parameters should be set to H5F_LIBVER_V18 to create 1.8 compatible file.

File control versioning became available in the HDF5 1.10.3 release. As a safeguard feature, we recommend using H5Pset_libver_bounds function to control file versioning.","This is scheduled to be fixed in 3.4.1:
https://cgnsorg.atlassian.net/browse/CGNS-138
I would suggest adding CG_FILE_HDF5_1_8 CG_FILE_HDF5_1_10 constants that can be used by
cg_set_file_type
1.8 written files should still be able to use the proc0 and other scalability changes. These changes are not associated with the HDF5 file format.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,114,2019-02-21T16:18:33Z,2019-02-28T15:41:43Z,2019-06-27T15:40:49Z,MERGED,True,4,0,1,https://github.com/gsjaardema,Create hdf5-1.8.x compatible files from 1.10.X library,1,[],https://github.com/CGNS/CGNS/pull/114,https://github.com/gsjaardema,7,https://github.com/CGNS/CGNS/pull/114#issuecomment-466108855,"If CGNS is built against the new HDF5-1.10.x library versions, the files that are created are not readable by applications which are built against earlier HDF5-1.8.x library versions.  This can cause issues on many systems which are using commercial or externally maintained visualization or other applications (ParaView, Ensight, ...) .
Adding the command to use the H5F_LIBVER_V18 option makes the files readable by the older applications.
Here is some advice from the HDF5 group related to this issue:
If an application written for 1.8.* is linked with HDF5 1.10.(i.e., it doesn’t use any new features of 1.10.0), a file created by the application will be readable by HDF5 1.8. (or even earlier versions). The exception to this rule would be an application that uses H5Pset_libver_bounds with H5F_LIBVER_LATEST value for its “low” and “high” parameters.

In this case both parameters should be set to H5F_LIBVER_V18 to create 1.8 compatible file.

File control versioning became available in the HDF5 1.10.3 release. As a safeguard feature, we recommend using H5Pset_libver_bounds function to control file versioning.",Is 3.4.1 the upcoming release?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,114,2019-02-21T16:18:33Z,2019-02-28T15:41:43Z,2019-06-27T15:40:49Z,MERGED,True,4,0,1,https://github.com/gsjaardema,Create hdf5-1.8.x compatible files from 1.10.X library,1,[],https://github.com/CGNS/CGNS/pull/114,https://github.com/brtnfld,8,https://github.com/CGNS/CGNS/pull/114#issuecomment-466109716,"If CGNS is built against the new HDF5-1.10.x library versions, the files that are created are not readable by applications which are built against earlier HDF5-1.8.x library versions.  This can cause issues on many systems which are using commercial or externally maintained visualization or other applications (ParaView, Ensight, ...) .
Adding the command to use the H5F_LIBVER_V18 option makes the files readable by the older applications.
Here is some advice from the HDF5 group related to this issue:
If an application written for 1.8.* is linked with HDF5 1.10.(i.e., it doesn’t use any new features of 1.10.0), a file created by the application will be readable by HDF5 1.8. (or even earlier versions). The exception to this rule would be an application that uses H5Pset_libver_bounds with H5F_LIBVER_LATEST value for its “low” and “high” parameters.

In this case both parameters should be set to H5F_LIBVER_V18 to create 1.8 compatible file.

File control versioning became available in the HDF5 1.10.3 release. As a safeguard feature, we recommend using H5Pset_libver_bounds function to control file versioning.","The next release is 3.4.0, if you want me to push this feature to 3.4.0 let me know.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,114,2019-02-21T16:18:33Z,2019-02-28T15:41:43Z,2019-06-27T15:40:49Z,MERGED,True,4,0,1,https://github.com/gsjaardema,Create hdf5-1.8.x compatible files from 1.10.X library,1,[],https://github.com/CGNS/CGNS/pull/114,https://github.com/gsjaardema,9,https://github.com/CGNS/CGNS/pull/114#issuecomment-466110593,"If CGNS is built against the new HDF5-1.10.x library versions, the files that are created are not readable by applications which are built against earlier HDF5-1.8.x library versions.  This can cause issues on many systems which are using commercial or externally maintained visualization or other applications (ParaView, Ensight, ...) .
Adding the command to use the H5F_LIBVER_V18 option makes the files readable by the older applications.
Here is some advice from the HDF5 group related to this issue:
If an application written for 1.8.* is linked with HDF5 1.10.(i.e., it doesn’t use any new features of 1.10.0), a file created by the application will be readable by HDF5 1.8. (or even earlier versions). The exception to this rule would be an application that uses H5Pset_libver_bounds with H5F_LIBVER_LATEST value for its “low” and “high” parameters.

In this case both parameters should be set to H5F_LIBVER_V18 to create 1.8 compatible file.

File control versioning became available in the HDF5 1.10.3 release. As a safeguard feature, we recommend using H5Pset_libver_bounds function to control file versioning.","If possible, it would help a lot.  We have people that won't upgrade from hdf5-1.8.x since they need to use Paraview and other tools which haven't moved to 1.10.x yet so their files become unreadable if they use hdf5-1.10.x.  However, they are running into scalability issues at large processor counts with hdf5-1.8.x
If it doesn't make it into 3.4.0 I can provide a local patch file, so not disastrous, but inconvenient.
Thanks.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,114,2019-02-21T16:18:33Z,2019-02-28T15:41:43Z,2019-06-27T15:40:49Z,MERGED,True,4,0,1,https://github.com/gsjaardema,Create hdf5-1.8.x compatible files from 1.10.X library,1,[],https://github.com/CGNS/CGNS/pull/114,https://github.com/MicK7,10,https://github.com/CGNS/CGNS/pull/114#issuecomment-466135499,"If CGNS is built against the new HDF5-1.10.x library versions, the files that are created are not readable by applications which are built against earlier HDF5-1.8.x library versions.  This can cause issues on many systems which are using commercial or externally maintained visualization or other applications (ParaView, Ensight, ...) .
Adding the command to use the H5F_LIBVER_V18 option makes the files readable by the older applications.
Here is some advice from the HDF5 group related to this issue:
If an application written for 1.8.* is linked with HDF5 1.10.(i.e., it doesn’t use any new features of 1.10.0), a file created by the application will be readable by HDF5 1.8. (or even earlier versions). The exception to this rule would be an application that uses H5Pset_libver_bounds with H5F_LIBVER_LATEST value for its “low” and “high” parameters.

In this case both parameters should be set to H5F_LIBVER_V18 to create 1.8 compatible file.

File control versioning became available in the HDF5 1.10.3 release. As a safeguard feature, we recommend using H5Pset_libver_bounds function to control file versioning.","Concerning ParaView, I am in the process of migrating the reader to CGNS 3.4 and it is already possible to compile with 1.10 support (if it is not the case it should or thus I will need to create a ticket issue).",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,114,2019-02-21T16:18:33Z,2019-02-28T15:41:43Z,2019-06-27T15:40:49Z,MERGED,True,4,0,1,https://github.com/gsjaardema,Create hdf5-1.8.x compatible files from 1.10.X library,1,[],https://github.com/CGNS/CGNS/pull/114,https://github.com/brtnfld,11,https://github.com/CGNS/CGNS/pull/114#issuecomment-467630263,"If CGNS is built against the new HDF5-1.10.x library versions, the files that are created are not readable by applications which are built against earlier HDF5-1.8.x library versions.  This can cause issues on many systems which are using commercial or externally maintained visualization or other applications (ParaView, Ensight, ...) .
Adding the command to use the H5F_LIBVER_V18 option makes the files readable by the older applications.
Here is some advice from the HDF5 group related to this issue:
If an application written for 1.8.* is linked with HDF5 1.10.(i.e., it doesn’t use any new features of 1.10.0), a file created by the application will be readable by HDF5 1.8. (or even earlier versions). The exception to this rule would be an application that uses H5Pset_libver_bounds with H5F_LIBVER_LATEST value for its “low” and “high” parameters.

In this case both parameters should be set to H5F_LIBVER_V18 to create 1.8 compatible file.

File control versioning became available in the HDF5 1.10.3 release. As a safeguard feature, we recommend using H5Pset_libver_bounds function to control file versioning.","I'm thinking we should set the default to using HDF5 1.8 format. CGNS does not use any 1.10 features that are associated with the 1.10 format (i.e. VDS, chunking, etc...). When these features are introduced into CGNS, then we can default to use the 1.10 format.
I don't think this will hurt performance, but I have not checked to be sure.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,114,2019-02-21T16:18:33Z,2019-02-28T15:41:43Z,2019-06-27T15:40:49Z,MERGED,True,4,0,1,https://github.com/gsjaardema,Create hdf5-1.8.x compatible files from 1.10.X library,1,[],https://github.com/CGNS/CGNS/pull/114,https://github.com/gsjaardema,12,https://github.com/CGNS/CGNS/pull/114#issuecomment-467646919,"If CGNS is built against the new HDF5-1.10.x library versions, the files that are created are not readable by applications which are built against earlier HDF5-1.8.x library versions.  This can cause issues on many systems which are using commercial or externally maintained visualization or other applications (ParaView, Ensight, ...) .
Adding the command to use the H5F_LIBVER_V18 option makes the files readable by the older applications.
Here is some advice from the HDF5 group related to this issue:
If an application written for 1.8.* is linked with HDF5 1.10.(i.e., it doesn’t use any new features of 1.10.0), a file created by the application will be readable by HDF5 1.8. (or even earlier versions). The exception to this rule would be an application that uses H5Pset_libver_bounds with H5F_LIBVER_LATEST value for its “low” and “high” parameters.

In this case both parameters should be set to H5F_LIBVER_V18 to create 1.8 compatible file.

File control versioning became available in the HDF5 1.10.3 release. As a safeguard feature, we recommend using H5Pset_libver_bounds function to control file versioning.","I have done some non-rigourous timings and I didn't see any major changes in performance with 1.8.X compatible files vs 1.10.X files.  Again, this was not well-controlled or rigourous.  Just a few runs with both file formats on a wide range of processors.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,114,2019-02-21T16:18:33Z,2019-02-28T15:41:43Z,2019-06-27T15:40:49Z,MERGED,True,4,0,1,https://github.com/gsjaardema,Create hdf5-1.8.x compatible files from 1.10.X library,1,[],https://github.com/CGNS/CGNS/pull/114,https://github.com/brtnfld,13,https://github.com/CGNS/CGNS/pull/114#issuecomment-467904695,"If CGNS is built against the new HDF5-1.10.x library versions, the files that are created are not readable by applications which are built against earlier HDF5-1.8.x library versions.  This can cause issues on many systems which are using commercial or externally maintained visualization or other applications (ParaView, Ensight, ...) .
Adding the command to use the H5F_LIBVER_V18 option makes the files readable by the older applications.
Here is some advice from the HDF5 group related to this issue:
If an application written for 1.8.* is linked with HDF5 1.10.(i.e., it doesn’t use any new features of 1.10.0), a file created by the application will be readable by HDF5 1.8. (or even earlier versions). The exception to this rule would be an application that uses H5Pset_libver_bounds with H5F_LIBVER_LATEST value for its “low” and “high” parameters.

In this case both parameters should be set to H5F_LIBVER_V18 to create 1.8 compatible file.

File control versioning became available in the HDF5 1.10.3 release. As a safeguard feature, we recommend using H5Pset_libver_bounds function to control file versioning.",Created PR #119.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,114,2019-02-21T16:18:33Z,2019-02-28T15:41:43Z,2019-06-27T15:40:49Z,MERGED,True,4,0,1,https://github.com/gsjaardema,Create hdf5-1.8.x compatible files from 1.10.X library,1,[],https://github.com/CGNS/CGNS/pull/114,https://github.com/brtnfld,14,https://github.com/CGNS/CGNS/pull/114#issuecomment-501810383,"If CGNS is built against the new HDF5-1.10.x library versions, the files that are created are not readable by applications which are built against earlier HDF5-1.8.x library versions.  This can cause issues on many systems which are using commercial or externally maintained visualization or other applications (ParaView, Ensight, ...) .
Adding the command to use the H5F_LIBVER_V18 option makes the files readable by the older applications.
Here is some advice from the HDF5 group related to this issue:
If an application written for 1.8.* is linked with HDF5 1.10.(i.e., it doesn’t use any new features of 1.10.0), a file created by the application will be readable by HDF5 1.8. (or even earlier versions). The exception to this rule would be an application that uses H5Pset_libver_bounds with H5F_LIBVER_LATEST value for its “low” and “high” parameters.

In this case both parameters should be set to H5F_LIBVER_V18 to create 1.8 compatible file.

File control versioning became available in the HDF5 1.10.3 release. As a safeguard feature, we recommend using H5Pset_libver_bounds function to control file versioning.","Compact storage introduces the use of:
H5Pset_file_space_strategy
which is a 1.10 format. So we will have to introduce a method of specifying which HDF5 library version to use.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,114,2019-02-21T16:18:33Z,2019-02-28T15:41:43Z,2019-06-27T15:40:49Z,MERGED,True,4,0,1,https://github.com/gsjaardema,Create hdf5-1.8.x compatible files from 1.10.X library,1,[],https://github.com/CGNS/CGNS/pull/114,https://github.com/brtnfld,15,https://github.com/CGNS/CGNS/pull/114#issuecomment-506399490,"If CGNS is built against the new HDF5-1.10.x library versions, the files that are created are not readable by applications which are built against earlier HDF5-1.8.x library versions.  This can cause issues on many systems which are using commercial or externally maintained visualization or other applications (ParaView, Ensight, ...) .
Adding the command to use the H5F_LIBVER_V18 option makes the files readable by the older applications.
Here is some advice from the HDF5 group related to this issue:
If an application written for 1.8.* is linked with HDF5 1.10.(i.e., it doesn’t use any new features of 1.10.0), a file created by the application will be readable by HDF5 1.8. (or even earlier versions). The exception to this rule would be an application that uses H5Pset_libver_bounds with H5F_LIBVER_LATEST value for its “low” and “high” parameters.

In this case both parameters should be set to H5F_LIBVER_V18 to create 1.8 compatible file.

File control versioning became available in the HDF5 1.10.3 release. As a safeguard feature, we recommend using H5Pset_libver_bounds function to control file versioning.","The HDF5 library (develop) was updated to throw an error if H5Pset_file_space_strategy(…) is specified with 1.8 version compatibility. I’ve disabled the option for now until the issue is resolved on how to determine what version of HDF5 should be used. We will need to introduce an option or API which lets users specify this, CGNS-166. I'll create an RFC summarizing the possibilities.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,115,2019-02-22T19:03:18Z,2019-02-26T22:38:10Z,2019-02-27T23:34:59Z,MERGED,True,96,90,5,https://github.com/matmel,CGNS-129 Fix to build shared lib on windows.,1,[],https://github.com/CGNS/CGNS/pull/115,https://github.com/matmel,1,https://github.com/CGNS/CGNS/pull/115,"This pull request fixes the cmake build system on windows. Hopefully, from now on we should be able to build the static and shared versions of the library and tests without error. If the shared version of CGNS is chosen, the shared version of HDF5 will be automatically used. I updated the appveyor build matrix to add a shared build.
There is a limitation though: we cannot build the shared and static versions at the same time. We could improve cmake scripts to support it if desired. This is a more involved work though.","This pull request fixes the cmake build system on windows. Hopefully, from now on we should be able to build the static and shared versions of the library and tests without error. If the shared version of CGNS is chosen, the shared version of HDF5 will be automatically used. I updated the appveyor build matrix to add a shared build.
There is a limitation though: we cannot build the shared and static versions at the same time. We could improve cmake scripts to support it if desired. This is a more involved work though.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,115,2019-02-22T19:03:18Z,2019-02-26T22:38:10Z,2019-02-27T23:34:59Z,MERGED,True,96,90,5,https://github.com/matmel,CGNS-129 Fix to build shared lib on windows.,1,[],https://github.com/CGNS/CGNS/pull/115,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/115#issuecomment-466586898,"This pull request fixes the cmake build system on windows. Hopefully, from now on we should be able to build the static and shared versions of the library and tests without error. If the shared version of CGNS is chosen, the shared version of HDF5 will be automatically used. I updated the appveyor build matrix to add a shared build.
There is a limitation though: we cannot build the shared and static versions at the same time. We could improve cmake scripts to support it if desired. This is a more involved work though.","Tony, can you make sure this is compatible with Intel (serial and parallel) on windows? I need to renew my Intel Windows 19 License or else I would do it.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,115,2019-02-22T19:03:18Z,2019-02-26T22:38:10Z,2019-02-27T23:34:59Z,MERGED,True,96,90,5,https://github.com/matmel,CGNS-129 Fix to build shared lib on windows.,1,[],https://github.com/CGNS/CGNS/pull/115,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/115#issuecomment-467643839,"This pull request fixes the cmake build system on windows. Hopefully, from now on we should be able to build the static and shared versions of the library and tests without error. If the shared version of CGNS is chosen, the shared version of HDF5 will be automatically used. I updated the appveyor build matrix to add a shared build.
There is a limitation though: we cannot build the shared and static versions at the same time. We could improve cmake scripts to support it if desired. This is a more involved work though.","Tentatively approving, we need to verify it works for intel on windows before we release it (this is on-going).",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,115,2019-02-22T19:03:18Z,2019-02-26T22:38:10Z,2019-02-27T23:34:59Z,MERGED,True,96,90,5,https://github.com/matmel,CGNS-129 Fix to build shared lib on windows.,1,[],https://github.com/CGNS/CGNS/pull/115,https://github.com/brtnfld,4,https://github.com/CGNS/CGNS/pull/115#issuecomment-468074255,"This pull request fixes the cmake build system on windows. Hopefully, from now on we should be able to build the static and shared versions of the library and tests without error. If the shared version of CGNS is chosen, the shared version of HDF5 will be automatically used. I updated the appveyor build matrix to add a shared build.
There is a limitation though: we cannot build the shared and static versions at the same time. We could improve cmake scripts to support it if desired. This is a more involved work though.",We will have to test your fork offline before merging it again. I don't think I will have time to investigate it before the release of 3.4.0.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,116,2019-02-22T23:39:11Z,2019-03-01T15:13:27Z,2019-03-01T15:13:27Z,MERGED,True,326,32,16,https://github.com/brtnfld,Automatic linking of szip and zlib (if needed by HDF5),36,[],https://github.com/CGNS/CGNS/pull/116,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/116,"CGNS-156 change configure options szip and zlib.
The use of --with-szip and --with-zlib should not be needed anymore. This information is now retrieved from the HDF5 build.","CGNS-156 change configure options szip and zlib.
The use of --with-szip and --with-zlib should not be needed anymore. This information is now retrieved from the HDF5 build.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,117,2019-02-25T21:14:58Z,2019-02-25T23:27:58Z,2019-02-25T23:28:12Z,MERGED,True,1366,1371,17,https://github.com/brtnfld,Cgns107,4,[],https://github.com/CGNS/CGNS/pull/117,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/117,Fixed NAG Fortran compilation errors and test failings.,Fixed NAG Fortran compilation errors and test failings.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,118,2019-02-26T21:47:39Z,2019-02-26T22:42:29Z,2019-02-26T22:42:29Z,MERGED,True,22,2,3,https://github.com/brtnfld,Cgns107,8,[],https://github.com/CGNS/CGNS/pull/118,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/118,Added needed Fortran Flags.,Added needed Fortran Flags.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,119,2019-02-27T15:23:40Z,2019-02-28T15:45:11Z,2019-02-28T15:45:11Z,CLOSED,False,119,8,5,https://github.com/brtnfld,Set the default HDF5 file format to 1.8.,15,[],https://github.com/CGNS/CGNS/pull/119,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/119,In place of PR #114,In place of PR #114,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,120,2019-02-27T15:58:33Z,2019-03-01T15:10:29Z,2019-03-11T19:07:53Z,MERGED,True,1,1,1,https://github.com/gsjaardema,Fix for OSX Build,1,[],https://github.com/CGNS/CGNS/pull/120,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/120,"On OSX, the XOPEN version needs to be at least 600 to include the function prototype for readlink using the following compiler:
Apple LLVM version 10.0.0 (clang-1000.11.45.5)
Target: x86_64-apple-darwin17.7.0

The warning is:
/Users/gdsjaar/src/seacas/TPL/cgns/CGNS/src/cgns_io.c:229:15: warning: implicit declaration of function 'readlink' is invalid in C99
      [-Wimplicit-function-declaration]
        len = readlink(filename, linkfile, st.st_size + 1);
              ^

When _XOPEN_SOURCE is defined to be 500.  Warning goes away when defined to be 600.
This also happens with gcc-8.3.0 on OSX.","On OSX, the XOPEN version needs to be at least 600 to include the function prototype for readlink using the following compiler:
Apple LLVM version 10.0.0 (clang-1000.11.45.5)
Target: x86_64-apple-darwin17.7.0

The warning is:
/Users/gdsjaar/src/seacas/TPL/cgns/CGNS/src/cgns_io.c:229:15: warning: implicit declaration of function 'readlink' is invalid in C99
      [-Wimplicit-function-declaration]
        len = readlink(filename, linkfile, st.st_size + 1);
              ^

When _XOPEN_SOURCE is defined to be 500.  Warning goes away when defined to be 600.
This also happens with gcc-8.3.0 on OSX.",True,{'THUMBS_UP': ['https://github.com/MicK7']}
CGNS/CGNS,https://github.com/CGNS/CGNS,120,2019-02-27T15:58:33Z,2019-03-01T15:10:29Z,2019-03-11T19:07:53Z,MERGED,True,1,1,1,https://github.com/gsjaardema,Fix for OSX Build,1,[],https://github.com/CGNS/CGNS/pull/120,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/120#issuecomment-468460690,"On OSX, the XOPEN version needs to be at least 600 to include the function prototype for readlink using the following compiler:
Apple LLVM version 10.0.0 (clang-1000.11.45.5)
Target: x86_64-apple-darwin17.7.0

The warning is:
/Users/gdsjaar/src/seacas/TPL/cgns/CGNS/src/cgns_io.c:229:15: warning: implicit declaration of function 'readlink' is invalid in C99
      [-Wimplicit-function-declaration]
        len = readlink(filename, linkfile, st.st_size + 1);
              ^

When _XOPEN_SOURCE is defined to be 500.  Warning goes away when defined to be 600.
This also happens with gcc-8.3.0 on OSX.","Unless I hear otherwise, I'm going to merge this.",True,{'THUMBS_UP': ['https://github.com/MicK7']}
CGNS/CGNS,https://github.com/CGNS/CGNS,121,2019-02-27T23:02:52Z,2019-02-27T23:03:08Z,2019-02-27T23:18:04Z,MERGED,True,90,96,5,https://github.com/brtnfld,"Revert ""CGNS-129 Fix to build shared lib on windows.""",1,[],https://github.com/CGNS/CGNS/pull/121,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/121,Reverts #115,Reverts #115,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,121,2019-02-27T23:02:52Z,2019-02-27T23:03:08Z,2019-02-27T23:18:04Z,MERGED,True,90,96,5,https://github.com/brtnfld,"Revert ""CGNS-129 Fix to build shared lib on windows.""",1,[],https://github.com/CGNS/CGNS/pull/121,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/121#issuecomment-468067246,Reverts #115,"This check-in causes cmake builds to fail on osx 10.11, SunOS, and linux with NAG compilers.
=============================
Tests Summary
FAILED emu: setenv MAKE gmake exec current/cgnstest.sh 1
FAILED emu: setenv MAKE gmake exec current/cgnstest.sh 1 emu64
FAILED emu: setenv MAKE gmake exec current/cgnstest.sh 2
FAILED emu: setenv MAKE gmake exec current/cgnstest.sh 2 emu64
FAILED emu: setenv MAKE gmake exec current/cgnstest.sh 4
FAILED emu: setenv MAKE gmake exec current/cgnstest.sh 4 emu64
FAILED jelly: module-load MPICH,binutils exec current/cgnstest.sh 5 pp-3.2
FAILED jelly: module-load MPICH,binutils exec current/cgnstest.sh 6 pp-3.2
FAILED jelly: module-load NAG/6.1 exec current/cgnstest.sh 1 nag
FAILED jelly: module-load NAG/6.1 exec current/cgnstest.sh 2 nag
FAILED jelly: module-load NAG/6.1 exec current/cgnstest.sh 4 nag
FAILED jelly: module-load OpenMPI,binutils exec current/cgnstest.sh 5 openmpi
FAILED jelly: module-load OpenMPI,binutils exec current/cgnstest.sh 6 openmpi
FAILED osx1011test: setenv MAKE make exec current/cgnstest.sh 1
FAILED osx1011test: setenv MAKE make exec current/cgnstest.sh 1 intel
FAILED osx1011test: setenv MAKE make exec current/cgnstest.sh 2
FAILED osx1011test: setenv MAKE make exec current/cgnstest.sh 2 intel
FAILED osx1011test: setenv MAKE make exec current/cgnstest.sh 4
FAILED osx1011test: setenv MAKE make exec current/cgnstest.sh 4 intel",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,121,2019-02-27T23:02:52Z,2019-02-27T23:03:08Z,2019-02-27T23:18:04Z,MERGED,True,90,96,5,https://github.com/brtnfld,"Revert ""CGNS-129 Fix to build shared lib on windows.""",1,[],https://github.com/CGNS/CGNS/pull/121,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/121#issuecomment-468067613,Reverts #115,"-- Configuring done
CMake Error:
Error evaluating generator expression:
$<TARGET_FILE_DIR:cgns_static>

No target ""cgns_static""",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,121,2019-02-27T23:02:52Z,2019-02-27T23:03:08Z,2019-02-27T23:18:04Z,MERGED,True,90,96,5,https://github.com/brtnfld,"Revert ""CGNS-129 Fix to build shared lib on windows.""",1,[],https://github.com/CGNS/CGNS/pull/121,https://github.com/brtnfld,4,https://github.com/CGNS/CGNS/pull/121#issuecomment-468070085,Reverts #115,We will have to test your fork offline before merging it again. I don't think I will have time to investigate it before the release of 3.4.0.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,122,2019-03-04T15:52:52Z,2019-03-04T15:53:52Z,2019-03-04T15:53:52Z,MERGED,True,13580,3660,145,https://github.com/brtnfld,Release v3.4.0,217,[],https://github.com/CGNS/CGNS/pull/122,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/122,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,123,2019-03-06T18:12:47Z,2019-03-06T19:00:25Z,2019-03-11T19:07:40Z,MERGED,True,3,3,3,https://github.com/gsjaardema,Fix tests for scoped enum use,1,[],https://github.com/CGNS/CGNS/pull/123,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/123,There are a few uses of CGNS Enums which were not wrapped by the CGNS_ENUMV() macro. Fixed so now tests will build with CG_SCOPED_ENUMS defined.,There are a few uses of CGNS Enums which were not wrapped by the CGNS_ENUMV() macro. Fixed so now tests will build with CG_SCOPED_ENUMS defined.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,124,2019-03-06T18:50:55Z,2019-03-11T19:06:09Z,2019-03-11T19:07:29Z,MERGED,True,100,109,13,https://github.com/gsjaardema,Unify similar defines,1,[],https://github.com/CGNS/CGNS/pull/124,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/124,"The code contains a couple similar defines: BUILD_HDF5 and CG_BUILD_HDF5 and also the BUILD_PARALLEL and CG_BUILD_PARALLEL.  The ""non CG_"" versions are set as compile time defines and their values cannot be queried after the library has been installed to determine their values -- the value is only available at build time.
The CG_BUILD_* versions do mirror their values, so they can be queried; however, there can be other values inside an include file that are inside if blocks which use the ""non CG_"" versions.  For example, it is not possible to determine whether an installed CGNS library had the HDF5_HAVE_COLL_METADATA define enabled at build time.  Since the absence/presence of this define can have an effect on parallel scalability, it would be nice to be able to determine whether it was set at build time.
While looking at making this setting visible, I stumbled upon the CG_BUILD_* and BUILD_* similarities and it took awhile to figure out where the various setting were and why they were different.  In an effort to perhaps simplify things and also make the HDF5_HAVE_COLL_METADATA visible after installation, I created this PR.
I think it captures everything and gives the same build as prior to the change, but I don't build Fortran, so the change in the fortran file is just a guess.
I'm not real invested in this PR, so if it causes more issues than it solves, i am fine with rejecting it.  My main issue it that it would be nice to be able to determine the setting of the collective metadata define in a library I am linking to.","The code contains a couple similar defines: BUILD_HDF5 and CG_BUILD_HDF5 and also the BUILD_PARALLEL and CG_BUILD_PARALLEL.  The ""non CG_"" versions are set as compile time defines and their values cannot be queried after the library has been installed to determine their values -- the value is only available at build time.
The CG_BUILD_* versions do mirror their values, so they can be queried; however, there can be other values inside an include file that are inside if blocks which use the ""non CG_"" versions.  For example, it is not possible to determine whether an installed CGNS library had the HDF5_HAVE_COLL_METADATA define enabled at build time.  Since the absence/presence of this define can have an effect on parallel scalability, it would be nice to be able to determine whether it was set at build time.
While looking at making this setting visible, I stumbled upon the CG_BUILD_* and BUILD_* similarities and it took awhile to figure out where the various setting were and why they were different.  In an effort to perhaps simplify things and also make the HDF5_HAVE_COLL_METADATA visible after installation, I created this PR.
I think it captures everything and gives the same build as prior to the change, but I don't build Fortran, so the change in the fortran file is just a guess.
I'm not real invested in this PR, so if it causes more issues than it solves, i am fine with rejecting it.  My main issue it that it would be nice to be able to determine the setting of the collective metadata define in a library I am linking to.",True,{'THUMBS_UP': ['https://github.com/MicK7']}
CGNS/CGNS,https://github.com/CGNS/CGNS,124,2019-03-06T18:50:55Z,2019-03-11T19:06:09Z,2019-03-11T19:07:29Z,MERGED,True,100,109,13,https://github.com/gsjaardema,Unify similar defines,1,[],https://github.com/CGNS/CGNS/pull/124,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/124#issuecomment-470274876,"The code contains a couple similar defines: BUILD_HDF5 and CG_BUILD_HDF5 and also the BUILD_PARALLEL and CG_BUILD_PARALLEL.  The ""non CG_"" versions are set as compile time defines and their values cannot be queried after the library has been installed to determine their values -- the value is only available at build time.
The CG_BUILD_* versions do mirror their values, so they can be queried; however, there can be other values inside an include file that are inside if blocks which use the ""non CG_"" versions.  For example, it is not possible to determine whether an installed CGNS library had the HDF5_HAVE_COLL_METADATA define enabled at build time.  Since the absence/presence of this define can have an effect on parallel scalability, it would be nice to be able to determine whether it was set at build time.
While looking at making this setting visible, I stumbled upon the CG_BUILD_* and BUILD_* similarities and it took awhile to figure out where the various setting were and why they were different.  In an effort to perhaps simplify things and also make the HDF5_HAVE_COLL_METADATA visible after installation, I created this PR.
I think it captures everything and gives the same build as prior to the change, but I don't build Fortran, so the change in the fortran file is just a guess.
I'm not real invested in this PR, so if it causes more issues than it solves, i am fine with rejecting it.  My main issue it that it would be nice to be able to determine the setting of the collective metadata define in a library I am linking to.",I stumbled upon the same issue with CG_BUILD_HDF5 while linking inside ParaView.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,124,2019-03-06T18:50:55Z,2019-03-11T19:06:09Z,2019-03-11T19:07:29Z,MERGED,True,100,109,13,https://github.com/gsjaardema,Unify similar defines,1,[],https://github.com/CGNS/CGNS/pull/124,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/124#issuecomment-470664622,"The code contains a couple similar defines: BUILD_HDF5 and CG_BUILD_HDF5 and also the BUILD_PARALLEL and CG_BUILD_PARALLEL.  The ""non CG_"" versions are set as compile time defines and their values cannot be queried after the library has been installed to determine their values -- the value is only available at build time.
The CG_BUILD_* versions do mirror their values, so they can be queried; however, there can be other values inside an include file that are inside if blocks which use the ""non CG_"" versions.  For example, it is not possible to determine whether an installed CGNS library had the HDF5_HAVE_COLL_METADATA define enabled at build time.  Since the absence/presence of this define can have an effect on parallel scalability, it would be nice to be able to determine whether it was set at build time.
While looking at making this setting visible, I stumbled upon the CG_BUILD_* and BUILD_* similarities and it took awhile to figure out where the various setting were and why they were different.  In an effort to perhaps simplify things and also make the HDF5_HAVE_COLL_METADATA visible after installation, I created this PR.
I think it captures everything and gives the same build as prior to the change, but I don't build Fortran, so the change in the fortran file is just a guess.
I'm not real invested in this PR, so if it causes more issues than it solves, i am fine with rejecting it.  My main issue it that it would be nice to be able to determine the setting of the collective metadata define in a library I am linking to.","I don't see anything wrong with the PR, looks like a good change.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,125,2019-03-07T17:47:50Z,2019-03-11T19:06:32Z,2019-03-11T19:07:11Z,MERGED,True,4,4,1,https://github.com/gsjaardema,Fix bad assert,1,[],https://github.com/CGNS/CGNS/pull/125,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/125,Assert statement was assigning instead of checking for equality.,Assert statement was assigning instead of checking for equality.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,125,2019-03-07T17:47:50Z,2019-03-11T19:06:32Z,2019-03-11T19:07:11Z,MERGED,True,4,4,1,https://github.com/gsjaardema,Fix bad assert,1,[],https://github.com/CGNS/CGNS/pull/125,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/125#issuecomment-470662185,Assert statement was assigning instead of checking for equality.,"Are you addressing Coverity issues? If so, then you can work with the coverity_scan branch (you can push to it). We can then merge those fixes to develop in a single PR. I synced the branch with develop this morning (which triggered a new scan). Or you can do a PR into coverity_scan instead of develop.
BTW,  CGNS-76 Address ""high"" level issues listed by Coverity, is the JIRA in case you want to reference it in your check-ins.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,125,2019-03-07T17:47:50Z,2019-03-11T19:06:32Z,2019-03-11T19:07:11Z,MERGED,True,4,4,1,https://github.com/gsjaardema,Fix bad assert,1,[],https://github.com/CGNS/CGNS/pull/125,https://github.com/gsjaardema,3,https://github.com/CGNS/CGNS/pull/125#issuecomment-470721726,Assert statement was assigning instead of checking for equality.,"OK. Sounds good.  I had some time during a compile and it looked like an easy fix, but will do those on the branch in the future.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,126,2019-03-13T17:40:36Z,2019-03-13T18:07:09Z,2019-03-13T18:07:09Z,MERGED,True,13,17,4,https://github.com/brtnfld,CGNS-152,3,[],https://github.com/CGNS/CGNS/pull/126,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/126,"CGNS-152: Switch to using H5Oget_info2
removed unused call to H5Oget_info, all the other calls to H5Oget_info are not used in production.
misc. warning clean-up.","CGNS-152: Switch to using H5Oget_info2
removed unused call to H5Oget_info, all the other calls to H5Oget_info are not used in production.
misc. warning clean-up.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,127,2019-03-15T09:23:18Z,2019-03-18T14:53:52Z,2019-03-18T14:53:52Z,MERGED,True,9,1,1,https://github.com/jeorsch,Fix global-buffer-overflow in ADFI_string_2_C_string.,2,[],https://github.com/CGNS/CGNS/pull/127,https://github.com/jeorsch,1,https://github.com/CGNS/CGNS/pull/127,"Add a search loop for an early NULL termination of the string passed to ADFI_string_2_C_string in order to prevent global-buffer-overflow when string literals are given as a parameter.
Fixes issue CGNS-159.","Add a search loop for an early NULL termination of the string passed to ADFI_string_2_C_string in order to prevent global-buffer-overflow when string literals are given as a parameter.
Fixes issue CGNS-159.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,128,2019-03-15T12:06:42Z,2019-03-15T14:26:41Z,2019-03-15T14:26:41Z,MERGED,True,2,1,1,https://github.com/febay,Fix heap buffer overflow in cgi_read_ptset,1,[],https://github.com/CGNS/CGNS/pull/128,https://github.com/febay,1,https://github.com/CGNS/CGNS/pull/128,"In cgi_read_ptset there is made a difference between point set of list and range type.
The 'CellListDonor' type was missing in the list of list types and this led to a heap buffer overflow.
Added 'CellListDonor' type to list of list types.
Fixes issue CGNS-158","In cgi_read_ptset there is made a difference between point set of list and range type.
The 'CellListDonor' type was missing in the list of list types and this led to a heap buffer overflow.
Added 'CellListDonor' type to list of list types.
Fixes issue CGNS-158",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,129,2019-04-19T14:05:26Z,2019-04-25T22:13:35Z,2019-04-25T22:13:35Z,MERGED,True,4,4,2,https://github.com/NovA80,Fix cgnstools install,1,[],https://github.com/CGNS/CGNS/pull/129,https://github.com/NovA80,1,https://github.com/CGNS/CGNS/pull/129,"If the CGNS is configured with configure --prefix=somedir then make install fails with the error

----- cgnsview -----
Making directory /share
mkdir: cannot create directory ‘/share’: Permission denied

This is because the path variable remains unexpanded in src/cgnstools/make.defs: LIB_INSTALL_DIR = ${prefix}/share
This PR fixes the issue.","If the CGNS is configured with configure --prefix=somedir then make install fails with the error

----- cgnsview -----
Making directory /share
mkdir: cannot create directory ‘/share’: Permission denied

This is because the path variable remains unexpanded in src/cgnstools/make.defs: LIB_INSTALL_DIR = ${prefix}/share
This PR fixes the issue.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,130,2019-05-13T15:48:20Z,2019-05-15T13:47:47Z,2019-05-15T13:48:00Z,MERGED,True,241,60,13,https://github.com/brtnfld,Compact storage rev,19,[],https://github.com/CGNS/CGNS/pull/130,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/130,"Added HDF5 compact storage to CGNS to improve parallel IO performance. The default storage is compact storage unless the dataset does not meet the < 64KiB limit. Also, if the dataset can have partial IO, then it is contiguous storage. Also, removed 'tab' spacing. Everything should be transparent to the application code.","Added HDF5 compact storage to CGNS to improve parallel IO performance. The default storage is compact storage unless the dataset does not meet the < 64KiB limit. Also, if the dataset can have partial IO, then it is contiguous storage. Also, removed 'tab' spacing. Everything should be transparent to the application code.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,130,2019-05-13T15:48:20Z,2019-05-15T13:47:47Z,2019-05-15T13:48:00Z,MERGED,True,241,60,13,https://github.com/brtnfld,Compact storage rev,19,[],https://github.com/CGNS/CGNS/pull/130,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/130#issuecomment-492129350,"Added HDF5 compact storage to CGNS to improve parallel IO performance. The default storage is compact storage unless the dataset does not meet the < 64KiB limit. Also, if the dataset can have partial IO, then it is contiguous storage. Also, removed 'tab' spacing. Everything should be transparent to the application code.","Looks good.
Is a user documentation about configuration flags planned ?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,130,2019-05-13T15:48:20Z,2019-05-15T13:47:47Z,2019-05-15T13:48:00Z,MERGED,True,241,60,13,https://github.com/brtnfld,Compact storage rev,19,[],https://github.com/CGNS/CGNS/pull/130,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/130#issuecomment-492253540,"Added HDF5 compact storage to CGNS to improve parallel IO performance. The default storage is compact storage unless the dataset does not meet the < 64KiB limit. Also, if the dataset can have partial IO, then it is contiguous storage. Also, removed 'tab' spacing. Everything should be transparent to the application code.",I did not introduce a new configuration option. What are you referring too?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,130,2019-05-13T15:48:20Z,2019-05-15T13:47:47Z,2019-05-15T13:48:00Z,MERGED,True,241,60,13,https://github.com/brtnfld,Compact storage rev,19,[],https://github.com/CGNS/CGNS/pull/130,https://github.com/MicK7,4,https://github.com/CGNS/CGNS/pull/130#issuecomment-492361110,"Added HDF5 compact storage to CGNS to improve parallel IO performance. The default storage is compact storage unless the dataset does not meet the < 64KiB limit. Also, if the dataset can have partial IO, then it is contiguous storage. Also, removed 'tab' spacing. Everything should be transparent to the application code.","Sorry. I thought that HDF5_HAVE_FILE_SPACE_STRATEGY would have been configurable by the user. But It seems it is automatically set depending on HDF5 configuration and it is way better like this.
Thanks for the good job.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,131,2019-05-24T15:09:26Z,2019-05-24T15:21:19Z,2019-05-24T15:21:19Z,MERGED,True,5,2,1,https://github.com/brtnfld,FIX: CGNS-118,1,[],https://github.com/CGNS/CGNS/pull/131,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/131,Problems linking Fortran code with 3.3.1 shared library (w/ CMake),Problems linking Fortran code with 3.3.1 shared library (w/ CMake),True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,132,2019-05-30T20:37:26Z,2019-05-30T21:35:12Z,2019-05-30T21:35:12Z,MERGED,True,3,1,1,https://github.com/brtnfld,Updated to testing on newer ubuntu ,3,[],https://github.com/CGNS/CGNS/pull/132,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/132,Also installing mpich as prep for parallel testing.,Also installing mpich as prep for parallel testing.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,133,2019-06-03T16:05:39Z,2019-06-03T20:03:32Z,2019-06-03T20:03:32Z,CLOSED,False,33,7,3,https://github.com/brtnfld,enable parallel testing with travis CI,10,[],https://github.com/CGNS/CGNS/pull/133,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/133,"CGNS-134
Add parallel testing to CI for linux","CGNS-134
Add parallel testing to CI for linux",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,134,2019-06-03T20:04:26Z,2019-06-04T21:25:01Z,2019-06-04T21:25:01Z,CLOSED,False,33,7,3,https://github.com/brtnfld,Cgns 134,10,[],https://github.com/CGNS/CGNS/pull/134,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/134,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,135,2019-06-04T21:26:02Z,2019-06-11T17:12:12Z,2019-06-11T17:12:19Z,CLOSED,False,22,8,4,https://github.com/brtnfld,Cgns 134,30,[],https://github.com/CGNS/CGNS/pull/135,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/135,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,136,2019-06-11T17:11:02Z,2019-06-11T17:11:53Z,2019-06-11T17:11:53Z,MERGED,True,22,8,4,https://github.com/brtnfld,CGNS-134 (#1),1,[],https://github.com/CGNS/CGNS/pull/136,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/136,CGNS-134  --- Add compilation and parallel testing to CI for Linux,CGNS-134  --- Add compilation and parallel testing to CI for Linux,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,137,2019-06-17T13:17:32Z,2019-06-18T13:57:53Z,2019-10-18T06:18:11Z,MERGED,True,3,7,1,https://github.com/MicK7,Do not read elements when computing partial data size,1,[],https://github.com/CGNS/CGNS/pull/137,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/137,To reduce memory usage of cg_ElementPartialSize only load ElementStartOffset array and compute ElementDataSize from it,To reduce memory usage of cg_ElementPartialSize only load ElementStartOffset array and compute ElementDataSize from it,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,137,2019-06-17T13:17:32Z,2019-06-18T13:57:53Z,2019-10-18T06:18:11Z,MERGED,True,3,7,1,https://github.com/MicK7,Do not read elements when computing partial data size,1,[],https://github.com/CGNS/CGNS/pull/137,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/137#issuecomment-502686078,To reduce memory usage of cg_ElementPartialSize only load ElementStartOffset array and compute ElementDataSize from it,This is a simple fix to mitigate an excessive memory usage. May be it can be improved by doing also a partial load of ElementStartOffset array,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,138,2019-07-18T14:57:07Z,2019-07-29T15:15:32Z,2019-07-30T06:55:14Z,MERGED,True,2,6,1,https://github.com/mennodeij,Fix HDF5 feature detection,1,[],https://github.com/CGNS/CGNS/pull/138,https://github.com/mennodeij,1,https://github.com/CGNS/CGNS/pull/138,"I have a build of HDF5 1.10.5 with HDF5_ENABLE_PARALLEL=ON
When I then request CGNS to use HDF5 with parallel support using the following cmake configuration
-DCGNS_ENABLE_PARALLEL=ON
-DCGNS_ENABLE_HDF5=ON
-DHDF5_NEED_MPI=ON
-DHDF5_DIR=<path-to-hdf5-install>/share/cmake/hdf5

, I see that the feature detection of the HDF5 features Collective_metadata and H5Pset_file_space_strategy are both failing, whereas these are available when using ./configure against the same build of HDF5.
To correct this the attached changes to the CMakeLists.txt file were made. With these changes, the features are correctly detected.","I have a build of HDF5 1.10.5 with HDF5_ENABLE_PARALLEL=ON
When I then request CGNS to use HDF5 with parallel support using the following cmake configuration
-DCGNS_ENABLE_PARALLEL=ON
-DCGNS_ENABLE_HDF5=ON
-DHDF5_NEED_MPI=ON
-DHDF5_DIR=<path-to-hdf5-install>/share/cmake/hdf5

, I see that the feature detection of the HDF5 features Collective_metadata and H5Pset_file_space_strategy are both failing, whereas these are available when using ./configure against the same build of HDF5.
To correct this the attached changes to the CMakeLists.txt file were made. With these changes, the features are correctly detected.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,138,2019-07-18T14:57:07Z,2019-07-29T15:15:32Z,2019-07-30T06:55:14Z,MERGED,True,2,6,1,https://github.com/mennodeij,Fix HDF5 feature detection,1,[],https://github.com/CGNS/CGNS/pull/138,https://github.com/mennodeij,2,https://github.com/CGNS/CGNS/pull/138#issuecomment-516289966,"I have a build of HDF5 1.10.5 with HDF5_ENABLE_PARALLEL=ON
When I then request CGNS to use HDF5 with parallel support using the following cmake configuration
-DCGNS_ENABLE_PARALLEL=ON
-DCGNS_ENABLE_HDF5=ON
-DHDF5_NEED_MPI=ON
-DHDF5_DIR=<path-to-hdf5-install>/share/cmake/hdf5

, I see that the feature detection of the HDF5 features Collective_metadata and H5Pset_file_space_strategy are both failing, whereas these are available when using ./configure against the same build of HDF5.
To correct this the attached changes to the CMakeLists.txt file were made. With these changes, the features are correctly detected.",Thanks!,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,139,2019-08-15T18:33:35Z,2019-10-23T14:20:33Z,2019-10-23T14:20:38Z,MERGED,True,22,14,3,https://github.com/gsjaardema,Make static mpi-related variables consistent,8,['Improvement'],https://github.com/CGNS/CGNS/pull/139,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/139,"Currently, it is possible for the pcg_mpi_comm to be inconsistent with pcg_mpi_comm_rank and pcg_mpi_comm_size.
The latter two values are set during a call to cgp_open and the first is set during a call to cgp_mpi_comm.  If the user is using both parallel and serial file access during the same run, they may call cgp_mpi_comm multiple times and the values of pcg_mpi_comm_rank and pcg_mpi_comm_size will only be consistent with the communicator in pcg_mpi_comm if the user calls cgp_open.
With the changes here, all three values (and the ParallelMPICommunicator) will always be consistent.  Also, if the user does not call cgp_mpi_comm() before calling cgp_open(), this will be detected and everything will be consistent.","Currently, it is possible for the pcg_mpi_comm to be inconsistent with pcg_mpi_comm_rank and pcg_mpi_comm_size.
The latter two values are set during a call to cgp_open and the first is set during a call to cgp_mpi_comm.  If the user is using both parallel and serial file access during the same run, they may call cgp_mpi_comm multiple times and the values of pcg_mpi_comm_rank and pcg_mpi_comm_size will only be consistent with the communicator in pcg_mpi_comm if the user calls cgp_open.
With the changes here, all three values (and the ParallelMPICommunicator) will always be consistent.  Also, if the user does not call cgp_mpi_comm() before calling cgp_open(), this will be detected and everything will be consistent.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,139,2019-08-15T18:33:35Z,2019-10-23T14:20:33Z,2019-10-23T14:20:38Z,MERGED,True,22,14,3,https://github.com/gsjaardema,Make static mpi-related variables consistent,8,['Improvement'],https://github.com/CGNS/CGNS/pull/139,https://github.com/gsjaardema,2,https://github.com/CGNS/CGNS/pull/139#issuecomment-521749915,"Currently, it is possible for the pcg_mpi_comm to be inconsistent with pcg_mpi_comm_rank and pcg_mpi_comm_size.
The latter two values are set during a call to cgp_open and the first is set during a call to cgp_mpi_comm.  If the user is using both parallel and serial file access during the same run, they may call cgp_mpi_comm multiple times and the values of pcg_mpi_comm_rank and pcg_mpi_comm_size will only be consistent with the communicator in pcg_mpi_comm if the user calls cgp_open.
With the changes here, all three values (and the ParallelMPICommunicator) will always be consistent.  Also, if the user does not call cgp_mpi_comm() before calling cgp_open(), this will be detected and everything will be consistent.",This PR also checks that mpi has been initialized in cgp_mpi_comm() and returns the correct error code if it hasn't been initialized.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,139,2019-08-15T18:33:35Z,2019-10-23T14:20:33Z,2019-10-23T14:20:38Z,MERGED,True,22,14,3,https://github.com/gsjaardema,Make static mpi-related variables consistent,8,['Improvement'],https://github.com/CGNS/CGNS/pull/139,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/139#issuecomment-521795613,"Currently, it is possible for the pcg_mpi_comm to be inconsistent with pcg_mpi_comm_rank and pcg_mpi_comm_size.
The latter two values are set during a call to cgp_open and the first is set during a call to cgp_mpi_comm.  If the user is using both parallel and serial file access during the same run, they may call cgp_mpi_comm multiple times and the values of pcg_mpi_comm_rank and pcg_mpi_comm_size will only be consistent with the communicator in pcg_mpi_comm if the user calls cgp_open.
With the changes here, all three values (and the ParallelMPICommunicator) will always be consistent.  Also, if the user does not call cgp_mpi_comm() before calling cgp_open(), this will be detected and everything will be consistent.","Is this to address the issue of creating a file in serial, opening in parallel, closing, and opening in serial? I'm assuming not since it does not pass.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,139,2019-08-15T18:33:35Z,2019-10-23T14:20:33Z,2019-10-23T14:20:38Z,MERGED,True,22,14,3,https://github.com/gsjaardema,Make static mpi-related variables consistent,8,['Improvement'],https://github.com/CGNS/CGNS/pull/139,https://github.com/brtnfld,4,https://github.com/CGNS/CGNS/pull/139#issuecomment-521804338,"Currently, it is possible for the pcg_mpi_comm to be inconsistent with pcg_mpi_comm_rank and pcg_mpi_comm_size.
The latter two values are set during a call to cgp_open and the first is set during a call to cgp_mpi_comm.  If the user is using both parallel and serial file access during the same run, they may call cgp_mpi_comm multiple times and the values of pcg_mpi_comm_rank and pcg_mpi_comm_size will only be consistent with the communicator in pcg_mpi_comm if the user calls cgp_open.
With the changes here, all three values (and the ParallelMPICommunicator) will always be consistent.  Also, if the user does not call cgp_mpi_comm() before calling cgp_open(), this will be detected and everything will be consistent.","I added more tests to ptest/open_close.c, your changes fixes the case of opening the file with COMM_SELF, which fails in 3.4.0. See test.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,139,2019-08-15T18:33:35Z,2019-10-23T14:20:33Z,2019-10-23T14:20:38Z,MERGED,True,22,14,3,https://github.com/gsjaardema,Make static mpi-related variables consistent,8,['Improvement'],https://github.com/CGNS/CGNS/pull/139,https://github.com/gsjaardema,5,https://github.com/CGNS/CGNS/pull/139#issuecomment-521809844,"Currently, it is possible for the pcg_mpi_comm to be inconsistent with pcg_mpi_comm_rank and pcg_mpi_comm_size.
The latter two values are set during a call to cgp_open and the first is set during a call to cgp_mpi_comm.  If the user is using both parallel and serial file access during the same run, they may call cgp_mpi_comm multiple times and the values of pcg_mpi_comm_rank and pcg_mpi_comm_size will only be consistent with the communicator in pcg_mpi_comm if the user calls cgp_open.
With the changes here, all three values (and the ParallelMPICommunicator) will always be consistent.  Also, if the user does not call cgp_mpi_comm() before calling cgp_open(), this will be detected and everything will be consistent.",@brtnfld I am able to open a file in parallel for read and serial for write  simultaneously (and vice-versa) with or without this change using the MPI_COMM_SELF suggestions...  Not sure why it isn't working for your use case.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,139,2019-08-15T18:33:35Z,2019-10-23T14:20:33Z,2019-10-23T14:20:38Z,MERGED,True,22,14,3,https://github.com/gsjaardema,Make static mpi-related variables consistent,8,['Improvement'],https://github.com/CGNS/CGNS/pull/139,https://github.com/brtnfld,6,https://github.com/CGNS/CGNS/pull/139#issuecomment-521818383,"Currently, it is possible for the pcg_mpi_comm to be inconsistent with pcg_mpi_comm_rank and pcg_mpi_comm_size.
The latter two values are set during a call to cgp_open and the first is set during a call to cgp_mpi_comm.  If the user is using both parallel and serial file access during the same run, they may call cgp_mpi_comm multiple times and the values of pcg_mpi_comm_rank and pcg_mpi_comm_size will only be consistent with the communicator in pcg_mpi_comm if the user calls cgp_open.
With the changes here, all three values (and the ParallelMPICommunicator) will always be consistent.  Also, if the user does not call cgp_mpi_comm() before calling cgp_open(), this will be detected and everything will be consistent.",Works after syncing my fork.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,140,2019-08-15T20:53:09Z,2019-08-27T20:56:28Z,2019-10-22T22:27:24Z,MERGED,True,40,3,2,https://github.com/gsjaardema,Use correct MPI communicator,4,[],https://github.com/CGNS/CGNS/pull/140,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/140,"The MPI_Allreduce call in cgp_parent_data_write() is using MPI_COMM_WORLD  It would be more correct to use the communicator stored in cgp_mpi_comm which is set by the client. If the client is not using MPI_COMM_WORLD and calls this function, it will hang since not all ranks will be participating in the call.
There is another use of MPI_COMM_WORLD in cgp_error_exit(), but I'm not sure if there is a use case for keeping that as is (I seem to remember some discussion a year or so ago)","The MPI_Allreduce call in cgp_parent_data_write() is using MPI_COMM_WORLD  It would be more correct to use the communicator stored in cgp_mpi_comm which is set by the client. If the client is not using MPI_COMM_WORLD and calls this function, it will hang since not all ranks will be participating in the call.
There is another use of MPI_COMM_WORLD in cgp_error_exit(), but I'm not sure if there is a use case for keeping that as is (I seem to remember some discussion a year or so ago)",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,140,2019-08-15T20:53:09Z,2019-08-27T20:56:28Z,2019-10-22T22:27:24Z,MERGED,True,40,3,2,https://github.com/gsjaardema,Use correct MPI communicator,4,[],https://github.com/CGNS/CGNS/pull/140,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/140#issuecomment-523524416,"The MPI_Allreduce call in cgp_parent_data_write() is using MPI_COMM_WORLD  It would be more correct to use the communicator stored in cgp_mpi_comm which is set by the client. If the client is not using MPI_COMM_WORLD and calls this function, it will hang since not all ranks will be participating in the call.
There is another use of MPI_COMM_WORLD in cgp_error_exit(), but I'm not sure if there is a use case for keeping that as is (I seem to remember some discussion a year or so ago)","The parallel test fails:
test_unstruc_quad ...  *** FAILED ***
I checked that it passes in develop",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,141,2019-08-20T19:38:07Z,2019-10-16T15:29:00Z,2019-10-16T15:29:21Z,MERGED,True,485,3,9,https://github.com/MicK7,CPEX 0042,8,[],https://github.com/CGNS/CGNS/pull/141,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/141,"This branch implements the CPEX0042.
The MLL function are added without modification to existing MLL structures.
It means that the bounding box is only read or written when requested thus not impacting performance of existing code.","This branch implements the CPEX0042.
The MLL function are added without modification to existing MLL structures.
It means that the bounding box is only read or written when requested thus not impacting performance of existing code.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,141,2019-08-20T19:38:07Z,2019-10-16T15:29:00Z,2019-10-16T15:29:21Z,MERGED,True,485,3,9,https://github.com/MicK7,CPEX 0042,8,[],https://github.com/CGNS/CGNS/pull/141,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/141#issuecomment-536609683,"This branch implements the CPEX0042.
The MLL function are added without modification to existing MLL structures.
It means that the bounding box is only read or written when requested thus not impacting performance of existing code.","Sorry, I'll get to reviewing it this week.",True,{'THUMBS_UP': ['https://github.com/MicK7']}
CGNS/CGNS,https://github.com/CGNS/CGNS,141,2019-08-20T19:38:07Z,2019-10-16T15:29:00Z,2019-10-16T15:29:21Z,MERGED,True,485,3,9,https://github.com/MicK7,CPEX 0042,8,[],https://github.com/CGNS/CGNS/pull/141,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/141#issuecomment-542399626,"This branch implements the CPEX0042.
The MLL function are added without modification to existing MLL structures.
It means that the bounding box is only read or written when requested thus not impacting performance of existing code.","Looks like the tests now pass, does the Fortran pass for you now? To me, it looks ready to merge. Do you want me to wait for another reviewer?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,141,2019-08-20T19:38:07Z,2019-10-16T15:29:00Z,2019-10-16T15:29:21Z,MERGED,True,485,3,9,https://github.com/MicK7,CPEX 0042,8,[],https://github.com/CGNS/CGNS/pull/141,https://github.com/MicK7,4,https://github.com/CGNS/CGNS/pull/141#issuecomment-542732888,"This branch implements the CPEX0042.
The MLL function are added without modification to existing MLL structures.
It means that the bounding box is only read or written when requested thus not impacting performance of existing code.","Everything pass for me. I just met @poinot even if he has not validated on github, he told me that it is ok for him. Thus you can merge without waiting for another reviewer.
Thanks",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,141,2019-08-20T19:38:07Z,2019-10-16T15:29:00Z,2019-10-16T15:29:21Z,MERGED,True,485,3,9,https://github.com/MicK7,CPEX 0042,8,[],https://github.com/CGNS/CGNS/pull/141,https://github.com/brtnfld,5,https://github.com/CGNS/CGNS/pull/141#issuecomment-542741716,"This branch implements the CPEX0042.
The MLL function are added without modification to existing MLL structures.
It means that the bounding box is only read or written when requested thus not impacting performance of existing code.","Do you mind if I squash, or do you want to preserve the commit history as is?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,141,2019-08-20T19:38:07Z,2019-10-16T15:29:00Z,2019-10-16T15:29:21Z,MERGED,True,485,3,9,https://github.com/MicK7,CPEX 0042,8,[],https://github.com/CGNS/CGNS/pull/141,https://github.com/MicK7,6,https://github.com/CGNS/CGNS/pull/141#issuecomment-542749459,"This branch implements the CPEX0042.
The MLL function are added without modification to existing MLL structures.
It means that the bounding box is only read or written when requested thus not impacting performance of existing code.",I don't mind if you squash,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,142,2019-09-18T15:16:22Z,2019-09-30T15:14:41Z,2019-09-30T23:01:30Z,MERGED,True,173,173,89,https://github.com/gsjaardema,Spelling fixes,2,[],https://github.com/CGNS/CGNS/pull/142,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/142,Fix spelling in source and documentation,Fix spelling in source and documentation,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,143,2019-10-02T15:25:03Z,2019-10-02T15:29:46Z,2019-10-02T15:33:49Z,MERGED,True,2,1,1,https://github.com/gsjaardema,Fix incorrect variable type,1,[],https://github.com/CGNS/CGNS/pull/143,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/143,"Minor fix; only applicable if more than 2.1 billion intervals in a range, but does eliminate a compiler warning -- npt should be cgsize_t","Minor fix; only applicable if more than 2.1 billion intervals in a range, but does eliminate a compiler warning -- npt should be cgsize_t",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,144,2019-10-02T15:33:03Z,2019-10-02T19:02:19Z,2019-10-02T19:02:19Z,MERGED,True,4,3,1,https://github.com/gsjaardema,Fix compiler warnings about possible loss of data,1,[],https://github.com/CGNS/CGNS/pull/144,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/144,A few variables defined as int should be ssize_t to avoid potential loss of data on large models.,A few variables defined as int should be ssize_t to avoid potential loss of data on large models.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,145,2019-10-12T18:49:47Z,2019-10-21T02:23:23Z,2019-10-21T02:23:38Z,MERGED,True,2480,434,16,https://github.com/MicK7,Family hierarchy CPEX0043,23,[],https://github.com/CGNS/CGNS/pull/145,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/145,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,145,2019-10-12T18:49:47Z,2019-10-21T02:23:23Z,2019-10-21T02:23:38Z,MERGED,True,2480,434,16,https://github.com/MicK7,Family hierarchy CPEX0043,23,[],https://github.com/CGNS/CGNS/pull/145,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/145#issuecomment-541767302,,@oma-numeca can you check that the final code agree with your intent ?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,145,2019-10-12T18:49:47Z,2019-10-21T02:23:23Z,2019-10-21T02:23:38Z,MERGED,True,2480,434,16,https://github.com/MicK7,Family hierarchy CPEX0043,23,[],https://github.com/CGNS/CGNS/pull/145,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/145#issuecomment-541790754,,"@brtnfld can this topic be merged before you introduce the fix for ""cgio_read_*_data_type""  ?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,145,2019-10-12T18:49:47Z,2019-10-21T02:23:23Z,2019-10-21T02:23:38Z,MERGED,True,2480,434,16,https://github.com/MicK7,Family hierarchy CPEX0043,23,[],https://github.com/CGNS/CGNS/pull/145,https://github.com/brtnfld,4,https://github.com/CGNS/CGNS/pull/145#issuecomment-541949675,,"I don't see any overlapping changes, so the merges should be independent.
I checked, no merging conflicts and you did not modify/add new the cgio_read* APIs. It should be fine with my changes.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,145,2019-10-12T18:49:47Z,2019-10-21T02:23:23Z,2019-10-21T02:23:38Z,MERGED,True,2480,434,16,https://github.com/MicK7,Family hierarchy CPEX0043,23,[],https://github.com/CGNS/CGNS/pull/145,https://github.com/MicK7,5,https://github.com/CGNS/CGNS/pull/145#issuecomment-542058049,,"@poinot I replaced 33 by CGIO_MAX_NAME_LENGTH+1 . It does the job properly.
@brtnfld Thanks for pointing out the missing fortran wrapping tests.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,145,2019-10-12T18:49:47Z,2019-10-21T02:23:23Z,2019-10-21T02:23:38Z,MERGED,True,2480,434,16,https://github.com/MicK7,Family hierarchy CPEX0043,23,[],https://github.com/CGNS/CGNS/pull/145,https://github.com/MicK7,6,https://github.com/CGNS/CGNS/pull/145#issuecomment-542733821,,The code is ready for merging,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,145,2019-10-12T18:49:47Z,2019-10-21T02:23:23Z,2019-10-21T02:23:38Z,MERGED,True,2480,434,16,https://github.com/MicK7,Family hierarchy CPEX0043,23,[],https://github.com/CGNS/CGNS/pull/145,https://github.com/brtnfld,7,https://github.com/CGNS/CGNS/pull/145#issuecomment-542743905,,"Do you mind if I squash, or do you want to preserve the commit history as is?
I will merge CPEX00043 after the complete suite of regression testing occurs for 00042 (which happens over 2 days).
Thanks for all your hard work.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,145,2019-10-12T18:49:47Z,2019-10-21T02:23:23Z,2019-10-21T02:23:38Z,MERGED,True,2480,434,16,https://github.com/MicK7,Family hierarchy CPEX0043,23,[],https://github.com/CGNS/CGNS/pull/145,https://github.com/MicK7,8,https://github.com/CGNS/CGNS/pull/145#issuecomment-542762910,,"I don't mind the squashing.
Concerning the testing, do you think it would be of interest to setup codacy on this github repository ( https://www.codacy.com or https://app.codacy.com/ ). It is free for public repository if only the maintainer account is linked (As far as I have seen other project use it on github). This would help in validating code quality before merging a branch and as well as detecting bad practice in the CGNS code base (duplication ...).",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,145,2019-10-12T18:49:47Z,2019-10-21T02:23:23Z,2019-10-21T02:23:38Z,MERGED,True,2480,434,16,https://github.com/MicK7,Family hierarchy CPEX0043,23,[],https://github.com/CGNS/CGNS/pull/145,https://github.com/oma-numeca,9,https://github.com/CGNS/CGNS/pull/145#issuecomment-543132328,,"@oma-numeca can you check that the final code agree with your intent ?

Hi! No remarks on my side about the changes, all necessary features are there for our purposes.",True,{'THUMBS_UP': ['https://github.com/MicK7']}
CGNS/CGNS,https://github.com/CGNS/CGNS,145,2019-10-12T18:49:47Z,2019-10-21T02:23:23Z,2019-10-21T02:23:38Z,MERGED,True,2480,434,16,https://github.com/MicK7,Family hierarchy CPEX0043,23,[],https://github.com/CGNS/CGNS/pull/145,https://github.com/brtnfld,10,https://github.com/CGNS/CGNS/pull/145#issuecomment-543310588,,I don't have any objections to using codacy.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,146,2019-10-16T16:22:34Z,2019-10-17T20:22:45Z,2019-10-18T06:18:01Z,MERGED,True,8,2,2,https://github.com/MicK7,remove warning from -Wunused-result,1,[],https://github.com/CGNS/CGNS/pull/146,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/146,"on travis two warnings keep appearing, this commit remove them","on travis two warnings keep appearing, this commit remove them",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,146,2019-10-16T16:22:34Z,2019-10-17T20:22:45Z,2019-10-18T06:18:01Z,MERGED,True,8,2,2,https://github.com/MicK7,remove warning from -Wunused-result,1,[],https://github.com/CGNS/CGNS/pull/146,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/146#issuecomment-542782393,"on travis two warnings keep appearing, this commit remove them",This is a small general maintenance commit,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,147,2019-10-18T08:27:07Z,2019-10-18T13:56:25Z,2019-10-19T05:54:14Z,MERGED,True,0,4,2,https://github.com/MicK7,remove useless CMake lines,1,[],https://github.com/CGNS/CGNS/pull/147,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/147,"LSEEK64 definition is already handle in the top level CMakeLists.txt file
we found this when trying to make CGNS 3.4 work with ParaView","LSEEK64 definition is already handle in the top level CMakeLists.txt file
we found this when trying to make CGNS 3.4 work with ParaView",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,148,2019-10-21T07:08:45Z,2019-10-21T14:03:20Z,2019-10-22T04:19:24Z,MERGED,True,75,44,11,https://github.com/MicK7,Coverity fix,7,[],https://github.com/CGNS/CGNS/pull/148,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/148,Some compilation warning fix and coverity related fix,Some compilation warning fix and coverity related fix,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,149,2019-10-22T19:40:23Z,2019-10-22T21:01:24Z,2019-10-25T01:41:47Z,MERGED,True,3,11,9,https://github.com/MicK7,small cmake cleaning,2,[],https://github.com/CGNS/CGNS/pull/149,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/149,remove link_directories(.),remove link_directories(.),True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,150,2019-10-24T10:07:08Z,2020-02-19T14:25:28Z,2020-02-21T05:22:38Z,MERGED,True,164,26,12,https://github.com/MicK7,coverity fixes,9,[],https://github.com/CGNS/CGNS/pull/150,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/150,"compatibility between CGIO and ADF
ADF and CGIO did not use a coherent size for DATA_TYPE leading to invalid memory access according  to coverity
cgnscheck correction
use safer functions (replace atoi by strtol)","compatibility between CGIO and ADF
ADF and CGIO did not use a coherent size for DATA_TYPE leading to invalid memory access according  to coverity
cgnscheck correction
use safer functions (replace atoi by strtol)",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,151,2019-11-07T19:30:24Z,2020-02-21T15:18:41Z,2020-02-21T15:18:41Z,CLOSED,False,1291,104,25,https://github.com/brtnfld,Corrected  use of HDF5 file and memory types,25,[],https://github.com/CGNS/CGNS/pull/151,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/151,Added tests and checking backward compatability.,Added tests and checking backward compatability.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,151,2019-11-07T19:30:24Z,2020-02-21T15:18:41Z,2020-02-21T15:18:41Z,CLOSED,False,1291,104,25,https://github.com/brtnfld,Corrected  use of HDF5 file and memory types,25,[],https://github.com/CGNS/CGNS/pull/151,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/151#issuecomment-589697596,Added tests and checking backward compatability.,Closing this and resubmitting a PR that addresses only the memory type issue,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,152,2019-11-16T14:51:38Z,2020-01-31T16:10:20Z,2020-01-31T16:11:05Z,CLOSED,False,4,4,3,https://github.com/MicK7,Update version number to 4.0,2,[],https://github.com/CGNS/CGNS/pull/152,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/152,"In order to prepare for the next release and also to solve issue talked during steering committee meeting, this merge request upgrades the CGNS major version.
The version number is set to 4.0.1 leaving space for a possible rebrand of 3.4 in 4.0.0 if necessary.
@gsjaardema @brtnfld please review","In order to prepare for the next release and also to solve issue talked during steering committee meeting, this merge request upgrades the CGNS major version.
The version number is set to 4.0.1 leaving space for a possible rebrand of 3.4 in 4.0.0 if necessary.
@gsjaardema @brtnfld please review",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,152,2019-11-16T14:51:38Z,2020-01-31T16:10:20Z,2020-01-31T16:11:05Z,CLOSED,False,4,4,3,https://github.com/MicK7,Update version number to 4.0,2,[],https://github.com/CGNS/CGNS/pull/152,https://github.com/vmoschou,2,https://github.com/CGNS/CGNS/pull/152#issuecomment-555449197,"In order to prepare for the next release and also to solve issue talked during steering committee meeting, this merge request upgrades the CGNS major version.
The version number is set to 4.0.1 leaving space for a possible rebrand of 3.4 in 4.0.0 if necessary.
@gsjaardema @brtnfld please review",We have tested the 2 commits and the problem of forward compatibility is solved.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,152,2019-11-16T14:51:38Z,2020-01-31T16:10:20Z,2020-01-31T16:11:05Z,CLOSED,False,4,4,3,https://github.com/MicK7,Update version number to 4.0,2,[],https://github.com/CGNS/CGNS/pull/152,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/152#issuecomment-580796631,"In order to prepare for the next release and also to solve issue talked during steering committee meeting, this merge request upgrades the CGNS major version.
The version number is set to 4.0.1 leaving space for a possible rebrand of 3.4 in 4.0.0 if necessary.
@gsjaardema @brtnfld please review",Please see branches 3.4.1 and 4.0.0 which addresses these changes.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,153,2019-12-18T14:09:03Z,2020-01-31T16:25:44Z,2020-01-31T16:25:44Z,MERGED,True,33,59,1,https://github.com/pvc1989,Make the README more readable.,6,[],https://github.com/CGNS/CGNS/pull/153,https://github.com/pvc1989,1,https://github.com/CGNS/CGNS/pull/153,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,153,2019-12-18T14:09:03Z,2020-01-31T16:25:44Z,2020-01-31T16:25:44Z,MERGED,True,33,59,1,https://github.com/pvc1989,Make the README more readable.,6,[],https://github.com/CGNS/CGNS/pull/153,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/153#issuecomment-569223859,,"@pvcStillInGradSchool codacy test is failing with your merge request.
Please had a small description",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,154,2020-01-22T10:55:54Z,2020-02-19T16:36:42Z,2020-02-19T16:36:42Z,CLOSED,False,3908,63,18,https://github.com/LaurentCadet,CPEX0045 High order,38,[],https://github.com/CGNS/CGNS/pull/154,https://github.com/LaurentCadet,1,https://github.com/CGNS/CGNS/pull/154,"The work related to the implementation of the CPEX045 (high order CGNS) is done.
This implementation comes with the following tests/examples :

src/tests/test_high_order.c

general MLL tests


src/ptests/para_high_order.c

example of implementation for parallel CGNS according to CPEX045


src/Test_UserGuideCode/C_code/write_grid_ho_unst.c

write an high ordered Mesh (2nd order QUAD with family and lagrange control points)


src/Test_UserGuideCode/C_code/write_flowcell_ho_unst.c

add a 3rd order solution to the mesh created by write_grid_ho_unst.c


src/Test_UserGuideCode/C_code/read_flowvert_ho_unst.c

check that the solution order is correctly written in the file



The branch has been updated wrt develop and the ctest is clear.
I am available for any questions or fixes.
Thanks for waiting,
Laurent CADET.","The work related to the implementation of the CPEX045 (high order CGNS) is done.
This implementation comes with the following tests/examples :

src/tests/test_high_order.c

general MLL tests


src/ptests/para_high_order.c

example of implementation for parallel CGNS according to CPEX045


src/Test_UserGuideCode/C_code/write_grid_ho_unst.c

write an high ordered Mesh (2nd order QUAD with family and lagrange control points)


src/Test_UserGuideCode/C_code/write_flowcell_ho_unst.c

add a 3rd order solution to the mesh created by write_grid_ho_unst.c


src/Test_UserGuideCode/C_code/read_flowvert_ho_unst.c

check that the solution order is correctly written in the file



The branch has been updated wrt develop and the ctest is clear.
I am available for any questions or fixes.
Thanks for waiting,
Laurent CADET.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,154,2020-01-22T10:55:54Z,2020-02-19T16:36:42Z,2020-02-19T16:36:42Z,CLOSED,False,3908,63,18,https://github.com/LaurentCadet,CPEX0045 High order,38,[],https://github.com/CGNS/CGNS/pull/154,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/154#issuecomment-588297328,"The work related to the implementation of the CPEX045 (high order CGNS) is done.
This implementation comes with the following tests/examples :

src/tests/test_high_order.c

general MLL tests


src/ptests/para_high_order.c

example of implementation for parallel CGNS according to CPEX045


src/Test_UserGuideCode/C_code/write_grid_ho_unst.c

write an high ordered Mesh (2nd order QUAD with family and lagrange control points)


src/Test_UserGuideCode/C_code/write_flowcell_ho_unst.c

add a 3rd order solution to the mesh created by write_grid_ho_unst.c


src/Test_UserGuideCode/C_code/read_flowvert_ho_unst.c

check that the solution order is correctly written in the file



The branch has been updated wrt develop and the ctest is clear.
I am available for any questions or fixes.
Thanks for waiting,
Laurent CADET.","It looks like we lose forward compatibility with this feature and the major version number will need to be changed. Can you please verify this is true?
For reference:
Q: What do the CGNS Version numbers mean, and does the CGNS library maintain backward/forward compatibility?
A: The CGNS versions are currently numbered as follows: ""Version x.y, Revision z"", or ""Version x.y-z"". (However, the revision number is often left off, so you will typically only see ""Version x.y"".) The first number represents the ""major"" version number. Within this number, the library maintains forward compatibility. For example, Version 2.3 of the library can read a Version 2.5 CGNS file, but Version 1.y cannot necessarily read any Version 2.y (or later) file. A new ""major"" version number is assigned either when forward compatibility is lost, or else when there is a significant change made to the API. The second number is the ""point release"" number. It increments when there are relatively minor changes to the API, or with the addition of new features. The third number (the revision number) changes with bug fixes. Major releases and point releases are announced (via the Latest News page and via the CGNSTalk Discussion Group), whereas revisions are generally not announced. Note that CGNS always maintains backward compatibility: the most recent version of the library will be able to read all older versions CGNS files.",True,{'THUMBS_UP': ['https://github.com/MicK7']}
CGNS/CGNS,https://github.com/CGNS/CGNS,154,2020-01-22T10:55:54Z,2020-02-19T16:36:42Z,2020-02-19T16:36:42Z,CLOSED,False,3908,63,18,https://github.com/LaurentCadet,CPEX0045 High order,38,[],https://github.com/CGNS/CGNS/pull/154,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/154#issuecomment-588314878,"The work related to the implementation of the CPEX045 (high order CGNS) is done.
This implementation comes with the following tests/examples :

src/tests/test_high_order.c

general MLL tests


src/ptests/para_high_order.c

example of implementation for parallel CGNS according to CPEX045


src/Test_UserGuideCode/C_code/write_grid_ho_unst.c

write an high ordered Mesh (2nd order QUAD with family and lagrange control points)


src/Test_UserGuideCode/C_code/write_flowcell_ho_unst.c

add a 3rd order solution to the mesh created by write_grid_ho_unst.c


src/Test_UserGuideCode/C_code/read_flowvert_ho_unst.c

check that the solution order is correctly written in the file



The branch has been updated wrt develop and the ctest is clear.
I am available for any questions or fixes.
Thanks for waiting,
Laurent CADET.","Can you make this feature a branch in the repo for now? We need to do further testing outside of github, have more people review it, and we would like additional users to try it out before officially releasing it. It's a major update so we really want to test the feature before releasing it. Thanks for all your hard work.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,155,2020-01-31T16:29:57Z,2020-02-14T15:16:47Z,2020-02-14T15:17:03Z,MERGED,True,513,2587,32,https://github.com/brtnfld,3.4.1,6,[],https://github.com/CGNS/CGNS/pull/155,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/155,"Patch for 3.4.0
I removed these commits:
(1)
Revert ""support new ngon layout""

This reverts commit 83fc242833d66dd6bb3b6b0f03dc5d71ae59c162.

(2)
Revert ""fix uninitialized memory for offset.""
This reverts commit 3fdc9d89ac1b452fc95abd6849f1b07535b500ba.

(3)
Revert ""fix cgnscheck due to new memory layout with ngon_n and nface_n""
This reverts commit 2c09bad0efc4b0042d1b69c3c59309a6f2ea74b9.","Patch for 3.4.0
I removed these commits:
(1)
Revert ""support new ngon layout""

This reverts commit 83fc242833d66dd6bb3b6b0f03dc5d71ae59c162.

(2)
Revert ""fix uninitialized memory for offset.""
This reverts commit 3fdc9d89ac1b452fc95abd6849f1b07535b500ba.

(3)
Revert ""fix cgnscheck due to new memory layout with ngon_n and nface_n""
This reverts commit 2c09bad0efc4b0042d1b69c3c59309a6f2ea74b9.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,156,2020-02-14T15:26:59Z,2020-02-14T18:30:30Z,2020-02-14T19:31:52Z,CLOSED,False,20,26,8,https://github.com/brtnfld,4.0.0,6,[],https://github.com/CGNS/CGNS/pull/156,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/156,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,157,2020-02-14T18:25:43Z,2020-02-14T19:29:34Z,2020-02-14T19:30:27Z,MERGED,True,2528,502,32,https://github.com/brtnfld,4.0.0 merge,7,[],https://github.com/CGNS/CGNS/pull/157,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/157,Merge what was the 3.4.0 release,Merge what was the 3.4.0 release,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,158,2020-02-19T15:50:47Z,2020-02-19T16:43:14Z,2020-02-19T16:43:14Z,MERGED,True,13,13,5,https://github.com/brtnfld,bumped version to 4.1 for next release,1,[],https://github.com/CGNS/CGNS/pull/158,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/158,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,158,2020-02-19T15:50:47Z,2020-02-19T16:43:14Z,2020-02-19T16:43:14Z,MERGED,True,13,13,5,https://github.com/brtnfld,bumped version to 4.1 for next release,1,[],https://github.com/CGNS/CGNS/pull/158,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/158#issuecomment-588299188,,This might need to be version 5.0 due to cpex0045,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,158,2020-02-19T15:50:47Z,2020-02-19T16:43:14Z,2020-02-19T16:43:14Z,MERGED,True,13,13,5,https://github.com/brtnfld,bumped version to 4.1 for next release,1,[],https://github.com/CGNS/CGNS/pull/158,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/158#issuecomment-588307791,,"I would rather not include cpex0045 in the next release.
Indeed, it needs more testing to check for bugs and forward compatibility issues.
current develop + correction on hdf5 memory type would be a safe bet",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,158,2020-02-19T15:50:47Z,2020-02-19T16:43:14Z,2020-02-19T16:43:14Z,MERGED,True,13,13,5,https://github.com/brtnfld,bumped version to 4.1 for next release,1,[],https://github.com/CGNS/CGNS/pull/158,https://github.com/brtnfld,4,https://github.com/CGNS/CGNS/pull/158#issuecomment-588310760,,"I was similarily thinking, as I was hoping to release 4.1 with all the current changes in develop.
What I will suggest is the cpex0045 be added as a branch, for now, so that people can try it out before releasing it officially.",True,{'THUMBS_UP': ['https://github.com/MicK7']}
CGNS/CGNS,https://github.com/CGNS/CGNS,158,2020-02-19T15:50:47Z,2020-02-19T16:43:14Z,2020-02-19T16:43:14Z,MERGED,True,13,13,5,https://github.com/brtnfld,bumped version to 4.1 for next release,1,[],https://github.com/CGNS/CGNS/pull/158,https://github.com/MicK7,5,https://github.com/CGNS/CGNS/pull/158#issuecomment-588312399,,"Ok, CPEX0045 can be talked over during next CGNS committee meeting.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,159,2020-02-19T23:02:03Z,2020-02-20T05:18:11Z,2020-02-20T05:18:11Z,MERGED,True,2,2,1,https://github.com/brtnfld,adjusted version conditional for CPEX 0041 being released in 4.0.0,1,[],https://github.com/CGNS/CGNS/pull/159,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/159,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,160,2020-02-20T05:27:58Z,2020-02-21T05:03:02Z,2020-02-21T05:22:49Z,MERGED,True,2,2,1,https://github.com/MicK7,Update update_ngon.c,1,[],https://github.com/CGNS/CGNS/pull/160,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/160,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,160,2020-02-20T05:27:58Z,2020-02-21T05:03:02Z,2020-02-21T05:22:49Z,MERGED,True,2,2,1,https://github.com/MicK7,Update update_ngon.c,1,[],https://github.com/CGNS/CGNS/pull/160,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/160#issuecomment-589104250,,In the 4.0.0 it is partially wrong since it was modified to generate 4.0 files but the comparison against 4.0 was missed. Thus it does not lead to any unusable files.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,161,2020-02-21T05:05:18Z,2020-02-21T15:39:50Z,2020-02-21T15:39:50Z,CLOSED,False,737,95,22,https://github.com/MicK7,Corrected use of HDF5 file and memory types,30,[],https://github.com/CGNS/CGNS/pull/161,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/161,#151,#151,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,162,2020-02-21T05:15:46Z,2020-02-21T15:14:38Z,2020-02-21T15:40:24Z,MERGED,True,3,0,1,https://github.com/MicK7,Add new cpex feature to Release note,1,[],https://github.com/CGNS/CGNS/pull/162,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/162,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,163,2020-02-21T15:41:46Z,2020-02-21T16:00:19Z,2020-02-21T16:00:19Z,MERGED,True,217,102,19,https://github.com/MicK7,Merge develop into coverity scan,17,[],https://github.com/CGNS/CGNS/pull/163,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/163,update coverity scan,update coverity scan,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,164,2020-02-21T16:05:45Z,2020-02-21T18:10:13Z,2020-02-21T18:10:13Z,MERGED,True,726,95,22,https://github.com/brtnfld,Fixed CGNS-157,32,[],https://github.com/CGNS/CGNS/pull/164,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/164,"CGNS-157: Corrupted memory when reading int32 connectivity into an int64 dataspace (investigated parallel reads), HDF5
Looking more into the code, I do see that there was added cgio_<read/write>_data_type APIs which pass the memory type, they are currently only used for the general field read/writes from the MLL. There are also read_all/write_all _type APIs. They are not documented, I added a Jira issue to add them to the docs.
The cgio write APIs also confuse the memory and file space in HDF5, which the write _type APIs correctly. Those APIs were used instead.","CGNS-157: Corrupted memory when reading int32 connectivity into an int64 dataspace (investigated parallel reads), HDF5
Looking more into the code, I do see that there was added cgio_<read/write>_data_type APIs which pass the memory type, they are currently only used for the general field read/writes from the MLL. There are also read_all/write_all _type APIs. They are not documented, I added a Jira issue to add them to the docs.
The cgio write APIs also confuse the memory and file space in HDF5, which the write _type APIs correctly. Those APIs were used instead.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,165,2020-02-24T15:27:15Z,2020-02-26T20:05:22Z,2020-02-26T20:05:22Z,MERGED,True,17,14,1,https://github.com/sebrowne,CMakeLists.txt: Disable RPATH setting if not using shared,2,[],https://github.com/CGNS/CGNS/pull/165,https://github.com/sebrowne,1,https://github.com/CGNS/CGNS/pull/165,"When not using shared libraries, do not do anything with RPATH on the
executables.","When not using shared libraries, do not do anything with RPATH on the
executables.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,166,2020-02-25T18:01:25Z,2020-02-26T20:25:40Z,2020-02-26T20:25:40Z,CLOSED,False,142,37,1,https://github.com/brtnfld,Updated Release Notes,4,[],https://github.com/CGNS/CGNS/pull/166,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/166,"Place-holder, additional changes may be forthcoming.","Place-holder, additional changes may be forthcoming.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,166,2020-02-25T18:01:25Z,2020-02-26T20:25:40Z,2020-02-26T20:25:40Z,CLOSED,False,142,37,1,https://github.com/brtnfld,Updated Release Notes,4,[],https://github.com/CGNS/CGNS/pull/166,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/166#issuecomment-591625699,"Place-holder, additional changes may be forthcoming.",Updating in another PR,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,167,2020-02-26T20:28:46Z,2020-02-28T15:09:42Z,2020-02-28T15:09:47Z,MERGED,True,190,269,10,https://github.com/brtnfld,"Removed cgio_read* functions, CGNS-192",9,[],https://github.com/CGNS/CGNS/pull/167,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/167,"Removed the functions:
cgio_read_all_data, cgio_read_data, cgio_read_block_data
cgio_read_all_data_f, cgio_read_data_f, cgio_read_block_data_f

use instead:

cgio_read_all_data_type, cgio_read_data_type, cgio_read_block_data_type
cgio_read_all_data_type_f, cgio_read_data_type_f, cgio_read_block_data_type_f

Fixed a Fortran test.
Updated Release notes","Removed the functions:
cgio_read_all_data, cgio_read_data, cgio_read_block_data
cgio_read_all_data_f, cgio_read_data_f, cgio_read_block_data_f

use instead:

cgio_read_all_data_type, cgio_read_data_type, cgio_read_block_data_type
cgio_read_all_data_type_f, cgio_read_data_type_f, cgio_read_block_data_type_f

Fixed a Fortran test.
Updated Release notes",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,168,2020-02-26T22:59:12Z,2020-02-26T23:19:56Z,2020-02-26T23:19:56Z,CLOSED,False,7,2,1,https://github.com/brtnfld,Check into Travis HD5 build failures,6,[],https://github.com/CGNS/CGNS/pull/168,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/168,Added option to not build tests.,Added option to not build tests.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,169,2020-03-02T16:40:24Z,2020-03-02T18:24:45Z,2020-03-02T18:24:56Z,MERGED,True,3,3,1,https://github.com/gsjaardema,Change shared build rpath test symbol,1,[],https://github.com/CGNS/CGNS/pull/169,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/169,"I think that the correct symbol to test should be CGNS_BUILD_SHARED instead of CGNS_USE_SHARED
With the test as it currently exists, my builds are not getting the correct rpath during the install of the tools (cgnsidff, cgnslist, ...), but if I use CGNS_BUILD_SHARED, then everything seems to work correctly and i get the correct rpath on the tools.  The make install step also shows that CMake is adding the runtime path to the installed tools, but I don't get the message with the current symbol in the test.  (The message is Set runtime path of ... during the install phase)","I think that the correct symbol to test should be CGNS_BUILD_SHARED instead of CGNS_USE_SHARED
With the test as it currently exists, my builds are not getting the correct rpath during the install of the tools (cgnsidff, cgnslist, ...), but if I use CGNS_BUILD_SHARED, then everything seems to work correctly and i get the correct rpath on the tools.  The make install step also shows that CMake is adding the runtime path to the installed tools, but I don't get the message with the current symbol in the test.  (The message is Set runtime path of ... during the install phase)",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,170,2020-03-02T18:23:10Z,2020-03-02T20:08:27Z,2020-03-02T20:08:27Z,MERGED,True,11,3,1,https://github.com/brtnfld,Release.txt format changes,4,[],https://github.com/CGNS/CGNS/pull/170,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/170,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,171,2020-03-03T05:52:59Z,2020-03-03T14:55:52Z,2020-03-05T20:25:45Z,MERGED,True,1,1,1,https://github.com/MicK7,Small typo,1,[],https://github.com/CGNS/CGNS/pull/171,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/171,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,172,2020-03-03T15:46:12Z,2020-03-03T18:21:03Z,2020-03-03T18:21:04Z,MERGED,True,1345,2056,11,https://github.com/brtnfld,Cleaned-up release directory,2,[],https://github.com/CGNS/CGNS/pull/172,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/172,"Renamed changelog to HISTORY.txt
Renamed release.txt to RELEASE.txt
removed document (and its fragments) related to the 3.3 release. The documents will be placed in the CGNS on-line documentation.","Renamed changelog to HISTORY.txt
Renamed release.txt to RELEASE.txt
removed document (and its fragments) related to the 3.3 release. The documents will be placed in the CGNS on-line documentation.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,173,2020-03-03T18:35:15Z,2020-03-03T22:47:24Z,2020-03-03T22:47:24Z,MERGED,True,1,1,1,https://github.com/brtnfld,"removed ""develop"" in cmake packaging",4,[],https://github.com/CGNS/CGNS/pull/173,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/173,The packaging name should be the next version release.,The packaging name should be the next version release.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,174,2020-03-04T16:10:26Z,2020-03-05T21:47:36Z,2020-03-05T21:47:37Z,MERGED,True,14,126,6,https://github.com/brtnfld,Reset version numbers for next release,6,[],https://github.com/CGNS/CGNS/pull/174,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/174,"Changed the build script used for testing to build hdf5 for faster builds.
Cleared RELEASE.txt
The version might change in the future depending when CPEX 45 is released.","Changed the build script used for testing to build hdf5 for faster builds.
Cleared RELEASE.txt
The version might change in the future depending when CPEX 45 is released.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,175,2020-03-05T05:25:30Z,2020-03-05T09:34:20Z,2020-03-15T11:48:29Z,CLOSED,False,12,12,3,https://github.com/MicK7,Update cgio API for cgnstools,2,[],https://github.com/CGNS/CGNS/pull/175,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/175,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,176,2020-03-05T05:39:42Z,2020-03-05T21:53:40Z,2020-03-05T21:53:40Z,CLOSED,False,31,142,12,https://github.com/brtnfld,Cgns196,13,[],https://github.com/CGNS/CGNS/pull/176,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/176,"Fixed: CGNS-196
cgnstools fail to build in 4.1.0 release: undefined reference to `cgio_read_all_data'","Fixed: CGNS-196
cgnstools fail to build in 4.1.0 release: undefined reference to `cgio_read_all_data'",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,176,2020-03-05T05:39:42Z,2020-03-05T21:53:40Z,2020-03-05T21:53:40Z,CLOSED,False,31,142,12,https://github.com/brtnfld,Cgns196,13,[],https://github.com/CGNS/CGNS/pull/176,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/176#issuecomment-595466552,"Fixed: CGNS-196
cgnstools fail to build in 4.1.0 release: undefined reference to `cgio_read_all_data'",Duplicate of PR #177,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,177,2020-03-05T09:57:52Z,2020-03-05T22:41:58Z,2020-03-15T11:48:25Z,MERGED,True,61,30,8,https://github.com/MicK7,Test to fix CGNS96 PR,15,[],https://github.com/CGNS/CGNS/pull/177,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/177,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,177,2020-03-05T09:57:52Z,2020-03-05T22:41:58Z,2020-03-15T11:48:25Z,MERGED,True,61,30,8,https://github.com/MicK7,Test to fix CGNS96 PR,15,[],https://github.com/CGNS/CGNS/pull/177,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/177#issuecomment-595311388,,I would like to merge PR #174 to remove the version number updates from the pull request. We can then cherry pick this commit and it should not conflict in master. master will then have to be released as 4.1.1 😞,True,{'THUMBS_UP': ['https://github.com/MicK7']}
CGNS/CGNS,https://github.com/CGNS/CGNS,177,2020-03-05T09:57:52Z,2020-03-05T22:41:58Z,2020-03-15T11:48:25Z,MERGED,True,61,30,8,https://github.com/MicK7,Test to fix CGNS96 PR,15,[],https://github.com/CGNS/CGNS/pull/177,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/177#issuecomment-595323325,,"I wish we had tests for the cgnstools ...
There is also an open issue related to this:
https://cgnsorg.atlassian.net/browse/CGNS-147
But it looks like your changes still work with MPI. I will need a test on OSX. And we need to test cmake, and probably look into PR #14",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,177,2020-03-05T09:57:52Z,2020-03-05T22:41:58Z,2020-03-15T11:48:25Z,MERGED,True,61,30,8,https://github.com/MicK7,Test to fix CGNS96 PR,15,[],https://github.com/CGNS/CGNS/pull/177,https://github.com/MicK7,4,https://github.com/CGNS/CGNS/pull/177#issuecomment-595326103,,"@brtnfld I agree 😢
The configure code is a big mess and I just did a quick and dirty fix.
The open issue https://cgnsorg.atlassian.net/browse/CGNS-147 is normal since the mpi detection code is commented in configure script...",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,177,2020-03-05T09:57:52Z,2020-03-05T22:41:58Z,2020-03-15T11:48:25Z,MERGED,True,61,30,8,https://github.com/MicK7,Test to fix CGNS96 PR,15,[],https://github.com/CGNS/CGNS/pull/177,https://github.com/MicK7,5,https://github.com/CGNS/CGNS/pull/177#issuecomment-595326971,,I would prefer to improve on PR #14,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,177,2020-03-05T09:57:52Z,2020-03-05T22:41:58Z,2020-03-15T11:48:25Z,MERGED,True,61,30,8,https://github.com/MicK7,Test to fix CGNS96 PR,15,[],https://github.com/CGNS/CGNS/pull/177,https://github.com/brtnfld,6,https://github.com/CGNS/CGNS/pull/177#issuecomment-595328244,,"Yes, which was why it was not merged, but we should address this issue when getting the cgnstools regression tested on other platforms.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,178,2020-03-06T09:39:14Z,2020-03-10T18:30:42Z,2020-03-10T18:40:07Z,CLOSED,False,35,19,18,https://github.com/MicK7,Cmake OpenGL includes,1,[],https://github.com/CGNS/CGNS/pull/178,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/178,"Try to improve OpenGL include detection while not breaking configure
https://cgnsorg.atlassian.net/browse/CGNS-106","Try to improve OpenGL include detection while not breaking configure
https://cgnsorg.atlassian.net/browse/CGNS-106",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,178,2020-03-06T09:39:14Z,2020-03-10T18:30:42Z,2020-03-10T18:40:07Z,CLOSED,False,35,19,18,https://github.com/MicK7,Cmake OpenGL includes,1,[],https://github.com/CGNS/CGNS/pull/178,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/178#issuecomment-596793589,"Try to improve OpenGL include detection while not breaking configure
https://cgnsorg.atlassian.net/browse/CGNS-106",I'm assuming this does not work on OSX.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,178,2020-03-06T09:39:14Z,2020-03-10T18:30:42Z,2020-03-10T18:40:07Z,CLOSED,False,35,19,18,https://github.com/MicK7,Cmake OpenGL includes,1,[],https://github.com/CGNS/CGNS/pull/178,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/178#issuecomment-596899948,"Try to improve OpenGL include detection while not breaking configure
https://cgnsorg.atlassian.net/browse/CGNS-106","Indeed the configure does not work but, for the CMake part, I am not sure if adding
""include_directories(${TCL_INCLUDE_PATH} ${TK_INCLUDE_PATH} ${OPENGL_INCLUDE_DIR})""  in the CMakeLists.txt of tkogl will solve the issue. On OSX, the OPENGL_INCLUDE_SUBDIR should be replaced correctly by the path to OpenGL directory. So I assumed that it may work on OSX but of course should be tested. Is it possible to add this cmake configuration to Travis along existing autotools configuration ?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,178,2020-03-06T09:39:14Z,2020-03-10T18:30:42Z,2020-03-10T18:40:07Z,CLOSED,False,35,19,18,https://github.com/MicK7,Cmake OpenGL includes,1,[],https://github.com/CGNS/CGNS/pull/178,https://github.com/brtnfld,4,https://github.com/CGNS/CGNS/pull/178#issuecomment-597140536,"Try to improve OpenGL include detection while not breaking configure
https://cgnsorg.atlassian.net/browse/CGNS-106",Should we make a branch so I can test/resolve mac and windows?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,178,2020-03-06T09:39:14Z,2020-03-10T18:30:42Z,2020-03-10T18:40:07Z,CLOSED,False,35,19,18,https://github.com/MicK7,Cmake OpenGL includes,1,[],https://github.com/CGNS/CGNS/pull/178,https://github.com/MicK7,5,https://github.com/CGNS/CGNS/pull/178#issuecomment-597167280,"Try to improve OpenGL include detection while not breaking configure
https://cgnsorg.atlassian.net/browse/CGNS-106",I think so.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,178,2020-03-06T09:39:14Z,2020-03-10T18:30:42Z,2020-03-10T18:40:07Z,CLOSED,False,35,19,18,https://github.com/MicK7,Cmake OpenGL includes,1,[],https://github.com/CGNS/CGNS/pull/178,https://github.com/gsjaardema,6,https://github.com/CGNS/CGNS/pull/178#issuecomment-597206347,"Try to improve OpenGL include detection while not breaking configure
https://cgnsorg.atlassian.net/browse/CGNS-106","@MicK7 The fix you suggest above
adding ""include_directories(${TCL_INCLUDE_PATH} ${TK_INCLUDE_PATH} ${OPENGL_INCLUDE_DIR})"" in the CMakeLists.txt of tkogl

Is the fix suggested in #14 which did seem to fix problem for me on my OSX system in the past.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,178,2020-03-06T09:39:14Z,2020-03-10T18:30:42Z,2020-03-10T18:40:07Z,CLOSED,False,35,19,18,https://github.com/MicK7,Cmake OpenGL includes,1,[],https://github.com/CGNS/CGNS/pull/178,https://github.com/MicK7,7,https://github.com/CGNS/CGNS/pull/178#issuecomment-597220931,"Try to improve OpenGL include detection while not breaking configure
https://cgnsorg.atlassian.net/browse/CGNS-106","@MicK7 The fix you suggest above
adding ""include_directories(${TCL_INCLUDE_PATH} ${TK_INCLUDE_PATH} ${OPENGL_INCLUDE_DIR})"" in the CMakeLists.txt of tkogl

Is the fix suggested in #14 which did seem to fix problem for me on my OSX system in the past.

Yes, but I am not sure that it is currently needed with this patch branch since the location of the include headers is generated on the fly by cmake.
Can you try this branch ?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,178,2020-03-06T09:39:14Z,2020-03-10T18:30:42Z,2020-03-10T18:40:07Z,CLOSED,False,35,19,18,https://github.com/MicK7,Cmake OpenGL includes,1,[],https://github.com/CGNS/CGNS/pull/178,https://github.com/brtnfld,8,https://github.com/CGNS/CGNS/pull/178#issuecomment-597244042,"Try to improve OpenGL include detection while not breaking configure
https://cgnsorg.atlassian.net/browse/CGNS-106",I created the build_cgnstools branch for this work. @MicK7 can you merge your changes to this branch?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,178,2020-03-06T09:39:14Z,2020-03-10T18:30:42Z,2020-03-10T18:40:07Z,CLOSED,False,35,19,18,https://github.com/MicK7,Cmake OpenGL includes,1,[],https://github.com/CGNS/CGNS/pull/178,https://github.com/MicK7,9,https://github.com/CGNS/CGNS/pull/178#issuecomment-597248400,"Try to improve OpenGL include detection while not breaking configure
https://cgnsorg.atlassian.net/browse/CGNS-106",@brtnfld ok done,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,179,2020-03-10T17:24:14Z,2020-03-16T14:28:46Z,2020-03-21T06:21:20Z,MERGED,True,1,1,1,https://github.com/gsjaardema,Handle integer size correctly,2,[],https://github.com/CGNS/CGNS/pull/179,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/179,"I think this fixes the problem of an integer mismatch between the size of cgsize_t and the size of the data stored in the Elements array in the CGNS file.  The data will be read from the file and stored in the elements array which is declared as cgsize_t *elements, so I think that should be the type that is passed do readwrite_data_parallel.  If cgsize_t is different than the size of the data in the file, then I think HDF5 will do the conversion.   I've tested this on the 4 possible settings (cgsize_t = 4 or 8, size of Elements on disk = I4 or I8) and they all work correctly with the fix.  Without the fix, I get a failure whenever the sizes don't match for a parallel read.
This might be needed for cgp_elements_write_data but I think the data type is set correctly in some other location currently.","I think this fixes the problem of an integer mismatch between the size of cgsize_t and the size of the data stored in the Elements array in the CGNS file.  The data will be read from the file and stored in the elements array which is declared as cgsize_t *elements, so I think that should be the type that is passed do readwrite_data_parallel.  If cgsize_t is different than the size of the data in the file, then I think HDF5 will do the conversion.   I've tested this on the 4 possible settings (cgsize_t = 4 or 8, size of Elements on disk = I4 or I8) and they all work correctly with the fix.  Without the fix, I get a failure whenever the sizes don't match for a parallel read.
This might be needed for cgp_elements_write_data but I think the data type is set correctly in some other location currently.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,179,2020-03-10T17:24:14Z,2020-03-16T14:28:46Z,2020-03-21T06:21:20Z,MERGED,True,1,1,1,https://github.com/gsjaardema,Handle integer size correctly,2,[],https://github.com/CGNS/CGNS/pull/179,https://github.com/gsjaardema,2,https://github.com/CGNS/CGNS/pull/179#issuecomment-599567589,"I think this fixes the problem of an integer mismatch between the size of cgsize_t and the size of the data stored in the Elements array in the CGNS file.  The data will be read from the file and stored in the elements array which is declared as cgsize_t *elements, so I think that should be the type that is passed do readwrite_data_parallel.  If cgsize_t is different than the size of the data in the file, then I think HDF5 will do the conversion.   I've tested this on the 4 possible settings (cgsize_t = 4 or 8, size of Elements on disk = I4 or I8) and they all work correctly with the fix.  Without the fix, I get a failure whenever the sizes don't match for a parallel read.
This might be needed for cgp_elements_write_data but I think the data type is set correctly in some other location currently.",Thanks.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,179,2020-03-10T17:24:14Z,2020-03-16T14:28:46Z,2020-03-21T06:21:20Z,MERGED,True,1,1,1,https://github.com/gsjaardema,Handle integer size correctly,2,[],https://github.com/CGNS/CGNS/pull/179,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/179#issuecomment-599585946,"I think this fixes the problem of an integer mismatch between the size of cgsize_t and the size of the data stored in the Elements array in the CGNS file.  The data will be read from the file and stored in the elements array which is declared as cgsize_t *elements, so I think that should be the type that is passed do readwrite_data_parallel.  If cgsize_t is different than the size of the data in the file, then I think HDF5 will do the conversion.   I've tested this on the 4 possible settings (cgsize_t = 4 or 8, size of Elements on disk = I4 or I8) and they all work correctly with the fix.  Without the fix, I get a failure whenever the sizes don't match for a parallel read.
This might be needed for cgp_elements_write_data but I think the data type is set correctly in some other location currently.","I also created an issue for testing reading older cgns files, and for different cgns builds, in the cgns parallel tests, which should test for this case:
https://cgnsorg.atlassian.net/browse/CGNS-200",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,180,2020-03-10T18:38:51Z,2020-03-10T18:39:20Z,2020-03-10T18:39:20Z,MERGED,True,35,19,18,https://github.com/MicK7,Generate OPENGL includes for cmake,1,[],https://github.com/CGNS/CGNS/pull/180,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/180,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,181,2020-03-10T18:49:28Z,2020-03-13T17:50:13Z,2020-03-13T21:21:15Z,MERGED,True,77,35,17,https://github.com/brtnfld,Build cgnstools and OpenGL,2,[],https://github.com/CGNS/CGNS/pull/181,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/181,Place holder for discussion and continuation of PR #178.,Place holder for discussion and continuation of PR #178.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,181,2020-03-10T18:49:28Z,2020-03-13T17:50:13Z,2020-03-13T21:21:15Z,MERGED,True,77,35,17,https://github.com/brtnfld,Build cgnstools and OpenGL,2,[],https://github.com/CGNS/CGNS/pull/181,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/181#issuecomment-597255844,Place holder for discussion and continuation of PR #178.,"I tried on my mac, and during cmake configure:
-- Found Tclsh: /usr/bin/tclsh (found version ""8.5"")
-- Found TCL: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/System/Library/Frameworks/tcl.framework
-- Found TCLTK: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/System/Library/Frameworks/tcl.framework
-- Found TK: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/System/Library/Frameworks/tk.framework
-- Found OpenGL: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/System/Library/Frameworks/OpenGL.framework
But it then failed in building:
[  2%] Building Fortran object src/CMakeFiles/cgns_shared.dir/cgns_f.F90.o
In file included from /Users/brtnfld/packages/CGNS/src/cgnstools/tkogl/get.c:8:
/Users/brtnfld/packages/CGNS/src/cgnstools/tkogl/../common/gl_config.h:5:10: fatal error: OPENGL_INCLUDE_SUBDIR-NOTFOUND/gl.h: No such file or directory
5 | #include ""OPENGL_INCLUDE_SUBDIR-NOTFOUND/gl.h""
|          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compilation terminated.
make[2]: *** [src/cgnstools/tkogl/CMakeFiles/tkogl.dir/get.c.o] Error 1
make[2]: *** Waiting for unfinished jobs....
[  2%] Building C object src/CMakeFiles/cgns_shared.dir/cgns_error.c.o
In file included from /Users/brtnfld/packages/CGNS/src/cgnstools/tkogl/tkogl.h:10,
from /Users/brtnfld/packages/CGNS/src/cgnstools/tkogl/gencyl.c:13:
/Users/brtnfld/packages/CGNS/src/cgnstools/tkogl/../common/gl_config.h:5:10: fatal error: OPENGL_INCLUDE_SUBDIR-NOTFOUND/gl.h: No such file or directory
5 | #include ""OPENGL_INCLUDE_SUBDIR-NOTFOUND/gl.h""
|          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compilation terminated.
In file included from /Users/brtnfld/packages/CGNS/src/cgnstools/tkogl/tkogl.h:10,
from /Users/brtnfld/packages/CGNS/src/cgnstools/tkogl/tkogl.c:14:
/Users/brtnfld/packages/CGNS/src/cgnstools/tkogl/../common/gl_config.h:5:10: fatal error: OPENGL_INCLUDE_SUBDIR-NOTFOUND/gl.h: No such file or directory
5 | #include ""OPENGL_INCLUDE_SUBDIR-NOTFOUND/gl.h""
|          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compilation terminated.
make[2]: *** [src/cgnstools/tkogl/CMakeFiles/tkogl.dir/gencyl.c.o] Error 1
make[2]: *** [src/cgnstools/tkogl/CMakeFiles/tkogl.dir/tkogl.c.o] Error 1
make[1]: *** [src/cgnstools/tkogl/CMakeFiles/tkogl.dir/all] Error 2
make[1]: *** Waiting for unfinished jobs....",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,181,2020-03-10T18:49:28Z,2020-03-13T17:50:13Z,2020-03-13T21:21:15Z,MERGED,True,77,35,17,https://github.com/brtnfld,Build cgnstools and OpenGL,2,[],https://github.com/CGNS/CGNS/pull/181,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/181#issuecomment-597301733,Place holder for discussion and continuation of PR #178.,"It looks like the complete path is not set.
/Users/brtnfld/packages/CGNS/src/cgnstools/tkogl/../common/gl_config.h:5:10: fatal error: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/System/Library/Frameworks/OpenGL.framework/./gl.h: No such file or directory
5 | #include ""/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/System/Library/Frameworks/OpenGL.framework/./gl.h""
The path to the headers are:
ls /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/System/Library/Frameworks/OpenGL.framework/Versions/A/Headers/
total 344
drwxr-xr-x  21 root   672B Jan 14 11:20 ./
drwxr-xr-x   6 root   192B Jan 14 11:20 ../
-rw-r--r--   1 root   557B Oct  2 01:06 CGLContext.h
-rw-r--r--   1 root   467B Oct  2 01:06 CGLCurrent.h
-rw-r--r--   1 root   980B Oct  2 01:06 CGLDevice.h
-rw-r--r--   1 root    14K Oct  2 01:06 CGLIOSurface.h
-rw-r--r--   1 root   131K Oct  2 01:06 CGLMacro.h
-rw-r--r--   1 root   3.1K Oct  2 01:06 CGLRenderers.h
-rw-r--r--   1 root    21K Oct  2 01:06 CGLTypes.h
-rw-r--r--   1 root   6.6K Oct  2 01:06 OpenGL.h
-rw-r--r--   1 root   775B Oct  2 01:06 OpenGLAvailability.h
-rw-r--r--   1 root   167K Oct  2 01:06 gl.h
-rw-r--r--   1 root   178K Oct  2 01:06 gl3.h
-rw-r--r--   1 root    14K Oct  2 01:06 gl3ext.h
-rw-r--r--   1 root   212K Oct  2 01:06 glext.h
-rw-r--r--   1 root   327B Oct  2 01:06 gliContext.h
-rw-r--r--   1 root    86K Oct  2 01:06 gliDispatch.h
-rw-r--r--   1 root   1.4K Oct  2 01:06 gltypes.h
-rw-r--r--   1 root    18K Oct  2 01:06 glu.h
-rw-r--r--   1 root   3.8K Oct  2 01:06 gluContext.h
-rw-r--r--   1 root   2.8K Oct  2 01:06 gluMacro.h",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,181,2020-03-10T18:49:28Z,2020-03-13T17:50:13Z,2020-03-13T21:21:15Z,MERGED,True,77,35,17,https://github.com/brtnfld,Build cgnstools and OpenGL,2,[],https://github.com/CGNS/CGNS/pull/181,https://github.com/brtnfld,4,https://github.com/CGNS/CGNS/pull/181#issuecomment-597326416,Place holder for discussion and continuation of PR #178.,"/Users/brtnfld/packages/CGNS/src/cgnstools/tkogl/../common/gl_config.h:7:10: fatal error: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/System/Library/Frameworks/OpenGL.framework/Versions/Current/Headers/glx.h: No such file or directory
7 | #include ""/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/System/Library/Frameworks/OpenGL.framework/Versions/Current/Headers/glx.h""
framework does not have glx.h
From cmake docs:

macOS-Specific
^^^^^^^^^^^^^^
On OSX FindOpenGL defaults to using the framework version of OpenGL. People
will have to change the cache values of OPENGL_glu_LIBRARY and
OPENGL_gl_LIBRARY to use OpenGL with X11 on OSX.

.//System/Volumes/Data/opt/local/include/xcb/glx.h
.//System/Volumes/Data/opt/X11/include/xcb/glx.h
.//System/Volumes/Data/opt/X11/include/GL/glx.h",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,181,2020-03-10T18:49:28Z,2020-03-13T17:50:13Z,2020-03-13T21:21:15Z,MERGED,True,77,35,17,https://github.com/brtnfld,Build cgnstools and OpenGL,2,[],https://github.com/CGNS/CGNS/pull/181,https://github.com/brtnfld,5,https://github.com/CGNS/CGNS/pull/181#issuecomment-597691622,Place holder for discussion and continuation of PR #178.,"Building C object src/cgnstools/tkogl/CMakeFiles/tkogl.dir/tkogl.c.o
cd /Users/brtnfld/packages/CGNS/build/src/cgnstools/tkogl && /Users/brtnfld/packages/mpich/bin/mpicc -DH5_BUILT_AS_STATIC_LIB -I/Users/brtnfld/packages/CGNS/build/src -I/Users/brtnfld/packages/CGNS/src -I/Users/brtnfld/packages/hdf5/build/hdf5/include -I/Users/brtnfld/packages/zlib-1.2.11/zlib/include -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/System/Library/Frameworks/Tcl.framework/Headers -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/System/Library/Frameworks/Tk.framework/Headers -I/Users/brtnfld/packages/CGNS/src/cgnstools/tkogl/../common  -g -g -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk   -o CMakeFiles/tkogl.dir/tkogl.c.o   -c /Users/brtnfld/packages/CGNS/src/cgnstools/tkogl/tkogl.c
In file included from /Users/brtnfld/packages/CGNS/src/cgnstools/tkogl/tkogl.h:10,
from /Users/brtnfld/packages/CGNS/src/cgnstools/tkogl/tkogl.c:14:
/Users/brtnfld/packages/CGNS/src/cgnstools/tkogl/../common/gl_config.h:7:10: fatal error: GL/glx.h: No such file or directory
7 | #include <GL/glx.h>
|          ^~~~~~~~~~
compilation terminated.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,181,2020-03-10T18:49:28Z,2020-03-13T17:50:13Z,2020-03-13T21:21:15Z,MERGED,True,77,35,17,https://github.com/brtnfld,Build cgnstools and OpenGL,2,[],https://github.com/CGNS/CGNS/pull/181,https://github.com/gsjaardema,6,https://github.com/CGNS/CGNS/pull/181#issuecomment-597711994,Place holder for discussion and continuation of PR #178.,"I get the same missing GL/glx.h include error as Scot.  On my OSX system, the GL/glx.h include file is in /opt/X11/include",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,181,2020-03-10T18:49:28Z,2020-03-13T17:50:13Z,2020-03-13T21:21:15Z,MERGED,True,77,35,17,https://github.com/brtnfld,Build cgnstools and OpenGL,2,[],https://github.com/CGNS/CGNS/pull/181,https://github.com/brtnfld,7,https://github.com/CGNS/CGNS/pull/181#issuecomment-597721755,Place holder for discussion and continuation of PR #178.,"Yes, cmake:
find_package(GLUT   REQUIRED)
find_package(OpenGL REQUIRED)
finds the frameworks packages. It needs to find the xquartz installs",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,181,2020-03-10T18:49:28Z,2020-03-13T17:50:13Z,2020-03-13T21:21:15Z,MERGED,True,77,35,17,https://github.com/brtnfld,Build cgnstools and OpenGL,2,[],https://github.com/CGNS/CGNS/pull/181,https://github.com/brtnfld,8,https://github.com/CGNS/CGNS/pull/181#issuecomment-597723851,Place holder for discussion and continuation of PR #178.,"I think the solution is to use
find_package(X11 REQUIRED)
https://cmake.org/cmake/help/v3.0/module/FindX11.html
Also, xquartz is preinstalled on OS X for travisCI.
I still need to test that this branch works on windows.",True,{'THUMBS_UP': ['https://github.com/MicK7']}
CGNS/CGNS,https://github.com/CGNS/CGNS,181,2020-03-10T18:49:28Z,2020-03-13T17:50:13Z,2020-03-13T21:21:15Z,MERGED,True,77,35,17,https://github.com/brtnfld,Build cgnstools and OpenGL,2,[],https://github.com/CGNS/CGNS/pull/181,https://github.com/brtnfld,9,https://github.com/CGNS/CGNS/pull/181#issuecomment-598428985,Place holder for discussion and continuation of PR #178.,"Everything compiles now on OSX, but I'm having an issue running cgnsview.
dyld: Library not loaded: /Users/brtnfld/packages/mpich-3.2.1/../mpich/lib/libmpi.12.dylib
Referenced from: /usr/local/lib/libz.1.dylib
Reason: no suitable image found.  Did find:
But it might be an issue with my set-up. I'll look into it.
Also, the install cgnsview wrapper script  reports an error:
./cgnsview
Error: cgnsview.tcl script not found
Probably related to https://cgnsorg.atlassian.net/browse/CGNS-125
@gsjaardema does cgnsview work for you?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,181,2020-03-10T18:49:28Z,2020-03-13T17:50:13Z,2020-03-13T21:21:15Z,MERGED,True,77,35,17,https://github.com/brtnfld,Build cgnstools and OpenGL,2,[],https://github.com/CGNS/CGNS/pull/181,https://github.com/gsjaardema,10,https://github.com/CGNS/CGNS/pull/181#issuecomment-598531822,Place holder for discussion and continuation of PR #178.,"@brtnfld  The build and install seems to work correctly for me.  cgnsview works when installed; however, it do not get any labels on the buttons.  See image below:",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,181,2020-03-10T18:49:28Z,2020-03-13T17:50:13Z,2020-03-13T21:21:15Z,MERGED,True,77,35,17,https://github.com/brtnfld,Build cgnstools and OpenGL,2,[],https://github.com/CGNS/CGNS/pull/181,https://github.com/brtnfld,11,https://github.com/CGNS/CGNS/pull/181#issuecomment-598764493,Place holder for discussion and continuation of PR #178.,"@gsjaardema, I fixed my issue, but all that I get is a blank white screen.  Did it use to work on OSX?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,181,2020-03-10T18:49:28Z,2020-03-13T17:50:13Z,2020-03-13T21:21:15Z,MERGED,True,77,35,17,https://github.com/brtnfld,Build cgnstools and OpenGL,2,[],https://github.com/CGNS/CGNS/pull/181,https://github.com/brtnfld,12,https://github.com/CGNS/CGNS/pull/181#issuecomment-598800161,Place holder for discussion and continuation of PR #178.,"On windows, cmake finds the library correctly:
-- Found Tclsh: C:/ActiveTcl/bin/tclsh.exe (found version ""8.6"")
-- Found TCL: C:/ActiveTcl/lib/tcl86t.lib
-- Found TCLTK: C:/ActiveTcl/lib/tcl86t.lib
-- Found TK: C:/ActiveTcl/lib/tk86t.lib
but I think there is an issue with  Intels compiler:
[ 68%] Building C object src/cgnstools/cgnsview/CMakeFiles/cgiowish.dir/winmain.c.obj
cd C:\Users\Public\Downloads\IntelBuild_parallel\build_cgns\src\cgnstools\cgnsview
C:\PROGRA2\INTELS1\COMPIL1.281\windows\bin\intel64\icl.exe @C:\Users\SCOTBR1\AppData\Local\Temp\nm862B.tmp
icl -DUSE_HTMLHELP -DWIN32 -D_CRT_SECURE_NO_WARNINGS -D_HDF5USEDLL_ -IC:\Users\Public\Downloads\IntelBuild_parallel\build_cgns\src -IC:\Users\Public\Downloads\IntelBuild_parallel\CGNS\src -IC:\PROGRA2\INTELS1\COMPIL1.281\windows\mpi\intel64\include -IC:\ActiveTcl\include -IC:\Users\Public\Downloads\IntelBuild_parallel\CGNS\src\cgnstools\cgnsview..\common -IC:\Users\Public\Downloads\IntelBuild_parallel\CGNS\src\cgnstools\cgnsview.... -IC:\PROGRA2\WI3CF21\10\Include\1001771.0\um -IC:\PROGRA1\HDF_GR1\HDF5\113~1.0MP\include -DUPPERCASE /MD /Qstd=c99 -DNDEBUG /MD /O2 /Ob2 /DNDEBUG /FoCMakeFiles\cgiowish.dir\winmain.c.obj /FdCMakeFiles\cgiowish.dir\ -c C:\Users\Public\Downloads\IntelBuild_parallel\CGNS\src\cgnstools\cgnsview\winmain.c
Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.5.281 Build 20190815
Copyright (C) 1985-2019 Intel Corporation.  All rights reserved.
winmain.c
C:\PROGRA2\WI3CF21\10\Include\100177~1.0\um\winnt.h(20580): error: expected an identifier
const VOID* None;
^
C:\PROGRA2\WI3CF21\10\Include\100177~1.0\um\processthreadsapi.h(1032): error: expected an identifier
ULONG ControlMask;
^
C:\PROGRA2\WI3CF21\10\Include\100177~1.0\um\processthreadsapi.h(1151): error: expected an identifier
ULONG ControlMask;
^",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,181,2020-03-10T18:49:28Z,2020-03-13T17:50:13Z,2020-03-13T21:21:15Z,MERGED,True,77,35,17,https://github.com/brtnfld,Build cgnstools and OpenGL,2,[],https://github.com/CGNS/CGNS/pull/181,https://github.com/brtnfld,13,https://github.com/CGNS/CGNS/pull/181#issuecomment-598809210,Place holder for discussion and continuation of PR #178.,"I think we should merge it as is. It at least works on linux, and we are now test building cgnstools. We need to get a patched version out soon, and at least cgnstools compiles.
It looks like these other issues on OSX and Windows might be more involved than a simple patch. We can list them as known issues in the release notes. Thoughts?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,181,2020-03-10T18:49:28Z,2020-03-13T17:50:13Z,2020-03-13T21:21:15Z,MERGED,True,77,35,17,https://github.com/brtnfld,Build cgnstools and OpenGL,2,[],https://github.com/CGNS/CGNS/pull/181,https://github.com/MicK7,14,https://github.com/CGNS/CGNS/pull/181#issuecomment-598819016,Place holder for discussion and continuation of PR #178.,"I agree with you. OSX and Windows issue might involved more than a patch (ideally switching to EGL + OpenGL2)  instead of glx+OpenGL1 , this would allow future handling of wayland, using Framework on OSX ...)",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,181,2020-03-10T18:49:28Z,2020-03-13T17:50:13Z,2020-03-13T21:21:15Z,MERGED,True,77,35,17,https://github.com/brtnfld,Build cgnstools and OpenGL,2,[],https://github.com/CGNS/CGNS/pull/181,https://github.com/gsjaardema,15,https://github.com/CGNS/CGNS/pull/181#issuecomment-598916625,Place holder for discussion and continuation of PR #178.,"I did discover that if I deselect 'show toolbar' and then select it again, then all the labels and icons show up in my Mac cgnsview.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,182,2020-03-14T17:31:19Z,2020-03-18T15:27:12Z,2020-03-18T15:27:12Z,CLOSED,False,387,74,2,https://github.com/pini-gh,Do not call vararg C functions from Fortran (JIRA CGNS-179),1,[],https://github.com/CGNS/CGNS/pull/182,https://github.com/pini-gh,1,https://github.com/CGNS/CGNS/pull/182,"Please see rationals on JIRA CGNS-179:
https://cgnsorg.atlassian.net/browse/CGNS-179","Please see rationals on JIRA CGNS-179:
https://cgnsorg.atlassian.net/browse/CGNS-179",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,182,2020-03-14T17:31:19Z,2020-03-18T15:27:12Z,2020-03-18T15:27:12Z,CLOSED,False,387,74,2,https://github.com/pini-gh,Do not call vararg C functions from Fortran (JIRA CGNS-179),1,[],https://github.com/CGNS/CGNS/pull/182,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/182#issuecomment-599136737,"Please see rationals on JIRA CGNS-179:
https://cgnsorg.atlassian.net/browse/CGNS-179",Thanks for the proposal. gfortran test are failing on travis.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,182,2020-03-14T17:31:19Z,2020-03-18T15:27:12Z,2020-03-18T15:27:12Z,CLOSED,False,387,74,2,https://github.com/pini-gh,Do not call vararg C functions from Fortran (JIRA CGNS-179),1,[],https://github.com/CGNS/CGNS/pull/182,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/182#issuecomment-599626144,"Please see rationals on JIRA CGNS-179:
https://cgnsorg.atlassian.net/browse/CGNS-179",LGTM,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,182,2020-03-14T17:31:19Z,2020-03-18T15:27:12Z,2020-03-18T15:27:12Z,CLOSED,False,387,74,2,https://github.com/pini-gh,Do not call vararg C functions from Fortran (JIRA CGNS-179),1,[],https://github.com/CGNS/CGNS/pull/182,https://github.com/pini-gh,4,https://github.com/CGNS/CGNS/pull/182#issuecomment-600487665,"Please see rationals on JIRA CGNS-179:
https://cgnsorg.atlassian.net/browse/CGNS-179","Keep in mind that we test the following fortran compilers: NAG, PGI, GNU, Intel, xl, cray, sun. On windows we only test Intel (manually). I would need to make sure all tests pass before merging this. So is this with gfortran 10, isn't it still in developement?

The change that breaks calling vararg C functions from Fortran code on powerpc was introduced into the GCC 9 development branch. Please see https://gcc.gnu.org/bugzilla/show_bug.cgi?id=92361.

Can you do your pull request to the CGNS-179 branch so that I can run it through our daily tests. I'll try it with cray and windows.

Doing that.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,182,2020-03-14T17:31:19Z,2020-03-18T15:27:12Z,2020-03-18T15:27:12Z,CLOSED,False,387,74,2,https://github.com/pini-gh,Do not call vararg C functions from Fortran (JIRA CGNS-179),1,[],https://github.com/CGNS/CGNS/pull/182,https://github.com/MicK7,5,https://github.com/CGNS/CGNS/pull/182#issuecomment-600493475,"Please see rationals on JIRA CGNS-179:
https://cgnsorg.atlassian.net/browse/CGNS-179",@pini-gh @brtnfld  I am moving the commits to CGNS-179 branch. No need for a new PR.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,182,2020-03-14T17:31:19Z,2020-03-18T15:27:12Z,2020-03-18T15:27:12Z,CLOSED,False,387,74,2,https://github.com/pini-gh,Do not call vararg C functions from Fortran (JIRA CGNS-179),1,[],https://github.com/CGNS/CGNS/pull/182,https://github.com/MicK7,6,https://github.com/CGNS/CGNS/pull/182#issuecomment-600497088,"Please see rationals on JIRA CGNS-179:
https://cgnsorg.atlassian.net/browse/CGNS-179",The changes are now in CGNS-179 branch.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,182,2020-03-14T17:31:19Z,2020-03-18T15:27:12Z,2020-03-18T15:27:12Z,CLOSED,False,387,74,2,https://github.com/pini-gh,Do not call vararg C functions from Fortran (JIRA CGNS-179),1,[],https://github.com/CGNS/CGNS/pull/182,https://github.com/brtnfld,7,https://github.com/CGNS/CGNS/pull/182#issuecomment-600636656,"Please see rationals on JIRA CGNS-179:
https://cgnsorg.atlassian.net/browse/CGNS-179","Thanks, I'll switch to testing that branch.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,182,2020-03-14T17:31:19Z,2020-03-18T15:27:12Z,2020-03-18T15:27:12Z,CLOSED,False,387,74,2,https://github.com/pini-gh,Do not call vararg C functions from Fortran (JIRA CGNS-179),1,[],https://github.com/CGNS/CGNS/pull/182,https://github.com/MicK7,8,https://github.com/CGNS/CGNS/pull/182#issuecomment-600688217,"Please see rationals on JIRA CGNS-179:
https://cgnsorg.atlassian.net/browse/CGNS-179",Merge Request transfered to #188,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,183,2020-03-15T11:45:32Z,2020-03-18T15:22:07Z,2020-05-16T18:24:14Z,CLOSED,False,88,22,1,https://github.com/MicK7,JIRA CGNS-194,2,[],https://github.com/CGNS/CGNS/pull/183,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/183,Test update H5Giterate ...,Test update H5Giterate ...,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,183,2020-03-15T11:45:32Z,2020-03-18T15:22:07Z,2020-05-16T18:24:14Z,CLOSED,False,88,22,1,https://github.com/MicK7,JIRA CGNS-194,2,[],https://github.com/CGNS/CGNS/pull/183,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/183#issuecomment-600591876,Test update H5Giterate ...,It would be nice to also remove H5Gget_objinfo from ADFH.c,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,183,2020-03-15T11:45:32Z,2020-03-18T15:22:07Z,2020-05-16T18:24:14Z,CLOSED,False,88,22,1,https://github.com/MicK7,JIRA CGNS-194,2,[],https://github.com/CGNS/CGNS/pull/183,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/183#issuecomment-600635260,Test update H5Giterate ...,"It would be nice to also remove H5Gget_objinfo from ADFH.c

Yes, I should have also included that because it is needed to run with DAOS. It should also be faster since we only need the basic metadata information.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,183,2020-03-15T11:45:32Z,2020-03-18T15:22:07Z,2020-05-16T18:24:14Z,CLOSED,False,88,22,1,https://github.com/MicK7,JIRA CGNS-194,2,[],https://github.com/CGNS/CGNS/pull/183,https://github.com/MicK7,4,https://github.com/CGNS/CGNS/pull/183#issuecomment-600663966,Test update H5Giterate ...,@brtnfld Do I transfer the changes to a CGNS-194 branch on CGNS/CGNS so you can commit directly into it ?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,183,2020-03-15T11:45:32Z,2020-03-18T15:22:07Z,2020-05-16T18:24:14Z,CLOSED,False,88,22,1,https://github.com/MicK7,JIRA CGNS-194,2,[],https://github.com/CGNS/CGNS/pull/183,https://github.com/brtnfld,5,https://github.com/CGNS/CGNS/pull/183#issuecomment-600674766,Test update H5Giterate ...,That will work.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,184,2020-03-15T12:23:17Z,2020-11-19T12:40:29Z,2020-11-19T12:57:10Z,CLOSED,False,73,5,1,https://github.com/MicK7,SU2 patch for Partial reading of offset array when computing element size,4,[],https://github.com/CGNS/CGNS/pull/184,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/184,"This is a backport of SU2 patch for CGNS (https://github.com/su2code/SU2)
It can surely be improved by using recent cgio_read_data_type API more efficiently.
I am not sure what the memory saving done by the patch is worth. Any feedback would be appreciated (this change makes the code ugly thus not easy to maintain)!","This is a backport of SU2 patch for CGNS (https://github.com/su2code/SU2)
It can surely be improved by using recent cgio_read_data_type API more efficiently.
I am not sure what the memory saving done by the patch is worth. Any feedback would be appreciated (this change makes the code ugly thus not easy to maintain)!",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,184,2020-03-15T12:23:17Z,2020-11-19T12:40:29Z,2020-11-19T12:57:10Z,CLOSED,False,73,5,1,https://github.com/MicK7,SU2 patch for Partial reading of offset array when computing element size,4,[],https://github.com/CGNS/CGNS/pull/184,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/184#issuecomment-730349577,"This is a backport of SU2 patch for CGNS (https://github.com/su2code/SU2)
It can surely be improved by using recent cgio_read_data_type API more efficiently.
I am not sure what the memory saving done by the patch is worth. Any feedback would be appreciated (this change makes the code ugly thus not easy to maintain)!",integrated in cgp_poly_experimental branch,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,185,2020-03-16T14:23:16Z,2020-03-16T15:06:04Z,2020-03-16T15:06:04Z,MERGED,True,174,3,2,https://github.com/brtnfld,Updated to reflect the 4.1.1 release,8,[],https://github.com/CGNS/CGNS/pull/185,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/185,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,186,2020-03-18T08:35:01Z,2020-03-18T08:46:08Z,2020-03-18T08:46:08Z,CLOSED,False,387,74,2,https://github.com/pini-gh,Do not call vararg C functions from Fortran (#179),1,[],https://github.com/CGNS/CGNS/pull/186,https://github.com/pini-gh,1,https://github.com/CGNS/CGNS/pull/186,Pull request to the CGNS-179 branch as requested in #182 (review).,Pull request to the CGNS-179 branch as requested in #182 (review).,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,186,2020-03-18T08:35:01Z,2020-03-18T08:46:08Z,2020-03-18T08:46:08Z,CLOSED,False,387,74,2,https://github.com/pini-gh,Do not call vararg C functions from Fortran (#179),1,[],https://github.com/CGNS/CGNS/pull/186,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/186#issuecomment-600495995,Pull request to the CGNS-179 branch as requested in #182 (review).,@pini-gh  Code is now in th CGNS-179 branch. Closing this PR.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,187,2020-03-18T15:23:54Z,2020-03-30T16:20:23Z,2020-03-31T10:10:06Z,MERGED,True,165,60,2,https://github.com/MicK7,JIRA CGNS-194,6,[],https://github.com/CGNS/CGNS/pull/187,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/187,"Be fully HDF5 1.8 compliant

Test update H5Giterate
We need to add a #if H5_VERSION_GE(1,12,0) for H5L_iterate_t; HDF5 1.12 introduces H5Literate_by_name2; a new type H5L_iterate2_t.
It would be nice to also remove H5Gget_objinfo from ADFH.c
Yes, I should have also included that because it is needed to run with DAOS. It should also be faster since we only need the basic metadata information.","Be fully HDF5 1.8 compliant

Test update H5Giterate
We need to add a #if H5_VERSION_GE(1,12,0) for H5L_iterate_t; HDF5 1.12 introduces H5Literate_by_name2; a new type H5L_iterate2_t.
It would be nice to also remove H5Gget_objinfo from ADFH.c
Yes, I should have also included that because it is needed to run with DAOS. It should also be faster since we only need the basic metadata information.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,187,2020-03-18T15:23:54Z,2020-03-30T16:20:23Z,2020-03-31T10:10:06Z,MERGED,True,165,60,2,https://github.com/MicK7,JIRA CGNS-194,6,[],https://github.com/CGNS/CGNS/pull/187,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/187#issuecomment-600795982,"Be fully HDF5 1.8 compliant

Test update H5Giterate
We need to add a #if H5_VERSION_GE(1,12,0) for H5L_iterate_t; HDF5 1.12 introduces H5Literate_by_name2; a new type H5L_iterate2_t.
It would be nice to also remove H5Gget_objinfo from ADFH.c
Yes, I should have also included that because it is needed to run with DAOS. It should also be faster since we only need the basic metadata information.",H5Gget_objinfo can be replaced by H5Oget_info_by_name but it seems to be already obsolete since a H5Oget_info_by_name3 exists in recent hdf5 version.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,187,2020-03-18T15:23:54Z,2020-03-30T16:20:23Z,2020-03-31T10:10:06Z,MERGED,True,165,60,2,https://github.com/MicK7,JIRA CGNS-194,6,[],https://github.com/CGNS/CGNS/pull/187,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/187#issuecomment-601774146,"Be fully HDF5 1.8 compliant

Test update H5Giterate
We need to add a #if H5_VERSION_GE(1,12,0) for H5L_iterate_t; HDF5 1.12 introduces H5Literate_by_name2; a new type H5L_iterate2_t.
It would be nice to also remove H5Gget_objinfo from ADFH.c
Yes, I should have also included that because it is needed to run with DAOS. It should also be faster since we only need the basic metadata information.",It would be nice to check on a bigger case than the tests if the changes do not introduce performance issues,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,187,2020-03-18T15:23:54Z,2020-03-30T16:20:23Z,2020-03-31T10:10:06Z,MERGED,True,165,60,2,https://github.com/MicK7,JIRA CGNS-194,6,[],https://github.com/CGNS/CGNS/pull/187,https://github.com/brtnfld,4,https://github.com/CGNS/CGNS/pull/187#issuecomment-601786492,"Be fully HDF5 1.8 compliant

Test update H5Giterate
We need to add a #if H5_VERSION_GE(1,12,0) for H5L_iterate_t; HDF5 1.12 introduces H5Literate_by_name2; a new type H5L_iterate2_t.
It would be nice to also remove H5Gget_objinfo from ADFH.c
Yes, I should have also included that because it is needed to run with DAOS. It should also be faster since we only need the basic metadata information.",Agreed.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,187,2020-03-18T15:23:54Z,2020-03-30T16:20:23Z,2020-03-31T10:10:06Z,MERGED,True,165,60,2,https://github.com/MicK7,JIRA CGNS-194,6,[],https://github.com/CGNS/CGNS/pull/187,https://github.com/brtnfld,5,https://github.com/CGNS/CGNS/pull/187#issuecomment-602699873,"Be fully HDF5 1.8 compliant

Test update H5Giterate
We need to add a #if H5_VERSION_GE(1,12,0) for H5L_iterate_t; HDF5 1.12 introduces H5Literate_by_name2; a new type H5L_iterate2_t.
It would be nice to also remove H5Gget_objinfo from ADFH.c
Yes, I should have also included that because it is needed to run with DAOS. It should also be faster since we only need the basic metadata information.",Checking with our Daily Tests over the next couple of days.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,187,2020-03-18T15:23:54Z,2020-03-30T16:20:23Z,2020-03-31T10:10:06Z,MERGED,True,165,60,2,https://github.com/MicK7,JIRA CGNS-194,6,[],https://github.com/CGNS/CGNS/pull/187,https://github.com/MicK7,6,https://github.com/CGNS/CGNS/pull/187#issuecomment-605439380,"Be fully HDF5 1.8 compliant

Test update H5Giterate
We need to add a #if H5_VERSION_GE(1,12,0) for H5L_iterate_t; HDF5 1.12 introduces H5Literate_by_name2; a new type H5L_iterate2_t.
It would be nice to also remove H5Gget_objinfo from ADFH.c
Yes, I should have also included that because it is needed to run with DAOS. It should also be faster since we only need the basic metadata information.",@brtnfld any feedback from your daily testing ?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,187,2020-03-18T15:23:54Z,2020-03-30T16:20:23Z,2020-03-31T10:10:06Z,MERGED,True,165,60,2,https://github.com/MicK7,JIRA CGNS-194,6,[],https://github.com/CGNS/CGNS/pull/187,https://github.com/brtnfld,7,https://github.com/CGNS/CGNS/pull/187#issuecomment-606010977,"Be fully HDF5 1.8 compliant

Test update H5Giterate
We need to add a #if H5_VERSION_GE(1,12,0) for H5L_iterate_t; HDF5 1.12 introduces H5Literate_by_name2; a new type H5L_iterate2_t.
It would be nice to also remove H5Gget_objinfo from ADFH.c
Yes, I should have also included that because it is needed to run with DAOS. It should also be faster since we only need the basic metadata information.",Looks good.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,188,2020-03-18T15:26:26Z,2020-09-24T07:15:26Z,2020-09-24T17:22:24Z,MERGED,True,591,230,11,https://github.com/MicK7,Do not call vararg C functions from Fortran (JIRA CGNS-179) #182,23,[],https://github.com/CGNS/CGNS/pull/188,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/188,"Please see rationals on JIRA CGNS-179:
https://cgnsorg.atlassian.net/browse/CGNS-179

Duplicate of #182 but with the branch on main repository","Please see rationals on JIRA CGNS-179:
https://cgnsorg.atlassian.net/browse/CGNS-179

Duplicate of #182 but with the branch on main repository",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,188,2020-03-18T15:26:26Z,2020-09-24T07:15:26Z,2020-09-24T17:22:24Z,MERGED,True,591,230,11,https://github.com/MicK7,Do not call vararg C functions from Fortran (JIRA CGNS-179) #182,23,[],https://github.com/CGNS/CGNS/pull/188,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/188#issuecomment-600801979,"Please see rationals on JIRA CGNS-179:
https://cgnsorg.atlassian.net/browse/CGNS-179

Duplicate of #182 but with the branch on main repository",@pini-gh Your PR is here.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,188,2020-03-18T15:26:26Z,2020-09-24T07:15:26Z,2020-09-24T17:22:24Z,MERGED,True,591,230,11,https://github.com/MicK7,Do not call vararg C functions from Fortran (JIRA CGNS-179) #182,23,[],https://github.com/CGNS/CGNS/pull/188,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/188#issuecomment-601268146,"Please see rationals on JIRA CGNS-179:
https://cgnsorg.atlassian.net/browse/CGNS-179

Duplicate of #182 but with the branch on main repository","Extension: cgns_f.F90, line 1492: Line longer than 132 characters
Extension: cgns_f.F90, line 1644: Line longer than 132 characters
Extension: cgns_f.F90, line 1704: Line longer than 132 characters
Extension: cgns_f.F90, line 1735: Line longer than 132 characters
Extension: cgns_f.F90, line 2078: Line longer than 132 characters
Extension: cgns_f.F90, line 2247: Line longer than 132 characters
Extension: cgns_f.F90, line 4926: Line longer than 132 characters
Warning: cgns_f.F90, line 5219: Unused dummy variable NAME20
Warning: cgns_f.F90, line 5381: Unused dummy variable NAME20
Warning: cgns_f.F90, line 5388: Unused dummy variable A
Warning: cgns_f.F90, line 5395: Unused dummy variable A
Warning: cgns_f.F90, line 5402: Unused dummy variable A
Warning: cgns_f.F90, line 5409: Unused dummy variable A
ng: /home/hdftest/snapshots-cgns/TestDir/jelly/test.1/CGNS_SRC/src/tests/cgread_f03.F90, line 300: Inconsistent data type DOUBLE PRECISION (previously REAL) for argument [ 65%] Li
nking C executable write_grid_unst
2 in reference to CG_ARRAY_READ_F
Warning: /home/hdftest/snapshots-cgns/TestDir/jelly/test.1/CGNS_SRC/src/tests/cgread_f03.F90, line 367: In[ 66%] Linking C executable write_grid2zn_str
consistent data type DOUBLE PRECISION (previously REAL) for argument 2 in reference to CG_ARRAY_READ_F
Warning: /home/hdftest/snapshots-cgns/TestDir/jelly/test.1/CGNS_SRC/src/tests/cgread_f03.F90, line 391: Inconsistent data type DOUBLE PRECISION (previously REAL) for argument 1 in
reference to CG_EXPONENTS_READ_F
[ 66%] Linking C executable test_bbox
Warning: /home/hdftest/snapshots-cgns/TestDir/jelly/test.1/CGNS_SRC/src/tests/cgread_f03.F90, line 409: Inconsistent data type DOUBLE PRECISION (previously REAL) for argument 1 in
reference to CG_CONVERSION_READ_F
Warning: /home/hdftest/snapshots-cgns/TestDir/jelly/test.1/CGNS_SRC/src/tests/cgread_f03.F90, line 472: Inconsistent data type DOUBLE PRECISION (previously REAL) for argument [ 67
%] Linking C executable read_descriptor
2 in reference to CG_ARRAY_READ_F
Warning: /home/hdftest/snapshots-cgns/TestDir/jelly/test.1/CGNS_SRC/src/tests/cgread_f03.F90, line 523: Inconsistent data type DOUB[ 69%] Linking C executable write_bcdata
LE PRECISION (pre[ 68%] Linking C executable write_timevert_str
viously REAL) for argum[ 69%] Linking C executable write_flowvert_str
ent [ 69%] Linking C executable read_flowcentrind_str
8 in reference to CG_COORD_READ_F
[ 69%] Linking C executable write_dimensional
[ 70%] Linking C executable cgioc
Warning: /home/hdftest/snapshots-cgns/TestDir/jelly/test.1/CGNS_SRC/src/tests/cgread_f03.F90, line 591: Inconsistent data type DOUBLE PRECISION (previously REAL) for argument 2 in
reference to CG_ARRAY_READ_F
Warning: /home/hdftest/snapshots-cgns/TestDir/jelly/test.1/CGNS_SRC/src/tests/cgread_f03.F90, line 707: Inconsistent data type DOUBLE PRECISION (previously REAL) for argument 2 in
reference to CG_ARRAY_READ_F
[ 71%] Linking C executable write_flowcentrind_str
Warning: /home/hdftest/snapshots-cgns/TestDir/jelly/test.1/CGNS_SRC/src/tests/cgread_f03.F90, line 938: Inconsistent data type DOUBLE PRECISION (previously REAL) for argument 2 in
reference to CG_ARRAY_READ_F
Warning: /home/hdftest/snapshots-cgns/TestDir/jelly/test.1/CGNS_SRC/src/tests/cgread_f03.F90, line 986: Inco[ 72%] Linking C executable read_grid2zn_str
nsistent data type DOUBLE PRECISION (previously REAL) for argument 6 in reference to CG_BOCO_READ_F
[ 98%] Linking C executable read_timevert_str
CMakeFiles/test_family_treef.dir/test_family_treef.F90.o: In function testfamilytreef_': /home/hdftest/snapshots-cgns/TestDir/jelly/test.1/CGNS_SRC/src/tests/test_family_treef.F90:35: undefined reference to unlink_'",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,188,2020-03-18T15:26:26Z,2020-09-24T07:15:26Z,2020-09-24T17:22:24Z,MERGED,True,591,230,11,https://github.com/MicK7,Do not call vararg C functions from Fortran (JIRA CGNS-179) #182,23,[],https://github.com/CGNS/CGNS/pull/188,https://github.com/MicK7,4,https://github.com/CGNS/CGNS/pull/188#issuecomment-601780856,"Please see rationals on JIRA CGNS-179:
https://cgnsorg.atlassian.net/browse/CGNS-179

Duplicate of #182 but with the branch on main repository","The maximum depth for a node path has always been defined as  CG_MAX_GOTO_DEPTH = 20 in the cgnslib. Thus, no one should be using node paths greater than that.
I agree with you on the original implementers intent. Maybe this function does not make sense in Fortran and we should recommand usage of cg_gopath.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,188,2020-03-18T15:26:26Z,2020-09-24T07:15:26Z,2020-09-24T17:22:24Z,MERGED,True,591,230,11,https://github.com/MicK7,Do not call vararg C functions from Fortran (JIRA CGNS-179) #182,23,[],https://github.com/CGNS/CGNS/pull/188,https://github.com/brtnfld,5,https://github.com/CGNS/CGNS/pull/188#issuecomment-601791791,"Please see rationals on JIRA CGNS-179:
https://cgnsorg.atlassian.net/browse/CGNS-179

Duplicate of #182 but with the branch on main repository","Thanks, I missed the CG_MAX_GOTO_DEPTH = 20.
Are you saying we should deprecate cg_goto_f? Couldn't you say the same about cg_goto in general?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,188,2020-03-18T15:26:26Z,2020-09-24T07:15:26Z,2020-09-24T17:22:24Z,MERGED,True,591,230,11,https://github.com/MicK7,Do not call vararg C functions from Fortran (JIRA CGNS-179) #182,23,[],https://github.com/CGNS/CGNS/pull/188,https://github.com/MicK7,6,https://github.com/CGNS/CGNS/pull/188#issuecomment-620152146,"Please see rationals on JIRA CGNS-179:
https://cgnsorg.atlassian.net/browse/CGNS-179

Duplicate of #182 but with the branch on main repository",@brtnfld You were right. The current proposed patch is missing the 20th path/index of cg_goto and is not coherent with cg_goto_f08 already existing in cgns_f.F90 file.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,188,2020-03-18T15:26:26Z,2020-09-24T07:15:26Z,2020-09-24T17:22:24Z,MERGED,True,591,230,11,https://github.com/MicK7,Do not call vararg C functions from Fortran (JIRA CGNS-179) #182,23,[],https://github.com/CGNS/CGNS/pull/188,https://github.com/MicK7,7,https://github.com/CGNS/CGNS/pull/188#issuecomment-621955493,"Please see rationals on JIRA CGNS-179:
https://cgnsorg.atlassian.net/browse/CGNS-179

Duplicate of #182 but with the branch on main repository","@pini-gh This PR should also help with JIRA CGNS-205 issue.
To compile with gfortran-10, the following flags need to be provided ""-std=f2008ts -fallow-argument-mismatch""",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,188,2020-03-18T15:26:26Z,2020-09-24T07:15:26Z,2020-09-24T17:22:24Z,MERGED,True,591,230,11,https://github.com/MicK7,Do not call vararg C functions from Fortran (JIRA CGNS-179) #182,23,[],https://github.com/CGNS/CGNS/pull/188,https://github.com/MicK7,8,https://github.com/CGNS/CGNS/pull/188#issuecomment-692165223,"Please see rationals on JIRA CGNS-179:
https://cgnsorg.atlassian.net/browse/CGNS-179

Duplicate of #182 but with the branch on main repository",@brtnfld What is preventing this branch to be merged ?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,188,2020-03-18T15:26:26Z,2020-09-24T07:15:26Z,2020-09-24T17:22:24Z,MERGED,True,591,230,11,https://github.com/MicK7,Do not call vararg C functions from Fortran (JIRA CGNS-179) #182,23,[],https://github.com/CGNS/CGNS/pull/188,https://github.com/brtnfld,9,https://github.com/CGNS/CGNS/pull/188#issuecomment-692189053,"Please see rationals on JIRA CGNS-179:
https://cgnsorg.atlassian.net/browse/CGNS-179

Duplicate of #182 but with the branch on main repository","Let me look at agian, I'll do it this week.",True,{'THUMBS_UP': ['https://github.com/MicK7']}
CGNS/CGNS,https://github.com/CGNS/CGNS,188,2020-03-18T15:26:26Z,2020-09-24T07:15:26Z,2020-09-24T17:22:24Z,MERGED,True,591,230,11,https://github.com/MicK7,Do not call vararg C functions from Fortran (JIRA CGNS-179) #182,23,[],https://github.com/CGNS/CGNS/pull/188,https://github.com/MicK7,10,https://github.com/CGNS/CGNS/pull/188#issuecomment-697214800,"Please see rationals on JIRA CGNS-179:
https://cgnsorg.atlassian.net/browse/CGNS-179

Duplicate of #182 but with the branch on main repository",🆙,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,188,2020-03-18T15:26:26Z,2020-09-24T07:15:26Z,2020-09-24T17:22:24Z,MERGED,True,591,230,11,https://github.com/MicK7,Do not call vararg C functions from Fortran (JIRA CGNS-179) #182,23,[],https://github.com/CGNS/CGNS/pull/188,https://github.com/pini-gh,11,https://github.com/CGNS/CGNS/pull/188#issuecomment-698479238,"Please see rationals on JIRA CGNS-179:
https://cgnsorg.atlassian.net/browse/CGNS-179

Duplicate of #182 but with the branch on main repository",Thanks!,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,189,2020-03-18T17:32:00Z,2020-03-24T14:00:48Z,2020-03-24T14:00:53Z,MERGED,True,42,35,1,https://github.com/gsjaardema,Clean up CMakeLists.txt,11,[],https://github.com/CGNS/CGNS/pull/189,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/189,"A few modifications to hopefully make configuration easier.

Add CMP0074 policy which eliminates potentially confusing warning about ignoring HDF5_ROOT if it is set.   The variable is used in the legacy find_package call, so issuing a warning saying it is ignored could cause user to undefined that variable and change the results of the legacy find_package (Voice of experience...)
The set calls that were deleted (lines 234 to 238) are repeated later in the file so are redundant.
I don't see anywhere that HDF5_LIBRARY_DIRS is set; I think it should be HDF5_LIBRARY

It looks like HDF5_DIR is used if the HDF5 build/installation used CMake and HDF5_ROOT is used if HDF5 used a configure-based build.","A few modifications to hopefully make configuration easier.

Add CMP0074 policy which eliminates potentially confusing warning about ignoring HDF5_ROOT if it is set.   The variable is used in the legacy find_package call, so issuing a warning saying it is ignored could cause user to undefined that variable and change the results of the legacy find_package (Voice of experience...)
The set calls that were deleted (lines 234 to 238) are repeated later in the file so are redundant.
I don't see anywhere that HDF5_LIBRARY_DIRS is set; I think it should be HDF5_LIBRARY

It looks like HDF5_DIR is used if the HDF5 build/installation used CMake and HDF5_ROOT is used if HDF5 used a configure-based build.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,189,2020-03-18T17:32:00Z,2020-03-24T14:00:48Z,2020-03-24T14:00:53Z,MERGED,True,42,35,1,https://github.com/gsjaardema,Clean up CMakeLists.txt,11,[],https://github.com/CGNS/CGNS/pull/189,https://github.com/gsjaardema,2,https://github.com/CGNS/CGNS/pull/189#issuecomment-601251110,"A few modifications to hopefully make configuration easier.

Add CMP0074 policy which eliminates potentially confusing warning about ignoring HDF5_ROOT if it is set.   The variable is used in the legacy find_package call, so issuing a warning saying it is ignored could cause user to undefined that variable and change the results of the legacy find_package (Voice of experience...)
The set calls that were deleted (lines 234 to 238) are repeated later in the file so are redundant.
I don't see anywhere that HDF5_LIBRARY_DIRS is set; I think it should be HDF5_LIBRARY

It looks like HDF5_DIR is used if the HDF5 build/installation used CMake and HDF5_ROOT is used if HDF5 used a configure-based build.",I will stop making changes now.  Sorry for the churn.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,189,2020-03-18T17:32:00Z,2020-03-24T14:00:48Z,2020-03-24T14:00:53Z,MERGED,True,42,35,1,https://github.com/gsjaardema,Clean up CMakeLists.txt,11,[],https://github.com/CGNS/CGNS/pull/189,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/189#issuecomment-601770134,"A few modifications to hopefully make configuration easier.

Add CMP0074 policy which eliminates potentially confusing warning about ignoring HDF5_ROOT if it is set.   The variable is used in the legacy find_package call, so issuing a warning saying it is ignored could cause user to undefined that variable and change the results of the legacy find_package (Voice of experience...)
The set calls that were deleted (lines 234 to 238) are repeated later in the file so are redundant.
I don't see anywhere that HDF5_LIBRARY_DIRS is set; I think it should be HDF5_LIBRARY

It looks like HDF5_DIR is used if the HDF5 build/installation used CMake and HDF5_ROOT is used if HDF5 used a configure-based build.",I'll run these changes through our Daily testing this weekend.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,189,2020-03-18T17:32:00Z,2020-03-24T14:00:48Z,2020-03-24T14:00:53Z,MERGED,True,42,35,1,https://github.com/gsjaardema,Clean up CMakeLists.txt,11,[],https://github.com/CGNS/CGNS/pull/189,https://github.com/brtnfld,4,https://github.com/CGNS/CGNS/pull/189#issuecomment-601841814,"A few modifications to hopefully make configuration easier.

Add CMP0074 policy which eliminates potentially confusing warning about ignoring HDF5_ROOT if it is set.   The variable is used in the legacy find_package call, so issuing a warning saying it is ignored could cause user to undefined that variable and change the results of the legacy find_package (Voice of experience...)
The set calls that were deleted (lines 234 to 238) are repeated later in the file so are redundant.
I don't see anywhere that HDF5_LIBRARY_DIRS is set; I think it should be HDF5_LIBRARY

It looks like HDF5_DIR is used if the HDF5 build/installation used CMake and HDF5_ROOT is used if HDF5 used a configure-based build.","The current branch fails for me when building with a cmake build of HDF5,
-- HDF5 find comps: C;static
-- HDF5 C libs:1 static:1 and shared:
-- HDF5-1.13.0 found: INC= TOOLS=/home/brtnfld/packages/hdf5/build/hdf5/bin HDF5_BUILD_SHARED_LIBS=YES
-- HDF5 link libs: hdf5::hdf5-static
[  6%] Building C object src/CMakeFiles/cgns_static.dir/cgio_ftoc.c.o
cd /home/brtnfld/packages/CGNS/build/src && /home/brtnfld/packages/mpich/bin/mpicc  -DLOWERCASE_ -I/home/brtnfld/packages/CGNS/build/src -I/home/brtnfld/packages/CGNS/src  -g -g   -o CMakeFiles/cgns_static.dir/cgio_ftoc.c.o   -c /home/brtnfld/packages/CGNS/src/cgio_ftoc.c
/home/brtnfld/packages/CGNS/src/adfh/ADFH.c:42:10: fatal error: hdf5.h: No such file or directory
#include ""hdf5.h""
^~~~~~~~
compilation terminated.
make[2]: *** [src/CMakeFiles/cgns_static.dir/build.make:141: src/CMakeFiles/cgns_static.dir/adfh/ADFH.c.o] Error 1
make[2]: *** Waiting for unfinished jobs....
/home/brtnfld/packages/CGNS/src/cgns_internals.c:38:10: fatal error: hdf5.h: No such file or directory
#include ""hdf5.h""
^~~~~~~~
compilation terminated.
make[2]: *** [src/CMakeFiles/cgns_static.dir/build.make:76: src/CMakeFiles/cgns_static.dir/cgns_internals.c.o] Error 1
/home/brtnfld/packages/CGNS/src/cgnslib.c:57:11: fatal error: hdf5.h: No such file or directory
include ""hdf5.h""
       ^~~~~~~~

compilation terminated.
make[2]: *** [src/CMakeFiles/cgns_static.dir/build.make:102: src/CMakeFiles/cgns_static.dir/cgnslib.c.o] Error 1
/home/brtnfld/packages/CGNS/src/pcgnslib.c:30:10: fatal error: hdf5.h: No such file or directory
#include ""hdf5.h""
My build:
cmake 
-D CMAKE_C_COMPILER:PATH=""$MPI/mpicc"" 
-D CMAKE_C_FLAGS:STRING=""-g"" 
-D CMAKE_Fortran_FLAGS:STRING=""-g"" 
-D CMAKE_BUILD_TYPE:STRING=""Debug"" 
-D CMAKE_Fortran_COMPILER:PATH=""$MPI/mpif90"" 
-D CGNS_BUILD_SHARED:BOOL=OFF 
-D CGNS_USE_SHARED:BOOL=OFF 
-D CMAKE_STATIC_LINKER_FLAGS:STRING="""" 
-D CGNS_ENABLE_TESTS:BOOL=ON 
-D CGNS_BUILD_CGNSTOOLS:BOOL=ON 
-D CGNS_ENABLE_SCOPING:BOOL=OFF 
-D CMAKE_INSTALL_PREFIX:PATH=""./"" 
-D CMAKE_EXE_LINKER_FLAGS:STRING="""" 
-D CMAKE_PREFIX_PATH=$HDF5 
-D CGNS_ENABLE_PARALLEL:BOOL=ON 
-D HDF5_NEED_MPI:BOOL=ON 
-D CGNS_ENABLE_LFS:BOOL=OFF 
-D CGNS_ENABLE_HDF5:BOOL=ON 
-D HDF5_NEED_ZLIB:BOOL=ON 
-D HDF5_NEED_SZIP:BOOL=OFF 
-D CGNS_ENABLE_FORTRAN:BOOL=ON 
-D CGNS_ENABLE_64BIT:BOOL=ON 
$CGNS",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,190,2020-03-18T19:19:33Z,2020-03-18T19:51:31Z,2020-03-18T19:51:46Z,CLOSED,False,3,7,1,https://github.com/brtnfld,[NO MERGE] Travis check,11,[],https://github.com/CGNS/CGNS/pull/190,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/190,PR to determine why the HDF5 build is failing in TravisCI,PR to determine why the HDF5 build is failing in TravisCI,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,191,2020-03-18T19:53:19Z,2020-03-19T21:01:47Z,2020-03-19T21:01:47Z,CLOSED,False,1,1,1,https://github.com/brtnfld,TravisCI fix,10,[],https://github.com/CGNS/CGNS/pull/191,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/191,fixed travisCI builds of hdf5 1.8,fixed travisCI builds of hdf5 1.8,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,191,2020-03-18T19:53:19Z,2020-03-19T21:01:47Z,2020-03-19T21:01:47Z,CLOSED,False,1,1,1,https://github.com/brtnfld,TravisCI fix,10,[],https://github.com/CGNS/CGNS/pull/191,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/191#issuecomment-600833697,fixed travisCI builds of hdf5 1.8,"Issue with HDF5_1_8, merge only if not fixed soon.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,191,2020-03-18T19:53:19Z,2020-03-19T21:01:47Z,2020-03-19T21:01:47Z,CLOSED,False,1,1,1,https://github.com/brtnfld,TravisCI fix,10,[],https://github.com/CGNS/CGNS/pull/191,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/191#issuecomment-601414906,fixed travisCI builds of hdf5 1.8,Being fixed in HDF5,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,192,2020-03-20T15:41:21Z,2020-03-20T20:14:38Z,2020-03-20T20:14:40Z,MERGED,True,9,9,5,https://github.com/gsjaardema,Spelling fixes,5,[],https://github.com/CGNS/CGNS/pull/192,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/192,A few scattered spelling fixes.,A few scattered spelling fixes.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,193,2020-03-24T12:29:08Z,2020-03-30T15:51:51Z,2020-03-31T10:10:03Z,MERGED,True,71,25,2,https://github.com/MicK7,JIRA CGNS-38,3,[],https://github.com/CGNS/CGNS/pull/193,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/193,https://cgnsorg.atlassian.net/browse/CGNS-38,https://cgnsorg.atlassian.net/browse/CGNS-38,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,194,2020-03-31T11:04:03Z,2020-04-03T17:31:31Z,2020-04-03T17:55:46Z,MERGED,True,1,1,1,https://github.com/MicK7,Upgrade minimum required version for cmake,1,[],https://github.com/CGNS/CGNS/pull/194,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/194,Nowadays Hdf5 requires cmake 3.12. Thus a little upgrade to require at least a 3.8 version of cmake in CGNS library seems sane.,Nowadays Hdf5 requires cmake 3.12. Thus a little upgrade to require at least a 3.8 version of cmake in CGNS library seems sane.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,194,2020-03-31T11:04:03Z,2020-04-03T17:31:31Z,2020-04-03T17:55:46Z,MERGED,True,1,1,1,https://github.com/MicK7,Upgrade minimum required version for cmake,1,[],https://github.com/CGNS/CGNS/pull/194,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/194#issuecomment-608508054,Nowadays Hdf5 requires cmake 3.12. Thus a little upgrade to require at least a 3.8 version of cmake in CGNS library seems sane.,"I don't think we should bump the requirement unless we actually require it due to a newer CMake feature (and there are some newer features that we should probably make use of). Some of the DOE machines don't have newer versions of CMake readily available and use autotools to build HDF5.
Although it is true that we don't test with older CMake versions, so we don't guarantee that older CMake versions will work.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,194,2020-03-31T11:04:03Z,2020-04-03T17:31:31Z,2020-04-03T17:55:46Z,MERGED,True,1,1,1,https://github.com/MicK7,Upgrade minimum required version for cmake,1,[],https://github.com/CGNS/CGNS/pull/194,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/194#issuecomment-608535127,Nowadays Hdf5 requires cmake 3.12. Thus a little upgrade to require at least a 3.8 version of cmake in CGNS library seems sane.,"CMake 3.8 is needed for compilation with Visual Studio according to Microsoft documentation. Indeed it introduced a server mode that is required by VS. Since this CMake is already 3 years old and that no older CMake is used for testing, it is a safe bet even for old machines that can find it in backports. Presently we do garantee that it works for DOE but since they use autotools, I don't think it will change anything.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,195,2020-04-05T17:54:44Z,2020-04-09T15:49:01Z,2020-04-09T15:49:01Z,MERGED,True,21,10,6,https://github.com/MicK7,Small improvements,6,[],https://github.com/CGNS/CGNS/pull/195,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/195,"Add environment variable to prevent cgnsview from locking CGNS/HDF5 files and let other tools like cgnscheck do their job
Comment unlink in fortran test that creates problem on some platforms
Rewrite initialization of stack array to remove GCC warning
Add some missing CGNS library versions.
Add a strcpy to prevent overflow with label shorter than ADF_NAME_LENGTH. (Internally it seems that label attribute has a fixed size of same length as the name attribute.)","Add environment variable to prevent cgnsview from locking CGNS/HDF5 files and let other tools like cgnscheck do their job
Comment unlink in fortran test that creates problem on some platforms
Rewrite initialization of stack array to remove GCC warning
Add some missing CGNS library versions.
Add a strcpy to prevent overflow with label shorter than ADF_NAME_LENGTH. (Internally it seems that label attribute has a fixed size of same length as the name attribute.)",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,195,2020-04-05T17:54:44Z,2020-04-09T15:49:01Z,2020-04-09T15:49:01Z,MERGED,True,21,10,6,https://github.com/MicK7,Small improvements,6,[],https://github.com/CGNS/CGNS/pull/195,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/195#issuecomment-611601164,"Add environment variable to prevent cgnsview from locking CGNS/HDF5 files and let other tools like cgnscheck do their job
Comment unlink in fortran test that creates problem on some platforms
Rewrite initialization of stack array to remove GCC warning
Add some missing CGNS library versions.
Add a strcpy to prevent overflow with label shorter than ADF_NAME_LENGTH. (Internally it seems that label attribute has a fixed size of same length as the name attribute.)","Yes and maybe create a template Pull Request that lists what to check before release would be useful.
This is what guys from kitware do before releasing ParaView.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,195,2020-04-05T17:54:44Z,2020-04-09T15:49:01Z,2020-04-09T15:49:01Z,MERGED,True,21,10,6,https://github.com/MicK7,Small improvements,6,[],https://github.com/CGNS/CGNS/pull/195,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/195#issuecomment-611601371,"Add environment variable to prevent cgnsview from locking CGNS/HDF5 files and let other tools like cgnscheck do their job
Comment unlink in fortran test that creates problem on some platforms
Rewrite initialization of stack array to remove GCC warning
Add some missing CGNS library versions.
Add a strcpy to prevent overflow with label shorter than ADF_NAME_LENGTH. (Internally it seems that label attribute has a fixed size of same length as the name attribute.)",@brtnfld Thanks for reviewing,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,196,2020-04-18T19:53:30Z,2020-07-02T15:14:19Z,2020-07-07T15:41:18Z,MERGED,True,826,102,12,https://github.com/MicK7,Mapping X4 X8 for hdf5,6,[],https://github.com/CGNS/CGNS/pull/196,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/196,"Mapping of X4/X8 was lost when moving from ADF to HDF5.
This PR proposes to reintroduce it as an experimental feature.
It uses an H5T_COMPOUND and is compatible with standard C99 complex type.
The mapping is similar to what is done in other library like h5py.
Depending on application, people can still store each part of complex number in separate arrays by prefixing with Re or Im the name of the array.
Atlassian CGNS-202","Mapping of X4/X8 was lost when moving from ADF to HDF5.
This PR proposes to reintroduce it as an experimental feature.
It uses an H5T_COMPOUND and is compatible with standard C99 complex type.
The mapping is similar to what is done in other library like h5py.
Depending on application, people can still store each part of complex number in separate arrays by prefixing with Re or Im the name of the array.
Atlassian CGNS-202",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,196,2020-04-18T19:53:30Z,2020-07-02T15:14:19Z,2020-07-07T15:41:18Z,MERGED,True,826,102,12,https://github.com/MicK7,Mapping X4 X8 for hdf5,6,[],https://github.com/CGNS/CGNS/pull/196,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/196#issuecomment-616636663,"Mapping of X4/X8 was lost when moving from ADF to HDF5.
This PR proposes to reintroduce it as an experimental feature.
It uses an H5T_COMPOUND and is compatible with standard C99 complex type.
The mapping is similar to what is done in other library like h5py.
Depending on application, people can still store each part of complex number in separate arrays by prefixing with Re or Im the name of the array.
Atlassian CGNS-202",Yes I renamed I in J before realising that I could just undef it. Thus there is no way that it could affect clients adversely as I also did the undef.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,196,2020-04-18T19:53:30Z,2020-07-02T15:14:19Z,2020-07-07T15:41:18Z,MERGED,True,826,102,12,https://github.com/MicK7,Mapping X4 X8 for hdf5,6,[],https://github.com/CGNS/CGNS/pull/196,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/196#issuecomment-653728296,"Mapping of X4/X8 was lost when moving from ADF to HDF5.
This PR proposes to reintroduce it as an experimental feature.
It uses an H5T_COMPOUND and is compatible with standard C99 complex type.
The mapping is similar to what is done in other library like h5py.
Depending on application, people can still store each part of complex number in separate arrays by prefixing with Re or Im the name of the array.
Atlassian CGNS-202","According to IBM xl documentation (https://www-01.ibm.com/servers/resourcelink/svc00100.nsf/pages/zOSV2R3sc147308/$file/cbclx01_v2r3.pdf), page 141, those lines are valid and should not fail. Which version of xl compiler does fail ?
Concerning PGI compiler, was the -c9x flag given to pgcc ?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,196,2020-04-18T19:53:30Z,2020-07-02T15:14:19Z,2020-07-07T15:41:18Z,MERGED,True,826,102,12,https://github.com/MicK7,Mapping X4 X8 for hdf5,6,[],https://github.com/CGNS/CGNS/pull/196,https://github.com/brtnfld,4,https://github.com/CGNS/CGNS/pull/196#issuecomment-653786241,"Mapping of X4/X8 was lost when moving from ADF to HDF5.
This PR proposes to reintroduce it as an experimental feature.
It uses an H5T_COMPOUND and is compatible with standard C99 complex type.
The mapping is similar to what is done in other library like h5py.
Depending on application, people can still store each part of complex number in separate arrays by prefixing with Re or Im the name of the array.
Atlassian CGNS-202","xl compiler, 15.1
-c9x was not used with the pgi compiler.
Sun compilers also have an problem:
""cgns_internals.c"", line 5839: warning: implicit function declaration: real
""cgns_internals.c"", line 5839: left operand must be modifiable lvalue: op ""=""
""cgns_internals.c"", line 5840: warning: implicit function declaration: imag
""cgns_internals.c"", line 5840: left operand must be modifiable lvalue: op ""=""
""cgns_internals.c"", line 5853: left operand must be modifiable lvalue: op ""=""
""cgns_internals.c"", line 5854: left operand must be modifiable lvalue: op ""=""",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,196,2020-04-18T19:53:30Z,2020-07-02T15:14:19Z,2020-07-07T15:41:18Z,MERGED,True,826,102,12,https://github.com/MicK7,Mapping X4 X8 for hdf5,6,[],https://github.com/CGNS/CGNS/pull/196,https://github.com/MicK7,5,https://github.com/CGNS/CGNS/pull/196#issuecomment-653809284,"Mapping of X4/X8 was lost when moving from ADF to HDF5.
This PR proposes to reintroduce it as an experimental feature.
It uses an H5T_COMPOUND and is compatible with standard C99 complex type.
The mapping is similar to what is done in other library like h5py.
Depending on application, people can still store each part of complex number in separate arrays by prefixing with Re or Im the name of the array.
Atlassian CGNS-202","For xl compiler, the required options are:
-qlanglvl=c99complex -qlanglvl=c99complexheader -qlanglvl=extended",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,196,2020-04-18T19:53:30Z,2020-07-02T15:14:19Z,2020-07-07T15:41:18Z,MERGED,True,826,102,12,https://github.com/MicK7,Mapping X4 X8 for hdf5,6,[],https://github.com/CGNS/CGNS/pull/196,https://github.com/MicK7,6,https://github.com/CGNS/CGNS/pull/196#issuecomment-653809982,"Mapping of X4/X8 was lost when moving from ADF to HDF5.
This PR proposes to reintroduce it as an experimental feature.
It uses an H5T_COMPOUND and is compatible with standard C99 complex type.
The mapping is similar to what is done in other library like h5py.
Depending on application, people can still store each part of complex number in separate arrays by prefixing with Re or Im the name of the array.
Atlassian CGNS-202","For Sun compiler, the -std=c99 or -xlang=c99 is required.
Maybe config.ac should have this line:
AC_PROG_CC_C99
and CMake :
set (CMAKE_C_STANDARD 99)",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,196,2020-04-18T19:53:30Z,2020-07-02T15:14:19Z,2020-07-07T15:41:18Z,MERGED,True,826,102,12,https://github.com/MicK7,Mapping X4 X8 for hdf5,6,[],https://github.com/CGNS/CGNS/pull/196,https://github.com/brtnfld,7,https://github.com/CGNS/CGNS/pull/196#issuecomment-654276489,"Mapping of X4/X8 was lost when moving from ADF to HDF5.
This PR proposes to reintroduce it as an experimental feature.
It uses an H5T_COMPOUND and is compatible with standard C99 complex type.
The mapping is similar to what is done in other library like h5py.
Depending on application, people can still store each part of complex number in separate arrays by prefixing with Re or Im the name of the array.
Atlassian CGNS-202","I'll try that. You should add to the Release notes that a C99 compiler is required, starting with this release (at least I think this is the case, I've not tried it with C89).",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,196,2020-04-18T19:53:30Z,2020-07-02T15:14:19Z,2020-07-07T15:41:18Z,MERGED,True,826,102,12,https://github.com/MicK7,Mapping X4 X8 for hdf5,6,[],https://github.com/CGNS/CGNS/pull/196,https://github.com/MicK7,8,https://github.com/CGNS/CGNS/pull/196#issuecomment-654842820,"Mapping of X4/X8 was lost when moving from ADF to HDF5.
This PR proposes to reintroduce it as an experimental feature.
It uses an H5T_COMPOUND and is compatible with standard C99 complex type.
The mapping is similar to what is done in other library like h5py.
Depending on application, people can still store each part of complex number in separate arrays by prefixing with Re or Im the name of the array.
Atlassian CGNS-202","I checked with PGI 20.1 and it works. The older version of PGI claim to support C99 but it does not handle ""real"" and ""imag"" operator thus simple CMake or autoconf checking are not working.
I may add a configure check to enable complex.h at compile time with a MACRO.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,197,2020-05-15T13:50:01Z,2020-05-15T16:33:49Z,2020-05-15T16:33:50Z,MERGED,True,1,1,1,https://github.com/mfolusiak,Fortran API: Correct double !! comment,1,[],https://github.com/CGNS/CGNS/pull/197,https://github.com/mfolusiak,1,https://github.com/CGNS/CGNS/pull/197,"Fortran API: Correct double !! comment, otherwise OMP compilers get confused.","Fortran API: Correct double !! comment, otherwise OMP compilers get confused.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,198,2020-06-18T10:25:37Z,2020-06-19T17:07:26Z,2020-06-19T17:07:26Z,MERGED,True,1,1,1,https://github.com/NovA80,Fix cgio_copy_node(),1,[],https://github.com/CGNS/CGNS/pull/198,https://github.com/NovA80,1,https://github.com/CGNS/CGNS/pull/198,cgio_copy_node() fails with INVALID_DATA_TYPE error when HDF5 backend is employed,cgio_copy_node() fails with INVALID_DATA_TYPE error when HDF5 backend is employed,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,199,2020-06-18T14:25:58Z,2020-08-10T21:08:08Z,2020-08-10T21:08:09Z,MERGED,True,4,0,4,https://github.com/NovA80,Allow relocation of cgnstools dir,3,[],https://github.com/CGNS/CGNS/pull/199,https://github.com/NovA80,1,https://github.com/CGNS/CGNS/pull/199,"If GUI cgnstools (cgnsview, cgnsplot, etc) are installed with make install under Linux, they became broken if moved into different dir. The startup shell scripts just don't check a default resource dir. Note, the Windows bat-script do check that correctly and cgnstools can be easily moved around.","If GUI cgnstools (cgnsview, cgnsplot, etc) are installed with make install under Linux, they became broken if moved into different dir. The startup shell scripts just don't check a default resource dir. Note, the Windows bat-script do check that correctly and cgnstools can be easily moved around.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,200,2020-06-18T14:48:19Z,2020-07-28T19:28:17Z,2020-07-28T19:28:17Z,MERGED,True,75,5,11,https://github.com/NovA80,Add .desktop startup files for GUI cgnstools,4,[],https://github.com/CGNS/CGNS/pull/200,https://github.com/NovA80,1,https://github.com/CGNS/CGNS/pull/200,"A modern Linux prevents starting GUI apps from default file manager via executable file. This is allowed from terminal only or using relevant .desktop file. This commit adds such sample .desktop files for cgnstools.
That .desktop files can be extended for use full paths and added into XDG applications menu. Scripts can be provided to user for that. But I'm not sure whether this is really needed for everybody. It possibly be better if DEB/RPM package managers will arrange such an close integration with desktop.","A modern Linux prevents starting GUI apps from default file manager via executable file. This is allowed from terminal only or using relevant .desktop file. This commit adds such sample .desktop files for cgnstools.
That .desktop files can be extended for use full paths and added into XDG applications menu. Scripts can be provided to user for that. But I'm not sure whether this is really needed for everybody. It possibly be better if DEB/RPM package managers will arrange such an close integration with desktop.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,201,2020-06-18T14:51:54Z,2020-06-23T07:11:40Z,2020-06-23T07:11:40Z,MERGED,True,7,6,2,https://github.com/NovA80,Fix configuration of base scoping,2,[],https://github.com/CGNS/CGNS/pull/201,https://github.com/NovA80,1,https://github.com/CGNS/CGNS/pull/201,./configure script provides two identically named options --enable-scope for setting different flags CG_BUILD_SCOPE & CG_BUILD_BASESCOPE. Add --enable-basescope for the latter.,./configure script provides two identically named options --enable-scope for setting different flags CG_BUILD_SCOPE & CG_BUILD_BASESCOPE. Add --enable-basescope for the latter.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,202,2020-07-08T15:19:47Z,2020-08-09T05:13:20Z,2020-08-09T06:17:59Z,MERGED,True,324,89,10,https://github.com/MicK7,fix compiler issues,19,[],https://github.com/CGNS/CGNS/pull/202,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/202,"Fix compiler issues.
Check C99 Complex support at compile time to enable it.","Fix compiler issues.
Check C99 Complex support at compile time to enable it.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,202,2020-07-08T15:19:47Z,2020-08-09T05:13:20Z,2020-08-09T06:17:59Z,MERGED,True,324,89,10,https://github.com/MicK7,fix compiler issues,19,[],https://github.com/CGNS/CGNS/pull/202,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/202#issuecomment-656231184,"Fix compiler issues.
Check C99 Complex support at compile time to enable it.","It does not seem to add the necessary flags for the xl compiler. It fixed the issue on Suns, and PGI**
**I think, I'm having an issue with the HDF5 build.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,202,2020-07-08T15:19:47Z,2020-08-09T05:13:20Z,2020-08-09T06:17:59Z,MERGED,True,324,89,10,https://github.com/MicK7,fix compiler issues,19,[],https://github.com/CGNS/CGNS/pull/202,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/202#issuecomment-656317028,"Fix compiler issues.
Check C99 Complex support at compile time to enable it.",@brtnfld Can you report the failure message for the xl compiler ?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,202,2020-07-08T15:19:47Z,2020-08-09T05:13:20Z,2020-08-09T06:17:59Z,MERGED,True,324,89,10,https://github.com/MicK7,fix compiler issues,19,[],https://github.com/CGNS/CGNS/pull/202,https://github.com/brtnfld,4,https://github.com/CGNS/CGNS/pull/202#issuecomment-656319526,"Fix compiler issues.
Check C99 Complex support at compile time to enable it.","/opt/xl/xlf15.1_xlc13.1/xlc -g -g   -I.  -o  lib/cgns_error.o -c cgns_error.c
/opt/xl/xlf15.1_xlc13.1/xlc -g -g   -I.   -o  lib/cgns_internals.o -c cgns_internals.c
""cgns_internals.c"", line 5843.11: 1506-025 (S) Operand must be a modifiable lvalue.
""cgns_internals.c"", line 5844.11: 1506-025 (S) Operand must be a modifiable lvalue.
""cgns_internals.c"", line 5863.11: 1506-025 (S) Operand must be a modifiable lvalue.
""cgns_internals.c"", line 5864.11: 1506-025 (S) Operand must be a modifiable lvalue.
make: *** [lib/cgns_internals.o] Error 1
CGNS BUILD #FAILED
/opt/xl/xlf15.1_xlc13.1/xlc -g -g   -I.   -o  lib/cgns_internals.o -c cgns_internals.c
""cgns_internals.c"", line 5843.11: 1506-025 (S) Operand must be a modifiable lvalue.
""cgns_internals.c"", line 5844.11: 1506-025 (S) Operand must be a modifiable lvalue.
""cgns_internals.c"", line 5863.11: 1506-025 (S) Operand must be a modifiable lvalue.
""cgns_internals.c"", line 5864.11: 1506-025 (S) Operand must be a modifiable lvalue.
make: *** [lib/cgns_internals.o] Error 1
CGNS INSTALL #FAILED
/opt/xl/xlf15.1_xlc13.1/xlc -g -g   -I.   -o  lib/cgns_internals.o -c cgns_internals.c
""cgns_internals.c"", line 5843.11: 1506-025 (S) Operand must be a modifiable lvalue.
""cgns_internals.c"", line 5844.11: 1506-025 (S) Operand must be a modifiable lvalue.
""cgns_internals.c"", line 5863.11: 1506-025 (S) Operand must be a modifiable lvalue.
""cgns_internals.c"", line 5864.11: 1506-025 (S) Operand must be a modifiable lvalue.
make: *** [lib/cgns_internals.o] Error 1
CGNS CMAKE TESTING #FAILED
/opt/xl/xlf15.1_xlc13.1/xlc -g -g   -I.   -o  lib/cgns_internals.o -c cgns_internals.c
""cgns_internals.c"", line 5843.11: 1506-025 (S) Operand must be a modifiable lvalue.
""cgns_internals.c"", line 5844.11: 1506-025 (S) Operand must be a modifiable lvalue.
""cgns_internals.c"", line 5863.11: 1506-025 (S) Operand must be a modifiable lvalue.
""cgns_internals.c"", line 5864.11: 1506-025 (S) Operand must be a modifiable lvalue.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,202,2020-07-08T15:19:47Z,2020-08-09T05:13:20Z,2020-08-09T06:17:59Z,MERGED,True,324,89,10,https://github.com/MicK7,fix compiler issues,19,[],https://github.com/CGNS/CGNS/pull/202,https://github.com/MicK7,5,https://github.com/CGNS/CGNS/pull/202#issuecomment-658353797,"Fix compiler issues.
Check C99 Complex support at compile time to enable it.","@brtnfld Thank you for the failure log.
Could you also provide the cmake trace with the last change ?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,202,2020-07-08T15:19:47Z,2020-08-09T05:13:20Z,2020-08-09T06:17:59Z,MERGED,True,324,89,10,https://github.com/MicK7,fix compiler issues,19,[],https://github.com/CGNS/CGNS/pull/202,https://github.com/brtnfld,6,https://github.com/CGNS/CGNS/pull/202#issuecomment-658388278,"Fix compiler issues.
Check C99 Complex support at compile time to enable it.","Our CGNS daily testing on that machine is failing because the cmake version is to old, let me fix that so it runs correctly tonight.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,202,2020-07-08T15:19:47Z,2020-08-09T05:13:20Z,2020-08-09T06:17:59Z,MERGED,True,324,89,10,https://github.com/MicK7,fix compiler issues,19,[],https://github.com/CGNS/CGNS/pull/202,https://github.com/brtnfld,7,https://github.com/CGNS/CGNS/pull/202#issuecomment-658425490,"Fix compiler issues.
Check C99 Complex support at compile time to enable it.","For cmake builds:
[  5%] Building C object src/CMakeFiles/cgns_static.dir/cgio_ftoc.c.o
/opt/xl/xlc/13.1.0.0/xlC/13.1.0/bin/.orig/xlc: 1501-294 (S) No input file specified. Please use -qhelp for more information.
/opt/xl/xlc/13.1.0.0/xlC/13.1.0/bin/.orig/xlc: 1501-294 (S) No input file specified. Please use -qhelp for more information.
/opt/xl/xlc/13.1.0.0/xlC/13.1.0/bin/.orig/xlc: 1501-294 (S) No input file specified. Please use -qhelp for more information.
/opt/xl/xlc/13.1.0.0/xlC/13.1.0/bin/.orig/xlc: 1501-294 (S) No input file specified. Please use -qhelp for more information.
/opt/xl/xlc/13.1.0.0/xlC/13.1.0/bin/.orig/xlc: 1501-294 (S) No input file specified. Please use -qhelp for more information.
/opt/xl/xlc/13.1.0.0/xlC/13.1.0/bin/.orig/xlc: 1501-294 (S) No input file specified. Please use -qhelp for more information.
/opt/xl/xlc/13.1.0.0/xlC/13.1.0/bin/.orig/xlc: 1501-294 (S) No input file specified. Please use -qhelp for more information.
/bin/sh: -qlanglvl=extc99: command not found
/bin/sh: -qlanglvl=extc99: command not found
/bin/sh: -qlanglvl=extc99: command not found
/bin/sh: -qlanglvl=extc99: command not found
/bin/sh: -qlanglvl=extc99: command not found
/bin/sh: -qlanglvl=extc99: command not found
/bin/sh: -qlanglvl=extc99: command not found
gmake[2]: *** [src/CMakeFiles/cgns_static.dir/cgns_internals.c.o] Error 127
gmake[2]: *** Waiting for unfinished jobs....
gmake[2]: *** [src/CMakeFiles/cgns_static.dir/cgns_error.c.o] Error 127
gmake[2]: *** [src/CMakeFiles/cgns_static.dir/cgns_io.c.o] Error 127
gmake[2]: *** [src/CMakeFiles/cgns_static.dir/adf/ADF_interface.c.o] Error 127
gmake[2]: *** [src/CMakeFiles/cgns_static.dir/adf/ADF_internals.c.o] Error 127/opt/xl/xlc/13.1.0.0/xlC/13.1.0/bin/.orig/xlc: 1501-294 (S) No input fil
e specified. Please use -qhelp for more information.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,202,2020-07-08T15:19:47Z,2020-08-09T05:13:20Z,2020-08-09T06:17:59Z,MERGED,True,324,89,10,https://github.com/MicK7,fix compiler issues,19,[],https://github.com/CGNS/CGNS/pull/202,https://github.com/brtnfld,8,https://github.com/CGNS/CGNS/pull/202#issuecomment-658426898,"Fix compiler issues.
Check C99 Complex support at compile time to enable it.","It looks like it is putting -qlanglvl twice:
[  1%] Building C object src/CMakeFiles/cgns_static.dir/cgns_error.c.o
cd /home/brtnfld/scratch/hdfdts/scripts/external/test.1/CGNS_build/src && /opt/xl/xlf15.1_xlc13.1/xlc  -I/home/brtnfld/scratch/hdfdts/scripts/external/test.1/CGNS_build/src -I/home/brtnfld/scratch/hdfdts/scripts/external/test.1/CGNS_SRC/src  -g;-qlanglvl=extc99 -g   -qlanglvl=extc99 -o CMakeFiles/cgns_static.dir/cgns_error.c.o   -c /home/brtnfld/scratch/hdfdts/scripts/external/test.1/CGNS_SRC/src/cgns_error.c
/opt/xl/xlc/13.1.0.0/xlC/13.1.0/bin/.orig/xlc: 1501-294 (S) No input file specified. Please use -qhelp for more information.
/bin/sh: -qlanglvl=extc99: command not found",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,202,2020-07-08T15:19:47Z,2020-08-09T05:13:20Z,2020-08-09T06:17:59Z,MERGED,True,324,89,10,https://github.com/MicK7,fix compiler issues,19,[],https://github.com/CGNS/CGNS/pull/202,https://github.com/MicK7,9,https://github.com/CGNS/CGNS/pull/202#issuecomment-659432539,"Fix compiler issues.
Check C99 Complex support at compile time to enable it.",@brtnfld the issue was coming from the semi-colon. I don't know why the compiler options get duplicated but it should not be an issue. It should work properly now.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,202,2020-07-08T15:19:47Z,2020-08-09T05:13:20Z,2020-08-09T06:17:59Z,MERGED,True,324,89,10,https://github.com/MicK7,fix compiler issues,19,[],https://github.com/CGNS/CGNS/pull/202,https://github.com/brtnfld,10,https://github.com/CGNS/CGNS/pull/202#issuecomment-660277427,"Fix compiler issues.
Check C99 Complex support at compile time to enable it.","-qlanglvl=extc99 does not solve the error:
/opt/xl/xlf15.1_xlc13.1/xlc  -I/home/brtnfld/scratch/hdfdts/scripts/external/test.1/CGNS_build/src -I/home/brtnfld/scratch/hdfdts/scripts/external/test.1/CGNS_SRC/src  -g -qlanglvl=extc99 -g -o CMakeFiles/cgns_static.dir/cgns_internals.c.o   -c /home/brtnfld/scratch/hdfdts/scripts/external/test.1/CGNS_SRC/src/cgns_internals.c
""/home/brtnfld/scratch/hdfdts/scripts/external/test.1/CGNS_SRC/src/cgns_internals.c"", line 5843.11: 1506-025 (S) Operand must be a modifiable lvalue.
""/home/brtnfld/scratch/hdfdts/scripts/external/test.1/CGNS_SRC/src/cgns_internals.c"", line 5844.11: 1506-025 (S) Operand must be a modifiable lvalue.
""/home/brtnfld/scratch/hdfdts/scripts/external/test.1/CGNS_SRC/src/cgns_internals.c"", line 5863.11: 1506-025 (S) Operand must be a modifiable lvalue.
""/home/brtnfld/scratch/hdfdts/scripts/external/test.1/CGNS_SRC/src/cgns_internals.c"", line 5864.11: 1506-025 (S) Operand must be a modifiable lvalue.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,202,2020-07-08T15:19:47Z,2020-08-09T05:13:20Z,2020-08-09T06:17:59Z,MERGED,True,324,89,10,https://github.com/MicK7,fix compiler issues,19,[],https://github.com/CGNS/CGNS/pull/202,https://github.com/MicK7,11,https://github.com/CGNS/CGNS/pull/202#issuecomment-660817303,"Fix compiler issues.
Check C99 Complex support at compile time to enable it.","On a power9 system with xlc v16.1 I do not reproduce the error.
@brtnfld  Do you have a way to check with a more recent version of xl compiler that the problem is solved ?
If it is confirmed, it will be possible to target a patch only for the v13.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,202,2020-07-08T15:19:47Z,2020-08-09T05:13:20Z,2020-08-09T06:17:59Z,MERGED,True,324,89,10,https://github.com/MicK7,fix compiler issues,19,[],https://github.com/CGNS/CGNS/pull/202,https://github.com/brtnfld,12,https://github.com/CGNS/CGNS/pull/202#issuecomment-662669798,"Fix compiler issues.
Check C99 Complex support at compile time to enable it.","@MicK7, 16.1 can compile both develop and Experimental_X4-X8_hdf5, neither need a special flag. This was for Linux on a PPCLE, Newer xl compilers don't support PPCBE.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,202,2020-07-08T15:19:47Z,2020-08-09T05:13:20Z,2020-08-09T06:17:59Z,MERGED,True,324,89,10,https://github.com/MicK7,fix compiler issues,19,[],https://github.com/CGNS/CGNS/pull/202,https://github.com/brtnfld,13,https://github.com/CGNS/CGNS/pull/202#issuecomment-668778388,"Fix compiler issues.
Check C99 Complex support at compile time to enable it.","Error in #if CG_BUILD_COMPLEX_C99_EXT for cmake build with PGI:
pgcc -DH5_BUILT_AS_STATIC_LIB -I/home/brtnfld/scratch/hdfdts/scripts/external/test.3/CGNS_build/src -I/home/brtnfld/scratch/hdfdts/scripts/external/test.3/CGNS_SRC/src -I/mnt/scr1/pre-release/hdf5/vdev/platypus-pgi/include  -g -g -O0   -c99 -o CMakeFiles/cgns_static.dir/cgns_internals.c.o   -c /home/brtnfld/scratch/hdfdts/scripts/external/test.3/CGNS_SRC/src/cgns_internals.c
PGC-S-0226-Syntax error in #if (/home/brtnfld/scratch/hdfdts/scripts/external/test.3/CGNS_SRC/src/cgns_internals.c: 42)
PGC-S-0226-Syntax error in #if (/home/brtnfld/scratch/hdfdts/scripts/external/test.3/CGNS_SRC/src/cgns_internals.c: 5830)",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,203,2020-07-16T23:05:33Z,2020-07-17T13:44:54Z,2020-07-17T13:44:54Z,MERGED,True,6,4,2,https://github.com/brtnfld,"Fixed ptests ""make test"" reporting, changed HDF5 build",13,[],https://github.com/CGNS/CGNS/pull/203,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/203,"(1) fixed how many tests are reported to fail
(2) Speed-up the building of HDF5 by disabling building the DHF5 tests and tools.","(1) fixed how many tests are reported to fail
(2) Speed-up the building of HDF5 by disabling building the DHF5 tests and tools.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,204,2020-07-20T16:47:30Z,2020-07-20T17:32:50Z,2020-07-20T17:32:50Z,MERGED,True,5,1,1,https://github.com/brtnfld,Update to version of H5Oget_info,15,[],https://github.com/CGNS/CGNS/pull/204,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/204,Used for debugging.,Used for debugging.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,205,2020-07-23T20:09:05Z,2020-07-24T14:05:20Z,2020-07-24T14:05:20Z,MERGED,True,112,759,1,https://github.com/brtnfld,Removed redundant INTERFACE BLOCKS,17,[],https://github.com/CGNS/CGNS/pull/205,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/205,Fortran code clean-up.,Fortran code clean-up.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,206,2020-08-04T12:35:26Z,2020-08-05T07:24:44Z,2020-08-09T06:17:49Z,MERGED,True,3,0,1,https://github.com/MicK7,Add a warning for BC that should be of type FamilySpecified.,1,[],https://github.com/CGNS/CGNS/pull/206,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/206,"This is a small improvement patch for cgnscheck.
It advertises when a BC should be of type FamilySpecified (ie when a FamilyName is found).","This is a small improvement patch for cgnscheck.
It advertises when a BC should be of type FamilySpecified (ie when a FamilyName is found).",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,206,2020-08-04T12:35:26Z,2020-08-05T07:24:44Z,2020-08-09T06:17:49Z,MERGED,True,3,0,1,https://github.com/MicK7,Add a warning for BC that should be of type FamilySpecified.,1,[],https://github.com/CGNS/CGNS/pull/206,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/206#issuecomment-669238051,"This is a small improvement patch for cgnscheck.
It advertises when a BC should be of type FamilySpecified (ie when a FamilyName is found).","BTW, the \n is not needed in the string.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,207,2020-08-06T12:42:55Z,2020-08-11T07:35:24Z,2020-08-11T07:46:32Z,MERGED,True,14,5,1,https://github.com/MicK7,fix cg_conn_write,3,[],https://github.com/CGNS/CGNS/pull/207,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/207,"Verify input of zone grid connectivities only when location is equal to Vertex or CellCenter
In case of FaceCenter connectivities no check is done and the library trusts the user for providing correct data.
Indeed, the library do not have the total number of faces easily available for a check while the user application should have this information.","Verify input of zone grid connectivities only when location is equal to Vertex or CellCenter
In case of FaceCenter connectivities no check is done and the library trusts the user for providing correct data.
Indeed, the library do not have the total number of faces easily available for a check while the user application should have this information.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,207,2020-08-06T12:42:55Z,2020-08-11T07:35:24Z,2020-08-11T07:46:32Z,MERGED,True,14,5,1,https://github.com/MicK7,fix cg_conn_write,3,[],https://github.com/CGNS/CGNS/pull/207,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/207#issuecomment-669904294,"Verify input of zone grid connectivities only when location is equal to Vertex or CellCenter
In case of FaceCenter connectivities no check is done and the library trusts the user for providing correct data.
Indeed, the library do not have the total number of faces easily available for a check while the user application should have this information.",This small patch should solve https://cgnsorg.atlassian.net/browse/CGNS-211,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,208,2020-08-11T09:20:19Z,2020-08-13T19:59:31Z,2020-08-14T14:00:33Z,MERGED,True,42,22,16,https://github.com/MicK7,some changes for vs2019 ,4,[],https://github.com/CGNS/CGNS/pull/208,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/208,cherry picking from existing patch branch,cherry picking from existing patch branch,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,208,2020-08-11T09:20:19Z,2020-08-13T19:59:31Z,2020-08-14T14:00:33Z,MERGED,True,42,22,16,https://github.com/MicK7,some changes for vs2019 ,4,[],https://github.com/CGNS/CGNS/pull/208,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/208#issuecomment-673244520,cherry picking from existing patch branch,"Also, appveyor only builds SHARED=off, and on VS2015. We should add V2019 to the build matrix and enable shared builds",True,{'THUMBS_UP': ['https://github.com/MicK7']}
CGNS/CGNS,https://github.com/CGNS/CGNS,209,2020-08-13T04:54:34Z,2020-08-18T14:50:19Z,2020-08-18T14:50:19Z,MERGED,True,50,9,1,https://github.com/brtnfld,testing updated appvoyer config.,19,[],https://github.com/CGNS/CGNS/pull/209,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/209,"update appveyor testing to VS 19, change HDF5 binary path download","update appveyor testing to VS 19, change HDF5 binary path download",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,209,2020-08-13T04:54:34Z,2020-08-18T14:50:19Z,2020-08-18T14:50:19Z,MERGED,True,50,9,1,https://github.com/brtnfld,testing updated appvoyer config.,19,[],https://github.com/CGNS/CGNS/pull/209,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/209#issuecomment-675506971,"update appveyor testing to VS 19, change HDF5 binary path download","@MicK7 thanks for fixing this, I was going around in circles. It's interesting that 2019 VS takes about half the time to complete.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,209,2020-08-13T04:54:34Z,2020-08-18T14:50:19Z,2020-08-18T14:50:19Z,MERGED,True,50,9,1,https://github.com/brtnfld,testing updated appvoyer config.,19,[],https://github.com/CGNS/CGNS/pull/209,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/209#issuecomment-675524791,"update appveyor testing to VS 19, change HDF5 binary path download","@brtnfld  You are welcome.
The timing is quite an amazing fact indeed.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,210,2020-08-18T08:19:17Z,2020-08-18T18:38:19Z,2020-08-18T19:47:00Z,MERGED,True,3,2,2,https://github.com/MicK7,missing offset suffix,3,[],https://github.com/CGNS/CGNS/pull/210,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/210,"@brtnfld This small change fix the issue found by Dave Taflin
It could be backported to 4.1","@brtnfld This small change fix the issue found by Dave Taflin
It could be backported to 4.1",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,210,2020-08-18T08:19:17Z,2020-08-18T18:38:19Z,2020-08-18T19:47:00Z,MERGED,True,3,2,2,https://github.com/MicK7,missing offset suffix,3,[],https://github.com/CGNS/CGNS/pull/210,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/210#issuecomment-675535764,"@brtnfld This small change fix the issue found by Dave Taflin
It could be backported to 4.1","Do you mean release 4.1.2? This fix looks fine; for reference, I summarized the issue in CGNS-219.
Do you think we should add this file and test for backward compatibility, or is it too specific to this issue?
This might also fix CGNS-214?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,210,2020-08-18T08:19:17Z,2020-08-18T18:38:19Z,2020-08-18T19:47:00Z,MERGED,True,3,2,2,https://github.com/MicK7,missing offset suffix,3,[],https://github.com/CGNS/CGNS/pull/210,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/210#issuecomment-675544512,"@brtnfld This small change fix the issue found by Dave Taflin
It could be backported to 4.1","Yes I mean a small 4.1.2 release.
I added a commit to also fix CGNS-214.
I think the file is too specific to this issue. A more complete file with various type of section would be needed to test for backward compatibility. I find it quite unexpected to not have never run into this issue before.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,210,2020-08-18T08:19:17Z,2020-08-18T18:38:19Z,2020-08-18T19:47:00Z,MERGED,True,3,2,2,https://github.com/MicK7,missing offset suffix,3,[],https://github.com/CGNS/CGNS/pull/210,https://github.com/MicK7,4,https://github.com/CGNS/CGNS/pull/210#issuecomment-675630005,"@brtnfld This small change fix the issue found by Dave Taflin
It could be backported to 4.1",@brtnfld travis status is not being reported correctly thus the PR can not be merged,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,210,2020-08-18T08:19:17Z,2020-08-18T18:38:19Z,2020-08-18T19:47:00Z,MERGED,True,3,2,2,https://github.com/MicK7,missing offset suffix,3,[],https://github.com/CGNS/CGNS/pull/210,https://github.com/brtnfld,5,https://github.com/CGNS/CGNS/pull/210#issuecomment-675638993,"@brtnfld This small change fix the issue found by Dave Taflin
It could be backported to 4.1",I've disabled Travis until it is running again.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,211,2020-08-18T19:00:14Z,2020-08-18T19:01:30Z,2020-08-18T19:01:30Z,CLOSED,False,94,15,4,https://github.com/MicK7,Release 4.1.2,2,[],https://github.com/CGNS/CGNS/pull/211,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/211,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,212,2020-08-18T19:09:26Z,2020-08-18T19:44:36Z,2020-08-18T19:44:36Z,MERGED,True,93,15,4,https://github.com/MicK7,Release 4.1.2,2,[],https://github.com/CGNS/CGNS/pull/212,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/212,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,213,2020-08-18T19:11:35Z,2020-08-18T19:43:52Z,2020-08-18T19:46:56Z,MERGED,True,0,1,1,https://github.com/MicK7,remove debug print,1,[],https://github.com/CGNS/CGNS/pull/213,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/213,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,214,2020-08-20T22:29:24Z,2020-08-25T15:28:25Z,2020-09-24T11:24:26Z,MERGED,True,2,1,1,https://github.com/gsjaardema,Fix so will compile with JFC_PATCH_2015_2 enabled,1,[],https://github.com/CGNS/CGNS/pull/214,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/214,"Was testing some file-open scaling behavior and wanted to see if the code in the #ifdef JFC_PATCH_2015_2 blocks made any difference, but the creation of g_propfileopen was in the wrong place.
There is also an issue with tconv and bkg being shadowed in the later call at line 2253 but that is not fixed here...","Was testing some file-open scaling behavior and wanted to see if the code in the #ifdef JFC_PATCH_2015_2 blocks made any difference, but the creation of g_propfileopen was in the wrong place.
There is also an issue with tconv and bkg being shadowed in the later call at line 2253 but that is not fixed here...",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,215,2020-09-22T20:58:55Z,2020-09-24T07:17:20Z,2020-09-24T11:23:21Z,MERGED,True,0,11,1,https://github.com/gsjaardema,Avoid CMake duplicate symbol error,5,[],https://github.com/CGNS/CGNS/pull/215,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/215,"When configuring CGNS with a CMake-build/install of HDF5, the add_executable(h5dump IMPORTED) command will generate the error:
CMake Error at CMakeLists.txt:219 (add_executable):
  add_executable cannot create imported target ""h5dump"" because another
  target with the same name already exists.

Since the file hdf5-targets.cmake contains the same command.  I'm not sure if this if branch is entered if HDF5 is installed via autotools, but in my testing I got a valid build with both cmake and autotools HDF5 builds.","When configuring CGNS with a CMake-build/install of HDF5, the add_executable(h5dump IMPORTED) command will generate the error:
CMake Error at CMakeLists.txt:219 (add_executable):
  add_executable cannot create imported target ""h5dump"" because another
  target with the same name already exists.

Since the file hdf5-targets.cmake contains the same command.  I'm not sure if this if branch is entered if HDF5 is installed via autotools, but in my testing I got a valid build with both cmake and autotools HDF5 builds.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,215,2020-09-22T20:58:55Z,2020-09-24T07:17:20Z,2020-09-24T11:23:21Z,MERGED,True,0,11,1,https://github.com/gsjaardema,Avoid CMake duplicate symbol error,5,[],https://github.com/CGNS/CGNS/pull/215,https://github.com/gsjaardema,2,https://github.com/CGNS/CGNS/pull/215#issuecomment-696991795,"When configuring CGNS with a CMake-build/install of HDF5, the add_executable(h5dump IMPORTED) command will generate the error:
CMake Error at CMakeLists.txt:219 (add_executable):
  add_executable cannot create imported target ""h5dump"" because another
  target with the same name already exists.

Since the file hdf5-targets.cmake contains the same command.  I'm not sure if this if branch is entered if HDF5 is installed via autotools, but in my testing I got a valid build with both cmake and autotools HDF5 builds.",Looks like the removed line is needed on the windows build... Will investigate further.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,215,2020-09-22T20:58:55Z,2020-09-24T07:17:20Z,2020-09-24T11:23:21Z,MERGED,True,0,11,1,https://github.com/gsjaardema,Avoid CMake duplicate symbol error,5,[],https://github.com/CGNS/CGNS/pull/215,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/215#issuecomment-697214367,"When configuring CGNS with a CMake-build/install of HDF5, the add_executable(h5dump IMPORTED) command will generate the error:
CMake Error at CMakeLists.txt:219 (add_executable):
  add_executable cannot create imported target ""h5dump"" because another
  target with the same name already exists.

Since the file hdf5-targets.cmake contains the same command.  I'm not sure if this if branch is entered if HDF5 is installed via autotools, but in my testing I got a valid build with both cmake and autotools HDF5 builds.",Would it be possible to remove all references to h5dump in cmake ? I can't see where it is useful.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,215,2020-09-22T20:58:55Z,2020-09-24T07:17:20Z,2020-09-24T11:23:21Z,MERGED,True,0,11,1,https://github.com/gsjaardema,Avoid CMake duplicate symbol error,5,[],https://github.com/CGNS/CGNS/pull/215,https://github.com/gsjaardema,4,https://github.com/CGNS/CGNS/pull/215#issuecomment-697478353,"When configuring CGNS with a CMake-build/install of HDF5, the add_executable(h5dump IMPORTED) command will generate the error:
CMake Error at CMakeLists.txt:219 (add_executable):
  add_executable cannot create imported target ""h5dump"" because another
  target with the same name already exists.

Since the file hdf5-targets.cmake contains the same command.  I'm not sure if this if branch is entered if HDF5 is installed via autotools, but in my testing I got a valid build with both cmake and autotools HDF5 builds.","@MicK7 Yes, that looks like it should work.  It only shows up in the top-level CMakeLists.txt as best I can see...  Everything seems to work if it is removed.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,216,2020-09-24T11:44:41Z,2020-09-30T15:33:29Z,2020-09-30T18:06:53Z,MERGED,True,27,27,5,https://github.com/MicK7,ENABLE 64BIT by default,9,[],https://github.com/CGNS/CGNS/pull/216,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/216,Update cmake to enable 64bit configuration by default.,Update cmake to enable 64bit configuration by default.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,216,2020-09-24T11:44:41Z,2020-09-30T15:33:29Z,2020-09-30T18:06:53Z,MERGED,True,27,27,5,https://github.com/MicK7,ENABLE 64BIT by default,9,[],https://github.com/CGNS/CGNS/pull/216,https://github.com/apps/lgtm-com,2,https://github.com/CGNS/CGNS/pull/216#issuecomment-698293975,Update cmake to enable 64bit configuration by default.,"This pull request introduces 25 alerts and fixes 13 when merging 5c62463 into bdd1673 - view on LGTM.com
new alerts:

25 for Wrong type of arguments to formatting function

fixed alerts:

13 for Multiplication result converted to larger type",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,216,2020-09-24T11:44:41Z,2020-09-30T15:33:29Z,2020-09-30T18:06:53Z,MERGED,True,27,27,5,https://github.com/MicK7,ENABLE 64BIT by default,9,[],https://github.com/CGNS/CGNS/pull/216,https://github.com/apps/lgtm-com,3,https://github.com/CGNS/CGNS/pull/216#issuecomment-698393974,Update cmake to enable 64bit configuration by default.,"This pull request introduces 25 alerts and fixes 17 when merging 255f2f4 into bdd1673 - view on LGTM.com
new alerts:

25 for Wrong type of arguments to formatting function

fixed alerts:

13 for Multiplication result converted to larger type
4 for Wrong type of arguments to formatting function",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,216,2020-09-24T11:44:41Z,2020-09-30T15:33:29Z,2020-09-30T18:06:53Z,MERGED,True,27,27,5,https://github.com/MicK7,ENABLE 64BIT by default,9,[],https://github.com/CGNS/CGNS/pull/216,https://github.com/apps/lgtm-com,4,https://github.com/CGNS/CGNS/pull/216#issuecomment-698407795,Update cmake to enable 64bit configuration by default.,"This pull request introduces 25 alerts and fixes 20 when merging df04c22 into bdd1673 - view on LGTM.com
new alerts:

25 for Wrong type of arguments to formatting function

fixed alerts:

13 for Multiplication result converted to larger type
7 for Wrong type of arguments to formatting function",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,216,2020-09-24T11:44:41Z,2020-09-30T15:33:29Z,2020-09-30T18:06:53Z,MERGED,True,27,27,5,https://github.com/MicK7,ENABLE 64BIT by default,9,[],https://github.com/CGNS/CGNS/pull/216,https://github.com/apps/lgtm-com,5,https://github.com/CGNS/CGNS/pull/216#issuecomment-698423426,Update cmake to enable 64bit configuration by default.,"This pull request fixes 20 alerts when merging 98ae9cd into bdd1673 - view on LGTM.com
fixed alerts:

13 for Multiplication result converted to larger type
7 for Wrong type of arguments to formatting function",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,216,2020-09-24T11:44:41Z,2020-09-30T15:33:29Z,2020-09-30T18:06:53Z,MERGED,True,27,27,5,https://github.com/MicK7,ENABLE 64BIT by default,9,[],https://github.com/CGNS/CGNS/pull/216,https://github.com/apps/lgtm-com,6,https://github.com/CGNS/CGNS/pull/216#issuecomment-700846601,Update cmake to enable 64bit configuration by default.,"This pull request fixes 20 alerts when merging bd479d6 into bdd1673 - view on LGTM.com
fixed alerts:

13 for Multiplication result converted to larger type
7 for Wrong type of arguments to formatting function",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,216,2020-09-24T11:44:41Z,2020-09-30T15:33:29Z,2020-09-30T18:06:53Z,MERGED,True,27,27,5,https://github.com/MicK7,ENABLE 64BIT by default,9,[],https://github.com/CGNS/CGNS/pull/216,https://github.com/brtnfld,7,https://github.com/CGNS/CGNS/pull/216#issuecomment-700972036,Update cmake to enable 64bit configuration by default.,What about changes to autotools?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,216,2020-09-24T11:44:41Z,2020-09-30T15:33:29Z,2020-09-30T18:06:53Z,MERGED,True,27,27,5,https://github.com/MicK7,ENABLE 64BIT by default,9,[],https://github.com/CGNS/CGNS/pull/216,https://github.com/brtnfld,8,https://github.com/CGNS/CGNS/pull/216#issuecomment-700980725,Update cmake to enable 64bit configuration by default.,Ref. https://cgnsorg.atlassian.net/browse/CGNS-224,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,216,2020-09-24T11:44:41Z,2020-09-30T15:33:29Z,2020-09-30T18:06:53Z,MERGED,True,27,27,5,https://github.com/MicK7,ENABLE 64BIT by default,9,[],https://github.com/CGNS/CGNS/pull/216,https://github.com/MicK7,9,https://github.com/CGNS/CGNS/pull/216#issuecomment-700997474,Update cmake to enable 64bit configuration by default.,"I'm wondering if we should implement this feature before flipping the switch.
https://cgnsorg.atlassian.net/projects/CGNS/issues/CGNS-212?filter=allissues
it would be nice to allow a user to write 32Bit if they know it will fit, even if CGNS was compiled 64 bit.

As written in the comments, the experimental_cgp_poly branch provide the feature to give the datatype to store unstructured elements in 32bit or 64bit. I don't know if this enough for a merge proposal.
The added function are :

CGNSDLL int cg_section_general_write(int file_number, int B, int Z,
const char * SectionName, const CGNS_ENUMT(ElementType_t) type,
const CGNS_ENUMT(DataType_t) elementDataType, cgsize_t start,
cgsize_t end, cgsize_t elementDataSize, int nbndry, int *S);
CGNSDLL int cg_elements_general_write(int fn, int B, int Z, int S,
cgsize_t start, cgsize_t end, CGNS_ENUMT(DataType_t) m_type,
const void *elements);
CGNSDLL int cg_poly_elements_general_write(int fn, int B, int Z, int S,
cgsize_t start, cgsize_t end, CGNS_ENUMT(DataType_t) m_type,
const void *elements, const void *connect_offset);

This helps refactor lots of code parts. Other functions are helpers or experiments for parallel writing.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,216,2020-09-24T11:44:41Z,2020-09-30T15:33:29Z,2020-09-30T18:06:53Z,MERGED,True,27,27,5,https://github.com/MicK7,ENABLE 64BIT by default,9,[],https://github.com/CGNS/CGNS/pull/216,https://github.com/brtnfld,10,https://github.com/CGNS/CGNS/pull/216#issuecomment-701002552,Update cmake to enable 64bit configuration by default.,"Do you have equiv. read functions? Otherwise, there would be type conversion (in HDF5), which would be nice to avoid.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,216,2020-09-24T11:44:41Z,2020-09-30T15:33:29Z,2020-09-30T18:06:53Z,MERGED,True,27,27,5,https://github.com/MicK7,ENABLE 64BIT by default,9,[],https://github.com/CGNS/CGNS/pull/216,https://github.com/MicK7,11,https://github.com/CGNS/CGNS/pull/216#issuecomment-701011582,Update cmake to enable 64bit configuration by default.,"Equivalent read function are not implemented yet. Feedback on the writing code and API is most welcome before going forward.
Of course avoiding type conversion is nice but it is hard to avoid it completely without breaking the MLL.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,216,2020-09-24T11:44:41Z,2020-09-30T15:33:29Z,2020-09-30T18:06:53Z,MERGED,True,27,27,5,https://github.com/MicK7,ENABLE 64BIT by default,9,[],https://github.com/CGNS/CGNS/pull/216,https://github.com/MicK7,12,https://github.com/CGNS/CGNS/pull/216#issuecomment-701203786,Update cmake to enable 64bit configuration by default.,"@brtnfld after much tought, I suggest flipping the switch before implementing the feature of CGNS-212 since it will be pretty hard to get the API right for CGNS-212. Moreover, users can still go back to previous default configuration by passing the correct CMake flags.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,216,2020-09-24T11:44:41Z,2020-09-30T15:33:29Z,2020-09-30T18:06:53Z,MERGED,True,27,27,5,https://github.com/MicK7,ENABLE 64BIT by default,9,[],https://github.com/CGNS/CGNS/pull/216,https://github.com/brtnfld,13,https://github.com/CGNS/CGNS/pull/216#issuecomment-701431821,Update cmake to enable 64bit configuration by default.,"Sounds good, but I would remove the change for LFS from this PR since that issue probably needs further review. What is strange, for the autotools, it defines ""HAS_LSEEK64"", but I think it should be HAVE_LSEEK64",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,216,2020-09-24T11:44:41Z,2020-09-30T15:33:29Z,2020-09-30T18:06:53Z,MERGED,True,27,27,5,https://github.com/MicK7,ENABLE 64BIT by default,9,[],https://github.com/CGNS/CGNS/pull/216,https://github.com/apps/lgtm-com,14,https://github.com/CGNS/CGNS/pull/216#issuecomment-701437938,Update cmake to enable 64bit configuration by default.,"This pull request fixes 20 alerts when merging eadf20e into bdd1673 - view on LGTM.com
fixed alerts:

13 for Multiplication result converted to larger type
7 for Wrong type of arguments to formatting function",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,216,2020-09-24T11:44:41Z,2020-09-30T15:33:29Z,2020-09-30T18:06:53Z,MERGED,True,27,27,5,https://github.com/MicK7,ENABLE 64BIT by default,9,[],https://github.com/CGNS/CGNS/pull/216,https://github.com/apps/lgtm-com,15,https://github.com/CGNS/CGNS/pull/216#issuecomment-701452208,Update cmake to enable 64bit configuration by default.,"This pull request fixes 20 alerts when merging cdc3762 into bdd1673 - view on LGTM.com
fixed alerts:

13 for Multiplication result converted to larger type
7 for Wrong type of arguments to formatting function",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,216,2020-09-24T11:44:41Z,2020-09-30T15:33:29Z,2020-09-30T18:06:53Z,MERGED,True,27,27,5,https://github.com/MicK7,ENABLE 64BIT by default,9,[],https://github.com/CGNS/CGNS/pull/216,https://github.com/MicK7,16,https://github.com/CGNS/CGNS/pull/216#issuecomment-701552639,Update cmake to enable 64bit configuration by default.,"@brtnfld To force 32 bit with autotools, one just run ./configure --enable-64bit=no or ./configure --disable-64bit",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,217,2020-09-24T16:55:23Z,2020-09-24T17:10:59Z,2020-09-24T17:21:27Z,CLOSED,False,3,3,1,https://github.com/MicK7,upgrade gcc to version 8 on osx,1,[],https://github.com/CGNS/CGNS/pull/217,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/217,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,218,2020-09-30T18:28:39Z,2020-09-30T20:22:37Z,2020-10-01T02:21:19Z,MERGED,True,17,18,4,https://github.com/MicK7,Improve maintainability,4,[],https://github.com/CGNS/CGNS/pull/218,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/218,"update the configure to set default 64bit
fix shadow variable","update the configure to set default 64bit
fix shadow variable",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,218,2020-09-30T18:28:39Z,2020-09-30T20:22:37Z,2020-10-01T02:21:19Z,MERGED,True,17,18,4,https://github.com/MicK7,Improve maintainability,4,[],https://github.com/CGNS/CGNS/pull/218,https://github.com/apps/lgtm-com,2,https://github.com/CGNS/CGNS/pull/218#issuecomment-701569876,"update the configure to set default 64bit
fix shadow variable","This pull request fixes 3 alerts when merging 2aec319 into 3e2f60a - view on LGTM.com
fixed alerts:

3 for Local variable hides global variable",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,218,2020-09-30T18:28:39Z,2020-09-30T20:22:37Z,2020-10-01T02:21:19Z,MERGED,True,17,18,4,https://github.com/MicK7,Improve maintainability,4,[],https://github.com/CGNS/CGNS/pull/218,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/218#issuecomment-701585206,"update the configure to set default 64bit
fix shadow variable",@brtnfld Please review,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,218,2020-09-30T18:28:39Z,2020-09-30T20:22:37Z,2020-10-01T02:21:19Z,MERGED,True,17,18,4,https://github.com/MicK7,Improve maintainability,4,[],https://github.com/CGNS/CGNS/pull/218,https://github.com/brtnfld,4,https://github.com/CGNS/CGNS/pull/218#issuecomment-701598526,"update the configure to set default 64bit
fix shadow variable",You can remove the 64 option from: CGNS/bin/config-cgns.sh,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,218,2020-09-30T18:28:39Z,2020-09-30T20:22:37Z,2020-10-01T02:21:19Z,MERGED,True,17,18,4,https://github.com/MicK7,Improve maintainability,4,[],https://github.com/CGNS/CGNS/pull/218,https://github.com/apps/lgtm-com,5,https://github.com/CGNS/CGNS/pull/218#issuecomment-701613665,"update the configure to set default 64bit
fix shadow variable","This pull request fixes 3 alerts when merging 6293fee into 3e2f60a - view on LGTM.com
fixed alerts:

3 for Local variable hides global variable",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,219,2020-11-15T16:37:59Z,2020-11-18T15:18:01Z,2020-11-19T12:57:02Z,MERGED,True,16,6,4,https://github.com/MicK7,Simple improvements,4,[],https://github.com/CGNS/CGNS/pull/219,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/219,"clean src directory (move doc to the right place)
add a simple warning in cgnscheck to help pre/post-processors
simple fix to read CGNS 3.3 with HDF5 1.10 files in read only mode.","clean src directory (move doc to the right place)
add a simple warning in cgnscheck to help pre/post-processors
simple fix to read CGNS 3.3 with HDF5 1.10 files in read only mode.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,220,2020-11-19T12:55:01Z,2020-11-19T13:44:10Z,2020-11-19T13:44:10Z,CLOSED,False,1798,575,6,https://github.com/MicK7,Improve element related writing functions,12,[],https://github.com/CGNS/CGNS/pull/220,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/220,"refactor writing functions while allowing datatype different from cgsize_t (to write 32bit in a 64bit env)
similarly add reading function to handle 32/64 bit elements (Not very efficient because all MLL is based upon cgsize_t and it would require to rethink a lot of code)
no fortran mapping for these experimental API done or planned

see: https://cgnsorg.atlassian.net/jira/software/c/projects/CGNS/issues/CGNS-212","refactor writing functions while allowing datatype different from cgsize_t (to write 32bit in a 64bit env)
similarly add reading function to handle 32/64 bit elements (Not very efficient because all MLL is based upon cgsize_t and it would require to rethink a lot of code)
no fortran mapping for these experimental API done or planned

see: https://cgnsorg.atlassian.net/jira/software/c/projects/CGNS/issues/CGNS-212",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,220,2020-11-19T12:55:01Z,2020-11-19T13:44:10Z,2020-11-19T13:44:10Z,CLOSED,False,1798,575,6,https://github.com/MicK7,Improve element related writing functions,12,[],https://github.com/CGNS/CGNS/pull/220,https://github.com/apps/lgtm-com,2,https://github.com/CGNS/CGNS/pull/220#issuecomment-730365004,"refactor writing functions while allowing datatype different from cgsize_t (to write 32bit in a 64bit env)
similarly add reading function to handle 32/64 bit elements (Not very efficient because all MLL is based upon cgsize_t and it would require to rethink a lot of code)
no fortran mapping for these experimental API done or planned

see: https://cgnsorg.atlassian.net/jira/software/c/projects/CGNS/issues/CGNS-212","This pull request introduces 3 alerts when merging f591991 into 45aeb85 - view on LGTM.com
new alerts:

2 for Array argument size mismatch
1 for Comparison result is always the same",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,221,2020-11-19T14:09:43Z,2020-12-10T08:13:01Z,2020-12-10T19:20:23Z,MERGED,True,2900,580,14,https://github.com/MicK7,Writing elements with datatype different from cgsize_t,20,[],https://github.com/CGNS/CGNS/pull/221,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/221,"refactor writing functions while allowing datatype different from cgsize_t (to write 32bit in a 64bit env)
similarly add reading function to handle 32/64 bit elements (Not very efficient because all MLL is based upon cgsize_t and it would require to rethink a lot of code)
no fortran mapping for these experimental API done or planned

see: https://cgnsorg.atlassian.net/jira/software/c/projects/CGNS/issues/CGNS-212","refactor writing functions while allowing datatype different from cgsize_t (to write 32bit in a 64bit env)
similarly add reading function to handle 32/64 bit elements (Not very efficient because all MLL is based upon cgsize_t and it would require to rethink a lot of code)
no fortran mapping for these experimental API done or planned

see: https://cgnsorg.atlassian.net/jira/software/c/projects/CGNS/issues/CGNS-212",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,221,2020-11-19T14:09:43Z,2020-12-10T08:13:01Z,2020-12-10T19:20:23Z,MERGED,True,2900,580,14,https://github.com/MicK7,Writing elements with datatype different from cgsize_t,20,[],https://github.com/CGNS/CGNS/pull/221,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/221#issuecomment-731020073,"refactor writing functions while allowing datatype different from cgsize_t (to write 32bit in a 64bit env)
similarly add reading function to handle 32/64 bit elements (Not very efficient because all MLL is based upon cgsize_t and it would require to rethink a lot of code)
no fortran mapping for these experimental API done or planned

see: https://cgnsorg.atlassian.net/jira/software/c/projects/CGNS/issues/CGNS-212",@vmoschou any feedback on this proposal would be appreciated,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,221,2020-11-19T14:09:43Z,2020-12-10T08:13:01Z,2020-12-10T19:20:23Z,MERGED,True,2900,580,14,https://github.com/MicK7,Writing elements with datatype different from cgsize_t,20,[],https://github.com/CGNS/CGNS/pull/221,https://github.com/vmoschou,3,https://github.com/CGNS/CGNS/pull/221#issuecomment-739935704,"refactor writing functions while allowing datatype different from cgsize_t (to write 32bit in a 64bit env)
similarly add reading function to handle 32/64 bit elements (Not very efficient because all MLL is based upon cgsize_t and it would require to rethink a lot of code)
no fortran mapping for these experimental API done or planned

see: https://cgnsorg.atlassian.net/jira/software/c/projects/CGNS/issues/CGNS-212","The code seems to do what we need. You have separated the memory data type (m_type) from the elementDataType and this is our case.
The m_type is defined in cg_elements_general_write ( cg_poly_elements_general_write ) and  and the elementDataType is defined in cg_section_general_write.
Our m_type is int64_t and we need the elementDataType to be int32_t.
Input functions can do the tranformation as well.
So I believe we are fine.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,221,2020-11-19T14:09:43Z,2020-12-10T08:13:01Z,2020-12-10T19:20:23Z,MERGED,True,2900,580,14,https://github.com/MicK7,Writing elements with datatype different from cgsize_t,20,[],https://github.com/CGNS/CGNS/pull/221,https://github.com/MicK7,4,https://github.com/CGNS/CGNS/pull/221#issuecomment-740180472,"refactor writing functions while allowing datatype different from cgsize_t (to write 32bit in a 64bit env)
similarly add reading function to handle 32/64 bit elements (Not very efficient because all MLL is based upon cgsize_t and it would require to rethink a lot of code)
no fortran mapping for these experimental API done or planned

see: https://cgnsorg.atlassian.net/jira/software/c/projects/CGNS/issues/CGNS-212","@vmoschou Thanks for the feedback
@brtnfld  Thanks for the review. Most of the new code is called by existing test code due to refactoring. But I plan to add a parallel test and a serial test to cover parts that need to be tested.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,221,2020-11-19T14:09:43Z,2020-12-10T08:13:01Z,2020-12-10T19:20:23Z,MERGED,True,2900,580,14,https://github.com/MicK7,Writing elements with datatype different from cgsize_t,20,[],https://github.com/CGNS/CGNS/pull/221,https://github.com/brtnfld,5,https://github.com/CGNS/CGNS/pull/221#issuecomment-740187913,"refactor writing functions while allowing datatype different from cgsize_t (to write 32bit in a 64bit env)
similarly add reading function to handle 32/64 bit elements (Not very efficient because all MLL is based upon cgsize_t and it would require to rethink a lot of code)
no fortran mapping for these experimental API done or planned

see: https://cgnsorg.atlassian.net/jira/software/c/projects/CGNS/issues/CGNS-212",I created subtasks for tests and documentation (and Fortran APIs). Is there a reason why this can't be released in 4.2? It is targeted for the 5.0 release.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,221,2020-11-19T14:09:43Z,2020-12-10T08:13:01Z,2020-12-10T19:20:23Z,MERGED,True,2900,580,14,https://github.com/MicK7,Writing elements with datatype different from cgsize_t,20,[],https://github.com/CGNS/CGNS/pull/221,https://github.com/MicK7,6,https://github.com/CGNS/CGNS/pull/221#issuecomment-740453328,"refactor writing functions while allowing datatype different from cgsize_t (to write 32bit in a 64bit env)
similarly add reading function to handle 32/64 bit elements (Not very efficient because all MLL is based upon cgsize_t and it would require to rethink a lot of code)
no fortran mapping for these experimental API done or planned

see: https://cgnsorg.atlassian.net/jira/software/c/projects/CGNS/issues/CGNS-212",@brtnfld I don't know why it could not be released in 4.2,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,222,2020-12-10T13:31:16Z,2020-12-10T19:18:33Z,2020-12-14T18:25:20Z,MERGED,True,6,6,1,https://github.com/MicK7,update osx,1,[],https://github.com/CGNS/CGNS/pull/222,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/222,"Apple and Homebrew no longer support MacOS 10.13. This means homebrew no longer provides binaries for MacOS 10.13, and on those systems, everything has to be built from source. This is leading to a timeout in travis.","Apple and Homebrew no longer support MacOS 10.13. This means homebrew no longer provides binaries for MacOS 10.13, and on those systems, everything has to be built from source. This is leading to a timeout in travis.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,222,2020-12-10T13:31:16Z,2020-12-10T19:18:33Z,2020-12-14T18:25:20Z,MERGED,True,6,6,1,https://github.com/MicK7,update osx,1,[],https://github.com/CGNS/CGNS/pull/222,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/222#issuecomment-744507716,"Apple and Homebrew no longer support MacOS 10.13. This means homebrew no longer provides binaries for MacOS 10.13, and on those systems, everything has to be built from source. This is leading to a timeout in travis.","We should remove the OSX build and find an alternative:
https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing
What do I do if I can’t build my builds?
After November 1st, all users on updated concurrency plans who wish to run macOS builds will need to go to the plan page in your account settings and purchase credit addons in order to run your builds.
Additionally, all users who are on the new usage based plan (previously on the 10 concurrent job plan and higher), will start with a credit allotment but will have to purchase credit addons if you run out of credits.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,222,2020-12-10T13:31:16Z,2020-12-10T19:18:33Z,2020-12-14T18:25:20Z,MERGED,True,6,6,1,https://github.com/MicK7,update osx,1,[],https://github.com/CGNS/CGNS/pull/222,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/222#issuecomment-744624592,"Apple and Homebrew no longer support MacOS 10.13. This means homebrew no longer provides binaries for MacOS 10.13, and on those systems, everything has to be built from source. This is leading to a timeout in travis.","Thanks for the link.
It seems that using travis is becoming harder.
According to this blog post travis-ci threw wrench my open source works , Github Actions could be a valid alternative. However, it provides only 2000 min per month and thus only push to the main branch should be taken into account.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,223,2020-12-10T20:03:48Z,2020-12-10T20:23:26Z,2020-12-11T16:14:54Z,MERGED,True,5,5,1,https://github.com/MicK7,fix MPI_Allgather in test_poly_unstructured,1,[],https://github.com/CGNS/CGNS/pull/223,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/223,when cgsize_t is 32bit the MPI_Allgather was not sending correct data.,when cgsize_t is 32bit the MPI_Allgather was not sending correct data.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,223,2020-12-10T20:03:48Z,2020-12-10T20:23:26Z,2020-12-11T16:14:54Z,MERGED,True,5,5,1,https://github.com/MicK7,fix MPI_Allgather in test_poly_unstructured,1,[],https://github.com/CGNS/CGNS/pull/223,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/223#issuecomment-743285389,when cgsize_t is 32bit the MPI_Allgather was not sending correct data.,"@MicK7
It is still using 4 ranks for the tests (and for that, it hangs in reading mixed element data in serial).
For 2 processes:
mpiexec -n 2 test_poly_unstructured
rank 1 hosts 3999 cells in range [4001,8000]
rank 1 hosts 4630 nodes in range [4631,9261]
Unstructured CGNS mesh write test with 2 ranks
nbCellSide 20
nbZones 5
rank 0 hosts 4001 cells in range [0,4001]
rank 0 hosts 4631 nodes in range [0,4631]
writing node data in parallel
done, write time = 0.062309
reading node data in parallel
reading mixed element data in serial
[jelly:96845] *** An error occurred in MPI_Recv
[jelly:96845] *** reported by process [3612606465,0]
[jelly:96845] *** on communicator MPI_COMM_WORLD
[jelly:96845] *** MPI_ERR_RANK: invalid rank
[jelly:96845] *** MPI_ERRORS_ARE_FATAL (processes in this communicator will now abort,
[jelly:96845] ***    and potentially your MPI job)",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,224,2020-12-11T18:13:34Z,2020-12-11T19:26:12Z,2020-12-16T13:43:00Z,MERGED,True,8,6,1,https://github.com/MicK7,fix MPI_Recv in test_poly_unstructured,1,[],https://github.com/CGNS/CGNS/pull/224,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/224,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,224,2020-12-11T18:13:34Z,2020-12-11T19:26:12Z,2020-12-16T13:43:00Z,MERGED,True,8,6,1,https://github.com/MicK7,fix MPI_Recv in test_poly_unstructured,1,[],https://github.com/CGNS/CGNS/pull/224,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/224#issuecomment-743349482,,@brtnfld This should definitely close the issue due to bad type passed to MPI. So sorry.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,224,2020-12-11T18:13:34Z,2020-12-11T19:26:12Z,2020-12-16T13:43:00Z,MERGED,True,8,6,1,https://github.com/MicK7,fix MPI_Recv in test_poly_unstructured,1,[],https://github.com/CGNS/CGNS/pull/224,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/224#issuecomment-743356185,,Isn't there still an issue with the test needed to be run with 2 ranks?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,224,2020-12-11T18:13:34Z,2020-12-11T19:26:12Z,2020-12-16T13:43:00Z,MERGED,True,8,6,1,https://github.com/MicK7,fix MPI_Recv in test_poly_unstructured,1,[],https://github.com/CGNS/CGNS/pull/224,https://github.com/MicK7,4,https://github.com/CGNS/CGNS/pull/224#issuecomment-743363624,,The test needed to be run on 2 ranks is just a Warning  (it comes from a copy of the warning in test_general_readwrite) but it is safe to run the test for a larger number. (I did tests with 8 ranks).,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,225,2020-12-17T23:47:35Z,2020-12-18T19:42:48Z,2020-12-18T19:42:48Z,MERGED,True,47,4,3,https://github.com/brtnfld,CGNS-227:fix,24,[],https://github.com/CGNS/CGNS/pull/225,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/225,CGNS-227: added flag to allow for argument mismatch with gfortran >=10,CGNS-227: added flag to allow for argument mismatch with gfortran >=10,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,226,2021-01-28T18:00:41Z,2021-01-29T19:37:18Z,2021-01-29T19:37:18Z,MERGED,True,6,16,2,https://github.com/brtnfld,CGNS-231 test_convert_elem fails with gcc 10,29,[],https://github.com/CGNS/CGNS/pull/226,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/226,"(1) Fixed ""size"" scope with LongInteger
(2) I think it is also an error if size=0
(3) checked array state before trying to free it.","(1) Fixed ""size"" scope with LongInteger
(2) I think it is also an error if size=0
(3) checked array state before trying to free it.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,227,2021-02-05T07:46:48Z,2021-02-05T17:00:07Z,2021-02-05T17:00:17Z,MERGED,True,2,2,1,https://github.com/MicK7,clear cmake warning,1,[],https://github.com/CGNS/CGNS/pull/227,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/227,"INTEGER is not valid anymore, see : https://cmake.org/cmake/help/latest/command/set.html?highlight=set#set-cache-entry","INTEGER is not valid anymore, see : https://cmake.org/cmake/help/latest/command/set.html?highlight=set#set-cache-entry",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,228,2021-02-26T20:44:08Z,2021-03-04T20:31:29Z,2021-03-04T20:31:29Z,MERGED,True,22,22,1,https://github.com/brtnfld,replaced the use of H5Literate_by_name with H5Literate,1,[],https://github.com/CGNS/CGNS/pull/228,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/228,"H5Literate_by_name is not regression tested in HDF5, H5Literate is.","H5Literate_by_name is not regression tested in HDF5, H5Literate is.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,228,2021-02-26T20:44:08Z,2021-03-04T20:31:29Z,2021-03-04T20:31:29Z,MERGED,True,22,22,1,https://github.com/brtnfld,replaced the use of H5Literate_by_name with H5Literate,1,[],https://github.com/CGNS/CGNS/pull/228,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/228#issuecomment-788907820,"H5Literate_by_name is not regression tested in HDF5, H5Literate is.",Looks good to me. Does it help in closing CGNS-194 ?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,228,2021-02-26T20:44:08Z,2021-03-04T20:31:29Z,2021-03-04T20:31:29Z,MERGED,True,22,22,1,https://github.com/brtnfld,replaced the use of H5Literate_by_name with H5Literate,1,[],https://github.com/CGNS/CGNS/pull/228,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/228#issuecomment-789076548,"H5Literate_by_name is not regression tested in HDF5, H5Literate is.","No, H5Literate_by_name is ok supported for non-POSIX systems.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,229,2021-03-13T18:29:45Z,2021-03-25T16:32:25Z,2021-04-06T05:21:32Z,MERGED,True,1182,53,15,https://github.com/MicK7,CGNS-220,19,[],https://github.com/CGNS/CGNS/pull/229,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/229,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,229,2021-03-13T18:29:45Z,2021-03-25T16:32:25Z,2021-04-06T05:21:32Z,MERGED,True,1182,53,15,https://github.com/MicK7,CGNS-220,19,[],https://github.com/CGNS/CGNS/pull/229,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/229#issuecomment-798752935,,"Let's try to merge the changes before 4.2 release. This is already a good improvement.
Further improvement can always be added after 4.2 release.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,229,2021-03-13T18:29:45Z,2021-03-25T16:32:25Z,2021-04-06T05:21:32Z,MERGED,True,1182,53,15,https://github.com/MicK7,CGNS-220,19,[],https://github.com/CGNS/CGNS/pull/229,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/229#issuecomment-805047318,,Do we need to setup a CI github action for linux system to check this topic ?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,229,2021-03-13T18:29:45Z,2021-03-25T16:32:25Z,2021-04-06T05:21:32Z,MERGED,True,1182,53,15,https://github.com/MicK7,CGNS-220,19,[],https://github.com/CGNS/CGNS/pull/229,https://github.com/brtnfld,4,https://github.com/CGNS/CGNS/pull/229#issuecomment-805052806,,I will switch the daily testing that we do internally to test the branch instead of develop. It should run through all the configurations over the next two days.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,229,2021-03-13T18:29:45Z,2021-03-25T16:32:25Z,2021-04-06T05:21:32Z,MERGED,True,1182,53,15,https://github.com/MicK7,CGNS-220,19,[],https://github.com/CGNS/CGNS/pull/229,https://github.com/brtnfld,5,https://github.com/CGNS/CGNS/pull/229#issuecomment-805959793,,@MicK7 What is branch CGNS-220bis? Is that what I should be testing instead?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,229,2021-03-13T18:29:45Z,2021-03-25T16:32:25Z,2021-04-06T05:21:32Z,MERGED,True,1182,53,15,https://github.com/MicK7,CGNS-220,19,[],https://github.com/CGNS/CGNS/pull/229,https://github.com/MicK7,6,https://github.com/CGNS/CGNS/pull/229#issuecomment-806407220,,"@MicK7 What is branch CGNS-220bis? Is that what I should be testing instead?

I removed CGNS-220bis since the changes where added to CGNS-220.
CGNS-220 is the right branch to test.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,229,2021-03-13T18:29:45Z,2021-03-25T16:32:25Z,2021-04-06T05:21:32Z,MERGED,True,1182,53,15,https://github.com/MicK7,CGNS-220,19,[],https://github.com/CGNS/CGNS/pull/229,https://github.com/MicK7,7,https://github.com/CGNS/CGNS/pull/229#issuecomment-807057846,,@brtnfld Thanks for the testing. I just merged the branch.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,229,2021-03-13T18:29:45Z,2021-03-25T16:32:25Z,2021-04-06T05:21:32Z,MERGED,True,1182,53,15,https://github.com/MicK7,CGNS-220,19,[],https://github.com/CGNS/CGNS/pull/229,https://github.com/brtnfld,8,https://github.com/CGNS/CGNS/pull/229#issuecomment-809413846,,"@MicK7 don't delete the branch just yet, I need to do some more testing on it. For some reason the develop branch is failing some of the tests with openmpi.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,229,2021-03-13T18:29:45Z,2021-03-25T16:32:25Z,2021-04-06T05:21:32Z,MERGED,True,1182,53,15,https://github.com/MicK7,CGNS-220,19,[],https://github.com/CGNS/CGNS/pull/229,https://github.com/MicK7,9,https://github.com/CGNS/CGNS/pull/229#issuecomment-809476094,,@brtnfld well received,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,229,2021-03-13T18:29:45Z,2021-03-25T16:32:25Z,2021-04-06T05:21:32Z,MERGED,True,1182,53,15,https://github.com/MicK7,CGNS-220,19,[],https://github.com/CGNS/CGNS/pull/229,https://github.com/brtnfld,10,https://github.com/CGNS/CGNS/pull/229#issuecomment-813494400,,"@MicK7, the branch can be deleted.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,229,2021-03-13T18:29:45Z,2021-03-25T16:32:25Z,2021-04-06T05:21:32Z,MERGED,True,1182,53,15,https://github.com/MicK7,CGNS-220,19,[],https://github.com/CGNS/CGNS/pull/229,https://github.com/MicK7,11,https://github.com/CGNS/CGNS/pull/229#issuecomment-813515867,,"@MicK7, the branch can be deleted.

Do we re-open a new CGNS-220 branch after 4.2 release to tackle the cg_open issue ?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,229,2021-03-13T18:29:45Z,2021-03-25T16:32:25Z,2021-04-06T05:21:32Z,MERGED,True,1182,53,15,https://github.com/MicK7,CGNS-220,19,[],https://github.com/CGNS/CGNS/pull/229,https://github.com/brtnfld,12,https://github.com/CGNS/CGNS/pull/229#issuecomment-813531044,,"Or create a new branch, otherwise, we will have to keep it synced with develop.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,230,2021-03-15T00:13:19Z,2021-03-24T15:55:48Z,2021-03-25T10:50:26Z,MERGED,True,83,1,1,https://github.com/MicK7,Improve cgnscheck,3,[],https://github.com/CGNS/CGNS/pull/230,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/230,"Add check on node names accroding to SIDS (check that dot and slash are not at the start of name, see:https://cgns.github.io/CGNS_docs_current/hdf5/general.html)
Add warning if ZoneBC_t is missing while zone surface are present in a 3D mesh.","Add check on node names accroding to SIDS (check that dot and slash are not at the start of name, see:https://cgns.github.io/CGNS_docs_current/hdf5/general.html)
Add warning if ZoneBC_t is missing while zone surface are present in a 3D mesh.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,230,2021-03-15T00:13:19Z,2021-03-24T15:55:48Z,2021-03-25T10:50:26Z,MERGED,True,83,1,1,https://github.com/MicK7,Improve cgnscheck,3,[],https://github.com/CGNS/CGNS/pull/230,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/230#issuecomment-799536819,"Add check on node names accroding to SIDS (check that dot and slash are not at the start of name, see:https://cgns.github.io/CGNS_docs_current/hdf5/general.html)
Add warning if ZoneBC_t is missing while zone surface are present in a 3D mesh.","A CGNS Name can contain any printable ASCII character except the slash ""/"" and the dot ""."" when this dot is the first character of the name.
I interpret this as the name can have no slashes at all, not just the first character.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,230,2021-03-15T00:13:19Z,2021-03-24T15:55:48Z,2021-03-25T10:50:26Z,MERGED,True,83,1,1,https://github.com/MicK7,Improve cgnscheck,3,[],https://github.com/CGNS/CGNS/pull/230,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/230#issuecomment-799541107,"Add check on node names accroding to SIDS (check that dot and slash are not at the start of name, see:https://cgns.github.io/CGNS_docs_current/hdf5/general.html)
Add warning if ZoneBC_t is missing while zone surface are present in a 3D mesh.","Yes I fully agree with the comment. Checking for the first character is only for common cases that why I didn't add the full name checking.
If we want to be 100 per cent compliant I can add the full name check.
What's your opinion ?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,230,2021-03-15T00:13:19Z,2021-03-24T15:55:48Z,2021-03-25T10:50:26Z,MERGED,True,83,1,1,https://github.com/MicK7,Improve cgnscheck,3,[],https://github.com/CGNS/CGNS/pull/230,https://github.com/brtnfld,4,https://github.com/CGNS/CGNS/pull/230#issuecomment-799544343,"Add check on node names accroding to SIDS (check that dot and slash are not at the start of name, see:https://cgns.github.io/CGNS_docs_current/hdf5/general.html)
Add warning if ZoneBC_t is missing while zone surface are present in a 3D mesh.",I would check for any slashes since we are now adding that check.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,230,2021-03-15T00:13:19Z,2021-03-24T15:55:48Z,2021-03-25T10:50:26Z,MERGED,True,83,1,1,https://github.com/MicK7,Improve cgnscheck,3,[],https://github.com/CGNS/CGNS/pull/230,https://github.com/MicK7,5,https://github.com/CGNS/CGNS/pull/230#issuecomment-799629646,"Add check on node names accroding to SIDS (check that dot and slash are not at the start of name, see:https://cgns.github.io/CGNS_docs_current/hdf5/general.html)
Add warning if ZoneBC_t is missing while zone surface are present in a 3D mesh.","I would check for any slashes since we are now adding that check.

ok done.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,231,2021-03-23T15:28:45Z,2021-03-23T16:48:47Z,2021-03-23T16:48:47Z,MERGED,True,2,3,4,https://github.com/brtnfld,Fix for CGNS-240,1,[],https://github.com/CGNS/CGNS/pull/231,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/231,"CGNS-240
Made CG_MODE_CLOSED private, removed from public headers and Fortran constants.","CGNS-240
Made CG_MODE_CLOSED private, removed from public headers and Fortran constants.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,232,2021-03-24T20:12:24Z,2021-03-25T16:50:38Z,2021-03-25T16:50:44Z,MERGED,True,33,12,6,https://github.com/brtnfld,"CGNS-241, fixed cg_configure return value error",2,[],https://github.com/CGNS/CGNS/pull/232,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/232,"Fixes false error returned from cg_configure and added error checks for cg_configure in the tests, CGNS-241.","Fixes false error returned from cg_configure and added error checks for cg_configure in the tests, CGNS-241.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,233,2021-03-26T18:49:33Z,2021-03-26T19:14:25Z,2021-03-26T19:14:30Z,MERGED,True,10,2,1,https://github.com/MicK7,fix cgnscheck warning CGNS-234,1,[],https://github.com/CGNS/CGNS/pull/233,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/233,It corrects a mismatch between the type and the number of points of selected element for MIXED section.,It corrects a mismatch between the type and the number of points of selected element for MIXED section.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,234,2021-03-26T20:49:24Z,2021-03-29T15:30:36Z,2021-04-05T05:48:52Z,MERGED,True,2,2,1,https://github.com/MicK7,CGNS-204,1,[],https://github.com/CGNS/CGNS/pull/234,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/234,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,235,2021-03-30T15:13:26Z,2021-03-30T15:14:40Z,2021-03-30T15:14:40Z,MERGED,True,1,1,1,https://github.com/brtnfld,minor fix to test,33,[],https://github.com/CGNS/CGNS/pull/235,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/235,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,236,2021-04-01T14:37:03Z,2021-04-01T16:23:16Z,2021-04-20T15:09:45Z,MERGED,True,14,33,1,https://github.com/MicK7,Add a warning to cgi_sort_names function,1,[],https://github.com/CGNS/CGNS/pull/236,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/236,The code of the function is simplified and still has a performance issue but it is mentionned clearly.,The code of the function is simplified and still has a performance issue but it is mentionned clearly.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,237,2021-04-01T20:10:45Z,2021-04-05T16:38:25Z,2021-04-05T16:38:25Z,MERGED,True,434,96,9,https://github.com/brtnfld,"HDF5 core file driver feature, CGNS-239",15,[],https://github.com/CGNS/CGNS/pull/237,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/237,"Adds the ability to use the  HDF5 core file driver, CGNS-239.","Adds the ability to use the  HDF5 core file driver, CGNS-239.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,237,2021-04-01T20:10:45Z,2021-04-05T16:38:25Z,2021-04-05T16:38:25Z,MERGED,True,434,96,9,https://github.com/brtnfld,"HDF5 core file driver feature, CGNS-239",15,[],https://github.com/CGNS/CGNS/pull/237,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/237#issuecomment-812519447,"Adds the ability to use the  HDF5 core file driver, CGNS-239.",lgtm,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,238,2021-04-02T12:12:25Z,2021-04-02T15:17:50Z,2021-04-05T05:47:58Z,MERGED,True,4,3,1,https://github.com/MicK7,small tuning,1,[],https://github.com/CGNS/CGNS/pull/238,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/238,use memcpy instead of strcpy and skip costly string copy when name will not move,use memcpy instead of strcpy and skip costly string copy when name will not move,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,238,2021-04-02T12:12:25Z,2021-04-02T15:17:50Z,2021-04-05T05:47:58Z,MERGED,True,4,3,1,https://github.com/MicK7,small tuning,1,[],https://github.com/CGNS/CGNS/pull/238,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/238#issuecomment-812519952,use memcpy instead of strcpy and skip costly string copy when name will not move,@brtnfld This should be closer to original implementation for small number of zone.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,239,2021-04-02T19:12:49Z,2021-04-02T21:22:46Z,2021-04-05T05:48:50Z,MERGED,True,2,2,1,https://github.com/MicK7,simplify check from CGNS-136,1,[],https://github.com/CGNS/CGNS/pull/239,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/239,Put back lost changes from Greg Sjaardema,Put back lost changes from Greg Sjaardema,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,240,2021-04-04T06:55:14Z,2021-04-04T20:48:05Z,2021-04-05T05:48:04Z,MERGED,True,5,1,1,https://github.com/MicK7,update CMake logic to get CGNS_VERSION,1,[],https://github.com/CGNS/CGNS/pull/240,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/240,"The CGNS_VERSION is read from src/cgnslib.h
The same logic is used by autotools.
When changing version only modification in one place - cgnslib.h - is needed reducing mismatch errors.","The CGNS_VERSION is read from src/cgnslib.h
The same logic is used by autotools.
When changing version only modification in one place - cgnslib.h - is needed reducing mismatch errors.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,241,2021-04-07T16:42:45Z,2021-04-07T19:06:59Z,2021-04-07T19:07:03Z,MERGED,True,416,239,6,https://github.com/brtnfld,Added fortran cg_configure wrapper,39,[],https://github.com/CGNS/CGNS/pull/241,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/241,"Implemented Fortran wrapper with tests, CGNS-243","Implemented Fortran wrapper with tests, CGNS-243",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,241,2021-04-07T16:42:45Z,2021-04-07T19:06:59Z,2021-04-07T19:07:03Z,MERGED,True,416,239,6,https://github.com/brtnfld,Added fortran cg_configure wrapper,39,[],https://github.com/CGNS/CGNS/pull/241,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/241#issuecomment-815130966,"Implemented Fortran wrapper with tests, CGNS-243",LGTM,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,242,2021-04-07T23:07:31Z,2021-04-08T03:27:47Z,2021-04-13T19:33:36Z,MERGED,True,17,6,4,https://github.com/MicK7,some intel warnings fix,1,[],https://github.com/CGNS/CGNS/pull/242,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/242,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,242,2021-04-07T23:07:31Z,2021-04-08T03:27:47Z,2021-04-13T19:33:36Z,MERGED,True,17,6,4,https://github.com/MicK7,some intel warnings fix,1,[],https://github.com/CGNS/CGNS/pull/242,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/242#issuecomment-815418506,,Going to merge so it gets tested tonight.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,243,2021-04-08T07:19:45Z,2021-04-13T14:53:04Z,2021-04-13T14:53:09Z,MERGED,True,165,109,6,https://github.com/MicK7,fix fortran failure,11,[],https://github.com/CGNS/CGNS/pull/243,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/243,"With some fortran compiler, cgwrite_f03 is failing.
Indeed the fortran to C mapping does not go well and a (void **) was transfered thus value_c did not get the right value (the set value in value_c was the pointer address). By explicitly casting the whole chain, it solves the issue.
Furthermore value_f is declared as ""cgsize_t"" while ""int"" is used inside the C code. (In particular, we have ((int)(size_t)file_type) ...
Changing between 64bit and 32bit compilation generates also a failed test.","With some fortran compiler, cgwrite_f03 is failing.
Indeed the fortran to C mapping does not go well and a (void **) was transfered thus value_c did not get the right value (the set value in value_c was the pointer address). By explicitly casting the whole chain, it solves the issue.
Furthermore value_f is declared as ""cgsize_t"" while ""int"" is used inside the C code. (In particular, we have ((int)(size_t)file_type) ...
Changing between 64bit and 32bit compilation generates also a failed test.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,243,2021-04-08T07:19:45Z,2021-04-13T14:53:04Z,2021-04-13T14:53:09Z,MERGED,True,165,109,6,https://github.com/MicK7,fix fortran failure,11,[],https://github.com/CGNS/CGNS/pull/243,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/243#issuecomment-816052329,"With some fortran compiler, cgwrite_f03 is failing.
Indeed the fortran to C mapping does not go well and a (void **) was transfered thus value_c did not get the right value (the set value in value_c was the pointer address). By explicitly casting the whole chain, it solves the issue.
Furthermore value_f is declared as ""cgsize_t"" while ""int"" is used inside the C code. (In particular, we have ((int)(size_t)file_type) ...
Changing between 64bit and 32bit compilation generates also a failed test.","In cgns_f.F90, intel fortran complains about c_loc and c_funloc mismatch.
Adding the following directive helps compiling:
     TYPE(C_PTR), VALUE :: value
!DIR$ ATTRIBUTES NO_ARG_CHECK :: value
     INTEGER, INTENT(OUT) :: ier",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,243,2021-04-08T07:19:45Z,2021-04-13T14:53:04Z,2021-04-13T14:53:09Z,MERGED,True,165,109,6,https://github.com/MicK7,fix fortran failure,11,[],https://github.com/CGNS/CGNS/pull/243,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/243#issuecomment-816131051,"With some fortran compiler, cgwrite_f03 is failing.
Indeed the fortran to C mapping does not go well and a (void **) was transfered thus value_c did not get the right value (the set value in value_c was the pointer address). By explicitly casting the whole chain, it solves the issue.
Furthermore value_f is declared as ""cgsize_t"" while ""int"" is used inside the C code. (In particular, we have ((int)(size_t)file_type) ...
Changing between 64bit and 32bit compilation generates also a failed test.","Ah yes, I see the issue. I need to overload cg_configure_f with TYPE(C_FUNPTR) instead of TYPE(C_PTR).",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,243,2021-04-08T07:19:45Z,2021-04-13T14:53:04Z,2021-04-13T14:53:09Z,MERGED,True,165,109,6,https://github.com/MicK7,fix fortran failure,11,[],https://github.com/CGNS/CGNS/pull/243,https://github.com/MicK7,4,https://github.com/CGNS/CGNS/pull/243#issuecomment-816204096,"With some fortran compiler, cgwrite_f03 is failing.
Indeed the fortran to C mapping does not go well and a (void **) was transfered thus value_c did not get the right value (the set value in value_c was the pointer address). By explicitly casting the whole chain, it solves the issue.
Furthermore value_f is declared as ""cgsize_t"" while ""int"" is used inside the C code. (In particular, we have ((int)(size_t)file_type) ...
Changing between 64bit and 32bit compilation generates also a failed test.",cmake is not mangling correctly the name cg_configure_f . I still have not found where is the difference with autotools or if it is my cmake install that is buggy...,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,243,2021-04-08T07:19:45Z,2021-04-13T14:53:04Z,2021-04-13T14:53:09Z,MERGED,True,165,109,6,https://github.com/MicK7,fix fortran failure,11,[],https://github.com/CGNS/CGNS/pull/243,https://github.com/MicK7,5,https://github.com/CGNS/CGNS/pull/243#issuecomment-816722853,"With some fortran compiler, cgwrite_f03 is failing.
Indeed the fortran to C mapping does not go well and a (void **) was transfered thus value_c did not get the right value (the set value in value_c was the pointer address). By explicitly casting the whole chain, it solves the issue.
Furthermore value_f is declared as ""cgsize_t"" while ""int"" is used inside the C code. (In particular, we have ((int)(size_t)file_type) ...
Changing between 64bit and 32bit compilation generates also a failed test.","Current branch works well with cmake and autotools with intel and recent gnu compiler.
Looks ready for merging",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,243,2021-04-08T07:19:45Z,2021-04-13T14:53:04Z,2021-04-13T14:53:09Z,MERGED,True,165,109,6,https://github.com/MicK7,fix fortran failure,11,[],https://github.com/CGNS/CGNS/pull/243,https://github.com/brtnfld,6,https://github.com/CGNS/CGNS/pull/243#issuecomment-816736157,"With some fortran compiler, cgwrite_f03 is failing.
Indeed the fortran to C mapping does not go well and a (void **) was transfered thus value_c did not get the right value (the set value in value_c was the pointer address). By explicitly casting the whole chain, it solves the issue.
Furthermore value_f is declared as ""cgsize_t"" while ""int"" is used inside the C code. (In particular, we have ((int)(size_t)file_type) ...
Changing between 64bit and 32bit compilation generates also a failed test.","I'm just waiting for our tests to run.
There does some to be a bug in gfortran with picking the correct interface if the example uses a variable instead of in-line. I've submitted a bug report, https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99982",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,243,2021-04-08T07:19:45Z,2021-04-13T14:53:04Z,2021-04-13T14:53:09Z,MERGED,True,165,109,6,https://github.com/MicK7,fix fortran failure,11,[],https://github.com/CGNS/CGNS/pull/243,https://github.com/MicK7,7,https://github.com/CGNS/CGNS/pull/243#issuecomment-816743468,"With some fortran compiler, cgwrite_f03 is failing.
Indeed the fortran to C mapping does not go well and a (void **) was transfered thus value_c did not get the right value (the set value in value_c was the pointer address). By explicitly casting the whole chain, it solves the issue.
Furthermore value_f is declared as ""cgsize_t"" while ""int"" is used inside the C code. (In particular, we have ((int)(size_t)file_type) ...
Changing between 64bit and 32bit compilation generates also a failed test.",Nice catch,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,244,2021-04-14T21:50:25Z,2021-04-15T14:32:53Z,2021-04-15T14:32:57Z,MERGED,True,39,23,2,https://github.com/brtnfld,"Fixed to many communicators, CGNS-109",41,[],https://github.com/CGNS/CGNS/pull/244,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/244,"Leaving HDF5 fapl ids open caused MPI_Comm errors when repeatedly opening and closing a CGNS file.
CGNS now closes the fapl. Added test which opens and closes file repeatedly.","Leaving HDF5 fapl ids open caused MPI_Comm errors when repeatedly opening and closing a CGNS file.
CGNS now closes the fapl. Added test which opens and closes file repeatedly.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,245,2021-04-15T21:48:59Z,2021-04-20T14:13:00Z,2021-04-21T05:26:05Z,MERGED,True,177,12,5,https://github.com/brtnfld,CGNS-141 fixed failures in mixing serial parallel file creations,44,[],https://github.com/CGNS/CGNS/pull/245,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/245,"Excluded parallel HDF5 APIs from non-MPI IO FD usage, CGNS-141","Excluded parallel HDF5 APIs from non-MPI IO FD usage, CGNS-141",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,245,2021-04-15T21:48:59Z,2021-04-20T14:13:00Z,2021-04-21T05:26:05Z,MERGED,True,177,12,5,https://github.com/brtnfld,CGNS-141 fixed failures in mixing serial parallel file creations,44,[],https://github.com/CGNS/CGNS/pull/245,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/245#issuecomment-820923664,"Excluded parallel HDF5 APIs from non-MPI IO FD usage, CGNS-141","When I see the externs that are pilling up in adfh I wonder if adding a struct like the following in cgns_io would be worth if:
struct {
char hdf5_access[64] = ""NATIVE"";
#if CG_BUILD_PARALLEL
int pcg_mpi_comm_size;
int pcg_mpi_comm_rank;
int pcg_mpi_initialized;
MPI_Info pcg_mpi_info;
#endif
} cgio_ctxt;
Only having one external global context would be nice.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,245,2021-04-15T21:48:59Z,2021-04-20T14:13:00Z,2021-04-21T05:26:05Z,MERGED,True,177,12,5,https://github.com/brtnfld,CGNS-141 fixed failures in mixing serial parallel file creations,44,[],https://github.com/CGNS/CGNS/pull/245,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/245#issuecomment-821306463,"Excluded parallel HDF5 APIs from non-MPI IO FD usage, CGNS-141",That would be cleaner. I'll work on changing it.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,245,2021-04-15T21:48:59Z,2021-04-20T14:13:00Z,2021-04-21T05:26:05Z,MERGED,True,177,12,5,https://github.com/brtnfld,CGNS-141 fixed failures in mixing serial parallel file creations,44,[],https://github.com/CGNS/CGNS/pull/245,https://github.com/MicK7,4,https://github.com/CGNS/CGNS/pull/245#issuecomment-823005712,"Excluded parallel HDF5 APIs from non-MPI IO FD usage, CGNS-141",@brtnfld I suggest to merge as it is and create a new jira issue of improvement for the next release.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,245,2021-04-15T21:48:59Z,2021-04-20T14:13:00Z,2021-04-21T05:26:05Z,MERGED,True,177,12,5,https://github.com/brtnfld,CGNS-141 fixed failures in mixing serial parallel file creations,44,[],https://github.com/CGNS/CGNS/pull/245,https://github.com/MicK7,5,https://github.com/CGNS/CGNS/pull/245#issuecomment-823114117,"Excluded parallel HDF5 APIs from non-MPI IO FD usage, CGNS-141","I tested adding a context struct  MicK7@3592a3f
The struct is not including default_pio_mode but maybe it should.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,245,2021-04-15T21:48:59Z,2021-04-20T14:13:00Z,2021-04-21T05:26:05Z,MERGED,True,177,12,5,https://github.com/brtnfld,CGNS-141 fixed failures in mixing serial parallel file creations,44,[],https://github.com/CGNS/CGNS/pull/245,https://github.com/brtnfld,6,https://github.com/CGNS/CGNS/pull/245#issuecomment-823786072,"Excluded parallel HDF5 APIs from non-MPI IO FD usage, CGNS-141","@MicK7 sorry, I merged it without addressing default_pio_mode; it should probably be added to the struct.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,246,2021-04-16T09:06:08Z,2021-04-17T22:10:54Z,2021-04-19T20:50:19Z,MERGED,True,95,234,2,https://github.com/MicK7,CGNS-233 Does configure.ac need to check for zlib/szip headers?,3,[],https://github.com/CGNS/CGNS/pull/246,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/246,Remove header checking for zlib and szip.,Remove header checking for zlib and szip.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,246,2021-04-16T09:06:08Z,2021-04-17T22:10:54Z,2021-04-19T20:50:19Z,MERGED,True,95,234,2,https://github.com/MicK7,CGNS-233 Does configure.ac need to check for zlib/szip headers?,3,[],https://github.com/CGNS/CGNS/pull/246,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/246#issuecomment-821036340,Remove header checking for zlib and szip.,Regenerating with autoconf the configure file is needed before merging.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,246,2021-04-16T09:06:08Z,2021-04-17T22:10:54Z,2021-04-19T20:50:19Z,MERGED,True,95,234,2,https://github.com/MicK7,CGNS-233 Does configure.ac need to check for zlib/szip headers?,3,[],https://github.com/CGNS/CGNS/pull/246,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/246#issuecomment-821043404,Remove header checking for zlib and szip.,@markcmiller86   Thanks for reporting the autotools CGNS issue. Here is a quick hack of the CGNS configure that hopes to be included in next release. Do you think it would be enough for VisIt ?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,246,2021-04-16T09:06:08Z,2021-04-17T22:10:54Z,2021-04-19T20:50:19Z,MERGED,True,95,234,2,https://github.com/MicK7,CGNS-233 Does configure.ac need to check for zlib/szip headers?,3,[],https://github.com/CGNS/CGNS/pull/246,https://github.com/markcmiller86,4,https://github.com/CGNS/CGNS/pull/246#issuecomment-821316940,Remove header checking for zlib and szip.,LGTM! Thanks so much!,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,246,2021-04-16T09:06:08Z,2021-04-17T22:10:54Z,2021-04-19T20:50:19Z,MERGED,True,95,234,2,https://github.com/MicK7,CGNS-233 Does configure.ac need to check for zlib/szip headers?,3,[],https://github.com/CGNS/CGNS/pull/246,https://github.com/brtnfld,5,https://github.com/CGNS/CGNS/pull/246#issuecomment-821532602,Remove header checking for zlib and szip.,can you run Autoconf and commit configure,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,246,2021-04-16T09:06:08Z,2021-04-17T22:10:54Z,2021-04-19T20:50:19Z,MERGED,True,95,234,2,https://github.com/MicK7,CGNS-233 Does configure.ac need to check for zlib/szip headers?,3,[],https://github.com/CGNS/CGNS/pull/246,https://github.com/MicK7,6,https://github.com/CGNS/CGNS/pull/246#issuecomment-821541594,Remove header checking for zlib and szip.,"@brtnfld  Sorry I don't have access to any unix machine right now and will not have access to one next week too.
If you could add the configure I would be thankful.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,246,2021-04-16T09:06:08Z,2021-04-17T22:10:54Z,2021-04-19T20:50:19Z,MERGED,True,95,234,2,https://github.com/MicK7,CGNS-233 Does configure.ac need to check for zlib/szip headers?,3,[],https://github.com/CGNS/CGNS/pull/246,https://github.com/MicK7,7,https://github.com/CGNS/CGNS/pull/246#issuecomment-821578075,Remove header checking for zlib and szip.,@brtnfld Thanks so much,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,247,2021-04-16T15:33:48Z,2021-04-19T15:39:46Z,2021-04-19T20:50:10Z,MERGED,True,33,3,2,https://github.com/MicK7,Experimental conversion of FamilySpecified BC,1,[],https://github.com/CGNS/CGNS/pull/247,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/247,"conversion of FamilySpecified BC for AFLR3 file format, experimental support","conversion of FamilySpecified BC for AFLR3 file format, experimental support",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,247,2021-04-16T15:33:48Z,2021-04-19T15:39:46Z,2021-04-19T20:50:10Z,MERGED,True,33,3,2,https://github.com/MicK7,Experimental conversion of FamilySpecified BC,1,[],https://github.com/CGNS/CGNS/pull/247,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/247#issuecomment-821266584,"conversion of FamilySpecified BC for AFLR3 file format, experimental support",@vmoschou This patch might catch your interest (CGNS-189),True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,250,2021-04-21T23:03:50Z,2021-04-22T03:38:47Z,2021-04-22T03:38:47Z,MERGED,True,23,0,3,https://github.com/brtnfld,"Added warning about gfortran 10.2 bug, CGNS-246",42,[],https://github.com/CGNS/CGNS/pull/250,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/250,"made it a warning, I can make it an error instead.","made it a warning, I can make it an error instead.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,260,2021-04-26T17:50:27Z,2021-04-26T18:51:16Z,2021-04-26T18:54:37Z,CLOSED,False,396,117,2,https://github.com/MicK7,Synchronize develop with master,68,[],https://github.com/CGNS/CGNS/pull/260,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/260,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,260,2021-04-26T17:50:27Z,2021-04-26T18:51:16Z,2021-04-26T18:54:37Z,CLOSED,False,396,117,2,https://github.com/MicK7,Synchronize develop with master,68,[],https://github.com/CGNS/CGNS/pull/260,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/260#issuecomment-827067435,,"Ok sorry I will drop the request then.
I was thinking of having the two branch identical after release to have a cleaner reading of future merge but it is not mandatory.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,260,2021-04-26T17:50:27Z,2021-04-26T18:51:16Z,2021-04-26T18:54:37Z,CLOSED,False,396,117,2,https://github.com/MicK7,Synchronize develop with master,68,[],https://github.com/CGNS/CGNS/pull/260,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/260#issuecomment-827069468,,HISTORY.txt usually gets changed with the PR to change the version number of develop.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,261,2021-04-27T04:23:55Z,2021-04-27T13:12:30Z,2021-04-27T13:12:30Z,MERGED,True,321,122,5,https://github.com/brtnfld,update versioning ,47,[],https://github.com/CGNS/CGNS/pull/261,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/261,"misc. bookkeeping, CGNS-248","misc. bookkeeping, CGNS-248",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,262,2021-04-28T20:15:48Z,2021-04-29T15:39:05Z,2021-04-29T21:36:42Z,MERGED,True,62,46,4,https://github.com/MicK7,CGNS-247,3,[],https://github.com/CGNS/CGNS/pull/262,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/262,Add a context structure for cgio and hdf5 related state,Add a context structure for cgio and hdf5 related state,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,262,2021-04-28T20:15:48Z,2021-04-29T15:39:05Z,2021-04-29T21:36:42Z,MERGED,True,62,46,4,https://github.com/MicK7,CGNS-247,3,[],https://github.com/CGNS/CGNS/pull/262,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/262#issuecomment-829345512,Add a context structure for cgio and hdf5 related state,Thanks for the review,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,263,2021-04-30T09:03:32Z,2021-07-13T09:42:32Z,2021-07-31T12:02:20Z,MERGED,True,1375,131,2,https://github.com/MicK7,cgi_read_base pattern modification,11,['Improvement'],https://github.com/CGNS/CGNS/pull/263,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/263,"When opening a CGNS file with MLL the whole file is parsed. Moreover the zone are sorted alphabetically.
This little read pattern modification propose to use qsort to sort the zone by name.
It also add a small ""_children_t vector"" to cache node data read during base node parsing. Thus it should prevent multiple small reads.","When opening a CGNS file with MLL the whole file is parsed. Moreover the zone are sorted alphabetically.
This little read pattern modification propose to use qsort to sort the zone by name.
It also add a small ""_children_t vector"" to cache node data read during base node parsing. Thus it should prevent multiple small reads.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,263,2021-04-30T09:03:32Z,2021-07-13T09:42:32Z,2021-07-31T12:02:20Z,MERGED,True,1375,131,2,https://github.com/MicK7,cgi_read_base pattern modification,11,['Improvement'],https://github.com/CGNS/CGNS/pull/263,https://github.com/apps/lgtm-com,2,https://github.com/CGNS/CGNS/pull/263#issuecomment-829957164,"When opening a CGNS file with MLL the whole file is parsed. Moreover the zone are sorted alphabetically.
This little read pattern modification propose to use qsort to sort the zone by name.
It also add a small ""_children_t vector"" to cache node data read during base node parsing. Thus it should prevent multiple small reads.","This pull request introduces 1 alert when merging 1b39b24 into 7fa9c58 - view on LGTM.com
new alerts:

1 for Implicit function declaration",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,263,2021-04-30T09:03:32Z,2021-07-13T09:42:32Z,2021-07-31T12:02:20Z,MERGED,True,1375,131,2,https://github.com/MicK7,cgi_read_base pattern modification,11,['Improvement'],https://github.com/CGNS/CGNS/pull/263,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/263#issuecomment-830074537,"When opening a CGNS file with MLL the whole file is parsed. Moreover the zone are sorted alphabetically.
This little read pattern modification propose to use qsort to sort the zone by name.
It also add a small ""_children_t vector"" to cache node data read during base node parsing. Thus it should prevent multiple small reads.","@brtnfld Here are some coding thoughts to improve the situation. If it can help get started with fixing CGNS-220.
One of the question I am still wondering is : how can we not load the Zone_t structure on all the MPI process and store the collection of Zones in a distributed way so that not a lot of memory is used per processor ? The CGNS/MLL API seems quite limited in this case and designing a new API directly for HPC would be better than adapting the MLL.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,263,2021-04-30T09:03:32Z,2021-07-13T09:42:32Z,2021-07-31T12:02:20Z,MERGED,True,1375,131,2,https://github.com/MicK7,cgi_read_base pattern modification,11,['Improvement'],https://github.com/CGNS/CGNS/pull/263,https://github.com/brtnfld,4,https://github.com/CGNS/CGNS/pull/263#issuecomment-831328956,"When opening a CGNS file with MLL the whole file is parsed. Moreover the zone are sorted alphabetically.
This little read pattern modification propose to use qsort to sort the zone by name.
It also add a small ""_children_t vector"" to cache node data read during base node parsing. Thus it should prevent multiple small reads.","@brtnfld Here are some coding thoughts to improve the situation. If it can help get started with fixing CGNS-220.
One of the question I am still wondering is: how can we not load the Zone_t structure on all the MPI process and store the collection of Zones in a distributed way so that not a lot of memory is used per processor? The CGNS/MLL API seems quite limited in this case and designing a new API directly for HPC would be better than adapting the MLL.

Storing the information in memory should help performance; it is similar to using the HDF5 core file driver. The obvious issue is coming up with a schema for how the information gets coordinated among the processes. Agreed that a new pcg API would be better.
We would have to make sure that the in-memory reflects what is persisted to disk, and avoid reading/writing small datasets to disk.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,263,2021-04-30T09:03:32Z,2021-07-13T09:42:32Z,2021-07-31T12:02:20Z,MERGED,True,1375,131,2,https://github.com/MicK7,cgi_read_base pattern modification,11,['Improvement'],https://github.com/CGNS/CGNS/pull/263,https://github.com/MicK7,5,https://github.com/CGNS/CGNS/pull/263#issuecomment-831379069,"When opening a CGNS file with MLL the whole file is parsed. Moreover the zone are sorted alphabetically.
This little read pattern modification propose to use qsort to sort the zone by name.
It also add a small ""_children_t vector"" to cache node data read during base node parsing. Thus it should prevent multiple small reads.",I fully agree with your point of view. I was just stating that sometimes one MPI process just need to know that a Zone_t exists but will never need to access its data. Thus this process can delegate to other MPI process the caching of the data. When it really access to the Zone_t sub-nodes it could retrieve it from the other process.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,263,2021-04-30T09:03:32Z,2021-07-13T09:42:32Z,2021-07-31T12:02:20Z,MERGED,True,1375,131,2,https://github.com/MicK7,cgi_read_base pattern modification,11,['Improvement'],https://github.com/CGNS/CGNS/pull/263,https://github.com/MicK7,6,https://github.com/CGNS/CGNS/pull/263#issuecomment-869191251,"When opening a CGNS file with MLL the whole file is parsed. Moreover the zone are sorted alphabetically.
This little read pattern modification propose to use qsort to sort the zone by name.
It also add a small ""_children_t vector"" to cache node data read during base node parsing. Thus it should prevent multiple small reads.","@brtnfld Do you think these changes could be good enough for main branch ?
edit: qsort is not a stable sorting algorithm leading to a workaround not so nice.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,263,2021-04-30T09:03:32Z,2021-07-13T09:42:32Z,2021-07-31T12:02:20Z,MERGED,True,1375,131,2,https://github.com/MicK7,cgi_read_base pattern modification,11,['Improvement'],https://github.com/CGNS/CGNS/pull/263,https://github.com/brtnfld,7,https://github.com/CGNS/CGNS/pull/263#issuecomment-869999939,"When opening a CGNS file with MLL the whole file is parsed. Moreover the zone are sorted alphabetically.
This little read pattern modification propose to use qsort to sort the zone by name.
It also add a small ""_children_t vector"" to cache node data read during base node parsing. Thus it should prevent multiple small reads.",Is this ready for review?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,263,2021-04-30T09:03:32Z,2021-07-13T09:42:32Z,2021-07-31T12:02:20Z,MERGED,True,1375,131,2,https://github.com/MicK7,cgi_read_base pattern modification,11,['Improvement'],https://github.com/CGNS/CGNS/pull/263,https://github.com/MicK7,8,https://github.com/CGNS/CGNS/pull/263#issuecomment-870030385,"When opening a CGNS file with MLL the whole file is parsed. Moreover the zone are sorted alphabetically.
This little read pattern modification propose to use qsort to sort the zone by name.
It also add a small ""_children_t vector"" to cache node data read during base node parsing. Thus it should prevent multiple small reads.",It should be ready for review now,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,263,2021-04-30T09:03:32Z,2021-07-13T09:42:32Z,2021-07-31T12:02:20Z,MERGED,True,1375,131,2,https://github.com/MicK7,cgi_read_base pattern modification,11,['Improvement'],https://github.com/CGNS/CGNS/pull/263,https://github.com/MicK7,9,https://github.com/CGNS/CGNS/pull/263#issuecomment-871329142,"When opening a CGNS file with MLL the whole file is parsed. Moreover the zone are sorted alphabetically.
This little read pattern modification propose to use qsort to sort the zone by name.
It also add a small ""_children_t vector"" to cache node data read during base node parsing. Thus it should prevent multiple small reads.","This should solve the N^2 sorting of zonename of https://cgnsorg.atlassian.net/browse/CGNS-220 since we rely on qsort that is N*log(N) complexity
I would be nice to do a benchmark with the new code",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,263,2021-04-30T09:03:32Z,2021-07-13T09:42:32Z,2021-07-31T12:02:20Z,MERGED,True,1375,131,2,https://github.com/MicK7,cgi_read_base pattern modification,11,['Improvement'],https://github.com/CGNS/CGNS/pull/263,https://github.com/brtnfld,10,https://github.com/CGNS/CGNS/pull/263#issuecomment-871486707,"When opening a CGNS file with MLL the whole file is parsed. Moreover the zone are sorted alphabetically.
This little read pattern modification propose to use qsort to sort the zone by name.
It also add a small ""_children_t vector"" to cache node data read during base node parsing. Thus it should prevent multiple small reads.","I'm assuming  Metadata_Stressing.c would show the improvement, I'll benchmark it.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,263,2021-04-30T09:03:32Z,2021-07-13T09:42:32Z,2021-07-31T12:02:20Z,MERGED,True,1375,131,2,https://github.com/MicK7,cgi_read_base pattern modification,11,['Improvement'],https://github.com/CGNS/CGNS/pull/263,https://github.com/brtnfld,11,https://github.com/CGNS/CGNS/pull/263#issuecomment-872364470,"When opening a CGNS file with MLL the whole file is parsed. Moreover the zone are sorted alphabetically.
This little read pattern modification propose to use qsort to sort the zone by name.
It also add a small ""_children_t vector"" to cache node data read during base node parsing. Thus it should prevent multiple small reads.","cgns_internals.c:375:13: warning: comparison of array 'nchildbylabel' equal to a null pointer is always false [-Wtautological-pointer-compare]
if (nchildbylabel == 0) continue;
^~~~~~~~~~~~~    ~",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,263,2021-04-30T09:03:32Z,2021-07-13T09:42:32Z,2021-07-31T12:02:20Z,MERGED,True,1375,131,2,https://github.com/MicK7,cgi_read_base pattern modification,11,['Improvement'],https://github.com/CGNS/CGNS/pull/263,https://github.com/MicK7,12,https://github.com/CGNS/CGNS/pull/263#issuecomment-872387749,"When opening a CGNS file with MLL the whole file is parsed. Moreover the zone are sorted alphabetically.
This little read pattern modification propose to use qsort to sort the zone by name.
It also add a small ""_children_t vector"" to cache node data read during base node parsing. Thus it should prevent multiple small reads.","cgns_internals.c:375:13: warning: comparison of array 'nchildbylabel' equal to a null pointer is always false [-Wtautological-pointer-compare]
if (nchildbylabel == 0) continue;
^~~~~~~~~~~~~ ~

Thanks for catching this bug. It was supposed to be nchildbylabel[n] !!",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,263,2021-04-30T09:03:32Z,2021-07-13T09:42:32Z,2021-07-31T12:02:20Z,MERGED,True,1375,131,2,https://github.com/MicK7,cgi_read_base pattern modification,11,['Improvement'],https://github.com/CGNS/CGNS/pull/263,https://github.com/MicK7,13,https://github.com/CGNS/CGNS/pull/263#issuecomment-874780674,"When opening a CGNS file with MLL the whole file is parsed. Moreover the zone are sorted alphabetically.
This little read pattern modification propose to use qsort to sort the zone by name.
It also add a small ""_children_t vector"" to cache node data read during base node parsing. Thus it should prevent multiple small reads.",@brtnfld Did you manage to benchmark after the fix ?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,263,2021-04-30T09:03:32Z,2021-07-13T09:42:32Z,2021-07-31T12:02:20Z,MERGED,True,1375,131,2,https://github.com/MicK7,cgi_read_base pattern modification,11,['Improvement'],https://github.com/CGNS/CGNS/pull/263,https://github.com/MicK7,14,https://github.com/CGNS/CGNS/pull/263#issuecomment-878939572,"When opening a CGNS file with MLL the whole file is parsed. Moreover the zone are sorted alphabetically.
This little read pattern modification propose to use qsort to sort the zone by name.
It also add a small ""_children_t vector"" to cache node data read during base node parsing. Thus it should prevent multiple small reads.",Merging even if no benchmark done right now.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,263,2021-04-30T09:03:32Z,2021-07-13T09:42:32Z,2021-07-31T12:02:20Z,MERGED,True,1375,131,2,https://github.com/MicK7,cgi_read_base pattern modification,11,['Improvement'],https://github.com/CGNS/CGNS/pull/263,https://github.com/brtnfld,15,https://github.com/CGNS/CGNS/pull/263#issuecomment-883492433,"When opening a CGNS file with MLL the whole file is parsed. Moreover the zone are sorted alphabetically.
This little read pattern modification propose to use qsort to sort the zone by name.
It also add a small ""_children_t vector"" to cache node data read during base node parsing. Thus it should prevent multiple small reads.","@MicK7 I had an error in my batch script, I'm rerunning it now.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,263,2021-04-30T09:03:32Z,2021-07-13T09:42:32Z,2021-07-31T12:02:20Z,MERGED,True,1375,131,2,https://github.com/MicK7,cgi_read_base pattern modification,11,['Improvement'],https://github.com/CGNS/CGNS/pull/263,https://github.com/brtnfld,16,https://github.com/CGNS/CGNS/pull/263#issuecomment-884357714,"When opening a CGNS file with MLL the whole file is parsed. Moreover the zone are sorted alphabetically.
This little read pattern modification propose to use qsort to sort the zone by name.
It also add a small ""_children_t vector"" to cache node data read during base node parsing. Thus it should prevent multiple small reads.","@MicK7  On Summit (ORNL), I tested Metadata_Stressing using 7056 ranks and ran it four times to get the mean, min, max over the four runs. All the timing numbers are summarized in https://cgnsorg.atlassian.net/browse/CGNS-220
The cgp_open shows an improvement from 191s to 186s (mean).",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,263,2021-04-30T09:03:32Z,2021-07-13T09:42:32Z,2021-07-31T12:02:20Z,MERGED,True,1375,131,2,https://github.com/MicK7,cgi_read_base pattern modification,11,['Improvement'],https://github.com/CGNS/CGNS/pull/263,https://github.com/MicK7,17,https://github.com/CGNS/CGNS/pull/263#issuecomment-884517288,"When opening a CGNS file with MLL the whole file is parsed. Moreover the zone are sorted alphabetically.
This little read pattern modification propose to use qsort to sort the zone by name.
It also add a small ""_children_t vector"" to cache node data read during base node parsing. Thus it should prevent multiple small reads.",Thanks for testing. The improvement is not so big but very happy that it goes in the right direction. I am wondering which read timing with cg_open could be achievable without zone name sorting.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,264,2021-04-30T13:34:40Z,2021-04-30T14:40:59Z,2021-04-30T16:08:08Z,MERGED,True,1,1,1,https://github.com/gsjaardema,Fix bad cast,1,[],https://github.com/CGNS/CGNS/pull/264,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/264,The uint cast should be uint32_t,The uint cast should be uint32_t,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,264,2021-04-30T13:34:40Z,2021-04-30T14:40:59Z,2021-04-30T16:08:08Z,MERGED,True,1,1,1,https://github.com/gsjaardema,Fix bad cast,1,[],https://github.com/CGNS/CGNS/pull/264,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/264#issuecomment-830130653,The uint cast should be uint32_t,LGTM,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,265,2021-04-30T13:39:21Z,2021-04-30T16:07:48Z,2021-04-30T17:11:30Z,MERGED,True,7,7,1,https://github.com/gsjaardema,Add some missing macros,1,[],https://github.com/CGNS/CGNS/pull/265,https://github.com/gsjaardema,1,https://github.com/CGNS/CGNS/pull/265,Several missing macros to handle the scoping setting,Several missing macros to handle the scoping setting,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,265,2021-04-30T13:39:21Z,2021-04-30T16:07:48Z,2021-04-30T17:11:30Z,MERGED,True,7,7,1,https://github.com/gsjaardema,Add some missing macros,1,[],https://github.com/CGNS/CGNS/pull/265,https://github.com/gsjaardema,2,https://github.com/CGNS/CGNS/pull/265#issuecomment-830164410,Several missing macros to handle the scoping setting,"@brtnfld Not sure if you saw this one.  I can merge if you want, but didnt' want to overstep.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,265,2021-04-30T13:39:21Z,2021-04-30T16:07:48Z,2021-04-30T17:11:30Z,MERGED,True,7,7,1,https://github.com/gsjaardema,Add some missing macros,1,[],https://github.com/CGNS/CGNS/pull/265,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/265#issuecomment-830166382,Several missing macros to handle the scoping setting,"I was waiting for the check to complete, feel free to merge it. Can I ask how you detected this issue so I can see if I can add the same to the daily tests?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,265,2021-04-30T13:39:21Z,2021-04-30T16:07:48Z,2021-04-30T17:11:30Z,MERGED,True,7,7,1,https://github.com/gsjaardema,Add some missing macros,1,[],https://github.com/CGNS/CGNS/pull/265,https://github.com/gsjaardema,4,https://github.com/CGNS/CGNS/pull/265#issuecomment-830199862,Several missing macros to handle the scoping setting,I was building with scoping and tests enabled in a parallel build.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,265,2021-04-30T13:39:21Z,2021-04-30T16:07:48Z,2021-04-30T17:11:30Z,MERGED,True,7,7,1,https://github.com/gsjaardema,Add some missing macros,1,[],https://github.com/CGNS/CGNS/pull/265,https://github.com/brtnfld,5,https://github.com/CGNS/CGNS/pull/265#issuecomment-830237291,Several missing macros to handle the scoping setting,"Thanks, I missed scope with parallel. I'll add it to the testing.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,266,2021-05-03T14:30:12Z,2021-05-03T15:03:40Z,2021-05-03T15:03:40Z,MERGED,True,11,11,3,https://github.com/brtnfld,struct fixes for parallel.,50,[],https://github.com/CGNS/CGNS/pull/266,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/266,Fixed missing struct contexts and updated needed include in make because of new struct.,Fixed missing struct contexts and updated needed include in make because of new struct.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,266,2021-05-03T14:30:12Z,2021-05-03T15:03:40Z,2021-05-03T15:03:40Z,MERGED,True,11,11,3,https://github.com/brtnfld,struct fixes for parallel.,50,[],https://github.com/CGNS/CGNS/pull/266,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/266#issuecomment-831300145,Fixed missing struct contexts and updated needed include in make because of new struct.,Sorry for missing those lines,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,267,2021-05-05T14:53:00Z,2021-05-06T23:14:16Z,2021-05-06T23:14:16Z,MERGED,True,4252,4134,116,https://github.com/brtnfld,Fixed Scoping issues (mainly with Fortran),54,[],https://github.com/CGNS/CGNS/pull/267,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/267,"Went down the scoping rabbit hole. Fixed all the missing scope enumerations in the Fortran tests, which lead to getting rid of the fixed formatting, Reworked CONCATENATE to work with gfortran (see cgnstypes_f03.h.in), CGNS-249
Not Fun, thankfully we have find and Perl.","Went down the scoping rabbit hole. Fixed all the missing scope enumerations in the Fortran tests, which lead to getting rid of the fixed formatting, Reworked CONCATENATE to work with gfortran (see cgnstypes_f03.h.in), CGNS-249
Not Fun, thankfully we have find and Perl.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,267,2021-05-05T14:53:00Z,2021-05-06T23:14:16Z,2021-05-06T23:14:16Z,MERGED,True,4252,4134,116,https://github.com/brtnfld,Fixed Scoping issues (mainly with Fortran),54,[],https://github.com/CGNS/CGNS/pull/267,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/267#issuecomment-832967748,"Went down the scoping rabbit hole. Fixed all the missing scope enumerations in the Fortran tests, which lead to getting rid of the fixed formatting, Reworked CONCATENATE to work with gfortran (see cgnstypes_f03.h.in), CGNS-249
Not Fun, thankfully we have find and Perl.","I am not really familiar with the scoping feature so I trust others to review all the holes.
Thanks for the not so fun dig up",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,267,2021-05-05T14:53:00Z,2021-05-06T23:14:16Z,2021-05-06T23:14:16Z,MERGED,True,4252,4134,116,https://github.com/brtnfld,Fixed Scoping issues (mainly with Fortran),54,[],https://github.com/CGNS/CGNS/pull/267,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/267#issuecomment-832968993,"Went down the scoping rabbit hole. Fixed all the missing scope enumerations in the Fortran tests, which lead to getting rid of the fixed formatting, Reworked CONCATENATE to work with gfortran (see cgnstypes_f03.h.in), CGNS-249
Not Fun, thankfully we have find and Perl.",@gsjaardema @brtnfld  Do you think this will require a minor release 4.2.1 ?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,267,2021-05-05T14:53:00Z,2021-05-06T23:14:16Z,2021-05-06T23:14:16Z,MERGED,True,4252,4134,116,https://github.com/brtnfld,Fixed Scoping issues (mainly with Fortran),54,[],https://github.com/CGNS/CGNS/pull/267,https://github.com/brtnfld,4,https://github.com/CGNS/CGNS/pull/267#issuecomment-833008716,"Went down the scoping rabbit hole. Fixed all the missing scope enumerations in the Fortran tests, which lead to getting rid of the fixed formatting, Reworked CONCATENATE to work with gfortran (see cgnstypes_f03.h.in), CGNS-249
Not Fun, thankfully we have find and Perl.","I would not think a minor release is needed since PR#265 fixed a test, and this fixes a previous bug/tests already in 4.1.2 (and 4.2.0); the CGNS library itself is not affected.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,267,2021-05-05T14:53:00Z,2021-05-06T23:14:16Z,2021-05-06T23:14:16Z,MERGED,True,4252,4134,116,https://github.com/brtnfld,Fixed Scoping issues (mainly with Fortran),54,[],https://github.com/CGNS/CGNS/pull/267,https://github.com/brtnfld,5,https://github.com/CGNS/CGNS/pull/267#issuecomment-833853958,"Went down the scoping rabbit hole. Fixed all the missing scope enumerations in the Fortran tests, which lead to getting rid of the fixed formatting, Reworked CONCATENATE to work with gfortran (see cgnstypes_f03.h.in), CGNS-249
Not Fun, thankfully we have find and Perl.","@gsjaardema, are you going to have time to review this, or should I just merge it?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,267,2021-05-05T14:53:00Z,2021-05-06T23:14:16Z,2021-05-06T23:14:16Z,MERGED,True,4252,4134,116,https://github.com/brtnfld,Fixed Scoping issues (mainly with Fortran),54,[],https://github.com/CGNS/CGNS/pull/267,https://github.com/brtnfld,6,https://github.com/CGNS/CGNS/pull/267#issuecomment-833934214,"Went down the scoping rabbit hole. Fixed all the missing scope enumerations in the Fortran tests, which lead to getting rid of the fixed formatting, Reworked CONCATENATE to work with gfortran (see cgnstypes_f03.h.in), CGNS-249
Not Fun, thankfully we have find and Perl.","I don't know why the mpi_initialized change is showing up, that change is already in develop. Thanks for reviewing this.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,268,2021-05-07T18:47:43Z,2021-05-07T19:07:11Z,2021-05-07T19:07:11Z,MERGED,True,111,97,8,https://github.com/brtnfld,"CGNS-249 clean-up, fixed typo and removed remaining numbered DO loops",1,[],https://github.com/CGNS/CGNS/pull/268,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/268,Fixed typo in fexample_f and removed warnings reported due to number DO loops. CGNS-249,Fixed typo in fexample_f and removed warnings reported due to number DO loops. CGNS-249,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,269,2021-05-12T16:09:55Z,2021-05-12T18:11:28Z,2021-05-14T16:45:42Z,MERGED,True,257,135,10,https://github.com/brtnfld,"CGNS-232, replace TravisCI with Github Actions",47,[],https://github.com/CGNS/CGNS/pull/269,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/269,"I moved to build HDF5 and make checks from the bash scripts to the yml file instead since they are trivial.
The yml file still calls a bash script for configuring Autotools builds and CMake builds, I have the feeling that this would really complicate the yml file since bash seems to be more versatile than yml.
I fixed a few minor issues with the tests which caused Actions to fail.
I think current coverage is fairly comprehensive, but we can add more/tweak if needed, it a least gets Linux and macOS testing back for PRs once again.
And yes, some trial and error was involved in getting it to work :)
CGNS-232","I moved to build HDF5 and make checks from the bash scripts to the yml file instead since they are trivial.
The yml file still calls a bash script for configuring Autotools builds and CMake builds, I have the feeling that this would really complicate the yml file since bash seems to be more versatile than yml.
I fixed a few minor issues with the tests which caused Actions to fail.
I think current coverage is fairly comprehensive, but we can add more/tweak if needed, it a least gets Linux and macOS testing back for PRs once again.
And yes, some trial and error was involved in getting it to work :)
CGNS-232",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,269,2021-05-12T16:09:55Z,2021-05-12T18:11:28Z,2021-05-14T16:45:42Z,MERGED,True,257,135,10,https://github.com/brtnfld,"CGNS-232, replace TravisCI with Github Actions",47,[],https://github.com/CGNS/CGNS/pull/269,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/269#issuecomment-839983120,"I moved to build HDF5 and make checks from the bash scripts to the yml file instead since they are trivial.
The yml file still calls a bash script for configuring Autotools builds and CMake builds, I have the feeling that this would really complicate the yml file since bash seems to be more versatile than yml.
I fixed a few minor issues with the tests which caused Actions to fail.
I think current coverage is fairly comprehensive, but we can add more/tweak if needed, it a least gets Linux and macOS testing back for PRs once again.
And yes, some trial and error was involved in getting it to work :)
CGNS-232","@brtnfld Nice job !
May be adding a cmake-ninja build that should run faster than good old make, can also be considered in the future.
cmake -G Ninja ...
ninja build
ninja test
and dependency will be

macOS:
brew install ninja
Ubuntu
sudo apt-get install ninja-build

Since it seems quite easy to add, I think the feature can be thought over later.
Adding the ""Generator"" specificied allows to also handle windows build.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,270,2021-05-20T19:55:43Z,2021-05-23T14:46:12Z,2021-06-21T16:34:56Z,MERGED,True,133,33,5,https://github.com/brtnfld,CGNS 244 replaced #ifdef JFC_PATCH_2015_2 with cg_configure,26,[],https://github.com/CGNS/CGNS/pull/270,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/270,"Users can dynamically set the parameters in the old #def patch.
Added a reset configure option to go back to the default values instead of explicitly resetting the defaults.","Users can dynamically set the parameters in the old #def patch.
Added a reset configure option to go back to the default values instead of explicitly resetting the defaults.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,270,2021-05-20T19:55:43Z,2021-05-23T14:46:12Z,2021-06-21T16:34:56Z,MERGED,True,133,33,5,https://github.com/brtnfld,CGNS 244 replaced #ifdef JFC_PATCH_2015_2 with cg_configure,26,[],https://github.com/CGNS/CGNS/pull/270,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/270#issuecomment-846289889,"Users can dynamically set the parameters in the old #def patch.
Added a reset configure option to go back to the default values instead of explicitly resetting the defaults.",LGTM.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,271,2021-06-02T12:00:45Z,2021-06-13T23:55:04Z,2021-06-14T07:01:28Z,MERGED,True,4,4,1,https://github.com/xantares,Keep default library name on mingw,1,['Improvement'],https://github.com/CGNS/CGNS/pull/271,https://github.com/xantares,1,https://github.com/CGNS/CGNS/pull/271,"For windows platforms we only need to rename the shared library when the import library name is the same as the static name
With msvc this is usually the case (cgns.lib) but not on mingw where libcgns.a and libcgns.dll.a can coexist.","For windows platforms we only need to rename the shared library when the import library name is the same as the static name
With msvc this is usually the case (cgns.lib) but not on mingw where libcgns.a and libcgns.dll.a can coexist.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,271,2021-06-02T12:00:45Z,2021-06-13T23:55:04Z,2021-06-14T07:01:28Z,MERGED,True,4,4,1,https://github.com/xantares,Keep default library name on mingw,1,['Improvement'],https://github.com/CGNS/CGNS/pull/271,https://github.com/xantares,2,https://github.com/CGNS/CGNS/pull/271#issuecomment-859515333,"For windows platforms we only need to rename the shared library when the import library name is the same as the static name
With msvc this is usually the case (cgns.lib) but not on mingw where libcgns.a and libcgns.dll.a can coexist.","@brtnfld not really a bug, but it helps projects that depend on cgns finding the right library name
what's the status on this ?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,271,2021-06-02T12:00:45Z,2021-06-13T23:55:04Z,2021-06-14T07:01:28Z,MERGED,True,4,4,1,https://github.com/xantares,Keep default library name on mingw,1,['Improvement'],https://github.com/CGNS/CGNS/pull/271,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/271#issuecomment-859584076,"For windows platforms we only need to rename the shared library when the import library name is the same as the static name
With msvc this is usually the case (cgns.lib) but not on mingw where libcgns.a and libcgns.dll.a can coexist.",I think that we need to check how it impacts existing compilation toolchain but it seems to be clearly an improvement.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,271,2021-06-02T12:00:45Z,2021-06-13T23:55:04Z,2021-06-14T07:01:28Z,MERGED,True,4,4,1,https://github.com/xantares,Keep default library name on mingw,1,['Improvement'],https://github.com/CGNS/CGNS/pull/271,https://github.com/brtnfld,4,https://github.com/CGNS/CGNS/pull/271#issuecomment-859623350,"For windows platforms we only need to rename the shared library when the import library name is the same as the static name
With msvc this is usually the case (cgns.lib) but not on mingw where libcgns.a and libcgns.dll.a can coexist.","@MicK7, the issue I'm not clear about is taking something that was windows specific and now applying that to macOS and Linux. I don't see any issues, but I'm not 100% sure.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,271,2021-06-02T12:00:45Z,2021-06-13T23:55:04Z,2021-06-14T07:01:28Z,MERGED,True,4,4,1,https://github.com/xantares,Keep default library name on mingw,1,['Improvement'],https://github.com/CGNS/CGNS/pull/271,https://github.com/xantares,5,https://github.com/CGNS/CGNS/pull/271#issuecomment-859625643,"For windows platforms we only need to rename the shared library when the import library name is the same as the static name
With msvc this is usually the case (cgns.lib) but not on mingw where libcgns.a and libcgns.dll.a can coexist.","it doesnt change anything on osx/linux because shared and static have different extensions, only on mingw",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,275,2021-06-16T16:46:28Z,2021-06-16T19:57:42Z,2021-06-16T19:57:42Z,MERGED,True,2,0,1,https://github.com/brtnfld,update the test bed,4,[],https://github.com/CGNS/CGNS/pull/275,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/275,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,276,2021-06-16T20:07:26Z,2021-06-16T20:23:01Z,2021-06-16T20:23:02Z,CLOSED,False,0,2,1,https://github.com/brtnfld,"Revert ""update the test bed""",1,[],https://github.com/CGNS/CGNS/pull/276,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/276,Reverts #275,Reverts #275,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,276,2021-06-16T20:07:26Z,2021-06-16T20:23:01Z,2021-06-16T20:23:02Z,CLOSED,False,0,2,1,https://github.com/brtnfld,"Revert ""update the test bed""",1,[],https://github.com/CGNS/CGNS/pull/276,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/276#issuecomment-862693885,Reverts #275,"still fails, I'm not sure what is going on.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,277,2021-06-16T20:26:40Z,2021-06-17T13:36:07Z,2021-06-17T13:36:07Z,MERGED,True,3,4,1,https://github.com/brtnfld,fixed mpich installation in github actions,15,[],https://github.com/CGNS/CGNS/pull/277,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/277,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,279,2021-06-22T19:10:11Z,2021-06-22T19:11:54Z,2021-06-22T19:11:58Z,MERGED,True,840,31,8,https://github.com/brtnfld,Compression,17,[],https://github.com/CGNS/CGNS/pull/279,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/279,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,284,2021-06-30T17:05:40Z,,2022-03-21T14:23:59Z,OPEN,False,1611,55,18,https://github.com/brtnfld,Feature -- HDF5 chunked datasets and compression,27,"['WIP', 'Feature']",https://github.com/CGNS/CGNS/pull/284,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/284,Initial implementation for adding HDF5 chunked dataset option and HDF5 filter (compression) option.,Initial implementation for adding HDF5 chunked dataset option and HDF5 filter (compression) option.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,284,2021-06-30T17:05:40Z,,2022-03-21T14:23:59Z,OPEN,False,1611,55,18,https://github.com/brtnfld,Feature -- HDF5 chunked datasets and compression,27,"['WIP', 'Feature']",https://github.com/CGNS/CGNS/pull/284,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/284#issuecomment-871639878,Initial implementation for adding HDF5 chunked dataset option and HDF5 filter (compression) option.,"Has you are working with HDF5 filter it led me to think about encryption filtering.
I know that hdf5 is capable of encryption and I was wondering if it could be possible to have a simple encrypt for some specific data in the CGNS file (GeometryReference_t nodes only would be encrypted for instance). I know a CPEX would be required to implement this but I was still curious about the feasability.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,284,2021-06-30T17:05:40Z,,2022-03-21T14:23:59Z,OPEN,False,1611,55,18,https://github.com/brtnfld,Feature -- HDF5 chunked datasets and compression,27,"['WIP', 'Feature']",https://github.com/CGNS/CGNS/pull/284,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/284#issuecomment-871717100,Initial implementation for adding HDF5 chunked dataset option and HDF5 filter (compression) option.,"If the encryption filter is registered with HDF5, the current API will work; one would call the encryption filter before the cgns write. However, the current implementation can't handle unregistered filters, and encryption would need this since there are currently no registered encryption filters. Plus, there is no mechanism available in HDF5 to pass a key to the library. Encryption in HDF5 is probably using a one-off version or prototype of HDF5 to do it.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,284,2021-06-30T17:05:40Z,,2022-03-21T14:23:59Z,OPEN,False,1611,55,18,https://github.com/brtnfld,Feature -- HDF5 chunked datasets and compression,27,"['WIP', 'Feature']",https://github.com/CGNS/CGNS/pull/284,https://github.com/brtnfld,4,https://github.com/CGNS/CGNS/pull/284#issuecomment-885227465,Initial implementation for adding HDF5 chunked dataset option and HDF5 filter (compression) option.,"Need to add Fortran APIs for cg_set_chunk, cg_set_filter",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,290,2021-07-20T18:55:20Z,2021-07-20T20:46:06Z,2021-07-31T12:02:08Z,MERGED,True,1,5,1,https://github.com/MicK7,Fix unresolved symbol CGNS-259,1,[],https://github.com/CGNS/CGNS/pull/290,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/290,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,291,2021-07-20T20:27:11Z,2021-07-20T20:52:36Z,2021-07-20T20:52:37Z,MERGED,True,20,13,1,https://github.com/brtnfld,misc. fixes for metadata tests,17,[],https://github.com/CGNS/CGNS/pull/291,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/291,fixed arg. checks and timing output,fixed arg. checks and timing output,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,292,2021-07-31T17:38:27Z,2021-08-05T17:04:30Z,2021-08-05T17:04:37Z,MERGED,True,41,73,6,https://github.com/brtnfld,Cmake fixes for tools,21,[],https://github.com/CGNS/CGNS/pull/292,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/292,"CMake fixes for CGNS-256, CGNS-257, CGNS-258","CMake fixes for CGNS-256, CGNS-257, CGNS-258",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,292,2021-07-31T17:38:27Z,2021-08-05T17:04:30Z,2021-08-05T17:04:37Z,MERGED,True,41,73,6,https://github.com/brtnfld,Cmake fixes for tools,21,[],https://github.com/CGNS/CGNS/pull/292,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/292#issuecomment-890416886,"CMake fixes for CGNS-256, CGNS-257, CGNS-258","Where are the programs vertex_to_cells and cells_to_vertex, They are in the Makefile.in but not in Cmake.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,292,2021-07-31T17:38:27Z,2021-08-05T17:04:30Z,2021-08-05T17:04:37Z,MERGED,True,41,73,6,https://github.com/brtnfld,Cmake fixes for tools,21,[],https://github.com/CGNS/CGNS/pull/292,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/292#issuecomment-891048471,"CMake fixes for CGNS-256, CGNS-257, CGNS-258","Where are the programs vertex_to_cells and cells_to_vertex, They are in the Makefile.in but not in Cmake.

It seems that they should be generated from convert_location.c at compile time by defining or not VERTEX_TO_CELL. This is misleading and maybe it does not work.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,292,2021-07-31T17:38:27Z,2021-08-05T17:04:30Z,2021-08-05T17:04:37Z,MERGED,True,41,73,6,https://github.com/brtnfld,Cmake fixes for tools,21,[],https://github.com/CGNS/CGNS/pull/292,https://github.com/brtnfld,4,https://github.com/CGNS/CGNS/pull/292#issuecomment-891068138,"CMake fixes for CGNS-256, CGNS-257, CGNS-258","I see now, one has to use make everything to build it. Do you know the reason to not build them by default? It does not get built with CMake.
I would think cgns_info should be built by default.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,292,2021-07-31T17:38:27Z,2021-08-05T17:04:30Z,2021-08-05T17:04:37Z,MERGED,True,41,73,6,https://github.com/brtnfld,Cmake fixes for tools,21,[],https://github.com/CGNS/CGNS/pull/292,https://github.com/MicK7,5,https://github.com/CGNS/CGNS/pull/292#issuecomment-891085305,"CMake fixes for CGNS-256, CGNS-257, CGNS-258","I would think cgns_info should be built by default.

I don't know why they are omitted from cmake. Maybe it was the lack of a maintainer...",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,293,2021-08-05T18:37:34Z,2021-08-09T14:13:20Z,2021-08-09T14:13:26Z,MERGED,True,150,231,5,https://github.com/brtnfld,Added Timing stats to make tests,22,[],https://github.com/CGNS/CGNS/pull/293,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/293,"Added timing stats for make tests
Cleaned up Makefile output, and replaced repetitive code with functions.","Added timing stats for make tests
Cleaned up Makefile output, and replaced repetitive code with functions.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,296,2021-08-14T17:27:29Z,2021-08-16T15:44:53Z,2021-08-16T15:44:58Z,MERGED,True,85,31,5,https://github.com/brtnfld,Timing stats output ,27,[],https://github.com/CGNS/CGNS/pull/296,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/296,Make test timing output for each passed test.,Make test timing output for each passed test.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,296,2021-08-14T17:27:29Z,2021-08-16T15:44:53Z,2021-08-16T15:44:58Z,MERGED,True,85,31,5,https://github.com/brtnfld,Timing stats output ,27,[],https://github.com/CGNS/CGNS/pull/296,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/296#issuecomment-899221983,Make test timing output for each passed test.,"CI tests report the following message:
tail: cannot open 'CGNS_timing.txt' for reading: No such file or directory",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,296,2021-08-14T17:27:29Z,2021-08-16T15:44:53Z,2021-08-16T15:44:58Z,MERGED,True,85,31,5,https://github.com/brtnfld,Timing stats output ,27,[],https://github.com/CGNS/CGNS/pull/296,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/296#issuecomment-899565645,Make test timing output for each passed test.,fixed,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,303,2021-11-02T19:12:44Z,2021-11-09T18:49:48Z,2021-11-09T19:42:35Z,MERGED,True,15,15,3,https://github.com/mathstuf,cgnstypes: avoid defining `stat`,1,[],https://github.com/CGNS/CGNS/pull/303,https://github.com/mathstuf,1,https://github.com/CGNS/CGNS/pull/303,"This conflicts with struct stat that comes in sys/stat.h header with
MSVC. Older compilers may have other things, but it is just not valid to
do it without more sophisticated checks.","This conflicts with struct stat that comes in sys/stat.h header with
MSVC. Older compilers may have other things, but it is just not valid to
do it without more sophisticated checks.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,303,2021-11-02T19:12:44Z,2021-11-09T18:49:48Z,2021-11-09T19:42:35Z,MERGED,True,15,15,3,https://github.com/mathstuf,cgnstypes: avoid defining `stat`,1,[],https://github.com/CGNS/CGNS/pull/303,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/303#issuecomment-961804448,"This conflicts with struct stat that comes in sys/stat.h header with
MSVC. Older compilers may have other things, but it is just not valid to
do it without more sophisticated checks.","LGTM but it is not equivalent.
In fact _stat32i64 use 64 bit int while stat use long which is not equivalent depending on compilation target",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,303,2021-11-02T19:12:44Z,2021-11-09T18:49:48Z,2021-11-09T19:42:35Z,MERGED,True,15,15,3,https://github.com/mathstuf,cgnstypes: avoid defining `stat`,1,[],https://github.com/CGNS/CGNS/pull/303,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/303#issuecomment-961814129,"This conflicts with struct stat that comes in sys/stat.h header with
MSVC. Older compilers may have other things, but it is just not valid to
do it without more sophisticated checks.",@mennodeij any comment on this PR ?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,303,2021-11-02T19:12:44Z,2021-11-09T18:49:48Z,2021-11-09T19:42:35Z,MERGED,True,15,15,3,https://github.com/mathstuf,cgnstypes: avoid defining `stat`,1,[],https://github.com/CGNS/CGNS/pull/303,https://github.com/mathstuf,4,https://github.com/CGNS/CGNS/pull/303#issuecomment-962160139,"This conflicts with struct stat that comes in sys/stat.h header with
MSVC. Older compilers may have other things, but it is just not valid to
do it without more sophisticated checks.","The solution then is to do something like struct cngs_stat and define that instead of the common name (which just bleeds over into non-cgns code).
Does Windows really not have a solution analogous to _FILE_OFFSET_BITS=64?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,303,2021-11-02T19:12:44Z,2021-11-09T18:49:48Z,2021-11-09T19:42:35Z,MERGED,True,15,15,3,https://github.com/mathstuf,cgnstypes: avoid defining `stat`,1,[],https://github.com/CGNS/CGNS/pull/303,https://github.com/MicK7,5,https://github.com/CGNS/CGNS/pull/303#issuecomment-962238668,"This conflicts with struct stat that comes in sys/stat.h header with
MSVC. Older compilers may have other things, but it is just not valid to
do it without more sophisticated checks.",I tried the proposed solution in #304,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,303,2021-11-02T19:12:44Z,2021-11-09T18:49:48Z,2021-11-09T19:42:35Z,MERGED,True,15,15,3,https://github.com/mathstuf,cgnstypes: avoid defining `stat`,1,[],https://github.com/CGNS/CGNS/pull/303,https://github.com/mennodeij,6,https://github.com/CGNS/CGNS/pull/303#issuecomment-962447355,"This conflicts with struct stat that comes in sys/stat.h header with
MSVC. Older compilers may have other things, but it is just not valid to
do it without more sophisticated checks.","I introduced this #define to be able to open files over 2GB on windows.
I agree that this can be handled better, as long as a test is added and passed that checks this, both in 32 bit builds, 64-bit builds, and with 32-bit and 64-bit cgsize_t.
It would be undesirable if tools like ParaView and Tecplot all of a sudden can’t open large files anymore on windows.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,303,2021-11-02T19:12:44Z,2021-11-09T18:49:48Z,2021-11-09T19:42:35Z,MERGED,True,15,15,3,https://github.com/mathstuf,cgnstypes: avoid defining `stat`,1,[],https://github.com/CGNS/CGNS/pull/303,https://github.com/MicK7,7,https://github.com/CGNS/CGNS/pull/303#issuecomment-964032596,"This conflicts with struct stat that comes in sys/stat.h header with
MSVC. Older compilers may have other things, but it is just not valid to
do it without more sophisticated checks.","@mathstuf Can you bring in this PR the proposed changes that I made in the cgns_stat branch ?
It will be easier for the merge.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,304,2021-11-05T21:30:15Z,2021-11-09T11:16:40Z,2021-11-21T10:50:37Z,CLOSED,False,15,15,3,https://github.com/MicK7,cgnstypes: avoid defining stat,1,[],https://github.com/CGNS/CGNS/pull/304,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/304,As suggested by @mathstuf a cgns_stat is defined,As suggested by @mathstuf a cgns_stat is defined,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,304,2021-11-05T21:30:15Z,2021-11-09T11:16:40Z,2021-11-21T10:50:37Z,CLOSED,False,15,15,3,https://github.com/MicK7,cgnstypes: avoid defining stat,1,[],https://github.com/CGNS/CGNS/pull/304,https://github.com/mennodeij,2,https://github.com/CGNS/CGNS/pull/304#issuecomment-962447955,As suggested by @mathstuf a cgns_stat is defined,This puts the burden on the library builder to define CG_HAVE_STAT64_STRUCT. I miss it being defined in the CMake or configure scripts. I fear that this will re-introduce problems with large files on windows.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,304,2021-11-05T21:30:15Z,2021-11-09T11:16:40Z,2021-11-21T10:50:37Z,CLOSED,False,15,15,3,https://github.com/MicK7,cgnstypes: avoid defining stat,1,[],https://github.com/CGNS/CGNS/pull/304,https://github.com/mathstuf,3,https://github.com/CGNS/CGNS/pull/304#issuecomment-962449700,As suggested by @mathstuf a cgns_stat is defined,"src/CMakeLists.txt does the detection (as does configure). So that seems fine to me?
The thing is that the status quo is causing problems on Windows (namely build failures) because #define stat … ends up conflicting with Windows headers now doing struct stat themselves. This ends up with the system header ""redefining"" _stat32i64 because of the ham-handed #define stat line. It is always better to make new names than to try and masquerade under names that may appear if the headers are ever updated to be conforming to any API spec.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,304,2021-11-05T21:30:15Z,2021-11-09T11:16:40Z,2021-11-21T10:50:37Z,CLOSED,False,15,15,3,https://github.com/MicK7,cgnstypes: avoid defining stat,1,[],https://github.com/CGNS/CGNS/pull/304,https://github.com/mennodeij,4,https://github.com/CGNS/CGNS/pull/304#issuecomment-962452436,As suggested by @mathstuf a cgns_stat is defined,"Ok, my bad, I was only looking at the changed files in this PR commit assuming CG_HAVE_STAT64_STRUCT was a newly introduced variable, but it already existed.
And I agree with your assessment of ham-handedness, the current approach is better.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,307,2021-11-20T16:10:25Z,2021-12-13T15:27:43Z,2021-12-13T15:27:43Z,MERGED,True,2,0,1,https://github.com/brtnfld,Fix for CGNS-263,23,['bug'],https://github.com/CGNS/CGNS/pull/307,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/307,"https://cgnsorg.atlassian.net/browse/CGNS-263
This line
add_library(cgns_f2c OBJECT cgns_f.F90)
was added to address, CGNS-10. @TonyGarratt can you verify this does not break windows builds?
For reference, this was the commit:
51a3fe8","https://cgnsorg.atlassian.net/browse/CGNS-263
This line
add_library(cgns_f2c OBJECT cgns_f.F90)
was added to address, CGNS-10. @TonyGarratt can you verify this does not break windows builds?
For reference, this was the commit:
51a3fe8",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,307,2021-11-20T16:10:25Z,2021-12-13T15:27:43Z,2021-12-13T15:27:43Z,MERGED,True,2,0,1,https://github.com/brtnfld,Fix for CGNS-263,23,['bug'],https://github.com/CGNS/CGNS/pull/307,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/307#issuecomment-974673699,"https://cgnsorg.atlassian.net/browse/CGNS-263
This line
add_library(cgns_f2c OBJECT cgns_f.F90)
was added to address, CGNS-10. @TonyGarratt can you verify this does not break windows builds?
For reference, this was the commit:
51a3fe8",Looks to break builds on macOS.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,307,2021-11-20T16:10:25Z,2021-12-13T15:27:43Z,2021-12-13T15:27:43Z,MERGED,True,2,0,1,https://github.com/brtnfld,Fix for CGNS-263,23,['bug'],https://github.com/CGNS/CGNS/pull/307,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/307#issuecomment-974792928,"https://cgnsorg.atlassian.net/browse/CGNS-263
This line
add_library(cgns_f2c OBJECT cgns_f.F90)
was added to address, CGNS-10. @TonyGarratt can you verify this does not break windows builds?
For reference, this was the commit:
51a3fe8",@brtnfld I changed the fix with a CMAKE Property. Thus the compiler fPIC option will be used when generating the object and it will not break macOS builds.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,307,2021-11-20T16:10:25Z,2021-12-13T15:27:43Z,2021-12-13T15:27:43Z,MERGED,True,2,0,1,https://github.com/brtnfld,Fix for CGNS-263,23,['bug'],https://github.com/CGNS/CGNS/pull/307,https://github.com/brtnfld,4,https://github.com/CGNS/CGNS/pull/307#issuecomment-974845930,"https://cgnsorg.atlassian.net/browse/CGNS-263
This line
add_library(cgns_f2c OBJECT cgns_f.F90)
was added to address, CGNS-10. @TonyGarratt can you verify this does not break windows builds?
For reference, this was the commit:
51a3fe8","@MicK7 looks good, thanks.
I think all we need is to verify there is not an issue on Windows. We are not currently testing CGNS with Fortran on Windows.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,307,2021-11-20T16:10:25Z,2021-12-13T15:27:43Z,2021-12-13T15:27:43Z,MERGED,True,2,0,1,https://github.com/brtnfld,Fix for CGNS-263,23,['bug'],https://github.com/CGNS/CGNS/pull/307,https://github.com/MicK7,5,https://github.com/CGNS/CGNS/pull/307#issuecomment-981378712,"https://cgnsorg.atlassian.net/browse/CGNS-263
This line
add_library(cgns_f2c OBJECT cgns_f.F90)
was added to address, CGNS-10. @TonyGarratt can you verify this does not break windows builds?
For reference, this was the commit:
51a3fe8",@TonyGarratt Do you plan to check this change ?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,307,2021-11-20T16:10:25Z,2021-12-13T15:27:43Z,2021-12-13T15:27:43Z,MERGED,True,2,0,1,https://github.com/brtnfld,Fix for CGNS-263,23,['bug'],https://github.com/CGNS/CGNS/pull/307,https://github.com/brtnfld,6,https://github.com/CGNS/CGNS/pull/307#issuecomment-985616662,"https://cgnsorg.atlassian.net/browse/CGNS-263
This line
add_library(cgns_f2c OBJECT cgns_f.F90)
was added to address, CGNS-10. @TonyGarratt can you verify this does not break windows builds?
For reference, this was the commit:
51a3fe8",I'll see if I can get my windows box working to test this.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,307,2021-11-20T16:10:25Z,2021-12-13T15:27:43Z,2021-12-13T15:27:43Z,MERGED,True,2,0,1,https://github.com/brtnfld,Fix for CGNS-263,23,['bug'],https://github.com/CGNS/CGNS/pull/307,https://github.com/MicK7,7,https://github.com/CGNS/CGNS/pull/307#issuecomment-985691782,"https://cgnsorg.atlassian.net/browse/CGNS-263
This line
add_library(cgns_f2c OBJECT cgns_f.F90)
was added to address, CGNS-10. @TonyGarratt can you verify this does not break windows builds?
For reference, this was the commit:
51a3fe8","Maybe we could rely on intel OneAPI new compiler for testing. https://github.com/oneapi-src/oneapi-ci
It looks possible to add it to github CI : https://github.com/oneapi-src/oneapi-ci/blob/master/.github/workflows/build_all.yml",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,307,2021-11-20T16:10:25Z,2021-12-13T15:27:43Z,2021-12-13T15:27:43Z,MERGED,True,2,0,1,https://github.com/brtnfld,Fix for CGNS-263,23,['bug'],https://github.com/CGNS/CGNS/pull/307,https://github.com/brtnfld,8,https://github.com/CGNS/CGNS/pull/307#issuecomment-985694453,"https://cgnsorg.atlassian.net/browse/CGNS-263
This line
add_library(cgns_f2c OBJECT cgns_f.F90)
was added to address, CGNS-10. @TonyGarratt can you verify this does not break windows builds?
For reference, this was the commit:
51a3fe8",Looks like it since they have Fortran. Created issue: https://cgnsorg.atlassian.net/browse/CGNS-268,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,307,2021-11-20T16:10:25Z,2021-12-13T15:27:43Z,2021-12-13T15:27:43Z,MERGED,True,2,0,1,https://github.com/brtnfld,Fix for CGNS-263,23,['bug'],https://github.com/CGNS/CGNS/pull/307,https://github.com/MicK7,9,https://github.com/CGNS/CGNS/pull/307#issuecomment-991928585,"https://cgnsorg.atlassian.net/browse/CGNS-263
This line
add_library(cgns_f2c OBJECT cgns_f.F90)
was added to address, CGNS-10. @TonyGarratt can you verify this does not break windows builds?
For reference, this was the commit:
51a3fe8",I don't think anyone is testing CGNS with fortran on windows recently.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,307,2021-11-20T16:10:25Z,2021-12-13T15:27:43Z,2021-12-13T15:27:43Z,MERGED,True,2,0,1,https://github.com/brtnfld,Fix for CGNS-263,23,['bug'],https://github.com/CGNS/CGNS/pull/307,https://github.com/MicK7,10,https://github.com/CGNS/CGNS/pull/307#issuecomment-992427261,"https://cgnsorg.atlassian.net/browse/CGNS-263
This line
add_library(cgns_f2c OBJECT cgns_f.F90)
was added to address, CGNS-10. @TonyGarratt can you verify this does not break windows builds?
For reference, this was the commit:
51a3fe8","Since the reported issue is on Linux and not windows, I think we should merge this change and create a separated issue for windows (if there is a similar problem).",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,309,2021-11-26T17:16:05Z,2021-11-29T13:02:31Z,2021-11-30T10:11:23Z,CLOSED,False,9,1,1,https://github.com/olesenm,PATCH: special handling for STARCCM+ headers,1,[],https://github.com/CGNS/CGNS/pull/309,https://github.com/olesenm,1,https://github.com/CGNS/CGNS/pull/309,"In starccm+ files, which are actually ADF format,
the magic characters have ADF Database>^A^B^C^D^E^F^G^H instead of ADF Database Version.
AFAIK this was changed to detect binary/ascii transmission problems, but it could have been some other reason.
In any case, adding an extra check for these lets us use cgnslist without any problem. The risk of a false positive on other files is absolutely minimal at best.
I have been dragging around this patch for a very long time, so probably time to finally push it upstream.","In starccm+ files, which are actually ADF format,
the magic characters have ADF Database>^A^B^C^D^E^F^G^H instead of ADF Database Version.
AFAIK this was changed to detect binary/ascii transmission problems, but it could have been some other reason.
In any case, adding an extra check for these lets us use cgnslist without any problem. The risk of a false positive on other files is absolutely minimal at best.
I have been dragging around this patch for a very long time, so probably time to finally push it upstream.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,309,2021-11-26T17:16:05Z,2021-11-29T13:02:31Z,2021-11-30T10:11:23Z,CLOSED,False,9,1,1,https://github.com/olesenm,PATCH: special handling for STARCCM+ headers,1,[],https://github.com/CGNS/CGNS/pull/309,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/309#issuecomment-980451510,"In starccm+ files, which are actually ADF format,
the magic characters have ADF Database>^A^B^C^D^E^F^G^H instead of ADF Database Version.
AFAIK this was changed to detect binary/ascii transmission problems, but it could have been some other reason.
In any case, adding an extra check for these lets us use cgnslist without any problem. The risk of a false positive on other files is absolutely minimal at best.
I have been dragging around this patch for a very long time, so probably time to finally push it upstream.","Hello, thanks for your patch proposal.
The line suggested to be changed has not been modified for 13 years since ADF is the legacy format and CGNS has moved toward HDF5. Thus I am not totally in favor of fixing this old stuff.
Moreover there is no test in the CGNS library to check if the proposed change works as it depends on external software. The current magic number is coherent within CGNS own implementation of ADF.
If starccm is really using adf they may have drop the Version and Version number from the file header.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,309,2021-11-26T17:16:05Z,2021-11-29T13:02:31Z,2021-11-30T10:11:23Z,CLOSED,False,9,1,1,https://github.com/olesenm,PATCH: special handling for STARCCM+ headers,1,[],https://github.com/CGNS/CGNS/pull/309,https://github.com/olesenm,3,https://github.com/CGNS/CGNS/pull/309#issuecomment-982485208,"In starccm+ files, which are actually ADF format,
the magic characters have ADF Database>^A^B^C^D^E^F^G^H instead of ADF Database Version.
AFAIK this was changed to detect binary/ascii transmission problems, but it could have been some other reason.
In any case, adding an extra check for these lets us use cgnslist without any problem. The risk of a false positive on other files is absolutely minimal at best.
I have been dragging around this patch for a very long time, so probably time to finally push it upstream.",OK @MicK7 - I can see where you are coming from.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,310,2021-11-29T09:15:39Z,2021-11-30T06:59:18Z,2021-11-30T07:01:39Z,MERGED,True,3,0,1,https://github.com/pvc1989,Copy `m_dimvals` to `dimvals`.,1,['bug'],https://github.com/CGNS/CGNS/pull/310,https://github.com/pvc1989,1,https://github.com/CGNS/CGNS/pull/310,"As the comment states, m_dimvals[:] should be 0. However, the argument passed to H5Screate_simple() is dimvals, which is an uninitialised local array.","As the comment states, m_dimvals[:] should be 0. However, the argument passed to H5Screate_simple() is dimvals, which is an uninitialised local array.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,310,2021-11-29T09:15:39Z,2021-11-30T06:59:18Z,2021-11-30T07:01:39Z,MERGED,True,3,0,1,https://github.com/pvc1989,Copy `m_dimvals` to `dimvals`.,1,['bug'],https://github.com/CGNS/CGNS/pull/310,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/310#issuecomment-981476655,"As the comment states, m_dimvals[:] should be 0. However, the argument passed to H5Screate_simple() is dimvals, which is an uninitialised local array.",@smguzik @brtnfld Do you agree with the proposed modification ?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,311,2021-12-01T20:06:26Z,2021-12-13T15:23:39Z,2021-12-13T15:23:39Z,MERGED,True,3,4,1,https://github.com/GrahamAshcroft,Set the default file_type in cg_open only when in write mode,5,['bug'],https://github.com/CGNS/CGNS/pull/311,https://github.com/GrahamAshcroft,1,https://github.com/CGNS/CGNS/pull/311,"Currently, the default file_type is set prior to calling cgio_open_file from cg_open if cgns_filetype has not been specified. This leads to the error message ""cgio_open_file:not a HDF5 file - required for parallel"" when an ADF based file is opened and the CGNS library has been compiled with support for HDF5 and parallel output.
By now only setting the default file_type when a new file is to be created within cgio_open_file, we can avoid the above problem without changing the default behavior of the code.
Moving the setting of the file_type into cgio_open_file breaks some of the tests that explicitly call this routine. So now, just limit the default initialization of file_type within cg_open to when a new file is to be created.
ref. CGNS-266","Currently, the default file_type is set prior to calling cgio_open_file from cg_open if cgns_filetype has not been specified. This leads to the error message ""cgio_open_file:not a HDF5 file - required for parallel"" when an ADF based file is opened and the CGNS library has been compiled with support for HDF5 and parallel output.
By now only setting the default file_type when a new file is to be created within cgio_open_file, we can avoid the above problem without changing the default behavior of the code.
Moving the setting of the file_type into cgio_open_file breaks some of the tests that explicitly call this routine. So now, just limit the default initialization of file_type within cg_open to when a new file is to be created.
ref. CGNS-266",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,311,2021-12-01T20:06:26Z,2021-12-13T15:23:39Z,2021-12-13T15:23:39Z,MERGED,True,3,4,1,https://github.com/GrahamAshcroft,Set the default file_type in cg_open only when in write mode,5,['bug'],https://github.com/CGNS/CGNS/pull/311,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/311#issuecomment-984717931,"Currently, the default file_type is set prior to calling cgio_open_file from cg_open if cgns_filetype has not been specified. This leads to the error message ""cgio_open_file:not a HDF5 file - required for parallel"" when an ADF based file is opened and the CGNS library has been compiled with support for HDF5 and parallel output.
By now only setting the default file_type when a new file is to be created within cgio_open_file, we can avoid the above problem without changing the default behavior of the code.
Moving the setting of the file_type into cgio_open_file breaks some of the tests that explicitly call this routine. So now, just limit the default initialization of file_type within cg_open to when a new file is to be created.
ref. CGNS-266","The tricky thing is that if a user try a parallel read on an ADF file, no error will be generated since cg_open does not know if we are doing serial or parallel access.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,311,2021-12-01T20:06:26Z,2021-12-13T15:23:39Z,2021-12-13T15:23:39Z,MERGED,True,3,4,1,https://github.com/GrahamAshcroft,Set the default file_type in cg_open only when in write mode,5,['bug'],https://github.com/CGNS/CGNS/pull/311,https://github.com/GrahamAshcroft,3,https://github.com/CGNS/CGNS/pull/311#issuecomment-984845381,"Currently, the default file_type is set prior to calling cgio_open_file from cg_open if cgns_filetype has not been specified. This leads to the error message ""cgio_open_file:not a HDF5 file - required for parallel"" when an ADF based file is opened and the CGNS library has been compiled with support for HDF5 and parallel output.
By now only setting the default file_type when a new file is to be created within cgio_open_file, we can avoid the above problem without changing the default behavior of the code.
Moving the setting of the file_type into cgio_open_file breaks some of the tests that explicitly call this routine. So now, just limit the default initialization of file_type within cg_open to when a new file is to be created.
ref. CGNS-266","The tricky thing is that if a user try a parallel read on an ADF file, no error will be generated since cg_open does not know if we are doing serial or parallel access.

For a parallel read I'm assuming that the file has to be opened with cgp_open? Is this correct? If this is the case then, since cgp_open explicitly sets the ""expected"" file type to be HDF5, the error message ""cgio_open_file:not a HDF5 file - required for parallel"" will occur. Does this make sense?",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,311,2021-12-01T20:06:26Z,2021-12-13T15:23:39Z,2021-12-13T15:23:39Z,MERGED,True,3,4,1,https://github.com/GrahamAshcroft,Set the default file_type in cg_open only when in write mode,5,['bug'],https://github.com/CGNS/CGNS/pull/311,https://github.com/MicK7,4,https://github.com/CGNS/CGNS/pull/311#issuecomment-984938421,"Currently, the default file_type is set prior to calling cgio_open_file from cg_open if cgns_filetype has not been specified. This leads to the error message ""cgio_open_file:not a HDF5 file - required for parallel"" when an ADF based file is opened and the CGNS library has been compiled with support for HDF5 and parallel output.
By now only setting the default file_type when a new file is to be created within cgio_open_file, we can avoid the above problem without changing the default behavior of the code.
Moving the setting of the file_type into cgio_open_file breaks some of the tests that explicitly call this routine. So now, just limit the default initialization of file_type within cg_open to when a new file is to be created.
ref. CGNS-266","You are right, you are supposed to use cgp_open which will call cg_open and set HDF5 as default.
Your patch seems right for reading since we want to continue supporting reading ADF files.
Concerning modification of ADF files, it should be similar to the write mode. When  using a parallel compiled version of CGNS, we do not want to modify or generate ADF file. I think this is more a philosophical point of view than a down to earth reason, At some point, we want user to stop relying on ADF and switch to HDF5.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,311,2021-12-01T20:06:26Z,2021-12-13T15:23:39Z,2021-12-13T15:23:39Z,MERGED,True,3,4,1,https://github.com/GrahamAshcroft,Set the default file_type in cg_open only when in write mode,5,['bug'],https://github.com/CGNS/CGNS/pull/311,https://github.com/MicK7,5,https://github.com/CGNS/CGNS/pull/311#issuecomment-992426040,"Currently, the default file_type is set prior to calling cgio_open_file from cg_open if cgns_filetype has not been specified. This leads to the error message ""cgio_open_file:not a HDF5 file - required for parallel"" when an ADF based file is opened and the CGNS library has been compiled with support for HDF5 and parallel output.
By now only setting the default file_type when a new file is to be created within cgio_open_file, we can avoid the above problem without changing the default behavior of the code.
Moving the setting of the file_type into cgio_open_file breaks some of the tests that explicitly call this routine. So now, just limit the default initialization of file_type within cg_open to when a new file is to be created.
ref. CGNS-266",LGTM,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,312,2021-12-02T19:49:00Z,2021-12-03T17:21:05Z,2021-12-30T07:42:47Z,MERGED,True,1,4,1,https://github.com/MicK7,Remove unneeded check,1,['Improvement'],https://github.com/CGNS/CGNS/pull/312,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/312,ACCESS check is already done in cgio_check_file called by cgio_open_file.,ACCESS check is already done in cgio_check_file called by cgio_open_file.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,313,2021-12-07T04:47:32Z,,2022-04-27T12:21:59Z,OPEN,False,546,48,32,https://github.com/brtnfld,CGNS-268,92,['WIP'],https://github.com/CGNS/CGNS/pull/313,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/313,Testing CI with Intel OneAPI on windows,Testing CI with Intel OneAPI on windows,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,313,2021-12-07T04:47:32Z,,2022-04-27T12:21:59Z,OPEN,False,546,48,32,https://github.com/brtnfld,CGNS-268,92,['WIP'],https://github.com/CGNS/CGNS/pull/313,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/313#issuecomment-989132972,Testing CI with Intel OneAPI on windows,"So close, but yet so far 😬",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,313,2021-12-07T04:47:32Z,,2022-04-27T12:21:59Z,OPEN,False,546,48,32,https://github.com/brtnfld,CGNS-268,92,['WIP'],https://github.com/CGNS/CGNS/pull/313,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/313#issuecomment-990166603,Testing CI with Intel OneAPI on windows,@brtnfld can you synchronize this topic with the develop branch ?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,313,2021-12-07T04:47:32Z,,2022-04-27T12:21:59Z,OPEN,False,546,48,32,https://github.com/brtnfld,CGNS-268,92,['WIP'],https://github.com/CGNS/CGNS/pull/313,https://github.com/brtnfld,4,https://github.com/CGNS/CGNS/pull/313#issuecomment-990176045,Testing CI with Intel OneAPI on windows,done.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,313,2021-12-07T04:47:32Z,,2022-04-27T12:21:59Z,OPEN,False,546,48,32,https://github.com/brtnfld,CGNS-268,92,['WIP'],https://github.com/CGNS/CGNS/pull/313,https://github.com/MicK7,5,https://github.com/CGNS/CGNS/pull/313#issuecomment-991928381,Testing CI with Intel OneAPI on windows,"Very close ... in shared mode the fortran mangling does not seems to be exported to the library while in static mode some dll may be missing when launching the test ...  still very far.
If we can remove fortran mangling and rely on iso-c binding it would be so much smoother.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,313,2021-12-07T04:47:32Z,,2022-04-27T12:21:59Z,OPEN,False,546,48,32,https://github.com/brtnfld,CGNS-268,92,['WIP'],https://github.com/CGNS/CGNS/pull/313,https://github.com/MicK7,6,https://github.com/CGNS/CGNS/pull/313#issuecomment-1003195967,Testing CI with Intel OneAPI on windows,@brtnfld can you synchronize this topic with the develop branch again ?,True,{'THUMBS_UP': ['https://github.com/brtnfld']}
CGNS/CGNS,https://github.com/CGNS/CGNS,313,2021-12-07T04:47:32Z,,2022-04-27T12:21:59Z,OPEN,False,546,48,32,https://github.com/brtnfld,CGNS-268,92,['WIP'],https://github.com/CGNS/CGNS/pull/313,https://github.com/brtnfld,7,https://github.com/CGNS/CGNS/pull/313#issuecomment-1003213826,Testing CI with Intel OneAPI on windows,"From what I can tell CGNS_ENABLE_PARALLEL does not do anything to enable parallel, only setting CGNS_ENABLE_HDF5 and HDF5_NEED_MPI enables parallel interfaces.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,313,2021-12-07T04:47:32Z,,2022-04-27T12:21:59Z,OPEN,False,546,48,32,https://github.com/brtnfld,CGNS-268,92,['WIP'],https://github.com/CGNS/CGNS/pull/313,https://github.com/brtnfld,8,https://github.com/CGNS/CGNS/pull/313#issuecomment-1023649403,Testing CI with Intel OneAPI on windows,"This could be handy
https://github.com/mxschmitt/action-tmate",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,314,2021-12-09T17:42:42Z,2021-12-09T19:15:00Z,2021-12-30T07:42:50Z,MERGED,True,1,1,1,https://github.com/MicK7,Use intel headers instead of msvc,1,[],https://github.com/CGNS/CGNS/pull/314,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/314,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,314,2021-12-09T17:42:42Z,2021-12-09T19:15:00Z,2021-12-30T07:42:50Z,MERGED,True,1,1,1,https://github.com/MicK7,Use intel headers instead of msvc,1,[],https://github.com/CGNS/CGNS/pull/314,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/314#issuecomment-990127769,,This should help with testing intel oneapi,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,317,2021-12-22T22:16:34Z,2021-12-30T22:06:33Z,2022-01-22T10:36:56Z,MERGED,True,1006,583,20,https://github.com/MicK7,Modernize CGNS cmake,12,['Improvement'],https://github.com/CGNS/CGNS/pull/317,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/317,"use target_link_libraries
remove close command with clause

https://raw.githubusercontent.com/boostcon/cppnow_presentations_2017/master/05-19-2017_friday/effective_cmake__daniel_pfeifer__cppnow_05-19-2017.pdf","use target_link_libraries
remove close command with clause

https://raw.githubusercontent.com/boostcon/cppnow_presentations_2017/master/05-19-2017_friday/effective_cmake__daniel_pfeifer__cppnow_05-19-2017.pdf",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,317,2021-12-22T22:16:34Z,2021-12-30T22:06:33Z,2022-01-22T10:36:56Z,MERGED,True,1006,583,20,https://github.com/MicK7,Modernize CGNS cmake,12,['Improvement'],https://github.com/CGNS/CGNS/pull/317,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/317#issuecomment-1002167916,"use target_link_libraries
remove close command with clause

https://raw.githubusercontent.com/boostcon/cppnow_presentations_2017/master/05-19-2017_friday/effective_cmake__daniel_pfeifer__cppnow_05-19-2017.pdf","CMake Error at src/CMakeLists.txt:575 (add_library):
Error evaluating generator expression:
$<TARGET_OBJECTS:cgns_f2c>

Objects of target ""cgns_f2c"" referenced but no such target exists.
CMake Error at src/CMakeLists.txt:575 (add_library):
No SOURCES given to target: cgns_static",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,317,2021-12-22T22:16:34Z,2021-12-30T22:06:33Z,2022-01-22T10:36:56Z,MERGED,True,1006,583,20,https://github.com/MicK7,Modernize CGNS cmake,12,['Improvement'],https://github.com/CGNS/CGNS/pull/317,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/317#issuecomment-1002211775,"use target_link_libraries
remove close command with clause

https://raw.githubusercontent.com/boostcon/cppnow_presentations_2017/master/05-19-2017_friday/effective_cmake__daniel_pfeifer__cppnow_05-19-2017.pdf","CMake Error at src/CMakeLists.txt:575 (add_library): Error evaluating generator expression:
$<TARGET_OBJECTS:cgns_f2c>

Objects of target ""cgns_f2c"" referenced but no such target exists.
CMake Error at src/CMakeLists.txt:575 (add_library): No SOURCES given to target: cgns_static

Yes I have seen this issue. Sorry, I messed up with the $.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,317,2021-12-22T22:16:34Z,2021-12-30T22:06:33Z,2022-01-22T10:36:56Z,MERGED,True,1006,583,20,https://github.com/MicK7,Modernize CGNS cmake,12,['Improvement'],https://github.com/CGNS/CGNS/pull/317,https://github.com/MicK7,4,https://github.com/CGNS/CGNS/pull/317#issuecomment-1002212409,"use target_link_libraries
remove close command with clause

https://raw.githubusercontent.com/boostcon/cppnow_presentations_2017/master/05-19-2017_friday/effective_cmake__daniel_pfeifer__cppnow_05-19-2017.pdf","I'm not an expert on CMake, but the changes look good. I'll test the branch in our local CI tests over the next few days.
Have you tested on windows?

I am developing on windows with MSVC (I will switch back to Intel OneAPI after. Hoping to nailed out more easily why fortran wrapping doesn't go well)",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,317,2021-12-22T22:16:34Z,2021-12-30T22:06:33Z,2022-01-22T10:36:56Z,MERGED,True,1006,583,20,https://github.com/MicK7,Modernize CGNS cmake,12,['Improvement'],https://github.com/CGNS/CGNS/pull/317,https://github.com/brtnfld,5,https://github.com/CGNS/CGNS/pull/317#issuecomment-1002669193,"use target_link_libraries
remove close command with clause

https://raw.githubusercontent.com/boostcon/cppnow_presentations_2017/master/05-19-2017_friday/effective_cmake__daniel_pfeifer__cppnow_05-19-2017.pdf","For the parallel tests, it looks like the path to the executables is not correct. For the serial test, the path is, for example, src/tests/test_complexf, but for the parallel tests, it's looking in the current directory:
/opt/pkgs/software/MPICH/3.3-GCC-7.2.0-2.29/bin/mpiexec ""2"" ""./pcgns_ctest""
The cmake command was
cmake -D CMAKE_C_COMPILER:PATH=mpicc -D 'CMAKE_C_FLAGS:STRING=-g -fPIC' -D 'CMAKE_Fortran_FLAGS:STRING=-g -fPIC' -D CMAKE_BUILD_TYPE:STRING=Debug -D CMAKE_Fortran_COMPILER:PATH=mpif90 -D CGNS_BUILD_SHARED:BOOL=ON -D CGNS_USE_SHARED:BOOL=ON -D CMAKE_STATIC_LINKER_FLAGS:STRING= -D CGNS_ENABLE_TESTS:BOOL=ON -D CGNS_BUILD_CGNSTOOLS:BOOL=OFF -D CMAKE_INSTALL_PREFIX:PATH=./ -D 'CMAKE_EXE_LINKER_FLAGS:STRING=-Wl,--no-as-needed -ldl' -D CGNS_ENABLE_PARALLEL:BOOL=ON -D HDF5_NEED_MPI:BOOL=ON -D CGNS_ENABLE_LFS:BOOL=OFF -D CGNS_ENABLE_HDF5:BOOL=ON -D CMAKE_PREFIX_PATH=/mnt/scr1/pre-release/hdf5/vdev/jelly-pp-33-g720 -D HDF5_NEED_ZLIB:BOOL=ON -D HDF5_NEED_SZIP:BOOL=ON -D SZIP_LIBRARY:PATH=/mnt/hdf/packages/szip-PIC/static/encoder/Linux2.6-x86_64-gcc/lib/libsz.a -D CGNS_ENABLE_FORTRAN:BOOL=ON -D CGNS_ENABLE_64BIT:BOOL=ON -D CGNS_ENABLE_SCOPING:BOOL=OFF /home/brtnfld/scratch/hdfdts/scripts/external/test.5/CGNS_SRC",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,317,2021-12-22T22:16:34Z,2021-12-30T22:06:33Z,2022-01-22T10:36:56Z,MERGED,True,1006,583,20,https://github.com/MicK7,Modernize CGNS cmake,12,['Improvement'],https://github.com/CGNS/CGNS/pull/317,https://github.com/apps/lgtm-com,6,https://github.com/CGNS/CGNS/pull/317#issuecomment-1002748704,"use target_link_libraries
remove close command with clause

https://raw.githubusercontent.com/boostcon/cppnow_presentations_2017/master/05-19-2017_friday/effective_cmake__daniel_pfeifer__cppnow_05-19-2017.pdf","This pull request introduces 1 alert when merging 948e2fa into b71f0ce - view on LGTM.com
new alerts:

1 for Multiplication result converted to larger type",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,317,2021-12-22T22:16:34Z,2021-12-30T22:06:33Z,2022-01-22T10:36:56Z,MERGED,True,1006,583,20,https://github.com/MicK7,Modernize CGNS cmake,12,['Improvement'],https://github.com/CGNS/CGNS/pull/317,https://github.com/MicK7,7,https://github.com/CGNS/CGNS/pull/317#issuecomment-1002754482,"use target_link_libraries
remove close command with clause

https://raw.githubusercontent.com/boostcon/cppnow_presentations_2017/master/05-19-2017_friday/effective_cmake__daniel_pfeifer__cppnow_05-19-2017.pdf","For the parallel tests, it looks like the path to the executables is not correct. For the serial test, the path is, for example, src/tests/test_complexf, but for the parallel tests, it's looking in the current directory:
/opt/pkgs/software/MPICH/3.3-GCC-7.2.0-2.29/bin/mpiexec ""2"" ""./pcgns_ctest""
The cmake command was
cmake -D CMAKE_C_COMPILER:PATH=mpicc -D 'CMAKE_C_FLAGS:STRING=-g -fPIC' -D 'CMAKE_Fortran_FLAGS:STRING=-g -fPIC' -D CMAKE_BUILD_TYPE:STRING=Debug -D CMAKE_Fortran_COMPILER:PATH=mpif90 -D CGNS_BUILD_SHARED:BOOL=ON -D CGNS_USE_SHARED:BOOL=ON -D CMAKE_STATIC_LINKER_FLAGS:STRING= -D CGNS_ENABLE_TESTS:BOOL=ON -D CGNS_BUILD_CGNSTOOLS:BOOL=OFF -D CMAKE_INSTALL_PREFIX:PATH=./ -D 'CMAKE_EXE_LINKER_FLAGS:STRING=-Wl,--no-as-needed -ldl' -D CGNS_ENABLE_PARALLEL:BOOL=ON -D HDF5_NEED_MPI:BOOL=ON -D CGNS_ENABLE_LFS:BOOL=OFF -D CGNS_ENABLE_HDF5:BOOL=ON -D CMAKE_PREFIX_PATH=/mnt/scr1/pre-release/hdf5/vdev/jelly-pp-33-g720 -D HDF5_NEED_ZLIB:BOOL=ON -D HDF5_NEED_SZIP:BOOL=ON -D SZIP_LIBRARY:PATH=/mnt/hdf/packages/szip-PIC/static/encoder/Linux2.6-x86_64-gcc/lib/libsz.a -D CGNS_ENABLE_FORTRAN:BOOL=ON -D CGNS_ENABLE_64BIT:BOOL=ON -D CGNS_ENABLE_SCOPING:BOOL=OFF /home/brtnfld/scratch/hdfdts/scripts/external/test.5/CGNS_SRC

I have made a small modification for the parallel tests.
I am almost happy with the current status of the branch. Just need to remove some commented code to look better...
and test everything.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,317,2021-12-22T22:16:34Z,2021-12-30T22:06:33Z,2022-01-22T10:36:56Z,MERGED,True,1006,583,20,https://github.com/MicK7,Modernize CGNS cmake,12,['Improvement'],https://github.com/CGNS/CGNS/pull/317,https://github.com/apps/lgtm-com,8,https://github.com/CGNS/CGNS/pull/317#issuecomment-1002773926,"use target_link_libraries
remove close command with clause

https://raw.githubusercontent.com/boostcon/cppnow_presentations_2017/master/05-19-2017_friday/effective_cmake__daniel_pfeifer__cppnow_05-19-2017.pdf","This pull request introduces 1 alert when merging fd56b50 into b71f0ce - view on LGTM.com
new alerts:

1 for Multiplication result converted to larger type",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,317,2021-12-22T22:16:34Z,2021-12-30T22:06:33Z,2022-01-22T10:36:56Z,MERGED,True,1006,583,20,https://github.com/MicK7,Modernize CGNS cmake,12,['Improvement'],https://github.com/CGNS/CGNS/pull/317,https://github.com/brtnfld,9,https://github.com/CGNS/CGNS/pull/317#issuecomment-1002781073,"use target_link_libraries
remove close command with clause

https://raw.githubusercontent.com/boostcon/cppnow_presentations_2017/master/05-19-2017_friday/effective_cmake__daniel_pfeifer__cppnow_05-19-2017.pdf","I added autotools builds for Test_UserGuideCode/C_code_parallel. Most of the tests fail, so I'm looking into fixing them unless you've already fixed them.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,317,2021-12-22T22:16:34Z,2021-12-30T22:06:33Z,2022-01-22T10:36:56Z,MERGED,True,1006,583,20,https://github.com/MicK7,Modernize CGNS cmake,12,['Improvement'],https://github.com/CGNS/CGNS/pull/317,https://github.com/brtnfld,10,https://github.com/CGNS/CGNS/pull/317#issuecomment-1002788124,"use target_link_libraries
remove close command with clause

https://raw.githubusercontent.com/boostcon/cppnow_presentations_2017/master/05-19-2017_friday/effective_cmake__daniel_pfeifer__cppnow_05-19-2017.pdf",It is not running tests in  Test_UserGuideCode/C_code_parallel. You will need the code fixes in #318.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,317,2021-12-22T22:16:34Z,2021-12-30T22:06:33Z,2022-01-22T10:36:56Z,MERGED,True,1006,583,20,https://github.com/MicK7,Modernize CGNS cmake,12,['Improvement'],https://github.com/CGNS/CGNS/pull/317,https://github.com/MicK7,11,https://github.com/CGNS/CGNS/pull/317#issuecomment-1002794357,"use target_link_libraries
remove close command with clause

https://raw.githubusercontent.com/boostcon/cppnow_presentations_2017/master/05-19-2017_friday/effective_cmake__daniel_pfeifer__cppnow_05-19-2017.pdf","It is not running tests in Test_UserGuideCode/C_code_parallel. You will need the code fixes in #318.

I will add them later after #318 is merged.
The basic goal was to have a more clean and modern CMake base to check why intel oneAPI on windows is buggy.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,317,2021-12-22T22:16:34Z,2021-12-30T22:06:33Z,2022-01-22T10:36:56Z,MERGED,True,1006,583,20,https://github.com/MicK7,Modernize CGNS cmake,12,['Improvement'],https://github.com/CGNS/CGNS/pull/317,https://github.com/apps/lgtm-com,12,https://github.com/CGNS/CGNS/pull/317#issuecomment-1002906186,"use target_link_libraries
remove close command with clause

https://raw.githubusercontent.com/boostcon/cppnow_presentations_2017/master/05-19-2017_friday/effective_cmake__daniel_pfeifer__cppnow_05-19-2017.pdf","This pull request introduces 1 alert when merging a8b7a8c into a3c960f - view on LGTM.com
new alerts:

1 for Multiplication result converted to larger type",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,317,2021-12-22T22:16:34Z,2021-12-30T22:06:33Z,2022-01-22T10:36:56Z,MERGED,True,1006,583,20,https://github.com/MicK7,Modernize CGNS cmake,12,['Improvement'],https://github.com/CGNS/CGNS/pull/317,https://github.com/brtnfld,13,https://github.com/CGNS/CGNS/pull/317#issuecomment-1003071633,"use target_link_libraries
remove close command with clause

https://raw.githubusercontent.com/boostcon/cppnow_presentations_2017/master/05-19-2017_friday/effective_cmake__daniel_pfeifer__cppnow_05-19-2017.pdf","Testing last night still fails the parallel tests due to a missing path to the executable. The path now does not have a ""./""",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,317,2021-12-22T22:16:34Z,2021-12-30T22:06:33Z,2022-01-22T10:36:56Z,MERGED,True,1006,583,20,https://github.com/MicK7,Modernize CGNS cmake,12,['Improvement'],https://github.com/CGNS/CGNS/pull/317,https://github.com/apps/lgtm-com,14,https://github.com/CGNS/CGNS/pull/317#issuecomment-1003083164,"use target_link_libraries
remove close command with clause

https://raw.githubusercontent.com/boostcon/cppnow_presentations_2017/master/05-19-2017_friday/effective_cmake__daniel_pfeifer__cppnow_05-19-2017.pdf","This pull request introduces 1 alert when merging 5161c50 into a3c960f - view on LGTM.com
new alerts:

1 for Multiplication result converted to larger type",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,317,2021-12-22T22:16:34Z,2021-12-30T22:06:33Z,2022-01-22T10:36:56Z,MERGED,True,1006,583,20,https://github.com/MicK7,Modernize CGNS cmake,12,['Improvement'],https://github.com/CGNS/CGNS/pull/317,https://github.com/brtnfld,15,https://github.com/CGNS/CGNS/pull/317#issuecomment-1003086733,"use target_link_libraries
remove close command with clause

https://raw.githubusercontent.com/boostcon/cppnow_presentations_2017/master/05-19-2017_friday/effective_cmake__daniel_pfeifer__cppnow_05-19-2017.pdf","Path is there, but it is missing the ""-np"" in the exec. command, it does have the number of ranks correct.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,317,2021-12-22T22:16:34Z,2021-12-30T22:06:33Z,2022-01-22T10:36:56Z,MERGED,True,1006,583,20,https://github.com/MicK7,Modernize CGNS cmake,12,['Improvement'],https://github.com/CGNS/CGNS/pull/317,https://github.com/MicK7,16,https://github.com/CGNS/CGNS/pull/317#issuecomment-1003094773,"use target_link_libraries
remove close command with clause

https://raw.githubusercontent.com/boostcon/cppnow_presentations_2017/master/05-19-2017_friday/effective_cmake__daniel_pfeifer__cppnow_05-19-2017.pdf","Path is there, but it is missing the ""-np"" in the exec. command, it does have the number of ranks correct.

There was a copy-paste bug (missing an underscore)",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,317,2021-12-22T22:16:34Z,2021-12-30T22:06:33Z,2022-01-22T10:36:56Z,MERGED,True,1006,583,20,https://github.com/MicK7,Modernize CGNS cmake,12,['Improvement'],https://github.com/CGNS/CGNS/pull/317,https://github.com/apps/lgtm-com,17,https://github.com/CGNS/CGNS/pull/317#issuecomment-1003096317,"use target_link_libraries
remove close command with clause

https://raw.githubusercontent.com/boostcon/cppnow_presentations_2017/master/05-19-2017_friday/effective_cmake__daniel_pfeifer__cppnow_05-19-2017.pdf","This pull request introduces 1 alert when merging 0294157 into a3c960f - view on LGTM.com
new alerts:

1 for Multiplication result converted to larger type",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,317,2021-12-22T22:16:34Z,2021-12-30T22:06:33Z,2022-01-22T10:36:56Z,MERGED,True,1006,583,20,https://github.com/MicK7,Modernize CGNS cmake,12,['Improvement'],https://github.com/CGNS/CGNS/pull/317,https://github.com/brtnfld,18,https://github.com/CGNS/CGNS/pull/317#issuecomment-1003107017,"use target_link_libraries
remove close command with clause

https://raw.githubusercontent.com/boostcon/cppnow_presentations_2017/master/05-19-2017_friday/effective_cmake__daniel_pfeifer__cppnow_05-19-2017.pdf","I still don't get the ""-np""",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,317,2021-12-22T22:16:34Z,2021-12-30T22:06:33Z,2022-01-22T10:36:56Z,MERGED,True,1006,583,20,https://github.com/MicK7,Modernize CGNS cmake,12,['Improvement'],https://github.com/CGNS/CGNS/pull/317,https://github.com/apps/lgtm-com,19,https://github.com/CGNS/CGNS/pull/317#issuecomment-1003107451,"use target_link_libraries
remove close command with clause

https://raw.githubusercontent.com/boostcon/cppnow_presentations_2017/master/05-19-2017_friday/effective_cmake__daniel_pfeifer__cppnow_05-19-2017.pdf","This pull request introduces 1 alert when merging cc4999c into a3c960f - view on LGTM.com
new alerts:

1 for Multiplication result converted to larger type",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,317,2021-12-22T22:16:34Z,2021-12-30T22:06:33Z,2022-01-22T10:36:56Z,MERGED,True,1006,583,20,https://github.com/MicK7,Modernize CGNS cmake,12,['Improvement'],https://github.com/CGNS/CGNS/pull/317,https://github.com/apps/lgtm-com,20,https://github.com/CGNS/CGNS/pull/317#issuecomment-1003111752,"use target_link_libraries
remove close command with clause

https://raw.githubusercontent.com/boostcon/cppnow_presentations_2017/master/05-19-2017_friday/effective_cmake__daniel_pfeifer__cppnow_05-19-2017.pdf","This pull request introduces 1 alert when merging 404f60e into a3c960f - view on LGTM.com
new alerts:

1 for Multiplication result converted to larger type",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,317,2021-12-22T22:16:34Z,2021-12-30T22:06:33Z,2022-01-22T10:36:56Z,MERGED,True,1006,583,20,https://github.com/MicK7,Modernize CGNS cmake,12,['Improvement'],https://github.com/CGNS/CGNS/pull/317,https://github.com/brtnfld,21,https://github.com/CGNS/CGNS/pull/317#issuecomment-1003115932,"use target_link_libraries
remove close command with clause

https://raw.githubusercontent.com/boostcon/cppnow_presentations_2017/master/05-19-2017_friday/effective_cmake__daniel_pfeifer__cppnow_05-19-2017.pdf",All tests passed.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,317,2021-12-22T22:16:34Z,2021-12-30T22:06:33Z,2022-01-22T10:36:56Z,MERGED,True,1006,583,20,https://github.com/MicK7,Modernize CGNS cmake,12,['Improvement'],https://github.com/CGNS/CGNS/pull/317,https://github.com/apps/lgtm-com,22,https://github.com/CGNS/CGNS/pull/317#issuecomment-1003116706,"use target_link_libraries
remove close command with clause

https://raw.githubusercontent.com/boostcon/cppnow_presentations_2017/master/05-19-2017_friday/effective_cmake__daniel_pfeifer__cppnow_05-19-2017.pdf","This pull request introduces 1 alert when merging 96f5f43 into a3c960f - view on LGTM.com
new alerts:

1 for Multiplication result converted to larger type",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,317,2021-12-22T22:16:34Z,2021-12-30T22:06:33Z,2022-01-22T10:36:56Z,MERGED,True,1006,583,20,https://github.com/MicK7,Modernize CGNS cmake,12,['Improvement'],https://github.com/CGNS/CGNS/pull/317,https://github.com/apps/lgtm-com,23,https://github.com/CGNS/CGNS/pull/317#issuecomment-1003130724,"use target_link_libraries
remove close command with clause

https://raw.githubusercontent.com/boostcon/cppnow_presentations_2017/master/05-19-2017_friday/effective_cmake__daniel_pfeifer__cppnow_05-19-2017.pdf","This pull request introduces 1 alert when merging d165198 into a3c960f - view on LGTM.com
new alerts:

1 for Multiplication result converted to larger type",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,318,2021-12-29T21:34:42Z,2021-12-29T23:10:51Z,2021-12-29T23:10:55Z,MERGED,True,143,8,10,https://github.com/brtnfld,"Added src/Test_UserGuideCode/C_code_parallel autotools, build and tests",28,['Improvement'],https://github.com/CGNS/CGNS/pull/318,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/318,"Added src/Test_UserGuideCode/C_code_parallel autotool's build and tests. Fixed issues with C examples.
CGNS-260","Added src/Test_UserGuideCode/C_code_parallel autotool's build and tests. Fixed issues with C examples.
CGNS-260",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,319,2021-12-29T23:38:17Z,2021-12-30T05:29:08Z,2021-12-30T05:29:08Z,MERGED,True,4,4,2,https://github.com/brtnfld,misc. lgtm Multiplication result converted to larger type fixes,26,[],https://github.com/CGNS/CGNS/pull/319,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/319,fixed possible overflow errors.,fixed possible overflow errors.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,319,2021-12-29T23:38:17Z,2021-12-30T05:29:08Z,2021-12-30T05:29:08Z,MERGED,True,4,4,2,https://github.com/brtnfld,misc. lgtm Multiplication result converted to larger type fixes,26,[],https://github.com/CGNS/CGNS/pull/319,https://github.com/apps/lgtm-com,2,https://github.com/CGNS/CGNS/pull/319#issuecomment-1002817495,fixed possible overflow errors.,"This pull request fixes 4 alerts when merging 6508a9e into 08c1176 - view on LGTM.com
fixed alerts:

4 for Multiplication result converted to larger type",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,321,2022-01-12T21:46:16Z,2022-01-13T15:13:32Z,2022-01-13T15:13:32Z,MERGED,True,42,0,2,https://github.com/brtnfld,checks if HDF5 supports parallel I/O if parallel is enabled in CGNS ,31,['Improvement'],https://github.com/CGNS/CGNS/pull/321,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/321,"Throws an error, the same behavior as CMake.","Throws an error, the same behavior as CMake.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,322,2022-01-20T17:33:34Z,2022-01-21T16:28:58Z,2022-01-22T10:37:06Z,MERGED,True,48,11,3,https://github.com/MicK7,#CGNS-261,3,[],https://github.com/CGNS/CGNS/pull/322,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/322,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,322,2022-01-20T17:33:34Z,2022-01-21T16:28:58Z,2022-01-22T10:37:06Z,MERGED,True,48,11,3,https://github.com/MicK7,#CGNS-261,3,[],https://github.com/CGNS/CGNS/pull/322,https://github.com/apps/lgtm-com,2,https://github.com/CGNS/CGNS/pull/322#issuecomment-1017756243,,"This pull request introduces 1 alert when merging f6202eb into 1161b2e - view on LGTM.com
new alerts:

1 for Lossy pointer cast",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,322,2022-01-20T17:33:34Z,2022-01-21T16:28:58Z,2022-01-22T10:37:06Z,MERGED,True,48,11,3,https://github.com/MicK7,#CGNS-261,3,[],https://github.com/CGNS/CGNS/pull/322,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/322#issuecomment-1018664299,,@brtnfld Thank you for checking,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,323,2022-01-23T02:26:51Z,2022-01-23T16:14:25Z,2022-01-23T16:14:25Z,MERGED,True,17,8,3,https://github.com/brtnfld,fixed fortran test failures on OSX,35,[],https://github.com/CGNS/CGNS/pull/323,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/323,and output error in Makefile if the file does not exists.,and output error in Makefile if the file does not exists.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,324,2022-01-24T02:00:50Z,2022-01-24T16:52:31Z,2022-01-24T16:52:31Z,MERGED,True,10,7,3,https://github.com/brtnfld,Fixed autotools test status for OSX,40,[],https://github.com/CGNS/CGNS/pull/324,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/324,"Fixed not reporting failed tests on OSX, mainly for parallel tests, but fixed serial to report the number of failed tests.","Fixed not reporting failed tests on OSX, mainly for parallel tests, but fixed serial to report the number of failed tests.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,325,2022-01-24T23:15:19Z,2022-01-25T14:43:55Z,2022-01-25T14:43:55Z,MERGED,True,27,13,10,https://github.com/brtnfld,Added spell checker to github actions,43,[],https://github.com/CGNS/CGNS/pull/325,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/325,Fixed spelling errors.,Fixed spelling errors.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,328,2022-02-04T17:22:28Z,2022-02-04T20:28:36Z,2022-02-04T20:28:43Z,MERGED,True,4,4,3,https://github.com/brtnfld,Misc. LGTM fixes,46,[],https://github.com/CGNS/CGNS/pull/328,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/328,Fixed issues reported by LGTM.,Fixed issues reported by LGTM.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,328,2022-02-04T17:22:28Z,2022-02-04T20:28:36Z,2022-02-04T20:28:43Z,MERGED,True,4,4,3,https://github.com/brtnfld,Misc. LGTM fixes,46,[],https://github.com/CGNS/CGNS/pull/328,https://github.com/apps/lgtm-com,2,https://github.com/CGNS/CGNS/pull/328#issuecomment-1030198554,Fixed issues reported by LGTM.,"This pull request fixes 3 alerts when merging de6d36e into 305ae79 - view on LGTM.com
fixed alerts:

2 for Comparison result is always the same
1 for Multiplication result converted to larger type",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,328,2022-02-04T17:22:28Z,2022-02-04T20:28:36Z,2022-02-04T20:28:43Z,MERGED,True,4,4,3,https://github.com/brtnfld,Misc. LGTM fixes,46,[],https://github.com/CGNS/CGNS/pull/328,https://github.com/apps/lgtm-com,3,https://github.com/CGNS/CGNS/pull/328#issuecomment-1030207950,Fixed issues reported by LGTM.,"This pull request fixes 4 alerts when merging 6efbae6 into 305ae79 - view on LGTM.com
fixed alerts:

3 for Comparison result is always the same
1 for Multiplication result converted to larger type",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,329,2022-02-04T20:48:36Z,2022-02-05T15:54:34Z,2022-02-05T15:54:34Z,MERGED,True,12,0,1,https://github.com/brtnfld,turn off toctou LGTM warnings,46,[],https://github.com/CGNS/CGNS/pull/329,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/329,Added LGTM config file for future tuning.,Added LGTM config file for future tuning.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,330,2022-02-07T16:50:02Z,2022-02-08T17:36:44Z,2022-02-08T17:36:50Z,MERGED,True,15,13,4,https://github.com/brtnfld,Codacy fixes,50,[],https://github.com/CGNS/CGNS/pull/330,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/330,Fixed misc. Codacy reported errors.,Fixed misc. Codacy reported errors.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,331,2022-02-12T16:11:15Z,2022-02-19T13:49:09Z,2022-03-18T23:16:27Z,MERGED,True,14,0,1,https://github.com/MicK7,Very basic detection of duplicate face indices in NFaces,1,[],https://github.com/CGNS/CGNS/pull/331,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/331,Basic test suggested by Beta CAE,Basic test suggested by Beta CAE,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,331,2022-02-12T16:11:15Z,2022-02-19T13:49:09Z,2022-03-18T23:16:27Z,MERGED,True,14,0,1,https://github.com/MicK7,Very basic detection of duplicate face indices in NFaces,1,[],https://github.com/CGNS/CGNS/pull/331,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/331#issuecomment-1037275307,Basic test suggested by Beta CAE,The current ngon example of cgns website should fail with the new test,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,332,2022-03-02T02:41:28Z,2022-03-02T17:46:44Z,2022-03-09T21:35:02Z,MERGED,True,27,27,8,https://github.com/seanm,Fixed clang -Wstrict-prototypes warnings,1,['Improvement'],https://github.com/CGNS/CGNS/pull/332,https://github.com/seanm,1,https://github.com/CGNS/CGNS/pull/332,Clang is considering making this warning an error by default: https://discourse.llvm.org/t/rfc-enabling-wstrict-prototypes-by-default-in-c/60521,Clang is considering making this warning an error by default: https://discourse.llvm.org/t/rfc-enabling-wstrict-prototypes-by-default-in-c/60521,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,332,2022-03-02T02:41:28Z,2022-03-02T17:46:44Z,2022-03-09T21:35:02Z,MERGED,True,27,27,8,https://github.com/seanm,Fixed clang -Wstrict-prototypes warnings,1,['Improvement'],https://github.com/CGNS/CGNS/pull/332,https://github.com/seanm,2,https://github.com/CGNS/CGNS/pull/332#issuecomment-1063394813,Clang is considering making this warning an error by default: https://discourse.llvm.org/t/rfc-enabling-wstrict-prototypes-by-default-in-c/60521,"@brtnfld BTW, you might want to consider enabling this warning on your CI, if you have a clang that supports it...",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,333,2022-03-08T21:57:58Z,,2022-03-09T19:07:45Z,OPEN,False,5251,480,11,https://github.com/brtnfld,CGNS-106,50,"['Improvement', 'WIP']",https://github.com/CGNS/CGNS/pull/333,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/333,Use macro for OpenGL-related package management.,Use macro for OpenGL-related package management.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,333,2022-03-08T21:57:58Z,,2022-03-09T19:07:45Z,OPEN,False,5251,480,11,https://github.com/brtnfld,CGNS-106,50,"['Improvement', 'WIP']",https://github.com/CGNS/CGNS/pull/333,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/333#issuecomment-1063008940,Use macro for OpenGL-related package management.,"I don't really unsterstand the need behind the proposed change. Indeed with cmake, the lines in tkogl/CMakeLists.txt target_link_libraries(tkogl PUBLIC ${TKOGL_LIBS} OpenGL::GL OpenGL::GLU) and target_include_directories(tkogl PUBLIC ${TCL_INCLUDE_PATH} ${TK_INCLUDE_PATH} ${OPENGL_INCLUDE_DIR}) should be enough
Unless we want to compile without failure even when OpenGL is not available. Is it the goal ?

The changes are to improve the Autotools builds, I don't find anything wrong with the CMake builds. I'm trying to minimize what I need to change in CMake due to the Autotool changes.",True,{'THUMBS_UP': ['https://github.com/MicK7']}
CGNS/CGNS,https://github.com/CGNS/CGNS,333,2022-03-08T21:57:58Z,,2022-03-09T19:07:45Z,OPEN,False,5251,480,11,https://github.com/brtnfld,CGNS-106,50,"['Improvement', 'WIP']",https://github.com/CGNS/CGNS/pull/333,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/333#issuecomment-1063052257,Use macro for OpenGL-related package management.,I guess at some point we should have a metal version for apple.,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,333,2022-03-08T21:57:58Z,,2022-03-09T19:07:45Z,OPEN,False,5251,480,11,https://github.com/brtnfld,CGNS-106,50,"['Improvement', 'WIP']",https://github.com/CGNS/CGNS/pull/333,https://github.com/MicK7,4,https://github.com/CGNS/CGNS/pull/333#issuecomment-1063262454,Use macro for OpenGL-related package management.,"I guess at some point we should have a metal version for apple.

I guess the major issue is that cgnsplot is still relying on old OpenGL fixed pipeline and it is required to move to a more modern dynamic pipeline with shaders in order to use OpenGL/ES,  metal or vulkan. This would be a nice and hard change.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,334,2022-03-09T16:55:12Z,2022-03-09T19:36:14Z,2022-03-09T19:36:14Z,MERGED,True,7,6,4,https://github.com/brtnfld,"remove the use of relative paths, link_directories(.), CGNS-163",50,[],https://github.com/CGNS/CGNS/pull/334,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/334,removed the last use of link_directories(.),removed the last use of link_directories(.),True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,334,2022-03-09T16:55:12Z,2022-03-09T19:36:14Z,2022-03-09T19:36:14Z,MERGED,True,7,6,4,https://github.com/brtnfld,"remove the use of relative paths, link_directories(.), CGNS-163",50,[],https://github.com/CGNS/CGNS/pull/334,https://github.com/brtnfld,2,https://github.com/CGNS/CGNS/pull/334#issuecomment-1063177452,removed the last use of link_directories(.),Is there a reason to keep the commented out  link_directories(.) in the other files?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,334,2022-03-09T16:55:12Z,2022-03-09T19:36:14Z,2022-03-09T19:36:14Z,MERGED,True,7,6,4,https://github.com/brtnfld,"remove the use of relative paths, link_directories(.), CGNS-163",50,[],https://github.com/CGNS/CGNS/pull/334,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/334#issuecomment-1063253733,removed the last use of link_directories(.),"in

I don't think so.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,335,2022-03-15T07:05:52Z,2022-03-15T21:33:23Z,2022-03-18T23:16:26Z,MERGED,True,46,7,1,https://github.com/MicK7,More efficient check for duplicate faces,3,[],https://github.com/CGNS/CGNS/pull/335,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/335,"The new algorithm uses a hash to speed up the check.
It allows to not spend too much time when the file is correct.","The new algorithm uses a hash to speed up the check.
It allows to not spend too much time when the file is correct.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,336,2022-03-16T15:24:02Z,2022-03-16T16:41:31Z,2022-03-16T16:41:32Z,MERGED,True,2,2,1,https://github.com/brtnfld,add master branch to github actions,55,[],https://github.com/CGNS/CGNS/pull/336,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/336,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,338,2022-03-18T14:28:09Z,2022-03-19T13:58:18Z,2022-03-19T19:36:51Z,MERGED,True,11,11,5,https://github.com/brtnfld,increment version for next release,59,[],https://github.com/CGNS/CGNS/pull/338,https://github.com/brtnfld,1,https://github.com/CGNS/CGNS/pull/338,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,338,2022-03-18T14:28:09Z,2022-03-19T13:58:18Z,2022-03-19T19:36:51Z,MERGED,True,11,11,5,https://github.com/brtnfld,increment version for next release,59,[],https://github.com/CGNS/CGNS/pull/338,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/338#issuecomment-1072878464,,I think we also need to update the VersionList at line 262 of cgnslib.c,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,338,2022-03-18T14:28:09Z,2022-03-19T13:58:18Z,2022-03-19T19:36:51Z,MERGED,True,11,11,5,https://github.com/brtnfld,increment version for next release,59,[],https://github.com/CGNS/CGNS/pull/338,https://github.com/brtnfld,3,https://github.com/CGNS/CGNS/pull/338#issuecomment-1072924225,,fixed,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,338,2022-03-18T14:28:09Z,2022-03-19T13:58:18Z,2022-03-19T19:36:51Z,MERGED,True,11,11,5,https://github.com/brtnfld,increment version for next release,59,[],https://github.com/CGNS/CGNS/pull/338,https://github.com/brtnfld,4,https://github.com/CGNS/CGNS/pull/338#issuecomment-1072925103,,"I missed that in the 4.3.0 release, I should add 4300 and I guess release it again.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,338,2022-03-18T14:28:09Z,2022-03-19T13:58:18Z,2022-03-19T19:36:51Z,MERGED,True,11,11,5,https://github.com/brtnfld,increment version for next release,59,[],https://github.com/CGNS/CGNS/pull/338,https://github.com/ArchangeGabriel,5,https://github.com/CGNS/CGNS/pull/338#issuecomment-1073016809,,"I missed that in the 4.3.0 release, I should add 4300 and I guess release it again.

Please avoid re-releasing, it breaks things in distros that had already packaged the new version (Arch Linux for instance AFAIC). Now we have two different tarballs for 4.3.0, our archiving system does not like that… Better release a 4.3.1 that just fix that and move on. ;)",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,338,2022-03-18T14:28:09Z,2022-03-19T13:58:18Z,2022-03-19T19:36:51Z,MERGED,True,11,11,5,https://github.com/brtnfld,increment version for next release,59,[],https://github.com/CGNS/CGNS/pull/338,https://github.com/ArchangeGabriel,6,https://github.com/CGNS/CGNS/pull/338#issuecomment-1073017311,,"Also I recommend creating a release checklist for things like this that should be done at each release, so that you don’t miss any. :)",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,338,2022-03-18T14:28:09Z,2022-03-19T13:58:18Z,2022-03-19T19:36:51Z,MERGED,True,11,11,5,https://github.com/brtnfld,increment version for next release,59,[],https://github.com/CGNS/CGNS/pull/338,https://github.com/brtnfld,7,https://github.com/CGNS/CGNS/pull/338#issuecomment-1073069762,,"You're right, my apologies.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,342,2022-04-27T11:39:50Z,2022-04-28T16:35:37Z,2022-04-30T08:56:31Z,MERGED,True,4,2,1,https://github.com/MicK7,update hdf5 tag,3,[],https://github.com/CGNS/CGNS/pull/342,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/342,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,342,2022-04-27T11:39:50Z,2022-04-28T16:35:37Z,2022-04-30T08:56:31Z,MERGED,True,4,2,1,https://github.com/MicK7,update hdf5 tag,3,[],https://github.com/CGNS/CGNS/pull/342,https://github.com/MicK7,2,https://github.com/CGNS/CGNS/pull/342#issuecomment-1112343251,,"Should the single-branch be hdf5-, with a dash?

I don't know. I think it could better to separate the tag/branch with hdf5- from the directory name hdf5_ .
But it like colors, it is just a matter of preferences.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,342,2022-04-27T11:39:50Z,2022-04-28T16:35:37Z,2022-04-30T08:56:31Z,MERGED,True,4,2,1,https://github.com/MicK7,update hdf5 tag,3,[],https://github.com/CGNS/CGNS/pull/342,https://github.com/MicK7,3,https://github.com/CGNS/CGNS/pull/342#issuecomment-1112344956,,"The point I am not really happy with is that even when ""hdf5: without"" is set we need to define ""hdf5_version""",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,342,2022-04-27T11:39:50Z,2022-04-28T16:35:37Z,2022-04-30T08:56:31Z,MERGED,True,4,2,1,https://github.com/MicK7,update hdf5 tag,3,[],https://github.com/CGNS/CGNS/pull/342,https://github.com/MicK7,4,https://github.com/CGNS/CGNS/pull/342#issuecomment-1112346186,,By the way why were the tags changed on hdf5 github repository ?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,342,2022-04-27T11:39:50Z,2022-04-28T16:35:37Z,2022-04-30T08:56:31Z,MERGED,True,4,2,1,https://github.com/MicK7,update hdf5 tag,3,[],https://github.com/CGNS/CGNS/pull/342,https://github.com/brtnfld,5,https://github.com/CGNS/CGNS/pull/342#issuecomment-1112372326,,"I thought you could set a global variable by setting it at a higher level? For example, in ""on"", i.e. outside of the matrix.
maybe it is too much trouble, and your original method is ok.
It looks like you would set
env:
hdf5_vers: ""x""
then you can use it by $hdf5_vers",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,342,2022-04-27T11:39:50Z,2022-04-28T16:35:37Z,2022-04-30T08:56:31Z,MERGED,True,4,2,1,https://github.com/MicK7,update hdf5 tag,3,[],https://github.com/CGNS/CGNS/pull/342,https://github.com/brtnfld,6,https://github.com/CGNS/CGNS/pull/342#issuecomment-1112373772,,Changed in what sense?,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,342,2022-04-27T11:39:50Z,2022-04-28T16:35:37Z,2022-04-30T08:56:31Z,MERGED,True,4,2,1,https://github.com/MicK7,update hdf5 tag,3,[],https://github.com/CGNS/CGNS/pull/342,https://github.com/MicK7,7,https://github.com/CGNS/CGNS/pull/342#issuecomment-1112392530,,"Changed in what sense?

Before tags were hdf5_1_10_7 and were recently changed to hdf5-1_10_7 .",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,342,2022-04-27T11:39:50Z,2022-04-28T16:35:37Z,2022-04-30T08:56:31Z,MERGED,True,4,2,1,https://github.com/MicK7,update hdf5 tag,3,[],https://github.com/CGNS/CGNS/pull/342,https://github.com/MicK7,8,https://github.com/CGNS/CGNS/pull/342#issuecomment-1112396172,,"I thought you could set a global variable by setting it at a higher level? For example, in ""on"", i.e. outside of the matrix.
maybe it is too much trouble, and your original method is ok.
It looks like you would set
env: hdf5_vers: ""x""
then you can use it by $hdf5_vers

ok done.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,342,2022-04-27T11:39:50Z,2022-04-28T16:35:37Z,2022-04-30T08:56:31Z,MERGED,True,4,2,1,https://github.com/MicK7,update hdf5 tag,3,[],https://github.com/CGNS/CGNS/pull/342,https://github.com/brtnfld,9,https://github.com/CGNS/CGNS/pull/342#issuecomment-1112414698,,"The branches were hdf5_, and the tags were hdf5-, we generally remove branches after they are tagged. So, it is better that we change to use hdf5- instead.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,342,2022-04-27T11:39:50Z,2022-04-28T16:35:37Z,2022-04-30T08:56:31Z,MERGED,True,4,2,1,https://github.com/MicK7,update hdf5 tag,3,[],https://github.com/CGNS/CGNS/pull/342,https://github.com/MicK7,10,https://github.com/CGNS/CGNS/pull/342#issuecomment-1112418563,,"The branches were hdf5_, and the tags were hdf5-, we generally remove branches after they are tagged. So, it is better that we change to use hdf5- instead.

ok thanks for the explanation. I understand better why the CI broke down.",True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,343,2022-04-27T11:57:21Z,2022-04-28T16:44:34Z,2022-04-30T08:56:34Z,MERGED,True,2,2,1,https://github.com/MicK7,CGNS-275 Protect from overflow,1,[],https://github.com/CGNS/CGNS/pull/343,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/343,,,True,{}
CGNS/CGNS,https://github.com/CGNS/CGNS,346,2022-05-17T04:47:18Z,2022-05-17T18:00:03Z,2022-05-17T18:00:03Z,MERGED,True,1,0,1,https://github.com/MicK7,CGNS-278  Add check include file,1,[],https://github.com/CGNS/CGNS/pull/346,https://github.com/MicK7,1,https://github.com/CGNS/CGNS/pull/346,,,True,{}
