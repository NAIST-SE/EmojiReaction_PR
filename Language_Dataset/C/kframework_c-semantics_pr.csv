kframework/c-semantics,https://github.com/kframework/c-semantics,252,2016-03-04T21:57:16Z,2016-03-17T19:19:36Z,2016-03-17T19:19:36Z,CLOSED,False,2328,2273,97,https://github.com/chathhorn,Refactoring of qualified types.,4,[],https://github.com/kframework/c-semantics/pull/252,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/252,"This is meant to make a cleaner distinction between unqualifed and qualified types, mostly by introducing a production (ut) for types without qualifiers.
@dwightguth please review.","This is meant to make a cleaner distinction between unqualifed and qualified types, mostly by introducing a production (ut) for types without qualifiers.
@dwightguth please review.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,252,2016-03-04T21:57:16Z,2016-03-17T19:19:36Z,2016-03-17T19:19:36Z,CLOSED,False,2328,2273,97,https://github.com/chathhorn,Refactoring of qualified types.,4,[],https://github.com/kframework/c-semantics/pull/252,https://github.com/chathhorn,2,https://github.com/kframework/c-semantics/pull/252#issuecomment-196429256,"This is meant to make a cleaner distinction between unqualifed and qualified types, mostly by introducing a production (ut) for types without qualifiers.
@dwightguth please review.",Jenkins: test this please.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,252,2016-03-04T21:57:16Z,2016-03-17T19:19:36Z,2016-03-17T19:19:36Z,CLOSED,False,2328,2273,97,https://github.com/chathhorn,Refactoring of qualified types.,4,[],https://github.com/kframework/c-semantics/pull/252,https://github.com/chathhorn,3,https://github.com/kframework/c-semantics/pull/252#issuecomment-196499382,"This is meant to make a cleaner distinction between unqualifed and qualified types, mostly by introducing a production (ut) for types without qualifiers.
@dwightguth please review.",Jenkins: test this please.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,252,2016-03-04T21:57:16Z,2016-03-17T19:19:36Z,2016-03-17T19:19:36Z,CLOSED,False,2328,2273,97,https://github.com/chathhorn,Refactoring of qualified types.,4,[],https://github.com/kframework/c-semantics/pull/252,https://github.com/pdaian,4,https://github.com/kframework/c-semantics/pull/252#issuecomment-196508322,"This is meant to make a cleaner distinction between unqualifed and qualified types, mostly by introducing a production (ut) for types without qualifiers.
@dwightguth please review.","@chathhorn looks like it hit a timeout, because I was using that machine for other things at the same time.  Perhaps retest (not sure if I have perms, but let's try it:
Jenkins: test this please. )?
I've increased the timeout from 20 mins to 30 to compensate for other projects potentially building on the machine (build takes 15 on an idle Jenkins, so timeout should definitely be above 30).",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,252,2016-03-04T21:57:16Z,2016-03-17T19:19:36Z,2016-03-17T19:19:36Z,CLOSED,False,2328,2273,97,https://github.com/chathhorn,Refactoring of qualified types.,4,[],https://github.com/kframework/c-semantics/pull/252,https://github.com/pdaian,5,https://github.com/kframework/c-semantics/pull/252#issuecomment-196520774,"This is meant to make a cleaner distinction between unqualifed and qualified types, mostly by introducing a production (ut) for types without qualifiers.
@dwightguth please review.","Hmm, still timing out.  Let's try again, sorry about that:
Jenkins: test this please",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,252,2016-03-04T21:57:16Z,2016-03-17T19:19:36Z,2016-03-17T19:19:36Z,CLOSED,False,2328,2273,97,https://github.com/chathhorn,Refactoring of qualified types.,4,[],https://github.com/kframework/c-semantics/pull/252,https://github.com/chathhorn,6,https://github.com/kframework/c-semantics/pull/252#issuecomment-196521689,"This is meant to make a cleaner distinction between unqualifed and qualified types, mostly by introducing a production (ut) for types without qualifiers.
@dwightguth please review.","It's probably something I did, I was having performance issues with this stuff (although it's a bit frustrating that my fixes seem to have made it worse).",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,252,2016-03-04T21:57:16Z,2016-03-17T19:19:36Z,2016-03-17T19:19:36Z,CLOSED,False,2328,2273,97,https://github.com/chathhorn,Refactoring of qualified types.,4,[],https://github.com/kframework/c-semantics/pull/252,https://github.com/chathhorn,7,https://github.com/kframework/c-semantics/pull/252#issuecomment-196531633,"This is meant to make a cleaner distinction between unqualifed and qualified types, mostly by introducing a production (ut) for types without qualifiers.
@dwightguth please review.",It looks like it's just spinning at the very end until it times out. Is there still some process running or something?,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,252,2016-03-04T21:57:16Z,2016-03-17T19:19:36Z,2016-03-17T19:19:36Z,CLOSED,False,2328,2273,97,https://github.com/chathhorn,Refactoring of qualified types.,4,[],https://github.com/kframework/c-semantics/pull/252,https://github.com/chathhorn,8,https://github.com/kframework/c-semantics/pull/252#issuecomment-198043256,"This is meant to make a cleaner distinction between unqualifed and qualified types, mostly by introducing a production (ut) for types without qualifiers.
@dwightguth please review.",Moving to rv-match repo.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,258,2016-12-17T14:33:05Z,2016-12-19T16:10:01Z,2016-12-19T20:34:32Z,MERGED,True,2,2,1,https://github.com/diekmann,Added build dependencies + ubuntu version,1,[],https://github.com/kframework/c-semantics/pull/258,https://github.com/diekmann,1,https://github.com/kframework/c-semantics/pull/258,"The llvm-3.6 dependency has already been mentioned in issue #256.
In addition, I'd like to document the Ubuntu version where the process works. I tried to get it to work on debian 8 but there are so many snares that it is easier to get an Ubuntu VM :-)","The llvm-3.6 dependency has already been mentioned in issue #256.
In addition, I'd like to document the Ubuntu version where the process works. I tried to get it to work on debian 8 but there are so many snares that it is easier to get an Ubuntu VM :-)",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,262,2017-01-19T08:16:43Z,2017-03-11T21:09:04Z,2017-03-11T21:09:04Z,CLOSED,False,149,19,12,https://github.com/h0nzZik,C++ enumerations.,7,[],https://github.com/kframework/c-semantics/pull/262,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/262,Not finished yet. @dwightguth can you please give me some feedback?,Not finished yet. @dwightguth can you please give me some feedback?,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,262,2017-01-19T08:16:43Z,2017-03-11T21:09:04Z,2017-03-11T21:09:04Z,CLOSED,False,149,19,12,https://github.com/h0nzZik,C++ enumerations.,7,[],https://github.com/kframework/c-semantics/pull/262,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/262#issuecomment-276181724,Not finished yet. @dwightguth can you please give me some feedback?,I think I have fixed those issues. I will implement operators later. Enumerators are in progress in separate branch.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,262,2017-01-19T08:16:43Z,2017-03-11T21:09:04Z,2017-03-11T21:09:04Z,CLOSED,False,149,19,12,https://github.com/h0nzZik,C++ enumerations.,7,[],https://github.com/kframework/c-semantics/pull/262,https://github.com/dwightguth,3,https://github.com/kframework/c-semantics/pull/262#issuecomment-277298753,Not finished yet. @dwightguth can you please give me some feedback?,"So, I'm not really comfortable with the stuff specific to unary & because it's technically an incorrect rule being added to the semantics. But I'm okay with this being merged if you were to remove those rules and implement them later.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,262,2017-01-19T08:16:43Z,2017-03-11T21:09:04Z,2017-03-11T21:09:04Z,CLOSED,False,149,19,12,https://github.com/h0nzZik,C++ enumerations.,7,[],https://github.com/kframework/c-semantics/pull/262,https://github.com/h0nzZik,4,https://github.com/kframework/c-semantics/pull/262#issuecomment-277464757,Not finished yet. @dwightguth can you please give me some feedback?,You are right about the operator. I intended to remove the rule but forgot to do so.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,262,2017-01-19T08:16:43Z,2017-03-11T21:09:04Z,2017-03-11T21:09:04Z,CLOSED,False,149,19,12,https://github.com/h0nzZik,C++ enumerations.,7,[],https://github.com/kframework/c-semantics/pull/262,https://github.com/dwightguth,5,https://github.com/kframework/c-semantics/pull/262#issuecomment-279848985,Not finished yet. @dwightguth can you please give me some feedback?,"so, I would prefer in the future if you wouldn't rebase pull requests after they've been approved and before they've been merged. I now have to re-review everything I already reviewed, which is going to be a pain, and if you keep doing that then I'm just going to have to ignore your work in the future as it will turn into a waste of developer resources.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,262,2017-01-19T08:16:43Z,2017-03-11T21:09:04Z,2017-03-11T21:09:04Z,CLOSED,False,149,19,12,https://github.com/h0nzZik,C++ enumerations.,7,[],https://github.com/kframework/c-semantics/pull/262,https://github.com/h0nzZik,6,https://github.com/kframework/c-semantics/pull/262#issuecomment-280842829,Not finished yet. @dwightguth can you please give me some feedback?,I understand - sorry for wasting your time.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,262,2017-01-19T08:16:43Z,2017-03-11T21:09:04Z,2017-03-11T21:09:04Z,CLOSED,False,149,19,12,https://github.com/h0nzZik,C++ enumerations.,7,[],https://github.com/kframework/c-semantics/pull/262,https://github.com/h0nzZik,7,https://github.com/kframework/c-semantics/pull/262#issuecomment-285900324,Not finished yet. @dwightguth can you please give me some feedback?,Replaced by #271.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,265,2017-02-26T21:09:34Z,2017-02-27T23:09:20Z,2017-03-03T21:49:56Z,CLOSED,False,5,1,1,https://github.com/h0nzZik,name not found ==> ill-formed,2,[],https://github.com/kframework/c-semantics/pull/265,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/265,"When name is not found during translation phase, notFound(X) term does not always make compilation fail, which is probably wrong. I am not sure exactly what message to pass to term ILL(_, _). Note that the following rule does not really help:
rule resolveUniqueDecl(notFound(_), _) => ILL("""", ""name not found"")","When name is not found during translation phase, notFound(X) term does not always make compilation fail, which is probably wrong. I am not sure exactly what message to pass to term ILL(_, _). Note that the following rule does not really help:
rule resolveUniqueDecl(notFound(_), _) => ILL("""", ""name not found"")",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,265,2017-02-26T21:09:34Z,2017-02-27T23:09:20Z,2017-03-03T21:49:56Z,CLOSED,False,5,1,1,https://github.com/h0nzZik,name not found ==> ill-formed,2,[],https://github.com/kframework/c-semantics/pull/265,https://github.com/dwightguth,2,https://github.com/kframework/c-semantics/pull/265#issuecomment-282602228,"When name is not found during translation phase, notFound(X) term does not always make compilation fail, which is probably wrong. I am not sure exactly what message to pass to term ILL(_, _). Note that the following rule does not really help:
rule resolveUniqueDecl(notFound(_), _) => ILL("""", ""name not found"")","the rule should be
rule (.K => ILL(""TOL1"", ""No declaration found for name '"" +String idToString(X) +String ""'."")) ~> resolveUniqueDecl(notFound(X::CId), _)",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,265,2017-02-26T21:09:34Z,2017-02-27T23:09:20Z,2017-03-03T21:49:56Z,CLOSED,False,5,1,1,https://github.com/h0nzZik,name not found ==> ill-formed,2,[],https://github.com/kframework/c-semantics/pull/265,https://github.com/dwightguth,3,https://github.com/kframework/c-semantics/pull/265#issuecomment-282602427,"When name is not found during translation phase, notFound(X) term does not always make compilation fail, which is probably wrong. I am not sure exactly what message to pass to term ILL(_, _). Note that the following rule does not really help:
rule resolveUniqueDecl(notFound(_), _) => ILL("""", ""name not found"")","You may also need to add a side condition to the rule immediately above, something to the extent of andBool notBool isNotFoundNameRef(V)",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,265,2017-02-26T21:09:34Z,2017-02-27T23:09:20Z,2017-03-03T21:49:56Z,CLOSED,False,5,1,1,https://github.com/h0nzZik,name not found ==> ill-formed,2,[],https://github.com/kframework/c-semantics/pull/265,https://github.com/dwightguth,4,https://github.com/kframework/c-semantics/pull/265#issuecomment-282887250,"When name is not found during translation phase, notFound(X) term does not always make compilation fail, which is probably wrong. I am not sure exactly what message to pass to term ILL(_, _). Note that the following rule does not really help:
rule resolveUniqueDecl(notFound(_), _) => ILL("""", ""name not found"")",I'm closing this since it was merged in the upstream private repository. You should see it get pushed down into the public repo sometime tonight.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,266,2017-02-28T12:22:37Z,2017-03-01T09:37:21Z,2017-03-03T21:48:39Z,CLOSED,False,9,0,2,https://github.com/h0nzZik,Value category for sizeof(),2,[],https://github.com/kframework/c-semantics/pull/266,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/266,"Value category for sizeof() expression was missing, so it was not possible to compile code like the one in the test.","Value category for sizeof() expression was missing, so it was not possible to compile code like the one in the test.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,266,2017-02-28T12:22:37Z,2017-03-01T09:37:21Z,2017-03-03T21:48:39Z,CLOSED,False,9,0,2,https://github.com/h0nzZik,Value category for sizeof(),2,[],https://github.com/kframework/c-semantics/pull/266,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/266#issuecomment-283291274,"Value category for sizeof() expression was missing, so it was not possible to compile code like the one in the test.",Merged in 6430f9a.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,268,2017-03-03T22:34:43Z,2017-03-14T02:17:45Z,2017-03-14T02:17:45Z,CLOSED,False,18,6,2,https://github.com/h0nzZik,Result type of relational operators should be bool. fix #267,1,[],https://github.com/kframework/c-semantics/pull/268,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/268,See #267,See #267,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,269,2017-03-05T12:21:57Z,2017-03-06T15:47:40Z,2017-03-06T15:47:40Z,CLOSED,False,1,1,1,https://github.com/jwilk,Remove duplicated word in README,1,[],https://github.com/kframework/c-semantics/pull/269,https://github.com/jwilk,1,https://github.com/kframework/c-semantics/pull/269,Found using mwic.,Found using mwic.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,270,2017-03-06T17:22:13Z,2017-03-14T02:17:45Z,2017-03-14T02:17:45Z,CLOSED,False,5,0,1,https://github.com/h0nzZik,Compile-time evaluation of boolean expr,1,[],https://github.com/kframework/c-semantics/pull/270,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/270,"Adds an ability to evaluate boolean expressions to static semantics. For example, the following piece of code failed to compile due to missing rule for negation.
if (!true)
    ;","Adds an ability to evaluate boolean expressions to static semantics. For example, the following piece of code failed to compile due to missing rule for negation.
if (!true)
    ;",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,270,2017-03-06T17:22:13Z,2017-03-14T02:17:45Z,2017-03-14T02:17:45Z,CLOSED,False,5,0,1,https://github.com/h0nzZik,Compile-time evaluation of boolean expr,1,[],https://github.com/kframework/c-semantics/pull/270,https://github.com/dwightguth,2,https://github.com/kframework/c-semantics/pull/270#issuecomment-284580083,"Adds an ability to evaluate boolean expressions to static semantics. For example, the following piece of code failed to compile due to missing rule for negation.
if (!true)
    ;",This seems like a strange solution to the problem you describe... We maintain separate semantics for && and || because they have different evaluation strategies at compile time versus runtime. I would prefer to keep it that way because looking at this diff I can't predict what it will actually do to the semantics. Can you please tell me exactly what configuration got stuck at translation time in the above program? I'm pretty sure there's a better solution out there.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,270,2017-03-06T17:22:13Z,2017-03-14T02:17:45Z,2017-03-14T02:17:45Z,CLOSED,False,5,0,1,https://github.com/h0nzZik,Compile-time evaluation of boolean expr,1,[],https://github.com/kframework/c-semantics/pull/270,https://github.com/h0nzZik,3,https://github.com/kframework/c-semantics/pull/270#issuecomment-284652346,"Adds an ability to evaluate boolean expressions to static semantics. For example, the following piece of code failed to compile due to missing rule for negation.
if (!true)
    ;","The top of k cell looks like this:
`!__CPP-SYNTAX`(prv(
	#token(""1"",""Int""),
	hasTrace(`BoolLiteral`(#token(""true"",""Bool""))),
	tcpp(quals(`.Set`(.KList)),`.Set`(.KList),`bool_CPP-TYPING-SYNTAX`(.KList))
))~>
`#freezer#ExprLoc0`(`CabsLoc`(...))~>
#freezerrevalCpp0(.KList)~>
#freezerIfStmt2(BlockStmt`(...),`BlockStmt`(...))~>

It is sufficient to add following rules to translation/expr/logical.k:
rule ! prv(0, _, T:CPPBoolType)
    => prv(1, noTrace, T)
rule ! prv(1, _, T:CPPBoolType)
    => prv(0, noTrace, T)

and it works for given example. If you agree, I will commit those rules together with a test, and remove the current commit.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,270,2017-03-06T17:22:13Z,2017-03-14T02:17:45Z,2017-03-14T02:17:45Z,CLOSED,False,5,0,1,https://github.com/h0nzZik,Compile-time evaluation of boolean expr,1,[],https://github.com/kframework/c-semantics/pull/270,https://github.com/dwightguth,4,https://github.com/kframework/c-semantics/pull/270#issuecomment-284775342,"Adds an ability to evaluate boolean expressions to static semantics. For example, the following piece of code failed to compile due to missing rule for negation.
if (!true)
    ;","I believe what you actually want is the following rules added to translation/expr/logical.k:
rule ! prv(0, Tr::Trace, T:CPPBoolType)
     => prv(1, combine(Tr, #klabel(`!__CPP-SYNTAX`)), T)
rule ! prv(1, Tr::Trace, T:CPPBoolType)
     => prv(0, combine(Tr, #klabel(`!__CPP-SYNTAX`)), T)

But yes, adding them to translation/expr/logical is the preferred solution.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,270,2017-03-06T17:22:13Z,2017-03-14T02:17:45Z,2017-03-14T02:17:45Z,CLOSED,False,5,0,1,https://github.com/h0nzZik,Compile-time evaluation of boolean expr,1,[],https://github.com/kframework/c-semantics/pull/270,https://github.com/h0nzZik,5,https://github.com/kframework/c-semantics/pull/270#issuecomment-284781519,"Adds an ability to evaluate boolean expressions to static semantics. For example, the following piece of code failed to compile due to missing rule for negation.
if (!true)
    ;","Yes. By the way, why do you sometimes use one : for typing and sometimes two (::)?",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,270,2017-03-06T17:22:13Z,2017-03-14T02:17:45Z,2017-03-14T02:17:45Z,CLOSED,False,5,0,1,https://github.com/h0nzZik,Compile-time evaluation of boolean expr,1,[],https://github.com/kframework/c-semantics/pull/270,https://github.com/dwightguth,6,https://github.com/kframework/c-semantics/pull/270#issuecomment-284785896,"Adds an ability to evaluate boolean expressions to static semantics. For example, the following piece of code failed to compile due to missing rule for negation.
if (!true)
    ;","There are four types of casts in K:
V:Sort tells the compiler that V is a variable of sort Sort and that this constraint should be checked at runtime; ie, it causes the rule it is in to gain a side condition that causes the rule not to apply if the value matched for V is not of sort Sort.
V::Sort tells the compiler that V should be assumed to be of sort Sort during parsing, but that no constraints should be checked at runtime. This can lead to poorly-typed configurations if it's abused, but it should be used whenever possible in cases when the programmer is confident that the value is guaranteed to be of that sort no matter what, because it improves performance of the interpreter.
{V}:>Sort Functions similar to a cast in other languages. It tells the compiler that something which is statically inferred elsewhere as another sort should be treated here as if it is of sort Sort. This is useful for expressions such as isCPPFunctionType(T) andBool isAdjustedType({T}:>CPPFunctionType) where you are checking the sort of a variable explicitly rather than with the T:CPPFunctionType syntax.
Finally, {V}<:Sort Tells the parser that V should be assumed to be of sort Sort during parsing, similar to V::Sort, but the distinction is that it creates an expression of sort K, which can appear anywhere in a term. This is used only in very rare circumstances in order to perform disambiguation between conflicting syntax productions. I do not anticipate that you should need to use it, but I explain here in the interests of completeness.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,271,2017-03-11T21:06:07Z,2017-03-24T21:05:04Z,2017-03-24T21:05:04Z,CLOSED,False,658,26,17,https://github.com/h0nzZik,C++ Enums + enumerators,12,[],https://github.com/kframework/c-semantics/pull/271,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/271,"Implements: enums, enumerators, their underlying type, lookup.
Does not implement: enums in functions/classes, std::underlying_type, opaque enums.
Depends on:
#270.
#268
Closes #262","Implements: enums, enumerators, their underlying type, lookup.
Does not implement: enums in functions/classes, std::underlying_type, opaque enums.
Depends on:
#270.
#268
Closes #262",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,271,2017-03-11T21:06:07Z,2017-03-24T21:05:04Z,2017-03-24T21:05:04Z,CLOSED,False,658,26,17,https://github.com/h0nzZik,C++ Enums + enumerators,12,[],https://github.com/kframework/c-semantics/pull/271,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/271#issuecomment-288344363,"Implements: enums, enumerators, their underlying type, lookup.
Does not implement: enums in functions/classes, std::underlying_type, opaque enums.
Depends on:
#270.
#268
Closes #262","I am not able to react directly to the comment, but 7.2:5.1.

If the initializer has unscoped enumeration type, the enumerator has the underlying type of that type.

is implemented in the rule
rule declareEnumerators(_, _, _, _, _, ListItem(Enumerator(_, prv(_, _, T:CPPEnumType => underlyingType(T)))) _::List, _, _)",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,273,2017-04-06T10:11:23Z,2017-04-10T19:22:40Z,2017-04-10T19:22:40Z,CLOSED,False,13,1,2,https://github.com/h0nzZik,Fix: enums were treated as their underlying type while reading.,1,[],https://github.com/kframework/c-semantics/pull/273,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/273,"The lambda function in the rule does nothing. However, when I change the rule to
 rule interpret(prv(I:Int, Tr::Trace, T:CPPEnumType)) => #fun(prv(I::Int, Tr::Trace, (_ => T)))(interpret(prv(I, Tr, underlyingType(T))))

(as suggested) it fails to compile with:
Error: This expression has type Constants.k = Constants.K.kitem list
       but an expression was expected of type Constants.k * Constants.k","The lambda function in the rule does nothing. However, when I change the rule to
 rule interpret(prv(I:Int, Tr::Trace, T:CPPEnumType)) => #fun(prv(I::Int, Tr::Trace, (_ => T)))(interpret(prv(I, Tr, underlyingType(T))))

(as suggested) it fails to compile with:
Error: This expression has type Constants.k = Constants.K.kitem list
       but an expression was expected of type Constants.k * Constants.k",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,275,2017-04-06T17:01:01Z,2017-04-24T15:54:15Z,2017-04-26T20:16:11Z,CLOSED,False,161,1,4,https://github.com/h0nzZik,Builtin operators for enums.,3,[],https://github.com/kframework/c-semantics/pull/275,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/275,"Builtin operators for enums, as described in 13.6.","Builtin operators for enums, as described in 13.6.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,275,2017-04-06T17:01:01Z,2017-04-24T15:54:15Z,2017-04-26T20:16:11Z,CLOSED,False,161,1,4,https://github.com/h0nzZik,Builtin operators for enums.,3,[],https://github.com/kframework/c-semantics/pull/275,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/275#issuecomment-292313792,"Builtin operators for enums, as described in 13.6.","Now I see. So I will use resolveOverload with the union of all three candidate set. The built-in candidate sets will be singletons, because 13.3.1.2:3.3.3 says the operands should be convertible, and enums are not implicitly convertible to anything (except some cv-conversions etc) - is this correct?.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,275,2017-04-06T17:01:01Z,2017-04-24T15:54:15Z,2017-04-26T20:16:11Z,CLOSED,False,161,1,4,https://github.com/h0nzZik,Builtin operators for enums.,3,[],https://github.com/kframework/c-semantics/pull/275,https://github.com/dwightguth,3,https://github.com/kframework/c-semantics/pull/275#issuecomment-292335278,"Builtin operators for enums, as described in 13.6.","This is not quite correct. Many of the builtin sets in 13.6 are infinite sets, and therefore it is necessary to prune the search space based on the types of the operands in order to be able to compute the full list of candidates that participate in overload resolution. And indeed, that is the case with the candidate sets in paragraphs 15, 16, 19, and 20, all of which pertain to the operators you defined in this PR. Thus, taking each of these paragraphs individually:
Paragraph 15: both operands must convert to the same pointer or enumeration type. If we assume neither operand is of class type, then this can only occur if one of the arguments is an enumeration. in that case, the enumeration cannot be converted to a pointer, or a different enumeration type, which means it must be the same enumeration type as the builtin candidate. thus there is only one candidate set to consider, namely, the candidate for the enumeration type that is an argument.
Paragraph 16: Here again if we exclude class types then we can ignore this case entirely because one of the arguments must be an enumeration, and that enumeration cannot be converted to a member pointer or to std::nullptr_t.
Paragraph 19: Here if the first argument is the enumeration we must also consider the semantics of reference binding in overloading. However since restrictions on overloading of assignment require that no temporary or user defined conversion applies to the left operand, we are left only with the cases when the initializer expression is the same type as the reference, which it cannot be because the type of the reference is a pointer. If the second argument is the enumeration then we can also ignore this case because enumerations cannot be converted to pointers.
Paragraph 20: Here we can ignore the case of pointers to members for the same reason as paragraph 16. If the first operand is the enumeration, then by the same logic as paragraph 19, the argument will only convert if it's of the exact same enumeration type. And the same is true of the second operand by the same logic as paragraph 15. Thus again, we only need to considre a single case., namely, the candidate for teh enumeration type that is an argument.
Thus as far as these four paragraphs go with infinite sets, you are correct insofar as it concerns operands of non-class type. However, the operators you wish to implement are also governed by paragraphs 12 and 18, and here your logic goes astray. By my count there are quite a number of candidate operator functions that could match enumerations (because unscoped enumerations can be converted to any integer type. However, these candidate sets as described in this paragraph are finite and therefore can be exhaustively enumerated. I would suggest you write code that exhaustively enumerates them and adds the resulting exhaustive set to the builtin candidate set (subject to the filtering done in paragraph 13.3.1.2:3.3.4), and let the overloading mechanism automatically resolve the best viable candidate. You may run into cases where more than one candidate is viable, but in that case I would recommend holding off a couple days because I am in the process of submitting code which will implement the best viable candidate selection, which would narrow it down in most cases to either the exact match or to a promotion.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,275,2017-04-06T17:01:01Z,2017-04-24T15:54:15Z,2017-04-26T20:16:11Z,CLOSED,False,161,1,4,https://github.com/h0nzZik,Builtin operators for enums.,3,[],https://github.com/kframework/c-semantics/pull/275,https://github.com/h0nzZik,4,https://github.com/kframework/c-semantics/pull/275#issuecomment-293220867,"Builtin operators for enums, as described in 13.6.","I've tried to implement operator= (but forgot about volatile arithmetic LHS - I will fix it later), is this the right way to do it? The code is a bit verbose, so I will refactor it. I would like to implement the other operators in the similar manner.
Also I am not sure how to correctly check whether the left expression can be bound to first parameter, which is a non-const reference; I will probably use something like
viableType(type(lvRefType(type(simpleType(T1)))), T1, VC1)

everywhere.
Programs with ""bad"" assignments (e.g. to const) are rejected by clang-kast, so testing the semantics against such programs is not easy. Is it important? Could we somehow use kcc with hand-crafted AST?
Also, when I tried to use #if #then #else #fi instead of [owise] rules, I encountered a strange behaviour, when the three maps in addBuiltinCandidates rule (resulting from builtin...AssignOperator) were not correctly merged - the result was .Map, although one of them was not empty.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,275,2017-04-06T17:01:01Z,2017-04-24T15:54:15Z,2017-04-26T20:16:11Z,CLOSED,False,161,1,4,https://github.com/h0nzZik,Builtin operators for enums.,3,[],https://github.com/kframework/c-semantics/pull/275,https://github.com/dwightguth,5,https://github.com/kframework/c-semantics/pull/275#issuecomment-294241691,"Builtin operators for enums, as described in 13.6.","I'm sorry, unfortunately I'm going to have to ask you to stop working on this because my own critical path has led me to this exact same issue (builtin candidates for relational operators on enumerations), and I can't afford to take the time that would be needed in order to wait for you to create something that passes through code review.
If you want something to work on that most likely will not overlap with what I'm working on, at least for the time being, I would suggest tackling the issue of zero-initialization of class types.
Essentially what we want here is for the zeroInit expression for class types to evaluate to a compound initialization in which the first operation writes a zero byte to all the bytes of the class iff the object, when evaluated as part of executing the initializer, is found to have automatic, allocated, or dynamic storage (and otherwise does nothing), and the second operation returns an lvalue of the object being initialized.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,275,2017-04-06T17:01:01Z,2017-04-24T15:54:15Z,2017-04-26T20:16:11Z,CLOSED,False,161,1,4,https://github.com/h0nzZik,Builtin operators for enums.,3,[],https://github.com/kframework/c-semantics/pull/275,https://github.com/h0nzZik,6,https://github.com/kframework/c-semantics/pull/275#issuecomment-294316617,"Builtin operators for enums, as described in 13.6.","Ok, I will look at it. Later I would like to work on constexpr.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,275,2017-04-06T17:01:01Z,2017-04-24T15:54:15Z,2017-04-26T20:16:11Z,CLOSED,False,161,1,4,https://github.com/h0nzZik,Builtin operators for enums.,3,[],https://github.com/kframework/c-semantics/pull/275,https://github.com/dwightguth,7,https://github.com/kframework/c-semantics/pull/275#issuecomment-294322333,"Builtin operators for enums, as described in 13.6.","Hmmm. Yeah, constexpr would be a good second choice probably. Essentially what you'll need to do there is make it so that constexpr functions evaluate during the translation semantics.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,275,2017-04-06T17:01:01Z,2017-04-24T15:54:15Z,2017-04-26T20:16:11Z,CLOSED,False,161,1,4,https://github.com/h0nzZik,Builtin operators for enums.,3,[],https://github.com/kframework/c-semantics/pull/275,https://github.com/h0nzZik,8,https://github.com/kframework/c-semantics/pull/275#issuecomment-297451536,"Builtin operators for enums, as described in 13.6.",Regarding the zero initialization: why should zeroInit not initialize class variables of static storage duration?,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,275,2017-04-06T17:01:01Z,2017-04-24T15:54:15Z,2017-04-26T20:16:11Z,CLOSED,False,161,1,4,https://github.com/h0nzZik,Builtin operators for enums.,3,[],https://github.com/kframework/c-semantics/pull/275,https://github.com/dwightguth,9,https://github.com/kframework/c-semantics/pull/275#issuecomment-297467025,"Builtin operators for enums, as described in 13.6.","Because those objects are already implicitly zero-initialized by the memory reading mechanism (cf. getUninitializedBits). This saves us significantly in the size of the executable of programs with very large static arrays.
Note that the same is true of thread-local storage.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,276,2017-04-09T18:59:18Z,2017-04-17T19:31:24Z,2017-04-17T19:31:24Z,CLOSED,False,2,0,1,https://github.com/h0nzZik,missing cfg:alignofReference,1,[],https://github.com/kframework/c-semantics/pull/276,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/276,The rule for cfg:alignofReference was missing. Test: tests/unit-pass/init-ref2.C.,The rule for cfg:alignofReference was missing. Test: tests/unit-pass/init-ref2.C.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,278,2017-04-15T20:35:22Z,2017-04-18T13:59:06Z,2017-04-18T13:59:06Z,CLOSED,False,210,15,9,https://github.com/h0nzZik,"Opaque enums, enums in functions and classes",4,[],https://github.com/kframework/c-semantics/pull/278,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/278,One test in enum-in-class.C is commented out due to issue #277,One test in enum-in-class.C is commented out due to issue #277,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,279,2017-04-19T17:55:27Z,2017-08-08T18:02:05Z,2017-08-08T18:02:05Z,CLOSED,False,1,1,1,https://github.com/h0nzZik,Clang-Kast: What if presumed location is not valid?,1,[],https://github.com/kframework/c-semantics/pull/279,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/279,"SourceManager::getPresumedLoc() may return invalid location, which actually happens on my system.","SourceManager::getPresumedLoc() may return invalid location, which actually happens on my system.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,279,2017-04-19T17:55:27Z,2017-08-08T18:02:05Z,2017-08-08T18:02:05Z,CLOSED,False,1,1,1,https://github.com/h0nzZik,Clang-Kast: What if presumed location is not valid?,1,[],https://github.com/kframework/c-semantics/pull/279,https://github.com/dwightguth,2,https://github.com/kframework/c-semantics/pull/279#issuecomment-321034821,"SourceManager::getPresumedLoc() may return invalid location, which actually happens on my system.",This has been fixed in the latest master.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,280,2017-04-26T15:04:37Z,2018-05-25T19:21:18Z,2018-05-25T19:21:18Z,CLOSED,False,116,14,10,https://github.com/h0nzZik,Constexpr for global variables,6,[],https://github.com/kframework/c-semantics/pull/280,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/280,"Reading global constexpr variable is now a compile-time expression.
Unfortunately, this duplicates some code from cpp14/language/execution/io.k,  (errorReadOutOfBounds, getUninitializedBits etc). Where to put the common code?","Reading global constexpr variable is now a compile-time expression.
Unfortunately, this duplicates some code from cpp14/language/execution/io.k,  (errorReadOutOfBounds, getUninitializedBits etc). Where to put the common code?",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,280,2017-04-26T15:04:37Z,2018-05-25T19:21:18Z,2018-05-25T19:21:18Z,CLOSED,False,116,14,10,https://github.com/h0nzZik,Constexpr for global variables,6,[],https://github.com/kframework/c-semantics/pull/280,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/280#issuecomment-320989134,"Reading global constexpr variable is now a compile-time expression.
Unfortunately, this duplicates some code from cpp14/language/execution/io.k,  (errorReadOutOfBounds, getUninitializedBits etc). Where to put the common code?","I have fixed the mentioned deficits some time ago, but forgot to announce it in this discussion.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,280,2017-04-26T15:04:37Z,2018-05-25T19:21:18Z,2018-05-25T19:21:18Z,CLOSED,False,116,14,10,https://github.com/h0nzZik,Constexpr for global variables,6,[],https://github.com/kframework/c-semantics/pull/280,https://github.com/h0nzZik,3,https://github.com/kframework/c-semantics/pull/280#issuecomment-347035693,"Reading global constexpr variable is now a compile-time expression.
Unfortunately, this duplicates some code from cpp14/language/execution/io.k,  (errorReadOutOfBounds, getUninitializedBits etc). Where to put the common code?","@dwightguth I have cleaned the imports, as you said in #292 . Therefore both PRs should be mergable.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,286,2017-08-05T15:27:55Z,2017-08-08T19:42:40Z,2017-08-08T19:42:40Z,CLOSED,False,1,1,1,https://github.com/h0nzZik,fix EAgain,1,[],https://github.com/kframework/c-semantics/pull/286,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/286,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,286,2017-08-05T15:27:55Z,2017-08-08T19:42:40Z,2017-08-08T19:42:40Z,CLOSED,False,1,1,1,https://github.com/h0nzZik,fix EAgain,1,[],https://github.com/kframework/c-semantics/pull/286,https://github.com/dwightguth,2,https://github.com/kframework/c-semantics/pull/286#issuecomment-321060843,,Fixed in 2f52176,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,287,2017-08-05T15:35:52Z,2017-09-27T20:00:06Z,2017-09-27T20:00:06Z,CLOSED,False,1,0,1,https://github.com/h0nzZik,Fix nondeterminism in rules for #figureInit ,2,[],https://github.com/kframework/c-semantics/pull/287,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/287,"The the modified rule collided with this rule just a few lines above:
rule #figureInit(Base:LVal, DestT::CPPType, _, ExpressionList(.List), _, _, IsConstructor::ConstructorType)
          => #valueInit(Base, DestT, IsConstructor)

I have discovered it while working on zero initialization of class types.","The the modified rule collided with this rule just a few lines above:
rule #figureInit(Base:LVal, DestT::CPPType, _, ExpressionList(.List), _, _, IsConstructor::ConstructorType)
          => #valueInit(Base, DestT, IsConstructor)

I have discovered it while working on zero initialization of class types.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,287,2017-08-05T15:35:52Z,2017-09-27T20:00:06Z,2017-09-27T20:00:06Z,CLOSED,False,1,0,1,https://github.com/h0nzZik,Fix nondeterminism in rules for #figureInit ,2,[],https://github.com/kframework/c-semantics/pull/287,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/287#issuecomment-332216354,"The the modified rule collided with this rule just a few lines above:
rule #figureInit(Base:LVal, DestT::CPPType, _, ExpressionList(.List), _, _, IsConstructor::ConstructorType)
          => #valueInit(Base, DestT, IsConstructor)

I have discovered it while working on zero initialization of class types.",@dwightguth can you have a look at it and eventually merge it?,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,288,2017-08-29T14:55:46Z,2017-08-29T14:56:14Z,2017-08-29T14:56:21Z,CLOSED,False,1,1,1,https://github.com/dwightguth,fix INSTALL.md,1,[],https://github.com/kframework/c-semantics/pull/288,https://github.com/dwightguth,1,https://github.com/kframework/c-semantics/pull/288,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,288,2017-08-29T14:55:46Z,2017-08-29T14:56:14Z,2017-08-29T14:56:21Z,CLOSED,False,1,1,1,https://github.com/dwightguth,fix INSTALL.md,1,[],https://github.com/kframework/c-semantics/pull/288,https://github.com/dwightguth,2,https://github.com/kframework/c-semantics/pull/288#issuecomment-325690792,,Oops wrong repo,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,289,2017-09-27T18:47:55Z,2017-10-10T18:04:35Z,2017-10-10T18:04:35Z,CLOSED,False,1,1,1,https://github.com/h0nzZik,LLVM_PATH is now cached variable,2,[],https://github.com/kframework/c-semantics/pull/289,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/289,"It is therefore possible to build cpp-parser even when llvm-3.9 is installed in different location. E.g.
cmake -DLLVM_PATH=~/local/my-llvm-3.9 .","It is therefore possible to build cpp-parser even when llvm-3.9 is installed in different location. E.g.
cmake -DLLVM_PATH=~/local/my-llvm-3.9 .",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,290,2017-09-28T21:16:05Z,2017-10-10T18:04:27Z,2017-10-10T18:04:27Z,CLOSED,False,2,1,2,https://github.com/h0nzZik,Libc fixes,1,[],https://github.com/kframework/c-semantics/pull/290,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/290,It wasn't possible to build libc.,It wasn't possible to build libc.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,290,2017-09-28T21:16:05Z,2017-10-10T18:04:27Z,2017-10-10T18:04:27Z,CLOSED,False,2,1,2,https://github.com/h0nzZik,Libc fixes,1,[],https://github.com/kframework/c-semantics/pull/290,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/290#issuecomment-335253547,It wasn't possible to build libc.,@dwightguth Can you merge this?,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,291,2017-09-29T21:24:41Z,2017-10-10T17:35:43Z,2017-10-10T17:35:43Z,CLOSED,False,17,2,2,https://github.com/h0nzZik,Fix default initialization of clases,2,[],https://github.com/kframework/c-semantics/pull/291,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/291,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,292,2017-10-03T07:27:19Z,2018-05-07T19:18:07Z,2018-05-07T19:18:07Z,CLOSED,False,68,11,5,https://github.com/h0nzZik,Fix base class access,6,[],https://github.com/kframework/c-semantics/pull/292,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/292,"Converting class instances to their base class as well as accessing an element of base class worked correctly only if:

the class had only one base class.
if the base class had no virtual function, then the derived class had no virtual function.

(I've discovered this when working on zero initialization of classes.)","Converting class instances to their base class as well as accessing an element of base class worked correctly only if:

the class had only one base class.
if the base class had no virtual function, then the derived class had no virtual function.

(I've discovered this when working on zero initialization of classes.)",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,292,2017-10-03T07:27:19Z,2018-05-07T19:18:07Z,2018-05-07T19:18:07Z,CLOSED,False,68,11,5,https://github.com/h0nzZik,Fix base class access,6,[],https://github.com/kframework/c-semantics/pull/292,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/292#issuecomment-338596146,"Converting class instances to their base class as well as accessing an element of base class worked correctly only if:

the class had only one base class.
if the base class had no virtual function, then the derived class had no virtual function.

(I've discovered this when working on zero initialization of classes.)",Fixed,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,292,2017-10-03T07:27:19Z,2018-05-07T19:18:07Z,2018-05-07T19:18:07Z,CLOSED,False,68,11,5,https://github.com/h0nzZik,Fix base class access,6,[],https://github.com/kframework/c-semantics/pull/292,https://github.com/dwightguth,3,https://github.com/kframework/c-semantics/pull/292#issuecomment-341101057,"Converting class instances to their base class as well as accessing an element of base class worked correctly only if:

the class had only one base class.
if the base class had no virtual function, then the derived class had no virtual function.

(I've discovered this when working on zero initialization of classes.)",I just noticed something else: we try to avoid importing a syntax module into another syntax module unless there is no equivalent module to import containing just the sorts. Can you update your c++ prs to reflect this and then tag me again? Then I will merge this.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,292,2017-10-03T07:27:19Z,2018-05-07T19:18:07Z,2018-05-07T19:18:07Z,CLOSED,False,68,11,5,https://github.com/h0nzZik,Fix base class access,6,[],https://github.com/kframework/c-semantics/pull/292,https://github.com/h0nzZik,4,https://github.com/kframework/c-semantics/pull/292#issuecomment-341374880,"Converting class instances to their base class as well as accessing an element of base class worked correctly only if:

the class had only one base class.
if the base class had no virtual function, then the derived class had no virtual function.

(I've discovered this when working on zero initialization of classes.)",@dwightguth For this PR it is done. PR #298 does not have this problem. I will update PR #280 later (after resolving its conflicts).,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,292,2017-10-03T07:27:19Z,2018-05-07T19:18:07Z,2018-05-07T19:18:07Z,CLOSED,False,68,11,5,https://github.com/h0nzZik,Fix base class access,6,[],https://github.com/kframework/c-semantics/pull/292,https://github.com/h0nzZik,5,https://github.com/kframework/c-semantics/pull/292#issuecomment-347826437,"Converting class instances to their base class as well as accessing an element of base class worked correctly only if:

the class had only one base class.
if the base class had no virtual function, then the derived class had no virtual function.

(I've discovered this when working on zero initialization of classes.)",@dwightguth I think that the sorts/syntax/implementation distinction is closely related to this talk,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,292,2017-10-03T07:27:19Z,2018-05-07T19:18:07Z,2018-05-07T19:18:07Z,CLOSED,False,68,11,5,https://github.com/h0nzZik,Fix base class access,6,[],https://github.com/kframework/c-semantics/pull/292,https://github.com/h0nzZik,6,https://github.com/kframework/c-semantics/pull/292#issuecomment-387173298,"Converting class instances to their base class as well as accessing an element of base class worked correctly only if:

the class had only one base class.
if the base class had no virtual function, then the derived class had no virtual function.

(I've discovered this when working on zero initialization of classes.)",Moved there: runtimeverification/rv-match#611,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,297,2017-10-15T10:07:38Z,2017-11-01T13:46:06Z,2017-11-06T14:06:03Z,CLOSED,False,5,0,1,https://github.com/h0nzZik,Run program up to some depth,1,[],https://github.com/kframework/c-semantics/pull/297,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/297,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,297,2017-10-15T10:07:38Z,2017-11-01T13:46:06Z,2017-11-06T14:06:03Z,CLOSED,False,5,0,1,https://github.com/h0nzZik,Run program up to some depth,1,[],https://github.com/kframework/c-semantics/pull/297,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/297#issuecomment-341084144,,@dwightguth Can you have a look at this and eventually merge it?,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,297,2017-10-15T10:07:38Z,2017-11-01T13:46:06Z,2017-11-06T14:06:03Z,CLOSED,False,5,0,1,https://github.com/h0nzZik,Run program up to some depth,1,[],https://github.com/kframework/c-semantics/pull/297,https://github.com/h0nzZik,3,https://github.com/kframework/c-semantics/pull/297#issuecomment-342158044,,I've just realized that I forgot to add a help text for this feature. Should I reopen this PR or create new?,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,298,2017-10-15T19:06:15Z,2018-05-07T19:17:16Z,2018-05-07T19:17:16Z,CLOSED,False,243,27,11,https://github.com/h0nzZik,Zero initialization of classes,3,[],https://github.com/kframework/c-semantics/pull/298,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/298,"Implements zero initialization of classes (and its members, base classes and padding), and arrays.
Depends on #292.","Implements zero initialization of classes (and its members, base classes and padding), and arrays.
Depends on #292.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,298,2017-10-15T19:06:15Z,2018-05-07T19:17:16Z,2018-05-07T19:17:16Z,CLOSED,False,243,27,11,https://github.com/h0nzZik,Zero initialization of classes,3,[],https://github.com/kframework/c-semantics/pull/298,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/298#issuecomment-387173058,"Implements zero initialization of classes (and its members, base classes and padding), and arrays.
Depends on #292.",Moved here runtimeverification/rv-match#612,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,329,2018-11-14T04:47:48Z,2018-11-16T12:57:55Z,2018-11-16T12:57:55Z,CLOSED,False,1,1,1,https://github.com/h0nzZik,Set larger memory limit for Java,1,[],https://github.com/kframework/c-semantics/pull/329,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/329,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,329,2018-11-14T04:47:48Z,2018-11-16T12:57:55Z,2018-11-16T12:57:55Z,CLOSED,False,1,1,1,https://github.com/h0nzZik,Set larger memory limit for Java,1,[],https://github.com/kframework/c-semantics/pull/329,https://github.com/chathhorn,2,https://github.com/kframework/c-semantics/pull/329#issuecomment-438801745,,Jenkins: test this please,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,329,2018-11-14T04:47:48Z,2018-11-16T12:57:55Z,2018-11-16T12:57:55Z,CLOSED,False,1,1,1,https://github.com/h0nzZik,Set larger memory limit for Java,1,[],https://github.com/kframework/c-semantics/pull/329,https://github.com/chathhorn,3,https://github.com/kframework/c-semantics/pull/329#issuecomment-438806583,,Jenkins: test this please,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,329,2018-11-14T04:47:48Z,2018-11-16T12:57:55Z,2018-11-16T12:57:55Z,CLOSED,False,1,1,1,https://github.com/h0nzZik,Set larger memory limit for Java,1,[],https://github.com/kframework/c-semantics/pull/329,https://github.com/chathhorn,4,https://github.com/kframework/c-semantics/pull/329#issuecomment-438808919,,Jenkins: test this please,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,329,2018-11-14T04:47:48Z,2018-11-16T12:57:55Z,2018-11-16T12:57:55Z,CLOSED,False,1,1,1,https://github.com/h0nzZik,Set larger memory limit for Java,1,[],https://github.com/kframework/c-semantics/pull/329,https://github.com/chathhorn,5,https://github.com/kframework/c-semantics/pull/329#issuecomment-439385278,,I included this fix in my pr to setup some limited CI.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,330,2018-11-14T21:45:42Z,2018-11-16T12:57:06Z,2018-11-16T12:57:10Z,MERGED,True,262,95,34,https://github.com/chathhorn,Add K submodule to the C semantics repo.,2,[],https://github.com/kframework/c-semantics/pull/330,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/330,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,333,2018-11-21T01:38:20Z,2018-11-23T00:08:46Z,2018-11-23T00:08:46Z,MERGED,True,70,34,6,https://github.com/h0nzZik,kpair -> Class.DataMember,2,[],https://github.com/kframework/c-semantics/pull/333,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/333,Small refactoring.,Small refactoring.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,333,2018-11-21T01:38:20Z,2018-11-23T00:08:46Z,2018-11-23T00:08:46Z,MERGED,True,70,34,6,https://github.com/h0nzZik,kpair -> Class.DataMember,2,[],https://github.com/kframework/c-semantics/pull/333,https://github.com/chathhorn,2,https://github.com/kframework/c-semantics/pull/333#issuecomment-441086421,Small refactoring.,Jenkins: test this please,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,333,2018-11-21T01:38:20Z,2018-11-23T00:08:46Z,2018-11-23T00:08:46Z,MERGED,True,70,34,6,https://github.com/h0nzZik,kpair -> Class.DataMember,2,[],https://github.com/kframework/c-semantics/pull/333,https://github.com/h0nzZik,3,https://github.com/kframework/c-semantics/pull/333#issuecomment-441100029,Small refactoring.,"There are some bugs I have fixed in a separate branch. I will merge that fixed branch to this one, but until then, the tests will not pass.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,334,2018-11-21T20:22:58Z,2018-11-22T17:05:01Z,2018-11-28T22:59:18Z,MERGED,True,8,2,1,https://github.com/h0nzZik,Fix k-bin-to-text not in $PATH,3,[],https://github.com/kframework/c-semantics/pull/334,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/334,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,334,2018-11-21T20:22:58Z,2018-11-22T17:05:01Z,2018-11-28T22:59:18Z,MERGED,True,8,2,1,https://github.com/h0nzZik,Fix k-bin-to-text not in $PATH,3,[],https://github.com/kframework/c-semantics/pull/334,https://github.com/chathhorn,2,https://github.com/kframework/c-semantics/pull/334#issuecomment-440808690,,Jenkins: test this please.,True,{'THUMBS_UP': ['https://github.com/h0nzZik']}
kframework/c-semantics,https://github.com/kframework/c-semantics,334,2018-11-21T20:22:58Z,2018-11-22T17:05:01Z,2018-11-28T22:59:18Z,MERGED,True,8,2,1,https://github.com/h0nzZik,Fix k-bin-to-text not in $PATH,3,[],https://github.com/kframework/c-semantics/pull/334,https://github.com/chathhorn,3,https://github.com/kframework/c-semantics/pull/334#issuecomment-440860493,,Jenkins: test this please,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,334,2018-11-21T20:22:58Z,2018-11-22T17:05:01Z,2018-11-28T22:59:18Z,MERGED,True,8,2,1,https://github.com/h0nzZik,Fix k-bin-to-text not in $PATH,3,[],https://github.com/kframework/c-semantics/pull/334,https://github.com/chathhorn,4,https://github.com/kframework/c-semantics/pull/334#issuecomment-441034732,,Jenkins: test this please,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,335,2018-11-21T21:54:34Z,2018-11-21T22:51:28Z,2018-11-21T23:02:02Z,MERGED,True,3,4,1,https://github.com/chathhorn,Tweak to makefile,2,[],https://github.com/kframework/c-semantics/pull/335,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/335,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,336,2018-11-23T03:16:39Z,2018-11-23T14:32:36Z,2018-11-28T22:59:29Z,MERGED,True,38,0,1,https://github.com/h0nzZik,A script for generating modules,1,[],https://github.com/kframework/c-semantics/pull/336,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/336,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,336,2018-11-23T03:16:39Z,2018-11-23T14:32:36Z,2018-11-28T22:59:29Z,MERGED,True,38,0,1,https://github.com/h0nzZik,A script for generating modules,1,[],https://github.com/kframework/c-semantics/pull/336,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/336#issuecomment-441154028,,Jenkins: Test this please.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,337,2018-11-24T02:17:09Z,2018-11-28T22:42:32Z,2018-11-28T22:59:26Z,MERGED,True,283,67,5,https://github.com/h0nzZik,Reorganize C++ modules,8,[],https://github.com/kframework/c-semantics/pull/337,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/337,"Some of the semantic modules are empty now, but they will be eventually filled.","Some of the semantic modules are empty now, but they will be eventually filled.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,337,2018-11-24T02:17:09Z,2018-11-28T22:42:32Z,2018-11-28T22:59:26Z,MERGED,True,283,67,5,https://github.com/h0nzZik,Reorganize C++ modules,8,[],https://github.com/kframework/c-semantics/pull/337,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/337#issuecomment-441338529,"Some of the semantic modules are empty now, but they will be eventually filled.",Jenkins: test this please.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,340,2018-11-25T16:13:22Z,2018-11-27T00:22:56Z,2018-11-28T22:59:23Z,MERGED,True,1,0,1,https://github.com/h0nzZik,Fix alignof nullptr,1,[],https://github.com/kframework/c-semantics/pull/340,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/340,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,341,2018-11-25T16:57:03Z,2018-11-27T01:39:53Z,2018-11-28T22:59:21Z,MERGED,True,241,36,14,https://github.com/h0nzZik,Odr destructors,15,[],https://github.com/kframework/c-semantics/pull/341,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/341,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,344,2018-11-29T03:59:03Z,2018-11-30T20:58:06Z,2018-12-04T17:50:47Z,MERGED,True,2813,133,99,https://github.com/h0nzZik,Reformatting C++ semantics,1,[],https://github.com/kframework/c-semantics/pull/344,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/344,"Note to self: we may easily fix the indentation, too.
let desiredIndentation = 5;
for b in bubbles; do
  let x = indentationOf(lines(b)[0])
  for l in lines(b); do
    let c = indentationOf(l);
    stripIndentation(l);
    addIndentation(l, desiredIndentation + max(0, c - x));
  done
done","Note to self: we may easily fix the indentation, too.
let desiredIndentation = 5;
for b in bubbles; do
  let x = indentationOf(lines(b)[0])
  for l in lines(b); do
    let c = indentationOf(l);
    stripIndentation(l);
    addIndentation(l, desiredIndentation + max(0, c - x));
  done
done",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,344,2018-11-29T03:59:03Z,2018-11-30T20:58:06Z,2018-12-04T17:50:47Z,MERGED,True,2813,133,99,https://github.com/h0nzZik,Reformatting C++ semantics,1,[],https://github.com/kframework/c-semantics/pull/344,https://github.com/chathhorn,2,https://github.com/kframework/c-semantics/pull/344#issuecomment-443323267,"Note to self: we may easily fix the indentation, too.
let desiredIndentation = 5;
for b in bubbles; do
  let x = indentationOf(lines(b)[0])
  for l in lines(b); do
    let c = indentationOf(l);
    stripIndentation(l);
    addIndentation(l, desiredIndentation + max(0, c - x));
  done
done","I'm pretty ambivalent about all the extra white space (I kinda prefer rules rewriting the same production, especially functions, to be grouped together without extra whitespace), but I'm fine with it if you like this style.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,344,2018-11-29T03:59:03Z,2018-11-30T20:58:06Z,2018-12-04T17:50:47Z,MERGED,True,2813,133,99,https://github.com/h0nzZik,Reformatting C++ semantics,1,[],https://github.com/kframework/c-semantics/pull/344,https://github.com/h0nzZik,3,https://github.com/kframework/c-semantics/pull/344#issuecomment-443337849,"Note to self: we may easily fix the indentation, too.
let desiredIndentation = 5;
for b in bubbles; do
  let x = indentationOf(lines(b)[0])
  for l in lines(b); do
    let c = indentationOf(l);
    stripIndentation(l);
    addIndentation(l, desiredIndentation + max(0, c - x));
  done
done","Yes, I would prefer short rules to be formatted like
rule foo(1) => 2
rule foo(2) => -1

but the readability does not suffer that much when they are like
rule foo(1) => 2

rule foo(2) => -1

.  But the readability definitely suffers from long rules being smashed together, so I started with the 'empty line after each rule' style.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,350,2018-12-04T17:57:00Z,2018-12-04T20:21:25Z,2018-12-04T23:41:03Z,MERGED,True,108,6,3,https://github.com/h0nzZik,Utility class and type related functions,4,['C++'],https://github.com/kframework/c-semantics/pull/350,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/350,I want to start merging my work on implicitly-generated special member functions. This PR should not change the semantics; it just adds a bunch of useful functions.,I want to start merging my work on implicitly-generated special member functions. This PR should not change the semantics; it just adds a bunch of useful functions.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,351,2018-12-05T02:08:03Z,2018-12-05T05:02:42Z,2018-12-05T05:13:23Z,MERGED,True,3,2,1,https://github.com/chathhorn,Add sanity check to gcc standard detection,1,[],https://github.com/kframework/c-semantics/pull/351,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/351,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,352,2018-12-05T05:49:28Z,2018-12-05T18:07:35Z,2018-12-05T18:07:41Z,MERGED,True,265,129,8,https://github.com/h0nzZik,Refactor & utility,2,[],https://github.com/kframework/c-semantics/pull/352,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/352,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,353,2018-12-05T22:19:05Z,2018-12-06T14:43:28Z,2018-12-06T14:43:28Z,MERGED,True,38,0,2,https://github.com/h0nzZik,Timestamp build log,1,[],https://github.com/kframework/c-semantics/pull/353,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/353,"Produce nicer logs, with timestamps and colors.
$ ./build.sh
[2018-12-05 16:18:16] make[1]: Entering directory '/mnt/c/Users/jenda/linux_home/jan/git/h0nzZik/w/implicit-smf-1'
[2018-12-05 16:18:16] make[2]: Entering directory '/mnt/c/Users/jenda/linux_home/jan/git/h0nzZik/w/implicit-smf-1/semantics'
[2018-12-05 16:18:16] /mnt/c/Users/jenda/linux_home/jan/git/h0nzZik/w/implicit-smf-1/.build/k/k-distribution/target/release/k/bin/kdep -d "".build/x86-gcc-limited-libc/c11-nd-thread-kompiled"" -I /mnt/c/Users/jenda/linux_home/jan/git/h0nzZik/w/implicit-smf-1/profiles/x86-gcc-limited-libc/semantics -I /mnt/c/Users/jenda/linux_home/jan/git/h0nzZik/w/implicit-smf-1/profiles/x86-gcc-limited-libc/semantics/c -I /mnt/c/Users/jenda/linux_home/jan/git/h0nzZik/w/implicit-smf-1/profiles/x86-gcc-limited-libc/semantics/cpp -- c11-cpp14.k > /tmp/tmp.rPBU0LIKCi

We may want to edit the Jenkins build such that

it runs build.sh
it stores build.log","Produce nicer logs, with timestamps and colors.
$ ./build.sh
[2018-12-05 16:18:16] make[1]: Entering directory '/mnt/c/Users/jenda/linux_home/jan/git/h0nzZik/w/implicit-smf-1'
[2018-12-05 16:18:16] make[2]: Entering directory '/mnt/c/Users/jenda/linux_home/jan/git/h0nzZik/w/implicit-smf-1/semantics'
[2018-12-05 16:18:16] /mnt/c/Users/jenda/linux_home/jan/git/h0nzZik/w/implicit-smf-1/.build/k/k-distribution/target/release/k/bin/kdep -d "".build/x86-gcc-limited-libc/c11-nd-thread-kompiled"" -I /mnt/c/Users/jenda/linux_home/jan/git/h0nzZik/w/implicit-smf-1/profiles/x86-gcc-limited-libc/semantics -I /mnt/c/Users/jenda/linux_home/jan/git/h0nzZik/w/implicit-smf-1/profiles/x86-gcc-limited-libc/semantics/c -I /mnt/c/Users/jenda/linux_home/jan/git/h0nzZik/w/implicit-smf-1/profiles/x86-gcc-limited-libc/semantics/cpp -- c11-cpp14.k > /tmp/tmp.rPBU0LIKCi

We may want to edit the Jenkins build such that

it runs build.sh
it stores build.log",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,357,2018-12-10T21:40:35Z,2018-12-11T16:13:16Z,2018-12-11T16:17:34Z,MERGED,True,158,178,2,https://github.com/h0nzZik,Cleanup Makefiles,13,[],https://github.com/kframework/c-semantics/pull/357,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/357,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,357,2018-12-10T21:40:35Z,2018-12-11T16:13:16Z,2018-12-11T16:17:34Z,MERGED,True,158,178,2,https://github.com/h0nzZik,Cleanup Makefiles,13,[],https://github.com/kframework/c-semantics/pull/357,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/357#issuecomment-446236565,,@chathhorn Please review as if it was squashed. I will not squash it since I do not want to run the tests again.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,357,2018-12-10T21:40:35Z,2018-12-11T16:13:16Z,2018-12-11T16:17:34Z,MERGED,True,158,178,2,https://github.com/h0nzZik,Cleanup Makefiles,13,[],https://github.com/kframework/c-semantics/pull/357,https://github.com/h0nzZik,3,https://github.com/kframework/c-semantics/pull/357#issuecomment-446262677,,"I will do it today. I also want rv-match to stop using some target names (like translation-semantics) and use the filename-based target names instead: $(file)-semantics for $(file).k, e.g. c11-translation-semantics. I will do that in the same PR.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,363,2018-12-21T03:58:13Z,2019-01-23T13:49:21Z,2019-04-29T18:52:02Z,MERGED,True,205,236,24,https://github.com/chathhorn,Refactoring goto-map,3,[],https://github.com/kframework/c-semantics/pull/363,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/363,"refactors goto-map to store it with function defs
removes some language extensions from the main C semantics","refactors goto-map to store it with function defs
removes some language extensions from the main C semantics",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,363,2018-12-21T03:58:13Z,2019-01-23T13:49:21Z,2019-04-29T18:52:02Z,MERGED,True,205,236,24,https://github.com/chathhorn,Refactoring goto-map,3,[],https://github.com/kframework/c-semantics/pull/363,https://github.com/chathhorn,2,https://github.com/kframework/c-semantics/pull/363#issuecomment-450402223,"refactors goto-map to store it with function defs
removes some language extensions from the main C semantics",Jenkins: test this please,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,363,2018-12-21T03:58:13Z,2019-01-23T13:49:21Z,2019-04-29T18:52:02Z,MERGED,True,205,236,24,https://github.com/chathhorn,Refactoring goto-map,3,[],https://github.com/kframework/c-semantics/pull/363,https://github.com/chathhorn,3,https://github.com/kframework/c-semantics/pull/363#issuecomment-454851843,"refactors goto-map to store it with function defs
removes some language extensions from the main C semantics",Jenkins: test this please,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,365,2019-01-17T02:01:00Z,2019-02-02T12:09:00Z,2019-02-02T19:18:36Z,MERGED,True,2,2,1,https://github.com/mparisi20,Update 2-buffer-overflow.c: improving this test bench,3,[],https://github.com/kframework/c-semantics/pull/365,https://github.com/mparisi20,1,https://github.com/kframework/c-semantics/pull/365,"This probably doesn't make much of a difference, but I believe I've fixed two issues in this test bench that prevented them from testing what they were trying to test.  I've modified dynamic_buffer_overrun_028() and dynamic_buffer_overrun_018() so that the buffer overflows encountered when running these functions are the ones implied by their respective comment descriptions.


The problem I found with _018 is that, since index was outside the bounds of the indexes array, a buffer overflow occurs in this array before the value from it is used to access the buf array.


The problem I found with _028 is that, since buf1+5 was outside the bounds of the dynamically-allocated buf1 array, a buffer overflow occurs in this array before the value from it is used to access the buf2 array.


I think these two changes would improve the test bench by having them clearly check for the exact situation that their comments describe.","This probably doesn't make much of a difference, but I believe I've fixed two issues in this test bench that prevented them from testing what they were trying to test.  I've modified dynamic_buffer_overrun_028() and dynamic_buffer_overrun_018() so that the buffer overflows encountered when running these functions are the ones implied by their respective comment descriptions.


The problem I found with _018 is that, since index was outside the bounds of the indexes array, a buffer overflow occurs in this array before the value from it is used to access the buf array.


The problem I found with _028 is that, since buf1+5 was outside the bounds of the dynamically-allocated buf1 array, a buffer overflow occurs in this array before the value from it is used to access the buf2 array.


I think these two changes would improve the test bench by having them clearly check for the exact situation that their comments describe.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,365,2019-01-17T02:01:00Z,2019-02-02T12:09:00Z,2019-02-02T19:18:36Z,MERGED,True,2,2,1,https://github.com/mparisi20,Update 2-buffer-overflow.c: improving this test bench,3,[],https://github.com/kframework/c-semantics/pull/365,https://github.com/rv-jenkins,2,https://github.com/kframework/c-semantics/pull/365#issuecomment-455014029,"This probably doesn't make much of a difference, but I believe I've fixed two issues in this test bench that prevented them from testing what they were trying to test.  I've modified dynamic_buffer_overrun_028() and dynamic_buffer_overrun_018() so that the buffer overflows encountered when running these functions are the ones implied by their respective comment descriptions.


The problem I found with _018 is that, since index was outside the bounds of the indexes array, a buffer overflow occurs in this array before the value from it is used to access the buf array.


The problem I found with _028 is that, since buf1+5 was outside the bounds of the dynamically-allocated buf1 array, a buffer overflow occurs in this array before the value from it is used to access the buf2 array.


I think these two changes would improve the test bench by having them clearly check for the exact situation that their comments describe.",Can one of the admins verify this patch?,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,365,2019-01-17T02:01:00Z,2019-02-02T12:09:00Z,2019-02-02T19:18:36Z,MERGED,True,2,2,1,https://github.com/mparisi20,Update 2-buffer-overflow.c: improving this test bench,3,[],https://github.com/kframework/c-semantics/pull/365,https://github.com/rv-jenkins,3,https://github.com/kframework/c-semantics/pull/365#issuecomment-455014030,"This probably doesn't make much of a difference, but I believe I've fixed two issues in this test bench that prevented them from testing what they were trying to test.  I've modified dynamic_buffer_overrun_028() and dynamic_buffer_overrun_018() so that the buffer overflows encountered when running these functions are the ones implied by their respective comment descriptions.


The problem I found with _018 is that, since index was outside the bounds of the indexes array, a buffer overflow occurs in this array before the value from it is used to access the buf array.


The problem I found with _028 is that, since buf1+5 was outside the bounds of the dynamically-allocated buf1 array, a buffer overflow occurs in this array before the value from it is used to access the buf2 array.


I think these two changes would improve the test bench by having them clearly check for the exact situation that their comments describe.",Can one of the admins verify this patch?,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,365,2019-01-17T02:01:00Z,2019-02-02T12:09:00Z,2019-02-02T19:18:36Z,MERGED,True,2,2,1,https://github.com/mparisi20,Update 2-buffer-overflow.c: improving this test bench,3,[],https://github.com/kframework/c-semantics/pull/365,https://github.com/chathhorn,4,https://github.com/kframework/c-semantics/pull/365#issuecomment-455014400,"This probably doesn't make much of a difference, but I believe I've fixed two issues in this test bench that prevented them from testing what they were trying to test.  I've modified dynamic_buffer_overrun_028() and dynamic_buffer_overrun_018() so that the buffer overflows encountered when running these functions are the ones implied by their respective comment descriptions.


The problem I found with _018 is that, since index was outside the bounds of the indexes array, a buffer overflow occurs in this array before the value from it is used to access the buf array.


The problem I found with _028 is that, since buf1+5 was outside the bounds of the dynamically-allocated buf1 array, a buffer overflow occurs in this array before the value from it is used to access the buf2 array.


I think these two changes would improve the test bench by having them clearly check for the exact situation that their comments describe.",Jenkins: ok to test,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,365,2019-01-17T02:01:00Z,2019-02-02T12:09:00Z,2019-02-02T19:18:36Z,MERGED,True,2,2,1,https://github.com/mparisi20,Update 2-buffer-overflow.c: improving this test bench,3,[],https://github.com/kframework/c-semantics/pull/365,https://github.com/chathhorn,5,https://github.com/kframework/c-semantics/pull/365#issuecomment-455313399,"This probably doesn't make much of a difference, but I believe I've fixed two issues in this test bench that prevented them from testing what they were trying to test.  I've modified dynamic_buffer_overrun_028() and dynamic_buffer_overrun_018() so that the buffer overflows encountered when running these functions are the ones implied by their respective comment descriptions.


The problem I found with _018 is that, since index was outside the bounds of the indexes array, a buffer overflow occurs in this array before the value from it is used to access the buf array.


The problem I found with _028 is that, since buf1+5 was outside the bounds of the dynamically-allocated buf1 array, a buffer overflow occurs in this array before the value from it is used to access the buf2 array.


I think these two changes would improve the test bench by having them clearly check for the exact situation that their comments describe.","This looks good, thanks! I'll merge it when our CI gets unbroken.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,365,2019-01-17T02:01:00Z,2019-02-02T12:09:00Z,2019-02-02T19:18:36Z,MERGED,True,2,2,1,https://github.com/mparisi20,Update 2-buffer-overflow.c: improving this test bench,3,[],https://github.com/kframework/c-semantics/pull/365,https://github.com/mparisi20,6,https://github.com/kframework/c-semantics/pull/365#issuecomment-455324311,"This probably doesn't make much of a difference, but I believe I've fixed two issues in this test bench that prevented them from testing what they were trying to test.  I've modified dynamic_buffer_overrun_028() and dynamic_buffer_overrun_018() so that the buffer overflows encountered when running these functions are the ones implied by their respective comment descriptions.


The problem I found with _018 is that, since index was outside the bounds of the indexes array, a buffer overflow occurs in this array before the value from it is used to access the buf array.


The problem I found with _028 is that, since buf1+5 was outside the bounds of the dynamically-allocated buf1 array, a buffer overflow occurs in this array before the value from it is used to access the buf2 array.


I think these two changes would improve the test bench by having them clearly check for the exact situation that their comments describe.","Thanks, glad to help!",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,366,2019-01-17T22:03:18Z,2019-06-17T14:40:38Z,2019-10-22T19:52:28Z,CLOSED,False,56,392,3,https://github.com/chathhorn,Refactoring kcc (not ready),2,[],https://github.com/kframework/c-semantics/pull/366,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/366,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,367,2019-01-23T21:20:45Z,2019-01-29T00:51:18Z,2019-04-29T18:51:58Z,CLOSED,False,135,355,11,https://github.com/chathhorn,"Fix for clang 6, remove perl xml dependency.",6,[],https://github.com/kframework/c-semantics/pull/367,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/367,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,367,2019-01-23T21:20:45Z,2019-01-29T00:51:18Z,2019-04-29T18:51:58Z,CLOSED,False,135,355,11,https://github.com/chathhorn,"Fix for clang 6, remove perl xml dependency.",6,[],https://github.com/kframework/c-semantics/pull/367,https://github.com/ehildenb,2,https://github.com/kframework/c-semantics/pull/367#issuecomment-457712489,,Jenkins: test this please,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,367,2019-01-23T21:20:45Z,2019-01-29T00:51:18Z,2019-04-29T18:51:58Z,CLOSED,False,135,355,11,https://github.com/chathhorn,"Fix for clang 6, remove perl xml dependency.",6,[],https://github.com/kframework/c-semantics/pull/367,https://github.com/ehildenb,3,https://github.com/kframework/c-semantics/pull/367#issuecomment-457716503,,Jenkins: test this please,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,367,2019-01-23T21:20:45Z,2019-01-29T00:51:18Z,2019-04-29T18:51:58Z,CLOSED,False,135,355,11,https://github.com/chathhorn,"Fix for clang 6, remove perl xml dependency.",6,[],https://github.com/kframework/c-semantics/pull/367,https://github.com/ehildenb,4,https://github.com/kframework/c-semantics/pull/367#issuecomment-457717123,,Jenkins: test this please,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,367,2019-01-23T21:20:45Z,2019-01-29T00:51:18Z,2019-04-29T18:51:58Z,CLOSED,False,135,355,11,https://github.com/chathhorn,"Fix for clang 6, remove perl xml dependency.",6,[],https://github.com/kframework/c-semantics/pull/367,https://github.com/chathhorn,5,https://github.com/kframework/c-semantics/pull/367#issuecomment-458362670,,Included in @ehildenb's PR.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,368,2019-01-25T23:09:15Z,2019-01-26T18:45:31Z,2019-01-26T18:45:51Z,CLOSED,False,210,355,13,https://github.com/ehildenb,Switch to Jenkinsfile based testing for new CI server,15,[],https://github.com/kframework/c-semantics/pull/368,https://github.com/ehildenb,1,https://github.com/kframework/c-semantics/pull/368,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,368,2019-01-25T23:09:15Z,2019-01-26T18:45:31Z,2019-01-26T18:45:51Z,CLOSED,False,210,355,13,https://github.com/ehildenb,Switch to Jenkinsfile based testing for new CI server,15,[],https://github.com/kframework/c-semantics/pull/368,https://github.com/ehildenb,2,https://github.com/kframework/c-semantics/pull/368#issuecomment-457855208,,Need to open new PR to appease the CI gods.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,369,2019-01-26T18:46:15Z,2019-02-02T03:17:42Z,2019-04-29T18:51:55Z,MERGED,True,326,667,272,https://github.com/ehildenb,CI based on Docker container and Jenkinsfile,35,[],https://github.com/kframework/c-semantics/pull/369,https://github.com/ehildenb,1,https://github.com/kframework/c-semantics/pull/369,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,369,2019-01-26T18:46:15Z,2019-02-02T03:17:42Z,2019-04-29T18:51:55Z,MERGED,True,326,667,272,https://github.com/ehildenb,CI based on Docker container and Jenkinsfile,35,[],https://github.com/kframework/c-semantics/pull/369,https://github.com/chathhorn,2,https://github.com/kframework/c-semantics/pull/369#issuecomment-459778072,,Jenkins: test this please,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,370,2019-02-02T02:33:05Z,2019-02-06T20:54:37Z,2019-02-06T20:54:37Z,MERGED,True,45,0,5,https://github.com/mickyabir,"Added aliases in namespace and class scope, and a test for both",4,[],https://github.com/kframework/c-semantics/pull/370,https://github.com/mickyabir,1,https://github.com/kframework/c-semantics/pull/370,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,370,2019-02-02T02:33:05Z,2019-02-06T20:54:37Z,2019-02-06T20:54:37Z,MERGED,True,45,0,5,https://github.com/mickyabir,"Added aliases in namespace and class scope, and a test for both",4,[],https://github.com/kframework/c-semantics/pull/370,https://github.com/chathhorn,2,https://github.com/kframework/c-semantics/pull/370#issuecomment-459930515,,Jenkins: test this please,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,372,2019-02-05T17:15:58Z,2019-02-06T13:04:36Z,2019-04-29T18:51:53Z,MERGED,True,6,0,2,https://github.com/chathhorn,Fatal errors option.,1,[],https://github.com/kframework/c-semantics/pull/372,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/372,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,373,2019-02-19T14:25:12Z,2019-05-01T15:34:57Z,2019-05-01T15:35:03Z,CLOSED,False,10,9,1,https://github.com/chathhorn,Minor build fixes,3,[],https://github.com/kframework/c-semantics/pull/373,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/373,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,374,2019-03-04T18:56:01Z,2019-03-18T21:08:22Z,2019-04-29T18:51:50Z,MERGED,True,126,52,27,https://github.com/chathhorn,Build updates,11,[],https://github.com/kframework/c-semantics/pull/374,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/374,"Fix for -fno-diagnostics-color flag (to remove color in expected test output).
Better support for parameterizing kcc with the native compiler based on the profile.
Support for gnuc __float128.","Fix for -fno-diagnostics-color flag (to remove color in expected test output).
Better support for parameterizing kcc with the native compiler based on the profile.
Support for gnuc __float128.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,374,2019-03-04T18:56:01Z,2019-03-18T21:08:22Z,2019-04-29T18:51:50Z,MERGED,True,126,52,27,https://github.com/chathhorn,Build updates,11,[],https://github.com/kframework/c-semantics/pull/374,https://github.com/chathhorn,2,https://github.com/kframework/c-semantics/pull/374#issuecomment-474077525,"Fix for -fno-diagnostics-color flag (to remove color in expected test output).
Better support for parameterizing kcc with the native compiler based on the profile.
Support for gnuc __float128.",@dwightguth please review,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,375,2019-03-12T12:20:38Z,2019-03-18T18:44:24Z,2019-03-18T18:44:26Z,MERGED,True,536,504,49,https://github.com/dwightguth,Remove overloaded types from C semantics,5,[],https://github.com/kframework/c-semantics/pull/375,https://github.com/dwightguth,1,https://github.com/kframework/c-semantics/pull/375,Will do C++ in a followup PR.,Will do C++ in a followup PR.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,376,2019-04-03T17:57:51Z,2019-05-07T13:34:36Z,2019-10-22T19:52:04Z,MERGED,True,37,15,5,https://github.com/chathhorn,Denso extends_tu_of attribute.,6,[],https://github.com/kframework/c-semantics/pull/376,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/376,Changes to support extensions to override static function definitions with the kcc_extends_tu_of attribute.,Changes to support extensions to override static function definitions with the kcc_extends_tu_of attribute.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,377,2019-04-05T20:04:18Z,2019-05-06T13:10:37Z,2019-10-22T19:52:18Z,MERGED,True,252,675,24,https://github.com/chathhorn,Clang type inference,8,[],https://github.com/kframework/c-semantics/pull/377,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/377,"Passes template instantiations & type of auto decls deduced by clang to the C++ translation semantics.
Removes template deduction and the CPPTypeExpr sort from the C++ semantics.","Passes template instantiations & type of auto decls deduced by clang to the C++ translation semantics.
Removes template deduction and the CPPTypeExpr sort from the C++ semantics.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,377,2019-04-05T20:04:18Z,2019-05-06T13:10:37Z,2019-10-22T19:52:18Z,MERGED,True,252,675,24,https://github.com/chathhorn,Clang type inference,8,[],https://github.com/kframework/c-semantics/pull/377,https://github.com/chathhorn,2,https://github.com/kframework/c-semantics/pull/377#issuecomment-488105724,"Passes template instantiations & type of auto decls deduced by clang to the C++ translation semantics.
Removes template deduction and the CPPTypeExpr sort from the C++ semantics.",@dwightguth please review when you get the chance.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,377,2019-04-05T20:04:18Z,2019-05-06T13:10:37Z,2019-10-22T19:52:18Z,MERGED,True,252,675,24,https://github.com/chathhorn,Clang type inference,8,[],https://github.com/kframework/c-semantics/pull/377,https://github.com/dwightguth,3,https://github.com/kframework/c-semantics/pull/377#issuecomment-488129589,"Passes template instantiations & type of auto decls deduced by clang to the C++ translation semantics.
Removes template deduction and the CPPTypeExpr sort from the C++ semantics.","I didn't look in depth at the changes to the semantics, so you should still get someone else to review, but this looks good from my perspective.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,377,2019-04-05T20:04:18Z,2019-05-06T13:10:37Z,2019-10-22T19:52:18Z,MERGED,True,252,675,24,https://github.com/chathhorn,Clang type inference,8,[],https://github.com/kframework/c-semantics/pull/377,https://github.com/chathhorn,4,https://github.com/kframework/c-semantics/pull/377#issuecomment-488160584,"Passes template instantiations & type of auto decls deduced by clang to the C++ translation semantics.
Removes template deduction and the CPPTypeExpr sort from the C++ semantics.",@h0nzZik please review when you get the chance.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,377,2019-04-05T20:04:18Z,2019-05-06T13:10:37Z,2019-10-22T19:52:18Z,MERGED,True,252,675,24,https://github.com/chathhorn,Clang type inference,8,[],https://github.com/kframework/c-semantics/pull/377,https://github.com/h0nzZik,5,https://github.com/kframework/c-semantics/pull/377#issuecomment-489574709,"Passes template instantiations & type of auto decls deduced by clang to the C++ translation semantics.
Removes template deduction and the CPPTypeExpr sort from the C++ semantics.",Do we want to remove all the code? What if we will want to have semantics for templates in the future?,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,378,2019-04-08T16:30:15Z,2019-05-17T18:37:02Z,2019-05-17T18:43:39Z,MERGED,True,536,541,67,https://github.com/dwightguth,Generate kore from c translation semantics,46,[],https://github.com/kframework/c-semantics/pull/378,https://github.com/dwightguth,1,https://github.com/kframework/c-semantics/pull/378,"Parses, compiles, emits kore, and validates the C translation semantics. Does not yet work with linking semantics, c++ translation semantics, or execution semantics. Does not yet successfully generate a decision tree.","Parses, compiles, emits kore, and validates the C translation semantics. Does not yet work with linking semantics, c++ translation semantics, or execution semantics. Does not yet successfully generate a decision tree.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,379,2019-04-18T10:43:02Z,2019-04-21T14:51:28Z,2019-04-21T14:51:28Z,MERGED,True,253,105,22,https://github.com/h0nzZik,Normalized references to standard documents. Added a tool for extraction.,4,[],https://github.com/kframework/c-semantics/pull/379,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/379,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,380,2019-04-22T19:15:05Z,2019-04-23T07:40:30Z,2019-04-29T18:51:39Z,MERGED,True,4,2,1,https://github.com/chathhorn,Allow kcc to link just native obj files,2,[],https://github.com/kframework/c-semantics/pull/380,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/380,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,381,2019-04-23T20:58:35Z,2019-04-24T10:01:50Z,2019-04-29T18:51:37Z,MERGED,True,2,0,1,https://github.com/chathhorn,Add lint production to OS semantics,1,[],https://github.com/kframework/c-semantics/pull/381,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/381,"So the open source version of kcc doesn't crash when given the ""-Wlint"" flag.","So the open source version of kcc doesn't crash when given the ""-Wlint"" flag.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,382,2019-04-25T12:22:59Z,2019-04-29T18:44:55Z,2019-04-29T18:44:55Z,CLOSED,False,381,10,11,https://github.com/h0nzZik,Implicit copy constructors,7,[],https://github.com/kframework/c-semantics/pull/382,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/382,Mostly extracted from runtimeverification/rv-match#894. The dead code will be used later by another PR.,Mostly extracted from runtimeverification/rv-match#894. The dead code will be used later by another PR.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,382,2019-04-25T12:22:59Z,2019-04-29T18:44:55Z,2019-04-29T18:44:55Z,CLOSED,False,381,10,11,https://github.com/h0nzZik,Implicit copy constructors,7,[],https://github.com/kframework/c-semantics/pull/382,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/382#issuecomment-487355322,Mostly extracted from runtimeverification/rv-match#894. The dead code will be used later by another PR.,Jenkins: test this please.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,383,2019-04-25T16:18:13Z,2019-04-25T17:19:08Z,2019-05-06T21:59:48Z,CLOSED,False,1,1,1,https://github.com/charala1,Updating submodules,1,[],https://github.com/kframework/c-semantics/pull/383,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/383,.build/k -> fe2f68169,.build/k -> fe2f68169,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,383,2019-04-25T16:18:13Z,2019-04-25T17:19:08Z,2019-05-06T21:59:48Z,CLOSED,False,1,1,1,https://github.com/charala1,Updating submodules,1,[],https://github.com/kframework/c-semantics/pull/383,https://github.com/charala1,2,https://github.com/kframework/c-semantics/pull/383#issuecomment-486762065,.build/k -> fe2f68169,Obsolete per 7b95695,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,384,2019-04-25T16:41:11Z,2019-04-25T17:18:13Z,2019-05-06T21:59:08Z,MERGED,True,1,1,1,https://github.com/charala1,Updating submodules (Dwight's commit),1,[],https://github.com/kframework/c-semantics/pull/384,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/384,.build/k -> 3a45a4f5d2ad2e2e002b6a7360732170fe82891d,.build/k -> 3a45a4f5d2ad2e2e002b6a7360732170fe82891d,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,385,2019-04-29T10:50:47Z,2019-04-29T18:44:38Z,2019-04-29T18:44:38Z,MERGED,True,382,9,10,https://github.com/h0nzZik,Implicit copy constructors (2),11,[],https://github.com/kframework/c-semantics/pull/385,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/385,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,386,2019-04-29T20:58:12Z,2019-05-07T16:04:54Z,2019-05-21T15:00:30Z,CLOSED,False,1,1,1,https://github.com/ehildenb,Update submodule dependencies,1,[],https://github.com/kframework/c-semantics/pull/386,https://github.com/ehildenb,1,https://github.com/kframework/c-semantics/pull/386,PR generated by './bin/update-deps',PR generated by './bin/update-deps',True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,387,2019-04-29T22:26:13Z,2019-04-30T09:25:43Z,2019-10-22T19:52:21Z,MERGED,True,7,7,2,https://github.com/chathhorn,Fix issue w/shared libs,3,[],https://github.com/kframework/c-semantics/pull/387,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/387,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,388,2019-04-30T10:36:11Z,,2019-04-30T10:36:25Z,OPEN,False,10,0,1,https://github.com/h0nzZik,show reference types,2,[],https://github.com/kframework/c-semantics/pull/388,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/388,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,389,2019-04-30T16:16:30Z,2019-04-30T17:39:18Z,2019-04-30T17:39:24Z,MERGED,True,9,382,10,https://github.com/chathhorn,"Revert ""Implicit copy constructors (2) (#385)""",1,[],https://github.com/kframework/c-semantics/pull/389,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/389,This reverts commit b0d88c5.,This reverts commit b0d88c5.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,390,2019-04-30T19:26:22Z,2019-05-01T16:22:49Z,2019-05-01T16:22:53Z,MERGED,True,0,6,1,https://github.com/chathhorn,Try re-enabling some tests for the OS CI job.,1,[],https://github.com/kframework/c-semantics/pull/390,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/390,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,392,2019-05-06T15:15:24Z,2019-05-06T21:56:34Z,2019-05-06T21:56:45Z,MERGED,True,0,113306,1455,https://github.com/charala1,Removed unused things under `tests/`,1,[],https://github.com/kframework/c-semantics/pull/392,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/392,"deleted:    Makefile
deleted:    adhoc/
deleted:    adhocTests.pl
deleted:    buildTests/
deleted:    cil/
deleted:    clight-tests-unit/
deleted:    csmith/
deleted:    dynamic/
deleted:    gcc-test/
deleted:    gcc-torture/
deleted:    integration/
deleted:    juliet/
deleted:    lcc-tests/
deleted:    llvm-regression/
deleted:    llvm-unit/
deleted:    memory-bench/
deleted:    native/
deleted:    nondet/
deleted:    runtest.pl
deleted:    shouldFail/
deleted:    shouldPass/
deleted:    static/
deleted:    undefined-tests-summary.ods
deleted:    unitTests/","deleted:    Makefile
deleted:    adhoc/
deleted:    adhocTests.pl
deleted:    buildTests/
deleted:    cil/
deleted:    clight-tests-unit/
deleted:    csmith/
deleted:    dynamic/
deleted:    gcc-test/
deleted:    gcc-torture/
deleted:    integration/
deleted:    juliet/
deleted:    lcc-tests/
deleted:    llvm-regression/
deleted:    llvm-unit/
deleted:    memory-bench/
deleted:    native/
deleted:    nondet/
deleted:    runtest.pl
deleted:    shouldFail/
deleted:    shouldPass/
deleted:    static/
deleted:    undefined-tests-summary.ods
deleted:    unitTests/",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,393,2019-05-06T22:10:34Z,2019-05-07T10:12:44Z,2019-05-07T11:45:55Z,MERGED,True,69,69,15,https://github.com/chathhorn,Rename C11*/CPP14* files.,1,[],https://github.com/kframework/c-semantics/pull/393,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/393,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,394,2019-05-09T15:10:18Z,2019-05-10T11:03:54Z,2019-05-10T11:03:55Z,CLOSED,False,10,6,2,https://github.com/h0nzZik,Remove bad rule,3,[],https://github.com/kframework/c-semantics/pull/394,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/394,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,394,2019-05-09T15:10:18Z,2019-05-10T11:03:54Z,2019-05-10T11:03:55Z,CLOSED,False,10,6,2,https://github.com/h0nzZik,Remove bad rule,3,[],https://github.com/kframework/c-semantics/pull/394,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/394#issuecomment-491250194,,Closed in favour of #397,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,395,2019-05-09T16:12:10Z,2019-05-09T20:29:05Z,2019-05-09T20:29:09Z,MERGED,True,43,27,10,https://github.com/chathhorn,Fix issue with escaping @ causing scanf to choke.,6,[],https://github.com/kframework/c-semantics/pull/395,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/395,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,396,2019-05-09T22:44:31Z,2019-05-10T05:40:48Z,2019-06-27T21:27:27Z,MERGED,True,14,14,1,https://github.com/chathhorn,Another escaping fix.,1,[],https://github.com/kframework/c-semantics/pull/396,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/396,"qprintable doesn't seem to behave the same as ""quote(printable())"".","qprintable doesn't seem to behave the same as ""quote(printable())"".",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,397,2019-05-10T08:26:53Z,2019-05-10T15:22:07Z,2019-05-10T15:22:07Z,MERGED,True,392,15,12,https://github.com/h0nzZik,Implicit Copy Constructors (again),2,[],https://github.com/kframework/c-semantics/pull/397,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/397,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,398,2019-05-10T21:29:05Z,2019-05-13T09:10:59Z,2019-06-27T21:27:25Z,MERGED,True,0,2,1,https://github.com/chathhorn,Remove stdio.h from a cpp test.,1,[],https://github.com/kframework/c-semantics/pull/398,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/398,The C++ semantics can't seem to handle the actual system stdio header right now and including the header here was unneeded and not what the test was intended to test.,The C++ semantics can't seem to handle the actual system stdio header right now and including the header here was unneeded and not what the test was intended to test.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,401,2019-05-13T17:10:07Z,2019-08-27T23:49:31Z,2019-08-27T23:49:31Z,CLOSED,False,112,112,899,https://github.com/charala1,Minas c to cc,8,[],https://github.com/kframework/c-semantics/pull/401,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/401,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,402,2019-05-14T12:22:45Z,2019-05-14T13:08:48Z,2019-05-14T13:08:48Z,MERGED,True,4,1,2,https://github.com/h0nzZik,Fix issue #400.,1,[],https://github.com/kframework/c-semantics/pull/402,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/402,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,403,2019-05-14T21:53:21Z,2019-05-15T14:38:56Z,2019-05-15T14:39:02Z,MERGED,True,9,0,2,https://github.com/dwightguth,new constexpr duration for automatic objects allocated during,1,[],https://github.com/kframework/c-semantics/pull/403,https://github.com/dwightguth,1,https://github.com/kframework/c-semantics/pull/403,translation,translation,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,405,2019-05-15T14:08:42Z,2019-05-21T17:46:08Z,2019-05-21T17:46:08Z,MERGED,True,144,31,7,https://github.com/h0nzZik,references - rvalue binding & refactoring,12,[],https://github.com/kframework/c-semantics/pull/405,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/405,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,406,2019-05-15T17:20:19Z,2019-05-17T16:29:07Z,2019-05-17T21:23:54Z,MERGED,True,53,60,8,https://github.com/chathhorn,Update the OS build.,1,[],https://github.com/kframework/c-semantics/pull/406,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/406,"Updates install instructions in INSTALL.md.
Cleans up Jenkinsfile and Makefile a bit.
Defaults kcc to use binaries from the k submodule instead of assuming they're accessible via the $PATH.","Updates install instructions in INSTALL.md.
Cleans up Jenkinsfile and Makefile a bit.
Defaults kcc to use binaries from the k submodule instead of assuming they're accessible via the $PATH.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,407,2019-05-16T17:35:51Z,2019-05-16T18:57:59Z,2019-05-16T21:59:10Z,MERGED,True,24,23,12,https://github.com/charala1,"Makefiles set KCC, KXX, CC and CXX only if not set",3,[],https://github.com/kframework/c-semantics/pull/407,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/407,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,407,2019-05-16T17:35:51Z,2019-05-16T18:57:59Z,2019-05-16T21:59:10Z,MERGED,True,24,23,12,https://github.com/charala1,"Makefiles set KCC, KXX, CC and CXX only if not set",3,[],https://github.com/kframework/c-semantics/pull/407,https://github.com/charala1,2,https://github.com/kframework/c-semantics/pull/407#issuecomment-493163096,,"Prevents these Makefiles from overriding externally-supplied values for KCC, KXX, CC and CXX.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,408,2019-05-16T20:23:03Z,2019-05-16T21:09:11Z,2019-05-16T21:09:15Z,MERGED,True,23,24,12,https://github.com/charala1,"Revert ""Makefiles set KCC, KXX, CC and CXX only if not set (#407)""",1,[],https://github.com/kframework/c-semantics/pull/408,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/408,This reverts commit 9302a3e.,This reverts commit 9302a3e.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,409,2019-05-17T17:12:30Z,2019-05-17T21:23:20Z,2019-05-17T21:23:24Z,MERGED,True,4,4,2,https://github.com/chathhorn,Prevent make causing k-configure-opam-dev run.,3,[],https://github.com/kframework/c-semantics/pull/409,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/409,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,410,2019-05-17T21:06:51Z,2019-05-18T08:27:11Z,2019-05-18T08:27:11Z,MERGED,True,275,105,8,https://github.com/dwightguth,remove EPRVal sort and add contexts that mention compile-time-evaluation,3,[],https://github.com/kframework/c-semantics/pull/410,https://github.com/dwightguth,1,https://github.com/kframework/c-semantics/pull/410,cell,cell,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,411,2019-05-20T09:51:19Z,2019-05-20T13:20:51Z,2019-05-20T13:20:52Z,CLOSED,False,51,12,4,https://github.com/h0nzZik,Cast to rvalue reference,4,[],https://github.com/kframework/c-semantics/pull/411,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/411,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,411,2019-05-20T09:51:19Z,2019-05-20T13:20:51Z,2019-05-20T13:20:52Z,CLOSED,False,51,12,4,https://github.com/h0nzZik,Cast to rvalue reference,4,[],https://github.com/kframework/c-semantics/pull/411,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/411#issuecomment-493984455,,Closed in favour of #405.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,412,2019-05-20T16:41:16Z,2019-05-22T19:13:14Z,2019-05-22T19:13:17Z,MERGED,True,760,745,48,https://github.com/dwightguth,Remove overloaded C++ types,15,[],https://github.com/kframework/c-semantics/pull/412,https://github.com/dwightguth,1,https://github.com/kframework/c-semantics/pull/412,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,414,2019-05-21T15:00:52Z,2019-05-21T15:56:33Z,2019-05-21T15:56:37Z,MERGED,True,1,1,1,https://github.com/ehildenb,Update submodule dependencies,1,[],https://github.com/kframework/c-semantics/pull/414,https://github.com/ehildenb,1,https://github.com/kframework/c-semantics/pull/414,PR generated by './update-deps/update-deps',PR generated by './update-deps/update-deps',True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,415,2019-05-21T21:35:55Z,2019-05-29T15:49:47Z,2019-05-29T15:49:52Z,MERGED,True,71,31,12,https://github.com/chathhorn,"DR 423, 481: semantics of generic and rval types.",3,[],https://github.com/kframework/c-semantics/pull/415,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/415,Fixes some issues raised by defect reports included in C18 related to the type of rvalue expressions (which can basically be observed now using _Generic).,Fixes some issues raised by defect reports included in C18 related to the type of rvalue expressions (which can basically be observed now using _Generic).,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,416,2019-05-22T21:42:07Z,2019-06-06T20:23:27Z,2019-06-06T20:23:38Z,CLOSED,False,77,37,1,https://github.com/charala1,Updated Makefile (variable recipe),12,[],https://github.com/kframework/c-semantics/pull/416,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/416,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,416,2019-05-22T21:42:07Z,2019-06-06T20:23:27Z,2019-06-06T20:23:38Z,CLOSED,False,77,37,1,https://github.com/charala1,Updated Makefile (variable recipe),12,[],https://github.com/kframework/c-semantics/pull/416,https://github.com/charala1,2,https://github.com/kframework/c-semantics/pull/416#issuecomment-499653092,,Obsolete as of #441 and #443,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,417,2019-05-23T14:08:04Z,2019-05-30T14:20:47Z,2019-05-30T14:20:50Z,MERGED,True,492,538,46,https://github.com/dwightguth,Remove a bunch of references to klabels in rules,18,[],https://github.com/kframework/c-semantics/pull/417,https://github.com/dwightguth,1,https://github.com/kframework/c-semantics/pull/417,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,418,2019-05-23T15:28:36Z,2019-05-24T11:28:42Z,2019-05-24T11:28:42Z,MERGED,True,1,2,2,https://github.com/h0nzZik,update cparser to newer version of ocaml,1,[],https://github.com/kframework/c-semantics/pull/418,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/418,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,419,2019-05-23T20:54:44Z,2019-05-24T18:43:47Z,2019-05-24T18:43:58Z,MERGED,True,49,14,2,https://github.com/charala1,Improved CI,2,[],https://github.com/kframework/c-semantics/pull/419,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/419,"opam configured in the dockerfile
separated build and test stages in the jenkinsfile","opam configured in the dockerfile
separated build and test stages in the jenkinsfile",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,419,2019-05-23T20:54:44Z,2019-05-24T18:43:47Z,2019-05-24T18:43:58Z,MERGED,True,49,14,2,https://github.com/charala1,Improved CI,2,[],https://github.com/kframework/c-semantics/pull/419,https://github.com/charala1,2,https://github.com/kframework/c-semantics/pull/419#issuecomment-495441987,"opam configured in the dockerfile
separated build and test stages in the jenkinsfile",Please allow me to edit the commit message before merging.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,420,2019-05-24T17:00:00Z,2019-05-24T18:45:28Z,2019-05-24T18:45:31Z,CLOSED,False,39,15,2,https://github.com/charala1,Benchmarking single-stage jenkinsfile,3,[],https://github.com/kframework/c-semantics/pull/420,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/420,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,420,2019-05-24T17:00:00Z,2019-05-24T18:45:28Z,2019-05-24T18:45:31Z,CLOSED,False,39,15,2,https://github.com/charala1,Benchmarking single-stage jenkinsfile,3,[],https://github.com/kframework/c-semantics/pull/420,https://github.com/charala1,2,https://github.com/kframework/c-semantics/pull/420#issuecomment-495750681,,This was only here to trigger CI for benchmarking purposes.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,422,2019-05-27T17:37:23Z,2019-05-28T16:04:12Z,2019-05-28T16:04:16Z,MERGED,True,50,25,2,https://github.com/charala1,K_BIN and improved CI,1,[],https://github.com/kframework/c-semantics/pull/422,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/422,"Building k in the docker image.


Makefile now assumes k has been
compiled.


Using K_BIN to access k artifacts.
Not necessarily under ./.build/k


Makefile: improved prerequisite checks.","Building k in the docker image.


Makefile now assumes k has been
compiled.


Using K_BIN to access k artifacts.
Not necessarily under ./.build/k


Makefile: improved prerequisite checks.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,422,2019-05-27T17:37:23Z,2019-05-28T16:04:12Z,2019-05-28T16:04:16Z,MERGED,True,50,25,2,https://github.com/charala1,K_BIN and improved CI,1,[],https://github.com/kframework/c-semantics/pull/422,https://github.com/charala1,2,https://github.com/kframework/c-semantics/pull/422#issuecomment-496580974,"Building k in the docker image.


Makefile now assumes k has been
compiled.


Using K_BIN to access k artifacts.
Not necessarily under ./.build/k


Makefile: improved prerequisite checks.","Looks fine. Could you please update the INSTALL.md at some point as well?

Sure. I'll open an issue as a reminder.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,423,2019-05-27T19:14:35Z,2019-05-28T18:42:14Z,2019-05-28T18:42:17Z,MERGED,True,131,50,2,https://github.com/charala1,Makefile improvements,1,[],https://github.com/kframework/c-semantics/pull/423,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/423,"Makefile improvements

Better variable expansion
Better path computations
Done away with $(shell pwd)
Code alignment
.PHONY targets
Order-only prerequisites

modified: Makefile and semantics/Makefile","Makefile improvements

Better variable expansion
Better path computations
Done away with $(shell pwd)
Code alignment
.PHONY targets
Order-only prerequisites

modified: Makefile and semantics/Makefile",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,426,2019-05-28T17:28:20Z,2019-05-28T18:08:08Z,2019-05-28T18:08:17Z,MERGED,True,24,28,1,https://github.com/charala1,Jenkinsfile: one agent,1,[],https://github.com/kframework/c-semantics/pull/426,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/426,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,427,2019-05-28T18:44:11Z,2019-06-28T16:04:59Z,2019-06-28T16:04:59Z,CLOSED,False,6,6,4,https://github.com/charala1,Moved the K submodule into the `deps` directory,4,[],https://github.com/kframework/c-semantics/pull/427,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/427,"modified:

Dockerfile
Makefile
.gitmodules
.build/k -> deps/k","modified:

Dockerfile
Makefile
.gitmodules
.build/k -> deps/k",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,427,2019-05-28T18:44:11Z,2019-06-28T16:04:59Z,2019-06-28T16:04:59Z,CLOSED,False,6,6,4,https://github.com/charala1,Moved the K submodule into the `deps` directory,4,[],https://github.com/kframework/c-semantics/pull/427,https://github.com/dwightguth,2,https://github.com/kframework/c-semantics/pull/427#issuecomment-496660386,"modified:

Dockerfile
Makefile
.gitmodules
.build/k -> deps/k",@ehildenb what do you think about this change? I tend to agree with Minas that it's better not to have dependency submodules in a hidden directory that also contains build outputs. But I don't want to make this change unless we commit to changing it consistently.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,427,2019-05-28T18:44:11Z,2019-06-28T16:04:59Z,2019-06-28T16:04:59Z,CLOSED,False,6,6,4,https://github.com/charala1,Moved the K submodule into the `deps` directory,4,[],https://github.com/kframework/c-semantics/pull/427,https://github.com/charala1,3,https://github.com/kframework/c-semantics/pull/427#issuecomment-496661548,"modified:

Dockerfile
Makefile
.gitmodules
.build/k -> deps/k","@ehildenb what do you think about this change? I tend to agree with Minas that it's better not to have dependency submodules in a hidden directory that also contains build outputs. But I don't want to make this change unless we commit to changing it consistently.

@dwightguth The c-semantics submodule is not in a hidden directory in rv-match, but the k back-ends are in hidden directories inside the k project folder. I agree this change should be propagated everywhere.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,427,2019-05-28T18:44:11Z,2019-06-28T16:04:59Z,2019-06-28T16:04:59Z,CLOSED,False,6,6,4,https://github.com/charala1,Moved the K submodule into the `deps` directory,4,[],https://github.com/kframework/c-semantics/pull/427,https://github.com/ehildenb,4,https://github.com/kframework/c-semantics/pull/427#issuecomment-496676719,"modified:

Dockerfile
Makefile
.gitmodules
.build/k -> deps/k","@dwightguth I'm not opposed to this change, but I don't think I'll make it for KEVM and KWasm unless there is a good quantitative argument about how it makes dev-work easier. I personally like limiting how many things are stored directly in the root of the repo because I like to show people the repo on GitHub during demos (so we get nice formatting), and I think it gets confusing to do that when there are lots of extra files.
I would be open to changing it to a non-hidden directory called deps if you like. I do not think it's worth the effort to do out-of-tree builds for our dependencies. For me doing builds in a file that is .gitignoreed counts as ""out-of-tree"".",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,427,2019-05-28T18:44:11Z,2019-06-28T16:04:59Z,2019-06-28T16:04:59Z,CLOSED,False,6,6,4,https://github.com/charala1,Moved the K submodule into the `deps` directory,4,[],https://github.com/kframework/c-semantics/pull/427,https://github.com/ehildenb,5,https://github.com/kframework/c-semantics/pull/427#issuecomment-496677060,"modified:

Dockerfile
Makefile
.gitmodules
.build/k -> deps/k","I am opposed to any solution which does builds outside the repository root directory though, because I am opposed to cluttering any other directories on the users system.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,427,2019-05-28T18:44:11Z,2019-06-28T16:04:59Z,2019-06-28T16:04:59Z,CLOSED,False,6,6,4,https://github.com/charala1,Moved the K submodule into the `deps` directory,4,[],https://github.com/kframework/c-semantics/pull/427,https://github.com/charala1,6,https://github.com/kframework/c-semantics/pull/427#issuecomment-496678434,"modified:

Dockerfile
Makefile
.gitmodules
.build/k -> deps/k","I am opposed to any solution which does builds outside the repository root directory though, because I am opposed to cluttering any other directories on the users system.

Just to clarify, I am opposing this too -- except as directed by the user. Much like autotools uses --prefix and/or the make PREFIX variable, or how using cmake entails cd some/dir && cmake /path/to/src && make.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,427,2019-05-28T18:44:11Z,2019-06-28T16:04:59Z,2019-06-28T16:04:59Z,CLOSED,False,6,6,4,https://github.com/charala1,Moved the K submodule into the `deps` directory,4,[],https://github.com/kframework/c-semantics/pull/427,https://github.com/dwightguth,7,https://github.com/kframework/c-semantics/pull/427#issuecomment-496701002,"modified:

Dockerfile
Makefile
.gitmodules
.build/k -> deps/k","If we're not going to change kevm, we should not change c-semantics. That said, I like the idea of dependency submodules living in a deps directory under the root better than them living under a .build directory. Is this something we can agree to propagate across all our semantics? I think it makes the repository significantly easier to explain if we separate build artifacts from source code in the directory structure, even if it adds an extra directory.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,427,2019-05-28T18:44:11Z,2019-06-28T16:04:59Z,2019-06-28T16:04:59Z,CLOSED,False,6,6,4,https://github.com/charala1,Moved the K submodule into the `deps` directory,4,[],https://github.com/kframework/c-semantics/pull/427,https://github.com/charala1,8,https://github.com/kframework/c-semantics/pull/427#issuecomment-496702630,"modified:

Dockerfile
Makefile
.gitmodules
.build/k -> deps/k","If we're not going to change kevm, we should not change c-semantics. That said, I like the idea of dependency submodules living in a deps directory under the root better than them living under a .build directory. Is this something we can agree to propagate across all our semantics? I think it makes the repository significantly easier to explain if we separate build artifacts from source code in the directory structure, even if it adds an extra directory.

I agree, placing things inside a new directory deps/ or external-deps/ or similar makes things much more obvious and clean.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,427,2019-05-28T18:44:11Z,2019-06-28T16:04:59Z,2019-06-28T16:04:59Z,CLOSED,False,6,6,4,https://github.com/charala1,Moved the K submodule into the `deps` directory,4,[],https://github.com/kframework/c-semantics/pull/427,https://github.com/ehildenb,9,https://github.com/kframework/c-semantics/pull/427#issuecomment-496973892,"modified:

Dockerfile
Makefile
.gitmodules
.build/k -> deps/k",@dwightguth I can agree to move dependencies to a deps directory and continue to do builds in the .build directory (or in a build directory).,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,428,2019-05-28T19:10:38Z,2019-06-06T23:03:59Z,2019-06-06T23:50:20Z,CLOSED,False,1,1,1,https://github.com/ehildenb,Update submodule dependencies,3,[],https://github.com/kframework/c-semantics/pull/428,https://github.com/ehildenb,1,https://github.com/kframework/c-semantics/pull/428,PR generated by './update-deps/update-deps',PR generated by './update-deps/update-deps',True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,428,2019-05-28T19:10:38Z,2019-06-06T23:03:59Z,2019-06-06T23:50:20Z,CLOSED,False,1,1,1,https://github.com/ehildenb,Update submodule dependencies,3,[],https://github.com/kframework/c-semantics/pull/428,https://github.com/charala1,2,https://github.com/kframework/c-semantics/pull/428#issuecomment-499699473,PR generated by './update-deps/update-deps',Obsolete as of #445,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,430,2019-05-29T10:37:54Z,2019-05-31T11:02:52Z,2019-05-31T11:02:52Z,MERGED,True,62,23,8,https://github.com/h0nzZik,Rvalue references,9,[],https://github.com/kframework/c-semantics/pull/430,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/430,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,430,2019-05-29T10:37:54Z,2019-05-31T11:02:52Z,2019-05-31T11:02:52Z,MERGED,True,62,23,8,https://github.com/h0nzZik,Rvalue references,9,[],https://github.com/kframework/c-semantics/pull/430,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/430#issuecomment-496952094,,Jenkins: test this please.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,433,2019-05-30T19:19:53Z,2019-05-31T19:59:56Z,2019-05-31T20:00:01Z,MERGED,True,129,81,5,https://github.com/charala1,clang-tools build refactoring,11,[],https://github.com/kframework/c-semantics/pull/433,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/433,"Fixes #429

out-of-source build for clang-tools
make clean removes clang-tools/build
Added build/ to clang-tools/.gitignore



Improved clang-tools/CMakeLists.txt.

Removed hard-coded library paths. Using
find_package instead.
Modernized other code.
Changed minimum version to 3.5
Removed the installation targets

they are not maintained/used





Removed some compiler warnings for clang-tools/*.cc.","Fixes #429

out-of-source build for clang-tools
make clean removes clang-tools/build
Added build/ to clang-tools/.gitignore



Improved clang-tools/CMakeLists.txt.

Removed hard-coded library paths. Using
find_package instead.
Modernized other code.
Changed minimum version to 3.5
Removed the installation targets

they are not maintained/used





Removed some compiler warnings for clang-tools/*.cc.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,435,2019-05-31T14:36:08Z,2019-06-05T10:43:30Z,2019-06-05T10:43:30Z,MERGED,True,1,0,1,https://github.com/h0nzZik,sizeof(reference),2,[],https://github.com/kframework/c-semantics/pull/435,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/435,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,436,2019-05-31T15:58:15Z,2019-05-31T17:14:42Z,2019-05-31T17:14:44Z,MERGED,True,1,1,1,https://github.com/dwightguth,fix reval bug in generic,1,[],https://github.com/kframework/c-semantics/pull/436,https://github.com/dwightguth,1,https://github.com/kframework/c-semantics/pull/436,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,437,2019-05-31T20:08:20Z,2019-06-05T03:48:55Z,2019-06-05T03:49:07Z,CLOSED,False,6,10,2,https://github.com/charala1,Makefile: removed .SECONDEXPANSION,5,[],https://github.com/kframework/c-semantics/pull/437,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/437,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,437,2019-05-31T20:08:20Z,2019-06-05T03:48:55Z,2019-06-05T03:49:07Z,CLOSED,False,6,10,2,https://github.com/charala1,Makefile: removed .SECONDEXPANSION,5,[],https://github.com/kframework/c-semantics/pull/437,https://github.com/charala1,2,https://github.com/kframework/c-semantics/pull/437#issuecomment-498928311,,Relevant goals achieved in #441,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,439,2019-06-03T15:22:24Z,2019-06-06T21:28:48Z,2019-06-06T21:28:48Z,MERGED,True,186,173,20,https://github.com/dwightguth,Misc fixes for linking semantics on llvm backend,10,[],https://github.com/kframework/c-semantics/pull/439,https://github.com/dwightguth,1,https://github.com/kframework/c-semantics/pull/439,"Includes:

fix for missing hook
fix for initial configuration depending on entire configuration
fix for ARRAY
fix for anywhere rules
misc parsing issues","Includes:

fix for missing hook
fix for initial configuration depending on entire configuration
fix for ARRAY
fix for anywhere rules
misc parsing issues",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,440,2019-06-03T15:40:17Z,2019-06-04T18:15:58Z,2019-06-04T18:16:05Z,MERGED,True,1,1,1,https://github.com/ehildenb,Update submodule dependencies,1,[],https://github.com/kframework/c-semantics/pull/440,https://github.com/ehildenb,1,https://github.com/kframework/c-semantics/pull/440,PR generated by './update-deps/update-deps',PR generated by './update-deps/update-deps',True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,441,2019-06-04T01:52:19Z,2019-06-06T16:52:44Z,2019-06-06T16:52:52Z,MERGED,True,291,215,7,https://github.com/charala1,Minas makefiles p1,75,[],https://github.com/kframework/c-semantics/pull/441,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/441,"Fixes #425
Fixes #438
Parameterized output directory","Fixes #425
Fixes #438
Parameterized output directory",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,443,2019-06-06T17:10:18Z,2019-06-06T18:09:44Z,2019-06-06T18:09:49Z,MERGED,True,6,3,2,https://github.com/charala1,Faster Build and Cleanup part 2,3,[],https://github.com/kframework/c-semantics/pull/443,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/443,"Makefile: KOMPILE_FLAGS take environment into account


Jenkinsfile: simpler check for the clean target","Makefile: KOMPILE_FLAGS take environment into account


Jenkinsfile: simpler check for the clean target",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,445,2019-06-06T19:58:30Z,2019-06-06T23:03:48Z,2019-06-06T23:07:19Z,MERGED,True,1,1,1,https://github.com/charala1,Updated k submodule,1,[],https://github.com/kframework/c-semantics/pull/445,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/445,.build/k -> 8d8c20b767f3ecda67a1e72503140143d1404891,.build/k -> 8d8c20b767f3ecda67a1e72503140143d1404891,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,446,2019-06-06T23:15:50Z,2019-06-11T20:29:20Z,2019-06-28T16:05:25Z,CLOSED,False,41,30,2,https://github.com/charala1,Faster Build and Cleanup part 3,6,[],https://github.com/kframework/c-semantics/pull/446,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/446,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,446,2019-06-06T23:15:50Z,2019-06-11T20:29:20Z,2019-06-28T16:05:25Z,CLOSED,False,41,30,2,https://github.com/charala1,Faster Build and Cleanup part 3,6,[],https://github.com/kframework/c-semantics/pull/446,https://github.com/charala1,2,https://github.com/kframework/c-semantics/pull/446#issuecomment-501010418,,Obsolete by #462,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,448,2019-06-07T12:38:42Z,2019-06-12T12:28:42Z,2019-06-12T12:28:42Z,MERGED,True,50,8,9,https://github.com/h0nzZik,address of reference,10,[],https://github.com/kframework/c-semantics/pull/448,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/448,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,449,2019-06-07T17:18:20Z,2019-06-07T20:15:22Z,2019-06-08T10:09:48Z,MERGED,True,11,16,6,https://github.com/dwightguth,More misc fixes for llvm backend,4,[],https://github.com/kframework/c-semantics/pull/449,https://github.com/dwightguth,1,https://github.com/kframework/c-semantics/pull/449,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,449,2019-06-07T17:18:20Z,2019-06-07T20:15:22Z,2019-06-08T10:09:48Z,MERGED,True,11,16,6,https://github.com/dwightguth,More misc fixes for llvm backend,4,[],https://github.com/kframework/c-semantics/pull/449,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/449#issuecomment-500112563,,@dwightguth What does priority mean?,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,450,2019-06-07T19:13:42Z,2019-06-07T21:08:21Z,2019-06-07T21:08:26Z,MERGED,True,1,1,1,https://github.com/dwightguth,remove circular dependency,2,[],https://github.com/kframework/c-semantics/pull/450,https://github.com/dwightguth,1,https://github.com/kframework/c-semantics/pull/450,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,451,2019-06-07T19:57:05Z,2019-06-10T17:10:02Z,2019-06-10T17:10:06Z,MERGED,True,18,6,1,https://github.com/chathhorn,Prevent error recovery translating std libs,5,[],https://github.com/kframework/c-semantics/pull/451,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/451,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,451,2019-06-07T19:57:05Z,2019-06-10T17:10:02Z,2019-06-10T17:10:06Z,MERGED,True,18,6,1,https://github.com/chathhorn,Prevent error recovery translating std libs,5,[],https://github.com/kframework/c-semantics/pull/451,https://github.com/chathhorn,2,https://github.com/kframework/c-semantics/pull/451#issuecomment-500041585,,@charala1 please review when you get the chance.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,453,2019-06-10T14:45:13Z,2019-06-18T22:19:35Z,2019-06-18T22:19:38Z,MERGED,True,782,1088,14,https://github.com/chathhorn,kore parser,18,[],https://github.com/kframework/c-semantics/pull/453,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/453,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,453,2019-06-10T14:45:13Z,2019-06-18T22:19:35Z,2019-06-18T22:19:38Z,MERGED,True,782,1088,14,https://github.com/chathhorn,kore parser,18,[],https://github.com/kframework/c-semantics/pull/453,https://github.com/dwightguth,2,https://github.com/kframework/c-semantics/pull/453#issuecomment-503268547,,"with the bug fixes I added, this now looks good to me. @chathhorn if my changes look good, let me know and I will approve.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,454,2019-06-10T15:06:09Z,2019-06-11T12:36:14Z,2019-06-11T12:36:18Z,CLOSED,False,160,233,19,https://github.com/dwightguth,remove TypeMap functionality from C semantics,1,[],https://github.com/kframework/c-semantics/pull/454,https://github.com/dwightguth,1,https://github.com/kframework/c-semantics/pull/454,we utilize the ability to match map keys on function applications to bypass the need for this special logic.,we utilize the ability to match map keys on function applications to bypass the need for this special logic.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,454,2019-06-10T15:06:09Z,2019-06-11T12:36:14Z,2019-06-11T12:36:18Z,CLOSED,False,160,233,19,https://github.com/dwightguth,remove TypeMap functionality from C semantics,1,[],https://github.com/kframework/c-semantics/pull/454,https://github.com/dwightguth,2,https://github.com/kframework/c-semantics/pull/454#issuecomment-500821715,we utilize the ability to match map keys on function applications to bypass the need for this special logic.,Closing. I'll reopen this one later.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,455,2019-06-10T15:34:30Z,2019-06-10T16:29:36Z,2019-06-10T16:29:39Z,MERGED,True,7,6,1,https://github.com/charala1,Makefile: moved .SECONDEXPANSION,2,[],https://github.com/kframework/c-semantics/pull/455,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/455,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,456,2019-06-10T15:54:17Z,2019-06-10T15:57:21Z,2019-06-10T15:57:25Z,MERGED,True,8,2,1,https://github.com/charala1,Makefile: code alignment,1,[],https://github.com/kframework/c-semantics/pull/456,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/456,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,457,2019-06-10T16:03:08Z,2019-06-10T16:04:12Z,2019-06-10T16:04:15Z,MERGED,True,10,4,1,https://github.com/charala1,Makefile: code alignment,1,[],https://github.com/kframework/c-semantics/pull/457,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/457,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,458,2019-06-10T17:37:11Z,2019-06-10T18:50:28Z,2019-06-10T18:50:31Z,MERGED,True,21,2,2,https://github.com/charala1,Makefile: target `profile-parsing-rules`,1,[],https://github.com/kframework/c-semantics/pull/458,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/458,"Makefile: fixed spelling error in comments


.gitignore: dist -> dist/","Makefile: fixed spelling error in comments


.gitignore: dist -> dist/",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,459,2019-06-10T20:39:41Z,2019-06-11T16:58:30Z,2019-06-11T16:58:33Z,MERGED,True,133,103,12,https://github.com/dwightguth,Remove last of explicit klabels,5,[],https://github.com/kframework/c-semantics/pull/459,https://github.com/dwightguth,1,https://github.com/kframework/c-semantics/pull/459,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,460,2019-06-11T16:11:56Z,2019-06-11T20:29:52Z,2019-06-11T21:04:56Z,CLOSED,False,1,1,1,https://github.com/ehildenb,Update submodule dependencies,1,[],https://github.com/kframework/c-semantics/pull/460,https://github.com/ehildenb,1,https://github.com/kframework/c-semantics/pull/460,PR generated by './update-deps/update-deps',PR generated by './update-deps/update-deps',True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,461,2019-06-11T17:19:15Z,2019-06-11T19:10:34Z,2019-06-11T19:10:34Z,MERGED,True,14,12,8,https://github.com/dwightguth,Final misc fixes to link semantics on llvm backend,3,[],https://github.com/kframework/c-semantics/pull/461,https://github.com/dwightguth,1,https://github.com/kframework/c-semantics/pull/461,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,462,2019-06-11T17:26:49Z,2019-06-11T20:59:55Z,2019-06-11T20:59:58Z,MERGED,True,34,32,4,https://github.com/charala1,Makefile handling of environment variables,7,[],https://github.com/kframework/c-semantics/pull/462,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/462,"Respect environment variables:

KOMPILE_FLAGS
KDEP_FLAGS
K_INCLUDE_PATH (colon-separated list)
K_OPTS","Respect environment variables:

KOMPILE_FLAGS
KDEP_FLAGS
K_INCLUDE_PATH (colon-separated list)
K_OPTS",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,463,2019-06-11T21:35:27Z,2019-06-11T22:41:08Z,2019-06-11T22:41:11Z,MERGED,True,15,2,1,https://github.com/charala1,Faster Build and Cleanup part 3,2,[],https://github.com/kframework/c-semantics/pull/463,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/463,"Respect CFLAGS, CXXFLAGS etc.","Respect CFLAGS, CXXFLAGS etc.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,464,2019-06-11T23:46:20Z,2019-06-14T20:03:29Z,2019-06-14T20:03:37Z,MERGED,True,24,6,2,https://github.com/charala1,CI: produce and archive timelogs.csv,7,[],https://github.com/kframework/c-semantics/pull/464,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/464,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,466,2019-06-12T17:24:50Z,2019-06-13T17:23:43Z,2019-06-13T17:23:46Z,MERGED,True,41,41,1,https://github.com/charala1,Faster Build and Cleanup part 4,1,[],https://github.com/kframework/c-semantics/pull/466,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/466,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,467,2019-06-13T01:31:20Z,2019-06-17T16:54:04Z,2019-06-17T16:54:08Z,MERGED,True,281,331,22,https://github.com/chathhorn,C semantics changes for kore parser output,5,[],https://github.com/kframework/c-semantics/pull/467,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/467,Removes/fixes some sorts and cleans up the AST slightly.,Removes/fixes some sorts and cleans up the AST slightly.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,468,2019-06-13T15:12:12Z,2019-06-17T09:54:32Z,2019-06-17T09:54:32Z,CLOSED,False,124,45,5,https://github.com/h0nzZik,[draft] Overloading refactor,6,[],https://github.com/kframework/c-semantics/pull/468,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/468,Move computation related to overloading from functions to the K cell.,Move computation related to overloading from functions to the K cell.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,469,2019-06-13T22:13:26Z,2019-06-28T16:09:35Z,2019-06-28T16:09:36Z,CLOSED,False,18,8,2,https://github.com/charala1,Remove duplicate arguments to kompile,5,[],https://github.com/kframework/c-semantics/pull/469,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/469,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,469,2019-06-13T22:13:26Z,2019-06-28T16:09:35Z,2019-06-28T16:09:36Z,CLOSED,False,18,8,2,https://github.com/charala1,Remove duplicate arguments to kompile,5,[],https://github.com/kframework/c-semantics/pull/469,https://github.com/charala1,2,https://github.com/kframework/c-semantics/pull/469#issuecomment-502148110,,"Some make targets need to append arguments to what’s already in the
variable, and doing this check at the calling sites would lead to a huge
mess.

This PR is a temporary measure, and I am having second thoughts about it. I
think I should close this and open a PR with `k` instead.
…
On Fri, Jun 14, 2019 at 09:31 Chris Hathhorn ***@***.***> wrote:
 ***@***.**** commented on this pull request.
 ------------------------------

 In scripts/kompile-wrapper
 <#469 (comment)>
 :

 > @@ -0,0 +1,11 @@
 +#!/bin/sh
 +
 +# Remove optimization flags.
 +SANITIZED_ARGS=""$(echo ""$@"" | perl -pe 's/\-O.\s*//g')""
 +
 +# Append optimization flags, at most once each.
 +echo ""$@"" | grep --quiet '\-O2' && SANITIZED_ARGS=""${SANITIZED_ARGS} -O2""
 +echo ""$@"" | grep --quiet '\-O3' && SANITIZED_ARGS=""${SANITIZED_ARGS} -O3""
 +echo ""$@"" | grep --quiet '\-Og' && SANITIZED_ARGS=""${SANITIZED_ARGS} -Og""
 +
 +""$(dirname ""${0}"")/k/bin/kompile"" ${SANITIZED_ARGS}

 This kinda seems like overkill to me -- can't we just avoid passing
 duplicate arguments?

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#469?email_source=notifications&email_token=ACJYIFF5SHDQVYMWDVBATILP2OTRTA5CNFSM4HYAIA2KYY3PNVWWK3TUL52HS4DFWFIHK3DMKJSXC5LFON2FEZLWNFSXPKTDN5WW2ZLOORPWSZGOB3S4DMI#pullrequestreview-249938353>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ACJYIFFA2AI2WJ2ONCW2ZQ3P2OTRTANCNFSM4HYAIA2A>
 .",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,469,2019-06-13T22:13:26Z,2019-06-28T16:09:35Z,2019-06-28T16:09:36Z,CLOSED,False,18,8,2,https://github.com/charala1,Remove duplicate arguments to kompile,5,[],https://github.com/kframework/c-semantics/pull/469,https://github.com/chathhorn,3,https://github.com/kframework/c-semantics/pull/469#issuecomment-502149647,,Another option might be a separte KOMPILE_OPT_LEVEL variable that can be overridden instead of appended to.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,469,2019-06-13T22:13:26Z,2019-06-28T16:09:35Z,2019-06-28T16:09:36Z,CLOSED,False,18,8,2,https://github.com/charala1,Remove duplicate arguments to kompile,5,[],https://github.com/kframework/c-semantics/pull/469,https://github.com/charala1,4,https://github.com/kframework/c-semantics/pull/469#issuecomment-502153816,,"How would we avoid an option appearing in both `KOMPILE_OPT_LEVEL` and
`KOMPILE_FLAGS`?
…
On Fri, Jun 14, 2019 at 10:18 Chris Hathhorn ***@***.***> wrote:
 Another option might be a separte KOMPILE_OPT_LEVEL variable that can be
 overridden instead of appended to.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#469?email_source=notifications&email_token=ACJYIFB4NYOTMGXP3XEBGTLP2OZDBA5CNFSM4HYAIA2KYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODXXDEDY#issuecomment-502149647>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ACJYIFAMNUEPE3QAGW4QSITP2OZDBANCNFSM4HYAIA2A>
 .",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,469,2019-06-13T22:13:26Z,2019-06-28T16:09:35Z,2019-06-28T16:09:36Z,CLOSED,False,18,8,2,https://github.com/charala1,Remove duplicate arguments to kompile,5,[],https://github.com/kframework/c-semantics/pull/469,https://github.com/chathhorn,5,https://github.com/kframework/c-semantics/pull/469#issuecomment-502156896,,I guess by not ever doing that? I don't see why we have to worry about that case.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,469,2019-06-13T22:13:26Z,2019-06-28T16:09:35Z,2019-06-28T16:09:36Z,CLOSED,False,18,8,2,https://github.com/charala1,Remove duplicate arguments to kompile,5,[],https://github.com/kframework/c-semantics/pull/469,https://github.com/charala1,6,https://github.com/kframework/c-semantics/pull/469#issuecomment-502166968,,"Because `make` is not supposed to ignore user-supplied flags unless it's
absolutely necessary. Think `CFLAGS=-g make`...
…
On Fri, Jun 14, 2019 at 10:37 AM Chris Hathhorn ***@***.***> wrote:
 I guess by not ever doing that? I don't see why we have to worry about
 that case.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#469?email_source=notifications&email_token=ACJYIFHPLCDJU5VYPWRB5NLP2O3IRA5CNFSM4HYAIA2KYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODXXE4YA#issuecomment-502156896>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ACJYIFG4WGBG6LZ2H7C3XBDP2O3IRANCNFSM4HYAIA2A>
 .",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,469,2019-06-13T22:13:26Z,2019-06-28T16:09:35Z,2019-06-28T16:09:36Z,CLOSED,False,18,8,2,https://github.com/charala1,Remove duplicate arguments to kompile,5,[],https://github.com/kframework/c-semantics/pull/469,https://github.com/chathhorn,7,https://github.com/kframework/c-semantics/pull/469#issuecomment-502177506,,"Unless I'm mistaken, I really don't think we need to support anything other than changing the optimization level, though.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,469,2019-06-13T22:13:26Z,2019-06-28T16:09:35Z,2019-06-28T16:09:36Z,CLOSED,False,18,8,2,https://github.com/charala1,Remove duplicate arguments to kompile,5,[],https://github.com/kframework/c-semantics/pull/469,https://github.com/charala1,8,https://github.com/kframework/c-semantics/pull/469#issuecomment-502189024,,"Unless I'm mistaken, I really don't think we need to support anything other than changing the optimization level, though.

The actual solution to this problem would come from kompile not crashing when it sees duplicate flags. Much like gcc -g -g -g source.cc doesn't crash...",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,470,2019-06-14T21:01:11Z,2019-07-03T22:05:16Z,2019-07-03T22:05:16Z,MERGED,True,242,199,37,https://github.com/dwightguth,remove calls to #configuration,17,[],https://github.com/kframework/c-semantics/pull/470,https://github.com/dwightguth,1,https://github.com/kframework/c-semantics/pull/470,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,471,2019-06-15T03:37:30Z,2019-06-17T14:39:05Z,2019-06-24T00:30:25Z,MERGED,True,1,1,1,https://github.com/ehildenb,Update submodule dependencies,1,[],https://github.com/kframework/c-semantics/pull/471,https://github.com/ehildenb,1,https://github.com/kframework/c-semantics/pull/471,PR generated by './update-deps/update-deps',PR generated by './update-deps/update-deps',True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,472,2019-06-17T09:54:59Z,2019-06-19T09:29:29Z,2019-06-19T09:29:29Z,CLOSED,False,110,45,2,https://github.com/h0nzZik,Refactor overloading,7,[],https://github.com/kframework/c-semantics/pull/472,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/472,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,472,2019-06-17T09:54:59Z,2019-06-19T09:29:29Z,2019-06-19T09:29:29Z,CLOSED,False,110,45,2,https://github.com/h0nzZik,Refactor overloading,7,[],https://github.com/kframework/c-semantics/pull/472,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/472#issuecomment-503483322,,Subsumed by #479.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,473,2019-06-17T17:05:52Z,2019-06-21T20:30:09Z,2019-06-28T16:06:12Z,CLOSED,False,1,0,2,https://github.com/charala1,deleted:    tests/unit-fail-compilation/kcc_config,2,[],https://github.com/kframework/c-semantics/pull/473,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/473,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,473,2019-06-17T17:05:52Z,2019-06-21T20:30:09Z,2019-06-28T16:06:12Z,CLOSED,False,1,0,2,https://github.com/charala1,deleted:    tests/unit-fail-compilation/kcc_config,2,[],https://github.com/kframework/c-semantics/pull/473,https://github.com/dwightguth,2,https://github.com/kframework/c-semantics/pull/473#issuecomment-502773621,,can we put files with this name in .gitignore too?,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,473,2019-06-17T17:05:52Z,2019-06-21T20:30:09Z,2019-06-28T16:06:12Z,CLOSED,False,1,0,2,https://github.com/charala1,deleted:    tests/unit-fail-compilation/kcc_config,2,[],https://github.com/kframework/c-semantics/pull/473,https://github.com/charala1,3,https://github.com/kframework/c-semantics/pull/473#issuecomment-502778483,,"Done!
…
On Mon, Jun 17, 2019 at 12:18 PM dwightguth ***@***.***> wrote:
 can we put files with this name in .gitignore too?

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#473?email_source=notifications&email_token=ACJYIFBAXJ7EPEYWLPYN6S3P27BNDA5CNFSM4HYYSFKKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODX33O5I#issuecomment-502773621>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ACJYIFFAVME2F42BXFQEP33P27BNDANCNFSM4HYYSFKA>
 .",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,473,2019-06-17T17:05:52Z,2019-06-21T20:30:09Z,2019-06-28T16:06:12Z,CLOSED,False,1,0,2,https://github.com/charala1,deleted:    tests/unit-fail-compilation/kcc_config,2,[],https://github.com/kframework/c-semantics/pull/473,https://github.com/chathhorn,4,https://github.com/kframework/c-semantics/pull/473#issuecomment-502783315,,"This was added to prevent differences in error messages depending on whether that file was produced or not. It might not be needed anymore because I think we're chopping that line now anyway, but please verify locally -- these tests are run on rv-match, not in the c-sem pr job.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,473,2019-06-17T17:05:52Z,2019-06-21T20:30:09Z,2019-06-28T16:06:12Z,CLOSED,False,1,0,2,https://github.com/charala1,deleted:    tests/unit-fail-compilation/kcc_config,2,[],https://github.com/kframework/c-semantics/pull/473,https://github.com/charala1,5,https://github.com/kframework/c-semantics/pull/473#issuecomment-502786774,,"This was added to prevent differences in error messages depending on whether that file was produced or not. It might not be needed anymore because I think we're chopping that line now anyway, but please verify locally -- these tests are run on rv-match, not in the c-sem pr job.

@chathhorn what should I verify then? That the file is not produced, or something else?",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,473,2019-06-17T17:05:52Z,2019-06-21T20:30:09Z,2019-06-28T16:06:12Z,CLOSED,False,1,0,2,https://github.com/charala1,deleted:    tests/unit-fail-compilation/kcc_config,2,[],https://github.com/kframework/c-semantics/pull/473,https://github.com/charala1,6,https://github.com/kframework/c-semantics/pull/473#issuecomment-504563100,,Closing in favor of issue #492,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,474,2019-06-17T18:41:00Z,2019-06-17T19:25:38Z,2019-06-17T19:25:42Z,MERGED,True,1,1,1,https://github.com/charala1,update submodules,1,[],https://github.com/kframework/c-semantics/pull/474,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/474,.build/k: d03b41876161017549d9ea2ebd62c9e1f952cdf1,.build/k: d03b41876161017549d9ea2ebd62c9e1f952cdf1,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,475,2019-06-17T20:11:54Z,2019-06-20T16:06:56Z,2019-06-20T16:06:59Z,MERGED,True,135,77,5,https://github.com/charala1,Improved the test makefiles,9,[],https://github.com/kframework/c-semantics/pull/475,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/475,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,476,2019-06-18T00:49:10Z,2019-06-18T17:04:01Z,2019-06-18T17:04:13Z,MERGED,True,4,6,1,https://github.com/charala1,Faster Build and Cleanup part 5,2,[],https://github.com/kframework/c-semantics/pull/476,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/476,"Makefile: bugfix: removed extraneous backslash
Makefile: build directly into output directory
(no distinct SEMANTICS_OUTPUT_DIR)","Makefile: bugfix: removed extraneous backslash
Makefile: build directly into output directory
(no distinct SEMANTICS_OUTPUT_DIR)",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,477,2019-06-18T15:12:00Z,2019-06-18T18:15:27Z,2019-06-18T18:15:32Z,MERGED,True,20,21,1,https://github.com/charala1,Faster Build and Cleanup part 6,3,[],https://github.com/kframework/c-semantics/pull/477,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/477,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,478,2019-06-18T21:08:19Z,2019-06-18T21:35:30Z,2019-06-18T21:35:33Z,MERGED,True,8,2,1,https://github.com/charala1,semantics/Makefile: regen makefile with `mktemp`,1,[],https://github.com/kframework/c-semantics/pull/478,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/478,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,479,2019-06-19T08:23:17Z,2019-07-03T17:45:40Z,2019-07-03T17:45:40Z,MERGED,True,354,129,2,https://github.com/h0nzZik,Refactor overloading #2,19,[],https://github.com/kframework/c-semantics/pull/479,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/479,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,481,2019-06-19T12:59:26Z,2019-06-20T12:45:21Z,2019-06-20T12:45:22Z,MERGED,True,34,14,4,https://github.com/h0nzZik,Fix bug #431,5,[],https://github.com/kframework/c-semantics/pull/481,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/481,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,484,2019-06-19T17:33:37Z,2019-06-25T17:18:37Z,2019-06-25T17:18:37Z,CLOSED,False,40,27,3,https://github.com/charala1,Using a custom logger for the build,1,[],https://github.com/kframework/c-semantics/pull/484,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/484,"Added scripts/build-logger.h
modified: Makefile
modified: semantics/Makefile","Added scripts/build-logger.h
modified: Makefile
modified: semantics/Makefile",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,485,2019-06-19T18:40:40Z,2019-06-21T16:43:06Z,2019-06-21T16:43:10Z,MERGED,True,159,107,17,https://github.com/chathhorn,Fix some unintended non-determinism.,8,[],https://github.com/kframework/c-semantics/pull/485,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/485,"removes some unintended non-determinism found via Traian's tool
enables more of the unit-pass tests on the OS semantics and fixes some issues turned up by that (significantly increasing the PR job time, but I think it's probably necessary for the short term at least)
other misc fixes that would cause failures in the Match CI job","removes some unintended non-determinism found via Traian's tool
enables more of the unit-pass tests on the OS semantics and fixes some issues turned up by that (significantly increasing the PR job time, but I think it's probably necessary for the short term at least)
other misc fixes that would cause failures in the Match CI job",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,485,2019-06-19T18:40:40Z,2019-06-21T16:43:06Z,2019-06-21T16:43:10Z,MERGED,True,159,107,17,https://github.com/chathhorn,Fix some unintended non-determinism.,8,[],https://github.com/kframework/c-semantics/pull/485,https://github.com/chathhorn,2,https://github.com/kframework/c-semantics/pull/485#issuecomment-504104310,"removes some unintended non-determinism found via Traian's tool
enables more of the unit-pass tests on the OS semantics and fixes some issues turned up by that (significantly increasing the PR job time, but I think it's probably necessary for the short term at least)
other misc fixes that would cause failures in the Match CI job",@dwightguth this is ready for real now when you get the chance.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,486,2019-06-19T22:07:58Z,2019-06-19T22:45:31Z,2019-06-19T22:45:36Z,MERGED,True,10,4,1,https://github.com/charala1,Account for the exit status of kdep,1,[],https://github.com/kframework/c-semantics/pull/486,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/486,modified: semantics/Makefile,modified: semantics/Makefile,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,488,2019-06-20T16:44:29Z,2019-06-20T17:30:17Z,2019-06-20T17:30:20Z,MERGED,True,43,18,2,https://github.com/charala1,Using flock when generating makefiles for inclusion,1,[],https://github.com/kframework/c-semantics/pull/488,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/488,"new file:   scripts/gen-makefile-atomically.sh
modified:   semantics/Makefile","new file:   scripts/gen-makefile-atomically.sh
modified:   semantics/Makefile",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,489,2019-06-20T17:43:29Z,2019-06-21T19:40:18Z,2019-06-21T19:40:21Z,MERGED,True,18,58,3,https://github.com/charala1,Removed unused make targets,2,[],https://github.com/kframework/c-semantics/pull/489,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/489,"Improved clean targets


Fix for default targets


modified:   Makefile


modified:   semantics/Makefile


new file:   tests/Makefile","Improved clean targets


Fix for default targets


modified:   Makefile


modified:   semantics/Makefile


new file:   tests/Makefile",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,490,2019-06-20T21:18:52Z,2019-06-20T22:34:46Z,2019-06-20T22:34:49Z,MERGED,True,28,16,2,https://github.com/charala1,Makefiles of examples and tests: $(KCC) instead of kcc,1,[],https://github.com/kframework/c-semantics/pull/490,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/490,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,493,2019-06-24T00:30:55Z,2019-06-28T00:30:28Z,2019-06-28T00:30:28Z,CLOSED,False,1,1,1,https://github.com/rv-jenkins,Update submodule dependencies,1,[],https://github.com/kframework/c-semantics/pull/493,https://github.com/rv-jenkins,1,https://github.com/kframework/c-semantics/pull/493,PR generated by './update-deps/update-deps',PR generated by './update-deps/update-deps',True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,494,2019-06-24T14:52:58Z,2019-07-02T11:28:38Z,2019-07-02T11:28:38Z,MERGED,True,3,1,1,https://github.com/h0nzZik,isReferenceRelated,6,[],https://github.com/kframework/c-semantics/pull/494,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/494,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,495,2019-06-24T19:05:58Z,2019-06-25T16:27:09Z,2019-06-25T16:27:15Z,MERGED,True,36,37,3,https://github.com/charala1,Fixes to atomic makefile generation,1,[],https://github.com/kframework/c-semantics/pull/495,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/495,"More generic script: scripts/gen-file-atomically.sh
modified: semantics/Makefile","More generic script: scripts/gen-file-atomically.sh
modified: semantics/Makefile",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,498,2019-06-25T16:24:39Z,2019-06-26T20:09:03Z,2019-06-26T20:09:07Z,CLOSED,False,54,107,13,https://github.com/chathhorn,More non-determinism,7,[],https://github.com/kframework/c-semantics/pull/498,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/498,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,499,2019-06-25T19:02:07Z,2019-06-26T15:56:26Z,2019-06-28T16:05:00Z,CLOSED,False,40,26,4,https://github.com/charala1,Using a custom logger for the build,2,[],https://github.com/kframework/c-semantics/pull/499,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/499,"Added scripts/build-logger.h
modified: Makefile
modified: semantics/Makefile","Added scripts/build-logger.h
modified: Makefile
modified: semantics/Makefile",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,499,2019-06-25T19:02:07Z,2019-06-26T15:56:26Z,2019-06-28T16:05:00Z,CLOSED,False,40,26,4,https://github.com/charala1,Using a custom logger for the build,2,[],https://github.com/kframework/c-semantics/pull/499,https://github.com/charala1,2,https://github.com/kframework/c-semantics/pull/499#issuecomment-505937075,"Added scripts/build-logger.h
modified: Makefile
modified: semantics/Makefile",Made part of #500,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,500,2019-06-25T19:41:42Z,2019-06-25T22:37:16Z,2019-06-25T22:37:19Z,MERGED,True,68,50,7,https://github.com/charala1,More Makefile improvements,7,[],https://github.com/kframework/c-semantics/pull/500,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/500,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,502,2019-06-26T17:07:47Z,2019-06-28T02:50:18Z,2019-06-28T02:50:35Z,MERGED,True,2,2,1,https://github.com/charala1,Makefile: small bugfix,1,[],https://github.com/kframework/c-semantics/pull/502,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/502,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,503,2019-06-26T20:09:42Z,2019-06-28T01:21:23Z,2019-06-28T01:21:30Z,MERGED,True,65,160,15,https://github.com/chathhorn,More non-determinism,10,[],https://github.com/kframework/c-semantics/pull/503,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/503,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,504,2019-06-28T00:30:52Z,2019-06-28T01:39:45Z,2019-06-29T00:30:27Z,CLOSED,False,1,1,1,https://github.com/rv-jenkins,Update submodule dependencies,1,[],https://github.com/kframework/c-semantics/pull/504,https://github.com/rv-jenkins,1,https://github.com/kframework/c-semantics/pull/504,PR generated by './update-deps/update-deps',PR generated by './update-deps/update-deps',True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,505,2019-06-28T04:22:19Z,2019-06-28T17:25:04Z,2019-06-28T17:25:09Z,MERGED,True,9,17,5,https://github.com/chathhorn,Fix unintended non-determinism (again),3,[],https://github.com/kframework/c-semantics/pull/505,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/505,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,506,2019-06-28T14:41:13Z,2019-06-28T15:52:25Z,2019-06-28T15:52:28Z,MERGED,True,21,11,1,https://github.com/charala1,Makefile: fixed pack target,1,[],https://github.com/kframework/c-semantics/pull/506,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/506,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,507,2019-06-28T16:17:56Z,2019-06-28T20:18:03Z,2019-06-28T20:18:06Z,MERGED,True,75,31,2,https://github.com/charala1,"Updated Dockerfile, Jenkinsfile",4,[],https://github.com/kframework/c-semantics/pull/507,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/507,"user has sudo privileges
local installation of perl packages
Dockerfile more similar to that of rv-match","user has sudo privileges
local installation of perl packages
Dockerfile more similar to that of rv-match",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,508,2019-06-28T23:44:28Z,2019-07-01T15:42:53Z,2019-07-01T15:42:58Z,MERGED,True,13,10,1,https://github.com/chathhorn,Fix returning from native function.,2,[],https://github.com/kframework/c-semantics/pull/508,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/508,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,509,2019-06-29T00:30:53Z,2019-06-29T01:47:58Z,2019-06-30T00:30:29Z,CLOSED,False,1,1,1,https://github.com/rv-jenkins,Update submodule dependencies,1,[],https://github.com/kframework/c-semantics/pull/509,https://github.com/rv-jenkins,1,https://github.com/kframework/c-semantics/pull/509,PR generated by './update-deps/update-deps',PR generated by './update-deps/update-deps',True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,510,2019-06-30T00:30:55Z,2019-06-30T14:27:23Z,2019-07-01T00:30:32Z,CLOSED,False,1,1,1,https://github.com/rv-jenkins,Update submodule dependencies,1,[],https://github.com/kframework/c-semantics/pull/510,https://github.com/rv-jenkins,1,https://github.com/kframework/c-semantics/pull/510,PR generated by './update-deps/update-deps',PR generated by './update-deps/update-deps',True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,511,2019-07-01T00:30:56Z,2019-07-01T00:59:52Z,2019-07-02T00:30:29Z,CLOSED,False,1,1,1,https://github.com/rv-jenkins,Update submodule dependencies,1,[],https://github.com/kframework/c-semantics/pull/511,https://github.com/rv-jenkins,1,https://github.com/kframework/c-semantics/pull/511,PR generated by './update-deps/update-deps',PR generated by './update-deps/update-deps',True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,513,2019-07-01T17:02:14Z,2019-07-01T18:33:30Z,2019-07-01T18:33:35Z,MERGED,True,4,0,1,https://github.com/chathhorn,Fix another issue on returning from native.,1,[],https://github.com/kframework/c-semantics/pull/513,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/513,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,514,2019-07-01T19:53:42Z,2019-07-01T21:08:31Z,2019-07-01T21:08:37Z,MERGED,True,5,6,1,https://github.com/chathhorn,Another fix for returning from native funs.,1,[],https://github.com/kframework/c-semantics/pull/514,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/514,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,515,2019-07-02T00:30:53Z,2019-07-03T00:30:35Z,2019-07-03T00:30:36Z,CLOSED,False,1,1,1,https://github.com/rv-jenkins,Update submodule dependencies,1,[],https://github.com/kframework/c-semantics/pull/515,https://github.com/rv-jenkins,1,https://github.com/kframework/c-semantics/pull/515,PR generated by './update-deps/update-deps',PR generated by './update-deps/update-deps',True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,516,2019-07-02T10:18:12Z,2019-07-03T12:21:13Z,2019-07-03T12:21:14Z,MERGED,True,30,4,4,https://github.com/h0nzZik,Fix #497,3,[],https://github.com/kframework/c-semantics/pull/516,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/516,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,517,2019-07-03T00:30:54Z,2019-07-03T04:54:28Z,2019-07-04T00:30:52Z,CLOSED,False,1,1,1,https://github.com/rv-jenkins,Update submodule dependencies,1,[],https://github.com/kframework/c-semantics/pull/517,https://github.com/rv-jenkins,1,https://github.com/kframework/c-semantics/pull/517,PR generated by './update-deps/update-deps',PR generated by './update-deps/update-deps',True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,518,2019-07-03T16:20:20Z,2019-07-29T09:45:30Z,2019-07-29T09:45:31Z,CLOSED,False,16,18,6,https://github.com/h0nzZik,BindReference in translation semantics,3,[],https://github.com/kframework/c-semantics/pull/518,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/518,Refactorings that will enable us to move parts of bindReference computations (temporary materialization for now and conversions in future) from execution semantics to translation semantics. Mainly removes a call to bindReference from execution semantics.,Refactorings that will enable us to move parts of bindReference computations (temporary materialization for now and conversions in future) from execution semantics to translation semantics. Mainly removes a call to bindReference from execution semantics.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,518,2019-07-03T16:20:20Z,2019-07-29T09:45:30Z,2019-07-29T09:45:31Z,CLOSED,False,16,18,6,https://github.com/h0nzZik,BindReference in translation semantics,3,[],https://github.com/kframework/c-semantics/pull/518,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/518#issuecomment-515923798,Refactorings that will enable us to move parts of bindReference computations (temporary materialization for now and conversions in future) from execution semantics to translation semantics. Mainly removes a call to bindReference from execution semantics.,Closed in favor of #522.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,519,2019-07-03T23:10:59Z,2019-08-13T19:13:17Z,2019-08-13T19:13:22Z,CLOSED,False,7,9,3,https://github.com/charala1,Dockerfile: upgrade jdk to v11,7,[],https://github.com/kframework/c-semantics/pull/519,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/519,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,519,2019-07-03T23:10:59Z,2019-08-13T19:13:17Z,2019-08-13T19:13:22Z,CLOSED,False,7,9,3,https://github.com/charala1,Dockerfile: upgrade jdk to v11,7,[],https://github.com/kframework/c-semantics/pull/519,https://github.com/charala1,2,https://github.com/kframework/c-semantics/pull/519#issuecomment-520969347,,Obsolete as of #554.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,520,2019-07-04T00:31:08Z,2019-07-05T00:30:31Z,2019-07-05T00:30:31Z,CLOSED,False,1,1,1,https://github.com/rv-jenkins,Update submodule dependencies,1,[],https://github.com/kframework/c-semantics/pull/520,https://github.com/rv-jenkins,1,https://github.com/kframework/c-semantics/pull/520,PR generated by './update-deps/update-deps',PR generated by './update-deps/update-deps',True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,521,2019-07-04T15:01:15Z,2019-07-05T14:11:46Z,2019-10-22T19:51:39Z,MERGED,True,11,2,3,https://github.com/chathhorn,kcc_local_static_of attribute,2,[],https://github.com/kframework/c-semantics/pull/521,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/521,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,522,2019-07-04T17:05:18Z,2019-07-30T17:01:01Z,2019-07-30T17:01:01Z,MERGED,True,191,171,16,https://github.com/h0nzZik,BindReference in translation semantics #2,5,[],https://github.com/kframework/c-semantics/pull/522,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/522,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,522,2019-07-04T17:05:18Z,2019-07-30T17:01:01Z,2019-07-30T17:01:01Z,MERGED,True,191,171,16,https://github.com/h0nzZik,BindReference in translation semantics #2,5,[],https://github.com/kframework/c-semantics/pull/522,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/522#issuecomment-508814835,,"I can reproduce it localy (using --reverse-rules). The left argument to bindReference is of non-reference type:
bindReference(
	lecpp(
		`_.___CPP-SYNTAX`(
			`*__CPP-SYNTAX`(`This`(.KList)),
			`no-template_CPP-SYNTAX`(.KList),
			`Name`(classId(`GlobalNamespace`(.KList),classSpecifier(`Struct`(.KList),`Identifier`(#token(""\""S\"""",""String"")),`.List{""_,__CPP-DYNAMIC-OTHER-SORTS""}`(.KList))),`Identifier`(#token(""\""b\"""",""String"")))),
		hasTrace(`ExecName`(classId(`GlobalNamespace`(.KList),classSpecifier(`Struct`(.KList),`Identifier`(#token(""\""S\"""",""String"")),`.List{""_,__CPP-DYNAMIC-OTHER-SORTS""}`(.KList))),`Identifier`(#token(""\""b\"""",""String"")))),

		tcpp(quals(`.Set`(.KList)),`.Set`(.KList),`int_CPP-TYPING-SYNTAX`(.KList))
	),

	lecpp(`_.___CPP-SYNTAX`(`*__CPP-SYNTAX`(`This`(.KList)),`no-template_CPP-SYNTAX`(.KList),`Name`(classId(`GlobalNamespace`(.KList),classSpecifier(`Struct`(.KList),`Identifier`(#token(""\""S\"""",""String"")),`.List{""_,__CPP-DYNAMIC-OTHER-SORTS""}`(.KList))),`Identifier`(#token(""\""a\"""",""String"")))),hasTrace(`ExecName`(`NoNNS`(.KList),`Identifier`(#token(""\""a\"""",""String"")))),tcpp(quals(`.Set`(.KList)),`.Set`(.KList),`int_CPP-TYPING-SYNTAX`(.KList))))~>
`#freezer#SemanticCastToK0_54`(.KList)

This happens because of these rules in dynamic.k:
rule le(E::Expr, Tr::Trace, cppRefType #as T::CPPType) => le(E, Tr, innerType(T))
rule xe(E::Expr, Tr::Trace, cppRefType #as T::CPPType) => xe(E, Tr, innerType(T))

Most likely, we need these rules, because le,xe, and pre of reference types are not KResults  - at least not in the translation semantics, see this rule:
rule isKResult(le(_, _, T::CPPType) #Or xe(_, _, T::CPPType) #Or pre(_, _, T::CPPType)) => notBool isCPPRefType(T)

But why we need that rule?",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,522,2019-07-04T17:05:18Z,2019-07-30T17:01:01Z,2019-07-30T17:01:01Z,MERGED,True,191,171,16,https://github.com/h0nzZik,BindReference in translation semantics #2,5,[],https://github.com/kframework/c-semantics/pull/522,https://github.com/h0nzZik,3,https://github.com/kframework/c-semantics/pull/522#issuecomment-515043507,,"I still have problems binding a reference to temporary. The only support for temporaries is here in execution semantics -- temp(...).
The standard says:

12.2/5 [...] The temporary to which the reference is bound or the temporary that is the complete object of a subobject to which the reference is bound persists for the lifetime of the reference except:
(5.1) — A temporary object bound to a reference parameter in a function call (5.2.2) persists until the completion of the full-expression containing the call.

Multiple cases may happen:

The reference have automatic storage duration.
The reference have static storage duration (e.g. it is a global or local static variable).
The reference is a function parameter.
The reference is bound to a subobject of a temporary object, e.g. a member of a class.

Currently, bindReference (in translation semantics) does not have any information about which case is currently happening. To move forward with this PR, I will first ignore the third and fourth case, as I believe we do not have any tests for those yet.
One option would be figureInit(temp(!I:Int, ...), ...). However, temp(...) only constructs non-static local objects (with automatic storage duration), which does not work for the test cases like:
const int &i = 42;

int main()
{
  // another variant
  //static const int &i = 42;
  if (i != 42)
    return 1;
}

which would keep the temporary object uninitialized.
Another option is:
NormalizedDecl(NoNNS(), #NoName(!I:Int), Identifier(""""), T, V2, Var(CopyInit()))
~>
bindReference'(V1, Name(NoNNS(), #NoName(!I:Int)))

which uses <curr-tr-scope> to create an unnamed variable with automatic or static storage duration. This works for the global-reference case, but not for static local one.
Also, this is an interesting corner case for binding reference to a temporary:
struct S {
    int const &t = 3;
};
// S s1; // fails in implicitly-defined default constructor
S s{4}; // ok

Also, I heard that C++17 changed some rules about temporaries to support guaranteed copy elision - does that affect reference binding?",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,522,2019-07-04T17:05:18Z,2019-07-30T17:01:01Z,2019-07-30T17:01:01Z,MERGED,True,191,171,16,https://github.com/h0nzZik,BindReference in translation semantics #2,5,[],https://github.com/kframework/c-semantics/pull/522,https://github.com/h0nzZik,4,https://github.com/kframework/c-semantics/pull/522#issuecomment-515462758,,"To create a temporary, bindReference may use DeclareObject from translation/decl/declarator.k. However, bindReference would need to know the duration (AutoStorage/StaticStorage) of the reference (or the complete object) that is being created/initialized. DeclareObject has this information. How do we transfer it down to bindReference?
One option is to add a new parameter to #figureInit, figureInit, aggInit, classAndUnionAggInit, classAggInit, arrayInit,  //maybe figureConstructorInit, figureConstructItem, figureConstruct.
listInit
Another option is to add a new cell containing the duration of the object being created.
Example:
struct S { int const &r; };
S s1[2] {3,4};
int main()
{
    S s2{4};
}",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,522,2019-07-04T17:05:18Z,2019-07-30T17:01:01Z,2019-07-30T17:01:01Z,MERGED,True,191,171,16,https://github.com/h0nzZik,BindReference in translation semantics #2,5,[],https://github.com/kframework/c-semantics/pull/522,https://github.com/h0nzZik,5,https://github.com/kframework/c-semantics/pull/522#issuecomment-516013020,,RV-Match test: runtimeverification/rv-match#1071,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,523,2019-07-05T00:30:49Z,2019-07-06T00:30:29Z,2019-07-06T00:30:29Z,CLOSED,False,1,1,1,https://github.com/rv-jenkins,Update submodule dependencies,1,[],https://github.com/kframework/c-semantics/pull/523,https://github.com/rv-jenkins,1,https://github.com/kframework/c-semantics/pull/523,PR generated by './update-deps/update-deps',PR generated by './update-deps/update-deps',True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,524,2019-07-06T00:30:50Z,2019-07-07T00:30:28Z,2019-07-07T00:30:28Z,CLOSED,False,1,1,1,https://github.com/rv-jenkins,Update submodule dependencies,1,[],https://github.com/kframework/c-semantics/pull/524,https://github.com/rv-jenkins,1,https://github.com/kframework/c-semantics/pull/524,PR generated by './update-deps/update-deps',PR generated by './update-deps/update-deps',True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,525,2019-07-07T00:30:53Z,2019-07-08T00:30:27Z,2019-07-08T00:30:28Z,CLOSED,False,1,1,1,https://github.com/rv-jenkins,Update submodule dependencies,1,[],https://github.com/kframework/c-semantics/pull/525,https://github.com/rv-jenkins,1,https://github.com/kframework/c-semantics/pull/525,PR generated by './update-deps/update-deps',PR generated by './update-deps/update-deps',True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,527,2019-07-08T00:30:44Z,2019-07-09T00:30:32Z,2019-07-09T00:30:32Z,CLOSED,False,1,1,1,https://github.com/rv-jenkins,Update submodule dependencies,1,[],https://github.com/kframework/c-semantics/pull/527,https://github.com/rv-jenkins,1,https://github.com/kframework/c-semantics/pull/527,PR generated by './update-deps/update-deps',PR generated by './update-deps/update-deps',True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,528,2019-07-08T20:16:05Z,2019-07-09T20:15:08Z,2019-07-09T20:15:11Z,MERGED,True,24,8,1,https://github.com/charala1,Out of source build for parser and cdecl,4,[],https://github.com/kframework/c-semantics/pull/528,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/528,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,529,2019-07-09T00:30:57Z,2019-07-10T00:32:11Z,2019-07-10T00:32:11Z,CLOSED,False,1,1,1,https://github.com/rv-jenkins,Update submodule dependencies,1,[],https://github.com/kframework/c-semantics/pull/529,https://github.com/rv-jenkins,1,https://github.com/kframework/c-semantics/pull/529,PR generated by './update-deps/update-deps',PR generated by './update-deps/update-deps',True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,530,2019-07-09T17:30:16Z,2019-07-10T16:14:12Z,2019-07-10T16:14:16Z,MERGED,True,166,239,19,https://github.com/dwightguth,remove TypeMap sort,2,[],https://github.com/kframework/c-semantics/pull/530,https://github.com/dwightguth,1,https://github.com/kframework/c-semantics/pull/530,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,531,2019-07-10T00:32:39Z,2019-07-11T21:57:04Z,2019-09-01T02:02:17Z,CLOSED,False,1,1,1,https://github.com/rv-jenkins,Update submodule dependencies,1,[],https://github.com/kframework/c-semantics/pull/531,https://github.com/rv-jenkins,1,https://github.com/kframework/c-semantics/pull/531,PR generated by './update-deps/update-deps',PR generated by './update-deps/update-deps',True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,532,2019-07-10T19:32:55Z,2019-07-11T21:51:33Z,2019-07-11T21:51:35Z,MERGED,True,105,105,47,https://github.com/dwightguth,Fixes for latest version of K,4,[],https://github.com/kframework/c-semantics/pull/532,https://github.com/dwightguth,1,https://github.com/kframework/c-semantics/pull/532,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,532,2019-07-10T19:32:55Z,2019-07-11T21:51:33Z,2019-07-11T21:51:35Z,MERGED,True,105,105,47,https://github.com/dwightguth,Fixes for latest version of K,4,[],https://github.com/kframework/c-semantics/pull/532,https://github.com/chathhorn,2,https://github.com/kframework/c-semantics/pull/532#issuecomment-510446694,,Is this ready?,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,533,2019-07-11T14:50:58Z,2019-07-11T19:49:56Z,2019-07-11T19:50:00Z,MERGED,True,3,2,1,https://github.com/chathhorn,Remove `apt-get upgrade` from dockerfile,2,[],https://github.com/kframework/c-semantics/pull/533,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/533,I think it's bad practice (https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) and possibly causing cacheing issues.,I think it's bad practice (https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) and possibly causing cacheing issues.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,534,2019-07-12T02:04:13Z,2019-08-16T21:40:58Z,2019-08-20T21:06:59Z,MERGED,True,60,65,16,https://github.com/dwightguth,Finish fixing C semantics for llvm backend to kompile,10,[],https://github.com/kframework/c-semantics/pull/534,https://github.com/dwightguth,1,https://github.com/kframework/c-semantics/pull/534,"With this PR, the C semantics should kompile on the LLVM backend and pass the smoke test. Changes to make it actually use the llvm backend will come separately at a later date, and currently exist on a branch.","With this PR, the C semantics should kompile on the LLVM backend and pass the smoke test. Changes to make it actually use the llvm backend will come separately at a later date, and currently exist on a branch.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,535,2019-07-12T21:12:02Z,2019-07-12T21:21:44Z,2019-07-12T21:21:44Z,CLOSED,False,10,6,1,https://github.com/chathhorn,Disambiguate some cpp klabels.,1,[],https://github.com/kframework/c-semantics/pull/535,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/535,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,536,2019-07-12T21:22:08Z,2019-07-18T17:17:00Z,2019-07-18T19:10:01Z,MERGED,True,164,162,13,https://github.com/chathhorn,Disambiguate some cpp klabels.,5,[],https://github.com/kframework/c-semantics/pull/536,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/536,"Disambiguates some cpp klabels to fix an issue with strict:: lists causing the Match release build to sometimes fail.
Refactors semantics of specifier/qualifier canonicalization to fix some issues with adding new attributes.
Change to send verbose output of the unit-pass tests to a file instead of to stdout.","Disambiguates some cpp klabels to fix an issue with strict:: lists causing the Match release build to sometimes fail.
Refactors semantics of specifier/qualifier canonicalization to fix some issues with adding new attributes.
Change to send verbose output of the unit-pass tests to a file instead of to stdout.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,537,2019-07-16T16:42:29Z,2019-07-25T16:21:50Z,2019-07-25T16:21:50Z,CLOSED,False,11,0,2,https://github.com/charala1,Dockerfile: login shell,3,[],https://github.com/kframework/c-semantics/pull/537,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/537,Do not review,Do not review,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,538,2019-07-17T12:51:36Z,2019-07-17T14:06:27Z,2019-07-17T14:06:31Z,MERGED,True,2,2,1,https://github.com/chathhorn,Fix KCCFLAGS for CV examples,1,[],https://github.com/kframework/c-semantics/pull/538,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/538,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,539,2019-07-19T21:43:47Z,2019-07-25T16:16:18Z,2019-07-25T16:16:22Z,MERGED,True,173,112,3,https://github.com/charala1,Dockerfile: using internal registry image,4,[],https://github.com/kframework/c-semantics/pull/539,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/539,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,540,2019-07-23T13:55:27Z,2019-07-29T09:29:59Z,2019-07-29T09:29:59Z,CLOSED,False,2,3,2,https://github.com/h0nzZik,move reference rewrite to translation semantics,1,[],https://github.com/kframework/c-semantics/pull/540,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/540,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,541,2019-07-23T23:18:51Z,2019-08-27T23:48:09Z,2019-08-27T23:48:14Z,MERGED,True,2844,2604,6,https://github.com/chathhorn,C++ to kore parser,16,[],https://github.com/kframework/c-semantics/pull/541,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/541,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,542,2019-07-25T16:26:24Z,2019-08-27T23:50:18Z,2019-08-27T23:50:22Z,CLOSED,False,2,2,2,https://github.com/charala1,"Dockerfile, Jenkinsfile: 10.0.0.21 -> office.runtime.verification.com",1,[],https://github.com/kframework/c-semantics/pull/542,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/542,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,543,2019-07-29T17:40:52Z,2019-08-02T14:12:34Z,2019-08-02T14:12:34Z,MERGED,True,15,20,2,https://github.com/charala1,Private registry credentials,5,[],https://github.com/kframework/c-semantics/pull/543,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/543,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,545,2019-08-01T17:00:50Z,2019-08-07T12:49:16Z,2019-08-07T12:49:17Z,MERGED,True,164,42,7,https://github.com/h0nzZik,Various fixes and refactorings. Also some standardeese.,7,[],https://github.com/kframework/c-semantics/pull/545,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/545,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,546,2019-08-07T13:49:54Z,2019-08-16T18:10:46Z,2019-08-16T18:10:46Z,MERGED,True,29,1,4,https://github.com/h0nzZik,Fix functional cast,2,[],https://github.com/kframework/c-semantics/pull/546,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/546,"#computeUDCTo does not play well with constructors that do not have exactly one parameter -> filter them out.
RV-Match test: runtimeverification/rv-match#1087","#computeUDCTo does not play well with constructors that do not have exactly one parameter -> filter them out.
RV-Match test: runtimeverification/rv-match#1087",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,546,2019-08-07T13:49:54Z,2019-08-16T18:10:46Z,2019-08-16T18:10:46Z,MERGED,True,29,1,4,https://github.com/h0nzZik,Fix functional cast,2,[],https://github.com/kframework/c-semantics/pull/546,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/546#issuecomment-519465104,"#computeUDCTo does not play well with constructors that do not have exactly one parameter -> filter them out.
RV-Match test: runtimeverification/rv-match#1087",TODO: check cast with multiple parameters and add a test for it.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,548,2019-08-08T11:32:59Z,2019-08-12T08:30:54Z,2019-10-22T19:51:30Z,MERGED,True,663,44,16,https://github.com/chathhorn,UB check for invalid arg to ctype functions.,13,[],https://github.com/kframework/c-semantics/pull/548,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/548,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,549,2019-08-08T17:29:49Z,2019-08-10T00:10:28Z,2019-08-10T00:10:28Z,CLOSED,False,22,106,1,https://github.com/charala1,Jenkinsfile: try to affect docker tags,1,[],https://github.com/kframework/c-semantics/pull/549,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/549,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,550,2019-08-10T00:15:24Z,2019-08-12T23:02:16Z,2019-08-12T23:02:20Z,MERGED,True,7,17,2,https://github.com/charala1,Dockerfile: pull ocaml installation from another image,3,[],https://github.com/kframework/c-semantics/pull/550,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/550,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,551,2019-08-12T15:20:50Z,2019-08-13T11:43:42Z,2019-08-13T11:46:05Z,MERGED,True,22,284,2,https://github.com/chathhorn,Make test independent of locale.,2,[],https://github.com/kframework/c-semantics/pull/551,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/551,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,552,2019-08-12T23:05:51Z,2019-08-13T18:04:36Z,2019-08-13T18:04:46Z,MERGED,True,19,24,1,https://github.com/charala1,Using kframework base image,6,[],https://github.com/kframework/c-semantics/pull/552,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/552,"FROM runtimeverificationinc/kframework:ubuntu-bionic

most APT packages installed from there


Environment set in Makefile
Pull perl installation from https://hub.docker.com/r/runtimeverificationinc/perl","FROM runtimeverificationinc/kframework:ubuntu-bionic

most APT packages installed from there


Environment set in Makefile
Pull perl installation from https://hub.docker.com/r/runtimeverificationinc/perl",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,554,2019-08-13T18:09:50Z,2019-08-13T19:48:43Z,2019-08-13T19:48:46Z,MERGED,True,0,6,1,https://github.com/charala1,Dockerfile: use openjdk-11-jdk from base image,1,[],https://github.com/kframework/c-semantics/pull/554,https://github.com/charala1,1,https://github.com/kframework/c-semantics/pull/554,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,556,2019-08-14T14:49:47Z,2019-08-28T13:35:10Z,2019-08-28T13:35:10Z,MERGED,True,191,62,12,https://github.com/h0nzZik,Fix aggregate destruction,7,[],https://github.com/kframework/c-semantics/pull/556,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/556,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,556,2019-08-14T14:49:47Z,2019-08-28T13:35:10Z,2019-08-28T13:35:10Z,MERGED,True,191,62,12,https://github.com/h0nzZik,Fix aggregate destruction,7,[],https://github.com/kframework/c-semantics/pull/556,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/556#issuecomment-521291466,,"failed functional-cast-4.C
The configuration has #computeUDCTo at the top of the K cell. That is probably the error fixed in #546, so I need to shift the priority there.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,556,2019-08-14T14:49:47Z,2019-08-28T13:35:10Z,2019-08-28T13:35:10Z,MERGED,True,191,62,12,https://github.com/h0nzZik,Fix aggregate destruction,7,[],https://github.com/kframework/c-semantics/pull/556,https://github.com/h0nzZik,3,https://github.com/kframework/c-semantics/pull/556#issuecomment-522030768,,"When constructing an aggregate that contains members of class types, these members need to be temporarily added to <locally-constructed>, so that if the construction of the aggregate ends with an exception, the members that are already constructed get destructed. However, before adding the aggregate itself to <locally-constructed>, its members should be removed from there. Currently, I wrap the construction of members in pushBlock and popBlock; however, that is problematic for global variables. So maybe it would be better to just save and restore the <locally-constructed> cell.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,556,2019-08-14T14:49:47Z,2019-08-28T13:35:10Z,2019-08-28T13:35:10Z,MERGED,True,191,62,12,https://github.com/h0nzZik,Fix aggregate destruction,7,[],https://github.com/kframework/c-semantics/pull/556,https://github.com/h0nzZik,4,https://github.com/kframework/c-semantics/pull/556#issuecomment-525344651,,RV-Match test: runtimeverification/rv-match#1090,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,558,2019-08-28T21:38:09Z,,2020-05-14T15:05:56Z,OPEN,False,358,323,48,https://github.com/chathhorn,LLVM backend support,85,[],https://github.com/kframework/c-semantics/pull/558,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/558,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,558,2019-08-28T21:38:09Z,,2020-05-14T15:05:56Z,OPEN,False,358,323,48,https://github.com/chathhorn,LLVM backend support,85,[],https://github.com/kframework/c-semantics/pull/558,https://github.com/dwightguth,2,https://github.com/kframework/c-semantics/pull/558#issuecomment-528007745,,"Let's wait to merge this until we get all the llvm backend tests passing. Right now it seems to be disabling C++, which we probably don't want to do in master.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,559,2019-08-28T22:43:39Z,2019-09-17T20:09:34Z,2019-09-17T20:09:47Z,CLOSED,False,211,202,23,https://github.com/chathhorn,Parser/semantics fixes for LLVM backend,3,[],https://github.com/kframework/c-semantics/pull/559,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/559,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,560,2019-08-29T11:23:13Z,2019-09-09T09:04:33Z,2019-09-09T09:04:33Z,CLOSED,False,83,73,3,https://github.com/h0nzZik,Do not destruct dynamically-allocated objects,2,[],https://github.com/kframework/c-semantics/pull/560,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/560,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,560,2019-08-29T11:23:13Z,2019-09-09T09:04:33Z,2019-09-09T09:04:33Z,CLOSED,False,83,73,3,https://github.com/h0nzZik,Do not destruct dynamically-allocated objects,2,[],https://github.com/kframework/c-semantics/pull/560,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/560#issuecomment-529371523,,Closed in favour of #564.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,563,2019-08-30T17:02:03Z,2019-08-31T00:24:40Z,2019-08-31T00:24:45Z,MERGED,True,11,11,2,https://github.com/chathhorn,new26.C.ref: remove windows line endings,2,[],https://github.com/kframework/c-semantics/pull/563,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/563,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,564,2019-09-02T14:10:45Z,2019-09-09T16:03:35Z,2019-09-09T16:03:35Z,MERGED,True,126,24,7,https://github.com/h0nzZik,Delete local object just after its destruction.,6,[],https://github.com/kframework/c-semantics/pull/564,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/564,"The cell <local-addresses> is no longer used
in the C++ semantics.","The cell <local-addresses> is no longer used
in the C++ semantics.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,564,2019-09-02T14:10:45Z,2019-09-09T16:03:35Z,2019-09-09T16:03:35Z,MERGED,True,126,24,7,https://github.com/h0nzZik,Delete local object just after its destruction.,6,[],https://github.com/kframework/c-semantics/pull/564,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/564#issuecomment-527195377,"The cell <local-addresses> is no longer used
in the C++ semantics.","The file execution/decl/declarator.k contains an error: if the initializer throws, the variable is not registered for destruction; the destructor is not called (correctly), but also the allocated memory (allocObject) is not deleted (via deleteObject). We may fix this by doing registerForDestruction before initializeObjectExec, but with the IsConstructor flag set; the flag would be cleared after initializeObjectExec.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,564,2019-09-02T14:10:45Z,2019-09-09T16:03:35Z,2019-09-09T16:03:35Z,MERGED,True,126,24,7,https://github.com/h0nzZik,Delete local object just after its destruction.,6,[],https://github.com/kframework/c-semantics/pull/564,https://github.com/h0nzZik,3,https://github.com/kframework/c-semantics/pull/564#issuecomment-527821267,"The cell <local-addresses> is no longer used
in the C++ semantics.","The fix contains another bug: if initializeObjectExec adds something to<locally-constructed>, then updateRegisteredForDestruction changes the newly added item. Even if we fix this, the principle is wrong: if we do registerForDestruction with IsConstructor flag set before initializeObjectExec, if initializeObjectExec throws an exception, the object gets destructed (and should not). We may fix this by adding a new Enabled flag into the entry. Also, I believe that we may remove the IsVirtual flag.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,565,2019-09-05T02:04:21Z,2019-09-05T19:16:18Z,2019-09-05T19:16:18Z,MERGED,True,1,1,1,https://github.com/rv-jenkins,Update dependencies,1,[],https://github.com/kframework/c-semantics/pull/565,https://github.com/rv-jenkins,1,https://github.com/kframework/c-semantics/pull/565,PR generated by './update-deps/update-deps',PR generated by './update-deps/update-deps',True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,566,2019-09-08T02:00:47Z,2019-09-08T12:50:30Z,2019-09-08T12:50:30Z,MERGED,True,1,1,1,https://github.com/rv-jenkins,Update dependencies,3,[],https://github.com/kframework/c-semantics/pull/566,https://github.com/rv-jenkins,1,https://github.com/kframework/c-semantics/pull/566,PR generated by './update-deps/update-deps',PR generated by './update-deps/update-deps',True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,567,2019-09-11T02:01:28Z,,2019-10-08T02:02:11Z,OPEN,False,1,1,1,https://github.com/rv-jenkins,Update dependencies,20,[],https://github.com/kframework/c-semantics/pull/567,https://github.com/rv-jenkins,1,https://github.com/kframework/c-semantics/pull/567,PR generated by './update-deps/update-deps',PR generated by './update-deps/update-deps',True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,569,2019-09-11T13:13:23Z,2019-09-11T16:56:05Z,2019-09-11T16:56:05Z,MERGED,True,213,39,17,https://github.com/h0nzZik,Destruct temporaries,3,[],https://github.com/kframework/c-semantics/pull/569,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/569,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,572,2019-09-13T08:54:30Z,2019-09-17T04:37:53Z,2019-09-17T04:37:53Z,MERGED,True,127,34,15,https://github.com/h0nzZik,Destruct temporaries (2),7,[],https://github.com/kframework/c-semantics/pull/572,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/572,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,573,2019-09-13T10:20:05Z,2019-09-16T11:02:47Z,2019-09-16T11:02:47Z,MERGED,True,3,5,2,https://github.com/h0nzZik,Make size_t => unsigned-long,2,[],https://github.com/kframework/c-semantics/pull/573,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/573,"On my machine, there is a problem with the new41.C test. The test uses the __SIZE_TYPE__ macro, that evaluates to unsigned long. Having size_t => unsigned in the semantics results in having two overloads for operator new, the implicit one with an unsigned parameter and the user-defined one with unsigned long, and the implicit one gets selected.","On my machine, there is a problem with the new41.C test. The test uses the __SIZE_TYPE__ macro, that evaluates to unsigned long. Having size_t => unsigned in the semantics results in having two overloads for operator new, the implicit one with an unsigned parameter and the user-defined one with unsigned long, and the implicit one gets selected.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,573,2019-09-13T10:20:05Z,2019-09-16T11:02:47Z,2019-09-16T11:02:47Z,MERGED,True,3,5,2,https://github.com/h0nzZik,Make size_t => unsigned-long,2,[],https://github.com/kframework/c-semantics/pull/573,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/573#issuecomment-531224842,"On my machine, there is a problem with the new41.C test. The test uses the __SIZE_TYPE__ macro, that evaluates to unsigned long. Having size_t => unsigned in the semantics results in having two overloads for operator new, the implicit one with an unsigned parameter and the user-defined one with unsigned long, and the implicit one gets selected.",Test: runtimeverification/rv-match#1098,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,576,2019-09-17T09:20:03Z,2019-09-17T14:52:44Z,2019-09-17T14:52:44Z,MERGED,True,49,6,5,https://github.com/h0nzZik,Fix #574.,2,[],https://github.com/kframework/c-semantics/pull/576,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/576,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,577,2019-09-17T16:05:08Z,2019-11-08T15:17:12Z,2019-11-08T15:17:13Z,CLOSED,False,26,8,4,https://github.com/h0nzZik,Free memory when `throw` is interrupted by `throw`,2,[],https://github.com/kframework/c-semantics/pull/577,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/577,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,577,2019-09-17T16:05:08Z,2019-11-08T15:17:12Z,2019-11-08T15:17:13Z,CLOSED,False,26,8,4,https://github.com/h0nzZik,Free memory when `throw` is interrupted by `throw`,2,[],https://github.com/kframework/c-semantics/pull/577,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/577#issuecomment-532308268,,"When we merge this, I will prepare a PR for the rv-match repository.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,577,2019-09-17T16:05:08Z,2019-11-08T15:17:12Z,2019-11-08T15:17:13Z,CLOSED,False,26,8,4,https://github.com/h0nzZik,Free memory when `throw` is interrupted by `throw`,2,[],https://github.com/kframework/c-semantics/pull/577,https://github.com/h0nzZik,3,https://github.com/kframework/c-semantics/pull/577#issuecomment-551867441,,Merged in #593.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,578,2019-09-18T18:59:21Z,2019-09-19T08:08:02Z,2019-09-19T11:47:30Z,MERGED,True,220,203,24,https://github.com/chathhorn,C parser fixes needed for the LLVM backend,4,[],https://github.com/kframework/c-semantics/pull/578,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/578,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,579,2019-09-19T19:47:53Z,2019-09-20T10:40:00Z,2019-10-22T19:51:27Z,MERGED,True,6,0,2,https://github.com/chathhorn,Add -flinking-depth kcc flag.,1,[],https://github.com/kframework/c-semantics/pull/579,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/579,Analagous to -ftranslation-depth.,Analagous to -ftranslation-depth.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,581,2019-09-24T22:28:13Z,2019-10-22T19:24:16Z,2019-10-22T19:24:16Z,CLOSED,False,112,107,11,https://github.com/chathhorn,Improved unsequenced side-effect check.,3,[],https://github.com/kframework/c-semantics/pull/581,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/581,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,583,2019-09-27T15:19:51Z,2019-09-30T15:39:41Z,2019-10-22T19:51:21Z,MERGED,True,0,10,1,https://github.com/chathhorn,Disable pushing docker images to internal registry.,1,[],https://github.com/kframework/c-semantics/pull/583,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/583,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,584,2019-09-30T22:20:24Z,2019-10-01T11:59:49Z,2019-10-01T11:59:55Z,MERGED,True,25,0,2,https://github.com/chathhorn,Fix encoded floats appearing in relational exps.,3,[],https://github.com/kframework/c-semantics/pull/584,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/584,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,585,2019-10-01T19:44:00Z,2019-10-02T13:32:27Z,2019-10-22T19:50:57Z,MERGED,True,37,17,10,https://github.com/chathhorn,Fixes for Match,5,[],https://github.com/kframework/c-semantics/pull/585,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/585,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,586,2019-10-03T15:42:53Z,2019-10-07T06:56:45Z,2019-10-22T19:50:54Z,MERGED,True,15,0,3,https://github.com/chathhorn,Fix for #582.,2,[],https://github.com/kframework/c-semantics/pull/586,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/586,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,587,2019-10-07T15:03:38Z,2019-10-08T12:41:30Z,2019-10-08T13:05:39Z,MERGED,True,18,13,6,https://github.com/chathhorn,Update K submodule,2,[],https://github.com/kframework/c-semantics/pull/587,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/587,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,588,2019-10-08T14:09:26Z,2019-10-16T14:10:26Z,2019-10-22T19:50:47Z,MERGED,True,239,90,57,https://github.com/chathhorn,A few MISRA-related checks,13,[],https://github.com/kframework/c-semantics/pull/588,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/588,"Adds a few (mostly MISRA-C) checks:

restrict qualifier use
pointer to int conversion
int bitfields
casting away qualifiers
function to object ptr conversion","Adds a few (mostly MISRA-C) checks:

restrict qualifier use
pointer to int conversion
int bitfields
casting away qualifiers
function to object ptr conversion",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,589,2019-10-16T21:03:18Z,2019-10-17T07:11:12Z,2019-10-22T19:50:50Z,MERGED,True,3,1,1,https://github.com/chathhorn,compcertTSO-2.c: deterministic error output.,1,[],https://github.com/kframework/c-semantics/pull/589,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/589,This test was producing different output due to the unspecified evaluation order of expressions.,This test was producing different output due to the unspecified evaluation order of expressions.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,590,2019-10-17T14:28:22Z,2019-10-17T16:16:57Z,2019-10-17T16:17:01Z,MERGED,True,1,1,1,https://github.com/chathhorn,compcertTSO-2.c.ref: fix line number.,1,[],https://github.com/kframework/c-semantics/pull/590,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/590,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,592,2019-10-27T23:56:03Z,2019-10-29T08:33:21Z,2019-10-29T08:33:21Z,MERGED,True,134,21,9,https://github.com/chathhorn,Some C18-related updates,9,[],https://github.com/kframework/c-semantics/pull/592,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/592,"Adds a document describing C18 current support (a few other C18-related changes have already been merged)
Updates an error related to invalid arguments for the size parameter of the stdlib *alloc functions","Adds a document describing C18 current support (a few other C18-related changes have already been merged)
Updates an error related to invalid arguments for the size parameter of the stdlib *alloc functions",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,593,2019-10-31T15:55:07Z,2019-11-07T09:08:26Z,2019-11-07T11:11:19Z,MERGED,True,1555,252,35,https://github.com/h0nzZik,Clang-based C parser,134,[],https://github.com/kframework/c-semantics/pull/593,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/593,Also includes #577.,Also includes #577.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,593,2019-10-31T15:55:07Z,2019-11-07T09:08:26Z,2019-11-07T11:11:19Z,MERGED,True,1555,252,35,https://github.com/h0nzZik,Clang-based C parser,134,[],https://github.com/kframework/c-semantics/pull/593,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/593#issuecomment-551034635,Also includes #577.,"Oh sorry, I did not notice the comment and merged it. @mickyabir @ehildenb Guys, can you look at the semantics changes?
@dwightguth ./offsetof-1.c was failing in Clang, but after Chris fixed the test, it is failing in this PR because it was not implemented in the Clang-based parser. I have already implemented it locally, but it is now failing due to the problem with OffsetOfNode::getArrayExprIndex that I mentioned on slack. I hope to enable that test in the next PR.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,594,2019-10-31T20:23:58Z,2019-11-01T07:38:02Z,2019-11-01T07:38:02Z,MERGED,True,1,1,1,https://github.com/chathhorn,offsetof-1.c: constant field access expression,1,[],https://github.com/kframework/c-semantics/pull/594,https://github.com/chathhorn,1,https://github.com/kframework/c-semantics/pull/594,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,596,2019-11-11T13:38:52Z,2020-01-16T10:47:14Z,2020-01-16T10:47:14Z,CLOSED,False,1116,884,234,https://github.com/h0nzZik,Clang-based C parser #2,52,[],https://github.com/kframework/c-semantics/pull/596,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/596,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,596,2019-11-11T13:38:52Z,2020-01-16T10:47:14Z,2020-01-16T10:47:14Z,CLOSED,False,1116,884,234,https://github.com/h0nzZik,Clang-based C parser #2,52,[],https://github.com/kframework/c-semantics/pull/596,https://github.com/XVilka,2,https://github.com/kframework/c-semantics/pull/596#issuecomment-558533671,,Maybe it makes sense to target clang-9 from the beginning?,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,596,2019-11-11T13:38:52Z,2020-01-16T10:47:14Z,2020-01-16T10:47:14Z,CLOSED,False,1116,884,234,https://github.com/h0nzZik,Clang-based C parser #2,52,[],https://github.com/kframework/c-semantics/pull/596,https://github.com/h0nzZik,3,https://github.com/kframework/c-semantics/pull/596#issuecomment-560488760,,"Maybe it makes sense to target clang-9 from the beginning?

Unfortunately, Ubuntu 18.04 does not have clang-9 in repositories.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,597,2019-11-14T14:36:43Z,2019-11-15T15:24:04Z,2019-11-15T15:24:04Z,MERGED,True,22,0,2,https://github.com/h0nzZik,Fix restrict,3,[],https://github.com/kframework/c-semantics/pull/597,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/597,A fix for https://runtimeverification.com/support/match/issues/36.,A fix for https://runtimeverification.com/support/match/issues/36.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,597,2019-11-14T14:36:43Z,2019-11-15T15:24:04Z,2019-11-15T15:24:04Z,MERGED,True,22,0,2,https://github.com/h0nzZik,Fix restrict,3,[],https://github.com/kframework/c-semantics/pull/597,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/597#issuecomment-553974038,A fix for https://runtimeverification.com/support/match/issues/36.,"The problem is that we can have a basedOn refering to an object that no longer exists in memory. Maybe we could have another solution when we would remove such references every time an object is removed from the memory. With the current way we are risking that over time, some pointer accumulates lots of references to objects that no longer exists.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,598,2019-11-27T14:13:56Z,2019-11-28T15:18:36Z,2019-11-28T15:39:43Z,MERGED,True,1,1,1,https://github.com/AlexCid,Fix git clone command for docker installation,1,[],https://github.com/kframework/c-semantics/pull/598,https://github.com/AlexCid,1,https://github.com/kframework/c-semantics/pull/598,"The git command to clone the project is wrong - it uses checkout via ssh instead of HTTP.  Thus, it will fail, except for the project maintainers I guess...","The git command to clone the project is wrong - it uses checkout via ssh instead of HTTP.  Thus, it will fail, except for the project maintainers I guess...",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,598,2019-11-27T14:13:56Z,2019-11-28T15:18:36Z,2019-11-28T15:39:43Z,MERGED,True,1,1,1,https://github.com/AlexCid,Fix git clone command for docker installation,1,[],https://github.com/kframework/c-semantics/pull/598,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/598#issuecomment-559538090,"The git command to clone the project is wrong - it uses checkout via ssh instead of HTTP.  Thus, it will fail, except for the project maintainers I guess...",Thanks.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,601,2020-01-09T13:09:42Z,2020-01-09T21:19:29Z,2020-01-09T21:19:29Z,MERGED,True,252,1555,35,https://github.com/h0nzZik,"Revert ""Clang-based C parser (#593)""",1,[],https://github.com/kframework/c-semantics/pull/601,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/601,This reverts commit d61025b.,This reverts commit d61025b.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,602,2020-01-13T16:03:51Z,2020-01-14T09:53:10Z,2020-01-14T09:53:10Z,MERGED,True,50,64,1,https://github.com/h0nzZik,Update installation instructions,3,[],https://github.com/kframework/c-semantics/pull/602,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/602,Also fixes #599.,Also fixes #599.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,603,2020-01-14T10:04:44Z,2020-01-14T15:48:49Z,2020-01-14T15:48:55Z,MERGED,True,1,9,1,https://github.com/h0nzZik,preprocessor: forward -std=xyz to gcc,1,[],https://github.com/kframework/c-semantics/pull/603,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/603,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,605,2020-02-13T13:16:08Z,2020-02-14T09:11:43Z,2020-02-14T09:11:43Z,MERGED,True,44,2,6,https://github.com/h0nzZik,Fix nested switch,4,[],https://github.com/kframework/c-semantics/pull/605,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/605,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,606,2020-02-17T16:44:18Z,2020-02-26T13:10:01Z,2020-02-26T13:10:01Z,CLOSED,False,50,4,3,https://github.com/h0nzZik,Do not perform lvalue conversion on LHS of assign,2,[],https://github.com/kframework/c-semantics/pull/606,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/606,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,606,2020-02-17T16:44:18Z,2020-02-26T13:10:01Z,2020-02-26T13:10:01Z,CLOSED,False,50,4,3,https://github.com/h0nzZik,Do not perform lvalue conversion on LHS of assign,2,[],https://github.com/kframework/c-semantics/pull/606,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/606#issuecomment-588264562,,"This is not correct, I misunderstood the code. With this 'fix' we miss a lots of UBs.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,608,2020-02-26T13:11:34Z,2020-03-26T10:45:13Z,2020-03-26T10:45:18Z,MERGED,True,270,49,21,https://github.com/h0nzZik,Clever linking,15,[],https://github.com/kframework/c-semantics/pull/608,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/608,"If a symbol is not indirectly used by main, we should not require it to be defined. Implemented only for C.","If a symbol is not indirectly used by main, we should not require it to be defined. Implemented only for C.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,608,2020-02-26T13:11:34Z,2020-03-26T10:45:13Z,2020-03-26T10:45:18Z,MERGED,True,270,49,21,https://github.com/h0nzZik,Clever linking,15,[],https://github.com/kframework/c-semantics/pull/608,https://github.com/h0nzZik,2,https://github.com/kframework/c-semantics/pull/608#issuecomment-592577893,"If a symbol is not indirectly used by main, we should not require it to be defined. Implemented only for C.",TODO support different entry points than main (the kcc -e entry_point switch).,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,608,2020-02-26T13:11:34Z,2020-03-26T10:45:13Z,2020-03-26T10:45:18Z,MERGED,True,270,49,21,https://github.com/h0nzZik,Clever linking,15,[],https://github.com/kframework/c-semantics/pull/608,https://github.com/h0nzZik,3,https://github.com/kframework/c-semantics/pull/608#issuecomment-595697463,"If a symbol is not indirectly used by main, we should not require it to be defined. Implemented only for C.",It completely suppresses them.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,608,2020-02-26T13:11:34Z,2020-03-26T10:45:13Z,2020-03-26T10:45:18Z,MERGED,True,270,49,21,https://github.com/h0nzZik,Clever linking,15,[],https://github.com/kframework/c-semantics/pull/608,https://github.com/dwightguth,4,https://github.com/kframework/c-semantics/pull/608#issuecomment-595863993,"If a symbol is not indirectly used by main, we should not require it to be defined. Implemented only for C.","That's not really ideal. They are still undefined behavior that the program has, and we shouldn't just not report it.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,608,2020-02-26T13:11:34Z,2020-03-26T10:45:13Z,2020-03-26T10:45:18Z,MERGED,True,270,49,21,https://github.com/h0nzZik,Clever linking,15,[],https://github.com/kframework/c-semantics/pull/608,https://github.com/h0nzZik,5,https://github.com/kframework/c-semantics/pull/608#issuecomment-596526114,"If a symbol is not indirectly used by main, we should not require it to be defined. Implemented only for C.","Ok, should I make it print a warning?",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,608,2020-02-26T13:11:34Z,2020-03-26T10:45:13Z,2020-03-26T10:45:18Z,MERGED,True,270,49,21,https://github.com/h0nzZik,Clever linking,15,[],https://github.com/kframework/c-semantics/pull/608,https://github.com/virgil-serbanuta,6,https://github.com/kframework/c-semantics/pull/608#issuecomment-604356215,"If a symbol is not indirectly used by main, we should not require it to be defined. Implemented only for C.","I tested it on two autoconf projects (gmp 6.1.2 and secp256k1)  projects that had configure scripts that were not based on autoconf (z3 and klee-uclibc).
There is no change in behaviour in both the c-semantics kcc and the rv-match one.
The c-semantics kcc failed for gmp (mpn_lshift_com optimization error) and klee (link error for ncurses symbol).
The rv-match kcc failed for gmp (the checking how to define a 32-bit word step).
I think this should be fine to merge.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,610,2020-02-28T11:05:10Z,2020-02-28T14:51:25Z,2020-02-28T14:51:25Z,MERGED,True,6,1,1,https://github.com/h0nzZik,fix bitfield non-termination bug,2,[],https://github.com/kframework/c-semantics/pull/610,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/610,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,611,2020-03-04T18:13:43Z,2020-03-09T12:06:38Z,2020-03-09T12:06:38Z,MERGED,True,61,48,14,https://github.com/dwightguth,sync changes to llvm backend into master,3,[],https://github.com/kframework/c-semantics/pull/611,https://github.com/dwightguth,1,https://github.com/kframework/c-semantics/pull/611,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,613,2020-03-12T16:06:29Z,2020-03-12T20:30:11Z,2020-03-12T20:30:11Z,MERGED,True,20,1,2,https://github.com/h0nzZik,fix nested union bug,1,[],https://github.com/kframework/c-semantics/pull/613,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/613,This fixes the union bug reported by Denso.,This fixes the union bug reported by Denso.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,613,2020-03-12T16:06:29Z,2020-03-12T20:30:11Z,2020-03-12T20:30:11Z,MERGED,True,20,1,2,https://github.com/h0nzZik,fix nested union bug,1,[],https://github.com/kframework/c-semantics/pull/613,https://github.com/dwightguth,2,https://github.com/kframework/c-semantics/pull/613#issuecomment-598357285,This fixes the union bug reported by Denso.,Can you describe in english exactly what this change is doing?,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,613,2020-03-12T16:06:29Z,2020-03-12T20:30:11Z,2020-03-12T20:30:11Z,MERGED,True,20,1,2,https://github.com/h0nzZik,fix nested union bug,1,[],https://github.com/kframework/c-semantics/pull/613,https://github.com/h0nzZik,3,https://github.com/kframework/c-semantics/pull/613#issuecomment-598377269,This fixes the union bug reported by Denso.,"Previously, when the outer union did not contain the given member (j for the accompanying test), the original rule did not apply - no rule for union applied, and therefore the [owise] rule applied, which was a problem. I relaxed restrictions on that rule such that in applied in that case, but kept the guard strong enough so that it cannot fire when the rule below (the one with calls to getUnnamed, which probably handles the case of anonymous union member) is enabled. Note that the first line of the modified guard:
(notBool isNoType(getFieldType(F, T)) orBool isNoType(findFieldType(F, T)))

is exactly a negation of the guard from the second rule:
isNoType(getFieldType(F, T)) andBool notBool isNoType(findFieldType(F, T))",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,614,2020-03-12T19:42:52Z,2020-03-18T19:05:44Z,2020-03-18T19:05:44Z,MERGED,True,75,24,9,https://github.com/virgil-serbanuta,Warnings for references to undefined symbols not accessible from main().,4,[],https://github.com/kframework/c-semantics/pull/614,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/614,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,615,2020-03-18T09:54:37Z,2020-03-19T10:02:43Z,2020-03-19T10:02:43Z,MERGED,True,259,228,6,https://github.com/h0nzZik,C++: add attribute [symbol],3,[],https://github.com/kframework/c-semantics/pull/615,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/615,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,616,2020-03-27T10:47:19Z,2020-04-07T09:37:19Z,2020-04-07T09:37:19Z,MERGED,True,28,13,5,https://github.com/h0nzZik,sync llvm changes,3,[],https://github.com/kframework/c-semantics/pull/616,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/616,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,617,2020-04-07T09:36:18Z,2020-04-08T14:28:56Z,2020-04-08T14:28:57Z,MERGED,True,57,36,12,https://github.com/h0nzZik,remove overloaded ExprLoc,2,[],https://github.com/kframework/c-semantics/pull/617,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/617,so that the parser to Kore does not need to choose the right overload,so that the parser to Kore does not need to choose the right overload,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,618,2020-04-07T17:52:41Z,2020-05-27T04:47:28Z,2020-05-27T04:47:28Z,CLOSED,False,29,19,10,https://github.com/dwightguth,Sync llvm backend and add rverror K implementation,16,[],https://github.com/kframework/c-semantics/pull/618,https://github.com/dwightguth,1,https://github.com/kframework/c-semantics/pull/618,"I am trying to get all my K code dealing with error reporting merged upstream, and that means getting the semantics in master as close to what it is in the llvm backend as possible. So we sync the remaining differences from the lastest branch and also append some (but not all) of the changes to the c semantics relating to error reporting.","I am trying to get all my K code dealing with error reporting merged upstream, and that means getting the semantics in master as close to what it is in the llvm backend as possible. So we sync the remaining differences from the lastest branch and also append some (but not all) of the changes to the c semantics relating to error reporting.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,619,2020-04-15T15:26:36Z,2020-04-22T15:49:26Z,2020-04-22T15:49:38Z,MERGED,True,114,22,8,https://github.com/virgil-serbanuta,Add command line option for ignoring unresolved symbols,5,[],https://github.com/kframework/c-semantics/pull/619,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/619,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,620,2020-04-15T18:52:53Z,2020-04-15T21:43:39Z,2020-04-15T21:43:39Z,MERGED,True,18,1,5,https://github.com/dwightguth,add function to get current semantics,1,[],https://github.com/kframework/c-semantics/pull/620,https://github.com/dwightguth,1,https://github.com/kframework/c-semantics/pull/620,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,621,2020-04-24T22:59:52Z,2020-04-27T19:20:16Z,2020-04-27T19:20:25Z,MERGED,True,16,1,2,https://github.com/virgil-serbanuta,Add test for taking an unresolved function's address.,2,[],https://github.com/kframework/c-semantics/pull/621,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/621,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,622,2020-04-28T10:20:10Z,2020-04-29T15:29:25Z,2020-04-29T15:30:58Z,MERGED,True,0,7,1,https://github.com/virgil-serbanuta,Remove the 'push to docker' Jenkins stage.,2,[],https://github.com/kframework/c-semantics/pull/622,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/622,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,623,2020-04-28T15:35:48Z,2020-04-28T19:13:32Z,2020-04-28T19:23:46Z,MERGED,True,85,40,10,https://github.com/h0nzZik,Remove some instances of the `[structural]` attribute on contexts,2,[],https://github.com/kframework/c-semantics/pull/623,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/623,"These instances could be replaced by higher priorityheat/cool rule pairs, but that is a problem in the LLVM backend.","These instances could be replaced by higher priorityheat/cool rule pairs, but that is a problem in the LLVM backend.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,624,2020-04-28T20:10:54Z,2020-05-01T20:25:09Z,2020-05-01T20:25:09Z,CLOSED,False,37,30,14,https://github.com/dwightguth,Try to fix effective type of unions,4,[],https://github.com/kframework/c-semantics/pull/624,https://github.com/dwightguth,1,https://github.com/kframework/c-semantics/pull/624,"Essentially, we probably don't want to control effective typing based on the active variant of unions, because which variant is active doesn't really affect which object a pointer into the union points to... it's actually affected by which object the pointer was based on when you took the original address.
This is almost certainly not working yet, but I'm having difficulty getting the code to compile locally so I'm going to create a draft PR and examine the build result that way.","Essentially, we probably don't want to control effective typing based on the active variant of unions, because which variant is active doesn't really affect which object a pointer into the union points to... it's actually affected by which object the pointer was based on when you took the original address.
This is almost certainly not working yet, but I'm having difficulty getting the code to compile locally so I'm going to create a draft PR and examine the build result that way.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,624,2020-04-28T20:10:54Z,2020-05-01T20:25:09Z,2020-05-01T20:25:09Z,CLOSED,False,37,30,14,https://github.com/dwightguth,Try to fix effective type of unions,4,[],https://github.com/kframework/c-semantics/pull/624,https://github.com/dwightguth,2,https://github.com/kframework/c-semantics/pull/624#issuecomment-622552539,"Essentially, we probably don't want to control effective typing based on the active variant of unions, because which variant is active doesn't really affect which object a pointer into the union points to... it's actually affected by which object the pointer was based on when you took the original address.
This is almost certainly not working yet, but I'm having difficulty getting the code to compile locally so I'm going to create a draft PR and examine the build result that way.","This solution does not work. I do not know how to make a solution that works that would not involve storing fromArray provenance in the  cell, something that would likely break tons of other things in a cascading effect because of how delicate the stuff in the semantics about provenance is. It could in theory be fixed, but I'm not sure it's worth it.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,625,2020-04-29T16:27:46Z,2020-05-05T16:20:53Z,2020-05-05T16:20:58Z,MERGED,True,79,0,3,https://github.com/virgil-serbanuta,Fix bitfield,4,[],https://github.com/kframework/c-semantics/pull/625,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/625,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,626,2020-05-08T04:29:19Z,2020-05-12T15:22:26Z,2020-05-12T15:22:28Z,MERGED,True,1,1,1,https://github.com/rv-jenkins,Update dependency: .build/k,4,['automerge'],https://github.com/kframework/c-semantics/pull/626,https://github.com/rv-jenkins,1,https://github.com/kframework/c-semantics/pull/626,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,627,2020-05-08T17:38:15Z,2020-05-08T20:01:25Z,2020-05-08T20:01:31Z,MERGED,True,37,24,1,https://github.com/virgil-serbanuta,Reduce the cparser memory usage,2,[],https://github.com/kframework/c-semantics/pull/627,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/627,"The stats below are for a 72MB input file:
Before this change:
Memory used: 44,5G
Time: 2m 59s
After this change:
Memory used: 6G
Time: 3m 22s","The stats below are for a 72MB input file:
Before this change:
Memory used: 44,5G
Time: 2m 59s
After this change:
Memory used: 6G
Time: 3m 22s",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,627,2020-05-08T17:38:15Z,2020-05-08T20:01:25Z,2020-05-08T20:01:31Z,MERGED,True,37,24,1,https://github.com/virgil-serbanuta,Reduce the cparser memory usage,2,[],https://github.com/kframework/c-semantics/pull/627,https://github.com/dwightguth,2,https://github.com/kframework/c-semantics/pull/627#issuecomment-625936186,"The stats below are for a 72MB input file:
Before this change:
Memory used: 44,5G
Time: 2m 59s
After this change:
Memory used: 6G
Time: 3m 22s","Six gigabytes still seems high, but this is a massive improvement. I assume you tested that it generates the exact same AST?",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,627,2020-05-08T17:38:15Z,2020-05-08T20:01:25Z,2020-05-08T20:01:31Z,MERGED,True,37,24,1,https://github.com/virgil-serbanuta,Reduce the cparser memory usage,2,[],https://github.com/kframework/c-semantics/pull/627,https://github.com/virgil-serbanuta,3,https://github.com/kframework/c-semantics/pull/627#issuecomment-625940036,"The stats below are for a 72MB input file:
Before this change:
Memory used: 44,5G
Time: 2m 59s
After this change:
Memory used: 6G
Time: 3m 22s","Yes, it's the same AST for the 72G file. I didn't test on other files.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,628,2020-05-08T21:41:06Z,2020-05-11T16:59:27Z,2020-05-11T16:59:30Z,MERGED,True,93,81,1,https://github.com/virgil-serbanuta,Optimize the cparser,1,[],https://github.com/kframework/c-semantics/pull/628,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/628,"The stats below are for a 72MB input file:
Before this change:
Memory used: 6G
Time: 3m 22s
After this change:
Memory used: 2.7G
Time: 1m 25s","The stats below are for a 72MB input file:
Before this change:
Memory used: 6G
Time: 3m 22s
After this change:
Memory used: 2.7G
Time: 1m 25s",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,629,2020-05-12T18:23:00Z,2020-08-07T15:25:12Z,2020-08-07T15:25:12Z,CLOSED,False,1,1,1,https://github.com/rv-jenkins,Update dependency: .build/k,40,['automerge'],https://github.com/kframework/c-semantics/pull/629,https://github.com/rv-jenkins,1,https://github.com/kframework/c-semantics/pull/629,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,630,2020-05-13T10:06:27Z,,2020-05-13T13:19:02Z,OPEN,False,57,119,3,https://github.com/ehildenb,K dockerhub images,12,[],https://github.com/kframework/c-semantics/pull/630,https://github.com/ehildenb,1,https://github.com/kframework/c-semantics/pull/630,"This avoids a lot of the logic in the Jenkinsfile about building a K image with dependencies installed, instead just uses the published K dockerhub images.","This avoids a lot of the logic in the Jenkinsfile about building a K image with dependencies installed, instead just uses the published K dockerhub images.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,631,2020-05-18T21:11:01Z,2020-05-20T14:29:03Z,2020-05-20T16:16:30Z,MERGED,True,14,0,1,https://github.com/virgil-serbanuta,-Wno-file-line argument for kcc.,2,[],https://github.com/kframework/c-semantics/pull/631,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/631,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,632,2020-05-19T19:30:30Z,2020-05-20T16:55:10Z,2020-05-20T16:55:14Z,MERGED,True,13,0,1,https://github.com/virgil-serbanuta,Add the -Wno-file-error flag.,1,[],https://github.com/kframework/c-semantics/pull/632,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/632,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,633,2020-06-02T10:51:08Z,2020-06-02T18:22:25Z,2020-06-02T18:22:30Z,MERGED,True,1,1,1,https://github.com/virgil-serbanuta,Fix parsing for -Wno-file-error,1,[],https://github.com/kframework/c-semantics/pull/633,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/633,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,634,2020-07-07T15:00:09Z,2020-07-08T15:49:24Z,2020-07-08T15:49:27Z,MERGED,True,38,16,4,https://github.com/virgil-serbanuta,No lint error for operations that can't overflow.,2,[],https://github.com/kframework/c-semantics/pull/634,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/634,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,635,2020-07-08T15:30:12Z,2020-07-09T20:22:19Z,2020-07-09T20:22:21Z,MERGED,True,28,4,4,https://github.com/virgil-serbanuta,Array element initializer with braces,3,['automerge'],https://github.com/kframework/c-semantics/pull/635,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/635,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,636,2020-07-10T18:18:46Z,2020-07-15T14:26:40Z,2020-07-15T14:26:45Z,MERGED,True,36,13,6,https://github.com/virgil-serbanuta,Conditional shortcircuit evaluation,1,[],https://github.com/kframework/c-semantics/pull/636,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/636,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,637,2020-07-23T15:48:41Z,2020-08-07T10:42:52Z,2020-08-07T10:42:56Z,MERGED,True,51,14,4,https://github.com/virgil-serbanuta,Fix conditional timeout,2,[],https://github.com/kframework/c-semantics/pull/637,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/637,"I think the conditional timeout is caused by the following rules in semantics/c/language/translation/typing/expr.k
     rule (.K => elaborate(noEval(elabResult(E1)), noEval(elabResult(E2))))
          ~> typeof(_ ? E1:KItem : E2:KItem)

     context elaborateDone(_, _) ~> typeof(_ ? (HOLE:KItem => typeof(HOLE)) : _) [result(Type)]
     context elaborateDone(_, _) ~> typeof(_ ? _ : (HOLE:KItem => typeof(HOLE))) [result(Type)]

together with this rule from semantics/c/language/translation/expr/conditional.k
     rule (.K => typeof(C ? E1 : E2)) ~> evalConditional(C::RValue, E1:RValue, E2:RValue)

which cause the type of conditionals like a ? b : (c ? d : (e ? f : g)) to have an exponential elaboration: computing the type for x ? y : z implies computing elaborate(noeval(z)), which implies computing typeof(z) if z is a conditional; it also implies computing typeof(z) directly in the elaborateDone context. So we compute typeof(z) twice, and if z is of the form p ? q : r, we will compute typeof(r) four times, i.e. twice for each time we compute typeof(z), and so on.
This PR partly fixes the exponential algorithm by postponing the elaboration of the two noEval expressions above until they are actually needed.","I think the conditional timeout is caused by the following rules in semantics/c/language/translation/typing/expr.k
     rule (.K => elaborate(noEval(elabResult(E1)), noEval(elabResult(E2))))
          ~> typeof(_ ? E1:KItem : E2:KItem)

     context elaborateDone(_, _) ~> typeof(_ ? (HOLE:KItem => typeof(HOLE)) : _) [result(Type)]
     context elaborateDone(_, _) ~> typeof(_ ? _ : (HOLE:KItem => typeof(HOLE))) [result(Type)]

together with this rule from semantics/c/language/translation/expr/conditional.k
     rule (.K => typeof(C ? E1 : E2)) ~> evalConditional(C::RValue, E1:RValue, E2:RValue)

which cause the type of conditionals like a ? b : (c ? d : (e ? f : g)) to have an exponential elaboration: computing the type for x ? y : z implies computing elaborate(noeval(z)), which implies computing typeof(z) if z is a conditional; it also implies computing typeof(z) directly in the elaborateDone context. So we compute typeof(z) twice, and if z is of the form p ? q : r, we will compute typeof(r) four times, i.e. twice for each time we compute typeof(z), and so on.
This PR partly fixes the exponential algorithm by postponing the elaboration of the two noEval expressions above until they are actually needed.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,637,2020-07-23T15:48:41Z,2020-08-07T10:42:52Z,2020-08-07T10:42:56Z,MERGED,True,51,14,4,https://github.com/virgil-serbanuta,Fix conditional timeout,2,[],https://github.com/kframework/c-semantics/pull/637,https://github.com/dwightguth,2,https://github.com/kframework/c-semantics/pull/637#issuecomment-664418312,"I think the conditional timeout is caused by the following rules in semantics/c/language/translation/typing/expr.k
     rule (.K => elaborate(noEval(elabResult(E1)), noEval(elabResult(E2))))
          ~> typeof(_ ? E1:KItem : E2:KItem)

     context elaborateDone(_, _) ~> typeof(_ ? (HOLE:KItem => typeof(HOLE)) : _) [result(Type)]
     context elaborateDone(_, _) ~> typeof(_ ? _ : (HOLE:KItem => typeof(HOLE))) [result(Type)]

together with this rule from semantics/c/language/translation/expr/conditional.k
     rule (.K => typeof(C ? E1 : E2)) ~> evalConditional(C::RValue, E1:RValue, E2:RValue)

which cause the type of conditionals like a ? b : (c ? d : (e ? f : g)) to have an exponential elaboration: computing the type for x ? y : z implies computing elaborate(noeval(z)), which implies computing typeof(z) if z is a conditional; it also implies computing typeof(z) directly in the elaborateDone context. So we compute typeof(z) twice, and if z is of the form p ? q : r, we will compute typeof(r) four times, i.e. twice for each time we compute typeof(z), and so on.
This PR partly fixes the exponential algorithm by postponing the elaboration of the two noEval expressions above until they are actually needed.",I'm not quite sure I follow this PR. Can you explain what the bad case of the evaluation order was and how this PR fixes it?,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,637,2020-07-23T15:48:41Z,2020-08-07T10:42:52Z,2020-08-07T10:42:56Z,MERGED,True,51,14,4,https://github.com/virgil-serbanuta,Fix conditional timeout,2,[],https://github.com/kframework/c-semantics/pull/637,https://github.com/virgil-serbanuta,3,https://github.com/kframework/c-semantics/pull/637#issuecomment-668256859,"I think the conditional timeout is caused by the following rules in semantics/c/language/translation/typing/expr.k
     rule (.K => elaborate(noEval(elabResult(E1)), noEval(elabResult(E2))))
          ~> typeof(_ ? E1:KItem : E2:KItem)

     context elaborateDone(_, _) ~> typeof(_ ? (HOLE:KItem => typeof(HOLE)) : _) [result(Type)]
     context elaborateDone(_, _) ~> typeof(_ ? _ : (HOLE:KItem => typeof(HOLE))) [result(Type)]

together with this rule from semantics/c/language/translation/expr/conditional.k
     rule (.K => typeof(C ? E1 : E2)) ~> evalConditional(C::RValue, E1:RValue, E2:RValue)

which cause the type of conditionals like a ? b : (c ? d : (e ? f : g)) to have an exponential elaboration: computing the type for x ? y : z implies computing elaborate(noeval(z)), which implies computing typeof(z) if z is a conditional; it also implies computing typeof(z) directly in the elaborateDone context. So we compute typeof(z) twice, and if z is of the form p ? q : r, we will compute typeof(r) four times, i.e. twice for each time we compute typeof(z), and so on.
This PR partly fixes the exponential algorithm by postponing the elaboration of the two noEval expressions above until they are actually needed.","I'm not quite sure I follow this PR. Can you explain what the bad case of the evaluation order was and how this PR fixes it?

I changed the PR description, does it look better now?",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,639,2020-08-05T15:18:36Z,2020-08-07T17:48:37Z,2020-08-07T17:48:41Z,MERGED,True,2,2,1,https://github.com/virgil-serbanuta,Fix the size of unsigned long and long long,1,[],https://github.com/kframework/c-semantics/pull/639,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/639,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,640,2020-08-06T21:44:51Z,2021-02-01T17:23:39Z,2021-02-01T17:23:42Z,CLOSED,False,1,1,1,https://github.com/rv-jenkins,Update dependency: .build/k,36,['automerge'],https://github.com/kframework/c-semantics/pull/640,https://github.com/rv-jenkins,1,https://github.com/kframework/c-semantics/pull/640,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,641,2020-08-07T18:16:38Z,2020-08-11T13:20:03Z,2020-08-11T13:20:06Z,MERGED,True,9,9,1,https://github.com/virgil-serbanuta,Allow multiple profiles.,1,[],https://github.com/kframework/c-semantics/pull/641,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/641,"The $(LIBC_SO) target was missing a semicolon at the end. However, my guess is that separating commands with semicolons ignores errors occurring in any profile except the last, hence this fix is a bit more involved.","The $(LIBC_SO) target was missing a semicolon at the end. However, my guess is that separating commands with semicolons ignores errors occurring in any profile except the last, hence this fix is a bit more involved.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,642,2020-09-18T20:21:26Z,2020-09-21T19:42:23Z,2020-09-21T20:02:09Z,MERGED,True,1,1,1,https://github.com/virgil-serbanuta,Allow the alignas test to run on 32-bit profiles.,1,[],https://github.com/kframework/c-semantics/pull/642,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/642,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,643,2020-10-20T08:00:16Z,2020-11-04T21:38:54Z,2020-11-04T21:39:00Z,MERGED,True,22,11,8,https://github.com/virgil-serbanuta,Update the k version,7,[],https://github.com/kframework/c-semantics/pull/643,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/643,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,644,2020-11-03T01:02:27Z,2020-11-03T01:02:32Z,2020-11-03T01:02:35Z,CLOSED,False,1,1,1,https://github.com/virgil-serbanuta,Test,3,[],https://github.com/kframework/c-semantics/pull/644,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/644,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,645,2020-11-04T22:53:26Z,,2020-12-17T19:48:26Z,OPEN,False,129,130,30,https://github.com/virgil-serbanuta,Fix some unused variable warnings.,12,[],https://github.com/kframework/c-semantics/pull/645,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/645,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,646,2020-11-05T17:16:39Z,2020-11-09T19:10:28Z,2020-11-09T19:10:36Z,MERGED,True,7,2,1,https://github.com/virgil-serbanuta,Get the entry function from the environment,1,[],https://github.com/kframework/c-semantics/pull/646,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/646,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,647,2020-11-11T23:01:23Z,2020-11-18T18:57:55Z,2020-11-18T18:58:06Z,MERGED,True,73,37,10,https://github.com/virgil-serbanuta,Different overflow warning code for explicit unsigned casts.,2,[],https://github.com/kframework/c-semantics/pull/647,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/647,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,648,2020-11-26T10:14:44Z,2020-11-26T10:16:15Z,2020-11-26T10:16:20Z,CLOSED,False,167,68,12,https://github.com/virgil-serbanuta,Add locations for expressions,1,[],https://github.com/kframework/c-semantics/pull/648,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/648,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,649,2020-11-26T10:16:38Z,2021-01-27T23:01:37Z,2021-01-28T11:04:32Z,MERGED,True,451,256,169,https://github.com/virgil-serbanuta,Add locations for expressions,2,[],https://github.com/kframework/c-semantics/pull/649,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/649,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,649,2020-11-26T10:16:38Z,2021-01-27T23:01:37Z,2021-01-28T11:04:32Z,MERGED,True,451,256,169,https://github.com/virgil-serbanuta,Add locations for expressions,2,[],https://github.com/kframework/c-semantics/pull/649,https://github.com/dwightguth,2,https://github.com/kframework/c-semantics/pull/649#issuecomment-761125914,,I don't understand how this design came about. What happened to following the same design as the c++ semantics?,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,649,2020-11-26T10:16:38Z,2021-01-27T23:01:37Z,2021-01-28T11:04:32Z,MERGED,True,451,256,169,https://github.com/virgil-serbanuta,Add locations for expressions,2,[],https://github.com/kframework/c-semantics/pull/649,https://github.com/virgil-serbanuta,3,https://github.com/kframework/c-semantics/pull/649#issuecomment-762178139,,"I don't understand how this design came about. What happened to following the same design as the c++ semantics?

I think that the main differences are the new location cell, the push-pop behaviour, and no context for ExpLoc, right?
Assuming that this is your objection:
I started with some code that was fairly similar to C++ one, and this should still be visible. However, if I remember correctly, there were a few cases when the warning/error for an instruction pointed to the expression inside the instruction instead of the entire instruction. I might be wrong, but there might have been some cases when the warning/error for an expression pointed at a random place inside the expression instead of the start of the expression.
Since I don't remember any examples, I'll try to switch back to using the main location cell, without push and pop, and using a context for ExpLoc, to see what diffs does it generate in the tests.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,649,2020-11-26T10:16:38Z,2021-01-27T23:01:37Z,2021-01-28T11:04:32Z,MERGED,True,451,256,169,https://github.com/virgil-serbanuta,Add locations for expressions,2,[],https://github.com/kframework/c-semantics/pull/649,https://github.com/virgil-serbanuta,4,https://github.com/kframework/c-semantics/pull/649#issuecomment-764864989,,"I'll fix the remaining issues without checking them one by one. I'm not sure which approach is better for the user, but the last example, with the error that disappears, is worrying, and I'm not sure what to do about it.
So far, the diffs between the two approaches are (first is my code, the second is following the the cpp design):

Division by 0 errors: pointer to the start of the expression => pointer to the last argument for the cpp approach. In this particular case, I guess it's a win for the cpp approach. In general, errors for operators switch form pointing to the start of the expression to to pointing to the last evaluated operator.
Examples:

return 1/a[0][0];  -- pointer on 1 vs a
~0; -- pointer on ~ vs 0
char* p = (char*)-1;  -- pointer on ""("" vs ""-""


Errors involving function calls (unimplemented function, stack traces, argument errors): pointer to the start of the expression => pointer to the last evaluated argument
Example:

return x6(0, u.b, va, s.bff, va); -- pointer on return vs va


Some bitfield errors - pointer at the start of the struct => pointer on the (last?) bitfield size
Example:

struct foo { short x : 5; }; -- pointer on ""struct"" vs ""5""


Some errors disappear because the last evaluated value comes from a system file.
Example:

int x = ULLONG_MAX;  -- pointer on ULLONG_MAX vs no error at all.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,649,2020-11-26T10:16:38Z,2021-01-27T23:01:37Z,2021-01-28T11:04:32Z,MERGED,True,451,256,169,https://github.com/virgil-serbanuta,Add locations for expressions,2,[],https://github.com/kframework/c-semantics/pull/649,https://github.com/dwightguth,5,https://github.com/kframework/c-semantics/pull/649#issuecomment-764872848,,"If you've managed to solve the issue where errors caused by standard header macros get suppressed because the location is treated as inside the header instead of the location where the macro is used, I think that's probably a compelling argument that your solution is an okay one. I will take another look at it if you restore that version.
Thanks for being patient with me and coming up with a good example of the differences between the approaches.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,649,2020-11-26T10:16:38Z,2021-01-27T23:01:37Z,2021-01-28T11:04:32Z,MERGED,True,451,256,169,https://github.com/virgil-serbanuta,Add locations for expressions,2,[],https://github.com/kframework/c-semantics/pull/649,https://github.com/virgil-serbanuta,6,https://github.com/kframework/c-semantics/pull/649#issuecomment-765344497,,"I reverted (but I also kept a backup branch, just in case it's still needed).
You probably already know this, but, for the record, I think this is what happens here:
With the cpp approach:

We start evaluating the larger expression. We put its location in the main location cell.
We evaluate the (constant) macro value, and we put its location in the location cell.
We (implicitly) cast the macro value, which fails, and we try to use the macro location, which suppresses the error.

With my approach:

We start evaluating the larger expression. We push its location on the stack.
We evaluate the (constant) macro value, and we push and pop its location from the stack.
We cast the value, which produces an error. The stack location is the one for the enclosing expression, which works.

I guess that we could try to fix the cpp approach by marking the location of system header expressions that are contained directly in user-based expressions as also being user-based, or something close to that.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,649,2020-11-26T10:16:38Z,2021-01-27T23:01:37Z,2021-01-28T11:04:32Z,MERGED,True,451,256,169,https://github.com/virgil-serbanuta,Add locations for expressions,2,[],https://github.com/kframework/c-semantics/pull/649,https://github.com/dwightguth,7,https://github.com/kframework/c-semantics/pull/649#issuecomment-768616689,,"This still feels a little messy, but it seems to work and has demonstrated advantages over what I originally proposed, so I guess it's okay.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,650,2020-12-01T19:15:53Z,2020-12-11T08:53:37Z,2020-12-11T08:53:42Z,MERGED,True,184,19,17,https://github.com/virgil-serbanuta,Add configuration variable for hardware addresses,2,[],https://github.com/kframework/c-semantics/pull/650,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/650,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,651,2020-12-17T16:30:05Z,2021-01-05T11:36:06Z,2021-01-05T11:36:11Z,MERGED,True,170,15,7,https://github.com/virgil-serbanuta,Fix hardware address dereferencing and subaddresses,7,[],https://github.com/kframework/c-semantics/pull/651,https://github.com/virgil-serbanuta,1,https://github.com/kframework/c-semantics/pull/651,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,652,2021-01-14T10:12:15Z,2021-02-02T09:55:09Z,2021-02-02T09:55:21Z,MERGED,True,243,135,26,https://github.com/h0nzZik,Pragma pack,23,[],https://github.com/kframework/c-semantics/pull/652,https://github.com/h0nzZik,1,https://github.com/kframework/c-semantics/pull/652,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,653,2021-02-01T23:48:36Z,2021-10-07T17:03:16Z,2021-10-07T17:03:16Z,CLOSED,False,1,1,1,https://github.com/rv-jenkins,Update dependency: .build/k,75,['automerge'],https://github.com/kframework/c-semantics/pull/653,https://github.com/rv-jenkins,1,https://github.com/kframework/c-semantics/pull/653,,,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,654,2021-03-04T20:35:24Z,2021-03-05T22:54:45Z,2021-03-05T23:25:38Z,MERGED,True,3,0,1,https://github.com/mariaKt,Added volatile in type builder,1,[],https://github.com/kframework/c-semantics/pull/654,https://github.com/mariaKt,1,https://github.com/kframework/c-semantics/pull/654,Adding volatile in type builder.,Adding volatile in type builder.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,655,2021-03-11T01:31:55Z,2021-03-12T19:29:08Z,2021-03-12T19:37:31Z,MERGED,True,108,3,5,https://github.com/mariaKt,Handle fields with both tags and empty declarator lists,3,[],https://github.com/kframework/c-semantics/pull/655,https://github.com/mariaKt,1,https://github.com/kframework/c-semantics/pull/655,"Ignore fields with both tags and empty declarator lists in structs and unions, when creating fields for structs and unions.
This is to address the problem (reported by DENSO) regarding difference in struct sizes computed by gcc/clang and kcc.
The struct's size was previously computed as 4 by kcc in the program Kevin provided (see below).
pragmapack.c.txt
The added unit tests are modified versions of pragmapack.c.txt.","Ignore fields with both tags and empty declarator lists in structs and unions, when creating fields for structs and unions.
This is to address the problem (reported by DENSO) regarding difference in struct sizes computed by gcc/clang and kcc.
The struct's size was previously computed as 4 by kcc in the program Kevin provided (see below).
pragmapack.c.txt
The added unit tests are modified versions of pragmapack.c.txt.",True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,658,2021-12-24T14:16:29Z,2022-01-30T15:01:17Z,2022-01-30T15:01:17Z,CLOSED,False,1,1,1,https://github.com/jcguu95,Update link to Ellison's thesis.,1,[],https://github.com/kframework/c-semantics/pull/658,https://github.com/jcguu95,1,https://github.com/kframework/c-semantics/pull/658,The old link is dead.,The old link is dead.,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,658,2021-12-24T14:16:29Z,2022-01-30T15:01:17Z,2022-01-30T15:01:17Z,CLOSED,False,1,1,1,https://github.com/jcguu95,Update link to Ellison's thesis.,1,[],https://github.com/kframework/c-semantics/pull/658,https://github.com/ellisonch,2,https://github.com/kframework/c-semantics/pull/658#issuecomment-1025161513,The old link is dead.,Closing.  Have submitted more comprehensive fix in #659,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,659,2022-01-30T14:58:57Z,2022-02-01T17:50:32Z,2022-02-01T17:50:35Z,MERGED,True,3,3,1,https://github.com/ellisonch,fixing links to papers in README.md,1,[],https://github.com/kframework/c-semantics/pull/659,https://github.com/ellisonch,1,https://github.com/kframework/c-semantics/pull/659,Fixing links to papers in README.md,Fixing links to papers in README.md,True,{}
kframework/c-semantics,https://github.com/kframework/c-semantics,659,2022-01-30T14:58:57Z,2022-02-01T17:50:32Z,2022-02-01T17:50:35Z,MERGED,True,3,3,1,https://github.com/ellisonch,fixing links to papers in README.md,1,[],https://github.com/kframework/c-semantics/pull/659,https://github.com/ellisonch,2,https://github.com/kframework/c-semantics/pull/659#issuecomment-1027117316,Fixing links to papers in README.md,"@dwightguth  Can you merge this?  I am not able to, perhaps because jenkins didn't approve it, or perhaps because it's my pull request.",True,{}
