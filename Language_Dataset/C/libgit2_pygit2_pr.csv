libgit2/pygit2,https://github.com/libgit2/pygit2,600,2016-02-28T11:54:40Z,2016-02-28T16:36:53Z,2016-02-28T16:36:53Z,MERGED,True,9,1,3,https://github.com/thomwiggers,Allow testing with tox,1,[],https://github.com/libgit2/pygit2/pull/600,https://github.com/thomwiggers,1,https://github.com/libgit2/pygit2/pull/600,Allow easy testing of the different environments supported by pygit2,Allow easy testing of the different environments supported by pygit2,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,606,2016-03-11T14:40:51Z,2016-03-11T15:10:24Z,2016-03-11T15:10:24Z,MERGED,True,2,2,1,https://github.com/raimondi1337,bump libgit2 version number,1,[],https://github.com/libgit2/pygit2/pull/606,https://github.com/raimondi1337,1,https://github.com/libgit2/pygit2/pull/606,Issue #605,Issue #605,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,607,2016-03-11T15:20:55Z,2016-03-20T11:16:33Z,2016-03-20T11:16:33Z,MERGED,True,1,1,1,https://github.com/raimondi1337,fix addition occurence of libgit2 version number,1,[],https://github.com/libgit2/pygit2/pull/607,https://github.com/raimondi1337,1,https://github.com/libgit2/pygit2/pull/607,Issue #605,Issue #605,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,609,2016-03-23T15:37:16Z,2016-03-23T15:40:03Z,2016-03-23T15:40:03Z,MERGED,True,1,1,1,https://github.com/akayj,wrong order of the args in docstring of write_archive,1,[],https://github.com/libgit2/pygit2/pull/609,https://github.com/akayj,1,https://github.com/libgit2/pygit2/pull/609,FIX #608,FIX #608,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,617,2016-04-06T13:17:21Z,2016-04-15T12:15:04Z,2016-04-15T12:15:04Z,CLOSED,False,2,0,1,https://github.com/ignatenkobrain,repository: don't loose file mode on write_archive(),1,[],https://github.com/libgit2/pygit2/pull/617,https://github.com/ignatenkobrain,1,https://github.com/libgit2/pygit2/pull/617,"Reference: #616
Signed-off-by: Igor Gnatenko ignatenko@redhat.com","Reference: #616
Signed-off-by: Igor Gnatenko ignatenko@redhat.com",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,617,2016-04-06T13:17:21Z,2016-04-15T12:15:04Z,2016-04-15T12:15:04Z,CLOSED,False,2,0,1,https://github.com/ignatenkobrain,repository: don't loose file mode on write_archive(),1,[],https://github.com/libgit2/pygit2/pull/617,https://github.com/ignatenkobrain,2,https://github.com/libgit2/pygit2/pull/617#issuecomment-206366902,"Reference: #616
Signed-off-by: Igor Gnatenko ignatenko@redhat.com","Unfortunately it's missing test, but I don't have time to write it. Please do it yourself ;)
Thanks!",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,617,2016-04-06T13:17:21Z,2016-04-15T12:15:04Z,2016-04-15T12:15:04Z,CLOSED,False,2,0,1,https://github.com/ignatenkobrain,repository: don't loose file mode on write_archive(),1,[],https://github.com/libgit2/pygit2/pull/617,https://github.com/carlosmn,3,https://github.com/libgit2/pygit2/pull/617#issuecomment-206594129,"Reference: #616
Signed-off-by: Igor Gnatenko ignatenko@redhat.com","There's a couple of issues with this code:

It assumes that the current working directory will be the repository working directory's root and it assumes it exists, but more importantly,
it stats a file on disk when it's dumping data from an arbitrary tree

The purpose of this method is to write out the contents of the given tree to an archive. The working directory's state should not indicate how we create the result. If the file in the tree is executable and that information is getting lost in the tarball, this still wouldn't be the right solution, because the file in the worktree might not share the exec bit with the file of the same name relative to the current working directory; the current working directory of the script running this may not be the repository's workdir, if it even has one.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,619,2016-04-15T12:08:55Z,2016-04-15T16:30:01Z,2016-04-15T16:30:01Z,MERGED,True,1,1,1,https://github.com/ignatenkobrain,"repository: SYMTYPE is constant in module tarfile, not in any class",1,[],https://github.com/libgit2/pygit2/pull/619,https://github.com/ignatenkobrain,1,https://github.com/libgit2/pygit2/pull/619,"Reference: #618
Signed-off-by: Igor Gnatenko ignatenko@redhat.com","Reference: #618
Signed-off-by: Igor Gnatenko ignatenko@redhat.com",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,621,2016-04-15T12:14:10Z,2016-04-17T18:50:34Z,2016-04-17T18:50:34Z,MERGED,True,1,1,1,https://github.com/ignatenkobrain,repository: decode() linkname,1,[],https://github.com/libgit2/pygit2/pull/621,https://github.com/ignatenkobrain,1,https://github.com/libgit2/pygit2/pull/621,"Reference: #620
Signed-off-by: Igor Gnatenko ignatenko@redhat.com","Reference: #620
Signed-off-by: Igor Gnatenko ignatenko@redhat.com",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,623,2016-04-18T19:59:28Z,2016-04-20T09:53:32Z,2016-04-20T09:53:32Z,MERGED,True,2,2,1,https://github.com/onovy,Fixed typo,1,[],https://github.com/libgit2/pygit2/pull/623,https://github.com/onovy,1,https://github.com/libgit2/pygit2/pull/623,,,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,629,2016-04-29T11:20:30Z,2016-04-30T06:36:37Z,2016-04-30T06:36:37Z,MERGED,True,0,15,1,https://github.com/carlosmn,Remove checks for obsolete methods,1,[],https://github.com/libgit2/pygit2/pull/629,https://github.com/carlosmn,1,https://github.com/libgit2/pygit2/pull/629,"This is not how you define your callbacks, so this test isn't testing
for anything useful.","This is not how you define your callbacks, so this test isn't testing
for anything useful.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,634,2016-06-01T22:01:36Z,2016-06-02T14:20:13Z,2016-06-02T14:26:45Z,MERGED,True,65,0,4,https://github.com/seanfarley,repository: add listall_reference_objects() method,1,[],https://github.com/libgit2/pygit2/pull/634,https://github.com/seanfarley,1,https://github.com/libgit2/pygit2/pull/634,"This allows for efficient reading of many references and their targets,
without incurring the overhead of lookup_reference() (which stats for
a loose ref and then reads packed-refs) which can be expensive on NFS
with thousands of refs.
We've been using this patch for a while and I think it makes sense for upstream pygit2. Any feedback on the idea?","This allows for efficient reading of many references and their targets,
without incurring the overhead of lookup_reference() (which stats for
a loose ref and then reads packed-refs) which can be expensive on NFS
with thousands of refs.
We've been using this patch for a while and I think it makes sense for upstream pygit2. Any feedback on the idea?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,634,2016-06-01T22:01:36Z,2016-06-02T14:20:13Z,2016-06-02T14:26:45Z,MERGED,True,65,0,4,https://github.com/seanfarley,repository: add listall_reference_objects() method,1,[],https://github.com/libgit2/pygit2/pull/634,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/634#issuecomment-223308365,"This allows for efficient reading of many references and their targets,
without incurring the overhead of lookup_reference() (which stats for
a loose ref and then reads packed-refs) which can be expensive on NFS
with thousands of refs.
We've been using this patch for a while and I think it makes sense for upstream pygit2. Any feedback on the idea?","merged, thanks!
(I think I prefer iterators, but that's more work, and listall_references returns a list anyway)",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,636,2016-06-07T20:41:44Z,2016-06-08T07:11:58Z,2016-06-08T07:11:58Z,MERGED,True,1,1,1,https://github.com/onovy,Make build reproducible,1,[],https://github.com/libgit2/pygit2/pull/636,https://github.com/onovy,1,https://github.com/libgit2/pygit2/pull/636,"Whilst working on the ""reproducible builds"" effort [0], we noticed that pygit2 could not be built reproducibly. This patch is fixing it.
[0] https://wiki.debian.org/ReproducibleBuilds","Whilst working on the ""reproducible builds"" effort [0], we noticed that pygit2 could not be built reproducibly. This patch is fixing it.
[0] https://wiki.debian.org/ReproducibleBuilds",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,640,2016-07-06T20:11:32Z,2016-07-10T18:25:17Z,2016-07-12T22:31:37Z,CLOSED,False,127,7,2,https://github.com/seanfarley,[RFC] install libgit2 via setup.py,2,[],https://github.com/libgit2/pygit2/pull/640,https://github.com/seanfarley,1,https://github.com/libgit2/pygit2/pull/640,"This is a new fallback for when LIBGIT2 is not defined. If libgit2 is not found, then setup.py will download and build libgit2 so that the correct version matches pygit2.
This is helpful for users on systems that don't have access to install packages or systems with a globally installed libgit that is the incorrect version.","This is a new fallback for when LIBGIT2 is not defined. If libgit2 is not found, then setup.py will download and build libgit2 so that the correct version matches pygit2.
This is helpful for users on systems that don't have access to install packages or systems with a globally installed libgit that is the incorrect version.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,640,2016-07-06T20:11:32Z,2016-07-10T18:25:17Z,2016-07-12T22:31:37Z,CLOSED,False,127,7,2,https://github.com/seanfarley,[RFC] install libgit2 via setup.py,2,[],https://github.com/libgit2/pygit2/pull/640,https://github.com/seanfarley,2,https://github.com/libgit2/pygit2/pull/640#issuecomment-230896328,"This is a new fallback for when LIBGIT2 is not defined. If libgit2 is not found, then setup.py will download and build libgit2 so that the correct version matches pygit2.
This is helpful for users on systems that don't have access to install packages or systems with a globally installed libgit that is the incorrect version.","There's some more cleanup I could do in setup.py but before I went down that path, I wanted to bounce this idea off to see if it was even remotely desired.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,640,2016-07-06T20:11:32Z,2016-07-10T18:25:17Z,2016-07-12T22:31:37Z,CLOSED,False,127,7,2,https://github.com/seanfarley,[RFC] install libgit2 via setup.py,2,[],https://github.com/libgit2/pygit2/pull/640,https://github.com/jdavid,3,https://github.com/libgit2/pygit2/pull/640#issuecomment-231603247,"This is a new fallback for when LIBGIT2 is not defined. If libgit2 is not found, then setup.py will download and build libgit2 so that the correct version matches pygit2.
This is helpful for users on systems that don't have access to install packages or systems with a globally installed libgit that is the incorrect version.","Hello Sean,
This is out of pygit2's scope in my opinion. An there is already venvgit2 filling the gap:

https://pypi.python.org/pypi/venvgit2

Maybe we should give visibility to venvgit2 in the pygit2 sites.
Thanks",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,640,2016-07-06T20:11:32Z,2016-07-10T18:25:17Z,2016-07-12T22:31:37Z,CLOSED,False,127,7,2,https://github.com/seanfarley,[RFC] install libgit2 via setup.py,2,[],https://github.com/libgit2/pygit2/pull/640,https://github.com/seanfarley,4,https://github.com/libgit2/pygit2/pull/640#issuecomment-232202130,"This is a new fallback for when LIBGIT2 is not defined. If libgit2 is not found, then setup.py will download and build libgit2 so that the correct version matches pygit2.
This is helpful for users on systems that don't have access to install packages or systems with a globally installed libgit that is the incorrect version.","Holy moly, I had no idea that project existed! Yeah, it'd be nice to promote venvgit2 for projects that want to deploy the two together.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,641,2016-07-06T21:16:15Z,2016-07-10T18:03:28Z,2016-07-10T18:03:28Z,MERGED,True,32,0,1,https://github.com/fourplusone,CI on windows,8,[],https://github.com/libgit2/pygit2/pull/641,https://github.com/fourplusone,1,https://github.com/libgit2/pygit2/pull/641,"Currently there is only support for CI on linux powered by travis. This pull request adds a appveyor.yml file to support CI on windows using appveyor. Also the pygit wheel is provided as a build artifact, making it easier for windows users to install a pygit2 version. Unfortunately the unit tests do not pass yes, which appears to be a general windows/pygit2 issue.
An example of a build can be found here: https://ci.appveyor.com/project/fourplusone/pygit2/build/job/74l4rw3vp2sqv60d
I would love to hear the repository owners feedback on this","Currently there is only support for CI on linux powered by travis. This pull request adds a appveyor.yml file to support CI on windows using appveyor. Also the pygit wheel is provided as a build artifact, making it easier for windows users to install a pygit2 version. Unfortunately the unit tests do not pass yes, which appears to be a general windows/pygit2 issue.
An example of a build can be found here: https://ci.appveyor.com/project/fourplusone/pygit2/build/job/74l4rw3vp2sqv60d
I would love to hear the repository owners feedback on this",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,643,2016-07-11T12:43:18Z,2016-07-11T13:07:18Z,2016-07-11T13:07:18Z,MERGED,True,16,1,1,https://github.com/mrh1997,Ammend the doc-string of Repository.diff(),1,[],https://github.com/libgit2/pygit2/pull/643,https://github.com/mrh1997,1,https://github.com/libgit2/pygit2/pull/643,"According to the old documentation, it was not clear how to compare
working directory/index to a git object.","According to the old documentation, it was not clear how to compare
working directory/index to a git object.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,651,2016-09-13T21:00:27Z,2016-09-15T07:25:57Z,2016-09-15T07:25:57Z,MERGED,True,1,1,1,https://github.com/mrh1997,Failure on non-ascii chars in error messages ,1,[],https://github.com/libgit2/pygit2/pull/651,https://github.com/mrh1997,1,https://github.com/libgit2/pygit2/pull/651,"Libgit2 partially forwards OS error message texts.
I.e. the following error message (from C.giterr_last()) is generated on my german windows 10, when a fetch() is done but the remote repo is unavailable: failed to send request: Das Zeitlimit f\xc3\xbcr den Vorgang wurde erreicht.\r\n.
To avoid that a UnicodeDecodeError due to the contained 'ü' (encoded as '\xc3\xbc') is raised the error message must be interpreted as UTF-8.
The solution is not be necessary on linux/osx as they return always ascii (as far as I know).
Thus this solution will not change the behaviour on linux/osx but fix windows issues.","Libgit2 partially forwards OS error message texts.
I.e. the following error message (from C.giterr_last()) is generated on my german windows 10, when a fetch() is done but the remote repo is unavailable: failed to send request: Das Zeitlimit f\xc3\xbcr den Vorgang wurde erreicht.\r\n.
To avoid that a UnicodeDecodeError due to the contained 'ü' (encoded as '\xc3\xbc') is raised the error message must be interpreted as UTF-8.
The solution is not be necessary on linux/osx as they return always ascii (as far as I know).
Thus this solution will not change the behaviour on linux/osx but fix windows issues.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,653,2016-10-03T18:32:20Z,2016-10-04T07:12:10Z,2016-10-04T07:12:10Z,MERGED,True,1,0,1,https://github.com/carlosmn,Add Repository.create_reference to the automethod list,1,[],https://github.com/libgit2/pygit2/pull/653,https://github.com/carlosmn,1,https://github.com/libgit2/pygit2/pull/653,,,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,656,2016-10-08T08:38:46Z,2016-10-13T10:36:25Z,2016-10-15T17:08:36Z,CLOSED,False,6,1,2,https://github.com/techtonik,Attempt to fix test on Windows,4,[],https://github.com/libgit2/pygit2/pull/656,https://github.com/techtonik,1,https://github.com/libgit2/pygit2/pull/656,Close index to allow directory removal there (#655),Close index to allow directory removal there (#655),True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,656,2016-10-08T08:38:46Z,2016-10-13T10:36:25Z,2016-10-15T17:08:36Z,CLOSED,False,6,1,2,https://github.com/techtonik,Attempt to fix test on Windows,4,[],https://github.com/libgit2/pygit2/pull/656,https://github.com/techtonik,2,https://github.com/libgit2/pygit2/pull/656#issuecomment-253116761,Close index to allow directory removal there (#655),"@jdavid this needs more serious debugging - https://ci.appveyor.com/project/techtonik/pygit2 - it looks like the problem might be in C level. Index open and closed correctly, and even though it is not clear why it happens 6 times instead of 3, it looks like C level doesn't close the handle. Can you check this with ptrace or with lsof at the end of archive test?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,656,2016-10-08T08:38:46Z,2016-10-13T10:36:25Z,2016-10-15T17:08:36Z,CLOSED,False,6,1,2,https://github.com/techtonik,Attempt to fix test on Windows,4,[],https://github.com/libgit2/pygit2/pull/656,https://github.com/techtonik,3,https://github.com/libgit2/pygit2/pull/656#issuecomment-253119127,Close index to allow directory removal there (#655),I can't run gitless because of this and run of of time to debug the issue.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,656,2016-10-08T08:38:46Z,2016-10-13T10:36:25Z,2016-10-15T17:08:36Z,CLOSED,False,6,1,2,https://github.com/techtonik,Attempt to fix test on Windows,4,[],https://github.com/libgit2/pygit2/pull/656,https://github.com/carlosmn,4,https://github.com/libgit2/pygit2/pull/656#issuecomment-253178668,Close index to allow directory removal there (#655),"You cannot get this kind of error due to Index. The file is closed as soon as the contents are read, and IIRC it's closed even before we start parsing the contents.
What does stay open (and it's what the AppVeyor logs show) are the packfile indices. These are kept open since we memory-map them since they're read-only and are potentially large. In order to close those handles, you need to make sure to free the underlying git_repository, which means making sure any Repository instances get garbage-collected.
You will then have to work around the object db being made out of read-only files, as Windows won't let you delete them normally, and it's usually a pain to deal with in test suites.
But fixing this in the test suite isn't going to fix anything else using pygit2. Whatever tool you're using must make sure to release its Repository instances on Windows if you want to delete repositories while the program is still running.",True,{'THUMBS_UP': ['https://github.com/techtonik']}
libgit2/pygit2,https://github.com/libgit2/pygit2,656,2016-10-08T08:38:46Z,2016-10-13T10:36:25Z,2016-10-15T17:08:36Z,CLOSED,False,6,1,2,https://github.com/techtonik,Attempt to fix test on Windows,4,[],https://github.com/libgit2/pygit2/pull/656,https://github.com/jdavid,5,https://github.com/libgit2/pygit2/pull/656#issuecomment-253477648,Close index to allow directory removal there (#655),"Thanks for the explanation @carlosmn
I have merged branch fourplusone/fix/windows-tests from @fourplusone and errors are down to 7 from 146 ... but the build is green, @fourplusone ?
Closing this PR.",True,{'THUMBS_UP': ['https://github.com/techtonik']}
libgit2/pygit2,https://github.com/libgit2/pygit2,657,2016-10-15T17:17:39Z,2016-10-18T07:39:09Z,2016-10-18T09:28:43Z,MERGED,True,1,1,1,https://github.com/techtonik,appveyor.yml Attempt to fix test run,1,[],https://github.com/libgit2/pygit2/pull/657,https://github.com/techtonik,1,https://github.com/libgit2/pygit2/pull/657,on AppVeyor for Windows (#655) broken by 865c2f0.,on AppVeyor for Windows (#655) broken by 865c2f0.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,657,2016-10-15T17:17:39Z,2016-10-18T07:39:09Z,2016-10-18T09:28:43Z,MERGED,True,1,1,1,https://github.com/techtonik,appveyor.yml Attempt to fix test run,1,[],https://github.com/libgit2/pygit2/pull/657,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/657#issuecomment-254429814,on AppVeyor for Windows (#655) broken by 865c2f0.,@fourplusone could you review this PR? I don't know much about appveyor.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,657,2016-10-15T17:17:39Z,2016-10-18T07:39:09Z,2016-10-18T09:28:43Z,MERGED,True,1,1,1,https://github.com/techtonik,appveyor.yml Attempt to fix test run,1,[],https://github.com/libgit2/pygit2/pull/657,https://github.com/jdavid,3,https://github.com/libgit2/pygit2/pull/657#issuecomment-254430152,on AppVeyor for Windows (#655) broken by 865c2f0.,"Oh wait, I saw the error at appveyor. No need for further review.",True,{'THUMBS_UP': ['https://github.com/techtonik']}
libgit2/pygit2,https://github.com/libgit2/pygit2,657,2016-10-15T17:17:39Z,2016-10-18T07:39:09Z,2016-10-18T09:28:43Z,MERGED,True,1,1,1,https://github.com/techtonik,appveyor.yml Attempt to fix test run,1,[],https://github.com/libgit2/pygit2/pull/657,https://github.com/techtonik,4,https://github.com/libgit2/pygit2/pull/657#issuecomment-254455205,on AppVeyor for Windows (#655) broken by 865c2f0.,Just for reference - https://ci.appveyor.com/project/jdavid/pygit2/branch/master/job/ra1y9vjcva0exm6m,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,658,2016-10-17T13:09:50Z,2018-01-14T18:25:02Z,2019-10-28T16:21:25Z,CLOSED,False,4,1,1,https://github.com/ThePsyjo,mitigate python3 import error,1,[],https://github.com/libgit2/pygit2/pull/658,https://github.com/ThePsyjo,1,https://github.com/libgit2/pygit2/pull/658,"I think it can be made better, but this one works so far for me. NOT tested with anything but 3.4.2 @ Debian Jessie !

ImportError: No module named '_build'","I think it can be made better, but this one works so far for me. NOT tested with anything but 3.4.2 @ Debian Jessie !

ImportError: No module named '_build'",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,658,2016-10-17T13:09:50Z,2018-01-14T18:25:02Z,2019-10-28T16:21:25Z,CLOSED,False,4,1,1,https://github.com/ThePsyjo,mitigate python3 import error,1,[],https://github.com/libgit2/pygit2/pull/658,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/658#issuecomment-254426818,"I think it can be made better, but this one works so far for me. NOT tested with anything but 3.4.2 @ Debian Jessie !

ImportError: No module named '_build'","The tests fail.
Which is the problem you are trying to fix?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,658,2016-10-17T13:09:50Z,2018-01-14T18:25:02Z,2019-10-28T16:21:25Z,CLOSED,False,4,1,1,https://github.com/ThePsyjo,mitigate python3 import error,1,[],https://github.com/libgit2/pygit2/pull/658,https://github.com/ThePsyjo,3,https://github.com/libgit2/pygit2/pull/658#issuecomment-254549878,"I think it can be made better, but this one works so far for me. NOT tested with anything but 3.4.2 @ Debian Jessie !

ImportError: No module named '_build'","Hi,
I know that tests fail. I Wrote the error in the initial comment:

ImportError: No module named '_build'

I fixed it on the server in question by just appending the dot in front of the module and it worked. As I wrote: it can certainly be made better than this, but I'm currently unable to proper test this.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,658,2016-10-17T13:09:50Z,2018-01-14T18:25:02Z,2019-10-28T16:21:25Z,CLOSED,False,4,1,1,https://github.com/ThePsyjo,mitigate python3 import error,1,[],https://github.com/libgit2/pygit2/pull/658,https://github.com/jdavid,4,https://github.com/libgit2/pygit2/pull/658#issuecomment-254730802,"I think it can be made better, but this one works so far for me. NOT tested with anything but 3.4.2 @ Debian Jessie !

ImportError: No module named '_build'","I do not understand what you are trying to fix. Currently the tests pass on the master branch, for all supported versions of Python, including Python 3, see https://travis-ci.org/libgit2/pygit2
Can you give an scenario to reproduce the error you are trying to fix?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,658,2016-10-17T13:09:50Z,2018-01-14T18:25:02Z,2019-10-28T16:21:25Z,CLOSED,False,4,1,1,https://github.com/ThePsyjo,mitigate python3 import error,1,[],https://github.com/libgit2/pygit2/pull/658,https://github.com/ThePsyjo,5,https://github.com/libgit2/pygit2/pull/658#issuecomment-254796607,"I think it can be made better, but this one works so far for me. NOT tested with anything but 3.4.2 @ Debian Jessie !

ImportError: No module named '_build'","It just does not work as it is in Debian Jessie.
It happend when I do this
from pygit2 import clone_repository, Repository
And the exceptions are this:
Traceback (most recent call last):
  File ""/usr/local/lib/python3.4/dist-packages/pygit2/ffi.py"", line 33, in <module>
    from ._libgit2 import ffi, lib as C
ImportError: No module named 'pygit2._libgit2'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
...
  File ""/usr/local/lib/python3.4/dist-packages/pygit2/__init__.py"", line 35, in <module>
    from .blame import Blame, BlameHunk
  File ""/usr/local/lib/python3.4/dist-packages/pygit2/blame.py"", line 32, in <module>
    from .errors import check_error
  File ""/usr/local/lib/python3.4/dist-packages/pygit2/errors.py"", line 29, in <module>
    from .ffi import ffi, C
  File ""/usr/local/lib/python3.4/dist-packages/pygit2/ffi.py"", line 35, in <module>
    from ._run import ffi, preamble, C_KEYWORDS
  File ""/usr/local/lib/python3.4/dist-packages/pygit2/_run.py"", line 42, in <module>
    from _build import get_libgit2_paths
ImportError: No module named '_build'


When change
from _build import get_libgit2_paths
to
from ._build import get_libgit2_paths
It works.
Environment:
Debian Jessie (8.2)
python3.4  3.4.2-1 (dpkg)
pygit2  0.24.1 (pip)",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,658,2016-10-17T13:09:50Z,2018-01-14T18:25:02Z,2019-10-28T16:21:25Z,CLOSED,False,4,1,1,https://github.com/ThePsyjo,mitigate python3 import error,1,[],https://github.com/libgit2/pygit2/pull/658,https://github.com/joshm91,6,https://github.com/libgit2/pygit2/pull/658#issuecomment-356962117,"I think it can be made better, but this one works so far for me. NOT tested with anything but 3.4.2 @ Debian Jessie !

ImportError: No module named '_build'","I'm seeing the same issue when trying to import pygit2 in an AWS Lambda instance running Python 3.6.  The same import works correctly on my local machine (OSX 10.11.6) running the same Python version.
The proposed fix solves the problem.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,658,2016-10-17T13:09:50Z,2018-01-14T18:25:02Z,2019-10-28T16:21:25Z,CLOSED,False,4,1,1,https://github.com/ThePsyjo,mitigate python3 import error,1,[],https://github.com/libgit2/pygit2/pull/658,https://github.com/jdavid,7,https://github.com/libgit2/pygit2/pull/658#issuecomment-357509382,"I think it can be made better, but this one works so far for me. NOT tested with anything but 3.4.2 @ Debian Jessie !

ImportError: No module named '_build'","I have pushed a different fix, can you try that?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,658,2016-10-17T13:09:50Z,2018-01-14T18:25:02Z,2019-10-28T16:21:25Z,CLOSED,False,4,1,1,https://github.com/ThePsyjo,mitigate python3 import error,1,[],https://github.com/libgit2/pygit2/pull/658,https://github.com/joshm91,8,https://github.com/libgit2/pygit2/pull/658#issuecomment-357519750,"I think it can be made better, but this one works so far for me. NOT tested with anything but 3.4.2 @ Debian Jessie !

ImportError: No module named '_build'",The error actually just disappeared for me... The package I'm uploading to Lambda is just using v0.26.3 and the import error stopped happening. Thanks though!,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,658,2016-10-17T13:09:50Z,2018-01-14T18:25:02Z,2019-10-28T16:21:25Z,CLOSED,False,4,1,1,https://github.com/ThePsyjo,mitigate python3 import error,1,[],https://github.com/libgit2/pygit2/pull/658,https://github.com/jdavid,9,https://github.com/libgit2/pygit2/pull/658#issuecomment-357531073,"I think it can be made better, but this one works so far for me. NOT tested with anything but 3.4.2 @ Debian Jessie !

ImportError: No module named '_build'",Ok.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,659,2016-10-18T09:41:01Z,2016-10-18T10:06:01Z,2016-10-18T10:19:32Z,MERGED,True,1,0,1,https://github.com/techtonik,appveyor.yml Attempt to fix test failure reporting,1,[],https://github.com/libgit2/pygit2/pull/659,https://github.com/techtonik,1,https://github.com/libgit2/pygit2/pull/659,"A followup to #655.
PowerShell script in testing does not fail build, see https://ci.appveyor.com/project/jdavid/pygit2/branch/master/job/ra1y9vjcva0exm6m and explanation at http://help.appveyor.com/discussions/problems/4498-powershell-exception-in-test_script-does-not-fail-build","A followup to #655.
PowerShell script in testing does not fail build, see https://ci.appveyor.com/project/jdavid/pygit2/branch/master/job/ra1y9vjcva0exm6m and explanation at http://help.appveyor.com/discussions/problems/4498-powershell-exception-in-test_script-does-not-fail-build",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,660,2016-10-18T10:51:13Z,2016-10-18T11:22:43Z,2016-10-18T11:24:18Z,MERGED,True,1,1,1,https://github.com/techtonik,appveyor.yml Fix nosetests report upload,1,[],https://github.com/libgit2/pygit2/pull/660,https://github.com/techtonik,1,https://github.com/libgit2/pygit2/pull/660,"Another usability fix for #655.
/xunit/ endpoint in AppVeyor is made for uploading xUnit.net reports
http://help.appveyor.com/discussions/problems/5264-xunit-results-are-not-being-parsed","Another usability fix for #655.
/xunit/ endpoint in AppVeyor is made for uploading xUnit.net reports
http://help.appveyor.com/discussions/problems/5264-xunit-results-are-not-being-parsed",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,660,2016-10-18T10:51:13Z,2016-10-18T11:22:43Z,2016-10-18T11:24:18Z,MERGED,True,1,1,1,https://github.com/techtonik,appveyor.yml Fix nosetests report upload,1,[],https://github.com/libgit2/pygit2/pull/660,https://github.com/techtonik,2,https://github.com/libgit2/pygit2/pull/660#issuecomment-254475823,"Another usability fix for #655.
/xunit/ endpoint in AppVeyor is made for uploading xUnit.net reports
http://help.appveyor.com/discussions/problems/5264-xunit-results-are-not-being-parsed",See https://ci.appveyor.com/project/techtonik/pygit2/build/tests,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,661,2016-10-21T03:12:44Z,2016-10-21T07:19:00Z,2016-10-21T14:47:41Z,MERGED,True,32,16,4,https://github.com/fourplusone,Fix windows tests,2,[],https://github.com/libgit2/pygit2/pull/661,https://github.com/fourplusone,1,https://github.com/libgit2/pygit2/pull/661,This commit will fix the remaining failing windows tests.,This commit will fix the remaining failing windows tests.,True,{'THUMBS_UP': ['https://github.com/techtonik']}
libgit2/pygit2,https://github.com/libgit2/pygit2,661,2016-10-21T03:12:44Z,2016-10-21T07:19:00Z,2016-10-21T14:47:41Z,MERGED,True,32,16,4,https://github.com/fourplusone,Fix windows tests,2,[],https://github.com/libgit2/pygit2/pull/661,https://github.com/techtonik,2,https://github.com/libgit2/pygit2/pull/661#issuecomment-255397089,This commit will fix the remaining failing windows tests.,,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,663,2016-10-23T22:00:10Z,2016-10-24T07:22:41Z,2016-10-24T07:22:41Z,MERGED,True,6,0,1,https://github.com/mrh1997,Extend comment of Remote.push by note about push_update_reference.,1,[],https://github.com/libgit2/pygit2/pull/663,https://github.com/mrh1997,1,https://github.com/libgit2/pygit2/pull/663,"As happened in support request libgit2/libgit2#3963 it can be easily overseen,
that push returns True, when the remote has installed a hook that denies the commits.","As happened in support request libgit2/libgit2#3963 it can be easily overseen,
that push returns True, when the remote has installed a hook that denies the commits.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,666,2016-10-28T06:59:20Z,2016-11-01T12:50:42Z,2016-11-02T13:29:01Z,CLOSED,False,8,8,1,https://github.com/techtonik,appveyor.yml - Build matrix enhancements,4,[],https://github.com/libgit2/pygit2/pull/666,https://github.com/techtonik,1,https://github.com/libgit2/pygit2/pull/666,"Reuse PYTHON env var for invoking pip
Use proper version of Visual Studio for Python 3.5
https://wiki.python.org/moin/WindowsCompilers#Which_Microsoft_Visual_C.2B-.2B-_compiler_to_use_with_a_specific_Python_version_.3F","Reuse PYTHON env var for invoking pip
Use proper version of Visual Studio for Python 3.5
https://wiki.python.org/moin/WindowsCompilers#Which_Microsoft_Visual_C.2B-.2B-_compiler_to_use_with_a_specific_Python_version_.3F",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,666,2016-10-28T06:59:20Z,2016-11-01T12:50:42Z,2016-11-02T13:29:01Z,CLOSED,False,8,8,1,https://github.com/techtonik,appveyor.yml - Build matrix enhancements,4,[],https://github.com/libgit2/pygit2/pull/666,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/666#issuecomment-257558630,"Reuse PYTHON env var for invoking pip
Use proper version of Visual Studio for Python 3.5
https://wiki.python.org/moin/WindowsCompilers#Which_Microsoft_Visual_C.2B-.2B-_compiler_to_use_with_a_specific_Python_version_.3F","Merged #667 instead. All tests passing for Py27, 33, 34 and 35 (32 is not supported by appveyor).",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,666,2016-10-28T06:59:20Z,2016-11-01T12:50:42Z,2016-11-02T13:29:01Z,CLOSED,False,8,8,1,https://github.com/techtonik,appveyor.yml - Build matrix enhancements,4,[],https://github.com/libgit2/pygit2/pull/666,https://github.com/techtonik,3,https://github.com/libgit2/pygit2/pull/666#issuecomment-257572231,"Reuse PYTHON env var for invoking pip
Use proper version of Visual Studio for Python 3.5
https://wiki.python.org/moin/WindowsCompilers#Which_Microsoft_Visual_C.2B-.2B-_compiler_to_use_with_a_specific_Python_version_.3F",@jdavid probably need a fix for Visual Studio version for Python 2.7,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,666,2016-10-28T06:59:20Z,2016-11-01T12:50:42Z,2016-11-02T13:29:01Z,CLOSED,False,8,8,1,https://github.com/techtonik,appveyor.yml - Build matrix enhancements,4,[],https://github.com/libgit2/pygit2/pull/666,https://github.com/jdavid,4,https://github.com/libgit2/pygit2/pull/666#issuecomment-257687696,"Reuse PYTHON env var for invoking pip
Use proper version of Visual Studio for Python 3.5
https://wiki.python.org/moin/WindowsCompilers#Which_Microsoft_Visual_C.2B-.2B-_compiler_to_use_with_a_specific_Python_version_.3F",The unit tests pass. We will see if users have issues now the wheels are available on pypi.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,666,2016-10-28T06:59:20Z,2016-11-01T12:50:42Z,2016-11-02T13:29:01Z,CLOSED,False,8,8,1,https://github.com/techtonik,appveyor.yml - Build matrix enhancements,4,[],https://github.com/libgit2/pygit2/pull/666,https://github.com/techtonik,5,https://github.com/libgit2/pygit2/pull/666#issuecomment-257863827,"Reuse PYTHON env var for invoking pip
Use proper version of Visual Studio for Python 3.5
https://wiki.python.org/moin/WindowsCompilers#Which_Microsoft_Visual_C.2B-.2B-_compiler_to_use_with_a_specific_Python_version_.3F","@jdavid they may pass, but crash on some other system than build server. https://mingwpy.github.io/ project has more details.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,667,2016-10-30T10:53:59Z,2016-11-01T12:45:58Z,2016-11-01T13:48:44Z,MERGED,True,25,11,2,https://github.com/fourplusone,Add appveyor testing for python 3.4 and below,2,[],https://github.com/libgit2/pygit2/pull/667,https://github.com/fourplusone,1,https://github.com/libgit2/pygit2/pull/667,Also fixes garbage collection issue for ConflictCollection,Also fixes garbage collection issue for ConflictCollection,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,667,2016-10-30T10:53:59Z,2016-11-01T12:45:58Z,2016-11-01T13:48:44Z,MERGED,True,25,11,2,https://github.com/fourplusone,Add appveyor testing for python 3.4 and below,2,[],https://github.com/libgit2/pygit2/pull/667,https://github.com/fourplusone,2,https://github.com/libgit2/pygit2/pull/667#issuecomment-257404641,Also fixes garbage collection issue for ConflictCollection,"Appveyor seems to have a problem here:
Exception calling ""UploadFile"" with ""2"" argument(s): ""The remote server returned an error: (500) Internal Server Error.""
I don't know if it's an error within the build script or a temporary appveyor issue",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,670,2016-11-14T15:41:49Z,2016-12-23T20:38:14Z,2016-12-23T20:38:14Z,MERGED,True,88,49,6,https://github.com/carlosmn,Update for v0.25,2,[],https://github.com/libgit2/pygit2/pull/670,https://github.com/carlosmn,1,https://github.com/libgit2/pygit2/pull/670,"We're hoping to have a release candidate for 0.25 this week so there won't be any more API changes.
This PR is just for the changes necessary to keep working with the new version and adding support for the new features like specifying a proxy is out of scope.","We're hoping to have a release candidate for 0.25 this week so there won't be any more API changes.
This PR is just for the changes necessary to keep working with the new version and adding support for the new features like specifying a proxy is out of scope.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,670,2016-11-14T15:41:49Z,2016-12-23T20:38:14Z,2016-12-23T20:38:14Z,MERGED,True,88,49,6,https://github.com/carlosmn,Update for v0.25,2,[],https://github.com/libgit2/pygit2/pull/670,https://github.com/carlosmn,2,https://github.com/libgit2/pygit2/pull/670#issuecomment-269042307,"We're hoping to have a release candidate for 0.25 this week so there won't be any more API changes.
This PR is just for the changes necessary to keep working with the new version and adding support for the new features like specifying a proxy is out of scope.",I've updated the code to expect v0.25 as the version now that there's a release out.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,677,2016-12-03T12:55:39Z,2016-12-03T16:13:24Z,2016-12-03T16:13:24Z,MERGED,True,221,0,4,https://github.com/kszucs,More options in settings,2,[],https://github.com/libgit2/pygit2/pull/677,https://github.com/kszucs,1,https://github.com/libgit2/pygit2/pull/677,"Added mwindow_mapped_limit, cached_memory, enable_caching, cache_max_size, cache_object_limit options","Added mwindow_mapped_limit, cached_memory, enable_caching, cache_max_size, cache_object_limit options",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,682,2016-12-19T19:47:15Z,2016-12-20T19:08:54Z,2016-12-20T22:07:00Z,MERGED,True,6,2,1,https://github.com/bisho,Make pygit2 throw if tree of a commit is not found,1,[],https://github.com/libgit2/pygit2/pull/682,https://github.com/bisho,1,https://github.com/libgit2/pygit2/pull/682,"Commit objects in git always have a tree_id associated, that points to the corresponding Tree object.
When the Tree object is missing, the repo is corrupted.
In those cases:

official git cli fatals with status code 128 and message:
fatal: unable to read tree <hash>
libgit2 returns error GIT_ENOTFOUND when calling git_commit_tree()
pygit2 when accessing the tree by id with repo[commit.tree_id] raises a KeyError: <hash>

But on the other hand, on the commit object, rather than throwing and exception, pygit2 is swallowing the error returned by libgit2 and setting the <Commit object>.tree property to None.
This patch changes the behavior to raise an error in those cases.
Rationale:
None is arguably the wrong choice to encode an error condition, specially in python that is used heavily.
In particular this caused in our system to assume there was an empty tree, and the sync service that tails git repo changes decided to DELETE everything. The code was using None to represent empty tree, useful for example when we need to compare a path between two commits (the path might be non-existent at one of the commits you are comparing).
I think that in this case the right decision would be to raise since is an exceptional case, caused by a corrupted repo, is more consistent with other tools, and ensures user code does not take the wrong decisions.
For curiosity the corrupted repository can happen more commonly than expected. We run our repositories on a shared NFS filer, and one of our servers didn't have the lookupcache=positive option. This makes NFS cache the metadata (files on a directory for example) and use that for negative lookups (to deny existance of files). In this case, the commit object was on a directory not cached, so the commit was seen immediately, but the tree object was in a folder that was cached, the cache didn't contained the tree object, and thus for some seconds the tree was not existing and the repo was corrupted. Our sync service saw tree being None and decided to delete everything, causing a lot of issues down the way.
Repro steps:

Create a test repo with a couple of commits.
Find the tree_id for HEAD:

$ git cat-file -p HEAD
tree 3683f870be446c7cc05ffaef9fa06415276e1828
parent 37d122c3ffcaa77dbe12930c2a573648fdecee06
[...]


Delete the tree object:
rm .git/objects/36/83f870be446c7cc05ffaef9fa06415276e1828
Try using that repo with pygit2:
Before: repo.revparse_single('HEAD').tree will be None
After: it repo.revparse_single('HEAD') raises GitError: Unable to read tree 3683f870be446c7cc05ffaef9fa06415276e1828","Commit objects in git always have a tree_id associated, that points to the corresponding Tree object.
When the Tree object is missing, the repo is corrupted.
In those cases:

official git cli fatals with status code 128 and message:
fatal: unable to read tree <hash>
libgit2 returns error GIT_ENOTFOUND when calling git_commit_tree()
pygit2 when accessing the tree by id with repo[commit.tree_id] raises a KeyError: <hash>

But on the other hand, on the commit object, rather than throwing and exception, pygit2 is swallowing the error returned by libgit2 and setting the <Commit object>.tree property to None.
This patch changes the behavior to raise an error in those cases.
Rationale:
None is arguably the wrong choice to encode an error condition, specially in python that is used heavily.
In particular this caused in our system to assume there was an empty tree, and the sync service that tails git repo changes decided to DELETE everything. The code was using None to represent empty tree, useful for example when we need to compare a path between two commits (the path might be non-existent at one of the commits you are comparing).
I think that in this case the right decision would be to raise since is an exceptional case, caused by a corrupted repo, is more consistent with other tools, and ensures user code does not take the wrong decisions.
For curiosity the corrupted repository can happen more commonly than expected. We run our repositories on a shared NFS filer, and one of our servers didn't have the lookupcache=positive option. This makes NFS cache the metadata (files on a directory for example) and use that for negative lookups (to deny existance of files). In this case, the commit object was on a directory not cached, so the commit was seen immediately, but the tree object was in a folder that was cached, the cache didn't contained the tree object, and thus for some seconds the tree was not existing and the repo was corrupted. Our sync service saw tree being None and decided to delete everything, causing a lot of issues down the way.
Repro steps:

Create a test repo with a couple of commits.
Find the tree_id for HEAD:

$ git cat-file -p HEAD
tree 3683f870be446c7cc05ffaef9fa06415276e1828
parent 37d122c3ffcaa77dbe12930c2a573648fdecee06
[...]


Delete the tree object:
rm .git/objects/36/83f870be446c7cc05ffaef9fa06415276e1828
Try using that repo with pygit2:
Before: repo.revparse_single('HEAD').tree will be None
After: it repo.revparse_single('HEAD') raises GitError: Unable to read tree 3683f870be446c7cc05ffaef9fa06415276e1828",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,682,2016-12-19T19:47:15Z,2016-12-20T19:08:54Z,2016-12-20T22:07:00Z,MERGED,True,6,2,1,https://github.com/bisho,Make pygit2 throw if tree of a commit is not found,1,[],https://github.com/libgit2/pygit2/pull/682,https://github.com/bisho,2,https://github.com/libgit2/pygit2/pull/682#issuecomment-268372258,"Commit objects in git always have a tree_id associated, that points to the corresponding Tree object.
When the Tree object is missing, the repo is corrupted.
In those cases:

official git cli fatals with status code 128 and message:
fatal: unable to read tree <hash>
libgit2 returns error GIT_ENOTFOUND when calling git_commit_tree()
pygit2 when accessing the tree by id with repo[commit.tree_id] raises a KeyError: <hash>

But on the other hand, on the commit object, rather than throwing and exception, pygit2 is swallowing the error returned by libgit2 and setting the <Commit object>.tree property to None.
This patch changes the behavior to raise an error in those cases.
Rationale:
None is arguably the wrong choice to encode an error condition, specially in python that is used heavily.
In particular this caused in our system to assume there was an empty tree, and the sync service that tails git repo changes decided to DELETE everything. The code was using None to represent empty tree, useful for example when we need to compare a path between two commits (the path might be non-existent at one of the commits you are comparing).
I think that in this case the right decision would be to raise since is an exceptional case, caused by a corrupted repo, is more consistent with other tools, and ensures user code does not take the wrong decisions.
For curiosity the corrupted repository can happen more commonly than expected. We run our repositories on a shared NFS filer, and one of our servers didn't have the lookupcache=positive option. This makes NFS cache the metadata (files on a directory for example) and use that for negative lookups (to deny existance of files). In this case, the commit object was on a directory not cached, so the commit was seen immediately, but the tree object was in a folder that was cached, the cache didn't contained the tree object, and thus for some seconds the tree was not existing and the repo was corrupted. Our sync service saw tree being None and decided to delete everything, causing a lot of issues down the way.
Repro steps:

Create a test repo with a couple of commits.
Find the tree_id for HEAD:

$ git cat-file -p HEAD
tree 3683f870be446c7cc05ffaef9fa06415276e1828
parent 37d122c3ffcaa77dbe12930c2a573648fdecee06
[...]


Delete the tree object:
rm .git/objects/36/83f870be446c7cc05ffaef9fa06415276e1828
Try using that repo with pygit2:
Before: repo.revparse_single('HEAD').tree will be None
After: it repo.revparse_single('HEAD') raises GitError: Unable to read tree 3683f870be446c7cc05ffaef9fa06415276e1828",Thanks!,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,682,2016-12-19T19:47:15Z,2016-12-20T19:08:54Z,2016-12-20T22:07:00Z,MERGED,True,6,2,1,https://github.com/bisho,Make pygit2 throw if tree of a commit is not found,1,[],https://github.com/libgit2/pygit2/pull/682,https://github.com/jdavid,3,https://github.com/libgit2/pygit2/pull/682#issuecomment-268373265,"Commit objects in git always have a tree_id associated, that points to the corresponding Tree object.
When the Tree object is missing, the repo is corrupted.
In those cases:

official git cli fatals with status code 128 and message:
fatal: unable to read tree <hash>
libgit2 returns error GIT_ENOTFOUND when calling git_commit_tree()
pygit2 when accessing the tree by id with repo[commit.tree_id] raises a KeyError: <hash>

But on the other hand, on the commit object, rather than throwing and exception, pygit2 is swallowing the error returned by libgit2 and setting the <Commit object>.tree property to None.
This patch changes the behavior to raise an error in those cases.
Rationale:
None is arguably the wrong choice to encode an error condition, specially in python that is used heavily.
In particular this caused in our system to assume there was an empty tree, and the sync service that tails git repo changes decided to DELETE everything. The code was using None to represent empty tree, useful for example when we need to compare a path between two commits (the path might be non-existent at one of the commits you are comparing).
I think that in this case the right decision would be to raise since is an exceptional case, caused by a corrupted repo, is more consistent with other tools, and ensures user code does not take the wrong decisions.
For curiosity the corrupted repository can happen more commonly than expected. We run our repositories on a shared NFS filer, and one of our servers didn't have the lookupcache=positive option. This makes NFS cache the metadata (files on a directory for example) and use that for negative lookups (to deny existance of files). In this case, the commit object was on a directory not cached, so the commit was seen immediately, but the tree object was in a folder that was cached, the cache didn't contained the tree object, and thus for some seconds the tree was not existing and the repo was corrupted. Our sync service saw tree being None and decided to delete everything, causing a lot of issues down the way.
Repro steps:

Create a test repo with a couple of commits.
Find the tree_id for HEAD:

$ git cat-file -p HEAD
tree 3683f870be446c7cc05ffaef9fa06415276e1828
parent 37d122c3ffcaa77dbe12930c2a573648fdecee06
[...]


Delete the tree object:
rm .git/objects/36/83f870be446c7cc05ffaef9fa06415276e1828
Try using that repo with pygit2:
Before: repo.revparse_single('HEAD').tree will be None
After: it repo.revparse_single('HEAD') raises GitError: Unable to read tree 3683f870be446c7cc05ffaef9fa06415276e1828","Thank you @bisho , great explanation",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,685,2017-01-02T23:18:37Z,2017-01-03T08:06:15Z,2017-01-03T08:06:15Z,MERGED,True,0,5,1,https://github.com/tmr232,Remove unused code,1,[],https://github.com/libgit2/pygit2/pull/685,https://github.com/tmr232,1,https://github.com/libgit2/pygit2/pull/685,"Removed a chunk of code from checkout that did nothing, but had a bug.
When checking out from a branch-less state (like the state when a repository is first initialized) the code failed.
The failure was due to trying to get some properties of the current branch, which were never used in the code.","Removed a chunk of code from checkout that did nothing, but had a bug.
When checking out from a branch-less state (like the state when a repository is first initialized) the code failed.
The failure was due to trying to get some properties of the current branch, which were never used in the code.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,690,2017-02-09T08:17:44Z,2017-02-09T16:32:46Z,2019-02-12T09:05:52Z,MERGED,True,72,27,3,https://github.com/hishnash,Add support for custom backends,1,[],https://github.com/libgit2/pygit2/pull/690,https://github.com/hishnash,1,https://github.com/libgit2/pygit2/pull/690,"We use a Capsule to pass the git_repository struct through python.
This Capsule does not need a destructor since libgit will free the git_repository struct when it needs to.
this addresses some of the needs for #76","We use a Capsule to pass the git_repository struct through python.
This Capsule does not need a destructor since libgit will free the git_repository struct when it needs to.
this addresses some of the needs for #76",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,690,2017-02-09T08:17:44Z,2017-02-09T16:32:46Z,2019-02-12T09:05:52Z,MERGED,True,72,27,3,https://github.com/hishnash,Add support for custom backends,1,[],https://github.com/libgit2/pygit2/pull/690,https://github.com/webknjaz,2,https://github.com/libgit2/pygit2/pull/690#issuecomment-462368962,"We use a Capsule to pass the git_repository struct through python.
This Capsule does not need a destructor since libgit will free the git_repository struct when it needs to.
this addresses some of the needs for #76","Hey @hishnash, is it possible to use this with non-file backends? like mysql or so",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,690,2017-02-09T08:17:44Z,2017-02-09T16:32:46Z,2019-02-12T09:05:52Z,MERGED,True,72,27,3,https://github.com/hishnash,Add support for custom backends,1,[],https://github.com/libgit2/pygit2/pull/690,https://github.com/hishnash,3,https://github.com/libgit2/pygit2/pull/690#issuecomment-462667957,"We use a Capsule to pass the git_repository struct through python.
This Capsule does not need a destructor since libgit will free the git_repository struct when it needs to.
this addresses some of the needs for #76","@webknjaz yes this was done to allow for https://github.com/luckymarmot/GitPagedArchiveBackend
here we are just using a custom backed for the ODB portion but you could use something very simlare to get a RefDB backend loaded as well.",True,{'EYES': ['https://github.com/webknjaz']}
libgit2/pygit2,https://github.com/libgit2/pygit2,690,2017-02-09T08:17:44Z,2017-02-09T16:32:46Z,2019-02-12T09:05:52Z,MERGED,True,72,27,3,https://github.com/hishnash,Add support for custom backends,1,[],https://github.com/libgit2/pygit2/pull/690,https://github.com/webknjaz,4,https://github.com/libgit2/pygit2/pull/690#issuecomment-462676458,"We use a Capsule to pass the git_repository struct through python.
This Capsule does not need a destructor since libgit will free the git_repository struct when it needs to.
this addresses some of the needs for #76","Thank you for the reference, I'll try that :)",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,691,2017-02-27T14:34:35Z,2018-01-14T18:29:08Z,2018-01-14T18:29:08Z,CLOSED,False,319,1,6,https://github.com/rmedaer,Worktrees implementation,6,[],https://github.com/libgit2/pygit2/pull/691,https://github.com/rmedaer,1,https://github.com/libgit2/pygit2/pull/691,"I started to implement Python binding for worktrees management.
Added the following features:

Add a new worktree: Repository#add_worktree(name, path) -> None
List existing worktrees: Repository#list_worktrees() -> [string]","I started to implement Python binding for worktrees management.
Added the following features:

Add a new worktree: Repository#add_worktree(name, path) -> None
List existing worktrees: Repository#list_worktrees() -> [string]",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,691,2017-02-27T14:34:35Z,2018-01-14T18:29:08Z,2018-01-14T18:29:08Z,CLOSED,False,319,1,6,https://github.com/rmedaer,Worktrees implementation,6,[],https://github.com/libgit2/pygit2/pull/691,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/691#issuecomment-282749218,"I started to implement Python binding for worktrees management.
Added the following features:

Add a new worktree: Repository#add_worktree(name, path) -> None
List existing worktrees: Repository#list_worktrees() -> [string]","Hi @rmedaer
Merging will have to wait for a release of libgit2 with git_worktree_*
Could you add some unit tests?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,691,2017-02-27T14:34:35Z,2018-01-14T18:29:08Z,2018-01-14T18:29:08Z,CLOSED,False,319,1,6,https://github.com/rmedaer,Worktrees implementation,6,[],https://github.com/libgit2/pygit2/pull/691,https://github.com/rmedaer,3,https://github.com/libgit2/pygit2/pull/691#issuecomment-282754179,"I started to implement Python binding for worktrees management.
Added the following features:

Add a new worktree: Repository#add_worktree(name, path) -> None
List existing worktrees: Repository#list_worktrees() -> [string]","@jdavid no problem, I can wait. Btw, I'm adding a new PyObject Worktree to implement all the features (prune, lock, unlock).
Actually my first commit was a test.
Of course, once it's implemented I can add some unit tests ! ;-)",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,691,2017-02-27T14:34:35Z,2018-01-14T18:29:08Z,2018-01-14T18:29:08Z,CLOSED,False,319,1,6,https://github.com/rmedaer,Worktrees implementation,6,[],https://github.com/libgit2/pygit2/pull/691,https://github.com/pks-t,4,https://github.com/libgit2/pygit2/pull/691#issuecomment-282959882,"I started to implement Python binding for worktrees management.
Added the following features:

Add a new worktree: Repository#add_worktree(name, path) -> None
List existing worktrees: Repository#list_worktrees() -> [string]",@rmedaer Are there any comments regarding the C API itself? The implementation is obviously still very new and I'd like to weed out design smells before it hits the first release,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,691,2017-02-27T14:34:35Z,2018-01-14T18:29:08Z,2018-01-14T18:29:08Z,CLOSED,False,319,1,6,https://github.com/rmedaer,Worktrees implementation,6,[],https://github.com/libgit2/pygit2/pull/691,https://github.com/rmedaer,5,https://github.com/libgit2/pygit2/pull/691#issuecomment-282969939,"I started to implement Python binding for worktrees management.
Added the following features:

Add a new worktree: Repository#add_worktree(name, path) -> None
List existing worktrees: Repository#list_worktrees() -> [string]","[EDIT: I misunderstood your comment]
I don't really have comment about it. However I was just surprised about the prune function which is not removing head ref.
It might be useful to document the workflow to remove a worktree. If I well understood:

unlink gitlink_path directory
unlink gitdir_path directory
remove refs/heads/<worktree>",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,691,2017-02-27T14:34:35Z,2018-01-14T18:29:08Z,2018-01-14T18:29:08Z,CLOSED,False,319,1,6,https://github.com/rmedaer,Worktrees implementation,6,[],https://github.com/libgit2/pygit2/pull/691,https://github.com/jdavid,6,https://github.com/libgit2/pygit2/pull/691#issuecomment-313440381,"I started to implement Python binding for worktrees management.
Added the following features:

Add a new worktree: Repository#add_worktree(name, path) -> None
List existing worktrees: Repository#list_worktrees() -> [string]","Hi @rmedaer
There are conflicts merging this, could you please rebase?
Thanks!",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,691,2017-02-27T14:34:35Z,2018-01-14T18:29:08Z,2018-01-14T18:29:08Z,CLOSED,False,319,1,6,https://github.com/rmedaer,Worktrees implementation,6,[],https://github.com/libgit2/pygit2/pull/691,https://github.com/jdavid,7,https://github.com/libgit2/pygit2/pull/691#issuecomment-357531303,"I started to implement Python binding for worktrees management.
Added the following features:

Add a new worktree: Repository#add_worktree(name, path) -> None
List existing worktrees: Repository#list_worktrees() -> [string]",This was superseded by #719,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,692,2017-03-06T05:10:52Z,2017-03-22T19:55:51Z,2017-03-22T19:55:52Z,MERGED,True,163,2,3,https://github.com/jasedit,Add init_submodules and update_submodules interfaces,3,[],https://github.com/libgit2/pygit2/pull/692,https://github.com/jasedit,1,https://github.com/libgit2/pygit2/pull/692,"This exposes the ability to initialize and update submodules on a repository, which are useful for accessing files in submodules (or being able to use files in a repository which rely on submodule files.)","This exposes the ability to initialize and update submodules on a repository, which are useful for accessing files in submodules (or being able to use files in a repository which rely on submodule files.)",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,692,2017-03-06T05:10:52Z,2017-03-22T19:55:51Z,2017-03-22T19:55:52Z,MERGED,True,163,2,3,https://github.com/jasedit,Add init_submodules and update_submodules interfaces,3,[],https://github.com/libgit2/pygit2/pull/692,https://github.com/jasedit,2,https://github.com/libgit2/pygit2/pull/692#issuecomment-284305729,"This exposes the ability to initialize and update submodules on a repository, which are useful for accessing files in submodules (or being able to use files in a repository which rely on submodule files.)","Odd - the unit tests for submodules all work without error for me on my local machine. I'm uncertain why the unit tests are reporting the construction of the git repositories is failing - if there's any insight as to what may be causing those errors, I'm happy to resolve them.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,692,2017-03-06T05:10:52Z,2017-03-22T19:55:51Z,2017-03-22T19:55:52Z,MERGED,True,163,2,3,https://github.com/jasedit,Add init_submodules and update_submodules interfaces,3,[],https://github.com/libgit2/pygit2/pull/692,https://github.com/jasedit,3,https://github.com/libgit2/pygit2/pull/692#issuecomment-284600035,"This exposes the ability to initialize and update submodules on a repository, which are useful for accessing files in submodules (or being able to use files in a repository which rely on submodule files.)","If I execute the submodule units tests as a standalone unit (e.g. python -m unittest test/test_submodule.py) the unit tests pass without error. However, using the command python setup.py test causes not only several submodule unit tests to fail (on my machine, these fail now fail with the error reading: _pygit2.GitError: unexpected data at the end of the pack), but several other tests suddenly fail, which don't fail on the CI execution.
I've also introduced the flag to allow automatically initializing submodules when executing an update command.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,692,2017-03-06T05:10:52Z,2017-03-22T19:55:51Z,2017-03-22T19:55:52Z,MERGED,True,163,2,3,https://github.com/jasedit,Add init_submodules and update_submodules interfaces,3,[],https://github.com/libgit2/pygit2/pull/692,https://github.com/jdavid,4,https://github.com/libgit2/pygit2/pull/692#issuecomment-284659516,"This exposes the ability to initialize and update submodules on a repository, which are useful for accessing files in submodules (or being able to use files in a repository which rely on submodule files.)","Hi Jason, thanks for contributing.
I don't know about the unexpected data at the end of the pack errors, maybe @carlosmn has a clue.
Could you please handle the Windows errors shown in AppVeyor?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,692,2017-03-06T05:10:52Z,2017-03-22T19:55:51Z,2017-03-22T19:55:52Z,MERGED,True,163,2,3,https://github.com/jasedit,Add init_submodules and update_submodules interfaces,3,[],https://github.com/libgit2/pygit2/pull/692,https://github.com/jasedit,5,https://github.com/libgit2/pygit2/pull/692#issuecomment-284754247,"This exposes the ability to initialize and update submodules on a repository, which are useful for accessing files in submodules (or being able to use files in a repository which rely on submodule files.)","Compiling under Visual Studio 10 has been fixed - it turns out the C support under Visual Studio 10 requires all variable declarations at the start of the function, which is different than the other compilers (Is Visual Studio 10 using the C89 standard as opposed to the C99 standard?)",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,692,2017-03-06T05:10:52Z,2017-03-22T19:55:51Z,2017-03-22T19:55:52Z,MERGED,True,163,2,3,https://github.com/jasedit,Add init_submodules and update_submodules interfaces,3,[],https://github.com/libgit2/pygit2/pull/692,https://github.com/jdavid,6,https://github.com/libgit2/pygit2/pull/692#issuecomment-284785808,"This exposes the ability to initialize and update submodules on a repository, which are useful for accessing files in submodules (or being able to use files in a repository which rely on submodule files.)","Yes, as far as I know VS is stuck with C89.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,692,2017-03-06T05:10:52Z,2017-03-22T19:55:51Z,2017-03-22T19:55:52Z,MERGED,True,163,2,3,https://github.com/jasedit,Add init_submodules and update_submodules interfaces,3,[],https://github.com/libgit2/pygit2/pull/692,https://github.com/jasedit,7,https://github.com/libgit2/pygit2/pull/692#issuecomment-285135881,"This exposes the ability to initialize and update submodules on a repository, which are useful for accessing files in submodules (or being able to use files in a repository which rely on submodule files.)","Building under Visual Studio 10 works now, though the tests still fail with the mysterious unexpected data error.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,692,2017-03-06T05:10:52Z,2017-03-22T19:55:51Z,2017-03-22T19:55:52Z,MERGED,True,163,2,3,https://github.com/jasedit,Add init_submodules and update_submodules interfaces,3,[],https://github.com/libgit2/pygit2/pull/692,https://github.com/jdavid,8,https://github.com/libgit2/pygit2/pull/692#issuecomment-287005012,"This exposes the ability to initialize and update submodules on a repository, which are useful for accessing files in submodules (or being able to use files in a repository which rely on submodule files.)","I got the same errors locally. So eventually I will look into them, when I find some time.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,692,2017-03-06T05:10:52Z,2017-03-22T19:55:51Z,2017-03-22T19:55:52Z,MERGED,True,163,2,3,https://github.com/jasedit,Add init_submodules and update_submodules interfaces,3,[],https://github.com/libgit2/pygit2/pull/692,https://github.com/jasedit,9,https://github.com/libgit2/pygit2/pull/692#issuecomment-287106815,"This exposes the ability to initialize and update submodules on a repository, which are useful for accessing files in submodules (or being able to use files in a repository which rely on submodule files.)","I asked in the libgit2 Slack for help to make sure I wasn't making calls in an obviously incorrect fashion, but no one there had any major insights into the issue yet. I'm willing to chase down possible leads, but right now I'm at a bit of a loss.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,692,2017-03-06T05:10:52Z,2017-03-22T19:55:51Z,2017-03-22T19:55:52Z,MERGED,True,163,2,3,https://github.com/jasedit,Add init_submodules and update_submodules interfaces,3,[],https://github.com/libgit2/pygit2/pull/692,https://github.com/jdavid,10,https://github.com/libgit2/pygit2/pull/692#issuecomment-288433494,"This exposes the ability to initialize and update submodules on a repository, which are useful for accessing files in submodules (or being able to use files in a repository which rely on submodule files.)","Please rebase over the master branch, the tests should pass now.
Otherwise, cloning pygit2 from github makes the tests very slow; it would be nice to clone from the local disk instead. Also, since this feature is not performance sensible it is good candidate to be implemented with cffi, maybe you want to try.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,692,2017-03-06T05:10:52Z,2017-03-22T19:55:51Z,2017-03-22T19:55:52Z,MERGED,True,163,2,3,https://github.com/jasedit,Add init_submodules and update_submodules interfaces,3,[],https://github.com/libgit2/pygit2/pull/692,https://github.com/jasedit,11,https://github.com/libgit2/pygit2/pull/692#issuecomment-288439727,"This exposes the ability to initialize and update submodules on a repository, which are useful for accessing files in submodules (or being able to use files in a repository which rely on submodule files.)","I had initially attempted to use local repositories for submodules, but ran into errors attempting to operate on the relevant submodules. I don't happen to have the relevant errors on hand, since I resolved them by using a remote submodule.
What were the underlying issues that were interacting with this PR? It looks like there were issues related to running tests in sequence and side effects?
I'm not terribly familiar with writing interfaces using cffi - are there any decent tutorials or examples in the repository I can look at? I've spent a bit of time poking around a few files that appear to use it, but it doesn't seem as obvious as I would hope. I can see some of how to access/create C objects through CFFI, but I have no insight on how to implement callback functions.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,692,2017-03-06T05:10:52Z,2017-03-22T19:55:51Z,2017-03-22T19:55:52Z,MERGED,True,163,2,3,https://github.com/jasedit,Add init_submodules and update_submodules interfaces,3,[],https://github.com/libgit2/pygit2/pull/692,https://github.com/jdavid,12,https://github.com/libgit2/pygit2/pull/692#issuecomment-288443256,"This exposes the ability to initialize and update submodules on a repository, which are useful for accessing files in submodules (or being able to use files in a repository which rely on submodule files.)","The test_options changed some pygit2 options that made test_submodules to fail. I fixed it in commit d622e87 (though now there is 1 test in AppVeyor failing, and I don't have Windows to reproduce/fix it)
A number of features in pygit2 are implemented with cffi already. Anyway this is not a requirement for merging.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,695,2017-03-27T21:13:01Z,2017-03-30T07:18:13Z,2017-03-30T07:18:13Z,MERGED,True,172,3,6,https://github.com/nhynes,Wrap git_stash_*,8,[],https://github.com/libgit2/pygit2/pull/695,https://github.com/nhynes,1,https://github.com/libgit2/pygit2/pull/695,Resolves #611 (one year later).,Resolves #611 (one year later).,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,696,2017-03-29T22:15:25Z,2017-07-05T21:22:22Z,2017-07-09T18:42:16Z,MERGED,True,32,0,3,https://github.com/nhynes,Wrap branch_is_checked_out,1,[],https://github.com/libgit2/pygit2/pull/696,https://github.com/nhynes,1,https://github.com/libgit2/pygit2/pull/696,,,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,696,2017-03-29T22:15:25Z,2017-07-05T21:22:22Z,2017-07-09T18:42:16Z,MERGED,True,32,0,3,https://github.com/nhynes,Wrap branch_is_checked_out,1,[],https://github.com/libgit2/pygit2/pull/696,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/696#issuecomment-290325171,,"Hi @nhynes
This will have to wait for libgit2 v0.26 to be released",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,697,2017-04-05T13:39:41Z,2017-04-05T16:03:34Z,2017-04-05T16:03:34Z,MERGED,True,3,0,1,https://github.com/tmr232,Added explicit check for `path = None` in `init_repository`,1,[],https://github.com/libgit2/pygit2/pull/697,https://github.com/tmr232,1,https://github.com/libgit2/pygit2/pull/697,"Closes #688.
This can be solved in several ways, but this seemed the simplest and consistent with the issue discussion.","Closes #688.
This can be solved in several ways, but this seemed the simplest and consistent with the issue discussion.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,698,2017-04-05T18:05:16Z,2017-04-05T19:11:01Z,2017-04-09T12:17:44Z,MERGED,True,14,8,1,https://github.com/tmr232,Better error messages for opening repos.,2,[],https://github.com/libgit2/pygit2/pull/698,https://github.com/tmr232,1,https://github.com/libgit2/pygit2/pull/698,Closes #645.,Closes #645.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,698,2017-04-05T18:05:16Z,2017-04-05T19:11:01Z,2017-04-09T12:17:44Z,MERGED,True,14,8,1,https://github.com/tmr232,Better error messages for opening repos.,2,[],https://github.com/libgit2/pygit2/pull/698,https://github.com/tmr232,2,https://github.com/libgit2/pygit2/pull/698#issuecomment-291953015,Closes #645.,@jdavid Seems like the same tests fail for every change I submit. Is it something wrong with the tests or the code?,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,698,2017-04-05T18:05:16Z,2017-04-05T19:11:01Z,2017-04-09T12:17:44Z,MERGED,True,14,8,1,https://github.com/tmr232,Better error messages for opening repos.,2,[],https://github.com/libgit2/pygit2/pull/698,https://github.com/jdavid,3,https://github.com/libgit2/pygit2/pull/698#issuecomment-292782390,Closes #645.,It should be good for the tests now,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,700,2017-04-12T13:01:15Z,2017-04-19T19:06:06Z,2017-04-19T19:35:17Z,MERGED,True,215,25,5,https://github.com/tmr232,Normalize error handling for Repository_lookup_branch,3,[],https://github.com/libgit2/pygit2/pull/700,https://github.com/tmr232,1,https://github.com/libgit2/pygit2/pull/700,"Closes #681
I'm not sure that there isn't other code that needs to be changed around there.","Closes #681
I'm not sure that there isn't other code that needs to be changed around there.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,700,2017-04-12T13:01:15Z,2017-04-19T19:06:06Z,2017-04-19T19:35:17Z,MERGED,True,215,25,5,https://github.com/tmr232,Normalize error handling for Repository_lookup_branch,3,[],https://github.com/libgit2/pygit2/pull/700,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/700#issuecomment-293816228,"Closes #681
I'm not sure that there isn't other code that needs to be changed around there.","The first commit should be reverted so we don't break backwards compatibility, then the second commit will need to be updated. Maybe do a new single commit to make the PR easier to read.
Iterating over a dict returns the keys not the values, we should do the same.
While we implement the mapping interface, it doesn't need to be identical to a dict. For instance the fact that branches.get('') raises a ValueError is correct, since the empty string does not make sense for a branch name.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,700,2017-04-12T13:01:15Z,2017-04-19T19:06:06Z,2017-04-19T19:35:17Z,MERGED,True,215,25,5,https://github.com/tmr232,Normalize error handling for Repository_lookup_branch,3,[],https://github.com/libgit2/pygit2/pull/700,https://github.com/jdavid,3,https://github.com/libgit2/pygit2/pull/700#issuecomment-294460460,"Closes #681
I'm not sure that there isn't other code that needs to be changed around there.","Sorry, I posted some comments to the fist commit, then saw you have addressed them in the second commit, so I have removed those comments.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,700,2017-04-12T13:01:15Z,2017-04-19T19:06:06Z,2017-04-19T19:35:17Z,MERGED,True,215,25,5,https://github.com/tmr232,Normalize error handling for Repository_lookup_branch,3,[],https://github.com/libgit2/pygit2/pull/700,https://github.com/jdavid,4,https://github.com/libgit2/pygit2/pull/700#issuecomment-294462572,"Closes #681
I'm not sure that there isn't other code that needs to be changed around there.","Maybe the implementation can be simplified if replacing local, remote and top by a single option flag whose values can be None, GIT_BRANCH_LOCAL or GIT_BRANCH_REMOTE.
If you can make a single commit it will be easier to review.
Thanks!",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,700,2017-04-12T13:01:15Z,2017-04-19T19:06:06Z,2017-04-19T19:35:17Z,MERGED,True,215,25,5,https://github.com/tmr232,Normalize error handling for Repository_lookup_branch,3,[],https://github.com/libgit2/pygit2/pull/700,https://github.com/tmr232,5,https://github.com/libgit2/pygit2/pull/700#issuecomment-294572345,"Closes #681
I'm not sure that there isn't other code that needs to be changed around there.","Fixed the last comment, squashed the commits into one, and also copied the branch test cases & converted them to the new API.
Let's hope it will all be green 😃",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,700,2017-04-12T13:01:15Z,2017-04-19T19:06:06Z,2017-04-19T19:35:17Z,MERGED,True,215,25,5,https://github.com/tmr232,Normalize error handling for Repository_lookup_branch,3,[],https://github.com/libgit2/pygit2/pull/700,https://github.com/jdavid,6,https://github.com/libgit2/pygit2/pull/700#issuecomment-294950249,"Closes #681
I'm not sure that there isn't other code that needs to be changed around there.","Good work, it is almost done 😃
Could you update the documentation too? There should be no mention of the old API in the documentation.
Thanks!",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,700,2017-04-12T13:01:15Z,2017-04-19T19:06:06Z,2017-04-19T19:35:17Z,MERGED,True,215,25,5,https://github.com/tmr232,Normalize error handling for Repository_lookup_branch,3,[],https://github.com/libgit2/pygit2/pull/700,https://github.com/tmr232,7,https://github.com/libgit2/pygit2/pull/700#issuecomment-294967492,"Closes #681
I'm not sure that there isn't other code that needs to be changed around there.",Sure. Should I document in the code as well? Any guidelines for that?,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,700,2017-04-12T13:01:15Z,2017-04-19T19:06:06Z,2017-04-19T19:35:17Z,MERGED,True,215,25,5,https://github.com/tmr232,Normalize error handling for Repository_lookup_branch,3,[],https://github.com/libgit2/pygit2/pull/700,https://github.com/jdavid,8,https://github.com/libgit2/pygit2/pull/700#issuecomment-295136737,"Closes #681
I'm not sure that there isn't other code that needs to be changed around there.",I think the code is clear enough.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,700,2017-04-12T13:01:15Z,2017-04-19T19:06:06Z,2017-04-19T19:35:17Z,MERGED,True,215,25,5,https://github.com/tmr232,Normalize error handling for Repository_lookup_branch,3,[],https://github.com/libgit2/pygit2/pull/700,https://github.com/tmr232,9,https://github.com/libgit2/pygit2/pull/700#issuecomment-295370382,"Closes #681
I'm not sure that there isn't other code that needs to be changed around there.","I couldn't get the docs to build yet (also, the os.uname in conf.py is bad for Windows), but I think I got it all.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,700,2017-04-12T13:01:15Z,2017-04-19T19:06:06Z,2017-04-19T19:35:17Z,MERGED,True,215,25,5,https://github.com/tmr232,Normalize error handling for Repository_lookup_branch,3,[],https://github.com/libgit2/pygit2/pull/700,https://github.com/jdavid,10,https://github.com/libgit2/pygit2/pull/700#issuecomment-295405757,"Closes #681
I'm not sure that there isn't other code that needs to be changed around there.","Merged, thanks!",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,701,2017-04-19T20:03:33Z,2017-04-21T09:37:05Z,2017-04-21T09:39:44Z,MERGED,True,246,35,3,https://github.com/tmr232,Added Repository.references accessor.,1,[],https://github.com/libgit2/pygit2/pull/701,https://github.com/tmr232,1,https://github.com/libgit2/pygit2/pull/701,"Same concept as the Repository.branches one.
Docs & tests already in place.","Same concept as the Repository.branches one.
Docs & tests already in place.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,701,2017-04-19T20:03:33Z,2017-04-21T09:37:05Z,2017-04-21T09:39:44Z,MERGED,True,246,35,3,https://github.com/tmr232,Added Repository.references accessor.,1,[],https://github.com/libgit2/pygit2/pull/701,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/701#issuecomment-295758618,"Same concept as the Repository.branches one.
Docs & tests already in place.","The ReferencesTest class is defined twice, so only the tests in the last one will be run.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,701,2017-04-19T20:03:33Z,2017-04-21T09:37:05Z,2017-04-21T09:39:44Z,MERGED,True,246,35,3,https://github.com/tmr232,Added Repository.references accessor.,1,[],https://github.com/libgit2/pygit2/pull/701,https://github.com/tmr232,3,https://github.com/libgit2/pygit2/pull/701#issuecomment-295822860,"Same concept as the Repository.branches one.
Docs & tests already in place.","Oops.
Fixed now, I hope it still passes.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,701,2017-04-19T20:03:33Z,2017-04-21T09:37:05Z,2017-04-21T09:39:44Z,MERGED,True,246,35,3,https://github.com/tmr232,Added Repository.references accessor.,1,[],https://github.com/libgit2/pygit2/pull/701,https://github.com/jdavid,4,https://github.com/libgit2/pygit2/pull/701#issuecomment-295860223,"Same concept as the Repository.branches one.
Docs & tests already in place.",tests have failed,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,701,2017-04-19T20:03:33Z,2017-04-21T09:37:05Z,2017-04-21T09:39:44Z,MERGED,True,246,35,3,https://github.com/tmr232,Added Repository.references accessor.,1,[],https://github.com/libgit2/pygit2/pull/701,https://github.com/tmr232,5,https://github.com/libgit2/pygit2/pull/701#issuecomment-296121102,"Same concept as the Repository.branches one.
Docs & tests already in place.","Sorry for the repeating commits, I want to fix it, but I am not anywhere near my dev-station, so no way to test the code other than the online tests.
I'll squash it all once done.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,701,2017-04-19T20:03:33Z,2017-04-21T09:37:05Z,2017-04-21T09:39:44Z,MERGED,True,246,35,3,https://github.com/tmr232,Added Repository.references accessor.,1,[],https://github.com/libgit2/pygit2/pull/701,https://github.com/tmr232,6,https://github.com/libgit2/pygit2/pull/701#issuecomment-296132669,"Same concept as the Repository.branches one.
Docs & tests already in place.",Squashed the fixes into a single commit.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,701,2017-04-19T20:03:33Z,2017-04-21T09:37:05Z,2017-04-21T09:39:44Z,MERGED,True,246,35,3,https://github.com/tmr232,Added Repository.references accessor.,1,[],https://github.com/libgit2/pygit2/pull/701,https://github.com/tmr232,7,https://github.com/libgit2/pygit2/pull/701#issuecomment-296136632,"Same concept as the Repository.branches one.
Docs & tests already in place.","There seems to be only one failed test, and it seems unrelated to the changes. Any way to re-trigger the tests?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,701,2017-04-19T20:03:33Z,2017-04-21T09:37:05Z,2017-04-21T09:39:44Z,MERGED,True,246,35,3,https://github.com/tmr232,Added Repository.references accessor.,1,[],https://github.com/libgit2/pygit2/pull/701,https://github.com/jdavid,8,https://github.com/libgit2/pygit2/pull/701#issuecomment-296145005,"Same concept as the Repository.branches one.
Docs & tests already in place.","Merged, and fixed the docs.
That test fails randomly and should be updated, but it is unrelated.
Thanks!",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,705,2017-05-03T14:31:12Z,2020-05-03T16:54:15Z,2020-05-03T16:54:16Z,MERGED,True,66,0,2,https://github.com/FabriceSalvaire,Added recipe for git-add and git-reset (staging),1,[],https://github.com/libgit2/pygit2/pull/705,https://github.com/FabriceSalvaire,1,https://github.com/libgit2/pygit2/pull/705,,,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,705,2017-05-03T14:31:12Z,2020-05-03T16:54:15Z,2020-05-03T16:54:16Z,MERGED,True,66,0,2,https://github.com/FabriceSalvaire,Added recipe for git-add and git-reset (staging),1,[],https://github.com/libgit2/pygit2/pull/705,https://github.com/FabriceSalvaire,2,https://github.com/libgit2/pygit2/pull/705#issuecomment-298946467,,"Must be fixed to pygit2.IndexEntry(path, ...",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,705,2017-05-03T14:31:12Z,2020-05-03T16:54:15Z,2020-05-03T16:54:16Z,MERGED,True,66,0,2,https://github.com/FabriceSalvaire,Added recipe for git-add and git-reset (staging),1,[],https://github.com/libgit2/pygit2/pull/705,https://github.com/FabriceSalvaire,3,https://github.com/libgit2/pygit2/pull/705#issuecomment-298959859,,"I am wrong, we have to use Status http://www.pygit2.org/working-copy.html#status but doc is minimalist",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,705,2017-05-03T14:31:12Z,2020-05-03T16:54:15Z,2020-05-03T16:54:16Z,MERGED,True,66,0,2,https://github.com/FabriceSalvaire,Added recipe for git-add and git-reset (staging),1,[],https://github.com/libgit2/pygit2/pull/705,https://github.com/jdavid,4,https://github.com/libgit2/pygit2/pull/705#issuecomment-299272144,,"Yes use repo.status_file(path), which is just a wrapper around git_status_file, see https://libgit2.github.com/libgit2/#HEAD/group/status/git_status_file and https://libgit2.github.com/libgit2/#HEAD/type/git_status_t
The documentation is lacking, any help to improve it is appreciated, thanks!",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,705,2017-05-03T14:31:12Z,2020-05-03T16:54:15Z,2020-05-03T16:54:16Z,MERGED,True,66,0,2,https://github.com/FabriceSalvaire,Added recipe for git-add and git-reset (staging),1,[],https://github.com/libgit2/pygit2/pull/705,https://github.com/FabriceSalvaire,5,https://github.com/libgit2/pygit2/pull/705#issuecomment-299273717,,I will remake a PR,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,706,2017-05-06T19:51:47Z,2017-05-06T21:55:52Z,2017-05-06T21:55:52Z,MERGED,True,8,4,3,https://github.com/lfos,Fix parameter passing of describe patterns,1,[],https://github.com/libgit2/pygit2/pull/706,https://github.com/lfos,1,https://github.com/libgit2/pygit2/pull/706,"When ffi.new() is used to build a new pointer object, the returned
pointer object has ownership on the allocated memory. When it is
garbage-collected, then the memory is freed. Thus, we need to make sure
the original object survives its use, otherwise the casted pointer will
point to garbage.
This fixes one test which was failing with the latest CFFI version, see
issue #694. Thus, this commit also reverts 803b1cb (cffi 1.10 not yet
supported, 2017-03-22) where the latest CFFI version was marked as
unsupported.
Signed-off-by: Lukas Fleischer lfleischer@lfos.de","When ffi.new() is used to build a new pointer object, the returned
pointer object has ownership on the allocated memory. When it is
garbage-collected, then the memory is freed. Thus, we need to make sure
the original object survives its use, otherwise the casted pointer will
point to garbage.
This fixes one test which was failing with the latest CFFI version, see
issue #694. Thus, this commit also reverts 803b1cb (cffi 1.10 not yet
supported, 2017-03-22) where the latest CFFI version was marked as
unsupported.
Signed-off-by: Lukas Fleischer lfleischer@lfos.de",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,707,2017-05-07T06:00:30Z,2017-05-07T07:41:13Z,2017-05-07T07:41:14Z,MERGED,True,1,2,2,https://github.com/lfos,Fix trivial compile warnings,2,[],https://github.com/libgit2/pygit2/pull/707,https://github.com/lfos,1,https://github.com/libgit2/pygit2/pull/707,This fixes two compiler warnings on master.,This fixes two compiler warnings on master.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,708,2017-05-07T06:28:26Z,2017-05-07T11:41:10Z,2017-05-07T11:41:10Z,MERGED,True,4,2,1,https://github.com/lfos,Randomize OID object hashes,1,[],https://github.com/libgit2/pygit2/pull/708,https://github.com/lfos,1,https://github.com/libgit2/pygit2/pull/708,"Instead of using type punning to convert the OID to a Python hash, use
_Py_HashBytes() to hash the OID again. This means we no longer make any
assumptions on the internal representation of OID values or Python
hashes (before this commit, we at least relied on the fact that OID
hases are longer than Python hashes). Moreover, the random seed stored
in PYTHONHASHSEED is now honored.
This also fixes a compiler warning seen with -Wstrict-aliasing.
Signed-off-by: Lukas Fleischer lfleischer@lfos.de","Instead of using type punning to convert the OID to a Python hash, use
_Py_HashBytes() to hash the OID again. This means we no longer make any
assumptions on the internal representation of OID values or Python
hashes (before this commit, we at least relied on the fact that OID
hases are longer than Python hashes). Moreover, the random seed stored
in PYTHONHASHSEED is now honored.
This also fixes a compiler warning seen with -Wstrict-aliasing.
Signed-off-by: Lukas Fleischer lfleischer@lfos.de",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,708,2017-05-07T06:28:26Z,2017-05-07T11:41:10Z,2017-05-07T11:41:10Z,MERGED,True,4,2,1,https://github.com/lfos,Randomize OID object hashes,1,[],https://github.com/libgit2/pygit2/pull/708,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/708#issuecomment-299689222,"Instead of using type punning to convert the OID to a Python hash, use
_Py_HashBytes() to hash the OID again. This means we no longer make any
assumptions on the internal representation of OID values or Python
hashes (before this commit, we at least relied on the fact that OID
hases are longer than Python hashes). Moreover, the random seed stored
in PYTHONHASHSEED is now honored.
This also fixes a compiler warning seen with -Wstrict-aliasing.
Signed-off-by: Lukas Fleischer lfleischer@lfos.de","This doesn't work with Python 2, as it lacks _Py_HashBytes",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,711,2017-06-05T21:10:37Z,2017-06-06T16:24:57Z,2017-06-06T16:25:19Z,MERGED,True,63,3,5,https://github.com/mark-adams,revert: Add support for git_revert_commit via Repository.revert_commit(),2,[],https://github.com/libgit2/pygit2/pull/711,https://github.com/mark-adams,1,https://github.com/libgit2/pygit2/pull/711,"This change adds Repository.revert_commit() which wraps around git_revert_commit which will return an Index with the appropriate changes to revert the specified commit.
Fixes #710","This change adds Repository.revert_commit() which wraps around git_revert_commit which will return an Index with the appropriate changes to revert the specified commit.
Fixes #710",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,711,2017-06-05T21:10:37Z,2017-06-06T16:24:57Z,2017-06-06T16:25:19Z,MERGED,True,63,3,5,https://github.com/mark-adams,revert: Add support for git_revert_commit via Repository.revert_commit(),2,[],https://github.com/libgit2/pygit2/pull/711,https://github.com/mark-adams,2,https://github.com/libgit2/pygit2/pull/711#issuecomment-306312305,"This change adds Repository.revert_commit() which wraps around git_revert_commit which will return an Index with the appropriate changes to revert the specified commit.
Fixes #710",@jdavid This is ready for your review when you have a moment.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,711,2017-06-05T21:10:37Z,2017-06-06T16:24:57Z,2017-06-06T16:25:19Z,MERGED,True,63,3,5,https://github.com/mark-adams,revert: Add support for git_revert_commit via Repository.revert_commit(),2,[],https://github.com/libgit2/pygit2/pull/711,https://github.com/mark-adams,3,https://github.com/libgit2/pygit2/pull/711#issuecomment-306519795,"This change adds Repository.revert_commit() which wraps around git_revert_commit which will return an Index with the appropriate changes to revert the specified commit.
Fixes #710",Err.... @jdavid I don't think this failure is a result of my change. Do you have any thoughts?,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,711,2017-06-05T21:10:37Z,2017-06-06T16:24:57Z,2017-06-06T16:25:19Z,MERGED,True,63,3,5,https://github.com/mark-adams,revert: Add support for git_revert_commit via Repository.revert_commit(),2,[],https://github.com/libgit2/pygit2/pull/711,https://github.com/jdavid,4,https://github.com/libgit2/pygit2/pull/711#issuecomment-306536712,"This change adds Repository.revert_commit() which wraps around git_revert_commit which will return an Index with the appropriate changes to revert the specified commit.
Fixes #710",It is unrelated. The Pypy3 version in Travis is too old.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,711,2017-06-05T21:10:37Z,2017-06-06T16:24:57Z,2017-06-06T16:25:19Z,MERGED,True,63,3,5,https://github.com/mark-adams,revert: Add support for git_revert_commit via Repository.revert_commit(),2,[],https://github.com/libgit2/pygit2/pull/711,https://github.com/jdavid,5,https://github.com/libgit2/pygit2/pull/711#issuecomment-306540733,"This change adds Repository.revert_commit() which wraps around git_revert_commit which will return an Index with the appropriate changes to revert the specified commit.
Fixes #710","Merged, Thanks!",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,713,2017-07-03T13:49:27Z,2017-07-03T20:56:51Z,2017-07-03T20:56:51Z,MERGED,True,20,20,4,https://github.com/carlosmn,Update for libgit2 v0.26,3,[],https://github.com/libgit2/pygit2/pull/713,https://github.com/carlosmn,1,https://github.com/libgit2/pygit2/pull/713,"The API isn't changing as much recently so all we needed to adjust was the
proper capitalisation of the error string.
I've left the version of pygit2 in code alone, as that should probably happen in changes for release on its own.","The API isn't changing as much recently so all we needed to adjust was the
proper capitalisation of the error string.
I've left the version of pygit2 in code alone, as that should probably happen in changes for release on its own.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,714,2017-07-07T18:24:15Z,2017-07-08T06:47:33Z,2017-07-08T06:58:27Z,MERGED,True,12,10,1,https://github.com/techtonik,install.rst: Use PyPI wheels on Windows,1,[],https://github.com/libgit2/pygit2/pull/714,https://github.com/techtonik,1,https://github.com/libgit2/pygit2/pull/714,,,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,715,2017-07-18T16:59:16Z,2017-07-19T14:41:26Z,2017-07-19T14:41:26Z,MERGED,True,1,1,1,https://github.com/bvasiles,Update diff.rst,1,[],https://github.com/libgit2/pygit2/pull/715,https://github.com/bvasiles,1,https://github.com/libgit2/pygit2/pull/715,old_lineno appeared twice. I think it should be new_lineno instead.,old_lineno appeared twice. I think it should be new_lineno instead.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,718,2017-07-27T03:18:11Z,2017-07-27T07:00:44Z,2017-07-27T20:07:39Z,MERGED,True,69,2,5,https://github.com/rcarz,improve credentials handling for ssh cloning,1,[],https://github.com/libgit2/pygit2/pull/718,https://github.com/rcarz,1,https://github.com/libgit2/pygit2/pull/718,"This patch implements support for the GIT_CREDTYPE_USERNAME credential. The ssh transport requests this when negotiating authentication methods with libssh2. It seems the only other way to clone over ssh is to include the username in the repository URL, which is undocumented and inconsistent with the behavior prior to the credential callback.","This patch implements support for the GIT_CREDTYPE_USERNAME credential. The ssh transport requests this when negotiating authentication methods with libssh2. It seems the only other way to clone over ssh is to include the username in the repository URL, which is undocumented and inconsistent with the behavior prior to the credential callback.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,719,2017-07-28T10:49:18Z,2018-03-18T21:33:34Z,2018-03-18T22:33:22Z,CLOSED,False,324,0,6,https://github.com/nhynes,Rebased worktrees,7,[],https://github.com/libgit2/pygit2/pull/719,https://github.com/nhynes,1,https://github.com/libgit2/pygit2/pull/719,This is a rebased version of #691 (with a tiny modification to use add+prune opts) if the original author doesn't get around to updating it.,This is a rebased version of #691 (with a tiny modification to use add+prune opts) if the original author doesn't get around to updating it.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,719,2017-07-28T10:49:18Z,2018-03-18T21:33:34Z,2018-03-18T22:33:22Z,CLOSED,False,324,0,6,https://github.com/nhynes,Rebased worktrees,7,[],https://github.com/libgit2/pygit2/pull/719,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/719#issuecomment-321008753,This is a rebased version of #691 (with a tiny modification to use add+prune opts) if the original author doesn't get around to updating it.,"Hi, thanks for the rebase.
Would you like to add some unit tests?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,719,2017-07-28T10:49:18Z,2018-03-18T21:33:34Z,2018-03-18T22:33:22Z,CLOSED,False,324,0,6,https://github.com/nhynes,Rebased worktrees,7,[],https://github.com/libgit2/pygit2/pull/719,https://github.com/jdavid,3,https://github.com/libgit2/pygit2/pull/719#issuecomment-374050512,This is a rebased version of #691 (with a tiny modification to use add+prune opts) if the original author doesn't get around to updating it.,Merged #779,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,721,2017-08-01T14:56:44Z,2018-01-14T13:28:25Z,2018-01-15T09:37:33Z,MERGED,True,2,2,1,https://github.com/white-gecko,Update git-clone-ssh.rst,1,[],https://github.com/libgit2/pygit2/pull/721,https://github.com/white-gecko,1,https://github.com/libgit2/pygit2/pull/721,As I understand the allowed_types it is a bitmap which should be compared using a logical AND. Further the options GIT_CREDTYPE_SSH_KEYand GIT_CREDTYPE_USERNAME are defined in pygit2.credentials.,As I understand the allowed_types it is a bitmap which should be compared using a logical AND. Further the options GIT_CREDTYPE_SSH_KEYand GIT_CREDTYPE_USERNAME are defined in pygit2.credentials.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,728,2017-10-19T15:34:16Z,2017-10-19T15:58:12Z,2017-10-19T15:59:03Z,MERGED,True,1,1,1,https://github.com/pwagland,Update example to use peel() instead of get_object().,1,[],https://github.com/libgit2/pygit2/pull/728,https://github.com/pwagland,1,https://github.com/libgit2/pygit2/pull/728,"According to http://www.pygit2.org/references.html get_object() is deprecated, and we should be using peel() instead. Update the example at the top of the page to follow this advice.","According to http://www.pygit2.org/references.html get_object() is deprecated, and we should be using peel() instead. Update the example at the top of the page to follow this advice.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,730,2017-10-26T01:12:19Z,2017-10-29T08:21:35Z,2017-12-08T22:08:26Z,MERGED,True,17,0,3,https://github.com/rcarz,add repository member for cleaning up open file handles ,2,[],https://github.com/libgit2/pygit2/pull/730,https://github.com/rcarz,1,https://github.com/libgit2/pygit2/pull/730,This patch implements a repository member for cleaning up resources of the underlying repository struct without deallocating it. This is normally handled when deallocating the repository Python object. But longer running processes can run out of open file handles before the garbage collector runs.,This patch implements a repository member for cleaning up resources of the underlying repository struct without deallocating it. This is normally handled when deallocating the repository Python object. But longer running processes can run out of open file handles before the garbage collector runs.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,733,2017-11-08T22:48:54Z,2017-11-09T08:16:23Z,2017-11-09T08:16:23Z,MERGED,True,1,1,1,https://github.com/jouve,typo in repository doc,1,[],https://github.com/libgit2/pygit2/pull/733,https://github.com/jouve,1,https://github.com/libgit2/pygit2/pull/733,,,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,734,2017-11-10T23:36:03Z,2017-11-11T07:46:18Z,2017-11-11T07:46:18Z,MERGED,True,10,1,1,https://github.com/ktdreyer,repository: document describe_strategy options,1,[],https://github.com/libgit2/pygit2/pull/734,https://github.com/ktdreyer,1,https://github.com/libgit2/pygit2/pull/734,"The documentation for Repository.describe() hinted at the GIT_DESCRIBE_* options constants.
List the valid constants and describe their behavior to make it clearer for the user.","The documentation for Repository.describe() hinted at the GIT_DESCRIBE_* options constants.
List the valid constants and describe their behavior to make it clearer for the user.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,735,2017-11-11T13:43:33Z,2017-11-11T17:56:04Z,2017-11-11T17:56:04Z,MERGED,True,2,1,1,https://github.com/StBogdan,Added missing parameter to method call in create_commit example,1,[],https://github.com/libgit2/pygit2/pull/735,https://github.com/StBogdan,1,https://github.com/libgit2/pygit2/pull/735,"Documentation for merging branches contained an incorrect call to create_commit, that was missing the message parameter","Documentation for merging branches contained an incorrect call to create_commit, that was missing the message parameter",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,740,2017-11-27T22:01:29Z,2017-11-28T09:21:38Z,2017-11-28T09:21:38Z,MERGED,True,3,3,1,https://github.com/brandonio21,test_repository: Replace deprecated assertEquals with assertEqual,1,[],https://github.com/libgit2/pygit2/pull/740,https://github.com/brandonio21,1,https://github.com/libgit2/pygit2/pull/740,"When running tests, I got a nag message about assertEquals being deprecated. This fixes the issue.","When running tests, I got a nag message about assertEquals being deprecated. This fixes the issue.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,741,2017-11-27T22:30:11Z,2017-11-28T09:03:23Z,2018-09-10T10:40:59Z,MERGED,True,60,1,3,https://github.com/brandonio21,Add patch Property to Patch Objects,3,[],https://github.com/libgit2/pygit2/pull/741,https://github.com/brandonio21,1,https://github.com/libgit2/pygit2/pull/741,"Fixes #739
PR Does the following:


Adds the patch property to Patch objects, which follows the blueprint of Diff.patch almost exactly.


Changes the parameter type for Blob.diff_to_buffer to allow for None as a valid parameter, signalling deletion.


Adds two tests","Fixes #739
PR Does the following:


Adds the patch property to Patch objects, which follows the blueprint of Diff.patch almost exactly.


Changes the parameter type for Blob.diff_to_buffer to allow for None as a valid parameter, signalling deletion.


Adds two tests",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,743,2017-11-28T19:31:27Z,2017-11-29T09:03:11Z,2017-11-29T09:30:05Z,MERGED,True,41,2,4,https://github.com/cecedille1,Implement prune remote.fetch,3,[],https://github.com/libgit2/pygit2/pull/743,https://github.com/cecedille1,1,https://github.com/libgit2/pygit2/pull/743,"When fetching a remote, you can use the option prune with a constant to remove branches that do not exist anymore on the remote","When fetching a remote, you can use the option prune with a constant to remove branches that do not exist anymore on the remote",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,743,2017-11-28T19:31:27Z,2017-11-29T09:03:11Z,2017-11-29T09:30:05Z,MERGED,True,41,2,4,https://github.com/cecedille1,Implement prune remote.fetch,3,[],https://github.com/libgit2/pygit2/pull/743,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/743#issuecomment-347802507,"When fetching a remote, you can use the option prune with a constant to remove branches that do not exist anymore on the remote","Thanks!
Just changed assert to self.assertXXX because we are using unittest, not pytest.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,744,2017-11-28T23:53:39Z,2017-11-29T08:45:49Z,2017-11-29T08:45:49Z,MERGED,True,231,1,2,https://github.com/brandonio21,Add static Patch.create_from method to create patches,2,[],https://github.com/libgit2/pygit2/pull/744,https://github.com/brandonio21,1,https://github.com/libgit2/pygit2/pull/744,"Fixes #742
Does the following:


Adds a new static Patch.create_from function which creates patches between various git primitives depending on the types of arguments provided.


Adds test to verify the functionality","Fixes #742
Does the following:


Adds a new static Patch.create_from function which creates patches between various git primitives depending on the types of arguments provided.


Adds test to verify the functionality",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,745,2017-11-29T17:27:28Z,2017-11-29T17:44:55Z,2017-11-29T17:46:25Z,MERGED,True,3,2,2,https://github.com/brandonio21,Add myself to contributors list ,1,[],https://github.com/libgit2/pygit2/pull/745,https://github.com/brandonio21,1,https://github.com/libgit2/pygit2/pull/745,"I'm not sure if the contributors list is automatically created/updated or if we need to manually do it. I saw some people manually doing it, so I thought that I would too...
I contributed: #741  and #744","I'm not sure if the contributors list is automatically created/updated or if we need to manually do it. I saw some people manually doing it, so I thought that I would too...
I contributed: #741  and #744",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,745,2017-11-29T17:27:28Z,2017-11-29T17:44:55Z,2017-11-29T17:46:25Z,MERGED,True,3,2,2,https://github.com/brandonio21,Add myself to contributors list ,1,[],https://github.com/libgit2/pygit2/pull/745,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/745#issuecomment-347939891,"I'm not sure if the contributors list is automatically created/updated or if we need to manually do it. I saw some people manually doing it, so I thought that I would too...
I contributed: #741  and #744","Merged.
(The list is updated before every release.)",True,{'THUMBS_UP': ['https://github.com/brandonio21']}
libgit2/pygit2,https://github.com/libgit2/pygit2,749,2017-12-01T17:19:03Z,2017-12-02T09:07:23Z,2017-12-02T09:09:08Z,MERGED,True,7,10,1,https://github.com/brandonio21,Fix patch.c windows build errors,1,[],https://github.com/libgit2/pygit2/pull/749,https://github.com/brandonio21,1,https://github.com/libgit2/pygit2/pull/749,"Full disclosure: I don't really understand why Windows builds are failing for 0.26.2. Quick google-foo suggests that it might be because declarations are not first..
I don't have a Windows machine to test on, so I'm going to use Appveyor to do the testing and verification.","Full disclosure: I don't really understand why Windows builds are failing for 0.26.2. Quick google-foo suggests that it might be because declarations are not first..
I don't have a Windows machine to test on, so I'm going to use Appveyor to do the testing and verification.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,749,2017-12-01T17:19:03Z,2017-12-02T09:07:23Z,2017-12-02T09:09:08Z,MERGED,True,7,10,1,https://github.com/brandonio21,Fix patch.c windows build errors,1,[],https://github.com/libgit2/pygit2/pull/749,https://github.com/brandonio21,2,https://github.com/libgit2/pygit2/pull/749#issuecomment-348560829,"Full disclosure: I don't really understand why Windows builds are failing for 0.26.2. Quick google-foo suggests that it might be because declarations are not first..
I don't have a Windows machine to test on, so I'm going to use Appveyor to do the testing and verification.","Looks like this fixes the build, but there are still some test failures unrelated to this",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,749,2017-12-01T17:19:03Z,2017-12-02T09:07:23Z,2017-12-02T09:09:08Z,MERGED,True,7,10,1,https://github.com/brandonio21,Fix patch.c windows build errors,1,[],https://github.com/libgit2/pygit2/pull/749,https://github.com/jdavid,3,https://github.com/libgit2/pygit2/pull/749#issuecomment-348679120,"Full disclosure: I don't really understand why Windows builds are failing for 0.26.2. Quick google-foo suggests that it might be because declarations are not first..
I don't have a Windows machine to test on, so I'm going to use Appveyor to do the testing and verification.","Thanks! (The test failures come from a different pull request, will look at them later)",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,751,2017-12-02T12:52:14Z,2017-12-02T15:22:01Z,2017-12-02T15:25:46Z,MERGED,True,4,0,1,https://github.com/fourplusone,Clear clone_repo in Prune Test,1,[],https://github.com/libgit2/pygit2/pull/751,https://github.com/fourplusone,1,https://github.com/libgit2/pygit2/pull/751,This PR fixes the windows tests broken by #743,This PR fixes the windows tests broken by #743,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,751,2017-12-02T12:52:14Z,2017-12-02T15:22:01Z,2017-12-02T15:25:46Z,MERGED,True,4,0,1,https://github.com/fourplusone,Clear clone_repo in Prune Test,1,[],https://github.com/libgit2/pygit2/pull/751,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/751#issuecomment-348699026,This PR fixes the windows tests broken by #743,Thanks!,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,753,2017-12-03T22:47:11Z,2017-12-04T08:43:05Z,2017-12-04T08:43:05Z,MERGED,True,41,30,2,https://github.com/brandonio21,Use existing blobs in test_patch; Make create_from args optional,1,[],https://github.com/libgit2/pygit2/pull/753,https://github.com/brandonio21,1,https://github.com/libgit2/pygit2/pull/753,"Fixes #748
For some reason, when using repo.create_blob(CONTENT) in the test cases, tests failed (as reported in the issue) on some machines (Did not fail on my Mac OS machine, Did not fail on AppVeyor Windows machines, Did fail on my CentOS machine).
I have no idea why that is. Perhaps I was doing something wrong.. perhaps there is something wrong with create_blob. I will create a followup issue to track it.
In any case, this PR fixes the issue by using the already existing repo blobs for the test cases. Further, after learning more about pygit2, I switched create_from to take optional params.
I think that 0.26.3 should be released after this PR is merged since 0.26.2 tests are broken for some users..","Fixes #748
For some reason, when using repo.create_blob(CONTENT) in the test cases, tests failed (as reported in the issue) on some machines (Did not fail on my Mac OS machine, Did not fail on AppVeyor Windows machines, Did fail on my CentOS machine).
I have no idea why that is. Perhaps I was doing something wrong.. perhaps there is something wrong with create_blob. I will create a followup issue to track it.
In any case, this PR fixes the issue by using the already existing repo blobs for the test cases. Further, after learning more about pygit2, I switched create_from to take optional params.
I think that 0.26.3 should be released after this PR is merged since 0.26.2 tests are broken for some users..",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,756,2017-12-05T21:48:55Z,2017-12-06T07:06:41Z,2017-12-06T09:24:35Z,MERGED,True,43,5,2,https://github.com/brandonio21,Patch.create_from: Add support for context_lines and interhunk_lines,1,[],https://github.com/libgit2/pygit2/pull/756,https://github.com/brandonio21,1,https://github.com/libgit2/pygit2/pull/756,"Adds support for specifying context_lines and interhunk_lines when calling Patch.create_from.
I've also added two tests to test the context lines functionality.
The behavior in this PR mimics the behavior in tree.c for adding these flags into the options.","Adds support for specifying context_lines and interhunk_lines when calling Patch.create_from.
I've also added two tests to test the context lines functionality.
The behavior in this PR mimics the behavior in tree.c for adding these flags into the options.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,756,2017-12-05T21:48:55Z,2017-12-06T07:06:41Z,2017-12-06T09:24:35Z,MERGED,True,43,5,2,https://github.com/brandonio21,Patch.create_from: Add support for context_lines and interhunk_lines,1,[],https://github.com/libgit2/pygit2/pull/756,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/756#issuecomment-349582140,"Adds support for specifying context_lines and interhunk_lines when calling Patch.create_from.
I've also added two tests to test the context lines functionality.
The behavior in this PR mimics the behavior in tree.c for adding these flags into the options.",This has introduced a couple of warnings in the tests (Equals vs Equal). Could you fix them?,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,758,2017-12-06T04:19:33Z,2017-12-15T18:40:42Z,2017-12-15T18:43:28Z,MERGED,True,111,0,2,https://github.com/brandonio21,Add more tests to test_patch and test_blob,5,[],https://github.com/libgit2/pygit2/pull/758,https://github.com/brandonio21,1,https://github.com/libgit2/pygit2/pull/758,"As reported in #754 , there are some strange corruption-looking things happening with creating patches. In order to find strange behavior, I've crafted the tests attached to this PR.
At the time of writing, I could only get one of the tests to reliably fail: test_patch_multi_blob
Traceback (most recent call last):
  File ""/home/engshare/third-party2/pygit2/0.26.2/src/build-gcc-5-glibc-2.23/pic/test/test_patch.py"", line 231, in test_patch_multi_blob
    self.assertEqual(patch_text, [patch.patch for patch in patches])
AssertionError: Lists differ: [u'diff --git a/file b/file\nd... != [u'diff --git a/file b/file\nd...

First differing element 0:
diff --git a/file b/file
deleted file mode 100644
index a520c24..0000000
--- a/file
+++ /dev/null
@@ -1,3 +0,0 @@
-hello world
-hola mundo
-bonjour le monde

diff --git a/file b/file
deleted file mode 100644
index a520c24..0000000
--- a/file
+++ /dev/null
@@ -1,3 +0,0 @@
-@^H05

Diff is 11160 characters long. Set self.maxDiff to None to see it.

I don't think this PR should be merged in until the problem is fixed.","As reported in #754 , there are some strange corruption-looking things happening with creating patches. In order to find strange behavior, I've crafted the tests attached to this PR.
At the time of writing, I could only get one of the tests to reliably fail: test_patch_multi_blob
Traceback (most recent call last):
  File ""/home/engshare/third-party2/pygit2/0.26.2/src/build-gcc-5-glibc-2.23/pic/test/test_patch.py"", line 231, in test_patch_multi_blob
    self.assertEqual(patch_text, [patch.patch for patch in patches])
AssertionError: Lists differ: [u'diff --git a/file b/file\nd... != [u'diff --git a/file b/file\nd...

First differing element 0:
diff --git a/file b/file
deleted file mode 100644
index a520c24..0000000
--- a/file
+++ /dev/null
@@ -1,3 +0,0 @@
-hello world
-hola mundo
-bonjour le monde

diff --git a/file b/file
deleted file mode 100644
index a520c24..0000000
--- a/file
+++ /dev/null
@@ -1,3 +0,0 @@
-@^H05

Diff is 11160 characters long. Set self.maxDiff to None to see it.

I don't think this PR should be merged in until the problem is fixed.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,758,2017-12-06T04:19:33Z,2017-12-15T18:40:42Z,2017-12-15T18:43:28Z,MERGED,True,111,0,2,https://github.com/brandonio21,Add more tests to test_patch and test_blob,5,[],https://github.com/libgit2/pygit2/pull/758,https://github.com/brandonio21,2,https://github.com/libgit2/pygit2/pull/758#issuecomment-350505342,"As reported in #754 , there are some strange corruption-looking things happening with creating patches. In order to find strange behavior, I've crafted the tests attached to this PR.
At the time of writing, I could only get one of the tests to reliably fail: test_patch_multi_blob
Traceback (most recent call last):
  File ""/home/engshare/third-party2/pygit2/0.26.2/src/build-gcc-5-glibc-2.23/pic/test/test_patch.py"", line 231, in test_patch_multi_blob
    self.assertEqual(patch_text, [patch.patch for patch in patches])
AssertionError: Lists differ: [u'diff --git a/file b/file\nd... != [u'diff --git a/file b/file\nd...

First differing element 0:
diff --git a/file b/file
deleted file mode 100644
index a520c24..0000000
--- a/file
+++ /dev/null
@@ -1,3 +0,0 @@
-hello world
-hola mundo
-bonjour le monde

diff --git a/file b/file
deleted file mode 100644
index a520c24..0000000
--- a/file
+++ /dev/null
@@ -1,3 +0,0 @@
-@^H05

Diff is 11160 characters long. Set self.maxDiff to None to see it.

I don't think this PR should be merged in until the problem is fixed.",YES! I FINALLY GOT THE BUG TO REPRO ON CI! LIFE IS GOOD!,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,758,2017-12-06T04:19:33Z,2017-12-15T18:40:42Z,2017-12-15T18:43:28Z,MERGED,True,111,0,2,https://github.com/brandonio21,Add more tests to test_patch and test_blob,5,[],https://github.com/libgit2/pygit2/pull/758,https://github.com/brandonio21,3,https://github.com/libgit2/pygit2/pull/758#issuecomment-351467042,"As reported in #754 , there are some strange corruption-looking things happening with creating patches. In order to find strange behavior, I've crafted the tests attached to this PR.
At the time of writing, I could only get one of the tests to reliably fail: test_patch_multi_blob
Traceback (most recent call last):
  File ""/home/engshare/third-party2/pygit2/0.26.2/src/build-gcc-5-glibc-2.23/pic/test/test_patch.py"", line 231, in test_patch_multi_blob
    self.assertEqual(patch_text, [patch.patch for patch in patches])
AssertionError: Lists differ: [u'diff --git a/file b/file\nd... != [u'diff --git a/file b/file\nd...

First differing element 0:
diff --git a/file b/file
deleted file mode 100644
index a520c24..0000000
--- a/file
+++ /dev/null
@@ -1,3 +0,0 @@
-hello world
-hola mundo
-bonjour le monde

diff --git a/file b/file
deleted file mode 100644
index a520c24..0000000
--- a/file
+++ /dev/null
@@ -1,3 +0,0 @@
-@^H05

Diff is 11160 characters long. Set self.maxDiff to None to see it.

I don't think this PR should be merged in until the problem is fixed.",Going to rebase this,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,758,2017-12-06T04:19:33Z,2017-12-15T18:40:42Z,2017-12-15T18:43:28Z,MERGED,True,111,0,2,https://github.com/brandonio21,Add more tests to test_patch and test_blob,5,[],https://github.com/libgit2/pygit2/pull/758,https://github.com/jdavid,4,https://github.com/libgit2/pygit2/pull/758#issuecomment-351961399,"As reported in #754 , there are some strange corruption-looking things happening with creating patches. In order to find strange behavior, I've crafted the tests attached to this PR.
At the time of writing, I could only get one of the tests to reliably fail: test_patch_multi_blob
Traceback (most recent call last):
  File ""/home/engshare/third-party2/pygit2/0.26.2/src/build-gcc-5-glibc-2.23/pic/test/test_patch.py"", line 231, in test_patch_multi_blob
    self.assertEqual(patch_text, [patch.patch for patch in patches])
AssertionError: Lists differ: [u'diff --git a/file b/file\nd... != [u'diff --git a/file b/file\nd...

First differing element 0:
diff --git a/file b/file
deleted file mode 100644
index a520c24..0000000
--- a/file
+++ /dev/null
@@ -1,3 +0,0 @@
-hello world
-hola mundo
-bonjour le monde

diff --git a/file b/file
deleted file mode 100644
index a520c24..0000000
--- a/file
+++ /dev/null
@@ -1,3 +0,0 @@
-@^H05

Diff is 11160 characters long. Set self.maxDiff to None to see it.

I don't think this PR should be merged in until the problem is fixed.",yes please,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,758,2017-12-06T04:19:33Z,2017-12-15T18:40:42Z,2017-12-15T18:43:28Z,MERGED,True,111,0,2,https://github.com/brandonio21,Add more tests to test_patch and test_blob,5,[],https://github.com/libgit2/pygit2/pull/758,https://github.com/brandonio21,5,https://github.com/libgit2/pygit2/pull/758#issuecomment-352050234,"As reported in #754 , there are some strange corruption-looking things happening with creating patches. In order to find strange behavior, I've crafted the tests attached to this PR.
At the time of writing, I could only get one of the tests to reliably fail: test_patch_multi_blob
Traceback (most recent call last):
  File ""/home/engshare/third-party2/pygit2/0.26.2/src/build-gcc-5-glibc-2.23/pic/test/test_patch.py"", line 231, in test_patch_multi_blob
    self.assertEqual(patch_text, [patch.patch for patch in patches])
AssertionError: Lists differ: [u'diff --git a/file b/file\nd... != [u'diff --git a/file b/file\nd...

First differing element 0:
diff --git a/file b/file
deleted file mode 100644
index a520c24..0000000
--- a/file
+++ /dev/null
@@ -1,3 +0,0 @@
-hello world
-hola mundo
-bonjour le monde

diff --git a/file b/file
deleted file mode 100644
index a520c24..0000000
--- a/file
+++ /dev/null
@@ -1,3 +0,0 @@
-@^H05

Diff is 11160 characters long. Set self.maxDiff to None to see it.

I don't think this PR should be merged in until the problem is fixed.",@jdavid : It's ready to be merged in! Let's do it!,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,758,2017-12-06T04:19:33Z,2017-12-15T18:40:42Z,2017-12-15T18:43:28Z,MERGED,True,111,0,2,https://github.com/brandonio21,Add more tests to test_patch and test_blob,5,[],https://github.com/libgit2/pygit2/pull/758,https://github.com/jdavid,6,https://github.com/libgit2/pygit2/pull/758#issuecomment-352081161,"As reported in #754 , there are some strange corruption-looking things happening with creating patches. In order to find strange behavior, I've crafted the tests attached to this PR.
At the time of writing, I could only get one of the tests to reliably fail: test_patch_multi_blob
Traceback (most recent call last):
  File ""/home/engshare/third-party2/pygit2/0.26.2/src/build-gcc-5-glibc-2.23/pic/test/test_patch.py"", line 231, in test_patch_multi_blob
    self.assertEqual(patch_text, [patch.patch for patch in patches])
AssertionError: Lists differ: [u'diff --git a/file b/file\nd... != [u'diff --git a/file b/file\nd...

First differing element 0:
diff --git a/file b/file
deleted file mode 100644
index a520c24..0000000
--- a/file
+++ /dev/null
@@ -1,3 +0,0 @@
-hello world
-hola mundo
-bonjour le monde

diff --git a/file b/file
deleted file mode 100644
index a520c24..0000000
--- a/file
+++ /dev/null
@@ -1,3 +0,0 @@
-@^H05

Diff is 11160 characters long. Set self.maxDiff to None to see it.

I don't think this PR should be merged in until the problem is fixed.",thanks!,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,759,2017-12-06T18:46:30Z,2017-12-07T08:27:07Z,2017-12-07T08:27:07Z,MERGED,True,2,2,1,https://github.com/brandonio21,test_patch: assertEquals -> assertEqual,1,[],https://github.com/libgit2/pygit2/pull/759,https://github.com/brandonio21,1,https://github.com/libgit2/pygit2/pull/759,Fixes deprecated test asserts warning introduced in #756,Fixes deprecated test asserts warning introduced in #756,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,760,2017-12-09T20:48:19Z,2017-12-10T21:14:54Z,2017-12-10T21:14:54Z,CLOSED,False,2,1,1,https://github.com/brandonio21,INCREF git objects when wrapping them,1,[],https://github.com/libgit2/pygit2/pull/760,https://github.com/brandonio21,1,https://github.com/libgit2/pygit2/pull/760,"Fixes #754
After lots of investigation, I found that on some machines (my machines, not the machines in CI apparently) Patch objects would not Patch.patch properly if another blob was retrieved from the repo in between its creation and patch.__get__() call. As an incomplete example,
blob = repo[sha]
patch = Patch.create_from(blob, None)
print(patch.patch) # Prints expected results

blob = repo[sha]
print(patch.patch) # Prints mangled, unexpected results

patch2 = Patch.create_from(blob, None)
print(patch2.patch) # Prints expected results
The problem is that patch needs the blob object to generate the patch. For some reason, the blob object goes away when another blob is retrieved from the repo. The problem is more clearly illustrated with:
blob = repo[sha]
patch = Patch.create_from(blob, None)

# We delete the blob. We don't need it anymore since the patch was created
del blob

# However, this prints mangled stuff since the blob was deleted
print(patch.patch) 
The problem isn't just limited to Patch.create_from:
blob = self.repo[sha]           
patch_one = blob.diff_to_buffer(None)
                                     
blob = self.repo[sha]           
patch_two = blob.diff_to_buffer(None)
                                     
# This check will fail
self.assertEqual(                    
    patch_one.patch,                 
    patch_two.patch,                 
)                     
I didn't do extensive testing, but the problem seemed to stem, in general, from wrap_object, which would wrap a git_object* in our custom Object class, but would not INCREF it before returning it. Thus, I've INCREFd it before returning and all seems to work!","Fixes #754
After lots of investigation, I found that on some machines (my machines, not the machines in CI apparently) Patch objects would not Patch.patch properly if another blob was retrieved from the repo in between its creation and patch.__get__() call. As an incomplete example,
blob = repo[sha]
patch = Patch.create_from(blob, None)
print(patch.patch) # Prints expected results

blob = repo[sha]
print(patch.patch) # Prints mangled, unexpected results

patch2 = Patch.create_from(blob, None)
print(patch2.patch) # Prints expected results
The problem is that patch needs the blob object to generate the patch. For some reason, the blob object goes away when another blob is retrieved from the repo. The problem is more clearly illustrated with:
blob = repo[sha]
patch = Patch.create_from(blob, None)

# We delete the blob. We don't need it anymore since the patch was created
del blob

# However, this prints mangled stuff since the blob was deleted
print(patch.patch) 
The problem isn't just limited to Patch.create_from:
blob = self.repo[sha]           
patch_one = blob.diff_to_buffer(None)
                                     
blob = self.repo[sha]           
patch_two = blob.diff_to_buffer(None)
                                     
# This check will fail
self.assertEqual(                    
    patch_one.patch,                 
    patch_two.patch,                 
)                     
I didn't do extensive testing, but the problem seemed to stem, in general, from wrap_object, which would wrap a git_object* in our custom Object class, but would not INCREF it before returning it. Thus, I've INCREFd it before returning and all seems to work!",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,760,2017-12-09T20:48:19Z,2017-12-10T21:14:54Z,2017-12-10T21:14:54Z,CLOSED,False,2,1,1,https://github.com/brandonio21,INCREF git objects when wrapping them,1,[],https://github.com/libgit2/pygit2/pull/760,https://github.com/brandonio21,2,https://github.com/libgit2/pygit2/pull/760#issuecomment-350582110,"Fixes #754
After lots of investigation, I found that on some machines (my machines, not the machines in CI apparently) Patch objects would not Patch.patch properly if another blob was retrieved from the repo in between its creation and patch.__get__() call. As an incomplete example,
blob = repo[sha]
patch = Patch.create_from(blob, None)
print(patch.patch) # Prints expected results

blob = repo[sha]
print(patch.patch) # Prints mangled, unexpected results

patch2 = Patch.create_from(blob, None)
print(patch2.patch) # Prints expected results
The problem is that patch needs the blob object to generate the patch. For some reason, the blob object goes away when another blob is retrieved from the repo. The problem is more clearly illustrated with:
blob = repo[sha]
patch = Patch.create_from(blob, None)

# We delete the blob. We don't need it anymore since the patch was created
del blob

# However, this prints mangled stuff since the blob was deleted
print(patch.patch) 
The problem isn't just limited to Patch.create_from:
blob = self.repo[sha]           
patch_one = blob.diff_to_buffer(None)
                                     
blob = self.repo[sha]           
patch_two = blob.diff_to_buffer(None)
                                     
# This check will fail
self.assertEqual(                    
    patch_one.patch,                 
    patch_two.patch,                 
)                     
I didn't do extensive testing, but the problem seemed to stem, in general, from wrap_object, which would wrap a git_object* in our custom Object class, but would not INCREF it before returning it. Thus, I've INCREFd it before returning and all seems to work!","As @jdavid mentioned in #754 , this is not the proper solution. Closing!",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,761,2017-12-13T17:24:13Z,2017-12-13T17:33:21Z,2017-12-13T17:33:22Z,MERGED,True,16,6,5,https://github.com/brandonio21,Give patch reference to underlying blob(s),1,[],https://github.com/libgit2/pygit2/pull/761,https://github.com/brandonio21,1,https://github.com/libgit2/pygit2/pull/761,"Fixes #754 and also allows merging of #758 .
As described in #754, Patch objects do not have a reference to their underlying blobs. Thus, if the blob is freed before patch text is generated, the patch text becomes mangled. This is ultimately an issue in libgit2 and the issue is being tracked in libgit2/libgit2#4442
In the meantime, the problem can be solved at the pygit2 level. This PR adds blob references to the pygit2 Patch objects and increments their reference counters when a patch with blobs is generated.
When the fix is ultimately merged into libgit2, this behavior should probably be removed from pygit2. Until then, this is a good fix!","Fixes #754 and also allows merging of #758 .
As described in #754, Patch objects do not have a reference to their underlying blobs. Thus, if the blob is freed before patch text is generated, the patch text becomes mangled. This is ultimately an issue in libgit2 and the issue is being tracked in libgit2/libgit2#4442
In the meantime, the problem can be solved at the pygit2 level. This PR adds blob references to the pygit2 Patch objects and increments their reference counters when a patch with blobs is generated.
When the fix is ultimately merged into libgit2, this behavior should probably be removed from pygit2. Until then, this is a good fix!",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,762,2017-12-22T06:38:05Z,2018-01-05T06:44:55Z,2018-01-05T06:44:55Z,CLOSED,False,34,0,2,https://github.com/zhangyiant,Add update_submodule method in Repository class.,5,[],https://github.com/libgit2/pygit2/pull/762,https://github.com/zhangyiant,1,https://github.com/libgit2/pygit2/pull/762,,,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,762,2017-12-22T06:38:05Z,2018-01-05T06:44:55Z,2018-01-05T06:44:55Z,CLOSED,False,34,0,2,https://github.com/zhangyiant,Add update_submodule method in Repository class.,5,[],https://github.com/libgit2/pygit2/pull/762,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/762#issuecomment-353856707,,"How is this different from Repository.update_submodules ?
See https://github.com/libgit2/pygit2/blob/master/src/repository.c#L1360 and http://www.pygit2.org/submodule.html?highlight=update_submodules#pygit2.Repository.update_submodules",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,762,2017-12-22T06:38:05Z,2018-01-05T06:44:55Z,2018-01-05T06:44:55Z,CLOSED,False,34,0,2,https://github.com/zhangyiant,Add update_submodule method in Repository class.,5,[],https://github.com/libgit2/pygit2/pull/762,https://github.com/jdavid,3,https://github.com/libgit2/pygit2/pull/762#issuecomment-353886036,,"If the purpose is to type:
repo.update_submodule(submodule)

Instead of:
repo.update_submodules([submodule])

I would rather have a single method which accepts both:
repo.update_submodules(submodule)
repo.update_submodules([submodule])

Feel free to replace the repo.update_submodules written in C by one using cffi, which is backwards compatible and accepts a singleton.
Thanks for your PR!",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,762,2017-12-22T06:38:05Z,2018-01-05T06:44:55Z,2018-01-05T06:44:55Z,CLOSED,False,34,0,2,https://github.com/zhangyiant,Add update_submodule method in Repository class.,5,[],https://github.com/libgit2/pygit2/pull/762,https://github.com/zhangyiant,4,https://github.com/libgit2/pygit2/pull/762#issuecomment-354052746,,"The initial intent is to update submodule with credential input which is not supported in current update_submodules method.
Yes, I agree your suggestion to have a single method. I'll update the PR when it's ready.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,762,2017-12-22T06:38:05Z,2018-01-05T06:44:55Z,2018-01-05T06:44:55Z,CLOSED,False,34,0,2,https://github.com/zhangyiant,Add update_submodule method in Repository class.,5,[],https://github.com/libgit2/pygit2/pull/762,https://github.com/zhangyiant,5,https://github.com/libgit2/pygit2/pull/762#issuecomment-355484448,,"Close this pull request.
A new pull request will be opened, which will replace current C version update_submodules.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,763,2018-01-05T07:30:44Z,2018-01-14T11:31:15Z,2018-01-14T11:31:15Z,MERGED,True,43,69,3,https://github.com/zhangyiant,Reimplement update_submodules method in ffi.,3,[],https://github.com/libgit2/pygit2/pull/763,https://github.com/zhangyiant,1,https://github.com/libgit2/pygit2/pull/763,"Reimplemented update_submodules using cffi.
And added callbacks parameter.","Reimplemented update_submodules using cffi.
And added callbacks parameter.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,766,2018-02-01T19:57:37Z,2018-02-06T09:00:57Z,2018-02-06T09:00:57Z,MERGED,True,76,0,4,https://github.com/mark-adams,commit: Add support for getting GPG signature data,1,[],https://github.com/libgit2/pygit2/pull/766,https://github.com/mark-adams,1,https://github.com/libgit2/pygit2/pull/766,"This change adds a new Commit.gpg_signature property which returns a
tuple containing the GPG signature for a given commit and the bytes that
the signature was computed over. This is accomplished by calling
libgit2's git_commit_extract_signature() function.","This change adds a new Commit.gpg_signature property which returns a
tuple containing the GPG signature for a given commit and the bytes that
the signature was computed over. This is accomplished by calling
libgit2's git_commit_extract_signature() function.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,766,2018-02-01T19:57:37Z,2018-02-06T09:00:57Z,2018-02-06T09:00:57Z,MERGED,True,76,0,4,https://github.com/mark-adams,commit: Add support for getting GPG signature data,1,[],https://github.com/libgit2/pygit2/pull/766,https://github.com/mark-adams,2,https://github.com/libgit2/pygit2/pull/766#issuecomment-362456152,"This change adds a new Commit.gpg_signature property which returns a
tuple containing the GPG signature for a given commit and the bytes that
the signature was computed over. This is accomplished by calling
libgit2's git_commit_extract_signature() function.",Hi @jdavid! I believe this is ready for your review! Thanks! 😄,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,766,2018-02-01T19:57:37Z,2018-02-06T09:00:57Z,2018-02-06T09:00:57Z,MERGED,True,76,0,4,https://github.com/mark-adams,commit: Add support for getting GPG signature data,1,[],https://github.com/libgit2/pygit2/pull/766,https://github.com/mark-adams,3,https://github.com/libgit2/pygit2/pull/766#issuecomment-363249398,"This change adds a new Commit.gpg_signature property which returns a
tuple containing the GPG signature for a given commit and the bytes that
the signature was computed over. This is accomplished by calling
libgit2's git_commit_extract_signature() function.",@jdavid Thanks for all the feedback. I think I've taken care of all of it if you want to take another look.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,767,2018-02-02T17:09:40Z,2018-02-03T11:03:48Z,2018-02-03T11:03:49Z,MERGED,True,13,2,4,https://github.com/atrubachev,Fix UnicodeDecodeError in maybe_string,1,[],https://github.com/libgit2/pygit2/pull/767,https://github.com/atrubachev,1,https://github.com/libgit2/pygit2/pull/767,"This change fixes a problem with fetching the repository which has a branch with unicode symbols in its name.
For example
$ git branch
  branch-with—utf8
* master
$

In [1]: import pygit2

In [2]: repo = pygit2.Repository('utf8branchrepo')

In [3]: [b for b in repo.branches.local]
Out[3]: ['branch-with\xe2\x80\x94utf8', 'master']

In [4]: remote = repo.remotes.create('test', repo.workdir)

In [5]: remote.fetch()
---------------------------------------------------------------------------
UnicodeDecodeError                        Traceback (most recent call last)
<ipython-input-5-24fa60a13345> in <module>()
----> 1 remote.fetch()

/home/atrubachev/pygit2/venv/lib/python2.7/site-packages/pygit2/remote.pyc in fetch(self, refspecs, message, callbacks, prune)
    402                 err = C.git_remote_fetch(self._remote, arr, fetch_opts, to_bytes(message))
    403                 if callbacks._stored_exception:
--> 404                     raise callbacks._stored_exception
    405                 check_error(err)
    406         finally:

UnicodeDecodeError: 'ascii' codec can't decode byte 0xe2 in position 29: ordinal not in range(128)

In [6]:","This change fixes a problem with fetching the repository which has a branch with unicode symbols in its name.
For example
$ git branch
  branch-with—utf8
* master
$

In [1]: import pygit2

In [2]: repo = pygit2.Repository('utf8branchrepo')

In [3]: [b for b in repo.branches.local]
Out[3]: ['branch-with\xe2\x80\x94utf8', 'master']

In [4]: remote = repo.remotes.create('test', repo.workdir)

In [5]: remote.fetch()
---------------------------------------------------------------------------
UnicodeDecodeError                        Traceback (most recent call last)
<ipython-input-5-24fa60a13345> in <module>()
----> 1 remote.fetch()

/home/atrubachev/pygit2/venv/lib/python2.7/site-packages/pygit2/remote.pyc in fetch(self, refspecs, message, callbacks, prune)
    402                 err = C.git_remote_fetch(self._remote, arr, fetch_opts, to_bytes(message))
    403                 if callbacks._stored_exception:
--> 404                     raise callbacks._stored_exception
    405                 check_error(err)
    406         finally:

UnicodeDecodeError: 'ascii' codec can't decode byte 0xe2 in position 29: ordinal not in range(128)

In [6]:",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,768,2018-02-07T03:12:38Z,2018-02-07T10:51:15Z,2018-02-07T10:51:15Z,MERGED,True,8,8,5,https://github.com/terminalmage,Explicitly use utf-8 when decoding bytestrings,1,[],https://github.com/libgit2/pygit2/pull/768,https://github.com/terminalmage,1,https://github.com/libgit2/pygit2/pull/768,"While Python 3 defaults to utf-8 in bytes.decode(), Python 2's
equivalent (str.decode()) will use the default encoding as set by
site.py (which is almost always ascii).
From looking at the code, it seems that these decodes have just sort of
been fixed piecemeal (likely when someone realized that pygit2 was
failing to handle unicode properly), but any decodes which run on Python
2 that don't specify utf-8 as the encoding are a ticking time bomb. I
personally noticed this was a problem when I encountered a traceback in
the RemoteCallbacks while fetching a new branch which contained utf-8
characters. During the fetch, when pygit2.remote.maybe_string() was
invoked by _update_tips_cb() with a pointer to a bytestring containing
unicode, the decode fails because the default encoding is ascii. As it
turns out, this was fixed in master, but there are a number which still
have no explicit encoding.
This commit explicitly uses utf-8 for all remaining bytestring decodes
which do not have an encoding specified, aside from one in PY3-specific
code where doing so would be redundant.","While Python 3 defaults to utf-8 in bytes.decode(), Python 2's
equivalent (str.decode()) will use the default encoding as set by
site.py (which is almost always ascii).
From looking at the code, it seems that these decodes have just sort of
been fixed piecemeal (likely when someone realized that pygit2 was
failing to handle unicode properly), but any decodes which run on Python
2 that don't specify utf-8 as the encoding are a ticking time bomb. I
personally noticed this was a problem when I encountered a traceback in
the RemoteCallbacks while fetching a new branch which contained utf-8
characters. During the fetch, when pygit2.remote.maybe_string() was
invoked by _update_tips_cb() with a pointer to a bytestring containing
unicode, the decode fails because the default encoding is ascii. As it
turns out, this was fixed in master, but there are a number which still
have no explicit encoding.
This commit explicitly uses utf-8 for all remaining bytestring decodes
which do not have an encoding specified, aside from one in PY3-specific
code where doing so would be redundant.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,769,2018-02-26T10:44:02Z,2018-02-27T16:36:50Z,2018-02-27T21:07:26Z,MERGED,True,1,1,1,https://github.com/rcjsuen,Fix a typo in the documentation,1,[],https://github.com/libgit2/pygit2/pull/769,https://github.com/rcjsuen,1,https://github.com/libgit2/pygit2/pull/769,,,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,770,2018-02-27T16:21:40Z,2018-02-27T16:38:09Z,2018-02-27T17:30:58Z,MERGED,True,2,2,1,https://github.com/white-gecko,Fix typos in remote.py docstrings,1,[],https://github.com/libgit2/pygit2/pull/770,https://github.com/white-gecko,1,https://github.com/libgit2/pygit2/pull/770,,,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,771,2018-03-02T15:51:55Z,2018-03-03T09:30:22Z,2018-03-03T09:30:22Z,MERGED,True,32,2,4,https://github.com/ZenSecurity,git_cred_ssh_key_memory_new() support was added.,3,[],https://github.com/libgit2/pygit2/pull/771,https://github.com/ZenSecurity,1,https://github.com/libgit2/pygit2/pull/771,Now we can use keys which are stored in memory objects.,Now we can use keys which are stored in memory objects.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,771,2018-03-02T15:51:55Z,2018-03-03T09:30:22Z,2018-03-03T09:30:22Z,MERGED,True,32,2,4,https://github.com/ZenSecurity,git_cred_ssh_key_memory_new() support was added.,3,[],https://github.com/libgit2/pygit2/pull/771,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/771#issuecomment-369979404,Now we can use keys which are stored in memory objects.,Could you add a unit test?,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,771,2018-03-02T15:51:55Z,2018-03-03T09:30:22Z,2018-03-03T09:30:22Z,MERGED,True,32,2,4,https://github.com/ZenSecurity,git_cred_ssh_key_memory_new() support was added.,3,[],https://github.com/libgit2/pygit2/pull/771,https://github.com/ZenSecurity,3,https://github.com/libgit2/pygit2/pull/771#issuecomment-370034115,Now we can use keys which are stored in memory objects.,"Sure, i will.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,772,2018-03-03T04:54:43Z,2018-03-03T09:53:09Z,2018-03-03T09:53:09Z,MERGED,True,67,0,2,https://github.com/brandonio21,Add Repository.parse_diff to wrap git_diff_from_buffer,1,[],https://github.com/libgit2/pygit2/pull/772,https://github.com/brandonio21,1,https://github.com/libgit2/pygit2/pull/772,"libgit2 has the ability to parse unified diffs from buffers, so why shouldn't pygit2?
This diff adds Repository.parse_diff to allow creating Diff objects from unified diffs on a certain repository.
Unit tests included!","libgit2 has the ability to parse unified diffs from buffers, so why shouldn't pygit2?
This diff adds Repository.parse_diff to allow creating Diff objects from unified diffs on a certain repository.
Unit tests included!",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,773,2018-03-03T11:11:44Z,2018-03-03T13:30:05Z,2018-03-03T13:30:06Z,MERGED,True,3,2,2,https://github.com/ZenSecurity,"Add my name, for the fame",1,[],https://github.com/libgit2/pygit2/pull/773,https://github.com/ZenSecurity,1,https://github.com/libgit2/pygit2/pull/773,"Add my name, for the fame","Add my name, for the fame",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,774,2018-03-03T19:19:25Z,2018-03-05T19:06:55Z,2018-03-05T19:06:55Z,MERGED,True,57,71,4,https://github.com/brandonio21,Add static Diff.parse_diff,2,[],https://github.com/libgit2/pygit2/pull/774,https://github.com/brandonio21,1,https://github.com/libgit2/pygit2/pull/774,"I think this PR is a little less straight forward than #772
I think the user should be able to create a Diff object from a unified diff without needing a repository, as in git_diff_from_buffer. The existing pygit2 API, however, requires that a Repository be provided when creating a Diff object.
This PR relaxes that requirement and allows NULL to be provided for the Repository when creating a Diff object. This allows Diffs to be created without repos.
If this is a good idea, let's merge this in! If not, let's have a discussion. I'm also open to the idea of having an optional kwarg repository= so that we can reuse this code in Repository.parse_diff","I think this PR is a little less straight forward than #772
I think the user should be able to create a Diff object from a unified diff without needing a repository, as in git_diff_from_buffer. The existing pygit2 API, however, requires that a Repository be provided when creating a Diff object.
This PR relaxes that requirement and allows NULL to be provided for the Repository when creating a Diff object. This allows Diffs to be created without repos.
If this is a good idea, let's merge this in! If not, let's have a discussion. I'm also open to the idea of having an optional kwarg repository= so that we can reuse this code in Repository.parse_diff",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,774,2018-03-03T19:19:25Z,2018-03-05T19:06:55Z,2018-03-05T19:06:55Z,MERGED,True,57,71,4,https://github.com/brandonio21,Add static Diff.parse_diff,2,[],https://github.com/libgit2/pygit2/pull/774,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/774#issuecomment-370254004,"I think this PR is a little less straight forward than #772
I think the user should be able to create a Diff object from a unified diff without needing a repository, as in git_diff_from_buffer. The existing pygit2 API, however, requires that a Repository be provided when creating a Diff object.
This PR relaxes that requirement and allows NULL to be provided for the Repository when creating a Diff object. This allows Diffs to be created without repos.
If this is a good idea, let's merge this in! If not, let's have a discussion. I'm also open to the idea of having an optional kwarg repository= so that we can reuse this code in Repository.parse_diff","Diff_merge would need to be updated.
Does it have any sense for the diff object to be attached to the repository? I only found Diff_merge and it doesn't look to do anything useful with the repo. So I would just remove the repo from the Diff type (then Repository.parse_diff would go away as well).",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,774,2018-03-03T19:19:25Z,2018-03-05T19:06:55Z,2018-03-05T19:06:55Z,MERGED,True,57,71,4,https://github.com/brandonio21,Add static Diff.parse_diff,2,[],https://github.com/libgit2/pygit2/pull/774,https://github.com/brandonio21,3,https://github.com/libgit2/pygit2/pull/774#issuecomment-370255420,"I think this PR is a little less straight forward than #772
I think the user should be able to create a Diff object from a unified diff without needing a repository, as in git_diff_from_buffer. The existing pygit2 API, however, requires that a Repository be provided when creating a Diff object.
This PR relaxes that requirement and allows NULL to be provided for the Repository when creating a Diff object. This allows Diffs to be created without repos.
If this is a good idea, let's merge this in! If not, let's have a discussion. I'm also open to the idea of having an optional kwarg repository= so that we can reuse this code in Repository.parse_diff","To me, it doesn't make much sense. (However, libgit2's git_diff struct does indeed have a pointer to a repo).
I think removing the repo from the Diff type is a solid idea, but seems like a very breaking change.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,774,2018-03-03T19:19:25Z,2018-03-05T19:06:55Z,2018-03-05T19:06:55Z,MERGED,True,57,71,4,https://github.com/brandonio21,Add static Diff.parse_diff,2,[],https://github.com/libgit2/pygit2/pull/774,https://github.com/jdavid,4,https://github.com/libgit2/pygit2/pull/774#issuecomment-370351239,"I think this PR is a little less straight forward than #772
I think the user should be able to create a Diff object from a unified diff without needing a repository, as in git_diff_from_buffer. The existing pygit2 API, however, requires that a Repository be provided when creating a Diff object.
This PR relaxes that requirement and allows NULL to be provided for the Repository when creating a Diff object. This allows Diffs to be created without repos.
If this is a good idea, let's merge this in! If not, let's have a discussion. I'm also open to the idea of having an optional kwarg repository= so that we can reuse this code in Repository.parse_diff","We don't expose the repo, today diff.repo raises attribute error, so we would not break user code.
But we may still need the reference to the repo to keep the libgit2's repo alive.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,774,2018-03-03T19:19:25Z,2018-03-05T19:06:55Z,2018-03-05T19:06:55Z,MERGED,True,57,71,4,https://github.com/brandonio21,Add static Diff.parse_diff,2,[],https://github.com/libgit2/pygit2/pull/774,https://github.com/jdavid,5,https://github.com/libgit2/pygit2/pull/774#issuecomment-370359845,"I think this PR is a little less straight forward than #772
I think the user should be able to create a Diff object from a unified diff without needing a repository, as in git_diff_from_buffer. The existing pygit2 API, however, requires that a Repository be provided when creating a Diff object.
This PR relaxes that requirement and allows NULL to be provided for the Repository when creating a Diff object. This allows Diffs to be created without repos.
If this is a good idea, let's merge this in! If not, let's have a discussion. I'm also open to the idea of having an optional kwarg repository= so that we can reuse this code in Repository.parse_diff","Well, I think better keep it the way it is, just to be sure the reference is alive.
But then, why to have 2 functions that do essentially the same? Could we just have Diff.parse_diff and remove Repository.parse_diff ?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,774,2018-03-03T19:19:25Z,2018-03-05T19:06:55Z,2018-03-05T19:06:55Z,MERGED,True,57,71,4,https://github.com/brandonio21,Add static Diff.parse_diff,2,[],https://github.com/libgit2/pygit2/pull/774,https://github.com/brandonio21,6,https://github.com/libgit2/pygit2/pull/774#issuecomment-370477330,"I think this PR is a little less straight forward than #772
I think the user should be able to create a Diff object from a unified diff without needing a repository, as in git_diff_from_buffer. The existing pygit2 API, however, requires that a Repository be provided when creating a Diff object.
This PR relaxes that requirement and allows NULL to be provided for the Repository when creating a Diff object. This allows Diffs to be created without repos.
If this is a good idea, let's merge this in! If not, let's have a discussion. I'm also open to the idea of having an optional kwarg repository= so that we can reuse this code in Repository.parse_diff","Oh! I was not aware of the AttributeError. In that case, I am happy to remove Repository.parse_diff. An update to this PR incoming...",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,776,2018-03-12T04:23:53Z,2018-03-17T01:56:09Z,2018-03-17T02:15:37Z,CLOSED,False,6,3,2,https://github.com/thecjharries,Update Config.__iter__ to match the documentation,2,[],https://github.com/libgit2/pygit2/pull/776,https://github.com/thecjharries,1,https://github.com/libgit2/pygit2/pull/776,"Problem
The Config.__iter__ docs say the method iterates over all entries, where ""[e]ach element is a tuple containing the name and the value"", which could be problematic as the method ""may return multiple versions of each entry if they are set multiple times."" However, the (final) next method on the iterator only returns the name of the entry. There's a very good chance it's never returned a tuple, evidenced by the blame.
Example
from __future__ import print_function
from tempfile import NamedTemporaryFile
from pygit2 import Config

# Start with a blank slate
blank = Config()

# https://git-scm.com/docs/git-config#git-config-pushdefault
for index, value in list(enumerate(['nothing', 'current', 'upstream'])):
    # There's probably a better way to do this
    with NamedTemporaryFile() as config_file:
        config_file.write(""[push]\n\tdefault = %s"" % value)
        config_file.seek(0)
        blank.add_file(config_file.name, index)

# This executes Config.__iter__
for key in blank:
    # Since it doesn't return a value, we're stuck with the default return
    print(key, blank[key])
# push.default upstream
# push.default upstream
# push.default upstream

# It's not actually a multivar, but we can see everything this way
for value in blank.get_multivar('push.default'):
    print(value)
# nothing
# current
# upstream
Pull Request
I updated __next__'s return to also include the value. This matches what the docs describe, returning a tuple of name and value. Since the change only affects the iterator, the default value return isn't affected.
I also updated the test to consume the tuple. There's probably more that could go there, but I'm not quite sure what yet.
libgit2
I think libgit2 supports my interpretation of things. git_config_iterator iterates over git_config_entry, which contains both the name and the value (as well as some other information that might be useful to use).
Extension
Looking at my example above, it doesn't seem like (key, value) is all that useful. It might be a good idea to also return level. It's in git_config_entry, so it's available to the iterator.
Alternative
As I pointed out, I don't think this has worked as intended for years. An equally simple solution would be to update the docs to match the current behavior. I'd be more than happy to do that if this PR is rejected.","Problem
The Config.__iter__ docs say the method iterates over all entries, where ""[e]ach element is a tuple containing the name and the value"", which could be problematic as the method ""may return multiple versions of each entry if they are set multiple times."" However, the (final) next method on the iterator only returns the name of the entry. There's a very good chance it's never returned a tuple, evidenced by the blame.
Example
from __future__ import print_function
from tempfile import NamedTemporaryFile
from pygit2 import Config

# Start with a blank slate
blank = Config()

# https://git-scm.com/docs/git-config#git-config-pushdefault
for index, value in list(enumerate(['nothing', 'current', 'upstream'])):
    # There's probably a better way to do this
    with NamedTemporaryFile() as config_file:
        config_file.write(""[push]\n\tdefault = %s"" % value)
        config_file.seek(0)
        blank.add_file(config_file.name, index)

# This executes Config.__iter__
for key in blank:
    # Since it doesn't return a value, we're stuck with the default return
    print(key, blank[key])
# push.default upstream
# push.default upstream
# push.default upstream

# It's not actually a multivar, but we can see everything this way
for value in blank.get_multivar('push.default'):
    print(value)
# nothing
# current
# upstream
Pull Request
I updated __next__'s return to also include the value. This matches what the docs describe, returning a tuple of name and value. Since the change only affects the iterator, the default value return isn't affected.
I also updated the test to consume the tuple. There's probably more that could go there, but I'm not quite sure what yet.
libgit2
I think libgit2 supports my interpretation of things. git_config_iterator iterates over git_config_entry, which contains both the name and the value (as well as some other information that might be useful to use).
Extension
Looking at my example above, it doesn't seem like (key, value) is all that useful. It might be a good idea to also return level. It's in git_config_entry, so it's available to the iterator.
Alternative
As I pointed out, I don't think this has worked as intended for years. An equally simple solution would be to update the docs to match the current behavior. I'd be more than happy to do that if this PR is rejected.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,776,2018-03-12T04:23:53Z,2018-03-17T01:56:09Z,2018-03-17T02:15:37Z,CLOSED,False,6,3,2,https://github.com/thecjharries,Update Config.__iter__ to match the documentation,2,[],https://github.com/libgit2/pygit2/pull/776,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/776#issuecomment-373310477,"Problem
The Config.__iter__ docs say the method iterates over all entries, where ""[e]ach element is a tuple containing the name and the value"", which could be problematic as the method ""may return multiple versions of each entry if they are set multiple times."" However, the (final) next method on the iterator only returns the name of the entry. There's a very good chance it's never returned a tuple, evidenced by the blame.
Example
from __future__ import print_function
from tempfile import NamedTemporaryFile
from pygit2 import Config

# Start with a blank slate
blank = Config()

# https://git-scm.com/docs/git-config#git-config-pushdefault
for index, value in list(enumerate(['nothing', 'current', 'upstream'])):
    # There's probably a better way to do this
    with NamedTemporaryFile() as config_file:
        config_file.write(""[push]\n\tdefault = %s"" % value)
        config_file.seek(0)
        blank.add_file(config_file.name, index)

# This executes Config.__iter__
for key in blank:
    # Since it doesn't return a value, we're stuck with the default return
    print(key, blank[key])
# push.default upstream
# push.default upstream
# push.default upstream

# It's not actually a multivar, but we can see everything this way
for value in blank.get_multivar('push.default'):
    print(value)
# nothing
# current
# upstream
Pull Request
I updated __next__'s return to also include the value. This matches what the docs describe, returning a tuple of name and value. Since the change only affects the iterator, the default value return isn't affected.
I also updated the test to consume the tuple. There's probably more that could go there, but I'm not quite sure what yet.
libgit2
I think libgit2 supports my interpretation of things. git_config_iterator iterates over git_config_entry, which contains both the name and the value (as well as some other information that might be useful to use).
Extension
Looking at my example above, it doesn't seem like (key, value) is all that useful. It might be a good idea to also return level. It's in git_config_entry, so it's available to the iterator.
Alternative
As I pointed out, I don't think this has worked as intended for years. An equally simple solution would be to update the docs to match the current behavior. I'd be more than happy to do that if this PR is rejected.","Good, thanks. Since we're at this better add the level now. Maybe the iterator should return ConfigEntry objects.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,776,2018-03-12T04:23:53Z,2018-03-17T01:56:09Z,2018-03-17T02:15:37Z,CLOSED,False,6,3,2,https://github.com/thecjharries,Update Config.__iter__ to match the documentation,2,[],https://github.com/libgit2/pygit2/pull/776,https://github.com/thecjharries,3,https://github.com/libgit2/pygit2/pull/776#issuecomment-373709277,"Problem
The Config.__iter__ docs say the method iterates over all entries, where ""[e]ach element is a tuple containing the name and the value"", which could be problematic as the method ""may return multiple versions of each entry if they are set multiple times."" However, the (final) next method on the iterator only returns the name of the entry. There's a very good chance it's never returned a tuple, evidenced by the blame.
Example
from __future__ import print_function
from tempfile import NamedTemporaryFile
from pygit2 import Config

# Start with a blank slate
blank = Config()

# https://git-scm.com/docs/git-config#git-config-pushdefault
for index, value in list(enumerate(['nothing', 'current', 'upstream'])):
    # There's probably a better way to do this
    with NamedTemporaryFile() as config_file:
        config_file.write(""[push]\n\tdefault = %s"" % value)
        config_file.seek(0)
        blank.add_file(config_file.name, index)

# This executes Config.__iter__
for key in blank:
    # Since it doesn't return a value, we're stuck with the default return
    print(key, blank[key])
# push.default upstream
# push.default upstream
# push.default upstream

# It's not actually a multivar, but we can see everything this way
for value in blank.get_multivar('push.default'):
    print(value)
# nothing
# current
# upstream
Pull Request
I updated __next__'s return to also include the value. This matches what the docs describe, returning a tuple of name and value. Since the change only affects the iterator, the default value return isn't affected.
I also updated the test to consume the tuple. There's probably more that could go there, but I'm not quite sure what yet.
libgit2
I think libgit2 supports my interpretation of things. git_config_iterator iterates over git_config_entry, which contains both the name and the value (as well as some other information that might be useful to use).
Extension
Looking at my example above, it doesn't seem like (key, value) is all that useful. It might be a good idea to also return level. It's in git_config_entry, so it's available to the iterator.
Alternative
As I pointed out, I don't think this has worked as intended for years. An equally simple solution would be to update the docs to match the current behavior. I'd be more than happy to do that if this PR is rejected.","I can do that. Once I get off work and get home, I'll knock that out. Should I update this PR or make a new one? I don't mind either way.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,776,2018-03-12T04:23:53Z,2018-03-17T01:56:09Z,2018-03-17T02:15:37Z,CLOSED,False,6,3,2,https://github.com/thecjharries,Update Config.__iter__ to match the documentation,2,[],https://github.com/libgit2/pygit2/pull/776,https://github.com/jdavid,4,https://github.com/libgit2/pygit2/pull/776#issuecomment-373736884,"Problem
The Config.__iter__ docs say the method iterates over all entries, where ""[e]ach element is a tuple containing the name and the value"", which could be problematic as the method ""may return multiple versions of each entry if they are set multiple times."" However, the (final) next method on the iterator only returns the name of the entry. There's a very good chance it's never returned a tuple, evidenced by the blame.
Example
from __future__ import print_function
from tempfile import NamedTemporaryFile
from pygit2 import Config

# Start with a blank slate
blank = Config()

# https://git-scm.com/docs/git-config#git-config-pushdefault
for index, value in list(enumerate(['nothing', 'current', 'upstream'])):
    # There's probably a better way to do this
    with NamedTemporaryFile() as config_file:
        config_file.write(""[push]\n\tdefault = %s"" % value)
        config_file.seek(0)
        blank.add_file(config_file.name, index)

# This executes Config.__iter__
for key in blank:
    # Since it doesn't return a value, we're stuck with the default return
    print(key, blank[key])
# push.default upstream
# push.default upstream
# push.default upstream

# It's not actually a multivar, but we can see everything this way
for value in blank.get_multivar('push.default'):
    print(value)
# nothing
# current
# upstream
Pull Request
I updated __next__'s return to also include the value. This matches what the docs describe, returning a tuple of name and value. Since the change only affects the iterator, the default value return isn't affected.
I also updated the test to consume the tuple. There's probably more that could go there, but I'm not quite sure what yet.
libgit2
I think libgit2 supports my interpretation of things. git_config_iterator iterates over git_config_entry, which contains both the name and the value (as well as some other information that might be useful to use).
Extension
Looking at my example above, it doesn't seem like (key, value) is all that useful. It might be a good idea to also return level. It's in git_config_entry, so it's available to the iterator.
Alternative
As I pointed out, I don't think this has worked as intended for years. An equally simple solution would be to update the docs to match the current behavior. I'd be more than happy to do that if this PR is rejected.",as you prefer,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,776,2018-03-12T04:23:53Z,2018-03-17T01:56:09Z,2018-03-17T02:15:37Z,CLOSED,False,6,3,2,https://github.com/thecjharries,Update Config.__iter__ to match the documentation,2,[],https://github.com/libgit2/pygit2/pull/776,https://github.com/thecjharries,5,https://github.com/libgit2/pygit2/pull/776#issuecomment-373886018,"Problem
The Config.__iter__ docs say the method iterates over all entries, where ""[e]ach element is a tuple containing the name and the value"", which could be problematic as the method ""may return multiple versions of each entry if they are set multiple times."" However, the (final) next method on the iterator only returns the name of the entry. There's a very good chance it's never returned a tuple, evidenced by the blame.
Example
from __future__ import print_function
from tempfile import NamedTemporaryFile
from pygit2 import Config

# Start with a blank slate
blank = Config()

# https://git-scm.com/docs/git-config#git-config-pushdefault
for index, value in list(enumerate(['nothing', 'current', 'upstream'])):
    # There's probably a better way to do this
    with NamedTemporaryFile() as config_file:
        config_file.write(""[push]\n\tdefault = %s"" % value)
        config_file.seek(0)
        blank.add_file(config_file.name, index)

# This executes Config.__iter__
for key in blank:
    # Since it doesn't return a value, we're stuck with the default return
    print(key, blank[key])
# push.default upstream
# push.default upstream
# push.default upstream

# It's not actually a multivar, but we can see everything this way
for value in blank.get_multivar('push.default'):
    print(value)
# nothing
# current
# upstream
Pull Request
I updated __next__'s return to also include the value. This matches what the docs describe, returning a tuple of name and value. Since the change only affects the iterator, the default value return isn't affected.
I also updated the test to consume the tuple. There's probably more that could go there, but I'm not quite sure what yet.
libgit2
I think libgit2 supports my interpretation of things. git_config_iterator iterates over git_config_entry, which contains both the name and the value (as well as some other information that might be useful to use).
Extension
Looking at my example above, it doesn't seem like (key, value) is all that useful. It might be a good idea to also return level. It's in git_config_entry, so it's available to the iterator.
Alternative
As I pointed out, I don't think this has worked as intended for years. An equally simple solution would be to update the docs to match the current behavior. I'd be more than happy to do that if this PR is rejected.",This PR is superseded by #778 and can be closed without merging.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,778,2018-03-17T01:55:38Z,2018-03-18T19:43:38Z,2018-03-18T20:07:44Z,MERGED,True,58,14,3,https://github.com/thecjharries,Refactor Config.__iter__ to iterate over ConfigEntry objects,1,[],https://github.com/libgit2/pygit2/pull/778,https://github.com/thecjharries,1,https://github.com/libgit2/pygit2/pull/778,"This PR supersedes #776.
Summary
Config.__iter__ iterates over a list of ConfigEntry objects instead of a list of names, matching the behavior of git_config_iterator.
Changes
ConfigEntry

Added a new staticmethod, decode_as_string, to simplify all the ffi.string(value).decode('utf-8') calls.
Added a new flag to _from_c, from_iterator=False, to track the origin of the entry.
Changed __del__ behavior to only git_config_entry_free ConfigEntrys created from git_config_get_entry. Attempting to free entries while iterating results in a seg fault. (If anyone can explain that to me, I'm curious. My C is pretty weak.)
Exposed level, the git_config_level_t value. (It looks like pygit2 has a shortened list; I didn't play with this too much because that's a different feature.)
Exposed name, the name of the entry, as a string (using decode_as_string).
Exposed value_string, a convenience accessor for decode_as_string(self.value).

All of these changes make it possible to create a ConfigEntry both from git_config_next and from git_config_get_entry. They expose some useful properties (level, name) which make it easier to track what an entry is and where it came from. value is the raw value that must be interpreted; value_string is conveniently a string that can be used immediately.
ConfigIterator

_next_entry returns a ConfigEntry instead of a pointer to a git_config_entry.
__next__ returns a ConfigEntry instead of the entry's name (see #776 for more info about that).

ConfigMultivarIterator

__next__ returns entry.value_string instead of calling ffi.string(entry.value).decode('utf-8')

Config

__getitem__ returns entry.value_string instead of calling ffi.string(entry.value).decode('utf-8')

Tests
test_iterator was refactored to check that each entry's level > -1 (again, pygit2 seems to have a reduced set of items; this seemed like a safe check). It still checks that core.bare is in the list of entries and that it is set, which is what the original tests did.
ConfigEntry didn't gain any tests. My knowledge of cffi is pretty limited so I'm not quite sure how to set up mocks for that.
Docs

Updated Config.__iter__ description
Added ConfigEntry section

Example
from __future__ import print_function

from tempfile import NamedTemporaryFile

from pygit2 import Config, GIT_CONFIG_LEVEL_GLOBAL, GIT_CONFIG_LEVEL_LOCAL

blank = Config()

with NamedTemporaryFile() as config_file:
    config_file.write(""[push]\n\tdefault = %s"" % 'simple')
    config_file.seek(0)
    blank.add_file(config_file.name, GIT_CONFIG_LEVEL_GLOBAL)

with NamedTemporaryFile() as config_file:
    config_file.write(""[push]\n\tdefault = %s\n[core]\n\tbare = no"" % 'matching')
    config_file.seek(0)
    blank.add_file(config_file.name, GIT_CONFIG_LEVEL_LOCAL)

for entry in blank:
    print(entry.name, entry.value_string, entry.level)

# push.default simple 4
# push.default matching 5
# core.bare no 5

print(blank['push.default'])

# matching

print(blank['core.bare'])

# no

print(blank.get_bool('core.bare'))

# False","This PR supersedes #776.
Summary
Config.__iter__ iterates over a list of ConfigEntry objects instead of a list of names, matching the behavior of git_config_iterator.
Changes
ConfigEntry

Added a new staticmethod, decode_as_string, to simplify all the ffi.string(value).decode('utf-8') calls.
Added a new flag to _from_c, from_iterator=False, to track the origin of the entry.
Changed __del__ behavior to only git_config_entry_free ConfigEntrys created from git_config_get_entry. Attempting to free entries while iterating results in a seg fault. (If anyone can explain that to me, I'm curious. My C is pretty weak.)
Exposed level, the git_config_level_t value. (It looks like pygit2 has a shortened list; I didn't play with this too much because that's a different feature.)
Exposed name, the name of the entry, as a string (using decode_as_string).
Exposed value_string, a convenience accessor for decode_as_string(self.value).

All of these changes make it possible to create a ConfigEntry both from git_config_next and from git_config_get_entry. They expose some useful properties (level, name) which make it easier to track what an entry is and where it came from. value is the raw value that must be interpreted; value_string is conveniently a string that can be used immediately.
ConfigIterator

_next_entry returns a ConfigEntry instead of a pointer to a git_config_entry.
__next__ returns a ConfigEntry instead of the entry's name (see #776 for more info about that).

ConfigMultivarIterator

__next__ returns entry.value_string instead of calling ffi.string(entry.value).decode('utf-8')

Config

__getitem__ returns entry.value_string instead of calling ffi.string(entry.value).decode('utf-8')

Tests
test_iterator was refactored to check that each entry's level > -1 (again, pygit2 seems to have a reduced set of items; this seemed like a safe check). It still checks that core.bare is in the list of entries and that it is set, which is what the original tests did.
ConfigEntry didn't gain any tests. My knowledge of cffi is pretty limited so I'm not quite sure how to set up mocks for that.
Docs

Updated Config.__iter__ description
Added ConfigEntry section

Example
from __future__ import print_function

from tempfile import NamedTemporaryFile

from pygit2 import Config, GIT_CONFIG_LEVEL_GLOBAL, GIT_CONFIG_LEVEL_LOCAL

blank = Config()

with NamedTemporaryFile() as config_file:
    config_file.write(""[push]\n\tdefault = %s"" % 'simple')
    config_file.seek(0)
    blank.add_file(config_file.name, GIT_CONFIG_LEVEL_GLOBAL)

with NamedTemporaryFile() as config_file:
    config_file.write(""[push]\n\tdefault = %s\n[core]\n\tbare = no"" % 'matching')
    config_file.seek(0)
    blank.add_file(config_file.name, GIT_CONFIG_LEVEL_LOCAL)

for entry in blank:
    print(entry.name, entry.value_string, entry.level)

# push.default simple 4
# push.default matching 5
# core.bare no 5

print(blank['push.default'])

# matching

print(blank['core.bare'])

# no

print(blank.get_bool('core.bare'))

# False",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,778,2018-03-17T01:55:38Z,2018-03-18T19:43:38Z,2018-03-18T20:07:44Z,MERGED,True,58,14,3,https://github.com/thecjharries,Refactor Config.__iter__ to iterate over ConfigEntry objects,1,[],https://github.com/libgit2/pygit2/pull/778,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/778#issuecomment-373996342,"This PR supersedes #776.
Summary
Config.__iter__ iterates over a list of ConfigEntry objects instead of a list of names, matching the behavior of git_config_iterator.
Changes
ConfigEntry

Added a new staticmethod, decode_as_string, to simplify all the ffi.string(value).decode('utf-8') calls.
Added a new flag to _from_c, from_iterator=False, to track the origin of the entry.
Changed __del__ behavior to only git_config_entry_free ConfigEntrys created from git_config_get_entry. Attempting to free entries while iterating results in a seg fault. (If anyone can explain that to me, I'm curious. My C is pretty weak.)
Exposed level, the git_config_level_t value. (It looks like pygit2 has a shortened list; I didn't play with this too much because that's a different feature.)
Exposed name, the name of the entry, as a string (using decode_as_string).
Exposed value_string, a convenience accessor for decode_as_string(self.value).

All of these changes make it possible to create a ConfigEntry both from git_config_next and from git_config_get_entry. They expose some useful properties (level, name) which make it easier to track what an entry is and where it came from. value is the raw value that must be interpreted; value_string is conveniently a string that can be used immediately.
ConfigIterator

_next_entry returns a ConfigEntry instead of a pointer to a git_config_entry.
__next__ returns a ConfigEntry instead of the entry's name (see #776 for more info about that).

ConfigMultivarIterator

__next__ returns entry.value_string instead of calling ffi.string(entry.value).decode('utf-8')

Config

__getitem__ returns entry.value_string instead of calling ffi.string(entry.value).decode('utf-8')

Tests
test_iterator was refactored to check that each entry's level > -1 (again, pygit2 seems to have a reduced set of items; this seemed like a safe check). It still checks that core.bare is in the list of entries and that it is set, which is what the original tests did.
ConfigEntry didn't gain any tests. My knowledge of cffi is pretty limited so I'm not quite sure how to set up mocks for that.
Docs

Updated Config.__iter__ description
Added ConfigEntry section

Example
from __future__ import print_function

from tempfile import NamedTemporaryFile

from pygit2 import Config, GIT_CONFIG_LEVEL_GLOBAL, GIT_CONFIG_LEVEL_LOCAL

blank = Config()

with NamedTemporaryFile() as config_file:
    config_file.write(""[push]\n\tdefault = %s"" % 'simple')
    config_file.seek(0)
    blank.add_file(config_file.name, GIT_CONFIG_LEVEL_GLOBAL)

with NamedTemporaryFile() as config_file:
    config_file.write(""[push]\n\tdefault = %s\n[core]\n\tbare = no"" % 'matching')
    config_file.seek(0)
    blank.add_file(config_file.name, GIT_CONFIG_LEVEL_LOCAL)

for entry in blank:
    print(entry.name, entry.value_string, entry.level)

# push.default simple 4
# push.default matching 5
# core.bare no 5

print(blank['push.default'])

# matching

print(blank['core.bare'])

# no

print(blank.get_bool('core.bare'))

# False","Thanks. Could you please squash the commits to simplify reviewing.
Also I think .value should return the string, then have something like .raw_value. I think most people are not interested in the raw value, and a string is what they want most of the time.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,778,2018-03-17T01:55:38Z,2018-03-18T19:43:38Z,2018-03-18T20:07:44Z,MERGED,True,58,14,3,https://github.com/thecjharries,Refactor Config.__iter__ to iterate over ConfigEntry objects,1,[],https://github.com/libgit2/pygit2/pull/778,https://github.com/thecjharries,3,https://github.com/libgit2/pygit2/pull/778#issuecomment-373999888,"This PR supersedes #776.
Summary
Config.__iter__ iterates over a list of ConfigEntry objects instead of a list of names, matching the behavior of git_config_iterator.
Changes
ConfigEntry

Added a new staticmethod, decode_as_string, to simplify all the ffi.string(value).decode('utf-8') calls.
Added a new flag to _from_c, from_iterator=False, to track the origin of the entry.
Changed __del__ behavior to only git_config_entry_free ConfigEntrys created from git_config_get_entry. Attempting to free entries while iterating results in a seg fault. (If anyone can explain that to me, I'm curious. My C is pretty weak.)
Exposed level, the git_config_level_t value. (It looks like pygit2 has a shortened list; I didn't play with this too much because that's a different feature.)
Exposed name, the name of the entry, as a string (using decode_as_string).
Exposed value_string, a convenience accessor for decode_as_string(self.value).

All of these changes make it possible to create a ConfigEntry both from git_config_next and from git_config_get_entry. They expose some useful properties (level, name) which make it easier to track what an entry is and where it came from. value is the raw value that must be interpreted; value_string is conveniently a string that can be used immediately.
ConfigIterator

_next_entry returns a ConfigEntry instead of a pointer to a git_config_entry.
__next__ returns a ConfigEntry instead of the entry's name (see #776 for more info about that).

ConfigMultivarIterator

__next__ returns entry.value_string instead of calling ffi.string(entry.value).decode('utf-8')

Config

__getitem__ returns entry.value_string instead of calling ffi.string(entry.value).decode('utf-8')

Tests
test_iterator was refactored to check that each entry's level > -1 (again, pygit2 seems to have a reduced set of items; this seemed like a safe check). It still checks that core.bare is in the list of entries and that it is set, which is what the original tests did.
ConfigEntry didn't gain any tests. My knowledge of cffi is pretty limited so I'm not quite sure how to set up mocks for that.
Docs

Updated Config.__iter__ description
Added ConfigEntry section

Example
from __future__ import print_function

from tempfile import NamedTemporaryFile

from pygit2 import Config, GIT_CONFIG_LEVEL_GLOBAL, GIT_CONFIG_LEVEL_LOCAL

blank = Config()

with NamedTemporaryFile() as config_file:
    config_file.write(""[push]\n\tdefault = %s"" % 'simple')
    config_file.seek(0)
    blank.add_file(config_file.name, GIT_CONFIG_LEVEL_GLOBAL)

with NamedTemporaryFile() as config_file:
    config_file.write(""[push]\n\tdefault = %s\n[core]\n\tbare = no"" % 'matching')
    config_file.seek(0)
    blank.add_file(config_file.name, GIT_CONFIG_LEVEL_LOCAL)

for entry in blank:
    print(entry.name, entry.value_string, entry.level)

# push.default simple 4
# push.default matching 5
# core.bare no 5

print(blank['push.default'])

# matching

print(blank['core.bare'])

# no

print(blank.get_bool('core.bare'))

# False","I had the same thought when writing it. The raw value is used a couple of times in Config, which made me wary about changing it. The tests ran just fine locally, so it doesn't look like anything else was depending on that.

I squashed everything to a single commit (I actually didn't know how to do that until today)
ConfigEntry.value is now the decoded string value
ConfigEntry.raw_value is the raw C value, which is used for get_bool and get_int",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,778,2018-03-17T01:55:38Z,2018-03-18T19:43:38Z,2018-03-18T20:07:44Z,MERGED,True,58,14,3,https://github.com/thecjharries,Refactor Config.__iter__ to iterate over ConfigEntry objects,1,[],https://github.com/libgit2/pygit2/pull/778,https://github.com/thecjharries,4,https://github.com/libgit2/pygit2/pull/778#issuecomment-374000030,"This PR supersedes #776.
Summary
Config.__iter__ iterates over a list of ConfigEntry objects instead of a list of names, matching the behavior of git_config_iterator.
Changes
ConfigEntry

Added a new staticmethod, decode_as_string, to simplify all the ffi.string(value).decode('utf-8') calls.
Added a new flag to _from_c, from_iterator=False, to track the origin of the entry.
Changed __del__ behavior to only git_config_entry_free ConfigEntrys created from git_config_get_entry. Attempting to free entries while iterating results in a seg fault. (If anyone can explain that to me, I'm curious. My C is pretty weak.)
Exposed level, the git_config_level_t value. (It looks like pygit2 has a shortened list; I didn't play with this too much because that's a different feature.)
Exposed name, the name of the entry, as a string (using decode_as_string).
Exposed value_string, a convenience accessor for decode_as_string(self.value).

All of these changes make it possible to create a ConfigEntry both from git_config_next and from git_config_get_entry. They expose some useful properties (level, name) which make it easier to track what an entry is and where it came from. value is the raw value that must be interpreted; value_string is conveniently a string that can be used immediately.
ConfigIterator

_next_entry returns a ConfigEntry instead of a pointer to a git_config_entry.
__next__ returns a ConfigEntry instead of the entry's name (see #776 for more info about that).

ConfigMultivarIterator

__next__ returns entry.value_string instead of calling ffi.string(entry.value).decode('utf-8')

Config

__getitem__ returns entry.value_string instead of calling ffi.string(entry.value).decode('utf-8')

Tests
test_iterator was refactored to check that each entry's level > -1 (again, pygit2 seems to have a reduced set of items; this seemed like a safe check). It still checks that core.bare is in the list of entries and that it is set, which is what the original tests did.
ConfigEntry didn't gain any tests. My knowledge of cffi is pretty limited so I'm not quite sure how to set up mocks for that.
Docs

Updated Config.__iter__ description
Added ConfigEntry section

Example
from __future__ import print_function

from tempfile import NamedTemporaryFile

from pygit2 import Config, GIT_CONFIG_LEVEL_GLOBAL, GIT_CONFIG_LEVEL_LOCAL

blank = Config()

with NamedTemporaryFile() as config_file:
    config_file.write(""[push]\n\tdefault = %s"" % 'simple')
    config_file.seek(0)
    blank.add_file(config_file.name, GIT_CONFIG_LEVEL_GLOBAL)

with NamedTemporaryFile() as config_file:
    config_file.write(""[push]\n\tdefault = %s\n[core]\n\tbare = no"" % 'matching')
    config_file.seek(0)
    blank.add_file(config_file.name, GIT_CONFIG_LEVEL_LOCAL)

for entry in blank:
    print(entry.name, entry.value_string, entry.level)

# push.default simple 4
# push.default matching 5
# core.bare no 5

print(blank['push.default'])

# matching

print(blank['core.bare'])

# no

print(blank.get_bool('core.bare'))

# False",It looks like I squashed too much. I'll have that fixed in a few minutes. Sorry about that.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,778,2018-03-17T01:55:38Z,2018-03-18T19:43:38Z,2018-03-18T20:07:44Z,MERGED,True,58,14,3,https://github.com/thecjharries,Refactor Config.__iter__ to iterate over ConfigEntry objects,1,[],https://github.com/libgit2/pygit2/pull/778,https://github.com/jdavid,5,https://github.com/libgit2/pygit2/pull/778#issuecomment-374038644,"This PR supersedes #776.
Summary
Config.__iter__ iterates over a list of ConfigEntry objects instead of a list of names, matching the behavior of git_config_iterator.
Changes
ConfigEntry

Added a new staticmethod, decode_as_string, to simplify all the ffi.string(value).decode('utf-8') calls.
Added a new flag to _from_c, from_iterator=False, to track the origin of the entry.
Changed __del__ behavior to only git_config_entry_free ConfigEntrys created from git_config_get_entry. Attempting to free entries while iterating results in a seg fault. (If anyone can explain that to me, I'm curious. My C is pretty weak.)
Exposed level, the git_config_level_t value. (It looks like pygit2 has a shortened list; I didn't play with this too much because that's a different feature.)
Exposed name, the name of the entry, as a string (using decode_as_string).
Exposed value_string, a convenience accessor for decode_as_string(self.value).

All of these changes make it possible to create a ConfigEntry both from git_config_next and from git_config_get_entry. They expose some useful properties (level, name) which make it easier to track what an entry is and where it came from. value is the raw value that must be interpreted; value_string is conveniently a string that can be used immediately.
ConfigIterator

_next_entry returns a ConfigEntry instead of a pointer to a git_config_entry.
__next__ returns a ConfigEntry instead of the entry's name (see #776 for more info about that).

ConfigMultivarIterator

__next__ returns entry.value_string instead of calling ffi.string(entry.value).decode('utf-8')

Config

__getitem__ returns entry.value_string instead of calling ffi.string(entry.value).decode('utf-8')

Tests
test_iterator was refactored to check that each entry's level > -1 (again, pygit2 seems to have a reduced set of items; this seemed like a safe check). It still checks that core.bare is in the list of entries and that it is set, which is what the original tests did.
ConfigEntry didn't gain any tests. My knowledge of cffi is pretty limited so I'm not quite sure how to set up mocks for that.
Docs

Updated Config.__iter__ description
Added ConfigEntry section

Example
from __future__ import print_function

from tempfile import NamedTemporaryFile

from pygit2 import Config, GIT_CONFIG_LEVEL_GLOBAL, GIT_CONFIG_LEVEL_LOCAL

blank = Config()

with NamedTemporaryFile() as config_file:
    config_file.write(""[push]\n\tdefault = %s"" % 'simple')
    config_file.seek(0)
    blank.add_file(config_file.name, GIT_CONFIG_LEVEL_GLOBAL)

with NamedTemporaryFile() as config_file:
    config_file.write(""[push]\n\tdefault = %s\n[core]\n\tbare = no"" % 'matching')
    config_file.seek(0)
    blank.add_file(config_file.name, GIT_CONFIG_LEVEL_LOCAL)

for entry in blank:
    print(entry.name, entry.value_string, entry.level)

# push.default simple 4
# push.default matching 5
# core.bare no 5

print(blank['push.default'])

# matching

print(blank['core.bare'])

# no

print(blank.get_bool('core.bare'))

# False","Good job, thanks!",True,{'THUMBS_UP': ['https://github.com/thecjharries']}
libgit2/pygit2,https://github.com/libgit2/pygit2,779,2018-03-18T19:24:05Z,2018-03-18T21:32:24Z,2018-03-18T21:32:44Z,MERGED,True,379,0,7,https://github.com/terminalmage,Finish worktree support,9,[],https://github.com/libgit2/pygit2/pull/779,https://github.com/terminalmage,1,https://github.com/libgit2/pygit2/pull/779,"This adds a unit test to the work done in #719 and #691, so that we can get this feature merged. It's also been rebased again, against the head of the master branch.","This adds a unit test to the work done in #719 and #691, so that we can get this feature merged. It's also been rebased again, against the head of the master branch.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,779,2018-03-18T19:24:05Z,2018-03-18T21:32:24Z,2018-03-18T21:32:44Z,MERGED,True,379,0,7,https://github.com/terminalmage,Finish worktree support,9,[],https://github.com/libgit2/pygit2/pull/779,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/779#issuecomment-374039373,"This adds a unit test to the work done in #719 and #691, so that we can get this feature merged. It's also been rebased again, against the head of the master branch.","Thanks!
The test is failing in Windows (AppVeyor), could you check that?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,779,2018-03-18T19:24:05Z,2018-03-18T21:32:24Z,2018-03-18T21:32:44Z,MERGED,True,379,0,7,https://github.com/terminalmage,Finish worktree support,9,[],https://github.com/libgit2/pygit2/pull/779,https://github.com/terminalmage,3,https://github.com/libgit2/pygit2/pull/779#issuecomment-374039661,"This adds a unit test to the work done in #719 and #691, so that we can get this feature merged. It's also been rebased again, against the head of the master branch.","@jdavid This appears to be due to the fact that pygit2 is using forward slashes as path separators, so they fail the comparison. Should be an easy fix using os.path.realpath() to normalize it.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,779,2018-03-18T19:24:05Z,2018-03-18T21:32:24Z,2018-03-18T21:32:44Z,MERGED,True,379,0,7,https://github.com/terminalmage,Finish worktree support,9,[],https://github.com/libgit2/pygit2/pull/779,https://github.com/terminalmage,4,https://github.com/libgit2/pygit2/pull/779#issuecomment-374043306,"This adds a unit test to the work done in #719 and #691, so that we can get this feature merged. It's also been rebased again, against the head of the master branch.",Windows tests passing now. 🎉,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,779,2018-03-18T19:24:05Z,2018-03-18T21:32:24Z,2018-03-18T21:32:44Z,MERGED,True,379,0,7,https://github.com/terminalmage,Finish worktree support,9,[],https://github.com/libgit2/pygit2/pull/779,https://github.com/jdavid,5,https://github.com/libgit2/pygit2/pull/779#issuecomment-374050383,"This adds a unit test to the work done in #719 and #691, so that we can get this feature merged. It's also been rebased again, against the head of the master branch.",Thanks!,True,{'HOORAY': ['https://github.com/terminalmage']}
libgit2/pygit2,https://github.com/libgit2/pygit2,783,2018-03-26T12:50:33Z,2018-03-30T17:22:13Z,2018-03-30T19:58:12Z,MERGED,True,14,13,5,https://github.com/carlosmn,Update to libgit2 v0.27,2,[],https://github.com/libgit2/pygit2/pull/783,https://github.com/carlosmn,1,https://github.com/libgit2/pygit2/pull/783,"New release is out, so this is the customary update. Just one API change this time around.","New release is out, so this is the customary update. Just one API change this time around.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,783,2018-03-26T12:50:33Z,2018-03-30T17:22:13Z,2018-03-30T19:58:12Z,MERGED,True,14,13,5,https://github.com/carlosmn,Update to libgit2 v0.27,2,[],https://github.com/libgit2/pygit2/pull/783,https://github.com/ilovezfs,2,https://github.com/libgit2/pygit2/pull/783#issuecomment-377567436,"New release is out, so this is the customary update. Just one API change this time around.","c:\projects\pygit2\src\types.h(36): fatal error C1189: #error:  You need a compatible libgit2 version (v0.27.x)

@carlosmn hmm is this just waiting for something to catch up?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,783,2018-03-26T12:50:33Z,2018-03-30T17:22:13Z,2018-03-30T19:58:12Z,MERGED,True,14,13,5,https://github.com/carlosmn,Update to libgit2 v0.27,2,[],https://github.com/libgit2/pygit2/pull/783,https://github.com/carlosmn,3,https://github.com/libgit2/pygit2/pull/783#issuecomment-377575973,"New release is out, so this is the customary update. Just one API change this time around.",I forgot this project had AppVeyor.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,783,2018-03-26T12:50:33Z,2018-03-30T17:22:13Z,2018-03-30T19:58:12Z,MERGED,True,14,13,5,https://github.com/carlosmn,Update to libgit2 v0.27,2,[],https://github.com/libgit2/pygit2/pull/783,https://github.com/ilovezfs,4,https://github.com/libgit2/pygit2/pull/783#issuecomment-377576157,"New release is out, so this is the customary update. Just one API change this time around.","@carlosmn no worries
@jdavid thanks for merging!
Any chance of getting a new version up on PyPI? I'm currently having to apply this as a patch in three Homebrew formulae in Homebrew/homebrew-core#25816",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,783,2018-03-26T12:50:33Z,2018-03-30T17:22:13Z,2018-03-30T19:58:12Z,MERGED,True,14,13,5,https://github.com/carlosmn,Update to libgit2 v0.27,2,[],https://github.com/libgit2/pygit2/pull/783,https://github.com/jdavid,5,https://github.com/libgit2/pygit2/pull/783#issuecomment-377608760,"New release is out, so this is the customary update. Just one API change this time around.",done,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,783,2018-03-26T12:50:33Z,2018-03-30T17:22:13Z,2018-03-30T19:58:12Z,MERGED,True,14,13,5,https://github.com/carlosmn,Update to libgit2 v0.27,2,[],https://github.com/libgit2/pygit2/pull/783,https://github.com/ilovezfs,6,https://github.com/libgit2/pygit2/pull/783#issuecomment-377608968,"New release is out, so this is the customary update. Just one API change this time around.",thank you!,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,786,2018-03-28T08:08:59Z,2018-03-28T09:12:03Z,2018-03-28T09:12:03Z,MERGED,True,2,2,1,https://github.com/RazerM,Fix redefinition of typedef for gcc-4.3,1,[],https://github.com/libgit2/pygit2/pull/786,https://github.com/RazerM,1,https://github.com/libgit2/pygit2/pull/786,Fixes #784,Fixes #784,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,790,2018-04-27T20:27:50Z,2019-03-31T11:46:01Z,2019-03-31T11:46:01Z,CLOSED,False,157,6,3,https://github.com/erikvanzijst,Patch: Add __str__ and __bytes__ for undecoded content.,1,[],https://github.com/libgit2/pygit2/pull/790,https://github.com/erikvanzijst,1,https://github.com/libgit2/pygit2/pull/790,"Patch.patch assumes all content to be encoded in UTF-8 and forcefully
replaces any non-decodable sequences. This can lead to corruption for
content that either does not conform to any specific encoding altogether, or
uses an encoding that is incompatible with, or ambinuous to UTF-8.
This change adds __str__ and __bytes__ implementations to Patch that
return the unmodified, raw bytes.","Patch.patch assumes all content to be encoded in UTF-8 and forcefully
replaces any non-decodable sequences. This can lead to corruption for
content that either does not conform to any specific encoding altogether, or
uses an encoding that is incompatible with, or ambinuous to UTF-8.
This change adds __str__ and __bytes__ implementations to Patch that
return the unmodified, raw bytes.",True,{'THUMBS_UP': ['https://github.com/dtao']}
libgit2/pygit2,https://github.com/libgit2/pygit2,790,2018-04-27T20:27:50Z,2019-03-31T11:46:01Z,2019-03-31T11:46:01Z,CLOSED,False,157,6,3,https://github.com/erikvanzijst,Patch: Add __str__ and __bytes__ for undecoded content.,1,[],https://github.com/libgit2/pygit2/pull/790,https://github.com/erikvanzijst,2,https://github.com/libgit2/pygit2/pull/790#issuecomment-385093806,"Patch.patch assumes all content to be encoded in UTF-8 and forcefully
replaces any non-decodable sequences. This can lead to corruption for
content that either does not conform to any specific encoding altogether, or
uses an encoding that is incompatible with, or ambinuous to UTF-8.
This change adds __str__ and __bytes__ implementations to Patch that
return the unmodified, raw bytes.","Would you mind having a look at this pr, @brandonio21?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,790,2018-04-27T20:27:50Z,2019-03-31T11:46:01Z,2019-03-31T11:46:01Z,CLOSED,False,157,6,3,https://github.com/erikvanzijst,Patch: Add __str__ and __bytes__ for undecoded content.,1,[],https://github.com/libgit2/pygit2/pull/790,https://github.com/erikvanzijst,3,https://github.com/libgit2/pygit2/pull/790#issuecomment-385094588,"Patch.patch assumes all content to be encoded in UTF-8 and forcefully
replaces any non-decodable sequences. This can lead to corruption for
content that either does not conform to any specific encoding altogether, or
uses an encoding that is incompatible with, or ambinuous to UTF-8.
This change adds __str__ and __bytes__ implementations to Patch that
return the unmodified, raw bytes.","We're using PyGit2 to power parts of Bitbucket, but up until now that didn't include patch generation (for which we still just shelled out git). As we're moving more functionality onto pygit, we ran into the forced unicode decoding issue. Bitbucket needs access to the raw, untouched diff/patch bytes and so it seemed appropriate to put that under str and bytes.
If I overlooked something and the raw byte contents of patches are already accessible, please let me know.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,790,2018-04-27T20:27:50Z,2019-03-31T11:46:01Z,2019-03-31T11:46:01Z,CLOSED,False,157,6,3,https://github.com/erikvanzijst,Patch: Add __str__ and __bytes__ for undecoded content.,1,[],https://github.com/libgit2/pygit2/pull/790,https://github.com/jdavid,4,https://github.com/libgit2/pygit2/pull/790#issuecomment-385253512,"Patch.patch assumes all content to be encoded in UTF-8 and forcefully
replaces any non-decodable sequences. This can lead to corruption for
content that either does not conform to any specific encoding altogether, or
uses an encoding that is incompatible with, or ambinuous to UTF-8.
This change adds __str__ and __bytes__ implementations to Patch that
return the unmodified, raw bytes.","We should deprecate .patch
So what we need is a way to get bytes and a way to get text:

bytes()
.decode()

Since .decode() will always return text, we can use it to deprecate .patch ; don't need to implement str()
Don't need to add new tests for .decode(), better to replace .patch by .decode() in the tests.
Bonus points if .patch raises a deprecation warning.
Thanks!",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,790,2018-04-27T20:27:50Z,2019-03-31T11:46:01Z,2019-03-31T11:46:01Z,CLOSED,False,157,6,3,https://github.com/erikvanzijst,Patch: Add __str__ and __bytes__ for undecoded content.,1,[],https://github.com/libgit2/pygit2/pull/790,https://github.com/jdavid,5,https://github.com/libgit2/pygit2/pull/790#issuecomment-385270745,"Patch.patch assumes all content to be encoded in UTF-8 and forcefully
replaces any non-decodable sequences. This can lead to corruption for
content that either does not conform to any specific encoding altogether, or
uses an encoding that is incompatible with, or ambinuous to UTF-8.
This change adds __str__ and __bytes__ implementations to Patch that
return the unmodified, raw bytes.","The problem with str() is that it should return text in Python 3 and bytes in Python 2, exactly as @erikvanzijst has implemented. So it cannot replace .patch; while .decode() is expected to return text in both Python 2 and 3.
So I think we should have bytes() and .decode() ; and we may have str()
Eventually decode could accept an optional extra parameter for the encoding.
The case for str is about the output we want for print(patch), which I think is a different issue.
$ python2
>>> b''.decode()
u''
>>> str(b'')
''

$ python3
>>> b''.decode()
''
>>> str(b'')
""b''""",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,790,2018-04-27T20:27:50Z,2019-03-31T11:46:01Z,2019-03-31T11:46:01Z,CLOSED,False,157,6,3,https://github.com/erikvanzijst,Patch: Add __str__ and __bytes__ for undecoded content.,1,[],https://github.com/libgit2/pygit2/pull/790,https://github.com/erikvanzijst,6,https://github.com/libgit2/pygit2/pull/790#issuecomment-385484471,"Patch.patch assumes all content to be encoded in UTF-8 and forcefully
replaces any non-decodable sequences. This can lead to corruption for
content that either does not conform to any specific encoding altogether, or
uses an encoding that is incompatible with, or ambinuous to UTF-8.
This change adds __str__ and __bytes__ implementations to Patch that
return the unmodified, raw bytes.","Yeah, I can add an explicit .decode(encoding=""utf-8"", errors=""strict"") to Patch, mimicking str.decode / bytes.decode, to make it a little easier to write py2/3-compatible clients.
I propose to also keep str, as it's so ubiquitous.
I'll also add a runtime deprecation warning to Patch.patch.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,790,2018-04-27T20:27:50Z,2019-03-31T11:46:01Z,2019-03-31T11:46:01Z,CLOSED,False,157,6,3,https://github.com/erikvanzijst,Patch: Add __str__ and __bytes__ for undecoded content.,1,[],https://github.com/libgit2/pygit2/pull/790,https://github.com/jdavid,7,https://github.com/libgit2/pygit2/pull/790#issuecomment-385628411,"Patch.patch assumes all content to be encoded in UTF-8 and forcefully
replaces any non-decodable sequences. This can lead to corruption for
content that either does not conform to any specific encoding altogether, or
uses an encoding that is incompatible with, or ambinuous to UTF-8.
This change adds __str__ and __bytes__ implementations to Patch that
return the unmodified, raw bytes.","It's true that str() is more obvious than .decode(), but still don't like the idea for print(patch) to print the text string.
What about .as_bytes() and .as_string(), or .to_bytes() and .to_string()? Or something else like that.
Here we're defining the policy that eventually should be used across the whole lib.
For reference, right now only Oid implements str() and only Blob implements bytes().",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,790,2018-04-27T20:27:50Z,2019-03-31T11:46:01Z,2019-03-31T11:46:01Z,CLOSED,False,157,6,3,https://github.com/erikvanzijst,Patch: Add __str__ and __bytes__ for undecoded content.,1,[],https://github.com/libgit2/pygit2/pull/790,https://github.com/jdavid,8,https://github.com/libgit2/pygit2/pull/790#issuecomment-385650120,"Patch.patch assumes all content to be encoded in UTF-8 and forcefully
replaces any non-decodable sequences. This can lead to corruption for
content that either does not conform to any specific encoding altogether, or
uses an encoding that is incompatible with, or ambinuous to UTF-8.
This change adds __str__ and __bytes__ implementations to Patch that
return the unmodified, raw bytes.",Or to be more explicit as/to_text() instead of as/to_string(),True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,790,2018-04-27T20:27:50Z,2019-03-31T11:46:01Z,2019-03-31T11:46:01Z,CLOSED,False,157,6,3,https://github.com/erikvanzijst,Patch: Add __str__ and __bytes__ for undecoded content.,1,[],https://github.com/libgit2/pygit2/pull/790,https://github.com/erikvanzijst,9,https://github.com/libgit2/pygit2/pull/790#issuecomment-385728533,"Patch.patch assumes all content to be encoded in UTF-8 and forcefully
replaces any non-decodable sequences. This can lead to corruption for
content that either does not conform to any specific encoding altogether, or
uses an encoding that is incompatible with, or ambinuous to UTF-8.
This change adds __str__ and __bytes__ implementations to Patch that
return the unmodified, raw bytes.","It's true that str() is more obvious than .decode(), but still don't like the idea for print(patch) to print the text string.

That's true only on Python 3 though. What probably shaped my thinking a bit is that most of my day to day work is still Python 2 where str() returns raw bytes, not text.
However, I agree that it might be best to put Python 3 idioms ahead of Python 2 and I'm happy to axe __str__ in that light. Doing that probably also diminishes the value of having a Python 3-specific __bytes__.
AFAICT, Blob implements the buffer protocol, but bytes(blob) only works on Python 3. On Python 2 it relies on Blob.__str__ which doesn't return the blob's contents. The only 2/3-compatible way to access a blob's bytes seems to be through Blob.data, or something like memoryview(blob).tobytes() through the buffer protocol interface directly.
What would you think of carrying Blob's interface forward and adding Patch.data instead of as_bytes()? Additionally I could also implement the buffer protocol onto Patch, so that it behaves identically to Blob.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,790,2018-04-27T20:27:50Z,2019-03-31T11:46:01Z,2019-03-31T11:46:01Z,CLOSED,False,157,6,3,https://github.com/erikvanzijst,Patch: Add __str__ and __bytes__ for undecoded content.,1,[],https://github.com/libgit2/pygit2/pull/790,https://github.com/jdavid,10,https://github.com/libgit2/pygit2/pull/790#issuecomment-385752091,"Patch.patch assumes all content to be encoded in UTF-8 and forcefully
replaces any non-decodable sequences. This can lead to corruption for
content that either does not conform to any specific encoding altogether, or
uses an encoding that is incompatible with, or ambinuous to UTF-8.
This change adds __str__ and __bytes__ implementations to Patch that
return the unmodified, raw bytes.","Objects such as blobs also have .read_raw(), though only blobs have .data ; not nice to have 2 ways for the same thing. Ideally I would like a consistent way to get bytes and text strings through the library, even if it's not implemented now, I would like it to be defined.
#610 is a similar issue, concerning DiffLine. The names chosen here will apply there. Again we see right now 2 different ways, to get the text string, .patch and .content for Patch and DiffLine respectively.
So let leave alone str, and bytes reserved for objects implementing the buffer protocol.
So, .data looks good enough to me. Here an updated proposal:

.data for the bytes string
.text for the text string

If somebody wants a text string with an encoding different from utf-8 it would be as easy as:
.data.decode(...)

So no need for .text to be a method, it would be just a shorthand.
The buffer protocol I understand is an optimization to reduce memory copies. Whether to implement it or not is up to you, don't know whether it will make a difference for your use case.
These could be the commits:

Add .data
Add .text (and deprecate .patch)
Implement the buffer protocol

I understand the first one is enough to solve your issue. It's up to you how far do you want to go 😄
Please don't hesitate if you have better ideas than .data and .text",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,790,2018-04-27T20:27:50Z,2019-03-31T11:46:01Z,2019-03-31T11:46:01Z,CLOSED,False,157,6,3,https://github.com/erikvanzijst,Patch: Add __str__ and __bytes__ for undecoded content.,1,[],https://github.com/libgit2/pygit2/pull/790,https://github.com/erikvanzijst,11,https://github.com/libgit2/pygit2/pull/790#issuecomment-385777467,"Patch.patch assumes all content to be encoded in UTF-8 and forcefully
replaces any non-decodable sequences. This can lead to corruption for
content that either does not conform to any specific encoding altogether, or
uses an encoding that is incompatible with, or ambinuous to UTF-8.
This change adds __str__ and __bytes__ implementations to Patch that
return the unmodified, raw bytes.","Yeah, I'm happy to add Patch.data, as well as a read-only buffer protocol interface. The latter could be helpful when dealing with very large diffs, similar to very large blobs. Buffers probably make less sense for DiffLine.
Though, would .text be hardwired to replace invalid code sequences (errors='replace', like Patch.patch does now)? If we do that, making it seemingly trivial to convert between bytes and text, then I worry that we might to continue to feed into the common misunderstandings around text decoding.
I defined .encode() to default to errors='strict' so as to blow up on non-UTF8 data. A method or attribute that silently truncates its input doesn't seem attractive.
Do we really need a shorthand for decoding a patch/blob/line into text? With Git's lack of encoding information, this is an inherently tricky and unreliable proposition.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,790,2018-04-27T20:27:50Z,2019-03-31T11:46:01Z,2019-03-31T11:46:01Z,CLOSED,False,157,6,3,https://github.com/erikvanzijst,Patch: Add __str__ and __bytes__ for undecoded content.,1,[],https://github.com/libgit2/pygit2/pull/790,https://github.com/jdavid,12,https://github.com/libgit2/pygit2/pull/790#issuecomment-385906316,"Patch.patch assumes all content to be encoded in UTF-8 and forcefully
replaces any non-decodable sequences. This can lead to corruption for
content that either does not conform to any specific encoding altogether, or
uses an encoding that is incompatible with, or ambinuous to UTF-8.
This change adds __str__ and __bytes__ implementations to Patch that
return the unmodified, raw bytes.","This replace usage was introduced in #77 ;
the commit given as example is gitster/git@c31820c
That commit doesn't have an encoding header. Github prefers to print bad data that not printing at all. And so does git log or git show for instance.
So I would stick to that behaviour and keep replace. It will also make a smoother transition from .patch to .text, and through all these years I don't remember anyone raising an issue because of this.
I think it's convenient to have .text, probably we could add it in other places as well, so you can type things like print(commit.text)
For reference there're a few more places where we get the bytes and text with different naming: Commit.message, Commit.raw_message, Tag.message, Tag._message
In some cases there are several attributes available and here we see 2 conventions:

TreeEntry.name and TreeEntry._name
Signature.name and Signature.raw_name

We need to consider these to have a coherent convention... I like Patch.text and .data looks good enough, though it could be .raw or .raw_text, ??",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,790,2018-04-27T20:27:50Z,2019-03-31T11:46:01Z,2019-03-31T11:46:01Z,CLOSED,False,157,6,3,https://github.com/erikvanzijst,Patch: Add __str__ and __bytes__ for undecoded content.,1,[],https://github.com/libgit2/pygit2/pull/790,https://github.com/jnrbsn,13,https://github.com/libgit2/pygit2/pull/790#issuecomment-478281884,"Patch.patch assumes all content to be encoded in UTF-8 and forcefully
replaces any non-decodable sequences. This can lead to corruption for
content that either does not conform to any specific encoding altogether, or
uses an encoding that is incompatible with, or ambinuous to UTF-8.
This change adds __str__ and __bytes__ implementations to Patch that
return the unmodified, raw bytes.",@jdavid @erikvanzijst This can probably be closed now that #893 is merged.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,790,2018-04-27T20:27:50Z,2019-03-31T11:46:01Z,2019-03-31T11:46:01Z,CLOSED,False,157,6,3,https://github.com/erikvanzijst,Patch: Add __str__ and __bytes__ for undecoded content.,1,[],https://github.com/libgit2/pygit2/pull/790,https://github.com/jdavid,14,https://github.com/libgit2/pygit2/pull/790#issuecomment-478334475,"Patch.patch assumes all content to be encoded in UTF-8 and forcefully
replaces any non-decodable sequences. This can lead to corruption for
content that either does not conform to any specific encoding altogether, or
uses an encoding that is incompatible with, or ambinuous to UTF-8.
This change adds __str__ and __bytes__ implementations to Patch that
return the unmodified, raw bytes.","yes, follow up in issue #895
Thank you both!",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,804,2018-06-19T00:51:51Z,2019-02-23T21:51:33Z,2019-02-23T21:51:33Z,MERGED,True,417,2,9,https://github.com/mystor,Add mailmap support to pygit2,3,[],https://github.com/libgit2/pygit2/pull/804,https://github.com/mystor,1,https://github.com/libgit2/pygit2/pull/804,"This adds pygit2 support for the mailmap APIs added in libgit2/libgit2#4586. It cannot be merged yet as-is due to using unreleased libgit2 APIs.
In addition, implementing this patch caused me to find libgit2/libgit2#4688. Tests will fail on this PR until that PR is merged. I also noticed #803 while working on these.","This adds pygit2 support for the mailmap APIs added in libgit2/libgit2#4586. It cannot be merged yet as-is due to using unreleased libgit2 APIs.
In addition, implementing this patch caused me to find libgit2/libgit2#4688. Tests will fail on this PR until that PR is merged. I also noticed #803 while working on these.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,805,2018-06-24T01:30:49Z,2018-06-24T07:31:04Z,2018-06-24T13:00:21Z,MERGED,True,1,1,1,https://github.com/pluehne,Fix typo in documentation,1,[],https://github.com/libgit2/pygit2/pull/805,https://github.com/pluehne,1,https://github.com/libgit2/pygit2/pull/805,I just found a small typo in the documentation 🙂.,I just found a small typo in the documentation 🙂.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,806,2018-06-25T16:45:30Z,2018-06-25T17:27:32Z,2018-06-25T17:27:32Z,MERGED,True,40,0,2,https://github.com/jeremy-im,Implement Object.short_id property,1,[],https://github.com/libgit2/pygit2/pull/806,https://github.com/jeremy-im,1,https://github.com/libgit2/pygit2/pull/806,Issue #799,Issue #799,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,807,2018-06-27T15:09:42Z,2018-06-28T07:55:42Z,2018-06-28T07:55:42Z,MERGED,True,1,0,1,https://github.com/jeremy-im,Document Object.short_id property,1,[],https://github.com/libgit2/pygit2/pull/807,https://github.com/jeremy-im,1,https://github.com/libgit2/pygit2/pull/807,Issue #799,Issue #799,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,808,2018-07-10T04:27:04Z,2018-07-13T22:44:16Z,2018-07-13T22:44:16Z,MERGED,True,4,0,1,https://github.com/ktdreyer,doc: link to libgit2 ticket for git_log,1,[],https://github.com/libgit2/pygit2/pull/808,https://github.com/ktdreyer,1,https://github.com/libgit2/pygit2/pull/808,"The libgit2 walker is close to git-log in simple cases, but it does not
work quite the same way. For example, I've found that it does not return
the same number of commits compared to running ""git log ref1..ref2"".","The libgit2 walker is close to git-log in simple cases, but it does not
work quite the same way. For example, I've found that it does not return
the same number of commits compared to running ""git log ref1..ref2"".",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,816,2018-09-06T22:21:13Z,2018-09-15T08:45:07Z,2018-09-15T08:45:21Z,MERGED,True,85,5,5,https://github.com/chadrik,Add support for git_graph_descendant_of,5,[],https://github.com/libgit2/pygit2/pull/816,https://github.com/chadrik,1,https://github.com/libgit2/pygit2/pull/816,"Fixes issue #815
Let me know if this should be added to the docs, and if so, which section.","Fixes issue #815
Let me know if this should be added to the docs, and if so, which section.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,816,2018-09-06T22:21:13Z,2018-09-15T08:45:07Z,2018-09-15T08:45:21Z,MERGED,True,85,5,5,https://github.com/chadrik,Add support for git_graph_descendant_of,5,[],https://github.com/libgit2/pygit2/pull/816,https://github.com/chadrik,2,https://github.com/libgit2/pygit2/pull/816#issuecomment-419264730,"Fixes issue #815
Let me know if this should be added to the docs, and if so, which section.","Also, do you think it's worth adding a feature like this:
branches = repo.branches.with_commit(oid)
for branch in branches:
    print(branch)
print('master' in branches)
I would achieve this with a new __init__ argument to the Branches class that would constrain the results of __getitem__ and __iter__ to branches that contained the passed commit id.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,816,2018-09-06T22:21:13Z,2018-09-15T08:45:07Z,2018-09-15T08:45:21Z,MERGED,True,85,5,5,https://github.com/chadrik,Add support for git_graph_descendant_of,5,[],https://github.com/libgit2/pygit2/pull/816,https://github.com/jdavid,3,https://github.com/libgit2/pygit2/pull/816#issuecomment-419502191,"Fixes issue #815
Let me know if this should be added to the docs, and if so, which section.","Yes please add to the docs, just in docs/repository.rst",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,816,2018-09-06T22:21:13Z,2018-09-15T08:45:07Z,2018-09-15T08:45:21Z,MERGED,True,85,5,5,https://github.com/chadrik,Add support for git_graph_descendant_of,5,[],https://github.com/libgit2/pygit2/pull/816,https://github.com/jdavid,4,https://github.com/libgit2/pygit2/pull/816#issuecomment-419503181,"Fixes issue #815
Let me know if this should be added to the docs, and if so, which section.","Yes that sounds good, but would not be better branches.contains(...)? to mimic git branch --contains",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,816,2018-09-06T22:21:13Z,2018-09-15T08:45:07Z,2018-09-15T08:45:21Z,MERGED,True,85,5,5,https://github.com/chadrik,Add support for git_graph_descendant_of,5,[],https://github.com/libgit2/pygit2/pull/816,https://github.com/chadrik,5,https://github.com/libgit2/pygit2/pull/816#issuecomment-419533838,"Fixes issue #815
Let me know if this should be added to the docs, and if so, which section.","I added the docs.  Let me know if you had something more in mind.

Yes that sounds good, but would not be better branches.contains(...)? to mimic git branch --contains

That was my original thought, but I felt that branches.contains() feels like a method that should return a boolean (do the branches contain something, yes or no?), whereas branches.with_commit() seems to better indicate that it will return more branches.  Also, it makes it more clear that it has something to do with commits.  Ultimately, it's your call, though.  Let me know what you think.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,816,2018-09-06T22:21:13Z,2018-09-15T08:45:07Z,2018-09-15T08:45:21Z,MERGED,True,85,5,5,https://github.com/chadrik,Add support for git_graph_descendant_of,5,[],https://github.com/libgit2/pygit2/pull/816,https://github.com/jdavid,6,https://github.com/libgit2/pygit2/pull/816#issuecomment-419566674,"Fixes issue #815
Let me know if this should be added to the docs, and if so, which section.","Sounds good, true with_commit is more intuitive.
Could you add a test for with_commit? See the review as well.
Thanks!",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,816,2018-09-06T22:21:13Z,2018-09-15T08:45:07Z,2018-09-15T08:45:21Z,MERGED,True,85,5,5,https://github.com/chadrik,Add support for git_graph_descendant_of,5,[],https://github.com/libgit2/pygit2/pull/816,https://github.com/chadrik,7,https://github.com/libgit2/pygit2/pull/816#issuecomment-419567467,"Fixes issue #815
Let me know if this should be added to the docs, and if so, which section.","Could you add a test for with_commit? See the review as well.

Yep, just wanted to get sign off on the general design first.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,816,2018-09-06T22:21:13Z,2018-09-15T08:45:07Z,2018-09-15T08:45:21Z,MERGED,True,85,5,5,https://github.com/chadrik,Add support for git_graph_descendant_of,5,[],https://github.com/libgit2/pygit2/pull/816,https://github.com/chadrik,8,https://github.com/libgit2/pygit2/pull/816#issuecomment-421421352,"Fixes issue #815
Let me know if this should be added to the docs, and if so, which section.",Updated!  Let me know what you think.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,816,2018-09-06T22:21:13Z,2018-09-15T08:45:07Z,2018-09-15T08:45:21Z,MERGED,True,85,5,5,https://github.com/chadrik,Add support for git_graph_descendant_of,5,[],https://github.com/libgit2/pygit2/pull/816,https://github.com/jdavid,9,https://github.com/libgit2/pygit2/pull/816#issuecomment-421541863,"Fixes issue #815
Let me know if this should be added to the docs, and if so, which section.","Merged, thanks!",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,817,2018-09-12T14:34:58Z,2018-09-30T10:35:12Z,2018-09-30T10:35:12Z,MERGED,True,15,0,4,https://github.com/assafnativ,Added binding for git_submodule_head_id,3,[],https://github.com/libgit2/pygit2/pull/817,https://github.com/assafnativ,1,https://github.com/libgit2/pygit2/pull/817,git_submodule_head_id is required for extructing the Oid targeted by a submodule,git_submodule_head_id is required for extructing the Oid targeted by a submodule,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,817,2018-09-12T14:34:58Z,2018-09-30T10:35:12Z,2018-09-30T10:35:12Z,MERGED,True,15,0,4,https://github.com/assafnativ,Added binding for git_submodule_head_id,3,[],https://github.com/libgit2/pygit2/pull/817,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/817#issuecomment-421542237,git_submodule_head_id is required for extructing the Oid targeted by a submodule,Hi! Could you add a unit test?,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,817,2018-09-12T14:34:58Z,2018-09-30T10:35:12Z,2018-09-30T10:35:12Z,MERGED,True,15,0,4,https://github.com/assafnativ,Added binding for git_submodule_head_id,3,[],https://github.com/libgit2/pygit2/pull/817,https://github.com/jdavid,3,https://github.com/libgit2/pygit2/pull/817#issuecomment-421542264,git_submodule_head_id is required for extructing the Oid targeted by a submodule,"And add it to the docs as well, thanks!",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,817,2018-09-12T14:34:58Z,2018-09-30T10:35:12Z,2018-09-30T10:35:12Z,MERGED,True,15,0,4,https://github.com/assafnativ,Added binding for git_submodule_head_id,3,[],https://github.com/libgit2/pygit2/pull/817,https://github.com/assafnativ,4,https://github.com/libgit2/pygit2/pull/817#issuecomment-423808093,git_submodule_head_id is required for extructing the Oid targeted by a submodule,"I've added some kind of docs.
There are no unit tests for submodules whatsoever.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,817,2018-09-12T14:34:58Z,2018-09-30T10:35:12Z,2018-09-30T10:35:12Z,MERGED,True,15,0,4,https://github.com/assafnativ,Added binding for git_submodule_head_id,3,[],https://github.com/libgit2/pygit2/pull/817,https://github.com/jdavid,5,https://github.com/libgit2/pygit2/pull/817#issuecomment-425007976,git_submodule_head_id is required for extructing the Oid targeted by a submodule,"Thanks, actually there're tests for submodules in test/test_submodule.py",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,817,2018-09-12T14:34:58Z,2018-09-30T10:35:12Z,2018-09-30T10:35:12Z,MERGED,True,15,0,4,https://github.com/assafnativ,Added binding for git_submodule_head_id,3,[],https://github.com/libgit2/pygit2/pull/817,https://github.com/assafnativ,6,https://github.com/libgit2/pygit2/pull/817#issuecomment-425708544,git_submodule_head_id is required for extructing the Oid targeted by a submodule,You are right. Sorry about it. Added a unit_test.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,821,2018-10-01T01:30:37Z,2018-10-01T07:21:37Z,2018-10-01T07:21:38Z,MERGED,True,1,1,1,https://github.com/cjerdonek,Fix the docstring for Repository.descendant_of(),1,[],https://github.com/libgit2/pygit2/pull/821,https://github.com/cjerdonek,1,https://github.com/libgit2/pygit2/pull/821,"This fixes the docstring for Repository.descendant_of().
For example, here is the documentation for libgit2's git_graph_descendant_of, which it should match, given how pygit2 calls libgit2:

1 if the given commit is a descendant of the potential ancestor [the second commit], 0 if not,

I confirmed that the existing pygit2 test case behaves as the language I'm suggesting.","This fixes the docstring for Repository.descendant_of().
For example, here is the documentation for libgit2's git_graph_descendant_of, which it should match, given how pygit2 calls libgit2:

1 if the given commit is a descendant of the potential ancestor [the second commit], 0 if not,

I confirmed that the existing pygit2 test case behaves as the language I'm suggesting.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,825,2018-10-09T13:57:45Z,2018-10-10T07:35:42Z,2018-10-10T07:35:42Z,MERGED,True,33,0,3,https://github.com/chotea,Add support for pruning a remote,1,[],https://github.com/libgit2/pygit2/pull/825,https://github.com/chotea,1,https://github.com/libgit2/pygit2/pull/825,"Add support for pruning a remote.
This change should fix this issue: #524
We need it in saltstack/salt in order to remove the dependency to git command line utility.
Added a simple test
Signed-off-by: Cristian Hotea cristian.hotea@ni.com","Add support for pruning a remote.
This change should fix this issue: #524
We need it in saltstack/salt in order to remove the dependency to git command line utility.
Added a simple test
Signed-off-by: Cristian Hotea cristian.hotea@ni.com",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,826,2018-10-13T13:29:24Z,2018-10-13T15:51:43Z,2018-10-13T15:52:55Z,MERGED,True,19,5,2,https://github.com/fourplusone,Using tox & pytest in appveyor,9,[],https://github.com/libgit2/pygit2/pull/826,https://github.com/fourplusone,1,https://github.com/libgit2/pygit2/pull/826,This PR changes the appveyor testing from nose to tox & pytest,This PR changes the appveyor testing from nose to tox & pytest,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,826,2018-10-13T13:29:24Z,2018-10-13T15:51:43Z,2018-10-13T15:52:55Z,MERGED,True,19,5,2,https://github.com/fourplusone,Using tox & pytest in appveyor,9,[],https://github.com/libgit2/pygit2/pull/826,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/826#issuecomment-429552544,This PR changes the appveyor testing from nose to tox & pytest,thanks!,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,827,2018-10-17T06:30:48Z,2018-10-18T07:21:37Z,2018-10-18T22:17:50Z,MERGED,True,79,1,3,https://github.com/robinst,Add bindings for git_reference_is_valid_name,3,[],https://github.com/libgit2/pygit2/pull/827,https://github.com/robinst,1,https://github.com/libgit2/pygit2/pull/827,"Useful for checking if a branch or tag name is valid, e.g. for a UI that wants to validate a name before trying to create it.
See https://libgit2.org/libgit2/#HEAD/group/reference/git_reference_is_valid_name
I exposed it as a module function reference_is_valid_name similar to other free-standing functions that were already there (e.g. discover_repository, hashfile). A class method on Reference would be another option I could look into if you'd prefer that.","Useful for checking if a branch or tag name is valid, e.g. for a UI that wants to validate a name before trying to create it.
See https://libgit2.org/libgit2/#HEAD/group/reference/git_reference_is_valid_name
I exposed it as a module function reference_is_valid_name similar to other free-standing functions that were already there (e.g. discover_repository, hashfile). A class method on Reference would be another option I could look into if you'd prefer that.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,827,2018-10-17T06:30:48Z,2018-10-18T07:21:37Z,2018-10-18T22:17:50Z,MERGED,True,79,1,3,https://github.com/robinst,Add bindings for git_reference_is_valid_name,3,[],https://github.com/libgit2/pygit2/pull/827,https://github.com/robinst,2,https://github.com/libgit2/pygit2/pull/827#issuecomment-430510560,"Useful for checking if a branch or tag name is valid, e.g. for a UI that wants to validate a name before trying to create it.
See https://libgit2.org/libgit2/#HEAD/group/reference/git_reference_is_valid_name
I exposed it as a module function reference_is_valid_name similar to other free-standing functions that were already there (e.g. discover_repository, hashfile). A class method on Reference would be another option I could look into if you'd prefer that.","There's an interesting test failure on PyPy:
        with pytest.raises(TypeError):
>           reference_is_valid_name(None)
E           Failed: DID NOT RAISE <type 'exceptions.TypeError'>
Should I make that test skip on PyPy?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,827,2018-10-17T06:30:48Z,2018-10-18T07:21:37Z,2018-10-18T22:17:50Z,MERGED,True,79,1,3,https://github.com/robinst,Add bindings for git_reference_is_valid_name,3,[],https://github.com/libgit2/pygit2/pull/827,https://github.com/robinst,3,https://github.com/libgit2/pygit2/pull/827#issuecomment-430825276,"Useful for checking if a branch or tag name is valid, e.g. for a UI that wants to validate a name before trying to create it.
See https://libgit2.org/libgit2/#HEAD/group/reference/git_reference_is_valid_name
I exposed it as a module function reference_is_valid_name similar to other free-standing functions that were already there (e.g. discover_repository, hashfile). A class method on Reference would be another option I could look into if you'd prefer that.","Thanks, done!
(The AppVeyor build seems to be failing on master too, with the same access denied error.)",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,829,2018-10-18T23:13:58Z,2018-10-20T09:20:21Z,2018-10-20T09:20:21Z,MERGED,True,41,5,4,https://github.com/robinst,Raise more specific exceptions for GIT_EEXISTS and GIT_EINVALIDSPEC,1,[],https://github.com/libgit2/pygit2/pull/829,https://github.com/robinst,1,https://github.com/libgit2/pygit2/pull/829,"Before, both would raise ValueError, making it hard to distinguish
between them to show users a meaningful error message.
The new exceptions AlreadyExistsError and InvalidSpecError extend
ValueError, so this change should be backwards-compatible.
(Fixes #828)","Before, both would raise ValueError, making it hard to distinguish
between them to show users a meaningful error message.
The new exceptions AlreadyExistsError and InvalidSpecError extend
ValueError, so this change should be backwards-compatible.
(Fixes #828)",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,833,2018-10-28T19:41:12Z,2018-11-01T08:41:42Z,2018-11-01T08:41:42Z,MERGED,True,11,0,1,https://github.com/fourplusone,fix the read_tree test on windows,4,[],https://github.com/libgit2/pygit2/pull/833,https://github.com/fourplusone,1,https://github.com/libgit2/pygit2/pull/833,,,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,834,2018-10-28T20:00:29Z,2018-11-01T08:41:43Z,2018-11-01T08:41:43Z,MERGED,True,3,0,1,https://github.com/fourplusone,Fix test_create_reference on windows,1,[],https://github.com/libgit2/pygit2/pull/834,https://github.com/fourplusone,1,https://github.com/libgit2/pygit2/pull/834,"Together with #833, this PR will hopefully turn the windows build green again","Together with #833, this PR will hopefully turn the windows build green again",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,835,2018-10-30T20:40:22Z,2018-11-01T10:46:21Z,2018-11-01T10:46:21Z,CLOSED,False,1,1,1,https://github.com/fourplusone,Add missing bullet point in Readme,1,[],https://github.com/libgit2/pygit2/pull/835,https://github.com/fourplusone,1,https://github.com/libgit2/pygit2/pull/835,,,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,835,2018-10-30T20:40:22Z,2018-11-01T10:46:21Z,2018-11-01T10:46:21Z,CLOSED,False,1,1,1,https://github.com/fourplusone,Add missing bullet point in Readme,1,[],https://github.com/libgit2/pygit2/pull/835,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/835#issuecomment-434978446,,Actually this was intended as install is a page of the documentation.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,835,2018-10-30T20:40:22Z,2018-11-01T10:46:21Z,2018-11-01T10:46:21Z,CLOSED,False,1,1,1,https://github.com/fourplusone,Add missing bullet point in Readme,1,[],https://github.com/libgit2/pygit2/pull/835,https://github.com/fourplusone,3,https://github.com/libgit2/pygit2/pull/835#issuecomment-435003046,,nvm,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,840,2018-11-25T19:43:17Z,2018-11-30T16:50:35Z,2018-11-30T16:50:35Z,MERGED,True,47,0,4,https://github.com/alexanderlinne,Add additional raw string fields,3,[],https://github.com/libgit2/pygit2/pull/840,https://github.com/alexanderlinne,1,https://github.com/libgit2/pygit2/pull/840,For a project I am working on I added additional raw string fields to access strings that would otherwise throw a UnicodeDecodeError.,For a project I am working on I added additional raw string fields to access strings that would otherwise throw a UnicodeDecodeError.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,842,2018-12-04T21:12:24Z,2018-12-05T08:26:56Z,2018-12-05T08:26:57Z,MERGED,True,11,1,2,https://github.com/jorgecarleitao,Raise error on repo.descendant_of when no commit exists.,1,[],https://github.com/libgit2/pygit2/pull/842,https://github.com/jorgecarleitao,1,https://github.com/libgit2/pygit2/pull/842,Fixed #822,Fixed #822,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,843,2018-12-04T22:45:00Z,2019-02-24T08:54:10Z,2019-02-24T08:57:07Z,MERGED,True,48,0,3,https://github.com/jorgecarleitao,Added Repository.apply,1,[],https://github.com/libgit2/pygit2/pull/843,https://github.com/jorgecarleitao,1,https://github.com/libgit2/pygit2/pull/843,"Fixed #841
This is a minimal version that does not accept options nor location. We can iterate on this.
Also, not sure if I should just accept the argument and cast it to Diff*, instead of properly check for its type. If yes, what is the idiom to do that? PyArg_ParseTuple only seems to accept positional arguments.
DO NOT MERGE THIS: this PR changes travis and appveyor to point to master of libgit2, since it is required for this feature to be tested. This should be changed to point to the release branch of a version of libgit2 that has the git_apply implemented in this PR","Fixed #841
This is a minimal version that does not accept options nor location. We can iterate on this.
Also, not sure if I should just accept the argument and cast it to Diff*, instead of properly check for its type. If yes, what is the idiom to do that? PyArg_ParseTuple only seems to accept positional arguments.
DO NOT MERGE THIS: this PR changes travis and appveyor to point to master of libgit2, since it is required for this feature to be tested. This should be changed to point to the release branch of a version of libgit2 that has the git_apply implemented in this PR",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,843,2018-12-04T22:45:00Z,2019-02-24T08:54:10Z,2019-02-24T08:57:07Z,MERGED,True,48,0,3,https://github.com/jorgecarleitao,Added Repository.apply,1,[],https://github.com/libgit2/pygit2/pull/843,https://github.com/jorgecarleitao,2,https://github.com/libgit2/pygit2/pull/843#issuecomment-444296179,"Fixed #841
This is a minimal version that does not accept options nor location. We can iterate on this.
Also, not sure if I should just accept the argument and cast it to Diff*, instead of properly check for its type. If yes, what is the idiom to do that? PyArg_ParseTuple only seems to accept positional arguments.
DO NOT MERGE THIS: this PR changes travis and appveyor to point to master of libgit2, since it is required for this feature to be tested. This should be changed to point to the release branch of a version of libgit2 that has the git_apply implemented in this PR","I am missing something in travis. Aparently the command pip install . is not sufficient.
In my computer, I used
python setup.py bdist_wheel
pip install dist/pygit2-0.27.2-cp37-cp37m-macosx_10_9_x86_64.whl

which allowed me to run the tests (passing). Any idea?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,843,2018-12-04T22:45:00Z,2019-02-24T08:54:10Z,2019-02-24T08:57:07Z,MERGED,True,48,0,3,https://github.com/jorgecarleitao,Added Repository.apply,1,[],https://github.com/libgit2/pygit2/pull/843,https://github.com/jdavid,3,https://github.com/libgit2/pygit2/pull/843#issuecomment-466700874,"Fixed #841
This is a minimal version that does not accept options nor location. We can iterate on this.
Also, not sure if I should just accept the argument and cast it to Diff*, instead of properly check for its type. If yes, what is the idiom to do that? PyArg_ParseTuple only seems to accept positional arguments.
DO NOT MERGE THIS: this PR changes travis and appveyor to point to master of libgit2, since it is required for this feature to be tested. This should be changed to point to the release branch of a version of libgit2 that has the git_apply implemented in this PR","Could you rebase please?
We've moved already to v0.28 (there's 1 test failing though)",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,843,2018-12-04T22:45:00Z,2019-02-24T08:54:10Z,2019-02-24T08:57:07Z,MERGED,True,48,0,3,https://github.com/jorgecarleitao,Added Repository.apply,1,[],https://github.com/libgit2/pygit2/pull/843,https://github.com/jorgecarleitao,4,https://github.com/libgit2/pygit2/pull/843#issuecomment-466736972,"Fixed #841
This is a minimal version that does not accept options nor location. We can iterate on this.
Also, not sure if I should just accept the argument and cast it to Diff*, instead of properly check for its type. If yes, what is the idiom to do that? PyArg_ParseTuple only seems to accept positional arguments.
DO NOT MERGE THIS: this PR changes travis and appveyor to point to master of libgit2, since it is required for this feature to be tested. This should be changed to point to the release branch of a version of libgit2 that has the git_apply implemented in this PR","Could you rebase please?
We've moved already to v0.28 (there's 1 test failing though)

I have rebased against master (and dropped the commit modifying travis/appveyor).",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,843,2018-12-04T22:45:00Z,2019-02-24T08:54:10Z,2019-02-24T08:57:07Z,MERGED,True,48,0,3,https://github.com/jorgecarleitao,Added Repository.apply,1,[],https://github.com/libgit2/pygit2/pull/843,https://github.com/jorgecarleitao,5,https://github.com/libgit2/pygit2/pull/843#issuecomment-466739209,"Fixed #841
This is a minimal version that does not accept options nor location. We can iterate on this.
Also, not sure if I should just accept the argument and cast it to Diff*, instead of properly check for its type. If yes, what is the idiom to do that? PyArg_ParseTuple only seems to accept positional arguments.
DO NOT MERGE THIS: this PR changes travis and appveyor to point to master of libgit2, since it is required for this feature to be tested. This should be changed to point to the release branch of a version of libgit2 that has the git_apply implemented in this PR","Appveyor's is reporting a failure consequent of my changes:
>       self.assertEqual(content, new_content)
E       AssertionError: 'bye world\nadi∩┐╜s\nau revoir monde\n' != 'bye world\nadi≤s\nau revoir monde\n'
E         bye world
E       - adi∩┐╜s
E       + adi≤s
E         au revoir monde

Unsure if this is consequent of how I wrapped libgit's apply.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,843,2018-12-04T22:45:00Z,2019-02-24T08:54:10Z,2019-02-24T08:57:07Z,MERGED,True,48,0,3,https://github.com/jorgecarleitao,Added Repository.apply,1,[],https://github.com/libgit2/pygit2/pull/843,https://github.com/jdavid,6,https://github.com/libgit2/pygit2/pull/843#issuecomment-466751487,"Fixed #841
This is a minimal version that does not accept options nor location. We can iterate on this.
Also, not sure if I should just accept the argument and cast it to Diff*, instead of properly check for its type. If yes, what is the idiom to do that? PyArg_ParseTuple only seems to accept positional arguments.
DO NOT MERGE THIS: this PR changes travis and appveyor to point to master of libgit2, since it is required for this feature to be tested. This should be changed to point to the release branch of a version of libgit2 that has the git_apply implemented in this PR","Fixed, I've changed the test to explicitly encode/decode using utf-8",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,848,2018-12-18T20:54:33Z,2018-12-22T07:52:19Z,2018-12-24T17:13:53Z,MERGED,True,10,0,2,https://github.com/imbuedhope,added a Tuple based value for the libgit2 version reference,1,[],https://github.com/libgit2/pygit2/pull/848,https://github.com/imbuedhope,1,https://github.com/libgit2/pygit2/pull/848,"Resolves issue #845 and adds relevant documentation.
Allows for the following code to be valid
import pygit2
if pygit2.LIBGIT2_VER < (0, 26):
    raise ImportError('libgit is out of date, update to 0.26 or newer')","Resolves issue #845 and adds relevant documentation.
Allows for the following code to be valid
import pygit2
if pygit2.LIBGIT2_VER < (0, 26):
    raise ImportError('libgit is out of date, update to 0.26 or newer')",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,850,2018-12-21T13:49:40Z,2018-12-22T08:05:47Z,2018-12-22T08:05:47Z,CLOSED,False,1,1,1,https://github.com/stevenwinfield,"Fix ""invalid escape sequence \l"" warning",2,[],https://github.com/libgit2/pygit2/pull/850,https://github.com/stevenwinfield,1,https://github.com/libgit2/pygit2/pull/850,"Missing raw string, causing a DeprecationWarning in Python 3.6","Missing raw string, causing a DeprecationWarning in Python 3.6",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,850,2018-12-21T13:49:40Z,2018-12-22T08:05:47Z,2018-12-22T08:05:47Z,CLOSED,False,1,1,1,https://github.com/stevenwinfield,"Fix ""invalid escape sequence \l"" warning",2,[],https://github.com/libgit2/pygit2/pull/850,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/850#issuecomment-449553849,"Missing raw string, causing a DeprecationWarning in Python 3.6","Applied, thanks!",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,851,2018-12-22T17:00:10Z,2018-12-22T19:00:48Z,2018-12-23T14:24:11Z,MERGED,True,1,0,1,https://github.com/jaymecd,revert setup_requires 'cffi',1,[],https://github.com/libgit2/pygit2/pull/851,https://github.com/jaymecd,1,https://github.com/libgit2/pygit2/pull/851,"closes #849
Without this line, pygit2/_libgit2.abi3.so file is not compiled during set up, what causes slowdown due to fallback to cffi in runtime, see #849
Literally is a single line revert of e5e5f26 commit.","closes #849
Without this line, pygit2/_libgit2.abi3.so file is not compiled during set up, what causes slowdown due to fallback to cffi in runtime, see #849
Literally is a single line revert of e5e5f26 commit.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,853,2018-12-26T20:18:48Z,2018-12-28T08:59:21Z,2018-12-28T08:59:21Z,MERGED,True,100,2,2,https://github.com/imbuedhope,add hash and equality operations on git objects,5,[],https://github.com/libgit2/pygit2/pull/853,https://github.com/imbuedhope,1,https://github.com/libgit2/pygit2/pull/853,"Resolves issue #852 by implementing __eq__, __ne__, and __hash__ for git _pygit.Object types. Uses contained Oid as a unique identifier and falls back to the Oid operations for the same.
The net result is that the following now happens without issue
>>> import pygit2
>>> repo = pygit2.Repository('.')
>>> repo.head.get_object() == repo.head.get_object()
True
>>> repo.head.get_object() != repo.head.get_object()
False
Note that unlike Oid __ge__, __gt__, __le__, and __lt__ are not supported. These comparisions don't really make sense for Object.
As a bonus Object and its subtypes can be used in with set and other hash depenent containers. For example,
>>> import pygit2
>>> repo = pygit2.Repository('.')
>>> s = set()
>>> s.add(repo.head.get_object())
>>> s.add(repo.head.get_object())
>>> len(s)
1
Note that following is also true, but is probably not a gurantee since a later imlpementation may break it.
>>> import pygit2
>>> repo = pygit2.Repository('.')
>>> hash(repo.head.get_object()) == hash(repo.head.get_object().oid)
True","Resolves issue #852 by implementing __eq__, __ne__, and __hash__ for git _pygit.Object types. Uses contained Oid as a unique identifier and falls back to the Oid operations for the same.
The net result is that the following now happens without issue
>>> import pygit2
>>> repo = pygit2.Repository('.')
>>> repo.head.get_object() == repo.head.get_object()
True
>>> repo.head.get_object() != repo.head.get_object()
False
Note that unlike Oid __ge__, __gt__, __le__, and __lt__ are not supported. These comparisions don't really make sense for Object.
As a bonus Object and its subtypes can be used in with set and other hash depenent containers. For example,
>>> import pygit2
>>> repo = pygit2.Repository('.')
>>> s = set()
>>> s.add(repo.head.get_object())
>>> s.add(repo.head.get_object())
>>> len(s)
1
Note that following is also true, but is probably not a gurantee since a later imlpementation may break it.
>>> import pygit2
>>> repo = pygit2.Repository('.')
>>> hash(repo.head.get_object()) == hash(repo.head.get_object().oid)
True",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,853,2018-12-26T20:18:48Z,2018-12-28T08:59:21Z,2018-12-28T08:59:21Z,MERGED,True,100,2,2,https://github.com/imbuedhope,add hash and equality operations on git objects,5,[],https://github.com/libgit2/pygit2/pull/853,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/853#issuecomment-450164192,"Resolves issue #852 by implementing __eq__, __ne__, and __hash__ for git _pygit.Object types. Uses contained Oid as a unique identifier and falls back to the Oid operations for the same.
The net result is that the following now happens without issue
>>> import pygit2
>>> repo = pygit2.Repository('.')
>>> repo.head.get_object() == repo.head.get_object()
True
>>> repo.head.get_object() != repo.head.get_object()
False
Note that unlike Oid __ge__, __gt__, __le__, and __lt__ are not supported. These comparisions don't really make sense for Object.
As a bonus Object and its subtypes can be used in with set and other hash depenent containers. For example,
>>> import pygit2
>>> repo = pygit2.Repository('.')
>>> s = set()
>>> s.add(repo.head.get_object())
>>> s.add(repo.head.get_object())
>>> len(s)
1
Note that following is also true, but is probably not a gurantee since a later imlpementation may break it.
>>> import pygit2
>>> repo = pygit2.Repository('.')
>>> hash(repo.head.get_object()) == hash(repo.head.get_object().oid)
True","Thanks!
It would be more efficient to use git_object_id and git_oid_equal. Please add unit tests as well.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,853,2018-12-26T20:18:48Z,2018-12-28T08:59:21Z,2018-12-28T08:59:21Z,MERGED,True,100,2,2,https://github.com/imbuedhope,add hash and equality operations on git objects,5,[],https://github.com/libgit2/pygit2/pull/853,https://github.com/imbuedhope,3,https://github.com/libgit2/pygit2/pull/853#issuecomment-450197617,"Resolves issue #852 by implementing __eq__, __ne__, and __hash__ for git _pygit.Object types. Uses contained Oid as a unique identifier and falls back to the Oid operations for the same.
The net result is that the following now happens without issue
>>> import pygit2
>>> repo = pygit2.Repository('.')
>>> repo.head.get_object() == repo.head.get_object()
True
>>> repo.head.get_object() != repo.head.get_object()
False
Note that unlike Oid __ge__, __gt__, __le__, and __lt__ are not supported. These comparisions don't really make sense for Object.
As a bonus Object and its subtypes can be used in with set and other hash depenent containers. For example,
>>> import pygit2
>>> repo = pygit2.Repository('.')
>>> s = set()
>>> s.add(repo.head.get_object())
>>> s.add(repo.head.get_object())
>>> len(s)
1
Note that following is also true, but is probably not a gurantee since a later imlpementation may break it.
>>> import pygit2
>>> repo = pygit2.Repository('.')
>>> hash(repo.head.get_object()) == hash(repo.head.get_object().oid)
True",Reimplemented Object_richcompare and Object_hash to be a bit more efficient and added tests in test/test_object.py.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,854,2018-12-27T00:21:42Z,2018-12-27T14:57:46Z,2018-12-30T09:40:51Z,MERGED,True,2,0,1,https://github.com/expobrain,Travis cache,1,[],https://github.com/libgit2/pygit2/pull/854,https://github.com/expobrain,1,https://github.com/libgit2/pygit2/pull/854,Decrease Travis running time by 2/3,Decrease Travis running time by 2/3,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,855,2018-12-31T16:59:25Z,2019-01-01T10:11:37Z,2019-01-01T10:11:37Z,MERGED,True,3,3,1,https://github.com/nkartashov,Fix Repsitory -> Repository in examples,1,[],https://github.com/libgit2/pygit2/pull/855,https://github.com/nkartashov,1,https://github.com/libgit2/pygit2/pull/855,This fixes a bunch of typos that I noticed in the documentation (will need to redeploy docs if it doesn't happen automatically).,This fixes a bunch of typos that I noticed in the documentation (will need to redeploy docs if it doesn't happen automatically).,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,859,2019-01-05T04:53:18Z,2019-01-06T09:43:51Z,2019-01-06T09:43:51Z,MERGED,True,21,3,2,https://github.com/rbistolfi,Add support for paths argument to checkout.,1,[],https://github.com/libgit2/pygit2/pull/859,https://github.com/rbistolfi,1,https://github.com/libgit2/pygit2/pull/859,"Repository.checkout() accepts a paths argument. A list of strings can be
passed with files to be checked out from the given reference. Current HEAD
will not be updated.","Repository.checkout() accepts a paths argument. A list of strings can be
passed with files to be checked out from the given reference. Current HEAD
will not be updated.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,861,2019-01-09T13:36:33Z,2019-01-09T15:40:28Z,2019-01-09T15:40:28Z,MERGED,True,10,0,1,https://github.com/diox,Add classifiers to publicize which versions of Python are compatible,1,[],https://github.com/libgit2/pygit2/pull/861,https://github.com/diox,1,https://github.com/libgit2/pygit2/pull/861,This helps tools like pyup determine whether or not the library is Python3 compatible.,This helps tools like pyup determine whether or not the library is Python3 compatible.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,862,2019-01-13T06:48:44Z,2019-01-19T09:19:31Z,2019-01-19T09:19:31Z,MERGED,True,78,1,2,https://github.com/imbuedhope,Reference object equality support,2,[],https://github.com/libgit2/pygit2/pull/862,https://github.com/imbuedhope,1,https://github.com/libgit2/pygit2/pull/862,Adds equality support for Reference objects. Resolves #860,Adds equality support for Reference objects. Resolves #860,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,867,2019-01-28T13:40:22Z,2019-01-28T14:16:40Z,2019-01-28T14:16:40Z,CLOSED,False,1,1,1,https://github.com/ignatenkobrain,setup.py: Remove lock on pycparser,1,[],https://github.com/libgit2/pygit2/pull/867,https://github.com/ignatenkobrain,1,https://github.com/libgit2/pygit2/pull/867,It looks like 2.19 has fixed the problem.,It looks like 2.19 has fixed the problem.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,869,2019-02-11T18:27:58Z,2019-02-16T10:28:51Z,2019-03-01T13:24:55Z,MERGED,True,259,19,6,https://github.com/webknjaz,Build manylinux1 OS-specific binary wheels in Travis (CI) and publish them to PyPI (CD),28,[],https://github.com/libgit2/pygit2/pull/869,https://github.com/webknjaz,1,https://github.com/libgit2/pygit2/pull/869,"Closes #793
In its current state the changed added in this PR enable Travis CI build and publish OS-specific wheel distributions which are compliant with a manylinux1 standard.
This PR has a few intentionally incomplete bits:

it requires a PyPI password to be filled in
it requires uncommenting deploy stage clause so that publishing would only happen for tagged commits

Considerations
For simplicity, this PR reuses image by pyca/cryptography which inherits the official image by pypa/manylinux1 and adds a pre-compiled openssl 1.1.1 on top of it so we don't have to.
As a further build time performance improvement I see how we can improve things by publishing our own image to a public registry (Docker Hub or better quay.io) but it's out of scope of this PR.
Credits
This patch is based on the prior art by @beniwohli and my own experience of building manylinux1 wheels for other projects.","Closes #793
In its current state the changed added in this PR enable Travis CI build and publish OS-specific wheel distributions which are compliant with a manylinux1 standard.
This PR has a few intentionally incomplete bits:

it requires a PyPI password to be filled in
it requires uncommenting deploy stage clause so that publishing would only happen for tagged commits

Considerations
For simplicity, this PR reuses image by pyca/cryptography which inherits the official image by pypa/manylinux1 and adds a pre-compiled openssl 1.1.1 on top of it so we don't have to.
As a further build time performance improvement I see how we can improve things by publishing our own image to a public registry (Docker Hub or better quay.io) but it's out of scope of this PR.
Credits
This patch is based on the prior art by @beniwohli and my own experience of building manylinux1 wheels for other projects.",True,{'THUMBS_UP': ['https://github.com/balki']}
libgit2/pygit2,https://github.com/libgit2/pygit2,869,2019-02-11T18:27:58Z,2019-02-16T10:28:51Z,2019-03-01T13:24:55Z,MERGED,True,259,19,6,https://github.com/webknjaz,Build manylinux1 OS-specific binary wheels in Travis (CI) and publish them to PyPI (CD),28,[],https://github.com/libgit2/pygit2/pull/869,https://github.com/techtonik,2,https://github.com/libgit2/pygit2/pull/869#issuecomment-462480491,"Closes #793
In its current state the changed added in this PR enable Travis CI build and publish OS-specific wheel distributions which are compliant with a manylinux1 standard.
This PR has a few intentionally incomplete bits:

it requires a PyPI password to be filled in
it requires uncommenting deploy stage clause so that publishing would only happen for tagged commits

Considerations
For simplicity, this PR reuses image by pyca/cryptography which inherits the official image by pypa/manylinux1 and adds a pre-compiled openssl 1.1.1 on top of it so we don't have to.
As a further build time performance improvement I see how we can improve things by publishing our own image to a public registry (Docker Hub or better quay.io) but it's out of scope of this PR.
Credits
This patch is based on the prior art by @beniwohli and my own experience of building manylinux1 wheels for other projects.",Have you checked the status of manylinux2010 - it seems to be the way to go pypa/manylinux#179,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,869,2019-02-11T18:27:58Z,2019-02-16T10:28:51Z,2019-03-01T13:24:55Z,MERGED,True,259,19,6,https://github.com/webknjaz,Build manylinux1 OS-specific binary wheels in Travis (CI) and publish them to PyPI (CD),28,[],https://github.com/libgit2/pygit2/pull/869,https://github.com/webknjaz,3,https://github.com/libgit2/pygit2/pull/869#issuecomment-462492924,"Closes #793
In its current state the changed added in this PR enable Travis CI build and publish OS-specific wheel distributions which are compliant with a manylinux1 standard.
This PR has a few intentionally incomplete bits:

it requires a PyPI password to be filled in
it requires uncommenting deploy stage clause so that publishing would only happen for tagged commits

Considerations
For simplicity, this PR reuses image by pyca/cryptography which inherits the official image by pypa/manylinux1 and adds a pre-compiled openssl 1.1.1 on top of it so we don't have to.
As a further build time performance improvement I see how we can improve things by publishing our own image to a public registry (Docker Hub or better quay.io) but it's out of scope of this PR.
Credits
This patch is based on the prior art by @beniwohli and my own experience of building manylinux1 wheels for other projects.","Yeah, I know. pip>19 now supports it. And the latest auditwheel has it in the list of platforms.
But first I want to get manylinux1 done. It's more important since pip on user machines is often outdated and is unable to match manulinux2010 which would lead to falling back to sdist if manylinux1 is not shipped.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,869,2019-02-11T18:27:58Z,2019-02-16T10:28:51Z,2019-03-01T13:24:55Z,MERGED,True,259,19,6,https://github.com/webknjaz,Build manylinux1 OS-specific binary wheels in Travis (CI) and publish them to PyPI (CD),28,[],https://github.com/libgit2/pygit2/pull/869,https://github.com/webknjaz,4,https://github.com/libgit2/pygit2/pull/869#issuecomment-462567123,"Closes #793
In its current state the changed added in this PR enable Travis CI build and publish OS-specific wheel distributions which are compliant with a manylinux1 standard.
This PR has a few intentionally incomplete bits:

it requires a PyPI password to be filled in
it requires uncommenting deploy stage clause so that publishing would only happen for tagged commits

Considerations
For simplicity, this PR reuses image by pyca/cryptography which inherits the official image by pypa/manylinux1 and adds a pre-compiled openssl 1.1.1 on top of it so we don't have to.
As a further build time performance improvement I see how we can improve things by publishing our own image to a public registry (Docker Hub or better quay.io) but it's out of scope of this PR.
Credits
This patch is based on the prior art by @beniwohli and my own experience of building manylinux1 wheels for other projects.","@jdavid this is almost ready to be merged.
You need to update encrypted PYPI password and we'll need to update deploy stage appearance condition (which I didn't do for demo purposes).",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,869,2019-02-11T18:27:58Z,2019-02-16T10:28:51Z,2019-03-01T13:24:55Z,MERGED,True,259,19,6,https://github.com/webknjaz,Build manylinux1 OS-specific binary wheels in Travis (CI) and publish them to PyPI (CD),28,[],https://github.com/libgit2/pygit2/pull/869,https://github.com/webknjaz,5,https://github.com/libgit2/pygit2/pull/869#issuecomment-462671658,"Closes #793
In its current state the changed added in this PR enable Travis CI build and publish OS-specific wheel distributions which are compliant with a manylinux1 standard.
This PR has a few intentionally incomplete bits:

it requires a PyPI password to be filled in
it requires uncommenting deploy stage clause so that publishing would only happen for tagged commits

Considerations
For simplicity, this PR reuses image by pyca/cryptography which inherits the official image by pypa/manylinux1 and adds a pre-compiled openssl 1.1.1 on top of it so we don't have to.
As a further build time performance improvement I see how we can improve things by publishing our own image to a public registry (Docker Hub or better quay.io) but it's out of scope of this PR.
Credits
This patch is based on the prior art by @beniwohli and my own experience of building manylinux1 wheels for other projects.",(PR close/reopen trick is just to trigger CI restart),True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,872,2019-02-15T15:18:49Z,2019-02-15T15:53:18Z,2019-02-15T15:53:35Z,CLOSED,False,22,1,2,https://github.com/0xdky,Support for new option to skip checking for '.keep' files,1,[],https://github.com/libgit2/pygit2/pull/872,https://github.com/0xdky,1,https://github.com/libgit2/pygit2/pull/872,This is to support the new option added as part of: libgit2/libgit2#4965,This is to support the new option added as part of: libgit2/libgit2#4965,True,{'HEART': ['https://github.com/jdavid']}
libgit2/pygit2,https://github.com/libgit2/pygit2,872,2019-02-15T15:18:49Z,2019-02-15T15:53:18Z,2019-02-15T15:53:35Z,CLOSED,False,22,1,2,https://github.com/0xdky,Support for new option to skip checking for '.keep' files,1,[],https://github.com/libgit2/pygit2/pull/872,https://github.com/0xdky,2,https://github.com/libgit2/pygit2/pull/872#issuecomment-464099512,This is to support the new option added as part of: libgit2/libgit2#4965,"Will rework, need to bump up library version",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,873,2019-02-16T11:28:02Z,2019-02-21T08:15:55Z,2019-02-21T08:15:55Z,MERGED,True,6,0,1,https://github.com/webknjaz,🔧 Add a pytest config,1,[],https://github.com/libgit2/pygit2/pull/873,https://github.com/webknjaz,1,https://github.com/libgit2/pygit2/pull/873,,,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,873,2019-02-16T11:28:02Z,2019-02-21T08:15:55Z,2019-02-21T08:15:55Z,MERGED,True,6,0,1,https://github.com/webknjaz,🔧 Add a pytest config,1,[],https://github.com/libgit2/pygit2/pull/873,https://github.com/webknjaz,2,https://github.com/libgit2/pygit2/pull/873#issuecomment-465702721,,@jdavid could you please merge this?,True,{'HOORAY': ['https://github.com/webknjaz']}
libgit2/pygit2,https://github.com/libgit2/pygit2,874,2019-02-16T13:48:29Z,2019-02-17T09:19:56Z,2019-02-17T10:27:43Z,MERGED,True,53,1,1,https://github.com/webknjaz,✅ Add manylinux1 self testing,7,[],https://github.com/libgit2/pygit2/pull/874,https://github.com/webknjaz,1,https://github.com/libgit2/pygit2/pull/874,,,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,874,2019-02-16T13:48:29Z,2019-02-17T09:19:56Z,2019-02-17T10:27:43Z,MERGED,True,53,1,1,https://github.com/webknjaz,✅ Add manylinux1 self testing,7,[],https://github.com/libgit2/pygit2/pull/874,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/874#issuecomment-464432765,,"I get the same result with this branch (but will merge anyway):
$ pytest test --tb=line
============================================================================================================ test session starts =============================================================================================================
platform linux -- Python 3.5.5, pytest-4.2.1, py-1.7.0, pluggy-0.8.1
rootdir: /home/jdavid/2019-02, inifile:
collected 360 items                                                                                                                                                                                                                          

test/test_archive.py ..                                                                                                                                                                                                                [  0%]
test/test_attributes.py .                                                                                                                                                                                                              [  0%]
test/test_blame.py .....                                                                                                                                                                                                               [  2%]
test/test_blob.py ............                                                                                                                                                                                                         [  5%]
test/test_branch.py .....................................                                                                                                                                                                              [ 15%]
test/test_cherrypick.py ....                                                                                                                                                                                                           [ 16%]
test/test_commit.py .......                                                                                                                                                                                                            [ 18%]
test/test_config.py .........                                                                                                                                                                                                          [ 21%]
test/test_credentials.py .....F.F                                                                                                                                                                                                      [ 23%]
test/test_describe.py ...........                                                                                                                                                                                                      [ 26%]
test/test_diff.py ....................                                                                                                                                                                                                 [ 32%]
test/test_index.py ...................                                                                                                                                                                                                 [ 37%]
test/test_merge.py .............                                                                                                                                                                                                       [ 41%]
test/test_note.py .....                                                                                                                                                                                                                [ 42%]
test/test_object.py .......                                                                                                                                                                                                            [ 44%]
test/test_oid.py ........                                                                                                                                                                                                              [ 46%]
test/test_options.py .............                                                                                                                                                                                                     [ 50%]
test/test_patch.py ...............                                                                                                                                                                                                     [ 54%]
test/test_refs.py ............................................                                                                                                                                                                         [ 66%]
test/test_remote.py ....................                                                                                                                                                                                               [ 72%]
test/test_repository.py .........................................................F.                                                                                                                                                    [ 88%]
test/test_revwalk.py ..........                                                                                                                                                                                                        [ 91%]
test/test_signature.py ....                                                                                                                                                                                                            [ 92%]
test/test_status.py .                                                                                                                                                                                                                  [ 92%]
test/test_submodule.py .F...F.FF.                                                                                                                                                                                                      [ 95%]
test/test_tag.py ....                                                                                                                                                                                                                  [ 96%]
test/test_tree.py ........                                                                                                                                                                                                             [ 98%]
test/test_treebuilder.py ....                                                                                                                                                                                                          [100%]

================================================================================================================== FAILURES ==================================================================================================================
/home/jdavid/2019-02/venv35/lib/python3.5/site-packages/pygit2/errors.py:64: _pygit2.GitError: user cancelled certificate check
/home/jdavid/2019-02/venv35/lib/python3.5/site-packages/pygit2/errors.py:64: _pygit2.GitError: user cancelled certificate check
/home/jdavid/2019-02/venv35/lib/python3.5/site-packages/pygit2/errors.py:64: _pygit2.GitError: user cancelled certificate check
/home/jdavid/2019-02/venv35/lib/python3.5/site-packages/pygit2/errors.py:64: _pygit2.GitError: the SSL certificate is invalid
/home/jdavid/2019-02/venv35/lib/python3.5/site-packages/pygit2/errors.py:64: _pygit2.GitError: the SSL certificate is invalid
/home/jdavid/2019-02/venv35/lib/python3.5/site-packages/pygit2/errors.py:64: _pygit2.GitError: the SSL certificate is invalid
/home/jdavid/2019-02/venv35/lib/python3.5/site-packages/pygit2/errors.py:64: _pygit2.GitError: the SSL certificate is invalid
=================================================================================================== 7 failed, 353 passed in 23.32 seconds ====================================================================================================",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,874,2019-02-16T13:48:29Z,2019-02-17T09:19:56Z,2019-02-17T10:27:43Z,MERGED,True,53,1,1,https://github.com/webknjaz,✅ Add manylinux1 self testing,7,[],https://github.com/libgit2/pygit2/pull/874,https://github.com/webknjaz,3,https://github.com/libgit2/pygit2/pull/874#issuecomment-464436279,,"Well, I guess those shared libraries are present on your machine because you are developing there and you built libgit2 in host machine, not container. Which probably means that you had to install them during the manual installation process...
And the goal of manylinux1 is to avoid that.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,874,2019-02-16T13:48:29Z,2019-02-17T09:19:56Z,2019-02-17T10:27:43Z,MERGED,True,53,1,1,https://github.com/webknjaz,✅ Add manylinux1 self testing,7,[],https://github.com/libgit2/pygit2/pull/874,https://github.com/jdavid,4,https://github.com/libgit2/pygit2/pull/874#issuecomment-464437198,,"I've libgit2 installed system wide, but it's not being used in this case.
But the other libraries yes, it's getting them from the system.
This is what I did exactly:

Run travis/build-all-manylinux1-wheels.sh pygit2 0.27
In a separate directory create a virtual environment
and install there the wheel generated in the first step
then install pytest and run the tests",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,874,2019-02-16T13:48:29Z,2019-02-17T09:19:56Z,2019-02-17T10:27:43Z,MERGED,True,53,1,1,https://github.com/webknjaz,✅ Add manylinux1 self testing,7,[],https://github.com/libgit2/pygit2/pull/874,https://github.com/webknjaz,5,https://github.com/libgit2/pygit2/pull/874#issuecomment-464438232,,"Haha, that's exactly how I tested it... It worked at first and then when I added explicit linking against libssh2 and zlib it started segfaulting.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,874,2019-02-16T13:48:29Z,2019-02-17T09:19:56Z,2019-02-17T10:27:43Z,MERGED,True,53,1,1,https://github.com/webknjaz,✅ Add manylinux1 self testing,7,[],https://github.com/libgit2/pygit2/pull/874,https://github.com/jdavid,6,https://github.com/libgit2/pygit2/pull/874#issuecomment-464438666,,"(venv35) jdavid@croqui ~/2019-02 $ pip show -f pygit2 | grep so
  .libs_pygit2/libcurl-e8503455.so.4.5.0
  .libs_pygit2/libgit2-fada2a44.so.0.27.8
  .libs_pygit2/libssh2-ff375f42.so.1.0.1
  .libs_pygit2/libz-a147dcb0.so.1.2.3
  _pygit2.cpython-35m-x86_64-linux-gnu.so
  pygit2/.libs/libcurl-e8503455.so.4.5.0
  pygit2/.libs/libgit2-fada2a44.so.0.27.8
  pygit2/.libs/libssh2-ff375f42.so.1.0.1
  pygit2/.libs/libz-a147dcb0.so.1.2.3
  pygit2/_libgit2.abi3.so

(venv35) jdavid@croqui ~/2019-02 $ ldd venv35/lib/python3.5/site-packages/_pygit2.cpython-35m-x86_64-linux-gnu.so | grep libgit2
	libgit2-fada2a44.so.0.27.8 => /home/jdavid/2019-02/venv35/lib/python3.5/site-packages/.libs_pygit2/libgit2-fada2a44.so.0.27.8 (0x00007fe450209000)

(venv35) jdavid@croqui ~/2019-02 $ ldd /home/jdavid/2019-02/venv35/lib/python3.5/site-packages/.libs_pygit2/libgit2-fada2a44.so.0.27.8
	linux-vdso.so.1 (0x00007ffd8b0c6000)
	librt.so.1 => /lib64/librt.so.1 (0x00007f68b70bb000)
	libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f68b6e9b000)
	libcurl.so.4 => /usr/lib64/libcurl.so.4 (0x00007f68b6c27000)
	libz.so.1 => /lib64/libz.so.1 (0x00007f68b6a10000)
	libssh2.so.1 => /usr/lib64/libssh2.so.1 (0x00007f68b67e3000)
	libc.so.6 => /lib64/libc.so.6 (0x00007f68b641b000)
	/lib64/ld-linux-x86-64.so.2 (0x00007f68b7989000)
	libssl.so.1.0.0 => /usr/lib64/libssl.so.1.0.0 (0x00007f68b61ad000)
	libcrypto.so.1.0.0 => /usr/lib64/libcrypto.so.1.0.0 (0x00007f68b5d72000)
	libdl.so.2 => /lib64/libdl.so.2 (0x00007f68b5b6e000)

The SOs with the broken references are those in pygit2/.libs/ , but it doesn't make a difference fixing
them at runtime with LD_LIBRARY_PATH because _pygit2.so uses the libgit2 in .libs_pygit2/,
which links against system wide libraries.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,874,2019-02-16T13:48:29Z,2019-02-17T09:19:56Z,2019-02-17T10:27:43Z,MERGED,True,53,1,1,https://github.com/webknjaz,✅ Add manylinux1 self testing,7,[],https://github.com/libgit2/pygit2/pull/874,https://github.com/webknjaz,7,https://github.com/libgit2/pygit2/pull/874#issuecomment-464439483,,So it looks like pypa/manylinux#60 to me...,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,875,2019-02-19T21:05:16Z,2019-02-20T18:10:05Z,2019-02-20T18:10:05Z,MERGED,True,184,39,2,https://github.com/webknjaz,Build manylinux1 compliant wheel statically,14,[],https://github.com/libgit2/pygit2/pull/875,https://github.com/webknjaz,1,https://github.com/libgit2/pygit2/pull/875,@jdavid this eliminates shared library dependencies.,@jdavid this eliminates shared library dependencies.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,875,2019-02-19T21:05:16Z,2019-02-20T18:10:05Z,2019-02-20T18:10:05Z,MERGED,True,184,39,2,https://github.com/webknjaz,Build manylinux1 compliant wheel statically,14,[],https://github.com/libgit2/pygit2/pull/875,https://github.com/webknjaz,2,https://github.com/libgit2/pygit2/pull/875#issuecomment-465331783,@jdavid this eliminates shared library dependencies.,"@techtonik @feisuzhu @beniwohli @uniphil @dbaxa you would probably be interested in testing this.
@jdavid I still keep having CFFI errors when installing wheel in venv and then importing it from there. But if I wheel unpack it and then use PYTHONPATH= that dir it imports smoothly and works (except for the TLS cert verification, of course).
Which leads me into thinking that shared object is probably put into non-discoverable location during the build... Ideas?
P.S. This is how this PR looks like in Travis CI in my fork: https://travis-ci.com/webknjaz/pygit2/jobs/178973093",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,875,2019-02-19T21:05:16Z,2019-02-20T18:10:05Z,2019-02-20T18:10:05Z,MERGED,True,184,39,2,https://github.com/webknjaz,Build manylinux1 compliant wheel statically,14,[],https://github.com/libgit2/pygit2/pull/875,https://github.com/webknjaz,3,https://github.com/libgit2/pygit2/pull/875#issuecomment-465545220,@jdavid this eliminates shared library dependencies.,"(i probably messed up my laptop env somehow: it works fine without a crash on the other machine)
And yet, it still doesn't explain Travis CI failures...",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,875,2019-02-19T21:05:16Z,2019-02-20T18:10:05Z,2019-02-20T18:10:05Z,MERGED,True,184,39,2,https://github.com/webknjaz,Build manylinux1 compliant wheel statically,14,[],https://github.com/libgit2/pygit2/pull/875,https://github.com/webknjaz,4,https://github.com/libgit2/pygit2/pull/875#issuecomment-465545677,@jdavid this eliminates shared library dependencies.,"Anyway, this PR is good to merge for now. That TLS cert validation failures probably need to be fixed by smth like #538: AFAIU those checks are done within C-code of libgit2, right?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,875,2019-02-19T21:05:16Z,2019-02-20T18:10:05Z,2019-02-20T18:10:05Z,MERGED,True,184,39,2,https://github.com/webknjaz,Build manylinux1 compliant wheel statically,14,[],https://github.com/libgit2/pygit2/pull/875,https://github.com/webknjaz,5,https://github.com/libgit2/pygit2/pull/875#issuecomment-465564960,@jdavid this eliminates shared library dependencies.,#876 should be a better way of addressing TLS/HTTPS issue,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,879,2019-02-24T19:30:11Z,2019-03-07T16:30:43Z,2020-02-24T13:13:08Z,CLOSED,False,67,1,4,https://github.com/imbuedhope,Allow setting git opt set sll cert locations option in libgit2,3,[],https://github.com/libgit2/pygit2/pull/879,https://github.com/imbuedhope,1,https://github.com/libgit2/pygit2/pull/879,"Closes #876
Adds support for the following
import pygit2
pygit2.settings.ssl_cert_file = '/path/to/file'
pygit2.settings.ssl_cert_dir = '/path/to/folder'
Which is the equivalent of the following in C
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, '/path/to/file', NULL);
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, NULL, '/path/to/folder');
Also adds support for directly loading the settings from the ssl module like follows
import pygit2
import ssl
pygit2.settings._ssl_cert_locations = ssl.get_default_verify_paths()
All the new properties that were added to pygit2.settings.Settings are write only, since it is write only in libgit2.
In addition, pygit2 also attempts sets _ssl_cert_locations based on the ssl module on import. This probably won't work on Windows until the wheels are changed to support this in the libgit2 being shipped with it.","Closes #876
Adds support for the following
import pygit2
pygit2.settings.ssl_cert_file = '/path/to/file'
pygit2.settings.ssl_cert_dir = '/path/to/folder'
Which is the equivalent of the following in C
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, '/path/to/file', NULL);
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, NULL, '/path/to/folder');
Also adds support for directly loading the settings from the ssl module like follows
import pygit2
import ssl
pygit2.settings._ssl_cert_locations = ssl.get_default_verify_paths()
All the new properties that were added to pygit2.settings.Settings are write only, since it is write only in libgit2.
In addition, pygit2 also attempts sets _ssl_cert_locations based on the ssl module on import. This probably won't work on Windows until the wheels are changed to support this in the libgit2 being shipped with it.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,879,2019-02-24T19:30:11Z,2019-03-07T16:30:43Z,2020-02-24T13:13:08Z,CLOSED,False,67,1,4,https://github.com/imbuedhope,Allow setting git opt set sll cert locations option in libgit2,3,[],https://github.com/libgit2/pygit2/pull/879,https://github.com/webknjaz,2,https://github.com/libgit2/pygit2/pull/879#issuecomment-468660126,"Closes #876
Adds support for the following
import pygit2
pygit2.settings.ssl_cert_file = '/path/to/file'
pygit2.settings.ssl_cert_dir = '/path/to/folder'
Which is the equivalent of the following in C
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, '/path/to/file', NULL);
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, NULL, '/path/to/folder');
Also adds support for directly loading the settings from the ssl module like follows
import pygit2
import ssl
pygit2.settings._ssl_cert_locations = ssl.get_default_verify_paths()
All the new properties that were added to pygit2.settings.Settings are write only, since it is write only in libgit2.
In addition, pygit2 also attempts sets _ssl_cert_locations based on the ssl module on import. This probably won't work on Windows until the wheels are changed to support this in the libgit2 being shipped with it.","Oh, I missed this PR...
P.S. s/sll/ssl/ in title",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,879,2019-02-24T19:30:11Z,2019-03-07T16:30:43Z,2020-02-24T13:13:08Z,CLOSED,False,67,1,4,https://github.com/imbuedhope,Allow setting git opt set sll cert locations option in libgit2,3,[],https://github.com/libgit2/pygit2/pull/879,https://github.com/webknjaz,3,https://github.com/libgit2/pygit2/pull/879#issuecomment-468791003,"Closes #876
Adds support for the following
import pygit2
pygit2.settings.ssl_cert_file = '/path/to/file'
pygit2.settings.ssl_cert_dir = '/path/to/folder'
Which is the equivalent of the following in C
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, '/path/to/file', NULL);
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, NULL, '/path/to/folder');
Also adds support for directly loading the settings from the ssl module like follows
import pygit2
import ssl
pygit2.settings._ssl_cert_locations = ssl.get_default_verify_paths()
All the new properties that were added to pygit2.settings.Settings are write only, since it is write only in libgit2.
In addition, pygit2 also attempts sets _ssl_cert_locations based on the ssl module on import. This probably won't work on Windows until the wheels are changed to support this in the libgit2 being shipped with it.",I still think that setting one value shouldn't reset another one.,True,{'EYES': ['https://github.com/imbuedhope']}
libgit2/pygit2,https://github.com/libgit2/pygit2,879,2019-02-24T19:30:11Z,2019-03-07T16:30:43Z,2020-02-24T13:13:08Z,CLOSED,False,67,1,4,https://github.com/imbuedhope,Allow setting git opt set sll cert locations option in libgit2,3,[],https://github.com/libgit2/pygit2/pull/879,https://github.com/jdavid,4,https://github.com/libgit2/pygit2/pull/879#issuecomment-468904498,"Closes #876
Adds support for the following
import pygit2
pygit2.settings.ssl_cert_file = '/path/to/file'
pygit2.settings.ssl_cert_dir = '/path/to/folder'
Which is the equivalent of the following in C
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, '/path/to/file', NULL);
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, NULL, '/path/to/folder');
Also adds support for directly loading the settings from the ssl module like follows
import pygit2
import ssl
pygit2.settings._ssl_cert_locations = ssl.get_default_verify_paths()
All the new properties that were added to pygit2.settings.Settings are write only, since it is write only in libgit2.
In addition, pygit2 also attempts sets _ssl_cert_locations based on the ssl module on import. This probably won't work on Windows until the wheels are changed to support this in the libgit2 being shipped with it.","Finally looked at the api. I would replace both setters by a single method:
set_ssl_cert_locations(...)",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,879,2019-02-24T19:30:11Z,2019-03-07T16:30:43Z,2020-02-24T13:13:08Z,CLOSED,False,67,1,4,https://github.com/imbuedhope,Allow setting git opt set sll cert locations option in libgit2,3,[],https://github.com/libgit2/pygit2/pull/879,https://github.com/webknjaz,5,https://github.com/libgit2/pygit2/pull/879#issuecomment-468905343,"Closes #876
Adds support for the following
import pygit2
pygit2.settings.ssl_cert_file = '/path/to/file'
pygit2.settings.ssl_cert_dir = '/path/to/folder'
Which is the equivalent of the following in C
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, '/path/to/file', NULL);
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, NULL, '/path/to/folder');
Also adds support for directly loading the settings from the ssl module like follows
import pygit2
import ssl
pygit2.settings._ssl_cert_locations = ssl.get_default_verify_paths()
All the new properties that were added to pygit2.settings.Settings are write only, since it is write only in libgit2.
In addition, pygit2 also attempts sets _ssl_cert_locations based on the ssl module on import. This probably won't work on Windows until the wheels are changed to support this in the libgit2 being shipped with it.","I'd keep properties for individual suboptions. They are native to Python and is what a typical Pythonista would expect. It better communicates the intent as in ""make this setting use that value"".",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,879,2019-02-24T19:30:11Z,2019-03-07T16:30:43Z,2020-02-24T13:13:08Z,CLOSED,False,67,1,4,https://github.com/imbuedhope,Allow setting git opt set sll cert locations option in libgit2,3,[],https://github.com/libgit2/pygit2/pull/879,https://github.com/jdavid,6,https://github.com/libgit2/pygit2/pull/879#issuecomment-468909093,"Closes #876
Adds support for the following
import pygit2
pygit2.settings.ssl_cert_file = '/path/to/file'
pygit2.settings.ssl_cert_dir = '/path/to/folder'
Which is the equivalent of the following in C
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, '/path/to/file', NULL);
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, NULL, '/path/to/folder');
Also adds support for directly loading the settings from the ssl module like follows
import pygit2
import ssl
pygit2.settings._ssl_cert_locations = ssl.get_default_verify_paths()
All the new properties that were added to pygit2.settings.Settings are write only, since it is write only in libgit2.
In addition, pygit2 also attempts sets _ssl_cert_locations based on the ssl module on import. This probably won't work on Windows until the wheels are changed to support this in the libgit2 being shipped with it.","I'd rather not have 2 ways to do the same thing. It's good for the users to have 1 way, so they don't have to stop thinking which one they should use, and code looks the same whoever writes it.
It's also good for the developers/maintainers not to increase the burden: our limited resources are the main constraint. Aiming for feature completeness, api consistency, and quality documentation is already ambitious. So I'd keep it simple and stick to the 1 way principle (even if the API feels a bit low level, it's not awkward either).
The settings.py file is a good example of the inconsistency we have. It already mixes properties and methods. And a couple of methods even lack the verb at the beginning. caching and cache_max_size should be setters, and cache_object_limit should be renamed to set_cache_object_limit
Then the settings.py file would be all getter/setters except for the 2 not straightforward cases where we would have methods. The advantages: consistency, simplicity, 1 way.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,879,2019-02-24T19:30:11Z,2019-03-07T16:30:43Z,2020-02-24T13:13:08Z,CLOSED,False,67,1,4,https://github.com/imbuedhope,Allow setting git opt set sll cert locations option in libgit2,3,[],https://github.com/libgit2/pygit2/pull/879,https://github.com/webknjaz,7,https://github.com/libgit2/pygit2/pull/879#issuecomment-468909325,"Closes #876
Adds support for the following
import pygit2
pygit2.settings.ssl_cert_file = '/path/to/file'
pygit2.settings.ssl_cert_dir = '/path/to/folder'
Which is the equivalent of the following in C
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, '/path/to/file', NULL);
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, NULL, '/path/to/folder');
Also adds support for directly loading the settings from the ssl module like follows
import pygit2
import ssl
pygit2.settings._ssl_cert_locations = ssl.get_default_verify_paths()
All the new properties that were added to pygit2.settings.Settings are write only, since it is write only in libgit2.
In addition, pygit2 also attempts sets _ssl_cert_locations based on the ssl module on import. This probably won't work on Windows until the wheels are changed to support this in the libgit2 being shipped with it.","Yes, there should be one way of doing things. Except for the cases where that way cannot be used. So are you okay with property-based getters/setters then?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,879,2019-02-24T19:30:11Z,2019-03-07T16:30:43Z,2020-02-24T13:13:08Z,CLOSED,False,67,1,4,https://github.com/imbuedhope,Allow setting git opt set sll cert locations option in libgit2,3,[],https://github.com/libgit2/pygit2/pull/879,https://github.com/jdavid,8,https://github.com/libgit2/pygit2/pull/879#issuecomment-468910110,"Closes #876
Adds support for the following
import pygit2
pygit2.settings.ssl_cert_file = '/path/to/file'
pygit2.settings.ssl_cert_dir = '/path/to/folder'
Which is the equivalent of the following in C
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, '/path/to/file', NULL);
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, NULL, '/path/to/folder');
Also adds support for directly loading the settings from the ssl module like follows
import pygit2
import ssl
pygit2.settings._ssl_cert_locations = ssl.get_default_verify_paths()
All the new properties that were added to pygit2.settings.Settings are write only, since it is write only in libgit2.
In addition, pygit2 also attempts sets _ssl_cert_locations based on the ssl module on import. This probably won't work on Windows until the wheels are changed to support this in the libgit2 being shipped with it.",Could you summarize the API you propose for ssl cert locations?,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,879,2019-02-24T19:30:11Z,2019-03-07T16:30:43Z,2020-02-24T13:13:08Z,CLOSED,False,67,1,4,https://github.com/imbuedhope,Allow setting git opt set sll cert locations option in libgit2,3,[],https://github.com/libgit2/pygit2/pull/879,https://github.com/webknjaz,9,https://github.com/libgit2/pygit2/pull/879#issuecomment-468910166,"Closes #876
Adds support for the following
import pygit2
pygit2.settings.ssl_cert_file = '/path/to/file'
pygit2.settings.ssl_cert_dir = '/path/to/folder'
Which is the equivalent of the following in C
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, '/path/to/file', NULL);
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, NULL, '/path/to/folder');
Also adds support for directly loading the settings from the ssl module like follows
import pygit2
import ssl
pygit2.settings._ssl_cert_locations = ssl.get_default_verify_paths()
All the new properties that were added to pygit2.settings.Settings are write only, since it is write only in libgit2.
In addition, pygit2 also attempts sets _ssl_cert_locations based on the ssl module on import. This probably won't work on Windows until the wheels are changed to support this in the libgit2 being shipped with it.",I'll send it as a PR on top of this branch,True,{'THUMBS_UP': ['https://github.com/jdavid']}
libgit2/pygit2,https://github.com/libgit2/pygit2,879,2019-02-24T19:30:11Z,2019-03-07T16:30:43Z,2020-02-24T13:13:08Z,CLOSED,False,67,1,4,https://github.com/imbuedhope,Allow setting git opt set sll cert locations option in libgit2,3,[],https://github.com/libgit2/pygit2/pull/879,https://github.com/webknjaz,10,https://github.com/libgit2/pygit2/pull/879#issuecomment-468910598,"Closes #876
Adds support for the following
import pygit2
pygit2.settings.ssl_cert_file = '/path/to/file'
pygit2.settings.ssl_cert_dir = '/path/to/folder'
Which is the equivalent of the following in C
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, '/path/to/file', NULL);
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, NULL, '/path/to/folder');
Also adds support for directly loading the settings from the ssl module like follows
import pygit2
import ssl
pygit2.settings._ssl_cert_locations = ssl.get_default_verify_paths()
All the new properties that were added to pygit2.settings.Settings are write only, since it is write only in libgit2.
In addition, pygit2 also attempts sets _ssl_cert_locations based on the ssl module on import. This probably won't work on Windows until the wheels are changed to support this in the libgit2 being shipped with it.",Side note: after looking at Settings class I think that this use-case might be a good fit for using attrs library. But it's a topic for a separate discussion.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,879,2019-02-24T19:30:11Z,2019-03-07T16:30:43Z,2020-02-24T13:13:08Z,CLOSED,False,67,1,4,https://github.com/imbuedhope,Allow setting git opt set sll cert locations option in libgit2,3,[],https://github.com/libgit2/pygit2/pull/879,https://github.com/webknjaz,11,https://github.com/libgit2/pygit2/pull/879#issuecomment-468912173,"Closes #876
Adds support for the following
import pygit2
pygit2.settings.ssl_cert_file = '/path/to/file'
pygit2.settings.ssl_cert_dir = '/path/to/folder'
Which is the equivalent of the following in C
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, '/path/to/file', NULL);
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, NULL, '/path/to/folder');
Also adds support for directly loading the settings from the ssl module like follows
import pygit2
import ssl
pygit2.settings._ssl_cert_locations = ssl.get_default_verify_paths()
All the new properties that were added to pygit2.settings.Settings are write only, since it is write only in libgit2.
In addition, pygit2 also attempts sets _ssl_cert_locations based on the ssl module on import. This probably won't work on Windows until the wheels are changed to support this in the libgit2 being shipped with it.",@jdavid #884,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,879,2019-02-24T19:30:11Z,2019-03-07T16:30:43Z,2020-02-24T13:13:08Z,CLOSED,False,67,1,4,https://github.com/imbuedhope,Allow setting git opt set sll cert locations option in libgit2,3,[],https://github.com/libgit2/pygit2/pull/879,https://github.com/rcoup,12,https://github.com/libgit2/pygit2/pull/879#issuecomment-590313411,"Closes #876
Adds support for the following
import pygit2
pygit2.settings.ssl_cert_file = '/path/to/file'
pygit2.settings.ssl_cert_dir = '/path/to/folder'
Which is the equivalent of the following in C
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, '/path/to/file', NULL);
git_libgit2_opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, NULL, '/path/to/folder');
Also adds support for directly loading the settings from the ssl module like follows
import pygit2
import ssl
pygit2.settings._ssl_cert_locations = ssl.get_default_verify_paths()
All the new properties that were added to pygit2.settings.Settings are write only, since it is write only in libgit2.
In addition, pygit2 also attempts sets _ssl_cert_locations based on the ssl module on import. This probably won't work on Windows until the wheels are changed to support this in the libgit2 being shipped with it.","Example if you're using certifi:
import certifi
import pygit2
pygit2.settings.ssl_cert_file = certifi.where()",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,882,2019-03-01T10:18:24Z,2019-03-01T11:06:46Z,2019-03-01T11:06:51Z,CLOSED,False,2,2,2,https://github.com/yan12125,setup.py: Remove lock on pycparser,2,[],https://github.com/libgit2/pygit2/pull/882,https://github.com/yan12125,1,https://github.com/libgit2/pygit2/pull/882,"Re-submit #867
A local build works. Let's see what will happen on Travis CI.","Re-submit #867
A local build works. Let's see what will happen on Travis CI.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,882,2019-03-01T10:18:24Z,2019-03-01T11:06:46Z,2019-03-01T11:06:51Z,CLOSED,False,2,2,2,https://github.com/yan12125,setup.py: Remove lock on pycparser,2,[],https://github.com/libgit2/pygit2/pull/882,https://github.com/yan12125,2,https://github.com/libgit2/pygit2/pull/882#issuecomment-468629891,"Re-submit #867
A local build works. Let's see what will happen on Travis CI.",Mysterious...,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,883,2019-03-01T17:22:19Z,2019-03-02T07:56:04Z,2019-03-02T09:43:59Z,MERGED,True,9,4,1,https://github.com/webknjaz,Fix testing manylinux1 wheels,2,[],https://github.com/libgit2/pygit2/pull/883,https://github.com/webknjaz,1,https://github.com/libgit2/pygit2/pull/883,,,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,883,2019-03-01T17:22:19Z,2019-03-02T07:56:04Z,2019-03-02T09:43:59Z,MERGED,True,9,4,1,https://github.com/webknjaz,Fix testing manylinux1 wheels,2,[],https://github.com/libgit2/pygit2/pull/883,https://github.com/webknjaz,2,https://github.com/libgit2/pygit2/pull/883#issuecomment-468749428,,Here's the build log: https://travis-ci.com/webknjaz/pygit2/jobs/181669779,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,883,2019-03-01T17:22:19Z,2019-03-02T07:56:04Z,2019-03-02T09:43:59Z,MERGED,True,9,4,1,https://github.com/webknjaz,Fix testing manylinux1 wheels,2,[],https://github.com/libgit2/pygit2/pull/883,https://github.com/webknjaz,3,https://github.com/libgit2/pygit2/pull/883#issuecomment-468749653,,"@jdavid CI test failures are unrelated and existed in master earlier.
BTW could you please enable CRON in Travis CI?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,883,2019-03-01T17:22:19Z,2019-03-02T07:56:04Z,2019-03-02T09:43:59Z,MERGED,True,9,4,1,https://github.com/webknjaz,Fix testing manylinux1 wheels,2,[],https://github.com/libgit2/pygit2/pull/883,https://github.com/jdavid,4,https://github.com/libgit2/pygit2/pull/883#issuecomment-468903217,,"Do you want to add a cron job to run a build on master periodically? daily, weekly, monthly?
Which is the purpose?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,883,2019-03-01T17:22:19Z,2019-03-02T07:56:04Z,2019-03-02T09:43:59Z,MERGED,True,9,4,1,https://github.com/webknjaz,Fix testing manylinux1 wheels,2,[],https://github.com/libgit2/pygit2/pull/883,https://github.com/webknjaz,5,https://github.com/libgit2/pygit2/pull/883#issuecomment-468903392,,Purpose is that it could run additional heavy jobs + ensure that dependencies are healthy.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,883,2019-03-01T17:22:19Z,2019-03-02T07:56:04Z,2019-03-02T09:43:59Z,MERGED,True,9,4,1,https://github.com/webknjaz,Fix testing manylinux1 wheels,2,[],https://github.com/libgit2/pygit2/pull/883,https://github.com/jdavid,6,https://github.com/libgit2/pygit2/pull/883#issuecomment-468904742,,"added: master, weekly, do not run if there has been a build in the last 24h",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,883,2019-03-01T17:22:19Z,2019-03-02T07:56:04Z,2019-03-02T09:43:59Z,MERGED,True,9,4,1,https://github.com/webknjaz,Fix testing manylinux1 wheels,2,[],https://github.com/libgit2/pygit2/pull/883,https://github.com/webknjaz,7,https://github.com/libgit2/pygit2/pull/883#issuecomment-468904839,,In this case it won't run jobs which only run on cron sometimes.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,883,2019-03-01T17:22:19Z,2019-03-02T07:56:04Z,2019-03-02T09:43:59Z,MERGED,True,9,4,1,https://github.com/webknjaz,Fix testing manylinux1 wheels,2,[],https://github.com/libgit2/pygit2/pull/883,https://github.com/jdavid,8,https://github.com/libgit2/pygit2/pull/883#issuecomment-468904938,,ok changed to always run,True,"{'THUMBS_UP': ['https://github.com/webknjaz'], 'HOORAY': ['https://github.com/webknjaz'], 'ROCKET': ['https://github.com/webknjaz']}"
libgit2/pygit2,https://github.com/libgit2/pygit2,884,2019-03-02T11:11:51Z,2019-03-07T16:30:43Z,2019-03-07T16:30:43Z,MERGED,True,84,4,3,https://github.com/webknjaz,Expose setting TLS file and dir lookup locations via settings module,4,[],https://github.com/libgit2/pygit2/pull/884,https://github.com/webknjaz,1,https://github.com/libgit2/pygit2/pull/884,"Usage:
import pygit2
pygit2.settings.ssl_cert_file = '/path/to/file'
pygit2.settings.ssl_cert_dir = '/path/to/folder'
del pygit2.settings.ssl_cert_file
pygit2.settings.set_ssl_cert_locations('/path/to/new/file', '/path/to/new/folder')
Co-Authored-By: Sriram Raghu imbuedhope@gmail.com
Closes #876
Superseeds and closes #879","Usage:
import pygit2
pygit2.settings.ssl_cert_file = '/path/to/file'
pygit2.settings.ssl_cert_dir = '/path/to/folder'
del pygit2.settings.ssl_cert_file
pygit2.settings.set_ssl_cert_locations('/path/to/new/file', '/path/to/new/folder')
Co-Authored-By: Sriram Raghu imbuedhope@gmail.com
Closes #876
Superseeds and closes #879",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,884,2019-03-02T11:11:51Z,2019-03-07T16:30:43Z,2019-03-07T16:30:43Z,MERGED,True,84,4,3,https://github.com/webknjaz,Expose setting TLS file and dir lookup locations via settings module,4,[],https://github.com/libgit2/pygit2/pull/884,https://github.com/imbuedhope,2,https://github.com/libgit2/pygit2/pull/884#issuecomment-468931379,"Usage:
import pygit2
pygit2.settings.ssl_cert_file = '/path/to/file'
pygit2.settings.ssl_cert_dir = '/path/to/folder'
del pygit2.settings.ssl_cert_file
pygit2.settings.set_ssl_cert_locations('/path/to/new/file', '/path/to/new/folder')
Co-Authored-By: Sriram Raghu imbuedhope@gmail.com
Closes #876
Superseeds and closes #879","Might be good to make it clear that Settings should not be instantiated by users too. Especially since it's accessible as pygit2.Settings. With your changes creating a Settings object will cause the ssl certs to reset.
I'm not sure if anyone is using the object, but it's better to play it safe I think. This was not an issue until now since, there was no state was maintained in the Settings class.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,884,2019-03-02T11:11:51Z,2019-03-07T16:30:43Z,2019-03-07T16:30:43Z,MERGED,True,84,4,3,https://github.com/webknjaz,Expose setting TLS file and dir lookup locations via settings module,4,[],https://github.com/libgit2/pygit2/pull/884,https://github.com/webknjaz,3,https://github.com/libgit2/pygit2/pull/884#issuecomment-468931597,"Usage:
import pygit2
pygit2.settings.ssl_cert_file = '/path/to/file'
pygit2.settings.ssl_cert_dir = '/path/to/folder'
del pygit2.settings.ssl_cert_file
pygit2.settings.set_ssl_cert_locations('/path/to/new/file', '/path/to/new/folder')
Co-Authored-By: Sriram Raghu imbuedhope@gmail.com
Closes #876
Superseeds and closes #879",Should it be a singleton?,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,884,2019-03-02T11:11:51Z,2019-03-07T16:30:43Z,2019-03-07T16:30:43Z,MERGED,True,84,4,3,https://github.com/webknjaz,Expose setting TLS file and dir lookup locations via settings module,4,[],https://github.com/libgit2/pygit2/pull/884,https://github.com/jdavid,4,https://github.com/libgit2/pygit2/pull/884#issuecomment-468934379,"Usage:
import pygit2
pygit2.settings.ssl_cert_file = '/path/to/file'
pygit2.settings.ssl_cert_dir = '/path/to/folder'
del pygit2.settings.ssl_cert_file
pygit2.settings.set_ssl_cert_locations('/path/to/new/file', '/path/to/new/folder')
Co-Authored-By: Sriram Raghu imbuedhope@gmail.com
Closes #876
Superseeds and closes #879",Could you please squash the commits to make it easier to review?,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,884,2019-03-02T11:11:51Z,2019-03-07T16:30:43Z,2019-03-07T16:30:43Z,MERGED,True,84,4,3,https://github.com/webknjaz,Expose setting TLS file and dir lookup locations via settings module,4,[],https://github.com/libgit2/pygit2/pull/884,https://github.com/imbuedhope,5,https://github.com/libgit2/pygit2/pull/884#issuecomment-468934413,"Usage:
import pygit2
pygit2.settings.ssl_cert_file = '/path/to/file'
pygit2.settings.ssl_cert_dir = '/path/to/folder'
del pygit2.settings.ssl_cert_file
pygit2.settings.set_ssl_cert_locations('/path/to/new/file', '/path/to/new/folder')
Co-Authored-By: Sriram Raghu imbuedhope@gmail.com
Closes #876
Superseeds and closes #879","A singleton could work. I'm not sure if there are scenarios where it makes sense to have multiple Settings objects, it doesn't feel like there would be.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,884,2019-03-02T11:11:51Z,2019-03-07T16:30:43Z,2019-03-07T16:30:43Z,MERGED,True,84,4,3,https://github.com/webknjaz,Expose setting TLS file and dir lookup locations via settings module,4,[],https://github.com/libgit2/pygit2/pull/884,https://github.com/webknjaz,6,https://github.com/libgit2/pygit2/pull/884#issuecomment-469663473,"Usage:
import pygit2
pygit2.settings.ssl_cert_file = '/path/to/file'
pygit2.settings.ssl_cert_dir = '/path/to/folder'
del pygit2.settings.ssl_cert_file
pygit2.settings.set_ssl_cert_locations('/path/to/new/file', '/path/to/new/folder')
Co-Authored-By: Sriram Raghu imbuedhope@gmail.com
Closes #876
Superseeds and closes #879","@imbuedhope multiple settings may be useful if you deal with multiple repos with different requirements. But for that, it'd have to be thread-safe. Is it now?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,884,2019-03-02T11:11:51Z,2019-03-07T16:30:43Z,2019-03-07T16:30:43Z,MERGED,True,84,4,3,https://github.com/webknjaz,Expose setting TLS file and dir lookup locations via settings module,4,[],https://github.com/libgit2/pygit2/pull/884,https://github.com/webknjaz,7,https://github.com/libgit2/pygit2/pull/884#issuecomment-469668417,"Usage:
import pygit2
pygit2.settings.ssl_cert_file = '/path/to/file'
pygit2.settings.ssl_cert_dir = '/path/to/folder'
del pygit2.settings.ssl_cert_file
pygit2.settings.set_ssl_cert_locations('/path/to/new/file', '/path/to/new/folder')
Co-Authored-By: Sriram Raghu imbuedhope@gmail.com
Closes #876
Superseeds and closes #879","@jdavid rebased, only atomic commits left.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,884,2019-03-02T11:11:51Z,2019-03-07T16:30:43Z,2019-03-07T16:30:43Z,MERGED,True,84,4,3,https://github.com/webknjaz,Expose setting TLS file and dir lookup locations via settings module,4,[],https://github.com/libgit2/pygit2/pull/884,https://github.com/imbuedhope,8,https://github.com/libgit2/pygit2/pull/884#issuecomment-469796194,"Usage:
import pygit2
pygit2.settings.ssl_cert_file = '/path/to/file'
pygit2.settings.ssl_cert_dir = '/path/to/folder'
del pygit2.settings.ssl_cert_file
pygit2.settings.set_ssl_cert_locations('/path/to/new/file', '/path/to/new/folder')
Co-Authored-By: Sriram Raghu imbuedhope@gmail.com
Closes #876
Superseeds and closes #879","@webknjaz your current implementation should be safe with the multiprocessing module since memory is not shared. It will probably break with threading, but I think anyone using it with threading should be expecting the settings to be shared.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,884,2019-03-02T11:11:51Z,2019-03-07T16:30:43Z,2019-03-07T16:30:43Z,MERGED,True,84,4,3,https://github.com/webknjaz,Expose setting TLS file and dir lookup locations via settings module,4,[],https://github.com/libgit2/pygit2/pull/884,https://github.com/webknjaz,9,https://github.com/libgit2/pygit2/pull/884#issuecomment-470089385,"Usage:
import pygit2
pygit2.settings.ssl_cert_file = '/path/to/file'
pygit2.settings.ssl_cert_dir = '/path/to/folder'
del pygit2.settings.ssl_cert_file
pygit2.settings.set_ssl_cert_locations('/path/to/new/file', '/path/to/new/folder')
Co-Authored-By: Sriram Raghu imbuedhope@gmail.com
Closes #876
Superseeds and closes #879","@imbuedhope that is true. Though, I believe, libgit2 itself supports and is compiled in thread-safe mode: https://github.com/libgit2/pygit2/blob/f483622/travis/build-manylinux1-wheels.sh#L178.
So to summarize: libgit2 is thread-safe, pygit2 probably isn't. So we don't have to care about that right now.
Can we ignore state-management problem in this PR?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,886,2019-03-09T18:11:57Z,2019-03-10T19:26:49Z,2019-03-10T19:26:49Z,MERGED,True,19,4,1,https://github.com/webknjaz,🚑🐛 Fix TLS locations init when unsupported,1,[],https://github.com/libgit2/pygit2/pull/886,https://github.com/webknjaz,1,https://github.com/libgit2/pygit2/pull/886,"Ignore TLS certificate lookup file and dir locations initialization
failure when the TLS backend library doesn't support it.
Ref #878","Ignore TLS certificate lookup file and dir locations initialization
failure when the TLS backend library doesn't support it.
Ref #878",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,886,2019-03-09T18:11:57Z,2019-03-10T19:26:49Z,2019-03-10T19:26:49Z,MERGED,True,19,4,1,https://github.com/webknjaz,🚑🐛 Fix TLS locations init when unsupported,1,[],https://github.com/libgit2/pygit2/pull/886,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/886#issuecomment-471209333,"Ignore TLS certificate lookup file and dir locations initialization
failure when the TLS backend library doesn't support it.
Ref #878","Not yet fixed, https://ci.appveyor.com/project/jdavid/pygit2/builds/22951826/job/airgmes6ye5i1vqg#L7623
still failing
But yes, this is the good approach.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,886,2019-03-09T18:11:57Z,2019-03-10T19:26:49Z,2019-03-10T19:26:49Z,MERGED,True,19,4,1,https://github.com/webknjaz,🚑🐛 Fix TLS locations init when unsupported,1,[],https://github.com/libgit2/pygit2/pull/886,https://github.com/webknjaz,3,https://github.com/libgit2/pygit2/pull/886#issuecomment-471213625,"Ignore TLS certificate lookup file and dir locations initialization
failure when the TLS backend library doesn't support it.
Ref #878",I missed exception stringification... Updated the commit.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,886,2019-03-09T18:11:57Z,2019-03-10T19:26:49Z,2019-03-10T19:26:49Z,MERGED,True,19,4,1,https://github.com/webknjaz,🚑🐛 Fix TLS locations init when unsupported,1,[],https://github.com/libgit2/pygit2/pull/886,https://github.com/webknjaz,4,https://github.com/libgit2/pygit2/pull/886#issuecomment-471214127,"Ignore TLS certificate lookup file and dir locations initialization
failure when the TLS backend library doesn't support it.
Ref #878","Alright, it works now.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,887,2019-03-12T19:53:20Z,2019-03-13T08:24:31Z,2019-03-13T08:24:32Z,MERGED,True,6,1,1,https://github.com/rcoup,Improve OSX install documentation,1,[],https://github.com/libgit2/pygit2/pull/887,https://github.com/rcoup,1,https://github.com/libgit2/pygit2/pull/887,"Fix virtualenv build instructions for OSX, LDFLAGS syntax is different.","Fix virtualenv build instructions for OSX, LDFLAGS syntax is different.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,888,2019-03-13T01:25:42Z,2019-03-13T18:05:55Z,2019-03-19T20:33:56Z,MERGED,True,80,0,3,https://github.com/rcoup,Support for git_merge_analysis_for_ref(),1,[],https://github.com/libgit2/pygit2/pull/888,https://github.com/rcoup,1,https://github.com/libgit2/pygit2/pull/888,"via new Repository.merge_analysis_for_ref(our_ref, their_head)
Upstream method was added in libgit2 v0.28
Code-wise, follows the pattern + tests of the existing Repository.merge_analysis()","via new Repository.merge_analysis_for_ref(our_ref, their_head)
Upstream method was added in libgit2 v0.28
Code-wise, follows the pattern + tests of the existing Repository.merge_analysis()",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,888,2019-03-13T01:25:42Z,2019-03-13T18:05:55Z,2019-03-19T20:33:56Z,MERGED,True,80,0,3,https://github.com/rcoup,Support for git_merge_analysis_for_ref(),1,[],https://github.com/libgit2/pygit2/pull/888,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/888#issuecomment-472542196,"via new Repository.merge_analysis_for_ref(our_ref, their_head)
Upstream method was added in libgit2 v0.28
Code-wise, follows the pattern + tests of the existing Repository.merge_analysis()","Merged, thanks.
Probably it would be better to have a single method with an optional parameter, like: Repository.merge_analysis(id, ref=None). Would you like to do a PR to change that?",True,{'THUMBS_UP': ['https://github.com/rcoup']}
libgit2/pygit2,https://github.com/libgit2/pygit2,889,2019-03-14T17:23:06Z,2019-03-19T07:25:53Z,2019-03-19T07:25:53Z,MERGED,True,45,4,2,https://github.com/Insomniac66,add_worktree: support optional target ref,2,[],https://github.com/libgit2/pygit2/pull/889,https://github.com/Insomniac66,1,https://github.com/libgit2/pygit2/pull/889,Adds suggestion from #814 by adding an optional positional parameter to add_worktree.,Adds suggestion from #814 by adding an optional positional parameter to add_worktree.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,889,2019-03-14T17:23:06Z,2019-03-19T07:25:53Z,2019-03-19T07:25:53Z,MERGED,True,45,4,2,https://github.com/Insomniac66,add_worktree: support optional target ref,2,[],https://github.com/libgit2/pygit2/pull/889,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/889#issuecomment-473519308,Adds suggestion from #814 by adding an optional positional parameter to add_worktree.,Looks good. Could you add a unit test?,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,891,2019-03-19T11:40:02Z,2019-03-19T12:31:03Z,2019-03-19T20:33:47Z,MERGED,True,11,50,3,https://github.com/rcoup,merge: combine merge_analysis_for_ref() into merge_analysis(),1,[],https://github.com/libgit2/pygit2/pull/891,https://github.com/rcoup,1,https://github.com/libgit2/pygit2/pull/891,"As suggested by @jdavid in #888 (comment)
Base reference becomes an additional method parameter to Repository.merge_analysis().
my_repo.merge_analysis('abcde12345')                             # default ref is HEAD
my_repo.merge_analysis('abcde12345', 'refs/heads/other-branch')  # different ref
# was:
my_repo.merge_analysis_for_ref('refs/heads/other-branch', 'abcde12345')","As suggested by @jdavid in #888 (comment)
Base reference becomes an additional method parameter to Repository.merge_analysis().
my_repo.merge_analysis('abcde12345')                             # default ref is HEAD
my_repo.merge_analysis('abcde12345', 'refs/heads/other-branch')  # different ref
# was:
my_repo.merge_analysis_for_ref('refs/heads/other-branch', 'abcde12345')",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,893,2019-03-25T23:04:07Z,2019-03-30T19:31:03Z,2019-03-30T19:31:03Z,MERGED,True,119,31,4,https://github.com/jnrbsn,Deprecate Patch.patch and add Patch.text and Patch.data,1,[],https://github.com/libgit2/pygit2/pull/893,https://github.com/jnrbsn,1,https://github.com/libgit2/pygit2/pull/893,"This is an attempt to finish up the work in PR #790 originally done by @erikvanzijst. Thanks to him for the initial work.
Patch.patch assumes all content to be encoded in UTF-8 and forcefully replaces any non-decodeable sequences. This can lead to corruption for content that either does not conform to any specific encoding altogether, or uses an encoding that is incompatible with, or ambiguous to UTF-8.
As discussed in #790, this change deprecates Patch.patch in favor of Patch.text and adds Patch.data, which returns the unmodified, raw bytes.","This is an attempt to finish up the work in PR #790 originally done by @erikvanzijst. Thanks to him for the initial work.
Patch.patch assumes all content to be encoded in UTF-8 and forcefully replaces any non-decodeable sequences. This can lead to corruption for content that either does not conform to any specific encoding altogether, or uses an encoding that is incompatible with, or ambiguous to UTF-8.
As discussed in #790, this change deprecates Patch.patch in favor of Patch.text and adds Patch.data, which returns the unmodified, raw bytes.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,893,2019-03-25T23:04:07Z,2019-03-30T19:31:03Z,2019-03-30T19:31:03Z,MERGED,True,119,31,4,https://github.com/jnrbsn,Deprecate Patch.patch and add Patch.text and Patch.data,1,[],https://github.com/libgit2/pygit2/pull/893,https://github.com/jnrbsn,2,https://github.com/libgit2/pygit2/pull/893#issuecomment-476416167,"This is an attempt to finish up the work in PR #790 originally done by @erikvanzijst. Thanks to him for the initial work.
Patch.patch assumes all content to be encoded in UTF-8 and forcefully replaces any non-decodeable sequences. This can lead to corruption for content that either does not conform to any specific encoding altogether, or uses an encoding that is incompatible with, or ambiguous to UTF-8.
As discussed in #790, this change deprecates Patch.patch in favor of Patch.text and adds Patch.data, which returns the unmodified, raw bytes.",@jdavid Can you take a look at this? I think I implemented what you described in #790.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,893,2019-03-25T23:04:07Z,2019-03-30T19:31:03Z,2019-03-30T19:31:03Z,MERGED,True,119,31,4,https://github.com/jnrbsn,Deprecate Patch.patch and add Patch.text and Patch.data,1,[],https://github.com/libgit2/pygit2/pull/893,https://github.com/pypingou,3,https://github.com/libgit2/pygit2/pull/893#issuecomment-476664624,"This is an attempt to finish up the work in PR #790 originally done by @erikvanzijst. Thanks to him for the initial work.
Patch.patch assumes all content to be encoded in UTF-8 and forcefully replaces any non-decodeable sequences. This can lead to corruption for content that either does not conform to any specific encoding altogether, or uses an encoding that is incompatible with, or ambiguous to UTF-8.
As discussed in #790, this change deprecates Patch.patch in favor of Patch.text and adds Patch.data, which returns the unmodified, raw bytes.","I'd argue this is not deprecating, it's purely replacing. Deprecating implies there is a warning and no API breakage (yet).",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,893,2019-03-25T23:04:07Z,2019-03-30T19:31:03Z,2019-03-30T19:31:03Z,MERGED,True,119,31,4,https://github.com/jnrbsn,Deprecate Patch.patch and add Patch.text and Patch.data,1,[],https://github.com/libgit2/pygit2/pull/893,https://github.com/pypingou,4,https://github.com/libgit2/pygit2/pull/893#issuecomment-476665385,"This is an attempt to finish up the work in PR #790 originally done by @erikvanzijst. Thanks to him for the initial work.
Patch.patch assumes all content to be encoded in UTF-8 and forcefully replaces any non-decodeable sequences. This can lead to corruption for content that either does not conform to any specific encoding altogether, or uses an encoding that is incompatible with, or ambiguous to UTF-8.
As discussed in #790, this change deprecates Patch.patch in favor of Patch.text and adds Patch.data, which returns the unmodified, raw bytes.",You could keep .patch present have it emit a warning and make its output be the one of .text. This would keep backward compatibility and warn users about upcoming changes to the API.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,893,2019-03-25T23:04:07Z,2019-03-30T19:31:03Z,2019-03-30T19:31:03Z,MERGED,True,119,31,4,https://github.com/jnrbsn,Deprecate Patch.patch and add Patch.text and Patch.data,1,[],https://github.com/libgit2/pygit2/pull/893,https://github.com/jnrbsn,5,https://github.com/libgit2/pygit2/pull/893#issuecomment-476793072,"This is an attempt to finish up the work in PR #790 originally done by @erikvanzijst. Thanks to him for the initial work.
Patch.patch assumes all content to be encoded in UTF-8 and forcefully replaces any non-decodeable sequences. This can lead to corruption for content that either does not conform to any specific encoding altogether, or uses an encoding that is incompatible with, or ambiguous to UTF-8.
As discussed in #790, this change deprecates Patch.patch in favor of Patch.text and adds Patch.data, which returns the unmodified, raw bytes.",@pypingou That's exactly what I already did. Patch.patch raises a DeprecationWarning and literally just calls Patch.text.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,893,2019-03-25T23:04:07Z,2019-03-30T19:31:03Z,2019-03-30T19:31:03Z,MERGED,True,119,31,4,https://github.com/jnrbsn,Deprecate Patch.patch and add Patch.text and Patch.data,1,[],https://github.com/libgit2/pygit2/pull/893,https://github.com/pypingou,6,https://github.com/libgit2/pygit2/pull/893#issuecomment-477030301,"This is an attempt to finish up the work in PR #790 originally done by @erikvanzijst. Thanks to him for the initial work.
Patch.patch assumes all content to be encoded in UTF-8 and forcefully replaces any non-decodeable sequences. This can lead to corruption for content that either does not conform to any specific encoding altogether, or uses an encoding that is incompatible with, or ambiguous to UTF-8.
As discussed in #790, this change deprecates Patch.patch in favor of Patch.text and adds Patch.data, which returns the unmodified, raw bytes.","Oh, I see it now, sorry about that I had misread the diff initially :(",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,898,2019-04-10T14:35:28Z,2019-04-10T17:56:01Z,2019-04-10T17:56:01Z,MERGED,True,1,0,1,https://github.com/kinkerl,Keep the original filemode on write_archive function,1,[],https://github.com/libgit2/pygit2/pull/898,https://github.com/kinkerl,1,https://github.com/libgit2/pygit2/pull/898,"This is fixing #616
I assume this is the correct way of solving this issue and it worked flawlessly in my (limited) tests.","This is fixing #616
I assume this is the correct way of solving this issue and it worked flawlessly in my (limited) tests.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,903,2019-04-26T13:51:23Z,2019-06-26T07:45:34Z,2019-06-26T08:18:46Z,MERGED,True,351,33,7,https://github.com/rcoup,Improved support for navigating trees:,21,[],https://github.com/libgit2/pygit2/pull/903,https://github.com/rcoup,1,https://github.com/libgit2/pygit2/pull/903,"Navigating tree objects is pretty crude via Pygit2 at the moment, requiring a lot of boilerplate lookups.
This change incorporates the same / operator approach as Pathlib and GitPython:

my_tree / 'path' resolves to a TreeEntry (same as my_tree['path'] currently)
If a TreeEntry is of type tree, then:

my_tree_entry / 'path' resolves to a child TreeEntry
my_tree_entry['path'] and my_tree_entry[0] similarly
'path' in my_tree_entry returns a boolean.


this enables my_tree / 'path' / 'path' navigation

Ideally I'd suggest that maybe Tree should probably be a subclass of TreeEntry so it kinda magically works how the user expects, but that would require quite a few changes.","Navigating tree objects is pretty crude via Pygit2 at the moment, requiring a lot of boilerplate lookups.
This change incorporates the same / operator approach as Pathlib and GitPython:

my_tree / 'path' resolves to a TreeEntry (same as my_tree['path'] currently)
If a TreeEntry is of type tree, then:

my_tree_entry / 'path' resolves to a child TreeEntry
my_tree_entry['path'] and my_tree_entry[0] similarly
'path' in my_tree_entry returns a boolean.


this enables my_tree / 'path' / 'path' navigation

Ideally I'd suggest that maybe Tree should probably be a subclass of TreeEntry so it kinda magically works how the user expects, but that would require quite a few changes.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,903,2019-04-26T13:51:23Z,2019-06-26T07:45:34Z,2019-06-26T08:18:46Z,MERGED,True,351,33,7,https://github.com/rcoup,Improved support for navigating trees:,21,[],https://github.com/libgit2/pygit2/pull/903,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/903#issuecomment-487259490,"Navigating tree objects is pretty crude via Pygit2 at the moment, requiring a lot of boilerplate lookups.
This change incorporates the same / operator approach as Pathlib and GitPython:

my_tree / 'path' resolves to a TreeEntry (same as my_tree['path'] currently)
If a TreeEntry is of type tree, then:

my_tree_entry / 'path' resolves to a child TreeEntry
my_tree_entry['path'] and my_tree_entry[0] similarly
'path' in my_tree_entry returns a boolean.


this enables my_tree / 'path' / 'path' navigation

Ideally I'd suggest that maybe Tree should probably be a subclass of TreeEntry so it kinda magically works how the user expects, but that would require quite a few changes.","Looks good! Could you fix the tests in Travis? Don't worry about AppVeyor, they're broken for a different reason.
And update the documentation please. Thanks!",True,{'THUMBS_UP': ['https://github.com/rcoup']}
libgit2/pygit2,https://github.com/libgit2/pygit2,903,2019-04-26T13:51:23Z,2019-06-26T07:45:34Z,2019-06-26T08:18:46Z,MERGED,True,351,33,7,https://github.com/rcoup,Improved support for navigating trees:,21,[],https://github.com/libgit2/pygit2/pull/903,https://github.com/rcoup,3,https://github.com/libgit2/pygit2/pull/903#issuecomment-487911807,"Navigating tree objects is pretty crude via Pygit2 at the moment, requiring a lot of boilerplate lookups.
This change incorporates the same / operator approach as Pathlib and GitPython:

my_tree / 'path' resolves to a TreeEntry (same as my_tree['path'] currently)
If a TreeEntry is of type tree, then:

my_tree_entry / 'path' resolves to a child TreeEntry
my_tree_entry['path'] and my_tree_entry[0] similarly
'path' in my_tree_entry returns a boolean.


this enables my_tree / 'path' / 'path' navigation

Ideally I'd suggest that maybe Tree should probably be a subclass of TreeEntry so it kinda magically works how the user expects, but that would require quite a few changes.","Been using this the last couple of days... it's much better to navigate the tree, but still a bit awkward to actually get to blobs.
Before:
meta_tree = repo[commit.tree['meta'].id]
features_tree = repo[meta_tree['features'].id]
info_blob = repo[features_tree['info.json'].id]
info = json.loads(info_blob.data)
Now:
feature_info = commit.tree / 'meta' / 'features' / 'info.json'
info = json.loads(repo[feature_info.id].data)
With latest commit incorporating .blob and .tree properties.
feature_info = commit.tree / 'meta' / 'features' / 'info.json'
info = json.loads(feature_info.blob.data)
Thoughts?
Submodules end up with a TreeEntry.type=commit, but I can't find a way to lookup the submodule from the oid, only from the absolute path (which we don't have in the TreeEntry, only the relative name) — so I've left that alone.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,903,2019-04-26T13:51:23Z,2019-06-26T07:45:34Z,2019-06-26T08:18:46Z,MERGED,True,351,33,7,https://github.com/rcoup,Improved support for navigating trees:,21,[],https://github.com/libgit2/pygit2/pull/903,https://github.com/rcoup,4,https://github.com/libgit2/pygit2/pull/903#issuecomment-487916351,"Navigating tree objects is pretty crude via Pygit2 at the moment, requiring a lot of boilerplate lookups.
This change incorporates the same / operator approach as Pathlib and GitPython:

my_tree / 'path' resolves to a TreeEntry (same as my_tree['path'] currently)
If a TreeEntry is of type tree, then:

my_tree_entry / 'path' resolves to a child TreeEntry
my_tree_entry['path'] and my_tree_entry[0] similarly
'path' in my_tree_entry returns a boolean.


this enables my_tree / 'path' / 'path' navigation

Ideally I'd suggest that maybe Tree should probably be a subclass of TreeEntry so it kinda magically works how the user expects, but that would require quite a few changes.","@jdavid can you give the ref-counting/free'ing a review?

I'm Incrementing the repo refcount when it's associated with a TreeEntry
and clearing it when the TreeEntry is dealloc'd.
AFAICT using the various wrap_ methods means the libgit2-alloc'd items will get cleaned up
I'm freeing the temporary git_tree subtrees I use in getitem/truediv",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,903,2019-04-26T13:51:23Z,2019-06-26T07:45:34Z,2019-06-26T08:18:46Z,MERGED,True,351,33,7,https://github.com/rcoup,Improved support for navigating trees:,21,[],https://github.com/libgit2/pygit2/pull/903,https://github.com/jdavid,5,https://github.com/libgit2/pygit2/pull/903#issuecomment-489306023,"Navigating tree objects is pretty crude via Pygit2 at the moment, requiring a lot of boilerplate lookups.
This change incorporates the same / operator approach as Pathlib and GitPython:

my_tree / 'path' resolves to a TreeEntry (same as my_tree['path'] currently)
If a TreeEntry is of type tree, then:

my_tree_entry / 'path' resolves to a child TreeEntry
my_tree_entry['path'] and my_tree_entry[0] similarly
'path' in my_tree_entry returns a boolean.


this enables my_tree / 'path' / 'path' navigation

Ideally I'd suggest that maybe Tree should probably be a subclass of TreeEntry so it kinda magically works how the user expects, but that would require quite a few changes.","Good work! The ref-counting/free'ing looks correct. Just made a couple of tiny comments.
About the user interface:

Would it be simpler for the user to have treeentry.obj instead of treentry.blob and treeentry.tree?
Why not to support treeentry / 0? That would make _getitem and _truediv to behave the same.

I think these changes would be nice for the user, and they would simplify a bit the code as well.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,903,2019-04-26T13:51:23Z,2019-06-26T07:45:34Z,2019-06-26T08:18:46Z,MERGED,True,351,33,7,https://github.com/rcoup,Improved support for navigating trees:,21,[],https://github.com/libgit2/pygit2/pull/903,https://github.com/dsully,6,https://github.com/libgit2/pygit2/pull/903#issuecomment-490261013,"Navigating tree objects is pretty crude via Pygit2 at the moment, requiring a lot of boilerplate lookups.
This change incorporates the same / operator approach as Pathlib and GitPython:

my_tree / 'path' resolves to a TreeEntry (same as my_tree['path'] currently)
If a TreeEntry is of type tree, then:

my_tree_entry / 'path' resolves to a child TreeEntry
my_tree_entry['path'] and my_tree_entry[0] similarly
'path' in my_tree_entry returns a boolean.


this enables my_tree / 'path' / 'path' navigation

Ideally I'd suggest that maybe Tree should probably be a subclass of TreeEntry so it kinda magically works how the user expects, but that would require quite a few changes.",These changes look fantastic!,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,903,2019-04-26T13:51:23Z,2019-06-26T07:45:34Z,2019-06-26T08:18:46Z,MERGED,True,351,33,7,https://github.com/rcoup,Improved support for navigating trees:,21,[],https://github.com/libgit2/pygit2/pull/903,https://github.com/rcoup,7,https://github.com/libgit2/pygit2/pull/903#issuecomment-490417779,"Navigating tree objects is pretty crude via Pygit2 at the moment, requiring a lot of boilerplate lookups.
This change incorporates the same / operator approach as Pathlib and GitPython:

my_tree / 'path' resolves to a TreeEntry (same as my_tree['path'] currently)
If a TreeEntry is of type tree, then:

my_tree_entry / 'path' resolves to a child TreeEntry
my_tree_entry['path'] and my_tree_entry[0] similarly
'path' in my_tree_entry returns a boolean.


this enables my_tree / 'path' / 'path' navigation

Ideally I'd suggest that maybe Tree should probably be a subclass of TreeEntry so it kinda magically works how the user expects, but that would require quite a few changes.","I considered both of these, I'll add my thoughts below. Happy to be challenged.

Would it be simpler for the user to have treeentry.obj instead of treentry.blob and treeentry.tree?

I like the elegance, but I can't think of an actual use-case for it? Seems like either I'd expect a blob or another tree for any particular case? ""Explicit is better than implicit"" and all.
Commits are another type possibility wrt submodules, but I've left that for someone else when they need it.

Why not to support treeentry / 0? That would make _getitem and _truediv to behave the same.

If I'm iterating through everything in a directory then I'd always use an iterator or for/getitem. I know it makes it simpler for the implementation, but can't see how it helps the user?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,903,2019-04-26T13:51:23Z,2019-06-26T07:45:34Z,2019-06-26T08:18:46Z,MERGED,True,351,33,7,https://github.com/rcoup,Improved support for navigating trees:,21,[],https://github.com/libgit2/pygit2/pull/903,https://github.com/jdavid,8,https://github.com/libgit2/pygit2/pull/903#issuecomment-491432682,"Navigating tree objects is pretty crude via Pygit2 at the moment, requiring a lot of boilerplate lookups.
This change incorporates the same / operator approach as Pathlib and GitPython:

my_tree / 'path' resolves to a TreeEntry (same as my_tree['path'] currently)
If a TreeEntry is of type tree, then:

my_tree_entry / 'path' resolves to a child TreeEntry
my_tree_entry['path'] and my_tree_entry[0] similarly
'path' in my_tree_entry returns a boolean.


this enables my_tree / 'path' / 'path' navigation

Ideally I'd suggest that maybe Tree should probably be a subclass of TreeEntry so it kinda magically works how the user expects, but that would require quite a few changes.","The fact that these two changes make the code simpler is a big advantage. It's difficult to stress it enough, 150+ developers have contributed changes to pygit2, and today I maintain those changes/code (and when I leave someone else will do).
On the other side, the fact that we cannot imagine a use case, doesn't mean it doesn't exist, and more importantly it doesn't hurt, it's a feature superset anyway.",True,{'THUMBS_UP': ['https://github.com/rcoup']}
libgit2/pygit2,https://github.com/libgit2/pygit2,903,2019-04-26T13:51:23Z,2019-06-26T07:45:34Z,2019-06-26T08:18:46Z,MERGED,True,351,33,7,https://github.com/rcoup,Improved support for navigating trees:,21,[],https://github.com/libgit2/pygit2/pull/903,https://github.com/rcoup,9,https://github.com/libgit2/pygit2/pull/903#issuecomment-499529454,"Navigating tree objects is pretty crude via Pygit2 at the moment, requiring a lot of boilerplate lookups.
This change incorporates the same / operator approach as Pathlib and GitPython:

my_tree / 'path' resolves to a TreeEntry (same as my_tree['path'] currently)
If a TreeEntry is of type tree, then:

my_tree_entry / 'path' resolves to a child TreeEntry
my_tree_entry['path'] and my_tree_entry[0] similarly
'path' in my_tree_entry returns a boolean.


this enables my_tree / 'path' / 'path' navigation

Ideally I'd suggest that maybe Tree should probably be a subclass of TreeEntry so it kinda magically works how the user expects, but that would require quite a few changes.","@jdavid sorry, been distracted with other work. I've made both the changes you suggested. 👍",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,903,2019-04-26T13:51:23Z,2019-06-26T07:45:34Z,2019-06-26T08:18:46Z,MERGED,True,351,33,7,https://github.com/rcoup,Improved support for navigating trees:,21,[],https://github.com/libgit2/pygit2/pull/903,https://github.com/rcoup,10,https://github.com/libgit2/pygit2/pull/903#issuecomment-500365797,"Navigating tree objects is pretty crude via Pygit2 at the moment, requiring a lot of boilerplate lookups.
This change incorporates the same / operator approach as Pathlib and GitPython:

my_tree / 'path' resolves to a TreeEntry (same as my_tree['path'] currently)
If a TreeEntry is of type tree, then:

my_tree_entry / 'path' resolves to a child TreeEntry
my_tree_entry['path'] and my_tree_entry[0] similarly
'path' in my_tree_entry returns a boolean.


this enables my_tree / 'path' / 'path' navigation

Ideally I'd suggest that maybe Tree should probably be a subclass of TreeEntry so it kinda magically works how the user expects, but that would require quite a few changes.",Rebased on latest master,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,903,2019-04-26T13:51:23Z,2019-06-26T07:45:34Z,2019-06-26T08:18:46Z,MERGED,True,351,33,7,https://github.com/rcoup,Improved support for navigating trees:,21,[],https://github.com/libgit2/pygit2/pull/903,https://github.com/rcoup,11,https://github.com/libgit2/pygit2/pull/903#issuecomment-500392191,"Navigating tree objects is pretty crude via Pygit2 at the moment, requiring a lot of boilerplate lookups.
This change incorporates the same / operator approach as Pathlib and GitPython:

my_tree / 'path' resolves to a TreeEntry (same as my_tree['path'] currently)
If a TreeEntry is of type tree, then:

my_tree_entry / 'path' resolves to a child TreeEntry
my_tree_entry['path'] and my_tree_entry[0] similarly
'path' in my_tree_entry returns a boolean.


this enables my_tree / 'path' / 'path' navigation

Ideally I'd suggest that maybe Tree should probably be a subclass of TreeEntry so it kinda magically works how the user expects, but that would require quite a few changes.","Don't worry about AppVeyor, they're broken for a different reason.

hmm, not so sure about that?
...
C:\Users\appveyor\AppData\Local\Programs\Common\Microsoft\Visual C++ for Python\9.0\VC\Bin\cl.exe /c /nologo /Ox /MD /W3 /GS- /DNDEBUG -IC:\projects\pygit2\venv\include -IC:\Python27\include -IC:\Python27\PC /Tcsrc\tree.c /Fobuild\temp.win32-2.7\Release\src\tree.obj
tree.c
src\tree.c(199) : error C2143: syntax error : missing ';' before 'type'
src\tree.c(200) : error C2065: 'err' : undeclared identifier
src\tree.c(201) : error C2065: 'err' : undeclared identifier
src\tree.c(208) : error C2143: syntax error : missing '{' before '*'
src\tree.c(220) : error C2143: syntax error : missing ';' before 'type'
src\tree.c(221) : error C2065: 'err' : undeclared identifier
src\tree.c(222) : error C2065: 'err' : undeclared identifier
src\tree.c(226) : warning C4133: 'return' : incompatible types - from 'PyObject *' to 'int *'
src\tree.c(240) : warning C4133: 'return' : incompatible types - from 'int *' to 'PyObject *'
src\tree.c(385) : warning C4028: formal parameter 1 different from declaration
src\tree.c(385) : warning C4133: 'initializing' : incompatible types - from 'TreeEntry *(__cdecl *)(TreeEntry *,PyObject *)' to 'binaryfunc'
src\tree.c(539) : warning C4090: 'function' : different 'const' qualifiers
src\tree.c(836) : warning C4028: formal parameter 1 different from declaration
src\tree.c(836) : warning C4133: 'initializing' : incompatible types - from 'TreeEntry *(__cdecl *)(Tree *,PyObject *)' to 'binaryfunc'
...",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,903,2019-04-26T13:51:23Z,2019-06-26T07:45:34Z,2019-06-26T08:18:46Z,MERGED,True,351,33,7,https://github.com/rcoup,Improved support for navigating trees:,21,[],https://github.com/libgit2/pygit2/pull/903,https://github.com/rcoup,12,https://github.com/libgit2/pygit2/pull/903#issuecomment-500610313,"Navigating tree objects is pretty crude via Pygit2 at the moment, requiring a lot of boilerplate lookups.
This change incorporates the same / operator approach as Pathlib and GitPython:

my_tree / 'path' resolves to a TreeEntry (same as my_tree['path'] currently)
If a TreeEntry is of type tree, then:

my_tree_entry / 'path' resolves to a child TreeEntry
my_tree_entry['path'] and my_tree_entry[0] similarly
'path' in my_tree_entry returns a boolean.


this enables my_tree / 'path' / 'path' navigation

Ideally I'd suggest that maybe Tree should probably be a subclass of TreeEntry so it kinda magically works how the user expects, but that would require quite a few changes.","@jdavid at least one of the Windows build configs passed now 👍 Current appveyor failure looks intermittent, can you trigger a rebuild?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,903,2019-04-26T13:51:23Z,2019-06-26T07:45:34Z,2019-06-26T08:18:46Z,MERGED,True,351,33,7,https://github.com/rcoup,Improved support for navigating trees:,21,[],https://github.com/libgit2/pygit2/pull/903,https://github.com/jdavid,13,https://github.com/libgit2/pygit2/pull/903#issuecomment-501794288,"Navigating tree objects is pretty crude via Pygit2 at the moment, requiring a lot of boilerplate lookups.
This change incorporates the same / operator approach as Pathlib and GitPython:

my_tree / 'path' resolves to a TreeEntry (same as my_tree['path'] currently)
If a TreeEntry is of type tree, then:

my_tree_entry / 'path' resolves to a child TreeEntry
my_tree_entry['path'] and my_tree_entry[0] similarly
'path' in my_tree_entry returns a boolean.


this enables my_tree / 'path' / 'path' navigation

Ideally I'd suggest that maybe Tree should probably be a subclass of TreeEntry so it kinda magically works how the user expects, but that would require quite a few changes.","Thanks!
Yes I fixed AppVeyor in master. I've re-run the incomplete jobs several times, but there're still failures.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,903,2019-04-26T13:51:23Z,2019-06-26T07:45:34Z,2019-06-26T08:18:46Z,MERGED,True,351,33,7,https://github.com/rcoup,Improved support for navigating trees:,21,[],https://github.com/libgit2/pygit2/pull/903,https://github.com/rcoup,14,https://github.com/libgit2/pygit2/pull/903#issuecomment-501891481,"Navigating tree objects is pretty crude via Pygit2 at the moment, requiring a lot of boilerplate lookups.
This change incorporates the same / operator approach as Pathlib and GitPython:

my_tree / 'path' resolves to a TreeEntry (same as my_tree['path'] currently)
If a TreeEntry is of type tree, then:

my_tree_entry / 'path' resolves to a child TreeEntry
my_tree_entry['path'] and my_tree_entry[0] similarly
'path' in my_tree_entry returns a boolean.


this enables my_tree / 'path' / 'path' navigation

Ideally I'd suggest that maybe Tree should probably be a subclass of TreeEntry so it kinda magically works how the user expects, but that would require quite a few changes.","@jdavid aha, there's an actual compile error there now. Will figure it out somehow :)",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,903,2019-04-26T13:51:23Z,2019-06-26T07:45:34Z,2019-06-26T08:18:46Z,MERGED,True,351,33,7,https://github.com/rcoup,Improved support for navigating trees:,21,[],https://github.com/libgit2/pygit2/pull/903,https://github.com/jdavid,15,https://github.com/libgit2/pygit2/pull/903#issuecomment-502446569,"Navigating tree objects is pretty crude via Pygit2 at the moment, requiring a lot of boilerplate lookups.
This change incorporates the same / operator approach as Pathlib and GitPython:

my_tree / 'path' resolves to a TreeEntry (same as my_tree['path'] currently)
If a TreeEntry is of type tree, then:

my_tree_entry / 'path' resolves to a child TreeEntry
my_tree_entry['path'] and my_tree_entry[0] similarly
'path' in my_tree_entry returns a boolean.


this enables my_tree / 'path' / 'path' navigation

Ideally I'd suggest that maybe Tree should probably be a subclass of TreeEntry so it kinda magically works how the user expects, but that would require quite a few changes.",fixed in commit f0f8cc2,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,903,2019-04-26T13:51:23Z,2019-06-26T07:45:34Z,2019-06-26T08:18:46Z,MERGED,True,351,33,7,https://github.com/rcoup,Improved support for navigating trees:,21,[],https://github.com/libgit2/pygit2/pull/903,https://github.com/rcoup,16,https://github.com/libgit2/pygit2/pull/903#issuecomment-505486511,"Navigating tree objects is pretty crude via Pygit2 at the moment, requiring a lot of boilerplate lookups.
This change incorporates the same / operator approach as Pathlib and GitPython:

my_tree / 'path' resolves to a TreeEntry (same as my_tree['path'] currently)
If a TreeEntry is of type tree, then:

my_tree_entry / 'path' resolves to a child TreeEntry
my_tree_entry['path'] and my_tree_entry[0] similarly
'path' in my_tree_entry returns a boolean.


this enables my_tree / 'path' / 'path' navigation

Ideally I'd suggest that maybe Tree should probably be a subclass of TreeEntry so it kinda magically works how the user expects, but that would require quite a few changes.",@jdavid pulled your changes into here. ✅,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,903,2019-04-26T13:51:23Z,2019-06-26T07:45:34Z,2019-06-26T08:18:46Z,MERGED,True,351,33,7,https://github.com/rcoup,Improved support for navigating trees:,21,[],https://github.com/libgit2/pygit2/pull/903,https://github.com/jdavid,17,https://github.com/libgit2/pygit2/pull/903#issuecomment-505762731,"Navigating tree objects is pretty crude via Pygit2 at the moment, requiring a lot of boilerplate lookups.
This change incorporates the same / operator approach as Pathlib and GitPython:

my_tree / 'path' resolves to a TreeEntry (same as my_tree['path'] currently)
If a TreeEntry is of type tree, then:

my_tree_entry / 'path' resolves to a child TreeEntry
my_tree_entry['path'] and my_tree_entry[0] similarly
'path' in my_tree_entry returns a boolean.


this enables my_tree / 'path' / 'path' navigation

Ideally I'd suggest that maybe Tree should probably be a subclass of TreeEntry so it kinda magically works how the user expects, but that would require quite a few changes.","Merged thanks!
I still want to give a 2nd look. Specifically this adds a reference to the repository from TreeEntry. I wonder whether it would be possible to implement the same feature without that reference, and in a way that is as friendly to the user. But have not yet stopped to think about it, I'll open an issue if I've some idea.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,903,2019-04-26T13:51:23Z,2019-06-26T07:45:34Z,2019-06-26T08:18:46Z,MERGED,True,351,33,7,https://github.com/rcoup,Improved support for navigating trees:,21,[],https://github.com/libgit2/pygit2/pull/903,https://github.com/rcoup,18,https://github.com/libgit2/pygit2/pull/903#issuecomment-505772130,"Navigating tree objects is pretty crude via Pygit2 at the moment, requiring a lot of boilerplate lookups.
This change incorporates the same / operator approach as Pathlib and GitPython:

my_tree / 'path' resolves to a TreeEntry (same as my_tree['path'] currently)
If a TreeEntry is of type tree, then:

my_tree_entry / 'path' resolves to a child TreeEntry
my_tree_entry['path'] and my_tree_entry[0] similarly
'path' in my_tree_entry returns a boolean.


this enables my_tree / 'path' / 'path' navigation

Ideally I'd suggest that maybe Tree should probably be a subclass of TreeEntry so it kinda magically works how the user expects, but that would require quite a few changes.","Thanks ❤️

this adds a reference to the repository from TreeEntry. I wonder whether it would be possible to implement the same feature without that reference

Yeah, needs the repo reference to be able to look up the associated objects, but is a small wart implementation-wise.
One alternative is to keep a reference to the parent/root tree, store one repository reference there, and access everything that way — but then TreeEntry's would need a parent reference instead: I decided the outcome wasn't much different, though it's arguably more elegant (I guess that would allow support for mytreeentry / "".."" / ""foo"" too).
Right at the start I mentioned that I think ideally Tree should be a subclass of TreeEntry so no matter where you start everything is the same, maybe that's something to change as well. Though right now at least they work effectively the same.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,908,2019-05-15T21:23:26Z,2019-12-22T11:18:44Z,2019-12-22T11:18:44Z,CLOSED,False,31,1,3,https://github.com/0xdky,Support for new option 'GIT_OPT_DISABLE_PACK_KEEP_FILE_CHECKS' to skip checking for '.keep' files,1,['libgit2'],https://github.com/libgit2/pygit2/pull/908,https://github.com/0xdky,1,https://github.com/libgit2/pygit2/pull/908,A new option 'GIT_OPT_DISABLE_PACK_KEEP_FILE_CHECKS' was added in libgit2 (master) to bypass checking for existence of '.keep'. This PR exposes the option via pygit2.,A new option 'GIT_OPT_DISABLE_PACK_KEEP_FILE_CHECKS' was added in libgit2 (master) to bypass checking for existence of '.keep'. This PR exposes the option via pygit2.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,908,2019-05-15T21:23:26Z,2019-12-22T11:18:44Z,2019-12-22T11:18:44Z,CLOSED,False,31,1,3,https://github.com/0xdky,Support for new option 'GIT_OPT_DISABLE_PACK_KEEP_FILE_CHECKS' to skip checking for '.keep' files,1,['libgit2'],https://github.com/libgit2/pygit2/pull/908,https://github.com/0xdky,2,https://github.com/libgit2/pygit2/pull/908#issuecomment-492856676,A new option 'GIT_OPT_DISABLE_PACK_KEEP_FILE_CHECKS' was added in libgit2 (master) to bypass checking for existence of '.keep'. This PR exposes the option via pygit2.,Have to wait till libgit2 makes a release,True,{'THUMBS_UP': ['https://github.com/jdavid']}
libgit2/pygit2,https://github.com/libgit2/pygit2,908,2019-05-15T21:23:26Z,2019-12-22T11:18:44Z,2019-12-22T11:18:44Z,CLOSED,False,31,1,3,https://github.com/0xdky,Support for new option 'GIT_OPT_DISABLE_PACK_KEEP_FILE_CHECKS' to skip checking for '.keep' files,1,['libgit2'],https://github.com/libgit2/pygit2/pull/908,https://github.com/jdavid,3,https://github.com/libgit2/pygit2/pull/908#issuecomment-568253107,A new option 'GIT_OPT_DISABLE_PACK_KEEP_FILE_CHECKS' was added in libgit2 (master) to bypass checking for existence of '.keep'. This PR exposes the option via pygit2.,"Superseded by commit 9b509cb
Thanks!",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,909,2019-05-19T19:51:33Z,2019-05-20T07:55:13Z,2019-05-20T07:55:13Z,MERGED,True,0,5,1,https://github.com/Deimos,Install docs: remove pycparser warning,1,[],https://github.com/libgit2/pygit2/pull/909,https://github.com/Deimos,1,https://github.com/libgit2/pygit2/pull/909,This was fixed by commit 01b69f3,This was fixed by commit 01b69f3,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,911,2019-05-23T23:45:09Z,2019-05-25T08:06:15Z,2019-05-25T08:06:15Z,MERGED,True,1,1,1,https://github.com/dbaxa,Download zlib over https.,1,[],https://github.com/libgit2/pygit2/pull/911,https://github.com/dbaxa,1,https://github.com/libgit2/pygit2/pull/911,Signed-off-by: David Black dblack@atlassian.com,Signed-off-by: David Black dblack@atlassian.com,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,911,2019-05-23T23:45:09Z,2019-05-25T08:06:15Z,2019-05-25T08:06:15Z,MERGED,True,1,1,1,https://github.com/dbaxa,Download zlib over https.,1,[],https://github.com/libgit2/pygit2/pull/911,https://github.com/dbaxa,2,https://github.com/libgit2/pygit2/pull/911#issuecomment-495423208,Signed-off-by: David Black dblack@atlassian.com,cc @webknjaz (re #875),True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,917,2019-06-12T21:33:26Z,2019-06-13T17:34:46Z,2019-06-13T17:34:47Z,MERGED,True,4,1,1,https://github.com/MarcelWaldvogel,Do not throw exception when Config.__init__() failed,1,[],https://github.com/libgit2/pygit2/pull/917,https://github.com/MarcelWaldvogel,1,https://github.com/libgit2/pygit2/pull/917,"Config.init() does not always set self._config, which can cause
trouble during del(). This avoids seemingly spurious and not
really helpful exceptions.
Fixes #916","Config.init() does not always set self._config, which can cause
trouble during del(). This avoids seemingly spurious and not
really helpful exceptions.
Fixes #916",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,919,2019-06-16T13:54:43Z,2019-06-16T17:52:37Z,2019-06-16T17:52:37Z,MERGED,True,1,2,1,https://github.com/MarcelWaldvogel,Removed duplicate element in initializer,1,[],https://github.com/libgit2/pygit2/pull/919,https://github.com/MarcelWaldvogel,1,https://github.com/libgit2/pygit2/pull/919,"C.GIT_EEXISTS was specified twice in the Set initializer, which was unnecessary and would lead to reader confusion.","C.GIT_EEXISTS was specified twice in the Set initializer, which was unnecessary and would lead to reader confusion.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,920,2019-06-25T15:12:47Z,2019-06-26T07:59:11Z,2019-06-26T08:19:21Z,MERGED,True,21,0,3,https://github.com/rcoup,Add `Index.remove_all()` method,1,[],https://github.com/libgit2/pygit2/pull/920,https://github.com/rcoup,1,https://github.com/libgit2/pygit2/pull/920,"Matches Index.add_all(), calls git_index_remove_all() underneath:
myindex.remove_all([""*.txt"", ""foo.bar""])","Matches Index.add_all(), calls git_index_remove_all() underneath:
myindex.remove_all([""*.txt"", ""foo.bar""])",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,921,2019-06-26T01:53:55Z,2019-06-26T07:53:19Z,2019-06-29T14:11:27Z,MERGED,True,1,1,1,https://github.com/chrahunt,Typo in Index.read docs.,1,[],https://github.com/libgit2/pygit2/pull/921,https://github.com/chrahunt,1,https://github.com/libgit2/pygit2/pull/921,,,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,923,2019-07-01T07:46:45Z,2019-07-03T08:46:44Z,2019-07-03T08:46:44Z,MERGED,True,124,1,3,https://github.com/rcoup,Add support for ref-ish and do-what-i-mean reference lookups,1,[],https://github.com/libgit2/pygit2/pull/923,https://github.com/rcoup,1,https://github.com/libgit2/pygit2/pull/923,"Fixes #922

Repository.lookup_reference_dwim('master') uses shorthand branch names, remote branches, tag names to find valid references
Repository.resolve_refish('master') additionally supports HEAD/HEAD~1/commit SHAs/etc, and returns a (commit, reference) pair.","Fixes #922

Repository.lookup_reference_dwim('master') uses shorthand branch names, remote branches, tag names to find valid references
Repository.resolve_refish('master') additionally supports HEAD/HEAD~1/commit SHAs/etc, and returns a (commit, reference) pair.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,934,2019-09-03T20:44:47Z,2019-09-03T20:51:14Z,2019-09-03T20:51:14Z,CLOSED,False,79,1,5,https://github.com/dsully,Add support for git_remote_ls(),1,[],https://github.com/libgit2/pygit2/pull/934,https://github.com/dsully,1,https://github.com/libgit2/pygit2/pull/934,Please let me know if you would like any changes.,Please let me know if you would like any changes.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,935,2019-09-03T20:55:30Z,2019-09-06T11:23:08Z,2019-09-06T11:23:08Z,MERGED,True,86,1,6,https://github.com/dsully,Add support for git_remote_ls(),4,[],https://github.com/libgit2/pygit2/pull/935,https://github.com/dsully,1,https://github.com/libgit2/pygit2/pull/935,Let me know if you need any changes here.,Let me know if you need any changes here.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,935,2019-09-03T20:55:30Z,2019-09-06T11:23:08Z,2019-09-06T11:23:08Z,MERGED,True,86,1,6,https://github.com/dsully,Add support for git_remote_ls(),4,[],https://github.com/libgit2/pygit2/pull/935,https://github.com/dsully,2,https://github.com/libgit2/pygit2/pull/935#issuecomment-527676143,Let me know if you need any changes here.,Doesn't look like the appveyor issues have anything to do with this change.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,940,2019-09-14T22:16:37Z,2019-09-15T18:33:16Z,2019-09-15T18:55:14Z,MERGED,True,522,165,9,https://github.com/ddevault,Introduce Odb type,1,[],https://github.com/libgit2/pygit2/pull/940,https://github.com/ddevault,1,https://github.com/libgit2/pygit2/pull/940,"Opening this now to start gathering feedback early, since I have little experience with Python's C API. The goal is to eventually support custom ODB backends written in Python. The steps to get here are roughly:

Add an Odb type and pull the odb out of Repository
Extend Odb with the rest of libgit2's odb API
Add a subclassable OdbBackend which maps to the C interface for custom backends

So far only step 1 is complete. step 1 and some of step 2 are completed.","Opening this now to start gathering feedback early, since I have little experience with Python's C API. The goal is to eventually support custom ODB backends written in Python. The steps to get here are roughly:

Add an Odb type and pull the odb out of Repository
Extend Odb with the rest of libgit2's odb API
Add a subclassable OdbBackend which maps to the C interface for custom backends

So far only step 1 is complete. step 1 and some of step 2 are completed.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,940,2019-09-14T22:16:37Z,2019-09-15T18:33:16Z,2019-09-15T18:55:14Z,MERGED,True,522,165,9,https://github.com/ddevault,Introduce Odb type,1,[],https://github.com/libgit2/pygit2/pull/940,https://github.com/ddevault,2,https://github.com/libgit2/pygit2/pull/940#issuecomment-531520420,"Opening this now to start gathering feedback early, since I have little experience with Python's C API. The goal is to eventually support custom ODB backends written in Python. The steps to get here are roughly:

Add an Odb type and pull the odb out of Repository
Extend Odb with the rest of libgit2's odb API
Add a subclassable OdbBackend which maps to the C interface for custom backends

So far only step 1 is complete. step 1 and some of step 2 are completed.",Not sure if that Windows failure is actually me.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,940,2019-09-14T22:16:37Z,2019-09-15T18:33:16Z,2019-09-15T18:55:14Z,MERGED,True,522,165,9,https://github.com/ddevault,Introduce Odb type,1,[],https://github.com/libgit2/pygit2/pull/940,https://github.com/jdavid,3,https://github.com/libgit2/pygit2/pull/940#issuecomment-531571182,"Opening this now to start gathering feedback early, since I have little experience with Python's C API. The goal is to eventually support custom ODB backends written in Python. The steps to get here are roughly:

Add an Odb type and pull the odb out of Repository
Extend Odb with the rest of libgit2's odb API
Add a subclassable OdbBackend which maps to the C interface for custom backends

So far only step 1 is complete. step 1 and some of step 2 are completed.","Looks good, good job!
Don't worry about the AppVeyor failure, it's broken for another reason.
Could you please just add unit tests for the new features introduced in commit cdc7710 ?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,940,2019-09-14T22:16:37Z,2019-09-15T18:33:16Z,2019-09-15T18:55:14Z,MERGED,True,522,165,9,https://github.com/ddevault,Introduce Odb type,1,[],https://github.com/libgit2/pygit2/pull/940,https://github.com/ddevault,4,https://github.com/libgit2/pygit2/pull/940#issuecomment-531577701,"Opening this now to start gathering feedback early, since I have little experience with Python's C API. The goal is to eventually support custom ODB backends written in Python. The steps to get here are roughly:

Add an Odb type and pull the odb out of Repository
Extend Odb with the rest of libgit2's odb API
Add a subclassable OdbBackend which maps to the C interface for custom backends

So far only step 1 is complete. step 1 and some of step 2 are completed.",Latest patch fixes indent and adds tests.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,940,2019-09-14T22:16:37Z,2019-09-15T18:33:16Z,2019-09-15T18:55:14Z,MERGED,True,522,165,9,https://github.com/ddevault,Introduce Odb type,1,[],https://github.com/libgit2/pygit2/pull/940,https://github.com/ddevault,5,https://github.com/libgit2/pygit2/pull/940#issuecomment-531590123,"Opening this now to start gathering feedback early, since I have little experience with Python's C API. The goal is to eventually support custom ODB backends written in Python. The steps to get here are roughly:

Add an Odb type and pull the odb out of Repository
Extend Odb with the rest of libgit2's odb API
Add a subclassable OdbBackend which maps to the C interface for custom backends

So far only step 1 is complete. step 1 and some of step 2 are completed.",Thanks!,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,942,2019-09-16T19:10:47Z,2019-10-12T08:16:42Z,2019-10-12T13:29:35Z,MERGED,True,520,16,6,https://github.com/ddevault,OdbBackend: initial groundwork,1,[],https://github.com/libgit2/pygit2/pull/942,https://github.com/ddevault,1,https://github.com/libgit2/pygit2/pull/942,"The rough plan is to make the OdbBackend type a fairly straightforward mirror of the odb_backend in libgit2. I'll then be adding LooseOdbBackend and PackOdbBackend, and MempackOdbBackend, which will inherit from OdbBackend and set the underlying odb_backend pointer, which should Just Werk based on the approach I have set out so far.
The more interesting case is that of user-created OdbBackend implementations. I'm not really sure what to do for this yet. The first inch of this work is done in the form of the read call raising NotImplementedException if the C implementation is NULL, then through some kind of magic I assume I'll be able to set these to function pointers for some kind of proxy into Python code with some kind of magic base class. Or something. ¯\_(ツ)_/¯","The rough plan is to make the OdbBackend type a fairly straightforward mirror of the odb_backend in libgit2. I'll then be adding LooseOdbBackend and PackOdbBackend, and MempackOdbBackend, which will inherit from OdbBackend and set the underlying odb_backend pointer, which should Just Werk based on the approach I have set out so far.
The more interesting case is that of user-created OdbBackend implementations. I'm not really sure what to do for this yet. The first inch of this work is done in the form of the read call raising NotImplementedException if the C implementation is NULL, then through some kind of magic I assume I'll be able to set these to function pointers for some kind of proxy into Python code with some kind of magic base class. Or something. ¯\_(ツ)_/¯",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,942,2019-09-16T19:10:47Z,2019-10-12T08:16:42Z,2019-10-12T13:29:35Z,MERGED,True,520,16,6,https://github.com/ddevault,OdbBackend: initial groundwork,1,[],https://github.com/libgit2/pygit2/pull/942,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/942#issuecomment-533620812,"The rough plan is to make the OdbBackend type a fairly straightforward mirror of the odb_backend in libgit2. I'll then be adding LooseOdbBackend and PackOdbBackend, and MempackOdbBackend, which will inherit from OdbBackend and set the underlying odb_backend pointer, which should Just Werk based on the approach I have set out so far.
The more interesting case is that of user-created OdbBackend implementations. I'm not really sure what to do for this yet. The first inch of this work is done in the form of the read call raising NotImplementedException if the C implementation is NULL, then through some kind of magic I assume I'll be able to set these to function pointers for some kind of proxy into Python code with some kind of magic base class. Or something. ¯\_(ツ)_/¯","looks good
just made a couple of small comments regarding error checking and handling",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,942,2019-09-16T19:10:47Z,2019-10-12T08:16:42Z,2019-10-12T13:29:35Z,MERGED,True,520,16,6,https://github.com/ddevault,OdbBackend: initial groundwork,1,[],https://github.com/libgit2/pygit2/pull/942,https://github.com/ddevault,3,https://github.com/libgit2/pygit2/pull/942#issuecomment-533625987,"The rough plan is to make the OdbBackend type a fairly straightforward mirror of the odb_backend in libgit2. I'll then be adding LooseOdbBackend and PackOdbBackend, and MempackOdbBackend, which will inherit from OdbBackend and set the underlying odb_backend pointer, which should Just Werk based on the approach I have set out so far.
The more interesting case is that of user-created OdbBackend implementations. I'm not really sure what to do for this yet. The first inch of this work is done in the form of the read call raising NotImplementedException if the C implementation is NULL, then through some kind of magic I assume I'll be able to set these to function pointers for some kind of proxy into Python code with some kind of magic base class. Or something. ¯\_(ツ)_/¯",I think the basics are in good shape here. I'm going to implement the rest of the backend interface next and then figure out how to make new backends in Python in a future pull request.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,942,2019-09-16T19:10:47Z,2019-10-12T08:16:42Z,2019-10-12T13:29:35Z,MERGED,True,520,16,6,https://github.com/ddevault,OdbBackend: initial groundwork,1,[],https://github.com/libgit2/pygit2/pull/942,https://github.com/jdavid,4,https://github.com/libgit2/pygit2/pull/942#issuecomment-539945090,"The rough plan is to make the OdbBackend type a fairly straightforward mirror of the odb_backend in libgit2. I'll then be adding LooseOdbBackend and PackOdbBackend, and MempackOdbBackend, which will inherit from OdbBackend and set the underlying odb_backend pointer, which should Just Werk based on the approach I have set out so far.
The more interesting case is that of user-created OdbBackend implementations. I'm not really sure what to do for this yet. The first inch of this work is done in the form of the read call raising NotImplementedException if the C implementation is NULL, then through some kind of magic I assume I'll be able to set these to function pointers for some kind of proxy into Python code with some kind of magic base class. Or something. ¯\_(ツ)_/¯","I've fixed the build errors in AppVeyor, now there're some test failures related to this work.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,942,2019-09-16T19:10:47Z,2019-10-12T08:16:42Z,2019-10-12T13:29:35Z,MERGED,True,520,16,6,https://github.com/ddevault,OdbBackend: initial groundwork,1,[],https://github.com/libgit2/pygit2/pull/942,https://github.com/ddevault,5,https://github.com/libgit2/pygit2/pull/942#issuecomment-541132197,"The rough plan is to make the OdbBackend type a fairly straightforward mirror of the odb_backend in libgit2. I'll then be adding LooseOdbBackend and PackOdbBackend, and MempackOdbBackend, which will inherit from OdbBackend and set the underlying odb_backend pointer, which should Just Werk based on the approach I have set out so far.
The more interesting case is that of user-created OdbBackend implementations. I'm not really sure what to do for this yet. The first inch of this work is done in the form of the read call raising NotImplementedException if the C implementation is NULL, then through some kind of magic I assume I'll be able to set these to function pointers for some kind of proxy into Python code with some kind of magic base class. Or something. ¯\_(ツ)_/¯","I've addressed the feedback and I think that this is mergable, except for the build failure. I looked into it and I don't really understand why it's occuring. By my reckoning, this should affect a lot of tests. Can you take a look and tell me what you think?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,942,2019-09-16T19:10:47Z,2019-10-12T08:16:42Z,2019-10-12T13:29:35Z,MERGED,True,520,16,6,https://github.com/ddevault,OdbBackend: initial groundwork,1,[],https://github.com/libgit2/pygit2/pull/942,https://github.com/jdavid,6,https://github.com/libgit2/pygit2/pull/942#issuecomment-541300835,"The rough plan is to make the OdbBackend type a fairly straightforward mirror of the odb_backend in libgit2. I'll then be adding LooseOdbBackend and PackOdbBackend, and MempackOdbBackend, which will inherit from OdbBackend and set the underlying odb_backend pointer, which should Just Werk based on the approach I have set out so far.
The more interesting case is that of user-created OdbBackend implementations. I'm not really sure what to do for this yet. The first inch of this work is done in the form of the read call raising NotImplementedException if the C implementation is NULL, then through some kind of magic I assume I'll be able to set these to function pointers for some kind of proxy into Python code with some kind of magic base class. Or something. ¯\_(ツ)_/¯","We've seen these errors before.
Looking for a little bit I've found commit 00dd78b which fixed 7 errors (6 of them were PermissionErrors): https://ci.appveyor.com/project/techtonik/pygit2/build/1.0.12/tests
Commit af983b9 is likely related as well.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,942,2019-09-16T19:10:47Z,2019-10-12T08:16:42Z,2019-10-12T13:29:35Z,MERGED,True,520,16,6,https://github.com/ddevault,OdbBackend: initial groundwork,1,[],https://github.com/libgit2/pygit2/pull/942,https://github.com/ddevault,7,https://github.com/libgit2/pygit2/pull/942#issuecomment-541325112,"The rough plan is to make the OdbBackend type a fairly straightforward mirror of the odb_backend in libgit2. I'll then be adding LooseOdbBackend and PackOdbBackend, and MempackOdbBackend, which will inherit from OdbBackend and set the underlying odb_backend pointer, which should Just Werk based on the approach I have set out so far.
The more interesting case is that of user-created OdbBackend implementations. I'm not really sure what to do for this yet. The first inch of this work is done in the form of the read call raising NotImplementedException if the C implementation is NULL, then through some kind of magic I assume I'll be able to set these to function pointers for some kind of proxy into Python code with some kind of magic base class. Or something. ¯\_(ツ)_/¯",Thanks!,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,946,2019-09-27T05:20:30Z,2019-09-27T07:45:38Z,2019-09-27T07:45:38Z,MERGED,True,3,3,1,https://github.com/saulpw,Fix documentation typos.,1,[],https://github.com/libgit2/pygit2/pull/946,https://github.com/saulpw,1,https://github.com/libgit2/pygit2/pull/946,,,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,948,2019-10-16T17:21:35Z,2019-12-21T13:16:55Z,2019-12-22T11:45:40Z,MERGED,True,724,39,7,https://github.com/ddevault,[WIP] OdbBackend: Python subclassing,9,[],https://github.com/libgit2/pygit2/pull/948,https://github.com/ddevault,1,https://github.com/libgit2/pygit2/pull/948,"The basic approach here is to have backends created from C (loose, pack) circumvent the OdbBackend_init function. However, backends created from Python will not. We then use this backend to pull out the functions implemented in Python and rig them up through shim functions to the libgit2 git_odb_backend.
TODO:

 read
 read_prefix
 read_header
 write
 exists
 exists_prefix
 refresh
 foreach
 Unit tests

Separate patch?

 writestream
 readstream
 freshen
 writepack
 Custom refdbs
 Create Repository with custom Odb and Refdb","The basic approach here is to have backends created from C (loose, pack) circumvent the OdbBackend_init function. However, backends created from Python will not. We then use this backend to pull out the functions implemented in Python and rig them up through shim functions to the libgit2 git_odb_backend.
TODO:

 read
 read_prefix
 read_header
 write
 exists
 exists_prefix
 refresh
 foreach
 Unit tests

Separate patch?

 writestream
 readstream
 freshen
 writepack
 Custom refdbs
 Create Repository with custom Odb and Refdb",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,948,2019-10-16T17:21:35Z,2019-12-21T13:16:55Z,2019-12-22T11:45:40Z,MERGED,True,724,39,7,https://github.com/ddevault,[WIP] OdbBackend: Python subclassing,9,[],https://github.com/libgit2/pygit2/pull/948,https://github.com/ddevault,2,https://github.com/libgit2/pygit2/pull/948#issuecomment-542817128,"The basic approach here is to have backends created from C (loose, pack) circumvent the OdbBackend_init function. However, backends created from Python will not. We then use this backend to pull out the functions implemented in Python and rig them up through shim functions to the libgit2 git_odb_backend.
TODO:

 read
 read_prefix
 read_header
 write
 exists
 exists_prefix
 refresh
 foreach
 Unit tests

Separate patch?

 writestream
 readstream
 freshen
 writepack
 Custom refdbs
 Create Repository with custom Odb and Refdb","All of the basics are here, would like some feedback on the approach. If this looks good, the remainder of the work is basically to repeat 52d7669 for each member of the git_odb_backend struct from libgit2.
I have a small script I've been using to ""test"" this:
from pygit2 import Odb, OdbBackend, OdbBackendPack

pack = OdbBackendPack("".git/objects"")

class FooBackend(OdbBackend):
    def __init__(self):
        super().__init__(self)

    def read(self, oid):
        print(""read called"")
        return pack.read(oid)

    def read_prefix(self, oid):
        print(""read_prefix called"")
        # TODO: do this properly
        typ, data = pack.read(oid)
        return oid, typ, data

    def read_header(self, oid):
        print(""read_header called"")
        # TODO: do this properly
        typ, data = pack.read(oid)
        return typ, len(data)

fbe = FooBackend()
odb = Odb()
odb.add_backend(fbe, 1)
print(odb.read(""209afad181e3f5f7b9f00088f2e9b6c63329a878""))
(This object ID can be found in pygit2). Proper unit tests will come prior to merge.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,948,2019-10-16T17:21:35Z,2019-12-21T13:16:55Z,2019-12-22T11:45:40Z,MERGED,True,724,39,7,https://github.com/ddevault,[WIP] OdbBackend: Python subclassing,9,[],https://github.com/libgit2/pygit2/pull/948,https://github.com/jdavid,3,https://github.com/libgit2/pygit2/pull/948#issuecomment-544249626,"The basic approach here is to have backends created from C (loose, pack) circumvent the OdbBackend_init function. However, backends created from Python will not. We then use this backend to pull out the functions implemented in Python and rig them up through shim functions to the libgit2 git_odb_backend.
TODO:

 read
 read_prefix
 read_header
 write
 exists
 exists_prefix
 refresh
 foreach
 Unit tests

Separate patch?

 writestream
 readstream
 freshen
 writepack
 Custom refdbs
 Create Repository with custom Odb and Refdb","It's a good start, but there're memory issues.
Maybe something like this?
struct pygit2_odb_backend
{
    git_odb_backend backend;
    void *payload;
};

typedef struct {
    PyObject_HEAD
    pygit2_odb_backend *odb_backend;
    PyObject *read_callable,
             *read_prefix_callable;
} OdbBackendUD;
(UD for User Defined)
So the C callbacks need a reference to the Python functions. Maybe libgit2's git_odb_backend should include a payload pointer, that's what is expressed above. Here payload would point to the OdbBackendUD instance, like in your code with py_odb_backend->self.
Note that we must Py_INCREF read_callable etc. and decref when deallocating. And free pygit2_odb_backend.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,948,2019-10-16T17:21:35Z,2019-12-21T13:16:55Z,2019-12-22T11:45:40Z,MERGED,True,724,39,7,https://github.com/ddevault,[WIP] OdbBackend: Python subclassing,9,[],https://github.com/libgit2/pygit2/pull/948,https://github.com/ddevault,4,https://github.com/libgit2/pygit2/pull/948#issuecomment-544715853,"The basic approach here is to have backends created from C (loose, pack) circumvent the OdbBackend_init function. However, backends created from Python will not. We then use this backend to pull out the functions implemented in Python and rig them up through shim functions to the libgit2 git_odb_backend.
TODO:

 read
 read_prefix
 read_header
 write
 exists
 exists_prefix
 refresh
 foreach
 Unit tests

Separate patch?

 writestream
 readstream
 freshen
 writepack
 Custom refdbs
 Create Repository with custom Odb and Refdb","I'm not sure I understand the advantage (or difference) to the approach you've described here.
Would the current approach work if I made sure to incref the callables?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,948,2019-10-16T17:21:35Z,2019-12-21T13:16:55Z,2019-12-22T11:45:40Z,MERGED,True,724,39,7,https://github.com/ddevault,[WIP] OdbBackend: Python subclassing,9,[],https://github.com/libgit2/pygit2/pull/948,https://github.com/jdavid,5,https://github.com/libgit2/pygit2/pull/948#issuecomment-546587635,"The basic approach here is to have backends created from C (loose, pack) circumvent the OdbBackend_init function. However, backends created from Python will not. We then use this backend to pull out the functions implemented in Python and rig them up through shim functions to the libgit2 git_odb_backend.
TODO:

 read
 read_prefix
 read_header
 write
 exists
 exists_prefix
 refresh
 foreach
 Unit tests

Separate patch?

 writestream
 readstream
 freshen
 writepack
 Custom refdbs
 Create Repository with custom Odb and Refdb","Most important is to handle memory correctly.
Otherwise the difference is small, it's about readability and maintenance:


Through the code we keep references to Python objects always in the type instance, so it
would be consistent to keep the same programming style.


From the name py_odb_backend I'd say it's a Python type (which it's not), since we use the py_ prefix through the code (in variable names) to tell apart Python objects.


Then the self argument tells me again that it's a Python type, and that self points to himself?


So I'm not asking to change the approach, only about improving readability. A comment describing how pygit2_odb_backend works would help as well, basically you're passing a pygit2_odb_backend pointer to libgit2 functions that expect a git_odb_backend pointer.

Finally, the way I've written void *payload is stating that this maybe should be part of
git_odb_backend. That's a question for libgit2 developers, @carlosmn ? @pks-t ? @ethomson ?
We need a pointer back to Python to find our callbacks written in Python, this should be
useful not only for pygit2 but for other bindings as well.
Or maybe I've misunderstood something, or there's another way. Do other bindings support
writing custom backends in their languages?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,948,2019-10-16T17:21:35Z,2019-12-21T13:16:55Z,2019-12-22T11:45:40Z,MERGED,True,724,39,7,https://github.com/ddevault,[WIP] OdbBackend: Python subclassing,9,[],https://github.com/libgit2/pygit2/pull/948,https://github.com/ethomson,6,https://github.com/libgit2/pygit2/pull/948#issuecomment-546605331,"The basic approach here is to have backends created from C (loose, pack) circumvent the OdbBackend_init function. However, backends created from Python will not. We then use this backend to pull out the functions implemented in Python and rig them up through shim functions to the libgit2 git_odb_backend.
TODO:

 read
 read_prefix
 read_header
 write
 exists
 exists_prefix
 refresh
 foreach
 Unit tests

Separate patch?

 writestream
 readstream
 freshen
 writepack
 Custom refdbs
 Create Repository with custom Odb and Refdb","👋  The custom backend types don’t add payloads since they’re extendable by the implementer. We’d encourage you to do what it looks like you recommended - with the git_odb_backend struct at the beginning of your own data struct.  Then you can pass that to libgit2, who will read only into our backend data struct, but we’ll pass it back to you and you can refer to your bits at the end.
I’m not sure which bindings implement custom backends but the .NET bindings do.  Others may?  Not something that I’ve surveyed.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,948,2019-10-16T17:21:35Z,2019-12-21T13:16:55Z,2019-12-22T11:45:40Z,MERGED,True,724,39,7,https://github.com/ddevault,[WIP] OdbBackend: Python subclassing,9,[],https://github.com/libgit2/pygit2/pull/948,https://github.com/ddevault,7,https://github.com/libgit2/pygit2/pull/948#issuecomment-546606595,"The basic approach here is to have backends created from C (loose, pack) circumvent the OdbBackend_init function. However, backends created from Python will not. We then use this backend to pull out the functions implemented in Python and rig them up through shim functions to the libgit2 git_odb_backend.
TODO:

 read
 read_prefix
 read_header
 write
 exists
 exists_prefix
 refresh
 foreach
 Unit tests

Separate patch?

 writestream
 readstream
 freshen
 writepack
 Custom refdbs
 Create Repository with custom Odb and Refdb","Regarding the use of an opaque pointer (e.g. void *payload), it seems libgit2 isn't designed for that. Like @ethomson stated, subtyping a struct is a common (but not universally understood) pattern in C which has a lot of advantages compared to opaque pointers. The approach I've used in this patch is based on that pattern.
Latest patchset includes the following changes:

Rename py_odb_backend to pygit2_odb_backend to disambiguate between it and Python objects
Add a comment in odb_backend.c explaining pygit2_odb_backend
Rename pygit2_odb_backend.self to OdbBackend, which is more accurate.

I think that this settles the design constraints, if we like it then I think the approach can be generalized to the rest of the git_odb_backend members, tests can be written, and this patch will be ready for merge.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,948,2019-10-16T17:21:35Z,2019-12-21T13:16:55Z,2019-12-22T11:45:40Z,MERGED,True,724,39,7,https://github.com/ddevault,[WIP] OdbBackend: Python subclassing,9,[],https://github.com/libgit2/pygit2/pull/948,https://github.com/jdavid,8,https://github.com/libgit2/pygit2/pull/948#issuecomment-546676969,"The basic approach here is to have backends created from C (loose, pack) circumvent the OdbBackend_init function. However, backends created from Python will not. We then use this backend to pull out the functions implemented in Python and rig them up through shim functions to the libgit2 git_odb_backend.
TODO:

 read
 read_prefix
 read_header
 write
 exists
 exists_prefix
 refresh
 foreach
 Unit tests

Separate patch?

 writestream
 readstream
 freshen
 writepack
 Custom refdbs
 Create Repository with custom Odb and Refdb","Okay thanks @ethomson and @ddevault
Only made a tiny comment, you can go ahead @ddevault",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,948,2019-10-16T17:21:35Z,2019-12-21T13:16:55Z,2019-12-22T11:45:40Z,MERGED,True,724,39,7,https://github.com/ddevault,[WIP] OdbBackend: Python subclassing,9,[],https://github.com/libgit2/pygit2/pull/948,https://github.com/ddevault,9,https://github.com/libgit2/pygit2/pull/948#issuecomment-546709397,"The basic approach here is to have backends created from C (loose, pack) circumvent the OdbBackend_init function. However, backends created from Python will not. We then use this backend to pull out the functions implemented in Python and rig them up through shim functions to the libgit2 git_odb_backend.
TODO:

 read
 read_prefix
 read_header
 write
 exists
 exists_prefix
 refresh
 foreach
 Unit tests

Separate patch?

 writestream
 readstream
 freshen
 writepack
 Custom refdbs
 Create Repository with custom Odb and Refdb",Cheers! I should have this finished up tomorrow.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,948,2019-10-16T17:21:35Z,2019-12-21T13:16:55Z,2019-12-22T11:45:40Z,MERGED,True,724,39,7,https://github.com/ddevault,[WIP] OdbBackend: Python subclassing,9,[],https://github.com/libgit2/pygit2/pull/948,https://github.com/ddevault,10,https://github.com/libgit2/pygit2/pull/948#issuecomment-547075645,"The basic approach here is to have backends created from C (loose, pack) circumvent the OdbBackend_init function. However, backends created from Python will not. We then use this backend to pull out the functions implemented in Python and rig them up through shim functions to the libgit2 git_odb_backend.
TODO:

 read
 read_prefix
 read_header
 write
 exists
 exists_prefix
 refresh
 foreach
 Unit tests

Separate patch?

 writestream
 readstream
 freshen
 writepack
 Custom refdbs
 Create Repository with custom Odb and Refdb","Actually, something else came up of a higher priority, I'm going to return to this in a few weeks at the latest.",True,{'THUMBS_UP': ['https://github.com/jdavid']}
libgit2/pygit2,https://github.com/libgit2/pygit2,948,2019-10-16T17:21:35Z,2019-12-21T13:16:55Z,2019-12-22T11:45:40Z,MERGED,True,724,39,7,https://github.com/ddevault,[WIP] OdbBackend: Python subclassing,9,[],https://github.com/libgit2/pygit2/pull/948,https://github.com/ddevault,11,https://github.com/libgit2/pygit2/pull/948#issuecomment-560117224,"The basic approach here is to have backends created from C (loose, pack) circumvent the OdbBackend_init function. However, backends created from Python will not. We then use this backend to pull out the functions implemented in Python and rig them up through shim functions to the libgit2 git_odb_backend.
TODO:

 read
 read_prefix
 read_header
 write
 exists
 exists_prefix
 refresh
 foreach
 Unit tests

Separate patch?

 writestream
 readstream
 freshen
 writepack
 Custom refdbs
 Create Repository with custom Odb and Refdb",Apologies for the wait - I'll be picking this up next week.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,948,2019-10-16T17:21:35Z,2019-12-21T13:16:55Z,2019-12-22T11:45:40Z,MERGED,True,724,39,7,https://github.com/ddevault,[WIP] OdbBackend: Python subclassing,9,[],https://github.com/libgit2/pygit2/pull/948,https://github.com/ddevault,12,https://github.com/libgit2/pygit2/pull/948#issuecomment-562682595,"The basic approach here is to have backends created from C (loose, pack) circumvent the OdbBackend_init function. However, backends created from Python will not. We then use this backend to pull out the functions implemented in Python and rig them up through shim functions to the libgit2 git_odb_backend.
TODO:

 read
 read_prefix
 read_header
 write
 exists
 exists_prefix
 refresh
 foreach
 Unit tests

Separate patch?

 writestream
 readstream
 freshen
 writepack
 Custom refdbs
 Create Repository with custom Odb and Refdb","Okay, this should be ready for review. I've trimmed down the scope to just supporting read-only backends, added tests, and cleaned things up.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,948,2019-10-16T17:21:35Z,2019-12-21T13:16:55Z,2019-12-22T11:45:40Z,MERGED,True,724,39,7,https://github.com/ddevault,[WIP] OdbBackend: Python subclassing,9,[],https://github.com/libgit2/pygit2/pull/948,https://github.com/ddevault,13,https://github.com/libgit2/pygit2/pull/948#issuecomment-562682794,"The basic approach here is to have backends created from C (loose, pack) circumvent the OdbBackend_init function. However, backends created from Python will not. We then use this backend to pull out the functions implemented in Python and rig them up through shim functions to the libgit2 git_odb_backend.
TODO:

 read
 read_prefix
 read_header
 write
 exists
 exists_prefix
 refresh
 foreach
 Unit tests

Separate patch?

 writestream
 readstream
 freshen
 writepack
 Custom refdbs
 Create Repository with custom Odb and Refdb","Next set of patches will add similar riggings for the refdb, and expanding both for read/write access separately.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,948,2019-10-16T17:21:35Z,2019-12-21T13:16:55Z,2019-12-22T11:45:40Z,MERGED,True,724,39,7,https://github.com/ddevault,[WIP] OdbBackend: Python subclassing,9,[],https://github.com/libgit2/pygit2/pull/948,https://github.com/jdavid,14,https://github.com/libgit2/pygit2/pull/948#issuecomment-562935772,"The basic approach here is to have backends created from C (loose, pack) circumvent the OdbBackend_init function. However, backends created from Python will not. We then use this backend to pull out the functions implemented in Python and rig them up through shim functions to the libgit2 git_odb_backend.
TODO:

 read
 read_prefix
 read_header
 write
 exists
 exists_prefix
 refresh
 foreach
 Unit tests

Separate patch?

 writestream
 readstream
 freshen
 writepack
 Custom refdbs
 Create Repository with custom Odb and Refdb","Looks good, but tests are failing in AppVeyor.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,948,2019-10-16T17:21:35Z,2019-12-21T13:16:55Z,2019-12-22T11:45:40Z,MERGED,True,724,39,7,https://github.com/ddevault,[WIP] OdbBackend: Python subclassing,9,[],https://github.com/libgit2/pygit2/pull/948,https://github.com/ddevault,15,https://github.com/libgit2/pygit2/pull/948#issuecomment-562956984,"The basic approach here is to have backends created from C (loose, pack) circumvent the OdbBackend_init function. However, backends created from Python will not. We then use this backend to pull out the functions implemented in Python and rig them up through shim functions to the libgit2 git_odb_backend.
TODO:

 read
 read_prefix
 read_header
 write
 exists
 exists_prefix
 refresh
 foreach
 Unit tests

Separate patch?

 writestream
 readstream
 freshen
 writepack
 Custom refdbs
 Create Repository with custom Odb and Refdb","Looks like some undecipherable Windows nonsense. I don't use or have any interest in supporting Windows, can someone who does take a look?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,948,2019-10-16T17:21:35Z,2019-12-21T13:16:55Z,2019-12-22T11:45:40Z,MERGED,True,724,39,7,https://github.com/ddevault,[WIP] OdbBackend: Python subclassing,9,[],https://github.com/libgit2/pygit2/pull/948,https://github.com/jdavid,16,https://github.com/libgit2/pygit2/pull/948#issuecomment-565817977,"The basic approach here is to have backends created from C (loose, pack) circumvent the OdbBackend_init function. However, backends created from Python will not. We then use this backend to pull out the functions implemented in Python and rig them up through shim functions to the libgit2 git_odb_backend.
TODO:

 read
 read_prefix
 read_header
 write
 exists
 exists_prefix
 refresh
 foreach
 Unit tests

Separate patch?

 writestream
 readstream
 freshen
 writepack
 Custom refdbs
 Create Repository with custom Odb and Refdb","The error happens in the call to free:
    /* XXX: This assumes the default libgit2 allocator is in use and will
     * probably segfault and/or destroy the universe otherwise */
    free(data);
See https://ci.appveyor.com/project/jdavid/pygit2/builds/29550154",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,948,2019-10-16T17:21:35Z,2019-12-21T13:16:55Z,2019-12-22T11:45:40Z,MERGED,True,724,39,7,https://github.com/ddevault,[WIP] OdbBackend: Python subclassing,9,[],https://github.com/libgit2/pygit2/pull/948,https://github.com/ethomson,17,https://github.com/libgit2/pygit2/pull/948#issuecomment-565818614,"The basic approach here is to have backends created from C (loose, pack) circumvent the OdbBackend_init function. However, backends created from Python will not. We then use this backend to pull out the functions implemented in Python and rig them up through shim functions to the libgit2 git_odb_backend.
TODO:

 read
 read_prefix
 read_header
 write
 exists
 exists_prefix
 refresh
 foreach
 Unit tests

Separate patch?

 writestream
 readstream
 freshen
 writepack
 Custom refdbs
 Create Repository with custom Odb and Refdb","That assumption is not guaranteed for a number of reasons:  allocators come in many flavors on Windows (debug builds get instrumented malloc/free, release builds do not, and these allocators use different pools and are not interoperable; this is true across library/consumer boundaries) and libgit2 has a pluggable allocator.

libgit2/libgit2#5005 should have introduced a function to help with this problem.
…
 On Dec 15, 2019, at 23:10, J. David Ibáñez ***@***.***> wrote:

 ﻿
 The error happens in the call to free:

     /* XXX: This assumes the default libgit2 allocator is in use and will
      * probably segfault and/or destroy the universe otherwise */
     free(data);
 See https://ci.appveyor.com/project/jdavid/pygit2/builds/29550154

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub, or unsubscribe.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,948,2019-10-16T17:21:35Z,2019-12-21T13:16:55Z,2019-12-22T11:45:40Z,MERGED,True,724,39,7,https://github.com/ddevault,[WIP] OdbBackend: Python subclassing,9,[],https://github.com/libgit2/pygit2/pull/948,https://github.com/ddevault,18,https://github.com/libgit2/pygit2/pull/948#issuecomment-567969055,"The basic approach here is to have backends created from C (loose, pack) circumvent the OdbBackend_init function. However, backends created from Python will not. We then use this backend to pull out the functions implemented in Python and rig them up through shim functions to the libgit2 git_odb_backend.
TODO:

 read
 read_prefix
 read_header
 write
 exists
 exists_prefix
 refresh
 foreach
 Unit tests

Separate patch?

 writestream
 readstream
 freshen
 writepack
 Custom refdbs
 Create Repository with custom Odb and Refdb","Updated to use the new libgit2 functions, will rebase & revisit when the next libgit2 release lands.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,948,2019-10-16T17:21:35Z,2019-12-21T13:16:55Z,2019-12-22T11:45:40Z,MERGED,True,724,39,7,https://github.com/ddevault,[WIP] OdbBackend: Python subclassing,9,[],https://github.com/libgit2/pygit2/pull/948,https://github.com/ddevault,19,https://github.com/libgit2/pygit2/pull/948#issuecomment-568182469,"The basic approach here is to have backends created from C (loose, pack) circumvent the OdbBackend_init function. However, backends created from Python will not. We then use this backend to pull out the functions implemented in Python and rig them up through shim functions to the libgit2 git_odb_backend.
TODO:

 read
 read_prefix
 read_header
 write
 exists
 exists_prefix
 refresh
 foreach
 Unit tests

Separate patch?

 writestream
 readstream
 freshen
 writepack
 Custom refdbs
 Create Repository with custom Odb and Refdb",Thanks! Happy holidays :),True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,948,2019-10-16T17:21:35Z,2019-12-21T13:16:55Z,2019-12-22T11:45:40Z,MERGED,True,724,39,7,https://github.com/ddevault,[WIP] OdbBackend: Python subclassing,9,[],https://github.com/libgit2/pygit2/pull/948,https://github.com/jdavid,20,https://github.com/libgit2/pygit2/pull/948#issuecomment-568254799,"The basic approach here is to have backends created from C (loose, pack) circumvent the OdbBackend_init function. However, backends created from Python will not. We then use this backend to pull out the functions implemented in Python and rig them up through shim functions to the libgit2 git_odb_backend.
TODO:

 read
 read_prefix
 read_header
 write
 exists
 exists_prefix
 refresh
 foreach
 Unit tests

Separate patch?

 writestream
 readstream
 freshen
 writepack
 Custom refdbs
 Create Repository with custom Odb and Refdb",you too!,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,950,2019-10-30T12:38:32Z,2019-11-02T10:41:03Z,2019-11-14T06:55:35Z,MERGED,True,1,2,1,https://github.com/saturnjct,Correct supported Python versions.,1,[],https://github.com/libgit2/pygit2/pull/950,https://github.com/saturnjct,1,https://github.com/libgit2/pygit2/pull/950,"Recent changes removed support for Python 2.7 and 3.4, as well as PyPy 2.7. Support was added for Python 3.8.","Recent changes removed support for Python 2.7 and 3.4, as well as PyPy 2.7. Support was added for Python 3.8.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,954,2019-11-19T01:09:57Z,2019-11-20T08:41:35Z,2019-11-20T08:41:35Z,MERGED,True,20,0,2,https://github.com/istephens,add raw_branch_name to pygit2.Branch,1,[],https://github.com/libgit2/pygit2/pull/954,https://github.com/istephens,1,https://github.com/libgit2/pygit2/pull/954,A small change to expose the branch_name as bytes on the Branch class.,A small change to expose the branch_name as bytes on the Branch class.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,958,2019-11-25T16:09:41Z,2019-11-30T09:18:18Z,2019-11-30T09:18:18Z,MERGED,True,32,21,4,https://github.com/herrerog,note: lazily get all information about notes.,1,[],https://github.com/libgit2/pygit2/pull/958,https://github.com/herrerog,1,https://github.com/libgit2/pygit2/pull/958,"Listing notes with below snippet of code could take a lot longer
than the equivalent git command: ""git notes list"".
import pygit2
repo = pygit2.Repository(""."")
for note in repo.notes():
       print(note.id, note.annotated_id)

To avoid this, lazily call git_note_read() only when more information
about the note is needed or when the note id is not provided.","Listing notes with below snippet of code could take a lot longer
than the equivalent git command: ""git notes list"".
import pygit2
repo = pygit2.Repository(""."")
for note in repo.notes():
       print(note.id, note.annotated_id)

To avoid this, lazily call git_note_read() only when more information
about the note is needed or when the note id is not provided.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,959,2019-11-28T01:12:35Z,2019-12-21T13:16:54Z,2019-12-21T13:16:54Z,MERGED,True,2,2,1,https://github.com/lberk,"Fix build, change git_attr_t to git_attr_value_t",1,['libgit2'],https://github.com/libgit2/pygit2/pull/959,https://github.com/lberk,1,https://github.com/libgit2/pygit2/pull/959,"When using libgit2 built from source, the build breaks due to a change
from git_attr_t to git_attr_value_t.  Update our headerfile
accordingly.","When using libgit2 built from source, the build breaks due to a change
from git_attr_t to git_attr_value_t.  Update our headerfile
accordingly.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,959,2019-11-28T01:12:35Z,2019-12-21T13:16:54Z,2019-12-21T13:16:54Z,MERGED,True,2,2,1,https://github.com/lberk,"Fix build, change git_attr_t to git_attr_value_t",1,['libgit2'],https://github.com/libgit2/pygit2/pull/959,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/959#issuecomment-559935163,"When using libgit2 built from source, the build breaks due to a change
from git_attr_t to git_attr_value_t.  Update our headerfile
accordingly.","Thanks, then we've to wait for the next release of libgit2, I believe it will be 0.99, hopefully it will not take long.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,960,2019-11-28T13:56:36Z,2019-12-22T09:19:57Z,2019-12-22T09:19:57Z,MERGED,True,27,0,3,https://github.com/herrerog,diff: add support for patchid.,1,['libgit2'],https://github.com/libgit2/pygit2/pull/960,https://github.com/herrerog,1,https://github.com/libgit2/pygit2/pull/960,"Add binding for git patchid as mentioned in issue #877
For the test to pass, it must be built against fb439c975 in libgit2 where support for patchid has been improved.","Add binding for git patchid as mentioned in issue #877
For the test to pass, it must be built against fb439c975 in libgit2 where support for patchid has been improved.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,960,2019-11-28T13:56:36Z,2019-12-22T09:19:57Z,2019-12-22T09:19:57Z,MERGED,True,27,0,3,https://github.com/herrerog,diff: add support for patchid.,1,['libgit2'],https://github.com/libgit2/pygit2/pull/960,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/960#issuecomment-559934578,"Add binding for git patchid as mentioned in issue #877
For the test to pass, it must be built against fb439c975 in libgit2 where support for patchid has been improved.","Thanks, then we've to wait for the next release of libgit2, I believe it will be 0.99, hopefully it will not take long.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,961,2019-11-29T13:24:11Z,2019-11-30T09:23:17Z,2019-12-02T09:03:20Z,MERGED,True,47,0,4,https://github.com/cjwatson,Add References.compress,1,[],https://github.com/libgit2/pygit2/pull/961,https://github.com/cjwatson,1,https://github.com/libgit2/pygit2/pull/961,"This exports the functionality of git_refdb_compress, which is the
equivalent of git pack-refs --all.  This is useful to improve
performance in some contexts on repositories with a large number of
refs.","This exports the functionality of git_refdb_compress, which is the
equivalent of git pack-refs --all.  This is useful to improve
performance in some contexts on repositories with a large number of
refs.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,977,2020-02-20T09:59:10Z,2020-02-20T10:07:37Z,2020-02-20T10:56:33Z,MERGED,True,3,3,1,https://github.com/rcoup,ci: Fix for post-build feature detection in wheels,1,[],https://github.com/libgit2/pygit2/pull/977,https://github.com/rcoup,1,https://github.com/libgit2/pygit2/pull/977,"CI tries to print the Pygit2 features the wheel was built with, but it's actually not doing that. Fix it to follow the obvious intention.","CI tries to print the Pygit2 features the wheel was built with, but it's actually not doing that. Fix it to follow the obvious intention.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,978,2020-02-20T16:09:24Z,2020-02-21T09:46:30Z,2020-02-21T09:52:38Z,MERGED,True,20,20,10,https://github.com/rcoup,Move _pygit2 to pygit2._pygit2,2,[],https://github.com/libgit2/pygit2/pull/978,https://github.com/rcoup,1,https://github.com/libgit2/pygit2/pull/978,"This resolve issues with binary top-level modules affecting delocate on macOS (which helps with macOS wheel creation). Specifically, matthew-brett/delocate#12 (comment)
Change is that it moves (eg) site-packages/_pygit2.cpython-37m-darwin.so to site-packages/pygit2/_pygit2.cpython-37m-darwin.so, meaning the _pygit2 internal api is available via import pygit2._pygit2 cf import _pygit2
The impact this has building macOS wheels:
(fyi delocate-listdeps shows the libraries and what depends on them indented)
Before:
$ delocate-listdeps -d dist/pygit2-1.0.3-cp37-cp37m-macosx_10_15_x86_64.whl
/Users/rcoup/code/pygit2/venv/lib/libgit2.0.99.0.dylib:
    _pygit2.cpython-37m-darwin.so
    pygit2/_libgit2.abi3.so
$ delocate-wheel dist/pygit2-1.0.3-cp37-cp37m-macosx_10_15_x86_64.whl
$ delocate-listdeps -d dist/pygit2-1.0.3-cp37-cp37m-macosx_10_15_x86_64.whl
/Users/rcoup/code/pygit2/venv/lib/libgit2.0.99.0.dylib:
    _pygit2.cpython-37m-darwin.so
@loader_path/.dylibs/libgit2.0.99.0.dylib:
    pygit2/_libgit2.abi3.so
$ zipinfo -1 dist/*.whl | grep -P ""\.dylib|\.so""
_pygit2.cpython-37m-darwin.so
pygit2/_libgit2.abi3.so
pygit2/.dylibs/libgit2.0.99.0.dylib

libgit2 gets bundled into the wheel but _pygit2.*.so is still referencing the $LIBGIT2 path (everything should be prefixed @loader_path/.dylibs/)
if you actually install this wheel with $LIBGIT2/lib/libgit2.dylib in position too (eg via: import pygit2; pygit2.config.Config()), then you get a segfault
cause of that seems to be that we end up loading libgit2 twice, once the copy baked into the wheel, and once from the original $LIBGIT2/lib location.

$ python
>>> import pygit2
>>> import os; os.getpid()

$ lsof -p 21632 | grep -P ""libgit2\..*\.dylib""
Python  21632 rcoup  txt    REG    1,4   1004300          8737655297 /Users/rcoup/code/pygit2/venv/lib/libgit2.0.99.0.dylib
Python  21632 rcoup  txt    REG    1,4   1004300          8737685087 /Users/rcoup/code/pygit2/venv/lib/python3.7/site-packages/pygit2/.dylibs/libgit2.0.99.0.dylib

By moving the _pygit2 module into the top-level python package, delocate correctly links it to the baked libgit2.
After:
$ delocate-listdeps -d dist/pygit2-1.0.3-cp37-cp37m-macosx_10_15_x86_64.whl
/Users/rcoup/code/pygit2/venv/lib/libgit2.0.99.0.dylib:
    pygit2/_pygit2.cpython-37m-darwin.so
    pygit2/_libgit2.abi3.so
$ delocate-wheel dist/pygit2-1.0.3-cp37-cp37m-macosx_10_15_x86_64.whl
$ delocate-listdeps -d dist/pygit2-1.0.3-cp37-cp37m-macosx_10_15_x86_64.whl
@loader_path/.dylibs/libgit2.0.99.0.dylib:
    pygit2/_pygit2.cpython-37m-darwin.so
    pygit2/_libgit2.abi3.so
$ zipinfo -1 dist/*.whl | grep -P ""\.dylib|\.so""
pygit2/_libgit2.abi3.so
pygit2/_pygit2.cpython-37m-darwin.so
pygit2/.dylibs/libgit2.0.99.0.dylib
Delocate could fix the issue, but the comments in that ticket imply there are additional concerns there, and I can't see any particular need for the internal _pygit2 to be a top-level package.","This resolve issues with binary top-level modules affecting delocate on macOS (which helps with macOS wheel creation). Specifically, matthew-brett/delocate#12 (comment)
Change is that it moves (eg) site-packages/_pygit2.cpython-37m-darwin.so to site-packages/pygit2/_pygit2.cpython-37m-darwin.so, meaning the _pygit2 internal api is available via import pygit2._pygit2 cf import _pygit2
The impact this has building macOS wheels:
(fyi delocate-listdeps shows the libraries and what depends on them indented)
Before:
$ delocate-listdeps -d dist/pygit2-1.0.3-cp37-cp37m-macosx_10_15_x86_64.whl
/Users/rcoup/code/pygit2/venv/lib/libgit2.0.99.0.dylib:
    _pygit2.cpython-37m-darwin.so
    pygit2/_libgit2.abi3.so
$ delocate-wheel dist/pygit2-1.0.3-cp37-cp37m-macosx_10_15_x86_64.whl
$ delocate-listdeps -d dist/pygit2-1.0.3-cp37-cp37m-macosx_10_15_x86_64.whl
/Users/rcoup/code/pygit2/venv/lib/libgit2.0.99.0.dylib:
    _pygit2.cpython-37m-darwin.so
@loader_path/.dylibs/libgit2.0.99.0.dylib:
    pygit2/_libgit2.abi3.so
$ zipinfo -1 dist/*.whl | grep -P ""\.dylib|\.so""
_pygit2.cpython-37m-darwin.so
pygit2/_libgit2.abi3.so
pygit2/.dylibs/libgit2.0.99.0.dylib

libgit2 gets bundled into the wheel but _pygit2.*.so is still referencing the $LIBGIT2 path (everything should be prefixed @loader_path/.dylibs/)
if you actually install this wheel with $LIBGIT2/lib/libgit2.dylib in position too (eg via: import pygit2; pygit2.config.Config()), then you get a segfault
cause of that seems to be that we end up loading libgit2 twice, once the copy baked into the wheel, and once from the original $LIBGIT2/lib location.

$ python
>>> import pygit2
>>> import os; os.getpid()

$ lsof -p 21632 | grep -P ""libgit2\..*\.dylib""
Python  21632 rcoup  txt    REG    1,4   1004300          8737655297 /Users/rcoup/code/pygit2/venv/lib/libgit2.0.99.0.dylib
Python  21632 rcoup  txt    REG    1,4   1004300          8737685087 /Users/rcoup/code/pygit2/venv/lib/python3.7/site-packages/pygit2/.dylibs/libgit2.0.99.0.dylib

By moving the _pygit2 module into the top-level python package, delocate correctly links it to the baked libgit2.
After:
$ delocate-listdeps -d dist/pygit2-1.0.3-cp37-cp37m-macosx_10_15_x86_64.whl
/Users/rcoup/code/pygit2/venv/lib/libgit2.0.99.0.dylib:
    pygit2/_pygit2.cpython-37m-darwin.so
    pygit2/_libgit2.abi3.so
$ delocate-wheel dist/pygit2-1.0.3-cp37-cp37m-macosx_10_15_x86_64.whl
$ delocate-listdeps -d dist/pygit2-1.0.3-cp37-cp37m-macosx_10_15_x86_64.whl
@loader_path/.dylibs/libgit2.0.99.0.dylib:
    pygit2/_pygit2.cpython-37m-darwin.so
    pygit2/_libgit2.abi3.so
$ zipinfo -1 dist/*.whl | grep -P ""\.dylib|\.so""
pygit2/_libgit2.abi3.so
pygit2/_pygit2.cpython-37m-darwin.so
pygit2/.dylibs/libgit2.0.99.0.dylib
Delocate could fix the issue, but the comments in that ticket imply there are additional concerns there, and I can't see any particular need for the internal _pygit2 to be a top-level package.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,978,2020-02-20T16:09:24Z,2020-02-21T09:46:30Z,2020-02-21T09:52:38Z,MERGED,True,20,20,10,https://github.com/rcoup,Move _pygit2 to pygit2._pygit2,2,[],https://github.com/libgit2/pygit2/pull/978,https://github.com/rcoup,2,https://github.com/libgit2/pygit2/pull/978#issuecomment-589165797,"This resolve issues with binary top-level modules affecting delocate on macOS (which helps with macOS wheel creation). Specifically, matthew-brett/delocate#12 (comment)
Change is that it moves (eg) site-packages/_pygit2.cpython-37m-darwin.so to site-packages/pygit2/_pygit2.cpython-37m-darwin.so, meaning the _pygit2 internal api is available via import pygit2._pygit2 cf import _pygit2
The impact this has building macOS wheels:
(fyi delocate-listdeps shows the libraries and what depends on them indented)
Before:
$ delocate-listdeps -d dist/pygit2-1.0.3-cp37-cp37m-macosx_10_15_x86_64.whl
/Users/rcoup/code/pygit2/venv/lib/libgit2.0.99.0.dylib:
    _pygit2.cpython-37m-darwin.so
    pygit2/_libgit2.abi3.so
$ delocate-wheel dist/pygit2-1.0.3-cp37-cp37m-macosx_10_15_x86_64.whl
$ delocate-listdeps -d dist/pygit2-1.0.3-cp37-cp37m-macosx_10_15_x86_64.whl
/Users/rcoup/code/pygit2/venv/lib/libgit2.0.99.0.dylib:
    _pygit2.cpython-37m-darwin.so
@loader_path/.dylibs/libgit2.0.99.0.dylib:
    pygit2/_libgit2.abi3.so
$ zipinfo -1 dist/*.whl | grep -P ""\.dylib|\.so""
_pygit2.cpython-37m-darwin.so
pygit2/_libgit2.abi3.so
pygit2/.dylibs/libgit2.0.99.0.dylib

libgit2 gets bundled into the wheel but _pygit2.*.so is still referencing the $LIBGIT2 path (everything should be prefixed @loader_path/.dylibs/)
if you actually install this wheel with $LIBGIT2/lib/libgit2.dylib in position too (eg via: import pygit2; pygit2.config.Config()), then you get a segfault
cause of that seems to be that we end up loading libgit2 twice, once the copy baked into the wheel, and once from the original $LIBGIT2/lib location.

$ python
>>> import pygit2
>>> import os; os.getpid()

$ lsof -p 21632 | grep -P ""libgit2\..*\.dylib""
Python  21632 rcoup  txt    REG    1,4   1004300          8737655297 /Users/rcoup/code/pygit2/venv/lib/libgit2.0.99.0.dylib
Python  21632 rcoup  txt    REG    1,4   1004300          8737685087 /Users/rcoup/code/pygit2/venv/lib/python3.7/site-packages/pygit2/.dylibs/libgit2.0.99.0.dylib

By moving the _pygit2 module into the top-level python package, delocate correctly links it to the baked libgit2.
After:
$ delocate-listdeps -d dist/pygit2-1.0.3-cp37-cp37m-macosx_10_15_x86_64.whl
/Users/rcoup/code/pygit2/venv/lib/libgit2.0.99.0.dylib:
    pygit2/_pygit2.cpython-37m-darwin.so
    pygit2/_libgit2.abi3.so
$ delocate-wheel dist/pygit2-1.0.3-cp37-cp37m-macosx_10_15_x86_64.whl
$ delocate-listdeps -d dist/pygit2-1.0.3-cp37-cp37m-macosx_10_15_x86_64.whl
@loader_path/.dylibs/libgit2.0.99.0.dylib:
    pygit2/_pygit2.cpython-37m-darwin.so
    pygit2/_libgit2.abi3.so
$ zipinfo -1 dist/*.whl | grep -P ""\.dylib|\.so""
pygit2/_libgit2.abi3.so
pygit2/_pygit2.cpython-37m-darwin.so
pygit2/.dylibs/libgit2.0.99.0.dylib
Delocate could fix the issue, but the comments in that ticket imply there are additional concerns there, and I can't see any particular need for the internal _pygit2 to be a top-level package.",Looks like windows builds need some setup.py tweaking to match,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,978,2020-02-20T16:09:24Z,2020-02-21T09:46:30Z,2020-02-21T09:52:38Z,MERGED,True,20,20,10,https://github.com/rcoup,Move _pygit2 to pygit2._pygit2,2,[],https://github.com/libgit2/pygit2/pull/978,https://github.com/jdavid,3,https://github.com/libgit2/pygit2/pull/978#issuecomment-589558186,"This resolve issues with binary top-level modules affecting delocate on macOS (which helps with macOS wheel creation). Specifically, matthew-brett/delocate#12 (comment)
Change is that it moves (eg) site-packages/_pygit2.cpython-37m-darwin.so to site-packages/pygit2/_pygit2.cpython-37m-darwin.so, meaning the _pygit2 internal api is available via import pygit2._pygit2 cf import _pygit2
The impact this has building macOS wheels:
(fyi delocate-listdeps shows the libraries and what depends on them indented)
Before:
$ delocate-listdeps -d dist/pygit2-1.0.3-cp37-cp37m-macosx_10_15_x86_64.whl
/Users/rcoup/code/pygit2/venv/lib/libgit2.0.99.0.dylib:
    _pygit2.cpython-37m-darwin.so
    pygit2/_libgit2.abi3.so
$ delocate-wheel dist/pygit2-1.0.3-cp37-cp37m-macosx_10_15_x86_64.whl
$ delocate-listdeps -d dist/pygit2-1.0.3-cp37-cp37m-macosx_10_15_x86_64.whl
/Users/rcoup/code/pygit2/venv/lib/libgit2.0.99.0.dylib:
    _pygit2.cpython-37m-darwin.so
@loader_path/.dylibs/libgit2.0.99.0.dylib:
    pygit2/_libgit2.abi3.so
$ zipinfo -1 dist/*.whl | grep -P ""\.dylib|\.so""
_pygit2.cpython-37m-darwin.so
pygit2/_libgit2.abi3.so
pygit2/.dylibs/libgit2.0.99.0.dylib

libgit2 gets bundled into the wheel but _pygit2.*.so is still referencing the $LIBGIT2 path (everything should be prefixed @loader_path/.dylibs/)
if you actually install this wheel with $LIBGIT2/lib/libgit2.dylib in position too (eg via: import pygit2; pygit2.config.Config()), then you get a segfault
cause of that seems to be that we end up loading libgit2 twice, once the copy baked into the wheel, and once from the original $LIBGIT2/lib location.

$ python
>>> import pygit2
>>> import os; os.getpid()

$ lsof -p 21632 | grep -P ""libgit2\..*\.dylib""
Python  21632 rcoup  txt    REG    1,4   1004300          8737655297 /Users/rcoup/code/pygit2/venv/lib/libgit2.0.99.0.dylib
Python  21632 rcoup  txt    REG    1,4   1004300          8737685087 /Users/rcoup/code/pygit2/venv/lib/python3.7/site-packages/pygit2/.dylibs/libgit2.0.99.0.dylib

By moving the _pygit2 module into the top-level python package, delocate correctly links it to the baked libgit2.
After:
$ delocate-listdeps -d dist/pygit2-1.0.3-cp37-cp37m-macosx_10_15_x86_64.whl
/Users/rcoup/code/pygit2/venv/lib/libgit2.0.99.0.dylib:
    pygit2/_pygit2.cpython-37m-darwin.so
    pygit2/_libgit2.abi3.so
$ delocate-wheel dist/pygit2-1.0.3-cp37-cp37m-macosx_10_15_x86_64.whl
$ delocate-listdeps -d dist/pygit2-1.0.3-cp37-cp37m-macosx_10_15_x86_64.whl
@loader_path/.dylibs/libgit2.0.99.0.dylib:
    pygit2/_pygit2.cpython-37m-darwin.so
    pygit2/_libgit2.abi3.so
$ zipinfo -1 dist/*.whl | grep -P ""\.dylib|\.so""
pygit2/_libgit2.abi3.so
pygit2/_pygit2.cpython-37m-darwin.so
pygit2/.dylibs/libgit2.0.99.0.dylib
Delocate could fix the issue, but the comments in that ticket imply there are additional concerns there, and I can't see any particular need for the internal _pygit2 to be a top-level package.","LGTM, but AppVeyor must be green to merge.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,982,2020-02-28T16:43:26Z,2020-04-02T09:56:30Z,2020-04-03T07:42:33Z,MERGED,True,1965,113,20,https://github.com/ddevault,Introduce Refdb type,14,[],https://github.com/libgit2/pygit2/pull/982,https://github.com/ddevault,1,https://github.com/libgit2/pygit2/pull/982,"TODO:

 Wrap git_refdb in Refdb type
 Add Reference constructor(s)
 Create RefdbBackend
 Create repositories with custom refdb/odb
 Create Refdb from scratch
 Tests
 Update docs/backends.rst

Future work:

Iterating over a refdb_backend from Python
First-class reflog support
Transactional refdb updates","TODO:

 Wrap git_refdb in Refdb type
 Add Reference constructor(s)
 Create RefdbBackend
 Create repositories with custom refdb/odb
 Create Refdb from scratch
 Tests
 Update docs/backends.rst

Future work:

Iterating over a refdb_backend from Python
First-class reflog support
Transactional refdb updates",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,982,2020-02-28T16:43:26Z,2020-04-02T09:56:30Z,2020-04-03T07:42:33Z,MERGED,True,1965,113,20,https://github.com/ddevault,Introduce Refdb type,14,[],https://github.com/libgit2/pygit2/pull/982,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/982#issuecomment-596067181,"TODO:

 Wrap git_refdb in Refdb type
 Add Reference constructor(s)
 Create RefdbBackend
 Create repositories with custom refdb/odb
 Create Refdb from scratch
 Tests
 Update docs/backends.rst

Future work:

Iterating over a refdb_backend from Python
First-class reflog support
Transactional refdb updates","Looking at the API level.
I see there're a number of ways to get a backend:
refdb = repo.refdb       # wraps git_repository_refdb
refdb = Refdb(repo)      # wraps git_refdb_new
refdb = Refdb.open(repo) # wraps git_refdb_open
For consistency and to be explicit please change Refdb(repo) to Refdb.new(repo)",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,982,2020-02-28T16:43:26Z,2020-04-02T09:56:30Z,2020-04-03T07:42:33Z,MERGED,True,1965,113,20,https://github.com/ddevault,Introduce Refdb type,14,[],https://github.com/libgit2/pygit2/pull/982,https://github.com/ddevault,3,https://github.com/libgit2/pygit2/pull/982#issuecomment-596599358,"TODO:

 Wrap git_refdb in Refdb type
 Add Reference constructor(s)
 Create RefdbBackend
 Create repositories with custom refdb/odb
 Create Refdb from scratch
 Tests
 Update docs/backends.rst

Future work:

Iterating over a refdb_backend from Python
First-class reflog support
Transactional refdb updates","For consistency and to be explicit please change Refdb(repo) to Refdb.new(repo)

Done.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,982,2020-02-28T16:43:26Z,2020-04-02T09:56:30Z,2020-04-03T07:42:33Z,MERGED,True,1965,113,20,https://github.com/ddevault,Introduce Refdb type,14,[],https://github.com/libgit2/pygit2/pull/982,https://github.com/ddevault,4,https://github.com/libgit2/pygit2/pull/982#issuecomment-596712733,"TODO:

 Wrap git_refdb in Refdb type
 Add Reference constructor(s)
 Create RefdbBackend
 Create repositories with custom refdb/odb
 Create Refdb from scratch
 Tests
 Update docs/backends.rst

Future work:

Iterating over a refdb_backend from Python
First-class reflog support
Transactional refdb updates","Related libgit2 bug:
libgit2/libgit2#5449
This prevents us from being able to create a RefdbFsBackend and use it to create a Refdb from scratch. Other than that, the functionality of this patch is complete. I'll add tests in a day or two.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,982,2020-02-28T16:43:26Z,2020-04-02T09:56:30Z,2020-04-03T07:42:33Z,MERGED,True,1965,113,20,https://github.com/ddevault,Introduce Refdb type,14,[],https://github.com/libgit2/pygit2/pull/982,https://github.com/ddevault,5,https://github.com/libgit2/pygit2/pull/982#issuecomment-600119392,"TODO:

 Wrap git_refdb in Refdb type
 Add Reference constructor(s)
 Create RefdbBackend
 Create repositories with custom refdb/odb
 Create Refdb from scratch
 Tests
 Update docs/backends.rst

Future work:

Iterating over a refdb_backend from Python
First-class reflog support
Transactional refdb updates",Addressed comments on odb fixes. Still need to write tests and verify that everything works. I ran into some issues in a shallow test the other day.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,982,2020-02-28T16:43:26Z,2020-04-02T09:56:30Z,2020-04-03T07:42:33Z,MERGED,True,1965,113,20,https://github.com/ddevault,Introduce Refdb type,14,[],https://github.com/libgit2/pygit2/pull/982,https://github.com/ddevault,6,https://github.com/libgit2/pygit2/pull/982#issuecomment-600121974,"TODO:

 Wrap git_refdb in Refdb type
 Add Reference constructor(s)
 Create RefdbBackend
 Create repositories with custom refdb/odb
 Create Refdb from scratch
 Tests
 Update docs/backends.rst

Future work:

Iterating over a refdb_backend from Python
First-class reflog support
Transactional refdb updates","Note: Windows CI is failing due to lack of fnmatch support, which I used to implement globbing.
Options:

Drop in musl libc's implementation, ~300 LoC, MIT licensed
Add a code path for Windows which doesn't support globbing
Implement globbing some other way",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,982,2020-02-28T16:43:26Z,2020-04-02T09:56:30Z,2020-04-03T07:42:33Z,MERGED,True,1965,113,20,https://github.com/ddevault,Introduce Refdb type,14,[],https://github.com/libgit2/pygit2/pull/982,https://github.com/ddevault,7,https://github.com/libgit2/pygit2/pull/982#issuecomment-601388797,"TODO:

 Wrap git_refdb in Refdb type
 Add Reference constructor(s)
 Create RefdbBackend
 Create repositories with custom refdb/odb
 Create Refdb from scratch
 Tests
 Update docs/backends.rst

Future work:

Iterating over a refdb_backend from Python
First-class reflog support
Transactional refdb updates","✓ Tests
Code-wise, this should be ready for review. The question of what to do about fnmatch on Windows remains, and I need to write up some docs and rebase everything.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,982,2020-02-28T16:43:26Z,2020-04-02T09:56:30Z,2020-04-03T07:42:33Z,MERGED,True,1965,113,20,https://github.com/ddevault,Introduce Refdb type,14,[],https://github.com/libgit2/pygit2/pull/982,https://github.com/ddevault,8,https://github.com/libgit2/pygit2/pull/982#issuecomment-601393248,"TODO:

 Wrap git_refdb in Refdb type
 Add Reference constructor(s)
 Create RefdbBackend
 Create repositories with custom refdb/odb
 Create Refdb from scratch
 Tests
 Update docs/backends.rst

Future work:

Iterating over a refdb_backend from Python
First-class reflog support
Transactional refdb updates","Oh, note that this requires the following libgit2 change before it'll work: libgit2/libgit2#5456",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,982,2020-02-28T16:43:26Z,2020-04-02T09:56:30Z,2020-04-03T07:42:33Z,MERGED,True,1965,113,20,https://github.com/ddevault,Introduce Refdb type,14,[],https://github.com/libgit2/pygit2/pull/982,https://github.com/jdavid,9,https://github.com/libgit2/pygit2/pull/982#issuecomment-602011054,"TODO:

 Wrap git_refdb in Refdb type
 Add Reference constructor(s)
 Create RefdbBackend
 Create repositories with custom refdb/odb
 Create Refdb from scratch
 Tests
 Update docs/backends.rst

Future work:

Iterating over a refdb_backend from Python
First-class reflog support
Transactional refdb updates","Regarding fnmatch does libgit2 provide an implementation for this? Apparently they did, but replaced it by wildmatch, see libgit2/libgit2#5110 So I think we should use the same as libgit2.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,982,2020-02-28T16:43:26Z,2020-04-02T09:56:30Z,2020-04-03T07:42:33Z,MERGED,True,1965,113,20,https://github.com/ddevault,Introduce Refdb type,14,[],https://github.com/libgit2/pygit2/pull/982,https://github.com/ddevault,10,https://github.com/libgit2/pygit2/pull/982#issuecomment-602047901,"TODO:

 Wrap git_refdb in Refdb type
 Add Reference constructor(s)
 Create RefdbBackend
 Create repositories with custom refdb/odb
 Create Refdb from scratch
 Tests
 Update docs/backends.rst

Future work:

Iterating over a refdb_backend from Python
First-class reflog support
Transactional refdb updates","libgit2/libgit2#5458
I'll just vendor it in the meanwhile (on Monday).",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,982,2020-02-28T16:43:26Z,2020-04-02T09:56:30Z,2020-04-03T07:42:33Z,MERGED,True,1965,113,20,https://github.com/ddevault,Introduce Refdb type,14,[],https://github.com/libgit2/pygit2/pull/982,https://github.com/ddevault,11,https://github.com/libgit2/pygit2/pull/982#issuecomment-602708211,"TODO:

 Wrap git_refdb in Refdb type
 Add Reference constructor(s)
 Create RefdbBackend
 Create repositories with custom refdb/odb
 Create Refdb from scratch
 Tests
 Update docs/backends.rst

Future work:

Iterating over a refdb_backend from Python
First-class reflog support
Transactional refdb updates","✓ fnmatch -> wildmatch
✓ Questions answered from libgit2 about the semantics of refdb_backend.write
Still needs docs but otherwise I think this is good to go.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,982,2020-02-28T16:43:26Z,2020-04-02T09:56:30Z,2020-04-03T07:42:33Z,MERGED,True,1965,113,20,https://github.com/ddevault,Introduce Refdb type,14,[],https://github.com/libgit2/pygit2/pull/982,https://github.com/jdavid,12,https://github.com/libgit2/pygit2/pull/982#issuecomment-603124732,"TODO:

 Wrap git_refdb in Refdb type
 Add Reference constructor(s)
 Create RefdbBackend
 Create repositories with custom refdb/odb
 Create Refdb from scratch
 Tests
 Update docs/backends.rst

Future work:

Iterating over a refdb_backend from Python
First-class reflog support
Transactional refdb updates","The test failures are because of libgit2/libgit2#5456 ?
I see this has been merged to master but not to maint/v0.99, then please update the CI files to use master, so the tests pass.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,982,2020-02-28T16:43:26Z,2020-04-02T09:56:30Z,2020-04-03T07:42:33Z,MERGED,True,1965,113,20,https://github.com/ddevault,Introduce Refdb type,14,[],https://github.com/libgit2/pygit2/pull/982,https://github.com/ddevault,13,https://github.com/libgit2/pygit2/pull/982#issuecomment-603389327,"TODO:

 Wrap git_refdb in Refdb type
 Add Reference constructor(s)
 Create RefdbBackend
 Create repositories with custom refdb/odb
 Create Refdb from scratch
 Tests
 Update docs/backends.rst

Future work:

Iterating over a refdb_backend from Python
First-class reflog support
Transactional refdb updates",Got all of the CI pointing at libgit2 master and the tests are passing.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,982,2020-02-28T16:43:26Z,2020-04-02T09:56:30Z,2020-04-03T07:42:33Z,MERGED,True,1965,113,20,https://github.com/ddevault,Introduce Refdb type,14,[],https://github.com/libgit2/pygit2/pull/982,https://github.com/ddevault,14,https://github.com/libgit2/pygit2/pull/982#issuecomment-603837787,"TODO:

 Wrap git_refdb in Refdb type
 Add Reference constructor(s)
 Create RefdbBackend
 Create repositories with custom refdb/odb
 Create Refdb from scratch
 Tests
 Update docs/backends.rst

Future work:

Iterating over a refdb_backend from Python
First-class reflog support
Transactional refdb updates",I have rigged up the documentation as well.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,982,2020-02-28T16:43:26Z,2020-04-02T09:56:30Z,2020-04-03T07:42:33Z,MERGED,True,1965,113,20,https://github.com/ddevault,Introduce Refdb type,14,[],https://github.com/libgit2/pygit2/pull/982,https://github.com/jdavid,15,https://github.com/libgit2/pygit2/pull/982#issuecomment-604518537,"TODO:

 Wrap git_refdb in Refdb type
 Add Reference constructor(s)
 Create RefdbBackend
 Create repositories with custom refdb/odb
 Create Refdb from scratch
 Tests
 Update docs/backends.rst

Future work:

Iterating over a refdb_backend from Python
First-class reflog support
Transactional refdb updates","Cool, now we have to wait for a libgit2 release with libgit2/libgit2#5456
Hopefully it won't take long.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,982,2020-02-28T16:43:26Z,2020-04-02T09:56:30Z,2020-04-03T07:42:33Z,MERGED,True,1965,113,20,https://github.com/ddevault,Introduce Refdb type,14,[],https://github.com/libgit2/pygit2/pull/982,https://github.com/ddevault,16,https://github.com/libgit2/pygit2/pull/982#issuecomment-606222187,"TODO:

 Wrap git_refdb in Refdb type
 Add Reference constructor(s)
 Create RefdbBackend
 Create repositories with custom refdb/odb
 Create Refdb from scratch
 Tests
 Update docs/backends.rst

Future work:

Iterating over a refdb_backend from Python
First-class reflog support
Transactional refdb updates","I pushed a little bit of clean up in the course of implementing this:
https://git.sr.ht/~sircmpwn/git.sr.ht/commit/a3fe57b6844709eac64fdca60370e5c227979fd3
It works 😁",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,982,2020-02-28T16:43:26Z,2020-04-02T09:56:30Z,2020-04-03T07:42:33Z,MERGED,True,1965,113,20,https://github.com/ddevault,Introduce Refdb type,14,[],https://github.com/libgit2/pygit2/pull/982,https://github.com/ddevault,17,https://github.com/libgit2/pygit2/pull/982#issuecomment-608038242,"TODO:

 Wrap git_refdb in Refdb type
 Add Reference constructor(s)
 Create RefdbBackend
 Create repositories with custom refdb/odb
 Create Refdb from scratch
 Tests
 Update docs/backends.rst

Future work:

Iterating over a refdb_backend from Python
First-class reflog support
Transactional refdb updates",Thanks!,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,982,2020-02-28T16:43:26Z,2020-04-02T09:56:30Z,2020-04-03T07:42:33Z,MERGED,True,1965,113,20,https://github.com/ddevault,Introduce Refdb type,14,[],https://github.com/libgit2/pygit2/pull/982,https://github.com/jdavid,18,https://github.com/libgit2/pygit2/pull/982#issuecomment-608282147,"TODO:

 Wrap git_refdb in Refdb type
 Add Reference constructor(s)
 Create RefdbBackend
 Create repositories with custom refdb/odb
 Create Refdb from scratch
 Tests
 Update docs/backends.rst

Future work:

Iterating over a refdb_backend from Python
First-class reflog support
Transactional refdb updates",Thank you!,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,984,2020-03-02T21:46:10Z,2020-03-03T08:33:08Z,2020-03-03T13:49:32Z,MERGED,True,13,0,2,https://github.com/rcoup,Fix abort with nested Tree iteration,1,[],https://github.com/libgit2/pygit2/pull/984,https://github.com/rcoup,1,https://github.com/libgit2/pygit2/pull/984,"When doing nested iteration of a Tree, Python crashes with an Abort from a libgit2 assert in git_tree_entry_byindex().
Code to reproduce:
for obj in some_tree:
    if isinstance(obj, pygit2.Tree):
        for obj2 in obj:
            pass

Fix is to ensure Trees are fully-loaded via Object__load() before creating a TreeIter, otherwise self->owner->tree in TreeIter_iternext() can resolve to NULL.","When doing nested iteration of a Tree, Python crashes with an Abort from a libgit2 assert in git_tree_entry_byindex().
Code to reproduce:
for obj in some_tree:
    if isinstance(obj, pygit2.Tree):
        for obj2 in obj:
            pass

Fix is to ensure Trees are fully-loaded via Object__load() before creating a TreeIter, otherwise self->owner->tree in TreeIter_iternext() can resolve to NULL.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,987,2020-03-11T15:49:39Z,2020-03-13T10:41:22Z,2020-03-13T10:41:22Z,MERGED,True,3,3,1,https://github.com/dcecile,Allow checking out any given index,1,[],https://github.com/libgit2/pygit2/pull/987,https://github.com/dcecile,1,https://github.com/libgit2/pygit2/pull/987,"I'm using this to get an index with conflicts into the workdir after using merge_commits.
API here: https://libgit2.org/libgit2/#HEAD/group/checkout/git_checkout_index","I'm using this to get an index with conflicts into the workdir after using merge_commits.
API here: https://libgit2.org/libgit2/#HEAD/group/checkout/git_checkout_index",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,988,2020-03-13T10:05:59Z,2020-03-13T10:51:00Z,2020-04-10T11:51:43Z,MERGED,True,123,1,3,https://github.com/rcoup,macOS Wheels,2,[],https://github.com/libgit2/pygit2/pull/988,https://github.com/rcoup,1,https://github.com/libgit2/pygit2/pull/988,"Add macOS wheels into CI, using Github Actions macOS support.

Built against Python 3.6, 3.7, 3.8 using the Python.org distributions, which means wheels are compatible with macOS 10.9+.
Wheels run through delocate to embed libgit2
Unit tests run/pass against the wheels
Caches things fairly heavily, so total rebuild time is normally 2-3mins.
Wheels are saved as artifacts, and are downloadable for 90 days.

Libgit2
Builds against maint/v0.99 to match appveyor & travis, but it's configured as a matrix so can easily test against releases/branches/etc if appropriate. Not sure if we should be doing a ""release"" build -DCMAKE_BUILD_TYPE=Release (or RelWithDebugInfo), but it matches the other environments atm.
Python 3.5
This was in the plan, but I think the Python.org 3.5.4 release was built using an old version of GCC instead of Clang, and it's not in the CI environment by default. I can dig further, or switch to the build of Py3.5 used by GH Actions (which is macOS 10.13+ only), or we just leave it out.
PyPi
Haven't set it up to push to PyPi on release tags, but that's easily done using eg: gh-action-pypi-publish once secrets are configured.","Add macOS wheels into CI, using Github Actions macOS support.

Built against Python 3.6, 3.7, 3.8 using the Python.org distributions, which means wheels are compatible with macOS 10.9+.
Wheels run through delocate to embed libgit2
Unit tests run/pass against the wheels
Caches things fairly heavily, so total rebuild time is normally 2-3mins.
Wheels are saved as artifacts, and are downloadable for 90 days.

Libgit2
Builds against maint/v0.99 to match appveyor & travis, but it's configured as a matrix so can easily test against releases/branches/etc if appropriate. Not sure if we should be doing a ""release"" build -DCMAKE_BUILD_TYPE=Release (or RelWithDebugInfo), but it matches the other environments atm.
Python 3.5
This was in the plan, but I think the Python.org 3.5.4 release was built using an old version of GCC instead of Clang, and it's not in the CI environment by default. I can dig further, or switch to the build of Py3.5 used by GH Actions (which is macOS 10.13+ only), or we just leave it out.
PyPi
Haven't set it up to push to PyPi on release tags, but that's easily done using eg: gh-action-pypi-publish once secrets are configured.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,988,2020-03-13T10:05:59Z,2020-03-13T10:51:00Z,2020-04-10T11:51:43Z,MERGED,True,123,1,3,https://github.com/rcoup,macOS Wheels,2,[],https://github.com/libgit2/pygit2/pull/988,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/988#issuecomment-598664869,"Add macOS wheels into CI, using Github Actions macOS support.

Built against Python 3.6, 3.7, 3.8 using the Python.org distributions, which means wheels are compatible with macOS 10.9+.
Wheels run through delocate to embed libgit2
Unit tests run/pass against the wheels
Caches things fairly heavily, so total rebuild time is normally 2-3mins.
Wheels are saved as artifacts, and are downloadable for 90 days.

Libgit2
Builds against maint/v0.99 to match appveyor & travis, but it's configured as a matrix so can easily test against releases/branches/etc if appropriate. Not sure if we should be doing a ""release"" build -DCMAKE_BUILD_TYPE=Release (or RelWithDebugInfo), but it matches the other environments atm.
Python 3.5
This was in the plan, but I think the Python.org 3.5.4 release was built using an old version of GCC instead of Clang, and it's not in the CI environment by default. I can dig further, or switch to the build of Py3.5 used by GH Actions (which is macOS 10.13+ only), or we just leave it out.
PyPi
Haven't set it up to push to PyPi on release tags, but that's easily done using eg: gh-action-pypi-publish once secrets are configured.","I think we can leave out Python 3.5, probably we will drop support for it this year.
Thanks!",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,990,2020-03-18T14:02:44Z,2020-03-24T13:00:34Z,2020-03-24T13:31:15Z,MERGED,True,230,29,15,https://github.com/rcoup,Accept Pathlike objects (eg. pathlib.Path) in Py3.6+,1,[],https://github.com/libgit2/pygit2/pull/990,https://github.com/rcoup,1,https://github.com/libgit2/pygit2/pull/990,"PEP-519 (Py3.6+ / PyPy 7.3+) adds a [file system path protocol[(https://www.python.org/dev/peps/pep-0519/) via Object.__fspath__(), and is supported by pathlib/os/open()/etc. This PR adds support for accepting pathlib.Path objects natively in Pygit2.

Where we take paths in Python, check hasattr(value, '__fspath__') to provide Py3.5 compatibility, then call it to get a str/bytes representation.
In C, use PyUnicode_FSConverter when parsing function arguments (it handles Pathlike objects), or PyOS_FSPath() when available (ie. not Py3.5).
Implementation-wise, this approach is basically called for all string arguments, but since os.fspath()/PyOS_FSPath() return a str/bytes argument unchanged, behaviour-wise it's the same. Cleaning this up might sit with #895?

Adds a pile of *_aspath() tests under Py3.6+ to wherever we seem to accept paths. I'm sure I've missed some but we can sort that along the way.","PEP-519 (Py3.6+ / PyPy 7.3+) adds a [file system path protocol[(https://www.python.org/dev/peps/pep-0519/) via Object.__fspath__(), and is supported by pathlib/os/open()/etc. This PR adds support for accepting pathlib.Path objects natively in Pygit2.

Where we take paths in Python, check hasattr(value, '__fspath__') to provide Py3.5 compatibility, then call it to get a str/bytes representation.
In C, use PyUnicode_FSConverter when parsing function arguments (it handles Pathlike objects), or PyOS_FSPath() when available (ie. not Py3.5).
Implementation-wise, this approach is basically called for all string arguments, but since os.fspath()/PyOS_FSPath() return a str/bytes argument unchanged, behaviour-wise it's the same. Cleaning this up might sit with #895?

Adds a pile of *_aspath() tests under Py3.6+ to wherever we seem to accept paths. I'm sure I've missed some but we can sort that along the way.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,990,2020-03-18T14:02:44Z,2020-03-24T13:00:34Z,2020-03-24T13:31:15Z,MERGED,True,230,29,15,https://github.com/rcoup,Accept Pathlike objects (eg. pathlib.Path) in Py3.6+,1,[],https://github.com/libgit2/pygit2/pull/990,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/990#issuecomment-602005783,"PEP-519 (Py3.6+ / PyPy 7.3+) adds a [file system path protocol[(https://www.python.org/dev/peps/pep-0519/) via Object.__fspath__(), and is supported by pathlib/os/open()/etc. This PR adds support for accepting pathlib.Path objects natively in Pygit2.

Where we take paths in Python, check hasattr(value, '__fspath__') to provide Py3.5 compatibility, then call it to get a str/bytes representation.
In C, use PyUnicode_FSConverter when parsing function arguments (it handles Pathlike objects), or PyOS_FSPath() when available (ie. not Py3.5).
Implementation-wise, this approach is basically called for all string arguments, but since os.fspath()/PyOS_FSPath() return a str/bytes argument unchanged, behaviour-wise it's the same. Cleaning this up might sit with #895?

Adds a pile of *_aspath() tests under Py3.6+ to wherever we seem to accept paths. I'm sure I've missed some but we can sort that along the way.","AppVeyor is failing with a C syntax error. Travis is failing as well, but now it's under maintenance and cannot see the details.
I think this is the right time to drop support for Python 3.5 and simplify the PR a bit.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,990,2020-03-18T14:02:44Z,2020-03-24T13:00:34Z,2020-03-24T13:31:15Z,MERGED,True,230,29,15,https://github.com/rcoup,Accept Pathlike objects (eg. pathlib.Path) in Py3.6+,1,[],https://github.com/libgit2/pygit2/pull/990,https://github.com/jdavid,3,https://github.com/libgit2/pygit2/pull/990#issuecomment-603125817,"PEP-519 (Py3.6+ / PyPy 7.3+) adds a [file system path protocol[(https://www.python.org/dev/peps/pep-0519/) via Object.__fspath__(), and is supported by pathlib/os/open()/etc. This PR adds support for accepting pathlib.Path objects natively in Pygit2.

Where we take paths in Python, check hasattr(value, '__fspath__') to provide Py3.5 compatibility, then call it to get a str/bytes representation.
In C, use PyUnicode_FSConverter when parsing function arguments (it handles Pathlike objects), or PyOS_FSPath() when available (ie. not Py3.5).
Implementation-wise, this approach is basically called for all string arguments, but since os.fspath()/PyOS_FSPath() return a str/bytes argument unchanged, behaviour-wise it's the same. Cleaning this up might sit with #895?

Adds a pile of *_aspath() tests under Py3.6+ to wherever we seem to accept paths. I'm sure I've missed some but we can sort that along the way.",So I dropped 3.5 support. Could you please rebase and update the PR? Thanks.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,990,2020-03-18T14:02:44Z,2020-03-24T13:00:34Z,2020-03-24T13:31:15Z,MERGED,True,230,29,15,https://github.com/rcoup,Accept Pathlike objects (eg. pathlib.Path) in Py3.6+,1,[],https://github.com/libgit2/pygit2/pull/990,https://github.com/rcoup,4,https://github.com/libgit2/pygit2/pull/990#issuecomment-603178468,"PEP-519 (Py3.6+ / PyPy 7.3+) adds a [file system path protocol[(https://www.python.org/dev/peps/pep-0519/) via Object.__fspath__(), and is supported by pathlib/os/open()/etc. This PR adds support for accepting pathlib.Path objects natively in Pygit2.

Where we take paths in Python, check hasattr(value, '__fspath__') to provide Py3.5 compatibility, then call it to get a str/bytes representation.
In C, use PyUnicode_FSConverter when parsing function arguments (it handles Pathlike objects), or PyOS_FSPath() when available (ie. not Py3.5).
Implementation-wise, this approach is basically called for all string arguments, but since os.fspath()/PyOS_FSPath() return a str/bytes argument unchanged, behaviour-wise it's the same. Cleaning this up might sit with #895?

Adds a pile of *_aspath() tests under Py3.6+ to wherever we seem to accept paths. I'm sure I've missed some but we can sort that along the way.","yup, will do",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,990,2020-03-18T14:02:44Z,2020-03-24T13:00:34Z,2020-03-24T13:31:15Z,MERGED,True,230,29,15,https://github.com/rcoup,Accept Pathlike objects (eg. pathlib.Path) in Py3.6+,1,[],https://github.com/libgit2/pygit2/pull/990,https://github.com/rcoup,5,https://github.com/libgit2/pygit2/pull/990#issuecomment-603187389,"PEP-519 (Py3.6+ / PyPy 7.3+) adds a [file system path protocol[(https://www.python.org/dev/peps/pep-0519/) via Object.__fspath__(), and is supported by pathlib/os/open()/etc. This PR adds support for accepting pathlib.Path objects natively in Pygit2.

Where we take paths in Python, check hasattr(value, '__fspath__') to provide Py3.5 compatibility, then call it to get a str/bytes representation.
In C, use PyUnicode_FSConverter when parsing function arguments (it handles Pathlike objects), or PyOS_FSPath() when available (ie. not Py3.5).
Implementation-wise, this approach is basically called for all string arguments, but since os.fspath()/PyOS_FSPath() return a str/bytes argument unchanged, behaviour-wise it's the same. Cleaning this up might sit with #895?

Adds a pile of *_aspath() tests under Py3.6+ to wherever we seem to accept paths. I'm sure I've missed some but we can sort that along the way.","Everything was still needed for CI's version of PyPy, so I left it in for the moment to check tests.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,990,2020-03-18T14:02:44Z,2020-03-24T13:00:34Z,2020-03-24T13:31:15Z,MERGED,True,230,29,15,https://github.com/rcoup,Accept Pathlike objects (eg. pathlib.Path) in Py3.6+,1,[],https://github.com/libgit2/pygit2/pull/990,https://github.com/jdavid,6,https://github.com/libgit2/pygit2/pull/990#issuecomment-603201563,"PEP-519 (Py3.6+ / PyPy 7.3+) adds a [file system path protocol[(https://www.python.org/dev/peps/pep-0519/) via Object.__fspath__(), and is supported by pathlib/os/open()/etc. This PR adds support for accepting pathlib.Path objects natively in Pygit2.

Where we take paths in Python, check hasattr(value, '__fspath__') to provide Py3.5 compatibility, then call it to get a str/bytes representation.
In C, use PyUnicode_FSConverter when parsing function arguments (it handles Pathlike objects), or PyOS_FSPath() when available (ie. not Py3.5).
Implementation-wise, this approach is basically called for all string arguments, but since os.fspath()/PyOS_FSPath() return a str/bytes argument unchanged, behaviour-wise it's the same. Cleaning this up might sit with #895?

Adds a pile of *_aspath() tests under Py3.6+ to wherever we seem to accept paths. I'm sure I've missed some but we can sort that along the way.",Ok.. I see this would require pypy 7.3.0 while in Travis the latest version is 7.1.1,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,998,2020-04-05T17:07:12Z,,2021-07-07T01:19:59Z,OPEN,False,390,308,9,https://github.com/omniproc,Replaced exception handling logic,1,[],https://github.com/libgit2/pygit2/pull/998,https://github.com/omniproc,1,https://github.com/libgit2/pygit2/pull/998,"As discussed in #830 and #996 this is a initial implementation of a new exception handling mechanism. The goals so far have been:

Don't break backwards compatibility
Wrap C-Calls that return an exit code more elegant in a way that a propper Python exception is rised if the exit code is not OK
If no propper exit code was found raise a generic GitException and try to populate it with as much information as available.
If a native Python exception occurres during that C-call, raise that exception and do not hide it

As suggested / discussed in #830 it was implemented using mutliple inheritance.
Currently the tree looks like this Exception -> GitError (for backward compatibility) -> BaseGitException (for multi inheritance support and new exception handling logic) -> GitException (as actual class to derive from) -> GitXxxError (Exceptions matching GIT_E* exit codes from libgit2).
The new code is in errors.py - the other classes have only been touched to implement it. A single unittest was changed to be more specific when detecting the returned exception, thought that change should not break anything.
There are multiple ways to use it.
@GitException.check_result
def foo(val):
    if val == 99:
        raise Exception(""Native Python exception thrown inside foo()."")
    return val 

foo(1)      # OK
foo(0)      # OK
foo(-3)     # Raises GitNotFoundError because GIT_ENOTFOUND == -3
foo(-16)    # Raises GitException because GIT_EAUTH == -16 and GitAuthError has not yet been explicitly implemented as standalone Exception
foo(99)     # Raises Exception with text ""Native Python exception thrown inside foo()."". Don't wrap/hide/manipulate Python exception but just re-raise them!

# If we want to raise a more specific exception in case an error occures we can do so:
@GitNotFoundError.check_result
def bar(val):
    if val == 99:
        raise Exception(""Native Python exception thrown inside foo()."")
    return val 

bar(1)      # OK
bar(0)      # OK
bar(-3)     # Raises GitNotFoundError because we explicitly told to raise GitNotFoundError for all error codes
bar(-16)    # Raises GitNotFoundError because we explicitly told to raise GitNotFoundError for all error codes
bar(99)     # Raises Exception with text ""Native Python exception thrown inside foo()."". Don't wrap/hide/manipulate actual Python exception but just re-raise them!

# Also we have control over the message that should be returned to the user
@GitException.check_result(message=""Something bad happend at baz()."")
def baz(val):
    if val == 99:
        raise Exception(""Native Python exception thrown inside foo()."")
    return val 

baz(1)      # OK
baz(0)      # OK
baz(-3)     # Raises GitNotFoundError because GIT_ENOTFOUND == -3. Exception message will be ""Something bad happend at baz().""
baz(-16)    # Raises GitException because GIT_EAUTH == -16 and GitAuthError has not yet been explicitly implemented as standalone Exception. Exception message will be ""Something bad happend at baz().""
baz(99)     # Raises Exception with text ""Native Python exception thrown inside foo()."". Don't wrap/hide/manipulate actual Python exception but just re-raise them!


# If we don't want to wrap the hole function - thought a redesign in such a way that C-calls are wrapped into individual Python functions would make sense - we can use old style wrapping without decorators.
# This is usefull for a quick replacement of the current exception logic. For example:
GitException.check_result(baz, message=""Something bad happend at baz()."")(1)","As discussed in #830 and #996 this is a initial implementation of a new exception handling mechanism. The goals so far have been:

Don't break backwards compatibility
Wrap C-Calls that return an exit code more elegant in a way that a propper Python exception is rised if the exit code is not OK
If no propper exit code was found raise a generic GitException and try to populate it with as much information as available.
If a native Python exception occurres during that C-call, raise that exception and do not hide it

As suggested / discussed in #830 it was implemented using mutliple inheritance.
Currently the tree looks like this Exception -> GitError (for backward compatibility) -> BaseGitException (for multi inheritance support and new exception handling logic) -> GitException (as actual class to derive from) -> GitXxxError (Exceptions matching GIT_E* exit codes from libgit2).
The new code is in errors.py - the other classes have only been touched to implement it. A single unittest was changed to be more specific when detecting the returned exception, thought that change should not break anything.
There are multiple ways to use it.
@GitException.check_result
def foo(val):
    if val == 99:
        raise Exception(""Native Python exception thrown inside foo()."")
    return val 

foo(1)      # OK
foo(0)      # OK
foo(-3)     # Raises GitNotFoundError because GIT_ENOTFOUND == -3
foo(-16)    # Raises GitException because GIT_EAUTH == -16 and GitAuthError has not yet been explicitly implemented as standalone Exception
foo(99)     # Raises Exception with text ""Native Python exception thrown inside foo()."". Don't wrap/hide/manipulate Python exception but just re-raise them!

# If we want to raise a more specific exception in case an error occures we can do so:
@GitNotFoundError.check_result
def bar(val):
    if val == 99:
        raise Exception(""Native Python exception thrown inside foo()."")
    return val 

bar(1)      # OK
bar(0)      # OK
bar(-3)     # Raises GitNotFoundError because we explicitly told to raise GitNotFoundError for all error codes
bar(-16)    # Raises GitNotFoundError because we explicitly told to raise GitNotFoundError for all error codes
bar(99)     # Raises Exception with text ""Native Python exception thrown inside foo()."". Don't wrap/hide/manipulate actual Python exception but just re-raise them!

# Also we have control over the message that should be returned to the user
@GitException.check_result(message=""Something bad happend at baz()."")
def baz(val):
    if val == 99:
        raise Exception(""Native Python exception thrown inside foo()."")
    return val 

baz(1)      # OK
baz(0)      # OK
baz(-3)     # Raises GitNotFoundError because GIT_ENOTFOUND == -3. Exception message will be ""Something bad happend at baz().""
baz(-16)    # Raises GitException because GIT_EAUTH == -16 and GitAuthError has not yet been explicitly implemented as standalone Exception. Exception message will be ""Something bad happend at baz().""
baz(99)     # Raises Exception with text ""Native Python exception thrown inside foo()."". Don't wrap/hide/manipulate actual Python exception but just re-raise them!


# If we don't want to wrap the hole function - thought a redesign in such a way that C-calls are wrapped into individual Python functions would make sense - we can use old style wrapping without decorators.
# This is usefull for a quick replacement of the current exception logic. For example:
GitException.check_result(baz, message=""Something bad happend at baz()."")(1)",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,998,2020-04-05T17:07:12Z,,2021-07-07T01:19:59Z,OPEN,False,390,308,9,https://github.com/omniproc,Replaced exception handling logic,1,[],https://github.com/libgit2/pygit2/pull/998,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/998#issuecomment-610840288,"As discussed in #830 and #996 this is a initial implementation of a new exception handling mechanism. The goals so far have been:

Don't break backwards compatibility
Wrap C-Calls that return an exit code more elegant in a way that a propper Python exception is rised if the exit code is not OK
If no propper exit code was found raise a generic GitException and try to populate it with as much information as available.
If a native Python exception occurres during that C-call, raise that exception and do not hide it

As suggested / discussed in #830 it was implemented using mutliple inheritance.
Currently the tree looks like this Exception -> GitError (for backward compatibility) -> BaseGitException (for multi inheritance support and new exception handling logic) -> GitException (as actual class to derive from) -> GitXxxError (Exceptions matching GIT_E* exit codes from libgit2).
The new code is in errors.py - the other classes have only been touched to implement it. A single unittest was changed to be more specific when detecting the returned exception, thought that change should not break anything.
There are multiple ways to use it.
@GitException.check_result
def foo(val):
    if val == 99:
        raise Exception(""Native Python exception thrown inside foo()."")
    return val 

foo(1)      # OK
foo(0)      # OK
foo(-3)     # Raises GitNotFoundError because GIT_ENOTFOUND == -3
foo(-16)    # Raises GitException because GIT_EAUTH == -16 and GitAuthError has not yet been explicitly implemented as standalone Exception
foo(99)     # Raises Exception with text ""Native Python exception thrown inside foo()."". Don't wrap/hide/manipulate Python exception but just re-raise them!

# If we want to raise a more specific exception in case an error occures we can do so:
@GitNotFoundError.check_result
def bar(val):
    if val == 99:
        raise Exception(""Native Python exception thrown inside foo()."")
    return val 

bar(1)      # OK
bar(0)      # OK
bar(-3)     # Raises GitNotFoundError because we explicitly told to raise GitNotFoundError for all error codes
bar(-16)    # Raises GitNotFoundError because we explicitly told to raise GitNotFoundError for all error codes
bar(99)     # Raises Exception with text ""Native Python exception thrown inside foo()."". Don't wrap/hide/manipulate actual Python exception but just re-raise them!

# Also we have control over the message that should be returned to the user
@GitException.check_result(message=""Something bad happend at baz()."")
def baz(val):
    if val == 99:
        raise Exception(""Native Python exception thrown inside foo()."")
    return val 

baz(1)      # OK
baz(0)      # OK
baz(-3)     # Raises GitNotFoundError because GIT_ENOTFOUND == -3. Exception message will be ""Something bad happend at baz().""
baz(-16)    # Raises GitException because GIT_EAUTH == -16 and GitAuthError has not yet been explicitly implemented as standalone Exception. Exception message will be ""Something bad happend at baz().""
baz(99)     # Raises Exception with text ""Native Python exception thrown inside foo()."". Don't wrap/hide/manipulate actual Python exception but just re-raise them!


# If we don't want to wrap the hole function - thought a redesign in such a way that C-calls are wrapped into individual Python functions would make sense - we can use old style wrapping without decorators.
# This is usefull for a quick replacement of the current exception logic. For example:
GitException.check_result(baz, message=""Something bad happend at baz()."")(1)","Let's see an exemple. Today we have:
err = C.git_clone(crepo, to_bytes(url), to_bytes(path), opts)
check_error(err)
The proposal is to write:
GitException.check_result(C.git_clone)(crepo, to_bytes(url), to_bytes(path), opts)
Today's code already transforms the error code to a Python exception, and it's in my opinion easier to read.
The thing the new code does is to catch and re-raise an exception from C.git_clone. But C.git_clone cannot raise any exception, only return an error code. If C.git_clone could raise an exception, it would work already with today's code.
What happens, as seen in issue #996, is that a callback written in Python may raise an exception. Then the callback has to store that exception somewhere (_stored_exception), and return GIT_EUSER.
For the record, from libgit2 sources:
        /**
         * GIT_EUSER is a special error that is never generated by libgit2
         * code.  You can return it from a callback (e.g to stop an iteration)
         * to know that it was generated by the callback and not by libgit2.
         */
        GIT_EUSER      = -7,

Then the code that has called C.git_clone must check _stored_exception and raise an exception. It would be nice to have a more general solution for this, I understand this is one of the stated goals of this PR:


If a native Python exception occurres during  that C-call, raise that exception and do not hide it


But the PR doesn't address this actually. The code handling _stored_exception is still there.
It looks to me that this PR is actually trying to resolve issue #830, not #996. Am I right?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,998,2020-04-05T17:07:12Z,,2021-07-07T01:19:59Z,OPEN,False,390,308,9,https://github.com/omniproc,Replaced exception handling logic,1,[],https://github.com/libgit2/pygit2/pull/998,https://github.com/omniproc,3,https://github.com/libgit2/pygit2/pull/998#issuecomment-611887647,"As discussed in #830 and #996 this is a initial implementation of a new exception handling mechanism. The goals so far have been:

Don't break backwards compatibility
Wrap C-Calls that return an exit code more elegant in a way that a propper Python exception is rised if the exit code is not OK
If no propper exit code was found raise a generic GitException and try to populate it with as much information as available.
If a native Python exception occurres during that C-call, raise that exception and do not hide it

As suggested / discussed in #830 it was implemented using mutliple inheritance.
Currently the tree looks like this Exception -> GitError (for backward compatibility) -> BaseGitException (for multi inheritance support and new exception handling logic) -> GitException (as actual class to derive from) -> GitXxxError (Exceptions matching GIT_E* exit codes from libgit2).
The new code is in errors.py - the other classes have only been touched to implement it. A single unittest was changed to be more specific when detecting the returned exception, thought that change should not break anything.
There are multiple ways to use it.
@GitException.check_result
def foo(val):
    if val == 99:
        raise Exception(""Native Python exception thrown inside foo()."")
    return val 

foo(1)      # OK
foo(0)      # OK
foo(-3)     # Raises GitNotFoundError because GIT_ENOTFOUND == -3
foo(-16)    # Raises GitException because GIT_EAUTH == -16 and GitAuthError has not yet been explicitly implemented as standalone Exception
foo(99)     # Raises Exception with text ""Native Python exception thrown inside foo()."". Don't wrap/hide/manipulate Python exception but just re-raise them!

# If we want to raise a more specific exception in case an error occures we can do so:
@GitNotFoundError.check_result
def bar(val):
    if val == 99:
        raise Exception(""Native Python exception thrown inside foo()."")
    return val 

bar(1)      # OK
bar(0)      # OK
bar(-3)     # Raises GitNotFoundError because we explicitly told to raise GitNotFoundError for all error codes
bar(-16)    # Raises GitNotFoundError because we explicitly told to raise GitNotFoundError for all error codes
bar(99)     # Raises Exception with text ""Native Python exception thrown inside foo()."". Don't wrap/hide/manipulate actual Python exception but just re-raise them!

# Also we have control over the message that should be returned to the user
@GitException.check_result(message=""Something bad happend at baz()."")
def baz(val):
    if val == 99:
        raise Exception(""Native Python exception thrown inside foo()."")
    return val 

baz(1)      # OK
baz(0)      # OK
baz(-3)     # Raises GitNotFoundError because GIT_ENOTFOUND == -3. Exception message will be ""Something bad happend at baz().""
baz(-16)    # Raises GitException because GIT_EAUTH == -16 and GitAuthError has not yet been explicitly implemented as standalone Exception. Exception message will be ""Something bad happend at baz().""
baz(99)     # Raises Exception with text ""Native Python exception thrown inside foo()."". Don't wrap/hide/manipulate actual Python exception but just re-raise them!


# If we don't want to wrap the hole function - thought a redesign in such a way that C-calls are wrapped into individual Python functions would make sense - we can use old style wrapping without decorators.
# This is usefull for a quick replacement of the current exception logic. For example:
GitException.check_result(baz, message=""Something bad happend at baz()."")(1)","It looks to me that this PR is actually trying to resolve issue #830, not #996. Am I right?

Yes, absolutely. Maybe I should have been more clear about that. When looking into the problem as discussed in #996 I realized that before we can handle that it would make sense to first have a more generic exception handling implemented as suggested in #830. The thing that this PR add's, I hope, is to implement it and thus provides us a single place where all errors - Python and C type - can be handled.
Because of this we also get a single place where special error codes like GIT_EUSER can be handled differently. For now it'll just convert it into a Python exception. But this could easily be modified in such a way that it does store and - then later, when the generic GitError occures, rises the actual Exception it stored before. Essentially the logic there can be the same as before: get any exception that occures. If it's a C error, store it and return it's value. The code higher up in the stack, from my understanding, will then raise a generic GitError. At that point the implementation could be changed so it don't simply rise the GitError but rise the stored Exception.
The difference is that now that logic, when needed, can be very different for different error types and is still kept in a central place where you'd expect it: in the error module that's supposed to handle all the errors the way we want it.
I have not yet integrated any logic that would specially handle GIT_EUSER but that would be the next step to fix #998. I just wanted to better understand what's happening there before I apply the changes, so I opend the todos in #830.
If needed I can supply a working example how the handling of such special errors could work with this PR but I'll need some time to fully understand the call stack and think about the different ways that could be handled.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,998,2020-04-05T17:07:12Z,,2021-07-07T01:19:59Z,OPEN,False,390,308,9,https://github.com/omniproc,Replaced exception handling logic,1,[],https://github.com/libgit2/pygit2/pull/998,https://github.com/jdavid,4,https://github.com/libgit2/pygit2/pull/998#issuecomment-612961434,"As discussed in #830 and #996 this is a initial implementation of a new exception handling mechanism. The goals so far have been:

Don't break backwards compatibility
Wrap C-Calls that return an exit code more elegant in a way that a propper Python exception is rised if the exit code is not OK
If no propper exit code was found raise a generic GitException and try to populate it with as much information as available.
If a native Python exception occurres during that C-call, raise that exception and do not hide it

As suggested / discussed in #830 it was implemented using mutliple inheritance.
Currently the tree looks like this Exception -> GitError (for backward compatibility) -> BaseGitException (for multi inheritance support and new exception handling logic) -> GitException (as actual class to derive from) -> GitXxxError (Exceptions matching GIT_E* exit codes from libgit2).
The new code is in errors.py - the other classes have only been touched to implement it. A single unittest was changed to be more specific when detecting the returned exception, thought that change should not break anything.
There are multiple ways to use it.
@GitException.check_result
def foo(val):
    if val == 99:
        raise Exception(""Native Python exception thrown inside foo()."")
    return val 

foo(1)      # OK
foo(0)      # OK
foo(-3)     # Raises GitNotFoundError because GIT_ENOTFOUND == -3
foo(-16)    # Raises GitException because GIT_EAUTH == -16 and GitAuthError has not yet been explicitly implemented as standalone Exception
foo(99)     # Raises Exception with text ""Native Python exception thrown inside foo()."". Don't wrap/hide/manipulate Python exception but just re-raise them!

# If we want to raise a more specific exception in case an error occures we can do so:
@GitNotFoundError.check_result
def bar(val):
    if val == 99:
        raise Exception(""Native Python exception thrown inside foo()."")
    return val 

bar(1)      # OK
bar(0)      # OK
bar(-3)     # Raises GitNotFoundError because we explicitly told to raise GitNotFoundError for all error codes
bar(-16)    # Raises GitNotFoundError because we explicitly told to raise GitNotFoundError for all error codes
bar(99)     # Raises Exception with text ""Native Python exception thrown inside foo()."". Don't wrap/hide/manipulate actual Python exception but just re-raise them!

# Also we have control over the message that should be returned to the user
@GitException.check_result(message=""Something bad happend at baz()."")
def baz(val):
    if val == 99:
        raise Exception(""Native Python exception thrown inside foo()."")
    return val 

baz(1)      # OK
baz(0)      # OK
baz(-3)     # Raises GitNotFoundError because GIT_ENOTFOUND == -3. Exception message will be ""Something bad happend at baz().""
baz(-16)    # Raises GitException because GIT_EAUTH == -16 and GitAuthError has not yet been explicitly implemented as standalone Exception. Exception message will be ""Something bad happend at baz().""
baz(99)     # Raises Exception with text ""Native Python exception thrown inside foo()."". Don't wrap/hide/manipulate actual Python exception but just re-raise them!


# If we don't want to wrap the hole function - thought a redesign in such a way that C-calls are wrapped into individual Python functions would make sense - we can use old style wrapping without decorators.
# This is usefull for a quick replacement of the current exception logic. For example:
GitException.check_result(baz, message=""Something bad happend at baz()."")(1)","Okay. The callback code was contributed long time ago by someone else, I myself didn't know exactly how it worked. So I've reviewed it and done some commits. It's all internal refactoring, no external changes (not intended at least).
Now it should be much easier to read and maintain, at least now I understand how it works. You can give a look at the new pygit2/callbacks.py file, which now holds all code related to callbacks, it has some documentation strings and comments that should make it easier.
I don't think there's any dependency between issues #830 and #996. There're many calls to check_error but only a handful of callbacks, GIT_EUSER and GIT_PASSTHROUGH are only of interest in the context of callbacks.
Next I'll work on the unit tests concerning #996 (not completely sure, but I think that issue is already fixed).",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1002,2020-04-18T22:56:17Z,2020-04-19T07:30:07Z,2020-04-19T11:12:22Z,MERGED,True,3,0,1,https://github.com/buhl,Obj reached not through tree caused Segmentation fault on raw_name access,1,[],https://github.com/libgit2/pygit2/pull/1002,https://github.com/buhl,1,https://github.com/libgit2/pygit2/pull/1002,"While tab completing in the repl on the . of a blob object accessed not through the tree I caused a segfault.
I found out the repl calls inspect.getmemebers on the object which again tries to access raw_name.
I took the check from .name property and applied to to .raw_name
This is on python 3.8.2
Before fix
>>> import os, pygit2, inspect
>>> r = pygit2.Repository(""/home/user/repos/pygit2"")
>>> b = r.get(""855c845e538b"")
>>> inspect.getmembers(b)
Segmentation fault (core dumped)
After fix
>>> import os, pygit2, inspect
>>> r = pygit2.Repository(""/home/user/repos/pygit2"")
>>> b = r.get(""855c845e538b"")
>>> inspect.getmembers(b)
[('__class__', <class '_pygit2.Blob'>), 

# ...

('short_id', '855c845'), ('size', 444379), ('type', 3), ('type_str', 'blob')]","While tab completing in the repl on the . of a blob object accessed not through the tree I caused a segfault.
I found out the repl calls inspect.getmemebers on the object which again tries to access raw_name.
I took the check from .name property and applied to to .raw_name
This is on python 3.8.2
Before fix
>>> import os, pygit2, inspect
>>> r = pygit2.Repository(""/home/user/repos/pygit2"")
>>> b = r.get(""855c845e538b"")
>>> inspect.getmembers(b)
Segmentation fault (core dumped)
After fix
>>> import os, pygit2, inspect
>>> r = pygit2.Repository(""/home/user/repos/pygit2"")
>>> b = r.get(""855c845e538b"")
>>> inspect.getmembers(b)
[('__class__', <class '_pygit2.Blob'>), 

# ...

('short_id', '855c845'), ('size', 444379), ('type', 3), ('type_str', 'blob')]",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1008,2020-05-14T02:22:45Z,2020-05-19T10:34:14Z,2020-05-19T10:34:14Z,MERGED,True,160,22,2,https://github.com/olsen232,Allow setting merge options in Repository.merge,2,[],https://github.com/libgit2/pygit2/pull/1008,https://github.com/olsen232,1,https://github.com/libgit2/pygit2/pull/1008,"Up to now, Repository.merge_commits and Repository.merge_trees only
allowed the caller to choose the file_favor. This change also
allows them to set or unset any of the merge_flags or merge_file_flags,
while preserving the default behavior.","Up to now, Repository.merge_commits and Repository.merge_trees only
allowed the caller to choose the file_favor. This change also
allows them to set or unset any of the merge_flags or merge_file_flags,
while preserving the default behavior.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1008,2020-05-14T02:22:45Z,2020-05-19T10:34:14Z,2020-05-19T10:34:14Z,MERGED,True,160,22,2,https://github.com/olsen232,Allow setting merge options in Repository.merge,2,[],https://github.com/libgit2/pygit2/pull/1008,https://github.com/olsen232,2,https://github.com/libgit2/pygit2/pull/1008#issuecomment-628347503,"Up to now, Repository.merge_commits and Repository.merge_trees only
allowed the caller to choose the file_favor. This change also
allows them to set or unset any of the merge_flags or merge_file_flags,
while preserving the default behavior.",(@rcoup asked to be cc'd on all pygit2 PRs by koordinates staff),True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1008,2020-05-14T02:22:45Z,2020-05-19T10:34:14Z,2020-05-19T10:34:14Z,MERGED,True,160,22,2,https://github.com/olsen232,Allow setting merge options in Repository.merge,2,[],https://github.com/libgit2/pygit2/pull/1008,https://github.com/olsen232,3,https://github.com/libgit2/pygit2/pull/1008#issuecomment-629020645,"Up to now, Repository.merge_commits and Repository.merge_trees only
allowed the caller to choose the file_favor. This change also
allows them to set or unset any of the merge_flags or merge_file_flags,
while preserving the default behavior.",@rcoup I am not familiar with this repository - can you make sure that the right reviewer sees this?,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1008,2020-05-14T02:22:45Z,2020-05-19T10:34:14Z,2020-05-19T10:34:14Z,MERGED,True,160,22,2,https://github.com/olsen232,Allow setting merge options in Repository.merge,2,[],https://github.com/libgit2/pygit2/pull/1008,https://github.com/rcoup,4,https://github.com/libgit2/pygit2/pull/1008#issuecomment-629090012,"Up to now, Repository.merge_commits and Repository.merge_trees only
allowed the caller to choose the file_favor. This change also
allows them to set or unset any of the merge_flags or merge_file_flags,
while preserving the default behavior.","@jdavid has looked at all mine, but his time varies a bit.
@olsen232 LGTM though. Can we add/expand tests for _merge_options()/_flag_dict_to_bitmask() — the rest prettymuch gets passed verbatim to libgit2, doesn't seem helpful.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1008,2020-05-14T02:22:45Z,2020-05-19T10:34:14Z,2020-05-19T10:34:14Z,MERGED,True,160,22,2,https://github.com/olsen232,Allow setting merge options in Repository.merge,2,[],https://github.com/libgit2/pygit2/pull/1008,https://github.com/jdavid,5,https://github.com/libgit2/pygit2/pull/1008#issuecomment-629607242,"Up to now, Repository.merge_commits and Repository.merge_trees only
allowed the caller to choose the file_favor. This change also
allows them to set or unset any of the merge_flags or merge_file_flags,
while preserving the default behavior.","correct, there are no tests",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1008,2020-05-14T02:22:45Z,2020-05-19T10:34:14Z,2020-05-19T10:34:14Z,MERGED,True,160,22,2,https://github.com/olsen232,Allow setting merge options in Repository.merge,2,[],https://github.com/libgit2/pygit2/pull/1008,https://github.com/olsen232,6,https://github.com/libgit2/pygit2/pull/1008#issuecomment-629868129,"Up to now, Repository.merge_commits and Repository.merge_trees only
allowed the caller to choose the file_favor. This change also
allows them to set or unset any of the merge_flags or merge_file_flags,
while preserving the default behavior.",@jdavid @rcoup added tests,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1009,2020-05-20T01:58:33Z,2020-05-26T07:20:03Z,2020-05-26T07:20:03Z,MERGED,True,42,1,2,https://github.com/olsen232,"Add repr, str, == and != support to IndexEntry.",1,[],https://github.com/libgit2/pygit2/pull/1009,https://github.com/olsen232,1,https://github.com/libgit2/pygit2/pull/1009,"IndexEntry is a simple datatype which can be usefully displayed or
compated to any other IndexEntry.
Not done for larger types Index or ConflictCollection since
its not clear if, for instance, two Indexes can be == if they have
different paths.
Added ConflictIterator.__iter__ - this is required by the iterator
protocol. See
https://docs.python.org/3/library/stdtypes.html#iterator-types","IndexEntry is a simple datatype which can be usefully displayed or
compated to any other IndexEntry.
Not done for larger types Index or ConflictCollection since
its not clear if, for instance, two Indexes can be == if they have
different paths.
Added ConflictIterator.__iter__ - this is required by the iterator
protocol. See
https://docs.python.org/3/library/stdtypes.html#iterator-types",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1009,2020-05-20T01:58:33Z,2020-05-26T07:20:03Z,2020-05-26T07:20:03Z,MERGED,True,42,1,2,https://github.com/olsen232,"Add repr, str, == and != support to IndexEntry.",1,[],https://github.com/libgit2/pygit2/pull/1009,https://github.com/olsen232,2,https://github.com/libgit2/pygit2/pull/1009#issuecomment-631187784,"IndexEntry is a simple datatype which can be usefully displayed or
compated to any other IndexEntry.
Not done for larger types Index or ConflictCollection since
its not clear if, for instance, two Indexes can be == if they have
different paths.
Added ConflictIterator.__iter__ - this is required by the iterator
protocol. See
https://docs.python.org/3/library/stdtypes.html#iterator-types","@jdavid
@rcoup FYI",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1009,2020-05-20T01:58:33Z,2020-05-26T07:20:03Z,2020-05-26T07:20:03Z,MERGED,True,42,1,2,https://github.com/olsen232,"Add repr, str, == and != support to IndexEntry.",1,[],https://github.com/libgit2/pygit2/pull/1009,https://github.com/jdavid,3,https://github.com/libgit2/pygit2/pull/1009#issuecomment-631916437,"IndexEntry is a simple datatype which can be usefully displayed or
compated to any other IndexEntry.
Not done for larger types Index or ConflictCollection since
its not clear if, for instance, two Indexes can be == if they have
different paths.
Added ConflictIterator.__iter__ - this is required by the iterator
protocol. See
https://docs.python.org/3/library/stdtypes.html#iterator-types","looks good, just missing the tests",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1011,2020-05-26T00:57:38Z,2020-05-28T15:15:33Z,2020-05-30T22:42:22Z,MERGED,True,63,0,3,https://github.com/leftink,Add the ability to add a submodule to the repository index,1,[],https://github.com/libgit2/pygit2/pull/1011,https://github.com/leftink,1,https://github.com/libgit2/pygit2/pull/1011,"Fixes #1010
Implements the functionality required to add a submodule to the repository index","Fixes #1010
Implements the functionality required to add a submodule to the repository index",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1011,2020-05-26T00:57:38Z,2020-05-28T15:15:33Z,2020-05-30T22:42:22Z,MERGED,True,63,0,3,https://github.com/leftink,Add the ability to add a submodule to the repository index,1,[],https://github.com/libgit2/pygit2/pull/1011,https://github.com/leftink,2,https://github.com/libgit2/pygit2/pull/1011#issuecomment-634635340,"Fixes #1010
Implements the functionality required to add a submodule to the repository index","Command executed with exception: Exception calling ""UploadFile"" with ""2"" argument(s): ""The remote name could not be resolved: 'ci.appveyor.com'

@jdavid, The failure looks like an issue un-related to the changes.  Is there something I need to do to fix this?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1011,2020-05-26T00:57:38Z,2020-05-28T15:15:33Z,2020-05-30T22:42:22Z,MERGED,True,63,0,3,https://github.com/leftink,Add the ability to add a submodule to the repository index,1,[],https://github.com/libgit2/pygit2/pull/1011,https://github.com/jdavid,3,https://github.com/libgit2/pygit2/pull/1011#issuecomment-635414198,"Fixes #1010
Implements the functionality required to add a submodule to the repository index","it was only a temporary network error
merged, thanks",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1012,2020-05-31T23:30:40Z,,2020-11-25T15:53:26Z,OPEN,False,250,11,4,https://github.com/leftink,Add support for several more submodule functions,2,[],https://github.com/libgit2/pygit2/pull/1012,https://github.com/leftink,1,https://github.com/libgit2/pygit2/pull/1012,"Add support for:

Initializing a submodule
Synchronizing the repo with updates to the config
Reloading the submodule information
Add the submodule HEAD to the index
Retrieving the submodule status

Add property for:

Getting the OID in the index
Getting the OID in the working directory
Setting the submodule URL
Setting the submodule Branch
Getting/Setting the submodule ignore rule
Getting/Setting the submodule fetch/recurse rule
Getting/Setting the submodule update rule","Add support for:

Initializing a submodule
Synchronizing the repo with updates to the config
Reloading the submodule information
Add the submodule HEAD to the index
Retrieving the submodule status

Add property for:

Getting the OID in the index
Getting the OID in the working directory
Setting the submodule URL
Setting the submodule Branch
Getting/Setting the submodule ignore rule
Getting/Setting the submodule fetch/recurse rule
Getting/Setting the submodule update rule",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1012,2020-05-31T23:30:40Z,,2020-11-25T15:53:26Z,OPEN,False,250,11,4,https://github.com/leftink,Add support for several more submodule functions,2,[],https://github.com/libgit2/pygit2/pull/1012,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/1012#issuecomment-638667983,"Add support for:

Initializing a submodule
Synchronizing the repo with updates to the config
Reloading the submodule information
Add the submodule HEAD to the index
Retrieving the submodule status

Add property for:

Getting the OID in the index
Getting the OID in the working directory
Setting the submodule URL
Setting the submodule Branch
Getting/Setting the submodule ignore rule
Getting/Setting the submodule fetch/recurse rule
Getting/Setting the submodule update rule","Looks good, can you please add the unit tests?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1015,2020-06-17T11:42:30Z,2020-06-17T16:36:01Z,2020-06-17T16:36:01Z,MERGED,True,2,2,1,https://github.com/cool-RR,Use chain.from_iterable in test_diff.py,1,[],https://github.com/libgit2/pygit2/pull/1015,https://github.com/cool-RR,1,https://github.com/libgit2/pygit2/pull/1015,"This is a faster and more idiomatic way of using itertools.chain. Instead of computing all the items in the iterable and storing them in memory, they are computed one-by-one and never stored as a huge list. This can save on both runtime and memory space.","This is a faster and more idiomatic way of using itertools.chain. Instead of computing all the items in the iterable and storing them in memory, they are computed one-by-one and never stored as a huge list. This can save on both runtime and memory space.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1019,2020-07-13T15:50:30Z,2020-07-15T16:59:54Z,2020-07-15T17:00:31Z,CLOSED,False,46,2,2,https://github.com/ddevault,Add Repository.applies,1,[],https://github.com/libgit2/pygit2/pull/1019,https://github.com/ddevault,1,https://github.com/libgit2/pygit2/pull/1019,"To test the applicability of a patch.
GIT_APPLY_CHECK was added in libgit2/libgit2#5227 and shipped in 0.99.0.","To test the applicability of a patch.
GIT_APPLY_CHECK was added in libgit2/libgit2#5227 and shipped in 0.99.0.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1019,2020-07-13T15:50:30Z,2020-07-15T16:59:54Z,2020-07-15T17:00:31Z,CLOSED,False,46,2,2,https://github.com/ddevault,Add Repository.applies,1,[],https://github.com/libgit2/pygit2/pull/1019,https://github.com/ddevault,2,https://github.com/libgit2/pygit2/pull/1019#issuecomment-658155245,"To test the applicability of a patch.
GIT_APPLY_CHECK was added in libgit2/libgit2#5227 and shipped in 0.99.0.",Thanks. It's super cool how CPython is full of silly footguns like that.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1019,2020-07-13T15:50:30Z,2020-07-15T16:59:54Z,2020-07-15T17:00:31Z,CLOSED,False,46,2,2,https://github.com/ddevault,Add Repository.applies,1,[],https://github.com/libgit2/pygit2/pull/1019,https://github.com/ddevault,3,https://github.com/libgit2/pygit2/pull/1019#issuecomment-658156186,"To test the applicability of a patch.
GIT_APPLY_CHECK was added in libgit2/libgit2#5227 and shipped in 0.99.0.","On a second look, I also took the opportunity to switch it to testing against the index instead of the workdir, so it can be used on bare repos (which is my use-case anyway).",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1019,2020-07-13T15:50:30Z,2020-07-15T16:59:54Z,2020-07-15T17:00:31Z,CLOSED,False,46,2,2,https://github.com/ddevault,Add Repository.applies,1,[],https://github.com/libgit2/pygit2/pull/1019,https://github.com/jdavid,4,https://github.com/libgit2/pygit2/pull/1019#issuecomment-658870865,"To test the applicability of a patch.
GIT_APPLY_CHECK was added in libgit2/libgit2#5227 and shipped in 0.99.0.","The location should be a parameter. I would keep it simple and make the parameter mandatory (if it had a default it should be GIT_APPLY_LOCATION_WORKDIR, for consistency with Repository_apply).",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1019,2020-07-13T15:50:30Z,2020-07-15T16:59:54Z,2020-07-15T17:00:31Z,CLOSED,False,46,2,2,https://github.com/ddevault,Add Repository.applies,1,[],https://github.com/libgit2/pygit2/pull/1019,https://github.com/ddevault,5,https://github.com/libgit2/pygit2/pull/1019#issuecomment-658871345,"To test the applicability of a patch.
GIT_APPLY_CHECK was added in libgit2/libgit2#5227 and shipped in 0.99.0.","There's not really any reason to test this against the workdir, though.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1019,2020-07-13T15:50:30Z,2020-07-15T16:59:54Z,2020-07-15T17:00:31Z,CLOSED,False,46,2,2,https://github.com/ddevault,Add Repository.applies,1,[],https://github.com/libgit2/pygit2/pull/1019,https://github.com/jdavid,6,https://github.com/libgit2/pygit2/pull/1019#issuecomment-658877879,"To test the applicability of a patch.
GIT_APPLY_CHECK was added in libgit2/libgit2#5227 and shipped in 0.99.0.","Okay, then I will merge it.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1019,2020-07-13T15:50:30Z,2020-07-15T16:59:54Z,2020-07-15T17:00:31Z,CLOSED,False,46,2,2,https://github.com/ddevault,Add Repository.applies,1,[],https://github.com/libgit2/pygit2/pull/1019,https://github.com/jdavid,7,https://github.com/libgit2/pygit2/pull/1019#issuecomment-658883326,"To test the applicability of a patch.
GIT_APPLY_CHECK was added in libgit2/libgit2#5227 and shipped in 0.99.0.","umh, I already merged (from the command line) and pushed, but the PR is still open, so closing manually..",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1019,2020-07-13T15:50:30Z,2020-07-15T16:59:54Z,2020-07-15T17:00:31Z,CLOSED,False,46,2,2,https://github.com/ddevault,Add Repository.applies,1,[],https://github.com/libgit2/pygit2/pull/1019,https://github.com/ddevault,8,https://github.com/libgit2/pygit2/pull/1019#issuecomment-658883748,"To test the applicability of a patch.
GIT_APPLY_CHECK was added in libgit2/libgit2#5227 and shipped in 0.99.0.",Thanks!,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1022,2020-07-23T08:52:40Z,2020-07-24T11:39:51Z,2020-07-24T11:39:51Z,MERGED,True,392,4,12,https://github.com/rcoup,Expand revparse support,3,[],https://github.com/libgit2/pygit2/pull/1022,https://github.com/rcoup,1,https://github.com/libgit2/pygit2/pull/1022,"Expands revision parsing support:


adds Repository.revparse_with_reference() which maps to git_revparse_ext() — takes the same arguments as revparse_single() but returns a 2-tuple (Object, Reference) where the revspec is a reference eg: master.
a. ❓ Not sure on naming? find_revision()?
b. ❓ Should we deprecate Repository.revparse_single() in favour of this rather than having two methods?
c. ❓ Or merge them via something like revparse_single(revspec, with_reference=True)


adds Repository.revparse() which maps to git_revparse() — does range requests (eg: HEAD^1...new@{yesterday}). Returns a RevSpec object which has .from_object, .to_object, and .intents properties.


Adds a crude repr() implementation for Object-ish classes. eg: <pygit2.Object{commit:5ebeeebb320790caf276b9fc8b24546d63316533}>. I kinda feel we should be adding useful repr() methods to all classes going forward, otherwise debugging or exploration via a Python shell is unnecessarily slow.","Expands revision parsing support:


adds Repository.revparse_with_reference() which maps to git_revparse_ext() — takes the same arguments as revparse_single() but returns a 2-tuple (Object, Reference) where the revspec is a reference eg: master.
a. ❓ Not sure on naming? find_revision()?
b. ❓ Should we deprecate Repository.revparse_single() in favour of this rather than having two methods?
c. ❓ Or merge them via something like revparse_single(revspec, with_reference=True)


adds Repository.revparse() which maps to git_revparse() — does range requests (eg: HEAD^1...new@{yesterday}). Returns a RevSpec object which has .from_object, .to_object, and .intents properties.


Adds a crude repr() implementation for Object-ish classes. eg: <pygit2.Object{commit:5ebeeebb320790caf276b9fc8b24546d63316533}>. I kinda feel we should be adding useful repr() methods to all classes going forward, otherwise debugging or exploration via a Python shell is unnecessarily slow.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1022,2020-07-23T08:52:40Z,2020-07-24T11:39:51Z,2020-07-24T11:39:51Z,MERGED,True,392,4,12,https://github.com/rcoup,Expand revparse support,3,[],https://github.com/libgit2/pygit2/pull/1022,https://github.com/rcoup,2,https://github.com/libgit2/pygit2/pull/1022#issuecomment-663467601,"Expands revision parsing support:


adds Repository.revparse_with_reference() which maps to git_revparse_ext() — takes the same arguments as revparse_single() but returns a 2-tuple (Object, Reference) where the revspec is a reference eg: master.
a. ❓ Not sure on naming? find_revision()?
b. ❓ Should we deprecate Repository.revparse_single() in favour of this rather than having two methods?
c. ❓ Or merge them via something like revparse_single(revspec, with_reference=True)


adds Repository.revparse() which maps to git_revparse() — does range requests (eg: HEAD^1...new@{yesterday}). Returns a RevSpec object which has .from_object, .to_object, and .intents properties.


Adds a crude repr() implementation for Object-ish classes. eg: <pygit2.Object{commit:5ebeeebb320790caf276b9fc8b24546d63316533}>. I kinda feel we should be adding useful repr() methods to all classes going forward, otherwise debugging or exploration via a Python shell is unnecessarily slow.","I would keep both methods and call the new one revparse_ext.

Done. I renamed RevSpec.intent to .flags to match the libgit2 object as well.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1025,2020-08-02T07:26:47Z,2020-08-02T08:55:18Z,2020-08-02T09:10:36Z,MERGED,True,1,1,1,https://github.com/Legorooj,Allow using tuples as well as lists for StrArray,1,[],https://github.com/libgit2/pygit2/pull/1025,https://github.com/Legorooj,1,https://github.com/libgit2/pygit2/pull/1025,"In StrArray, allow using tuples instead of lists for creating the array.","In StrArray, allow using tuples instead of lists for creating the array.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1027,2020-08-06T16:13:25Z,2020-08-06T16:16:58Z,2020-08-06T16:16:58Z,MERGED,True,2,0,1,https://github.com/rcoup,Fix wheel compatibility with older macOS,1,[],https://github.com/libgit2/pygit2/pull/1027,https://github.com/rcoup,1,https://github.com/libgit2/pygit2/pull/1027,"Python builds support macOS 10.9, build libgit2 with the same macOS deployment target.
Fixes #1026","Python builds support macOS 10.9, build libgit2 with the same macOS deployment target.
Fixes #1026",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1029,2020-08-09T15:50:19Z,2020-08-11T14:24:06Z,2020-08-11T14:24:06Z,MERGED,True,161,37,8,https://github.com/nabijaczleweli,A few bytes-oriented interfaces,5,[],https://github.com/libgit2/pygit2/pull/1029,https://github.com/nabijaczleweli,1,https://github.com/libgit2/pygit2/pull/1029,"As seen on the complimentary git.sr.ht branch.
Ref: #1028","As seen on the complimentary git.sr.ht branch.
Ref: #1028",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1029,2020-08-09T15:50:19Z,2020-08-11T14:24:06Z,2020-08-11T14:24:06Z,MERGED,True,161,37,8,https://github.com/nabijaczleweli,A few bytes-oriented interfaces,5,[],https://github.com/libgit2/pygit2/pull/1029,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/1029#issuecomment-671847836,"As seen on the complimentary git.sr.ht branch.
Ref: #1028","Thanks @nabijaczleweli , looks good, just missing the unit tests.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1029,2020-08-09T15:50:19Z,2020-08-11T14:24:06Z,2020-08-11T14:24:06Z,MERGED,True,161,37,8,https://github.com/nabijaczleweli,A few bytes-oriented interfaces,5,[],https://github.com/libgit2/pygit2/pull/1029,https://github.com/nabijaczleweli,3,https://github.com/libgit2/pygit2/pull/1029#issuecomment-671875770,"As seen on the complimentary git.sr.ht branch.
Ref: #1028",Tests added,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1029,2020-08-09T15:50:19Z,2020-08-11T14:24:06Z,2020-08-11T14:24:06Z,MERGED,True,161,37,8,https://github.com/nabijaczleweli,A few bytes-oriented interfaces,5,[],https://github.com/libgit2/pygit2/pull/1029,https://github.com/nabijaczleweli,4,https://github.com/libgit2/pygit2/pull/1029#issuecomment-671883493,"As seen on the complimentary git.sr.ht branch.
Ref: #1028","hm, the test failing on NT is
__________________________ test_lookup_branch_local ___________________________
    def test_lookup_branch_local(testrepo):
        assert testrepo.lookup_branch('not-exists') is None
        assert testrepo.lookup_branch(b'not-exists') is None
>       assert testrepo.lookup_branch(b'\xb1') is None
E       _pygit2.InvalidSpecError

I'm assuming this is because it can't be sensibly converted to UTF-16 or it's just outside the NTFS Windows namespace; wrapped this in a check for os.name==""posix""",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1031,2020-08-15T21:19:49Z,2020-08-17T08:35:30Z,2020-08-17T08:35:30Z,MERGED,True,2,0,1,https://github.com/nabijaczleweli,Add missing GIT_BLAME_* constants,1,[],https://github.com/libgit2/pygit2/pull/1031,https://github.com/nabijaczleweli,1,https://github.com/libgit2/pygit2/pull/1031,As seen on https://libgit2.org/libgit2/#HEAD/type/git_blame_flag_t,As seen on https://libgit2.org/libgit2/#HEAD/type/git_blame_flag_t,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1031,2020-08-15T21:19:49Z,2020-08-17T08:35:30Z,2020-08-17T08:35:30Z,MERGED,True,2,0,1,https://github.com/nabijaczleweli,Add missing GIT_BLAME_* constants,1,[],https://github.com/libgit2/pygit2/pull/1031,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/1031#issuecomment-674515574,As seen on https://libgit2.org/libgit2/#HEAD/type/git_blame_flag_t,"GIT_BLAME_IGNORE_WHITESPACE is only in libgit2's master branch, but we follow the maint/v1.0 branch",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1031,2020-08-15T21:19:49Z,2020-08-17T08:35:30Z,2020-08-17T08:35:30Z,MERGED,True,2,0,1,https://github.com/nabijaczleweli,Add missing GIT_BLAME_* constants,1,[],https://github.com/libgit2/pygit2/pull/1031,https://github.com/nabijaczleweli,3,https://github.com/libgit2/pygit2/pull/1031#issuecomment-674515969,As seen on https://libgit2.org/libgit2/#HEAD/type/git_blame_flag_t,Updated,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1044,2020-11-01T22:41:21Z,2020-11-03T07:33:59Z,2020-11-03T21:14:39Z,MERGED,True,112,18,7,https://github.com/olsen232,"Add support for open_repository_ext(path, flags)",1,[],https://github.com/libgit2/pygit2/pull/1044,https://github.com/olsen232,1,https://github.com/libgit2/pygit2/pull/1044,"libgit2 supports extra flags when opening a repository -

GIT_REPOSITORY_OPEN_NO_SEARCH
GIT_REPOSITORY_OPEN_CROSS_FS
GIT_REPOSITORY_OPEN_BARE
GIT_REPOSITORY_OPEN_NO_DOTGIT
GIT_REPOSITORY_OPEN_FROM_ENV

The function which takes these extra flags is called open_repository_ext.
Now this same functionality is available in pygit2:
>>> pygit2.Repository(path=None, flags=0)","libgit2 supports extra flags when opening a repository -

GIT_REPOSITORY_OPEN_NO_SEARCH
GIT_REPOSITORY_OPEN_CROSS_FS
GIT_REPOSITORY_OPEN_BARE
GIT_REPOSITORY_OPEN_NO_DOTGIT
GIT_REPOSITORY_OPEN_FROM_ENV

The function which takes these extra flags is called open_repository_ext.
Now this same functionality is available in pygit2:
>>> pygit2.Repository(path=None, flags=0)",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1044,2020-11-01T22:41:21Z,2020-11-03T07:33:59Z,2020-11-03T21:14:39Z,MERGED,True,112,18,7,https://github.com/olsen232,"Add support for open_repository_ext(path, flags)",1,[],https://github.com/libgit2/pygit2/pull/1044,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/1044#issuecomment-720339212,"libgit2 supports extra flags when opening a repository -

GIT_REPOSITORY_OPEN_NO_SEARCH
GIT_REPOSITORY_OPEN_CROSS_FS
GIT_REPOSITORY_OPEN_BARE
GIT_REPOSITORY_OPEN_NO_DOTGIT
GIT_REPOSITORY_OPEN_FROM_ENV

The function which takes these extra flags is called open_repository_ext.
Now this same functionality is available in pygit2:
>>> pygit2.Repository(path=None, flags=0)","Looks good, thanks, but there's 1 unit test failing, probably because you removed the test for __fspath__. Pypy implementation of PyUnicode_FSConverter doesn't yet support the path protocol.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1044,2020-11-01T22:41:21Z,2020-11-03T07:33:59Z,2020-11-03T21:14:39Z,MERGED,True,112,18,7,https://github.com/olsen232,"Add support for open_repository_ext(path, flags)",1,[],https://github.com/libgit2/pygit2/pull/1044,https://github.com/olsen232,3,https://github.com/libgit2/pygit2/pull/1044#issuecomment-720804933,"libgit2 supports extra flags when opening a repository -

GIT_REPOSITORY_OPEN_NO_SEARCH
GIT_REPOSITORY_OPEN_CROSS_FS
GIT_REPOSITORY_OPEN_BARE
GIT_REPOSITORY_OPEN_NO_DOTGIT
GIT_REPOSITORY_OPEN_FROM_ENV

The function which takes these extra flags is called open_repository_ext.
Now this same functionality is available in pygit2:
>>> pygit2.Repository(path=None, flags=0)",@jdavid Fixed - please take another look,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1047,2020-11-10T09:38:41Z,2020-11-10T10:12:07Z,2020-11-10T10:12:07Z,MERGED,True,6,6,4,https://github.com/jbenc,Use returned buffer size of git_buf,1,[],https://github.com/libgit2/pygit2/pull/1047,https://github.com/jbenc,1,https://github.com/libgit2/pygit2/pull/1047,"The returned string may contain a '\0' character. Although not common, it
can happen e.g. in the diff output. Instead of truncating the output on the
null character, use the returned size from git_buf.
Fixes #1043","The returned string may contain a '\0' character. Although not common, it
can happen e.g. in the diff output. Instead of truncating the output on the
null character, use the returned size from git_buf.
Fixes #1043",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1048,2020-11-13T14:12:29Z,2020-11-17T19:04:15Z,2020-11-17T19:05:28Z,MERGED,True,243,1,7,https://github.com/jeremywestwood,Add support for PackBuilder methods,9,[],https://github.com/libgit2/pygit2/pull/1048,https://github.com/jeremywestwood,1,https://github.com/libgit2/pygit2/pull/1048,"A (very much WIP) attempt to add support for the Packbuilder methods from Libgit2 to create .pack and .idx files for a repository.
I just wanted to get initial input on whether the approach taken here is correct, or if I should be structuring it a different way?
I based the overall strategy on what was done for Libgit2Sharp: libgit2/libgit2sharp#1183
TODOs:

Handle the ""owned"" parameter correctly (if its needed?)
Write tests

Once I've got some feedback and done the TODOs then I'll write up a proper pull request.","A (very much WIP) attempt to add support for the Packbuilder methods from Libgit2 to create .pack and .idx files for a repository.
I just wanted to get initial input on whether the approach taken here is correct, or if I should be structuring it a different way?
I based the overall strategy on what was done for Libgit2Sharp: libgit2/libgit2sharp#1183
TODOs:

Handle the ""owned"" parameter correctly (if its needed?)
Write tests

Once I've got some feedback and done the TODOs then I'll write up a proper pull request.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1048,2020-11-13T14:12:29Z,2020-11-17T19:04:15Z,2020-11-17T19:05:28Z,MERGED,True,243,1,7,https://github.com/jeremywestwood,Add support for PackBuilder methods,9,[],https://github.com/libgit2/pygit2/pull/1048,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/1048#issuecomment-727232167,"A (very much WIP) attempt to add support for the Packbuilder methods from Libgit2 to create .pack and .idx files for a repository.
I just wanted to get initial input on whether the approach taken here is correct, or if I should be structuring it a different way?
I based the overall strategy on what was done for Libgit2Sharp: libgit2/libgit2sharp#1183
TODOs:

Handle the ""owned"" parameter correctly (if its needed?)
Write tests

Once I've got some feedback and done the TODOs then I'll write up a proper pull request.","I don't think you need the owned parameter. Also I think you could do this only with cffi, and avoid the C code in src/, it should be much simpler; you can look at pygit2/index.py for an example of a feature (Index) done entirely in cffi.
Thanks",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1048,2020-11-13T14:12:29Z,2020-11-17T19:04:15Z,2020-11-17T19:05:28Z,MERGED,True,243,1,7,https://github.com/jeremywestwood,Add support for PackBuilder methods,9,[],https://github.com/libgit2/pygit2/pull/1048,https://github.com/jdavid,3,https://github.com/libgit2/pygit2/pull/1048#issuecomment-727894022,"A (very much WIP) attempt to add support for the Packbuilder methods from Libgit2 to create .pack and .idx files for a repository.
I just wanted to get initial input on whether the approach taken here is correct, or if I should be structuring it a different way?
I based the overall strategy on what was done for Libgit2Sharp: libgit2/libgit2sharp#1183
TODOs:

Handle the ""owned"" parameter correctly (if its needed?)
Write tests

Once I've got some feedback and done the TODOs then I'll write up a proper pull request.","Looks good. Just don't see _from_c used anywhere, maybe you don't need it. I'll do a more detailed review when the tests will be available.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1048,2020-11-13T14:12:29Z,2020-11-17T19:04:15Z,2020-11-17T19:05:28Z,MERGED,True,243,1,7,https://github.com/jeremywestwood,Add support for PackBuilder methods,9,[],https://github.com/libgit2/pygit2/pull/1048,https://github.com/jeremywestwood,4,https://github.com/libgit2/pygit2/pull/1048#issuecomment-727993466,"A (very much WIP) attempt to add support for the Packbuilder methods from Libgit2 to create .pack and .idx files for a repository.
I just wanted to get initial input on whether the approach taken here is correct, or if I should be structuring it a different way?
I based the overall strategy on what was done for Libgit2Sharp: libgit2/libgit2sharp#1183
TODOs:

Handle the ""owned"" parameter correctly (if its needed?)
Write tests

Once I've got some feedback and done the TODOs then I'll write up a proper pull request.","Thanks for the comments. I've updated based on them and added the tests.
Please let me know any other feedback.
EDIT: I see some of my tests are not working on windows, am investigating
UPDATE: Should be resolved now",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1048,2020-11-13T14:12:29Z,2020-11-17T19:04:15Z,2020-11-17T19:05:28Z,MERGED,True,243,1,7,https://github.com/jeremywestwood,Add support for PackBuilder methods,9,[],https://github.com/libgit2/pygit2/pull/1048,https://github.com/jdavid,5,https://github.com/libgit2/pygit2/pull/1048#issuecomment-729138115,"A (very much WIP) attempt to add support for the Packbuilder methods from Libgit2 to create .pack and .idx files for a repository.
I just wanted to get initial input on whether the approach taken here is correct, or if I should be structuring it a different way?
I based the overall strategy on what was done for Libgit2Sharp: libgit2/libgit2sharp#1183
TODOs:

Handle the ""owned"" parameter correctly (if its needed?)
Write tests

Once I've got some feedback and done the TODOs then I'll write up a proper pull request.","Merged, thanks!",True,{'THUMBS_UP': ['https://github.com/jeremywestwood']}
libgit2/pygit2,https://github.com/libgit2/pygit2,1052,2020-12-14T01:11:56Z,2020-12-14T07:00:16Z,2020-12-14T07:07:34Z,MERGED,True,4,2,1,https://github.com/craigds,Remove `add-path` command causing CI to fail,1,[],https://github.com/libgit2/pygit2/pull/1052,https://github.com/craigds,1,https://github.com/libgit2/pygit2/pull/1052,"add-path was deprecated and then removed recently:
https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/","add-path was deprecated and then removed recently:
https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1056,2020-12-24T01:50:15Z,2020-12-24T07:59:38Z,2020-12-24T19:19:54Z,MERGED,True,20,0,3,https://github.com/SpaceManiac,Add binding for git_config_delete_multivar,1,[],https://github.com/libgit2/pygit2/pull/1056,https://github.com/SpaceManiac,1,https://github.com/libgit2/pygit2/pull/1056,https://libgit2.org/libgit2/#HEAD/group/config/git_config_delete_multivar,https://libgit2.org/libgit2/#HEAD/group/config/git_config_delete_multivar,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1058,2021-01-08T16:49:45Z,2021-01-08T17:33:43Z,2021-01-08T17:33:43Z,MERGED,True,23,0,2,https://github.com/rcoup,repository: add .is_shallow to detect shallow clones,1,[],https://github.com/libgit2/pygit2/pull/1058,https://github.com/rcoup,1,https://github.com/libgit2/pygit2/pull/1058,"Add support for git_repository_is_shallow() to Pygit2 to indicate whether a repository is a shallow clone or not.
libgit2 currently doesn't support shallow clones beyond detecting there's a non-empty .git/shallow file but it's helpful nonetheless.","Add support for git_repository_is_shallow() to Pygit2 to indicate whether a repository is a shallow clone or not.
libgit2 currently doesn't support shallow clones beyond detecting there's a non-empty .git/shallow file but it's helpful nonetheless.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1062,2021-01-19T09:13:56Z,2021-01-19T09:48:16Z,2021-01-19T10:16:13Z,MERGED,True,52,12,3,https://github.com/pmrowla,refs: support message param when creating reference,1,[],https://github.com/libgit2/pygit2/pull/1062,https://github.com/pmrowla,1,https://github.com/libgit2/pygit2/pull/1062,"Adds message keyword parameter to Repository.create_reference... functions.
Will close #1061.","Adds message keyword parameter to Repository.create_reference... functions.
Will close #1061.",True,{'THUMBS_UP': ['https://github.com/efiop']}
libgit2/pygit2,https://github.com/libgit2/pygit2,1063,2021-02-11T09:44:27Z,2021-02-13T09:07:54Z,2021-02-13T09:08:04Z,MERGED,True,52,6,1,https://github.com/sathieu,Enable automatic proxy detection,1,[],https://github.com/libgit2/pygit2/pull/1063,https://github.com/sathieu,1,https://github.com/libgit2/pygit2/pull/1063,See #642,See #642,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1063,2021-02-11T09:44:27Z,2021-02-13T09:07:54Z,2021-02-13T09:08:04Z,MERGED,True,52,6,1,https://github.com/sathieu,Enable automatic proxy detection,1,[],https://github.com/libgit2/pygit2/pull/1063,https://github.com/sathieu,2,https://github.com/libgit2/pygit2/pull/1063#issuecomment-778183988,See #642,I've enabled proxy configuration for 4 methods.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1063,2021-02-11T09:44:27Z,2021-02-13T09:07:54Z,2021-02-13T09:08:04Z,MERGED,True,52,6,1,https://github.com/sathieu,Enable automatic proxy detection,1,[],https://github.com/libgit2/pygit2/pull/1063,https://github.com/jdavid,3,https://github.com/libgit2/pygit2/pull/1063#issuecomment-778587592,See #642,Thanks!,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1066,2021-03-06T17:08:34Z,2021-03-07T12:52:29Z,2021-03-07T13:08:55Z,CLOSED,False,6,3,3,https://github.com/mgorny,Use built-in functools.cached_property in py3.8+,2,[],https://github.com/libgit2/pygit2/pull/1066,https://github.com/mgorny,1,https://github.com/libgit2/pygit2/pull/1066,"Python 3.8+ supplies the cached-property functionality in functools
module, so use that instead of pulling in the backport package whenever
possible.","Python 3.8+ supplies the cached-property functionality in functools
module, so use that instead of pulling in the backport package whenever
possible.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1066,2021-03-06T17:08:34Z,2021-03-07T12:52:29Z,2021-03-07T13:08:55Z,CLOSED,False,6,3,3,https://github.com/mgorny,Use built-in functools.cached_property in py3.8+,2,[],https://github.com/libgit2/pygit2/pull/1066,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/1066#issuecomment-792274314,"Python 3.8+ supplies the cached-property functionality in functools
module, so use that instead of pulling in the backport package whenever
possible.","Thanks @mgorny , I've picked the first commit, but implemented a different solution for the second commit.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1066,2021-03-06T17:08:34Z,2021-03-07T12:52:29Z,2021-03-07T13:08:55Z,CLOSED,False,6,3,3,https://github.com/mgorny,Use built-in functools.cached_property in py3.8+,2,[],https://github.com/libgit2/pygit2/pull/1066,https://github.com/mgorny,3,https://github.com/libgit2/pygit2/pull/1066#issuecomment-792276593,"Python 3.8+ supplies the cached-property functionality in functools
module, so use that instead of pulling in the backport package whenever
possible.",Thanks!,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1068,2021-03-19T03:38:24Z,2021-03-19T10:31:21Z,2021-03-19T10:31:21Z,MERGED,True,1,1,1,https://github.com/uniphil,Fix a tiny docs typo,1,[],https://github.com/libgit2/pygit2/pull/1068,https://github.com/uniphil,1,https://github.com/libgit2/pygit2/pull/1068,callabck => callback,callabck => callback,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1071,2021-04-08T07:44:42Z,2021-04-08T08:40:32Z,2021-04-08T08:44:49Z,MERGED,True,3,0,1,https://github.com/pmrowla,merge: import GIT_MERGE_PREFERENCE flags,1,[],https://github.com/libgit2/pygit2/pull/1071,https://github.com/pmrowla,1,https://github.com/libgit2/pygit2/pull/1071,"repo.merge_analysis() returns a tuple of (analysis, preference) where the first field is GIT_MERGE_ANALYSIS... flags and the second is GIT_MERGE_PREFERENCE... flags, but the git_merge_preference_t names are not currently accessible in pygit","repo.merge_analysis() returns a tuple of (analysis, preference) where the first field is GIT_MERGE_ANALYSIS... flags and the second is GIT_MERGE_PREFERENCE... flags, but the git_merge_preference_t names are not currently accessible in pygit",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1072,2021-04-13T23:20:56Z,2021-04-14T07:09:08Z,2021-04-14T09:47:42Z,MERGED,True,1,1,1,https://github.com/cjolowicz,Fix garbled mirror configuration in recipe for `git clone --mirror`,1,[],https://github.com/libgit2/pygit2/pull/1072,https://github.com/cjolowicz,1,https://github.com/libgit2/pygit2/pull/1072,"The documentation contains a recipe for how to emulate git clone --mirror. In
the example code, the init_remote callback constructs the mirror configuration
passing name to str.format. However, the callback receives the name (and
url) as bytes, so str.format would return something like this:
""remote.b'origin'.mirror""

This commit fixes the code example by decoding name when used with str.format.
The invocation of repo.remotes.create in the same example works fine as is,
because that function invokes to_bytes on its arguments, and to_bytes is a
noop when passed bytes.","The documentation contains a recipe for how to emulate git clone --mirror. In
the example code, the init_remote callback constructs the mirror configuration
passing name to str.format. However, the callback receives the name (and
url) as bytes, so str.format would return something like this:
""remote.b'origin'.mirror""

This commit fixes the code example by decoding name when used with str.format.
The invocation of repo.remotes.create in the same example works fine as is,
because that function invokes to_bytes on its arguments, and to_bytes is a
noop when passed bytes.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1078,2021-05-18T07:11:36Z,2021-05-19T10:07:55Z,2021-05-19T10:11:21Z,MERGED,True,21,3,3,https://github.com/odidev,Add linux aarch64 wheel support,1,[],https://github.com/libgit2/pygit2/pull/1078,https://github.com/odidev,1,https://github.com/libgit2/pygit2/pull/1078,"Added linux aarch64 wheel support.
Fixes #1077, @jdavid  Could you please review this PR?","Added linux aarch64 wheel support.
Fixes #1077, @jdavid  Could you please review this PR?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1078,2021-05-18T07:11:36Z,2021-05-19T10:07:55Z,2021-05-19T10:11:21Z,MERGED,True,21,3,3,https://github.com/odidev,Add linux aarch64 wheel support,1,[],https://github.com/libgit2/pygit2/pull/1078,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/1078#issuecomment-843955950,"Added linux aarch64 wheel support.
Fixes #1077, @jdavid  Could you please review this PR?","Merged, thanks!",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1083,2021-07-01T12:37:45Z,2021-07-04T07:21:11Z,2021-07-05T07:23:02Z,MERGED,True,27,1,4,https://github.com/boehmseb,Pass blame flags to blame options object.,3,[],https://github.com/libgit2/pygit2/pull/1083,https://github.com/boehmseb,1,https://github.com/libgit2/pygit2/pull/1083,"The GIT_BLAME_* flags passed to Repository.blame() were never assigned to the git_blame_options struct meaning that they never had any effect on the blame results. This PR fixes this issue by forwarding these flags to the options object.
I can confirm that the GIT_BLAME_IGNORE_WHITESPACE flag is handled properly when I test this fix locally. But if you want me to add some tests please let me know. Since I am new to this project I'm not entirely sure how you handle test inputs that are git repositories and would require some help.
Resolves #925","The GIT_BLAME_* flags passed to Repository.blame() were never assigned to the git_blame_options struct meaning that they never had any effect on the blame results. This PR fixes this issue by forwarding these flags to the options object.
I can confirm that the GIT_BLAME_IGNORE_WHITESPACE flag is handled properly when I test this fix locally. But if you want me to add some tests please let me know. Since I am new to this project I'm not entirely sure how you handle test inputs that are git repositories and would require some help.
Resolves #925",True,"{'THUMBS_UP': ['https://github.com/vulder'], 'HOORAY': ['https://github.com/vulder']}"
libgit2/pygit2,https://github.com/libgit2/pygit2,1083,2021-07-01T12:37:45Z,2021-07-04T07:21:11Z,2021-07-05T07:23:02Z,MERGED,True,27,1,4,https://github.com/boehmseb,Pass blame flags to blame options object.,3,[],https://github.com/libgit2/pygit2/pull/1083,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/1083#issuecomment-872316451,"The GIT_BLAME_* flags passed to Repository.blame() were never assigned to the git_blame_options struct meaning that they never had any effect on the blame results. This PR fixes this issue by forwarding these flags to the options object.
I can confirm that the GIT_BLAME_IGNORE_WHITESPACE flag is handled properly when I test this fix locally. But if you want me to add some tests please let me know. Since I am new to this project I'm not entirely sure how you handle test inputs that are git repositories and would require some help.
Resolves #925","Yes please, add a test.
We already have a number of repositories for testing purposes, https://github.com/libgit2/pygit2/tree/master/test/data
Maybe one of them works for your test.
They're exposed as fixtures (see test/conftest.py) so it's very easy to use them, e.g. from test/test_blame.py:
def test_blame_index(testrepo):
    blame = testrepo.blame(PATH)

    assert len(blame) == 3
    [...]",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1083,2021-07-01T12:37:45Z,2021-07-04T07:21:11Z,2021-07-05T07:23:02Z,MERGED,True,27,1,4,https://github.com/boehmseb,Pass blame flags to blame options object.,3,[],https://github.com/libgit2/pygit2/pull/1083,https://github.com/boehmseb,3,https://github.com/libgit2/pygit2/pull/1083#issuecomment-872788292,"The GIT_BLAME_* flags passed to Repository.blame() were never assigned to the git_blame_options struct meaning that they never had any effect on the blame results. This PR fixes this issue by forwarding these flags to the options object.
I can confirm that the GIT_BLAME_IGNORE_WHITESPACE flag is handled properly when I test this fix locally. But if you want me to add some tests please let me know. Since I am new to this project I'm not entirely sure how you handle test inputs that are git repositories and would require some help.
Resolves #925",It does not seem as if one of the existing repositories works for that test. I need a repository that lets me observe the effect of any of the git blame flags. The simplest should be either IGNORE_WHITESPACE or USE_MAILMAP. Should I add a new test repository for this or can I add a commit to an existing one? And how would I do that: is it as simple as tar-ing a git repository and adding a fixture in the former case?,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1083,2021-07-01T12:37:45Z,2021-07-04T07:21:11Z,2021-07-05T07:23:02Z,MERGED,True,27,1,4,https://github.com/boehmseb,Pass blame flags to blame options object.,3,[],https://github.com/libgit2/pygit2/pull/1083,https://github.com/jdavid,4,https://github.com/libgit2/pygit2/pull/1083#issuecomment-872795497,"The GIT_BLAME_* flags passed to Repository.blame() were never assigned to the git_blame_options struct meaning that they never had any effect on the blame results. This PR fixes this issue by forwarding these flags to the options object.
I can confirm that the GIT_BLAME_IGNORE_WHITESPACE flag is handled properly when I test this fix locally. But if you want me to add some tests please let me know. Since I am new to this project I'm not entirely sure how you handle test inputs that are git repositories and would require some help.
Resolves #925","Better add a new commit, to data/testrepo.tar if possible. For example:
$ cd test/data
$ tar xf testrepo.tar
$ cd testrepo
# Do your changes
$ git add [...]                                      # Don't add bye.txt
$ git commit -m ""[...]""
$ cd ..
$ tar cf testrepo.tar testrepo
# Verify the tests pass including the new one
$ git add test/data/testrepo.tar
$ rm test/data/testrepo -r
[...]

If you add a commit to an existing repo then you don't need a new fixture.",True,{'THUMBS_UP': ['https://github.com/boehmseb']}
libgit2/pygit2,https://github.com/libgit2/pygit2,1083,2021-07-01T12:37:45Z,2021-07-04T07:21:11Z,2021-07-05T07:23:02Z,MERGED,True,27,1,4,https://github.com/boehmseb,Pass blame flags to blame options object.,3,[],https://github.com/libgit2/pygit2/pull/1083,https://github.com/boehmseb,5,https://github.com/libgit2/pygit2/pull/1083#issuecomment-872811495,"The GIT_BLAME_* flags passed to Repository.blame() were never assigned to the git_blame_options struct meaning that they never had any effect on the blame results. This PR fixes this issue by forwarding these flags to the options object.
I can confirm that the GIT_BLAME_IGNORE_WHITESPACE flag is handled properly when I test this fix locally. But if you want me to add some tests please let me know. Since I am new to this project I'm not entirely sure how you handle test inputs that are git repositories and would require some help.
Resolves #925",There are quite some tests failing if I add a commit to that repo simply because the HEAD id changes. Should I just fix those tests or do you suggest a different approach then?,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1083,2021-07-01T12:37:45Z,2021-07-04T07:21:11Z,2021-07-05T07:23:02Z,MERGED,True,27,1,4,https://github.com/boehmseb,Pass blame flags to blame options object.,3,[],https://github.com/libgit2/pygit2/pull/1083,https://github.com/jdavid,6,https://github.com/libgit2/pygit2/pull/1083#issuecomment-872815792,"The GIT_BLAME_* flags passed to Repository.blame() were never assigned to the git_blame_options struct meaning that they never had any effect on the blame results. This PR fixes this issue by forwarding these flags to the options object.
I can confirm that the GIT_BLAME_IGNORE_WHITESPACE flag is handled properly when I test this fix locally. But if you want me to add some tests please let me know. Since I am new to this project I'm not entirely sure how you handle test inputs that are git repositories and would require some help.
Resolves #925",Oh. Choose the approach that is easier for you.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1083,2021-07-01T12:37:45Z,2021-07-04T07:21:11Z,2021-07-05T07:23:02Z,MERGED,True,27,1,4,https://github.com/boehmseb,Pass blame flags to blame options object.,3,[],https://github.com/libgit2/pygit2/pull/1083,https://github.com/boehmseb,7,https://github.com/libgit2/pygit2/pull/1083#issuecomment-872818055,"The GIT_BLAME_* flags passed to Repository.blame() were never assigned to the git_blame_options struct meaning that they never had any effect on the blame results. This PR fixes this issue by forwarding these flags to the options object.
I can confirm that the GIT_BLAME_IGNORE_WHITESPACE flag is handled properly when I test this fix locally. But if you want me to add some tests please let me know. Since I am new to this project I'm not entirely sure how you handle test inputs that are git repositories and would require some help.
Resolves #925","The alternative would be adding another repository. I'm fine with both.
I have another problem however: I'm not sure how to access the GIT_BLAME_* constants in the test. When I use pygit in my project, those constants are defined in the pygit2 module, but that does not seem to work here. I assume those constants are somehow generated from the C sources, but I have no idea how that works.
I figured that one out.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1083,2021-07-01T12:37:45Z,2021-07-04T07:21:11Z,2021-07-05T07:23:02Z,MERGED,True,27,1,4,https://github.com/boehmseb,Pass blame flags to blame options object.,3,[],https://github.com/libgit2/pygit2/pull/1083,https://github.com/boehmseb,8,https://github.com/libgit2/pygit2/pull/1083#issuecomment-872836810,"The GIT_BLAME_* flags passed to Repository.blame() were never assigned to the git_blame_options struct meaning that they never had any effect on the blame results. This PR fixes this issue by forwarding these flags to the options object.
I can confirm that the GIT_BLAME_IGNORE_WHITESPACE flag is handled properly when I test this fix locally. But if you want me to add some tests please let me know. Since I am new to this project I'm not entirely sure how you handle test inputs that are git repositories and would require some help.
Resolves #925","I decided to added a new repository (essentially a copy of testrepo with an additional whitespace-only commit) since that was way easier than modifying all the other tests to work with a modified testrepo.
The test I added passes the IGNORE_WHITESPACE flag to blame, so the blame output should ignore my additional commit and therefore, be identical to the blame for the testrepo.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1087,2021-08-10T09:55:08Z,2021-08-10T10:56:56Z,2021-08-10T10:56:56Z,MERGED,True,1,0,1,https://github.com/pmrowla,checkout: support GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES,1,[],https://github.com/libgit2/pygit2/pull/1087,https://github.com/pmrowla,1,https://github.com/libgit2/pygit2/pull/1087,"Adds GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES constant. This checkout strategy is needed when checking out directories on windows which may be opened in other processes, which will cause the OS to prevent removing the directory.","Adds GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES constant. This checkout strategy is needed when checking out directories on windows which may be opened in other processes, which will cause the OS to prevent removing the directory.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1089,2021-09-02T21:49:19Z,2021-09-16T09:20:45Z,2021-09-16T11:13:24Z,CLOSED,False,2,2,1,https://github.com/chenrui333,build: requires libgit2 1.2.x,1,[],https://github.com/libgit2/pygit2/pull/1089,https://github.com/chenrui333,1,https://github.com/libgit2/pygit2/pull/1089,"relates to Homebrew/homebrew-core#84518
  src/types.h:36:2: error: You need a compatible libgit2 version (1.1.x)
  #error You need a compatible libgit2 version (1.1.x)
   ^","relates to Homebrew/homebrew-core#84518
  src/types.h:36:2: error: You need a compatible libgit2 version (1.1.x)
  #error You need a compatible libgit2 version (1.1.x)
   ^",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1089,2021-09-02T21:49:19Z,2021-09-16T09:20:45Z,2021-09-16T11:13:24Z,CLOSED,False,2,2,1,https://github.com/chenrui333,build: requires libgit2 1.2.x,1,[],https://github.com/libgit2/pygit2/pull/1089,https://github.com/chenrui333,2,https://github.com/libgit2/pygit2/pull/1089#issuecomment-916497437,"relates to Homebrew/homebrew-core#84518
  src/types.h:36:2: error: You need a compatible libgit2 version (1.1.x)
  #error You need a compatible libgit2 version (1.1.x)
   ^",@adamgolebiowski any chance of merging this?,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1089,2021-09-02T21:49:19Z,2021-09-16T09:20:45Z,2021-09-16T11:13:24Z,CLOSED,False,2,2,1,https://github.com/chenrui333,build: requires libgit2 1.2.x,1,[],https://github.com/libgit2/pygit2/pull/1089,https://github.com/jdavid,3,https://github.com/libgit2/pygit2/pull/1089#issuecomment-916703794,"relates to Homebrew/homebrew-core#84518
  src/types.h:36:2: error: You need a compatible libgit2 version (1.1.x)
  #error You need a compatible libgit2 version (1.1.x)
   ^",For this to be merged CI must be updated to use 1.2 instead of 1.1,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1089,2021-09-02T21:49:19Z,2021-09-16T09:20:45Z,2021-09-16T11:13:24Z,CLOSED,False,2,2,1,https://github.com/chenrui333,build: requires libgit2 1.2.x,1,[],https://github.com/libgit2/pygit2/pull/1089,https://github.com/Mindavi,4,https://github.com/libgit2/pygit2/pull/1089#issuecomment-917419149,"relates to Homebrew/homebrew-core#84518
  src/types.h:36:2: error: You need a compatible libgit2 version (1.1.x)
  #error You need a compatible libgit2 version (1.1.x)
   ^","These lines at least:

  
    
      pygit2/.travis.yml
    
    
         Line 32
      in
      25f035b
    
  
  
    

        
          
           - LIBSSH2_VERSION=1.9.0 LIBGIT2_VERSION=1.1.0 /bin/sh build.sh test 
        
    
  



  
    
      pygit2/Makefile
    
    
         Line 4
      in
      25f035b
    
  
  
    

        
          
           LIBSSH2_VERSION=1.9.0 LIBGIT2_VERSION=1.1.0 sh build.sh 
        
    
  



  
    
      pygit2/appveyor.yml
    
    
         Line 38
      in
      25f035b
    
  
  
    

        
          
               git clone --depth=1 -b maint/v1.1 https://github.com/libgit2/libgit2.git libgit2 
        
    
  



  
    
      pygit2/.github/workflows/wheels.yml
    
    
         Line 9
      in
      25f035b
    
  
  
    

        
          
           LIBGIT2_VERSION: 1.1.0 
        
    
  



  
    
      pygit2/.github/workflows/tests.yml
    
    
         Line 33
      in
      25f035b
    
  
  
    

        
          
                   LIBSSH2_VERSION=1.9.0 LIBGIT2_VERSION=1.1.0 /bin/sh build.sh test",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1089,2021-09-02T21:49:19Z,2021-09-16T09:20:45Z,2021-09-16T11:13:24Z,CLOSED,False,2,2,1,https://github.com/chenrui333,build: requires libgit2 1.2.x,1,[],https://github.com/libgit2/pygit2/pull/1089,https://github.com/alerque,5,https://github.com/libgit2/pygit2/pull/1089#issuecomment-919503429,"relates to Homebrew/homebrew-core#84518
  src/types.h:36:2: error: You need a compatible libgit2 version (1.1.x)
  #error You need a compatible libgit2 version (1.1.x)
   ^","Having tried to apply this PR as a patch, it looks like it builds but a large portion of the test suite starts failing with errors like this:

ffi.error: struct git_remote_callbacks: wrong offset for field 'payload' (cdef says 96, but C compiler says 104). fix it or use ""...;"" as the last field in the cdef for struct git_remote_callbacks to make it flexible",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1089,2021-09-02T21:49:19Z,2021-09-16T09:20:45Z,2021-09-16T11:13:24Z,CLOSED,False,2,2,1,https://github.com/chenrui333,build: requires libgit2 1.2.x,1,[],https://github.com/libgit2/pygit2/pull/1089,https://github.com/carlocab,6,https://github.com/libgit2/pygit2/pull/1089#issuecomment-920114211,"relates to Homebrew/homebrew-core#84518
  src/types.h:36:2: error: You need a compatible libgit2 version (1.1.x)
  #error You need a compatible libgit2 version (1.1.x)
   ^","Yea, libgit2 added a new field to the git_remote_callbacks struct in libgit2/libgit2@72df17c, so the offset for the payload field should indeed be 104.",True,{'EYES': ['https://github.com/alerque']}
libgit2/pygit2,https://github.com/libgit2/pygit2,1089,2021-09-02T21:49:19Z,2021-09-16T09:20:45Z,2021-09-16T11:13:24Z,CLOSED,False,2,2,1,https://github.com/chenrui333,build: requires libgit2 1.2.x,1,[],https://github.com/libgit2/pygit2/pull/1089,https://github.com/alerque,7,https://github.com/libgit2/pygit2/pull/1089#issuecomment-920118890,"relates to Homebrew/homebrew-core#84518
  src/types.h:36:2: error: You need a compatible libgit2 version (1.1.x)
  #error You need a compatible libgit2 version (1.1.x)
   ^",@carlocab Any chance you can make that adjustment in this PR?,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1089,2021-09-02T21:49:19Z,2021-09-16T09:20:45Z,2021-09-16T11:13:24Z,CLOSED,False,2,2,1,https://github.com/chenrui333,build: requires libgit2 1.2.x,1,[],https://github.com/libgit2/pygit2/pull/1089,https://github.com/carlocab,8,https://github.com/libgit2/pygit2/pull/1089#issuecomment-920128273,"relates to Homebrew/homebrew-core#84518
  src/types.h:36:2: error: You need a compatible libgit2 version (1.1.x)
  #error You need a compatible libgit2 version (1.1.x)
   ^",I'm not familiar enough with the code here to know what the right adjustment is. Do you have a backtrace for the error you saw?,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1089,2021-09-02T21:49:19Z,2021-09-16T09:20:45Z,2021-09-16T11:13:24Z,CLOSED,False,2,2,1,https://github.com/chenrui333,build: requires libgit2 1.2.x,1,[],https://github.com/libgit2/pygit2/pull/1089,https://github.com/alerque,9,https://github.com/libgit2/pygit2/pull/1089#issuecomment-920260458,"relates to Homebrew/homebrew-core#84518
  src/types.h:36:2: error: You need a compatible libgit2 version (1.1.x)
  #error You need a compatible libgit2 version (1.1.x)
   ^","Here is the first of 12 failed / 14 errors I get when applying this PR as a patch to 1.6.1 sources, then building against libgit2-1.2.0, then running python setup.py pytest:
==================================== ERRORS ====================================
__________________ ERROR at setup of test_branches_remote_get __________________

emptyrepo = pygit2.Repository('/tmp/pytest-of-builduser/pytest-0/test_branches_remote_get0/emptyrepo/.git/')

    @pytest.fixture
    def repo(emptyrepo):
        remote = emptyrepo.remotes[0]
>       remote.fetch()

test/test_branch_empty.py:36:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
pygit2/remote.py:141: in fetch
    with git_fetch_options(callbacks) as payload:
/usr/lib/python3.9/contextlib.py:119: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

payload = <pygit2.callbacks.RemoteCallbacks object at 0x7fdcd1673ac0>
opts = None

    @contextmanager
    def git_fetch_options(payload, opts=None):
        if payload is None:
            payload = RemoteCallbacks()

        if opts is None:
>           opts = ffi.new('git_fetch_options *')
E           ffi.error: struct git_remote_callbacks: wrong offset for field 'payload' (cdef says 96, but C compiler says 104). fix it or use ""...;"" as the last field in the cdef for struct git_remote_callbacks to make it flexible

pygit2/callbacks.py:247: error
____________________ ERROR at setup of test_branches_remote ____________________

emptyrepo = pygit2.Repository('/tmp/pytest-of-builduser/pytest-0/test_branches_remote0/emptyrepo/.git/')

    @pytest.fixture
    def repo(emptyrepo):
        remote = emptyrepo.remotes[0]
>       remote.fetch()",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1089,2021-09-02T21:49:19Z,2021-09-16T09:20:45Z,2021-09-16T11:13:24Z,CLOSED,False,2,2,1,https://github.com/chenrui333,build: requires libgit2 1.2.x,1,[],https://github.com/libgit2/pygit2/pull/1089,https://github.com/carlocab,10,https://github.com/libgit2/pygit2/pull/1089#issuecomment-920808577,"relates to Homebrew/homebrew-core#84518
  src/types.h:36:2: error: You need a compatible libgit2 version (1.1.x)
  #error You need a compatible libgit2 version (1.1.x)
   ^","Thanks for the fix, @jdavid.
Here's dcde9ef amended so that it applies to the PyPI tarball, in case anyone needs it:
https://raw.githubusercontent.com/Homebrew/formula-patches/bf370d7782f7686a4a61d8d7d28068e78e28e48c/pygit2/libgit2-1.2.0.patch",True,"{'ROCKET': ['https://github.com/alerque', 'https://github.com/efiop']}"
libgit2/pygit2,https://github.com/libgit2/pygit2,1091,2021-09-27T22:07:52Z,2021-09-28T09:56:33Z,2022-03-06T08:55:51Z,MERGED,True,180,65,5,https://github.com/jorio,Add location argument to Repository.apply/applies,1,[],https://github.com/libgit2/pygit2/pull/1091,https://github.com/jorio,1,https://github.com/libgit2/pygit2/pull/1091,"Currently, Repository.apply() can only be used to act on the workdir.
This PR adds a new ""location"" argument to Repository.apply(). This makes it possible to apply patches to the workdir, index, or both.","Currently, Repository.apply() can only be used to act on the workdir.
This PR adds a new ""location"" argument to Repository.apply(). This makes it possible to apply patches to the workdir, index, or both.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1092,2021-10-01T03:21:35Z,2021-10-06T06:05:25Z,2021-11-04T05:32:49Z,MERGED,True,6,2,4,https://github.com/skshetry,Add support for Python3.10,5,[],https://github.com/libgit2/pygit2/pull/1092,https://github.com/skshetry,1,https://github.com/libgit2/pygit2/pull/1092,"Waiting for appveyor/ci#3741 (fixed in #1103)

Need to also update trove classifiers, tox's env, etc.","Waiting for appveyor/ci#3741 (fixed in #1103)

Need to also update trove classifiers, tox's env, etc.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1092,2021-10-01T03:21:35Z,2021-10-06T06:05:25Z,2021-11-04T05:32:49Z,MERGED,True,6,2,4,https://github.com/skshetry,Add support for Python3.10,5,[],https://github.com/libgit2/pygit2/pull/1092,https://github.com/skshetry,2,https://github.com/libgit2/pygit2/pull/1092#issuecomment-931872960,"Waiting for appveyor/ci#3741 (fixed in #1103)

Need to also update trove classifiers, tox's env, etc.","Also no support for 3.10 in AppVeyor yet.
Waiting for appveyor/ci#3741.
We are so close to release, that I think it's better to wait till the release.",True,"{'THUMBS_UP': ['https://github.com/jdavid', 'https://github.com/dmerejkowsky']}"
libgit2/pygit2,https://github.com/libgit2/pygit2,1092,2021-10-01T03:21:35Z,2021-10-06T06:05:25Z,2021-11-04T05:32:49Z,MERGED,True,6,2,4,https://github.com/skshetry,Add support for Python3.10,5,[],https://github.com/libgit2/pygit2/pull/1092,https://github.com/skshetry,3,https://github.com/libgit2/pygit2/pull/1092#issuecomment-932163682,"Waiting for appveyor/ci#3741 (fixed in #1103)

Need to also update trove classifiers, tox's env, etc.","hmm, this is quiet weird:
/home/runner/work/pygit2/pygit2/ci/cp310/bin/python setup.py egg_info
WARNING: The wheel package is not available.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1092,2021-10-01T03:21:35Z,2021-10-06T06:05:25Z,2021-11-04T05:32:49Z,MERGED,True,6,2,4,https://github.com/skshetry,Add support for Python3.10,5,[],https://github.com/libgit2/pygit2/pull/1092,https://github.com/dmerejkowsky,4,https://github.com/libgit2/pygit2/pull/1092#issuecomment-934258160,"Waiting for appveyor/ci#3741 (fixed in #1103)

Need to also update trove classifiers, tox's env, etc.","WARNING: The wheel package is not available.

Yeah, that can happen depending on how the virtualenv is created. A simple workaroud is to install it with pip:
pip install wheel

I also like to upgrade pip as soon as possible in my own CI scripts",True,{'THUMBS_UP': ['https://github.com/skshetry']}
libgit2/pygit2,https://github.com/libgit2/pygit2,1092,2021-10-01T03:21:35Z,2021-10-06T06:05:25Z,2021-11-04T05:32:49Z,MERGED,True,6,2,4,https://github.com/skshetry,Add support for Python3.10,5,[],https://github.com/libgit2/pygit2/pull/1092,https://github.com/skshetry,5,https://github.com/libgit2/pygit2/pull/1092#issuecomment-935545699,"Waiting for appveyor/ci#3741 (fixed in #1103)

Need to also update trove classifiers, tox's env, etc.","Ahh, python offers 3.10 as python-3.10.0-macos11.pkg even though the support page says ""for macOS 10.9 and later"".
I'll create a separate patch for this.",True,{'THUMBS_UP': ['https://github.com/jdavid']}
libgit2/pygit2,https://github.com/libgit2/pygit2,1092,2021-10-01T03:21:35Z,2021-10-06T06:05:25Z,2021-11-04T05:32:49Z,MERGED,True,6,2,4,https://github.com/skshetry,Add support for Python3.10,5,[],https://github.com/libgit2/pygit2/pull/1092,https://github.com/hugovk,6,https://github.com/libgit2/pygit2/pull/1092#issuecomment-958881052,"Waiting for appveyor/ci#3741 (fixed in #1103)

Need to also update trove classifiers, tox's env, etc.","Waiting for Python 3.10 support appveyor/ci#3741.


Now available: appveyor/ci#3741 (comment)",True,{'THUMBS_UP': ['https://github.com/skshetry']}
libgit2/pygit2,https://github.com/libgit2/pygit2,1093,2021-10-06T15:04:15Z,2021-10-07T10:01:14Z,2021-10-08T09:39:27Z,MERGED,True,2,1,1,https://github.com/skshetry,fetch wheel from macos11.pkg for Python3.10,1,[],https://github.com/libgit2/pygit2/pull/1093,https://github.com/skshetry,1,https://github.com/libgit2/pygit2/pull/1093,"I still haven't been able to build wheel in macos yet. bdist_wheel builds platform-based wheel locally but it builds universal wheel on the CI.
See: https://github.com/skshetry/pygit2/runs/3816156599?check_suite_focus=true#step:4:579
Any help on this would be great. Thanks.","I still haven't been able to build wheel in macos yet. bdist_wheel builds platform-based wheel locally but it builds universal wheel on the CI.
See: https://github.com/skshetry/pygit2/runs/3816156599?check_suite_focus=true#step:4:579
Any help on this would be great. Thanks.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1098,2021-10-19T21:03:13Z,2021-10-20T07:45:37Z,2022-03-06T08:55:25Z,MERGED,True,239,2,4,https://github.com/jorio,Add Repository.amend_commit,1,[],https://github.com/libgit2/pygit2/pull/1098,https://github.com/jorio,1,https://github.com/libgit2/pygit2/pull/1098,This is a Python binding for libgit2's git_commit_amend().,This is a Python binding for libgit2's git_commit_amend().,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1100,2021-10-23T12:15:37Z,,2021-10-31T08:44:38Z,OPEN,False,12,3,2,https://github.com/yoichi,Fixes #962: First create a git_patch to get delta->flags correctly,1,[],https://github.com/libgit2/pygit2/pull/1100,https://github.com/yoichi,1,https://github.com/libgit2/pygit2/pull/1100,"diff_get_delta_byindex() may result incorrect value of delta->flags
as described in the comment of git_diff_get_delta() (git2/diff.h)
Note that the flags on the delta related to whether it has binary
content or not may not be set if there are no attributes set for the
file and there has been no reason to load the file data at this point.
For now, if you need those flags to be up to date, your only option is
to either use `git_diff_foreach` or create a `git_patch`.

this pull request fixes #962","diff_get_delta_byindex() may result incorrect value of delta->flags
as described in the comment of git_diff_get_delta() (git2/diff.h)
Note that the flags on the delta related to whether it has binary
content or not may not be set if there are no attributes set for the
file and there has been no reason to load the file data at this point.
For now, if you need those flags to be up to date, your only option is
to either use `git_diff_foreach` or create a `git_patch`.

this pull request fixes #962",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1100,2021-10-23T12:15:37Z,,2021-10-31T08:44:38Z,OPEN,False,12,3,2,https://github.com/yoichi,Fixes #962: First create a git_patch to get delta->flags correctly,1,[],https://github.com/libgit2/pygit2/pull/1100,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/1100#issuecomment-955660096,"diff_get_delta_byindex() may result incorrect value of delta->flags
as described in the comment of git_diff_get_delta() (git2/diff.h)
Note that the flags on the delta related to whether it has binary
content or not may not be set if there are no attributes set for the
file and there has been no reason to load the file data at this point.
For now, if you need those flags to be up to date, your only option is
to either use `git_diff_foreach` or create a `git_patch`.

this pull request fixes #962","My concern is that building the patch would be a waste of time if the flags are not used later.
The alternative would be to build the patch lazily, when the flags are asked for, but this may not be easy.
I've done the related commit 464836c , if none of GIT_DIFF_FLAG_BINARY and GIT_DIFF_FLAG_NOT_BINARY have been set then the flags have not been loaded and the patch should be built.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1101,2021-10-29T22:35:58Z,2021-10-31T08:05:10Z,2021-11-01T05:30:28Z,MERGED,True,106,0,5,https://github.com/thcipriani,feat: Wrap libgit2 git_message_trailers,3,[],https://github.com/libgit2/pygit2/pull/1101,https://github.com/thcipriani,1,https://github.com/libgit2/pygit2/pull/1101,"git-log has a formatting function to extract trailers from the commit
message field. The libgit2 function git_message_trailers implements
this logic and seems to catch a lot of corner cases.
Rather than ask users to extract trailers from commit messages by
fiddling with the message attribute of the Commit object, wrap the
libgit2 implementation.","git-log has a formatting function to extract trailers from the commit
message field. The libgit2 function git_message_trailers implements
this logic and seems to catch a lot of corner cases.
Rather than ask users to extract trailers from commit messages by
fiddling with the message attribute of the Commit object, wrap the
libgit2 implementation.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1101,2021-10-29T22:35:58Z,2021-10-31T08:05:10Z,2021-11-01T05:30:28Z,MERGED,True,106,0,5,https://github.com/thcipriani,feat: Wrap libgit2 git_message_trailers,3,[],https://github.com/libgit2/pygit2/pull/1101,https://github.com/thcipriani,2,https://github.com/libgit2/pygit2/pull/1101#issuecomment-955085594,"git-log has a formatting function to extract trailers from the commit
message field. The libgit2 function git_message_trailers implements
this logic and seems to catch a lot of corner cases.
Rather than ask users to extract trailers from commit messages by
fiddling with the message attribute of the Commit object, wrap the
libgit2 implementation.","Hi all! This is my first attempt to generate a python module wrapping a library. I did my best to follow the patterns of the repo.
I added a test and modified the recipes doc. Let me know if I missed anything! ❤️",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1101,2021-10-29T22:35:58Z,2021-10-31T08:05:10Z,2021-11-01T05:30:28Z,MERGED,True,106,0,5,https://github.com/thcipriani,feat: Wrap libgit2 git_message_trailers,3,[],https://github.com/libgit2/pygit2/pull/1101,https://github.com/jdavid,3,https://github.com/libgit2/pygit2/pull/1101#issuecomment-955655355,"git-log has a formatting function to extract trailers from the commit
message field. The libgit2 function git_message_trailers implements
this logic and seems to catch a lot of corner cases.
Rather than ask users to extract trailers from commit messages by
fiddling with the message attribute of the Commit object, wrap the
libgit2 implementation.",thanks!,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1103,2021-11-03T11:12:00Z,2021-11-03T15:00:20Z,2021-11-17T12:47:27Z,MERGED,True,4,0,1,https://github.com/skshetry,ci/appveyor: build Python 3.10 wheel for Windows,1,[],https://github.com/libgit2/pygit2/pull/1103,https://github.com/skshetry,1,https://github.com/libgit2/pygit2/pull/1103,Appveyor now has a support for the Python 3.10: appveyor/ci#3741 (comment),Appveyor now has a support for the Python 3.10: appveyor/ci#3741 (comment),True,{'THUMBS_UP': ['https://github.com/kevinvalk']}
libgit2/pygit2,https://github.com/libgit2/pygit2,1103,2021-11-03T11:12:00Z,2021-11-03T15:00:20Z,2021-11-17T12:47:27Z,MERGED,True,4,0,1,https://github.com/skshetry,ci/appveyor: build Python 3.10 wheel for Windows,1,[],https://github.com/libgit2/pygit2/pull/1103,https://github.com/cjolowicz,2,https://github.com/libgit2/pygit2/pull/1103#issuecomment-963848584,Appveyor now has a support for the Python 3.10: appveyor/ci#3741 (comment),@jdavid @skshetry The wheels don't seem to be on PyPI yet.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1103,2021-11-03T11:12:00Z,2021-11-03T15:00:20Z,2021-11-17T12:47:27Z,MERGED,True,4,0,1,https://github.com/skshetry,ci/appveyor: build Python 3.10 wheel for Windows,1,[],https://github.com/libgit2/pygit2/pull/1103,https://github.com/cjolowicz,3,https://github.com/libgit2/pygit2/pull/1103#issuecomment-963973885,Appveyor now has a support for the Python 3.10: appveyor/ci#3741 (comment),"@jdavid Would you be able to make a release, so the Windows wheels for Python 3.10 get published?",True,"{'THUMBS_UP': ['https://github.com/kevinvalk', 'https://github.com/skshetry']}"
libgit2/pygit2,https://github.com/libgit2/pygit2,1103,2021-11-03T11:12:00Z,2021-11-03T15:00:20Z,2021-11-17T12:47:27Z,MERGED,True,4,0,1,https://github.com/skshetry,ci/appveyor: build Python 3.10 wheel for Windows,1,[],https://github.com/libgit2/pygit2/pull/1103,https://github.com/skshetry,4,https://github.com/libgit2/pygit2/pull/1103#issuecomment-971546857,Appveyor now has a support for the Python 3.10: appveyor/ci#3741 (comment),"@cjolowicz, it will be in the next release.

@jdavid, would it be possible to make a new release?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1104,2021-11-03T15:51:06Z,2021-11-03T16:34:45Z,2021-11-04T04:16:41Z,MERGED,True,6,4,1,https://github.com/skshetry,ci: fix broken link to macOS pkg for 3.10 Python builds,1,[],https://github.com/libgit2/pygit2/pull/1104,https://github.com/skshetry,1,https://github.com/libgit2/pygit2/pull/1104,"macOS wheels are failing because the link is broken and the official site now points to https://www.python.org/ftp/python/3.10.0/python-3.10.0post2-macos11.pkg instead of https://www.python.org/ftp/python/3.10.0/python-3.10.0-macos11.pkg before.
Also, it now says that it has been updated for macOS Monterey.
CI failure: https://github.com/libgit2/pygit2/runs/4094160397
Also, see pypa/cibuildwheel#902.
Testing on my fork https://github.com/skshetry/pygit2/runs/4094757646.","macOS wheels are failing because the link is broken and the official site now points to https://www.python.org/ftp/python/3.10.0/python-3.10.0post2-macos11.pkg instead of https://www.python.org/ftp/python/3.10.0/python-3.10.0-macos11.pkg before.
Also, it now says that it has been updated for macOS Monterey.
CI failure: https://github.com/libgit2/pygit2/runs/4094160397
Also, see pypa/cibuildwheel#902.
Testing on my fork https://github.com/skshetry/pygit2/runs/4094757646.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1105,2021-11-08T08:53:46Z,2021-11-09T08:43:16Z,2021-11-09T08:43:16Z,MERGED,True,24,15,2,https://github.com/keszybz,Add example for .get_attr() to docs,2,[],https://github.com/libgit2/pygit2/pull/1105,https://github.com/keszybz,1,https://github.com/libgit2/pygit2/pull/1105,,,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1109,2021-11-26T11:11:23Z,2021-12-02T10:55:00Z,2021-12-02T10:55:01Z,MERGED,True,133,143,4,https://github.com/simoncozens,Use cibuildwheel; build MacOS universal,6,[],https://github.com/libgit2/pygit2/pull/1109,https://github.com/simoncozens,1,https://github.com/libgit2/pygit2/pull/1109,"This does two things:

Uses the cibuildwheel library and action to build the wheels, which simplifies the GitHub action somewhat.
Compiles universal builds of openssl, libssh2, libgit2 and pygit2 on macOS. (Fixes #1102)","This does two things:

Uses the cibuildwheel library and action to build the wheels, which simplifies the GitHub action somewhat.
Compiles universal builds of openssl, libssh2, libgit2 and pygit2 on macOS. (Fixes #1102)",True,"{'HEART': ['https://github.com/efiop', 'https://github.com/m4rc1e', 'https://github.com/skshetry', 'https://github.com/pmrowla']}"
libgit2/pygit2,https://github.com/libgit2/pygit2,1109,2021-11-26T11:11:23Z,2021-12-02T10:55:00Z,2021-12-02T10:55:01Z,MERGED,True,133,143,4,https://github.com/simoncozens,Use cibuildwheel; build MacOS universal,6,[],https://github.com/libgit2/pygit2/pull/1109,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/1109#issuecomment-980272117,"This does two things:

Uses the cibuildwheel library and action to build the wheels, which simplifies the GitHub action somewhat.
Compiles universal builds of openssl, libssh2, libgit2 and pygit2 on macOS. (Fixes #1102)","Great job! I didn't know about cibuildwheel
There's quite some duplication in the build.sh, install-deps.sh and install-deps-mac.sh scripts.
I'd prefer to have only one build.sh. So we will need a section:
if [ -n ""$OPENSSL_VERSION"" ]; then
    [...]
fi

It's okay if it only works with macOS for now.
Some other things that are now done unconditionally should be in such blocks. For example:
if [ ""$1"" = ""wheel"" ]; then
    [...]
else
    [...]
fi

May become:
if [ ""$1"" = ""wheel"" ]; then
    [...]
elif [ ""$1"" = ""inplace"" ]; then
    [...]
fi

So at the end we can have just 1 script.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1109,2021-11-26T11:11:23Z,2021-12-02T10:55:00Z,2021-12-02T10:55:01Z,MERGED,True,133,143,4,https://github.com/simoncozens,Use cibuildwheel; build MacOS universal,6,[],https://github.com/libgit2/pygit2/pull/1109,https://github.com/simoncozens,3,https://github.com/libgit2/pygit2/pull/1109#issuecomment-980414842,"This does two things:

Uses the cibuildwheel library and action to build the wheels, which simplifies the GitHub action somewhat.
Compiles universal builds of openssl, libssh2, libgit2 and pygit2 on macOS. (Fixes #1102)","Ah, yes, fair comment. I will have a look at merging them back into one script on Monday.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1109,2021-11-26T11:11:23Z,2021-12-02T10:55:00Z,2021-12-02T10:55:01Z,MERGED,True,133,143,4,https://github.com/simoncozens,Use cibuildwheel; build MacOS universal,6,[],https://github.com/libgit2/pygit2/pull/1109,https://github.com/simoncozens,4,https://github.com/libgit2/pygit2/pull/1109#issuecomment-981787061,"This does two things:

Uses the cibuildwheel library and action to build the wheels, which simplifies the GitHub action somewhat.
Compiles universal builds of openssl, libssh2, libgit2 and pygit2 on macOS. (Fixes #1102)","OK, I think this is done - inplace tests and CI builds both working.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1109,2021-11-26T11:11:23Z,2021-12-02T10:55:00Z,2021-12-02T10:55:01Z,MERGED,True,133,143,4,https://github.com/simoncozens,Use cibuildwheel; build MacOS universal,6,[],https://github.com/libgit2/pygit2/pull/1109,https://github.com/jdavid,5,https://github.com/libgit2/pygit2/pull/1109#issuecomment-984385046,"This does two things:

Uses the cibuildwheel library and action to build the wheels, which simplifies the GitHub action somewhat.
Compiles universal builds of openssl, libssh2, libgit2 and pygit2 on macOS. (Fixes #1102)","Looks good!
Just a few comments:


Now the artifacts are uploaded with the name artifact while the download step uses the name wheels. Whatever names used, they mast match, otherwise the pypi job will fail.


The misc/build-all-manylinux-wheels.sh and misc/build-manylinux-wheels.sh are not used anymore, so they can be removed.


Please update to cibuildwheel v2.3.0",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1112,2021-12-11T17:59:23Z,2021-12-13T15:02:48Z,2021-12-13T15:11:10Z,MERGED,True,127,0,4,https://github.com/frindler,Added Repository.merge_base_many and Repository.merge_base_octopus,3,[],https://github.com/libgit2/pygit2/pull/1112,https://github.com/frindler,1,https://github.com/libgit2/pygit2/pull/1112,This provides an interface to git_merge_base_many and git_merge_base_octopus. One can then repeatedly merge things using merge_trees.,This provides an interface to git_merge_base_many and git_merge_base_octopus. One can then repeatedly merge things using merge_trees.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1117,2022-01-26T00:43:00Z,2022-01-26T15:06:19Z,2022-03-06T08:54:39Z,MERGED,True,275,2,6,https://github.com/jorio,"Add Stash type, Repository.listall_stashes",2,[],https://github.com/libgit2/pygit2/pull/1117,https://github.com/jorio,1,https://github.com/libgit2/pygit2/pull/1117,Issue #885,Issue #885,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1117,2022-01-26T00:43:00Z,2022-01-26T15:06:19Z,2022-03-06T08:54:39Z,MERGED,True,275,2,6,https://github.com/jorio,"Add Stash type, Repository.listall_stashes",2,[],https://github.com/libgit2/pygit2/pull/1117,https://github.com/jorio,2,https://github.com/libgit2/pygit2/pull/1117#issuecomment-1022117921,Issue #885,Thank you for your review! I have addressed your feedback in 1205eb7 and added some documentation for the new features as well.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1117,2022-01-26T00:43:00Z,2022-01-26T15:06:19Z,2022-03-06T08:54:39Z,MERGED,True,275,2,6,https://github.com/jorio,"Add Stash type, Repository.listall_stashes",2,[],https://github.com/libgit2/pygit2/pull/1117,https://github.com/jdavid,3,https://github.com/libgit2/pygit2/pull/1117#issuecomment-1022287783,Issue #885,"Merged, thanks for your contribution!",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1118,2022-01-26T16:04:12Z,2022-01-26T17:47:41Z,2022-03-06T08:53:51Z,MERGED,True,5,162,13,https://github.com/jorio,Clean up obsolete function declarations in C headers,1,[],https://github.com/libgit2/pygit2/pull/1118,https://github.com/jorio,1,https://github.com/libgit2/pygit2/pull/1118,"As I was preparing my previous PR, I noticed that many functions declared in C headers aren't implemented or used anywhere.
I suspect these declarations are remnants of previous refactors.
After removing the obsolete declarations, some header files were empty so I deleted those altogether.","As I was preparing my previous PR, I noticed that many functions declared in C headers aren't implemented or used anywhere.
I suspect these declarations are remnants of previous refactors.
After removing the obsolete declarations, some header files were empty so I deleted those altogether.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1118,2022-01-26T16:04:12Z,2022-01-26T17:47:41Z,2022-03-06T08:53:51Z,MERGED,True,5,162,13,https://github.com/jorio,Clean up obsolete function declarations in C headers,1,[],https://github.com/libgit2/pygit2/pull/1118,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/1118#issuecomment-1022445932,"As I was preparing my previous PR, I noticed that many functions declared in C headers aren't implemented or used anywhere.
I suspect these declarations are remnants of previous refactors.
After removing the obsolete declarations, some header files were empty so I deleted those altogether.",Good catch,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1120,2022-01-28T19:13:38Z,2022-01-29T07:19:25Z,2022-03-06T08:53:54Z,MERGED,True,3,3,1,https://github.com/jorio,Fix _sideband_progress_cb never calls RemoteCallbacks.sideband_progress,1,[],https://github.com/libgit2/pygit2/pull/1120,https://github.com/jorio,1,https://github.com/libgit2/pygit2/pull/1120,Issue #1119,Issue #1119,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1121,2022-01-30T18:50:54Z,2022-03-06T08:29:09Z,2022-03-06T08:29:09Z,MERGED,True,716,95,20,https://github.com/jorio,Type hints for _pygit2 (C module),8,[],https://github.com/libgit2/pygit2/pull/1121,https://github.com/jorio,1,https://github.com/libgit2/pygit2/pull/1121,"In IDEs like PyCharm, type hinting doesn't work well with the contents of pygit2._pygit2 (the part of pygit2 that's written in C). This hinders autocompletion for important classes like Commit, Branch, etc.
This PR introduces _pygit2.pyi, which annotates types implemented in C. This makes it much more pleasant to work with pygit2 in an IDE.
In a nutshell, I used stubgen to create type stubs. Then I refined them manually, and I ensured that stubtest doesn't report errors.
If we merge this PR, we should keep the stubs file in sync with any API changes we make in the C codebase from now on. The consistency of the type stubs can be tested with build.sh stubtest — I suggest we add this step to CI. Stubtest isn't perfect: it won't catch discrepancies in argument types, but it will raise errors if we miss a new function or member variable.

This PR ties in with issue #709, but it doesn't fix it completely: we'll still need to annotate more places in the Python codebase.","In IDEs like PyCharm, type hinting doesn't work well with the contents of pygit2._pygit2 (the part of pygit2 that's written in C). This hinders autocompletion for important classes like Commit, Branch, etc.
This PR introduces _pygit2.pyi, which annotates types implemented in C. This makes it much more pleasant to work with pygit2 in an IDE.
In a nutshell, I used stubgen to create type stubs. Then I refined them manually, and I ensured that stubtest doesn't report errors.
If we merge this PR, we should keep the stubs file in sync with any API changes we make in the C codebase from now on. The consistency of the type stubs can be tested with build.sh stubtest — I suggest we add this step to CI. Stubtest isn't perfect: it won't catch discrepancies in argument types, but it will raise errors if we miss a new function or member variable.

This PR ties in with issue #709, but it doesn't fix it completely: we'll still need to annotate more places in the Python codebase.",True,{'HEART': ['https://github.com/edran']}
libgit2/pygit2,https://github.com/libgit2/pygit2,1121,2022-01-30T18:50:54Z,2022-03-06T08:29:09Z,2022-03-06T08:29:09Z,MERGED,True,716,95,20,https://github.com/jorio,Type hints for _pygit2 (C module),8,[],https://github.com/libgit2/pygit2/pull/1121,https://github.com/jdavid,2,https://github.com/libgit2/pygit2/pull/1121#issuecomment-1026566362,"In IDEs like PyCharm, type hinting doesn't work well with the contents of pygit2._pygit2 (the part of pygit2 that's written in C). This hinders autocompletion for important classes like Commit, Branch, etc.
This PR introduces _pygit2.pyi, which annotates types implemented in C. This makes it much more pleasant to work with pygit2 in an IDE.
In a nutshell, I used stubgen to create type stubs. Then I refined them manually, and I ensured that stubtest doesn't report errors.
If we merge this PR, we should keep the stubs file in sync with any API changes we make in the C codebase from now on. The consistency of the type stubs can be tested with build.sh stubtest — I suggest we add this step to CI. Stubtest isn't perfect: it won't catch discrepancies in argument types, but it will raise errors if we miss a new function or member variable.

This PR ties in with issue #709, but it doesn't fix it completely: we'll still need to annotate more places in the Python codebase.","This is great!
Just sometimes we loss some information, for example:
-  ""applies(diff, location=GIT_APPLY_LOCATION_INDEX) -> bool\n""
+  ""applies(diff: Diff, location: int = ...) -> bool\n""
Here we win the type information, in the docs for example this renders a nice link for Diff. But we lose the default value for the location argument. Cannot we keep both?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1121,2022-01-30T18:50:54Z,2022-03-06T08:29:09Z,2022-03-06T08:29:09Z,MERGED,True,716,95,20,https://github.com/jorio,Type hints for _pygit2 (C module),8,[],https://github.com/libgit2/pygit2/pull/1121,https://github.com/jorio,3,https://github.com/libgit2/pygit2/pull/1121#issuecomment-1027128507,"In IDEs like PyCharm, type hinting doesn't work well with the contents of pygit2._pygit2 (the part of pygit2 that's written in C). This hinders autocompletion for important classes like Commit, Branch, etc.
This PR introduces _pygit2.pyi, which annotates types implemented in C. This makes it much more pleasant to work with pygit2 in an IDE.
In a nutshell, I used stubgen to create type stubs. Then I refined them manually, and I ensured that stubtest doesn't report errors.
If we merge this PR, we should keep the stubs file in sync with any API changes we make in the C codebase from now on. The consistency of the type stubs can be tested with build.sh stubtest — I suggest we add this step to CI. Stubtest isn't perfect: it won't catch discrepancies in argument types, but it will raise errors if we miss a new function or member variable.

This PR ties in with issue #709, but it doesn't fix it completely: we'll still need to annotate more places in the Python codebase.",Fixed! That was an oversight.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1121,2022-01-30T18:50:54Z,2022-03-06T08:29:09Z,2022-03-06T08:29:09Z,MERGED,True,716,95,20,https://github.com/jorio,Type hints for _pygit2 (C module),8,[],https://github.com/libgit2/pygit2/pull/1121,https://github.com/jdavid,4,https://github.com/libgit2/pygit2/pull/1121#issuecomment-1031389261,"In IDEs like PyCharm, type hinting doesn't work well with the contents of pygit2._pygit2 (the part of pygit2 that's written in C). This hinders autocompletion for important classes like Commit, Branch, etc.
This PR introduces _pygit2.pyi, which annotates types implemented in C. This makes it much more pleasant to work with pygit2 in an IDE.
In a nutshell, I used stubgen to create type stubs. Then I refined them manually, and I ensured that stubtest doesn't report errors.
If we merge this PR, we should keep the stubs file in sync with any API changes we make in the C codebase from now on. The consistency of the type stubs can be tested with build.sh stubtest — I suggest we add this step to CI. Stubtest isn't perfect: it won't catch discrepancies in argument types, but it will raise errors if we miss a new function or member variable.

This PR ties in with issue #709, but it doesn't fix it completely: we'll still need to annotate more places in the Python codebase.","For discover_repository today the docs are (see https://www.pygit2.org/repository.html#pygit2.discover_repository):
pygit2.discover_repository(path[, across_fs[, ceiling_dirs]]) → str
With this PR it will read:
pygit2.discover_repository(path: str, across_fs: bool = False, ceiling_dirs: str = ...) → str
The ellipsis default value for ceiling_dirs is kind of undefined. In this particular case the default value should be the empty string; actually omitting ceiling_dirs will pass NULL to libgit2, but in this case (git_repository_discover) it's equivalent to the empty string.
From what I've seen the documentation is generated from the doc strings, while the editors use the information in the type hints?
So both have to be kept synchronized. For example Worktree.prune(force=False) is correctly rendered in the documentation, even though in the stubs file it uses the ellipsis.
Then, can you please:

Check that the documentation strings and the type hints match
Replace the ellipsis by a proper default value in function arguments

Thanks!",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1121,2022-01-30T18:50:54Z,2022-03-06T08:29:09Z,2022-03-06T08:29:09Z,MERGED,True,716,95,20,https://github.com/jorio,Type hints for _pygit2 (C module),8,[],https://github.com/libgit2/pygit2/pull/1121,https://github.com/jorio,5,https://github.com/libgit2/pygit2/pull/1121#issuecomment-1059831127,"In IDEs like PyCharm, type hinting doesn't work well with the contents of pygit2._pygit2 (the part of pygit2 that's written in C). This hinders autocompletion for important classes like Commit, Branch, etc.
This PR introduces _pygit2.pyi, which annotates types implemented in C. This makes it much more pleasant to work with pygit2 in an IDE.
In a nutshell, I used stubgen to create type stubs. Then I refined them manually, and I ensured that stubtest doesn't report errors.
If we merge this PR, we should keep the stubs file in sync with any API changes we make in the C codebase from now on. The consistency of the type stubs can be tested with build.sh stubtest — I suggest we add this step to CI. Stubtest isn't perfect: it won't catch discrepancies in argument types, but it will raise errors if we miss a new function or member variable.

This PR ties in with issue #709, but it doesn't fix it completely: we'll still need to annotate more places in the Python codebase.","Some ellipses were oversights (such as Worktree.prune), but most were deliberate, because many pygit2 functions implemented in C don't have fallback values for optional parameters. For instance:
Tree.diff_to_tree([tree: Tree, flags: int, context_lines: int, interhunk_lines: int, swap: bool = False])
When calling this function, it's OK to omit tree. However, passing tree=None causes TypeError, which isn't the same effect as omitting the argument. This is because the C implementation doesn't check for None; it only considers whether the parameter is present or not.
This construct (optional arguments without a default value) is difficult to translate to the type stub syntax. It'd be misleading to have tree=None, and the [] syntax doesn't exist in type stubs, which is why I went for tree=....
That said, I understand your concern about losing information in the docs, so my latest commit in the PR restores the old square-bracket notation in the PyDoc_STRVARs wherever there is no adequate default value.
The type stubs still have some ellipses out of necessity, but this is no problem for the HTML docs because Sphinx only looks at the C code, not at the stubs.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1125,2022-02-10T14:11:50Z,2022-02-11T15:29:40Z,2022-02-11T15:29:41Z,MERGED,True,83,0,3,https://github.com/skieffer,"Add recipes for committing, and cloning with progress monitor.",2,[],https://github.com/libgit2/pygit2/pull/1125,https://github.com/skieffer,1,https://github.com/libgit2/pygit2/pull/1125,Hi. I thought these might be helpful additions to the docs.,Hi. I thought these might be helpful additions to the docs.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1129,2022-02-23T10:41:10Z,2022-02-23T12:46:27Z,2022-02-23T12:54:14Z,MERGED,True,5,5,3,https://github.com/KSmanis,Define dependencies consistently using environment markers,1,[],https://github.com/libgit2/pygit2/pull/1129,https://github.com/KSmanis,1,https://github.com/libgit2/pygit2/pull/1129,"Closes: #1128
Signed-off-by: Konstantinos Smanis konstantinos.smanis@gmail.com","Closes: #1128
Signed-off-by: Konstantinos Smanis konstantinos.smanis@gmail.com",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1130,2022-02-23T20:22:18Z,2022-02-24T09:51:03Z,2022-02-24T09:59:55Z,MERGED,True,9,3,1,https://github.com/roehling,Work around size mismatch between enum and Py_ssize_t,1,[],https://github.com/libgit2/pygit2/pull/1130,https://github.com/roehling,1,https://github.com/libgit2/pygit2/pull/1130,"The ODB backend class uses PyArgs_ParseTuple with format identifier ""n"" to parse git_object_t type IDs. However, enums are not necessarily of type Py_ssize_t; in fact, the C standard does not constrain the underlying integer type. On big endian architectures such as s390x, this leads to unwanted cutoffs of the lower bits, yielding 0 instead of 3 as object type in tests/test_odb_backend.py.
This PR works around the issue by parsing the type into a well-known integer type first, and then casting to the git_object_t enum type, avoiding the undefined behavior.","The ODB backend class uses PyArgs_ParseTuple with format identifier ""n"" to parse git_object_t type IDs. However, enums are not necessarily of type Py_ssize_t; in fact, the C standard does not constrain the underlying integer type. On big endian architectures such as s390x, this leads to unwanted cutoffs of the lower bits, yielding 0 instead of 3 as object type in tests/test_odb_backend.py.
This PR works around the issue by parsing the type into a well-known integer type first, and then casting to the git_object_t enum type, avoiding the undefined behavior.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1131,2022-03-13T18:23:50Z,2022-03-14T08:12:22Z,2022-03-14T08:12:22Z,MERGED,True,6,6,1,https://github.com/jorio,Fix parse_diff tests not calling correct function,1,[],https://github.com/libgit2/pygit2/pull/1131,https://github.com/jorio,1,https://github.com/libgit2/pygit2/pull/1131,"The parse_diff function was moved out of Repository in the past, but some tests weren't updated to reflect this change.
The tests passed because they expected any exception to be raised, but they weren't actually calling the correct function (Diff.parse_diff).","The parse_diff function was moved out of Repository in the past, but some tests weren't updated to reflect this change.
The tests passed because they expected any exception to be raised, but they weren't actually calling the correct function (Diff.parse_diff).",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1132,2022-03-13T18:31:34Z,2022-03-14T08:16:08Z,2022-03-14T08:16:08Z,MERGED,True,10,10,1,https://github.com/jorio,"Improved type hinting in Branches, References",1,[],https://github.com/libgit2/pygit2/pull/1132,https://github.com/jorio,1,https://github.com/libgit2/pygit2/pull/1132,"Specifying the type of repository in the constructors of Branches and References helps IDEs resolve the type of expressions such as:
repo.references[""refs/remotes/origin/master""] ---> Reference
repo.branches.local[""master""] ---> Branch","Specifying the type of repository in the constructors of Branches and References helps IDEs resolve the type of expressions such as:
repo.references[""refs/remotes/origin/master""] ---> Reference
repo.branches.local[""master""] ---> Branch",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1135,2022-03-22T05:02:49Z,2022-03-22T08:47:16Z,2022-03-22T08:47:16Z,MERGED,True,49,3,4,https://github.com/dahlia,Add `str()` and `repr()` support to `Signature` type,2,[],https://github.com/libgit2/pygit2/pull/1135,https://github.com/dahlia,1,https://github.com/libgit2/pygit2/pull/1135,"For better logging and easier debugging, this patch adds str() and repr() support to Signature type.","For better logging and easier debugging, this patch adds str() and repr() support to Signature type.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1139,2022-04-26T14:58:24Z,2022-04-26T18:57:30Z,2022-04-26T19:03:25Z,MERGED,True,0,1,1,https://github.com/alexfikl,Remove redundant to_bytes in remote fetch,1,[],https://github.com/libgit2/pygit2/pull/1139,https://github.com/alexfikl,1,https://github.com/libgit2/pygit2/pull/1139,"Encoded again just below in
err = C.git_remote_fetch(self._remote, arr, opts, to_bytes(message))","Encoded again just below in
err = C.git_remote_fetch(self._remote, arr, opts, to_bytes(message))",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1142,2022-05-02T19:57:48Z,2022-05-06T06:08:01Z,2022-05-06T11:50:33Z,MERGED,True,282,34,7,https://github.com/kuwv,feat: add commit signing,2,[],https://github.com/libgit2/pygit2/pull/1142,https://github.com/kuwv,1,https://github.com/libgit2/pygit2/pull/1142,"Overview
This pull request will add commit signing capability to the repository object. It is modeled off both the libgit2 and rugged implementations. It will allow integration with a 3rd party GPG signing tool.
References
#647
https://github.com/libgit2/rugged/blob/master/ext/rugged/rugged_commit.c#L791
https://github.com/libgit2/rugged/blob/master/ext/rugged/rugged_commit.c#L842
https://github.com/libgit2/pygit2/blob/master/test/test_commit_gpg.py
libgit2/libgit2#6293","Overview
This pull request will add commit signing capability to the repository object. It is modeled off both the libgit2 and rugged implementations. It will allow integration with a 3rd party GPG signing tool.
References
#647
https://github.com/libgit2/rugged/blob/master/ext/rugged/rugged_commit.c#L791
https://github.com/libgit2/rugged/blob/master/ext/rugged/rugged_commit.c#L842
https://github.com/libgit2/pygit2/blob/master/test/test_commit_gpg.py
libgit2/libgit2#6293",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1142,2022-05-02T19:57:48Z,2022-05-06T06:08:01Z,2022-05-06T11:50:33Z,MERGED,True,282,34,7,https://github.com/kuwv,feat: add commit signing,2,[],https://github.com/libgit2/pygit2/pull/1142,https://github.com/kuwv,2,https://github.com/libgit2/pygit2/pull/1142#issuecomment-1115303053,"Overview
This pull request will add commit signing capability to the repository object. It is modeled off both the libgit2 and rugged implementations. It will allow integration with a 3rd party GPG signing tool.
References
#647
https://github.com/libgit2/rugged/blob/master/ext/rugged/rugged_commit.c#L791
https://github.com/libgit2/rugged/blob/master/ext/rugged/rugged_commit.c#L842
https://github.com/libgit2/pygit2/blob/master/test/test_commit_gpg.py
libgit2/libgit2#6293",@jdavid I am currently writing the tests for this but I wanted to get this in front of you first.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1142,2022-05-02T19:57:48Z,2022-05-06T06:08:01Z,2022-05-06T11:50:33Z,MERGED,True,282,34,7,https://github.com/kuwv,feat: add commit signing,2,[],https://github.com/libgit2/pygit2/pull/1142,https://github.com/jdavid,3,https://github.com/libgit2/pygit2/pull/1142#issuecomment-1115870825,"Overview
This pull request will add commit signing capability to the repository object. It is modeled off both the libgit2 and rugged implementations. It will allow integration with a 3rd party GPG signing tool.
References
#647
https://github.com/libgit2/rugged/blob/master/ext/rugged/rugged_commit.c#L791
https://github.com/libgit2/rugged/blob/master/ext/rugged/rugged_commit.c#L842
https://github.com/libgit2/pygit2/blob/master/test/test_commit_gpg.py
libgit2/libgit2#6293","Thanks @kuwv, looks good.
There is some code duplication, but it doesn't look easy to avoid, so it's ok.
Only waiting for the tests then.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1142,2022-05-02T19:57:48Z,2022-05-06T06:08:01Z,2022-05-06T11:50:33Z,MERGED,True,282,34,7,https://github.com/kuwv,feat: add commit signing,2,[],https://github.com/libgit2/pygit2/pull/1142,https://github.com/kuwv,4,https://github.com/libgit2/pygit2/pull/1142#issuecomment-1116083817,"Overview
This pull request will add commit signing capability to the repository object. It is modeled off both the libgit2 and rugged implementations. It will allow integration with a 3rd party GPG signing tool.
References
#647
https://github.com/libgit2/rugged/blob/master/ext/rugged/rugged_commit.c#L791
https://github.com/libgit2/rugged/blob/master/ext/rugged/rugged_commit.c#L842
https://github.com/libgit2/pygit2/blob/master/test/test_commit_gpg.py
libgit2/libgit2#6293","Thanks @kuwv, looks good. There is some code duplication, but it doesn't look easy to avoid, so it's ok. Only waiting for the tests then.

Yeah, I guess two functions could potentially be combined later but I didn't want to introduce any breaking changes to the API. So, I choose to model Rugged and git2-rs.
One question, together neither function updates the HEAD reference. The Rugged implementation also does not. Should I add the reference update to commit_with_signature or should the API consumer do it?
Edit: Actually, I just remembered. I think I'd have to import an additional lib to perform the head update. I'll update the documentation for now instead.",True,"{'THUMBS_UP': ['https://github.com/jdavid', 'https://github.com/webknjaz']}"
libgit2/pygit2,https://github.com/libgit2/pygit2,1142,2022-05-02T19:57:48Z,2022-05-06T06:08:01Z,2022-05-06T11:50:33Z,MERGED,True,282,34,7,https://github.com/kuwv,feat: add commit signing,2,[],https://github.com/libgit2/pygit2/pull/1142,https://github.com/jdavid,5,https://github.com/libgit2/pygit2/pull/1142#issuecomment-1118224132,"Overview
This pull request will add commit signing capability to the repository object. It is modeled off both the libgit2 and rugged implementations. It will allow integration with a 3rd party GPG signing tool.
References
#647
https://github.com/libgit2/rugged/blob/master/ext/rugged/rugged_commit.c#L791
https://github.com/libgit2/rugged/blob/master/ext/rugged/rugged_commit.c#L842
https://github.com/libgit2/pygit2/blob/master/test/test_commit_gpg.py
libgit2/libgit2#6293","Please use gpgsigned.zip and remove gpgsigned.git
In my latest commit b472bda I've moved to use .zip files only, because with libgit2 1.4.3 there were ownership issues with .tar and raw .git data. I'm surprised that the tests pass for aarch64, but even then I think it's better to only use zip files.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1142,2022-05-02T19:57:48Z,2022-05-06T06:08:01Z,2022-05-06T11:50:33Z,MERGED,True,282,34,7,https://github.com/kuwv,feat: add commit signing,2,[],https://github.com/libgit2/pygit2/pull/1142,https://github.com/kuwv,6,https://github.com/libgit2/pygit2/pull/1142#issuecomment-1118482743,"Overview
This pull request will add commit signing capability to the repository object. It is modeled off both the libgit2 and rugged implementations. It will allow integration with a 3rd party GPG signing tool.
References
#647
https://github.com/libgit2/rugged/blob/master/ext/rugged/rugged_commit.c#L791
https://github.com/libgit2/rugged/blob/master/ext/rugged/rugged_commit.c#L842
https://github.com/libgit2/pygit2/blob/master/test/test_commit_gpg.py
libgit2/libgit2#6293","Please use gpgsigned.zip and remove gpgsigned.git

sure

I've moved to use .zip files only...

Yup, I saw that. Pardon my cruft, just needed to check.
Aside from that should I be worried about the appveyor tests?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1142,2022-05-02T19:57:48Z,2022-05-06T06:08:01Z,2022-05-06T11:50:33Z,MERGED,True,282,34,7,https://github.com/kuwv,feat: add commit signing,2,[],https://github.com/libgit2/pygit2/pull/1142,https://github.com/kuwv,7,https://github.com/libgit2/pygit2/pull/1142#issuecomment-1118522924,"Overview
This pull request will add commit signing capability to the repository object. It is modeled off both the libgit2 and rugged implementations. It will allow integration with a 3rd party GPG signing tool.
References
#647
https://github.com/libgit2/rugged/blob/master/ext/rugged/rugged_commit.c#L791
https://github.com/libgit2/rugged/blob/master/ext/rugged/rugged_commit.c#L842
https://github.com/libgit2/pygit2/blob/master/test/test_commit_gpg.py
libgit2/libgit2#6293","Alright, should be good now. Any additional changes you would like to see here?
Maybe shorten create_commit_with_signature to create_commit_signature or add_commit_signature?",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1142,2022-05-02T19:57:48Z,2022-05-06T06:08:01Z,2022-05-06T11:50:33Z,MERGED,True,282,34,7,https://github.com/kuwv,feat: add commit signing,2,[],https://github.com/libgit2/pygit2/pull/1142,https://github.com/jdavid,8,https://github.com/libgit2/pygit2/pull/1142#issuecomment-1118629633,"Overview
This pull request will add commit signing capability to the repository object. It is modeled off both the libgit2 and rugged implementations. It will allow integration with a 3rd party GPG signing tool.
References
#647
https://github.com/libgit2/rugged/blob/master/ext/rugged/rugged_commit.c#L791
https://github.com/libgit2/rugged/blob/master/ext/rugged/rugged_commit.c#L842
https://github.com/libgit2/pygit2/blob/master/test/test_commit_gpg.py
libgit2/libgit2#6293","Aside from that should I be worried about the appveyor tests?

No, the appveyor tests are failing because of the upgrade to libgit2 v1.4.3, so it's unrelated.

Alright, should be good now. Any additional changes you would like to see here?

Only one last thing: can you rebase and squash?
At least commits e0880ce and c8e5509 should be squashed so we don't to keep .gpgsigned.git in history, which would add weight to the repo.

Maybe shorten create_commit_with_signature to create_commit_signature or add_commit_signature?

No, I think the current name is fine, we often follow libgit2's naming.",True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1142,2022-05-02T19:57:48Z,2022-05-06T06:08:01Z,2022-05-06T11:50:33Z,MERGED,True,282,34,7,https://github.com/kuwv,feat: add commit signing,2,[],https://github.com/libgit2/pygit2/pull/1142,https://github.com/kuwv,9,https://github.com/libgit2/pygit2/pull/1142#issuecomment-1119067359,"Overview
This pull request will add commit signing capability to the repository object. It is modeled off both the libgit2 and rugged implementations. It will allow integration with a 3rd party GPG signing tool.
References
#647
https://github.com/libgit2/rugged/blob/master/ext/rugged/rugged_commit.c#L791
https://github.com/libgit2/rugged/blob/master/ext/rugged/rugged_commit.c#L842
https://github.com/libgit2/pygit2/blob/master/test/test_commit_gpg.py
libgit2/libgit2#6293",@jdavid Should be good now.,True,{}
libgit2/pygit2,https://github.com/libgit2/pygit2,1142,2022-05-02T19:57:48Z,2022-05-06T06:08:01Z,2022-05-06T11:50:33Z,MERGED,True,282,34,7,https://github.com/kuwv,feat: add commit signing,2,[],https://github.com/libgit2/pygit2/pull/1142,https://github.com/jdavid,10,https://github.com/libgit2/pygit2/pull/1142#issuecomment-1119288549,"Overview
This pull request will add commit signing capability to the repository object. It is modeled off both the libgit2 and rugged implementations. It will allow integration with a 3rd party GPG signing tool.
References
#647
https://github.com/libgit2/rugged/blob/master/ext/rugged/rugged_commit.c#L791
https://github.com/libgit2/rugged/blob/master/ext/rugged/rugged_commit.c#L842
https://github.com/libgit2/pygit2/blob/master/test/test_commit_gpg.py
libgit2/libgit2#6293",Thanks!,True,{'THUMBS_UP': ['https://github.com/kuwv']}
